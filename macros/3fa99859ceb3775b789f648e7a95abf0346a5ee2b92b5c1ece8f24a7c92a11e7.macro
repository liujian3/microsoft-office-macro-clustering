Attribute VB_Name = "Module1"
Option Explicit

Declare Function mdlRefFile_reattach Lib "stdmdlbltin.dll" (ByVal modelRef As _
    Long, ByVal outName As String, ByVal fileName As String, ByVal modelName As _
    Long) As Long

'/*----------------------------------------------------------------------+
'|                                                                       |
'| Copyright 1993-2003, Bentley Systems, Incorporated                    |
'| All rights reserved.                                                  |
'|                                                                       |
'| Limited permission is hereby granted to reproduce and modify this     |
'| copyrighted material provided that the resulting code is used only in |
'| conjunction with Bentley Systems products under the terms of the      |
'| license agreement provided therein, and that this notice is retained  |
'| in its entirety in any such reproduction or modification.             |
'|                                                                       |
'+----------------------------------------------------------------------*/

' This VBA example will change the reference file attachment by using 2
' arguments. The 1st argument is the existing reference's full path and
' file name, the 2nd argument is the new reference's full path and file name

Public Enum fileNameParseReturnType
    FileNameOnlyType
    FilePathOnlyType
    FileExtOnlyType
End Enum

'-----------------------------------------------------------------------+
'
'   name        ReattachRef
'
'   Author      BSI                                         01/2003
'
'-----------------------------------------------------------------------+
Function ReattachRef(att As Attachment, strNewFileName As String, _
                    strNewModelName As String) As Long
                    
    Dim lModelName As Long

    If Len(strNewModelName) > 0 Then
        lModelName = StrPtr(strNewModelName)
    End If
    ReattachRef = mdlRefFile_reattach(att.MdlModelRefP, vbNullString, _
                                    strNewFileName, lModelName)
End Function

'-----------------------------------------------------------------------+
'
'   name        FileNameParse
'
'   Author      BSI                                         01/2003
'
'-----------------------------------------------------------------------+
Public Function FileNameParse(fileName As String, returnType As _
                                fileNameParseReturnType) As String
    Dim backSlashPos As Long
    Dim dotPos As Long
    
    backSlashPos = InStrRev(fileName, "\") + 1
    dotPos = InStrRev(fileName, ".")
    
    Select Case returnType
        Case FileNameOnlyType: FileNameParse = Mid$(fileName, backSlashPos, _
                                                    dotPos - backSlashPos)
        Case FilePathOnlyType: FileNameParse = Mid$(fileName, 1, backSlashPos - 1)
        Case FileExtOnlyType: FileNameParse = Mid$(fileName, dotPos + 1)
    End Select
End Function

'-----------------------------------------------------------------------+
'
'   name        GetRefAttachment
'
'   author      BSI                                             01/2003
'
'-----------------------------------------------------------------------+
Sub GetRefAttachment(existingRefPath As String, newRefPath As String)

    Dim testVar As String
    Dim fileName() As String
    Dim fullFileName As String
    Dim oAttachment As Attachment
    Dim oAttachments As attachments
    Dim attachmentExist As Boolean
    Dim refName As String
    Dim extension As String
    
    Set oAttachments = ActiveModelReference.attachments
    
    For Each oAttachment In oAttachments
    
        ' Extract the file name. Other values can be extracted at this
        ' point. Instead of name, you could extract the logicalName or
        ' path.
        fullFileName = oAttachment.DesignFile.Name
        
        ' Returns only the file name
        refName = FileNameParse(existingRefPath, FileNameOnlyType)
        
        ' Returns only the file extension
        extension = FileNameParse(existingRefPath, FileExtOnlyType)
        
        refName = refName & "." & extension
        
        If refName = fullFileName Then
            attachmentExist = True
            ReattachRef oAttachment, newRefPath, "Default"
        End If
        
        If attachmentExist = False Then
            ShowMessage existingRefPath & " is not an existing attachment"
        Else
            ShowMessage existingRefPath & " is attached correctly"
            RedrawAllViews
        End If
    Next
   
End Sub

'-----------------------------------------------------------------------+
'
'   name        FileExist
'
'   Author      BSI                                         01/2003
'
'-----------------------------------------------------------------------+
Public Function FileExist(fileName As String) As Boolean
    Dim fileNumber As Long
    
    fileNumber = FreeFile
    FileExist = True
    On Error GoTo NotFound
    Open fileName For Input As fileNumber
    GoTo Done
    
NotFound:
    FileExist = False
    Exit Function

Done:
    On Error GoTo 0
    Close fileNumber
End Function

'-----------------------------------------------------------------------+
'
'   name        ParseArguments
'
'   Author      BSI                                         01/2003
'
'-----------------------------------------------------------------------+
Public Sub ParseArguments(fileName As String)
    Dim parseArray() As String
    Dim count   As Long
    Dim i       As Long
    
    parseArray = Split(fileName, " ", -1, vbTextCompare)

    For count = 0 To UBound(parseArray)
        If i <= 1 Then
            If FileExist(parseArray(i)) = False Then
                ShowMessage "The file from argument: " & CStr(i + 1) & _
                            " is not found"
                Exit Sub
            End If
        Else
            ShowMessage _
            "There are more then to arguments passed. Only the first 2 are used"
        End If
        i = i + 1
    Next

    If i < 2 Then
        ShowMessage _
        "2 arguments need to be passed, existing reference then new reference"
        Exit Sub
    Else
        GetRefAttachment parseArray(0), parseArray(1)
    End If
    
End Sub

'-----------------------------------------------------------------------+
'
'   name        StartApp
'
'   author      BSI                                             01/2003
'
'-----------------------------------------------------------------------+
Sub StartApp()

    Dim refName As String
    Dim getArguments As String
    
    ' Gets the argument from the key-in window
    getArguments = KeyinArguments
    
    ' Passes the arguments for processing
    ParseArguments getArguments
   
End Sub

' InQuest injected base64 decoded content
' ~)^5

INQUEST-PP=macro
