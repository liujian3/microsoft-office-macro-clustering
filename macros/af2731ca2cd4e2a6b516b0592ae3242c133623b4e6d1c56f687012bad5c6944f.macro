Attribute VB_Name = "AddUserUserForm"
Attribute VB_Base = "0{F239F366-9693-4467-9C17-F42D8F84D00C}{6D8D5FF2-7F06-4E11-B6FD-BB7BC7C51649}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CancelUserCreation_Click()

AddUserUserForm.Hide

End Sub

Private Sub CreateUserButton_Click()

NewUserName = UserNameTextbox.Value
NewUserLogon = UserLogonTextbox.Value
NewUserPassword = UserPasswordTextbox.Value
'MsgBox NewUserName & NewUserLogon & NewUserPassword

Module4.SaveNewUserInDB

MsgBox "User " & NewUserName & " has been created. You can now continue with creating other users, or click cancel and choose other application options in the drop-down menu"

UserNameTextbox.Value = ""
UserLogonTextbox.Value = ""
UserPasswordTextbox.Value = ""

End Sub


Attribute VB_Name = "ModifyUserUserForm"
Attribute VB_Base = "0{CD90FE78-75AA-4B97-A19F-CB6CC1293B3A}{75221B48-5D95-47C0-9795-4A6237A444F6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CancelUserCreation_Click()

AddUserUserForm.Hide

End Sub

Private Sub CancelUserModification_Click()
ModifyUserUserForm.Hide

End Sub

Private Sub ModifyUserButton_Click()

ModifiedUserName = ModifiedUserNameTextbox.Value
ModifiedUserLogon = ModifiedUserLogonTextbox.Value
ModifiedUserPassword = ModifiedUserPasswordTextbox.Value
'MsgBox ModifiedUserName & ModifiedUserLogon & ModifiedUserPassword

'Module4.ModifyUser

UserNameTextbox.Value = ""
UserLogonTextbox.Value = ""
UserPasswordTextbox.Value = ""

End Sub

Private Sub CreateUserButton_Click()

End Sub

Private Sub CurrentUserLogon_Click()

CurrentUserLogon.Visible = False

End Sub

Private Sub CurrentUserName_Click()

CurrentUserName.Visible = False


End Sub

Private Sub CurrentUserPassword_Click()

CurrentUserPassword.Visible = False

End Sub

Private Sub UserPasswordTextbox_Change()

End Sub

Attribute VB_Name = "Module1"
'module 1 code
'flag to switch off events
Public bFlag As Boolean

'data entry sheet name
Public Const DataEntry As String = "DataEntry"
Public LoadMessage As String
Public MarketKey As Integer
Public SiteKey As Integer
Public LineKey As Integer
Public KPIKey As Integer
Public FrequencyKey As String
Public PeriodKey As String
Public ShiftKey As Integer


Public gblnDataLoad As Boolean
Public gblnComboRefresh As Boolean
Public gblnValidDateFrom As Boolean
Public gblnValidDateTo As Boolean
Public gintAppVersion As Integer

Public mobjADOConn As ADODB.Connection
Private mintUserKey As Integer
Private mstrUserType As String
Private mobjThirdPartyWorkbook As Workbook
Private mobjExcel As Excel.Application

'D_User column names
Private Const FieldUserKey As String = "UserKey"
Private Const FieldUserType As String = "UserType"
Private Const FieldExcelAppVersion As String = "ExcelAppVersion"

' secutiy and connections declarations
'Private Const SQLConnectionString As String = "Driver={SQL Server Native Client 11.0};Server=(localdb)\v11.0;Initial Catalog=MOVEKPI_DEV;Trusted_Connection=yes"
' Maciek Private Const SQLConnectionString As String = "Driver={SQL Server Native Client 11.0};Server=locahost\SQLEXPRESS;Initial Catalog=Global_Supply_DEV;Trusted_Connection=yes"
'Private Const SQLConnectionString As String = "Driver={SQL Server Native Client 11.0};Server=localhost\SQLEXPRESS;Initial Catalog=Global_Supply_DEV_X;Trusted_Connection=yes"
'Private Const SQLConnectionString As String = "Driver={SQL Server};Server=10.23.126.49;Initial Catalog=Global_Supply_TEST;Trusted_Connection=yes"
'Connection to live server UK5VSUPSQLP31
Private Const SQLConnectionString As String = "Driver={SQL Server};Server=UK5VSUPSQLP31.guww.net;Initial Catalog=Global_Supply_PROD;Trusted_Connection=yes"
'Private Const SQLConnectionString As String = "Driver={SQL Server};Server=10.23.126.49;Initial Catalog=Global_Supply_DEV;Trusted_Connection=yes"
'Private Const SQLConnectionString As String = "Driver={SQL Server Native Client 11.0};Server=(localdb)\v11.0;Initial Catalog=em;Trusted_Connection=yes"
'Private Const SQLConnectionString As String = "Driver={SQL Server Native Client 11.0};Server=pol-skoszel;Initial Catalog=Global_Supply__DEV;Trusted_Connection=yes"
'Private Const SQLConnectionString As String = "Driver={SQL Server};Server=10.114.198.124\SQL2014;Initial Catalog=Global_Supply_DEV2;Trusted_Connection=yes"

Private Const IID_IDispatch As String = "{00020400-0000-0000-C000-000000000046}"
Private Const OBJID_NATIVEOM As Long = &HFFFFFFF0

Private Declare PtrSafe Function GetTickCount Lib "kernel32" () As Long

Declare PtrSafe Function FindWindowEx Lib "user32" Alias "FindWindowExA" (ByVal hWnd1 As Long, ByVal hWnd2 As Long, ByVal lpsz1 As String, ByVal lpsz2 As String) As Long
Declare PtrSafe Function GetClassName Lib "user32" Alias "GetClassNameA" (ByVal hwnd As Long, ByVal lpClassName As String, ByVal nMaxCount As Long) As Long
Declare PtrSafe Function IIDFromString Lib "ole32" (ByVal lpsz As Long, ByRef lpiid As UUID) As Long
Declare PtrSafe Function AccessibleObjectFromWindow Lib "oleacc" (ByVal hwnd As Long, ByVal dwId As Long, ByRef riid As UUID, ByRef ppvObject As Object) As Long

Private Declare PtrSafe Function GetWindowText Lib "user32" Alias "GetWindowTextA" (ByVal hwnd As Long, ByVal lpString As String, ByVal cch As Long) As Long


Private Type UUID
  Data1 As Long
  Data2 As Integer
  Data3 As Integer
  Data4(7) As Byte
  End Type
  Public cboCol As Collection 'create list of all comboboxes in sheet for data entry\
Public Function GetKPIKeyFun() As Integer
On Error Resume Next
If Sheets("Sheet2").Cells(Sheets(1).Shapes("LineSelector").ControlFormat.ListIndex, 6).Value = "All Lines" Then
GetKPIKeyFun = Sheets("Sheet2").Cells(Sheets(1).Shapes("KPISelector").ControlFormat.ListIndex, 7).Value
Else
GetKPIKeyFun = Sheets("Sheet2").Cells(Sheets(1).Shapes("KPISelector").ControlFormat.ListIndex, 29).Value
End If

End Function
Public Function CheckForNulls() As Boolean
Dim lastrow As Integer

With Sheets("DataEntry")
lastrow = .Cells(.Rows.Count, "A").End(xlUp).row
End With
For r = 11 To lastrow

If IsEmpty(Sheets("DataEntry").Cells(r, 7)) = True Then

CheckForNulls = True
Exit Function
Else

CheckForNulls = False
End If
Next r

End Function
Public Function OEEPackagingAndAllLines() As Boolean
If Sheets("Sheet2").Cells(Sheets(1).Shapes("LineSelector").ControlFormat.ListIndex, 6).Value = "All Lines" And GetKPIKeyFun = 1 Then
OEEPackagingAndAllLines = True
Else
OEEPackagingAndAllLines = False
End If
End Function
Public Function DirectLabourAndAllLines() As Boolean 'Direct Labour Productivity (Packaging)
If Sheets("Sheet2").Cells(Sheets(1).Shapes("LineSelector").ControlFormat.ListIndex, 6).Value = "All Lines" And GetKPIKeyFun = 437 Then
DirectLabourAndAllLines = True
Else
DirectLabourAndAllLines = False
End If
End Function

Sub Dupa()
MsgBox OEEPackagingAndAllLines
End Sub
Sub ConnectionError()
MsgBox "Connection with server lost. To continue work please restart DataEntryMake application."
ActiveWorkbook.Close
End Sub
Sub UnableToConnect()
'MsgBox ("Unable to connect")
MsgBox "Application was unable to connect with the server and will close. Check your Internet connection and try again."
ActiveWorkbook.Close

End Sub

Public Function ValidUser() As Boolean

    Dim blnRetVal As Boolean
    Dim objADORecordset As ADODB.Recordset
    
    On Error GoTo ErrHandler
    
    blnRetVal = False
    
    Call OpenADOConnection
    'Environ("UserName") -> references Microsoft Scripting Runtime
    
    Set objADORecordset = GetUserDetails(Environ("UserName"))
    
    
    
    If Not objADORecordset.BOF And Not objADORecordset.EOF Then
    
        mintUserKey = objADORecordset.Fields(FieldUserKey)
        
        mstrUserType = objADORecordset.Fields(FieldUserType)
        
        gintAppVersion = objADORecordset.Fields(FieldExcelAppVersion)
        
        blnRetVal = True
        
        
    End If
    'debug
        
ExitFunction:
    ValidUser = blnRetVal
    Exit Function
ErrHandler:
    DisplayError "Module1.ValidUser", Err.Number, Err.Description
    blnRetVal = False
    Resume ExitFunction
    
End Function

Public Sub DisplayError(strProc As String, ErrNum As Long, ErrDesc As String)

    Dim ErrMsg As String
    
    ErrMsg = "Procedure: " & strProc & vbCrLf & vbCrLf
    ErrMsg = ErrMsg & "Error No. : " & ErrNum & vbCrLf & vbCrLf
    ErrMsg = ErrMsg & "Error Desc : " & ErrDesc & vbCrLf
    
    MsgBox ErrMsg, vbCritical, ActiveWorkbook.Name


End Sub

Public Sub OpenADOConnection()

    On Error GoTo ErrHandler
    'MsgBox ("OpenADOConnection")

    Set mobjADOConn = New ADODB.Connection

    mobjADOConn.Open SQLConnectionString

ExitSub:
    Exit Sub
ErrHandler:
    Module1.UnableToConnect
    Resume ExitSub
    
End Sub

Public Sub CloseADOConnection()

    On Error GoTo ErrHandler

    mobjADOConn.Close
    
    Set mobjADOConn = Nothing

ExitSub:
    Exit Sub
ErrHandler:
    Module1.ConnectionError
    Resume ExitSub

End Sub

'function to retrieve user details

Private Function GetUserDetails(strUserLogon) As ADODB.Recordset

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
    On Error GoTo ErrHandler
        
    Set objADOCmd = New ADODB.Command
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If
    
    objADOCmd.ActiveConnection = mobjADOConn

    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserLogon", adVarChar, adParamInput, 255, strUserLogon)
   
                
    objADOCmd.CommandText = "sp_Get_UserKey"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
            
    Set GetUserDetails = objADORecordset
            
ExitFunction:
    Exit Function
ErrHandler:
    Module1.ConnectionError
    Resume ExitFunction
    
End Function
Sub ProtectDataEntryFullSheet()

Sheets("DataEntry").Cells.Locked = True
Sheets("DataEntry").Protect(Password = lalala, UserInterfaceOnly:=True) = True

End Sub
Sub UnprotectSheet()

Worksheets(1).Unprotect (Password = lalala)
Cells.Locked = True

End Sub
Sub ProtectSheet()

Range("f11:f" & lastrow & "," & "i11:i" & lastrow).Locked = False

Worksheets("Sheet1").Protect(Password = lalala, UserInterfaceOnly:=True) = True

End Sub
Sub ClearChangeFlagColumn()

Sheets(1).Columns(25).ClearContents
Sheets(1).Columns(26).ClearContents
Sheets(1).Columns(27).ClearContents

End Sub
Sub isemptycheck()

 Dim NoRowsRS As Integer
    Dim r As Integer
    
    lastrow = Sheets(1).Cells(Sheets(1).Rows.Count, "A").End(xlUp).row
    NoRowsRS = lastrow - 10

For r = 1 To NoRowsRS
    If IsEmpty(Cells(10 + r, 7)) = True And IsEmpty(Cells(10 + r, 9)) = True Then
        Cells(10 + r, 27).Value = 0
    End If
Next r
End Sub

Sub getMarketNew()

bFlag = True
'ValidUser
Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
    On Error GoTo ErrHandler
                
    Set objADOCmd = New ADODB.Command
    
    If mobjADOConn Is Nothing Then ValidUser
   
    If mobjADOConn.State <> 1 Then
        Call OpenADOConnection
    End If

    objADOCmd.ActiveConnection = mobjADOConn
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserKey", adInteger, adParamInput, , mintUserKey)
    objADOCmd.CommandText = "sp_Get_MarketUserSite"
    
    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    
   Sheets("Sheet2").Range("A1").CopyFromRecordset objADORecordset
   Module2.PopulateMarket
   
    

bFlag = False

ExitSub:
    Exit Sub
ErrHandler:
    If Err.Number = 1004 Then
    Exit Sub
    Else
    Module1.ConnectionError
    Resume ExitSub
    End If

End Sub

Sub getSiteNew()

bFlag = True
'ValidUser
Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
    On Error GoTo ErrHandler
                
    Set objADOCmd = New ADODB.Command
    
    If mobjADOConn Is Nothing Then ValidUser
   
    If mobjADOConn.State <> 1 Then
        Call OpenADOConnection
    End If
    
    MarketKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("MarketSelector").ControlFormat.ListIndex, 1).Value


    objADOCmd.ActiveConnection = mobjADOConn
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserKey", adVarChar, adParamInput, 255, mintUserKey)
    
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@MarketKey", adInteger, adParamInput, , MarketKey)
    'objADOCmd.Parameters.Append objADOCmd.CreateParameter("@MarketKey", adInteger, adParamInput, , 1)
    objADOCmd.CommandText = "sp_Get_SiteMarket"
    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    
    Sheets("Sheet2").Range("C1").CopyFromRecordset objADORecordset
    Module2.PopulateSite
   
    

bFlag = False

ExitSub:
    Exit Sub
ErrHandler:

    If Err.Number = 1004 Then
    Exit Sub
    Else
    Module1.ConnectionError
    Resume ExitSub
    End If

End Sub

Public Sub getLineNew()

bFlag = True

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
    On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    ' If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn Is Nothing Then ValidUser
     
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If
    
    SiteKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("SiteSelector").ControlFormat.ListIndex, 3).Value

    objADOCmd.ActiveConnection = mobjADOConn

    'objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserKey", adInteger, adParamInput, , mintUserKey)
    
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@SiteKey", adInteger, adParamInput, , SiteKey)
    objADOCmd.CommandText = "sp_Get_LineSite"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    Application.CalculateUntilAsyncQueriesDone
    
    Sheets("Sheet2").Range("E1").CopyFromRecordset objADORecordset
    
    Module2.PopulateLine

bFlag = False

ExitSub:
    Exit Sub
ErrHandler:

    If Err.Number = 1004 Then
    Exit Sub
    Else
    
    Module1.ConnectionError
    Resume ExitSub
    End If
End Sub
Public Sub getKPINew()
bFlag = True

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
    On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    If mobjADOConn Is Nothing Then ValidUser
     
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If
    
    SiteKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("SiteSelector").ControlFormat.ListIndex, 3).Value
    Debug.Print SiteKey
    
    objADOCmd.ActiveConnection = mobjADOConn

    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@SiteKey", adInteger, adParamInput, , SiteKey)
    
    'objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserKey", adInteger, adParamInput, , mintUserKey)
    
    objADOCmd.CommandText = "sp_Get_KPI_SuiteSite"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    Application.CalculateUntilAsyncQueriesDone
    
    Sheets("Sheet2").Range("G1").CopyFromRecordset objADORecordset
    Module2.PopulateKPI
    
    
    

bFlag = False

ExitSub:
    Exit Sub
ErrHandler:

    If Err.Number = 1004 Then
    Exit Sub
    Else

    Module1.ConnectionError

    Resume ExitSub
    
    End If

End Sub
Public Sub getFrequencyNew()

bFlag = True

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
    On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If
    
    SiteKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("SiteSelector").ControlFormat.ListIndex, 3).Value
    'KPIKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("KPISelector").ControlFormat.ListIndex, 7).Value
'        If Sheets("Sheet2").Cells(Sheets(1).Shapes("LineSelector").ControlFormat.ListIndex, 6).Value = "All Lines" Then
'        KPIKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("KPISelector").ControlFormat.ListIndex, 7).Value
'        Else
'        KPIKey = 1
'        End If
    
    objADOCmd.ActiveConnection = mobjADOConn

    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@SiteKey", adInteger, adParamInput, , SiteKey)
    
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@KPISuiteKey", adInteger, adParamInput, , GetKPIKeyFun)
    objADOCmd.CommandTimeout = 0
    objADOCmd.CommandText = "sp_Get_Reporting_FrequencySiteKPISuite"

   ' MsgBox "freq" & Sheets(DataEntry).Site & Sheets(DataEntry).KPI
    Application.CalculateUntilAsyncQueriesDone
    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    
    Sheets("Sheet2").Range("I1").CopyFromRecordset objADORecordset
    Module2.PopulateFrequency
    
       

    
bFlag = False

ExitSub:
    Exit Sub
ErrHandler:
    If Err.Number = 1004 Then
    Exit Sub
    Else
    Module1.ConnectionError
    
    Resume ExitSub
    End If

End Sub
Public Sub getDisciplineNew()

bFlag = True
'Application.Wait (Now + TimeValue("0:00:01"))
     
    
    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
    Sheets(2).Columns(32).ClearContents
    
    On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    
    If mobjADOConn Is Nothing Then ValidUser
    
       
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If
    
        SiteKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("SiteSelector").ControlFormat.ListIndex, 3).Value

    objADOCmd.ActiveConnection = mobjADOConn

    'objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserKey", adInteger, adParamInput, , mintUserKey)
    
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@SiteKey", adInteger, adParamInput, , SiteKey)
    objADOCmd.CommandText = "sp_Get_DisciplineSite"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    Application.CalculateUntilAsyncQueriesDone
    
    Sheets("Sheet2").Range("AF1").CopyFromRecordset objADORecordset
    objADOCmd.ActiveConnection = mobjADOConn


bFlag = False
'MsgBox "week ended"

ExitSub:
    Exit Sub
ErrHandler:
    If Err.Number = 1004 Then
    Exit Sub
    Else
    Module1.ConnectionError
    Resume ExitSub
    End If

End Sub
Public Sub getPeriodNew()
Debug.Print
bFlag = True
'Application.Wait (Now + TimeValue("0:00:01"))
     
    
    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    Dim strUserLogon As String
    On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    
    strUserLogon = Environ("UserName")
    SiteKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("SiteSelector").ControlFormat.ListIndex, 3).Value
    
    If mobjADOConn Is Nothing Then ValidUser
    
       
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If
    
    FrequencyKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("FrequencySelector").ControlFormat.ListIndex, 9).Value

    objADOCmd.ActiveConnection = mobjADOConn

    'objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserKey", adInteger, adParamInput, , mintUserKey)
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@ReportingFrequency", adVarChar, adParamInput, 255, FrequencyKey)
    
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserLogon", adVarChar, adParamInput, 255, strUserLogon)
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserSiteKey", adVarChar, adParamInput, 255, SiteKey)
    
    
    objADOCmd.CommandText = "sp_Get_DateRangeFrequency"
        objADOCmd.CommandTimeout = 0
    Application.CalculateUntilAsyncQueriesDone
    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    Sheets("Sheet2").Range("K1").CopyFromRecordset objADORecordset
    
   ' MsgBox objADORecordset.Fields(0)
  '  MsgBox objADORecordset.Status
    Module2.PopulatePeriod
    
    
    If FrequencyKey = "Daily" Then
    Sheets("Sheet2").Columns(12).NumberFormat = "m/d/yyyy"
    
    Else
    Sheets("Sheet2").Columns(12).NumberFormat = "General"
    End If
    Call Sheets(1).FormatLabelsSelectorsButtonsNew
    Call Sheets(1).FormatShiftNew
bFlag = False
'MsgBox "week ended"

ExitSub:
    Exit Sub
ErrHandler:
    If Err.Number = 1004 Then
    Exit Sub
    Else
    Module1.ConnectionError
    Resume ExitSub
    End If

End Sub

Public Sub getShiftNew()

bFlag = True

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
    On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    ' If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn Is Nothing Then ValidUser
     
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If

    objADOCmd.ActiveConnection = mobjADOConn


    objADOCmd.CommandText = "sp_Get_Shift"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    Application.CalculateUntilAsyncQueriesDone
    
    Sheets("Sheet2").Range("M1").CopyFromRecordset objADORecordset
    Module2.PopulateShift
    

bFlag = False

ExitSub:
    Exit Sub
ErrHandler:
    If Err.Number = 1004 Then
    Exit Sub
    Else
    Module1.ConnectionError
    Resume ExitSub
    End If

End Sub
Public Sub getDateNew()
    
'    Sheets(DataEntry).Week.Visible = True
       
    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
    On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If
    FrequencyKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("FrequencySelector").ControlFormat.ListIndex, 9).Value
    PeriodKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("PeriodSelector").ControlFormat.ListIndex, 11).Value
    'If Sheets(DataEntry).Frequency <> "Daily" Then
    
    If FrequencyKey <> "Daily" Then
    
    

    objADOCmd.ActiveConnection = mobjADOConn

    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@ReportingFrequency", adVarChar, adParamInput, 255, FrequencyKey)
    
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@DatePoint", adInteger, adParamInput, , PeriodKey) 'tu jest blad
            
    objADOCmd.CommandTimeout = 0
        
    objADOCmd.CommandText = "sp_Get_StartEndDatesFrequency"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    
    UnprotectSheet
    
    With Sheets(DataEntry)
    
        If Not objADORecordset.BOF And Not objADORecordset.EOF Then
        
            .Shapes("Label7New").TextFrame.Characters.Caption = objADORecordset.Fields(0) 'tu wymienic lejbele
            
            .Shapes("Label8New").TextFrame.Characters.Caption = objADORecordset.Fields(1)
             
        Else
        
            .Shapes("Label7New").TextFrame.Characters.Caption = "Start Date"
            .Shapes("Label8New").TextFrame.Characters.Caption = "End Date"
            
        End If

    End With
End If

ExitSub:
    Exit Sub
ErrHandler:
    If Err.Number = 1004 Then
    Exit Sub
    Else
    Module1.ConnectionError
    Resume ExitSub
    End If

End Sub

Public Sub GetKeys()


MarketKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("MarketSelector").ControlFormat.ListIndex, 1).Value


SiteKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("SiteSelector").ControlFormat.ListIndex, 3).Value
LineKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("LineSelector").ControlFormat.ListIndex, 5).Value
KPIKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("KPISelector").ControlFormat.ListIndex, 7).Value
FrequencyKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("FrequencySelector").ControlFormat.ListIndex, 9).Value
PeriodKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("PeriodSelector").ControlFormat.ListIndex, 11).Value
ShiftKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("ShiftSelector").ControlFormat.ListIndex, 13).Value

'MsgBox MarketKey & ShiftKey & FrequencyKey & PeriodKey

End Sub
Sub enableev()
Application.EnableEvents = True

End Sub
Public Sub getSelDataNew()
Application.EnableEvents = False
bFlag = True

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    Dim lastrow As Long
    
    With Sheets(1)
                lastrow = .Cells(.Rows.Count, "A").End(xlUp).row
            End With
            
        If lastrow > 10 Then
        
        Range("A11:K" & lastrow).ClearContents
        
        End If

    On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    'conn lost
    
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If

    objADOCmd.ActiveConnection = mobjADOConn
   
    Dim dtDate As Date
    'dtDate = Sheets(DataEntry).Label8.Object.Caption
    
    FrequencyKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("FrequencySelector").ControlFormat.ListIndex, 9).Value
    PeriodKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("PeriodSelector").ControlFormat.ListIndex, 11).Value
    LineKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("LineSelector").ControlFormat.ListIndex, 5).Value
'        If Sheets("Sheet2").Cells(Sheets(1).Shapes("LineSelector").ControlFormat.ListIndex, 6).Value = "All Lines" Then
'        KPIKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("KPISelector").ControlFormat.ListIndex, 7).Value
'        Else
'        KPIKey = 1
'        End If
'02-Jul-2018
'ShiftKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("ShiftSelector").ControlFormat.ListIndex, 13).Value
    
    If FrequencyKey = "Daily" Then
        ShiftKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("ShiftSelector").ControlFormat.ListIndex, 13).Value
    Else
        ShiftKey = 1
    End If
'02-Jul-2018

    If FrequencyKey <> "Daily" Then
        dtDate = Sheets(DataEntry).Shapes("Label8New").TextFrame.Characters.Caption
    Else
        dtDate = Sheets("Sheet2").Cells(Sheets(1).Shapes("PeriodSelector").ControlFormat.ListIndex, 11).Value
    End If
    
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@KPISuiteKey", adInteger, adParamInput, , GetKPIKeyFun)
    
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@LineKey", adInteger, adParamInput, , LineKey)
    
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@DayDate", adDBTimeStamp, adParamInput, 12, dtDate)
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@ShiftKey", adInteger, adParamInput, , ShiftKey)
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@ReportingFrequency", adVarChar, adParamInput, 255, FrequencyKey)
    
        'MsgBox objADOCmd.Parameters(0) & objADOCmd.Parameters(1) & objADOCmd.Parameters(2)
     
            
    objADOCmd.CommandText = "sp_Get_KPI_ComponentKPIData"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    
    With Sheets(DataEntry)
       'MsgBox .Label8.Caption & objADORecordset.GetString
       
       'objADORecordset.Fields(1).
        
        If Not objADORecordset.BOF And Not objADORecordset.EOF Then
        '    MsgBox objADORecordset.BOF
            
            .Range("A11").CopyFromRecordset objADORecordset
            
            lastrow = .Cells(.Rows.Count, "A").End(xlUp).row
            
            .Range("g11:g" & lastrow & "," & "i11:i" & lastrow).Locked = False
            .Protect(Password = lalala, UserInterfaceOnly:=True) = True
            
        Else
        
        MsgBox "No data returned"
            
            With Sheets(1)
                lastrow = .Cells(.Rows.Count, "A").End(xlUp).row
            End With
            
        If lastrow > 10 Then
        
        Range("A11:M" & lastrow).ClearContents
        
        End If
        
        End If

    End With
    
ClearChangeFlagColumn

bFlag = False
Application.EnableEvents = True

ExitSub:
    Exit Sub
ErrHandler:
    If Err.Number = 1004 Then
    Exit Sub
    Else
    Module1.ConnectionError
    Resume ExitSub
    End If

End Sub

Public Sub LoadToDBNew()
Application.EnableEvents = False
bFlag = True
    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    Dim actVal As ADODB.Parameter
    Dim TarVal As ADODB.Parameter
    Dim ActCur As Variant
    Dim TarCur As Variant
    Dim dtDate As Date
    Dim ShiftChosen As Integer
    
    Dim NoRowsRS As Integer
    Dim r As Integer
    
    lastrow = Sheets(1).Cells(Sheets(1).Rows.Count, "A").End(xlUp).row
    NoRowsRS = lastrow - 10
    
    On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    'conn lost
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    
    End If

    objADOCmd.ActiveConnection = mobjADOConn
    


For r = 1 To NoRowsRS
    
'If Cells(10 + r, 27).Value = 1 Then

'ActCur = Null

       If IsEmpty(Cells(10 + r, 7)) = True Then
            If IsEmpty(Cells(10 + r, 8)) = True Then
               ActCur = Null
            Else
                ActCur = Cells(10 + r, 8).Value
            End If
        Else
            ActCur = Cells(10 + r, 7).Value
        End If
        
               If IsEmpty(Cells(10 + r, 9)) = True Then
            If IsEmpty(Cells(10 + r, 10)) = True Then
               TarCur = Null
            Else
                TarCur = Cells(10 + r, 10).Value
            End If
        Else
            TarCur = Cells(10 + r, 9).Value
        End If

'TarCur = Null
        

    
    If FrequencyKey = "Daily" Then
    
        ShiftKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("ShiftSelector").ControlFormat.ListIndex, 13).Value
    
    Else
    
        ShiftKey = 1
        
    End If
    

   ' MsgBox "ActCur: " & ActCur & "TarCur: " & TarCur
   
    'dtDate = Sheets(DataEntry).Label8.Object.Caption
  

    If FrequencyKey <> "Daily" Then
    
    dtDate = Sheets(DataEntry).Shapes("Label8New").TextFrame.Characters.Caption
    
    Else
    dtDate = Sheets("Sheet2").Cells(Sheets(1).Shapes("PeriodSelector").ControlFormat.ListIndex, 11).Value
    
    End If
  
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@LineKey", adInteger, adParamInput, , LineKey)
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@KPIComponentKey", adInteger, adParamInput, , Cells(10 + r, 5))
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@DayDate", adDBTimeStamp, adParamInput, , dtDate)
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@ShiftKey", adInteger, adParamInput, , ShiftKey)
    
    Set actVal = objADOCmd.CreateParameter("@ActualValue", adDecimal, adParamInput, , ActCur)
    actVal.Precision = 18
    actVal.NumericScale = 4
    objADOCmd.Parameters.Append actVal
    
    Set TarVal = objADOCmd.CreateParameter("@TargetValue", adDecimal, adParamInput, , TarCur)
    TarVal.Precision = 18
    TarVal.NumericScale = 4
    objADOCmd.Parameters.Append TarVal
    
    'objADOCmd.Parameters.Append objADOCmd.CreateParameter("@ShiftKey", adInteger, adParamInput, , ShiftChosen)
                
    'http://stackoverflow.com/questions/26023900/issues-passing-parameters-to-stored-procedure-with-excel-vba

    objADOCmd.CommandText = "sp_InsertUpdate_KPI_All"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    
    objADOCmd.Parameters.Delete ("@LineKey")
    objADOCmd.Parameters.Delete ("@KPIComponentKey")
    objADOCmd.Parameters.Delete ("@DayDate")
    objADOCmd.Parameters.Delete ("@ActualValue")
    objADOCmd.Parameters.Delete ("@TargetValue")
    objADOCmd.Parameters.Delete ("@ShiftKey")
   
    UnprotectSheet
    
'    LoadMessage = "Data successfully uploaded to DB"
    
'End If

'    LoadMessage = "No changes made"
'End If
Next r

If Sheets(1).Cells(1, 28).Value = 0 Then LoadMessage = "No changes made" Else LoadMessage = "Changes uploaded to DB"

MsgBox LoadMessage

bFlag = False
Application.EnableEvents = True

ClearChangeFlagColumn

ExitSub:
    Exit Sub
ErrHandler:
    Module1.ConnectionError
    Resume ExitSub

End Sub

Public Sub getThirdPartyUsers()
Application.EnableEvents = False
bFlag = True

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
    
    On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    'conn lost
    
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If

    objADOCmd.ActiveConnection = mobjADOConn
   
    Dim dtDate As Date
    'dtDate = Sheets(DataEntry).Label8.Object.Caption
              
    objADOCmd.CommandText = "sp_Delete_ThirdPartyUser"


    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    
    With Sheets("Sheet2")
       'MsgBox .Label8.Caption & objADORecordset.GetString
       
       'objADORecordset.Fields(1).
        
        If Not objADORecordset.BOF And Not objADORecordset.EOF Then
                        
            .Range("R1").CopyFromRecordset objADORecordset
           
        Else
        
        MsgBox "No data returned"
        
        End If

    End With
    
ClearChangeFlagColumn

bFlag = False
Application.EnableEvents = True

ExitSub:
    Exit Sub
ErrHandler:
    Module1.ConnectionError
    Resume ExitSub

End Sub
 Sub usertypecheck()
 
 Application.EnableEvents = False
bFlag = True
 
Dim objADOCmd As ADODB.Command
Dim objADORecordset As ADODB.Recordset
 On Error GoTo ErrHandler
 Set objADORecordset = GetUserDetails(Environ("UserName"))
 mstrUserType = objADORecordset.Fields(FieldUserType)
 
If mstrUserType <> "SuperUser" Then
 
Sheets("3rdPartyMaintenance").Visible = xlSheetVeryHidden
 
Else

Sheets("3rdPartyMaintenance").Visible = True

End If

bFlag = False
Application.EnableEvents = True

ExitSub:
    Exit Sub
ErrHandler:
    Module1.ConnectionError
    Resume ExitSub

 End Sub

Sub HideColumnI()
Sheets("DataEntry").Columns("I").Hidden = True
End Sub


Attribute VB_Name = "Module2"
Private Const SheetName As String = "DataEntry"
Dim bFlagNew As Boolean

Sub PopulateMarket()

With Worksheets(SheetName).Shapes("MarketSelector")
.ControlFormat.ListFillRange = "MarketList"
.ControlFormat.ListIndex = 1
End With

End Sub

Sub PopulateSite()

With Worksheets(SheetName).Shapes("SiteSelector")
.ControlFormat.ListFillRange = "SiteList"
.ControlFormat.ListIndex = 1
End With

End Sub

Sub PopulateLine()

With Worksheets(SheetName).Shapes("LineSelector")
.ControlFormat.ListFillRange = "LineList"
.ControlFormat.ListIndex = 1
End With

End Sub
Sub PopulateKPI()
If Sheets("Sheet2").Cells(Sheets(1).Shapes("LineSelector").ControlFormat.ListIndex, 6).Value = "All Lines" Then
With Worksheets(SheetName).Shapes("KPISelector")
.ControlFormat.ListFillRange = "KPIList"
.ControlFormat.ListIndex = 1
End With
Else
With Worksheets(SheetName).Shapes("KPISelector")
.ControlFormat.ListFillRange = "OEE"
.ControlFormat.ListIndex = 1
End With
End If

End Sub

Public Function DisciplineCount() As Integer

Application.EnableEvents = False
Application.ScreenUpdating = False

Sheets(2).Activate

DisciplineCount = lastrowfind(32)

Sheets("DataEntry").Activate

Application.EnableEvents = True
Application.ScreenUpdating = True

End Function

Sub CreateOEEList()

Dim OEEDesc As String
Dim OEEKey As Integer

Application.EnableEvents = False
Application.ScreenUpdating = False

Sheets(2).Columns(30).ClearContents
Sheets(2).Columns(29).ClearContents

For i = 1 To DisciplineCount
    If Sheets(2).Cells(i, 32).Value = 1 Then
        Sheets(2).Cells(i, 30).Value = "OEE (Brewing)"
        Sheets(2).Cells(i, 29).Value = 101
    ElseIf Sheets(2).Cells(i, 32).Value = 2 Then
        Sheets(2).Cells(i, 30).Value = "OEE (Distilling)"
        Sheets(2).Cells(i, 29).Value = 201
    ElseIf Sheets(2).Cells(i, 32).Value = 3 Then
        Sheets(2).Cells(i, 30).Value = "NewOEE (Packaging)"
        Sheets(2).Cells(i, 29).Value = 425
        Sheets(2).Cells(i + 1, 30).Value = "Direct Labour Productivity (Packaging)"
        Sheets(2).Cells(i + 1, 29).Value = 437
    
    
    Else
        Exit Sub
    End If
    'Sheets(2).Cells(i, 30).Value = OEEDesc
    'Sheets(2).Cells(i, 29).Value = OEEKey
Next i
Sheets("DataEntry").Activate

Application.EnableEvents = True
Application.ScreenUpdating = True

End Sub
Sub PopulateFrequency()

With Worksheets(SheetName).Shapes("FrequencySelector")
.ControlFormat.ListFillRange = "FrequencyList"
.ControlFormat.ListIndex = 1
End With

End Sub
Sub PopulatePeriod()

With Worksheets(SheetName).Shapes("PeriodSelector")
.ControlFormat.ListFillRange = "PeriodList"
.ControlFormat.ListIndex = 1
End With

End Sub
Sub PopulateShift()

With Worksheets(SheetName).Shapes("ShiftSelector")
.ControlFormat.ListFillRange = "ShiftList"
.ControlFormat.ListIndex = 1
End With

End Sub
Sub ClearLists(index As Integer)

Application.ScreenUpdating = False

i = index
Sheets("Sheet2").Activate
Range(Columns(2 * i - 1), Columns(14)).ClearContents
Sheets(1).Activate

Application.ScreenUpdating = True

End Sub



Attribute VB_Name = "Module3"
Public Const FormulaOEE As String = "=((G11-SUM(G12:G15)) -SUM(G16:G21) -Sum(g22:g27))/(G11-SUM(G12:G15))"
Public Const FormulaNewOEE As String = "=G28/(G27-SUM(G11:G14))"
Public Const FormulaATP As String = "=G11/Sum(g11:g20)"
Public Const FormulaCost As String = "= ((g11+g13)-(g12+g14))/(g12+g14)"
Public CalcFormula As String
Public CalcDescription As String
Public Const FormulaCostSiteExtract As String = "= (g25/g24)"
Public Const FormulaCostSiteExtractForWaste As String = "= (g30/g29)"
Public Const FormulaAssCare As String = "= (g11/g16)"
Public Const FormulaCostSpiritLoss As String = "= (g31/g29)"
Public Const FormulaCostOfConversion As String = "= ((G12+G13+G14+G16+G19+G20)/G11)"
Public Const FormulaEmployeeProductivity As String = "= (G11/G12)"
Public Const FormulaBrewingWaste As String = "=((G11 + G12) - (G13 + G14)) / ((G11 + G12) - G13)"

Public Const FormulaNumberOfTotalPlannedOrders As String = "=sum(g11:g20)"

Sub CalculateKPI()
Dim KPIKeyFun As Integer

'
'
'        If Sheets("Sheet2").Cells(Sheets(1).Shapes("LineSelector").ControlFormat.ListIndex, 6).Value = "All Lines" Then
'            KPIKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("KPISelector").ControlFormat.ListIndex, 7).Value
'        Else
'            KPIKey = 1
'        End If

    KPIKeyFun = GetKPIKeyFun

    Sheets(1).Cells(11, 12).Formula = ""
    Sheets(1).Cells(11, 13).Formula = ""
    Sheets(1).Cells(12, 12).Formula = ""
    Sheets(1).Cells(12, 13).Formula = ""
    Sheets(1).Cells(13, 12).Formula = ""
    Sheets(1).Cells(13, 13).Formula = ""

    If KPIKeyFun = 1 Or KPIKeyFun = 101 Or KPIKeyFun = 201 Or KPIKeyFun = 425 Then
        If KPIKeyFun = 425 Then
            CalcFormula = FormulaNewOEE
            CalcDescription = "NewLineOEE:"
        Else
            CalcFormula = FormulaOEE
            CalcDescription = "Line OEE:"
        End If
        Sheets(1).Range("m10").NumberFormat = "0.00%"
    ElseIf KPIKeyFun = 2 Or KPIKeyFun = 102 Or KPIKeyFun = 202 Or KPIKeyFun = 302 Or KPIKeyFun = 402 Then
        If KPIKeyFun = 202 Or KPIKeyFun = 102 Then
            CalcFormula = FormulaCostOfConversion
            CalcDescription = "Cost of Conversion:"
            Sheets(1).Cells(11, 13).Formula = FormulaCostSiteExtract
            Sheets(1).Range("m11").NumberFormat = "0.00%"
            Sheets(1).Range("m10").NumberFormat = "0.00%"
            Sheets(1).Cells(11, 12).Formula = "Site Extract:"
        ElseIf KPIKeyFun = 402 Or KPIKeyFun = 302 Then
            CalcFormula = FormulaCostOfConversion
            CalcDescription = "Cost of Conversion:"
            Sheets(1).Cells(11, 13).Formula = ""
            Sheets(1).Range("m11").NumberFormat = "0.00%"
            Sheets(1).Range("m10").NumberFormat = "0.00%"
        Else
            CalcFormula = FormulaCost
            CalcDescription = "Packaging Waste:"
            Sheets(1).Cells(11, 13).Formula = FormulaCostSpiritLoss
            Sheets(1).Range("m11").NumberFormat = "0.00%"
            Sheets(1).Range("m10").NumberFormat = "0.00%"
            Sheets(1).Range("m12").NumberFormat = "0.00%"
            Sheets(1).Cells(11, 12).Formula = "Spirit Loss:"
        End If
    ElseIf KPIKeyFun = 3 Or KPIKeyFun = 103 Or KPIKeyFun = 203 Then
        CalcFormula = FormulaEmployeeProductivity
        CalcDescription = "Employee Productivity:"
        Sheets(1).Range("m10").NumberFormat = "###0.00"
    ElseIf KPIKeyFun = 4 Or KPIKeyFun = 104 Or KPIKeyFun = 204 Then
        CalcFormula = FormulaATP
        CalcDescription = "Adherence to Plan:"
        Sheets(1).Cells(11, 13).Formula = FormulaNumberOfTotalPlannedOrders
        Sheets(1).Range("m10").NumberFormat = "0.00%"
        Sheets(1).Cells(11, 12).Formula = "No. of total planned orders:"
        Sheets(1).Range("m11").NumberFormat = "#0"
    ElseIf KPIKeyFun = 5 Or KPIKeyFun = 105 Or KPIKeyFun = 205 Then
        CalcFormula = FormulaAssCare
        CalcDescription = "Maintenance Planning Effectiveness:"
        Sheets(1).Range("m10").NumberFormat = "0.00%"
    ElseIf KPIKeyFun = 423 Then
        CalcFormula = FormulaBrewingWaste
        CalcDescription = "Brewing Waste"
        Sheets(1).Range("m10").NumberFormat = "0.00%"
        Sheets(1).Range("m11") = ""
    Else
        CalcFormula = ""
        CalcDescription = "No Calculation for a given KPI Suite"
    End If
        Sheets(1).Cells(10, 12).Formula = CalcDescription
        Sheets(1).Cells(10, 13).Formula = CalcFormula
        

End Sub
Attribute VB_Name = "Module4"
Public NewUserName As String
Public NewUserLogon As String
Public NewUserPassword As String
Public ModifiedUserName As String
Public ModifiedUserLogon As String
Public ModifiedUserPassword As String
Public UserNameShow As String
Public UserLogonShow As String
Public UserPasswordShow As String
Public AddedSiteKey As Integer
Public RemovedSiteKey As Integer
Public UserModifiedKey As Integer
Public FilePath As String
Public FileName As String
Public TemplatePath As String
Public namename As String
Public individualworkbookname As String
Sub hidesheets()
Sheets("Sheet2").Visible = xlSheetVeryHidden
Sheets("TPUSelData").Visible = xlSheetVeryHidden
Sheets("TPUPeriods").Visible = xlSheetVeryHidden
Sheets("TPUEndDates").Visible = xlSheetVeryHidden
Sheets("TargetsTemplates").Visible = xlSheetVeryHidden
Sheets("TargetsData").Visible = xlSheetVeryHidden
End Sub
Sub showhiddensheets()
Sheets("Sheet2").Visible = True
Sheets("TPUSelData").Visible = True
Sheets("TPUPeriods").Visible = True
Sheets("TPUEndDates").Visible = True
Sheets("TargetsTemplates").Visible = True
Sheets("TargetsData").Visible = True
End Sub

Sub DButton_Click()

    Module4.RemoveUserFromDB
    Module4.getThirdPartyUsers

End Sub
Sub RemoveSiteButton_Click()
    Module4.RemoveSiteFromScope
    Module4.getAvailableSites
    Module4.PopulateThirdPartyAvailableSitesSelector
    Module4.getThirdPartyUserSites
End Sub

Sub IssueButton_Click()
    
    Application.ScreenUpdating = False
    Module4.showhiddensheets
    Module4.IssueDataEntry
    Module4.copypastesave
    Module4.hidesheets
   
    'UserNameShow = Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").ControlFormat.ListIndex, 20).Value
    Sheets("3rdPartyMaintenance").Activate
    MsgBox "File for " & UserNameShow & " has been created." & Chr(13) & "User Login: " & UserLogonShow & Chr(13) & "User Password: " & UserPasswordShow & Chr(13) & Chr(13) & "You can always check credentials using this sheet."
    Sheets("3rdPartyMaintenance").Activate
End Sub
Sub AddSiteButton_Click()

    Module4.AddSiteToScope
    MsgBox "Site Added"
    Module4.getAvailableSites
    Module4.PopulateThirdPartyAvailableSitesSelector
    Module4.getThirdPartyUserSites

End Sub

Sub PopulateActionToBeTakenSelector()
On Error Resume Next
With Worksheets(3).Shapes("ActionToBeTakenSelector")
.ControlFormat.ListFillRange = "ActionToBeTakenList"
.ControlFormat.ListIndex = 3
End With

End Sub
Sub PopulateThirdPartyUserNameSelector()
On Error Resume Next
With Worksheets(3).Shapes("ThirdPartyUserNameSelector")
.ControlFormat.ListFillRange = "ThirdPartyUserNameList"
.ControlFormat.ListIndex = 1
End With

End Sub
Sub PopulateThirdPartyUserSiteSelector()
On Error Resume Next
With Worksheets(3).Shapes("ThirdPartyUserSiteSelector")
.ControlFormat.ListFillRange = "ThirdPartyUserSiteList"
.ControlFormat.ListIndex = 1
End With

End Sub
Sub PopulateThirdPartyAvailableSitesSelector()
On Error Resume Next
With Worksheets(3).Shapes("ThirdPartyAvailableSitesSelector")
.ControlFormat.ListFillRange = "ThirdPartyAvailableSitesList"
.ControlFormat.ListIndex = 1
End With

End Sub
Sub PopulateMarketForSiteSelector()
On Error Resume Next
With Worksheets(3).Shapes("MarketForSitesSelector")
.ControlFormat.ListFillRange = "ThirdPartyAvailableMarketsList"
.ControlFormat.ListIndex = 1
End With

End Sub
Sub MarketForSitesSelector_Change()
Module4.getAvailableSites
Module4.PopulateThirdPartyAvailableSitesSelector
End Sub

Sub IssueDataEntry()
Module4.getTPUseldata
Module4.getperiodsforthirduser
Module4.GetEndDates
End Sub
Sub SaveNewUserInDB()
bFlag = True
Application.EnableEvents = False

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    'conn lost
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    
    End If

    objADOCmd.ActiveConnection = mobjADOConn
    
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@NewUserLogon", adVarChar, adParamInput, 255, NewUserLogon)
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@NewUserName", adVarChar, adParamInput, 255, NewUserName)
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@NewUserPassword", adVarChar, adParamInput, 20, NewUserPassword)
    
    objADOCmd.CommandText = "sp_Insert_ThirdPartyUser" 'changenameoftheprocedure

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)

    objADOCmd.Parameters.Delete ("@NewUserLogon")
    objADOCmd.Parameters.Delete ("@NewUserName")
    objADOCmd.Parameters.Delete ("@NewUserPassword")
 
Application.EnableEvents = True
bFlag = False

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryCombogetdata" & strCboCaller, Err.Number, Err.Description
    Resume ExitSub

End Sub
Sub ThirdPartyUserNameSelector_Change()
Module4.PopulateUserInfoLabels
Module4.getThirdPartyUserSites
'Module4.PopulateThirdPartyUserSiteSelector
Module4.getMarkets
Module4.PopulateMarketForSiteSelector
Module4.getAvailableSites
Module4.PopulateThirdPartyAvailableSitesSelector

End Sub

Sub FormatModificationObjects()
   
  Dim Wh As Integer
  Dim Lt As Integer
  Dim Tp As Integer
  Dim Ht As Integer
 
With Sheets(3)

With .Shapes("ThirdPartyUserNameSelector")
    .Left = 10
    .Top = 60
    .Width = 200
    .Height = 15
End With
With .Shapes("Dbutton")
    .Left = 220
    .Top = 60
    .Width = 100
    .Height = 15
End With
With .Shapes("UserNameLabel")
    .Left = 10
    .Top = 90
    .Width = 70
    .Height = 15
End With
With .Shapes("UserNameShowLabel")
    .Left = 90
    .Top = 90
    .Width = 150
    .Height = 15
End With
With .Shapes("UserLogonLabel")
    .Left = 10
    .Top = 110
    .Width = 70
    .Height = 15
End With
With .Shapes("UserLogonShowLabel")
    .Left = 90
    .Top = 110
    .Width = 150
    .Height = 15
End With
With .Shapes("UserPasswordLabel")
    .Left = 10
    .Top = 130
    .Width = 70
    .Height = 15
End With
With .Shapes("UserPasswordShowLabel")
    .Left = 90
    .Top = 130
    .Width = 150
    .Height = 15
End With
With .Shapes("ChooseMarketLabel")
    .Left = 10
    .Top = 200
    .Width = 70
    .Height = 15
End With
With .Shapes("ChooseSiteToBeAdded Label")
    .Left = 10
    .Top = 230
    .Width = 70
    .Height = 25
End With
With .Shapes("ChooseSiteToBeRemovedLabel")
    .Left = 10
    .Top = 260
    .Width = 70
    .Height = 25
End With
With .Shapes("MarketForSitesSelector")
    .Left = 90
    .Top = 200
    .Width = 100
    .Height = 15
End With
With .Shapes("ThirdPartyAvailableSitesSelector")
    .Left = 90
    .Top = 230
    .Width = 200
    .Height = 15
End With
With .Shapes("ThirdPartyUserSiteSelector")
    .Left = 90
    .Top = 260
    .Width = 200
    .Height = 15
End With
With .Shapes("AddSiteButton")
    .Left = 300
    .Top = 230
    .Width = 100
    .Height = 15
End With
With .Shapes("RemoveSiteButton")
    .Left = 300
    .Top = 260
    .Width = 100
    .Height = 15
End With
End With

End Sub

Sub HideModificationObjects()

Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").Visible = False
Sheets("3rdPartyMaintenance").Shapes("Dbutton").Visible = False
Sheets("3rdPartyMaintenance").Shapes("UserNameLabel").Visible = False
Sheets("3rdPartyMaintenance").Shapes("UserNameShowLabel").Visible = False
Sheets("3rdPartyMaintenance").Shapes("UserLogonLabel").Visible = False
Sheets("3rdPartyMaintenance").Shapes("UserLogonShowLabel").Visible = False
Sheets("3rdPartyMaintenance").Shapes("UserPasswordLabel").Visible = False
Sheets("3rdPartyMaintenance").Shapes("UserPasswordShowLabel").Visible = False
Sheets("3rdPartyMaintenance").Shapes("ChooseMarketLabel").Visible = False
Sheets("3rdPartyMaintenance").Shapes("ChooseSiteToBeAdded Label").Visible = False
Sheets("3rdPartyMaintenance").Shapes("ChooseSiteToBeRemovedLabel").Visible = False
Sheets("3rdPartyMaintenance").Shapes("MarketForSitesSelector").Visible = False
Sheets("3rdPartyMaintenance").Shapes("ThirdPartyAvailableSitesSelector").Visible = False
Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserSiteSelector").Visible = False
Sheets("3rdPartyMaintenance").Shapes("AddSiteButton").Visible = False
Sheets("3rdPartyMaintenance").Shapes("RemoveSiteButton").Visible = False
  
End Sub

Sub ShowModificationObjects()

Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").Visible = True
Sheets("3rdPartyMaintenance").Shapes("Dbutton").Visible = True
Sheets("3rdPartyMaintenance").Shapes("UserNameLabel").Visible = True
Sheets("3rdPartyMaintenance").Shapes("UserNameShowLabel").Visible = True
Sheets("3rdPartyMaintenance").Shapes("UserLogonLabel").Visible = True
Sheets("3rdPartyMaintenance").Shapes("UserLogonShowLabel").Visible = True
Sheets("3rdPartyMaintenance").Shapes("UserPasswordLabel").Visible = True
Sheets("3rdPartyMaintenance").Shapes("UserPasswordShowLabel").Visible = True
Sheets("3rdPartyMaintenance").Shapes("ChooseMarketLabel").Visible = True
Sheets("3rdPartyMaintenance").Shapes("ChooseSiteToBeAdded Label").Visible = True
Sheets("3rdPartyMaintenance").Shapes("ChooseSiteToBeRemovedLabel").Visible = True
Sheets("3rdPartyMaintenance").Shapes("MarketForSitesSelector").Visible = True
Sheets("3rdPartyMaintenance").Shapes("ThirdPartyAvailableSitesSelector").Visible = True
Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserSiteSelector").Visible = True
Sheets("3rdPartyMaintenance").Shapes("AddSiteButton").Visible = True
Sheets("3rdPartyMaintenance").Shapes("RemoveSiteButton").Visible = True

End Sub

Sub ActionToBeTakenSelector_Change()
 Dim ActionSelectorIndex As Integer

    ActionSelectorIndex = Sheets(3).Shapes("ActionToBeTakenSelector").ControlFormat.ListIndex

If ActionSelectorIndex = 1 Then

    Module4.HideModificationObjects
    Sheets("3rdPartyMaintenance").Shapes("IssueButton").Visible = False
    AddUserUserForm.Show

ElseIf ActionSelectorIndex = 2 Then
    
    Module4.getThirdPartyUsers
    'Module4.PopulateUserInfoLabels
    
    Sheets("3rdPartyMaintenance").Shapes("IssueButton").Visible = False
    Module4.ShowModificationObjects
    
    Module4.PopulateThirdPartyUserNameSelector
    Module4.PopulateUserInfoLabels
   ' Module4.PopulateThirdPartyUserSiteSelector

Else
    Module4.HideModificationObjects
    Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").Visible = True
    Sheets("3rdPartyMaintenance").Shapes("IssueButton").Visible = True
    Module4.getThirdPartyUsers
    Module4.PopulateThirdPartyUserNameSelector
    
End If

End Sub

Sub PopulateUserInfoLabels()

'If IsEmpty(Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").ControlFormat.ListIndex, 19)) = False Then

UserLogonShow = Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").ControlFormat.ListIndex, 19).Value
UserNameShow = Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").ControlFormat.ListIndex, 20).Value
UserPasswordShow = Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").ControlFormat.ListIndex, 21).Value

Sheets("3rdPartyMaintenance").Shapes("UserNameShowLabel").TextFrame.Characters.Caption = UserNameShow
Sheets("3rdPartyMaintenance").Shapes("UserLogonShowLabel").TextFrame.Characters.Caption = UserLogonShow
Sheets("3rdPartyMaintenance").Shapes("UserPasswordShowLabel").TextFrame.Characters.Caption = UserPasswordShow

'Else
UserNameShow = " "
UserLogonShow = " "
UserPasswordShow = " "
'End If
End Sub

Sub AddSiteToScope()

bFlag = True
Application.EnableEvents = False

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    'conn lost
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    
    End If

    objADOCmd.ActiveConnection = mobjADOConn
    
'AddedSiteKey = Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyAvailableSitesSelector").ControlFormat.ListIndex, 26).Value
'UserModifiedKey = Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").ControlFormat.ListIndex, 18).Value
    
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserKey", adInteger, adParamInput, , Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").ControlFormat.ListIndex, 18).Value)
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@SiteKey", adInteger, adParamInput, , Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyAvailableSitesSelector").ControlFormat.ListIndex, 26).Value)
    
    objADOCmd.CommandText = "sp_AssignSiteToThirdPartyUser" 'changenameoftheprocedure

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    objADOCmd.Parameters.Delete ("@UserKey")
    objADOCmd.Parameters.Delete ("@SiteKey")
    
Application.EnableEvents = True
bFlag = False

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryCombogetdata" & strCboCaller, Err.Number, Err.Description
    Resume ExitSub
    
End Sub
Sub RemoveSiteFromScope()

bFlag = True
Application.EnableEvents = False

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    'conn lost
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    
    End If

    objADOCmd.ActiveConnection = mobjADOConn
    
RemovedSiteKey = Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserSiteSelector").ControlFormat.ListIndex, 22).Value
UserModifiedKey = Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").ControlFormat.ListIndex, 18).Value
    
    'MsgBox RemovedSiteKey & UserModifiedKey
    
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserKey", adInteger, adParamInput, , UserModifiedKey)
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@SiteKey", adInteger, adParamInput, , RemovedSiteKey)

    objADOCmd.CommandText = "sp_DeleteAssignmentSiteToThirdPartyUser" 'changenameoftheprocedure

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)

    objADOCmd.Parameters.Delete ("@SiteKey")
    objADOCmd.Parameters.Delete ("@UserKey")
    
Application.EnableEvents = True
bFlag = False

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryCombogetdata" & strCboCaller, Err.Number, Err.Description
    Resume ExitSub
    
End Sub

Public Sub getThirdPartyUsers()
Application.EnableEvents = False
bFlag = True

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset

    On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    'conn lost
    
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If

    objADOCmd.ActiveConnection = mobjADOConn
   
    objADOCmd.CommandText = "sp_Get_ThirdPartyUsers"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    
    With Sheets("Sheet2")
    
        .Range("R:U").ClearContents
       'MsgBox .Label8.Caption & objADORecordset.GetString
       
       'objADORecordset.Fields(1).
        
        If Not objADORecordset.BOF And Not objADORecordset.EOF Then
                        
            .Range("R1").CopyFromRecordset objADORecordset
           
        Else
        
      MsgBox "No data returned"
        
        End If

    End With
    
ClearChangeFlagColumn

bFlag = False
Application.EnableEvents = True

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryCombogetdata" & strCboCaller, Err.Number, Err.Description
    Resume ExitSub

End Sub
Public Sub getThirdPartyUserSites()
Application.EnableEvents = False
bFlag = True

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
    On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    'conn lost
    
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If

    objADOCmd.ActiveConnection = mobjADOConn
   
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserKey", adInteger, adParamInput, , Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").ControlFormat.ListIndex, 18).Value)
          
    objADOCmd.CommandText = "sp_Get_UserSite"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    
    With Sheets("Sheet2")

        .Range("V:W").ClearContents
        If Not objADORecordset.BOF And Not objADORecordset.EOF Then
                        
            .Range("V1").CopyFromRecordset objADORecordset
           
        Else
        
          MsgBox "No sites assigned to User: " & Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").ControlFormat.ListIndex, 19).Value
        
        End If

    End With
    
ClearChangeFlagColumn

bFlag = False
Application.EnableEvents = True

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryCombogetdata" & strCboCaller, Err.Number, Err.Description
    Resume ExitSub

End Sub
Sub RemoveUserFromDB()
bFlag = True
Application.EnableEvents = False

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    'conn lost
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    
    End If

    objADOCmd.ActiveConnection = mobjADOConn

    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserKey", adInteger, adParamInput, , Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").ControlFormat.ListIndex, 18).Value)

    objADOCmd.CommandText = "sp_Delete_ThirdPartyUser" 'changenameoftheprocedure

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
 
    objADOCmd.Parameters.Delete ("@UserKey")

Application.EnableEvents = True
bFlag = False

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryCombogetdata" & strCboCaller, Err.Number, Err.Description
    Resume ExitSub

End Sub
Public Sub getAvailableSites()
Application.EnableEvents = False
bFlag = True

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
    
    On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    'conn lost
    
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If

    objADOCmd.ActiveConnection = mobjADOConn
   
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@MarketKey", adInteger, adParamInput, , Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("MarketForSitesSelector").ControlFormat.ListIndex, 24).Value)
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserKey", adInteger, adParamInput, , Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").ControlFormat.ListIndex, 18).Value)
    
    objADOCmd.CommandText = "sp_Get_NonUserSite"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    
    With Sheets("Sheet2")

        .Range("Z:AA").ClearContents
        If Not objADORecordset.BOF And Not objADORecordset.EOF Then
                        
            .Range("Z1").CopyFromRecordset objADORecordset

        Else
        
        MsgBox "No data returned"
        
        End If

    End With
    
ClearChangeFlagColumn

bFlag = False
Application.EnableEvents = True

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryCombogetdata" & strCboCaller, Err.Number, Err.Description
    Resume ExitSub

End Sub

Public Sub getMarkets()
Application.EnableEvents = False
bFlag = True

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
    On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If

    objADOCmd.ActiveConnection = mobjADOConn
          
    objADOCmd.CommandText = "sp_Get_Markets"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    
    With Sheets("Sheet2")
    
        .Range("X:Y").ClearContents
        
        If Not objADORecordset.BOF And Not objADORecordset.EOF Then
                        
            .Range("X1").CopyFromRecordset objADORecordset
  
        Else
        
        MsgBox "No data returned"
        
        End If

    End With
    
ClearChangeFlagColumn

bFlag = False
Application.EnableEvents = True

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryCombogetdata" & strCboCaller, Err.Number, Err.Description
    Resume ExitSub

End Sub
Sub getTPUseldata()

Application.EnableEvents = False
bFlag = True

Dim objADOCmd As ADODB.Command
Dim objADORecordset As ADODB.Recordset
Dim r As Integer
Dim sk As Integer
Dim lrtwo As Integer

Sheets(5).Cells.ClearContents

On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
  
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If

    objADOCmd.ActiveConnection = mobjADOConn

    lastrow = Sheets("Sheet2").Cells(Sheets("Sheet2").Rows.Count, "V").End(xlUp).row
    
For r = 1 To lastrow

sk = Sheets("Sheet2").Cells(r, 22).Value

    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserKey", adInteger, adParamInput, , sk)
            
    objADOCmd.CommandText = "sp_Get_ThirdPartySelData"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)

    lrtwo = Sheets(5).Cells(Sheets(5).Rows.Count, "A").End(xlUp).row
        With Sheets(5)
    
        'MsgBox .Label8.Caption & objADORecordset.GetString
       
       'objADORecordset.Fields(1).
        
        If Not objADORecordset.BOF And Not objADORecordset.EOF Then
                        
            .Range("A" & lrtwo + 1).CopyFromRecordset objADORecordset
            
        Else
        
        MsgBox "No data returned"
        
        End If
        
        End With
    objADOCmd.Parameters.Delete ("@UserKey")

Next r

bFlag = False
Application.EnableEvents = True

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryCombogetdata" & strCboCaller, Err.Number, Err.Description
    Resume ExitSub

End Sub
Sub getperiodsforthirduser()
Application.EnableEvents = False
bFlag = True

Dim objADOCmd As ADODB.Command
Dim objADORecordset As ADODB.Recordset
Dim Freq As String

On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
  
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If

    Sheets("TPUPeriods").Cells.ClearContents
    
    objADOCmd.ActiveConnection = mobjADOConn

For i = 1 To 3

If i = 1 Then Freq = "Daily" Else If i = 2 Then Freq = "Weekly" Else Freq = "Monthly"
    
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@ReportingFrequency", adVarChar, adParamInput, 255, Freq)
    
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserLogon", adVarChar, adParamInput, 255, UserLogonShow)
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserSiteKey", adVarChar, adParamInput, 255, "0")
    
            
    objADOCmd.CommandText = "sp_Get_DateRangeFrequency"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)

        With Sheets("TPUPeriods")
    
        'MsgBox .Label8.Caption & objADORecordset.GetString
       
       'objADORecordset.Fields(1).
        
        If Not objADORecordset.BOF And Not objADORecordset.EOF Then
                        
            .Cells(1, 2 * i - 1).CopyFromRecordset objADORecordset
            
        Else
        
        MsgBox "No data returned"
        
        End If
        
        End With
    objADOCmd.Parameters.Delete ("@ReportingFrequency")
    objADOCmd.Parameters.Delete ("@UserLogon")
    objADOCmd.Parameters.Delete ("@UserSiteKey")

Next i

bFlag = False
Application.EnableEvents = True

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryCombogetdata" & strCboCaller, Err.Number, Err.Description
    Resume ExitSub
End Sub
Sub GetEndDates()
Sheets("TPUEndDates").Cells.ClearContents
getfiscalweekenddates
getfiscalperiodenddates
End Sub
Sub getfiscalweekenddates()
Application.EnableEvents = False
bFlag = True

Dim objADOCmd As ADODB.Command
Dim objADORecordset As ADODB.Recordset
Dim Freq As String

On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
  
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If
    
    objADOCmd.ActiveConnection = mobjADOConn
 
    objADOCmd.CommandText = "sp_Get_FiscalWeekEndDates"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)


        With Sheets("TPUEndDates")
    
        'MsgBox .Label8.Caption & objADORecordset.GetString
       
       'objADORecordset.Fields(1).
        
        If Not objADORecordset.BOF And Not objADORecordset.EOF Then
                        
            .Cells(1, 1).CopyFromRecordset objADORecordset
            
        Else
        
        MsgBox "No data returned"
        
        End If
        
        End With

bFlag = False
Application.EnableEvents = True

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryCombogetdata" & strCboCaller, Err.Number, Err.Description
    Resume ExitSub
End Sub
Sub getfiscalperiodenddates()
Application.EnableEvents = False
bFlag = True

Dim objADOCmd As ADODB.Command
Dim objADORecordset As ADODB.Recordset
Dim Freq As String

On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If
   
    objADOCmd.ActiveConnection = mobjADOConn
            
    objADOCmd.CommandText = "sp_Get_FiscalPeriodEndDates"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)

        With Sheets("TPUEndDates")
    
        'MsgBox .Label8.Caption & objADORecordset.GetString
       
       'objADORecordset.Fields(1).
        
        If Not objADORecordset.BOF And Not objADORecordset.EOF Then
                        
            .Cells(1, 3).CopyFromRecordset objADORecordset
            
        Else
        
        MsgBox "No data returned"
        
        End If
        
        End With

bFlag = False
Application.EnableEvents = True

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryCombogetdata" & strCboCaller, Err.Number, Err.Description
    Resume ExitSub
End Sub
'Public Sub getTPUsinglesite(ByVal s As Integer)
Sub getFilePath()

FilePath = Application.ActiveWorkbook.Path

End Sub
Sub getFileName()

getFilePath

FileName = FilePath & "\" & ActiveWorkbook.Name

End Sub

Sub getTemplatePath()
TemplatePath = FilePath & "\DataEntryMake 3rd Party TEMPLATE.xlsm"
'MsgBox TemplatePath
End Sub
Sub copypastesave()

Application.ScreenUpdating = False
OpenTemplate
CopyGetSelDataAndPasteToTemplate
CopyGetPeriodsAndPasteToTemplate
CopyEndDatesAndPasteToTemplate
setcredentials
SaveTemplateAsIndividualWorkbook
Application.ScreenUpdating = True
End Sub

Sub OpenTemplate()
namename = ActiveWorkbook.Name
getFileName
getTemplatePath
Application.EnableEvents = False
Workbooks.Open (TemplatePath)
Application.EnableEvents = True
Windows("DataEntryMake 3rd Party TEMPLATE.xlsm").Activate
With ActiveWorkbook

Sheets("All").Visible = True
Sheets("Credentials").Visible = True
Sheets("EndDates").Visible = True
Sheets("3Market").Visible = True
Sheets("4Site").Visible = True
Sheets("5line").Visible = True
Sheets("6kpi").Visible = True
Sheets("7frequency").Visible = True
Sheets("8period").Visible = True
Sheets("9shift").Visible = True
Sheets("Sheet3").Visible = True
End With

End Sub

Sub CopyGetSelDataAndPasteToTemplate()

Windows("DataEntryMake 3rd Party TEMPLATE.xlsm").Activate
Sheets("All").Activate
If (ActiveSheet.AutoFilterMode And ActiveSheet.FilterMode) Or ActiveSheet.FilterMode Then
  ActiveSheet.ShowAllData
End If

Range("A2").Select
Range(Selection, Selection.End(xlToRight)).Select
Range(Selection, Selection.End(xlDown)).Select
Selection.ClearContents
Windows(namename).Activate
Sheets("TPUSelData").Activate
Application.CutCopyMode = False
Range("a2").Select

Range(Selection, Selection.End(xlToRight)).Select
Range(Selection, Selection.End(xlDown)).Select
Selection.Copy
Windows("DataEntryMake 3rd Party TEMPLATE.xlsm").Activate
Sheets("all").Activate
ActiveSheet.Paste
Windows(namename).Activate

End Sub
Sub CopyGetPeriodsAndPasteToTemplate()

Windows(namename).Activate
Sheets("TPUPeriods").Activate
Application.CutCopyMode = False
Cells.Copy

Windows("DataEntryMake 3rd Party TEMPLATE.xlsm").Activate
Sheets("8Period").Activate
Range("a1").Activate
ActiveSheet.Paste
Windows(namename).Activate

End Sub
Sub CopyEndDatesAndPasteToTemplate()

Windows(namename).Activate
Sheets("TPUEndDates").Activate
Application.CutCopyMode = False
Cells.Copy

Windows("DataEntryMake 3rd Party TEMPLATE.xlsm").Activate
Sheets("EndDates").Activate
Range("a1").Activate
ActiveSheet.Paste
Windows(namename).Activate

End Sub
Sub setcredentials()
Windows(namename).Activate
UserLogonShow = Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").ControlFormat.ListIndex, 19).Value
UserPasswordShow = Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").ControlFormat.ListIndex, 21).Value
UserNameShow = Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").ControlFormat.ListIndex, 20).Value
Windows("DataEntryMake 3rd Party TEMPLATE.xlsm").Activate
Sheets("Credentials").Cells(1, 1).Value = UserLogonShow
Sheets("Credentials").Cells(2, 1).Value = UserPasswordShow
Windows(namename).Activate

End Sub
Sub SaveTemplateAsIndividualWorkbook()
Windows(namename).Activate
UserLogonShow = Sheets("Sheet2").Cells(Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").ControlFormat.ListIndex, 19).Value
individualworkbookname = Application.ActiveWorkbook.Path & "\" & UserLogonShow & " DataEntryMake issued on " & Year(Date) & Month(Date) & Day(Date)
Windows("DataEntryMake 3rd Party TEMPLATE.xlsm").Activate
Workbooks("DataEntryMake 3rd Party TEMPLATE.xlsm").SaveAs (individualworkbookname)
ActiveWorkbook.Close

End Sub

Attribute VB_Name = "Module5"
Public Const targets As String = "TargetsTemplates"
Public TargetsTemplatePath As String
Public SheetName As String
Public TargetsLineKey As Integer
Public SiteTemplateName As String
Sub clearfilters()
Sheets("TargetsData").Activate
Cells.AutoFilter
End Sub
Sub clearcolumns(ByVal c As Integer)
Sheets("TargetsData").Columns(c).ClearContents
Sheets("TargetsData").Columns(c + 1).ClearContents
End Sub
Sub copytosheet(ByVal s As Integer) ' s is a sheet index
    Application.CutCopyMode = False
    Selection.Copy
    Sheets(s).Activate

    ActiveSheet.Paste Destination:=Worksheets(s).Range("a1")
        
End Sub
Sub SaveTemplateAsSiteTemp()
Windows(namename).Activate

SiteTemplateName = Application.ActiveWorkbook.Path & "\" & TargetsSiteDesc & " issued on " & Year(Date) & Month(Date) & Day(Date)
Windows("DataEntryMake Targets TEMPLATE.xlsm").Activate
Workbooks("DataEntryMake Targets TEMPLATE.xlsm").SaveAs (SiteTemplateName)
ActiveWorkbook.Close
Windows(namename).Activate
MsgBox "Template for " & TargetsSiteDesc & " has been cerated."

End Sub
Sub NameRange() 'names the range all
 
Dim Rng1 As Range
Dim lrf As Integer
  
Set Rng1 = Sheets("TargetsData").Range("f1:h" & lastrowfind(8))
ActiveWorkbook.Names.Add Name:="KPIComponents", RefersTo:=Rng1
     
End Sub
Public Function lastrowfind(ByVal x As Integer) As Integer 'finds the last row in a specified column (x)
lastrowfind = Cells(Rows.Count, x).End(xlUp).row
End Function
Sub selectthreecolumns(ByVal column As Integer, ByVal row As Integer)
Dim lr As Integer
lr = lastrowfind(column)
ActiveSheet.Range(Cells(row, column), Cells(lr, column + 2)).Select
End Sub
Sub selecttwocolumns(ByVal column As Integer, ByVal row As Integer)
Dim lr As Integer
lr = lastrowfind(column)
ActiveSheet.Range(Cells(row, column), Cells(lr, column + 1)).Select
End Sub
Sub filterranga(ByVal col As Integer, ByVal cra As String)
Range("KPIComponents").AutoFilter _
Field:=col, Criteria1:=cra
End Sub

'[sp_Get_LineSite] @sitekey
'.[sp_Get_MarketSites] @MarketKey
'[sp_Get_Reporting_FrequencySiteKPISuite] @SiteKey int @KPISuiteKey
'[sp_Get_KPI_SuiteSite] @SiteKey
'[sp_Get_FiscalWeekEndDates]
'[sp_Get_FiscalPeriodEndDates]

Public Function TargetsMarketKey() As Integer
TargetsMarketKey = Sheets(2).Cells(Sheets(targets).Shapes("MarketForSitesSelectorTargets").ControlFormat.ListIndex, 24).Value
End Function
Public Function TargetsSiteKey() As Integer
TargetsSiteKey = Sheets("TargetsData").Cells(Sheets(targets).Shapes("MarketSitesSelector").ControlFormat.ListIndex, 1).Value
End Function
Public Function TargetsSiteDesc() As String
TargetsSiteDesc = Sheets("TargetsData").Cells(Sheets(targets).Shapes("MarketSitesSelector").ControlFormat.ListIndex, 2).Value
End Function
Public Function StartDate() As Date
StartDate = Sheets("TargetsData").Cells(Sheets(targets).Shapes("StartSel").ControlFormat.ListIndex, 21).Value
End Function
Public Function EndDate() As Date
EndDate = Sheets("TargetsData").Cells(Sheets(targets).Shapes("EndSel").ControlFormat.ListIndex, 21).Value
End Function
Sub ahaha()
MsgBox TargetsSiteKey

End Sub
Public Sub getLinesforSite()

bFlag = True

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
    On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    ' If mobjADOConn Is Nothing Then ValidUser
     
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If

    objADOCmd.ActiveConnection = mobjADOConn

    'objADOCmd.Parameters.Append objADOCmd.CreateParameter("@UserKey", adInteger, adParamInput, , mintUserKey)
    
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@SiteKey", adInteger, adParamInput, , TargetsSiteKey)
    objADOCmd.CommandText = "sp_Get_LineSite"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    Application.CalculateUntilAsyncQueriesDone
     Sheets("TargetsData").Range("c:d").ClearContents
    Sheets("TargetsData").Range("c1").CopyFromRecordset objADORecordset
    
    'Module2.PopulateLine

bFlag = False

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryComboLINE", Err.Number, Err.Description
    Resume ExitSub

End Sub

Public Sub getSitesforMarket()
Application.EnableEvents = False
bFlag = True

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
    On Error GoTo ErrHandler
 
    Set objADOCmd = New ADODB.Command
    'conn lost
    
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If

    objADOCmd.ActiveConnection = mobjADOConn
   
    'Dim dtDate As Date
    'dtDate = Sheets(DataEntry).Label8.Object.Caption
    

      '  MsgBox objADOCmd.Parameters(0) & objADOCmd.Parameters(1) & objADOCmd.Parameters(2)
     
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@MarketKey", adInteger, adParamInput, , TargetsMarketKey)
    objADOCmd.CommandText = "sp_Get_MarketSites"


    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    
    With Sheets("TargetsData")
    
        .Range("a:b").ClearContents
       'MsgBox .Label8.Caption & objADORecordset.GetString
       
       'objADORecordset.Fields(1).
        
        If Not objADORecordset.BOF And Not objADORecordset.EOF Then
                        
            .Range("a1").CopyFromRecordset objADORecordset
 
        Else
        
        MsgBox "No data returned"
        
        End If

    End With
    
ClearChangeFlagColumn

bFlag = False
Application.EnableEvents = True

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryCombogetdata" & strCboCaller, Err.Number, Err.Description
    Resume ExitSub

End Sub
Sub MarketSitesSelector_Change()
Module5.getLinesforSite

End Sub
Sub MarketForSitesSelectorTargets_Change()
'Module5.getMarketSites
'MsgBox TargetsMarketKey
Module5.getSitesforMarket
Module5.PopulateMarketSitesSelector
End Sub

Sub PopulateMarketForSiteSelector()

With Worksheets(targets).Shapes("MarketForSitesSelectorTargets")
.ControlFormat.ListFillRange = "ThirdPartyAvailableMarketsList"
.ControlFormat.ListIndex = 1
End With

End Sub
Sub PopulateMarketSitesSelector()

With Worksheets(targets).Shapes("MarketSitesSelector")
.ControlFormat.ListFillRange = "MarketSites"
.ControlFormat.ListIndex = 1
End With

End Sub
Sub PopulateStartSel()

With Worksheets(targets).Shapes("StartSel")
.ControlFormat.ListFillRange = "datesfortargets"
.ControlFormat.ListIndex = 1
End With

End Sub
Sub PopulateEndSel()

With Worksheets(targets).Shapes("EndSel")
.ControlFormat.ListFillRange = "datesfortargets"
.ControlFormat.ListIndex = 1
End With

End Sub

Sub getMarketSites()  '.[sp_Get_MarketSites] @MarketKey

Application.EnableEvents = False
bFlag = True

Dim objADOCmd As ADODB.Command
Dim objADORecordset As ADODB.Recordset
Dim r As Integer
Dim sk As Integer
Dim lrtwo As Integer


On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
  
    
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If

    objADOCmd.ActiveConnection = mobjADOConn

    lastrow = Sheets("Sheet2").Cells(Sheets("Sheet2").Rows.Count, "V").End(xlUp).row
    
    
    

For r = 1 To lastrow

sk = Sheets("Sheet2").Cells(r, 22).Value

    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@MarketKey", adInteger, adParamInput, , sk)
            
    objADOCmd.CommandText = "sp_Get_MarketSites"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)

    lrtwo = Sheets(5).Cells(Sheets(5).Rows.Count, "A").End(xlUp).row
        With Sheets(5)
    
        'MsgBox .Label8.Caption & objADORecordset.GetString
       
       'objADORecordset.Fields(1).
        
        If Not objADORecordset.BOF And Not objADORecordset.EOF Then
                        
            .Range("A" & lrtwo + 1).CopyFromRecordset objADORecordset
            
        Else
        
        MsgBox "No data returned"
        
        End If
        
        End With
    objADOCmd.Parameters.Delete ("@UserKey")

Next r

bFlag = False
Application.EnableEvents = True

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryCombogetdata" & strCboCaller, Err.Number, Err.Description
    Resume ExitSub




End Sub
Sub OpenTargetsTemplateandCreateSheets()
namename = ActiveWorkbook.Name
Sheets("TargetsTemplates").Activate
Call Module5.clearfilters

'MsgBox namename
NameRange
Module4.getFileName

getTargetsTemplatePath
'MsgBox namename

Application.EnableEvents = False

Workbooks.Open (TargetsTemplatePath)
Application.EnableEvents = True
Windows("DataEntryMake Targets TEMPLATE.xlsm").Activate
Windows(namename).Activate
Module5.CreateSheets




End Sub

Sub getTargetsTemplatePath()
TargetsTemplatePath = FilePath & "\DataEntryMake Targets TEMPLATE.xlsm"
'MsgBox TemplatePath
End Sub
Sub CreateSheets()
Dim numberofsheets As Integer
Module4.getFileName
Windows(namename).Activate
numberofsheets = Sheets("TargetsData").Cells(1, 5).Value

Windows("DataEntryMake Targets TEMPLATE.xlsm").Activate

For i = 1 To numberofsheets

Windows(namename).Activate
'MsgBox namename
Freq = Sheets("TargetsData").Cells(i, 18).Value
SheetName = Sheets("TargetsData").Cells(i, 4).Value
TargetsLineKey = Sheets("TargetsData").Cells(i, 3).Value

If SheetName = "All Lines" Then
Windows("DataEntryMake Targets TEMPLATE.xlsm").Activate
Sheets.Add.Name = SheetName

    Sheets(SheetName).Cells(2, 1).Value = TargetsLineKey
    Sheets(SheetName).Cells(1, 1).Value = SheetName
    
    Windows(namename).Activate
    'MsgBox namename
CreateAllLinesSheet
Else
    Windows("DataEntryMake Targets TEMPLATE.xlsm").Activate
    Sheets.Add.Name = SheetName
    Sheets(SheetName).Activate

    Sheets(SheetName).Cells(2, 1).Value = TargetsLineKey
    Sheets(SheetName).Cells(1, 1).Value = SheetName
    Windows(namename).Activate
    Call Module5.clearfilters
    
    If Freq = "Weekly" Then
    Call Module5.selecttwocolumns(24, 1)
    Else
    Call Module5.selecttwocolumns(22, 1)
    End If
    
'    Sheets(SheetName).Cells(1, 2).Value = TargetsLineKey
'    Sheets(SheetName).Cells(1, 1).Value = SheetName
        Application.CutCopyMode = False
    Selection.Copy
      Windows("DataEntryMake Targets TEMPLATE.xlsm").Activate
   
    Sheets(SheetName).Activate

    Range("d" & lastrowfind(1) + 1).Select
    Selection.PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=True
    Windows(namename).Activate
Call Module5.filterranga(1, "OEE")



Call Module5.selectthreecolumns(6, 1)
    
    Application.CutCopyMode = False
    Selection.Copy
    
    Windows("DataEntryMake Targets TEMPLATE.xlsm").Activate
    ActiveSheet.Paste Destination:=Worksheets(SheetName).Range("a4")


 End If
    
Next i
Windows(namename).Activate
Call Module5.clearfilters
End Sub
Sub CreateAllLinesSheet()
Dim numberofsheets As Integer
Dim KPISDesc As String
Dim Freq As String


'MsgBox namename
For f = 1 To 5
Windows(namename).Activate
Sheets("TargetsData").Activate
KPISDesc = Sheets("TargetsData").Cells(f, 17).Value
Freq = Sheets("TargetsData").Cells(f, 18).Value

  '  Call Module5.clearfilters
     Windows(namename).Activate
      Call Module5.clearfilters
    Freq = Sheets("TargetsData").Cells(f, 18).Value
    If Freq = "Weekly" Then
    Call Module5.selecttwocolumns(24, 1)
    Else
    Call Module5.selecttwocolumns(22, 1)
    End If
    
'    Sheets(SheetName).Cells(1, 2).Value = TargetsLineKey
'    Sheets(SheetName).Cells(1, 1).Value = SheetName
        Application.CutCopyMode = False
    Selection.Copy
      Windows("DataEntryMake Targets TEMPLATE.xlsm").Activate
   
    Sheets(SheetName).Activate
    Range("d" & lastrowfind(1) + 1).Select
    Selection.PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=True
'MsgBox Freq

Windows(namename).Activate
Sheets("TargetsData").Activate
'MsgBox KPISDesc
Call Module5.filterranga(1, KPISDesc)



Call Module5.selectthreecolumns(6, 1)
    
    Application.CutCopyMode = False
    Selection.Copy
    

    Windows("DataEntryMake Targets TEMPLATE.xlsm").Activate
    
   
    Sheets(SheetName).Activate

    ActiveSheet.Paste Destination:=Worksheets(SheetName).Range("a" & 3 + lastrowfind(1))
    Windows(namename).Activate

    Next f
End Sub
Public Sub getFrequencyForTargets()

bFlag = True

    Dim objADOCmd As ADODB.Command
    Dim objADORecordset As ADODB.Recordset
    
    On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If
    For i = 1 To 5
    SiteKey = TargetsSiteKey
    'KPIKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("KPISelector").ControlFormat.ListIndex, 7).Value
'        If Sheets("Sheet2").Cells(Sheets(1).Shapes("LineSelector").ControlFormat.ListIndex, 6).Value = "All Lines" Then
'        KPIKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("KPISelector").ControlFormat.ListIndex, 7).Value
'        Else
'        KPIKey = 1
'        End If
    
    objADOCmd.ActiveConnection = mobjADOConn

    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@SiteKey", adInteger, adParamInput, , SiteKey)
    
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@KPISuiteKey", adInteger, adParamInput, , i)
    objADOCmd.CommandTimeout = 0
    objADOCmd.CommandText = "sp_Get_Reporting_FrequencySiteKPISuite"

   ' MsgBox "freq" & Sheets(DataEntry).Site & Sheets(DataEntry).KPI
    Application.CalculateUntilAsyncQueriesDone
    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)
    
    Sheets("TargetsData").Range("r" & i).CopyFromRecordset objADORecordset
    objADOCmd.Parameters.Delete ("@SiteKey")
    objADOCmd.Parameters.Delete ("@KPISuiteKey")
    
    Next i
       

    
bFlag = False

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryComboFrequency", Err.Number, Err.Description
    Resume ExitSub

End Sub

Sub getfiscalweekenddatest()
Application.EnableEvents = False
bFlag = True

Dim objADOCmd As ADODB.Command
Dim objADORecordset As ADODB.Recordset
Dim Freq As String


On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
  
    
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If

    
   ' Sheets("TPUEndDates").Cells.ClearContents
    
    
    objADOCmd.ActiveConnection = mobjADOConn

  objADOCmd.Parameters.Append objADOCmd.CreateParameter("@StartDate", adDBTimeStamp, adParamInput, 12, StartDate)
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@EndDate", adDBTimeStamp, adParamInput, 12, EndDate)


            
    objADOCmd.CommandText = "sp_Get_FiscalWeekEndDatesForTargets"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)


        With Sheets("TargetsData")
         Call Module5.clearcolumns(24)
    
        'MsgBox .Label8.Caption & objADORecordset.GetString
       
       'objADORecordset.Fields(1).
        
        If Not objADORecordset.BOF And Not objADORecordset.EOF Then
                        
            .Range("x1").CopyFromRecordset objADORecordset
            
        Else
        
        MsgBox "No data returned"
        
        End If
        
        End With



bFlag = False
Application.EnableEvents = True

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryCombogetdata" & strCboCaller, Err.Number, Err.Description
    Resume ExitSub
End Sub
Sub getfiscalperiodenddatest()
Application.EnableEvents = False
bFlag = True

Dim objADOCmd As ADODB.Command
Dim objADORecordset As ADODB.Recordset
Dim Freq As String

'MsgBox StartDate & EndDate
On Error GoTo ErrHandler
            
    Set objADOCmd = New ADODB.Command
  
    
    If mobjADOConn Is Nothing Then ValidUser
    
    If mobjADOConn.State <> adStateOpen Then
        Call OpenADOConnection
    End If
   
    objADOCmd.ActiveConnection = mobjADOConn
    
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@StartDate", adDBTimeStamp, adParamInput, 12, StartDate)
    objADOCmd.Parameters.Append objADOCmd.CreateParameter("@EndDate", adDBTimeStamp, adParamInput, 12, EndDate)
    
    objADOCmd.CommandText = "sp_Get_FiscalPeriodEndDatesForTargets"

    Set objADORecordset = objADOCmd.Execute(, , adCmdStoredProc)

        With Sheets("TargetsData")
    Call Module5.clearcolumns(22)
    
    
        'MsgBox .Label8.Caption & objADORecordset.GetString
       
       'objADORecordset.Fields(1).
        
        If Not objADORecordset.BOF And Not objADORecordset.EOF Then
                        
            .Range("v1").CopyFromRecordset objADORecordset
            
        Else
        
        MsgBox "No data returned"
        
        End If
        
        End With



bFlag = False
Application.EnableEvents = True

ExitSub:
    Exit Sub
ErrHandler:
    DisplayError "Module1.PopulateEntryCombogetdata" & strCboCaller, Err.Number, Err.Description
    Resume ExitSub
End Sub
Sub issuetemplateforsite()
Application.ScreenUpdating = False
getfiscalperiodenddatest
getfiscalweekenddatest
getFrequencyForTargets
Module5.OpenTargetsTemplateandCreateSheets
SaveTemplateAsSiteTemp
Application.ScreenUpdating = True
Sheets("TargetsTemplates").Activate

End Sub
Attribute VB_Name = "Module6"
Sub enablevandscreenupd()

Application.ScreenUpdating = True
Application.EnableEvents = True


End Sub

Sub CheckListsPopulation()
For i = 1 To 6
If IsEmpty(Sheets(2).Cells(1, 2 * i - 1)) = True Then
MsgBox "Insufficient info provided"
Exit Sub
End If
Next i
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Sub Init()
bFlag = True


   ValidUser

Application.EnableEvents = False
Dim lbl As Object
Dim st As Worksheet
Dim shp As Shape
Dim cbo As ComboBox
Module4.getFileName
Module4.getTemplatePath
Module1.usertypecheck


FormatLabelsSelectorsButtonsNew
FormatShiftNew


bFlag = False

Application.ScreenUpdating = True
End Sub

Sub Display_Click()
For i = 1 To 6
    If IsEmpty(Sheets(2).Cells(1, 2 * i - 1)) = True Then
    MsgBox "Insufficient info provided"
   
    Exit Sub
    End If
    Next i
If OEEPackagingAndAllLines = True Then
    MsgBox "Components of OEE (Packaging) KPI Suite are reported on line level. Please select specific line in Lines selector."
    Exit Sub
ElseIf DirectLabourAndAllLines = True Then
    MsgBox "Components of Direct Labour Productivity (Packaging) KPI Suite are reported on line level. Please select specific line in Lines selector."
    Exit Sub
End If
Module1.UnprotectSheet
Module3.CalculateKPI

Module1.ClearChangeFlagColumn

Module1.getSelDataNew


End Sub

Sub Load_Click()

If CheckForNulls = True Then

MsgBox "Please enter Current Period Value against all components"
Exit Sub
End If
    For i = 1 To 6
    If IsEmpty(Sheets(2).Cells(1, 2 * i - 1)) = True Then
    MsgBox "Insufficient info provided"
    
    Exit Sub
    End If
    Next i
If OEEPackagingAndAllLines = True Then
    MsgBox "Components of OEE (Packaging) KPI Suite are reported on line level. Please select specific line in Lines selector."
    Exit Sub
ElseIf DirectLabourAndAllLines = True Then
    MsgBox "Components of Direct Labour Productivity (Packaging) KPI Suite are reported on line level. Please select specific line in Lines selector."
    Exit Sub
End If
Module1.UnprotectSheet

Module1.LoadToDBNew

Module1.ClearChangeFlagColumn

End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub

Sub MarketSelector_Change()

If bFlag = True Then Exit Sub

Application.EnableEvents = False

Application.ScreenUpdating = False

bFlag = True
Call ClearLists(2)


Module1.getSiteNew
Module1.getLineNew
Module1.getDisciplineNew
Module2.CreateOEEList
Module1.getKPINew
Module1.getFrequencyNew
Module1.getPeriodNew
Module1.getDateNew
Module1.getShiftNew
Module1.ProtectDataEntryFullSheet
Sheets("DataEntry").Range("G11").Select

bFlag = False

Application.EnableEvents = True

Application.ScreenUpdating = True

End Sub
Sub SiteSelector_Change()

'MsgBox bFlag

If bFlag = True Then Exit Sub

Application.ScreenUpdating = False

bFlag = True

Call ClearLists(3)

Module1.getLineNew
Module1.getDisciplineNew
Module2.CreateOEEList
Module1.getKPINew
Module1.getFrequencyNew
Module1.getPeriodNew
Module1.getDateNew
Module1.getShiftNew
Module1.ProtectDataEntryFullSheet
Sheets("DataEntry").Range("G11").Select


bFlag = False

Application.ScreenUpdating = True

End Sub

Sub LineSelector_Change()

If bFlag = True Then Exit Sub

Application.ScreenUpdating = False

bFlag = True

Call ClearLists(4)

Module1.getKPINew
Module1.getFrequencyNew
Module1.getPeriodNew
Module1.getDateNew
Module1.getShiftNew
Module1.ProtectDataEntryFullSheet
Sheets("DataEntry").Range("G11").Select

bFlag = False

Application.ScreenUpdating = True

If OEEPackagingAndAllLines = True Then
    MsgBox "Components of OEE (Packaging) KPI Suite are reported on line level. Please select specific line in Lines selector."
    Exit Sub
ElseIf DirectLabourAndAllLines = True Then
    MsgBox "Components of Direct Labour Productivity (Packaging) KPI Suite are reported on line level. Please select specific line in Lines selector."
    Exit Sub
End If

End Sub
Sub KPISelector_Change()

If bFlag = True Then Exit Sub

Application.ScreenUpdating = False

bFlag = True
Call ClearLists(5)

Module1.getFrequencyNew
Module1.getPeriodNew
Module1.getDateNew
Module1.getShiftNew
Module1.ProtectDataEntryFullSheet
Sheets("DataEntry").Range("G11").Select


bFlag = False

Application.ScreenUpdating = True

If OEEPackagingAndAllLines = True Then
    MsgBox "Components of OEE (Packaging) KPI Suite are reported on line level. Please select specific line in Lines selector."
    Exit Sub
ElseIf DirectLabourAndAllLines = True Then
    MsgBox "Components of Direct Labour Productivity (Packaging) KPI Suite are reported on line level. Please select specific line in Lines selector."
    Exit Sub
End If

End Sub
Sub FrequencySelector_Change()

If bFlag = True Then Exit Sub

Application.ScreenUpdating = False

bFlag = True

Call ClearLists(6)
Module1.getPeriodNew
Module1.getDateNew
Module1.getShiftNew
Module1.ProtectDataEntryFullSheet
Sheets("DataEntry").Range("G11").Select

bFlag = False

Application.ScreenUpdating = True

End Sub

Sub PeriodSelector_Change()

If bFlag = True Then Exit Sub

Application.ScreenUpdating = False

bFlag = True
Call ClearLists(7)
Module1.getDateNew
Module1.getShiftNew
Call Sheets(1).FormatLabelsSelectorsButtonsNew
Module1.ProtectDataEntryFullSheet
Sheets("DataEntry").Range("G11").Select
bFlag = False

Application.ScreenUpdating = True

End Sub
Sub FormatLabelsSelectorsButtonsNew()

  Dim WS As Excel.Worksheet
  Dim W As Integer
  Dim L As Integer
  Dim T As Integer
  Dim H As Integer
  Dim A As Integer
  Dim P As String
  
  FrequencyKey = Sheets("Sheet2").Cells(Sheets(1).Shapes("FrequencySelector").ControlFormat.ListIndex, 9).Value
  
  If FrequencyKey = "Weekly" Then
  P = "Week"
  ElseIf FrequencyKey = "Monthly" Then
  P = "Month"
  Else
  P = "Day"
  End If
  
  T = 15
  L = 15
  W = 200
  lblH = 15
  cmbH = 20
  A = 1
  
  TSecLine = 2 * T + lblH + cmbH
  
  Set WS = Worksheets(1)

UnprotectSheet
With Shapes("Label1New")

    .TextFrame.Characters.Caption = "Market"
    .Left = L
    .Top = T
    .Width = W
    .Height = lblH
   
End With
    


With Shapes("Label2New")
    
    .TextFrame.Characters.Caption = "Site"
    .Left = 2 * L + W
    .Top = T
    .Width = W
    .Height = lblH
    
End With



With Shapes("Label3New")

    .TextFrame.Characters.Caption = "Line"
    .Left = 3 * L + 2 * W
    .Top = T
    .Width = W
    .Height = lblH
   
End With



With Shapes("Label4New")

    .TextFrame.Characters.Caption = "KPI Category"
    .Left = 4 * L + 3 * W
    .Top = T
    .Width = W
    .Height = lblH
    
End With

  
With Shapes("MarketSelector")
    
    .Left = L
    .Top = T + lblH
    .Width = W
    .Height = cmbH
    
End With


With Shapes("SiteSelector")
    
    .Left = 2 * L + W
    .Top = T + lblH
    .Width = W
    .Height = cmbH
    
End With


With Shapes("LineSelector")
    
    .Left = 3 * L + 2 * W
    .Top = T + lblH
    .Width = W
    .Height = cmbH
    
End With

With Shapes("KPISelector")
    
    .Left = 4 * L + 3 * W
    .Top = T + lblH
    .Width = W
    .Height = cmbH
    
End With

With Shapes("Label5New")
    .TextFrame.Characters.Caption = "Frequency"
    .Left = L
    .Top = TSecLine
    .Width = W
    .Height = lblH

End With
    
 
With Shapes("Label6New")

    .TextFrame.Characters.Caption = P
    .Left = 2 * L + W
    .Top = TSecLine
    .Width = W
    .Height = lblH
  
End With



With Shapes("Label9New")
    
    .TextFrame.Characters.Caption = "Start Date"
    .Left = 3 * L + 2 * W
    .Top = TSecLine
    .Width = W / 2 - 2
    .Height = lblH
    
End With


With Shapes("Label10New")

    .TextFrame.Characters.Caption = "End Date"
    .Left = 3 * L + 2.5 * W + 2
    .Top = TSecLine
    .Width = W / 2 - 2
    .Height = lblH
    
End With

With Shapes("FrequencySelector")
    
    .Left = L
    .Top = TSecLine + lblH
    .Width = W
    .Height = cmbH
    
End With

With Shapes("PeriodSelector")
    
    .Left = 2 * L + W
    .Top = TSecLine + lblH
    .Width = W
    .Height = cmbH
    
End With

With Shapes("Label7New")
    
    .Left = 3 * L + 2 * W
    .Top = TSecLine + lblH
    .Width = W / 2 - 2
    .Height = cmbH
    
End With

With Shapes("Label8New")
    
    .Left = 3 * L + 2.5 * W + 2
    .Top = TSecLine + lblH
    .Width = W / 2 - 2
    .Height = cmbH
    
End With

With Shapes("DisplayNew")
    
    .TextFrame.Characters.Caption = "Display"
    .Left = 4 * L + 3 * W
    .Top = TSecLine
    .Width = W
    .Height = lblH + cmbH
    
End With

With Shapes("LoadNew")

    .TextFrame.Characters.Caption = "Load"
    .Left = 5 * L + 4 * W
    .Top = 2 * T
    .Width = 1.75 * (2 * (lblH + cmbH) + T)
    .Height = 2 * (lblH + cmbH)
    
End With

End Sub

Sub FormatShiftNew()

  Dim WS As Excel.Worksheet
  Dim W As Integer
  Dim L As Integer
  Dim T As Integer
  Dim H As Integer
  Dim A As Integer
  
  
  T = 15
  L = 15
  W = 200
  lblH = 15
  cmbH = 20
  A = 1
  
  TSecLine = 2 * T + lblH + cmbH
  
  Set WS = Worksheets(1)
UnprotectSheet
If FrequencyKey = "Daily" Then
  
With Worksheets(1)


    With Shapes("ShiftSelector")
        
        .Left = 3 * L + 2 * W
        .Top = TSecLine + lblH
        .Width = W
        .Height = cmbH
        .Visible = True
        
        
    End With

    With Shapes("Label11New")
        .TextFrame.Characters.Caption = "Shift"
        
        .Left = 3 * L + 2 * W
        .Top = TSecLine
        .Width = W
        .Height = lblH
        .Visible = True
        
    End With
    
         With Shapes("Label7New")

        .Visible = False
        
    End With

    With Shapes("Label8New")

        .Visible = False
    End With

    
    With Shapes("Label9New")
        .Visible = False

    End With

    With Shapes("Label10New")

        .Visible = False
    
    End With
 

End With

Else
With Worksheets(1)


       With Shapes("ShiftSelector")
        
        .Left = 3 * L + 2 * W
        .Top = TSecLine + lblH
        .Width = W
        .Height = cmbH
        .Visible = False
        
        
    End With

    With Shapes("Label11New")
    
        .TextFrame.Characters.Caption = "Shift"
        .Left = 3 * L + 2 * W
        .Top = TSecLine
        .Width = W
        .Height = lblH
        .Visible = False
        
    End With
    
        With Shapes("Label7New")

        .Visible = True
    End With

    With Shapes("Label8New")

        .Visible = True
    End With

    
    With Shapes("Label9New")
        .Visible = True

    End With

    With Shapes("Label10New")

        .Visible = True
    
    End With


End With
End If
End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Application.ScreenUpdating = False
    ActiveWindow.DisplayGridlines = False
    Module4.FormatModificationObjects
    Module4.PopulateActionToBeTakenSelector
    Module4.HideModificationObjects
 
    

    Sheets("3rdPartyMaintenance").Shapes("ThirdPartyUserNameSelector").Visible = True
    Sheets("3rdPartyMaintenance").Shapes("IssueButton").Visible = True
    Module4.getThirdPartyUsers
    Module4.PopulateThirdPartyUserNameSelector
    
    Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Version History
'##################################################################################
'FieldExcelAppVersion = 2. Modified on
'FieldExcelAppVersion = 3. Modified on 13-Nov-2018 by Vasu Podugu
'                          giving provision to user to enter data for back dates
'
'##################################################################################


Sub Auto_Close()
ThisWorkbook.Saved = True
End Sub

Private Sub Workbook_Open()
Module1.UnprotectSheet
Module4.hidesheets
    
    bFlag = True
     If Not ValidUser Then
    
        MsgBox "You are not Authorised to use this Workbook", vbCritical
        ActiveWorkbook.Close
   
            
    Else
             'reverse changes later
        If gintAppVersion <> 4 Then
        MsgBox "You are using outdated version of this Workbook. Please download a new version of Make Data entry tool from the portal.", vbCritical
        'ActiveWorkbook.Close
        Else
           
    Application.ScreenUpdating = False
    Sheets(1).Activate
    ActiveWindow.DisplayGridlines = False
            
        End If
        
    End If
bFlag = True
    
Module1.HideColumnI
'Worksheets("DataEntry").Init

Module4.getFileName
Module4.getTemplatePath
Module1.usertypecheck
Call ClearLists(1)
Module1.getMarketNew
Module1.getSiteNew
Module1.getLineNew
Module1.getDisciplineNew
Module2.CreateOEEList
Module1.getKPINew
Module1.getFrequencyNew
Module1.getPeriodNew
Module1.getDateNew
Module1.getShiftNew
Module1.ProtectDataEntryFullSheet



bFlag = False

Application.ScreenUpdating = True

Application.EnableEvents = True

End Sub


Private Sub Workbook_BeforeClose(Cancel As Boolean)
 bFlag = True
 
 
 Module1.UnprotectSheet
 
 ThisWorkbook.Saved = True
End Sub

Private Sub Workbook_SheetCalculate(ByVal Sh As Object)

End Sub

Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)


If Target.row > 10 And Target.column = 7 Then

'Target.Cells.Interior.ColorIndex = 15

Cells(Target.row, 25).Value = 1
Cells(Target.row, 27).Value = 1
End If
If Target.row > 10 And Target.column = 9 Then

Cells(Target.row, 26).Value = 1
Cells(Target.row, 27).Value = 1

End If


If Target.column = 9 Then
Application.EnableEvents = False
Module1.HideColumnI
Sheets("DataEntry").Columns("I").ClearContents
Application.EnableEvents = True
End If

End Sub

Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{6520F4A8-7782-4A2C-B97F-34A6B2C3938A}{B4092258-145C-488B-903F-91A2274450B4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{50FC750E-2908-4EFE-BBB0-58C1CAEF0D95}{C19F1CFF-6B39-4598-9585-C32DE7A49EC5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

' InQuest injected base64 decoded content
' zU,z
' N|*'
' 'nj\(
'  /j)ZnW
'  /j)ZnW
'  /j)ZnW
'  /j)ZnW
' J+^N
' zjej
' zA't6

INQUEST-PP=macro
