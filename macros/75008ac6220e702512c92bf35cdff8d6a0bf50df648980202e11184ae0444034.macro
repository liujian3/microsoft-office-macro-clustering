Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CreateInstruments, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "ResizeTableButton, 2, 1, MSForms, CommandButton"
Option Explicit
Option Base 1
Option Compare Text

Private Sub generateOptions()
    ActiveSheet.Calculate
    Application.ScreenUpdating = False
    clearOptions
    Dim inRng As Range: Set inRng = Range("NX_" & Me.Name & "_M_SelectionGrid")
    Dim outRng As Range: Set outRng = Range("NX_" & Me.Name & "_M_InstDefs")
    Dim asn$: asn = ActiveSheet.Name
    
    
    
    Dim i As Integer, j As Integer
    Dim counter As Integer: counter = 0
    Dim invcom$: invcom = """"
    Dim f$
    
    For i = 2 To inRng.Rows.Count
        For j = 2 To inRng.Columns.Count
            If inRng(i, j) = "Y" Then
                counter = counter + 1
                outRng.Cells(counter, 1) = inRng.Cells(i, 1)
                outRng.Cells(counter, 2) = inRng.Cells(1, j)
                outRng.Cells(counter, 3).Formula = "=nxInstrumentFXEuropean(" _
                                                    & "NX_" & asn & "_M_PrefixValue &" & invcom & "." & invcom & "& NX_" & asn & "_M_NameValue &" & invcom & "." & invcom & "&" & invcom & outRng(counter, 1) & invcom & "&" & invcom & "." & invcom & "&" & invcom & outRng(counter, 2) & invcom & "," _
                                                    & "NX_" & asn & "_M_DomesticCurrency," _
                                                    & "NX_" & asn & "_M_Flavor," _
                                                    & "NX_" & asn & "_M_ForeignCurrency," _
                                                    & outRng.Cells(counter, 2).Address & ",,," _
                                                    & outRng.Cells(counter, 1).Address & ",,," _
                                                    & "NX_" & asn & "_M_NoticePeriod," _
                                                    & "NX_" & asn & "_M_FixCalendar," _
                                                    & "NX_" & asn & "_M_FixConvention," _
                                                    & "NX_" & asn & "_M_Notional," _
                                                    & "NX_" & asn & "_M_VolCurve)"

                   
            End If
        Next
    Next
    
    If counter = 0 Then Exit Sub
    Range(outRng.Cells(1, 1), outRng.Cells(counter, 3)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_InstDefs", RefersTo:=Selection
    Selection.HorizontalAlignment = xlCenter
    Selection.Interior.ColorIndex = 2
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    Range(outRng.Cells(1, 2), outRng.Cells(counter, 3)).NumberFormat = "#,##0.0000"
    Range(outRng.Cells(1, 3), outRng.Cells(counter, 4)).HorizontalAlignment = xlLeft
    
    Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" _
                                    & "NX_" & asn & "_M_PrefixValue&" & invcom & "." & invcom & "& NX_" & asn & "_M_NameValue&" & invcom & ".Collection" & invcom & "," _
                                    & "NX_" & asn & "_M_DomesticCurrency," _
                                    & Range(outRng.Cells(1, 3).Offset(-1, 0), outRng.Cells(counter, 3)).Address & ",," _
                                    & "NX_" & asn & "_M_ForeignCurrency)"

   ActiveSheet.Calculate
   Range("NX_" & asn & "_M_Anchor").Select
   
End Sub

Private Sub ResizeTable()
    ActiveSheet.Calculate
   
    Dim asn$: asn = ActiveSheet.Name
    Dim anchor As Range: Set anchor = Range("NX_" & Me.Name & "_M_SelectionGrid").Cells(1, 1)
    Dim FXVolData: FXVolData = Application.Run("NxLibView", Range("NX_" & Me.Name & "_M_VolCurve") & ".Data")
    Dim i As Integer, rowCount As Integer, columnCount As Integer: rowCount = 0
            
        
    'Check that a valid XXX.XXX.FXVol.Data exists
    On Error GoTo ResizeTable_BadVolData:
    Dim ErrorCheck As Variant: ErrorCheck = LBound(FXVolData, 1): ErrorCheck = LBound(FXVolData, 2)
        
    
    'Check that STRIKE BY SIDE is valid
    Dim strikeBySide As Variant: strikeBySide = Range("NX_" & Me.Name & "_M_StrikeBySide").Value
    If Int(strikeBySide) / strikeBySide <> 1 Then
        GoTo ResizeTable_BadStrikeBySide
    Else
        columnCount = 2 * strikeBySide + 1
    End If
       
    'Check that STRIKE FACBOR is valid
    If Not IsNumeric(Range("NX_" & Me.Name & "_M_StrikeFactor").Value) Then
        GoTo ResizeTable_BadStrikeFactor
    End If
    
    'Check that ATM Price is valid
    Dim ATMPrice As Variant: ATMPrice = Range("NX_" & Me.Name & "_M_ATMPrice")
    If Not IsNumeric(ATMPrice) Then
        GoTo ResizeTable_BadATMPrice
    End If
          
    On Error GoTo 0
    
    Range("NX_" & Me.Name & "_M_SelectionGrid") = ""
    For i = LBound(FXVolData) + 1 To UBound(FXVolData)
        rowCount = rowCount + 1
        anchor.Offset(rowCount, 0) = FXVolData(i, 1)
    Next
    
    anchor.Offset(0, strikeBySide + 1) = "ATM"
    Dim lastLeftPrice As Double: lastLeftPrice = ATMPrice
    Dim lastRightPrice As Double: lastRightPrice = ATMPrice
    Dim strikeFactor As Double: strikeFactor = Range("NX_" & Me.Name & "_M_StrikeFactor")
        
    For i = strikeBySide To 1 Step -1
            lastLeftPrice = lastLeftPrice - ATMPrice * strikeFactor
            lastRightPrice = lastRightPrice + ATMPrice * strikeFactor
            anchor.Offset(0, i) = lastLeftPrice
            anchor.Offset(0, columnCount - i + 1) = lastRightPrice
    Next
    
    Range(anchor, anchor.Offset(rowCount, columnCount)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_SelectionGrid", RefersTo:=Selection
    
    ActiveSheet.Calculate
    Range("NX_" & asn & "_M_Anchor").Select
    
    
    Exit Sub
    
ResizeTable_BadVolData:
    MsgBox FXVolData(1) & vbCrLf & "Check that your market data is properly loaded.", _
        vbExclamation, "Numerix Object Not Found"
    Exit Sub
    
ResizeTable_BadStrikeBySide:
    MsgBox "Can not Resize Table. STRIKE BY SIDE must be an integer.", _
        vbExclamation, "Invalid Input"
    Exit Sub
ResizeTable_BadStrikeFactor:
    MsgBox "STRIKE FACTOR must be a number.", _
    vbExclamation, "Invalid Input"
    Exit Sub
ResizeTable_BadATMPrice:
    MsgBox "Can not Resize Table. ATM Price must be a number." & vbCrLf & "Please provide a number or a FX Spot Object as SPOT PRICE", _
    vbExclamation, "Invalid Input"

End Sub


Private Sub clearOptions()
    Range("NX_" & Me.Name & "_M_InstDefs").Clear
End Sub

Private Sub CreateInstruments_Click()
    generateOptions
    
End Sub



Private Sub ResizeTableButton_Click()
    ResizeTable
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "modFxBS"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Option Explicit
Option Base 1
Option Compare Text

Private Sub generateOptions()
    Application.ScreenUpdating = False
    clearOptions
    Dim inGrid As Range: Set inGrid = Range("Nx_" & Me.Name & "_Selection")
    Dim outRng As Range: Set outRng = Range("Nx_" & Me.Name & "_Options")
    Dim i As Integer, j As Integer
    Dim counter As Integer: counter = 1
    Dim invcom$: invcom = """"
    Dim f$
    
    For i = 2 To inGrid.Rows.Count
        For j = 2 To inGrid.Columns.Count
            If inGrid(i, j) = "Y" Then
                outRng.Cells(counter, 1) = inGrid.Cells(i, 1)
                outRng.Cells(counter, 2).Formula = "=IF(c11,1/" & inGrid.Cells(1, j).Address & "," & inGrid.Cells(1, j).Address & ")"
                outRng.Cells(counter, 3).Formula = "=nxLibAddTenor($E$13,B" & 16 + counter & "," & invcom & "MF" & invcom & ",$E$12)"
                f = "=nxInstrumentFXEuropean("
                f = f & "c6 &" & invcom & "." & invcom & _
                    "&c7 &" & invcom & "." & invcom & _
                    "&c8 &" & invcom & "." & invcom & _
                    "&c13&" & invcom & "." & invcom & _
                    "&b" & 16 + counter & "&" & invcom & "." & invcom & "&" & j - 1
                f = f & ",c7," & invcom & "Call" & invcom & ",c8"
                f = f & ",c" & 16 + counter
                f = f & ",,,b" & 16 + counter
                f = f & ",,,e7,e12," & invcom & "F" & invcom & ",,"
                f = f & "c12)"
                outRng.Cells(counter, 4).Formula = f
                counter = counter + 1
            End If
        Next
    Next
    counter = counter - 1
    
    Range(outRng.Cells(1, 1), outRng.Cells(counter, 4)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_Options", RefersTo:=Selection
    Selection.HorizontalAlignment = xlCenter
    Selection.Interior.ColorIndex = 2
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    Range(outRng.Cells(1, 2), outRng.Cells(counter, 2)).NumberFormat = "#,##0.0000"
    Range(outRng.Cells(1, 3), outRng.Cells(counter, 3)).NumberFormat = "dd-mmm-yyyy"
    ActiveSheet.Calculate
End Sub

Private Sub CommandButton1_Click()
    generateOptions
End Sub

Private Sub clearOptions()
    Range("NX_" & Me.Name & "_Options").Clear
End Sub




INQUEST-PP=macro
