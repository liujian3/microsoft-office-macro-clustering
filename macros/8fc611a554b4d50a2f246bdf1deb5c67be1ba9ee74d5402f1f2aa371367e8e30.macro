Attribute VB_Name = "Module1"
Sub Macro1()
Attribute Macro1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro1 Macro
'

'
    Selection.Copy
    Range("BE610").Select
    Selection.PasteSpecial Paste:=xlPasteColumnWidths, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    If Not Intersect(Target, Range("D4")) Is Nothing Then
        Call GetDataBackToModel
        'Call goNow7
    End If
End Sub



Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    If Not Intersect(Target, Range("D4")) Is Nothing Then
        Call GetDataBackToModel
        'Call goNow7
    End If
End Sub



Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    If Not Intersect(Target, Range("D4")) Is Nothing Then
        Call GetDataBackToModel
        'Call goNow7
    End If
End Sub



Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    If Not Intersect(Target, Range("D4")) Is Nothing Then
        Call GetDataBackToModel
        'Call goNow7
    End If
End Sub



Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "down"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "mdlButton"
Sub cmdGoNow1(control As IRibbonControl)

Call goNow1
Call goNow3

MsgBox ("Complete")

End Sub
Sub cmdGoNow2(control As IRibbonControl)

Call goNow2

End Sub
Sub cmdGoNow3(control As IRibbonControl)

Call goNow3

End Sub
Sub cmdGoNow4(control As IRibbonControl)

Call goNow4

End Sub
Sub cmdGoNow5(control As IRibbonControl)

Call goNow5

End Sub
Sub cmdGoNow6(control As IRibbonControl)

Call goNow6

End Sub
Sub cmdGoNow7(control As IRibbonControl)

Call goNow8

End Sub
Sub cmdGoNow10(control As IRibbonControl)

Call goNow10

End Sub
Sub cmdGoNow11(control As IRibbonControl)

Call goNow11

End Sub

Attribute VB_Name = "mdlMain"
Option Explicit
Sub goNow1()
    
    ' Save Data from Quarterly to Market Data
    
    ThisWorkbook.Save
    
    'Set variables
    Dim strProj As String
    Dim strLoc As String
    Dim rngFind As Range
    Dim intLastRow As Long, intRow As Long
    Dim blnExists As Boolean, strList As String
    Dim MapRow As Integer, MapCell As Range, MapRange As Range, ValueRange As Range
    Dim Count As Integer
    Dim TextCell As Range
    
    ThisWorkbook.Sheets("Market Data").Range("tblData[#Headers]").AutoFilter
    ThisWorkbook.Sheets("Market Data").Range("tblData[#Headers]").AutoFilter
    
    'Set Project and Location
    strProj = Range("ProjName").Value
    strLoc = Range("ProjLocation").Value
    blnExists = False
    
    'See if it exists already
    For intRow = 1 To Range("tblData").Rows.Count
        If Range("tblData[Project]")(intRow).Value = strProj Then
            If Range("tblData[Location]")(intRow).Value = strLoc Then
                blnExists = True
                Exit For
            End If
        End If
        Next intRow
        
    If blnExists = True Then
        MsgBox ("Project '" & strProj & "' with location '" & strLoc & "' already exists on 'Market Data' tab.  Pleae use UPDATE button")
        Exit Sub
        End If
    
    'Get the last row
    intLastRow = Range("tblData").Rows.Count + 1
    
    'Photo
    Range("tblData[Photo]")(intLastRow).Value = "aaaa"
    
    'Comments
    For Each TextCell In Range("Comments")
        If TextCell <> "" Then
            If strList <> "" Then strList = strList & Chr(10)
            strList = strList & TextCell
            End If
        Next TextCell
    Range("tblData[Comments]")(intLastRow).Value = strList
    
    'Benchmarks
    strList = ""
    For Each TextCell In Range("Benchmarks")
        If TextCell <> "" Then
            If strList <> "" Then strList = strList & Chr(10)
            strList = strList & TextCell
            End If
        Next TextCell
    Range("tblData[Benchmarks]")(intLastRow).Value = strList
    
    'Standard Data
    For Count = 1 To 5
        Set MapRange = Range("Map_" & Count)
        Set ValueRange = Range("ValR_" & Count)
        
        MapRow = 0
        For Each MapCell In MapRange
            MapRow = MapRow + 1
            If MapCell <> "" Then Range("tblData[" & MapCell.Value & "]")(intLastRow).Value = ValueRange(MapRow).Value
            Next MapCell
        Next Count
    
    'L+ and Public Markets
    Range("tblData[L+]")(intLastRow) = Range("tblData[L+]")(intLastRow) * 10000
    Range("tblData[Public Markets]")(intLastRow) = Range("tblData[Public Markets]")(intLastRow) * 10000
    
    'Gound rent
    Range("tblData[Initial Rent_GR]")(intLastRow) = Range("Initial_GR")
    Range("tblData[Ground Rent]")(intLastRow) = Range("PV_GR")
    
    'CTL (incl GR)
    Range("tblData[CTL (incl GR)]")(intLastRow) = Range("PV_GR") + Range("PV_CTLGR")
    
End Sub

Sub goNow2()

    ThisWorkbook.Save
    
    'Set Varibales
    Dim intAns As Integer
    Dim strProj As String
    Dim blnExists As Boolean
    Dim strLoc As String, dblAmt As Double
    Dim rngFind As Range
    Dim intRow As Integer, intLastRow As Integer
    
    'Set Project and Location
    strProj = Range("ProjName")
    strLoc = Range("ProjLocation")
    blnExists = False
    
    'See if it exists already
    
    For intRow = 1 To Range("tbldata").Rows.Count
        If Range("tblData[Project]")(intRow).Value = strProj And Range("tblData[Location]")(intRow).Value = strLoc Then
            blnExists = True
            Exit For
            End If
        Next intRow
    
    If blnExists = False Then
        MsgBox ("Project '" & strProj & "' with location '" & strLoc & "' does not exist on 'Market Data' tab.  Pleae use ADD button")
        Exit Sub
        End If
    
    'Confirm to delete
    intAns = MsgBox("Are you sure you want to override Project '" & strProj & "' with location '" & strLoc & "' that is already on 'Market Data' tab?", vbYesNo, "Warning")
    If intAns = 7 Then
        Exit Sub
    End If
    
    'Delete Row
    Range("tblData[Project]")(intRow).EntireRow.Delete Shift:=xlUp
    
    Call goNow1
    Call goNow3
    
End Sub
Sub GetDataBackToModel()

    'Set Varibales
    Dim intAns As Integer
    Dim SRow As Integer
    Dim strProj As String
    Dim blnExists As Boolean
    
    Dim MapRow As Integer, MapCell As Range, MapRange As Range, ValueRange As Range
    Dim Count As Integer
    Dim TextCell As Range
    
    Dim strList
    
    blnExists = False
    
    'Set Project and Location
    strProj = Range("SelProject")
    
    'Get Row
    For SRow = 1 To Range("tblData").Rows.Count
        If Range("tblData[Project & Location]")(SRow).Value = strProj Then
            blnExists = True
            Exit For
            End If
        Next SRow
            
    If blnExists = False Then
        Exit Sub
    End If
    
    'Confirm to delete
    intAns = MsgBox("This will overwrite data in this tab with data from Market Data tab." & vbNewLine & "Do you want to do this?", vbYesNo, "Warning")
    If intAns = 7 Then
        Exit Sub
        End If
        
    'Get Data back
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
        
    For Count = 1 To 5
        Set MapRange = Range("Map_" & Count)
        Set ValueRange = Range("ValR_" & Count)
        
        MapRow = 0
        For Each MapCell In MapRange
            MapRow = MapRow + 1
            If MapCell <> "" Then
                If Left(ValueRange(MapRow).FormulaR1C1, 1) <> "=" Then
                    ValueRange(MapRow).Value = Range("tblData[" & MapCell.Value & "]")(SRow).Value
                    End If
                End If
            Next MapCell
        Next Count
        
    'L+ and Public Markets
    Range("CTL_Lp") = Range("tblData[L+]")(SRow) / 10000
    Range("CTL_PublicMarkets") = Range("tblData[Public Markets]")(SRow) / 10000
    
    'Comments
    strList = Range("tblData[Comments]")(SRow).Value
    If strList <> "" Then
        strList = Split(strList, Chr(10))
        Range("Comments").ClearContents
        
        For Count = 1 To Range("Comments").Rows.Count
            If WorksheetFunction.CountA(strList) >= Count Then
                Range("Comments")(Count) = strList(Count - 1)
                End If
            Next Count
        End If
                
    'Benchmarks
    strList = Range("tblData[Benchmarks]")(SRow).Value
    If strList <> "" Then
        strList = Split(strList, Chr(10))
        Range("Benchmarks").ClearContents
        
        For Count = 1 To Range("Benchmarks").Rows.Count
            If WorksheetFunction.CountA(strList) >= Count Then
                Range("Benchmarks")(Count) = strList(Count - 1)
                End If
            Next Count
        End If
                
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    
End Sub
Sub goNow3()

'Set Variable
Dim intLastRow As Integer, intRow As Integer, intMax As Integer
Dim mySrs As Series
Dim cht As ChartObject, chts As ChartObject
Dim strBorrower As String

strBorrower = Range("ProjName")

'Get Row
intLastRow = 10
Do
    intLastRow = intLastRow + 1
    If ThisWorkbook.Sheets("Comps").Cells(intLastRow, 10).Value = strBorrower Then Exit Do
    Loop Until ThisWorkbook.Sheets("Comps").Cells(intLastRow, 3).Value = "" And ThisWorkbook.Sheets("Comps").Cells(intLastRow, 4).Value = "" And ThisWorkbook.Sheets("Comps").Cells(intLastRow, 5).Value = "" And ThisWorkbook.Sheets("Comps").Cells(intLastRow, 6).Value = ""

ThisWorkbook.Sheets("Comps").Rows(intLastRow).HorizontalAlignment = xlCenter

'Issue Date      Term    Estimated Duration  Cap Floor   Indexation  Credit Rating   Borrower / Covenant Arranger    Estimated Spread Over Gilts Security    Estimated Yield
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 2).Value = Range("Comp_IssueDate")
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 2).NumberFormat = "d-mmm-yy"
'Size
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 3).Value = Range("Comp_Size")
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 3).NumberFormat = "_-""|fffd|""* #,##0_-;-""|fffd|""* #,##0_-;_-""|fffd|""* ""-""_-;_-@_-"
ThisWorkbook.Sheets("Comps").Cells(intLastRow - 1, 3).Copy
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 3).PasteSpecial xlFormats
'Term
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 4).Value = Range("Comp_Term")
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 4).NumberFormat = "#,###.##"

'Estimated Duration
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 5).Value = "=D" & intLastRow & "*0.6"
'Cap
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 6).Value = Range("Comp_Cap")
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 6).NumberFormat = "0.00%"
'Floor
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 7).Value = Range("Comp_Floor")
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 7).NumberFormat = "0.00%"
'Indexation
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 8).Value = Range("Comp_Index")
'Credit Rating
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 9).Value = Range("Comp_Rating")
'Borrower/ Covenant
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 10).Value = strBorrower
'Arranger
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 11).Value = "WSG"
'Estimated Spread Over Gilts
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 12).Value = "0.015"
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 12).NumberFormat = "0.00%"
'Security
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 13).Value = "General Liability AND Real Estate Collateral"
'Estimated Yield
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 14).Value = Range("Comp_InitialYield")

'14
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 15).Value = "=1.45%"
ThisWorkbook.Sheets("Comps").Cells(intLastRow, 15).NumberFormat = "0.00%"

ThisWorkbook.Sheets("Comps").Rows("5:" & intLastRow).RowHeight = 15

For Each cht In ThisWorkbook.Sheets("Comps Chart 40").ChartObjects

nextSerie:
For Each mySrs In cht.Chart.SeriesCollection
    If mySrs.PlotOrder > 1 Then
        mySrs.Delete
        GoTo nextSerie
    Else
    End If
Next mySrs
'cht.Name = "Comps2"
intRow = 11
Do
        If cht.Name = "Comps2" Then
            intMax = Application.WorksheetFunction.Max(ThisWorkbook.Sheets("Comps").Range("Comps!D3:D1000"))
            cht.Chart.SeriesCollection(1).XValues = "=ModelYearly!$N$3:$N$" & intMax + 4
            cht.Chart.SeriesCollection(1).Values = "=ModelYearly!$O$3:$O$" & intMax + 4
        End If
        cht.Chart.SeriesCollection.NewSeries
        cht.Chart.SeriesCollection(intRow - 9).XValues = "=Comps!$E$" & intRow
        cht.Chart.SeriesCollection(intRow - 9).Values = "=Comps!$N$" & intRow
        cht.Chart.SeriesCollection(intRow - 9).Name = "" & ThisWorkbook.Sheets("Comps").Cells(intRow, 10).Value & ""
        cht.Chart.SeriesCollection(intRow - 9).Format.Fill.Solid
        cht.Chart.SeriesCollection(intRow - 9).MarkerSize = 8
        cht.Chart.SeriesCollection(intRow - 9).MarkerStyle = xlMarkerStyleCircle
        cht.Chart.SeriesCollection(intRow - 9).Shadow = False
        cht.Chart.SeriesCollection(intRow - 9).Format.Fill.ForeColor.RGB = RGB(0, 0, 0)
        cht.Chart.SeriesCollection(intRow - 9).ApplyDataLabels Type:=xlDataLabelsShowLabel
        cht.Chart.SeriesCollection(intRow - 9).DataLabels.Position = xlLabelPositionAbove
        cht.Chart.SeriesCollection(intRow - 9).DataLabels.ShowCategoryName = False
        cht.Chart.SeriesCollection(intRow - 9).DataLabels.ShowValue = True
        cht.Chart.SeriesCollection(intRow - 9).DataLabels.ShowSeriesName = True
    
intRow = intRow + 1
Loop Until ThisWorkbook.Sheets("Comps").Cells(intRow, 2).Value = "" And ThisWorkbook.Sheets("Comps").Cells(intRow, 3).Value = ""

Next cht

For Each chts In ThisWorkbook.Sheets("Comps Chart 150").ChartObjects


nextSerie2:
For Each mySrs In chts.Chart.SeriesCollection
    If mySrs.PlotOrder > 1 Then
        mySrs.Delete
        GoTo nextSerie2
    Else
    End If
Next mySrs
'chts.Name = "Comps2"
intRow = 11
Do
        If chts.Name = "Comps2" Then
            intMax = Application.WorksheetFunction.Max(ThisWorkbook.Sheets("Comps").Range("Comps!D3:D1000"))
            chts.Chart.SeriesCollection(1).XValues = "=ModelYearly!$N$3:$N$" & intMax + 4
            chts.Chart.SeriesCollection(1).Values = "=ModelYearly!$O$3:$O$" & intMax + 4
        End If
        chts.Chart.SeriesCollection.NewSeries
        chts.Chart.SeriesCollection(intRow - 9).XValues = "=Comps!$E$" & intRow
        chts.Chart.SeriesCollection(intRow - 9).Values = "=Comps!$N$" & intRow
        chts.Chart.SeriesCollection(intRow - 9).Name = "" & ThisWorkbook.Sheets("Comps").Cells(intRow, 10).Value & ""
        chts.Chart.SeriesCollection(intRow - 9).Format.Fill.Solid
        chts.Chart.SeriesCollection(intRow - 9).MarkerSize = 8
        chts.Chart.SeriesCollection(intRow - 9).MarkerStyle = xlMarkerStyleCircle
        chts.Chart.SeriesCollection(intRow - 9).Shadow = False
        chts.Chart.SeriesCollection(intRow - 9).Format.Fill.ForeColor.RGB = RGB(0, 0, 0)
        chts.Chart.SeriesCollection(intRow - 9).ApplyDataLabels Type:=xlDataLabelsShowLabel
        chts.Chart.SeriesCollection(intRow - 9).DataLabels.Position = xlLabelPositionAbove
        chts.Chart.SeriesCollection(intRow - 9).DataLabels.ShowCategoryName = False
        chts.Chart.SeriesCollection(intRow - 9).DataLabels.ShowValue = True
        chts.Chart.SeriesCollection(intRow - 9).DataLabels.ShowSeriesName = True
    
intRow = intRow + 1
Loop Until ThisWorkbook.Sheets("Comps").Cells(intRow, 2).Value = "" And ThisWorkbook.Sheets("Comps").Cells(intRow, 3).Value = ""

Next chts

End Sub
Sub goNow4()

ThisWorkbook.Sheets("ModelYearly").Rows("1:1000").Delete
ThisWorkbook.Sheets("ModelYearly").Rows("1:1000").Delete
ThisWorkbook.Sheets("ModelYearly").Columns("A:Z").Delete

With ThisWorkbook.Sheets("ModelYearly").Cells.Interior
    .Pattern = xlSolid
    .PatternColorIndex = xlAutomatic
    .Color = 16777215
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With

Rem Set working worksheets
Set WshSrc = ThisWorkbook.Worksheets("Qtrly (CTL GR)")
Set WshTrg = ThisWorkbook.Worksheets("ModelYearly")

    WshSrc.Cells.Copy
    With WshTrg.Cells
        .PasteSpecial Paste:=xlPasteColumnWidths
        .PasteSpecial Paste:=xlPasteFormats
        .PasteSpecial Paste:=xlPasteFormulasAndNumberFormats
        Application.CutCopyMode = False
    End With

WshTrg.Columns("G").Replace What:=",12", Replacement:=",3", SearchOrder:=xlByColumns, MatchCase:=True
WshTrg.Cells(2, 8).Value = "Year"
WshTrg.Cells(41, 4).Value = Replace(WshTrg.Cells(41, 4).Value, "H5", "H11")
WshTrg.Cells(25, 4).Value = WshTrg.Cells(25, 4).Value * 4
WshTrg.Columns("H").ColumnWidth = 6
WshTrg.Columns("G").ColumnWidth = 10.5

intRow = 10
Do
WshTrg.Cells(intRow, 8).Value = "=H" & intRow - 1 & "+0.25"
intRow = intRow + 1
Loop Until WshTrg.Cells(intRow, 8).Value = ""

WshTrg.Cells(3, 7).Value = "=DATE(YEAR(D22),FLOOR(MONTH(D22)-1,3)+1,1)-1"

MsgBox ("Done")

End Sub
Sub goNow5()

'export
'Set Variables
Dim objWb As Object
Dim strTabName As String
Dim strName As String
Dim Sheet As Worksheet

strTabName = "Qtrly (CTL)"

strName = ThisWorkbook.Path & "\CTL " & ThisWorkbook.Sheets(strTabName).Cells(10, 5).Value & " " & ThisWorkbook.Sheets(strTabName).Cells(11, 5).Value & " " & Format(Now, "ddmmmmyyyy") & ".xlsx"
ThisWorkbook.Sheets("Disclaimer").Copy
Set objWb = ActiveWorkbook

Set Sheet = objWb.Sheets.Add(After:=objWb.Worksheets(objWb.Worksheets.Count))
Sheet.Name = strTabName

Application.EnableEvents = False

Sheet.Name = strTabName

ActiveWindow.DisplayGridlines = False

ThisWorkbook.Sheets(strTabName).UsedRange.Copy
Sheet.Range("A1").PasteSpecial xlValues
Sheet.Range("A1").PasteSpecial xlFormats
Sheet.Range("A1").PasteSpecial xlPasteColumnWidths

ThisWorkbook.Sheets(strTabName).Shapes("Picture 1").Copy
Sheet.PasteSpecial

Sheet.Shapes("Picture 1").Top = ThisWorkbook.Sheets(strTabName).Shapes("Picture 1").Top
Sheet.Shapes("Picture 1").Left = ThisWorkbook.Sheets(strTabName).Shapes("Picture 1").Left
Sheet.Shapes("Picture 1").Height = ThisWorkbook.Sheets(strTabName).Shapes("Picture 1").Height
Sheet.Shapes("Picture 1").Width = ThisWorkbook.Sheets(strTabName).Shapes("Picture 1").Width


ActiveWindow.DisplayGridlines = False

Sheet.Range("A1").Select

Application.EnableEvents = True

ActiveWindow.DisplayGridlines = False

Set Sheet = objWb.Sheets.Add(After:=objWb.Worksheets(objWb.Worksheets.Count))
Sheet.Name = "Curves"

ThisWorkbook.Sheets("Curves").Columns("A:U").Copy
Sheet.Columns("A:U").PasteSpecial xlValues

ThisWorkbook.Sheets("Curves").Columns("A:U").Copy
Sheet.Columns("A:U").PasteSpecial xlFormats

ThisWorkbook.Sheets("Curves").Columns("A:U").Copy
Sheet.Columns("A:U").PasteSpecial xlFormats


Sheet.Range("A1").Select

ActiveWindow.DisplayGridlines = False

objWb.Sheets(1).Activate

Application.CutCopyMode = False

objWb.SaveAs strName

End Sub
Sub goNow6()

Call DownloadZipExtractCsvAndLoad

    Dim FSO As Object
    Dim oApp As Object
    Dim Fname As Variant
    Dim FileNameFolder As Variant
    Dim DefPath As String
    Dim strDate As String
    Dim strF As String
    Dim wb As Workbook, ws As Worksheet
    Dim LastRow As Integer
    
    Fname = Environ("USERPROFILE") & "\Downloads\BOEData.zip"

    FileNameFolder = Environ("USERPROFILE") & "\Downloads\"

    Set oApp = CreateObject("Shell.Application")

strF = Environ("USERPROFILE") & "\Downloads\GLC Inflation daily data current month.xlsx"
If Dir(strF) <> "" Then
    Kill strF
End If

strF = Environ("USERPROFILE") & "\Downloads\BLC Nominal daily data current month.xlsx"
If Dir(strF) <> "" Then
    Kill strF
End If

strF = Environ("USERPROFILE") & "\Downloads\GLC Nominal daily data current month.xlsx"
If Dir(strF) <> "" Then
    Kill strF
End If

strF = Environ("USERPROFILE") & "\Downloads\GLC Real daily data current month.xlsx"
If Dir(strF) <> "" Then
    Kill strF
End If

strF = Environ("USERPROFILE") & "\Downloads\OIS daily data current month.xlsx"
If Dir(strF) <> "" Then
    Kill strF
End If

'Get yesterdays
'ThisWorkbook.Sheets("Curves").Range("B5:C84").Copy
'ThisWorkbook.Sheets("HistoricalCurve").Range("P5:Q84").PasteSpecial xlValues

oApp.Namespace(FileNameFolder).CopyHere oApp.Namespace(Fname).items

Set wb = Workbooks.Open(Environ("USERPROFILE") & "\Downloads\GLC Inflation daily data current month.xlsx")

Set ws = wb.Sheets("4. spot curve")

LastRow = ws.Range("A" & Rows.Count).End(xlUp).Row

ws.Range("C" & LastRow - 1 & ":BY" & LastRow - 1).Copy
ThisWorkbook.Sheets("HistoricalCurve").Range("Q10").PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=True

ws.Range("C" & LastRow & ":BY" & LastRow).Copy
ThisWorkbook.Sheets("Curves").Range("C10").PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
ThisWorkbook.Sheets("HistoricalCurve").Range("C10").PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=True

ThisWorkbook.Sheets("Curves").Cells(1, 2).Value = ws.Cells(LastRow, 1).Value
ThisWorkbook.Sheets("HistoricalCurve").Cells(1, 2).Value = ws.Cells(LastRow, 1).Value
ThisWorkbook.Sheets("HistoricalCurve").Cells(1, 16).Value = ws.Cells(LastRow - 1, 1).Value

Application.CutCopyMode = False

Application.DisplayAlerts = False
wb.Close
Application.DisplayAlerts = True

ThisWorkbook.Sheets("Curves").Range("C10:C84").Interior.Color = RGB(252, 228, 214)
ThisWorkbook.Sheets("HistoricalCurve").Range("C10:C84").Interior.Color = RGB(252, 228, 214)
ThisWorkbook.Sheets("HistoricalCurve").Range("Q10:Q84").Interior.Color = RGB(252, 228, 214)

Set wb = Workbooks.Open(Environ("USERPROFILE") & "\Downloads\GLC Nominal daily data current month.xlsx")

Set ws = wb.Sheets("4. spot curve")

LastRow = ws.Range("A" & Rows.Count).End(xlUp).Row

ws.Range("C" & LastRow - 1 & ":CC" & LastRow - 1).Copy
ThisWorkbook.Sheets("HistoricalCurve").Range("P5").PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=True

ws.Range("C" & LastRow & ":CC" & LastRow).Copy
ThisWorkbook.Sheets("Curves").Range("B5").PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
ThisWorkbook.Sheets("HistoricalCurve").Range("B5").PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=True

Application.CutCopyMode = False

Application.DisplayAlerts = False
wb.Close
Application.DisplayAlerts = True

ThisWorkbook.Sheets("Curves").Range("B5:B84").Interior.Color = RGB(252, 228, 214)
ThisWorkbook.Sheets("HistoricalCurve").Range("B5:B84").Interior.Color = RGB(252, 228, 214)
ThisWorkbook.Sheets("HistoricalCurve").Range("P5:P84").Interior.Color = RGB(252, 228, 214)


ThisWorkbook.Sheets("HistoricalCurve").Cells(1, 5).Value = "Last Download - " & Now()

ThisWorkbook.Sheets("GILT Curve").ChartObjects("Chart 7").Chart.ChartTitle.Text = "GILT CURVE - " & Format(ThisWorkbook.Sheets("HistoricalCurve").Cells(1, 2).Value, "dd-mmm-yyyy") & " vs " & Format(ThisWorkbook.Sheets("HistoricalCurve").Cells(1, 16).Value, "dd-mmm-yyyy")
'ThisWorkbook.Sheets("GILT Curve").ChartObjects("Chart 7").Chart.ChartTitle.Text = "Today vs Yesterday"
ThisWorkbook.Sheets("GILT Curve").ChartObjects("Chart 7").Chart.SeriesCollection(1).Name = "=""" & Format(ThisWorkbook.Sheets("HistoricalCurve").Cells(1, 2).Value, "dd-mmm-yyyy") & """"
ThisWorkbook.Sheets("GILT Curve").ChartObjects("Chart 7").Chart.SeriesCollection(2).Name = "=""" & Format(ThisWorkbook.Sheets("HistoricalCurve").Cells(1, 16).Value, "dd-mmm-yyyy") & """"
    
    
MsgBox ("Complete")

End Sub

Sub DownloadZipExtractCsvAndLoad()

Err.Clear

  Dim UrlFile As String, ZipFile As String, CsvFile As String, Folder As String, s As String
  ' UrlFile to the ZIP archive
  UrlFile = "https://www.bankofengland.co.uk/-/media/boe/files/statistics/yield-curves/latest-yield-curve-data.zip?la=en&hash=89B8A093FA97EF7DD79382044E15867840E45204"
  ' Extract ZipFile from UrlFile
  ZipFile = "BOEData.zip"
  ' Define temporary folder
  Folder = Environ("USERPROFILE") & "\Downloads\"
  ' Disable screen updating to avoid blinking
  Application.ScreenUpdating = False
  ' Trap errors
  On Error GoTo exit_
  ' Download UrlFile to ZipFile in Folder
  If Not Url2File(UrlFile, Folder & ZipFile, "xxx", "xxxx") Then
    MsgBox "Can't download file" & vbLf & UrlFile, vbCritical, "Error"
    Exit Sub
  End If
exit_:
  ' Restore screen updating
  Application.ScreenUpdating = True
  ' Inform about the reason of the trapped error
  If Err Then MsgBox Err.Description, vbCritical, "Error"
End Sub

Function Url2File(UrlFile As String, PathName As String, Optional Login As String, Optional Password As String) As Boolean
'ZVI:2017-01-07 Download UrlFile and save it to PathName.
'               Use optional Login and Password if required.
'               Returns True on success downloading.
  Dim b() As Byte, FN As Integer
  On Error GoTo exit_
  If Len(Dir(PathName)) Then Kill PathName
  With CreateObject("MSXML2.XMLHTTP")
    .Open "GET", UrlFile, False, Login, Password
    .send
    If .Status <> 200 Then Exit Function
    b() = .responseBody
    FN = FreeFile
    Open PathName For Binary Access Write As #FN
    Put #FN, , b()
exit_:
    If FN Then Close #FN
    Url2File = .Status = 200
  End With
End Function

Sub goNow7()

ThisWorkbook.Sheets("ModelYearly").Rows("1:1000").Delete
ThisWorkbook.Sheets("ModelYearly").Rows("1:1000").Delete
ThisWorkbook.Sheets("ModelYearly").Columns("A:Z").Delete

With ThisWorkbook.Sheets("ModelYearly").Cells.Interior
    .Pattern = xlSolid
    .PatternColorIndex = xlAutomatic
    .Color = 16777215
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With

Rem Set working worksheets
Set WshSrc = ThisWorkbook.Worksheets("Qtrly (CTL GR)")
Set WshTrg = ThisWorkbook.Worksheets("ModelYearly")

    WshSrc.Cells.Copy
    With WshTrg.Cells
        .PasteSpecial Paste:=xlPasteColumnWidths
        .PasteSpecial Paste:=xlPasteFormats
        .PasteSpecial Paste:=xlPasteFormulasAndNumberFormats
        Application.CutCopyMode = False
    End With

WshTrg.Columns("G").Replace What:=",12", Replacement:=",3", SearchOrder:=xlByColumns, MatchCase:=True
WshTrg.Cells(2, 8).Value = "Year"
WshTrg.Cells(41, 4).Value = Replace(WshTrg.Cells(41, 4).Value, "H5", "H11")
WshTrg.Cells(25, 4).Value = WshTrg.Cells(25, 4).Value * 4
WshTrg.Columns("H").ColumnWidth = 6
WshTrg.Columns("G").ColumnWidth = 10.5

intRow = 4
Do
WshTrg.Cells(intRow, 8).Value = "=H" & intRow - 1 & "+0.25"
intRow = intRow + 1
Loop Until WshTrg.Cells(intRow, 8).Value = ""

WshTrg.Cells(3, 7).Value = "=DATE(YEAR(D22),FLOOR(MONTH(D22)-1,3)+1,1)-1"

MsgBox ("Done")

End Sub
Function GetQuarterDate(dteGet As Date)

Dim dt As Date
dt = dteGet

If Month(dt) = 12 Then
    dt = dt - 6
End If

If Month(dt) = 9 Then
    dt = dt - 1
End If

If Month(dt) = 6 Then
    dt = dt - 6
End If

If Month(dt) = 3 Then
    dt = dt - 6
    
End If

GetQuarterDate = dt

End Function
Sub goNow8()

'Set Variables
Dim objWb As Object
Dim strTabName As String
Dim strName As String
Dim Sheet As Worksheet

ThisWorkbook.Sheets("Disclaimer").Copy
Set objWb = ActiveWorkbook

strTabName = "Qtrly (GR)"
strName = ThisWorkbook.Path & "\CTL GR" & ThisWorkbook.Sheets(strTabName).Cells(10, 5).Value & " " & ThisWorkbook.Sheets(strTabName).Cells(11, 5).Value & " " & Format(Now, "ddmmmmyyyy") & ".xlsx"

Set Sheet = objWb.Sheets.Add(After:=objWb.Worksheets(objWb.Worksheets.Count))
Sheet.Name = strTabName

Application.EnableEvents = False

Sheet.Name = strTabName

ActiveWindow.DisplayGridlines = False

ThisWorkbook.Sheets(strTabName).UsedRange.Copy
Sheet.Range("A1").PasteSpecial xlValues
Sheet.Range("A1").PasteSpecial xlFormats
Sheet.Range("A1").PasteSpecial xlPasteColumnWidths
    
ThisWorkbook.Sheets(strTabName).Shapes("Picture 1").Copy
Sheet.PasteSpecial

Sheet.Shapes("Picture 1").Top = ThisWorkbook.Sheets(strTabName).Shapes("Picture 1").Top
Sheet.Shapes("Picture 1").Left = ThisWorkbook.Sheets(strTabName).Shapes("Picture 1").Left
Sheet.Shapes("Picture 1").Height = ThisWorkbook.Sheets(strTabName).Shapes("Picture 1").Height
Sheet.Shapes("Picture 1").Width = ThisWorkbook.Sheets(strTabName).Shapes("Picture 1").Width


ActiveWindow.DisplayGridlines = False

Sheet.Range("A1").Select

Application.EnableEvents = True

ActiveWindow.DisplayGridlines = False

strTabName = "Qtrly (CTL GR)"

Set Sheet = objWb.Sheets.Add(After:=objWb.Worksheets(objWb.Worksheets.Count))
Sheet.Name = strTabName

Application.EnableEvents = False

Sheet.Name = strTabName

ActiveWindow.DisplayGridlines = False

ThisWorkbook.Sheets(strTabName).UsedRange.Copy
Sheet.Range("A1").PasteSpecial xlValues
Sheet.Range("A1").PasteSpecial xlFormats
Sheet.Range("A1").PasteSpecial xlPasteColumnWidths

ThisWorkbook.Sheets(strTabName).Columns("A:AC").Copy
Sheet.Columns("A:AC").PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    
ThisWorkbook.Sheets(strTabName).Shapes("Picture 1").Copy
Sheet.PasteSpecial

Sheet.Shapes("Picture 1").Top = ThisWorkbook.Sheets(strTabName).Shapes("Picture 1").Top
Sheet.Shapes("Picture 1").Left = ThisWorkbook.Sheets(strTabName).Shapes("Picture 1").Left
Sheet.Shapes("Picture 1").Height = ThisWorkbook.Sheets(strTabName).Shapes("Picture 1").Height
Sheet.Shapes("Picture 1").Width = ThisWorkbook.Sheets(strTabName).Shapes("Picture 1").Width


ActiveWindow.DisplayGridlines = False

Sheet.Range("A1").Select

Application.EnableEvents = True

ActiveWindow.DisplayGridlines = False

Set Sheet = objWb.Sheets.Add(After:=objWb.Worksheets(objWb.Worksheets.Count))
Sheet.Name = "Curves"

ThisWorkbook.Sheets("Curves").Columns("A:U").Copy
Sheet.Columns("A:U").PasteSpecial xlValues

ThisWorkbook.Sheets("Curves").Columns("A:U").Copy
Sheet.Columns("A:U").PasteSpecial xlFormats

ThisWorkbook.Sheets("Curves").Columns("A:U").Copy
Sheet.Columns("A:U").PasteSpecial xlFormats


Sheet.Range("A1").Select

ActiveWindow.DisplayGridlines = False

objWb.Sheets(1).Activate

Application.CutCopyMode = False

objWb.SaveAs strName

End Sub
Sub goNow10()

'Set Variable
Dim intLastRow As Integer
Dim mySrs As Series

'Get Row
intLastRow = 10
Do
intLastRow = intLastRow + 1
Loop Until ThisWorkbook.Sheets("Comps").Cells(intLastRow, 3).Value = "" And ThisWorkbook.Sheets("Comps").Cells(intLastRow, 4).Value = "" And ThisWorkbook.Sheets("Comps").Cells(intLastRow, 5).Value = "" And ThisWorkbook.Sheets("Comps").Cells(intLastRow, 6).Value = ""


For Each cht In ThisWorkbook.Sheets("Comps Chart 40").ChartObjects


nextSerie:
For Each mySrs In cht.Chart.SeriesCollection
    If mySrs.PlotOrder > 1 Then
        mySrs.Delete
        GoTo nextSerie
    Else
    End If
Next mySrs
'cht.Name = "Comps2"
intRow = 11
Do
        If cht.Name = "Comps2" Then
            intMax = Application.WorksheetFunction.Max(ThisWorkbook.Sheets("Comps").Range("Comps!D3:D1000"))
            cht.Chart.SeriesCollection(1).XValues = "=ModelYearly!$N$3:$N$" & intMax + 4
            cht.Chart.SeriesCollection(1).Values = "=ModelYearly!$O$3:$O$" & intMax + 4
        End If
        cht.Chart.SeriesCollection.NewSeries
        cht.Chart.SeriesCollection(intRow - 9).XValues = "=Comps!$E$" & intRow
        cht.Chart.SeriesCollection(intRow - 9).Values = "=Comps!$N$" & intRow
        cht.Chart.SeriesCollection(intRow - 9).Name = "" & ThisWorkbook.Sheets("Comps").Cells(intRow, 10).Value & ""
        cht.Chart.SeriesCollection(intRow - 9).Format.Fill.Solid
        cht.Chart.SeriesCollection(intRow - 9).MarkerSize = 8
        cht.Chart.SeriesCollection(intRow - 9).MarkerStyle = xlMarkerStyleCircle
        cht.Chart.SeriesCollection(intRow - 9).Shadow = False
        cht.Chart.SeriesCollection(intRow - 9).Format.Fill.ForeColor.RGB = RGB(0, 0, 0)
        cht.Chart.SeriesCollection(intRow - 9).ApplyDataLabels Type:=xlDataLabelsShowLabel
        cht.Chart.SeriesCollection(intRow - 9).DataLabels.Position = xlLabelPositionAbove
        cht.Chart.SeriesCollection(intRow - 9).DataLabels.ShowCategoryName = False
        cht.Chart.SeriesCollection(intRow - 9).DataLabels.ShowValue = True
        cht.Chart.SeriesCollection(intRow - 9).DataLabels.ShowSeriesName = True
    
intRow = intRow + 1
Loop Until ThisWorkbook.Sheets("Comps").Cells(intRow, 2).Value = "" And ThisWorkbook.Sheets("Comps").Cells(intRow, 3).Value = ""

Next cht

For Each chts In ThisWorkbook.Sheets("Comps Chart 150").ChartObjects


nextSerie2:
For Each mySrs In chts.Chart.SeriesCollection
    If mySrs.PlotOrder > 1 Then
        mySrs.Delete
        GoTo nextSerie2
    Else
    End If
Next mySrs
'chts.Name = "Comps2"
intRow = 11
Do
        If chts.Name = "Comps2" Then
            intMax = Application.WorksheetFunction.Max(ThisWorkbook.Sheets("Comps").Range("Comps!D3:D1000"))
            chts.Chart.SeriesCollection(1).XValues = "=ModelYearly!$N$3:$N$" & intMax + 4
            chts.Chart.SeriesCollection(1).Values = "=ModelYearly!$O$3:$O$" & intMax + 4
        End If
        chts.Chart.SeriesCollection.NewSeries
        chts.Chart.SeriesCollection(intRow - 9).XValues = "=Comps!$E$" & intRow
        chts.Chart.SeriesCollection(intRow - 9).Values = "=Comps!$N$" & intRow
        chts.Chart.SeriesCollection(intRow - 9).Name = "" & ThisWorkbook.Sheets("Comps").Cells(intRow, 10).Value & ""
        chts.Chart.SeriesCollection(intRow - 9).Format.Fill.Solid
        chts.Chart.SeriesCollection(intRow - 9).MarkerSize = 8
        chts.Chart.SeriesCollection(intRow - 9).MarkerStyle = xlMarkerStyleCircle
        chts.Chart.SeriesCollection(intRow - 9).Shadow = False
        chts.Chart.SeriesCollection(intRow - 9).Format.Fill.ForeColor.RGB = RGB(0, 0, 0)
        chts.Chart.SeriesCollection(intRow - 9).ApplyDataLabels Type:=xlDataLabelsShowLabel
        chts.Chart.SeriesCollection(intRow - 9).DataLabels.Position = xlLabelPositionAbove
        chts.Chart.SeriesCollection(intRow - 9).DataLabels.ShowCategoryName = False
        chts.Chart.SeriesCollection(intRow - 9).DataLabels.ShowValue = True
        chts.Chart.SeriesCollection(intRow - 9).DataLabels.ShowSeriesName = True
    
intRow = intRow + 1
Loop Until ThisWorkbook.Sheets("Comps").Cells(intRow, 2).Value = "" And ThisWorkbook.Sheets("Comps").Cells(intRow, 3).Value = ""

Next chts

MsgBox ("Complete")

End Sub
Sub goNow11()

If ActiveSheet.Name <> "Market Data" Then
    MsgBox ("You must be on the Market Data tab")
    Exit Sub
End If

For Each shp In ActiveSheet.Shapes
    If shp.Name <> "Picture 1" Then
        shp.Height = 55.62654
        shp.Width = 68.25008
        shp.Placement = xlMoveAndSize
    End If
Next

MsgBox ("Complete")

End Sub



INQUEST-PP=macro
