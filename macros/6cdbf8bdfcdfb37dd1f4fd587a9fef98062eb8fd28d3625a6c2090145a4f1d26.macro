Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'********** SUDOKU SOLVER IN EXCEL ************
'********** CODE WRITTEN BY AJAY **************
'**********(C) WWW.DATABISON.COM **************
'********** THIS CODE CAN BE SHARED ***********
'********** FREELY BY RETAINING THESE LINES****


Dim Sudoku_Grid(9, 9) As Integer
Dim Sudoku_Grid_Possible_Numbers(9, 9, 9) As Integer
Dim Sudoku_Grid_Temp(9, 9) As Integer



Sub solver()
Dim max_number_of_iterations, loop_counter As Integer
max_number_of_iterations = 5
loop_counter = 0

Do
i = load()
i = check_if_only_one_possible_number_left()
i = remove_if_value_found()
i = exhaust_potential_number_list()
i = write_back()
Application.Calculate
loop_counter = loop_counter + 1
Loop Until (Application.WorksheetFunction.Sum(Range(Cells(1, 1), Cells(9, 9))) = 405 Or loop_counter >= max_number_of_iterations)

'If the conventional approach does not work, lets use brute force !
If (sum_Sudoku_Grid() <> 405) Then
MsgBox ("Not able to solve using conventional methods. Using brute force now!")
i = brute_force()
End If

End Sub
Function sum_Sudoku_Grid() As Integer
sum_Sudoku_Grid = 0
For Each cel In Sudoku_Grid()
    sum_Sudoku_Grid = sum_Sudoku_Grid + cel
Next cel
If sum_Sudoku_Grid <> 405 Then Exit Function

sum_Sudoku_Grid = 0 'check if the sum of columns tallies
For co = 1 To 9
    For ro = 1 To 9
        sum_Sudoku_Grid = sum_Sudoku_Grid + Sudoku_Grid(ro - 1, co - 1)
        If (co * 9 + ro) Mod 9 = 0 Then
            If sum_Sudoku_Grid Mod 45 <> 0 Then
                Exit Function
            End If
        End If
    Next ro
Next co

sum_Sudoku_Grid = 0 'check if the sum of rows tallies
For ro = 1 To 9
    For co = 1 To 9
        sum_Sudoku_Grid = sum_Sudoku_Grid + Sudoku_Grid(ro - 1, co - 1)
        If (ro * 9 + co) Mod 9 = 0 Then
           If sum_Sudoku_Grid Mod 45 <> 0 Then
                MsgBox "rows don't"
                Exit Function
            End If
        End If
    Next co
Next ro


End Function
Function copy_array(ByRef Sudoku_Grid As Variant, ByRef Sudoku_Grid_Possible_Numbers As Variant) As Integer
For i = 1 To 9
For j = 1 To 9
    Sudoku_Grid_Possible_Numbers(i - 1, j - 1) = Sudoku_Grid(i - 1, j - 1)
Next j
Next i
End Function

Function brute_force() As Integer
Dim flag, loop_counter, minimum_possible_numbers, counter, ro, co, cell_count As Integer

loop_counter = 0

If (sum_Sudoku_Grid() <> 405) Then
i = copy_array(Sudoku_Grid, Sudoku_Grid_Temp)
End If
For row = 1 To 9
For col = 1 To 9
If Sudoku_Grid(row - 1, col - 1) = 0 Then
    For counter = 1 To 9
        i = load()
        If Sudoku_Grid_Possible_Numbers(row - 1, col - 1, counter - 1) <> 0 Then
            Cells(row, col) = Sudoku_Grid_Possible_Numbers(row - 1, col - 1, counter - 1) 'this is the first level of guesswork
            For ii = 1 To 9
            For jj = 1 To 9
            For counter2 = 1 To 9
                loop_counter = 0
                Do
                    i = load()
                    i = check_if_only_one_possible_number_left()
                    i = remove_if_value_found()
                    i = exhaust_potential_number_list()
                    i = write_back()
                    loop_counter = loop_counter + 1
                Loop Until (sum_Sudoku_Grid() = 405 Or loop_counter >= 1)
                If (sum_Sudoku_Grid() = 405) Then
                    i = write_back()
                    Exit Function
                End If
            If Sudoku_Grid_Possible_Numbers(ii - 1, jj - 1, counter2 - 1) <> 0 And Not (row = ii And col = jj) Then
                Cells(ii, jj) = Sudoku_Grid_Possible_Numbers(ii - 1, jj - 1, counter2 - 1) 'this is the second level of guesswork
            End If
            Next counter2
            Next jj
            Next ii
            
            i = copy_array(Sudoku_Grid_Temp, Sudoku_Grid) 'if the complete iteration for a cell is complete without any success
            i = write_back()
            
        End If
    Next counter
End If

Next col
Next row

MsgBox "This Sudoku can't be solved !"
End Function








Function GetGrid(row) As Integer
Select Case row
    Case 1: GetGrid = 3
    Case 2: GetGrid = 3
    Case 3: GetGrid = 3
    Case 4: GetGrid = 6
    Case 5: GetGrid = 6
    Case 6: GetGrid = 6
    Case 7: GetGrid = 9
    Case 8: GetGrid = 9
    Case 9: GetGrid = 9
End Select
End Function




Function load() As Integer
Dim i, j, k, flag, counter, potential_number, result, GridRow, GridCol, ro, co As Integer
flag = 0
counter = 0

For i = 1 To 9
    For j = 1 To 9
        Sudoku_Grid(i - 1, j - 1) = 0
    Next j
Next i

For i = 1 To 9
    For j = 1 To 9
        Sudoku_Grid(i - 1, j - 1) = Cells(i, j).Value
    Next j
Next i

For i = 1 To 9
    For j = 1 To 9
        For k = 1 To 9
            Sudoku_Grid_Possible_Numbers(i - 1, j - 1, k - 1) = 0
        Next k
    Next j
Next i
        
For i = 1 To 9
    For j = 1 To 9
    
    If Sudoku_Grid(i - 1, j - 1) = 0 Then
        For potential_number = 1 To 9

            'Check if a value does not feature in row
            flag = 0
            For co = 1 To 9
                If potential_number = Sudoku_Grid(i - 1, co - 1) Then
                    flag = flag + 1
                End If
            Next co

            'Check if the value does not feature in col
            For ro = 1 To 9
                If potential_number = Sudoku_Grid(ro - 1, j - 1) Then
                    flag = flag + 1
                End If
            Next ro

          'Check if the value does not feature in 3x3 grid
            GridRow = GetGrid(i)
            GridCol = GetGrid(j)

            For ro = GridRow - 2 To GridRow
                For co = GridCol - 2 To GridCol
                    If potential_number = Sudoku_Grid(ro - 1, co - 1) Then
                        flag = flag + 1
                    End If
                Next co
            Next ro
            
            
            If flag = 0 Then 'this number can be added
                result = add_possible_number(i, j, potential_number)
                GoTo another_loop:
            End If
            
another_loop:
         Next potential_number
    End If
    
    counter = counter + 1
    Next j
Next i

End Function
Function add_possible_number(i, j, the_number) As Integer
Dim counter As Integer
    For counter = 1 To 9
        If Sudoku_Grid_Possible_Numbers(i - 1, j - 1, counter - 1) = the_number Then
            Exit Function
        End If
    Next counter
    For counter = 1 To 9
        If Sudoku_Grid_Possible_Numbers(i - 1, j - 1, counter - 1) = 0 Then
            Sudoku_Grid_Possible_Numbers(i - 1, j - 1, counter - 1) = the_number
            Exit Function
        End If
    Next counter
End Function

Function remove_possible_number(i, j, the_number) As Integer
Dim counter As Integer
    For counter = 1 To 9
        If Sudoku_Grid_Possible_Numbers(i - 1, j - 1, counter - 1) = the_number Then
            Sudoku_Grid_Possible_Numbers(i - 1, j - 1, counter - 1) = 0
        End If
    Next counter
End Function


Function check_if_only_one_possible_number_left() As Integer
Dim ro, co, flag, conter, result As Integer
For ro = 1 To 9
    For co = 1 To 9
        flag = 0
        only_number = 0
        For counter = 1 To 9
            If Sudoku_Grid_Possible_Numbers(ro - 1, co - 1, counter - 1) <> 0 Then
               flag = flag + 1
               only_number = Sudoku_Grid_Possible_Numbers(ro - 1, co - 1, counter - 1)
            End If
        Next counter
        If flag = 1 Then
            Sudoku_Grid(ro - 1, co - 1) = only_number
            'MsgBox "check_if_only_one_possible_number_left: Only number for row=" & ro & " and " & "col= " & co & " missing value is " & only_number
            result = remove_if_value_found()
        End If
    Next co
Next ro
End Function

Function remove_if_value_found() As Integer
Dim i, j, counter As Integer
For i = 1 To 9
For j = 1 To 9
    If Sudoku_Grid(i - 1, j - 1) <> 0 Then 'some code found the missing value and updated it....
        For counter = 1 To 9
            Sudoku_Grid_Possible_Numbers(i - 1, j - 1, counter - 1) = 0 '...delete all the potential value since the actual value has been found
        Next counter
    End If
Next j
Next i
End Function

Function exhaust_potential_number_list() As Integer
Dim flag, atleast_one_loop, row, col, counter1, counter2, co, ro As Integer
flag = 0
atleast_one_loop = 0
For row = 1 To 9
For col = 1 To 9
    If Sudoku_Grid(row - 1, col - 1) = 0 Then
    For counter1 = 1 To 9
        If Sudoku_Grid_Possible_Numbers(row - 1, col - 1, counter1 - 1) <> 0 Then 'the single potential number to match
                
                
                'check if the number does not exist in the list of potential numbers for each cel in that row
                flag = 0
                atleast_one_loop = 0
                
                For co = 1 To 9
                If Sudoku_Grid(row - 1, co - 1) = Sudoku_Grid_Possible_Numbers(row - 1, col - 1, counter1 - 1) Then
                    result = remove_possible_number(row, col, Sudoku_Grid_Possible_Numbers(row - 1, col - 1, counter1 - 1))
                    GoTo another_loop:
                End If
                If co <> col And Sudoku_Grid(row - 1, co - 1) = 0 Then
                    For counter2 = 1 To 9
                        If Sudoku_Grid_Possible_Numbers(row - 1, co - 1, counter2 - 1) <> 0 Then
                            atleast_one_loop = atleast_one_loop + 1
                            If Sudoku_Grid_Possible_Numbers(row - 1, col - 1, counter1 - 1) = Sudoku_Grid_Possible_Numbers(row - 1, co - 1, counter2 - 1) Then
                                flag = flag + 1
                            End If
                        End If
                    Next counter2
                End If
                Next co
                
                If flag = 0 And atleast_one_loop > 0 Then
                    'MsgBox "Exhaust1"
                    Sudoku_Grid(row - 1, col - 1) = Sudoku_Grid_Possible_Numbers(row - 1, col - 1, counter1 - 1)
                    result = remove_if_value_found()
                    GoTo another_loop:
                End If
            
            
            
            
            'check if the number does not exist in potential number for each cel in that col
                flag = 0
                atleast_one_loop = 0
                For ro = 1 To 9
                If Sudoku_Grid(ro - 1, col - 1) = Sudoku_Grid_Possible_Numbers(row - 1, col - 1, counter1 - 1) Then
                    result = remove_possible_number(row, col, Sudoku_Grid_Possible_Numbers(row - 1, col - 1, counter1 - 1))
                    GoTo another_loop:
                End If
                If ro <> row And Sudoku_Grid(ro - 1, col - 1) = 0 Then
                    For counter2 = 1 To 9
                        If Sudoku_Grid_Possible_Numbers(ro - 1, col - 1, counter2 - 1) <> 0 Then
                            atleast_one_loop = atleast_one_loop + 1
                            If Sudoku_Grid_Possible_Numbers(row - 1, col - 1, counter1 - 1) = Sudoku_Grid_Possible_Numbers(ro - 1, col - 1, counter2 - 1) Then
                                flag = flag + 1
                            End If
                        End If
                    Next counter2
                End If
                Next ro
                If flag = 0 And atleast_one_loop > 0 Then
                    Sudoku_Grid(row - 1, col - 1) = Sudoku_Grid_Possible_Numbers(row - 1, col - 1, counter1 - 1)
                    result = remove_if_value_found()
                    GoTo another_loop:
                End If
                
                
                
                
            
            'check if the number does not exist in potential number for each cel in that 3x3 grid
                GridRow = GetGrid(row)
                GridCol = GetGrid(col)
                flag = 0
                atleast_one_loop = 0
                For ro = GridRow - 2 To GridRow
                For co = GridCol - 2 To GridCol
                If Sudoku_Grid(ro - 1, co - 1) = Sudoku_Grid_Possible_Numbers(row - 1, col - 1, counter1 - 1) Then
                    result = remove_possible_number(row, col, Sudoku_Grid_Possible_Numbers(row - 1, col - 1, counter1 - 1))
                    GoTo another_loop:
                End If
                If Not (ro = row And co = col) Then ' ignore if its the same cell
                    For counter2 = 1 To 9
                        If Sudoku_Grid_Possible_Numbers(ro - 1, co - 1, counter2 - 1) <> 0 Then
                            atleast_one_loop = atleast_one_loop + 1
                            If Sudoku_Grid_Possible_Numbers(row - 1, col - 1, counter1 - 1) = Sudoku_Grid_Possible_Numbers(ro - 1, co - 1, counter2 - 1) Then
                                flag = flag + 1
                            End If
                        End If
                    Next counter2
                End If
                Next co
                Next ro
                If flag = 0 And atleast_one_loop > 0 Then
                    Sudoku_Grid(row - 1, col - 1) = Sudoku_Grid_Possible_Numbers(row - 1, col - 1, counter1 - 1)
                    result = remove_if_value_found()
                    GoTo another_loop:
                End If
  
                
                
        End If
    Next counter1
    End If
another_loop:
Next col
Next row

End Function

Function write_back() As Integer
Dim ro, co As Integer
For ro = 1 To 9
    For co = 1 To 9
        If Sudoku_Grid(ro - 1, co - 1) <> 0 Then
            Cells(ro, co).Value = Sudoku_Grid(ro - 1, co - 1)
        Else: Cells(ro, co).Value = Null
        End If
    Next co
Next ro
End Function


Sub copy_puzzle()
Select Case Range("choice").Value
Case "Puzzle 1": Range("puzzle1").Copy
Case "Puzzle 2": Range("puzzle2").Copy
Case "Puzzle 3": Range("puzzle3").Copy
Case "Puzzle 4": Range("puzzle4").Copy
Case "Puzzle 5": Range("puzzle5").Copy
Case "Puzzle 6": Range("puzzle6").Copy
End Select
Range("A1").Select
ActiveSheet.Paste
Application.CutCopyMode = False
Cells(7, 15).Select
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
