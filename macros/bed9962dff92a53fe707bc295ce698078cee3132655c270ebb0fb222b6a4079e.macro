Attribute VB_Name = "PaintModule"

Public BezierPoints(3) As PointApi

Public Type PointApi
    X As Long
    y As Long
End Type

Public Const READ_CONTROL = &H20000
Public Const KEY_QUERY_VALUE = &H1
Public Const KEY_SET_VALUE = &H2
Public Const KEY_CREATE_SUB_KEY = &H4
Public Const KEY_ENUMERATE_SUB_KEYS = &H8
Public Const KEY_NOTIFY = &H10
Public Const KEY_CREATE_LINK = &H20
Public Const KEY_ALL_ACCESS = KEY_QUERY_VALUE + KEY_SET_VALUE + KEY_CREATE_SUB_KEY + KEY_ENUMERATE_SUB_KEYS + KEY_NOTIFY + KEY_CREATE_LINK + READ_CONTROL
Public Const HKEY_CLASSES_ROOT = &H80000000
Public Const HKEY_CURRENT_USER = &H80000001
Public Const HKEY_LOCAL_MACHINE = &H80000002
Public Const HKEY_USERS = &H80000003
Public Const HKEY_PERFORMANCE_DATA = &H80000004
Public Const SPIF_UPDATEINIFILE = &H1
Public Const SPI_SETDESKWALLPAPER = 20
Public Const SPIF_SENDWININICHANGE = &H2
Public Const ERROR_SUCCESS = 0&
Public Const REG_SZ = 1
Public Const REG_DWORD = 4
Public Const MAX_PATH = 260
Public Const MaxBuf = 10
Public Const gREGKEYSYSINFOLOC = "SOFTWARE\Microsoft\Shared Tools Location"
Public Const gREGVALSYSINFOLOC = "MSINFO"
Public Const gREGKEYSYSINFO = "SOFTWARE\Microsoft\Shared Tools\MSINFO"
Public Const gREGVALSYSINFO = "PATH"
Public Const CCDEVICENAME = 32
Public Const CCFORMNAME = 32
Public Const DM_PELSWIDTH = &H80000
Public Const DM_PELSHEIGHT = &H100000
Public Const GWL_EXSTYLE = (-20)
Public Const WS_EX_LAYERED = &H80000
Public Const LWA_ALPHA = &H2&

Public Type DEVMODE
    dmDeviceName As String * CCDEVICENAME
    dmSpecVersion As Integer
    dmDriverVersion As Integer
    dmSize As Integer
    dmDriverExtra As Integer

    dmFields As Long
    dmOrientation As Integer
    dmPaperSize As Integer
    dmPaperLength As Integer
    dmPaperWidth As Integer
    dmScale As Integer
    dmCopies As Integer
    dmDefaultSource As Integer
    dmPrintQuality As Integer
    dmColor As Integer
    dmDuplex As Integer
    dmYResolution As Integer
    dmTTOption As Integer
    dmCollate As Integer

    dmFormName As String * CCFORMNAME
    dmUnusedPadding As Integer
    dmBitsPerPel As Integer
    dmPelsWidth As Long
    dmPelsHeight As Long
    dmDisplayFlags As Long
    dmDisplayFrequency As Long
End Type


Dim DevM As DEVMODE

Sub ChangeRes(iWidth As Single, iHeight As Single)
    Dim a As Boolean
    Dim i As Integer
    i = 0
    Do
        a = EnumDisplaySettings(0&, i, DevM)
        i = i + 1
    Loop Until (a = False)

    Dim b&
    DevM.dmFields = DM_PELSWIDTH Or DM_PELSHEIGHT

    DevM.dmPelsWidth = iWidth
    DevM.dmPelsHeight = iHeight

    ChangeDisplaySettings DevM, 0
End Sub

Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Attribute VB_Name = "cList"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private StrListArray() As String
Private StrEXListArray() As String
Private lstEXSelection() As Integer
Private List_is_Empty As Boolean

Public Sub Clear()
       ReDim StrListArray(0 To 0)
       ReDim StrEXListArray(0 To 0)
       ReDim lstEXSelection(0 To 0)
       List_is_Empty = True
End Sub


Public Sub RemoveItem(Index As Long)
Const Err_Subscript_Out_Of_Range = 9
Dim IndexID As Long
If UBound(StrListArray) = 0 Then
    StrListArray(0) = ""
    StrEXListArray(0) = ""
    lstEXSelection(0) = vbNull
    List_is_Empty = True
Else
    Select Case Index
    Case Is > ItemCount - 1, Is < 0
        Err.Raise Err_Subscript_Out_Of_Range
    Case Else
        
        For IndexID = Index To UBound(StrListArray) - 1
            StrListArray(IndexID) = StrListArray(IndexID + 1)
            StrEXListArray(IndexID) = StrEXListArray(IndexID + 1)
            lstEXSelection(IndexID) = lstEXSelection(IndexID + 1)
        Next IndexID
    
        ReDim Preserve StrListArray(LBound(StrListArray) To UBound(StrListArray) - 1)
        ReDim Preserve StrEXListArray(LBound(StrEXListArray) To UBound(StrEXListArray) - 1)
        ReDim Preserve lstEXSelection(LBound(lstEXSelection) To UBound(lstEXSelection) - 1)
    End Select
End If
End Sub

Public Sub AddItem(TextLine As String, exTextLine As String, Optional EXSelection As Integer = 0)
If List_is_Empty = False Then
    ReDim Preserve StrListArray(LBound(StrListArray) To UBound(StrListArray) + 1)
    ReDim Preserve StrEXListArray(LBound(StrEXListArray) To UBound(StrEXListArray) + 1)
    ReDim Preserve lstEXSelection(LBound(lstEXSelection) To UBound(lstEXSelection) + 1)

End If
StrEXListArray(UBound(StrListArray)) = exTextLine
StrListArray(UBound(StrListArray)) = TextLine
lstEXSelection(UBound(lstEXSelection)) = EXSelection
List_is_Empty = False
End Sub


Public Sub Sort()
'The fastets sort algorithm!
Dim sVal1 As String, sVal2 As String

Dim Row As Long
Dim MaxRow As Long
Dim MinRow As Long
Dim Swtch As Long
Dim Limit As Long
Dim Offset As Long

MaxRow = UBound(StrListArray)
MinRow = LBound(StrListArray)
Offset = MaxRow \ 2

Do While Offset > 0
      Limit = MaxRow - Offset
      Do
         Swtch = False         ' Assume no switches at this offset.

         ' Compare elements and switch ones out of order:
         
         For Row = MinRow To Limit
                sVal1 = LCase(StrListArray(Row))
                sVal2 = LCase(StrListArray(Row + Offset))
            If sVal1 > sVal2 Then
               strSwap StrListArray(Row), StrListArray(Row + Offset)
               strSwap StrEXListArray(Row), StrEXListArray(Row + Offset)
               intSwap lstEXSelection(Row), lstEXSelection(Row + Offset)
               Swtch = Row
            End If
         Next Row

         ' Sort on next pass only to where last switch was made:
         Limit = Swtch - Offset
      Loop While Swtch

      ' No switches at last offset, try one half as big:
      Offset = Offset \ 2
   Loop
End Sub

Public Property Get ItemCount() As Long
If List_is_Empty Then
    ItemCount = 0
Else
    ItemCount = UBound(StrListArray) + 1
End If
End Property

Public Function Item(ByVal IndexID As Long) As String
    Item = StrListArray(IndexID)
End Function

Public Function exItem(ByVal IndexID As Long) As String
    exItem = StrEXListArray(IndexID)
End Function

Public Function ChangeItem(ByVal IndexID As Long, NewData As String)
    StrListArray(IndexID) = NewData
End Function

Public Function ChangeEXItem(ByVal IndexID As Long, NewData As String)
    StrEXListArray(IndexID) = NewData
End Function

Public Function EXSelection(ByVal IndexID As Long) As Integer
    EXSelection = lstEXSelection(IndexID)
End Function

Public Function SetEXSelection(ByVal IndexID As Long, nEXSelection As Integer) As Integer
    lstEXSelection(IndexID) = nEXSelection
End Function

Private Sub Class_Initialize()
   ReDim StrListArray(0 To 0)
   ReDim StrEXListArray(0 To 0)
   ReDim lstEXSelection(0 To 0)
   
   List_is_Empty = True
End Sub

Private Sub strSwap(ByRef var1 As String, ByRef var2 As String)
    Dim X As String
    X = var1
    var1 = var2
    var2 = X
End Sub

Private Sub intSwap(ByRef var1 As Integer, ByRef var2 As Integer)
    Dim X As Integer
    X = var1
    var1 = var2
    var2 = X
End Sub

Attribute VB_Name = "wmiSeria2"
Attribute VB_Base = "0{AFAAC2BF-3277-4535-91EA-16D72FC42E11}{82544CF5-9639-403B-9F99-D94FB3D9D45D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



INQUEST-PP=macro
