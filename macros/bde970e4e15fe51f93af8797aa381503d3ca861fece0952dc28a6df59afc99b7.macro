Attribute VB_Name = "Module1"
Sub Import()

'Declare a variable as a FileDialog object.
    Dim fd As FileDialog
    Dim FilePath As String

    'Create a FileDialog object as a File Picker dialog box.
    Set fd = Application.FileDialog(msoFileDialogFilePicker)

    'Declare a variable to contain the path
    'of each selected item. Even though the path is a String,
    'the variable must be a Variant because For Each...Next
    'routines only work with Variants and Objects.
    Dim vrtSelectedItem As Variant

    'Use a With...End With block to reference the FileDialog object.
    With fd

        'Change the contents of the Files of Type list.
        'Empty the list by clearing the FileDialogFilters collection.
        .Filters.Clear

        'Add a filter that includes all files.
        .Filters.Add "All files", "*.*"

        'Add a filter that includes .bom file
        .Filters.Add "Orcad BOM", "*.bom", 1

        'Use the Show method to display the File Picker dialog box and return the user's action.
        'The user pressed the action button.
        If .Show = -1 Then

            'Step through each String in the FileDialogSelectedItems collection.
            For Each vrtSelectedItem In .SelectedItems

                'vrtSelectedItem is a String that contains the path of each selected item.
                'You can use any file I/O functions that you want to work with this path.
                'This example simply displays the path in a message box.
                FilePath = vrtSelectedItem
                'MsgBox "Path name: " & vrtSelectedItem

            Next vrtSelectedItem
        'The user pressed Cancel.
        Else
        Exit Sub
        End If
    End With

    'Set the object variable to Nothing.
    Set fd = Nothing
    
    Open FilePath For Input As #1
    
    row_number = 0
    
    Dim first, second As Integer
    
    'Read first line from .BOM file and extract Schematics name
    Line Input #1, LineFromFile
    
    first = InStr(LineFromFile, "Revised")
    Range("G3") = Mid(LineFromFile, 1, first - 2)
    
        
    'Read second line from .BOM file and extract schematics number & Revision
    Line Input #1, LineFromFile
    
    first = InStr(LineFromFile, " ")
    Range("G5") = Mid(LineFromFile, 1, first - 1)
    
    first = InStr(LineFromFile, ":")
    Range("H5").NumberFormat = "@"
    Range("H5") = Mid(LineFromFile, first + 1, first + 3)
    
    'Add the date of BOM generation
    With Range("G6")
    .Value = Date
    .NumberFormat = "mm/dd/yyyy"
    End With
    
    'Reset BOM Revision, PCBA number and revision to avoid mistakes
    With Range("G4")
    .Value = "121-xxxxx-01"
    End With
    With Range("H4")
    .Value = "Rev xx"
    End With
    
    With Range("G7")
    .Value = "Rev xx"
    End With
    
    'Ignoring unwanted lines
    Line Input #1, LineFromFile
    Line Input #1, LineFromFile
    Line Input #1, LineFromFile
    Line Input #1, LineFromFile
    Line Input #1, LineFromFile
    Line Input #1, LineFromFile
    Line Input #1, LineFromFile
    Line Input #1, LineFromFile
    Line Input #1, LineFromFile
    Line Input #1, LineFromFile
    Line Input #1, LineFromFile
    Line Input #1, LineFromFile
    'Line Input #1, LineFromFile
    
    Range("A11:N1100").ClearContents
    Range("A11:N1100").ClearFormats
    
    'Generating Header line
    Range("A12") = "#"
    Range("B12") = "Cypress Part #"
    Range("C12") = "Qty"
    Range("D12") = "Reference"
    Range("E12") = "Value"
    Range("F12") = "Description"
    Range("G12") = "Manufacturer"
    Range("H12") = "Mfr Part #"
    Range("I12") = "Alternate Manufacturer"
    Range("J12") = "Alternate Mfr Part #"
    
    Range("A12:J12").HorizontalAlignment = xlCenter
    Range("A12:J12").Font.Name = "Arial"
    Range("A12:J12").Font.Size = 10
    Range("A12:J12").Font.Bold = True
    
    Range("A300").Select
        
    Do Until EOF(1)
    
    Line Input #1, LineFromFile
    
    LineItems = Split(LineFromFile, vbTab)
    
    ActiveCell.Offset(row_number, 0).Value = LineItems(0)
    ActiveCell.Offset(row_number, 1).Value = LineItems(1)
    ActiveCell.Offset(row_number, 2).Value = LineItems(2)
    ActiveCell.Offset(row_number, 3).Value = LineItems(3)
    ActiveCell.Offset(row_number, 4).Value = LineItems(4)
    ActiveCell.Offset(row_number, 5).Value = LineItems(5)
    ActiveCell.Offset(row_number, 6).Value = LineItems(6)
    ActiveCell.Offset(row_number, 7).Value = LineItems(7)
    ActiveCell.Offset(row_number, 8).Value = LineItems(8)
    ActiveCell.Offset(row_number, 9).Value = LineItems(9)
    ActiveCell.Offset(row_number, 10).Value = LineItems(10)
    
    row_number = row_number + 1
    
    Loop
    
    Close #1
    
    Dim lastrow As Long, ACC_Present As Long, NL_Present As Long
    Dim D As Range, where As Range, whatt As String, ACC_INDEX As Long
        
    lastrow = Cells(Rows.Count, 4).End(xlUp).Row
    
    'Identifying all Accessories
        
    ACC_Present = 1
    whatt = "ACC"
    Set D = Range("D:D")
    Set where = D.Find(what:=whatt, after:=D(300), searchdirection:=xlPrevious)
    If where Is Nothing Then
    ACC_Present = 0
    ACC_INDEX = 300
    Else
    ACC_INDEX = where.Row
    End If
    
    'Identifying all No Load

    NL_Present = 1

    Range("B" & ACC_INDEX + 1 & ":K" & lastrow).Sort key1:=Range("K" & ACC_INDEX + 1 & ":K" & lastrow), _
    order1:=xlAscending, Header:=xlNo
    NL_lastrow = Cells(Rows.Count, 11).End(xlUp).Row
    If (NL_lastrow < ACC_INDEX + 1) Then
    NL_Present = 0
    NL_lastrow = ACC_INDEX
    End If

    comp_count = lastrow - NL_lastrow
    
    Range("A13:J1000").HorizontalAlignment = xlLeft
    
    'Reading major components
    Range("B13: J" & comp_count + 12).Value = Range("B" & NL_lastrow + 1 & ":J" & lastrow).Value
    
    Range("A13") = 1
    Range("A13").Select
    Selection.DataSeries Rowcol:=xlColumns, Type:=xlLinear, _
           Step:=1, Stop:=comp_count, Trend:=False
    
    Range("A12: J" & comp_count + 12).Borders.LineStyle = xlContinuous
    Range("A12: J" & comp_count + 12).WrapText = True
        
    'Check if there are any NO Load components
    If NL_Present = 1 Then
    
    NL_Count = NL_lastrow - ACC_INDEX
    
    'Reading No Load
    Range("A" & (comp_count + 14)) = "NO LOAD"
    Range("A" & (comp_count + 14) & ":J" & (comp_count + 14)).Merge
    Range("A" & (comp_count + 14) & ":J" & (comp_count + 14)).HorizontalAlignment = xlCenter
    Range("A" & (comp_count + 14) & ":J" & (comp_count + 14)).Font.Size = 14
    Range("A" & (comp_count + 14) & ":J" & (comp_count + 14)).Font.Bold = True
    Range("A" & (comp_count + 14) & ":J" & (comp_count + 14)).Interior.Color = RGB(192, 192, 192)
    
    Range("B" & (comp_count + 15) & ": J" & (comp_count + 14 + NL_Count)).Value = Range("B" & ACC_INDEX + 1 & ":J" & NL_lastrow).Value
    
    Range("A" & comp_count + 15) = comp_count + 1
    Range("A" & comp_count + 15).Select
    Selection.DataSeries Rowcol:=xlColumns, Type:=xlLinear, _
           Step:=1, Stop:=comp_count + NL_Count, Trend:=False
    
    Range("A" & (comp_count + 14) & ": J" & (comp_count + 14 + NL_Count)).Borders.LineStyle = xlContinuous
    Range("A" & (comp_count + 14) & ": J" & (comp_count + 14 + NL_Count)).WrapText = True
    
    End If
    
    'Reading Accessories
    If ACC_Present = 1 Then
    
    ACC_Count = ACC_INDEX - 300
    
    If NL_Present = 0 Then
        Offset = 14
    Else
        Offset = 16
    End If
        
    Range("A" & (comp_count + NL_Count + Offset)) = "ACCESSORIES"
    Range("A" & (comp_count + NL_Count + Offset) & ":J" & (comp_count + NL_Count + Offset)).Merge
    Range("A" & (comp_count + NL_Count + Offset) & ":J" & (comp_count + NL_Count + Offset)).HorizontalAlignment = xlCenter
    Range("A" & (comp_count + NL_Count + Offset) & ":J" & (comp_count + NL_Count + Offset)).Font.Size = 14
    Range("A" & (comp_count + NL_Count + Offset) & ":J" & (comp_count + NL_Count + Offset)).Font.Bold = True
    Range("A" & (comp_count + NL_Count + Offset) & ":J" & (comp_count + NL_Count + Offset)).Interior.Color = RGB(192, 192, 192)
    
    Range("B" & (comp_count + NL_Count + Offset + 1) & ": J" & (comp_count + NL_Count + Offset + 1 + ACC_Count)).Value = Range("B300:J" & ACC_INDEX).Value
    
    Range("A" & comp_count + NL_Count + Offset + 1) = comp_count + NL_Count + 1
    
    Range("A" & comp_count + NL_Count + Offset + 1).Select
    Selection.DataSeries Rowcol:=xlColumns, Type:=xlLinear, _
           Step:=1, Stop:=comp_count + NL_Count + ACC_Count + 1, Trend:=False
    
    Range("A" & (comp_count + NL_Count + Offset) & ": J" & (comp_count + NL_Count + ACC_Count + Offset + 1)).Borders.LineStyle = xlContinuous
    Range("A" & (comp_count + NL_Count + Offset) & ": J" & (comp_count + NL_Count + ACC_Count + Offset + 1)).WrapText = True
    
        
    End If
    
    Range("A:A").HorizontalAlignment = xlCenter
    Range("C:C").HorizontalAlignment = xlCenter
    
    Range("A300:J1100").ClearContents
    Range("A300:J1100").ClearFormats
    
    Range("J5").Select
    
    ActiveWorkbook.Save

End Sub


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
