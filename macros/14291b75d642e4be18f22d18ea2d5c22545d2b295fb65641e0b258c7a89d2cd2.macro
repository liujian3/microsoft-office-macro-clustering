Attribute VB_Name = "INI_File"
Option Explicit

Declare Function GetPrivateProfileString Lib "kernel32" Alias _
"GetPrivateProfileStringA" (ByVal lpApplicationName As String, _
ByVal lpKeyName As Any, ByVal lpDefault As String, _
ByVal lpReturnedString As String, ByVal nSize As Long, _
ByVal lpFileName As String) As Long

Declare Function WritePrivateProfileString Lib "kernel32" _
Alias "WritePrivateProfileStringA" _
(ByVal sSectionName As String, _
ByVal sKeyName As String, _
ByVal sString As String, _
ByVal sFileName As String) As Long

Private Function GetSectionEntry(ByVal strSectionName As String, ByVal strEntry As String, ByVal strIniPath As String) As String

'===================================================================================
'Purpose : Retrieve data from Sample.ini
'Assumptions:
'Effects :
'Inputs : Section Name and Entry Name in the KitBOM ini
'Returns : Value of the Entry in the section
'===================================================================================

Dim X As Long
Dim sSection As String, sEntry As String, sDefault As String
Dim sRetBuf As String, iLenBuf As Integer, sFileName As String
Dim sValue As String

On Error GoTo ErrGetSectionentry
sSection = strSectionName
sEntry = strEntry
sDefault = ""
sRetBuf = Strings.String$(256, 0) '256 null characters
iLenBuf = Len(sRetBuf$)
sFileName = strIniPath
X = GetPrivateProfileString(sSection, sEntry, _
"", sRetBuf, iLenBuf, sFileName)
sValue = Strings.Trim$(Strings.Left$(sRetBuf, X))

If sValue <> "" Then
    GetSectionEntry = sValue
Else
    GetSectionEntry = vbNullChar
End If

ErrGetSectionentry:
If Err <> 0 Then
    Err.Clear
    Resume Next
End If

End Function

Sub Write_INI()
Dim sIniPath    As String
'Dim sBuffer     As String
Dim ret         As String
Dim a           As Integer

    sIniPath = ThisWorkbook.Path & "\DVM_Calibration_Output.ini"
    
    For a = 11 To 50
        If Sheets("Main").Range("A" & a) = "" Then Exit For
        
        ' Write Data to Ini File
        If UCase$(Sheet1.Range("E" & a)) = "Y" Then
            ret = WritePrivateProfileString("Calibration_Data", Sheets("Main").Range("F" & a).Value, Sheets("Main").Range("B" & a).Value, sIniPath)
        End If
    Next a
    
    
    
    'Read Example
    'sBuffer = GetSectionEntry("Calibration_Data", "DVM Estimator Average", sIniPath)
    'Debug.Print sBuffer
End Sub



Attribute VB_Name = "Lock_UnLock"
Option Explicit

Public Const pwrd = "U1tim0"
Global RunningLockUnlock As Boolean

Sub LockAll()
    'Specify that we are running lock/unlock
    RunningLockUnlock = True
    
    Sheets("Main").Select
    ActiveSheet.Unprotect password:=pwrd
    Columns("E:F").Hidden = True
    ActiveSheet.Protect password:=pwrd
    
    Sheet4.Select
    ActiveSheet.Unprotect password:=pwrd
    Columns("A:B").Hidden = True
    Columns("J:XFD").Hidden = True
    ActiveSheet.Protect password:=pwrd
        
    Sheets("Combined").Visible = False
    'Sheet4.Visible = False
    Sheets("DVM_Meas").Visible = False
    Sheets("Stat Stability Analysis").Visible = False
    
    Sheets("Main").Select
    
    'Specify that we are running lock/unlock
    RunningLockUnlock = False
End Sub

Sub UnLockAll()
    'Specify that we are running lock/unlock
    RunningLockUnlock = True
    
    Sheets("Combined").Visible = True
    Sheet4.Visible = True
    Sheets("DVM_Meas").Visible = True
    Sheets("Stat Stability Analysis").Visible = True
        
    Sheets("Main").Select
    ActiveSheet.Unprotect password:=pwrd
    Columns("E:F").Hidden = False
    
    Sheet4.Select
    ActiveSheet.Unprotect password:=pwrd
    Columns("A:I").Hidden = False
    'Columns("G:K").Hidden = False
    Range("A:I").Locked = False
    Range("A1:I1").Locked = True
    
    Sheets("DVM_Meas").Select
    Columns("A:B").Hidden = False
    
    Sheets("Main").Select
    
    'Specify that we are running lock/unlock
    RunningLockUnlock = True
End Sub
Attribute VB_Name = "Module2"
Sub TEST_FORMATING()
Attribute TEST_FORMATING.VB_ProcData.VB_Invoke_Func = " \n14"
    Selection.NumberFormat = "m/d/yyyy"
End Sub
Sub TEST_FORMATING2()
Attribute TEST_FORMATING2.VB_ProcData.VB_Invoke_Func = " \n14"

    Range("E2").Select
    Selection.NumberFormat = "0.00"
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "imgLogo, 4, 0, MSForms, Image"
Attribute VB_Control = "cmdRun, 3, 1, MSForms, CommandButton"
Option Explicit

'Private Sub cmdRun_Click()
'Dim sImport As String
'
'If Application.CountA(Sheet4.Range("C:C")) = Application.CountA(Sheet4.Range("D:D")) And _
'    Application.CountA(Sheet4.Range("D:D")) = Application.CountA(Sheet4.Range("E:E")) And _
'    Application.CountA(Sheet4.Range("E:E")) = Application.CountA(Sheet4.Range("F:F")) And _
'    Sheet4.Range("C65536").End(xlUp).Row = Application.CountA(Sheet4.Range("C:C")) And _
'    Sheet4.Range("D65536").End(xlUp).Row = Application.CountA(Sheet4.Range("D:D")) And _
'    Sheet4.Range("E65536").End(xlUp).Row = Application.CountA(Sheet4.Range("E:E")) And _
'    Sheet4.Range("F65536").End(xlUp).Row = Application.CountA(Sheet4.Range("F:F")) And _
'    Application.CountA(Sheet4.Range("C:C")) > 2 Then
'
'    Application.Calculation = xlCalculationAutomatic
'    Application.ScreenUpdating = False
'
'    'Ask user to import dvm data file
'    sImport = MsgBox("Import DVM data file (DVM_Meas.xls)?", vbYesNo, "Import DVM")
'    If sImport = vbYes Then Import_DVM
'    Application.ScreenUpdating = True
'
'    UnLockAll
'    FixInputData
'    LockAll
'
'    CombineData
'    Regression
'    Write_INI
'Else
'    MsgBox "Please add observations to the Lab_Input tab."
'End If
'
'End Sub

Private Sub imgLogo_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    frmPassword.Show
End Sub


Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    Dim DateTimeType As Variant
    If Application.CountA(Sheet4.Range("A:E")) = 5 And RunningLockUnlock = False Then
        DateTimeType = MsgBox("Is the Date and Time combined in one cell?", vbYesNo)
        
        If DateTimeType = vbYes Then
            'Date and Time is Combined into one column
            Debug.Print "Date and Time is Combined into one column"
            
            'Display Correct Columns
            Sheet4.Select
            ActiveSheet.Unprotect password:=pwrd
            Columns("C:E").Hidden = True
            Columns("A:B").Hidden = False
            ActiveSheet.Protect password:=pwrd
        Else
            'Date and Time is Separated into two columns
            Debug.Print "Date and Time is Separated into two columns"
                        
            'Display Correct Columns
            Sheet4.Select
            ActiveSheet.Unprotect password:=pwrd
            Columns("C:E").Hidden = False
            Columns("A:B").Hidden = True
            ActiveSheet.Protect password:=pwrd
        End If
    End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    'Dim a As Integer
    Dim c As Range
    
    'Data Test Variables
    Dim bAB_Hidden As Boolean, bCE_Hidden As Boolean
    Dim iA_Count As Integer, iB_Count As Integer, iC_Count As Integer, iD_Count As Integer, iE_Count As Integer
    Dim iCurRowDataCount As Integer, iRow_Num As Integer
    
    bAB_Hidden = Columns("A:B").Hidden
    bCE_Hidden = Columns("C:E").Hidden
    iA_Count = Application.CountA(Sheet4.Range("A:A"))
    iB_Count = Application.CountA(Sheet4.Range("B:B"))
    iC_Count = Application.CountA(Sheet4.Range("C:C"))
    iD_Count = Application.CountA(Sheet4.Range("D:D"))
    iE_Count = Application.CountA(Sheet4.Range("E:E"))
    
    
    If bCE_Hidden = False And bAB_Hidden = True Then
        'Date and Time is separate
        If Not Intersect(Target, Range("C2:E65000")) Is Nothing Then
            'Loop through all target cells in case user pastes values
            Application.EnableEvents = False
            For Each c In Intersect(Target, Range("C2:E$65000")).Cells
                iRow_Num = c.Row
                'iCurRowDataCount = Application.CountA(Sheet4.Range("B" & iRow_Num & ":E" & iRow_Num))
                    
                If Range("C" & iRow_Num) <> "" And Range("D" & iRow_Num) <> "" Then
                    '-Combine Date and Time
                    Range("A" & iRow_Num).Value = Range("C" & iRow_Num) + Range("D" & iRow_Num)
                    '-Convert Combined Date and Time to UTC
                    Range("F" & iRow_Num).Value = ConvertLocalToGMT(Range("A" & iRow_Num).Value, True)
                    'Range("F1") = "UTC Date & Time"
                    '-UTC Date and Time
                    Range("G" & iRow_Num).Value = Format(Range("F" & iRow_Num).Value, "mm/dd/yyyy")
                    'Range("G1") = "UTC Date"
                    Range("H" & iRow_Num).Value = Format(Range("F" & iRow_Num).Value, "hh:mm:ss")
                    'Range("H1") = "UTC Time"
                    Range("I" & iRow_Num).Value = LocalOffsetFromGMT(True, True)
                ElseIf Range("C" & iRow_Num) = "" And Range("D" & iRow_Num) = "" Then
                    'Clear calculated Date/Time when Date and Time is deleted
                    Range("A" & iRow_Num & ":B" & iRow_Num).Value = ""
                    Range("F" & iRow_Num & ":I" & iRow_Num).Value = ""
                End If
            Next
            
            'Test Statistical Stability/Are more records needed to be collected
            If iC_Count = iD_Count And iD_Count = iE_Count And _
                Sheet4.Range("C65536").End(xlUp).Row = Application.CountA(Sheet4.Range("C:C")) And _
                Sheet4.Range("D65536").End(xlUp).Row = Application.CountA(Sheet4.Range("D:D")) And _
                Sheet4.Range("E65536").End(xlUp).Row = Application.CountA(Sheet4.Range("E:E")) And _
                Application.CountA(Sheet4.Range("B:E")) > 4 Then Call Stat_Stability
            If Target.Count > 1 Then Range("C" & iC_Count).Select
            Application.EnableEvents = True
        End If
        
        
    ElseIf bCE_Hidden = True And bAB_Hidden = False Then
        'Date and Time is combined
        If Not Intersect(Target, Range("A2:B65000")) Is Nothing Then
            'Loop through all target cells in case user pastes values
            Application.EnableEvents = False
            For Each c In Intersect(Target, Range("A2:B65000")).Cells
                iRow_Num = c.Row
                
                'Date and Time Edits
                If Range("A" & iRow_Num) <> "" Then
                    '-Separate Date and Time
                    Range("C" & iRow_Num).Value = Format(Range("A" & iRow_Num).Value, "mm/dd/yyyy")
                    Range("D" & iRow_Num).Value = Format(Range("A" & iRow_Num).Value, "hh:mm:ss")
                    '-Convert Combined Date and Time to UTC
                    Range("F" & iRow_Num).Value = ConvertLocalToGMT(Range("A" & iRow_Num).Value, True)
                    'Range("F1") = "UTC Date & Time"
                    '-UTC Date and Time
                    Range("G" & iRow_Num).Value = Format(Range("F" & iRow_Num).Value, "mm/dd/yyyy")
                    'Range("G1") = "UTC Date"
                    Range("H" & iRow_Num).Value = Format(Range("F" & iRow_Num).Value, "hh:mm:ss")
                    'Range("H1") = "UTC Time"
                    Range("I" & iRow_Num).Value = LocalOffsetFromGMT(True, True)
                ElseIf Range("A" & iRow_Num) = "" Then
                    '-Clear calculated Date/Time when Date and Time is deleted
                    Range("C" & iRow_Num & ":D" & iRow_Num).Value = ""
                    Range("F" & iRow_Num & ":I" & iRow_Num).Value = ""
                End If
                
                'Density Edits
                If Range("B" & iRow_Num) <> "" Then
                    '-Copy Column B Density to Column E Density for Stat_Stability Test
                     Range("E" & iRow_Num).Value = Range("B" & iRow_Num).Value
                ElseIf Range("B" & iRow_Num) = "" Then
                    '-Clear Density when density is deleted
                    Range("E" & iRow_Num).Value = ""
                End If
            Next
    
            'Test Statistical Stability/Are more records needed to be collected
            If iC_Count = iD_Count And iD_Count = iE_Count And _
                Sheet4.Range("C65536").End(xlUp).Row = Application.CountA(Sheet4.Range("C:C")) And _
                Sheet4.Range("D65536").End(xlUp).Row = Application.CountA(Sheet4.Range("D:D")) And _
                Sheet4.Range("E65536").End(xlUp).Row = Application.CountA(Sheet4.Range("E:E")) And _
                Application.CountA(Sheet4.Range("B:E")) > 4 Then Call Stat_Stability
            If Target.Count > 1 Then Range("A" & iC_Count).Select
            Application.EnableEvents = True
        End If
    End If
End Sub


Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


Private Sub Workbook_BeforeClose(Cancel As Boolean)
    LockAll
End Sub

Private Sub Workbook_Open()
    Sheets("Main").Select
    'Call CheckToolPak
End Sub


Attribute VB_Name = "frmPassword"
Attribute VB_Base = "0{5F7D6E17-FD7E-44F4-B176-1110F40EFC5A}{16C33C74-05E5-4AB7-B2C6-668BFF2F260E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdLock_Click()
    LockAll
    Unload Me
End Sub

Private Sub cmdReset_Click()
 Dim sOutput As Variant
       sOutput = MsgBox("You are about to clear all user input data from this workbook. Do you wan't to proceed?", _
        vbYesNo, "Reset User Data")
    If sOutput = vbYes Then
        UnLockAll
        Sheet4.Range("A2:H10000").ClearContents
        ActiveWorkbook.Sheets("Combined").Range("A2:F10000").ClearContents
        ActiveWorkbook.Sheets("Combined").Range("M5:S50").ClearContents
        ActiveWorkbook.Sheets("DVM_Meas").Range("A2:BB30000").ClearContents
        ActiveWorkbook.Sheets("Stat Stability Analysis").Range("A2:L10000").ClearContents
        LockAll
        Unload Me
    End If
End Sub

Private Sub cmdUnlock_Click()
    If frmPassword.txtPwd = pwrd Then
        UnLockAll
        Unload Me
    Else
        MsgBox "You have entered the wrong password. Please try again."
    End If
End Sub



Attribute VB_Name = "main"
Option Explicit

Sub CombineData()
Dim sKey        As Long
Dim iCombine    As Integer
Dim iMatches    As Integer
Dim rFound      As Range
Dim sESTCol     As String
Dim a           As Integer  'Variable For loop
Dim b           As Integer  'Variable For loop

Sheets("DVM_Meas").Visible = True
Sheets("DVM_Meas").Select
'Find Dev Estimator Column
Set rFound = Cells.Find(What:="Dev Estimator", After:=Range("A1"), LookIn:=xlValues, LookAt:= _
        xlPart, SearchOrder:=xlByColumns, SearchDirection:=xlNext, MatchCase:=False _
        , SearchFormat:=False)
If Not rFound Is Nothing Then sESTCol = Strings.Left$(rFound.EntireColumn.Address(columnabsolute:=False), Application.WorksheetFunction.Find(":", rFound.EntireColumn.Address(columnabsolute:=False)) - 1)
Sheets("DVM_Meas").Visible = False


iCombine = 2
Sheets("Combined").Range("A2:F20000").ClearContents
Sheet3.Range("A2:A65000").ClearContents
Sheets("Main").Select

For a = 2 To Application.CountA(Sheet4.Range("C1:C65000"))
    sKey = CLng(Sheet4.Range("B" & a).Value)
    iMatches = 0
    
    If Sheet4.Range("B" & a).Value = vbNullString Then Exit For
    
    Sheets("Combined").Range("A" & iCombine) = Sheet4.Range("C" & a) 'Date
    Sheets("Combined").Range("B" & iCombine) = Sheet4.Range("D" & a) 'Time
    Sheets("Combined").Range("C" & iCombine) = Sheet4.Range("E" & a) 'Lab Measured Density
    Sheets("Combined").Range("D" & iCombine) = Sheet4.Range("F" & a) 'Lab Measured Viscosity
    
    For b = 2 To Application.CountA(Sheets("DVM_Meas").Range(sESTCol & ":" & sESTCol))
                'Or (sKey + iTollerence) - Sheets("DVM_Meas").Range("B" & b) < 0
        If Sheets("DVM_Meas").Range("B" & b) = "" Then Exit For
        
        'Debug.Print Abs(Round(Sheets("DVM_Meas").Range("B" & b).Value - Sheet4.Range("B" & a).Value, 10))
        
        'If Abs(CLng(Sheets("DVM_Meas").Range("B" & b).Value) - sKey) < Range("Tolerance") And Sheets("DVM_Meas").Range("A" & b) <> "X" Then
        If Abs((Sheet3.Range("C" & b).Value2 + Sheet3.Range("D" & b).Value2) - (Sheet4.Range("C" & a).Value2 + Sheet4.Range("D" & a).Value2)) < Range("Tolerance") Then
            iMatches = iMatches + 1
            Sheets("Combined").Range("E" & iCombine) = Sheets("Combined").Range("E" & iCombine) + Sheets("DVM_Meas").Range(sESTCol & b) 'Combine all estimator values
            Sheets("DVM_Meas").Range("A" & b) = "X" 'Mark DVM File record with x to use it only once
        End If
    Next b
    
    'Divide Estimator value by total number of matches (Average)
    If Sheets("Combined").Range("E" & iCombine) <> "" Then Sheets("Combined").Range("E" & iCombine) = Sheets("Combined").Range("E" & iCombine) / iMatches
    
    Sheets("Combined").Range("f" & iCombine) = iMatches
    If iMatches <> 0 Then iCombine = iCombine + 1
    Sheets("Main").Range("A3") = "Percent Complete:"
    Sheets("Main").Range("B3") = a / WorksheetFunction.CountA(Worksheets("Reference").Range("C:C"))
Next a
    'Clear Progress Precentage Message
    Sheets("Main").Range("A3") = ""
    Sheets("Main").Range("B3") = ""
End Sub

Sub FixInputData()
Dim rFound  As Range
Dim sDTCol  As String
Dim sTMCol  As String


    Sheet4.Select
    Range("A:B").ClearContents
    Range("B2").Formula = "=C2&D2"
    Range("B2").Select
    Selection.AutoFill Destination:=Range("B2:B" & Application.CountA(Range("C:C")))
    Columns("A:F").Select
    Selection.Sort Key1:=Range("B1"), Order1:=xlAscending, Header:=xlYes, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
        DataOption1:=xlSortNormal
            
    Sheets("DVM_Meas").Visible = True
    Sheets("DVM_Meas").Select
    'Find Date Column
    Set rFound = Cells.Find(What:="Date", After:=Range("A1"), LookIn:=xlValues, LookAt:= _
            xlPart, SearchOrder:=xlByColumns, SearchDirection:=xlNext, MatchCase:=False _
            , SearchFormat:=False)
    If Not rFound Is Nothing Then sDTCol = Strings.Left$(rFound.EntireColumn.Address(columnabsolute:=False), Application.WorksheetFunction.Find(":", rFound.EntireColumn.Address(columnabsolute:=False)) - 1)
    
    'Find Time Column
    Set rFound = Cells.Find(What:="Time", After:=Range("A1"), LookIn:=xlValues, LookAt:= _
            xlPart, SearchOrder:=xlByColumns, SearchDirection:=xlNext, MatchCase:=False _
            , SearchFormat:=False)
    If Not rFound Is Nothing Then sTMCol = Strings.Left$(rFound.EntireColumn.Address(columnabsolute:=False), Application.WorksheetFunction.Find(":", rFound.EntireColumn.Address(columnabsolute:=False)) - 1)
    
    Range("A:B").ClearContents
    Range("B2").Formula = "=" & sDTCol & "2&" & sTMCol & "2"
    Range("B2").Select
    Selection.AutoFill Destination:=Range("B2:B" & Application.CountA(Range(sDTCol & ":" & sDTCol)))
    Columns("A:AZ").Select
    Selection.Sort Key1:=Range("B1"), Order1:=xlAscending, Header:=xlYes, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
        DataOption1:=xlSortNormal
    Sheets("DVM_Meas").Visible = False
End Sub

Sub Regression()
Dim iNumRecords As Integer

    Sheets("Combined").Visible = True
    Sheets("Combined").Select
    
    iNumRecords = Application.CountA(Sheets("Combined").Range("A:A"))

    AddIns("Analysis ToolPak - VBA").Installed = True

    Sheet2.Range("M5:S60") = vbNullString
    
    On Error Resume Next
    Application.Run "ATPVBAEN.XLA!Regress", Sheets("Combined").Range("C1:C" & iNumRecords), _
        Sheets("Combined").Range("E1:E" & iNumRecords), False, True, , Sheets("Combined").Range("M5" _
        ), False, False, False, False, , False

    Application.Run "ATPVBAEN.XLA!Regress", Sheets("Combined").Range("D1:D" & iNumRecords), _
        Sheets("Combined").Range("E1:E" & iNumRecords), False, True, , Sheets("Combined").Range("M25" _
        ), False, False, False, False, , False
        
    If Err.Number = 1004 Then
        Application.Run "ATPVBAEN.XLAM!Regress", Sheets("Combined").Range("C1:C" & iNumRecords), _
            Sheets("Combined").Range("E1:E" & iNumRecords), False, True, , Sheets("Combined").Range("M5" _
            ), False, False, False, False, , False
    
        Application.Run "ATPVBAEN.XLAM!Regress", Sheets("Combined").Range("D1:D" & iNumRecords), _
            Sheets("Combined").Range("E1:E" & iNumRecords), False, True, , Sheets("Combined").Range("M25" _
            ), False, False, False, False, , False
    End If
    
    On Error GoTo 0
    
    Sheets("Combined").Range("M22") = "Slope"
    Sheets("Combined").Range("M42") = "Slope"
    Sheets("Combined").Range("M5") = "SUMMARY OUTPUT - Density"
    Sheets("Combined").Range("M25") = "SUMMARY OUTPUT - Viscosity"
    
    Sheet2.Range("N21").Value = Round(Sheet2.Range("N21").Value, 10)
    Sheet2.Range("N22").Value = Round(Sheet2.Range("N22").Value, 10)
    Sheet2.Range("N41").Value = Round(Sheet2.Range("N41").Value, 10)
    Sheet2.Range("N42").Value = Round(Sheet2.Range("N42").Value, 10)
    
    Sheets("Combined").Visible = False
    Sheets("Main").Select
End Sub

Sub Import_DVM()
Dim sWBName As String

sWBName = ThisWorkbook.Name

    
    
    Workbooks.Open Filename:=ThisWorkbook.Path & "\DVM_Meas.xls", _
        Origin:=xlWindows
    Range("A1").Select
    Range(Selection, Selection.End(xlDown)).Select
    Range(Selection, Selection.End(xlToRight)).Select
    Selection.Copy
    Windows(sWBName).Activate
    Sheets("DVM_Meas").Visible = True
    Sheets("DVM_Meas").Select
    Range("C1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Application.CutCopyMode = False 'Clear Clipboard
    Sheets("DVM_Meas").Visible = False
    
    Workbooks("DVM_Meas.xls").Close False
End Sub

Sub Stat_Stability()
Dim iIteration  As Integer
Dim a           As Integer
Dim d1          As Integer
Dim d2          As Integer
Dim v1          As Integer
Dim v2          As Integer

'Check that all rows are have the same amount of data on the Lab_Input tab
'If Application.CountA(Sheet4.Range("C:C")) = Application.CountA(Sheet4.Range("D:D")) And _
'    Application.CountA(Sheet4.Range("D:D")) = Application.CountA(Sheet4.Range("E:E")) And _
'    Application.CountA(Sheet4.Range("E:E")) = Application.CountA(Sheet4.Range("F:F")) And _
'    Sheet4.Range("C65536").End(xlUp).Row = Application.CountA(Sheet4.Range("C:C")) And _
'    Sheet4.Range("D65536").End(xlUp).Row = Application.CountA(Sheet4.Range("D:D")) And _
'    Sheet4.Range("E65536").End(xlUp).Row = Application.CountA(Sheet4.Range("E:E")) And _
'    Sheet4.Range("F65536").End(xlUp).Row = Application.CountA(Sheet4.Range("F:F")) Then
    
If Application.CountA(Sheet4.Range("C:C")) = Application.CountA(Sheet4.Range("D:D")) And _
    Application.CountA(Sheet4.Range("D:D")) = Application.CountA(Sheet4.Range("E:E")) And _
    Sheet4.Range("C65536").End(xlUp).Row = Application.CountA(Sheet4.Range("C:C")) And _
    Sheet4.Range("D65536").End(xlUp).Row = Application.CountA(Sheet4.Range("D:D")) And _
    Sheet4.Range("E65536").End(xlUp).Row = Application.CountA(Sheet4.Range("E:E")) Then

    iIteration = 5
    d1 = 0
    d2 = 0
'    v1 = 0
'    v2 = 0
    
    'Clear old Data
    Sheet6.Range("A2:A" & Application.CountA(Sheets("Stat Stability Analysis").Range("A:A")) + 2).ClearContents
    Sheet6.Range("B3:B" & Application.CountA(Sheets("Stat Stability Analysis").Range("B:B")) + 2).ClearContents
    Sheet6.Range("D2:G20000").ClearContents
    Sheet6.Range("I2:L20000").ClearContents
    
    'Copy Lab_Input Data to Stat Stability Analysis Tab
    Sheet4.Range("E2:E" & Application.CountA(Sheet4.Range("E:E")) + 2).Copy Destination:=Sheets("Stat Stability Analysis").Range("A2")
'    Sheet4.Range("F2:F" & Application.CountA(Sheet4.Range("E:E")) + 2).Copy Destination:=Sheets("Stat Stability Analysis").Range("B3")
    
    
    For a = 2 To TruncTo(((Application.CountA(Sheet6.Range("A1:A65000")) - 1) / iIteration) + 1, 0)
        'Calc density and viscosity average and stddev adding iTeration records for each new line
        If Range("HeadingDensity") <> "N/A" Then
            Sheet6.Range("D" & a).Formula = "=AVERAGE(A2:A" & ((a - 1) * iIteration) + 1 & ")"
            Sheet6.Range("E" & a).Formula = "=STDEV(A2:A" & ((a - 1) * iIteration) + 1 & ")"
            Sheet6.Range("F" & a + 1).Formula = "=100*ABS(D" & a + 1 & "-D" & a & ")/MIN(D" & a & ":D" & a + 1 & ")"
            Sheet6.Range("G" & a + 1).Formula = "=100*ABS(E" & a + 1 & "-E" & a & ")/MIN(E" & a & ":E" & a + 1 & ")"
        Else
            d1 = 3
            d2 = 3
        End If
        
'        If Range("HeadingViscosity") <> "N/A" Then
'            Sheet6.Range("I" & a).Formula = "=AVERAGE(B3:B" & ((a - 1) * iIteration) + 2 & ")"
'            Sheet6.Range("J" & a).Formula = "=STDEV(B3:B" & ((a - 1) * iIteration) + 2 & ")"
'            Sheet6.Range("K" & a + 1).Formula = "=100*ABS(I" & a + 1 & "-I" & a & ")/MIN(I" & a & ":I" & a + 1 & ")"
'            Sheet6.Range("L" & a + 1).Formula = "=100*ABS(J" & a + 1 & "-J" & a & ")/MIN(J" & a & ":J" & a + 1 & ")"
'        Else
'            v1 = 3
'            v2 = 3
'        End If
        
        '95% confidence check over 3 consecutive records
        If Sheet6.Range("F" & a).Value < 5 And d1 <> 3 Then d1 = d1 + 1 Else If Sheet6.Range("F" & a).Value > 5 And d1 <> 3 Then d1 = 0
        If Sheet6.Range("G" & a).Value < 5 And d2 <> 3 Then d2 = d2 + 1 Else If Sheet6.Range("G" & a).Value > 5 And d2 <> 3 Then d2 = 0
        If Sheet6.Range("K" & a).Value < 5 And v1 <> 3 Then v1 = v1 + 1 Else If Sheet6.Range("K" & a).Value > 5 And v1 <> 3 Then v1 = 0
        If Sheet6.Range("L" & a).Value < 5 And v2 <> 3 Then v2 = v2 + 1 Else If Sheet6.Range("L" & a).Value > 5 And v2 <> 3 Then v2 = 0
        
        'After 3 consecutive records less than 5% stop loop and give message to stop collecting
'        If d1 = 3 And d2 = 3 And v1 = 3 And v2 = 3 Then
        If d1 = 3 And d2 = 3 Then
            'Sheets("Stat Stability Analysis").Visible = False
            'Application.ScreenUpdating = True
            'Sheet4.Select
            MsgBox "You can stop collecting data. Only " & (a - 1) * 5 & " records were needed for tuning."
            d1 = 4
            d2 = 4
'            v1 = 4
'            v2 = 4
            Exit Sub
        End If
        
        'Check if the data pulled after 100 records is still not usable
        If a - 1 * iIteration >= 100 Then
            MsgBox "You have collected 100(+) records and we still cannot use your data for tuning. Please contact your Ultimo representative."
        End If
    Next a
    
    'Continue collecting message if not enough data
'    If d1 <> 3 Or d2 <> 3 Or v1 <> 3 Or v2 <> 3 Then MsgBox "Please continue to collect data."
    If d1 <> 3 Or d2 <> 3 Then MsgBox "Please continue to collect data."
'Else
'    MsgBox "Please verify that all data points are filled out."
End If
End Sub

Sub CheckToolPak()
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'   Checks to see if the Excel version comes before Excel 2007,
'   if so then checks to see if the Analysis ToolPak is installed.
'   If not, then notify the user and end the program.
'
'   This is required because of the NETWORKDAYS formula
'   that is used in the charts.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
   'If CInt(Application.Version) < 12 Then
        If AddIns("Analysis ToolPak").Installed <> True Then
            MsgBox "Please install the Analysis ToolPak." & vbCr & vbCr & _
            "Choose Tools > Add-Ins... " & vbCr & _
            "then check the box for Analyiss ToolPak, and click OK."
            End
        End If
    'End If
End Sub

Public Function TruncTo(dblValue As Double, lngPlaces As Long) As Double

TruncTo = Int(dblValue * 10 ^ lngPlaces) / 10 ^ lngPlaces

End Function



Attribute VB_Name = "modTimeZones"
Option Explicit
Option Compare Text
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' modTimeZones
' By Chip Pearson, chip@cpearson.com, www.cpearson.com
' Date: 2-April-2008
' Page Specific URL: www.cpearson.com/Excel/TimeZoneAndDaylightTime.aspx
'
' This module contains functions related to time zones and GMT times.
'   Terms:
'   -------------------------
'   GMT = Greenwich Mean Time. Many applications use the term
'       UTC (Universal Coordinated Time). GMT and UTC are
'       interchangable in meaning,
'   Local Time = The local "wall clock" time of day, that time that
'       you would set a clock to.
'   DST = Daylight Savings Time

'   Functions In This Module:
'   -------------------------
'       ConvertLocalToGMT
'           Converts a local time to GMT. Optionally adjusts for DST.
'       DaylightTime
'           Returns a value indicating (1) DST is in effect, (2) DST is
'           not in effect, or (3) Windows cannot determine whether DST is
'           in effect.
'       GetLocalTimeFromGMT
'           Converts a GMT Time to a Local Time, optionally adjusting for DST.
'       LocalOffsetFromGMT
'           Returns the number of hours or minutes between the local time and GMT,
'           optionally adjusting for DST.
'       SystemTimeToVBTime
'           Converts a SYSTEMTIME structure to a valid VB/VBA date.
'       LocalOffsetFromGMT
'           Returns the number of minutes or hours that are to be added to
'           the local time to get GMT. Optionally adjusts for DST.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''''''''''''''''''''''''''''''''''''''''''''''''
' Required Types
'''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Type SYSTEMTIME
    wYear As Integer
    wMonth As Integer
    wDayOfWeek As Integer
    wDay As Integer
    wHour As Integer
    wMinute As Integer
    wSecond As Integer
    wMilliseconds As Integer
End Type

Private Type TIME_ZONE_INFORMATION
    Bias As Long
    StandardName(0 To 31) As Integer
    StandardDate As SYSTEMTIME
    StandardBias As Long
    DaylightName(0 To 31) As Integer
    DaylightDate As SYSTEMTIME
    DaylightBias As Long
End Type

Public Enum TIME_ZONE
    TIME_ZONE_ID_INVALID = 0
    TIME_ZONE_STANDARD = 1
    TIME_ZONE_DAYLIGHT = 2
End Enum
    
'''''''''''''''''''''''''''''''''''''''''''''''''''''
' Required Windows API Declares
'''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Declare Function GetTimeZoneInformation Lib "kernel32" _
    (lpTimeZoneInformation As TIME_ZONE_INFORMATION) As Long

Private Declare Sub GetSystemTime Lib "kernel32" _
    (lpSystemTime As SYSTEMTIME)


Function ConvertLocalToGMT(Optional LocalTime As Date, _
    Optional AdjustForDST As Boolean = False) As Date
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ConvertLocalToGMT
' This converts a local time to GMT. If LocalTime is present, that local
' time is converted to GMT. If LocalTime is omitted, the current time is
' converted from local to GMT. If AdjustForDST is Fasle, no adjustments
' are made to accomodate DST. If AdjustForDST is True, and DST is
' in effect, the time is adjusted for DST by adding
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Dim T As Date
Dim TZI As TIME_ZONE_INFORMATION
Dim DST As TIME_ZONE
Dim GMT As Date

If LocalTime <= 0 Then
    T = Now
Else
    T = LocalTime
End If
DST = GetTimeZoneInformation(TZI)
If AdjustForDST = True Then
    GMT = T + TimeSerial(0, TZI.Bias, 0) + _
            IIf(DST = TIME_ZONE_DAYLIGHT, TimeSerial(0, TZI.DaylightBias, 0), 0)
Else
    GMT = T + TimeSerial(0, TZI.Bias, 0)
End If
ConvertLocalToGMT = GMT

End Function


Function GetLocalTimeFromGMT(Optional StartTime As Date) As Date
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' GetLocalTimeFromGMT
' This returns the Local Time from a GMT time. If StartDate is present and
' greater than 0, it is assumed to be the GMT from which we will calculate
' Local Time. If StartTime is 0 or omitted, it is assumed to be the GMT
' local time.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Dim GMT As Date
Dim TZI As TIME_ZONE_INFORMATION
Dim DST As TIME_ZONE
Dim LocalTime As Date

If StartTime <= 0 Then
    GMT = Now
Else
    GMT = StartTime
End If
DST = GetTimeZoneInformation(TZI)
LocalTime = GMT - TimeSerial(0, TZI.Bias, 0) + _
        IIf(DST = TIME_ZONE_DAYLIGHT, TimeSerial(1, 0, 0), 0)
GetLocalTimeFromGMT = LocalTime

End Function

Function SystemTimeToVBTime(SysTime As SYSTEMTIME) As Date
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' SystemTimeToVBTime
' This converts a SYSTEMTIME structure to a VB/VBA date value.
' It assumes SysTime is valid -- no error checking is done.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
With SysTime
    SystemTimeToVBTime = DateSerial(.wYear, .wMonth, .wDay) + _
            TimeSerial(.wHour, .wMinute, .wSecond)
End With

End Function

Function LocalOffsetFromGMT(Optional AsHours As Boolean = False, _
    Optional AdjustForDST As Boolean = False) As Long
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' LocalOffsetFromGMT
' This returns the amount of time in minutes (if AsHours is omitted or
' false) or hours (if AsHours is True) that should be added to the
' local time to get GMT. If AdjustForDST is missing or false,
' the unmodified difference is returned. (e.g., Kansas City to London
' is 6 hours normally, 5 hours during DST. If AdjustForDST is False,
' the resultif 6 hours. If AdjustForDST is True, the result is 5 hours
' if DST is in effect.)
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Dim TBias As Long
Dim TZI As TIME_ZONE_INFORMATION
Dim DST As TIME_ZONE
DST = GetTimeZoneInformation(TZI)

If DST = TIME_ZONE_DAYLIGHT Then
    If AdjustForDST = True Then
        TBias = TZI.Bias + TZI.DaylightBias
    Else
        TBias = TZI.Bias
    End If
Else
    TBias = TZI.Bias
End If
If AsHours = True Then
    TBias = TBias / 60
End If

LocalOffsetFromGMT = TBias

End Function

Function DaylightTime() As TIME_ZONE
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' DaylightTime
' Returns a value indicating whether the current date is
' in Daylight Time, Standard Time, or that Windows cannot
' deterimine the time status. The result is a member or
' the TIME_ZONE enum.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Dim TZI As TIME_ZONE_INFORMATION
Dim DST As TIME_ZONE
DST = GetTimeZoneInformation(TZI)
DaylightTime = DST
End Function




INQUEST-PP=macro
