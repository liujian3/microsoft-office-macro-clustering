Attribute VB_Name = "Module1"
' Module 1 - Macros & Shared Data required by multiple sheets
' - Global  lastsheet
' - Private Select_Last - Used in return to interview buttons on Quote and Start
' - Private GoToStart - Used in all Interviews, Quote and DiscTool
' - Private GoToQuote - Used in all Interviews and DiscTool
' -         CopyBoMtoPO - Base macro used by sheet specific targets
' -         MakeDefault - Base macro used by sheet specific targets
' -         ResetDefault - Base macro used by sheet specific targets
' -         SuppressServices - Base macro used by sheet specific targets
' -         ReNumberSheet - Used via Quote button, but also Genesys Bom conversions
' - Private Interviewhelp - help button on all interviews
' - Private ToggleInstructions
' - Private WaitforRefresh - 2nd half of version check
' - Private CheckLatestWizardVersion - checks audc website file
' -         SwitchPricing - switches from legacy to general sbc pricing on sbc and ovoc tabs
' -         SwitchM4KType - switches from M4K to M4KB

Public lastsheet As String
Public CurrentPricingType As String
Public CPTtempFlag As String ' for currencypricingtype changes


Private Sub Select_Last()
  Sheets(lastsheet).Select
  Application.Goto Reference:=Range("A1"), Scroll:=True
End Sub

Private Sub GoToStart()
    With Sheets("Start")
       .Activate
       .Range("F2").Activate
       Application.Goto Reference:=Range("A1"), Scroll:=True
    End With
End Sub

Private Sub GoToQuote()
    With Sheets("Quote")
       .Activate
       .Range("B3").Activate
       Application.Goto Reference:=Range("A1"), Scroll:=True
    End With
End Sub
' Note Manual Tab doesn't use common CopyToBoM Sub b/c of it's append flexibility
Sub CopyBoMtoPO(CopyFromSheet As String)
  Dim NumRowsToCopy, StartCopyAtRow, QuoteRow, IntBoMrow As Integer
  Dim CopyType As String
  CopyType = "Standard"
  
  Application.ScreenUpdating = False
    
  '1st check for consistent BoM type - prevent the mix Genesys and AudioCodes components
  If CopyFromSheet = Sheets("Scratch").Range("GOEM").Value Then
    'If Sheets("Quote").Range("QuoteBoMtype").Value = Sheets("Scratch").Range("Blank").Value Then
      '1st item, set bom type to genesys
      'don't need to do, cell auto-sets
      'Sheets("Quote").Range("QuoteBoMtype").Value = Sheets("Scratch").Range("GOEM").Value
    'End If
    
    If Sheets("Quote").Range("QuoteBoMtype").Value = Sheets("Scratch").Range("AUDC").Value Then
      'Error, not valid to add Genesys skus to AUDC Quote
      CopyType = "NoCopy"
      MsgBox "Error! Not valid to add Genesys SKUs to AUDC BoM", vbOKOnly + vbExclamation
    Else
      'Genesys Add to Genesys BoM - standard copy paste
    End If
  Else
    'Not copying from Genesys interview
    'If Sheets("Quote").Range("QuoteBoMtype").Value = Sheets("Scratch").Range("Blank").Value Then
      '1st item, set bom type to genesys
      'don't need to, cell auto sets
      'Sheets("Quote").Range("QuoteBoMtype").Value = Sheets("Scratch").Range("AUDC").Value
    'End If
    
    If Sheets("Quote").Range("QuoteBoMtype").Value <> Sheets("Scratch").Range("GOEM").Value Then
      'AUDC add to AUDC Bom - standard copy paste
    Else
      'only valid to add audc services to genesys bom
      If CopyFromSheet <> "Services" Then
        'error, only audc services can be added to a G bom
        ' manual add is taken care of in manual copy to bom
        CopyType = "NoCopy"
        MsgBox "Error! Quote tab contains Genesys SKUs - only Services can be added from non-Genesys Interviews", vbOKOnly + vbExclamation
      Else
        'copy services bom over line by line and update MSRP to Genesys pricing
        CopyType = "LinebyLine"
        MsgBox "Warning! Quote tab contains Genesys SKUs - Genesys MSRP for Services is entered on Quote tab", vbOKOnly + vbExclamation
      End If
    End If
  End If
    
  If CopyType = "NoCopy" Then
    'don't do anything
  Else
    NumRowsToCopy = Application.CountIf(Sheets(CopyFromSheet).Range("I:I"), ">0")
    If Sheets("Quote").Cells(Sheets("Quote").Rows.count, "B").End(xlUp).Row = 6 Then
      StartCopyAtRow = Sheets("Quote").Cells(Sheets("Quote").Rows.count, "b").End(xlUp).Row + 1
    Else
      StartCopyAtRow = Sheets("Quote").Cells(Sheets("Quote").Rows.count, "b").End(xlUp).Row + 3
    End If

    If CopyType = "Standard" Then
      Sheets(CopyFromSheet).Range(Sheets(CopyFromSheet).Cells(10, 9), Sheets(CopyFromSheet).Cells(10 + NumRowsToCopy, 14)).Copy
      Sheets("Quote").Range(Sheets("Quote").Cells(StartCopyAtRow, 2), Sheets("Quote").Cells(StartCopyAtRow + NumRowsToCopy, 7)).PasteSpecial Paste:=xlPasteValues
      Sheets("Quote").Activate
      Sheets("Quote").Cells(StartCopyAtRow, 2).Activate
    Else
      'line by line copy, converting to genesys msrp
      Application.Calculation = xlCalculationManual
      IntBoMrow = 10
      For QuoteRow = StartCopyAtRow To StartCopyAtRow + NumRowsToCopy
        Sheets(CopyFromSheet).Range(Sheets(CopyFromSheet).Cells(IntBoMrow, 9), Sheets(CopyFromSheet).Cells(IntBoMrow, 14)).Copy
        Sheets("Quote").Range(Sheets("Quote").Cells(QuoteRow, 2), Sheets("Quote").Cells(QuoteRow, 7)).PasteSpecial Paste:=xlPasteValues
        If Sheets("Quote").Cells(QuoteRow, 7) = "svc" Then
          ' convert to Genesys Service MSRP
          Sheets("Quote").Cells(QuoteRow, 5).Value = Sheets("Quote").Cells(QuoteRow, 5).Value * 0.82 / 0.6
        End If
        IntBoMrow = IntBoMrow + 1
      Next QuoteRow
      Application.Calculation = xlCalculationAutomatic
    End If
  End If
    
  Sheets("Quote").Range("K7:K107").Rows.AutoFit
  Application.CutCopyMode = False
  Application.ScreenUpdating = True
    
End Sub

Sub MakeDefault(WhichSheet As String)
  Dim LastRow As Integer
  Application.ScreenUpdating = False
  
  With Sheets(WhichSheet)
    LastRow = .Cells(.Rows.count, "D").End(xlUp).Row
    .Range(.Cells(5, "D"), .Cells(LastRow, "D")).Copy
    .Range(.Cells(5, "V"), .Cells(LastRow, "V")).PasteSpecial Paste:=xlPasteValues
    Application.Goto Reference:=.Range("A1"), Scroll:=True
    .Range("E5").Select
    Application.CutCopyMode = False
  End With
  
  Application.ScreenUpdating = True
End Sub

Sub ResetDefault(WhichSheet As String, Toggle As String, Button As String)
   Dim RowNo, LastRow As Integer
    Application.ScreenUpdating = False

    Application.Calculation = xlCalculationManual
    With Sheets(WhichSheet)
      LastRow = .Cells(.Rows.count, "D").End(xlUp).Row
      For RowNo = 5 To LastRow
        If Application.WorksheetFunction.IsFormula(.Cells(RowNo, "D")) Then
          .Cells(RowNo, "V").Copy
          .Cells(RowNo, "E").PasteSpecial Paste:=xlPasteValues
        Else
          .Cells(RowNo, "V").Copy
          .Cells(RowNo, "D").PasteSpecial Paste:=xlPasteValues
        End If
      Next RowNo

      If Toggle = "NoToggle" Then
        ' Do Nothing - this is for Genesys & Services which have no services toggle
      Else
        If .Range(Toggle).Value = False Then
          .Range(Toggle).Value = False
          .Shapes(Button).TextFrame.Characters.Text = "Suppress Services"
        Else
          .Range(Toggle).Value = True
          .Shapes(Button).TextFrame.Characters.Text = "Enable Services"
        End If
      End If
      Application.Goto Reference:=.Range("A1"), Scroll:=True
      .Range("E5").Select
    End With
    Application.CutCopyMode = False
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
End Sub

Sub SuppressServices(WhichSheet As String, Toggle As String, Button As String)
    Application.ScreenUpdating = False
    With Sheets(WhichSheet)
      If .Range(Toggle).Value = True Then
        .Range(Toggle).Value = False
        .Shapes(Button).TextFrame.Characters.Text = "Suppress Services"
      Else
        .Range(Toggle).Value = True
        .Shapes(Button).TextFrame.Characters.Text = "Enable Services"
       End If
    End With
    Application.CutCopyMode = False
    Application.ScreenUpdating = True
End Sub

Sub ReNumberSheet(SheetToReNum As String, WkBook As String, StartRow As Integer)
    Dim ItemNo, RowNo, LastRow As Integer
    Dim TempCPN As String
        
    With Workbooks(WkBook).Sheets(SheetToReNum)
    Application.Calculation = xlCalculationManual
       ItemNo = 1000
       LastRow = .Cells(.Rows.count, "C").End(xlUp).Row
       
       .Cells(StartRow, 2).Value = 1000
       .Cells(StartRow + 1, 2).Value = "Item No."
    
       For RowNo = StartRow + 2 To LastRow
         If .Cells(RowNo, 7).Value = "svc/yr" Then
            TempCPN = left(.Cells(RowNo, 3), 11)
            If TempCPN = "Support SKU" Or TempCPN = "Hardware Re" Then
               ItemNo = ItemNo + 1
            Else
               ItemNo = Application.WorksheetFunction.RoundDown(ItemNo, -1) + 11
            End If
            .Cells(RowNo, 2).Value = ItemNo
         Else
            If .Cells(RowNo, 7).Value = "hw" Or .Cells(RowNo, 7).Value = "sw" Or .Cells(RowNo, 7).Value = "svc" Then
               ItemNo = Application.WorksheetFunction.RoundDown(ItemNo, -1) + 11
               .Cells(RowNo, 2).Value = ItemNo
            Else
               If .Cells(RowNo, 7).Value = "" Then
                  .Cells(RowNo, 2).Value = ""
               Else
                  If .Cells(RowNo, 7).Value = "Total" Then
                     ItemNo = Application.WorksheetFunction.RoundDown(ItemNo, -3) + 1000
                     .Cells(RowNo, 2).Value = ItemNo
                  Else
                     If .Cells(RowNo, 7).Value = "Type" Then
                        .Cells(RowNo, 2).Value = "Item No."
                     Else
                       'must be number from ACM
                       ItemNo = ItemNo + 1
                       .Cells(RowNo, 2).Value = ItemNo
                     End If
                  End If
               End If
            End If
         End If
      Next RowNo
      .Range(.Cells(7, 7), .Cells(LastRow, 7)).Calculate
      Application.Calculation = xlCalculationAutomatic
    End With

End Sub

Private Sub InterviewHelp()
    With Sheets("Detail")
       .Activate
       .Range("InterviewHelp").RowHeight = 150
       .Range("InterviewHelp").Activate
       Application.Goto Reference:=.Range("InterviewHelp"), Scroll:=True
    End With
 End Sub

Private Sub ToggleInstructions()
' hides the instuctions at the top of interviews, quote, disctool, and manual selector
  Dim ws As Worksheet

  Application.ScreenUpdating = False
  ActiveWorkbook.Unprotect Password:="acadmin"
  For Each ws In ThisWorkbook.Worksheets
    ws.Unprotect Password:="acadmin"
  Next ws
  
  If Sheets("Start").Shapes("InstructionsToggleButton").TextFrame.Characters.Text = "Hide Instructions" Then
    Sheets("Quote").Rows("2").RowHeight = 0
    Sheets("M800B").Rows("2").RowHeight = 0
    Sheets("M1KB").Rows("2").RowHeight = 0
    Sheets("M3K").Rows("2").RowHeight = 0
    Sheets("SBCs").Rows("2").RowHeight = 0
    Sheets("CB 365").Rows("2").RowHeight = 0
    Sheets("OVOC").Rows("2").RowHeight = 0
    Sheets("IP Phone").Rows("2").RowHeight = 0
    Sheets("SmartTap").Rows("2").RowHeight = 0
    Sheets("Services").Rows("2").RowHeight = 0
    Sheets("Manual").Rows("2").RowHeight = 0
    Sheets("Manual Selector").Rows("2:3").RowHeight = 0
    If left(ThisWorkbook.Name, 2) = "SE" Then
      ' This only exists on the SE version
      Sheets("Genesys").Rows("2").RowHeight = 0
    End If
    Sheets("DiscTool").Rows("2:4").RowHeight = 0
    Sheets("Start").Shapes("InstructionsToggleButton").TextFrame.Characters.Text = "Show Instructions"
  Else
    Sheets("Quote").Rows("2").RowHeight = 100
    Sheets("M800B").Rows("2").RowHeight = 60
    Sheets("M1KB").Rows("2").RowHeight = 60
    Sheets("M3K").Rows("2").RowHeight = 60
    Sheets("SBCs").Rows("2").RowHeight = 60
    Sheets("CB 365").Rows("2").RowHeight = 60
    Sheets("OVOC").Rows("2").RowHeight = 60
    Sheets("IP Phone").Rows("2").RowHeight = 60
    Sheets("SmartTap").Rows("2").RowHeight = 60
    Sheets("Services").Rows("2").RowHeight = 60
    Sheets("Manual").Rows("2").RowHeight = 60
    If Sheets("Manual Selector").Shapes("FilterBarToggle").TextFrame.Characters.Text = "Show Filter Bar" Then
      Sheets("Manual Selector").Range("A2").RowHeight = 75
      Sheets("Manual Selector").Range("A3").RowHeight = 0
      Sheets("Manual Selector").Range("A4").RowHeight = 0
    Else
      Sheets("Manual Selector").Range("A2").RowHeight = 0
      Sheets("Manual Selector").Range("A3").RowHeight = 75
      Sheets("Manual Selector").Range("A4").RowHeight = 75
    End If
    If left(ThisWorkbook.Name, 2) = "SE" Then
      Sheets("Genesys").Rows("2").RowHeight = 60
    End If
    Sheets("DiscTool").Rows("2:4").RowHeight = 20
    Sheets("Start").Shapes("InstructionsToggleButton").TextFrame.Characters.Text = "Hide Instructions"
  End If
  ProtectSheets
  ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:=acadmin
  GoToStart
  Application.ScreenUpdating = True
 End Sub
 
Attribute VB_Name = "Module2"
'Module 2 - Lock, Un/Protect, & Release Macros
' Not required for operation - remove from external versions
'
' - Private LockInterviewSheet
' - Private Locksheets, calls LockInterviewSheet
' -         ProtectSheets
' -         UnprotectSheets
' -         ProtectBook, calls ProtectSheets
' -         UnProtectBook, calls UnprotectSheets
' -         ReadyForRelesae, calls lots of stuff
'
 
Private Sub LockInterviewSheet(SheetName As String)
  Dim LastRow As Integer
  With Sheets(SheetName)
    .Cells.Locked = False
    LastRow = .Cells(.Rows.count, "B").End(xlUp).Row + 1
    .Range("A1:BZ4").Locked = True
    .Range(.Cells(5, 1), .Cells(LastRow, 3)).Locked = True
    .Range(.Cells(5, 6), .Cells(LastRow, 7)).Locked = True
    .Range("H5:BZ162").Locked = True
    .UsedRange.FormulaHidden = False
  End With
End Sub
Private Sub LockSheets()
  Dim LastRow As Integer
  
  With Sheets("Start")
    .Cells.Locked = False
    .Range("A1:G15").Locked = True
    .UsedRange.FormulaHidden = True
  End With
  
  With Sheets("Settings")
    .Cells.Locked = False
    .Range("A1:AA17").Locked = True
    .Range("J7").Locked = False
    .UsedRange.FormulaHidden = True
  End With
  
  With Sheets("Quote")
    .Cells.Locked = False
    .Range("A1:M6").Locked = True
    .Range("H7:AD507").Locked = True
    .Range("N8:N108").Locked = False
    .Range("D5").Locked = False
    .UsedRange.FormulaHidden = False
  End With
  
  LockInterviewSheet ("M800B")
  LockInterviewSheet ("M1KB")
  LockInterviewSheet ("M3K")
  LockInterviewSheet ("SBCs")
  LockInterviewSheet ("CB 365")
  LockInterviewSheet ("OVOC")
  LockInterviewSheet ("Manual")
  LockInterviewSheet ("IP Phone")
  LockInterviewSheet ("SmartTap")
  LockInterviewSheet ("Voca")
  
  With Sheets("Services")
  ' Treated separately b/c lastrow used in common macro gets caught up in merged cell at bottom of col C
    .Cells.Locked = False
    .Range("A1:BZ4").Locked = True
    .Range(.Cells(5, 1), .Cells(35, 3)).Locked = True
    .Range(.Cells(5, 6), .Cells(35, 7)).Locked = True
    .Range("B36:G48").Locked = True
    .Range("H5:BZ162").Locked = True
    .UsedRange.FormulaHidden = False
  End With
  
  With Sheets("Manual Selector")
    If Sheets("Manual Selector").FilterMode Then Sheets("Manual Selector").ShowAllData
    .Cells.Locked = False
    .Range("A:M").Locked = True
    .Range("C7:C3500").Locked = False
    .UsedRange.FormulaHidden = False
  End With
  
  With Sheets("Genesys")
    .Cells.Locked = False
    LastRow = .Cells(.Rows.count, "B").End(xlUp).Row + 1
    .Range("A1:BZ4").Locked = True
    .Range(.Cells(5, 1), .Cells(LastRow, 3)).Locked = True
    .Range(.Cells(5, 6), .Cells(LastRow, 7)).Locked = True
    
    LastRow = .Cells(.Rows.count, "AV").End(xlUp).Row + 1
    LastRow = WorksheetFunction.Min(LastRow, 300)
    .Range(.Cells(5, 8), .Cells(LastRow, 78)).Locked = True
    .UsedRange.FormulaHidden = False
  End With
  
  With Sheets("CustFilters")
    .Cells.Locked = False
    .Range("A1:AI5").Locked = True
    .Range("C7:AI7").Locked = True
    .Range("A6:B40").Locked = True
    .Range("C40:L40").Locked = True
    .Range("M:AI").Locked = True
  End With
  
  With Sheets("Detail")
    .Cells.Locked = False
    .Range("A:G").Locked = True
    .UsedRange.FormulaHidden = True
  End With
  
  With Sheets("DiscTool")
    .Cells.Locked = False
    .Rows("1:12").Locked = True
    .Columns("L:AH").Locked = True
    .Columns("U:V").Locked = False
    .Columns("H").Locked = True
    .Range("X1:AC5").Locked = False
    .Range("E8:F12").Locked = False
    .Range("O7:S8").Locked = False
    .Range("B11:C11").Locked = False
    ' not sure why i do below
    .Range("AG3:AG5").Locked = False
    .UsedRange.FormulaHidden = False
  End With
  
End Sub

Sub ProtectSheets()
   Dim ws As Worksheet
   Application.ScreenUpdating = False
   For Each ws In ThisWorkbook.Worksheets
      ws.Protect Password:="acadmin", UserInterFaceOnly:=True
   Next ws
   Sheets("Manual Selector").Protect Password:="acadmin", UserInterFaceOnly:=True, AllowFiltering:=True
   Sheets("Scratch").Unprotect Password:="acadmin"
   Application.ScreenUpdating = True
End Sub

Sub UnProtectSheets()
   Dim ws As Worksheet
   Application.ScreenUpdating = False
   For Each ws In ThisWorkbook.Worksheets
      ws.Unprotect Password:="acadmin"
   Next ws
   Application.ScreenUpdating = True
End Sub

Sub ProtectBook()
   UnProtectBook
   ProtectSheets
   Application.ScreenUpdating = False
   Sheets("Scratch").Visible = False
   Sheets("PriceBook").Visible = False
   Sheets("ACM").Visible = False
   If left(ThisWorkbook.Name, 2) = "SE" Then
     Sheets("CSVexport").Visible = False
   End If
   Sheets("CustFilters").Visible = False
   Sheets("ToDo").Visible = False
   ActiveWorkbook.Protect Password:="acadmin", Structure:=True, Windows:=False
   Application.ScreenUpdating = True
End Sub

Sub UnProtectBook()
   Application.ScreenUpdating = False
   ActiveWorkbook.Unprotect Password:="acadmin"
   Sheets("Scratch").Visible = True
   Sheets("PriceBook").Visible = True
   Sheets("ACM").Visible = True
   If left(ThisWorkbook.Name, 2) = "SE" Then
     Sheets("CSVexport").Visible = True
   End If
   Sheets("ToDo").Visible = True
   Sheets("CustFilters").Visible = True
   UnProtectSheets
   Application.ScreenUpdating = True
End Sub

Sub ReadyForRelease()
   UnProtectBook
   Application.ScreenUpdating = False
   SetConditionalFormatting
   Application.Run "FormatForRelease"
   Application.ScreenUpdating = False
   ' next 3 subs don't, initialize hide instructions button label
   Application.Run "PositionAllShapes"
   Application.Run "Sheet4.ClearBoM"
   Application.ScreenUpdating = False
   Application.Run "Sheet17.ClearSelections"
   ' next bunch turn off and on again, as do all the reset defaults
   Application.Run "Sheet17.ClearManualSelectorFilters"
   Application.ScreenUpdating = False
   Application.Run "Sheet13.ClearDiscToolBom"
   Application.ScreenUpdating = False
   
   Sheets("Settings").CBXsettingsPricingType.Value = Sheets("Scratch").Range("StdPurchase").Value
   
   Call ResetDefault("M800B", "m8svcOff", "m8svcOffButton")
   Call ResetDefault("M1KB", "m1svcOff", "m1svcOffButton")
   Call ResetDefault("M3K", "m3svcOff", "m3svcOffButton")
   Call ResetDefault("SBCs", "m0svcOff", "m0svcOffButton")
   Call ResetDefault("CB 365", "CBsvcOff", "CBsvcOffButton")
   Call ResetDefault("IP Phone", "IPPsvcOff", "IPPsvcOffButton")
   Call ResetDefault("SmartTap", "STsvcOff", "STsvcOffButton")
   Call ResetDefault("Voca", "VocaSvcOff", "VocaSvcOffButton")
   Call ResetDefault("OVOC", "MGsvcOff", "mGsvcOffButton")
   Call ResetDefault("Services", "NoToggle", "NoToggle")
   Call ResetDefault("Manual", "MansvcOff", "MansvcOffButton")
   Call ResetDefault("Genesys", "NoToggle", "NoToggle")
   
   Application.ScreenUpdating = False
   ' left on by ResetDefault
   
   LockSheets
   ProtectBook
   Application.ScreenUpdating = False
   ' left on by ProtectBook
   Application.Run "GoToStart"
   Application.ScreenUpdating = True
   
   ' Keep Formula Bar visible to prevent locked cells after operating active-x controls.
   'Application.DisplayFormulaBar = False
End Sub

Attribute VB_Name = "Module3"
'Module 3 - Static Column and Row Formatting
' Not required for operation - remove from external versions
'
' - Private CommonFormatting, calls CommonInterviewFormatting
' - Private CommonInterviewFormatting
' -         FormatForRelease, calls FormatInterviewForRelease
' -         FormatForWork, calls FormatInterviewForWork
' - Private FormatInterviewForRelease
' - Private FormatInterviewForWork
'

Private Sub CommonFormatting()
    With Sheets("Start")
       .Range("A1").ColumnWidth = 2
       .Range("B1").ColumnWidth = 45
       .Range("C1").ColumnWidth = 55
       .Range("D1").ColumnWidth = 2
       .Range("E1").ColumnWidth = 45
       .Range("F1").ColumnWidth = 55
       .Range("G1").ColumnWidth = 2
              
       .Rows("1").RowHeight = 15
       .Rows("2").RowHeight = 85
       .Rows("3:8").RowHeight = 94
       .Rows("9").RowHeight = 15
       .Rows("10").RowHeight = 50
       .Rows("11").RowHeight = 15
       .Rows("12").RowHeight = 150
       .Rows("13").RowHeight = 15
       .Rows("14").RowHeight = 50
       .Rows("15").RowHeight = 15
       .Shapes("InstructionsToggleButton").TextFrame.Characters.Text = "Hide Instructions"
    End With
    
    With Sheets("Settings")
       .Rows("1:2").RowHeight = 15
       .Rows("3").RowHeight = 30
       .Rows("4").RowHeight = 15
       .Rows("5").RowHeight = 60
       .Rows("6").RowHeight = 15
       .Rows("7").RowHeight = 60
       .Rows("8").RowHeight = 15
       .Rows("9").RowHeight = 60
       .Rows("10").RowHeight = 15
       .Rows("11").RowHeight = 100
       .Rows("12").RowHeight = 15
       .Rows("13").RowHeight = 150
       .Rows("14").RowHeight = 15
       .Rows("15").RowHeight = 60
       .Rows("16:20").RowHeight = 15
       
       .Columns("A:B").ColumnWidth = 2
       .Columns("C:D").ColumnWidth = 40
       .Columns("E").ColumnWidth = 60
       .Columns("F:G").ColumnWidth = 2
    End With
    
    
    With Sheets("Quote")
       .Range("A1").ColumnWidth = 2
       .Range("B1").ColumnWidth = 10
       .Range("C1").ColumnWidth = 25
       .Range("D1").ColumnWidth = 60
       .Range("E1").ColumnWidth = 15
       .Range("F1").ColumnWidth = 10
       .Range("G1").ColumnWidth = 10
       .Range("H1").ColumnWidth = 15
       .Range("I1").ColumnWidth = 2
       .Range("J1").ColumnWidth = 10
       .Range("K1").ColumnWidth = 55
       .Range("L1").ColumnWidth = 15
       .Range("M1").ColumnWidth = 2
       
       .Range("A1").RowHeight = 15
       .Range("A2").RowHeight = 100
       .Range("A3").RowHeight = 0
       .Range("A4").RowHeight = 85
       .Range("A5").RowHeight = 15
       .Range("A6").RowHeight = 20
       .Range("A7:A9").RowHeight = 30
       .Range("A10:A507").RowHeight = 50
       .Range("A10:A507").Rows.AutoFit
       
       .Range("D5").Value = "AUDC BoM"
    End With
    
    CommonInterviewFormatting Sheets("M800B")
    CommonInterviewFormatting Sheets("M1KB")
    CommonInterviewFormatting Sheets("M3K")
    CommonInterviewFormatting Sheets("SBCs")
    CommonInterviewFormatting Sheets("CB 365")
    CommonInterviewFormatting Sheets("OVOC")
    CommonInterviewFormatting Sheets("IP Phone")
    CommonInterviewFormatting Sheets("SmartTap")
    CommonInterviewFormatting Sheets("Voca")
    CommonInterviewFormatting Sheets("Services")
    CommonInterviewFormatting Sheets("Manual")
    
   With Sheets("Manual Selector")
       .Range("A1").ColumnWidth = 2
       .Range("C1").ColumnWidth = 10
       .Range("D1").ColumnWidth = 0
       .Range("E1").ColumnWidth = 10
       .Range("F1").ColumnWidth = 3
       .Range("G1").ColumnWidth = 0
       .Range("H1").ColumnWidth = 3
       .Range("I1").ColumnWidth = 31
       .Range("J1").ColumnWidth = 50
       .Range("K1").ColumnWidth = 15
       .Range("L1").ColumnWidth = 50
       .Range("M1").ColumnWidth = 2
            
       .Range("A1").RowHeight = 15
       .Range("A5").RowHeight = 50
       .Range("A6").RowHeight = 30
       .Range("A7:A15").RowHeight = 15
       .Range("A16:A3500").RowHeight = 50
       .Range("A16:A3500").Rows.AutoFit
       .Shapes("ManSelRowHeightToggle").TextFrame.Characters.Text = "OneLine"
       Sheets("Scratch").Range("ManSelRowHeight").Value = "Autofit"
       
       .Cells(4, 1).AutoFilter Field:=4, Visibledropdown:=False
       .Cells(4, 1).AutoFilter Field:=6, Visibledropdown:=False
       .Cells(4, 1).AutoFilter Field:=9, Visibledropdown:=False
    End With
    
    With Sheets("Genesys")
       CommonInterviewFormatting Sheets("Genesys")
       .Rows("5:26").RowHeight = 30
    End With
    
    With Sheets("CustFilters")
       .Range("A1").ColumnWidth = 2
       .Range("B1").ColumnWidth = 45
       .Range("C1:L1").ColumnWidth = 9
       .Range("M1").ColumnWidth = 2
       
       .Range("A1").RowHeight = 15
       .Range("A2").RowHeight = 60
       .Range("A3").RowHeight = 50
       .Range("A4").RowHeight = 15
       .Range("A5:A6").RowHeight = 30
       .Range("A7:A39").Rows.AutoFit
       .Range("A40").RowHeight = 15
    End With
    
    With Sheets("Detail")
       .Range("A1").ColumnWidth = 8
       .Range("B1").ColumnWidth = 60
       .Range("C1").ColumnWidth = 90
       .Range("D1").ColumnWidth = 15
       .Range("E1").ColumnWidth = 2
       
       .Range("A2:A300").RowHeight = 15
       .Range("A2:A300").Rows.AutoFit
       
       'access buttons for below removed
       .Range("MsftPatch").RowHeight = 85
       .Range("StrtMacErr").RowHeight = 75
       .Range("ExcelCrash").RowHeight = 100
       .Range("LockedCells").RowHeight = 90
       
       .Range("QuoteHelp").RowHeight = 380
       .Range("InterviewHelp").RowHeight = 150
       .Range("ManHelpDetail").RowHeight = 125
       .Range("ManSelHelpDetail").RowHeight = 270
       .Range("DiscToolHelpDetail").RowHeight = 200
       .Range("CalcTargetMoreInfo").RowHeight = 210
    End With
    
    With Sheets("DiscTool")
       .Columns("A").ColumnWidth = 2
       .Columns("B").ColumnWidth = 10
       .Columns("C").ColumnWidth = 25
       .Columns("D").ColumnWidth = 60
       .Columns("E").ColumnWidth = 15
       .Columns("F").ColumnWidth = 6
       .Columns("G").ColumnWidth = 10
       .Columns("H").ColumnWidth = 15
       .Columns("I").ColumnWidth = 2
       .Columns("J").ColumnWidth = 15
       .Columns("K").ColumnWidth = 2
       .Columns("L:M").ColumnWidth = 15
       .Columns("N").ColumnWidth = 2
       .Columns("O:T").ColumnWidth = 0
       
       'Hide Target Pricing Columns at outset.
       .Range("U1").ColumnWidth = 0
       .Range("V1").ColumnWidth = 0
       .Range("W1").ColumnWidth = 0

       .Range("X1").ColumnWidth = 10
       .Range("Y1").ColumnWidth = 50
       .Range("Z1").ColumnWidth = 15
       .Range("AA1").ColumnWidth = 15
       .Range("AB1").ColumnWidth = 0
       .Range("AC1").ColumnWidth = 0
       .Range("AD1").ColumnWidth = 2
       
       .Range("A1").RowHeight = 15
       .Range("A2:A4").RowHeight = 20
       .Range("A5").RowHeight = 50
       .Range("A6:A12").RowHeight = 20
       .Range("A13:A513").Rows.AutoFit
       
       .Cells(11, 2).Value = "AUDC Disc BoM"
    End With
    
End Sub

Private Sub CommonInterviewFormatting(SheetToFormat As Worksheet)
   With SheetToFormat
       .Range("A1").ColumnWidth = 2
       .Range("B1").ColumnWidth = 60
       .Range("E1").ColumnWidth = 18
       .Range("F1").ColumnWidth = 65
       .Range("G1").ColumnWidth = 10
       .Range("H1").ColumnWidth = 2
       .Range("I1").ColumnWidth = 11
       .Range("J1").ColumnWidth = 25
       .Range("K1").ColumnWidth = 60
       .Range("L1").ColumnWidth = 15
       .Range("M1").ColumnWidth = 6
       .Range("N1").ColumnWidth = 9
       .Range("O1").ColumnWidth = 15
       .Range("P1").ColumnWidth = 2
       
       .Range("A1").RowHeight = 15
       .Range("A2").RowHeight = 60
       .Range("A3").RowHeight = 50
       .Range("A4").RowHeight = 30
   End With
   
End Sub

Sub FormatForRelease()
    Application.ScreenUpdating = False
    
    CommonFormatting
    
    With Sheets("Start")
       ActiveWindow.DisplayHeadings = False
       .Shapes("InstructionsToggleButton").TextFrame.Characters.Text = "Hide Instructions"
    End With
    
    With Sheets("Settings")
       ActiveWindow.DisplayHeadings = False
       .Columns("H:AA").ColumnWidth = 0
    End With
    
    With Sheets("Quote")
       ActiveWindow.DisplayHeadings = True
       .Range("N1:AK1").ColumnWidth = 0
       .Shapes("QuoteShowExt").TextFrame.Characters.Text = "Show Extd"
    End With
    
    With Sheets("M800B")
       ActiveWindow.DisplayHeadings = False
       FormatInterviewForRelease Sheets("M800B")
       .Range("A5:A32").RowHeight = 30
       .Range("A33:A162").RowHeight = 50
       .Range("A33:A162").Rows.AutoFit
    End With
    
    With Sheets("M1KB")
       ActiveWindow.DisplayHeadings = False
       FormatInterviewForRelease Sheets("M1KB")
       .Range("A5:A31").RowHeight = 30
       .Range("A32:A162").RowHeight = 50
       .Range("A32:A162").Rows.AutoFit
    End With
    
    With Sheets("M3K")
       ActiveWindow.DisplayHeadings = False
       FormatInterviewForRelease Sheets("M3K")
       .Range("A5:A27").RowHeight = 30
       .Range("A28:A162").RowHeight = 50
       .Range("A28:A162").Rows.AutoFit
    End With

    With Sheets("SBCs")
       ActiveWindow.DisplayHeadings = False
       FormatInterviewForRelease Sheets("SBCs")
       .Range("A5:A27").RowHeight = 30
       ' hide row with to coder values
       .Range("A28").RowHeight = 15
       .Range("A29:A162").RowHeight = 50
       .Range("A29:A162").Rows.AutoFit
    End With

    With Sheets("CB 365")
       ActiveWindow.DisplayHeadings = False
       FormatInterviewForRelease Sheets("CB 365")
       .Range("A5:A25").RowHeight = 30
       .Range("A26:A162").RowHeight = 50
       .Range("A26:A162").Rows.AutoFit
    End With
        
    With Sheets("OVOC")
       ActiveWindow.DisplayHeadings = False
       FormatInterviewForRelease Sheets("OVOC")
       .Range("A5:A32").RowHeight = 30
       .Range("A33:A162").RowHeight = 50
       .Range("A33:A162").Rows.AutoFit
    End With
    
    With Sheets("IP Phone")
       ActiveWindow.DisplayHeadings = False
       FormatInterviewForRelease Sheets("IP Phone")
       .Range("A5:A214").RowHeight = 30
       .Range("A15:A162").RowHeight = 50
       .Range("A15:A162").Rows.AutoFit
    End With
    
    With Sheets("SmartTap")
       ActiveWindow.DisplayHeadings = False
       FormatInterviewForRelease Sheets("SmartTap")
       .Range("A5:A22").RowHeight = 30
       .Range("A23:A162").RowHeight = 50
       .Range("A23:A162").Rows.AutoFit
    End With
       
    With Sheets("Voca")
       ActiveWindow.DisplayHeadings = False
       FormatInterviewForRelease Sheets("Voca")
       .Range("A5:A18").RowHeight = 30
       .Range("A19:A162").RowHeight = 50
       .Range("A19:A162").Rows.AutoFit
    End With
       
    With Sheets("Services")
       ActiveWindow.DisplayHeadings = False
       FormatInterviewForRelease Sheets("Services")
       .Range("A5:A47").RowHeight = 30
       .Range("A48:A162").RowHeight = 50
       .Range("A48:A162").Rows.AutoFit
    End With
    
    With Sheets("Manual")
       ActiveWindow.DisplayHeadings = False
       FormatInterviewForRelease Sheets("Manual")
       .Range("A5:A8").RowHeight = 30
       .Range("A9:A162").RowHeight = 50
       .Range("A9:A162").Rows.AutoFit
    End With
    
    With Sheets("Manual Selector")
       ActiveWindow.DisplayHeadings = True
       .Range("B1").ColumnWidth = 0
       .Range("A2").RowHeight = 75
       .Range("A3:A4").RowHeight = 0
       .Shapes("FilterBarToggle").TextFrame.Characters.Text = "Show Filter Bar"
       .Shapes("ManSelRowHeightToggle").TextFrame.Characters.Text = "OneLine"
    End With
    
    With Sheets("Genesys")
       ActiveWindow.DisplayHeadings = False
       FormatInterviewForRelease Sheets("Genesys")
       .Range("A5:A26").RowHeight = 30
       .Range("A27:A162").RowHeight = 50
       .Range("A27:A162").Rows.AutoFit
    End With
    
    With Sheets("CustFilters")
       .Range("N1:AI1").ColumnWidth = 0
    End With
    
    With Sheets("Detail")
       .Range("F1:K1").ColumnWidth = 0
    End With
    
    With Sheets("DiscTool")
       ActiveWindow.DisplayHeadings = True
       'Hide Target Pricing Columns at outset.
       .Range("U1").ColumnWidth = 0
       .Range("V1").ColumnWidth = 0
       .Range("W1").ColumnWidth = 0
       .Shapes("DiscToolPartnerDistiToggle").TextFrame.Characters.Text = "Show Partner & Disti Pricing"
       
       'Initialize Target Pricing Toggle
       .Shapes("DiscToolTargetButton").TextFrame.Characters.Text = "Set Price Targets"
       .Range("PriceTargetToggle").Value = "Hide"
       
       'Hide Support Columns
       .Range("AE1:AK1").ColumnWidth = 0
    End With
    
    Application.ScreenUpdating = True
End Sub

Sub FormatForWork()
    Application.ScreenUpdating = False
    
    CommonFormatting
    
    With Sheets("Start")
       ActiveWindow.DisplayHeadings = True
    End With
    
    With Sheets("Settings")
       ActiveWindow.DisplayHeadings = True
       .Columns("H").ColumnWidth = 2
       .Columns("I:K").ColumnWidth = 12
       .Columns("L").ColumnWidth = 2
       .Columns("M:O").ColumnWidth = 12
       .Columns("P").ColumnWidth = 2
       .Columns("Q").ColumnWidth = 20
       .Columns("R").ColumnWidth = 2
       .Columns("S:T").ColumnWidth = 20
       .Columns("U").ColumnWidth = 2
       .Columns("V:X").ColumnWidth = 20
       .Columns("Y").ColumnWidth = 2
       .Columns("Z:AA").ColumnWidth = 20
    End With
    
    With Sheets("Quote")
       .Range("N1").ColumnWidth = 8
       .Range("O1").ColumnWidth = 15
       .Range("P1").ColumnWidth = 2
       .Range("Q1").ColumnWidth = 8
       .Range("R1").ColumnWidth = 8 ' qty
       .Range("S1").ColumnWidth = 15
       .Range("T1").ColumnWidth = 2
       .Range("U1").ColumnWidth = 8
       .Range("V1").ColumnWidth = 20
       .Range("W1").ColumnWidth = 15
       .Range("X1").ColumnWidth = 2
       .Range("Y1").ColumnWidth = 8
       .Range("Z1").ColumnWidth = 8
       .Range("AA1").ColumnWidth = 50
       .Range("AB1").ColumnWidth = 15
       .Range("AC1").ColumnWidth = 10
       .Range("AD1").ColumnWidth = 2
       .Range("AE1").ColumnWidth = 15
       .Range("AF1").ColumnWidth = 2
       .Range("AG1:AJ1").ColumnWidth = 2
       .Range("AK1").ColumnWidth = 2
    End With
    
    With Sheets("M800B")
       ActiveWindow.DisplayHeadings = True
       FormatInterviewForWork Sheets("M800B")
    End With
    
    With Sheets("M1KB")
       ActiveWindow.DisplayHeadings = True
       FormatInterviewForWork Sheets("M1KB")
    End With
    
    With Sheets("M3K")
       ActiveWindow.DisplayHeadings = True
       FormatInterviewForWork Sheets("M3K")
    End With

    With Sheets("SBCs")
       ActiveWindow.DisplayHeadings = True
       FormatInterviewForWork Sheets("SBCs")
    End With

    With Sheets("OVOC")
       ActiveWindow.DisplayHeadings = True
       FormatInterviewForWork Sheets("OVOC")
    End With

    With Sheets("CB 365")
       ActiveWindow.DisplayHeadings = True
       FormatInterviewForWork Sheets("CB 365")
    End With
    
     With Sheets("IP Phone")
       ActiveWindow.DisplayHeadings = True
       FormatInterviewForWork Sheets("IP Phone")
     End With
    
     With Sheets("SmartTap")
       ActiveWindow.DisplayHeadings = True
       FormatInterviewForWork Sheets("SmartTap")
     End With
     
     With Sheets("Voca")
       ActiveWindow.DisplayHeadings = True
       FormatInterviewForWork Sheets("Voca")
     End With
    
    With Sheets("Services")
       ActiveWindow.DisplayHeadings = True
       FormatInterviewForWork Sheets("Services")
       .Range("A5:A47").RowHeight = 30
       .Range("A48:A162").RowHeight = 50
       .Range("A48:A162").Rows.AutoFit
    End With
    
    With Sheets("Manual")
       ActiveWindow.DisplayHeadings = True
       FormatInterviewForWork Sheets("Manual")
    End With
    
    With Sheets("Manual Selector")
       .Range("B1").ColumnWidth = 5
       .Range("A2:A4").RowHeight = 75
       .Shapes("FilterBarToggle").TextFrame.Characters.Text = "Hide Filter Bar"
    End With
    
    With Sheets("Genesys")
       ActiveWindow.DisplayHeadings = True
       FormatInterviewForWork Sheets("Genesys")
       .Columns("AS:BH").ColumnWidth = 10
    End With
    
    With Sheets("CustFilters")
       .Range("N1:AI1").ColumnWidth = 9
       
       .Range("A2").RowHeight = 60
       .Range("A3:A4").RowHeight = 60
    End With
    
    With Sheets("DiscTool")
       ActiveWindow.DisplayHeadings = True
       'Show Target Pricing Columns at outset.
       .Range("U1").ColumnWidth = 15
       .Range("V1").ColumnWidth = 15
       .Range("W1").ColumnWidth = 2

       .Columns("AE:AG").ColumnWidth = 10
       .Columns("AH").ColumnWidth = 2
       .Range("AI1:AJ1").ColumnWidth = 25
       .Range("AK1").ColumnWidth = 2
    End With
    
    With Sheets("Scratch")
       .Range("A1").ColumnWidth = 10
       .Range("B1").ColumnWidth = 15
       .Range("C1").ColumnWidth = 10
       .Range("D1").ColumnWidth = 5
       .Range("E1:AA1").ColumnWidth = 15
       .Range("AB1").ColumnWidth = 5
    End With
    
    With Sheets("Detail")
       .Columns("F").ColumnWidth = 10
       .Columns("G").ColumnWidth = 20
       .Columns("H").ColumnWidth = 2
       .Columns("I").ColumnWidth = 90
       .Columns("J").ColumnWidth = 90
       .Columns("J").ColumnWidth = 90
    End With
    
    Application.ScreenUpdating = True
End Sub

Private Sub FormatInterviewForRelease(ByRef SheetToFormat As Worksheet)
    CommonInterviewFormatting SheetToFormat
    With SheetToFormat
       .Range("C1:D1").ColumnWidth = 0
       .Range("Q1:BZ1").ColumnWidth = 0
    End With
End Sub

Private Sub FormatInterviewForWork(ByRef SheetToFormat As Worksheet)
    CommonInterviewFormatting SheetToFormat
    With SheetToFormat
       .Range("C1:D1").ColumnWidth = 9
       .Range("Q1:AZ1").ColumnWidth = 10
      
    End With
End Sub
Attribute VB_Name = "Module4"
'Module 4 - Conditional Formatting for Sheets
' -         SetConditionalFormatting - Used in Ready for Release
' - Private SetConditionalFormattingForStandardInterview
' - Private SetConditionalFormattingForManual
' -         SetConditionalFormattingForQuote - used in Start for Currency Switch
' -         SetConditionalFormattingForDiscTool - used in Start for Currency Switch
' - Private SetConditionalFormattingForStandardManualSelector
' - Private SetConditionalFormattingForPriceBook

Sub SetConditionalFormatting()
  Call SetConditionalFormattingForStandardInterview("M800B")
  Call ExtraConditionalFormatingForM800B
  Call SetConditionalFormattingForStandardInterview("M1KB")
  Call SetConditionalFormattingForStandardInterview("M3K")
  Call SetConditionalFormattingForStandardInterview("SBCs")
  Call SetConditionalFormattingForStandardInterview("CB 365")
  Call SetConditionalFormattingForStandardInterview("OVOC")
  Call SetConditionalFormattingForStandardInterview("Services")
  Call SetConditionalFormattingForStandardInterview("IP Phone")
  Call SetConditionalFormattingForStandardInterview("SmartTap")
  Call SetConditionalFormattingForStandardInterview("Voca")
  Call SetConditionalFormattingForManual
  Call SetConditionalFormattingForStandardInterview("Genesys")
  
  SetConditionalFormattingForQuote (Sheets("Settings").Range("Currency").Value)
  SetConditionalFormattingForDiscTool (Sheets("Settings").Range("Currency").Value)
  SetConditionalFormattingForManualSelector
  SetConditionalFormattingForPriceBook
End Sub

Private Sub SetConditionalFormattingForStandardInterview(SheetToFormat As String)
  With Sheets(SheetToFormat)
    
    .Range("A1:CA162").FormatConditions.Delete
    
    With .Range("$E$5:$E$100")
      'Not Applicable Shading
      .FormatConditions.Add xlExpression, Formula1:="=$U5=NA"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Pattern = xlCrissCross
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(128, 128, 128)
    End With
    
    With .Range("$E$5:$F$100")
      'Error, Warning, and Information Shading
      .FormatConditions.Add xlExpression, Formula1:="=$U5=Err"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(255, 192, 0)
    
      .FormatConditions.Add xlExpression, Formula1:="=$U5=Wrn"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(255, 255, 0)
      
      .FormatConditions.Add xlExpression, Formula1:="=$U5=Inf"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(221, 217, 196)
    End With
    
    With .Range("$J10")
      'Error Message Shading in BoM Header
      .FormatConditions.Add xlExpression, Formula1:="=U3=Err"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(255, 192, 0)
      
      .FormatConditions.Add xlExpression, Formula1:="=U3=Wrn"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(255, 255, 0)
    End With
    
    With .Range("$L$12:$L$162")
      'MSRP Col Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=USD, OR($L12<0.005, $L12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=USD, $L12>=0.005, $L12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=Euro, OR($L12<0.005, $L12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=Euro, $L12>=0.005, $L12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
    
    With .Range("$O$10:$O$162")
      'Ext MSRP col Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      'Based Ext MSRP, no associated MSRP value
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=USD, OR($O10<0.005, $O10>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=USD, $O10>=0.005, $O10<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=Euro, OR($O10<0.005, $O10>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=Euro, $O10>=0.005, $O10<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
    
    With .Range("$N$12:$N$162")
      'Ext MSRP col Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      'Based on MSRP characteristics
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=USD, ISNUMBER($N12), OR($N12<0.005, $N12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=USD, ISNUMBER($N12), $N12>=0.005, $N12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=Euro, ISNUMBER($N12), OR($N12<0.005, $N12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=Euro, ISNUMBER($N12), $N12>=0.005, $N12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
    
    With .Range("$I$12:$I$162, $P$12:$P$162")
      'Outside Vertical Edges of BoM area
      .FormatConditions.Add xlExpression, Formula1:="=$I12<>Blank"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlLeft).LineStyle = xlContinuous
    End With
    
    With .Range("$I$12:$O$162")
      'Bottom Horizontal except where next line is a product associated services (ie support or warranty)
      'Horizontal Line at bottom of BoM
      .FormatConditions.Add xlExpression, Formula1:="=AND($I12<>Blank, $I13<>$I12+1)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlBottom).LineStyle = xlContinuous
    End With

  End With
End Sub

Private Sub ExtraConditionalFormatingForM800B()
' M800B Interview has extra formating to shade the M800B entities blue - Right($B7, 1)=""0"""
  With Sheets("M800B").Range("$J$12:$J$161")
      'Not Applicable Shading
      .FormatConditions.Add xlExpression, Formula1:="=AND(Left($J12, 1)=""M"", m8count<> 1)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(102, 204, 255)
  End With
End Sub

Private Sub SetConditionalFormattingForManual()
' Special version for longer potential BoM - 99 items with 3 elements each vs normal 150 lines
  With Sheets("Manual")
    
    .Range("A1:CA312").FormatConditions.Delete
    
    With .Range("$E$5:$E$100")
      'Not Applicable Shading
      .FormatConditions.Add xlExpression, Formula1:="=$U5=NA"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Pattern = xlCrissCross
      .FormatConditions(.FormatConditions.count).Interior.Color = 8421504
    End With
    
    With .Range("$E$5:$F$100")
      'Error, Warning, and Information Shading
      .FormatConditions.Add xlExpression, Formula1:="=$U5=Err"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Color = 49407
    
      .FormatConditions.Add xlExpression, Formula1:="=$U5=Wrn"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Color = 65535
      
      .FormatConditions.Add xlExpression, Formula1:="=$U5=Inf"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(221, 217, 196)
    End With
    
    With .Range("$J10")
      'Error Message Shading in BoM Header
      .FormatConditions.Add xlExpression, Formula1:="=U3=Err"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(255, 192, 0)
      
      .FormatConditions.Add xlExpression, Formula1:="=U3=Wrn"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(255, 255, 0)
    End With
    
    With .Range("$L$12:$L$312")
      'MSRP Col Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=USD, OR($L12<0.005, $L12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=USD, $L12>=0.005, $L12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=Euro, OR($L12<0.005, $L12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=Euro, $L12>=0.005, $L12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
    
    With .Range("$O$10:$O$312")
      'Ext MSRP col Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      'Based Ext MSRP, no associated MSRP value
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=USD, OR($O10<0.005, $O10>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=USD, $O10>=0.005, $O10<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=Euro, OR($O10<0.005, $O10>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=Euro, $O10>=0.005, $O10<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
    
    With .Range("$N$12:$N$312")
      'Ext MSRP col Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      'Based on MSRP characteristics
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=USD, ISNUMBER($N12), OR($N12<0.005, $N12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=USD, ISNUMBER($N12), $N12>=0.005, $N12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=Euro, ISNUMBER($N12), OR($N12<0.005, $N12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=Euro, ISNUMBER($N12), $N12>=0.005, $N12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
    
    With .Range("$I$12:$I$312, $P$12:$P$312")
      'Outside Vertical Edges of BoM area
      .FormatConditions.Add xlExpression, Formula1:="=$I12<>Blank"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlLeft).LineStyle = xlContinuous
    End With
    
    With .Range("$I$12:$O$312")
      'Bottom Horizontal except where next line is a product associated services (ie support or warranty)
      'Horizontal Line at bottom of BoM
      .FormatConditions.Add xlExpression, Formula1:="=AND($I12<>Blank, $I13<>$I12+1)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlBottom).LineStyle = xlContinuous
    End With

  End With
End Sub


Sub SetConditionalFormattingForQuote(CurrentCurrencyFormat As String)
Dim LclCurrencyCopy As String
  ' Segment by Currency so the Currency Variable isn't part of the conditional
  ' So the exported sheet doesn't pull the Currency Name with it.
  With Sheets("Quote")
    .Range("A1:P507").FormatConditions.Delete
    
    With .Range("$E$9:$E$507")
      'MSRP col Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      .FormatConditions.Add xlExpression, Formula1:="=AND($R$7=""USD"", OR($E9<0.005, $E9>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
    
      .FormatConditions.Add xlExpression, Formula1:="=AND($R$7=""USD"", $E9>=0.005, $E9<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($R$7=""Euro"", OR($E9<0.005, $E9>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
    
      .FormatConditions.Add xlExpression, Formula1:="=AND($R$7=""Euro"", $E9>=0.005, $E9<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
    
    With .Range("$G$9:$G$507")
      'MSRP col Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      .FormatConditions.Add xlExpression, Formula1:="=AND($R$7=""USD"", OR($G9<0.005, $G9>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
    
      .FormatConditions.Add xlExpression, Formula1:="=AND($R$7=""USD"", $G9>=0.005, $G9<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($R$7=""Euro"", OR($G9<0.005, $G9>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
    
      .FormatConditions.Add xlExpression, Formula1:="=AND($R$7=""Euro"", $G9>=0.005, $G9<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
    
    With .Range("$H$7:$H$507")
      'Ext MSRP col Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      'Based on Ext MSRP, no associated MSRP
      .FormatConditions.Add xlExpression, Formula1:="=and($R$7=""USD"", ISNUMBER($H7), OR($H7<0.005, $H7>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($R$7=""USD"", ISNUMBER($H7), $H7>=0.005, $H7<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($R$7=""Euro"", ISNUMBER($H7), OR($H7<0.005, $H7>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($R$7=""Euro"", ISNUMBER($H7), $H7>=0.005, $H7<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
    
    With .Range("$L$7:$L$507, $O$7:$O$108")
      'Summary MSRP col Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      'Based on the Totals
      .FormatConditions.Add xlExpression, Formula1:="=AND($R$7=""USD"", OR($L7<0.005, $L7>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($R$7=""USD"", $L7>=0.005, $L7<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($R$7=""Euro"", OR($L7<0.005, $L7>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($R$7=""Euro"", $L7>=0.005, $L7<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
    
    With .Range("$B$7:$B$507, $I$7:$I$507")
      'Outside Vertical Edges of BoM area
      .FormatConditions.Add xlExpression, Formula1:="=OR($B7<>"""", $B8<>"""", $B9<>"""")"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlLeft).LineStyle = xlContinuous
    End With
    
    With .Range("$C$7:$C$507, $E$7:$E$507, $H$7:$H$507")
      'Verticals in Blue Header
      .FormatConditions.Add xlExpression, Formula1:="=Right($B7, 1)=""0"""
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlLeft).LineStyle = xlContinuous
    End With

    With .Range("$C$7:$H$507")
      'Verticals in Gray Header
      .FormatConditions.Add xlExpression, Formula1:="=Right($B6, 1)=""0"""
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlLeft).LineStyle = xlContinuous
    End With
    
    With .Range("$B$7:$H$507")
      'Color/Bold in Blue Header
      .FormatConditions.Add xlExpression, Formula1:="=Right($B7, 1)=""0"""
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlTop).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Borders(xlBottom).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Font.Bold = True
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(197, 217, 241)

    End With

    With .Range("$B$7:$H$507")
      'Color in Gray Header
      .FormatConditions.Add xlExpression, Formula1:="=Right($B6, 1)=""0"""
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlBottom).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(217, 217, 217)

    End With
    
    With .Range("$B$7:$H$507")
      'Bottom Horizontal except where next line is a product associated services (ie support or warranty)
      .FormatConditions.Add xlExpression, Formula1:="=AND($B7<>"""", $B8<>$B7+1)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlBottom).LineStyle = xlContinuous
    End With

    With .Range("$J$9:$L$108, $N$9:$O$108")
      'Bottom (Total) Row of Summary
      .FormatConditions.Add xlExpression, Formula1:="=$J9=""Total"""
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlBottom).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Borders(xlTop).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Font.Bold = True
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(197, 217, 241)
    End With

    With .Range("$J$9:$L$108, $N$9:$O$108")
      'Bottom (Total) Row of Summary
      .FormatConditions.Add xlExpression, Formula1:="=OR($J9=""Per Mnth"", $J9=""Day 1"")"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlBottom).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Borders(xlTop).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Font.Bold = False
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(197, 217, 241)
    End With

    With .Range("$J$9:$L$108")
      'Separators in Notes below Summary - keyed by Blankx5 in MSRP column
      .FormatConditions.Add xlExpression, Formula1:="=$L9=""     """ 'Blankx5
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlBottom).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Borders(xlTop).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Font.Bold = True
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(197, 217, 241)
    End With
    
    With .Range("$J$9:$L$108")
      'Coloration for Under Summary Notes
      .FormatConditions.Add xlExpression, Formula1:="=$L9=""  """ 'Blankx2
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(221, 217, 196)
    End With
    
    With .Range("$J$9:$L$108")
      'Coloration for Under Summary Warnings
      .FormatConditions.Add xlExpression, Formula1:="=$L9=""   """ 'Blankx3
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(255, 255, 0)
    End With
    
    With .Range("$J$9:$L$108")
      'Coloration for Under Summary Erros
      .FormatConditions.Add xlExpression, Formula1:="=$L9=""    """ 'Blankx4
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(255, 192, 0)
    End With

    With .Range("$J$9:$J$108")
      'Bold the Note/Warning/Error leads in col J
      .FormatConditions.Add xlExpression, Formula1:="=OR($J9=""Note"", $J9=""Warning"",$J9=""Error"")"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Font.Bold = True
    End With
    
    With .Range("$J$8:$J$108,$M$8:$M$108, $N$8:$N$108, $P$8:$P$108")
      'Verticals in Summary
      .FormatConditions.Add xlExpression, Formula1:="=AND($J8<>"""", $J8<>"" "")"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlLeft).LineStyle = xlContinuous
    End With
    
  End With

End Sub

Sub SetConditionalFormattingForDiscTool(CurrentCurrencyFormat As String)
  With Sheets("DiscTool")
    .Range("A1:AK513").FormatConditions.Delete
    
    With .Range("$E$13:$E$513")
      'MSRP col Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""USD"", ISNUMBER($E13), OR($E13<1/200, $E13>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
        
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""USD"", ISNUMBER($E13), $E13>=1/200, $E13<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
       
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""Euro"", ISNUMBER($E13), OR($E13<1/200, $E13>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""Euro"", ISNUMBER($E13), $E13>=1/200, $E13<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
    
    With .Range("$G$13:$G$507")
      'MSRP col Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""USD"", OR($G13<0.005, $G13>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
    
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""USD"", $G13>=0.005, $G13<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""Euro"", OR($G13<0.005, $G13>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
    
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""Euro"", $G13>=0.005, $G13<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
    
    With .Range("$H$12:$H$513")
      'All the GrandTotal Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      'Based on MSRP for the non-total lines
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""USD"", ISNUMBER($H12), OR($H12<1/200, $H12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
        
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""USD"", ISNUMBER($H12), $H12>=1/200, $H12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
       
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""Euro"", ISNUMBER($H12), OR($H12<1/200, $H12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""Euro"", ISNUMBER($H12), $H12>=1/200, $H12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
   
    With .Range("$L$12:$L$513")
      'All the GrandTotal Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      'Based on MSRP for the non-total lines
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""USD"", ISNUMBER($L12), OR($L12<1/200, $L12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
        
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""USD"", ISNUMBER($L12), $L12>=1/200, $L12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
       
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""Euro"", ISNUMBER($L12), OR($L12<1/200, $L12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""Euro"", ISNUMBER($L12), $L12>=1/200, $L12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
   
    With .Range("$O$12:$O$513")
      'All the GrandTotal Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      'Based on MSRP for the non-total lines
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""USD"", ISNUMBER($O12), OR($O12<1/200, $O12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
        
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""USD"", ISNUMBER($O12), $O12>=1/200, $O12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
       
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""Euro"", ISNUMBER($O12), OR($O12<1/200, $O12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""Euro"", ISNUMBER($O12), $O12>=1/200, $O12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
   
    With .Range("$R$12:$R$513")
      'All the GrandTotal Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      'Based on MSRP for the non-total lines
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""USD"", ISNUMBER($R12), OR($R12<1/200, $R12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
        
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""USD"", ISNUMBER($R12), $R12>=1/200, $R12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
       
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""Euro"", ISNUMBER($R12), OR($R12<1/200, $R12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""Euro"", ISNUMBER($R12), $R12>=1/200, $R12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
   
    With .Range("$V$13:$V$513")
      'Target Price col Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      'Based on MSRP characteristics
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""USD"", OR($V13<1/200, $V13>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""USD"", $V13>=1/200, $V13<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""Euro"", OR($V13<1/200, $V13>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""Euro"", $V13>=1/200, $V13<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
    
    With .Range("$Z$12:$AC$513")
      'All the GrandTotal Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      'Based on MSRP for the non-total lines
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""USD"", ISNUMBER(Z12), OR(Z12<1/200, Z12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
        
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""USD"", ISNUMBER(Z12), Z12>=1/200, Z12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
       
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""Euro"", ISNUMBER(Z12), OR(Z12<1/200, Z12>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND($AE$4=""Euro"", ISNUMBER(Z12), Z12>=1/200, Z12<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
   
    With .Range("$B$13:$B$513, $I$13:$W$513")
      'Vertical Edges
      .FormatConditions.Add xlExpression, Formula1:="=OR($B13<>"""", $B14<>"""", $B15<>"""")"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlLeft).LineStyle = xlContinuous
    End With
    
    With .Range("$C$13:$C$513, $E$13:$E$513, $H$13:$H$513")
      'Verticals in Blue Header
      .FormatConditions.Add xlExpression, Formula1:="=Right($B13, 1)=""0"""
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlLeft).LineStyle = xlContinuous
    End With

    With .Range("$C$13:$H$513")
      'Verticals in Gray Header
      .FormatConditions.Add xlExpression, Formula1:="=Right($B12, 1)=""0"""
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlLeft).LineStyle = xlContinuous
    End With
    
    With .Range("$B$13:$H$513, $J$13:$J$513, $L$13:$M$513, $O$13:$P$513, $R$13:$S$513, $U$13:$V$513")
      'Color/Bold in Blue Header
      .FormatConditions.Add xlExpression, Formula1:="=Right($B13, 1)=""0"""
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlTop).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Borders(xlBottom).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Font.Bold = True
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(197, 217, 241)
    End With

    With .Range("$B$13:$H$513, $J$13:$J$513, $L$13:$M$513, $O$13:$P$513, $R$13:$S$513, $U$13:$V$513")
      'Color in Gray Header
      .FormatConditions.Add xlExpression, Formula1:="=Right($B12, 1)=""0"""
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlBottom).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(217, 217, 217)
    End With
    
    With .Range("$J$13:$J$513")
      'Yellow Color in Discount Col
      .FormatConditions.Add xlExpression, Formula1:="=$H13<>"""""
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(255, 255, 153)
    End With
    
    With .Range("$B$13:$H$513, $J$13:$J$513, $L$13:$M$513, $O$13:$P$513, $R$13:$S$513, $U$13:$V$513")
      'Bottom Horizontal except where next line is a product associated services (ie support or warranty)
      .FormatConditions.Add xlExpression, Formula1:="=AND($B13<>"""", $B14<>$B13+1)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlBottom).LineStyle = xlContinuous
    End With

    With .Range("$X$13:$AC$113")
      'Bottom Row of Summary - just shade, totals at top
      .FormatConditions.Add xlExpression, Formula1:="=AND($X12<>"""", $X13="""")"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlBottom).LineStyle = xlContinuous
      '.FormatConditions(.FormatConditions.count).Borders(xlTop).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Font.Bold = True
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(217, 217, 217)
    End With

    With .Range("$X$13:$X$113,$Z$13:$AD$113")
      'Verticals in Summary
      .FormatConditions.Add xlExpression, Formula1:="=or($X13<>"""", $X12<>"""")"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlLeft).LineStyle = xlContinuous
    End With
    
    With .Range("$F$11:$F$12")
      'make additional discount 0's invisible when Genesys BoM
      .FormatConditions.Add xlExpression, Formula1:="=$AE$2=""Genesys"""
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Font.Color = RGB(255, 255, 255)
    End With

  End With
End Sub

Private Sub SetConditionalFormattingForManualSelector()
  Dim ManSelRow As Integer
  
  With Sheets("Manual Selector")
  
   .Range("$A$1:$M$3500").FormatConditions.Delete

    With .Range("$C$7:$C$3500")
      'Green shading and outline for selectable items
      .HorizontalAlignment = xlCenter
      .VerticalAlignment = xlTop
      .Font.Size = 10
      .Font.Name = "Arial"
      .FormatConditions.Add xlExpression, Formula1:="=$I7<>Blank"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlBottom).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Borders(xlTop).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Borders(xlLeft).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Borders(xlRight).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).NumberFormat = "#,##0"
      .FormatConditions(.FormatConditions.count).Font.Bold = False
      .FormatConditions(.FormatConditions.count).Font.Color = RGB(0, 0, 0)
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(102, 255, 153)
    End With
    
    With .Range("$K$2:$K$3")
      'Yellow shading for selected count warning in cells K2 and K3
      .FormatConditions.Add xlExpression, Formula1:="=Max(B:B)>99"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(255, 255, 0)
      .FormatConditions(.FormatConditions.count).Font.Color = RGB(0, 0, 0)
    End With
    
    With .Range("$K$7:$K$3500")
      'MSRP col Currency Formating - USD and Euro = include cents only if non zero for numbers less than 25
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=USD, OR($K7<0.005, $K7>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0_);_($* (#,##0);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=USD, $K7>=0.005, $K7<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=Euro, OR($K7<0.005, $K7>=25))"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0_);_(|fffd|* (#,##0);_(|fffd|* ""-""??_);_(@_)"
      
      .FormatConditions.Add xlExpression, Formula1:="=AND(Currency=Euro, $K7>=0.005, $K7<25)"
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).NumberFormat = "_(|fffd|* #,##0.00_);_(|fffd|* (#,##0.00);_(|fffd|* ""-""??_);_(@_)"
    End With
    
  End With
    
End Sub

Private Sub SetConditionalFormattingForPriceBook()
  Dim ManSelRow As Integer
  
  With Sheets("PriceBook")
    'Delete old Format Conditions
    .Cells.FormatConditions.Delete
    
    'Yellow Box for New items
    With .Range("$L$6:$AA$3500")
      .HorizontalAlignment = xlCenter
      .VerticalAlignment = xlTop
      .Font.Size = 11
      .Font.Name = "Calibri"
      .FormatConditions.Add xlExpression, Formula1:="=L6=""New"""
      .FormatConditions(.FormatConditions.count).StopIfTrue = False
      .FormatConditions(.FormatConditions.count).Borders(xlBottom).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Borders(xlTop).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Borders(xlLeft).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Borders(xlRight).LineStyle = xlContinuous
      .FormatConditions(.FormatConditions.count).Font.Bold = False
      .FormatConditions(.FormatConditions.count).Interior.Color = RGB(255, 255, 0)
      .FormatConditions(.FormatConditions.count).Font.Color = RGB(0, 0, 0)
    End With
    
  End With
    
End Sub

Private Sub TestSetConditionalFormattingForDiscTool()
  SetConditionalFormattingForDiscTool ("USD")
End Sub

Private Sub TestSetConditionalFormattingForQuote()
  SetConditionalFormattingForQuote ("USD")
End Sub

Private Sub TestSetConditionalFormattingForStandardInterview()
  SetConditionalFormattingForStandardInterview ("SmartTap")
End Sub



Attribute VB_Name = "Module5"
'Module 5 - ActiveX-Controls and Shape Formatting & Positioning
' Not required for operation - remove from external versions
'
' - Private PositionShape calls PositionAllShapes
' - Private PositionAllShapes
' - Private StdSizeOneActiveXControl
' - Private WideSizeOneActiveXControl
' - Private CustSizeOneActiveXControl
' -         SizeActiveXControls, calls std, wide, cust versions
'

Private Sub PositionShape(shape As shape, top, height, width, left As Integer)
 shape.top = top
 shape.height = height
 shape.width = width
 shape.left = left
End Sub

Private Sub PositionAllShapes()
  ' generated with listshapeinfo macro in module 7 and following:
  ' CONCATENATE("Call PositionShape(Sheets(#",G4, "#).Shapes(#", B4, "#), ", C4, ", ", D4, ", ", E4, ", ", F4, ")")
  Dim PandDpricing, Targets As String

  ' The CalcDiscToTarg and ClearTarg Buttons need to be placed in columns that have zero width from Format initialization
  ' Increase the column widths for the placement of the buttons if they're zero (like during intialization)
  ' Return column widths to zero if they zero to start with
  If Sheets("DiscTool").Columns("U").ColumnWidth = 0 Then
    Targets = "Hidden"
  Else
    Targets = "Shown"
  End If
  ' Set U, V, and W to proper expanded regardless
  Sheets("DiscTool").Columns("U:V").ColumnWidth = 15
  Sheets("DiscTool").Columns("W").ColumnWidth = 2

  'Open Pricing cols if closed in same way
  If Sheets("DiscTool").Columns("O").ColumnWidth = 0 Then
    PandDpricing = "Hidden"
  Else
    PandDpricing = "Shown"
  End If
  ' Set O through T regardless
  Sheets("DiscTool").Columns("O:P").ColumnWidth = 15
  Sheets("DiscTool").Columns("Q").ColumnWidth = 2
  Sheets("DiscTool").Columns("R:S").ColumnWidth = 15
  Sheets("DiscTool").Columns("T").ColumnWidth = 2
  Call PositionShape(Sheets("DiscTool").Shapes("DiscToolClearBom"), 84, 29, 115, 25)
  Call PositionShape(Sheets("DiscTool").Shapes("DiscToolResetDisc"), 84, 29, 152, 167)
  Call PositionShape(Sheets("DiscTool").Shapes("DiscToolGTStart"), 84, 29, 115, 543)
  Call PositionShape(Sheets("DiscTool").Shapes("DiscToolGTQuote"), 84, 29, 115, 685)
  Call PositionShape(Sheets("DiscTool").Shapes("DiscToolExportCSV"), 84, 29, 172, 344)
  Call PositionShape(Sheets("DiscTool").Shapes("DiscToolExportXLS"), 84, 29, 230, 1762)
  Call PositionShape(Sheets("DiscTool").Shapes("DiscToolhelp"), 84, 29, 50, 2016)
  Call PositionShape(Sheets("DiscTool").Shapes("DiscToolTargetButton"), 84, 29, 137, 1601)
  Call PositionShape(Sheets("DiscTool").Shapes("DiscToolCalcDiscToTarg"), 81, 36, 65, 1423)
  Call PositionShape(Sheets("DiscTool").Shapes("DiscToolClearTarg"), 81, 36, 65, 1506)
  Call PositionShape(Sheets("DiscTool").Shapes("DiscToolPartnerDistiToggle"), 84, 29, 209, 827)
  If Targets = "Hidden" Then
    ' Return U-W Column widths to Zero
    Sheets("DiscTool").Columns("U:W").ColumnWidth = 0
  End If
  If PandDpricing = "Hidden" Then
    ' Return O-T Column widths to Zero
    Sheets("DiscTool").Columns("O:T").ColumnWidth = 0
  End If

  Call PositionShape(Sheets("CB 365").Shapes("CBreset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("CB 365").Shapes("CBsvcOffButton"), 84, 29, 144, 318)
  Call PositionShape(Sheets("CB 365").Shapes("CBdefault"), 84, 29, 216, 1262)
  Call PositionShape(Sheets("CB 365").Shapes("CBstart"), 84, 29, 144, 1044)
  Call PositionShape(Sheets("CB 365").Shapes("CBcopy"), 84, 29, 216, 536)
  Call PositionShape(Sheets("CB 365").Shapes("CBquote"), 84, 29, 144, 826)
  Call PositionShape(Sheets("CB 365").Shapes("CBhelp"), 84, 29, 50, 1552)
  
  Call PositionShape(Sheets("Genesys").Shapes("GOEMresetToDefault"), 84, 29, 216, 28)
  Call PositionShape(Sheets("Genesys").Shapes("GOEMmakeSettingsDefault"), 84, 29, 230, 1262)
  Call PositionShape(Sheets("Genesys").Shapes("GOEMGTStart"), 84, 29, 159, 1044)
  Call PositionShape(Sheets("Genesys").Shapes("GOEMcopyBoMtoQuote"), 84, 29, 216, 536)
  Call PositionShape(Sheets("Genesys").Shapes("GOEMGTQuote"), 84, 29, 144, 826)
  Call PositionShape(Sheets("Genesys").Shapes("GOEMhelp"), 86, 29, 50, 1552)
  
  Call PositionShape(Sheets("IP Phone").Shapes("IPPreset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("IP Phone").Shapes("IPPsvcOffButton"), 84, 29, 144, 318)
  Call PositionShape(Sheets("IP Phone").Shapes("IPPdefault"), 84, 29, 216, 1262)
  Call PositionShape(Sheets("IP Phone").Shapes("IPPstart"), 84, 29, 144, 1044)
  Call PositionShape(Sheets("IP Phone").Shapes("IPPcopy"), 84, 29, 216, 536)
  Call PositionShape(Sheets("IP Phone").Shapes("IPPquote"), 84, 29, 144, 826)
  Call PositionShape(Sheets("IP Phone").Shapes("IPPhelp"), 84, 29, 50, 1552)
  
  Call PositionShape(Sheets("M1KB").Shapes("m1reset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("M1KB").Shapes("m1svcOffButton"), 84, 29, 144, 318)
  Call PositionShape(Sheets("M1KB").Shapes("m1default"), 84, 29, 216, 1262)
  Call PositionShape(Sheets("M1KB").Shapes("m1start"), 84, 29, 144, 1044)
  Call PositionShape(Sheets("M1KB").Shapes("m1copy"), 84, 29, 216, 536)
  Call PositionShape(Sheets("M1KB").Shapes("m1quote"), 84, 29, 144, 826)
  Call PositionShape(Sheets("M1KB").Shapes("m1help"), 84, 29, 50, 1552)
  
  Call PositionShape(Sheets("M3K").Shapes("m3reset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("M3K").Shapes("m3svcOffButton"), 84, 29, 144, 318)
  Call PositionShape(Sheets("M3K").Shapes("m3default"), 84, 29, 216, 1262)
  Call PositionShape(Sheets("M3K").Shapes("m3start"), 84, 29, 144, 1044)
  Call PositionShape(Sheets("M3K").Shapes("m3copy"), 84, 29, 216, 536)
  Call PositionShape(Sheets("M3K").Shapes("m3quote"), 84, 29, 144, 826)
  Call PositionShape(Sheets("M3K").Shapes("m3help"), 84, 29, 50, 1552)
  
  Call PositionShape(Sheets("M800B").Shapes("m8reset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("M800B").Shapes("m8svcOffButton"), 84, 29, 144, 318)
  Call PositionShape(Sheets("M800B").Shapes("m8copy"), 84, 29, 216, 536)
  Call PositionShape(Sheets("M800B").Shapes("m8quote"), 84, 29, 144, 826)
  Call PositionShape(Sheets("M800B").Shapes("m8start"), 84, 29, 144, 1044)
  Call PositionShape(Sheets("M800B").Shapes("m8default"), 84, 29, 216, 1262)
  Call PositionShape(Sheets("M800B").Shapes("m8help"), 84, 29, 50, 1552)
  
  Call PositionShape(Sheets("OVOC").Shapes("mGreset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("OVOC").Shapes("mGsvcOffButton"), 84, 29, 144, 318)
  Call PositionShape(Sheets("OVOC").Shapes("mGdefault"), 84, 29, 216, 1262)
  Call PositionShape(Sheets("OVOC").Shapes("mGstart"), 84, 29, 144, 1044)
  Call PositionShape(Sheets("OVOC").Shapes("mGcopy"), 84, 29, 216, 536)
  Call PositionShape(Sheets("OVOC").Shapes("mGquote"), 84, 29, 144, 826)
  Call PositionShape(Sheets("OVOC").Shapes("mGhelp"), 84, 29, 50, 1552)
  
  Call PositionShape(Sheets("SBCs").Shapes("m0reset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("SBCs").Shapes("m0svcOffButton"), 84, 29, 144, 318)
  Call PositionShape(Sheets("SBCs").Shapes("m0default"), 84, 29, 216, 1262)
  Call PositionShape(Sheets("SBCs").Shapes("m0start"), 84, 29, 144, 1044)
  Call PositionShape(Sheets("SBCs").Shapes("m0copy"), 84, 29, 216, 536)
  Call PositionShape(Sheets("SBCs").Shapes("m0quote"), 84, 29, 144, 826)
  Call PositionShape(Sheets("SBCs").Shapes("m0help"), 84, 29, 50, 1552)
  
  Call PositionShape(Sheets("SmartTap").Shapes("STreset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("SmartTap").Shapes("StsvcOffButton"), 84, 29, 144, 318)
  Call PositionShape(Sheets("SmartTap").Shapes("STdefault"), 84, 29, 216, 1262)
  Call PositionShape(Sheets("SmartTap").Shapes("STstart"), 84, 29, 144, 1044)
  Call PositionShape(Sheets("SmartTap").Shapes("STcopy"), 84, 29, 216, 536)
  Call PositionShape(Sheets("SmartTap").Shapes("STquote"), 84, 29, 144, 826)
  Call PositionShape(Sheets("SmartTap").Shapes("SThelp"), 84, 29, 50, 1552)
  
  Call PositionShape(Sheets("Voca").Shapes("VocaReset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("Voca").Shapes("VocaSvcOffButton"), 84, 29, 144, 318)
  Call PositionShape(Sheets("Voca").Shapes("VocaDefault"), 84, 29, 216, 1262)
  Call PositionShape(Sheets("Voca").Shapes("VocaStart"), 84, 29, 144, 1044)
  Call PositionShape(Sheets("Voca").Shapes("VocaCopy"), 84, 29, 216, 536)
  Call PositionShape(Sheets("Voca").Shapes("VocaQuote"), 84, 29, 144, 826)
  Call PositionShape(Sheets("Voca").Shapes("VocaHelp"), 84, 29, 50, 1552)

  
  Call PositionShape(Sheets("Services").Shapes("PSreset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("Services").Shapes("PSdefault"), 84, 29, 216, 1262)
  Call PositionShape(Sheets("Services").Shapes("PSstart"), 84, 29, 144, 1044)
  Call PositionShape(Sheets("Services").Shapes("PScopy"), 84, 29, 216, 536)
  Call PositionShape(Sheets("Services").Shapes("PSquote"), 84, 29, 144, 826)
  Call PositionShape(Sheets("Services").Shapes("PShelp"), 84, 29, 50, 1552)
  
  Call PositionShape(Sheets("Manual").Shapes("Manreset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("Manual").Shapes("MansvcOffButton"), 84, 29, 144, 276)
  Call PositionShape(Sheets("Manual").Shapes("Mandefault"), 84, 29, 216, 1303)
  Call PositionShape(Sheets("Manual").Shapes("Manstart"), 84, 29, 144, 1127)
  Call PositionShape(Sheets("Manual").Shapes("Mantosel"), 84, 29, 216, 702)
  Call PositionShape(Sheets("Manual").Shapes("Mancopy"), 84, 29, 216, 453)
  Call PositionShape(Sheets("Manual").Shapes("Manquote"), 84, 29, 144, 950)
  Call PositionShape(Sheets("Manual").Shapes("Manhelp"), 84, 29, 50, 1552)
  
  'Filterbar needs to be showing to get shapes placed correctly
  Sheets("Manual Selector").Range("A2").RowHeight = 0
  Sheets("Manual Selector").Range("A3").RowHeight = 75
  Sheets("Manual Selector").Range("A4").RowHeight = 75
  Sheets("Manual Selector").Shapes("FilterBarToggle").TextFrame.Characters.Text = "Hide Filter Bar"
  
  Call PositionShape(Sheets("Manual Selector").Shapes("B1filter"), 133, 25, 115, 197)
  Call PositionShape(Sheets("Manual Selector").Shapes("B2filter"), 133, 25, 115, 326)
  Call PositionShape(Sheets("Manual Selector").Shapes("B3filter"), 133, 25, 115, 454)
  Call PositionShape(Sheets("Manual Selector").Shapes("B4filter"), 133, 25, 115, 584)
  Call PositionShape(Sheets("Manual Selector").Shapes("B5filter"), 133, 25, 115, 714)
  Call PositionShape(Sheets("Manual Selector").Shapes("FilterBarToggle"), 174, 29, 126, 199)
  Call PositionShape(Sheets("Manual Selector").Shapes("ManSelRowHeightToggle"), 174, 29, 72, 351)
  Call PositionShape(Sheets("Manual Selector").Shapes("Manselcustom"), 98, 58, 85, 844)
  Call PositionShape(Sheets("Manual Selector").Shapes("Manselclearselections"), 174, 29, 144, 29)
  Call PositionShape(Sheets("Manual Selector").Shapes("Manselreturn"), 174, 29, 232, 619)
  Call PositionShape(Sheets("Manual Selector").Shapes("Manselstart"), 174, 29, 144, 449)
  Call PositionShape(Sheets("Manual Selector").Shapes("Manselhelp"), 174, 29, 50, 878)
  Call PositionShape(Sheets("Manual Selector").Shapes("Manselclearfilters"), 98, 58, 70, 28)
  Call PositionShape(Sheets("Manual Selector").Shapes("ShowSelectedToggle"), 98, 58, 74, 110)
  Call PositionShape(Sheets("Manual Selector").Shapes("T1filter"), 98, 25, 115, 197)
  Call PositionShape(Sheets("Manual Selector").Shapes("T2filter"), 98, 25, 115, 326)
  Call PositionShape(Sheets("Manual Selector").Shapes("T3filter"), 98, 25, 115, 454)
  Call PositionShape(Sheets("Manual Selector").Shapes("T4filter"), 98, 25, 115, 584)
  Call PositionShape(Sheets("Manual Selector").Shapes("T5filter"), 98, 25, 115, 714)
  
  'Close Filterbar again
  Sheets("Manual Selector").Range("A2").RowHeight = 75
  Sheets("Manual Selector").Range("A3").RowHeight = 0
  Sheets("Manual Selector").Range("A4").RowHeight = 0
  Sheets("Manual Selector").Shapes("FilterBarToggle").TextFrame.Characters.Text = "Show Filter Bar"

  Call PositionShape(Sheets("Quote").Shapes("QuoteClear"), 124, 29, 130, 28)
  Call PositionShape(Sheets("Quote").Shapes("QuoteRenum"), 162, 29, 130, 28)
  Call PositionShape(Sheets("Quote").Shapes("QuoteCopytoDisc"), 124, 66, 72, 174)
  Call PositionShape(Sheets("Quote").Shapes("PricingSwitch"), 162, 29, 173, 263)
  Call PositionShape(Sheets("Quote").Shapes("QuoteExportXLS"), 124, 29, 173, 263)
  Call PositionShape(Sheets("Quote").Shapes("QuoteExportCSV"), 124, 66, 72, 452)
  Call PositionShape(Sheets("Quote").Shapes("QuoteGTStart"), 124, 29, 130, 541)
  Call PositionShape(Sheets("Quote").Shapes("QuoteViewDisclaimer"), 162, 29, 130, 541)
  Call PositionShape(Sheets("Quote").Shapes("QuoteRTInt"), 124, 29, 310, 780)
  Call PositionShape(Sheets("Quote").Shapes("SeparateButton"), 162, 29, 310, 780)
  Call PositionShape(Sheets("Quote").Shapes("AddSvcs2BoM"), 124, 66, 72, 687)
  Call PositionShape(Sheets("Quote").Shapes("QuoteHelp"), 124, 29, 79, 1114)
  Call PositionShape(Sheets("Quote").Shapes("QuoteShowExt"), 161, 29, 79, 1114)
  
  Call PositionShape(Sheets("Start").Shapes("InstructionsToggleButton"), 687, 29, 216, 26)
  Call PositionShape(Sheets("Start").Shapes("SettingsButton"), 687, 29, 216, 449)
  Call PositionShape(Sheets("Start").Shapes("ResizeControlButton"), 687, 29, 216, 866)
  Call PositionShape(Sheets("Start").Shapes("GoToM800Bbutton"), 206, 29, 216, 26)
  Call PositionShape(Sheets("Start").Shapes("GoToM1kBbutton"), 301, 29, 216, 26)
  Call PositionShape(Sheets("Start").Shapes("GoToM3Kbutton"), 393, 29, 216, 26)
  Call PositionShape(Sheets("Start").Shapes("GoToSBCsButton"), 486, 29, 216, 26)
  Call PositionShape(Sheets("Start").Shapes("GoToCB365button"), 201, 29, 216, 575)
  Call PositionShape(Sheets("Start").Shapes("GoToOVOCbutton"), 580, 29, 216, 26)
  Call PositionShape(Sheets("Start").Shapes("GoToServicesButton"), 493, 54, 126, 575)
  Call PositionShape(Sheets("Start").Shapes("GoToIPPhoneButton"), 402, 54, 126, 575)
  Call PositionShape(Sheets("Start").Shapes("GoToSmartTapButton"), 111, 29, 216, 575)
  Call PositionShape(Sheets("Start").Shapes("GoToVocaButton"), 304, 54, 126, 575)
  Call PositionShape(Sheets("Start").Shapes("ReturnToInterviewButton"), 918, 31, 366, 334)
  
  Call PositionShape(Sheets("Start").Shapes("StartM800Bpic"), 247, 31, 183, 43)
  Call PositionShape(Sheets("Start").Shapes("StartM1kBpic"), 333, 35, 183, 43)
  Call PositionShape(Sheets("Start").Shapes("StartM3Kpic"), 429, 47, 164, 52)
  Call PositionShape(Sheets("Start").Shapes("StartSBCsPic"), 527, 32, 183, 43)
  Call PositionShape(Sheets("Start").Shapes("StartCB365pic"), 238, 42, 183, 591)
  Call PositionShape(Sheets("Start").Shapes("StartOVOCpic"), 619, 43, 142, 63)
  Call PositionShape(Sheets("Start").Shapes("StartServicesPic"), 485, 62, 85, 706)
  Call PositionShape(Sheets("Start").Shapes("StartIPPhonePic"), 406, 53, 85, 706)
  Call PositionShape(Sheets("Start").Shapes("StartSmartTapPic"), 153, 31, 150, 602)
  Call PositionShape(Sheets("Start").Shapes("StartVocaPic"), 301, 61, 66, 716)
  Call PositionShape(Sheets("Start").Shapes("StartManualPic"), 586, 57, 67, 713)
  
  Call PositionShape(Sheets("Settings").Shapes("SettingsCurrencySwitch"), 90, 31, 191, 42)
  Call PositionShape(Sheets("Settings").Shapes("SettingsMultiYearSupportSwitch"), 235, 31, 191, 42)
  Call PositionShape(Sheets("Settings").Shapes("SettingsMultiYearDiscountSwitch"), 318, 65, 191, 42)
  Call PositionShape(Sheets("Settings").Shapes("SettingsStartButton"), 590, 31, 191, 42)

End Sub

Private Sub PositionAllShapesforPriceless()
  ' generated with listshapeinfo macro in module 7 and following:
  ' CONCATENATE("Call PositionShape(Sheets(#",G4, "#).Shapes(#", B4, "#), ", C4, ", ", D4, ", ", E4, ", ", F4, ")")
  Dim PandDpricing, Targets As String

  Call PositionShape(Sheets("CB 365").Shapes("CBreset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("CB 365").Shapes("CBsvcOffButton"), 84, 29, 144, 290)
  Call PositionShape(Sheets("CB 365").Shapes("CBdefault"), 84, 29, 216, 481)
  Call PositionShape(Sheets("CB 365").Shapes("CBstart"), 84, 29, 144, 743)
  Call PositionShape(Sheets("CB 365").Shapes("CBcopy"), 84, 29, 216, 933)
  Call PositionShape(Sheets("CB 365").Shapes("CBquote"), 84, 29, 144, 1196)
  Call PositionShape(Sheets("CB 365").Shapes("CBhelp"), 84, 29, 50, 1386)
  Call PositionShape(Sheets("CB 365").Shapes("CB365pic"), 158, 116, 150, 1296)
  
  Call PositionShape(Sheets("IP Phone").Shapes("IPPreset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("IP Phone").Shapes("IPPsvcOffButton"), 84, 29, 144, 290)
  Call PositionShape(Sheets("IP Phone").Shapes("IPPdefault"), 84, 29, 216, 481)
  Call PositionShape(Sheets("IP Phone").Shapes("IPPstart"), 84, 29, 144, 743)
  Call PositionShape(Sheets("IP Phone").Shapes("IPPcopy"), 84, 29, 216, 933)
  Call PositionShape(Sheets("IP Phone").Shapes("IPPquote"), 84, 29, 144, 1196)
  Call PositionShape(Sheets("IP Phone").Shapes("IPPhelp"), 84, 29, 50, 1386)
  Call PositionShape(Sheets("IP Phone").Shapes("IPPhonepic"), 172, 89, 159, 1226)
  
  Call PositionShape(Sheets("M1KB").Shapes("m1reset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("M1KB").Shapes("m1svcOffButton"), 84, 29, 144, 290)
  Call PositionShape(Sheets("M1KB").Shapes("m1default"), 84, 29, 216, 481)
  Call PositionShape(Sheets("M1KB").Shapes("m1start"), 84, 29, 144, 743)
  Call PositionShape(Sheets("M1KB").Shapes("m1copy"), 84, 29, 216, 933)
  Call PositionShape(Sheets("M1KB").Shapes("m1quote"), 84, 29, 144, 1196)
  Call PositionShape(Sheets("M1KB").Shapes("m1help"), 84, 29, 50, 1386)
  Call PositionShape(Sheets("M1KB").Shapes("M1KBpic"), 186, 66, 352, 1102)
  
  Call PositionShape(Sheets("M3K").Shapes("m3reset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("M3K").Shapes("m3svcOffButton"), 84, 29, 144, 290)
  Call PositionShape(Sheets("M3K").Shapes("m3default"), 84, 29, 216, 481)
  Call PositionShape(Sheets("M3K").Shapes("m3start"), 84, 29, 144, 743)
  Call PositionShape(Sheets("M3K").Shapes("m3copy"), 84, 29, 216, 933)
  Call PositionShape(Sheets("M3K").Shapes("m3quote"), 84, 29, 144, 1196)
  Call PositionShape(Sheets("M3K").Shapes("m3help"), 84, 29, 50, 1386)
  Call PositionShape(Sheets("M3K").Shapes("M3Kpic"), 163, 79, 271, 1169)
  
  Call PositionShape(Sheets("M800B").Shapes("m8reset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("M800B").Shapes("m8svcOffButton"), 84, 29, 144, 290)
  Call PositionShape(Sheets("M800B").Shapes("m8default"), 84, 29, 216, 481)
  Call PositionShape(Sheets("M800B").Shapes("m8start"), 84, 29, 144, 743)
  Call PositionShape(Sheets("M800B").Shapes("m8copy"), 84, 29, 216, 933)
  Call PositionShape(Sheets("M800B").Shapes("m8quote"), 84, 29, 144, 1196)
  Call PositionShape(Sheets("M800B").Shapes("m8help"), 84, 29, 50, 1386)
  Call PositionShape(Sheets("M800B").Shapes("M800Bpic"), 189, 56, 330, 1111)
  
  Call PositionShape(Sheets("Manual").Shapes("Manreset"), 84, 29, 158, 28)
  Call PositionShape(Sheets("Manual").Shapes("MansvcOffButton"), 84, 29, 144, 203)
  Call PositionShape(Sheets("Manual").Shapes("Mandefault"), 84, 29, 216, 364)
  Call PositionShape(Sheets("Manual").Shapes("Manstart"), 84, 29, 144, 597)
  Call PositionShape(Sheets("Manual").Shapes("Mantosel"), 84, 29, 216, 758)
  Call PositionShape(Sheets("Manual").Shapes("Mancopy"), 84, 29, 216, 991)
  Call PositionShape(Sheets("Manual").Shapes("Manquote"), 84, 29, 144, 1224)
  Call PositionShape(Sheets("Manual").Shapes("Manhelp"), 84, 29, 50, 1386)
  Call PositionShape(Sheets("Manual").Shapes("Manualpic"), 163, 103, 154, 1285)
  
  Call PositionShape(Sheets("OVOC").Shapes("mGreset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("OVOC").Shapes("mGsvcOffButton"), 84, 29, 144, 290)
  Call PositionShape(Sheets("OVOC").Shapes("mGdefault"), 84, 29, 216, 481)
  Call PositionShape(Sheets("OVOC").Shapes("mGstart"), 84, 29, 144, 743)
  Call PositionShape(Sheets("OVOC").Shapes("mGcopy"), 84, 29, 216, 933)
  Call PositionShape(Sheets("OVOC").Shapes("mGquote"), 84, 29, 144, 1196)
  Call PositionShape(Sheets("OVOC").Shapes("mGhelp"), 84, 29, 50, 1386)
  
  Call PositionShape(Sheets("Quote").Shapes("QuoteClear"), 108, 29, 130, 18)
  Call PositionShape(Sheets("Quote").Shapes("QuoteRenum"), 146, 29, 130, 18)
  Call PositionShape(Sheets("Quote").Shapes("QuoteExportXLS"), 108, 29, 173, 177)
  Call PositionShape(Sheets("Quote").Shapes("QuoteGTStart"), 108, 29, 115, 380)
  Call PositionShape(Sheets("Quote").Shapes("QuoteViewDisclaimer"), 146, 29, 115, 380)
  Call PositionShape(Sheets("Quote").Shapes("QuoteRTInt"), 108, 29, 247, 625)
  Call PositionShape(Sheets("Quote").Shapes("QuoteHelp"), 108, 66, 62, 890)
  
  Call PositionShape(Sheets("SBCs").Shapes("m0reset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("SBCs").Shapes("m0svcOffButton"), 84, 29, 144, 290)
  Call PositionShape(Sheets("SBCs").Shapes("m0default"), 84, 29, 216, 481)
  Call PositionShape(Sheets("SBCs").Shapes("m0start"), 84, 29, 144, 743)
  Call PositionShape(Sheets("SBCs").Shapes("m0copy"), 84, 29, 216, 933)
  Call PositionShape(Sheets("SBCs").Shapes("m0quote"), 84, 29, 144, 1196)
  Call PositionShape(Sheets("SBCs").Shapes("m0help"), 84, 29, 50, 1386)
  Call PositionShape(Sheets("SBCs").Shapes("SBCspic"), 179, 59, 335, 1100)
  
  Call PositionShape(Sheets("Services").Shapes("PSreset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("Services").Shapes("PSdefault"), 84, 29, 216, 481)
  Call PositionShape(Sheets("Services").Shapes("PSstart"), 84, 29, 144, 743)
  Call PositionShape(Sheets("Services").Shapes("PScopy"), 84, 29, 216, 933)
  Call PositionShape(Sheets("Services").Shapes("PSquote"), 84, 29, 144, 1196)
  Call PositionShape(Sheets("Services").Shapes("PShelp"), 84, 29, 50, 1386)
  
  
  Call PositionShape(Sheets("SmartTap").Shapes("STreset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("SmartTap").Shapes("StsvcOffButton"), 84, 29, 144, 290)
  Call PositionShape(Sheets("SmartTap").Shapes("STdefault"), 84, 29, 216, 481)
  Call PositionShape(Sheets("SmartTap").Shapes("STstart"), 84, 29, 144, 743)
  Call PositionShape(Sheets("SmartTap").Shapes("STcopy"), 84, 29, 216, 933)
  Call PositionShape(Sheets("SmartTap").Shapes("STquote"), 84, 29, 144, 1196)
  Call PositionShape(Sheets("SmartTap").Shapes("SThelp"), 84, 29, 50, 1386)
  Call PositionShape(Sheets("SmartTap").Shapes("STpic1"), 186, 59, 287, 861)
  Call PositionShape(Sheets("SmartTap").Shapes("STtb1"), 195, 42, 48, 1165)
  Call PositionShape(Sheets("SmartTap").Shapes("STpic2"), 172, 84, 183, 1250)
    
  Call PositionShape(Sheets("Voca").Shapes("VocaReset"), 84, 29, 216, 28)
  Call PositionShape(Sheets("Voca").Shapes("VocaSvcOffButton"), 84, 29, 144, 290)
  Call PositionShape(Sheets("Voca").Shapes("VocaDefault"), 84, 29, 216, 481)
  Call PositionShape(Sheets("Voca").Shapes("VocaStart"), 84, 29, 144, 743)
  Call PositionShape(Sheets("Voca").Shapes("VocaCopy"), 84, 29, 216, 933)
  Call PositionShape(Sheets("Voca").Shapes("VocaQuote"), 84, 29, 144, 1196)
  Call PositionShape(Sheets("Voca").Shapes("VocaHelp"), 84, 29, 50, 1386)
  Call PositionShape(Sheets("Voca").Shapes("VocaPic"), 158, 111, 119, 1464)
    
End Sub

Private Sub StdSizeOneActiveXControl(SheetName As String, ShapeName As String, CellName As String)
  With Sheets(SheetName)
    .Shapes(ShapeName).top = .Range(CellName).top
    .Shapes(ShapeName).left = .Cells(.Range(CellName).Row, .Range(CellName).Column + 2).left
    .Shapes(ShapeName).width = .Cells(.Range(CellName).Row, .Range(CellName).Column + 2).width
    .Shapes(ShapeName).height = .Cells(.Range(CellName).Row, .Range(CellName).Column + 2).height
  End With
End Sub

Private Sub WideSizeOneActiveXControl(SheetName As String, ShapeName As String, CellName As String, ControlWidth As Integer)
  'Use Std assignments if supplied control numbers are 0
  With Sheets(SheetName)
    .Shapes(ShapeName).top = .Range(CellName).top
    .Shapes(ShapeName).height = .Cells(.Range(CellName).Row, .Range(CellName).Column + 2).height
    
    If ControlWidth = 0 Then
      .Shapes(ShapeName).width = .Cells(.Range(CellName).Row, .Range(CellName).Column + 2).width
      .Shapes(ShapeName).left = .Cells(.Range(CellName).Row, .Range(CellName).Column + 2).left
    Else
      .Shapes(ShapeName).width = ControlWidth
      .Shapes(ShapeName).left = .Cells(.Range(CellName).Row, .Range(CellName).Column + 2).left _
                                + .Cells(.Range(CellName).Row, .Range(CellName).Column + 2).width - ControlWidth
    End If
  End With
End Sub

Private Sub CustSizeOneActiveXControl(SheetName As String, ShapeName As String, _
                                      ControlWidth As Integer, ControlLeft As Integer, ControlTop As Integer, ControlHeight As Integer)
  With Sheets(SheetName)
    .Shapes(ShapeName).width = ControlWidth
    .Shapes(ShapeName).left = ControlLeft
    .Shapes(ShapeName).top = ControlTop
    .Shapes(ShapeName).height = ControlHeight
  End With
End Sub

Sub SizeActiveXControls()
  Application.ScreenUpdating = False
  'v42 commented out Planning and Design Active-x Controls associated with move to quote recommendations

  Call CustSizeOneActiveXControl("Settings", "CBXsettingsPricingType", 190, 40, 162, 40)
  
  With Sheets("M800B")
    .Activate
    Call StdSizeOneActiveXControl("M800B", "CBXm8lync", "m8lync")
    Call StdSizeOneActiveXControl("M800B", "CBXm8sba", "m8sba")
    Call StdSizeOneActiveXControl("M800B", "CBXm8fxs", "m8fxs")
    Call StdSizeOneActiveXControl("M800B", "CBXm8fxo", "m8fxo")
    Call StdSizeOneActiveXControl("M800B", "CBXm8bri", "m8bri")
    Call StdSizeOneActiveXControl("M800B", "CBXm8spans", "m8spans")
    Call StdSizeOneActiveXControl("M800B", "CBXm8type", "m8type")
    Call StdSizeOneActiveXControl("M800B", "CBXm8ha", "m8ha")
    Call StdSizeOneActiveXControl("M800B", "CBXm8ps2", "m8ps2")
    Call StdSizeOneActiveXControl("M800B", "CBXm8LicenseType", "m8LicenseType")
    Call StdSizeOneActiveXControl("M800B", "CBXm8rProxy", "m8rProxy")
    Call StdSizeOneActiveXControl("M800B", "CBXm8elin", "m8elin")
    Call StdSizeOneActiveXControl("M800B", "CBXm8emsC", "m8emsC")
    Call StdSizeOneActiveXControl("M800B", "CBXm8mgdSvcs", "m8mgdSvcs")
    Call StdSizeOneActiveXControl("M800B", "CBXm8impl", "m8impl")
    Call StdSizeOneActiveXControl("M800B", "CBXm8cut", "m8cut")
    Call WideSizeOneActiveXControl("M800B", "CBXm8sup", "m8sup", 125)
    Call WideSizeOneActiveXControl("M800B", "CBXm8hwRep", "m8hwRep", 147)
  End With
  
  With Sheets("M1KB")
      .Activate
    Call StdSizeOneActiveXControl("M1KB", "CBXm1pkg", "m1pkg")
    Call StdSizeOneActiveXControl("M1KB", "CBXm1dualP", "m1dualP")
    Call StdSizeOneActiveXControl("M1KB", "CBXm1pstn", "m1pstn")
    Call StdSizeOneActiveXControl("M1KB", "CBXm1spTyp", "m1spTyp")
    Call StdSizeOneActiveXControl("M1KB", "CBXm1fxs", "m1fxs")
    Call StdSizeOneActiveXControl("M1KB", "CBXm1fxo", "m1fxo")
    Call StdSizeOneActiveXControl("M1KB", "CBXm1bri", "m1bri")
    Call StdSizeOneActiveXControl("M1KB", "CBXm1sbc", "m1sbc")
    Call StdSizeOneActiveXControl("M1KB", "CBXm1licenseType", "m1licenseType")
    Call StdSizeOneActiveXControl("M1KB", "CBXm1rProxy", "m1rProxy")
    Call StdSizeOneActiveXControl("M1KB", "CBXm1lync", "m1lync")
    Call StdSizeOneActiveXControl("M1KB", "CBXm1sba", "m1sba")
    Call StdSizeOneActiveXControl("M1KB", "CBXm1elin", "m1elin")
    Call StdSizeOneActiveXControl("M1KB", "CBXm1emsC", "m1emsC")
    Call StdSizeOneActiveXControl("M1KB", "CBXm1mgdSvcs", "m1mgdSvcs")
    Call StdSizeOneActiveXControl("M1KB", "CBXm1impl", "m1impl")
    Call StdSizeOneActiveXControl("M1KB", "CBXm1cut", "m1cut")
    Call WideSizeOneActiveXControl("M1KB", "CBXm1sup", "m1sup", 125)
    Call WideSizeOneActiveXControl("M1KB", "CBXm1hwRep", "m1hwRep", 147)
  End With
  
  With Sheets("M3K")
    .Activate
    Call StdSizeOneActiveXControl("M3K", "CBXm3pstn", "m3pstn")
    Call StdSizeOneActiveXControl("M3K", "CBXm3sbc", "m3sbc")
    Call StdSizeOneActiveXControl("M3K", "CBXm3ha", "m3ha")
    Call StdSizeOneActiveXControl("M3K", "CBXm3pwr", "m3pwr")
    Call StdSizeOneActiveXControl("M3K", "CBXm3term", "m3term")
    Call StdSizeOneActiveXControl("M3K", "CBXm3fixed", "m3fixed")
    Call StdSizeOneActiveXControl("M3K", "CBXm3sPack", "m3sPack")
    Call StdSizeOneActiveXControl("M3K", "CBXm3lync", "m3lync")
    Call StdSizeOneActiveXControl("M3K", "CBXm3elin", "m3elin")
    Call StdSizeOneActiveXControl("M3K", "CBXm3emsC", "m3emsC")
    Call StdSizeOneActiveXControl("M3K", "CBXm3impl", "m3impl")
    Call StdSizeOneActiveXControl("M3K", "CBXm3com", "m3cut")
    Call WideSizeOneActiveXControl("M3K", "CBXm3sup", "m3sup", 125)
    Call WideSizeOneActiveXControl("M3K", "CBXm3hwRep", "m3hwRep", 147)
  End With
  
  With Sheets("SBCs")
    .Activate
    Call StdSizeOneActiveXControl("SBCs", "CBXm0type", "m0type")
    Call StdSizeOneActiveXControl("SBCs", "CBXm0vrt", "m0subType")
    Call StdSizeOneActiveXControl("SBCs", "CBXm0ha", "m0ha")
    Call WideSizeOneActiveXControl("SBCs", "CBXm0LicenseType", "m0LicenseType", 104)
    Call StdSizeOneActiveXControl("SBCs", "CBXm0srtp", "m0srtp")
    
    ' Custom because m0xcdFrom left is aligned with col B instead of E
    ' And is also aligned with m0xcdFrom's Top
    
    Call CustSizeOneActiveXControl("SBCs", "CBXm0xcdFrom", 160, _
                                  .Cells(.Range("m0xcdFrom").Row, .Range("m0xcdFrom").Column - 1).left _
                                                + .Cells(.Range("m0xcdFrom").Row, .Range("m0xcdFrom").Column - 1).width - 160, _
                                  .Range("m0xcdFrom").top, _
                                  .Range("m0xcdFrom").height)
    Call WideSizeOneActiveXControl("SBCs", "CBXm0xcdTo", "m0xcdFrom", 104)
    
    Call StdSizeOneActiveXControl("SBCs", "CBXm0rProxy", "m0rProxy")
    Call StdSizeOneActiveXControl("SBCs", "CBXm0lync", "m0lync")
    Call StdSizeOneActiveXControl("SBCs", "CBXm0elin", "m0elin")
    Call StdSizeOneActiveXControl("SBCs", "CBXm0emsC", "m0emsC")
    Call StdSizeOneActiveXControl("SBCs", "CBXm0mgdSvcs", "m0mgdSvcs")
    Call StdSizeOneActiveXControl("SBCs", "CBXm0impl", "m0impl")
    Call StdSizeOneActiveXControl("SBCs", "CBXm0com", "m0cut")
    Call WideSizeOneActiveXControl("SBCs", "CBXm0sup", "m0sup", 125)
    Call WideSizeOneActiveXControl("SBCs", "CBXm0hwRep", "m0hwRep", 147)
  End With
  
  With Sheets("CB 365")
    .Activate
    Call WideSizeOneActiveXControl("CB 365", "CBXcbApp", "CBapp", 125)
    Call WideSizeOneActiveXControl("CB 365", "CBXcbAppType", "CBappType", 147)
    Call StdSizeOneActiveXControl("CB 365", "CBXcbStdPlus", "M800BorC") ' chgd var name, but not combo box
    Call WideSizeOneActiveXControl("CB 365", "CBXcbPair", "CBpair", 125)
    Call StdSizeOneActiveXControl("CB 365", "CBXcbElin", "CBelin")
    Call StdSizeOneActiveXControl("CB 365", "CBXcbBkUp", "CBbkUp")
    Call StdSizeOneActiveXControl("CB 365", "CBXcbEmsC", "CBemsC")
    Call WideSizeOneActiveXControl("CB 365", "CBXcbImpl", "CBimpl", 181)
    Call StdSizeOneActiveXControl("CB 365", "CBXcbCom", "CBcut")
    Call WideSizeOneActiveXControl("CB 365", "CBXcbSup", "CBsup", 125)
    Call WideSizeOneActiveXControl("CB 365", "CBXcbHwRep", "CBhwRep", 147)
  End With
  
  With Sheets("OVOC")
    .Activate
    Call WideSizeOneActiveXControl("OVOC", "CBXmGems", "mGems", 125)
    Call StdSizeOneActiveXControl("OVOC", "CBXmGarmType", "mGarmType")
    Call WideSizeOneActiveXControl("OVOC", "CBXmGarmSBCs", "mGarmSBCs", 125)
    Call StdSizeOneActiveXControl("OVOC", "CBXmGpoolType", "mGpoolType")
    Call WideSizeOneActiveXControl("OVOC", "CBXmGsbaPro", "mGsbaPro", 125)
    Call WideSizeOneActiveXControl("OVOC", "CBXmGimpl", "mGimpl", 125)
    Call WideSizeOneActiveXControl("OVOC", "CBXmGsup", "mGsup", 125)
    Call WideSizeOneActiveXControl("OVOC", "CBXmGhwRep", "mGhwRep", 147)
  End With
  
  With Sheets("IP Phone")
    .Activate
    Call StdSizeOneActiveXControl("IP Phone", "CBXippApp", "IPPapp")
    Call StdSizeOneActiveXControl("IP Phone", "CBXippModel", "IPPmodel")
    Call StdSizeOneActiveXControl("IP Phone", "CBXippPwr", "IPPpwr")
    Call StdSizeOneActiveXControl("IP Phone", "CBXippBW", "IPPbw")
    Call StdSizeOneActiveXControl("IP Phone", "CBXippClr", "IPPclr")
    Call WideSizeOneActiveXControl("IP Phone", "CBXippSup", "IPPsup", 125)
    Call StdSizeOneActiveXControl("IP Phone", "CBXippHwRep", "IPPhwRep")
  End With
  
  With Sheets("SmartTap")
    .Activate
    Call StdSizeOneActiveXControl("SmartTap", "CBXSTupg", "STupg")
    Call StdSizeOneActiveXControl("SmartTap", "CBXSTann", "STann")
    Call StdSizeOneActiveXControl("SmartTap", "CBXSTha", "STha")
    Call StdSizeOneActiveXControl("SmartTap", "CBXSTha", "STha")
    Call StdSizeOneActiveXControl("SmartTap", "CBXSTcallDel", "STcallDel")
    Call StdSizeOneActiveXControl("SmartTap", "CBXSTccm", "STccm")
    Call WideSizeOneActiveXControl("SmartTap", "CBXSTsup", "STsup", 125)
    Call StdSizeOneActiveXControl("SmartTap", "CBXSTHwRep", "SThwRep")
  End With
  
  With Sheets("Voca")
    .Activate
    Call StdSizeOneActiveXControl("Voca", "CBXvocaLang", "VocaLang")
    Call WideSizeOneActiveXControl("Voca", "CBXvocaType", "VocaType", 200)
    Call StdSizeOneActiveXControl("Voca", "CBXvocaPlatformType", "VocaPlatformType")
    Call StdSizeOneActiveXControl("Voca", "CBXvocaMGWsbc", "VocaMGWsbc")
    Call StdSizeOneActiveXControl("Voca", "CBXvocaHA", "VocaHA")
    Call StdSizeOneActiveXControl("Voca", "CBXvocaImpl", "VocaImpl")
    Call StdSizeOneActiveXControl("Voca", "CBXVocaCut", "VocaCut")
    Call WideSizeOneActiveXControl("Voca", "CBXvocaSup", "VocaSup", 125)
    Call WideSizeOneActiveXControl("Voca", "CBXvocaHwRep", "VocaHwRep", 147)

  End With
  
  With Sheets("Services")
    .Activate
    Call WideSizeOneActiveXControl("Services", "CBXpsPlan", "PSplan", 147)
    Call StdSizeOneActiveXControl("Services", "CBXpsNvra", "PSnvra")
    Call StdSizeOneActiveXControl("Services", "CBXpsResEng", "PSresEng")
    Call StdSizeOneActiveXControl("Services", "CBXpsCut", "PScut")
    Call StdSizeOneActiveXControl("Services", "CBXpsChg", "PSchg")
    Call StdSizeOneActiveXControl("Services", "CBXpsZone", "PSzone")
    Call StdSizeOneActiveXControl("Services", "CBXpsSurv", "PSsurv")
    Call StdSizeOneActiveXControl("Services", "CBXpsTTVoIPfund", "PSttSBCfund")
    Call StdSizeOneActiveXControl("Services", "CBXpsTTsbcFund", "PSttVoIPfund")
    Call StdSizeOneActiveXControl("Services", "CBXpsTTsbcBasic", "PSttSBCbasic")
    Call StdSizeOneActiveXControl("Services", "CBXpsTTsbcInterwork", "PSttSBCinterwork")
    Call StdSizeOneActiveXControl("Services", "CBXpsTTsbcRoute", "PSttSBCroute")
    Call StdSizeOneActiveXControl("Services", "CBXpsTTsbcRecert", "PSttSBCrecert")
    Call StdSizeOneActiveXControl("Services", "CBXpsTTmgw", "PSttMGW")
    Call StdSizeOneActiveXControl("Services", "CBXpsTTmsbr", "PSttMSBR")
    Call StdSizeOneActiveXControl("Services", "CBXpsTTsem", "PSttSem")
    Call StdSizeOneActiveXControl("Services", "CBXpsTTarm", "PSttARM")
    Call StdSizeOneActiveXControl("Services", "CBXpsTTteams", "PSttTeams")
    Call StdSizeOneActiveXControl("Services", "CBXpsTTteamsRecert", "PSttTeamsRecert")
    Call StdSizeOneActiveXControl("Services", "CBXpsTTlyncBasic", "PSttLyncBasic")
    Call StdSizeOneActiveXControl("Services", "CBXpsTTmsft", "PSttMSFT")
    Call StdSizeOneActiveXControl("Services", "CBXpsTToneBox", "PSttOneBox")
    Call StdSizeOneActiveXControl("Services", "CBXpsTTcce", "PSttCCE")
    Call StdSizeOneActiveXControl("Services", "CBXpsTTSmartTap", "PSttSmartTap")
  End With
  
  With Sheets("Manual")
    .Activate
    Call StdSizeOneActiveXControl("Manual", "CBXmanSup", "ManSup")
    Call WideSizeOneActiveXControl("Manual", "CBXmanHwRep", "ManHwRep", 147)
    Call StdSizeOneActiveXControl("Manual", "CBXmanApnd", "ManApnd")
  End With
  
  With Sheets("Genesys")
    .Activate
    Call StdSizeOneActiveXControl("Genesys", "CBXgoemSBCtype", "GOEMsbcType")
    Call StdSizeOneActiveXControl("Genesys", "CBXgoemSRTP", "GOEMsrtp")
    
    ' Custom because m0xcdFrom left is aligned with col B instead of E
    ' And is also aligned with m0xcdTo's Top
    
    Call CustSizeOneActiveXControl("Genesys", "CBXgoemXCDfrom", 160, _
                                  .Cells(.Range("GOEMxcdFrom").Row, .Range("GOEMxcdFrom").Column - 1).left _
                                                + .Cells(.Range("GOEMxcdFrom").Row, .Range("GOEMxcdFrom").Column - 1).width - 160, _
                                  .Range("GOEMxcdFrom").top, _
                                  .Range("GOEMxcdFrom").height)
    Call WideSizeOneActiveXControl("Genesys", "CBXgoemXCDto", "GOEMxcdFrom", 104)

    Call StdSizeOneActiveXControl("Genesys", "CBXgoemHA", "GOEMha")
    Call StdSizeOneActiveXControl("Genesys", "CBXgoemIPPType", "GOEMippType")
    Call StdSizeOneActiveXControl("Genesys", "CBXgoemIPPloc", "GOEMIppLoc")
    Call StdSizeOneActiveXControl("Genesys", "CBXgoemM1K", "GOEMm1k")
    Call StdSizeOneActiveXControl("Genesys", "CBXgoemm1kLoc", "GOEMm1kLoc")
    Call StdSizeOneActiveXControl("Genesys", "CBXgoemM3K", "GOEMm3k")
    Call StdSizeOneActiveXControl("Genesys", "CBXgoemCom", "GOEMcut")
    Call StdSizeOneActiveXControl("Genesys", "CBXgoemCcm", "GOEMccm")
    Call WideSizeOneActiveXControl("Genesys", "CBXgoemShip", "GOEMship", 104)
  End With
  
  Application.Run "GoToStart"
  
  Application.ScreenUpdating = True

End Sub


Attribute VB_Name = "Module6"
'Module6 - Tool Conversion Macros
' - Private ChampstoAUDC
' - Private AddChamps
' - Private SEtoAUDC
' - Private DeleteSheetNames
' - Private SEtoGenesys
' - Private ConvertDiscTool
' - Private ReSizeShape
' - Private ReColorShape - Not Used
' - Private FormatButtons - Not Used
'



Private Sub AUDCtoPriceless()
  Application.ScreenUpdating = False
  
  'start with new workbook, avoid corrupting the base
   Application.DisplayAlerts = False
   ThisWorkbook.SaveAs filename:=ThisWorkbook.Path & "\" & Replace(ThisWorkbook.Name, "AudioCodes Ordering Wizard", "Priceless Ordering Wizard"), FileFormat:=xlOpenXMLWorkbookMacroEnabled, ConflictResolution:=xlLocalSessionChanges
   Application.DisplayAlerts = True
   
  Sheets("Scratch").Range("WizardType").Value = "Priceless"
  
  ActiveWorkbook.Unprotect Password:="acadmin"
  DeleteSheetNames ("DiscTool")
    
  'prevent divide by zero
  Sheets("Scratch").Range("STrecTransitions").Copy
  Sheets("Scratch").Range("STrecTransitions").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
  Sheets("Scratch").Range("STuserTransitions").Copy
  Sheets("Scratch").Range("STuserTransitions").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
  Sheets("Scratch").Range("PSProjMgmtRate").Copy
  Sheets("Scratch").Range("PSProjMgmtRate").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
  
  Sheets("Scratch").Range("GenSesTable").Copy
  Sheets("Scratch").Range("GenSesTable").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
  Sheets("Scratch").Range("GenRegTable").Copy
  Sheets("Scratch").Range("GenRegTable").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
  Sheets("Scratch").Range("GenTransTable").Copy
  Sheets("Scratch").Range("GenTransTable").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
  Sheets("Scratch").Range("GenWebRtcTable").Copy
  Sheets("Scratch").Range("GenWebRtcTable").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
  Sheets("Scratch").Range("GenSipRecTable").Copy
  Sheets("Scratch").Range("GenSipRecTable").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
  
  Sheets("Scratch").Range("CBuserTable").Copy
  Sheets("Scratch").Range("CBuserTable").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
  Sheets("Scratch").Range("GenCBSesTable").Copy
  Sheets("Scratch").Range("GenCBSesTable").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
  
  Sheets("Scratch").Range("CBpoolUserTable").Copy
  Sheets("Scratch").Range("CBpoolUserTable").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
  Sheets("Scratch").Range("UMPpoolUserTable").Copy
  Sheets("Scratch").Range("UMPpoolUserTable").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
  
  
  'currency no longer relevant
  Sheets("Settings").Shapes("SettingsCurrencySwitch").Delete
  Sheets("Settings").Range("D5").Value = "Pricing Not Included in this PriceBook"
  Sheets("Settings").Range("D5").VerticalAlignment = xlCenter

  'buttons that no longer apply, tidy up
  Sheets("Quote").Shapes("QuoteCopytoDisc").Delete
  Sheets("Quote").Shapes("PricingSwitch").Delete
  Sheets("Quote").Shapes("SeparateButton").Delete
  Sheets("Quote").Shapes("QuoteShowExt").Delete
  Sheets("Quote").Shapes("AddSvcs2BoM").Delete
  Sheets("Quote").Cells(2, 2).MergeArea.RowHeight = 85
  Sheets("Quote").Cells(2, 2).MergeArea.Font.Size = 12
  Sheets("Quote").Cells(2, 10).MergeArea.Font.Size = 16
  Sheets("Quote").Cells(6, 6).MergeArea.WrapText = True
  
  'pictures don't fit in reduced area
  Sheets("OVOC").Shapes("OVOCpic").Delete
  Sheets("Services").Shapes("Servicespic").Delete
  
  'hide pricing columns
  Sheets("Quote").Columns("E").ColumnWidth = 0
  Sheets("Quote").Columns("H").ColumnWidth = 0
  Sheets("Quote").Columns("L").ColumnWidth = 0
  Sheets("Quote").Columns("O").ColumnWidth = 0
  Sheets("M800B").Columns("L").ColumnWidth = 0
  Sheets("M800B").Columns("O").ColumnWidth = 0
  Sheets("M1KB").Columns("L").ColumnWidth = 0
  Sheets("M1KB").Columns("O").ColumnWidth = 0
  Sheets("M3K").Columns("L").ColumnWidth = 0
  Sheets("M3K").Columns("O").ColumnWidth = 0
  Sheets("SBCs").Columns("L").ColumnWidth = 0
  Sheets("SBCs").Columns("O").ColumnWidth = 0
  Sheets("CB 365").Columns("L").ColumnWidth = 0
  Sheets("CB 365").Columns("O").ColumnWidth = 0
  Sheets("OVOC").Columns("L").ColumnWidth = 0
  Sheets("OVOC").Columns("O").ColumnWidth = 0
  Sheets("IP Phone").Columns("L").ColumnWidth = 0
  Sheets("IP Phone").Columns("O").ColumnWidth = 0
  Sheets("SmartTap").Columns("L").ColumnWidth = 0
  Sheets("SmartTap").Columns("O").ColumnWidth = 0
  Sheets("Services").Columns("L").ColumnWidth = 0
  Sheets("Services").Columns("O").ColumnWidth = 0
  Sheets("Manual").Columns("L").ColumnWidth = 0
  Sheets("Manual").Columns("O").ColumnWidth = 0
  
  'reposition the command bar buttons
  Application.Run "Module5.PositionAllShapesforPriceless"
   
  'erase the pricing
  Sheets("PriceBook").Range("AG5:AH3005").ClearContents
  Sheets("PriceBook").Range("AK5:AL3005").ClearContents
  Sheets("PriceBook").Range("AN5:AO3005").ClearContents
  Sheets("PriceBook").Range("AQ5:AR3005").ClearContents
  Sheets("PriceBook").Range("AT5:AU3005").ClearContents
  Sheets("PriceBook").Range("AW5:AX3005").ClearContents
  Sheets("PriceBook").Range("AZ5:BA3005").ClearContents
  Sheets("PriceBook").Range("BC5:BD3005").ClearContents
  
  Sheets("ACM").Range("J4:J1500").ClearContents
  Sheets("ACM").Range("L4:L1500").ClearContents
  Sheets("ACM").Range("N4:N1500").ClearContents
  Sheets("ACM").Range("P4:P1500").ClearContents
  
  'make blank, too hard to collapse the column - content in the header
  Sheets("Manual Selector").Range("K7:K3006").ClearContents
  
  ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:=acadmin
  Application.ScreenUpdating = True
End Sub
Private Sub ChampsToAUDC()
   Application.ScreenUpdating = False
   Sheets("Scratch").Range("WizardType").Value = "AudioCodes"
   Sheets("M800B").CBXm8sup.ListFillRange = Replace(Sheets("M800B").CBXm8sup.ListFillRange, "m8chmpRNG", "m8supRNG")
   Sheets("M1KB").CBXm1sup.ListFillRange = Replace(Sheets("M1KB").CBXm1sup.ListFillRange, "m1chmpRNG", "m1supRNG")
   Sheets("M3K").CBXm3sup.ListFillRange = Replace(Sheets("M3K").CBXm3sup.ListFillRange, "m3chmpRNG", "m3supRNG")
   Sheets("SBCs").CBXm0sup.ListFillRange = Replace(Sheets("SBCs").CBXm0sup.ListFillRange, "m0chmpRNG", "m0supRNG")
   Sheets("CB 365").CBXcbSup.ListFillRange = Replace(Sheets("CB 365").CBXcbSup.ListFillRange, "CBchmpRNG", "CBsupRNG")
   Sheets("OVOC").CBXmGsup.ListFillRange = Replace(Sheets("OVOC").CBXmGsup.ListFillRange, "mGchmpRNG", "mGsupRNG")
   Sheets("IP Phone").CBXippSup.ListFillRange = Replace(Sheets("IP Phone").CBXippSup.ListFillRange, "IPPchmpRNG", "IPPsupRNG")
   Sheets("Manual").CBXmanSup.ListFillRange = Replace(Sheets("Manual").CBXmanSup.ListFillRange, "ManChmpRNG", "ManSupRNG")
   Sheets("SmartTap").CBXSTsup.ListFillRange = Replace(Sheets("SmartTap").CBXSTsup.ListFillRange, "STchmpRNG", "STsupRNG")
   
   Application.DisplayAlerts = False
   ThisWorkbook.SaveAs filename:=ThisWorkbook.Path & "\" & Replace(ThisWorkbook.Name, "CHAMPS Ordering Wizard", "AudioCodes Ordering Wizard"), FileFormat:=xlOpenXMLWorkbookMacroEnabled, ConflictResolution:=xlLocalSessionChanges
   Application.DisplayAlerts = True
   
   Application.ScreenUpdating = True
End Sub

Private Sub AddChamps()
   Application.ScreenUpdating = False
   Sheets("Scratch").Range("WizardType").Value = "CHAMPS"
   Sheets("M800B").CBXm8sup.ListFillRange = Replace(Sheets("M800B").CBXm8sup.ListFillRange, "m8supRNG", "m8chmpRNG")
   Sheets("M1KB").CBXm1sup.ListFillRange = Replace(Sheets("M1KB").CBXm1sup.ListFillRange, "m1supRNG", "m1chmpRNG")
   Sheets("M3K").CBXm3sup.ListFillRange = Replace(Sheets("M3K").CBXm3sup.ListFillRange, "m3supRNG", "m3chmpRNG")
   Sheets("SBCs").CBXm0sup.ListFillRange = Replace(Sheets("SBCs").CBXm0sup.ListFillRange, "m0supRNG", "m0chmpRNG")
   Sheets("CB 365").CBXcbSup.ListFillRange = Replace(Sheets("CB 365").CBXcbSup.ListFillRange, "CBsupRNG", "CBchmpRNG")
   Sheets("OVOC").CBXmGsup.ListFillRange = Replace(Sheets("OVOC").CBXmGsup.ListFillRange, "mGsupRNG", "mGchmpRNG")
   Sheets("IP Phone").CBXippSup.ListFillRange = Replace(Sheets("IP Phone").CBXippSup.ListFillRange, "IPPsupRNG", "IPPchmpRNG")
   Sheets("Manual").CBXmanSup.ListFillRange = Replace(Sheets("Manual").CBXmanSup.ListFillRange, "ManSupRNG", "ManChmpRNG")
   Sheets("SmartTap").CBXSTsup.ListFillRange = Replace(Sheets("SmartTap").CBXSTsup.ListFillRange, "STsupRNG", "STchmpRNG")
   Application.ScreenUpdating = True
End Sub


Private Sub SEtoAUDC()
   Dim NameInWB As Name
   
   Application.ScreenUpdating = False
   ActiveWorkbook.Unprotect Password:="acadmin"
   Application.DisplayAlerts = False
   
   'The filter creates an invalid name reference when searching through names deleting names on sheets to be deleted
   If Sheets("Manual Selector").FilterMode Then Sheets("Manual Selector").ShowAllData
   
   'Set Variables used in Wizard Name
   Sheets("Scratch").Range("WizardType").Value = "CHAMPS"
   Sheets("Quote").Range("D5:E5").ClearContents
   Sheets("DiscTool").Cells(9, 2).MergeArea.ClearContents
   Sheets("DiscTool").Cells(11, 2).MergeArea.ClearContents
   Sheets("DiscTool").Cells(7, 5).MergeArea.Copy
   Sheets("DiscTool").Cells(8, 5).MergeArea.PasteSpecial
   Sheets("DiscTool").Cells(8, 5).MergeArea.ClearContents
   
   DeleteSheetNames ("Genesys")
   Sheets("Genesys").Delete
   Sheets("CSVexport").Delete
   Sheets("ToDo").Delete
   Sheets("Quote").Activate
   Sheets("Quote").Shapes("QuoteExportCSV").Delete
   
   Call ConvertDiscTool(ActiveWorkbook.Sheets("DiscTool"), "AUDC")
   
   ThisWorkbook.SaveAs filename:=ThisWorkbook.Path & "\" & Replace(ThisWorkbook.Name, "SE Ordering Wizard", "CHAMPS Ordering Wizard"), FileFormat:=xlOpenXMLWorkbookMacroEnabled, ConflictResolution:=xlLocalSessionChanges
   
   Application.Run "GoToStart"
   ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:=acadmin
   Application.ScreenUpdating = True
   Application.DisplayAlerts = True
End Sub

Private Sub DeleteSheetNames(SheetToDelete As String)
   
  For Each NameInWB In ActiveWorkbook.Names
    If left(NameInWB.Name, 1) <> "_" And InStr(1, NameInWB.Name, "!") = 0 Then
      If NameInWB.RefersToRange.Worksheet.Name = Sheets(SheetToDelete).Name Then NameInWB.Delete
    End If
  Next NameInWB
   
End Sub

Private Sub SEtoGenesys()
  Dim GenesysTool As Workbook
  Dim NameToDelete As Name
  Dim LocalFill As FillFormat
  
  Application.ScreenUpdating = False
  Application.DisplayAlerts = False
  
  ThisWorkbook.SaveAs filename:=ThisWorkbook.Path & "\" & Replace(ThisWorkbook.Name, "SE Ordering Wizard", "Genesys Ordering Wizard"), FileFormat:=xlOpenXMLWorkbookMacroEnabled, ConflictResolution:=xlLocalSessionChanges
  Set GenesysTool = ThisWorkbook

  ActiveWorkbook.Unprotect Password:="acadmin"
  For Each ws In GenesysTool.Worksheets
    ws.Unprotect Password:="acadmin"
  Next ws
  
  ' Clear Cells in Scratch and delete non-relevant worksheets
  ' Leaves variable definitions, and also leaves Genesys section and the transcode tables it uses.
  With GenesysTool.Sheets("Scratch")
    .Range(.Cells(15, 4), .Cells(.Range("m4xcodeMax").Row - 23, 28)).Clear
    .Range(.Cells(.Range("m4xcodeMax").Row - 1, 4), .Cells(.Range("GOEMsesMax").Row - 3, 28)).Clear
    .Range(.Cells(.Range("GOEMxcd25").Row + 2, 4), .Cells(3000, 28)).Clear
  End With
  
  DeleteSheetNames ("Start")
  Sheets("Start").Delete
  
  DeleteSheetNames ("M800B")
  Sheets("M800B").Delete
  
  DeleteSheetNames ("M1KB")
  Sheets("M1KB").Delete
  
  DeleteSheetNames ("M3K")
  Sheets("M3K").Delete
   
  DeleteSheetNames ("SBCs")
  Sheets("SBCs").Delete
   
  DeleteSheetNames ("CB 365")
  Sheets("CB 365").Delete
   
  DeleteSheetNames ("OVOC")
  Sheets("OVOC").Delete
   
  DeleteSheetNames ("Services")
  Sheets("Services").Delete
   
  DeleteSheetNames ("IP Phone")
  Sheets("IP Phone").Delete
  
  DeleteSheetNames ("SmartTap")
  Sheets("SmartTap").Delete
   
  DeleteSheetNames ("Manual")
  Sheets("Manual").Delete
   
  DeleteSheetNames ("Manual Selector")
  Sheets("Manual Selector").Delete
   
  DeleteSheetNames ("CustFilters")
  Sheets("CustFilters").Delete
   
  DeleteSheetNames ("Detail")
  Sheets("Detail").Delete
   
  DeleteSheetNames ("PriceBook")
  Sheets("PriceBook").Delete
  
  Sheets("CSVexport").Delete
  Sheets("ToDo").Delete
  
  With GenesysTool.Sheets("Quote")
    .Activate
    .Shapes("QuoteExportCSV").Delete
    .Shapes("QuoteGTStart").Delete
    .Shapes("QuoteViewDisclaimer").Delete
    .Shapes("QuoteHelp").Delete
    .Shapes("QuoteRenum").Delete
    .Shapes("PricingSwitch").Delete
    
    Call ResizeShape(.Shapes("QuoteClear"), 125, 29, 144, 31)
    Call ResizeShape(.Shapes("QuoteExportXLS"), 125, 29, 180, 215)
    Call ResizeShape(.Shapes("QuoteRTInt"), 125, 29, 180, 435)
    Call ResizeShape(.Shapes("QuoteCopytoDisc"), 125, 29, 180, 656)
    Call ResizeShape(.Shapes("SeparateButton"), 125, 29, 324, 877)
    ' Change Button Label since only one interview
    .Shapes("QuoteRTInt").TextFrame.Characters.Text = "Return to Interview"
    
    .Rows(4).RowHeight = 50
    
    ' Delete disclaimer
    .Range("B3").Value = ""
    
  End With
  
  With GenesysTool.Sheets("Genesys")
    .Shapes("GOEMGTStart").Delete

    Call ResizeShape(.Shapes("GOEMresetToDefault"), 85, 29, 180, 72)
    Call ResizeShape(.Shapes("GOEMmakeSettingsDefault"), 85, 29, 230, 502)
    Call ResizeShape(.Shapes("GOEMcopyBoMtoQuote"), 85, 29, 216, 908)
    Call ResizeShape(.Shapes("GOEMGTQuote"), 85, 29, 216, 1321)
    
  End With
  
  Call ConvertDiscTool(GenesysTool.Sheets("DiscTool"), "Genesys")
  
  Sheets("Scratch").Visible = False
  Sheets("Genesys").Activate
  
  ThisWorkbook.Save
 
  Application.ScreenUpdating = True
  Application.DisplayAlerts = True

End Sub

Private Sub ConvertDiscTool(ByRef ws As Worksheet, ToWhat As String)
  With ws
    .Activate
    
    .Range("B2:J4").ClearContents
    .Range("M7:M8").ClearContents
    .Range("J13:J512").ClearContents
    
    .Range("D7").Copy
    .Range("D8").PasteSpecial
    .Range("D8").ClearContents
    .Range("AF2:AG5").Copy
    .Range("D9:E12").PasteSpecial
    .Range("B9:C12").Copy
    .Range("F9:G12").PasteSpecial
    .Range("H2:H4").Interior.Color = RGB(0, 51, 102)
    .Range("L7:M8").Interior.Color = RGB(0, 51, 102)
    
    .Range("L9").Value = "Discounted Price"
    .Range("AA9").Value = "Discounted Price"
    
    .Range("B2").Value = "Enter Quote-wide discounts for Product, Annual Services,"
    .Range("B3").Value = "   and Professional Services in Green below"
    .Range("B4").Value = ""
    .Range("J2").Value = "Enter Per Item discounts in Yellow Below"
    .Range("J3").Value = "   Discounts are Cumulative"
    .Range("J4").Value = ""
    .Rows(5).RowHeight = 50
    
    'Put Discount Calcs based on discounts in E7-E9 only
    .Range("AG13:AG512").Copy
    .Range("L13:L512").PasteSpecial Paste:=xlPasteFormulas
    
    .Range("AE7:AE512").ClearContents
    ActiveWorkbook.Names("disc10sku").Delete
    .Columns("AF:AJ").Delete
    .Columns("AB:AC").Delete
    '.Columns("U:W").Delete
    .Columns("O:T").Delete
    
    'Adjust Button placement on the command bar
    .Shapes("DiscToolExportCSV").Delete
    .Shapes("DiscToolPartnerDistiToggle").Delete
    
    'Only AUDC version has Go To Start which also drives different button positions
    'Not Start b/c Start sheet is deleted
    If ToWhat = "Genesys" Then
      .Shapes("DiscToolGTStart").Delete
      
      Call ResizeShape(.Shapes("DiscToolClearBom"), 84, 29, 116, 25)
      Call ResizeShape(.Shapes("DiscToolResetDisc"), 84, 29, 152, 248)
      Call ResizeShape(.Shapes("DiscToolExportXLS"), 84, 29, 230, 506)
      Call ResizeShape(.Shapes("DiscToolGTQuote"), 84, 29, 130, 906)
      Call ResizeShape(.Shapes("DiscToolhelp"), 84, 29, 50, 930)
      'Call ResizeShape(.Shapes("DiscToolTargetButton"), 84, 29, 116, 26)
      'Call ResizeShape(.Shapes("DiscToolCalcDiscToTarg"), 84, 29, 116, 26)
      'Call ResizeShape(.Shapes("DiscToolClearTarg"), 84, 29, 116, 26)
    Else
      'open calc target columns for shape placement
      .Columns("O:P").ColumnWidth = 15
      .Columns("Q").ColumnWidth = 2
      Call ResizeShape(.Shapes("DiscToolClearBom"), 84, 29, 116, 26)
      Call ResizeShape(.Shapes("DiscToolResetDisc"), 84, 29, 152, 225)
      Call ResizeShape(.Shapes("DiscToolGTStart"), 84, 29, 130, 460)
      Call ResizeShape(.Shapes("DiscToolGTQuote"), 84, 29, 130, 673)
      Call ResizeShape(.Shapes("DiscToolExportXLS"), 84, 29, 230, 1315)
      Call ResizeShape(.Shapes("DiscToolhelp"), 84, 29, 50, 1658)
      Call ResizeShape(.Shapes("DiscToolTargetButton"), 84, 29, 137, 886)
      Call ResizeShape(.Shapes("DiscToolCalcDiscToTarg"), 81, 36, 65, 1065)
      Call ResizeShape(.Shapes("DiscToolClearTarg"), 81, 36, 65, 1148)
      .Range("PriceTargetToggle").Value = "Hide"
      .Columns("O:Q").ColumnWidth = 0
      .Shapes("DiscToolTargetButton").TextFrame.Characters.Text = "Set Price Targets"
    End If

  End With

End Sub

Private Sub ResizeShape(shape As shape, top, height, width, left As Integer)
 shape.top = top
 shape.height = height
 shape.width = width
 shape.left = left
End Sub

Private Sub ReColorShape(ShapeSheet As String, ShapeToChange As String)
' not used
  With Sheets(ShapeSheet).Shapes(ShapeToChange)
    .Fill.Solid
    .Fill.ForeColor.RGB = RGB(118, 149, 53)
  End With
End Sub

Private Sub FormatButtons(shape As shape)
' Not Used
  shape.Fill.ForeColor.RGB = RGB(51, 204, 51)
  shape.Fill.Transparency = 0
  shape.Fill.Solid
  shape.Shadow.Type = msoShadow38
End Sub




Attribute VB_Name = "Module7"
'Module 7 - Special Projects

Private Sub CreateM3Kmap()
  Dim OutPutRow, E1spanNum, SessionNum, ColDiff As Integer
  Sheets("Sheet1").Cells(1, 2).Value = Format(Now, "mm/dd/yyyy H:mm:ss")

  Application.ScreenUpdating = False
  OutPutRow = 2
  For SessionNum = 1 To 1009
    Sheets("M3K").Range("e13").Value = SessionNum
    Sheets("Sheet1").Cells(OutPutRow, 2).Value = SessionNum - 1
    For E1spanNum = 1 To 16
      If OutPutRow = 2 Then
        Sheets("Sheet1").Cells(OutPutRow, 2 + E1spanNum) = E1spanNum
      Else
        Sheets("M3K").Range("e10").Value = E1spanNum
        Sheets("Sheet1").Cells(OutPutRow, 2 + E1spanNum) = Sheets("Scratch").Range("M3type")
      End If
    Next E1spanNum
    OutPutRow = OutPutRow + 1
  Next SessionNum
  
  Application.ScreenUpdating = True
  Sheets("Sheet1").Cells(1, 6).Value = Format(Now, "mm/dd/yyyy H:mm:ss")

End Sub
Private Sub ListNames()
   Set nms = ActiveWorkbook.Names
   Set wks = Sheets("sheet1")
   
   Application.ScreenUpdating = False
   Application.Calculation = xlCalculationManual
   Sheets("sheet1").Cells(1, 2) = ActiveWorkbook.Name
   For R = 1 To nms.count
      If left(nms(R).Name, 1) <> "_" And InStr(1, nms(R).Name, "!") = 0 Then
        wks.Cells(R + 1, 13).Value = nms(R).Name
        wks.Cells(R + 1, 14).Value = "'" & nms(R).RefersTo
        wks.Cells(R + 1, 15).Value = nms(R).RefersToRange.Worksheet.Name
      End If
   Next
   
   Application.Calculation = xlCalculationAutomatic
   Application.ScreenUpdating = True
End Sub

Private Sub MoveScratchNames()
  Dim ScratchNames As Names
  Dim CellName, NameRefersTo As String
  Dim count As Integer
  
  
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  
  Sheets("Scratch").Activiate
  Set ScratchNames = Sheets("Scratch").Names
  count = Sheets("Scratch").Names.count
  
'  For r = 1 To ScratchNames.Count
'    Sheets("Scratch").Activiate
'    CellName = ScratchNames(r).Name
'    NameRefersTo = Replace(ScratchNames(r).RefersTo, "Scratch", "Scratch2")
'    ScratchNames(r).Delete
'    Sheets("Scratch2").Activate
'    Sheets("Scratch2").Names.Add Name:=CellName, RefersTo:=NameRefersTo
'   Next
  
End Sub

Private Sub ListShapeInfo()
Application.ScreenUpdating = False
Dim Row As Integer
    Row = 2
    Sheets("Sheet1").Cells(Row, 2) = "ShapeName"
    Sheets("Sheet1").Cells(Row, 3) = "top"
    Sheets("Sheet1").Cells(Row, 4) = "height"
    Sheets("Sheet1").Cells(Row, 5) = "width"
    Sheets("Sheet1").Cells(Row, 6) = "left"
    Sheets("Sheet1").Cells(Row, 7) = "WrkShtName"
Row = 4
For Each ws In ThisWorkbook.Worksheets
  For Each shape In ws.Shapes
    Sheets("Sheet1").Cells(Row, 2) = shape.Name
    Sheets("Sheet1").Cells(Row, 3) = shape.top
    Sheets("Sheet1").Cells(Row, 4) = shape.height
    Sheets("Sheet1").Cells(Row, 5) = shape.width
    Sheets("Sheet1").Cells(Row, 6) = shape.left
    Sheets("Sheet1").Cells(Row, 7) = ws.Name
    Row = Row + 1
  Next shape
Next ws
Application.ScreenUpdating = True
End Sub

Private Sub ListSheetShapeInfo()
Application.ScreenUpdating = False
Dim Row As Integer
    Row = 2
    Sheets("Sheet1").Cells(Row, 2) = "ShapeName"
    Sheets("Sheet1").Cells(Row, 3) = "top"
    Sheets("Sheet1").Cells(Row, 4) = "height"
    Sheets("Sheet1").Cells(Row, 5) = "width"
    Sheets("Sheet1").Cells(Row, 6) = "left"
    Sheets("Sheet1").Cells(Row, 7) = "WrkShtName"
Row = 4

  For Each shape In Sheets("Settings").Shapes
    Sheets("Sheet1").Cells(Row, 2) = shape.Name
    Sheets("Sheet1").Cells(Row, 3) = shape.top
    Sheets("Sheet1").Cells(Row, 4) = shape.height
    Sheets("Sheet1").Cells(Row, 5) = shape.width
    Sheets("Sheet1").Cells(Row, 6) = shape.left
    Row = Row + 1
  Next shape
Application.ScreenUpdating = True
End Sub

Private Sub HideArrows()
'hides all arrows except column 2
Dim c As Range
Dim i As Integer
i = Cells(1, 1).End(xlToRight).Column
Application.ScreenUpdating = False

For Each c In Range(Cells(1, 1), Cells(1, i))
 If c.Column <> 2 Then
  c.AutoFilter Field:=c.Column, _
    Visibledropdown:=False
 End If
Next

Application.ScreenUpdating = True
End Sub

Private Sub CountVisRows()
'by Tom Ogilvy
Dim rng As Range
Set rng = ActiveSheet.AutoFilter.Range

MsgBox rng.Columns(1). _
   SpecialCells(xlCellTypeVisible).count - 1 _
   & " of " & rng _
   .Rows.count - 1 & " Records"

End Sub

Attribute VB_Name = "Module8"
Sub functest()
 Dim teststring As String
 teststring = M800BorCFunc("Info")
End Sub


Function M800BorCFunc(ReturnWhat As String) As String
Application.Volatile
  Dim LclM800BorCFunc As String
  Dim CBapp, CBappType As String
  Dim CB365x, CBcce, CBxum, CBump, CBopch As String
  Dim CBpro, CBent, CB4span, CB2span, CB1span, CB8fxo, CB8bri, CBsbc30 As String
  Dim CCEsvr, CCE4span, CCE2span, CCE1span, CCE8fxo, CCE8bri, CCEsbc30 As String
  Dim XUMconn, XUM4span, XUM2span, XUM1span, XUM8fxo, XUM8bri, XUMsbc30 As String
  Dim M800BorC, M800B, M800C As String
  Dim Status, Info As String
  
  CBapp = Sheets("CB 365").Range("CBapp").Value
  CBappType = Sheets("CB 365").Range("CBappType").Value
 
  M800BorC = Sheets("CB 365").Range("M800BorC").Value
  M800B = Sheets("Scratch").Range("M800B").Value
  M800C = Sheets("Scratch").Range("M800C").Value
 
  CB365x = Sheets("Scratch").Range("CB365x").Value
  CBcce = Sheets("Scratch").Range("CBcce").Value
  CBxum = Sheets("Scratch").Range("CBxum").Value
  CBump = Sheets("Scratch").Range("CBump").Value
  CBopch = Sheets("Scratch").Range("CBopch").Value
  
  CBpro = Sheets("Scratch").Range("CBpro").Value
  CBent = Sheets("Scratch").Range("CBent").Value
  CB4span = Sheets("Scratch").Range("CB4span").Value
  CB2span = Sheets("Scratch").Range("CB2span").Value
  CB1span = Sheets("Scratch").Range("CB1span").Value
  CB8fxo = Sheets("Scratch").Range("CB8fxo").Value
  CB8bri = Sheets("Scratch").Range("CB8bri").Value
  CBsbc30 = Sheets("Scratch").Range("CBsbc30").Value
  
  CCEsvr = Sheets("Scratch").Range("CCEsvr").Value
  CCE4span = Sheets("Scratch").Range("CCE4span").Value
  CCE2span = Sheets("Scratch").Range("CCE2span").Value
  CCE1span = Sheets("Scratch").Range("CCE1span").Value
  CCE8fxo = Sheets("Scratch").Range("CCE8fxo").Value
  CCE8bri = Sheets("Scratch").Range("CCE8bri").Value
  CCEsbc30 = Sheets("Scratch").Range("CCEsbc30").Value
  
  XUMconn = Sheets("Scratch").Range("XUMconn").Value
  XUM4span = Sheets("Scratch").Range("XUM4span").Value
  XUM2span = Sheets("Scratch").Range("XUM2span").Value
  XUM1span = Sheets("Scratch").Range("XUM1span").Value
  XUM8fxo = Sheets("Scratch").Range("XUM8fxo").Value
  XUM8bri = Sheets("Scratch").Range("XUM8bri").Value
  XUMsbc30 = Sheets("Scratch").Range("XUMsbc30").Value
  
  Status = "NotSet"
  Info = "NotSet"
  
  If CBapp = CB365x Or CBapp = CBopch Then
    If CBappType = CBpro Or CBappType = CBent Then
      Status = "Not Applicable"
      Info = "Applies only to M800 CloudBond configurations"
    End If
  
    If CBappType = CB4span Then
      Status = "Not Applicable"
      Info = "4 Span configuration is available only on the M800C"
    End If ' CB4span
   
    If (CBappType = CB8bri Or CBappType = CB8fxo) Then
      Status = "Not Applicable"
      Info = "BRI or 8 FXO configurations are available only on M800B"
    End If
   
    If CBappType = CBsbc30 Or CBappType = CB1span Or CBappType = CB2span Then
      Status = "Applicable"
        Info = "Available on both M800B and M800C devices"
    End If ' CBappType
    
    If Status = "NotSet" Then
      'Shouldn't get here
      Status = "PrgmErr"
      Info = "Program Error"
    End If ' Status
  End If ' CB365x or CBopch
    
  If CBapp = CBcce Then
    If CBappType = CCEsvr Then
      Status = "Not Applicable"
      Info = "Applies only to M800 CCE configurations"
    End If
    
    If CBappType = CCE4span Then
      Status = "Not Applicable"
      Info = "4 Span configuration is available only on the M800C"
    End If ' CB4span
    
    If CBappType = CCE8fxo Or CBappType = CCE8bri Then
      Status = "Not Applicable"
      Info = "8 BRI and 8 FXO configurations are available only on the M800B"
    End If ' CBappType
    
    If CBappType = CCEsbc30 Or CBappType = CCE1span Or CBappType = CCE2span Then
      Status = "Applicable"
      Info = "This Cloud Connector Configuration is available on M800B & M800C"
    End If ' CBappType
    
    If Status = "NotSet" Then
      'Shouldn't get here
      Status = "PrgmErr"
      Info = "Program Error"
    End If ' Status
  End If ' CBcce
    
  If CBapp = CBump Then
    Status = "Not Applicable"
    Info = "M800B/C options not applicable to UMP"
  End If
   
  If CBapp = CBxum Then
    If CBappType = XUMconn Then
        Status = "Not Applicable"
        Info = "Applies only to M800 CloudBond configurations"
    End If
    
    If CBappType = XUM4span Then
      Status = "Not Applicable"
      Info = "4 span is available only on the M800C"
    End If

    If CBappType = XUM8fxo Or CBappType = XUM8bri Then
      Status = "Not Applicable"
      Info = "8 BRI and 8 FXO configurations are only available on the M800B"
    End If
    
    If CBappType = XUMsbc30 Or CBappType = XUM1span Or CBappType = XUM2span Then
      Status = "Applicable"
      Info = "This X-UM Configuration is available on M800B & M800C"
    End If ' CBappType
    
    If Status = "NotSet" Then
      'Shouldn't get here
      Status = "PrgmErr"
      Info = "Program Error"
    End If ' Status
  End If ' XUM
 
  If ReturnWhat = "Status" Then
    M800BorCFunc = Status
    Exit Function
  End If
  
  If ReturnWhat = "Info" Then
    M800BorCFunc = Info
    Exit Function
  End If
  
  ' Shouldn't get here, called with something other than Status or Info
  M800BorCFunc = "PrgmErr"
   
End Function

Attribute VB_Name = "Module9"
Sub Macro1()
Attribute Macro1.VB_ProcData.VB_Invoke_Func = " \n14"
  Dim myWindow, w2, w3 As Window
  Set myWindow = ThisWorkbook.Windows(1)
  'Create new window of this book
  Set w2 = ThisWorkbook.NewWindow
  'Application.DisplayFormulaBar = False
  
  With myWindow
    .WindowState = xlNormal
    
    '.SendKeys ("^{F1}")
    .Zoom = 80
    .width = 70
    .height = 700
    .top = 20
    .left = 20
    Application.Goto Reference:=Range("B4"), Scroll:=True
  End With
  
  With w2
    .WindowState = xlNormal
    
    '.SendKeys ("^{F1}")
    .Zoom = 70
    .width = 700
    .height = 700
    .top = 20
    .left = 750
    Application.Goto Reference:=Range("I10"), Scroll:=True
  End With
End Sub

Sub Macro4()
Attribute Macro4.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro4 Macro
'

'
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CBXmGimpl, 3, 1, MSForms, ComboBox"
Attribute VB_Control = "CBXmGsup, 5, 2, MSForms, ComboBox"
Attribute VB_Control = "CBXmGhwRep, 6, 3, MSForms, ComboBox"
Attribute VB_Control = "CBXmGsbaPro, 9, 4, MSForms, ComboBox"
Attribute VB_Control = "CBXmGpoolType, 12, 5, MSForms, ComboBox"
Attribute VB_Control = "CBXmGems, 13, 6, MSForms, ComboBox"
Attribute VB_Control = "CBXmGarmType, 14, 7, MSForms, ComboBox"
Attribute VB_Control = "CBXmGarmSBCs, 16, 8, MSForms, ComboBox"
' Sheet1(OVOC) - Targets for Sheet specific buttons
' - Private OVOCCopyBoMtoPO
' - Private OVOCMakeDefault
' - Private OVOCResetDefault
' - Private OVOCSuppressServices
'


Private Sub OVOCCopyBoMtoPO()
  Call CopyBoMtoPO("OVOC")
End Sub

Private Sub OVOCMakeDefault()
  Call MakeDefault("OVOC")
End Sub

Private Sub OVOCResetDefault()
  Call ResetDefault("OVOC", "MGsvcOff", "mGsvcOffButton")
End Sub

Private Sub OVOCSuppressServices()
  Call SuppressServices("OVOC", "MGsvcOff", "mGsvcOffButton")
End Sub
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Sheet10(CustFilters) - Macros for sheet buttons
' - Private ActivateReturn
' - Private ResetFiltersToDefault
' - Private MakeCurrentFilterSettingsDefault
'

Private Sub ActivateReturn()
  Dim ManSelector, CustFilters As Worksheet
  Application.ScreenUpdating = False
  Set ManSelector = Sheets("Manual Selector")
  Set CustFilters = Sheets("CustFilters")
  
    ManSelector.Shapes("T1Filter").TextFrame.Characters.Text = CustFilters.Range("C6").Value
    ManSelector.Shapes("T2Filter").TextFrame.Characters.Text = CustFilters.Range("D6").Value
    ManSelector.Shapes("T3Filter").TextFrame.Characters.Text = CustFilters.Range("E6").Value
    ManSelector.Shapes("T4Filter").TextFrame.Characters.Text = CustFilters.Range("F6").Value
    ManSelector.Shapes("T5Filter").TextFrame.Characters.Text = CustFilters.Range("G6").Value
    ManSelector.Shapes("B1Filter").TextFrame.Characters.Text = CustFilters.Range("H6").Value
    ManSelector.Shapes("B2Filter").TextFrame.Characters.Text = CustFilters.Range("I6").Value
    ManSelector.Shapes("B3Filter").TextFrame.Characters.Text = CustFilters.Range("J6").Value
    ManSelector.Shapes("B4Filter").TextFrame.Characters.Text = CustFilters.Range("K6").Value
    ManSelector.Shapes("B5Filter").TextFrame.Characters.Text = CustFilters.Range("L6").Value
   
  ActiveWorkbook.Unprotect Password:="acadmin"
  CustFilters.Visible = False
  ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:=acadmin
  ManSelector.Activate
  ManSelector.Range("A1").Activate
  Application.Goto Reference:=ManSelector.Range("A1"), Scroll:=True
  
  Application.Run "Sheet17.FilterManualSelection"
  
  Application.ScreenUpdating = True
End Sub

Private Sub ResetFiltersToDefault()
  Sheets("CustFilters").Range("Z8:AI44").Copy
  Sheets("CustFilters").Range("C8").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone
  Sheets("CustFilters").Range("Z6:AI6").Copy
  Sheets("CustFilters").Range("C6").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone
  Application.CutCopyMode = False
  Application.Goto Reference:=Sheets("CustFilters").Range("A1"), Scroll:=True
End Sub

Private Sub MakeCurrentFilterSettingsDefault()
  Sheets("CustFilters").Range("C8:L44").Copy
  Sheets("CustFilters").Range("Z8").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone
  Sheets("CustFilters").Range("C6:L6").Copy
  Sheets("CustFilters").Range("Z6").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone
  Application.CutCopyMode = False
  Application.Goto Reference:=Sheets("CustFilters").Range("A1"), Scroll:=True
End Sub

Private Sub SwitchM4Ktype()
  If Sheets("Scratch").Range("m4type") = Sheets("Scratch").Range("M4K") Then
    Sheets("Scratch").Range("m4type") = Sheets("Scratch").Range("M4KB")
  Else
    If Sheets("Scratch").Range("m4type") = Sheets("Scratch").Range("M4KB") Then
      Sheets("Scratch").Range("m4type") = Sheets("Scratch").Range("M4K")
    Else
      Sheets("Scratch").Range("m4type") = Sheets("Scratch").Range("M4KB")
    End If
  End If
End Sub

Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CBXmanSup, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "CBXmanHwRep, 2, 1, MSForms, ComboBox"
Attribute VB_Control = "CBXmanApnd, 3, 2, MSForms, ComboBox"
' Sheet12(Manual) - Targets for Sheet specific buttons
' - Private ManualCopyBoMtoPO
' - Private ManualMakeDefault
' - Private ManualResetDefault
' - Private ManSuppressServices
' - Private GoToManualSelector
' - Private ManualHelp
'


Private Sub ManualCopyBoMtoPO()
  'Doesn't Use the Common CopyBoMtoPO macro because
  'of potential for the different placement due to
  'Apending contents at the end of the previous item
    Dim NumRowsToCopy, StartCopyAtRow, QuoteRow, ManualRow As Integer

    Application.ScreenUpdating = False
    
  '1st check for consistent BoM type - prevent the mix Genesys and AudioCodes components
  If Sheets("Quote").Range("QuoteBoMtype").Value = Sheets("Scratch").Range("GOEM").Value Then
    'check for all services and change prices
    If Application.CountIf(Sheets("Manual").Range("N:N"), "hw") > 0 Or _
       Application.CountIf(Sheets("Manual").Range("N:N"), "sw") > 0 Or _
       Application.CountIf(Sheets("Manual").Range("N:N"), "svc") = 0 Then
      ' SKUs not valid for copying into a Genesys BoM
      MsgBox "Error! Quote tab contains Genesys SKUs - non-Service SKUs may not be added", vbOKOnly + vbExclamation

    Else
      ' all SVC SKUs, ok to past into Genesys BoM.  Need to adjust the MSRP
      MsgBox "Warning! Quote tab contains Genesys SKUs - Genesys MSRP for Services is entered on Quote tab", vbOKOnly + vbExclamation
      If Sheets("Manual").Range("ManApnd").Value = "New" Then
        'adding the manually selected parts as a new device, include the header
        NumRowsToCopy = Application.CountIf(Sheets("Manual").Range("I:I"), ">0")
        ManualRow = 10
      Else
        'do not include the header in the copy
        NumRowsToCopy = Application.CountIf(Sheets("Manual").Range("I:I"), ">0") - 2
        ManualRow = 12
      End If
    
      If Sheets("Quote").Cells(Sheets("Quote").Rows.count, "B").End(xlUp).Row = 6 Or Sheets("Manual").Range("ManApnd").Value = "Previous" Then
        StartCopyAtRow = Sheets("Quote").Cells(Sheets("Quote").Rows.count, "b").End(xlUp).Row + 1
      Else
        StartCopyAtRow = Sheets("Quote").Cells(Sheets("Quote").Rows.count, "b").End(xlUp).Row + 3
      End If
      
      ' make calculations manual so item number isn't incremented in each pass throught he loop
      Application.Calculation = xlCalculationManual
      For QuoteRow = StartCopyAtRow To StartCopyAtRow + NumRowsToCopy
        Sheets("Manual").Range(Sheets("Manual").Cells(ManualRow, 9), Sheets("Manual").Cells(ManualRow, 14)).Copy
        Sheets("Quote").Range(Sheets("Quote").Cells(QuoteRow, 2), Sheets("Quote").Cells(QuoteRow, 7)).PasteSpecial Paste:=xlPasteValues
        If left(Sheets("Quote").Cells(QuoteRow, 7).Value, 3) = "svc" And IsNumeric(Sheets("Quote").Cells(QuoteRow, 5).Value) Then
          ' convert to Genesys Service MSRP
          Sheets("Quote").Cells(QuoteRow, 5).Value = Sheets("Quote").Cells(QuoteRow, 5).Value * 0.82 / 0.6
        End If
        ManualRow = ManualRow + 1
      Next QuoteRow
      Application.Calculation = xlCalculationAutomatic
      
      Sheets("Quote").Activate
      Application.CutCopyMode = False
      Application.ScreenUpdating = True
      Sheets("Quote").Cells(StartCopyAtRow, 2).Activate
    End If
    
  Else
    With Sheets("Manual")
      If .Range("ManApnd").Value = "New" Then
        'adding the manually selected parts as a new device, include the header
         NumRowsToCopy = Application.CountIf(.Range("I:I"), ">0")
         .Range(.Cells(10, 9), .Cells(10 + NumRowsToCopy, 14)).Copy
      Else
        'do not include the header in the copy
         NumRowsToCopy = Application.CountIf(.Range("I:I"), ">0") - 2
         .Range(.Cells(12, 9), .Cells(12 + NumRowsToCopy, 14)).Copy
      End If
    End With
    
    With Sheets("Quote")
      If .Cells(.Rows.count, "B").End(xlUp).Row = 6 Or Sheets("Manual").Range("ManApnd").Value = "Previous" Then
        StartCopyAtRow = .Cells(.Rows.count, "b").End(xlUp).Row + 1
      Else
        StartCopyAtRow = .Cells(.Rows.count, "b").End(xlUp).Row + 3
      End If
      .Range(.Cells(StartCopyAtRow, 2), .Cells(StartCopyAtRow + NumRowsToCopy, 7)).PasteSpecial Paste:=xlPasteValues
      .Activate
      Application.CutCopyMode = False
      Application.ScreenUpdating = True
      .Cells(StartCopyAtRow, 2).Activate
    End With
  End If
  
End Sub

Private Sub ManualMakeDefault()
  Call MakeDefault("Manual")
End Sub

Private Sub ManualResetDefault()
  Call ResetDefault("Manual", "MansvcOff", "MansvcOffButton")
End Sub

Private Sub ManSuppressServices()
  Call SuppressServices("Manual", "MansvcOff", "MansvcOffButton")
End Sub

Private Sub GoToManualSelector()
    With Sheets("Manual Selector")
       .Activate
       .Range("E4").Activate
       Application.Goto Reference:=.Range("A1"), Scroll:=True
    End With
End Sub

Private Sub ManualHelp()
    With Sheets("Detail")
       .Activate
       .Range("ManHelp").RowHeight = 125
       .Range("ManHelp").Activate
       Application.Goto Reference:=.Range("ManHelp"), Scroll:=True
    End With
 End Sub
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Sheet13(DiscTool) - Macros initiated from sheet
' - Private ExportToCSVFromDiscTool
' - Private ExportDiscountedBoM
' - Private ClearDiscToolBom - Used by ReadytoRelease
' - Private ResetDiscToolDiscounts
' - Private CalculateDiscountsFromTargets
' - Private ClearTargets
' - Private PriceTargetToggle
' - Private DiscToolHelp
' - Private TestExport (not used)


Private Sub ExportToCSVFromDiscTool()
  Dim QuoteRow, CSVRow, G2AQuoteRow, FirstQuoteRow, LastQuoteRow, FirstSummaryRow, BaseFileNameIteration, LastSummaryRow, OldLastCSVRow, ItemNo As Long
  Dim CSVPath, CSVName, XLSName, GXLSName, TimeStamp, Filedate, FilePath, BaseFileNameIterationLabel, BaseFileName, SeparateStatus, AUDCcpn As String
  Dim Quote, PriceBk, GOEM, G2AQuote, CSV As Worksheet
  Dim Wizard, CSVbk, XLSbk As Workbook
  Dim TempPriceHold, SubscriptionPeriod, CheckedPrice As Long
  Dim SBCbaseIncluded, EMSbaseIncluded As Boolean
  
   
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
   
  ' This is copy & tweak from Quote tab, used same variables
  Set Wizard = ThisWorkbook
  Set Quote = Wizard.Sheets("DiscTool")
  Set CSV = Wizard.Sheets("CSVexport")
  Set PriceBk = Wizard.Sheets("PriceBook")
  Set GOEM = Wizard.Sheets("Genesys")
  FirstQuoteRow = 13
  FirstSummaryRow = 13
  LastQuoteRow = Quote.Cells(Quote.Rows.count, "C").End(xlUp).Row
  LastSummaryRow = Application.WorksheetFunction.Max(Quote.Range("x3:x512")) / 1000 + 12
  OldLastCSVRow = CSV.Cells(CSV.Rows.count, "A").End(xlUp).Row
  
  'Create the directory if it doesn't exist
  FilePath = "C:\SFDC-CSVs\"
  If Len(Dir(FilePath, vbDirectory)) = 0 Then
    MkDir (FilePath)
  End If
  
  'Generate the base file name
  Filedate = Format(CStr(Now), "YYYY-MM-DD")
  If Quote.Cells(11, 2).Value = "" Then
    ' Use a Default base file name
    BaseFileName = "DiscQuote"
  Else
    ' Use specified base file name
    BaseFileName = Quote.Cells(11, 2).Value
  End If
  
  'Allow for repeated use of BaseFileName per date with versions
  
  If Dir(FilePath & Filedate & "*" & BaseFileName & "*") <> "" Then
    'BaseFileName has already been used on this date, find an used iteration number
    BaseFileNameIterationLabel = ""
    For BaseFileNameIteration = 1 To 99
      If Dir(FilePath & Filedate & "." & CStr(BaseFileNameIteration) & "*" & BaseFileName & "*") = "" Then
        BaseFileNameIterationLabel = "." & CStr(BaseFileNameIteration)
        Exit For
      End If
    Next BaseFileNameIteration
    ' If can't find a iteration number, use a full timestamp
    If BaseFileNameIterationLabel = "" Then
      Filedate = Format(CStr(Now), "YYYY-MM-DD-HH-MM-SS")
    End If
  Else
    BaseFileNameIterationLabel = ""
  End If
  
  'Generate the file names
  If Quote.Range("DiscToolBoMtype").Value = Wizard.Sheets("Scratch").Range("GOEM").Value Then
    CSVName = Filedate & BaseFileNameIterationLabel & " - " & BaseFileName & " -CSV" & ".csv"
    XLSName = Filedate & BaseFileNameIterationLabel & " - " & BaseFileName & " -AUDC" & ".xlsx"
    ' keep the suffix since it's a GNS BoM and not an AUDC one
    GXLSName = Filedate & BaseFileNameIterationLabel & " - " & BaseFileName & " -GNS" & ".xlsx"
  Else
    CSVName = Filedate & BaseFileNameIterationLabel & " - " & BaseFileName & " -CSV" & ".csv"
    ' don't burden main file name with -BoM suffix - it's the default
    XLSName = Filedate & BaseFileNameIterationLabel & " - " & BaseFileName & ".xlsx"
  End If
  
  'Create GXLS workbook now so it can be written to in the same loops that write the CSV file
  'To avoid renaming this workbook copy the sheet to a new workbook
  Quote.Copy
  With Workbooks(Workbooks.count).Sheets("DiscTool")
    'collapse the top 5 rows with tool instructions
    .Rows("2:4").RowHeight = 0
   
    'Delete Command Bar Buttons
    .Activate
    .Shapes("DiscToolExportXLS").Delete
    .Shapes("DiscToolExportCSV").Delete
    .Shapes("DiscToolGTQuote").Delete
    .Shapes("DiscToolGTStart").Delete
    .Shapes("DiscToolResetDisc").Delete
    .Shapes("DiscToolClearBom").Delete
    .Shapes("DiscToolTargetButton").Delete
    .Shapes("DiscToolHelp").Delete
    .Shapes("DiscToolCalcDiscToTarg").Delete
    .Shapes("DiscToolClearTarg").Delete
    .Shapes("DiscToolPartnerDistiToggle").Delete
    .Range("A5").RowHeight = 15
      
    'clear csv export file naming cells
    .Cells(9, 2).MergeArea.ClearContents
    .Cells(11, 2).MergeArea.ClearContents

    
    'Remove named references to scratch tab in BoM header
    .Cells(9, 12).MergeArea.Copy
    .Cells(9, 12).MergeArea.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    .Range("D7:E7").Copy
    .Range("D7:E7").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    .Range("D8:E12").Copy
    .Range("D8:E12").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    
    'These move b/c of column deletes for the champs/audc versions
    .Activate
    If left(Wizard.Name, 2) = "SE" Then
      .Range("AE2").Copy
      .Range("AE2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
      .Range("AE4").Copy
      .Range("AE4").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
      .Range("AK7").Copy
      .Range("AK7").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
      .Range("AK9").Copy
      .Range("AK9").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Else
      .Range("W2").Copy
      .Range("W2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
      .Range("W4").Copy
      .Range("W4").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
      .Range("X7").Copy
      .Range("X7").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
      .Range("X9").Copy
      .Range("X9").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End If
    
  End With
    
  'Delete any names used by macros or other sheets
  For Each NameToDelete In Workbooks(Workbooks.count).Names
    If left(NameToDelete.Name, 1) <> "_" Then
      NameToDelete.Delete
    End If
  Next NameToDelete
  
  'First, save off the Quote sheet, or the Genesys Quote sheet for a Genesys BoM
  Application.Goto Reference:=Workbooks(Workbooks.count).Sheets("DiscTool").Range("A1"), Scroll:=True
  Application.Calculation = xlCalculationAutomatic
  If Quote.Range("DiscToolBoMtype").Value = Wizard.Sheets("Scratch").Range("GOEM").Value Then
    Application.DisplayAlerts = False
    Workbooks(Workbooks.count).SaveAs filename:=FilePath & GXLSName, FileFormat:=xlOpenXMLWorkbook, ConflictResolution:=xlLocalSessionChanges
    ' changes to the GNS doc must be made here.
    Sheets("DiscTool").Range("L15:L512").Replace what:="IF($AE$2=""Genesys"", $G$8, $G$9)", _
       Replacement:="$G$8", _
       LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, _
       SearchFormat:=False, ReplaceFormat:=False
    Sheets("DiscTool").Range("L15:L512").Replace what:="IF(AND($AE$2=""AudioCodes"", COUNTIF($AJ$7:$AJ$106, INDIRECT(""R[0]C[-10]"", 0))=1), $G$11, $G$10)", _
       Replacement:="$G$10", _
       LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, _
       SearchFormat:=False, ReplaceFormat:=False
    ' no services discount on hw, sw discount tied to product discount, deal with below where separated
    Sheets("DiscTool").Range("D9:G9").ClearContents
    Workbooks(Workbooks.count).Save

    Workbooks(Workbooks.count).SaveAs filename:=FilePath & XLSName, FileFormat:=xlOpenXMLWorkbook, ConflictResolution:=xlLocalSessionChanges
    Set XLSbk = ActiveWorkbook
    Set G2AQuote = XLSbk.Sheets("DiscTool")
    Application.DisplayAlerts = True
    ' Clear the existing Genesys Quote to make room for the AUDC Quote to be created below
    G2AQuote.Range("B13:G506").ClearContents
    ' Also the per item discounts
    G2AQuote.Range("J13:J506").ClearContents
    ' Change the discounted column header back to AUDC Transfer Price
    G2AQuote.Cells(9, 12).MergeArea.Value = "AUDC Transfer Price"
    'Set Genesys Transfer Discounts
    ' hw is 50% of msrp, sw 50% of transfer, deal with delta below where hw/sw treated separately
    G2AQuote.Cells(8, 5).Value = 0.5
    ' no services discount on hw, sw discount tied to product discount, deal with below where separated
    G2AQuote.Range("E9:G9").ClearContents
    G2AQuote.Cells(10, 5).Value = 0.18
    G2AQuote.Range("D11:G12").ClearContents
    G2AQuote.Columns("AI:AJ").ClearContents
    ' below change deals with fact that sw support is based on discounted price and hw support is based on msrp
    Sheets("DiscTool").Range("L15:L512").Replace what:="$G$8", _
       Replacement:="IF(OR(AND(MOD(INDIRECT(""R[0]C[-10]"", 0), 10)=2, INDIRECT(""R[-1]C[-5]"", 0)=""hw""), AND(MOD(INDIRECT(""R[0]C[-10]"", 0), 10)=3, INDIRECT(""R[-2]C[-5]"", 0)=""hw"")), 0, $G$8)", _
       LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, _
       SearchFormat:=False, ReplaceFormat:=False

  Else ' AudioCodes BoM
    Application.DisplayAlerts = False
    Workbooks(Workbooks.count).SaveAs filename:=FilePath & XLSName, FileFormat:=xlOpenXMLWorkbook, ConflictResolution:=xlLocalSessionChanges
    Application.DisplayAlerts = True
    Workbooks(Workbooks.count).Close False
  End If
  Application.Calculation = xlCalculationManual
  'Now start building the CSV sheet
  'Start with clear sheet
  CSV.Range(CSV.Cells(1, 1), CSV.Cells(OldLastCSVRow, 7)).ClearContents
   
  'Add Header Row next
  CSV.Cells(1, 1).Value = "Package#"
  CSV.Cells(1, 2).Value = "CPN"
  CSV.Cells(1, 3).Value = "Quantity"
  CSV.Cells(1, 4).Value = "Requested Price"
  CSV.Cells(1, 5).Value = "Requested Discount (off MSRP)"
  CSV.Cells(1, 6).Value = "Service For"
  CSV.Cells(1, 7).Value = "Summary"
  CSVRow = 2
  
  If Sheets("Settings").Range("PricingType") = Sheets("Scratch").Range("StdPurchase") Then
    SubscriptionPeriod = 1
  Else
    If Sheets("Settings").Range("PricingType") = Sheets("Scratch").Range("SubscriptionMonthly") Then
      SubscriptionPeriod = 12
    Else
      ' must be 36M commit
      SubscriptionPeriod = 36
    End If
  End If

  If Quote.Range("DiscToolBoMtype").Value = Wizard.Sheets("Scratch").Range("AUDC").Value Then
    'Wizard should be active (Quote Copy got closed), so Quote and CSV are in context
    For QuoteRow = FirstQuoteRow To LastQuoteRow
      If Not IsNumeric(Quote.Cells(QuoteRow, 2).Value) Or left(Quote.Cells(QuoteRow, 3).Value, 4) = "Note" Then
        'These are header rows, blank rows, or pseudo CPNs i added for delivering notes into BoMs.  do nothing
      Else
        If Quote.Cells(QuoteRow, 2).Value Mod 10 = 0 Then
          'Another header row, nested to avoid executing Mod on Item No.
        Else
          'CSV Record should be Pkg, CPN, Qty, ReqPrice, ReqDisc, ServiceFor
          'ReqPrice should always be null.
          
          '1st place package number, cpn, and qty
          CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
          CSV.Cells(CSVRow, 2).Value = Quote.Cells(QuoteRow, 3).Value ' cpn
          CSV.Cells(CSVRow, 3).Value = Quote.Cells(QuoteRow, 6).Value ' qty
          
          'Protect against non-numeric prices like quotation and No charge
          If IsNumeric(Quote.Cells(QuoteRow, 5).Value) Then
            CheckedPrice = Quote.Cells(QuoteRow, 5).Value
          Else
            CheckedPrice = 0
          End If
          
          'Since this is from the DiscTooltab, use the discounted price in column L, but adjust for Qty
          ' Protect against Qty being zero
          If Quote.Cells(QuoteRow, 6).Value = 0 Then
            CSV.Cells(CSVRow, 4) = 0
          Else
            CSV.Cells(CSVRow, 4) = Quote.Cells(QuoteRow, 12) / Quote.Cells(QuoteRow, 6).Value
          End If
          
          'Fill in Service For if it's support or warranty
          ItemNo = Quote.Cells(QuoteRow, 2).Value Mod 10
          If ItemNo = 2 Or ItemNo = 3 Then
            CSV.Cells(CSVRow, 6).Value = Quote.Cells(QuoteRow + 1 - ItemNo, 3).Value ' Svc For
          End If
          'Increment CSV row only when one has been written
          CSVRow = CSVRow + 1
        End If
      End If
    Next QuoteRow
  Else ' BomType = Genesys
    'Genesys code, 2 workbooks will be open, Wizard and XLSbk
    ' Initialize EMSbaseIncluded just once per quote (vs SBC on each device below)
    EMSbaseIncluded = False

    G2AQuoteRow = 13
    For QuoteRow = FirstQuoteRow To LastQuoteRow
      If Not IsNumeric(Quote.Cells(QuoteRow, 2).Value) Or left(Quote.Cells(QuoteRow, 3).Value, 12) = "Genesys Care" Or Quote.Cells(QuoteRow, 3).Value = "" Then
        'These are header rows, blank rows, or Genesys Care, which isn't used.  do nothing, take care of header on first line
        If Quote.Cells(QuoteRow, 2) = Wizard.Sheets("Scratch").Range("Blank") Then
          'blank row, increment G2AQuoteRow
          G2AQuoteRow = G2AQuoteRow + 1
        End If
      Else
        If Quote.Cells(QuoteRow, 2).Value Mod 10 = 0 Then
          'first header row, nested to avoid executing Mod on Item No.  nothing to do for the quote
          Quote.Range(Quote.Cells(QuoteRow, 2), Quote.Cells(QuoteRow + 1, 7)).Copy
          'add both header rows
          G2AQuote.Range(G2AQuote.Cells(G2AQuoteRow, 2), G2AQuote.Cells(G2AQuoteRow + 1, 7)).PasteSpecial Paste:=xlPasteValues
          G2AQuoteRow = G2AQuoteRow + 2
          'Initialize SBCbaseIncluded for each Device (header row), vs once per quote for EMSbaseIncluded
          SBCbaseIncluded = False
        Else
          'CSV Record should be Pkg, CPN, Qty, ReqPrice, ReqDisc, ServiceFor
          'For Genesys BoMs, use ReqPrice instead of ReqDisc
                  
          'cpn requires conversion, use desc b/c cpn not unique
          If WorksheetFunction.CountIf(GOEM.Range("GOEMcpnset"), Quote.Cells(QuoteRow, 3)) >= 1 Then
            If Quote.Cells(QuoteRow, 7) = "sw" Then
              If WorksheetFunction.Index(GOEM.Range("GOEMAUDCcpnSet"), WorksheetFunction.Match(Quote.Cells(QuoteRow, 4), GOEM.Range("GOEMdescSet"), 0)).Value = "n/a" Then
                ' don't add row for n/a sku - only path where audc cpn = blank. no current example with sw
                AUDCcpn = ""
              Else
                AUDCcpn = WorksheetFunction.Index(GOEM.Range("GOEMAUDCcpnSet"), WorksheetFunction.Match(Quote.Cells(QuoteRow, 4), GOEM.Range("GOEMdescSet"), 0)) ' cpn
              End If
            Else
              If WorksheetFunction.Index(GOEM.Range("GOEMAUDCcpnSet"), WorksheetFunction.Match(Quote.Cells(QuoteRow, 4), GOEM.Range("GOEMdescSet"), 0)).Value = "n/a" Then
                ' don't add row for n/a sku - only path where audc cpn = blank.  eg phone shipping
                AUDCcpn = ""
              Else
                AUDCcpn = WorksheetFunction.Index(GOEM.Range("GOEMAUDCcpnSet"), WorksheetFunction.Match(Quote.Cells(QuoteRow, 4), GOEM.Range("GOEMdescSet"), 0)) ' cpn
              End If
            End If
          Else
            'Must be from AUDC pricebook
            AUDCcpn = Quote.Cells(QuoteRow, 3) ' cpn
          End If
            
          ' Use ReqPrice instead of ReqDisc.  Transfer price calculated based on type
          If AUDCcpn = "" Or Quote.Cells(QuoteRow, 6) = 0 Or left(Quote.Cells(QuoteRow, 3).Value, 4) = "Note" Then
            'AUDCcpn = "" means the cpn is an n/a audc sku - do nothing
            'Quote.Cells(QuoteRow, 6) is Qty, and SFDC will choke on 0 Qty entries, so don't include in AUDC BoM and CSV
            'Genesys Interview doesn't add notes, but they could be added manually
          Else
            ' Use ReqPrice instead of ReqDisc.  Transfer price calculated based on type
            If Quote.Cells(QuoteRow, 7) = "hw" Then
            
              ' reqprice = 2/3 discounted amount, add lines for acts and ahr, including service for tags
              CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
              CSV.Cells(CSVRow, 2).Value = AUDCcpn ' cpn
              CSV.Cells(CSVRow, 3).Value = Quote.Cells(QuoteRow, 6).Value ' qty
              ' transfer for hw based only on msrp
              CSV.Cells(CSVRow, 4).Value = Quote.Cells(QuoteRow, 5).Value / 2 ' ReqPrice
              
              G2AQuote.Cells(G2AQuoteRow, 3) = AUDCcpn ' cpn
              G2AQuote.Cells(G2AQuoteRow, 4) = Quote.Cells(QuoteRow, 4) ' desc
              'transfer for hw based only on msrp
              G2AQuote.Cells(G2AQuoteRow, 5) = Quote.Cells(QuoteRow, 5).Value / 2 ' price
              G2AQuote.Cells(G2AQuoteRow, 6) = Quote.Cells(QuoteRow, 6) ' qty
              G2AQuote.Cells(G2AQuoteRow, 7) = Quote.Cells(QuoteRow, 7) ' type
              G2AQuote.Cells(G2AQuoteRow, 10) = Quote.Cells(QuoteRow, 10) ' per item discount
              
              ' add acts line to CSV & AUDC Quote
              If WorksheetFunction.Index(GOEM.Range("GOEMACTScpnSet"), WorksheetFunction.Match(AUDCcpn, GOEM.Range("GOEMAUDCcpnSet"), 0)).Value = "n/a" Then
                'No ACTS (no eg right now), don't add ACTS line
              Else
                CSVRow = CSVRow + 1
                CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
                CSV.Cells(CSVRow, 3).Value = Quote.Cells(QuoteRow, 6).Value ' qty
                CSV.Cells(CSVRow, 6).Value = CSV.Cells(CSVRow - 1, 2) ' Service For
                CSV.Cells(CSVRow, 2).Value = WorksheetFunction.Index(GOEM.Range("GOEMACTScpnSet"), WorksheetFunction.Match(AUDCcpn, GOEM.Range("GOEMAUDCcpnSet"), 0)) ' cpn
                CSV.Cells(CSVRow, 4).Value = Quote.Cells(QuoteRow, 5).Value * WorksheetFunction.Index(GOEM.Range("GOEMACTSpriceSet"), WorksheetFunction.Match(AUDCcpn, GOEM.Range("GOEMAUDCcpnSet"), 0)) ' Req Price
                'there are a few generic ACTS SKUs to avoid having both duplicate _Sx SKUS (with different prices) and _Sx values that are different than those for the same SKU in the AUDC PB.
                'save price to use for the AUDC quote below
                TempPriceHold = CSV.Cells(CSVRow, 4).Value
                If CSV.Cells(CSVRow, 2).Value = "ACTS24X7/YR" Then
                  'make price $1, and fill Qty with the price
                  CSV.Cells(CSVRow, 3).Value = Application.WorksheetFunction.RoundUp(CSV.Cells(CSVRow, 3).Value * TempPriceHold, 0) ' qty
                  CSV.Cells(CSVRow, 4).Value = 1 ' Req Price
                End If
                
                'Add support line in G2A Quote too
                'Don't make the Qty/Price switch for generic SKUs for AUDC sheet as it's informative only
                G2AQuoteRow = G2AQuoteRow + 1
                G2AQuote.Cells(G2AQuoteRow, 3) = CSV.Cells(CSVRow, 2) ' cpn
                G2AQuote.Cells(G2AQuoteRow, 4).Value = "Support SKU for " & AUDCcpn ' desc
                G2AQuote.Cells(G2AQuoteRow, 5) = TempPriceHold ' price
                G2AQuote.Cells(G2AQuoteRow, 6) = Quote.Cells(QuoteRow, 6).Value ' qty
                G2AQuote.Cells(G2AQuoteRow, 7) = "svc/yr" ' type
              End If
              
              ' add ahr line to CSV if ahr is not n/a
              If WorksheetFunction.Index(GOEM.Range("GOEMAHRcpnSet"), WorksheetFunction.Match(AUDCcpn, GOEM.Range("GOEMAUDCcpnSet"), 0)).Value = "n/a" Then
                'No AHR (eg phones), don't add ahr line
              Else
                CSVRow = CSVRow + 1
                CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
                CSV.Cells(CSVRow, 3).Value = Quote.Cells(QuoteRow, 6).Value ' qty
                CSV.Cells(CSVRow, 6).Value = CSV.Cells(CSVRow - 2, 2) ' Service For
                CSV.Cells(CSVRow, 2).Value = WorksheetFunction.Index(GOEM.Range("GOEMAHRcpnSet"), WorksheetFunction.Match(AUDCcpn, GOEM.Range("GOEMAUDCcpnSet"), 0)) ' cpn
                CSV.Cells(CSVRow, 4).Value = Quote.Cells(QuoteRow, 5).Value * WorksheetFunction.Index(GOEM.Range("GOEMAHRpriceSet"), WorksheetFunction.Match(AUDCcpn, GOEM.Range("GOEMAUDCcpnSet"), 0)) ' Req Price
                'there are a few generic AHR SKUs to avoid having both duplicate _Sx SKUS (with different prices) and _Sx values that are different than those for the same SKU in the AUDC PB.
                'save price to use for the AUDC quote below
                TempPriceHold = CSV.Cells(CSVRow, 4).Value
                If CSV.Cells(CSVRow, 2).Value = "AHR/YR" Then
                  'make price $1, and fill Qty with the price
                  CSV.Cells(CSVRow, 3).Value = Application.WorksheetFunction.RoundUp(CSV.Cells(CSVRow, 3).Value * TempPriceHold, 0) ' qty
                  CSV.Cells(CSVRow, 4).Value = 1 ' Req Price
                End If
                
                'add ahr line to G2AQuote
                'Don't make the Qty/Price switch for generic SKUs for AUDC sheet as it's informative only
                G2AQuoteRow = G2AQuoteRow + 1
                G2AQuote.Cells(G2AQuoteRow, 3) = CSV.Cells(CSVRow, 2) ' cpn
                G2AQuote.Cells(G2AQuoteRow, 4).Value = "Hardware Replacement SKU for " & AUDCcpn ' desc
                G2AQuote.Cells(G2AQuoteRow, 5) = TempPriceHold ' price
                G2AQuote.Cells(G2AQuoteRow, 6) = Quote.Cells(QuoteRow, 6).Value ' qty
                G2AQuote.Cells(G2AQuoteRow, 7) = "svc/yr" ' type
              End If
            Else
              If Quote.Cells(QuoteRow, 7) = "sw" Then
                ' First, if it's the first SBC or EMS SKU for the device, add the SBC or EMS base SKUs to the AUDC Quote and the CSV
                If SBCbaseIncluded Then
                  'already included the base
                Else ' SBCbaseIncluded
                  If Quote.Cells(QuoteRow, 3) = "3GP21249ACDA" Then ' Simplex SBC
                    CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
                    CSV.Cells(CSVRow, 2).Value = "MSW/GENESYS" ' cpn
                    CSV.Cells(CSVRow, 3).Value = 1 ' qty
                    CSV.Cells(CSVRow, 4).Value = 0 ' Req Price
                    CSVRow = CSVRow + 1
                    
                    G2AQuote.Cells(G2AQuoteRow, 2) = "" ' gets set during renumbering
                    G2AQuote.Cells(G2AQuoteRow, 3) = "MSW/GENESYS" ' cpn
                    G2AQuote.Cells(G2AQuoteRow, 4) = "Product key for Mediant SE/VE) Session Border Controller (SBC) product for Genesys - with 0 sessions.|fffd| Product key includes (at no additional charge) - unlimited Near/Far End registrations for users, local survivability, EMS flag enabled."
                    G2AQuote.Cells(G2AQuoteRow, 5) = 0 ' price
                    G2AQuote.Cells(G2AQuoteRow, 6) = 1 ' qty
                    G2AQuote.Cells(G2AQuoteRow, 7) = "sw" ' type
                    G2AQuoteRow = G2AQuoteRow + 1
                    SBCbaseIncluded = True
                  End If
                  
                  If Quote.Cells(QuoteRow, 3) = "3GP21246ACDA" Then ' HA SBC
                    CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
                    CSV.Cells(CSVRow, 2).Value = "MSW/GENESYS/R" ' cpn
                    CSV.Cells(CSVRow, 3).Value = 1 ' qty
                    CSV.Cells(CSVRow, 4).Value = 0 ' Req Price
                    CSVRow = CSVRow + 1
                    
                    G2AQuote.Cells(G2AQuoteRow, 2) = "" ' gets set during renumbering
                    G2AQuote.Cells(G2AQuoteRow, 3) = "MSW/GENESYS/R"
                    G2AQuote.Cells(G2AQuoteRow, 4) = "Product key for Mediant SE/VE) Session Border Controller (SBC) product for Genesys - with 0 sessions.|fffd| Product key includes (at no additional charge) - unlimited Near/Far End registrations for users, local survivability, HA flag enabled, EMS flag enabled."
                    G2AQuote.Cells(G2AQuoteRow, 5) = 0 ' price
                    G2AQuote.Cells(G2AQuoteRow, 6) = 1 ' qty
                    G2AQuote.Cells(G2AQuoteRow, 7) = "sw" ' type
                    G2AQuoteRow = G2AQuoteRow + 1
                    SBCbaseIncluded = True
                  End If
                End If ' SBCbaseIncluded
                
                If EMSbaseIncluded Then
                  ' Already included the base
                Else
                  If Quote.Cells(QuoteRow, 3) = "3GP81886ACAA" Or _
                     Quote.Cells(QuoteRow, 3) = "3GP82240ACAA" Or _
                     Quote.Cells(QuoteRow, 3) = "3GP81885ACAA" Then ' EMS, IPP Mgr, or SEM
                    'add the base
                    CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
                    CSV.Cells(CSVRow, 2).Value = "SEM-EMS/VMW/GNS" ' cpn
                    CSV.Cells(CSVRow, 3).Value = 1 ' qty
                    CSV.Cells(CSVRow, 4).Value = 0 ' Req Price
                    CSVRow = CSVRow + 1
                    
                    G2AQuote.Cells(G2AQuoteRow, 2) = "" ' gets set during renumbering
                    G2AQuote.Cells(G2AQuoteRow, 3) = "SEM-EMS/VMW/GNS"
                    G2AQuote.Cells(G2AQuoteRow, 4) = "EMS and SEM base s/w CPN - MUST on first order of EMS and/or SEM"
                    G2AQuote.Cells(G2AQuoteRow, 5) = 0 ' price
                    G2AQuote.Cells(G2AQuoteRow, 6) = 1 ' qty
                    G2AQuote.Cells(G2AQuoteRow, 7) = "sw" ' type
                    G2AQuoteRow = G2AQuoteRow + 1
                    EMSbaseIncluded = True
                  End If
                End If 'EMSbaseIncluded
                
                CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
                CSV.Cells(CSVRow, 2).Value = AUDCcpn ' cpn
                CSV.Cells(CSVRow, 3).Value = Quote.Cells(QuoteRow, 6).Value ' qty
                ' use discount on single unit since CSV has qty but not disc
                CSV.Cells(CSVRow, 4).Value = Quote.Cells(QuoteRow, 5).Value * (1 - Quote.Cells(QuoteRow, 13).Value) / 2 ' Req Price
                
                G2AQuote.Cells(G2AQuoteRow, 3).Value = AUDCcpn ' cpn
                G2AQuote.Cells(G2AQuoteRow, 4) = Quote.Cells(QuoteRow, 4) ' desc
                ' AUDC sheet has qty and disc
                G2AQuote.Cells(G2AQuoteRow, 5) = Quote.Cells(QuoteRow, 5).Value / 2 ' price
                G2AQuote.Cells(G2AQuoteRow, 6) = Quote.Cells(QuoteRow, 6) ' qty
                G2AQuote.Cells(G2AQuoteRow, 7) = Quote.Cells(QuoteRow, 7) ' type
                G2AQuote.Cells(G2AQuoteRow, 10) = Quote.Cells(QuoteRow, 10) ' per item discount
                
                ' add line for sw support, including service for tag
                CSVRow = CSVRow + 1
                CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
                CSV.Cells(CSVRow, 2).Value = WorksheetFunction.Index(GOEM.Range("GOEMACTScpnSet"), WorksheetFunction.Match(AUDCcpn, GOEM.Range("GOEMAUDCcpnSet"), 0)) 'cpn
                CSV.Cells(CSVRow, 3).Value = Quote.Cells(QuoteRow, 6).Value ' qty
                ' sw support based on transfer price, back qty out of discounted total
                'protect against zero quantities
                If Quote.Cells(QuoteRow, 6).Value = 0 Then
                  CSV.Cells(CSVRow, 4).Value = 0
                Else
                  CSV.Cells(CSVRow, 4).Value = (Quote.Cells(QuoteRow, 12).Value / Quote.Cells(QuoteRow, 6).Value) _
                            * WorksheetFunction.Index(GOEM.Range("GOEMACTSpriceSet"), WorksheetFunction.Match(AUDCcpn, GOEM.Range("GOEMAUDCcpnSet"), 0)) ' req price
                End If
                CSV.Cells(CSVRow, 6).Value = CSV.Cells(CSVRow - 1, 2) ' service For
              
                'Add support line in G2A Quote too
                G2AQuoteRow = G2AQuoteRow + 1
                G2AQuote.Cells(G2AQuoteRow, 3) = CSV.Cells(CSVRow, 2) ' cpn
                G2AQuote.Cells(G2AQuoteRow, 4).Value = "Support SKU for " & AUDCcpn ' desc
                ' price is %(lookup) x 50% of msrp
                G2AQuote.Cells(G2AQuoteRow, 5).Value = Quote.Cells(QuoteRow, 5).Value * WorksheetFunction.Index(GOEM.Range("GOEMACTSpriceSet"), WorksheetFunction.Match(AUDCcpn, GOEM.Range("GOEMAUDCcpnSet"), 0)) ' price
                G2AQuote.Cells(G2AQuoteRow, 6) = Quote.Cells(QuoteRow, 6) ' qty
                G2AQuote.Cells(G2AQuoteRow, 7) = "svc/yr" ' type
                G2AQuote.Cells(G2AQuoteRow, 10) = Quote.Cells(QuoteRow, 10) ' per item discount
              Else
                If Quote.Cells(QuoteRow, 7) = "svc" Then
                  ' msrp x 0.6, don't get from audc pricebook in order to keep potential for genesys tool to run w/out pricebook tab
                  CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
                  CSV.Cells(CSVRow, 2).Value = AUDCcpn ' cpn
                  CSV.Cells(CSVRow, 3).Value = Quote.Cells(QuoteRow, 6).Value ' qty
                  If IsNumeric(Quote.Cells(QuoteRow, 5)) Then
                    CSV.Cells(CSVRow, 4).Value = Quote.Cells(QuoteRow, 5).Value * (1 - Quote.Cells(QuoteRow, 13).Value) * 0.6 ' Req Price
                  Else
                    CSV.Cells(CSVRow, 4).Value = Quote.Cells(QuoteRow, 5).Value
                  End If
                  G2AQuote.Cells(G2AQuoteRow, 3) = AUDCcpn ' cpn
                  G2AQuote.Cells(G2AQuoteRow, 4) = Quote.Cells(QuoteRow, 4) ' desc
                  If IsNumeric(Quote.Cells(QuoteRow, 5)) Then
                    G2AQuote.Cells(G2AQuoteRow, 5) = Quote.Cells(QuoteRow, 5) * 0.6 ' Price
                  Else
                    G2AQuote.Cells(G2AQuoteRow, 5) = Quote.Cells(QuoteRow, 5)
                  End If
                  G2AQuote.Cells(G2AQuoteRow, 6) = Quote.Cells(QuoteRow, 6) ' qty
                  G2AQuote.Cells(G2AQuoteRow, 7).Value = "svc" ' type
                  G2AQuote.Cells(G2AQuoteRow, 10) = Quote.Cells(QuoteRow, 10) ' addnl discount
                End If ' Svc
              End If ' sw
            End If ' hw
            CSVRow = CSVRow + 1
            G2AQuoteRow = G2AQuoteRow + 1
          End If ' not a n/a sku
        End If
      End If
    Next QuoteRow
    ' Renumber the sheet, and then Close G2AQuote
    Application.Goto Reference:=XLSbk.Sheets("DiscTool").Range("A1"), Scroll:=True
    Call ReNumberSheet("DiscTool", XLSbk.Name, 13)
    Application.DisplayAlerts = False
    XLSbk.Save
    Application.DisplayAlerts = True
  End If
   
  ' LastSummaryRow is from Quote, but should be
  For QuoteRow = FirstSummaryRow To LastSummaryRow
    CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 24).Value / 1000) ' pkg
    CSV.Cells(CSVRow, 2).Value = Quote.Cells(QuoteRow, 25).Value ' desc
    ' Alon asked to have pricing removed from summary
    'If Quote.Range("DiscToolBoMtype").Value = Wizard.Sheets("Scratch").Range("AUDC").Value Then
      'CSV.Cells(CSVRow, 4).Value = Quote.Cells(QuoteRow, 27).Value ' ReqPrice
    'Else
      'CSV.Cells(CSVRow, 4).Value = G2AQuote.Cells(QuoteRow, 27).Value ' ReqPrice
    'End If
    CSV.Cells(CSVRow, 7).Value = "Y" ' Summary indicator
    CSVRow = CSVRow + 1
  Next QuoteRow
  
  'moved closure of AUDC workbook until after pulled bits for summary
  If Quote.Range("DiscToolBoMtype").Value = Wizard.Sheets("Scratch").Range("GOEM").Value Then
    XLSbk.Close False
  End If
   
  CSV.Range(CSV.Cells(1, 1), CSV.Cells(CSVRow, 6)).Calculate
   
  If Not CSV.Visible Then
    ActiveWorkbook.Unprotect Password:="acadmin"
    CSV.Visible = True
    CSV.Copy
    CSV.Visible = False
    ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:=acadmin
  Else
    CSV.Copy
  End If
  With Workbooks(Workbooks.count)
    .SaveAs filename:=FilePath & CSVName, FileFormat:=xlCSV
    .Close False
  End With
  
  MsgBox "CSV and reference Excel files have been placed in C:\SFDC-CSVs\", Title:="AudioCodes Ordering Wizard"
   
  Application.Calculation = xlCalculationAutomatic
  Application.ScreenUpdating = True
   
End Sub


Private Sub ExportDiscountedBoM()
  Dim POexport As Workbook, POcontent As Workbook
  Dim POexportSheet As Worksheet
  Dim POFileName As String
    
  Application.ScreenUpdating = False
  
  Set POcontent = ThisWorkbook
  
  Set POexport = Workbooks.Add
  Set POexportSheet = POexport.Worksheets(1)
    
  With POexportSheet
    'Move formatting first...
    'Move into same cell on new sheet to preserve integrity of absolute references
    POcontent.Sheets("DiscTool").Range("A6:AK513").Copy
    .Range("A6").PasteSpecial Paste:=xlPasteColumnWidths, Operation:=xlNone, SkipBlanks:=False, Transpose:=False

    'Then content...starting at 1 keeps the space for command bar buttons
    POcontent.Sheets("DiscTool").Range("A1:AK513").Copy
    .Paste Destination:=POexportSheet.Range("A1")
    
    'set local copies of pricingtype and pricing period
    POcontent.Sheets("DiscTool").Range("AK6:AK9").Copy
    .Range("AK6:AK9").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False

    
    'Mirror the Instructions Hiding format from the tool to the export
    .Rows("2:5").RowHeight = POcontent.Sheets("DiscTool").Rows("2").RowHeight
    
    'Remove named references to scratch tab in BoM header
    .Range("D7").Copy
    .Range("D7").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    .Range("E7").Copy
    .Range("E7").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    
    ' Clear File Name Entry Text
    .Cells(9, 2).MergeArea.ClearContents
    .Cells(11, 2).MergeArea.ClearContents
    .Cells(9, 12).MergeArea.Copy
    .Cells(9, 12).MergeArea.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False

   
    'Fix as is BoMtype checks in red discount baselines, and from the DiscToolBoMtype calc
    .Range("E8:E12").Copy
    .Range("E8:E12").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    .Range("D10:D12").Copy
    .Range("D10:D12").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    
    'These move b/c of column deletes for the champs/audc versions
    .Activate
    If left(POcontent.Name, 2) = "SE" Then
      .Range("AE2").Copy
      .Range("AE2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
      .Range("AE4").Copy
      .Range("AE4").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
      .Range("AK7").Copy
      .Range("AK7").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
      .Range("AK9").Copy
      .Range("AK9").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Else
      .Range("W2").Copy
      .Range("W2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
      .Range("W4").Copy
      .Range("W4").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
      .Range("X7").Copy
      .Range("X7").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
      .Range("X9").Copy
      .Range("X9").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End If
    
    
    'Delete Command Bar Buttons
    .Activate
    If left(POcontent.Name, 2) = "SE" Then
      ' This only exists on the SE version
      .Shapes("DiscToolExportCSV").Delete
      .Shapes("DiscToolPartnerDistiToggle").Delete
    End If
    .Shapes("DiscToolTargetButton").Delete
    .Shapes("DiscToolCalcDiscToTarg").Delete
    .Shapes("DiscToolClearTarg").Delete
    .Shapes("DiscToolExportXLS").Delete
    .Shapes("DiscToolGTQuote").Delete
    .Shapes("DiscToolResetDisc").Delete
    .Shapes("DiscToolClearBom").Delete
    .Shapes("DiscToolHelp").Delete
    If left(POcontent.Name, 12) <> "AUDC-Genesys" Then
      ' Start Sheet doesn't exist on Genesys version
      .Shapes("DiscToolGTStart").Delete
    End If

    'Delete any names used by macros or other sheets
    For Each NameToDelete In POexport.Names
      If left(NameToDelete.Name, 1) <> "_" Then
        NameToDelete.Delete
      End If
    Next NameToDelete
    
    If POcontent.Sheets("DiscTool").Range("AE2").Value = POcontent.Sheets("Scratch").Range("GOEM").Value Then
      .Cells(9, 12).MergeArea.Value = "Discounted Price"
    End If
    
    'Hide support columns
    .Range("AE1:AK1").ColumnWidth = 0
    .Range("A5").RowHeight = 15
    
    Application.CutCopyMode = False
    .Range("A1").Activate
  End With
  
  Application.ScreenUpdating = True
End Sub

Private Sub ClearDiscToolBom()
   Application.ScreenUpdating = False
   
   With Sheets("DiscTool")
     .Range("B13:G512").ClearContents
     .Range("J13:J512").ClearContents
     .Range("U13:V512").ClearContents
     .Cells(11, 2).Value = "AUDC Disc BoM"
   End With
   
   ResetDiscToolDiscounts
   Application.ScreenUpdating = False
   Application.Goto Reference:=Sheets("DiscTool").Range("A1"), Scroll:=True
   Application.ScreenUpdating = True
End Sub

Private Sub ResetDiscToolDiscounts()
   Application.ScreenUpdating = False
   'Application.Calculation = xlCalculationManual
   
   With Sheets("DiscTool")
     .Range("J13:J512").ClearContents
     If left(ThisWorkbook.Name, 2) = "SE" Then
       .Range("E8").Formula = "=IF($AE$2=""Genesys"", 0, 0.37)"
       .Range("E9").Formula = "=IF($AE$2=""Genesys"", """", 0.20)"
       .Range("G9").Formula = "=IF($AE$2=""Genesys"", """", E9+F9)"
       .Range("E10").Formula = "=IF($AE$2=""Genesys"", 0, 0.20)"
       .Range("E11").Formula = "=IF($AE$2=""Genesys"", """", 0.10)"
       .Range("E12").Formula = "=IF($AE$2=""Genesys"", """", 0.35)"
       .Range("D9").Formula = "=IF($AE$2=""Genesys"", ""Services not independently discounted"", ""Annual Services Discount"")"
       .Range("D10").Formula = "=IF($AE$2=""Genesys"", ""Professional Services Discount"", ""Basic Professional Services Discount"")"
       .Range("D11").Formula = "=IF($AE$2=""Genesys"", """", ""Advanced Professional Services Discount"")"
       .Range("D12").Formula = "=IF($AE$2=""Genesys"", """", ""Partner Support (APSS) Discount (CloudBond products only)"")"
       .Range("F8").Value = 0
       .Range("F9").Value = 0
       .Range("F10").Value = 0
       If .Range("AE2").Value <> Sheets("Scratch").Range("GOEM").Value Then
         .Range("F11").Value = 0
         .Range("F12").Value = 0
        Else
         .Range("F8:F12").ClearContents
         .Range("D6:G6").ClearContents
         .Range("F12").ClearContents
        End If
       .Range("R7").Value = 0
       .Range("S7").Value = 0
       .Range("R8").Value = 0
       .Range("S8").Value = 0
       .Range("P7").Value = "DistiMargin"
       .Range("P8").Value = "PartnerMargin"
     Else
       .Range("E10").Value = 0
       .Range("E11").Value = 0
       .Range("E12").Value = 0
     End If
   End With

   'Application.Calculation = xlCalculationAutomatic
   Application.ScreenUpdating = True
End Sub

Private Sub CalculateDiscountsFromTargets()
  Dim Row, FirstRow, LastRow As Integer
  Dim Target, ExtMSRP, DistiProd, DistSvc, PartProd, PartSvc As Double

  Set DiscTool = Sheets("DiscTool")
  FirstRow = 15
  LastRow = DiscTool.Cells(DiscTool.Rows.count, "C").End(xlUp).Row

  'Set up Disti & Partner Margin & Discount values
  DistiProd = DiscTool.Range("R7").Value
  DistiSvc = DiscTool.Range("S7").Value
  PartProd = DiscTool.Range("R8").Value
  PartSvc = DiscTool.Range("S8").Value
  
  'Go through first and clear all per item discounts
  
  For Row = FirstRow To LastRow
  If Not IsNumeric(DiscTool.Cells(Row, 2).Value) Or left(DiscTool.Cells(Row, 3).Value, 4) = "Note" Then
    'These are header rows, blank rows, or pseudo CPNs i added for delivering notes into BoMs.  do nothing
    Else
      If DiscTool.Cells(Row, 2).Value Mod 10 = 0 Then
        'Another header row, nested to avoid executing Mod on Item No.
      Else
        'Grouping allows a single (or even multiple) target value(s) to be associated with multiple lines in the BoM.
        '  The multiple items in the BoM should be discounted equivalently, and their discounted total
        '  should equal the Target.
        If left(ThisWorkbook.Name, 2) = "SE" Then
          If DiscTool.Cells(Row, 21).Value = "" Then
            Target = DiscTool.Cells(Row, 22).Value
            ExtMSRP = DiscTool.Cells(Row, 8).Value
          Else
            Target = Application.SumIf(DiscTool.Range(DiscTool.Cells(FirstRow, 21), DiscTool.Cells(LastRow, 21)), _
                                        DiscTool.Cells(Row, 21).Value, DiscTool.Range(DiscTool.Cells(FirstRow, 22), DiscTool.Cells(LastRow, 22)))
            ExtMSRP = Application.SumIf(DiscTool.Range(DiscTool.Cells(FirstRow, 21), DiscTool.Cells(LastRow, 21)), _
                                        DiscTool.Cells(Row, 21).Value, DiscTool.Range(DiscTool.Cells(FirstRow, 8), DiscTool.Cells(LastRow, 8)))
          End If
          
          If Target > 0 Or DiscTool.Cells(Row, 21).Value <> "" Then
            'Clear per item disc so col m can be used for existing discount without
            '  corruption of col J value that's being written to.
            DiscTool.Cells(Row, 10).Value = 0
            
            If DiscTool.Range("P7").Value = "DistiMargin" Then
              If DiscTool.Range("P8").Value = "PartnerMargin" Then
                'Disti & Partner Margin
                If left(DiscTool.Cells(Row, 7).Value, 3) = "svc" Then
                  DiscTool.Cells(Row, 10).Value = 1 - (Target / ExtMSRP) * (1 - DistiSvc) * (1 - PartSvc) - DiscTool.Cells(Row, 13)
                Else
                  DiscTool.Cells(Row, 10).Value = 1 - (Target / ExtMSRP) * (1 - DistiProd) * (1 - PartProd) - DiscTool.Cells(Row, 13)
                End If ' svc
              Else
                ' Disti Margin and Partner Discount
                If left(DiscTool.Cells(Row, 7).Value, 3) = "svc" Then
                  DiscTool.Cells(Row, 10).Value = (1 - PartSvc - Target / ExtMSRP) * (1 - DistiSvc) / ExtMSRP
                Else
                  DiscTool.Cells(Row, 10).Value = (1 - PartProd - Target / ExtMSRP) * (1 - DistiProd) / ExtMSRP
                End If ' svc
              End If 'Partner check
            Else ' dist check
              ' Disti Discount and either Partner Margin or Partner Discount
              DiscTool.Cells(Row, 10) = (DiscTool.Cells(Row, 18).Value - Target) / ExtMSRP
            End If ' dist chedk
          End If ' target > 0
        Else ' not SE
          If DiscTool.Cells(Row, 15).Value = "" Then
            Target = DiscTool.Cells(Row, 16).Value
            ExtMSRP = DiscTool.Cells(Row, 8).Value
          Else
            Target = Application.SumIf(DiscTool.Range(DiscTool.Cells(FirstRow, 15), DiscTool.Cells(LastRow, 15)), _
                                        DiscTool.Cells(Row, 15).Value, DiscTool.Range(DiscTool.Cells(FirstRow, 16), DiscTool.Cells(LastRow, 16)))
            ExtMSRP = Application.SumIf(DiscTool.Range(DiscTool.Cells(FirstRow, 15), DiscTool.Cells(LastRow, 15)), _
                                        DiscTool.Cells(Row, 15).Value, DiscTool.Range(DiscTool.Cells(FirstRow, 8), DiscTool.Cells(LastRow, 8)))
          End If

          If Target > 0 Or DiscTool.Cells(Row, 21).Value <> "" Then
            'Clear per item disc so col m can be used for existing discount without
            '  corruption of col J value that's being written to.
            DiscTool.Cells(Row, 10).Value = 0
            
            DiscTool.Cells(Row, 10).Value = (DiscTool.Cells(Row, 12).Value - Target) / ExtMSRP
          End If ' target >0
        End If ' Se
      End If ' 2nd header check
    End If '1st header check
   Next Row

End Sub

Private Sub ClearTargets()
  If left(ThisWorkbook.Name, 2) = "SE" Then
    Sheets("DiscTool").Range("U13:V512").ClearContents
  Else
    Sheets("DiscTool").Range("O13:P512").ClearContents
  End If
End Sub
Private Sub PriceTargetToggle()
  Set DiscTool = Sheets("DiscTool")
  If left(ThisWorkbook.Name, 2) = "SE" Then
    If DiscTool.Range("PriceTargetToggle").Value = "Show" Then
      DiscTool.Range("PriceTargetToggle").Value = "Hide"
      DiscTool.Columns("U:W").ColumnWidth = 0
      DiscTool.Shapes("DiscToolTargetButton").TextFrame.Characters.Text = "Set Price Targets"
    Else
      'Show
      DiscTool.Range("PriceTargetToggle").Value = "Show"
      DiscTool.Columns("U:V").ColumnWidth = 15
      DiscTool.Columns("W").ColumnWidth = 2
      DiscTool.Shapes("DiscToolTargetButton").TextFrame.Characters.Text = "Hide Price Targets"
    End If
  Else ' AUDC or Genesys
    If DiscTool.Range("PriceTargetToggle").Value = "Show" Then
      DiscTool.Range("PriceTargetToggle").Value = "Hide"
      DiscTool.Columns("O:Q").ColumnWidth = 0
      DiscTool.Shapes("DiscToolTargetButton").TextFrame.Characters.Text = "Set Price Targets"
    Else
      'Show
      DiscTool.Range("PriceTargetToggle").Value = "Show"
      DiscTool.Columns("O:P").ColumnWidth = 15
      DiscTool.Columns("Q").ColumnWidth = 2
      DiscTool.Shapes("DiscToolTargetButton").TextFrame.Characters.Text = "Hide Price Targets"
    End If
  End If
End Sub

Private Sub DiscToolHelp()
    With Sheets("Detail")
       .Activate
       .Range("DiscToolHelpDetail").RowHeight = 200
       .Range("DiscToolHelpDetail").Activate
       Application.Goto Reference:=.Range("DiscToolHelpDetail"), Scroll:=True
       .Range("AF2:AG5").Copy
       .Range("D9:G12").PasteSpecial
    End With
 End Sub
 
 Private Sub TestExport()
'Not Used
  Dim DiscTool As Worksheet
  Dim ExportName, ExportPath As String
  
  Set DiscTool = Sheets("DiscTool")
  
  'Generate the XLS file name
  TimeStamp = Format(CStr(Now), "YYYY-MM-DD-HH-MM-SS")
  ExportPath = "C:\SFDC-CSVs\"
  ExportName = "DiscTool-Export-" & TimeStamp & ".xlsx"
 
  DiscTool.Copy
  With Workbooks(Workbooks.count)
    .SaveAs filename:=ExportPath & ExportName, FileFormat:=xlOpenXMLWorkbook, ConflictResolution:=xlLocalSessionChanges
    .Close False
  End With
End Sub
Private Sub PartnerDistiPricing()
  With Sheets("DiscTool")
    If .Columns("O").ColumnWidth = 0 Then
      .Shapes("DiscToolPartnerDistiToggle").TextFrame.Characters.Text = "Hide Partner & Disti Pricing"
      .Columns("O").ColumnWidth = 15
      .Columns("P").ColumnWidth = 15
      .Columns("Q").ColumnWidth = 2
      .Columns("R").ColumnWidth = 15
      .Columns("S").ColumnWidth = 15
      .Columns("T").ColumnWidth = 2
      .Columns("AB:AC").ColumnWidth = 15
      .Range("M7").Value = "Disti: Select One ->"
      .Range("M8").Value = "Partner: Select One ->"
      .Range("L7:M8").Interior.Color = RGB(255, 192, 0)
    Else
      .Shapes("DiscToolPartnerDistiToggle").TextFrame.Characters.Text = "Show Partner & Disti Pricing"
      .Columns("O:T").ColumnWidth = 0
      .Columns("AB:AC").ColumnWidth = 0
      .Range("M7").Value = ""
      .Range("M8").Value = ""
      .Range("L7:M8").Interior.Color = RGB(0, 51, 102)
    End If
  End With
End Sub

Private Sub mytry()
Dim string1, string2 As String
string1 = "IF($AE$2=""Genesys"", $G$8, $G$9)"


 Sheets("DiscTool").Range("L16:L20").Replace what:="IF($AE$2=""Genesys"", $G$8, $G$9)", Replacement:="IF(INDIRECT(""R[-1]C[-5]"", 0)=""hw"", 0, $G$8)", _
    LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, _
    SearchFormat:=False, ReplaceFormat:=False
End Sub
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CBXSThwRep, 95, 1, MSForms, ComboBox"
Attribute VB_Control = "CBXSTupg, 85, 2, MSForms, ComboBox"
Attribute VB_Control = "CBXSTha, 87, 3, MSForms, ComboBox"
Attribute VB_Control = "CBXSTccm, 88, 4, MSForms, ComboBox"
Attribute VB_Control = "CBXSTsup, 89, 5, MSForms, ComboBox"
Attribute VB_Control = "CBXSTann, 91, 6, MSForms, ComboBox"
Attribute VB_Control = "CBXSTemsC, 92, 7, MSForms, ComboBox"
Attribute VB_Control = "CBXSTcallDel, 93, 8, MSForms, ComboBox"
' Sheet16(SmartTap) - Targets for Sheet specific buttons
' - Private SmartTapCopyBoMtoPO
' - Private SmartTapMakeDefault
' - Private SmartTapResetDefault
' - Private SmartTapSuppressServices
'

Private Sub SmartTapCopyBoMtoPO()
  Call CopyBoMtoPO("SmartTap")
End Sub

Private Sub SmartTapMakeDefault()
  Call MakeDefault("SmartTap")
End Sub

Private Sub SmartTapResetDefault()
  Call ResetDefault("SmartTap", "STsvcOff", "StsvcOffButton")
End Sub

Private Sub SmartTapSuppressServices()
  Call SuppressServices("SmartTap", "STsvcOff", "StsvcOffButton")
End Sub
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Sheet17(Manual Selector) - Targets for Sheet specific buttons
' - Private GoToManual
' - Private ClearSelections - Used in Ready to Release
' - Private ManualSelectorHelp
' - Private ClearManualSelectorFilters - Used in Ready to Release
' - Private OneLineAutofitToggle
' - Private FilterManualSelection - Used in CustFilters
' - Private ShowSelectedToggle
' - Private ToggleFilterBar
' - Private CustomizeFilters
' - Private AnyFilter
' - Private T1FilterSet
' - Private T2FilterSet
' - Private T3FilterSet
' - Private T4FilterSet
' - Private T5FilterSet
' - Private B1FilterSet
' - Private B2FilterSet
' - Private B3FilterSet
' - Private B4FilterSet
' - Private B5FilterSet
'

Private Sub GoToManual()
    With Sheets("Manual")
       .Activate
       .Range("D5").Activate
       Application.Goto Reference:=.Range("A1"), Scroll:=True
    End With
End Sub

Private Sub ClearSelections()
    Sheets("Manual Selector").Range("C8:C3500").ClearContents
    Application.Goto Reference:=Sheets("Manual Selector").Range("A1"), Scroll:=True
End Sub

Private Sub ManualSelectorHelp()
    With Sheets("Detail")
       .Activate
       .Range("ManSelHelp").RowHeight = 270
       .Range("ManSelHelp").Activate
       Application.Goto Reference:=.Range("ManSelHelp"), Scroll:=True
    End With
 End Sub

Private Sub ClearManualSelectorFilters()
   Application.ScreenUpdating = False
   Application.Calculation = xlCalculationManual
   If Sheets("Manual Selector").FilterMode Then Sheets("Manual Selector").ShowAllData
   Sheets("Manual Selector").Shapes("ShowSelectedToggle").TextFrame.Characters.Text = "Show Selected"
   Sheets("CustFilters").Range("ShowSelected").Value = "Filtered"
   Sheets("CustFilters").Range("FilterT1").Value = 1
   Sheets("CustFilters").Range("FilterT2").Value = 1
   Sheets("CustFilters").Range("FilterT3").Value = 1
   Sheets("CustFilters").Range("FilterT4").Value = 1
   Sheets("CustFilters").Range("FilterT5").Value = 1
   Sheets("CustFilters").Range("FilterB1").Value = 1
   Sheets("CustFilters").Range("FilterB2").Value = 1
   Sheets("CustFilters").Range("FilterB3").Value = 1
   Sheets("CustFilters").Range("FilterB4").Value = 1
   Sheets("CustFilters").Range("FilterB5").Value = 1
   Call AnyFilter("T", "1")
   Call AnyFilter("T", "2")
   Call AnyFilter("T", "3")
   Call AnyFilter("T", "4")
   Call AnyFilter("T", "5")
   Call AnyFilter("B", "1")
   Call AnyFilter("B", "2")
   Call AnyFilter("B", "3")
   Call AnyFilter("B", "4")
   Call AnyFilter("B", "5")
   Application.Calculation = xlCalculationAutomatic
   FilterManualSelection
   Application.ScreenUpdating = True
End Sub

Private Sub OneLineAutofitToggle()
Dim ManSelRow As Integer
  If Sheets("Scratch").Range("ManSelRowHeight").Value = "Autofit" Then
     Sheets("Manual Selector").Range("C7:C3500").RowHeight = 15
     Sheets("Scratch").Range("ManSelRowHeight").Value = "OneLine"
     Sheets("Manual Selector").Shapes("ManSelRowHeightToggle").TextFrame.Characters.Text = "Autofit"
  Else
     Sheets("Manual Selector").Range("C7:C3500").Rows.AutoFit
     Sheets("Scratch").Range("ManSelRowHeight").Value = "Autofit"
     Sheets("Manual Selector").Shapes("ManSelRowHeightToggle").TextFrame.Characters.Text = "OneLine"
     
  End If
End Sub
  
Private Sub FilterManualSelection()
  Dim Row As Integer
  Dim FilterArray() As Variant
  Dim FilterCollection As New Collection
  
  'Clear any existing filters first
  If Sheets("Manual Selector").FilterMode Then Sheets("Manual Selector").ShowAllData
  
  'Collect Filter Selected Filter Criteria in FilterCollection
  'to avoid redimensioning the Array for each element
  For Row = 8 To 47
    If Sheets("CustFilters").Cells(Row, 15).Value = 1 Then
      FilterCollection.Add Sheets("CustFilters").Cells(Row, 2).Value
    End If
  Next Row
  
  'Copy the Collection into the Array if there are any elements in it
  If FilterCollection.count > 0 Then
    ReDim FilterArray(1 To FilterCollection.count) As Variant
    For i = 1 To FilterCollection.count
      FilterArray(i) = FilterCollection(i)
    Next
    'Pass the Array to the Autofilter Criteria
    Sheets("Manual Selector").Range("E6:E3500").AutoFilter Field:=3, Criteria1:=Array(FilterArray), Operator:=xlFilterValues
  End If
    
End Sub

Private Sub ShowSelectedToggle()
' Shows only the selected items

  Application.ScreenUpdating = False
  If Sheets("CustFilters").Range("ShowSelected").Value = "Selected" Then
    Sheets("Manual Selector").Activate
    If Sheets("Manual Selector").FilterMode Then Sheets("Manual Selector").ShowAllData
    FilterManualSelection
    Sheets("CustFilters").Range("ShowSelected").Value = "Filtered"
    Sheets("Manual Selector").Shapes("ShowSelectedToggle").TextFrame.Characters.Text = "Show Selected"
  Else
    If Sheets("Manual Selector").FilterMode Then Sheets("Manual Selector").ShowAllData
    Sheets("Manual Selector").Range("C7:C3500").AutoFilter Field:=1, Criteria1:="<>"
    Sheets("CustFilters").Range("ShowSelected").Value = "Selected"
    Sheets("Manual Selector").Shapes("ShowSelectedToggle").TextFrame.Characters.Text = "Show Filtered"
  End If
  Application.ScreenUpdating = True
End Sub

Private Sub ToggleFilterBar()
  Application.ScreenUpdating = False
  ActiveWorkbook.Unprotect Password:="acadmin"
  Sheets("Manual Selector").Unprotect Password:="acadmin"
  
  If Sheets("Manual Selector").Shapes("FilterBarToggle").TextFrame.Characters.Text = "Show Filter Bar" Then
    Sheets("Manual Selector").Range("A4").RowHeight = 75
    Sheets("Manual Selector").Range("A2").RowHeight = 0
    Sheets("Manual Selector").Shapes("FilterBarToggle").TextFrame.Characters.Text = "Hide Filter Bar"
    If Sheets("Start").Shapes("InstructionsToggleButton").TextFrame.Characters.Text = "Hide Instructions" Then
      'Since this isn't the toggle for hide instructions, that means that show is current setting, so switch messages
      Sheets("Manual Selector").Range("A3").RowHeight = 75
    Else
      Sheets("Manual Selector").Range("A3").RowHeight = 0
    End If
  Else ' user clicked Hide Filter Bar
    Sheets("Manual Selector").Range("A3").RowHeight = 0
    Sheets("Manual Selector").Range("A4").RowHeight = 0
    Sheets("Manual Selector").Shapes("FilterBarToggle").TextFrame.Characters.Text = "Show Filter Bar"
    If Sheets("Start").Shapes("InstructionsToggleButton").TextFrame.Characters.Text = "Hide Instructions" Then
      Sheets("Manual Selector").Range("A2").RowHeight = 75
    Else
      Sheets("Manual Selector").Range("A2").RowHeight = 0
    End If
  End If
  
  Sheets("Manual Selector").Protect Password:="acadmin", UserInterFaceOnly:=True, AllowFiltering:=True
  ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:=acadmin
  Application.ScreenUpdating = True
End Sub

Private Sub CustomizeFilters()
  Application.ScreenUpdating = False
  ActiveWorkbook.Unprotect Password:="acadmin"
  Application.DisplayAlerts = False
  Sheets("CustFilters").Visible = True
  ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:=acadmin
  Sheets("CustFilters").Activate
  Sheets("CustFilters").Range("D5").Activate
  Application.Goto Reference:=Sheets("CustFilters").Range("A1"), Scroll:=True
  Application.DisplayAlerts = True
  Application.ScreenUpdating = True
End Sub

Private Sub AnyFilter(Row As String, col As String)
  Dim Button, Toggle, Temp As String
  
  Temp = Row & col
  Toggle = "Filter" & Temp
  Button = Temp & "Filter"
  If Sheets("CustFilters").Range(Toggle).Value = 0 Then
    Sheets("CustFilters").Range(Toggle).Value = 1
    Sheets("Manual Selector").Shapes(Button).ShapeStyle = msoShapeStylePreset38
  Else
    Sheets("CustFilters").Range(Toggle).Value = 0
    With Sheets("Manual Selector").Shapes(Button).Fill
      .Visible = msoTrue
      .ForeColor.ObjectThemeColor = msoThemeColorBackground1
      .ForeColor.TintAndShade = 0
      .ForeColor.Brightness = -0.25
      .Transparency = 0
      .Solid
    End With
  End If
End Sub

Private Sub T1FilterSet()
  Call AnyFilter("T", "1")
  FilterManualSelection
End Sub

Private Sub T2FilterSet()
  Call AnyFilter("T", "2")
  FilterManualSelection
End Sub

Private Sub T3FilterSet()
  Call AnyFilter("T", "3")
  FilterManualSelection
End Sub

Private Sub T4FilterSet()
  Call AnyFilter("T", "4")
  FilterManualSelection
End Sub

Private Sub T5FilterSet()
  Call AnyFilter("T", "5")
  FilterManualSelection
End Sub

Private Sub B1FilterSet()
  Call AnyFilter("B", "1")
  FilterManualSelection
End Sub

Private Sub B2FilterSet()
  Call AnyFilter("B", "2")
  FilterManualSelection
End Sub

Private Sub B3FilterSet()
  Call AnyFilter("B", "3")
  FilterManualSelection
End Sub

Private Sub B4FilterSet()
  Call AnyFilter("B", "4")
  FilterManualSelection
End Sub

Private Sub B5FilterSet()
  Call AnyFilter("B", "5")
  FilterManualSelection
End Sub
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CBXcbAppType, 26, 3, MSForms, ComboBox"
Attribute VB_Control = "CBXcbApp, 24, 4, MSForms, ComboBox"
Attribute VB_Control = "CBXcbHwRep, 15, 5, MSForms, ComboBox"
Attribute VB_Control = "CBXcbSup, 14, 6, MSForms, ComboBox"
Attribute VB_Control = "CBXcbImpl, 12, 7, MSForms, ComboBox"
Attribute VB_Control = "CBXcbEmsC, 10, 8, MSForms, ComboBox"
Attribute VB_Control = "CBXcbElin, 9, 9, MSForms, ComboBox"
Attribute VB_Control = "CBXcbPair, 8, 10, MSForms, ComboBox"
Attribute VB_Control = "CBXcbCom, 16, 11, MSForms, ComboBox"
Attribute VB_Control = "CBXcbStdPlus, 17, 12, MSForms, ComboBox"
Attribute VB_Control = "CBXcbBkUp, 18, 13, MSForms, ComboBox"
' Sheet19(CB 365) - Targets for Sheet specific buttons
' - Private OneBoxCopyBoMtoPO
' - Private OneBoxMakeDefault
' - Private OneBoxResetDefault
' - Private OBSuppressServices
' - Private CBXcbApp_Change
'

Private Sub OneBoxCopyBoMtoPO()
  Call CopyBoMtoPO("CB 365")
End Sub

Private Sub OneBoxMakeDefault()
  Call MakeDefault("CB 365")
End Sub

Private Sub OneBoxResetDefault()
  Call ResetDefault("CB 365", "CBsvcOff", "CBsvcOffButton")
End Sub

Private Sub OBSuppressServices()
  Call SuppressServices("CB 365", "CBsvcOff", "CBsvcOffButton")
End Sub

Private Sub CBXcbApp_Change()
  ' Set the Implementation Range and Value based on Product Type Selected
  If CBXcbApp.Value = Sheets("Scratch").Range("CB365x").Value Then
    CBXcbAppType.ListFillRange = "=CB365typeRNG"
    CBXcbAppType.Value = Sheets("Scratch").Range("CBpro").Value
    Sheets("CB 365").Range("CBappTypeDefault").Value = Sheets("Scratch").Range("CBpro").Value
    
    CBXcbPair.ListFillRange = "=CBpairRNG"
    CBXcbPair.Value = Sheets("Scratch").Range("pairNot").Value
    Sheets("CB 365").Range("CBpairDefault").Value = Sheets("Scratch").Range("pairNot").Value
    
    CBXcbImpl.ListFillRange = "=CB365implRNG"
    CBXcbImpl.Value = Sheets("Scratch").Range("RemotePSTN").Value
    Sheets("CB 365").Range("CBimplDefault").Value = Sheets("Scratch").Range("RemotePSTN").Value
  End If
  
  If CBXcbApp.Value = Sheets("Scratch").Range("CBcce").Value Then
    CBXcbAppType.ListFillRange = "=CCEtypeRNG"
    CBXcbAppType.Value = Sheets("Scratch").Range("CCEsvr").Value
    Sheets("CB 365").Range("CBappTypeDefault").Value = Sheets("Scratch").Range("CCEsvr").Value
    
    CBXcbPair.ListFillRange = "=CBpairRNG"
    CBXcbPair.Value = Sheets("Scratch").Range("pairNot").Value
    Sheets("CB 365").Range("CBpairDefault").Value = Sheets("Scratch").Range("pairNot").Value
    
    CBXcbImpl.ListFillRange = "=CBRESTimplRNG"
    CBXcbImpl.Value = Sheets("Scratch").Range("Remote").Value
    Sheets("CB 365").Range("CBimplDefault").Value = Sheets("Scratch").Range("Remote").Value
  End If
  
  If CBXcbApp.Value = Sheets("Scratch").Range("CBump").Value Then
    CBXcbAppType.ListFillRange = "=CBumpTypeRNG"
    If CBXcbAppType.Value = Sheets("Scratch").Range("ServiceProvider").Value Then
      'leave it
    Else
      CBXcbAppType.Value = Sheets("Scratch").Range("Enterprise").Value
    End If
    Sheets("CB 365").Range("CBappTypeDefault").Value = Sheets("Scratch").Range("Enterprise").Value
    Sheets("CB 365").Range("CBses").Value = 0
    
    CBXcbPair.ListFillRange = "=CBpairRNG"
    CBXcbPair.Value = Sheets("Scratch").Range("pairNot").Value
    Sheets("CB 365").Range("CBpairDefault").Value = Sheets("Scratch").Range("pairNot").Value
        
    CBXcbImpl.ListFillRange = "=CBRESTimplRNG"
    CBXcbImpl.Value = Sheets("Scratch").Range("Remote").Value
    Sheets("CB 365").Range("CBimplDefault").Value = Sheets("Scratch").Range("Remote").Value
  End If
  
  If CBXcbApp.Value = Sheets("Scratch").Range("CBxum").Value Then
    CBXcbAppType.ListFillRange = "=CBxumTypeRNG"
    CBXcbAppType.Value = Sheets("Scratch").Range("XUMconn").Value
    Sheets("CB 365").Range("CBappTypeDefault").Value = Sheets("Scratch").Range("XUMconn").Value
    
    CBXcbPair.ListFillRange = "=CByesNoRNG"
    CBXcbPair.Value = Sheets("Scratch").Range("No").Value
    Sheets("CB 365").Range("CBpairDefault").Value = Sheets("Scratch").Range("No").Value
    
    CBXcbImpl.ListFillRange = "=CBRESTimplRNG"
    CBXcbImpl.Value = Sheets("Scratch").Range("Remote").Value
    Sheets("CB 365").Range("CBimplDefault").Value = Sheets("Scratch").Range("Remote").Value
  End If
  
  If CBXcbApp.Value = Sheets("Scratch").Range("CBopch").Value Then
    CBXcbAppType.ListFillRange = "=CB365typeRNG"
    CBXcbAppType.Value = Sheets("Scratch").Range("CBpro").Value
    Sheets("CB 365").Range("CBappTypeDefault").Value = Sheets("Scratch").Range("CBpro").Value
    
    CBXcbPair.ListFillRange = "=CBpairRNG"
    CBXcbPair.Value = Sheets("Scratch").Range("pairNot").Value
    Sheets("CB 365").Range("CBpairDefault").Value = Sheets("Scratch").Range("pairNot").Value
    
    CBXcbImpl.ListFillRange = "=CBRESTimplRNG"
    CBXcbImpl.Value = Sheets("Scratch").Range("Remote").Value
    Sheets("CB 365").Range("CBimplDefault").Value = Sheets("Scratch").Range("Remote").Value
  End If
  
End Sub

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CBXm8ps2, 32, 0, MSForms, ComboBox"
Attribute VB_Control = "CBXm8mgdSvcs, 31, 1, MSForms, ComboBox"
Attribute VB_Control = "CBXm8rProxy, 30, 2, MSForms, ComboBox"
Attribute VB_Control = "CBXm8LicenseType, 29, 3, MSForms, ComboBox"
Attribute VB_Control = "CBXm8type, 27, 4, MSForms, ComboBox"
Attribute VB_Control = "CBXm8hwRep, 25, 5, MSForms, ComboBox"
Attribute VB_Control = "CBXm8sup, 24, 6, MSForms, ComboBox"
Attribute VB_Control = "CBXm8cut, 23, 7, MSForms, ComboBox"
Attribute VB_Control = "CBXm8impl, 22, 8, MSForms, ComboBox"
Attribute VB_Control = "CBXm8spans, 20, 9, MSForms, ComboBox"
Attribute VB_Control = "CBXm8emsC, 17, 10, MSForms, ComboBox"
Attribute VB_Control = "CBXm8elin, 16, 11, MSForms, ComboBox"
Attribute VB_Control = "CBXm8lync, 15, 12, MSForms, ComboBox"
Attribute VB_Control = "CBXm8sba, 13, 13, MSForms, ComboBox"
Attribute VB_Control = "CBXm8bri, 11, 14, MSForms, ComboBox"
Attribute VB_Control = "CBXm8fxo, 10, 15, MSForms, ComboBox"
Attribute VB_Control = "CBXm8fxs, 6, 16, MSForms, ComboBox"
Attribute VB_Control = "CBXm8ha, 28, 17, MSForms, ComboBox"
' Sheet2(M800B) - Targets for Sheet specific buttons
' - Private CopyBoMtoPO
' - Private M800BMakeDefault
' - Private M800BResetDefault
' - Private M800BSuppressServices
'

Private Sub M800BCopyBoMtoPO()
  Call CopyBoMtoPO("M800B")
End Sub

Private Sub M800BMakeDefault()
  Call MakeDefault("M800B")
End Sub

Private Sub M800BResetDefault()
  Call ResetDefault("M800B", "m8svcOff", "m8svcOffButton")
End Sub

Private Sub M800BSuppressServices()
  Call SuppressServices("M800B", "m8svcOff", "m8svcOffButton")
End Sub
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CBXsettingsPricingType, 3, 0, MSForms, ComboBox"
Private Sub CurrencySwitch()
    Application.ScreenUpdating = False
    
    'First Clear contents of Quote and DiscTool to avoid a quote with mixed numbers
    MsgBox "Switching Currencies Clears BoMs on Quote and DiscTool Tabs", vbOKOnly
    Sheets("Quote").Range("B7:G507").ClearContents
    Sheets("DiscTool").Range("B13:G513").ClearContents
    
    With Sheets("Settings")
       If .Range("Currency").Value = Sheets("Scratch").Range("Euro").Value Then
          .Range("Currency").Value = Sheets("Scratch").Range("USD").Value
          .Shapes("SettingsCurrencySwitch").TextFrame.Characters.Text = "Switch to Euros"
       Else
          .Range("Currency").Value = Sheets("Scratch").Range("Euro").Value
          .Shapes("SettingsCurrencySwitch").TextFrame.Characters.Text = "Switch to Dollars"
       End If
    End With
    
    Application.CutCopyMode = False
    Application.ScreenUpdating = True
End Sub

Private Sub SwitchMultiYrSupEnable()
  If Sheets("Scratch").Range("MultiYrSupEnabled") Then
    Sheets("Scratch").Range("MultiYrSupEnabled").Value = False
  Else
    Sheets("Scratch").Range("MultiYrSupEnabled").Value = True
  End If
End Sub

Private Sub SwitchIncMultiYrDisc()
  If Not (Sheets("Scratch").Range("MultiYrSupEnabled")) Then
    MsgBox "Not Applicable if Multi-YEar Support is not enabled.", Title:="AudioCodes Ordering Wizard"
  Else
    If Sheets("Scratch").Range("IncMultiYrDisc") Then
      Sheets("Scratch").Range("IncMultiYrDisc").Value = False
    Else
      Sheets("Scratch").Range("IncMultiYrDisc").Value = True
    End If
  End If
End Sub

Private Sub CBXsettingsPricingType_Change()
  Dim Msg, Style, Title, Response As String
  
  If CPTtempFlag = "NoMsg" Then
    CPTtempFlag = "Msg"
    Exit Sub
  End If
    
  Msg = "Changing Pricing Types clears the Quote and DiscTool BoMs - Proceed?"
  Style = vbYesNo + vbCritical + vbDefaultButton2    ' Define buttons.
  Title = "PricingType Change"    ' Define title.

  Response = MsgBox(Msg, Style, Title)
  
  If Response = vbYes Then    'Clear the Quote and DiscTool BoMs
    'Total Row is based on current settings, not settings used when BoM is placed in Quote tab.
    'so a 12M item will get treated like a 36M when setting changed.
    'So No carrover
    
    'Update currentstatus
    CurrentPricingType = Sheets("Settings").Range("PricingType").Value
    
    'Clear Quotes
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Sheets("Quote").Range("B7:G507").ClearContents
    Sheets("Quote").Range("N8:N107").ClearContents
    Sheets("DiscTool").Range("B13:G513").ClearContents
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
  Else
    'Put Selector Back the way it was
    CPTtempFlag = "NoMsg"
    CBXsettingsPricingType.Value = CurrentPricingType
  End If

End Sub


Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CBXvocaLang, 13, 1, MSForms, ComboBox"
Attribute VB_Control = "CBXvocaHwRep, 12, 2, MSForms, ComboBox"
Attribute VB_Control = "CBXvocaSup, 11, 3, MSForms, ComboBox"
Attribute VB_Control = "CBXvocaCut, 10, 4, MSForms, ComboBox"
Attribute VB_Control = "CBXvocaImpl, 9, 5, MSForms, ComboBox"
Attribute VB_Control = "CBXvocaType, 1, 6, MSForms, ComboBox"
Attribute VB_Control = "CBXvocaPlatformType, 2, 7, MSForms, ComboBox"
Attribute VB_Control = "CBXvocaHA, 6, 8, MSForms, ComboBox"
Attribute VB_Control = "CBXvocaMGWsbc, 8, 9, MSForms, ComboBox"
Attribute VB_Control = "CBXvocaNew, 14, 10, MSForms, ComboBox"
' Sheet25(Voca) - Targets for Sheet specific buttons
' - Private SBCsCopyBoMtoPO
' - Private SBCsMakeDefault
' - Private SBCsResetDefault
' - Private M0SuppressServices
'

Private Sub VocaCopyBoMtoPO()
  Call CopyBoMtoPO("Voca")
End Sub

Private Sub VocaMakeDefault()
  Call MakeDefault("Voca")
End Sub

Private Sub VocaResetDefault()
  Call ResetDefault("Voca", "VocaSvcOff", "VocasvcOffButton")
End Sub

Private Sub VocaSuppressServices()
  Call SuppressServices("Voca", "VocaSvcOff", "VocaSvcOffButton")
End Sub

Private Sub Worksheet_activate()
  'Set the Platform Range based on Subscription value
  'Cloud as a platform is only for subscription, and voca only supports monthly
  If Sheets("Settings").Range("PricingType").Value = Sheets("Scratch").Range("StdPurchase").Value Then
  'set platform to virtual/premise
    CBXvocaPlatformType.ListFillRange = "=VocaPlatformTypeRNG"
    If Sheets("Voca").Range("VocaPlatformType").Value = Sheets("Scratch").Range("Cloud").Value Then
    'cloud not supported in capex
      Sheets("Voca").Range("VocaPlatformType").Value = Sheets("Scratch").Range("Virtualized").Value
    End If
  Else
    If Sheets("Settings").Range("PricingType").Value = Sheets("Scratch").Range("SubscriptionMonthly").Value Then
    'set platform to virtual/premise/cloud
      CBXvocaPlatformType.ListFillRange = "=VocaPlatformTypeAcmRNG"
    Else
    '36M subscription not supported by Voca, set everything to none
    'don't do anything formulas in col c will handle
    End If
  End If
End Sub


Private Sub CBXvocaPlatformType_Change()
Dim lcl As String
  If CBXvocaPlatformType.Value = Sheets("Scratch").Range("Hardware").Value Then
    'SBC connectivity from PBX to Voca provided by M800B, only MGW applicable.
    'set the sbc/mgw range to none/mgw/sbc, default none
    CBXvocaMGWsbc.Value = Sheets("Scratch").Range("None").Value
  Else
    If CBXvocaPlatformType.Value = Sheets("Scratch").Range("Virtualized").Value Then
      'set sbc/mgw range to none/sbc/mgw, default sbc
      CBXvocaMGWsbc.Value = Sheets("Scratch").Range("SBC").Value
    Else
      'Cloud - set sbc/mgw range to none/sbc/mgw, default none
      CBXvocaMGWsbc.Value = Sheets("Scratch").Range("None").Value
    End If
  End If
End Sub

Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CBXm1mgdSvcs, 25, 0, MSForms, ComboBox"
Attribute VB_Control = "CBXm1licenseType, 24, 1, MSForms, ComboBox"
Attribute VB_Control = "CBXm1rProxy, 23, 2, MSForms, ComboBox"
Attribute VB_Control = "CBXm1fxo, 22, 3, MSForms, ComboBox"
Attribute VB_Control = "CBXm1bri, 21, 4, MSForms, ComboBox"
Attribute VB_Control = "CBXm1fxs, 20, 5, MSForms, ComboBox"
Attribute VB_Control = "CBXm1hwRep, 19, 6, MSForms, ComboBox"
Attribute VB_Control = "CBXm1sup, 18, 7, MSForms, ComboBox"
Attribute VB_Control = "CBXm1cut, 17, 8, MSForms, ComboBox"
Attribute VB_Control = "CBXm1impl, 16, 9, MSForms, ComboBox"
Attribute VB_Control = "CBXm1emsC, 14, 10, MSForms, ComboBox"
Attribute VB_Control = "CBXm1elin, 13, 11, MSForms, ComboBox"
Attribute VB_Control = "CBXm1sba, 12, 12, MSForms, ComboBox"
Attribute VB_Control = "CBXm1lync, 11, 13, MSForms, ComboBox"
Attribute VB_Control = "CBXm1spTyp, 6, 14, MSForms, ComboBox"
Attribute VB_Control = "CBXm1dualP, 5, 15, MSForms, ComboBox"
Attribute VB_Control = "CBXm1pstn, 4, 16, MSForms, ComboBox"
Attribute VB_Control = "CBXm1sbc, 3, 17, MSForms, ComboBox"
Attribute VB_Control = "CBXm1pkg, 2, 18, MSForms, ComboBox"
' Sheet3(M1KB) - Targets for Sheet specific buttons
' - Private M1KBCopyBoMtoPO
' - Private M1KBMakeDefault
' - Private M1KBResetDefault
' - Private M1KBSuppressServices
'

Private Sub M1KBCopyBoMtoPO()
  Call CopyBoMtoPO("M1KB")
End Sub

Private Sub M1KBMakeDefault()
  Call MakeDefault("M1KB")
End Sub

Private Sub M1KBResetDefault()
  Call ResetDefault("M1KB", "m1svcOff", "m1svcOffButton")
End Sub

Private Sub M1KBSuppressServices()
  Call SuppressServices("M1KB", "m1svcOff", "m1svcOffButton")
End Sub
Attribute VB_Name = "Sheet30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Sheet4(Quote) - Macros initiated from this sheet
' - Private ClearBoM - Used in ReadyToRelease
' - Private ExportPO
' - Private PricingButton
' - Private SeparateSwitch
' - Private ReNumber
' - Private QuoteHelp
' - Private ExportToCSVFromQuote
' - Private CopyQuotetoDiscTool
' - Private ViewDisclaimer
' - Private AddServicesToBoM
'

Private Sub ClearBoM()
  Application.ScreenUpdating = False
  Sheets("Quote").Range("B7:G1000").ClearContents
  Sheets("Quote").Range("N8:N506").ClearContents
  Sheets("Quote").Range("D5").Value = "AUDC BoM"
  Application.Goto Reference:=Sheets("Quote").Range("A1"), Scroll:=True
  Application.ScreenUpdating = True
End Sub

Private Sub ExportPO()
    Dim POexport As Workbook, POcontent As Workbook
    Dim POexportSheet, POcontentSheet As Worksheet
    Dim POFileName As String
    
    Application.ScreenUpdating = False
    
    Set POcontent = ThisWorkbook
    Set POcontentSheet = POcontent.Sheets("Quote")
    
    Set POexport = Workbooks.Add
    Set POexportSheet = POexport.Worksheets(1)
      
    'Move formatting first...
    'Move into same cell on new sheet to preserve integrity of absolute references
    POcontentSheet.Range("A5:X507").Copy
    POexportSheet.Range("A5").PasteSpecial Paste:=xlPasteColumnWidths, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    
    'Then content...starting at 5 leaves out all the command bar buttons
    ' Leave out Col q to avoid its names
    ' for cols y-ac, leave total row, and write blanks (not using name) to rest to r107
    POcontentSheet.Range("A5:P507").Copy
    POexportSheet.Paste Destination:=POexportSheet.Range("A5")
    POcontentSheet.Range("U2:X16").Copy
    POexportSheet.Paste Destination:=POexportSheet.Range("U2")
    POcontentSheet.Range("Y5:AD10").Copy
    POexportSheet.Paste Destination:=POexportSheet.Range("Y5")
    POexportSheet.Range("AE9:AE506").ClearContents
    POexportSheet.Range("Y11:AC107").Value = ""
    POexportSheet.Range("AB8").Formula = "=IF(INDIRECT(""J""&MATCH(MAX(J$8:J$107), J$1:J$107, 0)+1)=Z8, SUM(INDIRECT(""L4:L""&MATCH(MAX(J$8:J$107), J$1:J$107, 0))), """")"
    POexportSheet.Columns("Q:AK").ColumnWidth = 0
    'Set local copies of pricingtype and pricingperiod
    POcontentSheet.Range("W11:W15").Copy
    POexportSheet.Range("W11:W15").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    
    'Copy over aggregated sum totals
    POcontent.Sheets("Quote").Range("AG8:AK106").Copy
    POexportSheet.Paste Destination:=POexportSheet.Range("AG8")
    
    'Remove named references to scratch tab in BoM header, also export file name input details
    POexportSheet.Range("D5:E5").ClearContents
    POcontentSheet.Range("D6").Copy
    POexportSheet.Range("D6").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    POcontentSheet.Range("R7").Copy
    POexportSheet.Range("R7").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    
    POexportSheet.Cells(6, 5).MergeArea.Copy
    POexportSheet.Cells(6, 5).MergeArea.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    
    'Delete any names used by macros or other sheets
    For Each NameToDelete In POexport.Names
      If left(NameToDelete.Name, 1) <> "_" Then
        NameToDelete.Delete
      End If
    Next NameToDelete
    
    'Now delete extra rows not needed to insert the Disclaimer (still preserving the absolute references in the Export Sheet
    If left(POcontent.Name, 2) = "SE" Or left(POcontent.Name, 7) = "Genesys" Then
      'No disclaimer for SE or AUDC-Genesys-OEM versions
      POexportSheet.Rows("1:4").Delete Shift:=xlShiftUp
    Else
      POexportSheet.Rows("1:2").Delete Shift:=xlShiftUp
    End If
        
    'Check to see if Pricing should be removed from export (easier than selectively copying)
    If POcontent.Sheets("Quote").Range("Pricing").Value = "Hide" Then
       POexportSheet.Range("E7:E1000").ClearContents
       POexportSheet.Range("E1").ColumnWidth = 0
       POexportSheet.Range("H1").ColumnWidth = 0
       POexportSheet.Range("L1").ColumnWidth = 0
       POexportSheet.Range("E4").Font.Size = 12
       POexportSheet.Range("E4:G4").WrapText = True
    End If
    Application.CutCopyMode = False
    
    'Format Row 2 for the Disclaimer
    If left(POcontent.Name, 2) <> "SE" And left(POcontent.Name, 7) <> "Genesys" Then
      With POexportSheet
        .Range("B2:L2").Select
        Application.CutCopyMode = False
        Selection.Merge True
       
        Selection.Borders(xlDiagonalDown).LineStyle = xlNone
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        With Selection.Borders(xlEdgeLeft)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .TintAndShade = 0
          .Weight = xlThin
        End With
        With Selection.Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .TintAndShade = 0
          .Weight = xlThin
        End With
        With Selection.Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .TintAndShade = 0
          .Weight = xlThin
        End With
        With Selection.Borders(xlEdgeRight)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .TintAndShade = 0
          .Weight = xlThin
        End With
        Selection.Borders(xlInsideVertical).LineStyle = xlNone
        Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
        .Rows("2:2").RowHeight = 160
      End With
    
      'Copy and Paste Disclaimer
      POcontent.Sheets("Quote").Activate
      POcontent.Sheets("Quote").Range("A3:M3").Select
      Selection.Copy
      POexportSheet.Activate
      POexportSheet.Range("A2:M2").Select
      ActiveSheet.Paste
   
      'Grey Row 1 for the frame
      ActiveSheet.Range("A3").Copy
      ActiveSheet.Paste Destination:=POexportSheet.Range("A2")
      ActiveSheet.Paste Destination:=POexportSheet.Range("A1:P1")
      POexportSheet.Range("A1").Select
      Application.CutCopyMode = False
   End If
   
   POexportSheet.Range("A1").Select
   Application.CutCopyMode = False
   Application.ScreenUpdating = True
End Sub

Private Sub PricingButton()
    Application.ScreenUpdating = False
    With Sheets("Quote")
       If .Range("Pricing").Value = "Show" Then
          .Range("Pricing").Value = "Hide"
          .Shapes("PricingSwitch").TextFrame.Characters.Text = "Include Pricing on Quote"
       Else
          .Range("Pricing").Value = "Show"
          .Shapes("PricingSwitch").TextFrame.Characters.Text = "Suppress Pricing on Quote"
       End If
    End With
    Application.CutCopyMode = False
    Application.ScreenUpdating = True
End Sub

Private Sub SeparateSwitch()
' Splits out Professional Services, Support, and Warranty from Product costs

    Application.ScreenUpdating = False
    With Sheets("Quote")
       If .Range("SeparateServices").Value = "Separate" Then
          .Range("SeparateServices").Value = "Include"
          .Shapes("SeparateButton").TextFrame.Characters.Text = "Total Services & Products Separately in Summary"
          .Range("L6").Value = "Svcs Inc."
       Else
          .Range("SeparateServices").Value = "Separate"
          .Shapes("SeparateButton").TextFrame.Characters.Text = "Include Services w/ Products Totals in Summary"
          .Range("L6").Value = "Svcs Sep."
       End If
    End With
    Application.CutCopyMode = False
    Application.ScreenUpdating = True
End Sub

Private Sub ReNumber()
  ' For use by button on quote tab
  Call ReNumberSheet("Quote", ThisWorkbook.Name, 7)
End Sub

Private Sub QuoteHelp()
    With Sheets("Detail")
       .Activate
       .Range("QuoteHelp").RowHeight = 380
       .Range("QuoteHelp").Activate
       Application.Goto Reference:=.Range("QuoteHelp"), Scroll:=True
    End With
 End Sub

Private Sub ExtdTrayToggle()
  With Sheets("Quote")
    If .Columns("O").ColumnWidth = 0 Then
      .Shapes("QuoteShowExt").TextFrame.Characters.Text = "Hide Extd"
      .Columns("N").ColumnWidth = 6
      .Columns("O").ColumnWidth = 15
      .Columns("P").ColumnWidth = 2
    Else
      'make sure if they're not showing they're blank
      .Range("N8:N107").ClearContents
      .Shapes("QuoteShowExt").TextFrame.Characters.Text = "Show Extd"
      .Columns("N:P").ColumnWidth = 0
    End If
  End With
End Sub
Private Sub ExportToCSVFromQuote()
  Dim QuoteRow, CSVRow, G2AQuoteRow, FirstQuoteRow, LastQuoteRow, FirstSummaryRow, BaseFileNameIteration, LastSummaryRow, OldLastCSVRow, ItemNo, CheckedPrice, SubscriptionPeriod As Long
  Dim CSVPath, CSVName, XLSName, GXLSName, TimeStamp, Filedate, FilePath, BaseFileNameIterationLabel, BaseFileName, SeparateStatus, AUDCcpn, LocalTruncDesc As String
  Dim Quote, PriceBk, GOEM, G2AQuote, CSV As Worksheet
  Dim Wizard, CSVbk, XLSbk As Workbook
  Dim SBCbaseIncluded, EMSbaseIncluded As Boolean
  
   
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
   
  Set Wizard = ThisWorkbook
  Set Quote = Wizard.Sheets("Quote")
  Set CSV = Wizard.Sheets("CSVexport")
  Set PriceBk = Wizard.Sheets("PriceBook")
  Set GOEM = Wizard.Sheets("Genesys")
  FirstQuoteRow = 7
  FirstSummaryRow = 8
  LastQuoteRow = Quote.Cells(Quote.Rows.count, "C").End(xlUp).Row
  LastSummaryRow = Application.WorksheetFunction.Max(Quote.Range("J7:J1000")) / 1000 + 7
  OldLastCSVRow = CSV.Cells(CSV.Rows.count, "A").End(xlUp).Row
  
  'Create the directory if it doesn't exist
  FilePath = "C:\SFDC-CSVs\"
  If Len(Dir(FilePath, vbDirectory)) = 0 Then
    MkDir (FilePath)
  End If
  
  'Generate the base file name
  Filedate = Format(CStr(Now), "YYYY-MM-DD")
  If Quote.Cells(5, 4).Value = "" Then
    ' Use a Default base file name
    BaseFileName = "Quote"
  Else
    ' Use specified base file name
    BaseFileName = Quote.Cells(5, 4).Value
  End If
  
  'Allow for repeated use of BaseFileName per date with versions
  
  If Dir(FilePath & Filedate & "*" & BaseFileName & "*") <> "" Then
    'BaseFileName has already been used on this date, find an used iteration number
    BaseFileNameIterationLabel = ""
    For BaseFileNameIteration = 1 To 99
      If Dir(FilePath & Filedate & "." & CStr(BaseFileNameIteration) & "*" & BaseFileName & "*") = "" Then
        BaseFileNameIterationLabel = "." & CStr(BaseFileNameIteration)
        Exit For
      End If
    Next BaseFileNameIteration
    ' If can't find a iteration number, use a full timestamp
    If BaseFileNameIterationLabel = "" Then
      Filedate = Format(CStr(Now), "YYYY-MM-DD-HH-MM-SS")
    End If
  Else
    BaseFileNameIterationLabel = ""
  End If
  
  'Generate the file names
  If Quote.Range("QuoteBoMtype").Value = Wizard.Sheets("Scratch").Range("GOEM").Value Then
    CSVName = Filedate & BaseFileNameIterationLabel & " - " & BaseFileName & " -CSV" & ".csv"
    XLSName = Filedate & BaseFileNameIterationLabel & " - " & BaseFileName & " -AUDC" & ".xlsx"
    ' keep the suffix since it's a GNS BoM and not an AUDC one
    GXLSName = Filedate & BaseFileNameIterationLabel & " - " & BaseFileName & " -GNS" & ".xlsx"
  Else
    CSVName = Filedate & BaseFileNameIterationLabel & " - " & BaseFileName & " -CSV" & ".csv"
    ' don't burden main file name with -BoM suffix - it's the default.
    XLSName = Filedate & BaseFileNameIterationLabel & " - " & BaseFileName & ".xlsx"
  End If
  
  'Create GXLS workbook now so it can be written to in the same loops that write the CSV file
  'To avoid renaming this workbook copy the sheet to a new workbook
  Quote.Copy
  With Workbooks(Workbooks.count).Sheets("Quote")
    'Delete Command Bar Buttons
    .Activate
    .Unprotect Password:="acadmin"
    .Shapes("QuoteHelp").Delete
    .Shapes("QuoteRTInt").Delete
    .Shapes("SeparateButton").Delete
    .Shapes("QuoteGTStart").Delete
    .Shapes("QuoteViewDisclaimer").Delete
    .Shapes("QuoteExportCSV").Delete
    .Shapes("PricingSwitch").Delete
    .Shapes("QuoteExportXLS").Delete
    .Shapes("QuoteCopytoDisc").Delete
    .Shapes("QuoteClear").Delete
    .Shapes("QuoteRenum").Delete
    .Shapes("AddSvcs2BoM").Delete
    .Shapes("QuoteShowExt").Delete
    .Range("A4").RowHeight = 15
      
    'Remove named references to scratch tab in BoM header
    .Range("D6:E6").Copy
    .Range("D6:E6").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    .Range("R7").Copy
    .Range("R7").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    'Clear file naming cells
    .Range("D5:E5").ClearContents
    'set local copies of pricingtype and pricingperiod
    Quote.Range("W14:W15").Copy
    .Range("W14:W15").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    
    'col q has a bunch of named variables in formulas that will cause problems.  Same with Col Y-AE
    .Range("Q9:Q506").ClearContents
    .Range("AE9:AE506").ClearContents
    .Range("Y10:AC107").ClearContents
    .Range("AB8").Formula = "=IF(INDIRECT(""J""&MATCH(MAX(J$8:J$107), J$1:J$107, 0)+1)=Z8, SUM(INDIRECT(""L4:L""&MATCH(MAX(J$8:J$107), J$1:J$107, 0))), """")"
    
    'Delete extra rows not needed to insert the Disclaimer (still preserving the absolute references in the Export Sheet
    .Rows("1:4").Delete Shift:=xlShiftUp
  End With
    
  'Delete any names used by macros or other sheets
  For Each NameToDelete In Workbooks(Workbooks.count).Names
    If left(NameToDelete.Name, 1) <> "_" Then
      NameToDelete.Delete
    End If
  Next NameToDelete
  
  'First, save off the Quote sheet, or the Genesys Quote sheet for a Genesys BoM
  Application.Goto Reference:=Workbooks(Workbooks.count).Sheets("Quote").Range("A1"), Scroll:=True
'  Application.Calculation = xlCalculationAutomatic
  If Quote.Range("QuoteBoMtype").Value = Wizard.Sheets("Scratch").Range("GOEM").Value Then
    Application.DisplayAlerts = False
    Workbooks(Workbooks.count).SaveAs filename:=FilePath & GXLSName, FileFormat:=xlOpenXMLWorkbook, ConflictResolution:=xlLocalSessionChanges
    Workbooks(Workbooks.count).SaveAs filename:=FilePath & XLSName, FileFormat:=xlOpenXMLWorkbook, ConflictResolution:=xlLocalSessionChanges
    Set XLSbk = ActiveWorkbook
    Set G2AQuote = XLSbk.Sheets("Quote")
    Application.DisplayAlerts = True
    ' Clear the existing Genesys Quote to make room for the AUDC Quote to be created below
    G2AQuote.Range("B3:G506").ClearContents
  Else ' AudioCodes BoM
    Application.DisplayAlerts = False
    Workbooks(Workbooks.count).SaveAs filename:=FilePath & XLSName, FileFormat:=xlOpenXMLWorkbook, ConflictResolution:=xlLocalSessionChanges
    Application.DisplayAlerts = True
    Workbooks(Workbooks.count).Close False
  End If
  Application.Calculation = xlCalculationManual
  
  'Now start building the CSV sheet
  'Start with clear sheet
  CSV.Range(CSV.Cells(1, 1), CSV.Cells(OldLastCSVRow, 7)).ClearContents
   
  'Add Header Row next
  CSV.Cells(1, 1).Value = "Package#"
  CSV.Cells(1, 2).Value = "CPN"
  CSV.Cells(1, 3).Value = "Quantity"
  CSV.Cells(1, 4).Value = "Requested Price"
  CSV.Cells(1, 5).Value = "Requested Discount (off MSRP)"
  CSV.Cells(1, 6).Value = "Service For"
  CSV.Cells(1, 7).Value = "Summary"
  CSVRow = 2
  
  If Sheets("Settings").Range("PricingType") = Sheets("Scratch").Range("StdPurchase") Then
    SubscriptionPeriod = 1
  Else
    If Sheets("Settings").Range("PricingType") = Sheets("Scratch").Range("SubscriptionMonthly") Then
      SubscriptionPeriod = 12
    Else
      ' must be 36M commit
      SubscriptionPeriod = 36
    End If
  End If
  
  If Quote.Range("QuoteBoMtype").Value = Wizard.Sheets("Scratch").Range("AUDC").Value Then
    'Wizard should be active (Quote Copy got closed), so Quote and CSV are in context
    For QuoteRow = FirstQuoteRow To LastQuoteRow
      If Not IsNumeric(Quote.Cells(QuoteRow, 2).Value) Or left(Quote.Cells(QuoteRow, 3).Value, 4) = "Note" Then
        'These are header rows, blank rows, or pseudo CPNs i added for delivering notes into BoMs.  do nothing
      Else
        If Quote.Cells(QuoteRow, 2).Value Mod 10 = 0 Then
          'Another header row, nested to avoid executing Mod on Item No.
        Else
          'CSV Record should be Pkg, CPN, Qty, ReqPrice, ReqDisc, ServiceFor
                    
          '1st place package number, cpn, and qty
          CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
          CSV.Cells(CSVRow, 2).Value = Quote.Cells(QuoteRow, 3).Value ' cpn
          CSV.Cells(CSVRow, 3).Value = Quote.Cells(QuoteRow, 6).Value ' qty
          
          'Protect against non-numeric prices like quotation and No charge
          If IsNumeric(Quote.Cells(QuoteRow, 5).Value) Then
            CheckedPrice = Quote.Cells(QuoteRow, 5).Value
          Else
            CheckedPrice = 0
          End If
          
          'This is from the Quote tab, use standard discounts.
          'However, since price of support can be reduced by multi-year discounts need to upload price instead of discount
          If left(Quote.Cells(QuoteRow, 7).Value, 3) = "svc" Then
            If WorksheetFunction.CountIf(Wizard.Sheets("DiscTool").Range("disc10sku"), Quote.Cells(QuoteRow, 3).Value) = 1 Then
              CSV.Cells(CSVRow, 4) = 0.9 * Quote.Cells(QuoteRow, 5) ' price
            Else
              If left(Quote.Cells(QuoteRow, 3).Value, 4) = "APSS" Then
                CSV.Cells(CSVRow, 4) = 0.65 * CheckedPrice ' price
              Else
                If Quote.Cells(QuoteRow, 3).Value = "MSRV-TRIAGE/YR" Then
                  CSV.Cells(CSVRow, 4) = 1 ' price for quotation type entry
                Else
                  CSV.Cells(CSVRow, 4) = 0.8 * CheckedPrice ' price
                End If
              End If
            End If
          Else
            If left(Quote.Cells(QuoteRow, 7).Value, 3) = "sw" Or left(Quote.Cells(QuoteRow, 7).Value, 3) = "hw" Then
              CSV.Cells(CSVRow, 4).Value = 0.63 * CheckedPrice ' price
            Else
              'Subscription
              CSV.Cells(CSVRow, 4).Value = 0.75 * CheckedPrice * SubscriptionPeriod ' price
            End If
          End If
          
          'Fill in Service For if it's support or warranty
          ItemNo = Quote.Cells(QuoteRow, 2).Value Mod 10
          If ItemNo = 2 Or ItemNo = 3 Then
            CSV.Cells(CSVRow, 6).Value = Quote.Cells(QuoteRow + 1 - ItemNo, 3).Value ' Svc For
          End If
          'Increment CSV row only when one has been written
          CSVRow = CSVRow + 1
        End If ' another header row
      End If ' header rows
    Next QuoteRow
    Application.Calculation = xlCalculationAutomatic
  Else ' QuoteBomType = Genesys
    'Genesys code, 2 workbooks will be open, Wizard and XLSbk
    ' Initialize EMSbaseIncluded just once per quote (vs SBC on each device below)
    EMSbaseIncluded = False

    G2AQuoteRow = 3
    For QuoteRow = FirstQuoteRow To LastQuoteRow
      If Not IsNumeric(Quote.Cells(QuoteRow, 2).Value) Or left(Quote.Cells(QuoteRow, 3).Value, 12) = "Genesys Care" Or Quote.Cells(QuoteRow, 3).Value = "" Then
        'These are header rows, blank rows, or Genesys Care, which isn't used.  do nothing, take care of header on first line
        If Quote.Cells(QuoteRow, 2) = Wizard.Sheets("Scratch").Range("Blank") Then
          'blank row, increment G2AQuoteRow
          G2AQuoteRow = G2AQuoteRow + 1
        End If
      Else
        If Quote.Cells(QuoteRow, 2).Value Mod 10 = 0 Then
          'first header row, nested to avoid executing Mod on Item No.  nothing to do for the quote
          Quote.Range(Quote.Cells(QuoteRow, 2), Quote.Cells(QuoteRow + 1, 7)).Copy
          'add both header rows
          G2AQuote.Range(G2AQuote.Cells(G2AQuoteRow, 2), G2AQuote.Cells(G2AQuoteRow + 1, 7)).PasteSpecial Paste:=xlPasteValues
          G2AQuoteRow = G2AQuoteRow + 2
          'Initialize SBCbaseIncluded for each Device (header row), vs once per quote for EMSbaseIncluded
          SBCbaseIncluded = False
        Else
          'CSV Record should be Pkg, CPN, Qty, ReqPrice, ReqDisc, ServiceFor
          'For Genesys BoMs, use ReqPrice instead of ReqDisc
          
          'cpn requires conversion, use desc for sw skus b/c cpn not unique
          'match chokes on descriptions over 256, so make/keep/use a local to truncate any verbose pricebook descriptions
          
          If WorksheetFunction.CountIf(GOEM.Range("GOEMcpnset"), Quote.Cells(QuoteRow, 3)) >= 1 Then
            If WorksheetFunction.Index(GOEM.Range("GOEMAUDCcpnSet"), WorksheetFunction.Match(Quote.Cells(QuoteRow, 4), GOEM.Range("GOEMdescSet"), 0)).Value = "n/a" Then
              ' don't add row for n/a sku - only path where audc cpn = blank.  no current use cases for sw, only svc
              AUDCcpn = ""
            Else
              AUDCcpn = WorksheetFunction.Index(GOEM.Range("GOEMAUDCcpnSet"), WorksheetFunction.Match(Quote.Cells(QuoteRow, 4), GOEM.Range("GOEMdescSet"), 0)) ' cpn
            End If
          Else
            'Must be from AUDC pricebook
            AUDCcpn = Quote.Cells(QuoteRow, 3) ' cpn
          End If
            
          ' Use ReqPrice instead of ReqDisc.  Transfer price calculated based on type
          If AUDCcpn = "" Or Quote.Cells(QuoteRow, 6) = 0 Or left(Quote.Cells(QuoteRow, 3).Value, 4) = "Note" Then
            'AUDCcpn = "" means the cpn is an n/a audc sku - do nothing
            'Quote.Cells(QuoteRow, 6) is Qty, and SFDC will choke on 0 Qty entries, so don't include in AUDC BoM and CSV
            'Genesys Interview doesn't add notes, but they could be added manually
          Else
            If Quote.Cells(QuoteRow, 7) = "hw" Then
              ' reqprice = 2/3 msrp, add lines for acts and ahr, including service for tags
              CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
              CSV.Cells(CSVRow, 2).Value = AUDCcpn ' cpn
              CSV.Cells(CSVRow, 3).Value = Quote.Cells(QuoteRow, 6).Value ' qty
              CSV.Cells(CSVRow, 4).Value = Quote.Cells(QuoteRow, 5) / 2 ' ReqPrice
              
              G2AQuote.Cells(G2AQuoteRow, 3) = AUDCcpn ' cpn
              G2AQuote.Cells(G2AQuoteRow, 4) = Quote.Cells(QuoteRow, 4) ' desc
              G2AQuote.Cells(G2AQuoteRow, 5) = Quote.Cells(QuoteRow, 5) / 2 ' price
              G2AQuote.Cells(G2AQuoteRow, 6) = Quote.Cells(QuoteRow, 6) ' qty
              G2AQuote.Cells(G2AQuoteRow, 7) = Quote.Cells(QuoteRow, 7) ' type
              
              ' add acts line to CSV
              If WorksheetFunction.Index(GOEM.Range("GOEMACTScpnSet"), WorksheetFunction.Match(Quote.Cells(QuoteRow, 3), GOEM.Range("GOEMcpnSet"), 0)).Value = "n/a" Then
                'No ACTS (no eg right now), don't add ACTS line
              Else
                CSVRow = CSVRow + 1
                CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
                CSV.Cells(CSVRow, 3).Value = Quote.Cells(QuoteRow, 6).Value ' qty
                CSV.Cells(CSVRow, 6).Value = CSV.Cells(CSVRow - 1, 2) ' Service For
                CSV.Cells(CSVRow, 2).Value = WorksheetFunction.Index(GOEM.Range("GOEMACTScpnSet"), WorksheetFunction.Match(CSV.Cells(CSVRow - 1, 2), GOEM.Range("GOEMAUDCcpnSet"), 0)) ' cpn
                CSV.Cells(CSVRow, 4).Value = Quote.Cells(QuoteRow, 5).Value * WorksheetFunction.Index(GOEM.Range("GOEMACTSpriceSet"), WorksheetFunction.Match(CSV.Cells(CSVRow - 1, 2), GOEM.Range("GOEMAUDCcpnSet"), 0)) ' Req Price
                'there are a few generic ACTS SKUs to avoid having both duplicate _Sx SKUS (with different prices) and _Sx values that are different than those for the same SKU in the AUDC PB.
                'save price to use for the AUDC quote below
                TempPriceHold = CSV.Cells(CSVRow, 4).Value
                If CSV.Cells(CSVRow, 2).Value = "ACTS24X7/YR" Then
                  'make price $1, and fill Qty with the qty * price
                  CSV.Cells(CSVRow, 3).Value = Application.WorksheetFunction.RoundUp(CSV.Cells(CSVRow, 3).Value * CSV.Cells(CSVRow, 4).Value, 0) ' qty
                  CSV.Cells(CSVRow, 4).Value = 1 ' Req Price
                End If
                
                'Add support line in G2A Quote too
                'Don't make the Qty/Price switch for generic SKUs for AUDC sheet as it's informative only
                G2AQuoteRow = G2AQuoteRow + 1
                G2AQuote.Cells(G2AQuoteRow, 3) = CSV.Cells(CSVRow, 2) ' cpn
                G2AQuote.Cells(G2AQuoteRow, 4).Value = "Support SKU for " & CSV.Cells(CSVRow - 1, 2).Value ' desc
                G2AQuote.Cells(G2AQuoteRow, 5) = TempPriceHold ' price
                G2AQuote.Cells(G2AQuoteRow, 6) = Quote.Cells(QuoteRow, 6) ' qty
                G2AQuote.Cells(G2AQuoteRow, 7) = "svc/yr" ' type
              End If
              
              ' add ahr line to CSV if ahr is not n/a
              If WorksheetFunction.Index(GOEM.Range("GOEMAHRcpnSet"), WorksheetFunction.Match(Quote.Cells(QuoteRow, 3), GOEM.Range("GOEMcpnSet"), 0)).Value = "n/a" Then
                'No AHR (eg phones), don't add ahr line
              Else
                CSVRow = CSVRow + 1
                CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
                CSV.Cells(CSVRow, 3).Value = Quote.Cells(QuoteRow, 6).Value ' qty
                CSV.Cells(CSVRow, 6).Value = CSV.Cells(CSVRow - 2, 2) ' Service For
                CSV.Cells(CSVRow, 2).Value = WorksheetFunction.Index(GOEM.Range("GOEMAHRcpnSet"), WorksheetFunction.Match(CSV.Cells(CSVRow - 2, 2), GOEM.Range("GOEMAUDCcpnSet"), 0)) ' cpn
                CSV.Cells(CSVRow, 4).Value = Quote.Cells(QuoteRow, 5).Value * WorksheetFunction.Index(GOEM.Range("GOEMAHRpriceSet"), WorksheetFunction.Match(CSV.Cells(CSVRow - 2, 2), GOEM.Range("GOEMAUDCcpnSet"), 0)) ' Req Price
                'there are a few generic AHR SKUs to avoid having both duplicate _Sx SKUS (with different prices) and _Sx values that are different than those for the same SKU in the AUDC PB.
                'save price to use for the AUDC quote below
                TempPriceHold = CSV.Cells(CSVRow, 4).Value
                If CSV.Cells(CSVRow, 2).Value = "AHR/YR" Then
                  'make price $1, and fill Qty with the qty * price
                  CSV.Cells(CSVRow, 3).Value = Application.WorksheetFunction.RoundUp(CSV.Cells(CSVRow, 3).Value * CSV.Cells(CSVRow, 4).Value, 0) ' qty
                  CSV.Cells(CSVRow, 4).Value = 1 ' Req Price
                End If
                
                'add ahr line to G2AQuote
                'Don't make the Qty/Price switch for generic SKUs for AUDC sheet as it's informative only
                G2AQuoteRow = G2AQuoteRow + 1
                G2AQuote.Cells(G2AQuoteRow, 3) = CSV.Cells(CSVRow, 2) ' cpn
                G2AQuote.Cells(G2AQuoteRow, 4).Value = "Hardware Replacement SKU for " & CSV.Cells(CSVRow - 2, 2).Value ' desc
                G2AQuote.Cells(G2AQuoteRow, 5) = TempPriceHold ' price
                G2AQuote.Cells(G2AQuoteRow, 6) = Quote.Cells(QuoteRow, 6) ' qty
                G2AQuote.Cells(G2AQuoteRow, 7) = "svc/yr" ' type
              End If
            Else
              If Quote.Cells(QuoteRow, 7) = "sw" Then
                ' First, if it's the first SBC SKU for the device, add the SBC base SKUs to the AUDC Quote and the CSV
                If SBCbaseIncluded Then
                  'already included the base
                Else ' SBCbaseIncluded
                  If Quote.Cells(QuoteRow, 3) = "3GP21249ACDA" Then ' Simplex SBC
                    CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
                    CSV.Cells(CSVRow, 2).Value = "MSW/GENESYS" ' cpn
                    CSV.Cells(CSVRow, 3).Value = 1 ' qty
                    CSV.Cells(CSVRow, 4).Value = 0 ' Req Price
                    CSVRow = CSVRow + 1
                    
                    G2AQuote.Cells(G2AQuoteRow, 2) = "" ' gets set during renumbering
                    G2AQuote.Cells(G2AQuoteRow, 3) = "MSW/GENESYS" ' cpn
                    G2AQuote.Cells(G2AQuoteRow, 4) = "Product key for Mediant SE/VE) Session Border Controller (SBC) product for Genesys - with 0 sessions.|fffd| Product key includes (at no additional charge) - unlimited Near/Far End registrations for users, local survivability, EMS flag enabled."
                    G2AQuote.Cells(G2AQuoteRow, 5) = 0 ' price
                    G2AQuote.Cells(G2AQuoteRow, 6) = 1 ' qty
                    G2AQuote.Cells(G2AQuoteRow, 7) = "sw" ' type
                    G2AQuoteRow = G2AQuoteRow + 1
                    SBCbaseIncluded = True
                  End If
                  
                  If Quote.Cells(QuoteRow, 3) = "3GP21246ACDA" Then ' HA SBC
                    CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
                    CSV.Cells(CSVRow, 2).Value = "MSW/GENESYS/R" ' cpn
                    CSV.Cells(CSVRow, 3).Value = 1 ' qty
                    CSV.Cells(CSVRow, 4).Value = 0 ' Req Price
                    CSVRow = CSVRow + 1
                    
                    G2AQuote.Cells(G2AQuoteRow, 2) = "" ' gets set during renumbering
                    G2AQuote.Cells(G2AQuoteRow, 3) = "MSW/GENESYS/R"
                    G2AQuote.Cells(G2AQuoteRow, 4) = "Product key for Mediant SE/VE) Session Border Controller (SBC) product for Genesys - with 0 sessions.|fffd| Product key includes (at no additional charge) - unlimited Near/Far End registrations for users, local survivability, HA flag enabled, EMS flag enabled."
                    G2AQuote.Cells(G2AQuoteRow, 5) = 0 ' price
                    G2AQuote.Cells(G2AQuoteRow, 6) = 1 ' qty
                    G2AQuote.Cells(G2AQuoteRow, 7) = "sw" ' type
                    G2AQuoteRow = G2AQuoteRow + 1
                    SBCbaseIncluded = True
                  End If
                End If ' SBCbaseIncluded
                
                If EMSbaseIncluded Then
                  ' Already included the base
                Else
                  If Quote.Cells(QuoteRow, 3) = "3GP81886ACAA" Or _
                     Quote.Cells(QuoteRow, 3) = "3GP82240ACAA" Or _
                     Quote.Cells(QuoteRow, 3) = "3GP81885ACAA" Then ' EMS, IPP Mgr, or SEM
                    'add the base
                    CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
                    CSV.Cells(CSVRow, 2).Value = "SEM-EMS/VMW/GNS" ' cpn
                    CSV.Cells(CSVRow, 3).Value = 1 ' qty
                    CSV.Cells(CSVRow, 4).Value = 0 ' Req Price
                    CSVRow = CSVRow + 1
                    
                    G2AQuote.Cells(G2AQuoteRow, 2) = "" ' gets set during renumbering
                    G2AQuote.Cells(G2AQuoteRow, 3) = "SEM-EMS/VMW/GNS"
                    G2AQuote.Cells(G2AQuoteRow, 4) = "EMS and SEM base s/w CPN - MUST on first order of EMS and/or SEM"
                    G2AQuote.Cells(G2AQuoteRow, 5) = 0 ' price
                    G2AQuote.Cells(G2AQuoteRow, 6) = 1 ' qty
                    G2AQuote.Cells(G2AQuoteRow, 7) = "sw" ' type
                    G2AQuoteRow = G2AQuoteRow + 1
                    EMSbaseIncluded = True
                  End If
                End If 'EMSbaseIncluded
              
                CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
                CSV.Cells(CSVRow, 2).Value = AUDCcpn ' cpn
                CSV.Cells(CSVRow, 3).Value = Quote.Cells(QuoteRow, 6).Value ' qty
                CSV.Cells(CSVRow, 4).Value = Quote.Cells(QuoteRow, 5) / 2 ' Req Price
                
                G2AQuote.Cells(G2AQuoteRow, 3) = AUDCcpn ' cpn
                G2AQuote.Cells(G2AQuoteRow, 4) = Quote.Cells(QuoteRow, 4) ' desc
                G2AQuote.Cells(G2AQuoteRow, 5) = Quote.Cells(QuoteRow, 5) / 2 ' price
                G2AQuote.Cells(G2AQuoteRow, 6) = Quote.Cells(QuoteRow, 6) ' qty
                G2AQuote.Cells(G2AQuoteRow, 7) = Quote.Cells(QuoteRow, 7) ' type
                
                'Add Support Lines
                CSVRow = CSVRow + 1
                CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
                CSV.Cells(CSVRow, 3).Value = Quote.Cells(QuoteRow, 6).Value ' qty
                CSV.Cells(CSVRow, 6).Value = CSV.Cells(CSVRow - 1, 2) ' service For
                CSV.Cells(CSVRow, 2).Value = WorksheetFunction.Index(GOEM.Range("GOEMACTScpnSet"), WorksheetFunction.Match(G2AQuote.Cells(G2AQuoteRow, 3), GOEM.Range("GOEMAUDCcpnSet"), 0)) 'cpn
                CSV.Cells(CSVRow, 4).Value = Quote.Cells(QuoteRow, 5).Value * WorksheetFunction.Index(GOEM.Range("GOEMACTSpriceSet"), WorksheetFunction.Match(G2AQuote.Cells(G2AQuoteRow, 3), GOEM.Range("GOEMAUDCcpnSet"), 0))
                
                'Add support line in G2A Quote too
                
                G2AQuoteRow = G2AQuoteRow + 1
                G2AQuote.Cells(G2AQuoteRow, 3) = CSV.Cells(CSVRow, 2) ' cpn
                G2AQuote.Cells(G2AQuoteRow, 4).Value = "Support SKU for " & G2AQuote.Cells(G2AQuoteRow - 1, 3).Value ' desc
                G2AQuote.Cells(G2AQuoteRow, 5) = CSV.Cells(CSVRow, 4) ' price
                G2AQuote.Cells(G2AQuoteRow, 6) = Quote.Cells(QuoteRow, 6) ' qty
                G2AQuote.Cells(G2AQuoteRow, 7) = "svc/yr" ' type
              Else
                If left(Quote.Cells(QuoteRow, 7).Value, 3) = "svc" Then
                  ' msrp x 0.6, don't get from audc pricebook in order to keep potential for genesys tool to run w/out pricebook tab
                  CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 2).Value / 1000) ' pkg
                  CSV.Cells(CSVRow, 2).Value = AUDCcpn ' cpn
                  CSV.Cells(CSVRow, 3).Value = Quote.Cells(QuoteRow, 6).Value ' qty
                  If IsNumeric(Quote.Cells(QuoteRow, 5)) Then
                    CSV.Cells(CSVRow, 4).Value = Quote.Cells(QuoteRow, 5) * 0.82 ' Req Price
                  Else
                    CSV.Cells(CSVRow, 4).Value = Quote.Cells(QuoteRow, 5)
                  End If
                  
                  G2AQuote.Cells(G2AQuoteRow, 3) = AUDCcpn ' cpn
                  G2AQuote.Cells(G2AQuoteRow, 4) = Quote.Cells(QuoteRow, 4) ' desc
                  If IsNumeric(Quote.Cells(QuoteRow, 5)) Then
                    G2AQuote.Cells(G2AQuoteRow, 5) = Quote.Cells(QuoteRow, 5) * 0.82 ' Price
                  Else
                    G2AQuote.Cells(G2AQuoteRow, 5) = Quote.Cells(QuoteRow, 5)
                  End If
                  G2AQuote.Cells(G2AQuoteRow, 6) = Quote.Cells(QuoteRow, 6) ' qty
                  G2AQuote.Cells(G2AQuoteRow, 7) = Quote.Cells(QuoteRow, 7) ' type
                End If ' Svc
              End If ' sw
            End If ' hw
            CSVRow = CSVRow + 1
            G2AQuoteRow = G2AQuoteRow + 1
          End If ' not n/a sku
        End If
      End If
    Next QuoteRow
    ' Renumber the sheet, and then Close G2AQuote
    Application.Calculation = xlCalculationAutomatic
    Application.Goto Reference:=XLSbk.Sheets("Quote").Range("A1"), Scroll:=True
    Call ReNumberSheet("Quote", XLSbk.Name, 3)
    Application.DisplayAlerts = False
    XLSbk.Save
    Application.DisplayAlerts = True
    XLSbk.Close False
  End If
   
  'If the quote has services separated, they must be toggled to be included rather than separated.
  'Capture current value and then restore it at the end.  Note calculation is set to manual
  'CSVRow is still valid, but need to redo lastsummaryrow if we're switching from separateservices
  SeparateStatus = Quote.Range("SeparateServices").Value
  If SeparateStatus = "Separate" Then
    Quote.Range("SeparateServices").Value = "Include"
    LastSummaryRow = Application.WorksheetFunction.Max(Quote.Range("J7:J1000")) / 1000 + 7
    Quote.Range("H8:AB150").Calculate
  End If
 For QuoteRow = FirstSummaryRow To LastSummaryRow
    CSV.Cells(CSVRow, 1).Value = Int(Quote.Cells(QuoteRow, 10).Value / 1000)
    CSV.Cells(CSVRow, 2).Value = Quote.Cells(QuoteRow, 11).Value
    CSV.Cells(CSVRow, 4).Value = Quote.Cells(QuoteRow, 12).Value
    CSV.Cells(CSVRow, 7).Value = "Y"
    CSVRow = CSVRow + 1
  Next QuoteRow
  Quote.Range("SeparateServices").Value = SeparateStatus
  Quote.Range("H8:AB150").Calculate
   
  If Not CSV.Visible Then
    ActiveWorkbook.Unprotect Password:="acadmin"
    CSV.Visible = True
    CSV.Copy
    CSV.Visible = False
    ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:="acadmin"
  Else
    CSV.Copy
  End If
  With Workbooks(Workbooks.count)
    .SaveAs filename:=FilePath & CSVName, FileFormat:=xlCSV
    .Close False
  End With
  
  MsgBox "CSV and reference Excel files have been placed in C:\SFDC-CSVs\", Title:="AudioCodes Ordering Wizard"
   
  Application.ScreenUpdating = True
   
End Sub

Private Sub CopyQuotetoDiscTool()
    Dim Quote, DiscTool As Worksheet
    Dim LastQuoteRow, LastDiscToolRow As Integer
            
    Application.ScreenUpdating = False
    
    Set Quote = Sheets("Quote")
    Set DiscTool = Sheets("DiscTool")
    LastQuoteRow = Quote.Cells(Quote.Rows.count, "C").End(xlUp).Row
    LastDiscToolRow = DiscTool.Cells(DiscTool.Rows.count, "C").End(xlUp).Row
    
    'Clear out last use of DiscTool
    DiscTool.Range("B13:G512").ClearContents
    DiscTool.Range("J13:J512").ClearContents
    If left(ThisWorkbook.Name, 2) = "SE" Then
      DiscTool.Range("U13:V512").ClearContents
    Else
      DiscTool.Range("O13:P512").ClearContents
    End If
    
    'Move the Quote Content if there is content to move
    If LastQuoteRow > 6 Then
       Quote.Range(Quote.Cells(7, 2), Quote.Cells(LastQuoteRow, 7)).Copy
       DiscTool.Range(DiscTool.Cells(13, 2), DiscTool.Cells(LastQuoteRow + 5, 7)).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End If
    
    'run reset after paste to ensure discounts sent for audc vs genesys
    Application.Run "Sheet13.ResetDiscToolDiscounts"
    
    Application.CutCopyMode = False
    With Sheets("DiscTool")
       .Activate
       .Range("A1").Activate
    End With
    Application.ScreenUpdating = True
End Sub

Sub ViewDisclaimer()
  With Sheets("Start")
    .Activate
    .Range("Disclaimer").Activate
    Application.Goto Reference:=.Range("A12"), Scroll:=True
  End With
End Sub

Sub AddServicesToBoM()
  Dim StartItemAtRow As Integer
  Dim CurrentRow As Integer
    
  Application.ScreenUpdating = False
  
  ' if there are no items in Quote yet...
  If Sheets("Quote").Cells(Sheets("Quote").Rows.count, "B").End(xlUp).Row = 6 Then
    MsgBox "No items in BoM to Assess Services Against", vbOKOnly + vbExclamation
  End If
  
  With Sheets("Quote")
    StartItemAtRow = .Cells(.Rows.count, "b").End(xlUp).Row + 3
    ' Add Header
    Sheets("Scratch").Range("SvcAddHeader").Copy
    .Range(.Cells(StartItemAtRow, 2), .Cells(StartItemAtRow + 1, 7)).PasteSpecial Paste:=xlPasteValues
    CurrentRow = StartItemAtRow + 2
    
    ' Next add Planning and Design
    ' Note item number from scratch is no good, it's already incremented from the header addition, use number from header as reference.
    ' Genesys can't deal with the CUST SKUs
    If Sheets("Quote").Range("QuoteBoMtype").Value <> Sheets("Scratch").Range("GOEM").Value And _
       Sheets("Settings").Range("PDPMtype").Value = Sheets("Scratch").Range("custPDPMbomType").Value Then
      'fill in the non-zero ps items
       For Row = 1 To 2
         If Sheets("Scratch").Range("custPDPMbom").Cells(Row, 4).Value > 0 Then
           Sheets("Scratch").Range("custPDPMbom").Range(Sheets("Scratch").Cells(Row, 1), Sheets("Scratch").Cells(Row, 5)).Copy
           .Range(.Cells(CurrentRow, 3), .Cells(CurrentRow, 7)).PasteSpecial Paste:=xlPasteValues
           If CurrentRow = StartItemAtRow + 2 Then
             .Cells(CurrentRow, 2).Value = .Cells(StartItemAtRow, 2).Value + 11
           Else
             .Cells(CurrentRow, 2).Value = .Cells(CurrentRow - 1, 2).Value + 10
           End If
           CurrentRow = CurrentRow + 1
         End If
       Next Row
      
    Else ' standard PMPDtype
      ' Genesys can't deal with the CUST SKUs
      'fill in the non-zero ps items
      Application.Calculation = xlCalculationManual
      'values on scratch were changing as i added stuff to quote
       For Row = 1 To 5
         If Sheets("Scratch").Range("stdPDPMbom").Cells(Row, 4).Value > 0 Then
           Sheets("Scratch").Range("stdPDPMbom").Range(Sheets("Scratch").Cells(Row, 1), Sheets("Scratch").Cells(Row, 5)).Copy
           .Range(.Cells(CurrentRow, 3), .Cells(CurrentRow, 7)).PasteSpecial Paste:=xlPasteValues
           If CurrentRow = StartItemAtRow + 2 Then
             .Cells(CurrentRow, 2).Value = .Cells(StartItemAtRow, 2).Value + 11
           Else
             .Cells(CurrentRow, 2).Value = .Cells(CurrentRow - 1, 2).Value + 10
           End If
           CurrentRow = CurrentRow + 1
         End If
       Next Row
       Application.Calculation = xlCalculationAutomatic
      
    End If ' BoMtype
    .Activate
    .Cells(StartItemAtRow, 2).Activate
  End With
  
  Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CBXm3pstn, 2, 2, MSForms, ComboBox"
Attribute VB_Control = "CBXm3sbc, 3, 3, MSForms, ComboBox"
Attribute VB_Control = "CBXm3ha, 4, 4, MSForms, ComboBox"
Attribute VB_Control = "CBXm3pwr, 5, 5, MSForms, ComboBox"
Attribute VB_Control = "CBXm3fixed, 6, 6, MSForms, ComboBox"
Attribute VB_Control = "CBXm3term, 7, 7, MSForms, ComboBox"
Attribute VB_Control = "CBXm3sPack, 9, 8, MSForms, ComboBox"
Attribute VB_Control = "CBXm3lync, 10, 9, MSForms, ComboBox"
Attribute VB_Control = "CBXm3elin, 11, 10, MSForms, ComboBox"
Attribute VB_Control = "CBXm3emsC, 12, 11, MSForms, ComboBox"
Attribute VB_Control = "CBXm3impl, 14, 12, MSForms, ComboBox"
Attribute VB_Control = "CBXm3com, 15, 13, MSForms, ComboBox"
Attribute VB_Control = "CBXm3sup, 16, 14, MSForms, ComboBox"
Attribute VB_Control = "CBXm3hwRep, 17, 15, MSForms, ComboBox"
' Sheet5(M3K) - Targets for Sheet specific buttons
' - Private M3KCopyBoMtoPO
' - Private M3KMakeDefault
' - Private M3KResetDefault
' - Private M3KSuppressServices
'

Private Sub M3KCopyBoMtoPO()
  Call CopyBoMtoPO("M3K")
End Sub

Private Sub M3KMakeDefault()
  Call MakeDefault("M3K")
End Sub

Private Sub M3KResetDefault()
  Call ResetDefault("M3K", "m3svcOff", "m3svcOffButton")
End Sub

Private Sub M3KSuppressServices()
  Call SuppressServices("M3K", "m3svcOff", "m3svcOffButton")
End Sub
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CBXm0srtp, 28, 0, MSForms, ComboBox"
Attribute VB_Control = "CBXm0mgdSvcs, 27, 1, MSForms, ComboBox"
Attribute VB_Control = "CBXm0rProxy, 26, 2, MSForms, ComboBox"
Attribute VB_Control = "CBXm0LicenseType, 25, 3, MSForms, ComboBox"
Attribute VB_Control = "CBXm0impl, 2, 4, MSForms, ComboBox"
Attribute VB_Control = "CBXm0com, 3, 5, MSForms, ComboBox"
Attribute VB_Control = "CBXm0sup, 4, 6, MSForms, ComboBox"
Attribute VB_Control = "CBXm0hwRep, 5, 7, MSForms, ComboBox"
Attribute VB_Control = "CBXm0type, 6, 8, MSForms, ComboBox"
Attribute VB_Control = "CBXm0emsC, 11, 9, MSForms, ComboBox"
Attribute VB_Control = "CBXm0lync, 12, 10, MSForms, ComboBox"
Attribute VB_Control = "CBXm0elin, 18, 11, MSForms, ComboBox"
Attribute VB_Control = "CBXm0ha, 21, 12, MSForms, ComboBox"
Attribute VB_Control = "CBXm0xcdFrom, 22, 13, MSForms, ComboBox"
Attribute VB_Control = "CBXm0xcdTo, 23, 14, MSForms, ComboBox"
Attribute VB_Control = "CBXm0vrt, 24, 15, MSForms, ComboBox"
' Sheet6(SBCs) - Targets for Sheet specific buttons
' - Private SBCsCopyBoMtoPO
' - Private SBCsMakeDefault
' - Private SBCsResetDefault
' - Private M0SuppressServices
'

Private Sub SBCsCopyBoMtoPO()
  Call CopyBoMtoPO("SBCs")
End Sub

Private Sub SBCsMakeDefault()
  Call MakeDefault("SBCs")
End Sub

Private Sub SBCsResetDefault()
  Call ResetDefault("SBCs", "m0svcOff", "m0svcOffButton")
End Sub

Private Sub M0SuppressServices()
  Call SuppressServices("SBCs", "m0svcOff", "m0svcOffButton")
End Sub

Private Sub CBXm0type_Change()

  If CBXm0type.Value = Sheets("Scratch").Range("M9K").Value Then
    CBXm0vrt.ListFillRange = "=m0m9k10gRNG"
    CBXm0vrt.Value = Sheets("Scratch").Range("m9kAC").Value
  End If
  
  If CBXm0type.Value = Sheets("Scratch").Range("MCE").Value Then
    CBXm0vrt.ListFillRange = "=m0cloudRNG"
    CBXm0vrt.Value = Sheets("Scratch").Range("AWS").Value
  End If
  
  If CBXm0type.Value = Sheets("Scratch").Range("MVE").Value Then
    CBXm0vrt.ListFillRange = "=m0vrtRNG"
    CBXm0vrt.Value = Sheets("Scratch").Range("VMware").Value
  End If
  
  If CBXm0type.Value = Sheets("Scratch").Range("MSE").Value Or _
     CBXm0type.Value = Sheets("Scratch").Range("M26H").Value Or _
     CBXm0type.Value = Sheets("Scratch").Range("M4K").Value Then
    'NA for these, but leave MVE list for default
    CBXm0vrt.ListFillRange = "=m0vrtRNG"
    CBXm0vrt.Value = Sheets("Scratch").Range("VMware").Value
  End If
  
End Sub


Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Sheet7(Start) - Targets for sheet specific buttons
' - Private GoToM800B
' - Private GoToM1KB
' - Private GoToM3K
' - Private GoToSBCs
' - Private GoToOneBox
' - Private GoToSmartTap
' - Private GoToEMS
' - Private GoToIPP
' - Private GoToServices
' - Private GoToManual
' - Private GoToLockedCellsErr
' - Private CurrencySwitch
' - Private CheckVersionButton
'


Private Sub GoToM800B()
    With Sheets("M800B")
       .Activate
       .Range("D5").Activate
       Application.Goto Reference:=.Range("A1"), Scroll:=True
    End With
End Sub

Private Sub GoToM1KB()
    With Sheets("M1KB")
       .Activate
       .Range("D5").Activate
       Application.Goto Reference:=.Range("A1"), Scroll:=True
    End With
End Sub

Private Sub GoToM3K()
    With Sheets("M3K")
       .Activate
       .Range("D5").Activate
       Application.Goto Reference:=.Range("A1"), Scroll:=True
    End With
End Sub

Private Sub GoToSBCs()
    With Sheets("SBCs")
       .Activate
       .Range("D5").Activate
       Application.Goto Reference:=.Range("A1"), Scroll:=True
    End With
End Sub

Private Sub GoToOneBox()
    With Sheets("CB 365")
       .Activate
       .Range("D5").Activate
       Application.Goto Reference:=.Range("A1"), Scroll:=True
    End With
End Sub

Private Sub GoToSmartTap()
    With Sheets("SmartTap")
       .Activate
       .Range("D5").Activate
       Application.Goto Reference:=.Range("A1"), Scroll:=True
    End With
End Sub

Private Sub GoToVoca()
    With Sheets("Voca")
       .Activate
       .Range("D5").Activate
       Application.Goto Reference:=.Range("A1"), Scroll:=True
    End With
End Sub


Private Sub GoToEMS()
    With Sheets("OVOC")
       .Activate
       .Range("D5").Activate
       Application.Goto Reference:=.Range("A1"), Scroll:=True
    End With
End Sub

Private Sub GoToIPP()
    With Sheets("IP Phone")
       .Activate
       .Range("D5").Activate
       Application.Goto Reference:=.Range("A1"), Scroll:=True
    End With
End Sub

Private Sub GoToServices()
    With Sheets("Services")
       .Activate
       .Range("D5").Activate
       Application.Goto Reference:=.Range("A1"), Scroll:=True
    End With
End Sub

Private Sub GoToManual()
    With Sheets("Manual")
       .Activate
       .Range("D5").Activate
       Application.Goto Reference:=.Range("A1"), Scroll:=True
    End With
End Sub

Private Sub GoToLockedCellsErr()
    With Sheets("Detail")
       .Activate
       .Range("LockedCells").RowHeight = 90
       .Range("LockedCells").Activate
    End With
End Sub

Private Sub GoToSettings()
    With Sheets("Settings")
       .Activate
       .Range("A1").Activate
       Application.Goto Reference:=.Range("A1"), Scroll:=True
    End With
End Sub


Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CBXippHwRep, 16, 0, MSForms, ComboBox"
Attribute VB_Control = "CBXippBW, 15, 1, MSForms, ComboBox"
Attribute VB_Control = "CBXippModel, 14, 2, MSForms, ComboBox"
Attribute VB_Control = "CBXippClr, 13, 3, MSForms, ComboBox"
Attribute VB_Control = "CBXippPwr, 11, 4, MSForms, ComboBox"
Attribute VB_Control = "CBXippApp, 10, 5, MSForms, ComboBox"
Attribute VB_Control = "CBXippSup, 3, 6, MSForms, ComboBox"
' Sheet8(IP Phone) - Targets for Sheet specific buttons
' - Private IPPCopyBoMtoPO
' - Private IPPMakeDefault
' - Private IPPResetDefault
' - Private IPPSuppressServices
'

Private Sub IPPCopyBoMtoPO()
  Call CopyBoMtoPO("IP Phone")
End Sub

Private Sub IPPMakeDefault()
  Call MakeDefault("IP Phone")
End Sub

Private Sub IPPResetDefault()
  Call ResetDefault("IP Phone", "IPPsvcOff", "IPPsvcOffButton")
End Sub

Private Sub IPPSuppressServices()
  Call SuppressServices("IP Phone", "IPPsvcOff", "IPPsvcOffButton")
End Sub

Private Sub CBXippApp_Change()
  If CBXippApp.Value = Sheets("Scratch").Range("DnC").Value Then
    CBXippModel.ListFillRange = "=IPPallRNG"
    CBXippModel.Value = Sheets("Scratch").Range("DnC").Value
  End If
  
  If CBXippApp.Value = Sheets("Scratch").Range("LyncIPP").Value Then
    CBXippModel.ListFillRange = "=IPPsfbRNG"
    CBXippModel.Value = Sheets("Scratch").Range("DnC").Value
  End If
  
  If CBXippApp.Value = Sheets("Scratch").Range("StdIPP").Value Then
    CBXippModel.ListFillRange = "=IPPstdRNG"
    CBXippModel.Value = Sheets("Scratch").Range("DnC").Value
  End If
  
  If CBXippApp.Value = Sheets("Scratch").Range("HDLrmIPP").Value Then
    CBXippModel.ListFillRange = "=IPPhrsRNG"
    CBXippModel.Value = Sheets("Scratch").Range("DnC").Value
  End If
  
  If CBXippApp.Value = Sheets("Scratch").Range("Teams").Value Then
    CBXippModel.ListFillRange = "=IPPteamsRNG"
    CBXippModel.Value = Sheets("Scratch").Range("IPC450HD").Value
  End If
  
End Sub

Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CBXpsTTSmartTap, 45, 3, MSForms, ComboBox"
Attribute VB_Control = "CBXpsTTsbcInterwork, 40, 4, MSForms, ComboBox"
Attribute VB_Control = "CBXpsTTsbcRoute, 39, 5, MSForms, ComboBox"
Attribute VB_Control = "CBXpsTTmsft, 33, 6, MSForms, ComboBox"
Attribute VB_Control = "CBXpsTTarm, 32, 7, MSForms, ComboBox"
Attribute VB_Control = "CBXpsTTcce, 26, 8, MSForms, ComboBox"
Attribute VB_Control = "CBXpsPlan, 1, 9, MSForms, ComboBox"
Attribute VB_Control = "CBXpsResEng, 2, 10, MSForms, ComboBox"
Attribute VB_Control = "CBXpsTTsbcBasic, 8, 11, MSForms, ComboBox"
Attribute VB_Control = "CBXpsTTsem, 10, 12, MSForms, ComboBox"
Attribute VB_Control = "CBXpsTTlyncBasic, 11, 13, MSForms, ComboBox"
Attribute VB_Control = "CBXpsTToneBox, 14, 14, MSForms, ComboBox"
Attribute VB_Control = "CBXpsTTmgw, 17, 15, MSForms, ComboBox"
Attribute VB_Control = "CBXpsZone, 18, 16, MSForms, ComboBox"
Attribute VB_Control = "CBXpsCut, 19, 17, MSForms, ComboBox"
Attribute VB_Control = "CBXpsNvra, 20, 18, MSForms, ComboBox"
Attribute VB_Control = "CBXpsChg, 21, 19, MSForms, ComboBox"
Attribute VB_Control = "CBXpsSurv, 22, 20, MSForms, ComboBox"
Attribute VB_Control = "CBXpsTTsbcFund, 31, 21, MSForms, ComboBox"
Attribute VB_Control = "CBXpsTTsfbACArecert, 35, 22, MSForms, ComboBox"
Attribute VB_Control = "CBXpsTTsbcRecert, 36, 23, MSForms, ComboBox"
Attribute VB_Control = "CBXpsTTVoIPfund, 41, 24, MSForms, ComboBox"
Attribute VB_Control = "CBXpsTTmsbr, 42, 25, MSForms, ComboBox"
Attribute VB_Control = "CBXpsTTteams, 43, 26, MSForms, ComboBox"
Attribute VB_Control = "CBXpsTTteamsRecert, 44, 27, MSForms, ComboBox"
' Sheet9(Services) - Targets for Sheet specific buttons
' - Private ServicesCopyBoMtoPO
' - Private ServicesMakeDefault
' - Private ServicesResetDefault
' - Services suppression not applicable
'

Private Sub ServicesCopyBoMtoPO()
  Call CopyBoMtoPO("Services")
End Sub

Private Sub ServicesMakeDefault()
  Call MakeDefault("Services")
End Sub

Private Sub ServicesResetDefault()
  Call ResetDefault("Services", "NoToggle", "NoToggle")
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' ThisWorkBook - Auto executing macros
' - Private WorkBook_Open
' - Private Workbook_SheetDeactivate
'

Private Sub Workbook_Open()
   Dim ws As Worksheet
   'Sheets("start").Activate
   Application.ScreenUpdating = False
   ' The UserInterFaceOnly attribute must be reset on every worksheet open
   For Each ws In ThisWorkbook.Worksheets
      ws.Protect Password:="acadmin", UserInterFaceOnly:=True
   Next ws

   If left(ThisWorkbook.Name, 7) <> "Genesys" Then
      ' No Manual Sheet on Genesys version
      Sheets("Manual Selector").Protect Password:="acadmin", UserInterFaceOnly:=True, AllowFiltering:=True
   End If
   Sheets("Scratch").Unprotect Password:="acadmin"
   
   Let CurrentPricingType = Sheets("Settings").Range("PricingType").Value
   
   Application.ScreenUpdating = True
End Sub


Private Sub Workbook_SheetDeactivate(ByVal Sh As Object)
' Lastsheet used to allow macros to return to previous sheet

  lastsheet = Sh.Name
'   If lastsheet = Sheets("Start").Name Then
'     'These lines were here because cells get locked after operating active-x control,
'     'and turning the formula bar visible fixes it, even if you turn it back invisible right away
'     'but it kept happening anyway, so i just left the formula bar visible all the time.
'     Application.ScreenUpdating = False
'     Application.DisplayFormulaBar = True
'     Application.DisplayFormulaBar = False
'     Application.ScreenUpdating = True
'   End If
End Sub

  




' InQuest injected base64 decoded content
' *'jQh
' *'jQh
' *'jQh
' *'jQh
' *'jQh
' *'jQh
' *'jQh
' *'jQh
' zw2K

INQUEST-PP=macro
