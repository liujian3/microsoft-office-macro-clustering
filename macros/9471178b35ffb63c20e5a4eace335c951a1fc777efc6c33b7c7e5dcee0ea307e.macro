Attribute VB_Name = "BuffBuilds"
    Dim shtName As String
    Dim buffShtName As String
    Dim savedBuildsRowStart As Integer
Private Sub declareGlobals()
    shtName = "BuffBuilds"
    buffShtName = "Gear"
    savedBuildsRowStart = 3
End Sub

Sub buffBuildComboBox_Change()
    Application.Calculation = xlCalculationManual
    declareGlobals
    Dim rowI As Integer
    Dim i As Integer
    Dim cnt As Integer
    Dim selBuildName As String
    Dim sht As Worksheet
    Dim buffSht As Worksheet
    Dim cmbBox As Integer
    Dim rng As Range
    Set sht = ActiveWorkbook.Sheets(shtName)
    Set buffSht = ActiveWorkbook.Sheets(buffShtName)
    cmbBox = buffSht.Cells(47, 1).Value
    If MsgBox("You selected " & sht.Range(shtName).item(cmbBox).Value & " buff build, would you like to load?.", vbYesNo, "Change buff Build") = vbYes Then
        rowI = (cmbBox - 1) + savedBuildsRowStart
        cnt = sht.UsedRange.Columns.Count
        Application.ScreenUpdating = False
        For i = 2 To cnt Step 1
            cellAddy = sht.Cells(1, i).Value
            Set rng = buffSht.Evaluate(cellAddy)
            If rng Is Nothing Then
                MsgBox "Cell referenced at Sheet.Cells(1," & i & ") doesn't evaluate! Found '" & cellAddy & "'."
            Else
                rng.Value = sht.Cells(rowI, i).Value
                Set rng = Nothing
            End If
        Next i
        Application.ScreenUpdating = True
    Else
        buffSht.Cells(47, 1) = 0
    End If
    Application.Calculation = xlCalculationAutomatic
End Sub

Sub resetBuff()
    Application.Calculation = xlCalculationManual
    declareGlobals
    If MsgBox("Do you really wish to reset all buffs to none?", vbYesNo, "Confirm Reset") = vbYes Then
        resetBuffUI True
    End If
    Application.Calculation = xlCalculationAutomatic
End Sub

Sub deleteBuffBuild()
    Application.Calculation = xlCalculationManual
    declareGlobals
    Dim cmbBox As Integer
    Dim sht As Worksheet
    Dim buffSht As Worksheet
    Dim rowI As Integer
    Set sht = ActiveWorkbook.Sheets(shtName)
    Set buffSht = ActiveWorkbook.Sheets(buffShtName)
    cmbBox = buffSht.Cells(47, 1).Value
    If cmbBox <= 0 Then
        MsgBox "No buff build currently selected, cannot delete."
    Else
        Dim name As String
        name = sht.Range(shtName).item(cmbBox).Value
        If MsgBox("Are you sure you want to delete the buff build named " & name & "? This cannot be undone.", vbYesNo, "Confirm delete") = vbYes Then
            rowI = getBuildRowNumByName(name)
            If rowI <= 0 Then
                MsgBox "buff build name couldn't resolve to row number!"
            Else
                 sht.Rows(rowI).Delete xlShiftUp
            End If
        End If
    End If
    Application.Calculation = xlCalculationAutomatic
End Sub

Sub saveBuff()
    Application.Calculation = xlCalculationManual
    declareGlobals
    Dim nameReady As Boolean: nameReady = False
    Dim cellAddy As String
    Dim i As Integer
    Dim rowI As Integer
    Dim cnt As Integer
    Dim sht As Worksheet
    Dim buffSht As Worksheet
    Dim rng As Range
    Set sht = ActiveWorkbook.Sheets(shtName)
    Set buffSht = ActiveWorkbook.Sheets(buffShtName)
    Dim cmbBox As Integer
    cmbBox = buffSht.Cells(47, 1).Value
    Dim saveName As String
    saveName = "Build" & (getBuildNames().Count + 1)
    If cmbBox > 0 Then
        saveName = sht.Range(shtName).item(cmbBox).Value
    End If
    saveName = InputBox("Build Name?", "Please provide a name for your buff Build", saveName)
    Do
        If hasBuildByName(saveName) Then
            If MsgBox(saveName & " already exists, overwrite?", vbYesNo, "Confirm Overwrite") = vbYes Then
                nameReady = True
            Else
                saveName = InputBox("Build Name?", "Please provide a name for your buff Build", saveName)
            End If
        Else
            nameReady = True
        End If
    Loop Until nameReady
    If MsgBox("Do you wish to save your current buffs as " & saveName & "?", vbYesNo, "Save buffs as " & saveName & "?") = vbYes Then
        cnt = sht.UsedRange.Columns.Count
        rowI = sht.UsedRange.Rows.Count + 1
        If hasBuildByName(saveName) Then
            rowI = getBuildRowNumByName(saveName)
        Else
            sht.Cells(rowI, 1).Value = saveName
        End If
        Application.ScreenUpdating = False
        For i = 2 To cnt Step 1
            cellAddy = sht.Cells(1, i).Value
            Set rng = buffSht.Evaluate(cellAddy)
            If rng Is Nothing Then
                MsgBox "Cell referenced at Sheet.Cells(1," & i & ") doesn't evaluate! Found '" & cellAddy & "'."
            Else
                sht.Cells(rowI, i).Value = rng.Value
                Set rng = Nothing
            End If
        Next i
        buffSht.Cells(47, 1).Value = rowI - savedBuildsRowStart + 1
        Application.ScreenUpdating = True
    End If
    Application.Calculation = xlCalculationAutomatic
End Sub

Private Sub resetBuffUI(resetCombo As Boolean)
    Application.Calculation = xlCalculationManual
    Dim cellAddy As String
    Dim i As Integer
    Dim cnt As Integer
    Dim sht As Worksheet
    Dim buffSht As Worksheet
    Dim rng As Range
    Set sht = ActiveWorkbook.Sheets(shtName)
    Set buffSht = ActiveWorkbook.Sheets(buffShtName)
    Dim cmbBox As Integer
    cmbBox = buffSht.Cells(47, 1).Value
    cnt = sht.UsedRange.Columns.Count
    Application.ScreenUpdating = False
    For i = 2 To cnt Step 1
        cellAddy = sht.Cells(1, i).Value
        Set rng = buffSht.Evaluate(cellAddy)
        If rng Is Nothing Then
            MsgBox "Cell referenced at Sheet.Cells(1," & i & ") doesn't evaluate! Found '" & cellAddy & "'."
        Else
            rng.Value = 0
        Set rng = Nothing
        End If
    Next i
    If resetCombo Then
        buffSht.Cells(47, 1) = 0
    End If
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

Private Function hasBuildByName(name As String) As Boolean
    Dim ret As Boolean
    ret = False
    Dim buildNames As Collection
    Set buildNames = getBuildNames()
    Dim i As Integer
    Dim cnt As Integer
    cnt = buildNames.Count
    For i = 1 To cnt Step 1
        If StrComp(name, buildNames(i), vbTextCompare) = 0 Then
            ret = True
        End If
    Next i
    hasBuildByName = ret
End Function

Private Function getBuildRowNumByName(name As String) As Integer
    Dim ret As Integer
    ret = -1
    Dim i As Integer
    Dim cnt As Integer
    Dim sht As Worksheet
    Set sht = ActiveWorkbook.Sheets(shtName)
    If Not sht Is Nothing Then
        cnt = sht.UsedRange.Rows.Count
        If cnt > 2 Then
            For i = 3 To cnt Step 1
                If StrComp(name, sht.Cells(i, 1).Value, vbTextCompare) = 0 Then
                    ret = i
                End If
            Next i
        End If
    End If
    getBuildRowNumByName = ret
End Function

Private Function getBuildNames() As Collection
    Dim i As Integer
    Dim cnt As Integer
    Dim sht As Worksheet
    Dim ret As New Collection
    Set sht = ActiveWorkbook.Sheets(shtName)
    If Not sht Is Nothing Then
        cnt = sht.UsedRange.Rows.Count
        If cnt > 2 Then
            For i = 3 To cnt Step 1
                ret.Add sht.Cells(i, 1).Value
            Next i
        End If
    End If
    Set getBuildNames = ret
End Function




Attribute VB_Name = "CalculateAEP"
Sub nextstat()
    Application.Calculation = xlCalculationManual
    Dim Temp As String, Temp2 As String, ws As String
        
    ' Optimize procs
    Call optimize_procs

    'copy current DPS
    ws = "Gear"
    
    Sheets("NextStat").Range("B1").Formula = Sheets("Gear").Range("C6").Value
    
    'ap
    Temp = Sheets(ws).Range("J150").Formula
    Sheets(ws).Range("J150").Formula = Temp & "+1*(1+Deadliness*0.02)"
    ws = "NextStat"
    Application.Calculate
    Sheets(ws).Range("B3").Formula = Sheets("Gear").Range("C6").Value
    ws = "Gear"
    Sheets(ws).Range("J150").Formula = Temp
    
    'agi
    Temp = Sheets(ws).Range("F150").Formula
    Sheets(ws).Range("F150").Formula = Temp & "+1*(1+BoK*0.1)*(1+SDoA*0.1)*(1+Zandalar*0.15)"
    ws = "NextStat"
    Application.Calculate
    Sheets(ws).Range("B4").Formula = Sheets("Gear").Range("C6").Value
    ws = "Gear"
    Sheets(ws).Range("F150").Formula = Temp
    
    'str
    Temp = Sheets(ws).Range("E150").Formula
    Sheets(ws).Range("E150").Formula = Temp & "+1*(1+BoK*0.1)*(1+Zandalar*0.15)"
    ws = "NextStat"
    Application.Calculate
    Sheets(ws).Range("B12").Formula = Sheets("Gear").Range("C6").Value
    ws = "Gear"
    Sheets(ws).Range("E150").Formula = Temp
    
    'crit
    Temp = Sheets(ws).Range("H150").Formula
    Sheets(ws).Range("H150").Formula = Temp & "+1%"
    ws = "NextStat"
    Application.Calculate
    Sheets(ws).Range("B5").Formula = Sheets("Gear").Range("C6").Value
    ws = "Gear"
    Sheets(ws).Range("H150").Formula = Temp
        
    'hit
    Temp = Sheets(ws).Range("I150").Formula
    Sheets(ws).Range("I150").Formula = Temp & "+1%"
    ws = "NextStat"
    Application.Calculate
    Sheets(ws).Range("B6").Formula = Sheets("Gear").Range("C6").Value
    ws = "Gear"
    Sheets(ws).Range("I150").Formula = Temp
    
    'haste
    Temp = Sheets(ws).Range("T150").Formula
    Sheets(ws).Range("T150").Formula = Temp & "*1.01"
    ws = "NextStat"
    Application.Calculate
    Sheets(ws).Range("B7").Formula = Sheets("Gear").Range("C6").Value
    ws = "Gear"
    Sheets(ws).Range("T150").Formula = Temp
    
    '-armor
    Temp = Sheets(ws).Range("O150").Formula
    Sheets(ws).Range("O150").Formula = Temp & "+1"
    ws = "NextStat"
    Application.Calculate
    Sheets(ws).Range("B8").Formula = Sheets("Gear").Range("C6").Value
    ws = "Gear"
    Sheets(ws).Range("O150").Formula = Temp
    
    'daggers
    Temp = Sheets(ws).Range("K150").Formula
    Sheets(ws).Range("K150").Formula = Temp & "+1"
    ws = "NextStat"
    Application.Calculate
    Sheets(ws).Range("B9").Formula = Sheets("Gear").Range("C6").Value
    ws = "Gear"
    Sheets(ws).Range("K150").Formula = Temp

    'swords
    Temp = Sheets(ws).Range("M150").Formula
    Sheets(ws).Range("M150").Formula = Temp & "+1"
    ws = "NextStat"
    Application.Calculate
    Sheets(ws).Range("B10").Formula = Sheets("Gear").Range("C6").Value
    ws = "Gear"
    Sheets(ws).Range("M150").Formula = Temp

    'maces
    Temp = Sheets(ws).Range("N150").Formula
    Sheets(ws).Range("N150").Formula = Temp & "+1"
    ws = "NextStat"
    Application.Calculate
    Sheets(ws).Range("B11").Formula = Sheets("Gear").Range("C6").Value
    ws = "Gear"
    Sheets(ws).Range("N150").Formula = Temp

    Application.Calculation = xlCalculationAutomatic
End Sub

Sub save_dps()
    Application.Calculation = xlCalculationManual
    Call optimize_procs
    Sheets("Gear").Range("C7").Value = Sheets("Gear").Range("C6").Value
    Application.Calculation = xlCalculationAutomatic
End Sub

Sub save_item(name, slot)
    Application.Calculation = xlCalculationManual
    Dim dps1 As Double
    dps1 = Sheets("Gear").Range("C6").Value - Sheets("Gear").Range("C7").Value
    
    Dim row As Integer
    row = 1
    While (Sheets("Upgrades").Range("A" & row).Value <> "")
        row = row + 1
    Wend
    Sheets("Upgrades").Range("A" & row).Formula = name
    Sheets("Upgrades").Range("B" & row).Formula = slot
    Sheets("Upgrades").Range("C" & row).Formula = dps1
    Application.Calculation = xlCalculationAutomatic
End Sub

Sub copy_mh()
    Dim MHType As String
    
    MHType = Replace(Sheets("Gear").Range("A11").Value, " ", "")
    Call save_item(Sheets("Gear").Range("B11").Value, MHType)
End Sub

Sub copy_oh()
    Dim OHType As String
    
    OHType = Replace(Sheets("Gear").Range("A14").Value, " ", "")
    Call save_item(Sheets("Gear").Range("B14").Value, "OHWeapon")
End Sub
Sub copy_ranged()
    Call save_item(Sheets("Gear").Range("B17").Value, "Ranged")
End Sub
Sub copy_helm()
    Call save_item(Sheets("Gear").Range("B18").Value, "Head")
End Sub

Sub copy_neck()
    Call save_item(Sheets("Gear").Range("B20").Value, "Neck")
End Sub
Sub copy_shoulder()
    Call save_item(Sheets("Gear").Range("B21").Value, "Shoulder")
End Sub
Sub copy_cloak()
    Call save_item(Sheets("Gear").Range("B23").Value, "Back")
End Sub
Sub copy_chest()
    Call save_item(Sheets("Gear").Range("B25").Value, "Chest")
End Sub
Sub copy_bracers()
    Call save_item(Sheets("Gear").Range("B27").Value, "Wrist")
End Sub
Sub copy_gloves()
    Call save_item(Sheets("Gear").Range("B29").Value, "Hands")
End Sub
Sub copy_belt()
    Call save_item(Sheets("Gear").Range("B31").Value, "Waist")
End Sub
Sub copy_legs()
    Call save_item(Sheets("Gear").Range("B32").Value, "Legs")
End Sub
Sub copy_boots()
    Call save_item(Sheets("Gear").Range("B34").Value, "Feet")
End Sub
Sub copy_ring1()
    Call save_item(Sheets("Gear").Range("B36").Value, "Finger")
End Sub
Sub copy_ring2()
    Call save_item(Sheets("Gear").Range("B37").Value, "Finger")
End Sub
Sub copy_trinket1()
    Call save_item(Sheets("Gear").Range("B38").Value, "Trinket")
End Sub
Sub copy_trinket2()
    Call save_item(Sheets("Gear").Range("B39").Value, "Trinket")
End Sub



Attribute VB_Name = "GearBuilds"
    Dim shtName As String
    Dim gearShtName As String
    Dim savedBuildsRowStart As Integer
Private Sub declareGlobals()
    shtName = "GearBuilds"
    gearShtName = "Gear"
    savedBuildsRowStart = 3
End Sub

Sub gearBuildComboBox_Change()
    Application.Calculation = xlCalculationManual
    declareGlobals
    Dim rowI As Integer
    Dim i As Integer
    Dim cnt As Integer
    Dim selBuildName As String
    Dim sht As Worksheet
    Dim gearSht As Worksheet
    Dim cmbBox As Integer
    Dim rng As Range
    Set sht = ActiveWorkbook.Sheets(shtName)
    Set gearSht = ActiveWorkbook.Sheets(gearShtName)
    cmbBox = gearSht.Cells(8, 1).Value
    If MsgBox("You selected " & sht.Range(shtName).item(cmbBox).Value & " gear build, would you like to load?.", vbYesNo, "Change gear Build") = vbYes Then
        rowI = (cmbBox - 1) + savedBuildsRowStart
        cnt = sht.UsedRange.Columns.Count
        Application.ScreenUpdating = False
        For i = 2 To cnt Step 1
            cellAddy = sht.Cells(1, i).Value
            Set rng = gearSht.Evaluate(cellAddy)
            If rng Is Nothing Then
                MsgBox "Cell referenced at Sheet.Cells(1," & i & ") doesn't evaluate! Found '" & cellAddy & "'."
            Else
                rng.Value = sht.Cells(rowI, i).Value
                Set rng = Nothing
            End If
        Next i
        Application.ScreenUpdating = True
    Else
        gearSht.Cells(8, 1) = 0
    End If
    Application.Calculation = xlCalculationAutomatic
End Sub

Sub deleteGearBuild()
    Application.Calculation = xlCalculationManual
    declareGlobals
    Dim cmbBox As Integer
    Dim sht As Worksheet
    Dim gearSht As Worksheet
    Dim rowI As Integer
    Set sht = ActiveWorkbook.Sheets(shtName)
    Set gearSht = ActiveWorkbook.Sheets(gearShtName)
    cmbBox = gearSht.Cells(8, 1).Value
    If cmbBox <= 0 Then
        MsgBox "No gear build currently selected, cannot delete."
    Else
        Dim name As String
        name = sht.Range(shtName).item(cmbBox).Value
        If MsgBox("Are you sure you want to delete the gear build named " & name & "? This cannot be undone.", vbYesNo, "Confirm delete") = vbYes Then
            rowI = getBuildRowNumByName(name)
            If rowI <= 0 Then
                MsgBox "gear build name couldn't resolve to row number!"
            Else
                sht.Rows(rowI).Delete xlShiftUp
            End If
        End If
    End If
    Application.Calculation = xlCalculationAutomatic
End Sub

Sub saveGear()
    Application.Calculation = xlCalculationManual
    declareGlobals
    Dim nameReady As Boolean: nameReady = False
    Dim cellAddy As String
    Dim i As Integer
    Dim rowI As Integer
    Dim cnt As Integer
    Dim sht As Worksheet
    Dim gearSht As Worksheet
    Dim rng As Range
    Set sht = ActiveWorkbook.Sheets(shtName)
    Set gearSht = ActiveWorkbook.Sheets(gearShtName)
    Dim cmbBox As Integer
    cmbBox = gearSht.Cells(8, 1).Value
    Dim saveName As String
    saveName = "Build" & (getBuildNames().Count + 1)
    If cmbBox > 0 Then
        saveName = sht.Range(shtName).item(cmbBox).Value
    End If
    saveName = InputBox("Build Name?", "Please provide a name for your gear Build", saveName)
    Do
        If hasBuildByName(saveName) Then
            If MsgBox(saveName & " already exists, overwrite?", vbYesNo, "Confirm Overwrite") = vbYes Then
                nameReady = True
            Else
                saveName = InputBox("Build Name?", "Please provide a name for your gear Build", saveName)
            End If
        Else
            nameReady = True
        End If
    Loop Until nameReady
    If MsgBox("Do you wish to save your current gears as " & saveName & "?", vbYesNo, "Save gears as " & saveName & "?") = vbYes Then
        cnt = sht.UsedRange.Columns.Count
        rowI = sht.UsedRange.Rows.Count + 1
        If hasBuildByName(saveName) Then
            rowI = getBuildRowNumByName(saveName)
        Else
            sht.Cells(rowI, 1).Value = saveName
        End If
        Application.ScreenUpdating = False
        For i = 2 To cnt Step 1
            cellAddy = sht.Cells(1, i).Value
            Set rng = gearSht.Evaluate(cellAddy)
            If rng Is Nothing Then
                MsgBox "Cell referenced at Sheet.Cells(1," & i & ") doesn't evaluate! Found '" & cellAddy & "'."
            Else
                sht.Cells(rowI, i).Value = rng.Value
                Set rng = Nothing
            End If
        Next i
        gearSht.Cells(8, 1).Value = rowI - savedBuildsRowStart + 1
            Application.ScreenUpdating = True
    End If
    Application.Calculation = xlCalculationAutomatic
End Sub

Private Function hasBuildByName(name As String) As Boolean
    Dim ret As Boolean
    ret = False
    Dim buildNames As Collection
    Set buildNames = getBuildNames()
    Dim i As Integer
    Dim cnt As Integer
    cnt = buildNames.Count
    For i = 1 To cnt Step 1
        If StrComp(name, buildNames(i), vbTextCompare) = 0 Then
            ret = True
        End If
    Next i
    hasBuildByName = ret
End Function

Private Function getBuildRowNumByName(name As String) As Integer
    Dim ret As Integer
    ret = -1
    Dim i As Integer
    Dim cnt As Integer
    Dim sht As Worksheet
    Set sht = ActiveWorkbook.Sheets(shtName)
    If Not sht Is Nothing Then
        cnt = sht.UsedRange.Rows.Count
        If cnt > 2 Then
            For i = 3 To cnt Step 1
                If StrComp(name, sht.Cells(i, 1).Value, vbTextCompare) = 0 Then
                    ret = i
                End If
            Next i
        End If
    End If
    getBuildRowNumByName = ret
End Function

Private Function getBuildNames() As Collection
    Dim i As Integer
    Dim cnt As Integer
    Dim sht As Worksheet
    Dim ret As New Collection
    Set sht = ActiveWorkbook.Sheets(shtName)
    If Not sht Is Nothing Then
        cnt = sht.UsedRange.Rows.Count
        If cnt > 2 Then
            For i = 3 To cnt Step 1
                ret.Add sht.Cells(i, 1).Value
            Next i
        End If
    End If
    Set getBuildNames = ret
End Function



Attribute VB_Name = "Module1"
Public Sub UpgradeCheck(ByVal TargetRow As Integer)
On Error Resume Next
Dim CurrentDPS As Double, CurrentItem As String, UpgradeList As String, NewDPS As Double
Dim item, ItemCell As Range, DpsCell As Range, ItemList As Range, Listname As String
Dim Itemlist2 As New Collection
'**********************************************
' Initalize Variables
Set ItemCell = Excel.ActiveSheet.Cells(TargetRow, 2)
Set DpsCell = Excel.ActiveSheet.Cells(6, 3)
If TargetRow = 11 Or TargetRow = 14 Then
    Listname = Replace(Excel.ActiveSheet.Cells(TargetRow, 1).Value, " ", "") & "List"
Else
    Listname = Right(ItemCell.Validation.Formula1, Len(ItemCell.Validation.Formula1) - 1)
End If
Set ItemList = Excel.Range(Excel.ActiveWorkbook.Names.item(Listname))
For Each item In ItemList
Itemlist2.Add item.Value
Next item
CurrentItem = ItemCell.Value
CurrentDPS = Application.Round(DpsCell.Value, 2)
'**********************************************
' Compare Items
For Each item In Itemlist2
    If Left(item, 1) = "(" Then GoTo SkipItem
    If Trim(item) = "" Then GoTo SkipItem
    If UCase(CurrentItem) = UCase(item) Then GoTo SkipItem
    ItemCell.Value = item
    NewDPS = Application.Round(DpsCell.Value, 2)

    If NewDPS > CurrentDPS Then
        UpgradeList = UpgradeList & NewDPS & " (" & Application.Round(NewDPS - CurrentDPS, 1) & ") - " & ItemCell.Value & vbLf
        Call DBMCopyItems(TargetRow)
    End If
    
SkipItem:
Next item
ItemCell.Value = CurrentItem
'If UpgradeList = "" Then UpgradeList = " No DPS upgrades Available."
ItemCell.Comment.Delete
ItemCell.AddComment UpgradeList
ItemCell.Comment.Shape.TextFrame.Characters.Font.Size = 10
ItemCell.Comment.Shape.TextFrame.WrapAutoText = False
ItemCell.Comment.Shape.TextFrame.AutoSize = True
ItemCell.Comment.Visible = False
'**********************************************
' Cleanup
Set item = Nothing
Set ItemCell = Nothing
Set DpsCell = Nothing
Set ItemList = Nothing
Set Itemlist2 = Nothing
'MsgBox UpgradeList
End Sub


Public Sub DBMCopyItems(row As Integer)
    Select Case row
        Case 11
            Call copy_mh
        Case 14
            Call copy_oh
        Case 17
            Call copy_ranged
        Case 18
            Call copy_helm
        Case 20
            Call copy_neck
        Case 21
            Call copy_shoulder
        Case 23
            Call copy_cloak
        Case 25
            Call copy_chest
        Case 27
            Call copy_bracers
        Case 29
            Call copy_gloves
        Case 31
            Call copy_belt
        Case 32
            Call copy_legs
        Case 34
            Call copy_boots
        Case 36
            Call copy_ring1
        Case 37
            Call copy_ring2
        Case 38
            Call copy_trinket1
        Case 39
            Call copy_trinket2
    End Select
End Sub

Attribute VB_Name = "Module2"
Option Explicit
Sub UpgradeMH()
Call UpgradeCheck(11)
End Sub
Sub UpgradeOH()
Call UpgradeCheck(14)
End Sub
Sub UpgradeRange()
Call UpgradeCheck(17)
End Sub
Sub HeadUpgrade()
Call UpgradeCheck(18)
End Sub
Sub NeckUpgrade()
Call UpgradeCheck(20)
End Sub
Sub ShoulderUpgrade()
Call UpgradeCheck(21)
End Sub
Sub BackUpgrade()
Call UpgradeCheck(23)
End Sub
Sub ChestUpgrade()
Call UpgradeCheck(25)
End Sub
Sub BracerUPgrade()
Call UpgradeCheck(27)
End Sub
Sub HandUpgrade()
Call UpgradeCheck(29)
End Sub
Sub BeltUpgrade()
Call UpgradeCheck(31)
End Sub
Sub LegUpgrade()
Call UpgradeCheck(32)
End Sub
Sub BootUpgrade()
Call UpgradeCheck(34)
End Sub
Sub Ring1Upgrade()
Call UpgradeCheck(36)
End Sub
Sub Ring2Upgrade()
Call UpgradeCheck(37)
End Sub
Sub Trinket1Upgrade()
Call UpgradeCheck(38)
End Sub
Sub Trinket2Upgrade()
Call UpgradeCheck(39)
End Sub
Sub AllUpgrades()
    Call UpgradeCheck(11)
    Call UpgradeCheck(14)
    Call UpgradeCheck(17)
    Call UpgradeCheck(18)
    Call UpgradeCheck(20)
    Call UpgradeCheck(21)
    Call UpgradeCheck(23)
    Call UpgradeCheck(25)
    Call UpgradeCheck(27)
    Call UpgradeCheck(29)
    Call UpgradeCheck(31)
    Call UpgradeCheck(32)
    Call UpgradeCheck(34)
    Call UpgradeCheck(36)
    Call UpgradeCheck(37)
    Call UpgradeCheck(38)
    Call UpgradeCheck(39)
End Sub

Sub EnchantUpgrades()
        Call UpgradeCheck(12)
        Call UpgradeCheck(13)
        Call UpgradeCheck(15)
        Call UpgradeCheck(16)
        Call UpgradeCheck(19)
        Call UpgradeCheck(22)
        Call UpgradeCheck(24)
        Call UpgradeCheck(26)
        Call UpgradeCheck(28)
        Call UpgradeCheck(30)
        Call UpgradeCheck(33)
        Call UpgradeCheck(35)
End Sub

Sub DeleteComment()
    Dim CRange As Range
    For Each CRange In [B10:B71]
            CRange.ClearComments
        Next
    ActiveWorkbook.Worksheets("Upgrades").Range("a2:e100").Clear
End Sub

Attribute VB_Name = "Module3"
Sub enablecycles()
    Sheets("Cycles").Range("AE33:AE82").Value = True
    Sheets("Cycles").Range("AE84:AE118").Value = True
End Sub

Sub disablecycles()
    Sheets("Cycles").Range("AE33:AE82").Value = False
    Sheets("Cycles").Range("AE84:AE118").Value = False
End Sub
Attribute VB_Name = "Optimize"
Sub optimize_procs()
    Dim tempCalc As XlCalculation
    
    tempCalc = Application.Calculation
    Application.Calculation = xlCalculationManual
    Dim ws As String
    
    ' Optimize buffs
    'ws = "Gear"
    'Sheets(ws).Range("W73:Y73").Value = Sheets(ws).Range("E73:G73").Value
    'Sheets(ws).Range("W86:Y86").Value = Sheets(ws).Range("E86:G86").Value
    'Sheets(ws).Range("W89").Value = Sheets(ws).Range("F89").Value
    'Sheets(ws).Range("W91").Value = Sheets(ws).Range("G91").Value
    'Application.Calculate
    
    ' Optimize procs
    ws = "Damage Calc"
    Sheets(ws).Range("M48:M54").Value = Sheets(ws).Range("N39:N45").Value
    Sheets(ws).Range("N48:N54").Value = Sheets(ws).Range("P39:P45").Value
    Sheets(ws).Range("O48:O54").Value = Sheets(ws).Range("Q39:Q45").Value
    Application.Calculate
        
    Application.Calculation = tempCalc
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TalentBuilds"
    Dim shtName As String
    Dim talShtName As String
    Dim savedBuildsRowStart As Integer
Private Sub declareGlobals()
    shtName = "TalentBuilds"
    talShtName = "Talents"
    savedBuildsRowStart = 3
End Sub
Sub talentBuildComboBox_Change()
    Application.Calculation = xlCalculationManual
    declareGlobals
    Dim rowI As Integer
    Dim i As Integer
    Dim cnt As Integer
    Dim selBuildName As String
    Dim sht As Worksheet
    Dim talSht As Worksheet
    Dim cmbBox As Integer
    Dim rng As Range
    Set sht = ActiveWorkbook.Sheets(shtName)
    Set talSht = ActiveWorkbook.Sheets(talShtName)
    cmbBox = talSht.Cells(11, 1).Value
    If cmbBox <= 0 Then
        MsgBox "No talent build currently selected, cannot reload."
    Else
        If MsgBox("You selected " & sht.Range(shtName).item(cmbBox).Value & " talent build, would you like to load?.", vbYesNo, "Change Talent Build") = vbYes Then
            rowI = (cmbBox - 1) + savedBuildsRowStart
            cnt = sht.UsedRange.Columns.Count
            Application.ScreenUpdating = False
            For i = 2 To cnt Step 1
                cellAddy = sht.Cells(1, i).Value
                Set rng = talSht.Evaluate(cellAddy)
                If rng Is Nothing Then
                    MsgBox "Cell referenced at Sheet.Cells(1," & i & ") doesn't evaluate! Found '" & cellAddy & "'."
                Else
                    rng.Value = sht.Cells(rowI, i).Value
                    Set rng = Nothing
                End If
            Next i
            Application.ScreenUpdating = True
        Else
            talSht.Cells(11, 1) = 0
        End If
    End If
    Application.Calculation = xlCalculationAutomatic
End Sub

Sub resetTalents()
    Application.Calculation = xlCalculationManual
    declareGlobals
    If MsgBox("Do you really wish to reset all talents to 0?", vbYesNo, "Confirm Reset") = vbYes Then
        resetTalentUI True
    End If
    Application.Calculation = xlCalculationAutomatic
End Sub

Sub deleteTalentBuild()
    Application.Calculation = xlCalculationManual
    declareGlobals
    Dim cmbBox As Integer
    Dim sht As Worksheet
    Dim talSht As Worksheet
    Dim rowI As Integer
    Set sht = ActiveWorkbook.Sheets(shtName)
    Set talSht = ActiveWorkbook.Sheets(talShtName)
    cmbBox = talSht.Cells(11, 1).Value
    If cmbBox <= 0 Then
        MsgBox "No talent build currently selected, cannot delete."
    Else
        Dim name As String
        name = sht.Range(shtName).item(cmbBox).Value
        If MsgBox("Are you sure you want to delete the talent build named " & name & "? This cannot be undone.", vbYesNo, "Confirm delete") = vbYes Then
            rowI = getBuildRowNumByName(name)
            If rowI <= 0 Then
                MsgBox "Talent build name couldn't resolve to row number!"
            Else
                sht.Rows(rowI).Delete xlShiftUp
                resetTalentUI (True)
            End If
        End If
    End If
    Application.Calculation = xlCalculationAutomatic
End Sub

Sub saveTalents()
    Application.Calculation = xlCalculationManual
    declareGlobals
    Dim nameReady As Boolean: nameReady = False
    Dim cellAddy As String
    Dim i As Integer
    Dim rowI As Integer
    Dim cnt As Integer
    Dim sht As Worksheet
    Dim talSht As Worksheet
    Dim rng As Range
    Set sht = ActiveWorkbook.Sheets(shtName)
    Set talSht = ActiveWorkbook.Sheets(talShtName)
    Dim cmbBox As Integer
    cmbBox = talSht.Cells(11, 1).Value
    Dim saveName As String
    saveName = "Build" & (getBuildNames().Count + 1)
    If cmbBox > 0 Then
        saveName = sht.Range(shtName).item(cmbBox).Value
    End If
    saveName = InputBox("Build Name?", "Please provide a name for your Talent Build", saveName)
    Do
        If hasBuildByName(saveName) Then
            If MsgBox(saveName & " already exists, overwrite?", vbYesNo, "Confirm Overwrite") = vbYes Then
                nameReady = True
            Else
                saveName = InputBox("Build Name?", "Please provide a name for your Talent Build", saveName)
            End If
        Else
            nameReady = True
        End If
    Loop Until nameReady
    If MsgBox("Do you wish to save your current talents as " & saveName & "?", vbYesNo, "Save Talents as " & saveName & "?") = vbYes Then
        cnt = sht.UsedRange.Columns.Count
        rowI = sht.UsedRange.Rows.Count + 1
        If hasBuildByName(saveName) Then
            rowI = getBuildRowNumByName(saveName)
        Else
            sht.Cells(rowI, 1).Value = saveName
        End If
        Application.ScreenUpdating = False
        For i = 2 To cnt Step 1
            cellAddy = sht.Cells(1, i).Value
            Set rng = talSht.Evaluate(cellAddy)
            If rng Is Nothing Then
                MsgBox "Cell referenced at Sheet.Cells(1," & i & ") doesn't evaluate! Found '" & cellAddy & "'."
            Else
                sht.Cells(rowI, i).Value = rng.Value
                Set rng = Nothing
            End If
        Next i
        talSht.Cells(11, 1).Value = rowI - savedBuildsRowStart + 1
        Application.ScreenUpdating = True
    End If
    Application.Calculation = xlCalculationAutomatic
End Sub

Private Sub resetTalentUI(resetCombo As Boolean)
    Application.Calculation = xlCalculationManual
    Dim cellAddy As String
    Dim i As Integer
    Dim cnt As Integer
    Dim sht As Worksheet
    Dim talSht As Worksheet
    Dim rng As Range
    Set sht = ActiveWorkbook.Sheets(shtName)
    Set talSht = ActiveWorkbook.Sheets(talShtName)
    Dim cmbBox As Integer
    cmbBox = talSht.Cells(11, 1).Value
    cnt = sht.UsedRange.Columns.Count
    Application.ScreenUpdating = False
    For i = 2 To cnt Step 1
        cellAddy = sht.Cells(1, i).Value
        Set rng = talSht.Evaluate(cellAddy)
        If rng Is Nothing Then
            MsgBox "Cell referenced at Sheet.Cells(1," & i & ") doesn't evaluate! Found '" & cellAddy & "'."
        Else
            rng.Value = 0
            Set rng = Nothing
        End If
    Next i
    If resetCombo Then
        talSht.Cells(11, 1) = 0
    End If
        Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
End Sub

Private Function hasBuildByName(name As String) As Boolean
    Dim ret As Boolean
    ret = False
    Dim buildNames As Collection
    Set buildNames = getBuildNames()
    Dim i As Integer
    Dim cnt As Integer
    cnt = buildNames.Count
    For i = 1 To cnt Step 1
        If StrComp(name, buildNames(i), vbTextCompare) = 0 Then
            ret = True
        End If
    Next i
    hasBuildByName = ret
End Function

Private Function getBuildRowNumByName(name As String) As Integer
    Dim ret As Integer
    ret = -1
    Dim i As Integer
    Dim cnt As Integer
    Dim sht As Worksheet
    Set sht = ActiveWorkbook.Sheets(shtName)
    If Not sht Is Nothing Then
        cnt = sht.UsedRange.Rows.Count
        If cnt > 2 Then
            For i = 3 To cnt Step 1
                If StrComp(name, sht.Cells(i, 1).Value, vbTextCompare) = 0 Then
                    ret = i
                End If
            Next i
        End If
    End If
    getBuildRowNumByName = ret
End Function

Private Function getBuildNames() As Collection
    Dim i As Integer
    Dim cnt As Integer
    Dim sht As Worksheet
    Dim ret As New Collection
    Set sht = ActiveWorkbook.Sheets(shtName)
    If Not sht Is Nothing Then
        cnt = sht.UsedRange.Rows.Count
        If cnt > 2 Then
            For i = 3 To cnt Step 1
                ret.Add sht.Cells(i, 1).Value
            Next i
        End If
    End If
    Set getBuildNames = ret
End Function


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
