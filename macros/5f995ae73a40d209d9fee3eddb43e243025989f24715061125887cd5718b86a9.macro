Attribute VB_Name = "Foglio1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "descr, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "descr_new, 5, 1, MSForms, ComboBox"




Private Sub descr_new_Change()

Range("C6").Select
Me.Unprotect ("g.m.")
ActiveCell.Value = descr_new.text
Range("J6").Select
ActiveCell.Value = descr_new.List(descr_new.ListIndex, 2)
Me.Protect ("g.m.")

End Sub
Attribute VB_Name = "Foglio7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Modulo1"

Sub rinomina_nomi()

    With ActiveWorkbook.Names("Pippo")
        .Name = "Pluto"
        .RefersTo = "=Tabella1!$C$18:$AB$28"
        '.RefersToR1C1 = "=Tabella1!R18C3:R28C28"
        '.Comment = ""
    End With

End Sub
Sub crea_nomi()
  
  ActiveWorkbook.Names.Add Name:="Tabella1", RefersTo:="=Tabella1!$C$18:$AB$28"
  ActiveWorkbook.Names.Add Name:="Tabella2", RefersTo:="=Tabella2!$A$11:$G$1010"
  ActiveWorkbook.Names.Add Name:="Tabella3", RefersTo:="=Tabella3!$A$11:$G$1010"
  ActiveWorkbook.Names.Add Name:="Tabella4", RefersTo:="=Tabella4_5!$B$10:$E$10"
  ActiveWorkbook.Names.Add Name:="Tabella5", RefersTo:="=Tabella4_5!$B$17:$D$22"
  ActiveWorkbook.Names.Add Name:="Tabella6", RefersTo:="=Tabella6_7!$B$10:$E$10"
  ActiveWorkbook.Names.Add Name:="Tabella7", RefersTo:="=Tabella6_7!$B$17:$D$22"
  ActiveWorkbook.Names.Add Name:="Tabella8", RefersTo:="=Tabella8!$B$11:$D$18"
  ActiveWorkbook.Names.Add Name:="DominioTipoTabella2", RefersTo:="=Domini!$A$3:$A$8"
  ActiveWorkbook.Names.Add Name:="DominioStrutturaTabella2", RefersTo:="=Domini!$B$3:$B$10"
  ActiveWorkbook.Names.Add Name:="DominioModoTabella2", RefersTo:="=Domini!$C$3:$C$4"
  ActiveWorkbook.Names.Add Name:="DominioCategoriaTabella2", RefersTo:="=Domini!$D$3:$D$6"
  
  
End Sub

Sub azzera()

Application.EnableCancelKey = xlDisabled
Application.ScreenUpdating = False


For Each f In ActiveWorkbook.Sheets

    Select Case f.Name
           
           Case Is = "Tabella1"
       
            Sheets(f.Name).Activate
            Sheets(f.Name).Unprotect ("g.m.")
                       
            Range("C18").Activate
            Selection.ColumnWidth = 15
            
            Range("D18").Activate
            Selection.ColumnWidth = 15
            
            Range("E18").Activate
            Selection.ColumnWidth = 15
            
            Range("F18").Activate
            Selection.ColumnWidth = 15
            
            Range("G18").Activate
            Selection.ColumnWidth = 15
            
            Range("H18").Activate
            Selection.ColumnWidth = 15
            
            Range("I18").Activate
            Selection.ColumnWidth = 15
            
            Range("J18").Activate
            Selection.ColumnWidth = 15
            
            Range("K18").Activate
            Selection.ColumnWidth = 15
            
            Range("L18").Activate
            Selection.ColumnWidth = 15
            
            Range("M18").Activate
            Selection.ColumnWidth = 15
            
            Range("N18").Activate
            Selection.ColumnWidth = 15
            
            Range("O18").Activate
            Selection.ColumnWidth = 15
            
            Range("P18").Activate
            Selection.ColumnWidth = 15
            
            Range("Q18").Activate
            Selection.ColumnWidth = 15
            
            Range("R18").Activate
            Selection.ColumnWidth = 15
            
            Range("S18").Activate
            Selection.ColumnWidth = 15
            
            Range("T18").Activate
            Selection.ColumnWidth = 15
            
            Range("U18").Activate
            Selection.ColumnWidth = 15
            
            Range("V18").Activate
            Selection.ColumnWidth = 15
            
            Range("W18").Activate
            Selection.ColumnWidth = 15
            
            Range("X18").Activate
            Selection.ColumnWidth = 15
            
            Range("Y18").Activate
            Selection.ColumnWidth = 15
                        
            Range("C18:Y25").NumberFormat = "#,##0"
                       
            Range("C18:Y25").Font.ColorIndex = 1
                                    
            Range("C18:Y25").Locked = False
                                               
            Range("C18:Y25").Value = 0
                                  
            Range("C18:Y25").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            
           Sheets(f.Name).Calculate
           Sheets(f.Name).Protect ("g.m.")
           Range("C18").Activate
           
           
        Case Is = "Tabella1_1"
              
            Sheets(f.Name).Activate
            Sheets(f.Name).Unprotect ("g.m.")
                       
            Range("C18").Activate
            Selection.ColumnWidth = 15
            
            
            Range("C18:C25").NumberFormat = "#,##0"
            Range("C18:C25").Font.ColorIndex = 1
            Range("C18:C25").Locked = False
            
            Range("C18:C25").Value = 0
                                  
            Range("C18:C25").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            'With Selection.Borders(xlInsideVertical)
            '    .LineStyle = xlContinuous
            '    .Weight = xlHairline
            '    .ColorIndex = xlAutomatic
            'End With
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            
            
           
           Sheets(f.Name).Calculate
           Sheets(f.Name).Protect ("g.m.")
           Range("C18").Activate
           
           
           Case Is = "Tabella2", "Tabella3", "Tabella4_5", _
                     "Tabella6_7", "Tabella8"
                     
                Sheets(f.Name).Activate
                Sheets(f.Name).Unprotect ("g.m.")
                     
    
           Case Is = "Errori"
                
                Sheets(f.Name).Activate
                Application.DisplayAlerts = False
                ActiveWorkbook.Unprotect ("g.m.")
                ActiveSheet.Delete
                ActiveWorkbook.Protect ("g.m.")
                Application.DisplayAlerts = True
        
   End Select

Next f

For Each n In ActiveWorkbook.Names
    Select Case n.Name
           
           Case Is = "Tabella4", "Tabella5", "Tabella6", _
                     "Tabella7", "Tabella8", "Tab2NumCorsi", "Tab2NumPart", _
                     "Tab3NumCorsi", "Tab3NumPart"
    
           Set p = Range(n.Name)
           For Each cella In p
               If cella.Locked = False And Not cella.HasFormula Then
                  cella.Value = 0
                  'cella.ClearContents
               End If
             
           Next cella
           
           Sheets("Tabella2").Select
           Range("C11").Select
           Selection.Copy
           Range("C12:C1010").Select
           Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
               SkipBlanks:=False, Transpose:=False
           Application.CutCopyMode = False
           Range("C11").Select
        
           Sheets("Tabella3").Select
           Range("C11").Select
           Selection.Copy
           Range("C12:C1010").Select
           Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
               SkipBlanks:=False, Transpose:=False
           Application.CutCopyMode = False
           Range("C11").Select
        
           Sheets("Tabella2").Select
           Range("G11").Select
           Selection.Copy
           Range("G12:G1010").Select
           Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
               SkipBlanks:=False, Transpose:=False
           Application.CutCopyMode = False
           Range("G11").Select
        
           Sheets("Tabella3").Select
           Range("G11").Select
           Selection.Copy
           Range("G12:G1010").Select
           Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
               SkipBlanks:=False, Transpose:=False
           Application.CutCopyMode = False
           Range("G11").Select
        
        
        
           Case Is = "CategoriaTabella2", "ModoTabella2", _
                     "StrutturaTabella2", "TipoTabella2", "CategoriaTabella3", _
                     "ModoTabella3", "StrutturaTabella3", _
                     "TipoTabella3"
        
           Set p = Range(n.Name)
           For Each cella In p
               If cella.Locked = False And Not cella.HasFormula Then
                  cella.ClearContents
               End If
           Next cella
           
           Sheets("Tabella2").Select
           Range("A11").Select
           Selection.Copy
           Range("A12:A1010").Select
           Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
               SkipBlanks:=False, Transpose:=False
           Application.CutCopyMode = False
           Range("A11").Select
        
           Sheets("Tabella3").Select
           Range("A11").Select
           Selection.Copy
           Range("A12:A1010").Select
           Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
               SkipBlanks:=False, Transpose:=False
           Application.CutCopyMode = False
           Range("A11").Select
        
           Sheets("Tabella2").Select
           Range("B11").Select
           Selection.Copy
           Range("B12:B1010").Select
           Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
               SkipBlanks:=False, Transpose:=False
           Application.CutCopyMode = False
           Range("A11").Select
        
           Sheets("Tabella3").Select
           Range("B11").Select
           Selection.Copy
           Range("B12:B1010").Select
           Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
               SkipBlanks:=False, Transpose:=False
           Application.CutCopyMode = False
           Range("A11").Select
        
           Sheets("Tabella2").Select
           Range("D11").Select
           Selection.Copy
           Range("D12:D1010").Select
           Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
               SkipBlanks:=False, Transpose:=False
           Application.CutCopyMode = False
           Range("A11").Select
        
           Sheets("Tabella3").Select
           Range("D11").Select
           Selection.Copy
           Range("D12:D1010").Select
           Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
               SkipBlanks:=False, Transpose:=False
           Application.CutCopyMode = False
           Range("A11").Select
        
           Sheets("Tabella2").Select
           Range("E11").Select
           Selection.Copy
           Range("E12:E1010").Select
           Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
               SkipBlanks:=False, Transpose:=False
           Application.CutCopyMode = False
           Range("A11").Select
        
           Sheets("Tabella3").Select
           Range("E11").Select
           Selection.Copy
           Range("E12:E1010").Select
           Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
               SkipBlanks:=False, Transpose:=False
           Application.CutCopyMode = False
           Range("A11").Select
        
           Sheets("Tabella2").Select
           Range("F11").Select
           Selection.Copy
           Range("F12:F1010").Select
           Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
               SkipBlanks:=False, Transpose:=False
           Application.CutCopyMode = False
           Range("A11").Select
        
           Sheets("Tabella3").Select
           Range("F11").Select
           Selection.Copy
           Range("F12:F1010").Select
           Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
               SkipBlanks:=False, Transpose:=False
           Application.CutCopyMode = False
           Range("A11").Select
        
        
    End Select
Next n

For Each f In ActiveWorkbook.Sheets

    Select Case f.Name
           
           Case Is = "Tabella1", "Tabella1_1", "Tabella2", "Tabella3", "Tabella4_5", _
                     "Tabella6_7", "Tabella8"
                     
                 Sheets(f.Name).Activate
                 Range("A1").Select
                 Sheets(f.Name).Protect ("g.m.")
                     
            
   End Select

Next f
Sheets("Tabella4_5").Select
Sheets("Tabella4_5").Unprotect ("g.m.")
Range("B10").Select
With Selection.Font
    .Name = "Arial"
    .FontStyle = "Normale"
    .Size = 10
    .Strikethrough = False
    .Superscript = False
    .Subscript = False
    .OutlineFont = False
    .Shadow = False
    .Underline = xlUnderlineStyleNone
    .ColorIndex = xlAutomatic
End With
Sheets("Tabella4_5").Protect ("g.m.")

Sheets("Tabella6_7").Select
Sheets("Tabella6_7").Unprotect ("g.m.")
Range("B10").Select
With Selection.Font
    .Name = "Arial"
    .FontStyle = "Normale"
    .Size = 10
    .Strikethrough = False
    .Superscript = False
    .Subscript = False
    .OutlineFont = False
    .Shadow = False
    .Underline = xlUnderlineStyleNone
    .ColorIndex = xlAutomatic
End With
Sheets("Tabella6_7").Protect ("g.m.")


make_convalida

Sheets("Foglio Informativo").Activate

Range("A1").Select
Application.EnableCancelKey = xlInterrupt
Application.ScreenUpdating = True

End Sub
Sub make_convalida()

'Eliminazione del foglio errori se esiste
'Debug.Print Now()

For Each f In ActiveWorkbook.Sheets

    Select Case f.Name
           
           Case Is = "Tabella1", "Tabella1_1", "Tabella2", "Tabella3", "Tabella4_5", _
                     "Tabella6_7", "Tabella8"
                     
                Sheets(f.Name).Activate
                Sheets(f.Name).Unprotect ("g.m.")
                     
    
           Case Is = "Errori"
                
                Sheets(f.Name).Activate
                Application.DisplayAlerts = False
                ActiveWorkbook.Unprotect ("g.m.")
                ActiveSheet.Delete
                ActiveWorkbook.Protect ("g.m.")
                Application.DisplayAlerts = True
        
   End Select

Next f

'Worksheets("Tabella1").Unprotect ("g.m.")
Worksheets("Tabella1").Select

'Formattazione celle area dati qualora siano stati cancellati con taglia e incolla
                       
Range("C18").Activate
Selection.ColumnWidth = 15

Range("D18").Activate
Selection.ColumnWidth = 15

Range("E18").Activate
Selection.ColumnWidth = 15

Range("F18").Activate
Selection.ColumnWidth = 15

Range("G18").Activate
Selection.ColumnWidth = 15

Range("H18").Activate
Selection.ColumnWidth = 15

Range("I18").Activate
Selection.ColumnWidth = 15

Range("J18").Activate
Selection.ColumnWidth = 15

Range("K18").Activate
Selection.ColumnWidth = 15

Range("L18").Activate
Selection.ColumnWidth = 15

Range("M18").Activate
Selection.ColumnWidth = 15

Range("N18").Activate
Selection.ColumnWidth = 15

Range("O18").Activate
Selection.ColumnWidth = 15

Range("P18").Activate
Selection.ColumnWidth = 15

Range("Q18").Activate
Selection.ColumnWidth = 15

Range("R18").Activate
Selection.ColumnWidth = 15

Range("S18").Activate
Selection.ColumnWidth = 15

Range("T18").Activate
Selection.ColumnWidth = 15

Range("U18").Activate
Selection.ColumnWidth = 15

Range("V18").Activate
Selection.ColumnWidth = 15

Range("W18").Activate
Selection.ColumnWidth = 15

Range("X18").Activate
Selection.ColumnWidth = 15

Range("Y18").Activate
Selection.ColumnWidth = 15

Range("C18:Y25").NumberFormat = "#,##0"
Range("C18:Y25").Font.ColorIndex = 1
Range("C18:Y25").Locked = False

          
Range("C18:Y25").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
Selection.Borders(xlEdgeLeft).LineStyle = xlNone
Selection.Borders(xlEdgeTop).LineStyle = xlNone
Selection.Borders(xlEdgeBottom).LineStyle = xlNone
Selection.Borders(xlEdgeRight).LineStyle = xlNone
Selection.Borders(xlInsideVertical).LineStyle = xlNone
Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideVertical)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
                       
                       
'Inizio costruzione regole di convalida allegato
Range("C18:Y25").Select

With Selection.Validation
    .Delete
    .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
    Operator:=xlBetween, Formula1:="0", Formula2:="999999999"
    .IgnoreBlank = False
    .InCellDropdown = True
    .InputTitle = "Inserire un numero intero"
    .ErrorTitle = "Errore"
    .InputMessage = "Inserire un numero intero compreso fra 0 e 999.999.999"
    .ErrorMessage = _
    "Attenzione il valore deve essere un numero intero compreso fra 0 e 999999999"
    .ShowInput = True
    .ShowError = True

End With



'Worksheets("Tabella1").Protect ("g.m.")
Range("C18").Select


'Worksheets("Tabella1_1").Unprotect ("g.m.")
Worksheets("Tabella1_1").Select

'Formattazione celle area dati qualora siano stati cancellati con taglia e incolla
Range("C18").Activate
Selection.ColumnWidth = 15


Range("C18:C25").NumberFormat = "#,##0"
Range("C18:C25").Font.ColorIndex = 1
Range("C18:C25").Locked = False


          
Range("C18:C25").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
Selection.Borders(xlEdgeLeft).LineStyle = xlNone
Selection.Borders(xlEdgeTop).LineStyle = xlNone
Selection.Borders(xlEdgeBottom).LineStyle = xlNone
Selection.Borders(xlEdgeRight).LineStyle = xlNone
Selection.Borders(xlInsideVertical).LineStyle = xlNone
Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
End With
'With Selection.Borders(xlInsideVertical)
'    .LineStyle = xlContinuous
'    .Weight = xlHairline
'    .ColorIndex = xlAutomatic
'End With
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
            
            
    
'Inizio costruzione regole di convalida allegato
Range("C18:C25").Select

With Selection.Validation
    .Delete
    .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
    Operator:=xlBetween, Formula1:="0", Formula2:="999999999"
    .IgnoreBlank = False
    .InCellDropdown = True
    .InputTitle = "Inserire un numero intero"
    .ErrorTitle = "Errore"
    .InputMessage = "Inserire un numero intero compreso fra 0 e 999.999.999"
    .ErrorMessage = _
    "Attenzione il valore deve essere un numero intero compreso fra 0 e 999999999"
    .ShowInput = True
    .ShowError = True

End With
       
'Worksheets("Tabella1_1").Protect ("g.m.")
Range("C18").Select

'-----


For Each n In ActiveWorkbook.Names
    Select Case n.Name
           
           Case Is = "Tabella4", "Tabella5", "Tabella6", _
                     "Tabella7", "Tabella8", "Tab2NumCorsi", "Tab2NumPart", _
                     "Tab3NumCorsi", "Tab3NumPart"
    
           Set p = Range(n.Name)
           For Each cella In p
               If cella.Locked = False And Not cella.HasFormula Then
                  cella.NumberFormat = "#,##0"
                  cella.Font.ColorIndex = 1
                  cella.Locked = False
                  'ripristina formato: con fogli nascosti?
                  With cella.Validation
                       .Delete
                       .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
                        Operator:=xlBetween, Formula1:="0", Formula2:="999999999"
                       .IgnoreBlank = False
                       .InCellDropdown = True
                       .InputTitle = "Inserire un numero intero"
                       .ErrorTitle = "Errore"
                       .InputMessage = "Inserire un numero intero compreso fra 0 e 999.999.999"
                       .ErrorMessage = _
                       "Attenzione il valore deve essere un numero intero compreso fra 0 e 999.999.999"
                       .ShowInput = True
                       .ShowError = True
                    
                   End With
               
               End If
           
            Next cella
'Debug.Print Now()
           
           
           Case Is = "Tab2NumCorsi"
    
                Set p = Range(n.Name)
                For Each cella In p
                    If cella.Locked = False And Not cella.HasFormula Then
                       cella.NumberFormat = "#,##0"
                       cella.Font.ColorIndex = 1
                       cella.Locked = False
                       'ripristina formato: con fogli nascosti?
                       With cella.Validation
                            .Delete
                            .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
                             Operator:=xlBetween, Formula1:="0", Formula2:="999999999"
                            .IgnoreBlank = False
                            .InCellDropdown = True
                            .InputTitle = "Inserire un numero intero"
                            .ErrorTitle = "Errore"
                            .InputMessage = "Inserire un numero intero compreso fra 0 e 999.999.999"
                            .ErrorMessage = _
                            "Attenzione il valore deve essere un numero intero compreso fra 0 e 999.999.999"
                            .ShowInput = True
                            .ShowError = True
                         
                        End With
                    
                    End If
                
                 Next cella
            
                 Sheets("Tabella2").Select
                 Range("C11").Select
                 Selection.Copy
                 Range("C12:C1010").Select
                 Selection.PasteSpecial Paste:=xlPasteValidation, Operation:=xlNone, _
                     SkipBlanks:=False, Transpose:=False
                 Application.CutCopyMode = False
                 Range("C11").Select
'Debug.Print Now()
            
           Case Is = "Tab3NumCorsi"
                     
    
           Set p = Range(n.Name)
           For Each cella In p
               If cella.Locked = False And Not cella.HasFormula Then
                  cella.NumberFormat = "#,##0"
                  cella.Font.ColorIndex = 1
                  cella.Locked = False
                  'ripristina formato: con fogli nascosti?
                  With cella.Validation
                       .Delete
                       .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
                        Operator:=xlBetween, Formula1:="0", Formula2:="999999999"
                       .IgnoreBlank = False
                       .InCellDropdown = True
                       .InputTitle = "Inserire un numero intero"
                       .ErrorTitle = "Errore"
                       .InputMessage = "Inserire un numero intero compreso fra 0 e 999.999.999"
                       .ErrorMessage = _
                       "Attenzione il valore deve essere un numero intero compreso fra 0 e 999.999.999"
                       .ShowInput = True
                       .ShowError = True
                    
                   End With
               
               End If
           
            Next cella
            
                 Sheets("Tabella3").Select
                 Range("G11").Select
                 Selection.Copy
                 Range("G12:G1010").Select
                 Selection.PasteSpecial Paste:=xlPasteValidation, Operation:=xlNone, _
                     SkipBlanks:=False, Transpose:=False
                 Application.CutCopyMode = False
                 Range("G11").Select
'Debug.Print Now()
            
           Case Is = "Tab2NumPart"
    
                Set p = Range(n.Name)
                For Each cella In p
                    If cella.Locked = False And Not cella.HasFormula Then
                       cella.NumberFormat = "#,##0"
                       cella.Font.ColorIndex = 1
                       cella.Locked = False
                       'ripristina formato: con fogli nascosti?
                       With cella.Validation
                            .Delete
                            .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
                             Operator:=xlBetween, Formula1:="0", Formula2:="999999999"
                            .IgnoreBlank = False
                            .InCellDropdown = True
                            .InputTitle = "Inserire un numero intero"
                            .ErrorTitle = "Errore"
                            .InputMessage = "Inserire un numero intero compreso fra 0 e 999.999.999"
                            .ErrorMessage = _
                            "Attenzione il valore deve essere un numero intero compreso fra 0 e 999.999.999"
                            .ShowInput = True
                            .ShowError = True
                         
                        End With
                    
                    End If
                
                 Next cella
            
                 Sheets("Tabella2").Select
                 Range("G11").Select
                 Selection.Copy
                 Range("G12:G1010").Select
                 Selection.PasteSpecial Paste:=xlPasteValidation, Operation:=xlNone, _
                     SkipBlanks:=False, Transpose:=False
                 Application.CutCopyMode = False
                 Range("G11").Select
'Debug.Print Now()
            
           Case Is = "Tab3NumPart"
    
                Set p = Range(n.Name)
                For Each cella In p
                    If cella.Locked = False And Not cella.HasFormula Then
                       cella.NumberFormat = "#,##0"
                       cella.Font.ColorIndex = 1
                       cella.Locked = False
                       'ripristina formato: con fogli nascosti?
                       With cella.Validation
                            .Delete
                            .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
                             Operator:=xlBetween, Formula1:="0", Formula2:="999999999"
                            .IgnoreBlank = False
                            .InCellDropdown = True
                            .InputTitle = "Inserire un numero intero"
                            .ErrorTitle = "Errore"
                            .InputMessage = "Inserire un numero intero compreso fra 0 e 999.999.999"
                            .ErrorMessage = _
                            "Attenzione il valore deve essere un numero intero compreso fra 0 e 999.999.999"
                            .ShowInput = True
                            .ShowError = True
                         
                        End With
                    
                    End If
                
                 Next cella
            
                 Sheets("Tabella3").Select
                 Range("G11").Select
                 Selection.Copy
                 Range("G12:G1010").Select
                 Selection.PasteSpecial Paste:=xlPasteValidation, Operation:=xlNone, _
                     SkipBlanks:=False, Transpose:=False
                 Application.CutCopyMode = False
                 Range("G11").Select
'Debug.Print Now()
            
            
            Case Is = "TipoTabella2"
                 Set p = Range(n.Name)
                 For Each cella In p
                 
                     If cella.Locked = False And Not cella.HasFormula Then
                        cella.NumberFormat = "@"
                        cella.Font.ColorIndex = 1
                        cella.Locked = False
                       'ripristina formato: con fogli nascosti?
      
                        With cella.Validation
                            .Delete
                            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                            xlBetween, Formula1:="=DominioTipoTabella2"
                            .IgnoreBlank = True
                            .InCellDropdown = True
                            .InputTitle = ""
                            .ErrorTitle = "Errore"
                            .InputMessage = ""
                            .ErrorMessage = "I valori permessi sono: Normativo, Tecnico, Fiscale, Economico, Su specifico prodotto, Altro"
                            .ShowInput = True
                            .ShowError = True
                       End With
                     End If
                 Next cella
        
                 Sheets("Tabella2").Select
                 Range("A11").Select
                 Selection.Copy
                 Range("A12:A1010").Select
                 Selection.PasteSpecial Paste:=xlPasteValidation, Operation:=xlNone, _
                     SkipBlanks:=False, Transpose:=False
                 Application.CutCopyMode = False
                 Range("A11").Select
'Debug.Print Now()
        
        
            Case Is = "TipoTabella3"
                 Set p = Range(n.Name)
                 For Each cella In p
                 
                     If cella.Locked = False And Not cella.HasFormula Then
                        cella.NumberFormat = "@"
                        cella.Font.ColorIndex = 1
                        cella.Locked = False
                       'ripristina formato: con fogli nascosti?
      
                        With cella.Validation
                            .Delete
                            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                            xlBetween, Formula1:="=DominioTipoTabella3"
                            .IgnoreBlank = True
                            .InCellDropdown = True
                            .InputTitle = ""
                            .ErrorTitle = "Errore"
                            .InputMessage = ""
                            .ErrorMessage = "I valori permessi sono:Normativo, Tecnico, Fiscale, Economico, Su specifico prodotto, Altro"
                            .ShowInput = True
                            .ShowError = True
                       End With
                     End If
                 Next cella
        
                 Sheets("Tabella3").Select
                 Range("A11").Select
                 Selection.Copy
                 Range("A12:A1010").Select
                 Selection.PasteSpecial Paste:=xlPasteValidation, Operation:=xlNone, _
                     SkipBlanks:=False, Transpose:=False
                 Application.CutCopyMode = False
                 Range("A11").Select
 '       Debug.Print Now()
        
               
        
            Case Is = "StrutturaTabella2"
                 Set p = Range(n.Name)
                 For Each cella In p
                 
                     If cella.Locked = False And Not cella.HasFormula Then
                        cella.NumberFormat = "@"
                        cella.Font.ColorIndex = 1
                        cella.Locked = False
                       'ripristina formato: con fogli nascosti?
      
                        With cella.Validation
                            .Delete
                            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                            xlBetween, Formula1:="=DominioStrutturaTabella2"
                            .IgnoreBlank = True
                            .InCellDropdown = True
                            .InputTitle = ""
                            .ErrorTitle = "Errore"
                            .InputMessage = ""
                            .ErrorMessage = "I valori permessi sono: Direzione, Agenti, Banche, Intermediari finanziari, Sim, Poste italiane, Societ|fffd| di formazione, Altro"
                            .ShowInput = True
                            .ShowError = True
                       End With
                     End If
                 Next cella
        
                 Sheets("Tabella2").Select
                 Range("D11").Select
                 Selection.Copy
                 Range("D12:D1010").Select
                 Selection.PasteSpecial Paste:=xlPasteValidation, Operation:=xlNone, _
                     SkipBlanks:=False, Transpose:=False
                 Application.CutCopyMode = False
                 Range("D11").Select
        
  '      Debug.Print Now()
        
        
            Case Is = "StrutturaTabella3"
                 Set p = Range(n.Name)
                 For Each cella In p
                 
                     If cella.Locked = False And Not cella.HasFormula Then
                        cella.NumberFormat = "@"
                        cella.Font.ColorIndex = 1
                        cella.Locked = False
                       'ripristina formato: con fogli nascosti?
      
                        With cella.Validation
                            .Delete
                            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                            xlBetween, Formula1:="=DominioStrutturaTabella3"
                            .IgnoreBlank = True
                            .InCellDropdown = True
                            .InputTitle = ""
                            .ErrorTitle = "Errore"
                            .InputMessage = ""
                            .ErrorMessage = "I valori permessi sono: Direzione, Agenti, Banche, Intermediari finanziari, Sim, Poste italiane, Societ|fffd| di formazione, Altro"
                            .ShowInput = True
                            .ShowError = True
                       End With
                     End If
                   Next cella
        
                 Sheets("Tabella3").Select
                 Range("D11").Select
                 Selection.Copy
                 Range("D12:D1010").Select
                 Selection.PasteSpecial Paste:=xlPasteValidation, Operation:=xlNone, _
                     SkipBlanks:=False, Transpose:=False
                 Application.CutCopyMode = False
                 Range("D11").Select
      
   '     Debug.Print Now()
        
            Case Is = "ModoTabella2"
                 Set p = Range(n.Name)
                 For Each cella In p
                 
                     If cella.Locked = False And Not cella.HasFormula Then
                        cella.NumberFormat = "@"
                        cella.Font.ColorIndex = 1
                        cella.Locked = False
                       'ripristina formato: con fogli nascosti?
      
                        With cella.Validation
                            .Delete
                            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                            xlBetween, Formula1:="=DominioModoTabella2"
                            .IgnoreBlank = True
                            .InCellDropdown = True
                            .InputTitle = ""
                            .ErrorTitle = "Errore"
                            .InputMessage = ""
                            .ErrorMessage = "I valori permessi sono: In aula, a distanza"
                            .ShowInput = True
                            .ShowError = True
                       End With
                     End If
                 Next cella
                 
                 Sheets("Tabella2").Select
                 Range("E11").Select
                 Selection.Copy
                 Range("E12:E1010").Select
                 Selection.PasteSpecial Paste:=xlPasteValidation, Operation:=xlNone, _
                     SkipBlanks:=False, Transpose:=False
                 Application.CutCopyMode = False
                 Range("E11").Select
    '    Debug.Print Now()
        
            Case Is = "ModoTabella3"
                 Set p = Range(n.Name)
                 For Each cella In p
                 
                     If cella.Locked = False And Not cella.HasFormula Then
                        cella.NumberFormat = "@"
                        cella.Font.ColorIndex = 1
                        cella.Locked = False
                       'ripristina formato: con fogli nascosti?
      
                        With cella.Validation
                            .Delete
                            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                            xlBetween, Formula1:="=DominioModoTabella3"
                            .IgnoreBlank = True
                            .InCellDropdown = True
                            .InputTitle = ""
                            .ErrorTitle = "Errore"
                            .InputMessage = ""
                            .ErrorMessage = "I valori permessi sono: In aula, a distanza"
                            .ShowInput = True
                            .ShowError = True
                       End With
                     End If
                 Next cella
        
                 Sheets("Tabella3").Select
                 Range("E11").Select
                 Selection.Copy
                 Range("E12:E1010").Select
                 Selection.PasteSpecial Paste:=xlPasteValidation, Operation:=xlNone, _
                     SkipBlanks:=False, Transpose:=False
                 Application.CutCopyMode = False
                 Range("E11").Select
     '   Debug.Print Now()
        
        
            Case Is = "CategoriaTabella2"
                 Set p = Range(n.Name)
                 For Each cella In p
                 
                     If cella.Locked = False And Not cella.HasFormula Then
                        cella.NumberFormat = "@"
                        cella.Font.ColorIndex = 1
                        cella.Locked = False
                       'ripristina formato: con fogli nascosti?
      
                        With cella.Validation
                            .Delete
                            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                            xlBetween, Formula1:="=DominioCategoriaTabella2"
                            .IgnoreBlank = True
                            .InCellDropdown = True
                            .InputTitle = ""
                            .ErrorTitle = "Errore"
                            .InputMessage = ""
                            .ErrorMessage = "I valori permessi sono: (C), (E), (I), (L)"
                            .ShowInput = True
                            .ShowError = True
                        End With
                     End If
                 Next cella
        
                 Sheets("Tabella2").Select
                 Range("F11").Select
                 Selection.Copy
                 Range("F12:F1010").Select
                 Selection.PasteSpecial Paste:=xlPasteValidation, Operation:=xlNone, _
                     SkipBlanks:=False, Transpose:=False
                 Application.CutCopyMode = False
                 Range("F11").Select
      '  Debug.Print Now()
            Case Is = "CategoriaTabella3"
                 Set p = Range(n.Name)
                 For Each cella In p
                 
                     If cella.Locked = False And Not cella.HasFormula Then
                        cella.NumberFormat = "@"
                        cella.Font.ColorIndex = 1
                        cella.Locked = False
                       'ripristina formato: con fogli nascosti?
      
                        With cella.Validation
                            .Delete
                            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                            xlBetween, Formula1:="=DominioCategoriaTabella3"
                            .IgnoreBlank = True
                            .InCellDropdown = True
                            .InputTitle = ""
                            .ErrorTitle = "Errore"
                            .InputMessage = ""
                            .ErrorMessage = "I valori permessi sono: (A), (C), (E), (I), (L)"
                            .ShowInput = True
                            .ShowError = True
                       End With
                     End If
                 Next cella
                 Sheets("Tabella3").Select
                 Range("F11").Select
                 Selection.Copy
                 Range("F12:F1010").Select
                 Selection.PasteSpecial Paste:=xlPasteValidation, Operation:=xlNone, _
                     SkipBlanks:=False, Transpose:=False
                 Application.CutCopyMode = False
                 Range("F11").Select
                
       ' Debug.Print Now()
        
    End Select
Next n


For Each f In ActiveWorkbook.Sheets

    Select Case f.Name
           
           Case Is = "Tabella1", "Tabella1_1", "Tabella2", "Tabella3", "Tabella4_5", _
                     "Tabella6_7", "Tabella8"
                 
                 Sheets(f.Name).Activate
                 Range("A1").Select
                 Sheets(f.Name).Protect ("g.m.")
                     
            
   End Select

Next f

Sheets("Foglio Informativo").Select
Range("A1").Select
'Debug.Print Now()
End Sub


Sub aggiorna_barra(sb As clsProgressBar, valavan As Integer, maxavan As Integer, stringa As String)

 sb.PercentComplete = (valavan / maxavan) * 100  ' update the progress bar
 
 
 WaitSeconds 1
 
 
 sb.Show stringa, "percentuale di completamento: " & Format(((valavan / maxavan) * 100), "#,0") & " %", 0 ' display the progress bar

 

End Sub
Sub WaitSeconds(waitTime As Integer)
    Application.Wait (Now + TimeValue("00:00:" & Format(waitTime, "00")))
End Sub

Sub azzera_old()

Dim f As Variant
Dim cella As Variant
Dim area_dati As Range
Dim stringa As String
Dim ix As Integer

Application.EnableCancelKey = xlDisabled
Application.ScreenUpdating = False



For Each f In ActiveWorkbook.Sheets
    
    If f.Name = "Errori" Then
       Sheets(f.Name).Activate
       Application.DisplayAlerts = False
       ActiveWorkbook.Unprotect ("g.m.")
       ActiveSheet.Delete
       ActiveWorkbook.Protect ("g.m.")
       Application.DisplayAlerts = True
       Exit For
    End If

Next f

For Each f In ActiveWorkbook.Sheets

    Select Case f.Name
           
           Case Is = "Tabella1"
       
            Sheets(f.Name).Activate
            Sheets(f.Name).Unprotect ("g.m.")
                       
            Range("B11").Activate
            Selection.ColumnWidth = 15
            
            Range("C11").Activate
            Selection.ColumnWidth = 15
            
            Range("D11").Activate
            Selection.ColumnWidth = 15
            
            Range("E11").Activate
            Selection.ColumnWidth = 15
            
            Range("F11").Activate
            Selection.ColumnWidth = 15
            
            Range("G11").Activate
            Selection.ColumnWidth = 15
            
            Range("B11:B13").NumberFormat = "#,##0"
            Range("C11:C13").NumberFormat = "#,##0"
            Range("D11:D13").NumberFormat = "#,##0"
            Range("E11:E13").NumberFormat = "#,##0"
            Range("F11:F13").NumberFormat = "#,##0"
            Range("G11:G13").NumberFormat = "#,##0"
            
            Range("B15:B17").NumberFormat = "#,##0"
            Range("C15:C17").NumberFormat = "#,##0"
            Range("D15:D17").NumberFormat = "#,##0"
            Range("E15:E17").NumberFormat = "#,##0"
            Range("F15:F17").NumberFormat = "#,##0"
            Range("G15:G17").NumberFormat = "#,##0"
            
            Range("B19:B21").NumberFormat = "#,##0"
            Range("C19:C21").NumberFormat = "#,##0"
            Range("D19:D21").NumberFormat = "#,##0"
            Range("E19:E21").NumberFormat = "#,##0"
            Range("F19:F21").NumberFormat = "#,##0"
            Range("G19:G21").NumberFormat = "#,##0"
            
'Range("B20:F21").Select
            
            Range("B11:B13").Font.ColorIndex = 1
            Range("C11:C13").Font.ColorIndex = 1
            Range("D11:D13").Font.ColorIndex = 1
            Range("E11:E13").Font.ColorIndex = 1
            Range("F11:F13").Font.ColorIndex = 1
            Range("G11:G13").Font.ColorIndex = 1
            
            Range("B15:B17").Font.ColorIndex = 1
            Range("C15:C17").Font.ColorIndex = 1
            Range("D15:D17").Font.ColorIndex = 1
            Range("E15:E17").Font.ColorIndex = 1
            Range("F15:F17").Font.ColorIndex = 1
            Range("G15:G17").Font.ColorIndex = 1
            
            Range("B19:B21").Font.ColorIndex = 1
            Range("C19:C21").Font.ColorIndex = 1
            Range("D19:D21").Font.ColorIndex = 1
            Range("E19:E21").Font.ColorIndex = 1
            Range("F19:F21").Font.ColorIndex = 1
            Range("G19:G21").Font.ColorIndex = 1
            
            Range("B12:B13").Locked = False
            Range("C12:C13").Locked = False
            Range("D12:D13").Locked = False
            Range("E12:E13").Locked = False
            Range("F12:F13").Locked = False
            
            Range("B16:B17").Locked = False
            Range("C16:C17").Locked = False
            Range("D16:D17").Locked = False
            Range("E16:E17").Locked = False
            Range("F16:F17").Locked = False
            
            Range("B20:B21").Locked = False
            Range("C20:C21").Locked = False
            Range("D20:D21").Locked = False
            Range("E20:E21").Locked = False
            Range("F20:F21").Locked = False
            
            
            Range("B12:B13").Value = 0
            Range("C12:C13").Value = 0
            Range("D12:D13").Value = 0
            Range("E12:E13").Value = 0
            Range("F12:F13").Value = 0
            
            
            Range("B16:B17").Value = 0
            Range("C16:C17").Value = 0
            Range("D16:D17").Value = 0
            Range("E16:E17").Value = 0
            Range("F16:F17").Value = 0
            
            Range("B20:B21").Value = 0
            Range("C20:C21").Value = 0
            Range("D20:D21").Value = 0
            Range("E20:E21").Value = 0
            Range("F20:F21").Value = 0
            
            
                      
            Range("B11:F13").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
                      
            Range("B15:F17").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            
            Range("B19:F21").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            
            Range("G11:G13").Select
    
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            
            Range("G15:G17").Select
    
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            
            
            Range("G19:G21").Select
    
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            
            
            
           
           Sheets(f.Name).Calculate
           Sheets(f.Name).Protect ("g.m.")
           Range("B12").Activate
           
           
        Case Is = "tabella 2"
              
            Sheets(f.Name).Activate
            Sheets(f.Name).Unprotect ("g.m.")
                       
            Range("B13").Activate
            Selection.ColumnWidth = 15
            
            Range("C13").Activate
            Selection.ColumnWidth = 15
            
            Range("D13").Activate
            Selection.ColumnWidth = 15
            
            Range("E13").Activate
            Selection.ColumnWidth = 15
            
            Range("F13").Activate
            Selection.ColumnWidth = 15
            
            Range("G13").Activate
            Selection.ColumnWidth = 15
                   
            Range("B13,C13,D13,E13,F13,G13").NumberFormat = "#,##0"
            Range("B14,C14,D14,E14,F14,G14").NumberFormat = "0.00"
            
            Range("B16,C16,D16,E16,F16,G16").NumberFormat = "#,##0"
            Range("B17,C17,D17,E17,F17,G17").NumberFormat = "0.00"
            
            Range("B20,C20,D20,E20,F20,G20").NumberFormat = "#,##0"
            Range("B21,C21,D21,E21,F21,G21").NumberFormat = "0.00"
            
            Range("B23,C23,D23,E23,F23,G23").NumberFormat = "#,##0"
            Range("B24,C24,D24,E24,F24,G24").NumberFormat = "0.00"
            
            
            Range("B13,C13,D13,E13,F13,G13").Font.ColorIndex = 1
            Range("B14,C14,D14,E14,F14,G14").Font.ColorIndex = 1
            
            Range("B16,C16,D16,E16,F16,G16").Font.ColorIndex = 1
            Range("B17,C17,D17,E17,F17,G17").Font.ColorIndex = 1
            
            Range("B20,C20,D20,E20,F20,G20").Font.ColorIndex = 1
            Range("B21,C21,D21,E21,F21,G21").Font.ColorIndex = 1
            
            Range("B23,C23,D23,E23,F23,G23").Font.ColorIndex = 1
            Range("B24,C24,D24,E24,F24,G24").Font.ColorIndex = 1
                       
            Range("B13,C13,D13,E13,F13").Locked = False
            Range("B16,C16,D16,E16,F16").Locked = False
            Range("B23,C23,D23,E23,F23").Locked = False
                       
            Range("B13,C13,D13,E13,F13").Value = 0
            Range("B16,C16,D16,E16,F16").Value = 0
            Range("B20,C20,D20,E20,F20").Value = 0
            Range("B23,C23,D23,E23,F23").Value = 0
                        
            Range("B13:F14").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
    
            Range("G13:G14").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
                End With
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
'---

            Range("B16:F17").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
    
            Range("G16:G17").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
                End With
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With

'---

            Range("B20:F21").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
    
            Range("G20:G21").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
                End With
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            
'---

            Range("B23:F24").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
    
            Range("G23:G24").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
                End With
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            
            
           
           Sheets(f.Name).Calculate
           Sheets(f.Name).Protect ("g.m.")
           Range("B13").Activate
            
           
           Case Is = "tabella 3"
       
            Sheets(f.Name).Activate
            Sheets(f.Name).Unprotect ("g.m.")
                       
            Range("A9").Activate
            Selection.ColumnWidth = 25
            
            Range("B9").Activate
            Selection.ColumnWidth = 15
            
            Range("C9").Activate
            Selection.ColumnWidth = 15
            
            Range("D9").Activate
            Selection.ColumnWidth = 30
            
            Range("E9").Activate
            Selection.ColumnWidth = 15
            
            Range("F9").Activate
            Selection.ColumnWidth = 15
            
            Range("G9").Activate
            Selection.ColumnWidth = 15
            
            Rows("9:58").Select
            Selection.RowHeight = 40
            
            Range("A9:E58").NumberFormat = "@"
            Range("F9:G58").NumberFormat = "#,##0"
                                    
                        
            Range("A9:G58").Font.ColorIndex = 1
                        
            Range("A9:G58").Locked = False
            
            Range("A9:E58").ClearContents
            Range("F9:G58").Value = "0"

'inserire qui le formattazione dei bordi
            Range("A8:G58").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
                End With
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            
           
           Sheets(f.Name).Calculate
           Sheets(f.Name).Protect ("g.m.")
           Range("A9").Select
       
           
           Case Is = "tabella 4"
            
            Sheets(f.Name).Activate
            Sheets(f.Name).Unprotect ("g.m.")
            
            Range("A2").Activate
            Selection.ColumnWidth = 25
            
            Range("B2").Activate
            Selection.ColumnWidth = 25
            
            Range("C2").Activate
            Selection.ColumnWidth = 25
            
            Range("D2").Activate
            Selection.ColumnWidth = 25
            
            Range("E2").Activate
            Selection.ColumnWidth = 25
            
            Range("F2").Activate
            Selection.ColumnWidth = 15
            
            Range("G2").Activate
            Selection.ColumnWidth = 15
            
            Rows("9:108").Select
            Selection.RowHeight = 40
            
            Range("B2:B108").WrapText = True
                        
            Range("A9:E108").NumberFormat = "@"
            Range("F9:G108").NumberFormat = "#,##0"
                                                            
            Range("A9:G108").Font.ColorIndex = 1
                        
            Range("A9:G108").Locked = False
            
            Range("A9:E108").ClearContents
            Range("F9:G108").Value = "0"

'inserire qui le formattazione dei bordi
            
            Range("A8:G108").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
                End With
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
                   
            Range("A9").Select
       
    
       Case Is = "tabella 5"
            
            Sheets(f.Name).Activate
            Sheets(f.Name).Unprotect ("g.m.")
                       
            Columns("B:B").Select
            Range("B9").Activate
            Selection.ColumnWidth = 25
            
            Columns("C:C").Select
            Range("C9").Activate
            Selection.ColumnWidth = 25
            
            Columns("D:D").Select
            Range("D9").Activate
            Selection.ColumnWidth = 25
                   
            Range("B9:B12").NumberFormat = "#,##0"
            Range("C9:C12").NumberFormat = "#,##0"
            Range("D9:D12").NumberFormat = "#,##0"
            
            Range("B9:B12").Font.ColorIndex = 1
            Range("C9:C12").Font.ColorIndex = 1
            Range("D9:D12").Font.ColorIndex = 1
            
            Range("B9:B12").Locked = True
            Range("C9:C12").Locked = False
            Range("D9:D12").Locked = False
            
            Range("C9:C12").Value = 0
            Range("D9:D12").Value = 0
                       
                      
            Range("A8:D8").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            Range("A9:A12").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            Range("B9:D12").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            Selection.Borders(xlEdgeLeft).LineStyle = xlNone
            Selection.Borders(xlEdgeTop).LineStyle = xlNone
            Selection.Borders(xlEdgeBottom).LineStyle = xlNone
            Selection.Borders(xlEdgeRight).LineStyle = xlNone
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            Selection.Borders(xlInsideVertical).LineStyle = xlNone
            Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Range("B9:D12").Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlDouble
                .Weight = xlThick
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            With Selection.Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .Weight = xlHairline
                .ColorIndex = xlAutomatic
            End With
            
            Range("A8").Select
            
           
           Sheets(f.Name).Calculate
           Sheets(f.Name).Protect ("g.m.")
           Range("C9").Activate
    
    
    
    End Select

Next f

For Each f In ActiveWorkbook.Sheets
     
     Select Case f.Name
    
           Case Is = "Foglio Informativo", "istruzioni"
           Case Else
                Sheets(f.Name).Protect ("g.m.")

     End Select

Next f

make_convalida

Set f = Nothing
Set cella = Nothing
Set area_dati = Nothing

Sheets("Foglio Informativo").Activate

Application.EnableCancelKey = xlInterrupt
Application.ScreenUpdating = True

End Sub
Sub AZZERA_BORDI()

Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
Selection.Borders(xlEdgeLeft).LineStyle = xlNone
Selection.Borders(xlEdgeTop).LineStyle = xlNone
Selection.Borders(xlEdgeBottom).LineStyle = xlNone
Selection.Borders(xlEdgeRight).LineStyle = xlNone
Selection.Borders(xlInsideVertical).LineStyle = xlNone
Selection.Borders(xlInsideHorizontal).LineStyle = xlNone

With Selection
    .HorizontalAlignment = xlRight
    .VerticalAlignment = xlBottom
    .WrapText = False
    .Orientation = 0
    .ShrinkToFit = False
    .MergeCells = False
End With

With Selection.Font
    .Name = "Univers 45 Light"
    .FontStyle = "Normale"
    .Size = 10
    .Strikethrough = False
    .Superscript = False
    .Subscript = False
    .OutlineFont = False
    .Shadow = False
    .Underline = xlUnderlineStyleNone
    .ColorIndex = xlAutomatic
End With

End Sub

Sub make_convalida_old()

Dim p As Range

'Eliminazione del foglio errori_tari se esiste

For Each f In ActiveWorkbook.Sheets

    If f.Name = "Errori" Then
       Sheets(f.Name).Activate
       Application.DisplayAlerts = False
       ActiveWorkbook.Unprotect ("g.m.")
       ActiveSheet.Delete
       ActiveWorkbook.Protect ("g.m.")
       Application.DisplayAlerts = True
       Exit For
    End If

Next f

Worksheets("Tabella1").Unprotect ("g.m.")
Worksheets("Tabella1").Select

'Formattazione celle area dati qualora siano stati cancellati con taglia e incolla
                       
Range("B13").Activate
Selection.ColumnWidth = 12

Range("C13").Activate
Selection.ColumnWidth = 15

Range("D13").Activate
Selection.ColumnWidth = 15

Range("E13").Activate
Selection.ColumnWidth = 15

Range("F13").Activate
Selection.ColumnWidth = 15

Range("G13").Activate
Selection.ColumnWidth = 15
                   
Range("B11:B13").NumberFormat = "#,##0"
Range("C11:C13").NumberFormat = "#,##0"
Range("D11:D13").NumberFormat = "#,##0"
Range("E11:E13").NumberFormat = "#,##0"
Range("F11:F13").NumberFormat = "#,##0"
Range("G11:G13").NumberFormat = "#,##0"

Range("B15:B17").NumberFormat = "#,##0"
Range("C15:C17").NumberFormat = "#,##0"
Range("D15:D17").NumberFormat = "#,##0"
Range("E15:E17").NumberFormat = "#,##0"
Range("F15:F17").NumberFormat = "#,##0"
Range("G15:G17").NumberFormat = "#,##0"

Range("B19:B21").NumberFormat = "#,##0"
Range("C19:C21").NumberFormat = "#,##0"
Range("D19:D21").NumberFormat = "#,##0"
Range("E19:E21").NumberFormat = "#,##0"
Range("F19:F21").NumberFormat = "#,##0"
Range("G19:G21").NumberFormat = "#,##0"

Range("B11:B13").Font.ColorIndex = 1
Range("C11:C13").Font.ColorIndex = 1
Range("D11:D13").Font.ColorIndex = 1
Range("E11:E13").Font.ColorIndex = 1
Range("F11:F13").Font.ColorIndex = 1
Range("G11:G13").Font.ColorIndex = 1

Range("B15:B17").Font.ColorIndex = 1
Range("C15:C17").Font.ColorIndex = 1
Range("D15:D17").Font.ColorIndex = 1
Range("E15:E17").Font.ColorIndex = 1
Range("F15:F17").Font.ColorIndex = 1
Range("G15:G17").Font.ColorIndex = 1

Range("B19:B21").Font.ColorIndex = 1
Range("C19:C21").Font.ColorIndex = 1
Range("D19:D21").Font.ColorIndex = 1
Range("E19:E21").Font.ColorIndex = 1
Range("F19:F21").Font.ColorIndex = 1
Range("G19:G21").Font.ColorIndex = 1

Range("B12:B13").Locked = False
Range("C12:C13").Locked = False
Range("D12:D13").Locked = False
Range("E12:E13").Locked = False
Range("F12:F13").Locked = False

Range("B16:B17").Locked = False
Range("C16:C17").Locked = False
Range("D16:D17").Locked = False
Range("E16:E17").Locked = False
Range("F16:F17").Locked = False

Range("B20:B21").Locked = False
Range("C20:C21").Locked = False
Range("D20:D21").Locked = False
Range("E20:E21").Locked = False
Range("F20:F21").Locked = False

Range("B11:F13").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
Selection.Borders(xlEdgeLeft).LineStyle = xlNone
Selection.Borders(xlEdgeTop).LineStyle = xlNone
Selection.Borders(xlEdgeBottom).LineStyle = xlNone
Selection.Borders(xlEdgeRight).LineStyle = xlNone
Selection.Borders(xlInsideVertical).LineStyle = xlNone
Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideVertical)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
          
Range("B15:F17").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
Selection.Borders(xlEdgeLeft).LineStyle = xlNone
Selection.Borders(xlEdgeTop).LineStyle = xlNone
Selection.Borders(xlEdgeBottom).LineStyle = xlNone
Selection.Borders(xlEdgeRight).LineStyle = xlNone
Selection.Borders(xlInsideVertical).LineStyle = xlNone
Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideVertical)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With

Range("B19:F21").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
Selection.Borders(xlEdgeLeft).LineStyle = xlNone
Selection.Borders(xlEdgeTop).LineStyle = xlNone
Selection.Borders(xlEdgeBottom).LineStyle = xlNone
Selection.Borders(xlEdgeRight).LineStyle = xlNone
Selection.Borders(xlInsideVertical).LineStyle = xlNone
Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideVertical)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With

Range("G11:G13").Select

Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
Selection.Borders(xlEdgeLeft).LineStyle = xlNone
Selection.Borders(xlEdgeTop).LineStyle = xlNone
Selection.Borders(xlEdgeBottom).LineStyle = xlNone
Selection.Borders(xlEdgeRight).LineStyle = xlNone
Selection.Borders(xlInsideVertical).LineStyle = xlNone
Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
Selection.Borders(xlInsideVertical).LineStyle = xlNone
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With

Range("G15:G17").Select

Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
Selection.Borders(xlEdgeLeft).LineStyle = xlNone
Selection.Borders(xlEdgeTop).LineStyle = xlNone
Selection.Borders(xlEdgeBottom).LineStyle = xlNone
Selection.Borders(xlEdgeRight).LineStyle = xlNone
Selection.Borders(xlInsideVertical).LineStyle = xlNone
Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
Selection.Borders(xlInsideVertical).LineStyle = xlNone
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With


Range("G19:G21").Select

Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
Selection.Borders(xlEdgeLeft).LineStyle = xlNone
Selection.Borders(xlEdgeTop).LineStyle = xlNone
Selection.Borders(xlEdgeBottom).LineStyle = xlNone
Selection.Borders(xlEdgeRight).LineStyle = xlNone
Selection.Borders(xlInsideVertical).LineStyle = xlNone
Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
Selection.Borders(xlInsideVertical).LineStyle = xlNone
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With



'Inizio costruzione regole di convalida allegato
Range("B12:F13,B16:F17,B20:F21").Select

With Selection.Validation
    .Delete
    .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
    Operator:=xlBetween, Formula1:="0", Formula2:="999999"
    .IgnoreBlank = False
    .InCellDropdown = True
    .InputTitle = "Inserire un numero intero"
    .ErrorTitle = "Errore"
    .InputMessage = "Inserire un numero intero compreso fra 0 e 999999"
    .ErrorMessage = _
    "Attenzione il valore deve essere un numero intero compreso fra 0 e 999999"
    .ShowInput = True
    .ShowError = True

End With

Range("B20:F21").Select

With Selection.Validation
    .Delete
    .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
    Operator:=xlBetween, Formula1:="0", Formula2:="9999999"
    .IgnoreBlank = False
    .InCellDropdown = True
    .InputTitle = "Inserire un numero intero"
    .ErrorTitle = "Errore"
    .InputMessage = "Inserire un numero intero compreso fra 0 e 9999999"
    .ErrorMessage = _
    "Attenzione il valore deve essere un numero intero compreso fra 0 e 9999999"
    .ShowInput = True
    .ShowError = True

End With


Worksheets("Tabella1").Protect ("g.m.")
Range("B12").Select


Worksheets("tabella 2").Unprotect ("g.m.")
Worksheets("tabella 2").Select

'Formattazione celle area dati qualora siano stati cancellati con taglia e incolla
                       
Range("B13").Activate
Selection.ColumnWidth = 15

Range("C13").Activate
Selection.ColumnWidth = 15

Range("D13").Activate
Selection.ColumnWidth = 15

Range("E13").Activate
Selection.ColumnWidth = 15

Range("F13").Activate
Selection.ColumnWidth = 15

Range("G13").Activate
Selection.ColumnWidth = 15
       
Range("B13,C13,D13,E13,F13,G13").NumberFormat = "#,##0"
Range("B14,C14,D14,E14,F14,G14").NumberFormat = "0.00"

Range("B16,C16,D16,E16,F16,G16").NumberFormat = "#,##0"
Range("B17,C17,D17,E17,F17,G17").NumberFormat = "0.00"

Range("B20,C20,D20,E20,F20,G20").NumberFormat = "#,##0"
Range("B21,C21,D21,E21,F21,G21").NumberFormat = "0.00"

Range("B23,C23,D23,E23,F23,G23").NumberFormat = "#,##0"
Range("B24,C24,D24,E24,F24,G24").NumberFormat = "0.00"


Range("B13,C13,D13,E13,F13,G13").Font.ColorIndex = 1
Range("B14,C14,D14,E14,F14,G14").Font.ColorIndex = 1

Range("B16,C16,D16,E16,F16,G16").Font.ColorIndex = 1
Range("B17,C17,D17,E17,F17,G17").Font.ColorIndex = 1

Range("B20,C20,D20,E20,F20,G20").Font.ColorIndex = 1
Range("B21,C21,D21,E21,F21,G21").Font.ColorIndex = 1

Range("B23,C23,D23,E23,F23,G23").Font.ColorIndex = 1
Range("B24,C24,D24,E24,F24,G24").Font.ColorIndex = 1
                     
Range("B13,C13,D13,E13,F13").Locked = False
Range("B16,C16,D16,E16,F16").Locked = False
Range("B23,C23,D23,E23,F23").Locked = False

'Range("B13,C13,D13,E13,F13").Value = 0
'Range("B16,C16,D16,E16,F16").Value = 0
'Range("B23,C23,D23,E23,F23").Value = 0

Range("B13:F14").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideVertical)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With

Range("G13:G14").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
    End With
Selection.Borders(xlInsideVertical).LineStyle = xlNone
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
'---

Range("B16:F17").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideVertical)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With

Range("G16:G17").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
    End With
Selection.Borders(xlInsideVertical).LineStyle = xlNone
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With

'---

Range("B20:F21").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideVertical)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With

Range("G20:G21").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
    End With
Selection.Borders(xlInsideVertical).LineStyle = xlNone
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With

'---

Range("B23:F24").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideVertical)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With

Range("G23:G24").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
    End With
Selection.Borders(xlInsideVertical).LineStyle = xlNone
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
    
'Inizio costruzione regole di convalida allegato
Range("B13:F13,B16:F16,B20:F20,B23:F23").Select

With Selection.Validation
    .Delete
    .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
    Operator:=xlBetween, Formula1:="0", Formula2:="999999"
    .IgnoreBlank = False
    .InCellDropdown = True
    .InputTitle = "Inserire un numero intero"
    .ErrorTitle = "Errore"
    .InputMessage = "Inserire un numero intero compreso fra 0 e 999999"
    .ErrorMessage = _
    "Attenzione il valore deve essere un numero intero compreso fra 0 e 999999"
    .ShowInput = True
    .ShowError = True

End With
       
Worksheets("tabella 2").Protect ("g.m.")
Range("B13").Select

'-----

Worksheets("tabella 3").Unprotect ("g.m.")
Worksheets("tabella 3").Select

Range("A9").Activate
Selection.ColumnWidth = 25

Range("B9").Activate
Selection.ColumnWidth = 15

Range("C9").Activate
Selection.ColumnWidth = 15

Range("D9").Activate
Selection.ColumnWidth = 30

Range("E9").Activate
Selection.ColumnWidth = 15

Range("F9").Activate
Selection.ColumnWidth = 15

Range("G9").Activate
Selection.ColumnWidth = 15

Rows("9:58").Select
Selection.RowHeight = 40

Range("A9:E58").NumberFormat = "@"
Range("F9:G58").NumberFormat = "#,##0"
            
Range("A9:G58").Font.ColorIndex = 1
            
Range("A9:G58").Locked = False

'Range("A9:E58").Value = ""
'Range("F9:G58").Value = "0"

'inserire qui le formattazione dei bordi
Range("A8:G58").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
Selection.Borders(xlEdgeLeft).LineStyle = xlNone
Selection.Borders(xlEdgeTop).LineStyle = xlNone
Selection.Borders(xlEdgeBottom).LineStyle = xlNone
Selection.Borders(xlEdgeRight).LineStyle = xlNone
Selection.Borders(xlInsideVertical).LineStyle = xlNone
Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideVertical)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
    End With
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With

'---
Range("A9:A58").Select
For Each cella In Selection
    With cella.Validation
        .Delete
        .Add Type:=xlValidateTextLength, AlertStyle:=xlValidAlertStop, _
        Operator:=xlLessEqual, Formula1:="50"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = "Inserire un testo"
        .ErrorTitle = "Errore"
        .InputMessage = "Inserire un testo avente lunghezza massima di 50 caratteri"
        .ErrorMessage = "La lunghezza del testo inserito deve essere minore o uguale a 50"
        .ShowInput = True
        .ShowError = True
    End With
Next cella


Range("B9:B58").Select
For Each cella In Selection
    
    With cella.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:="=$L$1:$L$5"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = "Effettuare la scelta"
        .ErrorTitle = ""
        .InputMessage = "Scegliere un elemento dall'elenco"
        .ErrorMessage = "I valori permessi sono: Normativo, Tecnico, Fiscale, Economico, Altro"
        .ShowInput = True
        .ShowError = True
    End With

Next cella
    
Range("C9:C58").Select
For Each cella In Selection
    
    With cella.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:="=$M$1:$M$4"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = "Effettuare la scelta"
        .ErrorTitle = ""
        .InputMessage = "Scegliere un elemento dall'elenco"
        .ErrorMessage = "I valori permessi sono: Direzione, Agenti, Outsourcer, Altro"
        .ShowInput = True
        .ShowError = True
    End With

Next cella
    
Range("D9:D58").Select
For Each cella In Selection
    
    With cella.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:="=$N$1:$N$5"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = "Effettuare la scelta"
        .ErrorTitle = ""
        .InputMessage = "Scegliere un elemento dall'elenco"
        .ErrorMessage = "I valori permessi sono: Agenti, Subagenti o Produttori, Addetti alla rete bancaria o postale, Dipendenti, Addetti a call center"
        .ShowInput = True
        .ShowError = True
    End With

Next cella
    
Range("E9:E58").Select
For Each cella In Selection
    
    With cella.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:="=$O$1:$O$5"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = "Effettuare la scelta"
        .ErrorTitle = ""
        .InputMessage = "Scegliere un elemento dall'elenco"
        .ErrorMessage = "I valori permessi sono: Internet, Intranet aziendale, Manuale interno, Libri, Altro"
        .ShowInput = True
        .ShowError = True
    End With

Next cella
    
       
Range("F9:F58").Select
For Each cella In Selection
    
    With cella.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlBetween, Formula1:="0", Formula2:="99999"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = "Inserire un numero intero"
        .ErrorTitle = "Errore"
        .InputMessage = "Inserire un numero intero compreso fra 0 e 99999"
        .ErrorMessage = _
        "Attenzione il valore deve essere un numero intero compreso fra 0 e 99999"
        .ShowInput = True
        .ShowError = True
    End With

Next cella
    
    
Range("G9:G58").Select
For Each cella In Selection
    With cella.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlBetween, Formula1:="0", Formula2:="99999"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = "Inserire un numero intero"
        .ErrorTitle = "Errore"
        .InputMessage = "Inserire un numero intero compreso fra 0 e 99999"
        .ErrorMessage = _
        "Attenzione il valore deve essere un numero intero compreso fra 0 e 99999"
        .ShowInput = True
        .ShowError = True
    End With
Next cella
Range("A9").Select
Worksheets("tabella 3").Protect ("g.m.")
'-----

Worksheets("tabella 4").Unprotect ("g.m.")
Worksheets("tabella 4").Select

Range("A2").Activate
Selection.ColumnWidth = 25

Range("B2").Activate
Selection.ColumnWidth = 25

Range("C2").Activate
Selection.ColumnWidth = 25

Range("D2").Activate
Selection.ColumnWidth = 25

Range("E2").Activate
Selection.ColumnWidth = 25

Range("F2").Activate
Selection.ColumnWidth = 15

Range("G2").Activate
Selection.ColumnWidth = 15

Rows("9:108").Select
Selection.RowHeight = 40

Range("A9:E108").NumberFormat = "@"
Range("F9:G108").NumberFormat = "#,##0"
                                   
Range("A9:G108").Font.ColorIndex = 1
            
Range("A9:G108").Locked = False

'Range("A9:E108").Value = ""
'Range("F9:G108").Value = "0"

'inserire qui le formattazione dei bordi
Range("A8:G108").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
Selection.Borders(xlEdgeLeft).LineStyle = xlNone
Selection.Borders(xlEdgeTop).LineStyle = xlNone
Selection.Borders(xlEdgeBottom).LineStyle = xlNone
Selection.Borders(xlEdgeRight).LineStyle = xlNone
Selection.Borders(xlInsideVertical).LineStyle = xlNone
Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideVertical)
    .LineStyle = xlContinuous
    .Weight = xlThin
    .ColorIndex = xlAutomatic
    End With
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With

'---
Range("A9:A108").Select
For Each cella In Selection
    With cella.Validation
        .Delete
        .Add Type:=xlValidateTextLength, AlertStyle:=xlValidAlertStop, _
        Operator:=xlLessEqual, Formula1:="50"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = "Inserire un testo"
        .ErrorTitle = "Errore"
        .InputMessage = "Inserire un testo avente lunghezza massima di 50 caratteri"
        .ErrorMessage = "La lunghezza del testo inserito deve essere minore o uguale a 50"
        .ShowInput = True
        .ShowError = True
    End With
Next cella

Range("B9:B108").Select
For Each cella In Selection
    
    With cella.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:="=$L$1:$L$2"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = "Effettuare la scelta"
        .ErrorTitle = ""
        .InputMessage = "Scegliere un elemento dall'elenco"
        .ErrorMessage = "I valori permessi sono: Prodotto gi|fffd| commercializzato, Prodotto di nuova commercializzazione"
        .ShowInput = True
        .ShowError = True
    End With

Next cella
    
Range("C9:C108").Select
For Each cella In Selection
    
    With cella.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:="=$M$1:$M$4"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = "Effettuare la scelta"
        .ErrorTitle = ""
        .InputMessage = "Scegliere un elemento dall'elenco"
        .ErrorMessage = "I valori permessi sono: Direzione, Agenti, Outsourcer, Altro"
        .ShowInput = True
        .ShowError = True
    End With

Next cella
    
Range("D9:D108").Select
For Each cella In Selection
    
    With cella.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:="=$N$1:$N$5"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = "Effettuare la scelta"
        .ErrorTitle = ""
        .InputMessage = "Scegliere un elemento dall'elenco"
        .ErrorMessage = "I valori permessi sono: Agenti, Subagenti o Produttori, Addetti alla rete bancaria o postale, Dipendenti, Addetti a call center"
        .ShowInput = True
        .ShowError = True
    End With

Next cella
    
Range("E9:E108").Select
For Each cella In Selection
    
    With cella.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:="=$O$1:$O$5"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = "Effettuare la scelta"
        .ErrorTitle = ""
        .InputMessage = "Scegliere un elemento dall'elenco"
        .ErrorMessage = "I valori permessi sono: Internet, Intranet aziendale, Manuale interno, Libri, Altro"
        .ShowInput = True
        .ShowError = True
    End With

Next cella
    
       
Range("F9:F108").Select
For Each cella In Selection
    
    With cella.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlBetween, Formula1:="0", Formula2:="99999"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = "Inserire un numero intero"
        .ErrorTitle = "Errore"
        .InputMessage = "Inserire un numero intero compreso fra 0 e 99999"
        .ErrorMessage = _
        "Attenzione il valore deve essere un numero intero compreso fra 0 e 99999"
        .ShowInput = True
        .ShowError = True
    End With

Next cella
    
    
Range("G9:G108").Select
For Each cella In Selection
    With cella.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlBetween, Formula1:="0", Formula2:="99999"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = "Inserire un numero intero"
        .ErrorTitle = "Errore"
        .InputMessage = "Inserire un numero intero compreso fra 0 e 99999"
        .ErrorMessage = _
        "Attenzione il valore deve essere un numero intero compreso fra 0 e 99999"
        .ShowInput = True
        .ShowError = True
    End With
Next cella
Range("A9").Select
Worksheets("tabella 4").Protect ("g.m.")
'-----
Worksheets("tabella 5").Unprotect ("g.m.")
Worksheets("tabella 5").Select

'Formattazione celle area dati qualora siano stati cancellati con taglia e incolla
                       
Columns("B:B").Select
Range("B9").Activate
Selection.ColumnWidth = 25

Columns("C:C").Select
Range("C9").Activate
Selection.ColumnWidth = 25

Columns("D:D").Select
Range("D9").Activate
Selection.ColumnWidth = 25
       
Range("B9:B12").NumberFormat = "#,##0"
Range("C9:C12").NumberFormat = "#,##0"
Range("D9:D12").NumberFormat = "#,##0"

Range("B9:B12").Font.ColorIndex = 1
Range("C9:C12").Font.ColorIndex = 1
Range("D9:D12").Font.ColorIndex = 1

Range("B9:B12").Locked = True
Range("C9:C12").Locked = False
Range("D9:D12").Locked = False

'Range("C9:C12").Value = 0
'Range("D9:D12").Value = 0
           
          
Range("A8:D8").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
Selection.Borders(xlEdgeLeft).LineStyle = xlNone
Selection.Borders(xlEdgeTop).LineStyle = xlNone
Selection.Borders(xlEdgeBottom).LineStyle = xlNone
Selection.Borders(xlEdgeRight).LineStyle = xlNone
Selection.Borders(xlInsideVertical).LineStyle = xlNone
Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideVertical)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
Range("A9:A12").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
Selection.Borders(xlEdgeLeft).LineStyle = xlNone
Selection.Borders(xlEdgeTop).LineStyle = xlNone
Selection.Borders(xlEdgeBottom).LineStyle = xlNone
Selection.Borders(xlEdgeRight).LineStyle = xlNone
Selection.Borders(xlInsideVertical).LineStyle = xlNone
Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
Range("B9:D12").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
Selection.Borders(xlEdgeLeft).LineStyle = xlNone
Selection.Borders(xlEdgeTop).LineStyle = xlNone
Selection.Borders(xlEdgeBottom).LineStyle = xlNone
Selection.Borders(xlEdgeRight).LineStyle = xlNone
Selection.Borders(xlInsideVertical).LineStyle = xlNone
Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
Selection.Borders(xlInsideVertical).LineStyle = xlNone
Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
Range("B9:D12").Select
Selection.Borders(xlDiagonalDown).LineStyle = xlNone
Selection.Borders(xlDiagonalUp).LineStyle = xlNone
With Selection.Borders(xlEdgeLeft)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeTop)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlEdgeRight)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideVertical)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With
With Selection.Borders(xlInsideHorizontal)
    .LineStyle = xlContinuous
    .Weight = xlHairline
    .ColorIndex = xlAutomatic
End With

Range("C9:D12").Select
For Each cella In Selection
    With cella.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlBetween, Formula1:="0", Formula2:="99999"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = "Inserire un numero intero"
        .ErrorTitle = "Errore"
        .InputMessage = "Inserire un numero intero compreso fra 0 e 99999"
        .ErrorMessage = _
        "Attenzione il valore deve essere un numero intero compreso fra 0 e 99999"
        .ShowInput = True
        .ShowError = True
    End With
Next cella
Worksheets("tabella 5").Protect ("g.m.")
Range("C9").Select

End Sub


Sub controlli()

Select Case controlli_validit|fffd|
       Case Is = 0
            MsgBox ("Attenzione i controlli di validit|fffd| hanno dato esito positivo ora sar|fffd| possibile generare il flusso di output")
       Case Is = 1
            MsgBox ("Attenzione non ci sono dati diversi da zero!")
       Case Is = 2
            MsgBox ("Attenzione sono stati rilevati deglli errori che |fffd| possibile consultare sul foglio 'Errori'")
       Case Is = 3
            MsgBox ("Attenzione |fffd| necessario selezionare una compagnia")
       Case Is = 5
            MsgBox ("Attenzione i controlli di validit|fffd| hanno evidenziato dei problemi tuttavia sar|fffd| possibile generare il flusso di output")
End Select
End Sub

Function controlli_validit|fffd|() As Integer

Dim f As Variant
Dim testo_err As String
Dim ind_err As String
Dim trovato_errore As Boolean
Dim stringa As String
Dim cella As Range


Application.EnableCancelKey = xlDisabled
Application.ScreenUpdating = False

foglioattivo = ActiveSheet.Name

If Range("'Foglio Informativo'!J6").text = "   " Then
   Sheets(foglioattivo).Select
   controlli_validit|fffd| = 3
   GoTo fine

End If

make_convalida

controlli_validit|fffd| = 0

           
flag1_pdati = 0
For Each f In ActiveWorkbook.Sheets
        
    Select Case f.Name
           
           Case Is = "Tabella1"
           
                err_all1 = 0
                Sheets(f.Name).Activate
                Sheets(f.Name).Unprotect ("g.m.")
                Sheets(f.Name).Calculate
                Range("C18").Select
                ActiveCell.SpecialCells(xlCellTypeAllValidation).Select
                For Each cella In Selection
                    cella.Font.ColorIndex = 1
                    If Len(Trim(cella.text)) = 0 And cella.HasFormula = False Then
                       cella.Value = 0
                    End If
                    If Len(Trim(cella.text)) > 0 And cella.text <> "0" And flag1_pdati = 0 Then
                       flag1_pdati = 1
                    End If
                    If cella.Validation.Value = False Then
                       cella.Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & cella.Address
                       val_err = cella.Value
                       testo_err = cella.Validation.ErrorMessage
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all1 = err_all1 + 1
                    End If
                Next cella
                If err_all1 = 0 Then
                    Set p = ActiveCell.SpecialCells(xlCellTypeAllValidation)
                    For j = 1 To p.Columns.Count
                        flag_addendi = 0
                        totale = 0
                        valore_max = 0
                        numero_addendi = 0
                        For i = 3 To 5
                            If Len(Trim(p(i, j).text)) > 0 And p(i, j).text <> "0" Then
                               numero_addendi = numero_addendi + 1
                               flag_addendi = 1
                               totale = totale + p(i, j).Value
                               If p(i, j).Value > valore_max Then
                                  valore_max = p(i, j).Value
                               End If
                            End If
                        Next i
                        'in totale la somma dei rami vita
                        If Len(Trim(p(2, j).text)) > 0 And p(2, j).text <> "0" And flag_addendi = 0 Then
                           p(2, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(2, j).Address
                           val_err = p(2, j).Value
                           testo_err = "Il totale dei rami vita non puo essere maggiore di zero se i singoli rami vita sono a zero"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                        
                        If Len(Trim(p(2, j).text)) = 0 And p(2, j).Value = "0" And flag_addendi = 1 Then
                           p(2, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(2, j).Address
                           val_err = p(2, j).Value
                           testo_err = "Il totale dei rami vita non puo essere zero se la somma dei singoli rami vita |fffd| maggiore di zero"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                        
                        If numero_addendi > 1 Then
                            If Len(Trim(p(2, j).text)) > 0 And p(2, j).text <> "0" And flag_addendi = 1 And p(2, j).Value > totale Then
                               p(2, j).Font.ColorIndex = 3
                               ind_err = "'" & ActiveSheet.Name & "'!" & p(2, j).Address
                               val_err = p(2, j).Value
                               testo_err = "Il subtotale dei rami vita non puo essere maggiore della somma degli addendi dei singoli rami vita"
                               Call gesterr(ind_err, testo_err, val_err)
                               err_all1 = err_all1 + 1
                            End If
                        End If
                        
                        If numero_addendi = 1 Then
                            If Len(Trim(p(2, j).text)) > 0 And p(2, j).text <> "0" And flag_addendi = 1 And p(2, j).Value <> totale Then
                               p(2, j).Font.ColorIndex = 3
                               ind_err = "'" & ActiveSheet.Name & "'!" & p(2, j).Address
                               val_err = p(2, j).Value
                               testo_err = "Nel caso in cui sia compilata la cella relativa ad un solo ramo, il subtotale dovr|fffd| essere necessariamente di uguale valore"
                               Call gesterr(ind_err, testo_err, val_err)
                               err_all1 = err_all1 + 1
                            End If
                        End If
                        
                        If Len(Trim(p(2, j).text)) > 0 And p(2, j).text <> "0" And p(2, j).Value < valore_max Then
                           p(2, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(2, j).Address
                           val_err = p(2, j).Value
                           testo_err = "Il subtotale vita non puo essere inferiore al maggiore dei valori presenti nei singoli rami"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                        
                        flag_addendi = 0
                    Next j
                    
                    For j = 1 To p.Columns.Count
                        numero_addendi = 0
                        flag_addendi = 0
                        totale = 0
                        valore_max = 0
                        For i = 7 To 8
                            If Len(Trim(p(i, j).text)) > 0 And p(i, j).text <> "0" Then
                               numero_addendi = numero_addendi + 1
                               flag_addendi = 1
                               totale = totale + p(i, j).Value
                               If p(i, j).Value > valore_max Then
                                  valore_max = p(i, j).Value
                               End If
                            
                            End If
                        Next i
                        If Len(Trim(p(6, j).text)) > 0 And p(6, j).text <> "0" And flag_addendi = 0 Then
                           p(6, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(6, j).Address
                           val_err = p(6, j).Value
                           testo_err = "Il subtotale dei rami danni non puo essere maggiore di zero se i singoli rami danni sono a zero"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                        
                        If Len(Trim(p(6, j).text)) = 0 And p(6, j).Value = "0" And flag_addendi = 1 Then
                           p(6, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(6, j).Address
                           val_err = p(6, j).Value
                           testo_err = "Il subtotale dei rami danni non puo essere zero se la somma dei singoli rami danni |fffd| maggiore di zero"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                        
                        
                        If numero_addendi > 1 Then
                            If Len(Trim(p(6, j).text)) > 0 And p(6, j).text <> "0" And flag_addendi = 1 And p(6, j).Value > totale Then
                               p(6, j).Font.ColorIndex = 3
                               ind_err = "'" & ActiveSheet.Name & "'!" & p(6, j).Address
                               val_err = p(6, j).Value
                               testo_err = "Il subtotale dei rami danni non puo essere maggiore della somma degli addendi dei singoli rami danni"
                               Call gesterr(ind_err, testo_err, val_err)
                               err_all1 = err_all1 + 1
                            End If
                        End If
                                           
                        If numero_addendi = 1 Then
                            If Len(Trim(p(6, j).text)) > 0 And p(6, j).text <> "0" And flag_addendi = 1 And p(6, j).Value <> totale Then
                               p(6, j).Font.ColorIndex = 3
                               ind_err = "'" & ActiveSheet.Name & "'!" & p(6, j).Address
                               val_err = p(6, j).Value
                               testo_err = "Nel caso in cui sia compilata la cella relativa ad un solo ramo, il subtotale dovr|fffd| essere necessariamente di uguale valore"
                               Call gesterr(ind_err, testo_err, val_err)
                               err_all1 = err_all1 + 1
                            End If
                        End If
                        If Len(Trim(p(6, j).text)) > 0 And p(6, j).text <> "0" And p(6, j).Value < valore_max Then
                           p(6, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(6, j).Address
                           val_err = p(6, j).Value
                           testo_err = "Il subtotale danni non puo essere inferiore al maggiore dei valori presenti nei singoli rami"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                                           
                                           
                                           
                        flag_addendi = 0
                    Next j
                    
                    For j = 1 To p.Columns.Count
                        flag_addendi = 0
                        totale = 0
                        valore_max = 0
                        If Len(Trim(p(2, j).text)) > 0 And p(2, j).text <> "0" Then
                           flag_addendi_1 = 1
                           flag_addendi = flag_addendi + 1
                           totale = p(2, j).Value
                           valore_max = p(2, j).Value
                        End If
    
                        If Len(Trim(p(6, j).text)) > 0 And p(6, j).text <> "0" Then
                           flag_addendi_2 = 1
                           flag_addendi = flag_addendi + 1
                           If p(6, j).Value > valore_max Then
                              valore_max = p(6, j).Value
                           End If
                           
                           totale = p(6, j).Value + totale
                        End If
                        ' in totale la somma dei subtotali
                        If Len(Trim(p(1, j).text)) > 0 And p(1, j).text <> "0" And flag_addendi = 0 Then
                           p(1, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(1, j).Address
                           val_err = p(1, j).Value
                           testo_err = "Il totale dei rami non puo essere maggiore di zero se i singoli subtotali dei rami danni/vita sono a zero"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                        
                        If Len(Trim(p(1, j).text)) = 0 And p(1, j).Value = "0" And flag_addendi > 0 Then
                           p(1, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(1, j).Address
                           val_err = p(1, j).Value
                           testo_err = "Il totale dei rami non puo essere zero se la somma dei subtotali dei rami danni/vita |fffd| maggiore di zero"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                        
                        
                        If flag_addendi > 1 Then
                            If Len(Trim(p(1, j).text)) > 0 And p(1, j).text <> "0" And p(1, j).Value > totale Then
                               p(1, j).Font.ColorIndex = 3
                               ind_err = "'" & ActiveSheet.Name & "'!" & p(1, j).Address
                               val_err = p(1, j).Value
                               testo_err = "Il totale dei rami non puo essere superiore alla somma dei subtotali dei singoli rami"
                               Call gesterr(ind_err, testo_err, val_err)
                               err_all1 = err_all1 + 1
                            End If
                        End If
                        
                        
                        If flag_addendi = 1 Then
                            If Len(Trim(p(1, j).text)) > 0 And p(1, j).text <> "0" And p(1, j).Value <> totale Then
                               p(1, j).Font.ColorIndex = 3
                               ind_err = "'" & ActiveSheet.Name & "'!" & p(1, j).Address
                               val_err = p(1, j).Value
                               testo_err = "Nel caso in cui sia compilata la cella relativa ad un solo subtotale, il totale dovr|fffd| essere necessariamente di uguale valore"
                               Call gesterr(ind_err, testo_err, val_err)
                               err_all1 = err_all1 + 1
                            End If
                        End If
                        
                        
                        If Len(Trim(p(1, j).text)) > 0 And p(1, j).text <> "0" And p(1, j).Value < valore_max Then
                           p(1, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(1, j).Address
                           val_err = p(1, j).Value
                           testo_err = "Il totale non puo essere inferiore al maggiore dei due subtotali"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                                               
                        flag_addendi = 0
                    Next j
                End If
                
                Range("B11").Select
                
           Case Is = "Tabella1_1"

                err_all1 = 0
                Sheets(f.Name).Activate
                Sheets(f.Name).Unprotect ("g.m.")
                Sheets(f.Name).Calculate
                Range("C18").Select
                ActiveCell.SpecialCells(xlCellTypeAllValidation).Select
                For Each cella In Selection
                    cella.Font.ColorIndex = 1
                    If Len(Trim(cella.text)) = 0 And cella.HasFormula = False Then
                       cella.Value = 0
                    End If
                   
                    If Len(Trim(cella.text)) > 0 And cella.text <> "0" And flag1_pdati = 0 Then
                       flag1_pdati = 1
                    End If
                    If cella.Validation.Value = False Then
                       cella.Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & cella.Address
                       val_err = cella.Value
                       testo_err = cella.Validation.ErrorMessage
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all1 = err_all1 + 1
                    End If
                Next cella
                If err_all1 = 0 Then
                    Set p = ActiveCell.SpecialCells(xlCellTypeAllValidation)
                    For j = 1 To p.Columns.Count
                        flag_addendi = 0
                        totale = 0
                        valore_max = 0
                        numero_addendi = 0
                        For i = 3 To 5
                            If Len(Trim(p(i, j).text)) > 0 And p(i, j).text <> "0" Then
                               numero_addendi = numero_addendi + 1
                               flag_addendi = 1
                               totale = totale + p(i, j).Value
                               If p(i, j).Value > valore_max Then
                                  valore_max = p(i, j).Value
                               End If
                            End If
                        Next i
                        'in totale la somma dei rami vita
                        If Len(Trim(p(2, j).text)) > 0 And p(2, j).text <> "0" And flag_addendi = 0 Then
                           p(2, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(2, j).Address
                           val_err = p(2, j).Value
                           testo_err = "Il totale dei rami vita non puo essere maggiore di zero se i singoli rami vita sono a zero"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                        
                        If Len(Trim(p(2, j).text)) = 0 And p(2, j).Value = "0" And flag_addendi = 1 Then
                           p(2, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(2, j).Address
                           val_err = p(2, j).Value
                           testo_err = "Il totale dei rami vita non puo essere zero se la somma dei singoli rami vita |fffd| maggiore di zero"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                        
                        If numero_addendi > 1 Then
                            If Len(Trim(p(2, j).text)) > 0 And p(2, j).text <> "0" And flag_addendi = 1 And p(2, j).Value > totale Then
                               p(2, j).Font.ColorIndex = 3
                               ind_err = "'" & ActiveSheet.Name & "'!" & p(2, j).Address
                               val_err = p(2, j).Value
                               testo_err = "Il subtotale dei rami vita non puo essere maggiore della somma degli addendi dei singoli rami vita"
                               Call gesterr(ind_err, testo_err, val_err)
                               err_all1 = err_all1 + 1
                            End If
                        End If
                        
                        If numero_addendi = 1 Then
                            If Len(Trim(p(2, j).text)) > 0 And p(2, j).text <> "0" And flag_addendi = 1 And p(2, j).Value <> totale Then
                               p(2, j).Font.ColorIndex = 3
                               ind_err = "'" & ActiveSheet.Name & "'!" & p(2, j).Address
                               val_err = p(2, j).Value
                               testo_err = "Nel caso in cui sia compilata la cella relativa ad un solo ramo, il subtotale dovr|fffd| essere necessariamente di uguale valore"
                               Call gesterr(ind_err, testo_err, val_err)
                               err_all1 = err_all1 + 1
                            End If
                        End If
                        
                        If Len(Trim(p(2, j).text)) > 0 And p(2, j).text <> "0" And p(2, j).Value < valore_max Then
                           p(2, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(2, j).Address
                           val_err = p(2, j).Value
                           testo_err = "Il subtotale vita non puo essere inferiore al maggiore dei valori presenti nei singoli rami"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                        
                        flag_addendi = 0
                    Next j
                    
                    For j = 1 To p.Columns.Count
                        numero_addendi = 0
                        flag_addendi = 0
                        totale = 0
                        valore_max = 0
                        For i = 7 To 8
                            If Len(Trim(p(i, j).text)) > 0 And p(i, j).text <> "0" Then
                               numero_addendi = numero_addendi + 1
                               flag_addendi = 1
                               totale = totale + p(i, j).Value
                               If p(i, j).Value > valore_max Then
                                  valore_max = p(i, j).Value
                               End If
                            
                            End If
                        Next i
                        If Len(Trim(p(6, j).text)) > 0 And p(6, j).text <> "0" And flag_addendi = 0 Then
                           p(6, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(6, j).Address
                           val_err = p(6, j).Value
                           testo_err = "Il subtotale dei rami danni non puo essere maggiore di zero se i singoli rami danni sono a zero"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                        
                        If Len(Trim(p(6, j).text)) = 0 And p(6, j).Value = "0" And flag_addendi = 1 Then
                           p(6, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(6, j).Address
                           val_err = p(6, j).Value
                           testo_err = "Il subtotale dei rami danni non puo essere zero se la somma dei singoli rami danni |fffd| maggiore di zero"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                        
                        
                        If numero_addendi > 1 Then
                            If Len(Trim(p(6, j).text)) > 0 And p(6, j).text <> "0" And flag_addendi = 1 And p(6, j).Value > totale Then
                               p(6, j).Font.ColorIndex = 3
                               ind_err = "'" & ActiveSheet.Name & "'!" & p(6, j).Address
                               val_err = p(6, j).Value
                               testo_err = "Il subtotale dei rami danni non puo essere maggiore della somma degli addendi dei singoli rami danni"
                               Call gesterr(ind_err, testo_err, val_err)
                               err_all1 = err_all1 + 1
                            End If
                        End If
                                           
                        If numero_addendi = 1 Then
                            If Len(Trim(p(6, j).text)) > 0 And p(6, j).text <> "0" And flag_addendi = 1 And p(6, j).Value <> totale Then
                               p(6, j).Font.ColorIndex = 3
                               ind_err = "'" & ActiveSheet.Name & "'!" & p(6, j).Address
                               val_err = p(6, j).Value
                               testo_err = "Nel caso in cui sia compilata la cella relativa ad un solo ramo, il subtotale dovr|fffd| essere necessariamente di uguale valore"
                               Call gesterr(ind_err, testo_err, val_err)
                               err_all1 = err_all1 + 1
                            End If
                        End If
                        If Len(Trim(p(6, j).text)) > 0 And p(6, j).text <> "0" And p(6, j).Value < valore_max Then
                           p(6, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(6, j).Address
                           val_err = p(6, j).Value
                           testo_err = "Il subtotale danni non puo essere inferiore al maggiore dei valori presenti nei singoli rami"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                                           
                                           
                                           
                        flag_addendi = 0
                    Next j
                    
                    For j = 1 To p.Columns.Count
                        flag_addendi = 0
                        totale = 0
                        valore_max = 0
                        If Len(Trim(p(2, j).text)) > 0 And p(2, j).text <> "0" Then
                           flag_addendi_1 = 1
                           flag_addendi = flag_addendi + 1
                           totale = p(2, j).Value
                           valore_max = p(2, j).Value
                        End If
    
                        If Len(Trim(p(6, j).text)) > 0 And p(6, j).text <> "0" Then
                           flag_addendi_2 = 1
                           flag_addendi = flag_addendi + 1
                           If p(6, j).Value > valore_max Then
                              valore_max = p(6, j).Value
                           End If
                           
                           totale = p(6, j).Value + totale
                        End If
                        ' in totale la somma dei subtotali
                        If Len(Trim(p(1, j).text)) > 0 And p(1, j).text <> "0" And flag_addendi = 0 Then
                           p(1, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(1, j).Address
                           val_err = p(1, j).Value
                           testo_err = "Il totale dei rami non puo essere maggiore di zero se i singoli subtotali dei rami danni/vita sono a zero"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                        
                        If Len(Trim(p(1, j).text)) = 0 And p(1, j).Value = "0" And flag_addendi > 0 Then
                           p(1, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(1, j).Address
                           val_err = p(1, j).Value
                           testo_err = "Il totale dei rami non puo essere zero se la somma dei subtotali dei rami danni/vita |fffd| maggiore di zero"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                        
                        
                        If flag_addendi > 1 Then
                            If Len(Trim(p(1, j).text)) > 0 And p(1, j).text <> "0" And p(1, j).Value > totale Then
                               p(1, j).Font.ColorIndex = 3
                               ind_err = "'" & ActiveSheet.Name & "'!" & p(1, j).Address
                               val_err = p(1, j).Value
                               testo_err = "Il totale dei rami non puo essere superiore alla somma dei subtotali dei singoli rami"
                               Call gesterr(ind_err, testo_err, val_err)
                               err_all1 = err_all1 + 1
                            End If
                        End If
                        
                        
                        If flag_addendi = 1 Then
                            If Len(Trim(p(1, j).text)) > 0 And p(1, j).text <> "0" And p(1, j).Value <> totale Then
                               p(1, j).Font.ColorIndex = 3
                               ind_err = "'" & ActiveSheet.Name & "'!" & p(1, j).Address
                               val_err = p(1, j).Value
                               testo_err = "Nel caso in cui sia compilata la cella relativa ad un solo subtotale, il totale dovr|fffd| essere necessariamente di uguale valore"
                               Call gesterr(ind_err, testo_err, val_err)
                               err_all1 = err_all1 + 1
                            End If
                        End If
                        
                        
                        If Len(Trim(p(1, j).text)) > 0 And p(1, j).text <> "0" And p(1, j).Value < valore_max Then
                           p(1, j).Font.ColorIndex = 3
                           ind_err = "'" & ActiveSheet.Name & "'!" & p(1, j).Address
                           val_err = p(1, j).Value
                           testo_err = "Il totale non puo essere inferiore al maggiore dei due subtotali"
                           Call gesterr(ind_err, testo_err, val_err)
                           err_all1 = err_all1 + 1
                        End If
                        
                        
                        
                        flag_addendi = 0
                    Next j
                End If
'INIZIO CONTROLLI FRA TABELLA 1 E TABELLA 2

                
                Range("C18").Select
           
                
                
           Case Is = "Tabella2"

                err_all2 = 0
                Sheets(f.Name).Activate
                Sheets(f.Name).Unprotect ("g.m.")
                Sheets(f.Name).Calculate
                Range("A11:G1010").Select
                'Selection.Sort Key1:=Range("A11"), Order1:=xlAscending, Key2:=Range("C11" _
                    ), Order2:=xlAscending, Key3:=Range("E11"), Order3:=xlAscending, Header _
                    :=xlNo, OrderCustom:=1, MatchCase:=True, Orientation:=xlTopToBottom, _
                    DataOption1:=xlSortNormal, DataOption2:=xlSortNormal, DataOption3:= _
                    xlSortNormal
                

                Range("A11:F1010").Select
                'controllo delle regole di convalida
                For Each cella In Selection
                    
                    cella.Font.ColorIndex = 1
                    
                    If Len(Trim(cella.text)) > 0 And cella.text <> "" And cella.text <> "0" And flag1_pdati = 0 Then
                       flag1_pdati = 1
                    End If
                    
                    If cella.Validation.Value = False And Len(Trim(cella.text)) > 0 And cella.text <> "" Then
                       cella.Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & cella.Address
                       val_err = cella.Value
                       testo_err = cella.Validation.ErrorMessage
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all2 = err_all2 + 1
                    End If
                
                Next cella
                
                 
                Set p = Range("A11:F1010")
                
                'Se su una riga dell'area dati c'|fffd| almeno una cella vuota
                'allora segnalo errore
                
                For i = 1 To p.Rows.Count
                    'la prima cella |fffd| vuota e c'|fffd| ne almeno una valorizzata
                    If Len(Trim(p(i, 1).Value)) = 0 And (p(i, 2).Value > 0 Or Len(Trim(p(i, 3).Value)) > 0 Or _
                       Len(Trim(p(i, 4).Value)) > 0 Or Len(Trim(p(i, 5).Value)) > 0 Or p(i, 6).Value > 0) Then
                       p(i, 1).Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & p(i, 1).Address
                       val_err = p(i, 1).Value
                       testo_err = "Attenzione |fffd| obbligatorio inserire un valore in questa cella"
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all2 = err_all2 + 1
                    End If
                    'la seconda cella |fffd| vuota e c'|fffd| ne almeno una valorizzata
                    If p(i, 2).Value = 0 And (Len(Trim(p(i, 1).Value)) > 0 Or Len(Trim(p(i, 3).Value)) > 0 Or _
                       Len(Trim(p(i, 4).Value)) > 0 Or Len(Trim(p(i, 5).Value)) > 0 Or p(i, 6).Value > 0) Then
                       p(i, 2).Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & p(i, 2).Address
                       val_err = p(i, 2).Value
                       testo_err = "Attenzione |fffd| obbligatorio inserire un valore in questa cella"
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all2 = err_all2 + 1
                    End If
                    'la terza cella |fffd| vuota e c'|fffd| ne almeno una valorizzata
                    If Len(Trim(p(i, 3).Value)) = 0 And (Len(Trim(p(i, 1).Value)) > 0 Or p(i, 2).Value > 0 Or _
                       Len(Trim(p(i, 4).Value)) > 0 Or Len(Trim(p(i, 5).Value)) > 0 Or p(i, 6).Value > 0) Then
                       p(i, 3).Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & p(i, 3).Address
                       val_err = p(i, 3).Value
                       testo_err = "Attenzione |fffd| obbligatorio inserire un valore in questa cella"
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all2 = err_all2 + 1
                    End If
                    
                    'la quarta cella |fffd| vuota e c'|fffd| ne almeno una valorizzata
                    If Len(Trim(p(i, 4).Value)) = 0 And (Len(Trim(p(i, 1).Value)) > 0 Or p(i, 2).Value > 0 Or Len(Trim(p(i, 3).Value)) > 0 Or _
                       Len(Trim(p(i, 5).Value)) > 0 Or p(i, 6).Value > 0) Then
                       p(i, 4).Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & p(i, 4).Address
                       val_err = p(i, 4).Value
                       testo_err = "Attenzione |fffd| obbligatorio inserire un valore in questa cella"
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all2 = err_all2 + 1
                    End If
                    'la quinta cella |fffd| vuota e c'|fffd| ne almeno una valorizzata
                    If Len(Trim(p(i, 5).Value)) = 0 And (Len(Trim(p(i, 1).Value)) > 0 Or p(i, 2).Value > 0 Or Len(Trim(p(i, 3).Value)) > 0 Or _
                       Len(Trim(p(i, 4).Value)) > 0 Or p(i, 6).Value > 0) Then
                       p(i, 5).Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & p(i, 5).Address
                       val_err = p(i, 5).Value
                       testo_err = "Attenzione |fffd| obbligatorio inserire un valore in questa cella"
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all2 = err_all2 + 1
                    End If
                    'la sesta cella |fffd| vuota e c'|fffd| ne almeno una valorizzata
                    If p(i, 6).Value = 0 And (Len(Trim(p(i, 1).Value)) > 0 Or p(i, 2).Value > 0 Or _
                       Len(Trim(p(i, 3).Value)) > 0 Or Len(Trim(p(i, 4).Value)) > 0 Or Len(Trim(p(i, 5).Value)) > 0) Then
                       p(i, 6).Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & p(i, 6).Address
                       val_err = p(i, 6).Value
                       testo_err = "Attenzione |fffd| obbligatorio inserire un valore in questa cella"
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all2 = err_all2 + 1
                    End If
                    

                Next i
                         
'integro numero ore
                Range("G11").Select
                
                ActiveCell.FormulaR1C1 = _
                    "=+SUMPRODUCT((R11C1:R1010C1=RC[-6])*(R11C3:R1010C3=RC[-4])*(R11C4:R1010C4=RC[-3])*(R11C5:R1010C5=RC[-2])*R11C2:R1010C2)"

                Selection.Copy
                Range("G12:G1010").Select
                Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                     SkipBlanks:=False, Transpose:=False
                Range("G11").Select
                Application.CutCopyMode = False
                    
'integro numero partecipanti
                Range("H11").Select
                
                ActiveCell.FormulaR1C1 = _
                    "=+SUMPRODUCT((R11C1:R1010C1=RC[-7])*(R11C3:R1010C3=RC[-5])*(R11C4:R1010C4=RC[-4])*(R11C5:R1010C5=RC[-3])*R11C6:R1010C6)"

                Selection.Copy
                Range("H12:H1010").Select
                Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                     SkipBlanks:=False, Transpose:=False
                Range("H11").Select
                Application.CutCopyMode = False
'controllo le righe duplicate

                For i = 11 To 1010
                    If Cells(i, 1).Font.ColorIndex = 1 And _
                       Cells(i, 2).Font.ColorIndex = 1 And _
                       Cells(i, 3).Font.ColorIndex = 1 And _
                       Cells(i, 4).Font.ColorIndex = 1 And _
                       Cells(i, 5).Font.ColorIndex = 1 And _
                       Cells(i, 6).Font.ColorIndex = 1 And _
                       Not IsError(Cells(i, 7)) Then
                       If Cells(i, 2).Value <> Cells(i, 7).Value Then
                      
                          Cells(i, 2).Font.ColorIndex = 3
                          ind_err = "'" & ActiveSheet.Name & "'!" & Cells(i, 2).Address
                          val_err = Cells(i, 2).Value
                          testo_err = "Attenzione il valore presente in questa cella |fffd| ripetuto in una o pi|fffd| righe aventi lo stesso valore di Tipologia corsi, Struttura che ha erogato la formazione, Modalit|fffd| di tenuta corsi e Categoria di destinatari: indicare il valore in una riga unica sommando per numero di corsi"
                          Call gesterr(ind_err, testo_err, val_err)
                          err_all2 = err_all2 + 1
                     
                       End If
                    End If
                Next i
                
                For i = 11 To 1010
                    If Cells(i, 1).Font.ColorIndex = 1 And _
                       Cells(i, 3).Font.ColorIndex = 1 And _
                       Cells(i, 4).Font.ColorIndex = 1 And _
                       Cells(i, 5).Font.ColorIndex = 1 And _
                       Cells(i, 6).Font.ColorIndex = 1 And _
                       Not IsError(Cells(i, 8)) Then
                       If Cells(i, 6).Value <> Cells(i, 8).Value Then
                         
                          Cells(i, 6).Font.ColorIndex = 3
                          ind_err = "'" & ActiveSheet.Name & "'!" & Cells(i, 6).Address
                          val_err = Cells(i, 6).Value
                          testo_err = "Attenzione il valore presente in questa cella |fffd| ripetuto in una o pi|fffd| righe aventi lo stesso valore di Tipologia corsi, Struttura che ha erogato la formazione, Modalit|fffd| di tenuta corsi e Categoria di destinatari: indicare il valore in una riga unica sommando per numero di partecipanti"
                          Call gesterr(ind_err, testo_err, val_err)
                          err_all2 = err_all2 + 1
                     
                       End If
                     End If
                Next i
                
                         
'INIZIO CONTROLLI FRA TABELLA 1 E TABELLA 2


                Range("G11:H1010").Select
                Selection.ClearContents
                
                Range("A11").Select
                          
           Case Is = "Tabella3"
                
                err_all3 = 0
                Sheets(f.Name).Activate
                Sheets(f.Name).Unprotect ("g.m.")
                Sheets(f.Name).Calculate
                Range("A11:G1010").Select
                'Selection.Sort Key1:=Range("B11"), Order1:=xlAscending, Key2:=Range("A11" _
                    ), Order2:=xlAscending, Key3:=Range("D11"), Order3:=xlAscending, Header _
                    :=xlNo, OrderCustom:=1, MatchCase:=True, Orientation:=xlTopToBottom, _
                    DataOption1:=xlSortNormal, DataOption2:=xlSortNormal, DataOption3:= _
                    xlSortNormal
                

                Range("A11:F1010").Select
            
                For Each cella In Selection
                    
                    cella.Font.ColorIndex = 1
                    
                    If Len(Trim(cella.text)) > 0 And cella.text <> "" And cella.text <> "0" And flag1_pdati = 0 Then
                       flag1_pdati = 1
                    End If
                    
                    If cella.Validation.Value = False And Len(Trim(cella.text)) > 0 And cella.text <> "" Then
                       cella.Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & cella.Address
                       val_err = cella.Value
                       testo_err = cella.Validation.ErrorMessage
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all3 = err_all3 + 1
                    End If
                
                Next cella
                
                Set p = Range("A11:F1010")
                
                'Se su una riga dell'area dati c'|fffd| almeno una cella vuota
                'allora segnalo errore
                
                For i = 1 To p.Rows.Count
                    'la prima cella |fffd| vuota e c'|fffd| ne almeno una valorizzata
                    If Len(Trim(p(i, 1).Value)) = 0 And (p(i, 2).Value > 0 Or Len(Trim(p(i, 3).Value)) > 0 Or _
                       Len(Trim(p(i, 4).Value)) > 0 Or Len(Trim(p(i, 5).Value)) > 0 Or p(i, 6).Value > 0) Then
                       p(i, 1).Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & p(i, 1).Address
                       val_err = p(i, 1).Value
                       testo_err = "Attenzione |fffd| obbligatorio inserire un valore in questa cella"
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all3 = err_all3 + 1
                    End If
                    'la seconda cella |fffd| vuota e c'|fffd| ne almeno una valorizzata
                    If p(i, 2).Value = 0 And (Len(Trim(p(i, 1).Value)) > 0 Or Len(Trim(p(i, 3).Value)) > 0 Or _
                       Len(Trim(p(i, 4).Value)) > 0 Or Len(Trim(p(i, 5).Value)) > 0 Or p(i, 6).Value > 0) Then
                       p(i, 2).Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & p(i, 2).Address
                       val_err = p(i, 2).Value
                       testo_err = "Attenzione |fffd| obbligatorio inserire un valore in questa cella"
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all3 = err_all3 + 1
                    End If
                    'la terza cella |fffd| vuota e c'|fffd| ne almeno una valorizzata
                    If Len(Trim(p(i, 3).Value)) = 0 And (Len(Trim(p(i, 1).Value)) > 0 Or p(i, 2).Value > 0 Or _
                       Len(Trim(p(i, 4).Value)) > 0 Or Len(Trim(p(i, 5).Value)) > 0 Or p(i, 6).Value > 0) Then
                       p(i, 3).Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & p(i, 3).Address
                       val_err = p(i, 3).Value
                       testo_err = "Attenzione |fffd| obbligatorio inserire un valore in questa cella"
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all3 = err_all3 + 1
                    End If
                    
                    'la quarta cella |fffd| vuota e c'|fffd| ne almeno una valorizzata
                    If Len(Trim(p(i, 4).Value)) = 0 And (Len(Trim(p(i, 1).Value)) > 0 Or p(i, 2).Value > 0 Or Len(Trim(p(i, 3).Value)) > 0 Or _
                       Len(Trim(p(i, 5).Value)) > 0 Or p(i, 6).Value > 0) Then
                       p(i, 4).Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & p(i, 4).Address
                       val_err = p(i, 4).Value
                       testo_err = "Attenzione |fffd| obbligatorio inserire un valore in questa cella"
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all3 = err_all3 + 1
                    End If
                    'la quinta cella |fffd| vuota e c'|fffd| ne almeno una valorizzata
                    If Len(Trim(p(i, 5).Value)) = 0 And (Len(Trim(p(i, 1).Value)) > 0 Or p(i, 2).Value > 0 Or Len(Trim(p(i, 3).Value)) > 0 Or _
                       Len(Trim(p(i, 4).Value)) > 0 Or p(i, 6).Value > 0) Then
                       p(i, 5).Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & p(i, 5).Address
                       val_err = p(i, 5).Value
                       testo_err = "Attenzione |fffd| obbligatorio inserire un valore in questa cella"
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all3 = err_all3 + 1
                    End If
                    'la sesta cella |fffd| vuota e c'|fffd| ne almeno una valorizzata
                    If p(i, 6).Value = 0 And (Len(Trim(p(i, 1).Value)) > 0 Or p(i, 2).Value > 0 Or _
                       Len(Trim(p(i, 3).Value)) > 0 Or Len(Trim(p(i, 4).Value)) > 0 Or Len(Trim(p(i, 5).Value)) > 0) Then
                       p(i, 6).Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & p(i, 6).Address
                       val_err = p(i, 6).Value
                       testo_err = "Attenzione |fffd| obbligatorio inserire un valore in questa cella"
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all3 = err_all3 + 1
                    End If
                    

                Next i
                
                
                         
'integro numero ore
                Range("G11").Select
                
                ActiveCell.FormulaR1C1 = _
                    "=+SUMPRODUCT((R11C1:R1010C1=RC[-6])*(R11C3:R1010C3=RC[-4])*(R11C4:R1010C4=RC[-3])*(R11C5:R1010C5=RC[-2])*R11C2:R1010C2)"

                Selection.Copy
                Range("G12:G1010").Select
                Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                     SkipBlanks:=False, Transpose:=False
                Range("G11").Select
                Application.CutCopyMode = False
                    
'integro numero partecipanti
                Range("H11").Select
                
                ActiveCell.FormulaR1C1 = _
                    "=+SUMPRODUCT((R11C1:R1010C1=RC[-7])*(R11C3:R1010C3=RC[-5])*(R11C4:R1010C4=RC[-4])*(R11C5:R1010C5=RC[-3])*R11C6:R1010C6)"

                Selection.Copy
                Range("H12:H1010").Select
                Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                     SkipBlanks:=False, Transpose:=False
                Range("H11").Select
                Application.CutCopyMode = False
'controllo le righe duplicate

                For i = 11 To 1010
                    If Cells(i, 1).Font.ColorIndex = 1 And _
                       Cells(i, 2).Font.ColorIndex = 1 And _
                       Cells(i, 3).Font.ColorIndex = 1 And _
                       Cells(i, 4).Font.ColorIndex = 1 And _
                       Cells(i, 5).Font.ColorIndex = 1 And _
                       Cells(i, 6).Font.ColorIndex = 1 And _
                       Not IsError(Cells(i, 7)) Then
                       If Cells(i, 2).Value <> Cells(i, 7).Value Then
                      
                          Cells(i, 2).Font.ColorIndex = 3
                          ind_err = "'" & ActiveSheet.Name & "'!" & Cells(i, 2).Address
                          val_err = Cells(i, 2).Value
                          testo_err = "Attenzione il valore presente in questa cella |fffd| ripetuto in una o pi|fffd| righe aventi lo stesso valore di Tipologia corsi, Struttura che ha erogato la formazione, Modalit|fffd| di tenuta corsi e Categoria di destinatari: indicare il valore in una riga unica sommando per numero di corsi"
                          Call gesterr(ind_err, testo_err, val_err)
                          err_all2 = err_all2 + 1
                     
                       End If
                    End If
                Next i
                
                For i = 11 To 1010
                    If Cells(i, 1).Font.ColorIndex = 1 And _
                       Cells(i, 3).Font.ColorIndex = 1 And _
                       Cells(i, 4).Font.ColorIndex = 1 And _
                       Cells(i, 5).Font.ColorIndex = 1 And _
                       Cells(i, 6).Font.ColorIndex = 1 And _
                       Not IsError(Cells(i, 8)) Then
                       If Cells(i, 6).Value <> Cells(i, 8).Value Then
                         
                          Cells(i, 6).Font.ColorIndex = 3
                          ind_err = "'" & ActiveSheet.Name & "'!" & Cells(i, 6).Address
                          val_err = Cells(i, 6).Value
                          testo_err = "Attenzione il valore presente in questa cella |fffd| ripetuto in una o pi|fffd| righe aventi lo stesso valore di Tipologia corsi, Struttura che ha erogato la formazione, Modalit|fffd| di tenuta corsi e Categoria di destinatari: indicare il valore in una riga unica sommando per numero di partecipanti"
                          Call gesterr(ind_err, testo_err, val_err)
                          err_all2 = err_all2 + 1
                     
                       End If
                     End If
                Next i
                
                         
'INIZIO CONTROLLI FRA TABELLA 1 E TABELLA 2


                Range("G11:H1010").Select
                Selection.ClearContents



'INIZIO CONTROLLI FRA TABELLA 1 E TABELLA 2


                
                Range("A11").Select
                
                
                
                          
           Case Is = "Tabella4_5"
                
                err_all4 = 0
                Sheets(f.Name).Activate
                Sheets(f.Name).Unprotect ("g.m.")
                Sheets(f.Name).Calculate

                Range("Tabella4").Select

                For Each cella In Selection
                    cella.Font.ColorIndex = 1
                    If Len(Trim(cella.text)) = 0 And cella.HasFormula = False Then
                       cella.Value = 0
                    End If
                    If Len(Trim(cella.text)) > 0 And cella.text <> "0" And flag1_pdati = 0 Then
                       flag1_pdati = 1
                    End If
                    If cella.Validation.Value = False Then
                       cella.Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & cella.Address
                       val_err = cella.Value
                       testo_err = cella.Validation.ErrorMessage
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all4 = err_all4 + 1
                    End If
                Next cella
                Range("D10").Select

                Range("Tabella5").Select

                For Each cella In Selection
                    cella.Font.ColorIndex = 1
                    If Len(Trim(cella.text)) = 0 And cella.HasFormula = False Then
                       cella.Value = 0
                    End If
                    If Len(Trim(cella.text)) > 0 And cella.text <> "0" And flag1_pdati = 0 Then
                       flag1_pdati = 1
                    End If
                    If cella.Validation.Value = False Then
                       cella.Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & cella.Address
                       val_err = cella.Value
                       testo_err = cella.Validation.ErrorMessage
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all4 = err_all4 + 1
                    End If
                Next cella
                Range("D10").Select

           
           
           Case Is = "Tabella6_7"

                err_all5 = 0
                Sheets(f.Name).Activate
                Sheets(f.Name).Unprotect ("g.m.")
                Sheets(f.Name).Calculate
                
                Range("Tabella6").Select

                For Each cella In Selection
                    cella.Font.ColorIndex = 1
                    If Len(Trim(cella.text)) = 0 And cella.HasFormula = False Then
                       cella.Value = 0
                    End If
                    If Len(Trim(cella.text)) > 0 And cella.text <> "0" And flag1_pdati = 0 Then
                       flag1_pdati = 1
                    End If
                    If cella.Validation.Value = False Then
                       cella.Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & cella.Address
                       val_err = cella.Value
                       testo_err = cella.Validation.ErrorMessage
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all5 = err_all5 + 1
                    End If
                Next cella
                Range("D10").Select

                Range("Tabella7").Select

                For Each cella In Selection
                    cella.Font.ColorIndex = 1
                    If Len(Trim(cella.text)) = 0 And cella.HasFormula = False Then
                       cella.Value = 0
                    End If
                    If Len(Trim(cella.text)) > 0 And cella.text <> "0" And flag1_pdati = 0 Then
                       flag1_pdati = 1
                    End If
                    If cella.Validation.Value = False Then
                       cella.Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & cella.Address
                       val_err = cella.Value
                       testo_err = cella.Validation.ErrorMessage
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all5 = err_all5 + 1
                    End If
                Next cella
                Range("D10").Select
                
           Case Is = "tabella8"

                err_all6 = 0
                Sheets(f.Name).Activate
                Sheets(f.Name).Unprotect ("g.m.")
                Sheets(f.Name).Calculate
                
                Range("Tabella6").Select

                For Each cella In Selection
                    cella.Font.ColorIndex = 1
                    If Len(Trim(cella.text)) = 0 And cella.HasFormula = False Then
                       cella.Value = 0
                    End If
                    If Len(Trim(cella.text)) > 0 And cella.text <> "0" And flag1_pdati = 0 Then
                       flag1_pdati = 1
                    End If
                    If cella.Validation.Value = False Then
                       cella.Font.ColorIndex = 3
                       ind_err = "'" & ActiveSheet.Name & "'!" & cella.Address
                       val_err = cella.Value
                       testo_err = cella.Validation.ErrorMessage
                       Call gesterr(ind_err, testo_err, val_err)
                       err_all6 = err_all6 + 1
                    End If
                Next cella
                Range("D10").Select
    
    
    End Select

Next f
            
            
            
For Each f In ActiveWorkbook.Sheets
     
     Select Case f.Name
    
           Case Is = "Errori"
                f.Activate
                Cells.Select
                Selection.Columns.AutoFit
                Range("A1").Select
                controlli_validit|fffd| = 2
           Case Is = "Tabella1", "Tabella2", "Tabella3", "Tabella4_5", "Tabella6_7", "Tabella8"
                Sheets(f.Name).Protect ("g.m.")
                
     End Select

Next f
If flag1_pdati = 0 Then
   controlli_validit|fffd| = 1
End If

fine:
Set f = Nothing
Set cella = Nothing
Sheets(foglioattivo).Select

Application.EnableCancelKey = xlInterrupt
Application.ScreenUpdating = True

End Function

Sub gesterr(ByVal indir As String, ByVal vt As String, ByVal valc As String)

Dim nomefoglio As String
Dim f As Variant

nomefoglio = ActiveSheet.Name

For Each f In ActiveWorkbook.Sheets
     
     If f.Name = "Errori" Then
        f.Activate
        Range("A1").Select
        GoTo valorizza
     End If
     
Next f

Sheets(nomefoglio).Activate
With ActiveWorkbook
     .Unprotect ("g.m.")
     Sheets.Add
     ActiveSheet.Name = "Errori"
     Range("A1").Select
     ActiveCell.FormulaR1C1 = "Indirizzo"
     Range("B1").Select
     ActiveCell.FormulaR1C1 = "Valore"
     Range("C1").Select
     ActiveCell.FormulaR1C1 = "Commento"
     Range("A1").Select
     .Protect ("g.m.")

End With

valorizza:
If IsEmpty(Range("A2").Value) Then
   Range("A2").Select
Else
   Selection.End(xlDown).Select
   ActiveCell.Offset(1, 0).Select
End If
     
valore = InStr(1, indir, "!", vbTextCompare)
ActiveCell.Value = Mid$(indir, 1, valore) & Trim(Mid$(indir, valore + 1, Len(indir)))
ActiveCell.Font.ColorIndex = 3
     
ActiveCell.Offset(0, 1).Activate
ActiveCell.Value = valc
ActiveCell.Font.ColorIndex = 3
 
ActiveCell.Offset(0, 1).Activate
ActiveCell.Value = Trim(vt)
ActiveCell.Font.ColorIndex = 3
Sheets(nomefoglio).Activate
End Sub
Sub gesterr1(ByVal indir As String, ByVal vt As String, ByVal valc As String)

Dim nomefoglio As String
Dim f As Variant

nomefoglio = ActiveSheet.Name

For Each f In ActiveWorkbook.Sheets
     
     If f.Name = "Errori" Then
        f.Activate
        Range("A1").Select
        GoTo valorizza
     End If
     
Next f

Sheets(nomefoglio).Activate
With ActiveWorkbook
     .Unprotect ("g.m.")
     Sheets.Add
     ActiveSheet.Name = "Errori"
     Range("A1").Select
     ActiveCell.FormulaR1C1 = "Indirizzo"
     Range("B1").Select
     ActiveCell.FormulaR1C1 = "Valore"
     Range("C1").Select
     ActiveCell.FormulaR1C1 = "Commento"
     Range("A1").Select
     .Protect ("g.m.")

End With

valorizza:
If IsEmpty(Range("A2").Value) Then
   Range("A2").Select
Else
   Selection.End(xlDown).Select
   ActiveCell.Offset(1, 0).Select
End If
     
valore = InStr(1, indir, "!", vbTextCompare)
ActiveCell.Value = Mid$(indir, 1, valore) & Trim(Mid$(indir, valore + 1, Len(indir)))
ActiveCell.Font.ColorIndex = 1
     
ActiveCell.Offset(0, 1).Activate
ActiveCell.Value = valc
ActiveCell.Font.ColorIndex = 1
 
ActiveCell.Offset(0, 1).Activate
ActiveCell.Value = Trim(vt)
ActiveCell.Font.ColorIndex = 1
Sheets(nomefoglio).Activate
End Sub



Sub scarica()

Dim f As Variant
Dim cella As Variant
Dim area_dati As Range
Dim codfoglio As String * 2
Dim codcomp As String * 3
Dim nomefile As String
Dim numerofile As Integer
Dim rec_scritti As Integer
Dim segno As String
Dim valore As Variant
Dim lcampi1(7) As Integer
Dim lcampi2(7) As Integer

lcampi2(1) = 40
lcampi2(2) = 9
lcampi2(3) = 25
lcampi2(4) = 10
lcampi2(5) = 3
lcampi2(6) = 9

If Range("'Foglio Informativo'!J6").text = "   " Then
   MsgBox ("Attenzione |fffd| necessario selezionare una compagnia")
   Exit Sub
End If

Select Case controlli_validit|fffd|
       
'       Case Is = 0
'            MsgBox ("Attenzione i controlli di validit|fffd| hanno dato esito positivo ora sar|fffd| possibile generare il flusso di output")
       
       Case Is = 1
            MsgBox ("Attenzione non ci sono dati diversi da zero!")
            Exit Sub
       
       Case Is = 2
            MsgBox ("Attenzione sono stati rilevati deglli errori che |fffd| possibile consultare sul foglio 'Errori'")
            Exit Sub
       
       Case Is = 3
            MsgBox ("Attenzione |fffd| necessario selezionare una compagnia")
            Exit Sub
            
End Select

codcomp = String(3 - Len(Range("'Foglio Informativo'!J6").text), "0") & Range("'Foglio Informativo'!J6").text
anno = Range("'Foglio Informativo'!E8").text

nomefile = Application.DefaultFilePath & "\FormazioneReteVendita" & Range("'Foglio Informativo'!E8").text & "." & codcomp
Application.EnableCancelKey = xlDisabled
Application.ScreenUpdating = False


For Each f In ActiveWorkbook.Sheets
     
     Select Case f.Name
    
           Case Is = "Foglio Informativo", "Errori"
           Case Else
                Sheets(f.Name).Unprotect ("g.m.")
     End Select

Next f

numerofile = FreeFile()

Open nomefile For Output As numerofile

For Each f In ActiveWorkbook.Sheets
        
    Select Case f.Name
           
           Case Is = "Tabella1"

           Sheets(f.Name).Activate
   
           Set p = Range("Tabella1")
     
           For i = 1 To p.Rows.Count
               Let Record = codcomp & anno & "TAB01" & Format(i, "000000")
               For j = 1 To p.Columns.Count
                   Let Record = Record & Format(p(i, j).Value, "000000000")
               Next j
               Print #numerofile, Record
               Let rec_scritti = rec_scritti + 1
               Let Record = ""
           Next i
                     
           Case Is = "Tabella1_1"

           Sheets(f.Name).Activate
   
           Set p = Range("Tabella1_1")
     
           For i = 1 To p.Rows.Count
               Let Record = codcomp & anno & "TA1_1" & Format(i, "000000")
               For j = 1 To p.Columns.Count
                   Let Record = Record & Format(p(i, j).Value, "000000000")
               Next j
               Print #numerofile, Record
               Let rec_scritti = rec_scritti + 1
               Let Record = ""
           Next i
            
            
           Case Is = "Tabella2"

           Sheets(f.Name).Activate
           riga = 0
           Set p = Range("Tabella2")
     
           For i = 1 To p.Rows.Count
               'Let Record = codcomp & anno & "TAB02" & Format(i, "000000")
               For j = 1 To p.Columns.Count

                      If j = 2 Or j = 6 Then
                         Let Record = Record & Format(p(i, j).Value, "000000000")
                      Else
                          If j = 5 Then
                             Let Record = Record & UCase(Mid(Trim(p(i, j).text), 1, 1)) & UCase(Mid(Trim(p(i, j).text), 2, Len(Trim(p(i, j).text)))) & String(lcampi2(j) - Len(Trim(p(i, j).Value)), " ")
'                             Let Record = Record & Trim(p(i, j).Value) & String(lcampi2(j) - Len(Trim(p(i, j).Value)), " ")
                          Else
                             Let Record = Record & UCase(Mid(Trim(p(i, j).text), 1, 1)) & LCase(Mid(Trim(p(i, j).text), 2, Len(Trim(p(i, j).text)))) & String(lcampi2(j) - Len(Trim(p(i, j).Value)), " ")
                          End If
                      End If
                   
               Next j
               If Record = "                                        000000000                                      000000000" Then
               Else
                  riga = riga + 1
                  Print #numerofile, codcomp & anno & "TAB02" & Format(riga, "000000") & Record
               
               End If
               Let rec_scritti = rec_scritti + 1
               Let Record = ""
           Next i
           
           Case Is = "Tabella3"

           Sheets(f.Name).Activate
     
           Set p = Range("Tabella3")
           riga = 0
           For i = 1 To p.Rows.Count
               'Let Record = codcomp & anno & "TAB03" & Format(i, "000000")
               For j = 1 To p.Columns.Count
                   If j = 2 Or j = 6 Then
                      Let Record = Record & Format(p(i, j).Value, "000000000")
                   Else
                      If j = 5 Then
                         Let Record = Record & UCase(Mid(Trim(p(i, j).text), 1, 1)) & UCase(Mid(Trim(p(i, j).text), 2, Len(Trim(p(i, j).text)))) & String(lcampi2(j) - Len(Trim(p(i, j).Value)), " ")
'                             Let Record = Record & Trim(p(i, j).Value) & String(lcampi2(j) - Len(Trim(p(i, j).Value)), " ")
                      Else
                         Let Record = Record & UCase(Mid(Trim(p(i, j).text), 1, 1)) & LCase(Mid(Trim(p(i, j).text), 2, Len(Trim(p(i, j).text)))) & String(lcampi2(j) - Len(Trim(p(i, j).Value)), " ")
                      End If
                   End If
               Next j
               If Record = "                                        000000000                                      000000000" Then
               Else
                  riga = riga + 1
                  Print #numerofile, codcomp & anno & "TAB03" & Format(riga, "000000") & Record
               End If
               Let rec_scritti = rec_scritti + 1
               Let Record = ""
           Next i
           
           
           Case Is = "Tabella4_5"

           Sheets(f.Name).Activate
           Set p = Range("Tabella4")
     
           For i = 1 To p.Rows.Count
               Let Record = codcomp & anno & "TAB04" & Format(i, "000000")
               For j = 1 To p.Columns.Count
                   Let Record = Record & Format(p(i, j).Value, "000000000")
               Next j
               Print #numerofile, Record
               Let rec_scritti = rec_scritti + 1
               Let Record = ""
           Next i
           
           Set p = Range("Tabella5")
     
           For i = 1 To p.Rows.Count
               Let Record = codcomp & anno & "TAB05" & Format(i, "000000")
               For j = 1 To p.Columns.Count
                   Let Record = Record & Format(p(i, j).Value, "000000000")
               Next j
               Print #numerofile, Record
               Let rec_scritti = rec_scritti + 1
               Let Record = ""
           Next i

                     
                    
           Case Is = "Tabella6_7"

           Sheets(f.Name).Activate
           Set p = Range("Tabella6")
     
           For i = 1 To p.Rows.Count
               Let Record = codcomp & anno & "TAB06" & Format(i, "000000")
               For j = 1 To p.Columns.Count
                   Let Record = Record & Format(p(i, j).Value, "000000000")
               Next j
               Print #numerofile, Record
               Let rec_scritti = rec_scritti + 1
               Let Record = ""
           Next i
           
           Set p = Range("Tabella7")
     
           For i = 1 To p.Rows.Count
               Let Record = codcomp & anno & "TAB07" & Format(i, "000000")
               For j = 1 To p.Columns.Count
                   Let Record = Record & Format(p(i, j).Value, "000000000")
               Next j
               Print #numerofile, Record
               Let rec_scritti = rec_scritti + 1
               Let Record = ""
           Next i
           
           Case Is = "Tabella8"

           Sheets(f.Name).Activate
   
           Set p = Range("Tabella8")
     
           For i = 1 To p.Rows.Count
               Let Record = codcomp & anno & "TAB08" & Format(i, "000000")
               For j = 1 To p.Columns.Count
                   Let Record = Record & Format(p(i, j).Value, "000000000")
               Next j
               Print #numerofile, Record
               Let rec_scritti = rec_scritti + 1
               Let Record = ""
           Next i
           
 
    End Select

Next f


For Each f In ActiveWorkbook.Sheets
     
     Select Case f.Name
    
           Case Is = "Foglio Informativo", "Errori"
           Case Else
                Sheets(f.Name).Protect ("g.m.")
           End Select

Next f


Set f = Nothing
Set cella = Nothing
Set p = Nothing
Sheets("Foglio Informativo").Activate
Application.EnableCancelKey = xlInterrupt
Application.ScreenUpdating = True
If rec_scritti > 0 Then
   MsgBox ("Il file di output " & nomefile & " |fffd| stato generato correttamente")
End If
Close #numerofile

End Sub
Sub carica()

Dim f As Variant
Dim cella As Variant
Dim area_chiavi As Range
Dim area As Variant
Dim codfoglio As String * 2
Dim codcomp As String * 3
Dim nomefile As String
Dim numerofile As Integer
Dim rec_caricati As Integer
Dim rec_scartati As Integer
Dim c As Variant
Dim sb As clsProgressBar, i As Long
Dim stringa As String
Set sb = New clsProgressBar ' create a new progress bar
Dim lcampi2(7) As Integer

lcampi2(1) = 40
lcampi2(2) = 75
lcampi2(3) = 9
lcampi2(4) = 25
lcampi2(5) = 10
lcampi2(6) = 3
lcampi2(7) = 9

rec_scartati = 0
rec_caricati = 0

If Range("'Foglio Informativo'!j6").text = "   " Then
   MsgBox ("Attenzione |fffd| necessario selezionare una compagnia")
   Exit Sub
End If

codcomp = Range("'Foglio Informativo'!j6").text
anno = Range("'Foglio Informativo'!E8").text

nomefile = Application.DefaultFilePath & "\FormazioneReteVendita" & anno & "." & codcomp


numerofile = FreeFile()

If Len(Dir(nomefile)) = 0 Then
   MsgBox ("Attenzione: non esiste il file: " & nomefile)
   GoTo fine
End If

azzera
Application.EnableCancelKey = xlDisabled
Application.ScreenUpdating = False
Application.StatusBar = "Caricamento dati in corso.."

For Each f In ActiveWorkbook.Sheets
     
     Select Case f.Name
    
           Case Is = "Foglio Informativo", "Errori", "Domini"
           Case Else
                Sheets(f.Name).Unprotect ("g.m.")
     End Select

Next f


Open nomefile For Input As numerofile
While Not EOF(numerofile)

      Line Input #numerofile, textline
      If Mid$(textline, 1, 3) <> codcomp Then
         MsgBox ("Attenzione il codice compagnia presente in un record non coincide con quello della compagnia selezionata nel foglio informativo")
         GoTo fine
      End If
      rec_letti = rec_letti + 1
      'rec_caricati = rec_caricati + 1
      Select Case Mid$(textline, 8, 5)
             Case Is = "TAB01"
                  
                  Worksheets("Tabella1").Select
                  
                  Set area_dati = Range("Tabella1")
                  lunghezza = 9
                  passo = 0
                  'For k = 1 To 25
                  For k = 1 To area_dati.Columns.Count
                      If area_dati(Val(Mid$(textline, 13, 6)), k).HasFormula Then
                      Else
                         Let area_dati(Val(Mid$(textline, 13, 6)), k).Value = Mid$(textline, 19 + passo, lunghezza)
                         'rec_caricati = rec_caricati + 1
                         passo = passo + 9
                      End If
                  Next k
             
             Case Is = "TA1_1"
                  
                  Worksheets("Tabella1_1").Select
                  
                  Set area_dati = Range("Tabella1_1")
                  lunghezza = 9
                  passo = 0
                  'For k = 1 To 25
                  For k = 1 To area_dati.Columns.Count
                      If area_dati(Val(Mid$(textline, 13, 6)), k).HasFormula Then
                      Else
                         Let area_dati(Val(Mid$(textline, 13, 6)), k).Value = Mid$(textline, 19 + passo, lunghezza)
                         'rec_caricati = rec_caricati + 1
                         passo = passo + 9
                      End If
                  Next k
             
             
             Case Is = "TAB02"
                  Worksheets("Tabella2").Select
                  Set area_dati = Range("Tabella2")
                  Let area_dati(Val(Mid$(textline, 13, 6)), 1).Value = Trim(Mid$(textline, 19, 40))
                  Let area_dati(Val(Mid$(textline, 13, 6)), 2).Value = Trim(Mid$(textline, 59, 9))
                  Let area_dati(Val(Mid$(textline, 13, 6)), 3).Value = Trim(Mid$(textline, 68, 25))
                  Let area_dati(Val(Mid$(textline, 13, 6)), 4).Value = Trim(Mid$(textline, 93, 10))
                  Let area_dati(Val(Mid$(textline, 13, 6)), 5).Value = Trim(Mid$(textline, 103, 3))
                  Let area_dati(Val(Mid$(textline, 13, 6)), 6).Value = Trim(Mid$(textline, 106, 9))

                  'rec_caricati = rec_caricati + 1
             Case Is = "TAB03"
                  Worksheets("Tabella3").Select
                  Set area_dati = Range("Tabella3")
                  Let area_dati(Val(Mid$(textline, 13, 6)), 1).Value = Trim(Mid$(textline, 19, 40))
                  Let area_dati(Val(Mid$(textline, 13, 6)), 2).Value = Trim(Mid$(textline, 59, 9))
                  Let area_dati(Val(Mid$(textline, 13, 6)), 3).Value = Trim(Mid$(textline, 68, 25))
                  Let area_dati(Val(Mid$(textline, 13, 6)), 4).Value = Trim(Mid$(textline, 93, 10))
                  Let area_dati(Val(Mid$(textline, 13, 6)), 5).Value = Trim(Mid$(textline, 103, 3))
                  Let area_dati(Val(Mid$(textline, 13, 6)), 6).Value = Trim(Mid$(textline, 106, 9))
                  
                  'rec_caricati = rec_caricati + 1
             Case Is = "TAB04"
             '     Worksheets("Tabella4_5").Select
             '     Set area_dati = Range("Tabella4")
             '     lunghezza = 9
             '     passo = 0
             '     For k = 1 To 1
             '         If area_dati(Val(Mid$(textline, 13, 6)), k).HasFormula Then
             '         Else
             '            Let area_dati(Val(Mid$(textline, 13, 6)), k).Value = Mid$(textline, 19 + passo, lunghezza)
             '         End If
             '         rec_caricati = rec_caricati + 1
             '         passo = passo + 9
             '     Next k
                                    
             Case Is = "TAB05"
                  Worksheets("Tabella4_5").Select
                  Set area_dati = Range("Tabella5")
                  lunghezza = 9
                  passo = 0
                  For k = 1 To 3
                      If area_dati(Val(Mid$(textline, 13, 6)), k).HasFormula Then
                         passo = passo + 9
                      Else
                         Let area_dati(Val(Mid$(textline, 13, 6)), k).Value = Mid$(textline, 19 + passo, lunghezza)
                         'rec_caricati = rec_caricati + 1
                         passo = passo + 9
                      End If
                  Next k
            
             Case Is = "TAB06"
             '     Worksheets("Tabella6_7").Select
             '     Set area_dati = Range("Tabella6")
             '     lunghezza = 9
             '     passo = 0
             '     For k = 1 To 1
             '         If area_dati(Val(Mid$(textline, 13, 6)), k).HasFormula Then
             '         Else
             '            Let area_dati(Val(Mid$(textline, 13, 6)), k) = Mid$(textline, 19 + passo, lunghezza)
             '            rec_caricati = rec_caricati + 1
             '            passo = passo + 9
             '         End If

                      
              '    Next k
            
             Case Is = "TAB07"
                  Worksheets("Tabella6_7").Select
                  Set area_dati = Range("Tabella7")
                  lunghezza = 9
                  passo = 0
                  For k = 1 To 3
                      If area_dati(Val(Mid$(textline, 13, 6)), k).HasFormula Then
                         passo = passo + 9
                      Else
                        Let area_dati(Val(Mid$(textline, 13, 6)), k).Value = Mid$(textline, 19 + passo, lunghezza)
                        'rec_caricati = rec_caricati + 1
                        passo = passo + 9
                      End If
                  Next k
             
             Case Is = "TAB08"
                  Set area_dati = Range("Tabella8")
                  lunghezza = 9
                  passo = 0
                  For k = 1 To 3
                      If area_dati(Val(Mid$(textline, 13, 6)), k).HasFormula Then
                         passo = passo + 9
                      Else
                        Let area_dati(Val(Mid$(textline, 13, 6)), k).Value = Mid$(textline, 19 + passo, lunghezza)
                        'rec_caricati = rec_caricati + 1
                        passo = passo + 9
                      End If
                  Next k
             
             Case Else
                  rec_scartati = rec_scartati + 1
                  GoTo fineloop
      End Select
       

fineloop:

ActiveSheet.Calculate


Wend
       

      If rec_scartati > 0 Then
         MsgBox ("Attenzione sono stati scartati n. " & Format(rec_scartati) & " record")
      Else
         MsgBox ("Caricamento OK sono stati caricati n. " & Format(rec_letti - rec_scartati) & " record")
      End If

fine:
For Each f In ActiveWorkbook.Sheets
     
     Select Case f.Name
    
           Case Is = "Foglio Informativo", "Errori", "Domini"
           Case Else
                Sheets(f.Name).Select
                Range("A1").Select
                Sheets(f.Name).Protect ("g.m.")
     End Select

Next f

Application.StatusBar = "Caricamento terminato"
Application.Wait 2
Application.StatusBar = False
Set sb = Nothing
Set f = Nothing
Set cella = Nothing
Set area_chiavi = Nothing
Set area = Nothing
Sheets("Foglio Informativo").Activate
Application.EnableCancelKey = xlInterrupt
Application.ScreenUpdating = True
Close numerofile
End Sub

Sub mappa_voci()
Debug.Print Now()

Sheets("Servizio").Select
Sheets("Servizio").Unprotect ("g.m.")
Rows("2:65536").ClearContents

'Set p = Union(Range("'Tabella 1'!C18:AB28"), Range("'Tabella 2'!A11:G1010"))
Set p = Range("'Tabella1'!C18:AB28")


Range("A2").Select

For Each cella In p.Cells

    ActiveCell.Offset(0, 0).Value = "'1000" & "00"
    ActiveCell.Offset(0, 1).Value = cella.Address
    ActiveCell.Offset(0, 2).Value = "Tabella 1"
    ActiveCell.Offset(0, 3).Value = cella.HasFormula
    ActiveCell.Offset(0, 4).Value = "'Tabella 1'!" & cella.Address
    ActiveCell.Offset(0, 5).Value = "='Tabella 1'!" & cella.Address
    ActiveCell.Offset(1, 0).Select

Next cella


Set p = Range("'Tabella 2'!A11:G1010")

For Each cella In p.Cells

    ActiveCell.Offset(0, 0).Value = "'1000" & "00"
    ActiveCell.Offset(0, 1).Value = cella.Address
    ActiveCell.Offset(0, 2).Value = "Tabella 2"
    ActiveCell.Offset(0, 3).Value = cella.HasFormula
    ActiveCell.Offset(0, 4).Value = "'Tabella 2'!" & cella.Address
    ActiveCell.Offset(0, 5).Value = "='Tabella 2'!" & cella.Address
    ActiveCell.Offset(1, 0).Select

Next cella


Set p = Range("'Tabella 3'!A11:G1010")

For Each cella In p.Cells

    ActiveCell.Offset(0, 0).Value = "'1000" & "00"
    ActiveCell.Offset(0, 1).Value = cella.Address
    ActiveCell.Offset(0, 2).Value = "Tabella 3"
    ActiveCell.Offset(0, 3).Value = cella.HasFormula
    ActiveCell.Offset(0, 4).Value = "'Tabella 3'!" & cella.Address
    ActiveCell.Offset(0, 5).Value = "='Tabella 3'!" & cella.Address
    ActiveCell.Offset(1, 0).Select

Next cella


Set p = Range("'Tabella 4_5'!B10:E10")

For Each cella In p.Cells

    ActiveCell.Offset(0, 0).Value = "'1000" & "00"
    ActiveCell.Offset(0, 1).Value = cella.Address
    ActiveCell.Offset(0, 2).Value = "Tabella 4_5"
    ActiveCell.Offset(0, 3).Value = cella.HasFormula
    ActiveCell.Offset(0, 4).Value = "'Tabella 4_5'!" & cella.Address
    ActiveCell.Offset(0, 5).Value = "='Tabella 4_5'!" & cella.Address
    ActiveCell.Offset(1, 0).Select

Next cella

Set p = Range("'Tabella 4_5'!B17:D22")

For Each cella In p.Cells

    ActiveCell.Offset(0, 0).Value = "'1000" & "00"
    ActiveCell.Offset(0, 1).Value = cella.Address
    ActiveCell.Offset(0, 2).Value = "Tabella 4_5"
    ActiveCell.Offset(0, 3).Value = cella.HasFormula
    ActiveCell.Offset(0, 4).Value = "'Tabella 4_5'!" & cella.Address
    ActiveCell.Offset(0, 5).Value = "='Tabella 4_5'!" & cella.Address
    ActiveCell.Offset(1, 0).Select

Next cella



Set p = Range("'Tabella 6_7'!B10:E10")

For Each cella In p.Cells

    ActiveCell.Offset(0, 0).Value = "'1000" & "00"
    ActiveCell.Offset(0, 1).Value = cella.Address
    ActiveCell.Offset(0, 2).Value = "Tabella 6_7"
    ActiveCell.Offset(0, 3).Value = cella.HasFormula
    ActiveCell.Offset(0, 4).Value = "'Tabella 6_7'!" & cella.Address
    ActiveCell.Offset(0, 5).Value = "='Tabella 6_7'!" & cella.Address
    ActiveCell.Offset(1, 0).Select

Next cella

Set p = Range("'Tabella 6_7'!B17:D22")

For Each cella In p.Cells

    ActiveCell.Offset(0, 0).Value = "'1000" & "00"
    ActiveCell.Offset(0, 1).Value = cella.Address
    ActiveCell.Offset(0, 2).Value = "Tabella 6_7"
    ActiveCell.Offset(0, 3).Value = cella.HasFormula
    ActiveCell.Offset(0, 4).Value = "'Tabella 6_7'!" & cella.Address
    ActiveCell.Offset(0, 5).Value = "='Tabella 6_7'!" & cella.Address
    ActiveCell.Offset(1, 0).Select

Next cella



Set p = Range("'Tabella 8'!B11:D18")

For Each cella In p.Cells

    ActiveCell.Offset(0, 0).Value = "'1000" & "00"
    ActiveCell.Offset(0, 1).Value = cella.Address
    ActiveCell.Offset(0, 2).Value = "Tabella 8"
    ActiveCell.Offset(0, 3).Value = cella.HasFormula
    ActiveCell.Offset(0, 4).Value = "'Tabella 8'!" & cella.Address
    ActiveCell.Offset(0, 5).Value = "='Tabella 8'!" & cella.Address
    ActiveCell.Offset(1, 0).Select

Next cella

Debug.Print Now()

End Sub
Sub attiva_istruzioni()

Worksheets("istruzioni").Activate
End Sub



Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
Dim p As Range
Dim f As Variant
Dim sb As clsProgressBar, i As Long
Dim stringa As String
Dim savecompag As String
Dim saveindex As Integer

Set sb = New clsProgressBar ' create a new progress bar
Dim ix As Integer


Application.EnableCancelKey = xlDisabled
Application.ScreenUpdating = False

savecompag = Range("c6").Value

If Len(Dir(ActiveWorkbook.Path & "\" & "compag.xls")) = 0 Then
   ThisWorkbook.Sheets("Foglio Informativo").descr_new.Clear
   ThisWorkbook.Sheets("Foglio Informativo").descr_new.AddItem "Elenco delle compagnie nella sezione imprese e intermediari --> controlli e download del sito dell'ISVAP"
   ThisWorkbook.Sheets("Foglio Informativo").descr_new.ListIndex = 0
   MsgBox ("Attenzione nella cartella in cui risiede il presente foglio di lavoro non |fffd| presente il file compag.xls contenente le denominazioni delle imprese assicuratrici: scaricarlo nella sezione imprese e intermediari --> controlli e download del sito dell'ISVAP")
   Application.DisplayAlerts = False
   GoTo fine

Else
   On Error GoTo gesterr
   Workbooks.Open Filename:=ActiveWorkbook.Path & "\" & "compag.xls"
   On Error GoTo 0
      
   trovato = False
   
   For Each n In ActiveWorkbook.Names
       
       If n.Name = "Verifica" Then
          trovato = True
          ActiveWorkbook.Unprotect ("g.m.")
          ActiveWorkbook.ActiveSheet.Unprotect ("g.m.")
          Exit For
       End If
   
   Next n
   
   If trovato = False Then
      
      ThisWorkbook.Sheets("Foglio Informativo").descr_new.Clear
      ThisWorkbook.Sheets("Foglio Informativo").descr_new.AddItem = "Elenco delle compagnie nella sezione imprese e intermediari --> controlli e download del sito dell'ISVAP"
      ThisWorkbook.Sheets("Foglio Informativo").descr_new.ListIndex = 0
      MsgBox ("Attenzione nella cartella in cui risiede il presente foglio di lavoro non |fffd| presente il file compag.xls contenente le denominazioni delle imprese assicuratrici: scaricarlo dalla sezione Imprese e Intermediari --> Controlli e Download del sito dell'ISVAP")
      Application.DisplayAlerts = False
      ActiveWorkbook.Close

      ThisWorkbook.Activate
      ActiveWorkbook.Close
      GoTo fine
   
   End If
   
   Selection.CurrentRegion.Select
   Set p = Selection
   

   ThisWorkbook.Unprotect ("g.m.")
   Sheets("Foglio Informativo").Unprotect ("g.m.")
   

   ThisWorkbook.Activate
   Sheets("Foglio Informativo").Activate
   
   
   With sb
        .ProgressBarFG_RGB = RGB(255, 0, 0) 'set foreground to red
   End With
   saveindex = 0
   With ActiveSheet
   
        .descr_new.Clear
        .descr_new.AddItem " << Fare click per selezionare la compagnia >> "
        .descr_new.List(0, 2) = "   "
        For i = 1 To p.Rows.Count
            
            .descr_new.AddItem p(i, 1).Value
            .descr_new.List(i, 2) = p(i, 2).Value
            If p(i, 1).Value = savecompag Then
               saveindex = i
            End If
            If i Mod 50 = 0 Then
               ix = i
               aggiorna_barra sb, ix, p.Rows.Count, "Caricamento elenco compagnie in corso.."
            End If
        Next i
        
   End With
   
   
   Range("A1").Select
   
   Set p = Nothing
   Set sb = Nothing ' remove the progress bar
   Workbooks("compag.xls").Activate
   ActiveWorkbook.Protect ("g.m.")
   ActiveSheet.Protect ("g.m.")
   
   Application.DisplayAlerts = False
   ActiveWorkbook.Close
   Application.DisplayAlerts = True
   

   ThisWorkbook.Activate
   
   Sheets("Foglio Informativo").Activate
   With ActiveSheet
        .descr_new.ListIndex = saveindex
   End With

   ThisWorkbook.Protect ("g.m.")
   Sheets("Foglio Informativo").Protect ("g.m.")

fine:
   Let Application.ScreenUpdating = True
   Let Application.EnableCancelKey = xlInterrupt
   Set sb = Nothing ' remove the progress bar
  
   Exit Sub
End If
gesterr:
MsgBox ("Si |fffd| verificato l'errore seguente: " & Err.Description)
On Error GoTo 0

End Sub

Attribute VB_Name = "clsProgressBar"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False








' Originally written and copyrighted by David Wiseman.
' Edited by Jim Rech to make it work with Excel 2000.
' Converted to a class module by Ole P. Erlandsen

Option Explicit
'   API wrappers for calling from 16/32 bit VBA
'   portions Copyright David Wiseman 1996
' Type definitions
Private Type RECT16   '8 Bytes
    Left As Integer
    Top As Integer
    Right As Integer
    Bottom As Integer
End Type

Private Type RECT32   '16 Bytes
    Left As Long
    Top As Long
    Right As Long
    Bottom As Long
End Type

Private Type SIZE16   '4 Bytes
    cx As Integer
    cy As Integer
End Type

Private Type SIZE32   '8 Bytes
    cx As Long
    cy As Long
End Type

Private Type LOGFONT16   ' 50 Bytes
    lfHeight As Integer
    lfWidth As Integer
    lfEscapement As Integer
    lfOrientation As Integer
    lfWeight As Integer
    lfItalic As String * 1
    lfUnderline As String * 1
    lfStrikeOut As String * 1
    lfCharSet As String * 1
    lfOutPrecision As String * 1
    lfClipPrecision As String * 1
    lfQuality As String * 1
    lfPitchAndFamily As String * 1
    lfFaceName As String * 32
End Type

Private Type LOGFONT32
    lfHeight As Long
    lfWidth As Long
    lfEscapement As Long
    lfOrientation As Long
    lfWeight As Long
    lfItalic As String * 1
    lfUnderline As String * 1
    lfStrikeOut As String * 1
    lfCharSet As String * 1
    lfOutPrecision As String * 1
    lfClipPrecision As String * 1
    lfQuality As String * 1
    lfPitchAndFamily As String * 1
    lfFaceName As String * 32
End Type

' API declarations
Private Declare Function GetActiveWindow16 Lib "USER" Alias "GetActiveWindow" () As Integer
Private Declare Function GetActiveWindow32 Lib "USER32" Alias "GetActiveWindow" () As Long

Private Declare Function SystemParametersInfo16 Lib "USER" Alias "SystemParametersInfo" (ByVal uAction As Integer, ByVal uParam As Integer, lpvParam As Any, ByVal fuWinIni As Integer) As Integer
Private Declare Function SystemParametersInfo32 Lib "USER32" Alias "SystemParametersInfoA" (ByVal uAction As Long, ByVal uParam As Long, lpvParam As Any, ByVal fuWinIni As Long) As Long

Private Declare Function GetSysColor16 Lib "USER" Alias "GetSysColor" (ByVal nIndex As Integer) As Long
Private Declare Function GetSysColor32 Lib "USER32" Alias "GetSysColor" (ByVal nIndex As Long) As Long

Private Declare Sub GetClientRect16 Lib "USER" Alias "GetClientRect" (ByVal hWnd As Integer, lpRect As RECT16)
Private Declare Function GetClientRect32 Lib "USER32" Alias "GetClientRect" (ByVal hWnd As Long, lpRect As RECT32) As Long

Private Declare Function GetDC16 Lib "USER" Alias "GetDC" (ByVal hWnd As Integer) As Integer
Private Declare Function GetDC32 Lib "USER32" Alias "GetDC" (ByVal hWnd As Long) As Long

Private Declare Function SaveDC16 Lib "GDI" Alias "SaveDC" (ByVal hdc As Integer) As Integer
Private Declare Function SaveDC32 Lib "GDI32" Alias "SaveDC" (ByVal hdc As Long) As Long

Private Declare Function RestoreDC16 Lib "GDI" Alias "RestoreDC" (ByVal hdc As Integer, ByVal nSavedDC As Integer) As Integer
Private Declare Function RestoreDC32 Lib "GDI32" Alias "RestoreDC" (ByVal hdc As Long, ByVal nSavedDC As Long) As Long

Private Declare Function ReleaseDC16 Lib "USER" Alias "ReleaseDC" (ByVal hWnd As Integer, ByVal hdc As Integer) As Integer
Private Declare Function ReleaseDC32 Lib "USER32" Alias "ReleaseDC" (ByVal hWnd As Long, ByVal hdc As Long) As Long

Private Declare Sub InvalidateRect16 Lib "USER" Alias "InvalidateRect" (ByVal hWnd As Integer, lpRect As RECT16, ByVal bErase As Integer)
Private Declare Function InvalidateRect32 Lib "USER32" Alias "InvalidateRect" (ByVal hWnd As Long, lpRect As RECT32, ByVal bErase As Long) As Long

Private Declare Function GetWindow16 Lib "USER" Alias "GetWindow" (ByVal hWnd As Integer, ByVal wCmd As Integer) As Integer
Private Declare Function GetWindow32 Lib "USER32" Alias "GetWindow" (ByVal hWnd As Long, ByVal wCmd As Long) As Long

Private Declare Function GetClassName16 Lib "USER" Alias "GetClassName" (ByVal hWnd As Integer, ByVal className As String, ByVal maxCount As Integer) As Integer
Private Declare Function GetClassName32 Lib "USER32" Alias "GetClassNameA" (ByVal hWnd As Long, ByVal lpClassName As String, ByVal nmaxCount As Long) As Long

Private Declare Function CreateFontIndirect16 Lib "GDI" Alias "CreateFontIndirect" (lpLogFont As LOGFONT16) As Integer
Private Declare Function CreateFontIndirect32 Lib "GDI32" Alias "CreateFontIndirectA" (lpLogFont As LOGFONT32) As Long

Private Declare Function SelectObject16 Lib "GDI" Alias "SelectObject" (ByVal hdc As Integer, ByVal hObject As Integer) As Integer
Private Declare Function SelectObject32 Lib "GDI32" Alias "SelectObject" (ByVal hdc As Long, ByVal hObject As Long) As Long

Private Declare Function DeleteObject16 Lib "GDI" Alias "DeleteObject" (ByVal hObject As Integer) As Integer
Private Declare Function DeleteObject32 Lib "GDI32" Alias "DeleteObject" (ByVal hObject As Long) As Long

Private Declare Function SetBkColor16 Lib "GDI" Alias "SetBkColor" (ByVal hdc As Integer, ByVal RGB As Long) As Long
Private Declare Function SetBkColor32 Lib "GDI32" Alias "SetBkColor" (ByVal hdc As Long, ByVal crColor As Long) As Long

Private Declare Function SetTextColor16 Lib "GDI" Alias "SetTextColor" (ByVal hdc As Integer, ByVal RGB As Long) As Long
Private Declare Function SetTextColor32 Lib "GDI32" Alias "SetTextColor" (ByVal hdc As Long, ByVal crColor As Long) As Long

Private Declare Function GetTextExtentPoint16 Lib "GDI" Alias "GetTextExtentPoint" (ByVal hdc As Integer, ByVal text As String, ByVal lenText As Integer, lpSize As SIZE16) As Integer
Private Declare Function GetTextExtentPoint32 Lib "GDI32" Alias "GetTextExtentPointA" (ByVal hdc As Long, ByVal lpszString As String, ByVal cbString As Long, lpSize As SIZE32) As Long

Private Declare Function CreateSolidBrush16 Lib "GDI" Alias "CreateSolidBrush" (ByVal RGB As Long) As Integer
Private Declare Function CreateSolidBrush32 Lib "GDI32" Alias "CreateSolidBrush" (ByVal crColor As Long) As Long

Private Declare Function PatBlt16 Lib "GDI" Alias "PatBlt" (ByVal hdc As Integer, ByVal x As Integer, ByVal y As Integer, ByVal nWidth As Integer, ByVal nHeight As Integer, ByVal deROP As Long) As Integer
Private Declare Function PatBlt32 Lib "GDI32" Alias "PatBlt" (ByVal hdc As Long, ByVal x As Long, ByVal y As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal dwRop As Long) As Long

Private Declare Function FrameRect16 Lib "USER" Alias "FrameRect" (ByVal hdc As Integer, lpRect As RECT16, ByVal hBrush As Integer) As Integer
Private Declare Function FrameRect32 Lib "USER32" Alias "FrameRect" (ByVal hdc As Long, lpRect As RECT32, ByVal hBrush As Long) As Long

Private Declare Function DrawText16 Lib "USER" Alias "DrawText" (ByVal hdc As Integer, ByVal text As String, ByVal nCount As Integer, lpRect As RECT16, ByVal wFormat As Integer) As Integer
Private Declare Function DrawText32 Lib "USER32" Alias "DrawTextA" (ByVal hdc As Long, ByVal lpStr As String, ByVal nCount As Long, lpRect As RECT32, ByVal wFormat As Long) As Long

' API Constants
Private Const GW_CHILD As Integer = 5
Private Const GW_HWNDFIRST As Integer = 0
Private Const GW_HWNDNEXT As Integer = 2

Private Const DT_SINGLELINE As Integer = &H20
Private Const DT_CENTER As Integer = &H1
Private Const DT_VCENTER As Integer = &H4
Private Const DT_NOPREFIX As Integer = &H800
Private Const DT_NOCLIP As Integer = &H100

Private Const SPI_GETICONTITLELOGFONT As Integer = 31

Private Const PATCOPY As Long = &HF00021

Private Const COLOR_ACTIVECAPTION As Integer = 2
Private Const COLOR_BTNTEXT As Integer = 18
Private Const COLOR_BTNHIGHLIGHT As Integer = 20
Private Const COLOR_BTNSHADOW As Integer = 16
Private Const COLOR_BTNFACE As Integer = 15

Private m_hDeviceContext As Long                 ' handle of the Device Context

Private m_UserStatusBar As Boolean          ' store users preference for status bar view

Private m_numberOfLEDs As Long              ' number of LEDs in the bar
Private m_preMessage As String              ' message before the LED Bar
Private m_postMessage As String             ' message after the LED Bar
Private m_percentComplete As Long           ' the current LED Bar % alight

Private m_hWndXLStatus As Long              ' handle for Excel Status Bar window
Private m_hDCXLStatus As Long               ' handle to device context in that window

Private m_LEDBarShowing As Boolean          ' set when the LED Bar is displayed
Private m_LEDsAlight As Long                ' number of LED blocks displayed now
Private XLBar As RECT32                     ' the bounding rectangle for the Excel status bar window
Private XLBarSize As SIZE32                 ' the extent of the Excel status bar window
Private StatusFont As LOGFONT32             ' structure for font info from system
   
Private ACTIVECAPTION As Long               ' colours from the system
Private BTNTEXT As Long
Private BTNHIGHLIGHT As Long
Private BTNSHADOW As Long
Private BTNFACE As Long

Private RGB_LEDBarBG As Long                ' colours of various parts of LED Bar and text
Private RGB_LEDBarFG As Long
Private RGB_StatusBG As Long
Private RGB_preMessageBG As Long
Private RGB_preMessageFG As Long
Private RGB_postMessageBG As Long
Private RGB_postMessageFG As Long
Private RGB_highlightTopLeft As Long
Private RGB_highlightBottomRight As Long

Private LEDBlock As RECT32                  ' the bounding rectangle for a single LED
Private LEDBlockSize As SIZE32              ' the extent of a single LED block
Private LEDSpace As Long                    ' the space between succesive LEDs
   
Private LEDBar As RECT32                    ' the bounding rectangle for the LED indicator strip
Private LEDBarSize As SIZE32                ' the extent of the LED indicator strip

Private preMessageBox As RECT32             ' bounds of the Message before the LED Bar
Private postMessageBox As RECT32            ' bounds of the Message after the LED Bar

' Initialise what needs it
Private Property Let OpenDC(hWnd As Long)
    m_hDeviceContext = GetDC(hWnd)              ' Get a device context to draw into
    Call SaveDC(m_hDeviceContext)               ' Save state for later
End Property

' Tidy up when we are done
Private Property Let CloseDC(hWnd As Long)
    Call RestoreDC(m_hDeviceContext, -1)        ' Restore the DC state to where we found it
    Call ReleaseDC(hWnd, m_hDeviceContext)      ' Release this DC handle
End Property

' Draw some text to the device context
Private Sub DrawWindowText(cFG As Long, cBG As Long, Font As LOGFONT32, text As String, rC As RECT32)
  Dim hFont As Long
  Dim textSize As SIZE32
  Dim textDrawFlags As Long
  
    hFont = CreateFontIndirect(Font)                    ' Create a font and get a handle on it
    hFont = SelectObject(m_hDeviceContext, hFont)       ' Select new font into the DC
    Call SetBkColor(m_hDeviceContext, cBG)              ' Background colour
    Call SetTextColor(m_hDeviceContext, cFG)            ' Foreground colour

                                                        ' Make room for the text
    Call GetTextExtentPoint(m_hDeviceContext, text, Len(text), textSize)
    rC.Right = rC.Left + textSize.cx
                                                ' Flags for normal text draw mode
    textDrawFlags = DT_SINGLELINE Or DT_CENTER Or _
                    DT_VCENTER Or DT_NOPREFIX Or DT_NOCLIP
    Call DrawText(m_hDeviceContext, text, -1, rC, textDrawFlags)      ' Draw the text

    hFont = SelectObject(m_hDeviceContext, hFont)            ' Select original font into the DC
    Call DeleteObject(hFont)                    ' Delete new font
End Sub

' Clear a rectangle
Private Sub RectangleClear(rC As RECT32, RGB As Long)
  Dim hBrush As Long
  Dim rS As SIZE32
    rS = GetSize(rC)                            ' size of rectangle
    hBrush = CreateSolidBrush(RGB)              ' Create a solid brush to paint rectangle
    hBrush = SelectObject(m_hDeviceContext, hBrush)          ' Select new brush into the DC
    Call PatBlt(m_hDeviceContext, rC.Left, rC.Top, rS.cx, rS.cy, PATCOPY)    ' Do the clear
    hBrush = SelectObject(m_hDeviceContext, hBrush)          ' Select original brush into the DC
    Call DeleteObject(hBrush)                   ' Delete new brush
End Sub

' Frame a rectangle in one colour
Private Sub RectangleFrame(rC As RECT32, RGB As Long)
  Dim hBrush As Long
    hBrush = CreateSolidBrush(RGB)              ' Create a solid brush to paint frame
    Call FrameRect(m_hDeviceContext, rC, hBrush)             ' Do the frame
End Sub

' Frame a rectangle in two colours
Private Sub RectangleHighlight(rC As RECT32, TopLeftRGB As Long, BottomRightRGB As Long)
    Call RectanglePaintTopLeft(rC, TopLeftRGB)
    Call RectanglePaintBottomRight(rC, BottomRightRGB)
End Sub

' Highlight Top and Left sides of a rectangle
Private Sub RectanglePaintTopLeft(rC As RECT32, RGB As Long)
  Dim hBrush As Long
  Dim rS As SIZE32
    rS = GetSize(rC)                            ' size of rectangle
    hBrush = CreateSolidBrush(RGB)              ' Create a solid brush to paint sides
    hBrush = SelectObject(m_hDeviceContext, hBrush)          ' Select new brush into the DC
    Call PatBlt(m_hDeviceContext, rC.Left, rC.Top, 1, rS.cy, PATCOPY)    ' Do the paint up left side
    Call PatBlt(m_hDeviceContext, rC.Left, rC.Top, rS.cx, 1, PATCOPY)    ' Do the paint across top
    hBrush = SelectObject(m_hDeviceContext, hBrush)          ' Select original brush into the DC
    Call DeleteObject(hBrush)                   ' Delete new brush
End Sub

' Highlight Bottom and Right sides of a rectangle
Private Sub RectanglePaintBottomRight(rC As RECT32, RGB As Long)
  Dim hBrush As Long
  Dim rS As SIZE32
    rS = GetSize(rC)                            ' size of rectangle
    hBrush = CreateSolidBrush(RGB)              ' Create a solid brush to paint sides
    hBrush = SelectObject(m_hDeviceContext, hBrush)          ' Select new brush into the DC
    Call PatBlt(m_hDeviceContext, rC.Right, rC.Top, 1, rS.cy + 1, PATCOPY)  ' Do the paint up right side
    Call PatBlt(m_hDeviceContext, rC.Left, rC.Bottom, rS.cx + 1, 1, PATCOPY) ' Do the paint across bottom
    hBrush = SelectObject(m_hDeviceContext, hBrush)          ' Select original brush into the DC
    Call DeleteObject(hBrush)                   ' Delete new brush
End Sub

Private Function GetActiveWindow() As Long
    If Engine32() Then
        GetActiveWindow = GetActiveWindow32()
    Else
        GetActiveWindow = GetActiveWindow16()
    End If
End Function

Private Function IconTitleFont() As LOGFONT32
  Dim fontInfo32 As LOGFONT32
  Dim fontInfo16 As LOGFONT16
    If Engine32() Then
        Call SystemParametersInfo32(SPI_GETICONTITLELOGFONT, Len(fontInfo32), fontInfo32, 0)
    Else
        Call SystemParametersInfo16(SPI_GETICONTITLELOGFONT, Len(fontInfo16), fontInfo16, 0)
        fontInfo32 = ConvertToFontInfo32(fontInfo16)
    End If
    
    IconTitleFont = fontInfo32
    
End Function

Private Function GetSysColor(nIndex As Long) As Long
    If Engine32() Then
        GetSysColor = GetSysColor32(nIndex)
    Else
        GetSysColor = GetSysColor16(nIndex)
    End If
End Function

Private Function ClientRectangle(hWnd As Long) As RECT32
  Dim aRect32 As RECT32
    If Engine32() Then
        Dim stat32 As Long
        stat32 = GetClientRect32(hWnd, aRect32)
    Else
        Dim aRect16 As RECT16
        Call GetClientRect16(hWnd, aRect16)
        aRect32 = ConvertToRect32(aRect16)
    End If
    ClientRectangle = aRect32
End Function

Private Function GetDC(hWnd As Long) As Long
    If Engine32() Then
        GetDC = GetDC32(hWnd)
    Else
        GetDC = GetDC16(hWnd)
    End If
End Function

Private Function SaveDC(hdc As Long) As Long
    If Engine32() Then
        SaveDC = SaveDC32(hdc)
    Else
        SaveDC = SaveDC16(hdc)
    End If
End Function

Private Function RestoreDC(hdc As Long, nSavedDC As Long) As Long
    If Engine32() Then
        RestoreDC = RestoreDC32(hdc, nSavedDC)
    Else
        RestoreDC = RestoreDC16(hdc, nSavedDC)
    End If
End Function

Private Function ReleaseDC(hWnd As Long, hdc As Long) As Long
    If Engine32() Then
        ReleaseDC = ReleaseDC32(hWnd, hdc)
    Else
        ReleaseDC = ReleaseDC16(hWnd, hdc)
    End If
End Function

Private Sub InvalidateRect(hWnd As Long, aRect32 As RECT32, bErase As Long)
    If Engine32() Then
        Dim stat32 As Long
        stat32 = InvalidateRect32(hWnd, aRect32, bErase)
    Else
        Dim aRect16 As RECT16
        aRect16 = ConvertToRect16(aRect32)
        Call InvalidateRect16(hWnd, aRect16, bErase)
    End If
End Sub

Private Function GetWindow(hWnd As Long, wCmd As Long) As Long
    If Engine32() Then
        GetWindow = GetWindow32(hWnd, wCmd)
    Else
        GetWindow = GetWindow16(hWnd, wCmd)
    End If
End Function

Private Function GetClassName(hWnd As Long, lpClassName As String, nmaxCount As Long) As Long
    If Engine32() Then
        GetClassName = GetClassName32(hWnd, lpClassName, nmaxCount)
    Else
        GetClassName = GetClassName16(hWnd, lpClassName, nmaxCount)
    End If
End Function

Private Function CreateFontIndirect(fontInfo32 As LOGFONT32) As Long
    If Engine32() Then
        CreateFontIndirect = CreateFontIndirect32(fontInfo32)
    Else
        Dim fontInfo16 As LOGFONT16
        fontInfo16 = ConvertToFontInfo16(fontInfo32)
        CreateFontIndirect = CreateFontIndirect16(fontInfo16)
    End If
End Function

Private Function SelectObject(hdc As Long, hObject As Long) As Long
    If Engine32() Then
        SelectObject = SelectObject32(hdc, hObject)
    Else
        SelectObject = SelectObject16(hdc, hObject)
    End If
End Function

Private Function DeleteObject(hObject As Long) As Long
    If Engine32() Then
        DeleteObject = DeleteObject32(hObject)
    Else
        DeleteObject = DeleteObject16(hObject)
    End If
End Function

Private Function SetBkColor(hdc As Long, RGB As Long) As Long
    If Engine32() Then
        SetBkColor = SetBkColor32(hdc, RGB)
    Else
        SetBkColor = SetBkColor16(hdc, RGB)
    End If
End Function

Private Function SetTextColor(hdc As Long, RGB As Long) As Long
    If Engine32() Then
        SetTextColor = SetTextColor32(hdc, RGB)
    Else
        SetTextColor = SetTextColor16(hdc, RGB)
    End If
End Function

Private Function GetTextExtentPoint(hdc As Long, text As String, lenText As Long, aSize32 As SIZE32) As Long
    If Engine32() Then
        GetTextExtentPoint = GetTextExtentPoint32(hdc, text, lenText, aSize32)
    Else
        Dim aSize16 As SIZE16
        GetTextExtentPoint = GetTextExtentPoint16(hdc, text, lenText, aSize16)
        aSize32 = ConvertToSize32(aSize16)
    End If
End Function

Private Function CreateSolidBrush(RGB As Long) As Long
    If Engine32() Then
        CreateSolidBrush = CreateSolidBrush32(RGB)
    Else
        CreateSolidBrush = CreateSolidBrush16(RGB)
    End If
End Function

Private Function PatBlt(hdc As Long, x As Long, y As Long, nWidth As Long, nHeight As Long, deROP As Long) As Long
    If Engine32() Then
        PatBlt = PatBlt32(hdc, x, y, nWidth, nHeight, deROP)
    Else
        PatBlt = PatBlt16(hdc, x, y, nWidth, nHeight, deROP)
    End If
End Function

Private Function FrameRect(hdc As Long, aRect32 As RECT32, hBrush As Long) As Long
    If Engine32() Then
        FrameRect = FrameRect32(hdc, aRect32, hBrush)
    Else
        Dim aRect16 As RECT16
        aRect16 = ConvertToRect16(aRect32)
        FrameRect = FrameRect16(hdc, aRect16, hBrush)
    End If
End Function

Private Function DrawText(hdc As Long, text As String, nCount As Long, aRect32 As RECT32, wFormat As Long) As Long
    If Engine32() Then
        DrawText = DrawText32(hdc, text, nCount, aRect32, wFormat)
    Else
        Dim aRect16 As RECT16
        aRect16 = ConvertToRect16(aRect32)
        DrawText = DrawText16(hdc, text, nCount, aRect16, wFormat)
    End If
End Function

' Conversion functions
Private Function ConvertToRect16(aRect32 As RECT32) As RECT16
    ConvertToRect16.Top = aRect32.Top
    ConvertToRect16.Left = aRect32.Left
    ConvertToRect16.Bottom = aRect32.Bottom
    ConvertToRect16.Right = aRect32.Right
End Function

Private Function ConvertToRect32(aRect16 As RECT16) As RECT32
    ConvertToRect32.Top = aRect16.Top
    ConvertToRect32.Left = aRect16.Left
    ConvertToRect32.Bottom = aRect16.Bottom
    ConvertToRect32.Right = aRect16.Right
End Function

Private Function ConvertToSize16(aSize32 As SIZE32) As SIZE16
    ConvertToSize16.cx = aSize32.cx
    ConvertToSize16.cy = aSize32.cy
End Function

Private Function ConvertToSize32(aSize16 As SIZE16) As SIZE32
    ConvertToSize32.cx = aSize16.cx
    ConvertToSize32.cy = aSize16.cy
End Function

Private Function ConvertToFontInfo16(fontInfo32 As LOGFONT32) As LOGFONT16
    ConvertToFontInfo16.lfHeight = fontInfo32.lfHeight
    ConvertToFontInfo16.lfWidth = fontInfo32.lfWidth
    ConvertToFontInfo16.lfEscapement = fontInfo32.lfEscapement
    ConvertToFontInfo16.lfOrientation = fontInfo32.lfOrientation
    ConvertToFontInfo16.lfWeight = fontInfo32.lfWeight
    ConvertToFontInfo16.lfItalic = fontInfo32.lfItalic
    ConvertToFontInfo16.lfUnderline = fontInfo32.lfUnderline
    ConvertToFontInfo16.lfStrikeOut = fontInfo32.lfStrikeOut
    ConvertToFontInfo16.lfCharSet = fontInfo32.lfCharSet
    ConvertToFontInfo16.lfOutPrecision = fontInfo32.lfOutPrecision
    ConvertToFontInfo16.lfClipPrecision = fontInfo32.lfClipPrecision
    ConvertToFontInfo16.lfQuality = fontInfo32.lfQuality
    ConvertToFontInfo16.lfPitchAndFamily = fontInfo32.lfPitchAndFamily
    ConvertToFontInfo16.lfFaceName = fontInfo32.lfFaceName
End Function

Private Function ConvertToFontInfo32(fontInfo16 As LOGFONT16) As LOGFONT32
    ConvertToFontInfo32.lfHeight = fontInfo16.lfHeight
    ConvertToFontInfo32.lfWidth = fontInfo16.lfWidth
    ConvertToFontInfo32.lfEscapement = fontInfo16.lfEscapement
    ConvertToFontInfo32.lfOrientation = fontInfo16.lfOrientation
    ConvertToFontInfo32.lfWeight = fontInfo16.lfWeight
    ConvertToFontInfo32.lfItalic = fontInfo16.lfItalic
    ConvertToFontInfo32.lfUnderline = fontInfo16.lfUnderline
    ConvertToFontInfo32.lfStrikeOut = fontInfo16.lfStrikeOut
    ConvertToFontInfo32.lfCharSet = fontInfo16.lfCharSet
    ConvertToFontInfo32.lfOutPrecision = fontInfo16.lfOutPrecision
    ConvertToFontInfo32.lfClipPrecision = fontInfo16.lfClipPrecision
    ConvertToFontInfo32.lfQuality = fontInfo16.lfQuality
    ConvertToFontInfo32.lfPitchAndFamily = fontInfo16.lfPitchAndFamily
    ConvertToFontInfo32.lfFaceName = fontInfo16.lfFaceName
End Function

Private Function GetSize(rC As RECT32) As SIZE32
    GetSize.cx = rC.Right - rC.Left
    GetSize.cy = rC.Bottom - rC.Top
End Function

' Get the window handle of a child window,
' given the parent handle, and the child class name
Private Function hWndOfChildFromClass(hWndTop As Long, requiredClassName As String) As Long
  Dim lenClassNameBuffer As Long
  Dim lenClassName As Long
  Dim aClassName As String * 7
  Dim hWndNext As Long
  
    lenClassNameBuffer = 7
    
    hWndNext = GetWindow(hWndTop, GW_CHILD)         ' get any child window
    hWndNext = GetWindow(hWndNext, GW_HWNDFIRST)    ' get the first child window
  
    lenClassName = GetClassName(hWndNext, aClassName, lenClassNameBuffer)   ' name of first child
    If (Left$(aClassName, 6) = Left$(requiredClassName, 6)) Then
        hWndOfChildFromClass = hWndNext             ' which could be the one we want
        Exit Function
    End If
    
    While hWndNext <> 0
        hWndNext = GetWindow(hWndNext, GW_HWNDNEXT) ' search all children
        lenClassName = GetClassName(hWndNext, aClassName, lenClassNameBuffer)
        If (Left$(aClassName, 6) = Left$(requiredClassName, 6)) Then
            hWndOfChildFromClass = hWndNext         ' to find the one we want
            Exit Function
        End If
    Wend
    
    hWndOfChildFromClass = hWndNext                 ' end of list, no children
    
End Function

Private Function Engine32() As Boolean
  Static engineIs32 As Boolean
  Static haveTested As Boolean
    If haveTested Then
        Engine32 = engineIs32
        Exit Function
    ElseIf InStr(Application.OperatingSystem, "32") Then
        engineIs32 = True
    End If
    haveTested = True
    Engine32 = engineIs32
End Function
  
' An object which functions as a LED indicator bar on the Excel Status Bar
' Copyright David Wiseman 1994, 1995, 1996
' Do the stuff which can be done once at start of program (behind the scenes)
Sub Initialize(numberOfLEDs As Long)
  Dim hWndParent As Long
  Dim XLBarCentre As Long
      
    m_numberOfLEDs = numberOfLEDs
      
    hWndParent = GetActiveWindow()

'   Get the handle of the EXCEL status bar window
'   MS changed the class name of the status bar, beginning with Excel 97
    'If Application.Version <> "8.0" Then ''David's original code that blocks running on Excel 2000
    If Val(Application.Version) < 8 Then
        m_hWndXLStatus = hWndOfChildFromClass(hWndParent, "EXCEL8")
    Else
        m_hWndXLStatus = hWndOfChildFromClass(hWndParent, "EXCEL4")
    End If
      
    If (m_hWndXLStatus <> 0) Then                   ' Proceed if handle valid
      
        XLBar = ClientRectangle(m_hWndXLStatus) ' Excel status bar rectangle
        XLBarSize.cx = XLBar.Right - XLBar.Left     ' and extents
        XLBarSize.cy = XLBar.Bottom - XLBar.Top
         
                                                    ' Use the same font as the screen icons
        StatusFont = IconTitleFont
                                                    ' But Excel likes it in 10 point!
        StatusFont.lfHeight = (StatusFont.lfHeight * 10) / 8
         
                                                    ' Colours of system components
        ACTIVECAPTION = GetSysColor(COLOR_ACTIVECAPTION)
        BTNTEXT = GetSysColor(COLOR_BTNTEXT)
        BTNHIGHLIGHT = GetSysColor(COLOR_BTNHIGHLIGHT)
        BTNSHADOW = GetSysColor(COLOR_BTNSHADOW)
        BTNFACE = GetSysColor(COLOR_BTNFACE)
         
        RGB_LEDBarBG = BTNFACE                  ' default colours of various parts of LED Bar and text
        RGB_LEDBarFG = ACTIVECAPTION
        RGB_StatusBG = BTNFACE
        RGB_preMessageBG = BTNFACE
        RGB_preMessageFG = BTNTEXT
        RGB_postMessageBG = BTNFACE
        RGB_postMessageFG = BTNTEXT
        RGB_highlightTopLeft = BTNSHADOW
        RGB_highlightBottomRight = BTNHIGHLIGHT
         
        XLBarCentre = XLBar.Top + XLBarSize.cy / 2
         
        LEDBlockSize.cx = XLBarSize.cy / 3          ' each LED is 1/3 height of status bar
        LEDBlockSize.cy = LEDBlockSize.cx           ' and square
        LEDSpace = XLBarSize.cy / 10                ' spacing = 1/10 height of status bar
         
        LEDBlock.Bottom = XLBarCentre + LEDBlockSize.cy / 2     ' bottom of each LED block
        LEDBlock.Top = LEDBlock.Bottom - LEDBlockSize.cy        ' top of each LED block
         
        LEDBar.Bottom = LEDBlock.Bottom + LEDSpace              ' bottom of the LED bar rectangle
        LEDBar.Top = LEDBlock.Bottom - LEDBlockSize.cy - LEDSpace  ' top of the LED bar rectangle
        LEDBarSize.cx = 2 * LEDSpace + numberOfLEDs * (LEDSpace + LEDBlockSize.cx) ' width of the LED bar
        LEDBarSize.cy = LEDSpace + LEDBlockSize.cy + LEDSpace   ' height of the LED bar

        preMessageBox = XLBar                       ' top and bottom = full bar (centered)
        postMessageBox = XLBar

        preMessageBox.Left = XLBar.Left + XLBarSize.cy / 2

    End If

End Sub

' Display a LED Bar with messages etc
Sub Show(PreMessage As String, PostMessage As String, thePctComplete As Long)
    
    m_preMessage = PreMessage
    m_postMessage = PostMessage
        
    If (m_hWndXLStatus <> 0) Then                   ' Proceed if handle valid
        
        m_UserStatusBar = Application.DisplayStatusBar
        Application.DisplayStatusBar = True
        Application.StatusBar = " "
                
        OpenDC = m_hWndXLStatus                 ' Establish a device context object
            
        Call RectangleClear(XLBar, RGB_StatusBG) ' Clear the entire Status Bar area
                                     
        Call DrawWindowText(RGB_preMessageFG, _
                               RGB_preMessageBG, _
                               StatusFont, _
                               m_preMessage, _
                               preMessageBox)    ' Display the pre LED Bar message
                                                    ' (returns dimensions of text box)

                                                    ' How big was the message ?
                                                    ' Sort out the other dimensions required
                                                    ' Place to start the LED bar
        LEDBar.Left = preMessageBox.Right + XLBarSize.cy / 2
        LEDBar.Right = LEDBar.Left + LEDBarSize.cx  ' and a place to end the LED bar

        postMessageBox.Left = LEDBar.Right + XLBarSize.cy / 2  ' place to start the post text

        Call DrawWindowText(RGB_postMessageFG, _
                               RGB_postMessageBG, _
                               StatusFont, _
                               m_postMessage, _
                               postMessageBox)         ' Display the post LED Bar message
                        
        Call RectangleClear(LEDBar, RGB_LEDBarBG) ' Clear the LED Bar area
        
        Call RectanglePaintTopLeft(XLBar, RGB_highlightBottomRight) ' Highlight top left as per usual
                                                             ' Excel status bars
        Call RectangleHighlight(LEDBar, _
                                   RGB_highlightTopLeft, _
                                   RGB_highlightBottomRight) ' Sunken look for LED bar surround
             
        CloseDC = m_hWndXLStatus                  ' Finished with the DC

        m_LEDsAlight = 0
        
        m_LEDBarShowing = True
        
        PercentComplete = thePctComplete                    ' update the LED Bar

    End If

End Sub

' Return the status bar to Excel
Sub Hide()
    If (m_hWndXLStatus <> 0) Then                   ' Proceed if handle valid
        Application.DisplayStatusBar = m_UserStatusBar
        Application.StatusBar = False
        Call InvalidateRect(m_hWndXLStatus, XLBar, True)
        m_LEDBarShowing = False
    End If
End Sub

' Update the message before the LED Bar
Property Let PreMessage(theMessage As String)
    m_preMessage = theMessage
    Call Show(m_preMessage, m_postMessage, m_percentComplete)
End Property

' Update the message after the LED Bar
Property Let PostMessage(theMessage As String)
    m_postMessage = theMessage
    Call Show(m_preMessage, m_postMessage, m_percentComplete)
End Property

' Update the number of LEDs alight
Property Let PercentComplete(thePercent As Long)
  Dim newBlocksDone As Long
  
    m_percentComplete = thePercent
    
    If (m_hWndXLStatus <> 0) And m_LEDBarShowing Then
                    
        If ((m_percentComplete > 0) And (m_percentComplete <= 100)) Then      ' In range for display
            
            newBlocksDone = (m_numberOfLEDs * m_percentComplete) / 100 ' Any change in number
            If (m_LEDsAlight <> newBlocksDone) Then             ' of blocks ?
                
                OpenDC = m_hWndXLStatus                 ' Establish a device context object
                                        
                While (m_LEDsAlight < newBlocksDone)
                    LEDBlock.Left = LEDBar.Left + (LEDBlockSize.cx / 2) + m_LEDsAlight * (LEDBlockSize.cx + LEDSpace)
                    LEDBlock.Right = LEDBlock.Left + LEDBlockSize.cx
                    Call RectangleClear(LEDBlock, RGB_LEDBarFG)
                    m_LEDsAlight = m_LEDsAlight + 1
                Wend

                While (m_LEDsAlight > newBlocksDone)
                    LEDBlock.Left = LEDBar.Left + (LEDBlockSize.cx / 2) + m_LEDsAlight * (LEDBlockSize.cx + LEDSpace)
                    LEDBlock.Right = LEDBlock.Left + LEDBlockSize.cx
                    Call RectangleClear(LEDBlock, RGB_LEDBarBG)
                    m_LEDsAlight = m_LEDsAlight - 1
                Wend
                                     
                CloseDC = m_hWndXLStatus                  ' Finished with the DC
            
            End If
        End If
    End If
End Property

' Change the LED Bar FG colour
Property Let ProgressBarFG_RGB(RGBColour As Long)
    RGB_LEDBarFG = RGBColour
    m_LEDsAlight = 0                                    ' refresh the LEDs in the Bar
    PercentComplete = m_percentComplete
End Property

' Change the LED Bar BG colour
Property Let ProgressBarBG_RGB(RGBColour As Long)
    RGB_LEDBarBG = RGBColour
    m_LEDsAlight = 0                                    ' refresh the LEDs in the Bar
    PercentComplete = m_percentComplete
End Property

' Change the Status area BG colour
Property Let StatusAreaBG_RGB(RGBColour As Long)
    RGB_StatusBG = RGBColour
    Call Show(m_preMessage, m_postMessage, m_percentComplete)
End Property

' Change the preMessage FG colour
Property Let PreMessageFG_RGB(RGBColour As Long)
    RGB_preMessageFG = RGBColour
    Call Show(m_preMessage, m_postMessage, m_percentComplete)
End Property

' Change the preMessage BG colour
Property Let PreMessageBG_RGB(RGBColour As Long)
    RGB_preMessageBG = RGBColour
    Call Show(m_preMessage, m_postMessage, m_percentComplete)
End Property

' Change the postMessage FG colour
Property Let PostMessageFG_RGB(RGBColour As Long)
    RGB_postMessageFG = RGBColour
    Call Show(m_preMessage, m_postMessage, m_percentComplete)
End Property

' Change the postMessage BG colour
Property Let PostMessageBG_RGB(RGBColour As Long)
    RGB_postMessageBG = RGBColour
    Call Show(m_preMessage, m_postMessage, m_percentComplete)
End Property

' Change the TopLeft highlight colour
Property Let HighlightTopLeft_RGB(RGBColour As Long)
    RGB_highlightTopLeft = RGBColour
    Call Show(m_preMessage, m_postMessage, m_percentComplete)
End Property

' Change the BottomRight highlight colour
Property Let HighlightBottomRight_RGB(RGBColour As Long)
    RGB_highlightBottomRight = RGBColour
    Call Show(m_preMessage, m_postMessage, m_percentComplete)
End Property

Private Sub Class_Initialize()
    Initialize 20
    ProgressBarFG_RGB = RGB(0, 0, 0) ' black
    'ProgressBarFG_RGB = RGB(0, 0, 255) ' blue
End Sub

Private Sub Class_Terminate()
    Hide ' hides the progressbar
End Sub

' InQuest injected base64 decoded content
' K+-zc
' K+-zc

INQUEST-PP=macro
