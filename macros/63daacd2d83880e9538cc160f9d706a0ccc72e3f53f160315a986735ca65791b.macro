Attribute VB_Name = "BookingForm"
Attribute VB_Base = "0{33A7D9C7-5EE5-4346-AD15-E85E4ECFF2B7}{77BFB366-8D69-4FEE-B68E-F3C6C67EB7CA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Function Save_Booking()

  For Each cCont In Me.Controls
                
    If TypeName(cCont) = "TextBox" Then
    
      If Len(cCont.Text) <> 0 Then
      
        Save_Booking = True
    
        ' check the length of booking no
        If Not (Len(cCont.Text) = 12) Then
          Save_Booking = False
        End If
        
        If Save_Booking = False Then
      
          MsgBox "The booking number should be 12 characters long.", vbCritical, "Invalid Entry"
                 
          cCont.SetFocus
                   
          Exit Function
        
        End If
        
        'check whether the multiple booking equals to the primary booking
        If Trim(UCase(cCont.Text)) = Main.Range("vCarBook").Value Then
          Save_Booking = False
          MsgBox "Duplicate value. It is the primary booking number.", vbCritical, "Invalid Entry"
          cCont.SetFocus
          Exit Function
        End If
        
        'check any duplicate value
        For cnt = 1 To 300
          If cnt <> CInt(Replace(cCont.Name, "TextBox", "")) Then
            If Multi_Bookings.Range("mBooking" & cnt) = Trim(UCase(cCont.Text)) Then
              Save_Booking = False
              MsgBox "Duplicate value. This booking number has been input.", vbCritical, "Invalid Entry"
              cCont.SetFocus
              Exit Function
            End If
          End If
        Next cnt
         
      End If
        
      Multi_Bookings.Range("mBooking" & Replace(cCont.Name, "TextBox", "")).Value = Trim(UCase(cCont.Text))
              
    End If
    
  Next cCont
  
  Save_Booking = True

End Function


Private Sub BtClose_Click()
  If Save_Booking = False Then
    Exit Sub
  End If

  Unload Me
End Sub

Private Sub UserForm_Initialize()

  'For the scrollbar to work
  With Me.Frame1
  
    .ScrollBars = fmScrollBarsVertical
  
    'Change 20 to suit your needs
   
    .ScrollHeight = .InsideHeight * 20
   
    .ScrollWidth = .InsideWidth * 9
  
  End With
  
  'Place the textbox in the right position
  For Each cCont In Me.Controls
                
    If TypeName(cCont) = "TextBox" Then
        
      cCont.Top = 12 + (18 * (CInt(Replace(cCont.Name, "TextBox", "")) - 1))
      
      cCont.MaxLength = 12
      
      cCont.Text = Multi_Bookings.Range("mBooking" & Replace(cCont.Name, "TextBox", "")).Value
              
    End If
    
  Next cCont
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
 
  If CloseMode = vbFormControlMenu Then
    Cancel = True
    MsgBox "Please use the close button to close the window.", vbInformation
  End If
End Sub

Attribute VB_Name = "Lookup_Cnty_Code"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Lookup_Country"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Lookup_General"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Macros"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Main"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


Sub To_Show_Booking()

  If IsNull(Range("vCarBook")) Or IsEmpty(Range("vCarBook")) Then
    Range("vCarBook").Activate
    MsgBox "Please input Carrier Booking first", vbCritical, "Invalid Entry"
  Else
    BookingForm.Show
  End If
End Sub

Sub Add_VGM_Dtls_Click(p_index As Integer)
  If IsNull(Range("vContainer" & p_index)) Or IsEmpty(Range("vContainer" & p_index)) Then
    Range("vContainer" & p_index).Activate
    MsgBox "Please input Container No first", vbCritical, "Invalid Entry"
  Else
    Lookup_General.Range("conIdx").Value = p_index
    VGMForm.Show
  End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
     
    Application.EnableEvents = False
     
    'Carrier Booking
    If Not Application.Intersect(Target, Range("vCarBook")) Is Nothing Then
      If Not (IsNull(Range("vCarBook")) Or IsEmpty(Range("vCarBook"))) Then
        Range("vCarBook").Value = UCase(Range("vCarBook").Value)
      End If
    End If
    
    'Carrier BL
    If Not Application.Intersect(Target, Range("vCarBL")) Is Nothing Then
      If Not (IsNull(Range("vCarBL")) Or IsEmpty(Range("vCarBL"))) Then
        Range("vCarBL").Value = UCase(Range("vCarBL").Value)
      End If
    End If
    
    If Selection.Columns.Count = 1 And Selection.Rows.Count = 1 Then
      Target = RTrim(Target)
    End If
    
    Application.EnableEvents = True
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
    Cancel = True
End Sub



Attribute VB_Name = "Module_Gen_EDI"
     

  '-------------------------------------------------------------------------------
  ' Define Variables..
  '-------------------------------------------------------------------------------
  
  Dim vVersion  As String 'AS10014
  Dim vCarBook  As String
  Dim vSvrCntr  As String
  Dim vBLType   As String
  Dim vIsuType  As String
  Dim vNoOrgl   As String
  Dim vNoCopy   As String
  Dim vShpRef   As String
  Dim vCarBL    As String
  Dim vBLInstr  As String
  
  Dim vShpName  As String
  Dim vShpEORI As String 'EU10136
  Dim vShpAdr1  As String
  Dim vShpAdr2  As String
  Dim vShpAdr3  As String
  Dim vShpAdr4  As String
  
  Dim vConsgName As String
  Dim vConsgEORI As String 'EU10136
  Dim vConsgAdr1 As String
  Dim vConsgAdr2 As String
  Dim vConsgAdr3 As String
  Dim vConsgAdr4 As String
  
  Dim vNot1Name As String
  Dim vNot1EORI As String 'EU10136
  Dim vNot1Adr1 As String
  Dim vNot1Adr2 As String
  Dim vNot1Adr3 As String
  Dim vNot1Adr4 As String
  
  Dim vNot2Name As String
  Dim vNot2Adr1 As String
  Dim vNot2Adr2 As String
  Dim vNot2Adr3 As String
  Dim vNot2Adr4 As String

  Dim vForAgtName As String
  Dim vForAgtAdr1 As String
  Dim vForAgtAdr2 As String
  Dim vForAgtAdr3 As String
  Dim vForAgtAdr4 As String

  Dim vFrePayName As String
  Dim vFrePayAdr1 As String
  Dim vFrePayAdr2 As String
  Dim vFrePayAdr3 As String
  Dim vFrePayAdr4 As String

  ' Start of LN15047
  Dim vWComp As String
  Dim vWAddr1 As String
  Dim vWAddr2 As String
  Dim vWAddr3 As String
  Dim vWAddr4 As String
  Dim vWContact As String
  Dim vWEmail As String
  Dim vWPhone As String
  Dim vWCertID As String
  Dim vVgmDate As String
  Dim vVgmTime As String
  Dim vVgmLcn As String
  Dim vVgmCnty As String
  Dim Msg, Style, Title, Response
  ' End of LN15047

  Dim vFrePayPlace As String
  Dim vMethodOfPayment As String 'EU10136
  Dim vExpRef      As String
  Dim vContact     As String
  Dim vEmail       As String
  Dim vTelephone   As String
  Dim vFax         As String

  Dim vBrokerName As String   'AS12005
  Dim vPaymentTerms As String 'AS12005
  
  Dim vPreCarriage  As String  'AS12158
  Dim vVessel      As String
  Dim vVoyage      As String
  Dim vPReceipt    As String
  Dim vPLoading    As String
  Dim vPDischarge  As String
  Dim vPDelivery   As String
  
  Dim vWgtUnt      As String
  Dim vMeasureUnit As String
  
  Dim vCntrFound   As Boolean
  Dim vCntrCtr     As Integer
  Dim vSegCtrl      As Integer
  Dim vLen         As Integer
  Dim vLen2        As Integer
  Dim vtmp         As String
  Dim vtmp2         As String
  Dim vtmp3         As String
  Dim vtmp4         As String
  Dim vword         As String
  Dim vGoodDesc1   As String
  Dim vMarksNo1 As String
  Dim vcount As Integer
  Dim vwordlen As Integer
  Dim vcount1 As Integer

  Dim vGenRpt As Boolean 'IN15043063148
  
  '-------------------------------------------------------------------------------
  ' Define Arrays.
  '-------------------------------------------------------------------------------
  Dim vContainer()  As String
  Dim vSeal1No()    As String
  Dim vSeal2No()    As String
  Dim vSeal3No()    As String
  Dim vSeal4No()    As String
  Dim vSeal5No()    As String
  Dim vMarksNo()    As String
  Dim vPkgCnt()     As String
  Dim vPkgTyp()     As String
  Dim vWeight()     As String
  Dim vNetWeight()  As String  'AS10014
  Dim vGoodsDesc()  As String
  Dim vMeasure()    As String
  Dim vHarmonised() As String 'EU10136
  Dim vMultiBook() As String
  Dim vConVgmMet() As String 'LN15047
  Dim vConVGM() As String 'LN15047
  Dim vConVgmDt() As String 'LN15047
  Dim vConVgmTime() As String 'LN15047
  Dim vConVgmLcn() As String 'LN15047
  Dim vConVgmCnty() As String 'LN15047
  Dim vConVgmComp() As String 'LN15047
  Dim vConVgmAddr1() As String 'LN15047
  Dim vConVgmAddr2() As String 'LN15047
  Dim vConVgmAddr3() As String 'LN15047
  Dim vConVgmAddr4() As String 'LN15047
  Dim vConVgmContact() As String 'LN15047
  Dim vConVgmEmail() As String 'LN15047
  Dim vConVgmTel() As String 'LN15047
  Dim vConVgmCert() As String 'LN15047
    
  Dim vRptMarksNo()    As String
  Dim vRptGoodsDesc()  As String
  Dim vRptPkgTyp()     As String
  
Sub clear_variables()
  vVersion = "" 'AS10014
  vCarBook = ""
  vSvrCntr = ""
  vBLType = ""
  vIsuType = ""
  vNoOrgl = ""
  vNoCopy = ""
  vShpRef = ""
  vCarBL = ""
  vBLInstr = ""
  
  vShpName = ""
  vShpEORI = "" 'EU10136
  vShpAdr1 = ""
  vShpAdr2 = ""
  vShpAdr3 = ""
  vShpAdr4 = ""
  
  vConsgName = ""
  vConsgEORI = "" 'EU10136
  vConsgAdr1 = ""
  vConsgAdr2 = ""
  vConsgAdr3 = ""
  vConsgAdr4 = ""
  
  vNot1Name = ""
  vNot1EORI = "" 'EU10136
  vNot1Adr1 = ""
  vNot1Adr2 = ""
  vNot1Adr3 = ""
  vNot1Adr4 = ""
  
  vNot2Name = ""
  vNot2Adr1 = ""
  vNot2Adr2 = ""
  vNot2Adr3 = ""
  vNot2Adr4 = ""

  vForAgtName = ""
  vForAgtAdr1 = ""
  vForAgtAdr2 = ""
  vForAgtAdr3 = ""
  vForAgtAdr4 = ""

  vFrePayName = ""
  vFrePayAdr1 = ""
  vFrePayAdr2 = ""
  vFrePayAdr3 = ""
  vFrePayAdr4 = ""

  ' Start of LN15047
  vWComp = ""
  vWAddr1 = ""
  vWAddr2 = ""
  vWAddr3 = ""
  vWAddr4 = ""
  vWContact = ""
  vWEmail = ""
  vWPhone = ""
  vWCertID = ""
  vVgmDate = ""
  vVgmTime = ""
  vVgmLcn = ""
  vVgmCnty = ""
  ' End of LN15047

  vMethodOfPayment = "" 'EU10136
  vFrePayPlace = ""
  vExpRef = ""
  vContact = ""
  vEmail = ""
  vTelephone = ""
  vFax = ""

  vBrokerName = "" 'AS12005
  vPaymentTerms = "" 'AS12005

  vPreCarriage = "" 'AS12158
  vVessel = ""
  vVoyage = ""
  vPReceipt = ""
  vPLoading = ""
  vPDischarge = ""
  vPDelivery = ""

  vWgtUnt = ""
  vMeasureUnit = ""
  
  vCntrFound = False
  vCntrCtr = 0
  
  ReDim vContainer(300) As String
  ReDim vSeal1No(300) As String
  ReDim vSeal2No(300) As String
  ReDim vSeal3No(300) As String
  ReDim vSeal4No(300) As String
  ReDim vSeal5No(300) As String
  ReDim vMarksNo(300) As String
  ReDim vPkgCnt(300) As String
  ReDim vPkgTyp(300) As String
  ReDim vWeight(300) As String
  ReDim vNetWeight(300) As String  'AS10014
  ReDim vGoodsDesc(300) As String
  ReDim vMeasure(300) As String
  ReDim vHarmonised(300) As String 'EU10136
  ReDim vConVgmMet(300) As String 'LN15047
  ReDim vConVGM(300) As String 'LN15047
  ReDim vConVgmDt(300) As String 'LN15047
  ReDim vConVgmTime(300) As String 'LN15047
  ReDim vConVgmLcn(300) As String 'LN15047
  ReDim vConVgmCnty(300) As String 'LN15047
  ReDim vConVgmComp(300) As String 'LN15047
  ReDim vConVgmAddr1(300) As String 'LN15047
  ReDim vConVgmAddr2(300) As String 'LN15047
  ReDim vConVgmAddr3(300) As String 'LN15047
  ReDim vConVgmAddr4(300) As String 'LN15047
  ReDim vConVgmContact(300) As String 'LN15047
  ReDim vConVgmEmail(300) As String 'LN15047
  ReDim vConVgmTel(300) As String 'LN15047
  ReDim vConVgmCert(300) As String 'LN15047
    
  ReDim vRptMarksNo(300) As String 'AS12158
  ReDim vRptGoodsDesc(300) As String 'AS12158
  ReDim vRptPkgTyp(300) As String 'AS12158
  
  ReDim vMultiBook(300) As String
End Sub

  
Function check_addr_seq(p_field As String, p_field_name As String) As Boolean
  
  For rwIndex1 = 2 To 4
    If Not (IsNull(Range(p_field & rwIndex1)) Or IsEmpty(Range(p_field & rwIndex1))) Then
      For rwIndex2 = 1 To 4
        If rwIndex1 - rwIndex2 > 0 Then
          Set vthiscell = Range(p_field & rwIndex2)
          If IsNull(vthiscell) Or IsEmpty(vthiscell) Then
            vthiscell.Activate
            MsgBox "Please fill in the previous line first.", vbCritical, p_field_name
            check_addr_seq = True
            Exit Function
          End If
        End If
      Next rwIndex2
    End If
  Next rwIndex1
  
End Function

'LN15047 - VGM
Function check_date_format(ByVal p_input As String) As Boolean
    
  Dim year, mth, day As String
  
  If IsNull(p_input) Or IsEmpty(p_input) Or Len(Trim(p_input)) = 0 Then
    check_date_format = True
    Exit Function
  End If
    
  check_date_format = True
    
  ' The input date should be 8 digits
  If Len(p_input) <> 8 Then
        check_date_format = False
        Exit Function
  End If
    
  ' All the 8 characters should be numeric
  For iter = 1 To Len(p_input)
        If IsNumeric(Mid(p_input, iter, 1)) = False Then
            check_date_format = False
            Exit Function
        End If
  Next
    
  year = Left(p_input, 4)
  mth = Mid(p_input, 5, 2)
  day = Right(p_input, 2)
  
  ' Check the date format
  If Val(year) < 1000 Or _
     Val(mth) < 1 Or Val(mth) > 12 Or _
     Val(day) < 1 Or Val(day) > 31 Then
        check_date_format = False
        Exit Function
  End If
    
End Function

'LN15047 - VGM
Function check_time_format(ByVal p_input As String) As Boolean
    
  Dim hour, min As String
  
  If IsNull(p_input) Or IsEmpty(p_input) Or Len(Trim(p_input)) = 0 Then
    check_time_format = True
    Exit Function
  End If
    
  check_time_format = True
  
  ' The input time should be 4 digits
  If Len(p_input) <> 4 Then
        check_time_format = False
        Exit Function
  End If
      
  ' All the 4 characters should be numeric
  For iter = 1 To Len(p_input)
        If IsNumeric(Mid(p_input, iter, 1)) = False Then
            check_time_format = False
            Exit Function
        End If
  Next
      
  hour = Left(p_input, 2)
  min = Right(p_input, 2)
    
  ' Check the time format
  If Val(hour) < 0 Or Val(hour) > 24 Or _
     Val(min) < 0 Or Val(min) > 59 Then
        check_time_format = False
        Exit Function
  End If
    
End Function

Function handle_spec_char(p_input As String, p_type As String) As String

  Dim result As String
  
  If IsNull(p_input) Or IsEmpty(p_input) _
    Or vGenRpt = True Then 'IN15043063148 (No need to add escape characters in SI report)
        handle_spec_char = p_input
        Exit Function
  End If
  
  For counter = 1 To Len(p_input)
  
    If Mid(p_input, counter, 1) = "'" Or _
       Mid(p_input, counter, 1) = "+" Or _
       Mid(p_input, counter, 1) = ":" Or _
       Mid(p_input, counter, 1) = "." Or _
       Mid(p_input, counter, 1) = "?" Then
       
       If Mid(p_input, counter, 1) <> "." Then
         result = result & "?" & Mid(p_input, counter, 1)
       Else
         If p_type = "TEXT" Then
           result = result & Mid(p_input, counter, 1)
         Else
           result = result & "?" & Mid(p_input, counter, 1)
         End If
       End If
    Else
       result = result & Mid(p_input, counter, 1)
    End If
    
  Next
  
  'rlm handle_spec_char = Replace(Replace(result, Chr(10), " "), Chr(13), " ")
    handle_spec_char = result
End Function


Function handle_non_asc_char(p_input As String, p_type As String) As Boolean

  Dim result As String
  
  If IsNull(p_input) Or IsEmpty(p_input) Then
    handle_non_asc_char = p_input
    Exit Function
  End If
  
  handle_non_asc_char = True
  
  For counter = 1 To Len(p_input)
    If Asc(Mid(p_input, counter, 1)) < 0 Or _
       Asc(Mid(p_input, counter, 1)) > 127 Then
        handle_non_asc_char = False
        Exit Function
    End If
  Next
End Function

Function xTrim(p_input As String) As String
  'AS10014 - Delete space and chr(10) at the beginning
  Dim vString As Integer
  
  vStart = 1
  'xTrim = Replace(p_input, Chr(10), " ", 1)
  xTrim = Trim(p_input)
  Do While Mid(xTrim, 1, 1) = Chr(10) Or Mid(xTrim, 1, 1) = " "
    vStart = vStart + 1
    xTrim = Mid(xTrim, vStart)
  Loop
End Function


Sub Create_Edi_File()
  
  Dim vOutString As String
  Dim vOutFile As Integer
  Dim vFileName As String
  Dim CurrentPath As String

  Dim vStart As Integer 'AS10014
  Dim vPos As Integer   'AS10014
  Dim vEle As Integer   'IN15043063148

  Dim vAppVer As String
  Dim vDupCntr As Boolean 'AS12005
  
  Dim v_Len As String
  Dim v_Pre_Len As String
  
  Dim vCopyVGM As String 'LN15047

  vend = "'"
  vDate = Format(Date, "YYYYMMDD")
  vTime = Format(Now, "hhmmss")
  vTime_simple = Left(vTime, 4)
  CurrentPath = CurDir
  
  ' Open output file
  vOutFile = FreeFile
    
  vFileName = Application.GetSaveAsFilename(vCarBook & "-" & vDate & vTime & ".txt", fileFilter:="Text Files (*.txt), *.txt")

  If vFileName = "False" Then Exit Sub

  vSegCtrl = 0
  Open vFileName For Output As vOutFile
  'Header
  'UNA:+.? '
  vOutString = "UNA:+.? " & vend
  Print #vOutFile, vOutString
  
  
  'Vendor ID
  'UNB+UNOB:4+SICUST_ONE+ONEY+<Date in YYYYMMDD>:<Time in HH24MI>+<FileName>'
  vOutString = "UNB+UNOB:4+SICUST_ONE+ONEY+" & vDate & ":" & vTime_simple _
                & "+" & vDate & vTime & vend
  Print #vOutFile, vOutString
  
  vUNH_format = Mid(vCarBook, 5, 6) & Format(Date, "MMDD") & vTime_simple
  'Message Version
  'UNH+1+IFTMIN:D:<Version>:UN:SSH01'
  'vOutString = "UNH+1+IFTMIN:D:" & Range("msg").Value & ":UN:SSH01" & vEnd
  'vOutString = "UNH+" & Mid(vCarBook, 5, 6) & Format(Date, "MMDD") & vTime_simple & "+IFTMIN:D:" & Range("msg").Value & ":UN:SSH01" & vEnd
  'vOutString = "UNH+" & vUNH_format & "+IFTMIN:D:" & Range("msg").Value & ":UN:SSH01" & vEnd
  'vOutString = "UNH+" & vUNH_format & "+IFTMIN:D:" & Range("msg").Value & ":UN:MOL0" & Replace(vVersion, "Version", "", 1) * 10 & vend 'AS10014
  
  vAppVer = "MOL029" 'HK16111590250
  If Right(vVersion, 1) <> Right(vAppVer, 1) Then
    MsgBox "Inconsistancy version number", vbExclamation + vbOKOnly
    End
  End If
  vOutString = "UNH+" & vUNH_format & "+IFTMIN:D:" & Range("msg").Value & ":UN:" & vAppVer & vend  'EU10136

  Print #vOutFile, vOutString
  vSegCtrl = vSegCtrl + 1
  
  'Message Reference
  'BGM+705+<Booking Number-YYYYMMDDHH24MISS>+9'
  vOutString = "BGM+705+" & vCarBook & Format(Date, "MMDD") & Format(Now, "hhmm") & "+9" & vend
  Print #vOutFile, vOutString
  vSegCtrl = vSegCtrl + 1
 
  'Contact
  'CTA+IC+:<C056.3412>'
  vOutString = "CTA+IC+:" & vContact & vend
  Print #vOutFile, vOutString
  vSegCtrl = vSegCtrl + 1
  
  'E-mail address
  'COM+<C076.3148>:EM'
  vOutString = "COM+" & vEmail & ":EM" & vend
  Print #vOutFile, vOutString
  vSegCtrl = vSegCtrl + 1
  
  'Phone
  'COM+<C076.3148>:TE'
  vOutString = "COM+" & vTelephone & ":TE" & vend
  Print #vOutFile, vOutString
  vSegCtrl = vSegCtrl + 1
  
  'Fax
  'COM+<C076.3148>:FX'
  'If Len(vFax) <> 0 Then
  If Len(Trim(vFax)) <> 0 Then
    vOutString = "COM+" & vFax & ":FX" & vend
    Print #vOutFile, vOutString
    vSegCtrl = vSegCtrl + 1
  End If
  
  
  'AS10014 - BL Instruction
  'FTX+BLC+++<C108.4440:1>:<C108.4440:2>:<C108.4440:3>:<C108.4440:4>:<C108.4440:5>'
  
  'Will deleted after AS12158 ......
  'vBLInstr = Trim(Replace(vBLInstr, Application.Rept(Chr(10), 2), Chr(10)))
  'v_Len = Len(vBLInstr)
  'Do While v_Pre_Len <> v_Len
  '   vBLInstr = Trim(Replace(vBLInstr, Application.Rept(Chr(10), 2), Chr(10)))
  '   v_Pre_Len = v_Len
  '   v_Len = Len(vBLInstr)
  'Loop
  'If Left(vBLInstr, 1) = Chr(10) Then
  '  vBLInstr = Mid(vBLInstr, 2)
  'End If
  'If Right(vBLInstr, 1) = Chr(10) Then
  '  vBLInstr = Mid(vBLInstr, 1, Len(vBLInstr) - 1)
  'End If
  
  vBLInstr = Del_Empty_Line(vBLInstr)
  vBLInstr = Trim(Replace(vBLInstr, Application.Rept("?", 70), ""))

  Do While Len(vBLInstr) > 0
     vOutString = ""
     vtmp = ""
     vEle = 0 'IN15043063148
        
     'IN15043063148 start
     Do While vEle < 5
        If Len(vBLInstr) = 0 Then
              Exit Do
        End If
     'IN15043063148 end
        
        vPos = GetPos(Mid(vBLInstr, 1, 70), 70)
    
        vtmp = Replace(Mid(vBLInstr, 1, vPos), Chr(10), "")
        'If Trim(vtmp) = "" Then vtmp = "."
        vBLInstr = Mid(vBLInstr, vPos + 1)
        vtmp = handle_spec_char(vtmp, "TEXT") 'IN15043063148
     
        'vOutString = vtmp 'IN15043063148 commented
    
     'IN15043063148 commented
   '  For j = 1 To 4
   '     If Len(vBLInstr) = 0 Then
   '        Exit For
   '     End If

   '     vPos = GetPos(Mid(vBLInstr, 1, 70), 70)

   '     vtmp = Replace(Mid(vBLInstr, 1, vPos), Chr(10), "")
   '     vBLInstr = Mid(vBLInstr, vPos + 1)
   '     vtmp = handle_spec_char(vtmp, "TEXT") 'IN15043063148
   '     vOutString = vOutString & ":" & vtmp
   '  Next j
        
        'IN15043063148 start
        If Len(vtmp) > 0 Then
                 If Len(vOutString) > 0 Then
                     vOutString = vOutString & ":"
                 End If
                 vOutString = vOutString & vtmp
                 vEle = vEle + 1
             End If
     Loop
         'IN15043063148 end
        
     Print #vOutFile, "FTX+BLC+++" & vOutString & vend
     vSegCtrl = vSegCtrl + 1
  Loop


  
  'BL Type, Issue Type, No of Originals, No of Copies
  'DOC+<C002.1001>:::108+:<C503.1373>++<1220>+<1218>'
  vOutString = "DOC+" & vBLType & ":::108+:" & vIsuType & "++" & vNoCopy & "+" & vNoOrgl & vend
  Print #vOutFile, vOutString
  vSegCtrl = vSegCtrl + 1
   
  Print #vOutFile, vOutString
  vSegCtrl = vSegCtrl + 1
  
  'Shipper 's Reference
  'RFF+CU:<C506.1154>'
  'If Len(vShpRef) <> 0 Then
  If Len(Trim(vShpRef)) <> 0 Then
    vOutString = "RFF+CU:" & vShpRef & vend
    Print #vOutFile, vOutString
    vSegCtrl = vSegCtrl + 1
  End If
  
  'Service Contract Number
  'RFF+CT:<C506.1154>'
  'If Len(vSvrCntr) <> 0 Then
  If Len(Trim(vSvrCntr)) <> 0 Then
    vOutString = "RFF+CT:" & vSvrCntr & vend
    Print #vOutFile, vOutString
    vSegCtrl = vSegCtrl + 1
  End If

  'Export reference'
  'RFF+RF:<C506.1154>'
  'If Len(vExpRef) <> 0 Then
  If Len(Trim(vExpRef)) <> 0 Then
    vOutString = "RFF+RF:" & vExpRef & vend
    Print #vOutFile, vOutString
    vSegCtrl = vSegCtrl + 1
  End If
    
  'Carrier Booking
  'RLM RFF+BN:<C506.1154>'
  'RLM If Len(vCarBook) <> 0 Then
  'RLM   vOutString = "RFF+BN:" & vCarBook & vEnd
  'RLM   Print #vOutFile, vOutString
  'RLM End If
  
  'Handle multiple bookings
  For cnt = 1 To 300
    If Not (IsNull(Multi_Bookings.Range("mBooking" & cnt)) Or _
            IsEmpty(Multi_Bookings.Range("mBooking" & cnt))) Then
            
      vOutString = "RFF+BN:" & Multi_Bookings.Range("mBooking" & cnt).Value & vend
      Print #vOutFile, vOutString
      vSegCtrl = vSegCtrl + 1
    End If
  Next cnt
  
  'Carrier Booking
  'RFF+BN:<C506.1154>'
  If Len(vCarBook) <> 0 Then
    vOutString = "RFF+BN:" & vCarBook & vend
    Print #vOutFile, vOutString
    vSegCtrl = vSegCtrl + 1
  End If
  
  'Carrier BL
  'RFF+BM:<C506.1154>'
  If Trim(vCarBL) <> "" Then
    vOutString = "RFF+BM:" & vCarBL & vend
    Print #vOutFile, vOutString
    vSegCtrl = vSegCtrl + 1
  End If
  
  'Method of Payment -- EU10136
  'CPI+1+<C231.4215>:153:6+<4237>'
  If Trim("vPaymentTerms") <> "" Then
    If Trim(vMethodOfPayment) <> "" Then
       vMethodOfPayment = vMethodOfPayment & ":153:6"
    End If
    vOutString = "CPI+1+" & vMethodOfPayment & "+" & vPaymentTerms & vend 'AS12005
    Print #vOutFile, vOutString
    vSegCtrl = vSegCtrl + 1
  End If

  'Freight Payment Place -- AS12005
  'LOC+57+:::<C517.3224>'
  'If Len(vFrePayPlace) <> 0 Then
  If Len(Trim(vFrePayPlace)) <> 0 Then
    vOutString = "LOC+57+:::" & vFrePayPlace & vend
    Print #vOutFile, vOutString
    vSegCtrl = vSegCtrl + 1
  End If

  'Pre-Carriage AS12158
  'TDT+10+<8028>+1+++++:::<8212>'
  If Trim(vPreCarriage) <> "" Then
     vOutString = "TDT+10++1+++++:::" & vPreCarriage & vend
     Print #vOutFile, vOutString
     vSegCtrl = vSegCtrl + 1
  End If
  
  'Vessel, Voyage
  'TDT+20+<8028>+1+++++:::<8212>'
  vOutString = "TDT+20+" & vVoyage & "+1+++++:::" & vVessel & vend
  Print #vOutFile, vOutString
  vSegCtrl = vSegCtrl + 1
  
  'Place of Receipt
  'LOC+88+:::<C517.3224>'
  vOutString = "LOC+88+:::" & vPReceipt & vend
  Print #vOutFile, vOutString
  vSegCtrl = vSegCtrl + 1
  
  'Port of Loading
  'LOC+9+:::<C517.3224>'
  vOutString = "LOC+9+:::" & vPLoading & vend
  Print #vOutFile, vOutString
  vSegCtrl = vSegCtrl + 1
  
  'Port of Discharge
  vOutString = "LOC+12+:::" & vPDischarge & vend
  Print #vOutFile, vOutString
  vSegCtrl = vSegCtrl + 1
  
  'Place of Delivery
  'LOC+7+:::<C517.3224>'
  vOutString = "LOC+7+:::" & vPDelivery & vend
  Print #vOutFile, vOutString
  vSegCtrl = vSegCtrl + 1
  
  'Shipper Information
  'NAD+CZ+<C082.3039>+:<C058.3124:1>:<C058.3124:2>:<C058.3124:3>:<C058.3124:4>+<C080.3036:1>:<C080.3036:2>:<C080.3036:3>:<C080.3036:4>:<C080.3036:5>'
  'vOutString = "NAD+CZ++" & vShpName & ":" & vShpAdr1
  If Len(Trim(vShpEORI)) <> 0 Then
    vShpEORI = vShpEORI + ":160:6" 'EU10136
  End If
  vOutString = "NAD+CZ+" & Trim(vShpEORI) & "+"
  
  vOutString = vOutString & vShpAdr1 'EU10136
  
  If Len(Trim(vShpAdr2)) <> 0 Then
    vOutString = vOutString & ":" & vShpAdr2
  End If
  
  If Len(Trim(vShpAdr3)) <> 0 Then
    vOutString = vOutString & ":" & vShpAdr3
  End If
  
  If Len(Trim(vShpAdr4)) <> 0 Then
    vOutString = vOutString & ":" & vShpAdr4
  End If
  
  ' Start of TF16001C
  vOutString = vOutString & "+" & Left(vShpName, 35) 'TF16001C
  
  If Len(vShpName) > 35 Then
    vOutString = vOutString & ":" & Mid(vShpName, 36, 35)
    
    If Len(vShpName) > 70 Then
        vOutString = vOutString & ":" & Mid(vShpName, 71, 35)
        
        If Len(vShpName) > 105 Then
            vOutString = vOutString & ":" & Mid(vShpName, 106, 35)
            
            If Len(vShpName) > 140 Then
                vOutString = vOutString & ":" & Mid(vShpName, 141, 35)
            End If
        End If
    End If
  End If
  'End of TF16001C
  
  vOutString = vOutString & vend
  Print #vOutFile, vOutString
  vSegCtrl = vSegCtrl + 1
  
  'Consignee Information
  'NAD+CN+<C082.3039>+<C058.3124:1>:<C058.3124:2>:<C058.3124:3>:<C058.3124:4>+<C080.3036:1>:<C080.3036:2>:<C080.3036:3>:<C080.3036:4>:<C080.3036:5>'
  'vOutString = "NAD+CN++" & vConsgName & ":" & vConsgAdr1
  If Len(Trim(vConsgEORI)) <> 0 Then
    vConsgEORI = vConsgEORI + ":160:6" 'EU10136
  End If
  vOutString = "NAD+CN+" & Trim(vConsgEORI) & "+"
    
  vOutString = vOutString & vConsgAdr1 'EU10136
  
  If Len(Trim(vConsgAdr2)) <> 0 Then
    vOutString = vOutString & ":" & vConsgAdr2
  End If
  
  If Len(Trim(vConsgAdr3)) <> 0 Then
    vOutString = vOutString & ":" & vConsgAdr3
  End If
  
  If Len(Trim(vConsgAdr4)) <> 0 Then
    vOutString = vOutString & ":" & vConsgAdr4
  End If
  
  ' Start of TF16001C
  vOutString = vOutString & "+" & Left(vConsgName, 35)
  
  If Len(vConsgName) > 35 Then
    vOutString = vOutString & ":" & Mid(vConsgName, 36, 35)
    
    If Len(vConsgName) > 70 Then
        vOutString = vOutString & ":" & Mid(vConsgName, 71, 35)
        
        If Len(vConsgName) > 105 Then
            vOutString = vOutString & ":" & Mid(vConsgName, 106, 35)
            
            If Len(vConsgName) > 140 Then
                vOutString = vOutString & ":" & Mid(vConsgName, 141, 35)
            End If
        End If
    End If
  End If
  'End of TF16001C
  
  vOutString = vOutString & vend
  Print #vOutFile, vOutString
  vSegCtrl = vSegCtrl + 1
  
  'Notify 1 Name
  'NAD+N1+<C082.3039>+<C058.3124:1>:<C058.3124:2>:<C058.3124:3>:<C058.3124:4>+<C080.3036:1>:<C080.3036:2>:<C080.3036:3>:<C080.3036:4>:<C080.3036:5>'
  'vOutString = "NAD+N1++" & vNot1Name & ":" & vNot1Adr1
  If Len(Trim(vNot1EORI)) <> 0 Then
    vNot1EORI = vNot1EORI + ":160:6" 'EU10136
  End If
  vOutString = "NAD+N1+" & Trim(vNot1EORI) & "+"
    
  vOutString = vOutString & vNot1Adr1 'EU10136
  
  If Len(Trim(vNot1Adr2)) <> 0 Then
    vOutString = vOutString & ":" & vNot1Adr2
  End If
  
  If Len(Trim(vNot1Adr3)) <> 0 Then
    vOutString = vOutString & ":" & vNot1Adr3
  End If
  
  If Len(Trim(vNot1Adr4)) <> 0 Then
    vOutString = vOutString & ":" & vNot1Adr4
  End If
  
  ' Start of TF16001C
  vOutString = vOutString & "+" & Left(vNot1Name, 35)
  
  If Len(vNot1Name) > 35 Then
    vOutString = vOutString & ":" & Mid(vNot1Name, 36, 35)
    
    If Len(vNot1Name) > 70 Then
        vOutString = vOutString & ":" & Mid(vNot1Name, 71, 35)
        
        If Len(vNot1Name) > 105 Then
            vOutString = vOutString & ":" & Mid(vNot1Name, 106, 35)
            
            If Len(vNot1Name) > 140 Then
                vOutString = vOutString & ":" & Mid(vNot1Name, 141, 35)
            End If
        End If
    End If
  End If
  'End of TF16001C
  
  vOutString = vOutString & vend
  Print #vOutFile, vOutString
  vSegCtrl = vSegCtrl + 1
  
  'Notify 2 Name
  'NAD+N2++<C058.3124:1>:<C058.3124:2>:<C058.3124:3>:<C058.3124:4>+<C080.3036:1>:<C080.3036:2>:<C080.3036:3>:<C080.3036:4>:<C080.3036:5>'
  'If Len(vNot2Name) <> 0 Then
  If Len(Trim(vNot2Name)) <> 0 Then
    
    vOutString = "NAD+N2++"
    
    vOutString = vOutString & vNot2Adr1
    
    If Len(Trim(vNot2Adr2)) <> 0 Then
      vOutString = vOutString & ":" & vNot2Adr2
    End If
    
    If Len(Trim(vNot2Adr3)) <> 0 Then
      vOutString = vOutString & ":" & vNot2Adr3
    End If
    
    If Len(Trim(vNot2Adr4)) <> 0 Then
      vOutString = vOutString & ":" & vNot2Adr4
    End If
      
    ' Start of TF16001C
    vOutString = vOutString & "+" & Left(vNot2Name, 35)
    
    If Len(vNot2Name) > 35 Then
      vOutString = vOutString & ":" & Mid(vNot2Name, 36, 35)
      
      If Len(vNot2Name) > 70 Then
          vOutString = vOutString & ":" & Mid(vNot2Name, 71, 35)
          
          If Len(vNot2Name) > 105 Then
              vOutString = vOutString & ":" & Mid(vNot2Name, 106, 35)
              
              If Len(vNot2Name) > 140 Then
                  vOutString = vOutString & ":" & Mid(vNot2Name, 141, 35)
              End If
          End If
      End If
    End If
    'End of TF16001C
      
    vOutString = vOutString & vend
    Print #vOutFile, vOutString
    vSegCtrl = vSegCtrl + 1
  End If
  
  
  'Forwarding Agent
  'NAD+FW++<C058.3124:1>:<C058.3124:2>:<C058.3124:3>:<C058.3124:4>+<C080.3036:1>:<C080.3036:2>:<C080.3036:3>:<C080.3036:4>:<C080.3036:5>'
  'If Len(vForAgtName) <> 0 Then
  If Len(Trim(vForAgtName)) <> 0 Then
   
    vOutString = "NAD+FW++"
    
    vOutString = vOutString & vForAgtAdr1
    
    If Len(Trim(vForAgtAdr2)) <> 0 Then
      vOutString = vOutString & ":" & vForAgtAdr2
    End If
    
    If Len(Trim(vForAgtAdr3)) <> 0 Then
      vOutString = vOutString & ":" & vForAgtAdr3
    End If
    
    If Len(Trim(vForAgtAdr4)) <> 0 Then
      vOutString = vOutString & ":" & vForAgtAdr4
    End If
    
    ' Start of TF16001C
    vOutString = vOutString & "+" & Left(vForAgtName, 35)
    
    If Len(vForAgtName) > 35 Then
      vOutString = vOutString & ":" & Mid(vForAgtName, 36, 35)
      
      If Len(vForAgtName) > 70 Then
          vOutString = vOutString & ":" & Mid(vForAgtName, 71, 35)
          
          If Len(vForAgtName) > 105 Then
              vOutString = vOutString & ":" & Mid(vForAgtName, 106, 35)
              
              If Len(vForAgtName) > 140 Then
                  vOutString = vOutString & ":" & Mid(vForAgtName, 141, 35)
              End If
          End If
      End If
    End If
    'End of TF16001C
    
    vOutString = vOutString & vend
    Print #vOutFile, vOutString
    vSegCtrl = vSegCtrl + 1
  End If
  
  
  'Freight Payer
  'NAD+FP++<C058.3124:1>:<C058.3124:2>:<C058.3124:3>:<C058.3124:4>+<C080.3036:1>:<C080.3036:2>:<C080.3036:3>:<C080.3036:4>:<C080.3036:5>'
  vOutString = "NAD+FP++"
  
  vOutString = vOutString & vFrePayAdr1
  
  'If Len(vFrePayAdr2) <> 0 Then
  If Len(Trim(vFrePayAdr2)) <> 0 Then
    vOutString = vOutString & ":" & vFrePayAdr2
  End If
  
  'If Len(vFrePayAdr3) <> 0 Then
  If Len(Trim(vFrePayAdr3)) <> 0 Then
    vOutString = vOutString & ":" & vFrePayAdr3
  End If
  
  'If Len(vFrePayAdr4) <> 0 Then
  If Len(Trim(vFrePayAdr4)) <> 0 Then
    vOutString = vOutString & ":" & vFrePayAdr4
  End If
  
  ' Start of TF16001C
  vOutString = vOutString & "+" & Left(vFrePayName, 35)
  
  If Len(vFrePayName) > 35 Then
    vOutString = vOutString & ":" & Mid(vFrePayName, 36, 35)
    
    If Len(vFrePayName) > 70 Then
        vOutString = vOutString & ":" & Mid(vFrePayName, 71, 35)
        
        If Len(vFrePayName) > 105 Then
            vOutString = vOutString & ":" & Mid(vFrePayName, 106, 35)
            
            If Len(vFrePayName) > 140 Then
                vOutString = vOutString & ":" & Mid(vFrePayName, 141, 35)
            End If
        End If
    End If
  End If
  'End of TF16001C
  
  vOutString = vOutString & vend
  Print #vOutFile, vOutString
  vSegCtrl = vSegCtrl + 1
  
  'Broker Name -- AS12005
  'NAD+BO+++<C080.3036:1>'
  If Len(Trim(vBrokerName)) <> 0 Then
    vOutString = "NAD+BO+++" & vBrokerName & vend
    Print #vOutFile, vOutString
    vSegCtrl = vSegCtrl + 1
  End If
  
  For i = 1 To vCntrCtr
  
    'Package count and package type
    'GID+<COUNT>+<C213.7224>:<C213.7065>'
    vOutString = "GID+" & i & "+" & vPkgCnt(i) & ":" & vPkgTyp(i) & vend
    Print #vOutFile, vOutString
    vSegCtrl = vSegCtrl + 1
    
    'Harmonised Commodity -- EU10136
    'PIA+5+<C212.7140>:HS:169:6'
    If IsNull(vHarmonised(i)) Or IsEmpty(vHarmonised(i)) Or Len(Trim(vHarmonised(i))) = 0 Then
    Else
      vOutString = "PIA+5+" & vHarmonised(i) & ":HS:169:6" & vend
      Print #vOutFile, vOutString
      vSegCtrl = vSegCtrl + 1
    End If
    
    'vOutString = Mid(vGoodDesc(i), 1, InStr(vGoodDesc(i), Asc(10)))
    'Print #vOutFile, "FTX" & Asc(Mid(vGoodsDesc(i), 1, 1))
    'Print #vOutFile, "FTX" & Asc(Mid(vGoodsDesc(i), 2, 1))
    'Print #vOutFile, "FTX" & Asc(Mid(vGoodsDesc(i), 3, 1))
    'Print #vOutFile, "FTX" & Asc(Mid(vGoodsDesc(i), 4, 1))
    'Print #vOutFile, "FTX" & Asc(Mid(vGoodsDesc(i), 5, 1))
    
    vGoodDesc1 = Del_Empty_Line(vGoodsDesc(i))
    vGoodDesc1 = Trim(Replace(vGoodDesc1, Application.Rept("?", 70), ""))

    'AS10014
    Do While Len(vGoodDesc1) > 0
       vOutString = ""
       vtmp = ""
       vEle = 0 'IN15043063148
        
     'IN15043063148 start
     Do While vEle < 5
        If Len(vGoodDesc1) = 0 Then
              Exit Do
        End If
     'IN15043063148 end
        
        vPos = GetPos(Mid(vGoodDesc1, 1, 70), 70)
    
        vtmp = Replace(Mid(vGoodDesc1, 1, vPos), Chr(10), "")
        'If Trim(vtmp) = "" Then vtmp = "."
        vGoodDesc1 = Mid(vGoodDesc1, vPos + 1)
        vtmp = handle_spec_char(vtmp, "TEXT") 'IN15043063148
        'vOutString = vtmp 'IN15043063148 commented
    
       'IN15043063148 commented
'       For j = 1 To 4
'          If Len(vGoodDesc1) = 0 Then
'             Exit For
'          End If
'
'          vPos = GetPos(Mid(vGoodDesc1, 1, 70), 70)
'
'          vtmp = Replace(Mid(vGoodDesc1, 1, vPos), Chr(10), "")
'          vGoodDesc1 = Mid(vGoodDesc1, vPos + 1)
'          vtmp = handle_spec_char(vtmp, "TEXT") 'IN15043063148
'          vOutString = vOutString & ":" & vtmp
'       Next j
        
         'IN15043063148 start
          If Len(vtmp) > 0 Then
                 If Len(vOutString) > 0 Then
                     vOutString = vOutString & ":"
                 End If
                 vOutString = vOutString & vtmp
                 vEle = vEle + 1
          End If
      Loop
          'IN15043063148 end
        
       Print #vOutFile, "FTX+AAA+++" & vOutString & vend
       vSegCtrl = vSegCtrl + 1
    Loop


    
    'Print #vOutFile, "FTX+AAA+++" & Mid(vOutString, 1, Len(vOutString) - 1) & vEnd
    vOutString = ""
    'RLM comment
    'Do while Len(vGoodDesc(i), (350 * cnt)
    'Goods Description
    'FTX+AAA+++<C108.4440:1>:<C108.4440:2>:<C108.4440:3>:<C108.4440:4>:<C108.4440:5>'
    'vOutString = "FTX+AAA+++" & Mid(vGoodsDesc(i), 1, 70)
    'For cnt = 1 To 4
     ' If Len(Mid(vGoodsDesc(i), (70 * cnt) + 1, 70)) <> 0 Then
     '   vOutString = vOutString & ":" & Mid(vGoodsDesc(i), (70 * cnt) + 1, 70)
     ' End If
    'Next cnt
    'vOutString = vOutString & vEnd
    'Print #vOutFile, vOutString
    'RLM comment
    
    'Weight and Weight Unit under GID segment
    'MEA+WT+AAE+<C174.6411>:<C174.6314>'
    'vOutString = "MEA+WT+AAE+" & vWgtUnt & ":" & vWeight(i) & vEnd
    vOutString = "MEA+WT+AAE+" & vWgtUnt & ":" & Replace(vWeight(i), ",", ".") & vend
    Print #vOutFile, vOutString
    vSegCtrl = vSegCtrl + 1
    
    'AS10014 - Net Weight and Weight Unit under GID segment
    'MEA+WT+AAL+<C174.6411>:<C174.6314>'
    If IsNull(vNetWeight(i)) Or IsEmpty(vNetWeight(i)) Or Len(Trim(vNetWeight(i))) = 0 Then
      'Don't gernerate MEA segment for empty/null Net Weight
    Else
      vOutString = "MEA+WT+AAL+" & vWgtUnt & ":" & Replace(vNetWeight(i), ",", ".") & vend
      Print #vOutFile, vOutString
      vSegCtrl = vSegCtrl + 1
    End If
    
    'Measurement and Measurement Unit under GID segment
    'MEA+VOL+AAW+<C174.6411>:<C174.6314>'
    'vOutString = "MEA+VOL+AAW+" & vMeasureUnit & ":" & vMeasure(i) & vEnd
    vOutString = "MEA+VOL+AAW+" & vMeasureUnit & ":" & Replace(vMeasure(i), ",", ".") & vend
    Print #vOutFile, vOutString
    vSegCtrl = vSegCtrl + 1
    
    'Marks & Nos
    'PCI++<C210.7120:1>:<C210.7120:2>:<C210.7120:3>:<C210.7120:4>:<C210.7120:5><C210.7120:6>:<C210.7120:7>:<C210.7120:8>:<C210.7120:9>:<C210.7120:10>'
    'rlm If Len(Mid(vMarksNo(i), 1, 35)) <> 0 Then
    'rlm  vOutString = "PCI++" & Mid(vMarksNo(i), 1, 35)
      
    'rlm  For cnt = 1 To 9
    'rlm    If Len(Mid(vMarksNo(i), (35 * cnt) + 1, 35)) <> 0 Then
    'rlm      vOutString = vOutString & ":" & Mid(vMarksNo(i), (35 * cnt) + 1, 35)
    'rlm    End If
    'rlm  Next cnt
    'rlm  vOutString = vOutString & vEnd
    'rlm  Print #vOutFile, vOutString
    'rlm End If
    
    vMarksNo1 = Del_Empty_Line(vMarksNo(i))
    vMarksNo1 = Trim(Replace(vMarksNo1, Application.Rept("?", 35), ""))
    
    Do While Len(vMarksNo1) > 0
       vOutString = ""
       vtmp = ""
       vEle = 0 'IN15043063148
        
      'IN15043063148 start
      Do While vEle < 5
         If Len(vMarksNo1) = 0 Then
               Exit Do
         End If
      'IN15043063148 end
        
       vPos = GetPos(Mid(vMarksNo1, 1, 35), 35)
    
       vtmp = Replace(Mid(vMarksNo1, 1, vPos), Chr(10), "")
       'If Trim(vtmp) = "" Then vtmp = "."
       vMarksNo1 = Mid(vMarksNo1, vPos + 1)
       vtmp = handle_spec_char(vtmp, "TEXT") 'IN15043063148
       'vOutString = vtmp 'IN15043063148 commented
    
       'IN15043063148 commented
'       For j = 1 To 4
'          If Len(vMarksNo1) = 0 Then
'             Exit For
'          End If
'
'          vPos = GetPos(Mid(vMarksNo1, 1, 35), 35)
'
'          vtmp = Replace(Mid(vMarksNo1, 1, vPos), Chr(10), "")
'          vMarksNo1 = Mid(vMarksNo1, vPos + 1)
'          vtmp = handle_spec_char(vtmp, "TEXT") 'IN15043063148
'          vOutString = vOutString & ":" & vtmp
'       Next j
        
        'IN15043063148 start
        If Len(vtmp) > 0 Then
                 If Len(vOutString) > 0 Then
                     vOutString = vOutString & ":"
                 End If
                 vOutString = vOutString & vtmp
                 vEle = vEle + 1
         End If
       Loop
        'IN15043063148 end
        
       Print #vOutFile, "PCI++" & vOutString & vend
       vSegCtrl = vSegCtrl + 1
    Loop



    'SGP segment
    'SGP+<C237.8260>+<7224>'
    'vOutString = "SGP+" & vContainer(i) & "+" & vPkgCnt(i) & vEnd
    vOutString = "SGP+" & vContainer(i) & "+" & Replace(vPkgCnt(i), ",", ".") & vend
    Print #vOutFile, vOutString
    vSegCtrl = vSegCtrl + 1
    
    'Weight and Weight Unit under SGP segment
    'vOutString = "MEA+WT+AAE+" & vWgtUnt & ":" & vWeight(i) & vEnd
    vOutString = "MEA+WT+AAE+" & vWgtUnt & ":" & Replace(vWeight(i), ",", ".") & vend
    Print #vOutFile, vOutString
    vSegCtrl = vSegCtrl + 1
    
    'AS10014 - Net Weight and Weight Unit under SGP segment
    If IsNull(vNetWeight(i)) Or IsEmpty(vNetWeight(i)) Or Len(Trim(vNetWeight(i))) = 0 Then
      'Don't gernerate MEA segment for empty/null Net Weight
    Else
      vOutString = "MEA+WT+AAL+" & vWgtUnt & ":" & Replace(vNetWeight(i), ",", ".") & vend
      Print #vOutFile, vOutString
      vSegCtrl = vSegCtrl + 1
    End If
    
    'Measurement and Measurement Unit under GID segment
    'vOutString = "MEA+VOL+AAW+" & vMeasureUnit & ":" & vMeasure(i) & vEnd
    vOutString = "MEA+VOL+AAW+" & vMeasureUnit & ":" & Replace(vMeasure(i), ",", ".") & vend
    Print #vOutFile, vOutString
    vSegCtrl = vSegCtrl + 1
    
  Next i
  
  For j = 1 To vCntrCtr
      
      vDupCntr = False
      For inner = 1 To j 'AS12005
        If j <> inner And vContainer(j) = vContainer(inner) Then
          vDupCntr = True
        End If
      Next inner
      
      If Not vDupCntr Then
          'Start of LN15047
          If Len(Trim(vConVgmDt(j))) = 0 And Len(Trim(vConVgmTime(j))) = 0 And Len(Trim(vConVgmLcn(j))) = 0 And _
             Len(Trim(vConVgmCnty(j))) = 0 And Len(Trim(vConVgmComp(j))) = 0 And Len(Trim(vConVgmAddr1(j))) = 0 And _
             Len(Trim(vConVgmAddr2(j))) = 0 And Len(Trim(vConVgmAddr3(j))) = 0 And Len(Trim(vConVgmAddr4(j))) = 0 And _
             Len(Trim(vConVgmContact(j))) = 0 And Len(Trim(vConVgmEmail(j))) = 0 And Len(Trim(vConVgmTel(j))) = 0 And Len(Trim(vConVgmCert(j))) = 0 And _
             (Len(Trim(vVgmLcn)) > 0 Or Len(Trim(vVgmCnty)) > 0 Or Len(Trim(vWComp)) > 0 Or Len(Trim(vWCertID)) > 0) Then
                If Len(Trim(vCopyVGM)) = 0 Then
                    Msg = "Do you want to copy the general Weighing Company and VGM details to each container (except the containers which have specific Weighing Company and VGM details)?"
                    Title = "VGM information"
                    Style = vbYesNo + vbQuestion + vbDefaultButton1
                    Response = MsgBox(Msg, Style, Title, Help, Ctxt)
                     
                    If Response = vbYes Then 'copy
                      vCopyVGM = "Y"
                    Else
                      vCopyVGM = "N"
                    End If
                End If
                
                If vCopyVGM = "Y" Then
                    'Copy VGM information from S/I level
                    vConVgmDt(j) = vVgmDate
                    vConVgmTime(j) = vVgmTime
                    vConVgmLcn(j) = vVgmLcn
                    vConVgmCnty(j) = vVgmCnty
                    vConVgmComp(j) = vWComp
                    vConVgmAddr1(j) = vWAddr1
                    vConVgmAddr2(j) = vWAddr2
                    vConVgmAddr3(j) = vWAddr3
                    vConVgmAddr4(j) = vWAddr4
                    vConVgmContact(j) = vWContact
                    vConVgmEmail(j) = vWEmail
                    vConVgmTel(j) = vWPhone
                    vConVgmCert(j) = vWCertID
                End If
          End If
          'End of LN15047
          
          'Container for EQD segment
          'EQD+CN+<C237.8260>'
          vOutString = "EQD+CN+" & vContainer(j) & vend
          Print #vOutFile, vOutString
          vSegCtrl = vSegCtrl + 1

          'Start of LN15047
          'MEA+ABR+:::<VGM method>+<VGM unit>:<VGM value>'
          If Len(Trim(vConVgmMet(j))) > 0 Or Len(Trim(vConVGM(j))) > 0 Then
            vOutString = "MEA+ABR+:::" & vConVgmMet(j) & "+" & vWgtUnt & ":" & vConVGM(j) & vend
              Print #vOutFile, vOutString
              vSegCtrl = vSegCtrl + 1
          End If
          'End of LN15047
          
          'Seal no 1
          vOutString = "SEL+" & vSeal1No(j) & vend
          Print #vOutFile, vOutString
          vSegCtrl = vSegCtrl + 1
      
          'Seal no 2
          If Len(Trim(vSeal2No(j))) > 0 Then
              vOutString = "SEL+" & vSeal2No(j) & vend
              Print #vOutFile, vOutString
              vSegCtrl = vSegCtrl + 1
          End If
          
          'Seal no 3
          If Len(Trim(vSeal3No(j))) > 0 Then
              vOutString = "SEL+" & vSeal3No(j) & vend
              Print #vOutFile, vOutString
              vSegCtrl = vSegCtrl + 1
          End If
          
          'Seal no 4
          If Len(Trim(vSeal4No(j))) > 0 Then
              vOutString = "SEL+" & vSeal4No(j) & vend
              Print #vOutFile, vOutString
              vSegCtrl = vSegCtrl + 1
          End If
          
          'Seal no 5
          If Len(Trim(vSeal5No(j))) > 0 Then
              vOutString = "SEL+" & vSeal5No(j) & vend
              Print #vOutFile, vOutString
              vSegCtrl = vSegCtrl + 1
          End If
          
          'Start of LN15047
          'Certification ID
          If Len(Trim(vConVgmCert(j))) > 0 Then
              vOutString = "FTX+VGM+++" & vConVgmCert(j) & vend
              Print #vOutFile, vOutString
              vSegCtrl = vSegCtrl + 1
          End If
          
          'Weighing company details
          If Len(Trim(vConVgmComp(j))) > 0 Or Len(Trim(vConVgmLcn(j))) > 0 Or Len(Trim(vConVgmCnty(j))) > 0 Then
              vOutString = "NAD+WPA++"
              
              If Len(Trim(vConVgmComp(j))) > 0 Then
                vOutString = vOutString & vConVgmComp(j)
                
                If Len(Trim(vConVgmAddr1(j))) > 0 Then
                    vOutString = vOutString & ":" & vConVgmAddr1(j)
                End If
                
                If Len(Trim(vConVgmAddr2(j))) > 0 Then
                    vOutString = vOutString & ":" & vConVgmAddr2(j)
                End If
                
                If Len(Trim(vConVgmAddr3(j))) > 0 Then
                    vOutString = vOutString & ":" & vConVgmAddr3(j)
                End If
                
                If Len(Trim(vConVgmAddr4(j))) > 0 Then
                    vOutString = vOutString & ":" & vConVgmAddr4(j)
                End If
              End If
              
              If Len(Trim(vConVgmCnty(j))) > 0 Or Len(Trim(vConVgmLcn(j))) > 0 Then
                vOutString = vOutString & "+++" & vConVgmLcn(j)
                
                If Len(Trim(vConVgmCnty(j))) > 0 Then
                    vOutString = vOutString & "+++" & WorksheetFunction.VLookup(vConVgmCnty(j), Range("AllCountryLookup"), 2)
                End If
              End If
              
              vOutString = vOutString & vend
              Print #vOutFile, vOutString
              vSegCtrl = vSegCtrl + 1
          End If
          
          'VGM date and time
          If Len(Trim(vConVgmDt(j))) > 0 And Len(Trim(vConVgmTime(j))) > 0 Then
              vOutString = "DTM+798:" & vConVgmDt(j) & vConVgmTime(j) & ":203" & vend
              Print #vOutFile, vOutString
              vSegCtrl = vSegCtrl + 1
          ElseIf Len(Trim(vConVgmDt(j))) > 0 Then
              vOutString = "DTM+798:" & vConVgmDt(j) & ":102" & vend
              Print #vOutFile, vOutString
              vSegCtrl = vSegCtrl + 1
          End If
          
          If Len(Trim(vConVgmContact(j))) > 0 Then
            'VGM contact
             vOutString = "CTA+BN+:" & vConVgmContact(j) & vend
             Print #vOutFile, vOutString
             vSegCtrl = vSegCtrl + 1
            
            'VGM telephone
            If Len(Trim(vConVgmTel(j))) > 0 Then
                vOutString = "COM+" & vConVgmTel(j) & ":TE" & vend
                Print #vOutFile, vOutString
                vSegCtrl = vSegCtrl + 1
            End If
            
            'VGM email
            If Len(Trim(vConVgmEmail(j))) > 0 Then
                vOutString = "COM+" & vConVgmEmail(j) & ":EM" & vend
                Print #vOutFile, vOutString
                vSegCtrl = vSegCtrl + 1
            End If
          End If
          'End of LN15047
          
       End If
  Next j
  
  vSegCtrl = vSegCtrl + 1 'UNT segment
  'vOutString = "UNT+" & vCntrCtr & "+1" & vEnd
  vOutString = "UNT+" & vSegCtrl & "+" & vUNH_format & vend
  Print #vOutFile, vOutString
    
  vOutString = "UNZ+1+" & vDate & vTime & vend
  Print #vOutFile, vOutString
  
  
  Close #vOutFile
  
  MsgBox "File was generated successfully in " & vFileName, vbInformation
  
End Sub

Sub But_Si_Click()
    vGenRpt = True 'IN15043063148
    To_Gen ("SI")
End Sub
Sub But_Edi_Click()
    vGenRpt = False 'IN15043063148
    To_Gen ("EDI")
End Sub

Sub But_Cre_House_Click()
    
  Msg = "House B/L will be created, do you want to proceed ?"    ' Define message.
  Style = vbYesNo + vbQuestion + vbDefaultButton2    ' Define buttons.
  Title = "Create HOuse B/L"
  Response = MsgBox(Msg, Style, Title, Help, Ctxt)
  
  If Response = vbYes Then    ' User chose Yes.
    Main.Range("vBLType") = "House"
  End If
  
End Sub

Sub To_Gen(p_opt As String)

  clear_variables

  '-------------------------------------------------------------------------------
  ' Value setting and validation
  '-------------------------------------------------------------------------------
  Main.Activate
  
  
  'AS10014 - Version
  vVersion = handle_spec_char(Range("vVersion").Value, "TEXT")
  
  'Carrier Booking
  Set vthiscell = Range("vCarBook")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Carrier Booking", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    'check whether the booking no exists in the multiple booking list
    For cnt = 1 To 300
      If Multi_Bookings.Range("mBooking" & cnt) = vthiscell.Value Then
        vthiscell.Activate
        MsgBox "This booking no also exists in the multiple booking list.", vbCritical, "Invalid Entry"
        Exit Sub
      End If
    Next cnt
  
    vCarBook = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Carrier Booking contain non-ascii character "
        Exit Sub
    End If
  End If
  
  'Service Contract No
  vSvrCntr = handle_spec_char(Range("vSvrCntr").Value, "TEXT")
  If handle_non_asc_char(Range("vSvrCntr").Value, "TEXT") = False Then
    MsgBox "Service Contract No contain non-ascii character "
    Exit Sub
  End If
  
  'BL Type
  Set vthiscell = Range("vBLType")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please choose B/L Type", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vBLType = WorksheetFunction.VLookup(vthiscell.Value, Range("blTypeLookup"), 2)
  End If
  
  'Issue Type
  Set vthiscell = Range("vIsuType")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please choose Issue Type", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vIsuType = WorksheetFunction.VLookup(vthiscell.Value, Range("issueTypeLookup"), 2)
  End If
  
  'No of Originals
  Set vthiscell = Range("vNoOrgl")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Then
    vNoOrgl = "0"
    'rlm vThisCell.Activate
    ' rlm MsgBox "Please input No. of Originals", vbCritical, "Invalid Entry"
    'rlm Exit Sub
  Else
    vNoOrgl = vthiscell.Value
  End If
  
  'No of Copies
  Set vthiscell = Range("vNoCopy")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Then
    vNoCopy = "0"
    'rlm vThisCell.Activate
    'rlm MsgBox "Please input No. of Copies", vbCritical, "Invalid Entry"
    'rlm Exit Sub
  Else
    vNoCopy = vthiscell.Value
  End If
      
  'Shipper Reference
  vShpRef = handle_spec_char(Range("vShpRef").Value, "TEXT")
  If handle_non_asc_char(Range("vShpRef").Value, "TEXT") = False Then
    MsgBox "Shipper Reference contain non-ascii character "
    Exit Sub
  End If
  
  'BL Instruction
  'IN15043063148 Start
  ' vBLInstr = handle_spec_char(Range("vBLInstr").Value, "TEXT")
  vBLInstr = Range("vBLInstr").Value
  'IN15043063148 End

  If handle_non_asc_char(Range("vBLInstr").Value, "TEXT") = False Then
    MsgBox "BL Instruction contain non-ascii character "
    Exit Sub
  End If
  
  'Carrier BL
  vCarBL = handle_spec_char(Range("vCarBL").Value, "TEXT")
  If handle_non_asc_char(Range("vCarBL").Value, "TEXT") = False Then
    MsgBox "Carrier BL contain non-ascii character "
    Exit Sub
  End If
    
  'Shipper Name
  Set vthiscell = Range("vShpName")
  
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Shipper Name", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vShpName = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Shipper Name contain non-ascii character "
        Exit Sub
    End If
  End If
  
  'Shipper EORI Ref -- EU10136
  vShpEORI = handle_spec_char(Range("vShpEORIRef").Value, "TEXT")
  If handle_non_asc_char(Range("vShpEORIRef").Value, "TEXT") = False Then
    MsgBox "EORI Reference for Shipper contain non-ascii character "
    Exit Sub
  End If
  
  'Shipper Address
  If check_addr_seq("vShpAdr", "Shipper Address") = True Then
    Exit Sub
  End If
  
  Set vthiscell = Range("vShpAdr1")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Shipper Address", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vShpAdr1 = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Shipper Address 1 contain non-ascii character "
        Exit Sub
    End If
  End If
  
  vShpAdr2 = handle_spec_char(Range("vShpAdr2").Value, "TEXT")
  If handle_non_asc_char(Range("vShpAdr2").Value, "TEXT") = False Then
    MsgBox "Shipper Address 2 contain non-ascii character "
    Exit Sub
  End If
  vShpAdr3 = handle_spec_char(Range("vShpAdr3").Value, "TEXT")
  If handle_non_asc_char(Range("vShpAdr3").Value, "TEXT") = False Then
    MsgBox "Shipper Address 3 contain non-ascii character "
    Exit Sub
  End If
  vShpAdr4 = handle_spec_char(Range("vShpAdr4").Value, "TEXT")
  If handle_non_asc_char(Range("vShpAdr4").Value, "TEXT") = False Then
    MsgBox "Shipper Address 4 contain non-ascii character "
    Exit Sub
  End If
  
  'Consignee Name
  Set vthiscell = Range("vConsgName")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Consignee Name", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vConsgName = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Consignee Name contain non-ascii character "
        Exit Sub
    End If
  End If
  
  'Consignee EORI Ref -- EU10136
  vConsgEORI = handle_spec_char(Range("vConsgEORIRef").Value, "TEXT")
  If handle_non_asc_char(Range("vConsgEORIRef").Value, "TEXT") = False Then
    MsgBox "EORI Reference for Consignee contain non-ascii character "
    Exit Sub
  End If
  
  'Consignee Address
  If check_addr_seq("vConsgAdr", "Consignee Address") = True Then
    Exit Sub
  End If
  
  Set vthiscell = Range("vConsgAdr1")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Consignee Address", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vConsgAdr1 = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Consignee Address 1 contain non-ascii character "
        Exit Sub
    End If
  End If
  
  vConsgAdr2 = handle_spec_char(Range("vConsgAdr2").Value, "TEXT")
  If handle_non_asc_char(Range("vConsgAdr2").Value, "TEXT") = False Then
    MsgBox "Consignee Address 2 contain non-ascii character "
    Exit Sub
  End If
  vConsgAdr3 = handle_spec_char(Range("vConsgAdr3").Value, "TEXT")
  If handle_non_asc_char(Range("vConsgAdr3").Value, "TEXT") = False Then
    MsgBox "Consignee Address 3 contain non-ascii character "
    Exit Sub
  End If
  vConsgAdr4 = handle_spec_char(Range("vConsgAdr4").Value, "TEXT")
  If handle_non_asc_char(Range("vConsgAdr4").Value, "TEXT") = False Then
    MsgBox "Consignee Address 4 contain non-ascii character "
    Exit Sub
  End If
  
  'Notify Party #1 Name
  Set vthiscell = Range("vNot1Name")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Notify Party #1 Name", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vNot1Name = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Notify Party #1 Name contain non-ascii character "
        Exit Sub
    End If
  End If
  
  'Notify Party #1 EORI Ref -- EU10136
  vNot1EORI = handle_spec_char(Range("vNot1EORIRef").Value, "TEXT")
  If handle_non_asc_char(Range("vNot1EORIRef").Value, "TEXT") = False Then
    MsgBox "EORI Reference for Notify Party #1 contain non-ascii character "
    Exit Sub
  End If
  
  'Notify Party #1 Address 1
  If check_addr_seq("vNot1Adr", "Notify Party #1 Address") = True Then
    Exit Sub
  End If
  
  Set vthiscell = Range("vNot1Adr1")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Notify Party #1 Address", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vNot1Adr1 = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Notify Party #1 Address 1 contain non-ascii character "
        Exit Sub
    End If
  End If
  
  vNot1Adr2 = handle_spec_char(Range("vNot1Adr2").Value, "TEXT")
  If handle_non_asc_char(Range("vNot1Adr2").Value, "TEXT") = False Then
    MsgBox "Notify Party #1 Address 2 contain non-ascii character "
    Exit Sub
  End If
  vNot1Adr3 = handle_spec_char(Range("vNot1Adr3").Value, "TEXT")
  If handle_non_asc_char(Range("vNot1Adr3").Value, "TEXT") = False Then
    MsgBox "Notify Party #1 Address 3 contain non-ascii character "
    Exit Sub
  End If
  vNot1Adr4 = handle_spec_char(Range("vNot1Adr4").Value, "TEXT")
  If handle_non_asc_char(Range("vNot1Adr4").Value, "TEXT") = False Then
    MsgBox "Notify Party #1 Address 4 contain non-ascii character "
    Exit Sub
  End If
  
  'Notify Party #2 Name
  vNot2Name = handle_spec_char(Range("vNot2Name").Value, "TEXT")
  If handle_non_asc_char(Range("vNot2Name").Value, "TEXT") = False Then
    MsgBox "Notify Party #2 Name contain non-ascii character "
    Exit Sub
  End If
  
  vNot2Adr1 = handle_spec_char(Range("vNot2Adr1").Value, "TEXT")
  If handle_non_asc_char(Range("vNot2Adr1").Value, "TEXT") = False Then
    MsgBox "Notify Party #2 Address 1 contain non-ascii character "
    Exit Sub
  End If
  vNot2Adr2 = handle_spec_char(Range("vNot2Adr2").Value, "TEXT")
  If handle_non_asc_char(Range("vNot2Adr2").Value, "TEXT") = False Then
    MsgBox "Notify Party #2 Address 2 contain non-ascii character "
    Exit Sub
  End If
  vNot2Adr3 = handle_spec_char(Range("vNot2Adr3").Value, "TEXT")
  If handle_non_asc_char(Range("vNot2Adr3").Value, "TEXT") = False Then
    MsgBox "Notify Party #2 Address 3 contain non-ascii character "
    Exit Sub
  End If
  vNot2Adr4 = handle_spec_char(Range("vNot2Adr4").Value, "TEXT")
  If handle_non_asc_char(Range("vNot2Adr4").Value, "TEXT") = False Then
    MsgBox "Notify Party #2 Address 4 contain non-ascii character "
    Exit Sub
  End If
  
  If check_addr_seq("vNot2Adr", "Notify Party #2 Address") = True Then
    Exit Sub
  End If
  
  'address needs to be input if the name is not null
  'If Not (IsNull(Range("vNot2Name")) Or IsEmpty(Range("vNot2Name"))) Then
  Set vthiscell = Range("vNot2Name")
  If Not (IsNull(Range("vNot2Name")) Or IsEmpty(Range("vNot2Name")) Or Len(Trim(Range("vNot2Name"))) = 0) Then
    If IsNull(Range("vNot2Adr1")) Or IsEmpty(Range("vNot2Adr1")) Or Len(Trim(Range("vNot2Adr1"))) = 0 Then
      Range("vNot2Adr1").Activate
      MsgBox "Please input Notify Party #2 Address if the name exists", vbCritical, "Invalid Entry"
      Exit Sub
    End If
  End If
  
  'name needs to be input if the address is not null
  If Not (IsNull(Range("vNot2Adr1")) Or IsEmpty(Range("vNot2Adr1")) Or Len(Trim(Range("vNot2Adr1"))) = 0) Then
    If IsNull(Range("vNot2Name")) Or IsEmpty(Range("vNot2Name")) Or Len(Trim(Range("vNot2Name"))) = 0 Then
      Range("vNot2Name").Activate
      MsgBox "Please input Notify Party #2 Name if the address exists", vbCritical, "Invalid Entry"
      Exit Sub
    End If
  End If
  
  vForAgtName = handle_spec_char(Range("vForAgtName").Value, "TEXT")
  If handle_non_asc_char(Range("vForAgtName").Value, "TEXT") = False Then
    MsgBox "Forwarder Name contain non-ascii character "
    Exit Sub
  End If
  vForAgtAdr1 = handle_spec_char(Range("vForAgtAdr1").Value, "TEXT")
  If handle_non_asc_char(Range("vForAgtAdr1").Value, "TEXT") = False Then
    MsgBox "Forwarder Address 1 contain non-ascii character "
    Exit Sub
  End If
  vForAgtAdr2 = handle_spec_char(Range("vForAgtAdr2").Value, "TEXT")
  If handle_non_asc_char(Range("vForAgtAdr2").Value, "TEXT") = False Then
    MsgBox "Forwarder Address 2 contain non-ascii character "
    Exit Sub
  End If
  vForAgtAdr3 = handle_spec_char(Range("vForAgtAdr3").Value, "TEXT")
  If handle_non_asc_char(Range("vForAgtAdr3").Value, "TEXT") = False Then
    MsgBox "Forwarder Address 3 contain non-ascii character "
    Exit Sub
  End If
  vForAgtAdr4 = handle_spec_char(Range("vForAgtAdr4").Value, "TEXT")
  If handle_non_asc_char(Range("vForAgtAdr4").Value, "TEXT") = False Then
    MsgBox "Forwarder Address 4 contain non-ascii character "
    Exit Sub
  End If
  
  If check_addr_seq("vForAgtAdr", "Forwarding Agent Address") = True Then
    Exit Sub
  End If
  
  'address needs to be input if the name is not null
  If Not (IsNull(Range("vForAgtName")) Or IsEmpty(Range("vForAgtName")) Or Len(Trim(Range("vForAgtName"))) = 0) Then
    If IsNull(Range("vForAgtAdr1")) Or IsEmpty(Range("vForAgtAdr1")) Or Len(Trim(Range("vForAgtAdr1"))) = 0 Then
      Range("vForAgtAdr1").Activate
      MsgBox "Please input Forwarding Agent Address if the name exists", vbCritical, "Invalid Entry"
      Exit Sub
    End If
  End If
  
  'name needs to be input if the address is not null
  If Not (IsNull(Range("vForAgtAdr1")) Or IsEmpty(Range("vForAgtAdr1")) Or Len(Trim(Range("vForAgtAdr1"))) = 0) Then
    If IsNull(Range("vForAgtName")) Or IsEmpty(Range("vForAgtName")) Or Len(Trim(Range("vForAgtName"))) = 0 Then
      Range("vForAgtName").Activate
      MsgBox "Please input Forwarding Agent Name if the address exists", vbCritical, "Invalid Entry"
      Exit Sub
    End If
  End If
  
  'Freight Payer Name
  Set vthiscell = Range("vFrePayName")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Freight Payer Name", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vFrePayName = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Freight Payer Name contain non-ascii character "
        Exit Sub
    End If
  End If
  
  'Freight Payer Address
  If check_addr_seq("vFrePayAdr", "Freight Payer Address") = True Then
    Exit Sub
  End If
  
  Set vthiscell = Range("vFrePayAdr1")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Freight Payer Address", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vFrePayAdr1 = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Freight Payer Address 1 contain non-ascii character "
        Exit Sub
    End If
  End If
  
  vFrePayAdr2 = handle_spec_char(Range("vFrePayAdr2").Value, "TEXT")
  If handle_non_asc_char(Range("vFrePayAdr2").Value, "TEXT") = False Then
    MsgBox "Freight Payer Address 2 contain non-ascii character "
    Exit Sub
  End If
  vFrePayAdr3 = handle_spec_char(Range("vFrePayAdr3").Value, "TEXT")
  If handle_non_asc_char(Range("vFrePayAdr3").Value, "TEXT") = False Then
    MsgBox "Freight Payer Address 3 contain non-ascii character "
    Exit Sub
  End If
  vFrePayAdr4 = handle_spec_char(Range("vFrePayAdr4").Value, "TEXT")
  If handle_non_asc_char(Range("vFrePayAdr4").Value, "TEXT") = False Then
    MsgBox "Freight Payer Address 4 contain non-ascii character "
    Exit Sub
  End If
  
  'Start of LN15047
  'Weighing Company
  vWComp = handle_spec_char(Range("vWComp").Value, "TEXT")
  If handle_non_asc_char(Range("vWComp").Value, "TEXT") = False Then
    MsgBox "Weighing Company Name contains non-ascii character "
    Exit Sub
  End If
  
  vWAddr1 = handle_spec_char(Range("vWAddr1").Value, "TEXT")
  If handle_non_asc_char(Range("vWAddr1").Value, "TEXT") = False Then
    MsgBox "Weighing Company Address 1 contains non-ascii character "
    Exit Sub
  End If
  
  vWAddr2 = handle_spec_char(Range("vWAddr2").Value, "TEXT")
  If handle_non_asc_char(Range("vWAddr2").Value, "TEXT") = False Then
    MsgBox "Weighing Company Address 2 contains non-ascii character "
    Exit Sub
  End If
  
  vWAddr3 = handle_spec_char(Range("vWAddr3").Value, "TEXT")
  If handle_non_asc_char(Range("vWAddr3").Value, "TEXT") = False Then
    MsgBox "Weighing Company Address 3 contains non-ascii character "
    Exit Sub
  End If
  
  vWAddr4 = handle_spec_char(Range("vWAddr4").Value, "TEXT")
  If handle_non_asc_char(Range("vWAddr4").Value, "TEXT") = False Then
    MsgBox "Weighing Company Address 4 contains non-ascii character "
    Exit Sub
  End If
  
  If check_addr_seq("vWAddr", "Weighing Company Address") = True Then
    Exit Sub
  End If
  
  'name needs to be input if the address is not null
  If Len(Trim(Range("vWAddr1"))) > 0 Then
    If IsNull(Range("vWComp")) Or IsEmpty(Range("vWComp")) Or Len(Trim(Range("vWComp"))) = 0 Then
      Range("vWComp").Activate
      MsgBox "Please input Weighing Company Name if the address exists", vbCritical, "Invalid Entry"
      Exit Sub
    End If
  End If
  
  'name needs to be input if the VGM date, time, contact, telephone or email is not null
  If Len(Trim(Range("vVgmDate"))) > 0 Or _
     Len(Trim(Range("vVgmTime"))) > 0 Or _
     Len(Trim(Range("vWContact"))) > 0 Or _
     Len(Trim(Range("vWPhone"))) > 0 Or _
     Len(Trim(Range("vWEmail"))) > 0 Then
    If IsNull(Range("vWComp")) Or IsEmpty(Range("vWComp")) Or Len(Trim(Range("vWComp"))) = 0 Then
      Range("vWComp").Activate
      MsgBox "Please input Weighing Company Name if the VGM date, time, contact, telephone or email exists", vbCritical, "Invalid Entry"
      Exit Sub
    End If
  End If
  
  vWContact = handle_spec_char(Range("vWContact").Value, "TEXT")
  If handle_non_asc_char(Range("vWContact").Value, "TEXT") = False Then
    MsgBox "Weighing Company Contact contains non-ascii character "
    Exit Sub
  End If
  
  Set vthiscell = Range("vWEmail")
  If Len(vthiscell.Value) > 0 And _
        (InStr(1, vthiscell.Value, "@") <= 1 Or _
          InStrRev(vthiscell.Value, ".") - 1 <= InStr(1, vthiscell.Value, "@") Or _
          InStrRev(vthiscell.Value, ".") = Len(Trim(vthiscell.Value))) Then 'a@a.a
      vthiscell.Activate
      MsgBox "The Weighing Company Email Address is invalid.", vbCritical, "Invalid Entry"
      Exit Sub
  End If
  
  vWEmail = handle_spec_char(Range("vWEmail").Value, "TEXT")
  If handle_non_asc_char(Range("vWEmail").Value, "TEXT") = False Then
    MsgBox "Weighing Company Email Address contains non-ascii character "
    Exit Sub
  End If
  
  vWPhone = handle_spec_char(Range("vWPhone").Value, "TEXT")
  If handle_non_asc_char(Range("vWPhone").Value, "TEXT") = False Then
    MsgBox "Weighing Company Telephone contains non-ascii character "
    Exit Sub
  End If
  
  vWCertID = handle_spec_char(Range("vWCertID").Value, "TEXT")
  If handle_non_asc_char(Range("vWCertID").Value, "TEXT") = False Then
    MsgBox "Weighing Company Certification ID contains non-ascii character "
    Exit Sub
  End If
  'End of LN15047
  
  'Freight Payment Place
  Set vthiscell = Range("vFrePayPlace")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Freight Payment Place", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vFrePayPlace = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Freight Payment Place contain non-ascii character "
        Exit Sub
    End If
  End If
  
  'Method of Payment -- EU10136
  Set vthiscell = Range("vMethodOfPayment")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
  Else
    vMethodOfPayment = WorksheetFunction.VLookup(vthiscell.Value, Range("MethodOfPaymentLookup"), 2)
  End If
  
  'Export Reference
  vExpRef = handle_spec_char(Range("vExpRef").Value, "TEXT")
  If handle_non_asc_char(Range("vExpRef").Value, "TEXT") = False Then
    MsgBox "Export Reference contain non-ascii character "
    Exit Sub
  End If
    
  'Contact
  Set vthiscell = Range("vContact")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Contact", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vContact = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Contact contain non-ascii character "
        Exit Sub
    End If
  End If
   
  'Start of LN15047
  'weighing company contact needs to be input if the telephone or email is not null
  If Len(Trim(Range("vWPhone"))) > 0 Or _
     Len(Trim(Range("vWEmail"))) > 0 Then
    If IsNull(Range("vWContact")) Or IsEmpty(Range("vWContact")) Or Len(Trim(Range("vWContact"))) = 0 Then
      Range("vWContact").Activate
      MsgBox "Please input Weighing Company Contact if the weighing company telephone or email exists", vbCritical, "Invalid Entry"
      Exit Sub
    End If
  End If
  'End of LN15047
   
  'Email Address
  Set vthiscell = Range("vEmail")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then 'HK12020813103
    vthiscell.Activate
    MsgBox "Please input Email", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    If InStr(1, vthiscell.Value, "@") <= 1 Or _
          InStrRev(vthiscell.Value, ".") - 1 <= InStr(1, vthiscell.Value, "@") Or _
          InStrRev(vthiscell.Value, ".") = Len(Trim(vthiscell.Value)) Then 'a@a.a
      vthiscell.Activate
      MsgBox "Invalid email address", vbCritical, "Invalid Entry"
      Exit Sub
    End If
  End If

  vEmail = handle_spec_char(vthiscell.Value, "TEXT")
  If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
      MsgBox "Email Address contain non-ascii character "
      Exit Sub
  End If
    
  'Telephone
  Set vthiscell = Range("vTelephone")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Telephone", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vTelephone = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Telephone contain non-ascii character "
        Exit Sub
    End If
  End If
  
  'Fax  ????????
  vFax = handle_spec_char(Range("vFax").Value, "TEXT")
  If handle_non_asc_char(Range("vFax").Value, "TEXT") = False Then
    MsgBox "Fax contain non-ascii character "
    Exit Sub
  End If
  
  'Broker Name
  vBrokerName = handle_spec_char(Range("vBrokerName").Value, "TEXT")
  If handle_non_asc_char(Range("vBrokerName").Value, "TEXT") = False Then
    MsgBox "BrokerName contain non-ascii character "
    Exit Sub
  End If

  'Payment Terms
  Set vthiscell = Range("vPaymentTerms")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Payment Terms", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vPaymentTerms = WorksheetFunction.VLookup(vthiscell.Value, Range("PaymentTermsLookup"), 2)
  End If
  
  'Pre-Carriage AS12158
  vPreCarriage = handle_spec_char(Range("vPreCarriage").Value, "TEXT")
  If handle_non_asc_char(Range("vPreCarriage").Value, "TEXT") = False Then
    MsgBox "BrokerName contain non-ascii character "
    Exit Sub
  End If
  
  'Vessel Name
  Set vthiscell = Range("vVessel")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Vessel Name", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vVessel = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Vessel Name contain non-ascii character "
        Exit Sub
    End If
  End If
  
  'Voyage
  Set vthiscell = Range("vVoyage")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Voyage", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vVoyage = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Voyage contain non-ascii character "
        Exit Sub
    End If
  End If
  
  'Place of Receipt
  Set vthiscell = Range("vPReceipt")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Place of Receipt", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vPReceipt = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Place of Receipt contain non-ascii character "
        Exit Sub
    End If
  End If
  
  'Port of Loading
  Set vthiscell = Range(" vPLoading")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Port of Loading", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vPLoading = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Port of Loading contain non-ascii character "
        Exit Sub
    End If
  End If
  
  'Port of Discharge
  Set vthiscell = Range("vPDischarge")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Port of Discharge", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vPDischarge = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Port of Discharge contain non-ascii character "
        Exit Sub
    End If
  End If
  
  'Place of Delivery
  Set vthiscell = Range("vPDelivery")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Place of Delivery", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vPDelivery = handle_spec_char(vthiscell.Value, "TEXT")
    If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
        MsgBox "Place of Delivery contain non-ascii character "
        Exit Sub
    End If
  End If
  
  'Start of LN15047
  'VGM Date
  vVgmDate = handle_spec_char(Range("vVgmDate").Value, "TEXT")
  If handle_non_asc_char(Range("vVgmDate").Value, "TEXT") = False Then
    MsgBox "VGM Date contains non-ascii character "
    Exit Sub
  ElseIf check_date_format(vVgmDate) = False Then
        MsgBox "Date format of VGM Date should be YYYYMMDD (e.g. 20160408 for 08-Apr-2016)", vbCritical, "Invalid Entry"
        Exit Sub
  End If
  
  'VGM date needs to be input if the time is not null
  If Len(Trim(Range("vVgmTime"))) > 0 Then
    If IsNull(Range("vVgmDate")) Or IsEmpty(Range("vVgmDate")) Or Len(Trim(Range("vVgmDate"))) = 0 Then
      Range("vVgmDate").Activate
      MsgBox "Please input VGM Date if the VGM Time exists", vbCritical, "Invalid Entry"
      Exit Sub
    End If
  End If
  
  'VGM Time
  vVgmTime = handle_spec_char(Range("vVgmTime").Value, "TEXT")
  If handle_non_asc_char(Range("vVgmTime").Value, "TEXT") = False Then
    MsgBox "VGM Time contains non-ascii character "
    Exit Sub
  ElseIf check_time_format(vVgmTime) = False Then
    MsgBox "Format of VGM Time should be HHMM (e.g. 2359 for 23:59 [11:59 P.M.])", vbCritical, "Invalid Entry"
    Exit Sub
  End If
  
  'VGM Location
  vVgmLcn = handle_spec_char(Range("vVgmLcn").Value, "TEXT")
  If handle_non_asc_char(Range("vVgmLcn").Value, "TEXT") = False Then
    MsgBox "VGM Location contains non-ascii character "
    Exit Sub
  End If
  
  'VGM Country of Verification
  Set vthiscell = Range("vVgmCnty")
  If Not (IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0) Then
    vVgmCnty = vthiscell.Value
  End If
  'End of LN15047
   
  'Weight Unit
  Set vthiscell = Range("vWUnit")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Weight Unit", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vWgtUnt = WorksheetFunction.VLookup(vthiscell.Value, Range("wUnitLookup"), 2)
  End If
  
  'Measurement Unit
  Set vthiscell = Range("vMUnit")
  If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
    vthiscell.Activate
    MsgBox "Please input Measurement Unit", vbCritical, "Invalid Entry"
    Exit Sub
  Else
    vMeasureUnit = WorksheetFunction.VLookup(vthiscell.Value, Range("mUnitLookup"), 2)
  End If
  
  'Check all the detail records
  For vRow = 1 To 300
  
      ' RLM If Not ((IsNull(Range("vContainer" & vRow)) Or IsEmpty(Range("vContainer" & vRow))) And _
      '        (IsNull(Range("vSeal1No" & vRow)) Or IsEmpty(Range("vSeal1No" & vRow))) And _
      '        (IsNull(Range("vSeal2No" & vRow)) Or IsEmpty(Range("vSeal2No" & vRow))) And _
      '       (IsNull(Range("vPkgCnt" & vRow)) Or IsEmpty(Range("vPkgCnt" & vRow))) And _
      '        (IsNull(Range("vPkgTyp" & vRow)) Or IsEmpty(Range("vPkgTyp" & vRow))) And _
       '       (IsNull(Range("vWeight" & vRow)) Or IsEmpty(Range("vWeight" & vRow))) And _
        '      (IsNull(Range("vGoodsDesc" & vRow)) Or IsEmpty(Range("vGoodsDesc" & vRow))) And _
         ' RLM     (IsNull(Range("vMeasure" & vRow)) Or IsEmpty(Range("vMeasure" & vRow)))) Then
         
    'If Not ((IsNull(Range("vContainer" & vRow)) Or IsEmpty(Range("vContainer" & vRow))) And _
              (IsNull(Range("vSeal1No" & vRow)) Or IsEmpty(Range("vSeal1No" & vRow))) And _
              (IsNull(Range("vPkgCnt" & vRow)) Or IsEmpty(Range("vPkgCnt" & vRow))) And _
              (IsNull(Range("vPkgTyp" & vRow)) Or IsEmpty(Range("vPkgTyp" & vRow))) And _
              (IsNull(Range("vWeight" & vRow)) Or IsEmpty(Range("vWeight" & vRow))) And _
              (IsNull(Range("vGoodsDesc" & vRow)) Or IsEmpty(Range("vGoodsDesc" & vRow))) And _
              (IsNull(Range("vMeasure" & vRow)) Or IsEmpty(Range("vMeasure" & vRow)))) Then
              
    If Not ((IsNull(Range("vContainer" & vRow)) Or IsEmpty(Range("vContainer" & vRow)) Or Len(Trim(Range("vContainer" & vRow))) = 0) And _
              (IsNull(Range("vSeal1No" & vRow)) Or IsEmpty(Range("vSeal1No" & vRow)) Or Len(Trim(Range("vSeal1No" & vRow))) = 0) And _
              (IsNull(Range("vPkgCnt" & vRow)) Or IsEmpty(Range("vPkgCnt" & vRow)) Or Len(Trim(Range("vPkgCnt" & vRow))) = 0) And _
              (IsNull(Range("vPkgTyp" & vRow)) Or IsEmpty(Range("vPkgTyp" & vRow)) Or Len(Trim(Range("vPkgTyp" & vRow))) = 0) And _
              (IsNull(Range("vWeight" & vRow)) Or IsEmpty(Range("vWeight" & vRow)) Or Len(Trim(Range("vWeight" & vRow))) = 0) And _
              (IsNull(Range("vGoodsDesc" & vRow)) Or IsEmpty(Range("vGoodsDesc" & vRow)) Or Len(Trim(Range("vGoodsDesc" & vRow))) = 0) And _
              (IsNull(Range("vMeasure" & vRow)) Or IsEmpty(Range("vMeasure" & vRow)) Or Len(Trim(Range("vMeasure" & vRow))) = 0)) Then
          
      vCntrCtr = vCntrCtr + 1
           
      'Container No
      Set vthiscell = Range("vContainer" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
        vthiscell.Activate
        MsgBox "Please input Container No", vbCritical, "Invalid Entry"
        Exit Sub
      Else
        vContainer(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
        If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
            MsgBox "Container No contain non-ascii character "
            Exit Sub
        End If
      End If
      
      'Seal No 1
      Set vthiscell = Range("vSeal1No" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
        vthiscell.Activate
        MsgBox "Please input Seal No.1", vbCritical, "Invalid Entry"
        Exit Sub
      Else
        vSeal1No(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
        If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
            MsgBox "Seal No 1 contain non-ascii character "
            Exit Sub
        End If
      End If
      
      'Seal No 2
      Set vthiscell = Range("vSeal2No" & vRow)
      'rlm If IsNull(vThisCell) Or IsEmpty(vThisCell) Then
      'rlm   vThisCell.Activate
      'rlm  MsgBox "Please input Seal No.2", vbCritical, "Invalid Entry"
       'rlm Exit Sub
      'rlm Else
        vSeal2No(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
        If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
            MsgBox "Seal No 2 contain non-ascii character "
            Exit Sub
        End If
      'rlm End If
      
      'Seal No 3
      Set vthiscell = Range("vSeal3No" & vRow)
      vSeal3No(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
      If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
            MsgBox "Seal No 3 contain non-ascii character "
            Exit Sub
      End If
      
      'Seal No 4
      Set vthiscell = Range("vSeal4No" & vRow)
      vSeal4No(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
      If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
            MsgBox "Seal No 4 contain non-ascii character "
            Exit Sub
      End If
      
      'Seal No 5
      Set vthiscell = Range("vSeal5No" & vRow)
      vSeal5No(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
      If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
            MsgBox "Seal No 5 contain non-ascii character "
            Exit Sub
      End If
      
      'Marks and No
      Set vthiscell = Range("vMarksNo" & vRow)
      vRptMarksNo(vCntrCtr) = Range("vMarksNo" & vRow).Value  'AS12158
      'IN15043063148 Start
      'vMarksNo(vCntrCtr) = handle_spec_char(Range("vMarksNo" & vRow).Value, "TEXT")
      vMarksNo(vCntrCtr) = Range("vMarksNo" & vRow).Value
      'IN15043063148 End

      If handle_non_asc_char(Range("vMarksNo" & vRow).Value, "TEXT") = False Then
        MsgBox "Marks and No contain non-ascii character "
        Exit Sub
      End If
      
      'Package Count
      Set vthiscell = Range("vPkgCnt" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then 'HK12020813103
        vthiscell.Activate
        MsgBox "Please input Package Count", vbCritical, "Invalid Entry"
        Exit Sub
      Else
        vPkgCnt(vCntrCtr) = vthiscell.Value
      End If
      
      If vthiscell.Value <= 0 Then 'HK12020813103
        vthiscell.Activate
        MsgBox "Package Count must be greater than 0", vbCritical, "Invalid Entry"
        Exit Sub
      End If
      
      'Pacakge Type
      Set vthiscell = Range("vPkgTyp" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
        vthiscell.Activate
        MsgBox "Please input Package Type", vbCritical, "Invalid Entry"
        Exit Sub
      Else
        vRptPkgTyp(vCntrCtr) = vthiscell.Value  'AS12158
        vPkgTyp(vCntrCtr) = WorksheetFunction.VLookup(vthiscell.Value, Range("pkgLookup"), 2)
      End If
      
      'Weight
      Set vthiscell = Range("vWeight" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
        vthiscell.Activate
        MsgBox "Please input Gross Weight", vbCritical, "Invalid Entry"
        Exit Sub
      Else
        vWeight(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
        If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
            MsgBox "Weight contain non-ascii character "
            Exit Sub
        End If
      End If
      
      If vthiscell.Value <= 0 Then 'HK12020813103
        vthiscell.Activate
        MsgBox "Gross Weight must be greater than 0", vbCritical, "Invalid Entry"
        Exit Sub
      End If
      
      'AS10014 - Net Weight
      Set vthiscell = Range("vNetWeight" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
        'vThisCell.Activate
        'MsgBox "Please input Weight", vbCritical, "Invalid Entry"
        'Exit Sub
      Else
        vNetWeight(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
        If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
            MsgBox "Net Weight contain non-ascii character "
            Exit Sub
        End If
      End If
      
      If Not (IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0) And _
         vthiscell.Value <= 0 Then 'HK12020813103
        vthiscell.Activate
        MsgBox "Net Weight must be greater than 0", vbCritical, "Invalid Entry"
        Exit Sub
      End If
      
      'Goods Description
      Set vthiscell = Range("vGoodsDesc" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
        vthiscell.Activate
        MsgBox "Please input Goods Description", vbCritical, "Invalid Entry"
        Exit Sub
      Else
        'vGoodsDesc(vCntrCtr) = handle_spec_char(Range("vGoodsDesc" & vRow).Value, "TEXT")
        vRptGoodsDesc(vCntrCtr) = Range("vGoodsDesc" & vRow).Value 'AS12148
        'IN15043063148 Start
        'vGoodsDesc(vCntrCtr) = handle_spec_char(Range("vGoodsDesc" & vRow).Value, "TEXT") 'AS10014
        vGoodsDesc(vCntrCtr) = Range("vGoodsDesc" & vRow).Value
        'IN15043063148 End

        If handle_non_asc_char(Range("vGoodsDesc" & vRow).Value, "TEXT") = False Then
            MsgBox "Goods Description contain non-ascii character "
            Exit Sub
        End If
      End If
      
      'Measurement
      Set vthiscell = Range("vMeasure" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
        vthiscell.Activate
        MsgBox "Please input Measurement", vbCritical, "Invalid Entry"
        Exit Sub
      Else
        vMeasure(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
        If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
            MsgBox "Measurement contain non-ascii character "
            Exit Sub
        End If
      End If
      
      If vthiscell.Value <= 0 Then 'HK12020813103
        vthiscell.Activate
        MsgBox "Measurement must be greater than 0", vbCritical, "Invalid Entry"
        Exit Sub
      End If
      
      'Harmonised Commodity -- EU10136
      Set vthiscell = Range("vHarmonised" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
      Else
        vHarmonised(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
        If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
            MsgBox "Harmonised Commondity contain non-ascii character "
            Exit Sub
        End If
      End If
                          
      'Start of LN15047
      'VGM Method
      Set vthiscell = Range("vVgmMethod" & vRow)
      If Len(Trim(vthiscell.Value)) > 0 Then
        vConVgmMet(vCntrCtr) = WorksheetFunction.VLookup(vthiscell.Value, Range("vgmMethodLookUp"), 2, False)
      End If
                          
      'VGM Value
      Set vthiscell = Range("vVGM" & vRow)
      If handle_non_asc_char(vthiscell.Value, "TEXT") = False Then
            MsgBox "VGM Value contains non-ascii character "
            Exit Sub
      End If
      
      If Len(Trim(vthiscell.Value)) > 0 And vthiscell.Value <= 0 Then
        vthiscell.Activate
        MsgBox "VGM Value must be greater than 0", vbCritical, "Invalid Entry"
        Exit Sub
      End If
      vConVGM(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
                          
      'VGM Date
      Set vthiscell = Range("vgmDate" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
      Else
        vConVgmDt(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
      End If
                          
      'VGM Time
      Set vthiscell = Range("vgmTime" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
      Else
        vConVgmTime(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
      End If
                          
      'VGM Location
      Set vthiscell = Range("VgmLcn" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
      Else
        vConVgmLcn(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
      End If
                          
      'VGM Country
      Set vthiscell = Range("VgmCountry" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
      Else
        vConVgmCnty(vCntrCtr) = vthiscell.Value
      End If
                          
      'VGM Company Name
      Set vthiscell = Range("CompName" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
      Else
        vConVgmComp(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
      End If
                          
      'VGM Address
      Set vthiscell = Range("CompAddrOne" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
      Else
        vConVgmAddr1(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
      End If
      Set vthiscell = Range("CompAddrTwo" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
      Else
        vConVgmAddr2(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
      End If
      Set vthiscell = Range("CompAddrThree" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
      Else
        vConVgmAddr3(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
      End If
      Set vthiscell = Range("CompAddrFour" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
      Else
        vConVgmAddr4(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
      End If
                          
      'VGM Contact
      Set vthiscell = Range("Contact" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
      Else
        vConVgmContact(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
      End If
                          
      'VGM Email
      Set vthiscell = Range("Email" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
      Else
        vConVgmEmail(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
      End If
                          
      'VGM Telephone
      Set vthiscell = Range("Tel" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
      Else
        vConVgmTel(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
      End If
                          
      'VGM Certification ID
      Set vthiscell = Range("CertID" & vRow)
      If IsNull(vthiscell) Or IsEmpty(vthiscell) Or Len(Trim(vthiscell.Value)) = 0 Then
      Else
        vConVgmCert(vCntrCtr) = handle_spec_char(vthiscell.Value, "TEXT")
      End If
      'End of LN15047
                          
     ' AS14031 - Call subroutine to set default container related info.
     If vCntrCtr = 1 Then
       Set_Default_Info (vRow)
     End If
      
                          
    End If
      
  Next vRow
  
  If vCntrCtr = 0 Then
    Range("vContainer1").Activate
    MsgBox "No Container information", vbCritical, "Invalid Entry"
    Exit Sub
  End If
  
  'Commented for AS12005
  ''check that no duplicate record
  'For outter = 1 To vCntrCtr
  '  If Len(vContainer(vCntrCtr)) <> 0 Then
  '    For inner = 1 To vCntrCtr
  '      If outter <> inner And vContainer(outter) = vContainer(inner) Then
  '        Range("vContainer" & outter).Activate
  '        MsgBox "Duplicate container no", vbCritical, "Invalid Entry"
  '        Exit Sub
  '      End If
  '    Next inner
  '  End If
  'Next outter
  
  If p_opt = "EDI" Then
     Create_Edi_File
  ElseIf p_opt = "SI" Then
     Create_Si_File
  End If
  
End Sub

'AS10014 -Rewritted by AS12158
Function GetPos(p_str As String, MaxLen As Integer) As Integer
Dim SpecChar As Boolean
GetPos = 0

'1. The first chr(10)
'2. Whole string
'3. A space before end char
'4. Before end char And Not "?"

GetPos = InStr(1, p_str, Chr(10))
If GetPos > 0 Then
   Exit Function
End If

If Len(p_str) <= MaxLen Then
   GetPos = Len(p_str)
   Exit Function
End If

For i = Len(p_str) To 1 Step -1
   If Mid(p_str, i, 1) = " " Then
      GetPos = i
      Exit Function
   End If
Next i

For i = Len(p_str) To 1 Step -1
   If Mid(p_str, i, 1) <> "?" Then
      GetPos = i
      Exit Function
   End If
Next i

GetPos = MaxLen

End Function

Sub Create_Si_File() 'AS12158
  
  Dim vOutString As String
  Dim vOutFile As Integer
  Dim vFileName As String
  Dim CurrentPath As String

  Dim vStart As Integer 'AS10014
  Dim vPos As Integer   'AS10014

  Dim vAppVer As String
  Dim vDupCntr As Boolean 'AS12005

  Dim vLeftCol As String
  
  Dim vColCntr   As String
  Dim vColSeal1  As String
  Dim vColSeal2  As String
  Dim vColSeal3  As String
  Dim vColSeal4  As String
  Dim vColSeal5  As String
  Dim vColPkgCnt As String
  Dim vColPkgTyp As String
  Dim vColWeight As String
  Dim vColNetWgt As String
  Dim vColMea    As String
  Dim vColHarm   As String
  Dim vColVgmMethod As String 'LN15047
  Dim vColVgmVal As String 'LN15047
  Dim vColVgmDt  As String 'LN15047
  Dim vColVgmTime As String 'LN15047
  Dim vColVgmLcn As String 'LN15047
  Dim vColVgmCnty As String 'LN15047
  
  Dim vCopyVGM As String 'LN15047
  Dim vSe As String
  Dim v_Len As Integer
  Dim v_Pre_Len As Integer
  
  vend = "'"
  vDate = Format(Date, "YYYYMMDD")
  vTime = Format(Now, "hhmmss")
  vTime_simple = Left(vTime, 4)
  CurrentPath = CurDir
  
  vLeftCol = Space(60)
  
  ' Open output file
  vOutFile = FreeFile
    
  vFileName = Application.GetSaveAsFilename("SI Report-" & vCarBook & "-" & vDate & vTime & ".txt", fileFilter:="Text Files (*.txt), *.txt")

  If vFileName = "False" Then Exit Sub

  vSegCtrl = 0
  Open vFileName For Output As vOutFile

'Generate SI file begin ........................................................
  vOutString = "Vendor             : SICUST_ONE"
  Print #vOutFile, vOutString
  
  LSet vLeftCol = "Carrier Booking    : " & vCarBook
  vOutString = vLeftCol & "Service Contract No  : " & vSvrCntr
  Print #vOutFile, vOutString
  
  'Handle multiple bookings
  For cnt = 1 To 300
    If Not (IsNull(Multi_Bookings.Range("mBooking" & cnt)) Or _
            IsEmpty(Multi_Bookings.Range("mBooking" & cnt))) Then
            
       vOutString = "                     " & Multi_Bookings.Range("mBooking" & cnt).Value
       Print #vOutFile, vOutString
    End If
  Next cnt
  
  LSet vLeftCol = "B/L Type           : " & Range("vBLType")
  vOutString = vLeftCol & "Issue Type           : " & Range("vIsuType")
  Print #vOutFile, vOutString
  
  LSet vLeftCol = "No. of Originals   : " & vNoOrgl
  vOutString = vLeftCol
  Print #vOutFile, vOutString
  
  LSet vLeftCol = "No. of Copies      : " & vNoCopy
  vOutString = vLeftCol
  Print #vOutFile, vOutString
  
  Print #vOutFile,
  
  vOutString = "Shipper's Reference: " & vShpRef
  Print #vOutFile, vOutString
  vOutString = "Carrier B/L        : " & vCarBL
  Print #vOutFile, vOutString
  
  Print #vOutFile,
  
  If Trim(vBLInstr) <> "" Then
  vBLInstr = Del_Empty_Line(Range("vBLInstr"))
  vBLInstr = Trim(Replace(vBLInstr, Application.Rept("?", 70), ""))
  vBLInstr = Trim(Replace(vBLInstr, Chr(10), Chr(13) & Chr(10)))
  vOutString = "BL Instructions"
  Print #vOutFile, vOutString
  vOutString = "----------------------------------------------------------------------"
  Print #vOutFile, vOutString
  vOutString = vBLInstr
  Print #vOutFile, vOutString
  vOutString = ""
  Print #vOutFile, vOutString
  End If
  
  Print #vOutFile,
  
  If Trim(vShpName) <> "" Then
  vOutString = "Shipper"
  
  vShpEORI = Trim(Range("vShpEORIRef").Value)
  If vShpEORI <> "" Then
     vOutString = vOutString & " (EORI Ref: " & vShpEORI & ")"
  End If
  
  Print #vOutFile, vOutString
  vOutString = "-----------------------------------"
  Print #vOutFile, vOutString
  vOutString = vShpName
  Print #vOutFile, vOutString
  vOutString = vShpAdr1
  Print #vOutFile, vOutString
  vOutString = vShpAdr2
  Print #vOutFile, vOutString
  vOutString = vShpAdr3
  Print #vOutFile, vOutString
  vOutString = vShpAdr4
  Print #vOutFile, vOutString

  Print #vOutFile,
  End If
  
  If Trim(vConsgName) <> "" Then
  vOutString = "Consignee"
  
  vConsgEORI = Trim(Range("vConsgEORIRef").Value)
  If vConsgEORI <> "" Then
     vOutString = vOutString & " (EORI Ref: " & vConsgEORI & ")"
  End If
  
  Print #vOutFile, vOutString
  vOutString = "-----------------------------------"
  Print #vOutFile, vOutString
  vOutString = vConsgName
  Print #vOutFile, vOutString
  vOutString = vConsgAdr1
  Print #vOutFile, vOutString
  vOutString = vConsgAdr2
  Print #vOutFile, vOutString
  vOutString = vConsgAdr3
  Print #vOutFile, vOutString
  vOutString = vConsgAdr4
  Print #vOutFile, vOutString

  Print #vOutFile,
  End If
  
  If Trim(vNot1Name) <> "" Then
  vOutString = "Notify Party 1"
  
  vNot1EORI = Trim(Range("vNot1EORIRef").Value)
  If vNot1EORI <> "" Then
     vOutString = vOutString & " (EORI Ref: " & vNot1EORI & ")"
  End If
  
  Print #vOutFile, vOutString
  vOutString = "-----------------------------------"
  Print #vOutFile, vOutString
  vOutString = vNot1Name
  Print #vOutFile, vOutString
  vOutString = vNot1Adr1
  Print #vOutFile, vOutString
  vOutString = vNot1Adr2
  Print #vOutFile, vOutString
  vOutString = vNot1Adr3
  Print #vOutFile, vOutString
  vOutString = vNot1Adr4
  Print #vOutFile, vOutString

  Print #vOutFile,
  End If
  
  If Trim(vNot2Name) <> "" Then
  vOutString = "Notify Party 2"
  Print #vOutFile, vOutString
  vOutString = "-----------------------------------"
  Print #vOutFile, vOutString
  vOutString = vNot2Name
  Print #vOutFile, vOutString
  vOutString = vNot2Adr1
  Print #vOutFile, vOutString
  vOutString = vNot2Adr2
  Print #vOutFile, vOutString
  vOutString = vNot2Adr3
  Print #vOutFile, vOutString
  vOutString = vNot2Adr4
  Print #vOutFile, vOutString

  Print #vOutFile,
  End If
  
  If Trim(vForAgtName) <> "" Then
  vOutString = "Forwarding Agent"
  Print #vOutFile, vOutString
  vOutString = "-----------------------------------"
  Print #vOutFile, vOutString
  vOutString = vForAgtName
  Print #vOutFile, vOutString
  vOutString = vForAgtAdr1
  Print #vOutFile, vOutString
  vOutString = vForAgtAdr2
  Print #vOutFile, vOutString
  vOutString = vForAgtAdr3
  Print #vOutFile, vOutString
  vOutString = vForAgtAdr4
  Print #vOutFile, vOutString

  Print #vOutFile,
  End If
  
  If Trim(vFrePayName) <> "" Then
  vOutString = "Freight Payer Name"
  Print #vOutFile, vOutString
  vOutString = "-----------------------------------"
  Print #vOutFile, vOutString
  vOutString = vFrePayName
  Print #vOutFile, vOutString
  vOutString = vFrePayAdr1
  Print #vOutFile, vOutString
  vOutString = vFrePayAdr2
  Print #vOutFile, vOutString
  vOutString = vFrePayAdr3
  Print #vOutFile, vOutString
  vOutString = vFrePayAdr4
  Print #vOutFile, vOutString

  Print #vOutFile,
  End If
  

  Print #vOutFile,
  
  'Start of LN15047
  'weighing company
  If Trim(vWComp) <> "" Then
  vOutString = "Weighing Company"
  Print #vOutFile, vOutString
  vOutString = "-----------------------------------"
  Print #vOutFile, vOutString
  vOutString = vWComp
  Print #vOutFile, vOutString
  vOutString = vWAddr1
  Print #vOutFile, vOutString
  vOutString = vWAddr2
  Print #vOutFile, vOutString
  vOutString = vWAddr3
  Print #vOutFile, vOutString
  vOutString = vWAddr4
  Print #vOutFile, vOutString
  If Trim(vWContact) <> "" Then
    vOutString = "Contact            : " & vWContact
    Print #vOutFile, vOutString
  End If
  If Trim(vWEmail) <> "" Then
    vOutString = "Email address      : " & vWEmail
    Print #vOutFile, vOutString
  End If
  If Trim(vWPhone) <> "" Then
    vOutString = "Telephone          : " & vWPhone
    Print #vOutFile, vOutString
  End If
  If Trim(vWCertID) <> "" Then
    vOutString = "Certification ID   : " & vWCertID
    Print #vOutFile, vOutString
  End If
  
  Print #vOutFile,
  End If
  'End of LN15047
    
  vOutString = "Broker Name        : " & vBrokerName
  Print #vOutFile, vOutString
  vOutString = "Payment Terms      : " & Range("vPaymentTerms")
  Print #vOutFile, vOutString
  vOutString = "Method of Payment  : " & Range("vMethodOfPayment")
  Print #vOutFile, vOutString
  vOutString = "Freight Payment Place : " & vFrePayPlace
  Print #vOutFile, vOutString
  vOutString = "Export Reference   : " & vExpRef
  Print #vOutFile, vOutString

  Print #vOutFile,
  
  LSet vLeftCol = "Contact            : " & vContact
  vOutString = vLeftCol & "Email address : " & vEmail
  Print #vOutFile, vOutString
  
  LSet vLeftCol = "Telephone          : " & vTelephone
  vOutString = vLeftCol & "FAX           : " & vFax
  Print #vOutFile, vOutString
  
  vOutString = ""
  Print #vOutFile, vOutString
  
  vOutString = "Pre-Carriage       : " & vPreCarriage
  Print #vOutFile, vOutString
  
  LSet vLeftCol = "Vessel Name        : " & vVessel
  vOutString = vLeftCol & "Voyage        : " & vVoyage
  Print #vOutFile, vOutString
  
  vOutString = "Place of Receipt   : " & vPReceipt
  Print #vOutFile, vOutString
  vOutString = "Port of Loading    : " & vPLoading
  Print #vOutFile, vOutString
  vOutString = "Port of Discharge  : " & vPDischarge
  Print #vOutFile, vOutString
  vOutString = "Place of Delivery  : " & vPDelivery
  Print #vOutFile, vOutString
  
  Print #vOutFile,
  
  'Start of LN15047
  If Trim(vVgmDate) <> "" Then
    vOutString = "VGM Date                      : " & Left(vVgmDate, 4) & "-" & Mid(vVgmDate, 5, 2) & "-" & Right(vVgmDate, 2)
    Print #vOutFile, vOutString
  End If
  If Trim(vVgmTime) <> "" Then
    vOutString = "VGM Time                      : " & Left(vVgmTime, 2) & ":" & Right(vVgmTime, 2)
    Print #vOutFile, vOutString
  End If
  If Trim(vVgmLcn) <> "" Then
    vOutString = "VGM Location                  : " & vVgmLcn
    Print #vOutFile, vOutString
  End If
  If Trim(vVgmCnty) <> "" Then
    vOutString = "VGM Country of Verification   : " & Range("vVgmCnty")
    Print #vOutFile, vOutString
  End If
  
  Print #vOutFile,
  'End of LN15047
  
  LSet vLeftCol = "Weight Unit        : " & Range("vWUnit")
  vOutString = vLeftCol & "Measurement Unit :" & Range("vMUnit")
  Print #vOutFile, vOutString
  
  Print #vOutFile,
  Print #vOutFile,
  
  vColCntr = Space(12)
  vColSeal1 = Space(35)
  vColSeal2 = Space(35)
  vColSeal3 = Space(35)
  vColSeal4 = Space(35)
  vColSeal5 = Space(35)
  vColPkgCnt = Space(7)
  vColPkgTyp = Space(20)
  vColWeight = Space(12)
  vColMea = Space(12)
  vColNetWgt = Space(12)
  vColHarm = Space(20)
  vColVgmMethod = Space(10) 'LN15047
  vColVgmVal = Space(12) 'LN15047
  vColVgmDt = Space(10) 'LN15047
  vColVgmTime = Space(8) 'LN15047
  vColVgmLcn = Space(35) 'LN15047
  vColVgmCnty = Space(25) 'LN15047
  vSe = Space(2)
  
  For i = 1 To vCntrCtr
  
    'Start of LN15047
    If Len(Trim(vConVgmDt(i))) = 0 And Len(Trim(vConVgmTime(i))) = 0 And Len(Trim(vConVgmLcn(i))) = 0 And _
       Len(Trim(vConVgmCnty(i))) = 0 And Len(Trim(vConVgmComp(i))) = 0 And Len(Trim(vConVgmAddr1(i))) = 0 And _
       Len(Trim(vConVgmAddr2(i))) = 0 And Len(Trim(vConVgmAddr3(i))) = 0 And Len(Trim(vConVgmAddr4(i))) = 0 And _
       Len(Trim(vConVgmContact(i))) = 0 And Len(Trim(vConVgmEmail(i))) = 0 And Len(Trim(vConVgmTel(i))) = 0 And Len(Trim(vConVgmCert(i))) = 0 And _
       (Len(Trim(vVgmLcn)) > 0 Or Len(Trim(vVgmCnty)) > 0 Or Len(Trim(vWComp)) > 0 Or Len(Trim(vWCertID)) > 0) Then
          If Len(Trim(vCopyVGM)) = 0 Then
                Msg = "Do you want to show the general Weighing Company and VGM details under each container (except the containers which have specific Weighing Company and VGM details)?"
                Title = "VGM information"
                Style = vbYesNo + vbQuestion + vbDefaultButton1
                Response = MsgBox(Msg, Style, Title, Help, Ctxt)
                 
                If Response = vbYes Then 'copy
                  vCopyVGM = "Y"
                Else
                  vCopyVGM = "N"
                End If
           End If
          
          If vCopyVGM = "Y" Then
            'Copy VGM information from S/I level
            vConVgmDt(i) = vVgmDate
            vConVgmTime(i) = vVgmTime
            vConVgmLcn(i) = vVgmLcn
            vConVgmCnty(i) = vVgmCnty
            vConVgmComp(i) = vWComp
            vConVgmAddr1(i) = vWAddr1
            vConVgmAddr2(i) = vWAddr2
            vConVgmAddr3(i) = vWAddr3
            vConVgmAddr4(i) = vWAddr4
            vConVgmContact(i) = vWContact
            vConVgmEmail(i) = vWEmail
            vConVgmTel(i) = vWPhone
            vConVgmCert(i) = vWCertID
          End If
    End If
    'End of LN15047
  
  'Start of LN15047
  vOutString = "======================================================================================================================================"
  Print #vOutFile, vOutString
  'End of LN15047
  
  If Trim(vWeight(i)) = "" Then vWeight(i) = 0
  If Mid(Trim(vWeight(i)), 12, 1) = "." Then vWeight(i) = Mid(vWeight(i), 1, 11)
  If CDec(vWeight(i)) > 999999999999# Then vWeight(i) = "ERROR"
  
  If Trim(vNetWeight(i)) = "" Then vNetWeight(i) = 0
  If Mid(Trim(vNetWeight(i)), 12, 1) = "." Then vNetWeight(i) = Mid(vNetWeight(i), 1, 11)
  If CDec(vNetWeight(i)) > 999999999999# Then vNetWeight(i) = "ERROR"

  LSet vColCntr = Left(vContainer(i), 12)
  LSet vColSeal1 = Left(vSeal1No(i), 35)
  LSet vColSeal2 = Left(vSeal2No(i), 35)
  LSet vColSeal3 = Left(vSeal3No(i), 35)
  LSet vColSeal4 = Left(vSeal4No(i), 35)
  LSet vColSeal5 = Left(vSeal5No(i), 35)
  LSet vColPkgCnt = Left(vPkgCnt(i), 7)
  LSet vColPkgTyp = Left(vRptPkgTyp(i), 20)
  LSet vColWeight = Left(vWeight(i), 12)
  LSet vColMea = Left(vMeasure(i), 12)
  LSet vColNetWgt = Left(vNetWeight(i), 12)
  LSet vColHarm = Left(vHarmonised(i), 20)
  
  'Start of LN15047
  LSet vColVgmMethod = Left(vConVgmMet(i), 10)
  LSet vColVgmVal = Left(vConVGM(i), 12)
  If Len(Trim(vConVgmDt(i))) > 0 Then
    LSet vColVgmDt = Left(Left(vConVgmDt(i), 4) & "-" & Mid(vConVgmDt(i), 5, 2) & "-" & Right(vConVgmDt(i), 2), 10)
  Else
    vColVgmDt = Space(10)
  End If
  If Len(Trim(vConVgmTime(i))) > 0 Then
    LSet vColVgmTime = Left(Left(vConVgmTime(i), 2) & ":" & Right(vConVgmTime(i), 2), 8)
  Else
    vColVgmTime = Space(8)
  End If
  LSet vColVgmLcn = Left(vConVgmLcn(i), 35)
  LSet vColVgmCnty = Left(vConVgmCnty(i), 25)
  'End of LN15047
  
  vOutString = "Container No  Seal No1                             Seal No2                             Seal No3                             Seal No4                             Seal No5                             Pkg Cnt  PKG Type              Pkg Wgt       Pkg Msr       Net Wgt       Harmonised Commodity"
  Print #vOutFile, vOutString
  vOutString = "------------  -----------------------------------  -----------------------------------  -----------------------------------  -----------------------------------  -----------------------------------  -------  --------------------  ------------  ------------  ------------  --------------------"
  Print #vOutFile, vOutString
  
  vOutString = vColCntr & vSe & vColSeal1 & vSe & vColSeal2 & vSe & vColSeal3 & vSe & vColSeal4 & vSe & vColSeal5 & vSe & vColPkgCnt & vSe & vColPkgTyp & vSe & vColWeight & vSe & vColMea & vSe & vColNetWgt & vSe & vColHarm
  Print #vOutFile, vOutString
  
  Print #vOutFile,
  
  'Start of LN15047
  vOutString = "VGM Method  VGM Value     VGM Date    VGM Time  VGM Location                         VGM Country"
  Print #vOutFile, vOutString
  vOutString = "----------  ------------  ----------  --------  -----------------------------------  -------------------------"
  Print #vOutFile, vOutString
  
  vOutString = vColVgmMethod & vSe & vColVgmVal & vSe & vColVgmDt & vSe & vColVgmTime & vSe & vColVgmLcn & vSe & vColVgmCnty
  Print #vOutFile, vOutString
  
  Print #vOutFile,

  If Trim(vConVgmComp(i)) <> "" Then
    vOutString = "Weighing Company"
    Print #vOutFile, vOutString
    vOutString = "-----------------------------------"
    Print #vOutFile, vOutString
    vOutString = vConVgmComp(i)
    Print #vOutFile, vOutString
    vOutString = vConVgmAddr1(i)
    Print #vOutFile, vOutString
    vOutString = vConVgmAddr2(i)
    Print #vOutFile, vOutString
    vOutString = vConVgmAddr3(i)
    Print #vOutFile, vOutString
    vOutString = vConVgmAddr4(i)
    Print #vOutFile, vOutString
    If Trim(vConVgmContact(i)) <> "" Then
      vOutString = "Contact            : " & vConVgmContact(i)
      Print #vOutFile, vOutString
    End If
    If Trim(vConVgmEmail(i)) <> "" Then
      vOutString = "Email address      : " & vConVgmEmail(i)
      Print #vOutFile, vOutString
    End If
    If Trim(vConVgmTel(i)) <> "" Then
      vOutString = "Telephone          : " & vConVgmTel(i)
      Print #vOutFile, vOutString
    End If
    If Trim(vConVgmCert(i)) <> "" Then
      vOutString = "Certification ID   : " & vConVgmCert(i)
      Print #vOutFile, vOutString
    End If
  End If

  Print #vOutFile,
  'End of LN15047

  vGoodDesc1 = Del_Empty_Line(vRptGoodsDesc(i))
  vGoodDesc1 = Trim(Replace(vGoodDesc1, Application.Rept("?", 70), ""))
  vGoodDesc1 = Trim(Replace(vGoodDesc1, Chr(10), Chr(13) & Chr(10)))
  vOutString = "Goods Description"
  Print #vOutFile, vOutString
  vOutString = "----------------------------------------------------------------------"
  Print #vOutFile, vOutString
  vOutString = vGoodDesc1
  Print #vOutFile, vOutString
  
  Print #vOutFile,
  
  vMarksNo1 = Del_Empty_Line(vRptMarksNo(i))
  vMarksNo1 = Trim(Replace(vMarksNo1, Application.Rept("?", 35), ""))
  vMarksNo1 = Trim(Replace(vMarksNo1, Chr(10), Chr(13) & Chr(10)))
  vOutString = "Marks & Nos"
  Print #vOutFile, vOutString
  vOutString = "-----------------------------------"
  Print #vOutFile, vOutString
  vOutString = vMarksNo1
  Print #vOutFile, vOutString
  
  Print #vOutFile,
  Print #vOutFile,

  Next i
  
  'Start of LN15047
  vOutString = "======================================================================================================================================"
  Print #vOutFile, vOutString
  'End of LN15047
  
  Close #vOutFile
  
  MsgBox "SI Report was generated successfully in " & vFileName, vbInformation
  
End Sub

Function Del_Empty_Line(p_Line As String)
Dim Start_Pos As Integer
Dim End_Pos As Integer
Dim Tmp_Str As String
Dim o_Line As String
Dim vtmp As String

Do While Len(p_Line) > 0
   'Start_Pos = InStr(1, p_Line, Chr(10)) + 1
   End_Pos = InStr(1, p_Line, Chr(10))
   If End_Pos = 0 Then End_Pos = Len(p_Line) + 1
   Tmp_Str = Mid(p_Line, 1, End_Pos - 1)
   p_Line = Mid(p_Line, End_Pos + 1)

   If Trim(Tmp_Str) <> "" Then
      If o_Line = "" Then
         o_Line = Tmp_Str
      Else
         o_Line = o_Line & Chr(10) & Tmp_Str
      End If
   End If
Loop

Del_Empty_Line = o_Line

End Function

' AS14035 - enahcement for desktop SI tool
'         - Pkg Count, Gross Weight, Pkg Type, Measurement, Marks&Nos and Goods Description
'         - Description to indicate that if no specified, value will be copied from that in
'         - the first container record.
Sub Set_Default_Info(p_FirstRow As Integer)
Dim vCurRow As Integer
Dim vFirstRow As Integer
  
  If p_FirstRow < 1 Or p_FirstRow >= 300 Then
    Exit Sub
  Else
    vFirstRow = p_FirstRow
  End If
  
  For vCurRow = vFirstRow + 1 To 300
          
    If Not ((IsNull(Range("vContainer" & vCurRow)) Or IsEmpty(Range("vContainer" & vCurRow)) Or Len(Trim(Range("vContainer" & vCurRow))) = 0) And _
              (IsNull(Range("vSeal1No" & vCurRow)) Or IsEmpty(Range("vSeal1No" & vCurRow)) Or Len(Trim(Range("vSeal1No" & vCurRow))) = 0) And _
              (IsNull(Range("vPkgCnt" & vCurRow)) Or IsEmpty(Range("vPkgCnt" & vCurRow)) Or Len(Trim(Range("vPkgCnt" & vCurRow))) = 0) And _
              (IsNull(Range("vWeight" & vCurRow)) Or IsEmpty(Range("vWeight" & vCurRow)) Or Len(Trim(Range("vWeight" & vCurRow))) = 0) And _
              (IsNull(Range("vPkgTyp" & vCurRow)) Or IsEmpty(Range("vPkgTyp" & vCurRow)) Or Len(Trim(Range("vPkgTyp" & vCurRow))) = 0) And _
              (IsNull(Range("vMeasure" & vCurRow)) Or IsEmpty(Range("vMeasure" & vCurRow)) Or Len(Trim(Range("vMeasure" & vCurRow))) = 0) And _
              (IsNull(Range("vMarksNo" & vCurRow)) Or IsEmpty(Range("vMarksNo" & vCurRow)) Or Len(Trim(Range("vMarksNo" & vCurRow))) = 0) And _
              (IsNull(Range("vGoodsDesc" & vCurRow)) Or IsEmpty(Range("vGoodsDesc" & vCurRow)) Or Len(Trim(Range("vGoodsDesc" & vCurRow))) = 0) And _
              (IsNull(Range("vNetWeight" & vCurRow)) Or IsEmpty(Range("vNetWeight" & vCurRow)) Or Len(Trim(Range("vNetWeight" & vCurRow))) = 0) And _
              (IsNull(Range("vHarmonised" & vCurRow)) Or IsEmpty(Range("vHarmonised" & vCurRow)) Or Len(Trim(Range("vHarmonised" & vCurRow))) = 0)) Then
      
  
      If (IsNull(Range("vPkgCnt" & vCurRow)) Or IsEmpty(Range("vPkgCnt" & vCurRow)) Or Len(Trim(Range("vPkgCnt" & vCurRow))) = 0) Then
        Range("vPkgCnt" & vCurRow) = Range("vPkgCnt" & vFirstRow)
      End If
      If (IsNull(Range("vWeight" & vCurRow)) Or IsEmpty(Range("vWeight" & vCurRow)) Or Len(Trim(Range("vWeight" & vCurRow))) = 0) Then
        Range("vWeight" & vCurRow) = Range("vWeight" & vFirstRow)
      End If
      If (IsNull(Range("vPkgTyp" & vCurRow)) Or IsEmpty(Range("vPkgTyp" & vCurRow)) Or Len(Trim(Range("vPkgTyp" & vCurRow))) = 0) Then
        Range("vPkgTyp" & vCurRow) = Range("vPkgTyp" & vFirstRow)
      End If
      If (IsNull(Range("vMeasure" & vCurRow)) Or IsEmpty(Range("vMeasure" & vCurRow)) Or Len(Trim(Range("vMeasure" & vCurRow))) = 0) Then
        Range("vMeasure" & vCurRow) = Range("vMeasure" & vFirstRow)
      End If
      If (IsNull(Range("vMarksNo" & vCurRow)) Or IsEmpty(Range("vMarksNo" & vCurRow)) Or Len(Trim(Range("vMarksNo" & vCurRow))) = 0) Then
        Range("vMarksNo" & vCurRow) = Range("vMarksNo" & vFirstRow)
      End If
      If (IsNull(Range("vGoodsDesc" & vCurRow)) Or IsEmpty(Range("vGoodsDesc" & vCurRow)) Or Len(Trim(Range("vGoodsDesc" & vCurRow))) = 0) Then
        Range("vGoodsDesc" & vCurRow) = Range("vGoodsDesc" & vFirstRow)
      End If
    
    End If
  Next vCurRow
End Sub


Attribute VB_Name = "Module_open_close"
Dim Msg, Style, Title, Response
Dim vflag As Boolean
Public vExit As Boolean
Const WelcomePage = "Macros"


Sub Auto_Open()
  
  vflag = False
  vExit = False

  Application.CommandBars("Worksheet Menu Bar").Enabled = vflag
  Application.CommandBars("Standard").Visible = vflag
  Application.CommandBars("Formatting").Visible = vflag
  Application.CommandBars("Drawing").Visible = vflag
  Application.ExecuteExcel4Macro "SHOW.TOOLBAR(""Ribbon"",False)"
  
  With ActiveWindow
    .DisplayHeadings = vflag
    .DisplayHorizontalScrollBar = True 'LN15047
    .DisplayVerticalScrollBar = True
    .DisplayWorkbookTabs = vflag
  End With
    
  With Application
    .DisplayFormulaBar = vflag
    .DisplayStatusBar = vflag
    .ShowWindowsInTaskbar = vflag
  End With
  
  Application.OnKey "^x", "Control X is disabled"
  Application.OnKey "^c", "Control C is disabled"
  Application.OnKey "^v", "Control V is disabled"
  Application.OnKey "^s", "Control S is disabled"
  Application.OnKey "^{INSERT}", "Control-Insert is disabled" 'EU16003
  Application.OnKey "+{INSERT}", "Shift-Insert is disabled" 'EU16003
  Application.CellDragAndDrop = vflag
  
  ActiveSheet.Unprotect Password:="MOLIT"
  
  Main.Range("msg").Value = Lookup_General.Range("msgVer").Value
  
  ActiveSheet.Protect Password:="MOLIT", DrawingObjects:=True, Contents:=True, Scenarios:=True
  ActiveSheet.EnableSelection = xlUnlockedCells
  
  Main.Activate
  Range("vCarBook").Select
End Sub



Sub revert_setting()

  Application.CommandBars("Worksheet Menu Bar").Enabled = True
  Application.CommandBars("Standard").Visible = True
  Application.CommandBars("Formatting").Visible = True
  Application.CommandBars("Drawing").Visible = True
  Application.ExecuteExcel4Macro "SHOW.TOOLBAR(""Ribbon"",True)"
  
  With ActiveWindow
    .DisplayHeadings = True
    .DisplayHorizontalScrollBar = True
    .DisplayVerticalScrollBar = True
    .DisplayWorkbookTabs = True
  End With
  
  With Application
    .DisplayFormulaBar = True
    .DisplayStatusBar = True
    .ShowWindowsInTaskbar = True
  End With
  
  Application.OnKey "^x"
  Application.OnKey "^c"
  Application.OnKey "^v"
  Application.OnKey "^s"
  Application.OnKey "^{INSERT}" 'EU16003
  Application.OnKey "+{INSERT}" 'EU16003
  Application.CellDragAndDrop = True
  
  'For debug use
  'ActiveSheet.Unprotect Password:="MOLIT"

End Sub

Function chk_array_null(ArryName As String)

  Dim rtn As Boolean
  rtn = True

  For rwIndex = 1 To 300
    If Not (IsNull(Range(ArryName & rwIndex)) Or IsEmpty(Range(ArryName & rwIndex))) Then
      rtn = False
      Exit For
    End If
  Next rwIndex
  
  chk_array_null = rtn

End Function


Function allow_exit_clear()

  If (IsNull(Range("vCarBook")) Or IsEmpty(Range("vCarBook"))) And (IsNull(Range("vCarBL")) Or IsEmpty(Range("vCarBL"))) And (IsNull(Range("vSvrCntr")) Or IsEmpty(Range("vSvrCntr"))) And (IsNull(Range("vBLType")) Or IsEmpty(Range("vBLType"))) And _
     (IsNull(Range("vIsuType")) Or IsEmpty(Range("vIsuType"))) And (IsNull(Range("vNoCopy")) Or IsEmpty(Range("vNoCopy"))) And (IsNull(Range("vShpRef")) Or IsEmpty(Range("vShpRef"))) And (IsNull(Range("vBLInstr")) Or IsEmpty(Range("vBLInstr"))) And _
     (IsNull(Range("vShpName")) Or IsEmpty(Range("vShpName"))) And (IsNull(Range("vShpAdr1")) Or IsEmpty(Range("vShpAdr1"))) And (IsNull(Range("vShpAdr2")) Or IsEmpty(Range("vShpAdr2"))) And (IsNull(Range("vShpAdr3")) Or IsEmpty(Range("vShpAdr3"))) And _
     (IsNull(Range("vShpAdr4")) Or IsEmpty(Range("vShpAdr4"))) And (IsNull(Range("vConsgName")) Or IsEmpty(Range("vConsgName"))) And (IsNull(Range("vConsgAdr1")) Or IsEmpty(Range("vConsgAdr1"))) And (IsNull(Range("vConsgAdr2")) Or IsEmpty(Range("vConsgAdr2"))) And _
     (IsNull(Range("vConsgAdr3")) Or IsEmpty(Range("vConsgAdr3"))) And (IsNull(Range("vConsgAdr4")) Or IsEmpty(Range("vConsgAdr4"))) And (IsNull(Range("vNot1Name")) Or IsEmpty(Range("vNot1Name"))) And (IsNull(Range("vNot1Adr1")) Or IsEmpty(Range("vNot1Adr1"))) And _
     (IsNull(Range("vNot1Adr2")) Or IsEmpty(Range("vNot1Adr2"))) And (IsNull(Range("vNot1Adr3")) Or IsEmpty(Range("vNot1Adr3"))) And (IsNull(Range("vNot1Adr4")) Or IsEmpty(Range("vNot1Adr4"))) And (IsNull(Range("vNot2Name")) Or IsEmpty(Range("vNot2Name"))) And _
     (IsNull(Range("vNot2Adr1")) Or IsEmpty(Range("vNot2Adr1"))) And (IsNull(Range("vNot2Adr2")) Or IsEmpty(Range("vNot2Adr2"))) And (IsNull(Range("vNot2Adr3")) Or IsEmpty(Range("vNot2Adr1"))) And (IsNull(Range("vNot2Adr2")) Or IsEmpty(Range("vNot2Adr4"))) And _
     (IsNull(Range("vForAgtName")) Or IsEmpty(Range("vForAgtName"))) And (IsNull(Range("vForAgtAdr1")) Or IsEmpty(Range("vForAgtAdr1"))) And (IsNull(Range("vForAgtAdr2")) Or IsEmpty(Range("vForAgtAdr2"))) And (IsNull(Range("vForAgtAdr3")) Or IsEmpty(Range("vForAgtAdr3"))) And _
     (IsNull(Range("vForAgtAdr4")) Or IsEmpty(Range("vForAgtAdr4"))) And (IsNull(Range("vFrePayName")) Or IsEmpty(Range("vFrePayName"))) And (IsNull(Range("vFrePayAdr1")) Or IsEmpty(Range("vFrePayAdr1"))) And (IsNull(Range("vFrePayAdr2")) Or IsEmpty(Range("vFrePayAdr2"))) And _
     (IsNull(Range("vFrePayAdr3")) Or IsEmpty(Range("vFrePayAdr3"))) And (IsNull(Range("vFrePayAdr4")) Or IsEmpty(Range("vFrePayAdr4"))) And (IsNull(Range("vFrePayPlace")) Or IsEmpty(Range("vFrePayPlace"))) And (IsNull(Range("vExpRef")) Or IsEmpty(Range("vExpRef"))) And _
     (IsNull(Range("vContact")) Or IsEmpty(Range("vContact"))) And (IsNull(Range("vEmail")) Or IsEmpty(Range("vEmail"))) And (IsNull(Range("vTelephone")) Or IsEmpty(Range("vTelephone"))) And (IsNull(Range("vFax")) Or IsEmpty(Range("vFax"))) And _
     (IsNull(Range("vVessel")) Or IsEmpty(Range("vVessel"))) And (IsNull(Range("vVoyage")) Or IsEmpty(Range("vVoyage"))) And (IsNull(Range("vPReceipt")) Or IsEmpty(Range("vPReceipt"))) And (IsNull(Range("vPLoading")) Or IsEmpty(Range("vPLoading"))) And _
     (IsNull(Range("vPDischarge")) Or IsEmpty(Range("vPDischarge"))) And (IsNull(Range("vPDelivery")) Or IsEmpty(Range("vPDelivery"))) And (IsNull(Range("vWUnit")) Or IsEmpty(Range("vWUnit"))) And (IsNull(Range("vMUnit")) Or IsEmpty(Range("vMUnit"))) And _
     chk_array_null("vContainer") And chk_array_null("vSeal1No") And chk_array_null("vSeal2No") And chk_array_null("vSeal3No") And chk_array_null("vSeal4No") And chk_array_null("vSeal5No") And chk_array_null("vMarksNo") And chk_array_null("vPkgCnt") And chk_array_null("vPkgTyp") And chk_array_null("vWeight") And chk_array_null("vNetWeight") And chk_array_null("vGoodsDesc") And chk_array_null("vMeasure") And _
     chk_array_null("vHarmonised") And _
     (IsNull(Range("vShpEORIRef")) Or IsEmpty(Range("vShpEORIRef"))) And (IsNull(Range("vConsgEORIRef")) Or IsEmpty(Range("vConsgEORIRef"))) And (IsNull(Range("vNot1EORIRef")) Or IsEmpty(Range("vNot1EORIRef"))) And _
     (IsNull(Range("vMethodOfPayment")) Or IsEmpty(Range("vMethodOfPayment"))) And (IsNull(Range("vBrokerName")) Or IsEmpty(Range("vBrokerName"))) And (IsNull(Range("vPaymentTerms")) Or IsEmpty(Range("vPaymentTerms"))) And _
     (IsNull(Range("vWComp")) Or IsEmpty(Range("vWComp"))) And (IsNull(Range("vWAddr1")) Or IsEmpty(Range("vWAddr1"))) And (IsNull(Range("vWAddr2")) Or IsEmpty(Range("vWAddr2"))) And _
     (IsNull(Range("vWAddr3")) Or IsEmpty(Range("vWAddr3"))) And (IsNull(Range("vWAddr4")) Or IsEmpty(Range("vWAddr4"))) And (IsNull(Range("vWContact")) Or IsEmpty(Range("vWContact"))) And _
     (IsNull(Range("vWEmail")) Or IsEmpty(Range("vWEmail"))) And (IsNull(Range("vWPhone")) Or IsEmpty(Range("vWPhone"))) And (IsNull(Range("vWCertID")) Or IsEmpty(Range("vWCertID"))) And _
     (IsNull(Range("vVgmDate")) Or IsEmpty(Range("vVgmDate"))) And (IsNull(Range("vVgmTime")) Or IsEmpty(Range("vVgmTime"))) And (IsNull(Range("vVgmLcn")) Or IsEmpty(Range("vVgmLcn"))) And (IsNull(Range("vVgmCnty")) Or IsEmpty(Range("vVgmCnty"))) And _
     chk_array_null("vVgmMethod") And chk_array_null("vVGM") And _
     chk_array_null("VgmDate") And chk_array_null("VgmTime") And chk_array_null("VgmLcn") And chk_array_null("VgmCountry") And chk_array_null("CompName") And chk_array_null("CompAddrOne") And chk_array_null("CompAddrTwo") And _
     chk_array_null("CompAddrThree") And chk_array_null("CompAddrFour") And chk_array_null("Contact") And chk_array_null("Email") And chk_array_null("Tel") And chk_array_null("CertID") And _
     (IsNull(Range("vPreCarriage")) Or IsEmpty(Range("vPreCarriage"))) Then 'AS12158
     allow_exit_clear = True
  Else
     allow_exit_clear = False
  End If
  
End Function

Sub To_Exit()

  vExit = True
  
  If allow_exit_clear = False Then
  
    Msg = "Are you sure to exit the application ?"    ' Define message.
    Style = vbYesNo + vbQuestion + vbDefaultButton2    ' Define buttons.
    Title = "Exit Application"
    
    Response = MsgBox(Msg, Style, Title, Help, Ctxt)
  
    If Response = vbYes Then    ' User want to quit
      ' Start of EU16003
      Msg = "Do you want to save the changes before exit ? "
      Title = "Warning"
      
      Response = MsgBox(Msg, Style, Title, Help, Ctxt)
      
      fName = True
      
      If Response = vbYes Then 'quit with save
        fName = Application.GetSaveAsFilename(fileFilter:="Excel Files (*.xls), *.xls") 'AS11168
     
        If fName <> False Then 'not cancelled save
            On Error GoTo ErrorHandler:
            ThisWorkbook.SaveAs Filename:=fName
            Application.ScreenUpdating = False
            ThisWorkbook.Workbook_BeforeClose (False)
            Application.ScreenUpdating = True
            
            ThisWorkbook.Saved = True
            vExit = True
            ThisWorkbook.Close SaveChanges:=False
        End If
      Else 'quit without save
        Application.ScreenUpdating = False
        HideSheets
        Application.ScreenUpdating = True
        
        ThisWorkbook.Saved = True
        vExit = True
        ThisWorkbook.Close SaveChanges:=False
      End If
      ' End of EU16003
      
    Else 'User does not want to quit
      vExit = False
    End If

  Else
    Application.ScreenUpdating = False
    HideSheets
    ' ThisWorkbook.Close
    ThisWorkbook.Saved = True
    ThisWorkbook.Close SaveChanges:=False
    Application.ScreenUpdating = True
  End If
  
' Start of EU16003
ErrorHandler:
    Exit Sub
' End of EU16003
  
End Sub

Sub Clear_Content()

    Application.ScreenUpdating = False
   
    Multi_Bookings.Activate
    Range("mBookingList").Select
    Selection.ClearContents
  
    Main.Activate

    'Carrier Booking
    Range("vCarBook").Select
    Selection.ClearContents

    'Carrier BL
    Range("vCarBL").Select
    Selection.ClearContents

    'Service Contract No
    Range("vSvrCntr").Select
    Selection.ClearContents
  
    'BL Type
    Range("vBLType").Select
    Selection.ClearContents
  
    'Issue Type
    Range("vIsuType").Select
    Selection.ClearContents
  
    'No of Originals
    Range("vNoOrgl").Select
    Selection.ClearContents
     
    'BL Instruction
    Range("vIsuType").Select
    Selection.ClearContents
  
    'No of Copies
    Range("vNoCopy").Select
    Selection.ClearContents
  
    'Shipper Reference
    Range("vShpRef").Select
    Selection.ClearContents
  
    'BL Instruction
    Range("vBLInstr").Select
    Selection.ClearContents
  
    'Shipper Name
    Range("vShpName").Select
    Selection.ClearContents
  
    'Shipper Address
    Range("vShpAdr1").Select
    Selection.ClearContents
  
    Range("vShpAdr2").Select
    Selection.ClearContents

    Range("vShpAdr3").Select
    Selection.ClearContents
  
    Range("vShpAdr4").Select
    Selection.ClearContents
  
    'Consignee Name
    Range("vConsgName").Select
    Selection.ClearContents
  
    'Consignee Address
    Range("vConsgAdr1").Select
    Selection.ClearContents
  
    Range("vConsgAdr2").Select
    Selection.ClearContents
  
    Range("vConsgAdr3").Select
    Selection.ClearContents
  
    Range("vConsgAdr4").Select
    Selection.ClearContents
  
    'Notify 1 Name
    Range("vNot1Name").Select
    Selection.ClearContents
  
    'Notify 1 Address
    Range("vNot1Adr1").Select
    Selection.ClearContents
  
    Range("vNot1Adr2").Select
    Selection.ClearContents
  
    Range("vNot1Adr3").Select
    Selection.ClearContents
  
    Range("vNot1Adr4").Select
    Selection.ClearContents
  
    'Notify 2 Name
    Range("vNot2Name").Select
    Selection.ClearContents
  
    'Notify1 Address
    Range("vNot2Adr1").Select
    Selection.ClearContents
  
    Range("vNot2Adr2").Select
    Selection.ClearContents
  
    Range("vNot2Adr3").Select
    Selection.ClearContents
  
    Range("vNot2Adr4").Select
    Selection.ClearContents
  
    'Forwarding Agent Name
    Range("vForAgtName").Select
    Selection.ClearContents
  
    'Forwarding Agent Address
    Range("vForAgtAdr1").Select
    Selection.ClearContents
  
    Range("vForAgtAdr2").Select
    Selection.ClearContents
  
    Range("vForAgtAdr3").Select
    Selection.ClearContents
  
    Range("vForAgtAdr4").Select
    Selection.ClearContents
  
    'Freight Payer Name
    Range("vFrePayName").Select
    Selection.ClearContents
  
    'Frieght Payer Address
    Range("vFrePayAdr1").Select
    Selection.ClearContents
  
    Range("vFrePayAdr2").Select
    Selection.ClearContents
  
    Range("vFrePayAdr3").Select
    Selection.ClearContents
  
    Range("vFrePayAdr4").Select
    Selection.ClearContents
  
    ' Start of LN15047
    Range("vWComp").Select
    Selection.ClearContents
    
    Range("vWAddr1").Select
    Selection.ClearContents
    
    Range("vWAddr2").Select
    Selection.ClearContents
    
    Range("vWAddr3").Select
    Selection.ClearContents
    
    Range("vWAddr4").Select
    Selection.ClearContents
    
    Range("vWContact").Select
    Selection.ClearContents
    
    Range("vWEmail").Select
    Selection.ClearContents
    
    Range("vWPhone").Select
    Selection.ClearContents
    
    Range("vWCertID").Select
    Selection.ClearContents
    ' End of LN15047
  
    'Freight Payment Place
    Range("vFrePayPlace").Select
    Selection.ClearContents
  
    'Export Reference
    Range("vExpRef").Select
    Selection.ClearContents
  
    'Contact
    Range("vContact").Select
    Selection.ClearContents
  
    'Email
    Range("vEmail").Select
    Selection.ClearContents
  
    'Telephone
    Range("vTelephone").Select
    Selection.ClearContents
  
    'Fax
    Range("vFax").Select
    Selection.ClearContents
    
    'Pre-Carriage AS12158
    Range("vPreCarriage").Select
    Selection.ClearContents
    
    'Vessel
    Range("vVessel").Select
    Selection.ClearContents
  
    'Voyage
    Range("vVoyage").Select
    Selection.ClearContents
  
    'Place of Receipt
    Range("vPReceipt").Select
    Selection.ClearContents
  
    'Port of Loading
    Range("vPLoading").Select
    Selection.ClearContents
  
    'Port of Discharge
    Range("vPDischarge").Select
    Selection.ClearContents
  
    'Place of Delivery
    Range("vPDelivery").Select
    Selection.ClearContents
  
    ' Start of LN15047
    Range("vVgmDate").Select
    Selection.ClearContents
    
    Range("vVgmTime").Select
    Selection.ClearContents
    
    Range("vVgmLcn").Select
    Selection.ClearContents
    
    Range("vVgmCnty").Select
    Selection.ClearContents
    ' End of LN15047
  
    'Weight Unit
    Range("vWUnit").Select
    Selection.ClearContents
  
    'Measurement Unit
    Range("vMUnit").Select
    Selection.ClearContents
    
    'EU10136 EORI Reference & Method of Payment
    Range("vShpEORIRef").Select
    Selection.ClearContents
    
    Range("vConsgEORIRef").Select
    Selection.ClearContents
    
    Range("vNot1EORIRef").Select
    Selection.ClearContents
    
    Range("vMethodOfPayment").Select
    Selection.ClearContents
  
    'AS12005 Desk Top Web SI tool few changes to be done
    Range("vBrokerName").Select
    Selection.ClearContents
    
    Range("vPaymentTerms").Select
    Selection.ClearContents
  
    'This method will use a lot of time in clearing the content
'    For rwIndex = 1 To 300
'      Range("vContainer" & rwIndex).Select
'      Selection.ClearContents
'
'      Range("vSeal1No" & rwIndex).Select
'      Selection.ClearContents
'
'      Range("vSeal2No" & rwIndex).Select
'      Selection.ClearContents
'
'      Range("vPkgCnt" & rwIndex).Select
'      Selection.ClearContents
'
'      Range("vWeight" & rwIndex).Select
'      Selection.ClearContents
'
'      Range("vPkgTyp" & rwIndex).Select
'      Selection.ClearContents
'
'      Range("vMeasure" & rwIndex).Select
'      Selection.ClearContents
'
'      Range("vMarksNo" & rwIndex).Select
'      Selection.ClearContents
'
'      Range("vGoodsDesc" & rwIndex).Select
'      Selection.ClearContents
'
'      Range("vNetWeight" & rwIndex).Select
'      Selection.ClearContents
'
'      Range("vHarmonised" & rwIndex).Select
'      Selection.ClearContents
'
'      Range("vConVgmMet" & rwIndex).Select
'      Selection.ClearContents
'
'      Range("vConVGM" & rwIndex).Select
'      Selection.ClearContents
'    Next rwIndex
    
    'Container No
    Range("A69:A368").Select
    Selection.ClearContents
  
    'Seal No 1
    Range("B69:B368").Select
    Selection.ClearContents

    'Seal No 2
    Range("C69:C368").Select
    Selection.ClearContents

    'Seal No 3
    Range("D69:D368").Select
    Selection.ClearContents
    
    'Seal No 4
    Range("E69:E368").Select
    Selection.ClearContents
    
    'Seal No 5
    Range("F69:F368").Select
    Selection.ClearContents

    'Pkg Count
    Range("G69:G368").Select
    Selection.ClearContents

    'Gross Weight
    Range("H69:H368").Select
    Selection.ClearContents

    'Pkg Type
    Range("I69:I368").Select
    Selection.ClearContents

    'Measurement
    Range("J69:J368").Select
    Selection.ClearContents

    'Marks & Nos
    Range("K69:K368").Select
    Selection.ClearContents

    'Goods Description
    Range("L69:L368").Select
    Selection.ClearContents

    'AS10014 - NetWeight
    Range("M69:M368").Select
    Selection.ClearContents

    'EU10136 Harmonised Commodity
    Range("N69:N368").Select
    Selection.ClearContents
  
    'LN15047 - VGM Method
    Range("O69:O368").Select
    Selection.ClearContents
    
    'LN15047 - VGM Value
    Range("P69:P368").Select
    Selection.ClearContents
  
    'LN15047 - additional VGM details
    Weighing_Comp.UsedRange.ClearContents
      
    Application.ScreenUpdating = True
    Range("vCarBook").Select
    
End Sub

Sub To_Clear()

  If allow_exit_clear = False Then

    Msg = "Are you sure to clear the content ?"    ' Define message.
    Style = vbYesNo + vbQuestion + vbDefaultButton2    ' Define buttons.
    Title = "Clear Content"
  
    Response = MsgBox(Msg, Style, Title, Help, Ctxt)
    If Response = vbYes Then    ' User chose Yes.
      Clear_Content
    End If
    
  End If
  
End Sub

Sub To_SaveAs()
    vExit = True
    fName = Application.GetSaveAsFilename(fileFilter:="Excel Files (*.xls), *.xls") 'AS11168
     
    If fName <> False Then
        On Error GoTo ErrorHandler:
        ThisWorkbook.SaveAs Filename:=fName
        Application.ScreenUpdating = False
        ThisWorkbook.Workbook_BeforeClose (False)
        ThisWorkbook.Workbook_Open
        Auto_Open
        Application.ScreenUpdating = True
    End If
    Exit Sub
    
ErrorHandler:
    Exit Sub
End Sub

Sub HideSheets()
   revert_setting
   
   With Macros
       .Visible = xlSheetVisible        '
       For Each oWs In Sheets
           If Not oWs.CodeName = "Macros" Then
               oWs.Visible = xlSheetVeryHidden
           End If
       Next oWs
    End With
       ' ThisWorkbook.Save
End Sub
 Sub Workbook_BeforeClose(Cancel As Boolean)
 
   revert_setting
  
   With Application
       .EnableCancelKey = xlDisabled
       '.ScreenUpdating = False
        
       Call HideSheets
        
       '.ScreenUpdating = True
       .EnableCancelKey = xlInterrupt
   End With

End Sub

Attribute VB_Name = "Multi_Bookings"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
   Dim oWs As Object '< Includes worksheets and chartsheets
Private Sub UnhideSheets()

   For Each oWs In Sheets
      If Not oWs.CodeName = "Macros" Then
         oWs.Visible = xlSheetVisible
      End If
   Next oWs
    
   Macros.Visible = xlSheetVeryHidden
   Set oWs = Nothing
   ThisWorkbook.Saved = True
    
   Main.Activate
End Sub
 
Private Sub Workbook_Deactivate() 'AS12158
Dim v_Path As String

   If Not (Application.ActiveWorkbook.Sheets(1).Range("B1") = "Advance SI Desktop" And _
           Application.ActiveWorkbook.Sheets(1).Range("F6") = "Message Version" And _
           Application.ActiveWorkbook.Sheets(1).CodeName = "Main") Then
      v_Path = ActiveWorkbook.FullName
      Application.ActiveWorkbook.Close
      
      Dim appXL As New Excel.Application
      appXL.Workbooks.Open v_Path
      appXL.Visible = True
   End If
   
End Sub

Sub Workbook_Open()
Dim i As Integer

   With Application
        'disable the ESC key
       .EnableCancelKey = xlDisabled
       .ScreenUpdating = False
        
       Call UnhideSheets
        
       .ScreenUpdating = True
        're-enable ESC key
       .EnableCancelKey = xlInterrupt
   End With
    
End Sub

Sub HideSheets()
   With Macros
       .Visible = xlSheetVisible        '
       For Each oWs In Sheets
           If Not oWs.CodeName = "Macros" Then
               oWs.Visible = xlSheetVeryHidden
           End If
       Next oWs
       End With
       ThisWorkbook.Save
End Sub

Sub Workbook_BeforeClose(Cancel As Boolean)
 
   If Not vExit And ActiveSheet.ProtectScenarios Then
     MsgBox "Please click [Exit] button to quit", vbOKOnly + vbExclamation, "Exit Application"
     Me.Saved = True
     Cancel = True
     End
   End If

   revert_setting
     
   With Application
       .EnableCancelKey = xlDisabled
       .ScreenUpdating = False
       
       Call HideSheets
      
       .ScreenUpdating = True
       .EnableCancelKey = xlInterrupt
   End With

End Sub

Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{827D9BD2-C601-4922-BD7A-0FE44E96E4AC}{3965B18B-97B6-437E-A628-1BF89E9634CB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "VGMForm"
Attribute VB_Base = "0{FFDB1D26-1EE1-449B-8860-FAEE04C2D096}{5A9FB6C5-9E40-475E-A3D0-A25D6C6073BC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' Start of LN15047
Dim Idx As Integer


Private Sub ClearButton_Click()
    Dim ctl As Control

    Call UserForm_Initialize

    For Each ctl In Me.Controls
        Select Case TypeName(ctl)
            Case "TextBox"
                ctl.Value = ""
        End Select
    Next ctl
    
    CountryComboBox.Value = ""
End Sub



Private Function Save_VGM()

  ' Validation
  If check_date_format(VgmDate) = False Or Len(Trim(VgmDate.Value)) > 8 Then
        MsgBox "Date format of VGM Date should be YYYYMMDD (e.g. 20160408 for 08-Apr-2016)", vbCritical, "Invalid Entry"
        Exit Function
  Else
     If handle_non_asc_char(VgmDate.Value, "TEXT") = False Then
        MsgBox "VGM Date contains non-ascii character "
        Exit Function
     Else
        Weighing_Comp.Range("vgmDate" & Idx).Value = Trim(VgmDate.Value)
     End If
  End If
  
  If check_time_format(VgmTime) = False Or Len(Trim(VgmTime.Value)) > 4 Then
        MsgBox "Format of VGM Time should be HHMM (e.g. 2359 for 23:59 [11:59 P.M.])", vbCritical, "Invalid Entry"
        Exit Function
  Else
     If handle_non_asc_char(VgmTime.Value, "TEXT") = False Then
        MsgBox "VGM Time contains non-ascii character "
        Exit Function
     Else
        Weighing_Comp.Range("vgmTime" & Idx).Value = Trim(VgmTime.Value)
     End If
  End If
  
  If Len(Trim(VgmLcn.Value)) > 35 Then
        MsgBox "The maximum length of VGM Location is 35 characters."
        Exit Function
  Else
     If handle_non_asc_char(VgmLcn.Value, "TEXT") = False Then
        MsgBox "VGM Location contains non-ascii character "
        Exit Function
     Else
        Weighing_Comp.Range("VgmLcn" & Idx).Value = Trim(VgmLcn.Value)
     End If
  End If
  
  Weighing_Comp.Range("vgmCountry" & Idx).Value = CountryComboBox.Value
  
  If Len(Trim(CompName.Value)) > 35 Then
        MsgBox "The maximum length of Weighing Company Name is 35 characters."
        Exit Function
  Else
     If handle_non_asc_char(CompName.Value, "TEXT") = False Then
        MsgBox "Weighing Company Name contains non-ascii character "
        Exit Function
     Else
        Weighing_Comp.Range("CompName" & Idx).Value = Trim(CompName.Value)
     End If
  End If
  
  If Len(Trim(CompAddr1.Value)) > 35 Or Len(Trim(CompAddr2.Value)) > 35 Or Len(Trim(CompAddr3.Value)) > 35 Or Len(Trim(CompAddr4.Value)) > 35 Then
        MsgBox "The maximum length for each line of Weighing Company Address is 35 characters."
        Exit Function
  Else
     If handle_non_asc_char(CompAddr1.Value, "TEXT") = False Or _
        handle_non_asc_char(CompAddr2.Value, "TEXT") = False Or _
        handle_non_asc_char(CompAddr3.Value, "TEXT") = False Or _
        handle_non_asc_char(CompAddr4.Value, "TEXT") = False Then
        MsgBox "Weighing Company Address contains non-ascii character "
        Exit Function
     Else
        Weighing_Comp.Range("CompAddrOne" & Idx).Value = Trim(CompAddr1.Value)
        Weighing_Comp.Range("CompAddrTwo" & Idx).Value = Trim(CompAddr2.Value)
        Weighing_Comp.Range("CompAddrThree" & Idx).Value = Trim(CompAddr3.Value)
        Weighing_Comp.Range("CompAddrFour" & Idx).Value = Trim(CompAddr4.Value)
     End If
  End If
  
  If Len(Trim(Contact.Value)) > 35 Then
        MsgBox "The maximum length of Weighing Company Contact Name is 35 characters."
        Exit Function
  Else
     If handle_non_asc_char(Contact.Value, "TEXT") = False Then
        MsgBox "Weighing Company Contact Name contains non-ascii character "
        Exit Function
     Else
        Weighing_Comp.Range("Contact" & Idx).Value = Trim(Contact.Value)
     End If
  End If
  
  If Len(Trim(Email.Value)) > 80 Then
        MsgBox "The maximum length of Weighing Company Contact Email is 80 characters."
        Exit Function
  Else
    If Len(Email.Value) > 0 And _
          (InStr(1, Email.Value, "@") <= 1 Or _
            InStrRev(Email.Value, ".") - 1 <= InStr(1, Email.Value, "@") Or _
            InStrRev(Email.Value, ".") = Len(Trim(Email.Value))) Then 'a@a.a
        MsgBox "The Weighing Company Contact Email is invalid.", vbCritical, "Invalid Entry"
        Exit Function
    Else
     If handle_non_asc_char(Email.Value, "TEXT") = False Then
        MsgBox "Weighing Company Contact Email contains non-ascii character "
        Exit Function
     Else
        Weighing_Comp.Range("Email" & Idx).Value = Trim(Email.Value)
     End If
    End If
  End If
  
  If Len(Trim(Tel.Value)) > 25 Then
        MsgBox "The maximum length of Weighing Company Contact Phone is 25 characters."
        Exit Function
  Else
     If handle_non_asc_char(Tel.Value, "TEXT") = False Then
        MsgBox "Weighing Company Telephone contains non-ascii character "
        Exit Function
     Else
        Weighing_Comp.Range("Tel" & Idx).Value = Trim(Tel.Value)
     End If
  End If
  
  If Len(Trim(CertID.Value)) > 50 Then
        MsgBox "The maximum length of Weighing Company Certification ID is 50 characters."
        Exit Function
  Else
     If handle_non_asc_char(CertID.Value, "TEXT") = False Then
        MsgBox "Weighing Company Certification ID contains non-ascii character "
        Exit Function
     Else
        Weighing_Comp.Range("CertID" & Idx).Value = Trim(CertID.Value)
     End If
  End If
  
  'name needs to be input if the address is not null
  If Len(Trim(CompAddr1)) > 0 Or Len(Trim(CompAddr2)) > 0 Or Len(Trim(CompAddr3)) > 0 Or Len(Trim(CompAddr4)) > 0 Then
    If IsNull(CompName) Or IsEmpty(CompName) Or Len(Trim(CompName)) = 0 Then
      MsgBox "Please input Weighing Company Name if the address exists", vbCritical, "Invalid Entry"
      Exit Function
    End If
  End If
  
  'name needs to be input if the VGM date, time, contact, telephone or email is not null
  If Len(Trim(VgmDate)) > 0 Or Len(Trim(VgmTime)) > 0 Or Len(Trim(Contact)) > 0 Or _
     Len(Trim(Tel)) > 0 Or Len(Trim(Email)) > 0 Then
    If IsNull(CompName) Or IsEmpty(CompName) Or Len(Trim(CompName)) = 0 Then
      MsgBox "Please input Weighing Company Name if the VGM date, time, contact, telephone or email exists", vbCritical, "Invalid Entry"
      Exit Function
    End If
  End If
  
  'weighing company contact needs to be input if the telephone or email is not null
  If Len(Trim(Tel)) > 0 Or Len(Trim(Email)) > 0 Then
    If IsNull(Contact) Or IsEmpty(Contact) Or Len(Trim(Contact)) = 0 Then
      MsgBox "Please input Weighing Company Contact if the weighing company telephone or email exists", vbCritical, "Invalid Entry"
      Exit Function
    End If
  End If
  
  'VGM date needs to be input if the time is not null
  If Len(Trim(VgmTime)) > 0 Then
    If IsNull(VgmDate) Or IsEmpty(VgmDate) Or Len(Trim(VgmDate)) = 0 Then
      MsgBox "Please input VGM Date if the VGM Time exists", vbCritical, "Invalid Entry"
      Exit Function
    End If
  End If
  
  Save_VGM = True

End Function

Private Sub SaveCloseButton_Click()
  If Save_VGM = False Then
    Exit Sub
  End If

  Unload Me
End Sub

Private Sub UserForm_Initialize()
    Dim cnty As Range, c As Range
    
    ' Set container number
    Idx = Lookup_General.Range("conIdx").Value
    containerNo.Caption = Main.Range("vContainer" & Idx).Value
    
    ' Get and show the previously saved values
    VgmDate.Value = Weighing_Comp.Range("vgmDate" & Idx).Value
    VgmTime.Value = Weighing_Comp.Range("vgmTime" & Idx).Value
    VgmLcn.Value = Weighing_Comp.Range("VgmLcn" & Idx).Value
    CountryComboBox.Value = Weighing_Comp.Range("vgmCountry" & Idx).Value
    CompName.Value = Weighing_Comp.Range("CompName" & Idx).Value
    CompAddr1.Value = Weighing_Comp.Range("CompAddrOne" & Idx).Value
    CompAddr2.Value = Weighing_Comp.Range("CompAddrTwo" & Idx).Value
    CompAddr3.Value = Weighing_Comp.Range("CompAddrThree" & Idx).Value
    CompAddr4.Value = Weighing_Comp.Range("CompAddrFour" & Idx).Value
    Contact.Value = Weighing_Comp.Range("Contact" & Idx).Value
    Email.Value = Weighing_Comp.Range("Email" & Idx).Value
    Tel.Value = Weighing_Comp.Range("Tel" & Idx).Value
    CertID.Value = Weighing_Comp.Range("CertID" & Idx).Value
        
    ' Prepare list of country of verification
    Set cnty = Lookup_Country.Range("AllCountry")
    For Each c In cnty
        CountryComboBox.AddItem c
    Next c
    
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
 
  If CloseMode = vbFormControlMenu Then
    Cancel = True
    MsgBox "Please click the Close button to close the window.", vbInformation
  End If
End Sub

' End of LN15047
Attribute VB_Name = "Weighing_Comp"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
