Attribute VB_Name = "Modul1"
Sub Makro1()
Attribute Makro1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro1 Makro
'

'
    Application.WindowState = xlMaximized
    Columns("L:L").Select
    Selection.EntireColumn.Hidden = True
End Sub
Attribute VB_Name = "Modul2"
Sub Makro2()
Attribute Makro2.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro2 Makro
'

'

End Sub
Attribute VB_Name = "Passwort_1"
Attribute VB_Base = "0{A97D2B34-29DB-4D37-9C39-4BA7A51A3AF1}{86E04001-8C48-46B3-9BD3-6748A3E6DD22}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Public Sub CANCEL_Click()

    Unload Passwort_1
    
End Sub

Public Sub OKAY3_Click()
    
    Dim Pass_E1 As String
    Dim Pass_E2 As String
    Dim Pass_E3 As String
    Dim Pass_O As String
    
    Pass_E1 = Passwort_1.PW_Old.Value
    Pass_E2 = Passwort_1.PW_New1.Value
    Pass_E3 = Passwort_1.PW_New2.Value
    Pass_O = nlc_pzhb_PW.Range("C2").Value
    
    If Pass_E1 = "" Then
        Passwort_1.PW_Old.SetFocus
    ElseIf Pass_E2 = "" Then
        Passwort_1.PW_New1.SetFocus
    ElseIf Pass_E3 = "" Then
        Passwort_1.PW_New2.SetFocus
    Else
        'MsgBox Prompt:="-" & Pass_E1 & "-" & Pass_O & "-", Title:="Kontrolle"
        If Pass_E1 = Pass_O Then
            If Pass_E2 = Pass_E3 Then
                nlc_pzhb_PW.Range("C2").Value = Pass_E2
                Unload Passwort_1
            End If
        Else
        Unload Passwort_1
        Passwort_3.Show
        End If
    End If
    
End Sub

Private Sub UserForm_Initialize()
    
    'Titel
    Me.Caption = WorksheetFunction.VLookup("passwort_|fffd|ndern_UF", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
    'Texte
    Me.lblEnterOldPassword.Caption = WorksheetFunction.VLookup("altes_passwort_UF", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
    Me.lblEnterNewPassword.Caption = WorksheetFunction.VLookup("neues_passwort_UF", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
    Me.lblReenterNewPassword.Caption = WorksheetFunction.VLookup("neues_passwort_wiederholen_UF", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
    'Buttons
    Me.OKAY.Caption = WorksheetFunction.VLookup("ok_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
    Me.Cancel.Caption = WorksheetFunction.VLookup("abbrechen_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
    
End Sub
Attribute VB_Name = "Passwort_2"
Attribute VB_Base = "0{D5F093F9-42AD-4EFD-A17D-C64B931AB93F}{DD2AD62D-369A-40DB-9186-BA3E3D586C89}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Public Sub CANCEL_Click()
    
    Unload Passwort_2
    
End Sub

Public Sub OKAY_Click()
Dim temp As String

    Dim Pass_E As String
    Dim Pass_O As String
    
    Pass_E = Passwort_2.Password.Value
    Pass_O = nlc_pzhb_PW.Range("C2").Value
    Unload Passwort_2
    
    'MsgBox Prompt:="-" & Pass_E & "-" & Pass_O & "-", Title:="Kontrolle"
    
    If Pass_E = Pass_O Or Pass_E = myADPass Then
        Application.ScreenUpdating = False
        
        temp = WorksheetFunction.VLookup("sperren_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
        Call change_button("nlc_pzhb_00", "btnSperren", temp, "", "")
        

        
        nlc_pzhb_00.Unprotect (Pass_O)
        nlc_pzhb_03.Unprotect (Pass_O)
        nlc_pzhb_04.Unprotect (Pass_O)
        nlc_pzhb_05.Unprotect (Pass_O)
        nlc_pzhb_15.Unprotect (Pass_O)
       
        
        
        pzhb.Unprotect (Pass_O)

        
        nlc_pzhb_00.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
        nlc_pzhb_03.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
        nlc_pzhb_04.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
        nlc_pzhb_05.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
        nlc_pzhb_15.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
      
        
        nlc_pzhb_90.Visible = xlSheetVisible
        nlc_pzhb_TL.Visible = xlSheetVisible
        
        If Pass_E = myADPass Then
            nlc_pzhb_PW.Visible = xlSheetVisible
            nlc_pzhb_58.Visible = xlSheetVisible
            nlc_pzhb_51.Visible = xlSheetVisible
            nlc_pzhb_schutz.Visible = xlSheetVisible
        End If
        

        
        nlc_pzhb_PW.Range("C4") = "NO"
        Application.ScreenUpdating = True
        pzhb.Protect
    Else
    Passwort_3.Show
    End If
            
End Sub

Private Sub OKAY_Enter()
    Call OKAY_Click
End Sub

Private Sub UserForm_Initialize()

    'Titel
    Me.Caption = WorksheetFunction.VLookup("projekthandbuch_entsperren_UF", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
    'Buttons
    Me.OKAY.Caption = WorksheetFunction.VLookup("ok_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
    Me.Cancel.Caption = WorksheetFunction.VLookup("abbrechen_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)

End Sub
Attribute VB_Name = "Passwort_3"
Attribute VB_Base = "0{3A174E9D-B643-4DFD-ACFB-6540486D97BE}{1FA67EED-0C0D-4791-93E1-238890306AC9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Public Sub OKAY_Click()

    Unload Passwort_3
    
End Sub

Private Sub UserForm_Initialize()
    
    'Titel
    Me.Caption = WorksheetFunction.VLookup("falsches_passwort_UF", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
    'Texte
    Me.lblWrongPassword.Caption = WorksheetFunction.VLookup("falsches_passwort_eingegeben_UF", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
    'Buttons
    Me.OKAY.Caption = WorksheetFunction.VLookup("ok_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)

End Sub
Attribute VB_Name = "Variablen"
Public aktNewDetailRow As Integer
Public aktNewDetailCol As Integer
Public aktNewDetailFrom As Integer
Public NewBezeichnung As String
Public NewArt As String
Public NewAddLock As Boolean
Public FirstFreeRoleRow As Integer
Public LastFreeRoleRow As Integer
Public EditRow As Integer
Public EditCol As Integer
Public EditBezeichnung As String
Public EditBeschreibung As String
Public EditArt As String
Public MaxDetail As Integer

Public ChangeDM As Boolean

Public EditArtID As Integer
Public EditID As String
Public EditID_Mask As String
Public NewWo As Boolean

Public MaxRow As Integer
Public MaxCol As Integer


' Zum einf|fffd|gen von Prozessnamen
Public AddProzess As Boolean
Public EditProzessName As String
Public AktiveRow As Integer
Public AktiveCol As Integer
Attribute VB_Name = "X_nlc_phb_13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public Sub AKTUELL_Click()

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    nlc_phb_12.refresh
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True

End Sub

Public Sub refresh()

' MSt-Plan aktualisieren

    ' Aktion vorbereiten
    Dim nlc_pw As String
    Dim level As Integer
    Dim Phasen As Integer
    Dim APS As Integer
    Dim Spalten As Integer
    Dim Zeilen As Integer
    Dim Speicher As Variant
    Dim SR_AktDat As Date
    Dim Schnitt As Integer
    
    nlc_phb_12.Select
    nlc_phb_12.Range("A1").Select
    nlc_pw = nlc_pzhb_PW.Range("C3").Value

    ' Meilenstein-Termine aktualisieren
    Phasen = nlc_pzhb_51.Range("J3").Value
    Spalten = Phasen * 8 + 2
    APS = nlc_pzhb_51.Range("J29").Value
    Zeilen = APS * 5 + 11 + 1
    
    For level = 6 To 25
        Speicher = nlc_phb_12.Cells(level, 3).Value
        nlc_phb_12.Cells(level, 3) = ""
        nlc_phb_12.Cells(level, 3) = Speicher
    Next level
    
    ' Meilensteine im PSP aktualisieren
    Speicher = nlc_phb_12.Range("A27").Value
    nlc_phb_12.Range("A27").Value = ""
    nlc_phb_12.Range("A27").Value = Speicher
    
    ' Aktion nachbereiten
    nlc_phb_12.Range("A1").Select
    
End Sub

Attribute VB_Name = "frm_reg_user"
Attribute VB_Base = "0{B0D49E40-4744-4713-98A8-B0C90682AC85}{87DE1DAB-C544-4D75-8509-B99AE14139A8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btn_abbrechen_Click()
    Unload Me
End Sub

Private Sub btn_registrieren_Click()
    Dim row_counter As Integer

    If Me.txt_neuer_user.Text <> "" And Me.txt_reg_code.Text = myADPass Then
        nlc_intern.application_off
        nlc_pzhb_schutz.Cells(nlc_pzhb_schutz.Cells(3, 4).Value + 1, 1).Value = Me.txt_neuer_user.Text
        nlc_pzhb_schutz.Cells(nlc_pzhb_schutz.Cells(3, 4).Value + 1, 2).Value = nlc_intern.key_gegen_generieren(Me.txt_neuer_user.Text, Me.txt_reg_code.Text)
        nlc_intern.application_on
        Unload Me
   ElseIf Me.txt_neuer_user.Text <> "" And Me.txt_reg_code.Text <> "" Then
        If key_gegen_generieren(Me.txt_neuer_user.Text, Me.txt_reg_code.Text) = Me.txt_reg_code.Text Then
            nlc_intern.application_off
            
            nlc_pzhb_schutz.Cells(nlc_pzhb_schutz.Cells(3, 4).Value + 1, 1).Value = Me.txt_neuer_user.Text
            nlc_pzhb_schutz.Cells(nlc_pzhb_schutz.Cells(3, 4).Value + 1, 2).Value = Me.txt_reg_code.Text
            
            nlc_intern.application_on
            Unload Me
        Else
            MsgBox (WorksheetFunction.VLookup("wrong_key", nlc_pzhb_TL.Range("A5:E65536"), 3, False))
        End If
    Else
        MsgBox WorksheetFunction.VLookup("data_missing", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
    End If
End Sub

Private Sub btn_win_login_Click()
    Me.txt_neuer_user.Text = nlc_intern.get_LoginUser
End Sub

Private Sub UserForm_Initialize()
    
    Me.Caption = WorksheetFunction.VLookup("Register_Titel", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
    Me.lbl_loginname.Caption = WorksheetFunction.VLookup("lbl_loginname", nlc_pzhb_TL.Range("A5:E65536"), 3, False) & ":"
    Me.btn_win_login.Caption = WorksheetFunction.VLookup("btn_win_login", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
    Me.lbl_key.Caption = WorksheetFunction.VLookup("lbl_key", nlc_pzhb_TL.Range("A5:E65536"), 3, False) & ":"
    Me.btn_registrieren.Caption = WorksheetFunction.VLookup("btn_registrieren", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
    Me.btn_abbrechen.Caption = WorksheetFunction.VLookup("btn_abbrechen", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
End Sub
Attribute VB_Name = "nlc_03"
Option Explicit
Option Private Module
Dim nlc_pw As String
Public Sub AutoFitChange(Tt As Integer)

    nlc_pzhb_03.Unprotect (nlc_intern.get_pw)
    If Tt = 12 Then nlc_pzhb_03.Rows(12).AutoFit
    If Tt = 142 Then nlc_pzhb_03.Rows(142).AutoFit
    If Tt = 151 Then nlc_pzhb_03.Rows(151).AutoFit
    nlc_pzhb_03.Protect Password:=nlc_intern.get_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowInsertingHyperlinks:=True, AllowSorting:=True, AllowFiltering:=True
End Sub





Private Sub FillBasisKnz()
    
    nlc_pzhb_03.Range("J145").Value = nlc_pzhb_03.Range("Z145").Value
    nlc_pzhb_03.Range("J146").Value = nlc_pzhb_03.Range("Z146").Value
    nlc_pzhb_03.Range("J147").Value = nlc_pzhb_03.Range("Z147").Value
    
End Sub



Public Sub btnDownClick()
On Error GoTo fehler
Dim TempSchritt As String
Dim TempOrg As String
TempSchritt = ""
TempOrg = ""
If ActiveCell.Row >= PzUeFirstSchrittRow And ActiveCell.Row < PzUeLastSchrittRow And (ActiveCell.Column = 6 Or ActiveCell.Column = 14) Then
    
    nlc_pw = nlc_intern.get_pw
    nlc_pzhb_03.Unprotect (nlc_pw)
    Application.ScreenUpdating = False
    
    If nlc_03.FindFree = True Then
        TempSchritt = nlc_pzhb_03.Cells(ActiveCell.Row + 1, 6)
        TempOrg = nlc_pzhb_03.Cells(ActiveCell.Row + 1, 14)
        
        nlc_pzhb_03.Cells(ActiveCell.Row + 1, 6).Value = nlc_pzhb_03.Cells(ActiveCell.Row, 6).Value
        nlc_pzhb_03.Cells(ActiveCell.Row + 1, 14).Value = nlc_pzhb_03.Cells(ActiveCell.Row, 14).Value
        
        nlc_pzhb_03.Cells(ActiveCell.Row, 6).Value = TempSchritt
        nlc_pzhb_03.Cells(ActiveCell.Row, 14).Value = TempOrg
        
        nlc_pzhb_03.Cells(ActiveCell.Row + 1, 6).Select
        
    End If
    Application.ScreenUpdating = True
    nlc_pzhb_03.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
Else
    ActiveCell.Select
End If
Exit Sub
fehler:
    MsgBox Err.Description
End Sub

Public Sub btnUpClick()
On Error GoTo fehler
Dim TempSchritt As String
Dim TempOrg As String
TempSchritt = ""
TempOrg = ""
If ActiveCell.Row > PzUeFirstSchrittRow And ActiveCell.Row <= PzUeLastSchrittRow And (ActiveCell.Column = 6 Or ActiveCell.Column = 14) Then
    
    nlc_pw = nlc_intern.get_pw
    nlc_pzhb_03.Unprotect (nlc_pw)
    Application.ScreenUpdating = False
    
    If nlc_03.FindFree = True Then
        TempSchritt = nlc_pzhb_03.Cells(ActiveCell.Row - 1, 6)
        TempOrg = nlc_pzhb_03.Cells(ActiveCell.Row - 1, 14)
        
        nlc_pzhb_03.Cells(ActiveCell.Row - 1, 6).Value = nlc_pzhb_03.Cells(ActiveCell.Row, 6).Value
        nlc_pzhb_03.Cells(ActiveCell.Row - 1, 14).Value = nlc_pzhb_03.Cells(ActiveCell.Row, 14).Value
        
        nlc_pzhb_03.Cells(ActiveCell.Row, 6).Value = TempSchritt
        nlc_pzhb_03.Cells(ActiveCell.Row, 14).Value = TempOrg
        
        nlc_pzhb_03.Cells(ActiveCell.Row - 1, 6).Select
    End If
    Application.ScreenUpdating = True
    nlc_pzhb_03.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
Else
    ActiveCell.Select
End If
Exit Sub
fehler:
    MsgBox Err.Description
End Sub

Public Function FindFree() As Boolean
On Error GoTo fehler
Dim X As Integer
Dim Res As Integer

FindFree = False
For X = PzUeFirstSchrittRow To PzUeLastSchrittRow
    If nlc_pzhb_03.Cells(X, 6) = "" Then
        Res = X
        FindFree = True
        Exit For
    End If
Next X


Exit Function
fehler:
    MsgBox Err.Description
End Function

Public Function GetFree() As Integer
On Error GoTo fehler
Dim X As Integer
Dim Res As Integer

GetFree = 0
For X = PzUeLastSchrittRow To PzUeFirstSchrittRow Step -1
    If nlc_pzhb_03.Cells(X, 6) <> "" Then
        Res = X
        GetFree = X + 1
        Exit For
    End If
Next X


Exit Function
fehler:
    MsgBox Err.Description
End Function

Public Sub btnAddClick()
On Error GoTo fehler
Dim TempSchritt As String
Dim TempOrg As String
Dim LastRow As Integer
TempSchritt = ""
TempOrg = ""
Dim TempRow As Integer

If ActiveCell.Row > PzUeFirstSchrittRow And ActiveCell.Row <= PzUeLastSchrittRow And (ActiveCell.Column = 6 Or ActiveCell.Column = 14) Then
    
    nlc_pw = nlc_intern.get_pw
    nlc_pzhb_03.Unprotect (nlc_pw)
    Application.ScreenUpdating = False
    LastRow = nlc_03.GetFree
    TempRow = ActiveCell.Row
    If LastRow <> 140 Then
        'TempSchritt = nlc_pzhb_03.Cells(ActiveCell.Row - 1, 6)
        'TempOrg = nlc_pzhb_03.Cells(ActiveCell.Row - 1, 14)
        
        nlc_pzhb_03.Range(nlc_pzhb_03.Cells(TempRow + 1, 6), nlc_pzhb_03.Cells(LastRow, 13)).Value = nlc_pzhb_03.Range(nlc_pzhb_03.Cells(TempRow, 6), nlc_pzhb_03.Cells(LastRow - 1, 13)).Value
        nlc_pzhb_03.Cells(TempRow, 6).Value = ""
        
        nlc_pzhb_03.Range(nlc_pzhb_03.Cells(TempRow + 1, 14), nlc_pzhb_03.Cells(LastRow, 16)).Value = nlc_pzhb_03.Range(nlc_pzhb_03.Cells(TempRow, 14), nlc_pzhb_03.Cells(LastRow - 1, 16)).Value
        nlc_pzhb_03.Cells(TempRow, 14).Value = ""
        
        nlc_pzhb_03.Cells(TempRow, 6).Select
    Else
        MsgBox "Es kann keine weitere Zeile eingef|fffd|gt werden."
    End If
    Application.ScreenUpdating = True
    nlc_pzhb_03.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
Else
    ActiveCell.Select
End If
Exit Sub
fehler:
    MsgBox Err.Description
End Sub

Public Sub btnDelClick()
On Error GoTo fehler
Dim TempSchritt As String
Dim TempOrg As String
Dim LastRow As Integer
TempSchritt = ""
TempOrg = ""
Dim TempRow As Integer

If ActiveCell.Row > PzUeFirstSchrittRow And ActiveCell.Row <= PzUeLastSchrittRow And (ActiveCell.Column = 6 Or ActiveCell.Column = 14) Then
    
    nlc_pw = nlc_intern.get_pw
    nlc_pzhb_03.Unprotect (nlc_pw)
    Application.ScreenUpdating = False
    LastRow = nlc_03.GetFree
    TempRow = ActiveCell.Row
    If LastRow <> 0 Then
        'TempSchritt = nlc_pzhb_03.Cells(ActiveCell.Row - 1, 6)
        'TempOrg = nlc_pzhb_03.Cells(ActiveCell.Row - 1, 14)
        
        nlc_pzhb_03.Range(nlc_pzhb_03.Cells(TempRow, 6), nlc_pzhb_03.Cells(LastRow - 1, 13)).Value = nlc_pzhb_03.Range(nlc_pzhb_03.Cells(TempRow + 1, 6), nlc_pzhb_03.Cells(LastRow - 1, 13)).Value
        nlc_pzhb_03.Cells(LastRow - 1, 6).Value = ""
        
        nlc_pzhb_03.Range(nlc_pzhb_03.Cells(TempRow, 14), nlc_pzhb_03.Cells(LastRow - 1, 16)).Value = nlc_pzhb_03.Range(nlc_pzhb_03.Cells(TempRow + 1, 14), nlc_pzhb_03.Cells(LastRow - 1, 16)).Value
        nlc_pzhb_03.Cells(LastRow - 1, 14).Value = ""
        
'        nlc_pzhb_03.Range(nlc_pzhb_03.Cells(TempRow - 1, 14), nlc_pzhb_03.Cells(LastRow, 16)).Value = nlc_pzhb_03.Range(nlc_pzhb_03.Cells(TempRow - 1, 14), nlc_pzhb_03.Cells(LastRow, 16)).Value
'        nlc_pzhb_03.Cells(LastRow + 1, 14).Value = ""
        
        nlc_pzhb_03.Cells(TempRow, 6).Select
    Else
        MsgBox "Es kann keine weitere Zeile gel|fffd|scht werden."
    End If
    Application.ScreenUpdating = True
    nlc_pzhb_03.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
Else
    ActiveCell.Select
End If
Exit Sub
fehler:
    MsgBox Err.Description
End Sub

Public Sub WorksheetChange(Target As Range)
    If ((Target.Row = 13) And Target.Column = 2) Or ((Target.Row = 143) And (Target.Column = 2 Or Target.Column = 14)) Or ((Target.Row = 152) And Target.Column = 2) Or ((Target.Row = 154) And Target.Column = 2) Then
        nlc_pw = nlc_intern.get_pw
        nlc_pzhb_03.Unprotect (nlc_pw)
        Application.ScreenUpdating = False
        nlc_pzhb_03.Rows(Target.Row).EntireRow.AutoFit
        nlc_pzhb_03.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
        Application.ScreenUpdating = True
    End If
End Sub
Attribute VB_Name = "nlc_04"
Option Explicit
Option Private Module
Dim nlc_pw As String

Public Sub ColorArea()
Dim mRow As Integer

    
    If nlc_pzhb_04.Range("B6") = nlc_pzhb_00.Range("C48") Then Exit Sub
     ' Aktion vorbereiten
    Application.ScreenUpdating = False
    nlc_pw = nlc_intern.get_pw
    nlc_pzhb_04.Unprotect (nlc_pw)
    
    For mRow = 7 To 14
        nlc_pzhb_04.Cells(mRow, 6).Interior.ColorIndex = xlNone
        nlc_pzhb_04.Cells(mRow, 7).Interior.ColorIndex = xlNone
        nlc_pzhb_04.Cells(mRow, 8).Interior.ColorIndex = xlNone
        nlc_pzhb_04.Cells(mRow, 6).Interior.ColorIndex = xlNone
        nlc_pzhb_04.Cells(mRow, 7).Interior.ColorIndex = xlNone
        nlc_pzhb_04.Cells(mRow, 8).Interior.ColorIndex = xlNone
    Next mRow
    
    For mRow = 8 To 14 Step 2
        nlc_pzhb_04.Cells(mRow, 8).Interior.ColorIndex = 17
        'nlc_pzhb_04.Cells(mRow, 8).Value = ""
    Next mRow
    
    For mRow = 7 To 14
        nlc_pzhb_04.Cells(mRow, 8).Font.Bold = False
    Next mRow
    
    mRow = 0
    
    If nlc_pzhb_00.Range("C48").Value = nlc_pzhb_04.Range("H7") Then 'ganz oben
        mRow = 7
    ElseIf nlc_pzhb_00.Range("C48").Value = nlc_pzhb_04.Range("H9") Then '2
        mRow = 9
    ElseIf nlc_pzhb_00.Range("C48").Value = nlc_pzhb_04.Range("H11") Then '3
        mRow = 11
    Else '4
        mRow = 13
    End If
    
    nlc_pzhb_04.Cells(mRow, 8).Font.Bold = True
    nlc_pzhb_04.Cells(mRow + 1, 8).Font.Bold = True
    nlc_pzhb_04.Cells(mRow + 1, 8).Value = nlc_pzhb_00.Range("B11").Value & " - " & nlc_pzhb_00.Range("B12").Value
    
    
    If mRow <> 0 Then
        nlc_pzhb_04.Cells(mRow, 6).Interior.ColorIndex = 46
        nlc_pzhb_04.Cells(mRow, 7).Interior.ColorIndex = 46
        nlc_pzhb_04.Cells(mRow, 8).Interior.ColorIndex = 46
        nlc_pzhb_04.Cells(mRow + 1, 6).Interior.ColorIndex = 46
        nlc_pzhb_04.Cells(mRow + 1, 7).Interior.ColorIndex = 46
        nlc_pzhb_04.Cells(mRow + 1, 8).Interior.ColorIndex = 46
    End If
    nlc_pzhb_04.Range("B6") = nlc_pzhb_00.Range("C48")
    Application.ScreenUpdating = True
    nlc_pzhb_04.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
End Sub

' With Selection.Interior
'        .ColorIndex = 15
'        .Pattern = xlSolid
'        .PatternColorIndex = xlAutomatic
'    End With
Attribute VB_Name = "nlc_05"
Option Explicit
Option Private Module
Dim nlc_pw As String

Public Sub AKTUELLClick()

    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    nlc_pzhb_05.Select
    nlc_pzhb_05.Activate
    nlc_05.refresh
    nlc_pzhb_05.Select
    nlc_pzhb_05.Range("A1").Select
    
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    
End Sub

Public Sub refresh()
    
' Aktion vorbereiten
    Dim level As Integer
    Dim Form As String
    Dim HMin As Integer
    Dim HMax As Integer
    Dim VBewertung As Integer
    Dim VInhalt As Integer
    Dim VShape As Integer
    Dim Weiss As Integer
    Dim Schwarz As Integer
    Dim Farbe As String
    Dim FarbeLS As Integer
    Dim FarbeLF As Integer
    Dim FarbeS As Integer
    Dim FarbeG As Integer
    Dim FarbeN As Integer
    Dim FarbeB As Integer
    Dim Count As Integer
    
    nlc_pw = nlc_intern.get_pw
    nlc_pzhb_05.Unprotect (nlc_pw)
    'nlc_pzhb_05.Rows("8:16").Hidden = True
    
    Form = "XXX"
    HMin = 8
    HMax = 15
    VBewertung = 5
    VInhalt = 10
    VShape = 11
    Farbe = "Hell"
    
    If Farbe = "Dunkel" Then
        FarbeLS = 8
        FarbeLF = 9
        FarbeS = 33
        FarbeG = 57
        FarbeN = 13
        FarbeB = 10
    Else
        FarbeLS = 39
        FarbeLF = 39
        FarbeS = 39
        FarbeG = 21
        FarbeN = 26
        FarbeB = 23
    End If
    
    For level = HMin To HMax
        Form = nlc_pzhb_05.Cells(level, VShape).Value
        If nlc_pzhb_05.Cells(level, VInhalt).Value = "" Then
            nlc_pzhb_05.Shapes(Form).Select
            With Selection
                .ShapeRange.Fill.ForeColor.SchemeColor = FarbeLF
                .ShapeRange.Line.Visible = msoFalse
                .ShapeRange.Shadow.Visible = msoFalse
                .Font.ColorIndex = FarbeLS
                .PrintObject = False
            End With
        Else
            nlc_pzhb_05.Shapes(Form).Select
            With Selection
                .ShapeRange.Fill.ForeColor.SchemeColor = FarbeS
                .ShapeRange.Line.ForeColor.SchemeColor = 60
                .ShapeRange.Line.Visible = msoTrue
                .Font.ColorIndex = 53
                .ShapeRange.Shadow.Visible = msoFalse
                .PrintObject = True
            End With
            
            If nlc_pzhb_05.Cells(level, VBewertung).Value = "kein" Then  'nlc_pzhb_51.Range("L4").Value
                nlc_pzhb_05.Shapes(Form).Fill.ForeColor.SchemeColor = FarbeG ' 29 '
            ElseIf nlc_pzhb_05.Cells(level, VBewertung).Value = "gering" Then
                nlc_pzhb_05.Shapes(Form).Fill.ForeColor.SchemeColor = FarbeN '28 '
            ElseIf nlc_pzhb_05.Cells(level, VBewertung).Value = "hoch" Then
                nlc_pzhb_05.Shapes(Form).Fill.ForeColor.SchemeColor = FarbeB '27 '
            End If
        End If
    Next level
    
    ' Leerzeilen bis auf 3 ausblenden
    nlc_pzhb_05.Rows("8:15").Hidden = False
    Count = 0
    For level = HMin To HMax
        If nlc_pzhb_05.Cells(level, 2).Value = "" Then
            Count = Count + 1
            If Count > 3 Then
                nlc_pzhb_05.Rows(level & ":" & HMax).Hidden = True
                Exit For
            End If
        End If
    Next level
    
' Aktion nachbereiten

    nlc_pzhb_05.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
    
End Sub



Sub Makro5()
Attribute Makro5.VB_Description = "Makro am 31.08.2012 von ililililil aufgezeichnet"
Attribute Makro5.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro5 Makro
' Makro am 31.08.2012 von ililililil aufgezeichnet
'

'
    ActiveSheet.Shapes("greenA").Select
    Range("N15").Select
    Application.Run "'prozesshandbuch-xl_V_1_1_Leer.xlt'!nlc_pzhb_35.A_green_Click"
    ActiveSheet.Shapes("greenA").Select
    Range("N14").Select
    ActiveSheet.Unprotect
    ActiveSheet.Shapes("greenA").Select
    Selection.ShapeRange.Fill.Visible = msoTrue
    Selection.ShapeRange.Fill.Solid
    Selection.ShapeRange.Fill.ForeColor.SchemeColor = 56
    Selection.ShapeRange.Fill.Transparency = 0#
    Selection.ShapeRange.Line.Weight = 3#
    Selection.ShapeRange.Line.DashStyle = msoLineSolid
    Selection.ShapeRange.Line.Style = msoLineSingle
    Selection.ShapeRange.Line.Transparency = 0#
    Selection.ShapeRange.Line.Visible = msoTrue
    Selection.ShapeRange.Line.ForeColor.SchemeColor = 64
    Selection.ShapeRange.Line.BackColor.RGB = RGB(255, 255, 255)
    ActiveSheet.Shapes("yellowA").Select
    Selection.ShapeRange.Fill.Visible = msoTrue
    Selection.ShapeRange.Fill.Solid
    Selection.ShapeRange.Fill.ForeColor.SchemeColor = 18
    Selection.ShapeRange.Fill.Transparency = 0#
    Selection.ShapeRange.Line.Weight = 3#
    Selection.ShapeRange.Line.DashStyle = msoLineSolid
    Selection.ShapeRange.Line.Style = msoLineSingle
    Selection.ShapeRange.Line.Transparency = 0#
    Selection.ShapeRange.Line.Visible = msoTrue
    Selection.ShapeRange.Line.ForeColor.SchemeColor = 64
    Selection.ShapeRange.Line.BackColor.RGB = RGB(255, 255, 255)
    ActiveSheet.Shapes("redA").Select
    Selection.ShapeRange.Fill.Visible = msoTrue
    Selection.ShapeRange.Fill.Solid
    Selection.ShapeRange.Fill.ForeColor.SchemeColor = 63
    Selection.ShapeRange.Fill.Transparency = 0#
    Selection.ShapeRange.Line.Weight = 3#
    Selection.ShapeRange.Line.DashStyle = msoLineSolid
    Selection.ShapeRange.Line.Style = msoLineSingle
    Selection.ShapeRange.Line.Transparency = 0#
    Selection.ShapeRange.Line.Visible = msoTrue
    Selection.ShapeRange.Line.ForeColor.SchemeColor = 64
    Selection.ShapeRange.Line.BackColor.RGB = RGB(255, 255, 255)
    ActiveSheet.Shapes("greenA").Select
    Selection.ShapeRange.Fill.Visible = msoFalse
    Selection.ShapeRange.Fill.Solid
    Selection.ShapeRange.Fill.Transparency = 0#
    Selection.ShapeRange.Line.Weight = 3#
    Selection.ShapeRange.Line.DashStyle = msoLineSolid
    Selection.ShapeRange.Line.Style = msoLineSingle
    Selection.ShapeRange.Line.Transparency = 0#
    Selection.ShapeRange.Line.Visible = msoTrue
    Selection.ShapeRange.Line.ForeColor.SchemeColor = 64
    Selection.ShapeRange.Line.BackColor.RGB = RGB(255, 255, 255)
    Range("Q22").Select
    ActiveSheet.Shapes("greenA").Select
    Selection.ShapeRange.Fill.Visible = msoTrue
    Selection.ShapeRange.Fill.Solid
    Selection.ShapeRange.Fill.ForeColor.SchemeColor = 8
    Selection.ShapeRange.Fill.Transparency = 0#
    Selection.ShapeRange.Line.Weight = 3#
    Selection.ShapeRange.Line.DashStyle = msoLineSolid
    Selection.ShapeRange.Line.Style = msoLineSingle
    Selection.ShapeRange.Line.Transparency = 0#
    Selection.ShapeRange.Line.Visible = msoTrue
    Selection.ShapeRange.Line.ForeColor.SchemeColor = 64
    Selection.ShapeRange.Line.BackColor.RGB = RGB(255, 255, 255)
    Range("Q21").Select
End Sub
Attribute VB_Name = "nlc_15"
Public Sub AddDel(Dir As String)
Dim Y As Long
Dim Pass_O As String

    Pass_O = nlc_pzhb_PW.Range("C2").Value
    nlc_pzhb_15.Unprotect (Pass_O)
    
    Y = 4
    While nlc_pzhb_15.Cells(15, Y).Value <> ""
        If nlc_pzhb_15.Columns(Y).Hidden = True Then
            GoTo Weiter
        End If
        Y = Y + 1
    Wend
Weiter:

    If Dir = "+" Then
        If Y < 13 Then
            nlc_pzhb_15.Columns(Col_Letter(Y)).Hidden = False
            
            nlc_pzhb_15.Pictures("Logo").Select
            Selection.ShapeRange.left = Selection.ShapeRange.left + 185
        Else
            MsgBox "Sie haben die maximale Anzahl an Schritten erreicht."
        End If
    Else
        If Y > 6 Then
            nlc_pzhb_15.Columns(Col_Letter(Y - 1)).Hidden = True
            nlc_pzhb_15.Pictures("Logo").Select
            Selection.ShapeRange.left = Selection.ShapeRange.left - 185
        Else
            MsgBox "Sie haben die minimale Anzahl an Schritten erreicht."
        End If
    End If
    nlc_pzhb_15.Range("A1").Select
    nlc_pzhb_15.Protect Password:=Pass_O, DrawingObjects:=True, Contents:=True, Scenarios:=True
End Sub

Function Col_Letter(lngCol As Long) As String
Dim vArr
vArr = Split(Cells(1, lngCol).Address(True, False), "$")
Col_Letter = vArr(0)
End Function
Attribute VB_Name = "nlc_58"

Option Explicit
Option Private Module
Dim nlc_pw As String
Dim Errormessage As String

Public Sub import()
    
    ' Aktion vorbereiten
    Dim level As Integer
    Dim SFile As Variant
    Dim File_Name As String
    Dim ProjCode As String
    Dim VorhPers As String
    Dim PersCode As String
    Dim PersName As String
    Dim RessArt As String
    Dim ZS As Integer
    Dim sObj As Variant
    Dim Projekt As String
    Dim ap As String
    Dim Altwert As Double
    Dim Neuwert As Double
    Dim Suche As Integer
    Dim I, j As Integer
    Dim spalte_ma As Integer
    Dim version As String
    Dim zwischen As String
    
    Dim spalte_version As Integer
    Dim spalte_akt As Integer
    
    Dim zielbereich As Variant
    Dim startbereich As Variant
    Dim starttabelle As Variant
    Dim zieltabelle As Variant
    
    Dim rueckgabe As Byte
    Dim MaxCol As Integer
    Dim MaxRow As Integer
    
    Dim Sach1 As String
    Dim Sach2 As String
    Dim Sach3 As String
    Dim Sach4 As String
    
    
    'Sicherheitsabfrage
    rueckgabe = MsgBox("Wollen Sie sicher importieren? Dies kann nicht mehr R|fffd|ckg|fffd|ngig gemacht werden.", vbYesNo, "Warning")
    If rueckgabe = "7" Then
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
        
    ' Zeiterfassungsbogen |fffd|ffnen
    nlc_pw = nlc_intern.get_pw


 
    nlc_pzhb_15.Unprotect (nlc_pw)

    nlc_pzhb_00.Unprotect (nlc_pw)
    'nlc_pzhb_93.Unprotect (nlc_pw)
    
    'Sperren_Variable = True
    
        
        
        'nlc_pzhb_51.Range("D1").Value = "x"
        
        On Error GoTo Error_File
        SFile = Application.GetOpenFilename("starttabelle (*.xls*), *.xls*", , "prozesshandbuch.xl import")
        If SFile = False Then
            MsgBox "Es wurde kein File ausgew|fffd|hlt. Der Vorgang wurde abgebrochen.", Title:="ERROR"
            GoTo ende
        End If
        
        Set sObj = GetObject(SFile)
        
        On Error Resume Next
        If sObj.CodeName = "pzhb" Then
            starttabelle = nlc_search_name(sObj, "nlc_pzhb_PW")
            
            If sObj.Sheets(starttabelle).Range("C7").Value <> "" Then
                version = sObj.Sheets(starttabelle).Range("C7").Value
            Else
                version = "1"
            End If

            For I = 7 To 101 Step 2
                If nlc_pzhb_58.Cells(4, I).Value = version Then Exit For
                If I = 101 Then
                    MsgBox "Importversion nicht gefunden"
                    sObj.Saved = True
                    sObj.Close '(SaveChanges = True) funktioniert nur 2003
                    GoTo ende
                End If
            Next I
            
  
            Application.DisplayAlerts = False
            starttabelle = nlc_search_name(sObj, "nlc_pzhb_90")
            MaxRow = sObj.Sheets(starttabelle).Range("AB1").Value
            MaxCol = sObj.Sheets(starttabelle).Range("AB2").Value
            
            
    
            'Call nlc_58.DM_importieren(MaxRow, MaxCol, sObj)
            Call nlc_58.logo_importieren(sObj)
            
            spalte_akt = 5
            spalte_version = I
            I = 5
            

            
'            nlc_pzhb_58.Visible = xlSheetVisible
'            nlc_pzhb_58.Select

            Application.ScreenUpdating = False
            Application.Calculation = xlCalculationManual
            
            While Not (IsEmpty(nlc_pzhb_58.Cells(I, spalte_akt).Value))
                If nlc_pzhb_58.Cells(I, spalte_akt).Value <> "" And nlc_pzhb_58.Cells(I, spalte_version).Value <> "" Then
                    If nlc_pzhb_58.Cells(I, spalte_version - 1).Value <> nlc_pzhb_58.Cells(I - 1, spalte_version - 1).Value Then
                        starttabelle = nlc_search_name(sObj, nlc_pzhb_58.Cells(I, spalte_version - 1).Value)
                    End If
                    If nlc_pzhb_58.Cells(I, spalte_akt - 1).Value <> nlc_pzhb_58.Cells(I - 1, spalte_akt - 1).Value Then
                        zieltabelle = nlc_search_name(ThisWorkbook, nlc_pzhb_58.Cells(I, spalte_akt - 1).Value)
                    End If
                    startbereich = nlc_pzhb_58.Cells(I, spalte_version).Value
                    zielbereich = nlc_pzhb_58.Cells(I, spalte_akt).Value
                    Sheets(zieltabelle).Range(zielbereich).Value = sObj.Sheets(starttabelle).Range(startbereich).Value
                End If
                I = I + 1
            Wend
            
            I = 100
            While Not (IsEmpty(nlc_pzhb_58.Cells(I, spalte_akt).Value))
                If nlc_pzhb_58.Cells(I, spalte_akt).Value <> "" And nlc_pzhb_58.Cells(I, spalte_version).Value <> "" Then
                    If nlc_pzhb_58.Cells(I, spalte_version - 1).Value <> nlc_pzhb_58.Cells(I - 1, spalte_version - 1).Value Then
                        starttabelle = nlc_search_name(sObj, nlc_pzhb_58.Cells(I, spalte_version - 1).Value)
                    End If
                    If nlc_pzhb_58.Cells(I, spalte_akt - 1).Value <> nlc_pzhb_58.Cells(I - 1, spalte_akt - 1).Value Then
                        zieltabelle = nlc_search_name(ThisWorkbook, nlc_pzhb_58.Cells(I, spalte_akt - 1).Value)
                    End If
                    startbereich = nlc_pzhb_58.Cells(I, spalte_version).Value
                    zielbereich = nlc_pzhb_58.Cells(I, spalte_akt).Value
                    sObj.Sheets(starttabelle).Range(startbereich).Copy
                    Sheets(zieltabelle).Range(zielbereich).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                End If
                I = I + 1
            Wend
            


'            'Ampelstatus setzten
'            starttabelle = nlc_search_name(sObj, "nlc_pzhb_35")
'
'            If sObj.Sheets(starttabelle).Shapes("redA").Fill.ForeColor.SchemeColor = 57 Then
'                ' rot setzen
'                nlc_pzhb_35.Shapes("redA").Fill.ForeColor.SchemeColor = 57
'                nlc_pzhb_35.Shapes("yellowA").Fill.ForeColor.SchemeColor = 39
'                nlc_pzhb_35.Shapes("greenA").Fill.ForeColor.SchemeColor = 39
'            ElseIf sObj.Sheets(starttabelle).Shapes("yellowA").Fill.ForeColor.SchemeColor = 42 Then
'                'Gelb
'                nlc_pzhb_35.Shapes("redA").Fill.ForeColor.SchemeColor = 39
'                nlc_pzhb_35.Shapes("yellowA").Fill.ForeColor.SchemeColor = 42
'                nlc_pzhb_35.Shapes("greenA").Fill.ForeColor.SchemeColor = 39
'            ElseIf sObj.Sheets(starttabelle).Shapes("greenA").Fill.ForeColor.SchemeColor = 11 Then
'                'gr|fffd|n
'                nlc_pzhb_35.Shapes("redA").Fill.ForeColor.SchemeColor = 39
'                nlc_pzhb_35.Shapes("yellowA").Fill.ForeColor.SchemeColor = 39
'                nlc_pzhb_35.Shapes("greenA").Fill.ForeColor.SchemeColor = 11
'            End If
'
'            'Vergangenheitsampel
'            If sObj.Sheets(starttabelle).Shapes("red").Fill.ForeColor.SchemeColor = 57 Then
'                ' rot setzen
'                nlc_pzhb_35.Shapes("red").Fill.ForeColor.SchemeColor = 57
'                nlc_pzhb_35.Shapes("yellow").Fill.ForeColor.SchemeColor = 39
'                nlc_pzhb_35.Shapes("green").Fill.ForeColor.SchemeColor = 39
'            ElseIf sObj.Sheets(starttabelle).Shapes("yellow").Fill.ForeColor.SchemeColor = 42 Then
'                'Gelb
'                nlc_pzhb_35.Shapes("red").Fill.ForeColor.SchemeColor = 39
'                nlc_pzhb_35.Shapes("yellow").Fill.ForeColor.SchemeColor = 42
'                nlc_pzhb_35.Shapes("green").Fill.ForeColor.SchemeColor = 39
'            ElseIf sObj.Sheets(starttabelle).Shapes("green").Fill.ForeColor.SchemeColor = 11 Then
'                'gr|fffd|n
'                nlc_pzhb_35.Shapes("red").Fill.ForeColor.SchemeColor = 39
'                nlc_pzhb_35.Shapes("yellow").Fill.ForeColor.SchemeColor = 39
'                nlc_pzhb_35.Shapes("green").Fill.ForeColor.SchemeColor = 11
'            End If
            
'
            starttabelle = nlc_search_name(sObj, "nlc_pzhb_04")
            Sach1 = sObj.Sheets(starttabelle).Range("H8").Value
            Sach2 = sObj.Sheets(starttabelle).Range("H10").Value
            Sach3 = sObj.Sheets(starttabelle).Range("H12").Value
            Sach4 = sObj.Sheets(starttabelle).Range("H14").Value
            
            sObj.Saved = True
            sObj.Close '(SaveChanges = True) funktioniert nur 2003
            
            On Error Resume Next
            
            Application.Calculate
            Application.DisplayAlerts = True
            Application.Calculate
            
            Call RefreshALL
            
            
            'durch die |fffd|nderung des Sachlicken Kontextes nach dem RefreshALL muss man die Werte hier nochmal kopieren!!!!!
            'ACHTUNG!! Ist anzupassen, falls sich die Struktur des Sachlichen Kontext |fffd|ndert, zuz|fffd|glich des Versionsimports
            zieltabelle = starttabelle
            Sach1 = Sheets(zieltabelle).Range("H8").Value
            Sach2 = Sheets(zieltabelle).Range("H10").Value
            Sach3 = Sheets(zieltabelle).Range("H12").Value
            Sach4 = Sheets(zieltabelle).Range("H14").Value
            
            
            nlc_pzhb_00.Select
            Application.ScreenUpdating = True
            MsgBox "Import beendet", Title:="INFORMATION"
            GoTo ende
        Else
            MsgBox "Es wurde kein Handbuch ausgew|fffd|hlt. Import wurde abgebrochen"
            GoTo ende
        End If
        
ende:
    
   
    
    nlc_pzhb_00.Select
    nlc_pzhb_00.Range("A1").Select
    
   

  

    nlc_pzhb_00.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
    nlc_pzhb_15.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
    'nlc_pzhb_93.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
    
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    
    Exit Sub
    
Error_File:

   

    nlc_pzhb_00.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
    nlc_pzhb_15.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
    'nlc_pzhb_93.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
        
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    MsgBox "Fehler beim Import", Title:="Error"
    
    Application.EnableEvents = True
    Exit Sub
    
End Sub

Private Sub RefreshALL()


    

    Call nlc_05.AKTUELLClick
   
   
   
 
    
   
   
    
    
    Call nlc_04.ColorArea
   

End Sub



Public Sub logo_importieren(ByVal aobj As Object)
    Dim I As Integer
    On Error GoTo ende
    nlc_pzhb_00.Pictures("projectlogo").Delete
    aobj.Sheets(nlc_pzhb_00.Name).Shapes("projectlogo").Copy
    nlc_pzhb_00.Select
    nlc_pzhb_00.Range("B19").Select
    ActiveSheet.Paste
    Exit Sub
ende:
    MsgBox "Logo konnte nicht importiert werden"
End Sub












Attribute VB_Name = "nlc_functions"
' GetExcelCol
' Recordsetindex in eine Excelspalte "umrechnen"
' z.B. 4 => "D", 27 => "AA"
'
' bInitialCall gibt an, ob die Z|fffd|hlung bei 0 (False)
' oder bei 1 erfolgen soll (bInitialCall = True)
Public Function GetExcelCol(ByVal lIdx As Long, _
  Optional ByVal bInitialCall As Boolean = True) As String
 
  If (bInitialCall) Then lIdx = lIdx + 1
  If (lIdx = 0) Then Exit Function
  GetExcelCol = GetExcelCol((lIdx - 1) \ 26, False) + _
    Chr(65 + (lIdx - 1) Mod 26)
End Function
 
' GetIndexOfExcelCol
' Excelspalte in Recordsetindex "umrechnen"
' z.B. "D" => 4, "AA" => 27
Public Function GetIndexOfExcelCol(ByVal strCol As String, _
  Optional ByVal slevel As Integer = 0, _
  Optional ByVal bInitialCall As Boolean = True) As Long
 
  If (slevel = Len(strCol)) Then Exit Function
  GetIndexOfExcelCol = GetIndexOfExcelCol(strCol, _
    slevel + 1, False) + ((Asc(mid(strCol, Len(strCol) - _
    slevel, 1)) - 65) + 1) * 26 ^ slevel + _
    IIf(bInitialCall, -1, 0)
End Function

Public Sub change_button(vbablattname As String, buttonname As String, btncaption As String, btnfarbe As String, btnschriftfarbe As String)
    Dim blattname As String
    Dim nlc_pw As String
    Application.Calculate
    nlc_pw = nlc_intern.get_pw
    blattname = nlc_intern.nlc_search_name(ThisWorkbook, vbablattname)

    If Sheets(blattname).Visible = xlSheetVisible Then
        Sheets(blattname).Select
        Sheets(blattname).Unprotect (nlc_pw)
        ActiveSheet.Shapes(buttonname).Select
        Selection.Characters.Text = btncaption
        Sheets(blattname).Protect (nlc_pw)
    End If

'    With Sheets(blattname).OLEObjects(buttonname).Object
'        If btncaption <> "" Then .Caption = btncaption
'        If btnschriftfarbe <> "" Then .ForeColor = btnschriftfarbe
'        If btnfarbe <> "" Then .BackColor = btnfarbe
'    End With
End Sub

Public Function CountRs(mTabelle As String) As Integer
Dim Rs As Object

Set Rs = SQLExcel("Select count(id) as 'Anz'  from [" & mTabelle & "$] ") 'GROUP BY Knoten,  Bezeichnung, Art, 'Vorherige Knoten ID' ,Beschreibung
CountRs = Rs(0)
'Tabelle2.Range("A1").CopyFromRecordset Rs
'Tabelle2.Activate
End Function

Public Function SQLExcel(SQL As String) As Object
  'Deklarationen:
  'Dim SQL As String
  Dim Con As Object
  Dim Path As String
  
  'MsgBox SQL
  Path = ActiveWorkbook.FullName
  Set Con = CreateObject("ADODB.Connection")
  'SQL = "select ID,Nummer,Name,Anmerkung from [" & Table & "$] where Nummer like '" & Range("I2") & "'"
  Con.Provider = "Microsoft.Jet.OLEDB.4.0;" _
      & "Extended Properties=Excel 8.0;" _
      & "Data Source=" & Path & ";"
    Con.Open
  
  Set SQLExcel = CreateObject("ADODB.recordset")
  SQLExcel.Open SQL, Con
  If SQLExcel.EOF And SQLExcel.bof Then
    MsgBox "Es wurden keine Daten gefunden"
  End If
  
  'MsgBox ExcelTable(0)
End Function




'##################
Public Function Nz0(gStr As String) As Integer
On Error GoTo fehler
Dim X As Integer

    If gStr = "" Then
        Nz0 = 0
    Else
        Nz0 = gStr
    End If

Exit Function
fehler:
    MsgBox Err.Description
End Function

Public Function FindRow(mySheet As Worksheet, myStr As String, myCol As Integer) As Integer
On Error GoTo fehler
Dim X As Integer

For X = 2 To 10000
    If mySheet.Cells(X, myCol).Value = myStr Then
        FindRow = X
        Exit Function
    End If
Next X
FindRow = 0
Exit Function
fehler:
    MsgBox Err.Description
End Function

Public Function SetBox(Farbe As String, Bezeichnung As String)
On Error GoTo fehler
Dim LineColor As Integer
Dim FontColor As Integer
Dim BackColor As Integer
Dim temp As Integer
Dim MaxRow As Integer

    If Farbe = "Blau" Then ' Blau
        LineColor = 1
        FontColor = 1 '9
        BackColor = 14
    ElseIf Farbe = "Gr|fffd|n" Then ' Gr|fffd|n
        LineColor = 1
        FontColor = 1 '7
        BackColor = 8
    ElseIf Farbe = "Rot" Then ' Rot
        LineColor = 1
        FontColor = 1 '3
        BackColor = 42
    ElseIf Farbe = "Gelb" Then ' gelb
        LineColor = 1
        FontColor = 1 '38
        BackColor = 34
    ElseIf Farbe = "Grau" Then ' grau
        LineColor = 1
        FontColor = 1
        BackColor = 55 '49
    ElseIf Farbe = "Leer" Then ' Leer
    
    Else
        MsgBox WorksheetFunction.VLookup("msg_art_des_details_w|fffd|hlen", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
        Exit Function
    End If
    
    MaxRow = nlc_pzhb_90.Range("AB1").Value
    If Farbe <> "Leer" Then ' Box zeichnen
        With nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = LineColor
        End With
        With nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = LineColor
        End With
        With nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = LineColor
        End With
        With nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = LineColor
        End With
        With nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Font
            .Name = "Arial"
            .FontStyle = "Standard"
            .Size = 8
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .ColorIndex = FontColor
        End With
        
        With nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Interior
            .ColorIndex = BackColor
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
        End With
        
        nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Value = Bezeichnung
        
        'ID- Matrix Eintrag erstellen
        'Debug.Print GetOutputFrom(nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol))
        temp = GetOutputFrom(nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol))
        nlc_pzhb_93.Cells(MaxRow + 3, temp + 3).Value = CInt(nlc_pzhb_93.Cells(MaxRow + 3, temp + 3).Value) + 1
        nlc_pzhb_93.Cells(MaxRow + 5, temp + 3).Value = CInt(nlc_pzhb_93.Cells(MaxRow + 5, temp + 3).Value) + 1
        nlc_pzhb_93.Cells(aktNewDetailRow, aktNewDetailCol).Value = temp & "." & nlc_pzhb_93.Cells(MaxRow + 3, temp + 3).Value
        
    Else ' Detail l|fffd|schen
    
        With nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Font
            .Name = "Arial"
            .FontStyle = "Standard"
            .Size = 8
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .ColorIndex = xlAutomatic
        End With
        nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Borders(xlDiagonalDown).LineStyle = xlNone
        nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Borders(xlDiagonalUp).LineStyle = xlNone
        nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Borders(xlEdgeLeft).LineStyle = xlNone
        nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Borders(xlEdgeTop).LineStyle = xlNone
        nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Borders(xlEdgeBottom).LineStyle = xlNone
        nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Borders(xlEdgeRight).LineStyle = xlNone
        nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Borders(xlInsideVertical).LineStyle = xlNone
        nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Borders(xlInsideHorizontal).LineStyle = xlNone
        nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Interior.ColorIndex = xlNone
        nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).ClearContents
        
        ' ID- Matrix Eintrag l|fffd|schen
        temp = left(nlc_pzhb_93.Cells(aktNewDetailRow, aktNewDetailCol).Value, InStr(1, nlc_pzhb_93.Cells(aktNewDetailRow, aktNewDetailCol).Value, ".") - 1)
        nlc_pzhb_93.Cells(MaxRow + 5, temp + 3).Value = CInt(nlc_pzhb_93.Cells(MaxRow + 5, temp + 3).Value) - 1
        nlc_pzhb_93.Cells(aktNewDetailRow, aktNewDetailCol).ClearContents
        
    End If
    
Exit Function
fehler:
    MsgBox Err.Description
End Function

Public Function SetEditBox(Farbe As String, Bezeichnung As String)
On Error GoTo fehler
Dim LineColor As Integer
Dim FontColor As Integer
Dim BackColor As Integer
Dim temp As Integer
Dim MaxRow As Integer

    If Farbe = "Blau" Then ' Blau
        LineColor = 1
        FontColor = 1 '9
        BackColor = 14
    ElseIf Farbe = "Gr|fffd|n" Then ' Gr|fffd|n
        LineColor = 1
        FontColor = 1 '7
        BackColor = 8
    ElseIf Farbe = "Rot" Then ' Rot
        LineColor = 1
        FontColor = 1 '3
        BackColor = 42
    ElseIf Farbe = "Gelb" Then ' Rot
        LineColor = 1
        FontColor = 1 '38
        BackColor = 34
    ElseIf Farbe = "Grau" Then ' Rot
        LineColor = 1
        FontColor = 1
        BackColor = 55 '49
    ElseIf Farbe = "Leer" Then ' Leer
    
    Else
        MsgBox WorksheetFunction.VLookup("msg_art_des_details_w|fffd|hlen", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
        Exit Function
    End If
    
    MaxRow = nlc_pzhb_90.Range("AB1").Value
    If Farbe <> "Leer" Then ' Box zeichnen
        With nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = LineColor
        End With
        With nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = LineColor
        End With
        With nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = LineColor
        End With
        With nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = LineColor
        End With
        With nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Font
            .Name = "Arial"
            .FontStyle = "Standard"
            .Size = 8
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .ColorIndex = FontColor
        End With
        
        With nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Interior
            .ColorIndex = BackColor
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
        End With
    End If
        nlc_pzhb_06.Cells(aktNewDetailRow, aktNewDetailCol).Value = Bezeichnung
Exit Function
fehler:
    MsgBox Err.Description
End Function
Public Function GetDetailArt(myRow As Integer, myCol As Integer) As String

If nlc_pzhb_06.Cells(myRow, myCol).Interior.ColorIndex = 14 Then
    GetDetailArt = nlc_pzhb_90.Cells(30, 6) 'Blau
ElseIf nlc_pzhb_06.Cells(myRow, myCol).Interior.ColorIndex = 8 Then
    GetDetailArt = nlc_pzhb_90.Cells(29, 6) 'Gr|fffd|n
ElseIf nlc_pzhb_06.Cells(myRow, myCol).Interior.ColorIndex = 42 Then
    GetDetailArt = nlc_pzhb_90.Cells(28, 6) 'rot
ElseIf nlc_pzhb_06.Cells(myRow, myCol).Interior.ColorIndex = 34 Then
    GetDetailArt = nlc_pzhb_90.Cells(26, 6) 'gelb
ElseIf nlc_pzhb_06.Cells(myRow, myCol).Interior.ColorIndex = 55 Then  '49
    GetDetailArt = nlc_pzhb_90.Cells(27, 6) 'grau
End If


End Function

Public Function GetHauptknotenName(myID As String) As String
On Error GoTo fehler
Dim X As Integer

    X = 2
    While nlc_pzhb_91.Cells(X, 1) <> ""
        
        If nlc_pzhb_91.Cells(X, 1) = myID Then
            GetHauptknotenName = nlc_pzhb_91.Cells(X, 3)
            Exit Function
        End If
        X = X + 1
    Wend
    
Exit Function
fehler:
    MsgBox Err.Description
End Function

Public Function GetHauptknotenNummer(myID As String) As String
On Error GoTo fehler
Dim X As Integer

    X = 2
    While nlc_pzhb_91.Cells(X, 1) <> ""
        
        If nlc_pzhb_91.Cells(X, 1) = myID Then
            GetHauptknotenNummer = nlc_pzhb_91.Cells(X, 2)
            Exit Function
        End If
        X = X + 1
    Wend
    
Exit Function
fehler:
    MsgBox Err.Description
End Function

'Public Function GetHauptknotenVerantwortung(myID As String) As String
'On Error GoTo fehler
'Dim X As Integer
'
'    X = 2
'    While nlc_pzhb_91.Cells(X, 1) <> ""
'
'        If nlc_pzhb_91.Cells(X, 1) = myID Then
'            GetHauptknotenNummer = nlc_pzhb_91.Cells(X, 2)
'            Exit Function
'        End If
'        X = X + 1
'    Wend
'
'Exit Function
'fehler:
'    MsgBox Err.Description
'End Function

Public Function GetOutputFrom(myCell As Object) As Integer
On Error GoTo fehler
Dim sSpalte As Integer
Dim sZeile As Integer
Dim MaxRow As Integer
Dim FirstRow As Integer
Dim MaxCol As Integer
Dim FirstCol As Integer
Dim X As Integer
Dim Y As Integer
Dim tmp As Integer
Dim X2 As Integer

    
    
    sSpalte = myCell.Column
    sZeile = myCell.Row
    
    'GetOutputFrom = left(nlc_pzhb_93.Cells(sZeile, sSpalte), Len(nlc_pzhb_93.Cells(sZeile, sSpalte)) - InStr(1, nlc_pzhb_93.Cells(sZeile, sSpalte), "."))
    'Exit Function
    FirstRow = 22
    FirstCol = 4
    MaxRow = nlc_pzhb_90.Range("AB1").Value
    MaxCol = nlc_pzhb_90.Range("AB2").Value
    For X = FirstCol To MaxCol
        If nlc_pzhb_06.Cells(sZeile, X).MergeCells = True Then
           'GetOutputFrom = nlc_pzhb_93.Cells(sZeile, X)
           'Exit For
            tmp = X - 3 '& " : " & Round(((sZeile - 21) / 10) - 0.5)
            For X2 = 1 To 5000
                If nlc_pzhb_91.Cells(X2, 2) = tmp Then
                    GetOutputFrom = nlc_pzhb_91.Cells(X2, 1)
                    Exit Function
                End If
            Next X2
            'AktDetail = (sZeile - 21) - ((X - 3) * MaxDetail)
        End If
    Next X
    
Exit Function
fehler:
    MsgBox Err.Description
End Function

Public Function GetOutputFrom_MASK(myCell As Object) As Integer
On Error GoTo fehler
Dim sSpalte As Integer
Dim sZeile As Integer
Dim MaxRow As Integer
Dim FirstRow As Integer
Dim MaxCol As Integer
Dim FirstCol As Integer
Dim X As Integer
Dim Y As Integer
Dim tmp As Integer
Dim X2 As Integer

    
    
    sSpalte = myCell.Column
    sZeile = myCell.Row
    
    'GetOutputFrom = left(nlc_pzhb_93.Cells(sZeile, sSpalte), Len(nlc_pzhb_93.Cells(sZeile, sSpalte)) - InStr(1, nlc_pzhb_93.Cells(sZeile, sSpalte), "."))
    'Exit Function
    FirstRow = 22
    FirstCol = 4
    MaxRow = nlc_pzhb_90.Range("AB1").Value
    MaxCol = nlc_pzhb_90.Range("AB2").Value
    For X = FirstCol To MaxCol
        If nlc_pzhb_06.Cells(sZeile, X).MergeCells = True Then
           'GetOutputFrom = nlc_pzhb_93.Cells(sZeile, X)
           'Exit For
            tmp = X - 3 '& " : " & Round(((sZeile - 21) / 10) - 0.5)
            For X2 = 1 To 5000
                If nlc_pzhb_91.Cells(X2, 2) = tmp Then
                    GetOutputFrom_MASK = nlc_pzhb_91.Cells(X2, 2)
                    Exit Function
                End If
            Next X2
            'AktDetail = (sZeile - 21) - ((X - 3) * MaxDetail)
        End If
    Next X
    
Exit Function
fehler:
    MsgBox Err.Description
End Function


Public Function GetFirstFreeRow(mySheet As String, myCol As Integer) As Integer
On Error GoTo fehler
Dim X As Integer
    
    X = 2
    
    While Not IsEmpty(Worksheets(nlc_search_name(ThisWorkbook, mySheet)).Cells(X, myCol).Value)
        X = X + 1
    Wend
    GetFirstFreeRow = X
    
Exit Function
fehler:
    MsgBox Err.Description
End Function

Public Function nlc_auswahl(kennzahl, wert)
    
    ' Parameter setzen
    X = ""
        
    ' Term finden
    If kennzahl <> "" Then
    For level = 15 To 29
        If kennzahl = nlc_phb_56.Cells(level, 2).Value Then
            ' |fffd|bersetzung zuweisen
            For A = 3 To 54
                If wert = nlc_phb_56.Cells(7, A).Value Then
                X = nlc_phb_56.Cells(level, A).Value
                Exit For
                End If
            Next A
        End If
    Next level
    End If
    
    ' Nullwert entfernen
    If X = 0 Then X = ""
    nlc_auswahl = X
    
End Function


Public Function nlc_task(Bezug As Variant)

    If Bezug <> "" Then
        nlc_task = Bezug
    Else
        nlc_task = ""
    End If
    
End Function

Public Function nlc_task2(Bezug As Variant)
    
    If Bezug = "" Or Bezug = "-" Then
        nlc_task2 = ""
    Else
        nlc_task2 = Bezug
    End If
    
End Function



Public Function nlc_copypaste(SB As String, SZ As Integer, SS As Integer, EZ As Integer, ES As Integer, ZB As String, ZZ As Integer, ZS As Integer)
       
    Sheets(SB).Range(Sheets(SB).Cells(SZ, SS), Sheets(SB).Cells(EZ, ES)).Copy
    Sheets(ZB).Cells(ZZ, ZS).PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
       
End Function

Public Function nlc_clear(SB As String, SZ As Integer, SS As Integer, EZ As Integer, ES As Integer)
       
    Sheets(SB).Range(Sheets(SB).Cells(SZ, SS), Sheets(SB).Cells(EZ, ES)).ClearContents
       
End Function



Public Function nlc_logoupload(Blatt As String, Allignment As String) As Integer
    
    On Error GoTo ErrorHandler
    
    ' Parameter setzen
    Dim level As Integer
    Dim nlc_pw As String
    Dim WA As Single
    Dim YA As Single
    Dim XA As Single
    Dim WN As Single
    Dim YN As Single
    Dim XN As Single
    Dim Error As String
    
    If Allignment <> "R" And Allignment <> "L" Then GoTo ErrorHandler
    
    nlc_pw = nlc_pzhb_PW.Range("C3").Value
    Sheets(Blatt).Unprotect (nlc_pw)
    
    WN = nlc_phb_CM.Range("B6").Value
    Sheets(Blatt).Select
    Sheets(Blatt).Range("A1").Select
    YA = Sheets(Blatt).Pictures("Logo").top
    XA = Sheets(Blatt).Pictures("Logo").left
    WA = Sheets(Blatt).Pictures("Logo").Width
    Sheets(Blatt).Pictures("Logo").Delete
    
    YN = YA
    ActiveSheet.Paste
    Selection.Name = "Logo"
    Sheets(Blatt).Pictures("Logo").top = YN
    If Allignment = "L" Then
        XN = XA
    Else
        XN = XA + WA - WN
    End If
    Sheets(Blatt).Pictures("Logo").left = XN
    
    Sheets(Blatt).Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
    Exit Function
    
ErrorHandler:
    Error = nlc_phb_CM.Range("B4").Value
    nlc_phb_CM.Range("B4").Value = Error + 1
    Sheets(Blatt).Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
        
End Function





Public Function nlc_txt(Bezug As Range) As String

    Dim Anz, level As Integer
    Anz = Bezug.Cells.Count
    nlc_txt = ""
    
    For level = 1 To Anz
        If Bezug.Item(level).Value <> "" Then
            If nlc_txt = "" Then
                nlc_txt = Bezug.Item(level).Value
            Else
                nlc_txt = nlc_txt & VBA.Chr(10) & Bezug.Item(level).Value
            End If
        End If
    Next level
    
End Function


Public Function nlc_box(X As Integer, Y As Integer)
    
    ' Box selbst, Startbox obere Zelle (in der Box)
    
    ' Linke obere Ecke der Box markieren
    nlc_pzhb_05.Range(nlc_pzhb_05.Cells(X, Y), nlc_pzhb_05.Cells(X + 1, Y)).Select
    
    ' Box zeichnen
    Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
    Selection.Borders(xlEdgeLeft).Weight = xlMedium
    Selection.Borders(xlEdgeLeft).ColorIndex = xlAutomatic
    Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
    Selection.Borders(xlEdgeTop).Weight = xlMedium
    Selection.Borders(xlEdgeTop).ColorIndex = xlAutomatic
    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
    Selection.Borders(xlEdgeBottom).Weight = xlMedium
    Selection.Borders(xlEdgeBottom).ColorIndex = xlAutomatic
    Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
    Selection.Borders(xlEdgeRight).Weight = xlMedium
    Selection.Borders(xlEdgeRight).ColorIndex = xlAutomatic
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    Selection.HorizontalAlignment = xlCenter
    Selection.VerticalAlignment = xlCenter
    Selection.WrapText = True
    Selection.Orientation = 0
    Selection.AddIndent = False
    Selection.IndentLevel = 0
    Selection.ShrinkToFit = False
    Selection.ReadingOrder = xlContext
    Selection.MergeCells = True
    Selection.Locked = False
    Selection.FormulaHidden = False
    Selection.Font.Name = "Arial"
    Selection.Font.FontStyle = "Standard"
    Selection.Font.Size = 10
    Selection.Font.Strikethrough = False
    Selection.Font.Superscript = False
    Selection.Font.Subscript = False
    Selection.Font.OutlineFont = False
    Selection.Font.Shadow = False
    Selection.Font.Underline = xlUnderlineStyleNone
    Selection.Font.ColorIndex = 32
    nlc_pzhb_05.Cells(X, Y).Select
    Selection.Value = "neu"

End Function

Public Function nlc_deletebox(X As Integer, Y As Integer)
    
    ' Box selbst, Startbox obere Zelle (in der Box)
    
    ' Linke obere Ecke der Box markieren
    nlc_pzhb_05.Range(nlc_pzhb_05.Cells(X, Y), nlc_pzhb_05.Cells(X + 1, Y)).Select
    
    ' Box zeichnen
    Selection.Borders(xlEdgeLeft).LineStyle = xlLineStyleNone
    Selection.Borders(xlEdgeTop).LineStyle = xlLineStyleNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlLineStyleNone
    Selection.Borders(xlEdgeRight).LineStyle = xlLineStyleNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    Selection.MergeCells = False
    Selection.Locked = True
    Selection.FormulaHidden = True
    Selection.Font.Size = 8
    nlc_pzhb_05.Cells(X, Y).ClearContents

End Function

Public Function nlc_verticalline(X As Integer, Y As Integer)
    
    ' Einzelne vertikale Linie, links von der Zelle
    
    ' Markierung f|fffd|r Start des Verbinders setzen
    nlc_pzhb_05.Cells(X, Y).Select
    
    ' Verbinder zeichnen
    Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
    Selection.Borders(xlEdgeLeft).Weight = xlThin
    Selection.Borders(xlEdgeLeft).ColorIndex = xlAutomatic
    
End Function

Public Function nlc_deleteverticalline(X As Integer, Y As Integer)
    
    ' Einzelne vertikale Linie, links von der Zelle
    
    ' Markierung f|fffd|r Start des Verbinders setzen
    nlc_pzhb_05.Cells(X, Y).Select
    
    ' Verbinder zeichnen
    Selection.Borders(xlEdgeLeft).LineStyle = xlLineStyleNone
    
End Function

Public Function nlc_line1(X As Integer, Y As Integer)
    
    ' Gerader Verbinder von aktueller Ebene auf tiefere Ebene, Startbox linke Zelle dar|fffd|ber
    
    ' Markierung f|fffd|r Start des Verbinders setzen
    nlc_pzhb_05.Range(nlc_pzhb_05.Cells(X, Y), nlc_pzhb_05.Cells(X, Y + 1)).Select
    
    ' Verbinder zeichnen
    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
    Selection.Borders(xlEdgeBottom).Weight = xlThin
    Selection.Borders(xlEdgeBottom).ColorIndex = xlAutomatic
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    
End Function

Public Function nlc_deleteline1(X As Integer, Y As Integer)
    
    ' Gerader Verbinder von aktueller Ebene auf tiefere Ebene, Startbox linke Zelle dar|fffd|ber
    
    ' Markierung f|fffd|r Start des Verbinders setzen
    nlc_pzhb_05.Range(nlc_pzhb_05.Cells(X, Y), nlc_pzhb_05.Cells(X, Y + 1)).Select
    
    ' Verbinder zeichnen
    Selection.Borders(xlEdgeBottom).LineStyle = xlLineStyleNone
    
End Function

Public Function nlc_line2(X As Integer, Y As Integer)
    
    ' Rechteckiger Verbinder vorherigen Ergebnis auf gleicher Ebene, Startbox oberste Zelle rechts
    
    ' Markierung f|fffd|r Start des Verbinders setzen
    nlc_pzhb_05.Range(nlc_pzhb_05.Cells(X, Y), nlc_pzhb_05.Cells(X + 2, Y)).Select
    
    ' Verbinder zeichnen
    Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
    Selection.Borders(xlEdgeLeft).Weight = xlThin
    Selection.Borders(xlEdgeLeft).ColorIndex = xlAutomatic
    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
    Selection.Borders(xlEdgeBottom).Weight = xlThin
    Selection.Borders(xlEdgeBottom).ColorIndex = xlAutomatic
    
End Function

Public Function nlc_deleteline2(X As Integer, Y As Integer)
    
    ' Rechteckiger Verbinder vorherigen Ergebnis auf gleicher Ebene, Startbox oberste Zelle rechts
    
    ' Markierung f|fffd|r Start des Verbinders setzen
    nlc_pzhb_05.Range(nlc_pzhb_05.Cells(X, Y), nlc_pzhb_05.Cells(X + 1, Y)).Select
    
    ' Verbinder zeichnen
    Selection.Borders(xlEdgeLeft).LineStyle = xlLineStyleNone
    
End Function

'Public Function Check_Sheet_Existence(objWB As Object, strblatt As String) As Boolean
'
'    Dim objBl As Object
'
'    Check_Sheet_Existence = False
'    For Each objBl In objWB.Sheets
'        If objBl.Name = strblatt Then
'            Check_Sheet_Existence = True
'            Exit Function
'        End If
'    Next objBl
'
'End Function

'Public Function nlc_search_name(aobj, blatt_vba As String) As String
'Dim i As Integer
'
'    Dim objBl As Object
'
'    nlc_search_name = ""
'    For Each objBl In aobj.Sheets
'        If objBl.CodeName = blatt_vba Then
'            nlc_search_name = objBl.Name
'            Exit Function
'        End If
'    Next objBl
'
'End Function

Function ID_Generate()

    'ID_Matrix erneuern und funktionen suchen zum neu generieren der detail- und hauptknoten (Knoten hinzuf|fffd|gen)
    
    Dim level_x As Integer
    Dim level_y As Integer
    Dim level_z As Integer
    Dim ID As Integer
    Dim knotenzeile As Integer
    Dim Index As Integer
    Dim pw As String
    
    
    Application.ScreenUpdating = False
    pw = "pz"
    
    'nlc_pzhb_91.unprotect pw
    'nlc_pzhb_92.unprotect pw
    
    knotenzeile = 3
    
    While nlc_pzhb_91.Cells(knotenzeile, 2).Value <> ""
        nlc_pzhb_91.Cells(knotenzeile, 5).Value = nlc_pzhb_91.Cells(knotenzeile, 2).Value
        knotenzeile = knotenzeile + 1
    Wend
    
    Index = 0
    
    'Beschriftung und Hauptknoten aktualisieren
    For level_y = 32 To (nlc_pzhb_90.Cells(1, 28).Value - MaxDetail) Step MaxDetail
        Index = Index + 1
        nlc_pzhb_93.Cells(level_y, 3).Value = Index & "0"            'Beschriftung
        nlc_pzhb_93.Cells(level_y, Index + 3).Value = Index    'Hauptknoten
    Next level_y
        nlc_pzhb_93.Cells(nlc_pzhb_90.Cells(1, 28).Value - 9, Index + 4).Value = Index + 1 'Hauptknoten ende
    
    'Max Haupt ID (intern) aktualisieren
    nlc_pzhb_93.Cells(nlc_pzhb_90.Cells(1, 28).Value + 7, 4).Value = Index
    
    Index = 4
    'Unterknoten aktualisieren
    For level_y = 22 To nlc_pzhb_90.Cells(1, 28).Value Step MaxDetail
        If Index <= 5 Then
            For level_x = Index To nlc_pzhb_90.Cells(2, 28).Value Step 1
                For level_z = level_y To level_y + 9 Step 1
                    If nlc_pzhb_93.Cells(level_z, level_x).Value <> "" Then
                        ID = ID + 1
                        nlc_pzhb_93.Cells(level_z, level_x).Value = (Index - 4) & "." & ID
                    End If
                Next level_z
            Next level_x
        Else
            'Nach Hauptknoten
            For level_x = Index To nlc_pzhb_90.Cells(2, 28).Value Step 1
                For level_z = level_y To level_y + 9 Step 1
                    If nlc_pzhb_93.Cells(level_z, level_x).Value <> "" Then
                        ID = ID + 1
                        nlc_pzhb_93.Cells(level_z, level_x).Value = (Index - 4) & "." & ID
                    End If
                Next level_z
            Next level_x
            
            'Vor Hauptknoten
            For level_x = Index - 1 To 4 Step -1
                If level_x > 4 Then
                    For level_z = level_y To level_y + 9 Step 1
                        If nlc_pzhb_93.Cells(level_z, level_x - 1).Value <> "" Then
                            ID = ID + 1
                            nlc_pzhb_93.Cells(level_z, level_x - 1).Value = (Index - 4) & "." & ID
                        End If
                    Next level_z
                End If
            Next level_x
        End If
        'Max Detail ID (intern) aktualisieren
        nlc_pzhb_93.Cells(nlc_pzhb_90.Cells(1, 28).Value + 3, Index - 1).Value = ID
        Index = Index + 1
        ID = 0
    Next level_y
    
    Call nlc_pzhb_06.FillMainData
    Call nlc_pzhb_06.FillDetailData
    
    knotenzeile = 3
    
    'Verkn|fffd|pfungen wiederherstellen
    While nlc_pzhb_91.Cells(knotenzeile, 2).Value <> ""
        'Call verknKnoten_Aktualisieren(nlc_pzhb_95.Name, nlc_pzhb_91.Cells(knotenzeile, 2).Value, nlc_pzhb_91.Cells(knotenzeile, 5).Value, pw)
        Call verknKnoten_Aktualisieren(nlc_pzhb_96.Name, nlc_pzhb_91.Cells(knotenzeile, 2).Value, nlc_pzhb_91.Cells(knotenzeile, 5).Value, pw)
        Call verknKnoten_Aktualisieren(nlc_pzhb_97.Name, nlc_pzhb_91.Cells(knotenzeile, 2).Value, nlc_pzhb_91.Cells(knotenzeile, 5).Value, pw)
        Call verknKnoten_Aktualisieren(nlc_pzhb_98.Name, nlc_pzhb_91.Cells(knotenzeile, 2).Value, nlc_pzhb_91.Cells(knotenzeile, 5).Value, pw)
        Call verknKnoten_Aktualisieren(nlc_pzhb_99.Name, nlc_pzhb_91.Cells(knotenzeile, 2).Value, nlc_pzhb_91.Cells(knotenzeile, 5).Value, pw)
        Call verknKnoten_Aktualisieren(nlc_pzhb_100.Name, nlc_pzhb_91.Cells(knotenzeile, 2).Value, nlc_pzhb_91.Cells(knotenzeile, 5).Value, pw)
        Call verknKnoten_Aktualisieren(nlc_pzhb_101.Name, nlc_pzhb_91.Cells(knotenzeile, 2).Value, nlc_pzhb_91.Cells(knotenzeile, 5).Value, pw)
        knotenzeile = knotenzeile + 1
    Wend
    
    
    nlc_pzhb_91.Range("E2:E" & knotenzeile).ClearContents
    
    'nlc_pzhb_91.protect pw
    'nlc_pzhb_92.protect pw
    
    nlc_pzhb_93.Select
    Application.ScreenUpdating = True

End Function

Function verknKnoten_Aktualisieren(Sheetname As String, knotenVorher As String, knotenNacher As String, Password As String)
    
    If Password <> "" Then
        Sheets(Sheetname).Unprotect Password
    End If
    
    Sheets(Sheetname).Select
    Sheets(Sheetname).Columns("B").Select
        
    Selection.Replace What:=knotenVorher, Replacement:=knotenNacher, LookAt:=xlPart, _
        SearchOrder:=xlByColumns, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False

    If Password <> "" Then
        Sheets(Sheetname).Protect Password
    End If

End Function
Attribute VB_Name = "nlc_intern"
Private Declare Function GetUserName Lib "advapi32.dll" Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long
Option Explicit
Option Private Module

Public Function get_pw() As String
    get_pw = nlc_pzhb_PW.Range("c3").Value
End Function

Public Function getMaxDetail() As Integer
    getMaxDetail = MaxIO
End Function





Public Sub nlc_ListGen()
    Dim Listgen_Rows As Integer
    Dim Listgen_Columns As Integer
    Dim listgen_Range As Range
    Dim counter As Integer
    Dim SpNr_Listgen As Integer
    Dim ZeiNr_Listgen As Integer
    Dim Listgen_Anzahl As Integer
    Dim Listgen_Zeilenanzahl As Integer
     
    SpNr_Listgen = 30
    ZeiNr_Listgen = 11
    Listgen_Anzahl = 11
    Listgen_Zeilenanzahl = 15
    
    nlc_pzhb_51.Range(nlc_pzhb_51.Cells(ZeiNr_Listgen, SpNr_Listgen), nlc_pzhb_51.Cells(ZeiNr_Listgen + Listgen_Zeilenanzahl - 1, SpNr_Listgen + Listgen_Anzahl)).ClearContents
    
    For Listgen_Columns = SpNr_Listgen To SpNr_Listgen + Listgen_Anzahl Step 1
        If nlc_pzhb_51.Cells(ZeiNr_Listgen - 2, Listgen_Columns).Value <> "" And nlc_pzhb_51.Cells(ZeiNr_Listgen - 3, Listgen_Columns).Value <> "" And nlc_pzhb_51.Cells(ZeiNr_Listgen - 1, Listgen_Columns).Value <> "" Then
            
            counter = 1
            Set listgen_Range = Worksheets(nlc_pzhb_51.Cells(ZeiNr_Listgen - 3, Listgen_Columns).Value).Range(nlc_pzhb_51.Cells(ZeiNr_Listgen - 2, Listgen_Columns).Value)
                        
            For Listgen_Rows = 1 To (nlc_pzhb_51.Cells(ZeiNr_Listgen - 4, Listgen_Columns).Value - nlc_pzhb_51.Cells(ZeiNr_Listgen - 6, Listgen_Columns).Value) + 1
                If listgen_Range.Cells(Listgen_Rows, 1).Value <> "" Then
                    nlc_pzhb_51.Cells(counter + ZeiNr_Listgen - 1, Listgen_Columns).Value = listgen_Range.Cells(Listgen_Rows, 1).Value
                    counter = counter + 1
                End If
            Next Listgen_Rows
            
            'Liste Generieren
            If counter + ZeiNr_Listgen - 2 < ZeiNr_Listgen Then
                ActiveWorkbook.Names.Add Name:=nlc_pzhb_51.Cells(ZeiNr_Listgen - 1, Listgen_Columns).Value, RefersToR1C1:=nlc_pzhb_51.Range(nlc_pzhb_51.Cells(ZeiNr_Listgen, Listgen_Columns), nlc_pzhb_51.Cells(ZeiNr_Listgen, Listgen_Columns))
            Else
                ActiveWorkbook.Names.Add Name:=nlc_pzhb_51.Cells(ZeiNr_Listgen - 1, Listgen_Columns).Value, RefersToR1C1:=nlc_pzhb_51.Range(nlc_pzhb_51.Cells(ZeiNr_Listgen, Listgen_Columns), nlc_pzhb_51.Cells(counter + ZeiNr_Listgen - 2, Listgen_Columns))
            End If
        End If
    Next Listgen_Columns

End Sub


'Public Function nlc_Language_Msgs(Term As String) As String
'
'    ' Parameter setzen
'    Dim i As Integer
'    Dim Sprachen As Integer
'    Dim level As Integer
'    Dim A As Integer
'    Dim Language As String
'
'
'    Language = nlc_phb_TL.Cells(3, 2).Value
'    Sprachen = 4
'    i = 4
'    ' Term finden
'
'    If Term <> "" Then
'        While Not IsEmpty(nlc_phb_TL4.Cells(i, 1).Value)
'            If Term = nlc_phb_TL4.Cells(i, 1).Value Then
'                ' |fffd|bersetzung zuweisen
'                For A = 2 To 2 + Sprachen
'                    If Language = nlc_phb_TL4.Cells(3, A).Value Then
'                        nlc_Language_Msgs = nlc_phb_TL4.Cells(i, A).Value
'                        Exit For
'                    End If
'                Next A
'                Exit Function
'            End If
'            i = i + 1
'        Wend
'    End If
'
'End Function

'Public Sub nlc_responsibilities()
'
'    Dim zeile As Integer, i As Integer
'    zeile = 11
'    nlc_pzhb_51.Range(nlc_pzhb_51.Cells(zeile, 4), nlc_pzhb_51.Cells(zeile + 50, 4)).ClearContents
'    For i = 8 To 40
'        If nlc_phb_21.Cells(i, 4).Value <> "" Then
'            nlc_pzhb_51.Cells(zeile, 4).Value = nlc_phb_21.Cells(i, 4).Value
'            zeile = zeile + 1
'        End If
'    Next i
'    nlc_pzhb_51.Range(nlc_pzhb_51.Cells(11, 4), nlc_pzhb_51.Cells(zeile - 1, 4)).Sort Key1:=nlc_pzhb_51.Range("D11"), Order1:=xlAscending, Header:=xlNo
'    ActiveWorkbook.Names.Add Name:="verantwortung", RefersToR1C1:=nlc_pzhb_51.Range(nlc_pzhb_51.Cells(11, 4), nlc_pzhb_51.Cells(zeile - 1, 4))
'End Sub



'Public Sub nlc_ListGen()
'    Dim Listgen_Rows As Integer
'    Dim Listgen_Columns As Integer
'    Dim listgen_Range As Range
'    Dim counter As Integer
'    Dim SpNr_Listgen As Integer
'    Dim ZeiNr_Listgen As Integer
'    Dim Listgen_Anzahl As Integer
'    Dim Listgen_Zeilenanzahl As Integer
'
'    SpNr_Listgen = 30
'    ZeiNr_Listgen = 11
'    Listgen_Anzahl = 10
'    Listgen_Zeilenanzahl = 15
'
'    nlc_pzhb_51.Range(nlc_pzhb_51.Cells(ZeiNr_Listgen, SpNr_Listgen), nlc_pzhb_51.Cells(ZeiNr_Listgen + Listgen_Zeilenanzahl - 1, SpNr_Listgen + Listgen_Anzahl)).ClearContents
'
'    For Listgen_Columns = SpNr_Listgen To SpNr_Listgen + Listgen_Anzahl Step 1
'        If nlc_pzhb_51.Cells(ZeiNr_Listgen - 2, Listgen_Columns).Value <> "" And nlc_pzhb_51.Cells(ZeiNr_Listgen - 3, Listgen_Columns).Value <> "" And nlc_pzhb_51.Cells(ZeiNr_Listgen - 1, Listgen_Columns).Value <> "" Then
'
'            counter = 1
'            Set listgen_Range = Worksheets(nlc_pzhb_51.Cells(ZeiNr_Listgen - 3, Listgen_Columns).Value).Range(nlc_pzhb_51.Cells(ZeiNr_Listgen - 2, Listgen_Columns).Value)
'
'            For Listgen_Rows = 1 To (nlc_pzhb_51.Cells(ZeiNr_Listgen - 4, Listgen_Columns).Value - nlc_pzhb_51.Cells(ZeiNr_Listgen - 6, Listgen_Columns).Value) + 1
'                If listgen_Range.Cells(Listgen_Rows, 1).Value <> "" Then
'                    nlc_pzhb_51.Cells(counter + ZeiNr_Listgen - 1, Listgen_Columns).Value = listgen_Range.Cells(Listgen_Rows, 1).Value
'                    counter = counter + 1
'                End If
'            Next Listgen_Rows
'
'            'Liste Generieren
'            If counter + ZeiNr_Listgen - 2 < ZeiNr_Listgen Then
'                ActiveWorkbook.Names.Add Name:=nlc_pzhb_51.Cells(ZeiNr_Listgen - 1, Listgen_Columns).Value, RefersToR1C1:=nlc_pzhb_51.Range(nlc_pzhb_51.Cells(ZeiNr_Listgen, Listgen_Columns), nlc_pzhb_51.Cells(ZeiNr_Listgen, Listgen_Columns))
'            Else
'                ActiveWorkbook.Names.Add Name:=nlc_pzhb_51.Cells(ZeiNr_Listgen - 1, Listgen_Columns).Value, RefersToR1C1:=nlc_pzhb_51.Range(nlc_pzhb_51.Cells(ZeiNr_Listgen, Listgen_Columns), nlc_pzhb_51.Cells(counter + ZeiNr_Listgen - 2, Listgen_Columns))
'            End If
'        End If
'    Next Listgen_Columns
'
'End Sub


Public Sub nlc_copypaste(SB As String, SZ As Integer, SS As Integer, EZ As Integer, ES As Integer, ZB As String, ZZ As Integer, ZS As Integer)

    Sheets(SB).Range(Sheets(SB).Cells(SZ, SS), Sheets(SB).Cells(EZ, ES)).Copy
    Sheets(ZB).Cells(ZZ, ZS).PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
       
End Sub

Public Sub nlc_clear(SB As String, SZ As Integer, SS As Integer, EZ As Integer, ES As Integer)

    Sheets(SB).Range(Sheets(SB).Cells(SZ, SS), Sheets(SB).Cells(EZ, ES)).ClearContents
       
End Sub

Public Function nlc_search_name(aobj, blatt_vba As String) As String

    Dim I As Integer
    Dim objBl As Object
    
    nlc_search_name = ""
    For Each objBl In aobj.Sheets
        If objBl.CodeName = blatt_vba Then
            nlc_search_name = objBl.Name
            Exit Function
        End If
    Next objBl

End Function


Public Function nlc_search_tabname(aobj, blatt_vba As String) As Boolean

    Dim I As Integer
    Dim objBl As Object
    
    nlc_search_tabname = False
    For Each objBl In aobj.Sheets
        If objBl.CodeName = blatt_vba Then
            nlc_search_tabname = True
            Exit Function
        End If
    Next objBl

End Function

Public Function Check_Sheet_Existence(objWB As Object, strblatt As String) As Boolean

    Dim objBl As Object
    
    Check_Sheet_Existence = False
    For Each objBl In objWB.Sheets
        If objBl.Name = strblatt Then
            Check_Sheet_Existence = True
            Exit Function
        End If
    Next objBl

End Function

'Public Function Get_Data_Zeile(Nummer As Integer) As Integer
'
'    Dim level As Integer, Data_Endzeile As Integer
'    Data_Endzeile = nlc_phb_06.Range("E7").Value
'
'    For level = Data_Startzeile To Data_Endzeile
'        If nlc_phb_06.Cells(level, SpNr_Nr).Value = Nummer Then
'            Get_Data_Zeile = level
'            Exit Function
'        End If
'    Next level
'
'End Function

Public Function Check_Multiple_Selection(Markierung As Range) As Boolean

    Dim MarkStart As Integer, MarkEnde As Integer, MarkZellen As Integer
    
    MarkStart = Markierung.Areas.Item(1).Row
    MarkZellen = Markierung.Areas.Count
    MarkEnde = Markierung.Areas.Item(MarkZellen).Row
    
    If MarkEnde - MarkStart + 1 <> MarkZellen Then
        Check_Multiple_Selection = True
    Else
        Check_Multiple_Selection = False
    End If
    
End Function

'Sub Change_Buttonname() 'Bitte immer wenn buttons dazu oder wegkommen anpassen!!!
'
'    Dim level As Integer
'    Dim spalte As Integer
'    Dim zeile As Integer
'    Dim nlc_pw As String
'
'    nlc_pw = nlc_intern.get_pw
'
'
'    nlc_pzhb_00.Unprotect (nlc_pw)
'    nlc_pzhb_05.Unprotect (nlc_pw)
'    nlc_pzhb_06.Unprotect (nlc_pw)
'    nlc_pzhb_09.Unprotect (nlc_pw)
'    nlc_pzhb_10.Unprotect (nlc_pw)
'    nlc_pzhb_12.Unprotect (nlc_pw)
'    nlc_pzhb_14.Unprotect (nlc_pw)
'    nlc_pzhb_21.Unprotect (nlc_pw)
'    nlc_pzhb_23.Unprotect (nlc_pw)
'    nlc_pzhb_31.Unprotect (nlc_pw)
'    nlc_pzhb_35.Unprotect (nlc_pw)
'    nlc_pzhb_50.Unprotect (nlc_pw)
'
'    spalte = 0
'
'    For level = 3 To 8
'        If nlc_phb_TL.Range("B3").Value = nlc_phb_TL3.Cells(3, level).Value Then
'            spalte = level
'            Exit For
'        End If
'    Next level
'
'    If spalte = 0 Then spalte = 3
'
'    nlc_phb_00.Grafik.Caption = nlc_phb_TL3.Cells(4, spalte).Value
'    nlc_phb_00.cmdShowEingabefelder.Caption = nlc_phb_TL3.Cells(5, spalte).Value
'    nlc_phb_00.import.Caption = nlc_phb_TL3.Cells(6, spalte).Value
'    nlc_phb_00.Sperren.Caption = nlc_phb_TL3.Cells(7, spalte).Value
'    nlc_phb_00.pw.Caption = nlc_phb_TL3.Cells(8, spalte).Value
'    nlc_pzhb_00.btn_project.Caption = nlc_phb_TL3.Cells(9, spalte).Value
'    nlc_pzhb_00.btn_sprojects.Caption = nlc_phb_TL3.Cells(10, spalte).Value
'    nlc_pzhb_00.showhide_contents.Caption = nlc_phb_TL3.Cells(11, spalte).Value
'    nlc_pzhb_00.print_select.Caption = nlc_phb_TL3.Cells(12, spalte).Value
'    nlc_pzhb_00.btn_SelectAll.Caption = nlc_phb_TL3.Cells(38, spalte).Value
'    nlc_pzhb_05.AKTUELL.Caption = nlc_phb_TL3.Cells(13, spalte).Value
'    nlc_phb_10.wp_eximport.Caption = nlc_phb_TL3.Cells(21, spalte).Value
'    nlc_phb_10.wp_selection.Caption = nlc_phb_TL3.Cells(22, spalte).Value
'    nlc_phb_08.btn_PSP_Optionen.Caption = nlc_phb_TL3.Cells(23, spalte).Value
'    nlc_phb_10.wp_saveonly.Caption = nlc_phb_TL3.Cells(24, spalte).Value
'    nlc_phb_12.AKTUELL.Caption = nlc_phb_TL3.Cells(25, spalte).Value
'    nlc_phb_14.Refresh.Caption = nlc_phb_TL3.Cells(26, spalte).Value
'    nlc_phb_21.AKTUELL.Caption = nlc_phb_TL3.Cells(27, spalte).Value
'    nlc_pzhb_23.Upload.Caption = nlc_phb_TL3.Cells(28, spalte).Value
'    nlc_pzhb_31.AKTUELL.Caption = nlc_phb_TL3.Cells(29, spalte).Value
'    nlc_pzhb_35.closing.Caption = nlc_phb_TL3.Cells(30, spalte).Value
'    'nlc_phb_50.ClearPHB.Caption = nlc_phb_TL3.Cells(31, spalte).Value
'    nlc_phb_00.Sprache.Caption = nlc_phb_TL3.Cells(32, spalte).Value
'    nlc_phb_14.gantt_options.Caption = nlc_phb_TL3.Cells(34, spalte).Value
'    nlc_pzhb_23.btn_Delete.Caption = nlc_phb_TL3.Cells(35, spalte).Value
'    nlc_phb_37.transfer_wp.Caption = nlc_phb_TL3.Cells(36, spalte).Value
'    nlc_phb_09.btn_Aendern_Akt.Caption = nlc_phb_TL3.Cells(37, spalte).Value
'
'    If nlc_pzhb_PW.Range("C4") = "YES" Then
'            nlc_phb_00.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'            nlc_pzhb_00.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'            nlc_pzhb_05.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'    '        nlc_phb_06.Protect Password:=nlc_PW, DrawingObjects:=True, Contents:=True, Scenarios:=True
'            nlc_phb_09.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'            nlc_phb_10.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'            nlc_phb_12.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'            nlc_phb_14.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'            nlc_phb_21.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'            nlc_pzhb_23.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'            nlc_pzhb_31.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'            nlc_pzhb_35.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'            nlc_phb_50.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'    End If
'
'End Sub


'Public Sub Change_Sheetname()
'
'    Dim level, spalte As Integer
'    Dim zeile As Integer
'    Dim tabelle As String
'
'    spalte = 0
'
'    For level = 4 To 9
'        If nlc_phb_TL.Range("B3").Value = nlc_phb_TL2.Cells(3, level).Value Then
'            spalte = level
'            Exit For
'        End If
'    Next level
'
'    zeile = 4
'
'    If spalte > 0 Then
'        While Not IsEmpty(nlc_phb_TL2.Cells(zeile, 2).Value)
'        'nlc_phb_TL2.Cells(zeile, 3).Value = nlc_functions.nlc_blattname(nlc_phb_TL2.Cells(zeile, 1).Formula)
'        tabelle = nlc_phb_TL2.Cells(zeile, 3).Value
'            If nlc_phb_TL2.Cells(zeile, spalte).Value <> "" Then
'                Sheets(tabelle).Name = nlc_phb_TL2.Cells(zeile, spalte).Value
'                nlc_phb_TL2.Cells(zeile, 3).Value = nlc_phb_TL2.Cells(zeile, spalte).Value
'            Else
'                Sheets(tabelle).Name = nlc_phb_TL2.Cells(zeile, 4).Value 'wenn sprache leer-->english
'                nlc_phb_TL2.Cells(zeile, 3).Value = nlc_phb_TL2.Cells(zeile, 4).Value
'            End If
'            zeile = zeile + 1
'        Wend
'    End If
'End Sub






Sub Logo_Positionieren(Blatt As String, zeile As Integer, spalte As Integer)
    Dim level As Integer
    Dim nlc_pw As String
    Dim schutz As Boolean
    Dim versteckt As Boolean

    nlc_pw = nlc_intern.get_pw
    schutz = Sheets(Blatt).ProtectContents

    If spalte = 0 Then
        For level = 3 To 255 Step 1
            If Sheets(Blatt).Cells(zeile, level).Borders(xlEdgeRight).LineStyle = xlContinuous Then Exit For
        Next level
    Else
        level = spalte
    End If

  

    If schutz = True Then Sheets(Blatt).Unprotect (nlc_pw)
    versteckt = Sheets(Blatt).Visible

    If versteckt = 2 Then Sheets(Blatt).Visible = xlSheetVisible
    'Sheets(blatt).Select
    'Sheets(blatt).Range("A1").Select

    Sheets(Blatt).Pictures("Logo").left = Sheets(Blatt).Cells(zeile, level).left - Sheets(Blatt).Pictures("Logo").Width
'    If Sheets(blatt).CodeName = "nlc_phb_07" Or Sheets(blatt).CodeName = "nlc_phb_17" Or Sheets(blatt).CodeName = "nlc_phb_19" Then
'        Sheets(blatt).Pictures("Logo").top = Sheets(blatt).Cells(zeile, level).top + 5
'    ElseIf Sheets(blatt).CodeName = "nlc_phb_14" Then
'        Sheets(blatt).Pictures("Logo").top = Sheets(blatt).Cells(zeile, level).top + 3
'    End If

    'Sheets(blatt).Pictures("Logo").top = Sheets(blatt).Cells(Zeile, level).top

    If schutz = True Then Sheets(Blatt).Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
    If versteckt = 2 Then Sheets(Blatt).Visible = 2

End Sub

Function CleanBlank(Text As String, Stellenanzahl As Integer)

    Dim MyBuf As String
    Dim MyLen As Integer
    Dim level As Integer
    Dim I As Integer
    I = 1
    MyBuf = ""
    
    MyLen = Len(Text) + 1
    While I < MyLen
        If Right(left(Text, I), 1) <> "." And Right(left(Text, I), 1) <> " " And Right(left(Text, I), 1) <> "," Then
            MyBuf = MyBuf & Right(left(Text, I), 1)
        End If
        I = I + 1
    Wend
    
    If Len(MyBuf) < Stellenanzahl + 1 Then
        While Len(MyBuf) < Stellenanzahl
            MyBuf = "0" & MyBuf
        Wend
    Else
        MyBuf = ""
        While Len(MyBuf) < Stellenanzahl
            MyBuf = "9" & MyBuf
        Wend
    End If
    
    CleanBlank = MyBuf
End Function

Private Function change_username(username As String) As String
    Dim X As Integer
    Dim username_temp As String
    
    username_temp = ""
    For X = Len(username) To 1 Step -1
        username_temp = username_temp & mid(username, X, 1)
    Next X
    
    change_username = username_temp
End Function

Public Function key_gegen_generieren(username As String, key As String) As String

    Dim name_counter As Integer
    Dim char_index As Integer
    Dim anzahl_char As Integer
    Dim rest As Integer
    Dim addieren_ As Integer
    Dim skey As String
    Dim counter As Integer
    Dim counter_2 As Integer
    Dim nValue As Integer
    
    username = tool & change_username(username)
    
    anzahl_char = 10 + 26 'anzahl Zahlen + Anzahl Buchstaben
    
    If key = myADPass Then
        skey = "2412"
        name_counter = "2"
    Else
        If IsNumeric(VBA.mid$(VBA.UCase(key), 1, 1)) = False Then
            GoTo ende
        End If
    
        skey = VBA.mid$(VBA.UCase(key), 1, 4)
        name_counter = VBA.mid$(VBA.UCase(key), 1, 1)

        If IsNumeric(VBA.mid$(VBA.UCase(key), 1, 1)) <> True Then
            key_gegen_generieren = ""
            Exit Function
        End If
    End If
    
    'Zeichen zum Starten suchen
    On Error GoTo ende
    For counter = 1 To 5
        If skey <> "" Then skey = skey & "-"
        For counter_2 = 1 To 5
            char_index = VBA.Asc(VBA.mid$(VBA.UCase(username), name_counter, 1))
            addieren_ = counter * counter_2 + name_counter
            nValue = char_index
            If (nValue Mod 10 = 0) Or (nValue Mod 5 = 0) Then 'Or (nValue Mod 3 = 0) Then
              ' Zahl
              Do
                char_index = char_index / addieren_
                nValue = Int(char_index)
              Loop Until nValue >= 1 And nValue <= 9
              skey = skey & Chr$(48 + nValue)
            
            Else
              ' Buchstabe
              Do
                char_index = char_index / addieren_
                nValue = Int(char_index)
              Loop Until nValue >= 1 And nValue <= 26 And nValue <> 9 And nValue <> 15
              skey = skey & Chr$(64 + nValue)
            End If

            If name_counter < VBA.Len(username) Then
                name_counter = name_counter + 1
            Else
                name_counter = 1
            End If
            
        Next counter_2
    Next counter
    
    If key <> myADPass Then
        If skey = key Then
            key_gegen_generieren = skey
            Exit Function
        End If
    Else
        key_gegen_generieren = skey
        Exit Function
    End If
    
ende:
    key_gegen_generieren = ""
End Function

Public Function get_LoginUser() As String
    Dim s As String
    Dim cnt As Long
    Dim ret As Long
    Dim netuser As String
    Dim pos As Integer
    
    cnt = 199
    s = String$(200, 0)
    ret = GetUserName(s, cnt)
    
    If ret <> 0 Then
        netuser = Trim(left$(s, cnt))
        pos = InStr(netuser, Chr$(0))
        
        If pos > 0 Then
           netuser = left$(netuser, pos - 1)
        Else
           netuser = netuser
        End If
    Else
        netuser = ""
    End If
    
   get_LoginUser = netuser
End Function

Public Function check_user() As Boolean

    Dim username As String
    Dim row_counter As Integer
    Dim username_eintrag As String
    Dim key_eintrag As String

    username = get_LoginUser
    row_counter = 4
    
    While Not IsEmpty(nlc_pzhb_schutz.Cells(row_counter, 1).Value)
        If nlc_pzhb_schutz.Cells(row_counter, 1).Value = username Then
            If nlc_pzhb_schutz.Cells(row_counter, 2).Value <> "" Then
                username_eintrag = nlc_pzhb_schutz.Cells(row_counter, 1).Value
                key_eintrag = nlc_pzhb_schutz.Cells(row_counter, 2).Value
                If key_gegen_generieren(username_eintrag, key_eintrag) <> "" Then
                    check_user = True
                    Exit Function
                End If
            End If
        End If
        
        row_counter = row_counter + 1
    Wend
    
    check_user = False
End Function

Public Sub wb_open()
    If nlc_intern.check_user = False Then
        If MsgBox(WorksheetFunction.VLookup("user_wrong_new", nlc_pzhb_TL.Range("A5:E65536"), 3, False), vbYesNo) = vbYes Then
        'Wenn neuen User anlegen
            frm_reg_user.Show
        End If
    End If
End Sub

Public Function wb_save() As Boolean
    
    If nlc_intern.check_user = True Then
        wb_save = True
    Else
        wb_save = False
    End If
End Function

Public Sub application_off()
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    Application.DisplayAlerts = False
End Sub

Public Sub application_on()
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.CutCopyMode = False
    Application.StatusBar = False
End Sub
Attribute VB_Name = "nlc_konstanten"
Public Const myADPass = "nls4ever!"
Public Const tool = "pzhb"
Public Const useradmin = False

'Pr|fffd|zess|fffd|bersicht
Public Const PzUeFirstSchrittRow = 110
Public Const PzUeLastSchrittRow = 124

'DM
Public Const FirstRow = 22
Public Const FirstCol = 4

Public Const MaxSchritt = 30
Public Const MaxListEintr|fffd|ge = 50 'Org, Schwachstellen, ...
Public Const SpaltMin = 3
Public Const SpaltMax = 123
Public Const MaxIO = 10

'Kennzahlen
Public Const MaxKnz = 10

'Todo
Public Const MaxTodoRow = 507 ' Anzahl +7


Attribute VB_Name = "nlc_prozeduren"
Option Explicit



'Sub position_buttons()
' On Error Resume Next
'
'    'Die gesamte Routine kann bei Beseitigung des Excel-Bugs,
'    'dass sich die Buttons horizonal verschieben ...
'    'komplett entfernt werden
'
'
'    Dim nlc_pw As String
'
'    nlc_pw = nlc_pzhb_PW.Range("C3").Value
'
'
'    nlc_pzhb_00.Unprotect (nlc_pw)
'    nlc_pzhb_32.Unprotect (nlc_pw)
'    nlc_pzhb_04.Unprotect (nlc_pw)
'
'    nlc_pzhb_05.Unprotect (nlc_pw)
'
'
'
'    nlc_pzhb_23.Unprotect (nlc_pw)
'    'nlc_pzhb_31.Unprotect (nlc_PW)
'    nlc_pzhb_35.Unprotect (nlc_pw)
'    nlc_pzhb_39.Unprotect (nlc_pw)
'
''    'Neupositionierung der Buttons und Drop-Down Listen
'    Call position(nlc_pzhb_00, "Grafik", 470.25, 343.5)
'    Call position(nlc_pzhb_00, "Sperren", 21.75, 947.25)
'    Call position(nlc_pzhb_00, "PW", 243, 947.25)
'
'    Call position(nlc_pzhb_32, "btn_project", 253.5, 388.5)
'    Call position(nlc_pzhb_32, "btn_sprojects", 321.75, 387.75)
'    Call position(nlc_pzhb_32, "showhide_contents", 391.5, 388.5)
'
'    Call position(nlc_pzhb_04, "aktuell", 7.5, 9)
'
'
'
'
'    Call position(nlc_pzhb_05, "ep_erweitern", 14.25, 6.75)
'    Call position(nlc_pzhb_05, "ep_vertiefen", 61.5, 6.75)
'    Call position(nlc_pzhb_05, "ep_entfernen", 108.75, 6.75)
'
'
'
'
'
'
'
'    Call position(nlc_pzhb_23, "upload", 505.5, 1063.5)
'
'    'Call position(nlc_pzhb_31, "aktuell", 8.25, 6.75)
'
'    Call position(nlc_pzhb_35, "links", 24.75, 6)
'    Call position(nlc_pzhb_35, "rechts", 110.25, 6)
'    Call position(nlc_pzhb_35, "closing", 24, 36)
'
'    Call position(nlc_pzhb_39, "f", 14.25, 82.5)
'    Call position(nlc_pzhb_39, "x", 39.75, 82.5)
'    Call position(nlc_pzhb_39, "an_s", 65.25, 82.5)
'    Call position(nlc_pzhb_39, "pn_f", 85.5, 82.5)
'    Call position(nlc_pzhb_39, "pn_s", 132.75, 82.5)
'    Call position(nlc_pzhb_39, "va_f", 351, 82.5)
'    Call position(nlc_pzhb_39, "va_s", 441.75, 82.5)
'    Call position(nlc_pzhb_39, "t_s", 510.75, 82.5)
'    Call position(nlc_pzhb_39, "s_f", 531.75, 82.5)
'
'    nlc_pzhb_00.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'    nlc_pzhb_32.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'    nlc_pzhb_04.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'
'    nlc_pzhb_05.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'
'
'
'    nlc_pzhb_23.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'    'nlc_pzhb_31.Protect Password:=nlc_PW, DrawingObjects:=True, Contents:=True, Scenarios:=True
'    nlc_pzhb_35.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'    nlc_pzhb_39.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'
'    nlc_pzhb_00.Select
'
'End Sub


Sub position(Blatt As Worksheet, button As String, links As Single, oben As Single)
Blatt.Shapes(button).left = links
Blatt.Shapes(button).top = oben
End Sub



Attribute VB_Name = "nlc_pzhb_00"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "btnLanguageChance, 6, 3, MSForms, CommandButton"
Private Sub btn_add_user_Click()
    frm_reg_user.Show
End Sub

Public Sub btnEingabefelder_Click()
On Error GoTo fehler
    If ActiveWorkbook.colors(17) = RGB(255, 255, 204) Then
        ActiveWorkbook.colors(17) = RGB(255, 255, 255)
    Else
        ActiveWorkbook.colors(17) = RGB(255, 255, 204)
    End If
    
Exit Sub
fehler:
    MsgBox Err.Description
End Sub

Public Sub btnImport_Click()
    nlc_58.import
End Sub

Private Sub btnLanguageChance_Click()
    'MsgBox "Diese Funktion ist noch nicht implementiert."
    
    Dim counter As Integer
    Dim nlc_pw As String
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    nlc_pw = nlc_pzhb_PW.Range("C2").Value
    nlc_pzhb_TL.Unprotect nlc_pw
    'nlc_pzhb_TL.Visible = xlSheetVisible
    
    For counter = 4 To 10 Step 1
        If nlc_pzhb_TL.Cells(4, counter).Value = nlc_pzhb_00.Cells(57, 3).Value Then
            nlc_pzhb_TL.Activate
            nlc_pzhb_TL.Range(nlc_pzhb_TL.Cells(4, counter), nlc_pzhb_TL.Cells(65536, counter)).Copy
            nlc_pzhb_TL.Range("C4").Select
            Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            
            Exit For
        End If
    Next counter
    
    
    Call Sheetname_Chance
    Call Sheetbutton_Chance
    
    'nlc_pzhb_TL.Visible = xlSheetVeryHidden
    'nlc_pzhb_TL.Protect nlc_PW
    
    nlc_pzhb_00.Activate
    
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = False
    
End Sub

Private Sub Sheetname_Chance()

    

End Sub

Private Sub Sheetbutton_Chance()
Dim temp As String

'    nlc_pzhb_00.btnEingabefelder.Caption = WorksheetFunction.VLookup("eingabefelder_anzeigen_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
'    nlc_pzhb_00.btnGrafik.Caption = WorksheetFunction.VLookup("import_logo_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
'    nlc_pzhb_00.btnLanguageChance.Caption = WorksheetFunction.VLookup("sprache_|fffd|ndern_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
'    nlc_pzhb_00.btnPW.Caption = WorksheetFunction.VLookup("passwort_|fffd|ndern_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
'

'btnimport
    temp = WorksheetFunction.VLookup("eingabefelder_anzeigen_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
    Call change_button("nlc_pzhb_00", "cmdShowEingabefelder", temp, "", "")
    
        temp = WorksheetFunction.VLookup("import_logo_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
    Call change_button("nlc_pzhb_00", "Grafik", temp, "", "")
    
'        temp = WorksheetFunction.VLookup("sprache_|fffd|ndern_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
'    Call change_button("nlc_pzhb_00", "btnLanguageChance", temp, "", "")
    
'        temp = WorksheetFunction.VLookup("passwort_|fffd|ndern_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
'    Call change_button("nlc_pzhb_00", "btn_admin", temp, "", "")
    
        temp = WorksheetFunction.VLookup("eingabefelder_anzeigen_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
    Call change_button("nlc_pzhb_00", "cmdShowEingabefelder", temp, "", "")
        
    
    If nlc_pzhb_PW.Range("C4") = "YES" Then
        'nlc_pzhb_00.btnSperren.Caption = WorksheetFunction.VLookup("entsperren_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
        temp = WorksheetFunction.VLookup("entsperren_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
        Call change_button("nlc_pzhb_00", "btnSperren", temp, "", "")
    Else
        
        'nlc_pzhb_00.btnSperren.Caption = WorksheetFunction.VLookup("sperren_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
        temp = WorksheetFunction.VLookup("sperren_BTN", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
        Call change_button("nlc_pzhb_00", "btnSperren", temp, "", "")
    End If
    

End Sub

Public Sub btnSperren_Click()
Attribute btnSperren_Click.VB_ProcData.VB_Invoke_Func = "S\n14"

    Dim nlc_pw As String
    Dim temp As String
    
    If nlc_pzhb_PW.Range("C4").Value = "YES" Then
        Passwort_2.Show
    Else
        Call nlc_ListGen
        Application.ScreenUpdating = False
        nlc_pw = nlc_pzhb_PW.Range("C2").Value
        nlc_pzhb_00.Unprotect
       
        nlc_pzhb_03.Unprotect
        nlc_pzhb_04.Unprotect
        nlc_pzhb_05.Unprotect
        nlc_pzhb_15.Unprotect
      
        pzhb.Unprotect
        nlc_pzhb_90.Visible = xlSheetHidden
        nlc_pzhb_TL.Visible = xlSheetHidden
        
        'Adminfiles
        nlc_pzhb_PW.Visible = xlSheetVeryHidden
        nlc_pzhb_58.Visible = xlSheetVeryHidden
        nlc_pzhb_51.Visible = xlSheetVeryHidden
        nlc_pzhb_schutz.Visible = xlSheetVeryHidden
        
        nlc_pzhb_PW.Range("C4") = "YES"
        Call Sheetbutton_Chance
        
        
        nlc_pzhb_00.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
        nlc_pzhb_03.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
        nlc_pzhb_04.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
        nlc_pzhb_05.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
       
        nlc_pzhb_15.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
        pzhb.Protect Password:=nlc_pw
        
        Application.ScreenUpdating = True
        Application.Calculate
    End If
    
End Sub

Public Sub btnPW_Click()

    If nlc_pzhb_PW.Range("C4") = "NO" Then
        Passwort_1.Show
    End If

End Sub

Public Sub btnGrafik_Click()
    
    Dim nlc_pw As String
    Dim XObj As Object
    Dim Logo As Variant
    
    nlc_pw = nlc_pzhb_PW.Range("C3").Value
    nlc_pzhb_00.Unprotect (nlc_pw)
    On Error Resume Next
    
    Logo = ""
    nlc_pzhb_00.Pictures("projectlogo").Delete
    'ChDir ("C:\")
    nlc_pzhb_00.Select
    nlc_pzhb_00.Range("B19").Select
    Logo = Application.GetOpenFilename("Process or Customer Logo (*.jpg; *.bmp; *.gif),*.jpg;*.bmp;*gif", , "Import Logo")
    'MsgBox Prompt:=Logo
    If Logo <> "" And Logo <> False Then
        nlc_pzhb_00.Pictures.Insert(Logo).Select
        
        

        Selection.ShapeRange.LockAspectRatio = msoTrue
        Selection.ShapeRange.Width = 430
        If Selection.ShapeRange.Height > 300 Then
            Selection.ShapeRange.Height = 300
        End If
        
        Selection.Cut
        ActiveSheet.Pictures.Paste.Select
        
        
        Selection.Name = "projectlogo"
        
        If Application.version >= "12.0" Then
            Selection.ShapeRange.top = nlc_pzhb_00.Cells(19, 2).top
            Selection.ShapeRange.left = nlc_pzhb_00.Cells(19, 2).left
        End If
        
    End If
    
    
    nlc_pzhb_00.Range("A1").Select
    nlc_pzhb_00.Select
    
    nlc_pzhb_00.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
    
End Sub



Attribute VB_Name = "nlc_pzhb_03"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Public Sub btnAddRow_Click()
    nlc_03.btnAddClick
End Sub



Public Sub btnDelRow_Click()
    nlc_03.btnDelClick
End Sub

Public Sub btnDown_Click()
    nlc_03.btnDownClick
End Sub

Public Sub btnUp_Click()
    nlc_03.btnUpClick
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    If ThisWorkbook.CodeName = "pzhb" Then
        Call nlc_03.WorksheetChange(Target)
    End If
End Sub
Attribute VB_Name = "nlc_pzhb_04"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Call nlc_04.ColorArea
End Sub


Attribute VB_Name = "nlc_pzhb_05"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub AKTUELL_Click()
    nlc_05.AKTUELLClick
End Sub

Attribute VB_Name = "nlc_pzhb_15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub btn_Add()
    nlc_15.AddDel ("+")
End Sub

Public Sub btn_Del()
    nlc_15.AddDel ("-")
End Sub
Attribute VB_Name = "nlc_pzhb_51"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "nlc_pzhb_58"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "nlc_pzhb_90"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "nlc_pzhb_PW"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Option Explicit
'
'Private Sub Logo_Import_Click()
'
'    Dim nlc_pw As String
'    Dim level As Integer
'    Dim XObj As Object
'    Dim Logo As String
'    Dim Adresse As String
'    Dim blatt As String
'    Dim WN As Double
'
'    nlc_pw = nlc_intern.get_pw
'    ' Aktion vorbereiten
'    On Error GoTo ErrorHandler
'    Application.ScreenUpdating = False
'    Logo = ""
'    If nlc_phb_PW.Range("F9").Value <> "" Then
'        Adresse = nlc_phb_PW.Range("F9").Value
'    Else
'        Adresse = ""
'    End If
'
'    ' Logo importieren
'    nlc_phb_PW.Select
'    nlc_phb_PW.Range("F16").Select
'    Logo = Application.GetOpenFilename("Company Logo (*.jpg; *.bmp; *.gif),*.jpg;*.bmp;*gif", , "Import Logo")
'    'MsgBox Prompt:=Logo
'    If Logo = "" Or Logo = "Falsch" Then GoTo ErrorHandler
'    nlc_phb_PW.Pictures("Logo").Delete
'    nlc_phb_PW.Range("F11").Value = 0
'    nlc_phb_PW.Pictures.Insert(Logo).Select
'    Selection.ShapeRange.LockAspectRatio = msoTrue
'    Selection.ShapeRange.Width = 150
'    If Selection.ShapeRange.Height > 60 Then Selection.ShapeRange.Height = 60
'    WN = Selection.ShapeRange.Width
'    nlc_phb_PW.Range("F13").Value = WN
'    Selection.Name = "Logo"
'    If Adresse <> "" Then ActiveSheet.Hyperlinks.Add Anchor:=Selection.ShapeRange.Item(1), Address:=Adresse
'
'    If Application.version = "12.0" Then
'        Pictures("Logo").Select
'        Selection.CopyPicture
'    Else
'        Selection.Copy
'    End If
'
'    nlc_phb_xl.Unprotect (nlc_pw)
'
'    ' Logos austauschen
'    blatt = nlc_phb_00.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_01.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_02.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_03.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_04.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_05.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_06.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_07.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_08.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_09.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_10.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_12.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_14.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_16.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_17.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_18.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_19.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_21.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_22.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_23.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_31.Name
'    Call nlc_logoupload(blatt, "R")
'    Sperren_Variable = True
'    blatt = nlc_phb_32.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_35.Name
'    Call nlc_logoupload(blatt, "R")
'    Sperren_Variable = False
'    blatt = nlc_phb_37.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_39.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_50.Name
'    Call nlc_logoupload(blatt, "R")
'    blatt = nlc_phb_57.Name
'    Call nlc_logoupload(blatt, "R")
'
'    nlc_phb_57.Visible = xlSheetVeryHidden
'
'
'
'ErrorHandler:
'
'' Aktion nachbereiten
'
'    nlc_phb_xl.Protect Password:=nlc_pw, Structure:=True, Windows:=False
'
'    nlc_phb_PW.Select
'    nlc_phb_PW.Range("A1").Select
'    Application.ScreenUpdating = True
'
'End Sub
'
'Public Function nlc_logoupload(blatt As String, Allignment As String) As Integer
'
'    On Error GoTo ErrorHandler
'
'    ' Parameter setzen
'    Dim level As Integer
'    Dim nlc_pw As String
'    Dim WA As Single
'    Dim YA As Single
'    Dim XA As Single
'    Dim WN As Single
'    Dim YN As Single
'    Dim XN As Single
'    Dim Error As String
'    Dim schutz As Boolean
'    Dim versteckt As Double
'
'    If Allignment <> "R" And Allignment <> "L" Then GoTo ErrorHandler
'
'    nlc_pw = nlc_intern.get_pw
'    schutz = Sheets(blatt).ProtectContents
'    If schutz = True Then Sheets(blatt).Unprotect (nlc_pw)
'    versteckt = Sheets(blatt).Visible
'    If Sheets(blatt).Visible <> xlSheetVisible Then Sheets(blatt).Visible = xlSheetVisible
'    Sheets(blatt).Select
'    Sheets(blatt).Range("A1").Select
'    WN = nlc_phb_PW.Range("F13").Value
'
'    YA = Sheets(blatt).Pictures("Logo").top
'    XA = Sheets(blatt).Pictures("Logo").left
'    WA = Sheets(blatt).Pictures("Logo").Width
'    Sheets(blatt).Pictures("Logo").Delete
'
'    YN = YA
'    ActiveSheet.Paste
'    Selection.Name = "Logo"
'    Sheets(blatt).Pictures("Logo").top = YN
'    If Allignment = "L" Then
'        XN = XA
'    Else
'        XN = XA + WA - WN
'    End If
'    Sheets(blatt).Pictures("Logo").left = XN
'
'    If schutz = True Then Sheets(blatt).Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'    If versteckt = 2 Then Sheets(blatt).Visible = 2
'    Exit Function
'ErrorHandler:
'    Error = nlc_phb_PW.Range("F11").Value
'    nlc_phb_PW.Range("F11").Value = Error + 1
'
'End Function
'
'
'
Private Sub Logo_Import_Click()

End Sub
Attribute VB_Name = "nlc_pzhb_TL"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub btn_Sortieren_Click()
    Dim selections_range As Range
    
    selection_range = nlc_pzhb_TL.Cells(Selection.Row, Selection.Column).Address
    
    nlc_pzhb_TL.Range("A5:E65536").Select
    Selection.Sort Key1:=Range(selection_range), Order1:=xlAscending, Header:=xlGuess, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
        DataOption1:=xlSortNormal
        
    nlc_pzhb_TL.Cells(1, 1).Select
End Sub
Attribute VB_Name = "nlc_pzhb_schutz"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "pzhb"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_Deactivate()
 On Error Resume Next
    frmNavi.Hide
    Err.Clear
    
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    On Error Resume Next
    
    If useradmin = True Then
        If nlc_intern.wb_save = False Then
            MsgBox WorksheetFunction.VLookup("user_wrong", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
            Cancel = True
        End If
    End If
End Sub

Private Sub Workbook_Open()
    If useradmin = True Then
        Call nlc_intern.wb_open
    End If
End Sub

Attribute VB_Name = "pzhb_05"
'Public Sub NewSIO()
''neuer Step oder Input/Output
'On Error GoTo fehler
'Dim sSpalte As Integer
'Dim sZeile As Integer
'Dim X As Integer
'Dim temp As String
'Dim tRow As Integer
'Dim tCol As Integer
'Dim Y As Integer
'Dim BackColor As Integer
'Dim NSpalte As Integer
'Dim NZeile As Integer
''Dim MaxDetail As Integer
'
'
'    AktiveRow = 0
'    AddProzess = False
'    EditProzessName = ""
'    sSpalte = ActiveCell.Column
'    sZeile = ActiveCell.Row
'    AktiveCol = sSpalte
'
'    ' Auf Basis der Datens|fffd|tze der Hauptschritte werden maxrow und maxcol errechnet
'    Maxrow = ((CountRs(nlc_search_name(ActiveWorkbook, "nlc_pzhb_91"))) * MaxDetail) + FirstRow - 1
'    MaxCol = CountRs(nlc_search_name(ActiveWorkbook, "nlc_pzhb_91")) + 2
'
'    MsgBox Maxrow & " / " & MaxCol
'
'    Exit Sub
'
'Exit Sub
'fehler:
'    MsgBox Err.Description
'
'End Sub
'
'Private Sub NewSIO_TEMP()
''neuer Step oder Input/Output
'On Error GoTo fehler
'Dim sSpalte As Integer
'Dim sZeile As Integer
'Dim FirstRow As Integer
'Dim FirstCol As Integer
'Dim X As Integer
'Dim temp As String
'Dim tRow As Integer
'Dim tCol As Integer
'Dim Y As Integer
'Dim BackColor As Integer
'Dim NSpalte As Integer
'Dim NZeile As Integer
''Dim MaxDetail As Integer
'
'
'    AktiveRow = 0
'    AddProzess = False
'    EditProzessName = ""
'    sSpalte = ActiveCell.Column
'    sZeile = ActiveCell.Row
'    AktiveCol = sSpalte
'    FirstRow = 22
'    FirstCol = 4
'    Maxrow = nlc_pzhb_90.Range("AB1").Value
'    MaxCol = nlc_pzhb_90.Range("AB2").Value
'    EditBezeichnung = ""
'
'
'    NewBezeichnung = ""
'
'
'    Application.ScreenUpdating = False
'
'    If sSpalte < FirstCol Or sSpalte > MaxCol Or sZeile < FirstRow Or sZeile > Maxrow Then
'        MsgBox WorksheetFunction.VLookup("msg_elemente_prozessebene_einf|fffd|gen", nlc_pzhb_TL.Range("A5:E65536"), 3, False), , WorksheetFunction.VLookup("msg_einf|fffd|gen_fehlgeschlagen", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
'        Exit Sub
'    End If
'
'    If sSpalte = FirstCol Then ' Wenn man am ersten Schritt steht, darf kein Schritt davor (standard) eingef|fffd|gt werden. (Excel Kopie)
'        NewAddLock = True
'    Else
'        NewAddLock = False
'    End If
'
'    If (sZeile < FirstRow + MaxDetail) Or (sSpalte > MaxCol - 1) Then
'        AddProzess = True
'        EditProzessName = Cells(sZeile, MaxCol + 4)
'        AktiveRow = sZeile
'    End If
'
''    If sSpalte > MaxCol - 1 Then
''        AddProzess = True
''    End If
'
'    'nlc_pzhb_93.unprotect (nlc_pzhb_PW.Range("C3").Value)
'    nlc_pzhb_90.Unprotect (nlc_pzhb_PW.Range("C3").Value)
'    nlc_pzhb_06.Unprotect (nlc_pzhb_PW.Range("C3").Value)
'
'    If ActiveCell.MergeCells = True Then
'        If ActiveCell.Value = "" Then Exit Sub
'        If MaxCol - FirstCol = MaxSchritt Then
'            MsgBox WorksheetFunction.VLookup("msg_max_anzahl_prozessschritte", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
'            nlc_pzhb_06.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'            'nlc_pzhb_93.protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'            nlc_pzhb_90.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'            Application.ScreenUpdating = True
'            Exit Sub
'        End If
'        frmHaupt.Show
'        If NewBezeichnung <> "" Then
'            If NewWo = True Then
'
'                NSpalte = sSpalte + 1
'                NZeile = sZeile + MaxDetail
'                nlc_pzhb_06.Cells(NZeile, NSpalte).Select
'                sSpalte = NSpalte
'                sZeile = NZeile
'            End If
'
'            Selection.EntireColumn.Insert
'            Selection.EntireRow.Insert
'            Selection.RowHeight = 11.25
'            Range(Cells(sZeile, sSpalte - 1), Cells(sZeile + 9, sSpalte - 1)).Interior.ColorIndex = xlNone
'            Range(Cells(sZeile + MaxDetail, sSpalte - 1), Cells(sZeile + (MaxDetail * 2) - 1, sSpalte - 1)).Borders(xlEdgeRight).LineStyle = xlNone
'            Range(Cells(sZeile - MaxDetail, sSpalte), Cells(sZeile - 1, sSpalte)).Interior.ColorIndex = xlNone
'            Range(Cells(sZeile, sSpalte), Cells(sZeile + MaxDetail - 1, sSpalte)).Merge
'            Range(Cells(sZeile, sSpalte), Cells(sZeile + MaxDetail - 1, sSpalte)).Value = NewBezeichnung
'
'
'            ' ID Matrix
'            tRow = ActiveCell.Row
'            tCol = ActiveCell.Column
'            nlc_pzhb_93.Activate
'            nlc_pzhb_93.Cells(tRow, tCol).Select
'            Selection.EntireColumn.Insert
'            Selection.EntireRow.Insert
'            Selection.RowHeight = 11.25
'            nlc_pzhb_93.Range(nlc_pzhb_93.Cells(sZeile, sSpalte - 1), nlc_pzhb_93.Cells(sZeile + MaxDetail - 1, sSpalte - 1)).Interior.ColorIndex = xlNone
'            nlc_pzhb_93.Range(nlc_pzhb_93.Cells(sZeile + MaxDetail, sSpalte - 1), nlc_pzhb_93.Cells(sZeile + (MaxDetail * 2) - 1, sSpalte - 1)).Borders(xlEdgeRight).LineStyle = xlNone
'            nlc_pzhb_93.Range(nlc_pzhb_93.Cells(sZeile - MaxDetail, sSpalte), nlc_pzhb_93.Cells(sZeile - 1, sSpalte)).Interior.ColorIndex = xlNone
'            nlc_pzhb_93.Range(nlc_pzhb_93.Cells(sZeile, sSpalte), nlc_pzhb_93.Cells(sZeile + MaxDetail - 1, sSpalte)).Merge
'
'
'            nlc_pzhb_06.Activate
'
'            Maxrow = Maxrow + MaxDetail
'            nlc_pzhb_90.Range("AB1").Value = Maxrow
'            MaxCol = MaxCol + 1
'            nlc_pzhb_90.Range("AB2").Value = MaxCol
'
'            ' Max ID erh|fffd|hen und ID eintragen in die ID Matrix
'            nlc_pzhb_93.Cells(Maxrow + 8, 3) = nlc_pzhb_93.Cells(Maxrow + 8, 3) + 1
'            nlc_pzhb_93.Cells(Maxrow + 10, 3) = nlc_pzhb_93.Cells(Maxrow + 10, 3) + 1
'            nlc_pzhb_93.Range(nlc_pzhb_93.Cells(sZeile, sSpalte), nlc_pzhb_93.Cells(sZeile + MaxDetail - 1, sSpalte)).Value = nlc_pzhb_93.Cells(Maxrow + 8, 3)
'            'Neue ID mit den erstellten Rollen auff|fffd|llen
''            Y = GetFirstFreeRow("nlc_pzhb_96")
''            While Not IsEmpty(nlc_pzhb_96.Cells(Y, 2).Value)
''                nlc_pzhb_96.Cells(Y, 1).Value = nlc_pzhb_93.Cells(MaxRow + 7, 4) & ".0"
''                Y = Y + 1
''            Wend
'
'            'Bezeichnung links
'            Range(Cells(sZeile, 3), Cells(sZeile + MaxDetail - 1, 3)).Merge
'            Range(Cells(sZeile, 3), Cells(sZeile + MaxDetail - 1, 3)).Value = nlc_pzhb_93.Cells(Maxrow + 8, 3)
'            'Bezeichnung Rahmen
'            With Range(Cells(sZeile, 3), Cells(sZeile + MaxDetail - 1, 3)).Borders(xlEdgeTop)
'                .LineStyle = xlContinuous
'                .Weight = xlThin
'                .ColorIndex = 7
'            End With
'            With Range(Cells(sZeile, 3), Cells(sZeile + MaxDetail - 1, 3)).Borders(xlEdgeBottom)
'                .LineStyle = xlContinuous
'                .Weight = xlThin
'                .ColorIndex = 7
'            End With
'
'            ' Prozesse Rahmen
'            With Cells(sZeile, MaxCol + 4).Borders(xlEdgeTop)
'                .LineStyle = xlContinuous
'                .Weight = xlThin
'                .ColorIndex = 7
'            End With
'
'            ' RACI Merge
'            Range(Cells(sZeile, MaxCol + 6), Cells(sZeile + MaxDetail - 1, MaxCol + 6)).Merge
'            Range(Cells(sZeile, MaxCol + 7), Cells(sZeile + MaxDetail - 1, MaxCol + 7)).Merge
'            Range(Cells(sZeile, MaxCol + 8), Cells(sZeile + MaxDetail - 1, MaxCol + 8)).Merge
'            Range(Cells(sZeile, MaxCol + 9), Cells(sZeile + MaxDetail - 1, MaxCol + 9)).Merge
'            'RACI Rahmen
'            With Range(Cells(sZeile, MaxCol + 6), Cells(sZeile + MaxDetail - 1, MaxCol + 9)).Borders(xlEdgeTop)
'                .LineStyle = xlContinuous
'                .Weight = xlThin
'                .ColorIndex = 7
'            End With
'            With Range(Cells(sZeile, MaxCol + 6), Cells(sZeile + MaxDetail - 1, MaxCol + 9)).Borders(xlEdgeBottom)
'                .LineStyle = xlContinuous
'                .Weight = xlThin
'                .ColorIndex = 7
'            End With
'
'             'innen f|fffd|rben
'            If NewArt = 0 Then
'                BackColor = 14 'Blau
'            ElseIf NewArt = 1 Then
'                BackColor = 42 'Rot
'            End If
'
'            With Range(Cells(sZeile, sSpalte), Cells(sZeile + MaxDetail - 1, sSpalte)).Interior
'                .ColorIndex = BackColor
'                .Pattern = xlSolid
'                .PatternColorIndex = xlAutomatic
'            End With
'
'            'Werte unten 0 eintragen
'
'
'            ' Werte schreiben
'            nlc_pzhb_06.Cells(nlc_pzhb_90.Range("AB1") + 2, ActiveCell.Column).Value = 0
'            nlc_pzhb_06.Cells(nlc_pzhb_90.Range("AB1") + 3, ActiveCell.Column).Value = 0
'            nlc_pzhb_06.Cells(nlc_pzhb_90.Range("AB1") + 4, ActiveCell.Column).Value = 0
'
'
'            ' Nacharbeit, beim kopieren die Formatierungen oberhalb und unterhalb l|fffd|schen
'            'oben
'            Range(Cells(FirstRow, sSpalte), Cells(sZeile - 1, sSpalte)).Interior.ColorIndex = xlNone
'            Range(Cells(FirstRow, sSpalte), Cells(sZeile - 1, sSpalte)).Borders(xlEdgeRight).LineStyle = xlNone
'            Range(Cells(FirstRow, sSpalte), Cells(sZeile - 1, sSpalte)).Borders(xlEdgeLeft).LineStyle = xlNone
'            Range(Cells(FirstRow, sSpalte), Cells(sZeile - 1, sSpalte)).Borders(xlEdgeBottom).LineStyle = xlNone
'            Range(Cells(FirstRow, sSpalte), Cells(sZeile - 1, sSpalte)).Borders(xlEdgeTop).LineStyle = xlNone
'            Range(Cells(FirstRow, sSpalte), Cells(sZeile - 1, sSpalte)).Borders(xlInsideHorizontal).LineStyle = xlNone
'            'Unten
'            Range(Cells(sZeile + MaxDetail - 1, sSpalte), Cells(Maxrow, sSpalte)).Interior.ColorIndex = xlNone
'            Range(Cells(sZeile + MaxDetail - 1, sSpalte), Cells(Maxrow, sSpalte)).Borders(xlEdgeRight).LineStyle = xlNone
'            Range(Cells(sZeile + MaxDetail - 1, sSpalte), Cells(Maxrow, sSpalte)).Borders(xlEdgeLeft).LineStyle = xlNone
'            Range(Cells(sZeile + MaxDetail - 1, sSpalte), Cells(Maxrow, sSpalte)).Borders(xlEdgeBottom).LineStyle = xlNone
'            Range(Cells(sZeile + MaxDetail - 1, sSpalte), Cells(Maxrow, sSpalte)).Borders(xlEdgeTop).LineStyle = xlNone
'            Range(Cells(sZeile + MaxDetail - 1, sSpalte), Cells(Maxrow, sSpalte)).Borders(xlInsideHorizontal).LineStyle = xlNone
'
'
'
'            ' Nacharbeit, Striche links und rechts l|fffd|schen
'
'            ' Nacharbeit, beim kopieren die Formatierungen links und rechts l|fffd|schen
'            'links
'            Range(Cells(sZeile, sSpalte - 1), Cells(sZeile + MaxDetail - 1, FirstCol)).Interior.ColorIndex = xlNone
'            Range(Cells(sZeile, sSpalte - 1), Cells(sZeile + MaxDetail - 1, FirstCol)).Borders(xlEdgeRight).LineStyle = xlNone
'            Range(Cells(sZeile, sSpalte - 1), Cells(sZeile + MaxDetail - 1, FirstCol)).Borders(xlEdgeLeft).LineStyle = xlNone
'            Range(Cells(sZeile, sSpalte - 1), Cells(sZeile + MaxDetail - 1, FirstCol)).Borders(xlEdgeBottom).LineStyle = xlNone
'            Range(Cells(sZeile, sSpalte - 1), Cells(sZeile + MaxDetail - 1, FirstCol)).Borders(xlEdgeTop).LineStyle = xlNone
'            Range(Cells(sZeile, sSpalte - 1), Cells(sZeile + MaxDetail - 1, FirstCol)).Borders(xlInsideHorizontal).LineStyle = xlNone
'            'rechts
'            Range(Cells(sZeile, sSpalte + 1), Cells(sZeile + MaxDetail - 1, MaxCol)).Interior.ColorIndex = xlNone
'            Range(Cells(sZeile, sSpalte + 1), Cells(sZeile + MaxDetail - 1, MaxCol)).Borders(xlEdgeRight).LineStyle = xlNone
'            Range(Cells(sZeile, sSpalte + 1), Cells(sZeile + MaxDetail - 1, MaxCol)).Borders(xlEdgeLeft).LineStyle = xlNone
'            Range(Cells(sZeile, sSpalte + 1), Cells(sZeile + MaxDetail - 1, MaxCol)).Borders(xlEdgeBottom).LineStyle = xlNone
'            Range(Cells(sZeile, sSpalte + 1), Cells(sZeile + MaxDetail - 1, MaxCol)).Borders(xlEdgeTop).LineStyle = xlNone
'            Range(Cells(sZeile, sSpalte + 1), Cells(sZeile + MaxDetail - 1, MaxCol)).Borders(xlInsideHorizontal).LineStyle = xlNone
'
'            Call CountNew
'            Call FormatRahmen
'        End If
'    Else
'        temp = GetOutputFrom(ActiveCell)
'        If ActiveCell.Value <> "" Then
'        ' Es handelt sich um ein Detail
'
'        'If Cells(ActiveCell.Row + 1, ActiveCell.Column).MergeCells = True Then
'            If aktDetail = MaxDetail Then
'                MsgBox WorksheetFunction.VLookup("msg_max_anzahl_details", nlc_pzhb_TL.Range("A5:E65536"), 3, False)
'                Exit Sub
'            Else
''                MsgBox "Neue Zeile einblenden, noch keine Funktion!!!!!!!!!!!!!!!!!!!!"
''
''                sZeile = ActiveCell.Row + 1
'            End If
'
'
'
'
'        Else
'            'Neuen Eintrag in leeres Feld schreiben
'            aktNewDetailCol = sSpalte
'            aktNewDetailRow = sZeile
'            'aktNewDetailFrom = temp
'            frmDetail.Show
'
'        End If
'
'
'
'    End If
'    'Textausrichtung der Felder mittig/mittig setzen innerhalb der DM
'    nlc_pzhb_06.Range(nlc_pzhb_06.Cells(FirstRow, FirstCol), nlc_pzhb_06.Cells(Maxrow, MaxCol)).HorizontalAlignment = xlCenter
'    nlc_pzhb_06.Range(nlc_pzhb_06.Cells(FirstRow, FirstCol), nlc_pzhb_06.Cells(Maxrow, MaxCol)).VerticalAlignment = xlCenter
'
'
'    'nlc_pzhb_91.unprotect (nlc_pzhb_PW.Range("C3").Value)
'    'nlc_pzhb_92.unprotect (nlc_pzhb_PW.Range("C3").Value)
'    Call FillMainData
'    Call FillDetailData
'    nlc_pzhb_06.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'    'nlc_pzhb_91.protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'    'nlc_pzhb_92.protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'    'nlc_pzhb_93.protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'    nlc_pzhb_90.Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
'    Application.ScreenUpdating = True
'Exit Sub
'fehler:
'    MsgBox Err.Description
'
'End Sub
'

' InQuest injected base64 decoded content
' z-zu^

INQUEST-PP=macro
