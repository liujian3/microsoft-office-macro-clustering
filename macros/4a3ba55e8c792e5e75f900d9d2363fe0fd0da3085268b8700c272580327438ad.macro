Attribute VB_Name = "Module1"
Sub CopyTraditionalButton()
Attribute CopyTraditionalButton.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro1 Macro
'

'
'
Dim aws As Worksheet
Set aws = Sheets("Traditional")
sc = Worksheets.Count


    Sheets("Traditional").Select
    ActiveSheet.Shapes.Range(Array("Button 3")).Select
    Selection.Copy
    
     Sheets(Worksheets(sc).Name).Select
    Range("J3").Select
    ActiveSheet.PasteSpecial Format:="Microsoft Office Drawing Object", Link:= _
        False, DisplayAsIcon:=False
        
'
'
    
End Sub
Attribute VB_Name = "Module2"
Sub CopyTraditionalSheet()

    Dim ws As Worksheet
'    Dim sc As Integer
    Dim aws As Worksheet
    Set aws = ActiveSheet
       
    Set ws = Sheets.Add(after:=Sheets(Sheets.Count))

    sc = Worksheets.Count

    

Dim CodeCopy As VBIDE.CodeModule
Dim CodePaste As VBIDE.CodeModule
Dim numLines As Integer

Set CodeCopy = ActiveWorkbook.VBProject.VBComponents("Sheet1").CodeModule
Set CodePaste = ActiveWorkbook.VBProject.VBComponents(Worksheets(sc).CodeName).CodeModule

numLines = CodeCopy.CountOfLines
''Use this line to erase all code that might already be in sheet3:
''If CodePaste.CountOfLines > 1 Then CodePaste.DeleteLines 1, CodePaste.CountOfLines
'
CodePaste.AddFromString CodeCopy.Lines(1, numLines)


'
' CopyTraditional Macro

aws.Select
 Cells.Select
    Selection.Copy
    Sheets(Worksheets(sc).Name).Select
    Range("a1").Select
'    ActiveSheet.Buttons.Add(565.8, 31.2, 106.2, 30.6).Select
    Selection.PasteSpecial Paste:=xlPasteAllUsingSourceTheme, Operation:=xlNone _
        , SkipBlanks:=False, Transpose:=False
        
    Range("B5").Select
    aws.Select
    Range("B3").Select
    application.CutCopyMode = False
'    Sheets(Worksheets(sc).Name).Select
 


End Sub

  


Attribute VB_Name = "Module3"
Sub button3_click()

Dim aws As Worksheet
Dim sc As Integer

Call CopyTraditionalSheet
Call CopyTraditionalButton

End Sub
Attribute VB_Name = "Module4"
Sub CopyCommodityButton()
'
' Macro1 Macro
'

'
'
Dim aws As Worksheet
Set aws = Sheets("Commodity")
sc = Worksheets.Count


    Sheets("Commodity").Select
    ActiveSheet.Shapes.Range(Array("Button 1")).Select
    Selection.Copy
    
     Sheets(Worksheets(sc).Name).Select
    Range("J3").Select
    ActiveSheet.PasteSpecial Format:="Microsoft Office Drawing Object", Link:= _
        False, DisplayAsIcon:=False
        
'
'
    
End Sub


Attribute VB_Name = "Module5"
Sub CopyCommoditySheet()

    Dim ws As Worksheet
'    Dim sc As Integer
    Dim aws As Worksheet
    Set aws = ActiveSheet
       
    Set ws = Sheets.Add(after:=Sheets(Sheets.Count))

    sc = Worksheets.Count

    

Dim CodeCopy As VBIDE.CodeModule
Dim CodePaste As VBIDE.CodeModule
Dim numLines As Integer

Set CodeCopy = ActiveWorkbook.VBProject.VBComponents("Sheet2").CodeModule
Set CodePaste = ActiveWorkbook.VBProject.VBComponents(Worksheets(sc).CodeName).CodeModule

numLines = CodeCopy.CountOfLines
''Use this line to erase all code that might already be in sheet3:
''If CodePaste.CountOfLines > 1 Then CodePaste.DeleteLines 1, CodePaste.CountOfLines
'
CodePaste.AddFromString CodeCopy.Lines(1, numLines)


'
' CopyTraditional Macro

aws.Select
 Cells.Select
    Selection.Copy
    Sheets(Worksheets(sc).Name).Select
    Range("a1").Select
'    ActiveSheet.Buttons.Add(565.8, 31.2, 106.2, 30.6).Select
    Selection.PasteSpecial Paste:=xlPasteAllUsingSourceTheme, Operation:=xlNone _
        , SkipBlanks:=False, Transpose:=False
        
    Range("B5").Select
    aws.Select
    Range("B3").Select
    application.CutCopyMode = False
'    Sheets(Worksheets(sc).Name).Select
 


End Sub

Attribute VB_Name = "Module6"
Sub button4_click()

Dim aws As Worksheet
Dim sc As Integer

Call CopyCommoditySheet
Call CopyCommodityButton

End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Option Explicit

Dim AMC As String, Service As String, RScale As String

Private Sub worksheet_selectionchange(ByVal Target As Range)

If AMC = Range("B40").Address Then
Range("b41").ClearContents
ElseIf Service = Range("B8").Address Then Range("B9").ClearContents
ElseIf RScale = Range("B19").Address Then Range("B20").ClearContents

End If
AMC = ActiveCell.Address
Service = ActiveCell.Address
RScale = ActiveCell.Address

End Sub


Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Option Explicit

Dim AMC As String, Service As String, RScale As String

Private Sub worksheet_selectionchange(ByVal Target As Range)

If AMC = Range("B40").Address Then
Range("b41").ClearContents
ElseIf Service = Range("B8").Address Then Range("B9").ClearContents
ElseIf RScale = Range("B19").Address Then Range("B20").ClearContents

End If
AMC = ActiveCell.Address
Service = ActiveCell.Address
RScale = ActiveCell.Address

End Sub


Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Option Explicit

Dim AMC As String, Service As String, RScale As String

Private Sub worksheet_selectionchange(ByVal Target As Range)

If AMC = Range("B40").Address Then
Range("b41").ClearContents
ElseIf Service = Range("B8").Address Then Range("B9").ClearContents
ElseIf RScale = Range("B19").Address Then Range("B20").ClearContents

End If
AMC = ActiveCell.Address
Service = ActiveCell.Address
RScale = ActiveCell.Address

End Sub


Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Option Explicit

Dim AMC As String, Service As String, RScale As String

Private Sub worksheet_selectionchange(ByVal Target As Range)

If AMC = Range("B40").Address Then
Range("b41").ClearContents
ElseIf Service = Range("B8").Address Then Range("B9").ClearContents
ElseIf RScale = Range("B19").Address Then Range("B20").ClearContents

End If
AMC = ActiveCell.Address
Service = ActiveCell.Address
RScale = ActiveCell.Address

End Sub


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub test()

    Dim ws As Worksheet
    Dim sc As Integer
    Dim aws As Worksheet
    Set aws = ActiveSheet
       
    Set ws = Sheets.Add(after:=Sheets(Sheets.Count))

    sc = Worksheets.Count

    

Dim CodeCopy As VBIDE.CodeModule
Dim CodePaste As VBIDE.CodeModule
Dim numLines As Integer

Set CodeCopy = ActiveWorkbook.VBProject.VBComponents("Sheet1").CodeModule
Set CodePaste = ActiveWorkbook.VBProject.VBComponents(Worksheets(sc).CodeName).CodeModule

numLines = CodeCopy.CountOfLines
''Use this line to erase all code that might already be in sheet3:
''If CodePaste.CountOfLines > 1 Then CodePaste.DeleteLines 1, CodePaste.CountOfLines
'
CodePaste.AddFromString CodeCopy.Lines(1, numLines)


'
' CopyTraditional Macro

aws.Select
 Cells.Select
    Selection.Copy
    Sheets(Worksheets(sc).Name).Select
    Range("a1").Select
'    ActiveSheet.Buttons.Add(565.8, 31.2, 106.2, 30.6).Select
    Selection.PasteSpecial Paste:=xlPasteAllUsingSourceTheme, Operation:=xlNone _
        , SkipBlanks:=False, Transpose:=False
        
    Range("B5").Select
    aws.Select
    Range("B3").Select
    application.CutCopyMode = False
    Sheets(Worksheets(sc).Name).Select
 


End Sub

  


INQUEST-PP=macro
