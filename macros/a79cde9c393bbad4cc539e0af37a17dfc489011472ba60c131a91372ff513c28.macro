Attribute VB_Name = "AllSheetsInThisWorkbook"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdGetListAllSheets, 1, 0, MSForms, CommandButton"
Option Explicit

Public Sub MakeList()
  cmdGetListAllSheets_Click
End Sub

Private Sub cmdGetListAllSheets_Click()
  
  Dim intNumberWorkSheet As Integer '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim intNumberTechSheet As Integer '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim ws As Worksheet
  Dim wb As Workbook
  Dim rng As Range, cl As Range, cl_list As Range
  Dim nColor As Integer

  Set wb = ThisWorkbook
  Set ws = Me

  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Me.Range("A2:B" & Me.UsedRange.Rows.Count + 2).Clear

  intNumberWorkSheet = 2
  intNumberTechSheet = 2
  For Each ws In wb.Sheets
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If ws.Tab.ColorIndex <> colorLightBrown Then                 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      Me.Range("A" & intNumberWorkSheet).Value = ws.name
      intNumberWorkSheet = intNumberWorkSheet + 1
    Else                                                         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      Me.Range("B" & intNumberTechSheet).Value = ws.name
      intNumberTechSheet = intNumberTechSheet + 1
    End If
  Next ws


End Sub
Attribute VB_Name = "IMessageWindow"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Sub ProgressTick()

End Sub

Private Sub Initialize()

End Sub

Private Sub Deactivate()

End Sub

Private Sub QueryClose(Cancel As Integer, CloseMode As Integer)

End Sub


Public Sub Show(intTypeMessage As Integer, Optional strText As String = "", Optional strFormCaption As String = "")

End Sub

Public Sub Hide()

End Sub

Public Sub SetText(strText As String)

End Sub
Attribute VB_Name = "Instruction"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const colorDisableSelect As Long = 15790320
Private Const colorSelect        As Long = 7389695 ' 7389695 16761200 11916796

Public Sub cmdStart_Click()
  frmRegion.Show
End Sub

Private Sub Worksheet_Activate()
  Rearrange_Shapes
End Sub

Public Sub Rearrange_Shapes()

  On Error GoTo ErrHandler

  Dim lngICounter As Long

  modServiceModule.UNPROTECT_SHEET Instruction

  Instruction.Shapes("InstrBlock_1").Height = 36.5
  For lngICounter = 2 To 8
    Instruction.Shapes("InstrBlock_" & lngICounter).Height = Instruction.Shapes("InstrBlock_" & lngICounter - 1).Height
    Instruction.Shapes("InstrBlock_" & lngICounter).Top = Instruction.Shapes("InstrBlock_" & lngICounter - 1).Top + _
                                                          Instruction.Shapes("InstrBlock_" & lngICounter - 1).Height
    Instruction.Shapes("InstrBlock_" & lngICounter).ZOrder msoSendToBack
  Next lngICounter

  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
  modServiceModule.PROTECT_SHEET Instruction, True
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  If Not Target.cells(1, 1).Interior.ColorIndex = modDefine.colorYellow Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd| DoubleClick
    Cancel = True
  End If
End Sub

Public Sub BlockClick()

  On Error GoTo ErrHandler

  Dim lngNum As Long
  Dim strShapeName As String
  Dim lngBlockCount As Long

  strShapeName = vbNullString

  Application.ScreenUpdating = False
  Application.EnableEvents = False

  If Len(Application.Caller) > 0 Then

    strShapeName = Left(Application.Caller, 6)

    modServiceModule.UNPROTECT_SHEET Instruction


    ' |fffd||fffd||fffd||fffd||fffd| Caller-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Event Issuer)
    Select Case strShapeName
      Case "InstrB":
        lngNum = Mid(Application.Caller, 12, 1)
      Case "InstrI":
        lngNum = Mid(Application.Caller, 10, 1)
    End Select


    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For lngBlockCount = 1 To 8
      Instruction.Range("Instr_" & lngBlockCount).Rows.Hidden = True
    Next lngBlockCount

    Instruction.Range("Instr_" & lngNum).Rows.Hidden = False


    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For lngBlockCount = 1 To 8
      Instruction.Shapes("InstrBlock_" & lngBlockCount).Fill.ForeColor.RGB = colorDisableSelect
    Next lngBlockCount

    Instruction.Shapes("InstrBlock_" & lngNum).Fill.ForeColor.RGB = colorSelect

  End If

  Rearrange_Shapes

  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
  Instruction.Range("A1").Select
  modServiceModule.PROTECT_SHEET Instruction, True
  Application.ScreenUpdating = True
  Application.EnableEvents = True
  Instruction.Range("A1").Activate
End Sub

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub chkUpdates_Click()
  chkUpdates_Click_Handler Application.Caller
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub chkUpdates_Click_Handler(ByVal strCaller As String)

  On Error GoTo ErrHandler

  Application.EnableEvents = False
  Application.ScreenUpdating = False

  modServiceModule.UNPROTECT_SHEET Instruction

  Select Case strCaller
    Case "chkGetUpdatesFalse"
      If Instruction.Shapes("chkGetUpdatesFalse").Visible = msoTrue Then
        Instruction.Shapes("chkGetUpdatesFalse").Visible = msoFalse
        Instruction.Shapes("chkGetUpdatesTrue").Visible = msoTrue
        Instruction.Shapes("chkNoUpdatesFalse").Visible = msoTrue
        Instruction.Shapes("chkNoUpdatesTrue").Visible = msoFalse
      End If
      Instruction.Range("chkGetUpdatesValue").Value = "y"
      Instruction.Range("chkNoUpdatesValue").Value = vbNullString
    Case "chkNoUpdatesFalse"
      If Instruction.Shapes("chkNoUpdatesFalse").Visible = msoTrue Then
        Instruction.Shapes("chkGetUpdatesFalse").Visible = msoTrue
        Instruction.Shapes("chkGetUpdatesTrue").Visible = msoFalse
        Instruction.Shapes("chkNoUpdatesFalse").Visible = msoFalse
        Instruction.Shapes("chkNoUpdatesTrue").Visible = msoTrue
      End If
      Instruction.Range("chkGetUpdatesValue").Value = vbNullString
      Instruction.Range("chkNoUpdatesValue").Value = "y"
  End Select

  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
  modServiceModule.PROTECT_SHEET Instruction, True
  Application.EnableEvents = True
  Application.ScreenUpdating = True
End Sub

Public Sub cmdGetUpdate_Click()
  modUpdTemplMain.cmdCheckForUpdates_Click_Handler
End Sub

Public Sub cmdShowHideUpdateLog_Click()

  Dim wsSheet As Worksheet

  If modServiceModule.SheetExists(modUpd_Templ_Defines.STR_LOGGING_SHEET_NAME, ThisWorkbook) = True Then
    Set wsSheet = ThisWorkbook.Worksheets(modUpd_Templ_Defines.STR_LOGGING_SHEET_NAME)
    If wsSheet.Visible = xlSheetVisible Then
      wsSheet.Visible = xlSheetVeryHidden
    Else
      wsSheet.Visible = xlSheetVisible
    End If
  End If

End Sub
Attribute VB_Name = "List00"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modGlobals.blnFormCalendarVisible = True
  modList00.Worksheet_BeforeDoubleClick_Handler Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modList00.Worksheet_Change_Handler Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modList00.Worksheet_FollowHyperlink_Handler Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modList00.Worksheet_SelectionChange Target
End Sub

Private Sub Worksheet_Deactivate()
  modList00.Worksheet_Deactivate
End Sub

Attribute VB_Name = "List01"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modList01.Worksheet_BeforeDoubleClick_Handler Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modList01.Worksheet_Change_Handler Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modList01.Worksheet_FollowHyperlink_Handler Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modList01.Worksheet_SelectionChange Target
End Sub

Private Sub Worksheet_Deactivate()
  modList01.Worksheet_Deactivate
End Sub

Attribute VB_Name = "List02"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modList02.Worksheet_BeforeDoubleClick_Handler Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modList02.Worksheet_Change_Handler Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modList02.Worksheet_FollowHyperlink_Handler Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modList02.Worksheet_SelectionChange Target
End Sub

Private Sub Worksheet_Deactivate()
  modList02.Worksheet_Deactivate
End Sub

Attribute VB_Name = "List03"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modList03.Worksheet_BeforeDoubleClick_Handler Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modList03.Worksheet_Change_Handler Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modList03.Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modList03.Worksheet_SelectionChange Target
End Sub

Private Sub Worksheet_Deactivate()
  modList03.Worksheet_Deactivate
End Sub

Attribute VB_Name = "ListCheck"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub Clear(Optional blnProtect As Boolean = True)
  modServiceModule.UNPROTECT_SHEET Me
  Me.AutoFilterMode = False
  Me.Range(Me.Rows(5), Me.Rows(Me.UsedRange.Rows.Count + 14)).Delete
  With Me.Range("B4:D4").Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .Weight = xlThick
    .ColorIndex = 48
  End With
  Me.Range("B4:D4").AutoFilter
  If blnProtect Then modServiceModule.PROTECT_SHEET Me, True, , True
End Sub

Attribute VB_Name = "ListComm"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modComm.Worksheet_BeforeDoubleClick_Handler Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modComm.Worksheet_Change_Handler Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modComm.Worksheet_FollowHyperlink_Handler Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modComm.Worksheet_SelectionChange Target
End Sub

Private Sub Worksheet_Deactivate()
  modComm.Worksheet_Deactivate
End Sub

Attribute VB_Name = "MessageDialogue"
Attribute VB_Base = "0{39C8EDB4-4CC8-441C-ACCA-7039BB1BB705}{4C9AFA1B-4F1B-43E1-ACD3-A318C4B052FB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit

Implements IMessageWindow

Dim intValue As Integer
Dim intStart As Integer
Dim strParentFormCaption As String
Dim sngTick As Single
Dim intType As Integer

#If VBA7 And Win64 Then
  Private Declare PtrSafe Function GetTickCount Lib "Kernel32" () As Long
#Else
  Private Declare Function GetTickCount Lib "Kernel32" () As Long
#End If

Private Const AW_OPTIMAL_TIME = 200&  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_HOR_POSITIVE = &H1  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_HOR_NEGATIVE = &H2  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_VER_POSITIVE = &H4  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Const AW_VER_NEGATIVE = &H8  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Const AW_CENTER = &H10       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_HIDE = &H10000      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|; |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_ACTIVATE = &H20000  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Const AW_SLIDE = &H40000     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_BLEND = &H80000     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const GWL_STYLE As Long = (-16)
Private Const GWL_EXSTYLE = (-20)
Private Const WS_CAPTION As Long = &HC00000
Private Const WS_BORDER As Long = &H800000
Private Const WS_EX_LAYERED = &H80000
Private Const SWP_NOACTIVATE = &H10
Private Const SWP_NOSIZE = &H1
Private Const SWP_NOMOVE = &H2
Private Const SWP_SHOWWINDOW = &H40
Private Const SWP_FRAMECHANGED = &H20
Private Const SWP_NOOWNERZORDER = &H200
Private Const SWP_NOZORDER = &H4
Private Const LWA_COLORKEY = &H1
Private Const LWA_ALPHA = &H2
Private Const WM_NCLBUTTONDOWN = &HA1
Private Const HTCAPTION = 2
Private Type POINTAPI
  x As Long
  y As Long
End Type

Private Type RECT
  Left As Long
  Top As Long
  Right As Long
  Bottom As Long
End Type

#If VBA7 Then

  #If Win64 Then
    Private Declare PtrSafe Function SetWindowLongPtr Lib "user32" Alias "SetWindowLongPtrA" (ByVal hWnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    Private Declare PtrSafe Function GetWindowLongPtr Lib "user32" Alias "GetWindowLongPtrA" (ByVal hWnd As LongPtr, ByVal nIndex As Long) As LongPtr
  #Else
    Private Declare PtrSafe Function SetWindowLongPtr Lib "user32" Alias "SetWindowLongA" (ByVal hWnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    Private Declare PtrSafe Function GetWindowLongPtr Lib "user32" Alias "GetWindowLongA" (ByVal hWnd As LongPtr, ByVal nIndex As Long) As LongPtr
  #End If

  Private Declare PtrSafe Function SetWindowPos Lib "user32" (ByVal hWnd As LongPtr, ByVal hWndInsertAfter As LongPtr, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long
  Private Declare PtrSafe Function GetWindowRect Lib "user32" (ByVal hWnd As LongPtr, lpRect As RECT) As LongPtr

  Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
  Private Declare PtrSafe Function AnimateWindow Lib "user32" (ByVal hWnd As Long, ByVal dwTime As Long, ByVal dwFlags As Long) As Boolean
  Private Declare PtrSafe Function GetCursorPos Lib "user32" (lpPoint As POINTAPI) As Long
  Private Declare PtrSafe Function SetLayeredWindowAttributes Lib "user32" (ByVal hWnd As Long, ByVal crKey As Long, ByVal bAlpha As Byte, ByVal dwFlags As Long) As Long
  Private Declare PtrSafe Sub ReleaseCapture Lib "user32" ()
  Private Declare PtrSafe Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hWnd As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, lparam As Any) As LongPtr

#Else

  Private Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hWnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
  Private Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hWnd As Long, ByVal nIndex As Long) As Long
  Private Declare Function SetWindowPos Lib "user32" (ByVal hWnd As Long, ByVal hWndInsertAfter As Long, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long
  Private Declare Function GetWindowRect Lib "user32" (ByVal hWnd As Long, lpRect As RECT) As Long

  Private Declare Function FindWindow Lib "user32.dll" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
  Private Declare Function AnimateWindow Lib "user32" (ByVal hWnd As Long, ByVal dwTime As Long, ByVal dwFlags As Long) As Boolean
  Private Declare Function GetCursorPos& Lib "user32.dll" (lpPoint As POINTAPI)
  Private Declare Function SetLayeredWindowAttributes Lib "user32" (ByVal hWnd As Long, ByVal crKey As Long, ByVal bAlpha As Byte, ByVal dwFlags As Long) As Long
  Private Declare Sub ReleaseCapture Lib "user32" ()
  Private Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lparam As Any) As Long
#End If

'***********************************
#If VBA7 And Win64 Then
  Private ihWnd As LongPtr
#Else
  Private ihWnd As Long
#End If
'***********************************

#If VBA7 Then

  #If Win64 Then

Private Sub MoveFormOnScreen(Optional ByVal ToCursor As Boolean = False)
  Dim i As LongPtr
  Dim j As LongPtr
  Dim paCoordinates As POINTAPI
  i = GetWindowLongPtr(ihWnd, GWL_STYLE)
  i = i And Not WS_CAPTION And Not WS_BORDER
  j = SetWindowLongPtr(ihWnd, GWL_STYLE, i)
  j = SetWindowLongPtr(ihWnd, GWL_EXSTYLE, 0)
  If ToCursor Then
    GetCursorPos paCoordinates
    SetWindowPos ihWnd, 0, paCoordinates.x, paCoordinates.y, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  Else
    Dim r As RECT
    Dim k As Integer
    GetWindowRect FindWindow(vbNullString, strParentFormCaption), r
    i = r.Right - r.Left
    j = r.Bottom - r.Top
    SetWindowPos ihWnd, 0, r.Left, r.Top, CLng(i), CLng(j), SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  End If
End Sub

Private Sub SetTransparent(Optional ByVal Layered As Byte = 255)
  Dim Ret As LongPtr
  Ret = GetWindowLongPtr(ihWnd, GWL_EXSTYLE)
  Ret = Ret Or WS_EX_LAYERED
  SetWindowLongPtr ihWnd, GWL_EXSTYLE, Ret
  SetLayeredWindowAttributes CLng(ihWnd), 0, Layered, LWA_ALPHA
End Sub

#Else

Private Sub MoveFormOnScreen(Optional ByVal ToCursor As Boolean = False)
  Dim i As Long
  Dim j As Long
  Dim paCoordinates As POINTAPI
  i = GetWindowLongPtr(ihWnd, GWL_STYLE)
  i = i And Not WS_CAPTION And Not WS_BORDER
  j = SetWindowLongPtr(ihWnd, GWL_STYLE, i)
  j = SetWindowLongPtr(ihWnd, GWL_EXSTYLE, 0)
  If ToCursor Then
    GetCursorPos paCoordinates
    SetWindowPos ihWnd, 0, paCoordinates.x, paCoordinates.y, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  Else
    Dim r As RECT
    Dim k As Integer
    GetWindowRect FindWindow(vbNullString, strParentFormCaption), r
    i = r.Right - r.Left
    j = r.Bottom - r.Top
    SetWindowPos ihWnd, 0, r.Left, r.Top, i, j, SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  End If
End Sub

Private Sub SetTransparent(Optional ByVal Layered As Byte = 255)
  Dim Ret As Long
  Ret = GetWindowLongPtr(ihWnd, GWL_EXSTYLE)
  Ret = Ret Or WS_EX_LAYERED
  SetWindowLongPtr ihWnd, GWL_EXSTYLE, Ret
  SetLayeredWindowAttributes ihWnd, 0, Layered, LWA_ALPHA
End Sub

#End If

#Else

Private Sub MoveFormOnScreen(Optional ByVal ToCursor As Boolean = False)
  Dim i As Long, j As Long, paCoordinates As POINTAPI
  i = GetWindowLong(ihWnd, GWL_STYLE)
  i = i And WS_BORDER
  j = SetWindowLong(ihWnd, GWL_STYLE, i)
  j = SetWindowLong(ihWnd, GWL_EXSTYLE, 0)
  If ToCursor Then
    GetCursorPos paCoordinates
    SetWindowPos ihWnd, 0, paCoordinates.x, paCoordinates.y, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  Else
    Dim r As RECT
    Dim k As Integer

    GetWindowRect FindWindow(vbNullString, strParentFormCaption), r
    i = r.Right - r.Left
    j = r.Bottom - r.Top
    SetWindowPos ihWnd, 0, r.Left, r.Top, i, j, SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  End If
End Sub

Private Sub SetTransparent(Optional ByVal Layered As Byte = 255)
  Dim Ret As Long
  Ret = GetWindowLong(ihWnd, GWL_EXSTYLE)
  Ret = Ret Or WS_EX_LAYERED
  SetWindowLong ihWnd, GWL_EXSTYLE, Ret
  SetLayeredWindowAttributes ihWnd, 0, Layered, LWA_ALPHA
End Sub

#End If

Public Sub MoveIt()
  Call ReleaseCapture
  SendMessage ihWnd, WM_NCLBUTTONDOWN, HTCAPTION, 0&
End Sub

'***********************************

Private Sub MakeForm()
  Dim intICounter As Integer
  Select Case intType
  Case vbInformation
    Me.BackColor = RGB(200, 213, 240)
    imgInfo.Left = Int(Me.Width / 2) - 130
    imgInfo.Top = Int(Me.Height / 2) - 15
    imgInfo.Visible = True
    With LabelText
      .ForeColor = 0
      .Width = 200
      .Left = imgInfo.Left + 40
      .Top = imgInfo.Top - 10
      .AutoSize = True
      If .Width < 200 Then .Width = 200
    End With
    With btnOK
      .Left = LabelText.Left + 65
      .Top = LabelText.Top + LabelText.Height + 10
      .Visible = True
    End With
  Case vbCritical
    Me.BackColor = RGB(255, 150, 150)
    imgCritical.Left = Int(Me.Width / 2) - 130
    imgCritical.Top = Int(Me.Height / 2) - 18
    imgCritical.Visible = True
    With LabelText
      .ForeColor = 0
      .Width = 200
      .Left = imgCritical.Left + 46
      .Top = imgCritical.Top - 10
      .AutoSize = True
      If .Width < 200 Then .Width = 200
    End With
    With btnOK
      .Left = LabelText.Left + 65
      .Top = LabelText.Top + LabelText.Height + 10
      .Visible = True
    End With
  Case vbDefaultButton1
    Me.BackColor = RGB(200, 200, 200)
    For intICounter = 1 To 12
      Me.Controls("Image" & intICounter).Left = Int(Me.Width / 2) - 16
      Me.Controls("Image" & intICounter).Top = Int(Me.Height / 2) - 16
      Me.Controls("Image" & intICounter).Visible = True
    Next intICounter
    With LabelText
      .ForeColor = 0
      .Width = 200
      .Left = Image1.Left - 84
      .Top = Image1.Top - 14 - .Height
      .AutoSize = True
      If .Width < 200 Then .Width = 200
    End With
  Case vbDefaultButton2
    ProgressLine.Top = Int(Me.Height / 2) - 9
    ProgressLine.Left = Int(Me.Width / 2) - 201
    ProgressLine.Visible = True
    Label1.Top = ProgressLine.Top
    Label1.Left = ProgressLine.Left
    Label1.Visible = True
    Label2.Top = ProgressLine.Top
    Label2.Left = ProgressLine.Left + 294
    Label2.Visible = True
    Label3.Top = ProgressLine.Top
    Label3.Left = ProgressLine.Left + 108
    Label3.Visible = True
    LabelText.Top = ProgressLine.Top - 18
    LabelText.Left = ProgressLine.Left + 108
    intStart = ProgressLine.Left
  End Select
End Sub


Private Sub btnOK_Click()
  IMessageWindow_Hide
End Sub

Private Sub IMessageWindow_Initialize()

  If modAnimatedFormsGlobals.blnUpdateProgressFormIsInitialized = True Then
    Exit Sub  ' Already initialized
  End If

  ihWnd = FindWindow(vbNullString, Me.caption)


  MoveFormOnScreen False
  MakeForm
  
  SetTransparent 220
  AnimateWindow CLng(ihWnd), AW_OPTIMAL_TIME, AW_VER_POSITIVE
  modAnimatedFormsGlobals.blnUpdateProgressFormIsInitialized = True  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

  sngTick = Timer
  intValue = 1

  Me.Repaint

End Sub

Private Sub IMessageWindow_QueryClose(Cancel As Integer, CloseMode As Integer)

  AnimateWindow CLng(ihWnd), AW_OPTIMAL_TIME, AW_HIDE Or AW_VER_POSITIVE
  modAnimatedFormsGlobals.blnUpdateProgressFormIsInitialized = False

End Sub

Private Sub IMessageWindow_Deactivate()
  IMessageWindow_QueryClose True, vbFormControlMenu
End Sub

Public Sub IMessageWindow_Show(intTypeMessage As Integer, Optional strText As String = "", Optional strCaption As String = "")
  If strCaption = "" Then strParentFormCaption = Application.caption Else strParentFormCaption = strCaption
  intType = intTypeMessage
  LabelText.caption = strText
  IMessageWindow_Initialize
End Sub

Public Sub IMessageWindow_Hide()
  IMessageWindow_Deactivate
End Sub

Public Sub IMessageWindow_ProgressTick()
  If intType = 1 Then
    If Timer - sngTick > 0.01 Then
      ProgressLine.Left = ProgressLine.Left + 1
      If ProgressLine.Left - intStart >= 106 Then ProgressLine.Left = intStart
      sngTick = Timer
    End If
  Else
    If Timer - sngTick > 0.05 Then
      Me.Controls("Image" & intValue).ZOrder 0
      intValue = intValue + 1
      If intValue = 13 Then intValue = 1
      sngTick = Timer
    End If
  End If
  DoEvents
End Sub

Public Sub IMessageWindow_SetText(strText As String)
  LabelText.caption = strText
  With LabelText
    .ForeColor = 0
    .Width = 200
    .Left = Image1.Left - 84
    .Top = Image1.Top - 14 - .Height
    .AutoSize = True
    If .Width < 200 Then .Width = 200
  End With
End Sub


Attribute VB_Name = "TEHSHEET"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TSH_REESTR_MO"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TSH_REESTR_ORG"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Attribute VB_Name = "TSH_et_union_hor"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Attribute VB_Name = "TSH_et_union_vert"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Wrapper"
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

Function GetFilterRange(r As Range, v As Variant) As Range
    Dim cell As Range

    If r.Columns.Count > 1 Then   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each cell In r
            If cell.Value = v Then
                If GetFilterRange Is Nothing Then
                    Set GetFilterRange = cell.Worksheet.Columns(cell.Column)
                Else
                    Set GetFilterRange = Union(GetFilterRange, cell.Worksheet.Columns(cell.Column))
                End If
            End If
        Next cell
    Else                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each cell In r
            If cell.Value = v Then
                If GetFilterRange Is Nothing Then
                    Set GetFilterRange = cell.Worksheet.Rows(cell.Row)
                Else
                    Set GetFilterRange = Union(GetFilterRange, cell.Worksheet.Rows(cell.Row))
                End If
            End If
        Next cell
    End If
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| r1, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| r2 = v2

Public Function GetValueFilter1(R1 As Range, R2 As Range, v2 As Variant, Optional R3 As Range) As Range
    On Error GoTo ErrHandler

    If IsMissing(R3) Then
        Set GetValueFilter1 = Intersect(R1, GetFilterRange(R2, v2))
    ElseIf R3 Is Nothing Then
        Set GetValueFilter1 = Intersect(R1, GetFilterRange(R2, v2))
    Else
        Set GetValueFilter1 = Intersect(R1, GetFilterRange(R2, v2), R3)
    End If

    Exit Function
ErrHandler:
    Set GetValueFilter1 = Nothing
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| r1, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| r2 = v2 and r3 = v3

Public Function GetValueFilter2(R1 As Range, R2 As Range, v2 As Variant, R3 As Range, v3 As Variant, Optional R4 As Range) As Range
    On Error GoTo ErrHandler

    If IsMissing(R4) Then
        Set GetValueFilter2 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3))
    ElseIf R4 Is Nothing Then
        Set GetValueFilter2 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3))
    Else
        Set GetValueFilter2 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3), R4)
    End If

    Exit Function
ErrHandler:
    Set GetValueFilter2 = Nothing
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| r1, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| r2 = v2 and r3 = v3 and r4 = v4

Public Function GetValueFilter3(R1 As Range, R2 As Range, v2 As Variant, R3 As Range, v3 As Variant, R4 As Range, v4 As Variant, Optional R5 As Range) As Range
    On Error GoTo ErrHandler

    If IsMissing(R5) Then
        Set GetValueFilter3 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3), GetFilterRange(R4, v4))
    ElseIf R5 Is Nothing Then
        Set GetValueFilter3 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3), GetFilterRange(R4, v4))
    Else
        Set GetValueFilter3 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3), GetFilterRange(R4, v4), R5)
    End If

    Exit Function
ErrHandler:
    Set GetValueFilter3 = Nothing
End Function


Public Function SumValueFilter1(R1 As Range, R2 As Range, v2 As Variant, Optional R3 As Range) As Variant
    Dim cell As Range
    Dim cells As Range

    On Error GoTo ErrHandler

    SumValueFilter1 = CDbl(0)
    Set cells = GetValueFilter1(R1, R2, v2, R3)
    If cells Is Nothing Then
        Exit Function
    Else
        For Each cell In cells
            SumValueFilter1 = SumValueFilter1 + CDbl(cell.Value)
        Next cell
    End If

    Exit Function
ErrHandler:
    SumValueFilter1 = CVErr(xlErrNum)
End Function


Public Function SumValueFilter2(R1 As Range, R2 As Range, v2 As Variant, R3 As Range, v3 As Variant, Optional R4 As Range) As Variant
    Dim cell As Range
    Dim cells As Range

    On Error GoTo ErrHandler

    SumValueFilter2 = CDbl(0)
    Set cells = GetValueFilter2(R1, R2, v2, R3, v3, R4)
    If cells Is Nothing Then
        Exit Function
    Else
        For Each cell In cells
            SumValueFilter2 = SumValueFilter2 + CDbl(cell.Value)
        Next cell
    End If

    Exit Function
ErrHandler:
    SumValueFilter2 = CVErr(xlErrNum)
End Function


Public Function SumValueFilter3(R1 As Range, R2 As Range, v2 As Variant, R3 As Range, v3 As Variant, R4 As Range, v4 As Variant, Optional R5 As Range) As Variant
    Dim cell As Range
    Dim cells As Range

    On Error GoTo ErrHandler

    SumValueFilter3 = CDbl(0)
    Set cells = GetValueFilter3(R1, R2, v2, R3, v3, R4, v4, R5)
    If cells Is Nothing Then
        Exit Function
    Else
        For Each cell In cells
            SumValueFilter3 = SumValueFilter3 + CDbl(cell.Value)
        Next cell
    End If

    Exit Function
ErrHandler:
    SumValueFilter3 = CVErr(xlErrNum)
End Function


Public Function ExcelIntersect(R1 As Range, R2 As Range) As Range
    On Error GoTo ErrHandler
    Set ExcelIntersect = Intersect(R1, R2)
    Exit Function
ErrHandler:
    Set ExcelIntersect = Nothing
End Function



Public Function ParseBook2() As Boolean
    Dim ctl As Variant
    Dim btn As CommandBarButton

    On Error GoTo ErrHandler

    Set ctl = LookupMenu(CommandBars("Worksheet Menu Bar"), "|fffd||fffd||fffd| |fffd||fffd||fffd|")
    Set ctl = LookupMenu(ctl, "XML")
    Set btn = LookupMenu(ctl, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    If Not TryExecute(btn) Then
        ParseBook2 = TryRun(btn)
    Else
        ParseBook2 = True
    End If

    Exit Function
ErrHandler:
    ParseBook2 = False
End Function
Private Function TryExecute(btn As CommandBarButton) As Boolean
    On Error GoTo ErrHandler
    btn.Execute
    TryExecute = True
    Exit Function
ErrHandler:
    TryExecute = False
End Function
Private Function TryRun(btn As CommandBarButton) As Boolean
    On Error GoTo ErrHandler
    Application.Run btn.OnAction
    TryRun = True
    Exit Function
ErrHandler:
    TryRun = False
End Function


Public Function LookupMenu(ByRef parent As Variant, caption As String) As Variant
    Dim ctl As CommandBarControl

    For Each ctl In parent.Controls
        If ctl.caption = caption Then
            Set LookupMenu = ctl
            Exit Function
        End If
    Next ctl
    
    LookupMenu = Null
End Function


Public Function nErr(val As Variant, Optional val2 As Variant) As Variant
    If IsError(val) Then
        If IsMissing(val2) Then
            nErr = Empty
        Else
            nErr = val2
        End If
    Else
        nErr = val
    End If
End Function

Public Function SetVersion(strVersion As String) As Boolean
  
  On Error GoTo ErrHandler
  
  SetVersion = False
  
  If Len(strVersion) = 0 Then
    Exit Function
  End If
  
  ActiveWorkbook.CustomDocumentProperties("CurrentVersion").Value = strVersion
  
  Exit Function
  
ErrHandler:

  If Err.Number = 5 Then
    Err.Clear
        
    On Error GoTo ErrHandler2
    
    If VarType(strVersion) = vbString Then
      ActiveWorkbook.CustomDocumentProperties.Add name:="CurrentVersion", _
                                                  LinkToContent:=False, _
                                                  Type:=msoPropertyTypeString, _
                                                  Value:=strVersion
      SetVersion = True
    End If
  End If

ErrHandler2:
    
End Function

Public Function GetVersion() As Variant
  
  On Error GoTo NewProperty
  
  Dim strVersion As String
  
  strVersion = ThisWorkbook.CustomDocumentProperties("CurrentVersion")
  
  GoTo ExitFunction
 
NewProperty:
  strVersion = "1.0"
  If SetVersion(strVersion) = False Then
    strVersion = ""
  End If
ExitFunction:
  GetVersion = strVersion
  Exit Function

End Function

Public Function GetCode() As Variant
  On Error GoTo ExitFunction
    
  GetCode = ""
  
  GetCode = ThisWorkbook.CustomDocumentProperties("Version")
  
ExitFunction:

End Function

Public Function ProcedureExists(name As String, module As Variant) As Boolean
    On Error Resume Next
    ProcedureExists = module.ProcStartLine(name, vbext_pk_Proc) <> 0
End Function




Attribute VB_Name = "cHandleEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private WithEvents ptb As MSForms.TextBox
Attribute ptb.VB_VarHelpID = -1
Public strWsName As String

Public Property Set Control(p As MSForms.TextBox)
  Set ptb = p
End Property

Public Property Get Control() As Control
  Set Control = ptb
End Property

Private Sub ptb_Change()
''  modfrmReestr.FilterRange
  ThisWorkbook.Worksheets(strWsName).FilterRange
End Sub
Attribute VB_Name = "frmCheckUpdates"
Attribute VB_Base = "0{B6164216-51BA-4780-BCA3-8DD88D4705A0}{3F8BDD0A-EC81-4A42-BCB5-0DC63CF3A053}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancelUpdate_Click()
  modfrmCheckUpdates.cmdCancelUpdates_Click_Handler
End Sub

Private Sub cmdInstallUpdate_Click()
  modfrmCheckUpdates.cmdInstallUpdates_Click_Handler
End Sub

Private Sub cmdCancel_Click()
  Unload frmCheckUpdates
End Sub

Private Sub txtURL_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmCheckUpdates.txtURL_DblClick_Handler Cancel
End Sub

Private Sub UserForm_Initialize()
  modfrmCheckUpdates.UserForm_Initialize_Handler
End Sub

Private Sub UserForm_Terminate()
  modfrmCheckUpdates.UserForm_Terminate_Handler
End Sub
Attribute VB_Name = "frmDateChoose"
Attribute VB_Base = "0{B41AD3A8-5486-4B93-9D57-56273F7C5ADA}{DE9BA1F0-8B8E-4674-9993-DDD47290B557}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub cbMonth_Change()
  modfrmDateChoose.cbMonth_Change_Handler
End Sub

Private Sub lblMonthMinus_Click()
  modfrmDateChoose.lblMonthMinus_Click_Handler
End Sub

Private Sub lblMonthPlus_Click()
  modfrmDateChoose.lblMonthPlus_Click_Handler
End Sub

Private Sub spinYearChange_SpinDown()
  modfrmDateChoose.spinYearChange_SpinDown_Handler
End Sub

Private Sub spinYearChange_SpinUp()
  modfrmDateChoose.spinYearChange_SpinUp_Handler
End Sub

Private Sub txtYear_Change()
  modfrmDateChoose.txtYear_Change_Handler
End Sub

Private Sub UserForm_Activate()
  modfrmDateChoose.UserForm_Activate_Handler
End Sub

Public Sub cmdCancel_Click()
  Unload Me
End Sub

' "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /LabelX_Y:
'                                   |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - X - |fffd||fffd||fffd||fffd||fffd||fffd|,
'                                   |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - Y - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|/
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label1_1_Click()
  modfrmDateChoose.LabelClick_Handler Label1_1
End Sub

Private Sub Label1_2_Click()
  modfrmDateChoose.LabelClick_Handler Label1_2
End Sub

Private Sub Label1_3_Click()
  modfrmDateChoose.LabelClick_Handler Label1_3
End Sub

Private Sub Label1_4_Click()
  modfrmDateChoose.LabelClick_Handler Label1_4
End Sub

Private Sub Label1_5_Click()
  modfrmDateChoose.LabelClick_Handler Label1_5
End Sub

Private Sub Label1_6_Click()
  modfrmDateChoose.LabelClick_Handler Label1_6
End Sub

Private Sub Label1_7_Click()
  modfrmDateChoose.LabelClick_Handler Label1_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label2_1_Click()
  modfrmDateChoose.LabelClick_Handler Label2_1
End Sub

Private Sub Label2_2_Click()
  modfrmDateChoose.LabelClick_Handler Label2_2
End Sub

Private Sub Label2_3_Click()
  modfrmDateChoose.LabelClick_Handler Label2_3
End Sub

Private Sub Label2_4_Click()
  modfrmDateChoose.LabelClick_Handler Label2_4
End Sub

Private Sub Label2_5_Click()
  modfrmDateChoose.LabelClick_Handler Label2_5
End Sub

Private Sub Label2_6_Click()
  modfrmDateChoose.LabelClick_Handler Label2_6
End Sub

Private Sub Label2_7_Click()
  modfrmDateChoose.LabelClick_Handler Label2_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label3_1_Click()
  modfrmDateChoose.LabelClick_Handler Label3_1
End Sub

Private Sub Label3_2_Click()
  modfrmDateChoose.LabelClick_Handler Label3_2
End Sub

Private Sub Label3_3_Click()
  modfrmDateChoose.LabelClick_Handler Label3_3
End Sub

Private Sub Label3_4_Click()
  modfrmDateChoose.LabelClick_Handler Label3_4
End Sub

Private Sub Label3_5_Click()
  modfrmDateChoose.LabelClick_Handler Label3_5
End Sub

Private Sub Label3_6_Click()
  modfrmDateChoose.LabelClick_Handler Label3_6
End Sub

Private Sub Label3_7_Click()
  modfrmDateChoose.LabelClick_Handler Label3_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label4_1_Click()
  modfrmDateChoose.LabelClick_Handler Label4_1
End Sub

Private Sub Label4_2_Click()
  modfrmDateChoose.LabelClick_Handler Label4_2
End Sub

Private Sub Label4_3_Click()
  modfrmDateChoose.LabelClick_Handler Label4_3
End Sub

Private Sub Label4_4_Click()
  modfrmDateChoose.LabelClick_Handler Label4_4
End Sub

Private Sub Label4_5_Click()
  modfrmDateChoose.LabelClick_Handler Label4_5
End Sub

Private Sub Label4_6_Click()
  modfrmDateChoose.LabelClick_Handler Label4_6
End Sub

Private Sub Label4_7_Click()
  modfrmDateChoose.LabelClick_Handler Label4_7
End Sub

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label5_1_Click()
  modfrmDateChoose.LabelClick_Handler Label5_1
End Sub

Private Sub Label5_2_Click()
  modfrmDateChoose.LabelClick_Handler Label5_2
End Sub

Private Sub Label5_3_Click()
  modfrmDateChoose.LabelClick_Handler Label5_3
End Sub

Private Sub Label5_4_Click()
  modfrmDateChoose.LabelClick_Handler Label5_4
End Sub

Private Sub Label5_5_Click()
  modfrmDateChoose.LabelClick_Handler Label5_5
End Sub

Private Sub Label5_6_Click()
  modfrmDateChoose.LabelClick_Handler Label5_6
End Sub

Private Sub Label5_7_Click()
  modfrmDateChoose.LabelClick_Handler Label5_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label6_1_Click()
  modfrmDateChoose.LabelClick_Handler Label6_1
End Sub

Private Sub Label6_2_Click()
  modfrmDateChoose.LabelClick_Handler Label6_2
End Sub

Private Sub Label6_3_Click()
  modfrmDateChoose.LabelClick_Handler Label6_3
End Sub

Private Sub Label6_4_Click()
  modfrmDateChoose.LabelClick_Handler Label6_4
End Sub

Private Sub Label6_5_Click()
  modfrmDateChoose.LabelClick_Handler Label6_5
End Sub

Private Sub Label6_6_Click()
  modfrmDateChoose.LabelClick_Handler Label6_6
End Sub

Private Sub Label6_7_Click()
  modfrmDateChoose.LabelClick_Handler Label6_7
End Sub

' "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /LabelX_Y:
'                                 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - X - |fffd||fffd||fffd||fffd||fffd||fffd|,
'                                 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - Y - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|/
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label1_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_1
End Sub

Private Sub Label1_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_2
End Sub

Private Sub Label1_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_3
End Sub

Private Sub Label1_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_4
End Sub

Private Sub Label1_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_5
End Sub

Private Sub Label1_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_6
End Sub

Private Sub Label1_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label2_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_1
End Sub

Private Sub Label2_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_2
End Sub

Private Sub Label2_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_3
End Sub

Private Sub Label2_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_4
End Sub

Private Sub Label2_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_5
End Sub

Private Sub Label2_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_6
End Sub

Private Sub Label2_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label3_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_1
End Sub

Private Sub Label3_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_2
End Sub

Private Sub Label3_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_3
End Sub

Private Sub Label3_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_4
End Sub

Private Sub Label3_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_5
End Sub

Private Sub Label3_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_6
End Sub

Private Sub Label3_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label4_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_1
End Sub

Private Sub Label4_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_2
End Sub

Private Sub Label4_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_3
End Sub

Private Sub Label4_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_4
End Sub

Private Sub Label4_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_5
End Sub

Private Sub Label4_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_6
End Sub

Private Sub Label4_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_7
End Sub

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label5_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_1
End Sub

Private Sub Label5_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_2
End Sub

Private Sub Label5_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_3
End Sub

Private Sub Label5_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_4
End Sub

Private Sub Label5_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_5
End Sub

Private Sub Label5_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_6
End Sub

Private Sub Label5_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label6_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_1
End Sub

Private Sub Label6_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_2
End Sub

Private Sub Label6_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_3
End Sub

Private Sub Label6_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_4
End Sub

Private Sub Label6_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_5
End Sub

Private Sub Label6_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_6
End Sub

Private Sub Label6_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_7
End Sub
Attribute VB_Name = "frmReestr"
Attribute VB_Base = "0{E302C530-4C1D-41D0-970B-8E4DCE30EDFE}{1AEAEB4A-DD45-4C5E-B7E3-8C1F7EC34582}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Sub cmbActivitySphere_Change()
  modfrmReestr.cmbActivitySphere_Change_Handler
End Sub

Private Sub cmbRegionSelect_Change()
  modfrmReestr.cmbRegionSelect_Change_Handler
End Sub

Private Sub cmdCancel_Click()
  modfrmReestr.cmdCancel_Click_Handler
End Sub

Private Sub cmdNotOrganizationInReestr_Click()
  modfrmReestr.cmdNotOrganizationInReestr_Click_Handler
End Sub

Private Sub cmdOK_Click()
  modfrmReestr.cmdOK_Click_Handler
End Sub

Private Sub ListReestr_Change()
  modfrmReestr.ListReestr_Change_Handler
End Sub

Private Sub cmdUpdateReestr_Click()
  modfrmReestr.cmdUpdateReestr_Click_Handler
End Sub

Private Sub ListReestr_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmReestr.ListReestr_DblClick_Handler Cancel
End Sub

Private Sub txtURL_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmReestr.txtURL_DblClick_Handler Cancel
End Sub

Private Sub UserForm_Activate()
  modfrmReestr.UserForm_Activate_Handler
End Sub

Private Sub UserForm_Initialize()
  modfrmReestr.UserForm_Initialize_Handler
End Sub

Private Sub UserForm_Terminate()
  modfrmReestr.UserForm_Terminate_Handler
End Sub
Attribute VB_Name = "frmReestrMR"
Attribute VB_Base = "0{756B19EA-DB5F-4C3D-B8A6-A54784A23CF9}{71767F4E-AFBB-4B0C-89B9-84CB254BB4EB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Sub cmbRegionSelect_Change()
  modfrmReestrMR.cmbRegionSelect_Change_Handler
End Sub

Private Sub cmdCancel_Click()
  modfrmReestrMR.cmdCancel_Click_Handler
End Sub

Private Sub cmdOK_Click()
  modfrmReestrMR.cmdOK_Click_Handler
End Sub

Private Sub cmdUpdateReestr_Click()
  modfrmReestrMR.cmdUpdateReestr_Click_Handler
End Sub

Private Sub ListReestr_Change()
  modfrmReestrMR.ListReestr_Change_Handler
End Sub

Private Sub ListReestr_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmReestrMR.ListReestr_DblClick_Handler Cancel
End Sub

Private Sub UserForm_Activate()
  modfrmReestrMR.UserForm_Activate_Handler
End Sub

Private Sub UserForm_Initialize()
  modfrmReestrMR.UserForm_Initialize_Handler
End Sub

Private Sub UserForm_Terminate()
  modfrmReestrMR.UserForm_Terminate_Handler
End Sub
Attribute VB_Name = "frmRegion"
Attribute VB_Base = "0{B06254EA-042F-4051-98A2-AC9785AE7CB4}{5E452072-DA04-4D8E-BA39-BC688043AA92}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Sub cmdOK_Click()
  modRegion.cmdOK_Click_Handler
End Sub

Public Sub cmdCancel_Click()
  modRegion.cmdCancel_Click_Handler
End Sub

Public Sub UserForm_Initialize()
  modRegion.UserForm_Initialize_Handler
End Sub

Public Sub UserForm_Activate()
  modRegion.UserForm_Activate_Handler
End Sub

Public Sub UserForm_Terminate()
  modRegion.UserForm_Terminate_Handler
End Sub
Attribute VB_Name = "frmSheetReference"
Attribute VB_Base = "0{71A0D9AE-5ACF-4CB2-B296-95B46DE95C46}{BD9D51C7-066E-4DDA-8305-2D17F3DB501E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Const AW_OPTIMAL_TIME = 300&  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_HOR_POSITIVE = &H1  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_HOR_NEGATIVE = &H2  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_VER_POSITIVE = &H4  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Const AW_VER_NEGATIVE = &H8  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Const AW_CENTER = &H10       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_HIDE = &H10000      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|; |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_ACTIVATE = &H20000  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Const AW_SLIDE = &H40000     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_BLEND = &H80000     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const GWL_STYLE As Long = (-16)
Private Const GWL_EXSTYLE = (-20)
Private Const WS_CAPTION As Long = &HC00000
Private Const WS_BORDER As Long = &H800000
Private Const WS_EX_LAYERED = &H80000
Private Const SWP_NOACTIVATE = &H10
Private Const SWP_NOSIZE = &H1
Private Const SWP_NOMOVE = &H2
Private Const SWP_SHOWWINDOW = &H40
Private Const SWP_FRAMECHANGED = &H20
Private Const SWP_NOOWNERZORDER = &H200
Private Const SWP_NOZORDER = &H4
Private Const LWA_COLORKEY = &H1
Private Const LWA_ALPHA = &H2
Private Const WM_NCLBUTTONDOWN = &HA1
Private Const HTCAPTION = 2

Private Type POINTAPI
  x As Long
  y As Long
End Type

Private lngResolutionX As Long
Private lngResolutionY As Long

Private Type DEVMODE
  dmDeviceName As String * 32
  dmSpecVersion As Integer
  dmDriverVersion As Integer
  dmSize As Integer
  dmDriverExtra As Integer
  dmFields As Long
  dmOrientation As Integer
  dmPaperSize As Integer
  dmPaperLength As Integer
  dmPaperWidth As Integer
  dmScale As Integer
  dmCopies As Integer
  dmDefaultSource As Integer
  dmPrintQuality As Integer
  dmColor As Integer
  dmDuplex As Integer
  dmYResolution As Integer
  dmTTOption As Integer
  dmCollate As Integer
  dmFormName As String * 32
  dmUnusedPadding As Integer

  dmBitsPerPixel As Integer
  dmPelsWidth As Long
  dmPelsHeight As Long
  dmDisplayFlags As Long
  dmDisplayFrequency As Long

  dmICMMethod As Long
  dmICMIntent As Long
  dmMediaType As Long
  dmDitherType As Long
  dmReserved1 As Long
  dmReserved2 As Long
  dmPanningWidth As Long
  dmPanningHeight As Long
End Type

#If VBA7 Then

  #If Win64 Then
    Private Declare PtrSafe Function SetWindowLongPtr Lib "user32" Alias "SetWindowLongPtrA" (ByVal hWnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    Private Declare PtrSafe Function GetWindowLongPtr Lib "user32" Alias "GetWindowLongPtrA" (ByVal hWnd As LongPtr, ByVal nIndex As Long) As LongPtr
  #Else
    Private Declare PtrSafe Function SetWindowLongPtr Lib "user32" Alias "SetWindowLongA" (ByVal hWnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    Private Declare PtrSafe Function GetWindowLongPtr Lib "user32" Alias "GetWindowLongA" (ByVal hWnd As LongPtr, ByVal nIndex As Long) As LongPtr
  #End If

  Private Declare PtrSafe Function SetWindowPos Lib "user32" (ByVal hWnd As LongPtr, ByVal hWndInsertAfter As LongPtr, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long

  Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
  Private Declare PtrSafe Function AnimateWindow Lib "user32" (ByVal hWnd As LongPtr, ByVal dwTime As Long, ByVal dwFlags As Long) As Boolean
  Private Declare PtrSafe Function GetCursorPos Lib "user32" (lpPoint As POINTAPI) As Long
  Private Declare PtrSafe Function SetLayeredWindowAttributes Lib "user32" (ByVal hWnd As Long, ByVal crKey As Long, ByVal bAlpha As Byte, ByVal dwFlags As Long) As Long
  Private Declare PtrSafe Sub ReleaseCapture Lib "user32" ()
  Private Declare PtrSafe Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hWnd As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, lparam As Any) As LongPtr

  Private Declare PtrSafe Function EnumDisplaySettings Lib "user32" Alias "EnumDisplaySettingsA" (ByVal lpszDeviceName As String, ByVal iModeNum As Long, lpDevMode As DEVMODE) As LongPtr

#Else

  Private Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hWnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
  Private Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hWnd As Long, ByVal nIndex As Long) As Long
  Private Declare Function SetWindowPos Lib "user32" (ByVal hWnd As Long, ByVal hWndInsertAfter As Long, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long

  Private Declare Function FindWindow Lib "user32.dll" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
  Private Declare Function AnimateWindow Lib "user32" (ByVal hWnd As Long, ByVal dwTime As Long, ByVal dwFlags As Long) As Boolean
  Private Declare Function GetCursorPos& Lib "user32.dll" (lpPoint As POINTAPI)
  Private Declare Function SetLayeredWindowAttributes Lib "user32" (ByVal hWnd As Long, ByVal crKey As Long, ByVal bAlpha As Byte, ByVal dwFlags As Long) As Long
  Private Declare Sub ReleaseCapture Lib "user32" ()
  Private Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lparam As Any) As Long

  Private Declare Function EnumDisplaySettings Lib "user32" Alias "EnumDisplaySettingsA" (ByVal lpszDeviceName As String, ByVal iModeNum As Long, lpDevMode As DEVMODE) As Long

#End If

'***********************************
#If VBA7 And Win64 Then
  Private ihWnd As LongPtr
#Else
  Private ihWnd As Long
#End If
'***********************************

#If VBA7 Then

  #If Win64 Then

Private Sub MoveFormOnScreen(Optional ByVal ToCursor As Boolean = False)
  Dim lngICounter As LongPtr
  Dim lngJCounter As LongPtr
  Dim paCoordinates As POINTAPI
  lngICounter = GetWindowLongPtr(ihWnd, GWL_STYLE)
  lngICounter = lngICounter And Not WS_CAPTION And Not WS_BORDER
  lngJCounter = SetWindowLongPtr(ihWnd, GWL_STYLE, lngICounter)
  lngJCounter = SetWindowLongPtr(ihWnd, GWL_EXSTYLE, 0)
  If ToCursor Then
    GetCursorPos paCoordinates
    SetWindowPos ihWnd, 0, paCoordinates.x, paCoordinates.y, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  Else
    lngICounter = Application.ActiveWindow.Height: lngJCounter = Application.ActiveWindow.Width
    lngICounter = Int(lngICounter / 2 - Me.Height / 2)
    lngJCounter = Int(lngJCounter / 2 - Me.Width / 2)
    If lngICounter <= 0 Then lngICounter = 20
    If lngJCounter <= 0 Then lngJCounter = 20
    SetWindowPos ihWnd, 0, CLng(lngJCounter), CLng(lngICounter), 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  End If
End Sub

Private Sub SetTransparent(Optional ByVal Layered As Byte = 255)
  Dim Ret As LongPtr
  Ret = GetWindowLongPtr(ihWnd, GWL_EXSTYLE)
  Ret = Ret Or WS_EX_LAYERED
  SetWindowLongPtr ihWnd, GWL_EXSTYLE, Ret
  SetLayeredWindowAttributes CLng(ihWnd), 0, Layered, LWA_ALPHA
End Sub

#Else

Private Sub MoveFormOnScreen(Optional ByVal ToCursor As Boolean = False)
  Dim lngICounter As Long
  Dim lngJCounter As Long
  Dim paCoordinates As POINTAPI
  lngICounter = GetWindowLongPtr(ihWnd, GWL_STYLE)
  lngICounter = lngICounter And Not WS_CAPTION And Not WS_BORDER
  lngJCounter = SetWindowLongPtr(ihWnd, GWL_STYLE, lngICounter)
  lngJCounter = SetWindowLongPtr(ihWnd, GWL_EXSTYLE, 0)
  If ToCursor Then
    GetCursorPos paCoordinates
    SetWindowPos ihWnd, 0, paCoordinates.x, paCoordinates.y, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  Else
    lngICounter = Application.ActiveWindow.Height: lngJCounter = Application.ActiveWindow.Width
    lngICounter = Int(lngICounter / 2 - Me.Height / 2)
    lngJCounter = Int(lngJCounter / 2 - Me.Width / 2)
    If lngICounter <= 0 Then lngICounter = 20
    If lngJCounter <= 0 Then lngJCounter = 20
    SetWindowPos ihWnd, 0, lngJCounter, lngICounter, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  End If
End Sub

Private Sub SetTransparent(Optional ByVal Layered As Byte = 255)
  Dim Ret As Long
  Ret = GetWindowLongPtr(ihWnd, GWL_EXSTYLE)
  Ret = Ret Or WS_EX_LAYERED
  SetWindowLongPtr ihWnd, GWL_EXSTYLE, Ret
  SetLayeredWindowAttributes ihWnd, 0, Layered, LWA_ALPHA
End Sub

#End If

#Else

Private Sub MoveFormOnScreen(Optional ByVal ToCursor As Boolean = False)
  Dim lngICounter As Long, lngJCounter As Long, paCoordinates As POINTAPI
  Dim lngCoordX As Long, lngCoordY As Long
  lngICounter = GetWindowLong(ihWnd, GWL_STYLE)
  lngICounter = lngICounter And WS_BORDER
  lngJCounter = SetWindowLong(ihWnd, GWL_STYLE, lngICounter)
  lngJCounter = SetWindowLong(ihWnd, GWL_EXSTYLE, 0)
  If ToCursor Then
    GetCursorPos paCoordinates
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If paCoordinates.x + frmSheetReference.Width > lngResolutionX Then
      If paCoordinates.x - frmSheetReference.Width < 0 Then
        lngJCounter = paCoordinates.x - frmSheetReference.Width / 2
      Else
        lngJCounter = paCoordinates.x - frmSheetReference.Width
      End If
    Else
      lngJCounter = paCoordinates.x
    End If

    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If paCoordinates.y + frmSheetReference.Height + 50 < lngResolutionY Then
      If paCoordinates.y - frmSheetReference.Height < 0 Then
        lngICounter = paCoordinates.y + frmSheetReference.Height + 20
      Else
        lngICounter = paCoordinates.y - 20
      End If
    Else
      lngICounter = paCoordinates.y - frmSheetReference.Height - 20
    End If

    SetWindowPos ihWnd, 0, lngJCounter, lngICounter, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  Else
    lngICounter = Application.ActiveWindow.Height: lngJCounter = Application.ActiveWindow.Width
    lngICounter = Int(lngICounter / 2 - Me.Height / 2)
    lngJCounter = Int(lngJCounter / 2 - Me.Width / 2)
    If lngICounter <= 0 Then lngICounter = 20
    If lngJCounter <= 0 Then lngJCounter = 20
    SetWindowPos ihWnd, 0, lngJCounter, lngICounter, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  End If
End Sub

Private Sub SetTransparent(Optional ByVal Layered As Byte = 255)
  Dim Ret As Long
  Ret = GetWindowLong(ihWnd, GWL_EXSTYLE)
  Ret = Ret Or WS_EX_LAYERED
  SetWindowLong ihWnd, GWL_EXSTYLE, Ret
  SetLayeredWindowAttributes ihWnd, 0, Layered, LWA_ALPHA
End Sub

#End If

Public Sub MoveIt()
  Call ReleaseCapture
  SendMessage ihWnd, WM_NCLBUTTONDOWN, HTCAPTION, 0&
End Sub

'***********************************
Private Sub UserForm_Initialize()
  If blnHelpReferenceFormIsInitialized Then
    Exit Sub  ' Already initialized
  End If

  frmSheetReference.BackColor = RGB(240, 240, 240) 'SystemColorConstants.vbInfoBackground
  ''  frmSheetReference.lblCaption.BackColor = frmSheetReference.BackColor
  ''  frmSheetReference.lblReference.BackColor = frmSheetReference.BackColor

  frmSheetReference.Get_DisplayMetrics
  ihWnd = FindWindow(vbNullString, Me.caption)

  frmSheetReference.lblReference.Height = modInfo.sngHLblFormSheetReference + 10
  frmSheetReference.Height = frmSheetReference.Height + frmSheetReference.lblReference.Height - 27

  MoveFormOnScreen True
  SetTransparent 250
  AnimateWindow ihWnd, AW_OPTIMAL_TIME, AW_VER_POSITIVE
  blnHelpReferenceFormIsInitialized = True  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  frmSheetReference.Repaint

End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  AnimateWindow ihWnd, AW_OPTIMAL_TIME, AW_HIDE Or AW_VER_NEGATIVE
  blnHelpReferenceFormIsInitialized = False
End Sub

Private Sub UserForm_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
  If KeyCode = 27 Then Unload frmSheetReference
End Sub

Private Sub UserForm_Click()
  Unload Me
End Sub

Private Sub lblMessage_Click()
  Unload Me
End Sub

Private Sub lblReference_Click()
  Unload Me
End Sub

Private Sub lblCaption_Click()
  Unload Me
End Sub

Private Sub UserForm_Deactivate()
  Unload Me
End Sub

Sub Get_DisplayMetrics()

  Dim dm As DEVMODE  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim lRetval As Long    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  dm.dmSize = Len(dm)

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  lRetval = CLng(EnumDisplaySettings(vbNullString, -1, dm))

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  lngResolutionX = dm.dmPelsWidth
  lngResolutionY = dm.dmPelsHeight

End Sub

Private Sub cmdCancel_Click()
  Unload frmSheetReference
End Sub

Attribute VB_Name = "modAnimatedFormsGlobals"
Option Explicit

Public Const BLN_SHOW_PROGRESS_FORM_ON_UPDATE_REQUESTS As Boolean = True
Global blnUpdateProgressFormIsInitialized As Boolean


Public Function Try_Show_Message_Window(intTypeMessage As Integer, Optional strText As String = "", Optional strFormCaption As String = "") As IMessageWindow
  On Error GoTo ErrHandler
  
  Dim diag As IMessageWindow
  
  Set diag = New MessageDialogue

  diag.Show intTypeMessage, strText, strFormCaption

  Set Try_Show_Message_Window = diag

  GoTo Success

Success:
  GoTo CleanUp
ErrHandler:
  Set diag = Nothing
  Set Try_Show_Message_Window = Nothing
  GoTo CleanUp
CleanUp:
End Function

Attribute VB_Name = "modClassifierValidate"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Function blnValidate_Len_Number(strValue As String, _
                                        lngMinLen As Long, _
                                        lngMaxLen As Long) As Boolean
  Dim lngCounter As Long

  blnValidate_Len_Number = False
  If lngMinLen <= 0 Or lngMaxLen <= 0 Then Exit Function

  If Len(strValue) = 0 Then  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    blnValidate_Len_Number = True  ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Exit Function
  End If

  If Len(strValue) > lngMaxLen Or Len(strValue) < lngMinLen Then
    Exit Function
  End If

  For lngCounter = 1 To Len(strValue)
    If Mid(strValue, lngCounter, 1) < "0" Or Mid(strValue, lngCounter, 1) > "9" Then
      Exit Function
    End If
  Next lngCounter

  blnValidate_Len_Number = True

End Function

' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------
' ----------------------------- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ---------------------------------
' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_INN_OnForm(strINN As String, _
                                       Optional blnMsgBoxShow As Boolean = True) As Boolean
  blnValidate_INN_OnForm = False

  If blnValidate_Len_Number(strINN, 10, 12) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If

Success:
  blnValidate_INN_OnForm = True
  GoTo CleanUp
ErrHandler:
  blnValidate_INN_OnForm = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 10-12 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  GoTo CleanUp
CleanUp:
  Exit Function
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_KPP_OnForm(strKPP As String, _
                                       Optional blnMsgBoxShow As Boolean = True) As Boolean
  blnValidate_KPP_OnForm = False

  If blnValidate_Len_Number(strKPP, 9, 9) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If

Success:
  blnValidate_KPP_OnForm = True
  GoTo CleanUp
ErrHandler:
  blnValidate_KPP_OnForm = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 9 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  GoTo CleanUp
CleanUp:
  Exit Function
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_OKTMO_OnForm(strOKTMO As String, _
                                         Optional blnMsgBoxShow As Boolean = True) As Boolean
  blnValidate_OKTMO_OnForm = False

  If blnValidate_Len_Number(strOKTMO, 7, 8) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If

Success:
  blnValidate_OKTMO_OnForm = True
  GoTo CleanUp
ErrHandler:
  blnValidate_OKTMO_OnForm = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 7-8 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  GoTo CleanUp
CleanUp:
  Exit Function
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_OKATO_OnForm(strOKATO As String, _
                                         Optional blnMsgBoxShow As Boolean = True) As Boolean
  blnValidate_OKATO_OnForm = False

  If blnValidate_Len_Number(strOKATO, 7, 11) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If

Success:
  blnValidate_OKATO_OnForm = True
  GoTo CleanUp
ErrHandler:
  blnValidate_OKATO_OnForm = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 7-11 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  GoTo CleanUp
CleanUp:
  Exit Function
End Function

' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------
' ----------------------------- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ---------------------------------
' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_INN_OnSheet(rngValidatingRange As Range, _
                                        Optional blnMsgBoxShow As Boolean = True) As Boolean
  blnValidate_INN_OnSheet = False

  If rngValidatingRange Is Nothing Then
    GoTo CleanUp
  End If

  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).Value), 10, 12) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If

Success:
  blnValidate_INN_OnSheet = True
  GoTo CleanUp
ErrHandler:
  blnValidate_INN_OnSheet = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!", _
           vbOKOnly + vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  rngValidatingRange.parent.Activate
  rngValidatingRange.Activate
  GoTo CleanUp
CleanUp:
  Exit Function
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_KPP_OnSheet(rngValidatingRange As Range, _
                                        Optional blnMsgBoxShow As Boolean = True) As Boolean
  blnValidate_KPP_OnSheet = False

  If rngValidatingRange Is Nothing Then
    GoTo CleanUp
  End If

  If LCase(rngValidatingRange.cells(1, 1).Value) = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Or LCase(rngValidatingRange.cells(1, 1).Value) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then GoTo Success
  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).Value), 9, 9) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If

Success:
  blnValidate_KPP_OnSheet = True
  GoTo CleanUp
ErrHandler:
  blnValidate_KPP_OnSheet = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!", _
           vbOKOnly + vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  rngValidatingRange.parent.Activate
  rngValidatingRange.Activate
  GoTo CleanUp
CleanUp:
  Exit Function
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_OKTMO_OnSheet(rngValidatingRange As Range, _
                                          Optional blnMsgBoxShow As Boolean = True) As Boolean
  blnValidate_OKTMO_OnSheet = False

  If rngValidatingRange Is Nothing Then
    GoTo CleanUp
  End If

  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).Value), 7, 8) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If

Success:
  blnValidate_OKTMO_OnSheet = True
  GoTo CleanUp
ErrHandler:
  blnValidate_OKTMO_OnSheet = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!", _
           vbOKOnly + vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  rngValidatingRange.parent.Activate
  rngValidatingRange.Activate
  GoTo CleanUp
CleanUp:
  Exit Function
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_OKATO_OnSheet(rngValidatingRange As Range, _
                                          Optional blnMsgBoxShow As Boolean = True) As Boolean
  blnValidate_OKATO_OnSheet = False

  If rngValidatingRange Is Nothing Then
    GoTo CleanUp
  End If

  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).Value), 7, 11) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If

Success:
  blnValidate_OKATO_OnSheet = True
  GoTo CleanUp
ErrHandler:
  blnValidate_OKATO_OnSheet = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!", _
           vbOKOnly + vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  rngValidatingRange.parent.Activate
  rngValidatingRange.Activate
  GoTo CleanUp
CleanUp:
  Exit Function
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_INDEX_OnSheet(rngValidatingRange As Range, _
                                          Optional blnMsgBoxShow As Boolean = True) As Boolean
  blnValidate_INDEX_OnSheet = False

  If rngValidatingRange Is Nothing Then
    GoTo CleanUp
  End If

  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).Value), 6, 6) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If

Success:
  blnValidate_INDEX_OnSheet = True
  GoTo CleanUp
ErrHandler:
  blnValidate_INDEX_OnSheet = False
  If blnMsgBoxShow = True Then
''    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!", _
''           vbOKOnly + vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 6 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbOKOnly + vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  rngValidatingRange.parent.Activate
  rngValidatingRange.Activate
  GoTo CleanUp
CleanUp:
  Exit Function
End Function

' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------
' -------------------- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| -----------------------
' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function strValidate_INN_OnSheet(rngValidatingRange As Range) As String
  strValidate_INN_OnSheet = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"

  If rngValidatingRange Is Nothing Then
    GoTo CleanUp
  End If

  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).Value), 10, 12) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If

Success:
  strValidate_INN_OnSheet = ""
  GoTo CleanUp
ErrHandler:
  strValidate_INN_OnSheet = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!"
  GoTo CleanUp
CleanUp:
  Exit Function
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function strValidate_KPP_OnSheet(rngValidatingRange As Range) As String
  strValidate_KPP_OnSheet = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"

  If rngValidatingRange Is Nothing Then
    GoTo CleanUp
  End If

  If LCase(rngValidatingRange.cells(1, 1).Value) = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Or LCase(rngValidatingRange.cells(1, 1).Value) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then GoTo Success

  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).Value), 9, 9) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If

Success:
  strValidate_KPP_OnSheet = ""
  GoTo CleanUp
ErrHandler:
  strValidate_KPP_OnSheet = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!"
  GoTo CleanUp
CleanUp:
  Exit Function
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function strValidate_INDEX_OnSheet(rngValidatingRange As Range) As String
  strValidate_INDEX_OnSheet = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"

  If rngValidatingRange Is Nothing Then
    GoTo CleanUp
  End If

  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).Value), 6, 6) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If

Success:
  strValidate_INDEX_OnSheet = ""
  GoTo CleanUp
ErrHandler:
  strValidate_INDEX_OnSheet = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!"
  GoTo CleanUp
CleanUp:
  Exit Function
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function strValidate_OKTMO_OnSheet(rngValidatingRange As Range) As String
  strValidate_OKTMO_OnSheet = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"

  If rngValidatingRange Is Nothing Then
    GoTo CleanUp
  End If

  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).Value), 7, 8) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If

Success:
  strValidate_OKTMO_OnSheet = ""
  GoTo CleanUp
ErrHandler:
  strValidate_OKTMO_OnSheet = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!"
  GoTo CleanUp
CleanUp:
  Exit Function
End Function

Attribute VB_Name = "modComm"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public Sub Worksheet_Change_Handler(ByVal Target As Range)

End Sub

Public Sub Worksheet_FollowHyperlink_Handler(ByVal Target As Hyperlink)

End Sub

Public Sub Worksheet_SelectionChange(ByVal Target As Range)
  Worksheet_Deactivate
End Sub

Public Sub Worksheet_Deactivate()
  If modScrolling.blnIs_UserForm_Loaded("frmSheetReference") = True Then
    Unload frmSheetReference
  End If
End Sub

Public Sub Worksheet_BeforeDoubleClick_Handler(ByVal Target As Range, _
                                               Cancel As Boolean)
  Dim lngRow As Long, lngCol As Long
  Dim blnScreenUpdatingState As Boolean, blnEnableEventsState As Boolean
  Dim wsSheet As Worksheet
  On Error GoTo ErrDblClick

  Set wsSheet = Target.parent
  lngRow = Target.Row
  lngCol = Target.Column

  If Not Application.Intersect(ListComm.Range("pIns_Comm"), Target) Is Nothing Then
    Cancel = True
    blnScreenUpdatingState = Application.ScreenUpdating
    blnEnableEventsState = Application.EnableEvents
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.InsertRangeWithEt Target, "et_Comm", True
    GoTo EndDblClick
  ElseIf Target.cells(1, 1).Value = "|fffd|" And _
         Not Application.Intersect(ListComm.Range("pDel_Comm"), Target) Is Nothing Then
    Cancel = True
    blnScreenUpdatingState = Application.ScreenUpdating
    blnEnableEventsState = Application.EnableEvents
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.DeleteRange Target, False
    GoTo EndDblClick
  End If

  Exit Sub
ErrDblClick:
  MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical

EndDblClick:
  modServiceModule.PROTECT_SHEET wsSheet, True
  wsSheet.Activate
  wsSheet.cells(lngRow, lngCol).Select
  Application.EnableEvents = blnEnableEventsState
  Application.ScreenUpdating = blnScreenUpdatingState
End Sub

Attribute VB_Name = "modDefine"
Public Const sh1 As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const sh2 As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

Public Const shT As String = "|fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const shP As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

Public Const shTeh1 As String = "et_union"
Public Const shTeh2 As String = "TEHSHEET"
Public Const shTeh3 As String = "REESTR"

Public ws As Worksheet
Public wb As Workbook

Public Const gPASSWORD As String = "aq1sw2de3"

Public Const colorWhite As Integer = 2
Public Const colorCyan As Integer = 34
Public Const colorYellow As Integer = 36
Public Const colorGreen As Integer = 35
Public Const colorRed As Integer = 3
Public Const colorGrey As Integer = 15
Public Const colorLightBlue As Integer = 37
Public Const colorLightBrown As Integer = 40
Public Const colorPink As Integer = 38

Public flag As Boolean
Attribute VB_Name = "modGlobals"
Option Explicit

Public Const SAVE_STATUS_CRITICAL_IMPACT_WARNING As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd|. |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|'!"
Public Const SAVE_STATUS_SUCCESS As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const SAVE_STATUS_LOW_IMPACT_WARNING As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|'"
Public Const SAVE_MESSAGE_TITLE As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

Public frmProgressForm As IMessageWindow

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const intIdColumn As Long = 17

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public STR_SELECT_DATE As String

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Global intDay As Integer                ' |fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/
Global intMonth As Integer              ' |fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/
Global intYear As Integer               ' |fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/
Global intX As Integer                  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/
Global intY As Integer                  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/
Global blnCalendarChange As Boolean     ' True - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
Global blnCurrentMonth As Boolean       ' True - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public blnFormCalendarVisible           ' True - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, False - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public STR_DICTIONARY_NAME As String
Public STR_CHOOSE As String

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Global glngLowImpactWarningsCounter As Long
Global glngCriticalImpactWarningsCounter As Long

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public blnApplyFlag As Boolean
Public blnUpdate As Boolean

Public orgName As String
Public orgInn As String
Public orgKpp As String
Public orgId As String

Public orgMR As String
Public orgMO As String
Public orgOKTMO As String

Public orgFIL As String
Public orgVDET As String

Public nameMR As String
Public nameMO As String
Public nameOKTMO As String

Public intAddCount As Long
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const STR_MSGBOX_INFORMATION_TITLE As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const STR_MSGBOX_WARNING_TITLE As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const gstrMainSheetName As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const gstrCheckSheetName As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const gstrHyperlinkSheetName As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const gstrStandartsSheetName As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

Public Const gstrEtUnionSheetName As String = "et_union_hor"

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const gblnTestMode As Boolean = False 'True

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const STR_UPDATE_FAILED As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd|. |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|', |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)!"
Public Const STR_UPDATE_SUCCESS As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
Public Const STR_INET_CONNECTION_IS_OFFLINE As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const STR_HTTP_REQUEST_PROC_GET_UPDATE_INFO_NAME As String = "GET_UPDATE_INFO?"
Public Const STR_HTTP_REQUEST_PROC_GET_UPDATE_INFO_PARAM_1 As String = "p_TC="

Public Const STR_HTTP_REQUEST_PROC_GET_UPDATE_NAME As String = "GET_UPDATE?"
Public Const STR_HTTP_REQUEST_PROC_GET_UPDATE_PARAM_1 As String = "p_TC="
Public Const STR_HTTP_REQUEST_PROC_GET_UPDATE_PARAM_2 As String = "p_V="

Public Const STR_HTTP_REQUEST_PROC_GET_SHEET_NAMES_NAME As String = "GET_SHEET_NAMES?"
Public Const STR_HTTP_REQUEST_PROC_GET_SHEET_NAMES_PARAM_1 As String = "p_TC="
Public Const STR_HTTP_REQUEST_PROC_GET_SHEET_NAMES_PARAM_2 As String = "p_V="

Global blnHelpReferenceFormIsInitialized As Boolean

Public STR_SHEET_SPR_MR_NAME As String

Public strReason As String          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public rngNotUniqueRange As Range   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public intLockedSphere As Integer

' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: true - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, false - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public blnMsgBoxActualVersion As Boolean
Attribute VB_Name = "modHTTPServerCaller"
Option Explicit
Option Base 1

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const STR_REESTR_TYPE As String = "FULL_OWNER"
''Public Const STR_REESTR_TYPE As String = "FULL"
' FULL    - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
' REDU_Y  - |fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|/|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' REDU_N  - |fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|/|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' STAT    - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' ENER    - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' FULL_OWNER    - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd|/|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Const STR_ACTIVITY_SPHERE As String = "WARM"
'--------------
'-----FULL-----
'--------------
'   ALL
'   VS
'   VO
'   TBO
'   HOT_VS
'   VS_VO
'   VS_VO_TBO
'   EE
'   GAS
'   JKH_EE
'   WARM
'--------------
'-----REDU-----
'--------------
'   WARM
'   VS
'   HOT_VS
'   VS_VO
'   VO
'   TBO
'   EE
'--------------

Public Const STR_ADDITIONAL_REGIONS As String = ""      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ;
Public Const STR_REESTR_MR_MO_TYPE As String = "MRMO"


Public Const STR_RANGE_NAME As String = "REESTR_ORG_RANGE"
Public Const STR_REESTR_SHEET_NAME As String = "REESTR_ORG"
Public STR_REESTR_MO_SHEET_NAME As String
''Public Const STR_REESTR_MO_SHEET_NAME As String = "REESTR_MO"

' |fffd||fffd||fffd||fffd||fffd||fffd| DNS, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Const STR_HTTP_REQUEST_BASE_URL_1 As String = "https://tariff.eias.ru/procwsxls/"
Public Const STR_HTTP_REQUEST_BASE_URL_2 As String = "https://appsrv02.eias.ru/procwsxls/"
Public Const STR_HTTP_REQUEST_BASE_URL_3 As String = "https://appsrv01.eias.ru/procwsxls/"  ' TBD
Public Const STR_HTTP_REQUEST_BASE_URL_4 As String = "https://tariff.eias.ru/procwsxls/"    ' TBD

Public Const STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_NAME As String = "MO_REESTR?"
Public Const STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_PARAM_1 As String = "p_NSRF="
Public Const STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_PARAM_2 As String = "p_TC="

Public Const STR_HTTP_REQUEST_PROC_ORG_FULL As String = "ORG_REESTR?"
Public Const STR_HTTP_REQUEST_PROC_ORG_FULL_1 As String = "p_NSRF="
Public Const STR_HTTP_REQUEST_PROC_ORG_FULL_2 As String = "p_AS="
Public Const STR_HTTP_REQUEST_PROC_ORG_FULL_3 As String = "p_VDET="
Public Const STR_HTTP_REQUEST_PROC_ORG_FULL_4 As String = "p_TC="

Public Const STR_HTTP_REQUEST_PROC_ORG_FULL_OWNER As String = "ORG_REESTR_OWNER?"
Public Const STR_HTTP_REQUEST_PROC_ORG_FULL_OWNER_1 As String = "p_NSRF="
Public Const STR_HTTP_REQUEST_PROC_ORG_FULL_OWNER_2 As String = "p_AS="
Public Const STR_HTTP_REQUEST_PROC_ORG_FULL_OWNER_3 As String = "p_VDET="
Public Const STR_HTTP_REQUEST_PROC_ORG_FULL_OWNER_4 As String = "p_TC="

Public Const STR_HTTP_REQUEST_PROC_ORG_STAT As String = "ORG_STAT_REESTR?"
Public Const STR_HTTP_REQUEST_PROC_ORG_STAT_1 As String = "p_NSRF="
Public Const STR_HTTP_REQUEST_PROC_ORG_STAT_2 As String = "p_TC="

Public Const STR_HTTP_REQUEST_PROC_ORG_REDU As String = "ORG_REESTR_REDUCED?"
Public Const STR_HTTP_REQUEST_PROC_ORG_REDU_1 As String = "p_NSRF="
Public Const STR_HTTP_REQUEST_PROC_ORG_REDU_2 As String = "p_AS="
Public Const STR_HTTP_REQUEST_PROC_ORG_REDU_3 As String = "P_INCL_VDET="
Public Const STR_HTTP_REQUEST_PROC_ORG_REDU_4 As String = "p_TC="

Public Const STR_HTTP_REQUEST_PROC_ORG_ENER As String = "ORG_EE_REESTR?"
Public Const STR_HTTP_REQUEST_PROC_ORG_ENER_1 As String = "p_NSRF="
Public Const STR_HTTP_REQUEST_PROC_ORG_ENER_2 As String = "p_VDET="
Public Const STR_HTTP_REQUEST_PROC_ORG_ENER_3 As String = "p_TC="

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const STR_HTTP_REQUEST_PROC_GET_DATA As String = "GET_DATA?"
Public Const STR_HTTP_REQUEST_PROC_GET_DATA_1 As String = "p_DATA_TYPE="
Public Const STR_HTTP_REQUEST_PROC_GET_DATA_2 As String = "p_TC="

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function Get_Data(strTypeData As String, _
                         ByRef ArrOut() As Variant, _
                         ParamArray ArrParams()) As String

  On Error GoTo ErrHandler

  Dim strURL As String, strTemplateCode As String

  strTemplateCode = modServiceModule.varGetDocumentProperty(ThisWorkbook, "Version")

  Select Case strTypeData
    Case "ORG"
      Select Case STR_REESTR_TYPE
        Case "FULL"
          strURL = STR_HTTP_REQUEST_PROC_ORG_FULL & _
                   STR_HTTP_REQUEST_PROC_ORG_FULL_1 & ArrParams(0) & "&" & _
                   STR_HTTP_REQUEST_PROC_ORG_FULL_2 & ArrParams(1) & "&" & _
                   STR_HTTP_REQUEST_PROC_ORG_FULL_3 & ArrParams(2) & "&" & _
                   STR_HTTP_REQUEST_PROC_ORG_FULL_4 & strTemplateCode
        Case "FULL_OWNER"
          strURL = STR_HTTP_REQUEST_PROC_ORG_FULL_OWNER & _
                   STR_HTTP_REQUEST_PROC_ORG_FULL_OWNER_1 & ArrParams(0) & "&" & _
                   STR_HTTP_REQUEST_PROC_ORG_FULL_OWNER_2 & ArrParams(1) & "&" & _
                   STR_HTTP_REQUEST_PROC_ORG_FULL_OWNER_3 & ArrParams(2) & "&" & _
                   STR_HTTP_REQUEST_PROC_ORG_FULL_OWNER_4 & strTemplateCode
        Case "REDU_Y"
          strURL = STR_HTTP_REQUEST_PROC_ORG_REDU & _
                   STR_HTTP_REQUEST_PROC_ORG_REDU_1 & ArrParams(0) & "&" & _
                   STR_HTTP_REQUEST_PROC_ORG_REDU_2 & ArrParams(1) & "&" & _
                   STR_HTTP_REQUEST_PROC_ORG_REDU_3 & "YES" & "&" & _
                   STR_HTTP_REQUEST_PROC_ORG_REDU_4 & strTemplateCode
        Case "REDU_N"
          strURL = STR_HTTP_REQUEST_PROC_ORG_REDU & _
                   STR_HTTP_REQUEST_PROC_ORG_REDU_1 & ArrParams(0) & "&" & _
                   STR_HTTP_REQUEST_PROC_ORG_REDU_2 & ArrParams(1) & "&" & _
                   STR_HTTP_REQUEST_PROC_ORG_REDU_3 & "NO" & "&" & _
                   STR_HTTP_REQUEST_PROC_ORG_REDU_4 & strTemplateCode
        Case "STAT"
          strURL = STR_HTTP_REQUEST_PROC_ORG_STAT & _
                   STR_HTTP_REQUEST_PROC_ORG_STAT_1 & ArrParams(0) & "&" & _
                   STR_HTTP_REQUEST_PROC_ORG_STAT_2 & strTemplateCode
        Case "ENER"
          strURL = STR_HTTP_REQUEST_PROC_ORG_ENER & _
                   STR_HTTP_REQUEST_PROC_ORG_ENER_1 & ArrParams(0) & "&" & _
                   STR_HTTP_REQUEST_PROC_ORG_ENER_2 & ArrParams(2) & "&" & _
                   STR_HTTP_REQUEST_PROC_ORG_ENER_3 & strTemplateCode
        Case Else
          GoTo ErrHandler
      End Select
    Case "MRMO"
      strURL = STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_NAME & _
               STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_PARAM_1 & ArrParams()(0) & "&" & _
               STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_PARAM_2 & strTemplateCode
    Case "ORGS_DATA"
      strURL = STR_HTTP_REQUEST_PROC_GET_DATA & _
               STR_HTTP_REQUEST_PROC_GET_DATA_1 & ArrParams(0) & "&" & _
               STR_HTTP_REQUEST_PROC_GET_DATA_2 & strTemplateCode
    Case Else
      GoTo ErrHandler
  End Select

  Get_Data = modInvokeHTTPServer.strQuery_Data(strURL, ArrOut)

  GoTo CleanUp

ErrHandler:
  Get_Data = STR_UPDATE_FAILED

CleanUp:
End Function

Attribute VB_Name = "modHyp"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub AddHypDel(Target As Range, strTitle As String)
  Dim wsSheet As Worksheet
  
  Set wsSheet = Target.parent
  
  Target.Value = "|fffd|"
  With Target
    .HorizontalAlignment = xlCenter
    .VerticalAlignment = xlCenter
    .WrapText = True
  End With
  With Target.Font
      .name = "Wingdings 2"
      .Size = 11
      .Underline = xlNone
      .Bold = False
      .ColorIndex = 48
  End With
End Sub

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub GeneralFollowHyperlink_Handler(Target As Range, intRowCount As Long, Optional blnAddHypDel As Boolean = True, Optional intDelHypCol As Long, Optional strDelHypStr As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
  Dim wsSheet As Worksheet
  Dim intRow As Long, intCol As Long
  Dim i As Long, j As Long
  Dim strNum As String, strPrefix As String, strPostfix As String
  On Error GoTo EndGenHyp
  
  If Target.cells(1, 1).Value = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" Then Exit Sub
  
  Set wsSheet = Target.parent
  intRow = Target.Row
  intCol = Target.Column
  
  If InStr(Target.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 Then
    wsSheet.Range(wsSheet.Rows(intRow - intRowCount), wsSheet.Rows(intRow - 1)).Copy
    wsSheet.Rows(intRow).Insert Shift:=xlShiftDown
    If blnAddHypDel Then AddHypDel wsSheet.cells(intRow, intDelHypCol), strDelHypStr
    
    For i = intRow To intRow + intRowCount - 1
      For j = 1 To wsSheet.UsedRange.Columns.Count
        If Not wsSheet.cells(i, j).Locked Then wsSheet.cells(i, j).Value = ""
      Next j
    Next i
    
    GoTo EndGenHyp
  End If
  
  If InStr(Target.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 Then
    For i = 1 To intRowCount
      wsSheet.Rows(intRow).Delete
    Next i
    GoTo EndGenHyp
  End If
  
EndGenHyp:
  wsSheet.cells(intRow, intCol).Select
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub InsertRangeWithEt(Target As Range, strEtName As String, Optional blnAddHypDel As Boolean = True, Optional intDelHypCol As Long = 3, Optional strDelHypStr As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Optional blnRenumber As Boolean = True, Optional intColNumOffset As Long = -1)
  Dim wsSheet As Worksheet
  Dim intRow As Long, intCol As Long, intIndent As Long, intICounter As Long

  Set wsSheet = Target.parent

  If ThisWorkbook.Names(strEtName).RefersToRange.parent.name = "et_union_ver" Then
    intCol = Target.Column
    For intICounter = 1 To ThisWorkbook.Names(strEtName).RefersToRange.Columns.Count
      wsSheet.Columns(Target.Column).Insert Shift:=xlShiftToRight
    Next intICounter
    ThisWorkbook.Names(strEtName).RefersToRange.Copy Destination:=wsSheet.cells(1, intCol)
  Else
    intRow = Target.Row
    For intICounter = 1 To ThisWorkbook.Names(strEtName).RefersToRange.Rows.Count
      wsSheet.Rows(Target.Row).Insert Shift:=xlShiftDown
    Next intICounter
    ThisWorkbook.Names(strEtName).RefersToRange.Copy
    wsSheet.cells(intRow, 1).PasteSpecial xlPasteAll
    If InStr(ThisWorkbook.Names(strEtName).RefersToRange.parent.name, "et_union") = 0 Then _
       wsSheet.Rows(intRow & ":" & intRow + ThisWorkbook.Names(strEtName).RefersToRange.Rows.Count - 1).Hidden = False
    Target.Offset(-ThisWorkbook.Names(strEtName).RefersToRange.Rows.Count, 0).MergeArea.IndentLevel = Target.IndentLevel
    If blnAddHypDel Then AddHypDel wsSheet.cells(intRow, intDelHypCol), strDelHypStr
    If blnRenumber Then ReNumber Target.Offset(-1, intColNumOffset).MergeArea, False
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub DeleteRange(Target As Range, blnMultiRow As Boolean, Optional intCountRowDel As Long = 0, Optional blnRenumber As Boolean = True, Optional intColNumOffset As Long = 1)
  Dim intCounter As Long, intRow As Long
  Dim wsSheet As Worksheet
  If blnRenumber Then ReNumber Target.Offset(0, intColNumOffset), True
  If blnMultiRow Then
    If intCountRowDel = 0 Then
      Target.EntireRow.Select
      Selection.Delete
    Else
      Set wsSheet = Target.parent
      intRow = Target.Row
      For intCounter = 1 To intCountRowDel
        wsSheet.Rows(intRow).Delete
      Next intCounter
    End If
  Else
    Target.EntireRow.Delete
  End If
End Sub

Sub ReNumber(rngRange As Range, blnDelete As Boolean)
  Dim strNum As String, strPrefix As String, strPostfix As String
  Dim rngTemp As Range
  Dim i As Long, intCol As Long
  Dim wsSheet As Worksheet
  
  Set wsSheet = rngRange.parent
  
  If Not blnDelete Then
    Set rngTemp = rngRange.Offset(-1, 0)
    Set rngTemp = rngTemp.MergeArea
    If rngTemp.cells(1, 1).Value = "|fffd| |fffd|/|fffd|" Then rngRange.Value = 0 Else rngRange.Value = rngTemp.Value
    Set rngRange = rngRange.cells(1, 1)
    i = rngRange.Row
    intCol = rngRange.Column
    Do While wsSheet.cells(i, intCol).Value <> ""
      strNum = wsSheet.cells(i, intCol).Value
      strPrefix = Mid(strNum, 1, InStrRev(strNum, "."))
      strPostfix = Mid(strNum, InStrRev(strNum, ".") + 1)
      wsSheet.cells(i, intCol).Value = strPrefix & (strPostfix + 1)
      i = i + wsSheet.cells(i, intCol).MergeArea.Rows.Count
      Do While wsSheet.cells(i, intCol).HasFormula
        i = i + wsSheet.cells(i, intCol).MergeArea.Rows.Count
      Loop
    Loop
  Else
    i = rngRange.Row
    intCol = rngRange.Column
    Do While wsSheet.cells(i, intCol).Value <> ""
      strNum = wsSheet.cells(i, intCol).Value
      strPrefix = Mid(strNum, 1, InStrRev(strNum, "."))
      strPostfix = Mid(strNum, InStrRev(strNum, ".") + 1)
      wsSheet.cells(i, intCol).Value = strPrefix & (strPostfix - 1)
      i = i + wsSheet.cells(i, intCol).MergeArea.Rows.Count
    Loop
  End If
End Sub







Attribute VB_Name = "modInfo"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Base 1
Option Explicit

Public sngHLblFormSheetReference As Single       ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| frmSheetReference

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub MainSheetHelp()
  If modScrolling.blnIs_UserForm_Loaded("frmSheetReference") = True Then
    Unload frmSheetReference
  End If

  frmSheetReference.lblReference.caption = modInfo.strGet_Label_Caption( _
                                                   ThisWorkbook.ActiveSheet, _
                                                   Application.Caller)
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function strGet_Label_Caption(ByVal wsOwnerSheet As Worksheet, _
                                     ByVal strApplicationCaller As String) As String

  On Error GoTo ErrHandler

  Dim wbBook As Workbook
  Dim intNum As Integer         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim strNameRange As String    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

  Set wbBook = wsOwnerSheet.parent

  If wsOwnerSheet.name = List00.name Then

    intNum = CInt(Split(strApplicationCaller, "_")(1))

    Select Case intNum
    Case 2
      strNameRange = "Info_TitleKindPublication"
    Case 3
      strNameRange = "Info_PeriodInTitle"
    Case 4
      strNameRange = "Info_TitleGroupRates"
    Case Else
      GoTo CleanUp
    End Select

  ElseIf wsOwnerSheet.name = List01.name Then

    intNum = CInt(Split(strApplicationCaller, "_")(1))

    Select Case intNum
    Case 1
      strNameRange = "Info_ForMRInListMO"
    Case 2
      strNameRange = "Info_ForMOInListMO"
    Case 3
      strNameRange = "Info_ForSKIInListMO"
    Case 4
      strNameRange = "Info_ForSKINumberInListMO"
    Case Else
      GoTo CleanUp
    End Select

  ElseIf wsOwnerSheet.name = List02.name Then

    intNum = CInt(Split(strApplicationCaller, "_")(1))

    Select Case intNum
    Case 1
      strNameRange = "Info_NoteStandarts"
    Case 2
      strNameRange = "Info_PublicationPdf"
    Case 3
      strNameRange = "Info_P1_5Standarts"
    Case Else
      GoTo CleanUp
    End Select

  ElseIf wsOwnerSheet.name = List03.name Then

    intNum = CInt(Split(strApplicationCaller, "_")(1))

    Select Case intNum
    Case 1
      strNameRange = "Info_PublicationWeb"
    Case 2
      strNameRange = "Info_PublicationPdf"
    Case 3
      strNameRange = "Info_PublicationNotDisclosed"
    Case Else
      GoTo CleanUp
    End Select
  End If

  strGet_Label_Caption = wbBook.Worksheets("modInfo").Range(strNameRange).Value
  sngHLblFormSheetReference = 12 * (wbBook.Names(strNameRange).RefersToRange.EntireRow.Height / wbBook.Worksheets("modInfo").StandardHeight)
  GoTo CleanUp

ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp
CleanUp:
End Function

Attribute VB_Name = "modInternetConnectionState"
Option Explicit

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Copyright |fffd|1996-2011 VBnet/Randy Birch, All Rights Reserved.
' Some pages may also contain other copyrights by the author.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Distribution: You can freely use this code in your own
'               applications, but you may not reproduce
'               or publish this code on any web site,
'               online service, or distribute as source
'               on any media without express permission.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

#If VBA7 And Win64 Then
Private Declare PtrSafe Function InternetGetConnectedState Lib "wininet" _
  (ByRef dwFlags As Long, _
   ByVal dwReserved As Long) As Long
#Else
Private Declare Function InternetGetConnectedState Lib "wininet" _
  (ByRef dwFlags As Long, _
   ByVal dwReserved As Long) As Long
#End If

' Local system uses a modem to connect to the Internet.
Private Const INTERNET_CONNECTION_MODEM As Long = &H1

' Local system uses a LAN to connect to the Internet.
Private Const INTERNET_CONNECTION_LAN As Long = &H2

' Local system uses a proxy server to connect to the Internet.
Private Const INTERNET_CONNECTION_PROXY As Long = &H4

' No longer used.
Private Const INTERNET_CONNECTION_MODEM_BUSY As Long = &H8

Private Const INTERNET_RAS_INSTALLED As Long = &H10
Private Const INTERNET_CONNECTION_OFFLINE As Long = &H20
Private Const INTERNET_CONNECTION_CONFIGURED As Long = &H40

Public Function blnIsOnLine() As Boolean
  If strGetNetConnectString = "Not connected to the internet now." Then
    blnIsOnLine = False
  Else
    blnIsOnLine = True
  End If
End Function

Private Function blnIsNetConnectViaLAN() As Boolean

  Dim dwFlags As Long
   
  ' pass an empty variable into which the API will
  ' return the flags associated with the connection
  Call InternetGetConnectedState(dwFlags, 0&)

  ' return True if the flags indicate a LAN connection
  blnIsNetConnectViaLAN = dwFlags And INTERNET_CONNECTION_LAN
     
End Function

Private Function blnIsNetConnectViaModem() As Boolean

  Dim dwFlags As Long
   
  ' pass an empty variable into which the API will
  ' return the flags associated with the connection
  Call InternetGetConnectedState(dwFlags, 0&)

  ' return True if the flags indicate a modem connection
  blnIsNetConnectViaModem = dwFlags And INTERNET_CONNECTION_MODEM
     
End Function

Private Function blnIsNetConnectViaProxy() As Boolean

  Dim dwFlags As Long
   
  ' pass an empty variable into which the API will
  ' return the flags associated with the connection
  Call InternetGetConnectedState(dwFlags, 0&)

  ' return True if the flags indicate a proxy connection
  blnIsNetConnectViaProxy = dwFlags And INTERNET_CONNECTION_PROXY
     
End Function

Private Function IsNetConnectOnline() As Boolean

  ' no flags needed here - the API returns True
  ' if there is a connection of any type
  IsNetConnectOnline = InternetGetConnectedState(0&, 0&)
     
End Function

Private Function blnIsNetRASInstalled() As Boolean

  Dim dwFlags As Long
   
  ' pass an empty variable into which the API will
  ' return the flags associated with the connection
  Call InternetGetConnectedState(dwFlags, 0&)

  ' return True if the flags include RAS installed
  blnIsNetRASInstalled = dwFlags And INTERNET_RAS_INSTALLED
     
End Function

Private Function strGetNetConnectString() As String

   Dim dwFlags As Long
   Dim strMsg As String

   ' Build a string for display
   If InternetGetConnectedState(dwFlags, 0&) Then
     
      If dwFlags And INTERNET_CONNECTION_CONFIGURED Then
         strMsg = strMsg & "You have a network connection configured." & vbCrLf
      End If

      If dwFlags And INTERNET_CONNECTION_LAN Then
         strMsg = strMsg & "The local system connects to the Internet via a LAN"
      End If
      
      If dwFlags And INTERNET_CONNECTION_PROXY Then
         strMsg = strMsg & ", and uses a proxy server. "
      Else
         strMsg = strMsg & "."
      End If
      
      If dwFlags And INTERNET_CONNECTION_MODEM Then
         strMsg = strMsg & "The local system uses a modem to connect to the Internet. "
      End If
      
      If dwFlags And INTERNET_CONNECTION_OFFLINE Then
         strMsg = strMsg & "The connection is currently offline. "
      End If
      
      If dwFlags And INTERNET_CONNECTION_MODEM_BUSY Then
         strMsg = strMsg & "The local system's modem is busy with a non-Internet connection. "
      End If
      
      If dwFlags And INTERNET_RAS_INSTALLED Then
         strMsg = strMsg & "Remote Access Services are installed on this system."
      End If
      
   Else
    
      strMsg = "Not connected to the internet now."
      
   End If
   
   strGetNetConnectString = strMsg

End Function
Attribute VB_Name = "modInvokeHTTPServer"
Option Explicit
Option Base 1

' =========================================================
' ================== |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| URL =====================
' =========================================================

Public Function strQuery_Data(ByVal strURL As String, _
                              ByRef ArrOut() As Variant) As String

  Dim lngICounter As Long
  Dim lngJCounter As Long

  Dim lngRequestCounter As Long
  Dim strBaseURL(4) As String

  Dim blnSuccessfulRequest As Boolean

  strQuery_Data = vbNullString

  On Error GoTo ErrHandler

  If Len(strURL) = 0 Then
    GoTo ErrHandler
  End If

  Dim lngRequestStatus As Long  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

  ' Check Internet Connection Status
  If modInternetConnectionState.blnIsOnLine = False Then
    GoTo Offline
  End If

  ' HTTP Request
  Dim objXMLHTTP As MSXML2.XMLHTTP
  Dim objXMLDOMDocument As MSXML2.DOMDocument

  Set objXMLHTTP = CreateObject("MSXML2.XMLHTTP.3.0")

  strBaseURL(1) = STR_HTTP_REQUEST_BASE_URL_1
  strBaseURL(2) = STR_HTTP_REQUEST_BASE_URL_2
  strBaseURL(3) = STR_HTTP_REQUEST_BASE_URL_3
  strBaseURL(4) = STR_HTTP_REQUEST_BASE_URL_4

  blnSuccessfulRequest = False

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| DNS...

  For lngRequestCounter = LBound(strBaseURL) To UBound(strBaseURL)

    On Error GoTo TryNextDNS

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP-|fffd||fffd||fffd||fffd||fffd||fffd|...
    lngRequestStatus = lngSend_Request(objXMLHTTP, objXMLDOMDocument, strBaseURL(lngRequestCounter) & strURL)

    If Not lngRequestStatus = HTTP_STATUS_OK Then
      GoTo TryNextDNS
    End If

    If objXMLDOMDocument Is Nothing Then
      GoTo TryNextDNS
    End If

    If objXMLDOMDocument.DocumentElement Is Nothing Then
      GoTo TryNextDNS
    End If

    If objXMLDOMDocument.DocumentElement.ChildNodes Is Nothing Then
      GoTo TryNextDNS
    End If

    If objXMLDOMDocument.DocumentElement.ChildNodes.Length >= 0 Then  ' = 0 |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      blnSuccessfulRequest = True
      Exit For
    End If

TryNextDNS:
  Next lngRequestCounter

  On Error GoTo ErrHandler

  If blnSuccessfulRequest = True Then
    If objXMLDOMDocument.DocumentElement.ChildNodes.Length > 0 Then
      Dim rec As MSXML2.IXMLDOMElement
      For lngICounter = 0 To objXMLDOMDocument.DocumentElement.ChildNodes.Length - 1
        Set rec = objXMLDOMDocument.DocumentElement.ChildNodes.Item(lngICounter)
        
        If lngICounter = 0 Then
          ReDim ArrOut(0 To objXMLDOMDocument.DocumentElement.ChildNodes.Length, rec.ChildNodes.Length)
          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          For lngJCounter = 1 To rec.ChildNodes.Length
            ArrOut(0, lngJCounter) = rec.ChildNodes.Item(lngJCounter - 1).BaseName
          Next lngJCounter
        End If
        
        If Not frmProgressForm Is Nothing Then frmProgressForm.ProgressTick
        For lngJCounter = 1 To rec.ChildNodes.Length
          ArrOut(lngICounter + 1, lngJCounter) = rec.ChildNodes.Item(lngJCounter - 1).Text
        Next lngJCounter
      Next lngICounter

    End If

    GoTo Success

  Else

    GoTo ErrHandler

  End If

Success:
  strQuery_Data = STR_UPDATE_SUCCESS
  GoTo CleanUp

ErrHandler:
  strQuery_Data = STR_UPDATE_FAILED
  GoTo CleanUp

Offline:
  strQuery_Data = STR_INET_CONNECTION_IS_OFFLINE

CleanUp:
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP-|fffd||fffd||fffd||fffd||fffd||fffd|
Private Function lngSend_Request(ByRef objXMLHTTP As MSXML2.XMLHTTP, _
                                 ByRef objXMLDOMDocument As MSXML2.DOMDocument, _
                                 ByVal strURL As String)
    
  On Error GoTo ErrHandler



  If frmProgressForm Is Nothing Then
    objXMLHTTP.Open bstrMethod:="GET", bstrUrl:=strURL, varAsync:=False
    objXMLHTTP.send
  Else
    objXMLHTTP.Open bstrMethod:="GET", bstrUrl:=strURL, varAsync:=True
    objXMLHTTP.send
    Do While objXMLHTTP.readyState <> 4
      frmProgressForm.ProgressTick
    Loop

  End If
  
  Set objXMLDOMDocument = objXMLHTTP.responseXML
  
  lngSend_Request = objXMLHTTP.status
  
  If modGlobals.gblnTestMode Then
    Debug.Print objXMLDOMDocument.Text
  End If
  
  GoTo CleanUp
  
ErrHandler:
  lngSend_Request = HTTP_STATUS_BAD_REQUEST

CleanUp:
End Function

'Public Function Try_Show_Progress_Form(Optional strFormCaption As String = "") As IProgressBar
'  On Error GoTo ErrHandler
'
'  Dim i As Long
'  Dim diag As IProgressBar
'  Set diag = New ProgressDialogue
'
'  diag.Show strFormCaption
'
'  Set Try_Show_Progress_Form = diag
'
'  GoTo CleanUp
'
'ErrHandler:
'  Set diag = Nothing
'  Set Try_Show_Progress_Form = Nothing

'CleanUp:
'End Function
Attribute VB_Name = "modList00"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public wbBookForPrint As Workbook

Public Sub Worksheet_Change_Handler(ByVal Target As Range)

  On Error GoTo ErrWsChange

  Dim wbBook As Workbook
  Dim wsSheet As Worksheet

  Dim intRowHeight As Integer, intColorIndex As Integer, intColorIndexEtc As Integer
  Dim lngCounter As Integer

  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean
  
  Dim strFound As String

  Dim rngCell As Range, rngRange As Range, rngEtRange As Range
  Dim rngHypRange As Range

  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating

  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent

  If modServiceModule.IsNameExists(wbBook, "group_rates") = False Or _
     modServiceModule.IsNameExists(wbBook, "double_rate_tariff") = False Or _
     modServiceModule.IsNameExists(wbBook, "periodStart") = False Or _
     modServiceModule.IsNameExists(wbBook, "periodEnd") = False Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'!", vbCritical
    Exit Sub
  End If

  ' |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not Application.Intersect(Target, Union(wsSheet.Range("periodStart"), wsSheet.Range("periodEnd"))) Is Nothing And _
     Target.cells(1, 1).Interior.ColorIndex = colorLightBlue Then

    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet

    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Len(Trim(Target.cells(1, 1).Value)) <> 0 And IsDate(Target.cells(1, 1).Value) Then
      Target.cells(1, 1).Value = _
        Format(Target.cells(1, 1).Value, "dd.mm.yyyy")
      ChangeRegulatoryPeriod Target
    ElseIf Len(Trim(Target.cells(1, 1).Value)) <> 0 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - '|fffd||fffd|.|fffd||fffd|.|fffd||fffd||fffd||fffd|'", _
               vbCritical, _
               STR_MSGBOX_WARNING_TITLE
      Target.cells(1, 1).Value = CStr(Target.cells(1, 1).Offset(0, -5).Value)
    Else
      ChangeRegulatoryPeriod Target
    End If
    GoTo EndWsChange
  End If

  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If Not Application.Intersect(Target, wsSheet.Range("group_rates")) Is Nothing Then
    
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If CStr(Target.cells(1, 1).Value) = CStr(Target.cells(1, 1).Offset(0, -5).Value) Then GoTo NextCheck
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Target.cells(1, 1).Offset(0, -5).Value = CStr(Target.cells(1, 1).Value)
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    wsSheet.Range("double_rate_tariff").Interior.ColorIndex = colorWhite
    wsSheet.Range("double_rate_tariff").Value = vbNullString
    wsSheet.Range("double_rate_tariff").EntireRow.Hidden = True
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    wbBook.Names("unit_tariff").RefersToRange.Value = vbNullString
    
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Len(Trim(wsSheet.Range("group_rates").Value)) = 0 Then
      wsSheet.Range("double_rate_tariff").cells(1, 1).Offset(-1, 0).EntireRow.Hidden = True
    Else
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Set rngCell = wbBook.Names("kind_group_rates").RefersToRange.Find(Target.cells(1, 1).Value, _
                                                                        LookIn:=xlFormulas, _
                                                                        LookAt:=xlWhole, _
                                                                        MatchCase:=False)
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If Not rngCell Is Nothing Then
        For lngCounter = 1 To 4
          wbBook.Names("unit_tariff").RefersToRange.cells(1, lngCounter).Value = rngCell.Offset(0, lngCounter).cells(1, 1).Value
        Next lngCounter
      End If
      
      ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      If wbBook.Names("unit_tariff_double_rate_p").RefersToRange.cells(1, 1).Value <> "-" Then
        wsSheet.Range("double_rate_tariff").cells(1, 1).Offset(-1, 0).EntireRow.Hidden = False
        wsSheet.Range("double_rate_tariff").Interior.ColorIndex = colorLightBlue
        wsSheet.Range("double_rate_tariff").EntireRow.Hidden = False
      Else
        wsSheet.Range("double_rate_tariff").cells(1, 1).Offset(-1, 0).EntireRow.Hidden = True
      End If
      
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If TEHSHEET.Range("unit_tariff_single_rate").cells(1, 1).Value = "-" Then
        wsSheet.Range("double_rate_tariff").Value = "|fffd||fffd|"
        ChangeDoubleRateTariff True
      Else
        ChangeDoubleRateTariff False
      End If
      
      ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      modServiceModule.UNPROTECT_SHEET List02
      If List02.Range("data_List02_4").Rows.Count > 2 Then
        Set rngRange = List02.Range(List02.Range("data_List02_4").cells(2, 1), _
                                    List02.Range("data_List02_4").cells(List02.Range("data_List02_4").Rows.Count - 1, 1))
      End If
      
      Set rngEtRange = TSH_et_union_hor.Range("et_List02_4").cells(1, 6)
      If ThisWorkbook.Names("unit_tariff_useful_output").RefersToRange.cells(1, 1).Value = "-" Then
          ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          List02.Range("data_List02_4").cells(1, 1).EntireRow.Hidden = True
          If List02.Range("data_List02_4").Rows.Count > 2 Then
            Union(rngRange, rngRange.Offset(0, 2)).Interior.ColorIndex = colorWhite
            Union(rngRange, rngRange.Offset(0, 2)).Locked = True
            Union(rngRange, rngRange.Offset(0, 2)).Value = vbNullString
            rngRange.EntireRow.Hidden = True
          End If
          
          ' |fffd||fffd||fffd||fffd| et_union_hor
          Union(rngEtRange, rngEtRange.Offset(0, 2)).Interior.ColorIndex = colorWhite
          Union(rngEtRange, rngEtRange.Offset(0, 2)).Locked = True
          rngEtRange.EntireRow.Hidden = True
      Else
          ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          List02.Range("data_List02_4").cells(1, 1).EntireRow.Hidden = False
          If List02.Range("data_List02_4").Rows.Count > 2 Then
            rngRange.Interior.ColorIndex = colorCyan
            rngRange.Offset(0, 2).Interior.ColorIndex = colorYellow
            Union(rngRange, rngRange.Offset(0, 2)).Locked = False
            rngRange.EntireRow.Hidden = False
          End If
          
          ' |fffd||fffd||fffd||fffd| et_union_hor
          rngEtRange.Interior.ColorIndex = colorCyan
          rngEtRange.Offset(0, 2).Interior.ColorIndex = colorYellow
          Union(rngEtRange, rngEtRange.Offset(0, 2)).Locked = False
          rngEtRange.EntireRow.Hidden = False
      End If
    
    End If
  End If




















































NextCheck:
  If Target.cells(1, 1).Interior.ColorIndex = colorCyan Then
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modServiceModule.AutoFitMergedCellRowHeight Target, 19.5
    GoTo EndWsChange
  End If

  Exit Sub

ErrWsChange:
  Debug.Print Err.Description
  GoTo EndWsChange

EndWsChange:
  If Len(Trim(List00.Range("group_rates").cells(1, 1).Value)) = 0 Or _
     Len(Trim(List00.Range("RegulatoryPeriod").cells(1, 1).Value)) = 0 Or _
     Len(Trim(List00.Range("RegulatoryPeriod").cells(2, 1).Value)) = 0 Then
    List02.Visible = xlSheetVeryHidden
  Else
    List02.Visible = xlSheetVisible
  End If

  List02.Activate
  modServiceModule.PROTECT_SHEET List02, True
  If Not wsSheet Is Nothing Then
    wsSheet.Activate
    modServiceModule.PROTECT_SHEET wsSheet, True
  End If
  Set wbBook = Nothing
  Set wsSheet = Nothing
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal

End Sub

Public Sub Worksheet_FollowHyperlink_Handler(ByVal Target As Hyperlink)

End Sub

Public Sub Worksheet_SelectionChange(ByVal Target As Range)
  On Error Resume Next
  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  If ((Not Application.Intersect(Target, Target.parent.Range("periodStart")) Is Nothing) Or _
      (Not Application.Intersect(Target, Target.parent.Range("periodEnd")) Is Nothing)) And _
     Target.cells(1, 1).Interior.ColorIndex = colorLightBlue Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    modServiceModule.PROTECT_SHEET Target.parent, False
    List00.Shapes("shCalendar").Top = Target.Top
    List00.Shapes("shCalendar").Left = Target.Left + Target.Width + 3
    List00.Shapes("shCalendar").Height = 15
    List00.Shapes("shCalendar").Width = 15
    List00.Shapes("shCalendar").Visible = msoTrue
    modServiceModule.PROTECT_SHEET Target.parent
  Else
    List00.Shapes("shCalendar").Visible = msoFalse
  End If
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Worksheet_Deactivate
End Sub

Public Sub Worksheet_Deactivate()
  If modScrolling.blnIs_UserForm_Loaded("frmSheetReference") = True Then
    Unload frmSheetReference
  End If
End Sub

Public Sub Worksheet_BeforeDoubleClick_Handler(ByVal Target As Range, Cancel As Boolean)
  Dim lngRow As Long, lngCol As Long, lngTemp As Long
  Dim blnScreenUpdatingState As Boolean, blnEnableEventsState As Boolean
  Dim wsSheet As Worksheet
  Dim intColorIndex As Integer
  Dim rngCell As Range, rngRange As Range, rngCellTwo As Range
  Dim lngCountYear As Long
  Dim ISectDate

  On Error GoTo ErrDblClick

  Set wsSheet = Target.parent
  lngRow = Target.Row
  lngCol = Target.Column
  blnScreenUpdatingState = Application.ScreenUpdating
  blnEnableEventsState = Application.EnableEvents
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If Target.cells(1, 1).Interior.ColorIndex = colorLightBlue And _
     Not Application.Intersect(List00.Range("double_rate_tariff"), Target) Is Nothing Then
    Cancel = True
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If TEHSHEET.Range("unit_tariff_single_rate").cells(1, 1).Value = "-" Then


      MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!", _
               vbInformation, _
               STR_MSGBOX_WARNING_TITLE
    Else
      modServiceModule.UNPROTECT_SHEET wsSheet
      If LCase(Target.cells(1, 1).Value) = "|fffd||fffd|" Then
        Target.cells(1, 1).Value = "|fffd||fffd||fffd|"
        ChangeDoubleRateTariff False
      Else
        Target.cells(1, 1).Value = "|fffd||fffd|"
        ChangeDoubleRateTariff True
      End If
    End If

    GoTo EndDblClick
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ElseIf Target.cells(1, 1).Interior.ColorIndex = colorLightBlue And _
         Not Application.Intersect(List00.Range("fil_flag"), Target) Is Nothing Then
    Cancel = True
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    If LCase(List00.Range("fil_flag").Value) = "|fffd||fffd|" Then
      List00.Range("fil").Interior.ColorIndex = -4142
      List00.Range("fil").Value = vbNullString
      List00.Range("fil").Locked = True
      List00.Range("fil_flag").Value = "|fffd||fffd||fffd|"
    Else
      List00.Range("fil").Interior.ColorIndex = colorCyan
      List00.Range("fil").Locked = False
      List00.Range("fil_flag").Value = "|fffd||fffd|"
    End If

    GoTo EndDblClick
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ElseIf Target.cells(1, 1).Interior.ColorIndex = colorLightBlue And _
         Not Application.Intersect(List00.Range("flag_ipr"), Target) Is Nothing Then
    Cancel = True
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET List02
    modServiceModule.UNPROTECT_SHEET wsSheet
    If LCase(List00.Range("flag_ipr").Value) = "|fffd||fffd|" Then
      Union(List02.Range("ipr"), List02.Range("ipr").Offset(0, 1)).Interior.ColorIndex = colorWhite
      Union(List02.Range("ipr"), List02.Range("ipr").Offset(0, 1)).Locked = True
      Union(List02.Range("ipr"), List02.Range("ipr").Offset(0, 1)).Value = vbNullString
      List02.Range("ipr").EntireRow.Hidden = True
      List00.Range("flag_ipr").Value = "|fffd||fffd||fffd|"
    Else
      List02.Range("ipr").Interior.ColorIndex = colorCyan
      List02.Range("ipr").Offset(0, 1).Interior.ColorIndex = colorYellow
      Union(List02.Range("ipr"), List02.Range("ipr").Offset(0, 1)).Locked = False
      List02.Range("ipr").EntireRow.Hidden = False
      List00.Range("flag_ipr").Value = "|fffd||fffd|"
    End If

    GoTo EndDblClick
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ElseIf Target.cells(1, 1).Interior.ColorIndex = colorLightBlue And _
         Not Application.Intersect(List00.Range("flag_NVV"), Target) Is Nothing Then
    Cancel = True
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If LCase(List00.Range("flag_NVV").Value) = "|fffd||fffd|" Then
      List00.Range("flag_NVV").Value = "|fffd||fffd||fffd|"
    Else
      List00.Range("flag_NVV").Value = "|fffd||fffd|"
    End If
    If (Len(Trim(List00.Range("periodStart").Value)) <> 0 Or Len(Trim(List00.Range("periodEnd").Value)) <> 0) And _
       List00.Range("flag_NVV").Value <> List00.Range("flag_NVV").Offset(0, -5).Value Then
      If MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '" & _
                Target.cells(1, 1).Offset(0, -1).Value & _
                "'?" & vbCrLf & " |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!") = _
                vbYes Then
        
        List02.Activate
        modServiceModule.UNPROTECT_SHEET List02
        
        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If List02.Range("pDel_List02_1").Rows.Count > 2 Then
          List02.Range(List02.Range("pDel_List02_1").cells(2, 1).EntireRow, _
                       List02.Range("pDel_List02_1").cells(List02.Range("pDel_List02_1").Rows.Count - 1, 1)).Delete
        End If
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If List02.Range("pDel_List02_2").Rows.Count > 2 Then
          List02.Range(List02.Range("pDel_List02_2").cells(2, 1).EntireRow, _
                       List02.Range("pDel_List02_2").cells(List02.Range("pDel_List02_2").Rows.Count - 1, 1)).Delete
        End If
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|. |fffd||fffd||fffd|.
        If List02.Range("pDel_List02_3").Rows.Count > 2 Then
          List02.Range(List02.Range("pDel_List02_3").cells(2, 1).EntireRow, _
                       List02.Range("pDel_List02_3").cells(List02.Range("pDel_List02_3").Rows.Count - 1, 1)).Delete
        End If
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If List02.Range("pDel_List02_4").Rows.Count > 2 Then
          List02.Range(List02.Range("pDel_List02_4").cells(2, 1).EntireRow, _
                       List02.Range("pDel_List02_4").cells(List02.Range("pDel_List02_4").Rows.Count - 1, 1)).Delete
        End If
''        List02.Visible = xlSheetVeryHidden
        
        List00.Activate
        modServiceModule.UNPROTECT_SHEET List00
        List00.Range("periodStart").Value = vbNullString
        List00.Range("periodEnd").Value = vbNullString
        List00.Range("flag_NVV").Offset(0, -5).Value = List00.Range("flag_NVV").Value
      Else
        List00.Range("flag_NVV").Value = List00.Range("flag_NVV").Offset(0, -5).Value
      End If
    Else
      Cancel = True
      Application.EnableEvents = False
      Application.ScreenUpdating = False
      modServiceModule.UNPROTECT_SHEET wsSheet
      List00.Range("flag_NVV").Offset(0, -5).Value = List00.Range("flag_NVV").Value
    End If
    
    GoTo EndDblClick
    
  ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?
  ElseIf Target.cells(1, 1).Interior.ColorIndex = colorLightBlue And _
         (Not Application.Intersect(List00.Range("flag_publication"), Target) Is Nothing) Then                         ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    Cancel = True
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet

    If LCase(Target.cells(1, 1).Value) = "|fffd||fffd|" Then
      Target.cells(1, 1).Value = "|fffd||fffd||fffd|"
      List03.Visible = xlSheetVeryHidden
    Else
      Target.cells(1, 1).Value = "|fffd||fffd|"
      List03.Visible = xlSheetVisible
    End If

    GoTo EndDblClick
  End If

  Exit Sub

ErrDblClick:
  MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical

EndDblClick:
  List02.Activate
  modServiceModule.PROTECT_SHEET List02, True
  wsSheet.Activate
  modServiceModule.PROTECT_SHEET wsSheet, True
  wsSheet.cells(lngRow, lngCol).Select
  Application.EnableEvents = blnEnableEventsState
  Application.ScreenUpdating = blnScreenUpdatingState
End Sub

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub ChangeRegulatoryPeriod(Target As Range)
    Dim lngRow As Long, lngCol As Long, lngTemp As Long
    Dim blnScreenUpdatingState As Boolean, blnEnableEventsState As Boolean
    Dim wsSheet As Worksheet
    Dim intColorIndex As Integer
    Dim rngCell As Range, rngRange As Range, rngCellTwo As Range
    Dim lngCountYear As Long
    Dim ISectDate
    
    On Error GoTo ErrChange
    
    Set wsSheet = Target.parent
    
    modServiceModule.UNPROTECT_SHEET wsSheet
    
    ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    If Len(Trim(wsSheet.parent.Names("flag_NVV").RefersToRange.Value)) = 0 Then
      MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '" & wsSheet.parent.Names("flag_NVV").RefersToRange.Offset(0, -1).Value & "'!", _
             vbCritical, _
             STR_MSGBOX_WARNING_TITLE
      Target.cells(1, 1).Value = CStr(Target.cells(1, 1).Offset(0, -5).Value)
      GoTo CleanUp
    End If
    
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If List02.Range("pDel_List02_1").Rows.Count > 2 Or _
       List02.Range("pDel_List02_2").Rows.Count > 2 Or _
       List02.Range("pDel_List02_3").Rows.Count > 2 Or _
       List02.Range("pDel_List02_4").Rows.Count > 2 Then
      If MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '" & _
                Target.cells(1, 1).Offset(0, -1).MergeArea.cells(1, 1).Value & _
                "'?" & vbCrLf & " |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & _
                "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| '" & List02.Range("pDel_List02_1").cells(1, 1).Offset(0, 2).Value & "', " & _
                "'" & List02.Range("pDel_List02_2").cells(1, 1).Offset(0, 2).Value & "', " & _
                "'" & List02.Range("pDel_List02_3").cells(1, 1).Offset(0, 2).Value & "' |fffd| " & _
                "'" & List02.Range("pDel_List02_4").cells(1, 1).Offset(0, 2).Value & "' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & List02.name & "!", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!") <> _
                vbYes Then
        Target.cells(1, 1).Value = CStr(Target.cells(1, 1).Offset(0, -5).Value)
        GoTo CleanUp
      End If
    End If
    
    If Len(Trim(Target.cells(1, 1).Value)) <> 0 Then
      If MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - " & Target.cells(1, 1).Value & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '" & _
                Target.cells(1, 1).Offset(0, -1).MergeArea.cells(1, 1).Value & _
                "', |fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!") <> _
                vbYes Then
        Target.cells(1, 1).Value = CStr(Target.cells(1, 1).Offset(0, -5).Value)
        GoTo CleanUp
      End If
    End If
    
    If Len(Trim(wsSheet.parent.Names("periodStart").RefersToRange.Value)) <> 0 And _
       Len(Trim(wsSheet.parent.Names("periodEnd").RefersToRange.Value)) <> 0 Then
      If (CDate(wsSheet.parent.Names("periodStart").RefersToRange.Value) > _
          CDate(wsSheet.parent.Names("periodEnd").RefersToRange.Value)) Then
        MsgBox "|fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' (" & _
               wsSheet.parent.Names("periodStart").RefersToRange.Value & "), |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, " & _
               " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' (" & _
               wsSheet.parent.Names("periodEnd").RefersToRange.Value & ")!", _
               vbCritical, _
               STR_MSGBOX_WARNING_TITLE
        Target.cells(1, 1).Value = CStr(Target.cells(1, 1).Offset(0, -5).Value)
        GoTo CleanUp
      End If
    End If
      

    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If List02.Range("pDel_List02_1").Rows.Count > 2 Or _
       List02.Range("pDel_List02_2").Rows.Count > 2 Or _
       List02.Range("pDel_List02_3").Rows.Count > 2 Or _
       List02.Range("pDel_List02_4").Rows.Count > 2 Then
    
      List02.Activate
      modServiceModule.UNPROTECT_SHEET List02
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If List02.Range("pDel_List02_1").Rows.Count > 2 Then
        List02.Range(List02.Range("pDel_List02_1").cells(2, 1).EntireRow, _
                     List02.Range("pDel_List02_1").cells(List02.Range("pDel_List02_1").Rows.Count - 1, 1)).Delete
      End If
      ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If List02.Range("pDel_List02_2").Rows.Count > 2 Then
        List02.Range(List02.Range("pDel_List02_2").cells(2, 1).EntireRow, _
                     List02.Range("pDel_List02_2").cells(List02.Range("pDel_List02_2").Rows.Count - 1, 1)).Delete
      End If
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|. |fffd||fffd||fffd|.
      If List02.Range("pDel_List02_3").Rows.Count > 2 Then
        List02.Range(List02.Range("pDel_List02_3").cells(2, 1).EntireRow, _
                     List02.Range("pDel_List02_3").cells(List02.Range("pDel_List02_3").Rows.Count - 1, 1)).Delete
      End If
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      If List02.Range("pDel_List02_4").Rows.Count > 2 Then
        List02.Range(List02.Range("pDel_List02_4").cells(2, 1).EntireRow, _
                     List02.Range("pDel_List02_4").cells(List02.Range("pDel_List02_4").Rows.Count - 1, 1)).Delete
      End If
    End If
    
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    lngCountYear = -1
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
    If Len(Trim(List00.Range("periodStart").Value)) <> 0 And _
       Len(Trim(List00.Range("periodEnd").Value)) <> 0 Then
       lngCountYear = Year(List00.Range("periodEnd")) - Year(List00.Range("periodStart"))
    Else
      Target.cells(1, 1).Offset(0, -5).Value = CStr(Target.cells(1, 1).Value)
      GoTo CleanUp
    End If
    
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd|", |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|
    If lngCountYear = 0 And _
       Month(List00.Range("periodEnd").cells(1, 1).Value) - Month(List00.Range("periodStart").cells(1, 1).Value) < 6 And _
       List00.Range("flag_NVV").cells(1, 1).Value = "|fffd||fffd|" Then
         List00.Range("flag_NVV").cells(1, 1).Value = "|fffd||fffd||fffd|"
         List00.Range("flag_NVV").cells(1, 1).Offset(0, -5).Value = List00.Range("flag_NVV").cells(1, 1).Value
    End If
    
    Dim strStartDateHY1 As String, strStartDateHY2 As String, strEndDateHY1 As String, strEndDateHY2 As String
    Dim strStartDateP2_2HY1 As String, strStartDateP2_2HY2 As String, strEndDateP2_2HY1 As String, strEndDateP2_2HY2 As String
    Dim lngYear As Long
    
    If lngCountYear <> -1 Then
      lngYear = Year(List00.Range("periodStart").Value)
      For lngTemp = 0 To lngCountYear
        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If List00.Range("flag_NVV").cells(1, 1).Value = "|fffd||fffd|" Then
          strStartDateHY1 = "01.01." & lngYear + lngTemp
          strStartDateHY2 = "01.07." & lngYear + lngTemp
          strEndDateHY1 = "30.06." & lngYear + lngTemp
          strEndDateHY2 = "31.12." & lngYear + lngTemp
          strStartDateP2_2HY1 = strStartDateHY1
          strEndDateP2_2HY1 = strEndDateHY2
    
          If lngTemp = 0 Then
            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If CDate(strEndDateHY1) < CDate(List00.Range("periodStart")) Then
              strStartDateHY2 = List00.Range("periodStart").Value
              strEndDateHY1 = vbNullString
              strStartDateP2_2HY1 = strStartDateHY2
            Else
              strStartDateHY1 = List00.Range("periodStart").Value
              strStartDateP2_2HY1 = strStartDateHY1
            End If
            If lngCountYear = 0 Then
              strEndDateHY2 = List00.Range("periodEnd").Value
              strEndDateP2_2HY1 = strEndDateHY2
            End If
          ElseIf lngTemp = lngCountYear Then
            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If CDate(strEndDateHY1) > CDate(List00.Range("periodEnd")) Then
              strEndDateHY1 = List00.Range("periodEnd").Value
              strEndDateHY2 = vbNullString
              strEndDateP2_2HY1 = strEndDateHY1
            Else
              strEndDateHY2 = List00.Range("periodEnd").Value
              strEndDateP2_2HY1 = strEndDateHY2
            End If
          End If
        Else        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          strEndDateHY1 = vbNullString
          strStartDateHY2 = vbNullString
          strStartDateHY1 = "01.01." & lngYear + lngTemp
          strEndDateHY1 = "31.12." & lngYear + lngTemp
          If lngTemp = 0 Then
            strStartDateHY1 = List00.Range("periodStart").Value
            strStartDateP2_2HY1 = strStartDateHY1
            If lngCountYear = 0 Then
              strEndDateHY1 = List00.Range("periodEnd").Value
              strEndDateP2_2HY1 = strEndDateHY1
            End If
          ElseIf lngTemp = lngCountYear Then
            strEndDateHY1 = List00.Range("periodEnd").Value
            strEndDateP2_2HY1 = strEndDateHY1
          End If
          strStartDateP2_2HY1 = strStartDateHY1
          strEndDateP2_2HY1 = strEndDateHY1
        End If
    
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        modList02.Worksheet_BeforeDoubleClick_Handler List02.Range("pIns_List02_1"), False, True
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''         modList02.Worksheet_BeforeDoubleClick_Handler List02.Range("pIns_List02_2"), False, True
        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(Trim(strEndDateHY1)) <> 0 Then
          modList02.Worksheet_BeforeDoubleClick_Handler List02.Range("pIns_List02_2"), False, True
        End If
        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(Trim(strEndDateHY2)) <> 0 Then
          modList02.Worksheet_BeforeDoubleClick_Handler List02.Range("pIns_List02_2"), False, True
        End If
        ' |fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(Trim(strEndDateHY1)) <> 0 Then
          modList02.Worksheet_BeforeDoubleClick_Handler List02.Range("pIns_List02_3"), False, True
        End If
        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(Trim(strEndDateHY2)) <> 0 Then
          modList02.Worksheet_BeforeDoubleClick_Handler List02.Range("pIns_List02_3"), False, True
        End If
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        modList02.Worksheet_BeforeDoubleClick_Handler List02.Range("pIns_List02_4"), False, True
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        modServiceModule.UNPROTECT_SHEET List02
        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If InStr(1, CStr(List02.Range("pIns_List02_1").Offset(-1, 0).Value), CStr("|fffd| " & strStartDateP2_2HY1 & " |fffd||fffd| " & strEndDateP2_2HY1)) <> 1 Then _
          List02.Range("pIns_List02_1").Offset(-1, 0).Value = "|fffd| " & strStartDateP2_2HY1 & " |fffd||fffd| " & strEndDateP2_2HY1
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(Trim(strEndDateHY2)) = 0 Then
          If InStr(1, CStr("|fffd| " & strStartDateHY1 & " |fffd||fffd| " & strEndDateHY1), CStr(List02.Range("pIns_List02_2").Offset(-3, 0).Value)) <> 1 Then _
            List02.Range("pIns_List02_2").Offset(-3, 0).FormulaR1C1 = "=""|fffd| " & strStartDateHY1 & " |fffd||fffd| " & strEndDateHY1 & """ & IF(double_rate_tariff=""|fffd||fffd|"",,"", ""&unit_tariff_single_rate)"
        ElseIf Len(Trim(strEndDateHY1)) = 0 Then
          If InStr(1, CStr("|fffd| " & strStartDateHY2 & " |fffd||fffd| " & strEndDateHY2), CStr(List02.Range("pIns_List02_2").Offset(-3, 0).Value)) <> 1 Then _
            List02.Range("pIns_List02_2").Offset(-3, 0).FormulaR1C1 = "=""|fffd| " & strStartDateHY2 & " |fffd||fffd| " & strEndDateHY2 & """ & IF(double_rate_tariff=""|fffd||fffd|"",,"", ""&unit_tariff_single_rate)"
        Else
          If InStr(1, CStr("|fffd| " & strStartDateHY2 & " |fffd||fffd| " & strEndDateHY2), CStr(List02.Range("pIns_List02_2").Offset(-3, 0).Value)) <> 1 Then _
            List02.Range("pIns_List02_2").Offset(-3, 0).FormulaR1C1 = "=""|fffd| " & strStartDateHY2 & " |fffd||fffd| " & strEndDateHY2 & """ & IF(double_rate_tariff=""|fffd||fffd|"",,"", ""&unit_tariff_single_rate)"
          If InStr(1, CStr("|fffd| " & strStartDateHY1 & " |fffd||fffd| " & strEndDateHY1), CStr(List02.Range("pIns_List02_2").Offset(-6, 0).Value)) <> 1 Then _
            List02.Range("pIns_List02_2").Offset(-6, 0).FormulaR1C1 = "=""|fffd| " & strStartDateHY1 & " |fffd||fffd| " & strEndDateHY1 & """ & IF(double_rate_tariff=""|fffd||fffd|"",,"", ""&unit_tariff_single_rate)"
        End If
        ' |fffd||fffd||fffd|
        If Len(Trim(strEndDateHY2)) = 0 Then
          List02.Range("pIns_List02_3").Offset(-1, 0).Value = "|fffd| " & strStartDateHY1 & " |fffd||fffd| " & strEndDateHY1
        ElseIf Len(Trim(strEndDateHY1)) = 0 Then
          List02.Range("pIns_List02_3").Offset(-1, 0).Value = "|fffd| " & strStartDateHY2 & " |fffd||fffd| " & strEndDateHY2
        Else
          List02.Range("pIns_List02_3").Offset(-1, 0).Value = "|fffd| " & strStartDateHY2 & " |fffd||fffd| " & strEndDateHY2
          List02.Range("pIns_List02_3").Offset(-2, 0).Value = "|fffd| " & strStartDateHY1 & " |fffd||fffd| " & strEndDateHY1
        End If
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If CStr(List02.Range("pIns_List02_4").Offset(-1, 0).Value) <> CStr("|fffd| " & strStartDateP2_2HY1 & " |fffd||fffd| " & strEndDateP2_2HY1) Then _
          List02.Range("pIns_List02_4").Offset(-1, 0).Value = "|fffd| " & strStartDateP2_2HY1 & " |fffd||fffd| " & strEndDateP2_2HY1
        
      Next lngTemp
      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|
      List02.Range("data_List02_3").cells(1, 1).FormulaR1C1 = "=SUM(R[1]C:R[" & List02.Range("data_List02_3").Rows.Count - 1 & "]C)"
    End If
    
    Target.cells(1, 1).Offset(0, -5).Value = CStr(Target.cells(1, 1).Value)
    GoTo CleanUp

ErrChange:
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical

CleanUp:
  modServiceModule.PROTECT_SHEET List02, True
End Sub

Public Sub cmdOrganizationChoice_Click_Handler()
  modGlobals.intLockedSphere = modfrmReestr.intFindSphere("WARM")
  frmReestr.Show
  If modGlobals.blnApplyFlag Then
    modServiceModule.UNPROTECT_SHEET List00
    Application.EnableEvents = False
    List00.Range("org").Value = modGlobals.orgName
    List00.Range("inn").Value = modGlobals.orgInn
    List00.Range("kpp").Value = modGlobals.orgKpp
    List00.Range("vdet").Value = modGlobals.orgVDET
    List00.Range("TECH_ORG_ID").Value = modGlobals.orgId
    modServiceModule.PROTECT_SHEET List00
    Application.EnableEvents = True
  End If
  
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub WorkWithColumnsInHyperlinkSheet(wbBook As Workbook)
    
    Dim rngCell As Range
    Dim rngRange As Range
    
    Dim strNameRange(2) As String
    Dim strNameShapes(2) As String
    
    Dim intCounter As Integer
    
    Dim blnHiddenColumn As Boolean
    
    Dim wsSheet As Worksheet
    
    strNameRange(1) = "Posting_ref"                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| PDF |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    strNameRange(2) = "Website_address_internet"    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    
    strNameShapes(1) = "ExcludeHelp_2"              ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| PDF |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    strNameShapes(2) = "ExcludeHelp_1"              ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    
    For intCounter = LBound(strNameRange) To UBound(strNameRange)
      Set wsSheet = wbBook.Names(strNameRange(intCounter)).RefersToRange.parent
      Set rngRange = wsSheet.Range(strNameRange(intCounter)).Columns(1).cells
      
      blnHiddenColumn = True
      
      For Each rngCell In rngRange
        If rngCell.Interior.ColorIndex = colorCyan Or _
           rngCell.Interior.ColorIndex = colorYellow Then
             blnHiddenColumn = False
             GoTo nextStep
        End If
      Next rngCell
      
nextStep:
      wsSheet.Range(strNameRange(intCounter)).EntireColumn.Hidden = blnHiddenColumn
      wsSheet.Shapes(strNameShapes(intCounter)).Visible = Not (blnHiddenColumn)
      
    Next intCounter

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public Sub ChangeDoubleRateTariff(ByVal blnIsDblRateTariff As Boolean)

  On Error GoTo endSubChange

  Dim rngCell As Range, rngRange As Range, rngRangeOne As Range, rngRangeTwo As Range
  Dim lngNumber As Long, lngCounterRow As Long
  Dim wsSheet As Worksheet, wsActiveSheet As Worksheet, wsEtSheet As Worksheet

  Set wsActiveSheet = ThisWorkbook.ActiveSheet
  Set wsSheet = ThisWorkbook.Worksheets(gstrStandartsSheetName)
  Set wsEtSheet = ThisWorkbook.Worksheets(gstrEtUnionSheetName)

  wsSheet.Activate
  modServiceModule.UNPROTECT_SHEET wsSheet
  wsEtSheet.Visible = xlSheetVisible

  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If wsSheet.Range("pDel_" & wsSheet.CodeName & "_2").Rows.Count > 2 Then
    For lngCounterRow = 2 To wsSheet.Range("data_" & wsSheet.CodeName & "_2").Rows.Count - 1 Step 3
      Set rngRangeOne = wsSheet.Range(wsSheet.Range("data_" & wsSheet.CodeName & "_2").cells(lngCounterRow, 1), _
                                      wsSheet.Range("data_" & wsSheet.CodeName & "_2").cells(lngCounterRow + 2, 1))
                                      
      If blnIsDblRateTariff Then
        Set rngRangeTwo = wsSheet.Range(wsSheet.Range("data_" & wsSheet.CodeName & "_2").cells(lngCounterRow + 1, 1), _
                                        wsSheet.Range("data_" & wsSheet.CodeName & "_2").cells(lngCounterRow + 2, 1))
      Else
        Set rngRangeTwo = wsSheet.Range("data_" & wsSheet.CodeName & "_2").cells(lngCounterRow, 1)
      End If
      
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| rngRangeOne - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Union(rngRangeOne, rngRangeOne.Offset(0, 2)).Interior.ColorIndex = colorWhite
      Union(rngRangeOne, rngRangeOne.Offset(0, 2)).Locked = True
      Union(rngRangeOne, rngRangeOne.Offset(0, 2)).Value = vbNullString
      rngRangeOne.EntireRow.Hidden = True
      rngRangeOne.Rows(1).EntireRow.Hidden = False
    
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| rngRangeTwo - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      rngRangeTwo.Interior.ColorIndex = colorCyan
      rngRangeTwo.Offset(0, 2).Interior.ColorIndex = colorYellow
      Union(rngRangeTwo, rngRangeTwo.Offset(0, 2)).Locked = False
      rngRangeTwo.EntireRow.Hidden = False
    Next lngCounterRow
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| et_union
  wsEtSheet.Activate
  
  Set rngRangeOne = wsEtSheet.Range(wsEtSheet.Range("et_List02_2").cells(1, 6), _
                                    wsEtSheet.Range("et_List02_2").cells(3, 6))
                                    
  If blnIsDblRateTariff Then
    Set rngRangeTwo = wsEtSheet.Range(wsEtSheet.Range("et_List02_2").cells(2, 6), _
                                      wsEtSheet.Range("et_List02_2").cells(3, 6))
  Else
    Set rngRangeTwo = wsEtSheet.Range("et_List02_2").cells(1, 6)
  End If
    
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| rngRangeOne - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Union(rngRangeOne, rngRangeOne.Offset(0, 2)).Interior.ColorIndex = colorWhite
  Union(rngRangeOne, rngRangeOne.Offset(0, 2)).Locked = True
  wsEtSheet.Range(rngRangeOne, rngRangeOne.Offset(0, 2)).Value = vbNullString
  rngRangeOne.EntireRow.Hidden = True
  rngRangeOne.Rows(1).EntireRow.Hidden = False
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| rngRangeTwo - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  rngRangeTwo.Interior.ColorIndex = colorCyan
  rngRangeTwo.Offset(0, 2).Interior.ColorIndex = colorYellow
  Union(rngRangeTwo, rngRangeTwo.Offset(0, 2)).Locked = False
  rngRangeTwo.EntireRow.Hidden = False

  wsSheet.Activate

  GoTo CleanUp

endSubChange:
  GoTo CleanUp

CleanUp:
  If Not wsSheet Is Nothing Then modServiceModule.PROTECT_SHEET wsSheet, True
  If Not wsActiveSheet Is Nothing Then wsActiveSheet.Activate
  If Not wsEtSheet Is Nothing Then wsEtSheet.Visible = xlSheetVeryHidden
End Sub

' --------------- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| --------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sub CreatePrintedForm()

  Dim lngCounterRow As Integer
  Dim lngCounterColumn As Integer
  Dim lngFirstRow As Integer
  Dim lngEndRow As Integer
  Dim lngFirstColumn As Integer
  Dim lngEndColumn As Integer
  Dim lngCounter As Long

  Dim strSavedFileName As String
  Dim strNameCopySheet As String
  Dim strStartCellPrintArea As String
  Dim strEndCellPrintArea As String
  Dim strCenterFooter As String
  Dim strOrientationPage As String
  Dim strFileExtension As String
  ''  Dim strHeadTopAddress As String
  ''  Dim strHeadBottomAddress As String

  Dim rngCell As Range
  Dim rngRange As Range
  Dim rngDeleteRange As Range
  Dim rngRDeleteRange As Range
  Dim rngCDeleteRange As Range

  Dim vbResult As VbMsgBoxResult

  Dim wsActiveSheet As Worksheet
  Dim wsTempSheet As Worksheet
  Dim wsPrintSheet As Worksheet

  Dim wbBookTemplate As Workbook, wbThisWorkBook As Workbook

  Application.EnableEvents = False
''  Application.ScreenUpdating = False
  Application.DisplayAlerts = False

  Set wbBookTemplate = ThisWorkbook ' Application.ActiveWorkbook

  If wbBookTemplate Is Nothing Then
    GoTo CleanUp
  End If

  Set wsActiveSheet = wbBookTemplate.ActiveSheet

  If wsActiveSheet Is Nothing Then
    GoTo CleanUp
  End If

  On Error GoTo ErrHandler

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
''  AddErr "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
  strFileExtension = vbNullString
  strFileExtension = ".xls"

  strSavedFileName = Left(wbBookTemplate.name, _
                          IIf(Len(Trim(strFileExtension)) = 0, Len(wbBookTemplate.name), InStr(1, wbBookTemplate.name, strFileExtension) - 1)) & _
                          "_ForPrint(" & Format(Now, "dd_mm_yyyy HH_MM_SS") & ")"

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
''  AddErr "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - " & strSavedFileName
  If Not (CreateXlBook(strSavedFileName, wbBookTemplate.Path)) Then GoTo ErrHandler

''  AddErr "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
  Workbooks.Open Filename:=wbBookTemplate.Path & "\" & strSavedFileName & ".xls"

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set wbBookForPrint = Application.ActiveWorkbook

  wbBookTemplate.Activate
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  For Each wsTempSheet In wbBookTemplate.Worksheets
    If wsTempSheet.name <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" And _
       wsTempSheet.name <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" And _
       wsTempSheet.name <> "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|" And _
       wsTempSheet.name <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" And _
       wsTempSheet.name <> "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" And _
       wsTempSheet.name <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" And _
       wsTempSheet.Tab.ColorIndex <> modDefine.colorLightBrown And _
       wsTempSheet.Visible <> xlSheetVeryHidden And _
       wsTempSheet.Visible <> xlSheetHidden Then

      strNameCopySheet = wsTempSheet.name

      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      wbBookForPrint.Activate

      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      If strNameCopySheet = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
        Set wsPrintSheet = wbBookForPrint.Worksheets.Item(1)
      Else
        Set wsPrintSheet = wbBookForPrint.Worksheets.Add(after:=Worksheets(Worksheets.Count))
      End If
      wsPrintSheet.Activate
      wsPrintSheet.name = strNameCopySheet
''      AddErr "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - " & strNameCopySheet

      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|/
      wbBookTemplate.Activate
      wsTempSheet.Activate

      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      Application.CutCopyMode = False
      wsTempSheet.cells.Copy

      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| :)
      wbBookForPrint.Activate
      wsPrintSheet.Activate
      wsPrintSheet.cells.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
                                      SkipBlanks:=False, Transpose:=False
      wsPrintSheet.cells.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
                                      SkipBlanks:=False, Transpose:=False
      Application.CutCopyMode = True

''      AddErr "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|/"

      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      If wsPrintSheet.cells.FormatConditions.Count <> 0 Then _
         wsPrintSheet.cells.FormatConditions.Delete

      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      Set rngRange = wsPrintSheet.Range(wsPrintSheet.Range("A1"), ActiveCell.SpecialCells(xlLastCell))
      lngFirstRow = 1
      Set rngDeleteRange = Nothing
      For lngCounterRow = 1 To rngRange.Rows.Count
        Set rngCell = wsPrintSheet.cells(lngCounterRow, 1).EntireRow.cells
        If Application.CountA(rngCell) = 0 Or _
           rngCell.EntireRow.Hidden = True Then
          If Not rngDeleteRange Is Nothing Then
            Set rngDeleteRange = Union(rngDeleteRange, rngCell.EntireRow)
          Else
            Set rngDeleteRange = rngCell.EntireRow
          End If
        Else
          ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          If Not rngDeleteRange Is Nothing Then
            rngDeleteRange.EntireRow.Delete
          End If
          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          lngFirstRow = rngCell.EntireRow.Row
          Exit For
        End If
      Next lngCounterRow

      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      Set rngRange = wsPrintSheet.Range(wsPrintSheet.Range("A1"), ActiveCell.SpecialCells(xlLastCell))
      lngEndRow = ActiveCell.SpecialCells(xlLastCell).Row
      Set rngDeleteRange = Nothing
      For lngCounterRow = rngRange.Rows.Count To 1 Step -1
        Set rngCell = wsPrintSheet.cells(lngCounterRow, 1).EntireRow.cells
        If Application.CountA(rngCell) = 0 Or _
           rngCell.EntireRow.Hidden = True Then
          If Not rngDeleteRange Is Nothing Then
            Set rngDeleteRange = Union(rngDeleteRange, rngCell.EntireRow)
          Else
            Set rngDeleteRange = rngCell.EntireRow
          End If
        Else
          ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          If Not rngDeleteRange Is Nothing Then
            rngDeleteRange.EntireRow.Delete
          End If
          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          lngEndRow = rngCell.EntireRow.Row
          Exit For
        End If
      Next lngCounterRow

      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      Set rngRange = wsPrintSheet.Range(wsPrintSheet.Range("A1"), ActiveCell.SpecialCells(xlLastCell))
      lngFirstColumn = 1
      Set rngDeleteRange = Nothing
      For lngCounterColumn = 1 To rngRange.Columns.Count
        Set rngCell = wsPrintSheet.cells(1, lngCounterColumn).EntireColumn.cells
        If Application.CountA(rngCell) = 0 Or _
           rngCell.EntireColumn.Hidden = True Then
          If Not rngDeleteRange Is Nothing Then
            Set rngDeleteRange = Union(rngDeleteRange, rngCell.EntireColumn)
          Else
            Set rngDeleteRange = rngCell.EntireColumn
          End If
        Else
          ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          If Not rngDeleteRange Is Nothing Then
            rngDeleteRange.EntireColumn.Delete
          End If
          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          lngFirstColumn = rngCell.EntireColumn.Column
          Exit For
        End If
      Next lngCounterColumn

      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      Set rngRange = wsPrintSheet.Range(wsPrintSheet.Range("A1"), ActiveCell.SpecialCells(xlLastCell))
      lngEndColumn = ActiveCell.SpecialCells(xlLastCell).Column
      Set rngDeleteRange = Nothing
      For lngCounterColumn = rngRange.Columns.Count To 1 Step -1
        Set rngCell = wsPrintSheet.cells(1, lngCounterColumn).EntireColumn.cells
        If Application.CountA(rngCell) = 0 Or _
           rngCell.EntireColumn.Hidden = True Then
          If Not rngDeleteRange Is Nothing Then
            Set rngDeleteRange = Union(rngDeleteRange, rngCell.EntireColumn)
          Else
            Set rngDeleteRange = rngCell.EntireColumn
          End If
        Else
          ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          If Not rngDeleteRange Is Nothing Then
            rngDeleteRange.EntireColumn.Delete
          End If
          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          lngEndColumn = rngCell.EntireColumn.Column
          Exit For
        End If
      Next lngCounterColumn

      Set rngRange = wsPrintSheet.Range(wsPrintSheet.cells(lngFirstRow, lngFirstColumn), _
                                        wsPrintSheet.cells(lngEndRow, lngEndColumn))

''      rngRange.Select


      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
      ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| > |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| < |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If rngRange.Width > _
         rngRange.Height Then
        strOrientationPage = xlLandscape         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Else
        strOrientationPage = xlPortrait          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      End If

      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''      rngRange.Select
''      AddErr "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - " & rngRange.Address
      With wsPrintSheet.PageSetup
        .PrintArea = rngRange.Address
        .CenterFooter = strCenterFooter
        .Orientation = strOrientationPage
        .Zoom = False
        .FitToPagesWide = 1
        .FitToPagesTall = False
      End With

      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      wsPrintSheet.cells.Locked = True
      With wsPrintSheet.cells.Interior
        .Pattern = xlNone
        .ColorIndex = modDefine.colorWhite
      End With

      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Arial Narrow
      With wsPrintSheet.cells.Font
        .name = "Arial Narrow"
        .Size = 8
      End With

      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If modServiceModule.IsNameExists(wbBookTemplate, "flag_publication") Then
        If wsPrintSheet.name = gstrMainSheetName Then
          ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          Set rngCell = rngRange.Find("|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", LookAt:=xlWhole)
          If Not rngCell Is Nothing Then rngCell.Offset(0, 1).Font.name = "Marlett"
          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          Set rngCell = rngRange.Find("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", LookAt:=xlWhole)
          If Not rngCell Is Nothing Then rngCell.Offset(0, 1).Font.name = "Marlett"
          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          Set rngCell = rngRange.Find("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", LookAt:=xlWhole)
          If Not rngCell Is Nothing Then rngCell.Offset(0, 1).Font.name = "Marlett"
        End If
      End If

      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      For Each rngCell In rngRange
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...
        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If (InStr(1, rngCell.cells(1, 1).Value, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1) Or _
           (InStr(1, rngCell.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") = 1) Or _
           LCase(rngCell.cells(1, 1).Value) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Or _
           (InStr(1, rngCell.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1) Or _
           ((rngCell.cells(1, 1).Value = "|fffd|" And _
             rngCell.cells(1, 1).Value <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Or _
             InStr(1, rngCell.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1) Or _
             ((InStr(1, rngCell.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1 And _
               rngCell.cells(1, 1).Value <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Or _
               InStr(1, rngCell.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1) Or _
               (InStr(1, rngCell.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|") = 1) Or _
               (InStr(1, rngCell.cells(1, 1).Value, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1) Or _
               (InStr(1, rngCell.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd| ") = 1) Or _
               (rngCell.Font.ColorIndex = colorWhite) Then
          rngCell.cells(1, 1).Value = vbNullString
        End If

      Next rngCell


      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      DeleteEmptyRows rngRange
      DeleteEmptyColumns rngRange


      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      If rngRange Is Nothing Then GoTo LastStep
      rngRange.EntireColumn.AutoFit
      For Each rngCell In rngRange.Columns
        If rngCell.ColumnWidth > 35 Then rngCell.ColumnWidth = 35
      Next rngCell
      rngRange.EntireRow.AutoFit

      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 1 |fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd|)
      If rngRange Is Nothing Then GoTo LastStep
      For lngCounter = 1 To 2
        If lngCounter = 1 Or (lngCounter = 2 And wsTempSheet.name <> gstrMainSheetName) Then
          If rngRange.cells(lngCounter, 1).MergeArea.Columns.Count Then rngRange.cells(lngCounter, 1).MergeArea.UnMerge
          If Len(Trim(wsPrintSheet.Range("A" & lngCounter).Value)) <> 0 And _
             Len(Trim(wsPrintSheet.Range("B" & lngCounter).Value)) = 0 Then
            wsPrintSheet.Range("B" & lngCounter).Value = wsPrintSheet.Range("A" & lngCounter).Value
            wsPrintSheet.Range("A" & lngCounter).Value = vbNullString
          End If
        End If
      Next lngCounter

      If Application.CountA(rngRange.Columns(1)) = 0 Then
        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| nothing
        If rngRange.Columns.Count <> 1 Then
          wsPrintSheet.Columns(rngRange.Columns(1).cells(1, 1).Column).Delete
        Else
          wsPrintSheet.Columns(rngRange.Columns(1).cells(1, 1).Column).Delete
          Set rngRange = Nothing
        End If
      End If

      If rngRange Is Nothing Then GoTo LastStep
      For lngCounter = 1 To 2
        If lngCounter = 1 Or (lngCounter = 2 And wsTempSheet.name <> gstrMainSheetName) Then _
           rngRange.Rows(lngCounter).Merge
      Next lngCounter

LastStep:
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      Application.ScreenUpdating = True
      wsPrintSheet.Range("A1").Activate
      Application.ScreenUpdating = False
      wsPrintSheet.Protect Password:=gPASSWORD, DrawingObjects:=True, _
                           Contents:=True, Scenarios:=True, _
                           AllowFormattingColumns:=True, AllowFormattingRows:=True

      wbBookTemplate.Activate
      wsTempSheet.Range("A1").Activate
''      AddErr "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If

  Next wsTempSheet


  wbBookForPrint.Activate
  wbBookForPrint.Worksheets(1).Activate

  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  BreakLinksInActiveWorkbook wbBookForPrint

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  wbBookForPrint.Save
  Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
''  AddErr "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbInformation, _
            modGlobals.STR_MSGBOX_INFORMATION_TITLE
''
''  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
''  wbBookTemplate.Activate
''  wsActiveSheet.Activate
  
  Application.DisplayAlerts = True
  
  GoTo Success

Success:
  GoTo CleanUp
ErrHandler:
  wbThisWorkBook.Activate
  Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
''  AddErr "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - " & Err.Description
''  intErrCount = intErrCount + 1

    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbExclamation, _
            modGlobals.STR_MSGBOX_WARNING_TITLE
  GoTo CleanUp
CleanUp:
''  wbBookTemplate.Close False
''
''  Open ThisWorkbook.Path & "\log.txt" For Append As #1
''  If intErrCount = 0 Then
''    Print #1, Now, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
''  Else
''    Print #1, Now, "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
''  End If
''  Close #1
  Application.EnableEvents = True
  Application.DisplayAlerts = True

End Sub

Sub DeleteEmptyRows(ByVal rngWorkRange As Range)
    
    Dim LastRow As Integer
    Dim r As Integer
    Dim rngDeleteRange As Range
    Dim wsSheet As Worksheet
    
    Set wsSheet = rngWorkRange.parent
    Set rngDeleteRange = Nothing
    LastRow = rngWorkRange.cells(1, 1).Row + rngWorkRange.Rows.Count - 1
    Application.ScreenUpdating = False
    For r = LastRow To 1 Step -1
      If Application.CountA(wsSheet.Rows(r)) = 0 Or wsSheet.cells(r, 1).EntireRow.Hidden = True Then
        If rngDeleteRange Is Nothing Then
          Set rngDeleteRange = wsSheet.Rows(r)
        Else
          Set rngDeleteRange = Union(rngDeleteRange, _
                                     wsSheet.Rows(r))
        End If
      End If
    Next r
    
    If Not rngDeleteRange Is Nothing Then
      rngDeleteRange.Delete
    End If
    
End Sub

Sub DeleteEmptyColumns(ByVal rngWorkRange As Range)
    
    Dim LastColumn As Integer
    Dim r As Integer
    Dim rngDeleteRange As Range
    Dim wsSheet As Worksheet
    
    Set wsSheet = rngWorkRange.parent
    Set rngDeleteRange = Nothing
    LastColumn = rngWorkRange.cells(1, 1).Column + rngWorkRange.Columns.Count - 1
    Application.ScreenUpdating = False
    For r = LastColumn To 1 Step -1
      If Application.CountA(wsSheet.Columns(r)) = 0 Or wsSheet.cells(1, r).EntireColumn.Hidden = True Then
        If rngDeleteRange Is Nothing Then
          Set rngDeleteRange = wsSheet.Columns(r)
        Else
          Set rngDeleteRange = Union(rngDeleteRange, _
                                     wsSheet.Columns(r))
        End If
      End If
    Next r
    
    If Not rngDeleteRange Is Nothing Then
      rngDeleteRange.Delete
    End If
    
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MS Excel, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| strWbBookName |fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' strWbBookDirName. |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| True, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - False.
Public Function CreateXlBook(ByVal strWbBookName As String, _
                             ByVal strWbBookDirName As String) As Boolean

  ' MS Excel hidden instance
  Dim objXLApp As Object
  Dim wbBookNew As Workbook
  
  If Len(Trim(strWbBookName)) = 0 Or _
     Len(Trim(strWbBookDirName)) = 0 Then
    GoTo CleanUp
  End If

  CreateXlBook = False

''  Set objXLApp = New Application
''  If objXLApp Is Nothing Then GoTo cleanUp

  ' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  Application.SheetsInNewWorkbook = 1

  Set wbBookNew = Application.Workbooks.Add
  If wbBookNew Is Nothing Then GoTo CleanUp

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If vbNullString = Dir(strWbBookDirName, vbDirectory) Then GoTo CleanUp
  
  wbBookNew.SaveAs Filename:=strWbBookDirName & "\" & strWbBookName & ".xls", FileFormat:=ThisWorkbook.FileFormat
  
  CreateXlBook = True

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Set wbBookNew = Nothing
''  objXLApp.Quit
''  Set objXLApp = Nothing
  CreateXlBook = True
  
CleanUp:

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Shapes |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub UpdateFlagForPrintShapes(wbBook As Workbook)
  On Error Resume Next
  
  Dim wsSheet As Worksheet
  Dim shShape As Shape
  Dim strMsgSheets As String
  
  strMsgSheets = vbNullString
  
  For Each wsSheet In wbBook.Worksheets
    
    If wsSheet.name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
      wbBook.Worksheets(wsSheet.name).cmdOrganizationChoice.Delete
      wbBook.Worksheets(wsSheet.name).cmdUpdateReestrMO.Delete
    End If
    
    For Each shShape In wsSheet.Shapes
      If shShape.Type = msoPicture Then
        shShape.Delete
      End If
    Next shShape
    
  Next wsSheet

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub RemoveNamesInActiveWorkbook(wbBook As Workbook)

  Dim rngName As name

  For Each rngName In wbBook.Names
    rngName.Delete
  Next rngName
  
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub BreakLinksInActiveWorkbook(wbBook As Workbook)

  Dim astrLinks As Variant
  Dim lnk
  Dim intIndex As Integer
  
  astrLinks = wbBook.LinkSources(Type:=xlLinkTypeExcelLinks)
  
  If Not IsEmpty(astrLinks) Then
    For intIndex = 1 To UBound(astrLinks)
      wbBook.BreakLink name:=astrLinks(intIndex), Type:=xlLinkTypeExcelLinks
    Next intIndex
  End If
  
End Sub

Attribute VB_Name = "modList01"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public Sub Worksheet_Change_Handler(ByVal Target As Range)

  On Error GoTo ErrWsSheetChange

  Dim wbBook As Workbook
  Dim wsSheet As Worksheet

  Dim intRowHeight As Integer
  Dim intColorIndex As Integer
  Dim intColorIndexEtc As Integer

  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean
  Dim blnCellLocked As Boolean

  Dim rngCell As Range
  Dim rngRange As Range
  Dim rngHypRange As Range

  Dim ISect
  Dim ISectDate
  Dim ISectPDF

  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating

  If Target Is Nothing Then Exit Sub

  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
  
  If Target.cells(1, 1).Interior.ColorIndex = colorCyan Then
     
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
     
    If Target.MergeCells Then
      modServiceModule.AutoFitMergedCellRowHeight Target, 15
    Else
      Target.cells(1, 1).EntireRow.AutoFit
      intRowHeight = Target.cells(1, 1).RowHeight
      If intRowHeight < 15 Then Target.cells(1, 1).RowHeight = 15
    End If
    
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo CleanUp
  
  End If
  
  Exit Sub

ErrWsSheetChange:
  Debug.Print Err.Description
  GoTo CleanUp

CleanUp:
  Set wbBook = Nothing
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal

End Sub

Public Sub Worksheet_FollowHyperlink_Handler(ByVal Target As Hyperlink)

End Sub

Public Sub Worksheet_SelectionChange(ByVal Target As Range)
  Worksheet_Deactivate
End Sub

Public Sub Worksheet_Deactivate()
  If modScrolling.blnIs_UserForm_Loaded("frmSheetReference") = True Then
    Unload frmSheetReference
  End If
End Sub

Public Sub Worksheet_BeforeDoubleClick_Handler(ByVal Target As Range, Cancel As Boolean)
  Dim lngRow As Long, lngCol As Long, lngTemp As Long, intRowHeight  As Long
  Dim blnScreenUpdatingState As Boolean, blnEnableEventsState As Boolean
  Dim wsSheet As Worksheet
  Dim rngCell As Range, rngWorkRange As Range
  Dim strNameRange As String, strPreviousMRName As String
  Dim vbResult
  On Error GoTo ErrDblClick

  Set wsSheet = Target.parent
  lngRow = Target.Row
  lngCol = Target.Column
  blnScreenUpdatingState = Application.ScreenUpdating
  blnEnableEventsState = Application.EnableEvents

  If Not Application.Intersect(List01.Range("pIns_List01_1"), Target) Is Nothing Then
    Cancel = True
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.InsertRangeWithEt Target, "et_List01"
    GoTo EndDblClick
  ElseIf InStr(1, Target.cells(1, 1).Value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|") = 1 Then
    Cancel = True
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.InsertRangeWithEt Target, "et_List01_1", , 9
    GoTo EndDblClick
  ElseIf Target.cells(1, 1).Value = "|fffd|" And _
         Not Application.Intersect(List01.Range("pDel_List01_1"), Target) Is Nothing Then
    Cancel = True
    blnScreenUpdatingState = Application.ScreenUpdating
    blnEnableEventsState = Application.EnableEvents
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.DeleteRange Target, True, Target.Offset(0, 2).cells(1, 1).MergeArea.Rows.Count
    GoTo EndDblClick
  ElseIf Target.cells(1, 1).Value = "|fffd|" And _
         Not Application.Intersect(List01.Range("pDel_List01_2"), Target) Is Nothing Then
    Cancel = True
    blnScreenUpdatingState = Application.ScreenUpdating
    blnEnableEventsState = Application.EnableEvents
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.DeleteRange Target, False, , , -3
    GoTo EndDblClick

    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|
  ElseIf (Not Application.Intersect(Target.cells(1, 1), List01.Range("mr_List01")) Is Nothing Or _
          Not Application.Intersect(Target.cells(1, 1), List01.Range("mo_List01")) Is Nothing) And _
          Target.cells(1, 1).Interior.ColorIndex = colorLightBlue Then

    Cancel = True
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    modfrmReestrMR.STR_NAME_RANGE_REESTR_MR = vbNullString
    modfrmReestrMR.STR_NAME_REGION = vbNullString
    modfrmReestrMR.STR_NAME_RANGE_REGION = vbNullString

    modServiceModule.UNPROTECT_SHEET List01

    modfrmReestrMR.STR_NAME_RANGE_REESTR_MR = "LIST_MR_MO_OKTMO"
    modfrmReestrMR.STR_NAME_REGION = List01.parent.Names("region_name").RefersToRange.cells(1, 1).Value
    modfrmReestrMR.STR_NAME_RANGE_REGION = "region_name"

    modGlobals.STR_SHEET_SPR_MR_NAME = vbNullString
    If Not Application.Intersect(Target.cells(1, 1), List01.Range("mo_List01")) Is Nothing Then _
       modGlobals.STR_SHEET_SPR_MR_NAME = Target.cells(1, 1).Offset(0, -2).MergeArea.cells(1, 1).Value
       
    ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Not Application.Intersect(Target.cells(1, 1), List01.Range("mo_List01")) Is Nothing Then
      If Len(Trim(Target.cells(1, 1).Offset(0, -2).MergeArea.cells(1, 1).Value)) = 0 Then
        MsgBox "|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Target.cells(1, 1).Offset(0, -2).MergeArea.Select
        GoTo CleanUp
      End If
    End If
    
    frmReestrMR.Show vbModal

    If modGlobals.blnApplyFlag Then
      modServiceModule.UNPROTECT_SHEET List01

      ' |fffd||fffd||fffd||fffd| |fffd||fffd|
      If Not Application.Intersect(Target.cells(1, 1), List01.Range("mr_List01")) Is Nothing Then
        strPreviousMRName = Target.cells(1, 1).MergeArea.cells(1, 1).Value
        Target.cells(1, 1).MergeArea.cells(1, 1).Value = modGlobals.nameMR
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        CheckUniqueness Target.cells(1, 1), List01.Range("mr_List01"), , , False, _
                        "|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!"
        If strPreviousMRName <> modGlobals.nameMR Then
          If Len(Trim(modGlobals.strReason)) <> 0 Then
            If Len(Trim(strPreviousMRName)) = 0 Then
              MsgBox modGlobals.strReason & " |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd|"
              vbResult = vbYes
            Else
              vbResult = MsgBox(modGlobals.strReason & vbCrLf & _
                                "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| '|fffd||fffd|', |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!")
            End If
          Else
            If Len(Trim(strPreviousMRName)) <> 0 Then
              vbResult = MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|? |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!")
            Else
              vbResult = vbYes
            End If
          End If
        Else
          vbResult = vbNo
        End If

        If vbResult = vbYes Then
          If Len(Trim(modGlobals.strReason)) <> 0 Then
            Target.cells(1, 1).Value = vbNullString
          Else
            Target.cells(1, 1).MergeArea.cells(1, 1).Value = modGlobals.nameMR
          End If
          Set rngWorkRange = List01.Range(Target.cells(1, 1).Offset(0, 2), _
                                          Target.cells(Target.cells(1, 1).MergeArea.Rows.Count - 1, 1).Offset(0, 2))
          rngWorkRange.Value = vbNullString
          rngWorkRange.Offset(0, 1).Value = vbNullString
        Else
          Target.cells(1, 1).MergeArea.cells(1, 1).Value = strPreviousMRName
        End If

        If Len(Trim(modGlobals.strReason)) = 0 And _
           strPreviousMRName <> modGlobals.nameMR Then
          Target.cells(1, 1).Offset(0, 2).Value = modGlobals.nameMO
          Target.cells(1, 1).Offset(0, 3).Value = modGlobals.nameOKTMO
        End If
      Else
        Target.cells(1, 1).Offset(0, -2).MergeArea.cells(1, 1).Value = modGlobals.nameMR
        Target.cells(1, 1).Value = modGlobals.nameMO
        Target.cells(1, 1).Offset(0, 1).Value = modGlobals.nameOKTMO
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        CheckUniqueness Target, Target.Offset(0, -2).cells(1, 1).MergeArea, , , , _
                        "|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!"
        If Len(Trim(modGlobals.strReason)) <> 0 Then
          Target.cells(1, 1).Value = vbNullString
          Target.cells(1, 1).Offset(0, 1).Value = vbNullString
        End If
      End If
    End If
    GoTo NextCheck

  End If

NextCheck:
  If Target.cells(1, 1).Interior.ColorIndex = colorLightBlue Or _
     Target.cells(1, 1).Interior.ColorIndex = colorCyan Or _
     Target.cells(1, 1).Interior.ColorIndex = colorYellow Then
     
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
     
    If Target.MergeCells Then
      modServiceModule.AutoFitMergedCellRowHeight Target, 15
    Else
      Target.cells(1, 1).EntireRow.AutoFit
      intRowHeight = Target.cells(1, 1).RowHeight
      If intRowHeight < 15 Then Target.cells(1, 1).RowHeight = 15
    End If
    GoTo EndDblClick
  End If

  Exit Sub

ErrDblClick:
  MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical

EndDblClick:
  wsSheet.Activate
  wsSheet.cells(lngRow, lngCol).Select
CleanUp:
  modServiceModule.PROTECT_SHEET wsSheet, True
  Application.EnableEvents = blnEnableEventsState
  Application.ScreenUpdating = blnScreenUpdatingState
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' Target - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' rngCheckRange - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' lngShiftRight - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
' lngShiftRight - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
' blnIsShowMsgBox - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| MsgBox (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public Function CheckUniqueness(ByRef Target As Range, _
                                ByRef rngCheckRange As Range, _
                                Optional ByVal lngShiftLeft As Long = 0, _
                                Optional ByVal lngShiftRight As Long = 0, _
                                Optional ByVal blnIsShowMsgBox As Boolean = True, _
                                Optional ByVal strNameColumn As String = vbNullString)
  Dim rngCell As Range
  Dim lngCount As Long
  Dim strOneCell As String, strTwoCell As String

  modGlobals.strReason = vbNullString
  Set modGlobals.rngNotUniqueRange = Nothing
  strOneCell = vbNullString
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For lngCount = lngShiftLeft To lngShiftRight
    strOneCell = strOneCell & Target.cells(1, 1).Offset(0, lngCount).Value
  Next lngCount

  If Len(Trim(Target.cells(1, 1).Value)) <> 0 And Target.cells(1, 1).Value <> "Cells" Then
    For Each rngCell In Application.Intersect(rngCheckRange.EntireRow, Target.EntireColumn).cells
      strTwoCell = vbNullString
      For lngCount = lngShiftLeft To lngShiftRight
        If Len(Trim(rngCell.cells(1, 1).Offset(0, lngCount).Value)) = 0 Then GoTo NextCheck
        strTwoCell = strTwoCell & rngCell.cells(1, 1).Offset(0, lngCount).Value
      Next lngCount

      If strOneCell = strTwoCell And _
         rngCell.Row <> Target.Row Then
        modGlobals.strReason = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
        Set modGlobals.rngNotUniqueRange = rngCell.parent.Range(rngCell.Offset(0, lngShiftLeft), rngCell.Offset(0, lngShiftRight))
        If blnIsShowMsgBox Then
          If Len(Trim(strNameColumn)) <> 0 Then
            modGlobals.strReason = strNameColumn
          Else
            modGlobals.strReason = modGlobals.strReason & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & _
                                   modGlobals.rngNotUniqueRange.Address & _
                                   " |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
          End If
          MsgBox modGlobals.strReason, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd|"
          Target.cells(1, 1).Value = vbNullString
        End If
      End If
NextCheck:
    Next rngCell
  End If
End Function

Attribute VB_Name = "modList02"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public Sub Worksheet_Change_Handler(ByVal Target As Range)

  On Error GoTo ErrWsTitleChange

  Dim wbBook As Workbook
  Dim wsSheet As Worksheet

  Dim intRowHeight As Integer
  Dim intColorIndex As Integer
  Dim intColorIndexEtc As Integer

  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean
  Dim blnCellLocked As Boolean

  Dim rngCell As Range
  Dim rngRange As Range
  Dim rngHypRange As Range

  Dim ISect
  Dim ISectDate
  Dim ISectPDF

  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating

  If Target Is Nothing Then Exit Sub

  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent

  If modServiceModule.IsNameExists(wsSheet.parent, "data_" & wsSheet.CodeName & "_1") = False Or _
     modServiceModule.IsNameExists(wsSheet.parent, wsSheet.CodeName & "_GroundMaterials") = False Or _
     modServiceModule.IsNameExists(wsSheet.parent, wsSheet.CodeName & "_web_p_1_5") = False Or _
     modServiceModule.IsNameExists(wsSheet.parent, wsSheet.CodeName & "_p_1_5") = False Or _
     modServiceModule.IsNameExists(wsSheet.parent, wsSheet.CodeName & "_p_2") = False Then Exit Sub
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not Application.Intersect(Target, wsSheet.Range("List02_GroundMaterials")) Is Nothing And _
     Len(Trim(Target.cells(1, 1).Value)) <> 0 Then

    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet

    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Target.cells(1, 1).Value = Replace(Target.cells(1, 1).Value, " ", "")
    Set rngHypRange = Target.cells(1, 1)

    If rngHypRange.Interior.ColorIndex = colorCyan Or rngHypRange.Interior.ColorIndex = colorYellow Then
      If Not ((InStr(rngHypRange.Value, "https://eias.fstrf.ru/disclo/get_file?p_guid=") = 1 And Len(rngHypRange.Value) = 81) Or _
              (InStr(rngHypRange.Value, "https://tariff.eias.ru/disclo/get_file?p_guid=") = 1 And Len(rngHypRange.Value) = 82)) Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbCrLf & _
               "  'https://eias.fstrf.ru/disclo/get_file?p_guid=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX'" & vbCrLf & _
               "|fffd||fffd||fffd|" & _
               "  'https://tariff.eias.ru/disclo/get_file?p_guid=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX'" & vbCrLf & _
               "(|fffd||fffd|. |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd|.'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|')", _
               vbCritical, _
               STR_MSGBOX_WARNING_TITLE
        rngHypRange.cells(1, 1).Value = vbNullString
      Else
        wsSheet.Hyperlinks.Add Anchor:=rngHypRange, _
                               Address:="", _
                               SubAddress:=Chr(39) & wsSheet.name & Chr(39) & "!" & _
                                           rngHypRange.Address, _
                               TextToDisplay:=CStr(rngHypRange.Value), _
                               ScreenTip:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|"
        rngHypRange.Font.name = "Tahoma"
        rngHypRange.Font.Size = 9
      End If
    End If
  
  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ElseIf Not Application.Intersect(Target, wsSheet.Range("data_" & wsSheet.CodeName & "_1")) Is Nothing And _
         Target.cells(1, 1).Interior.ColorIndex = colorCyan Then

    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|)", |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If Application.WorksheetFunction.CountIf(wsSheet.Range("data_" & wsSheet.CodeName & "_1"), "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|") > 0 Or _
       Application.WorksheetFunction.CountIf(wsSheet.Range("data_" & wsSheet.CodeName & "_1"), "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") > 0 Or _
       Application.WorksheetFunction.CountIf(wsSheet.Range("data_" & wsSheet.CodeName & "_1"), "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") > 0 Then
      If wsSheet.Range(wsSheet.CodeName & "_p_1_5").Interior.ColorIndex <> colorCyan And _
         wsSheet.Range(wsSheet.CodeName & "_p_1_5").Interior.ColorIndex <> colorYellow Then
        wsSheet.Range(wsSheet.CodeName & "_p_1_5").EntireRow.Hidden = False
        Union(wsSheet.Range(wsSheet.CodeName & "_p_1_5"), _
              wsSheet.Range(wsSheet.CodeName & "_p_1_5").cells(1, 2).Offset(0, 1)).Locked = False
        wsSheet.Range(wsSheet.CodeName & "_p_1_5").Interior.ColorIndex = colorCyan
        wsSheet.Range(wsSheet.CodeName & "_p_1_5").cells(1, 2).Offset(0, 1).Interior.ColorIndex = colorYellow
        wsSheet.Shapes("ExcludeHelp_3").Visible = msoTrue
        wsSheet.Shapes("ExcludeHelp_3").Width = wsSheet.Shapes("ExcludeHelp_2").Width
        wsSheet.Shapes("ExcludeHelp_3").Height = wsSheet.Shapes("ExcludeHelp_2").Height
        wsSheet.Shapes("ExcludeHelp_3").Top = wsSheet.Range(wsSheet.CodeName & "_p_1_5").cells(1, 1).Top
        wsSheet.Shapes("ExcludeHelp_3").Left = wsSheet.Range(wsSheet.CodeName & "_p_1_5").cells(1, 1).Left - _
                                               wsSheet.Shapes("ExcludeHelp_3").Width
      End If
    Else
      wsSheet.Range(wsSheet.CodeName & "_p_1_5").EntireRow.Hidden = True
      Union(wsSheet.Range(wsSheet.CodeName & "_p_1_5"), _
            wsSheet.Range(wsSheet.CodeName & "_p_1_5").cells(1, 2).Offset(0, 1)).Locked = True
      Union(wsSheet.Range(wsSheet.CodeName & "_p_1_5"), _
            wsSheet.Range(wsSheet.CodeName & "_p_1_5").cells(1, 2).Offset(0, 1)).Interior.ColorIndex = colorWhite
      Union(wsSheet.Range(wsSheet.CodeName & "_p_1_5"), _
            wsSheet.Range(wsSheet.CodeName & "_p_1_5").cells(1, 2).Offset(0, 1)).Value = vbNullString
      wsSheet.Shapes("ExcludeHelp_3").Visible = msoFalse
    End If
  
  ' website
  ElseIf Not (Application.Intersect(Target, wsSheet.Range(wsSheet.CodeName & "_web_p_1_5").cells(1, 1)) Is Nothing) And _
         (Target.cells(1, 1).Interior.ColorIndex = colorCyan Or Target.cells(1, 1).Interior.ColorIndex = colorYellow) And _
         Len(Trim(Target.cells(1, 1).Value)) <> 0 Then

    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Target.cells(1, 1).Value = Replace(Target.cells(1, 1).Value, " ", "")
    Set rngHypRange = Target.cells(1, 1)

    wsSheet.Hyperlinks.Add Anchor:=rngHypRange, _
                           Address:="", _
                           SubAddress:=Chr(39) & wsSheet.name & Chr(39) & "!" & _
                                       rngHypRange.Address, _
                           TextToDisplay:=rngHypRange.Value, _
                           ScreenTip:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|"
    rngHypRange.Font.name = "Tahoma"
    rngHypRange.Font.Size = 9
  
  End If

  ' |fffd|.1.5 |fffd| |fffd|.2 |fffd||fffd||fffd||fffd| |fffd||fffd| 1 |fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not Application.Intersect(Target, wsSheet.Range(wsSheet.CodeName & "_p_1_5")) Is Nothing Or _
     (Target.Row >= wsSheet.Range(wsSheet.CodeName & "_p_2").cells(1, 1).Row And _
      Target.Row < wsSheet.Range("pIns_" & wsSheet.CodeName & "_5").cells(1, 1).Row) Then

    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Not Application.Intersect(Target, wsSheet.Range(wsSheet.CodeName & "_p_1_5")) Is Nothing Then
      Set rngRange = wsSheet.Range(wsSheet.CodeName & "_p_1_5")
''    ElseIf Not Application.Intersect(Target, wsSheet.Range(wsSheet.CodeName & "_p_2").Rows(1)) Is Nothing Then
''      Set rngRange = wsSheet.Range(wsSheet.CodeName & "_p_2").Rows(1)
''    ElseIf Not Application.Intersect(Target, wsSheet.Range(wsSheet.CodeName & "_p_2").Rows(2)) Is Nothing Then
''      Set rngRange = wsSheet.Range(wsSheet.CodeName & "_p_2").Rows(2)
    Else
      Set rngRange = wsSheet.Range(wsSheet.cells(Target.Row, wsSheet.Range(wsSheet.CodeName & "_p_2").cells(1, 1).Column), _
                                   wsSheet.cells(Target.Row, wsSheet.Range(wsSheet.CodeName & "_p_2").cells(1, 2).Column))
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Len(Trim(rngRange.cells(1, 1))) <> 0 Then
      rngRange.cells(1, 1).Interior.ColorIndex = colorCyan
      If Len(Trim(rngRange.cells(1, 2))) <> 0 Then
        rngRange.cells(1, 2).Interior.ColorIndex = colorCyan
      Else
        rngRange.cells(1, 2).Interior.ColorIndex = colorYellow
      End If
    Else
      If Len(Trim(rngRange.cells(1, 2))) <> 0 Then
        rngRange.cells(1, 2).Interior.ColorIndex = colorCyan
        rngRange.cells(1, 1).Interior.ColorIndex = colorYellow
      Else
        rngRange.cells(1, 2).Interior.ColorIndex = colorCyan
        rngRange.cells(1, 1).Interior.ColorIndex = colorCyan
      End If
    End If
  End If

  If Target.cells(1, 1).Interior.ColorIndex = colorCyan Or _
     Target.cells(1, 1).Interior.ColorIndex = colorYellow Then
       Application.EnableEvents = False
       Application.ScreenUpdating = False
       modServiceModule.UNPROTECT_SHEET wsSheet
       modServiceModule.AutoFitMergedCellRowHeight Target, 19.5
       GoTo CleanUp
  End If

  Exit Sub

ErrWsTitleChange:
  Debug.Print Err.Description
  GoTo CleanUp

CleanUp:
  If Not wsSheet Is Nothing Then
    wsSheet.Activate
    modServiceModule.PROTECT_SHEET wsSheet, True
  End If
  Set wbBook = Nothing
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal
End Sub

Public Sub Worksheet_FollowHyperlink_Handler(ByVal Target As Hyperlink)

  On Error GoTo ErrHandler

  Dim intDeleteColumnNumber As Integer  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strRangeName As String            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim strDeleteString As String         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strGoToAddress As String
  Dim intRenumberColumnOffset As String  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                         ' (0, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)

  Dim intNumColumn As Integer
  Dim intNumRow As Integer

  Dim ISect
  Dim wsSheet As Worksheet

  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Application
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  blnValueEnableEventsLocal = Application.EnableEvents

  intNumColumn = Target.Range.cells(1, 1).Column
  intNumRow = Target.Range.cells(1, 1).Row
  
  Set wsSheet = Target.Range.parent

  If modServiceModule.IsNameExists(ThisWorkbook, wsSheet.CodeName & "_GroundMaterials") = False Or _
     modServiceModule.IsNameExists(ThisWorkbook, wsSheet.CodeName & "_web_p_1_5") = False Then _
     GoTo CleanUp

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not (Application.Intersect(Target.Range, Union(wsSheet.Range(wsSheet.CodeName & "_GroundMaterials"), _
                                                    wsSheet.Range(wsSheet.CodeName & "_web_p_1_5"))) Is Nothing) Then

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    modServiceModule.UNPROTECT_SHEET wsSheet

    If MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd|"") |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd|"")?", _
              vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd|!") = vbYes Then
      strGoToAddress = Target.Range.cells(1, 1).Value
      If InStr(strGoToAddress, "www") = 0 And InStr(strGoToAddress, "http") = 0 And InStr(strGoToAddress, "ftp") = 0 Then strGoToAddress = "www." & strGoToAddress
      If InStr(strGoToAddress, "www") <> 0 And InStr(strGoToAddress, "http") = 0 And InStr(strGoToAddress, "ftp") = 0 Then strGoToAddress = "http://" & strGoToAddress
      Target.Range.parent.parent.FollowHyperlink strGoToAddress
    Else
      Application.SendKeys ("{F2}")  'vbKeyF2
    End If
  End If

  GoTo CleanUp

ErrHandler:
  MsgBox Err.Description, vbOKOnly, wsSheet.name
  GoTo CleanUp

CleanUp:
  wsSheet.Activate
  modServiceModule.PROTECT_SHEET wsSheet, True
  Application.ScreenUpdating = blnValueScreenUpdatingLocal
  Application.EnableEvents = blnValueEnableEventsLocal

  Application.CutCopyMode = True
  If intNumRow > 0 And intNumColumn > 0 Then
    wsSheet.Activate
    wsSheet.cells(intNumRow, intNumColumn).Select
  End If

End Sub

Public Sub Worksheet_SelectionChange(ByVal Target As Range)
  Worksheet_Deactivate
End Sub

Public Sub Worksheet_Deactivate()
  If modScrolling.blnIs_UserForm_Loaded("frmSheetReference") = True Then
    Unload frmSheetReference
  End If
End Sub

Public Sub Worksheet_BeforeDoubleClick_Handler(ByVal Target As Range, _
                                               Cancel As Boolean, _
                                               Optional ByVal blnLatentAddition As Boolean = False)
  Dim lngRow As Long, lngCol As Long
  Dim blnScreenUpdatingState As Boolean, blnEnableEventsState As Boolean
  Dim wsSheet As Worksheet
  Dim rngUnionRange As Range
  On Error GoTo ErrDblClick

  Set wsSheet = Target.parent
  lngRow = Target.Row
  lngCol = Target.Column
  
  If gblnTestMode Then _
    blnLatentAddition = True
  
  If Not Application.Intersect(List02.Range("pIns_List02_1"), Target) Is Nothing And _
    blnLatentAddition = True Then                                                           ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Cancel = True
    blnScreenUpdatingState = Application.ScreenUpdating
    blnEnableEventsState = Application.EnableEvents
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.InsertRangeWithEt Target, "et_List02_1", True, 2, , IIf(List02.Range("pDel_List02_1").Rows.Count > 2, True, False)
    If List02.Range("pDel_List02_1").Rows.Count = 3 Then List02.Range("pIns_List02_1").Offset(-1, -1).Value = "1.2.1"
    GoTo EndDblClick
  ElseIf Target.cells(1, 1).Value = "|fffd|" And _
         Not Application.Intersect(List02.Range("pDel_List02_1").Offset(0, -1), Target) Is Nothing And _
         blnLatentAddition = True Then                                                      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Cancel = True
    blnScreenUpdatingState = Application.ScreenUpdating
    blnEnableEventsState = Application.EnableEvents
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.DeleteRange Target, False, , , 2
    GoTo EndDblClick
  ElseIf Not Application.Intersect(List02.Range("pIns_List02_2"), Target) Is Nothing And _
    blnLatentAddition = True Then                                                           ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Cancel = True
    blnScreenUpdatingState = Application.ScreenUpdating
    blnEnableEventsState = Application.EnableEvents
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.InsertRangeWithEt Target, "et_List02_2", True, 2, , IIf(List02.Range("pDel_List02_2").Rows.Count > 2, True, False), -4
    If List02.Range("pDel_List02_2").Rows.Count = 5 Then List02.Range("pIns_List02_2").Offset(-3, -4).Value = "1.3.1"
    GoTo EndDblClick
  ElseIf Target.cells(1, 1).Value = "|fffd|" And _
         Not Application.Intersect(List02.Range("pDel_List02_2").Offset(0, -1), Target) Is Nothing And _
         blnLatentAddition = True Then                                                      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Cancel = True
    blnScreenUpdatingState = Application.ScreenUpdating
    blnEnableEventsState = Application.EnableEvents
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.DeleteRange Target, True, ThisWorkbook.Names("et_List02_2").RefersToRange.Rows.Count, , 2
    GoTo EndDblClick
  ElseIf Not Application.Intersect(List02.Range("pIns_List02_3"), Target) Is Nothing And _
    blnLatentAddition = True Then                                                           ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    Cancel = True
    blnScreenUpdatingState = Application.ScreenUpdating
    blnEnableEventsState = Application.EnableEvents
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.InsertRangeWithEt Target, "et_List02_3", True, 2, , IIf(List02.Range("pDel_List02_3").Rows.Count > 2, True, False)
    If List02.Range("pDel_List02_3").Rows.Count = 3 Then List02.Range("pIns_List02_3").Offset(-1, -1).Value = "1.6.1"
    GoTo EndDblClick
  ElseIf Target.cells(1, 1).Value = "|fffd|" And _
         Not Application.Intersect(List02.Range("pDel_List02_3").Offset(0, -1), Target) Is Nothing And _
         blnLatentAddition = True Then                                                      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    Cancel = True
    blnScreenUpdatingState = Application.ScreenUpdating
    blnEnableEventsState = Application.EnableEvents
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.DeleteRange Target, False, , , 2
    GoTo EndDblClick
  ElseIf Not Application.Intersect(List02.Range("pIns_List02_4"), Target) Is Nothing And _
    blnLatentAddition = True Then                                                           ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Cancel = True
    blnScreenUpdatingState = Application.ScreenUpdating
    blnEnableEventsState = Application.EnableEvents
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.InsertRangeWithEt Target, "et_List02_4", True, 2, , IIf(List02.Range("pDel_List02_4").Rows.Count > 2, True, False)
    If List02.Range("pDel_List02_4").Rows.Count = 3 Then List02.Range("pIns_List02_4").Offset(-1, -1).Value = "1.7.1"
    GoTo EndDblClick
  ElseIf Target.cells(1, 1).Value = "|fffd|" And _
         Not Application.Intersect(List02.Range("pDel_List02_4").Offset(0, -1), Target) Is Nothing And _
         blnLatentAddition = True Then                                                      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Cancel = True
    blnScreenUpdatingState = Application.ScreenUpdating
    blnEnableEventsState = Application.EnableEvents
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.DeleteRange Target, False, , , 2
    GoTo EndDblClick
  ElseIf Not Application.Intersect(List02.Range("pIns_List02_5"), Target) Is Nothing Then       ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Cancel = True
    blnScreenUpdatingState = Application.ScreenUpdating
    blnEnableEventsState = Application.EnableEvents
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.InsertRangeWithEt Target, "et_List02_5", , 3, IIf(List02.Range("pDel_List02_5").Rows.Count > 2, True, False)
    If List02.Range("pDel_List02_5").Rows.Count = 3 Then List02.Range("pIns_List02_5").Offset(-1, -1).Value = "3"
    GoTo EndDblClick
  ElseIf Target.cells(1, 1).Value = "|fffd|" And _
         Not Application.Intersect(List02.Range("pDel_List02_5"), Target) Is Nothing Then   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Cancel = True
    blnScreenUpdatingState = Application.ScreenUpdating
    blnEnableEventsState = Application.EnableEvents
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.DeleteRange Target, False
    GoTo EndDblClick
  End If

  Exit Sub
  
ErrDblClick:
  MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical

EndDblClick:
  wsSheet.Activate
  modServiceModule.PROTECT_SHEET wsSheet, True
  wsSheet.cells(lngRow, lngCol).Select
  Application.EnableEvents = blnEnableEventsState
  Application.ScreenUpdating = blnScreenUpdatingState
End Sub

Attribute VB_Name = "modList03"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public Sub Worksheet_Change_Handler(ByVal Target As Range)

  On Error GoTo ErrWsTitleChange

  Dim wbBook As Workbook
  Dim wsSheet As Worksheet

  Dim intRowHeight As Integer
  Dim intColorIndex As Integer
  Dim intColorIndexEtc As Integer

  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean
  Dim blnCellLocked As Boolean

  Dim rngCell As Range, rngRange As Range, rngHypRange As Range
  Dim rngVisibleRange As Range, rngHiddenRange As Range

  Dim ISect
  Dim ISectDate
  Dim ISectPDF

  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating

  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent

  ' website
  Set ISect = Application.Intersect(Target, wsSheet.Range("Website_address_internet"))
  If Not ISect Is Nothing And _
     Len(Trim(Target.cells(1, 1).Value)) <> 0 Then

    Application.EnableEvents = False
    Application.ScreenUpdating = False

    modServiceModule.UNPROTECT_SHEET wsSheet
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Target.cells(1, 1).Value = Replace(Target.cells(1, 1).Value, " ", "")
    Set rngHypRange = Target.cells(1, 1)

    If rngHypRange.Interior.ColorIndex = colorCyan Or rngHypRange.Interior.ColorIndex = colorYellow Then
      wsSheet.Hyperlinks.Add Anchor:=rngHypRange, _
                             Address:="", _
                             SubAddress:=Chr(39) & wsSheet.name & Chr(39) & "!" & _
                                         rngHypRange.Address, _
                             TextToDisplay:=rngHypRange.Value, _
                             ScreenTip:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|"
      rngHypRange.Font.name = "Tahoma"
      rngHypRange.Font.Size = 9
    End If
  End If

  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set ISect = Application.Intersect(Target, wsSheet.Range("Date_of_publication_ref"))
  If Not ISect Is Nothing And _
     Target.cells(1, 1).Interior.ColorIndex = colorLightBlue Then

    Application.EnableEvents = False
    Application.ScreenUpdating = False

    modServiceModule.UNPROTECT_SHEET wsSheet

    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Len(Trim(Target.cells(1, 1).Value)) <> 0 And IsDate(Target.cells(1, 1).Value) Then
      Target.cells(1, 1).Value = _
        IIf(Len(Day(Target.cells(1, 1).Value)) = 1, "0", vbNullString) & Day(Target.cells(1, 1).Value) & "." & _
        IIf(Len(Month(Target.cells(1, 1).Value)) = 1, "0", vbNullString) & Month(Target.cells(1, 1).Value) & "." & _
        Year(Target.cells(1, 1).Value)
    ElseIf Len(Trim(Target.cells(1, 1).Value)) <> 0 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - '|fffd||fffd|.|fffd||fffd|.|fffd||fffd||fffd||fffd|'", _
               vbCritical, _
               STR_MSGBOX_WARNING_TITLE
      Target.cells(1, 1).Value = vbNullString
    End If
  
  End If

  If Target.cells(1, 1).Interior.ColorIndex = colorLightBlue Or _
     Target.cells(1, 1).Interior.ColorIndex = colorCyan Or _
     Target.cells(1, 1).Interior.ColorIndex = colorYellow Then
    modServiceModule.UNPROTECT_SHEET wsSheet
    modServiceModule.AutoFitMergedCellRowHeight Target, 15
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo CleanUp
  End If
  
  Exit Sub

ErrWsTitleChange:
  Debug.Print Err.Description
  GoTo CleanUp

CleanUp:
  Set wbBook = Nothing
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal

End Sub

Public Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)

  On Error GoTo ErrHandler

  Dim intDeleteColumnNumber As Integer  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strRangeName As String            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim strDeleteString As String         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strGoToAddress As String
  Dim intRenumberColumnOffset As String  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                         ' (0, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)

  Dim intNumColumn As Integer
  Dim intNumRow As Integer

  Dim ISect
  Dim wsSheet As Worksheet

  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Application
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  blnValueEnableEventsLocal = Application.EnableEvents

  intNumColumn = Target.Range.cells(1, 1).Column
  intNumRow = Target.Range.cells(1, 1).Row
  
  Set wsSheet = Target.Range.parent

  If modServiceModule.IsNameExists(ThisWorkbook, "Website_address_internet") = False Then _
     GoTo CleanUp

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not (Application.Intersect(Target.Range, wsSheet.Range("Website_address_internet")) Is Nothing) Then

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    modServiceModule.UNPROTECT_SHEET wsSheet

    If MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd|"") |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd|"")?", _
              vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd|!") = vbYes Then
      strGoToAddress = Target.Range.cells(1, 1).Value
      If InStr(strGoToAddress, "www") = 0 And InStr(strGoToAddress, "http") = 0 And InStr(strGoToAddress, "ftp") = 0 Then strGoToAddress = "www." & strGoToAddress
      If InStr(strGoToAddress, "www") <> 0 And InStr(strGoToAddress, "http") = 0 And InStr(strGoToAddress, "ftp") = 0 Then strGoToAddress = "http://" & strGoToAddress
      Target.Range.parent.parent.FollowHyperlink strGoToAddress
    Else
      Application.SendKeys ("{F2}")  'vbKeyF2
    End If
  End If

  GoTo CleanUp

ErrHandler:
  MsgBox Err.Description, vbOKOnly, wsSheet.name
  GoTo CleanUp

CleanUp:
  wsSheet.Activate
  modServiceModule.PROTECT_SHEET wsSheet, True
  Application.ScreenUpdating = blnValueScreenUpdatingLocal
  Application.EnableEvents = blnValueEnableEventsLocal

  Application.CutCopyMode = True
  If intNumRow > 0 And intNumColumn > 0 Then
    wsSheet.Activate
    wsSheet.cells(intNumRow, intNumColumn).Select
  End If

End Sub

Public Sub Worksheet_SelectionChange(ByVal Target As Range)
  On Error Resume Next
  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  If (Not Application.Intersect(Target, Target.parent.Range("Date_of_publication_ref")) Is Nothing) And _
     Target.cells(1, 1).Interior.ColorIndex = colorLightBlue Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    modServiceModule.PROTECT_SHEET Target.parent, False
    List03.Shapes("shCalendar").Top = Target.Top
    List03.Shapes("shCalendar").Left = Target.Left + Target.Width + 3
    List03.Shapes("shCalendar").Height = 15
    List03.Shapes("shCalendar").Width = 15
    List03.Shapes("shCalendar").Visible = msoTrue
    modServiceModule.PROTECT_SHEET Target.parent
  Else
    List03.Shapes("shCalendar").Visible = msoFalse
  End If
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Worksheet_Deactivate
End Sub

Public Sub Worksheet_Deactivate()
  If modScrolling.blnIs_UserForm_Loaded("frmSheetReference") = True Then
    Unload frmSheetReference
  End If
End Sub

Public Sub Worksheet_BeforeDoubleClick_Handler(ByVal Target As Range, _
                                               Cancel As Boolean)
  Dim lngRow As Long, lngCol As Long
  Dim blnScreenUpdatingState As Boolean, blnEnableEventsState As Boolean
  Dim wsSheet As Worksheet
  On Error GoTo ErrDblClick

  Set wsSheet = Target.parent
  lngRow = Target.Row
  lngCol = Target.Column

  If modServiceModule.IsNameExists(wsSheet.parent, "Date_of_publication_ref") = False Or _
     modServiceModule.IsNameExists(wsSheet.parent, "pIns_List03") = False Or _
     modServiceModule.IsNameExists(wsSheet.parent, "pDel_List03") = False Or _
     modServiceModule.IsNameExists(wsSheet.parent, "et_List03") = False Then
    GoTo ErrDblClick
  End If

  If Not Application.Intersect(List03.Range("pIns_List03"), Target) Is Nothing Then
    Cancel = True
    blnScreenUpdatingState = Application.ScreenUpdating
    blnEnableEventsState = Application.EnableEvents
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.InsertRangeWithEt Target, "et_List03", True, 3, , , -4
    GoTo EndDblClick
  ElseIf Target.cells(1, 1).Value = "|fffd|" And _
         Not Application.Intersect(List03.Range("pDel_List03"), Target) Is Nothing Then
    Cancel = True
    blnScreenUpdatingState = Application.ScreenUpdating
    blnEnableEventsState = Application.EnableEvents
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    modHyp.DeleteRange Target, True, wsSheet.parent.Names("et_List03").RefersToRange.Rows.Count, , -2
    GoTo EndDblClick
  End If

  Exit Sub
ErrDblClick:
  MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical

EndDblClick:
  List00.Activate
  modServiceModule.PROTECT_SHEET List00, True
  wsSheet.Activate
  modServiceModule.PROTECT_SHEET wsSheet, True
  wsSheet.cells(lngRow, lngCol).Select
  Application.EnableEvents = blnEnableEventsState
  Application.ScreenUpdating = blnScreenUpdatingState
End Sub

Attribute VB_Name = "modProv"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Base 1
Option Explicit
Dim blnFillTemplate 'false |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private NUM_ROW_PR As Integer

Private Const KIND_ERROR As String = "|fffd||fffd||fffd||fffd||fffd||fffd|"
Private Const KIND_WARNING As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
''
''Public blnCheckHyperlinks As Boolean

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub WarningsBeforeSaving(wbBook As Workbook)

  Dim wsCheckSheet As Worksheet
  Dim intStartRow As Integer
  Dim intKUSheetsCount As Integer

  On Error GoTo ErrHandler
  ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not (modServiceModule.SheetExists(gstrCheckSheetName, wbBook)) Then
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|? |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ;)
    modServiceModule.CreateCheckSheet wbBook, gstrCheckSheetName
  End If

  Set wsCheckSheet = wbBook.Sheets(gstrCheckSheetName)

  Dim rngTempRange As Range

  modServiceModule.UNPROTECT_SHEET wsCheckSheet
  wsCheckSheet.AutoFilterMode = False
  wsCheckSheet.Range(wsCheckSheet.Rows(5), wsCheckSheet.Rows(wsCheckSheet.UsedRange.Rows.Count + 14)).Delete
  With wsCheckSheet.Range("B4:D4").Borders(xlEdgeBottom)
    .LineStyle = xlDouble
    .ColorIndex = 48
  End With
  wsCheckSheet.Range("B4:D4").AutoFilter

  modGlobals.glngCriticalImpactWarningsCounter = 0
  modGlobals.glngLowImpactWarningsCounter = 0
  blnFillTemplate = False
''  blnCheckHyperlinks = True
  NUM_ROW_PR = 5

  wbBook.Application.ScreenUpdating = False

  If blnCheckIfSheet(wsCheckSheet) Then
    WarningsBeforeSavingForTitle wbBook.Worksheets(gstrMainSheetName), wsCheckSheet
    CheckDateCells "RegulatoryPeriod", wsCheckSheet
    CheckCyanCells "checkCell_1_1", wsCheckSheet
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|"
    If List01.Range("checkCell_1").Rows.Count > 2 Then
      CheckCyanCells "checkCell_1", wsCheckSheet
    Else
      AddHyp wsCheckSheet, wbBook.Names("pIns_List01_1").RefersToRange.cells(1, 1), _
             "|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '" & wbBook.Names("pIns_List01_1").RefersToRange.parent.name & "'! |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_ERROR
    End If
    If Application.CountA(wbBook.Worksheets(gstrMainSheetName).Range("RegulatoryPeriod").cells) <> 0 Then
      CheckCyanCells "checkCell_2", wsCheckSheet
      WarningsBeforeSavingForHyperlinks "List02_GroundMaterials", wsCheckSheet, True
      WarningsBeforeSavingForHyperlinks "List02_web_p_1_5", wsCheckSheet
    End If
    If wbBook.Worksheets(gstrMainSheetName).Range("flag_publication").cells(1, 1).Value = "|fffd||fffd|" Then
      CheckCyanCells "checkCell_3", wsCheckSheet
      CheckDateCells "Date_of_publication_ref", wsCheckSheet
      WarningsBeforeSavingForHyperlinks "Website_address_internet", wsCheckSheet
    End If
  End If

  GoTo EndProv
ErrHandler:
  AddHyp wsCheckSheet, wsCheckSheet.Range("A1"), _
         "|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", KIND_ERROR
EndProv:
  modServiceModule.PROTECT_SHEET wsCheckSheet, True, , True
  wbBook.Application.ScreenUpdating = True
End Sub

' rngValidating - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub AddHyp(wsCheckSheet As Worksheet, rngValidating As Range, _
           strReason As String, strKindOfError As String)
  If strKindOfError = KIND_WARNING Then
    modGlobals.glngLowImpactWarningsCounter = modGlobals.glngLowImpactWarningsCounter + 1
  Else
    modGlobals.glngCriticalImpactWarningsCounter = modGlobals.glngCriticalImpactWarningsCounter + 1
  End If
  Dim rngCheckRange As Range
  Set rngCheckRange = wsCheckSheet.cells(NUM_ROW_PR, 2)
  wsCheckSheet.Hyperlinks.Add Anchor:=rngCheckRange, _
                              Address:="", _
                              SubAddress:="'" & _
                                          rngValidating.Worksheet.name & _
                                          "'!" & _
                                          rngValidating.Address(RowAbsolute:=False, _
                                                                ColumnAbsolute:=False), _
                                                                TextToDisplay:=rngValidating.Worksheet.name & _
                                                                               "!" & rngValidating.Address(RowAbsolute:=False, _
                                                                                                           ColumnAbsolute:=False), _
                                                                                                           ScreenTip:=strKindOfError
  With rngCheckRange.Font
    .name = "Tahoma"
    .FontStyle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    .Size = 10
    .Strikethrough = False
    .Superscript = False
    .Subscript = False
    .OutlineFont = False
    .Shadow = False
    .Underline = xlUnderlineStyleSingle
    .ColorIndex = 5
  End With
  With rngCheckRange
    .HorizontalAlignment = xlCenter
    .VerticalAlignment = xlCenter
    .WrapText = False
    .Orientation = 0
    .AddIndent = False
    .IndentLevel = 0
    .ShrinkToFit = False
    .ReadingOrder = xlContext
    .MergeCells = False

  End With
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  rngCheckRange.Offset(0, 1).Value = strReason
  With rngCheckRange.Offset(0, 1)
    .VerticalAlignment = xlCenter
    .WrapText = True
    .Orientation = 0
    .AddIndent = False
    .IndentLevel = 0
    .ShrinkToFit = False
    .ReadingOrder = xlContext
    .MergeCells = False
  End With
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  rngCheckRange.Offset(0, 2).Value = strKindOfError
  With rngCheckRange.Offset(0, 2)
    .VerticalAlignment = xlCenter
    .HorizontalAlignment = xlCenter
    .WrapText = False
    .Orientation = 0
    .AddIndent = False
    .IndentLevel = 0
    .ShrinkToFit = False
    .ReadingOrder = xlContext
    .MergeCells = False
  End With

  With rngCheckRange.Resize(1, 3)
    If NUM_ROW_PR <> 5 Then
      .Borders(xlEdgeTop).LineStyle = xlContinuous
      .Borders(xlEdgeTop).ColorIndex = 48
    End If
  End With
  NUM_ROW_PR = NUM_ROW_PR + 1
  wsCheckSheet.Rows(rngCheckRange.Row).AutoFit
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| wsSheet
Function blnCheckIfSheet(wsCheckSheet As Worksheet)

  blnCheckIfSheet = True

  Dim wbBook As Workbook
  Dim intCounterRow As Integer      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  Dim wsSheet As Worksheet          ' |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim strTempNameSheet As String    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

  Set wbBook = wsCheckSheet.parent

  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If Not (modServiceModule.SheetExists("AllSheetsInThisWorkbook", wbBook)) Then
    AddHyp wsCheckSheet, wsCheckSheet.cells(1, 1), _
           "|fffd||fffd||fffd||fffd| 'AllSheetsInThisWorkbook' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_ERROR
    blnCheckIfSheet = False
    Exit Function
  End If

  Set wsSheet = wbBook.Sheets("AllSheetsInThisWorkbook")

  intCounterRow = 2
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| A |fffd||fffd||fffd||fffd||fffd| AllSheetsInThisWorkbook/
  Do While Len(Trim(wsSheet.cells(intCounterRow, 1).Value)) <> 0
    strTempNameSheet = wsSheet.cells(intCounterRow, 1).Value
    If Not (modServiceModule.SheetExists(strTempNameSheet, wbBook)) Then
      AddHyp wsCheckSheet, wsCheckSheet.cells(1, 1), _
             "|fffd||fffd||fffd||fffd| '" & strTempNameSheet & "' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_ERROR
      blnCheckIfSheet = False
    End If
    intCounterRow = intCounterRow + 1
  Loop

  intCounterRow = 2
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| B |fffd||fffd||fffd||fffd||fffd| AllSheetsInThisWorkbook/
  Do While Len(Trim(wsSheet.cells(intCounterRow, 2).Value)) <> 0
    strTempNameSheet = wsSheet.cells(intCounterRow, 2).Value
    If Not (modServiceModule.SheetExists(strTempNameSheet, wbBook)) Then
      AddHyp wsCheckSheet, wsCheckSheet.cells(1, 1), _
             "|fffd||fffd||fffd||fffd| '" & strTempNameSheet & "' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_ERROR
      blnCheckIfSheet = False
    End If
    intCounterRow = intCounterRow + 1
  Loop

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Sub WarningsBeforeSavingForTitle(wsSheet As Worksheet, wsCheckSheet As Worksheet)

  Dim strContentMsgBox As String, wbBook As Workbook, rngRange As Range, rngCell As Range

  Set wbBook = wsSheet.parent

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If modServiceModule.IsNameExists(wsCheckSheet.parent, "flag_publication") = False Or modServiceModule.IsNameExists(wsCheckSheet.parent, "fil_flag") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "RegulatoryPeriod") = False Or modServiceModule.IsNameExists(wsCheckSheet.parent, "nds") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "org") = False Or modServiceModule.IsNameExists(wsCheckSheet.parent, "fil") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "inn") = False Or modServiceModule.IsNameExists(wsCheckSheet.parent, "kpp") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "vdet") = False Or modServiceModule.IsNameExists(wsCheckSheet.parent, "flag_NVV") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "nalog") = False Or modServiceModule.IsNameExists(wsCheckSheet.parent, "flag_ipr") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "group_rates") = False Or modServiceModule.IsNameExists(wsCheckSheet.parent, "double_rate_tariff") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "Org_Address") = False Or modServiceModule.IsNameExists(wsCheckSheet.parent, "Org_main") = False Or _
     modServiceModule.IsNameExists(wsCheckSheet.parent, "Org_buhg") = False Or modServiceModule.IsNameExists(wsCheckSheet.parent, "Org_otv_lico") = False Then

    AddHyp wsCheckSheet, wsCheckSheet.Range("A1"), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & gstrMainSheetName & "'!", KIND_ERROR

    GoTo CleanUp
  End If

  ' |fffd||fffd||fffd||fffd||fffd||fffd|
  Set rngRange = Union(wsSheet.Range("flag_publication"), wsSheet.Range("flag_NVV"), _
                       wsSheet.Range("RegulatoryPeriod"), wsSheet.Range("fil_flag"), _
                       wsSheet.Range("nalog"), _
                       wsSheet.Range("flag_ipr"), wsSheet.Range("group_rates"), _
                       wsSheet.Range("nds"), _
                       wsSheet.Range("Org_Address"), wsSheet.Range("Org_main"), _
                       wsSheet.Range("Org_buhg"), wsSheet.Range("Org_otv_lico"))

  If wbBook.Names("unit_tariff_double_rate_p").RefersToRange.cells(1, 1).Value <> "-" And _
     Len(Trim(wbBook.Names("unit_tariff_double_rate_p").RefersToRange.cells(1, 1).Value)) <> 0 Then _
       Set rngRange = Union(rngRange, wsSheet.Range("double_rate_tariff"))


  For Each rngCell In rngRange.cells
    If (Len(rngCell.cells(1, 1).Value) = 0) And _
        rngCell.cells(1, 1).Address = rngCell.cells(1, 1).MergeArea.cells(1, 1).Address Then
      AddHyp wsCheckSheet, rngCell, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & gstrMainSheetName & "'!", KIND_ERROR
    End If
  Next rngCell

  ' |fffd||fffd||fffd|
  Set rngRange = wsSheet.Range("org")
  For Each rngCell In rngRange.cells
    If Len(rngCell.cells(1, 1).Value) = 0 Then  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      strContentMsgBox = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & gstrMainSheetName & "'!"
      If rngCell.cells(1, 1).Interior.ColorIndex = colorGreen Then
        strContentMsgBox = strContentMsgBox & " |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
      End If
      AddHyp wsCheckSheet, rngCell, strContentMsgBox, KIND_ERROR
    End If
  Next rngCell

  ' |fffd||fffd||fffd|
  Set rngRange = wsSheet.Range("fil")
  For Each rngCell In rngRange.cells
    If Len(rngCell.cells(1, 1).Value) = 0 And _
       LCase(wsSheet.Range("fil_flag").Value) = "|fffd||fffd|" Then   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      strContentMsgBox = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & gstrMainSheetName & "'!"
      AddHyp wsCheckSheet, rngCell, strContentMsgBox, KIND_ERROR
    End If
  Next rngCell

  ' |fffd||fffd||fffd|
  Set rngRange = wsSheet.Range("inn")
  For Each rngCell In rngRange.cells
    If Len(rngCell.cells(1, 1).Value) = 0 Then                                                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      strContentMsgBox = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & gstrMainSheetName & "'!"
      strContentMsgBox = strContentMsgBox & " |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
      AddHyp wsCheckSheet, rngCell, strContentMsgBox, KIND_ERROR
    ElseIf Len(modClassifierValidate.strValidate_INN_OnSheet(rngCell.cells(1, 1))) > 0 Then   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      strContentMsgBox = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & gstrMainSheetName & "'!"
      strContentMsgBox = strContentMsgBox & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
      AddHyp wsCheckSheet, rngCell, strContentMsgBox, KIND_ERROR
    End If
  Next rngCell

  ' |fffd||fffd||fffd|
  Set rngRange = wsSheet.Range("kpp")
  For Each rngCell In rngRange.cells
    If Len(rngCell.cells(1, 1).Value) = 0 Then                                                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      strContentMsgBox = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & gstrMainSheetName & "'!"
      strContentMsgBox = strContentMsgBox & " |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
      AddHyp wsCheckSheet, rngCell, strContentMsgBox, KIND_ERROR
    ElseIf Len(modClassifierValidate.strValidate_KPP_OnSheet(rngCell.cells(1, 1))) > 0 Then   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      strContentMsgBox = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & gstrMainSheetName & "'!"
      strContentMsgBox = strContentMsgBox & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
      AddHyp wsCheckSheet, rngCell, strContentMsgBox, KIND_ERROR
    End If
  Next rngCell

  ' |fffd||fffd||fffd||fffd|
  Set rngRange = wsSheet.Range("vdet")
  For Each rngCell In rngRange.cells
    If Len(rngCell.cells(1, 1).Value) = 0 Then  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      strContentMsgBox = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & gstrMainSheetName & "'!"
      If rngCell.cells(1, 1).Interior.ColorIndex = colorGreen Then
        strContentMsgBox = strContentMsgBox & " |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
      End If
      AddHyp wsCheckSheet, rngCell, strContentMsgBox, KIND_ERROR
    End If
  Next rngCell

CleanUp:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sub CheckCyanCells(strRange As String, wsCheckSheet As Worksheet)
  Dim rngCell As Range, rngSearch As Range
  Dim firstAddress As String

  If Not IsNameExists(ThisWorkbook, strRange) Then
    AddHyp wsCheckSheet, wsCheckSheet.Range("A1"), _
           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_ERROR
    Exit Sub
  End If

  Application.FindFormat.Interior.ColorIndex = colorCyan
  Set rngSearch = ThisWorkbook.Names(strRange).RefersToRange
  Set rngCell = rngSearch.Find(What:="", after:=rngSearch.cells(1, 1), LookIn:=xlFormulas, searchformat:=True)
  If Not rngCell Is Nothing Then
    firstAddress = rngCell.Address
    Do
      If Len(Trim(rngCell.Value)) = 0 Then
        AddHyp wsCheckSheet, rngCell, _
               "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_ERROR
      End If
      Set rngCell = rngSearch.Find(What:="", after:=rngCell, LookIn:=xlFormulas, searchformat:=True)
    Loop While Not rngCell Is Nothing And rngCell.Address <> firstAddress
  End If
  Application.FindFormat.Clear

  Application.FindFormat.Interior.ColorIndex = colorLightBlue
  Set rngSearch = ThisWorkbook.Names(strRange).RefersToRange
  Set rngCell = rngSearch.Find(What:="", after:=rngSearch.cells(1, 1), LookIn:=xlFormulas, searchformat:=True)
  If Not rngCell Is Nothing Then
    firstAddress = rngCell.Address
    Do
      If Len(Trim(rngCell.Value)) = 0 Then
        AddHyp wsCheckSheet, rngCell, _
               "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_ERROR
      End If
      Set rngCell = rngSearch.Find(What:="", after:=rngCell, LookIn:=xlFormulas, searchformat:=True)
    Loop While Not rngCell Is Nothing And rngCell.Address <> firstAddress
  End If
  Application.FindFormat.Clear

  Application.FindFormat.Interior.ColorIndex = colorGreen
  Set rngSearch = ThisWorkbook.Names(strRange).RefersToRange
  Set rngCell = rngSearch.Find(What:="", after:=rngSearch.cells(1, 1), LookIn:=xlFormulas, searchformat:=True)
  If Not rngCell Is Nothing Then
    firstAddress = rngCell.Address
    Do
      If Len(Trim(rngCell.Value)) = 0 Then
        AddHyp wsCheckSheet, rngCell, _
               "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_ERROR
      End If
      Set rngCell = rngSearch.Find(What:="", after:=rngCell, LookIn:=xlFormulas, searchformat:=True)
    Loop While Not rngCell Is Nothing And rngCell.Address <> firstAddress
  End If
  Application.FindFormat.Clear

  Application.FindFormat.Interior.ColorIndex = colorYellow
  Set rngSearch = ThisWorkbook.Names(strRange).RefersToRange
  Set rngCell = rngSearch.Find(What:="", after:=rngSearch.cells(1, 1), LookIn:=xlFormulas, searchformat:=True)
  If Not rngCell Is Nothing Then
    firstAddress = rngCell.Address
    Do
      If Len(Trim(rngCell.Value)) = 0 Then
        AddHyp wsCheckSheet, rngCell, _
               "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_WARNING
      End If
      Set rngCell = rngSearch.Find(What:="", after:=rngCell, LookIn:=xlFormulas, searchformat:=True)
    Loop While Not rngCell Is Nothing And rngCell.Address <> firstAddress
  End If
  Application.FindFormat.Clear

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Sub CheckDateCells(strRange As String, wsCheckSheet As Worksheet)
  Dim rngCell As Range, rngSearch As Range

  If Not IsNameExists(ThisWorkbook, strRange) Then
    AddHyp wsCheckSheet, wsCheckSheet.Range("A1"), _
           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_ERROR
    Exit Sub
  End If

  For Each rngCell In ThisWorkbook.Names(strRange).RefersToRange.cells
    If Len(Trim(rngCell.Value)) <> 0 And Not IsDate(rngCell.Value) And _
       rngCell.cells(1, 1).Interior.ColorIndex = colorLightBlue Then
      AddHyp wsCheckSheet, rngCell, _
             "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - '|fffd||fffd|.|fffd||fffd|.|fffd||fffd||fffd||fffd|'", KIND_ERROR
    ElseIf Len(Trim(rngCell.Value)) <> 0 And rngCell.parent.name <> gstrMainSheetName Then
      If CDate(rngCell.Value) > Date Then
        AddHyp wsCheckSheet, rngCell, _
             "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|!", KIND_ERROR
      End If
    End If
  Next rngCell

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub WarningsBeforeSavingForHyperlinks(strRange As String, _
                                             wsCheckSheet As Worksheet, _
                                             Optional ByVal blnIsEIAS As Boolean = False)

  Dim intCounter As Integer
  Dim wsSheet As Worksheet
  Dim rngRange As Range, rngCell As Range
  Dim strCodeError As String

  Set rngRange = wsCheckSheet.parent.Names(strRange).RefersToRange
  Set wsSheet = rngRange.parent

  If Not IsNameExists(ThisWorkbook, strRange) Then
    AddHyp wsCheckSheet, wsCheckSheet.Range("A1"), _
           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_ERROR
    Exit Sub
  End If

  If blnIsEIAS Then
    For Each rngCell In rngRange
      If (rngCell.Interior.ColorIndex = colorYellow Or _
          rngCell.Interior.ColorIndex = colorCyan) And _
          Len(Trim(rngCell.cells(1, 1).Value)) <> 0 Then
        If Not ((InStr(rngCell.Value, "https://eias.fstrf.ru/disclo/get_file?p_guid=") = 1 And Len(rngCell.Value) = 81) Or _
                (InStr(rngCell.Value, "https://tariff.eias.ru/disclo/get_file?p_guid=") = 1 And Len(rngCell.Value) = 82)) Then
          AddHyp wsCheckSheet, rngCell, _
                 "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 'https://eias.fstrf.ru/disclo/get_file?p_guid=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX' |fffd||fffd||fffd| " & _
                 "'https://tariff.eias.ru/disclo/get_file?p_guid=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX' (|fffd||fffd|. |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd|.'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|')", KIND_ERROR
        End If
      End If
    Next
  Else
''      If blnCheckHyperlinks = False Then
''        AddHyp wsCheckSheet, ThisWorkbook.Worksheets(gstrHyperlinkSheetName).Range("Website_address_internet"), _
''               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ('|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|') |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & gstrHyperlinkSheetName & "' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd|.|fffd|. |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_WARNING
''        GoTo CleanUp
''      End If

      ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If modInternetConnectionState.blnIsOnLine = True Then
        For Each rngCell In rngRange.cells
          If (Len(Trim(rngCell.cells(1, 1).Value)) <> 0) And _
             rngCell.Value <> "x" Then
            strCodeError = modServiceModule.strHypperlinkExists(rngCell.Value)
            If strCodeError = "401" Then
              AddHyp wsCheckSheet, rngCell, _
                     "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_WARNING
            ElseIf strCodeError <> "0" And _
                   InStr(1, LCase(rngCell.Value), "ftp://") = 1 Then
              AddHyp wsCheckSheet, rngCell, _
                     "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'!", KIND_WARNING
            ElseIf strCodeError <> "200" And _
                   InStr(1, LCase(rngCell.Value), "ftp://") = 0 Then
              AddHyp wsCheckSheet, rngCell, _
                     "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'!", KIND_WARNING
            End If
          End If
        Next rngCell
      Else
        AddHyp wsCheckSheet, rngRange, _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", KIND_WARNING
      End If
  End If

CleanUp:

End Sub

Attribute VB_Name = "modReestr"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Public lngArrMaxI As Long

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Define_Range(ByRef ArrData() As Variant, ByVal strActivity As String)

  On Error GoTo ErrHandler

  Dim wsSheet As Worksheet
  Dim rngRange As Range
  Dim lngOrgRegionRowCount As Long, lngICounter As Long, lngJCounter As Long

  Set wsSheet = ThisWorkbook.Worksheets(STR_REESTR_SHEET_NAME)
  modServiceModule.UNPROTECT_SHEET wsSheet

  lngICounter = UBound(ArrData, 1) + 1
  lngJCounter = UBound(ArrData, 2) + 1

  wsSheet.Range(wsSheet.Range("A" & lngArrMaxI + 1), wsSheet.cells(lngArrMaxI + lngICounter, lngJCounter)).NumberFormat = "@"
  wsSheet.Range(wsSheet.Range("B" & lngArrMaxI + 1), wsSheet.cells(lngArrMaxI + lngICounter, lngJCounter)).Value = ArrData

  wsSheet.Range("A1").Value = "|fffd|"
  wsSheet.Range("A" & lngArrMaxI + 2).Value = 1
  wsSheet.Range("A" & lngArrMaxI + 2).AutoFill Destination:=wsSheet.Range(wsSheet.Range("A" & lngArrMaxI + 2), wsSheet.cells(lngArrMaxI + lngICounter, 1)), Type:=xlFillSeries

  If modServiceModule.IsNameExists(ThisWorkbook, STR_RANGE_NAME) Then ThisWorkbook.Names(STR_RANGE_NAME).Delete

  If wsSheet.UsedRange.Rows.Count > 1 Then
    Set rngRange = wsSheet.Range(wsSheet.cells(2, 1), wsSheet.cells(lngArrMaxI + lngICounter, lngJCounter + 1))
    rngRange.name = STR_RANGE_NAME
    wsSheet.Range(wsSheet.cells(lngArrMaxI + 2, lngJCounter + 1), wsSheet.cells(lngArrMaxI + lngICounter, lngJCounter + 1)).Value = strActivity
  End If

  If lngArrMaxI > 0 Then
    wsSheet.cells(lngArrMaxI + 1, 1).EntireRow.Delete
    lngArrMaxI = lngArrMaxI - 1
  End If
ErrHandler:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| + |fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
Public Function Shape_MR_MO_OKTMO_List(ws As Worksheet, ByRef ArrData() As Variant, strPrefixForRange As String) As Long

  Dim lngICounter As Long, j As Long
  Dim strMRName As String
  Dim rngRange As Range
  Dim rngCell As Range
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|/|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim lngMRMORegionStartRow As Long
  Dim lngMRMORegionEndRow As Long
  Dim lngMRMORegionRowCount As Long
  Dim lngMRMORowCount As Long
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd|
  Dim lngCounter As Long
  Dim lngMOMRStartRow As Long
  Dim lngMOMREndRow As Long
  Dim lngMOMRRowCount As Long
  Dim lngMORowCount As Long

  ws.Activate

  strPrefixForRange = strPrefixForRange & IIf(Len(Trim(strPrefixForRange)) <> 0, "_", "")

  ws.Range("A1:E" & UBound(ArrData, 1) + 1).Value = ArrData
  ws.Range("A2:E" & UBound(ArrData, 1) + 1).name = strPrefixForRange & "LIST_MR_MO_OKTMO"

  lngMRMORegionRowCount = 0
  Do While Len(CStr(ws.cells(lngMRMORegionRowCount + 2, 1).Value)) > 0
    lngMRMORegionRowCount = lngMRMORegionRowCount + 1
  Loop

  If lngMRMORegionRowCount < 1 Then
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    GoTo CleanUp
  End If

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  ws.Application.DisplayAlerts = False
  ws.Columns(1).Delete
  ws.Application.DisplayAlerts = True
  ''
  ''  lngICounter = 2
  ''  j = 1
  ''  strMRName = ws.cells(lngICounter, 1).Value
  ''  ws.cells(j + 1, 5).Value = ws.cells(lngICounter, 1).Value  'MR
  ''  ws.cells(j + 1, 6).Value = ws.cells(lngICounter, 2).Value  'MR_OKTMO
  ''  j = j + 1
  ''
  ''  For lngICounter = 3 To lngMRMORegionRowCount + 1
  ''    If ws.cells(lngICounter, 1).Value <> strMRName Then
  ''      strMRName = ws.cells(lngICounter, 1).Value
  ''      ws.cells(j + 1, 5).Value = ws.cells(lngICounter, 1).Value  'MR
  ''      ws.cells(j + 1, 6).Value = ws.cells(lngICounter, 2).Value  'MR_OKTMO
  ''      j = j + 1
  ''    End If
  ''  Next lngICounter

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|
  ws.Application.DisplayAlerts = False
  ws.Columns(2).Delete
  ws.Application.DisplayAlerts = True
  ''
  ''  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  ''  Set rngRange = ws.Range("D2:D" & j)
  ''  rngRange.name = strPrefixForRange & "MR_LIST"
  ''
  ''  ' ---------------------------------------------
  ''  ' ---------------------------------------------
  ''  ' --- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| ---
  ''  ' ---------------------------------------------
  ''  ' ---------------------------------------------
  ''  For lngCounter = 2 To ws.Range(strPrefixForRange & "LIST_MR_MO_OKTMO").Rows.Count + 1
  ''
  ''    strMRName = ws.cells(lngCounter, 4).Value
  ''
  ''    If Len(strMRName) = 0 Then Exit For
  ''
  ''    lngMOMRStartRow = 0
  ''    lngMOMREndRow = 0
  ''
  ''    lngMORowCount = 0
  ''    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  ''    Do While Len(CStr(ws.cells(lngMORowCount + 2, 2).Value)) > 0
  ''      lngMORowCount = lngMORowCount + 1
  ''    Loop
  ''    lngMORowCount = lngMORowCount + 2
  ''
  ''    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  ''    ' !!! |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd|
  ''    For lngICounter = 1 To lngMORowCount
  ''      If LCase(ws.cells(lngICounter, 1).Value) = LCase(strMRName) Then
  ''        If lngMOMRStartRow = 0 Then
  ''          lngMOMRStartRow = lngICounter
  ''          Exit For
  ''        End If
  ''      End If
  ''    Next lngICounter
  ''
  ''    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ''    If lngMOMRStartRow = 0 Then
  ''      GoTo ErrHandler
  ''    End If
  ''
  ''    For lngICounter = lngMOMRStartRow To lngMORowCount
  ''      If LCase(ws.cells(lngICounter, 1).Value) <> LCase(strMRName) Or _
   ''         Len(CStr(ws.cells(lngICounter, 1).Value)) = 0 Then
  ''        If lngMOMREndRow = 0 Then
  ''          lngMOMREndRow = lngICounter - 1
  ''          Exit For
  ''        End If
  ''      End If
  ''      If lngICounter = lngMORowCount Then
  ''        If lngMOMREndRow = 0 Then
  ''          lngMOMREndRow = lngICounter
  ''          Exit For
  ''        End If
  ''      End If
  ''    Next lngICounter
  ''
  ''    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ''    If lngMOMREndRow = 0 Then
  ''      GoTo ErrHandler
  ''    End If
  ''
  ''    lngMOMRRowCount = lngMOMREndRow - lngMOMRStartRow + 1
  ''
  ''    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  ''    ws.Range(ws.cells(lngMOMRStartRow, 2), ws.cells(lngMOMREndRow, 2)).name = strPrefixForRange & "MO_LIST_" & lngCounter
  ''    ws.cells(lngCounter, 5).Value = strPrefixForRange & "MO_LIST_" & lngCounter
''
''  ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''  If Len(Trim(strPrefixForRange)) = 0 Then
''    ' |fffd||fffd||fffd||fffd| |fffd||fffd| = |fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
''    ' (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "|fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|...
''    For Each rngCell In ws.Range(strPrefixForRange & "LIST_MR_MO_OKTMO").Columns(1).cells
''      If LCase(rngCell.Value) = LCase(rngCell.Offset(0, 1).Value) And _
''         InStr(1, LCase(rngCell.Value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|") <> 0 Then
''        rngCell.EntireRow.Delete
''      End If
''    Next rngCell
''  End If
  ''
  ''  Next lngCounter

  ws.Range("A1").Value = "|fffd||fffd|"
  ws.Range("B1").Value = "|fffd||fffd|"
  ws.Range("C1").Value = "|fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|"
  ''  ws.Range("D1").Value = "|fffd||fffd|"
  ''  ws.Range("E1").Value = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"  ' |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|


  ' ---------------------------------------
  ' ---------------------------------------
  ' ---------------------------------------

  Shape_MR_MO_OKTMO_List = lngCounter

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ws.Columns("A:A").Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
  ws.Range("A1").Value = "|fffd|"
  ws.Range("A2").Value = 1
  ws.Range(strPrefixForRange & "LIST_MR_MO_OKTMO").Columns(1).Offset(0, -1).DataSeries Rowcol:=xlColumns, Type:=xlLinear, Date:=xlDay, _
                                                                   Step:=1, Trend:=False
  Union(ws.Range(strPrefixForRange & "LIST_MR_MO_OKTMO").cells, _
        ws.Range(strPrefixForRange & "LIST_MR_MO_OKTMO").Columns(1).Offset(0, -1).cells).name = strPrefixForRange & "LIST_MR_MO_OKTMO"


  GoTo CleanUp

ErrHandler:
  If modGlobals.gblnTestMode Then Debug.Print Err.Description

CleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub cmdUpdateOrgData_Click_Handler(ByVal wsOwnerSheet As Worksheet, _
                                          Optional ByVal blnShowSuccessMessageBox As Boolean = True)

  On Error GoTo ErrHandler

  Dim strUpdateReestrResult As String, ArrData() As Variant, strRegions As Variant, varSphere As Variant
  Dim strUpdateReestrResultOrgs As String
  Dim lngICounter As Long, lngJCounter As Long
  Dim wbBook As Workbook
  Dim blnScreenValue As Boolean, blnEventsValue As Boolean

  Set wbBook = ThisWorkbook
  If Len(wbBook.Names("region_name").RefersToRange.cells(1, 1).Value) = 0 Then GoTo CleanUp
  ''
  ''  Application.Wait (Now + TimeValue("0:00:1"))  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

  blnScreenValue = Application.ScreenUpdating
  blnEventsValue = Application.EnableEvents

  Application.ScreenUpdating = False
  Application.EnableEvents = False

  wbBook.Worksheets(STR_REESTR_SHEET_NAME).UsedRange.Rows.Delete

  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  strRegions = Split(STR_ADDITIONAL_REGIONS, ";")
  ReDim Preserve strRegions(UBound(strRegions) + 1)
  strRegions(UBound(strRegions)) = wbBook.Names("region_name").RefersToRange.cells(1, 1).Value
  lngArrMaxI = 0

  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  varSphere = Split(STR_ACTIVITY_SPHERE, ";")

  For lngJCounter = LBound(varSphere) To UBound(varSphere)
    For lngICounter = UBound(strRegions) To LBound(strRegions) Step -1
      If BLN_SHOW_PROGRESS_FORM_ON_UPDATE_REQUESTS And UBound(strRegions) > 0 Then
        frmProgressForm.SetText "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..." & vbNewLine & strRegions(lngICounter)
      End If

      strUpdateReestrResult = modHTTPServerCaller.Get_Data("ORG", _
                                                           ArrData, _
                                                           strRegions(lngICounter), _
                                                           varSphere(lngJCounter), _
                                                           "ALL")
      If strUpdateReestrResult <> STR_UPDATE_SUCCESS Then Exit For
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      modReestr.Define_Range ArrData, varSphere(lngJCounter)
      lngArrMaxI = lngArrMaxI + UBound(ArrData, 1) + 1
    Next lngICounter
  Next lngJCounter

  '  Application.ScreenUpdating = blnScreenValue
  '  wsOwnerSheet.Activate

  If strUpdateReestrResult = STR_UPDATE_SUCCESS Then

    Application.ScreenUpdating = False

    If modServiceModule.IsNameExists(wbBook, "LastUpdateDate_ReestrOrg") = True Then
      modServiceModule.UNPROTECT_SHEET wsOwnerSheet
      '      wbBook.Application.EnableEvents = False
      Application.Range("LastUpdateDate_ReestrOrg").Value = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & Now()
      '      wbBook.Application.EnableEvents = blnEventsValue
      modServiceModule.PROTECT_SHEET wsOwnerSheet, True
    End If

    Application.ScreenUpdating = blnScreenValue

    If blnShowSuccessMessageBox = True Then
      MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & strUpdateReestrResult, vbInformation, modGlobals.STR_MSGBOX_INFORMATION_TITLE
    End If

  Else
    Application.ScreenUpdating = blnScreenValue
    If Not frmProgressForm Is Nothing Then frmProgressForm.Hide
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & strUpdateReestrResult, vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  End If

  GoTo CleanUp

ErrHandler:
  If modGlobals.gblnTestMode Then Debug.Print Err.Description

CleanUp:
  wsOwnerSheet.Activate
  Application.EnableEvents = blnEventsValue
  Application.ScreenUpdating = blnScreenValue
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
Public Sub cmdUpdateReestrMO_Click_Handler(ByVal wsOwnerSheet As Worksheet, _
                                           Optional ByVal blnShowSuccessMessageBox As Boolean = True, _
                                           Optional ByVal strRangeRegionName As String = "region_name")

  On Error GoTo ErrHandler

  Dim wbBook As Workbook
  Dim strUpdateReestrResult As String, ArrData() As Variant
  Dim blnScreenValue As Boolean, blnEventsValue As Boolean
  Dim strTemp As String

  If strRangeRegionName = "legal_region" Then
    strTemp = "legal"
  ElseIf strRangeRegionName = "post_region" Then
    strTemp = "post"
  Else
    strTemp = vbNullString
  End If

  STR_REESTR_MO_SHEET_NAME = "REESTR_MO" & IIf(Len(Trim(strTemp)) <> 0, "_", "") & UCase(strTemp)

  Set wbBook = wsOwnerSheet.parent
  If Len(wbBook.Names(strRangeRegionName).RefersToRange.cells(1, 1).Value) = 0 Then GoTo CleanUp

  blnScreenValue = Application.ScreenUpdating
  blnEventsValue = Application.EnableEvents

  Application.ScreenUpdating = False
  Application.EnableEvents = False

  wbBook.Worksheets(STR_REESTR_MO_SHEET_NAME).UsedRange.Rows.Delete

  strUpdateReestrResult = modHTTPServerCaller.Get_Data("MRMO", ArrData, _
                                                       wbBook.Names(strRangeRegionName).RefersToRange.Value)

  '  Application.ScreenUpdating = blnScreenValue
  '  wsOwnerSheet.Activate

  If strUpdateReestrResult = STR_UPDATE_SUCCESS Then

    Application.ScreenUpdating = False

    modReestr.Shape_MR_MO_OKTMO_List wbBook.Worksheets(STR_REESTR_MO_SHEET_NAME), ArrData, strTemp

    If modServiceModule.IsNameExists(wbBook, "LastUpdateDate_MO" & strTemp) = True Then
      modServiceModule.UNPROTECT_SHEET wsOwnerSheet
      '      wbBook.Application.EnableEvents = False
      Application.Range("LastUpdateDate_MO" & strTemp).Value = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|:" & vbNewLine & Now()
      '      wbBook.Application.EnableEvents = blnEventsValue
      modServiceModule.PROTECT_SHEET wsOwnerSheet, True
    End If

    Application.ScreenUpdating = blnScreenValue
    If blnShowSuccessMessageBox = True Then
      If Not frmProgressForm Is Nothing Then frmProgressForm.Hide
      MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|: " & strUpdateReestrResult, vbInformation, modGlobals.STR_MSGBOX_INFORMATION_TITLE
    End If

  Else
    Application.ScreenUpdating = blnScreenValue
    If Not frmProgressForm Is Nothing Then frmProgressForm.Hide
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|: " & strUpdateReestrResult, vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  End If

  GoTo CleanUp

ErrHandler:
  If modGlobals.gblnTestMode Then Debug.Print Err.Description

CleanUp:
  wsOwnerSheet.Activate
  Application.EnableEvents = blnEventsValue
  Application.ScreenUpdating = blnScreenValue
End Sub
Attribute VB_Name = "modRegion"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub cmdOK_Click_Handler()

  On Error GoTo ErrHandler

  Dim strRegionName As String
  Dim lngNumber As Long
  lngNumber = frmRegion.cmbRegion.ListIndex

  If lngNumber < 0 Then

    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", vbInformation, modGlobals.STR_MSGBOX_INFORMATION_TITLE
    frmRegion.cmbRegion.SetFocus

  Else

    strRegionName = frmRegion.cmbRegion.List(lngNumber, 0)

    Application.ScreenUpdating = False
    Application.EnableEvents = False

    modServiceModule.UNPROTECT_SHEET Instruction
    Instruction.Shapes("cmdStart").Visible = msoFalse
    modServiceModule.PROTECT_SHEET Instruction

    List00.Visible = xlSheetVisible
    List01.Visible = xlSheetVisible
    ListComm.Visible = xlSheetVisible
    ListCheck.Visible = xlSheetVisible

    List00.Activate

    modServiceModule.UNPROTECT_SHEET List00
    List00.Range("region_name").Value = strRegionName
    modServiceModule.PROTECT_SHEET List00

    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If List00.Range("region_name").Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" Then
      modServiceModule.UNPROTECT_SHEET List00
      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      List00.Shapes("ExcludeHelp_2").Visible = msoFalse
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd|
      List00.Range("flag_publication").Value = "|fffd||fffd||fffd|"
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      List00.Range(List00.Range("strPublication").cells(1, 1).Offset(0, -1), _
                   List00.Range("flag_publication").cells(1, 1)).Interior.ColorIndex = colorWhite
      List00.Range(List00.Range("strPublication").cells(1, 1).Offset(0, -1), _
                   List00.Range("flag_publication").cells(1, 1)).Font.Color = List00.Range("strPublication").cells(1, 1).Offset(0, -5).Font.Color
      List00.Range(List00.Range("strPublication").cells(1, 1).Offset(0, -1), _
                   List00.Range("flag_publication").cells(1, 1)).EntireRow.Hidden = True
      modServiceModule.PROTECT_SHEET List00, True
    End If

    If modAnimatedFormsGlobals.BLN_SHOW_PROGRESS_FORM_ON_UPDATE_REQUESTS = True Then
      Set frmProgressForm = Try_Show_Message_Window(vbDefaultButton1, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd|/|fffd||fffd|...")
    Else
      Set frmProgressForm = Nothing
    End If

    modReestr.cmdUpdateOrgData_Click_Handler List00, False
    modReestr.cmdUpdateReestrMO_Click_Handler List00, False

    GoTo CleanUp
  End If

  Exit Sub

ErrHandler:
  GoTo CleanUp
CleanUp:
  If Not frmProgressForm Is Nothing Then frmProgressForm.Hide
  Application.EnableEvents = True
  Application.ScreenUpdating = True
  Unload frmRegion

End Sub

Public Sub cmdCancel_Click_Handler()
  Unload frmRegion
End Sub

Public Sub UserForm_Initialize_Handler()
  If modServiceModule.IsNameExists(ThisWorkbook, "REGION") = True Then
    frmRegion.cmbRegion.RowSource = "REGION"
  End If
  If modGlobals.gblnTestMode = False Then
    Set modScrolling.obj = frmRegion.cmbRegion
    ''    cmbRegion.List(1).SetFocus
    frmRegion.cmbRegion.SetFocus
    hW = GetFocus
    Hook hW  ' for CMB scrolling
  End If
  Application.ScreenUpdating = True
End Sub

Public Sub UserForm_Activate_Handler()
  frmRegion.cmbRegion.SetFocus
End Sub

Public Sub UserForm_Terminate_Handler()
  If modGlobals.gblnTestMode = False Then
    UnHook hW ' for CMB scrolling
  End If
End Sub

Attribute VB_Name = "modScrolling"
Option Explicit
Option Base 1

Public obj As Control  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public hW As Long  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

#If VBA7 And Win64 Then
  Public Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, _
                                                                               ByVal lpWindowName As String) As Long

  Private Declare PtrSafe Function CallWindowProcA Lib "user32" (ByVal lpPrevWndFunc As Long, _
                                                                 ByVal hWnd As Long, _
                                                                 ByVal MSG As Long, _
                                                                 ByVal wParam As Long, _
                                                                 ByVal lParam As Long) As Long
  Private Declare PtrSafe Function SetWindowLongPtrA Lib "user32" (ByVal hWnd As Long, _
                                                                   ByVal nIndex As Long, _
                                                                   ByVal dwNewLong As LongPtr) As Long
  Public Declare PtrSafe Function GetFocus Lib "user32" () As Long

#Else
  Public Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, _
                                                                       ByVal lpWindowName As String) As Long

  Private Declare Function CallWindowProcA Lib "user32" (ByVal lpPrevWndFunc As Long, _
                                                         ByVal hWnd As Long, _
                                                         ByVal MSG As Long, _
                                                         ByVal wParam As Long, _
                                                         ByVal lparam As Long) As Long
  Private Declare Function SetWindowLongA Lib "user32" (ByVal hWnd As Long, _
                                                        ByVal nIndex As Long, _
                                                        ByVal dwNewLong As Long) As Long
  Public Declare Function GetFocus Lib "user32" () As Long
#End If


Private Const GWL_WNDPROC = -4
Private Const WM_MOUSEWHEEL = &H20A

Private lpPrevWndProc As Long

Sub Hook(hWnd As Long)
  #If VBA7 And Win64 Then
    lpPrevWndProc = SetWindowLongPtrA(hWnd, GWL_WNDPROC, AddressOf WindowProc)
  #Else
    lpPrevWndProc = SetWindowLongA(hWnd, GWL_WNDPROC, AddressOf WindowProc)
  #End If
End Sub

Sub UnHook(hWnd As Long)
  #If VBA7 And Win64 Then
    SetWindowLongPtrA hWnd, GWL_WNDPROC, lpPrevWndProc
  #Else
    SetWindowLongA hWnd, GWL_WNDPROC, lpPrevWndProc
  #End If
End Sub

' API |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ListBox
Function WindowProc(ByVal hWnd As Long, ByVal uMsg As Long, ByVal wParam As Long, ByVal lparam As Long) As Long
  Dim blnEventsValue As Boolean
  Dim HiW As Long, LoW As Long

  On Error GoTo xErr
  If uMsg = WM_MOUSEWHEEL Then

    With obj
      HiW = HiWord(wParam)
      LoW = LoWord(wParam)
      If HiW < 0 And LoW = 0 Then
        If .ListIndex < .ListCount - 1 Then .ListIndex = .ListIndex + 1  ' scroll down
      ElseIf HiW > 0 And LoW = 0 Then
        If .ListIndex > 0 Then .ListIndex = .ListIndex - 1  ' scroll up
      End If
    End With
  Else
    WindowProc = CallWindowProcA(lpPrevWndProc, hWnd, uMsg, wParam, lparam)
  End If

xErr:
End Function

Public Function blnIs_UserForm_Loaded(ByVal strFormName As String) As Boolean

  Dim lngICounter As Long

  blnIs_UserForm_Loaded = False
  For lngICounter = 0 To UserForms.Count - 1
    If UserForms(lngICounter).name = strFormName Then
      blnIs_UserForm_Loaded = True
      Exit Function
    End If
  Next lngICounter

End Function

Public Function HiWord(ByVal lDWord As Long) As Long
  HiWord = (lDWord And &HFFFF0000) \ 65536
End Function

' This function looks big, but actually compiles to a single instruction
' Prevents overflow in the IDE too.
Public Function LoWord(ByVal lDWord As Long) As Long
  If lDWord And &H8000& Then
    LoWord = lDWord Or &HFFFF0000
  Else
    LoWord = lDWord And &HFFFF&
  End If
End Function

Attribute VB_Name = "modServiceModule"
Option Explicit

Private Const MODE_UNDEFINED_PROTECTION_ENABLED As Long = 0
Private Const TEST_MODE_PROTECTION_ENABLED As Long = 1
Private Const TEST_MODE_PROTECTION_DISABLED As Long = 2
Private Const RELEASE_MODE = 3

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub UNPROTECT_SHEET(ByRef wsSheet As Worksheet, _
                           Optional ByVal strPassword As String = gPASSWORD)
  wsSheet.Unprotect strPassword
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public Sub PROTECT_SHEET(ByRef wsSheet As Worksheet, _
                         Optional ByVal blnDrawingObject As Boolean = True, _
                         Optional ByVal strPassword As String = gPASSWORD, _
                         Optional ByVal blnEnableAutoFilter As Boolean = False)
  
  On Error GoTo ErrHandler
  
  If wsSheet Is Nothing Then GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim lngTemplateOperationMode As Long
  
  Set wbBook = wsSheet.parent
  
  lngTemplateOperationMode = CLng(varGetDocumentProperty(wbBook, "TemplateOperationMode"))
  If lngTemplateOperationMode = MODE_UNDEFINED_PROTECTION_ENABLED Or _
     lngTemplateOperationMode = RELEASE_MODE Or _
     lngTemplateOperationMode = TEST_MODE_PROTECTION_ENABLED Then
    wsSheet.Protect Password:=strPassword, DrawingObjects:=blnDrawingObject, _
                    Contents:=True, Scenarios:=True, _
                    AllowFormattingColumns:=True, AllowFormattingRows:=True, _
                    AllowFiltering:=blnEnableAutoFilter
  End If
ErrHandler:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function varGetDocumentProperty(ByRef wbBook As Workbook, _
                                       ByVal strName As String) As Variant
  
  On Error GoTo ErrHandler
  
  If wbBook Is Nothing Then GoTo ErrHandler
  
  If strName = "Title" Or strName = "Subject" Or strName = "Company" Or strName = "Comments" Then
    varGetDocumentProperty = wbBook.BuiltinDocumentProperties(strName).Value
  Else
    varGetDocumentProperty = wbBook.CustomDocumentProperties(strName).Value
  End If

  GoTo CleanUp

ErrHandler:
  varGetDocumentProperty = ""
CleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function blnIsDocumentProperty(ByVal wbBook As Workbook, _
                                      ByVal strPropertyName As String) As Boolean
  
  On Error GoTo ErrHandler
  
  Dim varValue As Variant
  
  blnIsDocumentProperty = False
  
  If wbBook Is Nothing Or _
     Len(strPropertyName) = 0 Then
    GoTo ErrHandler
  End If
  
  If strPropertyName = "Title" Or strPropertyName = "Subject" Or _
     strPropertyName = "Company" Or strPropertyName = "Comments" Then
    varValue = wbBook.BuiltinDocumentProperties(strPropertyName).Value
    blnIsDocumentProperty = True
  Else
    varValue = wbBook.CustomDocumentProperties(strPropertyName).Value
    blnIsDocumentProperty = True
  End If

  GoTo CleanUp

ErrHandler:
  blnIsDocumentProperty = False
CleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function GetNamedRangeListFromSheet(wb As Workbook, sheet_name As String) As name()

  Dim NAMED_RANGES_ARRAY() As name
  Dim namName As name
    
  ReDim Preserve NAMED_RANGES_ARRAY(1)
  wb.Activate
    
  Dim pattern_sheet_name As String
  pattern_sheet_name = "*" + sheet_name + "!*"
    
  For Each namName In wb.Names
    If CStr(namName) Like pattern_sheet_name Then
      ReDim Preserve NAMED_RANGES_ARRAY(UBound(NAMED_RANGES_ARRAY) + 1)
      Set NAMED_RANGES_ARRAY(UBound(NAMED_RANGES_ARRAY)) = namName
    End If
  Next namName
    
  GetNamedRangeListFromSheet = NAMED_RANGES_ARRAY

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function GetWorksheetName(n As name, ws As Worksheet) As String
  On Error GoTo ErrHandler
  Dim rngRange As Range
  Set rngRange = ws.Range(n.name)
  GetWorksheetName = rngRange.parent.name
  Set rngRange = Nothing
  Exit Function
ErrHandler:
  GetWorksheetName = ""
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' NOTE: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|: "1.2.4.64.x", |fffd||fffd||fffd| x - |fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function RENUMBER_ADD_CELLS(rngRangeToRenumerate As Range) As String
  Dim rngTemp As Range
  Dim strPreviousNumber As String, strPrefix As String
  Dim intVal As Long, i As Long
  RENUMBER_ADD_CELLS = ""
  
  If rngRangeToRenumerate Is Nothing Then Exit Function
  
  rngRangeToRenumerate.Offset(-1, 0).Select
  Set rngTemp = Selection
  If Len(CStr(rngTemp.cells(1, 1).Value)) = 0 Or _
    rngRangeToRenumerate.Columns.Count <> rngTemp.Columns.Count Then
    Exit Function
  End If
  
  If rngTemp.HasFormula = True Then
    strPreviousNumber = CStr(rngTemp.cells(1, 1).Formula) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If Len(strPreviousNumber) = 0 Then Exit Function
    
    i = 0
    Do While InStr(Len(strPreviousNumber) - i, strPreviousNumber, ".") = 0
      i = i + 1
      If Len(strPreviousNumber) <= i Then Exit Do
    Loop
    
    intVal = CInt(Mid(strPreviousNumber, Len(strPreviousNumber) - i + 1, i - 1))
    strPrefix = CStr(Mid(strPreviousNumber, 1, Len(strPreviousNumber) - i))
    
    rngRangeToRenumerate.Select
    Selection.NumberFormat = "General" ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| -
    rngRangeToRenumerate.cells(1, 1).Value = strPrefix & CStr(intVal + 1) & """"
    
    RENUMBER_ADD_CELLS = strPrefix & CStr(rngRangeToRenumerate.cells(1, 1).Value)
  Else
    strPreviousNumber = CStr(rngTemp.cells(1, 1).Value) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If Len(strPreviousNumber) = 0 Then Exit Function
    
    i = 0
    Do While InStr(Len(strPreviousNumber) - i, strPreviousNumber, ".") = 0
      i = i + 1
      If Len(strPreviousNumber) <= i Then Exit Do
    Loop
    
    intVal = CInt(Mid(strPreviousNumber, Len(strPreviousNumber) - i + 1, i))
    strPrefix = CStr(Mid(strPreviousNumber, 1, Len(strPreviousNumber) - i))
    
    rngRangeToRenumerate.Select
    Selection.NumberFormat = "@" ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| -
    rngRangeToRenumerate.cells(1, 1).Value = strPrefix & CStr(intVal + 1)
    
    RENUMBER_ADD_CELLS = strPrefix & CStr(rngRangeToRenumerate.cells(1, 1).Value)
  End If
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' NOTE: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|: "1.2.4.64.x", |fffd||fffd||fffd| x - |fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function RENUMBER_REMOVE_CELLS(intNCol As Long, _
                                      intNRow As Long, _
                                      rngRemovedNum As Range, _
                                      wsWorkSheet As Worksheet) As String
  Dim rngCell As Range
  Dim strPreviousNumber As String, strPrefix As String
  Dim intVal As Long, i As Long
  RENUMBER_REMOVE_CELLS = ""
  
  If intNCol <= 0 Or intNRow <= 0 Or rngRemovedNum Is Nothing Then Exit Function
  
  Set rngCell = wsWorkSheet.cells(intNRow, intNCol).Offset(1, 0)
  
  If rngRemovedNum.HasFormula = True Then
    strPreviousNumber = CStr(rngRemovedNum.cells(1, 1).Formula) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If Len(strPreviousNumber) = 0 Then Exit Function
    
    i = 0
    Do While InStr(Len(strPreviousNumber) - i, strPreviousNumber, ".") = 0
      i = i + 1
      If Len(strPreviousNumber) <= i Then Exit Do
    Loop
    
    intVal = CInt(Mid(strPreviousNumber, Len(strPreviousNumber) - i + 1, i - 1))
    strPrefix = CStr(Mid(strPreviousNumber, 1, Len(strPreviousNumber) - i))
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Do While Len(CStr(rngCell.cells(1, 1).Value)) > 0
      rngCell.Select
      Selection.NumberFormat = "@" ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| -
      rngCell.cells(1, 1).Value = strPrefix & CStr(intVal) & """"
      Set rngCell = rngCell.Offset(1, 0)
      intVal = intVal + 1
    Loop
    RENUMBER_REMOVE_CELLS = strPrefix & CStr(intVal - 1)
  Else
    strPreviousNumber = CStr(rngRemovedNum.cells(1, 1).Value)     ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If Len(strPreviousNumber) = 0 Then Exit Function
    
    i = 0
    Do While InStr(Len(strPreviousNumber) - i, strPreviousNumber, ".") = 0
      i = i + 1
      If Len(strPreviousNumber) <= i Then Exit Do
    Loop
    
    intVal = CInt(Mid(strPreviousNumber, Len(strPreviousNumber) - i + 1, i))
    strPrefix = CStr(Mid(strPreviousNumber, 1, Len(strPreviousNumber) - i))
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Do While Len(CStr(rngCell.cells(1, 1).Value)) > 0
      rngCell.cells(1, 1).Value = strPrefix & CStr(intVal)
      Set rngCell = rngCell.Offset(1, 0)
      intVal = intVal + 1
    Loop
    RENUMBER_REMOVE_CELLS = strPrefix & CStr(intVal - 1)
  End If
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SheetName |fffd| |fffd||fffd||fffd||fffd||fffd| wb
Function SheetExists(SheetName As String, wb As Workbook) As Boolean
On Error GoTo ErrHandler

Dim ws As Worksheet
SheetExists = False
For Each ws In wb.Worksheets
  If CStr(ws.name) = SheetName Then
    SheetExists = True
    Exit Function
  End If
Next

ErrHandler:
  SheetExists = False
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| strName |fffd| |fffd||fffd||fffd||fffd||fffd| wbBook
Public Function IsNameExists(wbBook As Workbook, strName As String) As Boolean
  On Error GoTo ErrHandler
  Dim rngTemp As Range
  IsNameExists = True
  Set rngTemp = wbBook.Names(strName).RefersToRange
  Exit Function
ErrHandler:
  IsNameExists = False
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SetAllTahoma()
 
 Dim ws As Worksheet
 Dim wb As Workbook
 Set wb = ActiveWorkbook
 
 For Each ws In wb.Worksheets
   ws.Activate
   cells.Select
   Selection.Font.name = "Tahoma"
   Selection.Font.Size = 9
 Next ws
 
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Sub ShapeDeleteHyperlink(ws As String, cl As Range)

    ActiveCell.FormulaR1C1 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    ActiveSheet.Hyperlinks.Add Anchor:=Selection, Address:="", _
                               SubAddress:=Chr(39) & ws & Chr(39) & "!" & _
                               cl.Address, TextToDisplay:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                               ScreenTip:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    With Selection.Font
        .name = "Tahoma"
        .Size = 9
        .Bold = True
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleSingle
        .ColorIndex = 5
    End With

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub FixAllHyperlinks()
  Dim wbThisBook As Workbook
  Dim wsSheet As Worksheet
  Dim hl As Hyperlink
  Set wbThisBook = ActiveWorkbook
  For Each wsSheet In wbThisBook.Worksheets
    wsSheet.Activate
    For Each hl In wsSheet.Hyperlinks
      hl.SubAddress = Chr(39) & wsSheet.name & Chr(39) & "!A1"
    Next hl
  Next wsSheet
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub CreateCheckSheet(wbBook As Workbook, strSheetName As String)

  Dim wsSheet As Worksheet

  wbBook.Worksheets.Add(after:=wbBook.Worksheets(wbBook.Worksheets.Count)).name = strSheetName
  Set wsSheet = wbBook.Worksheets(strSheetName)

  wsSheet.Tab.ColorIndex = 24

  wsSheet.Activate
  wsSheet.Range("B4:D4").Select
  With Selection
    .Interior.ColorIndex = xlNone
    .Interior.Pattern = xlSolid

    .HorizontalAlignment = xlCenter
    .VerticalAlignment = xlCenter
    .WrapText = False
    .Orientation = 0
    .AddIndent = False
    .IndentLevel = 0
    .ShrinkToFit = False
    .ReadingOrder = xlContext
    .MergeCells = False

    .Borders(xlDiagonalDown).LineStyle = xlNone
    .Borders(xlDiagonalUp).LineStyle = xlNone
    .Borders(xlEdgeLeft).LineStyle = xlContinuous
    .Borders(xlEdgeLeft).Weight = xlThin
    .Borders(xlEdgeLeft).ColorIndex = 48

    .Borders(xlEdgeTop).LineStyle = xlContinuous
    .Borders(xlEdgeTop).Weight = xlThin
    .Borders(xlEdgeTop).ColorIndex = 48

    .Borders(xlEdgeBottom).LineStyle = xlContinuous
    .Borders(xlEdgeBottom).Weight = xlThin
    .Borders(xlEdgeBottom).ColorIndex = 48

    .Borders(xlEdgeRight).LineStyle = xlContinuous
    .Borders(xlEdgeRight).Weight = xlThin
    .Borders(xlEdgeRight).ColorIndex = 48

    .Borders(xlInsideVertical).LineStyle = xlContinuous
    .Borders(xlInsideVertical).Weight = xlThin
    .Borders(xlInsideVertical).ColorIndex = 48
  End With

  wsSheet.Range("B4").Value = "|fffd||fffd||fffd||fffd||fffd||fffd|"
  wsSheet.Range("C4").Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  wsSheet.Range("D4").Value = "|fffd||fffd||fffd||fffd||fffd||fffd|"

  wsSheet.Rows(4).RowHeight = 21.75

  wsSheet.Columns(1).ColumnWidth = 4
  wsSheet.Columns(2).ColumnWidth = 26.57
  wsSheet.Columns(3).ColumnWidth = 102.57
  wsSheet.Columns(4).ColumnWidth = 17

  wsSheet.Range("B2:D2").Select
  Selection.Merge
  With Selection
    .Font.Bold = True

    .Interior.ColorIndex = xlNone
    .Interior.Pattern = xlSolid
    .Interior.PatternColorIndex = xlAutomatic

    .HorizontalAlignment = xlCenter
    .VerticalAlignment = xlCenter

    .Borders(xlDiagonalDown).LineStyle = xlNone
    .Borders(xlDiagonalUp).LineStyle = xlNone
    .Borders(xlEdgeLeft).LineStyle = xlNone
    .Borders(xlEdgeRight).LineStyle = xlNone

    .Borders(xlEdgeTop).LineStyle = xlContinuous
    .Borders(xlEdgeTop).Weight = xlThin
    .Borders(xlEdgeTop).ColorIndex = 48

    .Borders(xlEdgeBottom).LineStyle = xlContinuous
    .Borders(xlEdgeBottom).Weight = xlThin
    .Borders(xlEdgeBottom).ColorIndex = 48
  End With

  wsSheet.Range("B2").Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  wsSheet.Rows(2).RowHeight = 21.75

  ActiveWindow.DisplayGridlines = False

  wsSheet.cells.Select
  With Selection.Font
    .name = "Tahoma"
    .Size = 9
    .Strikethrough = False
    .Superscript = False
    .Subscript = False
    .OutlineFont = False
    .Shadow = False
  End With

End Sub

Function WorksheetFromCodeName(strCodeName As String) As Worksheet
  Dim wsSheet As Worksheet

  For Each wsSheet In ThisWorkbook.Worksheets
    If wsSheet.CodeName = strCodeName Then Set WorksheetFromCodeName = wsSheet: Exit Function
  Next wsSheet
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub AutoFitMergedCellRowHeight(ByRef rngRange As Range, _
                               Optional ByRef intRowHeight As Integer = 15)
    Dim rngMergeRange As Range
    Dim rngOneRange As Range
    Dim intNewHeight As Integer, lngAllColumnsHeight As Long, lngOldFirstColumnsHeight As Long
    
    If rngRange.MergeCells = False Then
      rngRange.EntireRow.AutoFit
      If intRowHeight > rngRange.EntireRow.Height Then rngRange.EntireRow.RowHeight = intRowHeight
    ElseIf rngRange.cells(1, 1).MergeArea.Rows.Count > 1 And rngRange.cells(1, 1).MergeArea.Columns.Count = 1 Then
      Set rngMergeRange = rngRange.cells(1, 1).MergeArea
      With rngMergeRange
          .UnMerge
          .EntireRow.AutoFit
          intNewHeight = .Rows(1).Height
          .Merge:
      End With
      intNewHeight = intNewHeight / rngMergeRange.Rows.Count + 2
      If intNewHeight < intRowHeight Then intNewHeight = intRowHeight
      For Each rngOneRange In rngMergeRange.Rows
        rngOneRange.RowHeight = intNewHeight
      Next rngOneRange
    ElseIf rngRange.cells(1, 1).MergeArea.Columns.Count > 1 And rngRange.cells(1, 1).MergeArea.Rows.Count = 1 Then
      Set rngMergeRange = rngRange.cells(1, 1).MergeArea
      lngAllColumnsHeight = 0
      lngOldFirstColumnsHeight = rngMergeRange.Columns(1).cells(1, 1).EntireColumn.ColumnWidth
      For Each rngOneRange In rngMergeRange.Columns
        lngAllColumnsHeight = lngAllColumnsHeight + rngOneRange.ColumnWidth
      Next rngOneRange
      rngMergeRange.Columns(1).cells(1, 1).ColumnWidth = lngAllColumnsHeight
      With rngMergeRange.cells(1, 1).MergeArea
          .UnMerge
          .EntireRow.AutoFit
          .Merge
      End With
      rngMergeRange.Columns(1).cells(1, 1).ColumnWidth = lngOldFirstColumnsHeight
    End If
End Sub


Function strHypperlinkExists(strURL As String) As String
  
  On Error GoTo ErrHttpExists
  
  Dim strURLSecondChance As String
  Dim objXHTTP As Object
  Set objXHTTP = CreateObject("MSXML2.XMLHTTP.3.0")

  If InStr(strURL, "www") = 0 And InStr(strURL, "http") = 0 And InStr(strURL, "ftp") = 0 Then strURLSecondChance = "www." & strURL
  If InStr(strURLSecondChance, "www") <> 0 And InStr(strURLSecondChance, "http") = 0 And InStr(strURLSecondChance, "ftp") = 0 Then strURLSecondChance = "https://" & strURLSecondChance
  If InStr(strURL, "www") = 0 And InStr(strURL, "http") = 0 And InStr(strURL, "ftp") = 0 Then strURL = "www." & strURL
  If InStr(strURL, "www") <> 0 And InStr(strURL, "http") = 0 And InStr(strURL, "ftp") = 0 Then strURL = "http://" & strURL

  strHypperlinkExists = vbNullString
  strHypperlinkExists = lngSend_Request(objXHTTP, strURL)
  If strHypperlinkExists <> HTTP_STATUS_OK Then GoTo SecondChance
  GoTo CleanUp
  
SecondChance:
  If Len(Trim(strURLSecondChance)) > 0 Then
    strHypperlinkExists = vbNullString
    strHypperlinkExists = lngSend_Request(objXHTTP, strURLSecondChance)
  End If
  GoTo CleanUp

ErrHttpExists:
  Debug.Print Err.Number
  GoTo CleanUp

CleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP-|fffd||fffd||fffd||fffd||fffd||fffd|
Private Function lngSend_Request(ByRef objXMLHTTP As MSXML2.XMLHTTP, _
                                 ByVal strURL As String)
    
  On Error GoTo ErrHandler
  
  If frmProgressForm Is Nothing Then
    objXMLHTTP.Open bstrMethod:="GET", bstrUrl:=strURL, varAsync:=False
    objXMLHTTP.send
  Else
    objXMLHTTP.Open bstrMethod:="GET", bstrUrl:=strURL, varAsync:=True
    objXMLHTTP.send
    Do While objXMLHTTP.readyState <> 4
      frmProgressForm.ProgressTick
    Loop
  End If
  
  lngSend_Request = objXMLHTTP.status
  
  GoTo CleanUp
  
ErrHandler:
  lngSend_Request = HTTP_STATUS_BAD_REQUEST

CleanUp:
End Function

Attribute VB_Name = "modThisWorkbook"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub Workbook_BeforeSave_Handler(ByVal SaveAsUI As Boolean, Cancel As Boolean, wbBook As Workbook)
  
  Dim wsActiveSheet As Worksheet
  
  Application.Calculate
  Application.ReferenceStyle = xlA1
  Set wsActiveSheet = wbBook.ActiveSheet

  ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(CStr(wbBook.Names("region_name").RefersToRange.cells(1, 1).Value)) = 0 Then
    Exit Sub
  End If

  If modAnimatedFormsGlobals.BLN_SHOW_PROGRESS_FORM_ON_UPDATE_REQUESTS = True Then
    Set frmProgressForm = Try_Show_Message_Window(vbDefaultButton1, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...")
    modProv.WarningsBeforeSaving wbBook
    If Not frmProgressForm Is Nothing Then frmProgressForm.Hide
  Else
    Set frmProgressForm = Nothing
    modProv.WarningsBeforeSaving wbBook
  End If
  
  If modGlobals.glngCriticalImpactWarningsCounter > 0 Then
    wbBook.CustomDocumentProperties("Status") = 1  '|fffd||fffd||fffd||fffd||fffd|
    wsActiveSheet.Activate
    MsgBox modGlobals.SAVE_STATUS_CRITICAL_IMPACT_WARNING, vbCritical + vbOKOnly, modGlobals.SAVE_MESSAGE_TITLE
    wbBook.Worksheets(gstrCheckSheetName).Activate
    wbBook.Worksheets(gstrCheckSheetName).cells(1, 1).Activate
  ElseIf modGlobals.glngLowImpactWarningsCounter > 0 Then
    wbBook.CustomDocumentProperties("Status") = 1  '|fffd||fffd||fffd||fffd||fffd|
    wsActiveSheet.Activate
    MsgBox modGlobals.SAVE_STATUS_LOW_IMPACT_WARNING, vbExclamation + vbOKOnly, modGlobals.SAVE_MESSAGE_TITLE
    wbBook.Worksheets(gstrCheckSheetName).Activate
    wbBook.Worksheets(gstrCheckSheetName).cells(1, 1).Activate
  Else  '|fffd||fffd||fffd||fffd||fffd|
    wsActiveSheet.Activate
    wbBook.CustomDocumentProperties("Status") = 2  '|fffd||fffd||fffd||fffd||fffd|
    MsgBox modGlobals.SAVE_STATUS_SUCCESS, vbInformation, modGlobals.SAVE_MESSAGE_TITLE
  End If

End Sub

Public Sub Workbook_Open_Handler(wbBook As Workbook)
  Application.Calculation = xlCalculationAutomatic  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ReferenceStyle = xlA1  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - A1

  Dim wsSheet As Worksheet
  Dim blnEventsValue As Boolean, blnScreenValue As Boolean
  Dim rngFound As Range
  
  blnMsgBoxActualVersion = False

  If modServiceModule.blnIsDocumentProperty(wbBook, "Status") = True Then
    wbBook.CustomDocumentProperties("Status") = 1  '|fffd||fffd||fffd||fffd||fffd|
  End If

  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If modServiceModule.IsNameExists(wbBook, "chkGetUpdatesValue") = True Then
    If wbBook.Names("chkGetUpdatesValue").RefersToRange.cells(1, 1).Value = "y" Then
      modUpdTemplMain.Check_Update_Execution wbBook
    End If
  End If

  On Error GoTo ErrHandler

  ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(CStr(wbBook.Names("region_name").RefersToRange.cells(1, 1).Value)) = 0 Then
    Exit Sub
  End If

  blnEventsValue = Application.EnableEvents
  blnScreenValue = Application.ScreenUpdating

  Application.EnableEvents = False
  Application.ScreenUpdating = False

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If modAnimatedFormsGlobals.BLN_SHOW_PROGRESS_FORM_ON_UPDATE_REQUESTS = True Then
      Set frmProgressForm = Try_Show_Message_Window(vbDefaultButton1, _
                                                    "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", "")
    Else
      Set frmProgressForm = Nothing
    End If
    modReestr.cmdUpdateOrgData_Click_Handler List00, False

  If Len(Trim(List00.Range("TECH_ORG_ID").Value)) <> 0 Then
    modServiceModule.UNPROTECT_SHEET List00

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Not (modServiceModule.IsNameExists(List00.parent, STR_RANGE_NAME)) Or _
       Not (modServiceModule.SheetExists(STR_REESTR_SHEET_NAME, List00.parent)) Then GoTo CleanUp
    Set wsSheet = List00.parent.Worksheets(STR_REESTR_SHEET_NAME)
    Set rngFound = wsSheet.Range(STR_RANGE_NAME).Columns(7).Find(List00.Range("TECH_ORG_ID").Value, , _
                                                                 LookIn:=xlFormulas, _
                                                                 LookAt:=xlWhole)
    If rngFound Is Nothing Then GoTo CleanUp
    List00.Range("org").Value = wsSheet.cells(rngFound.Row, 8).Value
    List00.Range("inn").Value = wsSheet.cells(rngFound.Row, 9).Value
    List00.Range("kpp").Value = wsSheet.cells(rngFound.Row, 10).Value
''    List00.Range("vdet").Value = wsSheet.cells(rngFound.Row, 11).Value

    Set rngFound = Nothing

    If Not frmProgressForm Is Nothing Then frmProgressForm.Hide
  End If

  GoTo CleanUp

ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp

CleanUp:
  modServiceModule.PROTECT_SHEET List00, True
  If modAnimatedFormsGlobals.BLN_SHOW_PROGRESS_FORM_ON_UPDATE_REQUESTS = True Then
    If Not frmProgressForm Is Nothing Then frmProgressForm.Hide
  Else
    Set frmProgressForm = Nothing
  End If
  Application.EnableEvents = True
  Application.ScreenUpdating = True
End Sub

Attribute VB_Name = "modUpdTemplLogger"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub Clear()
  Log_Clear ThisWorkbook
End Sub

Public Sub Logger_Init(ByVal wbBook As Workbook)
  Log_Clear wbBook
End Sub

Public Sub Add_String(ByVal strMessage As String, _
                      ByVal wbBook As Workbook, _
                      ByVal strExtendedStatus As String)
  If strExtendedStatus = modUpd_Templ_Defines.STR_FORM_STATUS_ERROR Then
    strExtendedStatus = modUpd_Templ_Defines.STR_SHEET_LOG_ERROR
  ElseIf strExtendedStatus = modUpd_Templ_Defines.STR_FORM_STATUS_WARNING Then
    strExtendedStatus = modUpd_Templ_Defines.STR_SHEET_LOG_WARNING
  ElseIf strExtendedStatus = modUpd_Templ_Defines.STR_FORM_STATUS_INFO Then
    strExtendedStatus = modUpd_Templ_Defines.STR_SHEET_LOG_INFO
  End If
  Add_Log_Message strMessage, strExtendedStatus, wbBook
End Sub

Private Sub Log_Clear(ByVal wbBook As Workbook)

  On Error GoTo ErrHandler

  Dim wsSheet As Worksheet
  Dim rngRange As Range
  Dim blnScreenUpdatingPreference As Boolean
  blnScreenUpdatingPreference = wbBook.Application.ScreenUpdating

  If modServiceModule.SheetExists(modUpd_Templ_Defines.STR_LOGGING_SHEET_NAME, wbBook) = True Then
    Set wsSheet = wbBook.Worksheets(modUpd_Templ_Defines.STR_LOGGING_SHEET_NAME)
    If wsSheet.UsedRange.Rows.Count > 1 Then
      wbBook.Application.ScreenUpdating = False
      modServiceModule.UNPROTECT_SHEET wsSheet
      Set rngRange = wsSheet.Range(wsSheet.cells(2, 1), _
                                   wsSheet.cells(wsSheet.UsedRange.Rows.Count, _
                                                 wsSheet.UsedRange.Columns.Count))
      rngRange.EntireRow.Delete
      modServiceModule.PROTECT_SHEET wsSheet, True, , True
    End If
  End If

  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
  wbBook.Application.ScreenUpdating = blnScreenUpdatingPreference
End Sub

Private Sub Add_Log_Message(ByVal strMessage As String, _
                            ByVal strStatus As String, _
                            ByVal wbBook As Workbook)

  On Error GoTo ErrHandler

  Dim wsSheet As Worksheet
  Dim rngRange As Range
  Dim lngLastUsedRow As Long
  Dim blnScreenUpdatingPreference As Boolean
  blnScreenUpdatingPreference = wbBook.Application.ScreenUpdating

  If modServiceModule.SheetExists(modUpd_Templ_Defines.STR_LOGGING_SHEET_NAME, wbBook) = True Then
    Set wsSheet = wbBook.Worksheets(modUpd_Templ_Defines.STR_LOGGING_SHEET_NAME)
    wbBook.Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    lngLastUsedRow = wsSheet.UsedRange.Rows.Count
    wsSheet.cells(lngLastUsedRow + 1, 1).Value = Now()
    wsSheet.cells(lngLastUsedRow + 1, 2).Value = strMessage
    wsSheet.cells(lngLastUsedRow + 1, 3).Value = strStatus
    modServiceModule.PROTECT_SHEET wsSheet, True, , True
    GoTo CleanUp
  End If

  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
  wbBook.Application.ScreenUpdating = blnScreenUpdatingPreference
End Sub

Private Sub cmdClearLog_Click()
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| STR_LOGGING_SHEET_NAME
  modUpdTemplLogger.Logger_Init ThisWorkbook
End Sub
Attribute VB_Name = "modUpdTemplMain"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Private gstrNewVersion As String
Private gstrTemplateCode As String
Private gstrResultUpdate As String
Private gstrPatchFileName As String

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
Public Sub Check_Update_Execution(ByVal wbBook As Workbook)
  Check_Updates wbBook, False
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub cmdCheckForUpdates_Click_Handler()
  blnMsgBoxActualVersion = True
  Check_Updates ThisWorkbook, True
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Check_Updates(ByVal wbBook As Workbook, _
                         Optional blnShowMessage As Boolean = True)
  
  On Error GoTo ErrHandler
  
  Dim strNewVersion As String
  Dim strTemplateCode As String
  Dim strDescription As String

  Dim tviResultSet As TVersionInfo
  Dim vbResult As VbMsgBoxResult
  Dim strCurrentVersion As String
  
  If wbBook Is Nothing Then
    GoTo CleanUp
  End If
  
  strTemplateCode = modServiceModule.varGetDocumentProperty(ThisWorkbook, "Version")
  gstrTemplateCode = strTemplateCode

  If Len(strTemplateCode) = 0 Then
  
    lbInfo_AddInfo "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", STR_FORM_STATUS_WARNING
    GoTo CleanUp
    
  Else
  
    lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", STR_FORM_STATUS_INFO
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    tviResultSet = modUpd_Templ_Caller.Query_Last_Version_Info(strTemplateCode, _
                                                               blnShowMessage)
    
    strNewVersion = tviResultSet.strVersion
    gstrNewVersion = strNewVersion
    strDescription = tviResultSet.strDescription
    
    If Len(strNewVersion) = 0 Then
    
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If blnMsgBoxActualVersion = True Then _
        MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| " & _
                     strTemplateCode, _
               vbInformation, _
               modGlobals.STR_MSGBOX_INFORMATION_TITLE
      
      lbInfo_AddInfo "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| " & _
                     strTemplateCode & "!", STR_FORM_STATUS_INFO
      
      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      If strDescription = "offline" Then
        Set_Update_Availability_Status "Offline"
      Else
        Set_Update_Availability_Status "Act"
      End If
          
      GoTo CleanUp
      
    Else ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
      strCurrentVersion = CStr(ThisWorkbook.CustomDocumentProperties("CurrentVersion").Value)
      
      If Len(strCurrentVersion) = 0 Then
        lbInfo_AddInfo "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", STR_FORM_STATUS_ERROR
        GoTo CleanUp
      End If
    
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If blnIs_New_Version(strCurrentVersion, strNewVersion) = False Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If blnMsgBoxActualVersion = True Then _
          MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & strCurrentVersion & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                 vbInformation, _
                 modGlobals.STR_MSGBOX_INFORMATION_TITLE
        lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & strCurrentVersion & _
                       " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", STR_FORM_STATUS_INFO
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        Set_Update_Availability_Status "Act"
        
        GoTo CleanUp
      End If
      
      lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & tviResultSet.strVersion, STR_FORM_STATUS_INFO
      lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & tviResultSet.strDescription, STR_FORM_STATUS_INFO
      lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CStr(tviResultSet.lngFileSize) & " |fffd||fffd||fffd||fffd|", STR_FORM_STATUS_INFO

      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      Set_Update_Availability_Status "NoAct"
      
      modUpd_Templ_Defines.LNG_UPDATE_MODULE_SIZE = tviResultSet.lngFileSize
      modUpd_Templ_Defines.STR_NEW_VERSION_URL = tviResultSet.strNewVersionURL
      
      If modUpd_Templ_Defines.LNG_UPDATE_MODULE_SIZE > 0 Then
      
        modUpd_Templ_Defines.STR_UPDATE_TO_VERSION = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & tviResultSet.strVersion
        
        modUpd_Templ_Defines.STR_UPDATE_DESCRIPTION = CStr(tviResultSet.strDescription)
        
        modUpd_Templ_Defines.STR_UPDATE_MODULE_ATTRIBUTES = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CStr(tviResultSet.lngFileSize) & " |fffd||fffd||fffd||fffd|"
      
      Else
      
        modUpd_Templ_Defines.STR_UPDATE_TO_VERSION = vbNullString
        
        modUpd_Templ_Defines.STR_UPDATE_DESCRIPTION = vbNullString
        
        modUpd_Templ_Defines.STR_UPDATE_MODULE_ATTRIBUTES = vbNullString
      
      End If
      
      frmCheckUpdates.Show vbModal

      If modUpd_Templ_Defines.BLN_INSTALL_UPDATES = True Then
      
        lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", STR_FORM_STATUS_INFO
        
        Init_Update ThisWorkbook, strTemplateCode, strNewVersion
      
      Else
      
        lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", STR_FORM_STATUS_WARNING
        
      End If

    End If
  
  End If

  GoTo Success

Success:
  GoTo CleanUp
ErrHandler:
  lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", STR_FORM_STATUS_ERROR
  GoTo CleanUp
CleanUp:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Public Sub cmdPerformUpdate_Click_Handler()
  
  lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", STR_FORM_STATUS_INFO
  
  Init_Update ThisWorkbook, gstrTemplateCode, gstrNewVersion

End Sub

Private Sub Init_Update(ByRef wbBook As Workbook, _
                        ByVal strTemplateCode As String, _
                        ByVal strNewVersion As String)
  
  On Error GoTo ErrHandler
  
  Dim strBackupFileName As String
  Dim strCurrentWBPath As String
  Dim strCurrentWBName As String
  
  Dim wbBackupWorkbook As Workbook
  Dim wbUpdatingWorkbook As Workbook
  
  Dim strWorkbookName As String
  Dim strFileExtension As String
  Dim lngFileFormatNum As Long
  
  If wbBook Is Nothing Or _
     Len(strTemplateCode) = 0 Or _
     Len(strNewVersion) = 0 Then
    GoTo CleanUp
  End If
  
  Set wbBackupWorkbook = wbBook
  
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  strBackupFileName = Application.GetSaveAsFilename(wbBackupWorkbook.FullName, , , _
                                                    "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")

  If CStr(strBackupFileName) = "False" Then
    lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", STR_FORM_STATUS_WARNING
  Else
    
    strCurrentWBPath = wbBackupWorkbook.Path
    strCurrentWBName = wbBackupWorkbook.name
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Define_File_Name_Extension_Format wbBackupWorkbook, strWorkbookName, _
                                      strFileExtension, lngFileFormatNum
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Mid(strBackupFileName, _
           Len(strBackupFileName) - Len(strFileExtension) + 1, _
           Len(strFileExtension)) <> strFileExtension Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If InStr(Len(strBackupFileName) - 1, strBackupFileName, ".") > 0 Then ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| "."
        strBackupFileName = strBackupFileName & "BKP." & Mid(strFileExtension, 2, Len(strFileExtension) - 1)
      Else
        strBackupFileName = strBackupFileName & ".BKP." & strFileExtension
      End If
    Else
      strBackupFileName = Mid(strBackupFileName, 1, _
                              Len(strBackupFileName) - Len(strFileExtension)) & ".BKP." & strFileExtension
    End If
    
    If val(Application.Version) < 12 Then
      ' You use Excel 97-2003
    Else
      ' You use Excel 2007-2010
      wbBackupWorkbook.CheckCompatibility = False
    End If
    
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    
    lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & strBackupFileName, STR_FORM_STATUS_INFO
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    wbBackupWorkbook.SaveAs Filename:=strBackupFileName, _
                            FileFormat:=wbBackupWorkbook.FileFormat
    
    lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & strBackupFileName, STR_FORM_STATUS_INFO
    
    lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", STR_FORM_STATUS_INFO
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set wbUpdatingWorkbook = wbBackupWorkbook
    
    wbUpdatingWorkbook.SaveAs Filename:=strCurrentWBPath & "\" & strCurrentWBName, _
                              FileFormat:=wbUpdatingWorkbook.FileFormat
    
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    
    wbUpdatingWorkbook.Activate
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Download_Update wbUpdatingWorkbook, strTemplateCode, strNewVersion

  End If
  
  GoTo Success

Success:
  GoTo CleanUp
ErrHandler:
  lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", STR_FORM_STATUS_ERROR
  GoTo CleanUp
CleanUp:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Download_Update(ByRef wbBook As Workbook, _
                           ByVal strTemplateCode As String, _
                           ByVal strNewVersion As String)
                               
  On Error GoTo ErrHandler

  Dim strResult As String
  
  If Not wbBook Is Nothing And _
     Len(strTemplateCode) > 0 And _
     Len(strNewVersion) > 0 Then
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    strResult = strStart_Update(wbBook, strTemplateCode, strNewVersion)
  
    If InStr(1, strResult, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: ") > 0 Then
      
      GoTo Success
   
    End If
    
  Else
    
    Application.ScreenUpdating = True
    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical, modGlobals.STR_MSGBOX_WARNING_TITLE
    lbInfo_AddInfo "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", STR_FORM_STATUS_WARNING
    
  End If
  
  GoTo CleanUp
  
Success:
      
  lbInfo_AddInfo strResult, STR_FORM_STATUS_INFO
  
  GoTo CleanUp
ErrHandler:
  GoTo CleanUp
CleanUp:
  Application.DisplayAlerts = True
  Application.EnableEvents = True
  Application.Calculation = xlCalculationAutomatic
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Function strStart_Update(ByRef wbBook As Workbook, _
                                 ByVal strTemplateCode As String, _
                                 ByVal strNewVersion As String) As String

  On Error GoTo ErrHandler

  Dim strTempFileName As String
  Dim strResultFileName As String
  Dim wsSheet As Worksheet
  
  Dim wbBookWithUpdates As Workbook
  
  strStart_Update = vbNullString
  Randomize
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| xls...
  strTempFileName = wbBook.Path & "\UPDATE." & _
                    strTemplateCode & ".TO." & _
                    strNewVersion & "." & _
                    CStr(CInt((90 * Rnd) + 1)) & ".xls"
  gstrPatchFileName = strTempFileName
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  strResultFileName = modUpd_Templ_Caller.Query_Update(strTempFileName, strTemplateCode, strNewVersion)
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...
  If Len(Dir(strResultFileName)) = 0 Then
    strStart_Update = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!"
    GoTo ErrHandler
  End If
  
  Application.ScreenUpdating = False
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  Set wbBookWithUpdates = Application.Workbooks.Open(Filename:=strTempFileName, _
                                                     UpdateLinks:=False, _
                                                     ReadOnly:=False)
                                             
  If wbBookWithUpdates Is Nothing Then
    strStart_Update = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
    GoTo CleanUp
  End If
  
  wbBookWithUpdates.Activate
  
  If modServiceModule.SheetExists("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", wbBookWithUpdates) = True Then
    wbBookWithUpdates.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").AutoUpdate wbBook
  ElseIf modServiceModule.SheetExists("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", wbBookWithUpdates) = True Then
    wbBookWithUpdates.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").AutoUpdate wbBook
  Else
    strStart_Update = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
    GoTo CleanUp
  End If
  
  strStart_Update = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & strTempFileName
  
  GoTo Success
  
Success:
  GoTo CleanUp
ErrHandler:
  Application.ScreenUpdating = True
  MsgBox strStart_Update, vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  lbInfo_AddInfo strStart_Update, STR_FORM_STATUS_ERROR
  GoTo CleanUp
CleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub AutoUpdateReturn(ByVal strResult As String)

  gstrResultUpdate = strResult
  Application.OnTime Now + TimeValue("0:00:1"), "modUpdTemplMain.ApplyUpdate"
  
End Sub

Sub ApplyUpdate()

  On Error Resume Next
  
  If modUpd_Templ_Defines.BLN_SAVE_UPDATE_MODULE = False Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If Dir(gstrPatchFileName) <> "" Then
      Kill gstrPatchFileName
    End If
  End If
  
  If Mid(gstrResultUpdate, 1, 3) = "ERR" Then
    lbInfo_AddInfo Mid(gstrResultUpdate, 4), STR_FORM_STATUS_ERROR
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd|. ""|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"")", vbExclamation
  Else
    lbInfo_AddInfo Mid(gstrResultUpdate, 4), STR_FORM_STATUS_INFO
    MsgBox Mid(gstrResultUpdate, 4), vbInformation
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Set_Update_Availability_Status "Act"
    ' Force update "version" field
    modServiceModule.UNPROTECT_SHEET ThisWorkbook.Names("version").RefersToRange.parent
    ThisWorkbook.Names("version").RefersToRange.cells(1, 1).Formula = "=""|fffd||fffd||fffd||fffd||fffd||fffd| "" & GetVersion()"
    modServiceModule.PROTECT_SHEET ThisWorkbook.Names("version").RefersToRange.parent, True
    ' Force update "code" field
    modServiceModule.UNPROTECT_SHEET ThisWorkbook.Names("code").RefersToRange.parent
    ThisWorkbook.Names("code").RefersToRange.cells(1, 1).Formula = "=""|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: "" & GetCode()"
    modServiceModule.PROTECT_SHEET ThisWorkbook.Names("code").RefersToRange.parent, True
  End If
  
End Sub

Private Sub lbInfo_AddInfo(ByVal strValue As String, _
                           ByVal strStatus As String, _
                           Optional blnAddLogToSheet As Boolean = True)

  If blnAddLogToSheet = True Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| STR_LOGGING_SHEET_NAME
    modUpdTemplLogger.Add_String strValue, ThisWorkbook, strStatus
  End If

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Function blnIs_UserForm_Loaded(ByVal strFormName As String) As Boolean

  Dim lngICounter As Long

  blnIs_UserForm_Loaded = False
  For lngICounter = 0 To UserForms.Count - 1
    If UserForms(lngICounter).name = strFormName Then
      blnIs_UserForm_Loaded = True
      Exit Function
    End If
  Next lngICounter

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Sub Define_File_Name_Extension_Format(ByRef wbSourceBook As Workbook, _
                                              ByRef strWorkbookName As String, _
                                              ByRef strFileExtension As String, _
                                              ByRef lngFileFormatNum As Long)

  On Error GoTo ErrHandler
  
  Dim strOrigFileName As String
  Dim lngExtPosition As Long
  
  If wbSourceBook Is Nothing Then
    GoTo CleanUp
  End If
  
  strOrigFileName = wbSourceBook.name
  
  lngExtPosition = InStrRev(strOrigFileName, ".")
  strWorkbookName = Mid(strOrigFileName, 1, lngExtPosition - 1) ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  
  ' Determine the Excel version and file extension/format
  With wbSourceBook
    If val(Application.Version) < 12 Then
      ' You use Excel 97-2003
      strFileExtension = ".xls"
      lngFileFormatNum = -4143
    Else
      ' You use Excel 2007-2010
      ' 51 = xlOpenXMLWorkbook (without macro's in 2007-2010, xlsx)
      ' 52 = xlOpenXMLWorkbookMacroEnabled (with or without macro's in 2007-2010, xlsm)
      ' 50 = xlExcel12 (Excel Binary Workbook in 2007-2010 with or without macro's, xlsb)
      ' 56 = xlExcel8 (97-2003 format in Excel 2007-2010, xls)
      Select Case .FileFormat
        Case 51
          strFileExtension = ".xlsx"
          lngFileFormatNum = 51
        Case 52
          If .HasVBProject Then
            strFileExtension = ".xlsm"
            lngFileFormatNum = 52
          Else
            strFileExtension = ".xlsx"
            lngFileFormatNum = 51
          End If
        Case 56
          strFileExtension = ".xls"
          lngFileFormatNum = 56
        Case Else
          strFileExtension = ".xlsb"
          lngFileFormatNum = 50
      End Select
    End If
  End With

  GoTo Success

Success:
  GoTo CleanUp
ErrHandler:
  GoTo CleanUp
CleanUp:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:
'  |fffd||fffd||fffd||fffd| strCurrentVersion < strNewVersion, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE, |fffd||fffd||fffd||fffd||fffd| FALSE
Public Function blnIs_New_Version(ByVal strVersionOld As String, _
                                  ByVal strVersionNew As String) As Boolean
           
  On Error GoTo ErrHandler
  
  Dim strNumbersOld() As String
  Dim strNumbersNew() As String
  Dim lngICounter As Long
  
  strNumbersOld = Split(strVersionOld, ".")
  strNumbersNew = Split(strVersionNew, ".")
  blnIs_New_Version = False
  lngICounter = 0
  
  Do While lngICounter <= UBound(strNumbersOld) And lngICounter <= UBound(strNumbersNew)
    If CLng(val(strNumbersOld(lngICounter))) > CLng(strNumbersNew(lngICounter)) Then
      blnIs_New_Version = False
      GoTo CleanUp
    ElseIf CLng(val(strNumbersOld(lngICounter))) < CLng(strNumbersNew(lngICounter)) Then
      blnIs_New_Version = True
      GoTo CleanUp
    End If
    lngICounter = lngICounter + 1
  Loop
  
  If UBound(strNumbersOld) < UBound(strNumbersNew) Then
    blnIs_New_Version = True
  End If
  
  GoTo CleanUp
  
ErrHandler:
  blnIs_New_Version = True
  GoTo CleanUp
CleanUp:
End Function

Private Sub ClearBrokenNamesInActiveWorkbook(ByVal wbBookToFix As Workbook)

  Dim nam As name
  
  For Each nam In wbBookToFix.Names
    If (InStr(1, nam.Value, "\", vbTextCompare) > 0) _
       Or (InStr(1, nam.Value, "REF", vbTextCompare) > 0) _
       Or (InStr(1, nam.Value, "#", vbTextCompare) > 0) _
       Or (InStr(1, nam.Value, "xls", vbTextCompare) > 0) _
       Or (InStr(1, nam.Value, "/", vbTextCompare) > 0) _
       Or (InStr(1, nam.name, "!", vbTextCompare) > 0) _
       Or (InStr(1, nam.name, "?", vbTextCompare) > 0) Then
      nam.Delete
    End If
  Next nam

End Sub

Private Function Set_Update_Availability_Status(strStatus As String)
  
  On Error GoTo ErrHandler
  
  modServiceModule.UNPROTECT_SHEET Instruction
  
  Select Case strStatus
    Case "Act":
      Instruction.Shapes("cmdAct_1").Visible = True
      Instruction.Shapes("cmdAct_2").Visible = True
      Instruction.Shapes("cmdNoAct_1").Visible = False
      Instruction.Shapes("cmdNoAct_2").Visible = False
      Instruction.Shapes("cmdNoInet_1").Visible = False
      Instruction.Shapes("cmdNoInet_2").Visible = False
    Case "NoAct":
      Instruction.Shapes("cmdAct_1").Visible = False
      Instruction.Shapes("cmdAct_2").Visible = False
      Instruction.Shapes("cmdNoAct_1").Visible = True
      Instruction.Shapes("cmdNoAct_2").Visible = True
      Instruction.Shapes("cmdNoInet_1").Visible = False
      Instruction.Shapes("cmdNoInet_2").Visible = False
    Case "Offline":
      Instruction.Shapes("cmdAct_1").Visible = False
      Instruction.Shapes("cmdAct_2").Visible = False
      Instruction.Shapes("cmdNoAct_1").Visible = False
      Instruction.Shapes("cmdNoAct_2").Visible = False
      Instruction.Shapes("cmdNoInet_1").Visible = True
      Instruction.Shapes("cmdNoInet_2").Visible = True
  End Select
  
  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
  modServiceModule.PROTECT_SHEET Instruction, True
End Function

Attribute VB_Name = "modUpd_Templ_Caller"
Option Explicit
Option Base 1

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function Query_Last_Version_Info(ByVal strTemplateCode As String, _
                                        Optional blnShowMessage As Boolean = True) As TVersionInfo
              
  On Error GoTo ErrHandler
  
  Dim strXMLTagNames(4) As String
  
  If Len(strTemplateCode) = 0 Then
    GoTo CleanUp
  End If
  
  strXMLTagNames(1) = "VERSION"
  strXMLTagNames(2) = "DESCRIPTION_UPDATE"
  strXMLTagNames(3) = "FILE_UPDATE_SIZE"
  strXMLTagNames(4) = "NEW_VERSION_URL"
  
  Query_Last_Version_Info = modUpd_Templ_HTTP_Request.tviQuery_Update_Info(strXMLTagNames, strTemplateCode, blnShowMessage)
  
  GoTo CleanUp
  
ErrHandler:
  GoTo CleanUp
CleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function Query_Update(ByVal strTempFileName As String, _
                             ByVal strTemplateCode As String, _
                             ByVal strVersion As String) As String
              
  On Error GoTo ErrHandler
  
  If Len(strTemplateCode) = 0 Or _
     Len(strVersion) = 0 Then
    GoTo CleanUp
  End If
  
  Query_Update = modUpd_Templ_HTTP_Request.strQuery_Update(strTempFileName, strTemplateCode, strVersion)
  
  GoTo CleanUp
  
ErrHandler:
  GoTo CleanUp
CleanUp:
End Function

Attribute VB_Name = "modUpd_Templ_Defines"
Option Explicit

' |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Type TVersionInfo
  strVersion As String
  strDescription As String
  lngFileSize As Long
  strNewVersionURL As String
End Type

Public Const STR_UI_UPDATE_SHEET_NAME As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const STR_LOGGING_SHEET_NAME As String = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

Public Const MS_EXCEL_2003_EXTENSIONS_LIST As String = "*.xls"
Public Const MS_EXCEL_2007_EXTENSIONS_LIST As String = "*.xls; *.xlsm; *.xlsx"

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|..." (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public Const gblnFeatureDataDownloadAvailable As Boolean = False
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public Const gblnFeatureUpdateTemplateAvailable As Boolean = True

Public Const STR_FORM_STATUS_ERROR As String = "ERR"
Public Const STR_FORM_STATUS_WARNING As String = "WARNING"
Public Const STR_FORM_STATUS_INFO As String = "INFO"

Public Const STR_SHEET_LOG_ERROR As String = "|fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const STR_SHEET_LOG_WARNING As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const STR_SHEET_LOG_INFO As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

Public BLN_INSTALL_UPDATES As Boolean
Public BLN_SAVE_UPDATE_MODULE As Boolean
Public LNG_UPDATE_MODULE_SIZE As Long

Public STR_UPDATE_DESCRIPTION As String
Public STR_UPDATE_TO_VERSION As String
Public STR_UPDATE_MODULE_ATTRIBUTES As String
Public STR_NEW_VERSION_URL As String
Attribute VB_Name = "modUpd_Templ_HTTP_Request"
Option Explicit
Option Base 1

' === These constants and corresponding values indicate HTTP status codes returned by servers on the Internet. ===
Public Const HTTP_STATUS_CONTINUE As Long = 100  ' The request can be continued.
Public Const HTTP_STATUS_SWITCH_PROTOCOLS As Long = 101  ' The server has switched protocols in an upgrade header.
Public Const HTTP_STATUS_OK As Long = 200                 ' The request completed successfully.
Public Const HTTP_STATUS_CREATED As Long = 201  ' The request has been fulfilled and resulted in the creation of a new resource.
Public Const HTTP_STATUS_ACCEPTED As Long = 202  ' The request has been accepted for processing, but the processing has not been completed.
Public Const HTTP_STATUS_PARTIAL As Long = 203  ' The returned meta information in the entity-header is not the definitive set available from the originating server.
Public Const HTTP_STATUS_NO_CONTENT As Long = 204  ' The server has fulfilled the request, but there is no new information to send back.
Public Const HTTP_STATUS_RESET_CONTENT As Long = 205  ' The request has been completed, and the client program should reset the document view that caused the request to be sent to allow the user to easily initiate another input action.
Public Const HTTP_STATUS_PARTIAL_CONTENT As Long = 206  ' The server has fulfilled the partial GET request for the resource.
Public Const HTTP_STATUS_WEBDAV_MULTI_STATUS As Long = 207  ' During a World Wide Web Distributed Authoring and Versioning (WebDAV) operation, this indicates multiple status codes for a single response. The response body contains Extensible Markup Language (XML) that describes the status codes. For more information, see HTTP Extensions for Distributed Authoring.
Public Const HTTP_STATUS_AMBIGUOUS As Long = 300  ' The requested resource is available at one or more locations.
Public Const HTTP_STATUS_MOVED As Long = 301                 ' The requested resource has been assigned to a new permanent Uniform Resource Identifier (URI), and any future references to this resource should be done using one of the returned URIs.
Public Const HTTP_STATUS_REDIRECT As Long = 302  ' The requested resource resides temporarily under a different URI.
Public Const HTTP_STATUS_REDIRECT_METHOD As Long = 303  ' The response to the request can be found under a different URI and should be retrieved using a GET HTTP verb on that resource.
Public Const HTTP_STATUS_NOT_MODIFIED As Long = 304  ' The requested resource has not been modified.
Public Const HTTP_STATUS_USE_PROXY As Long = 305  ' The requested resource must be accessed through the proxy given by the location field.
Public Const HTTP_STATUS_REDIRECT_KEEP_VERB As Long = 307  ' The redirected request keeps the same HTTP verb. HTTP/1.1 behavior.
Public Const HTTP_STATUS_BAD_REQUEST As Long = 400  ' The request could not be processed by the server due to invalid syntax.
Public Const HTTP_STATUS_DENIED As Long = 401  ' The requested resource requires user authentication.
Public Const HTTP_STATUS_PAYMENT_REQ As Long = 402  ' Not implemented in the HTTP protocol.
Public Const HTTP_STATUS_FORBIDDEN As Long = 403  ' The server understood the request, but cannot fulfill it.
Public Const HTTP_STATUS_NOT_FOUND As Long = 404  ' The server has not found anything that matches the requested URI.
Public Const HTTP_STATUS_BAD_METHOD As Long = 405  ' The HTTP verb used is not allowed.
Public Const HTTP_STATUS_NONE_ACCEPTABLE As Long = 406  ' No responses acceptable to the client were found.
Public Const HTTP_STATUS_PROXY_AUTH_REQ As Long = 407  ' Proxy authentication required.
Public Const HTTP_STATUS_REQUEST_TIMEOUT As Long = 408  ' The server timed out waiting for the request.
Public Const HTTP_STATUS_CONFLICT As Long = 409  ' The request could not be completed due to a conflict with the current state of the resource. The user should resubmit with more information.
Public Const HTTP_STATUS_GONE As Long = 410                 ' The requested resource is no longer available at the server, and no forwarding address is known.
Public Const HTTP_STATUS_LENGTH_REQUIRED As Long = 411  ' The server cannot accept the request without a defined content length.
Public Const HTTP_STATUS_PRECOND_FAILED As Long = 412  ' The precondition given in one or more of the request header fields evaluated to false when it was tested on the server.
Public Const HTTP_STATUS_REQUEST_TOO_LARGE As Long = 413  ' The server cannot process the request because the request entity is larger than the server is able to process.
Public Const HTTP_STATUS_URI_TOO_LONG As Long = 414  ' The server cannot service the request because the request URI is longer than the server can interpret.
Public Const HTTP_STATUS_UNSUPPORTED_MEDIA As Long = 415  ' The server cannot service the request because the entity of the request is in a format not supported by the requested resource for the requested method.
Public Const HTTP_STATUS_RETRY_WITH As Long = 449  ' The request should be retried after doing the appropriate action.
Public Const HTTP_STATUS_SERVER_ERROR As Long = 500  ' The server encountered an unexpected condition that prevented it from fulfilling the request.
Public Const HTTP_STATUS_NOT_SUPPORTED As Long = 501  ' The server does not support the functionality required to fulfill the request.
Public Const HTTP_STATUS_BAD_GATEWAY As Long = 502  ' The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.
Public Const HTTP_STATUS_SERVICE_UNAVAIL As Long = 503  ' The service is temporarily overloaded.
Public Const HTTP_STATUS_GATEWAY_TIMEOUT As Long = 504  ' The request was timed out waiting for a gateway.
Public Const HTTP_STATUS_VERSION_NOT_SUP As Long = 505  ' The server does not support the HTTP protocol version that was used in the request message.

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function tviQuery_Update_Info(ByRef strXMLTagNames() As String, _
                                     ByVal strTemplateCode As String, _
                                     Optional blnShowMessage As Boolean = True) As TVersionInfo

  On Error GoTo ErrHandler

  Dim strURL As String
  Dim lngICounter As Long
  Dim lngNumberOfQueryFields As Long

  Dim lngRequestCounter As Long
  Dim strBaseURL(4) As String

  Dim blnSuccessfulRequest As Boolean

  If Len(strTemplateCode) > 0 Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL-|fffd||fffd||fffd||fffd||fffd||fffd|
    strURL = STR_HTTP_REQUEST_PROC_GET_UPDATE_INFO_NAME & _
             STR_HTTP_REQUEST_PROC_GET_UPDATE_INFO_PARAM_1 & strTemplateCode
  Else
    GoTo ErrHandler
  End If

  Dim tviResult As TVersionInfo
  tviResult.lngFileSize = 0
  tviResult.strDescription = vbNullString
  tviResult.strVersion = vbNullString
  tviResult.strNewVersionURL = vbNullString

  For lngICounter = 1 To UBound(strXMLTagNames)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Len(strXMLTagNames(lngICounter)) = 0 Then
      GoTo ErrHandler
    End If
  Next lngICounter

  lngNumberOfQueryFields = UBound(strXMLTagNames)

  ' Check Internet Connection Status
  If modInternetConnectionState.blnIsOnLine = False Then
    GoTo Offline
  End If

  Dim lngRequestStatus As Long  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

  ' HTTP Request
  Dim objXMLHTTP As MSXML2.XMLHTTP
  Dim objXMLDOMDocument As MSXML2.DOMDocument

  Set objXMLHTTP = CreateObject("MSXML2.XMLHTTP.3.0")

  strBaseURL(1) = STR_HTTP_REQUEST_BASE_URL_1
  strBaseURL(2) = STR_HTTP_REQUEST_BASE_URL_2
  strBaseURL(3) = STR_HTTP_REQUEST_BASE_URL_3
  strBaseURL(4) = STR_HTTP_REQUEST_BASE_URL_4

  blnSuccessfulRequest = False

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| DNS...
  For lngRequestCounter = LBound(strBaseURL) To UBound(strBaseURL)

    On Error GoTo TryNextDNS

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP-|fffd||fffd||fffd||fffd||fffd||fffd|...
    lngRequestStatus = lngSend_Request(objXMLHTTP, objXMLDOMDocument, strBaseURL(lngRequestCounter) & strURL)

    If Not lngRequestStatus = HTTP_STATUS_OK Then
      GoTo TryNextDNS
    End If

    If objXMLDOMDocument Is Nothing Then
      GoTo TryNextDNS
    End If

    If objXMLDOMDocument.DocumentElement Is Nothing Then
      GoTo TryNextDNS
    End If

    If objXMLDOMDocument.DocumentElement.ChildNodes Is Nothing Then
      GoTo TryNextDNS
    End If

    If objXMLDOMDocument.DocumentElement.ChildNodes.Length >= 0 Then
      blnSuccessfulRequest = True
      Exit For
    End If

TryNextDNS:
  Next lngRequestCounter


  On Error GoTo ErrHandler
  
  If blnSuccessfulRequest = False Then
    GoTo ErrHandler
  End If

  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim strMaxVersion As String
  Dim strDescription As String
  Dim strFileSize As String
  Dim strNewVersionURL As String
  
  If objXMLDOMDocument.DocumentElement.ChildNodes.Length > 0 Then

    For lngICounter = 0 To objXMLDOMDocument.DocumentElement.ChildNodes.Length - 1

      Dim rec As MSXML2.IXMLDOMElement
      Set rec = objXMLDOMDocument.DocumentElement.ChildNodes.Item(lngICounter)

      If Len(strMaxVersion) = 0 Then

        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        strMaxVersion = rec.getElementsByTagName(strXMLTagNames(1)).Item(0).Text          ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd|"
        strDescription = rec.getElementsByTagName(strXMLTagNames(2)).Item(0).Text         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        strFileSize = rec.getElementsByTagName(strXMLTagNames(3)).Item(0).Text            ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        strNewVersionURL = rec.getElementsByTagName(strXMLTagNames(4)).Item(0).Text       ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"

      Else

        ' 1.2.5 : 1 - |fffd||fffd||fffd| MasterVersion, 2 - |fffd||fffd||fffd| SubVersion, 5 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        
        If modUpdTemplMain.blnIs_New_Version(strMaxVersion, rec.getElementsByTagName(strXMLTagNames(1)).Item(0).Text) = True Then
          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          strMaxVersion = rec.getElementsByTagName(strXMLTagNames(1)).Item(0).Text        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          strDescription = rec.getElementsByTagName(strXMLTagNames(2)).Item(0).Text       ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
          strFileSize = rec.getElementsByTagName(strXMLTagNames(3)).Item(0).Text          ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
          strNewVersionURL = rec.getElementsByTagName(strXMLTagNames(4)).Item(0).Text     ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If

      End If

    Next lngICounter

  End If

  If Len(strFileSize) = 0 Then
    tviResult.lngFileSize = 0
  Else
    tviResult.lngFileSize = CLng(strFileSize)
  End If
  tviResult.strDescription = strDescription
  tviResult.strVersion = strMaxVersion
  tviResult.strNewVersionURL = strNewVersionURL

  GoTo Success

Success:
  GoTo CleanUp
ErrHandler:
  If blnShowMessage = True Then
    MsgBox STR_UPDATE_FAILED, vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  End If
  GoTo CleanUp
Offline:
''  Instruction.Shapes("cmdAct_1").Visible = False
''  Instruction.Shapes("cmdAct_2").Visible = False
''  Instruction.Shapes("cmdNoAct_1").Visible = False
''  Instruction.Shapes("cmdNoAct_2").Visible = False
''  Instruction.Shapes("cmdNoInet_1").Visible = True
''  Instruction.Shapes("cmdNoInet_2").Visible = True
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  tviResult.strDescription = "offline"
  tviResult.strVersion = vbNullString
  tviResult.strNewVersionURL = vbNullString
  If blnShowMessage = True Then
    MsgBox STR_INET_CONNECTION_IS_OFFLINE, vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  End If
  GoTo CleanUp
CleanUp:
  tviQuery_Update_Info = tviResult
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function strQuery_Update(ByVal strFullFileName As String, _
                                ByVal strTemplateCode As String, _
                                ByVal strVersion As String) As String

  On Error GoTo ErrHandler

  Dim strURL As String

  Dim lngRequestCounter As Long
  Dim strBaseURL(4) As String

  If Len(strFullFileName) > 0 And _
     Len(strTemplateCode) > 0 And _
     Len(strVersion) > 0 Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL-|fffd||fffd||fffd||fffd||fffd||fffd|
    strURL = STR_HTTP_REQUEST_PROC_GET_UPDATE_NAME & _
             STR_HTTP_REQUEST_PROC_GET_UPDATE_PARAM_1 & strTemplateCode & "&" & _
             STR_HTTP_REQUEST_PROC_GET_UPDATE_PARAM_2 & strVersion
  Else
    GoTo ErrHandler
  End If

  Dim lngRequestStatus As Long  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

  Dim lngFileNum As Long
  Dim bytFileData() As Byte
  Dim strMyFile As String
  Dim objWHTTP As Object

  On Error Resume Next

  Set objWHTTP = CreateObject("WinHTTP.WinHTTPrequest.5")
  If Err.Number <> 0 Then
    Set objWHTTP = CreateObject("WinHTTP.WinHTTPrequest.5.1")
  End If

  On Error GoTo 0

  strBaseURL(1) = STR_HTTP_REQUEST_BASE_URL_1
  strBaseURL(2) = STR_HTTP_REQUEST_BASE_URL_2
  strBaseURL(3) = STR_HTTP_REQUEST_BASE_URL_3
  strBaseURL(4) = STR_HTTP_REQUEST_BASE_URL_4

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| DNS...
  For lngRequestCounter = LBound(strBaseURL) To UBound(strBaseURL)

    On Error GoTo TryNextDNS

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP-|fffd||fffd||fffd||fffd||fffd||fffd|...
    lngRequestStatus = lngSend_File_Request(objWHTTP, strBaseURL(lngRequestCounter) & strURL)

    If Not lngRequestStatus = HTTP_STATUS_OK Then
      GoTo TryNextDNS
    End If

    bytFileData = objWHTTP.responseBody

    If UBound(bytFileData) > 100 Then  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|...

      Set objWHTTP = Nothing

      lngFileNum = FreeFile
      Open strFullFileName For Binary Access Write As lngFileNum
      Put lngFileNum, 1, bytFileData
      Close lngFileNum

      GoTo Success

    End If

TryNextDNS:
  Next lngRequestCounter

  Select Case lngRequestStatus
  Case HTTP_STATUS_OK
    ' Successful, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd|...
    strQuery_Update = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Case HTTP_STATUS_NO_CONTENT
    strQuery_Update = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [HTTP_STATUS_NO_CONTENT}"
  Case HTTP_STATUS_PROXY_AUTH_REQ
    strQuery_Update = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: [HTTP_STATUS_PROXY_AUTH_REQ]"
  Case HTTP_STATUS_BAD_GATEWAY
    strQuery_Update = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: [HTTP_STATUS_BAD_GATEWAY]"
  Case HTTP_STATUS_NOT_FOUND
    strQuery_Update = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: [HTTP_STATUS_NOT_FOUND}"
  Case HTTP_STATUS_BAD_REQUEST
    strQuery_Update = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: [HTTP_STATUS_BAD_REQUEST]"
  Case HTTP_STATUS_BAD_METHOD
    strQuery_Update = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: [HTTP_STATUS_BAD_METHOD]"
  Case Else
    strQuery_Update = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| [" & lngRequestStatus & "]"
  End Select

  GoTo ErrHandler

Success:
  strQuery_Update = strFullFileName
  GoTo CleanUp
ErrHandler:
  If Len(strQuery_Update) = 0 Then
    strQuery_Update = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| [UNDEFINED]"
  End If
  MsgBox strQuery_Update, vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  GoTo CleanUp
CleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Delete_Existing_Name_In_Workbook(wbBook As Workbook, _
                                            strNameOfRange As String)
  On Error GoTo ErrHandler
  If wbBook Is Nothing Or _
     Len(strNameOfRange) = 0 Then
    GoTo ErrHandler
  End If
  wbBook.Names(strNameOfRange).Delete
ErrHandler:
End Sub

Public Sub SaveXML(ByVal wbBook As Workbook, _
                   ByVal strXML As String)

  Dim FileNo As Long
  FileNo = FreeFile

  Open wbBook.Path & "\" & "Save.txt" For Output As FileNo

  Print #FileNo, strXML

  Close FileNo

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP-|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
Private Function lngSend_File_Request(ByRef objWHTTP As Object, _
                                      ByVal strURL As String) As Long

  On Error GoTo ErrHandler

  objWHTTP.Open "GET", strURL, False
  objWHTTP.send

  lngSend_File_Request = objWHTTP.status

  GoTo CleanUp

ErrHandler:
  lngSend_File_Request = HTTP_STATUS_BAD_REQUEST
  GoTo CleanUp
CleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP-|fffd||fffd||fffd||fffd||fffd||fffd|
Private Function lngSend_Request(ByRef objXMLHTTP As MSXML2.XMLHTTP, _
                                 ByRef objXMLDOMDocument As MSXML2.DOMDocument, _
                                 ByVal strURL As String) As Long

  On Error GoTo ErrHandler

  objXMLHTTP.Open bstrMethod:="GET", bstrUrl:=strURL, varAsync:=False
  objXMLHTTP.send

  Set objXMLDOMDocument = objXMLHTTP.responseXML

  lngSend_Request = objXMLHTTP.status

  If modGlobals.gblnTestMode = True Then
    Debug.Print objXMLDOMDocument.Text
  End If

  GoTo CleanUp

ErrHandler:
  lngSend_Request = HTTP_STATUS_BAD_REQUEST
  GoTo CleanUp
CleanUp:
End Function

Attribute VB_Name = "modfrmCheckUpdates"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub cmdInstallUpdates_Click_Handler()

  On Error GoTo ErrHandler

  modUpd_Templ_Defines.BLN_INSTALL_UPDATES = True
  modUpd_Templ_Defines.BLN_SAVE_UPDATE_MODULE = frmCheckUpdates.chkSaveAutoUpdateModule.Value

  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
  If blnIs_UserForm_Loaded(frmCheckUpdates.name) = True Then
    Unload frmCheckUpdates
  End If
End Sub

Public Sub cmdCancelUpdates_Click_Handler()

  On Error GoTo ErrHandler

  modUpd_Templ_Defines.BLN_INSTALL_UPDATES = False
  modUpd_Templ_Defines.BLN_SAVE_UPDATE_MODULE = False
  
  If blnIs_UserForm_Loaded(frmCheckUpdates.name) = True Then
    Unload frmCheckUpdates
  End If

  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
End Sub

Public Sub txtURL_DblClick_Handler(ByVal Cancel As MSForms.ReturnBoolean)
  Application.ThisWorkbook.FollowHyperlink frmCheckUpdates.txtURL.Text
End Sub

Public Sub UserForm_Initialize_Handler()

  On Error GoTo ErrHandler
  
  If modUpd_Templ_Defines.LNG_UPDATE_MODULE_SIZE > 0 Then

    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    frmCheckUpdates.cmdInstallUpdate.SetFocus
    
    frmCheckUpdates.chkSaveAutoUpdateModule.Value = True
    
    frmCheckUpdates.lblUpdateVersionInfo.caption = modUpd_Templ_Defines.STR_UPDATE_TO_VERSION
    frmCheckUpdates.txtUpdateDescription.Text = modUpd_Templ_Defines.STR_UPDATE_DESCRIPTION
    frmCheckUpdates.lblUpdateModuleAttributes.caption = modUpd_Templ_Defines.STR_UPDATE_MODULE_ATTRIBUTES
    
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?
    If Len(modUpd_Templ_Defines.STR_NEW_VERSION_URL) = 0 Then
      frmCheckUpdates.Height = 260
      frmCheckUpdates.chkNeverRequestAvailableUpdates.Top = 6 + frmCheckUpdates.frFrameInteractiveUpdate.Height + 6
      frmCheckUpdates.frFrameDownloadNewVersion.Visible = False
    Else
      frmCheckUpdates.Height = 325
      frmCheckUpdates.txtURL.Text = modUpd_Templ_Defines.STR_NEW_VERSION_URL
    End If
  
  Else
  
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    frmCheckUpdates.txtURL.Text = modUpd_Templ_Defines.STR_NEW_VERSION_URL
    
    frmCheckUpdates.Height = 120
    frmCheckUpdates.frFrameDownloadNewVersion.Top = 6
    frmCheckUpdates.chkNeverRequestAvailableUpdates.Top = 6 + frmCheckUpdates.frFrameDownloadNewVersion.Height + 6
    frmCheckUpdates.frFrameInteractiveUpdate.Visible = False
  
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Instruction.Shapes("chkNoUpdatesTrue").Visible = msoTrue Then
    frmCheckUpdates.chkNeverRequestAvailableUpdates.Value = True
  Else
    frmCheckUpdates.chkNeverRequestAvailableUpdates.Value = False
  End If

  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
End Sub

Public Sub UserForm_Terminate_Handler()

  On Error GoTo ErrHandler
  
  If frmCheckUpdates.chkNeverRequestAvailableUpdates.Value = True Then
    If Instruction.Shapes("chkNoUpdatesFalse").Visible = msoTrue Then
      Instruction.Shapes("chkGetUpdatesFalse").Visible = msoTrue
      Instruction.Shapes("chkGetUpdatesTrue").Visible = msoFalse
      Instruction.Shapes("chkNoUpdatesFalse").Visible = msoFalse
      Instruction.Shapes("chkNoUpdatesTrue").Visible = msoTrue
    End If
    Instruction.Range("chkGetUpdatesValue").Value = vbNullString
    Instruction.Range("chkNoUpdatesValue").Value = "y"
  Else
    If Instruction.Shapes("chkGetUpdatesFalse").Visible = msoTrue Then
      Instruction.Shapes("chkGetUpdatesFalse").Visible = msoFalse
      Instruction.Shapes("chkGetUpdatesTrue").Visible = msoTrue
      Instruction.Shapes("chkNoUpdatesFalse").Visible = msoTrue
      Instruction.Shapes("chkNoUpdatesTrue").Visible = msoFalse
    End If
    Instruction.Range("chkGetUpdatesValue").Value = "y"
    Instruction.Range("chkNoUpdatesValue").Value = vbNullString
  End If

  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Function blnIs_UserForm_Loaded(ByVal strFormName As String) As Boolean

  Dim lngICounter As Long

  blnIs_UserForm_Loaded = False
  For lngICounter = 0 To UserForms.Count - 1
    If UserForms(lngICounter).name = strFormName Then
      blnIs_UserForm_Loaded = True
      Exit Function
    End If
  Next lngICounter

End Function
Attribute VB_Name = "modfrmDateChoose"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub cbMonth_Change_Handler()
  If blnCalendarChange Then Exit Sub
  intMonth = frmDateChoose.cbMonth.ListIndex + 1
  modfrmDateChoose.MakeCalendar
End Sub

Public Sub txtYear_Change_Handler()
  If blnCalendarChange Then Exit Sub
  intYear = frmDateChoose.txtYear.Value
  modfrmDateChoose.MakeCalendar
End Sub

Public Sub lblMonthMinus_Click_Handler()
  If frmDateChoose.cbMonth.ListIndex = 0 Then
    frmDateChoose.cbMonth.ListIndex = 11
    modfrmDateChoose.spinYearChange_SpinDown_Handler
  Else
    frmDateChoose.cbMonth.ListIndex = frmDateChoose.cbMonth.ListIndex - 1
  End If
End Sub

Public Sub lblMonthPlus_Click_Handler()
  If frmDateChoose.cbMonth.ListIndex = 11 Then
    frmDateChoose.cbMonth.ListIndex = 0
    modfrmDateChoose.spinYearChange_SpinUp_Handler
  Else
    frmDateChoose.cbMonth.ListIndex = frmDateChoose.cbMonth.ListIndex + 1
  End If
End Sub

Public Sub spinYearChange_SpinDown_Handler()
  frmDateChoose.txtYear.Value = frmDateChoose.txtYear.Value - 1
End Sub

Public Sub spinYearChange_SpinUp_Handler()
  frmDateChoose.txtYear.Value = frmDateChoose.txtYear.Value + 1
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub MakeCalendar()
  Dim i As Integer
  Dim j As Integer
  Dim intWeekDay As Integer
  Dim intCountDaysPrevMonth As Integer
  Dim intCountDaysThisMonth As Integer
  
  blnCalendarChange = True
  frmDateChoose.txtYear.Value = intYear
  frmDateChoose.cbMonth.ListIndex = intMonth - 1
  
  intWeekDay = 2 - DatePart("w", DateSerial(intYear, intMonth, 1), vbMonday)
  intCountDaysThisMonth = Day(DateSerial(intYear, intMonth + 1, 0))
  intCountDaysPrevMonth = Day(DateSerial(intYear, intMonth, 0))
  
  For i = 1 To 6    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For j = 1 To 7  ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If intWeekDay < 1 Then
        frmDateChoose.Controls("Label" & i & "_" & j).caption = " " & intCountDaysPrevMonth + intWeekDay
        frmDateChoose.Controls("Label" & i & "_" & j).ForeColor = &H8000000C
      ElseIf intWeekDay > intCountDaysThisMonth Then
        frmDateChoose.Controls("Label" & i & "_" & j).caption = " " & intWeekDay - intCountDaysThisMonth
        frmDateChoose.Controls("Label" & i & "_" & j).ForeColor = &H8000000C
      Else
        frmDateChoose.Controls("Label" & i & "_" & j).caption = " " & intWeekDay
        frmDateChoose.Controls("Label" & i & "_" & j).ForeColor = &H80000012
      End If
      
      If intWeekDay = intDay Then
        frmDateChoose.Controls("Label" & i & "_" & j).BackColor = &H80000004
        frmDateChoose.Controls("Label" & i & "_" & j).SpecialEffect = fmSpecialEffectSunken
        intX = i
        intY = j
      Else
        frmDateChoose.Controls("Label" & i & "_" & j).BackColor = &HFFFFFF
        frmDateChoose.Controls("Label" & i & "_" & j).SpecialEffect = fmSpecialEffectFlat
        frmDateChoose.Controls("Label" & i & "_" & j).BorderStyle = fmBorderStyleSingle
      End If
      
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If intWeekDay = Day(Now) And intYear = Year(Now) And intMonth = Month(Now) Then
        frmDateChoose.Controls("Label" & i & "_" & j).BackColor = &HFFFFFF
        frmDateChoose.Controls("Label" & i & "_" & j).BorderColor = &HC0C000
        frmDateChoose.Controls("Label" & i & "_" & j).BorderStyle = fmBorderStyleSingle
      Else
        frmDateChoose.Controls("Label" & i & "_" & j).BorderColor = &HFFFFFF
      End If
      
      intWeekDay = intWeekDay + 1
    Next j
  Next i
  blnCalendarChange = False

End Sub

Public Sub LabelClick_Handler(lblLabelClick As Control)
  
  intDay = lblLabelClick.caption
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
  If lblLabelClick.ForeColor = &H8000000C And _
     blnCurrentMonth = False Then
    Dim dtCurrDate As Variant
    If intDay > 20 Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      dtCurrDate = DateSerial(intYear, intMonth - 1, intDay)
    Else
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      dtCurrDate = DateSerial(intYear, intMonth + 1, intDay)
    End If
    intYear = Year(dtCurrDate)
    intMonth = Month(dtCurrDate)
    modfrmDateChoose.MakeCalendar
    Exit Sub
  End If
  
  If (lblLabelClick.ForeColor <> &H8000000C And _
      blnCurrentMonth = True) Or _
     blnCurrentMonth = False Then
        ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Not (CInt(Trim(frmDateChoose.Controls("Label" & intX & "_" & intY).caption)) = Day(Now) And intYear = Year(Now) And intMonth = Month(Now)) Then
          frmDateChoose.Controls("Label" & intX & "_" & intY).BackColor = &HFFFFFF
          frmDateChoose.Controls("Label" & intX & "_" & intY).SpecialEffect = fmSpecialEffectFlat
          frmDateChoose.Controls("Label" & intX & "_" & intY).BorderColor = &HFFFFFF
          frmDateChoose.Controls("Label" & intX & "_" & intY).BorderStyle = fmBorderStyleSingle
        Else
          frmDateChoose.Controls("Label" & intX & "_" & intY).BackColor = &HFFFFFF
          frmDateChoose.Controls("Label" & intX & "_" & intY).BorderColor = &HC0C000
          frmDateChoose.Controls("Label" & intX & "_" & intY).BorderStyle = fmBorderStyleSingle
        End If
        
        intX = Mid(lblLabelClick.name, 6, 1)
        intY = Mid(lblLabelClick.name, 8, 1)
        If Not (CInt(Trim(lblLabelClick.caption)) = Day(Now) And intYear = Year(Now) And intMonth = Month(Now)) Then
          lblLabelClick.BackColor = &H80000004
          lblLabelClick.SpecialEffect = fmSpecialEffectSunken
        Else
          lblLabelClick.BackColor = &H80000004
          lblLabelClick.SpecialEffect = fmSpecialEffectSunken
          frmDateChoose.Controls("Label" & intX & "_" & intY).BorderColor = &HC0C000
        End If
  End If
  
End Sub

Public Sub LabelDblClick_Handler(lblLabelClick As Control)
  If lblLabelClick.ForeColor <> &H8000000C Then
    modGlobals.STR_SELECT_DATE = DateValue(intDay & "." & intMonth & "." & intYear)
    Unload frmDateChoose
  End If
End Sub

Public Sub UserForm_Activate_Handler()
  
  Dim wbBook As Workbook
  
  Dim rngRange As Range
  Dim rngCell As Range
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If modGlobals.blnCurrentMonth = True Then
  
    Set wbBook = Application.ThisWorkbook
    Set rngRange = wbBook.Names("MONTH").RefersToRange
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|
    For Each rngCell In rngRange
      If LCase(rngCell.Value) = LCase(wbBook.Names("prd2_m").RefersToRange.Value) Then
        intMonth = CInt(rngCell.Offset(0, 1).Value)
      End If
    Next rngCell
  
    intYear = wbBook.Names("god").RefersToRange.Value
    intDay = 1
  End If
  
  If intDay = 0 Then
    intDay = Day(Now)
    intMonth = Month(Now) - 1
    intYear = Year(Now)
    If intMonth = 0 Then
      intMonth = 12
      intYear = intYear - 1
    End If
  End If
  
  modGlobals.STR_SELECT_DATE = ""
  modfrmDateChoose.MakeCalendar
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If modGlobals.blnCurrentMonth = True Then
    frmDateChoose.cbMonth.Locked = msoTrue
    frmDateChoose.lblMonthMinus.Visible = msoFalse
    frmDateChoose.lblMonthPlus.Visible = msoFalse
    frmDateChoose.txtYear.Locked = msoTrue
    frmDateChoose.spinYearChange.Visible = msoFalse
    frmDateChoose.caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  
End Sub

Public Sub UserForm_Terminate_Handler()
  modGlobals.blnCurrentMonth = False
  frmDateChoose.cbMonth.Locked = msoFalse
  frmDateChoose.lblMonthMinus.Visible = msoTrue
  frmDateChoose.lblMonthPlus.Visible = msoTrue
  frmDateChoose.txtYear.Locked = msoFalse
  frmDateChoose.spinYearChange.Visible = msoTrue
  frmDateChoose.caption = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
End Sub

Public Sub CalendarShow()
  On Error GoTo ErrWsChange
  
  Dim rngRange As Range
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean

  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating

  Application.EnableEvents = False
  Application.ScreenUpdating = False
  
  Set rngRange = ActiveCell
  modServiceModule.UNPROTECT_SHEET rngRange.parent
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  If Len(Trim(rngRange.cells(1, 1).Value)) <> 0 Then
    intDay = IIf(Len(Day(rngRange.cells(1, 1).Value)) = 1, "0", vbNullString) & Day(rngRange.cells(1, 1).Value)
    intMonth = IIf(Len(Month(rngRange.cells(1, 1).Value)) = 1, "0", vbNullString) & Month(rngRange.cells(1, 1).Value)
    intYear = Year(rngRange.cells(1, 1).Value)
  Else
    intDay = 0
  End If
    
  frmDateChoose.Show
  If rngRange.cells(1, 1).parent.name = List00.name Then
    If Len(Trim(modGlobals.STR_SELECT_DATE)) <> 0 Then
      rngRange.cells(1, 1).Value = modGlobals.STR_SELECT_DATE
    Else
      rngRange.cells(1, 1).Value = CStr(rngRange.cells(1, 1).Offset(0, -5).Value)
    End If
    
    If CStr(rngRange.cells(1, 1).Value) <> CStr(rngRange.cells(1, 1).Offset(0, -5).Value) Then
      If rngRange.cells(1, 1).parent.name = List00.name Then _
        modList00.ChangeRegulatoryPeriod rngRange.cells(1, 1)
    End If
  Else
    rngRange.cells(1, 1).Value = modGlobals.STR_SELECT_DATE
  End If
  
  GoTo EndWsChange

ErrWsChange:
  Debug.Print Err.Description
  GoTo EndWsChange

EndWsChange:
  rngRange.parent.Activate
  modServiceModule.PROTECT_SHEET rngRange.parent
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal
End Sub
Attribute VB_Name = "modfrmReestr"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const cGap As Long = 1.25
Private Const cHeight As Long = 18
Private Const cLabel As Long = 12
Private Const cName As String = "txtFilter_"

Private ptbArr() As MSForms.TextBox
Private pControlEvents As Collection
Public varLabels As Variant
Public varWidths As Variant
Public lngMirror As Long
Public lngNSRF As Long

Public lngOldFilters As Long

Public Sub setFormParameters()
  On Error GoTo ErrHandler

  Dim strWidths As String, strLabels As String

  Select Case STR_REESTR_TYPE
    Case "FULL"
      strWidths = "30 pt;0 pt;95 pt;0 pt;95 pt;50 pt;0 pt;300 pt;70 pt;60 pt;250 pt;0 pt"
      strLabels = "|fffd|;NSRF;|fffd||fffd|;MO_OKTMO_NAME;|fffd||fffd|;|fffd||fffd||fffd||fffd||fffd|;RST_ORG_ID;|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;|fffd||fffd||fffd|;|fffd||fffd||fffd|;|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;SPHERE"
      lngMirror = 7
      lngNSRF = 1
    Case "FULL_OWNER"
      strWidths = "30 pt;0 pt;95 pt;0 pt;95 pt;50 pt;0 pt;300 pt;70 pt;60 pt;250 pt;0 pt"
      strLabels = "|fffd|;NSRF;|fffd||fffd|;MO_OKTMO_NAME;|fffd||fffd|;|fffd||fffd||fffd||fffd||fffd|;RST_ORG_ID;|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;|fffd||fffd||fffd|;|fffd||fffd||fffd|;|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;SPHERE"
      lngMirror = 7
      lngNSRF = 1
    Case "REDU_Y"
      strWidths = "30 pt;0 pt;0 pt;350 pt;70 pt;60 pt;250 pt;0 pt"
      strLabels = "|fffd|;NSRF;RST_ORG_ID;|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;|fffd||fffd||fffd|;|fffd||fffd||fffd|;|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;SPHERE"
      lngMirror = 3
      lngNSRF = 1
    Case "REDU_N"
      strWidths = "30 pt;0 pt;0 pt;600 pt;70 pt;60 pt;0 pt"
      strLabels = "|fffd|;NSRF;RST_ORG_ID;|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;|fffd||fffd||fffd|;|fffd||fffd||fffd|;SPHERE"
      lngMirror = 3
      lngNSRF = 1
    Case "STAT"
      strWidths = "30 pt;0 pt;95 pt;0 pt;95 pt;50 pt;0 pt;355 pt;70 pt;60 pt;0 pt"
      strLabels = "|fffd|;NSRF;|fffd||fffd|;MO_OKTMO_NAME;|fffd||fffd|;|fffd||fffd||fffd||fffd||fffd|;RST_ORG_ID;|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;|fffd||fffd||fffd|;|fffd||fffd||fffd|;SPHERE"
      lngMirror = 7
      lngNSRF = 1
    Case "ENER"
      strWidths = "30 pt;0 pt;95 pt;0 pt;95 pt;50 pt;0 pt;260 pt;70 pt;60 pt;100 pt;0 pt"
      strLabels = "|fffd|;NSRF;|fffd||fffd|;MO_OKTMO_NAME;|fffd||fffd|;|fffd||fffd||fffd||fffd||fffd|;RST_ORG_ID;|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;|fffd||fffd||fffd|;|fffd||fffd||fffd|;|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;SPHERE"
      lngMirror = 7
      lngNSRF = 1
    Case Else
      GoTo ErrHandler
  End Select

  varWidths = Split(Replace(strWidths, " pt", vbNullString), ";")
  varLabels = Split(strLabels, ";")
  frmReestr.ListReestr.ColumnCount = UBound(varWidths) + 1
  frmReestr.ListReestr.ColumnWidths = strWidths

  GoTo CleanUp

ErrHandler:
  MsgBox Err.Description, vbCritical

CleanUp:
End Sub

Public Sub cmdOK_Click_Handler()

  On Error GoTo CleanUp

  Dim lngNumber As Long
  Dim vbResult As VbMsgBoxResult

  lngNumber = frmReestr.ListReestr.ListIndex

  If lngNumber >= 0 Then

    Select Case STR_REESTR_TYPE
      Case "FULL"
        modGlobals.orgMR = frmReestr.ListReestr.List(lngNumber, 2)
        modGlobals.orgMO = frmReestr.ListReestr.List(lngNumber, 4)
        modGlobals.orgOKTMO = frmReestr.ListReestr.List(lngNumber, 5)
        modGlobals.orgName = frmReestr.ListReestr.List(lngNumber, 7)
        modGlobals.orgInn = frmReestr.ListReestr.List(lngNumber, 8)
        modGlobals.orgKpp = frmReestr.ListReestr.List(lngNumber, 9)
        modGlobals.orgVDET = frmReestr.ListReestr.List(lngNumber, 10)
        modGlobals.orgId = frmReestr.ListReestr.List(lngNumber, 6) 'RST_ORG_ID
      
      Case "FULL_OWNER"
        modGlobals.orgMR = frmReestr.ListReestr.List(lngNumber, 2)
        modGlobals.orgMO = frmReestr.ListReestr.List(lngNumber, 4)
        modGlobals.orgOKTMO = frmReestr.ListReestr.List(lngNumber, 5)
        modGlobals.orgName = frmReestr.ListReestr.List(lngNumber, 7)
        modGlobals.orgInn = frmReestr.ListReestr.List(lngNumber, 8)
        modGlobals.orgKpp = frmReestr.ListReestr.List(lngNumber, 9)
        modGlobals.orgVDET = frmReestr.ListReestr.List(lngNumber, 10)
        modGlobals.orgId = frmReestr.ListReestr.List(lngNumber, 6) 'RST_ORG_ID

      Case "REDU_N"
        modGlobals.orgName = frmReestr.ListReestr.List(lngNumber, 3)
        modGlobals.orgInn = frmReestr.ListReestr.List(lngNumber, 4)
        modGlobals.orgKpp = frmReestr.ListReestr.List(lngNumber, 5)

      Case "REDU_Y"
        modGlobals.orgName = frmReestr.ListReestr.List(lngNumber, 3)
        modGlobals.orgInn = frmReestr.ListReestr.List(lngNumber, 4)
        modGlobals.orgKpp = frmReestr.ListReestr.List(lngNumber, 5)
        modGlobals.orgVDET = frmReestr.ListReestr.List(lngNumber, 6)

      Case "STAT"
        modGlobals.orgMR = frmReestr.ListReestr.List(lngNumber, 2)
        modGlobals.orgMO = frmReestr.ListReestr.List(lngNumber, 4)
        modGlobals.orgOKTMO = frmReestr.ListReestr.List(lngNumber, 5)
        modGlobals.orgName = frmReestr.ListReestr.List(lngNumber, 7)
        modGlobals.orgInn = frmReestr.ListReestr.List(lngNumber, 8)
        modGlobals.orgKpp = frmReestr.ListReestr.List(lngNumber, 9)

    End Select

    modGlobals.blnApplyFlag = True
    Unload frmReestr
    
  Else

    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical, modGlobals.STR_MSGBOX_WARNING_TITLE
  
  End If

CleanUp:
End Sub

Public Sub ListReestr_Change_Handler()
  On Error Resume Next
  If frmReestr.ListReestr.ListIndex > -1 Then
    frmReestr.lblMirror = frmReestr.ListReestr.List(frmReestr.ListReestr.ListIndex, lngMirror)
  Else
    frmReestr.lblMirror = vbNullString
  End If
End Sub

Public Sub cmbRegionSelect_Change_Handler()
  If pControlEvents.Count > 0 And frmReestr.cmbRegionSelect.ListCount > 1 Then
    pControlEvents.Item(lngNSRF + 1).Control.Text = frmReestr.cmbRegionSelect.Text
    modfrmReestr.FilterRange
  End If
End Sub

Public Sub cmbActivitySphere_Change_Handler()
  If pControlEvents.Count > 0 And frmReestr.cmbActivitySphere.ListCount > 1 Then
    pControlEvents.Item(frmReestr.ListReestr.ColumnCount).Control.Text = strSphereToCode(frmReestr.cmbActivitySphere.Text)
    modfrmReestr.FilterRange
  End If
End Sub

Public Sub FilterRange()

  On Error GoTo CleanUp
  Dim ArrFilter As Variant, ArrData As Variant, blnIsFilter As Boolean, Filters As Variant
  Dim lngICounter As Long, lngJCounter As Long, lngCurrentRow As Long
  Dim dtTime As Variant, lngImax As Long, lngJmax As Long

  If Not modServiceModule.IsNameExists(ThisWorkbook, STR_RANGE_NAME) Then GoTo CleanUp

  blnIsFilter = False
  ReDim Filters(1 To pControlEvents.Count) As Variant
  For lngICounter = 1 To pControlEvents.Count
    Filters(lngICounter) = pControlEvents.Item(lngICounter).Control.Value
    If Len(Filters(lngICounter)) > 0 Then blnIsFilter = True
  Next lngICounter

  dtTime = Timer

  If Not blnIsFilter Then
    frmReestr.ListReestr.RowSource = STR_RANGE_NAME
  Else
    ArrData = ThisWorkbook.Names(STR_RANGE_NAME).RefersToRange.Value

    lngImax = UBound(ArrData, 1)
    lngJmax = UBound(ArrData, 2)

    ReDim ArrFilter(1 To lngJmax, 1 To lngImax)

    lngCurrentRow = 1
    For lngICounter = 1 To lngImax
      For lngJCounter = 1 To lngJmax
        If Len(Filters(lngJCounter)) > 0 Then _
           If InStr(1, ArrData(lngICounter, lngJCounter), Filters(lngJCounter), vbTextCompare) = 0 Then _
           GoTo NextLine
      Next lngJCounter

      For lngJCounter = 1 To lngJmax
        ArrFilter(lngJCounter, lngCurrentRow) = ArrData(lngICounter, lngJCounter)
      Next lngJCounter
      lngCurrentRow = lngCurrentRow + 1

NextLine:
    Next lngICounter
    If lngCurrentRow > 1 Then
      ReDim Preserve ArrFilter(1 To lngJmax, 1 To lngCurrentRow - 1)
      If frmReestr.ListReestr.RowSource <> vbNullString Then frmReestr.ListReestr.RowSource = vbNullString
      If frmReestr.ListReestr.ListCount > 0 Then frmReestr.ListReestr.Clear
      If IsArray(ArrFilter) Then frmReestr.ListReestr.Column = ArrFilter
    Else
      If frmReestr.ListReestr.RowSource <> vbNullString Then frmReestr.ListReestr.RowSource = vbNullString
      If frmReestr.ListReestr.ListCount > 0 Then frmReestr.ListReestr.Clear
    End If
    frmReestr.Repaint
  End If

CleanUp:
''  frmReestr.caption = "|fffd||fffd||fffd||fffd||fffd||fffd| #" & frmReestr.ListReestr.ListCount & "# " & CLng((Timer - dtTime) * 1000) & " |fffd||fffd|"
End Sub

Public Sub cmdUpdateReestr_Click_Handler()

  On Error GoTo ErrHandler

  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  frmReestr.ListReestr.RowSource = vbNullString

  If modAnimatedFormsGlobals.BLN_SHOW_PROGRESS_FORM_ON_UPDATE_REQUESTS = True Then
    Set frmProgressForm = Try_Show_Message_Window(vbDefaultButton1, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", frmReestr.caption)
  Else
    Set frmProgressForm = Nothing
  End If

  modReestr.cmdUpdateOrgData_Click_Handler List00, False

  If modServiceModule.IsNameExists(ThisWorkbook, STR_RANGE_NAME) Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    frmReestr.ListReestr.RowSource = STR_RANGE_NAME
    modfrmReestr.FilterRange
  Else
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    frmReestr.ListReestr.RowSource = vbNullString
  End If

  GoTo CleanUp

ErrHandler:
CleanUp:
  If modAnimatedFormsGlobals.BLN_SHOW_PROGRESS_FORM_ON_UPDATE_REQUESTS = True Then
    If Not frmProgressForm Is Nothing Then frmProgressForm.Hide

  Else
    Set frmProgressForm = Nothing
  End If
End Sub

Public Sub ListReestr_DblClick_Handler(ByVal Cancel As MSForms.ReturnBoolean)
  cmdOK_Click_Handler
End Sub

Public Sub txtURL_DblClick_Handler(ByVal Cancel As MSForms.ReturnBoolean)
  ThisWorkbook.FollowHyperlink frmReestr.txtURL.Text
End Sub

Public Sub UserForm_Initialize_Handler()
  Dim wsOrgSheet As Worksheet

  ' dynamic filters
  ' ---------------------------------------------------------------------------------------------------------------------------------------------------
  Dim cLeft As Long, cCount As Long, lngICounter As Long
  Dim obj As MSForms.TextBox, cHandler As cHandleEvents, objLabel As MSForms.Label

  ' events collection
  Set pControlEvents = New Collection
  frmReestr.ListReestr.Top = cHeight + cLabel

  ' scrolling
  Set modScrolling.obj = frmReestr.ListReestr
  If modGlobals.gblnTestMode = False Then
    frmReestr.ListReestr.SetFocus
    hW = GetFocus
    frmReestr.cmdOK.SetFocus
    Hook hW
  End If

  ' lenght array
  setFormParameters

  ' filters array
  ReDim ptbArr(UBound(varWidths))

  ' create filters
  cLeft = cGap
  For cCount = LBound(varWidths) To UBound(varWidths)
    Set obj = frmReestr.frFilterBox.Controls.Add("Forms.TextBox.1", cName & CStr(cCount + 1), True)
    Set objLabel = frmReestr.frFilterBox.Controls.Add("Forms.Label.1", "lbl" & CStr(cCount + 1), True)
    Set ptbArr(cCount) = obj

    ' class instances
    Set cHandler = New cHandleEvents
    Set cHandler.Control = ptbArr(cCount)
    cHandler.strWsName = "modfrmReestr"
    ' -> collection
    pControlEvents.Add cHandler

    ' filter parameters
    With obj
      .SpecialEffect = fmSpecialEffect.fmSpecialEffectEtched
      .Top = 0
      .Height = cHeight

      Select Case cCount
        Case LBound(varWidths)
          'first
          .Left = cLeft
          .Width = val(varWidths(cCount)) + cGap
          .Enabled = False
          .BackColor = frmReestr.BackColor
          .SpecialEffect = fmSpecialEffectFlat

        Case Else
          'others
          .Left = cLeft + cGap
          .Width = val(varWidths(cCount))

      End Select

      If val(varWidths(cCount)) = 0 Then .Visible = False
    End With

    'pre-last filter
    If cCount = UBound(varWidths) - 1 Then
      ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      If frmReestr.frFilterBox.Width > cLeft + val(varWidths(cCount)) + (UBound(varWidths) + 1) * cGap + xlScrollBar Then
        frmReestr.ListReestr.Width = frmReestr.frFilterBox.Width - 5
      Else
        frmReestr.ListReestr.Width = cLeft + val(varWidths(cCount)) + (UBound(varWidths) + 1) * cGap + xlScrollBar
      End If

      obj.Width = frmReestr.ListReestr.Width - obj.Left + cGap
    End If

    With objLabel
      .SpecialEffect = fmSpecialEffect.fmSpecialEffectEtched
      .Top = cHeight
      .Height = cLabel
      '.BackColor = RGB(240, 240, 240)
      .Left = obj.Left
      .Width = obj.Width
      .Visible = obj.Visible
      .caption = varLabels(cCount)
      .TextAlign = fmTextAlignCenter
    End With

    ' step right
    cLeft = cLeft + val(varWidths(cCount))
  Next cCount

  ' scroll width and filter width
  frmReestr.frFilterBox.ScrollWidth = frmReestr.ListReestr.Width + cGap
  frmReestr.frFilterBox.Height = cHeight + cLabel + frmReestr.ListReestr.Height + IIf(frmReestr.frFilterBox.ScrollWidth > frmReestr.frFilterBox.Width, 2 * xlScrollBar, 2 * cGap)

  ' ---------------------------------------------------------------------------------------------------------------------------------------------------
  modGlobals.blnApplyFlag = False

  If modServiceModule.IsNameExists(ThisWorkbook, STR_RANGE_NAME) = True Then
    frmReestr.ListReestr.RowSource = STR_RANGE_NAME
  End If

  Set wsOrgSheet = ThisWorkbook.Worksheets(STR_REESTR_SHEET_NAME)

  modServiceModule.UNPROTECT_SHEET wsOrgSheet

  If modServiceModule.IsNameExists(ThisWorkbook, "region_name") Then
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim addRegions As Variant

    frmReestr.cmbRegionSelect.AddItem ThisWorkbook.Names("region_name").RefersToRange.cells(1, 1).Value
    If Len(STR_ADDITIONAL_REGIONS) > 0 Then
      addRegions = Split(STR_ADDITIONAL_REGIONS, ";")
      For cCount = LBound(addRegions) To UBound(addRegions)
        frmReestr.cmbRegionSelect.AddItem addRegions(cCount)
      Next cCount
      frmReestr.cmbRegionSelect.Locked = False
    End If
    frmReestr.cmbRegionSelect.ListIndex = 0

    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Dim addSphere As Variant
    addSphere = Split(STR_ACTIVITY_SPHERE, ";")
    For cCount = LBound(addSphere) To UBound(addSphere)
      frmReestr.cmbActivitySphere.AddItem strCodeToSphere(addSphere(cCount))
    Next cCount

    If modGlobals.intLockedSphere = 0 Then
''      frmReestr.cmbActivitySphere.Locked = False
      frmReestr.cmbActivitySphere.Locked = True
      frmReestr.cmbActivitySphere.ListIndex = modGlobals.intLockedSphere
    Else
      frmReestr.cmbActivitySphere.Locked = True
      frmReestr.cmbActivitySphere.ListIndex = modGlobals.intLockedSphere - 1
    End If

  End If
End Sub

Public Function strCodeToSphere(ByVal strCode As String) As String
  Select Case strCode
  Case "VO"
    strCodeToSphere = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
  Case "VS"
    strCodeToSphere = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Case "ALL"
    strCodeToSphere = ""
  Case "TBO"
    strCodeToSphere = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
  Case "HOT_VS"
    strCodeToSphere = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Case "EE"
    strCodeToSphere = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Case "GAS"
    strCodeToSphere = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Case "WARM"
    strCodeToSphere = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Case Else
    strCodeToSphere = strCode
  End Select
End Function

Public Function strSphereToCode(ByVal strSphere As String) As String
  Select Case strSphere
  Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
    strSphereToCode = "VO"
  Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    strSphereToCode = "VS"
  Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
    strSphereToCode = "TBO"
  Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    strSphereToCode = "HOT_VS"
  Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    strSphereToCode = "EE"
  Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    strSphereToCode = "GAS"
  Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    strSphereToCode = "WARM"
  Case Else
    strSphereToCode = strSphere
  End Select
End Function

Public Function intFindSphere(ByVal strCode As String) As Integer
  Dim addSphere As Variant
  Dim cCount As Integer
  addSphere = Split(STR_ACTIVITY_SPHERE, ";")
  intFindSphere = 0
  For cCount = LBound(addSphere) To UBound(addSphere)
    If addSphere(cCount) = strCode Then
      intFindSphere = cCount + 1
      Exit For
    End If
  Next cCount
End Function

Public Sub UserForm_Activate_Handler()
  On Error Resume Next
  modfrmReestr.FilterRange
  frmReestr.ListReestr.ListIndex = 0
  frmReestr.ListReestr.SetFocus
End Sub

Public Sub cmdNotOrganizationInReestr_Click_Handler()
    Unload frmReestr
End Sub

Public Sub UserForm_Terminate_Handler()
  frmReestr.ListReestr.RowSource = vbNullString
  If modGlobals.gblnTestMode = False Then
    UnHook hW
  End If
End Sub

Public Sub cmdCancel_Click_Handler()
  Unload frmReestr
End Sub

Attribute VB_Name = "modfrmReestrMR"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const cGap As Long = 1.25
Private Const cHeight As Long = 18
Private Const cLabel As Long = 12
Private Const cName As String = "txtFilter_"

Private ptbArr() As MSForms.TextBox
Private pControlEvents As Collection
Public varLabels As Variant
Public varWidths As Variant

Public lngOldFilters As Long

Public STR_NAME_REGION As String
Public STR_NAME_RANGE_REGION As String
Public STR_NAME_RANGE_REESTR_MR As String

Public Sub setFormParameters()
  On Error GoTo ErrHandler

  Dim strWidths As String, strLabels As String

  Select Case STR_REESTR_MR_MO_TYPE
    Case "MRMO"
      strWidths = "30pt;200pt;200pt;60pt"
      strLabels = "|fffd|;|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|;|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;|fffd||fffd||fffd||fffd||fffd|"
    Case Else
      GoTo ErrHandler
  End Select

  varWidths = Split(Replace(strWidths, " pt", vbNullString), ";")
  varLabels = Split(strLabels, ";")
  frmReestrMR.ListReestr.ColumnCount = UBound(varWidths) + 1
  frmReestrMR.ListReestr.ColumnWidths = strWidths

  GoTo CleanUp

ErrHandler:
  MsgBox Err.Description, vbCritical

CleanUp:
End Sub

Public Sub cmdOK_Click_Handler()

  On Error GoTo CleanUp

  Dim lngNumber As Long
  Dim vbResult As VbMsgBoxResult

  lngNumber = frmReestrMR.ListReestr.ListIndex

  If lngNumber >= 0 Then

    Select Case STR_REESTR_MR_MO_TYPE
      Case "MRMO"
        modGlobals.nameMR = frmReestrMR.ListReestr.List(lngNumber, 1)
        modGlobals.nameMO = frmReestrMR.ListReestr.List(lngNumber, 2)
        modGlobals.nameOKTMO = frmReestrMR.ListReestr.List(lngNumber, 3)
    End Select

    modGlobals.blnApplyFlag = True
    Unload frmReestrMR
    
  Else
    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical, modGlobals.STR_MSGBOX_WARNING_TITLE
  End If

CleanUp:
End Sub

Public Sub ListReestr_Change_Handler()
''  On Error Resume Next
''  If modfrmReestrMR.ListReestr.ListIndex > -1 Then
''    modfrmReestrMR.lblMirror = modfrmReestrMR.ListReestr.list(modfrmReestrMR.ListReestr.ListIndex, lngMirror)
''  Else
''    modfrmReestrMR.lblMirror = vbNullString
''  End If
End Sub

Public Sub cmbRegionSelect_Change_Handler()
''  If pControlEvents.Count > 0 And frmReestrMR.cmbRegionSelect.ListCount > 1 Then
''    pControlEvents.Item(lngNSRF + 1).Control.Text = frmReestrMR.cmbRegionSelect.Text
''    modfrmReestrMR.FilterRange
''  End If
End Sub

Public Sub FilterRange()

  On Error GoTo CleanUp
  Dim ArrFilter As Variant, ArrData As Variant, blnIsFilter As Boolean, Filters As Variant
  Dim lngICounter As Long, lngJCounter As Long, lngCurrentRow As Long
  Dim dtTime As Variant, lngImax As Long, lngJmax As Long

  If Not modServiceModule.IsNameExists(ThisWorkbook, STR_NAME_RANGE_REESTR_MR) Then GoTo CleanUp

  blnIsFilter = False
  ReDim Filters(1 To pControlEvents.Count) As Variant
  For lngICounter = 1 To pControlEvents.Count
    Filters(lngICounter) = pControlEvents.Item(lngICounter).Control.Value
    If Len(Filters(lngICounter)) > 0 Then blnIsFilter = True
  Next lngICounter

  dtTime = Timer

  If Not blnIsFilter Then
    frmReestrMR.ListReestr.RowSource = STR_NAME_RANGE_REESTR_MR
  Else
    ArrData = ThisWorkbook.Names(STR_NAME_RANGE_REESTR_MR).RefersToRange.Value

    lngImax = UBound(ArrData, 1)
    lngJmax = UBound(ArrData, 2)

    ReDim ArrFilter(1 To lngJmax, 1 To lngImax)

    lngCurrentRow = 1
    For lngICounter = 1 To lngImax
      For lngJCounter = 1 To lngJmax
        If Len(Filters(lngJCounter)) > 0 Then _
           If InStr(1, ArrData(lngICounter, lngJCounter), Filters(lngJCounter), vbTextCompare) = 0 Then _
           GoTo NextLine
      Next lngJCounter

      For lngJCounter = 1 To lngJmax
        ArrFilter(lngJCounter, lngCurrentRow) = ArrData(lngICounter, lngJCounter)
      Next lngJCounter
      lngCurrentRow = lngCurrentRow + 1

NextLine:
    Next lngICounter
    If lngCurrentRow > 1 Then
      ReDim Preserve ArrFilter(1 To lngJmax, 1 To lngCurrentRow - 1)
''      ReDim Preserve ArrFilter(1 To lngJmax, 1 To lngCurrentRow)
      If frmReestrMR.ListReestr.RowSource <> vbNullString Then frmReestrMR.ListReestr.RowSource = vbNullString
      If frmReestrMR.ListReestr.ListCount > 0 Then frmReestrMR.ListReestr.Clear
      If IsArray(ArrFilter) Then frmReestrMR.ListReestr.Column = ArrFilter
    Else
      If frmReestrMR.ListReestr.RowSource <> vbNullString Then frmReestrMR.ListReestr.RowSource = vbNullString
      If frmReestrMR.ListReestr.ListCount > 0 Then frmReestrMR.ListReestr.Clear
    End If
    frmReestrMR.Repaint
  End If

CleanUp:
''  frmReestrMR.caption = "|fffd||fffd||fffd||fffd||fffd||fffd| #" & frmReestrMR.ListReestr.ListCount & "# " & CLng((Timer - dtTime) * 1000) & " |fffd||fffd|"
End Sub

Public Sub cmdUpdateReestr_Click_Handler()

  On Error GoTo ErrHandler
  
  Dim wsSheet As Worksheet
  
  Set wsSheet = List00.parent.ActiveSheet

  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  frmReestrMR.ListReestr.RowSource = vbNullString

  If modAnimatedFormsGlobals.BLN_SHOW_PROGRESS_FORM_ON_UPDATE_REQUESTS = True Then
    Set frmProgressForm = Try_Show_Message_Window(vbDefaultButton1, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|...", frmReestrMR.caption)
  Else
    Set frmProgressForm = Nothing
  End If
  
  modReestr.cmdUpdateReestrMO_Click_Handler List00, False, STR_NAME_RANGE_REGION

  If modServiceModule.IsNameExists(ThisWorkbook, STR_NAME_RANGE_REESTR_MR) Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    frmReestrMR.ListReestr.RowSource = STR_NAME_RANGE_REESTR_MR
    modfrmReestrMR.FilterRange
  Else
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    frmReestrMR.ListReestr.RowSource = vbNullString
  End If

  GoTo CleanUp

ErrHandler:
CleanUp:
  If modAnimatedFormsGlobals.BLN_SHOW_PROGRESS_FORM_ON_UPDATE_REQUESTS = True Then
    frmProgressForm.Hide
  Else
    Set frmProgressForm = Nothing
  End If
  If Not wsSheet Is Nothing Then wsSheet.Activate
End Sub

Public Sub ListReestr_DblClick_Handler(ByVal Cancel As MSForms.ReturnBoolean)
  cmdOK_Click_Handler
End Sub

Public Sub UserForm_Initialize_Handler()
  Dim wsReestrSheet As Worksheet

  ' dynamic filters
  ' ---------------------------------------------------------------------------------------------------------------------------------------------------
  Dim cLeft As Long, cCount As Long, lngICounter As Long
  Dim obj As MSForms.TextBox, cHandler As cHandleEvents, objLabel As MSForms.Label

  ' events collection
  Set pControlEvents = New Collection
  frmReestrMR.ListReestr.Top = cHeight + cLabel

  ' scrolling
  Set modScrolling.obj = frmReestrMR.ListReestr
  If modGlobals.gblnTestMode = False Then
    frmReestrMR.ListReestr.SetFocus
    hW = GetFocus
    frmReestrMR.cmdOK.SetFocus
    Hook hW
  End If

  ' lenght array
  setFormParameters

  ' filters array
  ReDim ptbArr(UBound(varWidths))

  ' create filters
  cLeft = cGap
  For cCount = LBound(varWidths) To UBound(varWidths)
    Set obj = frmReestrMR.frFilterBox.Controls.Add("Forms.TextBox.1", cName & CStr(cCount + 1), True)
    Set objLabel = frmReestrMR.frFilterBox.Controls.Add("Forms.Label.1", "lbl" & CStr(cCount + 1), True)
    Set ptbArr(cCount) = obj

    ' class instances
    Set cHandler = New cHandleEvents
    Set cHandler.Control = ptbArr(cCount)
    cHandler.strWsName = "modfrmReestrMR"
    ' -> collection
    pControlEvents.Add cHandler

    ' filter parameters
    With obj
      .SpecialEffect = fmSpecialEffect.fmSpecialEffectEtched
      .Top = 0
      .Height = cHeight

      Select Case cCount
        Case LBound(varWidths)
          'first
          .Left = cLeft
          .Width = val(varWidths(cCount)) + cGap
          .Enabled = False
          .BackColor = frmReestrMR.BackColor
          .SpecialEffect = fmSpecialEffectFlat

        Case Else
          'others
          If cCount = 1 And Len(Trim(modGlobals.STR_SHEET_SPR_MR_NAME)) <> 0 Then
            .Left = cLeft + cGap
            .Width = val(varWidths(cCount))
            .Locked = True
            .Enabled = False
            .Value = modGlobals.STR_SHEET_SPR_MR_NAME
          Else
            .Left = cLeft + cGap
            .Width = val(varWidths(cCount))
          End If
      End Select

      If val(varWidths(cCount)) = 0 Then .Visible = False
    End With

    'pre-last filter
    ''    If cCount = UBound(varWidths) - 1 Then
    If cCount = UBound(varWidths) Then
      ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      If frmReestrMR.frFilterBox.Width > cLeft + val(varWidths(cCount)) + (UBound(varWidths) + 1) * cGap + xlScrollBar Then
        frmReestrMR.ListReestr.Width = frmReestrMR.frFilterBox.Width - 5
      Else
        frmReestrMR.ListReestr.Width = cLeft + val(varWidths(cCount)) + (UBound(varWidths) + 1) * cGap + xlScrollBar
      End If

      obj.Width = frmReestrMR.ListReestr.Width - obj.Left + cGap
    End If

    With objLabel
      .SpecialEffect = fmSpecialEffect.fmSpecialEffectEtched
      .Top = cHeight
      .Height = cLabel
      '.BackColor = RGB(240, 240, 240)
      .Left = obj.Left
      .Width = obj.Width
      .Visible = obj.Visible
      .caption = varLabels(cCount)
      .TextAlign = fmTextAlignCenter
    End With

    ' step right
    cLeft = cLeft + val(varWidths(cCount))
  Next cCount

  ' scroll width and filter width
  frmReestrMR.frFilterBox.ScrollWidth = frmReestrMR.ListReestr.Width + cGap
  frmReestrMR.frFilterBox.Height = cHeight + cLabel + frmReestrMR.ListReestr.Height + IIf(frmReestrMR.frFilterBox.ScrollWidth > frmReestrMR.frFilterBox.Width, 2 * xlScrollBar, 2 * cGap)

  ' ---------------------------------------------------------------------------------------------------------------------------------------------------
  modGlobals.blnApplyFlag = False

  If modServiceModule.IsNameExists(ThisWorkbook, STR_NAME_RANGE_REESTR_MR) = True Then
    frmReestrMR.ListReestr.RowSource = STR_NAME_RANGE_REESTR_MR
  End If

  Set wsReestrSheet = ThisWorkbook.Worksheets(STR_REESTR_SHEET_NAME)

  modServiceModule.UNPROTECT_SHEET wsReestrSheet

  If modServiceModule.IsNameExists(ThisWorkbook, STR_NAME_RANGE_REGION) Then
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim addRegions As Variant

    frmReestrMR.cmbRegionSelect.AddItem ThisWorkbook.Names(STR_NAME_RANGE_REGION).RefersToRange.cells(1, 1).Value
    If Len(STR_ADDITIONAL_REGIONS) > 0 Then
      addRegions = Split(STR_ADDITIONAL_REGIONS, ";")
      For cCount = LBound(addRegions) To UBound(addRegions)
        frmReestrMR.cmbRegionSelect.AddItem addRegions(cCount)
      Next cCount
      frmReestrMR.cmbRegionSelect.Locked = False
    End If
    frmReestrMR.cmbRegionSelect.ListIndex = 0

  End If
End Sub

Public Sub UserForm_Activate_Handler()
  On Error Resume Next
  modfrmReestrMR.FilterRange
  frmReestrMR.ListReestr.ListIndex = 0
  frmReestrMR.ListReestr.SetFocus
End Sub

Public Sub UserForm_Terminate_Handler()
  frmReestrMR.ListReestr.RowSource = vbNullString
  If modGlobals.gblnTestMode = False Then
    UnHook hW
  End If
End Sub

Public Sub cmdCancel_Click_Handler()
  Unload frmReestrMR
End Sub

Attribute VB_Name = "xlsBook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
  
  modThisWorkbook.Workbook_BeforeSave_Handler SaveAsUI, Cancel, Me

  On Error GoTo ErrHandler

  Dim status As Integer

  status = Me.CustomDocumentProperties("Status")
  If status > 2 Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation + vbOKOnly, ThisWorkbook.name
    Cancel = True
    Exit Sub
  End If

  Exit Sub

ErrHandler:
  MsgBox Err.Description, vbOKOnly + vbExclamation, ThisWorkbook.name
End Sub

Private Sub Workbook_Open()
  modThisWorkbook.Workbook_Open_Handler Me
End Sub

' InQuest injected base64 decoded content
' +bjX
' zu)u
' {Qz{
' )^J)
' zjej

INQUEST-PP=macro
