Attribute VB_Name = "LoginForm"
Attribute VB_Base = "0{7DACB4F1-33EC-4898-AA10-0AE10E5FDD73}{B6B00B56-3050-4FBA-A6AA-E6AA34AB44B3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub CheckBox_changepassword_Click()
    If (CheckBox_changepassword.Value = True) Then
        ShowResetPassword
    Else
        HideResetPassword
    End If
End Sub

Private Sub CommandButton_Cancel_Click()
    Unload Me
'    If (FirstLogin) Then
'        ActiveWorkbook.Close (vbNo)
'    End If
    If (FirstLogin) Then
        Sheet1.Activate
    End If
End Sub

Private Sub CommandButton_OK_Click()
    
    Dim i As Integer
    
    i = isValidUser(TextBox_supplier.Value, TextBox_password.Value)
    If (i < 0) Then
        ShowMessage (i)
        'Sheet1.Activate
    Else
        'prepare for login
        
        Call LoadDefalutSheet(i)
        Unload Me
    End If
    
        
End Sub

Private Sub CommandButton_reset_Click()
    Dim i As Integer
    
    i = isValidUser(TextBox_supplier.Value, TextBox_password.Value)
    
    If (i < 0) Then
        ShowMessage (i)
        
    Else
        If (TextBox_newpassword.Value <> TextBox_retype.Value) Then
            ShowMessage (-3)
        Else
            'save new password to backend and login
            Call SaveNewPassword(TextBox_newpassword.Value, i)
            
            Call LoadDefalutSheet(i)
            Unload Me
        End If
    
    End If
End Sub

'-1 not found, >0 the index in the supplier list, -2 found the user but more than 9 data sheets(suppliers) have been used in this file.
'0 admin login
Private Function isValidUser(uid As String, pwd As String) As Integer
'    If (pwd = WorkbookPassword) Then
'        isValidUser = 0
'        Exit Function
'    End If
    For i = 1 To UBound(supplier_list)
        If (UCase(supplier_list(i).SupplierLoginID) = UCase(uid)) Then
            If (pwd = WorkbookPassword) Then
                isValidUser = i
                Exit Function
            Else
                If (SHA1HASH(pwd) = supplier_list(i).SupplierHexPassword) Then
                    If (Sheet3.GetDataSheetIndex(supplier_list(i).SupplierID) > 0) Then
                        isValidUser = i
                    Else
                        isValidUser = -2
                    End If
                    Exit Function
                End If
            End If
        End If
    Next i
    isValidUser = -1        'password not match
End Function

Private Sub ShowResetPassword()
    Label_newpassword.Visible = True
    Label_retype.Visible = True
    TextBox_newpassword.Visible = True
    TextBox_retype.Visible = True
    CommandButton_reset.Visible = True
End Sub

Private Sub HideResetPassword()
    Label_newpassword.Visible = False
    Label_retype.Visible = False
    TextBox_newpassword.Visible = False
    TextBox_retype.Visible = False
    CommandButton_reset.Visible = False
End Sub

'newpassword is new password, not hashed
'id is the index in supplier_list
Private Sub SaveNewPassword(newpassword As String, id As Integer)
    Call Sheet4.SaveNewPassword(SHA1HASH(newpassword), supplier_list(id).SupplierID)
End Sub

'run after login successfully
'i: index in the supplier_list

Private Sub LoadDefalutSheet(i As Integer)
'    If (i = 0) Then
'        LoginSupplierID = i
'        Sheet2.SetSupplierName (AdminUser)
'        Sheet1.Activate
'        Exit Sub
'    End If
    FirstLogin = False
    LoginSupplierID = supplier_list(i).SupplierID
    Set LoginSupplier = supplier_list(i)
    
    Dim id As Integer
    
    DataSheetIndex = Sheet3.GetDataSheetIndex(LoginSupplierID)
    Sheet3.SetDataSheetIndex DataSheetIndex, supplier_list(i).SupplierID
    Sheet2.Range("Q5:LP25").Locked = False
    Sheet2.LoadData
    Sheet2.SetSupplierName (supplier_list(i).SupplierExtendName)
    If (supplier_list(i).IsInChina) Then
        Sheet2.UnlockChinaLawCells
    Else
        Sheet2.LockChinaLawCells
    End If
    Dim cw As Integer
    cw = Sheet2.GetCurrentWeek
   ' Sheet2.Cells(5, cw).Activate        'not good but use it anyway
    'Sheet2.Activate
    
    
End Sub




Private Sub Label1_Click()

End Sub

Private Sub UserForm_Deactivate()
    ProtectSheets
End Sub

Private Sub UserForm_Initialize()
    
    
    Dim i As Integer
    
    HideResetPassword
    UnProtectSheets
    
    'read the supplier list from the user sheet
    Sheet4.GetSupplierList supplier_list

    For i = 1 To UBound(supplier_list)
        ComboBox_supplier.AddItem supplier_list(i).SupplierExtendName
    Next i

    'set version bar
    Label_version.Caption = Sheet3.GetToolName & " " & Sheet3.GetVersion
    
    'load supplier data input status from sheet3.
    
    Dim status(NumberOfDataSheet) As String
    
    Call Sheet3.GetSupplierDataInputStatus(status)
    For i = 1 To NumberOfDataSheet
        ListBox_Status.AddItem status(i)
    Next i
    
        
End Sub

Private Sub UserForm_Terminate()
    ProtectSheets
    SetFocus2Sheet1
End Sub

Private Sub SetFocus2Sheet1()
    If (FirstLogin) Then
        Sheet1.Activate
    End If
End Sub
Attribute VB_Name = "M1_Main"
'
'0.4
'update from 0.2 to only requires password when activating the supplier sheet
'
'


Option Explicit

Public Const Separator = "-"
Public Const SpaceChar = " "
Public Const WeeksOfYear = 52
Public Const NumberOfDataSheet = 9
Public Const WorkbookPassword = "dellser@1234"
Public Const AdminUser = "Admin"
Public Const DellEmailBox = "Supplier_SERData@dell.com"

Public LoginSupplierID As String
Public DataSheetIndex As String
Public FirstLogin As Boolean
Public LoginSupplier As SupplierClass
Public supplier_list() As SupplierClass

Attribute VB_Name = "M2_SHA1"
' Based on: http://vb.wikia.com/wiki/SHA-1.bas
Option Explicit

Private Type FourBytes
    a As Byte
    B As Byte
    c As Byte
    d As Byte
End Type
Private Type OneLong
    l As Long
End Type

Function HexDefaultSHA1(Message() As Byte) As String
 Dim H1 As Long, H2 As Long, H3 As Long, H4 As Long, H5 As Long
 DefaultSHA1 Message, H1, H2, H3, H4, H5
 HexDefaultSHA1 = DecToHex5(H1, H2, H3, H4, H5)
End Function

Function HexSHA1(Message() As Byte, ByVal Key1 As Long, ByVal Key2 As Long, ByVal Key3 As Long, ByVal Key4 As Long) As String
 Dim H1 As Long, H2 As Long, H3 As Long, H4 As Long, H5 As Long
 xSHA1 Message, Key1, Key2, Key3, Key4, H1, H2, H3, H4, H5
 HexSHA1 = DecToHex5(H1, H2, H3, H4, H5)
End Function

Sub DefaultSHA1(Message() As Byte, H1 As Long, H2 As Long, H3 As Long, H4 As Long, H5 As Long)
 xSHA1 Message, &H5A827999, &H6ED9EBA1, &H8F1BBCDC, &HCA62C1D6, H1, H2, H3, H4, H5
End Sub

Sub xSHA1(Message() As Byte, ByVal Key1 As Long, ByVal Key2 As Long, ByVal Key3 As Long, ByVal Key4 As Long, H1 As Long, H2 As Long, H3 As Long, H4 As Long, H5 As Long)
 'CA62C1D68F1BBCDC6ED9EBA15A827999 + "abc" = "A9993E36 4706816A BA3E2571 7850C26C 9CD0D89D"
 '"abc" = "A9993E36 4706816A BA3E2571 7850C26C 9CD0D89D"

 Dim U As Long, P As Long
 Dim FB As FourBytes, OL As OneLong
 Dim i As Integer
 Dim w(80) As Long
 Dim a As Long, B As Long, c As Long, d As Long, E As Long
 Dim t As Long

 H1 = &H67452301: H2 = &HEFCDAB89: H3 = &H98BADCFE: H4 = &H10325476: H5 = &HC3D2E1F0

 U = UBound(Message) + 1: OL.l = U32ShiftLeft3(U): a = U \ &H20000000: LSet FB = OL 'U32ShiftRight29(U)

 ReDim Preserve Message(0 To (U + 8 And -64) + 63)
 Message(U) = 128

 U = UBound(Message)
 Message(U - 4) = a
 Message(U - 3) = FB.d
 Message(U - 2) = FB.c
 Message(U - 1) = FB.B
 Message(U) = FB.a

 While P < U
     For i = 0 To 15
         FB.d = Message(P)
         FB.c = Message(P + 1)
         FB.B = Message(P + 2)
         FB.a = Message(P + 3)
         LSet OL = FB
         w(i) = OL.l
         P = P + 4
     Next i

     For i = 16 To 79
         w(i) = U32RotateLeft1(w(i - 3) Xor w(i - 8) Xor w(i - 14) Xor w(i - 16))
     Next i

     a = H1: B = H2: c = H3: d = H4: E = H5

     For i = 0 To 19
         t = U32Add(U32Add(U32Add(U32Add(U32RotateLeft5(a), E), w(i)), Key1), ((B And c) Or ((Not B) And d)))
         E = d: d = c: c = U32RotateLeft30(B): B = a: a = t
     Next i
     For i = 20 To 39
         t = U32Add(U32Add(U32Add(U32Add(U32RotateLeft5(a), E), w(i)), Key2), (B Xor c Xor d))
         E = d: d = c: c = U32RotateLeft30(B): B = a: a = t
     Next i
     For i = 40 To 59
         t = U32Add(U32Add(U32Add(U32Add(U32RotateLeft5(a), E), w(i)), Key3), ((B And c) Or (B And d) Or (c And d)))
         E = d: d = c: c = U32RotateLeft30(B): B = a: a = t
     Next i
     For i = 60 To 79
         t = U32Add(U32Add(U32Add(U32Add(U32RotateLeft5(a), E), w(i)), Key4), (B Xor c Xor d))
         E = d: d = c: c = U32RotateLeft30(B): B = a: a = t
     Next i

     H1 = U32Add(H1, a): H2 = U32Add(H2, B): H3 = U32Add(H3, c): H4 = U32Add(H4, d): H5 = U32Add(H5, E)
 Wend
End Sub

Function U32Add(ByVal a As Long, ByVal B As Long) As Long
 If (a Xor B) < 0 Then
     U32Add = a + B
 Else
     U32Add = (a Xor &H80000000) + B Xor &H80000000
 End If
End Function

Function U32ShiftLeft3(ByVal a As Long) As Long
 U32ShiftLeft3 = (a And &HFFFFFFF) * 8
 If a And &H10000000 Then U32ShiftLeft3 = U32ShiftLeft3 Or &H80000000
End Function

Function U32ShiftRight29(ByVal a As Long) As Long
 U32ShiftRight29 = (a And &HE0000000) \ &H20000000 And 7
End Function

Function U32RotateLeft1(ByVal a As Long) As Long
 U32RotateLeft1 = (a And &H3FFFFFFF) * 2
 If a And &H40000000 Then U32RotateLeft1 = U32RotateLeft1 Or &H80000000
 If a And &H80000000 Then U32RotateLeft1 = U32RotateLeft1 Or 1
End Function
Function U32RotateLeft5(ByVal a As Long) As Long
 U32RotateLeft5 = (a And &H3FFFFFF) * 32 Or (a And &HF8000000) \ &H8000000 And 31
 If a And &H4000000 Then U32RotateLeft5 = U32RotateLeft5 Or &H80000000
End Function
Function U32RotateLeft30(ByVal a As Long) As Long
 U32RotateLeft30 = (a And 1) * &H40000000 Or (a And &HFFFC) \ 4 And &H3FFFFFFF
 If a And 2 Then U32RotateLeft30 = U32RotateLeft30 Or &H80000000
End Function

Function DecToHex5(ByVal H1 As Long, ByVal H2 As Long, ByVal H3 As Long, ByVal H4 As Long, ByVal H5 As Long) As String
 Dim H As String, l As Long
 DecToHex5 = "00000000 00000000 00000000 00000000 00000000"
 H = Hex(H1): l = Len(H): Mid(DecToHex5, 9 - l, l) = H
 H = Hex(H2): l = Len(H): Mid(DecToHex5, 18 - l, l) = H
 H = Hex(H3): l = Len(H): Mid(DecToHex5, 27 - l, l) = H
 H = Hex(H4): l = Len(H): Mid(DecToHex5, 36 - l, l) = H
 H = Hex(H5): l = Len(H): Mid(DecToHex5, 45 - l, l) = H
End Function

' Convert the string into bytes so we can use the above functions
' From Chris Hulbert: http://splinter.com.au/blog

Public Function SHA1HASH(str)
  Dim i As Integer
  Dim arr() As Byte
  ReDim arr(0 To Len(str) - 1) As Byte
  For i = 0 To Len(str) - 1
   arr(i) = Asc(Mid(str, i + 1, 1))
  Next i
  SHA1HASH = Replace(LCase(HexDefaultSHA1(arr)), " ", "")
End Function
Attribute VB_Name = "M3_Helper"
Option Explicit

Public Const Message_Error_1 = "The cell cannot be empty, if you have any question please contact paul_xie@dell.com"
Public Const Message_Error_2 = "Invalide data-sum is over 100% for one category, if you have any question please contact paul_xie@dell.com"
Public Const Message_Error_3 = "Previous week data can't be empty, if you have any question please contact paul_xie@dell.com"
Public Const Message_Error_4 = "No data can be input after current week, if you have any question please contact paul_xie@dell.com"

Public Const Message_Notify_1 = "Data is updated before "

Public Function GetSheetRowNumber(sheetname As String, column As Integer) As Integer
    With ActiveWorkbook.Sheets(sheetname)
'    With ActiveWorkbook.Worksheet(sheetname)
        GetSheetRowNumber = .Cells(.Rows.Count, column).End(xlUp).Row
    End With
End Function

Public Function IsEmpty(s As String) As Boolean
    If (Trim(s) = "") Then
        IsEmpty = True
        Exit Function
    End If
    IsEmpty = False
End Function

Public Sub ShowMessage(id As Integer)
    If (id = -1) Then
        MsgBox "The login password is not correct, please retry."
    ElseIf (id = -2) Then
        MsgBox "There are more than " & NumberOfDataSheet & " supplier data has been input, no new supplier login is allowed."
    ElseIf (id = -3) Then
        MsgBox "The new password is not identical, please retry."
    End If
End Sub

Public Sub ProtectSheets()
    Sheet1.Protect WorkbookPassword
    Sheet2.Protect WorkbookPassword
'    Sheet3.Protect WorkbookPassword
'    Sheet4.Protect WorkbookPassword
'    Sheet5.Protect WorkbookPassword
'    Sheet6.Protect WorkbookPassword
'    Sheet7.Protect WorkbookPassword
'    Sheet8.Protect WorkbookPassword
'    Sheet9.Protect WorkbookPassword
'    Sheet10.Protect WorkbookPassword
'    Sheet11.Protect WorkbookPassword
'    Sheet12.Protect WorkbookPassword
'    Sheet13.Protect WorkbookPassword
    
End Sub


Public Sub UnProtectSheets()
    Sheet1.Unprotect WorkbookPassword
    Sheet2.Unprotect WorkbookPassword
'    Sheet3.Unprotect WorkbookPassword
'    Sheet4.Unprotect WorkbookPassword
'    Sheet5.Unprotect WorkbookPassword
'    Sheet6.Unprotect WorkbookPassword
'    Sheet7.Unprotect WorkbookPassword
'    Sheet8.Unprotect WorkbookPassword
'    Sheet9.Unprotect WorkbookPassword
'    Sheet10.Unprotect WorkbookPassword
'    Sheet11.Unprotect WorkbookPassword
'    Sheet12.Unprotect WorkbookPassword
'    Sheet13.Unprotect WorkbookPassword
    
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const Supplier_Name_Value = "Supplier"
Private Const Supplier_Change_Tip = "(double click to change supplier)"
Private Const SupplierName_Row = 1
Private Const SupplierName_Col = 2
Private Const DateStart_Row = 4
Private Const DataStart_Row = 5
Private Const MonthDataStart_Row = 12
Private Const DataEnd_Row = 25
Private Const DataStart_Col = 17

Private Const EICC_Row = 7
Private Const EICC_CWD_Row = 13

Private Const DataSheet_Start_Row = 2
Private Const DataSheet_Start_Col = 2
Private Const DataSheet_End_Row = 22
Private Const DataSheet_End_Col = 52
Private Const NoLoadRow = 11            'the row is calculated row, no need to save or load

Private x, y As Integer     'where is the error
Private validate_error_message As String

Private validate_start_col As Integer


Public Sub SetSupplierName(n As String)
    Dim s As String
    Dim i, l As Integer
    
    s = Supplier_Name_Value & Separator & n & SpaceChar & Supplier_Change_Tip
    
    Sheet2.Cells(SupplierName_Row, SupplierName_Col) = s
    
    i = Len(s) - Len(Supplier_Change_Tip)
    l = Len(Supplier_Change_Tip)
    
    With Sheet2.Cells(SupplierName_Row, SupplierName_Col).Characters(start:=i + 1, Length:=l).Font
        .Name = "Museo For Dell"
        .FontStyle = "Regular"
        .Size = 14
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleSingle
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
        
    End With
End Sub

'return the column number

Public Function GetCurrentWeek() As Integer
    
    Dim d As Date
    Dim i As Integer
    
    d = Now
    
    For i = DataStart_Col + WeeksOfYear * 6 - 1 To DataStart_Col Step -1
        If (d >= DateAdd("d", 7, CDate(Sheet2.Cells(DateStart_Row, i)))) Then
            GetCurrentWeek = i
            Exit Function
        End If
    Next i
    
    GetCurrentWeek = DataStart_Col
    
End Function

'based on the start FY and start week in sheet3 to return the column number
Public Function GetValidateStartWeek() As Integer
    Dim i As Integer
    
    i = DataStart_Col
    If (Sheet3.GetStartFY = "FY17") Then
        i = DataStart_Col + WeeksOfYear
    ElseIf (Sheet3.GetStartFY = "FY18") Then
        i = DataStart_Col + WeeksOfYear * 2
    ElseIf (Sheet3.GetStartFY = "FY19") Then
        i = DataStart_Col + WeeksOfYear * 3
    ElseIf (Sheet3.GetStartFY = "FY20") Then
        i = DataStart_Col + WeeksOfYear * 4
    ElseIf (Sheet3.GetStartFY = "FY21") Then
        i = DataStart_Col + WeeksOfYear * 5
    End If
    GetValidateStartWeek = i - 1 + CInt(Mid(Sheet3.GetStartWeek(), 3))
    
End Function

Public Function GetFYFromCol(j As Integer) As String
    If (j < WeeksOfYear + DataStart_Col) Then
        GetFYFromCol = "FY16"
    ElseIf (j < WeeksOfYear * 2 + DataStart_Col) Then
        GetFYFromCol = "FY17"
    ElseIf (j < WeeksOfYear * 3 + DataStart_Col) Then
        GetFYFromCol = "FY18"
    ElseIf (j < WeeksOfYear * 4 + DataStart_Col) Then
        GetFYFromCol = "FY19"
    ElseIf (j < WeeksOfYear * 5 + DataStart_Col) Then
        GetFYFromCol = "FY20"
    ElseIf (j < WeeksOfYear * 6 + DataStart_Col) Then
        GetFYFromCol = "FY21"
    End If
End Function

Public Function GetWeekFromCol(j As Integer) As String
    GetWeekFromCol = Sheet2.Cells(3, j)
End Function


'if current week--w is last week of month

Public Function IsLastWeekOfMonth(ByVal w As Integer) As Integer
    
    Dim d As Date
    Dim n As Date
    Dim i As Integer
    
    IsLastWeekOfMonth = False
    
    If (Trim(Sheet2.Cells(DateStart_Row, w)) = "") Then
        Exit Function
    End If
    
    If (Trim(Sheet2.Cells(DateStart_Row, w + 1)) = "") Then
        IsLastWeekOfMonth = True
        Exit Function
    End If
    
    If (Format(CDate(Sheet2.Cells(DateStart_Row, w)), "MMM") <> Format(CDate(Sheet2.Cells(DateStart_Row, w + 1)), "MMM")) Then
        IsLastWeekOfMonth = True
        Exit Function
    End If
    
End Function

'if current week--w is first week of month

Public Function IsFirstWeekOfMonth(ByVal w As Integer) As Integer
    
    Dim d As Date
    Dim n As Date
    Dim i As Integer
    
    IsFirstWeekOfMonth = False
    
    If (Trim(Sheet2.Cells(DateStart_Row, w)) = "") Then
        Exit Function
    End If
    
    If (Trim(Sheet2.Cells(DateStart_Row, w - 1)) = "") Then
        IsFirstWeekOfMonth = True
        Exit Function
    End If
    
    If (UCase(Sheet2.GetFYFromCol(w)) = UCase(Sheet3.GetStartFY()) And UCase(Sheet2.GetWeekFromCol(w)) = UCase(Sheet3.GetStartWeek())) Then
        IsFirstWeekOfMonth = True
        Exit Function
    End If
    
    
    If (Format(CDate(Sheet2.Cells(DateStart_Row, w)), "MMM") <> Format(CDate(Sheet2.Cells(DateStart_Row, w - 1)), "MMM")) Then
        IsFirstWeekOfMonth = True
        Exit Function
    End If
    
End Function

'if in last month (same month as current week)

Public Function IsInSameMonth(ByVal w As Integer, ByVal cw As Integer) As Integer
    
    IsInSameMonth = False
    
    If (Format(CDate(Sheet2.Cells(DateStart_Row, w)), "MMM") = Format(CDate(Sheet2.Cells(DateStart_Row, cw)), "MMM")) Then
        IsInSameMonth = True
        Exit Function
    End If
    
End Function

'
Public Sub LoadData()
    Dim ds As Worksheet
    Dim i, j As Integer
    Set ds = ActiveWorkbook.Worksheets(DataSheetIndex)
    
    'copy weekly data
    For i = DataStart_Row To MonthDataStart_Row - 1
        If (i <> NoLoadRow) Then
            For j = DataStart_Col To DataStart_Col + WeeksOfYear - 1
                Sheet2.Cells(i, j) = ds.Cells(i, j)
            Next j
        End If
    Next i
    
    'copy monthly data
    For i = MonthDataStart_Row To DataEnd_Row
        For j = DataStart_Col To DataStart_Col + WeeksOfYear - 1
            If (IsFirstWeekOfMonth(j)) Then
                Sheet2.Cells(i, j) = ds.Cells(i, j)
            End If
        Next j
    Next i
End Sub

Public Sub SaveData()
    Dim ds As Worksheet
    Dim i, j As Integer
    Set ds = ActiveWorkbook.Worksheets(DataSheetIndex)
    
    'copy weekly data
    For i = DataStart_Row To MonthDataStart_Row - 1
        If (i <> NoLoadRow) Then
            For j = DataStart_Col To DataStart_Col + WeeksOfYear - 1
                 ds.Cells(i, j) = Sheet2.Cells(i, j)
            Next j
        End If
    Next i
    
    'copy monthly data
    For i = MonthDataStart_Row To DataEnd_Row
        For j = DataStart_Col To DataStart_Col + WeeksOfYear - 1
            If (IsFirstWeekOfMonth(j)) Then
                ds.Cells(i, j) = Sheet2.Cells(i, j)
            End If
        Next j
    Next i
End Sub

Public Sub LockChinaLawCells()
    Sheet2.Range("Q16:LP16").Locked = True
    Sheet2.Range("Q10:LP10").Locked = True
    Sheet2.Range("Q20:LP20").Locked = True
    Sheet2.Range("Q21:LP21").Locked = True
End Sub

Public Sub UnlockChinaLawCells()
    Sheet2.Range("Q16:LP16").Locked = False
    Sheet2.Range("Q10:LP10").Locked = False
    Sheet2.Range("Q20:LP20").Locked = False
    Sheet2.Range("Q21:LP21").Locked = False
End Sub

'true: everything is ok
'false: some error
Public Function Validate() As Boolean
    
    Validate = DoValidate()
    
    If (Not Validate) Then
        Sheet2.Activate
        Sheet2.Cells(x, y).Activate
        MsgBox validate_error_message & ". Error is in week " & GetWeekFromCol(y), vbCritical
        
    End If
    
End Function

'in new validation rule, only if one week data is full is validate.

Private Function DoValidate() As Boolean
    Dim cw, vw As Integer       'current week, validation start week
    
    Dim i, j As Integer
    Dim t As Integer            'to see if all weekly cells having data and how many
    Dim isLastWeekFound As Boolean
    Dim colOfLastWeekData As Integer
    
    DoValidate = True
    
    On Error Resume Next
    
    cw = GetCurrentWeek()   'get the column number of current week
    #If 0 Then
        cw = 124
    #End If
    vw = GetValidateStartWeek()     'get the column number of validation start week.
    
    
    
    'validate if any weekly column empty
    isLastWeekFound = False
    For j = vw To cw
        'If (Not isLastWeekFound) Then
            t = 0
            For i = DataStart_Row To MonthDataStart_Row - 1
                If (Not IsEmpty(Sheet2.Cells(i, j)) Or (IsEmpty(Sheet2.Cells(i, j)) And i = 10 And Not LoginSupplier.IsInChina)) Then
                    t = t + 1
                Else
                    x = i
                    y = j
                End If
            Next i
            
            If (t = (MonthDataStart_Row - DataStart_Row)) Then      'do further validation for percentage
                'validate sum percentage>1 error
                If (Not isLastWeekFound) Then
                    Dim s As Double
                    Dim step As Integer
                    
                    If (LoginSupplier.IsInChina) Then
                        step = 4
                    Else
                        step = 3
                    End If
                    
                    If (Not EICC_Month_validation(EICC_Row, step, j, 1)) Then
                        DoValidate = False
                        x = i
                        y = j
                        validate_error_message = Message_Error_2
                        Exit Function
                    End If
                Else
                    DoValidate = False
                    x = i
                    y = j - 1
                    validate_error_message = Message_Error_3
                    Exit Function
                End If
                    

            ElseIf ((t > 0 And LoginSupplier.IsInChina) Or (t > 1 And Not LoginSupplier.IsInChina)) Then            'data is filled, but not complete
                DoValidate = False
                validate_error_message = Message_Error_1
                Exit Function
            Else            'no data for this week, it is the end of validation and week will be recorded for this user.
                'Call Sheet3.SetLastDataTime(LoginSupplierID, GetFYFromCol(j), GetWeekFromCol(j))
                Dim ii As Integer
                If (Not isLastWeekFound) Then
                    For ii = 1 To NumberOfDataSheet
                        If (Sheet3.Cells(2 + ii - 1, 7) <> "" And Sheet3.Cells(2 + ii - 1, 7) = LoginSupplierID) Then
                            Sheet3.Cells(2 + ii - 1, 8) = GetFYFromCol(j)
                            Sheet3.Cells(2 + ii - 1, 9) = GetWeekFromCol(j)
                        End If
                            
                    Next ii
                    colOfLastWeekData = j - 1      'reset cw to the last week of data
                    isLastWeekFound = True
                End If
            End If
        'End If
    Next j
    
    If (Not isLastWeekFound) Then colOfLastWeekData = cw        'all data before this week is filled.
    
    For j = cw + 1 To DataStart_Col + 6 * WeeksOfYear
        For i = DataStart_Row To MonthDataStart_Row - 1
            If (Not IsEmpty(Sheet2.Cells(i, j))) Then
                DoValidate = False
                x = i
                y = j
                validate_error_message = Message_Error_4
                Exit Function
            End If
        Next i
        
    Next j
    
    Dim m
    Dim monthDataStartCol, monthDataEndCol As Integer
    Dim found As Boolean
    m = Array(17, 21, 26, 30, 34, 39, 43, 48, 52, 56, 61, 65, 69, 74, 78, 82, 87, 91, 95, 100, 104, 109, 113, 117, 121, 125, 129, 133, 138, 142, 147, 151, 155, 160, 164, 168, 173, 177, 181, 186, 190, 194, 199, 203, 207, 212, 216, 221, 225, 229, 333, 338, 342, 346, 351, 355, 360, 364, 368, 373, 377, 381, 386, 390, 394, 399, 403, 408, 412, 416, 421, 425, 429)
    
    found = False
    For i = 1 To 72
        If (vw < m(i) And Not found) Then
            monthDataStartCol = i - 1
            found = True
        End If
    Next i
    
    found = False
    monthDataEndCol = -1
    For i = 71 To 0 Step -1
        If (colOfLastWeekData >= m(i) And Not found) Then
            monthDataEndCol = i
            found = True
        End If
    Next i
    
    
    'monthly data
    
    For j = monthDataStartCol To monthDataEndCol
        For i = MonthDataStart_Row To DataEnd_Row
            If (IsInSameMonth(m(j), colOfLastWeekData)) Then      'last month?
                If (IsLastWeekOfMonth(colOfLastWeekData)) Then
                    'If (IsFirstWeekOfMonth(j)) Then
                        If (IsEmpty(Sheet2.Cells(i, m(j)))) Then
                            If ((i = 16 Or i = 20 Or i = 21) And Not LoginSupplier.IsInChina) Then
                            Else
                                DoValidate = False
                                x = i
                                y = m(j)
                                validate_error_message = Message_Error_1
                                Exit Function
                            End If
                        End If
                    'End If
                End If
            Else
                If (IsFirstWeekOfMonth(m(j))) Then

                    If (IsEmpty(Sheet2.Cells(i, m(j)))) Then
                        If ((i = 16 Or i = 20 Or i = 21) And Not LoginSupplier.IsInChina) Then
                        Else
                            DoValidate = False
                            x = i
                            y = m(j)
                            validate_error_message = Message_Error_1
                            Exit Function
                        End If
                    End If

                End If
            End If

        Next i
    Next j

'
'
'
'    'monthly data
'    For j = vw To cw
'        If (IsInSameMonth(j, cw)) Then
'            If (IsLastWeekOfMonth(cw)) Then
'                If (IsFirstWeekOfMonth(j)) Then
'                    If (Not EICC_Month_validation(EICC_CWD_Row, 3, j, 1)) Then
'                        DoValidate = False
'                        x = i
'                        y = j
'                        validate_error_message = Message_Error_2
'                        Exit Function
'                    End If
'                End If
'            End If
'        Else
'            If (IsFirstWeekOfMonth(j)) Then
'
'                If (Not EICC_Month_validation(EICC_CWD_Row, 3, j, 1)) Then
'                    DoValidate = False
'                    x = i
'                    y = j
'                    validate_error_message = Message_Error_2
'                    Exit Function
'                End If
'
'            End If
'        End If
'
'    Next j
    
    
    
    
End Function


Private Function EICC_Month_validation(start As Integer, step As Integer, w As Integer, goal As Double) As Boolean
    Dim s As Double
    Dim i As Integer
    
    EICC_Month_validation = True
    s = 0
    For i = 0 To step - 1
        If (IsNumeric(Sheet2.Cells(start + i, w))) Then
            s = s + CDbl(Sheet2.Cells(start + i, w))
        End If
    Next i
    If (s > goal) Then
        EICC_Month_validation = False
        x = i
        y = w
        validate_error_message = Message_Error_2
        Exit Function
    End If

End Function

Private Sub Worksheet_Activate()
'    Dim cw As Integer
'
'    cw = GetCurrentWeek()   'get the column number of current week
'    Sheet2.Cells(DataStart_Row, cw).Activate
    If (FirstLogin) Then
     LoginForm.Show
    End If
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    If (Target.Row = SupplierName_Row And Target.column = SupplierName_Col) Then
        If (FirstLogin) Then FirstLogin = False
     LoginForm.Show
    End If
End Sub



Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const StartRow = 2
Private Const Version_Row = 2
Private Const Version_Col = 2
Private Const ToolName_Row = 2
Private Const ToolName_Col = 1
Private Const FY_Row = 2
Private Const FY_Col = 3
Private Const SupplierDataSheet_Row = 2
Private Const SupplierDataSheet_Col = 7
Private Const LastDataFY_Col = 8
Private Const LastDataWeek_Col = 9
Private Const StartFY_Row = 2
Private Const StartFY_Col = 11
Private Const StartWeek_Row = 2
Private Const StartWeek_Col = 12


Public Function GetVersion() As String
    GetVersion = Sheet3.Cells(Version_Row, Version_Col)
End Function

Public Function GetFY() As String
    GetFY = "FY" & Sheet3.Cells(FY_Row, FY_Col)
End Function

Public Function GetToolName() As String
    GetToolName = Sheet3.Cells(ToolName_Row, ToolName_Col)
End Function

Public Function GetStartFY() As String
    GetStartFY = Sheet3.Cells(StartFY_Row, StartFY_Col)
    If Trim(GetStartFY) = "" Then GetStartFY = "FY16"
End Function

Public Function GetStartWeek() As String
    GetStartWeek = Sheet3.Cells(StartWeek_Row, StartWeek_Col)
    If Trim(GetStartWeek) = "" Then GetStartWeek = "WK1"
End Function

Public Sub GetSupplierDataInputStatus(ByRef a() As String)
    Dim i As Integer
    
    For i = 1 To NumberOfDataSheet
        If (Sheet3.Cells(SupplierDataSheet_Row + i - 1, SupplierDataSheet_Col) <> "") Then
            a(i) = Sheet4.FindSupplierNameByID(Sheet3.Cells(SupplierDataSheet_Row + i - 1, SupplierDataSheet_Col)) & SpaceChar & Separator & SpaceChar & Message_Notify_1 & Sheet3.Cells(SupplierDataSheet_Row + i - 1, SupplierDataSheet_Col + 1) & " " & Sheet3.Cells(SupplierDataSheet_Row + i - 1, SupplierDataSheet_Col + 2)
        End If
    Next i
    
End Sub

Public Sub GetDataSheetList(ByRef a() As String)
    
    Dim i As Integer
    
    For i = 1 To NumberOfDataSheet
        a(i) = Sheet3.Cells(SupplierDataSheet_Row + i - 1, SupplierDataSheet_Col)
    Next i
    
End Sub

Public Function GetDataSheetIndex(sid As String) As Integer
    Dim i As Integer
    For i = 1 To NumberOfDataSheet
        If (Sheet3.Cells(SupplierDataSheet_Row + i - 1, SupplierDataSheet_Col) = sid) Then
            GetDataSheetIndex = i
            Exit Function
        End If
    Next i
    
    For i = 1 To NumberOfDataSheet
        If (IsEmpty(Sheet3.Cells(SupplierDataSheet_Row + i - 1, SupplierDataSheet_Col))) Then
            GetDataSheetIndex = i
            Exit Function
        End If
    Next i
    GetDataSheetIndex = 0
End Function

Public Function SetDataSheetIndex(ByVal id As Integer, sid As String) As Integer
    
    SetDataSheetIndex = 0
    If IsEmpty(Sheet3.Cells(SupplierDataSheet_Row + id - 1, SupplierDataSheet_Col)) Then
        Sheet3.Cells(SupplierDataSheet_Row + id - 1, SupplierDataSheet_Col) = sid
        SetDataSheetIndex = id
    End If
End Function

Public Sub SetLastDataTime(ByVal sid As Integer, f As String, w As String)
    Dim i As Integer
    
    For i = 1 To NumberOfDataSheet
        If (Sheet3.Cells(SupplierDataSheet_Row + i - 1, SupplierDataSheet_Col) = CStr(sid)) Then
            Sheet3.Cells(SupplierDataSheet_Row + i - 1, LastDataFY_Col) = f
            Sheet3.Cells(SupplierDataSheet_Row + i - 1, LastDataWeek_Col) = w
        End If
            
    Next i
End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const StartRow = 2
Private Const Supplier_Col = 2
Private Const Supplier_Detail_Col = 3
Private Const sheetname = "User"

Public Function GetSupplierNumber() As Integer
    GetSupplierNumber = GetSheetRowNumber(sheetname, Supplier_Col) - StartRow + 1
End Function

'newpassword: hashed password
'id: supplierid
Public Sub SaveNewPassword(newpassword As String, id As String)
    Dim i As Integer
    Dim number As Integer
    
    number = GetSupplierNumber()
    
    ReDim list(number)
    
    For i = StartRow To (number + StartRow - 1)
        If (id = ActiveWorkbook.Sheets(sheetname).Cells(i, Supplier_Col - 1)) Then
            ActiveWorkbook.Sheets(sheetname).Cells(i, Supplier_Col + 3) = newpassword
            Exit Sub
        End If
        
    Next i
End Sub

'list value could be set for the supplier list.
Public Sub GetSupplierList(ByRef list() As SupplierClass)
    Dim i As Integer
    Dim number As Integer
    Dim s As SupplierClass
    
    number = GetSupplierNumber()
    
    ReDim list(number)
    
    For i = StartRow To (number + StartRow - 1)
        Set s = New SupplierClass
        s.SupplierID = Sheet4.Cells(i, Supplier_Col - 1)
        s.SupplierName = Sheet4.Cells(i, Supplier_Col)
        s.SupplierExtendName = Sheet4.Cells(i, Supplier_Col + 1)
        s.SupplierLoginID = Sheet4.Cells(i, Supplier_Col + 2)
        s.SupplierHexPassword = Sheet4.Cells(i, Supplier_Col + 3)
        s.SupplierPassword = Sheet4.Cells(i, Supplier_Col + 5)
        If (Sheet4.Cells(i, Supplier_Col + 4) = "Y") Then
            s.IsInChina = True
        Else
            s.IsInChina = False
        End If
        Set list(i - StartRow + 1) = s
    Next i

End Sub


Public Function FindSupplierNameByID(sid As String) As String
    Dim i As Integer
    Dim number As Integer
    
    number = GetSupplierNumber()
    
    For i = StartRow To (number + StartRow - 1)
        If Sheet4.Cells(i, Supplier_Col - 1) = sid Then
            FindSupplierNameByID = Sheet4.Cells(i, Supplier_Detail_Col)
            Exit Function
        End If
    Next i
    
    FindSupplierNameByID = ""
    
End Function
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "StatusForm"
Attribute VB_Base = "0{89302543-DF96-478B-A4BE-0375E77494C8}{20D4F08B-93B1-4B37-AE16-7671B999C596}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
    Unload Me
End Sub



Private Sub Label1_Click()

End Sub

Private Sub UserForm_Initialize()
    Dim status(NumberOfDataSheet) As String
    
    Call Sheet3.GetSupplierDataInputStatus(status)
    For i = 1 To NumberOfDataSheet
        ListBox_Status.AddItem status(i)
    Next i
End Sub
Attribute VB_Name = "SupplierClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private supplier_Name As String
Private supplier_ExtendName As String
Private supplier_ID As String
Private supplier_LoginID As String
Private supplier_Password As String
Private supplier_Hex_Password As String
Private supplier_InChina As Boolean

Public Property Get SupplierName() As String
    SupplierName = supplier_Name
End Property

Public Property Let SupplierName(ByVal c As String)
    supplier_Name = c
End Property

Public Property Get SupplierExtendName() As String
    SupplierExtendName = supplier_ExtendName
End Property

Public Property Let SupplierExtendName(ByVal c As String)
    supplier_ExtendName = c
End Property

Public Property Get SupplierID() As String
    SupplierID = supplier_ID
End Property

Public Property Let SupplierID(ByVal c As String)
    supplier_ID = c
End Property

Public Property Get SupplierLoginID() As String
    SupplierLoginID = supplier_LoginID
End Property

Public Property Let SupplierLoginID(ByVal c As String)
    supplier_LoginID = c
End Property

Public Property Get SupplierPassword() As String
    SupplierPassword = supplier_Password
End Property

Public Property Let SupplierPassword(ByVal c As String)
    supplier_Password = c
End Property

Public Property Get SupplierHexPassword() As String
    SupplierHexPassword = supplier_Hex_Password
End Property

Public Property Let SupplierHexPassword(ByVal c As String)
    supplier_Hex_Password = c
End Property

Public Property Get IsInChina() As Boolean
    IsInChina = supplier_InChina
End Property

Public Property Let IsInChina(ByVal c As Boolean)
    supplier_InChina = c
End Property

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Version 2.01
'1. Fixed the not in China can't save the data of the last week of month.
'Version 2.00
'1. Add FY20FY21 Space
'Version 1.34
'1. Correct Dec dashboard criteria
'2. Fix  the lock issue when cancel save-action
'Version 1.35
'1. Add 0201CN208b into User list

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    'Application.ThisWorkbook.Saved =
    If (InStr(UCase(Environ("userdnsdomain")), "DELL") <= 0) Then
    StatusForm.Show
    End If
    UnProtectSheets
   ' Sheet2.Range("Q5:DQ25").Locked = True      'comment it v1.34
    ProtectSheets
End Sub

'validate the code before saved
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    If (FirstLogin) Then Exit Sub
    UnProtectSheets
    On Error GoTo errhandler
    If (Not Sheet2.Validate) Then
        Cancel = True
    Else
        If (DataSheetIndex <> "") Then Sheet2.SaveData
    End If
    
    ProtectSheets
    Exit Sub
errhandler:
    ProtectSheets
End Sub

Private Sub Workbook_Open()
    FirstLogin = True
    Sheet1.Activate
'    LoginForm.Show
End Sub




' InQuest injected base64 decoded content
' )^J)

INQUEST-PP=macro
