Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DriverHandler"
Option Explicit

' Some ODBC helper procedures
' - mossSOFT2003 -
' Updated 10/2007

Private Const SQL_FETCH_NEXT As Long = 1
Private Const SQL_FETCH_FIRST As Long = 2
Private Const SQL_SUCCESS As Long = 0
Private Const SQL_NO_DATA_FOUND As Long = 100

Private Const SQL_NTS As Long = -3
Private Const SQL_DROP As Long = 1

Private Const SQL_MAX_DESC_LENGTH As Long = 128
Private Const SQL_MAX_DSN_LENGTH As Long = 32

Private Const SQL_NULL_HANDLE As Long = 0
Private Const SQL_HANDLE_ENV As Long = 1
Private Const SQL_HANDLE_DBC As Long = 2
Private Const SQL_HANDLE_STMT As Long = 3
Private Const SQL_HANDLE_DESC As Long = 4

Private Const SQL_ATTR_ODBC_VERSION As Long = 200
Private Const SQL_OV_ODBC3 As Long = 3
Private Const SQL_IS_INTEGER As Long = (-6)
Private Const ODBC_ADD_DSN As Long = 1
Private Const ODBC_BOTH_DSN As Long = 0
Private Const ODBC_USER_DSN As Long = 1
Private Const ODBC_SYSTEM_DSN As Long = 2
Private Const SQL_NEED_DATA As Long = 99
Private Const SQL_ERROR As Long = -1

#If VBA7 Then
Private Declare PtrSafe Function SQLWritePrivateProfileString Lib "odbccp32.dll" _
                                                      (ByVal Section As String, _
                                                       ByVal Key As String, _
                                                       ByVal Entry As String, _
                                                       ByVal Init As String) As Long

Private Declare PtrSafe Function SQLAllocHandle Lib "odbc32.dll" _
                                        (ByVal HandleType As Integer, _
                                         ByVal InputHandle As Long, _
                                         OutputHandlePtr As Long) As Long

Private Declare PtrSafe Function SQLAllocConnect Lib "odbc32.dll" _
                                         (ByVal hEnv As Long, _
                                          phdbc As Long) As Integer

Private Declare PtrSafe Function SQLAllocEnv Lib "odbc32.dll" (phenv As Long) As Integer
Private Declare PtrSafe Function SQLFreeEnv Lib "odbc32.dll" (ByVal hEnv As Long) As Integer

Private Declare PtrSafe Function SQLFreeHandle Lib "odbc32.dll" _
                                       (ByVal HandleType As Integer, _
                                        ByVal handle As Long) As Long

Private Declare PtrSafe Function SQLAllocStmt Lib "odbc32.dll" _
                                      (ByVal hDbc As Long, _
                                       hStmt As Long) As Integer

Private Declare PtrSafe Function SQLFreeStmt Lib "odbc32.dll" _
                                     (ByVal hStmt As Long, _
                                      ByVal fOption As Integer) As Integer

Private Declare PtrSafe Function SQLSetEnvAttr Lib "odbc32.dll" _
                                       (ByVal EnvironmentHandle As Long, _
                                        ByVal dwAttribute As Long, _
                                        ByVal ValuePtr As Long, _
                                        ByVal StringLen As Long) As Long

Private Declare PtrSafe Function SQLConfigDataSource Lib "odbccp32.dll" _
                                             (ByVal hwndParent As Long, _
                                              ByVal fRequest As Long, _
                                              ByVal lpszDriver As String, _
                                              ByVal lpszAttributes As String) As Long

Private Declare PtrSafe Function SQLDataSources Lib "odbc32.dll" _
                                        (ByVal hEnv As Long, _
                                         ByVal fDirection As Integer, _
                                         ByVal szDSN As String, _
                                         ByVal cbDSNMax As Integer, _
                                         pcbDSN As Integer, _
                                         ByVal szDescription As String, _
                                         ByVal cbDescriptionMax As Integer, _
                                         pcbDescription As Integer) As Integer

Private Declare PtrSafe Function SQLSetConfigMode Lib "odbccp32.dll" (ByVal wConfigMode As Integer) As Long

Declare PtrSafe Function SQLGetPrivateProfileString Lib "odbccp32.dll" _
                                            (ByVal Section As String, _
                                             ByVal Key As String, _
                                             ByVal Default As String, _
                                             ByVal Buffer As String, _
                                             ByVal BufSize As Integer, _
                                             ByVal Init As String) As Long

Private Declare PtrSafe Function SQLConnect Lib "odbc32.dll" _
                                    (ByVal hDbc As Long, _
                                     ByVal szDSN As String, _
                                     ByVal cbDSN As Integer, _
                                     ByVal szUID As String, _
                                     ByVal cbUID As Integer, _
                                     ByVal szAuthStr As String, _
                                     ByVal cbAuthStr As Integer) As Integer

Private Declare PtrSafe Function SQLDisconnect Lib "odbc32.dll" (ByVal hDbc As Long) As Integer

Private Declare PtrSafe Function SQLFreeConnect Lib "odbc32.dll" (ByVal hDbc As Long) As Integer

Private Declare PtrSafe Function SQLBrowseConnect Lib "odbc32.dll" _
                                          (ByVal hDbc As Long, _
                                           ByVal szConnStrIn As String, _
                                           ByVal cbConnStrIn As Integer, _
                                           ByVal szConnStrOut As String, _
                                           ByVal cbConnStrOutMax As Integer, _
                                           pcbconnstrout As Integer) As Integer

Private Declare PtrSafe Function SQLDrivers Lib "odbc32.dll" _
                                    (ByVal hEnv As Long, _
                                     ByVal fDirection As Integer, _
                                     ByVal szDriverDesc As String, _
                                     ByVal cbDriverDescMax As Integer, _
                                     pcbDriverDesc As Integer, _
                                     ByVal szDriverAttr As String, _
                                     ByVal cbDrvrAttrMax As Integer, _
                                     pcbDrvrAttr As Integer) As Integer

Private Declare PtrSafe Function SQLGetDiagRec Lib "odbc32.dll" ( _
                                       ByVal HandleType As Integer, _
                                       ByVal HandleType As Long, _
                                       ByVal RecNum As Integer, _
                                       ByVal SQLState As String, _
                                       ByRef Errcode As Long, _
                                       ByVal sMsg As String, _
                                       ByVal linMsg As Integer, _
                                       ByRef lMsb As Integer) As Integer

Private Declare PtrSafe Function GetDesktopWindow Lib "user32" () As Long


#Else
Private Declare Function SQLWritePrivateProfileString Lib "odbccp32.dll" _
                                                      (ByVal Section As String, _
                                                       ByVal Key As String, _
                                                       ByVal Entry As String, _
                                                       ByVal Init As String) As Long

Private Declare Function SQLAllocHandle Lib "odbc32.dll" _
                                        (ByVal HandleType As Integer, _
                                         ByVal InputHandle As Long, _
                                         OutputHandlePtr As Long) As Long

Private Declare Function SQLAllocConnect Lib "odbc32.dll" _
                                         (ByVal hEnv As Long, _
                                          phdbc As Long) As Integer

Private Declare Function SQLAllocEnv Lib "odbc32.dll" (phenv As Long) As Integer
Private Declare Function SQLFreeEnv Lib "odbc32.dll" (ByVal hEnv As Long) As Integer

Private Declare Function SQLFreeHandle Lib "odbc32.dll" _
                                       (ByVal HandleType As Integer, _
                                        ByVal handle As Long) As Long

Private Declare Function SQLAllocStmt Lib "odbc32.dll" _
                                      (ByVal hDbc As Long, _
                                       hStmt As Long) As Integer

Private Declare Function SQLFreeStmt Lib "odbc32.dll" _
                                     (ByVal hStmt As Long, _
                                      ByVal fOption As Integer) As Integer

Private Declare Function SQLSetEnvAttr Lib "odbc32.dll" _
                                       (ByVal EnvironmentHandle As Long, _
                                        ByVal dwAttribute As Long, _
                                        ByVal ValuePtr As Long, _
                                        ByVal StringLen As Long) As Long

Private Declare Function SQLConfigDataSource Lib "odbccp32.dll" _
                                             (ByVal hwndParent As Long, _
                                              ByVal fRequest As Long, _
                                              ByVal lpszDriver As String, _
                                              ByVal lpszAttributes As String) As Long

Private Declare Function SQLDataSources Lib "odbc32.dll" _
                                        (ByVal hEnv As Long, _
                                         ByVal fDirection As Integer, _
                                         ByVal szDSN As String, _
                                         ByVal cbDSNMax As Integer, _
                                         pcbDSN As Integer, _
                                         ByVal szDescription As String, _
                                         ByVal cbDescriptionMax As Integer, _
                                         pcbDescription As Integer) As Integer

Private Declare Function SQLSetConfigMode Lib "odbccp32.dll" (ByVal wConfigMode As Integer) As Long

'Private Declare Function SQLGetPrivateProfileString Lib "ODBCCP32.DLL" _
 '    (ByVal sSection As String, _
 '    ByVal sEntry As String, _
 '    ByVal sDefault As String, _
 '    ByVal sBuffer As String, _
 '    ByVal lBuffer As Long, _
 '    sFile As String) As Long
Declare Function SQLGetPrivateProfileString Lib "odbccp32.dll" _
                                            (ByVal Section As String, _
                                             ByVal Key As String, _
                                             ByVal Default As String, _
                                             ByVal Buffer As String, _
                                             ByVal BufSize As Integer, _
                                             ByVal Init As String) As Long

Private Declare Function SQLConnect Lib "odbc32.dll" _
                                    (ByVal hDbc As Long, _
                                     ByVal szDSN As String, _
                                     ByVal cbDSN As Integer, _
                                     ByVal szUID As String, _
                                     ByVal cbUID As Integer, _
                                     ByVal szAuthStr As String, _
                                     ByVal cbAuthStr As Integer) As Integer

Private Declare Function SQLDisconnect Lib "odbc32.dll" (ByVal hDbc As Long) As Integer

Private Declare Function SQLFreeConnect Lib "odbc32.dll" (ByVal hDbc As Long) As Integer

Private Declare Function SQLBrowseConnect Lib "odbc32.dll" _
                                          (ByVal hDbc As Long, _
                                           ByVal szConnStrIn As String, _
                                           ByVal cbConnStrIn As Integer, _
                                           ByVal szConnStrOut As String, _
                                           ByVal cbConnStrOutMax As Integer, _
                                           pcbconnstrout As Integer) As Integer

Private Declare Function SQLDrivers Lib "odbc32.dll" _
                                    (ByVal hEnv As Long, _
                                     ByVal fDirection As Integer, _
                                     ByVal szDriverDesc As String, _
                                     ByVal cbDriverDescMax As Integer, _
                                     pcbDriverDesc As Integer, _
                                     ByVal szDriverAttr As String, _
                                     ByVal cbDrvrAttrMax As Integer, _
                                     pcbDrvrAttr As Integer) As Integer

Private Declare Function SQLGetDiagRec Lib "odbc32.dll" ( _
                                       ByVal HandleType As Integer, _
                                       ByVal HandleType As Long, _
                                       ByVal RecNum As Integer, _
                                       ByVal SQLState As String, _
                                       ByRef Errcode As Long, _
                                       ByVal sMsg As String, _
                                       ByVal linMsg As Integer, _
                                       ByRef lMsb As Integer) As Integer

Private Declare Function GetDesktopWindow Lib "user32" () As Long

#End If


'Erzeugt eine DSN aus den Angaben: (optional kurzer) Treibername,
'                                   Beschreibung , DSN - Name, AttributString
'Bei Erfolg wird True zur|fffd|ckgegeben. Eine bestehende DSN gleichen Namens wird |fffd|berschrieben!
'AttributString: Hier handelt sich um variable treiberspezifische Angaben.
'  Die einzelnen Attribute m|fffd|ssen durch NullStrings getrennt sein, z.B.:
'  strArrib = "SERVER= MeinServer" & Chr(0) & "SERVERDB=MeineDB" & Chr(0) & "UID=Ich"
'  Man kann diese Attribute am einfachsten ermitteln, indem man eine Beispiel-DSN erzeugt
'  und sich die Eintr|fffd|ge in der Registry unter HKEY_CURRENT_USER\SOFTWARE\ODBC\ODBC.INI anschaut
'Wenn Show auf True gesetzt wird, so wird zus|fffd|tzlich das ODBC-Dialogfenster angezeigt.
'Bsp.:
'CreateDSN "Access", "(nix)", "MeinAccess", "DBQ=d:\datenbanken\meine.mdb" & chr(0) & "UID=sascha")
Public Function CreateDSN(strDriver, _
                          strDescription As String, _
                          strDSN As String, _
                          strAttrib As String, _
                          Optional Show = False) As Boolean
    Dim i As Long

    strDriver = GetRealDriverName(strDriver)(0)
    If strDriver = "Unbekannt" Then Exit Function
    strAttrib = strAttrib & Chr(0) & "DESCRIPTION=" & strDescription & Chr(0)
    strAttrib = strAttrib & "DSN=" & strDSN & Chr(0)
    If Show Then i = Application.hWndAccessApp Else i = 0&
    'If Show Then i = GetDesktopWindow Else i = 0&  '...Ersatz, f|fffd|r vorstehende Zeile,
    'wenn Code nicht in Access eingesetzt
    i = SQLConfigDataSource(i, ODBC_ADD_DSN, strDriver, strAttrib)
    CreateDSN = (i <> 0)
End Function

'Gibt eine Liste aller im System installierten ODBC-Treiber in einem String-Array zur|fffd|ck
'Bsp.: ListODBCDrivers(0) >> "Microsoft Access-Treiber (*.mdb)"
Public Function ListODBCDrivers() As String()
    Dim ret As Long
    Dim j As Long
    Dim hEnv As Long
    Dim arrDrv() As String
    Dim strDriver As String * 512
    Dim strAttrib As String * 512
    Dim lDrv As Integer
    Dim lAtr As Integer

    ret = SQLAllocEnv(hEnv)
    Do While ret = SQL_SUCCESS
        ret = SQLDrivers(hEnv, SQL_FETCH_NEXT, strDriver, 512, lDrv, strAttrib, 512, lAtr)
        If ret <> SQL_NO_DATA_FOUND Then
            ReDim Preserve arrDrv(j)
            arrDrv(j) = Left(strDriver, lDrv)
'            Debug.Print "D:" & arrDrv(j)
            j = j + 1
        End If
    Loop
    ListODBCDrivers = arrDrv
    Call SQLFreeEnv(hEnv)

End Function

'Gibt zu einem |fffd|bergebenen abgek|fffd|rzten ODBC-Treibernamen eine Liste der kompatiblen
'vollst|fffd|ndigen Treibernamen in einem String-Array zur|fffd|ck
'Bsp.: GetRealDriverName("MySQL")(0) >> "MySQL ODBC 3.51"
Public Function GetRealDriverName(strDriverName) As String()
    Dim arrDrv() As String, arrResult() As String, i As Long, n As Long, j As Long
    
    arrDrv = ListODBCDrivers
    On Error Resume Next
    i = UBound(arrDrv)
    On Error GoTo 0
    For n = 0 To i
        If 0 <> InStr(1, arrDrv(n), strDriverName, vbTextCompare) Then
            ReDim Preserve arrResult(j)
            arrResult(j) = arrDrv(n)
            If arrResult(j) = "" Then arrResult(j) = "Unbekannt"
            j = j + 1
        End If
    Next n
    GetRealDriverName = arrResult
    
End Function

'|fffd|berpr|fffd|ft, ob der angegebene ODBC-Treibername auf dem System existiert
'Bsp.: "MySQL" gibt True zur|fffd|ck, wenn ein "MySQL ODBC 2.5"-Treiber vorhanden ist.
'(Teilstring erlaubt; "MySQL ODBC 3.51" w|fffd|rde in diesem Fall ebenso g|fffd|ltig sein.)
Public Function ODBCDriverExists(ByVal strDriverName As String) As Boolean
    Dim ret As Long
    Dim l As Long
    Dim hEnv As Long
    Dim strTemp As String
    Dim strDriver As String * 512, strAttrib As String * 512
    Dim lDrv As Integer, lAtr As Integer

    l = Len(strDriverName)
    ret = SQLAllocEnv(hEnv)
    Do While ret = SQL_SUCCESS
        ret = SQLDrivers(hEnv&, SQL_FETCH_NEXT, strDriver, 512, lDrv, strAttrib, 512, lAtr)
        If ret <> SQL_NO_DATA_FOUND Then
            strTemp = Left(Trim(Left(strDriver, lDrv)), l)
            If StrComp(strTemp, strDriverName, vbTextCompare) = 0 Then
                ODBCDriverExists = True
                Exit Do
            End If
        End If
    Loop
    Call SQLFreeEnv(hEnv)

End Function

'Gibt ein String-Array zur|fffd|ck, das alle DSN-Namen im System enth|fffd|lt,
'die den angegebenen ODBC-Treiber benutzen.
'Bsp.: ListAllDriverDSN("MySQL ODBC 2.5")(0) >> "Meine erste MySQL DSN"
Public Function ListAllDriverDSN(ByVal strDSNDriver As String) As String()
    Dim lEnv As Long
    Dim arrDSN() As String
    Dim strServer As String
    Dim strDriver As String
    Dim nSvrLen As Integer, nDvrLen As Integer
    Dim i As Long, n As Long

    If SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, lEnv) <> 0 Then
        If SQLSetEnvAttr(lEnv, SQL_ATTR_ODBC_VERSION, SQL_OV_ODBC3, SQL_IS_INTEGER) <> 0 Then
            strServer = String(SQL_MAX_DSN_LENGTH, vbNullChar)
            strDriver = String(SQL_MAX_DESC_LENGTH, vbNullChar)
            Do While SQLDataSources(lEnv, SQL_FETCH_NEXT, strServer, SQL_MAX_DSN_LENGTH, nSvrLen, _
                                    strDriver, SQL_MAX_DESC_LENGTH, nDvrLen) = SQL_SUCCESS
                strServer = Left(strServer, nSvrLen)
                strDriver = Left(strDriver, nDvrLen)
                'Debug.Print strDriver
                If InStr(1, strDSNDriver, strDriver, vbTextCompare) <> 0 Then
                    ReDim Preserve arrDSN(n)
                    arrDSN(UBound(arrDSN)) = strServer
                    n = n + 1
                End If
                strServer = String(SQL_MAX_DSN_LENGTH, vbNullChar)
                strDriver = String(SQL_MAX_DESC_LENGTH, vbNullChar)
            Loop
        End If
        Call SQLFreeHandle(SQL_HANDLE_ENV, lEnv)
    End If
    ListAllDriverDSN = arrDSN

End Function

'Testet die DSN. Es wird eine Connection aufgebaut
'Angabe von DSN-Name, Username, Passwort
'Bei Fehler wird eine ODBC-TreiberFehlermeldung zur|fffd|ckgegeben.
'Bsp. CheckDSNConnect("MeinMySQL", "Sascha", " Trowitzsch") >> "Invalid user id and/or password"
Public Function CheckDSNConnect(ByVal strDSN, ByVal strUser As String, ByVal strPW As String) As String
    Dim hEnv As Long, hDbc As Long, hStmt As Long
    Dim ret As Long
    Dim strTemp As String
    Dim strMsg As String * 256
    Dim lMsg As Integer
    Dim strState As String * 5
    Dim lError As Long

    ret = SQLAllocEnv(hEnv)
    ret = SQLAllocConnect(ByVal hEnv, hDbc)
    If ret = SQL_SUCCESS Then
        ret = SQLConnect(hDbc, ByVal strDSN & vbNullChar, Len(strDSN), _
                    ByVal strUser & vbNullChar, Len(strUser) + 1, _
                    ByVal strPW & vbNullChar, Len(strPW) + 1)
        If ret <> 0 Then
            strMsg = String(255, vbNullChar)
            Call SQLGetDiagRec(SQL_HANDLE_DBC, hDbc, 1, strState, lError, strMsg, 255, lMsg)
            Select Case strState
            Case "01000"
                strTemp = "Allgemeine Treiber-Information"
            Case "01S02"
                strTemp = "Ein oder mehrere Parameter sind ung|fffd|ltig"
            Case "08001"
                strTemp = "Es konnte keine Verbindung aufgebaut werden"
            Case "08002"
                strTemp = "Es konnte keine weitere Verbindung aufgebaut werden"
            Case "08004"
                strTemp = "Der SQL-Server wies die Verbindungsanfrage zur|fffd|ck (implementation error)"
            Case "08S01"
                strTemp = "Kommunikationsfehler zwischen Treiber und Datenquelle"
            Case "28000"
                strTemp = "Ung|fffd|ltige Anmelde- und/oder Kennwortangabe(n)"
            Case "HY000"
                strTemp = "Unbekannter Fehler"
            Case "HY001", "HY013"
                strTemp = "Es konnte nicht ausreichend Speicher alloziert werden"
            Case "HY090"
                strTemp = "Ung|fffd|ltiger Parameter"
            Case "HYT00", "HYT01"
                strTemp = "Timeout bei Verbindungsversuch"
            Case "IM001"
                strTemp = "Ein |fffd|bergebenes Attribut wird vom Treiber nicht unterst|fffd|tzt"
            Case "IM002"
                strTemp = "ODBC-Datenquelle (DSN) wurde nicht gefunden"
            Case "IM003"
                strTemp = "Der angegebene ODBC-Treiber wurde nicht gefunden"
            Case "IM004", "IM005", "IM006"
                strTemp = "ODBC-Treiberfehler"
            Case "IM009"
                strTemp = "ODBC-Treiber meldet einen DLL-Fehler"
            Case "IM010"
                strTemp = "Ung|fffd|ltiger DSN-Name. Name zu lang."
            Case Else
                strTemp = "Unbekannter Fehler"
            End Select
            CheckDSNConnect = "- " & strTemp & "-" & vbCrLf & _
                              "ODBC-Subsystem meldet:" & vbCrLf & _
                              Chr(34) & Left(strMsg, lMsg) & Chr(34)
        Else
            CheckDSNConnect = "Verbindung zu " & strDSN & " war erfolgreich."
        End If
        ret = SQLDisconnect(ByVal hDbc)
    End If
    ret = SQLFreeEnv(ByVal hEnv)
    ret = SQLFreeStmt(hStmt, SQL_DROP)

End Function

'Alle ODBC-Datenquellen (DSN) im System auslesen
'ShowAttributes: Wenn True (Vorgabe), dann werden zus|fffd|tzlich deren Attribute angezeigt
'Ausgabe im Direktfenster!
Public Function GetDSNEntries(Optional ShowAttributes = True)
    Dim lEnv As Long
    Dim strServer As String, strDriver As String
    Dim nSvrLen As Integer, nDvrLen As Integer

    SQLAllocHandle SQL_HANDLE_ENV, SQL_NULL_HANDLE, lEnv
    If lEnv <> 0 Then
        If SQLSetEnvAttr(lEnv, SQL_ATTR_ODBC_VERSION, SQL_OV_ODBC3, _
                         SQL_IS_INTEGER) <> 0 Then
            strServer = String(SQL_MAX_DSN_LENGTH, vbNullChar)
            strDriver = String(SQL_MAX_DESC_LENGTH, vbNullChar)
            Do While SQLDataSources(lEnv, SQL_FETCH_NEXT, strServer, SQL_MAX_DSN_LENGTH, _
                                    nSvrLen, strDriver, SQL_MAX_DESC_LENGTH, nDvrLen) = SQL_SUCCESS
                strServer = Left(strServer, nSvrLen)
                Debug.Print "DSN: " & strServer
                If ShowAttributes Then GetSectionsDSN strServer    'Siehe unten
                strServer = String(SQL_MAX_DSN_LENGTH, vbNullChar)
                strDriver = String(SQL_MAX_DESC_LENGTH, vbNullChar)
            Loop
        End If
        Call SQLFreeHandle(SQL_HANDLE_ENV, lEnv)
    End If
End Function

'Einzelnes Attribut einer ODBC-Datenquelle(DSN) auslesen
Function GetSectionFromDSN(sDSN As String, sSection As String) As String
    Dim strBuffer As String
    Dim n As Long
    Dim ret As Long

    ret = SQLSetConfigMode(ODBC_USER_DSN)
    If Not CBool(ret) Then
        MsgBox "ODBC-Initialisierung gescheitert!"
    Else
        strBuffer = String$(512, 0)
        n = SQLGetPrivateProfileString(sDSN, sSection, "DSN oder Eigenschaft nicht gefunden!", strBuffer, 511, "ODBC.INI")
        GetSectionFromDSN = Left(strBuffer, n)
    End If

End Function

'Alle Attribute einer ODBC-Datenquelle(DSN) ausgeben
Function GetSectionsDSN(Optional sDSN As String) As String
    Dim sSection As String
    Dim sResult As String
    Dim arrSections() As String
    Dim sDefault As String
    Dim strBuffer As String
    Dim n As Long, i As Long
    Dim ret As Long

    ret = SQLSetConfigMode(ODBC_BOTH_DSN)   'Oder ODBC_USER_DSN,
    ' ODBC_SYSTEM_DSN
    If Not CBool(ret) Then
        MsgBox "ODBC-Initialisierung gescheitert!"
    Else
        sDefault = "DSN-Eigenschaft nicht gefunden!"
        strBuffer = String$(512, 0)
        n = SQLGetPrivateProfileString(vbNullString, vbNullString, _
                                       vbNullString, strBuffer, 512, "ODBC.INI")
        strBuffer = String$(512, 0)
        sSection = vbNullString
        'Attribute auslesen (sSection = "")
        n = SQLGetPrivateProfileString(sDSN, sSection, "DSN nicht gefunden!", _
                                       strBuffer, 512, "ODBC.INI")
        If n = 0 Then Exit Function
        sSection = Left(strBuffer, n - 1)
        'Attribut-String ist chr(0)-separiert; in Array splitten:
        arrSections = Split(sSection, vbNullChar)
        'Attributte enumerieren:
        For i = 0 To UBound(arrSections)
            If Len(arrSections(i)) > 0 Then
                strBuffer = String$(512, 0)
                n = SQLGetPrivateProfileString(sDSN, arrSections(i), _
                                               sDefault, strBuffer, 512, "ODBC.INI")
                sSection = Left(strBuffer, n)
'                Debug.Print vbTab & arrSections(i) & " = " & sSection
                sResult = sResult & arrSections(i) & " = " & sSection & vbCrLf
            End If
        Next i
    End If
    
    If Len(sResult) > 2 Then GetSectionsDSN = Left(sResult, Len(sResult) - 2)

End Function

'Gibt die Syntax f|fffd|r eine ODBC-Verbindungszeichenfolge zu einem bestimmten Treiber zur|fffd|ck
'Scheint aber nur f|fffd|r den MSSQL zu funktionieren.
Public Function BrowseConnect(Optional strDriver As String = "SQL Server") As String
    Dim msg As String
    Dim strConnect As String
    Dim cbConnect As Integer
    Dim strDriverStr As String
    Dim hEnv As Long
    Dim hStmt As Long
    Dim hDbc As Long
    Dim ret As Long

    ret = SQLAllocEnv(hEnv)
    If hEnv = 0 Then Exit Function
    
    ret = SQLAllocConnect(ByVal hEnv, hDbc)
    If hDbc = 0 Then
        SQLFreeEnv hEnv
        Exit Function
    End If
    
    strDriverStr = "DRIVER=" & GetRealDriverName(strDriver)(0)
'    strDriverStr = "DRIVER={" & GetRealDriverName(strDriver)(0) & "};"
    Debug.Print strDriverStr
    
    strConnect = String(1024, 0)
    ret = SQLBrowseConnect(ByVal hDbc, strDriverStr, _
            Len(strDriverStr), strConnect, 1024, cbConnect)
    strConnect = String$(cbConnect + 2, vbNullChar)
    If ret = -1 Then Debug.Print "Error for DSN/DRIVER name"
    If ret = SQL_NEED_DATA Then
        Do While SQLBrowseConnect(ByVal hDbc, strDriverStr, SQL_NTS, strConnect, Len(strConnect) + 2, cbConnect) = SQL_NEED_DATA
            Debug.Print strConnect
            'strDriver = Replace(strDriver,...") & vbNullChar
            Exit Do
        Loop
    End If
    ret = SQLDisconnect(hDbc)
    ret = SQLFreeConnect(hDbc)
    SQLFreeEnv hEnv
    
End Function

'Einzelne Eigenschaft einer existierenden DSN setzen (bzw. |fffd|berschreiben)
Sub SetSectionToDSN(sDSN As String, sSection As String, sEntry As String)
    Dim strBuffer As String
    Dim n As Long
    Dim ret As Long

    ret = SQLSetConfigMode(ODBC_USER_DSN)
    If Not CBool(ret) Then
        MsgBox "ODBC-Initialisierung gescheitert!"
    Else
        strBuffer = String$(512, 0)
        n = SQLWritePrivateProfileString(sDSN, sSection, sEntry, "ODBC.INI")
        If n = 0 Then MsgBox "Setzen der Eigenschaft war nicht erfolgreich", vbCritical, "Fehler"
    End If

End Sub

Public Function GetDriverDLL(strDriverName) As String
  Dim s As String
  s = RegKeyRead("HKEY_CURRENT_USER\SOFTWARE\ODBC\ODBC.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If

  s = RegKeyRead("HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBC.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If

  s = RegKeyRead("HKEY_CLASSES_ROOT\SOFTWARE\ODBC\ODBC.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If
  
  s = RegKeyRead("HKEY_CURRENT_USER\SOFTWARE\ODBC\ODBCINST.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If

  s = RegKeyRead("HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If

  s = RegKeyRead("HKEY_CLASSES_ROOT\SOFTWARE\ODBC\ODBCINST.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If
  
  s = RegKeyRead("HKEY_CURRENT_USER\SOFTWARE\WOW6432Node\ODBC\ODBC.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If

  s = RegKeyRead("HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\ODBC\ODBC.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If

  s = RegKeyRead("HKEY_CLASSES_ROOT\SOFTWARE\WOW6432Node\ODBC\ODBC.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If
  
  
  s = RegKeyRead("HKEY_CURRENT_USER\SOFTWARE\WOW6432Node\ODBC\ODBCINST.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If

  s = RegKeyRead("HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\ODBC\ODBCINST.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If

  s = RegKeyRead("HKEY_CLASSES_ROOT\SOFTWARE\WOW6432Node\ODBC\ODBCINST.INI\" & strDriverName & "\DRIVER")
  If s <> "" Then
    GetDriverDLL = s
    Exit Function
  End If
  
End Function

Private Function RegKeyRead(i_RegKey As String) As String
Dim myWS As Object

  On Error Resume Next
  'access Windows scripting
  Set myWS = CreateObject("WScript.Shell")
  'read key from registry
  RegKeyRead = myWS.RegRead(i_RegKey)
End Function
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Option Explicit
 Const HKEY_CLASSES_ROOT = &H80000000


Private Sub CommandButton1_Click()
  Dim driverArray As Variant
  Dim OutText, Key, strComputer, objRegistry, arrKeys
  Dim strKeyPath, strValueName, strValue, uValue

  
  driverArray = ListODBCDrivers()
  
  Dim i As Long
  Dim y As Long
  y = 7
  For i = LBound(driverArray) To UBound(driverArray)
    Dim s As String
    s = GetDriverDLL(driverArray(i))
    If s <> "" Then
      Cells(y, 1) = "Treiber"
      Cells(y, 2) = driverArray(i)
      Cells(y, 3) = s
'     Cells(y, 2) = GetRealDriverName(driverArray(i))(0)
      y = y + 1
    End If
  Next i
  
  strComputer = "."
  
  Set objRegistry = GetObject("winmgmts:\\" & strComputer & "\root\default:StdRegProv")
  
  objRegistry.enumKey HKEY_CLASSES_ROOT, "CLSID", arrKeys
'  Wscript.Echo "Number of Keys to be searched: " & 1 + UBound(arrKeys) & vbCrLf & "Click OK and wait a minute" ' 7645
  
  OutText = ""
  For Each Key In arrKeys
    strKeyPath = "CLSID\" & Key
    strValueName = "OLEDB_SERVICES"
    If objRegistry.GetDWordValue(HKEY_CLASSES_ROOT, strKeyPath, strValueName, uValue) = 0 Then ' that value name exists
      'get the (Default) value which is the name of the provider
      Cells(y, 1) = "Provider"
      objRegistry.GetStringValue HKEY_CLASSES_ROOT, strKeyPath, "", strValue
      Cells(y, 2) = strValue
      objRegistry.GetStringValue HKEY_CLASSES_ROOT, strKeyPath & "\InprocServer32", "", strValue
      Cells(y, 3) = strValue
      objRegistry.GetStringValue HKEY_CLASSES_ROOT, strKeyPath & "\OLE DB Provider", "", strValue
      Cells(y, 4) = strValue
      y = y + 1
    End If
  Next
  
  
  
End Sub

' InQuest injected base64 decoded content
' ~)^J
' 3z'!zw

INQUEST-PP=macro
