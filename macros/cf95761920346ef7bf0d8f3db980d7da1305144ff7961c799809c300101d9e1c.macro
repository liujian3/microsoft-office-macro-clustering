Attribute VB_Name = "AllSheetsInThisWorkbook"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdGetListAllSheets, 1, 0, MSForms, CommandButton"
Public Sub cmdGetListAllSheets_Click()
  
  Dim intNumberWorkSheet As Integer '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim intNumberTechSheet As Integer '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim wsSheet As Worksheet
  Dim wsThisSheet As Worksheet
  Dim wbBook As Workbook
  Dim rng As Range, cl As Range, cl_list As Range
  Dim nColor As Integer

  Set wbBook = ThisWorkbook
  Set wsThisSheet = AllSheetsInThisWorkbook
  wsThisSheet.Activate
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  wsThisSheet.Range("A2:B2").Select
  Set rng = wsThisSheet.Range(Selection, Selection.End(xlDown))
  rng.Select
  Selection.Clear

  intNumberWorkSheet = 2
  intNumberTechSheet = 2
  For Each wsSheet In wbBook.Sheets
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If wsSheet.Tab.ColorIndex <> colorLightBrown Then                 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      wsThisSheet.Range("A" & intNumberWorkSheet).value = wsSheet.name
      intNumberWorkSheet = intNumberWorkSheet + 1
    Else                                                         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      wsThisSheet.Range("B" & intNumberTechSheet).value = wsSheet.name
      intNumberTechSheet = intNumberTechSheet + 1
    End If
  Next wsSheet

  wsThisSheet.Range("A1").Select

End Sub
Attribute VB_Name = "CheckCopy"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "CheckCopy1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "IProgressBar"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Public Sub Tick()

End Sub

Private Sub Initialize()

End Sub

Private Sub QueryClose(Cancel As Integer, CloseMode As Integer)

End Sub

Private Sub KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)

End Sub

Private Sub Click()

End Sub

Private Sub Deactivate()

End Sub

Public Sub Show(intTypeProgress As Integer, Optional strCaption As String = "")

End Sub

Public Sub Hide()

End Sub
Attribute VB_Name = "Information"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Instruction"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public strFIO As String
Public strTelephone As String
Public strEMail As String
Public strWebSite As String
Public strComments As String

Public intKindOfConsultstion As Integer     ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
                                            ' '1' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                            ' '2' - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  If LCase(Target.Range.cells(1, 1).value) = "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" Then
    modUpdTemplMain.Check_Updates ThisWorkbook, True
  End If
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  If Target.cells(1, 1).Interior.ColorIndex <> colorYellow Then Cancel = True
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  
  Dim intICounter As Integer
  
  On Error GoTo CleanUp
  
  Worksheet_Deactivate

  
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If Target.cells.Count > 4 Then Exit Sub
  
  For intICounter = 1 To 9
    If Not Intersect(Target, Me.Range("InstrTitle_" & intICounter)) Is Nothing Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      modServiceModule.UNPROTECT_SHEET Me
      Application.EnableEvents = False
      Application.ScreenUpdating = False
      If Me.Range("InstrTitle_" & intICounter).cells(1, 4).value = "u" Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        Me.Range("InstrBlock_" & intICounter).EntireRow.Hidden = False
        Me.Range("InstrTitle_" & intICounter).cells(1, 4).value = "t"
        If intICounter = 5 Then
          Me.Shapes("InstrImageChange_1").Visible = msoTrue
        ElseIf intICounter = 7 Then
          Me.Shapes("InstrImageChange_2").Visible = msoTrue
        ElseIf intICounter = 9 Then
          If Me.parent.Names("chkGetUpdatesValue").RefersToRange.cells(1, 1).value = "y" Then
            Me.Shapes("chkGetUpdatesTrue").Visible = msoTrue
          Else
            Me.Shapes("chkGetUpdatesFalse").Visible = msoTrue
          End If
          If Me.parent.Names("chkNoUpdatesValue").RefersToRange.cells(1, 1).value = "y" Then
            Me.Shapes("chkNoUpdatesTrue").Visible = msoTrue
          Else
            Me.Shapes("chkNoUpdatesFalse").Visible = msoTrue
          End If
          Me.Shapes("cmdGetUpdate").Visible = msoTrue
          Me.Shapes("cmdShowHideUpdateLog").Visible = msoTrue
        End If
      Else
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        Me.Range("InstrBlock_" & intICounter).EntireRow.Hidden = True
        Me.Range("InstrTitle_" & intICounter).cells(1, 4).value = "u"
        If intICounter = 5 Then
          Me.Shapes("InstrImageChange_1").Visible = msoFalse
        ElseIf intICounter = 7 Then
          Me.Shapes("InstrImageChange_2").Visible = msoFalse
        ElseIf intICounter = 9 Then
          Me.Shapes("chkGetUpdatesFalse").Visible = msoFalse
          Me.Shapes("chkGetUpdatesTrue").Visible = msoFalse
          Me.Shapes("chkNoUpdatesFalse").Visible = msoFalse
          Me.Shapes("chkNoUpdatesTrue").Visible = msoFalse
          Me.Shapes("cmdGetUpdate").Visible = msoFalse
          Me.Shapes("cmdShowHideUpdateLog").Visible = msoFalse
        End If
      End If
      Me.Range("InstrTitle_" & intICounter).cells(1, 0).Select
      GoTo CleanUp
    End If
  Next intICounter
  
  Exit Sub
CleanUp:
  modServiceModule.PROTECT_SHEET Me, True
  Application.EnableEvents = True
  Application.ScreenUpdating = True
End Sub

Public Sub ImageClick()
  Dim intNum As Integer
  On Error GoTo end_ImageClick
  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  intNum = Split(Application.Caller, "_")(1)
  Worksheet_SelectionChange Me.Range("InstrTitle_" & intNum)
end_ImageClick:
End Sub

Public Sub ImageForChangeClick()
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  
  On Error GoTo end_ImageForChangeClick
  
  Set wbBook = Application.ThisWorkbook
  Set wsSheet = wbBook.Sheets(gstrInstructionSheetName)
  
  If modScrolling.blnIs_UserForm_Loaded("frmConsultation") = True Then
    Worksheet_Deactivate
    GoTo end_ImageForChangeClick
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  intKindOfConsultstion = Mid(Application.Caller, Len("InstrImageChange_") + 1, 1)
  wsSheet.Shapes(Application.Caller).TopLeftCell.Offset(1, 1).Select
  
  frmConsultation.Show
  
end_ImageForChangeClick:

End Sub

Public Sub Worksheet_Deactivate()
  
  Dim wbBook As Workbook
  
  Set wbBook = Me.parent
  
  If modScrolling.blnIs_UserForm_Loaded("frmConsultation") = True Then
    If LCase(frmConsultation.txtFIO) <> LCase(wbBook.Names("Consultation_" & intKindOfConsultstion).RefersToRange.cells(1, 1).value) Or _
       LCase(frmConsultation.txtTel) <> LCase(wbBook.Names("Consultation_" & intKindOfConsultstion).RefersToRange.cells(2, 1).value) Or _
       LCase(frmConsultation.txtMail) <> LCase(wbBook.Names("Consultation_" & intKindOfConsultstion).RefersToRange.cells(3, 1).value) Or _
       LCase(frmConsultation.txtSite) <> LCase(wbBook.Names("Consultation_" & intKindOfConsultstion).RefersToRange.cells(4, 1).value) Or _
       LCase(frmConsultation.txtComm) <> LCase(wbBook.Names("Consultation_" & intKindOfConsultstion).RefersToRange.cells(5, 1).value) Then
        If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!") = vbYes Then
           frmConsultation.lblOkMRMO_Click
        Else
           Unload frmConsultation
        End If
    Else
      Unload frmConsultation
    End If
  End If
  
End Sub

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub chkUpdates_Click()
  chkUpdates_Click_Handler Application.Caller
End Sub
  
Public Sub chkUpdates_Click_Handler(ByVal strCaller As String)
  
  On Error GoTo CleanUp
      
  Application.EnableEvents = False
  Application.ScreenUpdating = False
  modServiceModule.UNPROTECT_SHEET Me
  
  Select Case strCaller
  Case "chkGetUpdatesFalse"
    If Me.Shapes("chkGetUpdatesFalse").Visible = msoTrue Then
      Me.Shapes("chkGetUpdatesFalse").Visible = msoFalse
      Me.Shapes("chkGetUpdatesTrue").Visible = msoTrue
      Me.Shapes("chkNoUpdatesFalse").Visible = msoTrue
      Me.Shapes("chkNoUpdatesTrue").Visible = msoFalse
    End If
    Me.Range("chkGetUpdatesValue").value = "y"
    Me.Range("chkNoUpdatesValue").value = vbNullString
  Case "chkNoUpdatesFalse"
    If Me.Shapes("chkNoUpdatesFalse").Visible = msoTrue Then
      Me.Shapes("chkGetUpdatesFalse").Visible = msoTrue
      Me.Shapes("chkGetUpdatesTrue").Visible = msoFalse
      Me.Shapes("chkNoUpdatesFalse").Visible = msoFalse
      Me.Shapes("chkNoUpdatesTrue").Visible = msoTrue
    End If
    Me.Range("chkGetUpdatesValue").value = vbNullString
    Me.Range("chkNoUpdatesValue").value = "y"
  End Select
  
  GoTo CleanUp
  
CleanUp:
  modServiceModule.PROTECT_SHEET Me, True
  Application.EnableEvents = True
  Application.ScreenUpdating = True
  
End Sub

Private Sub cmdDownloadDataFromFile_Click()

  On Error GoTo ErrHandler

  If modUpd_Templ_Defines.gblnFeatureDataDownloadAvailable = False Then
    MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  Else
    OpenFileDialog
  End If

  GoTo Success

Success:
  GoTo CleanUp
ErrHandler:
  MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
         vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  GoTo CleanUp
CleanUp:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Function OpenFileDialog() As String

  Dim lngCount As Long
  Dim fd As FileDialog
  Dim vrtSelectedItem As Variant
  Dim strExtensionsList As String

  OpenFileDialog = vbNullString

  Set fd = Application.FileDialog(msoFileDialogOpen)

  If val(Application.Version) < 12 Then
    ' You use Excel 97-2003
    strExtensionsList = modUpd_Templ_Defines.MS_EXCEL_2003_EXTENSIONS_LIST
  Else
    ' You use Excel 2007-2010
    strExtensionsList = modUpd_Templ_Defines.MS_EXCEL_2007_EXTENSIONS_LIST
  End If

  fd.AllowMultiSelect = False
  fd.Filters.Clear
  fd.Filters.Add "|fffd||fffd||fffd||fffd||fffd| MS Excel", strExtensionsList, 1
  fd.ButtonName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  fd.InitialView = msoFileDialogViewDetails
  fd.Title = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."

  fd.FilterIndex = 1

  If fd.Show = -1 Then

    For Each vrtSelectedItem In fd.SelectedItems

      'vrtSelectedItem is a string that contains the path of each selected item.
      'You can use any file I/O functions that you want to work with this path.
      OpenFileDialog = CStr(vrtSelectedItem)

      If Mid(OpenFileDialog, Len(OpenFileDialog) - 3, 4) <> ".xls" Then
        OpenFileDialog = vbNullString
      End If

      If Application.Version > "11.0" Then ' |fffd||fffd||fffd| MS Office 2007 |fffd| |fffd||fffd||fffd||fffd|
        If Mid(OpenFileDialog, Len(OpenFileDialog) - 4, 5) <> ".xlsm" And _
           Mid(OpenFileDialog, Len(OpenFileDialog) - 4, 5) <> ".xlsx" Then
          OpenFileDialog = vbNullString
        End If
      End If

    Next vrtSelectedItem

  End If

  Set fd = Nothing

End Function

Public Sub cmdGetUpdate_Click()
  frmUpdate.Show vbModal
End Sub

Public Sub cmdShowHideUpdateLog_Click()
  Dim wsSheet As Worksheet
  If modServiceModule.SheetExists(modUpd_Templ_Defines.STR_LOGGING_SHEET_NAME, ThisWorkbook) = True Then
    Set wsSheet = ThisWorkbook.Worksheets(modUpd_Templ_Defines.STR_LOGGING_SHEET_NAME)
    If wsSheet.Visible = xlSheetVisible Then
      wsSheet.Visible = xlSheetVeryHidden
    Else
      wsSheet.Visible = xlSheetVisible
    End If
  End If
End Sub

Attribute VB_Name = "NamedRangeAppender"
Option Explicit

' |fffd||fffd||fffd||fffd||fffd||fffd|:     1.1 (22.02.2006)
' |fffd||fffd||fffd||fffd||fffd|:      |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <|fffd||fffd||fffd||fffd||fffd||fffd||fffd|>?<|fffd||fffd||fffd|>

Public Function GetNamePrefix(name As String) As String
    Dim i As Integer
    i = VBA.InStr(name, "?")

    If i = 0 Then
        GetNamePrefix = ""
    Else
        GetNamePrefix = VBA.Mid(name, 1, i - 1)
    End If
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Function GetLocalName(name As String) As String
    Dim i As Integer
    i = VBA.InStr(name, "?")

    If i = 0 Then
        GetLocalName = "???"
    Else
        GetLocalName = VBA.Mid(name, i + 1)
    End If
End Function



' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

Public Function AppendNameToRange(r As Range, n As name) As Range
    On Error GoTo ErrHandler

    If r Is Nothing Then
        Set AppendNameToRange = Range(n.name)
    Else
        Set AppendNameToRange = Application.Union(r, Range(n.name))
    End If

    Exit Function
ErrHandler:
    Set AppendNameToRange = r
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Function GetNameWorksheetName(n As name) As String
    On Error GoTo ErrHandler

    GetNameWorksheetName = Range(n.name).Worksheet.name

    Exit Function
ErrHandler:
    GetNameWorksheetName = ""
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Function rangesEqual(R1 As Excel.Range, R2 As Excel.Range) As Boolean
    Dim r As Excel.Range

    If R1 Is Nothing Or R2 Is Nothing Then
        rangesEqual = False
    Else
        Set r = Intersect(R1, R2)
        If r Is Nothing Then
            rangesEqual = False
        ElseIf Union(R1, R2).Address = r.Address Then
            rangesEqual = True
        Else
            rangesEqual = False
        End If
    End If
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Function SelectionRangeName() As String
    Dim nam As Excel.name
    Dim r As Excel.Range

    For Each nam In Names
        Set r = nvlRefersToRange(nam)

        If Not r Is Nothing Then
            If r.Worksheet.name = Selection.Worksheet.name Then
                If rangesEqual(Selection, r) Then
                    SelectionRangeName = nam.name
                    Exit Function
                End If
            End If
        End If
    Next nam
    
    SelectionRangeName = ""
End Function
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Nothing, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Function nvlRefersToRange(n As Excel.name) As Excel.Range
    On Error GoTo ErrHandler

    Set nvlRefersToRange = Range(n.name)

    Exit Function
ErrHandler:
    Set nvlRefersToRange = Nothing
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|

Public Function nameExists(name As String, ws As Worksheet) As Boolean
    Dim n As Excel.name

    On Error GoTo ErrHandler

    Set n = ws.parent.Names(name)
    nameExists = True
    Exit Function
ErrHandler:
    nameExists = False
End Function


Public Function nameExists2(name As String) As Boolean
    Dim r As Range

    On Error GoTo ErrHandler

    Set r = Range(name)
    nameExists2 = True
    Exit Function
ErrHandler:
    nameExists2 = False
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| RefersTo), |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

Public Sub addRangeToName(r As Excel.Range, n As Excel.name)
    Dim R1 As Excel.Range
    Dim R2 As Excel.Range
    Dim n1 As Excel.name
    Dim WB As Excel.Workbook



    '-------------------------------
    'Set r1 = n.RefersToRange  ' - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set R1 = Range(n.name)     ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '-------------------------------
    
    Set WB = R1.Worksheet.parent

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| -
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    On Error GoTo errhandler
'    address$ = n.RefersTo
'    address2$ = "'" & r.Worksheet.name & "'!" & r.AddressLocal
'    If address$ = "=" Then
'        n.RefersTo = address$ & address2$
'        Exit Sub
'    ElseIf Len(address$) + 1 + Len(address2$) <= 255 Then
'        n.RefersTo = address$ & "," & address2$
'        Exit Sub
'    End If
'
'errhandler:
'    Err.Clear

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd|,
    ' union |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Dim pattern$
    If Not R1 Is Nothing Then
        Set R2 = Union(r, R1)
        pattern$ = "*_" & Replace(n.name, "?", "[?]")
        For Each n1 In WB.Names
            If n1.name Like pattern$ Then
                n1.Delete
            End If
        Next n1
    Else
        Set R2 = r
    End If

    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim an#
    an# = R2.Areas.Count
    Dim ar() As String
    ReDim ar(2 * an#)
    Dim i#, j#, t#
    i# = LBound(ar)
    For Each R1 In R2.Areas
        ar(i#) = "'" & R1.Worksheet.name & "'!" & R1.AddressLocal
        i# = i# + 1
    Next R1

    j# = LBound(ar) + 1
    t# = 1
    Dim Address$
    Address$ = "=" & ar(LBound(ar))

    While j# < i#
        If Len(Address$) + 1 + Len(ar(j#)) > 150 Then
            WB.Names.Add name:="P" & t# & "_" & n.name, RefersTo:=Address$, Visible:=False
            ar(i#) = "P" & t# & "_" & n.name
            i# = i# + 1
            t# = t# + 1
            Address$ = "=" & ar(j#)
        Else
            Address$ = Address$ & "," & ar(j#)
        End If
        j# = j# + 1
    Wend
    
    n.RefersTo = Address$
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Sub AppendNames(copy_range As Range, dest_range As Range, prefix As String)
    Dim nam As Excel.name

    For Each nam In ThisWorkbook.Names
        If GetNamePrefix(nam.name) = prefix Then
            CopyHasAreas copy_range, dest_range, nam
        End If
    Next nam
End Sub

Function CopyHasAreas(copy_range As Range, dest_range As Range, nam As name) As Boolean
    Dim a As Range

    Dim OffsetX#, OffsetY#
    OffsetX# = dest_range.Column - copy_range.Column
    OffsetY# = dest_range.Row - copy_range.Row

    For Each a In Range(nam.name).Areas
        If a.Worksheet.name = copy_range.Worksheet.name Then
            If rangesEqual(a, Intersect(a, copy_range)) Then
                addRangeToName a.Offset(OffsetY#, OffsetX#), nam
            End If
        End If
    Next a
End Function


Sub ClearNames(prefix As String)
    Dim nam As Excel.name

'    On Error GoTo errhandler

    For Each nam In Names
        If InStr(nam.name, prefix) Then
            nam.Delete
        End If
    Next nam

    Exit Sub
'errhandler:
'    MsgBox Err.Description, vbOKOnly + vbExclamation, Err.Source
End Sub


Public Function ISect(R1 As Range, R2 As Range) As Range
    Set ISect = Intersect(R1, R2)
End Function

Attribute VB_Name = "ProgressDialogue"
Attribute VB_Base = "0{829AA970-F9BD-4A04-A52A-FE72144C03AE}{C18CE5D6-B4C9-43E3-9439-A8BCC9B0EC31}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit

Implements IProgressBar

Dim intValue As Integer
Dim intStart As Integer
Dim strParentFormCaption As String
Dim sngTick As Single
Dim intType As Integer

#If VBA7 And Win64 Then
  Private Declare PtrSafe Function GetTickCount Lib "Kernel32" () As Long
#Else
  Private Declare Function GetTickCount Lib "Kernel32" () As Long
#End If

Private Const AW_OPTIMAL_TIME = 200&  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_HOR_POSITIVE = &H1  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_HOR_NEGATIVE = &H2  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_VER_POSITIVE = &H4  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Const AW_VER_NEGATIVE = &H8  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Const AW_CENTER = &H10       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_HIDE = &H10000      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|; |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_ACTIVATE = &H20000  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Const AW_SLIDE = &H40000     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_BLEND = &H80000     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const GWL_STYLE As Long = (-16)
Private Const GWL_EXSTYLE = (-20)
Private Const WS_CAPTION As Long = &HC00000
Private Const WS_BORDER As Long = &H800000
Private Const WS_EX_LAYERED = &H80000
Private Const SWP_NOACTIVATE = &H10
Private Const SWP_NOSIZE = &H1
Private Const SWP_NOMOVE = &H2
Private Const SWP_SHOWWINDOW = &H40
Private Const SWP_FRAMECHANGED = &H20
Private Const SWP_NOOWNERZORDER = &H200
Private Const SWP_NOZORDER = &H4
Private Const LWA_COLORKEY = &H1
Private Const LWA_ALPHA = &H2
Private Const WM_NCLBUTTONDOWN = &HA1
Private Const HTCAPTION = 2
Private Type POINTAPI
  x As Long
  y As Long
End Type

Private Type RECT
  Left As Long
  Top As Long
  Right As Long
  Bottom As Long
End Type

#If VBA7 Then

  #If Win64 Then
    Private Declare PtrSafe Function SetWindowLongPtr Lib "user32" Alias "SetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    Private Declare PtrSafe Function GetWindowLongPtr Lib "user32" Alias "GetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long) As LongPtr
  #Else
    Private Declare PtrSafe Function SetWindowLongPtr Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    Private Declare PtrSafe Function GetWindowLongPtr Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As LongPtr, ByVal nIndex As Long) As LongPtr
  #End If

  Private Declare PtrSafe Function SetWindowPos Lib "user32" (ByVal hwnd As LongPtr, ByVal hWndInsertAfter As LongPtr, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long
  Private Declare PtrSafe Function GetWindowRect Lib "user32" (ByVal hwnd As LongPtr, lpRect As RECT) As LongPtr

  Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
  Private Declare PtrSafe Function AnimateWindow Lib "user32" (ByVal hwnd As LongPtr, ByVal dwTime As Long, ByVal dwFlags As Long) As Boolean
  Private Declare PtrSafe Function GetCursorPos Lib "user32" (lpPoint As POINTAPI) As Long
  Private Declare PtrSafe Function SetLayeredWindowAttributes Lib "user32" (ByVal hwnd As Long, ByVal crKey As Long, ByVal bAlpha As Byte, ByVal dwFlags As Long) As Long
  Private Declare PtrSafe Sub ReleaseCapture Lib "user32" ()
  Private Declare PtrSafe Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, lParam As Any) As LongPtr

#Else

  Private Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
  Private Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
  Private Declare Function SetWindowPos Lib "user32" (ByVal hwnd As Long, ByVal hWndInsertAfter As Long, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long
  Private Declare Function GetWindowRect Lib "user32" (ByVal hwnd As Long, lpRect As RECT) As Long

  Private Declare Function FindWindow Lib "user32.dll" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
  Private Declare Function AnimateWindow Lib "user32" (ByVal hwnd As Long, ByVal dwTime As Long, ByVal dwFlags As Long) As Boolean
  Private Declare Function GetCursorPos& Lib "user32.dll" (lpPoint As POINTAPI)
  Private Declare Function SetLayeredWindowAttributes Lib "user32" (ByVal hwnd As Long, ByVal crKey As Long, ByVal bAlpha As Byte, ByVal dwFlags As Long) As Long
  Private Declare Sub ReleaseCapture Lib "user32" ()
  Private Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
#End If

'***********************************
#If VBA7 And Win64 Then
  Private ihWnd As LongPtr
#Else
  Private ihWnd As Long
#End If
'***********************************

#If VBA7 Then

  #If Win64 Then

Private Sub MoveFormOnScreen(Optional ByVal ToCursor As Boolean = False)
  Dim i As LongPtr
  Dim j As LongPtr
  Dim paCoordinates As POINTAPI
  i = GetWindowLongPtr(ihWnd, GWL_STYLE)
  i = i And Not WS_CAPTION And Not WS_BORDER
  j = SetWindowLongPtr(ihWnd, GWL_STYLE, i)
  j = SetWindowLongPtr(ihWnd, GWL_EXSTYLE, 0)
  If ToCursor Then
    GetCursorPos paCoordinates
    SetWindowPos ihWnd, 0, paCoordinates.x, paCoordinates.y, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  Else
    Dim r As RECT
    Dim k As Integer
    GetWindowRect FindWindow(vbNullString, strParentFormCaption), r
    i = r.Right - r.Left
    j = r.Bottom - r.Top
    SetWindowPos ihWnd, 0, r.Left, r.Top, CLng(i), CLng(j), SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
    If intType = 1 Then
      ProgressLine.Top = Int(Me.Height / 2) - 9
      ProgressLine.Left = Int(Me.Width / 2) - 201
      ProgressLine.Visible = True
      Label1.Top = ProgressLine.Top
      Label1.Left = ProgressLine.Left
      Label1.Visible = True
      Label2.Top = ProgressLine.Top
      Label2.Left = ProgressLine.Left + 294
      Label2.Visible = True
      Label3.Top = ProgressLine.Top
      Label3.Left = ProgressLine.Left + 108
      Label3.Visible = True
      lblWait.Top = ProgressLine.Top - 18
      lblWait.Left = ProgressLine.Left + 108
      intStart = ProgressLine.Left
    Else
      For k = 1 To 12
        Me.Controls("Image" & k).Left = Int(Me.Width / 2) - 16
        Me.Controls("Image" & k).Top = Int(Me.Height / 2) - 16
        Me.Controls("Image" & k).Visible = True
      Next k
      lblWait.Top = Image1.Top - 18
      lblWait.Left = Image1.Left - 71
    End If

  End If
End Sub

Private Sub SetTransparent(Optional ByVal Layered As Byte = 255)
  Dim Ret As LongPtr
  Ret = GetWindowLongPtr(ihWnd, GWL_EXSTYLE)
  Ret = Ret Or WS_EX_LAYERED
  SetWindowLongPtr ihWnd, GWL_EXSTYLE, Ret
  SetLayeredWindowAttributes CLng(ihWnd), 0, Layered, LWA_ALPHA
End Sub

#Else

Private Sub MoveFormOnScreen(Optional ByVal ToCursor As Boolean = False)
  Dim i As Long
  Dim j As Long
  Dim paCoordinates As POINTAPI
  i = GetWindowLongPtr(ihWnd, GWL_STYLE)
  i = i And Not WS_CAPTION And Not WS_BORDER
  j = SetWindowLongPtr(ihWnd, GWL_STYLE, i)
  j = SetWindowLongPtr(ihWnd, GWL_EXSTYLE, 0)
  If ToCursor Then
    GetCursorPos paCoordinates
    SetWindowPos ihWnd, 0, paCoordinates.x, paCoordinates.y, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  Else
    Dim r As RECT
    Dim k As Integer
    GetWindowRect FindWindow(vbNullString, strParentFormCaption), r
    i = r.Right - r.Left
    j = r.Bottom - r.Top
    SetWindowPos ihWnd, 0, r.Left, r.Top, i, j, SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
    If intType = 1 Then
      ProgressLine.Top = Int(Me.Height / 2) - 9
      ProgressLine.Left = Int(Me.Width / 2) - 201
      ProgressLine.Visible = True
      Label1.Top = ProgressLine.Top
      Label1.Left = ProgressLine.Left
      Label1.Visible = True
      Label2.Top = ProgressLine.Top
      Label2.Left = ProgressLine.Left + 294
      Label2.Visible = True
      Label3.Top = ProgressLine.Top
      Label3.Left = ProgressLine.Left + 108
      Label3.Visible = True
      lblWait.Top = ProgressLine.Top - 18
      lblWait.Left = ProgressLine.Left + 108
      intStart = ProgressLine.Left
    Else
      For k = 1 To 12
        Me.Controls("Image" & k).Left = Int(Me.Width / 2) - 16
        Me.Controls("Image" & k).Top = Int(Me.Height / 2) - 16
        Me.Controls("Image" & k).Visible = True
      Next k
      lblWait.Top = Image1.Top - 18
      lblWait.Left = Image1.Left - 71
    End If
  End If
End Sub

Private Sub SetTransparent(Optional ByVal Layered As Byte = 255)
  Dim Ret As Long
  Ret = GetWindowLongPtr(ihWnd, GWL_EXSTYLE)
  Ret = Ret Or WS_EX_LAYERED
  SetWindowLongPtr ihWnd, GWL_EXSTYLE, Ret
  SetLayeredWindowAttributes ihWnd, 0, Layered, LWA_ALPHA
End Sub

#End If

#Else

Private Sub MoveFormOnScreen(Optional ByVal ToCursor As Boolean = False)
  Dim i As Long, j As Long, paCoordinates As POINTAPI
  i = GetWindowLong(ihWnd, GWL_STYLE)
  i = i And WS_BORDER
  j = SetWindowLong(ihWnd, GWL_STYLE, i)
  j = SetWindowLong(ihWnd, GWL_EXSTYLE, 0)
  If ToCursor Then
    GetCursorPos paCoordinates
    SetWindowPos ihWnd, 0, paCoordinates.x, paCoordinates.y, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  Else
    Dim r As RECT
    Dim k As Integer

    GetWindowRect FindWindow(vbNullString, strParentFormCaption), r
    i = r.Right - r.Left
    j = r.Bottom - r.Top
    SetWindowPos ihWnd, 0, r.Left, r.Top, i, j, SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
    If intType = 1 Then
      ProgressLine.Top = Int(Me.Height / 2) - 9
      ProgressLine.Left = Int(Me.Width / 2) - 201
      ProgressLine.Visible = True
      Label1.Top = ProgressLine.Top
      Label1.Left = ProgressLine.Left
      Label1.Visible = True
      Label2.Top = ProgressLine.Top
      Label2.Left = ProgressLine.Left + 294
      Label2.Visible = True
      Label3.Top = ProgressLine.Top
      Label3.Left = ProgressLine.Left + 108
      Label3.Visible = True
      lblWait.Top = ProgressLine.Top - 18
      lblWait.Left = ProgressLine.Left + 108
      intStart = ProgressLine.Left
    Else
      For k = 1 To 12
        Me.Controls("Image" & k).Left = Int(Me.Width / 2) - 16
        Me.Controls("Image" & k).Top = Int(Me.Height / 2) - 16
        Me.Controls("Image" & k).Visible = True
      Next k
      lblWait.Top = Image1.Top - 18
      lblWait.Left = Image1.Left - 71
    End If
  End If
End Sub

Private Sub SetTransparent(Optional ByVal Layered As Byte = 255)
  Dim Ret As Long
  Ret = GetWindowLong(ihWnd, GWL_EXSTYLE)
  Ret = Ret Or WS_EX_LAYERED
  SetWindowLong ihWnd, GWL_EXSTYLE, Ret
  SetLayeredWindowAttributes ihWnd, 0, Layered, LWA_ALPHA
End Sub

#End If

Public Sub MoveIt()
  Call ReleaseCapture
  SendMessage ihWnd, WM_NCLBUTTONDOWN, HTCAPTION, 0&
End Sub

'***********************************

Private Sub IProgressBar_Initialize()

  If modAnimatedFormsGlobals.blnUpdateProgressFormIsInitialized = True Then
    Exit Sub  ' Already initialized
  End If

  ihWnd = FindWindow(vbNullString, Me.caption)


  MoveFormOnScreen False

  SetTransparent 190
  AnimateWindow CLng(ihWnd), AW_OPTIMAL_TIME, AW_VER_POSITIVE
  modAnimatedFormsGlobals.blnUpdateProgressFormIsInitialized = True  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

  sngTick = Timer
  intValue = 1

  Me.Repaint

End Sub

Private Sub IProgressBar_QueryClose(Cancel As Integer, CloseMode As Integer)

  AnimateWindow CLng(ihWnd), AW_OPTIMAL_TIME, AW_HIDE Or AW_VER_POSITIVE
  modAnimatedFormsGlobals.blnUpdateProgressFormIsInitialized = False

End Sub

Private Sub IProgressBar_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
  If KeyCode = 27 Then
    Unload Me
  End If
End Sub

Private Sub IProgressBar_Click()
  IProgressBar_QueryClose True, vbFormControlMenu
End Sub

Private Sub IProgressBar_Deactivate()
  IProgressBar_QueryClose True, vbFormControlMenu
End Sub

Public Sub IProgressBar_Show(intTypeProgress As Integer, Optional strCaption As String = "")
  If strCaption = "" Then strParentFormCaption = Application.caption Else strParentFormCaption = strCaption
  intType = intTypeProgress
  IProgressBar_Initialize
End Sub

Public Sub IProgressBar_Hide()
  IProgressBar_Deactivate
End Sub

Public Sub IProgressBar_Tick()
  If intType = 1 Then
    If Timer - sngTick > 0.01 Then
      ProgressLine.Left = ProgressLine.Left + 1
      If ProgressLine.Left - intStart >= 106 Then ProgressLine.Left = intStart
      sngTick = Timer
    End If
  Else
    If Timer - sngTick > 0.05 Then
      Me.Controls("Image" & intValue).ZOrder 0
      intValue = intValue + 1
      If intValue = 13 Then intValue = 1
      sngTick = Timer
    End If
  End If
  DoEvents
End Sub

Attribute VB_Name = "TEHSH_et_union"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TEHSH_reestr_filter"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TEHSH_reestr_mo"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TEHSH_reestr_org"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TEHSH_tehsheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
''Private Sub ddd()
''  intcounter = 1
''  For Each nmRange In ThisWorkbook.Names
''    ActiveSheet.Range("A" & intcounter).value = nmRange.name
''    intcounter = 1 + intcounter
''  Next
''End Sub
''
''Private Sub fff()
''  For Each rngCell In Selection
''    If Len(Trim(rngCell.value)) = 0 Then rngCell.EntireRow.Delete
''  Next
''End Sub
Attribute VB_Name = "Wrapper"
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

Function GetFilterRange(r As Range, v As Variant) As Range
    Dim cell As Range

    If r.Columns.Count > 1 Then   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each cell In r
            If cell.value = v Then
                If GetFilterRange Is Nothing Then
                    Set GetFilterRange = cell.Worksheet.Columns(cell.Column)
                Else
                    Set GetFilterRange = Union(GetFilterRange, cell.Worksheet.Columns(cell.Column))
                End If
            End If
        Next cell
    Else                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each cell In r
            If cell.value = v Then
                If GetFilterRange Is Nothing Then
                    Set GetFilterRange = cell.Worksheet.Rows(cell.Row)
                Else
                    Set GetFilterRange = Union(GetFilterRange, cell.Worksheet.Rows(cell.Row))
                End If
            End If
        Next cell
    End If
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| r1, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| r2 = v2

Public Function GetValueFilter1(R1 As Range, R2 As Range, v2 As Variant, Optional R3 As Range) As Range
    On Error GoTo ErrHandler

    If IsMissing(R3) Then
        Set GetValueFilter1 = Intersect(R1, GetFilterRange(R2, v2))
    ElseIf R3 Is Nothing Then
        Set GetValueFilter1 = Intersect(R1, GetFilterRange(R2, v2))
    Else
        Set GetValueFilter1 = Intersect(R1, GetFilterRange(R2, v2), R3)
    End If

    Exit Function
ErrHandler:
    Set GetValueFilter1 = Nothing
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| r1, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| r2 = v2 and r3 = v3

Public Function GetValueFilter2(R1 As Range, R2 As Range, v2 As Variant, R3 As Range, v3 As Variant, Optional R4 As Range) As Range
    On Error GoTo ErrHandler

    If IsMissing(R4) Then
        Set GetValueFilter2 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3))
    ElseIf R4 Is Nothing Then
        Set GetValueFilter2 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3))
    Else
        Set GetValueFilter2 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3), R4)
    End If

    Exit Function
ErrHandler:
    Set GetValueFilter2 = Nothing
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| r1, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| r2 = v2 and r3 = v3 and r4 = v4

Public Function GetValueFilter3(R1 As Range, R2 As Range, v2 As Variant, R3 As Range, v3 As Variant, R4 As Range, v4 As Variant, Optional R5 As Range) As Range
    On Error GoTo ErrHandler

    If IsMissing(R5) Then
        Set GetValueFilter3 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3), GetFilterRange(R4, v4))
    ElseIf R5 Is Nothing Then
        Set GetValueFilter3 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3), GetFilterRange(R4, v4))
    Else
        Set GetValueFilter3 = Intersect(R1, GetFilterRange(R2, v2), GetFilterRange(R3, v3), GetFilterRange(R4, v4), R5)
    End If

    Exit Function
ErrHandler:
    Set GetValueFilter3 = Nothing
End Function


Public Function SumValueFilter1(R1 As Range, R2 As Range, v2 As Variant, Optional R3 As Range) As Variant
    Dim cell As Range
    Dim cells As Range

    On Error GoTo ErrHandler

    SumValueFilter1 = CDbl(0)
    Set cells = GetValueFilter1(R1, R2, v2, R3)
    If cells Is Nothing Then
        Exit Function
    Else
        For Each cell In cells
            SumValueFilter1 = SumValueFilter1 + CDbl(cell.value)
        Next cell
    End If

    Exit Function
ErrHandler:
    SumValueFilter1 = CVErr(xlErrNum)
End Function


Public Function SumValueFilter2(R1 As Range, R2 As Range, v2 As Variant, R3 As Range, v3 As Variant, Optional R4 As Range) As Variant
    Dim cell As Range
    Dim cells As Range

    On Error GoTo ErrHandler

    SumValueFilter2 = CDbl(0)
    Set cells = GetValueFilter2(R1, R2, v2, R3, v3, R4)
    If cells Is Nothing Then
        Exit Function
    Else
        For Each cell In cells
            SumValueFilter2 = SumValueFilter2 + CDbl(cell.value)
        Next cell
    End If

    Exit Function
ErrHandler:
    SumValueFilter2 = CVErr(xlErrNum)
End Function


Public Function SumValueFilter3(R1 As Range, R2 As Range, v2 As Variant, R3 As Range, v3 As Variant, R4 As Range, v4 As Variant, Optional R5 As Range) As Variant
    Dim cell As Range
    Dim cells As Range

    On Error GoTo ErrHandler

    SumValueFilter3 = CDbl(0)
    Set cells = GetValueFilter3(R1, R2, v2, R3, v3, R4, v4, R5)
    If cells Is Nothing Then
        Exit Function
    Else
        For Each cell In cells
            SumValueFilter3 = SumValueFilter3 + CDbl(cell.value)
        Next cell
    End If

    Exit Function
ErrHandler:
    SumValueFilter3 = CVErr(xlErrNum)
End Function


Public Function ExcelIntersect(R1 As Range, R2 As Range) As Range
    On Error GoTo ErrHandler
    Set ExcelIntersect = Intersect(R1, R2)
    Exit Function
ErrHandler:
    Set ExcelIntersect = Nothing
End Function



Public Function ParseBook2() As Boolean
    Dim ctl As Variant
    Dim btn As CommandBarButton

    On Error GoTo ErrHandler

    Set ctl = LookupMenu(CommandBars("Worksheet Menu Bar"), "|fffd||fffd||fffd| |fffd||fffd||fffd|")
    Set ctl = LookupMenu(ctl, "XML")
    Set btn = LookupMenu(ctl, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    If Not TryExecute(btn) Then
        ParseBook2 = TryRun(btn)
    Else
        ParseBook2 = True
    End If

    Exit Function
ErrHandler:
    ParseBook2 = False
End Function
Private Function TryExecute(btn As CommandBarButton) As Boolean
    On Error GoTo ErrHandler
    btn.Execute
    TryExecute = True
    Exit Function
ErrHandler:
    TryExecute = False
End Function
Private Function TryRun(btn As CommandBarButton) As Boolean
    On Error GoTo ErrHandler
    Application.Run btn.OnAction
    TryRun = True
    Exit Function
ErrHandler:
    TryRun = False
End Function


Public Function LookupMenu(ByRef parent As Variant, caption As String) As Variant
    Dim ctl As CommandBarControl

    For Each ctl In parent.Controls
        If ctl.caption = caption Then
            Set LookupMenu = ctl
            Exit Function
        End If
    Next ctl
    
    LookupMenu = Null
End Function


Public Function nErr(val As Variant, Optional val2 As Variant) As Variant
    If IsError(val) Then
        If IsMissing(val2) Then
            nErr = Empty
        Else
            nErr = val2
        End If
    Else
        nErr = val
    End If
End Function

Public Function SetVersion(strVersion As String) As Boolean
  
  On Error GoTo ErrHandler
  
  SetVersion = False
  
  If Len(strVersion) = 0 Then
    Exit Function
  End If
  
  ThisWorkbook.CustomDocumentProperties("CurrentVersion").value = strVersion
  
  Exit Function
  
ErrHandler:

  If Err.Number = 5 Then
    Err.Clear
        
    On Error GoTo ErrHandler2
    
    If VarType(strVersion) = vbString Then
      ThisWorkbook.CustomDocumentProperties.Add name:="CurrentVersion", _
                                                  LinkToContent:=False, _
                                                  Type:=msoPropertyTypeString, _
                                                  value:=strVersion
      SetVersion = True
    End If
  End If

ErrHandler2:
    
End Function

Public Function GetVersion() As Variant
  
  On Error GoTo NewProperty
  
  Dim strVersion As String
  
  strVersion = ThisWorkbook.CustomDocumentProperties("CurrentVersion")
  
  GoTo ExitFunction
 
NewProperty:
  strVersion = "1.0"
  If SetVersion(strVersion) = False Then
    strVersion = ""
  End If
ExitFunction:
  GetVersion = strVersion
  Exit Function

End Function

Public Function ProcedureExists(name As String, module As Variant) As Boolean
    On Error Resume Next
    ProcedureExists = module.ProcStartLine(name, vbext_pk_Proc) <> 0
End Function

Public Function SetCode(strCode As String) As Boolean
  
  On Error GoTo ErrHandler
  
  SetCode = False
  
  If Len(strCode) = 0 Then
    Exit Function
  End If
  
  ThisWorkbook.CustomDocumentProperties("Version").value = strCode
  
  Exit Function
  
ErrHandler:

  If Err.Number = 5 Then
    Err.Clear
        
    On Error GoTo ErrHandler2
    
    If VarType(strCode) = vbString Then
      ThisWorkbook.CustomDocumentProperties.Add name:="Version", _
                                                  LinkToContent:=False, _
                                                  Type:=msoPropertyTypeString, _
                                                  value:=strCode
      SetCode = True
    End If
  End If

ErrHandler2:
    
End Function

Public Function GetCode() As Variant
  
  On Error GoTo NewProperty
  
  Dim strCode As String
  
  strCode = ThisWorkbook.CustomDocumentProperties("Version")
  
  GoTo ExitFunction
 
NewProperty:
  strCode = vbNullString
  If SetCode(strCode) = False Then
    strCode = ""
  End If
ExitFunction:
  GetCode = strCode
  Exit Function

End Function


Attribute VB_Name = "frmCheckUpdates"
Attribute VB_Base = "0{066A65E0-0B4C-4A29-A31F-A234A20066E2}{494F9F0B-F90A-4CC3-B7DC-2C4DC9128F2C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub cmdCancelUpdate_Click()
  modfrmCheckUpdates.cmdCancelUpdates_Click_Handler
End Sub

Private Sub cmdInstallUpdate_Click()
  modfrmCheckUpdates.cmdInstallUpdates_Click_Handler
End Sub

Private Sub txtURL_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmCheckUpdates.txtURL_DblClick_Handler Cancel
End Sub

Private Sub UserForm_Initialize()
  modfrmCheckUpdates.UserForm_Initialize_Handler
End Sub

Private Sub UserForm_Terminate()
  modfrmCheckUpdates.UserForm_Terminate_Handler
End Sub
Attribute VB_Name = "frmConsultation"
Attribute VB_Base = "0{1838A994-CAF1-4541-A732-27E67FB4CEB8}{67C8DEF0-32EC-44B8-8F80-F8A6F10CA24A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Const AW_OPTIMAL_TIME = 300& '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_HOR_POSITIVE = &H1  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_HOR_NEGATIVE = &H2  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_VER_POSITIVE = &H4  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Const AW_VER_NEGATIVE = &H8  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Const AW_CENTER = &H10       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_HIDE = &H10000      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|; |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_ACTIVATE = &H20000  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Const AW_SLIDE = &H40000     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_BLEND = &H80000     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const GWL_STYLE As Long = (-16)
Private Const GWL_EXSTYLE = (-20)
Private Const WS_CAPTION As Long = &HC00000
Private Const WS_BORDER As Long = &H800000
Private Const WS_EX_LAYERED = &H80000
Private Const SWP_NOACTIVATE = &H10
Private Const SWP_NOSIZE = &H1
Private Const SWP_NOMOVE = &H2
Private Const SWP_SHOWWINDOW = &H40
Private Const SWP_FRAMECHANGED = &H20
Private Const SWP_NOOWNERZORDER = &H200
Private Const SWP_NOZORDER = &H4
Private Const LWA_COLORKEY = &H1
Private Const LWA_ALPHA = &H2
Private Const WM_NCLBUTTONDOWN = &HA1
Private Const HTCAPTION = 2

Private Type POINTAPI
  x As Long
  y As Long
End Type
  
Private lngResolutionX As Long
Private lngResolutionY As Long

Private Type DEVMODE
  dmDeviceName As String * 32
  dmSpecVersion As Integer
  dmDriverVersion As Integer
  dmSize As Integer
  dmDriverExtra As Integer
  dmFields As Long
  dmOrientation As Integer
  dmPaperSize As Integer
  dmPaperLength As Integer
  dmPaperWidth As Integer
  dmScale As Integer
  dmCopies As Integer
  dmDefaultSource As Integer
  dmPrintQuality As Integer
  dmColor As Integer
  dmDuplex As Integer
  dmYResolution As Integer
  dmTTOption As Integer
  dmCollate As Integer
  dmFormName As String * 32
  dmUnusedPadding As Integer
  
  dmBitsPerPixel As Integer
  dmPelsWidth As Long
  dmPelsHeight As Long
  dmDisplayFlags As Long
  dmDisplayFrequency As Long
  
  dmICMMethod As Long
  dmICMIntent As Long
  dmMediaType As Long
  dmDitherType As Long
  dmReserved1 As Long
  dmReserved2 As Long
  dmPanningWidth As Long
  dmPanningHeight As Long
End Type


#If VBA7 Then

  #If Win64 Then
    Private Declare PtrSafe Function SetWindowLongPtr Lib "user32" Alias "SetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    Private Declare PtrSafe Function GetWindowLongPtr Lib "user32" Alias "GetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long) As LongPtr
  #Else
    Private Declare PtrSafe Function SetWindowLongPtr Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    Private Declare PtrSafe Function GetWindowLongPtr Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As LongPtr, ByVal nIndex As Long) As LongPtr
  #End If
  
  Private Declare PtrSafe Function SetWindowPos Lib "user32" (ByVal hwnd As LongPtr, ByVal hWndInsertAfter As LongPtr, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As LongPtr
  
  Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
  Private Declare PtrSafe Function AnimateWindow Lib "user32" (ByVal hwnd As LongPtr, ByVal dwTime As Long, ByVal dwFlags As Long) As Boolean
  Private Declare PtrSafe Function GetCursorPos Lib "user32" (lpPoint As POINTAPI) As Long
  Private Declare PtrSafe Function SetLayeredWindowAttributes Lib "user32" (ByVal hwnd As Long, ByVal crKey As Long, ByVal bAlpha As Byte, ByVal dwFlags As Long) As LongPtr
  Private Declare PtrSafe Sub ReleaseCapture Lib "user32" ()
  Private Declare PtrSafe Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, lParam As Any) As LongPtr
  
  Private Declare PtrSafe Function EnumDisplaySettings Lib "user32" Alias "EnumDisplaySettingsA" (ByVal lpszDeviceName As String, ByVal iModeNum As Long, lpDevMode As DEVMODE) As LongPtr
  
#Else

  Private Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
  Private Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
  Private Declare Function SetWindowPos Lib "user32" (ByVal hwnd As Long, ByVal hWndInsertAfter As Long, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long
  
  Private Declare Function FindWindow Lib "user32.dll" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
  Private Declare Function AnimateWindow Lib "user32" (ByVal hwnd As Long, ByVal dwTime As Long, ByVal dwFlags As Long) As Boolean
  Private Declare Function GetCursorPos& Lib "user32.dll" (lpPoint As POINTAPI)
  Private Declare Function SetLayeredWindowAttributes Lib "user32" (ByVal hwnd As Long, ByVal crKey As Long, ByVal bAlpha As Byte, ByVal dwFlags As Long) As Long
  Private Declare Sub ReleaseCapture Lib "user32" ()
  Private Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long

  Private Declare Function EnumDisplaySettings Lib "user32" Alias "EnumDisplaySettingsA" (ByVal lpszDeviceName As String, ByVal iModeNum As Long, lpDevMode As DEVMODE) As Long

#End If

'***********************************
#If VBA7 And Win64 Then
  Private ihWnd As LongPtr
#Else
  Private ihWnd As Long
#End If
'***********************************

#If VBA7 Then

  #If Win64 Then
  
    Private Sub MoveFormOnScreen(Optional ByVal ToCursor As Boolean = False)
      Dim lngICounter As LongPtr
      Dim lngJCounter As LongPtr
      Dim paCoordinates As POINTAPI
      lngICounter = GetWindowLongPtr(ihWnd, GWL_STYLE)
      lngICounter = lngICounter And Not WS_CAPTION And Not WS_BORDER
      lngJCounter = SetWindowLongPtr(ihWnd, GWL_STYLE, lngICounter)
      lngJCounter = SetWindowLongPtr(ihWnd, GWL_EXSTYLE, 0)
      If ToCursor Then
        GetCursorPos paCoordinates
        SetWindowPos ihWnd, 0, paCoordinates.x, paCoordinates.y, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
      Else
        lngICounter = Application.ActiveWindow.Height: lngJCounter = Application.ActiveWindow.Width
        lngICounter = Int(lngICounter / 2 - Me.Height / 2)
        lngJCounter = Int(lngJCounter / 2 - Me.Width / 2)
        If lngICounter <= 0 Then lngICounter = 20
        If lngJCounter <= 0 Then lngJCounter = 20
            SetWindowPos ihWnd, 0, CLng(lngJCounter), CLng(lngICounter), 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
      End If
    End Sub
    
    Private Sub SetTransparent(Optional ByVal Layered As Byte = 255)
      Dim Ret As LongPtr
      Ret = GetWindowLongPtr(ihWnd, GWL_EXSTYLE)
      Ret = Ret Or WS_EX_LAYERED
      SetWindowLongPtr ihWnd, GWL_EXSTYLE, Ret
      SetLayeredWindowAttributes CLng(ihWnd), 0, Layered, LWA_ALPHA
    End Sub
  
  #Else
  
    Private Sub MoveFormOnScreen(Optional ByVal ToCursor As Boolean = False)
      Dim lngICounter As Long
      Dim lngJCounter As Long
      Dim paCoordinates As POINTAPI
      lngICounter = GetWindowLongPtr(ihWnd, GWL_STYLE)
      lngICounter = lngICounter And Not WS_CAPTION And Not WS_BORDER
      lngJCounter = SetWindowLongPtr(ihWnd, GWL_STYLE, lngICounter)
      lngJCounter = SetWindowLongPtr(ihWnd, GWL_EXSTYLE, 0)
      If ToCursor Then
        GetCursorPos paCoordinates
        lngJCounter = paCoordinates.x
        If paCoordinates.y + frmConsultation.Height + 30 < lngResolutionY Then
          If paCoordinates.y - frmConsultation.Height < 0 Then
            lngICounter = paCoordinates.y + frmConsultation.Height + 20
          Else
            lngICounter = paCoordinates.y
          End If
        Else
          lngICounter = paCoordinates.y - frmConsultation.Height - 20
        End If
        SetWindowPos ihWnd, 0, lngJCounter, lngICounter, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
      Else
        lngICounter = Application.ActiveWindow.Height: lngJCounter = Application.ActiveWindow.Width
    lngICounter = Int(lngICounter / 2 - Me.Height / 2)
    lngJCounter = Int(lngJCounter / 2 - Me.Width / 2)
    If lngICounter <= 0 Then lngICounter = 20
    If lngJCounter <= 0 Then lngJCounter = 20
        SetWindowPos ihWnd, 0, lngJCounter, lngICounter, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
      End If
    End Sub
    
    Private Sub SetTransparent(Optional ByVal Layered As Byte = 255)
      Dim Ret As Long
      Ret = GetWindowLongPtr(ihWnd, GWL_EXSTYLE)
      Ret = Ret Or WS_EX_LAYERED
      SetWindowLongPtr ihWnd, GWL_EXSTYLE, Ret
      SetLayeredWindowAttributes ihWnd, 0, Layered, LWA_ALPHA
    End Sub
  
  #End If

#Else

Private Sub MoveFormOnScreen(Optional ByVal ToCursor As Boolean = False)
  Dim lngICounter As Long, lngJCounter As Long, paCoordinates As POINTAPI
  Dim lngCoordX As Long, lngCoordY As Long
  lngICounter = GetWindowLong(ihWnd, GWL_STYLE)
  lngICounter = lngICounter And WS_BORDER
  lngJCounter = SetWindowLong(ihWnd, GWL_STYLE, lngICounter)
  lngJCounter = SetWindowLong(ihWnd, GWL_EXSTYLE, 0)
  If ToCursor Then
    GetCursorPos paCoordinates
    
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If paCoordinates.x + frmConsultation.Width > lngResolutionX Then
      If paCoordinates.x - frmConsultation.Width < 0 Then
        lngJCounter = paCoordinates.x - frmConsultation.Width / 2
      Else
        lngJCounter = paCoordinates.x - frmConsultation.Width
      End If
    Else
      lngJCounter = paCoordinates.x
    End If
    
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If paCoordinates.y + frmConsultation.Height + 50 < lngResolutionY Then
      If paCoordinates.y - frmConsultation.Height < 0 Then
        lngICounter = paCoordinates.y + frmConsultation.Height + 20
      Else
        lngICounter = paCoordinates.y - 20
      End If
    Else
      lngICounter = paCoordinates.y - frmConsultation.Height - 20
    End If
    
    SetWindowPos ihWnd, 0, lngJCounter, lngICounter, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
''    SetWindowPos ihWnd, 0, 100, 100, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  Else
    lngICounter = Application.ActiveWindow.Height: lngJCounter = Application.ActiveWindow.Width
    lngICounter = Int(lngICounter / 2 - Me.Height / 2)
    lngJCounter = Int(lngJCounter / 2 - Me.Width / 2)
    If lngICounter <= 0 Then lngICounter = 20
    If lngJCounter <= 0 Then lngJCounter = 20
    SetWindowPos ihWnd, 0, lngJCounter, lngICounter, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  End If
End Sub

Private Sub SetTransparent(Optional ByVal Layered As Byte = 255)
  Dim Ret As Long
  Ret = GetWindowLong(ihWnd, GWL_EXSTYLE)
  Ret = Ret Or WS_EX_LAYERED
  SetWindowLong ihWnd, GWL_EXSTYLE, Ret
  SetLayeredWindowAttributes ihWnd, 0, Layered, LWA_ALPHA
End Sub
    
#End If

Public Sub MoveIt()
  Call ReleaseCapture
  SendMessage ihWnd, WM_NCLBUTTONDOWN, HTCAPTION, 0&
End Sub

Public Sub lblOkMRMO_Click()
  
  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  
  Dim blnLocalValueEnableEvents As Boolean      ' EnableEvents
  Dim blnLocalValueScreenUpdating As Boolean    ' ScreenUpdating
 
  blnLocalValueEnableEvents = Application.EnableEvents
  blnLocalValueScreenUpdating = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False

  
  Set wbBook = Application.ThisWorkbook
  Set wsSheet = wbBook.Sheets(gstrInstructionSheetName)
  
  modServiceModule.UNPROTECT_SHEET wsSheet
  Application.ScreenUpdating = False
  wsSheet.Range("Consultation_" & Instruction.intKindOfConsultstion).cells(1, 1).value = frmConsultation.txtFIO
  wsSheet.Range("Consultation_" & Instruction.intKindOfConsultstion).cells(2, 1).value = frmConsultation.txtTel
  wsSheet.Range("Consultation_" & Instruction.intKindOfConsultstion).cells(3, 1).value = frmConsultation.txtMail
  wsSheet.Range("Consultation_" & Instruction.intKindOfConsultstion).cells(4, 1).value = frmConsultation.txtSite
  wsSheet.Range("Consultation_" & Instruction.intKindOfConsultstion).cells(5, 1).value = frmConsultation.txtComm
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  frmConsultation.FixAllHyperlinksInSheet
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  wsSheet.Range("Consultation_" & Instruction.intKindOfConsultstion).EntireRow.AutoFit
  
  modServiceModule.PROTECT_SHEET wsSheet, True
  
  GoTo CleanUp
  
ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp

CleanUp:
  Application.ScreenUpdating = blnLocalValueScreenUpdating
  If Not wsSheet Is Nothing Then
    wsSheet.Range("Consultation_" & Instruction.intKindOfConsultstion).cells(1, 1).Activate
  End If
  Application.EnableEvents = blnLocalValueEnableEvents
  
  Unload Me
  
End Sub

'***********************************
Private Sub UserForm_Initialize()
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  
  Set wbBook = Application.ThisWorkbook
  Set wsSheet = wbBook.Sheets(gstrInstructionSheetName)
  
  If blnHelpReferenceFormIsInitialized Then
    Exit Sub  ' Already initialized
  End If
  
  frmConsultation.txtFIO = wsSheet.Range("Consultation_" & Instruction.intKindOfConsultstion).cells(1, 1).value
  frmConsultation.txtTel = wsSheet.Range("Consultation_" & Instruction.intKindOfConsultstion).cells(2, 1).value
  frmConsultation.txtMail = wsSheet.Range("Consultation_" & Instruction.intKindOfConsultstion).cells(3, 1).value
  frmConsultation.txtSite = wsSheet.Range("Consultation_" & Instruction.intKindOfConsultstion).cells(4, 1).value
  frmConsultation.txtComm = wsSheet.Range("Consultation_" & Instruction.intKindOfConsultstion).cells(5, 1).value
  
  If Instruction.intKindOfConsultstion = 1 Then
    frmConsultation.frConsultation.caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Else
    frmConsultation.frConsultation.caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  
  frmConsultation.Get_DisplayMetrics
  
  ihWnd = FindWindow(vbNullString, Me.caption)
  frmConsultation.Height = frmConsultation.Height - 15
  MoveFormOnScreen True
  SetTransparent 250
  AnimateWindow ihWnd, AW_OPTIMAL_TIME, AW_VER_POSITIVE
  blnHelpReferenceFormIsInitialized = True  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  frmConsultation.Repaint
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  AnimateWindow ihWnd, AW_OPTIMAL_TIME, AW_HIDE Or AW_VER_NEGATIVE
  blnHelpReferenceFormIsInitialized = False
End Sub

Private Sub lblClose_Click()
  Unload Me
End Sub

Sub Get_DisplayMetrics()
  
  Dim dm As DEVMODE  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim lRetval As Long    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  dm.dmSize = Len(dm)
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  lRetval = CLng(EnumDisplaySettings(vbNullString, -1, dm))
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  lngResolutionX = dm.dmPelsWidth
  lngResolutionY = dm.dmPelsHeight
    
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub FixAllHyperlinksInSheet()
  
  On Error GoTo ErrHandler
  
  Dim wsSheet As Worksheet
  Dim hl As Hyperlink
  Dim rngCell As Range

  Set wsSheet = Application.ThisWorkbook.Sheets(gstrInstructionSheetName)
  wsSheet.Activate
  modServiceModule.UNPROTECT_SHEET wsSheet
  For Each rngCell In Union(wsSheet.Range("Consultation_1").Columns(1).cells, wsSheet.Range("Consultation_2").Columns(1).cells).cells
    If InStr(LCase(rngCell.cells(1, 1).Offset(0, -1).value), "mail") <> 0 Or _
       InStr(LCase(rngCell.cells(1, 1).Offset(0, -1).value), "web") <> 0 Then
         rngCell.cells(1, 1).Select
         If Len(Trim(rngCell.cells(1, 1).value)) = 0 Then
           rngCell.cells(1, 1).value = vbNullString
         Else
           If InStr(LCase(rngCell.cells(1, 1).Offset(0, -1).value), "mail") = 0 Then                ' |fffd||fffd||fffd||fffd| |fffd||fffd| mail
             If InStr(LCase(rngCell.cells(1, 1).value), "http") <> 1 Then
               rngCell.cells(1, 1).value = "http://" & rngCell.cells(1, 1).value
             End If
             rngCell.cells(1, 1).Worksheet.Hyperlinks.Add Anchor:=Selection, _
                                                    Address:=rngCell.cells(1, 1).value, _
                                                    TextToDisplay:=rngCell.cells(1, 1).value, _
                                                    ScreenTip:=rngCell.cells(1, 1).value
           Else                                                                                     ' |fffd||fffd||fffd||fffd| mail
             rngCell.cells(1, 1).Worksheet.Hyperlinks.Add Anchor:=rngCell.cells(1, 1), _
                                                    Address:="mailto:" & rngCell.cells(1, 1).value, _
                                                    TextToDisplay:=rngCell.cells(1, 1).value, _
                                                    ScreenTip:=rngCell.cells(1, 1).value
           End If
           rngCell.Font.name = "Tahoma"
           rngCell.Font.Size = 9
           rngCell.Font.Bold = True
           rngCell.Font.Underline = True
         End If
    End If
  Next rngCell
  
  GoTo CleanUp
  
ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp

CleanUp:
  
End Sub
Attribute VB_Name = "frmDateChoose"
Attribute VB_Base = "0{ACD76E7E-F319-4C96-9588-4913265591B6}{11D5C66C-D64A-440E-BE9A-FB8AAA1F77C3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub cbMonth_Change()
  modfrmDateChoose.cbMonth_Change_Handler
End Sub

Private Sub lblMonthMinus_Click()
  modfrmDateChoose.lblMonthMinus_Click_Handler
End Sub

Private Sub lblMonthPlus_Click()
  modfrmDateChoose.lblMonthPlus_Click_Handler
End Sub

Private Sub spinYearChange_SpinDown()
  modfrmDateChoose.spinYearChange_SpinDown_Handler
End Sub

Private Sub spinYearChange_SpinUp()
  modfrmDateChoose.spinYearChange_SpinUp_Handler
End Sub

Private Sub txtYear_Change()
  modfrmDateChoose.txtYear_Change_Handler
End Sub

Private Sub UserForm_Activate()
  modfrmDateChoose.UserForm_Activate_Handler
End Sub

' "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /LabelX_Y:
'                                   |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - X - |fffd||fffd||fffd||fffd||fffd||fffd|,
'                                   |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - Y - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|/
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label1_1_Click()
  modfrmDateChoose.LabelClick_Handler Label1_1
End Sub

Private Sub Label1_2_Click()
  modfrmDateChoose.LabelClick_Handler Label1_2
End Sub

Private Sub Label1_3_Click()
  modfrmDateChoose.LabelClick_Handler Label1_3
End Sub

Private Sub Label1_4_Click()
  modfrmDateChoose.LabelClick_Handler Label1_4
End Sub

Private Sub Label1_5_Click()
  modfrmDateChoose.LabelClick_Handler Label1_5
End Sub

Private Sub Label1_6_Click()
  modfrmDateChoose.LabelClick_Handler Label1_6
End Sub

Private Sub Label1_7_Click()
  modfrmDateChoose.LabelClick_Handler Label1_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label2_1_Click()
  modfrmDateChoose.LabelClick_Handler Label2_1
End Sub

Private Sub Label2_2_Click()
  modfrmDateChoose.LabelClick_Handler Label2_2
End Sub

Private Sub Label2_3_Click()
  modfrmDateChoose.LabelClick_Handler Label2_3
End Sub

Private Sub Label2_4_Click()
  modfrmDateChoose.LabelClick_Handler Label2_4
End Sub

Private Sub Label2_5_Click()
  modfrmDateChoose.LabelClick_Handler Label2_5
End Sub

Private Sub Label2_6_Click()
  modfrmDateChoose.LabelClick_Handler Label2_6
End Sub

Private Sub Label2_7_Click()
  modfrmDateChoose.LabelClick_Handler Label2_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label3_1_Click()
  modfrmDateChoose.LabelClick_Handler Label3_1
End Sub

Private Sub Label3_2_Click()
  modfrmDateChoose.LabelClick_Handler Label3_2
End Sub

Private Sub Label3_3_Click()
  modfrmDateChoose.LabelClick_Handler Label3_3
End Sub

Private Sub Label3_4_Click()
  modfrmDateChoose.LabelClick_Handler Label3_4
End Sub

Private Sub Label3_5_Click()
  modfrmDateChoose.LabelClick_Handler Label3_5
End Sub

Private Sub Label3_6_Click()
  modfrmDateChoose.LabelClick_Handler Label3_6
End Sub

Private Sub Label3_7_Click()
  modfrmDateChoose.LabelClick_Handler Label3_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label4_1_Click()
  modfrmDateChoose.LabelClick_Handler Label4_1
End Sub

Private Sub Label4_2_Click()
  modfrmDateChoose.LabelClick_Handler Label4_2
End Sub

Private Sub Label4_3_Click()
  modfrmDateChoose.LabelClick_Handler Label4_3
End Sub

Private Sub Label4_4_Click()
  modfrmDateChoose.LabelClick_Handler Label4_4
End Sub

Private Sub Label4_5_Click()
  modfrmDateChoose.LabelClick_Handler Label4_5
End Sub

Private Sub Label4_6_Click()
  modfrmDateChoose.LabelClick_Handler Label4_6
End Sub

Private Sub Label4_7_Click()
  modfrmDateChoose.LabelClick_Handler Label4_7
End Sub

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label5_1_Click()
  modfrmDateChoose.LabelClick_Handler Label5_1
End Sub

Private Sub Label5_2_Click()
  modfrmDateChoose.LabelClick_Handler Label5_2
End Sub

Private Sub Label5_3_Click()
  modfrmDateChoose.LabelClick_Handler Label5_3
End Sub

Private Sub Label5_4_Click()
  modfrmDateChoose.LabelClick_Handler Label5_4
End Sub

Private Sub Label5_5_Click()
  modfrmDateChoose.LabelClick_Handler Label5_5
End Sub

Private Sub Label5_6_Click()
  modfrmDateChoose.LabelClick_Handler Label5_6
End Sub

Private Sub Label5_7_Click()
  modfrmDateChoose.LabelClick_Handler Label5_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label6_1_Click()
  modfrmDateChoose.LabelClick_Handler Label6_1
End Sub

Private Sub Label6_2_Click()
  modfrmDateChoose.LabelClick_Handler Label6_2
End Sub

Private Sub Label6_3_Click()
  modfrmDateChoose.LabelClick_Handler Label6_3
End Sub

Private Sub Label6_4_Click()
  modfrmDateChoose.LabelClick_Handler Label6_4
End Sub

Private Sub Label6_5_Click()
  modfrmDateChoose.LabelClick_Handler Label6_5
End Sub

Private Sub Label6_6_Click()
  modfrmDateChoose.LabelClick_Handler Label6_6
End Sub

Private Sub Label6_7_Click()
  modfrmDateChoose.LabelClick_Handler Label6_7
End Sub

' "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /LabelX_Y:
'                                 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - X - |fffd||fffd||fffd||fffd||fffd||fffd|,
'                                 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - Y - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|/
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label1_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_1
End Sub

Private Sub Label1_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_2
End Sub

Private Sub Label1_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_3
End Sub

Private Sub Label1_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_4
End Sub

Private Sub Label1_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_5
End Sub

Private Sub Label1_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_6
End Sub

Private Sub Label1_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label1_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label2_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_1
End Sub

Private Sub Label2_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_2
End Sub

Private Sub Label2_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_3
End Sub

Private Sub Label2_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_4
End Sub

Private Sub Label2_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_5
End Sub

Private Sub Label2_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_6
End Sub

Private Sub Label2_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label2_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label3_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_1
End Sub

Private Sub Label3_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_2
End Sub

Private Sub Label3_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_3
End Sub

Private Sub Label3_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_4
End Sub

Private Sub Label3_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_5
End Sub

Private Sub Label3_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_6
End Sub

Private Sub Label3_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label3_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label4_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_1
End Sub

Private Sub Label4_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_2
End Sub

Private Sub Label4_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_3
End Sub

Private Sub Label4_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_4
End Sub

Private Sub Label4_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_5
End Sub

Private Sub Label4_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_6
End Sub

Private Sub Label4_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label4_7
End Sub

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label5_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_1
End Sub

Private Sub Label5_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_2
End Sub

Private Sub Label5_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_3
End Sub

Private Sub Label5_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_4
End Sub

Private Sub Label5_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_5
End Sub

Private Sub Label5_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_6
End Sub

Private Sub Label5_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label5_7
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd|
Private Sub Label6_1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_1
End Sub

Private Sub Label6_2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_2
End Sub

Private Sub Label6_3_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_3
End Sub

Private Sub Label6_4_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_4
End Sub

Private Sub Label6_5_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_5
End Sub

Private Sub Label6_6_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_6
End Sub

Private Sub Label6_7_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmDateChoose.LabelDblClick_Handler Label6_7
End Sub
Attribute VB_Name = "frmKindOfCoolant"
Attribute VB_Base = "0{5E9F847F-B579-4656-9757-843CD26542C7}{CFA2C0B0-5595-46AF-AE19-075BF59BE2B3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdOK_Click()
  If Len(Trim(txtKindOfCoolant.value)) = 0 Then
    MsgBox "|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbCritical, _
           STR_MSGBOX_WARNING_TITLE
    frmKindOfCoolant.txtKindOfCoolant.SetFocus
  ElseIf Len(Trim(txtKindOfCoolant.value)) > 900 Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 900 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!!", _
           vbCritical, _
           STR_MSGBOX_WARNING_TITLE
    frmNameSource.txtNameSource.SetFocus
  Else
    modGlobals.STR_KIND_OF_COOLANT = txtKindOfCoolant.value
    Unload Me
  End If
End Sub

Private Sub cmdCANCEL_Click()
  modGlobals.STR_NAME_SOURCE = vbNullString
  Unload Me
End Sub

Private Sub frmKindOfCoolant_Initialize()
  modGlobals.STR_NAME_SOURCE = vbNullString
End Sub


Attribute VB_Name = "frmNameSource"
Attribute VB_Base = "0{D0A7C747-4595-4E71-91E9-F2E24CB76B43}{5582F3D7-A904-4B13-83F9-9AEA5CC091AE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdOK_Click()
  If Len(Trim(txtNameSource.value)) = 0 Then
    MsgBox "|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbCritical, _
           STR_MSGBOX_WARNING_TITLE
    frmNameSource.txtNameSource.SetFocus
  ElseIf Len(Trim(txtNameSource.value)) > 900 Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 900 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!!", _
           vbCritical, _
           STR_MSGBOX_WARNING_TITLE
    frmNameSource.txtNameSource.SetFocus
  Else
    modGlobals.STR_NAME_SOURCE = txtNameSource.value
    Unload Me
  End If
End Sub

Private Sub cmdCANCEL_Click()
  Unload Me
End Sub

Private Sub frmNameSource_Initialize()
  If Len(Trim(modGlobals.STR_NAME_SOURCE)) <> 0 Then
    frmNameSource.txtNameSource = modGlobals.STR_NAME_SOURCE
  End If
End Sub

Attribute VB_Name = "frmReestr"
Attribute VB_Base = "0{9AECAC4A-02B5-40A8-989D-67FC955CE4AA}{E130F274-A10C-4143-90B8-2135A7C75E5E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit

Private Sub chkFilterEnabled_Click()
  modfrmReestr.chkFilterEnabled_Click_Handler
End Sub

Private Sub cmdOK_Click()
  modfrmReestr.cmdOK_Click_Handler
End Sub

Private Sub ListReestr_Change()
  modfrmReestr.ListReestr_Change_Handler
End Sub

Private Sub txtMOFilter_Change()
  modfrmReestr.txtMOFilter_Change_Handler
End Sub

Private Sub txtMRFilter_Change()
  modfrmReestr.txtMRFilter_Change_Handler
End Sub

Private Sub txtOrgFilter_Change()
  modfrmReestr.txtOrgFilter_Change_Handler
End Sub

Private Sub cmdUpdateReestr_Click()
  modfrmReestr.cmdUpdateReestr_Click_Handler
End Sub

Private Sub ListReestr_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmReestr.ListReestr_DblClick_Handler Cancel
End Sub

Private Sub txtURL_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  modfrmReestr.txtURL_DblClick_Handler Cancel
End Sub

Private Sub UserForm_Initialize()
  modfrmReestr.UserForm_Initialize_Handler
End Sub

Private Sub UserForm_Terminate()
  modfrmReestr.UserForm_Terminate_Handler
End Sub
Attribute VB_Name = "frmSheetReference"
Attribute VB_Base = "0{9A2D24EB-6641-43BC-83F4-8E6E26DBD20E}{C171EF90-A4DC-4D95-A2C6-02A927C6CD80}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Const AW_OPTIMAL_TIME = 300& '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_HOR_POSITIVE = &H1  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_HOR_NEGATIVE = &H2  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_VER_POSITIVE = &H4  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Const AW_VER_NEGATIVE = &H8  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Const AW_CENTER = &H10       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_HIDE = &H10000      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|; |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_ACTIVATE = &H20000  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Const AW_SLIDE = &H40000     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const AW_BLEND = &H80000     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const GWL_STYLE As Long = (-16)
Private Const GWL_EXSTYLE = (-20)
Private Const WS_CAPTION As Long = &HC00000
Private Const WS_BORDER As Long = &H800000
Private Const WS_EX_LAYERED = &H80000
Private Const SWP_NOACTIVATE = &H10
Private Const SWP_NOSIZE = &H1
Private Const SWP_NOMOVE = &H2
Private Const SWP_SHOWWINDOW = &H40
Private Const SWP_FRAMECHANGED = &H20
Private Const SWP_NOOWNERZORDER = &H200
Private Const SWP_NOZORDER = &H4
Private Const LWA_COLORKEY = &H1
Private Const LWA_ALPHA = &H2
Private Const WM_NCLBUTTONDOWN = &HA1
Private Const HTCAPTION = 2

Private Type POINTAPI
  x As Long
  y As Long
End Type
  
Private lngResolutionX As Long
Private lngResolutionY As Long

Private Type DEVMODE
  dmDeviceName As String * 32
  dmSpecVersion As Integer
  dmDriverVersion As Integer
  dmSize As Integer
  dmDriverExtra As Integer
  dmFields As Long
  dmOrientation As Integer
  dmPaperSize As Integer
  dmPaperLength As Integer
  dmPaperWidth As Integer
  dmScale As Integer
  dmCopies As Integer
  dmDefaultSource As Integer
  dmPrintQuality As Integer
  dmColor As Integer
  dmDuplex As Integer
  dmYResolution As Integer
  dmTTOption As Integer
  dmCollate As Integer
  dmFormName As String * 32
  dmUnusedPadding As Integer
  
  dmBitsPerPixel As Integer
  dmPelsWidth As Long
  dmPelsHeight As Long
  dmDisplayFlags As Long
  dmDisplayFrequency As Long
  
  dmICMMethod As Long
  dmICMIntent As Long
  dmMediaType As Long
  dmDitherType As Long
  dmReserved1 As Long
  dmReserved2 As Long
  dmPanningWidth As Long
  dmPanningHeight As Long
End Type

#If VBA7 Then

  #If Win64 Then
    Private Declare PtrSafe Function SetWindowLongPtr Lib "user32" Alias "SetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    Private Declare PtrSafe Function GetWindowLongPtr Lib "user32" Alias "GetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long) As LongPtr
  #Else
    Private Declare PtrSafe Function SetWindowLongPtr Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    Private Declare PtrSafe Function GetWindowLongPtr Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As LongPtr, ByVal nIndex As Long) As LongPtr
  #End If
  
  Private Declare PtrSafe Function SetWindowPos Lib "user32" (ByVal hwnd As LongPtr, ByVal hWndInsertAfter As LongPtr, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long
  
  Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
  Private Declare PtrSafe Function AnimateWindow Lib "user32" (ByVal hwnd As LongPtr, ByVal dwTime As Long, ByVal dwFlags As Long) As Boolean
  Private Declare PtrSafe Function GetCursorPos Lib "user32" (lpPoint As POINTAPI) As Long
  Private Declare PtrSafe Function SetLayeredWindowAttributes Lib "user32" (ByVal hwnd As Long, ByVal crKey As Long, ByVal bAlpha As Byte, ByVal dwFlags As Long) As Long
  Private Declare PtrSafe Sub ReleaseCapture Lib "user32" ()
  Private Declare PtrSafe Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, lParam As Any) As LongPtr
  
  Private Declare PtrSafe Function EnumDisplaySettings Lib "user32" Alias "EnumDisplaySettingsA" (ByVal lpszDeviceName As String, ByVal iModeNum As Long, lpDevMode As DEVMODE) As LongPtr
  
#Else

  Private Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
  Private Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
  Private Declare Function SetWindowPos Lib "user32" (ByVal hwnd As Long, ByVal hWndInsertAfter As Long, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long
  
  Private Declare Function FindWindow Lib "user32.dll" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
  Private Declare Function AnimateWindow Lib "user32" (ByVal hwnd As Long, ByVal dwTime As Long, ByVal dwFlags As Long) As Boolean
  Private Declare Function GetCursorPos& Lib "user32.dll" (lpPoint As POINTAPI)
  Private Declare Function SetLayeredWindowAttributes Lib "user32" (ByVal hwnd As Long, ByVal crKey As Long, ByVal bAlpha As Byte, ByVal dwFlags As Long) As Long
  Private Declare Sub ReleaseCapture Lib "user32" ()
  Private Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long

  Private Declare Function EnumDisplaySettings Lib "user32" Alias "EnumDisplaySettingsA" (ByVal lpszDeviceName As String, ByVal iModeNum As Long, lpDevMode As DEVMODE) As Long

#End If

'***********************************
#If VBA7 And Win64 Then
  Private ihWnd As LongPtr
#Else
  Private ihWnd As Long
#End If
'***********************************

#If VBA7 Then

  #If Win64 Then
  
    Private Sub MoveFormOnScreen(Optional ByVal ToCursor As Boolean = False)
      Dim lngICounter As LongPtr
      Dim lngJCounter As LongPtr
      Dim paCoordinates As POINTAPI
      lngICounter = GetWindowLongPtr(ihWnd, GWL_STYLE)
      lngICounter = lngICounter And Not WS_CAPTION And Not WS_BORDER
      lngJCounter = SetWindowLongPtr(ihWnd, GWL_STYLE, lngICounter)
      lngJCounter = SetWindowLongPtr(ihWnd, GWL_EXSTYLE, 0)
      If ToCursor Then
        GetCursorPos paCoordinates
        SetWindowPos ihWnd, 0, paCoordinates.x, paCoordinates.y, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
      Else
        lngICounter = Application.ActiveWindow.Height: lngJCounter = Application.ActiveWindow.Width
    lngICounter = Int(lngICounter / 2 - Me.Height / 2)
    lngJCounter = Int(lngJCounter / 2 - Me.Width / 2)
    If lngICounter <= 0 Then lngICounter = 20
    If lngJCounter <= 0 Then lngJCounter = 20
        SetWindowPos ihWnd, 0, CLng(lngJCounter), CLng(lngICounter), 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
      End If
    End Sub
    
    Private Sub SetTransparent(Optional ByVal Layered As Byte = 255)
      Dim Ret As LongPtr
      Ret = GetWindowLongPtr(ihWnd, GWL_EXSTYLE)
      Ret = Ret Or WS_EX_LAYERED
      SetWindowLongPtr ihWnd, GWL_EXSTYLE, Ret
      SetLayeredWindowAttributes CLng(ihWnd), 0, Layered, LWA_ALPHA
    End Sub
  
  #Else
  
    Private Sub MoveFormOnScreen(Optional ByVal ToCursor As Boolean = False)
      Dim lngICounter As Long
      Dim lngJCounter As Long
      Dim paCoordinates As POINTAPI
      lngICounter = GetWindowLongPtr(ihWnd, GWL_STYLE)
      lngICounter = lngICounter And Not WS_CAPTION And Not WS_BORDER
      lngJCounter = SetWindowLongPtr(ihWnd, GWL_STYLE, lngICounter)
      lngJCounter = SetWindowLongPtr(ihWnd, GWL_EXSTYLE, 0)
      If ToCursor Then
        GetCursorPos paCoordinates
        SetWindowPos ihWnd, 0, paCoordinates.x, paCoordinates.y, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
      Else
        lngICounter = Application.ActiveWindow.Height: lngJCounter = Application.ActiveWindow.Width
    lngICounter = Int(lngICounter / 2 - Me.Height / 2)
    lngJCounter = Int(lngJCounter / 2 - Me.Width / 2)
    If lngICounter <= 0 Then lngICounter = 20
    If lngJCounter <= 0 Then lngJCounter = 20
        SetWindowPos ihWnd, 0, lngJCounter, lngICounter, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
      End If
    End Sub
    
    Private Sub SetTransparent(Optional ByVal Layered As Byte = 255)
      Dim Ret As Long
      Ret = GetWindowLongPtr(ihWnd, GWL_EXSTYLE)
      Ret = Ret Or WS_EX_LAYERED
      SetWindowLongPtr ihWnd, GWL_EXSTYLE, Ret
      SetLayeredWindowAttributes ihWnd, 0, Layered, LWA_ALPHA
    End Sub
  
  #End If

#Else

Private Sub MoveFormOnScreen(Optional ByVal ToCursor As Boolean = False)
  Dim lngICounter As Long, lngJCounter As Long, paCoordinates As POINTAPI
  Dim lngCoordX As Long, lngCoordY As Long
  lngICounter = GetWindowLong(ihWnd, GWL_STYLE)
  lngICounter = lngICounter And WS_BORDER
  lngJCounter = SetWindowLong(ihWnd, GWL_STYLE, lngICounter)
  lngJCounter = SetWindowLong(ihWnd, GWL_EXSTYLE, 0)
  If ToCursor Then
    GetCursorPos paCoordinates
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If paCoordinates.x + frmSheetReference.Width > lngResolutionX Then
      If paCoordinates.x - frmSheetReference.Width < 0 Then
        lngJCounter = paCoordinates.x - frmSheetReference.Width / 2
      Else
        lngJCounter = paCoordinates.x - frmSheetReference.Width
      End If
    Else
      lngJCounter = paCoordinates.x
    End If
    
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If paCoordinates.y + frmSheetReference.Height + 50 < lngResolutionY Then
      If paCoordinates.y - frmSheetReference.Height < 0 Then
        lngICounter = paCoordinates.y + frmSheetReference.Height + 20
      Else
        lngICounter = paCoordinates.y - 20
      End If
    Else
      lngICounter = paCoordinates.y - frmSheetReference.Height - 20
    End If
    
    SetWindowPos ihWnd, 0, lngJCounter, lngICounter, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  Else
    lngICounter = Application.ActiveWindow.Height: lngJCounter = Application.ActiveWindow.Width
    lngICounter = Int(lngICounter / 2 - Me.Height / 2)
    lngJCounter = Int(lngJCounter / 2 - Me.Width / 2)
    If lngICounter <= 0 Then lngICounter = 20
    If lngJCounter <= 0 Then lngJCounter = 20
    SetWindowPos ihWnd, 0, lngJCounter, lngICounter, 0, 0, SWP_NOSIZE Or SWP_NOOWNERZORDER Or SWP_NOZORDER Or SWP_FRAMECHANGED
  End If
End Sub

Private Sub SetTransparent(Optional ByVal Layered As Byte = 255)
  Dim Ret As Long
  Ret = GetWindowLong(ihWnd, GWL_EXSTYLE)
  Ret = Ret Or WS_EX_LAYERED
  SetWindowLong ihWnd, GWL_EXSTYLE, Ret
  SetLayeredWindowAttributes ihWnd, 0, Layered, LWA_ALPHA
End Sub
    
#End If

Public Sub MoveIt()
  Call ReleaseCapture
  SendMessage ihWnd, WM_NCLBUTTONDOWN, HTCAPTION, 0&
End Sub

'***********************************
Private Sub UserForm_Initialize()
  If blnHelpReferenceFormIsInitialized Then
    Exit Sub ' Already initialized
  End If
  
  frmSheetReference.BackColor = RGB(255, 255, 200)
  
  frmSheetReference.Get_DisplayMetrics
  ihWnd = FindWindow(vbNullString, Me.caption)
  
  frmSheetReference.lblReference.Height = modInfo.sngHLblFormSheetReference + 10
  frmSheetReference.Height = frmSheetReference.Height + frmSheetReference.lblReference.Height - 27
  
  MoveFormOnScreen True
  SetTransparent 250
  AnimateWindow ihWnd, AW_OPTIMAL_TIME, AW_VER_POSITIVE
  blnHelpReferenceFormIsInitialized = True ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  frmSheetReference.Repaint

End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  AnimateWindow ihWnd, AW_OPTIMAL_TIME, AW_HIDE Or AW_VER_NEGATIVE
  blnHelpReferenceFormIsInitialized = False
End Sub

Private Sub UserForm_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
  If KeyCode = 27 Then Unload frmSheetReference
End Sub

Private Sub UserForm_Click()
  Unload Me
End Sub

Private Sub lblMessage_Click()
  Unload Me
End Sub

Private Sub lblReference_Click()
  Unload Me
End Sub

Private Sub lblCaption_Click()
  Unload Me
End Sub

Private Sub UserForm_Deactivate()
  Unload Me
End Sub

Sub Get_DisplayMetrics()
  
  Dim dm As DEVMODE  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim lRetval As Long    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  dm.dmSize = Len(dm)
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  lRetval = CLng(EnumDisplaySettings(vbNullString, -1, dm))
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  lngResolutionX = dm.dmPelsWidth
  lngResolutionY = dm.dmPelsHeight
    
End Sub

Attribute VB_Name = "frmSphereChoose"
Attribute VB_Base = "0{EAE18396-ED46-4E0D-B3E7-2D2DFD0833AE}{BB796B8A-6854-47C5-9709-6B479CD6A286}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdOK_Click()
  modfrmSphereChoose.cmdOK_Click_Handler
End Sub

Private Sub UserForm_Initialize()
  modfrmSphereChoose.UserForm_Initialize_Handler
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  modfrmSphereChoose.UserForm_QueryClose_Handler Cancel, CloseMode
End Sub
Attribute VB_Name = "frmUpdate"
Attribute VB_Base = "0{D0002B33-C2DD-4D12-ADFA-216225CDC26C}{A60E2E6E-59DF-4EA4-95B4-D8B8449FFBD7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Option Explicit

Private Sub chkUpdateIsAvailable_Change()
  If frmUpdate.chkUpdateIsAvailable.value = True Then
    frmUpdate.cmdPerformUpdate.Enabled = True
  Else
    frmUpdate.cmdPerformUpdate.Enabled = False
  End If
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub cmdCheckForUpdates_Click()
  modUpdTemplMain.cmdCheckForUpdates_Click_Handler
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Private Sub cmdPerformUpdate_Click()
  modUpdTemplMain.cmdPerformUpdate_Click_Handler
End Sub

Private Sub UserForm_Initialize()
  modUpdTemplMain.UserForm_Initialize_Handler
End Sub
Attribute VB_Name = "frmValidationHyperlink"
Attribute VB_Base = "0{BEB6E84E-86F4-4C85-BC5D-0ABB7DCC2A5C}{049E70A0-AAF0-4896-B2F4-5E87DA9E5118}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCANCEL_Click()
  modCommonProv.blnCheckHyperlinks = False
  Unload frmValidationHyperlink
End Sub

Private Sub cmdOK_Click()
  modCommonProv.blnCheckHyperlinks = True
  Unload frmValidationHyperlink
End Sub
Attribute VB_Name = "frmValidationInProgress"
Attribute VB_Base = "0{F8FE5FB0-550C-4C15-A558-CB1EA7C42CB5}{958C8942-69FE-4D1F-8AB8-B50D7ABC1EA7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Dim lngCurrentValidation As Long

Public Sub Mark_Next_Validation(ByVal blnValidationStatus As Boolean)

  If blnValidationStatus = False Then
    frmValidationInProgress.Controls("Check" & lngCurrentValidation & "_Success").Visible = True
  Else
    frmValidationInProgress.Controls("Check" & lngCurrentValidation & "_Fail").Visible = True
  End If
  
  frmValidationInProgress.Controls("Label" & lngCurrentValidation).Font.Bold = False
  lngCurrentValidation = lngCurrentValidation + 1
  
  If lngCurrentValidation = 4 Then
    Pointer.Visible = False
  Else
    frmValidationInProgress.Controls("Label" & lngCurrentValidation).Font.Bold = True
    Pointer.Top = Pointer.Top + 18
  End If
  
  DoEvents
  
End Sub

Private Sub cmdOK_Click()
  If modScrolling.blnIs_UserForm_Loaded("frmValidationInProgress") = True Then
    Unload frmValidationInProgress
  End If
End Sub

Private Sub UserForm_Activate()
  lngCurrentValidation = 1
  DoEvents
End Sub

Private Sub UserForm_Initialize()
  frmValidationInProgress.cmdOK.Enabled = False
  frmValidationInProgress.imgCriticalWarnings.Visible = False
  frmValidationInProgress.imgLowImpactWarnings.Visible = False
  frmValidationInProgress.imgNoIssues.Visible = False
End Sub
Attribute VB_Name = "modAnimatedFormsGlobals"
Option Explicit

Public Const BLN_SHOW_PROGRESS_FORM_ON_UPDATE_REQUESTS As Boolean = True
Global blnUpdateProgressFormIsInitialized As Boolean
Attribute VB_Name = "modChange"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Base 1
Option Explicit

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub WsInstrChange(Target As Range)
  If Target.Interior.ColorIndex = colorYellow Then
    Application.ThisWorkbook.Worksheets(gstrInstructionSheetName).cmdApplyContactChanges.Enabled = True
    Application.ThisWorkbook.Worksheets(gstrInstructionSheetName).cmdApplyContactChanges.Visible = True
  End If
End Sub

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub WsGeneralChange(Target As Range)
  On Error GoTo ErrWsGeneralChange
  
  Dim wbBook As Workbook
  
  Dim wsSheet As Worksheet
  Dim wsTehSheet As Worksheet
    
  Dim intNRow As Integer
  Dim intNColumn As Integer
  Dim intRowHeight As Integer
  
  Dim rngCell As Range
  Dim rngRange As Range
  
  Dim ISectTA
  
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean
    
  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False

  Set wbBook = Me.parent
  Set wsSheet = Target.parent
    
  modServiceModule.UNPROTECT_SHEET wsSheet
  
  intNRow = Target.cells(1, 1).Row
  intNColumn = Target.cells(1, 1).Column
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd| |fffd||fffd||fffd||fffd| (2)", |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If InStr(1, wsSheet.name, "|fffd||fffd||fffd||fffd| (2)") <> 0 Then
    
    If modServiceModule.IsNameExists(ThisWorkbook, "TariffAllowanceApproved") = False Then
      GoTo ErrWsGeneralChange
    Else
      Set ISectTA = Application.Intersect(Target, wsSheet.Range("TariffAllowanceApproved"))
    End If
    
    If Target.cells(1, 1).Interior.ColorIndex = colorCyan And _
       (Not ISectTA Is Nothing) Then
      
      modServiceModule.UNPROTECT_SHEET wsSheet
            
      If Target.cells(1, 1).value = "|fffd||fffd|" Then
        modServiceModule.RepaintCellsInRange Target.cells(1, 1).Row, 1, _
                                             wsSheet.Range("colorIndexCellsPrice2")
      Else
        modServiceModule.RepaintCellsInRange Target.cells(1, 1).Row, 1, _
                                             wsSheet.Range("colorIndexCellsPrice2").Offset(1, 0)
        wsSheet.Range("colorIndexCellsPrice2").Offset(Target.cells(1, 1).Row - 1, 0).value = vbNullString
      End If
            
      modServiceModule.PROTECT_SHEET wsSheet, True
    End If
  End If
  
  If Target.cells(1, 1).Row > 6 Then
    If Target.MergeCells Then
      modServiceModule.AutoFitMergedCellRowHeight Target
    Else
      Target.cells(1, 1).EntireRow.AutoFit
      intRowHeight = Target.cells(1, 1).RowHeight
      If intRowHeight < 20 Then Target.cells(1, 1).RowHeight = 20
    End If
  End If
    
  modServiceModule.PROTECT_SHEET wsSheet, True
  GoTo CleanUp
  
ErrWsGeneralChange:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal
  
End Sub
Attribute VB_Name = "modClassifierValidate"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Function blnValidate_Len_Number(strValue As String, _
                                        intMinLen As Integer, _
                                        intMaxLen As Integer) As Boolean
                                        
  Dim intCounter As Integer
  
  blnValidate_Len_Number = False
  If intMinLen <= 0 Or intMinLen <= 0 Then Exit Function
  
  If Len(strValue) = 0 Then ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    blnValidate_Len_Number = True ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Exit Function
  End If
  
  If Len(strValue) > intMaxLen Or Len(strValue) < intMinLen Then
    Exit Function
  End If
  
  For intCounter = 1 To Len(strValue)
    If Mid(strValue, intCounter, 1) < "0" Or Mid(strValue, intCounter, 1) > "9" Then
      Exit Function
    End If
  Next intCounter
  
  blnValidate_Len_Number = True

End Function

' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------
' ----------------------------- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ---------------------------------
' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_INN_OnForm(strINN As String, _
                                       Optional blnMsgBoxShow As Boolean = True) As Boolean
                                       
  blnValidate_INN_OnForm = False
  
  If blnValidate_Len_Number(strINN, 10, 12) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If
  
Success:
  blnValidate_INN_OnForm = True
  GoTo CleanUp
ErrHandler:
  blnValidate_INN_OnForm = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 10-12 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  GoTo CleanUp
CleanUp:
  Exit Function
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_KPP_OnForm(strKPP As String, _
                                       Optional blnMsgBoxShow As Boolean = True) As Boolean
                                       
  blnValidate_KPP_OnForm = False
  
  If LCase(Trim(strKPP)) = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Or _
     LCase(Trim(strKPP)) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
        GoTo Success
  ElseIf blnValidate_Len_Number(strKPP, 9, 9) = False Then
        GoTo ErrHandler
  Else
        GoTo Success
  End If
  
Success:
  blnValidate_KPP_OnForm = True
  GoTo CleanUp
ErrHandler:
  blnValidate_KPP_OnForm = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 9 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  GoTo CleanUp
CleanUp:
  Exit Function
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_OKTMO_OnForm(strOKTMO As String, _
                                         Optional blnMsgBoxShow As Boolean = True) As Boolean
                                         
  blnValidate_OKTMO_OnForm = False
  
  If blnValidate_Len_Number(strOKTMO, 7, 8) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If
  
Success:
  blnValidate_OKTMO_OnForm = True
  GoTo CleanUp
ErrHandler:
  blnValidate_OKTMO_OnForm = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 7-8 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  GoTo CleanUp
CleanUp:
  Exit Function
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_OKATO_OnForm(strOKATO As String, _
                                         Optional blnMsgBoxShow As Boolean = True) As Boolean
                                         
  blnValidate_OKATO_OnForm = False
  
  If blnValidate_Len_Number(strOKATO, 7, 11) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If
  
Success:
  blnValidate_OKATO_OnForm = True
  GoTo CleanUp
ErrHandler:
  blnValidate_OKATO_OnForm = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 7-11 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  GoTo CleanUp
CleanUp:
  Exit Function
  
End Function

' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------
' ----------------------------- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ---------------------------------
' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_INN_OnSheet(rngValidatingRange As Range, _
                                Optional blnMsgBoxShow As Boolean = True) As Boolean
                                
  blnValidate_INN_OnSheet = False
  
  If rngValidatingRange Is Nothing Then
    GoTo CleanUp
  End If
  
  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).value), 10, 12) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If
  
Success:
  blnValidate_INN_OnSheet = True
  GoTo CleanUp
ErrHandler:
  blnValidate_INN_OnSheet = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!", _
           vbOKOnly + vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  rngValidatingRange.parent.Activate
  rngValidatingRange.Activate
  GoTo CleanUp
CleanUp:
  Exit Function
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_KPP_OnSheet(rngValidatingRange As Range, _
                                        Optional blnMsgBoxShow As Boolean = True) As Boolean
                                        
  blnValidate_KPP_OnSheet = False
  
  If rngValidatingRange Is Nothing Then
    GoTo CleanUp
  End If
  
  If LCase(Trim(CStr(rngValidatingRange.cells(1, 1).value))) = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Or _
     LCase(Trim(CStr(rngValidatingRange.cells(1, 1).value))) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
        GoTo Success
  ElseIf blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).value), 9, 9) = False Then
        GoTo ErrHandler
  Else
        GoTo Success
  End If
  
Success:
  blnValidate_KPP_OnSheet = True
  GoTo CleanUp
ErrHandler:
  blnValidate_KPP_OnSheet = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 7-11 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           " |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  rngValidatingRange.parent.Activate
  rngValidatingRange.Activate
  GoTo CleanUp
CleanUp:
  Exit Function
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_OKTMO_OnSheet(rngValidatingRange As Range, _
                                          Optional blnMsgBoxShow As Boolean = True) As Boolean
                                          
  blnValidate_OKTMO_OnSheet = False
  
  If rngValidatingRange Is Nothing Then
    GoTo CleanUp
  End If
  
  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).value), 7, 8) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If
  
Success:
  blnValidate_OKTMO_OnSheet = True
  GoTo CleanUp
ErrHandler:
  blnValidate_OKTMO_OnSheet = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 9 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           " |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  rngValidatingRange.parent.Activate
  rngValidatingRange.Activate
  GoTo CleanUp
CleanUp:
  Exit Function
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function blnValidate_OKATO_OnSheet(rngValidatingRange As Range, _
                                          Optional blnMsgBoxShow As Boolean = True) As Boolean
                                          
  blnValidate_OKATO_OnSheet = False
  
  If rngValidatingRange Is Nothing Then
    GoTo CleanUp
  End If
  
  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).value), 7, 11) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If
  
Success:
  blnValidate_OKATO_OnSheet = True
  GoTo CleanUp
ErrHandler:
  blnValidate_OKATO_OnSheet = False
  If blnMsgBoxShow = True Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 7-11 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           " |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
  rngValidatingRange.parent.Activate
  rngValidatingRange.Activate
  GoTo CleanUp
CleanUp:
  Exit Function
  
End Function

' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------
' -------------------- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| -----------------------
' ---------------------------------------------------------------------------------
' ---------------------------------------------------------------------------------

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function strValidate_INN_OnSheet(rngValidatingRange As Range) As String

  strValidate_INN_OnSheet = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
  
  If rngValidatingRange Is Nothing Then
    GoTo CleanUp
  End If
  
  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).value), 10, 12) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If
  
Success:
  strValidate_INN_OnSheet = ""
  GoTo CleanUp
ErrHandler:
  strValidate_INN_OnSheet = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!"
  GoTo CleanUp
CleanUp:
  Exit Function
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function strValidate_KPP_OnSheet(rngValidatingRange As Range) As String

  strValidate_KPP_OnSheet = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
  
  If rngValidatingRange Is Nothing Then
    GoTo CleanUp
  End If
  
  If LCase(Trim(CStr(rngValidatingRange.cells(1, 1).value))) = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Or _
     LCase(Trim(CStr(rngValidatingRange.cells(1, 1).value))) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
        GoTo Success
  ElseIf blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).value), 9, 9) = False Then
        GoTo ErrHandler
  Else
        GoTo Success
  End If
  
Success:
  strValidate_KPP_OnSheet = ""
  GoTo CleanUp
ErrHandler:
  strValidate_KPP_OnSheet = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!"
  GoTo CleanUp
CleanUp:
  Exit Function
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function strValidate_OKTMO_OnSheet(rngValidatingRange As Range) As String

  strValidate_OKTMO_OnSheet = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
  
  If rngValidatingRange Is Nothing Then
    GoTo CleanUp
  End If
  
  If blnValidate_Len_Number(CStr(rngValidatingRange.cells(1, 1).value), 7, 8) = False Then
    GoTo ErrHandler
  Else
    GoTo Success
  End If
  
Success:
  strValidate_OKTMO_OnSheet = ""
  GoTo CleanUp
ErrHandler:
  strValidate_OKTMO_OnSheet = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| '" & rngValidatingRange.Address & "'!"
  GoTo CleanUp
CleanUp:
  Exit Function
  
End Function

Attribute VB_Name = "modCommonProv"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Private VB_BREAK_VALIDATION As VbMsgBoxResult

Private Const LNG_NUMBER_OF_CRITICAL_MESSAGES As Long = 100
Private Const LNG_NUMBER_OF_LOW_IMPACT_MESSAGES As Long = 100

Public blnCheckHyperlinks As Boolean

Private Const strRegion_4_78 As String = "|fffd|.|fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Function vbQuestion_Continue_Validation(ByVal wbBook As Workbook) As VbMsgBoxResult

  Dim wsCheckSheet As Worksheet
  Dim rngRange As Range
  
  If modGlobals.glngCriticalImpactWarningsCounter > LNG_NUMBER_OF_CRITICAL_MESSAGES Then
    If vbIgnore = VB_BREAK_VALIDATION Then
      VB_BREAK_VALIDATION = MsgBox("|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & _
                                   LNG_NUMBER_OF_CRITICAL_MESSAGES & _
                                   " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| """ & _
                                   modGlobals.STR_KIND_ERROR & _
                                   """. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", _
                                   vbExclamation + vbYesNo, modGlobals.STR_MSGBOX_WARNING_TITLE)
    End If
    vbQuestion_Continue_Validation = VB_BREAK_VALIDATION
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    If modGlobals.glngCriticalImpactWarningsCounter > 5 * LNG_NUMBER_OF_CRITICAL_MESSAGES Then
      MsgBox "|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & _
             5 * LNG_NUMBER_OF_CRITICAL_MESSAGES & _
             " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| """ & _
             modGlobals.STR_KIND_ERROR & _
             """. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", _
             vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
      vbQuestion_Continue_Validation = vbNo
      
      Set wsCheckSheet = wbBook.Worksheets(gstrCheckSheetName)

      modServiceModule.UNPROTECT_SHEET wsCheckSheet
    
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| > 5 * LNG_NUMBER_OF_CRITICAL_MESSAGES
      If wsCheckSheet.UsedRange.Rows.Count > 5 * LNG_NUMBER_OF_CRITICAL_MESSAGES Then
        Set rngRange = wsCheckSheet.Range(wsCheckSheet.cells(5 * LNG_NUMBER_OF_CRITICAL_MESSAGES, 5), _
                                          wsCheckSheet.cells(wsCheckSheet.UsedRange.Rows.Count, 9))
        modGlobals.LNG_NUM_ROW_PROV = modGlobals.LNG_NUM_ROW_PROV - rngRange.Rows.Count
        rngRange.EntireRow.Delete
      End If

      
    End If
  End If
  
End Function

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Perform_Validation(ByVal wbBook As Workbook)
  
  On Error GoTo ErrHandler
  
  Dim wsCheckSheet As Worksheet
  Dim rngCell As Range
  
  ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not (modServiceModule.SheetExists(gstrCheckSheetName, wbBook)) Then
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|? |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) ;)
    modServiceModule.CreateCheckSheet wbBook, gstrCheckSheetName
  End If
  
  wbBook.Application.ScreenUpdating = False
  
  Set wsCheckSheet = wbBook.Sheets(gstrCheckSheetName)
  
  wsCheckSheet.Activate
  
  modServiceModule.UNPROTECT_SHEET wsCheckSheet

  modGlobals.LNG_NUM_ROW_PROV = 11
  
  wsCheckSheet.AutoFilterMode = False
  
  Set rngCell = wsCheckSheet.Range(wsCheckSheet.Rows(modGlobals.LNG_NUM_ROW_PROV), _
                                   wsCheckSheet.Rows(wsCheckSheet.UsedRange.Rows.Count + modGlobals.LNG_NUM_ROW_PROV))
  rngCell.Delete
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  wsCheckSheet.Range("E10:H10").Select
  With Selection
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlMedium
        .Borders(xlEdgeBottom).ColorIndex = 48
  End With
  
  wsCheckSheet.Range("E10:H10").AutoFilter

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  VB_BREAK_VALIDATION = vbIgnore

  modGlobals.glngCriticalImpactWarningsCounter = 0
  modGlobals.glngLowImpactWarningsCounter = 0

  wbBook.Application.Calculation = xlCalculationManual
  
  ' ================================================================================================================================
  If modProvGeneralProc.blnCheckIfSheet(wsCheckSheet) Then
    
      If Len(Trim(wbBook.Names("strPublication").RefersToRange.cells(1, 1).value)) = 0 Then
        blnCheckHyperlinks = False
      Else
        If modScrolling.blnIs_UserForm_Loaded("frmValidationHyperlink") = True Then
          Unload frmValidationHyperlink
        End If
        frmValidationHyperlink.Show vbModal
      End If
   
      If modScrolling.blnIs_UserForm_Loaded("frmValidationInProgress") = True Then
        Unload frmValidationInProgress
      End If
      frmValidationInProgress.Show
      DoEvents
 
      modGlobals.BLN_WARNINGS_FOUND = False
    
      modCommonProv.WarningsBeforeSavingForTitle wbBook.Worksheets(gstrMainSheetName), wsCheckSheet
    
      frmValidationInProgress.Mark_Next_Validation modGlobals.BLN_WARNINGS_FOUND
    
      modGlobals.BLN_WARNINGS_FOUND = False
    
      modCommonProv.WarningsBeforeSavingForEtcSheets wsCheckSheet
    
      frmValidationInProgress.Mark_Next_Validation modGlobals.BLN_WARNINGS_FOUND
    
      modGlobals.BLN_WARNINGS_FOUND = False
      
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      modCommonProv.WarningsBeforeSavingForHyperlinks wbBook.Worksheets(gstrHyperlinkSheetName), wsCheckSheet
    
      frmValidationInProgress.Mark_Next_Validation modGlobals.BLN_WARNINGS_FOUND
    
  End If
  ' ================================================================================================================================
  
  DoEvents
  
  If vbNo = vbQuestion_Continue_Validation(wbBook) Then
    GoTo TooMuchErrorWarnings
  End If

  wbBook.Application.ScreenUpdating = True

  GoTo CleanUp

ErrHandler:
  modProvGeneralProc.Add_Hyperlink wsCheckSheet, wsCheckSheet.cells(1, 1), Nothing, _
                                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Err.Description, modGlobals.STR_KIND_ERROR
  MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Err.Description, vbOKOnly + vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  GoTo CleanUp
TooMuchErrorWarnings:
  modProvGeneralProc.Add_Hyperlink wsCheckSheet, wsCheckSheet.cells(1, 1), Nothing, _
                                   "|fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| <" & modGlobals.STR_KIND_ERROR & _
                                   "> |fffd||fffd||fffd||fffd||fffd| " & LNG_NUMBER_OF_CRITICAL_MESSAGES & _
                                   ". |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", modGlobals.STR_KIND_ERROR
  GoTo CleanUp
CleanUp:
  wbBook.Application.ScreenUpdating = True
  wbBook.Application.Calculation = xlCalculationAutomatic
  If Not wsCheckSheet Is Nothing Then
    modServiceModule.PROTECT_SHEET wsCheckSheet, True, , True
  End If
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub WarningsBeforeSavingForTitle(wsSheet As Worksheet, wsCheckSheet As Worksheet)
        
  Dim intCounter As Integer
  
  Dim rngRange As Range
  Dim rngCell As Range
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If Len(Trim(modServiceModule.strCheckNamesRange(wsCheckSheet.parent))) <> 0 Then
    modProvGeneralProc.Add_Hyperlink wsCheckSheet, wsCheckSheet.Range("A1"), Nothing, _
                                      "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'!", modGlobals.STR_KIND_ERROR
    
    GoTo CleanUp
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set rngRange = Union(wsSheet.Range("region_name"), wsSheet.Range("strPublication"), _
                       wsSheet.Range("godStart"), wsSheet.Range("godEnd"), _
                       wsSheet.Range("fil_flag"), _
                       wsSheet.Range("NDS"), wsSheet.Range("flag_ipr"), _
                       wsSheet.Range("mr_check"), wsSheet.Range("mo_check"), _
                       wsSheet.Range("oktmo_check"), wsSheet.Range("details_of_org_address"), _
                       wsSheet.Range("details_of_org_main"), wsSheet.Range("details_of_org_buhg"), _
                       wsSheet.Range("details_of_org_etc"))

  Select Case wsCheckSheet.parent.Names("TSphere_trans").RefersToRange.cells(1, 1).value
    Case "WARM"
      Set rngRange = Union(rngRange, wsSheet.Range("description_SKI"), _
                                     wsSheet.Range("SKI"), _
                                     wsSheet.Range("checkProizv"), _
                                     wsSheet.Range("checkPeredacha"), _
                                     wsSheet.Range("checkSbyt"), _
                                     wsSheet.Range("unitWARM"), _
                                     wsSheet.Range("flag_two_part_tariff"), _
                                     wsSheet.Range("flag_cross_subsidization"))
    Case "GVS"
      Set rngRange = Union(rngRange, wsSheet.Range("description_SKI"), _
                                     wsSheet.Range("SKI"), _
                                     wsSheet.Range("flag_two_part_tariff"), _
                                     wsSheet.Range("flag_cross_subsidization"))
      If wsSheet.Range("flag_two_part_tariff").value = "|fffd||fffd|" Then
        Set rngRange = Union(rngRange, wsSheet.Range("unitGVS"))
      End If
    Case "HVS"
      Set rngRange = Union(rngRange, wsSheet.Range("description_SKI"), _
                                     wsSheet.Range("SKI"), _
                                     wsSheet.Range("main_kinds_of_goods"), _
                                     wsSheet.Range("flag_two_part_tariff"), _
                                     wsSheet.Range("flag_cross_subsidization"))
      If wsSheet.Range("etc_kind_of_goods").value = "|fffd||fffd|" Then
        Set rngRange = Union(rngRange, wsSheet.Range("comment_kind_of_goods"))
      End If
    Case "VO"
      Set rngRange = Union(rngRange, wsSheet.Range("description_SKI"), _
                                     wsSheet.Range("SKI"), _
                                     wsSheet.Range("flag_two_part_tariff"), _
                                     wsSheet.Range("flag_cross_subsidization"))
  End Select


  For Each rngCell In rngRange.cells
    If (Len(rngCell.cells(1, 1).value) = 0) And _
        InStr(rngCell.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 0 And _
        InStr(rngCell.cells(1, 1).Offset(0, -1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 0 And _
        InStr(rngCell.cells(1, 1).Offset(0, -2).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 0 And _
        rngCell.cells(1, 1).Address = rngCell.cells(1, 1).MergeArea.cells(1, 1).Address Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| /|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd|/
          
          modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngCell, Nothing, _
                                           "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'!", modGlobals.STR_KIND_ERROR
    End If
  Next rngCell
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set rngRange = wsSheet.Range("org")
  For Each rngCell In rngRange.cells
    If Len(rngCell.cells(1, 1).value) = 0 Then  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngCell, Nothing, _
                                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", modGlobals.STR_KIND_ERROR
    End If
  Next rngCell
    
    
  ' |fffd||fffd||fffd|
  Set rngRange = wsSheet.Range("fil")
  For Each rngCell In rngRange.cells
    If (Len(rngCell.cells(1, 1).value) = 0) And wsSheet.Range("fil_flag").cells(1, 1).value = "|fffd||fffd|" Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngCell, Nothing, _
                                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", modGlobals.STR_KIND_ERROR
      End If
  Next rngCell
  
  ' |fffd||fffd||fffd|
  Set rngRange = wsSheet.Range("inn")
  For Each rngCell In rngRange.cells
    If Len(rngCell.cells(1, 1).value) = 0 Then                                                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngCell, Nothing, _
                                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", modGlobals.STR_KIND_ERROR
    ElseIf Len(modClassifierValidate.strValidate_INN_OnSheet(rngCell.cells(1, 1))) > 0 Then   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngCell, Nothing, _
                                       "|fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", modGlobals.STR_KIND_ERROR
    End If
  Next rngCell

  ' |fffd||fffd||fffd|
  Set rngRange = wsSheet.Range("kpp")
  For Each rngCell In rngRange.cells
    If Len(rngCell.cells(1, 1).value) = 0 Then                                                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngCell, Nothing, _
                                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", modGlobals.STR_KIND_ERROR
    ElseIf Len(modClassifierValidate.strValidate_KPP_OnSheet(rngCell.cells(1, 1))) > 0 Then   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngCell, Nothing, _
                                       "|fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", modGlobals.STR_KIND_ERROR
      End If
  Next rngCell
    
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set rngRange = wsSheet.Range("activity")
  For Each rngCell In rngRange.cells
    If Len(rngCell.cells(1, 1).value) = 0 Then  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngCell, Nothing, _
                                       "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", modGlobals.STR_KIND_ERROR
    End If
  Next rngCell

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set rngRange = wsSheet.Range("flag_publication")
  If Application.CountA(wsSheet.Range("flag_publication").cells) = 0 Then  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
       modProvGeneralProc.Add_Hyperlink wsCheckSheet, wsSheet.Range("flag_publication"), Nothing, _
                                        "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'!", modGlobals.STR_KIND_ERROR
  Else '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Len(Trim(rngRange.cells(1, 1).value)) = 0 And _
       InStr(1, wsSheet.Range("strPublication").cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd|") = 0 Then
       modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngRange.cells(1, 1), Nothing, _
                                        "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: '" & rngRange.cells(1, 1).Offset(0, -1).value & "' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'!", modGlobals.STR_KIND_WARNING
    End If
    If Len(Trim(rngRange.cells(2, 1).value)) = 0 Then
       modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngRange.cells(2, 1), Nothing, _
                                        "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: '" & rngRange.cells(2, 1).Offset(0, -1).value & "' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'!", modGlobals.STR_KIND_WARNING
    End If
    If LCase(wsCheckSheet.parent.Names("region_name").RefersToRange.cells(1, 1).value) = strRegion_4_78 Then
      If Len(Trim(rngRange.cells(3, 1).value)) = 0 Then
         modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngRange.cells(3, 1), Nothing, _
                                          "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: '" & rngRange.cells(3, 1).Offset(0, -1).value & "' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'!", modGlobals.STR_KIND_WARNING
      End If
    End If
  End If

CleanUp:

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub WarningsBeforeSavingForEtcSheets(wsCheckSheet As Worksheet)
        
  Dim intCounter As Integer
  Dim intCounterTwo As Integer
  
  Dim rngRange As Range
  Dim rngCell As Range
  
  Dim wbBook As Workbook
  Dim wsTempSheet As Worksheet
  
  Dim strKindError As String
  
  Dim ISect
  Dim ISectDop
  
  Set wbBook = Application.ThisWorkbook
    
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  For intCounter = 1 To 3
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbBook, "checkCell_" & intCounter) Then
      Set rngRange = wbBook.Names("checkCell_" & intCounter).RefersToRange
      Set wsTempSheet = rngRange.parent
      wsTempSheet.Activate
      If wsTempSheet.Visible = xlSheetVisible Then
        For Each rngCell In rngRange.cells
          If rngCell.cells(1, 1).Address = rngCell.MergeArea.cells(1, 1).Address And _
             Len(Trim(rngCell.cells(1, 1).value)) = 0 Then                                      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
               If rngCell.cells(1, 1).Interior.ColorIndex = colorCyan Then
                   modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngCell, Nothing, _
                                                    "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsTempSheet.name & "'!", modGlobals.STR_KIND_ERROR
               ElseIf rngCell.cells(1, 1).Interior.ColorIndex = colorLightBlue Then
                    
                    If intCounter = 1 Then
                       If Not (Application.Intersect(rngCell.cells(1, 1), wsTempSheet.Range("periodPrice")) Is Nothing) Then
                         strKindError = modGlobals.STR_KIND_WARNING
                       Else
                         strKindError = modGlobals.STR_KIND_ERROR
                       End If
                    ElseIf intCounter = 2 Then
                       If Not (Application.Intersect(rngCell.cells(1, 1), wsTempSheet.Range("periodPriceTwo")) Is Nothing) Then
                         strKindError = modGlobals.STR_KIND_WARNING
                       Else
                         strKindError = modGlobals.STR_KIND_ERROR
                       End If
                    Else
                      If rngCell.cells(1, 1).Offset(0, -2).Interior.ColorIndex = colorCyan Then
                        strKindError = modGlobals.STR_KIND_ERROR
                      Else
                        strKindError = modGlobals.STR_KIND_WARNING
                      End If
                    End If
                    modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngCell, Nothing, _
                                                     "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsTempSheet.name & "'!", strKindError
               ElseIf rngCell.cells(1, 1).Interior.ColorIndex = colorYellow Then
                     modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngCell, Nothing, _
                                                    "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsTempSheet.name & "'!", modGlobals.STR_KIND_WARNING
               End If
          End If
        
        Next rngCell
      End If
    End If
  Next intCounter
    
End Sub

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub WarningsBeforeSavingForHyperlinks(wsSheet As Worksheet, wsCheckSheet As Worksheet)
        
  Dim intCounter As Integer
  
  Dim rngRange As Range
  Dim rngCell As Range
  
  Dim strCodeError As String
  
  If blnCheckHyperlinks = False And _
     Len(Trim(ThisWorkbook.Names("strPublication").RefersToRange.cells(1, 1).value)) <> 0 Then
       modProvGeneralProc.Add_Hyperlink wsCheckSheet, ThisWorkbook.Worksheets(gstrHyperlinkSheetName).Range("Website_address_internet"), Nothing, _
                                        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ('|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|') |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & gstrHyperlinkSheetName & "' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd|.|fffd|. |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", modGlobals.STR_KIND_WARNING
    GoTo CleanUp
  End If
  
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If modInternetConnectionState.blnIsOnLine = True Then
  
    Set rngRange = wsSheet.Range("Website_address_internet")
  
    For Each rngCell In rngRange.cells
      If (Len(Trim(rngCell.cells(1, 1).value)) <> 0) And _
          rngCell.value <> "x" Then
        strCodeError = modServiceModule.strHypperlinkExists(rngCell.value)
        If strCodeError = "401" Then
          modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngCell, Nothing, _
                                           "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", modGlobals.STR_KIND_WARNING
        ElseIf strCodeError <> "0" And _
                InStr(1, LCase(rngCell.value), "ftp://") = 1 Then
          modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngCell, Nothing, _
                                           "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'!", modGlobals.STR_KIND_WARNING
        ElseIf strCodeError <> "200" And _
               InStr(1, LCase(rngCell.value), "ftp://") = 0 Then
          modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngCell, Nothing, _
                                           "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "'!", modGlobals.STR_KIND_WARNING
        End If
      End If
    Next rngCell
  Else
    modProvGeneralProc.Add_Hyperlink wsCheckSheet, wsSheet.Range("Website_address_internet"), Nothing, _
                                     "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & wsSheet.name & "' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", modGlobals.STR_KIND_WARNING
  End If
    
CleanUp:

End Sub

Attribute VB_Name = "modDblClick"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Base 1
Option Explicit

Public Sub Worksheet_Before_Double_Click_Handler(ByVal Target As Range, ByRef Cancel As Boolean)

  On Error GoTo ErrHandler
  
  Dim wsSheet As Worksheet
  
  Application.ScreenUpdating = False
  
  If Target Is Nothing Or _
     modServiceModule.IsNameExists(ThisWorkbook, "Date_of_posting_inf") = False Or _
     modServiceModule.IsNameExists(ThisWorkbook, "Date_of_publication") = False Then GoTo ErrHandler

  Set wsSheet = Target.parent
  
  If Target.cells(1, 1).Interior.ColorIndex = colorLightBlue And _
     (Target.cells(1, 1).Column = wsSheet.Range("Date_of_posting_inf").Column Or _
      Target.cells(1, 1).Column = wsSheet.Range("Date_of_publication").Column) Then
    Cancel = True
    frmDateChoose.Show vbModal
    modServiceModule.UNPROTECT_SHEET wsSheet
    
    Target.cells(1, 1).value = modGlobals.STR_SELECT_DATE
    
    If CDate(modGlobals.STR_SELECT_DATE) > Date Then
      MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|!", _
             vbCritical, _
             STR_MSGBOX_WARNING_TITLE
      Target.cells(1, 1).ClearContents
    End If
      
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo CleanUp
  End If

  GoTo CleanUp
  
ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:
  Application.ScreenUpdating = True
  
End Sub

Attribute VB_Name = "modDocProperties"
Option Explicit
'**************************************************************************************
'
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'**************************************************************************************

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'DocProp_Version - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'DocProp_TemplateCode - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub CheckDocProperites(wbBook As Workbook)
  If GetDocumentProperty(wbBook, "Version") = "" Or _
        GetDocumentProperty(wbBook, "CurrentVersion") = "" Or _
        GetDocumentProperty(wbBook, "Status") = "" Then
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    SetRequiredCustomDocumentProperties wbBook
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbBook, "DocProp_Version") Then
      SetDocumentProperty wbBook, "CurrentVersion", ThisWorkbook.Names("DocProp_Version").RefersToRange.value
    End If
    If modServiceModule.IsNameExists(wbBook, "DocProp_TemplateCode") Then
      SetDocumentProperty wbBook, "Version", ThisWorkbook.Names("DocProp_TemplateCode").RefersToRange.value
    End If
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", vbInformation
  Else
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbBook, "DocProp_Version") Then
      ThisWorkbook.Names("DocProp_Version").RefersToRange.value = GetDocumentProperty(wbBook, "CurrentVersion")
    End If
    If modServiceModule.IsNameExists(wbBook, "DocProp_TemplateCode") Then
      ThisWorkbook.Names("DocProp_TemplateCode").RefersToRange.value = GetDocumentProperty(wbBook, "Version")
    End If
  End If
  
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SetRequiredCustomDocumentProperties(ByVal wbBook As Workbook)
  If Len(GetDocumentProperty(wbBook, "Version")) = 0 Then
    SetDocumentProperty wbBook, "Version", ""
  End If
  
  If Len(GetDocumentProperty(wbBook, "CurrentVersion")) = 0 Then
    SetDocumentProperty wbBook, "Version", ""
  End If
  
  If Len(GetDocumentProperty(wbBook, "Status")) = 0 Then
    SetDocumentProperty wbBook, "Status", "1"
  End If
  
  If Len(GetDocumentProperty(wbBook, "XsltDocFilePath")) = 0 Then
    SetDocumentProperty wbBook, "XsltDocFilePath", ""
  End If
  
  If Len(GetDocumentProperty(wbBook, "XslViewFilePath")) = 0 Then
    SetDocumentProperty wbBook, "XslViewFilePath", ""
  End If
  
  If Len(GetDocumentProperty(wbBook, "RootDocFilePath")) = 0 Then
    SetDocumentProperty wbBook, "RootDocFilePath", ""
  End If
  
  If Len(GetDocumentProperty(wbBook, "HtmlTempFilePath")) = 0 Then
    SetDocumentProperty wbBook, "HtmlTempFilePath", ""
  End If
  
  If Len(GetDocumentProperty(wbBook, "XMLTempFilePath")) = 0 Then
    SetDocumentProperty wbBook, "XMLTempFilePath", ""
  End If
  
  If Len(GetDocumentProperty(wbBook, "Keywords")) = 0 Then
    SetDocumentProperty wbBook, "Keywords", ""
  End If
  
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function GetDocumentProperty(wbBook As Workbook, name As String) As Variant
    On Error GoTo ErrHandler

    If name = "Title" Or name = "Subject" Or name = "Company" Or name = "Comments" Then
        GetDocumentProperty = wbBook.BuiltinDocumentProperties(name).value
    Else
        GetDocumentProperty = wbBook.CustomDocumentProperties(name).value
    End If

    Exit Function

ErrHandler:
    GetDocumentProperty = ""
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SetDocumentProperty(wbBook As Workbook, name As String, value As Variant)
    On Error GoTo ErrHandler

    If name = "Title" Or name = "Subject" Or name = "Company" Or name = "Comments" Then
         wbBook.BuiltinDocumentProperties(name).value = value
    Else
         wbBook.CustomDocumentProperties(name).value = value
    End If

    Exit Sub

ErrHandler:
    If Err.Number = 5 Then
        Err.Clear
        
        On Error GoTo ErrHandler2
        
        If VarType(value) = vbBoolean Then
             wbBook.CustomDocumentProperties.Add name:=name, LinkToContent:=False, Type:=msoPropertyTypeBoolean, value:=value
        ElseIf VarType(value) = vbDate Then
             wbBook.CustomDocumentProperties.Add name:=name, LinkToContent:=False, Type:=msoPropertyTypeDate, value:=value
        ElseIf VarType(value) = vbDecimal Or VarType(value) = vbInteger Or VarType(value) = vbLong Then
             wbBook.CustomDocumentProperties.Add name:=name, LinkToContent:=False, Type:=msoPropertyTypeNumber, value:=value
        ElseIf VarType(value) = vbDouble Or VarType(value) = vbSingle Then
             wbBook.CustomDocumentProperties.Add name:=name, LinkToContent:=False, Type:=msoPropertyTypeFloat, value:=value
        ElseIf VarType(value) = vbNull Then
        Else
             wbBook.CustomDocumentProperties.Add name:=name, LinkToContent:=False, Type:=msoPropertyTypeString, value:=CStr(value)
        End If
    Else
ErrHandler2:
        MsgBox Err.Description, vbExclamation + vbOKOnly, Err.Source
    End If
End Sub

Attribute VB_Name = "modGlobals"
Option Explicit

Public frmProgressForm As IProgressBar

Public Const STR_REESTR_ORG_SHEET_NAME As String = "REESTR_ORG"
Public Const STR_REESTR_FILTERED_SHEET_NAME As String = "REESTR_FILTERED"
Public Const STR_REESTR_MO_SHEET_NAME As String = "REESTR_MO"
Public Const STR_REGION_IMAGE_COORDINATES_SHEET_NAME As String = "Region_Image_Coordinates"

Public Const STR_REESTR_SHEET_NAME As String = STR_REESTR_ORG_SHEET_NAME
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Global STR_RANGE_NAME As String
Global LNG_AS_ACTIVITY_SPHERE As Long

Public Const STR_CMD_BUTTON_UPDATE_IS_IN_PROGRESS_CAPTION As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."

Global glngLowImpactWarningsCounter As Long
Global glngCriticalImpactWarningsCounter As Long

Public Const STR_MSGBOX_INFORMATION_TITLE As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const STR_MSGBOX_WARNING_TITLE As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

Global STR_SELECT_DATE As String

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd|
Public Const gstrMainSheetName As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const gstrInstructionSheetName As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const gstrInformationSheetName As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const gstrCommentsSheetName As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const gstrCheckSheetName As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const gstrEtUnionSheetName As String = "et_union"
Public Const gstrTehSheetName As String = "TEHSHEET"
Public Const gstrHyperlinkSheetName As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const gstrListSheet As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"


Public Const colorCyan As Integer = 34
Public Const colorYellow As Integer = 36
Public Const colorGreen As Integer = 35
Public Const colorWhite As Integer = 2
Public Const colorRed As Integer = 3
Public Const colorGrey As Integer = 15
Public Const colorLightBlue As Integer = 37
Public Const colorLightBrown As Integer = 40
Public Const colorPink As Integer = 38
Public Const colorPaleBlue As Integer = 24
Public Const colorGrey80 As Integer = 56  '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 80%
Public Const colorBrightCyan As Integer = 5

Public Const gPASSWORD As String = "aq1sw2de3"

Public ws As Worksheet
Public WB As Workbook

Public blnPressedButtonInForm As Boolean        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| /true/
                                                ' |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public intNumberRow As Integer                  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public intNumberColumn As Integer               ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Const strExceptionsRegionOne As String = "|fffd|.|fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"             ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const strExceptionsRegionTwo As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"            ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const strExceptionsRegionThree As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"     ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const strExceptionsRegionFour As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const strExceptionsRegionFive As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const strExceptionsRegionSix As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"                 ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const strExceptionsRegionSeven As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const strExceptionsRegionEight As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"           ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const strExceptionsRegionNine As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"               ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|


Public Const STR_KIND_ERROR As String = "|fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const STR_KIND_WARNING As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const gblnTestMode = False   ' True

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Global intDay As Integer                ' |fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/
Global intMonth As Integer              ' |fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/
Global intYear As Integer               ' |fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/
Global intX As Integer                  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/
Global intY As Integer                  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/
Global blnCalendarChange As Boolean     ' True - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Global STR_NAME_SOURCE As String

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Global STR_KIND_OF_COOLANT As String


' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public blnHelpReferenceFormIsInitialized As Boolean

Public LNG_NUM_ROW_PROV As Long

Type ProvType
  Index As String
  r As Range
End Type

Global BLN_WARNINGS_FOUND As Boolean
Attribute VB_Name = "modHTTPGlobals"
Option Explicit

Public Const STR_UPDATE_FAILED As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd|. |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|', |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)!"
Public Const STR_UPDATE_SUCCESS As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
Public Const STR_INET_CONNECTION_IS_OFFLINE As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd| DNS, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Const STR_HTTP_REQUEST_BASE_URL_1 As String = "https://tariff.eias.ru/procwsxls/"
Public Const STR_HTTP_REQUEST_BASE_URL_2 As String = "https://appsrv02.eias.ru/procwsxls/"
Public Const STR_HTTP_REQUEST_BASE_URL_3 As String = "https://appsrv01.eias.ru/procwsxls/" ' TBD
Public Const STR_HTTP_REQUEST_BASE_URL_4 As String = "https://eias.fstrf.ru/procwsxls/"    ' TBD

Public STR_HTTP_REQUEST_PROC_BAL_NAME As String
Public Const STR_HTTP_REQUEST_PROC_BAL_PARAM_1 As String = "p_NSRF="

Public Const STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_NAME As String = "MO_REESTR?"
Public Const STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_PARAM_1 As String = "p_NSRF="
Public Const STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_PARAM_2 As String = "p_TC="

Public Const STR_HTTP_REQUEST_PROC_ORG_NAME As String = "ORG_REESTR?"
Public Const STR_HTTP_REQUEST_PROC_ORG_PARAM_1 As String = "p_NSRF="
Public Const STR_HTTP_REQUEST_PROC_ORG_PARAM_2 As String = "p_AS="
Public Const STR_HTTP_REQUEST_PROC_ORG_PARAM_3 As String = "p_VDET="
Public Const STR_HTTP_REQUEST_PROC_ORG_PARAM_4 As String = "p_TC="

Public Const STR_HTTP_REQUEST_PROC_ORG_EE_NAME As String = "ORG_EE_REESTR?"
Public Const STR_HTTP_REQUEST_PROC_ORG_EE_PARAM_1 As String = "p_NSRF="
Public Const STR_HTTP_REQUEST_PROC_ORG_EE_PARAM_2 As String = "p_VDET="
Public Const STR_HTTP_REQUEST_PROC_ORG_EE_PARAM_3 As String = "p_TC="

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const STR_HTTP_REQUEST_PROC_GET_UPDATE_INFO_NAME As String = "GET_UPDATE_INFO?"
Public Const STR_HTTP_REQUEST_PROC_GET_UPDATE_INFO_PARAM_1 As String = "p_TC="

Public Const STR_HTTP_REQUEST_PROC_GET_UPDATE_NAME As String = "GET_UPDATE?"
Public Const STR_HTTP_REQUEST_PROC_GET_UPDATE_PARAM_1 As String = "p_TC="
Public Const STR_HTTP_REQUEST_PROC_GET_UPDATE_PARAM_2 As String = "p_V="

Public Const STR_HTTP_REQUEST_PROC_GET_SHEET_NAMES_NAME As String = "GET_SHEET_NAMES?"
Public Const STR_HTTP_REQUEST_PROC_GET_SHEET_NAMES_PARAM_1 As String = "p_TC="
Public Const STR_HTTP_REQUEST_PROC_GET_SHEET_NAMES_PARAM_2 As String = "p_V="




Attribute VB_Name = "modHTTPServerCaller"
Option Explicit
Option Base 1

Public Enum ActivitySphere
  asWARM = 0               ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  asVS = 1                 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  asVO = 2                 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  asTBO = 3                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
  asWARMVS = 4             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| + |fffd||fffd|
  asWARMEE = 5             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| + |fffd||fffd|
  asEE = 6                 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  asALL = 7                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| + |fffd||fffd| + |fffd||fffd||fffd| + |fffd||fffd|
  asWARMTR = 8             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  asWARMTRANSFER = 9       ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|"
  asVSVO = 10              ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| + |fffd||fffd|
  asHOTVS = 11             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
  asNone = 100
End Enum

Public Const STR_WARM_RANGE_NAME As String = "LIST_ORG_WARM"
Public Const STR_VS_RANGE_NAME As String = "LIST_ORG_VS"
Public Const STR_VO_RANGE_NAME As String = "LIST_ORG_VO"
Public Const STR_TBO_RANGE_NAME As String = "LIST_ORG_TBO"
Public Const STR_WARM_VS_RANGE_NAME As String = "LIST_ORG_WARM_VS"
Public Const STR_WARM_EE_RANGE_NAME As String = "LIST_ORG_WARM_EE"
Public Const STR_EE_RANGE_NAME As String = "LIST_ORG_EE"
Public Const STR_ALL_RANGE_NAME As String = "LIST_ORG_ALL"
Public Const STR_WARM_TR_RANGE_NAME As String = "LIST_ORG_WARM_TR"
Public Const STR_WARM_TRANSFER_RANGE_NAME As String = "LIST_ORG_WARM_TRANSFER"
Public Const STR_VS_VO_RANGE_NAME As String = "LIST_ORG_VS_VO"
Public Const STR_HOT_VS_RANGE_NAME As String = "LIST_ORG_HOT_VS"

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function Update_Organization_List(ByVal strSheetName As String, _
                                         ByVal strRegionName As String, _
                                         Optional ByVal asActivitySphere As ActivitySphere = asNone, _
                                         Optional ByVal wbBook As Workbook = Nothing, _
                                         Optional ByVal strRangeLocal As String = "A2") As String

  On Error GoTo ErrHandler

  If wbBook Is Nothing Then
    Set wbBook = ThisWorkbook
  End If

  If Len(strRegionName) = 0 Or _
     Len(strRangeLocal) = 0 Or _
     Len(strSheetName) = 0 Then
    GoTo ErrHandler
  End If

  Dim wsSheet As Worksheet
  Dim rngRange As Range
  Dim strXML_DataTagNames() As String
  Dim lngICounter As Long
  Dim strActivitySphere As String
  Dim strRangeName As String

  Select Case asActivitySphere
    Case asWARM:
      strActivitySphere = "WARM"
      strRangeName = STR_WARM_RANGE_NAME
    Case asVS:
      strActivitySphere = "VS"
      strRangeName = STR_VS_RANGE_NAME
    Case asVO:
      strActivitySphere = "VO"
      strRangeName = STR_VO_RANGE_NAME
    Case asTBO:
      strActivitySphere = "TBO"
      strRangeName = STR_TBO_RANGE_NAME
    Case asWARMVS:
      strActivitySphere = "WARM_VS"
      strRangeName = STR_WARM_VS_RANGE_NAME
    Case asWARMEE:
      strActivitySphere = "WARM_EE"
      strRangeName = STR_WARM_EE_RANGE_NAME
    Case asEE:
      strActivitySphere = "EE"
      strRangeName = STR_EE_RANGE_NAME
    Case asALL:
      strActivitySphere = "ALL"
      strRangeName = STR_ALL_RANGE_NAME
    Case asWARMTR:
      strActivitySphere = "WARM_TR"
      strRangeName = STR_WARM_TR_RANGE_NAME
    Case asWARMTRANSFER:
      strActivitySphere = "WARM_TRANSFER"
      strRangeName = STR_WARM_TRANSFER_RANGE_NAME
    Case asVSVO:
      strActivitySphere = "VS_VO"
      strRangeName = STR_VS_VO_RANGE_NAME
    Case asHOTVS:
      strActivitySphere = "HOT_VS"
      strRangeName = STR_HOT_VS_RANGE_NAME
    Case Else:
      GoTo ErrHandler
  End Select

  If modServiceModule.IsNameExists(wbBook, "XML_ORG_LIST_TAG_NAMES") = False Then
    Update_Organization_List = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    GoTo CleanUp
  End If

  Set rngRange = wbBook.Names("XML_ORG_LIST_TAG_NAMES").RefersToRange
  ReDim strXML_DataTagNames(rngRange.cells.Count)
  For lngICounter = 1 To rngRange.cells.Count
    strXML_DataTagNames(lngICounter) = rngRange.cells(lngICounter, 1).value
  Next lngICounter

  Set wsSheet = wbBook.Worksheets(strSheetName)
  Set rngRange = wsSheet.Range(strRangeLocal)

  Update_Organization_List = modInvokeHTTPServer.strQuery_Org_List(wsSheet, _
                                                                   rngRange, _
                                                                   strRegionName, _
                                                                   strActivitySphere, _
                                                                   "ALL", _
                                                                   strXML_DataTagNames, _
                                                                   strRangeName)
  GoTo CleanUp

ErrHandler:
  Update_Organization_List = STR_UPDATE_FAILED
  GoTo CleanUp
CleanUp:

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|/|fffd||fffd||fffd||fffd||fffd|
Public Function Update_MRMO_List(ByVal strSheetName As String, _
                                 ByVal strRegionName As String, _
                                 Optional ByVal wbBook As Workbook = Nothing, _
                                 Optional ByVal strRangeLocal As String = "A2")

  On Error GoTo ErrHandler

  If wbBook Is Nothing Then
    Set wbBook = ThisWorkbook
  End If

  If Len(strRegionName) = 0 Or _
     Len(strRangeLocal) = 0 Or _
     Len(strSheetName) = 0 Then
    GoTo ErrHandler
  End If

  Dim wsSheet As Worksheet
  Dim rngRange As Range
  Dim strXML_DataTagNames() As String
  Dim lngICounter As Long
  Dim strRangeName As String

  If modServiceModule.IsNameExists(wbBook, "XML_MR_MO_OKTMO_LIST_TAG_NAMES") = False Then
    Update_MRMO_List = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    GoTo CleanUp
  End If

  Set rngRange = wbBook.Names("XML_MR_MO_OKTMO_LIST_TAG_NAMES").RefersToRange
  ReDim strXML_DataTagNames(rngRange.cells.Count)
  For lngICounter = 1 To rngRange.cells.Count
    strXML_DataTagNames(lngICounter) = rngRange.cells(lngICounter, 1).value
  Next lngICounter

  strRangeName = "LIST_MR_MO_OKTMO"

  Set wsSheet = wbBook.Worksheets(strSheetName)
  Set rngRange = wsSheet.Range(strRangeLocal)

  Update_MRMO_List = modInvokeHTTPServer.strQuery_MR_MO_OKTMO_List(wsSheet, _
                                                                   rngRange, _
                                                                   strRegionName, _
                                                                   strXML_DataTagNames, _
                                                                   strRangeName)
  GoTo CleanUp

ErrHandler:
  Update_MRMO_List = STR_UPDATE_FAILED
  GoTo CleanUp
CleanUp:

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| 2010 |fffd||fffd||fffd|
Public Function Update_PLAN10_Data(ByVal strSheetName As String, _
                                   ByVal strRegionName As String, _
                                   ByVal strRangeName As String, _
                                   Optional ByVal wbBook As Workbook = Nothing, _
                                   Optional ByVal strRangeLocal As String = "A2") As String

  On Error GoTo ErrHandler

  If wbBook Is Nothing Then
    Set wbBook = ThisWorkbook
  End If

  If Len(strRegionName) = 0 Or _
     Len(strRangeLocal) = 0 Or _
     Len(strSheetName) = 0 Then
    GoTo ErrHandler
  End If

  Dim wsSheet As Worksheet
  Dim rngRange As Range
  Dim strXML_DataTagNames() As String
  Dim lngICounter As Long

  If InStr(strRangeName, "VS") <> 0 Then
    If modServiceModule.IsNameExists(wbBook, "XML_PLAN10_TAG_NAMES") = False Then
      Update_PLAN10_Data = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
      GoTo CleanUp
    End If
    Set rngRange = wbBook.Names("XML_PLAN10_TAG_NAMES").RefersToRange
  Else
    If modServiceModule.IsNameExists(wbBook, "XML_PLAN10_TAG_NAMES_VO_TBO") = False Then
      Update_PLAN10_Data = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
      GoTo CleanUp
    End If
    Set rngRange = wbBook.Names("XML_PLAN10_TAG_NAMES_VO_TBO").RefersToRange
  End If

  ReDim strXML_DataTagNames(rngRange.cells.Count)
  For lngICounter = 1 To rngRange.cells.Count
    strXML_DataTagNames(lngICounter) = rngRange.cells(lngICounter, 1).value
  Next lngICounter

  Set wsSheet = wbBook.Worksheets(strSheetName)
  Set rngRange = wsSheet.Range(strRangeLocal)

  Update_PLAN10_Data = modInvokeHTTPServer.strQuery_Balance_Data(wsSheet, _
                                                                 rngRange, _
                                                                 strRegionName, _
                                                                 strXML_DataTagNames, _
                                                                 strRangeName)
  GoTo CleanUp

ErrHandler:
  Update_PLAN10_Data = STR_UPDATE_FAILED
  GoTo CleanUp
CleanUp:

End Function

Attribute VB_Name = "modHyperlink"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| False, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function blnPrimary_HL_Handler(ByVal Target As Range, _
                                       ByVal wsSheet As Worksheet) As Boolean

  On Error GoTo ErrHandler
  
  blnPrimary_HL_Handler = False
  
  If Target Is Nothing Then GoTo ErrHandler
  
  If Target.cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" Then
    blnPrimary_HL_Handler = True
    GoTo CleanUp
  End If

  GoTo CleanUp
  
ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp
CleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Sub ShapeDeleteHyperlink(ByVal Target As Range, _
                                Optional ByVal strTitle As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
  Dim wsSheet As Worksheet
  
  Set wsSheet = Target.parent
  
  Target.Select
  Selection.value = "|fffd|"
  wsSheet.Hyperlinks.Add Anchor:=Selection, Address:="", _
                         SubAddress:="'" & wsSheet.name & "'!" & Target.Address, _
                         ScreenTip:=strTitle, TextToDisplay:="|fffd|"
  With Selection
    .HorizontalAlignment = xlCenter
    .VerticalAlignment = xlCenter
    .WrapText = True
  End With
  With Selection.Font
      .name = "Wingdings"
      .Size = 17
      .Underline = xlNone
      .Bold = True
      .ColorIndex = colorBrightCyan
  End With
  
End Sub

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd|/ |fffd||fffd||fffd||fffd||fffd||fffd|
' Target - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' wsSheet - |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' strRangeName - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
Public Sub Worksheet_General_FollowHyperlink(ByVal Target As Range, _
                                             ByVal wsSheet As Worksheet, _
                                             ByVal strRangeName As String)
  
  On Error GoTo ErrHandler
  
  Dim intNumColumn As Integer
  Dim intNumRow As Integer
  
  Dim intDeleteColumnNumber As Integer  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strDeleteString As String         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim intRenumberColumnOffset As String ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                        ' (0, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
  
  If blnPrimary_HL_Handler(Target, wsSheet) = True Then GoTo CleanUp
  
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean
  
  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False
  
  intNumColumn = Target.cells(1, 1).Column
  intNumRow = Target.cells(1, 1).Row
  
  modServiceModule.UNPROTECT_SHEET wsSheet
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If InStr(Target.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") Then
    intDeleteColumnNumber = 4
    strDeleteString = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & Right(Target.cells(1, 1).value, Len(Target.cells(1, 1).value) - _
                      Len("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"))
    intRenumberColumnOffset = -1
    GoTo ProcessHyp
  ElseIf Target.cells(1, 1).value = "|fffd|" Then
    intDeleteColumnNumber = Target.Column
    strRangeName = ""
    strDeleteString = ""
    intRenumberColumnOffset = 1
    GoTo ProcessHyp
  End If
  
  GoTo WithOutProcessHyp
  
ProcessHyp:
  modHyperlink.ProcessHyperlink Target.cells(1, 1), strRangeName, _
                                intDeleteColumnNumber, strDeleteString, _
                                intRenumberColumnOffset
  
WithOutProcessHyp:
  modServiceModule.PROTECT_SHEET wsSheet, True
  
  GoTo CleanUp

ErrHandler:
  MsgBox Err.Description, vbOKOnly, wsSheet.name
  GoTo CleanUp
  
CleanUp:
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal
  Application.CutCopyMode = True
  If intNumRow > 0 And intNumColumn > 0 Then
    wsSheet.cells(intNumRow, intNumColumn).Select
  End If
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub ProcessHyperlink(ByVal rngTarget As Range, _
                            ByVal strRangeName As String, _
                            ByVal intDeleteColumnNumber As Integer, _
                            ByVal strDeleteString As String, _
                            ByVal intRenumberColumnOffset As Integer)
  
  If rngTarget Is Nothing Or _
     intDeleteColumnNumber = 0 Then GoTo e

  Dim rngTargetNRow As Integer
  Dim rngTargetNCol As Integer
  Dim wbThis As Workbook
  Dim wsRanges As Worksheet
  Dim wsActiveSheet As Worksheet
  Set wsActiveSheet = rngTarget.parent
  Set wbThis = wsActiveSheet.parent
  Set wsRanges = wbThis.Worksheets("et_union")
  
  rngTargetNRow = rngTarget.Row
  rngTargetNCol = rngTarget.Column
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) > 0 Then
  
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbThis, strRangeName) = False Then
      GoTo e
    End If
    If Len(strDeleteString) = 0 Then
      GoTo e
    End If
  
    wsRanges.Activate
    wsRanges.Range(strRangeName).Copy
    wsActiveSheet.Activate
    wsActiveSheet.cells(rngTargetNRow, 1).Select
    Selection.Insert Shift:=xlDown
    Application.CutCopyMode = False
    
    wsActiveSheet.cells(rngTargetNRow, intDeleteColumnNumber).Select
    modHyperlink.ShapeDeleteHyperlink wsActiveSheet.cells(rngTargetNRow, intDeleteColumnNumber), _
                                      strDeleteString
      
    rngTarget.Offset(0, intRenumberColumnOffset).Select
    Selection.Offset(-1, 0).Select
      
    modServiceModule.RENUMBER_ADD_CELLS Selection
    
    GoTo e
  
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) = 0 Then
    modServiceModule.RENUMBER_REMOVE_CELLS rngTarget.Offset(0, intRenumberColumnOffset).Column, _
                                           rngTarget.Offset(0, intRenumberColumnOffset).Row, _
                                           rngTarget.Offset(0, intRenumberColumnOffset).cells(1, 1), _
                                           rngTarget.parent
    rngTarget.Offset(0, intRenumberColumnOffset).Select
    Selection.EntireRow.Delete
    
    GoTo e
  
  End If
  
e:
End Sub

Attribute VB_Name = "modInfo"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Base 1
Option Explicit

Public sngHLblFormSheetReference As Single       ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| frmSheetReference


' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub MainSheetHelp()
  If modScrolling.blnIs_UserForm_Loaded("frmSheetReference") = True Then
    Unload frmSheetReference
  End If

  frmSheetReference.lblReference.caption = modInfo.strGet_Label_Caption( _
                                                   ThisWorkbook.ActiveSheet, _
                                                   Application.Caller)
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function strGet_Label_Caption(ByVal wsOwnerSheet As Worksheet, _
                                     ByVal strApplicationCaller As String) As String

  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim intNum As Integer         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim strNameRange As String    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  
  Set wbBook = wsOwnerSheet.parent

  If wsOwnerSheet.name = gstrMainSheetName Then
    
    intNum = CInt(Split(strApplicationCaller, "_")(1))
    
    Select Case intNum
    Case 1
      strNameRange = "InfStrPublication"
    Case 2
      strNameRange = "InfSourcePublicationOnTitle"
    Case 3
      strNameRange = "InfFlagTwoPartTariff"
    Case 4
      strNameRange = "InfPeriodInTitle"
    Case 5
      strNameRange = "InfFilFlagInTitle"
    Case 6
      strNameRange = "InfClickCmdOrganizationChoiceInTitle"
    Case 7
      strNameRange = "InfFlagCrossSubsidization"
    Case 8
      strNameRange = "InfClickCmdUpdateReestrMOInTitle"
    Case 9
      strNameRange = "InfoForMRInTitle"
    Case 10
      strNameRange = "InfoForMOInTitle"
    Case 11
      strNameRange = "InfSKIInTitle"
    Case 12
      strNameRange = "InfSKINumberInTitle"
    Case 13
      strNameRange = "InfKindsOfGoods"
    Case Else
      GoTo CleanUp
    End Select
    
  ElseIf InStr(1, wsOwnerSheet.name, "|fffd||fffd||fffd||fffd|") <> 0 Then
  
    strNameRange = "InfValidityInPrices"
  
  ElseIf wsOwnerSheet.name = gstrHyperlinkSheetName Then
    
    strNameRange = "InfAddressInHyperlinks"
  
  End If

  strGet_Label_Caption = wbBook.Worksheets("modInfo").Range(strNameRange).value
  sngHLblFormSheetReference = 12 * (wbBook.Names(strNameRange).RefersToRange.EntireRow.Height / wbBook.Worksheets("modInfo").StandardHeight)
  GoTo CleanUp

ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp
CleanUp:
End Function

Attribute VB_Name = "modInternetConnectionState"
Option Explicit

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Copyright |fffd|1996-2011 VBnet/Randy Birch, All Rights Reserved.
' Some pages may also contain other copyrights by the author.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Distribution: You can freely use this code in your own
'               applications, but you may not reproduce
'               or publish this code on any web site,
'               online service, or distribute as source
'               on any media without express permission.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

#If VBA7 And Win64 Then
  Private Declare PtrSafe Function InternetGetConnectedState Lib "wininet" _
          (ByRef dwFlags As Long, _
           ByVal dwReserved As Long) As Long
#Else
  Private Declare Function InternetGetConnectedState Lib "wininet" _
                                                     (ByRef dwFlags As Long, _
                                                      ByVal dwReserved As Long) As Long
#End If

' Local system uses a modem to connect to the Internet.
Private Const INTERNET_CONNECTION_MODEM As Long = &H1

' Local system uses a LAN to connect to the Internet.
Private Const INTERNET_CONNECTION_LAN As Long = &H2

' Local system uses a proxy server to connect to the Internet.
Private Const INTERNET_CONNECTION_PROXY As Long = &H4

' No longer used.
Private Const INTERNET_CONNECTION_MODEM_BUSY As Long = &H8

Private Const INTERNET_RAS_INSTALLED As Long = &H10
Private Const INTERNET_CONNECTION_OFFLINE As Long = &H20
Private Const INTERNET_CONNECTION_CONFIGURED As Long = &H40

Public Function blnIsOnLine() As Boolean
  If strGetNetConnectString = "Not connected to the internet now." Then
    blnIsOnLine = False
  Else
    blnIsOnLine = True
  End If
End Function

Private Function blnIsNetConnectViaLAN() As Boolean

  Dim dwFlags As Long

  ' pass an empty variable into which the API will
  ' return the flags associated with the connection
  Call InternetGetConnectedState(dwFlags, 0&)

  ' return True if the flags indicate a LAN connection
  blnIsNetConnectViaLAN = dwFlags And INTERNET_CONNECTION_LAN

End Function

Private Function blnIsNetConnectViaModem() As Boolean

  Dim dwFlags As Long

  ' pass an empty variable into which the API will
  ' return the flags associated with the connection
  Call InternetGetConnectedState(dwFlags, 0&)

  ' return True if the flags indicate a modem connection
  blnIsNetConnectViaModem = dwFlags And INTERNET_CONNECTION_MODEM

End Function

Private Function blnIsNetConnectViaProxy() As Boolean

  Dim dwFlags As Long

  ' pass an empty variable into which the API will
  ' return the flags associated with the connection
  Call InternetGetConnectedState(dwFlags, 0&)

  ' return True if the flags indicate a proxy connection
  blnIsNetConnectViaProxy = dwFlags And INTERNET_CONNECTION_PROXY

End Function

Private Function IsNetConnectOnline() As Boolean

' no flags needed here - the API returns True
' if there is a connection of any type
  IsNetConnectOnline = InternetGetConnectedState(0&, 0&)

End Function

Private Function blnIsNetRASInstalled() As Boolean

  Dim dwFlags As Long

  ' pass an empty variable into which the API will
  ' return the flags associated with the connection
  Call InternetGetConnectedState(dwFlags, 0&)

  ' return True if the flags include RAS installed
  blnIsNetRASInstalled = dwFlags And INTERNET_RAS_INSTALLED

End Function

Private Function strGetNetConnectString() As String

  Dim dwFlags As Long
  Dim strMsg As String

  ' Build a string for display
  If InternetGetConnectedState(dwFlags, 0&) Then

    If dwFlags And INTERNET_CONNECTION_CONFIGURED Then
      strMsg = strMsg & "You have a network connection configured." & vbCrLf
    End If

    If dwFlags And INTERNET_CONNECTION_LAN Then
      strMsg = strMsg & "The local system connects to the Internet via a LAN"
    End If

    If dwFlags And INTERNET_CONNECTION_PROXY Then
      strMsg = strMsg & ", and uses a proxy server. "
    Else
      strMsg = strMsg & "."
    End If

    If dwFlags And INTERNET_CONNECTION_MODEM Then
      strMsg = strMsg & "The local system uses a modem to connect to the Internet. "
    End If

    If dwFlags And INTERNET_CONNECTION_OFFLINE Then
      strMsg = strMsg & "The connection is currently offline. "
    End If

    If dwFlags And INTERNET_CONNECTION_MODEM_BUSY Then
      strMsg = strMsg & "The local system's modem is busy with a non-Internet connection. "
    End If

    If dwFlags And INTERNET_RAS_INSTALLED Then
      strMsg = strMsg & "Remote Access Services are installed on this system."
    End If

  Else

    strMsg = "Not connected to the internet now."

  End If

  strGetNetConnectString = strMsg

End Function

Attribute VB_Name = "modInvokeHTTPServer"
Option Explicit
Option Base 1

Public Function strQuery_Org_List(ByVal wsOutputSheet As Worksheet, _
                                  ByVal rngStartRange As Range, _
                                  ByVal strRegionName As String, _
                                  ByVal strSphereOfActivity As String, _
                                  ByVal strVDET As String, _
                                  ByRef strXMLTagNames() As String, _
                                  ByVal strNameOfRange As String) As String

  Dim strURL As String
  Dim strTemplateCode As String
  
  If Len(strRegionName) > 0 And _
     Len(strSphereOfActivity) > 0 And _
     Len(strVDET) > 0 Then
    strTemplateCode = modServiceModule.varGetDocumentProperty(wsOutputSheet.parent, "Version")
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL-|fffd||fffd||fffd||fffd||fffd||fffd|
    strURL = STR_HTTP_REQUEST_PROC_ORG_NAME & _
             STR_HTTP_REQUEST_PROC_ORG_PARAM_1 & strRegionName & "&" & _
             STR_HTTP_REQUEST_PROC_ORG_PARAM_2 & strSphereOfActivity & "&" & _
             STR_HTTP_REQUEST_PROC_ORG_PARAM_3 & strVDET & "&" & _
             STR_HTTP_REQUEST_PROC_ORG_PARAM_4 & strTemplateCode
    
    strQuery_Org_List = strQuery_Data(wsOutputSheet, _
                                      rngStartRange, _
                                      strXMLTagNames, _
                                      strNameOfRange, _
                                      strURL)
  End If

End Function

Public Function strQuery_MR_MO_OKTMO_List(ByVal wsOutputSheet As Worksheet, _
                                          ByVal rngStartRange As Range, _
                                          ByVal strRegionName As String, _
                                          ByRef strXMLTagNames() As String, _
                                          ByVal strNameOfRange As String) As String

  Dim strURL As String
  Dim strTemplateCode As String
  
  If Len(strRegionName) > 0 Then
    strTemplateCode = modServiceModule.varGetDocumentProperty(wsOutputSheet.parent, "Version")
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL-|fffd||fffd||fffd||fffd||fffd||fffd|
    strURL = STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_NAME & _
             STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_PARAM_1 & strRegionName & "&" & _
             STR_HTTP_REQUEST_PROC_MR_MO_OKTMO_PARAM_2 & strTemplateCode
    
    strQuery_MR_MO_OKTMO_List = strQuery_Data(wsOutputSheet, _
                                              rngStartRange, _
                                              strXMLTagNames, _
                                              strNameOfRange, _
                                              strURL)
  End If

End Function

Public Function strQuery_Balance_Data(ByVal wsOutputSheet As Worksheet, _
                                      ByVal rngStartRange As Range, _
                                      ByVal strRegionName As String, _
                                      ByRef strXMLTagNames() As String, _
                                      ByVal strNameOfRange As String) As String

  Dim strURL As String
  
  If Len(strRegionName) > 0 Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL-|fffd||fffd||fffd||fffd||fffd||fffd|
    strURL = STR_HTTP_REQUEST_PROC_BAL_NAME & _
             STR_HTTP_REQUEST_PROC_BAL_PARAM_1 & strRegionName
    
    strQuery_Balance_Data = strQuery_Data(wsOutputSheet, _
                                          rngStartRange, _
                                          strXMLTagNames, _
                                          strNameOfRange, _
                                          strURL)
  End If
  
End Function


' =========================================================
' ================== |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| URL =====================
' =========================================================

Private Function strQuery_Data(ByVal wsOutputSheet As Worksheet, _
                               ByVal rngStartRange As Range, _
                               ByRef strXMLTagNames() As String, _
                               ByVal strNameOfRange As String, _
                               ByVal strURL As String) As String
    
  Dim lngICounter As Long
  Dim lngJCounter As Long
  Dim lngRowOffset As Long
  Dim wbBook As Workbook
  Dim lngNumberOfQueryFields As Long
  Dim lngApplicationCalculationPreference As Long
  
  Dim lngRequestCounter As Long
  Dim strBaseURL(4) As String
  
  Dim blnSuccessfulRequest As Boolean
  
  strQuery_Data = vbNullString
  
  On Error GoTo ErrHandler
  
  If wsOutputSheet Is Nothing Or _
     rngStartRange Is Nothing Or _
     UBound(strXMLTagNames) = 0 Or _
     Len(strNameOfRange) = 0 Then
    GoTo ErrHandler
  End If
  
  For lngICounter = 1 To UBound(strXMLTagNames)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Len(strXMLTagNames(lngICounter)) = 0 Then
      GoTo ErrHandler
    End If
  Next lngICounter
  
  lngNumberOfQueryFields = UBound(strXMLTagNames)
  
  Dim lngRequestStatus As Long ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  
  ' Check Internet Connection Status
  If modInternetConnectionState.blnIsOnLine = False Then
    GoTo Offline
  End If
  
  ' HTTP Request
  Dim objXMLHTTP As MSXML2.XMLHTTP
  Dim objXMLDOMDocument As MSXML2.DOMDocument

  Set objXMLHTTP = CreateObject("MSXML2.XMLHTTP.3.0")
    
  strBaseURL(1) = STR_HTTP_REQUEST_BASE_URL_1
  strBaseURL(2) = STR_HTTP_REQUEST_BASE_URL_2
  strBaseURL(3) = STR_HTTP_REQUEST_BASE_URL_3
  strBaseURL(4) = STR_HTTP_REQUEST_BASE_URL_4
  
  blnSuccessfulRequest = False
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| DNS...
  For lngRequestCounter = LBound(strBaseURL) To UBound(strBaseURL)
  
    On Error GoTo TryNextDNS
  
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP-|fffd||fffd||fffd||fffd||fffd||fffd|...
    lngRequestStatus = lngSend_Request(objXMLHTTP, objXMLDOMDocument, strBaseURL(lngRequestCounter) & strURL)
    
    If Not lngRequestStatus = HTTP_STATUS_OK Then
      GoTo TryNextDNS
    End If
    
    If objXMLDOMDocument Is Nothing Then
      GoTo TryNextDNS
    End If
  
    If objXMLDOMDocument.DocumentElement Is Nothing Then
      GoTo TryNextDNS
    End If
  
    If objXMLDOMDocument.DocumentElement.ChildNodes Is Nothing Then
      GoTo TryNextDNS
    End If
  
    If objXMLDOMDocument.DocumentElement.ChildNodes.Length >= 0 Then ' = 0 |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      blnSuccessfulRequest = True
      Exit For
    End If
  
TryNextDNS:
  Next lngRequestCounter

''  On Error GoTo ErrHandler

  If blnSuccessfulRequest = True Then
  
    Set wbBook = wsOutputSheet.parent
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Application.Calculation
    lngApplicationCalculationPreference = wbBook.Application.Calculation
    wbBook.Application.Calculation = xlCalculationManual
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| wsOutputSheet
    wsOutputSheet.Activate
    
    modServiceModule.UNPROTECT_SHEET wsOutputSheet
    wsOutputSheet.Range(rngStartRange.cells(1, 1), _
                        wsOutputSheet.cells(wsOutputSheet.UsedRange.Row + _
                                              wsOutputSheet.UsedRange.Rows.Count - 1, _
                                            lngNumberOfQueryFields)).cells.ClearContents
                          
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    wsOutputSheet.cells.NumberFormat = "@"
     
    If objXMLDOMDocument.DocumentElement.ChildNodes.Length > 0 Then
      lngRowOffset = 0
      For lngICounter = 0 To objXMLDOMDocument.DocumentElement.ChildNodes.Length - 1
        Dim rec As MSXML2.IXMLDOMElement
        Set rec = objXMLDOMDocument.DocumentElement.ChildNodes.Item(lngICounter)
        If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
        For lngJCounter = 1 To UBound(strXMLTagNames)
          rngStartRange.Offset(lngRowOffset, lngJCounter - 1).value = rec.getElementsByTagName(strXMLTagNames(lngJCounter)).Item(0).Text
        Next lngJCounter
        lngRowOffset = lngRowOffset + 1
      Next lngICounter
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Delete_Existing_Name_In_Workbook wbBook, strNameOfRange
    If lngRowOffset > 0 Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      wsOutputSheet.Range(rngStartRange.cells(1, 1), _
                          wsOutputSheet.cells(lngRowOffset + 1, lngNumberOfQueryFields)).name = strNameOfRange
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For lngICounter = 1 To UBound(strXMLTagNames)
      wsOutputSheet.cells(1, lngICounter).value = strXMLTagNames(lngICounter)
    Next lngICounter
  
    GoTo Success

  Else
  
    GoTo ErrHandler
    
  End If
               
Success:
  strQuery_Data = STR_UPDATE_SUCCESS
  GoTo CleanUp
ErrHandler:
  strQuery_Data = STR_UPDATE_FAILED
  GoTo CleanUp
Offline:
  strQuery_Data = STR_INET_CONNECTION_IS_OFFLINE
  GoTo CleanUp
CleanUp:
  If Not wbBook Is Nothing Then
    wbBook.Application.Calculation = lngApplicationCalculationPreference
  End If
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Delete_Existing_Name_In_Workbook(wbBook As Workbook, _
                                            strNameOfRange As String)
  
  On Error GoTo ErrHandler
  
  If wbBook Is Nothing Or _
     Len(strNameOfRange) = 0 Then
    GoTo ErrHandler
  End If
  
  wbBook.Names(strNameOfRange).Delete
  
ErrHandler:
End Sub

Private Sub SaveXML(ByVal wbBook As Workbook, _
                    ByVal strXML As String)
  
  Dim FileNo As Long
  FileNo = FreeFile
  
  Open wbBook.Path & "\" & "Save.txt" For Output As FileNo
  
  Print #FileNo, strXML
  
  Close FileNo

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP-|fffd||fffd||fffd||fffd||fffd||fffd|
Private Function lngSend_Request(ByRef objXMLHTTP As MSXML2.XMLHTTP, _
                                 ByRef objXMLDOMDocument As MSXML2.DOMDocument, _
                                 ByVal strURL As String)
    
  On Error GoTo ErrHandler
    
  If frmProgressForm Is Nothing Then
  
    objXMLHTTP.Open bstrMethod:="GET", bstrUrl:=strURL, varAsync:=False
    objXMLHTTP.send
    
  Else

    objXMLHTTP.Open bstrMethod:="GET", bstrUrl:=strURL, varAsync:=True
    objXMLHTTP.send

    Do While objXMLHTTP.readyState <> 4
      frmProgressForm.Tick
    Loop

  End If
    
  
  Set objXMLDOMDocument = objXMLHTTP.responseXML
  
  lngSend_Request = objXMLHTTP.status
  
  If modGlobals.gblnTestMode = True Then
    Debug.Print objXMLDOMDocument.Text
  End If
  
  GoTo CloseProgressForm
  
ErrHandler:
  lngSend_Request = HTTP_STATUS_BAD_REQUEST
  GoTo CloseProgressForm
CloseProgressForm:
  GoTo CleanUp
CleanUp:
End Function

Public Function Try_Show_Progress_Form(Optional strFormCaption As String = "") As IProgressBar
  On Error GoTo ErrHandler

  Dim i As Long
  Dim diag As IProgressBar
  Set diag = New ProgressDialogue

  diag.Show 2, strFormCaption

  Set Try_Show_Progress_Form = diag

  GoTo Success

Success:
  GoTo CleanUp
ErrHandler:
  Set diag = Nothing
  Set Try_Show_Progress_Form = Nothing
  GoTo CleanUp
CleanUp:
End Function

Attribute VB_Name = "modProvGeneralProc"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Base 1
Option Explicit

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function R_po_Ind(ind As String, Diap() As ProvType) As Range

  Dim lngICounter As Long

  For lngICounter = 1 To UBound(Diap)
    If Diap(lngICounter).Index = ind Then
      Set R_po_Ind = Diap(lngICounter).r
      Exit Function
    End If
  Next lngICounter

End Function

' TRUE |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function LogOper2(Operand1 As Double, Operand2 As Double, ComparisonOperator As String) As Boolean

  LogOper2 = False

  Select Case ComparisonOperator

    Case ">"

      If Operand1 > Operand2 Then
        LogOper2 = True
      End If

    Case ">="

      If Operand1 >= Operand2 Then
        LogOper2 = True
      ElseIf (Operand1 = 0 Or Operand2 = 0) Then
        If Abs(Operand1 - Operand2) <= 0.0001 Then
          LogOper2 = True
        End If
      ElseIf (2 * Abs(Operand1 - Operand2)) <= Abs((0.00001 * (Operand1 + Operand2))) Then
        LogOper2 = True
      End If

    Case "="

      If Operand1 = Operand2 Then ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 0-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!
        LogOper2 = True
      ElseIf (Operand1 = 0 Or Operand2 = 0) Then
        If Abs(Operand1 - Operand2) <= 0.0001 Then
          LogOper2 = True
        End If
      ElseIf (2 * Abs(Operand1 - Operand2)) <= Abs((0.00001 * (Operand1 + Operand2))) Then
        LogOper2 = True
      End If

    Case "<="

      If Operand1 <= Operand2 Then
        LogOper2 = True
      ElseIf (Operand1 = 0 Or Operand2 = 0) Then
        If Abs(Operand1 - Operand2) <= 0.0001 Then
          LogOper2 = True
        End If
      ElseIf (2 * Abs(Operand1 - Operand2)) <= Abs((0.00001 * (Operand1 + Operand2))) Then
        LogOper2 = True
      End If

    Case "<"

      If Operand1 < Operand2 Then
        LogOper2 = True
      End If

  End Select

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function MathOper2(Operand1 As Double, Operand2 As Double, Operator As String) As Double

  Select Case Operator
    Case "+"
      MathOper2 = Operand1 + Operand2
    Case "-"
      MathOper2 = Operand1 - Operand2
    Case "/"
      MathOper2 = Operand1 / Operand2
    Case "*"
      MathOper2 = Operand1 * Operand2
  End Select

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function MathOper3(Operand1 As Double, Operand2 As Double, Op3 As Double, Operator As String) As Double

  Select Case Operator
    Case "+"
      MathOper3 = Operand1 + Operand2 + Op3
    Case "-"
      MathOper3 = Operand1 - Operand2 - Op3
    Case "/"
      MathOper3 = Operand1 / Operand2 / Op3
    Case "*"
      MathOper3 = Operand1 * Operand2 * Op3
  End Select

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd|, |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function Validate_All_Cells_Positive_And_Numeric_Values(ByVal wsCheckSheet As Worksheet, _
                                                               ByVal rngRange As Range) As Boolean

  Dim rngCell As Range
  Validate_All_Cells_Positive_And_Numeric_Values = False

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim dblAccuracy As Double
  dblAccuracy = 0.000001

  For Each rngCell In rngRange.cells
    If IsNumeric(rngCell.value) = True Then
      If rngCell.value < 0 And _
         Abs(0 - Abs(rngCell.value)) > dblAccuracy Then
        Negative_Value wsCheckSheet, rngCell
        Validate_All_Cells_Positive_And_Numeric_Values = True
      ElseIf Len(rngCell.value) > 0 And _
             rngCell.value = 0 And _
             rngCell.Locked = False Then
        Zero_Value wsCheckSheet, rngCell
        Validate_All_Cells_Positive_And_Numeric_Values = True
      End If
    Else
      NonNumeric_Value wsCheckSheet, rngCell
      Validate_All_Cells_Positive_And_Numeric_Values = True
    End If
  Next rngCell

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd|, |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function Validate_All_Cells_Numeric_Values(ByVal wsCheckSheet As Worksheet, _
                                                  ByVal rngRange As Range) As Boolean

  Dim rngCell As Range
  Validate_All_Cells_Numeric_Values = False

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim dblAccuracy As Double
  dblAccuracy = 0.000001

  For Each rngCell In rngRange.cells
    If IsNumeric(rngCell.value) = False Then
      NonNumeric_Value wsCheckSheet, rngCell
      Validate_All_Cells_Numeric_Values = True
    End If
  Next rngCell

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd|, |fffd||fffd||fffd| |fffd| colorXXX |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function Validate_Color_Cells_Positive_And_Numeric_Values(ByVal wsCheckSheet As Worksheet, _
                                                                 ByVal rngRange As Range, _
                                                                 ByVal lngColor As Long) As Boolean

  Dim rngCell As Range
  Validate_Color_Cells_Positive_And_Numeric_Values = False

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim dblAccuracy As Double
  dblAccuracy = 0.000001

  For Each rngCell In rngRange.cells
    If rngCell.Interior.ColorIndex = lngColor Then
      If IsNumeric(rngCell.value) = True Then
        If rngCell.value < 0 And _
           Abs(0 - Abs(rngCell.value)) > dblAccuracy Then
          Negative_Value wsCheckSheet, rngCell
          Validate_Color_Cells_Positive_And_Numeric_Values = True
        End If
      Else
        NonNumeric_Value wsCheckSheet, rngCell
        Validate_Color_Cells_Positive_And_Numeric_Values = True
      End If
    End If
  Next rngCell

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd|, |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub NonNumeric_Value(ByVal wsCheckSheet As Worksheet, ByVal R_err As Range)

  modProvGeneralProc.Add_Hyperlink wsCheckSheet, R_err, Nothing, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", modGlobals.STR_KIND_ERROR

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub Negative_Value(wsCheckSheet As Worksheet, R_err As Range)

  modProvGeneralProc.Add_Hyperlink wsCheckSheet, R_err, Nothing, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", modGlobals.STR_KIND_ERROR

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub Zero_Value(wsCheckSheet As Worksheet, R_err As Range)

  modProvGeneralProc.Add_Hyperlink wsCheckSheet, R_err, Nothing, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", modGlobals.STR_KIND_ERROR

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function Warning_On_Negative_Value(ByVal wsCheckSheet As Worksheet, _
                                          ByVal rngRange As Range) As Boolean

  Dim rngCell As Range
  Warning_On_Negative_Value = False

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim dblAccuracy As Double
  dblAccuracy = 0.000001

  For Each rngCell In rngRange.cells
    If IsNumeric(rngCell.value) = True Then
      If rngCell.value < 0 And _
         Abs(0 - Abs(rngCell.value)) > dblAccuracy Then
        modProvGeneralProc.Add_Hyperlink wsCheckSheet, rngCell, Nothing, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", modGlobals.STR_KIND_WARNING
        Warning_On_Negative_Value = True
      End If
    End If
  Next rngCell

End Function

' rngValidating - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Add_Hyperlink(ByVal wsCheckSheet As Worksheet, _
                         ByVal rngValidating_1 As Range, _
                         ByVal rngValidating_2 As Range, _
                         ByVal strReason As String, _
                         ByVal strKindOfError As String)

  If strKindOfError = modGlobals.STR_KIND_WARNING Then
    modGlobals.glngLowImpactWarningsCounter = modGlobals.glngLowImpactWarningsCounter + 1
  Else
    modGlobals.glngCriticalImpactWarningsCounter = modGlobals.glngCriticalImpactWarningsCounter + 1
    modGlobals.BLN_WARNINGS_FOUND = True
  End If

  Dim rngCheckRange As Range
  
  wsCheckSheet.Activate

  Set rngCheckRange = wsCheckSheet.cells(LNG_NUM_ROW_PROV, 5)
  rngCheckRange.Select
  rngCheckRange.Worksheet.Hyperlinks.Add Anchor:=Selection, _
                                         Address:="", _
                                         SubAddress:="'" & _
                                         rngValidating_1.Worksheet.name & _
                                         "'!" & _
                                         rngValidating_1.Address(RowAbsolute:=False, _
                                                                 ColumnAbsolute:=False), _
                                         TextToDisplay:=rngValidating_1.Worksheet.name & _
                                         "!" & rngValidating_1.Address(RowAbsolute:=False, _
                                                                       ColumnAbsolute:=False), _
                                         ScreenTip:=rngValidating_1.Worksheet.name & _
                                         "!" & rngValidating_1.Address(RowAbsolute:=False, _
                                                                       ColumnAbsolute:=False)
  With rngCheckRange.Font
      .name = "Tahoma"
      .FontStyle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
      .Size = 10
      .Strikethrough = False
      .Superscript = False
      .Subscript = False
      .OutlineFont = False
      .Shadow = False
      .Underline = xlUnderlineStyleSingle
      .ColorIndex = 5
  End With
  With Selection
      .HorizontalAlignment = xlCenter
      .VerticalAlignment = xlCenter
      .WrapText = False
      .Orientation = 0
      .AddIndent = False
      .IndentLevel = 0
      .ShrinkToFit = False
      .ReadingOrder = xlContext
      .MergeCells = False
  End With


  Set rngCheckRange = wsCheckSheet.cells(LNG_NUM_ROW_PROV, 6)
  If Not rngValidating_2 Is Nothing Then

    rngCheckRange.Select
    rngCheckRange.Worksheet.Hyperlinks.Add Anchor:=Selection, _
                                           Address:="", _
                                           SubAddress:="'" & _
                                           rngValidating_2.Worksheet.name & _
                                           "'!" & _
                                           rngValidating_2.Address(RowAbsolute:=False, _
                                                                   ColumnAbsolute:=False), _
                                           TextToDisplay:=rngValidating_2.Worksheet.name & _
                                           "!" & rngValidating_2.Address(RowAbsolute:=False, _
                                                                         ColumnAbsolute:=False), _
                                           ScreenTip:=rngValidating_2.Worksheet.name & _
                                           "!" & rngValidating_2.Address(RowAbsolute:=False, _
                                                                         ColumnAbsolute:=False)
    With rngCheckRange.Font
        .name = "Tahoma"
        .FontStyle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .Size = 10
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleSingle
        .ColorIndex = 5
    End With
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With

  End If

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  rngCheckRange.Offset(0, 1).WrapText = True
  rngCheckRange.Offset(0, 1).value = strReason
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  rngCheckRange.Offset(0, 2).value = strKindOfError

  Set rngCheckRange = wsCheckSheet.Range(wsCheckSheet.cells(LNG_NUM_ROW_PROV, 5), _
                                         wsCheckSheet.cells(LNG_NUM_ROW_PROV, 8))
  rngCheckRange.Borders(xlEdgeBottom).LineStyle = xlDot
  rngCheckRange.Borders(xlEdgeBottom).ColorIndex = modGlobals.colorGrey
  
  modGlobals.LNG_NUM_ROW_PROV = modGlobals.LNG_NUM_ROW_PROV + 1
  rngCheckRange.Worksheet.Rows(rngCheckRange.Row & ":" & rngCheckRange.Row).EntireRow.AutoFit
  
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| wsSheet
Function blnCheckIfSheet(wsCheckSheet As Worksheet)
  
  blnCheckIfSheet = True

  Dim wbBook As Workbook
  Dim intCounterRow As Integer      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  Dim wsSheet As Worksheet          ' |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim strTempNameSheet As String    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

  Set wbBook = wsCheckSheet.parent
  
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If Not (modServiceModule.SheetExists("AllSheetsInThisWorkbook", wbBook)) Then
    modProvGeneralProc.Add_Hyperlink wsCheckSheet, wsCheckSheet.cells(1, 1), Nothing, _
                                     "|fffd||fffd||fffd||fffd| 'AllSheetsInThisWorkbook' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
                                     modGlobals.STR_KIND_ERROR
    blnCheckIfSheet = False
    Exit Function
  End If
  
  Set wsSheet = wbBook.Sheets("AllSheetsInThisWorkbook")
  
  intCounterRow = 2
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| A |fffd||fffd||fffd||fffd||fffd| AllSheetsInThisWorkbook/
  Do While Len(Trim(wsSheet.cells(intCounterRow, 1).value)) <> 0
    strTempNameSheet = wsSheet.cells(intCounterRow, 1).value
    If Not (modServiceModule.SheetExists(strTempNameSheet, wbBook)) Then
      modProvGeneralProc.Add_Hyperlink wsCheckSheet, wsCheckSheet.cells(1, 1), Nothing, _
                                       "|fffd||fffd||fffd||fffd| '" & strTempNameSheet & "' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
                                       modGlobals.STR_KIND_ERROR
      blnCheckIfSheet = False
    End If
    intCounterRow = intCounterRow + 1
  Loop
  
  intCounterRow = 2
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| B |fffd||fffd||fffd||fffd||fffd| AllSheetsInThisWorkbook/
  Do While Len(Trim(wsSheet.cells(intCounterRow, 2).value)) <> 0
    strTempNameSheet = wsSheet.cells(intCounterRow, 2).value
    If Not (modServiceModule.SheetExists(strTempNameSheet, wbBook)) Then
      modProvGeneralProc.Add_Hyperlink wsCheckSheet, wsCheckSheet.cells(1, 1), Nothing, _
                                       "|fffd||fffd||fffd||fffd| '" & strTempNameSheet & "' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
                                       modGlobals.STR_KIND_ERROR
      blnCheckIfSheet = False
    End If
    intCounterRow = intCounterRow + 1
  Loop

End Function

Attribute VB_Name = "modReestrMO"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| + |fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
Public Function Shape_MR_MO_OKTMO_List(ws As Worksheet) As Long

  Dim lngICounter As Long, j As Long
  Dim strMRName As String
  Dim rngRange As Range
  Dim rngCell As Range
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|/|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim lngMRMORegionStartRow As Long
  Dim lngMRMORegionEndRow As Long
  Dim lngMRMORegionRowCount As Long
  Dim lngMRMORowCount As Long
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd|
  Dim lngCounter As Long
  Dim lngMOMRStartRow As Long
  Dim lngMOMREndRow As Long
  Dim lngMOMRRowCount As Long
  Dim lngMORowCount As Long

  ws.Activate

  lngMRMORegionRowCount = 0
  Do While Len(CStr(ws.cells(lngMRMORegionRowCount + 2, 1).value)) > 0
    lngMRMORegionRowCount = lngMRMORegionRowCount + 1
  Loop

  If lngMRMORegionRowCount < 1 Then
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    GoTo CleanUp
  End If

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  ws.Application.DisplayAlerts = False
  ws.Columns(1).Delete
  ws.Application.DisplayAlerts = True

  lngICounter = 2
  j = 1
  strMRName = ws.cells(lngICounter, 1).value
  ws.cells(j + 1, 5).value = ws.cells(lngICounter, 1).value 'MR
  ws.cells(j + 1, 6).value = ws.cells(lngICounter, 2).value 'MR_OKTMO
  j = j + 1

  For lngICounter = 3 To lngMRMORegionRowCount + 1
    If ws.cells(lngICounter, 1).value <> strMRName Then
      strMRName = ws.cells(lngICounter, 1).value
      ws.cells(j + 1, 5).value = ws.cells(lngICounter, 1).value 'MR
      ws.cells(j + 1, 6).value = ws.cells(lngICounter, 2).value 'MR_OKTMO
      j = j + 1
    End If
  Next lngICounter

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|
  ws.Application.DisplayAlerts = False
  ws.Columns(2).Delete
  ws.Application.DisplayAlerts = True

  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  modInvokeHTTPServer.Delete_Existing_Name_In_Workbook ws.parent, "MR_LIST"
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  Set rngRange = ws.Range("D2:D" & j)
  rngRange.name = "MR_LIST"

  ' ---------------------------------------------
  ' ---------------------------------------------
  ' --- |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| ---
  ' ---------------------------------------------
  ' ---------------------------------------------
  For lngCounter = 2 To ws.Range("MR_LIST").Rows.Count + 1

    If Not frmProgressForm Is Nothing Then frmProgressForm.Tick

    strMRName = ws.cells(lngCounter, 4).value

    If Len(strMRName) = 0 Then Exit For

    lngMOMRStartRow = 0
    lngMOMREndRow = 0

    lngMORowCount = 0
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
    Do While Len(CStr(ws.cells(lngMORowCount + 2, 2).value)) > 0
      lngMORowCount = lngMORowCount + 1
    Loop
    lngMORowCount = lngMORowCount + 2

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
    ' !!! |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd|
    For lngICounter = 1 To lngMORowCount
      If LCase(ws.cells(lngICounter, 1).value) = LCase(strMRName) Then
        If lngMOMRStartRow = 0 Then
          lngMOMRStartRow = lngICounter
          Exit For
        End If
      End If
    Next lngICounter

    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If lngMOMRStartRow = 0 Then
      GoTo ErrHandler
    End If

    For lngICounter = lngMOMRStartRow To lngMORowCount
      If LCase(ws.cells(lngICounter, 1).value) <> LCase(strMRName) Or _
         Len(CStr(ws.cells(lngICounter, 1).value)) = 0 Then
        If lngMOMREndRow = 0 Then
          lngMOMREndRow = lngICounter - 1
          Exit For
        End If
      End If
      If lngICounter = lngMORowCount Then
        If lngMOMREndRow = 0 Then
          lngMOMREndRow = lngICounter
          Exit For
        End If
      End If
    Next lngICounter

    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If lngMOMREndRow = 0 Then
      GoTo ErrHandler
    End If

    lngMOMRRowCount = lngMOMREndRow - lngMOMRStartRow + 1

    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "MO_LIST_" & lngCounter
    modInvokeHTTPServer.Delete_Existing_Name_In_Workbook ws.parent, "MO_LIST_" & lngCounter
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
    ws.Range(ws.cells(lngMOMRStartRow, 2), ws.cells(lngMOMREndRow, 2)).name = "MO_LIST_" & lngCounter
    ws.cells(lngCounter, 5).value = "MO_LIST_" & lngCounter

''
''    ' |fffd||fffd||fffd||fffd| |fffd||fffd| = |fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
''    ' (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "|fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|...
''    For Each rngCell In ws.Range("MO_LIST_" & lngCounter)
''      If LCase(rngCell.value) = LCase(strMRName) And _
''         InStr(1, LCase(strMRName), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|") <> 0 Then
''        ws.Range(rngCell.Offset(0, -1), rngCell.Offset(0, 1)).Select
''        Selection.Delete Shift:=xlUp
''      End If
''    Next rngCell

  Next lngCounter

  ws.Range("A1").value = "|fffd||fffd|"
  ws.Range("B1").value = "|fffd||fffd|"
  ws.Range("C1").value = "|fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|"
  ws.Range("D1").value = "|fffd||fffd|"
  ws.Range("E1").value = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" ' |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|


  ' ---------------------------------------
  ' ---------------------------------------
  ' ---------------------------------------

  Shape_MR_MO_OKTMO_List = lngCounter

  GoTo CleanUp

ErrHandler:
  If modGlobals.gblnTestMode = True Then
    Debug.Print Err.Description
  End If
  GoTo CleanUp
CleanUp:

End Function

Attribute VB_Name = "modRegionSelect"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Option Explicit
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''       |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''
'' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ChangeMacros()!!!!
'' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| REGION (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|) |fffd|
'' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| modServiceModule |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| UNPROTECT_SHEET |fffd| PROTECT_SHEET
'' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| StartTemplate
''
'' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 2011
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
''''|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''''|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
''Private Sub ChangeMacros()
''  Dim sh As Shape
''  On Error Resume Next
''  modServiceModule.UNPROTECT_SHEET Me
''  For Each sh In Me.Shapes
''    If sh.name <> "cmdStart" And InStr(sh.name, "Gerb") = 0 Then sh.OnAction = "modRegionSelect.Region_Click"
''  Next sh
''  Me.Range("B1").name = "SelectedRegion"
''  Me.Range("C1").name = "SelectedRegionColor"
''  With Me.Range("B2:G3").Validation
''    .Delete
''    .Add Type:=xlValidateList, _
''         AlertStyle:=xlValidAlertStop, _
''         Operator:=xlBetween, _
''         Formula1:="=REGION"
''    .IgnoreBlank = False
''    .InCellDropdown = True
''    .ShowInput = True
''    .ShowError = True
''  End With
''End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub cmdStart_Click()
  StartTemlate
End Sub


Private Sub Worksheet_Change(ByVal Target As Range)
  If Target.Row = 2 And Target.Column = 2 Then
    Dim rngFind As Range, rngFound As Range
    Set rngFind = ThisWorkbook.Names("REGION").RefersToRange
    Set rngFound = rngFind.Find(Target.cells(1, 1).value, LookAt:=xlWhole)
    If Not rngFound Is Nothing Then
      RePaint_Region (rngFound.Row - rngFind.cells(1, 1).Row + 1)
    Else
      RePaint_Region (0)
    End If
  End If
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub Region_Click()
  Dim i As Integer
'  |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If InStr(Application.Caller, "Groupp") <> 0 Then
    i = CInt(Mid(Application.Caller, 7, 2))
  Else
    i = CInt(Mid(Application.Caller, 10))
  End If
  If i > 84 Then Exit Sub
  Application.EnableEvents = False
  Me.Range("B2").value = ThisWorkbook.Names("REGION").RefersToRange.cells(i, 1).value
  Application.EnableEvents = True
  RePaint_Region (i)
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub RePaint_Region(intRegNumber As Integer)
  Dim intOldColor As Long
  If intRegNumber = ThisWorkbook.Names("SelectedRegion").RefersToRange.value Then Exit Sub
  modServiceModule.UNPROTECT_SHEET Me
  On Error GoTo end_info
  If intRegNumber <> 0 Then
    With Me.Shapes("ShapeReg_" & intRegNumber)
      intOldColor = .Fill.ForeColor.RGB
      .Fill.ForeColor.RGB = RGB(129, 0, 0)
      .Fill.Visible = msoTrue
      .Fill.Solid
    End With
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Me.Shapes("Gerb_" & intRegNumber).Visible = msoTrue
  End If

  If ThisWorkbook.Names("SelectedRegion").RefersToRange.value <> 0 Then
    With Me.Shapes("ShapeReg_" & ThisWorkbook.Names("SelectedRegion").RefersToRange.value)
      .Fill.ForeColor.RGB = ThisWorkbook.Names("SelectedRegionColor").RefersToRange.value
      .Fill.Visible = msoTrue
      .Fill.Solid
    End With
    Me.Shapes("Gerb_" & ThisWorkbook.Names("SelectedRegion").RefersToRange.value).Visible = msoFalse
  End If
end_info:
  ThisWorkbook.Names("SelectedRegion").RefersToRange.value = intRegNumber
  ThisWorkbook.Names("SelectedRegionColor").RefersToRange.value = intOldColor
  modServiceModule.PROTECT_SHEET Me, True
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub StartTemlate()
  On Error GoTo ErrHandler

  Dim wbBook As Workbook
  
  Dim wsSheet As Worksheet
  Dim wsTempSheet As Worksheet
  Dim wsTitleSheet As Worksheet
  Dim wsEtUnionSheet As Worksheet
  
  Dim strRegionName As String
  Dim strDelForHypSheet As String
  Dim strDelForEtUnionSheet As String

  Set wbBook = ThisWorkbook

  If modServiceModule.IsNameExists(wbBook, "valueSelectedRegion") = False Or _
     modServiceModule.IsNameExists(wbBook, "region_name") = False Then GoTo CleanUp
  
  Set wsSheet = wbBook.Names("valueSelectedRegion").RefersToRange.parent
  strRegionName = wsSheet.Range("valueSelectedRegion").cells(1, 1).value
  If strRegionName = "" Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical
    wsSheet.Range("valueSelectedRegion").Select
  Else
    If MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: '" & strRegionName & "' ?", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!") = vbYes Then
      Application.EnableEvents = False
      Application.ScreenUpdating = False
      modServiceModule.UNPROTECT_SHEET wsSheet
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      wsSheet.Range("valueSelectedRegion").cells(1, 1).MergeArea.Validation.Delete
      wsSheet.Range("valueSelectedRegion").cells(1, 1).MergeArea.Locked = True
      wsSheet.Range("valueSelectedRegion").cells(1, 1).Interior.ColorIndex = colorGreen
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      wsSheet.Shapes("cmdStart").Visible = msoFalse
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      wsSheet.Visible = xlSheetVeryHidden
      modServiceModule.PROTECT_SHEET wsSheet, True

'****************************************************************************************************************************
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''****************************************************************************************************************************
          
      modRegionSelectSub.UpdateTemlatesAfterSelectionRegion wbBook
      
'****************************************************************************************************************************
'
'****************************************************************************************************************************
    
    End If

  End If
  
  GoTo CleanUp

ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:
  wsSheet.Activate
  Application.EnableEvents = True
  Application.ScreenUpdating = True
  Application.StatusBar = False
End Sub

Attribute VB_Name = "modRegionSelectSub"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const strRegion_2_16 As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Private Const strRegion_4_78 As String = "|fffd|.|fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Private Const strRegion_6_22 As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
Private Const strRegion_1_40 As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Private Const strRegion_3_61 As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Private Const strRegion_3_23 As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"

Public Sub UpdateTemlatesAfterSelectionRegion(ByVal wbBook As Workbook)
      
    On Error GoTo ErrHandler
  
    Dim rngCell As Range
    Dim rngRange As Range
  
    Dim strRegionName As String
    Dim strDelForHypSheet As String
    Dim strDelForEtUnionSheet As String
    Dim strRangeAddress As String
    
    Dim intCounter As Integer
    Dim intVisibleSheet As Integer
    
    Dim wsTitleSheet As Worksheet
    Dim wsTempSheet As Worksheet
  
    strRegionName = wbBook.Names("valueSelectedRegion").RefersToRange.value
    
    Set wsTitleSheet = wbBook.Names("region_name").RefersToRange.parent
    wsTitleSheet.Activate
    modServiceModule.UNPROTECT_SHEET wsTitleSheet
    wsTitleSheet.Range("region_name").cells(1, 1).value = strRegionName
    modServiceModule.PROTECT_SHEET wsTitleSheet, True
    
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
    
    Application.ScreenUpdating = False
    Application.StatusBar = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
    modSheetMain01.cmdUpdateOrgData_Click_Handler wsTitleSheet, Nothing, False
    Application.StatusBar = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
    modSheetMain01.cmdUpdateReestrMO_Click_Handler wsTitleSheet, False, vbNullString
    Application.StatusBar = False
    
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      Application.ScreenUpdating = False
      wbBook.Worksheets(gstrMainSheetName).Visible = xlSheetVisible
      wbBook.Worksheets(gstrCommentsSheetName).Visible = xlSheetVisible
      wbBook.Worksheets(gstrCheckSheetName).Visible = xlSheetVisible
      
      Application.EnableEvents = True
      
      If LCase(strRegionName) = strRegion_2_16 Then
        wsTitleSheet.Range("strPublication").cells(1, 1).value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        Application.EnableEvents = False
        modServiceModule.UNPROTECT_SHEET wsTitleSheet
        wsTitleSheet.Range("strPublication").MergeArea.Validation.Delete
        wsTitleSheet.Range("strPublication").MergeArea.Interior.ColorIndex = modGlobals.colorWhite
        wsTitleSheet.Range("strPublication").MergeArea.Locked = True
        wsTitleSheet.Range("strPublication").EntireRow.Hidden = True
        wsTitleSheet.Range("strPublication").cells(1, 1).Offset(-1, 0).EntireRow.Hidden = True
        wsTitleSheet.Shapes("ExcludeHelp_1").Delete
        modServiceModule.PROTECT_SHEET wsTitleSheet, True
        Application.EnableEvents = True
      Else
        wsTitleSheet.Range("strPublication").cells(1, 1).value = vbNullString
      End If
      
      ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If LCase(strRegionName) = strRegion_3_23 Then
        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        modServiceModule.UNPROTECT_SHEET wsTitleSheet
        If wsTitleSheet.Range("activity").cells(1, 1).Interior.ColorIndex = colorCyan Then
          wsTitleSheet.Range("activity").Select
          Selection.Interior.ColorIndex = colorGreen
          Selection.Validation.Delete
          Selection.Locked = True
        End If
        modServiceModule.PROTECT_SHEET wsTitleSheet, True
      End If
      
      ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If LCase(strRegionName) <> strRegion_4_78 Then
      
        Application.EnableEvents = False
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        modServiceModule.UNPROTECT_SHEET wsTitleSheet
        wsTitleSheet.Range("flag_publication").cells(3, 1).EntireRow.Delete
        modServiceModule.PROTECT_SHEET wsTitleSheet, True
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Set wsTempSheet = wbBook.Worksheets(gstrHyperlinkSheetName)
        intVisibleSheet = wsTempSheet.Visible
        wsTempSheet.Visible = xlSheetVisible
        wsTempSheet.Activate
        modServiceModule.UNPROTECT_SHEET wsTempSheet
        For intCounter = 1 To 1
          If Not (intCounter = 5 And _
                  Not modServiceModule.IsNameExists(wbBook, "nameSource_strPublication_" & intCounter)) Then
               wsTempSheet.Range("nameSource_strPublication_" & intCounter).Offset(2, 0).Rows.EntireRow.Delete
          End If
        Next intCounter
        modServiceModule.PROTECT_SHEET wsTempSheet, True
        wsTempSheet.Visible = intVisibleSheet
                
      End If
      
      
      ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      If LCase(strRegionName) <> strRegion_6_22 Then
      
        Application.EnableEvents = False
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Set wsTempSheet = wbBook.Worksheets(gstrHyperlinkSheetName)
        intVisibleSheet = wsTempSheet.Visible
        wsTempSheet.Visible = xlSheetVisible
        wsTempSheet.Activate
        modServiceModule.UNPROTECT_SHEET wsTempSheet
        
        Set rngRange = wsTempSheet.Range("checkCell_3").Columns(3).cells
        On Error Resume Next    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| validation |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        For Each rngCell In rngRange
          With rngCell.Validation
            .Delete
            .Add Type:=xlValidateTextLength, AlertStyle:=xlValidAlertStop, _
                 Operator:=xlLessEqual, Formula1:="900"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd||fffd|"
            .InputMessage = ""
            .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 900 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
            .ShowInput = True
            .ShowError = True
          End With
        Next rngCell
        On Error GoTo ErrHandler    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        
        wsTempSheet.Range("comments_for_CRO").cells(1, 1).Offset(2, 0).value = "3"
        wsTempSheet.Range("comments_for_CRO").cells(1, 1).Offset(1, 0).value = vbNullString
        wsTempSheet.Visible = intVisibleSheet
        modServiceModule.PROTECT_SHEET wsTempSheet, True
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| et_union |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Set wsTempSheet = wbBook.Worksheets(gstrEtUnionSheetName)
        intVisibleSheet = wsTempSheet.Visible
        wsTempSheet.Visible = xlSheetVisible
        wsTempSheet.Activate
        
        Set rngRange = wsTempSheet.Range("add_HYPERLINK_range").Columns(7).cells
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        On Error Resume Next    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| validation |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        For Each rngCell In rngRange
          With rngCell.Validation
            .Delete
            .Add Type:=xlValidateTextLength, AlertStyle:=xlValidAlertStop, _
            Operator:=xlLessEqual, Formula1:="900"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd||fffd|"
            .InputMessage = ""
            .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 900 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
            .ShowInput = True
            .ShowError = True
          End With
        Next rngCell
        On Error GoTo ErrHandler    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        
        wsTempSheet.Visible = intVisibleSheet
        
      End If
      
      Application.EnableEvents = False
    
    wsTitleSheet.Activate
    wsTitleSheet.Range("A1").Select
    
ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp
    
CleanUp:
  Application.EnableEvents = False
End Sub

Attribute VB_Name = "modScrolling"
Option Explicit
Option Base 1
Dim scrollStep As Byte
Public obj As Control '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public hW As Long ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

#If VBA7 And Win64 Then
  Public Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, _
                                                                     ByVal lpWindowName As String) As Long

  Private Declare PtrSafe Function CallWindowProcA Lib "user32" (ByVal lpPrevWndFunc As Long, _
                                                       ByVal hwnd As Long, _
                                                       ByVal MSG As Long, _
                                                       ByVal wParam As Long, _
                                                       ByVal lParam As Long) As Long
  Private Declare PtrSafe Function SetWindowLongPtrA Lib "user32" (ByVal hwnd As Long, _
                                                      ByVal nIndex As Long, _
                                                      ByVal dwNewLong As LongPtr) As Long
  Public Declare PtrSafe Function GetFocus Lib "user32" () As Long
  
#Else
  Public Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, _
                                                                     ByVal lpWindowName As String) As Long

  Private Declare Function CallWindowProcA Lib "user32" (ByVal lpPrevWndFunc As Long, _
                                                       ByVal hwnd As Long, _
                                                       ByVal MSG As Long, _
                                                       ByVal wParam As Long, _
                                                       ByVal lParam As Long) As Long
  Private Declare Function SetWindowLongA Lib "user32" (ByVal hwnd As Long, _
                                                      ByVal nIndex As Long, _
                                                      ByVal dwNewLong As Long) As Long
  Public Declare Function GetFocus Lib "user32" () As Long
#End If


Private Const GWL_WNDPROC = -4
Private Const WM_MOUSEWHEEL = &H20A
Private lpPrevWndProc As Long, Wheel As Integer

Sub Hook(hwnd As Long)
#If VBA7 And Win64 Then
  lpPrevWndProc = SetWindowLongPtrA(hwnd, GWL_WNDPROC, AddressOf WindowProc)
#Else
  lpPrevWndProc = SetWindowLongA(hwnd, GWL_WNDPROC, AddressOf WindowProc)
#End If
  scrollStep = 2
End Sub

Sub UnHook(hwnd As Long)
#If VBA7 And Win64 Then
  SetWindowLongPtrA hwnd, GWL_WNDPROC, lpPrevWndProc
#Else
  SetWindowLongA hwnd, GWL_WNDPROC, lpPrevWndProc
#End If
End Sub

' API |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ListBox
Function WindowProc(ByVal hwnd As Long, ByVal uMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long
  On Error GoTo xErr
  If uMsg = WM_MOUSEWHEEL Then
    Application.EnableEvents = False
    With obj
      If wParam = -7864320 Or wParam = -23592960 Or wParam = -15728640 Then
        If .ListIndex >= 0 And .ListIndex < .ListCount Then
          If (.ListCount - .ListIndex) <= scrollStep Then
            scrollStep = 1
          End If
          .ListIndex = .ListIndex + scrollStep ' scroll down
        End If
      ElseIf wParam = 7864320 Or wParam = 23592960 Or wParam = 15728640 Then
        If .ListIndex > 0 And .ListIndex < .ListCount Then
          If .ListIndex < scrollStep Then
            scrollStep = 1
          End If
          .ListIndex = .ListIndex - scrollStep ' scroll up
        End If
      End If
    End With
    Application.EnableEvents = True
  Else
    WindowProc = CallWindowProcA(lpPrevWndProc, hwnd, uMsg, wParam, lParam)
  End If
xErr:

End Function


Public Function blnIs_UserForm_Loaded(ByVal strFormName As String) As Boolean

  Dim lngICounter As Long
  
  blnIs_UserForm_Loaded = False
  For lngICounter = 0 To UserForms.Count - 1
    If UserForms(lngICounter).name = strFormName Then
      blnIs_UserForm_Loaded = True
      Exit Function
    End If
  Next lngICounter

End Function
Attribute VB_Name = "modServiceModule"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Const MODE_UNDEFINED_PROTECTION_ENABLED As Long = 0
Private Const TEST_MODE_PROTECTION_ENABLED As Long = 1
Private Const TEST_MODE_PROTECTION_DISABLED As Long = 2
Private Const RELEASE_MODE = 3

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub UNPROTECT_SHEET(ByRef wsSheet As Worksheet, _
                           Optional ByVal strPassWord As String = gPASSWORD)
  wsSheet.Unprotect strPassWord
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public Sub PROTECT_SHEET(ByRef wsSheet As Worksheet, _
                         ByVal blnDrawingObject As Boolean, _
                         Optional ByVal strPassWord As String = gPASSWORD, _
                         Optional ByVal blnEnableAutoFilter As Boolean = False)
  
  On Error GoTo ErrHandler
  
  If wsSheet Is Nothing Then GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim lngTemplateOperationMode As Long
  
  Set wbBook = wsSheet.parent
  
  lngTemplateOperationMode = CLng(varGetDocumentProperty(wbBook, "TemplateOperationMode"))
  If lngTemplateOperationMode = MODE_UNDEFINED_PROTECTION_ENABLED Or _
     lngTemplateOperationMode = RELEASE_MODE Or _
     lngTemplateOperationMode = TEST_MODE_PROTECTION_ENABLED Then
    wsSheet.Protect Password:=strPassWord, DrawingObjects:=blnDrawingObject, _
                    Contents:=True, Scenarios:=True, _
                    AllowFormattingColumns:=True, AllowFormattingRows:=True, _
                    AllowFiltering:=blnEnableAutoFilter
  End If
ErrHandler:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function varGetDocumentProperty(ByRef wbBook As Workbook, _
                                       ByVal strName As String) As Variant
  
  On Error GoTo ErrHandler
  
  If wbBook Is Nothing Then GoTo ErrHandler
  
  If strName = "Title" Or strName = "Subject" Or strName = "Company" Or strName = "Comments" Then
    varGetDocumentProperty = wbBook.BuiltinDocumentProperties(strName).value
  Else
    varGetDocumentProperty = wbBook.CustomDocumentProperties(strName).value
  End If

  GoTo CleanUp

ErrHandler:
  varGetDocumentProperty = ""
CleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function blnIsDocumentProperty(ByVal wbBook As Workbook, _
                                      ByVal strPropertyName As String) As Boolean
  
  On Error GoTo ErrHandler
  
  Dim varValue As Variant
  
  blnIsDocumentProperty = False
  
  If wbBook Is Nothing Or _
     Len(strPropertyName) = 0 Then
    GoTo ErrHandler
  End If
  
  If strPropertyName = "Title" Or strPropertyName = "Subject" Or _
     strPropertyName = "Company" Or strPropertyName = "Comments" Then
    varValue = wbBook.BuiltinDocumentProperties(strPropertyName).value
    blnIsDocumentProperty = True
  Else
    varValue = wbBook.CustomDocumentProperties(strPropertyName).value
    blnIsDocumentProperty = True
  End If

  GoTo CleanUp

ErrHandler:
  blnIsDocumentProperty = False
CleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function GetNamedRangeListFromSheet(WB As Workbook, sheet_name As String) As name()

  Dim NAMED_RANGES_ARRAY() As name
  Dim namName As name
    
  ReDim Preserve NAMED_RANGES_ARRAY(1)
  WB.Activate
    
  Dim pattern_sheet_name As String
  pattern_sheet_name = "*" + sheet_name + "!*"
    
  For Each namName In WB.Names
    If CStr(namName) Like pattern_sheet_name Then
      ReDim Preserve NAMED_RANGES_ARRAY(UBound(NAMED_RANGES_ARRAY) + 1)
      Set NAMED_RANGES_ARRAY(UBound(NAMED_RANGES_ARRAY)) = namName
    End If
  Next namName
    
  GetNamedRangeListFromSheet = NAMED_RANGES_ARRAY

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function GetWorksheetName(n As name, ws As Worksheet) As String
  On Error GoTo ErrHandler
  Dim rngRange As Range
  Set rngRange = ws.Range(n.name)
  GetWorksheetName = rngRange.parent.name
  Set rngRange = Nothing
  Exit Function
ErrHandler:
  GetWorksheetName = ""
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' NOTE: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|: "1.2.4.64.x", |fffd||fffd||fffd| x - |fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function RENUMBER_ADD_CELLS(rngRangeToRenumerate As Range) As String
  Dim rngTemp As Range
  Dim strPreviousNumberValue As String, strPreviousNumberFormula As String
  Dim strPrefix As String, strSubString As String
  Dim intVal As Integer, i As Integer
  RENUMBER_ADD_CELLS = ""
  
  If rngRangeToRenumerate Is Nothing Then Exit Function
  
  rngRangeToRenumerate.Offset(-1, 0).Select
  Set rngTemp = Selection
  If Len(CStr(rngTemp.cells(1, 1).value)) = 0 Or _
    rngRangeToRenumerate.Columns.Count <> rngTemp.Columns.Count Then
    Exit Function
  End If
  
  If rngTemp.cells(1, 1).HasFormula = True Then
    strPreviousNumberFormula = CStr(rngTemp.cells(1, 1).Formula) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    strPreviousNumberValue = CStr(rngTemp.cells(1, 1).value) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If Len(strPreviousNumberFormula) = 0 Then Exit Function
    
    strSubString = "."
    
    i = 0
    Do While InStr(Len(strPreviousNumberValue) - i, strPreviousNumberValue, strSubString) = 0
      i = i + 1
      If Len(strPreviousNumberValue) <= i Then
        Exit Do
      End If
    Loop
    
    intVal = CInt(Mid(strPreviousNumberValue, Len(strPreviousNumberValue) - i + 1, Len(strPreviousNumberValue) - i + 1))
    strPrefix = CStr(Mid(strPreviousNumberFormula, 1, Len(strPreviousNumberFormula) - i))
    
    rngRangeToRenumerate.Select
    Selection.NumberFormat = "General" ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| -
    rngRangeToRenumerate.cells(1, 1).value = strPrefix & CStr(intVal + 1)
    
    RENUMBER_ADD_CELLS = strPrefix & CStr(rngRangeToRenumerate.cells(1, 1).value)
  Else
    strPreviousNumberValue = CStr(rngTemp.cells(1, 1).value) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If Len(strPreviousNumberValue) = 0 Then Exit Function
    
    i = 0
    Do While InStr(Len(strPreviousNumberValue) - i, strPreviousNumberValue, ".") = 0
      i = i + 1
      If Len(strPreviousNumberValue) <= i Then Exit Do
    Loop
    
    intVal = CInt(Mid(strPreviousNumberValue, Len(strPreviousNumberValue) - i + 1, i))
    strPrefix = CStr(Mid(strPreviousNumberValue, 1, Len(strPreviousNumberValue) - i))
    
    rngRangeToRenumerate.Select
    Selection.NumberFormat = "@" ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| -
    rngRangeToRenumerate.cells(1, 1).value = strPrefix & CStr(intVal + 1)
    
    RENUMBER_ADD_CELLS = strPrefix & CStr(rngRangeToRenumerate.cells(1, 1).value)
  End If
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' NOTE: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|: "1.2.4.64.x", |fffd||fffd||fffd| x - |fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function RENUMBER_REMOVE_CELLS(intNCol As Integer, _
                                      intNRow As Integer, _
                                      rngRemovedNum As Range, _
                                      wsWorkSheet As Worksheet) As String
  Dim rngCell As Range
  Dim strPreviousNumberValue As String, strPreviousNumberFormula As String
  Dim strPrefix As String, strSubString As String
  Dim intVal As Integer, i As Integer
  RENUMBER_REMOVE_CELLS = ""
  
  If intNCol <= 0 Or intNRow <= 0 Or rngRemovedNum Is Nothing Then Exit Function
  
  Set rngCell = wsWorkSheet.cells(intNRow, intNCol).Offset(1, 0)
  
  If rngRemovedNum.cells(1, 1).HasFormula = True Then
    strPreviousNumberFormula = CStr(rngRemovedNum.cells(1, 1).Formula) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    strPreviousNumberValue = CStr(rngRemovedNum.cells(1, 1).value) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If Len(strPreviousNumberFormula) = 0 Then Exit Function
    
    strSubString = "."
    
    i = 0
    Do While InStr(Len(strPreviousNumberValue) - i, strPreviousNumberValue, strSubString) = 0
      i = i + 1
      If Len(strPreviousNumberValue) <= i Then
        Exit Do
      End If
    Loop
    
    intVal = CInt(Mid(strPreviousNumberValue, Len(strPreviousNumberValue) - i + 1, Len(strPreviousNumberValue) - i + 1))
    strPrefix = CStr(Mid(strPreviousNumberFormula, 1, Len(strPreviousNumberFormula) - i))
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Do While Len(CStr(rngCell.cells(1, 1).value)) > 0
      rngCell.Select
      Selection.NumberFormat = "General" ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| -
      rngCell.cells(1, 1).value = strPrefix & CStr(intVal)
      Set rngCell = rngCell.Offset(1, 0)
      intVal = intVal + 1
    Loop
    RENUMBER_REMOVE_CELLS = strPrefix & CStr(intVal - 1)
  Else
    strPreviousNumberValue = CStr(rngRemovedNum.cells(1, 1).value)     ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If Len(strPreviousNumberValue) = 0 Then Exit Function
    
    i = 0
    Do While InStr(Len(strPreviousNumberValue) - i, strPreviousNumberValue, ".") = 0
      i = i + 1
      If Len(strPreviousNumberValue) <= i Then Exit Do
    Loop
    
    intVal = CInt(Mid(strPreviousNumberValue, Len(strPreviousNumberValue) - i + 1, i))
    strPrefix = CStr(Mid(strPreviousNumberValue, 1, Len(strPreviousNumberValue) - i))
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Do While Len(CStr(rngCell.cells(1, 1).value)) > 0
      rngCell.cells(1, 1).value = strPrefix & CStr(intVal)
      rngCell.Select
      Selection.NumberFormat = "@" ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| -
      Set rngCell = rngCell.Offset(1, 0)
      intVal = intVal + 1
    Loop
    RENUMBER_REMOVE_CELLS = strPrefix & CStr(intVal - 1)
  End If
  
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SheetName |fffd| |fffd||fffd||fffd||fffd||fffd| wb
Function SheetExists(SheetName As String, WB As Workbook) As Boolean
On Error GoTo ErrHandler

Dim ws As Worksheet
SheetExists = False
For Each ws In WB.Worksheets
  If CStr(ws.name) = SheetName Then
    SheetExists = True
    Exit Function
  End If
Next

ErrHandler:
  SheetExists = False
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| strName |fffd| |fffd||fffd||fffd||fffd||fffd| wbBook
Public Function IsNameExists(wbBook As Workbook, strName As String) As Boolean
  
  On Error GoTo ErrHandler1
  
  Dim namName As name
  
  IsNameExists = True
  
  Set namName = wbBook.Names(strName)
  
  GoTo ErrHandler2

ErrHandler1:
  IsNameExists = False
  GoTo CleanUp
ErrHandler2:
  GoTo ErrHandler3
ErrHandler3:
  If Len(CStr(namName.RefersTo)) = 0 Or _
     InStr(1, CStr(namName.RefersTo), "#") > 0 Then
    IsNameExists = False
  End If
  GoTo CleanUp
CleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SetAllTahoma()
 
 Dim ws As Worksheet
 Dim WB As Workbook
 Set WB = ThisWorkbook
 
 For Each ws In WB.Worksheets
   ws.Activate
   cells.Select
   Selection.Font.name = "Tahoma"
   Selection.Font.Size = 9
 Next ws
 
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub FixAllHyperlinks()
  Dim wbThisBook As Workbook
  Dim wsSheet As Worksheet
  Dim hl As Hyperlink
  Dim rngRange As Range
  Set wbThisBook = ThisWorkbook
  For Each wsSheet In wbThisBook.Worksheets
    wsSheet.Activate
    For Each hl In wsSheet.Hyperlinks
      hl.SubAddress = Chr(39) & wsSheet.name & Chr(39) & "!A1"
      Set rngRange = hl.parent
      rngRange.Font.name = "Tahoma"
    Next hl
  Next wsSheet
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub FixAllHyperlinksInSheet()
  
  Dim wsSheet As Worksheet
  Dim hl As Hyperlink
  Dim rngRange As Range
  
  Set wsSheet = Application.ActiveSheet
  wsSheet.Activate
  modServiceModule.UNPROTECT_SHEET wsSheet
  For Each hl In wsSheet.Hyperlinks
    Set rngRange = hl.parent
    hl.SubAddress = Chr(39) & wsSheet.name & Chr(39) & "!A1"
    hl.ScreenTip = rngRange.cells(1, 1).value
    rngRange.cells(1, 1).Font.name = "Tahoma"
  Next hl

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sub Set_Numeric_Real_Validation()
  
  Dim rngCell As Range
  Dim rngRange As Range
  
  Set rngRange = Selection
  
  For Each rngCell In rngRange.cells
  
    If rngCell.Interior.ColorIndex = colorYellow Then
      rngCell.NumberFormat = "0.00"
      With rngCell.Validation
        .Delete
        .Add Type:=xlValidateDecimal, _
             AlertStyle:=xlValidAlertStop, _
             Operator:=xlBetween, _
             Formula1:="-999999999999999999999999", _
             Formula2:="999999999999999999999999"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = STR_MSGBOX_WARNING_TITLE
        .InputMessage = ""
        .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!"
        .ShowInput = True
        .ShowError = True
      End With
      rngCell.MergeArea.Locked = False
    ElseIf rngCell.Interior.ColorIndex = colorCyan Then
      rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "@"
    ElseIf rngCell.Interior.ColorIndex = colorGreen Then
      rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "0.00"
    Else
      rngCell.MergeArea.Locked = True
      rngCell.NumberFormat = "General"
    End If
    
  Next rngCell

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 200 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub Set_Numeric_Text_Validation()
  
  Dim rngCell As Range
  Dim rngRange As Range
  
  Set rngRange = Selection
  
  For Each rngCell In rngRange.cells
  
    If rngCell.Interior.ColorIndex = colorYellow Then
      rngCell.NumberFormat = "@"
      
        With rngCell.Validation
            .Delete
            .Add Type:=xlValidateTextLength, AlertStyle:=xlValidAlertStop, _
            Operator:=xlLessEqual, Formula1:="950"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = STR_MSGBOX_WARNING_TITLE
            .InputMessage = ""
            .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 950 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
            .ShowInput = True
            .ShowError = True
        End With
      
      rngCell.MergeArea.Locked = False
    ElseIf rngCell.Interior.ColorIndex = colorCyan Then
         With rngCell.Validation
            .Delete
            .Add Type:=xlValidateTextLength, AlertStyle:=xlValidAlertStop, _
            Operator:=xlLessEqual, Formula1:="950"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrcorTitle = STR_MSGBOX_WARNING_TITLE
            .InputMessage = ""
            .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 950 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
            .ShowInput = True
            .ShowError = True
        End With
     rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "@"
    Else
      rngCell.MergeArea.Locked = True
      rngCell.NumberFormat = "General"
    End If
    
  Next rngCell

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sub Set_Numeric_Positive_Validation()
  
  Dim rngCell As Range
  Dim rngRange As Range
  
  Set rngRange = Selection
  
  For Each rngCell In rngRange.cells
  
    If rngCell.Interior.ColorIndex = colorYellow Then
      rngCell.NumberFormat = "0.00"
      With rngCell.Validation
        .Delete
        .Add Type:=xlValidateDecimal, _
             AlertStyle:=xlValidAlertStop, _
             Operator:=xlBetween, _
             Formula1:="0", _
             Formula2:="999999999999999999999999"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = STR_MSGBOX_WARNING_TITLE
        .InputMessage = ""
        .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!"
        .ShowInput = True
        .ShowError = True
      End With
      rngCell.MergeArea.Locked = False
    ElseIf rngCell.Interior.ColorIndex = colorCyan Then
      rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "@"
    ElseIf rngCell.Interior.ColorIndex = colorGreen Then
      rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "0.00"
    Else
      rngCell.MergeArea.Locked = True
      rngCell.NumberFormat = "General"
    End If
    
  Next rngCell

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sub Set_Numeric_Whole_Positive_Validation()

  Dim rngCell As Range
  Dim rngRange As Range
  
  Set rngRange = Selection
  
  For Each rngCell In rngRange.cells
    rngCell.NumberFormat = "0"
    If rngCell.Interior.ColorIndex = colorYellow Then
      With rngCell.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, _
             AlertStyle:=xlValidAlertStop, _
             Operator:=xlBetween, _
             Formula1:="0", _
             Formula2:="999999999999999999999999"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = STR_MSGBOX_WARNING_TITLE
        .InputMessage = ""
        .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!"
        .ShowInput = True
        .ShowError = True
      End With
      rngCell.MergeArea.Locked = False
    ElseIf rngCell.Interior.ColorIndex = colorCyan Then
      rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "@"
    ElseIf rngCell.Interior.ColorIndex = colorGreen Then
      rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "0"
    Else
      rngCell.MergeArea.Locked = True
      rngCell.NumberFormat = "General"
    End If

  Next rngCell

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sub Set_Numeric_Whole_Validation()

  Dim rngCell As Range
  Dim rngRange As Range
  
  Set rngRange = Selection
  
  For Each rngCell In rngRange.cells
      rngCell.NumberFormat = "0"

    If rngCell.Interior.ColorIndex = colorYellow Then
      With rngCell.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, _
             AlertStyle:=xlValidAlertStop, _
             Operator:=xlBetween, _
             Formula1:="-999999999999999999999999", _
             Formula2:="999999999999999999999999"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = STR_MSGBOX_WARNING_TITLE
        .InputMessage = ""
        .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!"
        .ShowInput = True
        .ShowError = True
      End With
      rngCell.MergeArea.Locked = False
    ElseIf rngCell.Interior.ColorIndex = colorCyan Then
      rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "@"
    ElseIf rngCell.Interior.ColorIndex = colorGreen Then
      rngCell.MergeArea.Locked = False
      rngCell.NumberFormat = "0"
    Else
      rngCell.MergeArea.Locked = True
      rngCell.NumberFormat = "General"
    End If

  Next rngCell

End Sub

Sub Hide_Grid_Lines_Caller()
  Hide_Grid_Lines ThisWorkbook
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub Hide_Grid_Lines(ByVal wbBook As Workbook)
  
  On Error GoTo CleanUp
  
  Dim wsSheet As Worksheet
  Dim wsActiveSheet As Worksheet
  
  If wbBook Is Nothing Then GoTo CleanUp
  
  Set wsActiveSheet = wbBook.ActiveSheet
  
  Application.ScreenUpdating = True
  
  For Each wsSheet In wbBook.Worksheets
    If wsSheet.Tab.ColorIndex <> colorLightBrown Then
      wsSheet.Activate
      ActiveWindow.DisplayGridlines = False
    End If
  Next wsSheet
  
  wsActiveSheet.Activate
  
  GoTo CleanUp
  
CleanUp:
  Application.ScreenUpdating = True
End Sub
''
''Sub AutoFitMergedCellRowHeight(ByRef rngRange As Range, _
''                               Optional ByRef intRowHeight As Integer = 20)
''
''    Dim rngCell As Range
''    Dim rngCellTwo As Range
''    Dim rngMergeArea As Range
''    Dim rngColumn As Range
''    Dim intMaxRHeight As Integer
''    Dim intNewRHeight As Integer
''    Dim intRHeight As Integer
''    Dim intNewCWidth As Integer
''    Dim intCWidth As Integer
''
''    If rngRange.MergeCells = False Then
''      rngRange.EntireRow.AutoFit
''    Else
''      For Each rngCell In rngRange.Rows
''        intMaxRHeight = 0
''        For Each rngCellTwo In rngCell.cells
''            If rngCellTwo.MergeCells And _
''               rngCellTwo.Address = rngCellTwo.MergeArea.cells(1).Address Then
''''                  Debug.Print rngCellTwo.Address
''                  Set rngMergeArea = rngCellTwo.MergeArea
''                  intNewCWidth = 0
''                  intNewRHeight = 1
''                  With rngMergeArea
''                    intCWidth = .Columns(1).ColumnWidth
''                    .UnMerge
''                    For Each rngColumn In .EntireColumn
''                      intNewCWidth = intNewCWidth + rngColumn.ColumnWidth + 0.64
''                    Next
''                    For Each rngColumn In .EntireRow
''                      intNewRHeight = IIf(intNewRHeight = 1, 0, intNewRHeight + rngColumn.RowHeight)
''                    Next
''                    .Columns(1).ColumnWidth = intNewCWidth
''                    .EntireRow.AutoFit
''                    intRHeight = .cells(1).RowHeight - intNewRHeight
''                    If intRHeight > intMaxRHeight Then _
''                        intMaxRHeight = intRHeight
''                    .Merge
''                    .Columns(1).ColumnWidth = intCWidth
''                  End With
''            End If
''        Next rngCellTwo
''
''        If intMaxRHeight > 0 Then rngCell.EntireRow.RowHeight = intMaxRHeight
''        If intMaxRHeight < 20 Then rngCell.EntireRow.RowHeight = intRowHeight
''      Next rngCell
''    End If
''
''End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub AutoFitMergedCellRowHeight(ByRef rngRange As Range, _
                               Optional ByRef intRowHeight As Integer = 20)
    Dim rngMergeRange As Range
    Dim rngOneRange As Range
    Dim intNewHeight As Integer
    
    If rngRange.MergeCells = False Then
      rngRange.EntireRow.AutoFit
    ElseIf rngRange.cells(1, 1).MergeArea.Rows.Count > 1 Then
      Set rngMergeRange = rngRange.cells(1, 1).MergeArea
      With rngMergeRange
          .UnMerge
          .EntireRow.AutoFit
          intNewHeight = .Rows(1).Height
          .Merge:
      End With
      intNewHeight = intNewHeight / rngMergeRange.Rows.Count + 2
      If intNewHeight < intRowHeight Then intNewHeight = intRowHeight
      For Each rngOneRange In rngMergeRange.Rows
        rngOneRange.RowHeight = intNewHeight
      Next rngOneRange
    End If
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SheetCodeName |fffd| |fffd||fffd||fffd||fffd||fffd| wbBook (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
Public Function GetWsByCodeName(SheetCodeName As String, Optional ByVal wbBook As Workbook) As Worksheet

  On Error GoTo ErrHandler
  Dim ws As Worksheet
  If wbBook Is Nothing Then
    Set wbBook = ThisWorkbook
  End If
  For Each ws In wbBook.Worksheets
    If ws.CodeName = SheetCodeName Then
      Set GetWsByCodeName = ws
      GoTo CleanUp
    End If
  Next
  
ErrHandler:
  GetWsByCodeName = xlNothing
  GoTo CleanUp

CleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SheetCodeName |fffd| |fffd||fffd||fffd||fffd||fffd| wbBook
Public Function CodeNameSheetExists(SheetCodeName As String, Optional ByVal wbBook As Workbook) As Boolean

  On Error GoTo ErrHandler
  If wbBook Is Nothing Then
    Set wbBook = ThisWorkbook
  End If
  Dim ws As Worksheet
  CodeNameSheetExists = False
  For Each ws In wbBook.Worksheets
    If ws.CodeName = SheetCodeName Then
      CodeNameSheetExists = True
      GoTo CleanUp
    End If
  Next
  
ErrHandler:
  CodeNameSheetExists = False
  GoTo CleanUp

CleanUp:
End Function

Function strHypperlinkExists(strURL As String) As String
  
  Dim objXHTTP As Object
  Set objXHTTP = CreateObject("MSXML2.XMLHTTP")

  If InStr(1, LCase(strURL), "http") <> 1 And _
     InStr(1, LCase(strURL), "ftp") <> 1 Then
    strURL = "http://" & strURL
  End If

  On Error GoTo ErrHttpExists
  
  objXHTTP.Open "HEAD", strURL, False, " ", " "
  objXHTTP.send
  
  strHypperlinkExists = objXHTTP.status
  GoTo CleanUp

ErrHttpExists:
  Debug.Print Err.Number
  GoTo CleanUp

CleanUp:
End Function

Public Sub WorkbookAfterPrint()
  
  On Error GoTo CleanUp
  
  Dim wbBook As Workbook
  
  Dim rngRange As Range
  Dim rngCell As Range
  
  Dim strCenterFooter As String
  Dim strNameColumn As String
  Dim strNameRow As String
  
  Dim intCounter As Integer
  Dim intCounter2 As Integer
  Dim intCounterEndRow As Integer
   
  Set wbBook = Application.ThisWorkbook

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  strNameColumn = "hide_me_column_"
  strNameRow = "hide_me_row_"
  For intCounter = 1 To 6
    If intCounter = 1 Then
         intCounterEndRow = 2
                   
          ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|... |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| :)
          If modServiceModule.IsNameExists(wbBook, "createPrintForm") = True Then
            wbBook.Names("createPrintForm").RefersToRange.EntireRow.Hidden = False
          End If

    ElseIf intCounter = 3 Or intCounter = 4 Or _
           intCounter = 5 Or intCounter = 6 Then
         intCounterEndRow = 1
    Else
         intCounterEndRow = 4
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For intCounter2 = 1 To 2
      If modServiceModule.IsNameExists(wbBook, strNameColumn & CStr(intCounter) & "_" & CStr(intCounter2)) = True Then
        wbBook.Names(strNameColumn & CStr(intCounter) & "_" & CStr(intCounter2)).RefersToRange.EntireColumn.Hidden = False
      End If
    Next intCounter2
        
    ' |fffd||fffd||fffd||fffd||fffd||fffd|
    If intCounter <> 6 Then
        For intCounter2 = 1 To intCounterEndRow
          If (intCounter2 = 2 And intCounter = 1) Or _
              intCounter = 4 Then
            If modServiceModule.IsNameExists(wbBook, strNameRow & CStr(intCounter) & "_" & CStr(intCounter2)) = True Then
              For Each rngCell In wbBook.Names(strNameRow & CStr(intCounter) & "_" & CStr(intCounter2)).RefersToRange.Columns(9).cells
                If InStr(1, rngCell.value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") = 1 Or _
                   InStr(1, rngCell.Offset(0, -2).cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") = 1 Or _
                   InStr(1, rngCell.Offset(0, -3).cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") = 1 Then
                  rngCell.EntireRow.Hidden = False
                End If
              Next rngCell
            End If
          Else
            If modServiceModule.IsNameExists(wbBook, strNameRow & CStr(intCounter) & "_" & CStr(intCounter2)) = True Then
              wbBook.Names(strNameRow & CStr(intCounter) & "_" & CStr(intCounter2)).RefersToRange.EntireRow.Hidden = False
            End If
          End If
        Next intCounter2
    End If
  Next intCounter

CleanUp:

End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub ClearBrokenNamesInWorkbook(WB As Workbook)
  Dim nam As name
  For Each nam In WB.Names
      If (InStr(1, nam.value, "\") > 0) _
         Or (InStr(1, nam.value, "REF") > 0) _
         Or (InStr(1, nam.value, "#") > 0) _
         Or (InStr(1, nam.value, "xls") > 0) _
         Or (InStr(1, nam.value, "/") > 0) _
         Or ((InStr(1, nam.name, "!") > 0) And (InStr(1, nam.name, "Print_Area") = 0)) _
         Or (InStr(1, nam.name, "?") > 0) Then
        nam.Delete
      End If
  Next nam

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub CreateCheckSheet(wbBook As Workbook, strSheetName As String)
    
    Dim wsSheet As Worksheet
    
    wbBook.Sheets("CheckCopy").Visible = xlSheetVisible
    
    wbBook.Sheets("CheckCopy").Select
    wbBook.Sheets("CheckCopy").Copy after:=wbBook.Worksheets(gstrCommentsSheetName)
    wbBook.ActiveSheet.name = strSheetName
    Set wsSheet = wbBook.Worksheets(strSheetName)
    wsSheet.Select
    wsSheet.Tab.ColorIndex = wbBook.Worksheets(gstrCommentsSheetName).Tab.ColorIndex
    
    wbBook.Sheets("CheckCopy").Visible = xlSheetVeryHidden

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function strCheckNamesRange(ByVal wbBook As Workbook) As String

  On Error GoTo ErrHandler
  
  strCheckNamesRange = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|!"

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ' |fffd||fffd||fffd||fffd||fffd|
  If modServiceModule.IsNameExists(wbBook, "activity") = False Or modServiceModule.IsNameExists(wbBook, "add_COMMENTS_range") = False Or _
     modServiceModule.IsNameExists(wbBook, "add_HYPERLINK_range") = False Or modServiceModule.IsNameExists(wbBook, "add_MO_range") = False Or _
     modServiceModule.IsNameExists(wbBook, "add_MR_range") = False Or modServiceModule.IsNameExists(wbBook, "add_PRICE_2_range") = False Or _
     modServiceModule.IsNameExists(wbBook, "checkCell_1") = False Or modServiceModule.IsNameExists(wbBook, "checkCell_2") = False Or _
     modServiceModule.IsNameExists(wbBook, "checkCell_3") = False Or modServiceModule.IsNameExists(wbBook, "colorIndexCellsPrice2") = False Or _
     modServiceModule.IsNameExists(wbBook, "code") = False Or modServiceModule.IsNameExists(wbBook, "colorIndexCells") = False Or _
     modServiceModule.IsNameExists(wbBook, "comments_for_CRO") = False Or modServiceModule.IsNameExists(wbBook, "comments_for_CRO_value") = False Or _
     modServiceModule.IsNameExists(wbBook, "Consultation_1") = False Or modServiceModule.IsNameExists(wbBook, "Consultation_2") = False Or _
     modServiceModule.IsNameExists(wbBook, "createPrintForm") = False Or modServiceModule.IsNameExists(wbBook, "Date_of_publication") = False Or _
     modServiceModule.IsNameExists(wbBook, "datePrice") = False Or modServiceModule.IsNameExists(wbBook, "datePriceTwo") = False Or _
     modServiceModule.IsNameExists(wbBook, "DAY") = False Or modServiceModule.IsNameExists(wbBook, "periodPrice") = False Or _
     modServiceModule.IsNameExists(wbBook, "periodPriceTwo") = False Or modServiceModule.IsNameExists(wbBook, "resolutionPrice") = False Or _
     modServiceModule.IsNameExists(wbBook, "resolutionPriceTwo") = False Then _
          GoTo CleanUp
  
  If modServiceModule.IsNameExists(wbBook, "details_of_org_address") = False Or modServiceModule.IsNameExists(wbBook, "details_of_org_buhg") = False Or _
     modServiceModule.IsNameExists(wbBook, "details_of_org_etc") = False Or modServiceModule.IsNameExists(wbBook, "details_of_org_main") = False Or _
     modServiceModule.IsNameExists(wbBook, "DocProp_TemplateCode") = False Or modServiceModule.IsNameExists(wbBook, "DocProp_Version") = False Or _
     modServiceModule.IsNameExists(wbBook, "fil") = False Or _
     modServiceModule.IsNameExists(wbBook, "fil_flag") = False Or modServiceModule.IsNameExists(wbBook, "flag_publication") = False Or _
     modServiceModule.IsNameExists(wbBook, "flag_ipr") = False Or modServiceModule.IsNameExists(wbBook, "flag_main_template") = False Or _
     modServiceModule.IsNameExists(wbBook, "flag_two_part_tariff_price") = False Or modServiceModule.IsNameExists(wbBook, "flag_two_part_tariff_priceOP") = False Or _
     modServiceModule.IsNameExists(wbBook, "godEnd") = False Or modServiceModule.IsNameExists(wbBook, "godStart") = False Or _
     modServiceModule.IsNameExists(wbBook, "InfAddressInHyperlinks") = False Or modServiceModule.IsNameExists(wbBook, "InfClickCmdOrganizationChoiceInTitle") = False Or _
     modServiceModule.IsNameExists(wbBook, "InfClickCmdUpdateReestrMOInTitle") = False Or modServiceModule.IsNameExists(wbBook, "InfDateInTitle") = False Or _
     modServiceModule.IsNameExists(wbBook, "InfFilFlagInTitle") = False Or modServiceModule.IsNameExists(wbBook, "InfFlagCrossSubsidization") = False Or _
     modServiceModule.IsNameExists(wbBook, "InfFlagTwoPartTariff") = False Or modServiceModule.IsNameExists(wbBook, "InfKindsOfGoods") = False Or _
     modServiceModule.IsNameExists(wbBook, "InfoForMOInTitle") = False Or modServiceModule.IsNameExists(wbBook, "InfoForMRInTitle") = False Or _
     modServiceModule.IsNameExists(wbBook, "InfPeriodInTitle") = False Or modServiceModule.IsNameExists(wbBook, "chkGetUpdatesValue") = False Or _
     modServiceModule.IsNameExists(wbBook, "chkNoUpdatesValue") = False Or modServiceModule.IsNameExists(wbBook, "Website_address_internet") = False Then _
          GoTo CleanUp

  If modServiceModule.IsNameExists(wbBook, "InfSKIInTitle") = False Or modServiceModule.IsNameExists(wbBook, "InfSKINumberInTitle") = False Or _
     modServiceModule.IsNameExists(wbBook, "InfSourcePublicationOnTitle") = False Or modServiceModule.IsNameExists(wbBook, "InfStrPublication") = False Or _
     modServiceModule.IsNameExists(wbBook, "InfValidityInPrices") = False Or modServiceModule.IsNameExists(wbBook, "inn") = False Or _
     modServiceModule.IsNameExists(wbBook, "InstrBlock_1") = False Or modServiceModule.IsNameExists(wbBook, "InstrBlock_2") = False Or _
     modServiceModule.IsNameExists(wbBook, "InstrBlock_3") = False Or modServiceModule.IsNameExists(wbBook, "InstrBlock_4") = False Or _
     modServiceModule.IsNameExists(wbBook, "InstrBlock_5") = False Or modServiceModule.IsNameExists(wbBook, "InstrBlock_6") = False Or _
     modServiceModule.IsNameExists(wbBook, "InstrBlock_7") = False Or modServiceModule.IsNameExists(wbBook, "InstrBlock_8") = False Or _
     modServiceModule.IsNameExists(wbBook, "InstrBlock_9") = False Or modServiceModule.IsNameExists(wbBook, "InstrTitle_1") = False Or _
     modServiceModule.IsNameExists(wbBook, "InstrTitle_2") = False Or modServiceModule.IsNameExists(wbBook, "InstrTitle_3") = False Or _
     modServiceModule.IsNameExists(wbBook, "InstrTitle_4") = False Or modServiceModule.IsNameExists(wbBook, "InstrTitle_5") = False Or _
     modServiceModule.IsNameExists(wbBook, "InstrTitle_6") = False Or modServiceModule.IsNameExists(wbBook, "InstrTitle_7") = False Or _
     modServiceModule.IsNameExists(wbBook, "InstrTitle_8") = False Or modServiceModule.IsNameExists(wbBook, "InstrTitle_9") = False Or _
     modServiceModule.IsNameExists(wbBook, "ipr_pub") = False Or modServiceModule.IsNameExists(wbBook, "ipr_pub_comm") = False Or _
     modServiceModule.IsNameExists(wbBook, "kind_of_activity") = False Or modServiceModule.IsNameExists(wbBook, "kind_of_activity_HVS") = False Or _
     modServiceModule.IsNameExists(wbBook, "kind_of_activity_VO") = False Or modServiceModule.IsNameExists(wbBook, "kind_of_activity_WARM") = False Or _
     modServiceModule.IsNameExists(wbBook, "kind_of_consumers") = False Or modServiceModule.IsNameExists(wbBook, "kind_of_fuels") = False Or _
     modServiceModule.IsNameExists(wbBook, "kind_of_heat_transfer") = False Or modServiceModule.IsNameExists(wbBook, "kind_of_name_source") = False Or _
     modServiceModule.IsNameExists(wbBook, "kind_of_NDS") = False Or modServiceModule.IsNameExists(wbBook, "kind_of_NDS_people") = False Or _
     modServiceModule.IsNameExists(wbBook, "kind_of_NDS_TBO") = False Or modServiceModule.IsNameExists(wbBook, "kind_of_purchase_method") = False Or _
     modServiceModule.IsNameExists(wbBook, "kind_of_tariff_unit") = False Or modServiceModule.IsNameExists(wbBook, "kind_of_unit_GVS") = False Then _
          GoTo CleanUp

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Select Case wbBook.Names("TSphere_trans").RefersToRange.cells(1, 1).value
    Case "WARM"
      If modServiceModule.IsNameExists(wbBook, "description_SKI") = False Or _
         modServiceModule.IsNameExists(wbBook, "SKI") = False Or modServiceModule.IsNameExists(wbBook, "unitWARM") = False Or _
         modServiceModule.IsNameExists(wbBook, "checkProizv") = False Or modServiceModule.IsNameExists(wbBook, "checkPeredacha") = False Or _
         modServiceModule.IsNameExists(wbBook, "checkSbyt") = False Or modServiceModule.IsNameExists(wbBook, "flag_cross_subsidization") = False Or _
         modServiceModule.IsNameExists(wbBook, "flag_two_part_tariff") = False Or modServiceModule.IsNameExists(wbBook, "Information") = False Or _
         modServiceModule.IsNameExists(wbBook, "add_PRICE_range_WARM") = False Then _
        GoTo CleanUp
    Case "GVS"
      If modServiceModule.IsNameExists(wbBook, "description_SKI") = False Or _
         modServiceModule.IsNameExists(wbBook, "SKI") = False Or modServiceModule.IsNameExists(wbBook, "unitGVS") = False Or _
         modServiceModule.IsNameExists(wbBook, "flag_cross_subsidization") = False Or modServiceModule.IsNameExists(wbBook, "flag_two_part_tariff") = False Or _
         modServiceModule.IsNameExists(wbBook, "Information") = False Or modServiceModule.IsNameExists(wbBook, "add_PRICE_range") = False Then _
        GoTo CleanUp
    Case "HVS"
      If modServiceModule.IsNameExists(wbBook, "description_SKI") = False Or modServiceModule.IsNameExists(wbBook, "SKI") = False Or _
         modServiceModule.IsNameExists(wbBook, "flag_cross_subsidization") = False Or modServiceModule.IsNameExists(wbBook, "flag_two_part_tariff") = False Or _
         modServiceModule.IsNameExists(wbBook, "Information") = False Or modServiceModule.IsNameExists(wbBook, "comment_kind_of_goods") = False Or _
         modServiceModule.IsNameExists(wbBook, "etc_kind_of_goods") = False Or modServiceModule.IsNameExists(wbBook, "add_PRICE_range") = False Then _
        GoTo CleanUp
    Case "VO"
      If modServiceModule.IsNameExists(wbBook, "description_SKI") = False Or modServiceModule.IsNameExists(wbBook, "SKI") = False Or _
         modServiceModule.IsNameExists(wbBook, "flag_cross_subsidization") = False Or modServiceModule.IsNameExists(wbBook, "flag_two_part_tariff") = False Or _
         modServiceModule.IsNameExists(wbBook, "Information") = False Or modServiceModule.IsNameExists(wbBook, "add_PRICE_range") = False Then _
        GoTo CleanUp
    Case "VO"
      If modServiceModule.IsNameExists(wbBook, "Information") = False Or modServiceModule.IsNameExists(wbBook, "add_PRICE_range") = False Then _
        GoTo CleanUp
  End Select
  
  strCheckNamesRange = vbNullString
  
  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
  
CleanUp:

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub RepaintCellsInRange(ByVal intNumberRow As Integer, _
                               ByVal intCountRow As Integer, _
                               ByVal rngColorRange As Range)

  On Error GoTo ErrHandler
  
  Dim rngRange As Range
  Dim rngCell As Range
  Dim wsSheet As Worksheet
  
  Set wsSheet = rngColorRange.parent
  
  For Each rngCell In rngColorRange
    Set rngRange = wsSheet.Range(wsSheet.cells(intNumberRow, rngCell.Column), _
                                 wsSheet.cells(intNumberRow + intCountRow - 1, rngCell.Column))
    rngRange.Interior.ColorIndex = CInt(rngCell.value)
    If CInt(rngCell.value) = colorCyan Or CInt(rngCell.value) = colorYellow Then
      rngRange.Locked = False
    Else
      rngRange.Locked = True
    End If
  Next rngCell
  
  GoTo CleanUp

ErrHandler:
  MsgBox Err.Description, vbOKOnly, wsSheet.name
  
CleanUp:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SetFormulsInRange(ByVal intNumberRow As Integer, _
                             ByVal intCountRow As Integer, _
                             ByVal rngFormulsRange As Range)

  On Error GoTo ErrHandler
  
  Dim rngRange As Range
  Dim rngCell As Range
  Dim rngCellOne As Range
  Dim wsSheet As Worksheet
  
  Set wsSheet = rngFormulsRange.parent
  
  For Each rngCell In rngFormulsRange
    Set rngRange = wsSheet.Range(wsSheet.cells(intNumberRow, rngCell.Column), _
                                 wsSheet.cells(intNumberRow + intCountRow - 1, rngCell.Column))
      For Each rngCellOne In rngRange
        If CInt(rngCell.value) < 0 Then
          rngCellOne.FormulaLocal = "=" & rngCellOne.Offset(0, CInt(rngCell.value)).Address(False, False)
        ElseIf InStr(1, rngCellOne.FormulaLocal, "=") = 1 Then
          rngCellOne.value = vbNullString
        End If
      Next rngCellOne
  Next rngCell
  
  GoTo CleanUp

ErrHandler:
  MsgBox Err.Description, vbOKOnly, wsSheet.name
  
CleanUp:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub ClearWhiteCellsInRange(ByVal intNumberRow As Integer, _
                                  ByVal intCountRow As Integer, _
                                  ByVal rngForCountingRange As Range)

  On Error GoTo ErrHandler
  
  Dim rngRange As Range
  Dim rngCell As Range
  Dim rngCellOne As Range
  Dim wsSheet As Worksheet
  Dim strRangeName As String
  
  Set wsSheet = rngForCountingRange.parent
  
  For Each rngCell In rngForCountingRange
    Set rngRange = wsSheet.Range(wsSheet.cells(intNumberRow, rngCell.Column), _
                                 wsSheet.cells(intNumberRow + intCountRow - 1, rngCell.Column))
      For Each rngCellOne In rngRange
        ' |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If modServiceModule.IsNameExists(wsSheet.parent, "add_PRICE_range_WARM") Then
          strRangeName = "add_PRICE_range_WARM"
        ElseIf modServiceModule.IsNameExists(wsSheet.parent, "add_PRICE_range") Then
          strRangeName = "add_PRICE_range"
        Else
          strRangeName = "A1"
        End If
        
        If Application.Intersect(rngCellOne, wsSheet.Range(strRangeName)) Is Nothing Then
            If Not (rngCellOne.Interior.ColorIndex = colorCyan Or _
                    rngCellOne.Interior.ColorIndex = colorYellow Or _
                    rngCellOne.Interior.ColorIndex = colorGreen Or _
                    rngCellOne.Interior.ColorIndex = colorLightBlue) And _
               rngCellOne.value <> "x" Then
              rngCellOne.value = vbNullString
            End If
        End If
      Next rngCellOne
  Next rngCell
  
  GoTo CleanUp

ErrHandler:
  MsgBox Err.Description, vbOKOnly, wsSheet.name
  
CleanUp:
End Sub

Attribute VB_Name = "modSheetMain01"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public wbBookForPrint As Workbook
    
Private bflagExceptionRegion As Boolean   ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd| true - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/

Private ISect

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const strRegion_4_78 As String = "|fffd|.|fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Private Const strRegion_6_22 As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub cmdCreatePrintedForm_Click()
  Dim wsSheet As Worksheet
  
  Set wsSheet = Me.parent.Sheets(gstrMainSheetName)
  modSheetMain01.SheetMain01_Hyperlink_Handler wsSheet.Range("createPrintForm"), wsSheet
End Sub

Public Sub SheetMain01_Worksheet_Change(ByVal Target As Range)
  SheetMain01_Change_Handler Target
End Sub

Public Sub SheetMain01_Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  SheetMain01_Hyperlink_Handler Target.Range, Target.Range.parent
End Sub

Public Sub SheetMain01_Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  SheetMain01_BeforeDoubleClick_Handler Target, Cancel
End Sub

Public Sub SheetMain01_Worksheet_SelectionChange(ByVal Target As Range)
  SheetMain01_Worksheet_Deactivate
End Sub

Public Sub SheetMain01_Worksheet_Deactivate()
  If modScrolling.blnIs_UserForm_Loaded("frmSheetReference") = True Then
    Unload frmSheetReference
  End If
End Sub

' -------------------------------
' --  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  --
' -------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain01_BeforeDoubleClick_Handler(Target As Range, ByRef Cancel As Boolean)

  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  Dim wsHyperlinkSheet As Worksheet
  
  Dim rngCell As Range
  Dim rngRange As Range
  Dim rngCellTwo As Range
  
  Dim ISectDate
  Dim ISectDateTemp
  Dim ISectPublication
  Dim ISectComments
  
  Dim strGoToAddress As String
  
  Dim intColorIndex As Integer
  
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean

  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  
  If Target Is Nothing Then GoTo ErrHandler
  
  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
  Set wsHyperlinkSheet = wbBook.Worksheets(gstrHyperlinkSheetName)
  Set ISectDate = Nothing
  Set ISectPublication = Nothing
  
  If modServiceModule.IsNameExists(ThisWorkbook, "godStart") = False Or _
     modServiceModule.IsNameExists(ThisWorkbook, "godEnd") = False Or _
     modServiceModule.IsNameExists(ThisWorkbook, "flag_publication") = False Then
       GoTo ErrHandler
  Else
      ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
       Set ISectDate = Application.Intersect(Target, Union(wsSheet.Range("godStart"), _
                                                           wsSheet.Range("godEnd")))
      ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Set ISectPublication = Application.Intersect(Target, wsSheet.Range("flag_publication"))
  End If
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  If Target.cells(1, 1).Interior.ColorIndex = colorLightBlue And _
     (Not ISectDate Is Nothing) Then
     
    modServiceModule.UNPROTECT_SHEET wsSheet
    
inputNewDate:
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If Len(Trim(Target.cells(1, 1).value)) <> 0 Then
     intDay = Split(Target.cells(1, 1).value, ".")(0)
     intMonth = Split(Target.cells(1, 1).value, ".")(1)
     intYear = Split(Target.cells(1, 1).value, ".")(2)
    Else
     intDay = 0
    End If
    
    Cancel = True
    frmDateChoose.Show vbModal
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Target.cells(1, 1).value = modGlobals.STR_SELECT_DATE
      
    If Len(Trim(Target.cells(1, 1).value)) <> 0 Then
      If MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - " & modGlobals.STR_SELECT_DATE & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '" & _
                Target.cells(1, 1).Offset(0, -1).MergeArea.cells(1, 1).value & _
                "', |fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!") <> _
                vbYes Then
        Target.cells(1, 1).value = modGlobals.STR_SELECT_DATE
        GoTo inputNewDate
      End If
    End If
    
    If Len(Trim(wbBook.Names("godStart").RefersToRange.value)) <> 0 And _
       Len(Trim(wbBook.Names("godEnd").RefersToRange.value)) <> 0 Then
      If (CDate(wbBook.Names("godStart").RefersToRange.value) > _
          CDate(wbBook.Names("godEnd").RefersToRange.value)) Then
        MsgBox "|fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' (" & _
               wbBook.Names("godStart").RefersToRange.value & "), |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, " & _
               " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' (" & _
               wbBook.Names("godEnd").RefersToRange.value & ")!", _
               vbCritical, _
               STR_MSGBOX_WARNING_TITLE
        Target.cells(1, 1).value = modGlobals.STR_SELECT_DATE
        GoTo inputNewDate
      End If
    End If
    
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo CleanUp
  
  ElseIf Target.cells(1, 1).Interior.ColorIndex = colorLightBlue And _
         (Not ISectPublication Is Nothing) Then                         ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    modServiceModule.UNPROTECT_SHEET wsSheet
    Cancel = True
    If Len(Trim(Target.cells(1, 1).value)) <> 0 Then
      Target.cells(1, 1).value = vbNullString
    Else
      Target.cells(1, 1).value = "a"
    End If

    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    wsHyperlinkSheet.Activate
    
    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    intColorIndex = colorCyan
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd|
    If InStr(1, LCase(Target.cells(1, 1).Offset(0, -1).value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|") = 1 And _
       LCase(wbBook.Names("region_name").RefersToRange.cells(1, 1).value) = strRegion_4_78 Then
      intColorIndex = colorYellow
    End If
    
    modServiceModule.UNPROTECT_SHEET wsHyperlinkSheet

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For Each rngCell In wsHyperlinkSheet.Range("checkCell_3").Columns(2).cells
      
      If InStr(1, LCase(rngCell.value), LCase(Target.cells(1, 1).Offset(0, -1).value)) = 1 And _
         Len(Trim(rngCell.Offset(0, -1).value)) <> 0 Then
       
        ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd|/|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        rngCell.EntireRow.Hidden = False
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Set rngRange = wsHyperlinkSheet.Range(rngCell.cells(1, 1).Offset(0, 1), rngCell.cells(1, 1).Offset(0, 6))
        
        rngRange.Locked = True
        rngRange.Interior.ColorIndex = xlNone
        
        If LCase(Target.cells(1, 1).value) = "a" Then
          For Each rngCellTwo In rngRange
             Set ISectDate = Application.Intersect(rngCellTwo, wsHyperlinkSheet.Range("Date_of_publication"))
             Set ISectComments = Application.Intersect(rngCellTwo, wsHyperlinkSheet.Range("comments_for_CRO_value"))
             If Not ISectDate Is Nothing And _
                InStr(1, rngCellTwo.value, "x") <> 1 Then
                  rngCellTwo.Interior.ColorIndex = colorLightBlue
             ElseIf Not ISectComments Is Nothing Then
                  rngCellTwo.Interior.ColorIndex = colorWhite
                  rngCellTwo.Locked = True
             ElseIf InStr(1, rngCellTwo.value, "x") <> 1 Then
                  rngCellTwo.Interior.ColorIndex = intColorIndex
                  rngCellTwo.Locked = False
             End If
          Next rngCellTwo
        Else
          rngCell.EntireRow.Hidden = True
          For Each rngCellTwo In rngRange
             If InStr(1, rngCellTwo.value, "x") <> 1 Then
               rngCellTwo.cells(1, 1) = vbNullString
             End If
          Next rngCellTwo
        End If
      End If
    Next rngCell
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|
    If wsHyperlinkSheet.Range("checkCell_3").Columns(3).Find("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , xlValues, xlPart) Is Nothing Then
      wsHyperlinkSheet.Range("comments_for_CRO").value = "True"
      wsHyperlinkSheet.Range("comments_for_CRO").cells(1, 1).Offset(2, 0).value = "3"
    Else
      wsHyperlinkSheet.Range("comments_for_CRO").value = "False"
      wsHyperlinkSheet.Range("comments_for_CRO").cells(1, 1).Offset(2, 0).value = "4"
    End If
    wsHyperlinkSheet.Range("checkCell_3").Columns(4).EntireColumn.Hidden = wsHyperlinkSheet.Range("comments_for_CRO").value
    
    modServiceModule.PROTECT_SHEET wsHyperlinkSheet, True

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "|fffd||fffd||fffd|" |fffd||fffd||fffd||fffd|
    wsSheet.Activate
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo CleanUp
  
  End If
  
  GoTo CleanUp
  
ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain01_Change_Handler(Target As Range)
  
  On Error GoTo ErrChange
  
  Dim wbBook As Workbook

  Dim wsSheet As Worksheet
  
  Dim strCurrentRegion As String
  Dim strResponse As String
  
  Dim intCounter As Integer
  
  Dim rngCell As Range
    
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean

  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
    
  Application.EnableEvents = False
  Application.ScreenUpdating = False

  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
  
  strResponse = modServiceModule.strCheckNamesRange(wbBook)
  If Len(Trim(strResponse)) <> 0 Then
    MsgBox strResponse, vbCritical, STR_MSGBOX_WARNING_TITLE
    GoTo CleanUp
  End If
  
  strCurrentRegion = wbBook.Names("region_name").RefersToRange.value
  bflagExceptionRegion = False
  For Each rngCell In wbBook.Names("region_exception").RefersToRange.cells
    If rngCell.value = strCurrentRegion Then bflagExceptionRegion = True
  Next rngCell
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  Dim intRowHeight As Integer
  If Target.cells(1, 1).Interior.ColorIndex = modGlobals.colorCyan Or _
     Target.cells(1, 1).Interior.ColorIndex = modGlobals.colorGreen Or _
     Target.cells(1, 1).Interior.ColorIndex = modGlobals.colorYellow Then
       If Not Target.MergeCells Then
         Target.cells(1, 1).EntireRow.AutoFit
         intRowHeight = Target.cells(1, 1).RowHeight
         If intRowHeight < 25 Then Target.cells(1, 1).RowHeight = 25
       End If
  End If
  
  If SheetMain01_Change_MainCells(wsSheet, Target) Then                         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|
    GoTo CleanUp
  ElseIf SheetMain01_Change_FilFlag(wsSheet, Target) Then                       ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    GoTo CleanUp
  ElseIf SheetMain01_Change_MR(wsSheet, Target) Then                            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    GoTo CleanUp
  ElseIf SheetMain01_Change_MO(wsSheet, Target) Then                            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    GoTo CleanUp
  ElseIf SheetMain01_Change_KindsOfGoods(wsSheet, Target) Then                  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    GoTo CleanUp
  ElseIf SheetMain01_Change_Publication(wsSheet, Target) Then                   ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    GoTo CleanUp
  Else
    GoTo CleanUp
  End If

RecoverSheetHyperlink:
  wsSheet.Activate
  modServiceModule.UNPROTECT_SHEET wsSheet
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For Each rngCell In wsSheet.Range("flag_publication")
    If rngCell.value = "a" Then
      rngCell.value = vbNullString
    Else
      rngCell.value = "a"
    End If
  Next rngCell
  modServiceModule.PROTECT_SHEET wsSheet, True

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For intCounter = 1 To wsSheet.Range("flag_publication").Rows.Count
    modSheetMain01.SheetMain01_BeforeDoubleClick_Handler wsSheet.Range("flag_publication").cells(intCounter, 1), False
  Next intCounter
  
  GoTo CleanUp

ErrChange:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal
  If Not wsSheet Is Nothing Then
    wsSheet.Activate
  End If
  
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|
Public Function SheetMain01_Change_MainCells(ByVal wsSheet As Worksheet, _
                                             ByVal Target As Range) As Boolean

    On Error GoTo ErrChange
    SheetMain01_Change_MainCells = False

    Dim wbBook As Workbook
    Dim wsPriceSheet As Worksheet
    Dim rngRange As Range
    Dim strNameRange(6) As String
    Dim intCounter As Integer

    Set wbBook = wsSheet.parent
    Set wsPriceSheet = sheetMain02
   
    strNameRange(1) = "flag_two_part_tariff"
    strNameRange(2) = "NDS_org"
    strNameRange(3) = "NDS_budget"
    strNameRange(4) = "NDS_pop"
    strNameRange(5) = "NDS_etc"
    strNameRange(6) = "flag_cross_subsidization"
    
    Set rngRange = Nothing
    
    For intCounter = LBound(strNameRange) To UBound(strNameRange)
        If modServiceModule.IsNameExists(wbBook, strNameRange(intCounter)) Then
          If rngRange Is Nothing Then
            Set rngRange = wsSheet.Range(strNameRange(intCounter))
          Else
            Set rngRange = Union(rngRange, wsSheet.Range(strNameRange(intCounter)))
          End If
        End If
    Next intCounter
    
    Set ISect = Nothing
    If Not (rngRange Is Nothing) Then _
      Set ISect = Application.Intersect(Target, rngRange)
        
    If ISect Is Nothing Then _
      GoTo CleanUp

    wsSheet.Activate
    modServiceModule.UNPROTECT_SHEET wsSheet
     
    ' |fffd||fffd||fffd||fffd| 2-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|
    If Not (Application.Intersect(Target, wsSheet.Range("flag_two_part_tariff")) Is Nothing) And _
       modServiceModule.IsNameExists(wbBook, "unitGVS") Then
        If Target.cells(1, 1).value = "|fffd||fffd|" Then
          wsSheet.Range("unitGVS").RowHeight = 25
          wsSheet.Range("unitGVS").Select
          Selection.Interior.ColorIndex = colorCyan
          Selection.Locked = False
        Else
          wsSheet.Range("unitGVS").RowHeight = 0
          wsSheet.Range("unitGVS").Select
          Selection.ClearContents
          Selection.Interior.ColorIndex = colorWhite
          Selection.Locked = True
        End If
    End If
     
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    wsPriceSheet.Activate
    modServiceModule.UNPROTECT_SHEET wsPriceSheet
   
   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbBook, "flag_two_part_tariff") Then _
      SheetMain01_Check_TwoPart wsSheet, wsPriceSheet
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbBook, "NDS_org") Then _
      SheetMain01_Check_NDS wsSheet, wsPriceSheet
    ' |fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbBook, "flag_cross_subsidization") Then _
      SheetMain01_Check_CrossSub wsSheet, wsPriceSheet
    

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    modServiceModule.RepaintCellsInRange wsPriceSheet.Range("checkCell_1").cells(1, 1).Row, _
                                           wsPriceSheet.Range("checkCell_1").Rows.Count, _
                                           wsPriceSheet.Range("colorIndexCells")

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbBook, "sheetMain02_notColorWARM") Then
      wsPriceSheet.Range("sheetMain02_notColorWARM").Interior.ColorIndex = colorWhite
      wsPriceSheet.Range("sheetMain02_notColorWARM").Locked = True
    End If
    If modServiceModule.IsNameExists(wbBook, "sheetMain02_notColor2WARM") Then
      wsPriceSheet.Range("sheetMain02_notColor2WARM").Interior.ColorIndex = colorWhite
      wsPriceSheet.Range("sheetMain02_notColor2WARM").Locked = True
    End If
    If modServiceModule.IsNameExists(wbBook, "sheetMain02_notColor") Then
      wsPriceSheet.Range("sheetMain02_notColor").Interior.ColorIndex = colorWhite
       wsPriceSheet.Range("sheetMain02_notColor").Locked = True
    End If
    If modServiceModule.IsNameExists(wbBook, "add_PRICE_range") Then
      wsPriceSheet.Range("add_PRICE_range").Interior.ColorIndex = colorWhite
      wsPriceSheet.Range("add_PRICE_range").Locked = True
    End If
    If modServiceModule.IsNameExists(wbBook, "add_PRICE_range_WARM") Then
      wsPriceSheet.Range("add_PRICE_range_WARM").Interior.ColorIndex = colorWhite
       wsPriceSheet.Range("add_PRICE_range_WARM").Locked = True
    End If
   
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    modServiceModule.SetFormulsInRange wsPriceSheet.Range("checkCell_1").cells(1, 1).Row, _
                                       wsPriceSheet.Range("checkCell_1").Rows.Count, _
                                       wsPriceSheet.Range("offsetForFormulsPrice")
      
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    modServiceModule.ClearWhiteCellsInRange wsPriceSheet.Range("checkCell_1").cells(1, 1).Row, _
                                            wsPriceSheet.Range("checkCell_1").Rows.Count, _
                                            wsPriceSheet.Range("offsetForFormulsPrice")
      
      
    modServiceModule.PROTECT_SHEET wsPriceSheet, True

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    wsSheet.Activate
    Target.Select
    modServiceModule.PROTECT_SHEET wsSheet, True
    SheetMain01_Change_MainCells = True
    GoTo CleanUp

ErrChange:
  Debug.Print Err.Description
  GoTo CleanUp

CleanUp:

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function SheetMain01_Check_TwoPart(ByVal wsSheet As Worksheet, _
                                          ByVal wsPriceSheet As Worksheet) As Boolean
  
    On Error GoTo ErrChange
    SheetMain01_Check_TwoPart = False
    
    Dim wbBook As Workbook
    Dim rngRange As Range
    
    Set wbBook = wsSheet.parent
    
    wsPriceSheet.Activate
    
    wsPriceSheet.Range("flag_two_part_tariff_priceOP").value = CInt(colorCyan)
    wsPriceSheet.Range("flag_two_part_tariff_priceOP").EntireColumn.Hidden = False

    
    If wbBook.Names("flag_two_part_tariff").RefersToRange.cells(1, 1).value = "|fffd||fffd|" Then
      wsPriceSheet.Range("flag_two_part_tariff_price").value = CInt(colorCyan)
      wsPriceSheet.Range("flag_two_part_tariff_price").EntireColumn.Hidden = False
    Else
      wsPriceSheet.Range("flag_two_part_tariff_price").value = CInt(colorWhite)
      wsPriceSheet.Range("flag_two_part_tariff_price").Locked = True
      wsPriceSheet.Range("flag_two_part_tariff_price").EntireColumn.Hidden = True
    End If
    
    SheetMain01_Check_TwoPart = True
    GoTo CleanUp

ErrChange:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
Public Function SheetMain01_Check_NDS(ByVal wsSheet As Worksheet, _
                                      ByVal wsPriceSheet As Worksheet) As Boolean
  
    On Error GoTo ErrChange
    SheetMain01_Check_NDS = False
    
    Dim wbBook As Workbook
    Dim rngRange As Range
    Dim strNameRange(4) As String
    Dim intCounter As Integer
    
    Set wbBook = wsSheet.parent
     
    wsPriceSheet.Activate
   
    strNameRange(1) = "NDS_org"
    strNameRange(2) = "NDS_budget"
    strNameRange(3) = "NDS_pop"
    strNameRange(4) = "NDS_etc"
    
    For intCounter = LBound(strNameRange) To UBound(strNameRange)
      If wsSheet.Range(strNameRange(intCounter)).value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Or _
         Len(Trim(wsSheet.Range(strNameRange(intCounter)).value)) = 0 Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        Set wsPriceSheet = sheetMain02
          wsPriceSheet.Range(strNameRange(intCounter) & "_priceC").value = CInt(colorWhite)
          wsPriceSheet.Range(strNameRange(intCounter) & "_priceC").Locked = True
          wsPriceSheet.Range(strNameRange(intCounter) & "_priceC").EntireColumn.Hidden = True
      End If
    Next intCounter
    
    SheetMain01_Check_NDS = True
    GoTo CleanUp

ErrChange:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function SheetMain01_Check_CrossSub(ByVal wsSheet As Worksheet, _
                                           ByVal wsPriceSheet As Worksheet) As Boolean
  
    On Error GoTo ErrChange
    SheetMain01_Check_CrossSub = False
    
    Dim wbBook As Workbook
    Dim rngRange As Range
    
    Set wbBook = wsSheet.parent
    
    wsPriceSheet.Activate
    
    If wbBook.Names("flag_cross_subsidization").RefersToRange.cells(1, 1).value = "|fffd||fffd|" Then
      wsPriceSheet.Range("offsetForFormulsPriceTP").value = CInt(-3)
    Else
      wsPriceSheet.Range("offsetForFormulsPrice").value = vbNullString
    End If
    
    SheetMain01_Check_CrossSub = True
    GoTo CleanUp

ErrChange:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function SheetMain01_Change_Publication(ByVal wsSheet As Worksheet, _
                                               ByVal Target As Range) As Boolean
  
    On Error GoTo ErrChange
    SheetMain01_Change_Publication = False
    
    Dim wbBook As Workbook
    
    Set wbBook = wsSheet.parent
      
      
    Set ISect = Application.Intersect(Target, wsSheet.Range("strPublication"))
    
    If ISect Is Nothing Then
      GoTo CleanUp
    End If
    
    If InStr(1, LCase(Target.cells(1, 1).value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 Or _
       InStr(1, LCase(Target.cells(1, 1).value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 Or _
       bflagExceptionRegion Then
         wbBook.Worksheets(gstrHyperlinkSheetName).Visible = xlSheetVisible
    Else
      wbBook.Worksheets(gstrHyperlinkSheetName).Visible = xlSheetVeryHidden
    End If
    
    If InStr(1, LCase(wbBook.Names("strPublication").RefersToRange.cells(1, 1).value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 Or _
       bflagExceptionRegion Then
      If ThisWorkbook.Names("TSphere_trans").RefersToRange.cells(1, 1).value <> "TBO" Then _
        wbBook.Worksheets(sheetMain02.name).Visible = xlSheetVisible
      wbBook.Worksheets(sheetMain05.name).Visible = xlSheetVisible
    Else
      wbBook.Worksheets(sheetMain02.name).Visible = xlSheetVeryHidden
      wbBook.Worksheets(sheetMain05.name).Visible = xlSheetVeryHidden
    End If
  
  wsSheet.Activate

  SheetMain01_Change_Publication = True
  GoTo CleanUp

ErrChange:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function SheetMain01_Change_FilFlag(ByVal wsSheet As Worksheet, _
                                           ByVal Target As Range) As Boolean
  
    On Error GoTo ErrChange
    SheetMain01_Change_FilFlag = False
    
    Dim wbBook As Workbook
    
    Set wbBook = wsSheet.parent
      
    Set ISect = Application.Intersect(Target, wsSheet.Range("fil_flag"))
    If ISect Is Nothing Then
      GoTo CleanUp
    End If

    wsSheet.Activate
    modServiceModule.UNPROTECT_SHEET wsSheet

    If Target.cells(1, 1).value = "|fffd||fffd|" Then
      wsSheet.Range("fil").RowHeight = 25
      wsSheet.Range("fil").Select
      Selection.Interior.ColorIndex = colorCyan
      Selection.Locked = False
    Else
      wsSheet.Range("fil").RowHeight = 0
      wsSheet.Range("fil").Select
      Selection.ClearContents
      Selection.Interior.ColorIndex = colorWhite
      Selection.Locked = True
    End If

    Target.Select
    modServiceModule.PROTECT_SHEET wsSheet, True
    SheetMain01_Change_FilFlag = True
    GoTo CleanUp

ErrChange:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function SheetMain01_Change_MR(ByVal wsSheet As Worksheet, _
                                      ByVal Target As Range) As Boolean
  
    On Error GoTo ErrChange
    SheetMain01_Change_MR = False
    
    Dim wbBook As Workbook
    
    Dim wsReestrMOSheet As Worksheet
    Dim wsUnionSheet As Worksheet
    
    Dim strMOName As String
    Dim strMRName As String
    Dim strOKTMOValue As String
    
    Dim intCounter As Integer
    Dim intNumStartRowForCheck As Integer
    Dim intNumEndRowForCheck As Integer
    
    Dim rngRange As Range
    Dim rngRangeTemp As Range
    
    Set wbBook = wsSheet.parent
    Set wsUnionSheet = wbBook.Worksheets(gstrEtUnionSheetName)
      
    Set ISect = Application.Intersect(Target, wsSheet.Range("mr_check"))
    If ISect Is Nothing Then
      GoTo CleanUp
    End If

    If modServiceModule.IsNameExists(wbBook, "MR_LIST") Then
      Set rngRange = wbBook.Names("MR_LIST").RefersToRange
      Set wsReestrMOSheet = rngRange.parent
    Else
      Set wsReestrMOSheet = wbBook.Worksheets(modGlobals.STR_REESTR_MO_SHEET_NAME)
      Set rngRange = wsReestrMOSheet.Range("A2")
    End If
    
    wsSheet.Activate
    modServiceModule.UNPROTECT_SHEET wsSheet
    intCounter = 2
    strMOName = ""
    Do While intCounter <= rngRange.Rows.Count + 1
      If wsReestrMOSheet.cells(intCounter, 4).value = Target.cells(1, 1).value Then
        strMOName = wsReestrMOSheet.cells(intCounter, 5).value
        Exit Do
      End If
      intCounter = intCounter + 1
    Loop
    
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    strMRName = Target.cells(1, 1).value
    If Len(Trim(strMRName)) <> 0 Then
      intNumStartRowForCheck = Target.cells(1, 1).Offset(0, -2).MergeArea.cells(1, 1).Row
      intNumEndRowForCheck = Target.cells(1, 1).Offset(0, -2).MergeArea.cells(Target.cells(1, 1).Offset(0, -2).MergeArea.Rows.Count, 1).Row
      
      For intCounter = intNumStartRowForCheck To intNumEndRowForCheck
        Set rngRangeTemp = wsSheet.cells(intCounter, wsSheet.Range("mr_check").Column).MergeArea.cells(1, 1)
        If rngRangeTemp.value = strMRName And rngRangeTemp.Row = intCounter And _
           rngRangeTemp.Row <> Target.Row And Len(rngRangeTemp.value) <> 0 Then
          MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & _
                 rngRangeTemp.Address & _
                 ")!", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd|"
          Target.MergeArea.ClearContents
          strMRName = ""
          strMOName = ""
        End If
      Next
    End If
    
    intCounter = Target.cells(1, 1).Row
    Do While InStr(wsSheet.cells(intCounter, wsSheet.Range("mo_check").Column).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 0
        wsSheet.cells(intCounter, wsSheet.Range("oktmo_check").Column).Select
        Selection.ClearContents
        wsSheet.cells(intCounter, wsSheet.Range("mo_check").Column).Select
        Selection.ClearContents
        Selection.Validation.Delete
        If Len(strMOName) > 0 Then
          With Selection.Validation
                        .Add Type:=xlValidateList, _
                             AlertStyle:=xlValidAlertStop, _
                             Operator:=xlBetween, _
                             Formula1:="=" & strMOName
                        .IgnoreBlank = False
                        .InCellDropdown = True
                        .InputTitle = ""
                        .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        .InputMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                        .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                        .ShowInput = True
                        .ShowError = True
          End With
          Target.cells(1, 1).Offset(0, 1).Select
        Else
          With Selection.Validation
                        .Add Type:=xlValidateTextLength, _
                             AlertStyle:=xlValidAlertStop, _
                             Operator:=xlEqual, Formula1:="0"
                        .IgnoreBlank = False
                        .InCellDropdown = True
                        .InputTitle = ""
                        .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        .InputMessage = ""
                        .ErrorMessage = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!"
                        .ShowInput = True
                        .ShowError = True
          End With
          Target.cells(1, 1).Select
        End If
        intCounter = intCounter + 1
    Loop
    
    If Len(strMOName) > 0 Then
      modServiceModule.AutoFitMergedCellRowHeight Target
    End If
    
    wsSheet.Activate
    modServiceModule.PROTECT_SHEET wsSheet, True
  
    SheetMain01_Change_MR = True
    GoTo CleanUp

ErrChange:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function SheetMain01_Change_MO(ByVal wsSheet As Worksheet, _
                                      ByVal Target As Range) As Boolean
  
    On Error GoTo ErrChange
    SheetMain01_Change_MO = False
    
    Dim wbBook As Workbook
    
    Dim wsReestrMOSheet As Worksheet
    Dim wsUnionSheet As Worksheet
    
    Dim strMOName As String
    Dim strMRName As String
    Dim strOKTMOValue As String
    
    Dim intCounter As Integer
    Dim intNumStartRowForCheck As Integer
    Dim intNumEndRowForCheck As Integer
    
    Dim rngRange As Range
    Dim rngRangeTemp As Range
    
    Set wbBook = wsSheet.parent
    Set wsUnionSheet = wbBook.Worksheets(gstrEtUnionSheetName)
      
    Set ISect = Application.Intersect(Target, wsSheet.Range("mo_check"))
    If ISect Is Nothing Then
      GoTo CleanUp
    End If

    If modServiceModule.IsNameExists(wbBook, "MR_LIST") Then
      Set rngRange = wbBook.Names("MR_LIST").RefersToRange
      Set wsReestrMOSheet = rngRange.parent
    Else
      Set wsReestrMOSheet = wbBook.Worksheets(modGlobals.STR_REESTR_MO_SHEET_NAME)
      Set rngRange = wsReestrMOSheet.Range("A2")
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd|
    strMRName = Target.cells(1, 1).Offset(0, -1).MergeArea.cells(1, 1).value
    strMOName = Target.cells(1, 1).value

    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Len(Trim(strMOName)) <> 0 Then
      intNumStartRowForCheck = Target.cells(1, 1).Offset(0, -1).MergeArea.cells(1, 1).Row
      intNumEndRowForCheck = Target.cells(1, 1).Offset(0, -1).MergeArea.cells(Target.cells(1, 1).Offset(0, -1).MergeArea.Rows.Count, 1).Row

      For intCounter = intNumStartRowForCheck To intNumEndRowForCheck
        Set rngRangeTemp = wsSheet.cells(intCounter, wsSheet.Range("mo_check").Column).MergeArea.cells(1, 1)
        If rngRangeTemp.value = strMOName And rngRangeTemp.Row = intCounter And _
           rngRangeTemp.Row <> Target.Row And Len(rngRangeTemp.value) <> 0 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & _
                   rngRangeTemp.Address & _
                   ")!", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd|"
            Target.ClearContents
            strMOName = ""
            strOKTMOValue = ""
        End If
      Next
    End If

    modServiceModule.UNPROTECT_SHEET wsSheet

    intCounter = 2
    Do While intCounter <= wsReestrMOSheet.UsedRange.Rows.Count
      If wsReestrMOSheet.cells(intCounter, 2).value = Target.cells(1, 1).value And _
         strMRName = wsReestrMOSheet.cells(intCounter, 1).value Then
        strOKTMOValue = wsReestrMOSheet.cells(intCounter, 3).value
        Exit Do
      End If
      intCounter = intCounter + 1
    Loop

    Target.cells(1, 1).Offset(0, 1).Select
    Selection.ClearContents
    Selection.value = strOKTMOValue
    Target.cells(1, 1).Select

    Target.EntireRow.AutoFit
    If Target.cells(1, 1).RowHeight < 19 Then Target.cells(1, 1).RowHeight = 19
    
    wsSheet.Activate
    modServiceModule.PROTECT_SHEET wsSheet, True
  
    SheetMain01_Change_MO = True
    GoTo CleanUp

ErrChange:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function SheetMain01_Change_KindsOfGoods(ByVal wsSheet As Worksheet, _
                                                ByVal Target As Range) As Boolean
  
  On Error GoTo ErrChange
  SheetMain01_Change_KindsOfGoods = False
    
  Dim wbBook As Workbook
  Dim rngRangeColorCyan As Range
  Dim rngRangeColorGreen As Range
  Dim rngCell As Range
  Dim strNameCheckRange(3) As String
  Dim intCounter As Integer
    
  Set wbBook = wsSheet.parent
      
      
      
  If modServiceModule.IsNameExists(wbBook, "main_kinds_of_goods") Then
    GoTo isHVS
  ElseIf modServiceModule.IsNameExists(wbBook, "checkProizv") Then
    GoTo isWARM
  Else
    GoTo CleanUp
  End If
        
isHVS:
  Set ISect = Application.Intersect(Target, wsSheet.Range("main_kinds_of_goods"))
  If ISect Is Nothing Then _
    GoTo CleanUp

  wsSheet.Activate
    
  If LCase(Target.cells(1, 1).Offset(0, -1).value) = "|fffd||fffd||fffd||fffd||fffd||fffd|" Then
      modServiceModule.UNPROTECT_SHEET wsSheet

      If Target.cells(1, 1).value = "|fffd||fffd|" Then
        wsSheet.Range("comment_kind_of_goods").RowHeight = 25
        wsSheet.Range("comment_kind_of_goods").Select
        Selection.Interior.ColorIndex = colorCyan
        Selection.Locked = False
      Else
        wsSheet.Range("comment_kind_of_goods").RowHeight = 0
        wsSheet.Range("comment_kind_of_goods").Select
        Selection.ClearContents
        Selection.Interior.ColorIndex = colorWhite
        Selection.Locked = True
      End If
    
      Target.Select
      modServiceModule.PROTECT_SHEET wsSheet, True
  End If

  wsSheet.Activate
  SheetMain01_Change_KindsOfGoods = True
  GoTo CleanUp

isWARM:
  Set ISect = Application.Intersect(Target, wsSheet.Range("activity"))
  
  If ISect Is Nothing Then _
    GoTo CleanUp
      
  wsSheet.Activate
  
  modServiceModule.UNPROTECT_SHEET wsSheet
  Select Case Target.cells(1, 1).value
    Case ""
      wsSheet.Range("checkProizv").value = ""
      wsSheet.Range("checkProizv").Interior.ColorIndex = xlNone
      wsSheet.Range("checkProizv").Validation.InCellDropdown = False
      wsSheet.Range("checkProizv").cells(1, 1).MergeArea.Locked = True
      wsSheet.Range("checkPeredacha").value = ""
      wsSheet.Range("checkPeredacha").Interior.ColorIndex = xlNone
      wsSheet.Range("checkPeredacha").Validation.InCellDropdown = False
      wsSheet.Range("checkPeredacha").cells(1, 1).MergeArea.Locked = True
      wsSheet.Range("checkSbyt").value = ""
      wsSheet.Range("checkSbyt").Interior.ColorIndex = xlNone
      wsSheet.Range("checkSbyt").Validation.InCellDropdown = False
      wsSheet.Range("checkSbyt").cells(1, 1).MergeArea.Locked = True
    Case "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|/|fffd|"
      wsSheet.Range("checkProizv").value = "|fffd||fffd||fffd|"
      wsSheet.Range("checkProizv").Interior.ColorIndex = colorGreen
      wsSheet.Range("checkProizv").Validation.InCellDropdown = False
      wsSheet.Range("checkProizv").cells(1, 1).MergeArea.Locked = True
      wsSheet.Range("checkPeredacha").Interior.ColorIndex = colorCyan
      wsSheet.Range("checkPeredacha").Validation.InCellDropdown = True
      wsSheet.Range("checkPeredacha").cells(1, 1).MergeArea.Locked = False
      wsSheet.Range("checkSbyt").Interior.ColorIndex = colorCyan
      wsSheet.Range("checkSbyt").Validation.InCellDropdown = True
      wsSheet.Range("checkSbyt").cells(1, 1).MergeArea.Locked = False
    Case Else
      wsSheet.Range("checkProizv").Validation.InCellDropdown = True
      wsSheet.Range("checkPeredacha").Validation.InCellDropdown = True
      wsSheet.Range("checkSbyt").Validation.InCellDropdown = True
      
      Set rngRangeColorCyan = Nothing
      Set rngRangeColorGreen = Nothing
      
      strNameCheckRange(1) = "checkProizv"
      strNameCheckRange(2) = "checkPeredacha"
      strNameCheckRange(3) = "checkSbyt"
      
      ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"/"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"/"|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
      For intCounter = LBound(strNameCheckRange) To UBound(strNameCheckRange)
        If InStr(1, LCase(Target.cells(1, 1).value), LCase(wsSheet.Range(strNameCheckRange(intCounter)).cells(1, 1).Offset(0, -1).value)) <> 0 Or _
           InStr(1, LCase(Target.cells(1, 1).value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 Or _
           InStr(1, LCase(Target.cells(1, 1).value), "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") <> 0 Then
          If rngRangeColorCyan Is Nothing Then
            Set rngRangeColorCyan = wsSheet.Range(strNameCheckRange(intCounter))
          Else
            Set rngRangeColorCyan = Union(rngRangeColorCyan, _
                                          wsSheet.Range(strNameCheckRange(intCounter)))
          End If
        Else
          If rngRangeColorGreen Is Nothing Then
            Set rngRangeColorGreen = wsSheet.Range(strNameCheckRange(intCounter))
          Else
            Set rngRangeColorGreen = Union(rngRangeColorGreen, _
                                           wsSheet.Range(strNameCheckRange(intCounter)))
          End If
        End If
      Next intCounter
      
      If Not rngRangeColorCyan Is Nothing Then
        rngRangeColorCyan.Interior.ColorIndex = colorCyan
        For Each rngCell In rngRangeColorCyan
          rngCell.cells(1, 1).value = vbNullString
          rngCell.cells(1, 1).MergeArea.Locked = False
        Next rngCell
      End If
      
      If Not rngRangeColorGreen Is Nothing Then
        rngRangeColorGreen.Interior.ColorIndex = colorGreen
        For Each rngCell In rngRangeColorGreen
          rngCell.cells(1, 1).value = "|fffd||fffd||fffd|"
          rngCell.cells(1, 1).MergeArea.Locked = True
        Next rngCell
      End If
    End Select
    
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo CleanUp

ErrChange:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:

End Function

' blnRangeIsVisible - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: True - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, False - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' strWorkRangeName - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain01_Work_With_Range(blnRangeIsVisible As Boolean, _
                                       strWorkRangeName As String)

  On Error GoTo ErrSelect
  
  Dim wbBook As Workbook
  
  Dim wsSheet As Worksheet
  Dim wsUnionSheet As Worksheet
  
  Dim rngRange As Range
  Dim rngCell As Range
  Dim rngTempRange As Range
  
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean

  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False
  
  Set wbBook = Application.ThisWorkbook
  Set wsUnionSheet = wbBook.Worksheets(gstrEtUnionSheetName)
  Set rngTempRange = wbBook.Names(strWorkRangeName).RefersToRange
  Set wsSheet = rngTempRange.parent
  
  modServiceModule.UNPROTECT_SHEET wsSheet
  
  wsSheet.Activate
  
  If wbBook.Names("region_name").RefersToRange.cells(1, 1).value = strExceptionsRegionOne Then strWorkRangeName = strWorkRangeName & "_SPb"
  
  
  If blnRangeIsVisible = False Then
     
    If Len(Trim(rngTempRange.cells(1, 1).value)) = 0 Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd|.
      wsUnionSheet.Activate
      Application.CutCopyMode = False
      wsUnionSheet.Range("edit_" & strWorkRangeName).Select
      Selection.Copy
      wsSheet.Activate
      rngTempRange.cells(1, 1).EntireRow.Select
      ActiveSheet.Paste
      Application.CutCopyMode = True
      rngTempRange.EntireRow.Hidden = blnRangeIsVisible
      rngTempRange.cells(1, 1).Select
    End If
    
  Else
    
    If Len(Trim(rngTempRange.cells(1, 1).value)) <> 0 Then
      rngTempRange.Interior.ColorIndex = colorWhite
      rngTempRange.Locked = blnRangeIsVisible
      rngTempRange.EntireRow.Clear
      rngTempRange.EntireRow.Hidden = blnRangeIsVisible
    End If
    
  End If
  
  modServiceModule.PROTECT_SHEET wsSheet, True
  
  GoTo CleanUp
  
ErrSelect:
  Debug.Print Err.Description
  GoTo CleanUp

CleanUp:
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain01_Hyperlink_Handler(ByVal Target As Range, _
                                         ByVal wsSheet As Worksheet)
  
  On Error GoTo ErrHandler
  
  Dim intNumColumn As Integer
  Dim intNumRow As Integer
 
  Dim intDeleteColumnNumber As Integer  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strDeleteString As String         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strRangeName As String            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim intRenumberColumnOffset As String ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                        ' (0, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
  
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean
  
  If modHyperlink.blnPrimary_HL_Handler(Target.cells(1, 1), wsSheet) = True Then Exit Sub
  
  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
 
  intNumColumn = Target.cells(1, 1).Column
  intNumRow = Target.cells(1, 1).Row
  
  modServiceModule.UNPROTECT_SHEET wsSheet
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If InStr(1, Target.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|") Then
    modSheetMain01.CreatePrintedForm wsSheet.parent
  ElseIf InStr(Target.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") Then
    intDeleteColumnNumber = 4
    If Target.cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|" Then
      strRangeName = "add_MR_range"
      strDeleteString = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|"
    ElseIf Target.cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|" Then
      strRangeName = "add_MO_range"
      strDeleteString = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|"
      intDeleteColumnNumber = 8
    End If
    intRenumberColumnOffset = 1
   GoTo ProcessHyp
  ElseIf Target.cells(1, 1).value = "|fffd|" Then
    intDeleteColumnNumber = Target.Column
    strRangeName = ""
    strDeleteString = ""
    intRenumberColumnOffset = 1
    GoTo ProcessHyp
  End If
  
  GoTo WithOutProcessHyp
  
ProcessHyp:
  SheetMain01_ProcessHyperlink_Handler Target.cells(1, 1), strRangeName, _
                                       intDeleteColumnNumber, strDeleteString, _
                                       intRenumberColumnOffset
  
WithOutProcessHyp:
  modServiceModule.PROTECT_SHEET wsSheet, True
  
  GoTo CleanUp

ErrHandler:
  MsgBox Err.Description, vbOKOnly, wsSheet.name
  
CleanUp:
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal
  Application.CutCopyMode = True
  Application.Calculation = xlCalculationAutomatic
  Application.Calculate
  If Not (wbBookForPrint Is Nothing) Then
    wbBookForPrint.Activate
    If Not (wbBookForPrint.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Is Nothing) Then
      wbBookForPrint.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Activate
    Else
      wbBookForPrint.Close False
    End If
    Set wbBookForPrint = Nothing
  ElseIf intNumRow > 0 And intNumColumn > 0 Then
    wsSheet.cells(intNumRow, intNumColumn).Select
  End If

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain01_ProcessHyperlink_Handler(ByVal rngTarget As Range, _
                                                ByVal strRangeName As String, _
                                                ByVal intDeleteColumnNumber As Integer, _
                                                ByVal strDeleteString As String, _
                                                ByVal intRenumberColumnOffset As Integer)

  Application.EnableEvents = False
  Application.ScreenUpdating = False
  
  If rngTarget Is Nothing Or _
     intDeleteColumnNumber = 0 Then GoTo e

  Dim rngTargetNRow As Integer
  Dim rngTargetNCol As Integer
  Dim intCounter As Integer
  Dim strMRName As String
  Dim strMOName As String
  Dim rngRange As Range
  Dim wbThis As Workbook
  Dim wsRanges As Worksheet
  Dim wsActiveSheet As Worksheet
  Dim wsTechSheet As Worksheet
  
  Set wsActiveSheet = rngTarget.parent
  Set wbThis = wsActiveSheet.parent
  Set wsRanges = wbThis.Worksheets("et_union")
  
  rngTargetNRow = rngTarget.Row
  rngTargetNCol = rngTarget.Column
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) > 0 Then
  
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbThis, strRangeName) = False Then
      GoTo e
    End If
    If Len(strDeleteString) = 0 Then
      GoTo e
    End If
  
    wsRanges.Activate
    wsRanges.Range(strRangeName).Copy
    wsActiveSheet.Activate
    wsActiveSheet.cells(rngTargetNRow, 1).Select
    Selection.Insert Shift:=xlDown
    Application.CutCopyMode = False
    
    wsActiveSheet.cells(rngTargetNRow, intDeleteColumnNumber).Select
    modHyperlink.ShapeDeleteHyperlink wsActiveSheet.cells(rngTargetNRow, intDeleteColumnNumber), _
                                      strDeleteString
    
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
    If rngTarget.cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|" Then
      strMRName = rngTarget.cells(1, 1).Offset(0, -1).MergeArea.cells(1, 1).value
      If Len(Trim(strMRName)) <> 0 Then
        Set rngRange = wbThis.Names("MR_LIST").RefersToRange
        Set wsTechSheet = rngRange.parent
        strMOName = ""
        intCounter = 2
        Do While intCounter <= rngRange.Rows.Count + 1
          If wsTechSheet.cells(intCounter, 4).value = strMRName Then
            strMOName = wsTechSheet.cells(intCounter, 5).value
            Exit Do
          End If
          intCounter = intCounter + 1
        Loop
    
        rngTarget.Offset(-1, 0).Select
        If Len(strMOName) > 0 Then
          Selection.Validation.Delete
          With Selection.Validation
                        .Add Type:=xlValidateList, _
                             AlertStyle:=xlValidAlertStop, _
                             Operator:=xlBetween, _
                             Formula1:="=" & strMOName
                        .IgnoreBlank = False
                        .InCellDropdown = True
                        .InputTitle = ""
                        .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        .InputMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                        .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                        .ShowInput = True
                        .ShowError = True
          End With
        End If
      End If
    
    End If
    rngTarget.Offset(-1, 0).Select
    
    GoTo e
  
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) = 0 Then
    
    rngTarget.Offset(0, intRenumberColumnOffset).Select
    Selection.EntireRow.Delete
    
    GoTo e
  
  End If
  
e:
End Sub

' --------------
' --  |fffd||fffd||fffd||fffd||fffd||fffd|  --
' --------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub cmdUpdateOrgData_Click()
  frmReestr.Show
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub cmdUpdateReestrMO_Click()
  modSheetMain01.cmdUpdateReestrMO_Click_Handler ThisWorkbook.Worksheets(gstrMainSheetName)
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub cmdUpdateOrgData_Click_Handler(ByVal wsOwnerSheet As Worksheet, _
                                          ByRef cmdUpdateOrgData As CommandButton, _
                                          Optional ByVal blnShowSuccessMessageBox As Boolean = True)

  On Error GoTo ErrHandler
  
  Dim strUpdateReestrResult As String
  Dim strCmdCaption As String
  Dim strResultUpdateInSheet As String
  Dim wbBook As Workbook
  
  Set wbBook = wsOwnerSheet.parent
  
  If Not (cmdUpdateOrgData Is Nothing) Then
    strCmdCaption = cmdUpdateOrgData.caption
  
    cmdUpdateOrgData.caption = STR_CMD_BUTTON_UPDATE_IS_IN_PROGRESS_CAPTION
    Application.Wait (Now + TimeValue("0:00:1")) ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  
  Application.ScreenUpdating = False
    
  Dim strRegionName As String
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
  If wbBook.Names("region_name").RefersToRange.value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
    strRegionName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
  Else
    strRegionName = wbBook.Names("region_name").RefersToRange.value
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Select Case wbBook.Names("TSphere_trans").RefersToRange.cells(1, 1).value
    Case "WARM"
      modGlobals.STR_RANGE_NAME = modHTTPServerCaller.STR_WARM_RANGE_NAME
      modGlobals.LNG_AS_ACTIVITY_SPHERE = asWARM
    Case "GVS"
      modGlobals.STR_RANGE_NAME = modHTTPServerCaller.STR_HOT_VS_RANGE_NAME
      modGlobals.LNG_AS_ACTIVITY_SPHERE = asHOTVS
    Case "HVS"
      modGlobals.STR_RANGE_NAME = modHTTPServerCaller.STR_VS_RANGE_NAME
      modGlobals.LNG_AS_ACTIVITY_SPHERE = asVS
    Case "VO"
      modGlobals.STR_RANGE_NAME = modHTTPServerCaller.STR_VO_RANGE_NAME
      modGlobals.LNG_AS_ACTIVITY_SPHERE = asVO
    Case "TBO"
      modGlobals.STR_RANGE_NAME = modHTTPServerCaller.STR_TBO_RANGE_NAME
      modGlobals.LNG_AS_ACTIVITY_SPHERE = asTBO
  End Select
  
  
  If modAnimatedFormsGlobals.BLN_SHOW_PROGRESS_FORM_ON_UPDATE_REQUESTS = True Then
    If modScrolling.blnIs_UserForm_Loaded("frmReestr") = True Then
      Set frmProgressForm = Try_Show_Progress_Form(frmReestr.caption)
    Else
      Set frmProgressForm = Try_Show_Progress_Form()
    End If
    
    ProgressDialogue.lblWait = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
  Else
    Set frmProgressForm = Nothing
  End If

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  strUpdateReestrResult = modHTTPServerCaller.Update_Organization_List(modGlobals.STR_REESTR_SHEET_NAME, _
                                                                       strRegionName, _
                                                                       modGlobals.LNG_AS_ACTIVITY_SPHERE, _
                                                                       wbBook)
  
  Application.ScreenUpdating = True
  
  If Not (cmdUpdateOrgData Is Nothing) Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    cmdUpdateOrgData.caption = strCmdCaption
    wsOwnerSheet.Activate
  End If
  
  If strUpdateReestrResult = modHTTPGlobals.STR_UPDATE_SUCCESS Then
  
    Application.ScreenUpdating = False
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    modfrmReestr.Define_Range modGlobals.STR_REESTR_ORG_SHEET_NAME, wbBook
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
    If Not frmProgressForm Is Nothing Then
      frmProgressForm.Hide
      Set frmProgressForm = Nothing
    End If

    If modServiceModule.IsNameExists(wbBook, STR_RANGE_NAME) = True Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      strResultUpdateInSheet = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CStr(Now)
    Else
      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      strResultUpdateInSheet = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CStr(Now)
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
    frmProgressForm_Hide
    
    If blnShowSuccessMessageBox = True Then
      MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & strUpdateReestrResult, vbInformation, modGlobals.STR_MSGBOX_INFORMATION_TITLE
    End If
    
  Else
  
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    strResultUpdateInSheet = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CStr(Now)
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
    frmProgressForm_Hide
    
    If blnShowSuccessMessageBox = True Then
      MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & strUpdateReestrResult, vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
    End If
    
  End If
  
  wsOwnerSheet.Activate
  
  If modServiceModule.IsNameExists(wbBook, "LastUpdateDate_ReestrOrg") = True Then
    modServiceModule.UNPROTECT_SHEET wsOwnerSheet
    wbBook.Application.EnableEvents = False
    Application.Range("LastUpdateDate_ReestrOrg").value = strResultUpdateInSheet
    wbBook.Application.EnableEvents = True
    modServiceModule.PROTECT_SHEET wsOwnerSheet, True
  End If
  
  Application.ScreenUpdating = True
    
  
  GoTo CleanUp

ErrHandler:
  Application.ScreenUpdating = True
  Application.EnableEvents = True
  GoTo CleanUp
CleanUp:
''  If Not frmProgressForm Is Nothing Then
''    frmProgressForm.Hide
''    Set frmProgressForm = Nothing
''  End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
    frmProgressForm_Hide
  
  If Not (cmdUpdateOrgData Is Nothing) Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    cmdUpdateOrgData.caption = strCmdCaption
  End If
End Sub


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
Public Sub cmdUpdateReestrMO_Click_Handler(ByVal wsOwnerSheet As Worksheet, _
                                           Optional ByVal blnShowSuccessMessageBox As Boolean = True, _
                                           Optional ByVal strCmdCaption As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|")

  On Error GoTo ErrHandler
  
  Dim strUpdateReestrResult As String
  Dim strResultUpdateInSheet As String
  Dim wbBook As Workbook
  
  Set wbBook = wsOwnerSheet.parent
  
  If wsOwnerSheet Is Nothing Then GoTo CleanUp
  
  modServiceModule.UNPROTECT_SHEET wsOwnerSheet
  
  If Len(Trim(strCmdCaption)) <> 0 Then
    wsOwnerSheet.Shapes("cmdUpdateReestrMO").Select
    Selection.Characters.Text = STR_CMD_BUTTON_UPDATE_IS_IN_PROGRESS_CAPTION
    wsOwnerSheet.Range("A" & Selection.TopLeftCell.Row).Select
    Application.Wait (Now + TimeValue("0:00:1")) ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  
  Application.ScreenUpdating = False
  
  Dim strRegionName As String
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ' |fffd||fffd|/|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
  If wbBook.Names("region_name").RefersToRange.value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
    strRegionName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
  Else
    strRegionName = wbBook.Names("region_name").RefersToRange.value
  End If
  
  If modAnimatedFormsGlobals.BLN_SHOW_PROGRESS_FORM_ON_UPDATE_REQUESTS = True Then
    Set frmProgressForm = Try_Show_Progress_Form()
    ProgressDialogue.lblWait = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
  Else
    Set frmProgressForm = Nothing
  End If
  
  strUpdateReestrResult = modHTTPServerCaller.Update_MRMO_List(modGlobals.STR_REESTR_MO_SHEET_NAME, _
                                                               strRegionName, _
                                                               wbBook)
  
  Application.ScreenUpdating = True
  
  If strUpdateReestrResult = modHTTPGlobals.STR_UPDATE_SUCCESS Then
  
    Application.ScreenUpdating = False
    
    modReestrMO.Shape_MR_MO_OKTMO_List wbBook.Worksheets(modGlobals.STR_REESTR_MO_SHEET_NAME)
    
    If modServiceModule.IsNameExists(wbBook, "LIST_MR_MO_OKTMO") = True Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      strResultUpdateInSheet = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|: " & CStr(Now)
    Else
      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      strResultUpdateInSheet = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd| |fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CStr(Now)
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
    frmProgressForm_Hide
    
    If blnShowSuccessMessageBox = True Then
      MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|/|fffd||fffd||fffd||fffd||fffd|: " & strUpdateReestrResult, vbInformation, modGlobals.STR_MSGBOX_INFORMATION_TITLE
    End If
    
  Else
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    strResultUpdateInSheet = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CStr(Now)
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
    frmProgressForm_Hide
    
    If blnShowSuccessMessageBox = True Then
      MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|/|fffd||fffd||fffd||fffd||fffd|: " & strUpdateReestrResult, vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
    End If
    
  End If
  
  wsOwnerSheet.Activate
  If modServiceModule.IsNameExists(wbBook, "LastUpdateDate_MO") = True Then
    modServiceModule.UNPROTECT_SHEET wsOwnerSheet
    wbBook.Application.EnableEvents = False
    Application.Range("LastUpdateDate_MO").value = strResultUpdateInSheet
    wbBook.Application.EnableEvents = True
    modServiceModule.PROTECT_SHEET wsOwnerSheet, True
  End If
    
    Application.ScreenUpdating = True
  
  GoTo CleanUp

ErrHandler:
  Application.ScreenUpdating = True
  Application.EnableEvents = True
  GoTo CleanUp
  
CleanUp:
''  If Not frmProgressForm Is Nothing Then
''    frmProgressForm.Hide
''    Set frmProgressForm = Nothing
''  End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
    frmProgressForm_Hide
  
  If Not wsOwnerSheet Is Nothing Then
    If Len(Trim(strCmdCaption)) <> 0 Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      wsOwnerSheet.Activate
      modServiceModule.UNPROTECT_SHEET wsOwnerSheet
      wsOwnerSheet.Shapes("cmdUpdateReestrMO").Select
      Selection.Characters.Text = strCmdCaption
    End If
    modServiceModule.PROTECT_SHEET wsOwnerSheet, True
  End If
End Sub

' ------------------------------
' --  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  --
' ------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sub CreatePrintedForm(ByVal wbBookTemplate As Workbook)
  
  Dim lngCounterRow As Integer
  Dim lngCounterColumn As Integer
  Dim lngFirstRow As Integer
  Dim lngEndRow As Integer
  Dim lngFirstColumn As Integer
  Dim lngEndColumn As Integer
  
  Dim strSavedFileName As String
  Dim strNameCopySheet As String
  Dim strStartCellPrintArea As String
  Dim strEndCellPrintArea As String
  Dim strCenterFooter As String
  Dim strOrientationPage As String
''  Dim strHeadTopAddress As String
''  Dim strHeadBottomAddress As String
  
  Dim rngCell As Range
  Dim rngRange As Range
  Dim rngDeleteRange As Range
  Dim rngRDeleteRange As Range
  Dim rngCDeleteRange As Range
  
  Dim vbResult As VbMsgBoxResult
  
  Dim wsActiveSheet As Worksheet
  Dim wsTempSheet As Worksheet
  Dim wsPrintSheet As Worksheet
  
  If wbBookTemplate Is Nothing Then
    GoTo CleanUp
  End If
   
  Set wsActiveSheet = wbBookTemplate.ActiveSheet
  
  If wsActiveSheet Is Nothing Then
    GoTo CleanUp
  End If
  
  On Error GoTo ErrHandler
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  strSavedFileName = Left(wbBookTemplate.name, _
                          InStr(1, wbBookTemplate.name, ".xls") - 1) & _
                     "_ForPrint" & "(" & Format(Now, "dd_mm_yyyy HH_MM") & ")"
    
  Application.EnableEvents = False
  Application.DisplayAlerts = False
    
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  vbResult = MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!")
  If vbResult = vbYes Then
    strCenterFooter = _
                     "&""Tahoma,|fffd||fffd||fffd||fffd||fffd||fffd||fffd|""&8" & Chr(10) & "" & _
                     "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & _
                     wbBookTemplate.CustomDocumentProperties("Version") & "(|fffd||fffd||fffd|." & _
                     wbBookTemplate.CustomDocumentProperties("CurrentVersion") & ")" & _
                     ", &D" & " |fffd|. "
                     
    If Len(Trim(wbBookTemplate.Names("responsible_post").RefersToRange.value)) <> 0 Or _
       Len(Trim(wbBookTemplate.Names("responsible_FIO").RefersToRange.value)) <> 0 Then
     strCenterFooter = strCenterFooter & _
                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & _
                       wbBookTemplate.Names("responsible_post").RefersToRange.value & " " & _
                       wbBookTemplate.Names("responsible_FIO").RefersToRange.value  '& Chr(10)
    End If
  Else
    strCenterFooter = ""
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  If Not (modSheetMain01.CreateXlBook(strSavedFileName, wbBookTemplate.Path)) Then GoTo ErrHandler
  
  Workbooks.Open filename:=wbBookTemplate.Path & "\" & strSavedFileName & ".xls"
                              
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set wbBookForPrint = Application.ActiveWorkbook
  
  wbBookTemplate.Activate
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  For Each wsTempSheet In wbBookTemplate.Worksheets
    If wsTempSheet.name <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" And _
       wsTempSheet.name <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" And _
       wsTempSheet.name <> "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|" And _
       wsTempSheet.name <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" And _
       wsTempSheet.name <> "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" And _
       wsTempSheet.name <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" And _
       wsTempSheet.Tab.ColorIndex <> modGlobals.colorLightBrown And _
       wsTempSheet.Visible <> xlSheetVeryHidden And _
       wsTempSheet.Visible <> xlSheetHidden Then
         
         strNameCopySheet = wsTempSheet.name
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
         wbBookForPrint.Activate
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
         If strNameCopySheet = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
           Set wsPrintSheet = wbBookForPrint.Worksheets.Item(1)
         Else
           Set wsPrintSheet = wbBookForPrint.Worksheets.Add(after:=Worksheets(Worksheets.Count))
         End If
         wsPrintSheet.Activate
         wsPrintSheet.name = strNameCopySheet
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| /|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|/
         wbBookTemplate.Activate
         wsTempSheet.Activate
''
''         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''         strHeadTopAddress = wsTempSheet.Shapes("pictBorderTop").TopLeftCell.cells(1, 1).Address
''         strHeadBottomAddress = wsTempSheet.Shapes("pictBorderDown").BottomRightCell.cells(1, 1).Address
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
         wsTempSheet.cells.Select
         Application.CutCopyMode = False
         Selection.Copy
        
         ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| :)
         wbBookForPrint.Activate
         wsPrintSheet.Activate
         wsPrintSheet.cells.Select
         Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
                                SkipBlanks:=False, Transpose:=False
         Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
                                SkipBlanks:=False, Transpose:=False
         Application.CutCopyMode = True
         
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
         Set rngRange = wsPrintSheet.Range(wsPrintSheet.Range("A1"), ActiveCell.SpecialCells(xlLastCell))
         lngFirstRow = 1
         Set rngDeleteRange = Nothing
         For lngCounterRow = 1 To rngRange.Rows.Count
           Set rngCell = wsPrintSheet.cells(lngCounterRow, 1).EntireRow.cells
           If Application.CountA(rngCell) = 0 Or _
              rngCell.EntireRow.Hidden = True Then
             If Not rngDeleteRange Is Nothing Then
               Set rngDeleteRange = Union(rngDeleteRange, rngCell.EntireRow)
             Else
               Set rngDeleteRange = rngCell.EntireRow
             End If
           Else
             ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
             If Not rngDeleteRange Is Nothing Then
               rngDeleteRange.EntireRow.Delete
             End If
             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
             lngFirstRow = rngCell.EntireRow.Row
             Exit For
           End If
         Next lngCounterRow
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
         Set rngRange = wsPrintSheet.Range(wsPrintSheet.Range("A1"), ActiveCell.SpecialCells(xlLastCell))
         lngEndRow = ActiveCell.SpecialCells(xlLastCell).Row
         Set rngDeleteRange = Nothing
         For lngCounterRow = rngRange.Rows.Count To 1 Step -1
           Set rngCell = wsPrintSheet.cells(lngCounterRow, 1).EntireRow.cells
           If Application.CountA(rngCell) = 0 Or _
              rngCell.EntireRow.Hidden = True Then
             If Not rngDeleteRange Is Nothing Then
               Set rngDeleteRange = Union(rngDeleteRange, rngCell.EntireRow)
             Else
               Set rngDeleteRange = rngCell.EntireRow
             End If
           Else
             ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
             If Not rngDeleteRange Is Nothing Then
               rngDeleteRange.EntireRow.Delete
             End If
             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
             lngEndRow = rngCell.EntireRow.Row
             Exit For
           End If
         Next lngCounterRow
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
         Set rngRange = wsPrintSheet.Range(wsPrintSheet.Range("A1"), ActiveCell.SpecialCells(xlLastCell))
         lngFirstColumn = 1
         Set rngDeleteRange = Nothing
         For lngCounterColumn = 1 To rngRange.Columns.Count
           Set rngCell = wsPrintSheet.cells(1, lngCounterColumn).EntireColumn.cells
           If Application.CountA(rngCell) = 0 Or _
              rngCell.EntireColumn.Hidden = True Then
             If Not rngDeleteRange Is Nothing Then
               Set rngDeleteRange = Union(rngDeleteRange, rngCell.EntireColumn)
             Else
               Set rngDeleteRange = rngCell.EntireColumn
             End If
           Else
             ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
             If Not rngDeleteRange Is Nothing Then
               rngDeleteRange.EntireColumn.Delete
             End If
             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
             lngFirstColumn = rngCell.EntireColumn.Column
             Exit For
           End If
         Next lngCounterColumn
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
         Set rngRange = wsPrintSheet.Range(wsPrintSheet.Range("A1"), ActiveCell.SpecialCells(xlLastCell))
         lngEndColumn = ActiveCell.SpecialCells(xlLastCell).Column
         Set rngDeleteRange = Nothing
         For lngCounterColumn = rngRange.Columns.Count To 1 Step -1
           Set rngCell = wsPrintSheet.cells(1, lngCounterColumn).EntireColumn.cells
           If Application.CountA(rngCell) = 0 Or _
              rngCell.EntireColumn.Hidden = True Then
             If Not rngDeleteRange Is Nothing Then
               Set rngDeleteRange = Union(rngDeleteRange, rngCell.EntireColumn)
             Else
               Set rngDeleteRange = rngCell.EntireColumn
             End If
           Else
             ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
             If Not rngDeleteRange Is Nothing Then
               rngDeleteRange.EntireColumn.Delete
             End If
             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
             lngEndColumn = rngCell.EntireColumn.Column
             Exit For
           End If
         Next lngCounterColumn
''
''         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''         wsPrintSheet.cells(lngFirstRow, lngFirstColumn).EntireColumn.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
''         wsPrintSheet.cells(lngFirstRow, lngFirstColumn).EntireRow.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
         
         Set rngRange = wsPrintSheet.Range(wsPrintSheet.cells(lngFirstRow, lngFirstColumn), _
                                           wsPrintSheet.cells(lngEndRow, lngEndColumn))
         
         rngRange.Select


         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
         ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| > |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| < |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         If rngRange.Width > _
            rngRange.Height Then
           strOrientationPage = xlLandscape         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         Else
           strOrientationPage = xlPortrait          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         End If

         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
         rngRange.Select
         With wsPrintSheet.PageSetup
             .PrintArea = rngRange.Address
             .CenterFooter = strCenterFooter
             .Orientation = strOrientationPage
             .Zoom = False
             .FitToPagesWide = 1
             .FitToPagesTall = False
         End With
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
         wsPrintSheet.cells.Select
         With Selection.Interior
               .pattern = xlNone
               .ColorIndex = modGlobals.colorWhite
         End With
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Arial Narrow
         With Selection.Font
           .name = "Arial Narrow"
           .Size = 8
         End With
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         If modServiceModule.IsNameExists(wbBookForPrint, "flag_publication") Then
           If wsPrintSheet.name = gstrMainSheetName Then
             wsPrintSheet.Range("flag_publication").Font.name = "Marlett"
           End If
         End If
''''
''''         Set rngRDeleteRange = Nothing
''''         Set rngCDeleteRange = Nothing
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         For Each rngCell In rngRange
           ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...
           ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
           ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
           ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
           ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
           If (InStr(1, rngCell.cells(1, 1).value, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1) Or _
              ((rngCell.cells(1, 1).value = "|fffd|" And _
                   rngCell.cells(1, 1).value <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Or _
                  InStr(1, rngCell.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1) Or _
              ((InStr(1, rngCell.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") = 1 And _
                   rngCell.cells(1, 1).value <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Or _
                  InStr(1, rngCell.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1) Or _
              (InStr(1, rngCell.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|") = 1) Or _
              (InStr(1, rngCell.cells(1, 1).value, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1) Or _
              (InStr(1, rngCell.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd| ") = 1) Then
                rngCell.cells(1, 1).value = vbNullString
           End If

         Next rngCell

''''         For Each rngCell In rngRange
''''
''''           If InStr(1, rngCell.cells(1, 1).value, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1 Then
''''           ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
''''             rngCell.cells(1, 1).value = vbNullString
''''''             rngCell.cells(1, 1).Offset(-1, 0).value = vbNullString
''''''             rngCell.cells(1, 1).Offset(-1, 0).EntireRow.Hidden = True
''''''             rngCell.cells(1, 1).EntireRow.Hidden = True
''''             If Not rngRDeleteRange Is Nothing Then
''''               Set rngRDeleteRange = Union(rngRDeleteRange, rngCell.cells(1, 1).EntireRow)
''''             Else
''''               Set rngRDeleteRange = rngCell.cells(1, 1).EntireRow
''''             End If
''''           ElseIf (rngCell.cells(1, 1).value = "|fffd|" And _
''''                   rngCell.cells(1, 1).value <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Or _
''''                  InStr(1, rngCell.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1 Then
''''             ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"/ |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''''             If InStr(1, rngCell.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1 Then
''''''               rngCell.cells(1, 2).Offset(1, 0).Select
''''''               Selection.EntireColumn.Hidden = True
''''                If Not rngCDeleteRange Is Nothing Then
''''                  Set rngCDeleteRange = Union(rngCDeleteRange, rngCell.cells(1, 1).MergeArea.EntireColumn)
''''                Else
''''                  Set rngCDeleteRange = rngCell.cells(1, 1).MergeArea.EntireColumn
''''                End If
''''             Else
''''''               rngCell.cells(1, 1).Select
''''''               Selection.EntireColumn.ColumnWidth = 5
''''                If Not rngCDeleteRange Is Nothing Then
''''                  Set rngCDeleteRange = Union(rngCDeleteRange, rngCell.cells(1, 1).EntireColumn)
''''                Else
''''                  Set rngCDeleteRange = rngCell.cells(1, 1).EntireColumn
''''                End If
''''             End If
''''             rngCell.cells(1, 1).value = vbNullString
''''           ElseIf (InStr(1, rngCell.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") = 1 And _
''''                   rngCell.cells(1, 1).value <> "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Or _
''''                  InStr(1, rngCell.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = 1 Then
''''           ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''''             rngCell.cells(1, 1).value = vbNullString
''''             If Not rngRDeleteRange Is Nothing Then
''''               Set rngRDeleteRange = Union(rngRDeleteRange, rngCell.cells(1, 1).EntireRow)
''''             Else
''''               Set rngRDeleteRange = rngCell.cells(1, 1).EntireRow
''''             End If
''''''             rngCell.cells(1, 1).EntireRow.Hidden = True
''''           ElseIf InStr(1, rngCell.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|") = 1 Then
''''           ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''''             rngCell.cells(1, 1).value = vbNullString
''''             If Not rngRDeleteRange Is Nothing Then
''''               Set rngRDeleteRange = Union(rngRDeleteRange, rngCell.cells(1, 1).EntireRow)
''''             Else
''''               Set rngRDeleteRange = rngCell.cells(1, 1).EntireRow
''''             End If
''''           End If
''''
''''         Next rngCell
''''
''''         ' |fffd||fffd||fffd||fffd||fffd||fffd|...
''''         ' |fffd||fffd||fffd||fffd||fffd||fffd|
''''         If Not rngRDeleteRange Is Nothing Then
''''           rngRDeleteRange.Delete
''''         End If
''''
''''         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''''         If Not rngCDeleteRange Is Nothing Then
''''           rngCDeleteRange.Delete
''''         End If
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         DeleteEmptyRows rngRange
         DeleteEmptyColumns rngRange
''
''         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''         rngRange.EntireRow.AutoFit
''''
''''         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''''         For Each rngCell In rngRange
''''
''''         Next rngCell
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
         wsPrintSheet.Range("A1").Activate
         wsPrintSheet.Protect Password:=gPASSWORD, DrawingObjects:=True, _
                              Contents:=True, Scenarios:=True, _
                              AllowFormattingColumns:=True, AllowFormattingRows:=True
         
         wbBookTemplate.Activate
         wsTempSheet.Range("A1").Activate
     
     End If
     
  Next wsTempSheet
  
  
  wbBookForPrint.Activate
''
''  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''  modSheetMain01.RemoveNamesInActiveWorkbook wbBookForPrint
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  modSheetMain01.BreakLinksInActiveWorkbook wbBookForPrint
''''
''''  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Shapes, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| :)
''''  modSheetMain01.UpdateFlagForPrintShapes wbBookForPrint
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  wbBookForPrint.Save
  MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbInformation, _
         modGlobals.STR_MSGBOX_INFORMATION_TITLE
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  wbBookTemplate.Activate
  wsActiveSheet.Activate
  
  Application.EnableEvents = True
  Application.DisplayAlerts = True
  
  GoTo Success

Success:
  GoTo CleanUp
ErrHandler:
  wbBookTemplate.Activate
  MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbExclamation, _
         modGlobals.STR_MSGBOX_WARNING_TITLE
  GoTo CleanUp
CleanUp:
  
End Sub

Sub DeleteEmptyRows(ByVal rngWorkRange As Range)
    
    Dim LastRow As Integer
    Dim r As Integer
    Dim rngDeleteRange As Range
    Dim wsSheet As Worksheet
    
    Set wsSheet = rngWorkRange.parent
    Set rngDeleteRange = Nothing
    LastRow = rngWorkRange.cells(1, 1).Row + rngWorkRange.Rows.Count - 1
    Application.ScreenUpdating = False
    For r = LastRow To 1 Step -1
      If Application.CountA(wsSheet.Rows(r)) = 0 Then
        If rngDeleteRange Is Nothing Then
          Set rngDeleteRange = wsSheet.Rows(r)
        Else
          Set rngDeleteRange = Union(rngDeleteRange, _
                                     wsSheet.Rows(r))
        End If
      End If
    Next r
    
    If Not rngDeleteRange Is Nothing Then
      rngDeleteRange.Delete
    End If
    
End Sub

Sub DeleteEmptyColumns(ByVal rngWorkRange As Range)
    
    Dim LastColumn As Integer
    Dim r As Integer
    Dim rngDeleteRange As Range
    Dim wsSheet As Worksheet
    
    Set wsSheet = rngWorkRange.parent
    Set rngDeleteRange = Nothing
    LastColumn = rngWorkRange.cells(1, 1).Column + rngWorkRange.Columns.Count - 1
    Application.ScreenUpdating = False
    For r = LastColumn To 1 Step -1
      If Application.CountA(wsSheet.Columns(r)) = 0 Then
        If rngDeleteRange Is Nothing Then
          Set rngDeleteRange = wsSheet.Columns(r)
        Else
          Set rngDeleteRange = Union(rngDeleteRange, _
                                     wsSheet.Columns(r))
        End If
      End If
    Next r
    
    If Not rngDeleteRange Is Nothing Then
      rngDeleteRange.Delete
    End If
    
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MS Excel, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| strWbBookName |fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' strWbBookDirName. |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| True, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - False.
Public Function CreateXlBook(ByVal strWbBookName As String, _
                             ByVal strWbBookDirName As String) As Boolean

  ' MS Excel hidden instance
  Dim objXLApp As Object
  Dim wbBookNew As Workbook
  
  If Len(Trim(strWbBookName)) = 0 Or _
     Len(Trim(strWbBookDirName)) = 0 Then
    GoTo CleanUp
  End If

  CreateXlBook = False

''  Set objXLApp = New Application
''  If objXLApp Is Nothing Then GoTo cleanUp

  ' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  Application.SheetsInNewWorkbook = 1

  Set wbBookNew = Application.Workbooks.Add
  If wbBookNew Is Nothing Then GoTo CleanUp

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If vbNullString = Dir(strWbBookDirName, vbDirectory) Then GoTo CleanUp
  
  wbBookNew.SaveAs filename:=strWbBookDirName & "\" & strWbBookName & ".xls", FileFormat:=ThisWorkbook.FileFormat
  
  CreateXlBook = True

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Set wbBookNew = Nothing
''  objXLApp.Quit
''  Set objXLApp = Nothing
  CreateXlBook = True
  
CleanUp:

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Shapes |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub UpdateFlagForPrintShapes(wbBook As Workbook)
  On Error Resume Next
  
  Dim wsSheet As Worksheet
  Dim shShape As Shape
  Dim strMsgSheets As String
  
  strMsgSheets = vbNullString
  
  For Each wsSheet In wbBook.Worksheets
    
    If wsSheet.name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
      wbBook.Worksheets(wsSheet.name).cmdOrganizationChoice.Delete
      wbBook.Worksheets(wsSheet.name).cmdUpdateReestrMO.Delete
    End If
    
    For Each shShape In wsSheet.Shapes
      If shShape.Type = msoPicture Then
        shShape.Delete
      End If
    Next shShape
    
  Next wsSheet

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub RemoveNamesInActiveWorkbook(wbBook As Workbook)

  Dim rngName As name

  For Each rngName In wbBook.Names
    rngName.Delete
  Next rngName
  
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub BreakLinksInActiveWorkbook(wbBook As Workbook)

  Dim astrLinks As Variant
  Dim lnk
  Dim intIndex As Integer
  
  astrLinks = wbBook.LinkSources(Type:=xlLinkTypeExcelLinks)
  
  If Not IsEmpty(astrLinks) Then
    For intIndex = 1 To UBound(astrLinks)
      wbBook.BreakLink name:=astrLinks(intIndex), Type:=xlLinkTypeExcelLinks
    Next intIndex
  End If
  
End Sub

Public Sub frmProgressForm_Hide()
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
  If Not frmProgressForm Is Nothing Then
    frmProgressForm.Hide
    Set frmProgressForm = Nothing
  End If
End Sub

Attribute VB_Name = "modSheetMain02"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public Sub SheetMain02_Worksheet_Change(ByVal Target As Range)
  SheetMain02_Change_Handler Target
End Sub

Public Sub SheetMain02_Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  SheetMain02_Hyperlink_Handler Target, Target.Range.parent
End Sub

Public Sub SheetMain02_Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  SheetMain02_BeforeDoubleClick_Handler Target, Cancel
End Sub

Public Sub SheetMain02_Worksheet_SelectionChange(ByVal Target As Range)
  SheetMain02_Worksheet_Deactivate
End Sub

Public Sub SheetMain02_Worksheet_Deactivate()
  If modScrolling.blnIs_UserForm_Loaded("frmSheetReference") = True Then
    Unload frmSheetReference
  End If
End Sub


' -------------------------------
' --  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  --
' -------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain02_BeforeDoubleClick_Handler(Target As Range, ByRef Cancel As Boolean)

  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  Dim ISectDate
  Dim ISect
  
  Dim strGoToAddress As String
                                        
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean

  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  
  If Target Is Nothing Then GoTo ErrHandler
  
  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
  
  If modServiceModule.IsNameExists(ThisWorkbook, "datePrice") = False Or _
     modServiceModule.IsNameExists(ThisWorkbook, "periodPrice") = False Or _
     modServiceModule.IsNameExists(ThisWorkbook, "resolutionPrice") = False Then
       GoTo ErrHandler
  Else
       Set ISectDate = Application.Intersect(Target, Union(wsSheet.Range("datePrice"), _
                                                           wsSheet.Range("periodPrice"), _
                                                           wsSheet.Range("resolutionPrice")))
  End If
  
  If Target.cells(1, 1).Interior.ColorIndex = colorLightBlue And _
     (Not ISectDate Is Nothing) Then
    
    modServiceModule.UNPROTECT_SHEET wsSheet
     
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If Len(Trim(Target.cells(1, 1).value)) <> 0 Then
     intDay = Split(Target.cells(1, 1).value, ".")(0)
     intMonth = Split(Target.cells(1, 1).value, ".")(1)
     intYear = Split(Target.cells(1, 1).value, ".")(2)
    Else
     intDay = 0
    End If
 
    Cancel = True
    frmDateChoose.Show vbModal
    
    Target.cells(1, 1).value = modGlobals.STR_SELECT_DATE
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set ISect = Application.Intersect(Target, wsSheet.Range("datePrice"))
    If Not ISect Is Nothing Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      If Len(Trim(Target.cells(1, 1).Offset(0, 1).value)) <> 0 Then
        If CDate(Target.cells(1, 1).value) > CDate(Target.cells(1, 1).Offset(0, 1).value) Then
          MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
                 vbCritical, _
                 STR_MSGBOX_WARNING_TITLE
          Target.cells(1, 1).ClearContents
        End If
      End If
    Else
      Set ISect = Application.Intersect(Target, wsSheet.Range("periodPrice"))
      If Not ISect Is Nothing Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(Trim(Target.cells(1, 1).Offset(0, -1).value)) <> 0 Then
          If CDate(Target.cells(1, 1).value) < CDate(Target.cells(1, 1).Offset(0, -1).value) Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!", _
                   vbCritical, _
                   STR_MSGBOX_WARNING_TITLE
            Target.cells(1, 1).ClearContents
          End If
        End If
      End If
    End If
      
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo CleanUp
  
  End If
  
  GoTo CleanUp

ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain02_Change_Handler(Target As Range)
  
  On Error GoTo ErrWsTitleChange
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  
  Dim intRowHeight As Integer
  Dim intColorIndex As Integer
  Dim intColorIndexEtc As Integer
  
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean
  Dim blnCellLocked As Boolean
  
  Dim rngCell As Range
  Dim rngRange As Range
  
  Dim ISect
    
  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False

  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
    
  modServiceModule.UNPROTECT_SHEET wsSheet
    
  If modServiceModule.IsNameExists(wbBook, "value_kind_of_coolant") Then
    Set ISect = Application.Intersect(Target, wsSheet.Range("value_kind_of_coolant"))
  
    If ISect Is Nothing Then _
      GoTo skipStep
    
    If LCase(Target.cells(1, 1).value) = "|fffd||fffd||fffd||fffd||fffd||fffd|" Then
      frmKindOfCoolant.Show
      Target.cells(1, 1).value = modGlobals.STR_KIND_OF_COOLANT
    End If
  End If
  
skipStep:
  If Target.cells(1, 1).Row > 6 Then
    If Target.MergeCells Then
      modServiceModule.AutoFitMergedCellRowHeight Target, 20
    Else
      Target.cells(1, 1).EntireRow.AutoFit
      intRowHeight = Target.cells(1, 1).RowHeight
      If intRowHeight < 20 Then Target.cells(1, 1).RowHeight = 20
    End If
  End If
    
  modServiceModule.PROTECT_SHEET wsSheet, True
  
  GoTo CleanUp

ErrWsTitleChange:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:
  Set wbBook = Nothing
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain02_Hyperlink_Handler(ByVal Target As Hyperlink, _
                                         ByVal wsSheet As Worksheet)
  
  On Error GoTo ErrHandler
  
  Dim intNumColumn As Integer
  Dim intNumRow As Integer
  Dim intCountRow As Integer
 
  Dim intDeleteColumnNumber As Integer  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strDeleteString As String         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strRangeName As String            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim intRenumberColumnOffset As String ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                        ' (0, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
                                        
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean
  
  If modHyperlink.blnPrimary_HL_Handler(Target.Range.cells(1, 1), wsSheet) = True Then Exit Sub
  
  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
 
  intNumColumn = Target.Range.cells(1, 1).Column
  intNumRow = Target.Range.cells(1, 1).Row
  
  modServiceModule.UNPROTECT_SHEET wsSheet
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If InStr(Target.Range.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") Then
    intDeleteColumnNumber = 4
    intRenumberColumnOffset = -1
    If Target.Range.cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
      strRangeName = "add_PRICE_range_WARM"
      strDeleteString = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
      intCountRow = 2
    Else
      strRangeName = "add_PRICE_range"
      strDeleteString = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
      intCountRow = 1
    End If
    GoTo ProcessHyp
  ElseIf Target.Range.cells(1, 1).value = "|fffd|" Then
    intDeleteColumnNumber = Target.Range.Column
    strRangeName = ""
    strDeleteString = ""
    intRenumberColumnOffset = 1
    GoTo ProcessHyp
  End If
  
  GoTo WithOutProcessHyp
  
ProcessHyp:
  SheetMain02_ProcessHyperlink_Handler Target.Range.cells(1, 1), strRangeName, _
                                       intDeleteColumnNumber, strDeleteString, _
                                       intRenumberColumnOffset, intCountRow
  
WithOutProcessHyp:
  modServiceModule.PROTECT_SHEET wsSheet, True
  
  GoTo CleanUp

ErrHandler:
  MsgBox Err.Description, vbOKOnly, wsSheet.name
  
CleanUp:
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal
  Application.CutCopyMode = True
  Application.Calculation = xlCalculationAutomatic
  Application.Calculate
  If intNumRow > 0 And intNumColumn > 0 Then
    wsSheet.cells(intNumRow, intNumColumn).Select
  End If

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain02_ProcessHyperlink_Handler(ByVal rngTarget As Range, _
                                                ByVal strRangeName As String, _
                                                ByVal intDeleteColumnNumber As Integer, _
                                                ByVal strDeleteString As String, _
                                                ByVal intRenumberColumnOffset As Integer, _
                                                Optional ByVal intCountRowInRange As Integer = 1)

  Application.EnableEvents = False
  Application.ScreenUpdating = False
  
  If rngTarget Is Nothing Or _
     intDeleteColumnNumber = 0 Then GoTo e

  Dim rngTargetNRow As Integer
  Dim rngTargetNCol As Integer
  Dim intCounter As Integer
  Dim strMRName As String
  Dim strMOName As String
  Dim rngRange As Range
  Dim wbThis As Workbook
  Dim wsRanges As Worksheet
  Dim wsActiveSheet As Worksheet
  Dim wsTechSheet As Worksheet
  
  Set wsActiveSheet = rngTarget.parent
  Set wbThis = wsActiveSheet.parent
  
  rngTargetNRow = rngTarget.Row
  rngTargetNCol = rngTarget.Column
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) > 0 Then
  
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbThis, strRangeName) = False Then
      GoTo e
    End If
    If Len(strDeleteString) = 0 Then
      GoTo e
    End If
    
    Set wsRanges = wbThis.Names(strRangeName).RefersToRange.parent
  
    wsRanges.Activate
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    wsRanges.Range(strRangeName).Font.ColorIndex = xlAutomatic
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    wsRanges.Range(strRangeName).EntireRow.Hidden = False
    
    wsRanges.Range(strRangeName).Copy
    wsActiveSheet.Activate
    wsActiveSheet.cells(rngTargetNRow, 1).Select
    Selection.Insert Shift:=xlDown
    Application.CutCopyMode = False
    
    wsActiveSheet.cells(rngTargetNRow, intDeleteColumnNumber).Select
    modHyperlink.ShapeDeleteHyperlink wsActiveSheet.cells(rngTargetNRow, intDeleteColumnNumber), _
                                      strDeleteString
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Set rngRange = wsActiveSheet.Range("colorIndexCells")
    modServiceModule.RepaintCellsInRange rngTargetNRow, intCountRowInRange, rngRange
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    wsRanges.Range(strRangeName).Font.ColorIndex = colorWhite
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    wsRanges.Range(strRangeName).EntireRow.Hidden = True

    rngTarget.Offset(0, intRenumberColumnOffset).Select
    Selection.Offset(-1, 0).Select
      
    modServiceModule.RENUMBER_ADD_CELLS Selection
    
    GoTo e
  
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) = 0 Then
    
    rngTarget.Offset(0, intRenumberColumnOffset).Select
    Selection.EntireRow.Delete
    
    GoTo e
  
  End If
  
e:
End Sub
Attribute VB_Name = "modSheetMain03"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const strRegion_6_22 As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"

Public Sub SheetMain03_Worksheet_Change(ByVal Target As Range)
  SheetMain03_Change_Handler Target
End Sub

Public Sub SheetMain03_Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modHyperlink.Worksheet_General_FollowHyperlink Target.Range, Target.Range.parent, "add_HYPERLINK_range"
End Sub

Public Sub SheetMain03_Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  SheetMain03_BeforeDoubleClick_Handler Target, Cancel
End Sub

Public Sub SheetMain03_Worksheet_SelectionChange(ByVal Target As Range)
  SheetMain03_Worksheet_Deactivate
End Sub

Public Sub SheetMain03_Worksheet_Deactivate()
  If modScrolling.blnIs_UserForm_Loaded("frmSheetReference") = True Then
    Unload frmSheetReference
  End If
End Sub


' -------------------------------
' --  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  --
' -------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain03_BeforeDoubleClick_Handler(Target As Range, ByRef Cancel As Boolean)

  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  Dim ISectDate
  Dim ISectWebsite
  
  Dim strGoToAddress As String
  
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean

  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  
  If Target Is Nothing Then GoTo ErrHandler
  
  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
  
  If modServiceModule.IsNameExists(ThisWorkbook, "Date_of_publication") = False Or _
     modServiceModule.IsNameExists(ThisWorkbook, "Website_address_internet") = False Then
       GoTo ErrHandler
  Else
       Set ISectDate = Application.Intersect(Target, wsSheet.Range("Date_of_publication"))
       Set ISectWebsite = Application.Intersect(Target, wsSheet.Range("Website_address_internet"))
  End If
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  If Target.cells(1, 1).Interior.ColorIndex = colorLightBlue And _
     (Not ISectDate Is Nothing) Then
     
    modServiceModule.UNPROTECT_SHEET wsSheet
     
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If Len(Trim(Target.cells(1, 1).value)) <> 0 Then
     intDay = Split(Target.cells(1, 1).value, ".")(0)
     intMonth = Split(Target.cells(1, 1).value, ".")(1)
     intYear = Split(Target.cells(1, 1).value, ".")(2)
    Else
     intDay = 0
    End If
    
    Cancel = True
    frmDateChoose.Show vbModal
    
    Target.cells(1, 1).value = modGlobals.STR_SELECT_DATE
    
    If Len(Trim(modGlobals.STR_SELECT_DATE)) <> 0 Then
      If CDate(modGlobals.STR_SELECT_DATE) > Date Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|!", _
               vbCritical, _
               STR_MSGBOX_WARNING_TITLE
        Target.cells(1, 1).ClearContents
      End If
    End If
    
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo CleanUp
  ElseIf (Target.cells(1, 1).Interior.ColorIndex = colorYellow Or _
          Target.cells(1, 1).Interior.ColorIndex = colorCyan) And _
         (Not ISectWebsite Is Nothing) And _
         Len(Trim(Target.cells(1, 1).value)) <> 0 Then                           ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    modServiceModule.UNPROTECT_SHEET wsSheet
    strGoToAddress = Target.cells(1, 1).value
    If InStr(strGoToAddress, "www") <> 0 And InStr(strGoToAddress, "http") = 0 And InStr(strGoToAddress, "ftp") = 0 Then strGoToAddress = "http://" & strGoToAddress
      If InStr(strGoToAddress, "http") <> 0 Or _
         InStr(strGoToAddress, "ftp") <> 0 Then
        If MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd|"") |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd|"")?", _
           vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd|!") = vbYes Then
             On Error GoTo ErrGoToHypperlink
             wbBook.FollowHyperlink strGoToAddress
             On Error GoTo ErrHandler
             Cancel = True
        End If
    End If
      
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo CleanUp
  
  End If
  
  GoTo CleanUp
  
ErrGoToHypperlink:
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If modInternetConnectionState.blnIsOnLine = False Then
    modServiceModule.PROTECT_SHEET wsSheet, True
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
               vbCritical, _
               STR_MSGBOX_WARNING_TITLE
  Else
    modServiceModule.PROTECT_SHEET wsSheet, True
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", _
           vbCritical, _
           STR_MSGBOX_WARNING_TITLE
  End If
  modServiceModule.PROTECT_SHEET wsSheet, True
  GoTo CleanUp
  
ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain03_Change_Handler(Target As Range)
  
  On Error GoTo ErrWsTitleChange
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  
  Dim intRowHeight As Integer
  Dim intColorIndex As Integer
  Dim intColorIndexEtc As Integer
  
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean
  Dim blnCellLocked As Boolean
  
  Dim rngCell As Range
  Dim rngRange As Range
  
  Dim ISect
  Dim ISectDate
    
  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False

  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
    
  modServiceModule.UNPROTECT_SHEET wsSheet
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If LCase(wbBook.Names("region_name").RefersToRange.cells(1, 1).value) = strRegion_6_22 Then
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set ISect = Application.Intersect(Target, wsSheet.Range("checkCell_3").Columns(3).cells)
    If Not ISect Is Nothing Then
        
        intColorIndex = colorWhite
        intColorIndexEtc = colorCyan
        blnCellLocked = True
        modGlobals.STR_NAME_SOURCE = Target.cells(1, 1).Offset(0, -6).value
        If LCase(Target.cells(1, 1).value) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
          frmNameSource.Show
          Target.cells(1, 1).value = modGlobals.STR_NAME_SOURCE
          ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          If Target.cells(1, 1).Offset(0, -6).value <> modGlobals.STR_NAME_SOURCE Then _
            Target.cells(1, 1).Offset(0, -6).value = modGlobals.STR_NAME_SOURCE
        ElseIf LCase(Target.cells(1, 1).value) = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
          intColorIndex = colorCyan
          blnCellLocked = False
          intColorIndexEtc = colorWhite
       
          If Target.cells(1, 1).Interior.ColorIndex = colorCyan Then
            If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbCrLf & _
                      "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?" & vbCrLf & _
                      "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd|"", |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbCrLf & _
                      "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd|"", |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!") = vbNo Then
              If Target.cells(1, 1).Offset(0, 2).Interior.ColorIndex = colorLightBlue Then
                Target.cells(1, 1).value = modGlobals.STR_NAME_SOURCE
              Else
                Target.cells(1, 1).value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
              End If
              GoTo skipStep
            Else
              ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              If Len(Trim(Target.cells(1, 1).Offset(0, -6).value)) <> 0 Then _
                Target.cells(1, 1).Offset(0, -6).value = vbNullString
            End If
          End If
        End If
    
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|
        Target.cells(1, 1).Offset(0, 1).Interior.ColorIndex = intColorIndex
        Target.cells(1, 1).Offset(0, 1).Locked = blnCellLocked
        If blnCellLocked = True Then Target.cells(1, 1).Offset(0, 1).ClearContents
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        For Each rngCell In wsSheet.Range(Target.cells(1, 1).Offset(0, 2), Target.cells(1, 1).Offset(0, 5))
          Set ISectDate = Application.Intersect(rngCell.cells(1, 1), wsSheet.Range("Date_of_publication"))
          
          If Not ISectDate Is Nothing And _
             InStr(1, rngCell.cells(1, 1).value, "x") <> 1 And _
             intColorIndexEtc <> colorWhite Then
               rngCell.cells(1, 1).Interior.ColorIndex = colorLightBlue
          ElseIf InStr(1, rngCell.cells(1, 1).value, "x") <> 1 Then
               rngCell.cells(1, 1).Interior.ColorIndex = intColorIndexEtc
               rngCell.cells(1, 1).Locked = Not (blnCellLocked)
               If Not (blnCellLocked) = True Then rngCell.cells(1, 1).ClearContents
          End If
        Next rngCell
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|
        If wsSheet.Range("checkCell_3").Columns(3).Find("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , xlValues, xlPart) Is Nothing Then
          wsSheet.Range("comments_for_CRO").value = "True"
          wsSheet.Range("comments_for_CRO").cells(1, 1).Offset(2, 0).value = "3"
        Else
          wsSheet.Range("comments_for_CRO").value = "False"
          wsSheet.Range("comments_for_CRO").cells(1, 1).Offset(2, 0).value = "4"
        End If
        wsSheet.Range("checkCell_3").Columns(4).EntireColumn.Hidden = wsSheet.Range("comments_for_CRO").value
    
skipStep:
    End If
    
  End If
  
  If Target.cells(1, 1).Row > 6 Then
    If Target.MergeCells Then
      modServiceModule.AutoFitMergedCellRowHeight Target, 20
    Else
      Target.cells(1, 1).EntireRow.AutoFit
      intRowHeight = Target.cells(1, 1).RowHeight
      If intRowHeight < 20 Then Target.cells(1, 1).RowHeight = 20
    End If
  End If
    
  modServiceModule.PROTECT_SHEET wsSheet, True
  
  GoTo CleanUp

ErrWsTitleChange:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:
  Set wbBook = Nothing
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal

End Sub

Attribute VB_Name = "modSheetMain04"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public Sub SheetMain04_Worksheet_Change(ByVal Target As Range)
  modChange.WsGeneralChange Target
End Sub

Public Sub SheetMain04_Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modHyperlink.Worksheet_General_FollowHyperlink Target.Range, Target.Range.parent, "add_COMMENTS_range"
End Sub

Public Sub SheetMain04_Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)

End Sub

Public Sub SheetMain04_Worksheet_SelectionChange(ByVal Target As Range)
  SheetMain04_Worksheet_Deactivate
End Sub

Public Sub SheetMain04_Worksheet_Deactivate()
  If modScrolling.blnIs_UserForm_Loaded("frmSheetReference") = True Then
    Unload frmSheetReference
  End If
End Sub

Attribute VB_Name = "modSheetMain05"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public Sub SheetMain05_Worksheet_Change(ByVal Target As Range)
  modChange.WsGeneralChange Target
End Sub

Public Sub SheetMain05_Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  If ThisWorkbook.Names("TSphere_trans").RefersToRange.cells(1, 1).value = "TBO" Then
    modHyperlink.Worksheet_General_FollowHyperlink Target.Range, Target.Range.parent, "add_PRICE_2_TBO_range"
  Else
    modHyperlink.Worksheet_General_FollowHyperlink Target.Range, Target.Range.parent, "add_PRICE_2_range"
  End If
End Sub

Public Sub SheetMain05_Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  SheetMain05_BeforeDoubleClick_Handler Target, Cancel
End Sub

Public Sub SheetMain05_Worksheet_SelectionChange(ByVal Target As Range)
  SheetMain05_Worksheet_Deactivate
End Sub

Public Sub SheetMain05_Worksheet_Deactivate()
  If modScrolling.blnIs_UserForm_Loaded("frmSheetReference") = True Then
    Unload frmSheetReference
  End If
End Sub


' -------------------------------
' --  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  --
' -------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain05_BeforeDoubleClick_Handler(Target As Range, ByRef Cancel As Boolean)

  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  Dim ISectDate
  Dim ISectTA
  Dim ISect
  
  Dim strGoToAddress As String
                                        
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean

  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  
  If Target Is Nothing Then GoTo ErrHandler
  
  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
  
  If modServiceModule.IsNameExists(ThisWorkbook, "datePriceTwo") = False Or _
     modServiceModule.IsNameExists(ThisWorkbook, "periodPriceTwo") = False Or _
     modServiceModule.IsNameExists(ThisWorkbook, "resolutionPriceTwo") = False Then
       GoTo ErrHandler
  Else
       Set ISectDate = Application.Intersect(Target, Union(wsSheet.Range("datePriceTwo"), _
                                                           wsSheet.Range("periodPriceTwo"), _
                                                           wsSheet.Range("resolutionPriceTwo")))
  End If
  
  If Target.cells(1, 1).Interior.ColorIndex = colorLightBlue And _
     (Not ISectDate Is Nothing) Then
    
    modServiceModule.UNPROTECT_SHEET wsSheet
     
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If Len(Trim(Target.cells(1, 1).value)) <> 0 Then
     intDay = Split(Target.cells(1, 1).value, ".")(0)
     intMonth = Split(Target.cells(1, 1).value, ".")(1)
     intYear = Split(Target.cells(1, 1).value, ".")(2)
    Else
     intDay = 0
    End If
 
    Cancel = True
    frmDateChoose.Show vbModal
    
    Target.cells(1, 1).value = modGlobals.STR_SELECT_DATE
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set ISect = Application.Intersect(Target, wsSheet.Range("datePriceTwo"))
    If Not ISect Is Nothing Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      If Len(Trim(Target.cells(1, 1).Offset(0, 1).value)) <> 0 Then
        If CDate(Target.cells(1, 1).value) > CDate(Target.cells(1, 1).Offset(0, 1).value) Then
          MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
                 vbCritical, _
                 STR_MSGBOX_WARNING_TITLE
          Target.cells(1, 1).ClearContents
        End If
      End If
    Else
      Set ISect = Application.Intersect(Target, wsSheet.Range("periodPriceTwo"))
      If Not ISect Is Nothing Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(Trim(Target.cells(1, 1).Offset(0, -1).value)) <> 0 Then
          If CDate(Target.cells(1, 1).value) < CDate(Target.cells(1, 1).Offset(0, -1).value) Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!", _
                   vbCritical, _
                   STR_MSGBOX_WARNING_TITLE
            Target.cells(1, 1).ClearContents
          End If
        End If
      End If
    End If
      
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo CleanUp
  
  End If
  
  GoTo CleanUp

ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal

End Sub

Attribute VB_Name = "modSheetMain06"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public Sub SheetMain06_Worksheet_Change(ByVal Target As Range)
  SheetMain06_Change_Handler Target
End Sub

Public Sub SheetMain06_Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  SheetMain06_Hyperlink_Handler Target, Target.Range.parent
End Sub

Public Sub SheetMain06_Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  SheetMain06_BeforeDoubleClick_Handler Target, Cancel
End Sub

Public Sub SheetMain06_Worksheet_SelectionChange(ByVal Target As Range)
  SheetMain06_Worksheet_Deactivate
End Sub

Public Sub SheetMain06_Worksheet_Deactivate()
  If modScrolling.blnIs_UserForm_Loaded("frmSheetReference") = True Then
    Unload frmSheetReference
  End If
End Sub


' -------------------------------
' --  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  --
' -------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain06_Change_Handler(Target As Range)
  
  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  
  Dim wsSheet As Worksheet
    
  Dim intNRow As Integer
  Dim intNColumn As Integer
  Dim intRowHeight As Integer
  
  Dim rngCell As Range
  Dim rngRange As Range
  
  Dim ISect
  
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean
    
  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False

  Set wbBook = Me.parent
  Set wsSheet = Target.parent
    
  modServiceModule.UNPROTECT_SHEET wsSheet
  
  intNRow = Target.cells(1, 1).Row
  intNColumn = Target.cells(1, 1).Column
  
  If Target.cells(1, 1).Row > 6 Then
    If CStr(wsSheet.cells(Target.cells(1, 1).Row, 5).value) = CStr(5) Or _
       CStr(wsSheet.cells(Target.cells(1, 1).Row, 5).value) = CStr(6) Then
      Target.cells(1, 1).RowHeight = 30
    ElseIf Target.MergeCells Then
      modServiceModule.AutoFitMergedCellRowHeight Target
    Else
      Target.cells(1, 1).EntireRow.AutoFit
      intRowHeight = Target.cells(1, 1).RowHeight
      If intRowHeight < 20 Then Target.cells(1, 1).RowHeight = 20
    End If
  End If
    
  modServiceModule.PROTECT_SHEET wsSheet, True
  GoTo CleanUp

ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal
  
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain06_Hyperlink_Handler(ByVal Target As Hyperlink, _
                                         ByVal wsSheet As Worksheet)
  
  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim intNumColumn As Integer
  Dim intNumRow As Integer
  Dim rngRange As Range
  Dim intDeleteColumnNumber As Integer  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strRangeName As String
  Dim strDeleteString As String         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim intRenumberColumnOffset As String ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                        ' (0, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
  
  Dim rngOne As Range
  
  modServiceModule.UNPROTECT_SHEET wsSheet
  
  If modHyperlink.blnPrimary_HL_Handler(Target.Range.cells(1, 1), wsSheet) = True Then Exit Sub
  
  
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean
  
  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
 
  intNumColumn = Target.Range.cells(1, 1).Column
  intNumRow = Target.Range.cells(1, 1).Row
  
  If Target.Range.cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    wsSheet.Columns(wsSheet.Range("add_event").EntireColumn.Column).Copy
    wsSheet.Columns(wsSheet.Range("addHypEvent").cells(1, 1).Column).Insert Shift:=xlToRight
    wsSheet.cells(1, intNumColumn).EntireColumn.Hidden = False
    
    GoTo numberingHorizontal
    
  ElseIf Target.Range.cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then                  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    wsSheet.Columns(intNumColumn).Delete
    
    GoTo numberingHorizontal
    
  ElseIf InStr(Target.Range.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Or _
         InStr(Target.Range.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Then
         
    intDeleteColumnNumber = 4
    strDeleteString = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & Right(Target.Range.cells(1, 1).value, _
                                        Len(Target.Range.cells(1, 1).value) - _
                                        Len("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"))
    intRenumberColumnOffset = -1
    If InStr(Target.Range.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Then
      strRangeName = "add_source_of_funding"
    ElseIf InStr(Target.Range.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Then
      strRangeName = "add_index"
    End If
    GoTo ProcessHyp
    
  ElseIf Target.Range.cells(1, 1).value = "|fffd|" Then
  
    intDeleteColumnNumber = Target.Range.cells(1, 1).Column
    strRangeName = ""
    strDeleteString = ""
    intRenumberColumnOffset = 1
    GoTo ProcessHyp
    
  End If
    
numberingHorizontal:
  If intNumColumn <> wsSheet.Range("addHypEvent").cells(1, 1).Column Then
    If intNumColumn = wsSheet.Range("inv_ch5_6_8").cells(1, 1).Column + 1 Then
      wsSheet.cells(wsSheet.Range("addHypEvent").Row, intNumColumn) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1"
      wsSheet.cells(wsSheet.Range("addHypEvent").Row + 1, intNumColumn) = "4"
      intNumColumn = intNumColumn + 1
    End If
    If wsSheet.Range("addHypEvent").cells(1, 1).Column <> wsSheet.Range("inv_ch5_6_8").cells(1, 1).Column + 2 Then
      wsSheet.cells(wsSheet.Range("addHypEvent").Row, intNumColumn - 1).Select
      Selection.AutoFill Destination:=wsSheet.Range(wsSheet.cells(wsSheet.Range("addHypEvent").Row, _
                                                                  intNumColumn - 1), _
                                                    wsSheet.Range("addHypEvent").cells(1, 1).Offset(0, -1)), Type:=xlFillDefault
      wsSheet.cells(wsSheet.Range("addHypEvent").Row + 1, intNumColumn - 1).Select
      Selection.AutoFill Destination:=wsSheet.Range(wsSheet.cells(wsSheet.Range("addHypEvent").Row + 1, _
                                                                  intNumColumn - 1), _
                                                    wsSheet.Range("addHypEvent").cells(1, 1).Offset(1, -1)), Type:=xlFillDefault
    End If
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For Each rngOne In wsSheet.Range("inv_ch5_6_8").cells
    If wsSheet.Range("addHypEvent").cells(1, 1).Column > wsSheet.Range("inv_ch5_6_8").cells(1, 1).Column + 1 Then
      If rngOne.Interior.ColorIndex = colorCyan Then
        rngOne.FormulaR1C1 = "=SUM(RC[1]:RC[" & intNumColumn - 8 & "])"
        rngOne.Interior.ColorIndex = colorGreen
        rngOne.Locked = True
      End If
    Else
      If rngOne.Interior.ColorIndex = colorGreen Then
        rngOne.ClearContents
        rngOne.Interior.ColorIndex = colorCyan
        rngOne.Locked = False
      End If
    End If
  Next
  
  GoTo CleanUp
    
ProcessHyp:
  SheetMain06_ProcessHyperlink_Handler Target.Range.cells(1, 1), strRangeName, _
                                       intDeleteColumnNumber, strDeleteString, _
                                       intRenumberColumnOffset
  GoTo CleanUp
  
ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:
  modServiceModule.PROTECT_SHEET wsSheet, True
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal
  Application.CutCopyMode = True
  Application.Calculation = xlCalculationAutomatic
  Application.Calculate
  If intNumRow > 0 And intNumColumn > 0 Then
    wsSheet.cells(intNumRow, intNumColumn).Select
  End If

End Sub


' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain06_ProcessHyperlink_Handler(ByVal rngTarget As Range, _
                                                ByVal strRangeName As String, _
                                                ByVal intDeleteColumnNumber As Integer, _
                                                ByVal strDeleteString As String, _
                                                ByVal intRenumberColumnOffset As Integer)
  
  On Error GoTo ErrHandler
  
  If rngTarget Is Nothing Or _
     intDeleteColumnNumber = 0 Then GoTo CleanUp

  Dim rngTargetNRow As Integer
  Dim rngTargetNCol As Integer
  Dim wbThis As Workbook
  Dim wsActiveSheet As Worksheet
  
  Set wsActiveSheet = rngTarget.parent
  Set wbThis = wsActiveSheet.parent
  
  rngTargetNRow = rngTarget.Row
  rngTargetNCol = rngTarget.Column
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) > 0 Then
  
    wsActiveSheet.Rows("1:14").Hidden = False
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbThis, strRangeName) = False Then
      GoTo CleanUp
    End If
    If Len(strDeleteString) = 0 Then
      GoTo CleanUp
    End If
  
    wsActiveSheet.Activate
    wsActiveSheet.Range(strRangeName).Copy
    wsActiveSheet.Activate
    wsActiveSheet.cells(rngTargetNRow, 1).Select
    Selection.Insert Shift:=xlDown
    Application.CutCopyMode = False
    
    wsActiveSheet.cells(rngTargetNRow, intDeleteColumnNumber).Select
    modHyperlink.ShapeDeleteHyperlink wsActiveSheet.cells(rngTargetNRow, intDeleteColumnNumber), _
                                      strDeleteString
      
    rngTarget.Offset(0, intRenumberColumnOffset).Select
    Selection.Offset(-1, 0).Select
      
    modServiceModule.RENUMBER_ADD_CELLS Selection
    
    GoTo CleanUp
  
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) = 0 Then
    modServiceModule.RENUMBER_REMOVE_CELLS rngTarget.Offset(0, intRenumberColumnOffset).Column, _
                                           rngTarget.Offset(0, intRenumberColumnOffset).Row, _
                                           rngTarget.Offset(0, intRenumberColumnOffset).cells(1, 1), _
                                           rngTarget.parent
    rngTarget.Offset(0, intRenumberColumnOffset).Select
    Selection.EntireRow.Delete
    
    GoTo CleanUp
  
  End If
  
GoTo CleanUp
  
ErrHandler:
  GoTo CleanUp

CleanUp:
  wsActiveSheet.Rows("1:14").Hidden = True

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain06_BeforeDoubleClick_Handler(Target As Range, ByRef Cancel As Boolean)

  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  Dim ISectDate
  Dim ISect
  
  Dim strGoToAddress As String
  
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean

  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  
  If Target Is Nothing Then GoTo ErrHandler
  
  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
  
  If modServiceModule.IsNameExists(ThisWorkbook, "dateStartIPR") = False Or _
     modServiceModule.IsNameExists(ThisWorkbook, "dateEndIPR") = False Then
       GoTo ErrHandler
  Else
       Set ISectDate = Application.Intersect(Target, Union(wsSheet.Range("dateStartIPR"), _
                                                           wsSheet.Range("dateEndIPR")))
  End If
  
  If Target.cells(1, 1).Interior.ColorIndex = colorLightBlue And _
     (Not ISectDate Is Nothing) Then
    
    modServiceModule.UNPROTECT_SHEET wsSheet
      
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If Len(Trim(Target.cells(1, 1).value)) <> 0 Then
     intDay = Split(Target.cells(1, 1).value, ".")(0)
     intMonth = Split(Target.cells(1, 1).value, ".")(1)
     intYear = Split(Target.cells(1, 1).value, ".")(2)
    Else
     intDay = 0
    End If

    Cancel = True
    frmDateChoose.Show vbModal
    
    Target.cells(1, 1).value = modGlobals.STR_SELECT_DATE
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set ISect = Application.Intersect(Target, wsSheet.Range("dateStartIPR"))
    
    If Not ISect Is Nothing Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If Len(Trim(Target.cells(1, 1).Offset(1, 0).value)) <> 0 Then
        If CDate(Target.cells(1, 1).value) > CDate(Target.cells(1, 1).Offset(1, 0).value) Then
          MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
                 vbCritical, _
                 STR_MSGBOX_WARNING_TITLE
          Target.cells(1, 1).ClearContents
        End If
      End If
    Else
      Set ISect = Application.Intersect(Target, wsSheet.Range("dateEndIPR"))
      If Not ISect Is Nothing Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(Trim(Target.cells(1, 1).Offset(-1, 0).value)) <> 0 Then
          If CDate(Target.cells(1, 1).value) < CDate(Target.cells(1, 1).Offset(-1, 0).value) Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", _
                   vbCritical, _
                   STR_MSGBOX_WARNING_TITLE
            Target.cells(1, 1).ClearContents
          End If
        End If
      End If
    End If
      
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo CleanUp
  
  End If
  
  GoTo CleanUp

ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal

End Sub

Attribute VB_Name = "modSheetMain07"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public Sub SheetMain07_Worksheet_Change(ByVal Target As Range)
  modChange.WsGeneralChange Target
End Sub

Public Sub SheetMain07_Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  If ThisWorkbook.Names("TSphere_trans").RefersToRange.cells(1, 1).value = "WARM" And _
     InStr(1, Target.Range.cells(1, 1).Offset(-1, -1).MergeArea.cells(1, 1), "3.2") = 1 Then
    modHyperlink.Worksheet_General_FollowHyperlink Target.Range, Target.Range.parent, "add_INDEX_WARM_range"
  ElseIf ThisWorkbook.Names("TSphere_trans").RefersToRange.cells(1, 1).value = "HVS" And _
     InStr(1, Target.Range.cells(1, 1).Offset(-1, -1).value, "17.") = 1 Then
    modHyperlink.Worksheet_General_FollowHyperlink Target.Range, Target.Range.parent, "add_INDEX_HVS_object_range"
  Else
    modHyperlink.Worksheet_General_FollowHyperlink Target.Range, Target.Range.parent, "add_INDEX_range"
  End If
End Sub

Public Sub SheetMain07_Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)

End Sub

Public Sub SheetMain07_Worksheet_SelectionChange(ByVal Target As Range)
  SheetMain07_Worksheet_Deactivate
End Sub

Public Sub SheetMain07_Worksheet_Deactivate()
  If modScrolling.blnIs_UserForm_Loaded("frmSheetReference") = True Then
    Unload frmSheetReference
  End If
End Sub


' -------------------------------
' --  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  --
' -------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain07_BeforeDoubleClick_Handler(Target As Range, ByRef Cancel As Boolean)

  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  Dim ISectDate
  
  Dim strGoToAddress As String
  
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean

  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  
  If Target Is Nothing Then GoTo ErrHandler
  
  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
  
  If modServiceModule.IsNameExists(ThisWorkbook, "datePrice") = False Or _
     modServiceModule.IsNameExists(ThisWorkbook, "periodPrice") = False Then
       GoTo ErrHandler
  Else
       Set ISectDate = Application.Intersect(Target, Union(wsSheet.Range("datePrice"), _
                                                           wsSheet.Range("periodPrice")))
  End If
  
  If Target.cells(1, 1).Interior.ColorIndex = colorGreen And _
     (Not ISectDate Is Nothing) Then
    
    modServiceModule.UNPROTECT_SHEET wsSheet
     
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If Len(Trim(Target.cells(1, 1).value)) <> 0 Then
     intDay = Split(Target.cells(1, 1).value, ".")(0)
     intMonth = Split(Target.cells(1, 1).value, ".")(1)
     intYear = Split(Target.cells(1, 1).value, ".")(2)
    Else
     intDay = 0
    End If
    
    Cancel = True
    frmDateChoose.Show vbModal
    
    Target.cells(1, 1).value = modGlobals.STR_SELECT_DATE
    
    If Len(Trim(modGlobals.STR_SELECT_DATE)) <> 0 Then
      If CDate(modGlobals.STR_SELECT_DATE) > Date Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|!", _
               vbCritical, _
               STR_MSGBOX_WARNING_TITLE
        Target.cells(1, 1).ClearContents
      End If
    End If
      
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo CleanUp
  
  End If
  
  GoTo CleanUp

ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal

End Sub

Attribute VB_Name = "modSheetMain08"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public Sub SheetMain08_Worksheet_Change(ByVal Target As Range)
  modChange.WsGeneralChange Target
End Sub

Public Sub SheetMain08_Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  SheetMain08_Hyperlink_Handler Target, Target.Range.parent
End Sub

Public Sub SheetMain08_Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
''  SheetMain08_BeforeDoubleClick_Handler Target, Cancel
End Sub

Public Sub SheetMain08_Worksheet_SelectionChange(ByVal Target As Range)
  SheetMain08_Worksheet_Deactivate
End Sub

Public Sub SheetMain08_Worksheet_Deactivate()
  If modScrolling.blnIs_UserForm_Loaded("frmSheetReference") = True Then
    Unload frmSheetReference
  End If
End Sub


' -------------------------------
' --  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  --
' -------------------------------
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain08_Hyperlink_Handler(ByVal Target As Hyperlink, _
                                         ByVal wsSheet As Worksheet)
  
  On Error GoTo ErrHandler
  
  Dim intNumColumn As Integer
  Dim intNumRow As Integer
  
  Dim intDeleteColumnNumber As Integer  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strDeleteString As String         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Dim strRangeName As String            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim strEndRangeName As String         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim strIDforFormuls As String         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim intRenumberColumnOffset As String ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                        ' (0, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
  
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean
  
  If modHyperlink.blnPrimary_HL_Handler(Target.Range, wsSheet) = True Then GoTo CleanUp
  
  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
 
  intNumColumn = Target.Range.cells(1, 1).Column
  intNumRow = Target.Range.cells(1, 1).Row
  
  modServiceModule.UNPROTECT_SHEET wsSheet
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If InStr(Target.Range.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") Then
     Select Case Right(wsSheet.name, Len(wsSheet.name) - _
                                     Len(wsSheet.parent.Names("TSphere").RefersToRange.cells(1, 1).value & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (2)"))
      Case "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        strIDforFormuls = "1"
      Case "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        strIDforFormuls = "2"
      Case "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
        strIDforFormuls = "3"
      Case Else
        strIDforFormuls = "4"
    End Select
    
    strEndRangeName = Right(wsSheet.CodeName, Len(wsSheet.CodeName) - Len("sheetMain"))
    
    intDeleteColumnNumber = 14
    strDeleteString = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & Right(Target.Range.cells(1, 1).value, Len(Target.Range.cells(1, 1).value) - _
                      Len("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"))
    intRenumberColumnOffset = 0
    strRangeName = "add_INDEX_2_RECORD_range"
    If InStr(Target.Range.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Then
      intRenumberColumnOffset = -1
      If Target.Range.cells(1, 1).Row < wsSheet.Range("pointTwo" & strEndRangeName).Row Then
        strRangeName = "add_INDEX_2_SUPPLIER_range_1"
      Else
        strRangeName = "add_INDEX_2_SUPPLIER_2_range_1"
      End If
      intDeleteColumnNumber = 4
    ElseIf InStr(Target.Range.cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd|") Then
      intRenumberColumnOffset = 3
      If Target.Range.cells(1, 1).Row < wsSheet.Range("pointTwo" & strEndRangeName).Row Then
        strRangeName = "add_INDEX_2_ACQUISITION_range_1"
      Else
        strRangeName = "add_INDEX_2_ACQUISITION_2_range_1"
      End If
      intDeleteColumnNumber = 4
    End If
    GoTo ProcessHyp
  ElseIf Target.Range.cells(1, 1).value = "|fffd|" Then
    intDeleteColumnNumber = Target.Range.Column
    strRangeName = ""
    strDeleteString = ""
    intRenumberColumnOffset = 0
    If InStr(Target.ScreenTip, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") Then
      intRenumberColumnOffset = 1
    ElseIf InStr(Target.ScreenTip, "|fffd||fffd||fffd||fffd||fffd||fffd|") Then
      intRenumberColumnOffset = 3
    End If
    GoTo ProcessHyp
  End If
  
  GoTo WithOutProcessHyp
  
ProcessHyp:
  SheetMain07_ProcessHyperlink_Handler Target.Range.cells(1, 1), strRangeName, _
                                       intDeleteColumnNumber, strDeleteString, _
                                       intRenumberColumnOffset
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ' costs_OPS_4
  wsSheet.cells.Replace What:="costs_OPS_4", Replacement:="costs_OPS_" & strIDforFormuls, _
                        LookAt:=xlPart, SearchOrder:=xlByRows, _
                        MatchCase:=False, SearchFormat:=False, _
                        ReplaceFormat:=False
  ' costs_PH_4
  wsSheet.cells.Replace What:="costs_PH_4", Replacement:="costs_PH_" & strIDforFormuls, _
                        LookAt:=xlPart, SearchOrder:=xlByRows, _
                        MatchCase:=False, SearchFormat:=False, _
                        ReplaceFormat:=False
  
WithOutProcessHyp:
  modServiceModule.PROTECT_SHEET wsSheet, True
  
  GoTo CleanUp
  
ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal
  Application.CutCopyMode = True
  Application.Calculation = xlCalculationAutomatic
  Application.Calculate
  If intNumRow > 0 And intNumColumn > 0 Then
    wsSheet.cells(intNumRow, intNumColumn).Select
  End If
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain07_ProcessHyperlink_Handler(ByVal rngTarget As Range, _
                                                ByVal strRangeName As String, _
                                                ByVal intDeleteColumnNumber As Integer, _
                                                ByVal strDeleteString As String, _
                                                ByVal intRenumberColumnOffset As Integer)
  
  If rngTarget Is Nothing Or _
     intDeleteColumnNumber = 0 Then GoTo e

  Dim rngTargetNRow As Integer
  Dim rngTargetNCol As Integer
  Dim wbThis As Workbook
  Dim wsRanges As Worksheet
  Dim wsActiveSheet As Worksheet
  Set wsActiveSheet = rngTarget.parent
  Set wbThis = wsActiveSheet.parent
  Set wsRanges = wbThis.Worksheets("et_union")
  
  rngTargetNRow = rngTarget.Row
  rngTargetNCol = rngTarget.Column
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) > 0 Then
  
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbThis, strRangeName) = False Then
      GoTo e
    End If
    If Len(strDeleteString) = 0 Then
      GoTo e
    End If
  
    wsRanges.Activate
    wsRanges.Range(strRangeName).Copy
    wsActiveSheet.Activate
    wsActiveSheet.cells(rngTargetNRow, 1).Select
    Selection.Insert Shift:=xlDown
    Application.CutCopyMode = False
    
    wsActiveSheet.cells(rngTargetNRow, intDeleteColumnNumber).Select
    modHyperlink.ShapeDeleteHyperlink wsActiveSheet.cells(rngTargetNRow, intDeleteColumnNumber), _
                                      strDeleteString
      
    If Abs(intRenumberColumnOffset) = 1 Then
      rngTarget.Offset(0, intRenumberColumnOffset).Select
      Selection.Offset(-1, 0).Select
      
      modServiceModule.RENUMBER_ADD_CELLS Selection
    End If
    
    GoTo e
  
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Len(strRangeName) = 0 Then
    If Abs(intRenumberColumnOffset) = 1 Then
      modServiceModule.RENUMBER_REMOVE_CELLS rngTarget.Offset(0, intRenumberColumnOffset).Column, _
                                             rngTarget.Offset(0, intRenumberColumnOffset).Row, _
                                             rngTarget.Offset(0, intRenumberColumnOffset).cells(1, 1), _
                                             rngTarget.parent
    End If
    
    rngTarget.Offset(0, intRenumberColumnOffset).Select
    Selection.EntireRow.Delete
    
    GoTo e
  
  End If
  
e:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub SheetMain08_BeforeDoubleClick_Handler(Target As Range, ByRef Cancel As Boolean)

  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  Dim ISectDate
  
  Dim strGoToAddress As String
  
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean

  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  
  If Target Is Nothing Then GoTo ErrHandler
  
  Set wsSheet = Target.parent
  Set wbBook = wsSheet.parent
  
  If modServiceModule.IsNameExists(ThisWorkbook, "datePrice") = False Or _
     modServiceModule.IsNameExists(ThisWorkbook, "periodPrice") = False Then
       GoTo ErrHandler
  Else
       Set ISectDate = Application.Intersect(Target, Union(wsSheet.Range("datePriceTwo"), _
                                                           wsSheet.Range("periodPriceTwo")))
  End If
  
  If Target.cells(1, 1).Interior.ColorIndex = colorGreen And _
     (Not ISectDate Is Nothing) Then
    
    modServiceModule.UNPROTECT_SHEET wsSheet
     
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If Len(Trim(Target.cells(1, 1).value)) <> 0 Then
     intDay = Split(Target.cells(1, 1).value, ".")(0)
     intMonth = Split(Target.cells(1, 1).value, ".")(1)
     intYear = Split(Target.cells(1, 1).value, ".")(2)
    Else
     intDay = 0
    End If
 
    Cancel = True
    frmDateChoose.Show vbModal
    
    Target.cells(1, 1).value = modGlobals.STR_SELECT_DATE
    
    If Len(Trim(modGlobals.STR_SELECT_DATE)) <> 0 Then
      If CDate(modGlobals.STR_SELECT_DATE) > Date Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|!", _
               vbCritical, _
               STR_MSGBOX_WARNING_TITLE
        Target.cells(1, 1).ClearContents
      End If
    End If
      
    modServiceModule.PROTECT_SHEET wsSheet, True
    GoTo CleanUp
  
  End If
  
  GoTo CleanUp

ErrHandler:
  Debug.Print Err.Description
  GoTo CleanUp
  
CleanUp:
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal

End Sub

Attribute VB_Name = "modThisWorkbook"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const SAVE_STATUS_CRITICAL_IMPACT_WARNING As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd|. |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|'!"
Private Const SAVE_STATUS_SUCCESS As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Private Const SAVE_STATUS_LOW_IMPACT_WARNING As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|'"
Private Const SAVE_MESSAGE_TITLE As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

Public Sub ThisWorkbook_Workbook_BeforeSave()
    
    On Error GoTo ErrHandler
    
    Dim wbBook As Workbook
    Dim wsActiveSheet As Worksheet
    
    Dim blnFormLoad As Boolean
    
    Set wbBook = Application.ThisWorkbook
    Set wsActiveSheet = wbBook.ActiveSheet
    blnFormLoad = False
    
    Application.ReferenceStyle = xlA1
    
    ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbBook, "region_name") = False Then
      GoTo CleanUp
    End If
  
    If Len(CStr(wbBook.Names("region_name").RefersToRange.cells(1, 1).value)) = 0 Then
      GoTo CleanUp
    End If
      
    modCommonProv.Perform_Validation wbBook
    
    blnFormLoad = modScrolling.blnIs_UserForm_Loaded("frmValidationInProgress")
    
    If blnFormLoad Then frmValidationInProgress.cmdOK.Enabled = True
  
  If modGlobals.glngCriticalImpactWarningsCounter > 0 Then
    wbBook.CustomDocumentProperties("Status") = 1 '|fffd||fffd||fffd||fffd||fffd|
    If blnFormLoad Then frmValidationInProgress.lblGeneralResult.caption = SAVE_STATUS_CRITICAL_IMPACT_WARNING
    If blnFormLoad Then frmValidationInProgress.imgCriticalWarnings.Visible = True
    wbBook.Worksheets(gstrCheckSheetName).Activate
  ElseIf modGlobals.glngLowImpactWarningsCounter > 0 Then
    wbBook.CustomDocumentProperties("Status") = 1 '|fffd||fffd||fffd||fffd||fffd|
    If blnFormLoad Then frmValidationInProgress.lblGeneralResult.caption = SAVE_STATUS_LOW_IMPACT_WARNING
    If blnFormLoad Then frmValidationInProgress.imgLowImpactWarnings.Visible = True
    wbBook.Worksheets(gstrCheckSheetName).Activate
  Else '|fffd||fffd||fffd||fffd||fffd|
    wbBook.CustomDocumentProperties("Status") = 2 '|fffd||fffd||fffd||fffd||fffd|
    If blnFormLoad Then frmValidationInProgress.lblGeneralResult.caption = SAVE_STATUS_SUCCESS
    If blnFormLoad Then frmValidationInProgress.imgNoIssues.Visible = True
    wsActiveSheet.Activate
  End If
    
    GoTo CleanUp

ErrHandler:
    Debug.Print Err.Description
    GoTo CleanUp
  
CleanUp:
    Me.Application.ScreenUpdating = True
    If ActiveSheet.name = gstrCheckSheetName Then
      ActiveSheet.Range("C1").Select
    End If
End Sub

Public Sub ThisWorkbook_Workbook_Open()

  On Error GoTo ErrHandler
  
  modDocProperties.CheckDocProperites ThisWorkbook
  
  Application.Calculation = xlCalculationAutomatic ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ReferenceStyle = xlA1 ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - A1
  
  If modServiceModule.blnIsDocumentProperty(ThisWorkbook, "Status") = True Then
    ThisWorkbook.CustomDocumentProperties("Status") = 1 '|fffd||fffd||fffd||fffd||fffd|
  End If
  
  Dim wsSheet As Worksheet
  Dim wsActiveSheet As Worksheet
  Dim wsTitleSheet As Worksheet
  Dim wsTempSheet As Worksheet
  Dim wbBook As Workbook
  Dim rngRange As Range
  
  Set wbBook = Application.ThisWorkbook
  Set wsActiveSheet = wbBook.ActiveSheet

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If wbBook.Names("flag_main_template").RefersToRange.cells(1, 1).value Then
    If modScrolling.blnIs_UserForm_Loaded("frmSphereChoose") = True Then
      Unload frmSphereChoose
    End If
    frmSphereChoose.Show vbModal
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set rngRange = wbBook.Names("checkCell_1").RefersToRange.cells(1, 2)
  If Len(Trim(rngRange.value)) = 0 Then
    rngRange.parent.Activate
    rngRange.value = wbBook.Names("Tfirst_index_for_price").RefersToRange.cells(1, 1).value
  End If
  
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For Each wsSheet In wbBook.Worksheets
    If wsSheet.CodeName = "Instruction" Then
      If wbBook.Names("chkGetUpdatesValue").RefersToRange.cells(1, 1).value = "y" Then
        modUpdTemplMain.Check_Update_Execution wbBook
      End If
    End If
  Next wsSheet
  
  GoTo CleanUp

ErrHandler:
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: '" & Err.Description & "'!", _
           vbOKOnly + vbCritical, _
           STR_MSGBOX_WARNING_TITLE
    GoTo CleanUp
    
CleanUp:
  If Not (wsActiveSheet Is Nothing) Then
    wsActiveSheet.Activate
  End If
  
End Sub

Public Sub ThisWorkbook_Workbook_BeforePrint()
''
''  Dim wbBook As Workbook
''  Dim wsSheet As Worksheet
''
''  Dim vbResult As VbMsgBoxResult
''
''  Dim rngRange As Range
''  Dim rngCell As Range
''
''  Dim strCenterFooter As String
''  Dim strNameColumn As String
''  Dim strNameRow As String
''
''  Dim intCounter As Integer
''  Dim intCounter2 As Integer
''  Dim intCounterEndRow As Integer
''
''  Set wbBook = Application.ThisWorkbook
''
''  vbResult = MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!")
''  If vbResult = vbYes Then
''    strCenterFooter = _
''                     "&""Tahoma,|fffd||fffd||fffd||fffd||fffd||fffd||fffd|""&8" & Chr(10) & "" & _
''                     "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & _
''                     wbBook.CustomDocumentProperties("Version") & _
''                     ", &D" & " |fffd|. "
''
''    If Len(Trim(wbBook.Names("responsible_post").RefersToRange.value)) <> 0 Or _
''       Len(Trim(wbBook.Names("responsible_FIO").RefersToRange.value)) <> 0 Then
''     strCenterFooter = strCenterFooter & _
''                       "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & _
''                       wbBook.Names("responsible_post").RefersToRange.value & " " & _
''                       wbBook.Names("responsible_FIO").RefersToRange.value  '& Chr(10)
''    End If
''  Else
''    strCenterFooter = ""
''  End If
''
''  For Each wsSheet In wbBook.Worksheets
''    If wsSheet.Tab.ColorIndex <> modGlobals.colorLightBrown Then
''      With wsSheet
''             .PageSetup.CenterFooter = strCenterFooter
''      End With
''    End If
''  Next wsSheet
''
''  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''  strNameColumn = "hide_me_column_"
''  strNameRow = "hide_me_row_"
''  For intCounter = 1 To 6
''    If intCounter = 1 Then
''         intCounterEndRow = 2
''
''          ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|... |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| :)
''          If modServiceModule.IsNameExists(wbBook, "createPrintForm") = True Then
''            wbBook.Names("createPrintForm").RefersToRange.EntireRow.Hidden = True
''          End If
''
''    ElseIf intCounter = 3 Or intCounter = 4 Or _
''           intCounter = 5 Or intCounter = 6 Then
''         intCounterEndRow = 1
''    Else
''         intCounterEndRow = 4
''    End If
''
''    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
''    For intCounter2 = 1 To 2
''      If modServiceModule.IsNameExists(wbBook, strNameColumn & CStr(intCounter) & "_" & CStr(intCounter2)) = True Then
''        wbBook.Names(strNameColumn & CStr(intCounter) & "_" & CStr(intCounter2)).RefersToRange.EntireColumn.Hidden = True
''      End If
''    Next intCounter2
''
''    ' |fffd||fffd||fffd||fffd||fffd||fffd|
''    If intCounter <> 6 Then
''    For intCounter2 = 1 To intCounterEndRow
''      If (intCounter2 = 2 And intCounter = 1) Or _
''          intCounter = 4 Then
''        If modServiceModule.IsNameExists(wbBook, strNameRow & CStr(intCounter) & "_" & CStr(intCounter2)) = True Then
''          For Each rngCell In wbBook.Names(strNameRow & CStr(intCounter) & "_" & CStr(intCounter2)).RefersToRange.Columns(9).cells
''            If InStr(1, rngCell.value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") = 1 Or _
''               InStr(1, rngCell.Offset(0, -2).cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") = 1 Or _
''               InStr(1, rngCell.Offset(0, -3).cells(1, 1).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") = 1 Then
''              rngCell.EntireRow.Hidden = True
''            End If
''          Next rngCell
''        End If
''      Else
''        If modServiceModule.IsNameExists(wbBook, strNameRow & CStr(intCounter) & "_" & CStr(intCounter2)) = True Then
''          wbBook.Names(strNameRow & CStr(intCounter) & "_" & CStr(intCounter2)).RefersToRange.EntireRow.Hidden = True
''        End If
''      End If
''    Next intCounter2
''  End If
''
''  Next intCounter
''
''CleanUp:
''  Application.OnTime Now + TimeValue("00:00:01"), "modServiceModule.WorkbookAfterPrint"
''
End Sub


Sub GettingAListOfNamesInAWorkbook()
    Dim n As name, VisibleNames%, HiddenNames%, WB As Workbook, i As Long
    Dim MSG
    Set WB = ThisWorkbook
    For Each n In WB.Names
        VisibleNames = VisibleNames - n.Visible
        HiddenNames = HiddenNames - Not n.Visible
    Next n

    If VisibleNames + HiddenNames = 0 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", vbInformation
    Else
        MSG = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|: " & VisibleNames + HiddenNames & vbNewLine & _
              "|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & VisibleNames & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & HiddenNames & vbNewLine & _
              vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|?"
        If MsgBox(MSG, vbInformation + vbYesNo, "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|") = vbYes Then
            Dim sh As Worksheet: Set sh = Workbooks.Add(xlWBATWorksheet).Worksheets(1)
            sh.cells(1, 1).Resize(, 4).value = _
            Array("|fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)")
            sh.cells(1, 1).Resize(, 4).Interior.ColorIndex = 15
            For i = 1 To WB.Names.Count
                Set n = WB.Names(i)
                sh.cells(i + 1, 1).Resize(, 4).value = _
                Array(i, n.name, IIf(n.Visible, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"), "'" & n.RefersTo)
            Next i
            sh.UsedRange.EntireColumn.AutoFit
        End If
    End If
End Sub
Attribute VB_Name = "modTitleSheetHeaders"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Function fil_inn(pr As String)

If pr = "|fffd||fffd||fffd|" Then
    fil_inn = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
ElseIf pr = "|fffd||fffd|" Then
    fil_inn = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Else
    fil_inn = "|fffd||fffd||fffd| ???"
End If

End Function

Function fil_kpp(pr As String)

If pr = "|fffd||fffd||fffd|" Then
    fil_kpp = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
ElseIf pr = "|fffd||fffd|" Then
    fil_kpp = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Else
    fil_kpp = "|fffd||fffd||fffd| ???"
End If

End Function

Function fil_mo(pr As String)

If pr = "|fffd||fffd|" Then
    fil_mo = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
ElseIf pr = "|fffd||fffd||fffd|" Then
    fil_mo = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Else
    fil_mo = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ???"
End If

End Function

Function fil_org(pr As String)

If pr = "|fffd||fffd|" Then
    fil_org = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
ElseIf pr = "|fffd||fffd||fffd|" Then
    fil_org = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Else
    fil_org = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ??? |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End If

End Function

Function fil_mr(pr As String)

If pr = "|fffd||fffd|" Then
    fil_mr = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
ElseIf pr = "|fffd||fffd||fffd|" Then
    fil_mr = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Else
    fil_mr = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ???"
End If

End Function

Attribute VB_Name = "modUpdTemplLogger"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub Logger_Init(ByVal wbBook As Workbook)
  Log_Clear wbBook
End Sub

Public Sub Add_String(ByVal strMessage As String, _
                      ByVal wbBook As Workbook, _
                      ByVal strExtendedStatus As String)
  If strExtendedStatus = modUpd_Templ_Defines.STR_FORM_STATUS_ERROR Then
    strExtendedStatus = modUpd_Templ_Defines.STR_SHEET_LOG_ERROR
  ElseIf strExtendedStatus = modUpd_Templ_Defines.STR_FORM_STATUS_WARNING Then
    strExtendedStatus = modUpd_Templ_Defines.STR_SHEET_LOG_WARNING
  ElseIf strExtendedStatus = modUpd_Templ_Defines.STR_FORM_STATUS_INFO Then
    strExtendedStatus = modUpd_Templ_Defines.STR_SHEET_LOG_INFO
  End If
  Add_Log_Message strMessage, strExtendedStatus, wbBook
End Sub

Private Sub Log_Clear(ByVal wbBook As Workbook)

  On Error GoTo ErrHandler
  
  Dim wsSheet As Worksheet
  Dim rngRange As Range
  Dim blnScreenUpdatingPreference As Boolean
  blnScreenUpdatingPreference = wbBook.Application.ScreenUpdating
  
  If modServiceModule.SheetExists(modUpd_Templ_Defines.STR_LOGGING_SHEET_NAME, wbBook) = True Then
    Set wsSheet = wbBook.Worksheets(modUpd_Templ_Defines.STR_LOGGING_SHEET_NAME)
    If wsSheet.UsedRange.Rows.Count > 1 Then
      wbBook.Application.ScreenUpdating = False
      modServiceModule.UNPROTECT_SHEET wsSheet
      Set rngRange = wsSheet.Range(wsSheet.cells(3, 1), _
                                   wsSheet.cells(wsSheet.UsedRange.Rows.Count + 1, _
                                                 wsSheet.UsedRange.Columns.Count))
      rngRange.EntireRow.Delete
      modServiceModule.PROTECT_SHEET wsSheet, True, , True
    End If
  End If

  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
  wbBook.Application.ScreenUpdating = blnScreenUpdatingPreference
End Sub

Private Sub Add_Log_Message(ByVal strMessage As String, _
                            ByVal strStatus As String, _
                            ByVal wbBook As Workbook)

  On Error GoTo ErrHandler
  
  Dim wsSheet As Worksheet
  Dim rngRange As Range
  Dim lngLastUsedRow As Long
  Dim blnScreenUpdatingPreference As Boolean
  blnScreenUpdatingPreference = wbBook.Application.ScreenUpdating
  
  If modServiceModule.SheetExists(modUpd_Templ_Defines.STR_LOGGING_SHEET_NAME, wbBook) = True Then
    Set wsSheet = wbBook.Worksheets(modUpd_Templ_Defines.STR_LOGGING_SHEET_NAME)
    wbBook.Application.ScreenUpdating = False
    modServiceModule.UNPROTECT_SHEET wsSheet
    lngLastUsedRow = wsSheet.UsedRange.Rows.Count
    wsSheet.cells(lngLastUsedRow + 2, 2).value = Now()
    wsSheet.cells(lngLastUsedRow + 2, 3).value = strMessage
    wsSheet.cells(lngLastUsedRow + 2, 4).value = strStatus
    modServiceModule.PROTECT_SHEET wsSheet, True, , True
    GoTo CleanUp
  End If

  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
  wbBook.Application.ScreenUpdating = blnScreenUpdatingPreference
End Sub

Public Sub cmdClearLog_Click()
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| STR_LOGGING_SHEET_NAME
  modUpdTemplLogger.Logger_Init ThisWorkbook
End Sub
Attribute VB_Name = "modUpdTemplMain"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Private gstrNewVersion As String
Private gstrTemplateCode As String
Private gstrResultUpdate As String
Private gstrPatchFileName As String

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
Public Sub Check_Update_Execution(ByVal wbBook As Workbook)
  Check_Updates wbBook, False
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub cmdCheckForUpdates_Click_Handler()
  Check_Updates ThisWorkbook, True
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Check_Updates(ByVal wbBook As Workbook, _
                         Optional blnShowMessage As Boolean = True)
  
  On Error GoTo ErrHandler
  
  Dim strNewVersion As String
  Dim strTemplateCode As String

  Dim tviResultSet As TVersionInfo
  Dim vbResult As VbMsgBoxResult
  Dim strCurrentVersion As String
  
  If wbBook Is Nothing Then
    GoTo CleanUp
  End If
  
  strTemplateCode = modServiceModule.varGetDocumentProperty(ThisWorkbook, "Version")
  gstrTemplateCode = strTemplateCode
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
  lbInfoVersion_Clear
  
  If Len(strTemplateCode) = 0 Then
  
    lbInfo_AddInfo "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", STR_FORM_STATUS_WARNING
    GoTo CleanUp
    
  Else
  
    lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", STR_FORM_STATUS_INFO
    Application.Wait (Now + TimeValue("0:00:1"))
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    tviResultSet = modUpd_Templ_Caller.Query_Last_Version_Info(strTemplateCode, _
                                                               blnShowMessage)
    
    strNewVersion = tviResultSet.strVersion
    gstrNewVersion = strNewVersion
    
    If Len(strNewVersion) = 0 Then
    
      lbInfo_AddInfo "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| " & _
                     strTemplateCode & "!", STR_FORM_STATUS_INFO
      GoTo CleanUp
      
    Else ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
''      strCurrentVersion = CStr(frmUpdate.txtCurrentVersion.Text)
      strCurrentVersion = CStr(modServiceModule.varGetDocumentProperty(ThisWorkbook, "CurrentVersion"))
      
      If Len(strCurrentVersion) = 0 Then
        lbInfo_AddInfo "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", STR_FORM_STATUS_ERROR
        GoTo CleanUp
      End If
    
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If blnIs_New_Version(strCurrentVersion, strNewVersion) = False Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & strCurrentVersion & _
                       " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", STR_FORM_STATUS_INFO
        GoTo CleanUp
      End If
      
      lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & tviResultSet.strVersion, STR_FORM_STATUS_INFO
      lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & tviResultSet.strDescription, STR_FORM_STATUS_INFO
      lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CStr(tviResultSet.lngFileSize) & " |fffd||fffd||fffd||fffd|", STR_FORM_STATUS_INFO
      
      ' |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
      frmUpdate.chkUpdateIsAvailable.value = True
      
      modUpd_Templ_Defines.LNG_UPDATE_MODULE_SIZE = tviResultSet.lngFileSize
      modUpd_Templ_Defines.STR_NEW_VERSION_URL = tviResultSet.strNewVersionURL
      
      If modUpd_Templ_Defines.LNG_UPDATE_MODULE_SIZE > 0 Then
      
        modUpd_Templ_Defines.STR_UPDATE_TO_VERSION = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & tviResultSet.strVersion
        
        modUpd_Templ_Defines.STR_UPDATE_DESCRIPTION = CStr(tviResultSet.strDescription)
        
        modUpd_Templ_Defines.STR_UPDATE_MODULE_ATTRIBUTES = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & CStr(tviResultSet.lngFileSize) & " |fffd||fffd||fffd||fffd|"
      
      Else
      
        modUpd_Templ_Defines.STR_UPDATE_TO_VERSION = vbNullString
        
        modUpd_Templ_Defines.STR_UPDATE_DESCRIPTION = vbNullString
        
        modUpd_Templ_Defines.STR_UPDATE_MODULE_ATTRIBUTES = vbNullString
      
      End If
      
      frmCheckUpdates.Show vbModal

      If modUpd_Templ_Defines.BLN_INSTALL_UPDATES = True Then
      
        lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", STR_FORM_STATUS_INFO
        
        Init_Update ThisWorkbook, strTemplateCode, strNewVersion
      
      Else
      
        lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", STR_FORM_STATUS_WARNING
        
      End If

    End If
  
  End If

  GoTo Success

Success:
  GoTo CleanUp
ErrHandler:
  lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", STR_FORM_STATUS_ERROR
  GoTo CleanUp
CleanUp:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Public Sub cmdPerformUpdate_Click_Handler()
  
  lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", STR_FORM_STATUS_INFO
  
  Init_Update ThisWorkbook, gstrTemplateCode, gstrNewVersion
  
End Sub

Public Sub UserForm_Initialize_Handler()
  
  frmUpdate.txtCurrentVersion.Text = modServiceModule.varGetDocumentProperty(ActiveWorkbook, "CurrentVersion")
  lbInfoVersion_Clear
  lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| """ & _
                 frmUpdate.cmdCheckForUpdates.caption & _
                 """, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                 STR_FORM_STATUS_INFO, False
  ' |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  frmUpdate.chkUpdateIsAvailable.value = False
  
End Sub

Private Sub Init_Update(ByRef wbBook As Workbook, _
                        ByVal strTemplateCode As String, _
                        ByVal strNewVersion As String)
  
  On Error GoTo ErrHandler
  
  Dim strBackupFileName As String
  Dim strCurrentWBPath As String
  Dim strCurrentWBName As String
  
  Dim wbBackupWorkbook As Workbook
  Dim wbUpdatingWorkbook As Workbook
  
  Dim strWorkbookName As String
  Dim strFileExtension As String
  Dim lngFileFormatNum As Long
  
  If wbBook Is Nothing Or _
     Len(strTemplateCode) = 0 Or _
     Len(strNewVersion) = 0 Then
    GoTo CleanUp
  End If
  
  Set wbBackupWorkbook = wbBook
  
  ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  strBackupFileName = Application.GetSaveAsFilename(wbBackupWorkbook.FullName, , , _
                                                    "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")

  If CStr(strBackupFileName) = "False" Then
    lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", STR_FORM_STATUS_WARNING
  Else
    
    strCurrentWBPath = wbBackupWorkbook.Path
    strCurrentWBName = wbBackupWorkbook.name
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Define_File_Name_Extension_Format wbBackupWorkbook, strWorkbookName, _
                                      strFileExtension, lngFileFormatNum
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Mid(strBackupFileName, _
           Len(strBackupFileName) - Len(strFileExtension) + 1, _
           Len(strFileExtension)) <> strFileExtension Then
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If InStr(Len(strBackupFileName) - 1, strBackupFileName, ".") > 0 Then ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| "."
        strBackupFileName = strBackupFileName & "BKP." & Mid(strFileExtension, 2, Len(strFileExtension) - 1)
      Else
        strBackupFileName = strBackupFileName & ".BKP." & strFileExtension
      End If
    Else
      strBackupFileName = Mid(strBackupFileName, 1, _
                              Len(strBackupFileName) - Len(strFileExtension)) & ".BKP." & strFileExtension
    End If
    
    If val(Application.Version) < 12 Then
      ' You use Excel 97-2003
    Else
      ' You use Excel 2007-2010
      wbBackupWorkbook.CheckCompatibility = False
    End If
    
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    
    lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & strBackupFileName, STR_FORM_STATUS_INFO
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    wbBackupWorkbook.SaveAs filename:=strBackupFileName, _
                            FileFormat:=wbBackupWorkbook.FileFormat
    
    lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & strBackupFileName, STR_FORM_STATUS_INFO
    
    lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", STR_FORM_STATUS_INFO
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set wbUpdatingWorkbook = wbBackupWorkbook
    
    wbUpdatingWorkbook.SaveAs filename:=strCurrentWBPath & "\" & strCurrentWBName, _
                              FileFormat:=wbUpdatingWorkbook.FileFormat
    
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    
    wbUpdatingWorkbook.Activate
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Download_Update wbUpdatingWorkbook, strTemplateCode, strNewVersion

  End If
  
  GoTo Success

Success:
  GoTo CleanUp
ErrHandler:
  lbInfo_AddInfo "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", STR_FORM_STATUS_ERROR
  GoTo CleanUp
CleanUp:
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Download_Update(ByRef wbBook As Workbook, _
                           ByVal strTemplateCode As String, _
                           ByVal strNewVersion As String)
                               
  On Error GoTo ErrHandler

  Dim strResult As String
  
  If Not wbBook Is Nothing And _
     Len(strTemplateCode) > 0 And _
     Len(strNewVersion) > 0 Then
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    strResult = strStart_Update(wbBook, strTemplateCode, strNewVersion)
  
    If InStr(1, strResult, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: ") > 0 Then
      
      GoTo Success
   
    End If
    
  Else
    
    Application.ScreenUpdating = True
    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical, modGlobals.STR_MSGBOX_WARNING_TITLE
    lbInfo_AddInfo "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", STR_FORM_STATUS_WARNING
    
  End If
  
  GoTo CleanUp
  
Success:
      
  lbInfo_AddInfo strResult, STR_FORM_STATUS_INFO
  lbInfo_AddInfo strResult, STR_FORM_STATUS_INFO
  
  GoTo CleanUp
ErrHandler:
  GoTo CleanUp
CleanUp:
  Application.DisplayAlerts = True
  Application.EnableEvents = True
  Application.Calculation = xlCalculationAutomatic
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Function strStart_Update(ByRef wbBook As Workbook, _
                                 ByVal strTemplateCode As String, _
                                 ByVal strNewVersion As String) As String

  On Error GoTo ErrHandler

  Dim strTempFileName As String
  Dim strResultFileName As String
  Dim wsSheet As Worksheet
  
  Dim wbBookWithUpdates As Workbook
  
  strStart_Update = vbNullString
  Randomize
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| xls...
  strTempFileName = wbBook.Path & "\UPDATE." & _
                    strTemplateCode & ".TO." & _
                    strNewVersion & "." & _
                    CStr(CInt((90 * Rnd) + 1)) & ".xls"
  gstrPatchFileName = strTempFileName
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  strResultFileName = modUpd_Templ_Caller.Query_Update(strTempFileName, strTemplateCode, strNewVersion)
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...
  If Len(Dir(strResultFileName)) = 0 Then
    strStart_Update = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!"
    GoTo ErrHandler
  End If
  
  Application.ScreenUpdating = False
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  Set wbBookWithUpdates = Application.Workbooks.Open(filename:=strTempFileName, _
                                                     UpdateLinks:=False, _
                                                     ReadOnly:=False)
                                             
  If wbBookWithUpdates Is Nothing Then
    strStart_Update = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
    GoTo CleanUp
  End If
  
  wbBookWithUpdates.Activate
  If modScrolling.blnIs_UserForm_Loaded(frmUpdate.name) = True Then
    Unload frmUpdate
  End If
  
  If modServiceModule.SheetExists("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", wbBookWithUpdates) = True Then
    wbBookWithUpdates.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").AutoUpdate wbBook
  ElseIf modServiceModule.SheetExists("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", wbBookWithUpdates) = True Then
    wbBookWithUpdates.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").AutoUpdate wbBook
  Else
    strStart_Update = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
    GoTo CleanUp
  End If
  
  strStart_Update = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & strTempFileName
  
  GoTo Success
  
Success:
  GoTo CleanUp
ErrHandler:
  Application.ScreenUpdating = True
  MsgBox strStart_Update, vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  lbInfo_AddInfo strStart_Update, STR_FORM_STATUS_ERROR
  GoTo CleanUp
CleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub AutoUpdateReturn(ByVal strResult As String)

  gstrResultUpdate = strResult
  Application.OnTime Now + TimeValue("0:00:1"), "modUpdTemplMain.ApplyUpdate"
  
End Sub

Sub ApplyUpdate()

  On Error Resume Next
  
  If modUpd_Templ_Defines.BLN_SAVE_UPDATE_MODULE = False Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If Dir(gstrPatchFileName) <> "" Then
      Kill gstrPatchFileName
    End If
  End If
  
  If Mid(gstrResultUpdate, 1, 3) = "ERR" Then
    lbInfo_AddInfo Mid(gstrResultUpdate, 4), STR_FORM_STATUS_ERROR
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd|. ""|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"")", vbExclamation
  Else
    lbInfo_AddInfo Mid(gstrResultUpdate, 4), STR_FORM_STATUS_INFO
    MsgBox Mid(gstrResultUpdate, 4), vbInformation
  End If
  
End Sub

Private Sub lbInfoVersion_Clear()
  
  If modScrolling.blnIs_UserForm_Loaded(frmUpdate.name) = True Then
    frmUpdate.lbInfo.Clear
  End If
  
End Sub

Private Sub lbInfo_AddInfo(ByVal strValue As String, _
                           ByVal strStatus As String, _
                           Optional blnAddLogToSheet As Boolean = True)
  
  If modScrolling.blnIs_UserForm_Loaded(frmUpdate.name) = True Then
    If frmUpdate.lbInfo.ListCount > 20 Then
      frmUpdate.lbInfo.RemoveItem (0)
    End If
    frmUpdate.lbInfo.AddItem (strStatus & ": " & strValue)
  End If
  
  If blnAddLogToSheet = True Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| STR_LOGGING_SHEET_NAME
    modUpdTemplLogger.Add_String strValue, ThisWorkbook, strStatus
  End If

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Sub Define_File_Name_Extension_Format(ByRef wbSourceBook As Workbook, _
                                              ByRef strWorkbookName As String, _
                                              ByRef strFileExtension As String, _
                                              ByRef lngFileFormatNum As Long)

  On Error GoTo ErrHandler
  
  Dim strOrigFileName As String
  Dim lngExtPosition As Long
  
  If wbSourceBook Is Nothing Then
    GoTo CleanUp
  End If
  
  strOrigFileName = wbSourceBook.name
  
  lngExtPosition = InStrRev(strOrigFileName, ".")
  strWorkbookName = Mid(strOrigFileName, 1, lngExtPosition - 1) ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  
  ' Determine the Excel version and file extension/format
  With wbSourceBook
    If val(Application.Version) < 12 Then
      ' You use Excel 97-2003
      strFileExtension = ".xls"
      lngFileFormatNum = -4143
    Else
    ' You use Excel 2007-2010
    ' 51 = xlOpenXMLWorkbook (without macro's in 2007-2010, xlsx)
    ' 52 = xlOpenXMLWorkbookMacroEnabled (with or without macro's in 2007-2010, xlsm)
    ' 50 = xlExcel12 (Excel Binary Workbook in 2007-2010 with or without macro's, xlsb)
    ' 56 = xlExcel8 (97-2003 format in Excel 2007-2010, xls)
      Select Case .FileFormat
        Case 51
          strFileExtension = ".xlsx"
          lngFileFormatNum = 51
        Case 52
          If .HasVBProject Then
            strFileExtension = ".xlsm"
            lngFileFormatNum = 52
          Else
            strFileExtension = ".xlsx"
            lngFileFormatNum = 51
          End If
        Case 56
          strFileExtension = ".xls"
          lngFileFormatNum = 56
        Case Else
          strFileExtension = ".xlsb"
          lngFileFormatNum = 50
      End Select
    End If
  End With

  GoTo Success

Success:
  GoTo CleanUp
ErrHandler:
  GoTo CleanUp
CleanUp:
End Sub
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:
'  |fffd||fffd||fffd||fffd| strCurrentVersion < strNewVersion, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE, |fffd||fffd||fffd||fffd||fffd| FALSE
Public Function blnIs_New_Version(ByVal strCurrentVersion As String, _
                                  ByVal strNewVersion As String) As Boolean

  Dim strNumbersCurrent() As String
  Dim strNumbersNew() As String
  
  Dim intICounter As Integer
  
  On Error GoTo ErrHandler

  strNumbersCurrent = Split(strCurrentVersion, ".")
  strNumbersNew = Split(strNewVersion, ".")
  blnIs_New_Version = False
  intICounter = 0
  
  Do While intICounter <= UBound(strNumbersCurrent) And intICounter <= UBound(strNumbersNew)
    If CInt(strNumbersCurrent(intICounter)) < CInt(strNumbersNew(intICounter)) Then
      blnIs_New_Version = True
      Exit Function
    ElseIf CInt(strNumbersCurrent(intICounter)) > CInt(strNumbersNew(intICounter)) Then
      blnIs_New_Version = False
      Exit Function
    End If
    intICounter = intICounter + 1
  Loop
  If UBound(strNumbersCurrent) < UBound(strNumbersNew) Then
    blnIs_New_Version = True
  End If

  GoTo CleanUp

ErrHandler:
  blnIs_New_Version = True

CleanUp:
End Function

Private Sub ClearBrokenNamesInActiveWorkbook(ByVal wbBookToFix As Workbook)

  Dim nam As name
  
  For Each nam In wbBookToFix.Names
    If (InStr(1, nam.value, "\", vbTextCompare) > 0) _
       Or (InStr(1, nam.value, "REF", vbTextCompare) > 0) _
       Or (InStr(1, nam.value, "#", vbTextCompare) > 0) _
       Or (InStr(1, nam.value, "xls", vbTextCompare) > 0) _
       Or (InStr(1, nam.value, "/", vbTextCompare) > 0) _
       Or (InStr(1, nam.name, "!", vbTextCompare) > 0) _
       Or (InStr(1, nam.name, "?", vbTextCompare) > 0) Then
      nam.Delete
    End If
  Next nam

End Sub

Attribute VB_Name = "modUpd_Templ_Caller"
Option Explicit
Option Base 1

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function Query_Last_Version_Info(ByVal strTemplateCode As String, _
                                        Optional blnShowMessage As Boolean = True) As TVersionInfo
              
  On Error GoTo ErrHandler
  
  Dim strXMLTagNames(4) As String
  
  If Len(strTemplateCode) = 0 Then
    GoTo CleanUp
  End If
  
  strXMLTagNames(1) = "VERSION"
  strXMLTagNames(2) = "DESCRIPTION_UPDATE"
  strXMLTagNames(3) = "FILE_UPDATE_SIZE"
  strXMLTagNames(4) = "NEW_VERSION_URL"
  
  Query_Last_Version_Info = modUpd_Templ_HTTP_Request.tviQuery_Update_Info(strXMLTagNames, strTemplateCode, blnShowMessage)
  
  GoTo CleanUp
  
ErrHandler:
  GoTo CleanUp
CleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function Query_Update(ByVal strTempFileName As String, _
                             ByVal strTemplateCode As String, _
                             ByVal strVersion As String) As String
              
  On Error GoTo ErrHandler
  
  If Len(strTemplateCode) = 0 Or _
     Len(strVersion) = 0 Then
    GoTo CleanUp
  End If
  
  Query_Update = modUpd_Templ_HTTP_Request.strQuery_Update(strTempFileName, strTemplateCode, strVersion)
  
  GoTo CleanUp
  
ErrHandler:
  GoTo CleanUp
CleanUp:
End Function

Attribute VB_Name = "modUpd_Templ_Defines"
Option Explicit

' |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Type TVersionInfo
  strVersion As String
  strDescription As String
  lngFileSize As Long
  strNewVersionURL As String
End Type

Public Const STR_UI_UPDATE_SHEET_NAME As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const STR_LOGGING_SHEET_NAME As String = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

Public Const MS_EXCEL_2003_EXTENSIONS_LIST As String = "*.xls"
Public Const MS_EXCEL_2007_EXTENSIONS_LIST As String = "*.xls; *.xlsm; *.xlsx"

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|..." (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public Const gblnFeatureDataDownloadAvailable As Boolean = False
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public Const gblnFeatureUpdateTemplateAvailable As Boolean = True

Public Const STR_FORM_STATUS_ERROR As String = "ERR"
Public Const STR_FORM_STATUS_WARNING As String = "WARNING"
Public Const STR_FORM_STATUS_INFO As String = "INFO"

Public Const STR_SHEET_LOG_ERROR As String = "|fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const STR_SHEET_LOG_WARNING As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const STR_SHEET_LOG_INFO As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

Public BLN_INSTALL_UPDATES As Boolean
Public BLN_SAVE_UPDATE_MODULE As Boolean
Public LNG_UPDATE_MODULE_SIZE As Long

Public STR_UPDATE_DESCRIPTION As String
Public STR_UPDATE_TO_VERSION As String
Public STR_UPDATE_MODULE_ATTRIBUTES As String
Public STR_NEW_VERSION_URL As String
Attribute VB_Name = "modUpd_Templ_HTTP_Request"
Option Explicit
Option Base 1

' === These constants and corresponding values indicate HTTP status codes returned by servers on the Internet. ===
Public Const HTTP_STATUS_CONTINUE As Long = 100  ' The request can be continued.
Public Const HTTP_STATUS_SWITCH_PROTOCOLS As Long = 101  ' The server has switched protocols in an upgrade header.
Public Const HTTP_STATUS_OK As Long = 200                 ' The request completed successfully.
Public Const HTTP_STATUS_CREATED As Long = 201  ' The request has been fulfilled and resulted in the creation of a new resource.
Public Const HTTP_STATUS_ACCEPTED As Long = 202  ' The request has been accepted for processing, but the processing has not been completed.
Public Const HTTP_STATUS_PARTIAL As Long = 203  ' The returned meta information in the entity-header is not the definitive set available from the originating server.
Public Const HTTP_STATUS_NO_CONTENT As Long = 204  ' The server has fulfilled the request, but there is no new information to send back.
Public Const HTTP_STATUS_RESET_CONTENT As Long = 205  ' The request has been completed, and the client program should reset the document view that caused the request to be sent to allow the user to easily initiate another input action.
Public Const HTTP_STATUS_PARTIAL_CONTENT As Long = 206  ' The server has fulfilled the partial GET request for the resource.
Public Const HTTP_STATUS_WEBDAV_MULTI_STATUS As Long = 207  ' During a World Wide Web Distributed Authoring and Versioning (WebDAV) operation, this indicates multiple status codes for a single response. The response body contains Extensible Markup Language (XML) that describes the status codes. For more information, see HTTP Extensions for Distributed Authoring.
Public Const HTTP_STATUS_AMBIGUOUS As Long = 300  ' The requested resource is available at one or more locations.
Public Const HTTP_STATUS_MOVED As Long = 301                 ' The requested resource has been assigned to a new permanent Uniform Resource Identifier (URI), and any future references to this resource should be done using one of the returned URIs.
Public Const HTTP_STATUS_REDIRECT As Long = 302  ' The requested resource resides temporarily under a different URI.
Public Const HTTP_STATUS_REDIRECT_METHOD As Long = 303  ' The response to the request can be found under a different URI and should be retrieved using a GET HTTP verb on that resource.
Public Const HTTP_STATUS_NOT_MODIFIED As Long = 304  ' The requested resource has not been modified.
Public Const HTTP_STATUS_USE_PROXY As Long = 305  ' The requested resource must be accessed through the proxy given by the location field.
Public Const HTTP_STATUS_REDIRECT_KEEP_VERB As Long = 307  ' The redirected request keeps the same HTTP verb. HTTP/1.1 behavior.
Public Const HTTP_STATUS_BAD_REQUEST As Long = 400  ' The request could not be processed by the server due to invalid syntax.
Public Const HTTP_STATUS_DENIED As Long = 401  ' The requested resource requires user authentication.
Public Const HTTP_STATUS_PAYMENT_REQ As Long = 402  ' Not implemented in the HTTP protocol.
Public Const HTTP_STATUS_FORBIDDEN As Long = 403  ' The server understood the request, but cannot fulfill it.
Public Const HTTP_STATUS_NOT_FOUND As Long = 404  ' The server has not found anything that matches the requested URI.
Public Const HTTP_STATUS_BAD_METHOD As Long = 405  ' The HTTP verb used is not allowed.
Public Const HTTP_STATUS_NONE_ACCEPTABLE As Long = 406  ' No responses acceptable to the client were found.
Public Const HTTP_STATUS_PROXY_AUTH_REQ As Long = 407  ' Proxy authentication required.
Public Const HTTP_STATUS_REQUEST_TIMEOUT As Long = 408  ' The server timed out waiting for the request.
Public Const HTTP_STATUS_CONFLICT As Long = 409  ' The request could not be completed due to a conflict with the current state of the resource. The user should resubmit with more information.
Public Const HTTP_STATUS_GONE As Long = 410                 ' The requested resource is no longer available at the server, and no forwarding address is known.
Public Const HTTP_STATUS_LENGTH_REQUIRED As Long = 411  ' The server cannot accept the request without a defined content length.
Public Const HTTP_STATUS_PRECOND_FAILED As Long = 412  ' The precondition given in one or more of the request header fields evaluated to false when it was tested on the server.
Public Const HTTP_STATUS_REQUEST_TOO_LARGE As Long = 413  ' The server cannot process the request because the request entity is larger than the server is able to process.
Public Const HTTP_STATUS_URI_TOO_LONG As Long = 414  ' The server cannot service the request because the request URI is longer than the server can interpret.
Public Const HTTP_STATUS_UNSUPPORTED_MEDIA As Long = 415  ' The server cannot service the request because the entity of the request is in a format not supported by the requested resource for the requested method.
Public Const HTTP_STATUS_RETRY_WITH As Long = 449  ' The request should be retried after doing the appropriate action.
Public Const HTTP_STATUS_SERVER_ERROR As Long = 500  ' The server encountered an unexpected condition that prevented it from fulfilling the request.
Public Const HTTP_STATUS_NOT_SUPPORTED As Long = 501  ' The server does not support the functionality required to fulfill the request.
Public Const HTTP_STATUS_BAD_GATEWAY As Long = 502  ' The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.
Public Const HTTP_STATUS_SERVICE_UNAVAIL As Long = 503  ' The service is temporarily overloaded.
Public Const HTTP_STATUS_GATEWAY_TIMEOUT As Long = 504  ' The request was timed out waiting for a gateway.
Public Const HTTP_STATUS_VERSION_NOT_SUP As Long = 505  ' The server does not support the HTTP protocol version that was used in the request message.

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function tviQuery_Update_Info(ByRef strXMLTagNames() As String, _
                                     ByVal strTemplateCode As String, _
                                     Optional blnShowMessage As Boolean = True) As TVersionInfo

  On Error GoTo ErrHandler

  Dim strURL As String
  Dim lngICounter As Long
  Dim lngNumberOfQueryFields As Long

  Dim lngRequestCounter As Long
  Dim strBaseURL(4) As String

  Dim blnSuccessfulRequest As Boolean

  If Len(strTemplateCode) > 0 Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL-|fffd||fffd||fffd||fffd||fffd||fffd|
    strURL = STR_HTTP_REQUEST_PROC_GET_UPDATE_INFO_NAME & _
             STR_HTTP_REQUEST_PROC_GET_UPDATE_INFO_PARAM_1 & strTemplateCode
  Else
    GoTo ErrHandler
  End If

  Dim tviResult As TVersionInfo
  tviResult.lngFileSize = 0
  tviResult.strDescription = vbNullString
  tviResult.strVersion = vbNullString
  tviResult.strNewVersionURL = vbNullString

  For lngICounter = 1 To UBound(strXMLTagNames)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Len(strXMLTagNames(lngICounter)) = 0 Then
      GoTo ErrHandler
    End If
  Next lngICounter

  lngNumberOfQueryFields = UBound(strXMLTagNames)

  ' Check Internet Connection Status
  If modInternetConnectionState.blnIsOnLine = False Then
    GoTo Offline
  End If

  Dim lngRequestStatus As Long  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

  ' HTTP Request
  Dim objXMLHTTP As MSXML2.XMLHTTP
  Dim objXMLDOMDocument As MSXML2.DOMDocument

  Set objXMLHTTP = CreateObject("MSXML2.XMLHTTP.3.0")

  strBaseURL(1) = STR_HTTP_REQUEST_BASE_URL_1
  strBaseURL(2) = STR_HTTP_REQUEST_BASE_URL_2
  strBaseURL(3) = STR_HTTP_REQUEST_BASE_URL_3
  strBaseURL(4) = STR_HTTP_REQUEST_BASE_URL_4

  blnSuccessfulRequest = False

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| DNS...
  For lngRequestCounter = LBound(strBaseURL) To UBound(strBaseURL)

    On Error GoTo TryNextDNS

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP-|fffd||fffd||fffd||fffd||fffd||fffd|...
    lngRequestStatus = lngSend_Request(objXMLHTTP, objXMLDOMDocument, strBaseURL(lngRequestCounter) & strURL)

    If Not lngRequestStatus = HTTP_STATUS_OK Then
      GoTo TryNextDNS
    End If

    If objXMLDOMDocument Is Nothing Then
      GoTo TryNextDNS
    End If

    If objXMLDOMDocument.DocumentElement Is Nothing Then
      GoTo TryNextDNS
    End If

    If objXMLDOMDocument.DocumentElement.ChildNodes Is Nothing Then
      GoTo TryNextDNS
    End If

    If objXMLDOMDocument.DocumentElement.ChildNodes.Length >= 0 Then
      blnSuccessfulRequest = True
      Exit For
    End If

TryNextDNS:
  Next lngRequestCounter


  If blnSuccessfulRequest = False Then
    GoTo ErrHandler
  End If

  ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim strMaxVersion As String
  Dim strDescription As String
  Dim strFileSize As String
  Dim strNewVersionURL As String
  
  If objXMLDOMDocument.DocumentElement.ChildNodes.Length > 0 Then

    For lngICounter = 0 To objXMLDOMDocument.DocumentElement.ChildNodes.Length - 1

      Dim rec As MSXML2.IXMLDOMElement
      Set rec = objXMLDOMDocument.DocumentElement.ChildNodes.Item(lngICounter)

      If Len(strMaxVersion) = 0 Then

        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        strMaxVersion = rec.getElementsByTagName(strXMLTagNames(1)).Item(0).Text          ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd|"
        strDescription = rec.getElementsByTagName(strXMLTagNames(2)).Item(0).Text         ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        strFileSize = rec.getElementsByTagName(strXMLTagNames(3)).Item(0).Text            ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        strNewVersionURL = rec.getElementsByTagName(strXMLTagNames(4)).Item(0).Text       ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"

      Else

        ' 1.2.5 : 1 - |fffd||fffd||fffd| MasterVersion, 2 - |fffd||fffd||fffd| SubVersion, 5 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        
        If modUpdTemplMain.blnIs_New_Version(strMaxVersion, rec.getElementsByTagName(strXMLTagNames(1)).Item(0).Text) = True Then
          ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          strMaxVersion = rec.getElementsByTagName(strXMLTagNames(1)).Item(0).Text        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          strDescription = rec.getElementsByTagName(strXMLTagNames(2)).Item(0).Text       ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
          strFileSize = rec.getElementsByTagName(strXMLTagNames(3)).Item(0).Text          ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
          strNewVersionURL = rec.getElementsByTagName(strXMLTagNames(4)).Item(0).Text     ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If

      End If

    Next lngICounter

  End If

  If Len(strFileSize) = 0 Then
    tviResult.lngFileSize = 0
  Else
    tviResult.lngFileSize = CLng(strFileSize)
  End If
  tviResult.strDescription = strDescription
  tviResult.strVersion = strMaxVersion
  tviResult.strNewVersionURL = strNewVersionURL

  GoTo Success

Success:
  GoTo CleanUp
ErrHandler:
  If blnShowMessage = True Then
    MsgBox STR_UPDATE_FAILED, vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  End If
  GoTo CleanUp
Offline:
  If blnShowMessage = True Then
    MsgBox STR_INET_CONNECTION_IS_OFFLINE, vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  End If
  GoTo CleanUp
CleanUp:
  tviQuery_Update_Info = tviResult
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function strQuery_Update(ByVal strFullFileName As String, _
                                ByVal strTemplateCode As String, _
                                ByVal strVersion As String) As String

  On Error GoTo ErrHandler

  Dim strURL As String

  Dim lngRequestCounter As Long
  Dim strBaseURL(4) As String

  If Len(strFullFileName) > 0 And _
     Len(strTemplateCode) > 0 And _
     Len(strVersion) > 0 Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL-|fffd||fffd||fffd||fffd||fffd||fffd|
    strURL = STR_HTTP_REQUEST_PROC_GET_UPDATE_NAME & _
             STR_HTTP_REQUEST_PROC_GET_UPDATE_PARAM_1 & strTemplateCode & "&" & _
             STR_HTTP_REQUEST_PROC_GET_UPDATE_PARAM_2 & strVersion
  Else
    GoTo ErrHandler
  End If

  Dim lngRequestStatus As Long  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

  Dim lngFileNum As Long
  Dim bytFileData() As Byte
  Dim strMyFile As String
  Dim objWHTTP As Object

  On Error Resume Next

  Set objWHTTP = CreateObject("WinHTTP.WinHTTPrequest.5")
  If Err.Number <> 0 Then
    Set objWHTTP = CreateObject("WinHTTP.WinHTTPrequest.5.1")
  End If

  On Error GoTo 0

  strBaseURL(1) = STR_HTTP_REQUEST_BASE_URL_1
  strBaseURL(2) = STR_HTTP_REQUEST_BASE_URL_2
  strBaseURL(3) = STR_HTTP_REQUEST_BASE_URL_3
  strBaseURL(4) = STR_HTTP_REQUEST_BASE_URL_4

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| DNS...
  For lngRequestCounter = LBound(strBaseURL) To UBound(strBaseURL)

    On Error GoTo TryNextDNS

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP-|fffd||fffd||fffd||fffd||fffd||fffd|...
    lngRequestStatus = lngSend_File_Request(objWHTTP, strBaseURL(lngRequestCounter) & strURL)

    If Not lngRequestStatus = HTTP_STATUS_OK Then
      GoTo TryNextDNS
    End If

    bytFileData = objWHTTP.responseBody

    If UBound(bytFileData) > 100 Then  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|...

      Set objWHTTP = Nothing

      lngFileNum = FreeFile
      Open strFullFileName For Binary Access Write As lngFileNum
      Put lngFileNum, 1, bytFileData
      Close lngFileNum

      GoTo Success

    End If

TryNextDNS:
  Next lngRequestCounter

  Select Case lngRequestStatus
  Case HTTP_STATUS_OK
    ' Successful, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd|...
    strQuery_Update = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Case HTTP_STATUS_NO_CONTENT
    strQuery_Update = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| [HTTP_STATUS_NO_CONTENT}"
  Case HTTP_STATUS_PROXY_AUTH_REQ
    strQuery_Update = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: [HTTP_STATUS_PROXY_AUTH_REQ]"
  Case HTTP_STATUS_BAD_GATEWAY
    strQuery_Update = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: [HTTP_STATUS_BAD_GATEWAY]"
  Case HTTP_STATUS_NOT_FOUND
    strQuery_Update = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: [HTTP_STATUS_NOT_FOUND}"
  Case HTTP_STATUS_BAD_REQUEST
    strQuery_Update = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: [HTTP_STATUS_BAD_REQUEST]"
  Case HTTP_STATUS_BAD_METHOD
    strQuery_Update = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: [HTTP_STATUS_BAD_METHOD]"
  Case Else
    strQuery_Update = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| [" & lngRequestStatus & "]"
  End Select

  GoTo ErrHandler

Success:
  strQuery_Update = strFullFileName
  GoTo CleanUp
ErrHandler:
  If Len(strQuery_Update) = 0 Then
    strQuery_Update = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| [UNDEFINED]"
  End If
  MsgBox strQuery_Update, vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
  GoTo CleanUp
CleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Delete_Existing_Name_In_Workbook(wbBook As Workbook, _
                                            strNameOfRange As String)
  On Error GoTo ErrHandler
  If wbBook Is Nothing Or _
     Len(strNameOfRange) = 0 Then
    GoTo ErrHandler
  End If
  wbBook.Names(strNameOfRange).Delete
ErrHandler:
End Sub

Public Sub SaveXML(ByVal wbBook As Workbook, _
                   ByVal strXML As String)

  Dim FileNo As Long
  FileNo = FreeFile

  Open wbBook.Path & "\" & "Save.txt" For Output As FileNo

  Print #FileNo, strXML

  Close FileNo

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP-|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
Private Function lngSend_File_Request(ByRef objWHTTP As Object, _
                                      ByVal strURL As String) As Long

  On Error GoTo ErrHandler

  objWHTTP.Open "GET", strURL, False
  objWHTTP.send

  lngSend_File_Request = objWHTTP.status

  GoTo CleanUp

ErrHandler:
  lngSend_File_Request = HTTP_STATUS_BAD_REQUEST
  GoTo CleanUp
CleanUp:
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| HTTP-|fffd||fffd||fffd||fffd||fffd||fffd|
Private Function lngSend_Request(ByRef objXMLHTTP As MSXML2.XMLHTTP, _
                                 ByRef objXMLDOMDocument As MSXML2.DOMDocument, _
                                 ByVal strURL As String) As Long

  On Error GoTo ErrHandler

  objXMLHTTP.Open bstrMethod:="GET", bstrUrl:=strURL, varAsync:=False
  objXMLHTTP.send

  Set objXMLDOMDocument = objXMLHTTP.responseXML

  lngSend_Request = objXMLHTTP.status

  If modGlobals.gblnTestMode = True Then
    Debug.Print objXMLDOMDocument.Text
  End If

  GoTo CleanUp

ErrHandler:
  lngSend_Request = HTTP_STATUS_BAD_REQUEST
  GoTo CleanUp
CleanUp:
End Function

Attribute VB_Name = "modfrmCheckUpdates"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub cmdInstallUpdates_Click_Handler()

  On Error GoTo ErrHandler

  modUpd_Templ_Defines.BLN_INSTALL_UPDATES = True
  modUpd_Templ_Defines.BLN_SAVE_UPDATE_MODULE = frmCheckUpdates.chkSaveAutoUpdateModule.value

  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
  If modScrolling.blnIs_UserForm_Loaded(frmCheckUpdates.name) = True Then
    Unload frmCheckUpdates
  End If
End Sub

Public Sub cmdCancelUpdates_Click_Handler()

  On Error GoTo ErrHandler

  modUpd_Templ_Defines.BLN_INSTALL_UPDATES = False
  modUpd_Templ_Defines.BLN_SAVE_UPDATE_MODULE = False
  
  If modScrolling.blnIs_UserForm_Loaded(frmCheckUpdates.name) = True Then
    Unload frmCheckUpdates
  End If

  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
End Sub

Public Sub txtURL_DblClick_Handler(ByVal Cancel As MSForms.ReturnBoolean)
  Application.ThisWorkbook.FollowHyperlink frmCheckUpdates.txtURL.Text
End Sub

Public Sub UserForm_Initialize_Handler()

  On Error GoTo ErrHandler
  
  If modUpd_Templ_Defines.LNG_UPDATE_MODULE_SIZE > 0 Then

    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    frmCheckUpdates.cmdInstallUpdate.SetFocus
    
    frmCheckUpdates.chkSaveAutoUpdateModule.value = True
    
    frmCheckUpdates.lblUpdateVersionInfo.caption = modUpd_Templ_Defines.STR_UPDATE_TO_VERSION
    frmCheckUpdates.txtUpdateDescription.Text = modUpd_Templ_Defines.STR_UPDATE_DESCRIPTION
    frmCheckUpdates.lblUpdateModuleAttributes.caption = modUpd_Templ_Defines.STR_UPDATE_MODULE_ATTRIBUTES
    
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?
    If Len(modUpd_Templ_Defines.STR_NEW_VERSION_URL) = 0 Then
      frmCheckUpdates.Height = 260
      frmCheckUpdates.chkNeverRequestAvailableUpdates.Top = 6 + frmCheckUpdates.frFrameInteractiveUpdate.Height + 6
      frmCheckUpdates.frFrameDownloadNewVersion.Visible = False
    Else
      frmCheckUpdates.Height = 325
      frmCheckUpdates.txtURL.Text = modUpd_Templ_Defines.STR_NEW_VERSION_URL
    End If
  
  Else
  
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    frmCheckUpdates.txtURL.Text = modUpd_Templ_Defines.STR_NEW_VERSION_URL
    
    frmCheckUpdates.Height = 120
    frmCheckUpdates.frFrameDownloadNewVersion.Top = 6
    frmCheckUpdates.chkNeverRequestAvailableUpdates.Top = 6 + frmCheckUpdates.frFrameDownloadNewVersion.Height + 6
    frmCheckUpdates.frFrameInteractiveUpdate.Visible = False
  
  End If

  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
End Sub

Public Sub UserForm_Terminate_Handler()

  On Error GoTo ErrHandler
  
  If modServiceModule.SheetExists("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", ThisWorkbook) = True Then
    If frmCheckUpdates.chkNeverRequestAvailableUpdates.value = True Then
      Instruction.chkUpdates_Click_Handler "chkNoUpdatesFalse"
    Else
      Instruction.chkUpdates_Click_Handler "chkGetUpdatesFalse"
    End If
  End If

  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
End Sub
Attribute VB_Name = "modfrmDateChoose"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub UserForm_Activate_Handler()
  
  If intDay = 0 Then
    intDay = Day(Now)
    intMonth = Month(Now) - 1
    intYear = Year(Now)
    If intMonth = 0 Then
      intMonth = 12
      intYear = intYear - 1
    End If
  End If
  
  modGlobals.STR_SELECT_DATE = ""
  modfrmDateChoose.MakeCalendar
  
End Sub

Public Sub cbMonth_Change_Handler()
  If blnCalendarChange Then Exit Sub
  intMonth = frmDateChoose.cbMonth.ListIndex + 1
  modfrmDateChoose.MakeCalendar
End Sub

Public Sub txtYear_Change_Handler()
  If blnCalendarChange Then Exit Sub
  intYear = frmDateChoose.txtYear.value
  modfrmDateChoose.MakeCalendar
End Sub

Public Sub lblMonthMinus_Click_Handler()
  If frmDateChoose.cbMonth.ListIndex = 0 Then
    frmDateChoose.cbMonth.ListIndex = 11
    modfrmDateChoose.spinYearChange_SpinDown_Handler
  Else
    frmDateChoose.cbMonth.ListIndex = frmDateChoose.cbMonth.ListIndex - 1
  End If
End Sub

Public Sub lblMonthPlus_Click_Handler()
  If frmDateChoose.cbMonth.ListIndex = 11 Then
    frmDateChoose.cbMonth.ListIndex = 0
    modfrmDateChoose.spinYearChange_SpinUp_Handler
  Else
    frmDateChoose.cbMonth.ListIndex = frmDateChoose.cbMonth.ListIndex + 1
  End If
End Sub

Public Sub spinYearChange_SpinDown_Handler()
  frmDateChoose.txtYear.value = frmDateChoose.txtYear.value - 1
End Sub

Public Sub spinYearChange_SpinUp_Handler()
  frmDateChoose.txtYear.value = frmDateChoose.txtYear.value + 1
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub MakeCalendar()
  Dim i As Integer
  Dim j As Integer
  Dim intWeekDay As Integer
  Dim intCountDaysPrevMonth As Integer
  Dim intCountDaysThisMonth As Integer
  
  blnCalendarChange = True
  frmDateChoose.txtYear.value = intYear
  frmDateChoose.cbMonth.ListIndex = intMonth - 1
  
  intWeekDay = 2 - DatePart("w", DateSerial(intYear, intMonth, 1), vbMonday)
  intCountDaysThisMonth = Day(DateSerial(intYear, intMonth + 1, 0))
  intCountDaysPrevMonth = Day(DateSerial(intYear, intMonth, 0))
  
  For i = 1 To 6    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For j = 1 To 7  ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If intWeekDay < 1 Then
        frmDateChoose.Controls("Label" & i & "_" & j).caption = " " & intCountDaysPrevMonth + intWeekDay
        frmDateChoose.Controls("Label" & i & "_" & j).ForeColor = &H8000000C
      ElseIf intWeekDay > intCountDaysThisMonth Then
        frmDateChoose.Controls("Label" & i & "_" & j).caption = " " & intWeekDay - intCountDaysThisMonth
        frmDateChoose.Controls("Label" & i & "_" & j).ForeColor = &H8000000C
      Else
        frmDateChoose.Controls("Label" & i & "_" & j).caption = " " & intWeekDay
        frmDateChoose.Controls("Label" & i & "_" & j).ForeColor = &H80000012
      End If
      
      If intWeekDay = intDay Then
        frmDateChoose.Controls("Label" & i & "_" & j).BackColor = &H80000004
        frmDateChoose.Controls("Label" & i & "_" & j).SpecialEffect = fmSpecialEffectSunken
        intX = i
        intY = j
      Else
        frmDateChoose.Controls("Label" & i & "_" & j).BackColor = &HFFFFFF
        frmDateChoose.Controls("Label" & i & "_" & j).SpecialEffect = fmSpecialEffectFlat
        frmDateChoose.Controls("Label" & i & "_" & j).BorderStyle = fmBorderStyleSingle
      End If
      
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If intWeekDay = Day(Now) And intYear = Year(Now) And intMonth = Month(Now) Then
        frmDateChoose.Controls("Label" & i & "_" & j).BackColor = &HFFFFFF
        frmDateChoose.Controls("Label" & i & "_" & j).BorderColor = &HC0C000
        frmDateChoose.Controls("Label" & i & "_" & j).BorderStyle = fmBorderStyleSingle
      Else
        frmDateChoose.Controls("Label" & i & "_" & j).BorderColor = &HFFFFFF
      End If
      
      intWeekDay = intWeekDay + 1
    Next j
  Next i
  blnCalendarChange = False

End Sub

Public Sub LabelClick_Handler(lblLabelClick As Control)
  
  intDay = lblLabelClick.caption
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
  If lblLabelClick.ForeColor = &H8000000C Then
    Dim dtCurrDate As Variant
    If intDay > 20 Then
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      dtCurrDate = DateSerial(intYear, intMonth - 1, intDay)
    Else
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      dtCurrDate = DateSerial(intYear, intMonth + 1, intDay)
    End If
    intYear = Year(dtCurrDate)
    intMonth = Month(dtCurrDate)
    modfrmDateChoose.MakeCalendar
    Exit Sub
  End If
  
  ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not (CInt(Trim(frmDateChoose.Controls("Label" & intX & "_" & intY).caption)) = Day(Now) And intYear = Year(Now) And intMonth = Month(Now)) Then
    frmDateChoose.Controls("Label" & intX & "_" & intY).BackColor = &HFFFFFF
    frmDateChoose.Controls("Label" & intX & "_" & intY).SpecialEffect = fmSpecialEffectFlat
    frmDateChoose.Controls("Label" & intX & "_" & intY).BorderColor = &HFFFFFF
    frmDateChoose.Controls("Label" & intX & "_" & intY).BorderStyle = fmBorderStyleSingle
  Else
    frmDateChoose.Controls("Label" & intX & "_" & intY).BackColor = &HFFFFFF
    frmDateChoose.Controls("Label" & intX & "_" & intY).BorderColor = &HC0C000
    frmDateChoose.Controls("Label" & intX & "_" & intY).BorderStyle = fmBorderStyleSingle
  End If
  
  intX = Mid(lblLabelClick.name, 6, 1)
  intY = Mid(lblLabelClick.name, 8, 1)
  If Not (CInt(Trim(lblLabelClick.caption)) = Day(Now) And intYear = Year(Now) And intMonth = Month(Now)) Then
    lblLabelClick.BackColor = &H80000004
    lblLabelClick.SpecialEffect = fmSpecialEffectSunken
  Else
    lblLabelClick.BackColor = &H80000004
    lblLabelClick.SpecialEffect = fmSpecialEffectSunken
    frmDateChoose.Controls("Label" & intX & "_" & intY).BorderColor = &HC0C000
  End If
  
End Sub

Public Sub LabelDblClick_Handler(lblLabelClick As Control)
  modGlobals.STR_SELECT_DATE = DateValue(intDay & "." & intMonth & "." & intYear)
  Unload frmDateChoose
End Sub
Attribute VB_Name = "modfrmReestr"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private glngMRCOLUMN As Long     ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd|"
Private glngMOCOLUMN As Long     ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd|"
Private glngORGCOLUMN As Long    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Private glngCOLUMNSCOUNT As Long  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| ListBox

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const strRegion_6_22 As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"

Public Sub chkFilterEnabled_Click_Handler()

  frmReestr.txtMRFilter.Enabled = frmReestr.chkFilterEnabled.value
  frmReestr.txtMOFilter.Enabled = frmReestr.chkFilterEnabled.value
  frmReestr.txtOrgFilter.Enabled = frmReestr.chkFilterEnabled.value
  frmReestr.txtMRFilter.value = vbNullString
  frmReestr.txtMOFilter.value = vbNullString
  frmReestr.txtOrgFilter.value = vbNullString
  If frmReestr.txtOrgFilter.Enabled = False Then
    If modServiceModule.IsNameExists(ThisWorkbook, modGlobals.STR_RANGE_NAME) = True Then
      frmReestr.ListReestr.RowSource = modGlobals.STR_RANGE_NAME
    End If
    frmReestr.txtMRFilter.BackColor = &H80000000
    frmReestr.txtMOFilter.BackColor = &H80000000
    frmReestr.txtOrgFilter.BackColor = &H80000000
  Else
    frmReestr.txtMRFilter.BackColor = &H80000005
    frmReestr.txtMOFilter.BackColor = &H80000005
    frmReestr.txtOrgFilter.BackColor = &H80000005
  End If

End Sub

Public Sub cmdOK_Click_Handler()

  On Error GoTo ErrHandler

  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  Dim wsTechSheet As Worksheet
  
  Dim lngNumber As Long
    
  Dim strValueORGName As String
  Dim strValueINN As String
  Dim strValueKPP As String
  Dim strValueActivity As String
  Dim strValueMRName As String
  Dim strValueMOName As String
  
  Dim rngRange As Range
  Dim rngCell As Range
  Dim rngAddMRCell As Range
  Dim rngAddMOCell As Range
  Dim rngDeleteRange As Range
  
  Dim intCounter As Integer
  Dim intCounterMO As Integer
  Dim intCounterMR As Integer
  Dim intRowHeight As Integer
  
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean
  Dim blnActivityCompare As Boolean                 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| activity (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.EnableEvents = False
  Application.ScreenUpdating = False
  
  lngNumber = frmReestr.ListReestr.ListIndex

  If lngNumber >= 0 Then
    
    Set wbBook = Application.ThisWorkbook
    Set wsSheet = wbBook.Worksheets(gstrMainSheetName)
    Set wsTechSheet = wbBook.Worksheets(STR_REESTR_ORG_SHEET_NAME)
    
    strValueORGName = frmReestr.ListReestr.List(lngNumber, 4)
    strValueINN = frmReestr.ListReestr.List(lngNumber, 5)
    strValueKPP = frmReestr.ListReestr.List(lngNumber, 6)
    strValueActivity = frmReestr.ListReestr.List(lngNumber, 7)
    strValueMRName = frmReestr.ListReestr.List(lngNumber, 1)
    strValueMOName = frmReestr.ListReestr.List(lngNumber, 2)

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    blnActivityCompare = True
''    If wbBook.Names("activity").RefersToRange.Interior.ColorIndex = colorCyan Then _
''        blnActivityCompare = False
    
    wsSheet.Activate

    If modServiceModule.IsNameExists(wbBook, "org") And modServiceModule.IsNameExists(wbBook, "inn") And _
       modServiceModule.IsNameExists(wbBook, "kpp") And modServiceModule.IsNameExists(wbBook, "activity") And _
       modServiceModule.IsNameExists(wbBook, "mr_check") And modServiceModule.IsNameExists(wbBook, "mo_check") And _
       modServiceModule.IsNameExists(wbBook, "oktmo_check") And modServiceModule.IsNameExists(wbBook, STR_RANGE_NAME) Then
         
         modServiceModule.UNPROTECT_SHEET wsSheet
         
         If LCase(wbBook.Names("region_name").RefersToRange.cells(1, 1).value) = strRegion_6_22 Then
         
            If Not (MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: '" & strValueORGName & "'?" & vbCrLf & _
                    "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd|/|fffd||fffd|, " & _
                    "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!") = vbYes) Then
              GoTo ProtectSheet
            End If
            
            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd|
            Set rngDeleteRange = Nothing
            For Each rngCell In wbBook.Names("mo_check").RefersToRange.cells
              Set rngRange = Nothing
              If LCase(rngCell.Offset(0, -2).value) = "|fffd|" Then
                Set rngRange = rngCell.Offset(0, -1).MergeArea.EntireRow
              ElseIf LCase(rngCell.Offset(0, 2).value) = "|fffd|" Then
                Set rngRange = rngCell.cells(1, 1).EntireRow
              End If
                
              If Not (rngRange Is Nothing) Then
                If rngDeleteRange Is Nothing Then
                  Set rngDeleteRange = rngRange
                Else
                  Set rngDeleteRange = Union(rngDeleteRange, _
                                             rngRange)
                End If
              End If
            Next rngCell
            
            ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            If Not (rngDeleteRange Is Nothing) Then
              rngDeleteRange.Delete
            End If
            
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
            wbBook.Names("mr_check").RefersToRange.cells(1, 1).MergeArea.value = vbNullString
            modSheetMain01.SheetMain01_Change_MR wsSheet, wbBook.Names("mr_check").RefersToRange.cells(1, 1).MergeArea
            modServiceModule.UNPROTECT_SHEET wsSheet
            
            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|(!!!) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            If Not (modServiceModule.IsNameExists(wbBook, "LIST_MR_MO_OKTMO")) Then
              If Not (MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|/|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & _
                             "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!") = vbYes) Then
                GoTo ProtectSheet
              End If
            End If
         End If
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd|, |fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         wsSheet.Range("org").cells(1, 1).value = strValueORGName
         wsSheet.Range("inn").cells(1, 1).value = strValueINN
         wsSheet.Range("kpp").cells(1, 1).value = strValueKPP
         ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
         If blnActivityCompare Then
             wsSheet.Range("activity").cells(1, 1).value = strValueActivity
             modSheetMain01.SheetMain01_Change_KindsOfGoods wsSheet, wsSheet.Range("activity").cells(1, 1)
         End If
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
         For Each rngCell In Union(wsSheet.Range("org"), _
                                   wsSheet.Range("inn"), _
                                   wsSheet.Range("kpp"), _
                                   wsSheet.Range("activity")).cells
           If rngCell.MergeCells Then
             modServiceModule.AutoFitMergedCellRowHeight rngCell, 25
           Else
             rngCell.cells(1, 1).EntireRow.AutoFit
             intRowHeight = rngCell.cells(1, 1).RowHeight
             If intRowHeight < 25 Then rngCell.cells(1, 1).RowHeight = 25
           End If
         Next rngCell
         
         ' |fffd||fffd||fffd||fffd||fffd||fffd|(!!!) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
         If LCase(wbBook.Names("region_name").RefersToRange.cells(1, 1).value) = strRegion_6_22 And _
            Len(Trim(strValueMRName)) <> 0 And _
            Len(Trim(strValueMOName)) <> 0 Then
            
             strValueMRName = vbNullString
             strValueMOName = vbNullString
             
             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd|, |fffd||fffd|, |fffd||fffd||fffd||fffd||fffd|
             ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|+|fffd||fffd||fffd|+|fffd||fffd||fffd|+|fffd||fffd||fffd|
             ' |fffd| (!!!) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| <> |fffd||fffd| /|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"/
             wsSheet.Activate
             
             Application.EnableEvents = True
              
             Set rngRange = wbBook.Names(STR_RANGE_NAME).RefersToRange
             Set rngAddMRCell = wsSheet.Range("mr_check").cells(wsSheet.Range("mr_check").Rows.Count, 1)
             
             intCounter = 2
             strValueMOName = ""
             intCounterMR = 1   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
             Do While intCounter <= rngRange.Rows.Count + 1
               If wsTechSheet.cells(intCounter, 5).value = strValueORGName And _
                  wsTechSheet.cells(intCounter, 6).value = strValueINN And _
                  wsTechSheet.cells(intCounter, 7).value = strValueKPP And _
                  ((wsTechSheet.cells(intCounter, 8).value = strValueActivity And _
                    blnActivityCompare = True) Or _
                   blnActivityCompare = False) And _
                  InStr(1, wsTechSheet.cells(intCounter, 3).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|") = 0 Then
    
                    wsTechSheet.Activate
                    strValueMRName = wsTechSheet.cells(intCounter, 2).value
                    strValueMOName = wsTechSheet.cells(intCounter, 3).value
                    wsSheet.Activate
                    modServiceModule.UNPROTECT_SHEET wsSheet
    
                    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                    If intCounterMR > 1 Then
                      modSheetMain01.SheetMain01_Hyperlink_Handler rngAddMRCell, wsSheet
                    End If
                    
                    rngAddMRCell.Offset(-1, 0).MergeArea.cells(1, 1).value = strValueMRName
                    intCounterMO = 1   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                    Set rngAddMOCell = wsSheet.Range("mo_check").cells(wsSheet.Range("mr_check").Rows.Count - 1, 1)
                    intCounterMR = intCounterMR + 1
                    
                    ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
                    Do While wsTechSheet.cells(intCounter, 2).value = strValueMRName
                      
                      If wsTechSheet.cells(intCounter, 5).value = strValueORGName And _
                         wsTechSheet.cells(intCounter, 6).value = strValueINN And _
                         wsTechSheet.cells(intCounter, 7).value = strValueKPP And _
                         ((wsTechSheet.cells(intCounter, 8).value = strValueActivity And _
                           blnActivityCompare = True) Or _
                          blnActivityCompare = False) And _
                         wsTechSheet.cells(intCounter, 2).value = strValueMRName And _
                         InStr(1, wsTechSheet.cells(intCounter, 3).value, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|") = 0 Then
    
                           wsTechSheet.Activate
                           strValueMOName = wsTechSheet.cells(intCounter, 3).value
                           wsSheet.Activate
        
                           ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                           If intCounterMO > 1 Then
                             modSheetMain01.SheetMain01_Hyperlink_Handler rngAddMOCell, wsSheet
                           End If
                           
                           rngAddMOCell.Offset(-1, 0).MergeArea.cells(1, 1).value = strValueMOName
                           intCounterMO = intCounterMO + 1
                      
                      End If
                      intCounter = intCounter + 1
                    Loop
                    intCounter = intCounter - 1
               End If
               intCounter = intCounter + 1
             Loop
             
         End If
         
         GoTo ProtectSheet
             
    End If

    GoTo ProtectSheet

  Else
    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical, modGlobals.STR_MSGBOX_WARNING_TITLE
  End If

  GoTo CleanUp

ProtectSheet:
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If modScrolling.blnIs_UserForm_Loaded("frmReestr") = True Then
    Unload frmReestr
  End If
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  If Not wsSheet Is Nothing Then
    wsSheet.Activate
    modServiceModule.PROTECT_SHEET wsSheet, True
  End If

ErrHandler:
  GoTo CleanUp
  
CleanUp:
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal

End Sub

Public Sub ListReestr_Change_Handler()
  If frmReestr.ListReestr.ListIndex > -1 Then
    frmReestr.lblMirror = frmReestr.ListReestr.List(frmReestr.ListReestr.ListIndex, 4)
  Else
    frmReestr.lblMirror = vbNullString
  End If
End Sub

Public Sub txtMOFilter_Change_Handler()
  Filter_Change_Handler frmReestr.txtMRFilter.Text, frmReestr.txtMOFilter.Text, frmReestr.txtOrgFilter.Text
End Sub

Public Sub txtMRFilter_Change_Handler()
  Filter_Change_Handler frmReestr.txtMRFilter.Text, frmReestr.txtMOFilter.Text, frmReestr.txtOrgFilter.Text
End Sub

Public Sub txtOrgFilter_Change_Handler()
  Filter_Change_Handler frmReestr.txtMRFilter.Text, frmReestr.txtMOFilter.Text, frmReestr.txtOrgFilter.Text
End Sub

Public Sub Filter_Change_Handler(ByVal strMRPattern As String, _
                                 ByVal strMOPattern As String, _
                                 ByVal strOrgPattern As String)

  On Error GoTo ErrHandler

  Dim wbBook As Workbook
  Dim wsReestrOrg As Worksheet
  Dim wsReestrFiltered As Worksheet
  Dim rngBaseReestr As Range
  Dim rngTemp As Range

  Dim strRangeTempName As String
  Dim lngReestrColumns As Long
  Dim lngCurrentRow As Long      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim lngCount As Long
  Dim lngRowReestrOrg As Long
  Dim lngColumnReestrOrg As Long

  If glngMOCOLUMN <= 0 Or _
     glngMRCOLUMN <= 0 Or _
     glngORGCOLUMN <= 0 Then
    GoTo ErrHandler
  End If

  Set wbBook = ThisWorkbook

  If modServiceModule.IsNameExists(wbBook, modGlobals.STR_RANGE_NAME) = False Then
    GoTo ErrHandler
  End If

  If Len(strMRPattern) = 0 And _
     Len(strMOPattern) = 0 And _
     Len(strOrgPattern) = 0 Then
    frmReestr.ListReestr.RowSource = modGlobals.STR_RANGE_NAME
  Else

    Application.EnableEvents = False

    strRangeTempName = "REESTR_FILTERED"

    lngCurrentRow = 2
    Set wsReestrOrg = wbBook.Worksheets(modGlobals.STR_REESTR_SHEET_NAME)
    Set wsReestrFiltered = wbBook.Worksheets(modGlobals.STR_REESTR_FILTERED_SHEET_NAME)
    Set rngBaseReestr = wsReestrOrg.Range(modGlobals.STR_RANGE_NAME)
    lngReestrColumns = rngBaseReestr.Columns.Count
    lngCount = rngBaseReestr.Rows.Count + 1

    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
    Application.Calculation = xlCalculationManual

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If modServiceModule.IsNameExists(wbBook, strRangeTempName) = True Then
      wbBook.Names(strRangeTempName).Delete
      wsReestrFiltered.Range(wsReestrFiltered.cells(2, 1), _
                             wsReestrFiltered.cells(wsReestrFiltered.UsedRange.Rows.Count + 2, _
                                                    wsReestrFiltered.UsedRange.Columns.Count)).ClearContents
    End If

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    For lngRowReestrOrg = rngBaseReestr.Row To lngCount + rngBaseReestr.Row - 2
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If (InStr(1, CStr(wsReestrOrg.cells(lngRowReestrOrg, glngMRCOLUMN).value), _
                strMRPattern, vbTextCompare) > 0 Or strMRPattern = "") And _
                (InStr(1, CStr(wsReestrOrg.cells(lngRowReestrOrg, glngMOCOLUMN).value), _
                       strMOPattern, vbTextCompare) > 0 Or strMOPattern = "") And _
                       (InStr(1, CStr(wsReestrOrg.cells(lngRowReestrOrg, glngORGCOLUMN).value), _
                              strOrgPattern, vbTextCompare) > 0 Or strOrgPattern = "") Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
        For lngColumnReestrOrg = rngBaseReestr.Column + 1 To glngCOLUMNSCOUNT
          wsReestrFiltered.cells(lngCurrentRow, lngColumnReestrOrg - rngBaseReestr.Column + 1).value = _
          wsReestrOrg.cells(lngRowReestrOrg, lngColumnReestrOrg).value
        Next lngColumnReestrOrg
        ' |fffd||fffd||fffd||fffd||fffd|
        wsReestrFiltered.cells(lngCurrentRow, 1).value = lngCurrentRow - 1
        lngCurrentRow = lngCurrentRow + 1
      End If
    Next lngRowReestrOrg

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Len(CStr(wsReestrFiltered.Range("A2").cells(1, 1).value)) > 0 Then  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      wbBook.Names.Add strRangeTempName, _
                       RefersToR1C1:="=" & modGlobals.STR_REESTR_FILTERED_SHEET_NAME & _
                                     "!R2C1:R" & CStr(lngCurrentRow - 1) & _
                                     "C" & CStr(lngReestrColumns)
    End If
    If modServiceModule.IsNameExists(wbBook, strRangeTempName) = True Then
      frmReestr.ListReestr.RowSource = strRangeTempName
    Else
      frmReestr.ListReestr.RowSource = vbNullString
    End If
    frmReestr.Repaint
  End If

  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
  Application.EnableEvents = True
  Application.Calculation = xlCalculationAutomatic
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|
Public Sub Define_Range(strSheetName As String, _
                        wbBook As Workbook)

  On Error GoTo ErrHandler

  If wbBook Is Nothing Or _
     Len(strSheetName) = 0 Then
    GoTo ErrHandler
  End If

  Dim wsSheet As Worksheet
  Dim rngRange As Range
  Dim intOrgRegionRowCount As Long
  Set wsSheet = wbBook.Worksheets(strSheetName)

  modServiceModule.UNPROTECT_SHEET wsSheet
  wsSheet.Columns(3).Delete
  wsSheet.Columns(1).Delete

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  wsSheet.Range("A1").value = "|fffd||fffd|"
  wsSheet.Range("B1").value = "|fffd||fffd|"
  wsSheet.Range("C1").value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
  wsSheet.Range("D1").value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  wsSheet.Range("E1").value = "|fffd||fffd||fffd|"
  wsSheet.Range("F1").value = "|fffd||fffd||fffd|"
  wsSheet.Range("G1").value = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

  wsSheet.Application.DisplayAlerts = False

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  wsSheet.Activate
  wsSheet.Columns("A:A").Insert Shift:=xlToRight

  wsSheet.Application.DisplayAlerts = True

  intOrgRegionRowCount = 1
  Do While Len(CStr(wsSheet.cells(intOrgRegionRowCount + 1, 5).value)) > 0
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    wsSheet.cells(intOrgRegionRowCount + 1, 1).value = intOrgRegionRowCount
    intOrgRegionRowCount = intOrgRegionRowCount + 1
  Loop

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  wsSheet.Range("A1").value = "|fffd|"

  If modServiceModule.IsNameExists(ThisWorkbook, modGlobals.STR_RANGE_NAME) = True Then
    ThisWorkbook.Names(modGlobals.STR_RANGE_NAME).Delete
  End If

  If intOrgRegionRowCount > 1 Then
    Set rngRange = wsSheet.Range(wsSheet.cells(2, 1), _
                                 wsSheet.cells(intOrgRegionRowCount, 8))

    If Len(modGlobals.STR_RANGE_NAME) > 0 Then
      rngRange.name = modGlobals.STR_RANGE_NAME
    End If
  End If

ErrHandler:
End Sub

Public Sub cmdUpdateReestr_Click_Handler()

  On Error GoTo ErrHandler

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  frmReestr.txtMRFilter.Text = vbNullString
  frmReestr.txtMOFilter.Text = vbNullString
  frmReestr.txtOrgFilter.Text = vbNullString

  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  frmReestr.ListReestr.RowSource = ""

  modSheetMain01.cmdUpdateOrgData_Click_Handler ActiveSheet, frmReestr.cmdUpdateReestr

  If modServiceModule.IsNameExists(ThisWorkbook, modGlobals.STR_RANGE_NAME) = True Then
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    frmReestr.ListReestr.RowSource = modGlobals.STR_RANGE_NAME
  Else
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    frmReestr.ListReestr.RowSource = ""
  End If

  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
  Application.ScreenUpdating = True
End Sub

Public Sub ListReestr_DblClick_Handler(ByVal Cancel As MSForms.ReturnBoolean)
  cmdOK_Click_Handler
End Sub

Public Sub txtURL_DblClick_Handler(ByVal Cancel As MSForms.ReturnBoolean)
'modWindowClipboard.PutOnClipboard txtURL
  Application.ThisWorkbook.FollowHyperlink frmReestr.txtURL.Text
End Sub

Public Sub UserForm_Initialize_Handler()

  Dim wbBook As Workbook
  Dim lngICounter As Long
  Dim wsOrgSheet As Worksheet
  Dim wsFilteredSheet As Worksheet

  Set wbBook = ThisWorkbook

  Set modScrolling.obj = frmReestr.ListReestr
  If modGlobals.gblnTestMode = False Then
    frmReestr.ListReestr.SetFocus
    hW = GetFocus
    frmReestr.cmdOK.SetFocus
    Hook hW  ' for LB scrolling
  End If

  If modServiceModule.IsNameExists(wbBook, "region_name") = True Then
    frmReestr.Label1.caption = wbBook.Names("region_name").RefersToRange.value
  End If
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Select Case wbBook.Names("TSphere_trans").RefersToRange.cells(1, 1).value
    Case "WARM"
      modGlobals.STR_RANGE_NAME = modHTTPServerCaller.STR_WARM_RANGE_NAME
      modGlobals.LNG_AS_ACTIVITY_SPHERE = asWARM
    Case "GVS"
      modGlobals.STR_RANGE_NAME = modHTTPServerCaller.STR_HOT_VS_RANGE_NAME
      modGlobals.LNG_AS_ACTIVITY_SPHERE = asHOTVS
    Case "HVS"
      modGlobals.STR_RANGE_NAME = modHTTPServerCaller.STR_VS_RANGE_NAME
      modGlobals.LNG_AS_ACTIVITY_SPHERE = asVS
    Case "VO"
      modGlobals.STR_RANGE_NAME = modHTTPServerCaller.STR_VO_RANGE_NAME
      modGlobals.LNG_AS_ACTIVITY_SPHERE = asVO
    Case "TBO"
      modGlobals.STR_RANGE_NAME = modHTTPServerCaller.STR_TBO_RANGE_NAME
      modGlobals.LNG_AS_ACTIVITY_SPHERE = asTBO
  End Select


  If modServiceModule.IsNameExists(wbBook, modGlobals.STR_RANGE_NAME) = True Then
    frmReestr.ListReestr.RowSource = modGlobals.STR_RANGE_NAME
  End If

  Set wsOrgSheet = ThisWorkbook.Worksheets(modGlobals.STR_REESTR_SHEET_NAME)
  Set wsFilteredSheet = ThisWorkbook.Worksheets(modGlobals.STR_REESTR_FILTERED_SHEET_NAME)

  modServiceModule.UNPROTECT_SHEET wsOrgSheet
  modServiceModule.UNPROTECT_SHEET wsFilteredSheet

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  For lngICounter = 1 To wsOrgSheet.UsedRange.Columns.Count
    wsFilteredSheet.cells(1, lngICounter).value = wsOrgSheet.cells(1, lngICounter).value
    If wsFilteredSheet.cells(1, lngICounter).value = "|fffd||fffd|" Then
      glngMRCOLUMN = lngICounter  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd|"
    End If
    If wsFilteredSheet.cells(1, lngICounter).value = "|fffd||fffd|" Then
      glngMOCOLUMN = lngICounter  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd|"
    End If
    If wsFilteredSheet.cells(1, lngICounter).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
      glngORGCOLUMN = lngICounter  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
  Next lngICounter

  glngCOLUMNSCOUNT = frmReestr.ListReestr.ColumnCount



  Application.ScreenUpdating = True

End Sub

Public Sub UserForm_Terminate_Handler()
  frmReestr.ListReestr.RowSource = vbNullString
  If modGlobals.gblnTestMode = False Then
    UnHook hW  ' for LB scrolling
  End If
End Sub

Attribute VB_Name = "modfrmSphereChoose"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

Public Sub UserForm_Initialize_Handler()

  On Error GoTo ErrHandler

  Application.Visible = False
  
  frmSphereChoose.optWARM.SetFocus
  frmSphereChoose.optWARM.value = True

  GoTo CleanUp

ErrHandler:
  Application.Visible = True
  GoTo CleanUp
CleanUp:
End Sub

Public Sub cmdOK_Click_Handler()

  On Error GoTo ErrHandler
  
  Dim wbBook As Workbook
  Dim wsSheet As Worksheet
  Dim wsTempSheet As Worksheet
  
  Dim intVisibleSheet As Integer

  If modAnimatedFormsGlobals.BLN_SHOW_PROGRESS_FORM_ON_UPDATE_REQUESTS = True Then
    Set frmProgressForm = Try_Show_Progress_Form(frmSphereChoose.caption)
    ProgressDialogue.lblWait = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
  Else
    Set frmProgressForm = Nothing
  End If
  
  Set wbBook = ThisWorkbook
  Set wsSheet = wbBook.Worksheets(gstrTehSheetName)
  
  wsSheet.Visible = xlSheetVisible
  
  ' tick
  If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
  
  wsSheet.Activate
  Select Case True
  Case frmSphereChoose.optWARM
    wsSheet.Range("TSphere").cells(1, 1).value = "|fffd||fffd|"
    wsSheet.Range("TSphere_trans").cells(1, 1).value = "WARM"
    wsSheet.Range("TSphere_full").cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    wsSheet.Range("Tfirst_index_for_price").cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
  Case frmSphereChoose.optGVS
    wsSheet.Range("TSphere").cells(1, 1).value = "|fffd||fffd||fffd|"
    wsSheet.Range("TSphere_trans").cells(1, 1).value = "GVS"
    wsSheet.Range("TSphere_full").cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    wsSheet.Range("Tfirst_index_for_price").cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
  Case frmSphereChoose.optHVS
    wsSheet.Range("TSphere").cells(1, 1).value = "|fffd||fffd||fffd|"
    wsSheet.Range("TSphere_trans").cells(1, 1).value = "HVS"
    wsSheet.Range("TSphere_full").cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    wsSheet.Range("Tfirst_index_for_price").cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
  Case frmSphereChoose.optVO
    wsSheet.Range("TSphere").cells(1, 1).value = "|fffd||fffd|"
    wsSheet.Range("TSphere_trans").cells(1, 1).value = "VO"
    wsSheet.Range("TSphere_full").cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| (|fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
    wsSheet.Range("Tfirst_index_for_price").cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
  Case frmSphereChoose.optTBO
    wsSheet.Range("TSphere").cells(1, 1).value = "|fffd||fffd||fffd|"
    wsSheet.Range("TSphere_trans").cells(1, 1).value = "TBO"
    wsSheet.Range("TSphere_full").cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    wsSheet.Range("Tfirst_index_for_price").cells(1, 1).value = vbNullString
  End Select
  
  ' tick
  If Not frmProgressForm Is Nothing Then frmProgressForm.Tick

  wsSheet.Range("DocProp_TemplateCode").cells(1, 1).value = wsSheet.Range("DocProp_TemplateCode").cells(1, 1).value & "." & _
                                                            wsSheet.Range("TSphere_trans").cells(1, 1).value
  wsSheet.Range("DocProp_Version").cells(1, 1).value = "5.0"
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If modServiceModule.blnIsDocumentProperty(wbBook, "CurrentVersion") = True Then _
       wbBook.CustomDocumentProperties("CurrentVersion") = wsSheet.Range("DocProp_Version").cells(1, 1).value
  If modServiceModule.blnIsDocumentProperty(wbBook, "Version") = True Then _
       wbBook.CustomDocumentProperties("Version") = wsSheet.Range("DocProp_TemplateCode").cells(1, 1).value
  
  ' tick
  If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
  
  If modServiceModule.blnIsDocumentProperty(wbBook, "Title") = True Then _
       wbBook.BuiltinDocumentProperties("Title").value = _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| " & wbBook.Names("TSphere_full").RefersToRange.cells(1, 1).value & " (|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)"
  If modServiceModule.blnIsDocumentProperty(wbBook, "Subject") = True Then _
       wbBook.BuiltinDocumentProperties("Subject").value = _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| " & wbBook.Names("TSphere_full").RefersToRange.cells(1, 1).value & " (|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)"
  
  wbBook.Names("flag_main_template").RefersToRange.cells(1, 1).value = "False"
  
  
  ' tick
  If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
  
  Set wsTempSheet = wbBook.Worksheets(gstrInstructionSheetName)
  intVisibleSheet = wsTempSheet.Visible
  modServiceModule.UNPROTECT_SHEET wsTempSheet
  wsTempSheet.Range("version").value = "=""|fffd||fffd||fffd||fffd||fffd||fffd| "" & GetVersion()"
  wsTempSheet.Range("code").value = "=""|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: "" & GetCode()"
  modServiceModule.PROTECT_SHEET wsTempSheet, True
  wsTempSheet.Visible = intVisibleSheet
  
  ' tick
  If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
  If Not blnConvertTemplate(wbBook) Then GoTo ErrHandler
  
  ' tick
  If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  wsSheet.Visible = xlSheetVeryHidden
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  Information.Visible = xlSheetVisible
  modRegionSelect.Visible = xlSheetVisible
  
  ' tick
  If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
''  wbBook.SaveAs wbBook.Path & "\" & wbBook.Names("DocProp_TemplateCode").RefersToRange.cells(1, 1).value & "(v" & _
''                wbBook.Names("DocProp_Version").RefersToRange.cells(1, 1).value & ").xls", wbBook.FileFormat
  wbBook.SaveAs strNewFileName(wbBook), wbBook.FileFormat

  
  ' tick
  If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
  
  GoTo CleanUp

ErrHandler:
  MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. " & vbCrLf & _
         "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. " & vbCrLf & vbCrLf & _
         "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd|.7 |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" & gstrInstructionSheetName & "'!", _
         vbCritical, modGlobals.STR_MSGBOX_WARNING_TITLE
  
  ' tick
  If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Instruction.Visible = xlSheetVisible
  For Each wsTempSheet In wbBook.Sheets
    ' tick
    If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
    
    If wsTempSheet.name <> Instruction.name Then wsTempSheet.Visible = xlSheetVeryHidden
  Next
  
  GoTo CleanUp
  
CleanUp:
  If Not frmProgressForm Is Nothing Then
    frmProgressForm.Hide
    Set frmProgressForm = Nothing
  End If
  
  If modScrolling.blnIs_UserForm_Loaded(frmSphereChoose.name) = True Then
    Unload frmSphereChoose
  End If
  Application.Visible = True
End Sub

Public Sub UserForm_QueryClose_Handler(Cancel As Integer, CloseMode As Integer)

  On Error GoTo ErrHandler

  If CloseMode = vbFormControlMenu Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd|'!", _
           vbExclamation, modGlobals.STR_MSGBOX_WARNING_TITLE
    
    Cancel = True
  End If
  GoTo CleanUp

ErrHandler:
  GoTo CleanUp
CleanUp:
End Sub


' -------------------------------
' --  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  --
' -------------------------------

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Function blnConvertTemplate(ByVal wbBook As Workbook) As Boolean

  On Error GoTo ErrHandler
  
  Dim nmRange As name
  Dim intCounter As Integer
  Dim intCounterTwo As Integer
  Dim intVisibleSheet As Integer
  Dim strSphere(5) As String
  Dim strNameSheet(2) As String
  Dim strVdetHVS(4) As String
  Dim strTemp As String
  Dim wsSheet As Worksheet
  Dim wsTempSheet As Worksheet
  Dim rngCell As Range
  Dim rngRange As Range
  
  Dim blnValueEnableEventsLocal As Boolean
  Dim blnValueScreenUpdatingLocal As Boolean

  blnValueEnableEventsLocal = Application.EnableEvents
  blnValueScreenUpdatingLocal = Application.ScreenUpdating
  
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  
  blnConvertTemplate = True
       
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|)
  Set wsSheet = wbBook.Worksheets(gstrMainSheetName)
  intVisibleSheet = wsSheet.Visible
  wsSheet.Visible = xlSheetVisible
  
  ' tick
  If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
  
  wsSheet.Activate
  modServiceModule.UNPROTECT_SHEET wsSheet
  If wbBook.Names("TSphere_trans").RefersToRange.cells(1, 1).value = "TBO" Then
    wsSheet.Shapes("ExcludeHelp_11").Delete
    wsSheet.Shapes("ExcludeHelp_12").Delete
    wsSheet.Shapes("ExcludeHelp_3").Delete
    wsSheet.Shapes("ExcludeHelp_7").Delete
  End If
  
  ' tick
  If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
  
  If wbBook.Names("TSphere_trans").RefersToRange.cells(1, 1).value <> "WARM" Then
    wsSheet.Shapes("ExcludeHelp_13").Delete
  End If
  modServiceModule.PROTECT_SHEET wsSheet, True
  wsSheet.Visible = intVisibleSheet
 
  ' tick
  If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
  
  ' |fffd||fffd||fffd||fffd||fffd|
  strSphere(1) = "WARM"
  strSphere(2) = "GVS"
  strSphere(3) = "HVS"
  strSphere(4) = "VO"
  strSphere(5) = "TBO"
  
  For intCounter = LBound(strSphere) To UBound(strSphere)
  
    ' tick
    If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
    
    If strSphere(intCounter) = wbBook.Names("TSphere_trans").RefersToRange.cells(1, 1).value Then
      ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      blnWorkWithNames wbBook, strSphere(intCounter), True
    Else
      ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      blnWorkWithNames wbBook, strSphere(intCounter), False
    End If
  Next intCounter
  
  ' tick
  If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
  
  ' |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  strNameSheet(1) = sheetMain02.name
  strNameSheet(2) = sheetMain05.name
  
  For intCounter = LBound(strNameSheet) To UBound(strNameSheet)
  
    ' tick
    If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
    
    If modServiceModule.SheetExists(strNameSheet(intCounter), wbBook) Then
      Set wsSheet = wbBook.Worksheets(strNameSheet(intCounter))
      intVisibleSheet = wsSheet.Visible
      wsSheet.Visible = xlSheetVisible
      wsSheet.Activate
      modServiceModule.UNPROTECT_SHEET wsSheet
      
  
      ' tick
      If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
      
      If InStr(1, wsSheet.name, "|fffd||fffd||fffd||fffd|") <> 0 Then
        strTemp = "checkCell_1"
        intCounterTwo = 3
        If InStr(1, wsSheet.name, "|fffd||fffd||fffd||fffd| (2)") <> 0 Then
          strTemp = "checkCell_2"
          intCounterTwo = 4
        End If
        
        If Application.CountA(wsSheet.Range(strTemp).Columns(intCounterTwo)) = 0 Then
          wsSheet.Range(strTemp).Columns(intCounterTwo).EntireColumn.Hidden = True
        End If
      End If
         
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
      wsSheet.name = wbBook.Names("TSphere").RefersToRange.cells(1, 1).value & " " & wsSheet.name
      
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      modServiceModule.FixAllHyperlinksInSheet
  
      ' tick
      If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
      
      modServiceModule.PROTECT_SHEET wsSheet, True
      wsSheet.Visible = intVisibleSheet
    End If
  Next intCounter
''
''  ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd| (2)" |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|"
''  If wbBook.Names("TSphere_trans").RefersToRange.cells(1, 1).value = "TBO" Then
''    sheetMain02.name = "|fffd||fffd||fffd|"
''    sheetMain05.name = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
''    sheetMain02.name = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (2)"
''  End If

  
  ' tick
  If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| AllSheetsInThisWorkbook, |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  AllSheetsInThisWorkbook.Visible = xlSheetVisible
  AllSheetsInThisWorkbook.cmdGetListAllSheets_Click
  AllSheetsInThisWorkbook.Visible = xlSheetVeryHidden
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  modServiceModule.ClearBrokenNamesInWorkbook wbBook
  
  ' tick
  If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
  
  GoTo CleanUp

ErrHandler:
  blnConvertTemplate = False
  GoTo CleanUp

CleanUp:
  Application.EnableEvents = blnValueEnableEventsLocal
  Application.ScreenUpdating = blnValueScreenUpdatingLocal

End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
' "_s"&|fffd||fffd||fffd||fffd||fffd| (strSphere) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (blnIsThisSphere = true)
'                         - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (blnIsThisSphere = False)
' "_os"&|fffd||fffd||fffd||fffd||fffd| (strSphere) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (blnIsThisSphere = true)
'                          - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (blnIsThisSphere = False)
' "_ds"&|fffd||fffd||fffd||fffd||fffd| (strSphere) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (blnIsThisSphere = true)
'                          - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (blnIsThisSphere = False)
Private Function blnWorkWithNames(ByVal wbBook As Workbook, _
                                  ByVal strSphere As String, _
                                  blnIsThisSphere As Boolean) As Boolean

  On Error GoTo ErrHandler
  
  Dim nmRange As name
  Dim intVisibleSheet As Integer
  Dim wsSheet As Worksheet
  Dim rngTempRange As Range
  Dim strNewRangeName As String
  
  blnWorkWithNames = True
  
  For Each nmRange In wbBook.Names
   
   On Error GoTo nextName
   
   ' tick
   If Not frmProgressForm Is Nothing Then frmProgressForm.Tick
   
   If InStr(1, nmRange.name, "_s" & strSphere) <> 0 Or _
      InStr(1, nmRange.name, "_ds" & strSphere) <> 0 Or _
      InStr(1, nmRange.name, "_os" & strSphere) <> 0 Then
        
         Set wsSheet = wbBook.Names(nmRange.name).RefersToRange.parent
         intVisibleSheet = wsSheet.Visible
         wsSheet.Visible = xlSheetVisible
         wsSheet.Activate
         modServiceModule.UNPROTECT_SHEET wsSheet
         
         If InStr(1, nmRange.name, "_s" & strSphere) <> 0 Then
           If blnIsThisSphere Then GoTo renameRange
         ElseIf InStr(1, nmRange.name, "_os" & strSphere) <> 0 Then
           If blnIsThisSphere Then GoTo nextStep
         ElseIf InStr(1, nmRange.name, "_ds" & strSphere) <> 0 Then
           If Not blnIsThisSphere Then GoTo nextStep
         End If
          
         GoTo deleteRange
      
renameRange:
           strNewRangeName = Left(nmRange.name, Len(nmRange.name) - Len("_s" & strSphere))
           If modServiceModule.IsNameExists(wbBook, strNewRangeName) Then
             wbBook.Names(strNewRangeName).Delete
           End If
           Set rngTempRange = wsSheet.Range(nmRange.name)
           rngTempRange.name = strNewRangeName
           GoTo nextStep
           
deleteRange:
           Application.ScreenUpdating = True
           wsSheet.Range(nmRange.name).EntireRow.Delete
           Application.ScreenUpdating = False
           nmRange.Delete
           GoTo nextStep
      
nextStep:
      modServiceModule.PROTECT_SHEET wsSheet, True
      wsSheet.Visible = intVisibleSheet
    
    ElseIf nmRange.name = "kind_of_activity_" & strSphere And _
           blnIsThisSphere = True Then
             Set wsSheet = wbBook.Names("activity").RefersToRange.parent
             intVisibleSheet = wsSheet.Visible
             wsSheet.Visible = xlSheetVisible
             wsSheet.Activate
             Set rngTempRange = wsSheet.Range("activity")
             modServiceModule.UNPROTECT_SHEET wsSheet
                With rngTempRange.Validation
                  .Delete
                  .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=" & nmRange.name
                  .IgnoreBlank = True
                  .InCellDropdown = True
                  .InputTitle = ""
                  .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd||fffd|"
                  .InputMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                  .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                  .ShowInput = True
                  .ShowError = True
                End With
                rngTempRange.Interior.ColorIndex = colorCyan
                rngTempRange.MergeArea.Locked = False
             modServiceModule.PROTECT_SHEET wsSheet, True
             wsSheet.Visible = intVisibleSheet
    End If
nextName:
  Next nmRange
  
  GoTo CleanUp

ErrHandler:
  blnWorkWithNames = False
  GoTo CleanUp

CleanUp:

End Function

Public Function strNewFileName(ByVal wbBook As Workbook) As String
  
  Dim strFileName As String
  Dim strFileExtension As String
  Dim strCorrectFileName As String
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  strFileName = wbBook.Names("DocProp_TemplateCode").RefersToRange.cells(1, 1).value & "(v" & _
                wbBook.Names("DocProp_Version").RefersToRange.cells(1, 1).value & ")"
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  strFileExtension = Mid(wbBook.name, InStrRev(wbBook.name, "."))

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  If FileExist(wbBook.Path & "\" & strFileName & strFileExtension) Then
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    strCorrectFileName = strFileName & " (" & Replace(Now(), ":", "") & ")"
    MsgBox "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" & strFileName & "' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| - '" & _
              strCorrectFileName & "'!", _
            vbInformation, _
            STR_MSGBOX_INFORMATION_TITLE
    strFileName = strCorrectFileName
  End If
  
  strNewFileName = wbBook.Path & "\" & strFileName & strFileExtension
  
End Function

Public Function FileExist(filename As String) As Boolean

  If Dir(filename) = "" Then
    FileExist = False
  Else
    FileExist = True
  End If

End Function

Attribute VB_Name = "sheetMain01"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Base 1
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modSheetMain01.SheetMain01_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modSheetMain01.SheetMain01_Worksheet_Change Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modSheetMain01.SheetMain01_Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modSheetMain01.SheetMain01_Worksheet_SelectionChange Target
End Sub

Private Sub Worksheet_Deactivate()
  modSheetMain01.SheetMain01_Worksheet_Deactivate
End Sub
Attribute VB_Name = "sheetMain02"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modSheetMain02.SheetMain02_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modSheetMain02.SheetMain02_Worksheet_Change Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modSheetMain02.SheetMain02_Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modSheetMain02.SheetMain02_Worksheet_SelectionChange Target
End Sub
Attribute VB_Name = "sheetMain03"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modSheetMain03.SheetMain03_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modSheetMain03.SheetMain03_Worksheet_Change Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modSheetMain03.SheetMain03_Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modSheetMain03.SheetMain03_Worksheet_SelectionChange Target
End Sub

Private Sub Worksheet_Deactivate()
  modSheetMain03.SheetMain03_Worksheet_Deactivate
End Sub
Attribute VB_Name = "sheetMain04"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modSheetMain04.SheetMain04_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modSheetMain04.SheetMain04_Worksheet_Change Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modSheetMain04.SheetMain04_Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modSheetMain04.SheetMain04_Worksheet_SelectionChange Target
End Sub

Private Sub Worksheet_Deactivate()
  modSheetMain04.SheetMain04_Worksheet_Deactivate
End Sub
Attribute VB_Name = "sheetMain05"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
  modSheetMain05.SheetMain05_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  modSheetMain05.SheetMain05_Worksheet_Change Target
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  modSheetMain05.SheetMain05_Worksheet_FollowHyperlink Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  modSheetMain05.SheetMain05_Worksheet_SelectionChange Target
End Sub
Attribute VB_Name = "sheetOld00"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
    On Error GoTo ErrHandler
Me.Unprotect (gPASSWORD)
hyplink Target.Range
Me.Protect Password:=gPASSWORD, DrawingObjects:=False, AllowFormattingColumns:=True, AllowFormattingRows:=True
    Exit Sub
ErrHandler:
    MsgBox Err.Description, vbOKOnly, ActiveSheet.name
End Sub

Sub hyplink(rg As Range)

Dim k As Integer
Dim WB As Workbook
Dim ws As Worksheet
Set WB = Application.ThisWorkbook
Set ws = WB.ActiveSheet

If rg.cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
  k = rg.Row
  
  ws.Rows(k - 1).Select
  Selection.Copy
  ws.Rows(k).Select
  Selection.Insert Shift:=xlDown
  ws.Rows(k).Select
  Selection.ClearContents
  ws.cells(k, 3).Select
  hyp_del ws.name, ws.cells(k, 3)
  'ws.Cells(k, 5).Select
  'Selection.Interior.ColorIndex = 34
  'Selection.Locked = False
  
  numcl (k)
  
End If

If rg.cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
  k = rg.Row
  
  ws.Rows(k - 1).Select
  Selection.Copy
  ws.Rows(k).Select
  Selection.Insert Shift:=xlDown
  ws.Rows(k).Select
  Selection.ClearContents
  ws.cells(k, 3).Select
  hyp_del ws.name, ws.cells(k, 3)
'  ws.Cells(k, 6).Value = "|fffd||fffd||fffd|. |fffd||fffd||fffd|."
'  ws.Cells(k, 5).Select
'  Selection.Interior.ColorIndex = 34
'  Selection.Locked = False
 
  numcl (k)
  
End If

If rg.cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" Then
  k = rg.Row
  
  ws.Rows(k - 1).Select
  Selection.Copy
  ws.Rows(k).Select
  Selection.Insert Shift:=xlDown
  ws.Rows(k).Select
  Selection.ClearContents
  ws.cells(k, 3).Select
  hyp_del ws.name, ws.cells(k, 3)
'  ws.Cells(k, 6).Value = "|fffd||fffd||fffd|. |fffd||fffd||fffd|."
'  ws.Cells(k, 5).Select
'  Selection.Interior.ColorIndex = 34
'  Selection.Locked = False
  
  numcl (k)
  
End If

If rg.cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" Then
  k = rg.Row
  
  ws.Rows(k - 1).Select
  Selection.Copy
  ws.Rows(k).Select
  Selection.Insert Shift:=xlDown
  ws.Rows(k).Select
  Selection.ClearContents
  ws.cells(k, 3).Select
  hyp_del ws.name, ws.cells(k, 3)
'  ws.Cells(k, 6).Value = "|fffd||fffd||fffd|. |fffd||fffd||fffd|."
'  ws.Cells(k, 5).Select
'  Selection.Interior.ColorIndex = 34
'  Selection.Locked = False
  
  numcl (k)
  
End If

If rg.cells(1, 1).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
  k = rg.Row
  l = k
  
  ws.Rows(k).Delete
  numcl (l)


End If

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub numcl(r As Integer)

Dim WB As Workbook
Dim ws As Worksheet
Set WB = Application.ThisWorkbook
Set ws = WB.ActiveSheet
  
    While ws.cells(r, 3).value <> "first"
          r = r - 1
    Wend
    
    
    If ws.cells(r, 4).value = "3.1" Then
      l = 1
      While ws.cells(r, 3).value <> "end"
          ws.cells(r, 4).value = "3." & l
          ws.cells(r, 5).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & l
          l = l + 1
          r = r + 1
      Wend
    ElseIf ws.cells(r, 4).value = "4.2.1" Then
      l = 1
      While ws.cells(r, 3).value <> "end"
          ws.cells(r, 4).value = "4.2." & l
          ws.cells(r, 5).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & l
          l = l + 1
          r = r + 1
      Wend
    ElseIf ws.cells(r, 4).value = "5.1.1" Then
      l = 1
      While ws.cells(r, 3).value <> "end"
          ws.cells(r, 4).value = "5.1." & l
          l = l + 1
          r = r + 1
      Wend
    ElseIf ws.cells(r, 4).value = "7.1" Then
      l = 1
      While ws.cells(r, 3).value <> "end"
          ws.cells(r, 4).value = "7." & l
          l = l + 1
          r = r + 1
      Wend
        
    End If
  
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Sub hyp_del(ws As String, cl As Range)

    ActiveCell.FormulaR1C1 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    ActiveSheet.Hyperlinks.Add Anchor:=Selection, Address:="", _
    SubAddress:=Chr(39) & ws & Chr(39) & "!" & cl.Address, TextToDisplay:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    With Selection.Font
        .name = "Tahoma"
        .Size = 9
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleSingle
        .ColorIndex = 5
    End With

End Sub


Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

    Application.Calculate
    
    modThisWorkbook.ThisWorkbook_Workbook_BeforeSave
    
    On Error GoTo ErrHandler
    
    Dim status As Integer
    status = ThisWorkbook.CustomDocumentProperties("Status")
    If status > 2 Then
      MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation + vbOKOnly, ThisWorkbook.name
      Cancel = True
      GoTo CleanUp
    End If
    
    GoTo CleanUp

ErrHandler:
    MsgBox Err.Description, vbOKOnly + vbExclamation, ThisWorkbook.name

CleanUp:

End Sub

Private Sub Workbook_Open()
  modThisWorkbook.ThisWorkbook_Workbook_Open
End Sub

Private Sub Workbook_BeforePrint(Cancel As Boolean)
  modThisWorkbook.ThisWorkbook_Workbook_BeforePrint
End Sub

' InQuest injected base64 decoded content
' k"{-
' +bjX
' ny'+y
' y,"t
' zu)u
' '"qh
' {Qz{
' *':t
' )^J)
' zjej
' .+-9

INQUEST-PP=macro
