Attribute VB_Name = "Feuil1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "OptimiserVolPF, 3, 0, MSForms, CommandButton"
Attribute VB_Control = "FrontiereEfficiente, 4, 1, MSForms, CommandButton"
Attribute VB_Control = "CheckBox1, 5, 2, MSForms, CheckBox"
Attribute VB_Control = "CheckBox2, 6, 3, MSForms, CheckBox"
Attribute VB_Control = "CheckBox3, 8, 4, MSForms, CheckBox"
Attribute VB_Control = "CheckBox4, 9, 5, MSForms, CheckBox"
Attribute VB_Control = "CheckBox5, 10, 6, MSForms, CheckBox"
Attribute VB_Control = "CheckBox6, 11, 7, MSForms, CheckBox"
Attribute VB_Control = "CheckBox7, 12, 8, MSForms, CheckBox"
Attribute VB_Control = "CheckBox8, 13, 9, MSForms, CheckBox"
Attribute VB_Control = "CheckBox9, 14, 10, MSForms, CheckBox"
Attribute VB_Control = "CheckBox10, 15, 11, MSForms, CheckBox"
Attribute VB_Control = "CheckBox11, 16, 12, MSForms, CheckBox"
Attribute VB_Control = "CheckBox12, 17, 13, MSForms, CheckBox"
Attribute VB_Control = "CheckBox13, 18, 14, MSForms, CheckBox"
Attribute VB_Control = "CheckBox14, 19, 15, MSForms, CheckBox"
Attribute VB_Control = "CheckBox15, 20, 16, MSForms, CheckBox"
Attribute VB_Control = "CheckBox16, 21, 17, MSForms, CheckBox"
Attribute VB_Control = "CheckBox17, 22, 18, MSForms, CheckBox"
Attribute VB_Control = "CheckBox18, 23, 19, MSForms, CheckBox"
Attribute VB_Control = "CheckBox19, 24, 20, MSForms, CheckBox"
Attribute VB_Control = "CheckBox20, 25, 21, MSForms, CheckBox"
Attribute VB_Control = "CheckBox21, 26, 22, MSForms, CheckBox"
Attribute VB_Control = "CheckBox22, 27, 23, MSForms, CheckBox"
Attribute VB_Control = "CheckBox23, 28, 24, MSForms, CheckBox"
Attribute VB_Control = "CheckBox24, 29, 25, MSForms, CheckBox"
Attribute VB_Control = "CheckBox25, 30, 26, MSForms, CheckBox"
Attribute VB_Control = "CheckBox26, 31, 27, MSForms, CheckBox"
Attribute VB_Control = "CheckBox27, 32, 28, MSForms, CheckBox"
Attribute VB_Control = "CheckBox28, 33, 29, MSForms, CheckBox"
Attribute VB_Control = "CheckBox29, 34, 30, MSForms, CheckBox"
Attribute VB_Control = "CheckBox30, 35, 31, MSForms, CheckBox"
Attribute VB_Control = "CheckBox31, 36, 32, MSForms, CheckBox"
Attribute VB_Control = "CheckBox32, 37, 33, MSForms, CheckBox"
Attribute VB_Control = "CheckBox33, 38, 34, MSForms, CheckBox"
Attribute VB_Control = "CheckBox34, 39, 35, MSForms, CheckBox"
Attribute VB_Control = "CheckBox35, 40, 36, MSForms, CheckBox"
Attribute VB_Control = "CheckBox36, 41, 37, MSForms, CheckBox"
Attribute VB_Control = "CheckBox37, 42, 38, MSForms, CheckBox"
Attribute VB_Control = "CheckBox38, 43, 39, MSForms, CheckBox"
Attribute VB_Control = "CheckBox39, 44, 40, MSForms, CheckBox"
Attribute VB_Control = "CheckBox40, 45, 41, MSForms, CheckBox"
Attribute VB_Control = "CheckBox41, 46, 42, MSForms, CheckBox"
Attribute VB_Control = "CheckBox42, 48, 43, MSForms, CheckBox"
Attribute VB_Control = "CheckBox43, 49, 44, MSForms, CheckBox"
Attribute VB_Control = "CheckBox44, 50, 45, MSForms, CheckBox"
Attribute VB_Control = "CheckBox45, 51, 46, MSForms, CheckBox"
Attribute VB_Control = "CheckBox46, 52, 47, MSForms, CheckBox"
Attribute VB_Control = "CheckBox47, 53, 48, MSForms, CheckBox"
Attribute VB_Control = "CheckBox48, 54, 49, MSForms, CheckBox"
Attribute VB_Control = "OptimiserRendementPF, 72, 50, MSForms, CommandButton"


Private Sub SwitchEtat(iValeur As Integer)
  If Cells(iValeur + 1, 1).Value = "N" Then Cells(iValeur + 1, 1).Value = "" Else Cells(iValeur + 1, 1).Value = "N"
End Sub

Private Sub CheckBox1_Click()
  SwitchEtat (1)
End Sub

Private Sub CheckBox10_Click()
  SwitchEtat (10)
End Sub

Private Sub CheckBox11_Click()
  SwitchEtat (11)
End Sub

Private Sub CheckBox12_Click()
  SwitchEtat (12)
End Sub

Private Sub CheckBox13_Click()
  SwitchEtat (13)
End Sub

Private Sub CheckBox14_Click()
  SwitchEtat (14)
End Sub

Private Sub CheckBox15_Click()
  SwitchEtat (15)
End Sub

Private Sub CheckBox16_Click()
  SwitchEtat (16)
End Sub

Private Sub CheckBox17_Click()
  SwitchEtat (17)
End Sub

Private Sub CheckBox18_Click()
  SwitchEtat (18)
End Sub

Private Sub CheckBox19_Click()
  SwitchEtat (19)
End Sub

Private Sub CheckBox2_Click()
  SwitchEtat (2)
End Sub

Private Sub CheckBox20_Click()
  SwitchEtat (20)
End Sub

Private Sub CheckBox21_Click()
  SwitchEtat (21)
End Sub

Private Sub CheckBox22_Click()
  SwitchEtat (22)
End Sub

Private Sub CheckBox23_Click()
  SwitchEtat (23)
End Sub

Private Sub CheckBox24_Click()
  SwitchEtat (24)
End Sub

Private Sub CheckBox25_Click()
  SwitchEtat (25)
End Sub

Private Sub CheckBox26_Click()
  SwitchEtat (26)
End Sub

Private Sub CheckBox27_Click()
  SwitchEtat (27)
End Sub

Private Sub CheckBox28_Click()
  SwitchEtat (28)
End Sub

Private Sub CheckBox29_Click()
  SwitchEtat (29)
End Sub

Private Sub CheckBox3_Click()
  SwitchEtat (3)
End Sub

Private Sub CheckBox30_Click()
  SwitchEtat (30)
End Sub

Private Sub CheckBox31_Click()
  SwitchEtat (31)
End Sub

Private Sub CheckBox32_Click()
  SwitchEtat (32)
End Sub

Private Sub CheckBox33_Click()
  SwitchEtat (33)
End Sub

Private Sub CheckBox34_Click()
  SwitchEtat (34)
End Sub

Private Sub CheckBox35_Click()
  SwitchEtat (35)
End Sub

Private Sub CheckBox36_Click()
  SwitchEtat (36)
End Sub

Private Sub CheckBox37_Click()
  SwitchEtat (37)
End Sub

Private Sub CheckBox38_Click()
  SwitchEtat (38)
End Sub

Private Sub CheckBox39_Click()
  SwitchEtat (39)
End Sub

Private Sub CheckBox4_Click()
  SwitchEtat (4)
End Sub

Private Sub CheckBox40_Click()
  SwitchEtat (40)
End Sub

Private Sub CheckBox41_Click()
SwitchEtat (41)
End Sub

Private Sub CheckBox42_Click()
SwitchEtat (42)
End Sub

Private Sub CheckBox43_Click()
SwitchEtat (43)
End Sub

Private Sub CheckBox44_Click()
SwitchEtat (44)
End Sub

Private Sub CheckBox45_Click()
SwitchEtat (45)
End Sub

Private Sub CheckBox46_Click()
SwitchEtat (46)
End Sub

Private Sub CheckBox47_Click()
SwitchEtat (47)
End Sub

Private Sub CheckBox48_Click()
SwitchEtat (48)
End Sub

Private Sub CheckBox5_Click()
  SwitchEtat (5)
End Sub

Private Sub CheckBox6_Click()
  SwitchEtat (6)
End Sub

Private Sub CheckBox7_Click()
  SwitchEtat (7)
End Sub

Private Sub CheckBox8_Click()
  SwitchEtat (8)
End Sub

Private Sub CheckBox9_Click()
  SwitchEtat (9)
End Sub

Private Sub FrontiereEfficiente_Click()
  Call TracerFrontiereEfficiente
End Sub

Private Sub OptimiserVolPF_Click()
  Call OptimiseVolPF
  SolverSolve UserFinish:=True
End Sub

Private Sub OptimiserRendementPF_Click()
  Call OptimiseRendementPF
  SolverSolve UserFinish:=True
End Sub

Attribute VB_Name = "Feuil2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Feuil3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Feuil4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CalculeMatriceVarCovar, 1, 0, MSForms, CommandButton"


Option Explicit

Private Sub CalculeMatriceVarCovar_Click()
' ----- On active la feuille qui va bien -----
Worksheets("VarCovar").Activate
' ----- On calcule la matrice -----
CreeMatriceVarCovar
MsgBox ("Calcul de la matrice de variances/covariances termin|fffd|.")
End Sub

Attribute VB_Name = "Optimisation"
'****************************************************************************
'*                         Module Optimisation                              *
'****************************************************************************
'*                                                                          *
'* DESCRIPTION........ : Module comprenant les fonctions necessaires |fffd|      *
'*                       l'optimisation d'un portefeuille, ainsi qu'au      *
'*                       trac|fffd| de la fronti|fffd|re efficiente.                  *
'*                                                                          *
'* AUTEUR............. : "La Bourse pour les nains"                         *
'*                       http://wwww.bnains.org/                            *
'*                                                                          *
'* DATE DE CREATION... : 2000                                               *
'*                                                                          *
'* FONCTIONS EXPORTEES :                                                    *
'*   Neant.                                                                 *
'*                                                                          *
'* MACROS EXPORTEES... :                                                    *
'*   OptimiseVolPF()                                                        *
'*     Cherche la composition de portefeuille permettant d'obtenir la       *
'*     volatilit|fffd| la plus faible pour un rendement donn|fffd|.                   *
'*   OptimiseRendementPF()                                                  *
'*     Cherche la composition de portefeuille permettant d'obtenir le       *
'*     rendement le plus |fffd|lev|fffd| pour une volatilit|fffd| donn|fffd|e.                  *
'*   TracerFrontiereEfficiente()                                            *
'*     Pour une liste de rendements donn|fffd|e, cherche les volatilit|fffd|s les     *
'*     plus faibles de mani|fffd|re |fffd| produire une liste de couples (rendement,  *
'*     volatilit|fffd|) permettant de tracer la fronti|fffd|re efficiente d'une liste *
'*     de valeurs.                                                          *
'*                                                                          *
'****************************************************************************
'* MODIFIE LE ../../.... PAR ......................                         *
'* DESCRIPTION DE LA MODIFICATION :                                         *
'*                                                                          *
'****************************************************************************
Const iNbTitres = 48
Const szCelluleMaximumParLigne = "$E$56"
Const szCelluleMinimumParLigne = "$E$55"
Const szCelluleObjectifRendement = "$E$52"
Const szCelluleRendementCalcule = "C51"
Const szCelluleSommePoidsValeurs = "C50"
Const szCelluleVariance = "C52"
Const szCelluleObjectifEcartType = "E53"
Const szCelluleEcartTypeAnnuelCalcule = "C54"



'****************************************************************************
'*                            Macro OptimiseVolPF                           *
'****************************************************************************
'*                                                                          *
'* DESCRIPTION : cherche les proportions de valeur permettant d'obtenir la  *
'*               variance la plus petite pour le rendement donn|fffd|.           *
'*                                                                          *
'* ENTREE..... : indirectement, liste des valeurs, minimum et maximum de    *
'*               proportion dans le portefeuille et rendement souhaite.     *
'*                                                                          *
'* SORTIE..... : indirectement, la variance calcul|fffd|e.                       *
'*                                                                          *
'* RETOUR..... : Neant.                                                     *
'*                                                                          *
'****************************************************************************
Public Sub OptimiseVolPF()

'************************************************************************
'* On programme le solveur pour minimiser la variance en jouant sur les *
'* proportions des valeurs                                              *
'************************************************************************

' ----- Pr|fffd|paration de l'environnement de travail -----
' On se positionne dans la bonne feuille
Worksheets("Portefeuille").Activate
' Et dans la bonne cellule (pour |fffd|viter un bug du solver avec certaines versions d'Excel)
Range(szCelluleVariance).Select
' Reset du solveur
SolverReset
' On met toutes les proportions de valeur |fffd| 0
For iValeur = 2 To iNbTitres + 1
  Cells(iValeur, 3).Value = 0
Next iValeur
' Objectif : Minimiser la variance en faisant varier les proportions des valeurs
SolverOk szCelluleVariance, maxMinVal:=2, byChange:=Range("C2:C49")

' ----- On cree les contraintes -----
'Somme des poids des valeurs = 1 (soit 100%)
SolverAdd cellRef:=szCelluleSommePoidsValeurs, relation:=2, formulaText:=1
' Valeurs interdites (toutes les valeurs non coch|fffd|es)
For iValeur = 2 To iNbTitres + 1
  If Cells(iValeur, 1).Value = "N" Then
    SolverAdd Cells(iValeur, 3), relation:=2, formulaText:=0
  Else
    SolverAdd Cells(iValeur, 3), relation:=1, formulaText:=szCelluleMaximumParLigne
    SolverAdd Cells(iValeur, 3), relation:=3, formulaText:=szCelluleMinimumParLigne
  End If
Next iValeur
'Rendement attendu = celui demand|fffd|
SolverAdd cellRef:=szCelluleRendementCalcule, relation:=2, formulaText:=szCelluleObjectifRendement

' ----- On indique maintenant au solveur qu'il doit bosser... -----
SolverSolve (True)

SolverFinish

End Sub



'****************************************************************************
'*                         Macro OptimiseRendementPF                        *
'****************************************************************************
'*                                                                          *
'* DESCRIPTION : cherche les proportions de valeur permettant d'obtenir le  *
'*               rendement le plus |fffd|lev|fffd| pour la variance donn|fffd|e.           *
'*                                                                          *
'* ENTREE..... : indirectement, liste des valeurs, minimum et maximum de    *
'*               proportion dans le portefeuille et variance souhait|fffd|e.     *
'*                                                                          *
'* SORTIE..... : indirectement, la rendement calcul|fffd|.                       *
'*                                                                          *
'* RETOUR..... : Neant.                                                     *
'*                                                                          *
'****************************************************************************
Public Sub OptimiseRendementPF()

' ----- Pr|fffd|paration de l'environnement de travail -----
' On se positionne dans la bonne feuille
Worksheets("Portefeuille").Activate
' Et dans la bonne cellule (pour |fffd|viter un bug du solver avec certaines versions d'Excel)
Range(szCelluleVariance).Select
' Reset du solveur
SolverReset
' On met toutes les proportions de valeur |fffd| 0
For iValeur = 1 To iNbTitres
  Cells(iValeur, 3).Value = 0
Next iValeur
' Objectif : Maximiser le rendement en faisant varier les proportions des valeurs
SolverOk szCelluleRendementCalcule, maxMinVal:=1, byChange:=Range("C2:C49")

' ----- On cree les contraintes -----
'Somme des poids des valeurs = 1 (soit 100%)
SolverAdd cellRef:=szCelluleSommePoidsValeurs, relation:=2, formulaText:=1

' Valeurs interdites (toutes les valeurs non coch|fffd|es)
For iValeur = 2 To iNbTitres + 1
  If Cells(iValeur, 1).Value = "N" Then
    SolvAdd Cells(iValeur, 3), relation:=2, formulaText:=0
  Else
    SolverAdd Cells(iValeur, 3), relation:=1, formulaText:=szCelluleMaximumParLigne
    SolverAdd Cells(iValeur, 3), relation:=3, formulaText:=szCelluleMinimumParLigne
  End If
Next iValeur
'Volatilit|fffd| attendue = celle demand|fffd|e
SolverAdd cellRef:=szCelluleEcartTypeAnnuelCalcule, relation:=2, formulaText:=szCelluleObjectifEcartType

' ----- On indique maintenant au solveur qu'il doit bosser... -----
SolverSolve (True)

SolverFinish

End Sub



'****************************************************************************
'*                       Macro TracerFrontiereEfficiente                    *
'****************************************************************************
'*                                                                          *
'* DESCRIPTION : cherche la variance la plus petite pour une liste de       *
'*               rendements donn|fffd|s.                                         *
'*                                                                          *
'* ENTREE..... : indirectement, liste des valeurs, minimum et maximum de    *
'*               proportion dans le portefeuille et liste des rendements    *
'*               souhait|fffd|s.                                                 *
'*                                                                          *
'* SORTIE..... : indirectement, les couples (rendement,variance) calcul|fffd|s.  *
'*                                                                          *
'* RETOUR..... : Neant.                                                     *
'*                                                                          *
'****************************************************************************
Public Sub TracerFrontiereEfficiente()

  Const COLONNE_RENDEMENTS_SOUHAITES = 13
 
  '****************************************************************
  '* Maintenant, on va it|fffd|rer pour tracer la fronti|fffd|re efficiente *
  '****************************************************************
  bMax = False
  i = 2
  j = COLONNE_RENDEMENTS_SOUHAITES
  Do While (Not (IsEmpty(Cells(i, j))) And bMax = False)
    ' On fixe le rendement souhaite
    Cells(52, 5).Value = Cells(i, j)
    ' On optimise la variance en consequence
    Call OptimiseVolPF
    ' On recupere le rendement
    Cells(i, j + 1).Value = Cells(51, 3)
    ' On recupere la variance annuelle
    Cells(i, j + 2).Value = Cells(54, 3)
    i = i + 1
    ' Si on n'est pas parvenu a ameliorer, alors on arrete
    If i > 3 And Cells(i - 2, j + 1).Value = Cells(i - 1, j + 1).Value Then bMax = True
  Loop
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Utilitaires"
'****************************************************************************
'*                         Module Utilitaires                               *
'****************************************************************************
'*                                                                          *
'* DESCRIPTION........ : Module comprenant les fonctions necessaires au     *
'*                       traitement des donnees sources pour creer la       *
'*                       matrice de variances/covariances et les            *
'*                       differentes donnees necessaires au calcul d'un     *
'*                       portefeuille efficient.                            *
'*                                                                          *
'* AUTEUR............. : "La Bourse pour les nains"                         *
'*                       http://wwww.bnains.org/                            *
'*                                                                          *
'* DATE DE CREATION... : 2000                                               *
'*                                                                          *
'* FONCTIONS EXPORTEES :                                                    *
'*   CalculeMoyenneGeometrique()                                            *
'*     Permet de calculer une moyenne g|fffd|om|fffd|trique depuis des pourcentages   *
'*     pouvant |fffd|tre n|fffd|gatifs.                                               *
'*                                                                          *
'* MACROS EXPORTEES... :                                                    *
'*   CreeMatriceVarCovar()                                                  *
'*     Cree une matrice de variances/covariances dans la feuille "VarCovar" *
'*     en fonction des donn|fffd|es de la feuille "Donn|fffd|es".                     *
'*                                                                          *
'****************************************************************************
'* MODIFIE LE ../../.... PAR ......................                         *
'* DESCRIPTION DE LA MODIFICATION :                                         *
'*                                                                          *
'****************************************************************************



'****************************************************************************
'*                     Fonction CalculeMoyenneGeometrique                   *
'****************************************************************************
'*                                                                          *
'* DESCRIPTION : calcule la moyenne geometrique d'une suite de pourcentages.*
'*                                                                          *
'* ENTREE..... : Les pourcentages en question.                              *
'*                                                                          *
'* SORTIE..... : Neant.                                                     *
'*                                                                          *
'* RETOUR..... : La moyenne geometrique calculee.                           *
'*                                                                          *
'****************************************************************************
Function CalculeMoyenneGeometrique(r As Range) As Double

  Dim dblValeurs(1000) As Double
  
  If (r.Count > 1000) Then
    Error (2042)
    Exit Function
  End If
  
  i = 0
  For Each c In r
    dblValeurs(i) = c.Value + 1
    i = i + 1
  Next c
  
  '----- Moyenne geometrique -----
  dblTotal = dblValeurs(0)
  For i = 1 To r.Count - 1
    dblTotal = dblTotal * dblValeurs(i)
  Next i
  
  dblTotal = dblTotal ^ (1 / r.Count)
  
  CalculeMoyenneGeometrique = dblTotal - 1
End Function



'****************************************************************************
'*                     Macro CreeMatriceVarCovar                            *
'****************************************************************************
'*                                                                          *
'* DESCRIPTION : cree une matrice de variances/covariances a partir des     *
'*               donnees de la feuille 'Donn|fffd|es'. Les valeurs dont le       *
'*               nombre de periodes est inf|fffd|rieur a 36 sont affichees sur   *
'*               fond rouge pour signifier leur manque de maturite.         *
'*                                                                          *
'* ENTREE..... : Indirectement les rendements de toutes les periodes de     *
'*               de toutes les valeurs de la feuille 'Donn|fffd|es'.             *
'*                                                                          *
'* SORTIE..... : Feuille 'VarCovar' remplie.                                *
'*                                                                          *
'* RETOUR..... : Neant.                                                     *
'*                                                                          *
'****************************************************************************
Sub CreeMatriceVarCovar()

'----- Constantes -----
Const LIGNE_TITRE_DONNEES = 1
Const PREMIERE_COLONNE_SRC = 3
Const PREMIERE_LIGNE_SRC = 4
Const PREMIERE_COLONNE_DEST = 2
Const PREMIERE_LIGNE_DEST = 5
Const NB_DATAS_MINI = 36

Const COLONNE_NOM_VALEURS_PF = 2
Const PREMIERE_LIGNE_DEST_PF = 2
Const COLONNE_VOLATILITE_VALEURS_PF = 5
Const COLONNE_RENDEMENT_VALEURS_PF = 4

'----- Variables -----
iLigSrc = PREMIERE_LIGNE_SRC
iColSrc = PREMIERE_COLONNE_SRC
iLigDest = PREMIERE_LIGNE_DEST
iColDest = PREMIERE_COLONNE_DEST
iNbSeries = 0     ' Nombre de series de donnees
Dim iTabLigDeb(200, 2) As Integer

' ----- On cherche le nombre de series -----
While (Not IsEmpty(Worksheets("Donn|fffd|es").Cells(LIGNE_TITRE_DONNEES, iColSrc - 1)))
  iNbSeries = iNbSeries + 1
  iColSrc = iColSrc + 2
Wend
iColSrc = PREMIERE_COLONNE_SRC

' ----- Pour chaque serie de donnees, on va stocker le debut et la fin -----
For i = PREMIERE_COLONNE_SRC To PREMIERE_COLONNE_SRC + (iNbSeries - 1) * 2 Step 2
  iLigSrc = PREMIERE_LIGNE_SRC
  While (IsEmpty(Worksheets("Donn|fffd|es").Cells(iLigSrc, i)))
    iLigSrc = iLigSrc + 1
  Wend
  iTabLigDeb((i - PREMIERE_COLONNE_SRC) / 2, 0) = iLigSrc
  While (Not IsEmpty(Worksheets("Donn|fffd|es").Cells(iLigSrc, i)))
    iLigSrc = iLigSrc + 1
  Wend
  iTabLigDeb((i - PREMIERE_COLONNE_SRC) / 2, 1) = iLigSrc - 1
Next

' ----- On va generer la matrice de variance/covariance -----
iLigSrc = PREMIERE_LIGNE_SRC
iColSrc = PREMIERE_COLONNE_SRC
For i = 0 To iNbSeries - 1
  iColDest = PREMIERE_COLONNE_DEST + i
  
  ' Nom valeur
  Worksheets("VarCovar").Cells(PREMIERE_LIGNE_DEST, iColDest).Formula = "=Donn|fffd|es!" + _
    Worksheets("Donn|fffd|es").Cells(iLigSrc - 3, i * 2 + PREMIERE_COLONNE_SRC - 1).Address
  Worksheets("VarCovar").Cells(PREMIERE_LIGNE_DEST + iColDest - PREMIERE_COLONNE_DEST + 1, _
    PREMIERE_COLONNE_DEST - 1).Formula = "=Donn|fffd|es!" + _
    Worksheets("Donn|fffd|es").Cells(iLigSrc - 3, i * 2 + PREMIERE_COLONNE_SRC - 1).Address
  If (iTabLigDeb(i, 1) - iTabLigDeb(i, 0) < NB_DATAS_MINI) Then
    ' On met le fond en rouge
    Worksheets("VarCovar").Cells(PREMIERE_LIGNE_DEST, iColDest).Interior.Color = RGB(255, 0, 0)
    Worksheets("VarCovar").Cells(PREMIERE_LIGNE_DEST + iColDest - PREMIERE_COLONNE_DEST + 1, PREMIERE_COLONNE_DEST - 1).Interior.Color = RGB(255, 0, 0)
  End If
  
  ' Variance
  Worksheets("VarCovar").Cells(iLigDest + 1, iColDest).Formula = "=VARP(Donn|fffd|es!" + _
    Worksheets("Donn|fffd|es").Cells(iTabLigDeb(i, 0), i * 2 + PREMIERE_COLONNE_SRC).Address + ":" + _
    Worksheets("Donn|fffd|es").Cells(iTabLigDeb(i, 1), i * 2 + PREMIERE_COLONNE_SRC).Address + ")"
  Worksheets("VarCovar").Cells(iLigDest + 1, iColDest).Interior.Color = RGB(255, 255, 128)
  
  If (iTabLigDeb(i, 0) > iTabLigDeb(j, 0)) Then iLigneDeb = iTabLigDeb(i, 0) Else iLigneDeb = iTabLigDeb(j, 0)
  If (iTabLigDeb(i, 1) > iTabLigDeb(j, 1)) Then iLigneFin = iTabLigDeb(i, 1) Else iLigneFin = iTabLigDeb(j, 1)
  Set plage1 = Range(Worksheets("Donn|fffd|es").Cells(iLigneDeb, i * 2 + PREMIERE_COLONNE_SRC), Worksheets("Donn|fffd|es").Cells(iLigneFin, i * 2 + PREMIERE_COLONNE_SRC))
  
  'Covariances
  For j = i + 1 To iNbSeries - 1
    iColDest = iColDest + 1
    Set plage2 = Range(Worksheets("Donn|fffd|es").Cells(iLigneDeb, j * 2 + PREMIERE_COLONNE_SRC), Worksheets("Donn|fffd|es").Cells(iLigneFin, j * 2 + PREMIERE_COLONNE_SRC))
    If (iLigneFin - iLigneDeb < NB_DATAS_MINI) Then lColorTexte = RGB(128, 128, 128) Else lColorTexte = RGB(0, 0, 0)
    'szFormule = "=Covar{Donn|fffd|es!" + _
    'Worksheets("Donn|fffd|es").Cells(iTabLigDeb(i, 0), i * 2 + PREMIERE_COLONNE_SRC).Address + ":" + _
    'Worksheets("Donn|fffd|es").Cells(iTabLigDeb(i, 1), i * 2 + PREMIERE_COLONNE_SRC).Address + _
    '";Donn|fffd|es!" + _
    'Worksheets("Donn|fffd|es").Cells(iTabLigDeb(j, 0), j * 2 + PREMIERE_COLONNE_SRC).Address + ":" + _
    'Worksheets("Donn|fffd|es").Cells(iTabLigDeb(j, 1), j * 2 + PREMIERE_COLONNE_SRC).Address + "}"
    
    'Worksheets("VarCovar").Cells(iLigDest + 1, iColDest).Formula = "COVAR(G1:G2;H1:H2)"
    Worksheets("VarCovar").Cells(iLigDest + 1, iColDest).Value = Application.WorksheetFunction.Covar(plage1, plage2)
    Worksheets("VarCovar").Cells(iLigDest + 1, iColDest).Interior.Color = RGB(255, 255, 255)
    Worksheets("VarCovar").Cells(iLigDest + 1, iColDest).Font.Color = lColorTexte
    
    '-----Seconde partie de la matrice-----
    Worksheets("VarCovar").Cells(PREMIERE_LIGNE_DEST + iColDest - PREMIERE_COLONNE_DEST + 1, _
      PREMIERE_COLONNE_DEST + iLigDest - PREMIERE_LIGNE_DEST).Formula = "=" + Worksheets("VarCovar").Cells(iLigDest + 1, iColDest).Address
    Worksheets("VarCovar").Cells(PREMIERE_LIGNE_DEST + iColDest - PREMIERE_COLONNE_DEST + 1, _
      PREMIERE_COLONNE_DEST + iLigDest - PREMIERE_LIGNE_DEST).Interior.Color = RGB(200, 200, 200)
    Worksheets("VarCovar").Cells(PREMIERE_LIGNE_DEST + iColDest - PREMIERE_COLONNE_DEST + 1, _
      PREMIERE_COLONNE_DEST + iLigDest - PREMIERE_LIGNE_DEST).Font.Color = lColorTexte
  Next j
  iLigDest = iLigDest + 1

  '-----------------------------------------------------------------------------
  ' On va recopier les noms des valeurs dans la seconde colonne du portefeuille
  '-----------------------------------------------------------------------------
  ' ----- Nom valeur -----
  Worksheets("Portefeuille").Cells(PREMIERE_LIGNE_DEST_PF + i, COLONNE_NOM_VALEURS_PF).Formula = "=Donn|fffd|es!" + _
    Worksheets("Donn|fffd|es").Cells(iLigSrc - 3, i * 2 + PREMIERE_COLONNE_SRC - 1).Address
  If (iTabLigDeb(i, 1) - iTabLigDeb(i, 0) < NB_DATAS_MINI) Then
    ' On met le fond en rouge
    Worksheets("Portefeuille").Cells(PREMIERE_LIGNE_DEST_PF + i, COLONNE_NOM_VALEURS_PF).Interior.Color = RGB(255, 0, 0)
  Else
    Worksheets("Portefeuille").Cells(PREMIERE_LIGNE_DEST_PF + i, COLONNE_NOM_VALEURS_PF).Interior.ColorIndex = xlColorIndexNone
  End If
  
  ' ----- Rendements historiques -----
  'Set r = Range(Worksheets("Donn|fffd|es").Cells(iLigneDeb, i * 2 + PREMIERE_COLONNE_SRC).Address, Worksheets("Donn|fffd|es").Cells(iLigneFin, i * 2 + PREMIERE_COLONNE_SRC).Address)
  'dblReturn = CalculeMoyenneGeometrique(&r)
  
  'Worksheets("Portefeuille").Cells(PREMIERE_LIGNE_DEST_PF + i, COLONNE_RENDEMENT_VALEURS_PF).Formula = "=(1+CalculeMoyenneGeometrique(Donn|fffd|es!" + _
  '  Worksheets("Donn|fffd|es").Cells(iLigneDeb, i * 2 + PREMIERE_COLONNE_SRC).Address + ":" + _
  '  Worksheets("Donn|fffd|es").Cells(iLigneFin, i * 2 + PREMIERE_COLONNE_SRC).Address + "))^12-1"
  Worksheets("Portefeuille").Cells(PREMIERE_LIGNE_DEST_PF + i, COLONNE_RENDEMENT_VALEURS_PF).Formula = "=(Donn|fffd|es!" + Worksheets("Donn|fffd|es").Cells(iLigneFin + 2, i * 2 + PREMIERE_COLONNE_SRC).Address + ")^12-1"

  ' ----- Volatilit|fffd| mensuelle -----
  Worksheets("Portefeuille").Cells(PREMIERE_LIGNE_DEST_PF + i, COLONNE_VOLATILITE_VALEURS_PF).Formula = "=StDevP(Donn|fffd|es!" + _
    Worksheets("Donn|fffd|es").Cells(iLigneDeb, i * 2 + PREMIERE_COLONNE_SRC).Address + ":" + _
    Worksheets("Donn|fffd|es").Cells(iLigneFin, i * 2 + PREMIERE_COLONNE_SRC).Address + ")"

  ' ----- Beta -----
  'Worksheets("Portefeuille").Cells(PREMIERE_LIGNE_DEST_PF + i, COLONNE_BETA_VALEURS_PF).Formula = "=StDevP(Donn|fffd|es!" + _
  '  Worksheets("Donn|fffd|es").Cells(iLigneDeb, i * 2 + PREMIERE_COLONNE_SRC).Address + ":" + _
  '  Worksheets("Donn|fffd|es").Cells(iLigneFin, i * 2 + PREMIERE_COLONNE_SRC).Address + ")"
  
Next i

End Sub





INQUEST-PP=macro
