Attribute VB_Name = "AddInMisc"
' Original code initially contained clsApppEventsHandler and support methods, but these were
'  methods contained non-functioning code so it was removed by Don Judd on 9/11/2003. Jim thinks it was for
'  Joh Groesbeck, but Don Judd will review this next year for the next release to see what was going on.
'
' Updated by Don Judd in March 2003: Added sDecrypt, sEncrypt, bGetMyDocPathVB, sGetDocPathVB, sRemoveNull,
'  nMsgBoxEx and vntNullToEmpty
'
' Updated by Don Judd 9/10/2003 to permit silent retrieval of data from an external spreadsheet.
'  This is required because activation to another worksheet causes the security to activate. Added
'  sGetBasePathName, sGetBasePath, sGetBaseDrive, sGetBaseFileName, vntSilentGetXLLinkFormula, vntSilentGetXLLinkFormula2,
'  bFileExists, vntSilentGetXLValue and vntSilentGetXLValue2.
'

Option Explicit
#If VBA7 Then
Private Declare PtrSafe Sub Decrypt Lib "PPCommon" (ByVal sValue As String)
Private Declare PtrSafe Sub Encrypt Lib "PPCommon" (ByVal sValue As String)
Private Declare PtrSafe Function bGetMyDocPath Lib "PPCommon" (ByVal hwndOwner As Long, ByVal sRetValue As String) As Long
Private Declare PtrSafe Function bIsEncrypted Lib "PPCommon" (ByVal sValue As String) As Long
#Else
Private Declare Sub Decrypt Lib "PPCommon" (ByVal sValue As String)
Private Declare Sub Encrypt Lib "PPCommon" (ByVal sValue As String)
Private Declare Function bGetMyDocPath Lib "PPCommon" (ByVal hwndOwner As Long, ByVal sRetValue As String) As Long
Private Declare Function bIsEncrypted Lib "PPCommon" (ByVal sValue As String) As Long
#End If

Public Function sDecrypt(vntValue As Variant) As String
  sDecrypt = ""                                 ' default
  If Len(vntNullToEmpty(vntValue)) Then
    sDecrypt = vntValue & Chr$(0)
    If bIsEncrypted(sDecrypt) Then
      Decrypt sDecrypt
    End If
    sDecrypt = sRemoveNull(sDecrypt)
  End If
End Function

Public Function sEncrypt(vntValue As Variant, Optional vntIsTruncated As Variant) As String
  sEncrypt = ""                                 ' default
  If Len(vntNullToEmpty(vntValue)) Then
    sEncrypt = UCase$(Left$(vntValue, 11)) & Chr$(0)
    If Not IsMissing(vntIsTruncated) Then
      vntIsTruncated = IIf(Left$(vntValue, 11) = vntValue, False, True)
    End If
    If Not bIsEncrypted(sEncrypt) Then
      sEncrypt = sEncrypt & Chr$(0)
      Encrypt sEncrypt
    End If
    sEncrypt = sRemoveNull(sEncrypt)
  End If
End Function

Public Function bGetMyDocPathVB(sPath As String, Optional vntAppend As Variant) As Boolean
  On Error GoTo GMDPVBErr
  
  sPath = Space$(1024)                          ' reserve space for the dll call
  bGetMyDocPathVB = bGetMyDocPath(0, sPath)
  If bGetMyDocPathVB Then
    sPath = sGetDocPathVB(sPath, vntAppend)
  End If
  
  On Error GoTo 0
  Exit Function
  
GMDPVBErr:
  sPath = ""
  bGetMyDocPathVB = True
  On Error GoTo 0
End Function

Public Function sGetDocPathVB(sPath As String, Optional vntAppend As Variant) As String
  sGetDocPathVB = sRemoveNull(sPath)
  If Not IsMissing(vntAppend) Then
    Dim sAppend As String
  
    If Right$(sGetDocPathVB, 1) = "\" Then
      sGetDocPathVB = Left$(sGetDocPathVB, Len(sGetDocPathVB) - 1)
    End If
    sAppend = vntAppend
    If Left$(sAppend, 1) = "\" Then
      sAppend = Right$(sAppend, Len(sAppend) - 1)
    End If
    sGetDocPathVB = sGetDocPathVB & "\" & sAppend
  End If
End Function

Public Function nMsgBoxEx(sPrompt As String, Optional vntButtons As Variant, Optional vntTitle As Variant, Optional vntAppendTitle As Variant) As VbMsgBoxResult
  Dim nButtons As Integer
  Dim sTitle As String
  
  If IsMissing(vntButtons) Then
    nButtons = vbApplicationModal
  Else
    nButtons = vbApplicationModal Or vntButtons
  End If
  
  If IsMissing(vntTitle) Then
    sTitle = ThisWorkbook.Name
  Else
    sTitle = vntTitle
  End If
  
  If Not IsMissing(vntAppendTitle) Then
    sTitle = sTitle & ":  " & vntAppendTitle
  End If
  
  If ThisWorkbook.UserControl Then
    nMsgBoxEx = MsgBox(sPrompt, nButtons, sTitle)
  End If
End Function

Public Function vntNullToEmpty(vntValue As Variant) As Variant
  If IsNull(vntValue) Then
    vntNullToEmpty = ""
  Else
    vntNullToEmpty = vntValue
  End If
End Function

Public Function sGetBasePathName(sFilename As String) As String
  sGetBasePathName = Left$(sFilename, Len(sFilename) - 3)
End Function

Public Function sGetBasePath(sFilename As String) As String
  Dim nIndex As Integer

  nIndex = InStrRev(sFilename, ".")
  If nIndex Then
    Do While True
      If Mid$(sFilename, nIndex, 1) = "\" Then Exit Do
      nIndex = nIndex - 1
      If nIndex = 0 Then Exit Do
    Loop

    If nIndex = 0 Then
      sGetBasePath = sFilename
    ElseIf Mid$(sFilename, nIndex - 1, 1) = ":" Then
      sGetBasePath = Left$(sFilename, nIndex)
    Else
      sGetBasePath = Left$(sFilename, nIndex - 1)
    End If
  Else
    sGetBasePath = sFilename
  End If
End Function

Public Function sGetBaseDrive(ByVal sPathname As String) As String
  If Left$(sPathname, 2) = "\\" Then
    Dim nIndex As Integer
    
    nIndex = InStr(3, sPathname, "\") + 1
    nIndex = InStr(nIndex, sPathname, "\")
    sGetBaseDrive = Left$(sPathname, nIndex)     ' get UNC
  ElseIf Mid$(sPathname, 2, 1) = ":" Then
    sGetBaseDrive = sGetBasePath(sPathname)
  Else
    sGetBaseDrive = ""
  End If
End Function
 
Public Function sGetBaseFileName(sFilename As String, bStripExt As Boolean) As String
  If InStr(sFilename, ":") Or InStr(sFilename, "\") Then
    Dim sBasePath As String
    Dim nBPLen As Integer
    Dim nFNLen As Integer

    sBasePath = sGetBasePath(sFilename)

    nBPLen = Len(sBasePath)
    nFNLen = Len(sFilename) - 1
    nFNLen = nFNLen - nBPLen
    sGetBaseFileName = Right$(sFilename, nFNLen)
  Else
    sGetBaseFileName = sFilename
  End If

  If bStripExt <> False Then
    Dim nIndex As Integer

    nIndex = InStrRev(sGetBaseFileName, ".")
    If nIndex Then
      sGetBaseFileName = Left$(sGetBaseFileName, nIndex - 1)
    End If
  End If
End Function

Public Sub SilentLinkToExternalWorkbook(sSourceFilePathName As String, sSourceWSName As String, sSourceCellRef As String, sDestWSName As String, sDestCellRef As String)

  '
  ' If we are creating a link below, use a formula for this.
  '
  
  Worksheets(sDestWSName).Range(sDestCellRef).Formula = vntSilentGetXLLinkFormula(sSourceFilePathName, sSourceWSName, sSourceCellRef)
End Sub

Public Sub SilentGetValueFromExternalWorkbook(sSourceFilePathName As String, sSourceWSName As String, sSourceCellRef As String, sDestWSName As String, sDestCellRef As String)
  
  '
  ' To get the data call this.
  '
  
  Worksheets(sDestWSName).Range(sDestCellRef).Value = vntSilentGetXLValue(sSourceFilePathName, sSourceWSName, sSourceCellRef, False)
End Sub

Public Function vntSilentGetXLLinkFormula(sWBPathName As String, sWSName As String, sCellRef As String) As Variant
  Dim sWBPath As String
  Dim sWBName As String
    
  sWBPath = sGetBasePath(sWBPathName)
  sWBName = sGetBaseFileName(sWBPathName, False)
  vntSilentGetXLLinkFormula = vntSilentGetXLLinkFormula2(sWBPath, sWBName, sWSName, sCellRef)
End Function

Public Function vntSilentGetXLLinkFormula2(ByVal sWBPath As String, sWBName As String, sWSName As String, sCellRef As String) As Variant
  Dim sArg As String
  
  '
  ' VBA macro tip contributed by Erlandsen Data Consulting on www.exceltip.com
  '
  
  vntSilentGetXLLinkFormula2 = ""                     ' init default
  
  If Right$(sWBPath, 1) <> "\" Then
    sWBPath = sWBPath & "\"                     ' append trailing slash
  End If
  
  If bFileExists(sWBPath & sWBName) Then
    sArg = "'" & sWBPath & "[" & sWBName & "]" & sWSName & "'!" & Range(sCellRef).Address(True, True, xlR1C1)
    On Error Resume Next                        ' determine if the data is present below
    vntSilentGetXLLinkFormula2 = ExecuteExcel4Macro(sArg)
    If Err.Number Then
      vntSilentGetXLLinkFormula2 = ""                 ' will error if not present
    Else
      vntSilentGetXLLinkFormula2 = "='" & sWBPath & "[" & sWBName & "]" & sWSName & "'!" & Range(sCellRef).Address(True, True, xlA1)
    End If
    On Error GoTo 0
  End If
End Function

Public Function vntSilentGetXLValue(sWBPathName As String, sWSName As String, sCellRef As String, bPutInClipboard As Boolean) As Variant
  Dim sWBPath As String
  Dim sWBName As String
    
  sWBPath = sGetBasePath(sWBPathName)
  sWBName = sGetBaseFileName(sWBPathName, False)
  vntSilentGetXLValue = vntSilentGetXLValue2(sWBPath, sWBName, sWSName, sCellRef, bPutInClipboard)
End Function

Public Function vntSilentGetXLValue2(ByVal sWBPath As String, sWBName As String, sWSName As String, sCellRef As String, bPutInClipboard As Boolean) As Variant
  Dim sArg As String
  
  '
  ' VBA macro tip contributed by Erlandsen Data Consulting on www.exceltip.com
  '
  
  vntSilentGetXLValue2 = ""                           ' init default
  
  If Right$(sWBPath, 1) <> "\" Then
    sWBPath = sWBPath & "\"                     ' append trailing slash
  End If
  
  If bFileExists(sWBPath & sWBName) Then
    sArg = "'" & sWBPath & "[" & sWBName & "]" & sWSName & "'!" & Range(sCellRef).Address(True, True, xlR1C1)
    On Error Resume Next
    vntSilentGetXLValue2 = ExecuteExcel4Macro(sArg)
    If Err.Number Then vntSilentGetXLValue2 = ""
    On Error GoTo 0
    If bPutInClipboard Then
      Dim opjDO As DataObject
      Set opjDO = New DataObject
      opjDO.SetText vntSilentGetXLValue2
      opjDO.PutInClipboard
    End If
  End If
End Function

Public Function bFileExists(ByVal sFilename As String) As Boolean
  Dim nLen As Integer

  On Error Resume Next

  nLen = Len(sFilename)
  If Err.Number Or nLen = 0 Then
    bFileExists = False
  Else
    nLen = Len(Dir$(sFilename))
    If Err.Number Or nLen = 0 Then
      bFileExists = False
    Else
      bFileExists = True
    End If
  End If

  On Error GoTo 0
End Function

Attribute VB_Name = "Clear"
Sub Clear()
'
' Clear Macro
' Macro recorded 9/8/99 by Practitioners Publishing Company
'

'
Dim Msg, Style, TITLE, Response
Msg = "All input information will be cleared. Do you want to continue?"   ' Define message.
Style = vbOKCancel + vbQuestion + vbDefaultButton1 ' Define buttons.
TITLE = "PPC's e-Workpapers"  ' Define title.
Response = MsgBox(Msg, Style, TITLE)
If Response = vbCancel Then    ' User chose Cancel.
    GoTo Quit
End If
Application.ScreenUpdating = False
InputSheet.Select
Range("clear_input").ClearContents
Range("Balance_sheet_date").Value = "=PPC_GetBalanceSheetDate()"
Range("Client").Value = "=PPC_GetClientName()"
Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Client_Name") = "[Client Name]"
Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Engagement_Date") = ""
Application.ActiveWorkbook.ActiveSheet.EnableCalculation = False
Application.ActiveWorkbook.ActiveSheet.EnableCalculation = True
LinkInfo.Activate
Range("clear_link_info").ClearContents
Range("link_info").Select
InputSheet.Select
Range("input").Select
Application.ScreenUpdating = True
Exit Sub

Quit:
End Sub

Attribute VB_Name = "EditorialMacros"
Option Explicit

Public Sub InitForEditorial()
  '
  ' Code for editorial special setups that need to be called
  '  after saving or on worksheet initialization.
  '
End Sub

Public Sub Workbook_BeforeClose_Editorial()
  '
  ' Code for editorial special setups that need to be called
  '  before close.
  '
End Sub

Attribute VB_Name = "EditorialMacros_Deactivate"
Option Explicit

Public Sub Workbook_Deactivate_Editorial()
  '
  ' Code for editorial special setups that need to be called
  '  when leaving the workbook without closing it. This, will
  '  also run when closing workbook.
  '
End Sub

Attribute VB_Name = "FinancialStatementDisclosures"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    If ThisWorkbook.bIsSaving Then Exit Sub
    Application.ScreenUpdating = False
    If Range("total_debt1").Value <> "" Then
        Range("fs_format1").Select
        Selection.Borders(xlLeft).LineStyle = xlNone
        Selection.Borders(xlRight).LineStyle = xlNone
        Selection.Borders(xlBottom).LineStyle = xlNone
        With Selection.Borders(xlTop)
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        Selection.BorderAround LineStyle:=xlNone
        Range("total_debt1").Select
        Selection.Borders(xlLeft).LineStyle = xlNone
        Selection.Borders(xlRight).LineStyle = xlNone
        Selection.Borders(xlTop).LineStyle = xlNone
        With Selection.Borders(xlBottom)
            .LineStyle = xlDouble
            .ColorIndex = xlAutomatic
        End With
        Selection.BorderAround LineStyle:=xlNone
    Else
        Range("fs_format1").Select
        Selection.Borders(xlLeft).LineStyle = xlNone
        Selection.Borders(xlRight).LineStyle = xlNone
        Selection.Borders(xlBottom).LineStyle = xlNone
        Selection.Borders(xlTop).LineStyle = xlNone
        Selection.BorderAround LineStyle:=xlNone
        Range("total_debt1").Select
        Selection.Borders(xlLeft).LineStyle = xlNone
        Selection.Borders(xlRight).LineStyle = xlNone
        Selection.Borders(xlBottom).LineStyle = xlNone
        Selection.Borders(xlTop).LineStyle = xlNone
        Selection.BorderAround LineStyle:=xlNone
    End If

    If Range("total_debt2").Value <> "" Then
        Range("fs_format2").Select
        Selection.Borders(xlLeft).LineStyle = xlNone
        Selection.Borders(xlRight).LineStyle = xlNone
        Selection.Borders(xlBottom).LineStyle = xlNone
        With Selection.Borders(xlTop)
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        Selection.BorderAround LineStyle:=xlNone
        Range("total_debt2").Select
        Selection.Borders(xlLeft).LineStyle = xlNone
        Selection.Borders(xlRight).LineStyle = xlNone
        Selection.Borders(xlTop).LineStyle = xlNone
        With Selection.Borders(xlBottom)
            .LineStyle = xlDouble
            .ColorIndex = xlAutomatic
        End With
        Selection.BorderAround LineStyle:=xlNone
    Else
        Range("fs_format2").Select
        Selection.Borders(xlLeft).LineStyle = xlNone
        Selection.Borders(xlRight).LineStyle = xlNone
        Selection.Borders(xlBottom).LineStyle = xlNone
        Selection.Borders(xlTop).LineStyle = xlNone
        Selection.BorderAround LineStyle:=xlNone
        Range("total_debt2").Select
        Selection.Borders(xlLeft).LineStyle = xlNone
        Selection.Borders(xlRight).LineStyle = xlNone
        Selection.Borders(xlBottom).LineStyle = xlNone
        Selection.Borders(xlTop).LineStyle = xlNone
        Selection.BorderAround LineStyle:=xlNone
    End If
    Range("filter_fs_disclosures").AdvancedFilter Action:=xlFilterInPlace, CriteriaRange:= _
        Range("Criteria"), Unique:=False
    Range("fs_disclosures").Select
    Application.StatusBar = "Ready"
    Application.ScreenUpdating = True

End Sub

Private Sub Worksheet_Deactivate()
    If ThisWorkbook.bIsSaving Then Exit Sub
    Application.StatusBar = False
End Sub
Attribute VB_Name = "InputSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "LinkInfo"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "LinkRemove"
Sub Remove_link1()
'
' Remove_link1 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("remove_01").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub
Sub Remove_link2()
'
' Remove_link2 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("remove_02").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub
Sub Remove_link3()
'
' Remove_link3 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("remove_03").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub
Sub Remove_link4()
'
' Remove_link4 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("remove_04").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub

Sub Remove_link5()
'
' Remove_link5 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("remove_05").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub

Sub Remove_link6()
'
' Remove_link6 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("remove_06").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub

Sub Remove_link7()
'
' Remove_link7 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("remove_07").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub

Sub Remove_link8()
'
' Remove_link8 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("remove_08").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub

Sub Remove_link9()
'
' Remove_link9 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("remove_09").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub

Sub Remove_link10()
'
' Remove_link10 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("remove_10").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub

Sub Remove_link11()
'
' Remove_link11 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("E21:P21").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub

Sub Remove_link12()
'
' Remove_link12 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("E22:P22").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub

Sub Remove_link13()
'
' Remove_link13 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("E23:P23").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub

Sub Remove_link14()
'
' Remove_link14 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("E24:P24").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub

Sub Remove_link15()
'
' Remove_link15 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("E25:P25").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub

Sub Remove_link16()
'
' Remove_link16 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("E26:P26").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub

Sub Remove_link17()
'
' Remove_link17 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("E27:P27").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub

Sub Remove_link18()
'
' Remove_link18 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("E28:P28").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub

Sub Remove_link19()
'
' Remove_link19 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("E29:P29").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub

Sub Remove_link20()
'
' Remove_link20 Macro
' Macro recorded 9/7/99 by Practitioners Publishing Company
'

'
    Application.ScreenUpdating = False
    LinkInfo.Activate
    Range("E30:P30").Activate
    Selection.ClearContents
    Range("link_info").Activate
    InputSheet.Activate
    Application.ScreenUpdating = True
End Sub

Attribute VB_Name = "LinkSet"
Option Explicit

Dim Lender As String
Dim Int_Rate As String
Dim Terms As String
Dim Collateral As String
Dim Year1 As String
Dim Year2 As String
Dim Year3 As String
Dim Year4 As String
Dim Year5 As String
Dim After As String
Dim BSdate As String
Dim Linkname As String

Public Sub Set_Link()
  Dim nErr As Integer
  Dim sErrDesc As String
  Dim sSourceCellRef As String
  Dim sSourcePathFileName As String
  Dim vntSPFN As Variant
  
  '
  ' Don Judd's substitute method that silently set's the link (no activation). This is done
  '  to ensure that security works.
  '
  
  On Error GoTo SLErr
  
  vntSPFN = Application.GetOpenFilename("Excel Files (*.xls*), *.xls*", 1, "Select the loan amortization workbook to which this row should be linked.")
  If vntSPFN = False Then
    MsgBox "No workbook was selected.", vbOKOnly + vbInformation, "PPC's e-Workpapers"
    Exit Sub
  End If
  sSourcePathFileName = vntSPFN
  
  If AddInMisc.vntSilentGetXLValue(sSourcePathFileName, "Input", "$b$14", False) <> "Amount borrowed" Then
    If AddInMisc.vntSilentGetXLValue(sSourcePathFileName, "Input", "$b$13", False) <> "Amount borrowed" Then
      Application.ScreenUpdating = True
      MsgBox AddInMisc.sGetBaseFileName(sSourcePathFileName, False) & " is not a valid loan amortization file. Make sure the selected file is a PPC's e-Workpapers Loan Amortization workbook that contains worksheets titled 'Input,' 'Amortization Schedule,' and 'Financial Statement Disclosures.'", vbOKOnly + vbCritical, "PPC's e-Workpapers"
      Exit Sub
    End If
  End If

  Application.ScreenUpdating = False
  Application.EnableEvents = False
  If ActiveSheet.FilterMode = True Then
    ActiveSheet.ShowAllData
  End If
  
  '
  ' BIG NOTE! The third option to AddInMisc.vntSilentGetXLValue (sSourceCellRef) CANNOT be
  '  a defined name or this will not work. Any questions, see Don Judd 9/11/2003.
  '
  
  LinkInfo.Range(Linkname).Value = sSourcePathFileName
  AddInMisc.SilentLinkToExternalWorkbook sSourcePathFileName, "Input", "c6", "Link Info", Lender
  If AddInMisc.vntSilentGetXLValue(sSourcePathFileName, "Input", "$b$15", False) = "Interest rate" Then
    sSourceCellRef = "$d$15"
  ElseIf AddInMisc.vntSilentGetXLValue(sSourcePathFileName, "Input", "$b$14", False) = "Interest rate" Then
    sSourceCellRef = "$d$14"
  Else
    sSourceCellRef = "$m$17"
  End If
  AddInMisc.SilentLinkToExternalWorkbook sSourcePathFileName, "Input", sSourceCellRef, "Link Info", Int_Rate
  AddInMisc.SilentLinkToExternalWorkbook sSourcePathFileName, "Financial Statement Disclosures", "b8", "Link Info", Terms
  AddInMisc.SilentLinkToExternalWorkbook sSourcePathFileName, "Financial Statement Disclosures", "b9", "Link Info", Collateral
  AddInMisc.SilentLinkToExternalWorkbook sSourcePathFileName, "Financial Statement Disclosures", "d13", "Link Info", Year1
  AddInMisc.SilentLinkToExternalWorkbook sSourcePathFileName, "Financial Statement Disclosures", "d14", "Link Info", Year2
  AddInMisc.SilentLinkToExternalWorkbook sSourcePathFileName, "Financial Statement Disclosures", "d15", "Link Info", Year3
  AddInMisc.SilentLinkToExternalWorkbook sSourcePathFileName, "Financial Statement Disclosures", "d16", "Link Info", Year4
  AddInMisc.SilentLinkToExternalWorkbook sSourcePathFileName, "Financial Statement Disclosures", "d17", "Link Info", Year5
  AddInMisc.SilentLinkToExternalWorkbook sSourcePathFileName, "Financial Statement Disclosures", "d18", "Link Info", After
  If AddInMisc.vntSilentGetXLValue(sSourcePathFileName, "Input", "g4", False) = "Statement of financial position date " Then
    sSourceCellRef = "h4"
  Else
    sSourceCellRef = "i4"
  End If
  AddInMisc.SilentLinkToExternalWorkbook sSourcePathFileName, "Input", sSourceCellRef, "Link Info", BSdate
  
  Application.EnableEvents = True
  Application.ScreenUpdating = True
  If LinkInfo.Range(BSdate).Value <> InputSheet.Range("Balance_sheet_date").Value Then

    '
    ' Warn user if balance sheet dates don't agree.
    '
  
    MsgBox "The balance sheet date used to determine this loan's balance and maturity information differs from the balance sheet date entered above. The loan will be included in the financial statement disclosure only if the balance sheet dates are changed to agree.", vbOKOnly + vbInformation, "PPC's e-Workpapers"
  End If
  
  On Error GoTo 0                               ' cancel error tracking
  Exit Sub

  '
  ' Error handler.
  '
  
SLErr:
  nErr = Err.Number                             ' save error and description because any code to follow will change these values
  sErrDesc = Err.Description
  
  On Error GoTo 0                               ' cancel error tracking
  InputSheet.Select
  Application.EnableEvents = True
  Application.ScreenUpdating = True
  
  Select Case nErr                              ' Evaluate error number
  Case 1004
     MsgBox "A link could not be added because " & AddInMisc.sGetBaseFileName(sSourcePathFileName, False) & " is already open or could not be read by Excel " & Application.Version & ".", vbOKOnly + vbInformation, "PPC's e-Workpapers"
  Case Else
     MsgBox "A link to " & AddInMisc.sGetBaseFileName(sSourcePathFileName, False) & " could not be added. The error is [" & nErr & "] " & sErrDesc & ".", vbOKOnly + vbCritical, "PPC's e-Workpapers"
  End Select
End Sub

#If False Then
Sub Set_Link()
' Set_Link Macro

' This macro is a subroutine that sets the link to a compatible _
  loan amortization workbook and pastes the appropriate information _
  into the corresponding row of this workbook. The macro is called _
  by the various set link macros.

    Dim txtMsg As String
       
'Open dialog box to select the supporting workbook
  
    Application.EnableEvents = False
    TW = ActiveWorkbook.Name
      
    txtMsg = "Select the loan amortization workbook to which this row should be linked."
    FileFilter = "Excel Files (*.xls*), *.xls*"
    filterindex = 1
    
    LW = Application.GetOpenFilename(FileFilter, filterindex, txtMsg)
        
'   Exit if dialog box canceled
    If LW = False Then
        MsgBox "No workbook selected   ", vbOKOnly + vbInformation, "PPC's e-Workpapers"
        Application.EnableEvents = True
        Exit Sub
    End If

'Select workbook to be linked
    Application.ScreenUpdating = False
    On Error GoTo NotValid
    Workbooks.Open Filename:=LW
    LW2 = ActiveWorkbook.Name
    Target_name = ActiveWorkbook.FullName

'Determine if workbook is a valid workbook
    Application.StatusBar = _
      "Adding link: 0%"
    Workbooks(LW2).Activate
    On Error GoTo WrongType
    InputSheet.Select
    On Error GoTo NotValid
    If Range("$b$14").Value <> "Amount borrowed" Then
        If Range("$b$13").Value <> "Amount borrowed" Then
            notvalid_msg = LW2 & " is not a valid PPC's e-Workpapers loan amortization file. Make sure the selected file is a PPC's e-Workpapers Loan Amortization workbook that contains worksheets titled 'Input,' 'Amortization Schedule,' and 'Financial Statement Disclosures.'"
            Application.ScreenUpdating = True
            MsgBox notvalid_msg, vbOKOnly + vbCritical, "PPC's e-Workpapers"
            Application.ScreenUpdating = False
            ActiveWorkbook.Close SaveChanges:=False
            Application.StatusBar = False
            Exit Sub
        End If
        Application.StatusBar = False
    End If

'Paste links to workbook
    PctDone = 0.1
    Call UpdateStatusBar(PctDone)
    Workbooks(LW2).Activate
    InputSheet.Select
    Range("c6").Select
    Selection.Copy
    Windows(TW).Activate
    LinkInfo.Activate
    Range(Lender).Activate
    ActiveSheet.Paste Link:=True
    
    PctDone = 0.15
    Call UpdateStatusBar(PctDone)
    Workbooks(LW2).Activate
    InputSheet.Select
    If Range("$b$15").Value = "Interest rate" Then
        Range("$d$15").Select
        Else
        If Range("$b$14").Value = "Interest rate" Then
            Range("$d$14").Select
            Else
            Range("m17").Select
        End If
    End If
    Selection.Copy
    Windows(TW).Activate
    Range(Int_Rate).Activate
    ActiveSheet.Paste Link:=True
    
    PctDone = 0.2
    Call UpdateStatusBar(PctDone)
    Workbooks(LW2).Activate
    FinancialStatementDisclosures.Select
    Application.ScreenUpdating = False
    Range("b8").Select
    Selection.Copy
    Application.ScreenUpdating = False
    Windows(TW).Activate
    Range(Terms).Activate
    ActiveSheet.Paste Link:=True
    
    PctDone = 0.25
    Call UpdateStatusBar(PctDone)
    Workbooks(LW2).Activate
    FinancialStatementDisclosures.Select
    Application.ScreenUpdating = False
    Range("b9").Select
    Selection.Copy
    Application.ScreenUpdating = False
    Windows(TW).Activate
    Range(Collateral).Activate
    ActiveSheet.Paste Link:=True
    
    PctDone = 0.3
    Call UpdateStatusBar(PctDone)
    Workbooks(LW2).Activate
    FinancialStatementDisclosures.Select
    Application.ScreenUpdating = False
    Range("d13").Select
    Selection.Copy
    Application.ScreenUpdating = False
    Windows(TW).Activate
    Range(Year1).Activate
    ActiveSheet.Paste Link:=True
    
    PctDone = 0.35
    Call UpdateStatusBar(PctDone)
    Workbooks(LW2).Activate
    FinancialStatementDisclosures.Select
    Application.ScreenUpdating = False
    Range("d14").Select
    Selection.Copy
    Application.ScreenUpdating = False
    Windows(TW).Activate
    Range(Year2).Activate
    ActiveSheet.Paste Link:=True
    
    PctDone = 0.4
    Call UpdateStatusBar(PctDone)
    Workbooks(LW2).Activate
    FinancialStatementDisclosures.Select
    Application.ScreenUpdating = False
    Range("d15").Select
    Selection.Copy
    Application.ScreenUpdating = False
    Windows(TW).Activate
    Range(Year3).Activate
    ActiveSheet.Paste Link:=True
    
    PctDone = 0.5
    Call UpdateStatusBar(PctDone)
    Workbooks(LW2).Activate
    FinancialStatementDisclosures.Select
    Application.ScreenUpdating = False
    Range("d16").Select
    Selection.Copy
    Application.ScreenUpdating = False
    Windows(TW).Activate
    Range(Year4).Activate
    ActiveSheet.Paste Link:=True
    
    PctDone = 0.6
    Call UpdateStatusBar(PctDone)
    Workbooks(LW2).Activate
    FinancialStatementDisclosures.Select
    Application.ScreenUpdating = False
    Range("d17").Select
    Selection.Copy
    Application.ScreenUpdating = False
    Windows(TW).Activate
    Range(Year5).Activate
    ActiveSheet.Paste Link:=True
    
    PctDone = 0.7
    Call UpdateStatusBar(PctDone)
    Workbooks(LW2).Activate
    FinancialStatementDisclosures.Select
    Application.ScreenUpdating = False
    Range("d18").Select
    Selection.Copy
    Application.ScreenUpdating = False
    Windows(TW).Activate
    Range(After).Activate
    ActiveSheet.Paste Link:=True
    
    PctDone = 0.8
    Call UpdateStatusBar(PctDone)
    Workbooks(LW2).Activate
    InputSheet.Select
    Range("fsdate").Select
    Selection.Copy
    Windows(TW).Activate
    Range(BSdate).Activate
    ActiveSheet.Paste Link:=True
    
    PctDone = 0.9
    Call UpdateStatusBar(PctDone)
    Windows(TW).Activate
    Range(Linkname).Value = Target_name

    PctDone = 1
    Call UpdateStatusBar(PctDone)
    Windows(LW2).Activate
    ActiveWorkbook.Close SaveChanges:=False
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    
'Warn user if balance sheet dates don't agree
    Windows(TW).Activate
    If Range(BSdate).Value <> Range("Balance_sheet_date") Then
        wrongdate_msg = "The balance sheet date used to determine this loan's balance and maturity information differs from the balance sheet date entered above. The loan will be included in the financial statement disclosure only if the balance sheet dates are changed to agree."
        Application.ScreenUpdating = True
        MsgBox wrongdate_msg, vbOKOnly + vbInformation, "PPC's e-Workpapers"
    End If
        Application.ScreenUpdating = False
    InputSheet.Select
    
    Application.StatusBar = False
    Application.ScreenUpdating = True
    Application.EnableEvents = True
Exit Sub

'Routines for handling errors that may occur when linking files.

NotValid:
    Select Case Err  ' Evaluate error number.

        Case 1004 '"unable to read the file
           Application.ScreenUpdating = True
           Application.EnableEvents = True
           unable_to_read_msg = "A link could not be added because " & LW & " is already open or could not be read by Excel " & Application.Version & "."
           MsgBox unable_to_read_msg, vbOKOnly + vbInformation, "PPC's e-Workpapers"
           Application.StatusBar = False
     
        Case Else
           notvalid_msg = "A link to " & LW2 & " could not be added.'"
           Application.ScreenUpdating = True
           Application.EnableEvents = True
           MsgBox notvalid_msg, vbOKOnly + vbCritical, "PPC's e-Workpapers"
           Application.StatusBar = False
        
        End Select
    Exit Sub
    
WrongType:
    notvalid_msg = LW2 & " is not a valid PPC's e-Workpapers loan amortization file. Make sure the selected file is a PPC's e-Workpapers Loan Amortization workbook that contains worksheets titled 'Input,' 'Amortization Schedule,' and 'Financial Statement Disclosures.'"
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    MsgBox notvalid_msg, vbOKOnly + vbCritical, "PPC's e-Workpapers"
    Application.StatusBar = False
    ActiveWorkbook.Close filesave = False
    Exit Sub
Application.ScreenUpdating = True
Application.EnableEvents = True
End Sub
#End If

Sub Set_Link1()

' This macro is sets the link to the first workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_01").Address
    Int_Rate = LinkInfo.Range("int_rate_01").Address
    Terms = LinkInfo.Range("terms_01").Address
    Collateral = LinkInfo.Range("collateral_01").Address
    Year1 = LinkInfo.Range("year1_01").Address
    Year2 = LinkInfo.Range("year2_01").Address
    Year3 = LinkInfo.Range("year3_01").Address
    Year4 = LinkInfo.Range("year4_01").Address
    Year5 = LinkInfo.Range("year5_01").Address
    After = LinkInfo.Range("after_01").Address
    BSdate = LinkInfo.Range("bsdate_01").Address
    Linkname = LinkInfo.Range("workbook_01").Address
    
'Call the subroutine
    Call Set_Link

End Sub
Sub Set_Link2()

' This macro is sets the link to the second workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_02").Address
    Int_Rate = LinkInfo.Range("int_rate_02").Address
    Terms = LinkInfo.Range("terms_02").Address
    Collateral = LinkInfo.Range("collateral_02").Address
    Year1 = LinkInfo.Range("year1_02").Address
    Year2 = LinkInfo.Range("year2_02").Address
    Year3 = LinkInfo.Range("year3_02").Address
    Year4 = LinkInfo.Range("year4_02").Address
    Year5 = LinkInfo.Range("year5_02").Address
    After = LinkInfo.Range("after_02").Address
    BSdate = LinkInfo.Range("bsdate_02").Address
    Linkname = LinkInfo.Range("workbook_02").Address
    
'Call the subroutine
    Call Set_Link

End Sub
Sub Set_Link3()

' This macro is sets the link to the third workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_03").Address
    Int_Rate = LinkInfo.Range("int_rate_03").Address
    Terms = LinkInfo.Range("terms_03").Address
    Collateral = LinkInfo.Range("collateral_03").Address
    Year1 = LinkInfo.Range("year1_03").Address
    Year2 = LinkInfo.Range("year2_03").Address
    Year3 = LinkInfo.Range("year3_03").Address
    Year4 = LinkInfo.Range("year4_03").Address
    Year5 = LinkInfo.Range("year5_03").Address
    After = LinkInfo.Range("after_03").Address
    BSdate = LinkInfo.Range("bsdate_03").Address
    Linkname = LinkInfo.Range("workbook_03").Address
    
'Call the subroutine
    Call Set_Link

End Sub

Sub Set_Link4()

' This macro is sets the link to the fourth workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_04").Address
    Int_Rate = LinkInfo.Range("int_rate_04").Address
    Terms = LinkInfo.Range("terms_04").Address
    Collateral = LinkInfo.Range("collateral_04").Address
    Year1 = LinkInfo.Range("year1_04").Address
    Year2 = LinkInfo.Range("year2_04").Address
    Year3 = LinkInfo.Range("year3_04").Address
    Year4 = LinkInfo.Range("year4_04").Address
    Year5 = LinkInfo.Range("year5_04").Address
    After = LinkInfo.Range("after_04").Address
    BSdate = LinkInfo.Range("bsdate_04").Address
    Linkname = LinkInfo.Range("workbook_04").Address
    
'Call the subroutine
    Call Set_Link

End Sub

Sub Set_Link5()

' This macro is sets the link to the fifth workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_05").Address
    Int_Rate = LinkInfo.Range("int_rate_05").Address
    Terms = LinkInfo.Range("terms_05").Address
    Collateral = LinkInfo.Range("collateral_05").Address
    Year1 = LinkInfo.Range("year1_05").Address
    Year2 = LinkInfo.Range("year2_05").Address
    Year3 = LinkInfo.Range("year3_05").Address
    Year4 = LinkInfo.Range("year4_05").Address
    Year5 = LinkInfo.Range("year5_05").Address
    After = LinkInfo.Range("after_05").Address
    BSdate = LinkInfo.Range("bsdate_05").Address
    Linkname = LinkInfo.Range("workbook_05").Address
    
'Call the subroutine
    Call Set_Link

End Sub

Sub Set_Link6()

' This macro is sets the link to the sixth workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_06").Address
    Int_Rate = LinkInfo.Range("int_rate_06").Address
    Terms = LinkInfo.Range("terms_06").Address
    Collateral = LinkInfo.Range("collateral_06").Address
    Year1 = LinkInfo.Range("year1_06").Address
    Year2 = LinkInfo.Range("year2_06").Address
    Year3 = LinkInfo.Range("year3_06").Address
    Year4 = LinkInfo.Range("year4_06").Address
    Year5 = LinkInfo.Range("year5_06").Address
    After = LinkInfo.Range("after_06").Address
    BSdate = LinkInfo.Range("bsdate_06").Address
    Linkname = LinkInfo.Range("workbook_06").Address
    
'Call the subroutine
    Call Set_Link

End Sub

Sub Set_Link7()

' This macro is sets the link to the seventh workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_07").Address
    Int_Rate = LinkInfo.Range("int_rate_07").Address
    Terms = LinkInfo.Range("terms_07").Address
    Collateral = LinkInfo.Range("collateral_07").Address
    Year1 = LinkInfo.Range("year1_07").Address
    Year2 = LinkInfo.Range("year2_07").Address
    Year3 = LinkInfo.Range("year3_07").Address
    Year4 = LinkInfo.Range("year4_07").Address
    Year5 = LinkInfo.Range("year5_07").Address
    After = LinkInfo.Range("after_07").Address
    BSdate = LinkInfo.Range("bsdate_07").Address
    Linkname = LinkInfo.Range("workbook_07").Address
    
'Call the subroutine
    Call Set_Link

End Sub

Sub Set_Link8()

' This macro is sets the link to the eighth workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_08").Address
    Int_Rate = LinkInfo.Range("int_rate_08").Address
    Terms = LinkInfo.Range("terms_08").Address
    Collateral = LinkInfo.Range("collateral_08").Address
    Year1 = LinkInfo.Range("year1_08").Address
    Year2 = LinkInfo.Range("year2_08").Address
    Year3 = LinkInfo.Range("year3_08").Address
    Year4 = LinkInfo.Range("year4_08").Address
    Year5 = LinkInfo.Range("year5_08").Address
    After = LinkInfo.Range("after_08").Address
    BSdate = LinkInfo.Range("bsdate_08").Address
    Linkname = LinkInfo.Range("workbook_08").Address
    
'Call the subroutine
    Call Set_Link

End Sub

Sub Set_Link9()

' This macro is sets the link to the ninth workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_09").Address
    Int_Rate = LinkInfo.Range("int_rate_09").Address
    Terms = LinkInfo.Range("terms_09").Address
    Collateral = LinkInfo.Range("collateral_09").Address
    Year1 = LinkInfo.Range("year1_09").Address
    Year2 = LinkInfo.Range("year2_09").Address
    Year3 = LinkInfo.Range("year3_09").Address
    Year4 = LinkInfo.Range("year4_09").Address
    Year5 = LinkInfo.Range("year5_09").Address
    After = LinkInfo.Range("after_09").Address
    BSdate = LinkInfo.Range("bsdate_09").Address
    Linkname = LinkInfo.Range("workbook_09").Address
    
'Call the subroutine
    Call Set_Link

End Sub

Sub Set_Link10()

' This macro is sets the link to the tenth workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_10").Address
    Int_Rate = LinkInfo.Range("int_rate_10").Address
    Terms = LinkInfo.Range("terms_10").Address
    Collateral = LinkInfo.Range("collateral_10").Address
    Year1 = LinkInfo.Range("year1_10").Address
    Year2 = LinkInfo.Range("year2_10").Address
    Year3 = LinkInfo.Range("year3_10").Address
    Year4 = LinkInfo.Range("year4_10").Address
    Year5 = LinkInfo.Range("year5_10").Address
    After = LinkInfo.Range("after_10").Address
    BSdate = LinkInfo.Range("bsdate_10").Address
    Linkname = LinkInfo.Range("workbook_10").Address
    
'Call the subroutine
    Call Set_Link

End Sub

Sub Set_Link11()

' This macro is sets the link to the 11th workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_11").Address
    Int_Rate = LinkInfo.Range("int_rate_11").Address
    Terms = LinkInfo.Range("terms_11").Address
    Collateral = LinkInfo.Range("collateral_11").Address
    Year1 = LinkInfo.Range("year1_11").Address
    Year2 = LinkInfo.Range("year2_11").Address
    Year3 = LinkInfo.Range("year3_11").Address
    Year4 = LinkInfo.Range("year4_11").Address
    Year5 = LinkInfo.Range("year5_11").Address
    After = LinkInfo.Range("after_11").Address
    BSdate = LinkInfo.Range("bsdate_11").Address
    Linkname = LinkInfo.Range("workbook_11").Address
    
'Call the subroutine
    Call Set_Link

End Sub

Sub Set_Link12()

' This macro is sets the link to the 12th workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_12").Address
    Int_Rate = LinkInfo.Range("int_rate_12").Address
    Terms = LinkInfo.Range("terms_12").Address
    Collateral = LinkInfo.Range("collateral_12").Address
    Year1 = LinkInfo.Range("year1_12").Address
    Year2 = LinkInfo.Range("year2_12").Address
    Year3 = LinkInfo.Range("year3_12").Address
    Year4 = LinkInfo.Range("year4_12").Address
    Year5 = LinkInfo.Range("year5_12").Address
    After = LinkInfo.Range("after_12").Address
    BSdate = LinkInfo.Range("bsdate_12").Address
    Linkname = LinkInfo.Range("workbook_12").Address
    
'Call the subroutine
    Call Set_Link

End Sub

Sub Set_Link13()

' This macro is sets the link to the 13th workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_13").Address
    Int_Rate = LinkInfo.Range("int_rate_13").Address
    Terms = LinkInfo.Range("terms_13").Address
    Collateral = LinkInfo.Range("collateral_13").Address
    Year1 = LinkInfo.Range("year1_13").Address
    Year2 = LinkInfo.Range("year2_13").Address
    Year3 = LinkInfo.Range("year3_13").Address
    Year4 = LinkInfo.Range("year4_13").Address
    Year5 = LinkInfo.Range("year5_13").Address
    After = LinkInfo.Range("after_13").Address
    BSdate = LinkInfo.Range("bsdate_13").Address
    Linkname = LinkInfo.Range("workbook_13").Address
    
'Call the subroutine
    Call Set_Link

End Sub

Sub Set_Link14()

' This macro is sets the link to the 14th workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_14").Address
    Int_Rate = LinkInfo.Range("int_rate_14").Address
    Terms = LinkInfo.Range("terms_14").Address
    Collateral = LinkInfo.Range("collateral_14").Address
    Year1 = LinkInfo.Range("year1_14").Address
    Year2 = LinkInfo.Range("year2_14").Address
    Year3 = LinkInfo.Range("year3_14").Address
    Year4 = LinkInfo.Range("year4_14").Address
    Year5 = LinkInfo.Range("year5_14").Address
    After = LinkInfo.Range("after_14").Address
    BSdate = LinkInfo.Range("bsdate_14").Address
    Linkname = LinkInfo.Range("workbook_14").Address
    
'Call the subroutine
    Call Set_Link

End Sub

Sub Set_Link15()

' This macro is sets the link to the 15th workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_15").Address
    Int_Rate = LinkInfo.Range("int_rate_15").Address
    Terms = LinkInfo.Range("terms_15").Address
    Collateral = LinkInfo.Range("collateral_15").Address
    Year1 = LinkInfo.Range("year1_15").Address
    Year2 = LinkInfo.Range("year2_15").Address
    Year3 = LinkInfo.Range("year3_15").Address
    Year4 = LinkInfo.Range("year4_15").Address
    Year5 = LinkInfo.Range("year5_15").Address
    After = LinkInfo.Range("after_15").Address
    BSdate = LinkInfo.Range("bsdate_15").Address
    Linkname = LinkInfo.Range("workbook_15").Address
    
'Call the subroutine
    Call Set_Link

End Sub

Sub Set_Link16()

' This macro is sets the link to the 16th workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_16").Address
    Int_Rate = LinkInfo.Range("int_rate_16").Address
    Terms = LinkInfo.Range("terms_16").Address
    Collateral = LinkInfo.Range("collateral_16").Address
    Year1 = LinkInfo.Range("year1_16").Address
    Year2 = LinkInfo.Range("year2_16").Address
    Year3 = LinkInfo.Range("year3_16").Address
    Year4 = LinkInfo.Range("year4_16").Address
    Year5 = LinkInfo.Range("year5_16").Address
    After = LinkInfo.Range("after_16").Address
    BSdate = LinkInfo.Range("bsdate_16").Address
    Linkname = LinkInfo.Range("workbook_16").Address
    
'Call the subroutine
    Call Set_Link

End Sub

Sub Set_Link17()

' This macro is sets the link to the 17th workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_17").Address
    Int_Rate = LinkInfo.Range("int_rate_17").Address
    Terms = LinkInfo.Range("terms_17").Address
    Collateral = LinkInfo.Range("collateral_17").Address
    Year1 = LinkInfo.Range("year1_17").Address
    Year2 = LinkInfo.Range("year2_17").Address
    Year3 = LinkInfo.Range("year3_17").Address
    Year4 = LinkInfo.Range("year4_17").Address
    Year5 = LinkInfo.Range("year5_17").Address
    After = LinkInfo.Range("after_17").Address
    BSdate = LinkInfo.Range("bsdate_17").Address
    Linkname = LinkInfo.Range("workbook_17").Address
    
'Call the subroutine
    Call Set_Link

End Sub

Sub Set_Link18()

' This macro is sets the link to the 18th workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_18").Address
    Int_Rate = LinkInfo.Range("int_rate_18").Address
    Terms = LinkInfo.Range("terms_18").Address
    Collateral = LinkInfo.Range("collateral_18").Address
    Year1 = LinkInfo.Range("year1_18").Address
    Year2 = LinkInfo.Range("year2_18").Address
    Year3 = LinkInfo.Range("year3_18").Address
    Year4 = LinkInfo.Range("year4_18").Address
    Year5 = LinkInfo.Range("year5_18").Address
    After = LinkInfo.Range("after_18").Address
    BSdate = LinkInfo.Range("bsdate_18").Address
    Linkname = LinkInfo.Range("workbook_18").Address
    
'Call the subroutine
    Call Set_Link

End Sub

Sub Set_Link19()

' This macro is sets the link to the 19th workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_19").Address
    Int_Rate = LinkInfo.Range("int_rate_19").Address
    Terms = LinkInfo.Range("terms_19").Address
    Collateral = LinkInfo.Range("collateral_19").Address
    Year1 = LinkInfo.Range("year1_19").Address
    Year2 = LinkInfo.Range("year2_19").Address
    Year3 = LinkInfo.Range("year3_19").Address
    Year4 = LinkInfo.Range("year4_19").Address
    Year5 = LinkInfo.Range("year5_19").Address
    After = LinkInfo.Range("after_19").Address
    BSdate = LinkInfo.Range("bsdate_19").Address
    Linkname = LinkInfo.Range("workbook_19").Address
    
'Call the subroutine
    Call Set_Link

End Sub

Sub Set_Link20()

' This macro is sets the link to the 20th workbook and pastes _
  the appropriate information into the corresponding row of this _
  workbook. It calls the Set_Link subroutine to do all the copying _
  and pasting. The macro is started by clicking the corresponding _
  button at the beginning of the row.

'Set the parameters for the target range names
  
    Lender = LinkInfo.Range("lender_20").Address
    Int_Rate = LinkInfo.Range("int_rate_20").Address
    Terms = LinkInfo.Range("terms_20").Address
    Collateral = LinkInfo.Range("collateral_20").Address
    Year1 = LinkInfo.Range("year1_20").Address
    Year2 = LinkInfo.Range("year2_20").Address
    Year3 = LinkInfo.Range("year3_20").Address
    Year4 = LinkInfo.Range("year4_20").Address
    Year5 = LinkInfo.Range("year5_20").Address
    After = LinkInfo.Range("after_20").Address
    BSdate = LinkInfo.Range("bsdate_20").Address
    Linkname = LinkInfo.Range("workbook_20").Address
    
'Call the subroutine
    Call Set_Link

End Sub



Attribute VB_Name = "PPC_CodeModule"
Public Sub MacroCheck()
'Do nothing. This sub will be called from .NET code to check macro is enabled or not
End Sub


Public Function PPC_GetClientName()
  PPC_GetClientName = Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Client_Name")
End Function

Public Function PPC_GetBalanceSheetDate()
  PPC_GetBalanceSheetDate = Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Engagement_Date")
End Function

Attribute VB_Name = "StatusBar"
Sub UpdateStatusBar(PctDone)
'
'UpdateStatusBar macro
'Shows the progress of set_link macro
    
    Application.StatusBar = _
      "Adding link: " & Format(PctDone, "0%")
End Sub


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'
' This code is protected and passworded when complete.
'

Private Const XL4MACRO As String = "PPCSecurityMacro"
Private Const INFORMATION As String = "INFORMATION"

Private Const bIsIDxR As Boolean = False        ' Set True if Interactive Disclosure Library
#Const IDxR = 0                                 ' Set 1 if Interactive Disclosure Library

      ' Declare security class

Private Sub Workbook_Activate()

  
  InitForEditorial
  
  On Error GoTo 0
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
  Workbook_BeforeClose_Editorial
End Sub



Public Function bIsSaving() As Boolean
  bIsSaving = False
End Function



INQUEST-PP=macro
