<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="ImportazioneFile" script:language="StarBasic">REM  by Marco Gualmini

option explicit


Sub Main

 const MinimoPerBollo  = 77.47

 dim Dimensione as long 
 Dimensione = 100 &apos; dimensione iniziale ddlle matrici, verranno ridimensionate se necessario

 dim NomeFile(Dimensione) as string
 dim UrlFile(Dimensione) as string
 dim ProgressivoInvio(Dimensione) as string
 dim ProgressivoDuplicato(Dimensione) as boolean
 dim FormatoTrasmissione(Dimensione) as string
 dim CodiceDestinatario(Dimensione) as string
 dim PECDestinatario(Dimensione) as string
 dim NumeroDocumento(Dimensione) as string
 dim TipoDocumento(Dimensione) as string
 dim DataDocumento(Dimensione) as string
 dim DivisaDocumento(Dimensione) as string
 dim ImportoTotaleDocumento(Dimensione) as single
 dim ImportoContributoCassa(Dimensione) as single
 dim ImportoRitenuta(Dimensione) as single
 dim ImportoBollo(Dimensione) as single
 dim DenominazioneCedente(Dimensione) as string
 dim AnagraficaCessionario(Dimensione) as string
 dim CfCedente(Dimensione) as string
 dim PivaCedente(Dimensione) as string
 dim CfCessionario(Dimensione) as string
 dim PivaCessionario(Dimensione) as string
 dim Causale(Dimensione) as string
 dim Natura1(Dimensione) as single
 dim Natura2(Dimensione) as single
 dim Natura3(Dimensione) as single
 dim Natura4(Dimensione) as single
 dim Natura5(Dimensione) as single
 dim Natura6(Dimensione) as single
 dim Natura7(Dimensione) as single
 dim CondizioniPagamento(Dimensione) as string
 dim ModalitaPagamento(Dimensione) as string
 dim Imponibile1(Dimensione) as single
 dim Imponibile2(Dimensione) as single
 dim Imponibile3(Dimensione) as single
 dim Imponibile4(Dimensione) as single
 dim Imposta1(Dimensione) as single
 dim Imposta2(Dimensione) as single
 dim Imposta3(Dimensione) as single
 dim Imposta4(Dimensione) as single

 Dim filename as string
 dim precNumDoc as string
 Dim opzioni As New com.sun.star.util.SearchOptions
 dim cr as string
 cr = Chr(10) &apos; ritorno a capo
 
 dim pathfile, fullfile, NomeFileT as string
 dim cellaStato as object
 dim tempoInizio as date

 dim cFattura  as long
 dim TotFile as long
 dim ConteggioFile as long
 dim ConteggioFileUtili  as long
 dim UnaFattura as string
 dim DatiGenerali as string
 dim DatiGeneraliDocumento as string
 dim TipoDocumentoT as string
 dim FormatoTrasmissioneT as string
 dim ProgressivoInvioT as string
 dim CodiceDestinatarioT as string
 dim PECDestinatarioT as string
 dim CfCedenteT as string
 dim PivaCedenteT as string
 dim CfCessionarioT as string
 dim PivaCessionarioT as string
 dim CedentePrestatore as string
 dim DatiAnagrafici as string
 dim DenominazioneCedenteT as string
 dim CessionarioCommittente as string
 dim AnagraficaCessionarioT as string
 dim segno as integer
 dim TotaleCalcolato as single

 dim DatiPagamento as string
 dim DatiCassaPrevidenziale as string
 dim DatiRitenuta as string
 dim DatiRiepilogo as string
 dim Aliquota as string
 dim Aliquota1 as string
 dim Aliquota2 as string
 dim Aliquota3 as string
 dim Aliquota4 as string
 dim Imponibile as single
 dim Imposta as single
 dim Natura1S as boolean
 dim Natura2S as boolean
 dim Natura3S as boolean
 dim Natura4S as boolean
 dim Natura5S as boolean
 dim Natura6S as boolean
 dim Natura7S as boolean
  
 dim Completamento as integer
 dim Completamento1 as integer
 dim nomeFoglio as string
 dim Foglio as object				
 dim CryptoOn as boolean
 dim obj as object
 dim n as long
 dim riga as long
 dim col as long
 dim UrlT as integer
 dim Md5T as string
 dim Sha256T as string
 dim L as string
 dim superoAliquote as boolean
 dim superoNature as boolean

&apos; per la formattazione delle celle 
 Dim NumberFormats As Object
 Dim NumberFormatString As String
 Dim NumberFormatId As Long
 Dim LocalSettings As New com.sun.star.lang.Locale
 
 dim Controller as object
 dim report as string
 dim document as object
 dim dispatcher as object
 dim files as object
 
 dim args1(4) as new com.sun.star.beans.PropertyValue &apos; usato per creazione link in colonna nome file
 dim args2(0) as new com.sun.star.beans.PropertyValue &apos; usato in creazione autofiltro


REM Prepara librerie varie

 GlobalScope.BasicLibraries.LoadLibrary(&quot;Tools&quot;)

 set obj = CreateUnoService(&quot;org.openoffice.Cryptographic.CryptographicService&quot;)
 CryptoOn = not( isnull(obj) )

 cellaStato =  thiscomponent.sheets.getByIndex(0).getCellRangeByName( &quot;Stato&quot; )

 files = SelezionaFiles( Tools.Strings.DirectoryNameoutofPath(ThisComponent.url, &quot;/&quot;) )
 if files(0) = &quot;&quot; then exit sub
 TotFile = ubound(files)
 
 tempoInizio = Now
 cFattura = 0    

 
REM analizza i file uno alla volta 
 for each filename in files

	if filename=&quot;&quot; then exit for
 	fullfile = Aprifile( filename )            
    NomeFileT =  FileNameOutOfPath(ConvertFromURL(filename), &quot;\&quot;)
&apos;    NomeFileT = FileNameOutOfPath(ConvertFromURL(NomeFileT), &quot;/&quot;)
      
	ConteggioFile = ConteggioFile + 1

	FormatoTrasmissioneT = getTagCont( fullFile,&quot;FormatoTrasmissione&quot; )(0)
	if FormatoTrasmissioneT &lt;&gt; &quot;&quot; then 

		ConteggioFileUtili = ConteggioFileUtili + 1
		
		ProgressivoInvioT = getTagCont( fullFile,&quot;ProgressivoInvio&quot; )(0)	
		FormatoTrasmissioneT = getTagCont( fullFile,&quot;FormatoTrasmissione&quot; )(0)
		CodiceDestinatarioT = getTagCont( fullFile,&quot;CodiceDestinatario&quot; )(0)
		PECDestinatarioT = getTagCont( fullFile,&quot;PECDestinatario&quot; )(0)

		for n = 0 to ConteggioFileUtili   &apos; controlla se ci sonon duplicati nel codice progressivo 
			if ProgressivoInvio(n) = ProgressivoInvioT then
				ProgressivoDuplicato(cFattura) = true
				ProgressivoDuplicato(n) = true
				exit for
			endif
		next

		CedentePrestatore = getTagCont( fullFile,&quot;CedentePrestatore&quot; )(0)
		DatiAnagrafici = getTagCont( CedentePrestatore,&quot;DatiAnagrafici&quot; )(0)
		DenominazioneCedenteT = getTagCont( DatiAnagrafici,&quot;Denominazione&quot; ) (0)
		if DenominazioneCedenteT = &quot;&quot; then
			DenominazioneCedenteT = getTagCont( DatiAnagrafici,&quot;Nome&quot; )(0) &amp; &quot; &quot; &amp; getTagCont( DatiAnagrafici,&quot;Cognome&quot; )(0)

			if getTagCont( DatiAnagrafici,&quot;Titolo&quot; )(0) &lt;&gt; &quot;&quot; then
				DenominazioneCedenteT = getTagCont( DatiAnagrafici,&quot;Titolo&quot; )(0) &amp; &quot; &quot; &amp; DenominazioneCedenteT
			end if
		end if
		CfCedenteT = getTagCont( DatiAnagrafici,&quot;CodiceFiscale&quot; )(0)
		PivaCedenteT = getTagCont( DatiAnagrafici,&quot;IdCodice&quot; )(0)

		CessionarioCommittente = getTagCont( fullFile,&quot;CessionarioCommittente&quot; )(0)
		
		DatiAnagrafici = getTagCont( CessionarioCommittente,&quot;DatiAnagrafici&quot; )(0)
		AnagraficaCessionarioT = getTagCont( DatiAnagrafici,&quot;Denominazione&quot; ) (0)
		if AnagraficaCessionarioT = &quot;&quot; then
			AnagraficaCessionarioT = getTagCont( DatiAnagrafici,&quot;Nome&quot; )(0) &amp; &quot; &quot; &amp; getTagCont( DatiAnagrafici,&quot;Cognome&quot; )(0)

			if getTagCont( DatiAnagrafici,&quot;Titolo&quot; )(0) &lt;&gt; &quot;&quot; then
				AnagraficaCessionarioT = getTagCont( DatiAnagrafici,&quot;Titolo&quot; )(0) &amp; &quot; &quot; &amp; AnagraficaCessionarioT
			end if
		end if
		CfCessionarioT = getTagCont( DatiAnagrafici,&quot;CodiceFiscale&quot; )(0)
		PivaCessionarioT = getTagCont( DatiAnagrafici,&quot;IdCodice&quot; )(0)
		
		for each UnaFattura in getTagCont( fullFile,&quot;FatturaElettronicaBody&quot; ) &apos; analizza ogni fattura in un file
			DatiGenerali = getTagCont( UnaFattura,&quot;DatiGenerali&quot; )(0)
			DatiGeneraliDocumento = getTagCont( DatiGenerali,&quot;DatiGeneraliDocumento&quot; )(0)

			TipoDocumentoT=getTagCont( DatiGeneraliDocumento,&quot;TipoDocumento&quot; )(0)
			if TipoDocumentoT = &quot;TD04&quot; then
				segno = -1
			else
				segno = 1
			endif
				
			NomeFile(cFattura) = NomeFileT
			UrlFile(cFattura) = ConvertFromURL(filename)
			ProgressivoInvio(cFattura) = ProgressivoInvioT
			FormatoTrasmissione(cFattura) = FormatoTrasmissioneT
			TipoDocumento(cFattura) = TipoDocumentoT
			CfCedente(cFattura) = CfCedenteT
			PivaCedente(cFattura) = PivaCedenteT
			CfCessionario(cFattura) = CfCessionarioT
			PivaCessionario(cFattura) = PivaCessionarioT
		
			CodiceDestinatario(cFattura) = CodiceDestinatarioT
			PECDestinatario(cFattura) = PECDestinatarioT
			NumeroDocumento(cFattura) = getTagCont( DatiGeneraliDocumento,&quot;Numero&quot; )(0)
			DataDocumento(cFattura) = getTagCont( DatiGeneraliDocumento,&quot;Data&quot; )(0)
		    DivisaDocumento(cFattura) = getTagCont( DatiGeneraliDocumento,&quot;Divisa&quot; )(0)
			ImportoTotaleDocumento(cFattura) = val(getTagCont( DatiGeneraliDocumento,&quot;ImportoTotaleDocumento&quot; )(0))*segno
			ImportoBollo(cFattura) = getTagCont( DatiGeneraliDocumento,&quot;ImportoBollo&quot; )(0)
			DenominazioneCedente(cFattura) = DenominazioneCedenteT
			AnagraficaCessionario(cFattura) = AnagraficaCessionarioT
			Causale(cFattura) = getTagCont( DatiGeneraliDocumento,&quot;Causale&quot; )(0)
			
			DatiPagamento = getTagCont( UnaFattura,&quot;DatiPagamento&quot; )(0)
			CondizioniPagamento(cFattura) = getTagCont( DatiPagamento,&quot;CondizioniPagamento&quot; )(0)
 			ModalitaPagamento(cFattura) = getTagCont( DatiPagamento,&quot;ModalitaPagamento&quot; )(0)
			
			for each DatiCassaPrevidenziale in getTagCont( DatiGeneraliDocumento,&quot;DatiCassaPrevidenziale&quot; )
				ImportoContributoCassa(cFattura) = ImportoContributoCassa(cFattura) + val(getTagCont( DatiCassaPrevidenziale,&quot;ImportoContributoCassa&quot; )(0)) *segno
			next

			for each DatiRitenuta in getTagCont( DatiGeneraliDocumento,&quot;DatiRitenuta&quot; )
				ImportoRitenuta(cFattura) = ImportoRitenuta(cFattura) + val(getTagCont( DatiRitenuta,&quot;ImportoRitenuta&quot; )(0)) *segno
			next
			
			for each DatiRiepilogo in getTagCont( UnaFattura,&quot;DatiRiepilogo&quot; ) &apos; analizza i dati di riepilogo multipli
			
				Aliquota = getTagCont( DatiRiepilogo,&quot;AliquotaIVA&quot; )(0)
				Imponibile = val(getTagCont( DatiRiepilogo,&quot;ImponibileImporto&quot; )(0)) *segno
				Imposta = val(getTagCont( DatiRiepilogo,&quot;Imposta&quot; )(0)) *segno
		
				if Aliquota = &quot;0.00&quot; then
					select case getTagCont( DatiRiepilogo,&quot;Natura&quot; )(0)
						case &quot;N1&quot; 
							Natura1(cFattura) = Natura1(cFattura) + Imponibile
							Natura1S = 1
						case &quot;N2&quot;
							Natura2(cFattura) = Natura2(cFattura) + Imponibile
							Natura2S = 1
						case &quot;N3&quot;
							Natura3(cFattura) = Natura3(cFattura) + Imponibile
							Natura3S = 1
						case &quot;N4&quot;
							Natura4(cFattura) = Natura4(cFattura) + Imponibile
							Natura4S = 1
						case &quot;N5&quot;
							Natura5(cFattura) = Natura5(cFattura) + Imponibile
							Natura5S = 1
						case &quot;N6&quot;
							Natura6(cFattura) = Natura6(cFattura) + Imponibile
							Natura6S = 1						
						case &quot;N7&quot;
							Natura7(cFattura) = Natura7(cFattura) + Imponibile
							Natura7S = 1
						case else
							superoNature=true
					end select					
					else 
						if Aliquota = Aliquota1 or Aliquota1 = &quot;&quot; then
						Aliquota1 = Aliquota 
						Imponibile1(cFattura) = Imponibile1(cFattura) + Imponibile
						Imposta1(cFattura) = Imposta1(cFattura) + Imposta
						else
							if Aliquota = Aliquota2 or Aliquota2 = &quot;&quot; then 
							Aliquota2 = Aliquota 
							Imponibile2(cFattura) = Imponibile2(cFattura) + Imponibile
							Imposta2(cFattura) = Imposta2(cFattura) + Imposta
							else
								if Aliquota = Aliquota3 or Aliquota3 = &quot;&quot; then 
								Aliquota3 = Aliquota 
								Imponibile3(cFattura) = Imponibile3(cFattura) + Imponibile
								Imposta3(cFattura) = Imposta3(cFattura) + Imposta
								else
								if Aliquota = Aliquota4 or Aliquota4 = &quot;&quot; then 
									Aliquota4 = Aliquota 
									Imponibile4(cFattura) = Imponibile4(cFattura) + Imponibile
									Imposta4(cFattura) = Imposta4(cFattura) + Imposta
								else
									superoAliquote = 1	
								endif
							endif
						endif
					endif
				endif
			next
			cFattura = cFattura + 1

			&apos; ridimensiona le matrici al raggiungimento di un limite di capacit|e0|
			if cFattura &gt; Dimensione/100*90 then 
				Dimensione = Dimensione * 2
				cellaStato.string = &quot;Caricamento file &quot; &amp; Completamento &amp; &quot;% (Ridimensionamento matrici) .....&quot;
				redim preserve NomeFile(Dimensione)
				redim preserve UrlFile(Dimensione)
				redim preserve ProgressivoInvio(Dimensione)
				redim preserve ProgressivoDuplicato(Dimensione)
				redim preserve FormatoTrasmissione(Dimensione)
				redim preserve CodiceDestinatario(Dimensione)
				redim preserve PECDestinatario(Dimensione)
				redim preserve NumeroDocumento(Dimensione)
				redim preserve TipoDocumento(Dimensione)
				redim preserve DataDocumento(Dimensione)
				redim preserve DivisaDocumento(Dimensione)
				redim preserve ImportoTotaleDocumento(Dimensione)
				redim preserve ImportoContributoCassa(Dimensione)
				redim preserve ImportoRitenuta(Dimensione)
				redim preserve ImportoBollo(Dimensione)
				redim preserve DenominazioneCedente(Dimensione)
				redim preserve CfCedente(Dimensione)			
				redim preserve PivaCedente(Dimensione)
				redim preserve AnagraficaCessionario(Dimensione)
				redim preserve CfCessionario(Dimensione)
				redim preserve PivaCessionario(Dimensione)
				redim preserve Causale(Dimensione)
				redim preserve Natura1(Dimensione)
				redim preserve Natura2(Dimensione)
				redim preserve Natura3(Dimensione)
				redim preserve Natura4(Dimensione)
				redim preserve Natura5(Dimensione)
				redim preserve Natura6(Dimensione)
				redim preserve Natura7(Dimensione)
				redim preserve CondizioniPagamento(Dimensione)
				redim preserve ModalitaPagamento(Dimensione)
				redim preserve Imponibile1(Dimensione)
				redim preserve Imponibile2(Dimensione)
				redim preserve Imponibile3(Dimensione)
				redim preserve Imponibile4(Dimensione)
				redim preserve Imposta1(Dimensione)
				redim preserve Imposta2(Dimensione)
				redim preserve Imposta3(Dimensione)
				redim preserve Imposta4(Dimensione)
			endif
			
		next
	end if
 	Completamento = round(ConteggioFile/(TotFile+1) *100 ,0) &apos; visualizza percentuale avanzamento
	if Completamento &lt;&gt; Completamento1 and Completamento &lt;=100 then
		cellaStato.string = &quot;Caricamento file &quot; &amp; Completamento &amp; &quot;% .....&quot;
		Completamento1 = Completamento
	endif
 next
 
 
 if cFattura = 0 then
 	msgbox(&quot;Nessuna fattura |e8| stata trovata all&apos;interno dei file selezionati&quot;, 48)
	cellaStato.clearContents(com.sun.star.sheet.CellFlags.STRING)
 	exit sub
 endif

 
REM crea il nuovo foglio
 nomeFoglio = Format(Now, &quot;dd-MM-yyyy hh-mm-ss&quot;)
 ThisComponent.Sheets.insertNewByName( nomeFoglio ,  3 )
 Foglio = thiscomponent.sheets.getByName(nomeFoglio) 
 
 Riga = 0
 Col = 0

 

REM riga di intestazione  
 Foglio.getCellbyPosition(0,0).getRows().Height = 10 *100  &apos; setta altezza riga intestazione in centesimi di mm
 Foglio.getCellbyPosition(0,0).getColumns().width = 50 *100  &apos; setta larghezza colonna nome file in centesimi di mm

 if VersioneSw &gt;= 5 then Foglio.getCellRangeByName(&quot;1:1&quot;).charWeight = com.sun.star.awt.FontWeight.BOLD &apos; grassetto nel titolo

 Foglio.getCellbyPosition(Col,Riga).string = &quot;File XML&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;Formato&quot; &amp; cr &amp; &quot;trasmissione&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;Progressivo&quot; &amp; cr &amp; &quot;Invio&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;Codice destinatario&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;Tipo documento&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;Numero&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;Data&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;Divisa&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;Importo totale&quot;
 Col = Col +1
 if Aliquota1 &lt;&gt; &quot;&quot; then
	Foglio.getCellbyPosition(Col,Riga).string=&quot;Imponibile Aliquota &quot; &amp; cr &amp; Aliquota1
 	Col = Col +1
 	Foglio.getCellbyPosition(Col,Riga).string=&quot;Imposta Aliquota &quot; &amp; cr &amp; Aliquota1
	Col = Col +1
 endif
 if Aliquota2 &lt;&gt; &quot;&quot; then
	Foglio.getCellbyPosition(Col,Riga).string=&quot;Imponibile Aliquota &quot; &amp; cr &amp; Aliquota2
	Col = Col +1
	Foglio.getCellbyPosition(Col,Riga).string=&quot;Imposta Aliquota &quot; &amp; cr &amp; Aliquota2
	Col = Col +1
 endif
 if Aliquota3 &lt;&gt; &quot;&quot; then
	Foglio.getCellbyPosition(Col,Riga).string=&quot;Imponibile Aliquota &quot; &amp; cr &amp; Aliquota3
	Col = Col +1
	Foglio.getCellbyPosition(Col,Riga).string=&quot;Imposta Aliquota &quot; &amp; cr &amp; Aliquota3
	Col = Col +1
 endif
  if Aliquota4 &lt;&gt; &quot;&quot; then
	Foglio.getCellbyPosition(Col,Riga).string=&quot;Imponibile Aliquota &quot; &amp; cr &amp; Aliquota4
	Col = Col +1
	Foglio.getCellbyPosition(Col,Riga).string=&quot;Imposta Aliquota &quot; &amp; cr &amp; Aliquota4
	Col = Col +1
 endif
 if Natura1S then
	Foglio.getCellbyPosition(Col,Riga).string=&quot;N1 Escluse&quot;
	Col = Col +1
 endif 
 if Natura2S then
	Foglio.getCellbyPosition(Col,Riga).string=&quot;N2 Non soggette&quot;
	Col = Col +1
 endif 
 if Natura3S then
	Foglio.getCellbyPosition(Col,Riga).string=&quot;N3 Non imponibili&quot;
	Col = Col +1
 endif 
 if Natura4S then
	Foglio.getCellbyPosition(Col,Riga).string=&quot;N4 Esenti&quot;
	Col = Col +1
 endif 
 if Natura5S then
	Foglio.getCellbyPosition(Col,Riga).string=&quot;N5 Regime margine&quot;
	Col = Col +1
 endif 
 if Natura6S then
	Foglio.getCellbyPosition(Col,Riga).string=&quot;N6 Inversione contabile&quot;
	Col = Col +1
 endif 
 if Natura7S then
	Foglio.getCellbyPosition(Col,Riga).string=&quot;N7 Estero&quot;
	Col = Col +1
 endif 
 Foglio.getCellbyPosition(Col,Riga).string=&quot;Cassa&quot; &amp; cr &amp; &quot;previdenziale&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;Importo ritenute&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;Importo&quot; &amp; cr &amp; &quot;marca bollo&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;Condizioni&quot; &amp; cr &amp; &quot;pagamento&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;Modalit|e0|&quot; &amp; cr &amp; &quot;pagamento&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;Cedente&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;C.F. Cedente&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;P.iva. Cedente&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;Cessionario&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;C.F. Cessionario&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;P.iva. Cessionario&quot;
 Col = Col +1
 Foglio.getCellbyPosition(Col,Riga).string=&quot;Causale&quot;

 if CryptoOn then
	Col = Col +1
	Foglio.getCellbyPosition(Col,Riga).string=&quot;Hash MD5&quot;
	Col = Col +1
	Foglio.getCellbyPosition(Col,Riga).string=&quot;Hash SHA-256&quot;
 endif


REM stampa la tabella
 Completamento = 0
 
 for n = 0 to cFattura-1
 	Riga = Riga + 1
 	Col = 0
 	Foglio.getCellbyPosition(Col,Riga).string=UrlFile(n)
	Col = Col +1
 	Foglio.getCellbyPosition(Col,Riga).string=FormatoTrasmissione(n)
	Col = Col +1
 	Foglio.getCellbyPosition(Col,Riga).string=ProgressivoInvio(n)
  	if ProgressivoDuplicato(n) then
		Foglio.Annotations.insertNew(Foglio.getCellbyPosition(Col,Riga).getCellAddress, &quot;Questo progressivo |e8| usato anche in altri documenti della tabella&quot;)
	endif
	Col = Col +1
 	Foglio.getCellbyPosition(Col,Riga).string=CodiceDestinatario(n)
	if testCodiceDestinatario(CodiceDestinatario(n),FormatoTrasmissione(n)) = 0  then
		Foglio.Annotations.insertNew(Foglio.getCellbyPosition(Col,Riga).getCellAddress, &quot;Il codice destinatario |e8| errato per il formato del documento&quot;)
	endif
	Col = Col +1
	Foglio.getCellbyPosition(Col,Riga).string=DescTipoDocumento(TipoDocumento(n))
	Col = Col +1
	Foglio.getCellbyPosition(Col,Riga).string=NumeroDocumento(n)

	if isnumeric(NumeroDocumento(n)) then
		if abs(val(NumeroDocumento(n)) - val(precNumDoc)) &lt;&gt; 1 and precNumDoc &lt;&gt; &quot;&quot; then
			Foglio.Annotations.insertNew(Foglio.getCellbyPosition(Col,Riga).getCellAddress, &quot;Discontinuit|e0| nella sequenza numerica&quot;
		endif
		precNumDoc = NumeroDocumento(n)
	endif

	Col = Col +1
	Foglio.getCellbyPosition(Col,Riga).string=DataDocumento(n)
	Col = Col +1
	Foglio.getCellbyPosition(Col,Riga).string=DivisaDocumento(n)
	Col = Col +1
	TotaleCalcolato = Imponibile1(n) + Imposta1(n) +Imponibile2(n) + Imposta2(n) +Imponibile3(n) + Imposta3(n) + Natura1(n) + Natura2(n) + Natura3(n) + Natura4(n) + Natura5(n)
	if TipoDocumento(n) = &quot;TD04&quot; then TotaleCalcolato = 0 -TotaleCalcolato   &apos;inverte segno importo se nota di credito

	if ImportoTotaleDocumento(n) &lt;&gt; TotaleCalcolato then
		Foglio.Annotations.insertNew(Foglio.getCellbyPosition(Col,Riga).getCellAddress, &quot;Il totale dichiarato differisce da quello calcolato (&quot; &amp; TotaleCalcolato &amp; &quot;)&quot;)
	endif
	Foglio.getCellbyPosition(Col,Riga).value=ImportoTotaleDocumento(n)
	Col = Col +1

	if Aliquota1 &lt;&gt; &quot;&quot; then
		Foglio.getCellbyPosition(Col,Riga).value=Imponibile1(n)
		Col = Col +1
		Foglio.getCellbyPosition(Col,Riga).value=Imposta1(n)
		if Imposta1(n) &lt;&gt; round(Imponibile1(n)*val(Aliquota1)/100,2) then
			Foglio.Annotations.insertNew(Foglio.getCellbyPosition(Col,Riga).getCellAddress, &quot;L&apos;imposta non corrisponde al calcola dell&apos;aliquota &quot;&amp; round(Imponibile1(n)*val(Aliquota1)/100,2))
		Endif
		Col = Col +1
	endif
	if Aliquota2 &lt;&gt; &quot;&quot; then
		Foglio.getCellbyPosition(Col,Riga).value=Imponibile2(n)
		Col = Col +1
		Foglio.getCellbyPosition(Col,Riga).value=Imposta2(n)
		if Imposta2(n) &lt;&gt; round(Imponibile2(n)*val(Aliquota2)/100,2) then
			Foglio.Annotations.insertNew(Foglio.getCellbyPosition(Col,Riga).getCellAddress, &quot;L&apos;imposta non corrisponde al calcola dell&apos;aliquota &quot;&amp; round(Imponibile2(n)*val(Aliquota2)/100,2))
		Endif
		Col = Col +1
	endif
	if Aliquota3 &lt;&gt; &quot;&quot; then
		Foglio.getCellbyPosition(Col,Riga).value=Imponibile3(n)
		Col = Col +1
		Foglio.getCellbyPosition(Col,Riga).value=Imposta3(n)
		if Imposta3(n) &lt;&gt; round(Imponibile3(n)*val(Aliquota3)/100,2) then
			Foglio.Annotations.insertNew(Foglio.getCellbyPosition(Col,Riga).getCellAddress, &quot;L&apos;imposta non corrisponde al calcola dell&apos;aliquota &quot;&amp; round(Imponibile3(n)*val(Aliquota3)/100,2))
		Endif
		Col = Col +1
	endif
	if Aliquota4 &lt;&gt; &quot;&quot; then
		Foglio.getCellbyPosition(Col,Riga).value=Imponibile4(n)
		Col = Col +1
		Foglio.getCellbyPosition(Col,Riga).value=Imposta4(n)
		if Imposta4(n) &lt;&gt; round(Imponibile4(n)*val(Aliquota4)/100,2) then
			Foglio.Annotations.insertNew(Foglio.getCellbyPosition(Col,Riga).getCellAddress, &quot;L&apos;imposta non corrisponde al calcola dell&apos;aliquota &quot;&amp; round(Imponibile4(n)*val(Aliquota4)/100,2))
		Endif
		Col = Col +1
	endif
	
	if Natura1S then
	 	Foglio.getCellbyPosition(Col,Riga).value=Natura1(n)
	Col = Col +1
	endif
	if Natura2S then
	 	Foglio.getCellbyPosition(Col,Riga).value=Natura2(n)
	Col = Col +1
	endif
	if Natura3S then
	 	Foglio.getCellbyPosition(Col,Riga).value=Natura3(n)
	Col = Col +1
	endif
	if Natura4S then
	 	Foglio.getCellbyPosition(Col,Riga).value=Natura4(n)
	Col = Col +1
	endif
	if Natura5S then
	 	Foglio.getCellbyPosition(Col,Riga).value=Natura5(n)
	Col = Col +1
	endif
	if Natura6S then
	 	Foglio.getCellbyPosition(Col,Riga).value=Natura6(n)
	Col = Col +1
	endif
	if Natura7S then
	 	Foglio.getCellbyPosition(Col,Riga).value=Natura7(n)
	Col = Col +1
	endif
	
	Foglio.getCellbyPosition(Col,Riga).value=ImportoContributoCassa(n)
	Col = Col +1

 	Foglio.getCellbyPosition(Col,Riga).value=ImportoRitenuta(n)
	Col = Col +1
		
	Foglio.getCellbyPosition(Col,Riga).value=ImportoBollo(n)
	if ImportoBollo(n) = 0 and TotaleCalcolato &gt; MinimoPerBollo and (Imposta1(n) + Imposta2(n) + Imposta2(n) ) =0 then
		Foglio.Annotations.insertNew(Foglio.getCellbyPosition(Col,Riga).getCellAddress, &quot;L&apos;imposta di bollo |e8| a zero mentre potrebbe essere dovuta&quot;)
	endif
	Col = Col +1
	
	Foglio.getCellbyPosition(Col,Riga).string=DescCondizioniPagamento(CondizioniPagamento(n))
	Col = Col +1
	
	Foglio.getCellbyPosition(Col,Riga).string=DescModalitaPagamento(ModalitaPagamento(n))
	Col = Col +1	
	
	Foglio.getCellbyPosition(Col,Riga).string=Uesc(DenominazioneCedente(n))
	Col = Col +1
	Foglio.getCellbyPosition(Col,Riga).string=CfCedente(n)
	if test_cf(CfCedente(n)) = 0 then
		Foglio.Annotations.insertNew(Foglio.getCellbyPosition(Col,Riga).getCellAddress, &quot;Codice fiscale non corretto&quot;)
	endif 
 	Col = Col +1
	Foglio.getCellbyPosition(Col,Riga).string=PivaCedente(n)
	if test_piva_it(PivaCedente(n)) = 0 then
		Foglio.Annotations.insertNew(Foglio.getCellbyPosition(Col,Riga).getCellAddress, &quot;Partita iva non corretta&quot;)
	endif 
 	Col = Col +1
 		
	Foglio.getCellbyPosition(Col,Riga).string=Uesc(AnagraficaCessionario(n))
	Col = Col +1
	Foglio.getCellbyPosition(Col,Riga).string=CfCessionario(n)
	if test_cf(CfCessionario(n)) = 0 then
		Foglio.Annotations.insertNew(Foglio.getCellbyPosition(Col,Riga).getCellAddress, &quot;Codice fiscale non corretto&quot;)
	endif 
	Col = Col +1
	Foglio.getCellbyPosition(Col,Riga).string=PivaCessionario(n)
	if test_piva_it(PivaCessionario(n)) = 0 then
		Foglio.Annotations.insertNew(Foglio.getCellbyPosition(Col,Riga).getCellAddress, &quot;Partita iva non corretta&quot;)
	endif 
	Col = Col +1
	
	Foglio.getCellbyPosition(Col,Riga).string=Uesc(Causale(n))
	Col = Col +1

	Completamento = round(n/cfattura *100 ,0) &apos; visualizza percentuale avanzamento
	if Completamento &lt;&gt; Completamento1 and Completamento &lt;=100 then
		cellaStato.string = &quot;Generazione tabella &quot; &amp; Completamento &amp; &quot;% .....&quot;
		Completamento1 = Completamento
	endif
 next			


REM calcola Hash ( se presente il modulo )
 if CryptoOn then
	UrlT = &quot;&quot;
	cellaStato.string = &quot;Calcolo hash .....&quot;
 	for n = 0 to cFattura-1
		if UrlFile(n) &lt;&gt; UrlT then
			Md5T = obj.GetFileHash(urlFile(n),&quot;MD5&quot;)
			Sha256T = obj.GetFileHash(urlFile(n),&quot;SHA-256&quot;)
			UrlT = UrlFile(n)
		endif
		Foglio.getCellbyPosition(Col,n+1).string = Md5T
		Foglio.getCellbyPosition(Col+1,n+1).string = Sha256T
	next
	Col = Col +1
 endif
	
	
 cellaStato.string = &quot;Completamento .....&quot;


REM stampa la riga totali
 Col = 0
 Riga = Riga + 1
 
 if VersioneSw &gt;= 5 then Foglio.getCellRangeByName(Riga+1 &amp; &quot;:&quot; &amp; Riga+1).charWeight = com.sun.star.awt.FontWeight.BOLD &apos; grassetto nei totali

 Foglio.getCellbyPosition(Col,Riga).string=&quot;TOTALI:&quot; &apos; sotto nome file
 Col = Col +1
 L = Chr(Col+65)
 Foglio.getCellbyPosition(Col,Riga).formula=&quot;=countA(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot; &apos;  formato trasmissione
 Col = Col +1
 &apos;progressivo invio
 Col = Col +1
 &apos;codice destinatario
 Col = Col +1
 &apos;tipo doc
 Col = Col +1
 &apos;Numero
 Col = Col +1
 &apos;data
 Col = Col +1
 &apos;Divisa
 Col = Col +1
 L = Chr(Col+65)
 Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
 Col = Col +1
  
 if Aliquota1 &lt;&gt; &quot;&quot; then
	L = Chr(Col+65)
	Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
 	Col = Col +1
 	L = Chr(Col+65)
 	Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
	Col = Col +1
 endif
 if Aliquota2 &lt;&gt; &quot;&quot; then
	L = Chr(Col+65)
	Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
	Col = Col +1
	L = Chr(Col+65)
	Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
	Col = Col +1
 endif
 if Aliquota3 &lt;&gt; &quot;&quot; then
	L = Chr(Col+65)
	Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
	Col = Col +1
	L = Chr(Col+65)
	Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
	Col = Col +1
 endif
 if Aliquota4 &lt;&gt; &quot;&quot; then
	L = Chr(Col+65)
	Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
	Col = Col +1
	L = Chr(Col+65)
	Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
	Col = Col +1
 endif
 L = Chr(Col+65)
 if Natura1S then
	Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
	Col = Col +1
 endif 
 L = Chr(Col+65)
 if Natura2S then
	Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
	Col = Col +1
 endif 
 L = Chr(Col+65)
 if Natura3S then
	Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
	Col = Col +1
 endif 
 L = Chr(Col+65)
 if Natura4S then
	Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
	Col = Col +1
 endif 
 L = Chr(Col+65)
 if Natura5S then
	Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
	Col = Col +1
 endif 
 L = Chr(Col+65)
 if Natura6S then
	Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
	Col = Col +1
 endif 
 L = Chr(Col+65)
 if Natura7S then
	Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
	Col = Col +1
 endif 
 
 L = Chr(Col+65)
 Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
 Col = Col +1
 L = Chr(Col+65)
 Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;
 Col = Col +1
 L = Chr(Col+65)
 Foglio.getCellbyPosition(Col,Riga).formula=&quot;=sum(&quot;&amp; L &amp;&quot;2:&quot;&amp; L &amp; Riga &amp;&quot;)&quot;

 
REM allinea a destra nome file
 Foglio.getCellrangeByPosition(0, 1, 0, Riga).HoriJustify = com.sun.star.table.CellHoriJustify.RIGHT


REM setta formato numeri decimali
 LocalSettings.Language = &quot;it&quot;
 LocalSettings.Country = &quot;it&quot;
 NumberFormats = ThisComponent.NumberFormats
 NumberFormatString = &quot;0,00&quot;
 
 NumberFormatId = NumberFormats.queryKey(NumberFormatString, LocalSettings, True)
 If NumberFormatId = -1 Then
 	NumberFormatId = NumberFormats.addNew(NumberFormatString, LocalSettings)
 End If

 Foglio.getCellrangeByPosition(8, 1, Col, Riga).NumberFormat = NumberFormatId
  

    
REM aggiunge filtro all&apos;intestazione
 ThisComponent.getcurrentController.setActiveSheet(Foglio)

 document = ThisComponent.CurrentController.Frame
 dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

 args2(0).Name = &quot;ToPoint&quot;
 args2(0).Value = &quot;$A$1&quot;
 dispatcher.executeDispatch(document, &quot;.uno:GoToCell&quot;, &quot;&quot;, 0, args2())
 dispatcher.executeDispatch(document, &quot;.uno:DataFilterAutoFilter&quot;, &quot;&quot;, 0, Array())

 Controller = ThisComponent.getcurrentController
 Controller.setActiveSheet(Foglio)

 cellaStato.clearContents(com.sun.star.sheet.CellFlags.STRING)


 &apos; prepara il comando di esportazione PDF
 Foglio.getCellbyPosition(0,Riga+2).string=&quot;Esporta tutti i documenti in PDF&quot;
 Foglio.getCellbyPosition(0,Riga+2).charcolor = RGB(0,0,255)

 &apos; prepara il comando di confronto ricevute
 Foglio.getCellbyPosition(0,Riga+4).string=&quot;Compara con ricevute telematiche di invio&quot;
 Foglio.getCellbyPosition(0,Riga+4).charcolor = RGB(0,0,255)
   
 Foglio.getCellbyPosition(0,Riga+6).string=&quot;Compara con metadati dei documenti ricevuti&quot;
 Foglio.getCellbyPosition(0,Riga+6).charcolor = RGB(0,0,255)
   
REM imposta macro per visualizzatore su doppio click   
 dim Prop(1) as new com.sun.star.beans.PropertyValue

 Prop(0).name = &quot;EventType&quot;
 Prop(0).value = &quot;Script&quot;
 Prop(1).name = &quot;Script&quot;
 Prop(1).value = &quot;vnd.sun.star.script:Standard.ImportazioneFile.Evento?language=Basic&amp;location=document&quot; 

Foglio.Events.replaceByName(&quot;OnDoubleClick&quot;, Prop())


REM stampa report
 report = &quot;Analizzati n. &quot; &amp; ConteggioFile+0  &amp; &quot; file, di cui n. &quot; &amp; ConteggioFileUtili+0 &amp; &quot; contenenti un totale di &quot; &amp; cFattura+0 &amp; &quot; documenti validi &quot; &amp; cr 
 report = report &amp; &quot;Tabella di analisi riportata nel foglio &quot; &amp; nomeFoglio &amp; cr
 report = report &amp; &quot;Tempo impiegato: &quot; &amp; int((Now-tempoInizio)*100000) &amp; &quot; secondi&quot;

 call aggiornaReport(report)
   
 beep  
  
 if superoAliquote then msgbox(&quot;Nei documenti sono presenti pi|f9| aliquote iva di quelle visualizzabili in tabella.&quot;)
 if superoNature then msgbox(&quot;Il documento &quot; &amp; getTagCont( DatiGeneraliDocumento,&quot;Numero&quot; )(0) &amp; &quot; contiene imponibili senza iva ma senza specificazione di natura&quot; )

End Sub



REM estrae i contenuti del tag specificato
function getTagCont(txt as string, tag as string) 
  dim oTextSearch as object
  dim result(0) as string
  dim start as long
  dim count as long
  dim oOptions as object
  dim sFound as string
  dim oFound as variant
  
  oTextSearch = CreateUnoService(&quot;com.sun.star.util.TextSearch&quot;)
  oOptions = CreateUnoStruct(&quot;com.sun.star.util.SearchOptions&quot;)
  oOptions.algorithmType = com.sun.star.util.SearchAlgorithms.REGEXP
  oOptions.searchString = &quot;&lt;&quot;&amp; tag &amp;&quot;&gt;(.*?)&lt;/&quot;&amp; tag &amp;&quot;&gt;&quot;
  oTextSearch.setOptions(oOptions)
  start = 0
  count = 0
  
  do while 1 
    oFound = oTextSearch.searchForward(txt, start, Len(txt)) 
  
	If oFound.subRegExpressions = 0 Then 
		getTagCont = result()
		exit function
	endif
   
&apos;   sFound = mid(txt, oFound.startOffset(0) + 1, oFound.endOffset(0) - oFound.startOffset(0))
	sFound = mid(txt, oFound.startOffset(1) + 1, oFound.endOffset(1) - oFound.startOffset(1))

  	redim preserve result(count)  
  	result(count) = sFound
   	start = oFound.endOffset(1)
  	count = count + 1
  	
  loop
    
end function



REM finestra di selezione mu|f2|tipla dei files
sub selezionaFiles(pathfile as string) as object
 Dim usaOfficePicker as boolean
 Dim file_dialog as Object
 Dim status as Integer
 Dim TotFile as long
 
 GlobalScope.BasicLibraries.LoadLibrary(&quot;Tools&quot;)
 ucb = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)

 &apos; questo serve per evitare un bug per cui in Libreoffice minori di 6 su Windows non si possono selezionare pi|f9| file. Uso due diverse librerie
 &apos; solo per Libreoffice 4 e 5 sui Windows uso OfficeFilePicker
 &apos; per tutte le altre versioni uso FilePicker
 usaOfficePicker = ( VersioneSw &lt; 6 and getGUIType = 1 ) 
 
 if usaOfficePicker then
	file_dialog = CreateUnoService(&quot;com.sun.star.ui.dialogs.OfficeFilePicker&quot;) 
 else
	file_dialog = CreateUnoService(&quot;com.sun.star.ui.dialogs.FilePicker&quot;)
	file_dialog.appendFilter(&quot;Fatture elettroniche (xml, p7m)&quot;,&quot;*.xml; *.p7m&quot;)
 endif

 file_dialog.SetDisplayDirectory(pathfile)
 file_dialog.setMultiSelectionMode(True)
 
 file_dialog.appendFilter(&quot;Tutti i file&quot;,&quot;*.*&quot;)
 status = file_dialog.Execute()
   
 If status = 0 Then
	file_dialog.Dispose()
	selezionaFiles = array(&quot;&quot;)
    exit sub
 end if 
   
 if usaOfficePicker then
	TotFile = ubound ( file_dialog.getFiles())
 else
 	TotFile = ubound ( file_dialog.getSelectedFiles())
 endif
 dim files(TotFile)

 if usaOfficePicker then
 	if TotFile = 0 then
 		files(0) = file_dialog.Files(0) &apos; se selezionato un solo file
 	else
		for n = 1 to TotFile &apos; se selezionati pi|f9| file
 			files(n-1) =  file_dialog.Files(0) &amp; file_dialog.Files(n)
	    next 
	endif
 else
	set files = file_dialog.GetSelectedFiles()
 endif 
 
 file_dialog.Dispose()
  
 selezionaFiles = files
end sub


	
REM carica file
sub Aprifile(url as string) as string
 dim FileNo as string
 dim fullfile as string
 dim blocco as string
 dim posizione as long
	
 if FileExists(url) = 0 then 
	call msgbox(&quot;ERRORE: Il file &quot; &amp; url &amp; &quot; non esiste. Potrebbe essere stato rinominato, spostato o cancellato.&quot;,16)
	exit sub
 endif

 posizione=1
 FileNo = Freefile
 
 Open ConvertToURL(url) For Binary As FileNo   &apos; carica il file in modalit|e0| binaria
 Do While not eof(FileNo)
    Get #FileNo, posizione, blocco 
    posizione = posizione + len(blocco)
	fullfile=fullfile &amp; blocco
 Loop
 Close #FileNo
 fullFile = replace(fullFile,chr(10) ,&quot;&quot;)  &apos; toglie CR e LF
 fullFile = replace(fullFile,chr(13) ,&quot;&quot;) 
 
 &apos; la routine seguente serve a gestire un problema di OpenOffice che non riesce ad aprire alcuni file xml in binario
 &apos; se fallisce il caricamento in binario si tenta in ascii 
 if len(fullfile) = 0 then  
    on error goto salta:
	Open ConvertToURL(url) For input As FileNo   
	Do While not eof(FileNo)
    	input #FileNo, blocco 
 		fullfile=fullfile &amp; blocco
 	Loop
 	salta:
 	Close #FileNo
 endif

 if len(fullfile) = 0 then
 	call msgbox(&quot;A causa di un errore nell&apos;applicazione non |e8| possibile aprile il file  &quot; &amp; url &amp; chr(13) &amp; &quot;Pu|f2| segnalare il problema all&apos;autore ai riferimenti indicati nel foglio: &quot; &amp; chr(34) &amp; &quot;Crediti e licenza&quot; &amp; chr(34) , 16)
 endif
 	
 if lcase(right(url,4)) = &quot;.p7m&quot; then
 	fullfile = 	pulisciP7M(fullfile, url)
 endif
  
 fullFile = pulisciTag(fullFile)

 Aprifile = fullfile
 
end sub


 
function pulisciP7M(fullfile as string, url as string)
&apos;rimuove caratteri non ASCII da p7m
&apos; header composto come segue (specifiche ASN.1 / BER):
&apos; 1|b0| byte 0x04  fisso di start
&apos; 2|b0| byte &lt; 128 indica la dimensione del blocco dati. Fine header
&apos; invece byte ha il bit pi|f9| significativo settato (&gt;= 128) indica con i bit meno significativi quanti dei byte (n) che seguono indicano la dimensione del blocco dati
&apos; n byte - presenti solo se il 2|b0| byte |e8| &gt;= 128

  dim oTextSearch as object
  dim oOptions as object
  dim oFound as object
  dim risultato As String
  dim fStart as long
  dim fEnd as long


&apos;cerca l&apos;inizio del XML
  oTextSearch = CreateUnoService(&quot;com.sun.star.util.TextSearch&quot;)
  oOptions = CreateUnoStruct(&quot;com.sun.star.util.SearchOptions&quot;)
  oOptions.algorithmType = com.sun.star.util.SearchAlgorithms.REGEXP
  oOptions.searchString = &quot;&lt;&quot;
  oTextSearch.setOptions(oOptions)
  oFound = oTextSearch.searchForward(fullfile, 1, Len(fullfile)) 

  if ofound.subRegExpressions = 0 then &apos;se il P7M ha firma integrale non si decodifica
  	msgbox(&quot;Il file &quot;&amp; ConvertFromURL(url) &amp; &quot; contiene un tipo di firma che non |e8| decodificabile dall&apos;applicazione. Occorre prima estrarre l&apos;XML dal file P7M per procedere all&apos;apertura.&quot;,16)
    exit function
  endif
  
  fStart=oFound.startOffset(0)+1

  oOptions.searchString = &quot;\x04&quot;
  oTextSearch.setOptions(oOptions)
 
  risultato=&quot;&quot;
  do while 1 
    oFound = oTextSearch.searchForward(fullfile, fStart, Len(fullfile)) 
	If oFound.subRegExpressions = 0 Then 
			risultato = risultato &amp; mid(fullfile, fStart ,  Len(fullfile)-fStart )
			pulisciP7M = risultato
		exit function
	endif

	fEnd = oFound.startOffset(0)+1
	risultato = risultato &amp; mid(fullfile, Fstart, fEnd - Fstart ) 
	select case mid(fullfile, Fend+1,1)
		case chr(129)
			fStart = fEnd + 3
		case chr(130)
			fStart = fEnd + 4
		case chr(131)
			fStart = fEnd + 5
			
		case chr(8217)
			fStart = fEnd + 3
		case chr(8218)
			fStart = fEnd + 4
		case chr(8219)
			fStart = fEnd + 5
			
		case chr(65409)
			fStart = fEnd + 3
		case chr(65410)
			fStart = fEnd + 4	
		case chr(65411)
			fStart = fEnd + 5
			
		case chr(65532)
			fStart = fEnd + 3
		case chr(65533)
			fStart = fEnd + 4	
		case chr(65534)
			fStart = fEnd + 5
			
		case else
			fStart = fEnd + 2
	end select
 loop
 
end function

 
REM by Marco Gualmini


function pulisciTag(fullfile as string)
&apos;rimuove gli eventuali parametri dai tag

  dim oTextSearch as object
  dim oOptions as object
  dim oFound as object
  dim risultato As String
  dim fStart as long
  dim fEnd as long

  oTextSearch = CreateUnoService(&quot;com.sun.star.util.TextSearch&quot;)
  oOptions = CreateUnoStruct(&quot;com.sun.star.util.SearchOptions&quot;)
  oOptions.algorithmType = com.sun.star.util.SearchAlgorithms.REGEXP
  
  fStart = 1

  oOptions.searchString = &quot;&lt;\w+(\s+.*?)&gt;&quot;
  oTextSearch.setOptions(oOptions)
 
  risultato=&quot;&quot;
  do while 1 
    oFound = oTextSearch.searchForward(fullfile, fStart, Len(fullfile)) 
	If oFound.subRegExpressions = 0 Then 
			risultato = risultato &amp; mid(fullfile, fStart ,  Len(fullfile)-fStart )
			pulisciTag = risultato
		exit function
	endif

	fEnd = oFound.startOffset(1)+1
	risultato = risultato &amp; mid(fullfile, Fstart, fEnd - Fstart ) 
	fStart = oFound.endOffset(1)+1

 loop
 
end function



REM viene chiamata dal dopio click sul foglio
Sub Evento()

 GlobalScope.BasicLibraries.LoadLibrary(&quot;Tools&quot;)

 dim FoglioO as object
 dim oActiveCell as object
 dim Riga as long
 dim Colonna as integer
 dim UrlFile as string
 dim NumDoc as string
 dim dataDoc as date
 
 FoglioO = ThisComponent.CurrentController.ActiveSheet    
 oActiveCell = ThisComponent.getCurrentSelection
 Riga = oActiveCell.RangeAddress.StartRow
 Colonna = oActiveCell.RangeAddress.StartColumn

 if Riga = 0 then 
 	exit sub
 endif
 
 if oActiveCell.string = &quot;Esporta tutti i documenti in PDF&quot; then
 	call EsportaTuttoPdf(FoglioO)
 	exit sub
 endif

 if oActiveCell.string = &quot;Compara con ricevute telematiche di invio&quot; then
 	call ComparaRicevute(FoglioO)
 	exit sub
 endif
 
 if oActiveCell.string = &quot;Compara con metadati dei documenti ricevuti&quot; then
 	call ComparaRicezioni(FoglioO)
 	exit sub
 endif

 UrlFile = FoglioO.getCellbyPosition(0,Riga).string
 NumDoc  = FoglioO.getCellbyPosition(5,Riga).string
 DataDoc = FoglioO.getCellbyPosition(6,Riga).string
 
 if UrlFile=&quot;&quot; or NumDoc=&quot;&quot; then
 	exit sub
 endif

 Anteprima(UrlFile, NumDoc, DataDoc)
end sub



sub EsportaTuttoPdf(foglio as object)
 dim n as long
 dim c as long
 dim file as string
 dim filepdf as string
 dim numdoc as string
 dim datadoc as string
 dim path as string
 dim oFolderPicker as object
 dim dispatcher as object
 dim document as object
 dim aFilterData(2) as new com.sun.star.beans.PropertyValue
 dim args1(3) as new com.sun.star.beans.PropertyValue
 
 GlobalScope.BasicLibraries.loadLibrary(&quot;Tools&quot;)
  
 if msgbox(&quot;Tutti i documenti elencati verranno convertiti in formato PDF. L&apos;operazione pu|f2| richiedere tempo. Eventuali file omonimi gi|e0| esistenti verranno sovrascritti. Si conferma di voler procedere?&quot;,4+32+256) = 7 then
 	exit sub
 endif

&apos; chiede la directory in cui salvare i pdf 
 oFolderPicker = CreateUnoService( &quot;com.sun.star.ui.dialogs.FolderPicker&quot; )
 oFolderPicker.setTitle( &quot;Selezionare la directory dove salvare i file PDF&quot; )
 If oFolderPicker.execute() = 1 Then
 	path = oFolderPicker.getDirectory()
 else
 	exit sub
 endif

 aFilterData(0).Name = &quot;Selection&quot;
 aFilterData(0).Value = thiscomponent.sheets.getByIndex(1)
 aFilterData(1).Name = &quot;ExportNotes&quot;
 aFilterData(1).Value = false
 
 args1(0).Name = &quot;FilterName&quot;
 args1(0).Value = &quot;calc_pdf_Export&quot;
 args1(1).Name = &quot;FilterData&quot;
 args1(1).Value = aFilterData

 n = 1
 c = 0
 do  
 	file = foglio.getCellbyPosition(0,n).string
 	if file=&quot;&quot; or file=&quot;TOTALI:&quot; then exit do 

 	numdoc = Foglio.getCellbyPosition(5,n).string
 	datadoc = Foglio.getCellbyPosition(6,n).string
 	if Anteprima(file, numdoc, datadoc) &lt;&gt; -1 then

		file = replace(file, &quot;\&quot;,&quot;/&quot;)	
  		file = path &amp; &quot;/&quot; &amp; FileNameOutOfPath( file, &quot;/&quot;)
	  	filepdf = left(file, len(file)-4 ) &amp;&quot;.pdf&quot;
  		
	 	if dir(filepdf) &lt;&gt; &quot;&quot; then &apos; se il file esiste gi|e0| lo rinomina con il numero di riga
 			filepdf = left(file, len(file)-4 ) &amp; &quot;-&quot; &amp; n &amp; &quot;.pdf&quot;
		endif
  
		ThisComponent.storeToURL(filepdf,args1()) &apos; salva PDF
		
		c = c+1
	  endif
	n=n+1
 loop
 
 beep
 msgbox(&quot;Operazione completata. &quot; &amp; c &amp; &quot; documenti PDF esportati&quot;,64)
end sub



&apos; aggiunge il testo nella cella report
sub aggiornaReport(report as string)
 dim cr as string
 cr = Chr(10) &apos; ritorno a capo
 dim cellaReport as object
 cellaReport =  thiscomponent.sheets.getByIndex(0).getCellRangeByName( &quot;Report&quot; )
	
 if cellaReport.string = &quot;&quot; then 
	cellaReport.String =  now() &amp; cr &amp; report 
 else 
	cellaReport.String =  now() &amp; cr &amp; report &amp; cr &amp; &quot;-------------&quot; &amp; cr &amp; cellaReport.String
 endif
end sub

REM by Marco Gualmini

</script:module>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="TipoVista" script:language="StarBasic">option explicit

Sub VistaEspansa
 thiscomponent.sheets.getByName(&quot;Visualizzatore&quot;).getCellrangebyname(&quot;TabellaBeniServizi&quot;).setPropertyValue( &quot;IsTextWrapped&quot;, true )
 thiscomponent.sheets.getByName(&quot;Visualizzatore&quot;).getCellrangebyname(&quot;TabellaBeniServizi&quot;).rows.OptimalHeight = TRUE  
End Sub


Sub VistaCompatta
 thiscomponent.sheets.getByName(&quot;Visualizzatore&quot;).getCellrangebyname(&quot;TabellaBeniServizi&quot;).setPropertyValue( &quot;IsTextWrapped&quot;, false )
End Sub

rem by Marco Gualmini

</script:module>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Ricevute" script:language="StarBasic">REM  *****  BASIC  *****

option explicit

Sub ComparaRicevute(foglio as object)

 dim usaOfficePicker as boolean
 dim file_dialog as object 
 dim pathfile as string
 dim status as integer
 dim TotFile as long
 dim r as string
 dim n as long
 dim m as long
 dim t as long
 dim file as string
 dim files as object
 dim fullfile as string
 dim filefatt as string
 
 dim dimensione as long
 
 dim coloreScarto as string
 dim coloreConsegna as string
 dim coloreImpConsegna as string
 
 coloreScarto = RGB(255,150,150)
 coloreConsegna = RGB(200,255,200)
 coloreImpConsegna = RGB(255,250,150)

 dim nScarto as long
 dim nRicImpCons as long
 dim nRicCons as long
 dim correlato as integer
 dim fattureCorrelate as long
 dim colonnaLibera as integer
 dim colonnaHash as integer
 dim errorehash as long
 
 dim report as string

 dim cr as string
 cr = Chr(10) &apos; ritorno a capo

 GlobalScope.BasicLibraries.loadLibrary(&quot;Tools&quot;)
  
 if msgbox(&quot;Vengono caricati file XML contenenti ricevute relative alle fatture elettroniche, che verranno correlate alla tabella visualizzata.&quot; &amp; cr &amp; &quot;Si tratta di una analisi approssimativa, in cui la correlazione si basa unicamente sul nome del file.&quot; &amp; cr &amp; &quot;Si conferma di volere procedere?&quot;,4+32+256) = 7 then
 	exit sub
 endif


REM individua le colonne necessarie
 for n = 0 to 50
 	if colonnaLibera = 0 and Foglio.getCellbyPosition(n,0).string = &quot;&quot; then
 		colonnaLibera = n
 	end if
 	if Foglio.getCellbyPosition(n,0).string = &quot;Esito&quot; then
		colonnaLibera = n
	end if
  	if Foglio.getCellbyPosition(n,0).string = &quot;Hash SHA-256&quot; then
 		colonnaHash = n
 	end if
 next 
 
 files = selezionaFiles(Tools.Strings.DirectoryNameoutofPath(ThisComponent.url, &quot;/&quot;) )
 if files(0) = &quot;&quot; then exit sub
 TotFile = ubound(files) +1
 dimensione = TotFile 
 
 dim RicevutaFile(dimensione) as string             
 dim RicevutaTipo(dimensione) as string
 dim RicevutaHash(dimensione) as string
 dim RicevutaIdSdi(dimensione) as string
 dim RicevutaDataTrasm(dimensione) as string 
 dim RicevutaDataConsegna(dimensione) as string 
 dim statoConsegna as integer
 dim statoScarto as integer
 
REM analizza ogni file ricevuta
 for each r in files   
  	fullfile = Aprifile( r )  
  	filefatt = getTagCont(fullfile, &quot;NomeFile&quot;)(0)
  	if filefatt &lt;&gt; &quot;&quot; then 
		RicevutaFile(t) = filefatt
  		RicevutaHash(t) =  getTagCont(fullfile, &quot;Hash&quot;)(0)
		RicevutaIdSdi(t) = getTagCont(fullfile, &quot;IdentificativoSdI&quot;)(0)
		RicevutaDataTrasm(t) = getTagCont(fullfile, &quot;DataOraRicezione&quot;)(0)
		RicevutaDataConsegna(t) = getTagCont(fullfile, &quot;DataOraConsegna&quot;)(0)

  		if instr ( fullfile, &quot;RicevutaScarto&quot; ) &gt; 0 then
  			RicevutaTipo(t) = &quot;SC&quot;
  			nScarto=nScarto+1
  			t=t+1
  		endif
  
   	  	if instr ( fullfile, &quot;RicevutaConsegna&quot; ) &gt; 0 then
  			RicevutaTipo(t) = &quot;RC&quot;
  			nRicCons=nRicCons+1
  			t=t+1
	  	endif

	  	if instr ( fullfile, &quot;RicevutaImpossibilitaRecapito&quot; ) &gt; 0 then 
  			RicevutaTipo(t) = &quot;MC&quot;
  			nRicImpCons=nRicImpCons+1
  			t=t+1
	  	endif
	endif
 next

 if t=0 then
 	msgbox(&quot;Nei file selezionati non |e8| stata trovata alcuna ricevuta.&quot;,16)
 	exit sub
 endif


REM aggiunge intestazioni
 Foglio.getCellbyPosition(colonnaLibera,0).string = &quot;Esito&quot;
 Foglio.getCellbyPosition(colonnaLibera+1,0).string = &quot;Identificativo SDI&quot;
 Foglio.getCellbyPosition(colonnaLibera+2,0).string = &quot;Data/ora ricezione SDI&quot;
 Foglio.getCellbyPosition(colonnaLibera+3,0).string = &quot;Data/ora consegna&quot;


REM compara file in elenco con ricevute 
 n = 1
 do  
 	file = foglio.getCellbyPosition(0,n).string
 	if file=&quot;&quot; or file=&quot;TOTALI:&quot; then exit do 
	
	Foglio.getCellbyPosition(0,n).cellbackcolor = RGB(255,255,255)
	correlato = 0
	statoConsegna = 0
	statoScarto = 0
	for m = 0 to t-1 
		if RicevutaFile(m) = FileNameOutOfPath( file, &quot;/&quot;) then
			if colonnahash &lt;&gt; 0 and RicevutaHash(m) &lt;&gt; Foglio.getCellbyPosition(ColonnaHash,n).string then
				Foglio.Annotations.insertNew(Foglio.getCellbyPosition(colonnahash,n).getCellAddress, &quot;Hash non corrispondente con quello indicato nella ricevuta telematica&quot;)
			else
				Foglio.getCellbyPosition(colonnahash,n).clearContents(8)
			end if
			select case RicevutaTipo(m) 
				case &quot;RC&quot;
					Foglio.getCellbyPosition(colonnaLibera,n).string = &quot;Consegnato&quot;
					Foglio.getCellbyPosition(0,n).cellbackcolor = coloreConsegna
					Foglio.getCellbyPosition(colonnaLibera+1,n).string = RicevutaIdSdi(m)
					Foglio.getCellbyPosition(colonnaLibera+2,n).string = RicevutaDataTrasm(m)
					Foglio.getCellbyPosition(colonnaLibera+3,n).string = RicevutaDataConsegna(m)
					statoConsegna=1
				case &quot;MC&quot;
					Foglio.getCellbyPosition(colonnaLibera,n).string = &quot;Mancato recapito&quot;
					Foglio.getCellbyPosition(0,n).cellbackcolor = coloreImpConsegna			
					Foglio.getCellbyPosition(colonnaLibera+1,n).string = RicevutaIdSdi(m)
					Foglio.getCellbyPosition(colonnaLibera+2,n).string = RicevutaDataTrasm(m)
					Foglio.getCellbyPosition(colonnaLibera+3,n).string = RicevutaDataConsegna(m)
					statoConsegna=1
				case &quot;SC&quot;
					if statoConsegna = 0 then
						Foglio.getCellbyPosition(colonnaLibera,n).string = &quot;Scartato&quot;
						Foglio.getCellbyPosition(0,n).cellbackcolor = coloreScarto
						Foglio.getCellbyPosition(colonnaLibera+1,n).string = RicevutaIdSdi(m)
						Foglio.getCellbyPosition(colonnaLibera+2,n).string = RicevutaDataTrasm(m)
						Foglio.getCellbyPosition(colonnaLibera+3,n).string = &quot;&quot;
					end if
					statoScarto=1
			end select
			correlato = 1
		end if 
 	next
	if statoConsegna and statoScarto then
		Foglio.Annotations.insertNew(Foglio.getCellbyPosition(colonnaLibera,n).getCellAddress, &quot;Presente anche una ricevuta di scarto&quot;)
	else
		Foglio.getCellbyPosition(colonnaLibera,n).clearContents(8)
	end if
	if correlato = 1 then fattureCorrelate = fattureCorrelate +1
	n=n+1
 loop


REM stampa la legenda
 n = n +8
 Foglio.getCellbyPosition(0,n).string = &quot;Legenda:&quot;
 if VersioneSw &gt;= 5 then Foglio.getCellbyPosition(0,n).charWeight = com.sun.star.awt.FontWeight.BOLD &apos; grassetto 
 n = n +1
 Foglio.getCellbyPosition(0,n).string = &quot;Ricevuta di scarto&quot;
 Foglio.getCellbyPosition(0,n).cellbackcolor = coloreScarto
 n = n +1
 Foglio.getCellbyPosition(0,n).string = &quot;Ricevuta di consegna&quot;
 Foglio.getCellbyPosition(0,n).cellbackcolor = coloreConsegna
 n = n +1
 Foglio.getCellbyPosition(0,n).string = &quot;Mancata consegna&quot;
 Foglio.getCellbyPosition(0,n).cellbackcolor = coloreImpConsegna
 
 report = &quot;Caricati &quot; &amp; TotFile &amp; &quot; file, di cui:&quot; &amp; cr &amp; nScarto &amp; &quot; ricevute di scarto, &quot; &amp; cr &amp; nRicCons &amp; &quot; ricevute di avvenuta consegna, &quot; &amp; cr &amp; nRicImpCons &amp; &quot; ricevute di impossibilit|e0| di recapito.&quot; &amp; cr &amp; &quot;Sono stati correlati a &quot; &amp; fattureCorrelate &amp; &quot; fatture in tabella.&quot;
 if errorehash then 
 	report = report &amp; cr &amp; &quot;HASH non corrispondente per &quot; + errorehash + &quot; file.&quot;
 end if

 aggiornaReport(report)
 beep
 call msgbox(report,64)

End Sub
REM by Marco Gualmini




Sub ComparaRicezioni(foglio as object)

 dim usaOfficePicker as boolean
 dim file_dialog as object 
 dim pathfile as string
 dim status as integer
 dim TotFile as long
 dim n as long
 dim m as long
 dim r as string
 dim file as string
 dim files as object
 dim fullfile as string
 dim filefatt as string
 dim metadato as string
 dim nRic as long
 dim dimensione as long
 dim correlato as long
 dim fattureCorrelate as long
 dim colonnaLibera as integer
 dim colonnahash as integer
 dim hashnoncorrisponde as long
 
 dim coloreHashNo as string
 dim coloreHashOk as string
 coloreHashNo = RGB(255,150,150)
 coloreHashOk = RGB(200,255,200)

 dim report as string

 dim cr as string
 cr = Chr(10) &apos; ritorno a capo

 GlobalScope.BasicLibraries.loadLibrary(&quot;Tools&quot;)
   	
 if msgbox(&quot;Vengono correlati file XML contenenti i metadati delle fatture passive ai corrispondenti documenti nella tabella visualizzata.&quot; &amp; cr &amp; &quot;Si tratta di una analisi approssimativa, in cui la correlazione si basa unicamente sul nome del file.&quot; &amp; cr &amp; &quot;Si conferma di volere procedere?&quot;,4+32+256) = 7 then
 	exit sub
 endif


REM individua le colonne necessarie
 for n = 0 to 50
 	if colonnaLibera = 0 and Foglio.getCellbyPosition(n,0).string = &quot;&quot; then
 		colonnaLibera = n
 	end if
 	if Foglio.getCellbyPosition(n,0).string = &quot;Identificativo SDI&quot; then
		colonnaLibera = n
	end if
  	if Foglio.getCellbyPosition(n,0).string = &quot;Hash SHA-256&quot; then
 		colonnaHash = n
 	end if
 next 
 
 if colonnahash = 0 then
 	msgbox(&quot;I valori degli hash non sono disponibili in tabella, per cui non potr|e0| essere controllata la corrispondenza con il relativo metadato. Potrebbe essere necessario installare il modulo crittografico (Vedi prima pagina)&quot;,16)
 end if
 
 files = selezionaFiles(Tools.Strings.DirectoryNameoutofPath(ThisComponent.url, &quot;/&quot;) )
 if files(0) = &quot;&quot; then exit sub
 TotFile = ubound(files) +1
 dimensione = TotFile 
 
 dim Ricevuta(dimensione) as string             
 dim hash(dimensione) as string
 dim IdSdi(dimensione) as string
 dim TentativiInvio(dimensione) as string
 dim dataaccoglienza(dimensione) as string
 

REM analizza ogni file ricevuta
 for each r in files
  	fullfile = Aprifile( r )  
	if instr ( fullfile, &quot;metadatiFattura&quot; ) &gt; 0 then &apos; estrae dati dai file estratti dal cassetto fiscale
		for each metadato in getTagCont(fullfile, &quot;metadato&quot;)
			if getTagCont(metadato, &quot;nome&quot;)(0) = &quot;nomefile&quot; then
		  		Ricevuta(nRic) = getTagCont(metadato, &quot;valore&quot;)(0)
		  		nRic=nRic+1
			end if
			if getTagCont(metadato, &quot;nome&quot;)(0) = &quot;hashfile&quot; then
  				hash(nRic) = getTagCont(metadato, &quot;valore&quot;)(0)
  			end if
			if getTagCont(metadato, &quot;nome&quot;)(0) = &quot;idfile&quot; then
  				IdSdi(nRic) = getTagCont(metadato, &quot;valore&quot;)(0)
  			end if
  			if getTagCont(metadato, &quot;nome&quot;)(0) = &quot;dataaccoglienza&quot; then
  				DataAccoglienza(nRic) = getTagCont(metadato, &quot;valore&quot;)(0)
  			end if
		next
	else
		if instr ( fullfile, &quot;IdentificativoSdI&quot; ) &gt; 0 then &apos; estrae i dati dal file accompagnatorio
		  	filefatt = getTagCont(fullfile, &quot;NomeFile&quot;)(0)
  			Ricevuta(nRic) = filefatt
  			hash(nRic) =  getTagCont(fullfile, &quot;Hash&quot;)(0)
			IdSdi(nRic) =  getTagCont(fullfile, &quot;IdentificativoSdI&quot;)(0)
			TentativiInvio(nRic) =  getTagCont(fullfile, &quot;TentativiInvio&quot;)(0)
 			nRic=nRic+1
	  	end if
	end if
 next

 if nRic = 0 then
 	msgbox(&quot;Nei file selezionati non |e8| stato trovata alcun metadato.&quot;,16)
 	exit sub
 endif


REM aggiunge intestazioni
 Foglio.getCellbyPosition(colonnaLibera,0).string = &quot;Identificativo SDI&quot;
 Foglio.getCellbyPosition(colonnaLibera+1,0).string = &quot;Data accoglienza SDI&quot;
 Foglio.getCellbyPosition(colonnaLibera+2,0).string = &quot;Tentativi invio&quot;

 
REM compara file in elenco con file metadati
 n = 1
 do  
 	file = foglio.getCellbyPosition(0,n).string
 	if file=&quot;&quot; or file=&quot;TOTALI:&quot; then exit do 

	for m = 0 to nRic-1  
		if Ricevuta(m) = FileNameOutOfPath( file, &quot;/&quot;) then
			Foglio.getCellbyPosition(colonnaLibera,n).string = IdSdi(m)
			Foglio.getCellbyPosition(colonnaLibera+1,n).string = DataAccoglienza(m)
			Foglio.getCellbyPosition(colonnaLibera+2,n).string = TentativiInvio(m)
		
			if Foglio.getCellbyPosition(colonnahash ,n).string = hash(m) then  &apos; verifica la corrispondenza dell&apos;hash sha256
				Foglio.getCellbyPosition(0,n).cellbackcolor = coloreHashOk
			else
				Foglio.getCellbyPosition(0,n).cellbackcolor = coloreHashNo
				hashnoncorrisponde = hashnoncorrisponde +1
			endif			
  			correlato = 1
		endif 
 	next
	if correlato = 1 then fattureCorrelate = fattureCorrelate +1
	n=n+1
 loop
 




REM stampa la legenda
 n = n + 8
 Foglio.getCellbyPosition(0,n).string = &quot;Legenda:&quot;
 if VersioneSw &gt;= 5 then Foglio.getCellbyPosition(0,n).charWeight = com.sun.star.awt.FontWeight.BOLD &apos; grassetto 
 n = n +1
 Foglio.getCellbyPosition(0,n).string = &quot;Hash corrispondente&quot;
 Foglio.getCellbyPosition(0,n).cellbackcolor = coloreHashOk
 n = n +1
 Foglio.getCellbyPosition(0,n).string = &quot;Hash NON corrispondente&quot;
 Foglio.getCellbyPosition(0,n).cellbackcolor = coloreHashNo
 n = n +1
 Foglio.getCellbyPosition(0,n).string = &quot;&quot; &apos; sovrascrive eventuale legenda presente
 Foglio.getCellbyPosition(0,n).IsCellBackgroundTransparent = 1
 
REM compila il report
 report = &quot;Caricati &quot; &amp; TotFile &amp; &quot; file, di cui:&quot; &amp; cr &amp; nRic &amp; &quot; file metadati.&quot; &amp; cr &amp; &quot;Sono stati correlati a &quot; &amp; fattureCorrelate &amp; &quot; fatture in tabella.&quot;
 if hashnoncorrisponde then report = report &amp; cr &amp; &quot;Trovati &quot; &amp; hashnoncorrisponde &amp; &quot; hash non corrispondenti.&quot;
 aggiornaReport(report)
 beep
 call msgbox(report,64)

End Sub


REM by Marco Gualmini
</script:module>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Funzioni" script:language="StarBasic" script:moduleType="normal">REM REM by Marco Gualmini

option explicit
 
REM  unescape dei caratteri non ammessi in XML
function Uesc (t as string) as string
  t=replace(t,&quot;&amp;amp;&quot;,&quot;&amp;&quot;)
  t=replace(t, &quot;&amp;agrave;&quot;, &quot;|e0|&quot;)
  t=replace(t, &quot;&amp;egrave;&quot;, &quot;|e8|&quot;)
  t=replace(t, &quot;&amp;igrave;&quot;, &quot;|ec|&quot;)
  t=replace(t, &quot;&amp;ograve;&quot;, &quot;|f2|&quot;)
  t=replace(t, &quot;&amp;ugrave;&quot;, &quot;|f9|&quot;)
  t=replace(t, &quot;&amp;eacute;&quot;, &quot;|e9|&quot;)
  t=replace(t,&quot;&amp;quot;&quot;,chr(34))
  t=replace(t,&quot;&amp;apos;&quot;,&quot;&apos;&quot;)
  t=replace(t,&quot;&amp;lt;&quot;,&quot;&lt;&quot;)
  t=replace(t,&quot;&amp;gt;&quot;,&quot;&gt;&quot;)
  Uesc = t
end function


function DescTipoDocumento(cod as string) as string
 select case cod
 	case &quot;TD01&quot; 
 		cod = &quot;Fattura&quot;
	case &quot;TD02&quot;
		cod = &quot;Acconto su fattura&quot;
	case &quot;TD03&quot;
		cod = &quot;Acconto su parcella&quot;
	case &quot;TD04&quot;
		cod = &quot;Nota di credito&quot;
	case &quot;TD05&quot;
		cod = &quot;Nota di debito&quot;
	case &quot;TD06&quot;	
		cod = &quot;Parcella&quot;
	case &quot;TD20&quot;	
		cod = &quot;Autofattura&quot;
 end select
 DescTipoDocumento = cod
end function


function DescCondizioniPagamento(cod as string) as string
 select case cod
	case &quot;TP01&quot; 
		cod = &quot;a rate&quot;
	case &quot;TP02&quot; 
		cod = &quot;completo&quot;
	case &quot;TP02&quot; 
		cod = &quot;anticipo&quot;
 end select
 DescCondizioniPagamento = cod
end function


function DescModalitaPagamento(cod as string) as string
 select case cod
	case &quot;MP01&quot; 
		cod = &quot;contanti&quot;
	case &quot;MP02&quot; 
		cod = &quot;assegno&quot;
	case &quot;MP03&quot; 
		cod = &quot;assegno circolare&quot;
	case &quot;MP04&quot; 
		cod = &quot;contanti presso Tesoreria&quot;
	case &quot;MP05&quot; 
		cod = &quot;bonifico&quot;
	case &quot;MP06&quot; 
		cod = &quot;vaglia cambiario&quot;
	case &quot;MP07&quot; 
		cod = &quot;bollettino bancario&quot;
	case &quot;MP08&quot; 
		cod = &quot;carta di credito&quot;
	case &quot;MP09&quot; 
		cod = &quot;RID&quot;
	case &quot;MP10&quot; 
		cod = &quot;RID utenze&quot;
	case &quot;MP11&quot; 
		cod = &quot;RID veloce&quot;
	case &quot;MP12&quot; 
		cod = &quot;RIBA&quot;
	case &quot;MP13&quot; 
		cod = &quot;MAV&quot;
	case &quot;MP14&quot; 
		cod = &quot;quietanza erario&quot;
	case &quot;MP15&quot; 
		cod = &quot;giroconto su conti di contabilit|e0| speciale&quot;
	case &quot;MP16&quot; 
		cod = &quot;domiciliazione bancaria&quot;
	case &quot;MP17&quot; 
		cod = &quot;domiciliazione postale&quot;
	case &quot;MP18&quot; 
		cod = &quot;bollettino di c/c postale&quot;
	case &quot;MP19&quot; 
		cod = &quot;SEPA Direct Debit&quot;
	case &quot;MP20&quot; 	
		cod = &quot;SEPA Direct Debit CORE&quot;
	case &quot;MP21&quot; 
		cod = &quot;SEPA Direct Debit B2B&quot;
	case &quot;MP22&quot; 
		cod = &quot;Trattenuta su somme gi|e0| riscosse&quot;
 end select
 DescModalitaPagamento = cod
end function


function DescRegimeFiscale(cod as string) as string
 select case cod
	case &quot;RF01&quot; 
		cod=&quot;Ordinario&quot;
	case &quot;RF02&quot; 
		cod=&quot;Contribuenti minimi (art.1, c.96-117, L. 244/07)&quot;
	case &quot;RF04&quot; 	
		cod=&quot;Agricoltura e attivit|e0| connesse e pesca (artt.34 e 34-bis, DPR 633/72)&quot;
	case &quot;RF05&quot; 
		cod=&quot;Vendita sali e tabacchi (art.74, c.1, DPR. 633/72)&quot;
	case &quot;RF06&quot; 
		cod=&quot;Commercio fiammiferi (art.74, c.1, DPR 633/72)&quot;
	case &quot;RF07&quot; 
		cod=&quot;Editoria (art.74, c.1, DPR 633/72)&quot;
	case &quot;RF08&quot; 
		cod=&quot;Gestione servizi telefonia pubblica (art.74, c.1, DPR 633/72)&quot;
	case &quot;RF09&quot; 
		cod=&quot;Rivendita documenti di trasporto pubblico e di sosta (art.74, c.1, DPR 633/72)&quot;
	case &quot;RF10&quot; 
		cod=&quot;Intrattenimenti, giochi e altre attivit|e0| di cui alla tariffa allegata al DPR 640/72 (art.74, c.6, DPR 633/72)&quot;
	case &quot;RF11&quot; 
		cod=&quot;Agenzie viaggi e turismo (art.74-ter, DPR 633/72)&quot;
	case &quot;RF12&quot; 
		cod=&quot;Agriturismo (art.5, c.2, L. 413/91)&quot;
	case &quot;RF13&quot; 
		cod=&quot;Vendite a domicilio (art.25-bis, c.6, DPR 600/73)&quot;
	case &quot;RF14&quot; 
		cod=&quot;Rivendita beni usati, oggetti d|2019|arte, d|2019|antiquariato o da collezione (art.36, DL 41/95)&quot;
	case &quot;RF15&quot; 
		cod=&quot;Agenzie di vendite all|2019|asta di oggetti d|2019|arte, antiquariato o da collezione (art.40-bis, DL 41/95)&quot;
	case &quot;RF16&quot; 
		cod=&quot;IVA per cassa P.A. (art.6, c.5, DPR 633/72)&quot;
	case &quot;RF17&quot; 
		cod=&quot;IVA per cassa (art. 32-bis, DL 83/2012)&quot;
	case &quot;RF18&quot; 
		cod=&quot;Altro&quot;
	case &quot;RF19&quot; 
		cod=&quot;Regime forfettario (art.1, c.54-89, L. 190/2014)&quot;
 end select
 DescRegimeFiscale = cod
end function


REM legge la versione software installata
function VersioneSw as integer
 Dim oProdNameAccess As Object
 GlobalScope.BasicLibraries.LoadLibrary(&quot;Tools&quot;)
 oProdNameAccess=GetRegistryKeyContent(&quot;org.openoffice.Setup/Product&quot;)
 VersioneSw = oProdNameAccess.getByName(&quot;ooSetupVersion&quot;)
end function


function formatoData(d as string) as string
 if d=&quot;&quot; then
 	formatoData=&quot;&quot;
 else
	formatoData=format(d,&quot;dd/mm/yyyy&quot;)
 endif
end function


REM controlla la partita iva italiana; ritorna 1 se corretta, 0 se errata
function test_piva_it(piva as string) as boolean
 dim n as integer
 dim c as integer

 if piva=&quot;&quot; or piva=0 then
	test_piva_it = 1
	exit function
 endif
 if len(piva) &lt;&gt; 11 then
	test_piva_it = 0
	exit function
 endif
 dim somma as double
 somma = 0
 for n = 1 to 9 step 2 &apos; somma le cifre in posizione dispari
 	somma = somma + val(mid(piva, n, 1))
 	
 next
 for n = 2 to 10 step 2 &apos; somma le cifre in posizione pari dopo averle raddoppiate
	c = val(mid(piva, n, 1)) * 2
 	if c &gt; 9 then c = c-9
 	somma = somma + c
 next
 if (10 - somma Mod 10) mod 10 = val(mid(piva, 11, 1)) then
 	test_piva_it = 1
 else
  	test_piva_it = 0
 end if 
end function



rem controlla il codice fiscale; ritorna 1 se corretto, 0 se errato
function test_cf(cf as string) as boolean
 dim totale as integer
 dim resto as integer
 dim n  as integer
 dim c as integer
 dim cifre as string
 dim valorePari(34) as integer
 dim valoreDispari(34) as integer
 
 if cf = &quot;&quot; or cf=0 then
	test_cf = 1
	exit function
 endif
 if len(cf) = 11 then
	test_cf = test_piva_it(cf)
	exit function
 endif
 if len(cf) &lt;&gt; 16 then
	test_cf = 0
	exit function
 endif
 cifre = &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;
&apos;	corrispondenza		0	 1	  2	  3	   4	5 	 6	  7	   8	9	 A	  B	   C	D	 E	  F	   G	H	 I	  J	    K	 L	  M	   N	O	 P	  Q	   R	S	 T	  U	   V	W	 X	  Y	  Z
 valorePari =    Array( 0,   1,   2,  3,   4,   5,   6,   7,   8,   9,   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24, 25)
 valoreDispari = Array( 1,   0,   5,  7,   9,  13,  15,  17,  19,  21,   1,   0,   5,   7,   9,  13,  15,  17,  19,  21,    2,   4,  18,  20,  11,   3,   6,   8,  12,  14,  16,  10,  22,  25,  24, 23)

 cf = ucase(cf) &apos; converte in maiuscolo
 totale = 0
 for n = 1 to 15 step 2
 	c = instr(cifre, mid(cf,n,1) )
 	if c=0 then
 		test_cf = 0
 		exit function
 	endif
  	totale = totale + valoreDispari( c-1 )
 next
 for n = 2 to 14 step 2 
 	c = instr(cifre, mid(cf,n,1) )
 	 if c=0 then
 		test_cf = 0
 		exit function
 	endif
 	totale = totale + valorePari( c-1 )
 next
 totale = totale Mod 26 &apos; complementa a 26
 if chr( totale + 65) = mid(cf,16,1) then 
	test_cf = 1
 else 
	test_cf = 0
 endif
end function



Rem verifica la corrispondenza allo standard ministeriale del nome del file xlm (per soggetto italiano)
function testNomeFile(nome as string) as boolean
 dim r(10) as string
 dim oTextSearch as object
 dim oOptions as object
 
 oTextSearch = CreateUnoService(&quot;com.sun.star.util.TextSearch&quot;)
 oOptions = CreateUnoStruct(&quot;com.sun.star.util.SearchOptions&quot;)
 oOptions.algorithmType = com.sun.star.util.SearchAlgorithms.REGEXP
 oOptions.searchString = &quot;^[A-Za-z0-9_]+$&quot;
 oTextSearch.setOptions(oOptions)

 if nome = &quot;&quot; then
	testNomeFile = 0
	exit function
 endif
 
 if lcase( right(nome, 4)) = &quot;.p7m&quot; then &apos; toglie eventuale estensione p7m
	nome = left(nome , len(nome) -4)
 endif
 if lcase( right(nome, 4)) = &quot;.xml&quot; then &apos; vefifica e toglie estensione xml
	nome = left(nome , len(nome) -4)
 else
	testNomeFile = 0
	exit function
 endif
 if left(nome, 2) = &quot;IT&quot; then &apos; verifica e toglie parte iniziale IT
	nome = right(nome , len(nome) -2)
 else
	testNomeFile = 0
	exit function
 endif

 if oTextSearch.searchForward(nome,0,len(nome)).subRegExpressions = 0 then &apos;controlla caratteri ammessi
	testNomeFile = 0
	exit function
 endif
	
 r = split(nome, &quot;_&quot;)

 if ubound(r) &lt;&gt; 1 then &apos; se trova pi|f9| o meno di due sezioni separate da underscore non |e8| valido
	testNomeFile = 0
	exit function
 endif
 
 if len(r(0)) &lt; 11 or len(r(0)) &gt; 16 then &apos; lunghezza identificativo tra 11 e 16
	testNomeFile = 0
	exit function
 endif
 if len(r(1)) = 0 or len(r(1)) &gt; 5 then &apos; lunghezza progressivo tra 1 e 5
	testNomeFile = 0
	exit function
 endif
 testNomeFile=1
end function


Rem verifica la correttezza del codice destinatario in base al formato invio
function testCodiceDestinatario(id as string, formato as string) as boolean
 if left(formato,3) = &quot;FPR&quot; and len(id) = 7 then
 	testCodiceDestinatario = 1
 	exit function
 endif
 if left(formato,3) = &quot;FPA&quot; and len(id) = 6 then
 	testCodiceDestinatario = 1
 	exit function
 endif
 testCodiceDestinatario = 0
end function

 
REM By Marco Gualmini
 
</script:module>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="SalvaAllegati" script:language="StarBasic">option explicit 


REM viene chiamata dal doppio click sul foglio
Sub Evento_visualizzatore()
 dim CellaAttiva as object
 dim CellaAllegati as object
  
 GlobalScope.BasicLibraries.LoadLibrary(&quot;Tools&quot;)

 CellaAttiva = ThisComponent.getCurrentSelection
 cellaAllegati = thiscomponent.sheets.getByIndex(1).getCellRangeByName( &quot;Allegati&quot; )
 
 if CellaAttiva.cellAddress.Row = cellaAllegati.cellAddress.Row and CellaAttiva.cellAddress.Column = cellaAllegati.cellAddress.Column then
 	call salvaAllegati
 endif
 
end sub



Sub salvaAllegati
 dim fullfile as string
 dim filename as string
 dim path as string
 dim txt as string
 dim A as string
 dim c as integer
 dim scrivere as boolean

 dim oFolderPicker as object

 if PathFile = &quot;&quot; then
 	msgbox(&quot;Per estrarre gli allegati occorre prima ricaricare il documento&quot;, 16)
 	exit sub
 endif
 
 fullfile = Aprifile(PathFile)
  
 if fullfile = &quot;&quot; then
 	msgbox(&quot;Per estrarre gli allegati occorre prima ricaricare il documento&quot;, 16)
 	exit sub
 endif


 if getTagCont( fullfile,&quot;Allegati&quot; )(0) = &quot;&quot; then
 	exit sub
 endif
 
 oFolderPicker = CreateUnoService( &quot;com.sun.star.ui.dialogs.FolderPicker&quot; )
 oFolderPicker.setTitle( &quot;Selezionare la directory dove salvare i file allegati&quot; )
 If oFolderPicker.execute() = 1 Then
 	path = oFolderPicker.getDirectory()
 else
 	exit sub
 endif

 
 for each A in  getTagCont( fullfile,&quot;Allegati&quot; ) 
	filename = path &amp; &quot;/&quot;&amp; getTagCont( A,&quot;NomeAttachment&quot; )(0)

	scrivere = true	
	if dir(filename) &lt;&gt; &quot;&quot; then
		scrivere = (msgbox(&quot;Il file &quot;&amp; ConvertFromUrl(filename) &amp; &quot; esiste gi|e0|. Si vuole sovrascriverlo?&quot;,4+32+256) = 6 )
	end if
 
 	if scrivere then
 	 	txt = Base64Decode( getTagCont( A,&quot;Attachment&quot; )(0) ) &amp; chr(10)
 	 	dim myTextFile As Object
 		dim mySf As Object
 		dim myFileStream As Object

		mySf = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
		myTextFile = createUnoService(&quot;com.sun.star.io.TextOutputStream&quot; )
		myFileStream = mySf.openFileWrite(filename)
		myTextFile.OutputStream = myFileStream
	    myTextFile.Encoding = &quot;ISO-8859-1&quot;
		myTextFile.writeString( txt )
		myFileStream.closeOutput : myTextFile.closeOutput

		c=c+1
	endif
 next

 if c &gt; 0 then
	msgbox(&quot;N. &quot;&amp; c &amp; &quot; allegati esportati nella cartella: &quot; &amp; path ,64)
 endif
 
End Sub



&apos; Decodes a base-64 encoded string (BSTR type).
&apos; 1999 - 2004 Antonin Foller, http://www.motobit.com
&apos; 1.01 - solves problem with Access And &apos;Compare Database&apos; (InStr)
&apos;
&apos; adapted for Libreoffice by Marco Gualmini 2019
&apos;
function Base64Decode(base64String) as string
  &apos;rfc1521
  &apos;1999 Antonin Foller, Motobit Software, http://Motobit.cz
  Const Base64 = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;
  Dim dataLength, sOut, groupBegin
  
  &apos;remove white spaces, If any
  base64String = Replace(base64String, chr(10), &quot;&quot;)
  base64String = Replace(base64String, chr(13), &quot;&quot;)
  base64String = Replace(base64String, &quot; &quot;, &quot;&quot;)
  
  &apos;The source must consists from groups with Len of 4 chars
  dataLength = Len(base64String)
  If dataLength Mod 4 &lt;&gt; 0 Then
    call msgbox( &quot;Bad Base64 string.&quot; , 16)
    Exit Function
  End If
  
  &apos; Now decode each group:
  For groupBegin = 1 To dataLength Step 4
    Dim numDataBytes, CharCounter, thisChar, thisData, nGroup, pOut
    &apos; Each data group encodes up To 3 actual bytes.
    numDataBytes = 3
    nGroup = 0

    For CharCounter = 0 To 3
      &apos; Convert each character into 6 bits of data, And add it To
      &apos; an integer For temporary storage.  If a character is a &apos;=&apos;, there
      &apos; is one fewer data byte.  (There can only be a maximum of 2 &apos;=&apos; In
      &apos; the whole string.)

      thisChar = Mid(base64String, groupBegin + CharCounter, 1)

      If thisChar = &quot;=&quot; Then
        numDataBytes = numDataBytes - 1
        thisData = 0
      Else
        thisData = InStr(1, Base64, thisChar, 0) - 1
      End If

      If thisData = -1 Then
        call msgbox( &quot;Bad character In Base64 string.&quot;,16)
        Exit Function
      End If

      nGroup = 64 * nGroup + thisData
    Next
    
    &apos;Hex splits the long To 6 groups with 4 bits
    nGroup = Hex(nGroup)
    
    &apos;Add leading zeros
    nGroup = String(6 - Len(nGroup), &quot;0&quot;) &amp; nGroup
    
    &apos;Convert the 3 byte hex integer (6 chars) To 3 characters
    pOut = Chr(CByte(&quot;&amp;H&quot; &amp; Mid(nGroup, 1, 2))) + _
      Chr(CByte(&quot;&amp;H&quot; &amp; Mid(nGroup, 3, 2))) + _
      Chr(CByte(&quot;&amp;H&quot; &amp; Mid(nGroup, 5, 2)))
    
    &apos;add numDataBytes characters To out string
    sOut = sOut &amp; Left(pOut, numDataBytes)
  Next
  Base64Decode = sOut
End Function


</script:module>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Visualizzatore" script:language="StarBasic">REM REM by Marco Gualmini

option explicit

global PathFile as string



REM visualizza anteprima fattura nell&apos;apposito foglio
function Anteprima( File as string , NumDoc as string, dataDoc as date )
 dim fullFile as string
 dim NomeFile as string
 dim foglio as object
 dim CodiceDestinatario as string
 dim PECDestinatario as string
 dim IdTrasmittente as string
 dim Fattura as string
 dim Divisa as string
 dim dataDocT as date
 dim DatiGenerali as string
 dim DatiGeneraliDocumento as string
 dim F as string
 dim C as string
 dim BS as string
 dim R as string
 dim CP as string
 dim SM as string
 dim V as string
 dim Causale as string
 dim TotaleDocumento as currency
 dim totaleCalcolato as currency
 dim CedentePrestatore as string
 dim DatiAnagraficiCedente as string
 dim DenominazioneCedente as string
 dim CessionarioCommittente as string
 dim DatiAnagraficiCessionario as string
 dim DenominazioneCessionario as string
 dim DatiBeniServizi as string
 dim TabellaBeniServizi as object
 dim TabellaAliquoteIva as object
 dim PrimaRiga as long
 dim UltimaRiga as long
 dim RigheTabella as long
 dim RighePresenti as long
 dim m as long
 dim n as long
 dim ScontoMaggiorazione as double
 dim DatiRitenuta as string
 dim AliquotaCassa as string
 dim DatiCassaPrevidenziale as string
 dim ImportoCassa as double 
 dim TScMa as double
 dim DatiPagamento as string
 dim Dettagliopagamento as string
 dim DettagliopagamentoT as string
 dim ModalitaPagamento as string
 dim ModalitaPagamentoT as string
 dim IstitutoFinanziario as string
 dim IstitutoFinanziarioT as string
 dim IBAN as string
 dim IBANT as string
 dim Beneficiario as string
 dim BeneficiarioT as string
 dim CodicePagamento as string
 dim CodicePagamentoT as string
 dim totPagamento as currency
 dim Quietanzante as string
 dim document as object
 dim dispatcher as object
 dim Allegati(100) as string
 dim nddt as integer
 dim nart as long
 dim DDTG(2000) as string
 dim DDT(2000) as string
 dim FineDDT(2000) as string
 
 
 fullFile = Aprifile(File) 
 if fullFile = &quot;&quot; then
 	anteprima = -1
 	exit function
 endif
 
 NomeFile = FileNameOutOfPath( ConvertFromURL(File), &quot;\&quot;)
 NomeFile = FileNameOutOfPath( NomeFile, &quot;/&quot;)

 Foglio = thiscomponent.sheets.getByName(&quot;Visualizzatore&quot;) 

 PathFile = File
 

REM scrive i dati nel foglio &quot;Visualizzatore&quot;
 CodiceDestinatario = getTagCont( fullFile,&quot;CodiceDestinatario&quot; )(0)
 PECDestinatario = getTagCont( fullFile,&quot;PECDestinatario&quot; )(0)
 if CodiceDestinatario = &quot;0000000&quot; and PECDestinatario &lt;&gt; &quot;&quot; then CodiceDestinatario = PECDestinatario

 Foglio.getCellRangeByName( &quot;ProgressivoInvio&quot; ).string = &quot;Progressivo invio: &quot; &amp; DescTipoDocumento(getTagCont( fullfile,&quot;ProgressivoInvio&quot; )(0))
 Foglio.getCellRangeByName( &quot;CodiceDestinatario&quot; ).string = CodiceDestinatario

 IdTrasmittente = getTagCont( fullFile,&quot;IdTrasmittente&quot; )(0)
 Foglio.getCellRangeByName( &quot;Trasmittente&quot; ).string = &quot;Trasmittente: &quot; &amp; getTagCont( IdTrasmittente,&quot;IdPaese&quot; )(0) &amp; &quot; &quot; &amp; getTagCont( IdTrasmittente,&quot;IdCodice&quot; )(0)

REM dati specifici documento
 if NumDoc &lt;&gt; &quot;&quot; then
	Fattura = &quot;&quot;
	for each F in getTagCont( fullFile,&quot;FatturaElettronicaBody&quot; ) &apos; carica tutte le fatture in un file
		dataDocT = getTagCont( F,&quot;Data&quot; )(0)
		if getTagCont( F,&quot;Numero&quot; )(0) = NumDoc and dataDoc=dataDocT then
 			Fattura = F
		endif 	
 	next
 else
 	Fattura = getTagCont( fullFile,&quot;FatturaElettronicaBody&quot; )(0)
 endif

 if Fattura = &quot;&quot; then
 	msgbox(&quot;ERRORE: Documento non trovato all&apos;interno del file. Potrebbe essere stato modificato il numero in tabella.&quot;,16)
 	anteprima = -1
 	exit function
 endif

 DatiGenerali = getTagCont( Fattura,&quot;DatiGenerali&quot; )(0) &apos; estrae la fattura definita
 DatiGeneraliDocumento = getTagCont( DatiGenerali,&quot;DatiGeneraliDocumento&quot; )(0)

 Divisa = getTagCont( DatiGeneraliDocumento,&quot;Divisa&quot; )(0)
 TotaleDocumento = val(getTagCont( DatiGeneraliDocumento,&quot;ImportoTotaleDocumento&quot; )(0))
 
 Foglio.getCellRangeByName( &quot;TipoDocumento&quot; ).string = DescTipoDocumento(getTagCont( DatiGeneraliDocumento,&quot;TipoDocumento&quot; )(0))
 Foglio.getCellRangeByName( &quot;DataDocumento&quot; ).string = formatoData(getTagCont( DatiGeneraliDocumento,&quot;Data&quot; )(0)
 Foglio.getCellRangeByName( &quot;NumeroDocumento&quot; ).string = getTagCont( DatiGeneraliDocumento,&quot;Numero&quot; )(0)
 Foglio.getCellRangeByName( &quot;Valuta&quot; ).string = getTagCont( DatiGeneraliDocumento,&quot;Divisa&quot; )(0)
 
REM arrotondamento nel totale
 if getTagCont( DatiGeneraliDocumento,&quot;Arrotondamento&quot; )(0) &lt;&gt; &quot;&quot; then
	Foglio.getCellRangeByName( &quot;Arrotondamento&quot; ).string = &quot;(&quot; &amp; getTagCont( DatiGeneraliDocumento,&quot;Arrotondamento&quot; )(0) &amp; &quot;)&quot;
 else
	Foglio.getCellRangeByName( &quot;Arrotondamento&quot; ).string = &quot;&quot;
 endif
 

REM Art 73
 if getTagCont( DatiGeneraliDocumento,&quot;Art73&quot; )(0) = &quot;SI&quot; then
	 Foglio.getCellRangeByName( &quot;NotaArt73&quot; ).string = &quot;Doc. emesso Ex. Art 73 DL 633/72&quot; 
 else
	 Foglio.getCellRangeByName( &quot;NotaArt73&quot; ).string = &quot;&quot; 
 endif
 
 
REM Causale
 Causale = &quot;&quot;
 for each C in getTagCont( DatiGeneraliDocumento,&quot;Causale&quot; )
 	Causale = Causale &amp; C &amp; chr(13)
 next
 Foglio.getCellRangeByName( &quot;Causale&quot; ).string = Uesc( Causale )


REM Dati cedente
 CedentePrestatore = getTagCont( fullFile,&quot;CedentePrestatore&quot; )(0)
 DatiAnagraficiCedente = getTagCont( CedentePrestatore,&quot;DatiAnagrafici&quot; )(0)
 DenominazioneCedente = getTagCont( DatiAnagraficiCedente,&quot;Denominazione&quot; ) (0)
 if DenominazioneCedente = &quot;&quot; then
	DenominazioneCedente = getTagCont( DatiAnagraficiCedente,&quot;Nome&quot; )(0) &amp; &quot; &quot; &amp; getTagCont( DatiAnagraficiCedente,&quot;Cognome&quot; )(0)

	if getTagCont( DatiAnagraficiCedente,&quot;Titolo&quot; )(0) &lt;&gt; &quot;&quot; then
		DenominazioneCedente = getTagCont( DatiAnagraficiCedente,&quot;Titolo&quot; )(0) &amp; &quot; &quot; &amp; DenominazioneCedente
	end if
 end if
 
 Foglio.getCellRangeByName( &quot;RiferimentoAmministrazione&quot; ).string = getTagCont( CedentePrestatore,&quot;RiferimentoAmministrazione&quot; )(0)
 Foglio.getCellRangeByName( &quot;CedenteDenominazione&quot; ).string = Uesc( DenominazioneCedente )
 Foglio.getCellRangeByName( &quot;CedenteIndirizzo&quot; ).string = Uesc(getTagCont( CedentePrestatore,&quot;Indirizzo&quot; )(0)) &amp; &quot; &quot; &amp; getTagCont( CedentePrestatore,&quot;NumeroCivico&quot; )(0)
 Foglio.getCellRangeByName( &quot;CedenteComune&quot; ).string = getTagCont( CedentePrestatore,&quot;CAP&quot; )(0) &amp; &quot; &quot; &amp; Uesc(getTagCont( CedentePrestatore,&quot;Comune&quot; )(0)) &amp; &quot; &quot; &amp; getTagCont( CedentePrestatore,&quot;Provincia&quot; )(0)
 Foglio.getCellRangeByName( &quot;CedenteCf&quot; ).string = &quot;C.F.: &quot; &amp; getTagCont( CedentePrestatore,&quot;CodiceFiscale&quot; )(0)
 Foglio.getCellRangeByName( &quot;CedentePiva&quot; ).string = &quot;P.I.: &quot; &amp; getTagCont( CedentePrestatore,&quot;IdPaese&quot; )(0) &amp; &quot; &quot; &amp; getTagCont( CedentePrestatore,&quot;IdCodice&quot; )(0)
 Foglio.getCellRangeByName( &quot;CedenteContatti&quot; ).string = getTagCont( CedentePrestatore,&quot;Email&quot; )(0) &amp; &quot; &quot; &amp;  getTagCont( CedentePrestatore,&quot;Telefono&quot; )(0)
 Foglio.getCellRangeByName( &quot;CedenteRegimeFiscale&quot; ).string = &quot;Regime fiscale: &quot;&amp; DescRegimeFiscale(getTagCont( CedentePrestatore,&quot;RegimeFiscale&quot; )(0))

 if test_cf(getTagCont( CedentePrestatore,&quot;CodiceFiscale&quot; )(0)) then
	Foglio.getCellRangeByName( &quot;CedenteCf&quot; ).clearContents(8)
 else
	Foglio.Annotations.insertNew(Foglio.getCellRangeByName( &quot;CedenteCf&quot; ).getCellAddress, &quot;Il codice fiscale del cedente non |e8| corretto&quot;)
 endif 
 
 if test_piva_it(getTagCont( CedentePrestatore,&quot;IdCodice&quot; )(0)) then
	Foglio.getCellRangeByName( &quot;CedentePiva&quot; ).clearContents(8)
 else
	Foglio.Annotations.insertNew(Foglio.getCellRangeByName( &quot;CedentePiva&quot; ).getCellAddress, &quot;La partita iva del cedente non |e8| corretta&quot;)
 endif 
 	 

REM dati cessionario		
 CessionarioCommittente = getTagCont( fullFile,&quot;CessionarioCommittente&quot; )(0)
 DatiAnagraficiCessionario = getTagCont( CessionarioCommittente,&quot;DatiAnagrafici&quot; )(0)
 DenominazioneCessionario = getTagCont( DatiAnagraficiCessionario,&quot;Denominazione&quot; ) (0)
 if DenominazioneCessionario = &quot;&quot; then
	DenominazioneCessionario = getTagCont( DatiAnagraficiCessionario,&quot;Nome&quot; )(0) &amp; &quot; &quot; &amp; getTagCont( DatiAnagraficiCessionario,&quot;Cognome&quot; )(0)
	if getTagCont( DatiAnagraficiCessionario,&quot;Titolo&quot; )(0) &lt;&gt; &quot;&quot; then
		DenominazioneCessionario = getTagCont( DatiAnagraficiCessionario,&quot;Titolo&quot; )(0) &amp; &quot; &quot; &amp; DenominazioneCessionario
	end if
 end if
 
 Foglio.getCellRangeByName( &quot;CessionarioDenominazione&quot; ).string = Uesc( DenominazioneCessionario )
 Foglio.getCellRangeByName( &quot;CessionarioIndirizzo&quot; ).string = Uesc(getTagCont( CessionarioCommittente,&quot;Indirizzo&quot; )(0)) &amp; &quot; &quot; &amp; getTagCont( CessionarioCommittente,&quot;NumeroCivico&quot; )(0)
 if getTagCont( CessionarioCommittente,&quot;Nazione&quot; )(0) = &quot;IT&quot; then
	Foglio.getCellRangeByName( &quot;CessionarioComune&quot; ).string = getTagCont( CessionarioCommittente,&quot;CAP&quot; )(0) &amp; &quot; &quot; &amp; Uesc(getTagCont( CessionarioCommittente,&quot;Comune&quot; )(0)) &amp; &quot; &quot; &amp; getTagCont( CessionarioCommittente,&quot;Provincia&quot; )(0)
 else
	Foglio.getCellRangeByName( &quot;CessionarioComune&quot; ).string = getTagCont( CessionarioCommittente,&quot;CAP&quot; )(0) &amp; &quot; &quot; &amp; Uesc(getTagCont( CessionarioCommittente,&quot;Comune&quot; )(0)) &amp; &quot; (&quot; &amp; getTagCont( CessionarioCommittente,&quot;Nazione&quot; )(0) &amp; &quot;)&quot;
 endif
 Foglio.getCellRangeByName( &quot;CessionarioCf&quot; ).string = &quot;C.F.: &quot; &amp; getTagCont( CessionarioCommittente,&quot;CodiceFiscale&quot; )(0)
 Foglio.getCellRangeByName( &quot;CessionarioPiva&quot; ).string = &quot;P.I.: &quot; &amp; getTagCont( CessionarioCommittente,&quot;IdPaese&quot; )(0) &amp; &quot; &quot; &amp; getTagCont( CessionarioCommittente,&quot;IdCodice&quot; )(0)
 Foglio.getCellRangeByName( &quot;CessionarioContatti&quot; ).string = getTagCont( CessionarioCommittente,&quot;Email&quot; )(0) &amp; &quot; &quot; &amp;  getTagCont( CessionarioCommittente,&quot;Telefono&quot; )(0)

 if test_cf(getTagCont( CessionarioCommittente,&quot;CodiceFiscale&quot; )(0)) then
 	Foglio.getCellRangeByName( &quot;CessionarioCf&quot; ).clearContents(8)
 else
	Foglio.Annotations.insertNew(Foglio.getCellRangeByName( &quot;CessionarioCf&quot; ).getCellAddress, &quot;Il codice fiscale del cliente non |e8| corretto&quot;)
 endif
 
 if test_piva_it(getTagCont( CessionarioCommittente,&quot;IdCodice&quot; )(0)) then
	Foglio.getCellRangeByName( &quot;CessionarioPiva&quot; ).clearContents(8)
 else
	Foglio.Annotations.insertNew(Foglio.getCellRangeByName( &quot;CessionarioPiva&quot; ).getCellAddress, &quot;La partita iva del cliente non |e8| corretta&quot;)
 endif 
 
 
REM carica elenco DDT
 nddt=0
 For each v in getTagCont( DatiGenerali,&quot;DatiDDT&quot; )
 	if v = &quot;&quot; then exit for
	if 	getTagCont( v,&quot;RiferimentoNumeroLinea&quot; )(0) = &quot;&quot; then 		&apos; DDT riferiti al documento generale (senza n.linea)
		DDTG( nddt ) = &quot; --- Rif. D.D.T. n. &quot; &amp; getTagCont( v,&quot;NumeroDDT&quot; )(0) &amp; &quot; del &quot; &amp; formatoData(getTagCont( v,&quot;DataDDT&quot; )(0)) &amp; &quot; ---&quot;
 	else 
		DDT( val(getTagCont( v,&quot;RiferimentoNumeroLinea&quot; )(0)) ) = &quot; --- Rif. D.D.T. n. &quot; &amp; getTagCont( v,&quot;NumeroDDT&quot; )(0) &amp; &quot; del &quot; &amp; formatoData(getTagCont( v,&quot;DataDDT&quot; )(0)) &amp; &quot; ---&quot;
		FineDDT( getTagCont( v,&quot;RiferimentoNumeroLinea&quot; )( ubound( getTagCont( v,&quot;RiferimentoNumeroLinea&quot; )) ) ) = &quot;1&quot; &apos; determina l&apos;ultima riga a cui si riferisce il ddt
	endif
	nddt=nddt+1
 next
 
 
REM tabella beni e servizi
 const minRighe = 20 &apos; numero minimo di righe mostrate in tabella
 
 DatiBeniServizi = getTagCont( Fattura,&quot;DatiBeniServizi&quot; )(0)

 TabellaBeniServizi = Foglio.getCellrangebyname(&quot;TabellaBeniServizi&quot;)
 TabellaBeniServizi.clearContents(com.sun.star.sheet.CellFlags.VALUE + com.sun.star.sheet.CellFlags.STRING) &apos; cancella tabella

 PrimaRiga = TabellaBeniServizi.getRangeAddress().StartRow
 UltimaRiga = TabellaBeniServizi.getRangeAddress().EndRow
 RigheTabella = UltimaRiga-PrimaRiga+1
 RighePresenti = ubound(getTagCont( DatiBeniServizi,&quot;DettaglioLinee&quot; )) + nddt*2 + 2 &apos; calcola le righe della tabella: numero articoli + numero ddt + riga vuota dopo ddt + qualche riga vuota alla fine

 if RighePresenti &gt; RigheTabella then  &apos; espande il numero di righe se necessario
 	Foglio.Rows.insertByIndex(UltimaRiga, RighePresenti-RigheTabella)
&apos;	msgbox(&quot;La tabella beni/servizi |e8| stata espansa per visualizzare pi|f9| di 20 voci. La stampa potrebbe richiedere pi|f9| pagine.&quot;,48)
	RigheTabella = RighePresenti
 endif
 
 if RighePresenti &lt; RigheTabella and RigheTabella &gt; minRighe then &apos; riduce il numero di righe a [minRighe] 
 	if RighePresenti &lt; minRighe then RighePresenti = minRighe
 	Foglio.Rows.removeByIndex(PrimaRiga, RigheTabella-RighePresenti)
	RigheTabella = RighePresenti
 endif


 n = 0 &apos; conteggio riga posizione di visualizzazione
 nart = 1 &apos; conteggio riga articolo
 
  &apos; visualizza DDT generali (non riferiti a righe specifiche)
 for each v in DDTG
	if v &lt;&gt; &quot;&quot; then 
	 	TabellaBeniServizi.getCellbyPosition(1,n).string = V
		n=n+1
	endif
 next
 
 for each BS in getTagCont( DatiBeniServizi,&quot;DettaglioLinee&quot; )
 	if n &gt; RigheTabella then 
		call msgbox(&quot;Errore interno: non possono essere visualizzati in questo foglio tutti gli articoli.&quot;,48)
		exit for
	endif
	
	if DDT(nart) &lt;&gt; &quot;&quot; then
		TabellaBeniServizi.getCellbyPosition(1,n).string = DDT(nart)
		n=n+1
	endif
	
	TabellaBeniServizi.getCellbyPosition(0,n).string = getTagCont( BS,&quot;CodiceValore&quot; )(0)
	TabellaBeniServizi.getCellbyPosition(1,n).string = Uesc( getTagCont( BS,&quot;Descrizione&quot; )(0) )
	TabellaBeniServizi.getCellbyPosition(2,n).string = Uesc(getTagCont( BS,&quot;UnitaMisura&quot; )(0)) &amp; &quot; &quot; &amp; getTagCont( BS,&quot;Quantita&quot; )(0) 
	TabellaBeniServizi.getCellbyPosition(3,n).value = getTagCont( BS,&quot;PrezzoUnitario&quot; )(0)
	TabellaBeniServizi.getCellbyPosition(4,n).value = getTagCont( BS,&quot;PrezzoTotale&quot; )(0)
	TabellaBeniServizi.getCellbyPosition(5,n).value = getTagCont( BS,&quot;AliquotaIVA&quot; )(0)
	ScontoMaggiorazione = getTagCont( BS,&quot;ScontoMaggiorazione&quot; )(0)
	if ScontoMaggiorazione &lt;&gt; &quot;&quot; then
		if getTagCont( ScontoMaggiorazione,&quot;Tipo&quot; )(0) = &quot;SC&quot; then
			TabellaBeniServizi.getCellbyPosition(6,n).value = -val(getTagCont( ScontoMaggiorazione,&quot;Percentuale&quot; )(0))
		else
			TabellaBeniServizi.getCellbyPosition(6,n).value = +(getTagCont( ScontoMaggiorazione,&quot;Percentuale&quot; )(0))
		endif
	else
		TabellaBeniServizi.getCellbyPosition(6,n).string = &quot;&quot;
	endif
	n = n + 1
	
	if FineDDT(nart) &lt;&gt; &quot;&quot; then &apos; aggiunge riga vuota alla fine del blocco riferito dal DDT
		n = n + 1
	endif

	nart = nart + 1
 next

&apos; visualizza eventuali DDT riferiti a linee non esistenti
 for m = nart to ubound(DDT)
 	if DDT(m) &lt;&gt; &quot;&quot; then
	 	TabellaBeniServizi.getCellbyPosition(1,n).string = DDT(m)
		n=n+1
	endif
 next
 

REM Dati riepilogo iva
 const minRighe2 = 2 &apos; numero minimo di righe mostrate in tabella

 TabellaAliquoteIva = Foglio.getCellrangebyname(&quot;TabellaAliquoteIva&quot;)
 TabellaAliquoteIva.clearContents(com.sun.star.sheet.CellFlags.VALUE + com.sun.star.sheet.CellFlags.STRING)   &apos; cancella tabella
 
 PrimaRiga = TabellaAliquoteIva.getRangeAddress().StartRow
 UltimaRiga = TabellaAliquoteIva.getRangeAddress().endrow 

 RigheTabella = UltimaRiga-PrimaRiga+1
 RighePresenti = ubound(getTagCont( DatiBeniServizi,&quot;DatiRiepilogo&quot; )) + 1
  
 if RighePresenti &gt; RigheTabella then  &apos; espande la tabella aliquote se necessario
  	Foglio.Rows.insertByIndex(UltimaRiga, RighePresenti-RigheTabella)
	RigheTabella = RighePresenti
 endif

 if RighePresenti &lt; RigheTabella and RigheTabella &gt; minRighe2 then  &apos; riduce il numero di righe a [minRighe2] 
 	if RighePresenti &lt; minRighe2 then RighePresenti = minRighe2
 	Foglio.Rows.removeByIndex(PrimaRiga, RigheTabella-RighePresenti)
	RigheTabella = RighePresenti
 endif
 
 totaleCalcolato = 0
 n = 0 &apos; prima riga aliquote
 for each R in getTagCont( DatiBeniServizi,&quot;DatiRiepilogo&quot; )
 	if n &gt; RigheTabella+1 then 
		msgbox(&quot;Errore interno: non possono essere visualizzate in questo foglio tutte le aliquote iva.&quot;,48)
		exit for
	endif
	TabellaAliquoteIva.getCellbyPosition(0,n).string = getTagCont( R,&quot;AliquotaIVA&quot; )(0)
	TabellaAliquoteIva.getCellbyPosition(1,n).string = getTagCont( R,&quot;RiferimentoNormativo&quot; )(0)
	TabellaAliquoteIva.getCellbyPosition(2,n).string = getTagCont( R,&quot;Natura&quot; )(0)
	TabellaAliquoteIva.getCellbyPosition(3,n).string = getTagCont( R,&quot;EsigibilitaIVA&quot; )(0)
	TabellaAliquoteIva.getCellbyPosition(4,n).value = getTagCont( R,&quot;ImponibileImporto&quot; )(0)
	TabellaAliquoteIva.getCellbyPosition(5,n).value = getTagCont( R,&quot;Imposta&quot; )(0)
	TabellaAliquoteIva.getCellbyPosition(6,n).value = getTagCont( R,&quot;Arrotondamento&quot; )(0)
	n = n+1
	totaleCalcolato = totaleCalcolato + val(getTagCont( R,&quot;ImponibileImporto&quot; )(0)) + val(getTagCont( R,&quot;Imposta&quot; )(0))
 next
 

REM Dati ritenuta d&apos;acconto
 DatiRitenuta = getTagCont( DatiGeneraliDocumento,&quot;DatiRitenuta&quot; )(0)
 if DatiRitenuta &lt;&gt; &quot;&quot; then
	Foglio.getCellRangeByName( &quot;AliquotaRitenuta&quot; ).string =  getTagCont( DatiRitenuta,&quot;AliquotaRitenuta&quot; )(0) &amp; &quot;%&quot;
	Foglio.getCellRangeByName( &quot;ImportoRitenuta&quot; ).value =  getTagCont( DatiRitenuta,&quot;ImportoRitenuta&quot; )(0)
 else
	Foglio.getCellRangeByName( &quot;AliquotaRitenuta&quot; ).string = &quot;&quot;
	Foglio.getCellRangeByName( &quot;ImportoRitenuta&quot; ).value = 0
 endif
  
REM Dati cassa previdenziale
 AliquotaCassa = &quot;&quot;
 ImportoCassa = 0
 for each CP in getTagCont( DatiGeneraliDocumento,&quot;DatiCassaPrevidenziale&quot; )
 	if getTagCont( CP,&quot;AlCassa&quot; )(0) &lt;&gt; &quot;&quot; then
		AliquotaCassa = AliquotaCassa &amp; getTagCont( CP,&quot;AlCassa&quot; )(0) &amp; &quot;% &quot; 
		ImportoCassa = ImportoCassa + val(getTagCont( CP,&quot;ImportoContributoCassa&quot; )(0))
	endif
 next
 Foglio.getCellRangeByName( &quot;AliquotaCassa&quot; ).string = AliquotaCassa
 Foglio.getCellRangeByName( &quot;ImportoCassa&quot; ).value = ImportoCassa
 

REM Sconto / Maggiorazione
 TScMa=0
 for each SM in getTagCont( DatiGeneraliDocumento,&quot;ScontoMaggiorazione&quot; )
    if getTagCont( SM,&quot;Tipo&quot; )(0) = &quot;SC&quot; then 
		TScMa= TScMa - val( getTagCont( SM,&quot;Importo&quot; )(0))
	else
		TScMa= TScMa + val( getTagCont( SM,&quot;Importo&quot; )(0))
	endif	
	Foglio.getCellRangeByName( &quot;ImportoScMag&quot; ).value = TScMa
 next


REM Totale 
 Foglio.getCellRangeByName( &quot;TotaleDocumento&quot; ).value = TotaleDocumento
 if TotaleCalcolato = TotaleDocumento then
	Foglio.getCellRangeByName( &quot;TotaleDocumento&quot; ).clearContents(8)
 else
	Foglio.Annotations.insertNew(Foglio.getCellRangeByName( &quot;TotaleDocumento&quot; ).getCellAddress, &quot;Il totale dichiarato non corrisponde alla somma di imponibile e imposte (&quot;&amp; TotaleCalcolato &amp;&quot;)&quot;)
 endif 
 
 
REM Bollo
 if getTagCont( DatiGeneraliDocumento,&quot;BolloVirtuale&quot; )(0) = &quot;SI&quot; then
	 Foglio.getCellRangeByName( &quot;ImpostaBollo&quot; ).string = &quot;Imposta di bollo assolta virtualmente &quot;&amp; Divisa &amp; &quot; &quot; &amp; getTagCont( DatiGeneraliDocumento,&quot;ImportoBollo&quot; )(0)
 else
	 Foglio.getCellRangeByName( &quot;ImpostaBollo&quot; ).string = &quot;&quot; 
 endif
 
 
REM Segnala presenza allegati
 Allegati = getTagCont( Fattura,&quot;Allegati&quot; )
 if Allegati(0) &lt;&gt; &quot;&quot; then
 	if ubound(Allegati) = 0 then
	 	Foglio.getCellRangeByName( &quot;Allegati&quot; ).string = &quot;Allegato: &quot; &amp; getTagCont( Fattura,&quot;NomeAttachment&quot; )(0)
	else
 		Foglio.getCellRangeByName( &quot;Allegati&quot; ).string = &quot;Il documento contiene &quot; &amp; ubound(Allegati)+1 &amp; &quot; allegati&quot;
	end if
	Foglio.Annotations.insertNew(Foglio.getCellRangeByName( &quot;Allegati&quot; ).getCellAddress, &quot;Fare doppio click per salvare gli allegati&quot;)
 else 
	Foglio.getCellRangeByName( &quot;Allegati&quot; ).string = &quot;&quot;
	Foglio.getCellRangeByName( &quot;Allegati&quot; ).clearContents(8)
 endif 
 

 
 dim Riferimenti(1000)
 n=0
 
REM Dati pagamento
 DatiPagamento = getTagCont( Fattura,&quot;DatiPagamento&quot; )(0)
 if DatiPagamento  &lt;&gt; &quot;&quot; then
	Riferimenti(n) = &quot;Tipo pagamento: &quot; &amp; DescCondizioniPagamento( getTagCont( DatiPagamento,&quot;CondizioniPagamento&quot; )(0))
	n=n+1
				
	for each DettaglioPagamento in getTagCont( DatiPagamento,&quot;DettaglioPagamento&quot; )

		ModalitaPagamento = getTagCont( Dettagliopagamento,&quot;ModalitaPagamento&quot; )(0)	
 		if ModalitaPagamento &lt;&gt; &quot;&quot; and ModalitaPagamento &lt;&gt; ModalitaPagamentoT then
			Riferimenti(n) = &quot;Pagamento &quot; &amp; DescModalitaPagamento( getTagCont( Dettagliopagamento,&quot;ModalitaPagamento&quot; )(0))
			n=n+1
			ModalitaPagamentoT = ModalitaPagamento
		endif
		
		IstitutoFinanziario = getTagCont( Dettagliopagamento,&quot;IstitutoFinanziario&quot; )(0)
		if IstitutoFinanziario &lt;&gt; &quot;&quot; and IstitutoFinanziario &lt;&gt; IstitutoFinanziarioT then
			Riferimenti(n) = Uesc( getTagCont( Dettagliopagamento,&quot;IstitutoFinanziario&quot; )(0) )
			n=n+1
			IstitutoFinanziarioT = IstitutoFinanziario
		endif
		
		IBAN = getTagCont( Dettagliopagamento,&quot;IBAN&quot; )(0)
		if IBAN &lt;&gt; &quot;&quot; and IBAN &lt;&gt; IBANT then
			Riferimenti(n) = &quot;IBAN: &quot; &amp; getTagCont( Dettagliopagamento,&quot;IBAN&quot; )(0)
			n=n+1
			IBANT = IBAN
		endif
		
		Beneficiario = getTagCont( Dettagliopagamento,&quot;Beneficiario&quot; )(0)
		if Beneficiario &lt;&gt; &quot;&quot; and Beneficiario &lt;&gt; BeneficiarioT then
			Riferimenti(n) = &quot;Beneficiario: &quot; &amp; Uesc( getTagCont( Dettagliopagamento,&quot;Beneficiario&quot; )(0) )
			n=n+1
			BeneficiarioT = Beneficiario
		endif
	
		if getTagCont( Dettagliopagamento,&quot;DataRiferimentoTerminiPagamento&quot; )(0) &lt;&gt; &quot;&quot; then
			Riferimenti(n) = &quot;Decorrenza pagamento: &quot; &amp; formatoData( getTagCont( Dettagliopagamento,&quot;DataRiferimentoTerminiPagamento&quot; )(0)) &amp; &quot; a giorni: &quot; &amp; getTagCont( Dettagliopagamento,&quot;GiorniTerminiPagamento&quot; )(0)
			n=n+1
		endif

		if getTagCont( Dettagliopagamento,&quot;CFQuietanzante&quot; )(0) &lt;&gt; &quot;&quot; then
			Riferimenti(n) = &quot;Quietanzato: &quot; &amp; getTagCont( Dettagliopagamento,&quot;CognomeQuietanzante&quot; )(0) &amp; &quot; &quot; &amp; getTagCont( Dettagliopagamento,&quot;NomeQuietanzante&quot; )(0) &amp; &quot; &quot; &amp; getTagCont( Dettagliopagamento,&quot;CFQuietanzante&quot; )(0)
			n=n+1
		endif
		if getTagCont( Dettagliopagamento,&quot;CodUfficioPostale&quot; )(0) &lt;&gt; &quot;&quot; then
			Riferimenti(n) = &quot;Ufficio postale: &quot; &amp; getTagCont( Dettagliopagamento,&quot;CodUfficioPostale&quot; )(0)
			n=n+1
		endif
		if getTagCont( Dettagliopagamento,&quot;ScontoPagamentoAnticipato&quot; )(0) &lt;&gt; &quot;&quot; then
			Riferimenti(n) = &quot;Sconto per pag. anticipato: &quot; &amp; getTagCont( Dettagliopagamento,&quot;ScontoPagamentoAnticipato&quot; )(0)
			n=n+1
		endif
		if getTagCont( Dettagliopagamento,&quot;DataLimitePagamentoAnticipato&quot; )(0) &lt;&gt; &quot;&quot; then
			Riferimenti(n) = &quot;Termine per pag. anticipato: &quot; &amp; formatoData(getTagCont( Dettagliopagamento,&quot;DataLimitePagamentoAnticipato&quot; )(0))
			n=n+1
		endif
		if getTagCont( Dettagliopagamento,&quot;PenalitaPagamentiRitardati&quot; )(0) &lt;&gt; &quot;&quot; then
			Riferimenti(n) = &quot;Penalit|e0| pag. ritardati: &quot; &amp; getTagCont( Dettagliopagamento,&quot;PenalitaPagamentiRitardati&quot; )(0)
			n=n+1
		endif
		
		CodicePagamento = getTagCont( Dettagliopagamento,&quot;CodicePagamento&quot; )(0)
		if CodicePagamento &lt;&gt; &quot;&quot; and CodicePagamento &lt;&gt; CodicePagamentoT then
			Riferimenti(n) = &quot;Codice pag.: &quot; &amp; getTagCont( Dettagliopagamento,&quot;CodicePagamento&quot; )(0)
			n=n+1
			CodicePagamentoT = CodicePagamento
		endif
					
		if val( getTagCont( Dettagliopagamento,&quot;ImportoPagamento&quot; )(0)) &lt;&gt; 0 then
			Riferimenti(n) = &quot;Importo &quot; &amp; getTagCont( Dettagliopagamento,&quot;ImportoPagamento&quot; )(0)
			if getTagCont( Dettagliopagamento,&quot;DataScadenzaPagamento&quot; )(0) &lt;&gt; &quot;&quot; then
				Riferimenti(n) = Riferimenti(n) &amp; &quot; - Scadenza: &quot; &amp; formatoData( getTagCont( Dettagliopagamento,&quot;DataScadenzaPagamento&quot; )(0) )
			endif	
			n=n+1
			totPagamento = totPagamento + val(getTagCont( Dettagliopagamento,&quot;ImportoPagamento&quot; )(0))
		endif
	next
	n=n+1
 endif

 if totPagamento &lt;&gt; 0 then
	Foglio.getCellRangeByName( &quot;ImportoPagamento&quot; ).value = totPagamento
 else
	Foglio.getCellRangeByName( &quot;ImportoPagamento&quot; ).string = &quot;&quot;
 endif


 

REM riferimenti a ordini, contratti, commesse ecc
 For each v in getTagCont( DatiGenerali,&quot;DatiContratto&quot; )
 	if v = &quot;&quot; then exit for
	Riferimenti(n) = &quot;Contratto: &quot; &amp; getTagCont( v,&quot;IdDocumento&quot; )(0) 
	if getTagCont( v,&quot;CodiceCommessaConvenzione&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; cod. &quot; &amp; getTagCont( v,&quot;CodiceCommessaConvenzione&quot; )(0)
	if getTagCont( v,&quot;Data&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; del &quot; &amp; formatoData(getTagCont( v,&quot;Data&quot; )(0))
	if getTagCont( v,&quot;NumItem&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot;N. Linea: &quot; &amp;  getTagCont( v,&quot;NumItem&quot; )(0) 
	if getTagCont( v,&quot;CodiceCUP&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; CUP: &quot; &amp; getTagCont( v,&quot;CodiceCUP&quot; )(0) 
	if getTagCont( v,&quot;CodiceCIG&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; CIG: &quot; &amp; getTagCont( v,&quot;CodiceCIG&quot; )(0)
	n=n+1
 next

 For each v in getTagCont( DatiGenerali,&quot;DatiConvenzione&quot; )
 	if v = &quot;&quot; then exit for
 	Riferimenti(n) = &quot;Convenzione: &quot; &amp; getTagCont( v,&quot;IdDocumento&quot; )(0) 
 	if getTagCont( v,&quot;CodiceCommessaConvenzione&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; cod. &quot; &amp; getTagCont( v,&quot;CodiceCommessaConvenzione&quot; )(0)
	if getTagCont( v,&quot;Data&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; del &quot; &amp; formatoData(getTagCont( v,&quot;Data&quot; )(0))
	if getTagCont( v,&quot;NumItem&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot;N. Linea: &quot; &amp;  getTagCont( v,&quot;NumItem&quot; )(0) 
	if getTagCont( v,&quot;CodiceCUP&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; CUP: &quot; &amp; getTagCont( v,&quot;CodiceCUP&quot; )(0) 
	if getTagCont( v,&quot;CodiceCIG&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; CIG: &quot; &amp; getTagCont( v,&quot;CodiceCIG&quot; )(0)
	n=n+1
 next
 
 For each v in getTagCont( DatiGenerali,&quot;DatiOrdineAcquisto&quot; )
  	if v = &quot;&quot; then exit for
	Riferimenti(n) = &quot;Ordine acquisto: &quot; &amp; getTagCont( v,&quot;IdDocumento&quot; )(0) 
	if getTagCont( v,&quot;CodiceCommessaConvenzione&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; cod. &quot; &amp; getTagCont( v,&quot;CodiceCommessaConvenzione&quot; )(0)
	if getTagCont( v,&quot;Data&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; del &quot; &amp; formatoData(getTagCont( v,&quot;Data&quot; )(0))
	if getTagCont( v,&quot;NumItem&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot;N. Linea: &quot; &amp;  getTagCont( v,&quot;NumItem&quot; )(0) 
	if getTagCont( v,&quot;CodiceCUP&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; CUP: &quot; &amp; getTagCont( v,&quot;CodiceCUP&quot; )(0) 
	if getTagCont( v,&quot;CodiceCIG&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; CIG: &quot; &amp; getTagCont( v,&quot;CodiceCIG&quot; )(0)
	n=n+1
 next

 For each v in getTagCont( DatiGenerali,&quot;DatiFattureCollegate&quot; )
	if v = &quot;&quot; then exit for
	Riferimenti(n) = &quot;Fatt. collegate: &quot; &amp; getTagCont( v,&quot;IdDocumento&quot; )(0) 
	if getTagCont( v,&quot;CodiceCommessaConvenzione&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; cod. &quot; &amp; getTagCont( v,&quot;CodiceCommessaConvenzione&quot; )(0)
	if getTagCont( v,&quot;Data&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; del &quot; &amp; formatoData(getTagCont( v,&quot;Data&quot; )(0))
	if getTagCont( v,&quot;NumItem&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot;N. Linea: &quot; &amp;  getTagCont( v,&quot;NumItem&quot; )(0) 
	if getTagCont( v,&quot;CodiceCUP&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; CUP: &quot; &amp; getTagCont( v,&quot;CodiceCUP&quot; )(0) 
	if getTagCont( v,&quot;CodiceCIG&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; CIG: &quot; &amp; getTagCont( v,&quot;CodiceCIG&quot; )(0)
	n=n+1
 next

 For each v in getTagCont( DatiGenerali,&quot;DatiRicezione&quot; )
 	if v = &quot;&quot; then exit for
 	Riferimenti(n) = &quot;Ricezione PA: &quot; &amp; getTagCont( v,&quot;IdDocumento&quot; )(0)
	if getTagCont( v,&quot;CodiceCommessaConvenzione&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; cod. &quot; &amp; getTagCont( v,&quot;CodiceCommessaConvenzione&quot; )(0)
	if getTagCont( v,&quot;Data&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; del &quot; &amp; formatoData(getTagCont( v,&quot;Data&quot; )(0))
	if getTagCont( v,&quot;NumItem&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot;N. Linea: &quot; &amp;  getTagCont( v,&quot;NumItem&quot; )(0) 
	if getTagCont( v,&quot;CodiceCUP&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; CUP: &quot; &amp; getTagCont( v,&quot;CodiceCUP&quot; )(0) 
	if getTagCont( v,&quot;CodiceCIG&quot; )(0) &lt;&gt; &quot;&quot; then Riferimenti(n) = Riferimenti(n) &amp; &quot; CIG: &quot; &amp; getTagCont( v,&quot;CodiceCIG&quot; )(0)
	n=n+1
 next

 For each v in getTagCont( DatiGenerali,&quot;SAL&quot; )
	if v = &quot;&quot; then exit for
	Riferimenti(n) = &quot;SAL: &quot; &amp; getTagCont( v,&quot;DatiSAL&quot; )(0)
	n=n+1
 next
 
 if getTagCont( DatiGenerali,&quot;DatiTrasporto&quot; )(0) &lt;&gt; &quot;&quot; then
 	Riferimenti(n) = &quot;Trasportatore: &quot; &amp; getTagCont( DatiGenerali,&quot;Denominazione&quot; )(0)
	n=n+1
 endif 
  

 Foglio.getCellRangeByName( &quot;Riferimenti0&quot; ).string = Riferimenti(0)
 Foglio.getCellRangeByName( &quot;Riferimenti1&quot; ).string = Riferimenti(1)
 Foglio.getCellRangeByName( &quot;Riferimenti2&quot; ).string = Riferimenti(2)
 Foglio.getCellRangeByName( &quot;Riferimenti3&quot; ).string = Riferimenti(3)
 Foglio.getCellRangeByName( &quot;Riferimenti4&quot; ).string = Riferimenti(4)
 Foglio.getCellRangeByName( &quot;Riferimenti5&quot; ).string = Riferimenti(5)
 Foglio.getCellRangeByName( &quot;Riferimenti6&quot; ).string = Riferimenti(6)
 Foglio.getCellRangeByName( &quot;Riferimenti7&quot; ).string = Riferimenti(7)
 Foglio.getCellRangeByName( &quot;Riferimenti8&quot; ).string = Riferimenti(8)
 Foglio.getCellRangeByName( &quot;Riferimenti9&quot; ).string = Riferimenti(9) 
 if n &gt; 10 then 
	Foglio.getCellRangeByName( &quot;Riferimenti9&quot; ).string = &quot;(Sono presenti altre &quot;&amp; n-9 &amp;&quot; voci non visualizzate)&quot;
 endif


REM trasforma il nome file in link al file XML
 Foglio.getCellRangeByName( &quot;NomeFile&quot; ).clearContents(com.sun.star.sheet.CellFlags.STRING)
 
 dim args3(4) as new com.sun.star.beans.PropertyValue
 dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
 
 ThisComponent.getCurrentController().select(Foglio.getCellRangeByName( &quot;NomeFile&quot; ))
 document = ThisComponent.CurrentController.Frame
 args3(0).Name = &quot;Hyperlink.Text&quot;
 args3(0).Value = NomeFile
 args3(1).Name = &quot;Hyperlink.URL&quot;
 args3(1).Value = &quot;File:&quot; &amp; File
 args3(2).Name = &quot;Hyperlink.Target&quot;
 args3(2).Value = &quot;&quot;
 args3(3).Name = &quot;Hyperlink.Name&quot;
 args3(3).Value = NomeFile
 args3(4).Name = &quot;Hyperlink.Type&quot;
 args3(4).Value = 1
 dispatcher.executeDispatch(document, &quot;.uno:SetHyperlink&quot;, &quot;&quot;, 0, args3())
 
 if testNomeFile(NomeFile) then
	Foglio.getCellRangeByName( &quot;NomeFile&quot; ).clearContents(8)
 else
	Foglio.Annotations.insertNew(Foglio.getCellRangeByName( &quot;NomeFile&quot; ).getCellAddress, &quot;Il nome del file non |e8| conforme alle specifiche tecniche&quot;)
 endif 
 

&apos;disattiva selezione
 ThisComponent.getCurrentController().select(Foglio.getCellbyPosition(0,0))
 dispatcher.executeDispatch(document, &quot;.uno:Deselect&quot;, &quot;&quot;, 0, array()) 
 
End function

REM by Marco Gualmini




</script:module>
