Attribute VB_Name = "ACMDefaults"
Sub doPopulateDefaults()
'   Justin Pollard
'   August 4th, 2005
'   Populate Default Values in SKU Set Up Form
'   *** 03/07/2007 *** - JustinP - Set Defaults For Terminal Tackle as Pass to E3-N, Replen Code 0

    
    Sheets("Set Up Form").Select
    Range("E9").Select
    If Range("E10").Value <> "" Then Range(Selection, Selection.End(xlDown)).Select
    
    For Each theCell In Selection
        theCell.Offset(0, 11).Value = 1 'SKU Type
        theCell.Offset(0, 27).Value = 0.01 'PS Discount
        theCell.Offset(0, 35).Value = "D" 'Rank
        If theCell.Offset(0, 13).Value = 577 And theCell.Offset(0, 14).Value = 8 Then
            theCell.Offset(0, 36).Value = 0 'Distribution Code
            theCell.Offset(0, 37).Value = "N" 'Pass to E3
        Else
            theCell.Offset(0, 36).Value = 1 'Distribution Code
            theCell.Offset(0, 37).Value = "Y" 'Pass to E3
        End If
        theCell.Offset(0, 38).Value = "N" 'WM Brand
        theCell.Offset(0, 40).Value = "N" 'Cut Length
        theCell.Offset(0, 41).Value = "N" 'Tagging Type
        theCell.Offset(0, 44).Value = "N" 'Pre-Tag
        theCell.Offset(0, 45).Value = "N" 'MPP
        theCell.Offset(0, 46).Value = "A" 'Store Order Label Code
        theCell.Offset(0, 47).Value = "N" 'Competitive
        theCell.Offset(0, 49).Value = 1 'Replenishment Code
        theCell.Offset(0, 50).Value = 0 'Display Minimum
        theCell.Offset(0, 51).Value = 1 'Stock In Multiple
        theCell.Offset(0, 60).Value = "N" 'UCDE25
        theCell.Offset(0, 61).Value = "N" 'Canada Only
        theCell.Offset(0, 64).Value = "A" 'WM Only, BUS Only, Both
        theCell.Offset(0, 71).Value = "N" 'VTS
        theCell.Offset(0, 83).Value = "N" 'Tech Spec Sign
    Next
    Range("F9").Select
End Sub
Attribute VB_Name = "ACMValidation"
Sub doACMValidate()
'   Justin Pollard
'   August 07, 2005
'   ACM Level Validation
'   *** 03/07/2007 *** - JustinP - Account for Sub 577, Class 8 Replenishment Defaults
'   *** 06/14/2010 *** - JustinP - Make Values Upper Case (Mnemonic, UM, MasterCat, RTV, Ca Ready, PartNum)
'   *** 02/18/2011 *** - JustinP - Lookup WTC Values From Support Table Page, Hard Code PS Discount, Proration Values
'   *** 07/22/2014 *** - JustinP - Expand Validation for Softgoods Items
'   *** 12/02/2014 *** - JustinP - Update MPP Values From Y/N to N/O/P
'   *** 06/11/2015 *** - JustinP - Add validation warnings for default ticket & label variances
'   *** 06/17/2015 *** - JustinP - Hazard Reminders for Products With History of Hazard
'   *** 06/17/2015 *** - JustinP - Validate Current Version of SSF
'   *** 06/23/2015 *** - JustinP - Flip Validation Flag To 1
'   *** 06/23/2015 *** - JustinP - Add Validation When Ven # is 1 > Previous Record
'   *** 07/01/2015 *** - JustinP - Query Vendor Name Through Get Vendor
'   *** 09/14/2016 *** - JustinP - For any MSDS/SDS Y SKUs, RTV Code Must be 1F or 3HZ
'   *** 09/15/2016 *** - JustinP - Always Refresh WTC Table on Support Worksheet
'   *** 09/20/2016 *** - JustinP - Make Support Sheet Temporarily Visible For Refresh
'   *** 05/18/2017 *** - JustinP - Force a Refresh All to Update Color/Size Code Tables
'   *** 06/09/2017 *** - JustinP - Add Retail Rounding Validation, Set List Price = Retail - .01

'   Activate Tables Sheet to Make Sure All Columns Are Visible
    Application.ScreenUpdating = False
    
    ActiveWorkbook.RefreshAll 'Refresh All Queries, 2017.05.18
    
        Sheets("Tables").Select  'Commented Out For Refresh All, 2017.05.18
'        'Refresh WTC Table For Current Entries, 2016.09.15
'        Sheets("Support").Visible = True '2016.09.20
'        Sheets("Support").Select
'        Range("AL2").Select
'        Selection.QueryTable.Refresh False
'        Range("A1").Select
'        Sheets("Support").Visible = False '2016.09.20
    Sheets("Set Up Form").Select
    Application.ScreenUpdating = True

'   Determine if Softgoods Form, and if so, it must be exclusively Softgoods '2014.07.22
    If WorksheetFunction.CountA(Range("BR:BR")) > 1 Then fSoftgoods = 1 Else fSoftgoods = 0
    If fSoftgoods = 1 And WorksheetFunction.CountA(Range("BR:BR")) < WorksheetFunction.CountA(Range("E:E")) Then
        MsgBox "This SKU Set Up Form has both Style SKUs and bachelor SKUs.  Please separate these items onto two separate forms before you continue.", vbError, "Style Errors"
        Exit Sub
    End If

'   Unhide All Rows & Columns '2014.07.22
    Cells.Select
    Selection.EntireRow.Hidden = False
    Columns("A:CP").Select
    Selection.EntireColumn.Hidden = False

'   Dimension Declarations
    Dim rangeColor As Range
    Dim rangeCompetitive As Range
    Dim rangeCOO As Range
    Dim rangeDistCode As Range
    Dim rangeHierarchy As Range
    Dim rangeListClasses As Range
    Dim rangeMfg As Range
    Dim rangePreTag As Range
    Dim rangeRank As Range
    Dim rangeRTV As Range
    Dim rangeSize As Range
    Dim rangeSKUType As Range
    Dim rangeTagType As Range
    Dim rangeUM As Range
    Dim rangeWTC As Range
    Dim rangeHazard As Range
    Dim rangeTicketLabelDefault As Range
    Dim theValidationFlag As Range


'   Range Declarations
    Set rangeHierarchy = Sheets("Support").Range("L:L")
    Set rangeListClasses = Sheets("Support").Range("F:F")
    Set rangeColor = Sheets("Tables").Range("B:B")
    Set rangeCompetitive = Sheets("Tables").Range("E:E")
    Set rangeCOO = Sheets("Tables").Range("H:H")
    Set rangeDistCode = Sheets("Tables").Range("K:K")
    Set rangeMfg = Sheets("Tables").Range("N:N")
    Set rangePreTag = Sheets("Tables").Range("Q:Q")
    Set rangeRank = Sheets("Tables").Range("T:T")
    Set rangeRTV = Sheets("Tables").Range("W:W")
    Set rangeSize = Sheets("Tables").Range("Z:Z")
    Set rangeSKUType = Sheets("Tables").Range("AC:AC")
    Set rangeTagType = Sheets("Tables").Range("AF:AF")
    Set rangeUM = Sheets("Tables").Range("AI:AI")
    Set rangeWTC = Sheets("Support").Range("AL:AL")
    Set rangeHazard = Sheets("Support").Range("AO:AO")
    Set rangeTicketLabelDefault = Sheets("Support").Range("AT:AT")
    Set theValidationFlag = Sheets("Support").Range("BI2")

'   Determine Form Is Current Version, 2015.06.17
    Sheets("Support").Visible = True
    Sheets("Support").Select
    Range("AX2").Select
'    Selection.QueryTable.Refresh False 'Commented out due to RefreshAll, 2017.05.18
    If Selection.Value <> Sheets("Set Up Form").Range("B7").Value Then
        MsgBox "You are using an outdated version of the SKU Setup Form." & vbNewLine & vbNewLine & "Please transfer this submission to the current copy of the form.", vbCritical
        Exit Sub
    End If
'   Refresh Default Ticket & Label Table, 2015.06.11
    Range("AT2").Select
'    Selection.QueryTable.Refresh False 'Commented out due to RefreshAll, 2017.05.18


'   Determine Active Range
    Sheets("Set Up Form").Select
    
    Range("E9").Select
    If Range("E10").Value <> "" Then Selection.End(xlDown).Select
    theFinalRow = Selection.Row
    'Range(Cells(9, 1), Cells(theFinalRow, 89)).Select
    Range(Cells(9, 1), Cells(theFinalRow, 100)).Select
    Selection.Font.ColorIndex = 0
    Selection.Interior.ColorIndex = xlNone
    
    Range("E9").Select
    If Range("E10").Value <> "" Then Range(Selection, Selection.End(xlDown)).Select
    
    Set theCellRange = Selection
    Set theUPCRange = Range(Cells(9, 11), Cells(theFinalRow, 11))
    
        theErrorCount = 0
        theBlankCount = 0
        theDupePartCount = 0
        theDupeUPCCount = 0
        theStyleCount = 0
        theTicketLabelWarning = 0
        theHazardWarning = 0
        theSubClassID = 0
        theProp65Error = 0
    
    For Each theCell In Selection
        thePartNum = theCell
        theDescription = theCell.Offset(0, -3)
        theVenNum = theCell.Offset(0, -2)
        theVenName = theCell.Offset(0, -1)
        theMfg = theCell.Offset(0, 1)
        theCost = theCell.Offset(0, 2)
        theStdPk = theCell.Offset(0, 3)
        theInnPk = theCell.Offset(0, 4)
        theCOO = theCell.Offset(0, 5)
        theUPC = theCell.Offset(0, 6)
        theMfgPart = theCell.Offset(0, 7)
        theMnemonic = theCell.Offset(0, 8)
        theBuyer = theCell.Offset(0, 9)
        theMerchandiser = theCell.Offset(0, 10)
        theSKUType = theCell.Offset(0, 11)
        theDept = theCell.Offset(0, 12)
        theSubDept = theCell.Offset(0, 13)
        theClass = theCell.Offset(0, 14)
        theSubCl = theCell.Offset(0, 15)
        theHierarchy = Right("000" & theDept, 3) & Right("000" & theSubDept, 3) & Right("000" & theClass, 3) & Right("000" & theSubCl, 3)
'        theListHierarchy = Right("000" & theDept, 3) & Right("000" & theSubDept, 3) & Right("000" & theClass, 3)
        theList = theCell.Offset(0, 16)
        theWMRetail = theCell.Offset(0, 22)
        theBuyUM = theCell.Offset(0, 24)
        theSellUM = theCell.Offset(0, 26)
        theAKHIRetail = theCell.Offset(0, 29)
        thePRRetail = theCell.Offset(0, 31)
        theCanRetail = theCell.Offset(0, 33)
        theShelfLabel = theCell.Offset(0, 34)
        theRank = theCell.Offset(0, 35)
        theDistCode = theCell.Offset(0, 36)
        thePassToE3 = theCell.Offset(0, 37)
        theWMBrand = theCell.Offset(0, 38)
        theRTV = theCell.Offset(0, 39)
        theCutLength = theCell.Offset(0, 40)
        theTaggingType = theCell.Offset(0, 41)
        theMSDS = theCell.Offset(0, 42)
        thePreTag = theCell.Offset(0, 44)
        theMPP = theCell.Offset(0, 45)
        theStoreOrderLabel = theCell.Offset(0, 46)
        theCompetitive = theCell.Offset(0, 47)
        theMasterCat = theCell.Offset(0, 48)
        theReplCode = theCell.Offset(0, 49)
        theDispMin = theCell.Offset(0, 50)
        theShipMult = theCell.Offset(0, 51)
        theWeight = theCell.Offset(0, 52)
        theLength = theCell.Offset(0, 53)
        theWidth = theCell.Offset(0, 54)
        theHeight = theCell.Offset(0, 55)
        theLabelType = theCell.Offset(0, 56)
        theAdLabelType = theCell.Offset(0, 57)
        theTicketType = theCell.Offset(0, 58)
        theAdTicketType = theCell.Offset(0, 59)
        theUCDE25 = theCell.Offset(0, 60)
        theCanadaOnly = theCell.Offset(0, 61)
        theCanadaDistributed = theCell.Offset(0, 62)
        theCanLabel = theCell.Offset(0, 63)
        theWMOnly = theCell.Offset(0, 64)
        theStyle = theCell.Offset(0, 65)
        theStyleDesc = theCell.Offset(0, 66)
        theColor = theCell.Offset(0, 67)
        theSize = theCell.Offset(0, 69)
        theVTS = theCell.Offset(0, 71)
        theInitialForecast = theCell.Offset(0, 72)
        theSupercession = theCell.Offset(0, 75)
        theReplacement = theCell.Offset(0, 76)
        thePatternAfter = theCell.Offset(0, 77)
        theMultiplier = theCell.Offset(0, 78)
        theReleaseDate = theCell.Offset(0, 81)
        theEndOfLifeDate = theCell.Offset(0, 82)
        theTechSpec = theCell.Offset(0, 83)
        theProration1 = theCell.Offset(0, 85)
        theProration2 = theCell.Offset(0, 86)
        theWTC = theCell.Offset(0, 87)
        'theProp65 = theCell.Offset(0, 88)
        theProp65 = theCell.Offset(0, 89)
        theProp65Desc = theCell.Offset(0, 90)
        
'       Clear Existing SKU #s From Spreadsheet
        theCell.Offset(0, -4).ClearContents
        
        
'       DO VALIDATION ROUTINE
'       Ven # Validation
        '********** Validate Against Table **********
        If theVenNum = "" Then
            theCell.Offset(0, -2).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf theCell.Row > 9 Then
            If theVenNum = theCell.Offset(-1, -2).Value + 1 Then
                errorcell
                theErrorCount = theErrorCount + 1
            End If
        End If
        
'       Vendor Name Filled Out
'        If theVenName = "" Then
'            theCell.Offset(0, -1).Select
'            blankcell
'            theBlankCount = theBlankCount + 1
'        End If

        'Fill Out Vendor Name for New Vendors, Errors for Invalid Ven #, 2015.07.01
        If theCell.Offset(0, -2).Value <> theCell.Offset(-1, -2) Then
            theCell.Offset(0, -1).Value = getVendorName(theCell.Offset(0, -2).Value)
        Else
            theCell.Offset(0, -1).Value = theCell.Offset(-1, -1).Value
        End If
        If theCell.Offset(0, -1).Value = "" Then
            theCell.Offset(0, -1).Select
            blankcell
            theBlankCount = theBlankCount + 1
        End If

'       Part # Exceeds 15 Characters
        If Len(thePartNum) > 15 Then
            theCell.Select
            errorcell
            theErrorCount = theErrorCount + 1
        End If
        theCell.Value = UCase(theCell.Value) 'JP, 6/14/2010
                
'       Description Exceeds 30 Characters
        theDescription = Replace(theDescription, Chr(34), "in")
        theCell.Offset(0, -3).Value = theDescription
        If theDescription = "" Then
            theCell.Offset(0, -3).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theDescription) > 30 Then
                theCell.Offset(0, -3).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        
'       Mfg Exceeds 5 Characters
        If theMfg = "" Then
            theCell.Offset(0, 1).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theMfg) > 5 Or doTableLookup(theMfg, rangeMfg) = False Then
                theCell.Offset(0, 1).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 1).Value = UCase(theMfg)
                
'       Cost is Number, Round to 3 Decimal
        If theCost = "" Then
            theCell.Offset(0, 2).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theCost) = False Then
                theCell.Offset(0, 2).Select
                errorcell
                theErrorCount = theErrorCount + 1
        ElseIf theCost <> Round(theCost, 3) Then
                theCell.Offset(0, 2).Value = Round(theCost, 3)
        End If
        
'       StdPk Is Not Numeric, StdPk is Multiple of Inner
        If theStdPk = 0 Then
            theCell.Offset(0, 3).Value = 1
        End If
        If theStdPk = "" Then
            theCell.Offset(0, 3).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theStdPk) = False Then
                theCell.Offset(0, 3).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
'       Standard Pack is a Multiple of Inner Pack
        If IsEmpty(theStdPk) = False And IsEmpty(theInnPk) = False Then
            If IsNumeric(theStdPk) = True And IsNumeric(theInnPk) = True Then
                If Int(theStdPk / theInnPk) <> theStdPk / theInnPk Then
                    theCell.Offset(0, 3).Select
                    errorcell
                    theCell.Offset(0, 4).Select
                    errorcell
                    theErrorCount = theErrorCount + 1
                End If
            End If
        End If

        
'       InnPk Is Not Numeric or > StdPk
        If theInnPk = 0 Then
            theCell.Offset(0, 4).Value = 1
        End If
        If theInnPk = "" Then
            theCell.Offset(0, 4).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theInnPk) = False Or theInnPk > theStdPk Then
                theCell.Offset(0, 4).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        
'       Country of Origin Exceeds 2 Characters
        theCell.Offset(0, 5).Value = Trim(UCase(theCOO))
        theCOO = theCell.Offset(0, 5)
        If theCOO = "" Then
            theCell.Offset(0, 5).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theCOO) > 2 Or doTableLookup(theCOO, rangeCOO) = False Then
                theCell.Offset(0, 5).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 5).Value = UCase(theCOO) 'JP, 06/14/2010
        
'       UPC Is Number / Remove Alpha Characters / Validate Check Digit
        If UCase(theUPC) <> "ASSIGNED BY WM" Then
            If theUPC = "" Then 'UPC Is Blank
                theCell.Offset(0, 6).Select
                blankcell
                theBlankCount = theBlankCount + 1
            ElseIf IsNumeric(theUPC) = False Then 'UPC is Alpha
                    theCell.Offset(0, 6).Value = Replace(Replace(theUPC, "-", ""), " ", "") 'Remove Space and Dash
                    theUPC = theCell.Offset(0, 6).Value
            End If
            If IsNumeric(theCell.Offset(0, 6).Value) = False Then
                        theCell.Offset(0, 6).Select
                        errorcell
                        theErrorCount = theErrorCount + 1
            ElseIf IsNumeric(theUPC) = True Then 'Validate Check Digit
                    Dim theUPCVal As Range
                    Set theUPCVal = theCell.Offset(0, 6)
                    theVenCheckDigit = Right(theUPC, 1)
                    theCalcCheckDigit = CalcCheckDigit(theUPCVal)
                    If theVenCheckDigit <> theCalcCheckDigit Then
                        theCell.Offset(0, 6).Select
                        errorcell
                        theErrorCount = theErrorCount + 1
                    End If
            End If
        End If
        theCell.Offset(0, 6).Select
        Selection.NumberFormat = "General"
        
'       Mfg Exceeds 5 Characters
        If theMfgPart = "" Then
            theCell.Offset(0, 7).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theMfgPart) > 15 Then
                theCell.Offset(0, 7).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 7).Value = UCase(theMfgPart) 'JP, 06/14/2010

'       Mnemonic Exceeds 10 Characters
        If theMnemonic = "" Then
            theCell.Offset(0, 8).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theMnemonic) > 10 Then
                theCell.Offset(0, 8).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 8).Value = UCase(theMnemonic)

'       Buyer Exceeds 3 Characters
        If theBuyer = "" Then
            theCell.Offset(0, 9).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theBuyer) > 3 Then
                theCell.Offset(0, 9).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 9).Value = UCase(theBuyer)

'       Merchandiser Exceeds 3 Characters
        If theMerchandiser = "" Then
            theCell.Offset(0, 10).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theMerchandiser) > 3 Then
                theCell.Offset(0, 10).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 10).Value = UCase(theMerchandiser)
        
'       SKU Type Exceeds 2 Characters
        If theSKUType = "" Then
            theCell.Offset(0, 11).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theSKUType) > 2 Or doTableLookup(theSKUType, rangeSKUType) = False Then
                theCell.Offset(0, 11).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If

'       Dept is Number
        If theDept = "" Then
            theCell.Offset(0, 12).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theDept) = False Then
                theCell.Offset(0, 12).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If

'       SubDept is Number
        If theSubDept = "" Then
            theCell.Offset(0, 13).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theSubDept) = False Then
                theCell.Offset(0, 13).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If

'       Class is Number
        If theClass = "" Then
            theCell.Offset(0, 14).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theClass) = False Then
                theCell.Offset(0, 14).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If

'       SubCl is Number
        If theSubCl = "" Then
            theCell.Offset(0, 15).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theSubCl) = False Then
                theCell.Offset(0, 15).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If

'       Hierarchy Valid in System
        If doTableLookup(theHierarchy, rangeHierarchy) = False Then
                Range(Cells(theCell.Row, 17), Cells(theCell.Row, 20)).Select
                For Each theHierarchyComponent In Selection
                    theHierarchyComponent.Select
                    errorcell
                Next
                theErrorCount = theErrorCount + 1
        End If

'       List Price is Number, Round to 3 Decimal
'        If theList = "" Then
'            theCell.Offset(0, 16).Select
'            blankcell
'            theBlankCount = theBlankCount + 1
'        ElseIf IsNumeric(theList) = False Then
'                theCell.Offset(0, 16).Select
'                errorcell
'                theErrorCount = theErrorCount + 1
'        ElseIf theList <> Round(theList, 2) Then
'               theCell.Offset(0, 16).Value = Round(theList, 2)
'       End If

''       List Price is Generated by Retail Price
'        If theWMRetail <> "" Then
'            theCell.Offset(0, 16).Value = getListPrice(theWMRetail, theListHierarchy, rangeListClasses)
'            theCell.Offset(0, 16).Value = Round(theCell.Offset(0, 16).Value, 2)
'        End If

'       Set List Price 1 Cent Less Than Retail, 2017.06.09
        If theWMRetail <> "" Then
            theCell.Offset(0, 16).Value = Round(theWMRetail - 0.01, 2)
        End If
        
'       Retail Price Is Number
        If theWMRetail = "" Then
            theCell.Offset(0, 22).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theWMRetail) = False Then
                theCell.Offset(0, 22).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        
'       Validate Rounding On Retail Price
        If theCutLength = "N" Then
            If Round(theWMRetail, 2) <> Round(RetailRound(theWMRetail), 2) Then
                theCell.Offset(0, 22).Select
                errorcell
                theErrorCount = theErrorCount + 1
            End If
        End If

'       BuyUM Exceeds 3 Characters
        If theBuyUM = "" Then
            theCell.Offset(0, 24).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theBuyUM) > 3 Or doTableLookup(theBuyUM, rangeUM) = False Then
                theCell.Offset(0, 24).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 24).Value = UCase(theBuyUM)

'       SellUM Exceeds 3 Characters
        If theSellUM = "" Then
            theCell.Offset(0, 26).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theSellUM) > 3 Or doTableLookup(theSellUM, rangeUM) = False Then
                theCell.Offset(0, 26).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 26).Value = UCase(theSellUM)
        
'       Hard Code 0.01 in PS Discount Field
        theCell.Offset(0, 27).Value = 0.01
        
'       Alaska/Hawaii Retail
        If theAKHIRetail = "" Then
            theCell.Offset(0, 29).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theAKHIRetail) = False Then
                theCell.Offset(0, 29).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If


'       Puerto Rico Retail
        If thePRRetail = "" Then
            theCell.Offset(0, 31).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(thePRRetail) = False Then
                theCell.Offset(0, 31).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If

'       Canada Retail
        If theCanRetail = "" Then
            theCell.Offset(0, 33).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theCanRetail) = False Then
                theCell.Offset(0, 33).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        
'       Shelf Label Description Exceeds 30 Characters
        theShelfLabel = Replace(theShelfLabel, Chr(34), " In.")
        theCell.Offset(0, 34).Value = theShelfLabel
        If theShelfLabel = "" Then
            theCell.Offset(0, 34).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theShelfLabel) > 30 Then
                theCell.Offset(0, 34).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If

'       Rank
        theCell.Offset(0, 35).Value = UCase(theRank)
        If theRank = "" Then
            theCell.Offset(0, 35).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theRank) > 1 Or doTableLookup(UCase(theRank), rangeRank) = False Then
                theCell.Offset(0, 35).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 35).Value = UCase(theRank) 'JP, 06/14/2010
        
        
'       Distribution Code
        If theDistCode = "" Then
            theCell.Offset(0, 36).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theDistCode) > 1 Or doTableLookup(theDistCode, rangeDistCode) = False Then
                theCell.Offset(0, 36).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 36).Value = UCase(theDistCode) 'JP, 06/14/2010

'       Pass to E3
        If thePassToE3 = "" Then
            theCell.Offset(0, 37).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf thePassToE3 <> "Y" And thePassToE3 <> "N" Then
                theCell.Offset(0, 37).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 37).Value = UCase(thePassToE3)

'       WM Brand
        If theWMBrand = "" Then
            theCell.Offset(0, 38).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf UCase(theWMBrand) <> "Y" And UCase(theWMBrand) <> "N" And UCase(theWMBrand) <> "E" Then
                theCell.Offset(0, 38).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 38).Value = UCase(theWMBrand)

'       RTV Code
        If theRTV = "" Then
            theCell.Offset(0, 39).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theRTV) > 2 Or doTableLookup(theRTV, rangeRTV) = False Then
                theCell.Offset(0, 39).Select
                errorcell
                theErrorCount = theErrorCount + 1
        ElseIf theMSDS = "Y" And theRTV <> "1F" And theRTV <> "3HZ" Then '2016.09.14
                theCell.Offset(0, 39).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 39).Value = UCase(theRTV)

'       Cut Length
        If theCutLength = "" Then
            theCell.Offset(0, 40).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf UCase(theCutLength) <> "Y" And UCase(theCutLength) <> "N" Then
                theCell.Offset(0, 40).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 40).Value = UCase(theCutLength)

'       Tagging Type
        If theTaggingType = "" Then
            theCell.Offset(0, 41).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theTaggingType) > 1 Or doTableLookup(theTaggingType, rangeTagType) = False Then
                theCell.Offset(0, 41).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 41).Value = UCase(theTaggingType) 'JP, 06/14/2010

'       MSDS
        If theMSDS = "" Then
            theCell.Offset(0, 42).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf theMSDS <> "Y" And theMSDS <> "N" Then
                theCell.Offset(0, 42).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 42).Value = UCase(theMSDS) 'JP, 06/14/2010

'       PreTag
        If thePreTag = "" Then
            theCell.Offset(0, 44).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(thePreTag) > 1 Or doTableLookup(thePreTag, rangePreTag) = False Then
                theCell.Offset(0, 44).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 44).Value = UCase(thePreTag) 'JP, 06/14/2010

'       MPP, 2014.12.18
        If theMPP = "" Then
            theCell.Offset(0, 45).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf UCase(theMPP) <> "N" And UCase(theMPP) <> "O" And UCase(theMPP) <> "P" Then
                theCell.Offset(0, 45).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 45).Value = UCase(theMPP)
        
'       Store Order Label Code
        If theStoreOrderLabel = "" Then
            theCell.Offset(0, 46).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf theStoreOrderLabel <> "A" And theStoreOrderLabel <> "B" Then
                theCell.Offset(0, 46).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 46).Value = UCase(theStoreOrderLabel) 'JP, 06/14/2010
        
'       Competitive Code
        theCell.Offset(0, 47).Value = Trim(theCell.Offset(0, 47).Value)
        If theCompetitive = "" Then
            theCell.Offset(0, 47).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theCompetitive) > 1 Or doTableLookup(theCompetitive, rangeCompetitive) = False Then
                theCell.Offset(0, 47).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 47).Value = UCase(theCompetitive) 'JP, 06/14/2010

'       Master Catalog
        If theMasterCat = "" Then
            theCell.Offset(0, 48).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf UCase(theMasterCat) <> "Y" And UCase(theMasterCat) <> "N" Then
                theCell.Offset(0, 48).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 48).Value = UCase(theMasterCat)

'       Replenishment Code
        If theReplCode = "" Then
            theCell.Offset(0, 49).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf theReplCode <> 1 And theReplCode <> 0 Then
                theCell.Offset(0, 49).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If

'       Display Min
        If theDispMin = "" Then
            theCell.Offset(0, 50).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf theDispMin <> 1 And theDispMin <> 0 Then
                theCell.Offset(0, 50).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If

'       Ship Multiple
        If theShipMult = "" Then
            theCell.Offset(0, 51).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theShipMult) = False Then
                theCell.Offset(0, 51).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If

'       Ship Weight is Number > 0, Round to 3 Decimal
        If theWeight = "" Then
            theCell.Offset(0, 52).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theWeight) = False Or theWeight = 0 Then
                theCell.Offset(0, 52).Select
                errorcell
                theErrorCount = theErrorCount + 1
        ElseIf theWeight <> Round(theWeight, 3) Then
                theCell.Offset(0, 52).Value = Round(theWeight, 3)
        End If
        
'       Length is Number > 0, Round to 1 Decimal
        If theLength = "" Then
            theCell.Offset(0, 53).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theLength) = False Or theLength = 0 Then
                theCell.Offset(0, 53).Select
                errorcell
                theErrorCount = theErrorCount + 1
        ElseIf theLength <> Round(theLength, 1) Then
                theCell.Offset(0, 53).Value = Round(theLength, 1)
        End If
        
'       Width is Number > 0, Round to 1 Decimal
        If theWidth = "" Then
            theCell.Offset(0, 54).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theWidth) = False Or theWidth = 0 Then
                theCell.Offset(0, 54).Select
                errorcell
                theErrorCount = theErrorCount + 1
        ElseIf theWidth <> Round(theWidth, 1) Then
                theCell.Offset(0, 54).Value = Round(theWidth, 1)
        End If
        
'       Height is Number > 0, Round to 1 Decimal
        If theHeight = "" Then
            theCell.Offset(0, 55).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theHeight) = False Or theHeight = 0 Then
                theCell.Offset(0, 55).Select
                errorcell
                theErrorCount = theErrorCount + 1
        ElseIf theHeight <> Round(theHeight, 1) Then
                theCell.Offset(0, 55).Value = Round(theHeight, 1)
        End If
        
'       Label Type
        If theLabelType = "" Then
            theCell.Offset(0, 56).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf theLabelType <> 1 And theLabelType <> 2 _
                And theLabelType <> 4 Then
                theCell.Offset(0, 56).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        
'       Ad Label Type
        If theAdLabelType = "" Then
            theCell.Offset(0, 57).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf theAdLabelType <> 1 And theAdLabelType <> 2 Then
                theCell.Offset(0, 57).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        
'       Ticket Type
        If theTicketType = "" Then
            theCell.Offset(0, 58).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf theTicketType <> 1 And theTicketType <> 2 _
                And theTicketType <> 3 And theTicketType <> 4 Then
                theCell.Offset(0, 58).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        
'       Ad Ticket Type
        If theAdTicketType = "" Then
            theCell.Offset(0, 59).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf theAdTicketType <> 1 And theAdTicketType <> 2 And theAdTicketType <> 3 Then
                theCell.Offset(0, 59).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        
'       Determine Default Ticket & Label Types, 2015.06.11
'       Determine Hazard Likelihood by Taxonomy & MSDS Flag, 2015.06.17
        If theSubClassID <> (theSubDept * 1000000 + theClass * 1000 + theSubCl) Then
            theSubClassID = theSubDept * 1000000 + theClass * 1000 + theSubCl
            x = JPMatch(theSubClassID, rangeTicketLabelDefault, 0)
            h = JPMatch(theSubClassID, rangeHazard, 0)
        End If
        If x > 0 Then
            theDefaultLabelType = Sheets("Support").Cells(x, 48).Value
            theDefaultTicketType = Sheets("Support").Cells(x, 47).Value
            If theLabelType <> theDefaultLabelType Then
                theTicketLabelWarning = theTicketLabelWarning + 1
            End If
            If theTicketType <> theDefaultTicketType Then
                If Not (theDefaultTicketType = 3 And (theTicketType = 2 Or theTicketType = 4)) Then
                    theTicketLabelWarning = theTicketLabelWarning + 1
                End If
            End If
        End If
        'Build Warning If >= 5% Of SubClass are Hazardous and MSDS = No
        If h > 0 Then
            theHazardPct = Sheets("Support").Cells(h, 44).Value
            If UCase(theMSDS) = "N" And theHazardPct > 0.05 Then
                theHazardWarning = theHazardWarning + 1
            End If
        End If
                
        
'       UCDE25
        If theUCDE25 = "" Then
            theCell.Offset(0, 60).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf UCase(theUCDE25) <> "N" Then
                theCell.Offset(0, 60).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 60).Value = UCase(theUCDE25)

'       Canada Only
        If theCanadaOnly = "" Then
            theCell.Offset(0, 61).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf UCase(theCanadaOnly) <> "Y" And UCase(theCanadaOnly) <> "N" And UCase(theCanadaOnly) <> "C" Then
                theCell.Offset(0, 61).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 61).Value = UCase(theCanadaOnly)
        If theCell.Offset(0, 61).Value = "Y" Then theCell.Offset(0, 61).Value = "C"
        
'       Canada Distributed
        If theCanadaDistributed = "" Then
            theCell.Offset(0, 62).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf UCase(theCanadaDistributed) <> "Y" And UCase(theCanadaDistributed) <> "N" Then
                theCell.Offset(0, 62).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 62).Value = UCase(theCanadaDistributed)
        
'       Canada Label Compliance
        If theCanLabel = "" Then
            theCell.Offset(0, 63).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theCanLabel) > 1 Then
                theCell.Offset(0, 63).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 63).Value = UCase(theCanLabel)

'       Chain Only
        If theWMOnly = "" Then
            theCell.Offset(0, 64).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf UCase(theWMOnly) <> "A" And UCase(theWMOnly) <> "B" And UCase(theWMOnly) <> "N" Then
                theCell.Offset(0, 64).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 64).Value = UCase(theWMOnly) 'JP, 06/14/2010

'       Style Level Validation
'       Style # Exceeds 15 Characters
        If Len(theStyle) > 15 Then
            theCell.Offset(0, 65).Select
            errorcell
            theErrorCount = theErrorCount + 1
        End If
        theStyle = Replace(theStyle, ",", "")
        theStyle = Trim(theStyle) '2014.07.22
        theCell.Offset(0, 65).Value = UCase(theStyle)
        If theStyle <> "" And theStyleDesc = "" Then 'Style Description is Blank for Style SKUs
            theCell.Offset(0, 66).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf theStyle <> "" And Len(theStyleDesc) > 30 Then
            theCell.Offset(0, 66).Select
            errorcell
            theErrorCount = theErrorCount + 1
        End If
        If theStyle <> "" And theColor = "" Then 'Color is Blank for Style SKUs
            theCell.Offset(0, 67).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf theStyle <> "" And doTableLookup(theColor, rangeColor) = False Then
            theCell.Offset(0, 67).Select
            errorcell
            theErrorCount = theErrorCount + 1
        End If
        If theStyle <> "" And theSize = "" Then 'Size is Blank for Style SKUs
            theCell.Offset(0, 69).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf theStyle <> "" And doTableLookup(Right("    " & theSize, 4), rangeSize) = False Then
            theCell.Offset(0, 69).Select
            errorcell
            theErrorCount = theErrorCount + 1
        End If

'       Style Count
        theStyleNum = UCase(theCell.Offset(0, 65))
        If theStyleNum <> "" And theStyleNum <> "N/A" And theStyleNum <> "NA" Then
            theStyleCount = theStyleCount + 1
        End If

    
'       VTS
        If theVTS = "" Then
            theCell.Offset(0, 71).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf UCase(theVTS) <> "Y" And UCase(theVTS) <> "N" Then
                theCell.Offset(0, 71).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 71).Value = UCase(theVTS)
    
'       Forecast/Pattern After Data
        If theInitialForecast = "" And thePassToE3 <> "N" And theReplCode <> 0 Then
            If thePatternAfter = "" Or theMultiplier = "" Then
                theCell.Offset(0, 77).Select
                blankcell
                theCell.Offset(0, 78).Select
                blankcell
                theBlankCount = theBlankCount + 1
            End If
        End If
    
'       Release Date
        If theReleaseDate = "" Then
            theCell.Offset(0, 81).Select
            blankcell
            theBlankCount = theBlankCount + 1
        End If
    
'       End of Life Date
        If theEndOfLifeDate = "" Then
            theCell.Offset(0, 82).Select
            blankcell
            theBlankCount = theBlankCount + 1
        End If
    
'       Tech Spec Required
        If theTechSpec = "" Then
            theCell.Offset(0, 83).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf theTechSpec <> "Y" And theTechSpec <> "N" Then
                theCell.Offset(0, 83).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 83).Value = UCase(theTechSpec)
        
'       Enter Proration and Pull in WTC Data *** 2011.02.18 - JustinP
        'Proration Value (Any)
        theCell.Offset(0, 85).Value = ""
        'Proration Value (Full)
        theCell.Offset(0, 86).Value = 0
        theTaxonomy = theDept * 1000000000 + theSubDept * 1000000 + theClass * 1000 + theSubCl
        theWTCLookup = doLookupName(theTaxonomy, rangeWTC)
        If theWTCLookup <> "" Then
            theCell.Offset(0, 87).Value = theWTCLookup
        Else
            theCell.Offset(0, 87).Value = 0
        End If
        
'       Prop 65 Added 5/9/19
        'If empty
        If theProp65 = "" Then
            theCell.Offset(0, 89).Select
            blankcell
            theBlankCount = theBlankCount + 1
        Else:
            theProp65 = Right("000" & theProp65, 3)
            If theProp65 = "004" Or theProp65 = "005" Or theProp65 = "006" Or theProp65 = "007" Then
                If theProp65Desc = "" Then
                theCell.Offset(0, 90).Select
                blankcell
                theBlankCount = theBlankCount + 1
                End If
            End If
        End If
        
'        'If not correct Prop 65
        If theProp65 <> "" Then
            theProp65 = Right("000" & theProp65, 3)
            If theProp65 <> "N/A" And theProp65 <> "001" And theProp65 <> "002" And theProp65 <> "003" And theProp65 <> "004" And theProp65 <> "005" And theProp65 <> "006" And theProp65 <> "007" Then
                theCell.Offset(0, 89).Select
                Selection.Font.Color = RGB(255, 0, 0)
                theErrorCount = theErrorCount + 1
            End If
        End If

'       Duplicate Record Validation
'       Search for Duplicate Part # Records
        If WorksheetFunction.CountIf(theCellRange, theCell) > 1 Then
            theCell.Select
            errorcell
            theDupePartCount = theDupePartCount + 1
        End If
'       Search for Duplicate UPC Records
        If theUPC <> "" And UCase(theUPC) <> "ASSIGNED by WM" And WorksheetFunction.CountIf(theUPCRange, theUPC) > 1 Then
            theCell.Offset(0, 6).Select
            errorcell
            theDupeUPCCount = theDupeUPCCount + 1
        End If

    Next

'   STYLE LEVEL VALIDATION
    If fSoftgoods = 1 Then
        'Formatting & Sortation
        doClearLineFormats
        doSortByStyle
        doApplyBorders
        'Check Vendor Names
        doValidateVendorNames
        'Search For Inconsistencies in Styles
        doBuildStyleColorSizeMatrix
    End If
    
    Range("F9").Select
    
'   BUILD ERROR MESSAGES
'   Build Error Message for Blank Cells
    If theBlankCount = 1 Then
        blankmsg = "You have left 1 required cell empty." & vbNewLine & _
                    "The missing cell has been highlighted red." & vbNewLine & _
                    "Please resolve and re-validate."
    ElseIf theBlankCount > 1 Then
        blankmsg = "You have left " & theBlankCount & " required cells empty." & vbNewLine & _
                    "The missing cells have been highlighted red." & vbNewLine & _
                    "Please resolve and re-validate."
    End If
'   Build Error Message for Error Values
    If theErrorCount = 1 Then
        errormsg = "You have 1 error value in a required cell." & vbNewLine & _
                    "The error has been highlighted with red text." & vbNewLine & _
                    "Please resolve and re-validate."
    ElseIf theErrorCount > 1 Then
        errormsg = "You have " & theErrorCount & " errors in required cells." & vbNewLine & _
                    "The cells with errant values have been highlighted with red text." & vbNewLine & _
                    "Please resolve and re-validate."
    End If
'   Build Error Message for Duplicate Part #s
    If theDupePartCount > 0 Then
        dupepartmsg = "Duplicate Part #s exist on this worksheet.  Please resolve and re-validate."
    End If
'   Build Error Message for Duplicate UPC #s
    If theDupeUPCCount > 0 Then
        dupeupcmsg = "Duplicate UPC #s exist on this worksheet.  Please resolve and re-validate."
    End If
'   Build Warning Message for Ticket & Label Type Non-Default Values, 2015.06.11
    If theTicketLabelWarning > 0 Then
        MsgBox "You have chosen label and ticket types outside of the category default." & vbNewLine & "Please confirm the values are correct before submitting form.", vbExclamation, "Non-Standard Label and Ticket Assignment"
    End If
'   Build Warning Message for Potentially Hazardous Values, 2015.06.17
    If theHazardWarning > 0 Then
        MsgBox "There are non-SDS SKUs in SubClasses with a history of hazardous items.  Do they need an SDS?", vbInformation, "Hazardous SKU Reminder"
    End If
'   Create Message Box
    If theBlankCount = 0 And theErrorCount = 0 And theDupeCount = 0 And theDupeUPCCount = 0 Then
        MsgBox "No errors found.  You may forward to Merchandise Operations."
    ElseIf theBlankCount > 0 And theErrorCount = 0 And theDupeCount = 0 And theDupeUPCCount = 0 Then
        MsgBox blankmsg, vbCritical, "Error(s) Exist on Set Up Form"
    ElseIf theBlankCount = 0 And theErrorCount > 0 And theDupeCount = 0 And theDupeUPCCount = 0 Then
        MsgBox errormsg, vbCritical, "Error(s) Exist on Set Up Form"
    ElseIf theBlankCount > 0 And theErrorCount > 0 And theDupeCount = 0 And theDupeUPCCount = 0 Then
        MsgBox blankmsg & vbNewLine & vbNewLine & errormsg, vbCritical, "Error(s) Exist on Set Up Form"
    ElseIf theBlankCount > 0 Or theErrorCount > 0 Or theDupeCount = 0 Or theDupeUPCCount = 0 Then
        MsgBox blankmsg & vbNewLine & vbNewLine & errormsg & vbNewLine & vbNewLine & dupepartmsg & vbNewLine & vbNewLine & dupeupcmsg, vbCritical, "Error(s) Exist on Set Up Form"
    End If
        
        
'   Capture Error Message Data
    Sheets("Support").Visible = True
    Sheets("Support").Range("AA1").Value = blankmsg & vbNewLine & vbNewLine & errormsg & vbNewLine & vbNewLine & dupepartmsg & vbNewLine & vbNewLine & dupeupcmsg
    Sheets("Support").Visible = False
        
    
'   Validate Against Existing Data in the System
    doPartNumberUpload
    doUPCUpload
    doODBCTableRefresh
    doExistingSKUValidation
    If theStyleCount > 0 Then
        doVendorStyleUpload
        doExistingStyleValidation
    End If
    
'   Build Error Message for Duplicate Part #(s)
    theExistingPartNumCount = Sheets("Support").Range("AA2").Value
    If theExistingPartNumCount > 0 Then
        If theExistingPartNumCount = 1 Then
            existPartMsg = "A part # on this sheet already exists in the system." & vbNewLine & _
                            "The existing SKU # has been placed in the corresponding SKU # Field."
        Else
            existPartMsg = theExistingPartNumCount & " part #s on this sheet already exist in the system." & vbNewLine & _
                            "The existing SKU #s have been placed in the corresponding SKU # Fields."
        End If
    End If
        
'   Build Error Message for Duplicate UPC #(s)
    theExistingUPCCount = Sheets("Support").Range("AA3").Value
    If theExistingUPCCount > 0 Then
        If theExistingUPCCount = 1 Then
            existUPCMsg = "A UPC on this sheet already exists in the system." & vbNewLine & _
                            "The existing SKU # has been placed in the corresponding SKU # Field."
        Else
            existUPCMsg = theExistingUPCCount & " UPC #s on this sheet already exist in the system." & vbNewLine & _
                            "The existing SKU #s have been placed in the corresponding SKU # Fields."
        End If
    End If
    
'   Create Message Box for Existing SKUs
    If theExistingPartNumCount > 0 And theExistingUPCCount > 0 Then
        MsgBox existPartMsg & vbNewLine & vbNewLine & existUPCMsg & vbNewLine & vbNewLine & _
                "Please resolve all issues by editing the part #/UPC duplicates or removing the record.", vbExclamation, "SKU(s) May Exist in System"
    ElseIf theExistingPartNumCount > 0 And theExistingUPCCount = 0 Then
        MsgBox existPartMsg & vbNewLine & vbNewLine & _
                "Please resolve all issues by editing the part # duplicate(s) or removing the record.", vbExclamation, "SKU(s) May Exist in System"
    ElseIf theExistingPartNumCount = 0 And theExistingUPCCount > 0 Then
        MsgBox existUPCMsg & vbNewLine & vbNewLine & _
                "Please resolve all issues by editing the /UPC duplicate(s) or removing the record.", vbExclamation, "SKU(s) May Exist in System"
    End If
        
        
'   Build Error Message for Existing Style
    theExistingStyleCount = Sheets("Support").Range("AA4").Value
    If theExistingStyleCount > 0 And theExistingStyleCount < WorksheetFunction.CountA(Range("E:E")) - 1 Then
        If theExistingStyleCount = 1 Then
            existStyleMsg = "A style on this sheet already exists in the system." & vbNewLine & _
                            "The affected style has been highlighted with red text." & vbNewLine & _
                            "Please remove the style from this form and add to a new form."
        Else
            existStyleMsg = theExistingStyleCount & " Style #s on this sheet already exist in the system." & vbNewLine & _
                            "The affected styles has been highlighted with red text." & vbNewLine & _
                            "Please remove the styles from this form and add to a new form."

        End If
        MsgBox existStyleMsg, vbExclamation, "Style(s) May Exist in System"
    End If
        
    'Flip Validation Flag, 2015.06.23
    theValidationFlag.Value = 1
        
End Sub


Attribute VB_Name = "ADODB_Support_v20060404"
Dim Conn As Object
Dim openCount As Variant
Dim ODBCErrorNum As Long

Function openDBConnection(Optional DSN As String = "DSN=QRY400;") As Boolean
    ODBCErrorNum = 0
    On Error GoTo HandleError
    
ResumeSpot:
    If (Not Conn Is Nothing) Then
        openCount = openCount + 1
        openDBConnection = True
    Else
        Set Conn = CreateObject("ADODB.Connection")
                                    'adPromptAlways = 1
                                    'adPromptComplete = 2
                                    'adPromptCompleteRequired = 3
                                    'adPromptNever = 4
        Conn.Properties("Prompt") = 2
        Conn.Open DSN
        If (Not Conn Is Nothing) Then
            openDBConnection = True
            openCount = 1
        Else
            openDBConnection = False
        End If
    End If
    Exit Function
    
HandleError:
    ODBCErrorNum = Err
    
    openDBConnection = False
    Set Conn = Nothing
    openCount = 0
End Function

Function closeDBConnection(Optional hardClose As Boolean = False) As Boolean
    ODBCErrorNum = 0
    On Error GoTo HandleError
    
ResumeSpot:
    If (Not Conn Is Nothing) Then
        openCount = openCount - 1
        If (hardClose Or openCount < 1) Then
            Conn.Close
            Set Conn = Nothing
            openCount = 0
        End If
        closeDBConnection = True
    Else
        closeDBConnection = False
    End If
    Exit Function
    
HandleError:
    ODBCErrorNum = Err
    
    closeDBConnection = False
    Set Conn = Nothing
    openCount = 0
    closeDBConnection = False
End Function

Function runQueryGetValue(ByVal SQL As String) As Variant
    ODBCErrorNum = 0
    On Error GoTo HandleError
    If Conn Is Nothing Then If Not openDBConnection() Then Exit Function
    
    Set Rs = Conn.Execute(SQL)
    If (Rs.EOF) Then
        runQueryGetValue = ""
    Else
        runQueryGetValue = Rs.Fields(0).Value
    End If
    Rs.Close
    Exit Function
    
HandleError:
    ODBCErrorNum = Err
    
    runQueryGetValue = ""
    'Set Conn = Nothing
    'openCount = 0
End Function

Function runQueryGetArray(ByVal SQL As String) As Variant
    ODBCErrorNum = 0
    On Error GoTo HandleError
    If Conn Is Nothing Then If Not openDBConnection() Then Exit Function
    
    Set Rs = Conn.Execute(SQL)
    Dim outputArray() As Variant
    ReDim outputArray(Rs.Fields.Count, 1)
    For x = 1 To Rs.Fields.Count
        outputArray(x - 1, 0) = Rs.Fields(x - 1).Name
    Next
    rRowCount = 2
    Do While Not Rs.EOF
        ReDim Preserve outputArray(Rs.Fields.Count, rRowCount)
        For x = 1 To Rs.Fields.Count
            outputArray(x - 1, rRowCount - 1) = Rs.Fields(x - 1).Value
        Next
        rRowCount = rRowCount + 1
        Rs.movenext
    Loop
    Rs.Close
    runQueryGetArray = outputArray
    Exit Function
    
HandleError:
    ODBCErrorNum = Err

    runQueryGetArray = ""
    'Set Conn = Nothing
    'openCount = 0
End Function

Function getStoreField(ByVal storeNum As Long, ByVal fieldName As String) As Variant
    getStoreField = runQueryGetValue("Select " & fieldName & " from mmc2klib.tblstr where strnum=" & storeNum)
End Function

Function getSKUField(ByVal skuNum As Long, ByVal fieldName As String) As Variant
    getSKUField = runQueryGetValue("Select " & fieldName & " from mmc2klib.invmst where inumbr=" & skuNum)
End Function

Function getSLIMField(ByVal skuNum As Long, ByVal storeNum As Long, ByVal fieldName As String) As Variant
    getSLIMField = runQueryGetValue("Select " & fieldName & " from e3swestmar.e3sitmu where iitem='" & Right("000000000" & skuNum, 9) & "' and istor='" & Right("00000" & storeNum, 5) & "'")
End Function

Function getTRIMField(ByVal skuNum As Long, ByVal dcId As Long, ByVal fieldName As String) As Variant
    getTRIMField = runQueryGetValue("Select " & fieldName & " from e3twestmar.e3itemu where iitem='" & Right("000000000" & skuNum, 9) & "' and iwhse='" & Right("000" & dcId, 3) & "'")
End Function

Function getINVBALField(ByVal skuNum As Long, ByVal storeNum As Long, ByVal fieldName As String) As Variant
    getINVBALField = runQueryGetValue("Select " & fieldName & " from wmc2klib.invbalw1 where inumbr=" & skuNum & " and istore=" & storeNum)
End Function

Function getINVCALField(ByVal theJDADate As Long, ByVal fieldName As String) As Variant
    getINVCALField = runQueryGetValue("Select " & fieldName & " from mmc2klib.invcal where datbak=" & theJDADate)
End Function

Function getIndecies(ByVal theProfile As String, ByVal theBeginWeek As Long, ByVal theEndWeek As Long) As Variant
    If theBeginWeek >= 1 And theEndWeek <= 52 And theBeginWeek <= theEndWeek Then
        theWeek = theBeginWeek
        Do While theWeek <= theEndWeek
            theSQLString = theSQLString & "PIX" & Right("00" & theWeek, 2) & "+"
            theWeek = theWeek + 1
        Loop
        theSQLString = "(" & Left(theSQLString, Len(theSQLString) - 1) & ")"
        getIndecies = runQueryGetValue("Select " & theSQLString & " as INDECIES from e3swestmar.e3sprfl where pprfl='" & Trim(theProfile) & "'")
    Else
        getIndecies = "Error.  Please review week parameters"
    End If
End Function
Function getLastError(Optional asText As Boolean = False) As Variant
    If (asText) Then
        getLastError = Error(ODBCErrorNum)
    Else
        getLastError = ODBCErrorNum
    End If
    ODBCErrorNum = 0
End Function
Function get3050Field(ByVal theSKU As Long, ByVal theFieldName As String) As Variant
    get3050Field = runQueryGetValue("Select " & theFieldName & " From WMQRYMER.JQP3050080 Where INUMBR = " & theSKU)
    If get3050Field = "" Then get3050Field = 0
End Function











Attribute VB_Name = "CustomFunction_APSUPP"
Function getVendorName(ByVal theSKUorVendor As Long) As Variant
    theSKUVendor = runQueryGetValue("Select ASNAME From MMC2KLIB.INVMST A,MMC2KLIB.APSUPP B Where A.ASNUM = B.ASNUM And INUMBR=" & theSKUorVendor)
    If theSKUVendor <> "" Then
        getVendorName = theSKUVendor
    Else
        theVenVendor = runQueryGetValue("Select ASNAME From MMC2KLIB.APSUPP Where ASNUM=" & theSKUorVendor)
        getVendorName = theVenVendor
    End If
    getVendorName = Trim(getVendorName)
End Function
Function getVendorType(ByVal theVenNum As Long) As Variant
    getVendorType = runQueryGetValue("Select ASTYPE From MMC2KLIB.APSUPP Where ASNUM = " & theVenNum)
End Function
Function getPrimaryBuyer(ByVal theVenNum As Long) As Variant
    getPrimaryBuyer = runQueryGetValue("Select ASBUYR From MMC2KLIB.APSUPP Where ASNUM = " & theVenNum)
End Function
Function getVendorSetupDate(ByVal theVenNum As Long) As Variant
    getVendorSetupDate = runQueryGetValue("Select ASDTIN From MMC2KLIB.APSUPP Where ASNUM = " & theVenNum)
End Function
Function getVendorActiveFlag(ByVal theVendor As Long) As Variant
    theTest = runQueryGetValue("Select ASMSCF From MMC2KLIB.APSUPP Where ASNUM = " & A2)
    If theTest = "Y" Then
        getVendorActiveFlag = "Vendor Active"
    Else
        getVendorActiveFlag = "Vendor Inactive"
    End If
End Function

Attribute VB_Name = "ExistingValidations"
Sub doODBCTableRefresh()
'   Justin Pollard
'   August 22, 2005
'   Refresh Imbedded ODBC Tables in Support Worksheet
'   ODBC Queries are Linked to Upload Files on QRY400

    Sheets("Support").Visible = True
    Sheets("Support").Select
    Range("N2").Select
    Selection.QueryTable.Refresh BackgroundQuery:=False
    Range("Q2").Select
    Selection.QueryTable.Refresh BackgroundQuery:=False
    Sheets("Support").Visible = False
    Sheets("Set Up Form").Select

End Sub
Sub doExistingSKUValidation()
'   Justin Pollard
'   August 19, 2005
'   Compare Set Up Form Values With ODBC Tables in Support Worksheet
'   Return SKU # if Conflict Exists in System
    
    
'   Declare Dimensions and Ranges
    Dim rangeExistingPartNum As Range
    Dim rangeExistingUPC As Range
    
    Set rangeExistingPartNum = Sheets("Support").Range("S:S")
    Set rangeExistingUPC = Sheets("Support").Range("N:N")
    
    theExistingPartCount = 0
    theExistingUPCCount = 0
    
'   Define SKU Set Up Range
    Sheets("Set Up Form").Select
    Range("E9").Select
    If Range("E10").Value <> "" Then Range(Selection, Selection.End(xlDown)).Select
    
    For Each theCell In Selection
        
        thePartNum = theCell.Offset(0, -2) & "-" & Trim(theCell.Value)
        theUPC = theCell.Offset(0, 6).Value
        
        'Validate Part # Against ODBC Table
        thePartNumMatchSKU = doMatchExisting(thePartNum, rangeExistingPartNum)
        
        'Validate UPC # Against ODBC Table
        If IsNumeric(theUPC) = True And theUPC <> 0 And theUPC <> "" Then
            theUPCMatchSKU = doMatchExisting(theCell.Offset(0, 6).Value * 1, rangeExistingUPC)
        Else
            theUPCMatchSKU = doMatchExisting(theCell.Offset(0, 6).Value, rangeExistingUPC)
        End If
        
        'If a Part # Match Exists, Put First SKU Number Match in SKU Field
        If thePartNumMatchSKU <> "" Then
            theCell.Offset(0, -4).Value = thePartNumMatchSKU
            theExistingPartCount = theExistingPartCount + 1
        End If
        
        'If a UPC Match Exists, Put SKU Number in SKU Field
        If theUPCMatchSKU <> "" Then
            theCell.Offset(0, -4).Value = theUPCMatchSKU
            theExistingUPCCount = theExistingUPCCount + 1
        End If
        
    Next
        
'   Build Error Count
    Sheets("Support").Range("AA2").Value = theExistingPartCount
    Sheets("Support").Range("AA3").Value = theExistingUPCCount
        
End Sub
Sub doExistingStyleValidation()
'   Justin Pollard
'   September 15, 2005
'   Compare Set Up Form Values With ODBC Tables in Support Worksheet
'   Create an error flag if the vendor/style exists in the system
'   *** 07/22/2014 *** - JustinP - Use Trim function against style # to remove any blank values
    
    
'   Refresh Background Data
    Sheets("Support").Visible = True
    Sheets("Support").Select
    Range("V2").Select
    Selection.QueryTable.Refresh BackgroundQuery:=False
    Sheets("Set Up Form").Select

'   Declare Dimensions and Ranges
    Dim rangeExistingStyle As Range
    Dim theStyle As String
    
    Set rangeExistingStyle = Sheets("Support").Range("X:X")
    
    theExistingStyleCount = 0
    
'   Define SKU Set Up Range
    Sheets("Set Up Form").Select
    Range("E9").Select
    If Range("E10").Value <> "" Then Range(Selection, Selection.End(xlDown)).Select
    
    For Each theCell In Selection
    
        theStyleNum = Trim(UCase(theCell.Offset(0, 65)))
        If theStyleNum <> "" And theStyleNum <> "N/A" And theStyleNum <> "NA" Then
            
            theStyle = theCell.Offset(0, -2) & "-" & theStyleNum
            
            'Validate Style # Against ODBC Table
            theStyleMatchSKU = doTableLookup(theStyle, rangeExistingStyle)
                    
            'If a Part # Match Exists, Put First SKU Number Match in SKU Field
            If theStyleMatchSKU = True Then
                theCell.Offset(0, 65).Select
                errorcell
                theExistingStyleCount = theExistingStyleCount + 1
            End If
                
        End If
                
    Next
        
'   Build Error Count
    Sheets("Support").Range("AA4").Value = theExistingStyleCount
        
End Sub
Attribute VB_Name = "Functions"
Function blankcell()
'   Justin Pollard
'   August 10, 2005
'   Error Message For Blank Cells
'       Highlights the Entire Cell Red
    
    ActiveCell.Select
    With Selection.Interior
        .ColorIndex = 3
        .Pattern = xlSolid
    End With

End Function
Function errorcell()
'   Justin Pollard
'   August 10, 2005
'   Error Message For Cells With Error
'       Highlights the Text Red
    
    
    ActiveCell.Select
    Selection.Font.ColorIndex = 3

End Function
Function doMatchExisting(theInput As Variant, theRange As Range) As String
'   Justin Pollard
'   August 18, 2005
'   Match Input to Data Within a Table
'   Used to Determine Vendor/Part # Combos or UPCs that Exist in the System
    
    Set x = theRange.Find(What:=theInput, LookIn:=xlValues, LookAt:=xlWhole)
    If (Not x Is Nothing) Then
        doMatchExisting = x.Offset(0, 1).Value
    Else
        doMatchExisting = ""
    End If

End Function
Function doTableLookup(theInput As Variant, theRange As Range) As Boolean
'   Justin Pollard
'   August 18, 2005
'   Boolean Match Determination
'   Used to Determine Whether a Value Exists in a Lookup Table

    Set x = theRange.Find(What:=theInput, LookAt:=xlWhole)
    If (Not x Is Nothing) Then
        doTableLookup = True
    Else
        doTableLookup = False
    End If

End Function
Function doLookupName(theInput As Variant, theRange As Range) As String
'   Justin Pollard
'   September 13, 2005
'   Boolean Match Determination
'   Used to Determine Whether a Value Exists in a Lookup Table

    Set x = theRange.Find(What:=theInput, LookIn:=xlValues, LookAt:=xlWhole)
    If (Not x Is Nothing) Then
        doLookupName = x.Offset(0, 1).Value
    Else
        doLookupName = ""
    End If

End Function
Function CalcCheckDigit(cell As Range) As Variant
'   Justin Pollard
'   August 22, 2005
'   Calculates UPC Check Digit
'   *** 03/07/2007 *** - JustinP - Calculate 15 Digit UPCs
    
    If (Len(cell.Value) < 10) Then
        CalcCheckDigit = "# Too Small To Calculate"
    ElseIf (Len(cell.Value) < 15) Then
        UPC = Right("0000000000000" & cell.Value, 13)
        Odd = Mid(UPC, 2, 1) * 1 + Mid(UPC, 4, 1) * 1 + Mid(UPC, 6, 1) * 1 + Mid(UPC, 8, 1) * 1 + Mid(UPC, 10, 1) * 1 + Mid(UPC, 12, 1) * 1
        Even = Mid(UPC, 1, 1) * 1 + Mid(UPC, 3, 1) * 1 + Mid(UPC, 5, 1) * 1 + Mid(UPC, 7, 1) * 1 + Mid(UPC, 9, 1) * 1 + Mid(UPC, 11, 1) * 1
        Step1 = (Odd * 3) + Even
        Step2 = Step1 - (Int(Step1 / 10) * 10)
        If Step2 = 10 Then
            Step3 = 0
        Else: Step3 = 10 - Step2
        End If
        CalcCheckDigit = Right(Step3, 1)
    Else
        UPC = Right("000000000000000" & cell.Value, 15)
        Odd = Mid(UPC, 2, 1) * 1 + Mid(UPC, 4, 1) * 1 + Mid(UPC, 6, 1) * 1 + Mid(UPC, 8, 1) * 1 + Mid(UPC, 10, 1) * 1 + Mid(UPC, 12, 1) * 1 + Mid(UPC, 14, 1) * 1
        Even = Mid(UPC, 1, 1) * 1 + Mid(UPC, 3, 1) * 1 + Mid(UPC, 5, 1) * 1 + Mid(UPC, 7, 1) * 1 + Mid(UPC, 9, 1) * 1 + Mid(UPC, 11, 1) * 1 + Mid(UPC, 13, 1) * 1
        Step1 = (Odd / 3) + Even
        Step2 = Step1 - (Int(Step1 / 10) * 10)
        If Step2 = 10 Then
            Step3 = 0
        Else: Step3 = 10 - Step2
        End If
        CalcCheckDigit = Right(Step3, 1)
    End If

End Function
Function JPMatch(ByRef MatchValue As Variant, ByRef FromMatchRange As Range, Optional ResultIfError As Variant)
'   Justin Pollard
'   March 20th, 2014
'   Create Match Function, With Error Record to Return if No Match
    
    If IsError(MatchValue) Or IsError(MatchColumn) Or IsError(ResultIfError) Then
        GoTo FormulaError
    Else
        On Error GoTo NoMatch
        x = WorksheetFunction.Match(MatchValue, FromMatchRange, 0)
        On Error Resume Next
        JPMatch = x
        Exit Function
    End If

FormulaError:
    JPMatch = "You entered the formula incorrectly"
    Exit Function

NoMatch:
    JPMatch = ResultIfError
    Exit Function

End Function
Function DoFixFileName(ByVal whatName As String) As String
    DoFixFileName = Replace(Replace(Replace(whatName, "/", "_"), Chr(34), "_"), "*", "_")
End Function
Function doSendEmail(ByVal theRecipient As String, ByVal theSubject As String, ByVal theBody As String)
'   Justin Pollard
'   August 13th, 2015
'   Send Email Without Attachment

    Dim OutApp As Object
    Dim OutMail As Object

    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
    
    On Error Resume Next
   ' Change the mail address and subject in the macro before you run it.
    With OutMail
        .To = theRecipient
        .Subject = theSubject
        .Body = theBody
        .Send
    End With
    On Error GoTo 0

    Set OutMail = Nothing
    Set OutApp = Nothing
End Function
Function getFileOwner(fileDir As String, fileName As String) As String
'   *** 10/20/2016 *** - JustinP - JP took from Internet and added replace function to remove domain

    'On Error Resume Next
    Dim secUtil As Object
    Dim secDesc As Object
    Set secUtil = CreateObject("ADsSecurityUtility")
    Set secDesc = secUtil.GetSecurityDescriptor(fileDir & fileName, 1, 1)
    getFileOwner = secDesc.owner
    getFileOwner = Replace(getFileOwner, "WESTMARINE\", "")
End Function
Attribute VB_Name = "Header"
Sub showVendorColumns()
'   Justin Pollard
'   July 31st, 2005
'   Show Only Columns Relevant to Vendor Set Up Form
'   Prop 65 Added 2/19/19

    Application.ScreenUpdating = False
    Columns("A:A").Select
    Selection.EntireColumn.Hidden = True
    Columns("F:F").Select
    Selection.EntireColumn.Hidden = True
    Columns("M:U").Select
    Selection.EntireColumn.Hidden = True
    Columns("Z:AB").Select
    Selection.EntireColumn.Hidden = True
    Columns("AE:BD").Select
    Selection.EntireColumn.Hidden = True
    Columns("BI:BO").Select
    Selection.EntireColumn.Hidden = True
    Columns("BQ:BQ").Select
    Selection.EntireColumn.Hidden = True
    Columns("BX:CG").Select
    Selection.EntireColumn.Hidden = True
    Columns("CJ:CO").Select
    Selection.EntireColumn.Hidden = True
    Columns("CP:CQ").Select
    Selection.EntireColumn.Hidden = Flase
    
    Range("G9").Select
    Range("A9").Select
    ActiveWindow.FreezePanes = False
    ActiveWindow.FreezePanes = True
    Range("B9").Select
    Application.ScreenUpdating = True
    '8/1/17 QAW explicitly Hide Submit to Merch Ops button
    ActiveSheet.Shapes(12).Visible = False
End Sub
Sub showAllColumns()
'   Justin Pollard
'   July 31st, 2005
'   Show Only Columns Relevant to ACM Set Up Form
'   Prop 65 Added 2/19/19
    
    Application.ScreenUpdating = False
    Columns("A:CO").Select
    Selection.EntireColumn.Hidden = False
    Columns("AF:AG").Select
    Selection.EntireColumn.Hidden = True
    Columns("AI:AI").Select
    Selection.EntireColumn.Hidden = True
    Columns("AK:AK").Select
    Selection.EntireColumn.Hidden = True
    Range("F9").Select
    Columns("CP:CQ").Select
    Selection.EntireColumn.Hidden = False
    ActiveWindow.FreezePanes = False
    ActiveWindow.FreezePanes = True
    Application.ScreenUpdating = True
    '8/1/17 QAW explicitly Show Submit to Merch Ops button
    ActiveSheet.Shapes(12).Visible = True
    
End Sub
Attribute VB_Name = "MerchOps"
Sub doCreateUploadSheet()
'   Justin Pollard
'   August 19th, 2005
'   Create Upload Form for Merch Ops Mass SKU Upload
'   *** 02/18/2011 - JustinP - Update to Add Proration, WTC Fields
'   *** 12/13/2016 - JustinP - Force Display Min to = 0 In Upload, Regardless of Form Entry

    Sheets("Upload").Visible = True

    'Choose Cell Range
    Sheets("Set Up Form").Select
    Range("E9").Select
    If (Range("E10").Value <> "") Then Selection.End(xlDown).Select
    theLastRow = Selection.Row

'   Copy Data From "SKU Set Up Form" Worksheet and Paste Into "Upload" Worksheet
    'Copy SKU -> Ven #
    Range(Cells(9, 1), Cells(theLastRow, 3)).Select
    Selection.Copy
    Sheets("Upload").Select
    Range("A3").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'Copy Mfg Name
    Sheets("Set Up Form").Select
    Range(Cells(9, 6), Cells(theLastRow, 6)).Select
    Selection.Copy
    Sheets("Upload").Select
    Range("D3").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'Copy Part #
    Sheets("Set Up Form").Select
    Range(Cells(9, 5), Cells(theLastRow, 5)).Select
    Selection.Copy
    Sheets("Upload").Select
    Range("E3").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'Copy Cost -> List Price
    Sheets("Set Up Form").Select
    Range(Cells(9, 7), Cells(theLastRow, 21)).Select
    Selection.Copy
    Sheets("Upload").Select
    Range("F3").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'Retail Price
    Sheets("Set Up Form").Select
    Range(Cells(9, 27), Cells(theLastRow, 27)).Select
    Selection.Copy
    Sheets("Upload").Select
    Range("U3").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'Buy UM
    Sheets("Set Up Form").Select
    Range(Cells(9, 29), Cells(theLastRow, 29)).Select
    Selection.Copy
    Sheets("Upload").Select
    Range("V3").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'Sell UM/PS Discount
    Sheets("Set Up Form").Select
    Range(Cells(9, 31), Cells(theLastRow, 32)).Select
    Selection.Copy
    Sheets("Upload").Select
    Range("W3").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'Shelf Label -> MSDS Shipping Hazard
    Sheets("Set Up Form").Select
    Range(Cells(9, 39), Cells(theLastRow, 47)).Select
    Selection.Copy
    Sheets("Upload").Select
    Range("Y3").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'PreTag -> MSDS Shipping Hazard
    Sheets("Set Up Form").Select
    Range(Cells(9, 49), Cells(theLastRow, 68)).Select
    Selection.Copy
    Sheets("Upload").Select
    Range("AH3").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'Proration -> WTC
    Sheets("Set Up Form").Select
    Range(Cells(9, 90), Cells(theLastRow, 92)).Select
    Selection.Copy
    Sheets("Upload").Select
    Range("BB3").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'Clear Out All Display Min Recommendations, 2016.12.13
    Sheets("Upload").Select
    rBottom = Cells(65536, 2).End(xlUp).Row
    For r = 3 To rBottom Step 1
        Cells(r, 40).Value = 0
    Next

        
'   Copy Worksheet to New Workbook
    Sheets("Upload").Copy
    Range("2:2").Select
    Selection.EntireRow.Delete 'Clear Header Name
    
    Range("E2").Select
    If Range("E3").Value <> "" Then Range(Selection, Selection.End(xlDown)).Select
    
    For Each thePartNum In Selection
        If IsEmpty(thePartNum.Offset(0, 5)) = False Then
            theUPC = thePartNum.Offset(0, 5)
            Else: theUPC = 0
        End If
        theMfgPartNum = thePartNum.Offset(0, 6)
        
        If thePartNum.Offset(0, -4).Value = "" Then
            thePartNum.Offset(0, -4).Value = 100000000
        End If
        
        thePartNum.Value = "_" & thePartNum
        thePartNum.Offset(0, 5).Value = "_" & theUPC
        thePartNum.Offset(0, 6).Value = "_" & theMfgPartNum
        
    Next
    DoEvents
    saveasname = "G:\Merch\CM TOOLBOX\Forms\SKU Set Up Form\Support\MassUpld.dif"
    Set fs = CreateObject("Scripting.FileSystemObject")
    If (fs.FileExists(saveasname)) Then
        Set f = fs.GetFile(saveasname)
        f.Delete (True)
    End If
    DoEvents
    ActiveWorkbook.SaveAs fileName:=saveasname, _
        FileFormat:=xlDIF, CreateBackup:=False, ConflictResolution:=xlLocalSessionChanges
    ActiveWorkbook.Close False
    '3/16/17 QAW Per Jacob in IT, if installed Client Access should always be in the path.
    'So, removed hard coded path so it should work on 32 bit and 64 bit computers
    'result = Shell("C:\Program Files\IBM\Client Access\cwbtf.exe " &
    If InStr(UCase(Environ("Path")), "CLIENT ACCESS") = 0 Then
        MsgBox ("Client Access not installed or not in the path, you must resolve this before proceeding")
    End If
    result = Shell("cwbtf.exe " & _
                    "G:\Merch\CM TOOLBOX\Forms\SKU Set Up Form\Support\MassUpld.dtt")
                    
    Sheets("Set Up Form").Select
    
End Sub
Sub doCompleteSKUSetUpCopy()
    
    Sheets("Support").Visible = True
    
    Sheets("Set Up Form").Select
    
    Application.ScreenUpdating = False
        
    doUPCUpload
    
    doODBCTableRefresh
    
    doExistingSKUValidation
    
    Sheets("Set Up Form").Select
    
    Range("A8").Select
    Range(Selection, Selection.End(xlToRight)).Select
    If Range("A9").Value <> "" Then Range(Selection, Selection.End(xlDown)).Select
    
    Selection.Copy
    
    Workbooks.Add
    Selection.PasteSpecial Paste:=xlValues
    Selection.PasteSpecial Paste:=xlFormats
    Sheets("Sheet1").Name = "Set Up Form"
    '3/16/17 QAW Excel 2013 does not create Sheet2 and Sheet3
    '3/22/17 QAW The number of depends on user settings, so delete extras if they exist
    Application.DisplayAlerts = False
    Do While Sheets.Count > 1
        Sheets(Sheets.Count).Delete
    Loop
    Application.DisplayAlerts = True
    'Sheets(Array("Sheet2", "Sheet3")).Select - old way
    
    ActiveWindow.Zoom = 80
    Cells.Select
    Range("B4").Activate
    Cells.EntireColumn.AutoFit
    Range("F2").Select
    ActiveWindow.FreezePanes = True

    Application.ScreenUpdating = True

End Sub
Sub doHazardFileSplit()
'   Justin Pollard
'   June 30th, 2006
'   Split SKU Set Up File Between Hazard and Non-Hazard Departments
'   Step 1: Determine Whether Hazardous Sub Depts Exist On Worksheet
'   Step 2: Deliver File(s) to Correct Destination (Split Into Two Files if Necessary)

    Dim rangeHazard As Range
    Set rangeHazard = Sheets("Support").Range("AD:AD")
    
    theHazardSubCount = 0
    theNonHazardSubCount = 0

    'Set Name Parameters
    theName = ActiveWorkbook.Name
    theHazardFileName = Replace(theName, ".xls", "-HazardSubDepts.xls")
    theNonHazardFileName = Replace(theName, ".xls", "-NonHazardSubDept.xls")
    theDesktop = "c:\documents and settings\all users\desktop\"
    'theUser = Application.UserName
    '3/22/17 QAW
    'This technique fails if the user has not changed their Excel user name
    'so switching to a technique which will always work
    theUser = Environ("username")
    
    'Pick SubDept Range
    Range("R9").Select
    If Selection.Offset(1).Value <> "" Then Range(Selection, Selection.End(xlDown)).Select
    
    'Loop Through SubDepts to Determine Hazard Possibility
    For Each theCell In Selection
        theCell.Select
        If doLookupName(Selection.Value, rangeHazard) = "Yes" Then
            theHazardSubCount = theHazardSubCount + 1
        Else
            theNonHazardSubCount = theNonHazardSubCount + 1
        End If
    Next
    
'   Analyze Plan of Action Based On SKUs In Worksheet
    'If There Are Hazardous SubDepts Only...
    If theHazardSubCount > 0 And theNonHazardSubCount = 0 Then
        MsgBox "All items in this SKU Set Up Form are in potentially hazardous sub-departments." & vbNewLine & _
                "This form will be sent to Tom Anderson for review.", vbInformation
        ActiveWorkbook.SendMail Array(theUser & "@westmarine.com", "toma@westmarine.com"), "SKU Set Up - Hazardous SubDept Items - " & theName, True
    'If There Are Non-Hazardous
    ElseIf theHazardSubCount = 0 And theNonHazardSubCount > 0 Then
        MsgBox "No Hazardous Items on SKU Set Up Request.  This file can now be uploaded to Production."
    Else
        MsgBox "This form contains items in both hazardous and non hazardous categories." & vbNewLine & _
                "The potentially hazardous items will be saved in a separate worksheet and sent to Tom Anderson for review." & vbNewLine & _
                "The remainder of the SKUs will be be saved in a non-hazardous file for upload.", vbInformation
        'Save the Full Document
        '3/16/17 QAW select fileversion based on Excel version
        If Application.Version > 11 Then
            FFormat = xlExcel8
        Else
            FFormat = xlNormal
        End If
        ActiveWorkbook.SaveAs theDesktop & theName, FileFormat:=FFormat
        
        'Build Hazardous File
        'Scan through items and remove non-hazardous SubDepts
        Range("R65536").Select
        Selection.End(xlUp).Select
        
        For x = Selection.Row To 9 Step -1
            Cells(x, 18).Select
            If doLookupName(Selection.Value, rangeHazard) <> "Yes" Then
                ActiveCell.EntireRow.Delete
            End If
        Next
        '3/16/17 QAW select fileversion based on Excel version
        If Application.Version > 11 Then
            FFormat = xlExcel8
        Else
            FFormat = xlNormal
        End If


        ActiveWorkbook.SaveAs theDesktop & theHazardFileName, FileFormat:=FFormat
        ActiveWorkbook.SendMail Array(theUser & "@westmarine.com", "newinventories@3ecompany.com", "elindskog@3ecompany.com"), "SKU Set Up - Hazardous SubDept Items - " & theName, True
        
        
        'Build Non-Hazardous File
        Workbooks.Open (theDesktop & theName)
        Range("R65536").Select
        Selection.End(xlUp).Select
        
        For x = Selection.Row To 9 Step -1
            Cells(x, 18).Select
            If doLookupName(Selection.Value, rangeHazard) <> "No" Then
                ActiveCell.EntireRow.Delete
            End If
        Next
        '3/16/17 QAW select fileversion based on Excel version
        If Application.Version > 11 Then
            FFormat = xlExcel8
        Else
            FFormat = xlNormal
        End If

        ActiveWorkbook.SaveAs theDesktop & theNonHazardFileName, FileFormat:=FFormat
        MsgBox "This file contains non-hazardous items. This file can now be uploaded to the AS400."
    End If
        
End Sub
Sub doCreateStyleUploadSheet()
'   Justin Pollard
'   February 18th, 2011
'   Create Style Upload Form for Merch Ops

    Sheets("Style Upload").Visible = True
    
    'Define Copy Column #s
    cVendor = 3
    cStyle = 70
    cStyleDescription = 71
    cSKU = 1
    cSKUDescription = 2
    cVendorPartNum = 5
    cCost = 7
    cRetail = 27
    cColor = 72
    cSize = 74

    'Choose Cell Range
    Sheets("Set Up Form").Select
    Range("E9").Select
    If (Range("E10").Value <> "") Then Selection.End(xlDown).Select
    theLastRow = Selection.Row

'   Copy Data From "SKU Set Up Form" Worksheet and Paste Into "Style Upload" Worksheet
    'Copy Vendor
    Range(Cells(9, cVendor), Cells(theLastRow, cVendor)).Select
    Selection.Copy
    Sheets("Style Upload").Select
    Range("A2").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'Copy Style, Description
    Sheets("Set Up Form").Select
    Range(Cells(9, cStyle), Cells(theLastRow, cStyleDescription)).Select
    Selection.Copy
    Sheets("Style Upload").Select
    Range("B2").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'Copy SKU
    Sheets("Set Up Form").Select
    Range(Cells(9, cSKU), Cells(theLastRow, cSKU)).Select
    Selection.Copy
    Sheets("Style Upload").Select
    Range("D2").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'Copy SKU Description
    Sheets("Set Up Form").Select
    Range(Cells(9, cSKUDescription), Cells(theLastRow, cSKUDescription)).Select
    Selection.Copy
    Sheets("Style Upload").Select
    Range("E2").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'Copy Ven Part #
    Sheets("Set Up Form").Select
    Range(Cells(9, cVendorPartNum), Cells(theLastRow, cVendorPartNum)).Select
    Selection.Copy
    Sheets("Style Upload").Select
    Range("F2").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'Copy Cost
    Sheets("Set Up Form").Select
    Range(Cells(9, cCost), Cells(theLastRow, cCost)).Select
    Selection.Copy
    Sheets("Style Upload").Select
    Range("G2").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'Copy Retail
    Sheets("Set Up Form").Select
    Range(Cells(9, cRetail), Cells(theLastRow, cRetail)).Select
    Selection.Copy
    Sheets("Style Upload").Select
    Range("H2").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'Copy Color
    Sheets("Set Up Form").Select
    Range(Cells(9, cColor), Cells(theLastRow, cColor)).Select
    Selection.Copy
    Sheets("Style Upload").Select
    Range("I2").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents
    'Copy Size
    Sheets("Set Up Form").Select
    Range(Cells(9, cSize), Cells(theLastRow, cSize)).Select
    Selection.Copy
    Sheets("Style Upload").Select
    Range("J2").Select
    Selection.PasteSpecial (xlPasteValues)
    DoEvents

    Range("A2").Select
End Sub


Attribute VB_Name = "Module1"
Sub CheckBox12_Click()
    If Range("BX7").Value = True Then
        Sheets("VTS").Visible = True
    Else
        Sheets("VTS").Visible = False
    End If
End Sub

Public Function getBuyerACM(ByVal theBuyer As Long) As Variant
    getBuyerACM = Trim(runQueryGetValue("Select ACM From WMQRYMER.JQPPODLIST Where IDBUYR = " & Right("000" & theBuyer, 3) & " Limit 1"))
End Function

Attribute VB_Name = "Module2"
Sub doApplyColorBorder()
Attribute doApplyColorBorder.VB_Description = "Macro recorded 7/24/2014 by JustinP"
Attribute doApplyColorBorder.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro4 Macro
' Macro recorded 7/24/2014 by JustinP
'

'
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
End Sub
Sub doApplyStyleBorder()
Attribute doApplyStyleBorder.VB_Description = "Macro recorded 7/24/2014 by JustinP"
Attribute doApplyStyleBorder.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro5 Macro
' Macro recorded 7/24/2014 by JustinP
'

'
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
End Sub
Attribute VB_Name = "Pricing"
Function WMRetail(theRetail As Range) As Single
    WMRetail = Round(RetailRound(theRetail.Value), 2)
''   Justin Pollard
''   October 3rd, 2006
''   West Marine Retail Rounding
''       If the retail is under $5, round to the nearest $x.x9 (excluding 09)
''       If the retail is under $20, round up to $xx.29, $xx.49, $xx.79, $xx.99 (down to $xx.99 if retail < $xx.10)
''       If the retail is under $100, round up to $xx.99
''       If the retail is under $200, round up to $xx2.99, $xx4.99, $xx7.99, $xx9.99 (down to $x99.99 if retail < $x03.00)
''       If the retail is over $500, round up to nearest whole dollar ending in $xx5.00, $xx6.00, $xx7.00, $xx8.00, $xx9.00, $xx0.00
'
''   SET ALIASES AND VARIABLES
'    'Set x as the proposed retail
'    x = theRetail.Value
'    'Set x10 as a factor of 10, x100 as a factor of 100
'    x10 = Int(x / 10) * 10
'    x100 = Int(x / 100) * 100
'    'Set d10 as a factor of 1/10th
'    d10 = (x - Int(x)) * 100
'    'Set r10 as the remainder over the greatest factor of 10, r100 -> 100
'    r10 = x - x10
'    r100 = x - x100
'
''   SET ROUNDED RETAIL PRICE
'    'Price is a minimum of $0.09
'    If x < 0.1 Then
'        WMRetail = 0.09
'    'If price is less than $5
'    ElseIf x < 5 Then
'        'Round down to $x.99 if retail is $x.09 or less
'        If d10 < 10 Then
'            WMRetail = Int(x) - 0.01
'        'Move $x.10 to $x.19
'        ElseIf d10 = 10 Then
'            WMRetail = Int(x) + 0.19
'        'Round up to nearest $x.x9
'        Else
'            WMRetail = WorksheetFunction.RoundUp(x, 1) - 0.01
'        End If
'    'If price is less than $30
'    ElseIf x < 20 Then
'        'Round down to $x.99 if retail is $x.09 or less
'        If d10 < 10 Or r10 < 0.3 Then
'            WMRetail = Int(x) - 0.01
'        'Round up to $x.29
'        ElseIf d10 < 30 Then
'            WMRetail = Int(x) + 0.29
'        'Round up to $x.49
'        ElseIf d10 < 50 Then
'            WMRetail = Int(x) + 0.49
'        'Round up to $x.79
'        ElseIf d10 < 80 Then
'            WMRetail = Int(x) + 0.79
'        'Round up to $x.99
'        Else
'            WMRetail = Int(x) + 0.99
'        End If
'    'If price is less than $100
'    ElseIf x < 100 Then
'        WMRetail = Int(x) + 0.99
'    'If price is less than $500
'    ElseIf x < 200 Then
'        'If the price is less than $x03.00, then round down to the lower $xx0.00
'        If r100 < 3 Then
'            WMRetail = x10 - 0.01
'        'Round up to $xx5.00
'        ElseIf r10 = 0 Then
'            WMRetail = x10
'        ElseIf r10 < 5 Then
'            WMRetail = x10 + 5
'        'Round up to $xx6.00
'        ElseIf r10 < 6 Then
'            WMRetail = x10 + 6
'        'Round up to $xx7.00
'        ElseIf r10 < 7 Then
'            WMRetail = x10 + 7
'        'Round up to $xx8.00
'        ElseIf r10 < 8 Then
'            WMRetail = x10 + 8
'        'Round up to $xx9.00
'        ElseIf r10 < 9 Then
'            WMRetail = x10 + 9
'        'Round up to $xx0.00
'        Else
'            WMRetail = x10 + 10
'        End If
'    'If price is >= $200
'    Else
'        'Round to Increments of $5.00
'        If r10 = 0 Then
'            WMRetail = x10
'        ElseIf r10 < 3 Then
'            WMRetail = x10
'        ElseIf r10 < 8 Then
'            WMRetail = x10 + 5
'        Else
'            WMRetail = x10 + 10
'        End If
'    End If
'
'    WMRetail = Round(WMRetail, 2)
'
End Function

Function getListPrice(theRetail, theListHierarchy, theListHierarchyRange)
'   Justin Pollard
'   August 7th, 2005
'   Show Only Columns Relevant to Vendor Set Up Form
    
    Set x = theListHierarchyRange.Find(What:=theListHierarchy, LookAt:=xlWhole)
        If (Not x Is Nothing) Then
            getListPrice = theRetail * 1.1
        Else
            getListPrice = theRetail * 1.15
        End If

End Function
Function RetailRound(ByVal theRetail As Double) As Double
'   Justin Pollard
'   September 27th, 2008
'   West Marine Retail Rounding
'       If the retail is under $5, round to the nearest $x.x9 (excluding 09)
'       If the retail is under $10, round up to $xx.29, $xx.49, $xx.79, $xx.99 (down to $xx.99 if retail < $xx.10)
'       If the retail is under $20, round up to $xx.49, $xx.99
'       If the retail is under $50, round up to $xx.99
'       If the retail is under $200, round up to $xx2.99, $xx4.99, $xx7.99, $xx9.99 (down to $x99.99 if retail < $x03.00)
'       If the retail is under $500, round up to $xx4.99, $xx9.99 (down to $x99.99 if retail < $x05.00)
'       If the retail is over $500, round up to nearest whole dollar ending in $xx9.00 (down to $x99.00 if retail < $x09.00)
'   *** 09/01/2012 *** - Use Option Record to Determine Pricing Over $500
'   *** 10/14/2016 *** - JustinP - Update Rounding Logic for 2017
'       Round up in all cases (Ex: $3.09 is $3.29, not $2.99
'       $0-9.99     = x.29, x.49, x.79, x.99
'       $10-19.99   = x.49, x.99
'       $20-49.99   = x4.99, x7.99, x9.99
'       $50-199.99  = x4.99, x9.99
'       $200+       = xx9.99
'       Exceptions - Cut Length, End in 9, Vendor Priced Items (calendars, sunglasses, etc.), approved "family" products), MAP
'   *** 06/13/2017 *** - JustinP - Change Function Input to ByVal

'    theRoundingOverride = Sheets("Options").Range("E13").Value
    
'   SET ALIASES AND VARIABLES
    'Set x as the proposed retail
    x = theRetail
    'Set x10 as a factor of 10, x100 as a factor of 100
    x10 = Int(x / 10) * 10
    x100 = Int(x / 100) * 100
    'Set d10 as a factor of 1/10th
    d10 = (x - Int(x)) * 100
    'Set r10 as the remainder over the greatest factor of 10, r100 -> 100
    r10 = x - x10
    r100 = x - x100
    
'   SET ROUNDED RETAIL PRICE
    'If price is less than $10
    If x < 10 Then
        'Round up to $x.29
        If d10 < 30 Then
            RetailRound = Int(x) + 0.29
        'Round up to $x.49
        ElseIf d10 < 50 Then
            RetailRound = Int(x) + 0.49
        'Round up to $x.79
        ElseIf d10 < 80 Then
            RetailRound = Int(x) + 0.79
        'Round up to $x.99
        Else
            RetailRound = Int(x) + 0.99
        End If
    'If price is less than $20
    ElseIf x < 20 Then
        'Round up to $x.49
        If d10 < 50 Then
            RetailRound = Int(x) + 0.49
        'Round up to $x.99
        Else
            RetailRound = Int(x) + 0.99
        End If
    'If price is less than $50
    ElseIf x < 50 Then
        'Round up to $x4.99
        If r10 < 5 Then
            RetailRound = x10 + 4.99
        'Round up to $x7.99
        ElseIf r10 < 8 Then
            RetailRound = x10 + 7.99
        'Round up to $x9.99
        ElseIf r10 < 10 Then
            RetailRound = x10 + 9.99
        End If
    'If price is less than $200
    ElseIf x < 200 Then
        'Round up to $1x4.99
        If r10 < 5 Then
            RetailRound = x10 + 4.99
        'Round up to $1x9.99
        Else
            RetailRound = x10 + 9.99
        End If
    'If price is >= $200
    Else
        'Round up to $1x9.99
        RetailRound = x10 + 9.99
    End If
    
    RetailRound = Round(RetailRound, 2)
    
End Function
Attribute VB_Name = "Routing"
Sub doSubmitFormToMerchOps()
'   Justin Pollard
'   June 18th, 2015
'   Submit Form to Merchandise Operations
'   *** 06/23/2015 *** - JustinP - Determine if Any SDS Values & Change Email Prompts
'   *** 04/11/2018 *** - JustinP - Replaced my name with Ericka for email routing

    Dim theValidationFlag As Range
    Dim theUserCell As Range
    Dim theDescriptionCell As Range
    Dim theSDSColumn As Range
    
    Set theValidationFlag = Sheets("Support").Range("BI2")
    Set theUserCell = Sheets("Set Up Form").Range("N4")
    Set theDescriptionCell = Sheets("Set Up Form").Range("N5")
    Set theSDSColumn = Sheets("Set Up Form").Range("AU:AU")
    
    'Determine Original Submitted User
    If theUserCell.Value = "" Then
        'theUser = Application.UserName
        '3/22/17 QAW
        'This technique will not work if the user has not changed their excel user name
        'So, use a technique which will always work
        theUser = Environ("username")
        theUserCell.Value = theUser
    Else
        theUser = theUserCell.Value
    End If
    
    'Make Sure Description Is Entered
    If theDescriptionCell.Value = "" Then
        theDescription = InputBox("Enter Description of this SKU Setup Form:", "Input Needed")
        If theDescription = "" Then
            MsgBox "You must enter a description before submitting the form."
            Exit Sub
        Else
            theDescription = DoFixFileName(theDescription)
            theDescriptionCell.Value = theDescription
        End If
    Else
        theDescription = DoFixFileName(theDescriptionCell.Value)
    End If
    
    'Confirm Validation Has Been Performed
    If theValidationFlag.Value = 0 Then
        MsgBox "Please validate form before submitting.", vbExclamation
        Exit Sub
    End If
    
    'Confirm Prop65 is filled out - CHM 5/30
    Dim WB As Workbook
    Set WB = ActiveWorkbook
    Dim SetUp As Worksheet
    Set SetUp = WB.Sheets("Set Up Form")
    
    With SetUp
        LastRowSetUp = .Range("A" & .Rows.Count).End(xlUp).Row
        If LastRowSetUp > 8 Then
            Prop65Error = 0
            For i = 9 To LastRowSetUp
                If .Range("CP" & i) = "" Then
                    Prop65Error = Prop65Error + 1
                ElseIf .Range("CP" & i) * 1 = 4 Or .Range("CP" & i) * 1 = 5 Or .Range("CP" & i) * 1 = 6 Or .Range("CP" & i) * 1 = 7 Then
                    If .Range("CQ" & i) = "" Then
                        Prop65Error = Prop65Error + 1
                    End If
                End If
            Next i
            If Prop65Error > 0 Then
                MsgBox "Please fill out the necessarily Prop 65 information prior to submission"
                Exit Sub
            End If
        End If
    End With
            
    
    
    'Save to New Workbook
    'theFilePath = "C:\Users\" & theUser & "\Desktop\"
    '3/22/17 QAW
    'This technique will not work if the user has not changed their Excel user name
    'So I changed it to one that will always work
    theFilePath = Environ("userprofile") & "\Desktop\"
    
    theDate = Year(Date) * 10000 + Month(Date) * 100 + Day(Date)
    theName = "SKU Setup Form - " & theDate & " - " & theUser & " - " & theDescription
    theSaveName = theFilePath & theName
    '3/16/17 QAW select fileversion based on Excel version
        If Application.Version > 11 Then
            FFormat = xlExcel8
        Else
            FFormat = xlNormal
        End If

    ActiveWorkbook.SaveAs fileName:= _
        theFilePath & theName & ".xls", FileFormat:=56, _
        CreateBackup:=False
        
    'E-Mail File to Merchandise Operations
    ActiveWorkbook.SendMail Array(theUser & "@westmarine.com", "nicolem@westmarine.com", "samanthal@westmarine.com", "victoriab@westmarine.com", "productinfo@westmarine.com"), theName, False
    
    'If SDS Flags, prompt to immediately email SDS in separate attachment
    If WorksheetFunction.CountIf(theSDSColumn, "Y") > 0 Then
        MsgBox "Reminder: Please forward all SDS attachments to Merchandise Operations with the email subject: " & vbNewLine & vbNewLine & theDescription, vbExclamation, "SDS Attachment Reminder"
    Else
        MsgBox "SKU Setup Form Has Been Submitted to Merchandise Operations"
    End If
    
End Sub
Sub doReturnCompletedForm()
'   Justin Pollard
'   June 18th, 2015
'   Import Cells Into Worksheet and Return File to Buying Team
'   *** 07/01/2015 *** - JustinP - Format Worksheet and Save to G:\ drive based on form data
'   *** 08/18/2015 *** - JustinP - Add Buyer # to G:\ drive file path and fix Dir() bugs
'   *** 04/11/2018 *** - JustinP - Replaced my name with Ericka for email routing


    Dim theDescriptionCell As Range
    Dim rangeCMTeam As Range
    Dim theBuyer As String
    Set theDescriptionCell = Sheets("Set Up Form").Range("N5")
    Set rangeCMTeam = Sheets("Support").Range("AZ:AZ")
    Dim theEmailList As Variant
    theUser = Application.UserName
    
    'Refresh Contact List
    Sheets("Support").Visible = True
    Sheets("Support").Select
    Range("AZ1").Select
    Selection.QueryTable.Refresh False
    
    'Determine SSF Buyer
    Sheets("Set Up Form").Select
    theBuyer = Right("00" & Range("N9").Value, 3)
    
    'Find Matching Contact List
    theCMTeamRow = JPMatch(theBuyer, rangeCMTeam, 0)
    
    'Populate Form With SKUs and eMail to Buying Team
    If theCMTeamRow = 0 Then
        MsgBox "Unable to identify Buyer #. You must return form manually."
        Exit Sub
    Else
        'theEmailList = Application.UserName & "@westmarine.com" & ",justinp@westmarine.com"
        '3/22/17 QAW
        'If the user has not changed there Excel user name this will not work, so switching to a technique that will always work
        If InStr(1, LCase(theDescriptionCell), "exist") = 0 Then
            theEmailList = Environ("username") & "@westmarine.com"
        Else:
            theEmailList = theUser & "@westmarine.com, Price_Management@westmarine.com"
        End If
        For c = 54 To 59 Step 1
            If Sheets("Support").Cells(theCMTeamRow, c).Value <> "" Then
                theEmailList = theEmailList & "," & Sheets("Support").Cells(theCMTeamRow, c).Value & "@westmarine.com"
            End If
        Next
        'Convert List Into Array
        theEmailarray = Split(theEmailList, ",", , vbTextCompare)
        
        'Get ACM Email
        'The ACMEmail will be from a getFunction
        
        'theACMEmail = Sheets("Support").Cells(theCMTeamRow, 55).Value & "@westmarine.com"
        theACMEmail = getBuyerACM(theBuyer) & "@westmarine.com"
         If InStr(1, LCase(theDescriptionCell), "exist") > 0 Then
            theACMEmail = theACMEmail & ", Price_Management@westmarine.com"
        End If
        
        'Call SKU Population Macro
        doCompleteSKUSetUpCopy
        
        'Format Worksheet
        Cells.Select
        Cells.EntireColumn.AutoFit
        Cells(1, 1).Select
        
        'Save Worksheet & Check Directory
        theYear = Year(Date)
        theMonth = Month(Date)
        theDate = theYear * 10000 + theMonth * 100 + Day(Date)
        theMonthArray = Array("01-January", "02-February", "03-March", "04-April", "05-May", "06-June", "07-July", "08-August", "09-September", "10-October", "11-November", "12-December")
        theDirectory = "G:\MerchOps\SKU Set Up Forms\" & theYear & "\" & theMonthArray(theMonth - 1) & "\Buyer " & theBuyer & "\"
        If Dir(theDirectory, vbVolume) = "" Then
            MsgBox "The folder " & vbNewLine & theDirectory & vbNewLine & "does not exist. Please create the folder before continuing.", vbCritical, "Missing Folder"
        End If
        theFileName = "Complete SSF - " & theDate & " - " & DoFixFileName(theDescriptionCell.Value) & ".xls"
        If Dir(theDirectory & theFileName) = "" Then
            '3/16/17 QAW select fileversion based on Excel version
            If Application.Version > 11 Then
                FFormat = xlExcel8
            Else
                FFormat = xlNormal
            End If

            ActiveWorkbook.SaveAs fileName:= _
                theDirectory & theFileName, FileFormat:=FFormat, _
                CreateBackup:=False
        Else
            x = 1
            Do Until Dir(theDirectory & Replace(theFileName, ".xls", " (" & x & ").xls")) = ""
                x = x + 1
            Loop
            theFileName = Replace(theFileName, ".xls", " (" & x & ").xls")
            '3/16/17 QAW select fileversion based on Excel version
            If Application.Version > 11 Then
                FFormat = xlExcel8
            Else
                FFormat = xlNormal
            End If

            ActiveWorkbook.SaveAs fileName:= _
                theDirectory & theFileName, FileFormat:=FFormat, _
                CreateBackup:=False
        End If
        
        'Send eMail to Entire CM Team
        ActiveWorkbook.SendMail theEmailarray, "Completed SKU Setup Form: Buyer " & theBuyer & " - " & theDescriptionCell.Value, False
        
        'If MAP SKUs, send separate email to ACM reminding them to submit MAP prices to Price Management
        theMAPCount = WorksheetFunction.Count(ActiveSheet.Range("V:V"))
        If theMAPCount > 0 Then
            doSendEmail theACMEmail, "Reminder: MAP Prices In " & theDescriptionCell.Value, "Please submit MAP SKUs to Price Management using the MAP Change Form."
        End If
        
        'Close Workbook
        ActiveWorkbook.Close False
    End If

End Sub

Sub Enable()
Application.EnableEvents = True
End Sub
Attribute VB_Name = "Routing_Old"
Sub doNotifyCompletion()
'   Justin Pollard
'   March 7th, 2007
'   e-Mail Completed Form With SKU #s Back to Team

    Set theMaster = ActiveWorkbook

    'Determine Buyer #
    theBuyer = Range("N9").Value * 1
    
    'Open Merchandising Routing Document to Determine e-Mail Recipients
    Workbooks.Open fileName:="G:\Merch\CM Toolbox\Forms\Support\MerchOrg.xls", ReadOnly:=True
    Set theMerchOrg = ActiveWorkbook
    Range("A2").Select
    Do Until ActiveCell.Value = theBuyer
        ActiveCell.Offset(1).Select
    Loop
    theRow = ActiveCell.Row
    'Determine # of Recipients
    theCount = WorksheetFunction.CountA(Range("B" & theRow & ":G" & theRow))
    If theCount = 4 Then
        theRecipients = Array(ActiveCell.Offset(, 1).Value & "@westmarine.com", ActiveCell.Offset(, 2).Value & "@westmarine.com", _
                            ActiveCell.Offset(, 3).Value & "@westmarine.com", ActiveCell.Offset(, 4).Value & "@westmarine.com")
    ElseIf theCount = 5 Then
        theRecipients = Array(ActiveCell.Offset(, 1).Value & "@westmarine.com", ActiveCell.Offset(, 2).Value & "@westmarine.com", _
                            ActiveCell.Offset(, 3).Value & "@westmarine.com", ActiveCell.Offset(, 4).Value & "@westmarine.com", _
                            ActiveCell.Offset(, 5).Value & "@westmarine.com")
    Else
        theRecipients = Array(ActiveCell.Offset(, 1).Value & "@westmarine.com", ActiveCell.Offset(, 2).Value & "@westmarine.com", _
                            ActiveCell.Offset(, 3).Value & "@westmarine.com", ActiveCell.Offset(, 4).Value & "@westmarine.com", _
                            ActiveCell.Offset(, 5).Value & "@westmarine.com", ActiveCell.Offset(, 6).Value & "@westmarine.com")
    End If
    theMerchOrg.Activate
    ActiveWorkbook.Close False
    
    'Build e-Mail Subject Line
    theMaster.Activate
    Range("E65536").Select
    Selection.End(xlUp).Select
    theSKUCount = Selection.Row - 8
    If theSKUCount > 1 Then
        theSKUCount = theSKUCount & " SKUs"
    Else
        theSKUCount = "1 SKU"
    End If
    theSubject = "SKU Set Up Completed: Buyer " & Right("00" & theBuyer, 3) _
                & " - " & Trim(Left(Range("D9").Value, 20)) & " (" & theSKUCount & ")"
    
    'Send e-Mail
    theMaster.SendMail theRecipients, theSubject, False
    
End Sub
Sub doSendSLIMAddRequest()
'   Justin Pollard
'   March 8th, 2007
'   For VTS Only SKUs With Defined Stores, Send an SLIM Addition Request to Assortment Planning

    Set theMaster = ActiveSheet
    
    'Determine if Worksheet is VTS Only, and Stores Have Been Selected
    If Range("BX7").Value = True And Sheets("VTS").Range("A2").Value <> "" Then
        'Create and Format SLIM Record Creation Worksheet
        Worksheets.Add
        ActiveSheet.Name ("SLIM Adds")
        Set theSLIMAdd = ActiveSheet
        Range("A1").Value = "SKU"
        Range("B1").Value = "Store"
        Range("C1").Value = "Start Date"
        Range("D1").Value = "End Date"
        Tomorrow = Date + 1
        theDate = Right("0" & (Year(Tomorrow) - 2000) * 10000 + (Month(Tomorrow) * 100) + Day(Tomorrow), 6)
        
        
        theMaster.Select
        Range("A9").Select
        
            
    
    End If

End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
'   Justin Pollard
'   August 18, 2005
'   Allow users to view valid table entries
'   Added Prop 65 - 2/19/2019

    theCol = Target.Column

    If Target.Row = 7 Then
        If theCol = 6 Then
            doMfgNameInquiry
        ElseIf theCol = 10 Then
            doCountryOfOriginInquiry
        ElseIf theCol = 16 Then
            doSKUTypeInquiry
        ElseIf theCol = 29 Then
            doUMInquiry
        ElseIf theCol = 31 Then
            doUMInquiry
        ElseIf theCol = 41 Then
            doDistributionCodeInquiry
        ElseIf theCol = 44 Then
            doRTVCodeInquiry
        ElseIf theCol = 46 Then
            doTaggingTypeInquiry
        ElseIf theCol = 49 Then
            doPreTagInquiry
        ElseIf theCol = 52 Then
            doCompetitiveInquiry
        ElseIf theCol = 61 Then
            doLabelTypeInquiry
        ElseIf theCol = 63 Then
            doTicketTypeInquiry
        ElseIf theCol = 72 Then
            doColorCodeInquiry
        ElseIf theCol = 74 Then
            doSizeCodeInquiry
        ElseIf theCol = 94 Then
            doProp65Inquiry
        End If
    End If
    
    If Target.Row = 8 And Target.Column = 1 Then
        theErrorMessageCapture = Sheets("Support").Range("V1").Value
        MsgBox theErrorMessageCapture
    End If
    
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
'   Justin Pollard
'   August 03, 2005
'   Create relationships and default values based on data entry to Set Up Form
'   *** 03/07/2007 *** - JustinP - Update Code for Default Replen/Pass to E3 For Sub 577, Class 8
'   *** 04/21/2015 *** - JustinP - Update Ad Ticket Type From Allowing a 4
'   *** 06/11/2015 *** - JustinP - Prompt Reminder When Updating SKU Setup Version #
'   *** 06/18/2015 *** - JustinP - Update Validation Flag When Records Have Been Updated
'   *** 06/23/2015 *** - JustinP - Assign Validation Flag Location
'   *** 06/25/2015 *** - JustinP - Do Not Reset Validation Flag When Color Names Are Updated
'   *** 09/14/2016 *** - JustinP - Auto-Set Label Type to 4 When "Price Printed On Product" is Y, per GaryW
'   *** 06/09/2017 *** - JustinP - Remove ** Prefix For Rank E/I SKUs

    Dim theCellRange As Range
    Dim theDept As Range
    Dim theValidationFlag As Range
    Set rangeListClasses = Sheets("Support").Range("F:F")
    Set theValidationFlag = Sheets("Support").Range("BI2")

    For Each theCell In Target
    
        'Prompt Reminder At Version # Change, 2015.06.11
        If theCell.Row = 7 And theCell.Column = 2 Then MsgBox "Reminder: Update Version # in Qry400, JQPSSFVERS"
    
        Set theCellRange = theCell
        If theCell.Row >= 9 And theCell.Column >= 2 And theCell.Column <= 83 Then 'Change Only SKU Level Data
                'Flag if Len > 30 (Description & Shelf Label Description)
                If theCell.Column = 2 Or theCell.Column = 39 Or theCell.Column = 71 Then
                    If theCell.Value <> "" Then
                        If Len(theCell.Value) > 30 Then
                            theCell.Activate
                            theCellLength = Len(theCell.Value) - 30
                            With ActiveCell.Characters(Start:=1, Length:=30).Font
                                .ColorIndex = xlAutomatic
                            End With
                            With ActiveCell.Characters(Start:=31, Length:=theCellLength).Font
                                .ColorIndex = 3
                            End With
                        End If
                    End If
                End If
                'Update Shelf Label Description
                If theCell.Column = 2 Then
                    theCell.Offset(0, 37).Value = theCell
                End If
                'Error if Ven # is Previous Ven # + 1
                If theCell.Column = 3 And theCell.Value <> "" Then
                    If theCell.Row > 9 Then
                        If theCell.Value = Cells(theCell.Row - 1, 3).Value + 1 Then
                            theCell.Select
                            errorcell
                        End If
                    End If
                End If
                'Update Mfg Part #
                If theCell.Column = 5 Then
                   theCell.Offset(0, 7).Value = theCell
                End If
                'Update Ven Part #
                If theCell.Column = 12 Then
                    If theCell.Offset(0, -7).Value = "" Then theCell.Offset(0, -7).Value = theCell
                End If
                'Flag if Length > 10 (Description & Shelf Label Description)
                If theCell.Column = 13 Then
                    If Len(theCell.Value) > 10 Then
                        theCell.Activate
                        theCellLength = Len(theCell.Value) - 10
                        With ActiveCell.Characters(Start:=1, Length:=10).Font
                            .ColorIndex = xlAutomatic
                        End With
                        With ActiveCell.Characters(Start:=11, Length:=theCellLength).Font
                            .ColorIndex = 3
                        End With
                    End If
                End If
                'Update Inner Pack
                If theCell.Column = 8 And theCell.Value = 1 And theCell.Offset(0, 1).Value = "" Then
                   theCell.Offset(0, 1).Value = theCell
                End If
                'Update Merchandiser
                If theCell.Column = 14 And theCell.Offset(0, 1).Value = "" Then
                   theCell.Offset(0, 1).Value = theCell
                End If
                'Apply Label Type 4 if Price Is Printed On Product = Y, 2016.09.14
                If theCell.Column = 23 And theCell.Value = "Y" And Cells(theCell.Row, 61) <> "4" Then
                    Cells(theCell.Row, 61).Value = "4"
                End If
                'Update WM Retail
                If theCell.Column = 26 And theCell.Value <> "" Then
                    If theCell.Offset(0, -9).Value = "" Then
                        MsgBox "You must enter a dept before entering pricing.", vbExclamation
                        theCell.Value = ""
                        Exit Sub
                    End If
                    Set theDept = theCell.Offset(0, -9)
                    If Cells(theCell.Row, 63).Value <> 4 And Cells(theCell.Row, 45).Value <> "Y" Then
                    theCell.Offset(0, 1).Value = theCell.Value
                    theCell.Offset(0, 1).Value = Round(theCell.Offset(0, 1).Value, 2) 'Calc Rounded Price
                     theCell.Offset(0, 7).Value = theCell.Offset(0, 1).Value * WorksheetFunction.VLookup(theCell.Offset(0, -9).Value, Sheets("Support").Range("A:D"), 2, 0)
                     theCell.Offset(0, 8).Value = WMRetail(theCell.Offset(0, 7)) 'Calc Alaska/Hawaii Rounded Price
                     theCell.Offset(0, 9).Value = theCell.Offset(0, 1).Value * WorksheetFunction.VLookup(theCell.Offset(0, -9).Value, Sheets("Support").Range("A:D"), 3, 0)
                     theCell.Offset(0, 10).Value = WMRetail(theCell.Offset(0, 9)) 'Calc Puerto Rico Rounded Price
                     theCell.Offset(0, 11).Value = theCell.Offset(0, 1).Value * WorksheetFunction.VLookup(theCell.Offset(0, -9).Value, Sheets("Support").Range("A:D"), 4, 0)
                     theCell.Offset(0, 12).Value = WMRetail(theCell.Offset(0, 11)) 'Calc Canada Rounded Price
                     theCell.Offset(0, 2).Value = (theCell.Offset(0, 1).Value - theCell.Offset(0, -19).Value) / theCell.Offset(0, 1).Value 'Calc GM%
                     Else: theCell.Offset(0, 1).Value = theCell.Value
                        theCell.Offset(0, 7).Value = theCell.Offset(0, 1).Value * WorksheetFunction.VLookup(theCell.Offset(0, -9).Value, Sheets("Support").Range("A:D"), 2, 0)
                        theCell.Offset(0, 8).Value = theCell.Offset(0, 7) 'Calc Alaska/Hawaii Non-Rounded Price
                        theCell.Offset(0, 9).Value = theCell.Offset(0, 1).Value * WorksheetFunction.VLookup(theCell.Offset(0, -9).Value, Sheets("Support").Range("A:D"), 3, 0)
                        theCell.Offset(0, 10).Value = theCell.Offset(0, 9) 'Calc Puerto Rico Non-Rounded Price
                        theCell.Offset(0, 11).Value = theCell.Offset(0, 1).Value * WorksheetFunction.VLookup(theCell.Offset(0, -9).Value, Sheets("Support").Range("A:D"), 4, 0)
                        theCell.Offset(0, 12).Value = theCell.Offset(0, 11) 'Calc Canada Non-Rounded Price
                        theCell.Offset(0, 2).Value = (theCell.Offset(0, 1).Value - theCell.Offset(0, -19).Value) / theCell.Offset(0, 1).Value 'Calc GM%
                    End If
                End If
                'Update Sell UM
                If theCell.Column = 29 Then
                    theCell.Offset(0, 2).Value = theCell.Value
                End If
                'Update Rank
                If theCell.Column = 40 Then
                    If UCase(theCell.Value) = "E" Or UCase(theCell.Value) = "I" Then

'   Comment block to remove ** from Rank E/I SKU Description, 2017.06.09
'                        'Update Description
'                        If Left(theCell.Offset(0, -38).Value, 2) <> "**" Then
'                            theCell.Offset(0, -38).Value = "**" & theCell.Offset(0, -38)
'                        End If
'                        'Update Shelf Label
'                        If Left(theCell.Offset(0, -1).Value, 2) <> "**" Then
'                            theCell.Offset(0, -1).Value = "**" & theCell.Offset(0, -1).Value
'                        End If
                        
                        'Update Distribution Code
                        theCell.Offset(0, 1).Value = 0
                        'Update Pass to E3
                        theCell.Offset(0, 2).Value = "N"
                        'Update Replenishment Code
                        theCell.Offset(0, 14).Value = 0
                    End If
                    If UCase(theCell.Value) <> "E" And UCase(theCell.Value) <> "I" Then
                        'Update Description
                        If Left(theCell.Offset(0, -38).Value, 2) = "**" Then
                            theCell.Offset(0, -38).Value = Mid(theCell.Offset(0, -38), 3, 30)
                        End If
                        'Update Shelf Label
                        If Left(theCell.Offset(0, -1).Value, 2) = "**" Then
                            theCell.Offset(0, -1).Value = Mid(theCell.Offset(0, -1), 3, 30)
                        End If
                        'Update Distribution Code
                        theCell.Offset(0, 1).Value = 1
                        'Default Pass to E3, Replen Code For Sub 577, Class 8 Items
                        If theCell.Offset(0, -18).Value = 577 And theCell.Offset(0, -17).Value = 8 Then
                            'Update Pass to E3
                            theCell.Offset(0, 2).Value = "N"
                            'Update Replenishment Code
                            theCell.Offset(0, 14).Value = 0
                        Else
                            'Update Pass to E3
                            theCell.Offset(0, 2).Value = "Y"
                            'Update Replenishment Code
                            theCell.Offset(0, 14).Value = 1
                        End If
                    End If
                End If
                'Convert Numeric Pre-Tag Codes to Alpha
                If theCell.Column = 49 Then
                    If IsNumeric(theCell.Value) = True Then
                        theCell.Value = Chr(39) & theCell.Value
                    End If
                End If
                'Ad Label Type
                If theCell.Column = 61 And theCell.Offset(0, 1).Value = "" Then
                    If theCell.Value = 4 Then
                        theCell.Offset(0, 1).Value = 2
                    Else: theCell.Offset(0, 1).Value = theCell
                    End If
                End If
                'Ad Ticket Type
                If theCell.Column = 63 And theCell.Offset(0, 1).Value = "" Then
                    If theCell.Value = 4 Then
                        theCell.Offset(0, 1).Value = 2
                    Else: theCell.Offset(0, 1).Value = theCell
                    End If
                   theCell.Offset(0, 1).Value = theCell
                End If
                'Undo Rounding if Label or SKU Type is 4
                If theCell.Column = 63 And theCell.Value = 4 Then
                    Cells(theCell.Row, 26).Value = Cells(theCell.Row, 26).Value
                End If
                
                
                'Color Code Name Lookup
                If theCell.Column = 72 Then
                Application.ScreenUpdating = False
                Sheets("Tables").Select
                Sheets("Set Up Form").Select
                Application.ScreenUpdating = True
                Dim rangeColor As Range
                Set rangeColor = Sheets("Tables").Range("B:B")
                theCell.Offset(0, 1).Value = doLookupName(theCell.Value, rangeColor)
                End If

                'Size Code Name Lookup
                If theCell.Column = 74 Then
                Application.ScreenUpdating = False
                Sheets("Tables").Select
                Sheets("Set Up Form").Select
                Application.ScreenUpdating = True
                theSize = Right("    " & theCell.Value, 4)
                Dim rangeSize As Range
                Set rangeSize = Sheets("Tables").Range("Z:Z")
                theCell.Offset(0, 1).Value = doLookupName(theSize, rangeSize)
                End If
                
                'Prop 65 Code Name Lookup
                If theCell.Column = 95 Then
                Application.ScreenUpdating = False
                Sheets("Tables").Select
                Sheets("Set Up Form").Select
                Application.ScreenUpdating = True
                Dim rangeProp65 As Range
                Set rangeProp65 = Sheets("Tables").Range("AL:AL")
                theCell.Offset(0, 1).Value = doLookupName(theCell.Value, rangeProp65)
                End If
                
                'Update Validation Flag If Necessary, 2015.06.18
                If theCell.Column <> 73 And theCell.Column <> 75 And theValidationFlag.Value = 1 Then
                    theValidationFlag.Value = 0
                End If
        End If
    Next

End Sub
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Columns("A:AN").Select
    Selection.EntireColumn.Hidden = False
    Range("A1").Select
End Sub

Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "StyleMacros"
Sub doSortByStyle()
'
' Macro2 Macro
' Macro recorded 7/24/2014 by JustinP
'

'
    Range("A8").Select
    Range(Selection, Selection.End(xlToRight)).Select
    Range(Selection, Selection.End(xlDown)).Select
    Selection.Sort Key1:=Range("C9"), Order1:=xlAscending, Key2:=Range("BR9") _
        , Order2:=xlAscending, Key3:=Range("BT9"), Order3:=xlAscending, Header _
        :=xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom _
        , DataOption1:=xlSortNormal, DataOption2:=xlSortNormal, DataOption3:= _
        xlSortNormal
    Range("A8").Select
End Sub
Sub doClearLineFormats()
'
' Macro3 Macro
' Macro recorded 7/24/2014 by JustinP
'

'
    theLastRow = Cells(65536, 5).End(xlUp).Row
    Range("A9:CO" & theLastRow).Select
    Range(Selection, Selection.End(xlDown)).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    Range("A9").Select
End Sub
Sub doApplyBorders()
'   Justin Pollard
'   07/24/2014
'   Determine Changes in Style & Color and Create Borders

    cStyle = 70
    cColor = 72
    rFirstStyle = 9
    rFirstColor = 9
'    rLastStyle = 9
'    rLastColor = 9
    theFirstRow = 9
    theLastRow = Cells(65536, 5).End(xlUp).Row
    
    For r = theFirstRow To theLastRow Step 1
        Cells(r, cStyle).Select
        If Cells(r, cStyle) <> Cells(r + 1, cStyle) Or Cells(r, cColor) <> Cells(r + 1, cColor) Then
            If Cells(r, cStyle) <> Cells(r + 1, cStyle) Then
                Range(Cells(rFirstStyle, 1), Cells(r, 93)).Select
                doApplyStyleBorder
                rFirstStyle = r + 1
                rFirstColor = r + 1
            ElseIf Cells(r, cColor) <> Cells(r + 1, cColor) Then
                Range(Cells(rFirstColor, 1), Cells(r, 93)).Select
                doApplyColorBorder
                rFirstColor = r + 1
            End If
        End If
    Next
End Sub
Sub doApplyColorBorder()
'
' Macro4 Macro
' Macro recorded 7/24/2014 by JustinP
'

'
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
End Sub
Sub doApplyStyleBorder()
'
' Macro5 Macro
' Macro recorded 7/24/2014 by JustinP
'

'
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
'    Selection.Borders(xlInsideVertical).LineStyle = xlNone
'    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
End Sub
Sub doValidateVendorNames()
'   Justin Pollard
'   07/24/2014
'   Run Get Statement to Obtain Accurate Vendor Name
    theFirstRow = 9
    theLastRow = Cells(65536, 5).End(xlUp).Row
    For r = theFirstRow To theLastRow Step 1
        Cells(r, 3).Select
        If Selection <> Selection.Offset(-1).Value Then
            Cells(r, 4).Value = Trim(getVendorName(Cells(r, 3).Value))
        Else
            Cells(r, 4).Value = Cells(r - 1, 4).Value
        End If
    Next
End Sub
Sub doBuildStyleColorSizeMatrix()
'   Justin Pollard
'   07/24/2014
'   Build Out a Size & Color Matrix

    'Set Dimensions and Unhide Workbook
    Dim wSSF As Worksheet
    Dim wSS As Worksheet
    Set wSSF = Sheets("Set Up Form")
    Set wSS = Sheets("Style Support")
    wSS.Visible = xlSheetVisible
    theErrorFlag = 0
    
    'Define Columns From SKU Setup Form
    cVendor = 3
    cStyle = 70
    cStyleName = 71
    cColor = 72
    cColorName = 73
    cSize = 74
    cSizeName = 75
    
    'Define Columns for Style Support Worksheet
    cSSVendor = 1
    cSSStyle = 2
    cSSSTyleName = 3
    cSSColor = 4
    cSSColorName = 5
    
    'Clear Destination Worksheet
    wSS.Select
    Rows("3:65536").ClearContents
    Rows("3:65536").ClearFormats
    Columns("F:IV").ClearContents
    Columns("F:IV").ClearFormats
    theFirstSSRow = 2 'Chose Header Row to Advance Available Row in Macro Below
    theFirstSSColumn = 6
    rSS = theFirstSSRow
    cSS = theFirstSSColumn
    
    'Process Records and Create Style Table
    wSSF.Select
    theFirstRow = 9
    theLastRow = Cells(65536, 5).End(xlUp).Row
    For r = theFirstRow To theLastRow Step 1
        Cells(r, cStyle).Select
        If Cells(r, cVendor) <> Cells(r - 1, cVendor) Or Cells(r, cStyle) <> Cells(r - 1, cStyle) Or Cells(r, cColor) <> Cells(r - 1, cColor) Then
            rSS = rSS + 1 'Referenced theFirstRow Earlier
            wSS.Cells(rSS, cSSVendor).Value = Cells(r, cVendor)
            wSS.Cells(rSS, cSSStyle).Value = Cells(r, cStyle)
            wSS.Cells(rSS, cSSSTyleName).Value = Cells(r, cStyleName)
            wSS.Cells(rSS, cSSColor).Value = Cells(r, cColor)
            wSS.Cells(rSS, cSSColorName).Value = Cells(r, cColorName)
        End If
        'Find Matching Size Column
        c = JPMatch(Trim(Cells(r, cSize)) * 1, wSS.Range("1:1"), 0)
        'If No Match, Create New Column, Otherwise Find Column and Enter X
        If c = 0 Then
            wSS.Cells(1, cSS).Value = Cells(r, cSize).Value
            wSS.Cells(2, cSS).Value = Cells(r, cSizeName).Value
            wSS.Cells(rSS, cSS).Value = "X"
            cSS = cSS + 1
        Else
            wSS.Cells(rSS, c).Value = "X"
        End If
    Next
    wSS.Select
    
    'Next Step, scroll through Style Support Worksheet and Flag Inconsistent Size Ranges Within Styles
    For r = theFirstSSRow + 1 To Cells(65536, 1).End(xlUp).Row Step 1
        Cells(r, cSSVendor).Select
        'For First Vendor/Style Combo, Set First Row of Style.  If Not, Validate Uniform Style Names
        If Cells(r, cSSVendor) <> Cells(r - 1, cSSVendor) Or Cells(r, cSSStyle) <> Cells(r - 1, cSSStyle) Then
            rFirst = r
        Else
            If Cells(r, cSSSTyleName) <> Cells(r, cSSSTyleName) Then
                errorcell (Cells(r, cSSSTyleName))
                theErrorFlag = 1
            End If
        End If
        'If Last Row of Multi-Color Style Then Validate Uniform Size Distribution
        If r <> rFirst And (Cells(r, cSSVendor) <> Cells(r + 1, cSSVendor) Or Cells(r, cSSStyle) <> Cells(r + 1, cSSStyle)) Then
            theColorCount = (r - rFirst) + 1
            For c = theFirstSSColumn To cSS Step 1
                Range(Cells(rFirst, c), Cells(r, c)).Select
                x = WorksheetFunction.CountA(Selection)
                If x > 0 And x < theColorCount Then
                    theErrorFlag = 1
                    For Each theCell In Selection
                        theCell.Select
                        If Selection.Value <> "X" Then
                            blankcell
                        Else
                            errorcell
                        End If
                    Next
                End If
            Next
        End If
    Next
    If theErrorFlag > 0 Then
        MsgBox "There are non uniform style names or size distributions within this form.  Please refer to the Style Support worksheet after the validation for further information", vbExclamation
        wSSF.Select
    Else
        wSS.Visible = xlSheetHidden
        wSSF.Select
    End If
End Sub


Attribute VB_Name = "TableInquiry"
Sub doColorCodeInquiry()
    Sheets("Tables").Activate
    Columns("E:AN").Select
    Selection.EntireColumn.Hidden = True
End Sub
Sub doCompetitiveInquiry()
    Sheets("Tables").Select
    Columns("A:C").Select
    Selection.EntireColumn.Hidden = True
    Columns("H:AN").Select
    Selection.EntireColumn.Hidden = True
End Sub
Sub doCountryOfOriginInquiry()
    Sheets("Tables").Select
    Columns("A:F").Select
    Selection.EntireColumn.Hidden = True
    Columns("K:AN").Select
    Selection.EntireColumn.Hidden = True
End Sub
Sub doDistributionCodeInquiry()
    Sheets("Tables").Select
    Columns("A:I").Select
    Selection.EntireColumn.Hidden = True
    Columns("N:AN").Select
    Selection.EntireColumn.Hidden = True
End Sub
Sub doMfgNameInquiry()
    Sheets("Tables").Select
    Columns("A:M").Select
    Selection.EntireColumn.Hidden = True
    Columns("Q:AN").Select
    Selection.EntireColumn.Hidden = True
End Sub
Sub doPreTagInquiry()
    Sheets("Tables").Select
    Columns("A:O").Select
    Selection.EntireColumn.Hidden = True
    Columns("T:AN").Select
    Selection.EntireColumn.Hidden = True
End Sub
Sub doRTVCodeInquiry()
    Sheets("Tables").Select
    Columns("A:U").Select
    Selection.EntireColumn.Hidden = True
    Columns("Z:AN").Select
    Selection.EntireColumn.Hidden = True
End Sub
Sub doSizeCodeInquiry()
    Sheets("Tables").Select
    Columns("A:X").Select
    Selection.EntireColumn.Hidden = True
    Columns("AC:AN").Select
    Selection.EntireColumn.Hidden = True
End Sub
Sub doSKUTypeInquiry()
    Sheets("Tables").Select
    Columns("A:AA").Select
    Selection.EntireColumn.Hidden = True
    Columns("AF:AN").Select
    Selection.EntireColumn.Hidden = True
End Sub
Sub doTaggingTypeInquiry()
    Sheets("Tables").Select
    Columns("A:AD").Select
    Selection.EntireColumn.Hidden = True
    Columns("AI:AN").Select
    Selection.EntireColumn.Hidden = True
End Sub
Sub doUMInquiry()
    Sheets("Tables").Select
    Columns("A:AG").Select
    Selection.EntireColumn.Hidden = True
    Columns("AL:AN").Select
    Selection.EntireColumn.Hidden = True
End Sub
'Miller
Sub doProp65Inquiry()
    Sheets("Tables").Select
    Columns("A:AJ").Select
    Selection.EntireColumn.Hidden = True
End Sub
Sub doLabelTypeInquiry()
    theLabelTypeDefinitions = "1 - No Shelf Label Printed for Item" & vbNewLine & _
        "2 - 2 1/2 in. Shelf Label" & vbNewLine & _
        "4 - 2 in. Shelf Label (Small)"
    MsgBox theLabelTypeDefinitions, vbInformation, "Label Type Values"
End Sub
Sub doTicketTypeInquiry()
    theTicketTypeDefinitions = "1 - No Ticket Printed for Item" & vbNewLine & _
        "2 - Priced Item (Ticket Printed - SKU, UPC, Price)" & vbNewLine & _
        "4 - Vendor Priced Item"
    MsgBox theTicketTypeDefinitions, vbInformation, "Ticket Type Values"
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
    Sheets("Set Up Form").Range("G2").Font.ColorIndex = 2
    Range("B9").Select
    
    If ActiveWorkbook.Name = "SKU Set Up Form v4.01" Then
        '3/22/17 QAW it is possible that c:\windows\temp does not exist. _
        However, temp environment variable should always point to a valid location, so use it instead.
        'saveasname = "C:\windows\temp\SKU Set Up Form v4.0.xls"
        saveasname = Environ("temp") & "\SKU Set Up Form v4.0.xls"
        Set fs = CreateObject("Scripting.FileSystemObject")
        If (fs.FileExists(saveasname)) Then
            Set f = fs.GetFile(saveasname)
            f.Delete (True)
        End If
        '3/16/17 QAW select fileversion based on Excel version
        If Application.Version > 11 Then
            FFormat = xlExcel8
        Else
            FFormat = xlNormal
        End If

        ActiveWorkbook.SaveAs fileName:=saveasname, _
            FileFormat:=FFormat, CreateBackup:=False, ConflictResolution:=xlLocalSessionChanges
    
    End If
End Sub
Attribute VB_Name = "UploadVerification"
Sub doPartNumberUpload()
'
'
'   Update in rare event where
'   *** 10/20/2016 *** - JustinP - Add In Error Condition When User Has Locked Upload File

    Dim rangeVenNum As Range
    Dim rangePartNum As Range

    'Find the Vendor/Part # Combos to upload
    Range("E9").Select
    If (Range("E10").Value <> "") Then Selection.End(xlDown).Select
    theLastRow = Selection.Row
    Set rangeVenNum = Range(Cells(9, 3), Cells(theLastRow, 3))
    Set rangePartNum = Range(Cells(9, 5), Cells(theLastRow, 5))
    Range(rangeVenNum, rangePartNum).Select
    Selection.Copy
    '3/16/17 QAW Moving to New workbook caused a crash in SaveAs in Excel 2013, so creating a newbook instead
    Set NewBook = Workbooks.Add
    'work in another worksheet so as not to mess up this macrosheet
    ActiveSheet.Paste
    Range("B:B").Select
    Selection.EntireColumn.Delete
    'ActiveWindow.SelectedSheets.Move
    
    'save the sku list into the upload file
    saveasname = "G:\Merch\CM TOOLBOX\Forms\SKU Set Up Form\Support\Part#_Upload.txt"
    Set fs = CreateObject("Scripting.FileSystemObject")
    If (fs.FileExists(saveasname)) Then
        Set f = fs.GetFile(saveasname)
        On Error GoTo errorFileLocked '20161020
            f.Delete (True)
        On Error Resume Next '20161020
    End If
    DoEvents
    ActiveWorkbook.SaveAs fileName:=saveasname, _
        FileFormat:=xlText, CreateBackup:=False, ConflictResolution:=xlLocalSessionChanges
    
    'save again to release the lock on the upload file
    '3/22/17 QAW It is possible c:\temp not exist, so use temp environment variable which always point to a valid location
    'saveAsName = "C:\temp\tmp.txt"
    saveasname = Environ("temp") & "\tmp.txt"
    If (fs.FileExists(saveasname)) Then
        Set f = fs.GetFile(saveasname)
        f.Delete (True)
    End If
    DoEvents
    ActiveWorkbook.SaveAs fileName:=saveasname, _
        FileFormat:=xlText, CreateBackup:=False, ConflictResolution:=xlLocalSessionChanges
    
    'get rid of scratchpad workbook
    Sheets("tmp").Select
    ActiveWorkbook.Close SaveChanges:=False
    '3/16/17 QAW Per Jacob in IT, if installed Client Access should always be in the path.
    'So, removed hard coded path so it should work on 32 bit and 64 bit computers
    'result = Shell("C:\Program Files\IBM\Client Access\cwbtf.exe " &
    If InStr(UCase(Environ("Path")), "CLIENT ACCESS") = 0 Then
        MsgBox ("Client Access not installed or not in the path, you must resolve this before proceeding")
    End If
    result = Shell("cwbtf.exe " & _
                    "G:\Merch\CM TOOLBOX\Forms\SKU Set Up Form\Support\Part#_Upload.dtt")
    
    Exit Sub
    
errorFileLocked: '20161020
    MsgBox "Another user: " & vbNewLine & vbNewLine & _
            getFileOwner("G:\Merch\CM TOOLBOX\Forms\SKU Set Up Form\Support\", "Part#_Upload.txt") & vbNewLine & vbNewLine & _
            "has locked the upload file: " & saveasname & vbNewLine & vbNewLine & _
            "Please try again in one minute.  If you receive this message a second time, contact the user and ask them to close all Client Access upload error messages on screen."
    
End Sub
Sub doUPCUpload()
'
'
'   *** 10/20/2016 *** - JustinP - Add In Error Condition When User Has Locked Upload File

    'Find the UPCs to upload
    Range("E9").Select
    If (Range("E10").Value <> "") Then Selection.End(xlDown).Select
    theLastRow = Selection.Row
    Range(Cells(9, 11), Cells(theLastRow, 11)).Select
    Selection.Copy
    '3/16/17 QAW Moving to New workbook caused a crash in SaveAs in Excel 2013, so creating a newbook instead
    Set NewBook = Workbooks.Add
    'work in another worksheet so as not to mess up this macrosheet
    'Sheets.Add
    ActiveSheet.Paste
    'DoEvents
    'ActiveWindow.SelectedSheets.Move
    
    'Delete Non-Numeric UPC #
    Range("A65536").Select
    Selection.End(xlUp).Select
    For theRowNum = Selection.Row To 1 Step -1
        If IsNumeric(Cells(theRowNum, 1).Value) = False Then
            Cells(theRowNum, 1).EntireRow.Delete
        End If
    Next
    
    Columns("A:A").Select
    Selection.NumberFormat = "0"
    Range("A1").Select
    
    'save the sku list into the upload file
    saveasname = "G:\Merch\CM TOOLBOX\Forms\SKU Set Up Form\Support\UPC_Upload.txt"
    Set fs = CreateObject("Scripting.FileSystemObject")
    If (fs.FileExists(saveasname)) Then
        Set f = fs.GetFile(saveasname)
        On Error GoTo errorFileLocked '20161020
            f.Delete (True)
        On Error Resume Next '20161020
    End If
    DoEvents
    ActiveWorkbook.SaveAs fileName:=saveasname, _
        FileFormat:=xlText, CreateBackup:=False, ConflictResolution:=xlLocalSessionChanges
    
    '3/22/17 QAW It is possible c:\temp not exist, so use temp environment variable which always point to a valid location
    'saveAsName = "C:\temp\tmp.txt"
    saveasname = Environ("temp") & "\tmp.txt"
    If (fs.FileExists(saveasname)) Then
        Set f = fs.GetFile(saveasname)
        f.Delete (True)
    End If
    DoEvents
    ActiveWorkbook.SaveAs fileName:=saveasname, _
        FileFormat:=xlText, CreateBackup:=False, ConflictResolution:=xlLocalSessionChanges
    
    'get rid of scratchpad workbook
    Sheets("tmp").Select
    ActiveWorkbook.Close SaveChanges:=False
    '3/16/17 QAW Per Jacob in IT, if installed, Client Access should always be in the path.
    'So, removed hard coded path so it should work on 32 bit and 64 bit computers
    'result = Shell("C:\Program Files\IBM\Client Access\cwbtf.exe " &
    If InStr(UCase(Environ("Path")), "CLIENT ACCESS") = 0 Then
        MsgBox ("Client Access not installed or not in the path, you must resolve this before proceeding")
    End If
    result = Shell("cwbtf.exe " & _
                    "G:\Merch\CM TOOLBOX\Forms\SKU Set Up Form\Support\UPC_Upload.dtt")
    
    Exit Sub '20161020
                    
errorFileLocked: '20161020
    MsgBox "Another user: " & vbNewLine & vbNewLine & _
            getFileOwner("G:\Merch\CM TOOLBOX\Forms\SKU Set Up Form\Support\", "UPC_Upload.txt") & vbNewLine & vbNewLine & _
            "has locked the upload file: " & saveasname & vbNewLine & vbNewLine & _
            "Please try again in one minute.  If you receive this message a second time, contact the user and ask them to close all Client Access upload error messages on screen."
                    
End Sub
Sub doVendorStyleUpload()
'
'
'   *** 10/20/2016 *** - JustinP - Add In Error Condition When User Has Locked Upload File

    Dim rangeVenNum As Range
    Dim rangeStyle As Range

    'Find the Vendor/Part # Combos to upload
    Range("E9").Select
    If (Range("E10").Value <> "") Then Selection.End(xlDown).Select
    theLastRow = Selection.Row
    Set rangeVenNum = Range(Cells(9, 3), Cells(theLastRow, 3))
    Set rangeStyle = Range(Cells(9, 70), Cells(theLastRow, 70))
    Range(rangeVenNum, rangeStyle).Select
    Selection.Copy
    '3/16/17 QAW Moving to a new workbook caused crash in Excel 2013, So creating a new workbook instead

    Set NewBook = Workbooks.Add
    'work in another worksheet so as not to mess up this macrosheet
    'Sheets.Add
    ActiveSheet.Paste
    'DoEvents
    Range("B:BO").Select
    Selection.EntireColumn.Delete
    'ActiveWindow.SelectedSheets.Move
    
    'save the sku list into the upload file
    saveasname = "G:\Merch\CM TOOLBOX\Forms\SKU Set Up Form\Support\Style_Upload.txt"
    Set fs = CreateObject("Scripting.FileSystemObject")
    If (fs.FileExists(saveasname)) Then
        Set f = fs.GetFile(saveasname)
        On Error GoTo errorFileLocked '20161020
            f.Delete (True)
        On Error Resume Next '20161020
    End If
    DoEvents
    ActiveWorkbook.SaveAs fileName:=saveasname, _
        FileFormat:=xlText, CreateBackup:=False, ConflictResolution:=xlLocalSessionChanges
    
    'save again to release the lock on the upload file
    '3/22/17 QAW It is possible c:\temp not exist, so use temp environment variable which always point to a valid location
    'saveAsName = "C:\temp\tmp.txt"
    saveasname = Environ("temp") & "\tmp.txt"
    If (fs.FileExists(saveasname)) Then
        Set f = fs.GetFile(saveasname)
        f.Delete (True)
    End If
    DoEvents
    ActiveWorkbook.SaveAs fileName:=saveasname, _
        FileFormat:=xlText, CreateBackup:=False, ConflictResolution:=xlLocalSessionChanges
    
    'get rid of scratchpad workbook
    Sheets("tmp").Select
    ActiveWorkbook.Close SaveChanges:=False
    '3/16/17 QAW Per Jacob in IT, if installed Client Access should always be in the path.
    'So, removed hard coded path so it should work on 32 bit and 64 bit computers
    'result = Shell("C:\Program Files\IBM\Client Access\cwbtf.exe " &
    If InStr(UCase(Environ("Path")), "CLIENT ACCESS") = 0 Then
        MsgBox ("Client Access not installed or not in the path, you must resolve this before proceeding")
    End If
    result = Shell("cwbtf.exe " & _
                    "G:\Merch\CM TOOLBOX\Forms\SKU Set Up Form\Support\Style_Upload.dtt")
    
    Exit Sub '20161020
                    
errorFileLocked: '20161020
    MsgBox "Another user: " & vbNewLine & vbNewLine & _
            getFileOwner("G:\Merch\CM TOOLBOX\Forms\SKU Set Up Form\Support\", "Style_Upload.txt") & vbNewLine & vbNewLine & _
            "has locked the upload file: " & saveasname & vbNewLine & vbNewLine & _
            "Please try again in one minute.  If you receive this message a second time, contact the user and ask them to close all Client Access upload error messages on screen."
 
End Sub
Attribute VB_Name = "VendorValidation"
Sub doVendorValidate()
'   Justin Pollard
'   July 31st, 2005
'   Vendor Validation in SKU Set Up Form

'   Dimension Declarations
    Dim rangeColor As Range
    Dim rangeCOO As Range
    Dim rangeSize As Range
    Dim rangeUM As Range

    Sheets("Tables").Columns("A:AK").Hidden = False

'   Range Declarations
    Set rangeColor = Sheets("Tables").Range("B:B")
    Set rangeCOO = Sheets("Tables").Range("H:H")
    Set rangeSize = Sheets("Tables").Range("Z:Z")
    Set rangeUM = Sheets("Tables").Range("AI:AI")


'   Determine Active Range
    Sheets("Set Up Form").Select
    
    Range("E9").Select
    If Range("E10").Value <> "" Then Selection.End(xlDown).Select
    theFinalRow = Selection.Row
    'Range(Cells(9, 1), Cells(theFinalRow, 89)).Select
    Range(Cells(9, 1), Cells(theFinalRow, 100)).Select
    Selection.Font.ColorIndex = 0
    Selection.Interior.ColorIndex = xlNone
    
    Range("E9").Select
    If Range("E10").Value <> "" Then Range(Selection, Selection.End(xlDown)).Select
    
    Set theCellRange = Selection
    Set theUPCRange = Range(Cells(9, 11), Cells(theFinalRow, 11))
    
        theErrorCount = 0
        theBlankCount = 0
        theDupePartCount = 0
        theDupeUPCCount = 0
    
    
    For Each theCell In Selection
        thePartNum = theCell
        theDescription = theCell.Offset(0, -3)
        theVenName = theCell.Offset(0, -1)
        theCost = theCell.Offset(0, 2)
        theStdPk = theCell.Offset(0, 3)
        theInnPk = theCell.Offset(0, 4)
        theCOO = theCell.Offset(0, 5)
        theUPC = theCell.Offset(0, 6)
        theList = theCell.Offset(0, 16)
        theBuyUM = theCell.Offset(0, 24)
        theWeight = theCell.Offset(0, 52)
        theLength = theCell.Offset(0, 53)
        theWidth = theCell.Offset(0, 54)
        theHeight = theCell.Offset(0, 55)
        theCanLabel = theCell.Offset(0, 63)
        theStyle = theCell.Offset(0, 65)
        theStyleDesc = theCell.Offset(0, 66)
        theColor = theCell.Offset(0, 67)
        theSize = theCell.Offset(0, 69)
        theReleaseDate = theCell.Offset(0, 81)
        theEndOfLifeDate = theCell.Offset(0, 82)
        theProp65 = theCell.Offset(0, 89)
        theProp65Desc = theCell.Offset(0, 90)
        
'       DO VALIDATION ROUTINE
'       Vendor Name Filled Out
        If theVenName = "" Then
            theCell.Offset(0, -1).Select
            blankcell
            theBlankCount = theBlankCount + 1
        End If

'       Part # Exceeds 15 Characters
        If Len(thePartNum) > 15 Then
            theCell.Select
            errorcell
            theErrorCount = theErrorCount + 1
        End If
        
'       Description Exceeds 30 Characters
        theDescription = Replace(theDescription, Chr(34), " In.")
        theCell.Offset(0, -3).Value = theDescription
        If theDescription = "" Then
            theCell.Offset(0, -3).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theDescription) > 30 Then
                theCell.Offset(0, -3).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        
'       Cost is Number, Round to 3 Decimal
        If theCost = "" Then
            theCell.Offset(0, 2).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theCost) = False Then
                theCell.Offset(0, 2).Select
                errorcell
                theErrorCount = theErrorCount + 1
        ElseIf theCost <> Round(theCost, 3) Then
                theCell.Offset(0, 2).Value = Round(theCost, 3)
        End If
        
'       StdPk Is Not Numeric, StdPk is Multiple of Inner
        If theStdPk = 0 Then
            theCell.Offset(0, 3).Value = 1
        End If
        If theStdPk = "" Then
            theCell.Offset(0, 3).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theStdPk) = False Then
                theCell.Offset(0, 3).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
'       Standard Pack is a Multiple of Inner Pack
        If IsEmpty(theStdPk) = False And IsEmpty(theInnPk) = False Then
            If IsNumeric(theStdPk) = True And IsNumeric(theInnPk) = True Then
                If Int(theStdPk / theInnPk) <> theStdPk / theInnPk Then
                    theCell.Offset(0, 3).Select
                    errorcell
                    theCell.Offset(0, 4).Select
                    errorcell
                    theErrorCount = theErrorCount + 1
                End If
            End If
        End If


        
'       InnPk Is Not Numeric or > StdPk
        If theInnPk = 0 Then
            theCell.Offset(0, 4).Value = 1
        End If
        If theInnPk = "" Then
            theCell.Offset(0, 4).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theInnPk) = False Or theInnPk > theStdPk Then
                theCell.Offset(0, 4).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        
'       Country of Origin Exceeds 2 Characters
        theCell.Offset(0, 5).Value = UCase(theCOO)
        theCOO = theCell.Offset(0, 5)
        If theCOO = "" Then
            theCell.Offset(0, 5).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theCOO) > 2 Or doTableLookup(theCOO, rangeCOO) = False Then
                theCell.Offset(0, 5).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        
'       UPC Is Number / Remove Alpha Characters / Validate Check Digit
        If UCase(theUPC) <> "ASSIGNED BY WM" Then
            If theUPC = "" Then 'UPC Is Blank
                theCell.Offset(0, 6).Select
                blankcell
                theBlankCount = theBlankCount + 1
            ElseIf IsNumeric(theUPC) = False Then 'UPC is Alpha
                    theCell.Offset(0, 6).Value = Replace(Replace(theUPC, "-", ""), " ", "") 'Remove Space and Dash
                    theUPC = theCell.Offset(0, 6).Value
            End If
            If IsNumeric(theCell.Offset(0, 6).Value) = False Then
                        theCell.Offset(0, 6).Select
                        errorcell
                        theErrorCount = theErrorCount + 1
            ElseIf IsNumeric(theUPC) = True Then 'Validate Check Digit
                    Dim theUPCVal As Range
                    Set theUPCVal = theCell.Offset(0, 6)
                    theVenCheckDigit = Right(theUPC, 1)
                    theCalcCheckDigit = CalcCheckDigit(theUPCVal)
                    If theVenCheckDigit <> theCalcCheckDigit Then
                        theCell.Offset(0, 6).Select
                        errorcell
                        theErrorCount = theErrorCount + 1
                    End If
            End If
        End If
        
'       BuyUM Exceeds 3 Characters
        If theBuyUM = "" Then
            theCell.Offset(0, 24).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theBuyUM) > 3 Or doTableLookup(theBuyUM, rangeUM) = False Then
                theCell.Offset(0, 24).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 24).Value = UCase(theBuyUM)
        
'       Ship Weight is Number > 0, Round to 3 Decimal
        If theWeight = "" Then
            theCell.Offset(0, 52).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theWeight) = False Or theWeight = 0 Then
                theCell.Offset(0, 52).Select
                errorcell
                theErrorCount = theErrorCount + 1
        ElseIf theWeight <> Round(theWeight, 3) Then
                theCell.Offset(0, 52).Value = Round(theWeight, 3)
        End If
        
'       Length is Number > 0, Round to 1 Decimal
        If theLength = "" Then
            theCell.Offset(0, 53).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theLength) = False Or theLength = 0 Then
                theCell.Offset(0, 53).Select
                errorcell
                theErrorCount = theErrorCount + 1
        ElseIf theLength <> Round(theLength, 1) Then
                theCell.Offset(0, 53).Value = Round(theLength, 1)
        End If
        
'       Width is Number > 0, Round to 1 Decimal
        If theWidth = "" Then
            theCell.Offset(0, 54).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theWidth) = False Or theWidth = 0 Then
                theCell.Offset(0, 54).Select
                errorcell
                theErrorCount = theErrorCount + 1
        ElseIf theWidth <> Round(theWidth, 1) Then
                theCell.Offset(0, 54).Value = Round(theWidth, 1)
        End If
        
'       Height is Number > 0, Round to 1 Decimal
        If theHeight = "" Then
            theCell.Offset(0, 55).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf IsNumeric(theHeight) = False Or theHeight = 0 Then
                theCell.Offset(0, 55).Select
                errorcell
                theErrorCount = theErrorCount + 1
        ElseIf theHeight <> Round(theHeight, 1) Then
                theCell.Offset(0, 55).Value = Round(theHeight, 1)
        End If
        
'       Canada Label Compliance
        If theCanLabel = "" Then
            theCell.Offset(0, 63).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf Len(theCanLabel) > 1 Then
                theCell.Offset(0, 63).Select
                errorcell
                theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 63).Value = UCase(theCanLabel)

'       Style Level Validation
'       Style # Exceeds 15 Characters
        If Len(theStyle) > 15 Then
            theCell.Offset(0, 65).Select
            errorcell
            theErrorCount = theErrorCount + 1
        End If
        theCell.Offset(0, 65).Value = UCase(theStyle)
        If theStyle <> "" And theStyleDesc = "" Then 'Style Description is Blank for Style SKUs
            theCell.Offset(0, 66).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf theStyle <> "" And Len(theStyleDesc) > 30 Then
            theCell.Offset(0, 66).Select
            errorcell
            theErrorCount = theErrorCount + 1
        End If
        If theStyle <> "" And theColor = "" Then 'Color is Blank for Style SKUs
            theCell.Offset(0, 67).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf theStyle <> "" And doTableLookup(theColor, rangeColor) = False Then
            theCell.Offset(0, 67).Select
            errorcell
            theErrorCount = theErrorCount + 1
        End If
        If theStyle <> "" And theSize = "" Then 'Size is Blank for Style SKUs
            theCell.Offset(0, 69).Select
            blankcell
            theBlankCount = theBlankCount + 1
        ElseIf theStyle <> "" And doTableLookup(Right("    " & theSize, 4), rangeSize) = False Then
            theCell.Offset(0, 69).Select
            errorcell
            theErrorCount = theErrorCount + 1
        End If
    
'       Release Date
        If theReleaseDate = "" Then
            theCell.Offset(0, 81).Select
            blankcell
            theBlankCount = theBlankCount + 1
        End If
    
'       End of Life Date
        If theEndOfLifeDate = "" Then
            theCell.Offset(0, 82).Select
            blankcell
            theBlankCount = theBlankCount + 1
        End If

'       Prop 65 Added 5/9/19
        'If empty
        If theProp65 = "" Then
            theCell.Offset(0, 89).Select
            blankcell
            theBlankCount = theBlankCount + 1
        Else:
            theProp65 = Right("000" & theProp65, 3)
            If theProp65 = "004" Or theProp65 = "005" Or theProp65 = "006" Or theProp65 = "007" Then
                If theProp65Desc = "" Then
                theCell.Offset(0, 90).Select
                blankcell
                theBlankCount = theBlankCount + 1
                End If
            End If
        End If
        
'        'If not correct Prop 65
        If theProp65 <> "" Then
            theProp65 = Right("000" & theProp65, 3)
            If UCase(theProp65) <> "N/A" And UCase(theProp65) <> "NA" And UCase(theProp65) <> "N\A" And UCase(Right(theProp65, 2)) <> "NA" And UCase(theProp65) <> "N.A" And theProp65 <> "001" And theProp65 <> "002" And theProp65 <> "003" And theProp65 <> "004" And theProp65 <> "005" And theProp65 <> "006" And theProp65 <> "007" Then
                theCell.Offset(0, 89).Select
                Selection.Font.Color = RGB(255, 0, 0)
                theErrorCount = theErrorCount + 1
            End If
        End If
        
'       Duplicate Record Validation
'       Search for Duplicate Part # Records
        If WorksheetFunction.CountIf(theCellRange, theCell) > 1 Then
            theCell.Select
            errorcell
            theDupePartCount = theDupePartCount + 1
        End If
'       Search for Duplicate UPC Records
        If theUPC <> "" And UCase(theUPC) <> "ASSIGNED BY WM" And WorksheetFunction.CountIf(theUPCRange, theUPC) > 1 Then
            theCell.Offset(0, 6).Select
            errorcell
            theDupeUPCCount = theDupeUPCCount + 1
        End If

    Next
    
    Range("F9").Select
    
'   BUILD ERROR MESSAGES
'   Build Error Message for Blank Cells
    If theBlankCount = 1 Then
        blankmsg = "You have left 1 required cell empty." & vbNewLine & _
                    "The missing cell has been highlighted red." & vbNewLine & _
                    "Please resolve and re-validate."
    ElseIf theBlankCount > 1 Then
        blankmsg = "You have left " & theBlankCount & " required cells empty." & vbNewLine & _
                    "The missing cells have been highlighted red." & vbNewLine & _
                    "Please resolve and re-validate."
    End If
'   Build Error Message for Error Values
    If theErrorCount = 1 Then
        errormsg = "You have 1 error value in a required cell." & vbNewLine & _
                    "The error has been highlighted with red text." & vbNewLine & _
                    "Please resolve and re-validate."
    ElseIf theErrorCount > 1 Then
        errormsg = "You have " & theErrorCount & " errors in required cells." & vbNewLine & _
                    "The cells with errant values have been highlighted with red text." & vbNewLine & _
                    "Please resolve and re-validate."
    End If
'   Build Error Message for Duplicate Part #s
    If theDupePartCount > 0 Then
        dupepartmsg = "Duplicate Part #s exist on this worksheet.  Please resolve and re-validate."
    End If
'   Build Error Message for Duplicate UPC #s
    If theDupeUPCCount > 0 Then
        dupeupcmsg = "Duplicate UPC #s exist on this worksheet.  Please resolve and re-validate."
    End If
'   Create Message Box
    If theBlankCount = 0 And theErrorCount = 0 And theDupeCount = 0 And theDupeUPCCount = 0 Then
        MsgBox "No errors found.  You may forward to the West Marine Category Management team."
    ElseIf theBlankCount > 0 And theErrorCount = 0 And theDupeCount = 0 And theDupeUPCCount = 0 Then
        MsgBox blankmsg, vbCritical, "Error(s) Exist on Set Up Form"
    ElseIf theBlankCount = 0 And theErrorCount > 0 And theDupeCount = 0 And theDupeUPCCount = 0 Then
        MsgBox errormsg, vbCritical, "Error(s) Exist on Set Up Form"
    ElseIf theBlankCount > 0 And theErrorCount > 0 And theDupeCount = 0 And theDupeUPCCount = 0 Then
        MsgBox blankmsg & vbNewLine & vbNewLine & errormsg, vbCritical, "Error(s) Exist on Set Up Form"
    ElseIf theBlankCount > 0 Or theErrorCount > 0 Or theDupeCount = 0 Or theDupeUPCCount = 0 Then
        MsgBox blankmsg & vbNewLine & vbNewLine & errormsg & vbNewLine & vbNewLine & dupepartmsg & vbNewLine & vbNewLine & dupeupcmsg, vbCritical, "Error(s) Exist on Set Up Form"
    End If
        
End Sub


INQUEST-PP=macro
