Attribute VB_Name = "List1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "List2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "mGlobals"
Option Explicit

Private Const DUMPENABLED = 0
Private Const APP_VERSION = "1.15.3"
Private Const APP_NAME = "P|fffd|ehled pohled|fffd|vek"

Sub aa()
shSrc.Visible = xlVeryHidden
'shSrc.Visible = xlSheetVisible
End Sub

Public Sub RemoveRows()
  On Error Resume Next
  ActiveSheet.RemoveRows
End Sub
Public Sub PH_Dump()
  Dim vr As String
  Dim ep As String
  If 1 <> DUMPENABLED Then
    On Error Resume Next
    vr = "???"
    vr = APP_NAME & vbCrLf & vbCrLf & " Version app" & vbTab & APP_VERSION & vbCrLf
    vr = vr & " Version sheet out" & vbTab & Range("sVer") & vbCrLf
    vr = vr & " Version sheet src" & vbTab & Range("sVerSrc") & vbCrLf
    vr = vr & vbCrLf & " |fffd| 2008-2010 Baitcom s.r.o"
    MsgBox vr, , "About"
    Exit Sub
  End If
  
  Dim mdl As VBComponent
  
  Open "D:\CodeDumpPH.txt" For Output As #1
  Print #1, "---------------------------------------"
  Print #1, "         " & ThisWorkbook.Name & "   ver:" & APP_VERSION
  Print #1, "---------------------------------------"
  Print #1,
  For Each mdl In ThisWorkbook.VBProject.VBComponents
    With mdl.CodeModule
      Print #1, "---------------------------------------"
      Print #1, "         Module " & .Name
      Print #1, "---------------------------------------"
      Print #1,
      Print #1, .Lines(1, .CountOfLines)
      Print #1,
      Print #1, "-----  End of " & .Name
      Print #1,
      Print #1,
    End With
  Next mdl
  
  Dim nm As Name
  shInput.Name = "Inp"
  
  Print #1, "---------------------------------------"
  Print #1, "         Names"
  Print #1, "---------------------------------------"
  For Each nm In ThisWorkbook.Names
    With nm
      If Left(nm.Name, 4) = "sVer" Then
        Print #1, .Name & vbTab & .RefersTo & vbTab & Range(.Name)
      Else
        Print #1, .Name & vbTab & .RefersTo
      End If
    End With
  Next nm

 
  Close #1
End Sub

Public Sub PH_Reset()
  shInput.mLockCount = 0
  Application.ScreenUpdating = True
End Sub

Public Function CheckVAT(state, kod)
  Dim kods As String
  On Error GoTo nelze

  kods = kod & ""
  If Len(kods) < 3 Then
    CheckVAT = 1
  Else
    CheckVAT = 0
    Select Case UCase(state & "")
      Case "CZ"
        'CZ+8'
        '8'
        If Left(kods, 2) = "CZ" Then
          kods = Mid(kods, 3)
        End If
        If Len(kods) < 8 Then

'          kods = Right("00000000" & kods, 8)
        End If
        Select Case Len(kods)
          Case 10
            'RC
            CheckVAT = CheckNum(kods, True)
          Case 9
            CheckVAT = CheckNum(kods, False)
          Case 8
            CheckVAT = CheckICO(kods)
          Case Else
            CheckVAT = 1
        End Select
    End Select
  End If
  Exit Function
nelze:
  CheckVAT = 1
  Exit Function
End Function

Private Function CheckICO(ss As String) As Integer
  Dim sum As Integer
  Dim i As Integer
  Dim pom As Integer
  
  CheckICO = 1
  If Len(ss) = 8 Then
    sum = 0
    For i = 1 To 8
      pom = Asc(Mid(ss, i, 1)) - 48
      If pom < 0 Or pom > 9 Then Exit Function
      sum = sum + (9 - i) * pom
    Next
    If pom = 0 Then sum = sum + 10
    sum = sum Mod 11
    If (sum = 0) Or ((sum = 1) And (pom = 1)) Then
      CheckICO = 0
    End If
  End If
End Function

Public Function CheckVS(state, vs)
  Dim vss As String
  
  On Error GoTo nelze
  vss = vs & ""
  If (Len(vss) < 1) Or (Len(vss) > 10) Then
    CheckVS = 1
  Else
    CheckVS = 1
    Select Case UCase(state & "")
      Case "CZ"
        If Len(vss) <= 10 Then
          CheckVS = CheckNum(vss, False)
        End If
      Case Else
        CheckVS = CheckStr(vs, 0, 10)
    End Select
  End If
  Exit Function
nelze:
  CheckVS = 1
  Exit Function
End Function

Private Function IsDateMy(dd) As Boolean
  IsDateMy = VarType(dd) = vbDate
End Function

Public Function IsDate1(dd)
  On Error GoTo nelze
  If IsDateMy(dd) Then
    IsDate1 = 0
  Else
    IsDate1 = 1
  End If
  Exit Function
nelze:
  IsDate1 = 1
  Exit Function
End Function

Public Function IsDate2(dd1, dd2)
  On Error GoTo nelze
  If IsDateMy(dd2) Then
    If IsDateMy(dd1) Then
      If dd1 <= dd2 Then
        IsDate2 = 0
      Else
        IsDate2 = 1
      End If
    Else
      IsDate2 = 0
    End If
  Else
    IsDate2 = 1
  End If
  Exit Function
nelze:
  IsDate2 = 1
  Exit Function
End Function

Public Function IsDate3(dd1)
  On Error GoTo nelze
  If IsDateMy(dd1) Then
    If dd1 <= Now() Then
      IsDate3 = 0
    Else
      IsDate3 = 1
    End If
  Else
    IsDate3 = 1
  End If
  Exit Function
nelze:
  IsDate3 = 1
  Exit Function
End Function

Private Function CheckNum(ss As String, b11 As Boolean) As Integer
  Dim sum As Long
  Dim i As Integer
  Dim pom As Integer

  CheckNum = 1
  sum = 0
  For i = 1 To Len(ss)
    pom = Asc(Mid(ss, i, 1)) - 48
    If pom < 0 Or pom > 9 Then
      Exit Function
    End If
    If i Mod 2 = 1 Then
      sum = sum + pom
    Else
      sum = sum - pom
    End If
  Next
  If b11 Then
    If sum Mod 11 <> 0 Then Exit Function
  End If
  CheckNum = 0
End Function

Public Function CheckStr(what As Variant, mini As Integer, maxi As Integer) As Integer
  Dim ilen As Integer
  Dim ss As String
  On Error GoTo nelze:
  CheckStr = 1
  ss = what & ""
  ilen = Len(ss)
  If ((ilen > mini) And (ilen <= maxi)) Then
    If 0 = InStr(ss, "%") + _
           InStr(ss, "<") + _
           InStr(ss, ">") + _
           InStr(ss, "$") + _
           InStr(ss, """") + _
           InStr(ss, "\\") Then
      CheckStr = 0
    End If
  End If

nelze:
  Exit Function
End Function

Public Function Dt2Text(dt) As String
  On Error GoTo chyba
  If dt < 1 Then GoTo chyba
  Dt2Text = Format(CVDate(dt), "d.m.yyyy")
  Exit Function
chyba:
  Dt2Text = "??.??.????"
  Exit Function
End Function

Public Sub AddRange(nm As String, what As String)
  Dim rng1 As Range
  Set rng1 = Range(nm)
  Set rng1 = Union(Range(what), rng1)
  ActiveWorkbook.Names(nm).Delete
  rng1.Name = nm
  Range(nm).Select
End Sub


Attribute VB_Name = "shInput"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cb1, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "cb2, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "cb3, 5, 2, MSForms, CommandButton"
Attribute VB_Control = "cb4, 6, 3, MSForms, CommandButton"
Attribute VB_Control = "cb5, 7, 4, MSForms, CommandButton"
Attribute VB_Control = "cb6, 8, 5, MSForms, CommandButton"
Attribute VB_Control = "cb7, 9, 6, MSForms, CommandButton"
Attribute VB_Control = "cb8, 10, 7, MSForms, CommandButton"
Attribute VB_Control = "cb9, 11, 8, MSForms, CommandButton"
Attribute VB_Control = "cb10, 12, 9, MSForms, CommandButton"
Option Explicit

Private Const SRC_ROW = 18

Private Enum UI_ROWS
  UI_CONTEXT_MENU = 1 'HARDCODED 1 in thbook!!!
  UI_SHEET_NAME
  UI_CB1
  UI_CB2
  UI_CB3
  UI_CB4
  UI_CB5
  UI_CB6
  UI_CB7
  UI_CB8
  UI_CB9
  UI_CB9_FINAL
  UI_CB10
  UI_INSERT_CAPTION
  UI_INSERT_TEXT
  UI_DELETE_CAPTION
  UI_DELETE_TEXT
  UI_TEST_OK_CAPTION
  UI_TEST_OK_TEXT
  UI_PASTE_CAPTION
  UI_PASTE_TEXT
  UI_OVERWRITE
  UI_IMPORT
  UI_IMPORT_CAPTION
  UI_WRONG_FORMAT
  UI_WRONG_FORMAT_CAPTION
  
End Enum

Public mLockCount As Long
Private b_NoResetPage As Boolean
Private Const MY_PASSWD = "lock_config_cs"


Private Sub cb1_Click()
  Dim lng As Integer
  Dim c As Range
  Dim r1 As Long
  Dim cap As String
  Dim it As Object

  On Error GoTo chyba
  'lang change
  MacroStart
    lng = 1 - Application.Range("Lang")
    Application.Range("Lang") = lng
    'change UI
    lng = 1 + lng
    With Application.Range("UI").Columns(lng)
      shInput.Name = .Cells(UI_SHEET_NAME)
      cb1.Caption = .Cells(UI_CB1)
      cb2.Caption = .Cells(UI_CB2)
      cb3.Caption = .Cells(UI_CB3)
      cb4.Caption = .Cells(UI_CB4)
      cb5.Caption = .Cells(UI_CB5)
      cb6.Caption = .Cells(UI_CB6)
      cb7.Caption = .Cells(UI_CB7)
      cb8.Caption = .Cells(UI_CB8)
      cb9.Caption = .Cells(UI_CB9 + Application.Range("Final"))
      cb10.Caption = .Cells(UI_CB10)
      
      cap = .Cells(UI_CONTEXT_MENU) & ""
      On Error Resume Next
      For Each it In Application.CommandBars("Cell").Controls
        If it.Tag = "RemoveRows" Then it.Caption = cap
      Next
      For Each it In Application.CommandBars("Row").Controls
        If it.Tag = "RemoveRows" Then it.Caption = cap
      Next
      On Error GoTo chyba
     
    End With
    
    With Application.Range("L" & lng & "_A")
      r1 = Application.Range("L" & lng & "_A_TOP").Rows(1).Row - 1
      For Each c In .Cells
        If Asc(c & " ") = Asc("=") Then
          shInput.Cells(c.Row - r1, c.Column).Formula = c & ""
        Else
          shInput.Cells(c.Row - r1, c.Column) = c & ""
        End If
      Next c
    End With
    With Application.Range("L" & lng & "_B")
      r1 = Application.Range("L" & lng & "_B_TOP").Rows(1).Row - Application.Range("TblEnd").Row - 5
      For Each c In .Cells
        If Asc(c & " ") = Asc("=") Then
          shInput.Cells(c.Row - r1, c.Column).Formula = c & ""
        Else
          shInput.Cells(c.Row - r1, c.Column) = c & ""
        End If
      Next c
    End With
    'test date for specials
    Select Case Application.Range("Date")
      Case ":About"
        PH_Dump
      Case ":Config" & Chr(67) & Chr(83) 'CS
        shSrc.Visible = xlSheetVisible
        Application.Range("SrcFmt").EntireRow.Hidden = False
        Application.Range("sVer").EntireColumn.Hidden = False
        Application.Range("Checks").EntireColumn.Hidden = False
      Case ":End"
        shSrc.Visible = xlSheetVeryHidden
        Application.Range("SrcFmt").EntireRow.Hidden = True
        Application.Range("sVer").EntireColumn.Hidden = True
        Application.Range("Checks").EntireColumn.Hidden = True
    End Select
  cb1_GotFocus
  MacroEnd
  Exit Sub
chyba:
  MacroEnd
  MsgBox "cb1_Click:" & Error
  Exit Sub
End Sub

Private Sub cb1_GotFocus()
  'lang change
  Application.Range("InfoSrc").Formula = Application.Range("UI").Columns(Application.Range("Lang") + 3).Cells(UI_CB1)
End Sub

Private Sub cb2_Click()
  'paste
  Dim nsh As Worksheet
  Dim rng As Range
  Dim nr As Long
  Dim no As Long
  Dim nc As Long
  Dim lr As Long
  
  On Error GoTo chyba
  Application.ScreenUpdating = False
    Set nsh = thBook.Worksheets.Add
    On Error GoTo uklidnom
    nsh.Paste
    Set rng = Selection
    On Error GoTo chyba
    MacroStart
    rng.MergeCells = False
    nr = rng.Rows.Count
    nc = Application.Range("SrcFmt").Columns.Count
    If nc < rng.Columns.Count Then
      nc = rng.Columns.Count
    End If
    If nr > 0 Then
      With Application.Range("UI").Columns(Application.Range("Lang") + 1)
        Select Case MsgBox(Replace(.Cells(UI_PASTE_TEXT), "%", nr), vbYesNoCancel, .Cells(UI_PASTE_CAPTION))
          Case vbYes
            'nahradit
            lr = Application.Range("TblEnd").Row
            no = Application.Range("nItems")
            Cells(lr - no, 1).EntireRow.Resize(no).Delete
            lr = lr - no
          Case vbNo
            'Pridat
            lr = Application.Range("TblEnd").Row
          Case vbCancel
            'ignorovat
            GoTo uklid
        End Select
      End With
      shInput.Select
      InsertRows lr, nr
      rng.Range(rng.Cells(1, 1), rng.Cells(nr, nc)).Copy
      Cells(lr, 1).PasteSpecial xlPasteValues
      Application.CutCopyMode = False
    End If

uklid:
    Application.DisplayAlerts = False
    nsh.Delete
    Application.DisplayAlerts = True
  MacroEnd
  Exit Sub

uklidnom:
    Application.DisplayAlerts = False
    nsh.Delete
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
  Exit Sub

chyba:
  MacroEnd
  MsgBox "cb2_Click:" & Error
  Exit Sub
End Sub

Private Sub cb2_GotFocus()
  Application.Range("InfoSrc").Formula = Application.Range("UI").Columns(Application.Range("Lang") + 3).Cells(UI_CB2)
End Sub

Private Sub cb3_Click()
  Dim ans As Variant
  Dim lr As Long
  Dim nr As Long
  'insert rows
  On Error GoTo chyba
  MacroStart
  UpdateTable
  With Application.Range("UI").Columns(Application.Range("Lang") + 1)
    ans = Application.InputBox(.Cells(UI_INSERT_TEXT), .Cells(UI_INSERT_CAPTION), 1, , , , , 1)
    If (VarType(ans) = vbBoolean) And (False = ans) Then
      GoTo konec
    End If
    If ans > 30000 Then ans = 30000
    ans = Int(ans)
    lr = Application.Range("TblEnd").Row
    If ans <= 0 Then
      'deleting rows
      ans = -ans
      nr = Application.Range("nItems")
      If ans = 0 Then ans = nr
      If ans > nr Then ans = nr
      If ans > 0 Then
        Cells(lr - ans, 1).EntireRow.Resize(ans).Select
        DeleteRows lr, nr, ans + 0
      End If
    Else
      'insert rows
      InsertRows lr, ans + 0
    End If
  End With

konec:
  MacroEnd
  Exit Sub

chyba:
  MacroEnd
  MsgBox "cb3_Click:" & Error
  Exit Sub
End Sub

Private Sub cb3_GotFocus()
  Application.Range("InfoSrc").Formula = Application.Range("UI").Columns(Application.Range("Lang") + 3).Cells(UI_CB3)
End Sub

Private Sub DeleteRows(lr As Long, nr As Long, dc As Long)
  MacroEnd
  MacroStart
  With Application.Range("UI").Columns(Application.Range("Lang") + 1)
    If vbYes = MsgBox(Replace(.Cells(UI_DELETE_TEXT), "%", dc), vbYesNoCancel, .Cells(UI_DELETE_CAPTION)) Then
      Selection.Delete
      lr = lr - dc
      nr = nr - dc
      If nr = 0 Then
        'remain one empty
        InsertRows lr, 1
      Else
        'Cells(lr - 1, 1).Select
        ActiveCell.Select
      End If
    End If
  End With
End Sub

Private Sub InsertChunk(lr As Long, nr As Long)
  Application.Range("TblEnd").EntireRow.Resize(nr).Insert
  Application.Range("SrcLine").Copy
  shInput.Range(Cells(lr, 1), Cells(lr + nr - 1, 1)).PasteSpecial
  Application.CutCopyMode = False
End Sub

Private Sub InsertRows(lr As Long, nr As Long)
  Dim lrp As Long
  Dim nrp As Long
  lrp = lr
  nrp = nr
  While (nrp > 2000)
    InsertChunk lrp, 2000
    nrp = nrp - 2000
    lrp = lrp + 2000
  Wend
  InsertChunk lrp, nrp
  Cells(lr, 1).Select
End Sub

Private Sub UpdateTable()
  Dim nr As Long
  Dim lr As Long
  Dim nc As Long
  Dim sc As Long
  
  Application.Range("SrcFmtTop").Copy
  Application.Range("SrcTableTop").PasteSpecial xlPasteFormats
  
  Application.Range("SrcFmtDate").Copy
  Application.Range("Date").PasteSpecial xlPasteFormats
  
  lr = Application.Range("TblEnd").Row
  nr = Application.Range("nItems")
  With Application.Range("SrcFmt")
    nc = .Columns.Count
    .Copy
  End With
  shInput.Range(Cells(lr - nr, 1), Cells(lr - 1, nc)).PasteSpecial xlPasteFormats
  
  With Application.Range("SrcTest")
    nc = .Columns.Count
    sc = .Columns(1).Column
    .Copy
  End With
  shInput.Range(Cells(lr - nr, sc), Cells(lr - 1, sc + nc - 1)).PasteSpecial
  Application.CutCopyMode = False
End Sub

Private Sub UpravTxt(cl As Range)
  Dim pom As Integer
  Dim org As String
  Dim src As String
  Dim isdt As Boolean
  
  On Error GoTo nech_byt
    
  org = cl & ""
  src = org
  isdt = cl.NumberFormat = "m/d/yyyy"
  If isdt Then
    If VarType(cl.Value) <> vbDate Then
      If IsDate(src) Then
        cl = CVDate(src)
        Exit Sub
      End If
    End If
  End If
  
  pom = InStr(src, vbTab)
  While pom > 0
    src = Left(src, pom - 1) & " " & Mid(src, pom + 1)
    pom = InStr(src, vbTab)
  Wend
  pom = InStr(src, vbLf)
  While pom > 0
    src = Left(src, pom - 1) & " " & Mid(src, pom + 1)
    pom = InStr(src, vbLf)
  Wend
  src = LTrim(src)
  src = RTrim(src)
  If org <> src Then
    cl = src
  End If
  Exit Sub
nech_byt:
  cl = "##### IMPORT ERROR: " & Error
  Exit Sub
End Sub

Private Sub cb4_Click()
  Dim nr As Long
  Dim lr As Long
  Dim nc As Long
  Dim i As Long
  Dim j As Long
  Dim cl As Range
  Dim txtold As String
  Dim txtnew As String
  
  
  'zkontroluj
  On Error GoTo chyba
  MacroStart
  
    'zkopiruj formaty
    UpdateTable
    
    lr = Application.Range("TblEnd").Row
    nr = Application.Range("nItems")
    nc = Application.Range("SrcFmt").Columns.Count
  
    For Each cl In shInput.Range(Cells(lr - nr, 1), Cells(lr - 1, nc))
      UpravTxt cl
    Next cl


    
    'presun se na prvni chybu
    If Application.Range("nErrors") > 0 Then
      For i = lr - nr To lr - 1
        If Cells(i, nc + 3) > 0 Then
          For j = 1 To nc
            If Cells(i, nc + 3 + j) > 0 Then
              Application.ScreenUpdating = True
                Cells(i, j).Select
              Application.ScreenUpdating = False
              GoTo konec
            End If
          Next j
        End If
      Next i
    Else
      Cells(lr - nr, 1).Select
      With Application.Range("UI").Columns(Application.Range("Lang") + 1)
        MsgBox .Cells(UI_TEST_OK_TEXT), vbOKOnly, .Cells(UI_TEST_OK_CAPTION)
      End With
    End If
  
konec:
  MacroEnd
  Exit Sub

chyba:
  MacroEnd
  MsgBox "cb4_Click:" & Error
  Exit Sub
  Resume
End Sub

Private Sub cb4_GotFocus()
  Application.Range("InfoSrc").Formula = Application.Range("UI").Columns(Application.Range("Lang") + 3).Cells(UI_CB4)
End Sub

Public Sub PreparePrint()
  MacroStart
  UpdateTable
  If Application.Range("Final") <> 1 Then
    cb9_Click
  End If
  Cells(1, 1).Activate
  MacroEnd
  
  If b_NoResetPage Then Exit Sub
  
  MacroStart
  shInput.ResetAllPageBreaks
  ActiveWindow.View = xlPageBreakPreview
  ActiveWindow.View = xlNormalView
  MacroEnd
  
  
  Dim pom As HPageBreak
  Dim rng As Range
  For Each pom In ActiveSheet.HPageBreaks
    If pom.Type = xlPageBreakAutomatic Then
      Set rng = Intersect(pom.Location, Application.Range("NoSplit"))
      If Not rng Is Nothing Then
'        Debug.Print pom.Location.Address, rng.Address
        Application.Range("NoSplit").Rows(1).PageBreak = xlPageBreakManual
        'ActiveSheet.HPageBreaks.Add Application.Range("NoSplit").Cells(1, 1)
        'pom.Location = Application.Range("NoSplit").Cells(1, 1).Address
      End If
    End If
  Next pom
  
End Sub
Private Sub cb5_Click()
  'Print
  PreparePrint
  b_NoResetPage = True
  Application.Dialogs(xlDialogPrintPreview).Show
  b_NoResetPage = False
End Sub

Private Sub cb5_GotFocus()
  Application.Range("InfoSrc").Formula = Application.Range("UI").Columns(Application.Range("Lang") + 3).Cells(UI_CB5)
End Sub

Private Sub cb6_Click()
  'Save
  MacroStart
  UpdateTable
  MacroEnd
  Application.Dialogs(xlDialogSaveAs).Show
End Sub

Private Sub cb6_GotFocus()
  Application.Range("InfoSrc").Formula = Application.Range("UI").Columns(Application.Range("Lang") + 3).Cells(UI_CB6)
End Sub

Private Sub cb7_Click()
  Dim nr As Long
  Dim lr As Long
  Dim nc As Long
  On Error GoTo chyba
  
  'copy
  MacroStart
  UpdateTable
    lr = Application.Range("TblEnd").Row
    nr = Application.Range("nItems")
    nc = Application.Range("SrcFmt").Columns.Count
    With shInput.Range(Cells(lr - nr, 1), Cells(lr - 1, nc))
      .Select
    End With
  MacroEnd
  Selection.Copy
  Exit Sub

chyba:
  MacroEnd
  MsgBox "cb7_Click:" & Error
  Exit Sub
End Sub

Private Sub cb7_GotFocus()
  Application.Range("InfoSrc").Formula = Application.Range("UI").Columns(Application.Range("Lang") + 3).Cells(UI_CB7)
End Sub

Private Function GetFileName(flname As String) As String
  Dim posn As Integer, i As Integer
  
  posn = 1
  i = InStr(posn, flname, "\")
  While i > 0
    posn = i + 1
    i = InStr(posn, flname, "\")
  Wend
  If posn > 1 Then
    flname = Mid(flname, posn)
  End If
  posn = 1
  i = InStr(posn, flname, ".")
  While i > 0
    posn = i + 1
    i = InStr(posn, flname, ".")
  Wend
  If posn > 1 Then
    flname = Left(flname, posn - 2)
  End If
  GetFileName = flname
End Function

Private Sub cb8_Click()
  Dim nr As Long
  Dim lr As Long
  Dim nc As Long
  Dim fl As Integer
  Dim topr As Integer
  Dim fnm As String
  Dim ret
  Dim cl As Range
  Dim cont As String
  
  
  'export CSV
  MacroStart
  UpdateTable
  MacroEnd
  
  lr = Application.Range("TblEnd").Row
  nr = Application.Range("nItems")
  nc = Application.Range("SrcFmt").Columns.Count
znova:
  ret = Application.GetSaveAsFilename(GetFileName(ActiveWorkbook.Name) & ".csv", "CSV files (*.csv),*.csv", 1)
  If False = ret Then Exit Sub
  fnm = ret
  If Dir(fnm) <> "" Then
    ret = MsgBox(Application.Range("UI").Columns(Application.Range("Lang") + 1).Cells(UI_OVERWRITE), vbYesNoCancel)
    If ret = vbNo Then GoTo znova
    If ret = vbCancel Then Exit Sub
  End If
  
  fl = FreeFile
  Open fnm For Output As fl
  topr = shInput.Range("SrcTableTop").Row + shInput.Range("SrcTableTop").Rows.Count - 1
  For Each cl In Union(shInput.Range("Date"), shInput.Range("SrcTableTop"), shInput.Range(Cells(lr - nr, 1), Cells(lr - 1, nc)))
    cont = cl & ""
    Select Case cl.NumberFormat
      Case "m/d/yyyy"
        cont = Format(cl, "d.m.yyyy")
      Case "@"
        'text
        cont = """" & Replace(cont, """", """""") & """"
      Case "0", "#,##0.00"
        cont = Replace(cl & "", ",", ".")
      Case Else
        cont = cl & ""
    End Select
    If (cl.Column = nc) Or (cl.Row = topr) Then
      Print #fl, cont
    Else
      Print #fl, cont; ",";
    End If
  Next cl
  Close #fl
 
End Sub

Private Sub cb8_GotFocus()
  'lang change
  Application.Range("InfoSrc").Formula = Application.Range("UI").Columns(Application.Range("Lang") + 3).Cells(UI_CB8)
End Sub

Private Sub cb9_Click()
  Dim fin As Integer
  On Error GoTo chyba
  'final change
  MacroStart
    fin = 1 - Application.Range("Final")
    If fin > 0 Then
      Range("Header").Rows.Hidden = False
    Else
      Range("Header").Rows.Hidden = True
    End If
    Application.Range("Final") = fin
    Application.Range("InfoSrc").Formula = Application.Range("UI").Columns(Application.Range("Lang") + 3).Cells(UI_CB9 + fin)
  cb9_GotFocus
  MacroEnd
  Exit Sub
chyba:
  MacroEnd
  MsgBox "cb9_Click:" & Error
  Exit Sub
End Sub

Private Sub cb9_GotFocus()
  Application.Range("InfoSrc").Formula = Application.Range("UI").Columns(Application.Range("Lang") + 3).Cells(UI_CB9 + Application.Range("Final"))
End Sub

Private Sub cb10_Click()
  Dim ret
  Dim fnm As String
  Dim data As String
  Dim fl As Integer
  Dim items As Long
  Dim lns As Long
  Dim nr As Long
  Dim nc As Long
  Dim lr As Long
  Dim fr As Long
  Dim cl As Range
  
  
  With Application.Range("UI").Columns(Application.Range("Lang") + 1)
    If vbYes <> MsgBox(.Cells(UI_IMPORT), vbYesNoCancel, .Cells(UI_IMPORT_CAPTION)) Then
      Exit Sub
    End If
  End With
  
  
  ret = Application.GetOpenFilename("CSV files (*.csv),*.csv", 1)
  If False = ret Then Exit Sub
  fnm = ret
  
  fl = FreeFile
  Open fnm For Input As fl
    items = 0
    While Not EOF(fl)
     Input #fl, data
     items = items + 1
    Wend
  Close fl
  If (items < 7) Or (items Mod 10 <> 7) Then
    With Application.Range("UI").Columns(Application.Range("Lang") + 1)
      MsgBox .Cells(UI_WRONG_FORMAT), vbOKOnly, .Cells(UI_WRONG_FORMAT_CAPTION)
    End With
  Else
    MacroStart

    lns = (items - 7) \ 10
    
    lr = Application.Range("TblEnd").Row
    nr = Application.Range("nItems")
    nc = Application.Range("SrcFmt").Columns.Count
    fr = lr - nr

    shInput.Range(Cells(fr, 1), Cells(lr - 1, nc)).EntireRow.Delete
    InsertRows fr, lns
    
    Open fnm For Input As fl
    On Error Resume Next
    For Each cl In Union(shInput.Range("Date"), shInput.Range("SrcTableTop"), shInput.Range(Cells(fr, 1), Cells(fr + lns - 1, nc)))
      Input #fl, data
      Select Case cl.NumberFormat
        Case "m/d/yyyy"
          cl = CVDate(data)
        Case Else
          cl = data
      End Select
    Next cl
    Close fl
    MacroEnd
  End If
End Sub

Private Sub cb10_GotFocus()
  Application.Range("InfoSrc").Formula = Application.Range("UI").Columns(Application.Range("Lang") + 3).Cells(UI_CB10)
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  On Error GoTo chyba
  
  If mLockCount > 0 Then Exit Sub
  
  If Not Target.Locked Then
    If Target.Row < Application.Range("SrcFmt").Row Then
      Application.Range("InfoSrc").Formula = "=K" & Target.Row
    Else
      If Target.Row > Application.Range("TblEnd").Row Then
        If Target.Column > 1 Then
          Application.Range("InfoSrc").Formula = "=K" & Target.Row
        Else
          Application.Range("InfoSrc").Formula = ""
        End If
      Else
        Application.Range("InfoSrc").FormulaR1C1 = "=R" & (Application.Range("SrcFmt").Row - 1) & "C" & Target.Column
      End If
    End If
  Else
    If Application.Range("InfoSrc").Formula <> "" Then 'Target.Row = 1 And Target.Column = 1 Then
      Application.Range("InfoSrc").Formula = ""
    End If
  End If
  
'  Debug.Print Target.Address
  Exit Sub
chyba:
  MsgBox "Worksheet_SelectionChange:" & Error
  Exit Sub
End Sub

Public Sub MacroStart()
  If mLockCount = 0 Then
    Application.ScreenUpdating = False
    shInput.Unprotect MY_PASSWD
  End If
  mLockCount = mLockCount + 1
End Sub

Public Sub MacroEnd()
  mLockCount = mLockCount - 1
  If mLockCount = 0 Then
    Application.ScreenUpdating = True
    If shSrc.Visible = xlSheetVeryHidden Then shInput.Protect MY_PASSWD, True, True
  End If
End Sub

Public Sub RemoveRows()
  Dim lr As Long
  Dim nr As Long
  Dim nc As Long
  Dim dc As Long
  Dim tbd As Range
  Dim rngArea As Range
  
  lr = Application.Range("TblEnd").Row
  nr = Application.Range("nItems")
  nc = Application.Range("SrcFmt").Columns.Count
  
  On Error GoTo nelze
  Set tbd = Selection
  MacroStart
    Set tbd = Intersect(tbd, Range(Cells(lr - nr, 1), Cells(lr - 1, nc)))
    Set tbd = tbd.EntireRow
    dc = 0
    For Each rngArea In tbd.Areas
      dc = dc + rngArea.Rows.Count
    Next
    tbd.Select
  DeleteRows lr, nr, dc
  MacroEnd
  Exit Sub
nelze:
  Exit Sub
End Sub

Attribute VB_Name = "shSrc"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "thBook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_BeforePrint(Cancel As Boolean)
  shInput.PreparePrint
End Sub

Private Sub Workbook_Open()
  Dim cap As String
  Dim it As Object
  Dim bFound As Boolean
  cap = Application.Range("UI").Columns(Application.Range("Lang") + 1).Cells(1) 'UI_CONTEXT_MENU

  On Error Resume Next
  bFound = False
  For Each it In Application.CommandBars("Cell").Controls
    If it.Tag = "RemoveRows" Then
      it.Caption = cap
      bFound = True
    End If
  Next
  If Not bFound Then
    With Application.CommandBars("Cell").Controls.Add(, , , , True)
      .BeginGroup = True
      .OnAction = ThisWorkbook.Name & "!RemoveRows"
      .Caption = cap
      .Tag = "RemoveRows"   'cControlTag
    End With
  End If
  
  bFound = False
  For Each it In Application.CommandBars("Row").Controls
    If it.Tag = "RemoveRows" Then
      it.Caption = cap
      bFound = True
    End If
  Next
  If Not bFound Then
    With Application.CommandBars("Row").Controls.Add(, , , , True)
      .BeginGroup = True
      .OnAction = ThisWorkbook.Name & "!RemoveRows"
      .Caption = cap
      .Tag = "RemoveRows"   'cControlTag
    End With
  End If
End Sub




INQUEST-PP=macro
