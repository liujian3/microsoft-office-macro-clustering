Attribute VB_Name = "AddMaterialForm"
Attribute VB_Base = "0{DA457A2D-160B-41F2-AD97-5A64A538C6F1}{374B12C7-347E-4006-BAA4-4485A86FB2DC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Close the form
Private Sub CloseBtn_Click()
    Unload Me
End Sub


Private Sub cmd_Add_Click()
Dim ans As String, lr As Long
Dim myRow As Long
Dim i As Integer, intValueToFind As Integer

If Me.cmb_PC = "" Or Me.cmb_PC = "" Or Me.cmb_Mat_Cat = "" Or Me.txt_Desc = "" Or Me.cmb_Unit = "" Then
MsgBox ("All Fields must be filled out to add material!")
Exit Sub
Else
lr = Sheets("Database").Range("B" & Rows.Count).End(xlUp).Row + 1
Sheets("Database").Range("B" & lr).Value = Me.txt_MMR

lr = Sheets("Database").Range("C" & Rows.Count).End(xlUp).Row + 1
Sheets("Database").Range("C" & lr).Value = Me.txt_Desc

lr = Sheets("Database").Range("S" & Rows.Count).End(xlUp).Row + 1
Sheets("Database").Range("S" & lr).Value = Me.cmb_Mat_Cat

lr = Sheets("Database").Range("G" & Rows.Count).End(xlUp).Row + 1
Sheets("Database").Range("G" & lr).Value = Me.cmb_Unit

lr = Sheets("Database").Range("T" & Rows.Count).End(xlUp).Row + 1
Sheets("Database").Range("T" & lr).Value = Me.cmb_PC

Unload Me

MsgBox ("New Material successfully added to Database!")
End If
End Sub

Attribute VB_Name = "CFormResizer"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'***************************************************************************
'*
'* MODULE NAME:     USERFORM RESIZER CLASS
'* AUTHOR & DATE:   STEPHEN BULLEN, Office Automation Ltd
'*
'* CONTACT:         Stephen@oaltd.co.uk
'* WEB SITE:        http://www.oaltd.co.uk
'*
'* DESCRIPTION:     Handles the resizing and repositioning of controls on a userform
'*
'***************************************************************************

'This class makes a userform resizable and handles the resizing of all the controls on the userform,
'such that their physical dimensions (e.g. size and position) change as the form is resized.
'Note that this is not a form 'magnifier', in that it does not alter font sizes.

'To specify which control(s) to resize (and how), you set the control's .Tag property at design time to
'indicate that the control's top, left, width and height should be adjusted as the form's size changes.
'
'Use the letters t, l, w and h in any order (or not at all) to state that the property should change as the form
'is resized.  Follow the property by a decimal to indicate that the control should change by a percentage of the
'form's change.
'
'For example:
'  hw           Sets the control's height and width to change with the form (e.g. if there's a single list box on the form)
'  tl           Sets the contol's top and left to change in line with the form (e.g. to keep it in the bottom-right corner)
'  w0.5         Sets the control's width to change by 0.5 that of the form's width change
'  w0.5l0.5     Sets the control's width and position to change by 0.5 that of the form's width change

Option Explicit

'Windows API calls to do all the dirty work!
Private Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Private Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hWnd As Long, ByVal nIndex As Long) As Long
Private Declare Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hWnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
Private Declare Function ShowWindow Lib "user32" (ByVal hWnd As Long, ByVal nCmdShow As Long) As Long
Private Declare Function DrawMenuBar Lib "user32" (ByVal hWnd As Long) As Long
Private Declare Function SetFocus Lib "user32" (ByVal hWnd As Long) As Long

Private Const GWL_STYLE As Long = (-16)           'The offset of a window's style
Private Const WS_THICKFRAME As Long = &H40000     'Style to add a sizable frame
Private Const SW_SHOW As Long = 5

Dim moForm As Object
Attribute moForm.VB_VarHelpID = -1
Dim mdWidth As Double
Dim mdHeight As Double

'Property to set the userform to be resizable
Public Property Set Form(oNew As Object)

    Dim hWndForm As Long, iStyle As Long
    
    'Remember the form for later
    Set moForm = oNew

    'Get the userform's window handle
    If Val(Application.Version) < 9 Then
        hWndForm = FindWindow("ThunderXFrame", moForm.Caption)  'XL97
    Else
        hWndForm = FindWindow("ThunderDFrame", moForm.Caption)  'XL2000
    End If

    'Make the form resizable
    iStyle = GetWindowLong(hWndForm, GWL_STYLE)
    iStyle = iStyle Or WS_THICKFRAME
    SetWindowLong hWndForm, GWL_STYLE, iStyle

    'Show the window with the changes
    ShowWindow hWndForm, SW_SHOW
    DrawMenuBar hWndForm
    SetFocus hWndForm

    'Remember the current size for later
    mdWidth = moForm.Width
    mdHeight = moForm.Height

End Property

'Handle the form's resize event, by resizing and repositioning controls
Public Sub FormResize()

    Dim dWidthAdj As Double, dHeightAdj As Double, sTag As String
    Dim oCtl As MSForms.Control
    
    'If not set before, remember the old width and height
    If mdWidth = 0 Then mdWidth = moForm.Width
    If mdHeight = 0 Then mdHeight = moForm.Height
    
    'How much are we changing by?
    dWidthAdj = moForm.Width - mdWidth
    dHeightAdj = moForm.Height - mdHeight
    
    'Check if we can perform the adjustment (i.e. widths and heights can't be -ve)
    For Each oCtl In moForm.Controls
        With oCtl
            sTag = UCase(.Tag)
            
            'Check if the left would become -ve
            If InStr(1, sTag, "L", vbBinaryCompare) Then
                If .Left + dWidthAdj <= 0 Then moForm.Width = mdWidth
            End If
            
            'Check if the width would become -ve
            If InStr(1, sTag, "W", vbBinaryCompare) Then
                If .Width + dWidthAdj <= 0 Then moForm.Width = mdWidth
            End If

            'Check if the top would become -ve
            If InStr(1, sTag, "T", vbBinaryCompare) Then
                If .Top + dHeightAdj <= 0 Then moForm.Height = mdHeight
            End If
            
            'Check if the height would become -ve
            If InStr(1, sTag, "H", vbBinaryCompare) Then
                If .Height + dHeightAdj <= 0 Then moForm.Height = mdHeight
            End If
        End With
    Next

    'OK to do it, so perform the resize
    dWidthAdj = moForm.Width - mdWidth
    dHeightAdj = moForm.Height - mdHeight
    
    'Loop through the controls on the form, changing their size and/or position
    For Each oCtl In moForm.Controls
        With oCtl
            sTag = UCase(.Tag)
            If InStr(1, sTag, "L", vbBinaryCompare) Then .Left = .Left + dWidthAdj * ResizeFactor(sTag, "L")
            If InStr(1, sTag, "T", vbBinaryCompare) Then .Top = .Top + dHeightAdj * ResizeFactor(sTag, "T")
            If InStr(1, sTag, "W", vbBinaryCompare) Then .Width = .Width + dWidthAdj * ResizeFactor(sTag, "W")
            If InStr(1, sTag, "H", vbBinaryCompare) Then .Height = .Height + dHeightAdj * ResizeFactor(sTag, "H")
        End With
    Next

    'Remember the new dimensions for next time
    mdWidth = moForm.Width
    mdHeight = moForm.Height

End Sub

'Get the resize factor from the control's Tag property
Private Function ResizeFactor(sTag As String, sChange As String)

    Dim i As Integer, d As Double

    'Find the position of the required change designator (L, T, W or H)
    i = InStr(1, sTag, sChange, vbBinaryCompare)
    If i > 0 Then
    
        'Get the value of any numbers following the designator
        d = Val(Mid$(sTag, i + 1))
        
        'If none there, change by 100%
        If d = 0 Then d = 1
    End If

    ResizeFactor = d

End Function
Attribute VB_Name = "MaterialCodes0"
Attribute VB_Base = "0{0EF44630-8F0C-4FE3-8DB7-87CE2C907CA7}{EA8860DA-0F3F-4055-A973-2CF8015F21DD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private words As Variant
Private MyRange As Variant
Private ActRange As Range
Dim moResizer As New CFormResizer


'clear selections on list box prior to running the search function
Private Sub btnClearAll_Click()
 Me.ListBox1.MultiSelect = fmMultiSelectSingle
 Me.ListBox1.ListIndex = -1
 Me.ListBox1.MultiSelect = fmMultiSelectExtended
 
 End Sub

'search function on list box
Private Sub CommandButton1_Click()
Dim strSearch As String
 Dim i As Long
 Dim iContinueSearch As Integer
 Dim Filecount As Variant
 
btnClearAll_Click
TextBox1.Value = ""

 strSearch = UCase("*" & TextBox2.Value & "*")

 With Me.ListBox1
 
 If .ListCount > 0 Then
    For i = 0 To .ListCount - 2
        If .Column(0, i) Like strSearch Then
            .Selected(i) = True
            .ListIndex = i + (.Height / 15)
            iContinueSearch = MsgBox("Find Next?", vbQuestion + vbYesNo)
            If iContinueSearch = vbYes Then
               .Selected(i) = False
            End If
            If iContinueSearch = vbNo Then
                Exit For
            End If
        End If
    Next i
    
 End If
 End With
End Sub

''   if a key is pressed while the form is open set focus on the textbox
'Private Sub ListBox1_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
'On Error GoTo errExit
'TextBox1.SetFocus
'errExit:
'End Sub

'   close form
Private Sub PhaseCancel_Click()
UnhookListBoxScroll
Unload MaterialCodes0
End Sub

Private Sub UserForm_Activate()
Set PRange = ActiveCell
Set moResizer.Form = Me
End Sub
'Let the resizer resize the form's controls
Private Sub UserForm_Resize()
    moResizer.FormResize
End Sub



Private Sub UserForm_Initialize()
Dim intCount As Integer
On Error GoTo errExit
Set MyRange = Range("Material_Code")
'   load Material Code list into list for form

With Worksheets("Database")
    words = Split(UCase(Join(Application.Transpose(MyRange), "||")), "||")
End With
ListBox1.List = words

For intCount = ListBox1.ListCount - 1 To 0 Step -1
    If ListBox1.List(intCount) = "  -  " Then ListBox1.RemoveItem (intCount)
Next intCount
Me.Top = Form1y
Me.Left = Form1x
errExit:
End Sub

''Send to Sheet button on material lookup
Private Sub PhaseOK_Click()
    InsertCodesIntoGnSheet
End Sub
'
''double click on material lookup
Private Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    InsertCodesIntoGnSheet
End Sub

'filter box on material lookup
Private Sub TextBox1_Change()
On Error GoTo errExit
Me.ListBox1.List = Filter(words, UCase(TextBox1.Value), True, vbTextCompare)
Me.Repaint
errExit:
End Sub

'Private Sub UserForm_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
'TextBox1.SetFocus
'End Sub
Private Sub ListBox1_MouseMove( _
                        ByVal Button As Integer, ByVal Shift As Integer, _
                        ByVal x As Single, ByVal Y As Single)
         HookListBoxScroll Me, Me.ListBox1
End Sub


Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
        Form1y = Me.Top
        Form1x = Me.Left
        UnhookListBoxScroll
End Sub

'Close the form
Private Sub btnClose_Click()
    Unload Me
End Sub

'insert row if existing data is found on green sheets
Private Sub InsertCodesIntoGnSheet()
Application.EnableEvents = False
Application.ScreenUpdating = False

Dim i As Integer
Dim MsgShown As Boolean
MsgShown = False

Dim MsgBoxVal As Variant

'SheetUnprotect_Auto
On Error GoTo errExit
If FindIntersect(Range(ActiveCell.Address), Range("MatCode1")) = "Yes" Then
    For i = 0 To ListBox1.ListCount - 1
        If ListBox1.Selected(i) Then
            If ActiveCell.Value <> "" Then
                If IsEmpty(MsgBoxVal) And MsgShown = False Then
                    MsgBoxVal = MsgBox("Existing Data Found, Insert New Rows?", vbQuestion + vbYesNo)
                    MsgShown = True
                End If
                If MsgBoxVal = vbYes Then
                    InsertRowGnSheet
                    ActiveCell.Offset(, -1).Select
                    ActiveCell.NumberFormat = "@"
                    ActiveCell.Value = Trim(Left(Trim(ListBox1.List(i)), 12))
                    Selection.Offset(-1, 0).Select
                End If
                    Selection.Offset(1, 0).Select
                Else
                If MsgBoxVal <> vbNo Then
                    ActiveCell.NumberFormat = "@"
                    ActiveCell.Value = Trim(Left(Trim(ListBox1.List(i)), 12))
                    Selection.Offset(1, 0).Select
                End If
            End If
        End If
    Next i
Else
    MsgBox ("Please select the proper field to insert this record")

End If
'ProtectSheet
errExit:
UnhookListBoxScroll
Application.EnableEvents = True
'Unload MaterialCodes
Application.ScreenUpdating = True
End Sub

Sub InsertRowGnSheet()
On Error GoTo errExit
Application.ScreenUpdating = False
If FindIntersect(Range(ActiveCell.Address), Range("RecapData1")) = "Yes" Or FindIntersect(Range(ActiveCell.Address), Range("Database")) = "Yes" Then
    ActiveCell.Rows("1:1").EntireRow.Select
    Selection.Copy
    Selection.Offset(1, 0).Select
    Selection.Insert Shift:=xlDown
    If Left(ActiveSheet.Name, 2) = "Re" Then
         Application.CutCopyMode = False
         ActiveCell.Rows("1:1").EntireRow.Select
         ActiveCell.Offset(0, 1).Range("A1").Select
         Selection.ClearContents
         ActiveCell.Offset(0, 3).Range("A1").Select
         Selection.ClearContents
    End If
End If
GoTo 10:
errExit:
MsgBox ("There was an Error Copying the line, please check your spreadsheet")
10:
Application.ScreenUpdating = True
End Sub




Attribute VB_Name = "MaterialCodes1"
Attribute VB_Base = "0{D71CE4B0-5CC0-44E7-90A4-A4A578650425}{E41694D1-A21E-4789-9E83-58865E517CC3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private words As Variant
Private MyRange As Variant
Dim moResizer As New CFormResizer

''   if a key is pressed while the form is open set focus on the textbox
'Private Sub ListBox1_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
'On Error GoTo errExit
'TextBox1.SetFocus
'errExit:
'End Sub

'clears selections prior to running the search function
Private Sub btnClearAll_Click()
 Me.ListBox1.MultiSelect = fmMultiSelectSingle
 Me.ListBox1.ListIndex = -1
 Me.ListBox1.MultiSelect = fmMultiSelectExtended
 End Sub

'Search function on material lookup
Private Sub CommandButton1_Click()
Dim strSearch As String
 Dim i As Long
 Dim iContinueSearch As Integer
 Dim Filecount As Variant

btnClearAll_Click
TextBox1.Value = ""

 strSearch = UCase("*" & TextBox2.Value & "*")

 With Me.ListBox1
 
 If .ListCount > 0 Then
    For i = 0 To .ListCount - 2
        If .Column(0, i) Like strSearch Then
            .Selected(i) = True
            .ListIndex = i + (.Height / 15)
            iContinueSearch = MsgBox("Find Next?", vbQuestion + vbYesNo)
            If iContinueSearch = vbYes Then
                .Selected(i) = False
            End If
            If iContinueSearch = vbNo Then
                Exit For
            End If
        End If
    Next i
    
 End If
 End With
End Sub

'   close form
Private Sub PhaseCancel_Click()
UnhookListBoxScroll
Unload MaterialCodes1
End Sub


Private Sub UserForm_Activate()
    Set moResizer.Form = Me
End Sub

Private Sub UserForm_Resize()
    moResizer.FormResize
End Sub

Private Sub UserForm_Initialize()
Dim intCount As Integer
On Error GoTo errExit
Set MyRange = Range("Material_Code")
'   load Material Code list into list for form

With Worksheets("Database")
    words = Split(UCase(Join(Application.Transpose(MyRange), "||")), "||")
End With
ListBox1.List = words

For intCount = ListBox1.ListCount - 1 To 0 Step -1
    If ListBox1.List(intCount) = "  -  " Then ListBox1.RemoveItem (intCount)
Next intCount
Me.Top = Form2y
Me.Left = Form2x
errExit:
End Sub
'send to sheet button on material lookup sheet
Private Sub PhaseOK_Click()
InsertCodesIntoGnSheet
End Sub

'double click function on material lookup sheet
Private Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
InsertCodesIntoGnSheet
End Sub

'text box for the filter function on the material lookup sheet
Private Sub TextBox1_Change()
On Error GoTo errExit
Me.ListBox1.List = Filter(words, UCase(TextBox1.Value), True, vbTextCompare)
Me.Repaint
errExit:
End Sub

'Private Sub UserForm_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
'TextBox1.SetFocus
'End Sub


Private Sub ListBox1_MouseMove( _
                        ByVal Button As Integer, ByVal Shift As Integer, _
                        ByVal x As Single, ByVal Y As Single)
         HookListBoxScroll Me, Me.ListBox1
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
        Form2y = Me.Top
        Form2x = Me.Left
        UnhookListBoxScroll
End Sub

Private Sub btnClose_Click()
    Unload Me
End Sub

'insert row if existing data is found on green sheets
Private Sub InsertCodesIntoGnSheet()
    Application.EnableEvents = False
Application.ScreenUpdating = False

Dim i As Integer
Dim MsgShown As Boolean
MsgShown = False

Dim MsgBoxVal As Variant


On Error GoTo errExit
If FindIntersect(Range(ActiveCell.Address), Range("MatCode1")) = "Yes" Then
    For i = 0 To ListBox1.ListCount - 1
        If ListBox1.Selected(i) Then
            If ActiveCell.Value <> "" Then
                If IsEmpty(MsgBoxVal) And MsgShown = False Then
                    MsgBoxVal = MsgBox("Existing Data Found, Insert New Rows?", vbQuestion + vbYesNo)
                    MsgShown = True
                End If
                If MsgBoxVal = vbYes Then
                    InsertRowGnSheet
                    ActiveCell.Offset(, -1).Select
                    ActiveCell.NumberFormat = "@"
                    ActiveCell.Value = Trim(Left(Trim(ListBox1.List(i)), 12))
                    Selection.Offset(-1, 0).Select
                End If
                    Selection.Offset(1, 0).Select
                Else
                If MsgBoxVal <> vbNo Then
                    ActiveCell.NumberFormat = "@"
                    ActiveCell.Value = Trim(Left(Trim(ListBox1.List(i)), 12))
                    Selection.Offset(1, 0).Select
                End If
            End If
        End If
    Next i
Else
    MsgBox ("Please select the proper field to insert this record")

End If
errExit:
UnhookListBoxScroll
Application.EnableEvents = True
'Unload MaterialCodes
Application.ScreenUpdating = True
End Sub

Sub InsertRowGnSheet()
On Error GoTo errExit
Application.ScreenUpdating = False
If FindIntersect(Range(ActiveCell.Address), Range("RecapData1")) = "Yes" Or FindIntersect(Range(ActiveCell.Address), Range("Database")) = "Yes" Then
    ActiveCell.Rows("1:1").EntireRow.Select
    Selection.Copy
    Selection.Offset(1, 0).Select
    Selection.Insert Shift:=xlDown
    If Left(ActiveSheet.Name, 2) = "Re" Then
         Application.CutCopyMode = False
         ActiveCell.Rows("1:1").EntireRow.Select
         ActiveCell.Offset(0, 1).Range("A1").Select
         Selection.ClearContents
         ActiveCell.Offset(0, 3).Range("A1").Select
         Selection.ClearContents
    End If
End If
GoTo 10:
errExit:
MsgBox ("There was an Error Copying the line, please check your spreadsheet")
10:
Application.ScreenUpdating = True
End Sub





Attribute VB_Name = "MaterialCodes2"
Attribute VB_Base = "0{E58CFCD0-481D-42C4-AFEA-B1C9DDA6DC42}{5A50362B-31CE-499B-989F-2EEB97CB62EE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit
Private words As Variant
Private MyRange As Variant
Dim moResizer As New CFormResizer

''   if a key is pressed while the form is open set focus on the textbox
'Private Sub ListBox1_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
'On Error GoTo errExit
'TextBox1.SetFocus
'errExit:
'End Sub

'clears selection prior to search function being executed
Private Sub btnClearAll_Click()
 Me.ListBox1.MultiSelect = fmMultiSelectSingle
 Me.ListBox1.ListIndex = -1
 Me.ListBox1.MultiSelect = fmMultiSelectExtended
 End Sub

'Search function button on the material lookup sheet
Private Sub CommandButton1_Click()
Dim strSearch As String
 Dim i As Long
 Dim iContinueSearch As Integer
 Dim Filecount As Variant

btnClearAll_Click
TextBox1.Value = ""


 strSearch = UCase("*" & TextBox2.Value & "*")

 With Me.ListBox1
 
 If .ListCount > 0 Then
    For i = 0 To .ListCount - 2
        If .Column(0, i) Like strSearch Then
            .Selected(i) = True
            .ListIndex = i + (.Height / 15)
            iContinueSearch = MsgBox("Find Next?", vbQuestion + vbYesNo)
            If iContinueSearch = vbYes Then
                .Selected(i) = False
            End If
            If iContinueSearch = vbNo Then
                Exit For
            End If
        End If
    Next i
    
 End If
 End With
End Sub

'   close form
Private Sub PhaseCancel_Click()
UnhookListBoxScroll
Unload MaterialCodes2
End Sub


Private Sub UserForm_Activate()
    Set moResizer.Form = Me
End Sub

Private Sub UserForm_Resize()
    moResizer.FormResize
End Sub

Private Sub UserForm_Initialize()
Dim intCount As Integer
On Error GoTo errExit
Set MyRange = Range("Material_Code")
'   load Material Code list into list for form

With Worksheets("Database")
    words = Split(UCase(Join(Application.Transpose(MyRange), "||")), "||")
End With
ListBox1.List = words

For intCount = ListBox1.ListCount - 1 To 0 Step -1
    If ListBox1.List(intCount) = "  -  " Then ListBox1.RemoveItem (intCount)
Next intCount
Me.Top = Form3y
Me.Left = Form3x
errExit:
End Sub

'send to sheet button on material lookup sheet
Private Sub PhaseOK_Click()
InsertCodesIntoGnSheet
End Sub

'double click function on material lookup sheet
Private Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
InsertCodesIntoGnSheet
End Sub

'textbox filter on material lookup sheet
Private Sub TextBox1_Change()
On Error GoTo errExit
Me.ListBox1.List = Filter(words, UCase(TextBox1.Value), True, vbTextCompare)
Me.Repaint
errExit:
End Sub

'Private Sub UserForm_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
'TextBox1.SetFocus
'End Sub


Private Sub ListBox1_MouseMove( _
                        ByVal Button As Integer, ByVal Shift As Integer, _
                        ByVal x As Single, ByVal Y As Single)
         HookListBoxScroll Me, Me.ListBox1
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
        Form3y = Me.Top
        Form3x = Me.Left
        UnhookListBoxScroll
End Sub

Private Sub btnClose_Click()
    Unload Me
End Sub

'insert row if existing data is found on green sheets
Private Sub InsertCodesIntoGnSheet()
    Application.EnableEvents = False
Application.ScreenUpdating = False

Dim i As Integer
Dim MsgShown As Boolean
MsgShown = False

Dim MsgBoxVal As Variant


On Error GoTo errExit
If FindIntersect(Range(ActiveCell.Address), Range("MatCode1")) = "Yes" Then
    For i = 0 To ListBox1.ListCount - 1
        If ListBox1.Selected(i) Then
            If ActiveCell.Value <> "" Then
                If IsEmpty(MsgBoxVal) And MsgShown = False Then
                    MsgBoxVal = MsgBox("Existing Data Found, Insert New Rows?", vbQuestion + vbYesNo)
                    MsgShown = True
                End If
                If MsgBoxVal = vbYes Then
                    InsertRowGnSheet
                    ActiveCell.Offset(, -1).Select
                    ActiveCell.NumberFormat = "@"
                    ActiveCell.Value = Trim(Left(Trim(ListBox1.List(i)), 12))
                    Selection.Offset(-1, 0).Select
                End If
                    Selection.Offset(1, 0).Select
                Else
                If MsgBoxVal <> vbNo Then
                    ActiveCell.NumberFormat = "@"
                    ActiveCell.Value = Trim(Left(Trim(ListBox1.List(i)), 12))
                    Selection.Offset(1, 0).Select
                End If
            End If
        End If
    Next i
Else
    MsgBox ("Please select the proper field to insert this record")

End If
errExit:
UnhookListBoxScroll
Application.EnableEvents = True
'Unload MaterialCodes
Application.ScreenUpdating = True
End Sub

Sub InsertRowGnSheet()
On Error GoTo errExit
Application.ScreenUpdating = False
If FindIntersect(Range(ActiveCell.Address), Range("RecapData1")) = "Yes" Or FindIntersect(Range(ActiveCell.Address), Range("Database")) = "Yes" Then
    ActiveCell.Rows("1:1").EntireRow.Select
    Selection.Copy
    Selection.Offset(1, 0).Select
    Selection.Insert Shift:=xlDown
    If Left(ActiveSheet.Name, 2) = "Re" Then
         Application.CutCopyMode = False
         ActiveCell.Rows("1:1").EntireRow.Select
         ActiveCell.Offset(0, 1).Range("A1").Select
         Selection.ClearContents
         ActiveCell.Offset(0, 3).Range("A1").Select
         Selection.ClearContents
    End If
End If
GoTo 10:
errExit:
MsgBox ("There was an Error Copying the line, please check your spreadsheet")
10:
Application.ScreenUpdating = True
End Sub





Attribute VB_Name = "MaterialForm"
Attribute VB_Base = "0{486E735F-1D24-468E-A21B-C825C7B54D05}{563FC26C-0E2C-45EB-94FC-4388B84F00F5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private words As Variant
Private MyRange As Variant
Private ActRange As Range
Dim moResizer As New CFormResizer

Private Sub UserForm_Initialize()
     Dim cell As Range
     Dim rng As Range
     
     With ListBox1
        .ColumnCount = 4
        .ColumnWidths = "40;200;40;200"
     End With

     With ThisWorkbook.Sheets("Material_Cat")
         Set rng = .Range("A1", .Range("A1").End(xlDown))
     End With

     For Each cell In rng.Cells
         With Me.ListBox1
             .AddItem cell.Value
             .List(.ListCount - 1, 1) = cell.Offset(0, 1).Value
             .List(.ListCount - 1, 2) = cell.Offset(0, 2).Value
             .List(.ListCount - 1, 3) = cell.Offset(0, 3).Value
             .List(.ListCount - 1, 4) = cell.Offset(0, 4).Value
         End With
     Next cell

Me.Top = Form1y
Me.Left = Form1x

End Sub

Private Sub btnClose_Click()
    Unload Me
End Sub

Private Sub UserForm_Resize()
    moResizer.FormResize
End Sub

Private Sub UserForm_Activate()
Set PRange = ActiveCell
Set moResizer.Form = Me
End Sub

Attribute VB_Name = "Module1"
Option Explicit










Private Type POINTAPI
        x As Long
        Y As Long
End Type

Private Type MOUSEHOOKSTRUCT
        pt As POINTAPI
        hWnd As Long
        wHitTestCode As Long
        dwExtraInfo As Long
End Type

Private Declare Function FindWindow Lib "user32" _
                                        Alias "FindWindowA" ( _
                                                        ByVal lpClassName As String, _
                                                        ByVal lpWindowName As String) As Long

Private Declare Function GetWindowLong Lib "user32.dll" _
                                        Alias "GetWindowLongA" ( _
                                                        ByVal hWnd As Long, _
                                                        ByVal nIndex As Long) As Long

Private Declare Function SetWindowsHookEx Lib "user32" _
                                        Alias "SetWindowsHookExA" ( _
                                                        ByVal idHook As Long, _
                                                        ByVal lpfn As Long, _
                                                        ByVal hmod As Long, _
                                                        ByVal dwThreadId As Long) As Long

Private Declare Function CallNextHookEx Lib "user32" ( _
                                                        ByVal hHook As Long, _
                                                        ByVal ncode As Long, _
                                                        ByVal wParam As Long, _
                                                        lParam As Any) As Long

Private Declare Function UnhookWindowsHookEx Lib "user32" ( _
                                                        ByVal hHook As Long) As Long


Private Declare Function WindowFromPoint Lib "user32" ( _
                                                        ByVal xPoint As Long, _
                                                        ByVal yPoint As Long) As Long

Private Declare Function GetCursorPos Lib "user32.dll" ( _
                                                        ByRef lpPoint As POINTAPI) As Long

Private Const WH_MOUSE_LL As Long = 14
Private Const WM_MOUSEWHEEL As Long = &H20A
Private Const HC_ACTION As Long = 0
Private Const GWL_HINSTANCE As Long = (-6)


Private mLngMouseHook As Long
Private mListBoxHwnd As Long
Private mbHook As Boolean
Private mCtl As MSForms.Control
Dim n As Long

Sub HookListBoxScroll(frm As Object, ctl As MSForms.Control)
Dim lngAppInst As Long
Dim hwndUnderCursor As Long
Dim tPT As POINTAPI
     GetCursorPos tPT
     hwndUnderCursor = WindowFromPoint(tPT.x, tPT.Y)
     If Not frm.ActiveControl Is ctl Then
             ctl.SetFocus
     End If
     If mListBoxHwnd <> hwndUnderCursor Then
             UnhookListBoxScroll
             Set mCtl = ctl
             mListBoxHwnd = hwndUnderCursor
             lngAppInst = GetWindowLong(mListBoxHwnd, GWL_HINSTANCE)
             If Not mbHook Then
                     mLngMouseHook = SetWindowsHookEx( _
                                                     WH_MOUSE_LL, AddressOf MouseProc, lngAppInst, 0)
                     mbHook = mLngMouseHook <> 0
             End If
     End If
End Sub

Sub UnhookListBoxScroll()
     If mbHook Then
                Set mCtl = Nothing
             UnhookWindowsHookEx mLngMouseHook
             mLngMouseHook = 0
             mListBoxHwnd = 0
             mbHook = False
        End If
End Sub

Private Function MouseProc( _
             ByVal ncode As Long, ByVal wParam As Long, _
             ByRef lParam As MOUSEHOOKSTRUCT) As Long
Dim idx As Long
        On Error GoTo errH
     If (ncode = HC_ACTION) Then
             If WindowFromPoint(lParam.pt.x, lParam.pt.Y) = mListBoxHwnd Then
                     If wParam = WM_MOUSEWHEEL Then
                                MouseProc = True
                                If lParam.hWnd > 0 Then idx = -1 Else idx = 1
                             idx = idx + mCtl.ListIndex
                             If idx >= 0 Then mCtl.ListIndex = idx
                                Exit Function
                     End If
             Else
                     UnhookListBoxScroll
             End If
     End If
     MouseProc = CallNextHookEx( _
                             mLngMouseHook, ncode, wParam, ByVal lParam)
     Exit Function
errH:
     UnhookListBoxScroll
End Function


Attribute VB_Name = "Module11"
Public PRange As Range
Public DoCalc As Boolean
Public Form1x As Double
Public Form1y As Double
Public Form2x As Double
Public Form2y As Double
Public Form3x As Double
Public Form3y As Double

Function IsFormula(ByVal c As Range) As Boolean
On Error GoTo errExit
If DoCalc = True Then
IsFormula = c.HasFormula
End If
errExit:
End Function


Sub InsertRow()
On Error GoTo errExit
Application.ScreenUpdating = False
If FindIntersect(Range(ActiveCell.Address), Range("RecapData1")) = "Yes" Or FindIntersect(Range(ActiveCell.Address), Range("Database")) = "Yes" Then
    ActiveCell.Rows("1:1").EntireRow.Select
    Selection.Copy
    Selection.Offset(1, 0).Select
    Selection.Insert Shift:=xlDown
    If ActiveSheet.Name = "Requisition" Then
         Application.CutCopyMode = False
         ActiveCell.Rows("1:1").EntireRow.Select
         'Clear contents of column D,F,& C on new row
         ActiveCell.Offset(0, 3).Range("A1").Select
         Selection.ClearContents
         ActiveCell.Offset(0, 5).Range("A1").Select
         Selection.ClearContents
         ActiveCell.Offset(0, -3).Range("A1").Select
         Selection.ClearContents
    Else
    
        If Left(ActiveSheet.Name, 8) = "Database" Then
'            ActiveCell.Offset(0, 0).Range("A1").Select
            Application.CutCopyMode = False
' Insert cells and clear contents of I and M Column Cells
            ActiveCell.Rows("1:1").Range("I1,M1").Select
            Selection.ClearContents
            ActiveCell.Rows("1:1").EntireRow.Select
            Dim MatCode As String
            Dim NewMatCode As String
            Dim NextMatCode As String
            Dim NextPre As String
            Dim NextSuf As String
            Dim Pre As String
            Dim Suf As String
            Dim NewSuf As String
            Dim NewPre As String
            Dim Space As Double
            NextMatCode = CStr(Cells(ActiveCell.Rows.Offset(1, 0).Row, 2))
            MatCode = CStr(ActiveCell.Rows.Cells(1, 2).Value)
            Pre = GetPart(MatCode, ".", "L")
            Suf = GetPart(MatCode, ".", "R")
            NextPre = GetPart(NextMatCode, ".", "L")
            NextSuf = GetPart(NextMatCode, ".", "R")
            ActiveCell.Rows.Cells(1, 1).Value = Date
            
            
            '   If we don't find a suffix on this code
            If Suf = "Not Found" Then
                
                '   prefixes DONT match
                If Pre <> NextPre Then
                    ActiveCell.Rows.Cells(1, 2).Value = MatCode & ".100"
                
                '   prefixes match
                Else
                    '   check to see if next suffix is numeric
                    If IsNumeric(NextSuf) Then
                        
                        '   check to see if new next suffix = 0 since we can't handle that
                        If "0" = NextSuf Then
                            MsgBox ("I don't know how to insert a new code since the end of the next code is a zero!")
                            Selection.Delete Shift:=xlUp
                            
                        '   set our new suffix to be 1/2 of the distance to the next suffix
                        Else
                            ActiveCell.Rows.Cells(1, 2).Value = MatCode & Format(CDbl("0." & NextSuf) / 10, ".000")
                        End If
                    
                    '   if next suffix is NOT numeric
                    Else
                        ActiveCell.Rows.Cells(1, 2).Value = MatCode & ".1"
                    End If
                End If
            
            '   we find a suffix on this code
            Else
                
                '   prefixes DONT match
                If Pre <> NextPre Then
                    '   as we near 1000 we need to pretend like the is another suffix called 999 so we don't go over 1000 with our suffix
                    If CDbl(Suf) >= 900 Then
                        
                        Space = CDbl("." & 999) - CDbl("." & Suf)
                        If CStr(Space) = "0.001" Then
                            MsgBox ("Can't add a New Code Here.......Manually Renumber")
                            Selection.Delete Shift:=xlUp
                            
                        Else
                            ActiveCell.Rows.Cells(1, 2).Value = Pre & CStr(Format((CDbl("." & Suf) + (Space / 2)), "#.000"))
                        End If
                    Else
                        ActiveCell.Rows.Cells(1, 2).Value = Pre & "." & CStr(CDbl(Suf) + 100)
                    End If
                
                '   prefixes match
                Else
                    '   check to see if next suffix is numeric
                    If IsNumeric(NextSuf) Then
                        
                        '   check to see if new next suffix = 0 since we can't handle that
                        If "0" = NextSuf Then
                            MsgBox ("I don't know how to insert a new code since the end of the next code is a zero!")
                            Selection.Delete Shift:=xlUp
                        '   set our new suffix to be 1/2 of the distance to the next suffix
                        Else
                            Space = CDbl("." & NextSuf) - CDbl("." & Suf)
                            If CStr(Space) = "0.001" Then
                                MsgBox ("Can't add a New Code Here.......Manually Renumber")
                                Selection.Delete Shift:=xlUp
                            Else
                                ActiveCell.Rows.Cells(1, 2).Value = Pre & CStr(Format((CDbl("." & Suf) + (Space / 2)), "#.000"))
                            End If
                        End If
                    
                    '   if next suffix is NOT numeric
                    Else
                        ActiveCell.Rows.Cells(1, 2).Value = MatCode & ".1"
                    End If
                End If
            End If
        End If
    End If
End If
GoTo 10:
errExit:
MsgBox ("There was an Error Copying the line, please check your spreadsheet")
10:
Application.ScreenUpdating = True
End Sub
Public Function GetPart(Code As String, Divisor As String, Optional Side As String) As String
On Error GoTo errExit

Dim Pos As Integer
If InStrRev(Code, Divisor, Len(Code)) <> 0 Then
    Pos = Len(Code) + 1 - InStrRev(Code, Divisor, Len(Code))
Else
    Pos = 0
End If

If Pos > 1 Then
    If Side = "R" Then
        GetPart = Mid(Code, ((Len(Code) + 1) - (Pos)) + 1, 1000)
    Else
        GetPart = Mid(Code, 1, ((Len(Code) + 1) - (Pos)) - 1)
    End If
Else
    If Pos = 1 Then
        If Side = "R" Then
            GetPart = ""
        Else
            GetPart = Mid(Code, 1, ((Len(Code) + 1) - (Pos)) - 1)
        End If
    Else
        If Side = "L" Then
            GetPart = Code
        Else
            GetPart = "Not Found"
        End If
    End If
End If

GoTo 10:
errExit:
10:
End Function





'   Opens Phase or Cost Type List
Sub OpenList()
On Error GoTo errExit
Dim Col As Integer
Dim RCol As Integer
Dim i As Integer
Dim Toggle As Boolean
Dim FirstCTCol As Integer
Dim CTColSpacing As Integer
Dim CTColOffset As Integer
Dim NumCt As Integer
Dim Recap As Range
Dim FirstRow As Integer
Dim LastRow As Integer
Dim Col0 As Range
Dim Col1 As Range
Dim Col2 As Range
Dim Col3 As Range
Dim Col4 As Range
Dim Col5 As Range
Dim Col6 As Range


'If FindIntersect(Range(ActiveCell.Address), Range("MatCode1")) = "Yes" Then
    Call OpenHQMTList
    GoTo 10
'End If


10:
errExit:
End Sub


Public Sub OpenHQMTList()
'On Error GoTo errExit
Set PRange = ActiveCell
If MaterialCodes0.Visible = True Then
    If MaterialCodes1.Visible = True Then
        MaterialCodes2.Show
    Else
        MaterialCodes1.Show
    End If
Else
    MaterialCodes0.Show
End If

errExit:
End Sub

Sub OpenMatList()
On Error GoTo errExit
Dim Col As Integer
Dim RCol As Integer
Dim i As Integer
Dim Toggle As Boolean
Dim FirstCTCol As Integer
Dim CTColSpacing As Integer
Dim CTColOffset As Integer
Dim NumCt As Integer
Dim Recap As Range
Dim FirstRow As Integer
Dim LastRow As Integer
Dim Col0 As Range
Dim Col1 As Range
Dim Col2 As Range
Dim Col3 As Range
Dim Col4 As Range
Dim Col5 As Range
Dim Col6 As Range


'If FindIntersect(Range(ActiveCell.Address), Range("MatCode1")) = "Yes" Then
    Call OpenHQMTMatList
    GoTo 10
'End If


10:
errExit:
End Sub

Public Sub OpenHQMTMatList()
'On Error GoTo errExit
Set PRange = ActiveCell
    MaterialForm.Show

errExit:
End Sub

Public Function PadString(Str As String, Padto As Integer, Side As String) As String
Dim PadStr As String
On Error GoTo errExit
PadStr = Str

For i = 1 To Padto - Len(Str)

    If Side = "L" Then
        PadStr = " " & PadStr
    End If

    If Side = "R" Then
        PadStr = PadStr & " "
    End If

Next

PadString = PadStr
errExit:
End Function


'   finds if ranges intersect with one another
Public Function FindIntersect(Target As Range, rng1 As Range, Optional rng2 As Range, Optional rng3 As Range, Optional rng4 As Range, Optional rng5 As Range, Optional rng6 As Range, Optional rng7 As Range)
On Error GoTo errExit
If rng2 Is Nothing Then Set rng2 = rng1
If rng3 Is Nothing Then Set rng3 = rng1
If rng4 Is Nothing Then Set rng4 = rng1
If rng5 Is Nothing Then Set rng5 = rng1
If rng6 Is Nothing Then Set rng6 = rng1
If rng7 Is Nothing Then Set rng7 = rng1

If Application.Intersect(Target, Union(rng1, rng2, rng3, rng4, rng5, rng6, rng7)) Is Nothing Then
FindIntersect = "No"
Else
FindIntersect = "Yes"
End If

errExit:
End Function




'   pass the column letter and returns the number of the column
Function ColLetToNum(InputLetter As String) As Integer

Dim OutputNumber As Integer
Dim Leng As Integer
Dim i As Integer
On Error GoTo errExit
Leng = Len(InputLetter)
OutputNumber = 0

For i = 1 To Leng
   OutputNumber = (Asc(UCase(Mid(InputLetter, i, 1))) - 64) + OutputNumber * 26
Next i

ColLetToNum = OutputNumber  'Output the corresponding number
errExit:
End Function

Sub AddMaterial()
AddMaterialForm.Show
End Sub

Sub PhaseCodes()
Phase_Code_Form.Show
End Sub


Attribute VB_Name = "Module2"
Option Explicit

'Sub Macro1()
''
'' Macro1 Macro
''
'
''
'    Range("E9").Select
'    Selection.FormatConditions.Add Type:=xlExpression, Formula1:= _
'        "=IsFormula(E9)=FALSE"
'    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
'    With Selection.FormatConditions(1).Interior
'        .Pattern = xlLightUp
'        .PatternColor = 15768830
'        .ColorIndex = xlAutomatic
'        .PatternTintAndShade = 0
'    End With
'    Selection.FormatConditions(1).StopIfTrue = False
'End Sub

'macro to check formulas for inconsistent formula or no formula on Requisition sheet
Sub Formula_Ck_Requisition()
Const TEST_COLUMN As String = "E"
    Dim LastRow As Long
    Dim cell As Range
    
    Formula_Ck_Click
     
    With ActiveSheet.Name
        'LastRow = .Cells(.Rows.Count, TEST_COLUMN).End(xlUp).Row
        LastRow = GetFilteredRangeBottomRow
        For Each cell In Range("E14:E" & LastRow)
        'Highlighting columns E,G,H,J & K for inconsistent formula or no formula
            If cell.Errors(xlInconsistentFormula).Value Or cell.HasFormula = False Then
                cell.Interior.Pattern = xlLightUp
                cell.Interior.PatternColor = 15768830
                cell.Interior.ColorIndex = xlAutomatic
                cell.Interior.PatternTintAndShade = 0
            End If
            If cell.Offset(, 2).Errors(xlInconsistentFormula).Value Or cell.Offset(, 2).HasFormula = False Then
                cell.Offset(, 2).Interior.Pattern = xlLightUp
                cell.Offset(, 2).Interior.PatternColor = 15768830
                cell.Offset(, 2).Interior.ColorIndex = xlAutomatic
                cell.Offset(, 2).Interior.PatternTintAndShade = 0
            End If
            If cell.Offset(, 3).Errors(xlInconsistentFormula).Value Or cell.Offset(, 3).HasFormula = False Then
                cell.Offset(, 3).Interior.Pattern = xlLightUp
                cell.Offset(, 3).Interior.PatternColor = 15768830
                cell.Offset(, 3).Interior.ColorIndex = xlAutomatic
                cell.Offset(, 3).Interior.PatternTintAndShade = 0
            End If
            If cell.Offset(, 5).Errors(xlInconsistentFormula).Value Or cell.Offset(, 5).HasFormula = False Then
                cell.Offset(, 5).Interior.Pattern = xlLightUp
                cell.Offset(, 5).Interior.PatternColor = 15768830
                cell.Offset(, 5).Interior.ColorIndex = xlAutomatic
                cell.Offset(, 5).Interior.PatternTintAndShade = 0
            End If
            If cell.Offset(, 6).Errors(xlInconsistentFormula).Value Or cell.Offset(, 6).HasFormula = False Then
                cell.Offset(, 6).Interior.Pattern = xlLightUp
                cell.Offset(, 6).Interior.PatternColor = 15768830
                cell.Offset(, 6).Interior.ColorIndex = xlAutomatic
                cell.Offset(, 6).Interior.PatternTintAndShade = 0
            End If
        Next cell
    End With
End Sub


Private Sub Formula_Ck_Click()
 Range("L5").Value = Now
 End Sub
 
 Function GetFilteredRangeBottomRow() As Long
  Dim HeaderRow As Long, LastFilterRow As Long, Addresses() As String
  On Error GoTo NoFilterOnSheet
  With ActiveSheet
    HeaderRow = .AutoFilter.Range(1).Row
    LastFilterRow = .Range(Split(.AutoFilter.Range.Address, ":")(1)).Row
    Addresses = Split(.Range((HeaderRow + 1) & ":" & LastFilterRow). _
                      SpecialCells(xlCellTypeVisible).Address, "$")
    GetFilteredRangeBottomRow = Addresses(UBound(Addresses))
  End With
NoFilterOnSheet:
End Function
'***************************************************************


 
 
Attribute VB_Name = "Module3"
Sub Reset_Form()
Attribute Reset_Form.VB_ProcData.VB_Invoke_Func = " \n14"

Dim resetform As Double
    resetform = MsgBox("This will remove all data from the form.  Are you sure you wish to proceed?", vbQuestion + vbYesNo)
        
        If resetform = vbYes Then
        SheetUnprotect_Auto
        Range("C18:Z18").Select
        Application.CutCopyMode = False
        Selection.Copy
        Range("C20:Z1498").Select
        Range("Z1498").Activate
        ActiveSheet.Paste
        Range("D5:E5,D6:E6,D7:E7,D8:E8,D9:F9,D10:E10,D11:E11,H5,H6,H7,H9,H10,H11,K2,I6:K9").Select
        Range("I6").Activate
        Selection.ClearContents
        Range("H8,G9").Select
        Range("H9").Activate
        Selection.ClearContents
        Range("B20").Select
        Range("J13") = 0
        Range("J14") = 0
        Range("J11") = 0
        'ProtectSheet
        End If
        If resetform = vbNo Then
        End If
End Sub
Sub Reset_Material()
    Dim resetform2 As Double
    resetform2 = MsgBox("This will remove all material data from the form.  Are you sure you wish to proceed?", vbQuestion + vbYesNo)
        
        If resetform2 = vbYes Then
        'SheetUnprotect_Auto
        Range("D5:E5").Select
        Range("E5").Activate
        Selection.ClearContents
        Range("C18:Z18").Select
        Application.CutCopyMode = False
        Selection.Copy
        Range("C20:Z1498").Select
        Range("Z1498").Activate
        ActiveSheet.Paste
        Application.CutCopyMode = False
        Range("B20").Select
        Range("J13") = 0
        Range("J14") = 0
        Range("J11") = 0
        'ProtectSheet
        End If
        If resetform2 = vbNo Then
        End If
End Sub
Private Sub CommandButton1_Click()
Dim strSearch As String
 Dim i As Long
 Dim iContinueSearch As Integer
 Dim Filecount As Variant
 
btnClearAll_Click
TextBox1.Value = ""

 strSearch = UCase("*" & TextBox2.Value & "*")

 With Me.ListBox1
 
 If .ListCount > 0 Then
    For i = 0 To .ListCount - 2
        If .Column(0, i) Like strSearch Then
            .Selected(i) = True
            .ListIndex = i + (.Height / 15)
            iContinueSearch = MsgBox("Find Next?", vbQuestion + vbYesNo)
            If iContinueSearch = vbYes Then
               .Selected(i) = False
            End If
            If iContinueSearch = vbNo Then
                Exit For
            End If
        End If
    Next i
    
 End If
 End With
End Sub



Sub Macro4()
Attribute Macro4.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro4 Macro
'

'
    Range("D5:F5,D6:F6,D7:F7,D8:F8,D9:F9,D10:F10,H5,H6,H7,H8,H9,J2,I6:K9").Select
    Range("I6").Activate
End Sub
'Hide all unnecessary worksheets
Sub HideWorkSheet()

 Sheets("Database").Visible = xlVeryHidden
 Sheets("Notes").Visible = xlVeryHidden
 Sheets("VP Items").Visible = xlVeryHidden
 Sheets("VP Phases").Visible = xlVeryHidden
 Sheets("VP Cost Types").Visible = xlVeryHidden
 Sheets("VP Materials").Visible = xlVeryHidden
 Sheets("SETUP").Visible = xlVeryHidden
 Sheets("Material_Cat").Visible = xlVeryHidden
 Sheets("Ranges").Visible = xlVeryHidden
 Sheets("Tax Codes").Visible = xlVeryHidden
 Sheets("Version").Visible = xlVeryHidden

 End Sub
'Unhide all unnecessary worksheets
Sub UnHideWorkSheet()

 'Sheets("VP Cost Types").Visible = True
 Sheets("Database").Visible = True
 Sheets("Material_Cat").Visible = True
' Sheets("Ranges").Visible = True
' Sheets("Notes").Visible = True
' Sheets("VP Items").Visible = True
' Sheets("VP Phases").Visible = True
' Sheets("VP Cost Types").Visible = True
' Sheets("VP Materials").Visible = True
 'Sheets("SETUP").Visible = True
 Sheets("Tax Codes").Visible = True
 Sheets("Version").Visible = True
 End Sub
 
'Sub UnlockSheets_Click()
'Dim pwd As String
'pwd = "test"
' If InputBox("Enter Password", "Password") <> pwd Then
'    MsgBox ("Incorrect Password!")
'    Exit Sub
' Else
'    UnHideWorkSheet
' End If
'End Sub

Sub NewPhaseCode()
Dim ans As String, lr As Long
ans = InputBox("Enter New Phase Code", "Data Entry Form")
If ans = "" Then
    Exit Sub
Else
    lr = Sheets("Database").Range("T" & Rows.Count).End(xlUp).Row + 1
    Sheets("Database").Range("T" & lr).Value = ans
End If
End Sub

Sub NewMaterialCode()
Dim ans As String, lr As Long
Dim myRow As Long
Dim i As Integer, intValueToFind As Integer
ans = InputBox("Enter New Material Code", "Data Entry Form")
If ans = "" Then
    Exit Sub
Else
    lr = Sheets("Database").Range("B" & Rows.Count).End(xlUp).Row + 1
    Sheets("Database").Range("B" & lr).Value = ans
End If
End Sub



Sub NewItemName()
Dim ans As String, lr As Long
ans = InputBox("Enter New Item Name", "Data Entry Form")
If ans = "" Then
    Exit Sub
Else
    lr = Sheets("Database").Range("C" & Rows.Count).End(xlUp).Row + 1
    Sheets("Database").Range("C" & lr).Value = ans
End If
End Sub

Sub NewMaterialCat()
Dim ans As String, lr As Long
ans = InputBox("Material Category Number", "Data Entry Form")
If ans = "" Then
    Exit Sub
Else
    lr = Sheets("Database").Range("S" & Rows.Count).End(xlUp).Row + 1
    Sheets("Database").Range("S" & lr).Value = ans
End If
End Sub

Sub NewUnit()
Dim ans As String, lr As Long
ans = InputBox("Unit Type", "Data Entry Form")
If ans = "" Then
    Exit Sub
Else
    lr = Sheets("Database").Range("G" & Rows.Count).End(xlUp).Row + 1
    Sheets("Database").Range("G" & lr).Value = ans
End If
End Sub

Sub NewMaterialEntry()
AddMaterialForm.Show
End Sub

Sub ProtectSheet()
ActiveSheet.Protect
End Sub

'Sub UnProtectSheet()
'Dim pwd As String
'pwd = "test"
' If InputBox("Enter Password", "Password") <> pwd Then
'    MsgBox ("Incorrect Password!")
'    Exit Sub
' Else
'    ActiveSheet.Unprotect
' End If
'
'End Sub

Sub UnprotectSheet()
SheetUnprotect
End Sub

Sub UnlockSheets_Click()
WorksheetUnhide
End Sub
Sub ShowVersion()
   l = MsgBox("Current Version is " & Range("Version!A5").Value & "      Updated: " & Range("Version!b5").Value, vbOKOnly, "Viewpoint Requisition Version")
End Sub
Attribute VB_Name = "Module4"
Option Explicit
 
 'Code in this module is used to mask password characters in input boxes
 'API functions to be used
Private Declare Function CallNextHookEx _
Lib "user32" ( _
ByVal hHook As Long, _
ByVal ncode As Long, _
ByVal wParam As Long, _
lParam As Any) _
As Long
 
Private Declare Function GetModuleHandle _
Lib "kernel32" _
Alias "GetModuleHandleA" ( _
ByVal lpModuleName As String) _
As Long
 
Private Declare Function SetWindowsHookEx _
Lib "user32" _
Alias "SetWindowsHookExA" ( _
ByVal idHook As Long, _
ByVal lpfn As Long, _
ByVal hmod As Long, _
ByVal dwThreadId As Long) _
As Long
 
Private Declare Function UnhookWindowsHookEx _
Lib "user32" ( _
ByVal hHook As Long) _
As Long
 
Private Declare Function SendDlgItemMessage _
Lib "user32" Alias "SendDlgItemMessageA" ( _
ByVal hDlg As Long, _
ByVal nIDDlgItem As Long, _
ByVal wMsg As Long, _
ByVal wParam As Long, _
ByVal lParam As Long) _
As Long
 
Private Declare Function GetClassName _
Lib "user32" _
Alias "GetClassNameA" ( _
ByVal hWnd As Long, _
ByVal lpClassName As String, _
ByVal nMaxCount As Long) _
As Long
 
Private Declare Function GetCurrentThreadId _
Lib "kernel32" () _
As Long
 
 'Constants to be used in our API functions
Private Const EM_SETPASSWORDCHAR = &HCC
Private Const WH_CBT = 5
Private Const HCBT_ACTIVATE = 5
Private Const HC_ACTION = 0
 
Private hHook As Long
 
Public Function NewProc(ByVal lngCode As Long, _
    ByVal wParam As Long, _
    ByVal lParam As Long) As Long
     
    Dim RetVal
    Dim strClassName As String, lngBuffer As Long
     
    If lngCode < HC_ACTION Then
        NewProc = CallNextHookEx(hHook, lngCode, wParam, lParam)
        Exit Function
    End If
     
    strClassName = String$(256, " ")
    lngBuffer = 255
     
    If lngCode = HCBT_ACTIVATE Then 'A window has been activated
        RetVal = GetClassName(wParam, strClassName, lngBuffer)
        If Left$(strClassName, RetVal) = "#32770" Then 'Class name of the Inputbox
             'This changes the edit control so that it display the password character *.
             'You can change the Asc("*") as you please.
            SendDlgItemMessage wParam, &H1324, EM_SETPASSWORDCHAR, Asc("*"), &H0
        End If
    End If
     
     'This line will ensure that any other hooks that may be in place are
     'called correctly.
    CallNextHookEx hHook, lngCode, wParam, lParam
     
End Function
 
 '// Make it public = avail to ALL Modules
 '// Lets simulate the VBA Input Function
Public Function InputBoxDK(Prompt As String, Optional Title As String, _
    Optional Default As String, _
    Optional Xpos As Long, _
    Optional Ypos As Long, _
    Optional Helpfile As String, _
    Optional Context As Long) As String
     
    Dim lngModHwnd As Long, lngThreadID As Long
     
     '// Lets handle any Errors JIC! due to HookProc> App hang!
    On Error GoTo ExitProperly
    lngThreadID = GetCurrentThreadId
    lngModHwnd = GetModuleHandle(vbNullString)
     
    hHook = SetWindowsHookEx(WH_CBT, AddressOf NewProc, lngModHwnd, lngThreadID)
    If Xpos Then
        InputBoxDK = InputBox(Prompt, Title, Default, Xpos, Ypos, Helpfile, Context)
    Else
        InputBoxDK = InputBox(Prompt, Title, Default, , , Helpfile, Context)
    End If
     
ExitProperly:
    UnhookWindowsHookEx hHook
     
End Function
 
Sub SheetUnprotect()
    Dim x
    x = InputBoxDK("Type your password here.", "Password Required")
    If x = "" Then End
    If x <> "VPReq" Then
        MsgBox "Incorrect Password!"
        End
    End If
    ActiveSheet.Unprotect
    MsgBox "Sheet Unlocked", vbInformation
     
End Sub

Sub SheetUnprotect_Auto()

    ActiveSheet.Unprotect

     
End Sub

Sub WorksheetUnhide()
    Dim x
    x = InputBoxDK("Type your password here.", "Password Required")
    If x = "" Then End
    If x <> "VPReq_WS" Then
        MsgBox "Incorrect Password!"
        End
    End If
    UnHideWorkSheet
    MsgBox "Worksheets Revealed", vbInformation
     
End Sub

Attribute VB_Name = "Module5"
Sub Macro1()
Attribute Macro1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro1 Macro
'

'
    Rows("14:14").Select
    Selection.Copy
    Rows("15:1539").Select
    Selection.Paste
    Range("K1534").Select

End Sub
Sub Macro2()
Attribute Macro2.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro2 Macro
'


    Range("A14:Z14").Select
    Application.CutCopyMode = False
    Selection.Copy
    Range("A15:Z1539").Select
    Range("Z1539").Activate
    ActiveSheet.Paste
    Range("N27").Select
    Application.CutCopyMode = False
    Range("G20").Select
    ActiveWindow.SmallScroll Down:=-30
    Rows("14:14").Select
    Selection.EntireRow.Hidden = True
    Range("G15").Select
    ActiveCell.FormulaR1C1 = "asdf"
    Range("F21").Select
    ActiveCell.FormulaR1C1 = "sdf"
    Range("F29:G30").Select
    ActiveCell.FormulaR1C1 = "asdf"
    Range("E25:E26").Select
    ActiveCell.FormulaR1C1 = "asdf"
    Range("G39").Select
    ActiveCell.FormulaR1C1 = "asdf"
    Range("E33").Select
    ActiveCell.FormulaR1C1 = "asdf"
    Range("G30").Select
End Sub
Attribute VB_Name = "Module6"
Sub ListboxRange()
Attribute ListboxRange.VB_ProcData.VB_Invoke_Func = " \n14"
'
' ListboxRange Macro
'

'
    Sheets("Material_Cat").Select
    Columns("B:E").Select
End Sub
Attribute VB_Name = "Module7"
Sub PrintAllPagesAndChangeLastPageFooter()
    
    Dim Totalpages, Page As Long
    
    Totalpages = Application.ExecuteExcel4Macro("GET.DOCUMENT(50)")
    For Page = 1 To Totalpages
        If Page = Totalpages Then
        'This is the last page footer text
        ActiveSheet.PageSetup.LeftFooter = "Printed on: &D  &T"
        ActiveSheet.PageSetup.CenterFooter = "&P of " & Totalpages
        ActiveSheet.PageSetup.RightFooter = "Signature ___________________"
        End If
        ActiveSheet.PrintPreview
        'ActiveSheet.PrintOut from:=Page, To:=Page, _
                             Copies:=1, Collate:=True
    Next
    
End Sub

Attribute VB_Name = "Module9"



'
' GNP Macro
' Macro recorded 6/1/95 by MMR
'
' Keyboard Shortcut: Ctrl+E
'
Sub GNP()
Attribute GNP.VB_Description = "Macro recorded 6/1/95 by MMR"
Attribute GNP.VB_ProcData.VB_Invoke_Func = "E\n0"
    Sheets("GN PN").Select
    ActiveCell.Select
End Sub
'
' GNELT Macro
' Macro recorded 6/1/95 by MMR
'
' Keyboard Shortcut: Ctrl+W
'
Sub GNELT()
Attribute GNELT.VB_Description = "Macro recorded 6/1/95 by MMR"
Attribute GNELT.VB_ProcData.VB_Invoke_Func = "W\n0"
    Sheets("GN  EL. TECH").Select
    ActiveCell.Select
End Sub
'
' GNPT Macro
' Macro recorded 6/1/95 by MMR
'
' Keyboard Shortcut: Ctrl+R
'
Sub GNPT()
Attribute GNPT.VB_Description = "Macro recorded 6/1/95 by MMR"
Attribute GNPT.VB_ProcData.VB_Invoke_Func = "R\n0"
    Sheets("GN PN TECH").Select
    ActiveCell.Offset(0, 0).Range("A1").Select
End Sub
'
' GNEL Macro
' Macro recorded 6/1/95 by MMR
'
' Keyboard Shortcut: Ctrl+Q
'
Sub GNEL()
Attribute GNEL.VB_Description = "Macro recorded 6/1/95 by MMR"
Attribute GNEL.VB_ProcData.VB_Invoke_Func = "Q\n0"
    Sheets("GN ELEC").Select
    ActiveCell.Offset(0, 0).Range("A1").Select
End Sub
'
' PRINTER Macro
' Macro recorded 6/1/95 by MMR
'
' Keyboard Shortcut: Ctrl+P
'
Sub PRINTER()
Attribute PRINTER.VB_Description = "Macro recorded 6/1/95 by MMR"
Attribute PRINTER.VB_ProcData.VB_Invoke_Func = "P\n0"
    Sheets(Array("BID INFO", "LABOR", "RATES", "SUMM", "STAFF", "EQUIP", "EXPENSE" _
        , "RECAP", "NOTES")).Select
    Sheets("BID INFO").Activate
End Sub
Attribute VB_Name = "Phase_Code_Form"
Attribute VB_Base = "0{2098BAFA-A6DD-4997-9135-F108D5510D10}{FFB464A9-67B2-4D94-B0F7-D5D90AC0CEBA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private words As Variant
Private MyRange As Variant
Private ActRange As Range
Dim moResizer As New CFormResizer

Private Sub UserForm_Initialize()
     Dim cell As Range
     Dim rng As Range
     
     With ListBox1
        .ColumnCount = 2
        .ColumnWidths = "40;200"
     End With

     With ThisWorkbook.Sheets("SETUP")
         Set rng = .Range("A1", .Range("A1").End(xlDown))
     End With

     For Each cell In rng.Cells
         With Me.ListBox1
             .AddItem cell.Value
             .List(.ListCount - 1, 1) = cell.Offset(0, 1).Value
             .List(.ListCount - 1, 2) = cell.Offset(0, 2).Value
         End With
     Next cell

Me.Top = Form1y
Me.Left = Form1x

End Sub

Private Sub btnClose_Click()
    Unload Me
End Sub

Private Sub UserForm_Resize()
    moResizer.FormResize
End Sub

Private Sub UserForm_Activate()
Set PRange = ActiveCell
Set moResizer.Form = Me
End Sub


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
Application.OnKey "{F6}", "OpenList"
Application.OnKey "{F5}", "InsertRow"
End Sub

Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Private Sub Worksheet_Change(ByVal Target As Range)
'On Error GoTo errExit:
''If Target.Value <> "" Then
''    If Target.Cells.Count < 2 Then
''        If IsPhase(1) = True Then
''            Application.EnableEvents = False
''            Target = FormatPhase(Target.Value)
''        End If
''
''    Else
''        For Each Cell In Target.Cells
''            If IsPhase(1) = True Then
''                Application.EnableEvents = False
''                Target = FormatPhase(Target.Value)
''        End If
''
''        Next
''
''
''    End If
''End If
'errExit:
'Application.EnableEvents = True
'
'End Sub

Private Sub Worksheet_Activate()
Application.OnKey "{F6}", "OpenList"
Application.OnKey "{F5}", "InsertRow"
Application.OnKey "+^{A}", "NewMaterialEntry"
End Sub



'Private Sub Worksheet_SelectionChange(ByVal Target As Range)
'Application.CalculateFullRebuild
'End Sub

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet41"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet81"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public Err As Integer

Private Sub Workbook_BeforeClose(Cancel As Boolean)
Application.OnKey "{F6}", ""
Application.OnKey "{F5}", ""
Application.OnKey "+^{A}", ""
Worksheets("Notes").Activate
HideWorkSheet
'MsgBox ("Bye")
End Sub


Private Sub Workbook_Open()
'On Error GoTo errExit:
'MsgBox ("Hi")
Application.OnKey "{F6}", "OpenList"
Application.OnKey "{F5}", "InsertRow"
Application.OnKey "+^{A}", "NewMaterialEntry"
DoCalc = True
Application.CalculateFullRebuild
'errExit:
End Sub


Public Sub UpdateExportTabs()
Application.ScreenUpdating = False

Const DELIMITER As String = ","
Dim RecapName As String
Dim CISheetName As String
Dim ws As Excel.Worksheet

Dim DetShtPre As String
Dim CTLine As Long
Dim PLine As Long
Dim SubLine As Long
Dim MatLine As Long

CTLine = 4
PLine = 4
SubLine = 4
MatLine = 4
    
For Each ws In ActiveWorkbook.Worksheets
    ws.Unprotect
Next ws

RecapName = "Database"
'DetShtPre = Worksheets("Settings").Range("DetailSheetPrefix").Value
'CISheetName = Worksheets("Settings").Range("ContractItemsSheetName").Value
Err = 1
Call CopyFields(RecapName, CTLine, PLine, SubLine, MatLine)
If Err <> 1 Then
    GoTo 999
End If
'Call CopyFields(DetShtPre, CTLine, PLine, SubLine, MatLine)
'Call CopySOV(CISheetName, RecapName)
If MsgBox("Create Export File?", vbYesNo, "Create Export File?") = vbYes Then
Call CreateExportFile
End If
'If Worksheets("Settings").Range("Protect").Value = "Yes" Then
'    For Each ws In ActiveWorkbook.Worksheets
'        ws.Protect "", AllowFormattingColumns:=True, AllowFormattingCells:=True, AllowFormattingRows:=True, AllowInsertingRows:=True, AllowDeletingRows:=True
'    Next ws
'End If
999:
Application.ScreenUpdating = True
End Sub


Public Sub CreateExportFile()
Application.ScreenUpdating = False

Const DELIMITER As String = ","
Dim myTab As Excel.Worksheet
Dim myRecord As Range
Dim myField As Range
Dim nFileNum As Long
Dim sOut As String
nFileNum = FreeFile
Dim myFile As String
Dim RecapName As String
Dim CISheetName As String
Dim ws As Excel.Worksheet

Dim DetShtPre As String
Dim CTLine As Long
Dim PLine As Long
Dim SubLine As Long
Dim MatLine As Long

CTLine = 4
PLine = 4
SubLine = 4
MatLine = 4
    
For Each ws In ActiveWorkbook.Worksheets
    ws.Unprotect
Next ws

'RecapName = Worksheets("Settings").Range("RecapSheetName").Value
'DetShtPre = Worksheets("Settings").Range("DetailSheetPrefix").Value
'CISheetName = Worksheets("Settings").Range("ContractItemsSheetName").Value

myFile = ThisWorkbook.Path & "\" & ThisWorkbook.Name
myFile = Left(myFile, Len(myFile) - 4) & " - " & Format(Now(), "yyyymmddHhNnSs") & ".csv"
'Worksheets("VP Project").Range("A4") = "6"

If Dir(myFile) = "" Then
    Open myFile For Output As #nFileNum
        For Each myTab In ThisWorkbook.Worksheets
            If myTab.Name = "VP Project" Or myTab.Name = "VP Phases" Or myTab.Name = "VP Items" Or myTab.Name = "VP Cost Types" _
            Or myTab.Name = "VP Materials" Then
                For Each myRecord In myTab.Range("A1:A" & myTab.Range("A" & myTab.Rows.Count).End(xlUp).Row)
                    If Left(CStr(myRecord(1, 1)), 2) <> "**" Then
                        With myRecord
                            For Each myField In myTab.Range(.Cells(1), _
                                myTab.Cells(.Row, myTab.Columns.Count).End(xlToLeft))
                                 If myField.Column = 26 Then
                                    If myField.Value = 0 Then
                                        tstr = ""
                                    Else
                                         tstr = Replace(myField.Value, Chr(10), "")
                                    End If
                                Else
                                   tstr = Replace(myField.Value, Chr(10), "")
                                End If
                                sOut = sOut & DELIMITER & Replace(tstr, ",", " - ")
                            Next myField
                        Print #nFileNum, Mid(sOut, 2)
                        sOut = Empty
                        End With
                    End If
                Next myRecord
            End If
        Next
    Close #nFileNum
    Application.ScreenUpdating = True
    Shell "explorer /select," & myFile, vbNormalFocus
Else
    MsgBox myFile & " Already Exists!" & vbNewLine & vbNewLine & _
    "Click OK and you will be directed to the folder where the file exists...", vbInformation, "   You Must Delete The Existing File!"
    Shell "Explorer.exe /n /e," & ThisWorkbook.Path, vbNormalFocus
    
End If


Application.ScreenUpdating = True
End Sub




Public Sub CopyFields(ByRef RecapName As String, ByRef CTLine As Long, ByRef PLine As Long, ByRef SubLine As Long, ByRef MatLine As Long)
Dim myTab As Excel.Worksheet
Dim MyRange As Range
Dim PhaseCodeRange As Range
Dim MatCatRange As Range
Dim myRow As Range
Dim MyCell As Range

'Dim PMaster As Range
Dim Pt1 As Integer
Dim Pt2 As String
Dim Pt3 As Integer
Dim Pt4 As String
Dim Pt5 As Integer
Dim Pt6 As String
Dim Pt7 As Integer
Dim Project As String
Dim CItem As String
Dim Phase As String
Dim ColPhase As String
Dim ColPhaseDesc As String
Dim PhaseDesc As String
Dim CT As Integer
Dim Units As Double
Dim UOM As String
Dim Price As Double
Dim Amount As Double
Dim LT As String
Dim NumCt As Integer
Dim CTRow As Integer
Dim PhaseRow As Integer
Dim SubRow As Integer
Dim MatRow As Integer
Dim LastRow As Integer
Dim CurPhase As String
Dim FirstCTCol As Integer
Dim PhaseCol As Integer
Dim PhaseDescCol As Integer
Dim MatDesc As String
Dim PhaseDescSubCol As Integer
Dim LastPhaseUOM As String
Dim LastPhaseCItem As String
Dim SupressWarnings As String
Dim RowTotalAmt As Double
Dim CTColSpacing As Integer
Dim LaborCT As Integer
Dim LabBurCT As Integer
Dim EquipCT As Integer
Dim MatCT As Integer
Dim Material As String
Dim MatSecDesc As String
Dim MatCat As String
Dim AltMat As String
Dim ECM As String
Dim TaxCode As String


Dim ValidationMessage As String


Dim ModelNum As String

'Dim PMFormated As Range
Dim VPCTRow As Integer
Dim ws As Worksheet
SupressWarnings = "No"
MatRow = 4

TaxCode = Worksheets("Requisition").Range("J11").Value
'Set MyRange = Range("ReqItems")

'If RecapName <> "" Then

    Set MatCatRange = Range("MatCategories")

    For Each myTab In ThisWorkbook.Worksheets
        
        If myTab.Name = "Requisition" Then
                        
            Worksheets("VP Materials").Range("A4:X2000").ClearContents
            Set MyRange = Range("ReqItems")
            
            For Each myRow In MyRange.Rows
                On Error GoTo 123:
                    
                With myRow.Cells
        
                    LT = "3"
                    
                        PhaseCol = 2
                        
                        RowTotalCol = 5
                                   
                        Dim pcRow As Range
                        
                        Phase = CStr(myRow.Cells(1, 2))
                        
                        Set PhaseCodeRange = Worksheets("SETUP").Range("Phase_Codes")
                        For Each pcRow In PhaseCodeRange.Rows
                            If pcRow.Cells(1, 1) = myRow.Cells(1, 2) Then
                                CT = CInt(pcRow.Cells(1, 3))
                            End If
                        Next pcRow
                        '   read data from recap rows
                        Phase = CStr(myRow.Cells(1, 2))
                        MatDesc = CStr(myRow.Cells(1, 7))
                        Units = myRow.Cells(1, 6)
                        Price = CDbl(myRow.Cells(1, 8))
                        UOM = CStr(myRow.Cells(1, 5))
                        RowTotalAmt = CDbl(myRow.Cells(1, 10))
                        ECM = CStr(myRow.Cells(1, 9))
                        
                        If InStr(1, CStr(myRow.Cells(1, 3)), ".") = 0 And CStr(myRow.Cells(1, 7)) = CStr(myRow.Cells(1, 16)) Then
                            Material = CStr(myRow.Cells(1, 3))
                            AltMat = ""
                        Else
                            Material = ""
                            AltMat = CStr(myRow.Cells(1, 3))
                        End If
                        
                        MatCat = CStr(myRow.Cells(1, 4))
                        
                        
                        
                        'MatSecDesc = CStr(myRow.Cells(1, 7))
                        
                        'If MatSecDesc = "0" Then
                        'MatSecDesc = ""
                        'End If
                    
                    ' Squawk if they try to apply a quantity to an LS record
                    If myRow.Cells(1, 7) <> "" And myRow.Cells(1, 5) = "LS" And myRow.Cells(1, 6) <> 0 Then
                            MsgBox "Quantity must be zero for LS line on row " & myRow.Row, vbExclamation, "Material Category Error"
                            Err = 0
                            GoTo 999
                    End If
                    
                    '   if there is a total amount on the row then process data to VP tabs
                    If myRow.Cells(1, 7) <> "" And (CDbl(myRow.Cells(1, 6)) > 0 Or (myRow.Cells(1, 5) = "LS" And CDbl(myRow.Cells(1, 6)) = 0)) Then
                        
                        ' Validating material category
                        ValidationMessage = ValidateValueAgainstRange(MatCat, "MatCategories", "Material Category", myRow.Row)
                        If IsNull(ValidationMessage) = False And ValidationMessage <> "" Then
                            MsgBox ValidationMessage, vbExclamation, "Material Category Error"
                            Err = 0
                            GoTo 999
                        End If
                        
                        ' UM
                        ValidationMessage = ValidateValueAgainstRange(UOM, "ValidUM", "UM (Unit of Measure)", myRow.Row)
                        If IsNull(ValidationMessage) = False And ValidationMessage <> "" Then
                            MsgBox ValidationMessage, vbExclamation, "Unit of Measure Error"
                            Err = 0
                            GoTo 999
                        End If
                        
                        ' ECM
                        ValidationMessage = ValidateValueAgainstRange(ECM, "ValidECM", "ECM", myRow.Row)
                        If IsNull(ValidationMessage) = False And ValidationMessage <> "" Then
                            MsgBox ValidationMessage, vbExclamation, "ECM Error"
                            Err = 0
                            GoTo 999
                        End If
                        
                        
                                                    
                                    Worksheets("VP Materials").Range("A" & CStr(MatRow)) = 5
                                    Worksheets("VP Materials").Range("C" & CStr(MatRow)) = "01"
                                    Worksheets("VP Materials").Range("D" & CStr(MatRow)) = Phase
                                    Worksheets("VP Materials").Range("E" & CStr(MatRow)) = CT
                                    Worksheets("VP Materials").Range("J" & CStr(MatRow)) = Material
                                    Worksheets("VP Materials").Range("H" & CStr(MatRow)) = Price
                                    
                                    Worksheets("VP Materials").Range("I" & CStr(MatRow)) = ECM
                                    
                                    'Worksheets("VP Materials").Range("R" & CStr(MatRow)) = ModelNum
                                                                       
                                    If CTUnits <> 0 Then
                                    Worksheets("VP Materials").Range("F" & CStr(MatRow)) = CTUnits
                                    Worksheets("VP Materials").Range("S" & CStr(MatRow)) = CTUnits
                                    'Worksheets("VP Materials").Range("T" & CStr(MatRow)) = RowTotalAmt / CTUnits
                                    Worksheets("VP Materials").Range("G" & CStr(MatRow)) = CTUOM
                                    Else
                                    Worksheets("VP Materials").Range("F" & CStr(MatRow)) = Units
                                    Worksheets("VP Materials").Range("S" & CStr(MatRow)) = Units
                                    Worksheets("VP Materials").Range("T" & CStr(MatRow)) = Price
                                    Worksheets("VP Materials").Range("G" & CStr(MatRow)) = UOM
                                    End If
                                    
                                    
                                    Worksheets("VP Materials").Range("N" & CStr(MatRow)) = RowTotalAmt
                                    Worksheets("VP Materials").Range("U" & CStr(MatRow)) = RowTotalAmt
                                    Worksheets("VP Materials").Range("R" & CStr(MatRow)) = MatDesc

                                    'Worksheets("VP Materials").Range("R" & CStr(MatRow)) = MatSecDesc
                                    Worksheets("VP Materials").Range("W" & CStr(MatRow)) = MatCat
                                    Worksheets("VP Materials").Range("Y" & CStr(MatRow)) = Worksheets("Requisition").Range("K2").Value
                                    Worksheets("VP Materials").Range("V" & CStr(MatRow)) = AltMat
                                    Worksheets("VP Materials").Range("Z" & CStr(MatRow)) = TaxCode
                                    
                                    MatRow = MatRow + 1
123:
                                CTRow = CTRow + 1
                            
                                    
                                    
                    End If
                                                 
                End With

            Next myRow
        End If
    Next
999:
End Sub


Private Function ValidateValueAgainstRange(ByVal testValue As String, ByVal rangeName As String, ByVal valueName As String, ByVal rowNum As Integer) As String
    Dim validRange As Range
    Dim targetRow As Range
    
    ' Verify that there is a value
    If IsNull(testValue) = True Or testValue = "" Then
        ValidateValueAgainstRange = "A " & valueName & " has been left empty.... Please fix!!!!!"
    End If
        
    IsValidValue = False
    
    Set validRange = Range(rangeName)
    
    For Each targetRow In validRange.Rows
        If targetRow.Cells(1, 1) = testValue Then
            IsValidValue = True
            Exit For
        End If
    Next targetRow
    
    If IsValidValue = False Then
        ValidateValueAgainstRange = valueName & "(" & testValue & ") is invalid, Excel Row " & rowNum & ".  Please fix to continue!!!!!"
    End If

End Function

Private Sub Workbook_SheetActivate(ByVal Sh As Object)
DoCalc = True
End Sub








Private Sub Workbook_WindowActivate(ByVal Wn As Window)
DoCalc = True
End Sub








INQUEST-PP=macro
