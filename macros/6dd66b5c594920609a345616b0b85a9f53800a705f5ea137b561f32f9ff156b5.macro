Attribute VB_Name = "IReport"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function GetData(ByVal aBookName As String) As String
End Function

Public Sub LoadData(ByVal aBookName As String, task As IXMLDOMElement)
End Sub

Public Sub FillTables(aBookName As String)
End Sub

Public Sub GetRowData(sht As Worksheet, ByVal rowNum As Long, elem As IXMLDOMElement, tbl As Table)
End Sub

Public Sub LoadRowData(sht As Worksheet, ByVal rowNum As Long, elem As IXMLDOMElement, tbl As Table)
End Sub

Public Function FindRow(elem As IXMLDOMElement, sht As Worksheet, tbl As Table) As Long
End Function

Public Function GetRepType() As Long
End Function

Attribute VB_Name = "MainModule"
Public Const REPTYPE_FINRESULT = 3
Public Const REPTYPE_BALANCE = 4
Public Const REPTYPE_FINRESULT_PBS = 10
Public Const REPTYPE_BALANCE_PBS = 11

Public Const REPTYPE_FINRESULT_CONS = -3
Public Const REPTYPE_BALANCE_CONS = -4

Public Const REPTYPE_0503127_PBS = 17
Public Const REPTYPE_0503137_PBS = 18

Public Const REPTYPE_0503121_PBS = 28
Public Const REPTYPE_0503130_PBS = 27
Public Const REPTYPE_0503138_PBS = 29
Public Const REPTYPE_0503128_PBS = 30

Public Const XLA_VERSION = "1.0"

Public Function getXML(aBookName, aRepType, aXML As String) As String

Dim elemMain As IXMLDOMElement, elemData As IXMLDOMElement
Dim resData As IXMLDOMCDATASection
Dim s As String
Dim sErr As String
Dim doc As IXMLDOMDocument
  Set doc = New DOMDocument
    
  Set elemMain = doc.createElement("RESULTXML")
  doc.appendChild elemMain
  sErr = ""
  Set elemData = createElement("RESULT_DATA", elemMain)
  
  On Error GoTo err
    If aRepType = REPTYPE_0503130_PBS Then
      s = getData0503130(aBookName)
    ElseIf aRepType = REPTYPE_0503121_PBS Then
      s = getData0503121(aBookName)
    Else 'If aRepType = REPTYPE_0503127_PBS Then
      s = GetRepObjData(aRepType, aBookName)
    End If
    GoTo noErr
err:
   sErr = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
noErr:
   If sErr = "" Then sErr = "0"
  createErrorElement sErr, elemMain
  
  Set resData = doc.createCDATASection(s)
  elemData.appendChild resData
    
  'MsgBox elemMain.xml
  getXML = elemMain.XML
End Function

Private Sub loadTMP(ByVal aTMPName As String)
  Workbooks.Add aTMPName
End Sub
Public Function LoadXML(aTMPName As String, aRepType As String, aXML As String) As String
Dim doc As IXMLDOMDocument
Dim nList As IXMLDOMNodeList

'With Application
'       .StatusBar = False
'       .ScreenUpdating = True
'       .Interactive = True
'End With

  Set doc = New DOMDocument
  doc.LoadXML aXML
  
  loadTMP aTMPName
  
  If aRepType = REPTYPE_0503130_PBS Then
    load0503130 ActiveWorkbook.name, doc.documentElement
  ElseIf aRepType = REPTYPE_0503121_PBS Then
    load0503121 ActiveWorkbook.name, doc.documentElement
  Else: LoadRepObjData ActiveWorkbook.name, doc.documentElement, aRepType
  End If
  
  Set nList = doc.getElementsByTagName("ITEM")
  fillNamedValues ActiveWorkbook, nList
  
  Set nList = doc.getElementsByTagName("FILTER_VALUE")
  fillFilterItems nList
  
  Range("A1").Select
  LoadXML = ""
End Function
   
Function PutXML(aBookName As String, aRepType As String, aXML As String) As String
Dim doc As IXMLDOMDocument
Dim nList As IXMLDOMNodeList

Dim sErr As String

  Set doc = New DOMDocument
  doc.LoadXML aXML
  sErr = ""
  
  On Error GoTo err
    If aRepType = REPTYPE_0503130_PBS Then
      load0503130 aBookName, doc.documentElement
    ElseIf aRepType = REPTYPE_0503121_PBS Then
      load0503121 aBookName, doc.documentElement
    Else: LoadRepObjData aBookName, doc.documentElement, aRepType
    End If
    GoTo noErr
err:
  sErr = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
noErr:
  If sErr = "" Then sErr = "0"
    
  Set nList = doc.getElementsByTagName("ITEM")
  fillNamedValues Workbooks(aBookName), nList
    
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  XML - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim elemMain As IXMLDOMElement
  Dim resData As IXMLDOMCDATASection
  Dim textError As IXMLDOMText
  Dim s As String
  Dim docRes As IXMLDOMDocument
  
  Set docRes = New DOMDocument
    
  Set elemMain = docRes.createElement("RESULTXML")
  docRes.appendChild elemMain
  createErrorElement sErr, elemMain
  createElement "RESULT_DATA", elemMain
  PutXML = elemMain.XML
End Function

Function VerifyXMLNotCritical(aBookName As String, aRepType As String, aXML As String) As String

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  XML - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim elemMain As IXMLDOMElement
Dim doc As IXMLDOMDocument

  Set doc = New DOMDocument
    
  Set elemMain = doc.createElement("RESULTXML")
  doc.appendChild elemMain
  
  createErrorElement "0", elemMain
  createElement "RESULT_DATA", elemMain
  VerifyXMLNotCritical = elemMain.XML
End Function


Function VerifyXML(aBookName As String, aRepType As String, aXML As String) As String

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  XML - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim elemMain As IXMLDOMElement

Dim result As String
Dim testTmpVer As String, testLibVer As String, thisTmpVer As String, thisLibVer As String

Dim docResult As IXMLDOMDocument
Dim docTest As IXMLDOMDocument
Dim testElem As IXMLDOMElement

  Set docTest = New DOMDocument
  docTest.LoadXML aXML
  
  testTmpVer = "0"
  testLibVer = "0"
  
  Set testElem = docTest.documentElement
  On Error Resume Next
    testTmpVer = testElem.getAttribute("TEMPLATE_VERSION")
    testLibVer = testElem.getAttribute("LIB_VERSION")
  On Error GoTo 0
  
  If testLibVer <> XLA_VERSION Then
    result = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| xla (" + testLibVer + ") |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" + XLA_VERSION + ")"
  Else: result = ""
  End If
      
  Set docResult = New DOMDocument
  Set elemMain = docResult.createElement("RESULTXML")
  docResult.appendChild elemMain
  If aRepType = REPTYPE_FINRESULT_PBS Then
    thisTmpVer = getTemplateVersion121(aBookName)
  ElseIf aRepType = REPTYPE_BALANCE_PBS Then
    thisTmpVer = getTemplateVersion130(aBookName)
  End If
  
  If testTmpVer <> thisTmpVer Then
    result = result + Chr(13) + Chr(10) + _
    "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" + testTmpVer + ") |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" + thisTmpVer + ")"
  End If
  
  If result = "" Then result = "0"
  
  createErrorElement result, elemMain
  createElement "RESULT_DATA", elemMain
  
  VerifyXML = elemMain.XML
End Function


Function GetRepObjData(ByVal aRepType As String, ByVal aBookName As String) As String
Dim repObj As IReport
  If (aRepType = REPTYPE_0503127_PBS) Then
    Set repObj = New Rep0503127
  ElseIf (aRepType = REPTYPE_0503137_PBS) Then
    Set repObj = New Rep0503137
  ElseIf (aRepType = REPTYPE_0503138_PBS) Then
    Set repObj = New Rep0503138
  ElseIf (aRepType = REPTYPE_0503128_PBS) Then
    Set repObj = New Rep0503128
  End If
  repObj.FillTables aBookName
  GetRepObjData = repObj.GetData(aBookName)
End Function

Sub LoadRepObjData(aBookName As String, dataElem As IXMLDOMElement, ByVal aRepType As String)
Dim repObj As IReport
  If dataElem Is Nothing Then Exit Sub
  If (aRepType = REPTYPE_0503127_PBS) Then
    Set repObj = New Rep0503127
  ElseIf (aRepType = REPTYPE_0503137_PBS) Then
    Set repObj = New Rep0503137
  ElseIf (aRepType = REPTYPE_0503138_PBS) Then
    Set repObj = New Rep0503138
  ElseIf (aRepType = REPTYPE_0503128_PBS) Then
    Set repObj = New Rep0503128
  End If
  repObj.FillTables aBookName
  repObj.LoadData aBookName, dataElem
End Sub
Attribute VB_Name = "Rep0503127"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Implements IReport
Dim RO As reportObject
Dim BookName As String

Private Sub Class_Initialize()
  Set RO = New reportObject
End Sub

Private Function IReport_FindRow(elem As IXMLDOMElement, sht As Worksheet, tbl As Table) As Long
Dim i As Integer
  IReport_FindRow = -1
  code = getCode(elem, tbl)
  For i = tbl.Get_StartDataRow To tbl.Get_EndDataRow
    If sht.Cells(i, 3) = code Then
      IReport_FindRow = i
    End If
  Next i
End Function

Private Function IReport_GetData(ByVal aBookName As String) As String
  IReport_GetData = RO.GetReportData(aBookName, Me)
End Function

Private Function IReport_GetRepType() As Long
  IReport_GetRepType = REPTYPE_0503127_PBS
End Function

Private Sub IReport_GetRowData(sht As Worksheet, ByVal rowNum As Long, elem As IXMLDOMElement, tbl As Table)
  If tbl.Get_Name = INCOME Then
    GetRow0503127Inc sht, rowNum, elem
  ElseIf tbl.Get_Name = EXPENSE Then
    GetRow0503127Exp sht, rowNum, elem
  ElseIf tbl.Get_Name = SOURCE Then
    GetRow0503127Src sht, rowNum, elem
  End If
End Sub

Private Sub IReport_LoadData(ByVal aBookName As String, task As IXMLDOMElement)
  RO.LoadReportData aBookName, task, Me
End Sub

Private Sub IReport_LoadRowData(sht As Worksheet, ByVal rowNum As Long, elem As IXMLDOMElement, tbl As Table)
  If tbl.Get_Name = INCOME Then
    LoadRow0503127Inc sht, rowNum, elem, tbl
  ElseIf tbl.Get_Name = EXPENSE Then
    LoadRow0503127Exp sht, rowNum, elem, tbl
  ElseIf tbl.Get_Name = SOURCE Then
    LoadRow0503127Src sht, rowNum, elem, tbl
  End If
End Sub

Public Sub IReport_FillTables(aBookName As String)
Dim tbl As Table
Dim fldNames() As Variant
Dim fldTypes() As Variant
  BookName = aBookName
  Set tbl = New Table
  
  tbl.InitTable INCOME, "CONS_BECC_72N_INC", aBookName
  fldNames = Array(KD_CODE, KESD_CODE, KADMD_CODE, AMOUNT, AMOUNT_TYPE, FORM_TYPE, PARAMS)
  fldTypes = Array(TYPE_STRING, TYPE_STRING, TYPE_STRING, TYPE_CUR, TYPE_LONG, TYPE_LONG, TYPE_STRING)
  tbl.AddFields fldNames, fldTypes
  RO.AddTable tbl
  
  Set tbl = New Table
  tbl.InitTable EXPENSE, "CONS_BECC_72N_EXP", aBookName
  fldNames = Array(KADMR_CODE, KESR_CODE, KFSR_CODE, KCSR_CODE, KVR_CODE, AMOUNT, AMOUNT_TYPE, FORM_TYPE, PARAMS)
  fldTypes = Array(TYPE_STRING, TYPE_STRING, TYPE_STRING, TYPE_STRING, TYPE_STRING, TYPE_CUR, TYPE_LONG, TYPE_LONG, TYPE_STRING)
  tbl.AddFields fldNames, fldTypes

  RO.AddTable tbl
  
  Set tbl = New Table
  tbl.InitTable SOURCE, "CONS_BECC_72N_SRC", aBookName
  fldNames = Array(KI_CODE, KESI_CODE, KADMI_CODE, AMOUNT, AMOUNT_TYPE, FORM_TYPE, PARAMS)
  fldTypes = Array(TYPE_STRING, TYPE_STRING, TYPE_STRING, TYPE_CUR, TYPE_LONG, TYPE_LONG, TYPE_STRING)
  tbl.AddFields fldNames, fldTypes
  RO.AddTable tbl
End Sub


Private Function getBECCFormType()
  getBECCFormType = "-17"
End Function

Public Sub GetRow0503127Inc(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement)
Dim values() As String
Dim elemRecord As IXMLDOMElement
Dim amt(2) As String
Dim i As Integer
  For i = 0 To UBound(amt)
    amt(i) = CurrToXML(sht.Cells(rowNum, 5 + i))
    If amt(i) <> "0" Then
      Set elemRecord = createElement("RECORD", elem)
      elemRecord.setAttribute KADMD_CODE, RO.getIncSrcCodeData(sht.Cells(rowNum, 3), KADMD_CODE)
      elemRecord.setAttribute KD_CODE, RO.getIncSrcCodeData(sht.Cells(rowNum, 3), KD_CODE)
      elemRecord.setAttribute KESD_CODE, RO.getIncSrcCodeData(sht.Cells(rowNum, 3), KESD_CODE)
      elemRecord.setAttribute AMOUNT, amt(i)
      elemRecord.setAttribute AMOUNT_TYPE, CStr(i + 1)
      elemRecord.setAttribute FORM_TYPE, getBECCFormType
    End If
  Next i
End Sub

Public Sub GetRow0503127Exp(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement)
Dim values() As String
Dim elemRecord As IXMLDOMElement
Dim amt(2) As String
Dim i As Integer
  For i = 0 To UBound(amt)
    amt(i) = CurrToXML(sht.Cells(rowNum, 5 + i))
    If amt(i) <> "0" Then
      Set elemRecord = createElement("RECORD", elem)
      elemRecord.setAttribute KADMR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KADMR_CODE)
      elemRecord.setAttribute KFSR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KFSR_CODE)
      elemRecord.setAttribute KCSR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KCSR_CODE)
      elemRecord.setAttribute KVR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KVR_CODE)
      elemRecord.setAttribute KESR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KESR_CODE)
      elemRecord.setAttribute AMOUNT, amt(i)
      elemRecord.setAttribute AMOUNT_TYPE, CStr(i + 1)
      elemRecord.setAttribute FORM_TYPE, getBECCFormType
    End If
  Next i
End Sub

Public Sub GetRow0503127Src(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement)
Dim elemRecord As IXMLDOMElement
Dim amt(2) As String
Dim i As Integer
  For i = 0 To UBound(amt)
    amt(i) = CurrToXML(sht.Cells(rowNum, 4 + i))
    If amt(i) <> "0" Then
      Set elemRecord = createElement("RECORD", elem)
      elemRecord.setAttribute KADMI_CODE, RO.getIncSrcCodeData(sht.Cells(rowNum, 3), KADMI_CODE)
      elemRecord.setAttribute KI_CODE, RO.getIncSrcCodeData(sht.Cells(rowNum, 3), KI_CODE)
      elemRecord.setAttribute KESI_CODE, RO.getIncSrcCodeData(sht.Cells(rowNum, 3), KESI_CODE)
      elemRecord.setAttribute AMOUNT, amt(i)
      elemRecord.setAttribute AMOUNT_TYPE, CStr(i + 1)
      elemRecord.setAttribute FORM_TYPE, getBECCFormType
    End If
  Next i
End Sub

Public Sub LoadRow0503127Inc(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement, tbl As Table)
  sht.Cells(rowNum, 3) = getCode(elem, tbl)
  sht.Cells(rowNum, 5 + elem.getAttribute(AMOUNT_TYPE) - 1) = XMLToCurr(elem.getAttribute(AMOUNT))
End Sub

Public Sub LoadRow0503127Exp(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement, tbl As Table)
  sht.Cells(rowNum, 3) = getCode(elem, tbl)
  sht.Cells(rowNum, 5 + elem.getAttribute(AMOUNT_TYPE) - 1) = XMLToCurr(elem.getAttribute(AMOUNT))
End Sub

Public Sub LoadRow0503127Src(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement, tbl As Table)
  sht.Cells(rowNum, 3) = getCode(elem, tbl)
  sht.Cells(rowNum, 4 + elem.getAttribute(AMOUNT_TYPE) - 1) = XMLToCurr(elem.getAttribute(AMOUNT))
End Sub

Private Function getCode(elem As IXMLDOMElement, tbl As Table) As String
  If tbl.Get_Name = INCOME Then
    getCode = CStr(elem.getAttribute(KADMD_CODE)) & " " & _
              CStr(elem.getAttribute(KD_CODE)) & " " & _
              CStr(elem.getAttribute(KESD_CODE))
  ElseIf tbl.Get_Name = EXPENSE Then
    getCode = CStr(elem.getAttribute(KADMR_CODE)) & " " & _
              CStr(elem.getAttribute(KFSR_CODE)) & " " & _
              CStr(elem.getAttribute(KCSR_CODE)) & " " & _
              CStr(elem.getAttribute(KVR_CODE)) & " " & _
              CStr(elem.getAttribute(KESR_CODE))
  ElseIf tbl.Get_Name = SOURCE Then
    getCode = CStr(elem.getAttribute(KADMI_CODE)) & " " & _
              CStr(elem.getAttribute(KI_CODE)) & " " & _
              CStr(elem.getAttribute(KESI_CODE))
  End If
End Function
'<RESULTXML><RESULT_DATA><![CDATA[<DATASETS><DATASET TABLE_NAME="CONS_BECC_72N_INC" NAME="INCOME"><METADATA><FIELD TYPE="1" NAME="KD_CODE"/><FIELD TYPE="1" NAME="KESD_CODE"/><FIELD TYPE="1" NAME="KADMD_CODE"/><FIELD TYPE="3" NAME="AMOUNT"/><FIELD TYPE="2" NAME="AMOUNT_TYPE"/><FIELD TYPE="2" NAME="FORM_TYPE"/><FIELD TYPE="1" NAME="PARAMS"/></METADATA><DATA><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="980.56" AMOUNT_TYPE="1"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="1" AMOUNT_TYPE="2"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="146" AMOUNT_TYPE="1"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="2" AMOUNT_TYPE="2"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="13" AMOUNT_TYPE="1"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="3" AMOUNT_TYPE="2"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="50.43" AMOUNT_TYPE="1"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="4" AMOUNT_TYPE="2"/></DATA></DATASET><DATASET TABLE_NAME="CONS_BECC_72N_EXP"
'NAME="EXPENSE"><METADATA><FIELD TYPE="1" NAME="KADMR_CODE"/><FIELD TYPE="1" NAME="KESR_CODE"/><FIELD TYPE="1" NAME="KFSR_CODE"/><FIELD TYPE="1" NAME="KCSR_CODE"/><FIELD TYPE="1" NAME="KVR_CODE"/><FIELD TYPE="3" NAME="AMOUNT"/><FIELD TYPE="2" NAME="AMOUNT_TYPE"/><FIELD TYPE="2" NAME="FORM_TYPE"/><FIELD TYPE="1" NAME="PARAMS"/></METADATA><DATA><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000200" KVR_CODE="000200" KESR_CODE="200" AMOUNT="502" AMOUNT_TYPE="2"/><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000200" KVR_CODE="000200" KESR_CODE="200" AMOUNT="1" AMOUNT_TYPE="3"/><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000210" KVR_CODE="000210" KESR_CODE="210" AMOUNT="502" AMOUNT_TYPE="2"/><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000210" KVR_CODE="000210" KESR_CODE="210" AMOUNT="2" AMOUNT_TYPE="3"/><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000211" KVR_CODE="000211" KESR_CODE="211" AMOUNT="502" AMOUNT_TYPE="2"/>
'<RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000211" KVR_CODE="000211" KESR_CODE="211" AMOUNT="3" AMOUNT_TYPE="3"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000300" KVR_CODE="000300" KESR_CODE="300" AMOUNT="15" AMOUNT_TYPE="1"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000300" KVR_CODE="000300" KESR_CODE="300" AMOUNT="15" AMOUNT_TYPE="2"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000300" KVR_CODE="000300" KESR_CODE="300" AMOUNT="4" AMOUNT_TYPE="3"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000330" KVR_CODE="000330" KESR_CODE="330" AMOUNT="15" AMOUNT_TYPE="1"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000330" KVR_CODE="000330" KESR_CODE="330" AMOUNT="15" AMOUNT_TYPE="2"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000330" KVR_CODE="000330" KESR_CODE="330" AMOUNT="5" AMOUNT_TYPE="3"/></DATA></DATASET><DATASET TABLE_NAME="CONS_BECC_72N_SRC" NAME="SOURCE">
'<METADATA><FIELD TYPE="1" NAME="KI_CODE"/><FIELD TYPE="1" NAME="KESI_CODE"/><FIELD TYPE="1" NAME="KADMI_CODE"/><FIELD TYPE="3" NAME="AMOUNT"/><FIELD TYPE="2" NAME="AMOUNT_TYPE"/><FIELD TYPE="2" NAME="FORM_TYPE"/><FIELD TYPE="1" NAME="PARAMS"/></METADATA><DATA><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="1" AMOUNT_TYPE="1"/><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="2" AMOUNT_TYPE="1"/><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="3" AMOUNT_TYPE="1"/><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="4" AMOUNT_TYPE="1"/><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="5" AMOUNT_TYPE="1"/></DATA></DATASET></DATASETS>]]></RESULT_DATA><ERROR>0</ERROR></RESULTXML>

Attribute VB_Name = "Rep0503128"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Const amtType_assignNonPno = 4
Const amtType_assignPno = 5
Implements IReport
Dim RO As reportObject
Dim BookName As String
Dim amtTypesToColNumbers

Private Sub Class_Initialize()
  Set RO = New reportObject
  amtTypesToColNumbers = Array(0, 6, 5, 10, 4, 4, 8) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
End Sub


Private Function IReport_FindRow(elem As IXMLDOMElement, sht As Worksheet, tbl As Table) As Long
Dim i As Integer
  IReport_FindRow = -1
  code = getCode(elem, tbl)
  For i = tbl.Get_StartDataRow To tbl.Get_EndDataRow
    If sht.Cells(i, 3) = code Then
      IReport_FindRow = i
    End If
  Next i
End Function

Private Function IReport_GetData(ByVal aBookName As String) As String
  IReport_GetData = RO.GetReportData(aBookName, Me)
End Function

Private Function IReport_GetRepType() As Long
  IReport_GetRepType = REPTYPE_0503128_PBS
End Function

Private Sub IReport_GetRowData(sht As Worksheet, ByVal rowNum As Long, elem As IXMLDOMElement, tbl As Table)
  If tbl.Get_Name = EXPENSE Then
    GetRow0503128Exp sht, rowNum, elem
  ElseIf tbl.Get_Name = SOURCE Then
    GetRow0503128Src sht, rowNum, elem
  End If
End Sub

Private Sub IReport_LoadData(ByVal aBookName As String, task As IXMLDOMElement)
  RO.LoadReportDataPostf aBookName, task, Me, True
End Sub

Private Sub IReport_LoadRowData(sht As Worksheet, ByVal rowNum As Long, elem As IXMLDOMElement, tbl As Table)
  If tbl.Get_Name = EXPENSE Then
    LoadRow0503128Exp sht, rowNum, elem, tbl
  ElseIf tbl.Get_Name = SOURCE Then
    LoadRow0503128Src sht, rowNum, elem, tbl
  End If
End Sub

Public Sub IReport_FillTables(aBookName As String)
Dim tbl As Table
Dim fldNames() As Variant
Dim fldTypes() As Variant
  BookName = aBookName
 
  Set tbl = New Table
  tbl.InitTablePostf EXPENSE, "CONS_BECC_72N_EXP", aBookName, "_EXP", "Exp_Src_0503128"
  fldNames = Array(KADMR_CODE, KESR_CODE, KFSR_CODE, KCSR_CODE, KVR_CODE, AMOUNT, AMOUNT_TYPE, FORM_TYPE, PARAMS)
  fldTypes = Array(TYPE_STRING, TYPE_STRING, TYPE_STRING, TYPE_STRING, TYPE_STRING, TYPE_CUR, TYPE_LONG, TYPE_LONG, TYPE_STRING)
  tbl.AddFields fldNames, fldTypes

  RO.AddTable tbl
  
  Set tbl = New Table
  tbl.InitTablePostf SOURCE, "CONS_BECC_72N_SRC", aBookName, "_SRC", "Exp_Src_0503128"
  fldNames = Array(KI_CODE, KESI_CODE, KADMI_CODE, AMOUNT, AMOUNT_TYPE, FORM_TYPE, PARAMS)
  fldTypes = Array(TYPE_STRING, TYPE_STRING, TYPE_STRING, TYPE_CUR, TYPE_LONG, TYPE_LONG, TYPE_STRING)
  tbl.AddFields fldNames, fldTypes
  RO.AddTable tbl
End Sub


Private Function getBECCFormType()
  getBECCFormType = "-30"
End Function

Public Sub GetRow0503128Exp(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement)
Dim elemRecord As IXMLDOMElement
Dim amt, amt5 As String
Dim i, amtColNum, amtType As Integer
  For i = 1 To UBound(amtTypesToColNumbers)
    amtColNum = amtTypesToColNumbers(i)
    If amtColNum <> 0 Then
      If amtColNum = 4 Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|/|fffd||fffd| |fffd||fffd||fffd|
        amt5 = CurrToXML(sht.Cells(rowNum, 5)) ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 5
        If (i = amtType_assignNonPno And amt5 <> 0) Or (i = amtType_assignPno And amt5 = 0) Then ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 1 |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 2 |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
          amt = CurrToXML(sht.Cells(rowNum, amtColNum))
        Else
          amt = "0"
        End If
      Else
        amt = CurrToXML(sht.Cells(rowNum, amtColNum))
      End If
      If amt <> "0" Then
        Set elemRecord = createElement("RECORD", elem)
        elemRecord.setAttribute KADMR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KADMR_CODE)
        elemRecord.setAttribute KFSR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KFSR_CODE)
        elemRecord.setAttribute KCSR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KCSR_CODE)
        elemRecord.setAttribute KVR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KVR_CODE)
        elemRecord.setAttribute KESR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KESR_CODE)
        elemRecord.setAttribute AMOUNT, amt
        elemRecord.setAttribute AMOUNT_TYPE, CStr(i)
        elemRecord.setAttribute FORM_TYPE, getBECCFormType
      End If
    End If
  Next i
End Sub

Public Sub GetRow0503128Src(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement)
Dim elemRecord As IXMLDOMElement
Dim amt As String
Dim i, amtColNum As Integer
  For i = 1 To UBound(amtTypesToColNumbers)
    amtColNum = amtTypesToColNumbers(i)
    If amtColNum <> 0 And i <> amtType_assignPno Then '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      amt = CurrToXML(sht.Cells(rowNum, amtColNum))
      If amt <> "0" Then
        Set elemRecord = createElement("RECORD", elem)
        elemRecord.setAttribute KADMI_CODE, RO.getIncSrcCodeData(sht.Cells(rowNum, 3), KADMI_CODE)
        elemRecord.setAttribute KI_CODE, RO.getIncSrcCodeData(sht.Cells(rowNum, 3), KI_CODE)
        elemRecord.setAttribute KESI_CODE, RO.getIncSrcCodeData(sht.Cells(rowNum, 3), KESI_CODE)
        elemRecord.setAttribute AMOUNT, amt
        elemRecord.setAttribute AMOUNT_TYPE, CStr(i)
        elemRecord.setAttribute FORM_TYPE, getBECCFormType
      End If
    End If
  Next i
End Sub

Public Sub LoadRow0503128Exp(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement, tbl As Table)
Dim amtType, colNum As Integer
  sht.Cells(rowNum, 3) = getCode(elem, tbl)
  amtType = elem.getAttribute(AMOUNT_TYPE)
  colNum = amtTypesToColNumbers(amtType)
  If colNum <> 0 Then
    sht.Cells(rowNum, colNum) = XMLToCurr(elem.getAttribute(AMOUNT))
  End If
End Sub

Public Sub LoadRow0503128Src(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement, tbl As Table)
Dim amtType, colNum As Integer
  sht.Cells(rowNum, 3) = getCode(elem, tbl)
  amtType = elem.getAttribute(AMOUNT_TYPE)
  colNum = amtTypesToColNumbers(amtType)
  If colNum <> 0 Then
    sht.Cells(rowNum, colNum) = XMLToCurr(elem.getAttribute(AMOUNT))
  End If
End Sub

Private Function getCode(elem As IXMLDOMElement, tbl As Table) As String
  If tbl.Get_Name = EXPENSE Then
    getCode = CStr(elem.getAttribute(KADMR_CODE)) & " " & _
              CStr(elem.getAttribute(KFSR_CODE)) & " " & _
              CStr(elem.getAttribute(KCSR_CODE)) & " " & _
              CStr(elem.getAttribute(KVR_CODE)) & " " & _
              CStr(elem.getAttribute(KESR_CODE))
  ElseIf tbl.Get_Name = SOURCE Then
    getCode = CStr(elem.getAttribute(KADMI_CODE)) & " " & _
              CStr(elem.getAttribute(KI_CODE)) & " " & _
              CStr(elem.getAttribute(KESI_CODE))
  End If
End Function
'<RESULTXML><RESULT_DATA><![CDATA[<DATASETS><DATASET TABLE_NAME="CONS_BECC_72N_INC" NAME="INCOME"><METADATA><FIELD TYPE="1" NAME="KD_CODE"/><FIELD TYPE="1" NAME="KESD_CODE"/><FIELD TYPE="1" NAME="KADMD_CODE"/><FIELD TYPE="3" NAME="AMOUNT"/><FIELD TYPE="2" NAME="AMOUNT_TYPE"/><FIELD TYPE="2" NAME="FORM_TYPE"/><FIELD TYPE="1" NAME="PARAMS"/></METADATA><DATA><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="980.56" AMOUNT_TYPE="1"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="1" AMOUNT_TYPE="2"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="146" AMOUNT_TYPE="1"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="2" AMOUNT_TYPE="2"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="13" AMOUNT_TYPE="1"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="3" AMOUNT_TYPE="2"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="50.43" AMOUNT_TYPE="1"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="4" AMOUNT_TYPE="2"/></DATA></DATASET><DATASET TABLE_NAME="CONS_BECC_72N_EXP"
'NAME="EXPENSE"><METADATA><FIELD TYPE="1" NAME="KADMR_CODE"/><FIELD TYPE="1" NAME="KESR_CODE"/><FIELD TYPE="1" NAME="KFSR_CODE"/><FIELD TYPE="1" NAME="KCSR_CODE"/><FIELD TYPE="1" NAME="KVR_CODE"/><FIELD TYPE="3" NAME="AMOUNT"/><FIELD TYPE="2" NAME="AMOUNT_TYPE"/><FIELD TYPE="2" NAME="FORM_TYPE"/><FIELD TYPE="1" NAME="PARAMS"/></METADATA><DATA><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000200" KVR_CODE="000200" KESR_CODE="200" AMOUNT="502" AMOUNT_TYPE="2"/><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000200" KVR_CODE="000200" KESR_CODE="200" AMOUNT="1" AMOUNT_TYPE="3"/><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000210" KVR_CODE="000210" KESR_CODE="210" AMOUNT="502" AMOUNT_TYPE="2"/><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000210" KVR_CODE="000210" KESR_CODE="210" AMOUNT="2" AMOUNT_TYPE="3"/><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000211" KVR_CODE="000211" KESR_CODE="211" AMOUNT="502" AMOUNT_TYPE="2"/>
'<RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000211" KVR_CODE="000211" KESR_CODE="211" AMOUNT="3" AMOUNT_TYPE="3"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000300" KVR_CODE="000300" KESR_CODE="300" AMOUNT="15" AMOUNT_TYPE="1"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000300" KVR_CODE="000300" KESR_CODE="300" AMOUNT="15" AMOUNT_TYPE="2"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000300" KVR_CODE="000300" KESR_CODE="300" AMOUNT="4" AMOUNT_TYPE="3"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000330" KVR_CODE="000330" KESR_CODE="330" AMOUNT="15" AMOUNT_TYPE="1"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000330" KVR_CODE="000330" KESR_CODE="330" AMOUNT="15" AMOUNT_TYPE="2"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000330" KVR_CODE="000330" KESR_CODE="330" AMOUNT="5" AMOUNT_TYPE="3"/></DATA></DATASET><DATASET TABLE_NAME="CONS_BECC_72N_SRC" NAME="SOURCE">
'<METADATA><FIELD TYPE="1" NAME="KI_CODE"/><FIELD TYPE="1" NAME="KESI_CODE"/><FIELD TYPE="1" NAME="KADMI_CODE"/><FIELD TYPE="3" NAME="AMOUNT"/><FIELD TYPE="2" NAME="AMOUNT_TYPE"/><FIELD TYPE="2" NAME="FORM_TYPE"/><FIELD TYPE="1" NAME="PARAMS"/></METADATA><DATA><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="1" AMOUNT_TYPE="1"/><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="2" AMOUNT_TYPE="1"/><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="3" AMOUNT_TYPE="1"/><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="4" AMOUNT_TYPE="1"/><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="5" AMOUNT_TYPE="1"/></DATA></DATASET></DATASETS>]]></RESULT_DATA><ERROR>0</ERROR></RESULTXML>



Attribute VB_Name = "Rep0503137"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Implements IReport
Dim RO As reportObject
Dim BookName As String

Private Sub Class_Initialize()
  Set RO = New reportObject
End Sub

Private Function IReport_FindRow(elem As IXMLDOMElement, sht As Worksheet, tbl As Table) As Long
Dim i As Integer
  IReport_FindRow = -1
  code = getCode(elem, tbl)
  For i = tbl.Get_StartDataRow To tbl.Get_EndDataRow
    If sht.Cells(i, 3) = code Then
      IReport_FindRow = i
    End If
  Next i
End Function

Private Function IReport_GetData(ByVal aBookName As String) As String
  IReport_GetData = RO.GetReportData(aBookName, Me)
End Function

Private Function IReport_GetRepType() As Long
  IReport_GetRepType = REPTYPE_0503137_PBS
End Function

Private Sub IReport_GetRowData(sht As Worksheet, ByVal rowNum As Long, elem As IXMLDOMElement, tbl As Table)
  If tbl.Get_Name = INCOME Then
    GetRow0503137Inc sht, rowNum, elem
  ElseIf tbl.Get_Name = EXPENSE Then
    GetRow0503137Exp sht, rowNum, elem
  ElseIf tbl.Get_Name = SOURCE Then
    GetRow0503137Src sht, rowNum, elem
  End If
End Sub

Private Sub IReport_LoadData(ByVal aBookName As String, task As IXMLDOMElement)
  RO.LoadReportData aBookName, task, Me
End Sub

Private Sub IReport_LoadRowData(sht As Worksheet, ByVal rowNum As Long, elem As IXMLDOMElement, tbl As Table)
  If tbl.Get_Name = INCOME Then
    LoadRow0503137Inc sht, rowNum, elem, tbl
  ElseIf tbl.Get_Name = EXPENSE Then
    LoadRow0503137Exp sht, rowNum, elem, tbl
  ElseIf tbl.Get_Name = SOURCE Then
    LoadRow0503137Src sht, rowNum, elem, tbl
  End If
End Sub

Public Sub IReport_FillTables(aBookName As String)
Dim tbl As Table
Dim fldNames() As Variant
Dim fldTypes() As Variant
  BookName = aBookName
  Set tbl = New Table
  
  tbl.InitTable INCOME, "CONS_BECC_72N_INC", aBookName
  fldNames = Array(KD_CODE, KESD_CODE, KADMD_CODE, AMOUNT, AMOUNT_TYPE, FORM_TYPE, PARAMS)
  fldTypes = Array(TYPE_STRING, TYPE_STRING, TYPE_STRING, TYPE_CUR, TYPE_LONG, TYPE_LONG, TYPE_STRING)
  tbl.AddFields fldNames, fldTypes
  RO.AddTable tbl
  
  Set tbl = New Table
  tbl.InitTable EXPENSE, "CONS_BECC_72N_EXP", aBookName
  fldNames = Array(KADMR_CODE, KESR_CODE, KFSR_CODE, KCSR_CODE, KVR_CODE, AMOUNT, AMOUNT_TYPE, FORM_TYPE, PARAMS)
  fldTypes = Array(TYPE_STRING, TYPE_STRING, TYPE_STRING, TYPE_STRING, TYPE_STRING, TYPE_CUR, TYPE_LONG, TYPE_LONG, TYPE_STRING)
  tbl.AddFields fldNames, fldTypes

  RO.AddTable tbl
  
  Set tbl = New Table
  tbl.InitTable SOURCE, "CONS_BECC_72N_SRC", aBookName
  fldNames = Array(KI_CODE, KESI_CODE, KADMI_CODE, AMOUNT, AMOUNT_TYPE, FORM_TYPE, PARAMS)
  fldTypes = Array(TYPE_STRING, TYPE_STRING, TYPE_STRING, TYPE_CUR, TYPE_LONG, TYPE_LONG, TYPE_STRING)
  tbl.AddFields fldNames, fldTypes
  RO.AddTable tbl
End Sub

Private Function getBECCFormType()
  getBECCFormType = "-18"
End Function

Public Sub GetRow0503137Inc(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement)
Dim values() As String
Dim elemRecord As IXMLDOMElement
Dim amt(2) As String
Dim i As Integer

  For i = 0 To UBound(amt)
    amt(i) = CurrToXML(sht.Cells(rowNum, 5 + i))
    If amt(i) <> "0" Then
      Set elemRecord = createElement("RECORD", elem)
      elemRecord.setAttribute KADMD_CODE, RO.getIncSrcCodeData(sht.Cells(rowNum, 3), KADMD_CODE)
      elemRecord.setAttribute KD_CODE, RO.getIncSrcCodeData(sht.Cells(rowNum, 3), KD_CODE)
      elemRecord.setAttribute KESD_CODE, RO.getIncSrcCodeData(sht.Cells(rowNum, 3), KESD_CODE)
      elemRecord.setAttribute AMOUNT, amt(i)
      elemRecord.setAttribute AMOUNT_TYPE, CStr(i + 1)
      elemRecord.setAttribute FORM_TYPE, getBECCFormType
    End If
  Next i
End Sub

Public Sub GetRow0503137Exp(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement)
Dim values() As String
Dim elemRecord As IXMLDOMElement
Dim amt(2) As String
Dim i As Integer
  For i = 0 To UBound(amt)
    amt(i) = CurrToXML(sht.Cells(rowNum, 5 + i))
    If amt(i) <> "0" Then
      Set elemRecord = createElement("RECORD", elem)
      elemRecord.setAttribute KADMR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KADMR_CODE)
      elemRecord.setAttribute KFSR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KFSR_CODE)
      elemRecord.setAttribute KCSR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KCSR_CODE)
      elemRecord.setAttribute KVR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KVR_CODE)
      elemRecord.setAttribute KESR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KESR_CODE)
      elemRecord.setAttribute AMOUNT, amt(i)
      elemRecord.setAttribute AMOUNT_TYPE, CStr(i + 1)
      elemRecord.setAttribute FORM_TYPE, getBECCFormType
    End If
  Next i
End Sub

Public Sub GetRow0503137Src(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement)
Dim elemRecord As IXMLDOMElement
Dim amt(2) As String
Dim i As Integer
  For i = 0 To UBound(amt)
    amt(i) = CurrToXML(sht.Cells(rowNum, 4 + i))
    If amt(i) <> "0" Then
      Set elemRecord = createElement("RECORD", elem)
      elemRecord.setAttribute KADMI_CODE, RO.getIncSrcCodeData(sht.Cells(rowNum, 3), KADMI_CODE)
      elemRecord.setAttribute KI_CODE, RO.getIncSrcCodeData(sht.Cells(rowNum, 3), KI_CODE)
      elemRecord.setAttribute KESI_CODE, RO.getIncSrcCodeData(sht.Cells(rowNum, 3), KESI_CODE)
      elemRecord.setAttribute AMOUNT, amt(i)
      elemRecord.setAttribute AMOUNT_TYPE, CStr(i + 1)
      elemRecord.setAttribute FORM_TYPE, getBECCFormType
    End If
  Next i
End Sub

Public Sub LoadRow0503137Inc(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement, tbl As Table)
  sht.Cells(rowNum, 3) = getCode(elem, tbl)
  sht.Cells(rowNum, 5 + elem.getAttribute(AMOUNT_TYPE) - 1) = XMLToCurr(elem.getAttribute(AMOUNT))
End Sub

Public Sub LoadRow0503137Exp(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement, tbl As Table)
  sht.Cells(rowNum, 3) = getCode(elem, tbl)
  sht.Cells(rowNum, 5 + elem.getAttribute(AMOUNT_TYPE) - 1) = XMLToCurr(elem.getAttribute(AMOUNT))
End Sub

Public Sub LoadRow0503137Src(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement, tbl As Table)
  sht.Cells(rowNum, 3) = getCode(elem, tbl)
  sht.Cells(rowNum, 4 + elem.getAttribute(AMOUNT_TYPE) - 1) = XMLToCurr(elem.getAttribute(AMOUNT))
End Sub

Private Function getCode(elem As IXMLDOMElement, tbl As Table) As String
  If tbl.Get_Name = INCOME Then
    getCode = CStr(elem.getAttribute(KADMD_CODE)) & " " & _
              CStr(elem.getAttribute(KD_CODE)) & " " & _
              CStr(elem.getAttribute(KESD_CODE))
  ElseIf tbl.Get_Name = EXPENSE Then
    getCode = CStr(elem.getAttribute(KADMR_CODE)) & " " & _
              CStr(elem.getAttribute(KFSR_CODE)) & " " & _
              CStr(elem.getAttribute(KCSR_CODE)) & " " & _
              CStr(elem.getAttribute(KVR_CODE)) & " " & _
              CStr(elem.getAttribute(KESR_CODE))
  ElseIf tbl.Get_Name = SOURCE Then
    getCode = CStr(elem.getAttribute(KADMI_CODE)) & " " & _
              CStr(elem.getAttribute(KI_CODE)) & " " & _
              CStr(elem.getAttribute(KESI_CODE))
  End If
End Function
'<RESULTXML><RESULT_DATA><![CDATA[<DATASETS><DATASET TABLE_NAME="CONS_BECC_72N_INC" NAME="INCOME"><METADATA><FIELD TYPE="1" NAME="KD_CODE"/><FIELD TYPE="1" NAME="KESD_CODE"/><FIELD TYPE="1" NAME="KADMD_CODE"/><FIELD TYPE="3" NAME="AMOUNT"/><FIELD TYPE="2" NAME="AMOUNT_TYPE"/><FIELD TYPE="2" NAME="FORM_TYPE"/><FIELD TYPE="1" NAME="PARAMS"/></METADATA><DATA><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="980.56" AMOUNT_TYPE="1"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="1" AMOUNT_TYPE="2"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="146" AMOUNT_TYPE="1"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="2" AMOUNT_TYPE="2"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="13" AMOUNT_TYPE="1"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="3" AMOUNT_TYPE="2"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="50.43" AMOUNT_TYPE="1"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="4" AMOUNT_TYPE="2"/></DATA></DATASET><DATASET TABLE_NAME="CONS_BECC_72N_EXP"
'NAME="EXPENSE"><METADATA><FIELD TYPE="1" NAME="KADMR_CODE"/><FIELD TYPE="1" NAME="KESR_CODE"/><FIELD TYPE="1" NAME="KFSR_CODE"/><FIELD TYPE="1" NAME="KCSR_CODE"/><FIELD TYPE="1" NAME="KVR_CODE"/><FIELD TYPE="3" NAME="AMOUNT"/><FIELD TYPE="2" NAME="AMOUNT_TYPE"/><FIELD TYPE="2" NAME="FORM_TYPE"/><FIELD TYPE="1" NAME="PARAMS"/></METADATA><DATA><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000200" KVR_CODE="000200" KESR_CODE="200" AMOUNT="502" AMOUNT_TYPE="2"/><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000200" KVR_CODE="000200" KESR_CODE="200" AMOUNT="1" AMOUNT_TYPE="3"/><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000210" KVR_CODE="000210" KESR_CODE="210" AMOUNT="502" AMOUNT_TYPE="2"/><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000210" KVR_CODE="000210" KESR_CODE="210" AMOUNT="2" AMOUNT_TYPE="3"/><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000211" KVR_CODE="000211" KESR_CODE="211" AMOUNT="502" AMOUNT_TYPE="2"/>
'<RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000211" KVR_CODE="000211" KESR_CODE="211" AMOUNT="3" AMOUNT_TYPE="3"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000300" KVR_CODE="000300" KESR_CODE="300" AMOUNT="15" AMOUNT_TYPE="1"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000300" KVR_CODE="000300" KESR_CODE="300" AMOUNT="15" AMOUNT_TYPE="2"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000300" KVR_CODE="000300" KESR_CODE="300" AMOUNT="4" AMOUNT_TYPE="3"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000330" KVR_CODE="000330" KESR_CODE="330" AMOUNT="15" AMOUNT_TYPE="1"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000330" KVR_CODE="000330" KESR_CODE="330" AMOUNT="15" AMOUNT_TYPE="2"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000330" KVR_CODE="000330" KESR_CODE="330" AMOUNT="5" AMOUNT_TYPE="3"/></DATA></DATASET><DATASET TABLE_NAME="CONS_BECC_72N_SRC" NAME="SOURCE">
'<METADATA><FIELD TYPE="1" NAME="KI_CODE"/><FIELD TYPE="1" NAME="KESI_CODE"/><FIELD TYPE="1" NAME="KADMI_CODE"/><FIELD TYPE="3" NAME="AMOUNT"/><FIELD TYPE="2" NAME="AMOUNT_TYPE"/><FIELD TYPE="2" NAME="FORM_TYPE"/><FIELD TYPE="1" NAME="PARAMS"/></METADATA><DATA><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="1" AMOUNT_TYPE="1"/><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="2" AMOUNT_TYPE="1"/><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="3" AMOUNT_TYPE="1"/><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="4" AMOUNT_TYPE="1"/><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="5" AMOUNT_TYPE="1"/></DATA></DATASET></DATASETS>]]></RESULT_DATA><ERROR>0</ERROR></RESULTXML>



Attribute VB_Name = "Rep0503138"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Implements IReport
Dim RO As reportObject
Dim BookName As String
Dim amtTypesToColNumbers As Variant

Private Sub Class_Initialize()
  Set RO = New reportObject
  amtTypesToColNumbers = Array(0, 4, 6, 8, 10) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
End Sub

Private Function IReport_FindRow(elem As IXMLDOMElement, sht As Worksheet, tbl As Table) As Long
Dim i As Integer
  IReport_FindRow = -1
  code = getCode(elem, tbl)
  For i = tbl.Get_StartDataRow To tbl.Get_EndDataRow
    If sht.Cells(i, 3) = code Then
      IReport_FindRow = i
    End If
  Next i
End Function

Private Function IReport_GetData(ByVal aBookName As String) As String
  IReport_GetData = RO.GetReportData(aBookName, Me)
End Function

Private Function IReport_GetRepType() As Long
  IReport_GetRepType = REPTYPE_0503138_PBS
End Function

Private Sub IReport_GetRowData(sht As Worksheet, ByVal rowNum As Long, elem As IXMLDOMElement, tbl As Table)
  If tbl.Get_Name = EXPENSE Then
    GetRow0503138Exp sht, rowNum, elem
  End If
End Sub

Private Sub IReport_LoadData(ByVal aBookName As String, task As IXMLDOMElement)
  RO.LoadReportData aBookName, task, Me
End Sub

Private Sub IReport_LoadRowData(sht As Worksheet, ByVal rowNum As Long, elem As IXMLDOMElement, tbl As Table)
  If tbl.Get_Name = EXPENSE Then
    LoadRow0503138Exp sht, rowNum, elem, tbl
  End If
End Sub

Public Sub IReport_FillTables(aBookName As String)
Dim tbl As Table
Dim fldNames() As Variant
Dim fldTypes() As Variant
  BookName = aBookName
  
  Set tbl = New Table
  tbl.InitTable EXPENSE, "CONS_BECC_72N_EXP", aBookName
  fldNames = Array(KADMR_CODE, KESR_CODE, KFSR_CODE, KCSR_CODE, KVR_CODE, AMOUNT, AMOUNT_TYPE, FORM_TYPE, PARAMS)
  fldTypes = Array(TYPE_STRING, TYPE_STRING, TYPE_STRING, TYPE_STRING, TYPE_STRING, TYPE_CUR, TYPE_LONG, TYPE_LONG, TYPE_STRING)
  tbl.AddFields fldNames, fldTypes

  RO.AddTable tbl

End Sub

Private Function getBECCFormType()
  getBECCFormType = "-29"
End Function

Public Sub GetRow0503138Exp(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement)
Dim elemRecord As IXMLDOMElement
Dim amt As String
Dim i As Integer
  For i = 1 To UBound(amtTypesToColNumbers)
    amtColNum = amtTypesToColNumbers(i)
    If amtColNum <> 0 Then
      amt = CurrToXML(sht.Cells(rowNum, amtColNum))
      If amt <> "0" Then
        Set elemRecord = createElement("RECORD", elem)
        elemRecord.setAttribute KADMR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KADMR_CODE)
        elemRecord.setAttribute KFSR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KFSR_CODE)
        elemRecord.setAttribute KCSR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KCSR_CODE)
        elemRecord.setAttribute KVR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KVR_CODE)
        elemRecord.setAttribute KESR_CODE, RO.getExpCodeData(sht.Cells(rowNum, 3), KESR_CODE)
        elemRecord.setAttribute AMOUNT, amt
        elemRecord.setAttribute AMOUNT_TYPE, CStr(i)
        elemRecord.setAttribute FORM_TYPE, getBECCFormType
      End If
    End If
  Next i
End Sub

Public Sub LoadRow0503138Exp(sht As Worksheet, rowNum As Long, elem As IXMLDOMElement, tbl As Table)
Dim amtType, colNum As Integer
  sht.Cells(rowNum, 3) = getCode(elem, tbl)
  amtType = elem.getAttribute(AMOUNT_TYPE)
  colNum = amtTypesToColNumbers(amtType)
  If colNum <> 0 Then
    sht.Cells(rowNum, colNum) = XMLToCurr(elem.getAttribute(AMOUNT))
  End If
End Sub


Private Function getCode(elem As IXMLDOMElement, tbl As Table) As String
If tbl.Get_Name = EXPENSE Then
    getCode = CStr(elem.getAttribute(KADMR_CODE)) & " " & _
              CStr(elem.getAttribute(KFSR_CODE)) & " " & _
              CStr(elem.getAttribute(KCSR_CODE)) & " " & _
              CStr(elem.getAttribute(KVR_CODE)) & " " & _
              CStr(elem.getAttribute(KESR_CODE))
  End If
End Function
'<RESULTXML><RESULT_DATA><![CDATA[<DATASETS><DATASET TABLE_NAME="CONS_BECC_72N_INC" NAME="INCOME"><METADATA><FIELD TYPE="1" NAME="KD_CODE"/><FIELD TYPE="1" NAME="KESD_CODE"/><FIELD TYPE="1" NAME="KADMD_CODE"/><FIELD TYPE="3" NAME="AMOUNT"/><FIELD TYPE="2" NAME="AMOUNT_TYPE"/><FIELD TYPE="2" NAME="FORM_TYPE"/><FIELD TYPE="1" NAME="PARAMS"/></METADATA><DATA><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="980.56" AMOUNT_TYPE="1"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="1" AMOUNT_TYPE="2"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="146" AMOUNT_TYPE="1"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="2" AMOUNT_TYPE="2"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="13" AMOUNT_TYPE="1"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="3" AMOUNT_TYPE="2"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="50.43" AMOUNT_TYPE="1"/><RECORD KADMD_CODE="" KD_CODE="" KESD_CODE="" AMOUNT="4" AMOUNT_TYPE="2"/></DATA></DATASET><DATASET TABLE_NAME="CONS_BECC_72N_EXP"
'NAME="EXPENSE"><METADATA><FIELD TYPE="1" NAME="KADMR_CODE"/><FIELD TYPE="1" NAME="KESR_CODE"/><FIELD TYPE="1" NAME="KFSR_CODE"/><FIELD TYPE="1" NAME="KCSR_CODE"/><FIELD TYPE="1" NAME="KVR_CODE"/><FIELD TYPE="3" NAME="AMOUNT"/><FIELD TYPE="2" NAME="AMOUNT_TYPE"/><FIELD TYPE="2" NAME="FORM_TYPE"/><FIELD TYPE="1" NAME="PARAMS"/></METADATA><DATA><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000200" KVR_CODE="000200" KESR_CODE="200" AMOUNT="502" AMOUNT_TYPE="2"/><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000200" KVR_CODE="000200" KESR_CODE="200" AMOUNT="1" AMOUNT_TYPE="3"/><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000210" KVR_CODE="000210" KESR_CODE="210" AMOUNT="502" AMOUNT_TYPE="2"/><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000210" KVR_CODE="000210" KESR_CODE="210" AMOUNT="2" AMOUNT_TYPE="3"/><RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000211" KVR_CODE="000211" KESR_CODE="211" AMOUNT="502" AMOUNT_TYPE="2"/>
'<RECORD KADMR_CODE="000" KFSR_CODE="1003000" KCSR_CODE="0000000000211" KVR_CODE="000211" KESR_CODE="211" AMOUNT="3" AMOUNT_TYPE="3"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000300" KVR_CODE="000300" KESR_CODE="300" AMOUNT="15" AMOUNT_TYPE="1"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000300" KVR_CODE="000300" KESR_CODE="300" AMOUNT="15" AMOUNT_TYPE="2"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000300" KVR_CODE="000300" KESR_CODE="300" AMOUNT="4" AMOUNT_TYPE="3"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000330" KVR_CODE="000330" KESR_CODE="330" AMOUNT="15" AMOUNT_TYPE="1"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000330" KVR_CODE="000330" KESR_CODE="330" AMOUNT="15" AMOUNT_TYPE="2"/><RECORD KADMR_CODE="000" KFSR_CODE="1004000" KCSR_CODE="0000000000330" KVR_CODE="000330" KESR_CODE="330" AMOUNT="5" AMOUNT_TYPE="3"/></DATA></DATASET><DATASET TABLE_NAME="CONS_BECC_72N_SRC" NAME="SOURCE">
'<METADATA><FIELD TYPE="1" NAME="KI_CODE"/><FIELD TYPE="1" NAME="KESI_CODE"/><FIELD TYPE="1" NAME="KADMI_CODE"/><FIELD TYPE="3" NAME="AMOUNT"/><FIELD TYPE="2" NAME="AMOUNT_TYPE"/><FIELD TYPE="2" NAME="FORM_TYPE"/><FIELD TYPE="1" NAME="PARAMS"/></METADATA><DATA><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="1" AMOUNT_TYPE="1"/><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="2" AMOUNT_TYPE="1"/><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="3" AMOUNT_TYPE="1"/><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="4" AMOUNT_TYPE="1"/><RECORD KADMI_CODE="" KI_CODE="" KESI_CODE="" AMOUNT="5" AMOUNT_TYPE="1"/></DATA></DATASET></DATASETS>]]></RESULT_DATA><ERROR>0</ERROR></RESULTXML>



Attribute VB_Name = "Table"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim name, tableName, sNameSht As String
Dim FieldNames, FieldTypes As Variant
Dim StartDataRow, EndDataRow As Long

Sub InitTable(sName As String, sTableName As String, aBookName As String)
  InitTablePostf sName, sTableName, aBookName, "", sName
End Sub

Sub InitTablePostf(sName As String, sTableName As String, aBookName As String, sPostf As String, sSheetName As String)
Dim sht As Worksheet
  name = sSheetName
  sNameSht = sName
  tableName = sTableName
  Set sht = Workbooks(aBookName).Sheets(sSheetName)
  RecalcBeginEndRowsPostf sht, sPostf
End Sub

Private Sub RecalcBeginEndRows(sht As Worksheet)
  RecalcBeginEndRowsPostf sht, ""
End Sub

Private Sub RecalcBeginEndRowsPostf(sht As Worksheet, sPostf As String)
  StartDataRow = sht.Range("BEGIN_ROW" + sPostf).Row + 1
  EndDataRow = sht.Range("END_ROW" + sPostf).Row - 1
End Sub

Sub AddFields(sFieldNames() As Variant, sFieldTypes() As Variant)
  FieldNames = sFieldNames
  FieldTypes = sFieldTypes
End Sub

Sub GetTableDataSet(aBookName As String, ByRef elemList As IXMLDOMElement, repObj As IReport)
Dim elemMain As IXMLDOMElement
Dim sht As Worksheet
Dim sVerTmp As String
Dim elemNamedValues As IXMLDOMElement

  Set elemMain = createElement("DATASET", elemList)
  elemMain.setAttribute "TABLE_NAME", tableName
  elemMain.setAttribute "NAME", sNameSht
  elemMain.setAttribute "REPTYPE", repObj.GetRepType
  
  getMetadata elemMain
  
  Set sht = Workbooks(aBookName).Sheets(name)
  sht.Activate
  
  GetTableData sht, elemMain, repObj
  
  'Set elemNamedValues = createElement("CUSTOM_ITEMS", elemMain)
  'getNamedValueElem sht, "REP_PERIOD", elemNamedValues
  'getNamedValueElem sht, "ORG", elemNamedValues
  'getNamedValueElem sht, "BUDGET", elemNamedValues
  'getNamedValueElem sht, "DIVIDER", elemNamedValues
    
End Sub

Private Sub getMetadata(elemMain As IXMLDOMElement)
Dim elemMData As IXMLDOMElement
Dim elemField As IXMLDOMElement
Dim i As Integer

  Set elemMData = createElement("METADATA", elemMain)
  
  For i = 0 To UBound(FieldTypes)
    Set elemField = createElement("FIELD", elemMData)
    elemField.setAttribute "TYPE", FieldTypes(i)
    elemField.setAttribute "NAME", FieldNames(i)
  Next i
End Sub

Private Sub GetTableData(sht As Worksheet, elemMain As IXMLDOMElement, repObj As IReport)
Dim elemData As IXMLDOMElement
Dim i As Integer

  Set elemData = createElement("DATA", elemMain)
  
  For i = StartDataRow To EndDataRow
    repObj.GetRowData sht, i, elemData, Me
  Next i
End Sub

Sub LoadTableFromDataSet(aBookName As String, dataElem As IXMLDOMElement, repObj As IReport)
  LoadTableFromDataSetPostf aBookName, dataElem, repObj, ""
End Sub

Sub LoadTableFromDataSetPostf(aBookName As String, dataElem As IXMLDOMElement, repObj As IReport, sPostf As String)
Dim sht As Worksheet
Dim wb As Workbook
Dim records As IXMLDOMNodeList
Dim rowElem As IXMLDOMElement
Dim i, fr As Integer
Dim MacroName As String
'On Error GoTo err
  Set wb = Workbooks(aBookName)
  Set sht = wb.Sheets(name)
'err:
  sht.Activate
  sht.Unprotect
  
  Set records = dataElem.getElementsByTagName("RECORD")
  For i = 0 To records.Length - 1
    Set rowElem = records.Item(i)
    RecalcBeginEndRowsPostf sht, sPostf
    fr = repObj.FindRow(rowElem, sht, Me)
    If fr = -1 And i > 0 Then
      MacroName = "'" & wb.name & "'" & "!" & sht.CodeName & ".AddRow" & sPostf
      Application.Run MacroName
      sht.Unprotect
    End If
    
    repObj.LoadRowData sht, sht.Range("END_ROW" + sPostf).Row - 1, rowElem, Me
  Next i
  
  ProtectSheet
  'MacroName = Workbooks(aBookName).Name & "!" & sht.CodeName & ".AddRow"
End Sub

Public Property Get Get_FieldNames() As String()
  Get_FieldNames = FieldNames
End Property

Public Property Get Get_FieldTypes() As String()
  Get_FieldTypes = FieldTypes
End Property

Public Property Get Get_Name() As String
  Get_Name = sNameSht
End Property


Public Property Get Get_StartDataRow() As Long
  Get_StartDataRow = StartDataRow
End Property

Public Property Get Get_EndDataRow() As Long
  Get_EndDataRow = EndDataRow
End Property
Attribute VB_Name = "Utils"
Public Const KADMD_CODE = "KADMD_CODE", KD_CODE = "KD_CODE", KESD_CODE = "KESD_CODE", _
      KADMI_CODE = "KADMI_CODE", KI_CODE = "KI_CODE", KESI_CODE = "KESI_CODE", _
      KADMR_CODE = "KADMR_CODE", KFSR_CODE = "KFSR_CODE", KESR_CODE = "KESR_CODE", _
      KCSR_CODE = "KCSR_CODE", KVR_CODE = "KVR_CODE", _
      TYPE_STRING = "1", TYPE_LONG = "2", TYPE_CUR = "3", _
      AMOUNT = "AMOUNT", AMOUNT_TYPE = "AMOUNT_TYPE", FORM_TYPE = "FORM_TYPE", PARAMS = "PARAMS", _
      INCOME = "INCOME", EXPENSE = "EXPENSE", SOURCE = "SOURCE"

Dim resSheet As Worksheet

Public Function FindRange(shtName As String, name As String, value As String) As Range

  Dim sht As Worksheet
  Dim r As Range
  Dim b As Boolean
  
  Application.Goto Reference:=shtName + "!" + name
  If value <> "" Then
    Selection.value = value
  End If
  b = (Selection Is Nothing)
  Set FindRange = Selection
  
End Function

Public Sub fillNamedValues(aBook As Workbook, nList As IXMLDOMNodeList)
  Dim elem As IXMLDOMElement
  
  Dim i As Integer
  
  Dim shtName As String
  Dim rangeName As String
  Dim value As String
  Dim r As Range
  
  aBook.Activate
  
  Set resSheet = aBook.Worksheets.Add
  Dim s As String
  s = "VALUES_TMP" + CStr(aBook.Worksheets.Count)
  resSheet.name = s
    
  For i = 0 To nList.Length - 1
    Set elem = nList.Item(i)
    
    On Error Resume Next
    shtName = elem.getAttribute("SHEET")
    rangeName = elem.getAttribute("KEY")
    value = elem.getAttribute("VALUE")
    
    aBook.Worksheets(shtName).Activate
    Set r = FindRange(shtName, rangeName, value)
    autoRowHeight r, resSheet
    On Error GoTo 0
  Next i
  
  aBook.Worksheets(s).Delete
End Sub

Private Sub fillOneFilterItem(shtName As String, itemName As String, value As String, shift As Integer)
  Dim rValue As Range
  Dim n As Integer
  
  Application.Goto Reference:=shtName + "!FILTER_ITEM"
  Selection.value = itemName
  
  Application.Goto Reference:=shtName + "!FILTER_VALUE"
  Selection.value = value
  Set rValue = Selection
  n = autoRowHeight(rValue, resSheet)
  
  Application.Goto Reference:=shtName + "!FILTER_RANGE"
  Selection.Copy
  Application.Goto Reference:="R[" + CStr(shift) + "]C"
  
  Selection.Insert shift:=xlDown
  Selection.RowHeight = n
End Sub

Public Sub fillFilterItems(nList As IXMLDOMNodeList)
  Dim elem As IXMLDOMElement
  
  Dim i As Integer
  
  Dim shtName As String
  Dim filterName As String
  Dim value As String
  
  Set resSheet = Worksheets.Add
  resSheet.name = "FILTER"
  
  For i = 0 To nList.Length - 1
    Set elem = nList.Item(i)
    shtName = elem.getAttribute("SHEET")
    filterName = elem.getAttribute("FILTER_ITEM")
    value = elem.getAttribute("FILTER_VALUE")
    
    fillOneFilterItem shtName, filterName, value, i + 1
  Next i
  
  Worksheets("FILTER").Delete
  
  If nList.Length > 0 Then
    Application.CutCopyMode = False
  Else: shtName = ActiveWorkbook.Worksheets(1).name
  End If
  
  On Error GoTo ex:
    Application.Goto Reference:=shtName + "!FILTER_RANGE"
    Selection.EntireRow.Hidden = True
    Return
ex:
      
End Sub

Public Function autoRowHeight(ByRef aRange As Range, ByRef shtTmp As Worksheet) As Double

  Dim rA1 As Range
  Dim fnt As Font
  
  Set fnt = aRange.Font
  Set rA1 = shtTmp.Range("A1")
  Dim n As Double, nBig As Double
  
  rA1.Font.name = fnt.name
  rA1.Font.Size = fnt.Size
  rA1.Font.FontStyle = fnt.FontStyle
    
  n = 0
  For i = 1 To aRange.Count
    n = n + aRange.Columns(i).ColumnWidth
  Next i
      
  aRange.Copy
  
  If n >= 255 Then
    nBig = n / 255
    n = 255
  Else: nBig = 1
  End If
    
  shtTmp.Columns(1).ColumnWidth = n
  rA1.PasteSpecial Paste:=xlValues
  rA1.WrapText = True
  rA1.Rows.AutoFit
  n = rA1.RowHeight * nBig
  aRange.RowHeight = n
  autoRowHeight = n
  
End Function

Public Function autoRowHeightEx(ByRef aRange As Range) As Integer

  Dim shtTmp As Worksheet
  Set shtTmp = Worksheets.Add
  
  'shtTmp.name = "THE_TEMP"
  autoRowHeightEx = autoRowHeight(aRange, shtTmp)
  'Worksheets("THE_TEMP").Delete
End Function


Public Function XMLToCurr(aStr As String) As Double
  Dim ds As String
  Dim i As Integer
  Dim result As String
  Dim ch As String
  
  result = ""
  ds = Application.International(xlDecimalSeparator)
  For i = 1 To Len(aStr)
    ch = Mid(aStr, i, 1)
    If ch = "." Then
      result = result + ds
    Else: result = result + ch
    End If
  Next i
    
  If result = "" Then
    XMLToCurr = 0
  Else: XMLToCurr = CDec(result)
  End If
  
End Function

Public Function CurrToXML(sVal As String) As String
  Dim ds As String
  Dim i As Integer
  Dim result As String
  Dim ch As String
  Dim db As Double
  Dim aStr As String
  result = ""
  
  If UCase(sVal) = "X" Or UCase(sVal) = "|fffd|" Then
    aStr = ""
  Else: aStr = sVal
  End If
  
  If aStr <> "" Then
    db = CDbl(aStr)
    
  End If
  ds = Application.International(xlDecimalSeparator)
  For i = 1 To Len(aStr)
    ch = Mid(aStr, i, 1)
    If ch = ds Then
      result = result + "."
    Else: result = result + ch
    End If
  Next i
    
  If result = "" Then result = "0"
  CurrToXML = result
  Exit Function
End Function
Public Function getNamedValue(aSht As Worksheet, aCellName As String) As String
  Dim r As Range
  Set r = FindRange(aSht.name, aCellName, "")
  
  If Not r Is Nothing Then
    r.Select
    getNamedValue = ActiveCell.Text
  End If
End Function
Public Sub getNamedValueElem(aSht As Worksheet, aCellName As String, ByRef elemList As IXMLDOMElement)
  Dim elem As IXMLDOMElement
  Dim value As String
  
  Set elem = createElement("ITEM", elemList)
  value = getNamedValue(aSht, aCellName)
  elem.setAttribute "SHEET", aSht.name
  elem.setAttribute "KEY", aCellName
  elem.setAttribute "VALUE", value
End Sub
Public Function createElement(aTagName As String, aParent As IXMLDOMElement) As IXMLDOMElement
Dim elem As IXMLDOMElement
  
  Set elem = aParent.ownerDocument.createElement(aTagName)
  aParent.appendChild elem
  Set createElement = elem
End Function

Public Function createErrorElement(aMsg As String, aParent As IXMLDOMElement) As IXMLDOMElement
Dim elemError As IXMLDOMElement
  
  Set elemError = createElement("ERROR", aParent)
  elemError.Text = aMsg
  Set createErrorElement = elemError
End Function

Public Sub ProtectSheet()
  ActiveSheet.Protect DrawingObjects:=False, Contents:=True, Scenarios:= _
        False, AllowFormattingCells:=False, AllowFormattingColumns:=False, _
        AllowFormattingRows:=False, AllowInsertingColumns:=False, AllowInsertingRows _
        :=False, AllowInsertingHyperlinks:=False, AllowDeletingColumns:=False, _
        AllowDeletingRows:=False, AllowSorting:=True, AllowFiltering:=True, _
        AllowUsingPivotTables:=True
End Sub

Attribute VB_Name = "proc0503121"
Dim FieldTypes(3) As String
Dim FieldNames(3) As String
Private Sub fillFieldDescs()
Dim i As Integer
  For i = 0 To 3
    Select Case (i)
      Case 0:
        FieldTypes(i) = "1"
        FieldNames(i) = "CODE"
      Case 1:
        FieldTypes(i) = "3"
        FieldNames(i) = "CUR_BUDG"
      Case 2:
        FieldTypes(i) = "3"
        FieldNames(i) = "CUR_NOBUDG"
      Case 3:
        FieldTypes(i) = "3"
        FieldNames(i) = "CUR_TEMP"
    End Select
  Next i
End Sub
Private Sub getMetadata(ByRef elemMain As IXMLDOMElement)
Dim elemMData As IXMLDOMElement
Dim elemField As IXMLDOMElement

Dim i As Integer

  fillFieldDescs
  Set elemMData = createElement("METADATA", elemMain)
  
  For i = 0 To 3
    Set elemField = createElement("FIELD", elemMData)
    elemField.setAttribute "TYPE", FieldTypes(i)
    elemField.setAttribute "NAME", FieldNames(i)
  Next i
End Sub

Private Function getOneRowData(sht As Worksheet, elemRow As IXMLDOMElement, rowNum As Integer) As Boolean

Dim i As Integer
Dim colNum As Integer
Dim s As String

  For i = 0 To 3
    Select Case i
      Case 0: colNum = 2
      Case 1, 2, 3: colNum = i + 7
    End Select
    s = FieldNames(i)
    s = sht.Cells(rowNum, colNum)
    If FieldTypes(i) = "3" Then
      s = CurrToXML(s)
    End If
    
    elemRow.setAttribute FieldNames(i), s
  Next i
  getOneRowData = sht.Cells(rowNum, 8) <> "" Or sht.Cells(rowNum, 9) <> "" Or sht.Cells(rowNum, 10) <> ""
End Function
Private Sub getRowDataSection(sht As Worksheet, elemData As IXMLDOMElement, startRow, endRow As Integer)
  Dim i As Integer
  Dim elemRecord As IXMLDOMElement
  
  For i = startRow To endRow
    If sht.Cells(i, 2).Text <> "" And Mid(sht.Cells(i, 8).FormulaR1C1, 1, 1) <> "=" Then
      Set elemRecord = elemData.ownerDocument.createElement("RECORD")
      If getOneRowData(sht, elemRecord, i) Then
        elemData.appendChild elemRecord
      End If
    End If
  Next i
End Sub
Public Function getTemplateVersion121(aBookName As String) As String
  getTemplateVersion121 = Workbooks(aBookName).Worksheets("report").Cells(4, 8)
End Function
Public Function getData0503121(ByVal aBookName As String) As String
Dim doc As IXMLDOMDocument
Dim elemMain As IXMLDOMElement
Dim elemData As IXMLDOMElement
Dim elemList As IXMLDOMElement
Dim sht As Worksheet
Dim sVerTmp As String
Dim elemNamedValues As IXMLDOMElement

  Set doc = New DOMDocument
  
  Set elemList = doc.createElement("DATASETS")
  doc.appendChild elemList
    
  sVerTmp = getTemplateVersion121(aBookName)
  
  elemList.setAttribute "TEMPLATE_VERSION", sVerTmp
  elemList.setAttribute "LIB_VERSION", XLA_VERSION
    
  Set elemMain = createElement("DATASET", elemList)
  elemMain.setAttribute "TABLE_NAME", "CONS_STATIC_ACTIVE"
  elemMain.setAttribute "NAME", "REPDATA121"
  elemMain.setAttribute "REPTYPE", REPTYPE_0503121_PBS
    
  getMetadata elemMain
  
  Set elemData = createElement("DATA", elemMain)
  Set sht = Workbooks(aBookName).Sheets("report")
  sht.Activate
  
  getRowDataSection sht, elemData, 16, 130
  
  Set elemNamedValues = createElement("CUSTOM_ITEMS", elemMain)
  'getNamedValueElem sht, "REP_PERIOD", elemNamedValues
  'getNamedValueElem sht, "ORG", elemNamedValues
  'getNamedValueElem sht, "BUDGET", elemNamedValues
  'getNamedValueElem sht, "DIVIDER", elemNamedValues
    
  getData0503121 = elemList.XML
End Function
        
Private Function FindRow(sht As Worksheet, ByVal accNum As String) As Integer
Dim r As Range
Dim rB As Range

  sht.Activate
  'sht.Range("A1").Select
  Set rB = sht.Range("B:B")
  Set r = rB.Find(What:=accNum, After:=sht.Cells(1, 2), LookIn:=xlValues, _
         SearchOrder:=xlByRows, SearchDirection:=xlNext)
        
  If r Is Nothing Then
    FindRow = 0
  Else: FindRow = r.Row
  End If
End Function
        
Private Sub fillOneRow(sht As Worksheet, elemRow As IXMLDOMElement, rNum As Integer)
  sht.Cells(rNum, 8).value = XMLToCurr(elemRow.getAttribute("CUR_BUDG"))
  sht.Cells(rNum, 9).value = XMLToCurr(elemRow.getAttribute("CUR_NOBUDG"))
  sht.Cells(rNum, 10).value = XMLToCurr(elemRow.getAttribute("CUR_TEMP"))
End Sub

Public Sub load0503121(aBookName As String, dataElem As IXMLDOMElement)
Dim dataList As IXMLDOMNodeList
Dim rowElem As IXMLDOMElement
Dim i As Integer
Dim accNum As String
Dim rNum As Integer
Dim sht As Worksheet
Dim book As Workbook

  If dataElem Is Nothing Then Exit Sub
  Set book = Workbooks(aBookName)
  Set sht = book.Sheets("report")
  sht.Unprotect
  sht.Columns(2).Hidden = False
  
  Set dataList = dataElem.getElementsByTagName("RECORD")
  For i = 0 To dataList.Length - 1
    Set rowElem = dataList.Item(i)
    accNum = rowElem.getAttribute("CODE")
    rNum = FindRow(sht, accNum)
    If rNum > 0 Then
      fillOneRow sht, rowElem, rNum
    End If
  Next i
  
  sht.Columns(2).Hidden = True
  sht.Protect DrawingObjects:=False, Contents:=True, Scenarios:= _
        False, AllowFormattingCells:=False, AllowFormattingColumns:=False, _
        AllowFormattingRows:=False, AllowInsertingColumns:=False, AllowInsertingRows _
        :=False, AllowInsertingHyperlinks:=False, AllowDeletingColumns:=False, _
        AllowDeletingRows:=False, AllowSorting:=True, AllowFiltering:=True, _
        AllowUsingPivotTables:=True
End Sub

Attribute VB_Name = "proc0503130"
Dim FieldTypes(6) As String
Dim FieldNames(6) As String
Dim SpravAccNums As Variant
Dim SpravFieldTypes(9) As String
Dim SpravFields(9) As String

Private Sub fillFieldDescs()
Dim i As Integer
  For i = 0 To 6
    Select Case (i)
      Case 0:
        FieldTypes(i) = "1"
        FieldNames(i) = "CODE"
      Case 1:
        FieldTypes(i) = "3"
        FieldNames(i) = "NY_BUDG"
      Case 2:
        FieldTypes(i) = "3"
        FieldNames(i) = "NY_NOBUDG"
      Case 3:
        FieldTypes(i) = "3"
        FieldNames(i) = "NY_TEMP"
      Case 4:
        FieldTypes(i) = "3"
        FieldNames(i) = "CUR_BUDG"
      Case 5:
        FieldTypes(i) = "3"
        FieldNames(i) = "CUR_NOBUDG"
      Case 6:
        FieldTypes(i) = "3"
        FieldNames(i) = "CUR_TEMP"
    End Select
  Next i
End Sub

Private Sub getMetadata(fields, types, ByRef elemMain As IXMLDOMElement)
Dim elemMData As IXMLDOMElement
Dim elemField As IXMLDOMElement
'Dim fType, fName As String
Dim i As Integer

  Set elemMData = createElement("METADATA", elemMain)
  For i = 0 To UBound(types)
    Set elemField = createElement("FIELD", elemMData)
    
    elemField.setAttribute "TYPE", types(i)
    elemField.setAttribute "NAME", fields(i)
  Next i
End Sub

Private Function getOneRowData(sht As Worksheet, elemRow As IXMLDOMElement, rowNum As Integer) As Boolean

Dim i As Integer
Dim colNum As Integer
Dim b As Boolean
Dim s As String

  b = False
  For i = 0 To 6
    
    Select Case i
      Case 0: colNum = 2
      Case 1, 2, 3: colNum = i + 3
      Case 4, 5, 6: colNum = i + 4
    End Select
    s = sht.Cells(rowNum, colNum)
        
    If s <> "" And UCase(s) <> "X" And UCase(s) <> "|fffd|" And i > 0 Then
      If Abs(CDbl(s) >= 0.01) Then b = True
    End If

    If FieldTypes(i) = "3" Then
      s = CurrToXML(s)
    End If
    elemRow.setAttribute FieldNames(i), s
  Next i
  
  getOneRowData = b
  Exit Function

End Function
Private Sub getRowDataSection(sht As Worksheet, elemData As IXMLDOMElement, startRow, endRow As Integer)
  Dim i As Integer
  Dim elemRecord As IXMLDOMElement
  
  For i = startRow To endRow
    If sht.Cells(i, 2).Text <> "" And Mid(sht.Cells(i, 4).FormulaR1C1, 1, 1) <> "=" Then
      Set elemRecord = elemData.ownerDocument.createElement("RECORD")
      If getOneRowData(sht, elemRecord, i) Then
        elemData.appendChild elemRecord
      End If
    End If
  Next i
End Sub

Public Function getTemplateVersion130(aBookName As String) As String
  getTemplateVersion130 = "" 'Workbooks(aBookName).Worksheets("Active").Cells(6, 10)
End Function

Public Function getData0503130(ByVal aBookName As String) As String
Dim doc As IXMLDOMDocument
Dim elemMain As IXMLDOMElement
Dim elemList As IXMLDOMElement
Dim elemData As IXMLDOMElement
Dim sVerTmp As String
Dim shtA As Worksheet
Dim elemNamedValues As IXMLDOMElement

  Set doc = New DOMDocument
  Set elemList = doc.createElement("DATASETS")
  doc.appendChild elemList
  
  sVerTmp = getTemplateVersion130(aBookName)
    
  elemList.setAttribute "TEMPLATE_VERSION", sVerTmp
  elemList.setAttribute "LIB_VERSION", XLA_VERSION
  fillFieldDescs
  fillSpravFields
  'Active
  Set elemMain = createElement("DATASET", elemList)
  elemMain.setAttribute "TABLE_NAME", "CONS_STATIC_ACTIVE"
  elemMain.setAttribute "NAME", "REP130_ACTIVE"
  elemMain.setAttribute "REPTYPE", REPTYPE_0503130_PBS
    
  getMetadata FieldNames, FieldTypes, elemMain
  
  Set elemData = createElement("DATA", elemMain)
    
  Set shtA = Workbooks(aBookName).Worksheets("Active")
  getRowDataSection shtA, elemData, 16, 62
  
  'Passive
  Set elemMain = createElement("DATASET", elemList)
  elemMain.setAttribute "TABLE_NAME", "CONS_STATIC_PASSIVE"
  elemMain.setAttribute "NAME", "REP130_PASSIVE"
  elemMain.setAttribute "REPTYPE", REPTYPE_0503130_PBS
    
  getMetadata FieldNames, FieldTypes, elemMain
  
  Set elemData = createElement("DATA", elemMain)
  getRowDataSection Workbooks(aBookName).Worksheets("Passive"), elemData, 6, 28
  
  'SPRAV
  Set elemMain = createElement("DATASET", elemList)
  elemMain.setAttribute "TABLE_NAME", "CONS_STATIC_SPRAV"
  elemMain.setAttribute "NAME", "REP130_SPRAV"
  elemMain.setAttribute "REPTYPE", REPTYPE_0503130_PBS
  
  getMetadata SpravFields, SpravFieldTypes, elemMain
  
  Set elemData = createElement("DATA", elemMain)
  getSpravData Workbooks(aBookName).Worksheets("Sprav"), elemData
  
  'Set elemNamedValues = createElement("CUSTOM_ITEMS", elemMain)
  shtA.Activate
  'getNamedValueElem shtA, "REP_PERIOD", elemNamedValues
  'getNamedValueElem shtA, "ORG", elemNamedValues
  'getNamedValueElem shtA, "BUDGET", elemNamedValues
  'getNamedValueElem shtA, "DIVIDER", elemNamedValues
    
  getData0503130 = elemList.XML
End Function
        
Private Function FindRow(ByRef sht As Worksheet, ByVal accNum As String) As Integer
Dim r As Range
Dim rB As Range
  sht.Activate
  Set rB = sht.Range("B:B")
  Set r = rB.Find(What:=accNum, After:=sht.Cells(1, 2), LookIn:=xlValues, _
         SearchOrder:=xlByRows, SearchDirection:=xlNext)
        
  If r Is Nothing Then
    FindRow = 0
  Else: FindRow = r.Row
  End If
End Function
        
Private Sub fillOneRow(sht As Worksheet, ByVal elemRow As IXMLDOMElement, rNum As Integer)
Dim accNumber As String
  If UCase(sht.Cells(rNum, 4).Text) <> "X" And UCase(sht.Cells(rNum, 4).Text) <> "|fffd|" Then
    sht.Cells(rNum, 4) = XMLToCurr(elemRow.getAttribute("NY_BUDG"))
  End If
  If UCase(sht.Cells(rNum, 5).Text) <> "X" And UCase(sht.Cells(rNum, 5).Text) <> "|fffd|" Then
    sht.Cells(rNum, 5) = XMLToCurr(elemRow.getAttribute("NY_NOBUDG"))
  End If
  If UCase(sht.Cells(rNum, 6).Text) <> "X" And UCase(sht.Cells(rNum, 6).Text) <> "|fffd|" Then
    sht.Cells(rNum, 6) = XMLToCurr(elemRow.getAttribute("NY_TEMP"))
  End If
  If UCase(sht.Cells(rNum, 8).Text) <> "X" And UCase(sht.Cells(rNum, 8).Text) <> "|fffd|" Then
    sht.Cells(rNum, 8) = XMLToCurr(elemRow.getAttribute("CUR_BUDG"))
  End If
  If UCase(sht.Cells(rNum, 9).Text) <> "X" And UCase(sht.Cells(rNum, 9).Text) <> "|fffd|" Then
    sht.Cells(rNum, 9) = XMLToCurr(elemRow.getAttribute("CUR_NOBUDG"))
  End If
  If UCase(sht.Cells(rNum, 10).Text) <> "X" And UCase(sht.Cells(rNum, 10).Text) <> "|fffd|" Then
    sht.Cells(rNum, 10) = XMLToCurr(elemRow.getAttribute("CUR_TEMP"))
  End If
End Sub

Public Sub load0503130(aBookName As String, dataElem As IXMLDOMElement)
Dim dataList As IXMLDOMNodeList
Dim rowElem, dataSet As IXMLDOMElement
Dim i As Integer
Dim accNum, MacroName As String
Dim rNum As Integer
Dim shA As Worksheet
Dim shP As Worksheet
Dim shS As Worksheet

  If dataElem Is Nothing Then Exit Sub
  Set shA = Workbooks(aBookName).Worksheets("Active")
  Set shP = Workbooks(aBookName).Worksheets("Passive")
  Set shS = Workbooks(aBookName).Worksheets("Sprav")
  
  shA.Unprotect
  shP.Unprotect
  shS.Unprotect
  
  Set dataSetList = dataElem.getElementsByTagName("DATASET")
  For Each dataSet In dataSetList
    Set dataList = dataSet.getElementsByTagName("RECORD")
    dataSetName = dataSet.getAttribute("NAME")
    If dataSetName = "REP130_ACTIVE" Then
      For i = 0 To dataList.Length - 1
        Set rowElem = dataList.Item(i)
        accNum = rowElem.getAttribute("CODE")
        rNum = FindRow(shA, accNum)
        If rNum > 0 Then
          fillOneRow shA, rowElem, rNum
        End If
      Next i
    ElseIf dataSetName = "REP130_PASSIVE" Then
      For i = 0 To dataList.Length - 1
        Set rowElem = dataList.Item(i)
        accNum = rowElem.getAttribute("CODE")
        rNum = FindRow(shP, accNum)
        If rNum > 0 Then
          fillOneRow shP, rowElem, rNum
        End If
      Next i
    ElseIf dataSetName = "REP130_SPRAV" Then
      fillSpravFields
      For i = 0 To dataList.Length - 1
        Set rowElem = dataList.Item(i)
        fillSpravData shS, rowElem
      Next i
      For Each accNum In SpravAccNums
        If (shS.Range("BEGIN_ROW" & accNum).Row + 1 <> shS.Range("END_ROW" & accNum).Row - 1) Then
          MacroName = "'" & shS.parent.name & "'" & "!" & shS.CodeName & ".DelRow"
          Application.Run MacroName, accNum
        End If
      Next
    End If
  Next
    
  'shA.Columns(2).Hidden = True
  'shP.Columns(2).Hidden = True
  shA.Protect DrawingObjects:=False, Contents:=True, Scenarios:= _
        False, AllowFormattingCells:=False, AllowFormattingColumns:=False, _
        AllowFormattingRows:=False, AllowInsertingColumns:=False, AllowInsertingRows _
        :=False, AllowInsertingHyperlinks:=False, AllowDeletingColumns:=False, _
        AllowDeletingRows:=False, AllowSorting:=True, AllowFiltering:=True, _
        AllowUsingPivotTables:=True
   shP.Protect DrawingObjects:=False, Contents:=True, Scenarios:= _
        False, AllowFormattingCells:=False, AllowFormattingColumns:=False, _
        AllowFormattingRows:=False, AllowInsertingColumns:=False, AllowInsertingRows _
        :=False, AllowInsertingHyperlinks:=False, AllowDeletingColumns:=False, _
        AllowDeletingRows:=False, AllowSorting:=True, AllowFiltering:=True, _
        AllowUsingPivotTables:=True
   shS.Protect DrawingObjects:=False, Contents:=True, Scenarios:= _
        False, AllowFormattingCells:=False, AllowFormattingColumns:=False, _
        AllowFormattingRows:=False, AllowInsertingColumns:=False, AllowInsertingRows _
        :=False, AllowInsertingHyperlinks:=False, AllowDeletingColumns:=False, _
        AllowDeletingRows:=False, AllowSorting:=True, AllowFiltering:=True, _
        AllowUsingPivotTables:=True
End Sub

Sub getSpravData(sht As Worksheet, elemData As IXMLDOMElement)
Dim beingRow, endRow, i As Integer
  For Each acc In SpravAccNums
    beginRow = sht.Range("BEGIN_ROW" & acc).Row
    endRow = sht.Range("END_ROW" & acc).Row
    For i = beginRow + 1 To endRow - 1
      getSpravRowData acc, sht, elemData, i
    Next i
  Next
End Sub

Private Sub getSpravRowData(ByVal accNum As String, sht As Worksheet, elemData As IXMLDOMElement, rowNum As Integer)

Dim i As Integer
Dim colNum As Integer
Dim b As Boolean
Dim s As String
Dim elemRow As IXMLDOMElement
  b = False
  Set elemRow = elemData.ownerDocument.createElement("RECORD")
  
  For i = 0 To 9
    Select Case i
      Case 0: colNum = -1
      Case 1, 2, 3: colNum = i
      Case 4, 5: colNum = i + 1
      Case 7, 8: colNum = i + 1
      Case 6, 9: colNum = 0
    End Select
    If (colNum > 0) Then
      s = sht.Cells(rowNum, colNum)
    ElseIf colNum = -1 Then
      s = accNum
    Else: s = ""
    End If
        
    If s <> "" And UCase(s) <> "X" And UCase(s) <> "|fffd|" And i > 3 Then
      If Abs(CDbl(s) >= 0.01) Then b = True
    End If

    If i > 3 Then
      s = CurrToXML(s)
    End If
    elemRow.setAttribute SpravFields(i), s
  Next i
  
  If b Then
    elemData.appendChild elemRow
  End If

End Sub

Private Sub fillSpravFields()
Dim i As Integer
  SpravAccNums = Array("01", "02", "03", "05", "07", "10", "11", "12", "17", "18")
  For i = 0 To 9
    Select Case (i)
      Case 0:
        SpravFieldTypes(i) = "1"
        SpravFields(i) = "BALANCE_NUMBER"
      Case 1:
        SpravFieldTypes(i) = "1"
        SpravFields(i) = "ACCOUNT_NUMBER"
      Case 2:
        SpravFieldTypes(i) = "1"
        SpravFields(i) = "ACCOUNT_NAME"
      Case 3:
        SpravFieldTypes(i) = "1"
        SpravFields(i) = "CODE"
      Case 4:
        SpravFieldTypes(i) = "3"
        SpravFields(i) = "NY_BUDG"
      Case 5:
        SpravFieldTypes(i) = "3"
        SpravFields(i) = "NY_NOBUDG"
      Case 6:
        SpravFieldTypes(i) = "3"
        SpravFields(i) = "NY_TEMP"
      Case 7:
        SpravFieldTypes(i) = "3"
        SpravFields(i) = "CUR_BUDG"
      Case 8:
        SpravFieldTypes(i) = "3"
        SpravFields(i) = "CUR_NOBUDG"
      Case 9:
        SpravFieldTypes(i) = "3"
        SpravFields(i) = "CUR_TEMP"
    End Select
  Next i
End Sub



Sub fillSpravData(sht As Worksheet, ByVal rowElem As IXMLDOMElement)
Dim balAcc, MacroName As String
Dim rowNum As Integer
  sht.Unprotect
  balAcc = rowElem.getAttribute("BALANCE_NUMBER")
  rowNum = sht.Range("END_ROW" & balAcc).Row - 1
  sht.Cells(rowNum, 1) = rowElem.getAttribute("ACCOUNT_NUMBER")
  sht.Cells(rowNum, 2) = rowElem.getAttribute("ACCOUNT_NAME")
  sht.Cells(rowNum, 3) = balAcc & "1"
  sht.Cells(rowNum, 5) = XMLToCurr(rowElem.getAttribute("NY_BUDG"))
  sht.Cells(rowNum, 6) = XMLToCurr(rowElem.getAttribute("NY_NOBUDG"))
  sht.Cells(rowNum, 8) = XMLToCurr(rowElem.getAttribute("CUR_BUDG"))
  sht.Cells(rowNum, 9) = XMLToCurr(rowElem.getAttribute("CUR_NOBUDG"))
  MacroName = "'" & sht.parent.name & "'" & "!" & sht.CodeName & ".AddRow"
  Application.Run MacroName, balAcc
End Sub
Attribute VB_Name = "proc0521421"
Private Function FindRow(sht As Worksheet, ByVal accNum As String) As Integer
Dim r As Range
Dim rB As Range

  sht.Select
  Set rB = sht.Range("B:B")
  Set r = rB.Find(What:=accNum, After:=sht.Cells(1, 2), LookIn:=xlValues, _
         SearchOrder:=xlByRows, SearchDirection:=xlNext)
        
  If r Is Nothing Then
    FindRow = 0
  Else: FindRow = r.Row
  End If
End Function

Private Sub fillOneRow(sht As Worksheet, elemRow As IXMLDOMElement, rNum As Integer)
  
  sht.Cells(rNum, 12) = XMLToCurr(elemRow.getAttribute("I0_DATE_BUDG"))
  sht.Cells(rNum, 13) = XMLToCurr(elemRow.getAttribute("I0_DATE_NOBUDG"))
  sht.Cells(rNum, 16) = XMLToCurr(elemRow.getAttribute("I2_DATE_BUDG"))
  sht.Cells(rNum, 17) = XMLToCurr(elemRow.getAttribute("I2_DATE_NOBUDG"))
  sht.Cells(rNum, 18) = XMLToCurr(elemRow.getAttribute("I3_DATE_BUDG"))
  sht.Cells(rNum, 19) = XMLToCurr(elemRow.getAttribute("I3_DATE_NOBUDG"))
  sht.Cells(rNum, 20) = XMLToCurr(elemRow.getAttribute("I4_DATE_BUDG"))
  sht.Cells(rNum, 21) = XMLToCurr(elemRow.getAttribute("I4_DATE_NOBUDG"))
  sht.Cells(rNum, 22) = XMLToCurr(elemRow.getAttribute("I1_DATE_BUDG"))
  sht.Cells(rNum, 21) = XMLToCurr(elemRow.getAttribute("I1_DATE_NOBUDG"))
  sht.Cells(rNum, 24) = XMLToCurr(elemRow.getAttribute("I5_DATE_BUDG"))
  sht.Cells(rNum, 25) = XMLToCurr(elemRow.getAttribute("I5_DATE_BUDG"))
End Sub

Public Sub load0521421(aBookName As String, dataElem As IXMLDOMElement)
Dim dataList As IXMLDOMNodeList
Dim rowElem As IXMLDOMElement
Dim i As Integer
Dim accNum As String
Dim rNum As Integer
Dim sht As Worksheet
Dim serviceElem As IXMLDOMElement
Dim s As String
Dim btn As Object
Dim exportView As String
Dim sBuf As String

  If dataElem Is Nothing Then Exit Sub
  Set sht = Workbooks(aBookName).Sheets("consolidated")
  sht.Columns(2).Hidden = False
   
  Set dataList = dataElem.getElementsByTagName("RECORD")
  For i = 0 To dataList.Length - 1
    Set rowElem = dataList.Item(i)
    accNum = rowElem.getAttribute("ROW_ID")
    
    rNum = FindRow(sht, accNum)
    If rNum > 0 Then
      fillOneRow sht, rowElem, rNum
    End If
  Next i
  
  sht.Columns(2).Hidden = True
  
  Set dataList = dataElem.getElementsByTagName("SERVICE_CELLS")
  If (dataList.Length > 0) Then
    Set serviceElem = dataList.Item(0)
    exportView = serviceElem.getAttribute("EXPORTVIEW")
    If (exportView <> "1") And (exportView <> "2") Then Exit Sub
    
    If exportView = "1" Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Set btn = sht.OLEObjects(1)
      btn.Visible = True
      
      sht.Columns(7).Hidden = True
      sht.Columns(8).Hidden = True
      sht.Columns(10).Hidden = True
      sht.Columns(11).Hidden = True
      sht.Columns(14).Hidden = True
      sht.Columns(15).Hidden = True
      
      sht.Cells(14, 9) = 5
      sht.Cells(14, 12) = 6
      sht.Cells(14, 16) = "=RC[-3]"
    End If
    
    If exportView = "2" Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Set btn = sht.OLEObjects(2)
      btn.Visible = True
    End If
    
    sBuf = ""
    Set dataList = serviceElem.getElementsByTagName("CELL")
    For i = 0 To dataList.Length - 1
      Set rowElem = dataList.Item(i)
      s = rowElem.getAttribute("NAME")
      ActiveWorkbook.Names.Add name:="Consolidated!" + s, RefersToR1C1:= _
        "=Consolidated!R" + CStr(150 + i) + "C1"
        
      sht.Cells(150 + i, 1).value = rowElem.getAttribute("VALUE")
      sBuf = sBuf + rowElem.getAttribute("NAME") + "  " + rowElem.getAttribute("VALUE") + Chr(13) + Chr(10)
    Next i
            
  End If
End Sub




Attribute VB_Name = "proc0521430"
Private Function FindRow(sht As Worksheet, ByVal accNum As String) As Integer
Dim r As Range
Dim rB As Range

  If accNum = "" Then
    FindRow = 0
    Exit Function
  End If
  
  sht.Select
  Set rB = sht.Range("B:B")
  Set r = rB.Find(What:=accNum, After:=sht.Cells(1, 2), LookIn:=xlValues, _
         SearchOrder:=xlByRows, SearchDirection:=xlNext)
        
  If r Is Nothing Then
    FindRow = 0
  Else: FindRow = r.Row
  End If
End Function

Private Sub fillOneRow(sht As Worksheet, elemRow As IXMLDOMElement, rNum As Integer)
  sht.Cells(rNum, 10) = XMLToCurr(elemRow.getAttribute("I0_NEWYEAR_BUDG"))
  sht.Cells(rNum, 11) = XMLToCurr(elemRow.getAttribute("I0_NEWYEAR_NOBUDG"))
  sht.Cells(rNum, 14) = XMLToCurr(elemRow.getAttribute("I2_NEWYEAR_BUDG"))
  sht.Cells(rNum, 15) = XMLToCurr(elemRow.getAttribute("I2_NEWYEAR_NOBUDG"))
  sht.Cells(rNum, 16) = XMLToCurr(elemRow.getAttribute("I3_NEWYEAR_BUDG"))
  sht.Cells(rNum, 17) = XMLToCurr(elemRow.getAttribute("I3_NEWYEAR_NOBUDG"))
  sht.Cells(rNum, 18) = XMLToCurr(elemRow.getAttribute("I4_NEWYEAR_BUDG"))
  sht.Cells(rNum, 19) = XMLToCurr(elemRow.getAttribute("I4_NEWYEAR_NOBUDG"))
  sht.Cells(rNum, 20) = XMLToCurr(elemRow.getAttribute("I1_NEWYEAR_BUDG"))
  sht.Cells(rNum, 21) = XMLToCurr(elemRow.getAttribute("I1_NEWYEAR_NOBUDG"))
  sht.Cells(rNum, 22) = XMLToCurr(elemRow.getAttribute("I5_NEWYEAR_BUDG"))
  sht.Cells(rNum, 23) = XMLToCurr(elemRow.getAttribute("I5_NEWYEAR_NOBUDG"))

  sht.Cells(rNum, 30) = XMLToCurr(elemRow.getAttribute("I0_DATE_BUDG"))
  sht.Cells(rNum, 31) = XMLToCurr(elemRow.getAttribute("I0_DATE_NOBUDG"))
  sht.Cells(rNum, 34) = XMLToCurr(elemRow.getAttribute("I2_DATE_BUDG"))
  sht.Cells(rNum, 35) = XMLToCurr(elemRow.getAttribute("I2_DATE_NOBUDG"))
  sht.Cells(rNum, 36) = XMLToCurr(elemRow.getAttribute("I3_DATE_BUDG"))
  sht.Cells(rNum, 37) = XMLToCurr(elemRow.getAttribute("I3_DATE_NOBUDG"))
  sht.Cells(rNum, 38) = XMLToCurr(elemRow.getAttribute("I4_DATE_BUDG"))
  sht.Cells(rNum, 39) = XMLToCurr(elemRow.getAttribute("I4_DATE_NOBUDG"))
  sht.Cells(rNum, 40) = XMLToCurr(elemRow.getAttribute("I1_DATE_BUDG"))
  sht.Cells(rNum, 41) = XMLToCurr(elemRow.getAttribute("I1_DATE_NOBUDG"))
  sht.Cells(rNum, 42) = XMLToCurr(elemRow.getAttribute("I5_DATE_BUDG"))
  sht.Cells(rNum, 43) = XMLToCurr(elemRow.getAttribute("I5_DATE_NOBUDG"))
End Sub

Public Sub load0521430(aBookName As String, dataElem As IXMLDOMElement)
Dim dataList As IXMLDOMNodeList
Dim rowElem As IXMLDOMElement
Dim i As Integer
Dim accNum As String
Dim rNum As Integer
Dim shA As Worksheet
Dim shP As Worksheet
Dim btn As Object
Dim exportView As String

  If dataElem Is Nothing Then Exit Sub
  
  Set shA = Workbooks(aBookName).Sheets("Active")
  shA.Columns(2).Hidden = False
  Set shP = Workbooks(aBookName).Sheets("Passive")
  shP.Columns(2).Hidden = False
   
  Set dataList = dataElem.getElementsByTagName("RECORD")
  For i = 0 To dataList.Length - 1
    Set rowElem = dataList.Item(i)
    accNum = rowElem.getAttribute("ROW_ID")
        
    rNum = FindRow(shA, accNum)
    If rNum > 0 Then
      fillOneRow shA, rowElem, rNum
    Else
      rNum = FindRow(shP, accNum)
      If rNum > 0 Then
        fillOneRow shP, rowElem, rNum
      End If
    End If
  Next i
    
  shA.Columns(2).Hidden = True
  shP.Columns(2).Hidden = True
  
  Set dataList = dataElem.getElementsByTagName("SERVICE_CELLS")
  If (dataList.Length > 0) Then
    Set serviceElem = dataList.Item(0)
    exportView = serviceElem.getAttribute("EXPORTVIEW")
    If (exportView <> "1" And exportView <> "2") Then Exit Sub
    
    If exportView = 1 Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Set btn = shA.OLEObjects(1)
      btn.Visible = True
      shA.Columns(5).Hidden = True
      shA.Columns(6).Hidden = True
      shA.Columns(8).Hidden = True
      shA.Columns(9).Hidden = True
      shA.Columns(12).Hidden = True
      shA.Columns(13).Hidden = True
      
      shA.Cells(13, 7) = 4
      shA.Cells(13, 10) = 5
      shA.Cells(13, 11) = 6
      shA.Cells(13, 14) = 7
      
      shA.Columns(25).Hidden = True
      shA.Columns(26).Hidden = True
      shA.Columns(28).Hidden = True
      shA.Columns(29).Hidden = True
      shA.Columns(32).Hidden = True
      shA.Columns(33).Hidden = True
      
      shA.Cells(13, 27) = "=RC[-3]+1"
      shA.Cells(13, 30) = "=RC[-3]+1"
      shA.Cells(13, 31) = "=RC[-1]+1"
      shA.Cells(13, 34) = "=RC[-3]+1"
      
      shP.Columns(5).Hidden = True
      shP.Columns(6).Hidden = True
      shP.Columns(8).Hidden = True
      shP.Columns(9).Hidden = True
      shP.Columns(12).Hidden = True
      shP.Columns(13).Hidden = True
      
      shP.Columns(25).Hidden = True
      shP.Columns(26).Hidden = True
      shP.Columns(28).Hidden = True
      shP.Columns(29).Hidden = True
      shP.Columns(32).Hidden = True
      shP.Columns(33).Hidden = True
      
      shP.Cells(4, 7) = 4
      shP.Cells(4, 10) = 5
      shP.Cells(4, 11) = 6
      shP.Cells(4, 14) = 7
      
      shP.Cells(4, 27) = "=RC[-3]+1"
      shP.Cells(4, 30) = "=RC[-3]+1"
      shP.Cells(4, 31) = "=RC[-1]+1"
      shP.Cells(4, 34) = "=RC[-3]+1"
    End If
    
    If exportView = 2 Then '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Set btn = shA.OLEObjects(2)
      btn.Visible = True
    End If
    
    Set dataList = serviceElem.getElementsByTagName("CELL")
    For i = 0 To dataList.Length - 1
      Set rowElem = dataList.Item(i)
      s = rowElem.getAttribute("NAME")
      ActiveWorkbook.Names.Add name:="Active!" + s, RefersToR1C1:= _
        "=Active!R" + CStr(135 + i) + "C1"
        
      shA.Cells(135 + i, 1).value = rowElem.getAttribute("VALUE")
    Next i
    
    
  End If
End Sub



Attribute VB_Name = "reportObject"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim Tables() As Table
Dim TextCols() As Long
Dim AmtCols() As Long
Dim StartDataRow, EndDataRow As String

Public Sub AddTable(ByRef tbl As Table)
Dim tmp() As Table
Dim i, sz As Integer
On Error GoTo err
  sz = UBound(Tables) + 1
  GoTo noErr
err:
  sz = 0
noErr:
  ReDim tmp(sz)
  For i = 0 To sz - 1
    Set tmp(i) = Tables(i)
  Next i
  Set tmp(UBound(tmp)) = tbl
  ReDim Tables(UBound(tmp))
  Tables = tmp
End Sub

Public Function GetReportData(ByVal aBookName As String, repObj As IReport) As String
Dim doc As IXMLDOMDocument
Dim elemList As IXMLDOMElement
Dim sht As Worksheet
Dim sVerTmp As String
Dim elemNamedValues As IXMLDOMElement
Dim tbl As Table

  Set doc = New DOMDocument
  
  Set elemList = doc.createElement("DATASETS")
  doc.appendChild elemList
    
  For i = 0 To UBound(Tables)
    Set tbl = Tables(i)
    tbl.GetTableDataSet aBookName, elemList, repObj
  Next i
  
  elemList.setAttribute "TEMPLATE_VERSION", ""
  elemList.setAttribute "LIB_VERSION", XLA_VERSION
  
  GetReportData = elemList.XML

End Function

Public Sub LoadReportData(aBookName As String, dataElem As IXMLDOMElement, repObj As IReport)
  LoadReportDataPostf aBookName, dataElem, repObj, False
End Sub

Public Function GetPostfName(sName As String) As String
  If Len(sName) < 3 Then
    GetPostfName = sName
  Else
    GetPostfName = Mid$(sName, 1, 3)
    '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| SRC
    If GetPostfName = "SOU" Then
      GetPostfName = "SRC"
    End If
  End If
End Function

Public Sub LoadReportDataPostf(aBookName As String, dataElem As IXMLDOMElement, repObj As IReport, bPostf As Boolean)
Dim dataList As IXMLDOMNodeList
Dim dataSetElem As IXMLDOMElement
Dim i, k As Integer
Dim dataSetName As String
Dim rNum As Integer
Dim sht As Worksheet
Dim book As Workbook
Dim sPostf As String

  If dataElem Is Nothing Then Exit Sub
  Set dataList = dataElem.getElementsByTagName("DATASET")
  For i = 0 To dataList.Length - 1
    Set dataSetElem = dataList.Item(i)
    dataSetName = dataSetElem.getAttribute("NAME")
    For k = 0 To UBound(Tables)
      If Tables(k).Get_Name = dataSetName Then
        If bPostf Then
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          sPostf = "_" + GetPostfName(dataSetName)
        End If
        Tables(k).LoadTableFromDataSetPostf aBookName, dataSetElem, repObj, sPostf
      End If
    Next k
  Next i
  
End Sub

Public Function getIncSrcCodeData(code As String, name As String) As String
Dim s As String
  s = Replace(code, " ", "")
  If (name = KADMD_CODE Or name = KADMI_CODE) Then
    getIncSrcCodeData = Mid(s, 1, 3)
  ElseIf (name = KD_CODE Or name = KI_CODE) Then
    getIncSrcCodeData = Mid(s, 4, 14)
  ElseIf (name = KESD_CODE Or name = KESI_CODE) Then
    getIncSrcCodeData = Mid(s, 18, 3)
  Else
    getIncSrcCodeData = code
  End If
End Function

Public Function getExpCodeData(code As String, name As String) As String
Dim s As String
  s = Replace(code, " ", "")
  If (name = KADMR_CODE) Then
    getExpCodeData = Mid(s, 1, 3)
  ElseIf (name = KFSR_CODE) Then
    getExpCodeData = Mid(s, 4, 4)
  ElseIf (name = KCSR_CODE) Then
    getExpCodeData = Mid(s, 8, 7)
  ElseIf (name = KVR_CODE) Then
    getExpCodeData = Mid(s, 15, 3)
  ElseIf (name = KESR_CODE) Then
    getExpCodeData = Mid(s, 18, 3)
  End If
End Function
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
