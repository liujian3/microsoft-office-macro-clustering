Attribute VB_Name = "AutoExec"
Option Explicit

Sub Main()
    
    On Error GoTo Main_Err
    
    Call InitializeButtonCaption
    
Main_Exit:

    On Error Resume Next
    
    If (ThisDocument.AttachedTemplate.Saved = False) Then
        ThisDocument.AttachedTemplate.Saved = True
    End If

    Exit Sub
    
Main_Err:
    Resume Main_Exit

End Sub

Private Function InitializeButtonCaption() As Boolean

    Dim cmdButton As CommandBarButton
    Dim cmdBar As CommandBar
    
    InitializeButtonCaption = False
    
    Call Localization_Initialize

    For Each cmdBar In CommandBars
        If (cmdBar.Name = gsProductName) Then
            Set cmdButton = cmdBar.Controls.Item(1)
            If (cmdButton.TooltipText <> GetLocalizedString(IDS_BCLCustomModule_CreatePDFTooltip)) Then
            
                cmdButton.TooltipText = GetLocalizedString(IDS_BCLCustomModule_CreatePDFTooltip)
                cmdButton.caption = GetLocalizedString(IDS_BCLCustomModule_CreatePDFCaption)
                
                InitializeButtonCaption = True
            End If
        End If
    Next cmdBar
    
End Function

Attribute VB_Name = "BCLCustomModule"
Option Explicit

Public Const gsProductName = "BCL easyPDF Printer 7"
Public Const gsPrinterName = "easyPDF Printer 7"
Public Const gsSubName = "CreatePDF_EPDFD7"

Sub CreatePDF_EPDFD7()
    Call Localization_Initialize
    CreatePDFModule.CreatePDFFile
End Sub

'Put the 16x16 icon you want in the clipboard and run this to create the button
Private Sub CreateButton()

    Dim customBar As CommandBar
    Dim newButton As CommandBarButton
    Dim Found As Boolean
    Dim bar As CommandBar

    Call Localization_Initialize

    ' Delete macro buttons
    Found = False
    For Each bar In CommandBars
        If bar.Name = gsProductName Then Found = True
        If (bar.Name = gsProductName) Then bar.Delete
    Next bar

    ' Create macro button
    If Not Found Then
        Set customBar = CommandBars.Add(Name:=gsProductName, Position:=msoBarBottom)
        customBar.Visible = True
        
        MsgBox "Please copy the CreatePDF icon to the clipboard"
        
        Set newButton = customBar.Controls.Add(msoControlButton, 2)
        newButton.OnAction = "BCLCustomModule." + gsSubName
        newButton.TooltipText = "Create PDF (" + gsProductName + ")"
        newButton.caption = "Create PDF"
        newButton.PasteFace

    End If

End Sub


Attribute VB_Name = "CreatePDFForm"
Attribute VB_Base = "0{30A2EC9E-D5DA-4D64-8BF4-AE12E8AA31C3}{55CF164A-9BDB-4EBD-B434-8C23E925341D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private bProceed As Boolean
Private sBookmarkDepth As String

Private Const gnUserFormMax = 399
Private Const gnUserFormMin = 149.25

Public Function ConvertHyperlink() As Boolean
    If CheckHyperlinks.Value Then
        ConvertHyperlink = True
    Else
        ConvertHyperlink = False
    End If
End Function

Public Function CreateBookmark() As Boolean
    If CheckBookmarks.Value Then
        CreateBookmark = True
    Else
        CreateBookmark = False
    End If
End Function

Public Function Proceed() As Boolean
    Proceed = bProceed
End Function

Public Function GetBookmarkDepthString() As String
    GetBookmarkDepthString = sBookmarkDepth
End Function

Private Sub CheckAllStyles_Click()

    Dim Count As Long
    Dim sty As Style

    On Error Resume Next

    ListStyles.Clear

    Count = 0
    For Each sty In ActiveDocument.Styles
        ' should we add this style to the list?
        If (sty.InUse Or CheckAllStyles.Value) Then
            If (IsItemInserted(sty.NameLocal) = False) Then
                Call ListStyles.AddItem(sty.NameLocal)
                Count = Count + 1
            End If
        End If
    Next sty
End Sub

Private Sub CheckBookmarks_Click()
    Dim bEnabled As Boolean

    On Error Resume Next
    
    If CheckBookmarks.Value Then
        bEnabled = True
    Else
        bEnabled = False
    End If

    FrameBookmarks.Enabled = bEnabled
    LabelWordStyles.Enabled = bEnabled
    ListStyles.Enabled = bEnabled
    CommandDelete.Enabled = bEnabled
    CommandMoveLeft.Enabled = bEnabled
    CommandMoveRight.Enabled = bEnabled
    CheckAllStyles.Enabled = bEnabled
    LabelDepth.Enabled = bEnabled
    ListDepth.Enabled = bEnabled
    LabelDescription.Enabled = bEnabled
    
    If (bEnabled) Then
    
        ' when bookmark is on, hyperlink will also be on
        CheckHyperlinks.Value = CheckBookmarks.Value
        
        If (ListDepth.ListIndex <> -1) Then
            ListDepth.SetFocus
        ElseIf (ListStyles.ListIndex <> -1) Then
            ListStyles.SetFocus
        ElseIf (ListDepth.ListCount <> 0) Then
            ListDepth.SetFocus
        Else
            ListStyles.SetFocus
        End If

        Me.Height = gnUserFormMax
        Call AdjustWindowLocation
    Else
        Me.Height = gnUserFormMin
    End If
End Sub

Private Function PixelToPoint(pixelVal As Long) As Long
    Dim hdc As Long

    hdc = GetDC(0)
    PixelToPoint = pixelVal / GetDeviceCaps(hdc, LOGPIXELSY) * 72
    Call ReleaseDC(0, hdc)

End Function

Private Sub AdjustWindowLocation()
    
    Dim rcDesktop As RECT
    Dim sysHt As Long
    Dim wndHt As Long
    
    If (SystemParametersInfo(SPI_GETWORKAREA, 0, rcDesktop, 0) <> 0) Then
        sysHt = rcDesktop.Bottom - rcDesktop.Top

        sysHt = PixelToPoint(sysHt)
        sysHt = sysHt - 2 ' have a little buffer
        
        wndHt = Me.Height
        
        If ((Me.Top + wndHt) > sysHt) Then
            Me.Move Me.Left, Me.Top - ((Me.Top + wndHt) - sysHt)
        End If
    End If

End Sub

Private Sub CheckHyperlinks_Click()
    
    On Error Resume Next
    
    If (Not CheckHyperlinks.Value) Then
        ' when hyperlink is off, bookmark will also be off
        CheckBookmarks.Value = CheckHyperlinks.Value
    End If
End Sub

Private Sub UserForm_Activate()

    On Error Resume Next
    
    CheckHyperlinks.Value = CBool(GetSetting(gsPrinterName, "Options", "ExtractHyperlinks", "False"))
    'CheckBookmarks.Value = CBool(GetSetting(gsPrinterName, "Options", "AddBookmarks", "False"))
    'CheckAllStyles.Value = CBool(GetSetting(gsPrinterName, "Options", "ShowAllStyles", "False"))

    Me.caption = gsProductName
    
    bProceed = False
    sBookmarkDepth = ""
    
    Call InitStyleList ' call it once at begining
    Call CheckBookmarks_Click
    
End Sub

Private Sub CommandCancel_Click()
    bProceed = False
    Hide
End Sub

Private Sub CommandCreatePDF_Click()

    Dim selectedText As String
    Dim bookmarkDepth As Long
    Dim I As Long
    
    On Error Resume Next

    bProceed = True
    sBookmarkDepth = ""
    
    Hide
    
    Call SaveSetting(gsPrinterName, "Options", "ExtractHyperlinks", CStr(CheckHyperlinks.Value))
    'Call SaveSetting(gsPrinterName, "Options", "AddBookmarks", CStr(CheckBookmarks.Value))
    'Call SaveSetting(gsPrinterName, "Options", "ShowAllStyles", CStr(CheckAllStyles.Value))
    
    If (CheckBookmarks.Value) Then

        Call DeleteSetting(gsPrinterName, "StyleMap") ' refresh
        
        ' ListBox starts from 0
        For I = 0 To ListDepth.ListCount - 1
            
            selectedText = TrimDepthNumber(ListDepth.List(I))
            bookmarkDepth = CInt(ListDepthIndex.List(I))
        
            If Len(selectedText) <> 0 Then
                Call SaveSetting(gsPrinterName, "StyleMap", selectedText, CStr(bookmarkDepth))
                If Len(sBookmarkDepth) <> 0 Then
                    sBookmarkDepth = sBookmarkDepth + "|"
                End If
                sBookmarkDepth = sBookmarkDepth + selectedText + "|" + CStr(bookmarkDepth)
            End If
        Next I
    End If
End Sub

Private Sub CommandDelete_Click()
    
    Dim selectedText As String
    Dim bookmarkDepth As Long
    Dim idx As Long
    
    On Error Resume Next
    
    idx = ListDepth.ListIndex
    
    If (idx <> -1) Then
        selectedText = ListDepth.List(idx)
        bookmarkDepth = CInt(ListDepthIndex.List(idx))
        
        selectedText = TrimDepthNumber(selectedText)
    
        Call ListDepth.RemoveItem(idx)
        Call ListDepthIndex.RemoveItem(idx)
        Call ListStyles.AddItem(selectedText)

        If (ListDepth.ListCount <> 0) Then
            If (idx < ListDepth.ListCount) Then
                ListDepth.ListIndex = idx
            Else
                ListDepth.ListIndex = ListDepth.ListCount - 1
            End If
            
            ListDepth.SetFocus
        Else
            ListStyles.Selected(ListStyles.ListCount - 1) = True
            ListStyles.SetFocus
        End If
    Else
        ListStyles.SetFocus
    End If
End Sub

Private Sub CommandMoveLeft_Click()

    Dim selectedText As String
    Dim bookmarkDepth As Long
    Dim tabSpaces As String
    Dim idx As Long
    Dim I As Long

    On Error Resume Next

    idx = ListDepth.ListIndex
    
    If (idx <> -1) Then
        selectedText = ListDepth.List(idx)
        bookmarkDepth = CInt(ListDepthIndex.List(idx))
        
        selectedText = TrimDepthNumber(selectedText)
        
        If (bookmarkDepth > 1) Then
            
            bookmarkDepth = bookmarkDepth - 1
            
            tabSpaces = ""
            
            For I = 1 To bookmarkDepth - 1
                tabSpaces = tabSpaces & "      "
            Next I
            
            ListDepth.List(idx) = tabSpaces + CStr(bookmarkDepth) + ". " + selectedText
            ListDepthIndex.List(idx) = CStr(bookmarkDepth)

            ListDepth.SetFocus
        Else
            Call ListDepth.RemoveItem(idx)
            Call ListDepthIndex.RemoveItem(idx)
            Call ListStyles.AddItem(selectedText)

            ListStyles.Selected(ListStyles.ListCount - 1) = True
            ListStyles.SetFocus
        End If
    End If
End Sub

Private Sub CommandMoveRight_Click()

    Dim selectedText As String
    Dim bookmarkDepth As Long
    Dim tabSpaces As String
    Dim I As Long

    On Error Resume Next

    If (ListStyles.ListIndex <> -1) Then
    
        selectedText = ListStyles.List(ListStyles.ListIndex)
        Call ListStyles.RemoveItem(ListStyles.ListIndex)  ' remove the item
        
        Call ListDepth.AddItem("1. " + selectedText)
        Call ListDepthIndex.AddItem("1")
        
        ListDepth.Selected(ListDepth.ListCount - 1) = True
        
    ElseIf (ListDepth.ListIndex <> -1) Then
        
        selectedText = ListDepth.List(ListDepth.ListIndex)
        bookmarkDepth = CInt(ListDepthIndex.List(ListDepth.ListIndex))
        
        If (bookmarkDepth < 9) Then
            
            selectedText = TrimDepthNumber(selectedText)
            bookmarkDepth = bookmarkDepth + 1
            
            tabSpaces = ""
            
            For I = 1 To bookmarkDepth - 1
                tabSpaces = tabSpaces & "      "
            Next I
            
            ListDepth.List(ListDepth.ListIndex) = tabSpaces + CStr(bookmarkDepth) + ". " + selectedText
            ListDepthIndex.List(ListDepth.ListIndex) = CStr(bookmarkDepth)
            
            ListDepth.Selected(ListDepth.ListIndex) = True

        End If
    End If
    
    ListDepth.SetFocus
    
End Sub

Private Function IsItemInserted(itemName As String) As Boolean
    
    Dim I As Long
    Dim selectedText
    
    On Error Resume Next
    
    IsItemInserted = False ' default return value
    
    If (ListDepth.ListCount <= 0) Then
        Exit Function
    End If
    
    For I = 0 To ListDepth.ListCount - 1
        selectedText = ListDepth.List(I)

        If (IsNull(selectedText) = False) Then
            If InStr(selectedText, ". ") Then ' strip spaces
                selectedText = Mid(selectedText, InStr(selectedText, ". ") + 2)
            End If
            
            If (selectedText = itemName) Then
                IsItemInserted = True
                Exit Function
            End If
        End If
    Next I

End Function

Private Sub InitStyleList()

    Dim sty As Style
    Dim bookmarkDepth As Long
    Dim tabSpaces As String
    Dim I As Long

    On Error Resume Next

    ListStyles.Clear
    ListDepth.Clear
    ListDepthIndex.Clear

    If IsEmpty(GetAllSettings(gsPrinterName, "StyleMap")) Then
        Call SaveSetting(gsPrinterName, "StyleMap", ActiveDocument.Styles(wdStyleHeading1).NameLocal, 1)
        Call SaveSetting(gsPrinterName, "StyleMap", ActiveDocument.Styles(wdStyleHeading2).NameLocal, 2)
        Call SaveSetting(gsPrinterName, "StyleMap", ActiveDocument.Styles(wdStyleHeading3).NameLocal, 3)
        Call SaveSetting(gsPrinterName, "StyleMap", ActiveDocument.Styles(wdStyleHeading4).NameLocal, 4)
        Call SaveSetting(gsPrinterName, "StyleMap", ActiveDocument.Styles(wdStyleHeading5).NameLocal, 5)
        Call SaveSetting(gsPrinterName, "StyleMap", ActiveDocument.Styles(wdStyleHeading6).NameLocal, 6)
        Call SaveSetting(gsPrinterName, "StyleMap", ActiveDocument.Styles(wdStyleHeading7).NameLocal, 7)
        Call SaveSetting(gsPrinterName, "StyleMap", ActiveDocument.Styles(wdStyleHeading8).NameLocal, 8)
        Call SaveSetting(gsPrinterName, "StyleMap", ActiveDocument.Styles(wdStyleHeading9).NameLocal, 9)
        
        'For I = 1 To 9
        '    Call SaveSetting(gsPrinterName, "StyleMap", GetLocalizedString(IDS_CreatePDFForm_Heading) + str$(I), I)
        'Next
    End If

    For Each sty In ActiveDocument.Styles
        bookmarkDepth = CInt(GetSetting(gsPrinterName, "StyleMap", sty.NameLocal, "0"))

        If (bookmarkDepth >= 1 And bookmarkDepth <= 9) Then

            tabSpaces = ""

            For I = 1 To bookmarkDepth - 1
                tabSpaces = tabSpaces & "      "
            Next I
            
            Call ListDepth.AddItem(tabSpaces + CStr(bookmarkDepth) + ". " + sty.NameLocal)
            Call ListDepthIndex.AddItem(CStr(bookmarkDepth))
        Else
            ' should we add this style to the list?
            If (sty.InUse Or CheckAllStyles.Value) Then
                Call ListStyles.AddItem(sty.NameLocal)
            End If
        End If
    Next sty
End Sub

Private Function TrimDepthNumber(str As String) As String

    On Error Resume Next

    If InStr(str, ". ") Then
         TrimDepthNumber = Mid(str, InStr(str, ". ") + 2)
    End If

End Function

Private Sub ListDepth_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call CommandMoveRight_Click
End Sub

Private Sub ListDepth_Click()
    ListStyles.ListIndex = -1
End Sub

Private Sub ListStyles_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call CommandMoveRight_Click
End Sub

Private Sub ListStyles_Click()
    ListDepth.ListIndex = -1
End Sub

Private Sub UserForm_Initialize()

    Call LocalizeControls(Me)
    
    CheckHyperlinks.caption = GetLocalizedString(IDS_CreatePDFForm_CheckHyperlinks)
    CheckBookmarks.caption = GetLocalizedString(IDS_CreatePDFForm_CheckBookmarks)
    CheckAllStyles.caption = GetLocalizedString(IDS_CreatePDFForm_CheckAllStyles)
    CommandCreatePDF.caption = GetLocalizedString(IDS_CreatePDFForm_CommandCreatePDF)
    CommandCancel.caption = GetLocalizedString(IDS_CreatePDFForm_CommandCancel)
    FrameBookmarks.caption = GetLocalizedString(IDS_CreatePDFForm_FrameBookmarks)
    LabelWordStyles.caption = GetLocalizedString(IDS_CreatePDFForm_LabelWordStyles)
    LabelDepth.caption = GetLocalizedString(IDS_CreatePDFForm_LabelDepth)
    LabelDescription.caption = GetLocalizedString(IDS_CreatePDFForm_LabelDescription)
End Sub
Attribute VB_Name = "CreatePDFModule"
Option Explicit

Declare Function MessageBoxW Lib "user32" _
       (ByVal hWnd As Integer, ByVal txt As String, _
        ByVal caption As String, ByVal Typ As Integer) As Integer

Sub CreatePDFFile()

    Dim MyDoc As Word.Document
    
    Dim nOption As Long
    Dim bLoaded As Boolean
    Dim oAddin As Office.COMAddIn
    Dim oObj As Object
    Dim nRet As Long
    Dim bNewDocument As Boolean

    On Error GoTo CreatePDFFile_Err
    
    Set MyDoc = ActiveDocument

    If Len(MyDoc.Path) = 0 Then
        bNewDocument = True
    Else
        bNewDocument = False
    End If

    Call EnsureLocalizationInitialized

    If MyDoc.Saved = False Or Len(MyDoc.Path) = 0 Then
        If MsgBox(GetLocalizedString(IDS_CreatePDFModule_SavePDF), vbYesNoCancel + vbQuestion) <> vbYes Then
            Exit Sub
        End If

        MyDoc.Save

        ' We seem to get a crash (with WinXP & Win2K3) if we don't do this
        If bNewDocument Then
            Set MyDoc = MyDoc.Application.Documents.Open(FileName:=MyDoc.FullName, Revert:=True)
        End If
    End If

    Load CreatePDFForm
    bLoaded = True
    
    CreatePDFForm.Show vbModal
    
    nOption = 0
    If CreatePDFForm.ConvertHyperlink Then
        nOption = nOption Or 1
    End If
    
    If CreatePDFForm.CreateBookmark Then
        nOption = nOption Or 2
    End If
    
    If CreatePDFForm.Proceed Then
        Set oAddin = Word.Application.COMAddIns.Item("EPDF7.Connect")

        If oAddin.Connect = False Then
            oAddin.Connect = True
        End If

        Set oObj = oAddin.Object

        If LocalizationModule.gSendLocaleInfo Then
            Call SetLocaleResource(oObj)
        End If

        nRet = oObj.ProcessFile_EPDF(MyDoc, gsPrinterName, nOption, CreatePDFForm.GetBookmarkDepthString())
        
        'oAddin.Connect = False
    End If

CreatePDFFile_End:

    On Error Resume Next

    If bLoaded Then
        Unload CreatePDFForm
    End If
    
    Exit Sub

CreatePDFFile_Err:

    MsgBox Err.Description, vbOKOnly + vbInformation
    Resume CreatePDFFile_End

End Sub

Private Sub SetLocaleResource(oObj As Object)

    On Error GoTo SetLocaleResource_Err
    
    Call oObj.SetLocaleResource_EPDF(LocalizationModule.gFontName, _
                                      LocalizationModule.gCharset, _
                                      LocalizationModule.gFontSize, _
                                      GetLocalizedString(IDS_ProgressForm_ProgressCaption), _
                                      GetLocalizedString(IDS_CreatePDFForm_CommandCancel))

SetLocaleResource_End:
    Exit Sub

SetLocaleResource_Err:
    Resume SetLocaleResource_End

End Sub


Attribute VB_Name = "LocalizationModule"
Option Explicit

Private gRsourceArray

Public Enum ResID
    IDS_BCLCustomModule_CreatePDFTooltip = 0
    IDS_BCLCustomModule_CreatePDFCaption
    IDS_CreatePDFModule_SavePDF
    IDS_CreatePDFForm_CheckHyperlinks
    IDS_CreatePDFForm_CheckBookmarks
    IDS_CreatePDFForm_CheckAllStyles
    IDS_CreatePDFForm_CommandCreatePDF
    IDS_CreatePDFForm_CommandCancel
    IDS_CreatePDFForm_FrameBookmarks
    IDS_CreatePDFForm_LabelWordStyles
    IDS_CreatePDFForm_LabelDepth
    IDS_CreatePDFForm_LabelDescription
    IDS_ProgressForm_ProgressCaption
End Enum

Public gFontName As String
Public gCharset As Long
Public gFontSize As Long
Public gSendLocaleInfo As Boolean

Public Sub Localization_Initialize()

    Dim nLangID As Long
    Dim nPrimaryID As Long

    On Error Resume Next

    nLangID = GetUserDefaultLangID
    nPrimaryID = nLangID And &HFF
    
    Select Case nPrimaryID
        Case &H5  ' Czech
            gRsourceArray = Array( _
                "P" & ChrW(&H159) & "ev" & ChrW(&HE9) & "st do PDF (" + gsProductName + ")", _
                "P" & ChrW(&H159) & "ev" & ChrW(&HE9) & "st do PDF", _
                "P" & ChrW(&H159) & "ed t" & ChrW(&HED) & "m, ne" & ChrW(&H17E) & " budete pokra" & ChrW(&H10D) & "ovat, je t" & ChrW(&H159) & "eba ulo" & ChrW(&H17E) & "it dokument. P" & ChrW(&H159) & "ejete si nyn" & ChrW(&HED) & " dokument ulo" & ChrW(&H17E) & "it a pokra" & ChrW(&H10D) & "ovat v p" & ChrW(&H159) & "evodu?", _
                "Zachovat hypertextov" & ChrW(&HE9) & " odkazy", _
                "Vytvo" & ChrW(&H159) & "it z" & ChrW(&HE1) & "lo" & ChrW(&H17E) & "ky podle styl" & ChrW(&H16F) & " Wordu", _
                "Zobrazit v" & ChrW(&H161) & "echny styly, v" & ChrW(&H10D) & "etn" & ChrW(&H11B) & " nepou" & ChrW(&H17E) & "it" & ChrW(&HFD) & "ch", _
                "P" & ChrW(&H159) & "ev" & ChrW(&HE9) & "st do PDF", _
                "Storno", _
                "Z" & ChrW(&HE1) & "lo" & ChrW(&H17E) & "ky PDF", _
                "Styly Wordu", _
                ChrW(&HDA) & "rove" & ChrW(&H148) & " vno" & ChrW(&H159) & "en" & ChrW(&HED) & " z" & ChrW(&HE1) & "lo" & ChrW(&H17E) & "ek", _
                "Libovoln" & ChrW(&HFD) & " text, kter" & ChrW(&HE9) & "mu je p" & ChrW(&H159) & "i" & ChrW(&H159) & "azen styl (nap" & ChrW(&H159) & ". " & ChrW(&H201E) & "Nadpis 1" & ChrW(&H201C) & "), m" & ChrW(&H16F) & ChrW(&H17E) & "e b" & ChrW(&HFD) & "t p" & ChrW(&H159) & "eveden na PDF z" & ChrW(&HE1) & "lo" & ChrW(&H17E) & "ku. Vyberte styly a " & ChrW(&H161) & "ipkami nastavte jejich " & ChrW(&HFA) & "rove" & ChrW(&H148) & " vno" & ChrW(&H159) & "en" & ChrW(&HED) & ".", _
                "Gathering document information..." _
            )

            gFontName = "Tahoma"
            gCharset = 238
            gFontSize = 8
            gSendLocaleInfo = True
        
        Case &H7 ' German
            gRsourceArray = Array( _
                "PDF erstellen (" + gsProductName + ")", _
                "PDF erstellen", _
                "Bevor Sie fortfahren k" & ChrW(&HF6) & "nnen, m" & ChrW(&HFC) & "ssen Sie das Dokument speichern." + vbLf + vbLf + "M" & ChrW(&HF6) & "chten Sie das Dokument nun speichern und dann fortfahren?", _
                "Hyperlinks " & ChrW(&HFC) & "bernehmen", _
                "Auf Word-Formatvorlagen basierende Gliederung " & ChrW(&HFC) & "bernehmen", _
                "Nicht verwendete Formatvorlagen anzeigen", _
                "PDF erstellen", _
                "Abbrechen", _
                "PDF Gliederung", _
                "Word Formatvorlagen", _
                "Gliederungstiefe", _
                "Jeder mit einer Formatvorlage formatierte Text (z.B. """ & ChrW(&HDC) & "berschrift 1"") kann in eine Gliederungsstufe des PDF-Dokumentes umgewandelt werden. Erh" & ChrW(&HF6) & "hen Sie die Gliederungstiefe, um eine mehrstufige Gliederung zu erzeugen.", _
                "Verarbeite Dokumentinformationen..." _
            )

            gFontName = "Tahoma"
            gCharset = 0
            gFontSize = 8
            gSendLocaleInfo = True

        Case &H11 ' Japanese
            gRsourceArray = Array( _
                "PDF" & ChrW(&H4F5C) & ChrW(&H6210) & " (" + gsProductName + ")", _
                "PDF" & ChrW(&H4F5C) & ChrW(&H6210), _
                "|fffd||fffd||fffd||fffd||fffd||11c4d|s|fffd||fffd||fffd||fffd|O|fffd||255||fffd||fffd||fffd||fffd||fffd||6d1||fffd||fffd||fffd||fffd||fffd|K|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B" + vbLf + vbLf + "|fffd||fffd||fffd||fffd||fffd||fffd||6d1||fffd||fffd||fffd||fffd||10f||fffd||fffd||fffd||fffd||11c4d|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|H", _
                ChrW(&H30CF) & ChrW(&H30A4) & ChrW(&H30D1) & ChrW(&H30FC) & ChrW(&H30EA) & ChrW(&H30F3) & ChrW(&H30AF) & ChrW(&H3092) & ChrW(&H4FDD) & ChrW(&H6301) & ChrW(&H3059) & ChrW(&H308B), _
                "Word" & ChrW(&H30B9) & ChrW(&H30BF) & ChrW(&H30A4) & ChrW(&H30EB) & ChrW(&H3092) & ChrW(&H4F7F) & ChrW(&H7528) & ChrW(&H3057) & ChrW(&H3066) & ChrW(&H3057) & ChrW(&H304A) & ChrW(&H308A) & ChrW(&H3092) & ChrW(&H4F5C) & ChrW(&H6210) & ChrW(&H3059) & ChrW(&H308B), _
                ChrW(&H672A) & ChrW(&H4F7F) & ChrW(&H7528) & ChrW(&H306E) & ChrW(&H30B9) & ChrW(&H30BF) & ChrW(&H30A4) & ChrW(&H30EB) & ChrW(&H3082) & ChrW(&H8868) & ChrW(&H793A) & ChrW(&H3059) & ChrW(&H308B), _
                "PDF" & ChrW(&H3092) & ChrW(&H4F5C) & ChrW(&H6210) & ChrW(&H3059) & ChrW(&H308B), _
                ChrW(&H30AD) & ChrW(&H30E3) & ChrW(&H30F3) & ChrW(&H30BB) & ChrW(&H30EB), _
                "PDF " & ChrW(&H3057) & ChrW(&H304A) & ChrW(&H308A) & ChrW(&H8A2D) & ChrW(&H5B9A), _
                "Word" & ChrW(&H30B9) & ChrW(&H30BF) & ChrW(&H30A4) & ChrW(&H30EB), _
                ChrW(&H3057) & ChrW(&H304A) & ChrW(&H308A) & ChrW(&H306E) & ChrW(&H6DF1) & ChrW(&H3055), _
                "Word" & ChrW(&H6587) & ChrW(&H66F8) & ChrW(&H306E) & ChrW(&H4E2D) & ChrW(&H3067) & ChrW(&H30B9) & ChrW(&H30BF) & ChrW(&H30A4) & ChrW(&H30EB) & ChrW(&HFF08) & ChrW(&H300C) & ChrW(&H898B) & ChrW(&H51FA) & ChrW(&H3057) & " 1" & ChrW(&H300D) & ChrW(&H7B49) & ChrW(&HFF09) & ChrW(&H3092) & ChrW(&H8A2D) & ChrW(&H5B9A) & ChrW(&H3057) & ChrW(&H3066) & ChrW(&H3044) & ChrW(&H308B) & ChrW(&H30C6) & ChrW(&H30AD) & ChrW(&H30B9) & ChrW(&H30C8) & ChrW(&H306F) & ChrW(&H3001) & ChrW(&H3057) & ChrW(&H304A) & ChrW(&H308A) & ChrW(&H3068) & ChrW(&H3057) & ChrW(&H3066) & "PDF" & ChrW(&H306B) & ChrW(&H51FA) & ChrW(&H529B) & ChrW(&H3059) & ChrW(&H308B) & ChrW(&H3053) & _
                ChrW(&H3068) & ChrW(&H304C) & ChrW(&H3067) & ChrW(&H304D) & ChrW(&H307E) & ChrW(&H3059) & ChrW(&H3002) & ChrW(&H307E) & ChrW(&H305F) & ChrW(&H3001) & "[" & ChrW(&H2190) & "][" & ChrW(&H2192) & "]" & ChrW(&H30DC) & ChrW(&H30BF) & ChrW(&H30F3) & ChrW(&H3092) & ChrW(&H64CD) & ChrW(&H4F5C) & ChrW(&H3059) & ChrW(&H308B) & ChrW(&H3053) & ChrW(&H3068) & ChrW(&H306B) & ChrW(&H3088) & ChrW(&H308A) & ChrW(&H3001) & ChrW(&H3057) & ChrW(&H304A) & ChrW(&H308A) & ChrW(&H306E) & ChrW(&H6DF1) & ChrW(&H3055) & ChrW(&H3092) & ChrW(&H8ABF) & ChrW(&H7BC0) & ChrW(&H3059) & ChrW(&H308B) & ChrW(&H3053) & ChrW(&H3068) & ChrW(&H304C) & ChrW(&H3067) & ChrW(&H304D) & _
                ChrW(&H307E) & ChrW(&H3059) & ChrW(&H3002), _
                ChrW(&H6587) & ChrW(&H66F8) & ChrW(&H304B) & ChrW(&H3089) & ChrW(&H60C5) & ChrW(&H5831) & ChrW(&H3092) & ChrW(&H53CE) & ChrW(&H96C6) & ChrW(&H3057) & ChrW(&H3066) & ChrW(&H3044) & ChrW(&H307E) & ChrW(&H3059) & "..." _
            )

            gFontName = "MS UI-Gothic"
            gCharset = 128
            gFontSize = 9
            gSendLocaleInfo = True

        Case Else ' Everything else
            gRsourceArray = Array( _
                "Create PDF (" + gsProductName + ")", _
                "Create PDF", _
                "You need to save the document before continuing." + vbLf + vbLf + "Do you want to save the document now and continue?", _
                "Preserve Hyperlinks", _
                "Add bookmarks based on Word Styles", _
                "Show unused styles", _
                "Create PDF", _
                "Cancel", _
                "PDF Bookmarks", _
                "Word Styles", _
                "Bookmark Depth", _
                "Any text that has been assigned a style (i.e. ""Heading 1"") can be turned into a bookmark in the PDF document. Increase the ""depth"" to create nested bookmarks.", _
                "Gathering document information..." _
            )

            gFontName = "Tahoma"
            gCharset = 0
            gFontSize = 8
            gSendLocaleInfo = True

    End Select

End Sub

Public Sub EnsureLocalizationInitialized()
    On Error Resume Next
    If Not gRsourceArray Then Call Localization_Initialize
End Sub

Public Function GetLocalizedString(ids As ResID) As String
    On Error Resume Next
    Call EnsureLocalizationInitialized
    GetLocalizedString = gRsourceArray(ids)
End Function

Public Sub LocalizeControls(MyForm As UserForm)
    On Error Resume Next
    MyForm.Font.Name = gFontName
    MyForm.Font.Charset = gCharset
    MyForm.Font.Size = gFontSize
End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Win32APIModule"
Option Explicit

Public Type RECT
    Left As Long
    Top As Long
    Right As Long
    Bottom As Long
End Type

Public Const SM_CXSCREEN As Long = 0
Public Const SM_CYSCREEN As Long = 1
Public Const LOGPIXELSX As Long = 88
Public Const LOGPIXELSY As Long = 90
Public Const SPI_GETWORKAREA As Long = 48

Public Declare Function GetWindowRect Lib "user32" (ByVal hWnd As Long, lpRect As RECT) As Long
Public Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long
Public Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Public Declare Function GetDC Lib "user32" (ByVal hWnd As Long) As Long
Public Declare Function ReleaseDC Lib "user32" (ByVal hWnd As Long, ByVal hdc As Long) As Long
Public Declare Function GetDeviceCaps Lib "gdi32" (ByVal hdc As Long, ByVal nIndex As Long) As Long
Public Declare Function GetUserDefaultLangID Lib "kernel32" () As Long
Public Declare Function SystemParametersInfo Lib "user32" Alias "SystemParametersInfoA" (ByVal uiAction As Long, ByVal uiParam As Long, ByRef pvParam As Any, ByVal fWinIni As Long) As Long


INQUEST-PP=macro
