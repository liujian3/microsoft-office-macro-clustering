Attribute VB_Name = "CellFixDateFormatting"
Option Explicit

Private ListOfWS() As Variant
Const wsName = 0
Const WSProtect = 1
Const iColFormat_CellMap = 4


Private Sub Test_FixCellNumberFormat()

Dim FixNeeded As Boolean
FixNeeded = FixCellNumberFormat(ThisWorkbook)

End Sub

Function FixCellNumberFormat(wb As Workbook) As Boolean
'
' Fixes the Format of cells in case they messed up.
'
'------------------------------------

On Error Resume Next

Dim wsDB                        As Worksheet
Dim FixNeeded                   As Boolean
Dim Protect                     As Boolean
Dim RefRange                    As String
Dim r, c, rMax, cMax, IsPercent As Integer
Dim Col, cFormat                As String
Dim nf                          As String    'Number Format string
Dim cCell                       As Variant
Dim ScreenUpdate                As Variant
Dim CalcMode                    As Variant
Dim i, j                        As Integer
Dim lmt                         As Date 'LastMessageTime
Dim EnablingKPICol              As String
Dim EnablingKPIThisYearCol       As String


Call LogEventAdd("Start: FixCellNumberFormat ...", , "FT1")

'save status
ScreenUpdate = Application.ScreenUpdating
Application.ScreenUpdating = False

CalcMode = Application.Calculation
Application.Calculate
Application.Calculation = xlCalculationManual

'the below function is more generic, but has also shown that not always the error is fixed
FixNeeded = FixNormalStyle(wb)

'the below individual fix seems not to always work reliably.
Set wsDB = wb.Worksheets(Tab_BMCEnablerList)

Protect = UnProtectWS(wsDB)
rMax = LastRow(wsDB)
cMax = LastCol(wsDB)

EnablingKPICol = CellColumn("_E_EnablingKPI", wsDB)
EnablingKPIThisYearCol = CellColumn("_E_KPIThisYear", wsDB)
  
'fix the % formatting in any case
'CHANGE2609
GoTo FixCellNumberFormat1
For r = 1 To rMax
    'Check in the Enabler Lagging KPI if it contains a %
    '
    IsPercent = InStr(1, Trim(wsDB.Range(EnablingKPICol & r)), "(%)", vbTextCompare)
    If IsPercent = 0 Then
        IsPercent = InStr(1, Trim(wsDB.Range(EnablingKPICol & r)), "%", vbTextCompare)
    Else
        IsPercent = 1
    End If
'Change2309-2
    If IsPercent > 0 And IsPercent < 3 Then
        For c = 1 To 10
            'wsDB.Cells(r, c).Select
            'col = UCase(num2col((c)))
            If (InStr(1, wsDB.Range(EnablingKPIThisYearCol & "1").Cells(r, c).NumberFormat, "%", vbTextCompare) = 0) Then  'Q till Z are numbers
                wsDB.Range(EnablingKPIThisYearCol & "1").Cells(r, c).NumberFormat = "0%"
            End If
        Next c
    End If
Next r
FixCellNumberFormat1:
   
'check per column in the ENabler list if the number format of the cells is ok.
rMax = LastRow(wsDB)
cMax = LastCol(wsDB)
    
For c = 1 To cMax
        lmt = StatusBarUpdate("Check and fix cell format in sheet '" & wsDB.Name & "' in column " & num2col((c)), lmt)
        DoEvents
        Col = num2col((c))
        
        Set cCell = Range("StartSourceCol")
        
        cFormat = cCell.Cells(c, iColFormat_CellMap)
                
        If (InStr(1, cFormat, "D", vbTextCompare) > 0) Then
            ' this is a date column - keep the formatting unchanged
'                    If (col <> "AJ") Then  ' column AJ has a date format. So that is what we keep
        
        ElseIf (InStr(1, cFormat, "%", vbTextCompare) > 0) Then
            ' this is KPI value column - this can be a % and requires additional checks per cell
            For r = 2 To rMax
                IsPercent = InStr(1, Trim(wsDB.Range(EnablingKPICol & r)), "%", vbTextCompare)
                If wsDB.Cells(r, c).NumberFormat <> "General" Then
                        ' usually cells should be number formatted or general but never a date.
                        If InStr(1, wsDB.Cells(r, c).NumberFormat, "@", vbTextCompare) Then
                            ' date format found
                            FixNeeded = True
                            If IsPercent = 1 Then  'Q till Z are numbers
                                ' Format as percentage if indicated in the enabler KPI
                                wsDB.Cells(r, c).NumberFormat = "0%"
                            Else
                                wsDB.Cells(r, c).NumberFormat = "General"
                            End If
                        End If
                End If
            Next r
        Else 'If (InStr(1, cFormat, "G", vbTextCompare) > 0) Then
            ' all other stuff is to be GENERAL formatted
            If Col = "A" Then
                Err.Clear
            End If
            For r = 2 To rMax
                If wsDB.Cells(r, c).NumberFormat <> "General" Then
                    FixNeeded = True
                    wsDB.Range(Col & ":" & Col).NumberFormat = "General"
                    Exit For
                End If
            Next r
        End If
        
        If FixNeeded Then
            Err.Clear
            'Exit For
        End If
        'next column
Next c
    
Call ProtectWS(wsDB, Protect)

'convert the international formula style into the local style (mainly "," <-> ";")
'RefRange = "C12:C21,E12:G21"
'RefRange = TranslateFormula_GenericToLocal(RefRange)

' named range on any worksheet that requires a number fix in case the format is not set to "GENERAL"
RefRange = "_DB_FixNumberRange"

For Each wsDB In wb.Worksheets
    Err.Clear
    c = wsDB.Range(RefRange).Cells.Count
    If Err = 0 And c > 0 Then
        Err.Clear
        nf = UCase(wsDB.Range(RefRange).NumberFormat)
        If nf = "GENERAL" Then
            r = 30
            If r > wsDB.Range(RefRange).Rows.Count Then r = wsDB.Range(RefRange).Rows.Count
            c = 20
            If c > wsDB.Range(RefRange).Columns.Count Then c = wsDB.Range(RefRange).Columns.Count
            
            For i = 1 To c
                For j = 1 To r
                    If j > 20 Then
                        Err.Clear
                    End If
                    Err.Clear
                    nf = UCase(wsDB.Range(RefRange).Cells(j, i).NumberFormat)
                    If InStr(1, nf, "[$-407") > 0 Then
                        Protect = UnProtectWS(wsDB)
                        'set the cell format to "GENERAL" in case it is not "General".
                        wsDB.Range(RefRange).NumberFormat = "General"
                        FixNeeded = True
                        Err.Clear
                        Call ProtectWS(wsDB, Protect)
                        Exit For
                    End If
                Next
                If j <= r Then
                    Exit For
                End If
            Next
       Else
            Protect = UnProtectWS(wsDB)
            'set the cell format to "GENERAL" in case it is not "General".
            wsDB.Range(RefRange).NumberFormat = "General"
            FixNeeded = True
            Err.Clear
            Call ProtectWS(wsDB, Protect)
        End If
    End If
Next wsDB

If FixNeeded = True Then
    'apply a cell format fix to the BMC Dashboard in case a cell formatting issue was found somewhere else.
    Set wsDB = wb.Worksheets(Tab_BMCDashboard)
    Protect = UnProtectWS(wsDB)
    wsDB.Cells.NumberFormat = "General"
    Call ProtectWS(wsDB, Protect)
    
    Set wsDB = wb.Worksheets(Tab_Settings)
    Protect = UnProtectWS(wsDB)
    'wsDB.Range("MaxHeight").NumberFormat = "General"
    'wsDB.Range("MaxRowHeight").NumberFormat = "General"
    
    'let's see how often this occured
    wb.Worksheets(Tab_Settings).Range("FixNumberFormatCounter") = wb.Worksheets(Tab_Settings).Range("FixNumberFormatCounter") + 1
    
    'TempAddOn
    Call LogEventAdd("Cell Format Fix applied - FixNumberFormatCounter:" & wb.Worksheets(Tab_Settings).Range("FixNumberFormatCounter"))
    
    'wsDB.Cells.NumberFormat = "General"
    Call ProtectWS(wsDB, Protect)
End If

'Restore status
Application.ScreenUpdating = ScreenUpdate
Application.Calculation = CalcMode
Call ClearStatusBar

FixCellNumberFormat = FixNeeded

Call LogEventAdd("End: FixCellNumberFormat ... " & FixNeeded, , "FT1")

End Function

Function FixNormalStyle(wb As Workbook) As Boolean

Dim protWB As Variant

Dim ScreenUpdate As Variant

On Error Resume Next

ScreenUpdate = Application.ScreenUpdating
Application.ScreenUpdating = False

FixNormalStyle = False

If wb.Styles("Normal").NumberFormat <> "General" Then
    protWB = UnProtectWB(wb)

    Call WSGetStatus(wb)
    
    wb.Worksheets(Tab_Settings).Range("FixNumberFormat") = Now() & " " & wb.Styles("Normal").NumberFormat & " (" & Application.UserName & ")"
    wb.Styles("Normal").NumberFormat = "General"
    
    'TempAddOn1
    Call LogEventAdd(wb.Worksheets(Tab_Settings).Range("FixNumberFormat"))
    
    Call WSSetStatus(wb)

    If protWB Then Call ProtectWB(wb)
    
    FixNormalStyle = True

End If

Application.ScreenUpdating = ScreenUpdate

On Error GoTo 0

End Function


Private Sub test_WSSetStatus()
'Test the get and set protection status of all worksheets
    
'Call FixNormalStyle(ThisWorkbook)      ' this function uses get and set status
Call WSGetStatus
Call WSSetStatus

End Sub

Function WSGetStatus(Optional iWB As Workbook = Nothing)
Attribute WSGetStatus.VB_ProcData.VB_Invoke_Func = " \n14"

' save the protection status of each worksheet

Dim s   As Integer
Dim ws  As Worksheet
Dim wb  As Workbook
'Dim wb As Workbook
'Set wb = ThisWorkbook

If iWB Is Nothing Then
    Set wb = ThisWorkbook
Else
    Set wb = iWB
End If

s = wb.Worksheets.Count - 1

Err.Clear

On Error Resume Next
ReDim ListOfWS(s, 1)

'Dim intArray(10, 10, 10) As Integer
'       ReDim Preserve intArray(10, 10, 20)
'        ReDim Preserve intArray(10, 10, 15)
'        ReDim intArray(10, 10, 10)
If s > 0 And Err = 0 Then
    s = 0
    For Each ws In wb.Worksheets
        ListOfWS(s, wsName) = ws.Name
        ListOfWS(s, WSProtect) = UnProtectWS(ws)
        s = s + 1
    Next ws
End If

End Function

Function WSSetStatus(Optional iWB As Workbook = Nothing)
' set the protection status of each worksheet in the global array

Dim s As Integer
Dim ws As Worksheet
Dim wb  As Workbook
'Dim wb As Workbook
'Set wb = ThisWorkbook

If iWB Is Nothing Then
    Set wb = ThisWorkbook
Else
    Set wb = iWB
End If

s = UBound(ListOfWS)

'On Error Resume Next
    
For s = 0 To UBound(ListOfWS)
     
    Call ProtectWS(wb.Worksheets(ListOfWS(s, wsName)), (ListOfWS(s, WSProtect)))

Next s

ReDim ListOfWS(0, 1)

End Function

'redim preserve both dimensions for a multidimension array *ONLY
Public Function ReDimPreserve(aArrayToPreserve, nNewFirstUBound, nNewLastUBound)
Dim nOldFirstUBound, nOldLastUBound, nFirst, nLast As Long
    ReDimPreserve = False
    'check if its in array first
    If IsArray(aArrayToPreserve) Then
        'create new array
        ReDim aPreservedArray(nNewFirstUBound, nNewLastUBound)
        'get old lBound/uBound
        nOldFirstUBound = UBound(aArrayToPreserve, 1)
        nOldLastUBound = UBound(aArrayToPreserve, 2)
        'loop through first
        For nFirst = LBound(aArrayToPreserve, 1) To nNewFirstUBound
            For nLast = LBound(aArrayToPreserve, 2) To nNewLastUBound
                'if its in range, then append to new array the same way
                If nOldFirstUBound >= nFirst And nOldLastUBound >= nLast Then
                    aPreservedArray(nFirst, nLast) = aArrayToPreserve(nFirst, nLast)
                End If
            Next
        Next
        'return the array redimmed
        If IsArray(aPreservedArray) Then ReDimPreserve = aPreservedArray
    End If
End Function
Attribute VB_Name = "CellLockAndTextFormatting"
Option Explicit

Private LockMode As String
Private Const MyPasswordEdit = "EditBMC"
Public UserPasswordEdit As String

Function GetMyPasswordEdit() As String
    GetMyPasswordEdit = MyPasswordEdit
End Function

Private Sub FormatLockedCells()
    Call FormatLockedCells_WS(ActiveSheet)
End Sub

Function FormatLockedCells_WS(rWS As Worksheet)

Dim lR, lC, r, c As Long

Call StatusBarUpdate("Format locked cells ...")

lR = LastRow(rWS)
lC = LastCol(rWS)

For r = 2 To lR
    Call StatusBarUpdate("Format locked cells row " & r & " of " & lR & " ...")
    For c = 1 To lC
        If rWS.Cells(r, c).Locked = True Then
            If rWS.Cells(r, c).Interior.TintAndShade = 0 Then
                'set background to light grey indicating that the cell can't be edited if it is locked
                With rWS.Cells(r, c).Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .ThemeColor = xlThemeColorDark1
                    .TintAndShade = -4.99893185216834E-02
                    .PatternTintAndShade = 0
                End With
            Else
                ' keep original color if one has been set
            End If
        Else
            ' don't do anything if cell isn't locked
                With rWS.Cells(r, c).Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    '.ThemeColor = xlThemeColorDark1
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
        End If
    Next
Next

Call StatusBarUpdate("")

End Function

Private Sub FormatDefaultCells()

Dim ScreenUpdate                As Variant
Dim CalcMode                    As Variant

'Disable screen update and ...
ScreenUpdate = Application.ScreenUpdating
Application.ScreenUpdating = False
CalcMode = Application.Calculation
Application.Calculation = xlCalculationManual

Call FormatDefaultCells_WS(ActiveSheet)

Application.ScreenUpdating = ScreenUpdate
Application.Calculation = CalcMode

End Sub

Function FormatDefaultCells_WS(rWS As Worksheet)

    Dim r, c, l, lR, lC As Long
    Dim cCell As Range
    Dim Rng As String
    Dim FileNameCol As String
    Dim dt As Date
    
    Call StatusBarUpdate("Default format of cells ...")

    Set cCell = Range("StartSourceCol")
    
    FileNameCol = FindNamedColumn(rWS, "PathFileName")
        
    lR = LastRow(rWS)
    lC = LastCol(rWS)
        
    l = 1
    Do While cCell.Cells(l, 1) <> ""
        Rng = cCell.Cells(l, 1) & "2:" & cCell.Cells(l, 1) & lR
        dt = StatusBarUpdate("Format columns ... " & Rng, dt)
        With rWS.Range(Rng)
            If InStr(1, cCell.Cells(l, 4), "L", vbTextCompare) > 0 Then
                .HorizontalAlignment = xlLeft
            End If
            If InStr(1, cCell.Cells(l, 4), "R", vbTextCompare) > 0 Then
                .HorizontalAlignment = xlRight
            End If
            If InStr(1, cCell.Cells(l, 4), "M", vbTextCompare) > 0 Then
                .HorizontalAlignment = xlCenter
            End If
            If InStr(1, cCell.Cells(l, 4), "B", vbTextCompare) > 0 Then
                .VerticalAlignment = xlBottom
            End If
            If InStr(1, cCell.Cells(l, 4), "T", vbTextCompare) > 0 Then
                .VerticalAlignment = xlTop
            End If
            If InStr(1, cCell.Cells(l, 4), "C", vbTextCompare) > 0 Then
                .VerticalAlignment = xlCenter
            End If
            If InStr(1, cCell.Cells(l, 4), "P", vbTextCompare) > 0 Then
                ' in case it is a onePager Summary file, then all cells with no formulas become unlocked.
                If InStr(1, rWS.Parent.Name, "BG-OP", vbTextCompare) = 1 Then
                    .Locked = False
                Else
                    .Locked = True
                End If
            Else
                .Locked = False
            End If
            
            'cells with Formuals are locked anyhow
            If rWS.Range(cCell.Cells(l, 1) & "2").HasFormula = True Then
                .Locked = True
            End If
            
            ' the column with the "PathFileName" gets a small font size assigned (making the text to fit into a smaller box).
            If FileNameCol = num2col((l)) Then
                With .Font
                    .Size = 6
                End With
            End If
        End With
        
        Err.Clear
        l = l + 1
    Loop

    '---------------------------------------------------------------
    Call StatusBarUpdate("Format cell borders ... " & Rng)
        
    Rng = "A2:" & num2col((lC)) & lR

    With rWS.Range(Rng)
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
            'set borders
            .Borders(xlDiagonalDown).LineStyle = xlNone
            .Borders(xlDiagonalUp).LineStyle = xlNone
            With .Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With .Borders(xlEdgeTop)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With .Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With .Borders(xlEdgeRight)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With .Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With .Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            '.Borders(xlInsideVertical).LineStyle = xlNone
            '.Borders(xlInsideHorizontal).LineStyle = xlNone
            ' no Fill
            With .Interior
                .Pattern = xlNone
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
    End With
    
    'Call FormatLockedCells_WS(rWS)
    Call Prepare_CF_MgmtStatus_WS(rWS)
    
    Call StatusBarUpdate("")
    
End Function

Sub SupportFct_SetCellLock()
Attribute SupportFct_SetCellLock.VB_ProcData.VB_Invoke_Func = "E\n14"
'main function called via shortcut Ctrl-Shift-E to toggle the BMC Enabler summary sheet
'between edit and lock mode
    ActiveWorkbook.Sheets(Tab_BMCEnablerList).Activate
    Call Fct_SetCellLock(True)
End Sub

Function Reset_SetCellLock()
'reset the edit mode of the Enabler Tracking List
    
    On Error Resume Next
    LockMode = "E"  'forces to switch into Lock Mode
    UserPasswordEdit = MyPasswordEdit
    Call Fct_SetCellLock(False)
    UserPasswordEdit = ""
    If LockMode <> "L" Then
        LockMode = "L"
    End If
End Function

Function Fct_SetCellLock(ShowMsg As Boolean)
    
Dim rWS As Worksheet
Dim Prot, EmptyRow As Boolean
Dim pw As String
Dim r, c, lRow, lCol As Integer
Dim ScreenUpdate As Variant
Dim AddRows As Integer
Dim FileType            As String
Dim FirstRow            As Long
Dim ValidRowsFound      As Boolean
Dim FirstValidRow       As Long
Dim cWS                 As Worksheet

Call LogEventAdd("Start: Fct_SetCellLock ... '" & LockMode & "'", , "FT1")

Set rWS = ActiveWorkbook.Sheets(Tab_BMCEnablerList)
'if the Enabler Summary List worksheet is not visible then there is no need to reset the cell-lock function as a user won't see it
If rWS.Visible <> xlSheetVisible Then
    Exit Function
End If

Set cWS = ActiveSheet

AddRows = LoadSetting("NewRowsInEditMode")
If AddRows > 0 Then
Else
    AddRows = 4
End If
FirstRow = 2

FileType = UCase(LoadSetting("TrackingFileType"))

'ensure that all cells are up-to-date
Application.Calculation = xlCalculationManual
Application.Calculate

ScreenUpdate = Application.ScreenUpdating
Application.ScreenUpdating = False
        
'If Action <>
If LockMode = "" Then LockMode = "L"

Set rWS = ActiveWorkbook.Sheets(Tab_BMCEnablerList)

'LockMode = "E"

'when not in edit mode and a default password given, then request password
If (LockMode <> "E" Or UserPasswordEdit = "") And MyPasswordEdit <> "" Then
    If UserPasswordEdit = "" Then
        pw = InputBox("Do you want to edit the BMC enablers in '" & rWS.Name & "'" & vbCrLf & vbCrLf & "Please enter password:", "Edit BMC Enablers", "Enter password")
        'pw = "Do you want to edit the BMC enablers in '" & rWS & "'" & vbCrLf & vbCrLf & "Please enter password:"
    Else
        If ShowMsg Then
            If MsgBox("You are about to open the BMC enabler list for advanced editing. This takes a few seconds ...", vbYesNo) <> vbYes Then
                GoTo SCL_Cleanup
            End If
        End If
        pw = UserPasswordEdit
    End If
Else
    pw = UserPasswordEdit
End If

If LockMode <> "E" And pw <> MyPasswordEdit Then
    UserPasswordEdit = ""
    If ShowMsg Then Call MsgBox("Invalid password.", vbExclamation)
Else
    UserPasswordEdit = pw
        
    Application.ScreenUpdating = False
    
    Prot = UnProtectWS(rWS)
    
    On Error Resume Next

    'remove any filter
    rWS.showalldata
    On Error GoTo 0
    lRow = LastRow(rWS)
    lCol = LastCol(rWS)

    Select Case LockMode
        
    Case "L"
        If FileType = "MARKET" Or FileType = "BG" Or FileType = "HS" Then
            If (MsgBox("You shouldn't edit this BMC Enabler Tracking File as the content will be overwritten the next time data is reloaded." & _
                    vbCrLf & vbCrLf & _
                    "Are you sure you want to continue?", vbYesNo) = vbYes) Then
                FileType = ""
            End If
        Else
            FileType = ""
        End If
        
        If FileType = "" Then
        
                'Call SetCellLock(rWS, LockMode)
                For r = lRow + 1 To lRow + AddRows
                    For c = 1 To lCol
                        If c <= 4 Then
                            'for BG and Cluster just take the last entered values
                            rWS.Cells(r, c) = rWS.Cells(lRow, c)
                        End If
                        rWS.Cells(r, c).Locked = rWS.Cells(2, c).Locked
                        rWS.Cells(r, c).VerticalAlignment = rWS.Cells(2, c).VerticalAlignment 'XXNew
                        rWS.Cells(r, c).HorizontalAlignment = rWS.Cells(2, c).HorizontalAlignment 'XXNew
                    Next c
                Next r
                
                Call CheckAndFixFormula(rWS)
                'Call Prepare_CF_MgmtStatus_WS(rWS)     ' also done as part of SetCellLock
                Call Expand_DV_WS(rWS)
                
                LockMode = "E"
                Call SetCellLock(rWS, LockMode)
                
                If ActiveSheet.Name = rWS.Name Then
                    Application.Goto reference:=rWS.Range("C" & lRow), Scroll:=True
                    rWS.Range("C" & lRow + 1).Activate
                    rWS.Range("C" & lRow + 1).Select
                End If
                
                
                If ShowMsg Then Call MsgBox("Advanced EDITING of BMC Enablers ACTIVATED.", vbInformation)
        End If
       
    Case "E", "A"
        ' we are in EDIT mode and switch now to LockMode
        ' remove "empty lines"
        If ShowMsg Then Call MsgBox("You are about to protect the workshop from advanced editing. This takes a few seconds ...", vbInformation)
        
        'clear any row with no data in it.
        For r = FirstRow To lRow
            If r > 660 Then
                Err.Clear
            End If
            EmptyRow = True
            
            For c = 1 To lCol
                'ignore cells with a formula, or when it contains the market or business
                '(the later is not enough to make a valid enabler line)
                If rWS.Cells(r, c).HasFormula Or _
                   rWS.Range("_E_Market").Column = c Or _
                   rWS.Range("_E_Business").Column = c Then
                ElseIf rWS.Range("_E_Market").Column = c Then
                ElseIf Len(Trim(rWS.Cells(r, c))) > 0 Then
                    EmptyRow = False
                    Exit For
                End If
            Next c
            If EmptyRow = True Then
                If r > FirstRow Then
                    rWS.Range(r & ":" & r).ClearContents
                End If
            Else
                ValidRowsFound = True
                If FirstValidRow = 0 Then
                    FirstValidRow = r
                End If
            End If
        Next r
        
        'If FileType = "MARKET" Or FileType = "BG" Or FileType = "HS" Then   'Or FileType = "BG-OP"
        If InStr(1, LoadSetting("FullLockMode4FileTypes"), "'" & FileType & "'", vbTextCompare) > 0 Then
            LockMode = "A"
        Else
            LockMode = "L"
        End If
        
        'Expand formulas first ...
        Call CheckAndFixFormula(rWS)
        '... then clean the first row if it it not a valid enabler row and other valid enabler rows had been found
        If FirstValidRow > FirstRow And ValidRowsFound Then
            rWS.Range(FirstRow & ":" & FirstValidRow - 1).ClearContents
        End If
        
        'sort first to get rid of all empty lines
        ' Call ApplyFilterToEnablerList_EnablerID 'XXnew1

        Call Expand_DV_WS(rWS)
        'Call Prepare_CF_MgmtStatus_WS(rWS)     ' done as part of SetCellLock
        
        Call SetCellLock(rWS, LockMode)
        Call ApplyFilterToEnablerList_EnablerID 'XXnew

        If ShowMsg Then Call MsgBox("BMC Enabler sheet LOCKED for advanced editing..", vbInformation)
        
    Case Else
    
    End Select
    
    
    Call ProtectWSEdit(rWS, (Prot), (LockMode)) 'XXnew
    
End If

SCL_Cleanup:

Application.Calculation = xlCalculationAutomatic

cWS.Activate

'refresh screen and set the last screen update status
Application.ScreenUpdating = True
DoEvents
Application.ScreenUpdating = ScreenUpdate

Call LogEventAdd("End: Fct_SetCellLock ... '" & LockMode & "'", , "FT1")

End Function

Function ShowRowInCenter()
Application.Goto reference:=Range("B100"), Scroll:=True
End Function

Function SetCellLock(rWS As Worksheet, Action As String)

    Dim r, c, l, lR, lC As Long
    Dim cCell           As Range
    Dim Rng             As String
    Dim FileNameCol     As String
    Dim lmt             As Date 'LastMessageTime

    Call StatusBarUpdate("Default format of cells ...")

    Set cCell = Range("StartSourceCol")
    
    FileNameCol = FindNamedColumn(rWS, "PathFileName")
        
    'By default all cells are locked. Below we unlock specific cells only.
    rWS.Cells.Locked = True
        
    lR = LastRow(rWS)
    lC = LastCol(rWS)
        
    l = 1
    
    Do While cCell.Cells(l, 1) <> ""
        Application.ScreenUpdating = False
        Rng = cCell.Cells(l, 1) & "2:" & cCell.Cells(l, 1) & lR
        lmt = StatusBarUpdate("Format columns ... " & Rng, lmt)
        With rWS.Range(Rng)
            If InStr(1, cCell.Cells(l, 4), "L", vbTextCompare) > 0 Then
                '.HorizontalAlignment = xlLeft
            End If
            If InStr(1, cCell.Cells(l, 4), "R", vbTextCompare) > 0 Then
                '.HorizontalAlignment = xlRight
            End If
            If InStr(1, cCell.Cells(l, 4), "M", vbTextCompare) > 0 Then
                '.HorizontalAlignment = xlCenter
            End If
            If InStr(1, cCell.Cells(l, 4), "B", vbTextCompare) > 0 Then
                '.VerticalAlignment = xlBottom
            End If
            If InStr(1, cCell.Cells(l, 4), "T", vbTextCompare) > 0 Then
                '.VerticalAlignment = xlTop
            End If
            If InStr(1, cCell.Cells(l, 4), "C", vbTextCompare) > 0 Then
                '.VerticalAlignment = xlCenter
            End If
            
            'cells with Formuals are locked anyhow
            If rWS.Range(cCell.Cells(l, 1) & "2").HasFormula = True Then
                .Locked = True
            ElseIf Action = "E" Then
                'in 'E'dit mode unlock all cells
                .Locked = False
            ElseIf Action = "A" Then
                'in 'A'll locked mode lock all cells
                .Locked = True
            Else
                If InStr(1, cCell.Cells(l, 4), "P", vbTextCompare) > 0 Then
                    If InStr(1, rWS.Parent.Name, "BG-OP", vbTextCompare) = 1 Then
                        .Locked = False
                    Else
                        .Locked = True
                    End If
                Else
                    .Locked = False
                End If
            End If
            
            
            ' the column with the "PathFileName" gets a small font size assigned (making the text to fit into a smaller box).
            If FileNameCol = num2col((l)) Then
                With .Font
                    .Size = 6
                End With
            End If
        End With
        
        Err.Clear
        l = l + 1
    Loop

    'End With
    
    'Call FormatLockedCells_WS(rWS)
    Call Prepare_CF_MgmtStatus_WS(rWS)
    
    Call StatusBarUpdate("")
    
    
End Function

Sub RefreshDashboardMandB()
    Dim currentWS As Worksheet
    
    'save actvie sheet ...
    Set currentWS = ActiveSheet
    'Application.ScreenUpdating = False
    Call DB_CheckSettings(currentWS)
    Call AllWorksheetPivots
    Call SetAllDashboard(ThisWorkbook)
    
    ' ... and restore WS
    currentWS.Activate
    'Application.ScreenUpdating = True
    
End Sub
Function SupportFct_SetAllDashboard()
Call SetAllDashboard(ThisWorkbook)
End Function

Function SetAllDashboard(wb As Workbook)
    Call SetDashboard(wb.Sheets(Tab_MarketDashboard))
    Call SetDashboard(wb.Sheets(Tab_BusinessDashboard))
    Call SetDashboard(wb.Sheets(Tab_StatusCheckDashboard))
End Function

Function SetDashboard(rWS As Worksheet)

' for some dashboards the height of certain rows need to be re-calibrated to make the graph match
' the row starting with is identified by the name "FirstEnablerRowX" where X starts with 1 and goes up as long as there is a new block on that sheet to re-calibrate
    Dim Prot As Variant
    Dim i, r, c As Integer
    Dim n As String
    
    On Error Resume Next
    
    Prot = UnProtectWS(rWS)
    
    'check up to 10 possible blocks of rows to re-calibrate the height
    For i = 1 To 10
        n = "FirstEnablerRow" & i
        r = 0
        c = 0
        r = rWS.Range(n).row
        c = rWS.Range(n).Column
        If r > 1 Then
            ' two rows before are header rows of that block and get a different size.
            rWS.Rows(r - 2 & ":" & r - 1).RowHeight = 20
            Do While rWS.Range("A1").Cells(r, c) <> ""
                rWS.Rows(r & ":" & r).RowHeight = 27
                r = r + 1
            Loop
        Else
            Exit For
        End If
    Next
    
    'keep a record of the quarter filter being used in the report
    Err.Clear
    rWS.Range("FilterQuarterUsed").Value = rWS.Range("MDB_Quarter").Value
    If Err Then
        rWS.Range("FilterQuarterUsed").Value = rWS.Range("BDB_Quarter").Value
    End If
    
    
    Call ProtectWS(rWS, (Prot))
    
End Function





Attribute VB_Name = "ConditionalFormatting"
Option Explicit

Private Sub Apply_ConditionalFormating()
'for testing the conditional formatting
    Dim ws      As Worksheet
    Dim Prot    As Variant
    
    Set ws = Worksheets(Tab_BMCEnablerList)
    'Set ws = Worksheets(Tab_BMCTotalsList)
    
    Prot = UnProtectWS(ws)
    Call Prepare_CF_MgmtStatus_WS(ws)
    Call ProtectWS(ws, (Prot))
    
End Sub

Function Prepare_CF_MgmtStatus_WS(rWS As Worksheet)

' sets conditional formatting for the BMC Enabler and Totals Tabs as needed.
' it has some specific worksheet specific conditional formattings (e.g. Top3) but as well things that work generic (borders around cells or showing proected formatting

Dim cWS As Worksheet

'Dim f As FormatCondition
Dim sCol, ECol, Rng             As String
Dim TRng                        As Range
Dim Cnt                         As Long
Dim i, lRow, lCol               As Integer
Dim cStart                      As String
Dim cEnd                        As String
Dim cRefS                       As String
Dim cRefC                       As String
'Dim cEnd, cRefS, cRefC  As String
Dim cTag                        As String
Dim ColorRefCheck               As Boolean
Dim t                           As Variant
Dim tCol                        As String
Dim Formula                     As Variant
Dim Count                       As Integer
Dim CellColor                   As String
Dim ScreenUpdate                As Variant
Dim CalcMode                    As Variant

Err.Clear

'save currently viewed worksheet to restore that view later on
Set cWS = ActiveSheet

'Disable screen update and ...
ScreenUpdate = Application.ScreenUpdating
Application.ScreenUpdating = False
CalcMode = Application.Calculation
Application.Calculation = xlCalculationManual

' ... set the target worksheet as active
'TempAddOn1
'rWS.Activate
'rWS.Select

Call StatusBarUpdate("Prepare Conditional Formatting (D) ...")
lRow = LastRow(rWS)
lCol = LastCol(rWS)

On Error Resume Next

'Delete all conditional formatting
rWS.Cells.FormatConditions.Delete

Err.Clear

' --- conditional formatting: for active rows put cell border in place
Call StatusBarUpdate("Prepare Conditional Formatting (#1) ...")

tCol = "A1"
Set TRng = rWS.Range(tCol & ":" & num2col(lCol) & lRow)
'=IF(AND(CELL("protect";A1);CELL("row";A1)>1;LEN(TRIM($A1))>0;LEN(TRIM(A$1))>0);TRUE;FALSE)
Formula = TranslateFormula_GenericToLocal("=IF(AND(LEN(TRIM($" & tCol & "))>0,LEN(TRIM(A$1))>0),TRUE,FALSE)")      'Formula = "=IF(Upper(P2)=""YES"";TRUE;FALSE)"
TRng.FormatConditions.Add Type:=xlExpression, Formula1:=Formula
Count = TRng.FormatConditions.Count
TRng.FormatConditions(Count).StopIfTrue = False

With TRng.FormatConditions(Count)
    .Borders(xlDiagonalDown).LineStyle = xlNone
    .Borders(xlDiagonalUp).LineStyle = xlNone
    With .Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With .Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With .Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With .Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
End With

' Pending implementation : Shows duplicate Enabler IDS in RED! - Runtime might be long for this to add, so we skip for the time being
' =IF( COUNTIF(AM$1:AM$2702;AM1)>1;TRUE;FALSE)

' ----------------------------------------------------------------
' --- conditional formatting for "Top# 3" column: YES/NO/CANCEL
' ----------------------------------------------------------------

' --- conditional formatting for "Top# 3" column: YES
tCol = CellColumn(Col_Top3, rWS)     '"P"
If tCol <> "" Then
    Set TRng = rWS.Range(tCol & "2:" & tCol & lRow)
    
    ' YES => shows Light Blue
    Formula = TranslateFormula_GenericToLocal("=IF(Upper($" & tCol & "2)=""YES"",TRUE,FALSE)")      'Formula = "=IF(Upper(P2)=""YES"";TRUE;FALSE)"
    TRng.FormatConditions.Add Type:=xlExpression, Formula1:=Formula
    Count = TRng.FormatConditions.Count
    With TRng.FormatConditions(Count)
        .Interior.Color = RGB(0, 112, 192)  'Blue background
        .Font.Bold = True
        .Font.ColorIndex = 2    'White
    End With
    Err.Clear
End If

' --- conditional formatting for "Top# 3" column: CANCEL
tCol = CellColumn(Col_Top3, rWS)     '"P"
If tCol <> "" Then
    Set TRng = rWS.Range("A2:" & num2col((lCol)) & lRow)
    
    ' Cancel => shows italic
    Formula = "=IF(Upper($" & tCol & "2)=""CANCEL"",TRUE,FALSE)"
    Formula = TranslateFormula_GenericToLocal(Formula)      'Formula = "=IF(Upper(P2)=""YES"";TRUE;FALSE)"
    TRng.FormatConditions.Add Type:=xlExpression, Formula1:=Formula
    Count = TRng.FormatConditions.Count
    With TRng.FormatConditions(Count)
        .StopIfTrue = False
        '.Interior.Color = RGB(0, 112, 192)  'Blue background
        '.Font.Bold = True
        .Font.Italic = True
        '.Font.ColorIndex = 2    'White
    End With
    Err.Clear
End If

'-----------------------------------------
' Color setting for Quarterly KPI values
'-----------------------------------------
ColorRefCheck = LoadSetting("ColorMgmtStatus")

Call StatusBarUpdate("Prepare Conditional Formatting (#2) ...")
' set the conditional formatting for the tripple color coding
For i = 1 To 4  ' going from Q1 to Q4
    Call StatusBarUpdate("Prepare Conditional Formatting (#2-" & i & ") ...")
    'pick the relevant columns (Start / End) ...
    cTag = "_E_Q" & i
    cStart = CellColumn(cTag, rWS)
    
    cTag = "_E_Q" & i & "Actual"
    cEnd = CellColumn(cTag, rWS)
    
    cTag = "_E_Q" & i & "MgmtStatusColor"
    cRefC = CellColumn(cTag, rWS)
    
    cTag = "_E_Q" & i & "MgmtStatus"
    cRefS = CellColumn(cTag, rWS)
    
    If cStart <> "" And cEnd <> "" And cRefC <> "" And cRefS <> "" Then
        '... and set the color code (Conditional Formatting
        ' start with the Quartel Target and ACtuals
        Call AddColorRng_CF(cStart, cEnd, cRefC, (lRow), rWS)
        'Followed by the Mgmt Status columns - which can be taken from either reference source (see setting)
        If ColorRefCheck Then
            Call AddColorRng_CF(cRefS, cRefS, cRefS, (lRow), rWS)
        Else
            Call AddColorRng_CF(cRefS, cRefS, cRefC, (lRow), rWS)
        End If
    End If
Next

Call StatusBarUpdate("Prepare Conditional Formatting (#3) ...")
' Show cells that are protected with a different color
tCol = "A1"
CellColor = "Locked"        ' "LcokedCellFormatting" same as "TrackingCode_Locked"
Set TRng = rWS.Range(tCol & ":" & num2col(lCol) & lRow)
'=IF(AND(CELL("protect";A1);CELL("row";A1)>1;LEN(TRIM($A1))>0;LEN(TRIM(A$1))>0);TRUE;FALSE)
Formula = TranslateFormula_GenericToLocal("=IF(AND(CELL(""protect""," & tCol & "),CELL(""row""," & tCol & ")>1,LEN(TRIM($" & tCol & "))>0,LEN(TRIM(A$1))>0),TRUE,FALSE)")      'Formula = "=IF(Upper(P2)=""YES"";TRUE;FALSE)"
TRng.FormatConditions.Add Type:=xlExpression, Formula1:=Formula

Count = TRng.FormatConditions.Count
With TRng.FormatConditions(Count)
    .Interior.Color = GetColorCode(CellColor)  'Grey background
    .Font.Bold = False
    .Font.Color = GetColorCode(CellColor, True)
    '.Interior.Pattern = xlSolid
    '.Interior.PatternColorIndex = xlAutomatic
    '.Interior.ThemeColor = xlThemeColorDark1
    ''.Interior.TintAndShade = -0.249977111117893
    '.Interior.TintAndShade = -4.99893185216834E-02  '-0.149998474074526
    '.Interior.PatternTintAndShade = 0
End With
    
Err.Clear

' reset state of last viewing
cWS.Activate
cWS.Select

'Restore status
Application.ScreenUpdating = ScreenUpdate
Application.Calculation = CalcMode

Call StatusBarUpdate("")

End Function
Public Function TranslateFormula_LocalToGeneric(ByVal iFormula As String) As String
    Names.Add "temporaryFormula", RefersToLocal:=iFormula
    TranslateFormula_LocalToGeneric = Names("temporaryFormula").RefersTo
    Names("temporaryFormula").Delete
End Function

Public Function TranslateFormula_GenericToLocal1(ByVal iFormula As String) As String
    Dim v, a As Variant
    
    Names.Add "temporaryFormula", RefersTo:=iFormula
    a = Names(Names.Count)
    
    v = Names("temporaryFormula").RefersToLocal
    ' ERROR: TranslateFormula_GenericToLocal = (v & "")
    Names("temporaryFormula").Delete
End Function

Public Function TranslateFormula_GenericToLocal(ByVal iFormula As String) As String

'assumes that the setting and temp. cell variable is available in the Active worksheet

Dim temporary   As String
Dim result      As String
  
    temporary = Range("TempFormula").Formula
  
    Range("TempFormula").Formula = iFormula
    result = Range("TempFormula").FormulaLocal
    Range("TempFormula").Formula = temporary
    TranslateFormula_GenericToLocal = result
    
    Err.Clear

End Function

Private Sub test_GetColorCode()
    Dim Color As Long

    Color = GetColorCode("Green")
    Range("CurrentQuarter").Interior.Color = Color
    
End Sub


Function GetColorCode(Color As String, Optional CellFont As Boolean) As Long

'assumes that the setting and temp. cell variable is available int he Active worksheet.

Dim Rng As Range

Set Rng = Range("TrackingColor_" & Color)
 
If CellFont Then
    GetColorCode = Rng.Font.Color
Else
    GetColorCode = Rng.Interior.Color
End If

End Function

Function GetColorCodeText(Color As String) As String

Dim wbActive As Workbook
Dim UpdateStatus As Variant

UpdateStatus = Application.ScreenUpdating
Application.ScreenUpdating = False

'ensure that the config data is taken from the workbook that this code is in.
'Otherwise it may work on an outdated code from a template workbook
Set wbActive = ActiveWorkbook
ThisWorkbook.Activate

Dim Rng As Range

Set Rng = Range("TrackingColor_" & Color)
 
GetColorCodeText = Trim(Rng)


wbActive.Activate

Application.ScreenUpdating = UpdateStatus

End Function

Function GetColorCodeFont(Color As String) As Long

Dim Rng As Range

Set Rng = Range("TrackingColor_" & Color)
 
GetColorCodeFont = Rng.Font.Color

End Function
Function AddColorRng_CF(sCol As String, ECol As String, rCol As String, ByRef Max As Long, Optional tWS As Worksheet)

' set the conditional formatting for the tripple color coding

Dim TRng        As Range
Dim rWS         As Worksheet
Dim Formula     As String
Dim FirstRow    As Integer
Dim CellColor   As String
Dim Count       As Integer

On Error Resume Next
If tWS Is Nothing Then
    Set rWS = ActiveSheet
    If Err Then
        Err.Clear
    End If
Else
    Set rWS = tWS
End If

sCol = CellColumn(sCol, rWS)    ' source column
ECol = CellColumn(ECol, rWS)    ' target column
rCol = CellColumn(rCol, rWS)    ' reference column for the color to show

FirstRow = 2

If sCol <> "" And ECol <> "" And rCol <> "" Then
    Set TRng = rWS.Range(sCol & FirstRow & ":" & ECol & Max)
    
    
    ' -----  set "Amber" -------------------------------
    CellColor = "Amber"
    
    'TRng.Cell(1, 1).Select
    'Formula = TranslateFormula_GenericToLocal("=IF(Upper($" & RCol & FirstRow & ")=""AMBER"",TRUE,FALSE)")
    Formula = TranslateFormula_GenericToLocal("=IF(Upper($" & rCol & FirstRow & ")=""" & CellColor & """,TRUE,FALSE)")
    
    TRng.FormatConditions.Add Type:=xlExpression, Formula1:=Formula
    Count = TRng.FormatConditions.Count
    'TRng.FormatConditions(Count).Interior.Color = RGB(255, 235, 156)  'Amber background
    TRng.FormatConditions(Count).Interior.Color = GetColorCode(CellColor)  'Amber background
    TRng.FormatConditions(Count).Font.Bold = False
    
    If (sCol <> ECol) Then
        TRng.FormatConditions(Count).Font.ColorIndex = 1    'Blck
    Else
        'TRng.FormatConditions(Count).Font.Color = RGB(255, 235, 156)
        TRng.FormatConditions(Count).Font.Color = GetColorCode(CellColor)
    End If
    Err.Clear
    
    ' -----  set "Red" -------------------------------
    CellColor = "Red"
    
    'TRng.Cell(1, 1).Select
    'Formula = TranslateFormula_GenericToLocal("=IF(Upper($" & RCol & FirstRow & ")=""AMBER"",TRUE,FALSE)")
    Formula = TranslateFormula_GenericToLocal("=IF(Upper($" & rCol & FirstRow & ")=""" & CellColor & """,TRUE,FALSE)")
    Err.Clear
    TRng.FormatConditions.Add Type:=xlExpression, Formula1:=Formula
    Count = TRng.FormatConditions.Count
    TRng.FormatConditions(Count).Interior.Color = GetColorCode(CellColor)  'Amber background
    TRng.FormatConditions(Count).Font.Bold = False
    
    If (sCol <> ECol) Then
        TRng.FormatConditions(Count).Font.ColorIndex = 1    'Blck
    Else
        TRng.FormatConditions(Count).Font.Color = GetColorCode(CellColor)
    End If
    
    
    ' -----  set "Green" -------------------------------
    CellColor = "Green"
    
    'TRng.Cell(1, 1).Select
    Formula = TranslateFormula_GenericToLocal("=IF(Upper($" & rCol & FirstRow & ")=""" & CellColor & """,TRUE,FALSE)")
    
    TRng.FormatConditions.Add Type:=xlExpression, Formula1:=Formula
    Count = TRng.FormatConditions.Count
    TRng.FormatConditions(Count).Interior.Color = GetColorCode(CellColor)  'Amber background
    TRng.FormatConditions(Count).Font.Bold = False
    
    If (sCol <> ECol) Then
        TRng.FormatConditions(Count).Font.ColorIndex = 1    'Blck
    Else
        TRng.FormatConditions(Count).Font.Color = GetColorCode(CellColor)
    End If

End If


'No color coding if the status is set to missing
'=IF($AT1="Missing";TRUE;FALSE)

End Function

Private Sub T_Copy_CF()
    Call Copy_CF(Range("AA2"), Range("AC2"))
End Sub


Function Copy_CF(sRng As Range, TRng As Range)

Dim f, t As FormatCondition
Dim Col, Rng As String
Dim l, Max As Integer
Dim v As Validation

Err.Clear

Max = LastRow(ActiveSheet)

On Error Resume Next

'clear conditional formatting
Do While TRng.FormatConditions.Count > 0
    TRng.FormatConditions(1).Delete
    If Err Then
        Err.Clear
    End If
Loop

'TRng.Select
'TRng.Copy
'SRng.PasteSpecial Paste:=xlPasteFormulasAndNumberFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False

sRng.Select
sRng.Copy

TRng.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False

End Function


Private Sub Delete_CF()
Dim Max As Integer
 
Max = LastRow(ActiveSheet)
If Max > 3 Then
    With Range("3:" & Max + 1000)
        .FormatConditions.Delete
    End With
End If
End Sub


Function Delete_CF_Cell(Rng As Range)
 
With Rng
    .FormatConditions.Delete
End With

End Function


Function Copy_CF_Range(sCol As String, tCol As String)

Dim Max As Integer
Dim Rng As String

Max = LastRow(ActiveSheet)
    
If sCol <> tCol Then
    Call Copy_CF(Range(sCol & "2"), Range(tCol & "2"))
End If

Rng = sCol & "3" & ":" & tCol & Max
Call Copy_CF(Range(sCol & "2"), Range(Rng))

End Function


' ############################################
' currently not used functions
' ############################################

Function Expand_CF_MgmtStatus(sCol As String, ECol As String)

Dim f As FormatCondition
Dim Rng As String
Dim Max As Integer
Dim t As String
Dim TRng, sRng As Range

On Error Resume Next

Max = LastRow(ActiveSheet)

Set sRng = Range(sCol & "2")
Rng = sCol & "2" & ":" & ECol & Max

Set TRng = Range(Rng)

For Each f In sRng.FormatConditions
    't = f.Formula1
    t = f.AppliesTo
    If Not Err Then
        f.ModifyAppliesToRange Range(Rng)
    End If
Next

End Function

Private Sub Prepare_CF()
    
    Dim Max As Long
    
    ' clean all Conditional Formating
    Call Delete_CF
    Call Delete_CF_Cell(Range("P2:AD2"))
    
    Max = LastRow(ActiveSheet)
    
    ' Copy Conditional Formating to additional columns
    Call Copy_CF(Range("CB1:CP1"), Range("P2:AD" & Max))
    
    ThisWorkbook.Save
    
End Sub

Function Expand_CF(Col As String)

Dim f As FormatCondition
Dim sRng, TRng As Range
Dim Rng As String
Dim l, Max As Integer
Dim v As Validation
Dim t As Variant

On Error Resume Next

Max = LastRow(ActiveSheet)

Set sRng = Range(Col & "2")

Set TRng = Range(Col & "2" & ":" & Col & Max)

l = sRng.FormatConditions.Count

For Each f In sRng.FormatConditions
    't = f.Formula1
    t = f.AppliesTo
    If Not Err Then
        f.ModifyAppliesToRange TRng
    End If
Next

End Function
Private Sub Add_CF()
     
    With Sheet1
        With .Range("A1:A10")
            .Activate
            .FormatConditions.Add xlExpression, Formula1:="=AND(ISNUMBER(A1),A1>10)"
            .FormatConditions(1).Borders.LineStyle = xlContinuous
            .FormatConditions(1).Borders.Weight = xlThin
            .FormatConditions(1).Interior.ColorIndex = 3
            .FormatConditions(1).Font.Bold = True
            .FormatConditions(1).Font.ColorIndex = 6
        End With
        With .Range("B1:B10")
            .Activate
            .FormatConditions.Add xlExpression, Formula1:="=LEN(B1)>3"
            .FormatConditions(1).Borders.LineStyle = xlContinuous
            .FormatConditions(1).Borders.Weight = xlThin
            .FormatConditions(1).Interior.ColorIndex = 2
            .FormatConditions(1).Font.Bold = True
            .FormatConditions(1).Font.ColorIndex = 9
        End With
    End With
     
End Sub


Private Sub setCondFormat()
    Range("B3").Select
    With Range("B3:H63")
        .FormatConditions.Add Type:=xlExpression, Formula1:= _
          "=IF($D3="""",FALSE,IF($F3>=$E3,TRUE,FALSE))"
        With .FormatConditions(.FormatConditions.Count)
            .SetFirstPriority
            With .Interior
                .PatternColorIndex = xlAutomatic
                .Color = 5287936
                .TintAndShade = 0
            End With
        End With
    End With
End Sub




Attribute VB_Name = "DataValidation"
Option Explicit

Public Const Col_Top3 = "_E_Top3"
Public Const Col_CSRelated = "_E_CSRelated"

Dim ErrCount As Integer

'Public Const Col_MgmtStatusQ1 = "_E_Q1MgmtStatus"
'Public Const Col_MgmtStatusQ2 = "_E_Q2MgmtStatus"
'Public Const Col_MgmtStatusQ3 = "_E_Q3MgmtStatus"
'Public Const Col_MgmtStatusQ4 = "_E_Q4MgmtStatus"


Function Expand_DV()
    Call Expand_DV_WS(Worksheets(Tab_BMCEnablerList))
End Function

Sub Expand_DV_WS(rWS As Worksheet)

Dim Prot    As Boolean
Dim Visible As Variant
Dim i       As Integer
Dim Col     As String
Dim CalcMode    As String

'save current state of viewing
Dim cWS As Worksheet
Set cWS = ActiveSheet
Dim ScreenUpdate As Variant

'save status
ScreenUpdate = Application.ScreenUpdating
Application.ScreenUpdating = False

CalcMode = Application.Calculation
Application.Calculate
Application.Calculation = xlCalculationManual

Prot = UnProtectWS(rWS)

Call StatusBarUpdate("Apply Data Validation ...")

For i = 1 To 4
    ' format the NAMED cell column ...
    Col = "_E_Q" & i & "MgmtStatus"
    If Col <> "" Then
        '... when it is valid
        Call Expand_DV_Col_GAR(rWS, Col)
    End If
Next

Call Expand_DV_Col_Top3(rWS, Col_Top3)
Call Expand_DV_Col_YesNo(rWS, Col_CSRelated)

Call ClearStatusBar

' reset state of last viewing
If cWS.Visible = xlSheetVisible Then
    cWS.Activate
    cWS.Select
End If

Application.ScreenUpdating = ScreenUpdate
Application.Calculation = CalcMode

Call ProtectWS(rWS, Prot)

End Sub


Function Expand_DV_Col_GAR(ws As Worksheet, Col As String) As Boolean

Dim HRng, TRng, Formula     As String
Dim Max                     As Integer
Dim ColorText               As String

Expand_DV_Col_GAR = False

Col = CellColumn(Col, ws)

On Error Resume Next

'get the selection for the status drop down list
ColorText = GetColorCodeText("Green")
If ColorText <> "" Then Formula = ColorText
ColorText = GetColorCodeText("Amber")
If ColorText <> "" Then
    If Formula <> "" Then Formula = Formula & ","
    Formula = Formula & ColorText
End If
ColorText = GetColorCodeText("Red")
If ColorText <> "" Then
    If Formula <> "" Then Formula = Formula & ","
    Formula = Formula & ColorText
End If

Err.Clear

If (Col <> "") Then         'ws.Name = Tab_BMCEnablerList
    'Formula = TranslateFormula_GenericToLocal("Green,Amber,Red")
    Formula = TranslateFormula_GenericToLocal(Formula)
    'Reset the Data Validation definition
    With ws.Range(Col & "2").Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                    xlBetween, Formula1:=Formula
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = True
            .ShowError = True
    End With
    
    HRng = Col & "2"
    Max = LastRow(ws)
    If Max > 2 Then
        TRng = Col & "3:" & Col & Max
        Call Expand_DV_Range(ws.Range(HRng), ws.Range(TRng))
    End If
    
    Expand_DV_Col_GAR = Err.number
Else
    'error found
    Expand_DV_Col_GAR = True
End If

If Err Then
    If ErrCount < 20 Then
        Call LogEventAdd("Expand_DV_Col_GAR: " & ws.Name & " : " & Err.Description)
        ErrCount = ErrCount + 1
    End If
Else
    ErrCount = 0
End If

End Function


Function Expand_DV_Col_Top3(ws As Worksheet, Col As String) As Boolean
Dim ValidationString    As String
ValidationString = "Yes,No,Cancel"

Expand_DV_Col_Top3 = Expand_DV_Column(ws, Col, ValidationString)

End Function

Function Expand_DV_Col_YesNo(ws As Worksheet, Col As String) As Boolean
Dim ValidationString    As String
ValidationString = "Yes,No"

Expand_DV_Col_YesNo = Expand_DV_Column(ws, Col, ValidationString)

End Function

Function Expand_DV_Column(ws As Worksheet, Col As String, ValidationList As String) As Boolean

'Applies any 'data validation' list provided in the "ValidationList" like "Yes,No,Cancel"
'takes care of language specific separators in the list.

Dim HRng, TRng, Formula As String
Dim Max As Integer

Expand_DV_Column = False

Col = CellColumn(Col, ws)

On Error Resume Next

If (Col <> "") Then
    Formula = TranslateFormula_GenericToLocal(ValidationList)
   
    'Reset the Data Validation definition
    With ws.Range(Col & "2").Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                    xlBetween, Formula1:=Formula
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = True
            .ShowError = True
    End With
    
    HRng = Col & "2"
    Max = LastRow(ws)
    If Max > 2 Then
        TRng = Col & "3:" & Col & Max
        Call Expand_DV_Range(ws.Range(HRng), ws.Range(TRng))
    End If
    If Err Then
        Call LogEventAdd("Failed to update data validation list [" & ValidationList & "] for column '" & Col & "'" & vbCrLf & Err.Description)
    End If
    'return an error if any happens, otherwise '0'
    Expand_DV_Column = Err.number
Else
    'error found
    Expand_DV_Column = True
End If

End Function


Function Expand_DV_Range(sRng As Range, TRng As Range)
'
On Error Resume Next
Dim f As String
Dim v As Validation
On Error Resume Next

Set v = sRng.Validation
f = v.Formula1

If f <> "" And Err = 0 Then
    f = Replace(f, ";", ",", , , vbTextCompare)
    f = TranslateFormula_GenericToLocal(f)
    With TRng.Validation
        .Delete
        '.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Green;Amber;Red"
        .Add Type:=v.Type, AlertStyle:=v.AlertStyle, Operator:=v.Operator, Formula1:=f
        .IgnoreBlank = v.IgnoreBlank 'True
        .InCellDropdown = v.InCellDropdown 'True
        .InputTitle = v.InputTitle '""
        .ErrorTitle = v.ErrorTitle '""
        .InputMessage = v.InputMessage '""
        .ErrorMessage = v.ErrorMessage  '""
        .ShowInput = v.ShowInput ' True
        .ShowError = v.ShowError 'True
    End With
End If
End Function




Attribute VB_Name = "Module1"
Option Explicit

Sub UnhideColumns()

Range("A:da").EntireColumn.Hidden = True       ' to make it show again first hide the columns
Range("A:da").EntireColumn.Hidden = False      ' then unhide them

End Sub
Attribute VB_Name = "Module2"
Sub test_GetFileName()

Dim Fname As String
Dim Title   As String
Dim filter As String

'Selecting the ppt Template file
'-------------------------------
filter = "Excel,*.ppt*"
FilterIndex = 1
Title = "Select the most recent template PPT version of the report"
'PPTSlides = Application.GetOpenFilename(filter, FilterIndex, Title, ThisWorkbook.Path)
filter = "*.xls*"
'Fname = GetFileName(Title, filter, ThisWorkbook.path)
Fname = GetFolderName(Title, filter, ThisWorkbook.path)
If Fname = "" Then
    MsgBox "Nothing Selected - Update Aborted"
    Exit Sub
End If

'Range("LastPPTTemplateFile") = PPTSlides


'Open Powerpoint Application
'UserForm1.Show

'Set objPPT = CreateObject("PowerPoint.Application")
'objPPT.Visible = True
'Set objPres = objPPT.presentations.Open(PPTSlides)

With Application.FileDialog(msoFileDialogFolderPicker)
    .Title = "Set target folder for newly created market BMC PPT files"
    .ButtonName = "Select"
    .Show
    TargetFolder = .SelectedItems(1)
End With

End Sub
Public Function GetFileName(ByRef Title As String, FileFilter As String, Folder As String) As String
Dim f As Office.FileDialog
Set f = Application.FileDialog(msoFileDialogFilePicker)

On Error Resume Next

With f
    .Title = Title                    'Fenstertitel
    .AllowMultiSelect = False                 'Nur eine Datei ausw|fffd|hlbar
    .ButtonName = "Select"                 'Button Beschriftung
    .Filters.Clear                            'erst alle Filter l|fffd|schen
    '.Filters.Add FileFilter
    .Filters.Add "", FileFilter
    '.Filters.Add "Access-Dateien", "*.mdb; *.accdb"
    .FilterIndex = 1                          'einen Filter vorselektieren
    .InitialFileName = Folder                  'Startverzeichnis
    .Show
End With

If f.SelectedItems.Count > 0 Then
    GetFileName = f.SelectedItems(1)
End If

End Function

Public Function GetFolderName(ByRef Title As String, FileFilter As String, Folder As String) As String
Dim f As Office.FileDialog
Set f = Application.FileDialog(msoFileDialogFolderPicker)

With f
    .Title = Title                    'Fenstertitel
    .AllowMultiSelect = False                 'Nur eine Datei ausw|fffd|hlbar
    .ButtonName = "Select"                 'Button Beschriftung
    .Filters.Clear                            'erst alle Filter l|fffd|schen
    '.Filters.Add FileFilter
    '.Filters.Add "", FileFilter
    '.Filters.Add "Access-Dateien", "*.mdb; *.accdb"
    '.FilterIndex = 1                          'einen Filter vorselektieren
    .InitialFileName = Folder                  'Startverzeichnis
    .Show
End With

If f.SelectedItems.Count > 0 Then
    GetFolderName = f.SelectedItems(1)
End If

End Function

'="BMC Enabler Tracking Template (FY "&BMCYear&" - "&FileVersion & ")" & IF( OR(TrackingFileType="BG";TrackingFileType="MARKET";TrackingFileType="HS";TrackingFileType="PH"); CHAR(10) & "Last Status Import: "&TEXT(LastImportEnablerStatus;"[$-0409]DD-MMM-YYYY HH:MM");"" )
Public Function GetFormat$(Cell As Range, Optional ByVal UseLocal As Boolean)
    If UseLocal Then
        GetFormat = Cell.NumberFormatLocal
    Else
        GetFormat = Cell.NumberFormat
    End If
End Function

Attribute VB_Name = "PPTModule1"
Option Explicit

Sub ExcelRangeToPowerPoint()

Dim rng1 As Range
Dim rng2            As Range
Dim PowerPointApp   As Object
Dim myPresentation  As Object
Dim mySlide         As Object
Dim myShape         As Object
Dim Market          As String
Dim BG              As String
Dim BU              As String
Dim Top3            As String
Dim DBKey           As String

'Create an Instance of PowerPoint
On Error Resume Next
    
'Is PowerPoint already opened?
Set PowerPointApp = GetObject(class:="PowerPoint.Application")
    
'Clear the error between errors
Err.Clear

'If PowerPoint is not already open then open PowerPoint
If PowerPointApp Is Nothing Then Set PowerPointApp = CreateObject(class:="PowerPoint.Application")
    
'Handle if the PowerPoint Application is not found
If Err.number = 429 Then
    MsgBox "PowerPoint could not be found, aborting."
    Exit Sub
End If

'Optimize Code
Application.ScreenUpdating = False
  
'Create a New Presentation
Set myPresentation = PowerPointApp.Presentations.Add

' set the slide title parameter
Err.Clear
DBKey = "MDB"
BG = ActiveSheet.Range(DBKey & "_BG")
If Err Then
    DBKey = "BDB"
    Err.Clear
End If

BG = ActiveSheet.Range(DBKey & "_BG")
If Err Then
    BG = "BG?"
End If

BU = ActiveSheet.Range(DBKey & "_BU")
If Err Then
    BU = "BU?"
End If

Market = ActiveSheet.Range(DBKey & "_Market")
If Err Then
    Market = "Market?"
End If

Top3 = ActiveSheet.Range(DBKey & "_KPI")
If Err Then
    Top3 = "Top3?"
End If

Range("Top3Title_MDBSlide") = Top3
Range("BGTitle_MDBSlide") = BG
Range("BUTitle_MDBSlide") = BU
Range("MarketTitle_MDBSlide") = Market

Application.Calculate 'recalculate to ensure the above settings are applied to the worksheets
'#new end
    
If Not Err Then
    Call CopyExcelRangeToPPT(myPresentation, ActiveSheet)
    'Make PowerPoint Visible and Active
    PowerPointApp.Visible = True
    PowerPointApp.Activate
End If

End Sub

Function CopyExcelRangeToPPT(myPresentation As Object, Optional dbWS As Worksheet)

Dim rng1 As Range
Dim rng2 As Range
Dim mySlide As Object
Dim myShape As Object
Dim SlideTitle As Range
Dim SlideHyperLink As Range
Dim SlideSize        As Integer
Dim ShapeCorrection, TopEnablerSectionOffset, TopMarginHyperlink_FromBottom, TopMarginHeader  As Double
Dim Correction          As Variant   'double
Dim TopEnablerSection   As Integer


On Error Resume Next
Err.Clear

If myPresentation Is Nothing Then
    Exit Function
End If
  
'Optimize Code
Application.ScreenUpdating = False
  
'Add a slide to the Presentation
Set mySlide = myPresentation.Slides.Add(myPresentation.Slides.Count + 1, 12) '12 = ppLayoutBlank

' determine slide format (standard versus widescreen)
' https://msdn.microsoft.com/en-us/library/office/aa211582(v=office.11).aspx
TopEnablerSectionOffset = D_TopEnablerSectionOffset
TopMarginHyperlink_FromBottom = D_TopMarginHyperlink_FromBottom
TopMarginHeader = D_TopMarginHeader
ShapeCorrection = D_ShapeCorrection

If ThisWorkbook.Sheets(Tab_BMCDashboard).Range("SlideSize") = "16x9" Then
    SlideSize = ppWideScreen
    Correction = 405 / 540
    TopEnablerSectionOffset = TopEnablerSectionOffset * Correction
    TopMarginHyperlink_FromBottom = TopMarginHyperlink_FromBottom * Correction
    TopMarginHeader = TopMarginHeader * Correction
    ShapeCorrection = ShapeCorrection * Correction
Else
    SlideSize = ppSlideSizeOnScreen
End If

myPresentation.PageSetup.SlideSize = SlideSize  '1 = ppSlideSizeOnScreen ; 3 = ppSlideSizeA4Paper '2 = ppSlideSizeLetterPaper

'-----------------------------------
'1. Copy Slide Title
    'StatusBarUpdate ("Prepare slide " & s & " .T.")
    Err.Clear
    Set SlideTitle = Range("MDBDashboardSlideTitle")


    SlideTitle.Copy
    'On Error Resume Next
    'Paste to PowerPoint and position
    mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
    'On Error GoTo 0
    If Err Then
        Err.Clear
        SlideTitle.Copy
        mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
    End If
    
    'myShape.Left = 0
    'myShape.Top = 0
    'myShape.Height = 405
        
    'StatusBarUpdate ("Prepare slide " & s & " .T2.")
    
    If Not Err Then
    
        Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
       
        'Set position:
        myShape.Left = LeftMargin
        myShape.Top = TopMarginHeader
        myShape.LockAspectRatio = msoTrue
        myShape.ScaleWidth ShapeCorrection, msoFalse
        'Calculate the offset of the Enabler section from the top
        TopEnablerSection = myShape.Height + TopMarginHeader + TopEnablerSectionOffset
    Else
        TopEnablerSection = 80
    End If
    
    Err.Clear
 '-----------------------------------
'Copy Hyperlink
    Set SlideHyperLink = Range("DashboardHyperlink")

    If (TopMarginHyperlink_FromBottom > 0) Then
        'StatusBarUpdate ("Prepare slide " & s & " .H.")
        
        SlideHyperLink.Copy
        'Paste to PowerPoint and position
        mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
        'mySlide.Shapes.Paste
        
        If Err Then
            Err.Clear
            SlideHyperLink.Copy
            mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
        End If
        
        'StatusBarUpdate ("Prepare slide " & s & " .H2.")
        If Not Err Then
            Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
           
            'Set position:
            myShape.Left = LeftMargin
            myShape.Top = mySlide.Master.Height - TopMarginHyperlink_FromBottom
            myShape.LockAspectRatio = msoTrue
            myShape.ScaleWidth 0.595, msoFalse
        End If
        Err.Clear
    End If
'-------------------------------------------
'2. Copy Excel Range1
If dbWS Is Nothing Then
    Set rng1 = ThisWorkbook.ActiveSheet.Range("Slide_Output")
Else
    Set rng1 = dbWS.Range("Slide_Output")
End If

rng1.Copy

'Paste to PowerPoint and position
mySlide.Shapes.PasteSpecial DataType:=2  '2 = ppPasteEnhancedMetafile
Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
   
'If PowerPoint version is 2013 use one format, otherwise another; 15 is code for PowerPoint 2013; 2010 is 14

'If Application.Version = "15.0" Then
'    myShape.Left = 7
'    myShape.Top = 65
'    myShape.LockAspectRatio = msoFalse
'    myShape.ScaleWidth 0.595, msoFalse
'    myShape.ScaleHeight 0.595, msoFalse
'Else
    'Set position:
myShape.Left = LeftMargin
myShape.Top = TopEnablerSection '80
myShape.LockAspectRatio = msoTrue
myShape.Width = mySlide.Master.Width - 2 * myShape.Left
'myShape.ScaleWidth 0.79, msoFalse
'End If


'Set EnablerCCCSection = ThisWorkbook.ActiveSheet.Range("ENABLERS")

Set SlideTitle = Range("MDBDashboardSlideTitle")
'Set SlideTitle = Range("A8")
Set SlideHyperLink = Range("DashboardHyperlink")

'Clear The Clipboard
Application.CutCopyMode = False

Err.Clear

End Function


Attribute VB_Name = "PPTModule3"
Option Explicit

Sub ExcelRangeToPowerPoint1()


Dim rng1 As Range
Dim rng2 As Range
Dim PowerPointApp As Object
Dim myPresentation As Object
Dim mySlide As Object
Dim myShape As Object

'Copy Range from Excel
  Set rng1 = ThisWorkbook.ActiveSheet.Range("MKT_OUTPUT")


'Create an Instance of PowerPoint
  On Error Resume Next
    
    'Is PowerPoint already opened?
      Set PowerPointApp = GetObject(class:="PowerPoint.Application")
    
    'Clear the error between errors
      Err.Clear

    'If PowerPoint is not already open then open PowerPoint
      If PowerPointApp Is Nothing Then Set PowerPointApp = CreateObject(class:="PowerPoint.Application")
    
    'Handle if the PowerPoint Application is not found
      If Err.number = 429 Then
        MsgBox "PowerPoint could not be found, aborting."
        Exit Sub
      End If

  On Error GoTo 0

'Optimize Code
  Application.ScreenUpdating = False
  
'Create a New Presentation
  Set myPresentation = PowerPointApp.Presentations.Add
  
'Add a slide to the Presentation
  Set mySlide = myPresentation.Slides.Add(1, 12) '12 = ppLayoutBlank

'Copy Excel Range1
    rng1.Copy
    'Paste to PowerPoint and position
    mySlide.Shapes.PasteSpecial DataType:=2  '2 = ppPasteEnhancedMetafile
    Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
   
    'If PowerPoint version is 2013 use one format, otherwise another; 15 is code for PowerPoint 2013; 2010 is 14

    If Application.Version = "15.0" Then
      myShape.Left = 7
      myShape.Top = 65
      myShape.LockAspectRatio = msoFalse
      myShape.ScaleWidth 0.59, msoFalse
      myShape.ScaleHeight 0.59, msoFalse
      Else
     'Set position:
      myShape.Left = 7
      myShape.Top = 65
      myShape.LockAspectRatio = msoTrue
      myShape.ScaleWidth 0.79, msoFalse

    End If


'Make PowerPoint Visible and Active
  PowerPointApp.Visible = True
  PowerPointApp.Activate

'Clear The Clipboard
  Application.CutCopyMode = False
  
End Sub


Attribute VB_Name = "PPTModule4"
Option Explicit

Sub ExcelRangeToPowerPoint2()

Dim rng1 As Range
Dim rng2 As Range
Dim PowerPointApp As Object
Dim myPresentation As Object
Dim mySlide As Object
Dim myShape As Object

'Copy Range from Excel
  Set rng1 = ThisWorkbook.ActiveSheet.Range("TOP_OUTPUT")


'Create an Instance of PowerPoint
  On Error Resume Next
    
    'Is PowerPoint already opened?
      Set PowerPointApp = GetObject(class:="PowerPoint.Application")
    
    'Clear the error between errors
      Err.Clear

    'If PowerPoint is not already open then open PowerPoint
      If PowerPointApp Is Nothing Then Set PowerPointApp = CreateObject(class:="PowerPoint.Application")
    
    'Handle if the PowerPoint Application is not found
      If Err.number = 429 Then
        MsgBox "PowerPoint could not be found, aborting."
        Exit Sub
      End If

  On Error GoTo 0

'Optimize Code
  Application.ScreenUpdating = False
  
'Create a New Presentation
  Set myPresentation = PowerPointApp.Presentations.Add
  
'Add a slide to the Presentation
  Set mySlide = myPresentation.Slides.Add(1, 12) '12 = ppLayoutBlank

'Copy Excel Range1
    rng1.Copy
    'Paste to PowerPoint and position
    mySlide.Shapes.PasteSpecial DataType:=2  '2 = ppPasteEnhancedMetafile
    Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
   
    'If PowerPoint version is 2013 use one format, otherwise another; 15 is code for PowerPoint 2013; 2010 is 14

    If Application.Version = "15.0" Then
      myShape.Left = 7
      myShape.Top = 65
      myShape.LockAspectRatio = msoFalse
      myShape.ScaleWidth 0.595, msoFalse
      myShape.ScaleHeight 0.595, msoFalse
      Else
     'Set position:
      myShape.Left = 7
      myShape.Top = 65
      myShape.LockAspectRatio = msoTrue
      myShape.ScaleWidth 0.79, msoFalse

    End If


'Make PowerPoint Visible and Active
  PowerPointApp.Visible = True
  PowerPointApp.Activate

'Clear The Clipboard
  Application.CutCopyMode = False
  
End Sub


Attribute VB_Name = "PPTModule5"
Sub ExcelRangeToPowerPoint3()

Dim rng1 As Range
Dim rng2 As Range
Dim PowerPointApp As Object
Dim myPresentation As Object
Dim mySlide As Object
Dim myShape As Object

'Copy Range from Excel
  Set rng1 = ThisWorkbook.ActiveSheet.Range("BMC_OUTPUT")


'Create an Instance of PowerPoint
  On Error Resume Next
    
    'Is PowerPoint already opened?
      Set PowerPointApp = GetObject(class:="PowerPoint.Application")
    
    'Clear the error between errors
      Err.Clear

    'If PowerPoint is not already open then open PowerPoint
      If PowerPointApp Is Nothing Then Set PowerPointApp = CreateObject(class:="PowerPoint.Application")
    
    'Handle if the PowerPoint Application is not found
      If Err.number = 429 Then
        MsgBox "PowerPoint could not be found, aborting."
        Exit Sub
      End If

  On Error GoTo 0

'Optimize Code
  Application.ScreenUpdating = False
  
'Create a New Presentation
  Set myPresentation = PowerPointApp.Presentations.Add
  
'Add a slide to the Presentation
  Set mySlide = myPresentation.Slides.Add(1, 12) '12 = ppLayoutBlank

'Copy Excel Range1
    rng1.Copy
    'Paste to PowerPoint and position
    mySlide.Shapes.PasteSpecial DataType:=2  '2 = ppPasteEnhancedMetafile
    Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
   
    'If PowerPoint version is 2013 use one format, otherwise another; 15 is code for PowerPoint 2013; 2010 is 14

    If Application.Version = "15.0" Then
      myShape.Left = 7
      myShape.Top = 65
      myShape.LockAspectRatio = msoFalse
      myShape.ScaleWidth 0.595, msoFalse
      myShape.ScaleHeight 0.595, msoFalse
      Else
     'Set position:
      myShape.Left = 7
      myShape.Top = 65
      myShape.LockAspectRatio = msoTrue
      myShape.ScaleWidth 0.79, msoFalse

    End If


'Make PowerPoint Visible and Active
  PowerPointApp.Visible = True
  PowerPointApp.Activate

'Clear The Clipboard
  Application.CutCopyMode = False
  
End Sub



Attribute VB_Name = "PPTModule6"

Attribute VB_Name = "PPTModule7"
Sub ExcelRangeToPowerPointENABLER1()

Dim rng1 As Range
Dim rng2 As Range
Dim PowerPointApp As Object
Dim myPresentation As Object
Dim mySlide As Object
Dim myShape As Object

'Copy Range from Excel
  lRow = ThisWorkbook.Sheets(Tab_BMCDashboard).Range("B7").End(xlDown).row
  If ThisWorkbook.Sheets(Tab_BMCDashboard).Range("B9").Value = "Nr" Then lRow = 7
  Set rng1 = ThisWorkbook.Sheets(Tab_BMCDashboard).Range("B7:Q" & lRow)

'Create an Instance of PowerPoint
  On Error Resume Next
    
    'Is PowerPoint already opened?
      Set PowerPointApp = GetObject(class:="PowerPoint.Application")
    
    'Clear the error between errors
      Err.Clear

    'If PowerPoint is not already open then open PowerPoint
      If PowerPointApp Is Nothing Then Set PowerPointApp = CreateObject(class:="PowerPoint.Application")
    
    'Handle if the PowerPoint Application is not found
      If Err.number = 429 Then
        MsgBox "PowerPoint could not be found, aborting."
        Exit Sub
      End If

  On Error GoTo 0

'Optimize Code
  Application.ScreenUpdating = False
  
'Create a New Presentation
  Set myPresentation = PowerPointApp.Presentations.Add
  
'Add a slide to the Presentation
  Set mySlide = myPresentation.Slides.Add(1, 12) '12 = ppLayoutBlank

'Copy Excel Range1
    rng1.Copy
    'Paste to PowerPoint and position
    mySlide.Shapes.PasteSpecial DataType:=2  '2 = ppPasteEnhancedMetafile
    Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
   
    'If PowerPoint version is 2013 use one format, otherwise another; 15 is code for PowerPoint 2013; 2010 is 14

    If Application.Version = "15.0" Then
      myShape.Left = 7
      myShape.Top = 65
      myShape.LockAspectRatio = msoFalse
      myShape.ScaleWidth 0.595, msoFalse
      myShape.ScaleHeight 0.595, msoFalse
      Else
     'Set position:
      myShape.Left = 7
      myShape.Top = 65
      myShape.LockAspectRatio = msoTrue
      myShape.ScaleWidth 0.79, msoFalse

    End If


'Make PowerPoint Visible and Active
  PowerPointApp.Visible = True
  PowerPointApp.Activate

'Clear The Clipboard
  Application.CutCopyMode = False
  
End Sub





Attribute VB_Name = "PPTModule8"
'PPT settings
'2 = Graphic
'8 = Text
Const ShapeType = 2
Const LeftMargin = 45   'relates to the 'paste'd objects
Const TopEnablerSectionOffset = 20
Const TopMarginHyperlink_FromBottom = 50
Const TopMarginHeader = 40
'


Sub ExcelRangeToPowerPointENABLER_Lv16()

'this is the main function that creates both Enabler and CCC on the slide and adapts the output to the slide size

Dim EnablerCCCSection As Range
Dim SlideTitle As Range
Dim SlideHyperLink As Range
Dim PowerPointApp As Object
Dim myPresentation As Object
Dim mySlide As Object
Dim myShape As Object
Dim NextRow As Integer
Dim s As Integer
Dim TopEnablerSection As Integer

If MsgBox("This will create a series of slides that document the KPI status based on your selection in cells B1 .. B4 (green fields)." & _
        vbCrLf & vbCrLf & _
        "For this a separate PPT file opens." & vbCrLf & vbCrLf & _
        "This may take a few seconds.", vbOKCancel) <> vbOK Then
    Exit Sub
End If

'update all calculated values in case this wasn't done before.
Application.Calculate

'Refresh the Dashboard table based on the selection
Call RefreshDashboardView
  
'Copy Range from Excel
lRow = ThisWorkbook.Sheets(Tab_BMCDashboard).Range("B" & Rows.Count).End(xlUp).row
Set EnablerCCCSection = ThisWorkbook.Sheets(Tab_BMCDashboard).Range("B7:Q" & lRow)

'Set EnablerCCCSection = ThisWorkbook.ActiveSheet.Range("ENABLERS")
Set SlideTitle = Range("DashboardSlideTitle")
'Set SlideTitle = Range("A8")
Set SlideHyperLink = Range("DashboardHyperlink")



'Create an Instance of PowerPoint
On Error Resume Next
    
StatusBarUpdate ("Activate Powerpoint ...")
       
'Is PowerPoint already opened?
Set PowerPointApp = GetObject(class:="PowerPoint.Application")
    
'Clear the error between errors
Err.Clear

'If PowerPoint is not already open then open PowerPoint
If PowerPointApp Is Nothing Then Set PowerPointApp = CreateObject(class:="PowerPoint.Application")
    
'Handle if the PowerPoint Application is not found
If Err.number = 429 Then
    MsgBox "PowerPoint could not be found, aborting."
    Exit Sub
End If

  On Error GoTo 0

'Optimize Code

StatusBarUpdate ("Create Powerpoint Presentation...")
Application.ScreenUpdating = False

'Create a New Presentation
Set myPresentation = PowerPointApp.Presentations.Add

'https://msdn.microsoft.com/en-us/library/office/aa211582(v=office.11).aspx
myPresentation.PageSetup.SlideSize = 1 '1 = ppSlideSizeOnScreen ; 3 = ppSlideSizeA4Paper '2 = ppSlideSizeLetterPaper

StatusBarUpdate ("Minimize Powerpoint ...")

PowerPointApp.Visible = True
'PowerPointApp.WindowState = 3       '3 = ppWindowMaximized; 2 = ppWindowMinimized; 1 = ppWindowNormal
PowerPointApp.WindowState = 1       '2 = ppWindowMinimized; 1 = ppWindowNormal

'Make PowerPoint Visible and Active
'PowerPointApp.Visible = msoFalse
Err.Clear

On Error Resume Next

StatusBarUpdate ("Create slides...")

MaxHeight = Range("MaxHeight")
FirstRow = 8
NextRow = FirstRow

Application.ScreenUpdating = True
Application.ScreenUpdating = False

'Switch to automatic calculation as some fields will change (e.g. businesses in the title) during the creation of the slides.
Application.Calculation = xlCalculationAutomatic

Do While NextRow > 0
    DoEvents
    
    s = s + 1
    StatusBarUpdate ("Prepare slide " & s & " ...")
    
    'Add a slide to the Presentation
    MyCount = myPresentation.Slides.Count
    Set mySlide = myPresentation.Slides.Add(myPresentation.Slides.Count + 1, 12) '12 = ppLayoutBlank

    If MaxHeight = 0 Then
        MaxHeight = mySlide.Master.Height - TopMarginHeader - TopMarginHyperlink_FromBottom
    End If
    
    NextRow = FixAtMaxTableHeight((NextRow))
  
'-----------------------------------
'Copy Hyperlink
    StatusBarUpdate ("Prepare slide " & s & " .H.")
    
    SlideHyperLink.Copy
    'Paste to PowerPoint and position
    mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
    'mySlide.Shapes.Paste
    
    If Err Then
        Err.Clear
        SlideHyperLink.Copy
        mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
    End If
    
    StatusBarUpdate ("Prepare slide " & s & " .H2.")
    If Not Err Then
        Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
       
        'If PowerPoint version is 2013 or more recent use one format, otherwise another; 15 is code for PowerPoint 2013; 2010 is 14
    
        'Set position:
        myShape.Left = LeftMargin
        myShape.Top = mySlide.Master.Height - TopMarginHyperlink_FromBottom
        myShape.LockAspectRatio = msoTrue
        myShape.ScaleWidth 0.595, msoFalse
    End If
    Err.Clear
    
'-----------------------------------
'Copy Slide Title
    StatusBarUpdate ("Prepare slide " & s & " .T.")
    
    SlideTitle.Copy
    'On Error Resume Next
    'Paste to PowerPoint and position
    mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
    'On Error GoTo 0
    If Err Then
        Err.Clear
        SlideTitle.Copy
        mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
    End If
    
    StatusBarUpdate ("Prepare slide " & s & " .T2.")
    
    If Not Err Then
    
        Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
       
        'If PowerPoint version is 2013 or more recent use one format, otherwise another; 15 is code for PowerPoint 2013; 2010 is 14
    
        'Set position:
        myShape.Left = LeftMargin
        myShape.Top = TopMarginHeader
        myShape.LockAspectRatio = msoTrue
        myShape.ScaleWidth 0.7, msoFalse
        TopEnablerSection = myShape.Height + TopMarginHeader + TopEnablerSectionOffset
    End If
    Err.Clear

'--------------------------------------
'Copy Enabler and CCC section
    StatusBarUpdate ("Prepare slide " & s & " .E.")
    
    EnablerCCCSection.Copy
    On Error Resume Next
    'Paste to PowerPoint and position
    mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile
    
    If Err Then
        Err.Clear
        EnablerCCCSection.Copy
        mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
    End If
    
    StatusBarUpdate ("Prepare slide " & s & " .E2.")
    If Not Err Then
    
        Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
       
        'If PowerPoint version is 2013 use one format, otherwise another; 15 is code for PowerPoint 2013; 2010 is 14
    
        'Set position:
        myShape.Left = LeftMargin
        myShape.Top = TopEnablerSection
        myShape.LockAspectRatio = msoTrue
        myShape.Width = mySlide.Master.Width - 1.5 * LeftMargin 'make the right margin a bit smaller to gain space

        t = mySlide.Master.Width
    End If
    Err.Clear
Loop

StatusBarUpdate ("Refresh Dashboard ...")
    
Call ResetDashboardSheet


'Clear The Clipboard
Application.CutCopyMode = False
  
StatusBarUpdate ("Minimize")

PowerPointApp.WindowState = 2       '2 = ppWindowMinimized; 1 = ppWindowNormal

AppActivate "Microsoft Excel"
Application.WindowState = xlMaximized

StatusBarUpdate ("")

MsgBox ("PPT file created.")

'Make PowerPoint Visible and Active
PowerPointApp.Visible = True
PowerPointApp.WindowState = 3       '3 = ppWindowMaximized; 2 = ppWindowMinimized; 1 = ppWindowNormal
PowerPointApp.Activate

End Sub


Attribute VB_Name = "P_EnablerAndCCCToPPT"
Option Explicit

'PPT settings
'2 = Graphic
'8 = Text
Public Const ShapeType = 2
Public Const LeftMargin = 45   'relates to the 'paste'd objects
Public Const D_TopEnablerSectionOffset = 15        'default for OnScreen Presentation = 20
Public Const D_TopMarginHyperlink_FromBottom = 30   'default for OnScreen Presentation = 50
Public Const D_Height_Extra_Margin = 15
Public Const D_TopMarginHeader = 40
Public Const D_ShapeCorrection = 0.7
Public Const ppSlideSizeOnScreen = 1
Public Const ppSlideSizeA4Paper = 3
Public Const ppSlideSizeLetterPaper = 2
Public Const ppWideScreen = 15
Global Const XLS2PPT_Pixeladjustment = 1.5

'
Sub ExcelRangeToPowerPointENABLER_L()

'This is the main function that creates both Enabler and CCC on the slide and adapts the output to the slide size

Dim EnablerCCCSection As Range
Dim SlideTitle As Range
Dim SlideHyperLink As Range
Dim PowerPointApp As Object
Dim myPresentation As Object
Dim mySlide             As Object
Dim myShape             As Object
Dim NextRow             As Integer
Dim LastNextRow         As Integer
Dim s, SlideSize        As Integer
Dim TopEnablerSection   As Integer
Dim lRow                As Integer
Dim Correction          As Variant   'double
Dim MyCount, t          As Integer

'default values depend on slide size
Dim ShapeCorrection, TopEnablerSectionOffset, TopMarginHyperlink_FromBottom, TopMarginHeader  As Double


If MsgBox("This will create a series of slides that document the KPI status based on your selection in cells B1 .. B4 (green fields)." & _
        vbCrLf & vbCrLf & _
        "For this a separate PPT file opens." & vbCrLf & vbCrLf & _
        "This may take a few seconds.", vbOKCancel) <> vbOK Then
    GoTo ExitSub
End If

Call UpdateSetting("PleaseWaitFlag", "True")
ThisWorkbook.Save
Call UpdateSetting("PleaseWaitFlag", "True")
DoEvents

'update all calculated values in case this wasn't done before.
Application.Calculate

'Refresh the Dashboard table based on the selection
Call RefreshDashboardView
  
'Copy Range from Excel
lRow = ThisWorkbook.Sheets(Tab_BMCDashboard).Range("B" & Rows.Count).End(xlUp).row
'lRow = LastRow(ThisWorkbook.Sheets(Tab_BMCDashboard))
Set EnablerCCCSection = ThisWorkbook.Sheets(Tab_BMCDashboard).Range("B7:Q" & lRow)

'Set EnablerCCCSection = ThisWorkbook.ActiveSheet.Range("ENABLERS")
Set SlideTitle = Range("DashboardSlideTitle")
'Set SlideTitle = Range("A8")
Set SlideHyperLink = Range("DashboardHyperlink")



'Create an Instance of PowerPoint
On Error Resume Next
    
StatusBarUpdate ("Activate Powerpoint ...")
       
'Is PowerPoint already opened?
Set PowerPointApp = GetObject(class:="PowerPoint.Application")
    
'Clear the error between errors
Err.Clear

'If PowerPoint is not already open then open PowerPoint
If PowerPointApp Is Nothing Then Set PowerPointApp = CreateObject(class:="PowerPoint.Application")
    
'Handle if the PowerPoint Application is not found
If Err.number = 429 Then
    MsgBox "PowerPoint could not be found, aborting."
    GoTo ExitSub
End If

'On Error GoTo 0

'Optimize Code

StatusBarUpdate ("Create Powerpoint Presentation...")
Application.ScreenUpdating = False

'Create a New Presentation
Set myPresentation = PowerPointApp.Presentations.Add

If Err Then
    MsgBox "Something went wrong: 'PowerPoint activation failed'. Please close all office applications and try again." & _
            vbCrLf & vbCrLf & _
            "Aborting the slide creation process."
    GoTo ExitSub
End If

' determine slide format (standard versus widescreen)
' https://msdn.microsoft.com/en-us/library/office/aa211582(v=office.11).aspx
TopEnablerSectionOffset = D_TopEnablerSectionOffset
TopMarginHyperlink_FromBottom = D_TopMarginHyperlink_FromBottom
TopMarginHeader = D_TopMarginHeader
ShapeCorrection = D_ShapeCorrection

If ThisWorkbook.Sheets(Tab_BMCDashboard).Range("SlideSize") = "16x9" Then
    SlideSize = ppWideScreen
    Correction = 405 / 540
    TopEnablerSectionOffset = TopEnablerSectionOffset * Correction
    TopMarginHyperlink_FromBottom = TopMarginHyperlink_FromBottom * Correction
    TopMarginHeader = TopMarginHeader * Correction
    ShapeCorrection = ShapeCorrection * Correction
Else
    SlideSize = ppSlideSizeOnScreen
End If

myPresentation.PageSetup.SlideSize = SlideSize  '1 = ppSlideSizeOnScreen ; 3 = ppSlideSizeA4Paper '2 = ppSlideSizeLetterPaper

'Slide Height and width:
'  4x3 = 540 x 720
' 16x9 = 405 x 720

StatusBarUpdate ("Minimize Powerpoint ...")

PowerPointApp.Visible = True
'PowerPointApp.WindowState = 3       '3 = ppWindowMaximized; 2 = ppWindowMinimized; 1 = ppWindowNormal
PowerPointApp.WindowState = 1       '2 = ppWindowMinimized; 1 = ppWindowNormal

'Make PowerPoint Visible and Active
'PowerPointApp.Visible = msoFalse
Err.Clear

On Error Resume Next

StatusBarUpdate ("Create slides...")

MaxHeight = Range("MaxHeight")
FirstRow = DBFirstRow
NextRow = FirstRow

Application.ScreenUpdating = True
Application.ScreenUpdating = False

'Switch to automatic calculation as some fields will change (e.g. businesses in the title) during the creation of the slides.
Application.Calculation = xlCalculationAutomatic

LastNextRow = 0

Do While NextRow > 0 And NextRow > LastNextRow
    
    LastNextRow = NextRow
    
    DoEvents
    Application.Calculation = xlCalculationManual
    
    If Err Then
        MsgBox "Something went wrong: 'Failed to create a new slide for the enablers.'." & vbCrLf & "Please close all office applications and try again." & _
            vbCrLf & "If you did this already, then reboot your laptop." & vbCrLf & vbCrLf & _
            "Aborting the slide creation process."
        GoTo ExitSub
    End If
    ' Create now the summary graph before creating each BU Summy slide.
    Dim lBG  As String
    Dim cBG     As String
    Dim eDBWS    As Worksheet
    Err.Clear
    Set eDBWS = ActiveSheet
    cBG = GetBGFromEnablerDB(NextRow, eDBWS)
    If cBG <> "" And cBG <> lBG And Err = 0 Then
        lBG = cBG
        If lBG = "MA-TC" Then
            Call LogEventAdd("GetBGFromEnablerDB: Unexpected BG selection found '" & lBG & "'")
        End If
        Call MDB2PPT(eDBWS.Range("DB_TOP3SELECTION"), eDBWS.Range("DB_MarketSelection"), cBG, eDBWS.Range("DB_BUSelection"), , myPresentation)
        eDBWS.Activate
        Err.Clear
    End If
' TempAdd1 End
    
    s = s + 1
    StatusBarUpdate ("Prepare slide " & s & " ...")
    
    'Add a slide to the Presentation
    MyCount = myPresentation.Slides.Count
    Set mySlide = myPresentation.Slides.Add(myPresentation.Slides.Count + 1, 12) '12 = ppLayoutBlank

    'determine maximum height of the enabler + CCC section
    If MaxHeight = 0 Then
        MaxHeight = (mySlide.Master.Height - TopMarginHeader - TopMarginHyperlink_FromBottom - D_Height_Extra_Margin) * XLS2PPT_Pixeladjustment
    End If
    
    If s >= 5 Then   'testing
        Err.Clear
    End If
    
    NextRow = FixAtMaxTableHeight((NextRow))
    Application.Calculate
    
    Application.ScreenUpdating = True
    Application.ScreenUpdating = False
 
'-----------------------------------
'Copy Hyperlink
    If (TopMarginHyperlink_FromBottom > 0) Then
        StatusBarUpdate ("Prepare slide " & s & " .H.")
        
        SlideHyperLink.Copy
        'Paste to PowerPoint and position
        mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
        'mySlide.Shapes.Paste
        
        If Err Then
            Err.Clear
            SlideHyperLink.Copy
            mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
        End If
        
        StatusBarUpdate ("Prepare slide " & s & " .H2.")
        If Not Err Then
            Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
           
            'Set position:
            myShape.Left = LeftMargin
            myShape.Top = mySlide.Master.Height - TopMarginHyperlink_FromBottom
            myShape.LockAspectRatio = msoTrue
            myShape.ScaleWidth 0.595, msoFalse
        End If
        Err.Clear
    End If
'-----------------------------------
'Copy Slide Title
    StatusBarUpdate ("Prepare slide " & s & " .T.")
    
    SlideTitle.Copy
    'On Error Resume Next
    'Paste to PowerPoint and position
    mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
    'On Error GoTo 0
    If Err Then
        Err.Clear
        SlideTitle.Copy
        mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
    End If
    
    'myShape.Left = 0
    'myShape.Top = 0
    'myShape.Height = 405
        
    StatusBarUpdate ("Prepare slide " & s & " .T2.")
    
    If Not Err Then
    
        Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
       
        'Set position:
        myShape.Left = LeftMargin
        myShape.Top = TopMarginHeader
        myShape.LockAspectRatio = msoTrue
        myShape.ScaleWidth ShapeCorrection, msoFalse
        'Calculate the offset of the Enabler section from the top
        TopEnablerSection = myShape.Height + TopMarginHeader + TopEnablerSectionOffset
    End If
    Err.Clear

'--------------------------------------
'Copy Enabler and CCC section
    StatusBarUpdate ("Prepare slide " & s & " .E.")
    
    'EnablerCCCSection.Select
    EnablerCCCSection.Copy
    On Error Resume Next
    'Paste to PowerPoint and position
    mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile
    
    If Err Then
        Err.Clear
        EnablerCCCSection.Copy
        mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
    End If
    
    StatusBarUpdate ("Prepare slide " & s & " .E2.")
    If Not Err Then
    
        Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
       
        'Call LogEventAdd(s & "  MaxHeight: " & MaxHeight & "/" & MaxHeight / XLS2PPT_Pixeladjustment & "  PPT H / W: " & myShape.Height & "/" & myShape.Width & "  XLS Height: " & LastExcelHeight & "  " & myShape.Height / LastExcelHeight)
        
        'If PowerPoint version is 2013 use one format, otherwise another; 15 is code for PowerPoint 2013; 2010 is 14
    
        'Set position:
        myShape.Left = LeftMargin
        myShape.Top = TopEnablerSection
        myShape.LockAspectRatio = msoTrue
        myShape.Width = mySlide.Master.Width - (1 + 0.5) * LeftMargin 'make the right margin a bit smaller to gain space
        
        'Call LogEventAdd(s & "  MaxHeight: " & MaxHeight & "/" & MaxHeight / XLS2PPT_Pixeladjustment & "  PPT H / W: " & myShape.Height & "/" & myShape.Width & "  XLS Height: " & LastExcelHeight & "  " & myShape.Height / LastExcelHeight)
        'Call LogEventAdd(mySlide.Master.Height & " / " & TopMarginHeader & " / " & TopMarginHyperlink_FromBottom & " / " & D_Height_Extra_Margin)
        't = mySlide.Master.Width
    End If
    Err.Clear
Loop

StatusBarUpdate ("Refresh Dashboard ...")
    
Call ResetDashboardSheet
'Refresh the Dashboard table based on the selection
'Call RefreshDashboardView


'Clear The Clipboard
Application.CutCopyMode = False
Application.Calculation = xlCalculationAutomatic

  
StatusBarUpdate ("Minimize")

PowerPointApp.WindowState = 2       '2 = ppWindowMinimized; 1 = ppWindowNormal

AppActivate "Microsoft Excel"
Application.WindowState = xlMaximized

StatusBarUpdate ("")

MsgBox ("PPT file created with " & s & " slides. Please copy them manually into the BMC slide deck. Thanks.")

'Make PowerPoint Visible and Active
'PowerPointApp.Visible = True
'PowerPointApp.WindowState = 3       '3 = ppWindowMaximized; 2 = ppWindowMinimized; 1 = ppWindowNormal
'PowerPointApp.Activate
PowerPointApp.Presentations.Item(myPresentation.Name).Windows(1).Activate   'PowerPointApp.Presentations.Count
PowerPointApp.WindowState = 3       '3 = ppWindowMaximized; 2 = ppWindowMinimized; 1 = ppWindowNormal

ExitSub:
Call UpdateSetting("PleaseWaitFlag", "False")

End Sub

Function GetBGFromEnablerDB(eRow As Integer, eDBWS As Worksheet) As String

Dim ColBMCText  As String
Dim BMCName     As String
Dim BU          As String
Dim BG          As String
Dim m           As Integer

On Error Resume Next
Err.Clear
GetBGFromEnablerDB = ""

'Dim ColEnablerText, ColBMCText, ColNrText As String

' init section on the Dashboard
'ColEnablerText = "D"
ColBMCText = "C"
'ColNrText = "B"

BMCName = eDBWS.Range(ColBMCText & eRow)

BU = Left(BMCName, InStr(1, BMCName, " ", vbTextCompare))
BU = Trim(BU)
BG = Application.WorksheetFunction.VLookup(BU, Range("BUMap"), Range("BGOffset"), False)

If Not Err Then
    GetBGFromEnablerDB = BG
Else
    'That first search seems not to work - now take off the market name and see if you find the BG then
    Err.Clear
    For m = 1 To Range("MarketAbbreviation").Cells.Count
        Err.Clear
        If InStr(1, BMCName, Range("MarketAbbreviation").Cells(m, 1), vbTextCompare) > 0 Then
            BU = Replace(BMCName, Range("MarketAbbreviation").Cells(m, 1), "", , , vbTextCompare)
            BU = Trim(BU)
            Err.Clear
            BG = Application.WorksheetFunction.VLookup(BU, Range("BUMap"), Range("BGOffset"), False)
            If Not Err Then
                GetBGFromEnablerDB = BG
            End If
            Exit For
        End If
    Next m
End If

End Function

Function MDB2PPT(Top3 As String, Market As String, BG As String, BU As String, Optional sDBWS As Worksheet, Optional myPresentation As Object) As Boolean

Dim mDBWS   As Worksheet
Dim cWS     As Worksheet
Set cWS = ActiveSheet

On Error Resume Next
Err.Clear
MDB2PPT = False

If sDBWS Is Nothing Then
    Set mDBWS = Worksheets(Tab_MarketDashboard)
Else
    Set mDBWS = sDBWS
End If

'all items must be set and none of them must be = ""
If Top3 = "" Or Market = "" Or BG = "" Or BU = "" Or Err Then
    MDB2PPT = True
    Err.Clear
    Exit Function
End If

' set the MDB Dashboard with the input parameters
If (MDBApplySettings(mDBWS, Top3, Market, BG, BU) <> False) Then
    MDB2PPT = True
    Err.Clear
    Exit Function
End If

' Export MDB content incl. title
If Not myPresentation Is Nothing Then
    Range("Top3Title_MDBSlide") = Top3
    Range("BGTitle_MDBSlide") = BG
    Range("BUTitle_MDBSlide") = BU
    Range("MarketTitle_MDBSlide") = Market
    Application.Calculate
    'now export
    Call CopyExcelRangeToPPT(myPresentation, mDBWS)
Else
    MDB2PPT = True
End If

cWS.Activate

Err.Clear

End Function

Function MDBApplySettings(mDBWS As Worksheet, Top3 As String, Market As String, BG As String, BU As String) As Boolean
Dim CalcSetting As Variant

On Error Resume Next
Err.Clear
CalcSetting = Application.Calculation
Application.Calculation = xlCalculationManual

mDBWS.Range("MDB_KPI") = Top3
mDBWS.Range("MDB_Market") = Market
mDBWS.Range("MDB_BG") = BG
mDBWS.Range("MDB_BU") = BU
'mDBWS.Range("MDB_Quarter") = ""
mDBWS.Range("MDB_Status") = "Red"

'As Pivot Field name you must use the original name in the source table.
'Not the one that is being displayed in the pivot chart for that field
Call MDBApplyPivotFieldSetting(mDBWS, GetHeaderFromSummaryList("_E_BGName", "BG"), BG)
Call MDBApplyPivotFieldSetting(mDBWS, GetHeaderFromSummaryList("_E_Business", "Business"), BU)
Call MDBApplyPivotFieldSetting(mDBWS, GetHeaderFromSummaryList("_E_Market", "Market"), Market)
Call MDBApplyPivotFieldSetting(mDBWS, GetHeaderFromSummaryList("_E_Top3", "Top 3?*"), Top3)
Call MDBApplyPivotFieldSetting(mDBWS, GetHeaderFromSummaryList("_E_CurrentStatus", "Current Status"), "All")

Application.Calculation = CalcSetting

'apply above changed settings - pivot refresh as well as any other calculation
Call SetDashboard(mDBWS)
Call RefreshDashboardMandB

End Function

Function MDBApplyPivotFieldSetting(mDBWS As Worksheet, FieldName As String, FieldValue As String) As Boolean

Dim PVTable     As PivotTable
Dim PVField     As PivotField
Dim PVItem      As PivotItem
Dim CalcSetting As Variant
Dim Prot        As Boolean

On Error Resume Next
CalcSetting = Application.Calculation
Application.Calculation = xlCalculationManual
Err.Clear

Prot = UnProtectWS(mDBWS)

'First show all items
Set PVTable = mDBWS.PivotTables("PivotTable4")
Set PVField = PVTable.PivotFields(FieldName)

'first clear all filter settings => show all items
Err.Clear
PVField.ClearAllFilters
If PVField.EnableMultiplePageItems = False Then
    'ensure multi item filter can be set
    PVField.EnableMultiplePageItems = True
End If
Err.Clear
For Each PVItem In PVField.PivotItems
    If PVItem.Visible <> True Then
        PVItem.Visible = True
    End If
Next PVItem

Err.Clear
If FieldValue <> "All" Then
    'set the filter value
    For Each PVItem In PVField.PivotItems
        If FieldName = "Top 3?*" Then
            If (FieldValue = "Top 3 only" And PVItem <> "Yes") Or _
               (FieldValue = "non Top 3" And PVItem <> "No") Then
                If PVItem.Visible = True Then
                    'set only those items to inactive which are not matching the provided Field Value
                    PVItem.Visible = False
                End If
            Else
            End If
        Else
            If PVItem <> FieldValue Then
                If PVItem.Visible = True Then
                    'set only those items to inactive which are not matching the provided Field Value
                    PVItem.Visible = False
                End If
            End If
        End If
    Next
Else
    'all items are selected => done by the filter clearance above.
End If

Err.Clear
'finally remove the "(blank)" from the shown list
For Each PVItem In PVField.PivotItems
    If InStr(1, PVItem, "(") = 1 Then
        If PVItem.Visible = True Then
            'set only those items to inactive which start with a "("
            ' => usually "(blank)" but other languaes may translate differently but always start with a "("
            PVItem.Visible = False
        End If
    End If
    If FieldName = "Top 3?*" And InStr(1, UCase(PVItem), "CANCEL") = 1 Then
        If PVItem.Visible = True Then
            PVItem.Visible = False
        End If
    End If
Next

If Err Then
    MDBApplyPivotFieldSetting = True
    Call LogEventAdd("MDBApplyPivotFieldSetting" & vbCrLf & " Failed to set MDB Pivot Filter: " & vbCrLf & _
                     "Fieldname: " & FieldName & vbCrLf & _
                     "FieldValue:" & FieldValue & vbCrLf & _
                     Err.Description)
    Err.Clear
Else
    MDBApplyPivotFieldSetting = False
End If

Application.Calculation = CalcSetting
Call ProtectWS(mDBWS, Prot)
Err.Clear
End Function

Function GetHeaderFromSummaryList(ColumnTag As String, Optional DefaultHeader As String = "", Optional tWS As Worksheet)

Dim eWS         As Worksheet
Dim HeaderText  As String

On Error Resume Next
Err.Clear

If tWS Is Nothing Then
    Set eWS = Worksheets(Tab_BMCEnablerList)
Else
    Set eWS = tWS
End If

HeaderText = eWS.Range(ColumnTag)
If Err Then
    HeaderText = DefaultHeader
End If

GetHeaderFromSummaryList = HeaderText

Err.Clear

End Function






Attribute VB_Name = "P_EnablerAndCCCToPPT_Old"
Option Explicit

Sub ExcelRangeToPowerPointENABLER()

Dim rng1 As Range
Dim rng2 As Range
Dim PowerPointApp As Object
Dim myPresentation As Object
Dim mySlide As Object
Dim myShape As Object
Dim lRow As Integer

'Copy Range from Excel
  lRow = ThisWorkbook.Sheets(Tab_BMCDashboard).Range("B" & Rows.Count).End(xlUp).row
  Set rng1 = ThisWorkbook.Sheets(Tab_BMCDashboard).Range("B7:Q" & lRow)

'Create an Instance of PowerPoint
  On Error Resume Next
    
    'Is PowerPoint already opened?
      Set PowerPointApp = GetObject(class:="PowerPoint.Application")
    
    'Clear the error between errors
      Err.Clear

    'If PowerPoint is not already open then open PowerPoint
      If PowerPointApp Is Nothing Then Set PowerPointApp = CreateObject(class:="PowerPoint.Application")
    
    'Handle if the PowerPoint Application is not found
      If Err.number = 429 Then
        MsgBox "PowerPoint could not be found, aborting."
        Exit Sub
      End If

  On Error GoTo 0

'Optimize Code
  Application.ScreenUpdating = False
  
'Create a New Presentation
  Set myPresentation = PowerPointApp.Presentations.Add
  
'Add a slide to the Presentation

  Set mySlide = myPresentation.Slides.Add(1, 12) '12 = ppLayoutBlank

'Copy Excel Range1
    rng1.Copy
    'Paste to PowerPoint and position
    mySlide.Shapes.PasteSpecial DataType:=2  '2 = ppPasteEnhancedMetafile
    Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
   
    'If PowerPoint version is 2013 use one format, otherwise another; 15 is code for PowerPoint 2013; 2010 is 14

    If Application.Version = "15.0" Then
      myShape.Left = 7
      myShape.Top = 65
      myShape.LockAspectRatio = msoFalse
      myShape.ScaleWidth 0.595, msoFalse
      myShape.ScaleHeight 0.595, msoFalse
      Else
     'Set position:
      myShape.Left = 7
      myShape.Top = 65
      myShape.LockAspectRatio = msoTrue
      myShape.ScaleWidth 0.79, msoFalse

    End If


'Make PowerPoint Visible and Active
  PowerPointApp.Visible = True
  PowerPointApp.Activate

'Clear The Clipboard
  Application.CutCopyMode = False
  
End Sub




Attribute VB_Name = "P_OnePagerToPPT"
Option Explicit

'PPT settings
'2 = Graphic
'8 = Text
Private Const ShapeType = 2
Private Const LeftMargin = 28   'relates to the 'paste'd objects
Private Const RightMargin = 20   'relates to the 'paste'd objects
Private Const D_TopEnablerSectionOffset = 10        'default for OnScreen Presentation = 20
Private Const D_TopMarginHyperlink_FromBottom = 25   'default for OnScreen Presentation = 50; 0 disables the print for the Hyperlink
Private Const D_PhilipsLogo_FromBottom = 30   'default for OnScreen Presentation = 50; 0 disables the print for the Hyperlink
Private Const D_TopMarginHeader = 22
Private Const D_ShapeCorrection = 0.7
Private Const ppSlideSizeOnScreen = 1
Private Const ppSlideSizeA4Paper = 3
Private Const ppSlideSizeLetterPaper = 2
Private Const ppWideScreen = 15

Sub Button_OnePagerInitiativeToPPT()
' Mainlineup Macro
Dim b As Object, RowNumber, i, cINum As Integer
Dim n As String
Set b = ActiveSheet.Buttons(Application.Caller)
    
If InStr(1, b.Text, "Export ALL ", vbTextCompare) > 0 Then
    Call OnePagerCopyInitiativeToPPT(ActiveSheet, 0, True)
Else
    RowNumber = b.BottomRightCell.row
    For i = RowNumber - 2 To RowNumber + 1
        cINum = InStr(1, ActiveSheet.Range("B" & i), "Initiative", vbTextCompare)
        If cINum > 0 Then
            n = Trim(Replace(ActiveSheet.Range("B" & i), "Initiative", "", , , vbTextCompare))
            Exit For
        End If
    Next i
    If n <> "" Then
        If n = "X" Then
            cINum = 6
        Else
            cINum = CInt(n)
        End If
        Call OnePagerCopyInitiativeToPPT(ActiveSheet, cINum, True)

    Else
        Call MsgBox("Initiative associated with button '" & b.Text & "' not found.", vbOKOnly)
    End If
End If

End Sub

Sub OnePagerSingleInitiativeToPPT_All()
    ThisWorkbook.Save
    Call OnePagerCopyInitiativeToPPT(ActiveSheet, 0, True)
End Sub

'
Sub OnePagerSingleInitiativeToPPT_1()
    ThisWorkbook.Save
    Call OnePagerCopyInitiativeToPPT(ActiveSheet, 1, True)
End Sub

Sub Button_OnePagerExportSectionToPPT()
' Mainlineup Macro
Dim b           As Object
Dim Caption     As String
Dim ExportRange As String
Dim Header      As String
Dim r           As String

Err.Clear

'get button object
Set b = ActiveSheet.Buttons(Application.Caller)
Caption = b.Caption

r = 2
Do While Trim(Range("ExportMapRange2Header").Cells(r, 3)) <> ""
    If InStr(1, Caption, Range("ExportMapRange2Header").Cells(r, 3), vbTextCompare) > 0 Then
        'first column is the data range to export
        ExportRange = Range("ExportMapRange2Header").Cells(r, 1)
    End If
    r = r + 1
Loop

If ExportRange = "" Or Err Then
    Call MsgBox("Export section associated with button '" & Caption & "' not found.", vbOKOnly)
Else
    Call OnePagerCopyPrintSectionToPPT(ActiveSheet, ExportRange, Header, True)
End If
    
End Sub
 
Private Function OnePagerCopyInitiativeToPPT(wsOP As Worksheet, iNumber As Integer, ShowMsg As Boolean)

'this is the main function that creates both Enabler and CCC on the slide and adapts the output to the slide size

Dim InitiativeSection As Range
Dim SlideTitle As Range
Dim SlideHyperLink As Range
Dim PowerPointApp As Object
Dim myPresentation As Object
Dim mySlide As Object
Dim myShape As Object
Dim NextRow, lRow, i, MyCount As Integer
Dim s, SlideSize, MaxEnablerHeight As Integer
Dim TopEnablerSection As Integer
Dim cINum As Integer
Dim InitiativeName, MsgText As String
Dim SkipInitiative As Boolean
Dim Correction As Variant

'default values depend on slide size
Dim ShapeCorrection, TopEnablerSectionOffset, TopMarginHyperlink_FromBottom, TopMarginHeader  As Double

If OP_IsOnePagerSheet(wsOP) = False Then
    Exit Function
End If

If ShowMsg Then
    If iNumber = 0 Then
        MsgText = "This will create a series of slides for ALL initiatives."
    ElseIf iNumber >= 6 Then
        MsgText = "This will create a series of slides cover Enabler for multiple Initiatives"
    Else
        MsgText = "This will create a series of slides for Initiative #" & iNumber
    End If
    If (MsgBox(MsgText & _
            vbCrLf & vbCrLf & _
            "For this a separate PPT file opens." & vbCrLf & vbCrLf & _
            "This may take a few seconds.", vbOKCancel) <> vbOK) Then
        Exit Function
    End If
End If

'update all calculated values in case this wasn't done before.
Application.Calculate

cINum = iNumber

'Refresh the Dashboard table based on the selection
'Call RefreshDashboardView


'Copy Range from Excel
'lRow = wsOP.Range("B" & Rows.Count).End(xlUp).row
'lRow = LastRow(ThisWorkbook.Sheets(Tab_BMCDashboard))
'Set InitiativeSection = wsOP.Range("B" & FirstRow & ":S" & lRow)

'Set InitiativeSection = ThisWorkbook.ActiveSheet.Range("ENABLERS")
Set SlideTitle = ThisWorkbook.Worksheets("BMC Dashboard Title").Range("OnePagerInitiativeTitle")
Set SlideHyperLink = Range("OPHyperLink")


'Create an Instance of PowerPoint
On Error Resume Next
    
StatusBarUpdate ("Activate Powerpoint ...")
       
'Is PowerPoint already opened?
Set PowerPointApp = GetObject(class:="PowerPoint.Application")
    
'Clear the error between errors
Err.Clear

'If PowerPoint is not already open then open PowerPoint
If PowerPointApp Is Nothing Then Set PowerPointApp = CreateObject(class:="PowerPoint.Application")
    
'Handle if the PowerPoint Application is not found
If Err.number = 429 Then
    MsgBox "PowerPoint could not be found, aborting."
    Exit Function
End If

'On Error GoTo 0

'Optimize Code

StatusBarUpdate ("Create Powerpoint Presentation...")
Application.ScreenUpdating = False

'Create a New Presentation
Set myPresentation = PowerPointApp.Presentations.Add

If Err Then
    MsgBox "Something went wrong: 'PowerPoint activation failed'. Please close all office applications and try again." & _
            vbCrLf & vbCrLf & _
            "Aborting the slide creation process."
    Exit Function
End If

' determine slide format (standard versus widescreen)
' https://msdn.microsoft.com/en-us/library/office/aa211582(v=office.11).aspx
TopEnablerSectionOffset = D_TopEnablerSectionOffset
TopMarginHyperlink_FromBottom = D_TopMarginHyperlink_FromBottom
TopMarginHeader = D_TopMarginHeader
ShapeCorrection = D_ShapeCorrection

If Range("OPSlideSize") = "16:9" Then
    SlideSize = ppWideScreen
    Correction = 405 / 540
    TopEnablerSectionOffset = TopEnablerSectionOffset * Correction
    TopMarginHyperlink_FromBottom = TopMarginHyperlink_FromBottom * Correction
    TopMarginHeader = TopMarginHeader * Correction
    ShapeCorrection = ShapeCorrection * Correction
Else
    SlideSize = ppSlideSizeOnScreen
End If

myPresentation.PageSetup.SlideSize = SlideSize  '1 = ppSlideSizeOnScreen ; 3 = ppSlideSizeA4Paper '2 = ppSlideSizeLetterPaper

'Slide Height and width:
'  4x3 = 540 x 720
' 16x9 = 405 x 720

StatusBarUpdate ("Minimize Powerpoint ...")

PowerPointApp.Visible = True
'PowerPointApp.WindowState = 3       '3 = ppWindowMaximized; 2 = ppWindowMinimized; 1 = ppWindowNormal
PowerPointApp.WindowState = 1       '2 = ppWindowMinimized; 1 = ppWindowNormal

'Make PowerPoint Visible and Active
'PowerPointApp.Visible = msoFalse
Err.Clear

On Error Resume Next

StatusBarUpdate ("Create slides...")

MaxHeight = Range("MaxHeight")

Application.ScreenUpdating = True
Application.ScreenUpdating = False

'Switch to automatic calculation as some fields will change (e.g. businesses in the title) during the creation of the slides.
Application.Calculation = xlCalculationAutomatic

Call OP_GroupOutlineSet(ActiveSheet, 2)
'ActiveSheet.Outline.ShowLevels RowLevels:=2

NextRow = 1

Do While NextRow > 0 And cINum <= 6
    DoEvents
    SkipInitiative = False

    If Err Then
        MsgBox "Something went wrong: 'Failed to create a new slide for the enablers.'." & vbCrLf & "Please close all office applications and try again." & _
            vbCrLf & "If you did this already, then reboot your laptop." & vbCrLf & vbCrLf & _
            "Aborting the slide creation process."
        Exit Function
    End If

    If iNumber = 0 Then
        cINum = cINum + 1
    Else
        cINum = iNumber
    End If
    
    If cINum > 6 Then
        Exit Do
    End If
    
    s = s + 1
    StatusBarUpdate ("Prepare slide " & s & " ...")
    
    If cINum = 6 Then
        Range("OPTitleInitiativeNumber") = "X"
    Else
        Range("OPTitleInitiativeNumber") = cINum
    End If
    
    'attached bmc name to the slide title
    Range("OP_BMCNamePPT") = Trim(ActiveSheet.Range("OP_BusinessName")) & " - " & Trim(ActiveSheet.Range("OP_MarketName"))
    Range("OPTitlePreFix") = "Key Initiative #"
    'set the section area based on the iCNum
    
    lRow = LastRow(wsOP)
    FirstRow = 0
    
    InitiativeName = "Initiative " & Range("OPTitleInitiativeNumber")
    For i = 1 To lRow
        If (wsOP.Range("B" & i) = InitiativeName) Then
            FirstRow = i - 1
            NextRow = wsOP.Range("OP_InitiativeSection").Rows.Count
            NextRow = NextRow + FirstRow - 1
            Exit For
        End If
    Next
    
    If cINum = 6 Then
        'Initiative X: has two additional enablers => add extra rows
        NextRow = NextRow + 2
    End If
   
    If i > lRow Then
        ' not Initiative section found skip this section print
        SkipInitiative = True
    End If
    'FirstRow = 64
    'NextRow = 75

    If SkipInitiative = False Then
        
        Set InitiativeSection = wsOP.Range("B" & FirstRow & ":V" & NextRow)
        
        For i = FirstRow To NextRow
            Call AutoFitRow((i))
        Next i
    
        'Add a slide to the Presentation
        MyCount = myPresentation.Slides.Count
        Set mySlide = myPresentation.Slides.Add(myPresentation.Slides.Count + 1, 12) '12 = ppLayoutBlank
    
        'determine maximum height of the enabler + CCC section
        If MaxHeight = 0 Then
            MaxHeight = mySlide.Master.Height - TopMarginHeader - TopMarginHyperlink_FromBottom
        End If
        
        ' XXXX NextRow = FixAtMaxTableHeight((NextRow))
      
    '-----------------------------------
    'Copy Hyperlink
        If (TopMarginHyperlink_FromBottom > 0) Then
            StatusBarUpdate ("Prepare slide " & s & " .H.")
            
            SlideHyperLink.Copy
            'Paste to PowerPoint and position
            mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
            'mySlide.Shapes.Paste
            
            If Err Then
                Err.Clear
                SlideHyperLink.Copy
                mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
            End If
            
            StatusBarUpdate ("Prepare slide " & s & " .H2.")
            If Not Err Then
                Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
               
                'Set position:
                myShape.Left = 2 * LeftMargin
                myShape.Top = mySlide.Master.Height - TopMarginHyperlink_FromBottom
                myShape.LockAspectRatio = msoTrue
                'myShape.Heigth 4, msoFalse
                myShape.ScaleWidth 0.595, msoFalse
            End If
            Err.Clear
        End If
    '-----------------------------------
    'Copy Slide Title
        StatusBarUpdate ("Prepare slide " & s & " .T.")
        
        SlideTitle.Copy
        'On Error Resume Next
        'Paste to PowerPoint and position
        mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
        'On Error GoTo 0
        If Err Then
            Err.Clear
            SlideTitle.Copy
            mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
        End If
        
        StatusBarUpdate ("Prepare slide " & s & " .T2.")
        
        If Not Err Then
        
            Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
           
            'Set position:
            myShape.Left = LeftMargin
            myShape.Top = TopMarginHeader
            myShape.LockAspectRatio = msoTrue
            myShape.ScaleWidth ShapeCorrection, msoFalse
            'Calculate the offset of the Enabler section from the top
            TopEnablerSection = myShape.Height + TopMarginHeader + TopEnablerSectionOffset
        End If
        Err.Clear
    
    '--------------------------------------
    'Copy Enabler and Investment Summary section
        StatusBarUpdate ("Prepare slide " & s & " .E.")
        
        'InitiativeSection.Select
        InitiativeSection.Copy
        On Error Resume Next
        'Paste to PowerPoint and position
        mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile
        
        If Err Then
            Err.Clear
            InitiativeSection.Copy
            mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
        End If
        
        StatusBarUpdate ("Prepare slide " & s & " .E2.")
        If Not Err Then
        
            Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
           
            'If PowerPoint version is 2013 use one format, otherwise another; 15 is code for PowerPoint 2013; 2010 is 14
        
            'Set position:
            myShape.Left = LeftMargin
            myShape.Top = TopEnablerSection
            myShape.LockAspectRatio = msoTrue
            myShape.Width = mySlide.Master.Width - 1.5 * LeftMargin 'make the right margin a bit smaller to gain space
            '18,85 = 540 /16,49 => 467
            '23,02 => 652,5
            
            'readjust height in case the image is to large. Then just the width gets reduced.
            MaxEnablerHeight = mySlide.Master.Height - TopEnablerSection - D_TopMarginHyperlink_FromBottom
            If (MaxEnablerHeight < myShape.Height) Then
                myShape.Height = MaxEnablerHeight
            End If
        End If
    
    '-----------------------------------
    'Copy Philips  Logo
        If (TopMarginHyperlink_FromBottom > 0) Then
            StatusBarUpdate ("Prepare slide " & s & " .H3.")
            
            Range("PhilipsLogo").Copy
            
            'Paste to PowerPoint and position
            mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
            'mySlide.Shapes.Paste
            
            If Err Then
                Err.Clear
                SlideHyperLink.Copy
                mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
            End If
            
            StatusBarUpdate ("Prepare slide " & s & " .H3..")
            If Not Err Then
                Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
               
                myShape.LockAspectRatio = msoTrue
                myShape.Width = 87
                myShape.Width = myShape.Width * Correction
                'myShape.ScaleWidth 0.595, msoFalse
                'Set position:
                myShape.Left = mySlide.Master.Width - myShape.Width - RightMargin
                myShape.Top = mySlide.Master.Height - D_PhilipsLogo_FromBottom
                
            End If
            Err.Clear
        End If
    '-----------------------------------
    
    End If
    
    If iNumber = 0 Then
        NextRow = 1
    Else
        NextRow = 0
    End If
    
    Err.Clear
Loop

StatusBarUpdate ("Refresh Dashboard ...")
    
'Clear The Clipboard
Application.CutCopyMode = False
  
StatusBarUpdate ("Minimize")

PowerPointApp.WindowState = 2       '2 = ppWindowMinimized; 1 = ppWindowNormal

AppActivate "Microsoft Excel"
Application.WindowState = xlMaximized

StatusBarUpdate ("")

MsgBox ("New PPT file created with " & s & " slide(s). Please copy them manually into the BMC Plan PPT file. Thanks.")

'Make PowerPoint Visible and Active
Err.Clear

'PowerPointApp.Visible = True
PowerPointApp.Presentations.Item(myPresentation.Name).Windows(1).Activate   'PowerPointApp.Presentations.Count
PowerPointApp.WindowState = 3       '3 = ppWindowMaximized; 2 = ppWindowMinimized; 1 = ppWindowNormal


End Function


Private Function OnePagerCopyPrintSectionToPPT(wsOP As Worksheet, ExportRange As String, SlideHeader As String, ShowMsg As Boolean)

'this is the main function that creates both Enabler and CCC on the slide and adapts the output to the slide size

Dim InitiativeSection As Range
Dim SlideTitle As Range
Dim SlideHyperLink As Range
Dim PowerPointApp As Object
Dim myPresentation As Object
Dim mySlide As Object
Dim myShape As Object
Dim NextRow, lRow, MyCount As Integer
Dim i           As Integer
Dim s, SlideSize, MaxEnablerHeight As Integer
Dim TopEnablerSection As Integer
Dim InitiativeName, MsgText As String
Dim Correction As Variant

Dim MyHeader    As String
'default values depend on slide size
Dim ShapeCorrection, TopEnablerSectionOffset, TopMarginHyperlink_FromBottom, TopMarginHeader  As Double

'Call MsgBox("Sorry function not yet available")
'Exit Function

If OP_IsOnePagerSheet(wsOP) = False Then
    Exit Function
End If

Err.Clear
MyHeader = Application.WorksheetFunction.VLookup(ExportRange, Range("ExportMapRange2Header"), 2, False)
If MyHeader = "" Then MyHeader = ExportRange
Err.Clear

If ShowMsg Then
    MsgText = "This will create a series of slides for " & MyHeader
    If (MsgBox(MsgText & _
            vbCrLf & vbCrLf & _
            "For this a separate PPT file opens." & vbCrLf & vbCrLf & _
            "This may take a few seconds.", vbOKCancel) <> vbOK) Then
        Exit Function
    End If
End If

'update all calculated values in case this wasn't done before.
Application.Calculate

'Refresh the Dashboard table based on the selection
'Call RefreshDashboardView


'Copy Range from Excel
'lRow = wsOP.Range("B" & Rows.Count).End(xlUp).row
'lRow = LastRow(ThisWorkbook.Sheets(Tab_BMCDashboard))
'Set InitiativeSection = wsOP.Range("B" & FirstRow & ":S" & lRow)

'Set InitiativeSection = ThisWorkbook.ActiveSheet.Range("ENABLERS")
Set SlideTitle = ThisWorkbook.Worksheets("BMC Dashboard Title").Range("OnePagerInitiativeTitle")
Set SlideHyperLink = Range("OPHyperLink")


'Create an Instance of PowerPoint
On Error Resume Next
    
StatusBarUpdate ("Activate Powerpoint ...")
       
'Is PowerPoint already opened?
Set PowerPointApp = GetObject(class:="PowerPoint.Application")
    
'Clear any pending error
Err.Clear

'If PowerPoint is not already open then open PowerPoint
If PowerPointApp Is Nothing Then Set PowerPointApp = CreateObject(class:="PowerPoint.Application")
    
'Handle if the PowerPoint Application is not found
If Err.number = 429 Then
    MsgBox "PowerPoint could not be found, aborting."
    Exit Function
End If

'On Error GoTo 0

'Optimize Code

StatusBarUpdate ("Create Powerpoint Presentation...")
Application.ScreenUpdating = False

'Create a New Presentation
Set myPresentation = PowerPointApp.Presentations.Add

If Err Then
    MsgBox "Something went wrong: 'PowerPoint activation failed'. Please close all office applications and try again." & _
            vbCrLf & vbCrLf & _
            "Aborting the slide creation process."
    Exit Function
End If

' determine slide format (standard versus widescreen)
' https://msdn.microsoft.com/en-us/library/office/aa211582(v=office.11).aspx
TopEnablerSectionOffset = D_TopEnablerSectionOffset
TopMarginHyperlink_FromBottom = D_TopMarginHyperlink_FromBottom
TopMarginHeader = D_TopMarginHeader
ShapeCorrection = D_ShapeCorrection

If Range("OPSlideSize") = "16:9" Then
    SlideSize = ppWideScreen
    Correction = 405 / 540
    TopEnablerSectionOffset = TopEnablerSectionOffset * Correction
    TopMarginHyperlink_FromBottom = TopMarginHyperlink_FromBottom * Correction
    TopMarginHeader = TopMarginHeader * Correction
    ShapeCorrection = ShapeCorrection * Correction
Else
    SlideSize = ppSlideSizeOnScreen
End If

myPresentation.PageSetup.SlideSize = SlideSize  '1 = ppSlideSizeOnScreen ; 3 = ppSlideSizeA4Paper '2 = ppSlideSizeLetterPaper

'Slide Height and width:
'  4x3 = 540 x 720
' 16x9 = 405 x 720

StatusBarUpdate ("Minimize Powerpoint ...")

PowerPointApp.Visible = True
'PowerPointApp.WindowState = 3       '3 = ppWindowMaximized; 2 = ppWindowMinimized; 1 = ppWindowNormal
PowerPointApp.WindowState = 1       '2 = ppWindowMinimized; 1 = ppWindowNormal

'Make PowerPoint Visible and Active
'PowerPointApp.Visible = msoFalse
Err.Clear

On Error Resume Next

StatusBarUpdate ("Create slides...")

MaxHeight = Range("MaxHeight")

Application.ScreenUpdating = True
Application.ScreenUpdating = False

'Switch to automatic calculation as some fields will change (e.g. businesses in the title) during the creation of the slides.
Application.Calculation = xlCalculationAutomatic

Call OP_GroupOutlineSet(ActiveSheet, 2)
'ActiveSheet.Outline.ShowLevels RowLevels:=2

'NextRow = 1

'Do While NextRow > 0 And cINum <= 6
    DoEvents
    
    If Err Then
        MsgBox "Something went wrong: 'Failed to create a new slide for the enablers.'." & vbCrLf & "Please close all office applications and try again." & _
            vbCrLf & "If you did this already, then reboot your laptop." & vbCrLf & vbCrLf & _
            "Aborting the slide creation process."
        Exit Function
    End If

    s = s + 1
    StatusBarUpdate ("Prepare slide " & s & " ...")
    
    Range("OPTitleInitiativeNumber") = ""
    
    'attached bmc name to the slide title
    Range("OP_BMCNamePPT") = Trim(ActiveSheet.Range("OP_BusinessName")) & " - " & Trim(ActiveSheet.Range("OP_MarketName"))
    Range("OPTitlePreFix") = MyHeader
    'set the section area based on the iCNum
    
    lRow = LastRow(wsOP)
    FirstRow = 0
    
    FirstRow = Range(ExportRange).row
    NextRow = FirstRow + Range(ExportRange).Rows.Count
    
If NextRow >= FirstRow Then
        Set InitiativeSection = wsOP.Range(ExportRange)
        
        Dim sC  As Integer
        Dim eC  As Integer
        sC = InitiativeSection.Column
        eC = sC + InitiativeSection.Columns.Count - 1
        
        
        For i = FirstRow To NextRow
            Call AutoFitRow(i, sC, eC)
        Next i
    
        'Add a slide to the Presentation
        MyCount = myPresentation.Slides.Count
        Set mySlide = myPresentation.Slides.Add(myPresentation.Slides.Count + 1, 12) '12 = ppLayoutBlank
    
        'determine maximum height of the enabler + CCC section
        If MaxHeight = 0 Then
            MaxHeight = mySlide.Master.Height - TopMarginHeader - TopMarginHyperlink_FromBottom
        End If
        
        ' XXXX NextRow = FixAtMaxTableHeight((NextRow))
      
    '-----------------------------------
    'Copy Hyperlink
        If (TopMarginHyperlink_FromBottom > 0) Then
            StatusBarUpdate ("Prepare slide " & s & " .H.")
            
            SlideHyperLink.Copy
            'Paste to PowerPoint and position
            mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
            'mySlide.Shapes.Paste
            
            If Err Then
                Err.Clear
                SlideHyperLink.Copy
                mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
            End If
            
            StatusBarUpdate ("Prepare slide " & s & " .H2.")
            If Not Err Then
                Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
               
                'Set position:
                myShape.Left = 2 * LeftMargin
                myShape.Top = mySlide.Master.Height - TopMarginHyperlink_FromBottom
                myShape.LockAspectRatio = msoTrue
                'myShape.Heigth 4, msoFalse
                myShape.ScaleWidth 0.595, msoFalse
            End If
            Err.Clear
        End If
    '-----------------------------------
    'Copy Slide Title
        StatusBarUpdate ("Prepare slide " & s & " .T.")
        
        SlideTitle.Copy
        'On Error Resume Next
        'Paste to PowerPoint and position
        mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
        'On Error GoTo 0
        If Err Then
            Err.Clear
            SlideTitle.Copy
            mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
        End If
        
        StatusBarUpdate ("Prepare slide " & s & " .T2.")
        
        If Not Err Then
        
            Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
           
            'Set position:
            myShape.Left = LeftMargin
            myShape.Top = TopMarginHeader
            myShape.LockAspectRatio = msoTrue
            myShape.ScaleWidth ShapeCorrection, msoFalse
            'Calculate the offset of the Enabler section from the top
            TopEnablerSection = myShape.Height + TopMarginHeader + TopEnablerSectionOffset
        End If
        Err.Clear
    
    '--------------------------------------
    'Copy Enabler and Investment Summary section
        StatusBarUpdate ("Prepare slide " & s & " .E.")
        
        'InitiativeSection.Select
        InitiativeSection.Copy
        On Error Resume Next
        'Paste to PowerPoint and position
        mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile
        
        If Err Then
            Err.Clear
            InitiativeSection.Copy
            mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
        End If
        
        StatusBarUpdate ("Prepare slide " & s & " .E2.")
        If Not Err Then
        
            Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
           
            'If PowerPoint version is 2013 use one format, otherwise another; 15 is code for PowerPoint 2013; 2010 is 14
        
            'Set position:
            myShape.Left = LeftMargin
            myShape.Top = TopEnablerSection
            myShape.LockAspectRatio = msoTrue
            If (myShape.Width > mySlide.Master.Width - 1.5 * LeftMargin) Then
                myShape.Width = mySlide.Master.Width - 1.5 * LeftMargin 'make the right margin a bit smaller to gain space
            End If
            '18,85 = 540 /16,49 => 467
            '23,02 => 652,5
            
            'readjust height in case the image is to large. Then just the width gets reduced.
            MaxEnablerHeight = mySlide.Master.Height - TopEnablerSection - D_TopMarginHyperlink_FromBottom
            If (MaxEnablerHeight < myShape.Height) Then
                myShape.Height = MaxEnablerHeight
            End If
        End If
    
    '-----------------------------------
    'Copy Philips  Logo
        If (TopMarginHyperlink_FromBottom > 0) Then
            StatusBarUpdate ("Prepare slide " & s & " .H3.")
            
            Range("PhilipsLogo").Copy
            
            'Paste to PowerPoint and position
            mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
            'mySlide.Shapes.Paste
            
            If Err Then
                Err.Clear
                SlideHyperLink.Copy
                mySlide.Shapes.PasteSpecial DataType:=ShapeType   '2 = ppPasteEnhancedMetafile 8: textmode
            End If
            
            StatusBarUpdate ("Prepare slide " & s & " .H3..")
            If Not Err Then
                Set myShape = mySlide.Shapes(mySlide.Shapes.Count)
               
                myShape.LockAspectRatio = msoTrue
                myShape.Width = 87
                myShape.Width = myShape.Width * Correction
                'myShape.ScaleWidth 0.595, msoFalse
                'Set position:
                myShape.Left = mySlide.Master.Width - myShape.Width - RightMargin
                myShape.Top = mySlide.Master.Height - D_PhilipsLogo_FromBottom
                
            End If
            Err.Clear
        End If
    '-----------------------------------
    
End If
    
   
Err.Clear

'StatusBarUpdate ("Refresh Dashboard ...")
    
'Clear The Clipboard
Application.CutCopyMode = False
  
StatusBarUpdate ("Minimize")

PowerPointApp.WindowState = 2       '2 = ppWindowMinimized; 1 = ppWindowNormal

AppActivate "Microsoft Excel"
Application.WindowState = xlMaximized

StatusBarUpdate ("")

MsgBox ("New PPT file created with " & s & " slide(s). Please copy them manually into the BMC Plan PPT file. Thanks.")

'Make PowerPoint Visible and Active
Err.Clear

'PowerPointApp.Visible = True
PowerPointApp.Presentations.Item(myPresentation.Name).Windows(1).Activate   'PowerPointApp.Presentations.Count
PowerPointApp.WindowState = 3       '3 = ppWindowMaximized; 2 = ppWindowMinimized; 1 = ppWindowNormal


End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet34"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet35"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
'Public Const Tab_DashboardTitle = "BMC Dashboard Title"
Dim LastActiveWS As Worksheet
Dim CurrentColOL As Integer
Dim CurrentColHidden As Boolean
Dim SaveActive As Boolean
Dim LastEnablerListCheck As Date

'TempAddOn
Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)

Dim DBQuarterFilter     As String

On Error Resume Next

DBQuarterFilter = Sh.Range("DB_QuarterFilter")

If Err = 0 Then
    If Target.Column = Sh.Range("DB_QuarterFilter").Column And _
       Target.row = Sh.Range("DB_QuarterFilter").row Then
       
        Call DB_CheckSettings(Sh)
    End If
End If

Err.Clear

End Sub

Private Sub Workbook_SheetSelectionChange(ByVal Sh As Object, ByVal Target As Range)

Dim BUName              As String
Dim sBUName             As String
Dim Market              As String
Dim HS                  As Boolean
Dim b, m                As Integer
Dim ClusterName         As String

Static SelChangeActive  As Boolean

On Error Resume Next

HS = True

Err.Clear

If SelChangeActive <> True Then
    
    SelChangeActive = True
    
    If OP_IsOnePagerSheet(Sh) Then
        If Application.CutCopyMode = False Then
            If UCase(Sh.Range("OP_AutoSizeEnabled")) <> "NO" Then
                Call OP_AlignRowHeight(Sh, Target)
            End If
            
            Call OP_CheckTabName(Sh)
            GoTo Change1
         'End If
         
            BUName = Trim(Range("OP_BusinessName"))
            Market = Trim(Range("OP_MarketName"))
            If Market <> "<Select market>" Then
                Market = Application.WorksheetFunction.VLookup(Market, Range("MarketMap2Short"), 2, False)
             Else
                Market = "<Market>"
            End If
                          
            'set cluster Name from BU
            ClusterName = Application.WorksheetFunction.VLookup(BUName, Range("BUMap"), Range("ClusterOffest"), False)
            If ClusterName <> "" Then
                Sh.Range("OP_ClusterName") = ClusterName
            End If
            Err.Clear
            If OP_IsOnePagerTemplate(Sh) = False Then
                'check if the partial BU name is already in the sh.name
                b = InStr(1, Sh.Name, Trim(Separator), vbTextCompare)
                m = InStr(b + 1, Sh.Name, Trim(Separator), vbTextCompare)
                'The BU name is inbetween the first two "-" separators
                If m > b Then
                    sBUName = Trim(Mid(Sh.Name, b + 1, m - b - 1))
                    'check if the partial BU name is already in the sh.name
                    If (InStr(1, BUName, sBUName, vbTextCompare) = 0) Then
                        b = 0
                    End If
                    
                    'search if that short bu name is in the list of BU Names we are aware of
                    'b = 1
                    'Do While Range("BUList").Cells(b, 1) <> ""
                    '    If InStr(1, Range("BUList").Cells(b, 1), sBUName, vbTextCompare) > 0 Then
                    '        Exit Do
                    '    End If
                    '    b = b + 1
                    'Loop
                    'If (Range("BUList").Cells(b, 1) = "") Then
                    '    ' short BU name not found
                    '    b = 0
                    'End If
                Else
                    b = InStr(1, Sh.Name, Separator & BUName & Separator, vbTextCompare)
                End If
                
                'check if the market is in the Sheet name
                m = InStr(1, Sh.Name, Separator & Market & Separator, vbTextCompare)
                If (b > 0 And m > 0) Then
                    'BU & Market Name is in the tab name. All perfect
                Else
                    If BUName = "" Then
                        BUName = "<BU>"
                    End If
                    
                    If Market = "" Then
                        Market = "<Market>"
                    End If
                    If (InStr(1, Market, "<", vbTextCompare) > 0) Then
                        If (InStr(1, Market, "<Market>", vbTextCompare) > 0) Then
                        Else
                            Market = "<Market>"
                        End If
                    End If

                    Call CheckAndSetSheetName(Sh, BUName, Market)
                End If
            End If
Change1:
        End If
    Else
        'The DB_CheckSettings consumes quite some time. This is disturbing when working on the enabler sheet
        'As that check is not needed when working on that sheet the check is skipped then
        If Sh.Name <> Tab_BMCEnablerList Then
            Call DB_CheckSettings(Sh)
        End If
    End If
    SelChangeActive = False
Else
    Err.Clear
End If

Err.Clear

End Sub


            

Function testtime()

Dim n   As Date
Dim d   As Integer
Dim t   As Date
Dim t3  As Date

If LastEnablerListCheck = 0 Then
    LastEnablerListCheck = Now()
End If
d = DateDiff("s", LastEnablerListCheck, Now())

If d > 10 Then
'MsgBox (t & ", " & t2 & " - " & t3 & " : " & t2 - t)
    Call MsgBox("Now: " & t & " - " & LastEnablerListCheck & " - " & t3 & " : " & d)
    LastEnablerListCheck = Now()
End If


End Function
Private Sub Workbook_SheetActivate(ByVal Sh As Object)

' when the enabler list is activated, then reset the Data Validation to default
' this is usually done by the OPEN dialogue.
' However the formula conversion doesn't really work during OPEN.
' As if the Formula Formatting is taking the english default
If (Sh.Name = Tab_BMCEnablerList) Then
    If LastEnablerListCheck = 0 Then
        LastEnablerListCheck = Now()
    End If


    If DateDiff("s", LastEnablerListCheck, Now()) > 60 Then
        Call Expand_DV_WS(Sh)
        LastEnablerListCheck = Now()
    End If
End If

Call DB_CheckSettings(Sh)

On Error Resume Next

If OP_IsOnePagerSheet(Sh) Then
    If Err = 0 Then
        If Trim(Sh.Range("OP_MarketName")) = "" Then
            Sh.Range("OP_MarketName") = "<Select market>"
        End If
    End If
End If

'added to ensure that the screen is being refreshed even when blocked somewhere else
'During data import we saw "ghosting" leftovers from one tab in another that sometimes got hardly off the sheet
Application.ScreenUpdating = True

' set the flag each time as under some unknown circumstances the "Workbook_AfterSave" isn't called.
On Error Resume Next
Range("VBAActive") = True
GroupLevel = 0

Err.Clear

End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

On Error Resume Next

If SaveActive <> True Then
    'If Me.Saved = False Then
        Call UpdateSetting("PleaseWaitFlag", "True")
        
        DoEvents
        
        StatusBarUpdate "Save .."
        'TempAddOn
        'Check and record if a cell format fix should have been applied ...
        Call LogEventAdd("Check Cell Format before Save ...")
        Call FixNormalStyle(ThisWorkbook)
        
        SaveActive = True
        If Application.Version < Range("OfficeVersionOOS") Or Range("OfficeVersionOOS") = "" Then
            Range("OfficeVersionOOS") = "'" & Application.Version
        End If
        
        Range("OfficeVersion") = "'" & Application.Version
        
        Call SetCurrentVersion
        
        ' Ensure that when the workbook is opened again, that always one of the "Instructions" Tab is shown.
        ' Independent of what the last used worksheet was
        ' This helps that when VBA is not active the instructions sheet is always shown first.
        Application.ScreenUpdating = False
        
        If OP_IsOnePagerSheet(ActiveSheet) Then
            'CurrentColOL = Range("T:T").Columns.ShowDetail
            'CurrentColHidden = Range("T:T").Hidden
            Call OP_GroupOutlineSet(ActiveSheet, 2)
            If GroupLevel > 0 Then
                CurrentColOL = GroupLevel
            Else
                CurrentColOL = 2
            End If
        End If
        
        Set LastActiveWS = ActiveSheet
        DoEvents        'trigger to refresh the tab
        
        'Setting this flag allows to show a message on the Instruction page that VBA is not active and key functions are missing.
        Range("VBAActive") = False
        Range("LastSaved") = Now()
        
        Range("ShowIsFormula") = False
        Range("ShowIsProtected") = False
        Range("ECHECK") = False
        
        Call SetDefaultInstructions(ThisWorkbook)
        Application.ScreenUpdating = True
        DoEvents            'trigger to show the selecte instruction tab
        Application.ScreenUpdating = False
        
        If SaveAsUI = False Then
            If Range("LastImportEnablerStatus") > 0 Then
                'Me.BuiltinDocumentProperties("Comments") = "Last Enabler Import: " & Range("LastImportEnablerStatus") & "  |  " & Range("FileVersion")
            Else
                'Me.BuiltinDocumentProperties("Comments") = Range("FileVersion")
            End If
            Me.BuiltinDocumentProperties("Comments") = "Last Enabler Import: " & Range("LastImportEnablerStatus") & "  |  " & Range("FileVersion")
            
            'set the title property to reflect last status import (if there was any)
            'note: the New SharePoint experience no longer supports effectively line breaks in the title :-(
            Me.BuiltinDocumentProperties("title") = Range("ET_PropertyTitle")

            Me.Save
            
            'ensures that the SAVE isn't done a second time when this procedure is left
            'Cancel = True
            Call AfterSave
        End If
        
        Call ClearStatusBar
        
        SaveActive = False
    'Else
        Err.Clear
    'End If
End If

Err.Clear

End Sub

Private Sub Workbook_AfterSave(ByVal Success As Boolean)
'It has been observed that AfterSave isn't called automatically in Office 365.
'Only when Me.Save is called proactively. A bit strange.
'As such the calls in function below are moved to the BeforeSave right after Me.Save

On Error Resume Next
If SaveActive <> True Then
'reactivate the last worksheet used before saving
    Call AfterSave

    Call ClearStatusBar
    Err.Clear
End If
Err.Clear

End Sub

Private Function AfterSave()

If Not LastActiveWS Is Nothing Then
    LastActiveWS.Activate
    LastActiveWS.Select
    
    Set LastActiveWS = Nothing
    
    Range("VBAActive") = True
        
    If OP_IsOnePagerSheet(ActiveSheet) And CurrentColOL > 0 Then
        Call OP_GroupOutlineSet(ActiveSheet, CurrentColOL)
        CurrentColOL = 0
    End If
    
    'TempAddOn
    Call LogEventAdd("Check Cell Format after Save ...")
    Call FixNormalStyle(ThisWorkbook)
    
    Call UpdateSetting("PleaseWaitFlag", "False")
    DoEvents
    
    'Forces XLS to ignore any changes made by this function "... _AfterSave"
    ThisWorkbook.Saved = True
End If

Err.Clear

End Function

Private Sub Workbook_Open()

' we have the need to protect some tabs when the file is in production mode ensuring that formulas and certain fields can't be altered

Dim ws          As Worksheet
Dim SaveNeeded  As Boolean
Dim TName       As String
Dim FirstRun    As Boolean
Dim OpenDuration    As Double
Dim StartTime   As Date
Dim EndTime     As Date

On Error Resume Next
StartTime = Now()

'TempAddOn
Call LogEventAdd("File Open: Start ...")
Application.ScreenUpdating = True

Call UpdateSetting("VBAActive", "True")
Call UpdateSetting("PleaseWaitFlag", "True")

If LogEventIsLevelSet("SkipOpenCheck") Then
    Call UpdateSetting("PleaseWaitFlag", "False")
    Call LogEventAdd("File Open: End. TraceLevel Flag set: " & "SkipOpenCheck")
    Exit Sub
End If

Call LogEventAdd("File Open: SetDefaultInstructions ...", , "FO1")
Call SetDefaultInstructions(ThisWorkbook)

'ensures that the PleaseWaitFlag is reflected on the worksheet(s)
DoEvents

FirstRun = Range("OnOpenFirstRun")

Err.Clear

If Range("HISecialFileImport") = True Then
    If Err = 0 Then
        Call LogEventAdd("File Open: HI SetDefaultInstructions ...", , "FO1")
        SaveNeeded = FixCellNumberFormat(ThisWorkbook)
        'no more fixes are applied here. Calculation is not triggered to avoid
        'updating of external links which brings the file open to a hold when those links are not accessible
        Exit Sub
    End If
End If
Err.Clear

Application.Calculation = xlCalculationAutomatic

ThisWorkbook.Activate

Application.ScreenUpdating = False

On Error Resume Next

Call LogEventAdd("File Open: FixCellNumberFormat ...", , "FO1")
SaveNeeded = FixCellNumberFormat(ThisWorkbook)

'only when the BMCDashboardTitle tab is hidden do some preparation
If FirstRun <> True Then

  For Each ws In ThisWorkbook.Sheets
    If ws.Name = Tab_BMCDashboardTitle Then
        Err.Clear
        'only when the BMCDashboardTitle tab is hidden do some preparation
        If ws.Visible = xlSheetHidden And Range("TrackingFileType") <> "TEMPLATE" Then
          If Err = 0 Then
            'Call SetDefaultInstructions(ThisWorkbook)
            Call LogEventAdd("File Open: Default prep ...", , "FO1")
            
            Call UnProtectWB(ThisWorkbook)

            Call UnProtectWorksheet(Tab_BMCDashboardTitle)
            Call UnProtectWorksheet(Tab_BMCEnablerList)
            Call UnProtectWorksheet(Tab_BMCDashboard)
            Call UnProtectWorksheet(Tab_MarketDashboard)
            Call UnProtectWorksheet(Tab_BusinessDashboard)
            
            'ensures that the PleaseWaitFlag is reflected on the worksheet(s)
            DoEvents

            If FirstRun <> True Then
                Call LogEventAdd("File Open: FirstRun ...", , "FO1")

                'Stop
                Call SetDefaultConfig       'This also cleans the financial tab according to the scope of this file
                Call UpdateSetting("OnOpenFirstRun", "True")
                Call LogEventAdd("File Open: SetDefaultConfig Run as part of the file open sequence completed.")
            End If
            
            'ensures that the PleaseWaitFlag is reflected on the worksheet(s)
            DoEvents
            
            Call LogEventAdd("File Open: SetOnePagerDefault ...", , "FO1")
            Call SetOnePagerDefault
            If Range("TrackingFileType") <> "OP" Then
            
                Call LogEventAdd("File Open: Reset_SetCellLock...", , "FO1")
                Call Reset_SetCellLock
                'Call AllWorksheetPivots
    
                'reset any filter setting
                ' Call LogEventAdd("File Open: ApplyFilterToEnablerList ...", , "FO1")
                ' Call ApplyFilterToEnablerList_EnablerID => done in Reset_SetCellLock
                
                'Call SetFreezePane(ThisWorkbook.Worksheets(Tab_BMCEnablerList))
                DoEvents
                'TempAddOn
                Call LogEventAdd("File Open: FixColumnLableOnEnablerWS ...", , "FO1")
                Call FixColumnLabelOnEnablerWS(ThisWorkbook.Worksheets(Tab_BMCEnablerList))
                Call LogEventAdd("File Open: ResetWSView ...", , "FO1")
                Call ResetWSView(ThisWorkbook.Worksheets(Tab_BMCEnablerList))
            End If
            
            Call LogEventAdd("File Open: 'Re-'ProtectWorksheets ...", , "FO1")
            Call ProtectWorksheet(Tab_BMCTotalsList)
            Call ProtectWorksheet(Tab_BMCInitiativeList)
            Call ProtectWorksheet(Tab_BMCEnablerList)
            Call ProtectWorksheet(Tab_BMCDashboard)
            Call ProtectWorksheet(Tab_MarketDashboard)
            Call ProtectWorksheet(Tab_BusinessDashboard)
            Call ProtectWorksheet(Tab_Instructions)
            Call ProtectWorksheet(Tab_OPSummaryInstructions)
            'Call SetTabDefaultStatus(myWB, TrackingType)
            
            Call LogEventAdd("File Open: SetDefaultInstructions ...", , "FO1")
            Call SetDefaultInstructions(ThisWorkbook)
            'ensures that the PleaseWaitFlag is reflected on the worksheet(s)
            DoEvents
            
            Call ProtectWB(ThisWorkbook)

            If SaveNeeded And ThisWorkbook.ReadOnly = False Then
                TName = LoadSetting("TemplateFileName")
                
                TName = Left(TName, InStr(1, TName, ".XLS", vbTextCompare))
                ' save file if
                ' * it is not the template file AND
                ' * a fix has been needed to ensure it is already fixed when opened the next time (or by the BMC Enabler summary collection process)
                If InStr(1, ThisWorkbook.Name, TName, vbTextCompare) = 0 Then
                    'ThisWorkbook.Save
                End If
            End If
          End If
        End If
    End If
    
  Next

End If

Call LogEventAdd("File Open: RefreshProtectionAllSheets ...", , "FO1")
Call RefreshProtectionAllSheets(ThisWorkbook, Not FirstRun)
Application.Calculation = xlCalculationAutomatic

Application.ScreenUpdating = True

Call ClearStatusBar

Call UpdateSetting("PleaseWaitFlag", "False")

EndTime = Now()
OpenDuration = Abs(EndTime - StartTime) * 86400
Range("LastOpenDuration") = OpenDuration
Call LogEventAdd("File Open: ... End [" & OpenDuration & " sec]")

Err.Clear

End Sub

Private Sub Workbook_SheetBeforeDoubleClick(ByVal Sh As Object, ByVal Target As Range, Cancel As Boolean)
'only open the central BMC enabler tracking file when the cell being double clicked is locked.

Dim FileType As String
FileType = Range("TrackingFileType")

If (Target.Locked = True Or Target.Parent.Name = "EnablerOwner") Then
    Cancel = False
    If (FileType <> "BMC") Then
        Cancel = OpenCentralUserWorkbook(Sh, Target)
    End If
    If (Cancel = False And Sh.ProtectContents = True And Target.AllowEdit = True) Then
        MsgBox ("Sorry, you are not allowed to edit that cell.")
        Cancel = True
    End If
End If

Err.Clear

End Sub

Function OpenCentralUserWorkbook(ByVal Sh As Object, ByVal Target As Range) As Boolean
' open the central BMC Enabler Tracking worksheet that is identified by the row given via "Target"
' if the identified file name is already open, it won't be opened again.
' supports the opening of the BMC OnePager file as well as the market specific BMC Enabler Summary file.

Dim BMCEnablerSheetName As String
Dim BMCEnablerFileName, FileType As String
Dim EnablerID, EnablerName  As String
Dim InitiativeNo    As String
Dim Cancel          As Boolean
Dim Position, r     As Integer
Dim wkb             As Workbook
Dim wBook           As Workbook
Dim eWS             As Worksheet
Dim mRow            As Integer
Dim tCol            As String
Dim BMCName         As String
Dim OpenFile        As Boolean
Static SelectMsg    As Boolean

Dim FileNameAppendix As String
Dim FileNameAppendixSummary As String
Dim countWB As Integer
Static countWbMsg As Boolean
        
'by default assume the double click is NOT processed in this call
Cancel = False

'Handle all errors in the routine
Err.Clear
On Error Resume Next
        
BMCEnablerSheetName = Sh.Name
BMCEnablerFileName = ""

FileType = Range("TrackingFileType")

' And InStr(1, BMCEnablerSheetName, ".XLSM", vbTextCompare) = Len(BMCEnablerSheetName) - Len(".XLSM") + 1)
' Check if the current worksheet is the enabler summary worksheet ...
                        
If ((InStr(1, BMCEnablerSheetName, Tab_BMCEnablerList, vbTextCompare) >= 1) Or _
    (InStr(1, BMCEnablerSheetName, Tab_BMCTotalsList, vbTextCompare) >= 1)) And Target.row > 1 Then
    ' ... do init only in the inner path to avoid process overhead as this routine is called every time a cell is selected
        
    ' 2. get the file name from the enabler table (last column in that row)
    BMCEnablerFileName = GetTargetPathFileName(Sh, Target)
    EnablerID = GetTargetEnablerID(Sh, Target)
    EnablerName = GetTargetEnablerName(Sh, Target)
    InitiativeNo = GetTargetInitiativeNo(Sh, Target)
    If (GetTargetSheetName(Sh, Target)) Then
        BMCEnablerSheetName = GetTargetSheetName(Sh, Target)
    End If
ElseIf (InStr(1, Target, "https://share", vbTextCompare) = 1) Then
        'Try to find for that tab name in the BMCEnablerList the respective row
        Set eWS = Worksheets(Tab_BMCEnablerList)
        mRow = LastRow(eWS)
        tCol = num2col(eWS.Range("_E_PathFileName").Column)
        If mRow > 1 And tCol <> "" And Err = 0 Then
            For r = 2 To mRow
                If (UCase(eWS.Range(tCol & r)) = UCase(Target)) Then
                    tCol = num2col(eWS.Range("_E_PathFileName").Column)
                    If tCol <> "" And Err = 0 Then
                        BMCEnablerFileName = eWS.Range(tCol & r)
                        tCol = num2col(eWS.Range("_E_Sheetname").Column)
                        If tCol <> "" Then
                            BMCEnablerSheetName = eWS.Range(tCol & r)
                        End If
                    End If
                    Exit For
                End If
                If InStr(1, eWS.Range(tCol & r), Target, vbTextCompare) Then
                    Err.Clear
                End If
                
                
            Next
        End If
ElseIf (InStr(1, Target, ".xls", vbTextCompare) > Application.WorksheetFunction.Max(5, Len(Target) - 5)) Then
        'Try to find for that tab name in the BMCEnablerList the respective row
        Set eWS = Worksheets(Tab_BMCEnablerList)
        mRow = LastRow(eWS)
        tCol = num2col(eWS.Range("_E_FileName").Column)
        If mRow > 1 And tCol <> "" And Err = 0 Then
            For r = 2 To mRow
                If (UCase(eWS.Range(tCol & r)) = UCase(Target)) Then
                    tCol = num2col(eWS.Range("_E_PathFileName").Column)
                    If tCol <> "" And Err = 0 Then
                        BMCEnablerFileName = eWS.Range(tCol & r)
                        tCol = num2col(eWS.Range("_E_Sheetname").Column)
                        If tCol <> "" Then
                            BMCEnablerSheetName = eWS.Range(tCol & r)
                        End If
                    End If
                    Exit For
                End If
                'If InStr(1, eWS.Range(tCol & r), Target, vbTextCompare) Then
                '    Err.Clear
                'End If
                
                
            Next
        End If

Else
    'In any other WS just see if the cell contains a worksheet name
    If (InStr(1, Target, "OnePager-", vbTextCompare) = 1 And _
        InStr(1, Target, "EQ+SVC", vbTextCompare) > 1) Then
        'Try to find for that tab name in the BMCEnablerList the respective row
        Set eWS = Worksheets(Tab_BMCEnablerList)
        mRow = LastRow(eWS)
        tCol = num2col(eWS.Range("_E_SheetName").Column)
        If mRow > 1 And tCol <> "" And Err = 0 Then
            For r = 2 To mRow
                If (eWS.Range(tCol & r) = Target) Then
                    tCol = num2col(eWS.Range("_E_PathFileName").Column)
                    If tCol <> "" And Err = 0 Then
                        BMCEnablerFileName = eWS.Range(tCol & r)
                        BMCEnablerSheetName = Target
                    End If
                    Exit For
                End If
            Next
        End If
        Err.Clear
    Else
        ' check if on that worksheet there is a cell with the name '_E_BMCName'.
        ' if so take from the row that is being double clicked the cell in the respective column and see if you can get the underlying BMC File name.
        tCol = num2col(Sh.Range("_E_BMCName").Column)
        mRow = Target.row
        If mRow > 1 And tCol <> "" And Err = 0 Then
            BMCName = Sh.Range(tCol & mRow)
            Set eWS = Worksheets(Tab_BMCEnablerList)
            mRow = LastRow(eWS)
            tCol = num2col(eWS.Range("_E_BMCName").Column)
            If mRow > 1 And tCol <> "" And Err = 0 Then
                For r = 2 To mRow
                    If (eWS.Range(tCol & r) = BMCName) Then
                        tCol = num2col(eWS.Range("_E_PathFileName").Column)
                        If tCol <> "" And Err = 0 Then
                            BMCEnablerFileName = eWS.Range(tCol & r)
                        End If
                        tCol = num2col(eWS.Range("_E_SheetName").Column)
                        If tCol <> "" And Err = 0 Then
                            BMCEnablerSheetName = eWS.Range(tCol & r)
                        End If
                        Exit For
                    End If
                Next
            End If
         Else
            'check if the cell contents matches an enabler in the enabler summary list ...
            EnablerID = Target.Text
            Set eWS = Worksheets(Tab_BMCEnablerList)
            mRow = LastRow(eWS)
            tCol = num2col(eWS.Range("_E_Enabler_ID").Column)
            If mRow > 1 And tCol <> "" And Err = 0 Then
                For r = 2 To mRow
                    If (eWS.Range(tCol & r) = EnablerID) Then
                        tCol = num2col(eWS.Range("_E_PathFileName").Column)
                        If tCol <> "" And Err = 0 Then
                            BMCEnablerFileName = eWS.Range(tCol & r)
                        End If
                        tCol = num2col(eWS.Range("_E_SheetName").Column)
                        If tCol <> "" And Err = 0 Then
                            BMCEnablerSheetName = eWS.Range(tCol & r)
                        End If
                        Exit For
                    End If
                Next
            End If
        End If
    End If
End If

If BMCEnablerFileName <> "" Then

        Cancel = True
        
        Set wkb = Nothing
        
        FileNameAppendix = LoadSetting("FileNameAppendix")
        FileNameAppendixSummary = LoadSetting("FileNameAppendixSummary")
        
        countWB = 0
        ' 3. and check if that file is already open ...
        For Each wBook In Workbooks
                Position = InStr(1, BMCEnablerFileName, wBook.Name, vbTextCompare)
                If (Position > 0) Then
                    ' only select the workbook found if it doesn't match the current file from which target file name is taken
                    'If (ThisWorkbook.Name <> wBook.Name) Then
                        Set wkb = wBook
                    'End If
                End If
                Position = InStr(1, wBook.Name, FileNameAppendixSummary, vbTextCompare) + _
                            InStr(1, wBook.Name, FileNameAppendix, vbTextCompare)
                If Position = 0 Then countWB = countWB + 1
                
        Next wBook
            
        If (wkb Is Nothing) Then
            OpenFile = False
            Dim countMsg As String
            If countWB > 0 Then 'countWbMsg = False And
                countMsg = "Important: You have Excel files open that don't belong to the Enabler Tracking or you have too many files open. " & _
                            "Recommend to close them to improve performance." & vbCrLf & vbCrLf
                countWbMsg = True
            End If
            
            If (InStr(1, Sh.Name, Tab_BMCTotalsList, vbTextCompare) >= 1) Then
                If (MsgBox("Do you want to open the BMC OnePager file " & vbCrLf & _
                        vbCrLf & _
                        "    " & BMCEnablerFileName & "?", vbYesNo) = vbYes) Then OpenFile = True
            
            ElseIf (InStr(1, Sh.Name, Tab_BMCEnablerList, vbTextCompare) >= 1) Then
                ' handle all errors within this file opening routine
                If (MsgBox(countMsg & _
                        "Do you want to edit the enabler" & vbCrLf & _
                        vbCrLf & _
                        "   '" & EnablerID & "'" & vbCrLf & _
                        vbCrLf & _
                        "Enabler description: " & vbCrLf & _
                        "   '" & EnablerName & "'" & vbCrLf & _
                        vbCrLf & _
                        " in the central BMC Enabler tracking file " & _
                        vbCrLf & vbCrLf & _
                        "    " & BMCEnablerFileName & "?", vbYesNo) = vbYes) Then OpenFile = True
            ElseIf "" Then
                If (MsgBox(countMsg & _
                        "Do you want to open the BMC enabler file " & _
                        vbCrLf & vbCrLf & _
                        "    " & BMCEnablerFileName & "?", vbYesNo) = vbYes) Then OpenFile = True
            End If
                
            If OpenFile = True Then
                ' Open the workbook of not yet open
                StatusBarUpdate ("Opening BMC Enabler tracking file: " & BMCEnablerFileName)
                Err.Clear
                Set wkb = Workbooks.Open(FileName:=BMCEnablerFileName, UpdateLinks:=False, ReadOnly:=False)
                
                If InStr(1, BMCEnablerFileName, ActiveWorkbook.Name) > 0 Then
                    Err.Clear
                End If
                ' 4. activate the workbook, select and activate the sheet
                If (Err) Then
                    Set wkb = Nothing
                    Call MsgBox("Failed to open requested BMC Enabler traking file." & vbCrLf & vbCrLf & "(" & Err.Description & ")", vbOKOnly)
                Else
                    If (wkb.ReadOnly = True) Then
                        Call MsgBox("Warning: the BMC Tracking file has been opened in READ only mode! " & _
                                    "Ensure that you enable workbook editing and save any changes when closing the file!", vbOKOnly)
                    End If
                End If
                StatusBarUpdate ("")
            End If
            
        End If
        
        Err.Clear
            
        ' If the referenced workbook had been opened ...
        If (Not wkb Is Nothing) Then
            ' ... then activate the workbook and sheet
            Err.Clear
            Set eWS = wkb.Sheets(BMCEnablerSheetName)
            If Err Then
                ' sheet names might contain trailing blanks that have been taken off on the summary sheets
                Err.Clear
                'search sheet manually
                For Each eWS In wkb.Sheets
                    If InStr(1, eWS.Name, BMCEnablerSheetName, vbTextCompare) Then
                        Exit For
                    End If
                Next
            End If
            
            Err.Clear
            wkb.Activate
            eWS.Select
            eWS.Activate
                
            'Check if this workbook was found via the BMC Totals List ...
            If (InStr(1, Sh.Name, Tab_BMCTotalsList, vbTextCompare) >= 1) Then
                ' then take the before found reference worksheet and see if this is refering to a OnePager...
                If (OP_IsActiveOnePager(eWS, True)) Then
                        '... and find the row where the field with the business name is
                        r = eWS.Range("OP_BusinessName").row
                        '... and final set the focus to the next 3 rows
                        eWS.Range(r & ":" & r + 3).Select
                        Call MsgBox("BMC Header is highlighted for editing." & vbCrLf & _
                                "", vbOKOnly)
                        eWS.Range(r & ":" & r + 3).Activate
                        Err.Clear
                Else
                    'ignore the double click
                End If
            Else
                ' check if this is a BMC Enabler Summary List ...
                r = FindEnablerIDRow(eWS, (EnablerID))
                If r Then
                    'Show all data ...
                    If eWS.Rows.EntireRow(r).Hidden = True Then
                        Call ResetWSView(eWS)
                    End If
                    ' ... and then set the focus on the row with the given enabler ID
                    eWS.Range(r & ":" & r).Select
                    If SelectMsg <> True Then
                        Application.ScreenUpdating = True
                        DoEvents
                        Call MsgBox("Enabler ID  '" & EnablerID & "'  is highlighted for editing." & vbCrLf & _
                                "FYI: Cells with GREY background can't be edited.", vbOKOnly)
                        SelectMsg = True
                    End If

                ElseIf (OP_IsActiveOnePager(eWS, True)) Then
                    
                    'this is a one pager worksheet
                    ' get initative no and focus on that
                    r = eWS.Range("OP_InitiativeSection").row
                    Err.Clear
                    r = r + (eWS.Range("OP_Initiative1_PPTArea").Rows.Count + 2) * (InitiativeNo - 1)
                        
                    eWS.Range(r & ":" & r + eWS.Range("OP_InitiativeSection").Rows.Count).Select
                    If SelectMsg <> True Then
                        Application.ScreenUpdating = True
                        DoEvents
                        Call MsgBox("Initiative #" & InitiativeNo & "  is highlighted for editing." & vbCrLf & _
                                    "", vbOKOnly)
                        SelectMsg = True
                    End If
                    
                    Err.Clear
                Else
                    'not a worksheet that we know what to do. So skip it.
                End If
            End If
            
            Application.ScreenUpdating = True
            Call Excel_BringWindowIntoForeground(wkb)

        End If
End If

OpenCentralUserWorkbook = Cancel

End Function

Function Excel_BringWindowIntoForeground(wb As Workbook)

Dim ExcelApp As Object
Dim myExcel As Object

'On Error Resume Next

Set ExcelApp = GetObject(class:="Excel.Application")
'wb.Activate
ExcelApp.Workbooks.Item(wb.Name).Windows(1).Activate   'Take the windows with the provided WBK into foreground and maximize it.
ExcelApp.WindowState = 3       '3 = ppWindowMaximized; 2 = ppWindowMinimized; 1 = ppWindowNormal
       
End Function

Function GetTargetSheetName(Sh As Worksheet, Target As Range) As String

Dim cMax, c, r As Long

cMax = Sh.Cells(1, Columns.Count).End(xlToLeft).Column
For c = 1 To cMax
    If UCase(Sh.Cells(1, c)) = "SHEET NAME" Then
        Exit For
    End If
Next c

If (c <= cMax) Then
    r = Target.row
    GetTargetSheetName = Sh.Cells(r, c)
End If

End Function

Function GetTargetPathFileName(Sh As Worksheet, Target As Range) As String

Dim cMax, c, r As Long
Dim Col As String

Col = CellColumn("_E_PathFileName", Sh)

If Col <> "" Then
    r = Target.row
    GetTargetPathFileName = Sh.Range(Col & r)
End If

Exit Function

cMax = Sh.Cells(1, Columns.Count).End(xlToLeft).Column
For c = 1 To cMax
    If UCase(Sh.Cells(1, c)) = "PathFileName" Then
        Exit For
    End If
Next c

If (c <= cMax) Then
    r = Target.row
    GetTargetPathFileName = Sh.Cells(r, c)
End If

End Function

Function GetTargetInitiativeNo(Sh As Worksheet, Target As Range) As String
'Retrieve the EnablerID from the row identified by the the "Target" cell

Dim cMax, c, r As Long
Dim GetEnablerID    As String

GetEnablerID = ""

cMax = Sh.Cells(1, Columns.Count).End(xlToLeft).Column
For c = 1 To cMax
    If UCase(Sh.Cells(1, c)) = UCase("Linked to initiative") Then
        Exit For
    End If
Next c

If (c <= cMax) Then
    r = Target.row
    GetTargetInitiativeNo = Sh.Cells(r, c)
End If

End Function

Function GetTargetEnablerID(Sh As Worksheet, Target As Range) As String
'Retrieve the EnablerID from the row identified by the the "Target" cell

Dim cMax, c, r      As Long
Dim GetEnablerID    As String

GetEnablerID = ""

cMax = Sh.Cells(1, Columns.Count).End(xlToLeft).Column
For c = 1 To cMax
    If UCase(Sh.Cells(1, c)) = UCase("Enabler ID") Then
        Exit For
    End If
Next c

If (c <= cMax) Then
    r = Target.row
    GetTargetEnablerID = Sh.Cells(r, c)
End If

End Function
Function GetTargetEnablerName(Sh As Worksheet, Target As Range) As String
'Retrieve the EnablerID from the row identified by the the "Target" cell

Dim cMax, c, r      As Long
Dim GetEnablerID    As String

GetEnablerID = ""

cMax = Sh.Cells(1, Columns.Count).End(xlToLeft).Column
For c = 1 To cMax
    If UCase(Sh.Cells(1, c)) = UCase("Enabler Description") Then
        Exit For
    End If
Next c

If (c <= cMax) Then
    r = Target.row
    GetTargetEnablerName = Sh.Cells(r, c)
End If

End Function

Function FindEnablerIDRow(Sh As Worksheet, EnablerID As String) As Integer
'Select the row in the target worksheet that is being identified by the EnablerID

Dim cMax, c, r As Long
Dim rMax        As Long

'find the enabler id column
cMax = Sh.Cells(1, Columns.Count).End(xlToLeft).Column
For c = 1 To cMax
    If UCase(Sh.Cells(1, c)) = UCase("Enabler ID") Then
        Exit For
    End If
Next c

If (c <= cMax) Then
    rMax = Sh.Range("A" & Rows.Count).End(xlUp).row
    For r = 2 To rMax
        If UCase(Sh.Cells(r, c)) = UCase(EnablerID) Then
            Exit For
        End If
    Next r
    FindEnablerIDRow = r
End If

End Function



Attribute VB_Name = "a1_ExportToTrackingFiles"
Option Explicit

Sub SupportFct_SplitEnablersIntoBMCFiles()

Dim rWS As Worksheet
Dim Prot, EmptyRow As Boolean
Dim pw As String
Dim r, c, lRow, lCol As Integer
Dim ScreenUpdate As Variant
Dim AddRows As Integer
Dim FileType As String
Dim ShowMsg As Boolean

FileType = UCase(LoadSetting("TrackingFileType"))
ShowMsg = True

Set rWS = ActiveWorkbook.Sheets(Tab_BMCEnablerList)

'LockMode = "E"

'when not in edit mode and a default password given, then request password
If FileType <> "M" And FileType <> "BMC" Then
    If (UserPasswordEdit = "" And GetMyPasswordEdit <> "") Then
        If UserPasswordEdit = "" Then
            pw = InputBox("You are about to export the enabler data to BG & Market specific 'BMC Enabler tracking' files." & vbCrLf & vbCrLf & "Please enter password:", "Export enabler data", "Enter password")
            'pw = "Do you want to edit the BMC enablers in '" & rWS & "'" & vbCrLf & vbCrLf & "Please enter password:"
        Else
            pw = UserPasswordEdit
        End If
    Else
        pw = UserPasswordEdit
    End If
    
    If pw = GetMyPasswordEdit Then
        If ProtectedVBProject(ThisWorkbook) Then
            If (MsgBox("VBA Project is protected. Do you want to continue?", vbYesNo) <> vbYes) Then
                Exit Sub
            End If
        End If
        Call SplitEnablersIntoBMCFiles
        UserPasswordEdit = pw
    Else
        If ShowMsg Then Call MsgBox("Invalid password.", vbExclamation)
    End If
Else
    If ShowMsg Then Call MsgBox("That function is not availble in your enabler file. Sorry.", vbExclamation)
End If

End Sub
Private Sub SplitEnablersIntoBMCFiles()
'
' Split the enablers in the current files into BMC specific files for editing on SharePoint
'
    Dim rR, f, l                As Long
    Dim sR                      As Long
    Dim c                       As Integer
    Dim sWB As Workbook, rWB    As Workbook
    Dim sWS                     As Worksheet
    Dim rWS, rWS_DB        As Worksheet
    Dim StartDate               As Date
    Dim BMC, NextBMC, Market, EnablerSheet As String
    Dim tNextBMC                As String
    Dim MarketCol               As String
    Dim BGCol                   As String
    Dim TDir, BMCFile, TFile, BMCPath, BMCFilePreFix, BMCFileAppendix, BMCExportFilter  As String
    Dim rngMM                   As Range
    Dim vLock, ScreenUpdate     As Variant
    Dim sRFirst, sRLast         As Integer
    Dim rRange, sRange          As String
    Dim CopyRowByRow            As Boolean
    Dim MsgText                 As String
    Dim wb                      As Workbook
    Dim EnablerFile             As String
    Dim MyBG                    As String
    Dim rRLast                  As Integer
    Dim lmt                     As Date
    Dim ExpCancelledEnablers    As Boolean
    Dim rExport                 As Integer
    Dim UserSelect              As Variant
    Dim FolderName              As String
    Dim SkipColumnCheck         As Boolean
        
    On Error Resume Next
    
    'trigger a copy column by column
    CopyRowByRow = False
    
    EnablerSheet = Tab_BMCEnablerList       'LoadSetting("EnablerSheetName")
    MarketCol = LoadSetting("MarketCol")
    BGCol = LoadSetting("BGCol")
    TFile = LoadSetting("TemplateFileName")
    BMCFilePreFix = LoadSetting("FilenamePreFix")
    BMCFileAppendix = LoadSetting("FilenameAppendix")
    TDir = Trim(LoadSetting("TargetDir"))
    BMCExportFilter = LoadSetting("BMCExportFilter")
    StartDate = DateTime.Now
    
    sR = 2
    f = 0

    ThisWorkbook.Save
    
    If ProtectedVBProject(ThisWorkbook) Then
        If (MsgBox("VBA Project of ThisWorkbook is protected. Do you want to continue?", vbYesNo) <> vbYes) Then
            Exit Sub
        End If
    End If
    
    'Application.Calculate
    Call StatusBarUpdate("Recalculate workbooks ...")
    Application.Calculation = xlCalculationAutomatic
    Call ClearStatusBar
    
    If UCase(TDir) = "DATE" Then
        TDir = "Export BMC " & FixFileName(Now())
        TDir = Replace(TDir, ".", "-")
    End If
            
    'Clear the filter list
    Call ApplyFilterToEnablerList_EnablerID
    
    Set sWB = ThisWorkbook  'Default
    Set sWS = sWB.Sheets(EnablerSheet)  'that's the default

    If MsgBox("Do you want to take the enabler to export from current workbook?" & vbCrLf & _
            vbCrLf & _
            "File content grouped by: '" & EnablerExportGrouping() & "'", vbYesNo) <> vbYes Then
            
        EnablerFile = LoadSetting("EnablerWorkbookForExport")
        EnablerFile = InputBox("What other file you want to use?" & vbCrLf & _
                                "(Press 'Cancel' to select another file.)" & vbCrLf & _
                                vbCrLf & _
                                "Last used workbook:", _
                                "Default workbook to export Enablers from", _
                               EnablerFile)
        If EnablerFile = "" Then
            EnablerFile = GetFileName("Select BMC Summary file to export enablrs from", "BMC Summary Files (*.XLS*), *.xls*", sWB.path)
        End If
        If EnablerFile = "" Then
            MsgBox ("No valid file name given, abort export.")
            Exit Sub
        Else
            Err.Clear
            'store the new file to work with in the config
            Call UpdateSetting("EnablerWorkbookForExport", EnablerFile)
            'Range("EnablerWorkbookForExport") = EnablerFile
            If (Left(EnablerFile, 1) = ".") Then
                EnablerFile = ThisWorkbook.path & "\" & EnablerFile
            End If
            
            Call StatusBarUpdate("Open Source BMC Summary file '" & EnablerFile & "'")
        
            Workbooks.Open FileName:=EnablerFile, UpdateLinks:=False, ReadOnly:=True
            If Err <> 0 Then
                Call MsgBox(Err.Description)
                Exit Sub
            Else
                Set sWB = ActiveWorkbook
                ThisWorkbook.Activate
            End If
        End If
    End If
    
    ExpCancelledEnablers = False
    If MsgBox("Do you want to export also 'Cancelled' enablers?", vbYesNo) = vbYes Then
        ExpCancelledEnablers = True
    End If
    
    Err.Clear
    Set sWS = sWB.Sheets(EnablerSheet)  'that's the default
    If Err Then
        MsgBox ("The workbook '" & sWB.Name & "' doesn't contain a tab named '" & EnablerSheet & "'")
        Exit Sub
    End If
    
    MarketCol = num2col(sWS.Range("_E_Market").Column)
    If MarketCol = "" Or Err Then
        MsgBox ("The enabler summary worksheet '" & sWS.Name & "' doesn't contain a Market column.")
        Exit Sub
    End If
    
    'ensure that the enabler worksheet is sorted according to the BMC export grouping attribute
    Call SortEnablerWorksheet(sWS)
    
    'going forward "ThisWorkbook" must be active to get the right setting.
    'the enabler data may come from a different workbook (=>sWB, sWS)
    ThisWorkbook.Activate
    
    Set rngMM = Range("MarketMappingExtended")
    
    On Error Resume Next
    If sWB.Styles("Normal").NumberFormat <> "General" Then
        Call MsgBox("The NORMAL Styles has an invalide NumberFormat:" & vbCrLf & _
                     sWB.Styles("Normal").NumberFormat & vbCrLf & _
                     "Terminating script.", vbCritical)
        Exit Sub
    End If
    
    On Error GoTo 0
    
    'check for export directory
    Do While UserSelect <> vbYes
        UserSelect = MsgBox("You are about to export the enabler data into separate BMC files (BG / Market)" & vbCrLf & _
                    vbCrLf & _
                    "Export filter: " & BMCExportFilter & vbCrLf _
                    & vbCrLf & _
                    "Target directory is:" & vbCrLf & vbCrLf & "     " & TDir, _
                    vbYesNoCancel)
        
        Select Case UserSelect
        
        Case vbYes
        
        Case vbNo
            FolderName = GetFolderName("Select target export folder", "", (TDir))
            If FolderName <> "" Then
                TDir = FolderName   '& "\" & TDir
            End If
        Case vbCancel
            Exit Sub
        End Select
    Loop
                
    'Application.Calculation = xlCalculationManual
    
    '---------------------
    'now start the export
    '---------------------
    SkipColumnCheck = False
    Do While sWS.Range(MarketCol & sR) <> ""    'if a market is given, then export
      'Export on BG level - NOT BU level.
      'BMC = UCase(sWS.Range(BGCol & sR) & sWS.Range(MarketCol & sR))
      DoEvents
      Application.ScreenUpdating = False
      ThisWorkbook.Activate
      BMC = GetBMC(sWS, BGCol, MarketCol, sR)
      NextBMC = BMC
    
      If InStr(1, NextBMC, BMCExportFilter, vbTextCompare) > 0 Then
        
        Application.Calculation = xlCalculationManual

        ' Open template file
        Workbooks.Add Template:=ThisWorkbook.path & "\" & TFile
        'Workbooks.Add Template:=sWB.path & "\" & TFile
        Set rWB = ActiveWorkbook
        Set rWS = rWB.Worksheets(EnablerSheet)
        Set rWS_DB = rWB.Worksheets(Tab_BMCDashboard)
        
        On Error Resume Next
        If rWB.Styles("Normal").NumberFormat <> "General" Then
            If (MsgBox("The NORMAL Styles has an invalide NumberFormat (#1):" & vbCrLf & _
                         rWB.Styles("Normal").NumberFormat & vbCrLf & _
                         "Do you want to terminate the BMC Tracking file creation?.", vbYesNo) <> vbYes) Then
                Exit Do
            End If
        End If
        On Error GoTo 0
        
        'file counter
        f = f + 1
        
        ' save template file under a new name
        On Error Resume Next
        Market = sWS.Range(MarketCol & sR)
        Market = Application.WorksheetFunction.VLookup(Market, rngMM, 2, False)
        Market = FixFileName((Market))
        On Error GoTo 0
        
        ' Create directory name ...
        
        'attach a configured path
        If FolderName = "" Then
            ' relative to current directory
            BMCPath = sWB.path
            If TDir <> "" Then
                BMCPath = BMCPath & "\" & FixFileName((TDir))
            End If
        Else
            BMCPath = FolderName
        End If
        
        ' first append BG - check if various BGs are in this filtered BMC name
        If sWS.Range(BGCol & sR) <> "" Then
            sRFirst = sR
            MyBG = sWS.Range(BGCol & sR)
            Application.ScreenUpdating = False
            ThisWorkbook.Activate
            'First search for the number of rows to copy ...
            tNextBMC = BMC
            Do While BMC = tNextBMC And BMC <> ""
                sR = sR + 1
                'NextBMC = UCase(sWS.Range(BGCol & sR) & sWS.Range(MarketCol & sR))
                tNextBMC = GetBMC(sWS, BGCol, MarketCol, sR)
                If InStr(1, MyBG, sWS.Range(BGCol & sR), vbTextCompare) = 0 And tNextBMC = BMC Then
                    If Err = 0 Then
                        MyBG = MyBG & "-" & sWS.Range(BGCol & sR)
                    End If
                End If
                Err.Clear
            Loop
            sR = sRFirst
            If InStr(1, MyBG, "MA-S&RC-TC", vbTextCompare) Then
                MyBG = Replace(MyBG, "-S&RC", "", , , vbTextCompare)
            End If
            If InStr(1, MyBG, "HS-", vbTextCompare) Or InStr(1, MyBG, "-HS", vbTextCompare) Then
                MyBG = Replace(MyBG, "HS-", "", , , vbTextCompare)
                MyBG = Replace(MyBG, "-HS", "", , , vbTextCompare)
            End If
            
            BMCPath = BMCPath & "\" & FixFileName((MyBG))
        End If
        
        ' second append Market
        If Market <> "" Then
            BMCPath = BMCPath & "\" & FixFileName((Market))
        End If
        
        ' Create directory
        ' MsgBox BMCPath
        CreateDirectoryPath (BMCPath)
        
        ' ... and save file
        BMCFile = FixFileName(BMCFilePreFix & MyBG & "_" & Market & BMCFileAppendix)
        Call StatusBarUpdate("Save BMC file '" & BMCFile & "'")
        
        On Error Resume Next
        Err.Clear
        'Application.CalculateBeforeSave = False        'setting to false didn't really speed up the save
        If InStr(1, TFile, ".XLSM", vbTextCompare) > 0 Then
            rWB.SaveAs FileName:=BMCPath & "\" & BMCFile, FileFormat:=xlOpenXMLWorkbookMacroEnabled, CreateBackup:=False
        Else
            rWB.SaveAs FileName:=BMCPath & "\" & BMCFile, FileFormat:=xlExcel12, CreateBackup:=False
        End If
        'Application.CalculateBeforeSave = True
        If Err Then
            Err.Clear
            MsgBox (BMCPath & "\" & BMCFile & " - " & Len(BMCPath & "\" & BMCFile))
        End If
        ScreenUpdate = Application.ScreenUpdating
        Application.ScreenUpdating = False

        If rWS.Range("A1") <> "Enabler ID" Then
            Err.Clear
        End If
        
        'Compare header of master and template
        l = 1
        Do While sWS.Range("A1").Cells(1, l) <> ""
            If (sWS.Range("A1").Cells(1, l) <> rWS.Range("A1").Cells(1, l)) Then
                'not all columns seem to have the same name. Stop
                If SkipColumnCheck = False Then
                    If MsgBox("Column (" & l & ") in BMC Summary and BMC Template file do not match." & vbCrLf & _
                                sWS.Range("A1").Cells(1, l) & vbCrLf & rWS.Range("A1").Cells(1, l) & vbCrLf & _
                                "Note: Source file and the used template file must be of same format in the tab 'BMC Enabler Summary List'." & vbCrLf & _
                                "[No] : Abort export" & vbCrLf & "[Yes] : Continue export", vbYesNo) <> vbYes Then
                        Exit Sub
                    End If
                    SkipColumnCheck = True
                End If
                l = l - 1
                Exit Do
            Else
                l = l + 1
            End If
        Loop
        
        
        Application.ScreenUpdating = ScreenUpdate
        
        'clean "Summary" sheet in template file where fields don't contain a formula.
        
        Application.CutCopyMode = False
        
        'Copy cell by cell where there is no formula
        rR = 2
        'BMC = UCase(sWS.Range(BGCol & sR) & sWS.Range(MarketCol & sR))
        Application.ScreenUpdating = False
        ThisWorkbook.Activate
        BMC = GetBMC(sWS, BGCol, MarketCol, sR)
        NextBMC = BMC
        
        If InStr(1, NextBMC, BMCExportFilter, vbTextCompare) > 0 Then
        
        End If
        
        Application.Calculation = xlCalculationManual

        On Error Resume Next
        If rWB.Styles("Normal").NumberFormat <> "General" Then
            Call MsgBox("The NORMAL Styles has an invalide NumberFormat (#2):" & vbCrLf & _
                         rWB.Styles("Normal").NumberFormat & vbCrLf & _
                         "Terminating script.", vbCritical)
            Exit Do
        End If
        On Error GoTo 0
        If rWS.Range("A1") <> "Enabler ID" Then
                Err.Clear
        End If
        If (CopyRowByRow) Then
        
            'copy row by row until the BMC changes
            Do While BMC = NextBMC And BMC <> ""
                DoEvents
                If rR <= 1 Then
                    Err.Clear
                End If
                Call StatusBarUpdate(BMC & " Line: " & rR)
                Application.ScreenUpdating = False
                DoEvents
                BMC = NextBMC
                
    'GoTo E1:
                'copy column by column
                For c = 1 To l
                    
                    Application.Calculation = xlCalculationManual
                    lmt = StatusBarUpdate(BMC & " Line: " & rR & " " & c, lmt)
                
                    'only copy when the rWS cell has no formula
                    vLock = rWS.Range("A1").Cells(2, c).Locked
                    sWS.Range("A1").Cells(sR, c).Copy
                    If sWS.Range("A1").Cells(sR, c).HasFormula Then
                        rWS.Range("A1").Cells(rR, c).PasteSpecial Paste:=xlPasteFormats
                    ElseIf rWS.Range("A1").Cells(rR, c).HasFormula Then
                        rWS.Range("A1").Cells(rR, c).PasteSpecial Paste:=xlPasteFormats
                    Else
                        rWS.Range("A1").Cells(rR, c).PasteSpecial
                    End If
                    
                    'rWS.Range("A1").Cells(rR, c).Locked = sWS.Range("A1").Cells(2, c).Locked
                    rWS.Range("A1").Cells(rR, c).Locked = vLock
                Next c

                Application.ScreenUpdating = True
                rR = rR + 1
                sR = sR + 1
                If rR <= 1 Then
                    Err.Clear
                End If

                'NextBMC = UCase(sWS.Range(BGCol & sR) & sWS.Range(MarketCol & sR))
                NextBMC = GetBMC(sWS, BGCol, MarketCol, sR)
                Err.Clear
            Loop
             If rWS.Range("A1") <> "Enabler ID" Then
                LogEventAdd ("Not expected that Enabler ID header is wrong (" & rWB.Name & ")")
                Err.Clear
            End If
            
        Else
            'that's the default way of transferring the content.
            sRFirst = sR
            ThisWorkbook.Activate
            'First search for the number of rows to copy ...
            Do While BMC = NextBMC And BMC <> ""
                sR = sR + 1
                'NextBMC = UCase(sWS.Range(BGCol & sR) & sWS.Range(MarketCol & sR))
                NextBMC = GetBMC(sWS, BGCol, MarketCol, sR)
                Err.Clear
            Loop
            sRLast = sR - 1
            
            Application.ScreenUpdating = False
            'error checking ...
            If rR <= 1 Then
                LogEventAdd ("Not expected that row # is <= 1 (" & rWB.Name & ")")
                Err.Clear
            End If
            
            ActiveWindow.WindowState = xlMinimized
            rRLast = rR + (sRLast - sRFirst)
            
            'error checking ...
            If rRLast <= 1 Or rRLast < rR Then
                LogEventAdd ("Not expected that last row # is <= 1 (" & rWB.Name & ")")
                Err.Clear
            End If

            'then copy column by column
            For c = 1 To l
                    DoEvents
                    Application.Calculation = xlCalculationManual
                    lmt = StatusBarUpdate(BMC & " Col: " & c & " of " & l & " - Rows:" & sRLast - sRFirst + 1, lmt)
                    Application.ScreenUpdating = False
                
                    'only copy when the rWS cell has no formula
                    vLock = rWS.Range("A1").Cells(2, c).Locked
                    sRange = num2col(c) & sRFirst & ":" & num2col(c) & sRLast
                    sWS.Range(sRange).Copy
                    
                    rRange = num2col(c) & rR & ":" & num2col(c) & rRLast  '[+1 - rR] = just ensures that we copy the right # of rows whatever the "rR" value is
                    
                    'Do the Paste - only when source as well as receiving cell have no formula.
                    '
                    If sWS.Range("A1").Cells(sRFirst, c).HasFormula Then
                        rWS.Range(rRange).PasteSpecial Paste:=xlPasteFormats
                    ElseIf rWS.Range("A1").Cells(rR, c).HasFormula Then
                        rWS.Range(rRange).PasteSpecial Paste:=xlPasteFormats
                    Else
                        ' here we copy the whole cell content. Shouldn't cause any loss of format or value.
                        rWS.Range(rRange).PasteSpecial
                    End If
                    
                    'rWS.Range("A1").Cells(rR, c).Locked = sWS.Range("A1").Cells(2, c).Locked
                    rWS.Range(rRange).Locked = vLock
            Next c
            
            'if requested remove any row that shows a "Canceled" enabler
            If ExpCancelledEnablers = False And rR > 1 Then
                For c = rR To rRLast    'c here use as a row counter
                    If InStr(1, rWS.Range("_E_Top3").Cells(c, 1), "CANCEL", vbTextCompare) And c > 1 Then
                        rWS.Rows(c & ":" & c).Delete
                        'go one line up again as now one row has been removed
                        c = c - 1
                    End If
                Next c
            End If
            
            'error checking
            If rR <= 1 Then
                LogEventAdd ("Not expected that row # is <= 1 (" & rWB.Name & ")")
                Err.Clear
            End If
            
            'this check is triggered by the error seen every now and then that the header cell A1 gets wipped out.
            If rWS.Range("A1") <> "Enabler ID" Then
                LogEventAdd ("Not expected that Enabler ID header is wrong (" & rWB.Name & ")")
                Err.Clear
            End If
        End If
        
        
        Application.ScreenUpdating = False
        Call ClearStatusBar
        
        'Maintance: update the formulas in the newly created file
        Call Prepare_CF_MgmtStatus_WS(rWB.Worksheets(Tab_BMCEnablerList))
        Call Expand_DV_WS(rWB.Worksheets(Tab_BMCEnablerList))
        Call FormatDefaultCells_WS(rWB.Worksheets(Tab_BMCEnablerList))
        Call CheckAndFixFormula(rWB.Worksheets(Tab_BMCEnablerList))
        
        'set default config for this file type
        Call SetDefaultConfigWB(rWB, "")
        
        If rWB.Worksheets(Tab_OnePagerTemplate).Visible = True Then
            LogEventAdd ("Not expected that OnePager Template worksheet is visible (" & rWB.Name & ")")
            Err.Clear
        End If

        'trigger the default config check when the file is first opened again
        Range("OnOpenFirstRun") = ""
        Call UpdateSetting("OnOpenFirstRun", "True", rWB)   'flag cleared to

        Application.Calculate
        
        ' set the filter items in the Dashboard view to the default for that market and BG.
        ' set Top3
        ' Market, BG => as a file contains the data for one market and one BG only, we can set them to "ALL"
        rWS_DB.Range("DB_TOP3Selection") = "Top 3 only"
        rWS_DB.Range("DB_MarketSelection") = Market
        rWS_DB.Range("DB_BGSelection") = "All"
        rWS_DB.Range("DB_BUSelection") = "All"
        
    
        Application.CutCopyMode = True
        
        On Error Resume Next
        If rWB.Styles("Normal").NumberFormat <> "General" Then
            Call MsgBox("The NORMAL Styles has an invalide NumberFormat:" & vbCrLf & _
                         rWB.Styles("Normal").NumberFormat & vbCrLf & _
                         "Terminating script.", vbCritical)
            Exit Do
        End If
        On Error GoTo 0
        
        'Ensure that the instructions tab is the first to open
        rWB.Worksheets(Tab_Instructions).Activate
        rWB.Worksheets(Tab_Instructions).Select
        If rWS.Range("A1") <> "Enabler ID" Then
                Err.Clear
        End If
        rWB.Save
        Application.CutCopyMode = False     'ClearClipboard
        Application.DisplayAlerts = False
        rWB.Close
        Application.DisplayAlerts = True
        
        
        ThisWorkbook.Activate
        
      Else
        sR = sR + 1
        'NextBMC = UCase(sWS.Range(BGCol & sR) & sWS.Range(MarketCol & sR))
        NextBMC = GetBMC(sWS, BGCol, MarketCol, sR)
      End If
    Loop
    
    'close the enabler source workbook file if not identical with this workbook file.
    If UCase(ThisWorkbook.Name) <> UCase(sWB.Name) Then
        Application.CutCopyMode = False     'ClearClipboard

        Application.DisplayAlerts = False
        sWB.Close SaveChanges:=False
        Application.DisplayAlerts = True
    Else
        'reset the original sorting
        Call ApplyFilterToEnablerList_EnablerID_WS(sWS)
    End If
    
    Call StatusBarUpdate("")
    MsgText = f & " Files have been re-created." & vbCrLf & vbCrLf & _
                "Started at: " & StartDate & vbCrLf & _
                "Ended at:   " & DateTime.Now & vbCrLf
    Call LogEventAdd(MsgText)
    Call MsgBox(MsgText, vbOKOnly)

End Sub

Function GetBMC(sWS As Worksheet, BGCol As String, MarketCol As String, sR As Long) As String

    Dim BMCGrouping As String
    Const Separator = "#"
    
    On Error Resume Next
    
    'note: the setting for this is loaded from the active workbook.
    BMCGrouping = UCase(LoadSetting("BMCExportGrouping"))
    
    Select Case BMCGrouping
    Case "BG":
        GetBMC = UCase(sWS.Range(BGCol & sR) & Separator)
    Case "MARKET":
        GetBMC = UCase(Separator & sWS.Range(MarketCol & sR))
    Case Else
        GetBMC = UCase(sWS.Range(BGCol & sR) & Separator & sWS.Range(MarketCol & sR))
    End Select
    
End Function

Function EnablerExportGrouping() As String

    Dim BMCGrouping As String
    
    On Error Resume Next
    
    'note: the setting for this is loaded from the active workbook.
    BMCGrouping = UCase(LoadSetting("BMCExportGrouping"))
    
    Select Case BMCGrouping
    Case "BU":
    Case "BG":
    Case "MARKET":
    Case Else
        BMCGrouping = "BG & EnablerID"
    End Select
    
    EnablerExportGrouping = BMCGrouping
    
End Function

Function SortEnablerWorksheet(sWS As Worksheet) As String
    'the export assumes that all records that go into one BMC tracking file is working are come
    'after each other in the enabler summary source file
    'as such they must be sorted according the export criteria
    Dim BMCGrouping As String
    
    On Error Resume Next
    
    'note: the setting for this is loaded from the active worksheet.
    BMCGrouping = EnablerExportGrouping()
    
    Select Case BMCGrouping
    Case "BU":
        Call ApplyFilterToBMCList(sWS, "_E_Business")   ' not yet fully implemented
    Case "BG":
        Call ApplyFilterToBMCList(sWS, "_E_BGName")
    Case "MARKET":
        Call ApplyFilterToBMCList(sWS, "_E_Market")
    Case Else
        'the default is sorted by the field "Enabler ID" where the BG is leading
        Call ApplyFilterToEnablerList_EnablerID_WS(sWS)
    End Select
    
    SortEnablerWorksheet = BMCGrouping

End Function
Private Sub CreateAllSummaryFiles()

' creates the Market and BG specific BMC summary files

    Dim StartDate As Date
    Dim m, b As Integer
    
    If MsgBox("You are about to create Market & BG specific 'BMC Enabler summary' files with default seetings." & vbCrLf & _
              "Placed into the subdirectory: '" & Trim(LoadSetting("TargetDir")) & "'" & vbCrLf & vbCrLf & _
              "Do you want to do this?", vbOKCancel) <> vbOK Then
        Exit Sub
    End If
    
    StartDate = DateTime.Now
    
    b = CreateBGSummaryFiles(False)
    m = CreateMarketSummaryFiles(False)
    
    Call MsgBox(b & " BG and " & m & " Market Summary files have been re-created." & vbCrLf & vbCrLf & _
            "Started at: " & StartDate & vbCrLf & _
            "Ended at:   " & DateTime.Now & vbCrLf, _
            vbOKOnly)

End Sub

Private Sub Test_CreateMarketSummaryFiles()
    Call CreateMarketSummaryFilesCluster(True, "HS")
End Sub
Sub Test_CreateMarketSummaryFilesAll()
    Call CreateMarketSummaryFiles(False)
End Sub

Function CreateMarketSummaryFiles(ShowMsg As Boolean) As Integer

Dim c   As Integer

c = CreateMarketSummaryFilesCluster(ShowMsg, "HS")
If c Then
    c = c + CreateMarketSummaryFilesCluster(False, "PH")
End If
CreateMarketSummaryFiles = c

End Function

Function CreateMarketSummaryFilesCluster(ShowMsg As Boolean, Optional Cluster As String) As Integer

' creates the Market specific BMC summary files
    
    Dim f, c            As Integer
    Dim sWB As Workbook, rWB As Workbook
    Dim sWS, rWS        As Worksheet
    Dim StartDate       As Date
    Dim BMC, NextBMC, Market, EnablerSheet, MarketCol, BGCol As String
    Dim TDir, BMCFile, BMCPath, BMCFilePreFix, BMCFileAppendix, BMCExportFilter  As String
    Dim TFile           As String
    Dim rngMM           As Range
    Dim ScreenUpdate    As Variant
    Dim MyCluster       As String
    
    EnablerSheet = Tab_BMCEnablerList       'LoadSetting("EnablerSheetName")
    MarketCol = LoadSetting("MarketCol")
    BGCol = LoadSetting("BGCol")
    TFile = LoadSetting("TemplateFileName")
    BMCFilePreFix = LoadSetting("FilenamePreFix")
    BMCFileAppendix = LoadSetting("FilenameAppendixSummary")
    TDir = Trim(LoadSetting("TargetDir"))
    BMCExportFilter = LoadSetting("BMCExportFilter")
    StartDate = DateTime.Now
    
    If ShowMsg = True Then
        If MsgBox("You are about to create Market specific 'BMC Enabler summary' files with default settings (Cluster: '" & Cluster & "')." & vbCrLf & _
                  "Do you want to do this?", vbOKCancel) <> vbOK Then
            CreateMarketSummaryFilesCluster = 0
            Exit Function
        End If
    End If

    Application.Calculate
    Application.Calculation = xlCalculationAutomatic
    
    Set sWB = ThisWorkbook
    Set sWS = sWB.Sheets(EnablerSheet)
    Set rngMM = Range("MarketMapping")
    'Set rngMM = Range("Market2Abbreviation")
    
    sWB.Save
    
    'set target directory name in case the keyword DATE is provided
    If UCase(TDir) = "DATE" Then
        TDir = "Export Market " & FixFileName(Now())
        TDir = "EM " & FixFileName(Now())
        TDir = Replace(TDir, ".", "-")
    End If
    
    If Cluster = "" Then
        MyCluster = "HS"
    Else
        MyCluster = Cluster
    End If
    If MyCluster <> "" Then TDir = TDir & "\" & MyCluster
    
    ' go market by market
    f = 1
    c = 0
    Do While rngMM.Cells(f, 2) <> ""   'if a market is given, then export
        Market = rngMM.Cells(f, 2)

If f > 18 Then Stop

        ' take all market names except the "ALL" :-)
        If (UCase(Market) <> "ALL") Then
            ' Open template file
            Err.Clear
            'Workbooks.Add Template:=sWB.path & "\" & TFile
            Set rWB = ExcelAddWBFromTemplate(TFile, sWB.path)
        
            If rWB Is Nothing Then
                MsgBox ("Failed to create new market summary file. See event log")
                Stop
            End If
            
            'Set rWB = ActiveWorkbook
            Set rWS = rWB.Worksheets(EnablerSheet)
            'Set rWS_DB = rWB.Worksheets(Tab_BMCDashboard)
            
            Application.Calculation = xlCalculationManual
            
            ' save template file under a new name
            Market = FixFileName((Market))
            
            ' add a second "_" before the BMCFIle Appendix to indicate that this is a Market file.
            BMCFile = FixFileName("M" & "_" & Market & BMCFileAppendix)
            
            ' Create directory name ...
            ' relative to current directory
            BMCPath = sWB.path
            
            'attach a configured path - in this case fixed to "MARKET"
            If TDir <> "" Then
                BMCPath = BMCPath & "\" & FixFileName((TDir))
            End If
            
            'Fix subdirectory called Market
            BMCPath = BMCPath & "\" & "Market"
            
            ' second append the Market name
            If Market <> "" Then
                BMCPath = BMCPath & "\" & FixFileName((Market))
            End If
            
            ' Create directory
            ' MsgBox BMCPath
            CreateDirectoryPath (BMCPath)
            
            ' ... and save file
            On Error Resume Next
            Err.Clear
            If InStr(1, TFile, ".XLSM", vbTextCompare) > 0 Then
                rWB.SaveAs FileName:=BMCPath & "\" & BMCFile, FileFormat:=xlOpenXMLWorkbookMacroEnabled, CreateBackup:=False
            
            Else
                rWB.SaveAs FileName:=BMCPath & "\" & BMCFile, FileFormat:=xlExcel12, CreateBackup:=False
                'rWB.SaveAs FileName:=BMCPath & "\" & f, FileFormat:=xlExcel12, CreateBackup:=False
            End If
                
            If Err Then
                Call MsgBox("Failed to create file:" & vbCrLf & _
                            BMCPath & vbCrLf & BMCFile & vbCrLf & _
                            Len(BMCPath & "\" & BMCFile) & " : " & vbCrLf & _
                            Err.Description, vbOKOnly)
                Stop
                Err.Clear
            End If
            'MsgBox Len(BMCPath & "\" & BMCFile)
            If ProtectedVBProject(rWB) = False Then
                If MsgBox("VBA Project not locked in workbook" & vbCrLf & _
                          "'" & rWB.Name & "'" & vbCrLf & vbCrLf & _
                          "Do you want to continue anyhow?", vbOKCancel) <> vbOK Then
                    Exit Function
                End If
            End If

            ScreenUpdate = Application.ScreenUpdating
            Application.ScreenUpdating = False
    
            
            'Maintance: update the formulas in the newly created file
            Call Prepare_CF_MgmtStatus_WS(rWB.Worksheets(Tab_BMCEnablerList))
            Call Expand_DV_WS(rWB.Worksheets(Tab_BMCEnablerList))
            Call CheckAndFixFormula(rWB.Worksheets(Tab_BMCEnablerList))
                       
            Application.Calculate
        
            ' set the filter items in the Dashboard view to the default for that market and BG.
            ' set Top3
            ' Market, BG => as a file contains the data for one market and one BG only, we can set them to "ALL"
            Range("OP_ClusterType") = MyCluster
            Call SetDefaultConfigWB(rWB, "", MyCluster)
            
            Application.Calculate
            
            'Ensure that the instructions tab is the first to open
            rWB.Worksheets(Tab_Instructions).Select
            rWB.Worksheets(Tab_Instructions).Activate

            rWB.Save
            
            Application.CutCopyMode = False     'ClearClipboard
            Application.DisplayAlerts = False
            rWB.Close
            Application.DisplayAlerts = True
        
            sWB.Activate
            c = c + 1
        End If
        'next file
        f = f + 1
    Loop
    
    'return # of files created
    CreateMarketSummaryFilesCluster = c
    
    Application.Calculation = xlCalculationAutomatic
    
    Call StatusBarUpdate("")
          
            
    If ShowMsg = True Then
        Call MsgBox(c & " Market Summary files have been re-created." & vbCrLf & vbCrLf & _
            "Started at: " & StartDate & vbCrLf & _
            "Ended at:   " & DateTime.Now & vbCrLf, _
            vbOKOnly)
    End If
    
End Function

Private Sub Test_CreateBGSummaryFiles()
    Call CreateBGSummaryFiles(True)
End Sub


Public Sub Test_CreateSpecificBGSummaryFiles()

'main function called by a button on the Settings tab that checks what template file to create
'and calls the creation function accordingly.
    
    Dim BG          As String
    Dim OnePager    As Boolean
    'Dim BGInput     As String
    Dim IsBMCSummary     As String
    Dim ValidBG     As Boolean
    
    On Error Resume Next
    
    OnePager = False
    
    
    Do Until ValidBG
        Err.Clear
        BG = "All"
        BG = InputBox("You are about to create BG specific 'BMC Enabler Summary' files with default seetings." & vbCrLf & _
              "Do you want to do this?" & vbCrLf & _
              vbCrLf & _
              "Enter BG name if you want to do it for a specific BG only. Otherwise keep 'All'." & vbCrLf & _
              "Supported BG names are: " & GetListOfBGNames, "Select BG", BG)
        If BG = "" Then
            BG = ""
            Exit Sub
        ElseIf BG = "All" Or BG = "HS" Or BG = "PH" Then
            'BG = ""
            ValidBG = True
        Else
            If (BG = "HS" Or BG = "PH") Then
                ValidBG = True
            ElseIf Application.WorksheetFunction.VLookup(BG, Range("BG"), 1, False) <> "" Then
                If Err = 0 Then
                    ValidBG = True
                Else
                    Call MsgBox("The BG " & BG & "' is invalid.", vbOKOnly)
                End If
            End If
        End If
    Loop
    
    IsBMCSummary = MsgBox("Create Template file for BG '" & BG & "'" & vbCrLf & vbCrLf & _
                    "YES: Create 'BMC Enabler Tracking Summary' template" & vbCrLf & _
                    "NO: Create 'BMC Enabler OnePager' template" & vbCrLf & _
                    "Cancel: Abort template creation", vbYesNoCancel)
    If IsBMCSummary = vbNo Then
        OnePager = True
    ElseIf IsBMCSummary = vbYes Then
        OnePager = False
    Else
        BG = "" ' cancel processing
    End If
    
    If BG <> "" Then
        Call CreateBGSummaryFiles(True, OnePager, BG)
    End If
    
End Sub

Function CreateBGSummaryFiles(ShowMsg As Boolean, Optional OnePagerSummary As Boolean, Optional SpecificBG As String, Optional InBMCYear As Integer) As Integer
'
' Creates BG and HS specific Enabler Summary files. Values are preset in the configuration to only
' take those Market Enabler tracking files for that specific BG or HS
'
    Dim f, c                    As Integer
    Dim sWB As Workbook, rWB    As Workbook
    Dim sWS, rWS                As Worksheet
    Dim wsSetting               As Worksheet
    Dim StartDate               As Date
    Dim rngBGList               As Range
    Dim ScreenUpdate            As Variant
    Dim BG, BMC, EnablerSheet, MarketCol, BGCol As String
    Dim TDir, BMCFile, TFile, BMCPath, BMCFilePreFix, BMCFileAppendix, BMCFileAppendixOP, BMCExportFilter As String
    Dim ActBMCYear              As Integer
    Dim Cluster                 As String
    
    On Error Resume Next
    
    EnablerSheet = Tab_BMCEnablerList       'LoadSetting("EnablerSheetName")
    MarketCol = LoadSetting("MarketCol")
    BGCol = LoadSetting("BGCol")
    TFile = LoadSetting("TemplateFileName")
    BMCFilePreFix = LoadSetting("FilenamePreFix")
    BMCFileAppendix = LoadSetting("FilenameAppendixSummary")
    BMCFileAppendixOP = LoadSetting("FilenameAppendixSummaryOP")
    TDir = Trim(LoadSetting("TargetDir"))
    
    BMCExportFilter = LoadSetting("BMCExportFilter")
    StartDate = DateTime.Now
    
    If ShowMsg = True Then
        BG = "You are about to create BG specific 'BMC Enabler Tracking Summary' files with default settings."
        If SpecificBG <> "" Then
            BG = BG & vbCrLf & "BG: " & SpecificBG
        End If
        BG = BG & vbCrLf & "Do you want to do this?"
        If MsgBox(BG, vbOKCancel) <> vbOK Then
            Exit Function
        End If
        BG = ""
    End If
    
    Application.Calculate
    Application.Calculation = xlCalculationAutomatic
    
    If UCase(TDir) = "DATE" Then
        TDir = "Export BG " & FixFileName(Now())
        TDir = Replace(TDir, ".", "-")
    End If
    
    Set sWB = ThisWorkbook
    Set sWS = sWB.Sheets(EnablerSheet)
    Set rngBGList = Range("BG")
    
    sWB.Save
    
    If SpecificBG = "All" Then
        SpecificBG = ""
    End If
    
    ' go market by market
    f = 1
    c = 0
    
    If InBMCYear > 2000 Then
        ActBMCYear = InBMCYear
    Else
        ActBMCYear = Year(Now())
        'Increment by one year if this is for the OnePager Summary during BMC planning which is usually done the year before
        If OnePagerSummary = True Then ActBMCYear = ActBMCYear + 1
    End If
    
    Do While rngBGList.Cells(f, 1) <> ""   'if a market is given, then export
            If SpecificBG <> "" Then
                BG = SpecificBG
            Else
                BG = rngBGList.Cells(f, 1)
            End If
    
            
            ' Use the BG = "ALL" to create the HS file
            ' add a second "_" before the BMCFIle Appendix to indicate that this is a BG/HS file.
            Select Case UCase(BG)
            Case "ALL", "HS", "PH"
                If UCase(BG) = "ALL" Then
                    BG = "HS"
                End If
                If OnePagerSummary = True Then
                    'BMCFile = FixFileName(BG & "-OP" & BMCFileAppendixOP)
                    BMCFile = FixFileName(BG & "_BG-OP" & BMCFileAppendixOP)
                Else
                    BMCFile = FixFileName(BG & BMCFileAppendix)
                End If
            Case Else
                If OnePagerSummary = True Then
                    BMCFile = FixFileName("BG-OP" & "__" & BG & BMCFileAppendixOP)
                Else
                    BMCFile = FixFileName("BG" & "__" & BG & BMCFileAppendix)
                End If
            End Select
            
            BMCFile = FixFileName((BMCFile))
            
            ' Open template file
            Err.Clear
            Workbooks.Add Template:=sWB.path & "\" & TFile
            Set rWB = ActiveWorkbook
            Set rWS = rWB.Worksheets(EnablerSheet)
            'Set rWS_DB = rWB.Worksheets(Tab_BMCDashboard)
            
            Application.Calculation = xlCalculationManual
            ' save template file under a new name
            
            ' Create directory name ...
            ' relative to current directory
            BMCPath = sWB.path
            
            'attach a configured path
            If TDir <> "" Then
                BMCPath = BMCPath & "\" & FixFileName((TDir))
            End If
            
            ' second append BG name
            If BG <> "" Then
                Err.Clear
                'add cluster (PH versus HS)
                If BG = "PH" Or BG = "HS" Then
                    'keep the PH and HS summary files on the top level of the path
                    BMCPath = BMCPath & "\" & BG   ' & FixFileName((Cluster))
                Else
                    'add cluster (PH versus HS)
                    Cluster = UCase(Application.WorksheetFunction.VLookup(BG, Range("BG2ClusterMap"), 2, False))
                    If Cluster <> "" And Err = 0 Then
                        If Cluster = "PH" Then
                            BMCPath = BMCPath & "\PH"   ' & FixFileName((Cluster))
                        Else
                            BMCPath = BMCPath & "\HS"   ' & FixFileName((Cluster))
                        End If
                    End If
                    ' add BG name as subdirectory
                    BMCPath = BMCPath & "\" & FixFileName((BG))
                End If
            End If
            
            ' Create directory
            ' MsgBox BMCPath
            CreateDirectoryPath (BMCPath)
            
            ' ... and save file
            If InStr(1, TFile, ".XLSM", vbTextCompare) > 0 Then
                rWB.SaveAs FileName:=BMCPath & "\" & BMCFile, FileFormat:=xlOpenXMLWorkbookMacroEnabled, CreateBackup:=False
            Else
                rWB.SaveAs FileName:=BMCPath & "\" & BMCFile, FileFormat:=xlExcel12, CreateBackup:=False
            End If
            
            If ProtectedVBProject(rWB) = False Then
                If MsgBox("VBA Project not locked in workbook" & vbCrLf & _
                          "'" & rWB.Name & "'" & vbCrLf & vbCrLf & _
                          "Do you want to continue anyhow?", vbOKCancel) <> vbOK Then
                    Exit Function
                End If
            End If

            ScreenUpdate = Application.ScreenUpdating
            Application.ScreenUpdating = False
    
            Set wsSetting = rWB.Worksheets(Tab_Settings)
            'PrepUpdate: needs handling that at the beginning of the new year this is not automatically switching to it but keep the "BMCYear" until March or so
            wsSetting.Range("BMCYear") = ActBMCYear

            Application.Calculate


            'Maintance: update the formulas in the newly created file
            Call Prepare_CF_MgmtStatus_WS(rWB.Worksheets(Tab_BMCEnablerList))
            Call Expand_DV_WS(rWB.Worksheets(Tab_BMCEnablerList)) 'YYY
            Call CheckAndFixFormula(rWB.Worksheets(Tab_BMCEnablerList))
                       
            Application.Calculate
        
            ' set the filter items in the Dashboard view to the default for that market and BG.
            ' set Top3
            ' Market, BG => as a file contains the data for one market and one BG only, we can set them to "ALL"
            Call SetDefaultConfigWB(rWB, "")
            Call UpdateSetting("OnOpenFirstRun", "True", rWB)
            'Range("OnOpenFirstRun") = "True"
            Application.Calculate
            
            
            'Ensure that the instructions tab is the first to open
            If (rWB.Worksheets(Tab_Instructions).Visible = xlSheetVisible) Then
                rWB.Worksheets(Tab_Instructions).Select
                rWB.Worksheets(Tab_Instructions).Activate
            ElseIf (rWB.Worksheets(Tab_OPSummaryInstructions).Visible = xlSheetVisible) Then
                rWB.Worksheets(Tab_OPSummaryInstructions).Select
                rWB.Worksheets(Tab_OPSummaryInstructions).Activate
            End If
            
            rWB.Save
            
            Application.CutCopyMode = False     'ClearClipboard
            Application.DisplayAlerts = False
            rWB.Close
            Application.DisplayAlerts = True
        
            sWB.Activate
            c = c + 1
        
            'next file
            If SpecificBG <> "" Then
                Exit Do
            End If
            
            f = f + 1
    Loop
    
    CreateBGSummaryFiles = c
    
    Call StatusBarUpdate("")
    
    Application.Calculation = xlCalculationAutomatic
            
    If ShowMsg = True Then
        Call MsgBox(c & " BG Summary files have been re-created." & vbCrLf & vbCrLf & _
            "Started at: " & StartDate & vbCrLf & _
            "Ended at:   " & DateTime.Now & vbCrLf & _
            "BMC Year:   " & ActBMCYear, _
            vbOKOnly)
    End If
    
End Function

Function CreateDirectoryPath(DirPath As String)

' the function name tells everything

Dim CreateDir As String
Dim Start As Integer

On Error Resume Next

If (Len(DirPath) > 0) Then

    Start = 1
    Do While Start > 0
        Start = InStr(Start + 1, DirPath, "\")
        If (Start > 0) Then
            CreateDir = Left(DirPath, Start - 1)
        Else
            CreateDir = DirPath
        End If
                
        ' Create Directory - ignore any error (which might indicate that the directory already exists
        Err.Clear
        MkDir (CreateDir)
        If Err Then
            Err.Clear
        Else
            Err.Clear
        End If
    Loop
                
End If

End Function

Private Sub Test_ChecAndFixFormula()
    Call CheckAndFixFormula(ActiveSheet)
End Sub
Function CheckAndFixFormulaAll(Optional wb As ThisWorkbook)

' run thru all listed worksheets to check and fix the fomulas
' currently it makes only use of the worksheets listed in named range "ImportOPGenericList"
Dim cWB     As Workbook
Dim cWS     As Worksheet
Dim g       As Integer

If wb Is Nothing Then
    Set cWB = ThisWorkbook
Else
    Set cWB = wb
End If

g = 1
Do While Trim(Range("ImportOPGenericList").Cells(g, 1)) <> ""
    Err.Clear
    Set cWS = cWB.Worksheets(Range("ImportOPGenericList").Cells(g, 1).Text)
    If Err = 0 Then
        Call CheckAndFixFormula(cWS)
    End If
    g = g + 1
Loop

End Function
    
Function CheckAndFixFormula(ws As Worksheet)

'Expand all formulas in row 2 in the given worksheet to the last row

Dim ActCell, c, myrange As String
Dim r, l, rMax, cMax, iMax, FirstRow As Integer
Dim ScreenUpdate    As Variant
Dim Prot            As Boolean
Dim CalcMode        As Variant
Dim lmt             As Date 'LastMessageTime

Call LogEventAdd("Start: CheckAndFixFormula ... " & ws.Name, , "FT1")

ScreenUpdate = Application.ScreenUpdating
Application.ScreenUpdating = False
CalcMode = Application.Calculation
Application.Calculation = xlCalculationManual

Prot = UnProtectWS(ws)

'sWS = GetBeSMARTSettings("SummarySheet", "Summary Enablers")

'Save Current Cell position
On Error Resume Next

'save cursor position to restore it afterwards
ActCell = ActiveCell.Address
        
FirstRow = 2
rMax = LastRow(ws)
cMax = LastCol(ws)


'Call MsgBox("Screenupdating: " & Application.ScreenUpdating, vbCritical)
'ensure that all formulas in line 6 of that worksheet gets extended to the end of the list.
For l = 1 To cMax
    c = num2col((l))
    lmt = StatusBarUpdate("Check formula in column " & c, lmt)
    Application.ScreenUpdating = False
    
    'if first data row has a formula ...
    If (ws.Range(c & FirstRow).HasFormula) Then
        '... then check if any of the cells in that column have no formula
        myrange = c & FirstRow & ":" & c & rMax
        For r = FirstRow To rMax
             If (ws.Range(c & r).HasFormula = False) Then
                '... cell has no formula although it should
                Exit For
             End If
        Next r
        
        'if the last column found with no formula is not the last one ...
        If r <= rMax And r > FirstRow Then
            '... then expand the formula from the first row to the end of that column.
            ws.Range(c & FirstRow).Copy
            myrange = c & FirstRow + 1 & ":" & c & rMax
            'myrange = c & r & ":" & c & rMax
            'Application.CutCopyMode = False
            ws.Range(myrange).PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
                        SkipBlanks:=False, Transpose:=False
        Else
            'If r > FirstRow Then
            '    ws.Range(c & FirstRow).Copy
                'myrange = c & FirstRow & ":" & c & r
            '    myrange = c & FirstRow + 1 & ":" & c & rMax
                'Application.CutCopyMode = False
            '    ws.Range(myrange).PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
            '                SkipBlanks:=False, Transpose:=False
            'End If
        End If
    End If
Next
'Call MsgBox("Screenupdating: " & Application.ScreenUpdating, vbCritical)

Application.Calculate
Application.Calculation = CalcMode

Range(ActCell).Select

Call ProtectWS(ws, Prot)

Call ClearStatusBar

'Application.ScreenUpdating = True
DoEvents
Application.ScreenUpdating = ScreenUpdate

Call LogEventAdd("End: CheckAndFixFormula ... " & ws.Name, , "FT1")

End Function

Function ExcelAddWBFromTemplate(XLSTemplateFile As String, Optional XLSTemplatePath As String) As Workbook

'creates a new excel file from a given template

Dim cWB                 As Workbook
Dim XLSTemplatePathFile  As String

On Error Resume Next

Set cWB = ActiveWorkbook

Err.Clear

If XLSTemplatePath <> "" Then
    XLSTemplatePathFile = XLSTemplatePath & "\" & XLSTemplateFile
Else
    XLSTemplatePathFile = XLSTemplateFile
End If

Workbooks.Add Template:=XLSTemplatePathFile

If Err <> 0 Then
    Call LogEventAdd("Create new XLS file from template failed:" & vbCrLf & _
                     XLSTemplateFile & vbCrLf & _
                     Err.Description)
    Err.Clear
    XLSTemplatePathFile = Left(XLSTemplateFile, InStrRev(XLSTemplateFile, ".", , vbTextCompare) - 1)
    'in case the file has still opened, then the file name should match with the expected
    If InStr(1, ActiveWorkbook.Name, XLSTemplatePathFile, vbTextCompare) > 0 Then
        If Err = 0 Then
            'the file can be used to work with
            Set ExcelAddWBFromTemplate = ActiveWorkbook
        End If
    Else
        ' in this context we keep the file open to see what file it was and if there is any other error message shown
    End If
Else
    Set ExcelAddWBFromTemplate = ActiveWorkbook
End If

cWB.Activate

Err.Clear

End Function


Attribute VB_Name = "a1_ImportTrackingFiles"
Option Explicit


Sub SupportFct_ImportMarketTrackingFiles()

' main function to set the cell lock including toogling EditBMC mode

Dim rWS As Worksheet
Dim Prot, EmptyRow As Boolean
Dim pw As String
Dim r, c, lRow, lCol As Integer
Dim ScreenUpdate As Variant
Dim AddRows As Integer
Dim FileType As String
Dim ShowMsg As Boolean

FileType = UCase(LoadSetting("TrackingFileType"))
ShowMsg = True

Set rWS = ActiveWorkbook.Sheets(Tab_BMCEnablerList)

'LockMode = "E"

'when not in edit mode and a default password given, then request password
If FileType <> "BMC" Then
    If (UserPasswordEdit = "" And GetMyPasswordEdit <> "") Then
        If UserPasswordEdit = "" Then
            pw = InputBox("You are about to import the enabler data from the market tracking files." & vbCrLf & vbCrLf & "Please enter password:", "Import enabler data", "Enter password")
            'pw = "Do you want to edit the BMC enablers in '" & rWS & "'" & vbCrLf & vbCrLf & "Please enter password:"
        Else
            pw = UserPasswordEdit
        End If
    Else
        pw = UserPasswordEdit
    End If
    
    If pw = GetMyPasswordEdit Then
        Call ImportMarketTrackingFiles
        UserPasswordEdit = pw
    Else
        If ShowMsg Then Call MsgBox("Invalid password.", vbExclamation)
    End If
Else
    If ShowMsg Then Call MsgBox("That function is not availble in your enabler file. Sorry.", vbExclamation)
End If

End Sub

Private Sub ImportMarketTrackingFiles()

Dim FileType As String

FileType = UCase(LoadSetting("TrackingFileType"))

Select Case FileType

Case "BG", "HS", "PH", "MARKET"
' continue with import without further checking

Case "BMC", "TEMPLATE", "OP"
    Call MsgBox("This is not a enabler summary file. File import aborted.", vbCritical)
    Exit Sub
    
Case Else   ' here under falls 'BG-OP' and ''
    If MsgBox("You want to import BMC Enabler tracking files but the file type is currently '" & FileType & "' (Should be 'BG', 'HS', 'PH', 'MARKET')" & vbCrLf & _
            vbCrLf & _
            "Do you want to abort the BMC Enabler Tracking file Import?", vbYesNo) <> vbNo Then
        Exit Sub
    End If

End Select

Call ImportMarketTrackingFiles_Msg(True)

End Sub
Sub ImportMarketTrackingFiles_Loop()

Dim WaitTime As String

' main function to set the cell lock including toogling EditBMC mode

Dim rWS As Worksheet
Dim Prot, EmptyRow As Boolean
Dim pw As String
Dim r, c, lRow, lCol As Integer
Dim ScreenUpdate As Variant
Dim AddRows As Integer
Dim FileType As String
Dim ShowMsg As Boolean

FileType = UCase(LoadSetting("TrackingFileType"))
ShowMsg = True

Set rWS = ActiveWorkbook.Sheets(Tab_BMCEnablerList)

'LockMode = "E"

'when not in edit mode and a default password given, then request password
If FileType <> "BMC" Then
    If (UserPasswordEdit = "" And GetMyPasswordEdit <> "") Then
        If UserPasswordEdit = "" Then
            pw = InputBox("You are about to import CONTINOUSLY BMC Enabler data from the Market tracking files." & vbCrLf & vbCrLf & "Please enter password:", "Import enabler data", "Enter password")
            'pw = "Do you want to edit the BMC enablers in '" & rWS & "'" & vbCrLf & vbCrLf & "Please enter password:"
        Else
            pw = UserPasswordEdit
        End If
    Else
        pw = UserPasswordEdit
    End If
    
    If pw = GetMyPasswordEdit Then
        UserPasswordEdit = pw

        WaitTime = InputBox("Repeat file import every HH:MM:SS:", , "00:15:00")
        'aStart new Enabler Import at: " & Now + TimeValue("0:30:00"))
        
        Do While (Trim(WaitTime) <> "")
            DoEvents
            Call ImportMarketTrackingFiles_Msg(False)
            DoEvents
            StatusBarUpdate ("Start new Enabler Import at: " & Now + TimeValue(WaitTime))
            Application.Wait (Now + TimeValue(WaitTime))
        Loop
    Else
        If ShowMsg Then Call MsgBox("Invalid password.", vbExclamation)
    End If
Else
    If ShowMsg Then Call MsgBox("That function is not availble in your enabler file. Sorry.", vbExclamation)
End If

End Sub

Private Sub ImportMarketTrackingFiles_NoMsg()
    Call ImportMarketTrackingFiles_Msg(False)
End Sub

Function OpenTrackingFile(TrackingImportFile As String, Optional WriteFlag As Boolean = False) As Workbook

Dim cWB As Workbook

On Error Resume Next

Call LogEventAdd("Start: OpenTrackingFile ... " & TrackingImportFile, , "FT1")

Set cWB = ActiveWorkbook

Err.Clear

If WriteFlag = True Then
    Workbooks.Open FileName:=TrackingImportFile, UpdateLinks:=False, ReadOnly:=False
Else
    Workbooks.Open FileName:=TrackingImportFile, UpdateLinks:=False, ReadOnly:=True
End If
        '-new Start-
If Err <> 0 Then
    Call LogEventAdd("Import Tracking file open failed:" & vbCrLf & _
                     TrackingImportFile & vbCrLf & _
                     Err.Description)
    Err.Clear
    'in case the file has still opened, then the file name should match with the expected
    If InStr(1, TrackingImportFile, ActiveWorkbook.path, vbTextCompare) > 0 And _
       InStr(1, TrackingImportFile, ActiveWorkbook.Name, vbTextCompare) > 0 Then
        If Err = 0 Then
            'the file can be used to work with
            Set OpenTrackingFile = ActiveWorkbook
        End If
    Else
        ' in this context we keep the file open to see what file it was and if there is any other error message shown
    End If
Else
    Set OpenTrackingFile = ActiveWorkbook
End If

If OpenTrackingFile.ReadOnly = True And WriteFlag = True Then
    Call LogEventAdd("Open with write Permission failed")
End If

cWB.Activate

Call LogEventAdd("End: OpenTrackingFile ... " & TrackingImportFile, , "FT1")

End Function

Private Function ImportMarketTrackingFiles_Msg(ShowMsg As Boolean)
'
' Import from the various BGs / Markets the Enabler Summary files
'

    Dim sR, rC                  As Integer
    Dim rR                      As Integer
    Dim f, c                    As Integer
    Dim iImpCol, iImpHeaderCol  As Integer
    Dim sWB As Workbook, rWB    As Workbook
    Dim sWS                     As Worksheet
    Dim rWS                     As Worksheet
    Dim StartDate               As Date
    Dim Market, EnablerSheet    As String
    Dim MarketCol, BGCol        As String
    Dim TDir, SDir, TFile       As String
    Dim TrackingImportFile      As String
    Dim rngMM                   As Range
    Dim BMC, NextBMC, BMCPath, ActFileName, Rng, SEnablerSheet, sFilter As String
    Dim ScreenUpdate            As Variant
    Dim v                       As Variant
    Dim l, lC                   As Integer
    Dim cLock, CalcMode         As Variant
    Dim cCell                   As Range
    Dim MaxEnablers             As Integer
    Dim Change, LastTimeConfirm As Boolean
    Dim FileNameCol             As String
    Dim Prot                    As Variant
    Dim ImportEnablerFullFormat As Boolean
    Dim sLastCol                As Long
    Dim sCol                    As Long
    Dim rLastCol                As Long
    Dim rCol                    As Long
    Dim mbButton                As Variant
    Dim MsgText                 As String
    Dim FixNeeded               As Boolean
    Dim lmt                     As Date

    On Error Resume Next
    
    If UCase(LoadSetting("TrackingFileType")) = "BMC" Then
        Call MsgBox("Sorry, this function is not available for a markets BMC enabler tracking file.", vbOKOnly)
        Exit Function
    End If
    
    'ensure that the workbook which contains this vba code is active; All named ranges (=variables) are referenced against this.
    ThisWorkbook.Activate
    'save only if the design workbook
    Call SaveWBIfDesignBook(ThisWorkbook)
    
    'sheet name in the main source file where the enabler list is taken from (taken from BMC handshake files)
    SEnablerSheet = Tab_BMCEnablerList       'LoadSetting("EnablerSheetName")
    EnablerSheet = SEnablerSheet            'Same name
    'EnablerSheet = "Import Enablers"
    
    MarketCol = LoadSetting("MarketCol")    'Column holding the Market name in the Tracking File
    BGCol = LoadSetting("BGCol")
    TFile = LoadSetting("TemplateFileName")
    SDir = Trim(LoadSetting("ImportSourceDir"))
    MaxEnablers = LoadSetting("MaxEnablers")
    sFilter = LoadSetting("BMCImportFilter")
    ImportEnablerFullFormat = LoadSetting("ImportEnablerFullFormat")
    
            
    StartDate = DateTime.Now
        
    'Set rWS = Sheets(C_SummaryEnablers)
    'Set sWB = ActiveWorkbook
    'Set sWS = sWB.Sheets(EnablerSheet)
    Set rngMM = Range("MarketMappingExtended")
    'iImpCol = 7
    iImpCol = Range("EMAP_SCOL").Column - Range("EMAP_TCOL").Column + 1
    'iImpHeaderCol = 8
    iImpHeaderCol = Range("EMAP_SHEADER").Column - Range("EMAP_TCOL").Column + 1
    
    Set rWS = ThisWorkbook.Sheets(EnablerSheet)
    Set cCell = Range("StartSourceCol")

    SDir = CleanFileName((SDir))
    
    If ShowMsg Then
        If MsgBox("You are importing enabler tracking files from the following location:" & vbCrLf & vbCrLf & _
              "  '" & SDir & "'" & vbCrLf & vbCrLf & _
              "Do you want to continue?", vbOKCancel) = vbCancel Then
            Exit Function
        End If
    End If
   
    ' get list of market enabler tracking files
    Call SearchFiles((SDir), False)
    Call SaveAndReloadFileList(ShowMsg)      ' we keep it here outside of SearchFiles as SearchFile is used in a different context as well
    
    If FileListImportCounter = 0 Then
        ' terminate if no file found. Don't change the file (in case of an error at least the latest status will be kept)
        If ShowMsg Then
            ''"In case you are connected to the Philips network via VPN (SafeNet), then please connect your computer directly to the Philips network (e.g. in the office)."
            Call MsgBox("No files found in the given location." & vbCrLf & vbCrLf & _
                    "    '" & SDir & "'" & vbCrLf & vbCrLf & _
                    "When clicking OK you are guided to instructions how to enable your computer in seeing all files on the SharePoint again." & vbCrLf & _
                    "The current file remains unchanged." & vbCrLf & vbCrLf & _
                    "Terminating now the 'Enabler Import Tracking' process.", vbOKOnly)
        End If
        
        Call ClearStatusBar
        ThisWorkbook.Sheets(Tab_Instructions).Activate
        ThisWorkbook.Sheets(Tab_Instructions).Select
        Application.Goto reference:=Range("InstructionEnableSPAccess"), Scroll:=True
        Exit Function
    End If
    
    
    ' lets go and load the data as files are presnet
    rWS.Select
    rWS.Activate
    rWS.Range("A1").Select
    
    'Disable auto calculation to improve macro performance
    Application.Calculate
    CalcMode = Application.Calculation
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    
    Prot = UnProtectWS(rWS)     'unprotect worksheet allowing to make the update
        
    '------------------------------------------------------------------------------------------------------
    ' Clean worksheet
    Call CleanUpEnablerSummaryWorksheet(rWS, False)

    FileNameCol = FindNamedColumn(rWS, "PathFileName")  'special column that holds the filename of the data being imported
    
    rR = LastRow(rWS)
    If rR <= 1 Then rR = 2
    
    rC = LastCol(rWS)
    
    Range("LastImportEnablerStatus") = "Started ..."
    
    'Check that the header in receiving enabler summary sheet are identical with the one in the config array.
    'this is just to see if there was a change that has not been captured in the Config Array
    rLastCol = LastCol(rWS)
    For rCol = 1 To rLastCol
        If Trim(cCell.Cells(rCol, 1)) <> "" Then
            If UCase(rWS.Range("A1").Cells(1, rCol)) <> UCase(cCell.Cells(rCol, 2)) Then
                MsgText = "Column '" & num2col((rCol)) & "' in the target worksheet '" & _
                            rWS.Name & _
                            "' has a different name " & vbCrLf & _
                            rWS.Range("A1").Cells(1, rCol) & vbCrLf & _
                            cCell.Cells(rCol, 2) & vbCrLf & "than in the config table. Please check." & vbCrLf & _
                            vbCrLf & _
                            "Continue with checking?"
                Call LogEventAdd(MsgText)
                            
                mbButton = MsgBox(MsgText, vbYesNo)
                Select Case mbButton
                Case vbYes
                Case vbNo
                    Exit For
                Case Else
                    Exit Function
                End Select
            End If
        End If
    Next
    
    Call LogEventClear(ThisWorkbook, Tab_LogEventListSummary)
           
    ' process file after file
    For f = 0 To FileListImportCounter - 1
        On Error Resume Next       ' seems as if sometimes the OPEN call clears that flag.
   
        StatusBarUpdate ("Processing file " & f + 1 & " of " & FileListImportCounter & " (" & FileListImport(f) & ")")
        
        DoEvents
        rWS.Select
        
        Application.ScreenUpdating = False
        
        TrackingImportFile = FileListImport(f)
        Err.Clear
        Set sWB = OpenTrackingFile(TrackingImportFile)
        
        If Not sWB Is Nothing Then
            On Error Resume Next       ' seems as if sometimes the OPEN call clears that flag.
            Err.Clear
            sWB.Activate
            
            Set sWS = sWB.Sheets(SEnablerSheet)
            
            If Err Then
                Call MsgBox("Can't find sheet " & vbCrLf & _
                            "  " & SEnablerSheet & vbCrLf & _
                            "in file" & vbCrLf & _
                            "   " & TrackingImportFile)
                Err.Clear
            Else
                ActiveWindow.WindowState = xlMinimized
                rWS.Select
                rWS.Activate
                ActiveWindow.WindowState = xlMaximized
                
                Call ShowAllDataOnWs(sWS)
            
                Call FixColumnLabelOnEnablerWS(sWS)
    
                'Fix the issue in the opened workbook when the NormalStyle shows all numbers as Date and no longer as General
                Call FixCellNumberFormat(sWB)
                
                'unprotect sheet as we do some temporary editing on it
                Call UnProtectWS(sWS)
                
                'replace pseudo space characters (code: 160 ; chr(160)
                sWS.Cells.Replace What:="|fffd|", Replacement:=" ", LookAt:=xlPart, _
                                    SearchOrder:=xlByColumns, MatchCase:=False, _
                                    SearchFormat:=False, ReplaceFormat:=False
                
                'search each header cell in the target tab in the the source tab and update the mapping table accordingly.
                sLastCol = LastCol(sWS)
                If (sLastCol = 0 Or rLastCol = 0 Or iImpCol < 1) Then
                    Call MsgBox("Ups, haven't found the last column or index in the enabler sheets of the source or target worksheet. Abor import ", vbOKOnly)
                    Exit Function
                End If
                
                Call StatusBarUpdate("1. Check of import columns matching target columns (may take a bit) ...")
                
                Application.Calculation = xlManual
                Application.Calculate

                For rCol = 1 To rLastCol
                    'clear source column label in the config table
                    If rCol Mod 5 = 0 Then
                        Call StatusBarUpdate("1. Check of import columns matching target columns (may take a bit) #" & rCol & "...", lmt)
                    End If
                    If Trim(cCell.Cells(rCol, 1)) <> "" Then
                        If rCol = 19 Then
                            Err.Clear
                        End If
                        'first check if the order of the "source column" in the CONFIG table matches the order in the current enabler worksheet
                        If num2col((rCol)) <> UCase(cCell.Cells(rCol, 1)) Then
                            Call MsgBox("Ups, column labeling in the enabler config table is incorrect.", vbOKCancel)
                            Stop
                            Exit Function
                        End If
                        
                        'clear to assigned import column from the worksheet to import data from
                        cCell.Cells(rCol, iImpCol) = ""
                        
                        
                        For sCol = 1 To sLastCol
                            'TempAddOn
                            Err.Clear
                            'is there a full match of the header in the sending WS as well as in the receiving WS ..
                            If UCase(sWS.Range("A1").Cells(1, sCol)) = UCase(rWS.Range("A1").Cells(1, rCol)) Then
                                If Err = 0 Then
                                    '.. yes it is, copy the column label into the config file.
                                    cCell.Cells(rCol, iImpCol) = num2col((sCol))
                                    Exit For
                                End If
                            End If
                            
                            'if not found under the same label in both files ...
                            If cCell.Cells(rCol, iImpCol) = "" Then
                                '... then check if the source header label is found in the alternative header label configured
                                If (cCell.Cells(rCol, 1) <> "" And cCell.Cells(rCol, iImpHeaderCol) <> "" And _
                                    sWS.Range("A1").Cells(1, sCol) <> "" And _
                                    InStr(1, cCell.Cells(rCol, iImpHeaderCol), sWS.Range("A1").Cells(1, sCol), vbTextCompare) > 0) Then
                                    If Err = 0 Then
                                        cCell.Cells(rCol, iImpCol) = num2col((sCol))
                                        Exit For
                                    End If
                                End If
                            End If
                        Next
                        
                        If cCell.Cells(rCol, iImpCol) = "" Then
                            ' seems we haven't found it. Potentially under a separate name
                            ' there are some fixed value columns in the "hidden" section of the worksheet.
                            '   those may not be copied
                            ' if the column is new, then it may not be in previous years BMC file and can therefore be skipped
                            If InStr(1, cCell.Cells(rCol, iImpHeaderCol), "SKIPALL", vbTextCompare) = 0 Then
                                If InStr(1, cCell.Cells(rCol, iImpHeaderCol), "SKIP" & Range("BMCYear"), vbTextCompare) = 0 Then
                                    Call LogEventAdd("Target column '" & num2col(rWS.Range("A1").Cells(1, rCol).Column) & "'" & _
                                             " [" & rWS.Range("A1").Cells(1, rCol) & "]" & _
                                             " not found in import file (might be a new column not yet in the [old] file format):" & vbCrLf & sWS.Parent.Name)
                                End If
                            End If
                            Err.Clear
                        End If
                    End If
                Next
                
                'Check that from the source worksheet any column with a entered value is covered in the mapping table
                Application.Calculation = xlManual
                Application.Calculate
                
                Call StatusBarUpdate("2. Check of import columns matching target columns (may take a bit) ...")
                
                'check only the visible cells. Others you can ignore as they only contain formulas anyhow
                For sCol = 1 To sWS.Range("FirstColumn2Hide").Column - 1
                    If sWS.Range("A1").Cells(2, sCol).HasFormula Then
                     'no need to search for that column in the mapping table
                     'the cell in the receiving worksheet has a formula
                    Else
                        rC = 1
                        Do While Trim(cCell.Cells(rC, 1)) <> ""
                            'is the sending column somewhere listed in the Import Column of the mapping table.
                            If (cCell.Cells(rC, iImpCol) = num2col((sCol))) Then
                                Exit Do
                            End If
                            rC = rC + 1
                        Loop
                        
                        If Trim(cCell.Cells(rC, 1)) = "" Then
                        ' that column hasn't been found in the mapping table. Potentially the column header name has changed
                            MsgText = "The column '" & num2col((sCol)) & " : " & sWS.Range("A1").Cells(1, sCol) & "'" & vbCrLf & _
                                        "in the source worksheet" & _
                                        "'" & sWS.Name & "'" & vbCrLf & _
                                        "(File: '" & sWS.Parent.Name & "')" & vbCrLf & _
                                        "has not been found in the target worksheet." & vbCrLf & _
                                        vbCrLf & _
                                        "Continue with checking?"
                            Call LogEventAdd(MsgText)
                            mbButton = MsgBox(MsgText, vbYesNo)
                            Select Case mbButton
                            Case vbYes
                            Case vbNo
                                'this stops the checking but continous with the import
                                Exit For
                            Case Else
                                If MsgBox("Do you want to terminate the import of data?", vbYesNo) = vbYes Then
                                    Exit Function
                                End If
                            End Select
                        End If
                    End If
                Next
                
                Call StatusBarUpdate("3. Verify Market names (may take a bit) ...")
                Application.Calculation = xlManual
                Application.Calculate

            '-----------------------------------------------------------------------------------
            'update temporarily the market name in the source file whereever it doesn't match the format
                For sR = 2 To sLastCol
                    Market = Trim(sWS.Range("_E_Market").Cells(sR, 1))
                    Market = Application.WorksheetFunction.VLookup(Market, rngMM, 2, False)
                    If Err = 0 Then
                        If Market <> Trim(sWS.Range("_E_Market").Cells(sR, 1)) Then
                            sWS.Range("_E_Market").Cells(sR, 1) = Market
                        Else
                            Err.Clear
                        End If
                    Else
                        'keep the original name - this situation is a bit unusual and must be handled later manually
                    End If
                Next
            '-----------------------------------------------------------------------------------
                
                Call StatusBarUpdate("4. Re-calculate input source summary worksheet (may take a bit) ...")
                sWS.Calculate
                
                'refresh screen after each file
                Application.ScreenUpdating = True
                Application.ScreenUpdating = False
                Application.Calculation = xlCalculationManual
                
                Call ClearStatusBar
                
                'Now start copying the data
                sR = 2
                'Do Row by row ..
                
                'find the market column in the source worksheet (might differ from target worksheet)
                MarketCol = num2col(sWS.Range("_E_Market").Column)
                If MarketCol = "" Then
                    Call MsgBox("Can't find column 'Market' in source worksheet" & vbCrLf & _
                            "  " & SEnablerSheet & vbCrLf & _
                            "in file" & vbCrLf & _
                            "   " & TrackingImportFile & vbCrLf & _
                            "Abort import of this file.")
                    Err.Clear
                Else
                    sWS.Calculate
                    'as long as a market name is given in a row, import that row (=enabler)
                    Do While sWS.Range(MarketCol & sR).Value <> "" And (MaxEnablers = 0 Or (sR - 1) <= MaxEnablers)      ' the latter part of the criteria check is for testing only during development
                                                
                        lmt = StatusBarUpdate("Processing file " & f + 1 & " of " & FileListImportCounter & " (" & FileListImport(f) & ")" & _
                                        "Line: " & rR - 1 & "/" & sR - 1 & " (" & LastRow(sWB.Sheets(SEnablerSheet)) - 1 & ")", lmt)
                        Application.ScreenUpdating = False
                
                        If (sFilter = "" Or InStr(1, sWS.Range("_E_BMCName").Cells(sR, 1).Value, sFilter, vbTextCompare) > 0) Then
                            
                        'in each row do column by column
                            rC = 1
                            Do While cCell.Cells(rC, 1) <> ""   'Len(sWS.Range(num2col(rC) & 1)) > 0 '
                                'cLock = rWS.Range(cCell.Cells(rC, 1) & 2).Locked    'keep the locked state from the same cell in row 2 of the receiving worksheet
                                
                                'testing only
                                If cCell.Cells(rC, 1) = "P" Then
                                    'sWS.Range(cCell.Cells(rC, iImpCol) & sR).Select
                                    Err.Clear
                                End If
                                '---
                                
                                If Len(cCell.Cells(rC, 1)) > 0 And Len(cCell.Cells(rC, iImpCol)) > 0 Then
                                    If (rWS.Range(cCell.Cells(rC, 1) & 2).HasFormula = True) Then
                                        ' skip where receiving cell has a formula
                                        If (sWS.Range(cCell.Cells(rC, iImpCol) & sR).HasFormula = False) Then
                                            ' Ups - had expected that this has as well a formula
                                            Err.Clear
                                        End If
                                    Else
                                        'rWS.Range(cCell.Cells(rC, 1) & rR).Select
                                        'Trim all strings to remove leading and trailing blanks.
                                        On Error Resume Next
                                        'MsgText = Trim(sWS.Range(cCell.Cells(rC, iImpCol) & sR))
                                        'sWS.Range(cCell.Cells(rC, iImpCol) & sR) = MsgText
                                        'sWS.Range(cCell.Cells(rC, iImpCol) & sR) = Trim(sWS.Range(cCell.Cells(rC, iImpCol) & sR))
                                        If Err Then
                                            Err.Clear
                                        Else
                                            ' detect if a certain cell (row/column) is reached
                                            If sR = 14 And cCell.Cells(rC, 1) >= "Z" Then
                                                Err.Clear
                                            End If
                                            
                                            'Application.ScreenUpdating = True
                                            
                                            If ImportEnablerFullFormat Then
                                                'the full format is 100 times slower, but keeps the formatting of the cells.
                                                sWS.Range(cCell.Cells(rC, iImpCol) & sR).Copy
                                                rWS.Range(cCell.Cells(rC, 1) & rR).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                                                rWS.Range(cCell.Cells(rC, 1) & rR).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                                            Else
                                                'COPY contents ...
                                                Err.Clear
                                                'reset cells from any "garbage" in before ...
                                                rWS.Range(cCell.Cells(rC, 1) & rR).Clear
                                                rWS.Range(cCell.Cells(rC, 1) & rR).NumberFormat = "General"
                                                rWS.Range(cCell.Cells(rC, 1) & rR).NumberFormat = Range("GeneralFormat").NumberFormat
                                                rWS.Range(cCell.Cells(rC, 1) & rR).NumberFormatLocal = Range("GeneralFormat").NumberFormatLocal
                                                        
                                                Err.Clear
                                                'copy content
                                                rWS.Range(cCell.Cells(rC, 1) & rR).NumberFormat = sWS.Range(cCell.Cells(rC, iImpCol) & sR).NumberFormat
                                                rWS.Range(cCell.Cells(rC, 1) & rR).NumberFormatLocal = sWS.Range(cCell.Cells(rC, iImpCol) & sR).NumberFormatLocal
                                                rWS.Range(cCell.Cells(rC, 1) & rR) = sWS.Range(cCell.Cells(rC, iImpCol) & sR)
                                                
                                                'if content doesn#t match, then put some default value in to make user aware of a copy error
                                                If (rWS.Range(cCell.Cells(rC, 1) & rR) <> sWS.Range(cCell.Cells(rC, iImpCol) & sR)) Then
                                                    'If Err = 6 Or Err = 1024 Then
                                                        Err.Clear
                                                        rWS.Range(cCell.Cells(rC, 1) & rR).Clear
                                                        rWS.Range(cCell.Cells(rC, 1) & rR).NumberFormat = "General"
                                                        rWS.Range(cCell.Cells(rC, 1) & rR).NumberFormat = Range("GeneralFormat").NumberFormat
                                                        rWS.Range(cCell.Cells(rC, 1) & rR).NumberFormatLocal = Range("GeneralFormat").NumberFormatLocal
                                                        
                                                        If InStr(1, sWS.Range(cCell.Cells(rC, iImpCol) & sR).Text, "#######", vbTextCompare) Then
                                                            rWS.Range(cCell.Cells(rC, 1) & rR) = "'#N/A: Date Value"
                                                        Else
                                                            rWS.Range(cCell.Cells(rC, 1) & rR) = "'#N/A: Check Value : " & sWS.Range(cCell.Cells(rC, iImpCol) & sR).Text
                                                        End If
                                                        Err.Clear
                                                    'End If
                                                    Err.Clear
                                                End If
                                           '
                                                '.. then the number formatting (e.g. to keep the '%'
                                                rWS.Range(cCell.Cells(rC, 1) & rR).NumberFormat = sWS.Range(cCell.Cells(rC, iImpCol) & sR).NumberFormat
                                                rWS.Range(cCell.Cells(rC, 1) & rR).NumberFormatLocal = sWS.Range(cCell.Cells(rC, iImpCol) & sR).NumberFormatLocal
                                                'numbers may be stored as text: the below fixes this and converts them to numbers.
                                                If IsNumeric(rWS.Range(cCell.Cells(rC, 1) & rR)) And rWS.Range(cCell.Cells(rC, 1) & rR) <> "" Then
                                                    'rWS.Range(cCell.Cells(rC, 1) & rR) = rWS.Range(cCell.Cells(rC, 1) & rR) * 1
                                                Else
                                                    If IsNumeric(rWS.Range(cCell.Cells(rC, 1) & rR) * 1) Then
                                                        Err.Clear
                                                    End If
                                                    'Trim all strings to remove leading and trailing blanks.
                                                    rWS.Range(cCell.Cells(rC, 1) & rR) = Trim(rWS.Range(cCell.Cells(rC, 1) & rR))
                                                End If
                                            End If
                                            
                                            If (Trim(rWS.Range(cCell.Cells(rC, 1) & rR)) <> Trim(sWS.Range(cCell.Cells(rC, iImpCol) & sR))) Then
                                                Call LogEventAdd(sWS.Name & " - source cell: " & cCell.Cells(rC, iImpCol) & sR & vbCrLf & ": '" & _
                                                                sWS.Range(cCell.Cells(rC, iImpCol) & sR) & "'" & vbCrLf & _
                                                                "#Target: '" & cCell.Cells(rC, 1) & rR & ": '" & rWS.Range(cCell.Cells(rC, 1) & rR) & "'")
                                                Err.Clear
                                            End If
                                           'testing only
                                            If cCell.Cells(rC, 1) = "U" Then
                                                Err.Clear
                                            End If
                                            '----
                                            
                                            l = ThisWorkbook.FullName
                                        
                                            'mark row being found
                                            cCell.Cells(rC, 3).Font.Italic = True
        
                                        End If
                                    End If
                                Else
                                    'mark row not being found
                                    cCell.Cells(rC, 3).Font.Italic = False
                                End If
                             
                                'rWS.Range(cCell.Cells(rC, 1) & rR).Locked = cLock
                                Err.Clear
                                rC = rC + 1
                            Loop
                            
                            Call UpdateColumnField(rWS, rR, "_E_PathFileName", sWB.FullName)
                            Call UpdateColumnField(rWS, rR, "_E_FileName", sWB.Name)
                            Call UpdateColumnField(rWS, rR, "_E_SheetName", sWS.Name)
                            Call UpdateColumnField(rWS, rR, "_E_LastSaved", sWS.Parent.Worksheets(Tab_Settings).Range("LastSaved"))
            
                            'If FileNameCol <> "" Then
                            '    rWS.Range(FileNameCol & rR) = sWB.FullName
                            'End If
                            
                            Application.ScreenUpdating = True
                            Application.ScreenUpdating = False
                                    
                            rR = rR + 1
                        Else
                            Err.Clear
                        End If
                          
                        'next row to read
                        sR = sR + 1
    
                    Loop
                End If
                ' skip cells where the target cell contains a formula
            End If
            
            Application.Calculate
        End If
        
        Call LogEventImport(sWB)

        If Not sWB Is Nothing Then
            Application.CutCopyMode = False     'ClearClipboard
            sWB.Close SaveChanges:=False
            Set sWB = Nothing
        End If
        
        Err.Clear

    Next
    
    On Error Resume Next       ' seems as if sometimes the OPEN call clears that flag.
    
    ' expand formula from first cell in the column to all other used cells in that column.
    Call CheckAndFixFormula(rWS)
    
    Application.Calculate
           
    Call StatusBarUpdate("Format columns ...")
                    
    '--------------------
    ' Format the columns
    '--------------------
    
    'TempAddOn1
    If (FixNeeded <> FixNormalStyle(ThisWorkbook) Or FixNeeded = True) Then
        Call LogEventAdd("Cell Formatting error indicated after importing enabler files")
    End If
    
    rWS.Activate
    rWS.Select
    
    'Set conditional formatting
    Call Prepare_CF_MgmtStatus_WS(rWS)
    
    'set Data Validation selections
    Call Expand_DV_WS(rWS)
    
    ' -- Text Formatting of columns according to the configuration.
    Call FormatDefaultCells_WS(rWS)
    
    ' auto fit all rows ...
    rWS.Cells.EntireRow.AutoFit
    
    '... then readjust specific rows.
    Call FixCellNumberFormat(ThisWorkbook)

    Call ExtractEnabler2OwnerMap(ThisWorkbook, ThisWorkbook)
    
    Call RefreshDashboardMandB      'including refresh of all pivots
    
    Application.Calculation = CalcMode
    Application.ScreenUpdating = True
    
    'Re-apply the filters
    Call ApplyFilterToEnablerList_EnablerID_WS(rWS)

    Call Reset_SetCellLock
    
    Call ProtectWS(rWS, (Prot))      're-protect worksheet as it was before calling the procedure

    rWS.Activate
    rWS.Select
    
    
    Range("LastImportEnablerStatus") = StartDate
    
    ActiveWorkbook.Save
    
    Call StatusBarUpdate("Done")
    
    rR = LastRow(rWS)
    MsgText = f & " Files with " & rR - 1 & " Enablers have been imported." & vbCrLf & vbCrLf & _
                "Started at: " & StartDate & vbCrLf & _
                "Ended at:   " & DateTime.Now
    Call LogEventAdd(MsgText)
    If ShowMsg Then
        Call MsgBox(MsgText, vbOKOnly)
    End If
    
    Call StatusBarUpdate("")
    
End Function

Function UpdateColumnField(rWS As Worksheet, tRow As Integer, ColName As String, ColContent As String)

Dim ColLabel As String

On Error Resume Next

ColLabel = num2col(rWS.Range(ColName).Column)
If Err = 0 Then
    If ColLabel <> "" And tRow > 0 Then
        rWS.Range(ColLabel & tRow) = ColContent
    End If
End If

End Function

Attribute VB_Name = "a1_RefreshSummaryFilesContent"
Option Explicit

Sub SupportFct_RefreshSummaryFiles()

' main function to set the cell lock including toogling EditBMC mode
Dim rWS As Worksheet
Dim Prot, EmptyRow As Boolean
Dim pw As String
Dim r, c, lRow, lCol As Integer
Dim ScreenUpdate As Variant
Dim AddRows As Integer
Dim FileType As String
Dim ShowMsg As Boolean

FileType = UCase(LoadSetting("TrackingFileType"))
ShowMsg = True

Set rWS = ActiveWorkbook.Sheets(Tab_BMCEnablerList)

'LockMode = "E"

'when not in edit mode and a default password given, then request password
If FileType <> "BMC" Then
    If (UserPasswordEdit = "" And GetMyPasswordEdit <> "") Then
        If UserPasswordEdit = "" Then
            pw = InputBox("You are about to refresh the BG and Market Summary files." & vbCrLf & vbCrLf & "Please enter password:", "Import enabler data", "Enter password")
            'pw = "Do you want to edit the BMC enablers in '" & rWS & "'" & vbCrLf & vbCrLf & "Please enter password:"
        Else
            pw = UserPasswordEdit
        End If
    Else
        pw = UserPasswordEdit
    End If
    
    If pw = GetMyPasswordEdit Then
        Call RunImportInAllSummaryFiles
        UserPasswordEdit = pw
    Else
        If ShowMsg Then Call MsgBox("Invalid password.", vbExclamation)
    End If
Else
    If ShowMsg Then Call MsgBox("That function is not availble in your enabler file. Sorry.", vbExclamation)
End If

End Sub

Sub RunImportInAllSummaryFiles()
    Dim ShowMsg As Boolean
    ShowMsg = True
    Call RunImportInBGSummaryFiles(ShowMsg)
End Sub

Private Function RunImportInBGSummaryFiles(Optional ShowMsg As Boolean = True)

' Runs the data import procedure in all BG Summary Files
    Dim Market, EnablerSheet    As String
    Dim MarketCol, BGCol        As String
    Dim TDir, SDir, TFile, RunMacro As String
    Dim TrackingImportFile      As String
    Dim BMC, NextBMC, BMCPath, ActFileName, Rng, SEnablerSheet, sFilter As String
    Dim InclFilter, ExclFilter, ExclPath As String
    Dim ScreenUpdate            As Variant
    Dim StartDate               As Variant
    Dim CalcMode                As Variant
    Dim f                       As Integer
    Dim ThisWB, TargetWB        As Workbook
    Dim MsgText                 As String
    
    'ShowMsg = True
    Set ThisWB = ThisWorkbook
    
    MarketCol = LoadSetting("MarketCol")    'Column holding the Market name in the Tracking File
    BGCol = LoadSetting("BGCol")
    TFile = LoadSetting("TemplateFileName")
    SDir = Trim(LoadSetting("ImportSourceDirAlternative"))
    If SDir = "" Then
        SDir = Trim(LoadSetting("ImportSourceDir"))
    End If
    
    InclFilter = LoadSetting("Filter_FileName_Incl")
    ExclFilter = LoadSetting("Filter_FileName_Excl")
    ExclPath = LoadSetting("Filter_PathName_Excl")
    Call UpdateSetting("Filter_FileName_Incl", LoadSetting("Filter_FileName_Incl_Summary"))
    Call UpdateSetting("Filter_FileName_Excl", LoadSetting("Filter_FileName_Excl_Summary"))
    Call UpdateSetting("Filter_PathName_Excl", "")
    
    sFilter = LoadSetting("BMCImportFilter")
    
    'On Error Resume Next
            
    SDir = InputBox("Run Summary files in directory:", , SDir)
    
    StartDate = DateTime.Now
        
    'Set rWS = Sheets(C_SummaryEnablers)
    'Set sWB = ActiveWorkbook
    'Set sWS = sWB.Sheets(EnablerSheet)
    
    SDir = CleanFileName((SDir))
    
    If ShowMsg Then
        If MsgBox("You are locking for BG and Market Enabler Tracking Summary files from the following location:" & vbCrLf & vbCrLf & _
                  "  '" & SDir & "'" & vbCrLf & vbCrLf & _
                  "Do you want to continue?", vbOKCancel) = vbCancel Then
            Exit Function
        End If
    End If
   
    ' get list of market enabler tracking files
    Call SearchFiles((SDir), False)
    
    If FileListImportCounter = 0 Then
        'set new import location only if a file has been found
        Call UpdateSetting("ImportSourceDirAlternative", (SDir))
    
        ' terminate if no file found. Don't change the file (in case of an error at least the latest status will be kept)
        If ShowMsg Then
            Call MsgBox("No files found in the given location." & vbCrLf & vbCrLf & _
                    "    '" & SDir & "'" & vbCrLf & vbCrLf & _
                    "In case you are connected to the Philips network via VPN (SafeNet), then please connect your computer directly to the Philips network (e.g. in the office)." & vbCrLf & _
                    "The current file remains unchanged." & vbCrLf & vbCrLf & _
                    "Terminating now the 'Enabler Import Tracking' process.", vbOKOnly)
        End If
        Call ClearStatusBar
        Exit Function
    End If
    
    ' lets go and load the data as files are presnet
    
    'Disable auto calculation to improve macro performance
    Application.Calculate
    CalcMode = Application.Calculation
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
    
    Call LogEventAdd("Start summary files refresh." & vbCrLf & _
                                 "# of files: " & FileListImportCounter)
    ' process file after file
    For f = 0 To FileListImportCounter - 1
    
        MsgText = "Processing file " & f + 1 & " of " & FileListImportCounter & " (" & FileListImport(f) & ")"
        Call StatusBarUpdate(MsgText)
        Call LogEventAdd(MsgText)
        
        DoEvents
        'rWS.Select
        
        Application.ScreenUpdating = False
        
        TrackingImportFile = FileListImport(f)
        Err.Clear
        
        'Workbooks.Open FileName:=TrackingImportFile, UpdateLinks:=False, ReadOnly:=False
        'Set TargetWB = ActiveWorkbook
        
        Set TargetWB = OpenTrackingFile(TrackingImportFile, True)
        If Not TargetWB Is Nothing Then
            'On Error Resume Next       ' seems as if sometimes the OPEN call clears that flag.
            If TargetWB.ReadOnly = True Then
                'Ups the file is still read only. not what we need.
                ' it is kept open by intention to check why
                Call LogEventAdd("FIle opened in read only mode. Terminating summary refresh." & vbCrLf & _
                                 TrackingImportFile & vbCrLf & _
                                 Err.Description)

                'Application.DisplayAlerts = False
                'TargetWB.SaveAs TargetWB.FullName
                'Application.DisplayAlerts = True
            Else
                Err.Clear
                RunMacro = "'" & TargetWB.Name & "'!ImportMarketTrackingFiles_NoMsg"
                Call Application.Run(RunMacro)  ', myArg)
                
                If Err Then
                    MsgBox (Err.Description)
                    Call LogEventAdd(Err.Description)
                End If
                Err.Clear
                
                Application.DisplayAlerts = False
                
                'ensure that the "Instruction Tab" is shown when the file is opened next time
                Call SetDefaultInstructions(TargetWB)

                TargetWB.Save
                If Err Then
                    Call LogEventAdd("Failed to save refreshed file:" & vbCrLf & _
                                        FileListImport(f) & vbCrLf & _
                                        Err.Description)
                End If
                
                Application.CutCopyMode = False     'ClearClipboard
                TargetWB.Saved = True
                TargetWB.Close
                Set TargetWB = Nothing
                Application.DisplayAlerts = True
            End If
        End If
    Next f
    
    'Restore filter settings
    Call UpdateSetting("Filter_FileName_Incl", (InclFilter))
    Call UpdateSetting("Filter_FileName_Excl", (ExclFilter))
    Call UpdateSetting("Filter_PathName_Excl", (ExclPath))
    
    MsgText = f & " Files run." & vbCrLf & vbCrLf & _
              "Started at: " & StartDate & vbCrLf & _
              "Ended at:   " & DateTime.Now
    Call LogEventAdd("Refresh summary file completed.")
   
    If ShowMsg Then
        Call MsgBox(MsgText, vbOKOnly)
    End If
    
    Call StatusBarUpdate("")
    
End Function

Sub Test_SetEnablerSummaryTabDefaults()

Dim rWS As Worksheet

Set rWS = ThisWorkbook.Worksheets(Tab_BMCEnablerList)

Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
    
If Err = 0 Then
    rWS.Activate
    rWS.Select

    ' expand formula from first cell in the column to all other used cells in that column.
    Call CheckAndFixFormula(rWS)
    
    Application.Calculate
           
    Call StatusBarUpdate("Format columns ...")
                    
    '--------------------
    ' Format the columns
    '--------------------
    
    rWS.Activate
    rWS.Select
    
    'Set conditional formatting
    Call Prepare_CF_MgmtStatus_WS(rWS)
    
    'set Data Validation selections
    Call Expand_DV_WS(rWS)
    
    ' -- Text Formatting of columns according to the configuration.
    Call FormatDefaultCells_WS(rWS)
    
    ' auto fit all rows ...
    rWS.Cells.EntireRow.AutoFit
    
    '... then readjust specific rows.
    Call FixCellNumberFormat(ThisWorkbook)

    Call RefreshDashboardMandB      'including refresh of all pivots
    
    'Re-apply the filters
    Call ApplyFilterToEnablerList_EnablerID_WS(rWS)

    Call Reset_SetCellLock
    
    rWS.Activate
    rWS.Select
End If

Application.Calculation = xlCalculationAutomatic
Application.ScreenUpdating = True

End Sub
Attribute VB_Name = "a2_ImportOnePagerFiles"
Option Explicit

Const Tab_RisksAndAssumptions = "BMC Risks and Assumptions"
Const Tab_AOP = "AOP"

'colum labels in the Enabler List tab
Public C_PathFileName As String
Public C_SheetName As String
Public C_Market As String
Public C_Business As String
Public C_CSRelated As String
Public C_OwnerOrg As String
Public C_InitiativeNo As String
Public C_EnablerNo As String
Public C_KeyEnablingActions As String
Public C_OwnerName As String
Public C_EnablingKPI As String
Public C_Top3 As String
Public C_FY15 As String
Public C_FY16 As String
Public C_Q1_16 As String
Public C_Q2_16 As String
Public C_Q3_16 As String
Public C_Q4_16 As String
Public C_FileDateTime As String
Public C_BGLeaderName As String
Public C_MarketClusterLeaderName As String
Public C_ClusterName As String
Public C_BMCName As String
Public C_BMCRole As String

Public NoOfCancelEnablers As Integer

Public C_InitiativeName As String
Public C_InitiativeDescription As String
Public C_InitiativeObjective As String
Public C_InitiativeLaggingKPI As String
Public C_InitiativeKPIThisYear As String
Public C_InitiativeKPIBMCYear As String
Public C_InitiativeKPIAfterYear As String
Public C_DuplicateEnabler As String

Public Const MaxInitiative = 6
Public Const MaxMsgLength = 850    ' MsgBox can handel up to 1000 characters

Private Sub test_Format()
 MsgBox Range("G2").NumberFormat
End Sub

Private Sub CreateOnePagerImportSummaryFiles()

' creates the BG specific BMC OnePager summary files

    Dim StartDate   As Date
    Dim m, b        As Integer
    Dim BG          As String
    Dim ValidBG     As Boolean
    Dim ActBMCYear  As Integer
    
    On Error Resume Next
    
    'select a specific BG only or do it for all
    Do Until ValidBG
        Err.Clear
        BG = InputBox("You are about to create BG specific 'BMC OnePager Import summary' files with default seetings." & vbCrLf & _
              "Placed into the subdirectory: '" & Trim(LoadSetting("TargetDir")) & "'" & vbCrLf & _
              "Ensure that you have create the 'BMC Tracking Temlate' file first." & vbCrLf & vbCrLf & _
              "Do you want to do this?" & vbCrLf & _
              vbCrLf & _
              "Enter BG name if you want to do it for a specific BG only. Otherwise keep 'All'." & vbCrLf & _
              "Supported BG names are: " & GetListOfBGNames, "Select BG", "All")
        If BG = "" Then
            BG = ""
            Exit Sub
        ElseIf BG = "All" Then
            BG = ""
            ValidBG = True
        ElseIf BG = "HS" Or BG = "PH" Then
            ValidBG = True
        Else
            If Application.WorksheetFunction.VLookup(BG, Range("BG"), 1, False) <> "" Then
                If Err = 0 Then
                    ValidBG = True
                End If
            End If
        End If
    
    Loop
    
    StartDate = DateTime.Now
    
    ActBMCYear = Year(Now()) + 1
    b = CreateBGSummaryFiles(False, True, BG, ActBMCYear)
    'm = CreateMarketSummaryFiles(False)
    
    Call MsgBox(b & " BG " & m & " OnePager Import Summary files have been re-created." & vbCrLf & vbCrLf & _
            "Started at: " & StartDate & vbCrLf & _
            "Ended at:   " & DateTime.Now & vbCrLf & _
            "BMC Year:   " & ActBMCYear, _
            vbOKOnly)

End Sub

Sub ImportOnePagerSummaryFiles()
' this is the main routine being called when the "OnePager Import" button is pressed
' should not be called from anywhere else
'Call ImportOnePagerSummaryFiles2016
Dim FileType As String

FileType = UCase(LoadSetting("TrackingFileType"))

Select Case FileType
    Case "BG-OP"
    ' continue with import without further checking
    
    Case "BMC", "TEMPLATE", "OP"
        Call MsgBox("This is not a enabler summary file. File import aborted.", vbCritical)
        Exit Sub
        
    Case Else   ' here under falls ,"BG", "HS", "PH", "MARKET" and ''
        If MsgBox("You want to import BMC OnePager files but the file type is currently '" & FileType & "' (Should be 'BG-OP')" & vbCrLf & _
                  vbCrLf & _
                  "Do you want to abort the OnePager Import?", vbYesNo) <> vbNo Then
            Exit Sub
        End If
End Select

Call ImportOnePagerFiles2018

End Sub

Private Function ImportOnePagerFiles2018()
'
' Import from the various BGs the OnePager Summary files
'

    Dim sR, rR, rC, sC, f, c, r, i As Integer
    Dim sWB As Workbook, rWB    As Workbook
    
    Dim sWS                     As Worksheet
    Dim rWS                     As Worksheet
    Dim rWSInitiative           As Worksheet
    Dim rWSBMCSummary           As Worksheet
    
    Dim StartDate               As Date
    Dim Market, EnablerSheet, MarketCol, BGCol As String
    Dim TDir, SDirString, TFile As String
    Dim SDir                    As String
    Dim BMCOnePagerFile         As String
    Dim rngMM                   As Range
    Dim BMC, NextBMC, BMCPath, ActFileName, Rng, sFilter As String
    Dim ScreenUpdate            As Variant
    Dim v                       As Variant
    Dim l, lC                   As Integer
    Dim cOP, cFOP, cI, cFI, cE  As Integer
    Dim g                       As Integer
    Dim cEPerOnePager           As Integer
    Dim cLock, CalcMode         As Variant
    Dim MaxEnablers             As Integer
    Dim Change                  As Boolean
    Dim InvalidFileName         As String
    Dim NoEnablerFileName       As String
    Dim MsgText                 As String
    Dim OpenFailedMessage       As String
    Dim OpenFailedCount         As Integer
    Dim sNoOfCanceledEnablers   As String
    Dim OnePagerType            As Integer
    Dim cOP_HS, cOP_PH          As Integer
    Dim wsInstruction           As Worksheet
    Dim ProtE                   As Boolean
    Dim ProtI                   As Boolean
    Dim ProtT                   As Boolean
    
    Dim ShowMsg As Boolean
    
    '-------------------------------------------------------------------------
    On Error Resume Next

    ShowMsg = True
    
    'ThisWorkbook.Activate
    
    ActiveWorkbook.Save
    
    'Stick to the current Worksheet
    
    If IsBMCFile(True) = False Then Exit Function
    
    Application.Calculate
    
    EnablerSheet = Tab_BMCEnablerList       'LoadSetting("EnablerSheetName")
    MarketCol = LoadSetting("MarketCol")
    BGCol = LoadSetting("BGCol")
    TFile = LoadSetting("TemplateFileName")
    SDir = Trim(LoadSetting("OnePagerBGSummary"))
    If SDir = "" Then SDir = "."
    'SDir = CleanFileName((SDir))
    
    MaxEnablers = LoadSetting("MaxEnablers")
    sFilter = LoadSetting("BMCExportFilter")
    NoOfCancelEnablers = 0
    
    StartDate = DateTime.Now
    
    'Disable auto calculation to improve macro performance
    Application.Calculate
    CalcMode = Application.Calculation
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
        
    'Set rWS = Sheets(C_SummaryEnablers)
    Set rWB = ActiveWorkbook
    
    Set rngMM = Range("MarketMappingExtended")
    
    Call GetFileFilterSettings
    
    If ShowMsg Then
        If SDir = LocalFile Then
            SDirString = "This Workbook"
        Else
            SDirString = SDir
        End If
        
        SDirString = Trim(InputBox("You are importing BMC OnePager files from the following location:" & vbCrLf & _
                              vbCrLf & _
                              "Note: '.' indicates relative to the directory location of this Excel file. " & _
                              "E.g. '.\BMC DACH' takes all files in the relative local directory 'BMC DACH'." & vbCrLf & _
                              vbCrLf & _
                              GetFileFilterMessage, _
                              "Import BMC OnePager files (HS & PH format)", SDirString))
        If SDirString = "" Then
            Call MsgBox("OnePager import cancelled.", vbInformation)
            Exit Function
        Else
            If SDirString <> "This Workbook" Then
                SDir = SDirString
                'SDir = Trim(LoadSetting("OnePagerBGSummary"))
                Call UpdateSetting("OnePagerBGSummary", SDir)
            End If
        End If
    End If
    SDir = CleanFileName((SDir))
    
    Call LogEventAdd("Start: Import BMC OnePager files from '" & SDir & "'")
    
    StartDate = DateTime.Now

    Call InitColumVariables

    ' get list of OnePager enabler tracking files
    FileListImportCounter = 0
    Call SearchFiles((SDir), False)
    Call SaveAndReloadFileList      ' we keep it here outside of SearchFiles as SearchFile is used in a different context as well
    
    If FileListImportCounter = 0 Then
        ' terminate if no file found. Don't change the file (in case of an error at least the latest status will be kept)
        If ShowMsg Then
            ''"In case you are connected to the Philips network via VPN (SafeNet), then please connect your computer directly to the Philips network (e.g. in the office)."
            Call MsgBox("No files found in the given location." & vbCrLf & vbCrLf & _
                    "    '" & SDir & "'" & vbCrLf & vbCrLf & _
                    "When clicking OK you are guided to instructions how to enable your computer in seeing all files on the SharePoint again." & vbCrLf & _
                    "The current file remains unchanged." & vbCrLf & vbCrLf & _
                    "Terminating now the 'OnePager file import' process.", vbOKOnly)
        End If
        
        Call ClearStatusBar
        On Error Resume Next
        Set wsInstruction = SetDefaultInstructions(ThisWorkbook, "BG-OP")
        wsInstruction.Activate
        wsInstruction.Select
        Application.Goto reference:=Range("InstructionEnableSPAccess"), Scroll:=True
        
        Exit Function
    End If

    Call WSGetStatus(rWB)
    
    '------------------------------------------------------------------------------------------------------
    ' Clean all kind of Summary Worksheets
    g = 1
    Do While Trim(Range("ImportOPGenericList").Cells(g, 1)) <> ""
        Err.Clear
        Set rWS = rWB.Sheets(Range("ImportOPGenericList").Cells(g, 1) & "")
        If Err = 0 Then Call ClearSummaryTab(rWS)
        g = g + 1
    Loop
    '------------------------------------------------------------------------------------------------------
    ' Prepare Enabler receiving worksheet  - show all data & clean worksheet
    Set rWS = rWB.Sheets(EnablerSheet)
    ProtE = UnProtectWS(rWS)
    Call ClearSummaryTab(rWS)
    
    '------------------------------------------------------------------------------------------------------
    ' Prepare Initiative receiving worksheet
    Set rWSInitiative = rWB.Sheets(Tab_BMCInitiativeList)
    ProtI = UnProtectWS(rWSInitiative)
    Call ClearSummaryTab(rWSInitiative)
    
    '------------------------------------------------------------------------------------------------------
    ' Prepare BMC totals receiving worksheet
    Set rWSBMCSummary = rWB.Sheets(Tab_BMCTotalsList)
    ProtT = UnProtectWS(rWSBMCSummary)
    Call ClearSummaryTab(rWSBMCSummary)
    
    
    Call LogEventClear(ThisWorkbook, Tab_LogEventListSummary)
    
    rR = 2
    
    rWS.Select
    rWS.Activate
    
    ' mow import all files
    For f = 0 To FileListImportCounter - 1
    
        Call StatusBarUpdate("Processing file " & f + 1 & " of " & FileListImportCounter & " (" & FileListImport(f) & ")")
        
        If (LogEventAdd("Processing file " & f + 1 & " of " & FileListImportCounter & " (" & FileListImport(f) & ")", _
                        , "FSOPS1") = True) Then
            rWB.Save
        End If
        
        'DoEvents
        rWB.Activate
        rWS.Select
        Application.ScreenUpdating = False

        BMCOnePagerFile = FileListImport(f)
        
        Err.Clear
        
        Set sWB = ActiveWorkbook
        
        If BMCOnePagerFile <> LocalFile And BMCOnePagerFile <> rWB.Name Then
            
            Call LogEventAdd("Start: ImportOnePagerFiles2018 ... " & BMCOnePagerFile, , "FT1")
            Workbooks.Open FileName:=BMCOnePagerFile, UpdateLinks:=False, ReadOnly:=True
            Call LogEventAdd("End: ImportOnePagerFiles2018 ... " & BMCOnePagerFile & vbCrLf & Err.Description, , "FT1")
            
            'file has been opended if the actual XLS file name is including the requested file open.
            If InStr(1, BMCOnePagerFile, ActiveWorkbook.Name) > 0 Then
                Set sWB = ActiveWorkbook
                Err.Clear
            Else
                OpenFailedCount = OpenFailedCount + 1
                OpenFailedMessage = OpenFailedMessage & vbCrLf & _
                                    "File: " & BMCOnePagerFile & vbCrLf & _
                                    "Error: " & Err.Description & vbCrLf
                Set sWS = Nothing
            End If
        End If
        
        If Application.Calculation <> xlCalculationManual Then
            Application.Calculation = xlCalculationManual
        End If

        Application.ScreenUpdating = True
        Application.ScreenUpdating = False
        
        If Err <> 0 Or sWB Is Nothing Then
            If MsgBox("Failed to open a OnePager file. Do you want to continue with the next file? " & OpenFailedMessage, vbYesNo) <> vbYes Then
                'set trigger to break the For loop
                f = FileListImportCounter
            End If
            
        Else
            
            sWB.Activate
            On Error Resume Next
            
            'process each enabler on that OnePager sheet
            cFOP = 0
            For Each sWS In sWB.Sheets
                v = sWS.Name
                
                OnePagerType = OP_IsActiveOnePager(sWS, True) 'Check must return if the file is a HS or PH OnePager
                
                If (OnePagerType = OPFormat_HS) Then
                    'ActiveWindow.WindowState = xlMinimized
                    ActiveWindow.WindowState = xlMaximized
                    cOP_HS = cOP_HS + 1

                    rWSBMCSummary.Select
                    rWSBMCSummary.Activate
                    
                    '1. Transfer Header data
                    Call TransferBMCTotals(sWS, rWS, rWSInitiative, rWSBMCSummary)
                    g = 1
                    Do While Trim(Range("ImportOPGenericList").Cells(g, 1)) <> ""
                        If Err = 0 Then
                            Call TransferBMCGeneric(sWS, rWS, _
                                                Range("ImportOPGenericList").Cells(g, 1), _
                                                Range("ImportOPGenericList").Cells(g, 2))
                            g = g + 1
                        Else
                            Exit Do
                        End If
                    Loop
    
                                        
                    '2. Transfer Aspiration (financial data)
                    '3. Transfer Other aspiration
                    '4. Transfer Comments
                    
                    '5. Transfer Initiatives & Enablers
                    rWS.Select
                    rWS.Activate
                    cFI = 0
                    cE = 0
                    cEPerOnePager = 0
                    For i = 1 To MaxInitiative
                        If Application.Calculation <> xlCalculationManual Then
                            Err.Clear
                        End If
                        If i = 5 Then
                            Err.Clear
                        End If
                        cE = TransferInitiativ(sWS, rWS, rWSInitiative, rWSBMCSummary, i)
                        If cE > 0 Then
                            'count number of initiatives
                            cFI = cFI + 1
                        'Any ws that has no enabler included
                        End If
                        
                        cEPerOnePager = cEPerOnePager + cE
                        'count number of Enablers
                        rR = rR + cE
                    Next i
                    
                    If cEPerOnePager = 0 Then
                        NoEnablerFileName = AddString(NoEnablerFileName, BMCOnePagerFile & " / " & sWS.Name)
                        Err.Clear
                    End If
                    
                    'count number of OnePager tabs and total Initiatives
                    cI = cI + cFI
                    cOP = cOP + 1
                    cFOP = cFOP + 1
                    
                ElseIf OnePagerType = OPFormat_PH Then
                
                    'ActiveWindow.WindowState = xlMinimized
                    ActiveWindow.WindowState = xlMaximized
                    cOP_PH = cOP_PH + 1

                    'rWSBMCSummary.Select
                    'rWSBMCSummary.Activate
                    
                    '1. Transfer Header data
                    'Call PH_TransferBMCTotals(sWS, rWS, rWSInitiative, rWSBMCSummary)
                                        
                    '2. Transfer Aspiration (financial data)
                    '3. Transfer Other aspiration
                    '4. Transfer Comments
                    
                    '5. Transfer Initiatives & Enablers
                    rWS.Select
                    rWS.Activate
                    cFI = 0
                    
                    'For i = 1 To MaxInitiative
                        cE = 0
                        cE = PH_TransferAllEnablers(sWS, rWS, rWSInitiative, rWSBMCSummary, i)
                        If cE > 0 Then
                            'count number of initiatives
                            'cFI = cFI + 1
                            cFOP = cFOP + 1
                            cOP = cOP + 1
                        Else
                            NoEnablerFileName = AddString(NoEnablerFileName, BMCOnePagerFile & " / " & sWS.Name)
                            Err.Clear
                        End If
                    
                        'sum-up number of Enablers
                        rR = rR + cE
                    'Next i
                    
                    'count number of OnePager tabs and total Initiatives
                    cI = cI + cFI
                    
                    If cFI = 0 Or cOP > cI Then
                        Err.Clear
                    End If
                End If
            Next sWS
            
            If cFOP = 0 Then
                InvalidFileName = AddString(InvalidFileName, BMCOnePagerFile)
                Err.Clear
            End If
            
            Application.Calculate
            Call LogEventImport(sWB)

            'close the file only if it is not the current workbook
            If BMCOnePagerFile <> LocalFile Then
                Application.CutCopyMode = False     'ClearClipboard
                sWB.Close SaveChanges:=False
            End If
        End If
        
        'testing only
        If f Mod 20 = 19 Then
            Err.Clear
        End If
        
        'ActiveWorkbook.Save    '=> see beginning of FOR loop: rwb.save
        Application.ScreenUpdating = True
            
    Next
 
OP_Skip:

    Application.Calculate

    Application.ScreenUpdating = False

    ' expand formula from first cell in the column to all other used cells in that column.
    Call CheckAndFixFormula(rWS)
    Call CheckAndFixFormula(rWSBMCSummary)
    Call CheckAndFixFormulaAll(ThisWorkbook)
    
    Application.Calculate
           
Format1:

    Call StatusBarUpdate("Format columns ...")
                    
    '--------------------
    ' Format the columns
    '--------------------
    Call FormatEnablerSummaryColumns(rWS)
    Call FormatEnablerSummaryColumns(rWSBMCSummary, Range("BMCTotals_FormatMap_SCol"))
    Call FormatEnablerSummaryColumnsAll(ThisWorkbook)
    'Call FormatEnablerSummaryColumns(Worksheets(Range("ImportOPGenericList").Cells(1, 1)), Range("BMCRisksAndAmbitions_FormatMap_SCol"))
    'Call FormatEnablerSummaryColumns(Worksheets(Range("ImportOPGenericList").Cells(2, 1)), Range("BMCOtherAspirations_FormatMap_SCol"))

    
'BMCTotals_FormatMap_SCol

    'Set conditional Formatting
    Call Prepare_CF_MgmtStatus_WS(rWS)
    Call Prepare_CF_MgmtStatus_WS(rWSBMCSummary)
    
    'set Data Validation selections
    Call Expand_DV_WS(rWS)
    
    ' -- Text Formatting of columns according to the configuration.
    Call FormatDefaultCells_WS(rWS)
    
    Call FixCellNumberFormat(ThisWorkbook)
    
    Application.Calculation = CalcMode
    rWS.Calculate
    Application.ScreenUpdating = True
    
    'Re-apply the filters
    Call ApplyFilterToEnablerList_EnablerID

    Call Reset_SetCellLock
    
    Call RefreshDashboardMandB      'including refresh of all pivots
    
    rWS.Cells.EntireRow.AutoFit
    rWSBMCSummary.Cells.EntireRow.AutoFit
    
    Range("LastImportEnablerStatus") = StartDate
    
    Call WSSetStatus(rWB)
    'Call ProtectWS(rWS, ProtE)
    'Call ProtectWS(rWSInitiative, ProtI)
    'Call ProtectWS(rWSBMCSummary, ProtT)
    
    rWS.Activate
    rWS.Select
    Application.ScreenUpdating = True
    
    Call StatusBarUpdate("")
    
    MsgText = ""
    
    ActiveWorkbook.Save
    
    If Err Then
        Err.Clear
        MsgText = "Failed to save file " & vbCrLf & Err.Description & vbCrLf & vbCrLf
    End If
    
    If NoOfCancelEnablers Then
        sNoOfCanceledEnablers = vbCrLf & "Canceled enablers: " & NoOfCancelEnablers & vbCrLf
    End If
    ' cOP & " OnePager(s) [In the format of HS: " & cOP_HS & "  PH: " & cOP_PH & " ]" & vbCrLf &
    ' cI & " Initiative(s) [Initiatives in PH OnePagers aren't counted." & vbCrLf &
    MsgText = MsgText & f & " File(s)" & vbCrLf & _
                cOP & " OnePager(s)" & vbCrLf & _
                cI & " Initiative(s)" & vbCrLf & _
                rR - 2 & " Enabler(s)" & vbCrLf & _
                "have been imported." & vbCrLf & _
                sNoOfCanceledEnablers & _
                vbCrLf & _
                "Started at: " & StartDate & vbCrLf & _
                "Ended at:   " & DateTime.Now & vbCrLf & _
                vbCrLf & _
                "Template Version: " & Range("FileVersion") & vbCrLf & _
                "Import directory: " & SDir & vbCrLf & _
                "Import file list date: " & Range("FileCache_LastUpdate")
    Call LogEventAdd(MsgText)
    
    Call MsgBox(MsgText, vbOKOnly, "BMC OnePager Import")
    
    If NoEnablerFileName <> "" Then
        MsgText = "Files found which seem to have some worksheets with no Enablers defined ." & vbCrLf & _
                        vbCrLf & _
                        "File(s):" & vbCrLf & _
                        NoEnablerFileName
        Call MsgBox(MsgText, vbOKOnly, "BMC OnePager Import")
        Call LogEventAdd(MsgText)
    End If
    
    If InvalidFileName <> "" Then
        MsgText = "Files found which seem to have no OnePager worksheet(s) included." & vbCrLf & _
                        vbCrLf & _
                        "File(s):" & vbCrLf & _
                        InvalidFileName
        Call MsgBox(MsgText, vbOKOnly, "BMC OnePager Import")
        Call LogEventAdd(MsgText)
    End If
    
    If OpenFailedMessage <> "" Then
        'Msgbox can handle only 1000 character message length
        If Len(OpenFailedMessage) > MaxMsgLength Then
            OpenFailedMessage = Left(OpenFailedMessage, MaxMsgLength) & "  ...  (more files)."
        End If
        
        MsgText = "Failed to open #" & OpenFailedCount & " file(s)" & vbCrLf & _
                    vbCrLf & _
                    OpenFailedMessage & vbCrLf & _
                    vbCrLf & _
                    "After finishing this import, open the files manually and check if Excel reports any error."
        Call MsgBox(MsgText, vbOKOnly, "BMC OnePager Import")
        Call LogEventAdd(MsgText)
    End If
    
End Function

Private Function testmsgbox()
    Dim s As String
    Dim i As Integer
    For i = 1 To 10000
        If i Mod 10 Then
            s = s & "x"
        Else
            s = s & i / 10
        End If
    Next
    MsgBox s
End Function

Private Function T_Cellcontent()
Dim r As Range

Dim s As String

Set r = Nothing

s = Range("N46")
s = Replace(s, vbLf, " ")
    
MsgBox s
    
End Function

Function TransferInitiativ(sWS As Worksheet, rWS As Worksheet, iWS As Worksheet, gWS As Worksheet, iNo As Integer) As Integer

'transfer the initiative data given by "i" into the provided worksheets

Dim sR, rR, sC, rC, r, iRow, sMaxRows As Integer
Dim RowEnabler              As Integer
Dim j                       As Integer
Dim iEnabler, rI            As Integer
Dim eCount                  As Integer
Dim a                       As Variant
Dim iRng                    As Range
Dim iNumber                 As String
Dim InitiativeName          As String
Dim InitiativeDescription, InitiativeRational, InitiativeLaggingKPI As String
Dim InitiativeKPI_ThisFY    As Range
Dim InitiativeKPI_BMCFY     As Range
Dim InitiativeKPI_AfterFY   As Range
Dim C_EnablerDefined        As String
Dim aSource, aTarget        As String
Dim q4FormatRef, q4Target      As String
Dim ValidEnablerColArray    As Variant
Dim CancelEnabler           As Boolean
Dim CalcMode                As Variant
Dim LastSaved               As Date

'columns in on the OnePager sheet of which one must be not blank to take this entry as valid enabler.
ValidEnablerColArray = Array("C", "H", "I")

On Error Resume Next
                
Application.Calculate
CalcMode = Application.Calculation
Application.Calculation = xlManual
If CalcMode <> xlManual Then
    Err.Clear
End If
                  
'check if last row is empty
RowEnabler = LastRow(rWS)
If EmptyEnablerRowInSummary(rWS, RowEnabler) = False Then
    RowEnabler = RowEnabler + 1
End If
sMaxRows = 10000

C_EnablerDefined = CellColumn("OP_IsActiveEnablerCol", sWS)

Err.Clear
sR = sWS.Range("OP_InitiativeSection").row
sC = sWS.Range("OP_InitiativeSection").Column
If Err Then
    Exit Function
End If

'find the specific initiative section in the OnePager file
iNumber = iNo
If iNo = 6 Then iNumber = "X"
r = 0
Do While InStr(1, sWS.Cells(sR + r, sC + 1), "Initiative " & iNumber, vbTextCompare) = 0 And r < sMaxRows
    r = r + 1
    DoEvents
Loop

eCount = 0

On Error Resume Next
If r < sMaxRows Then

    Application.ScreenUpdating = False
    eCount = 0

    Call StatusBarUpdate("Import from '" & sWS.Name & "' Initiative '" & iNumber & "'")
    'section found, now copy the data to the BMC Enabler Summary tab
    'MsgBox ("Found Initiative " & iNumber & " in worksheet " & sWS.Name)
    iRow = r + sR
    
    
    If (iNumber <> "X") Then
        'Add Initiative Name to the description
        'InitiativeDescription = Trim(sWS.Range("D" & iRow)) & ":" & vbCrLf & Trim(sWS.Range("F" & iRow))
        InitiativeName = Trim(sWS.Range("D" & iRow))
        InitiativeDescription = Trim(sWS.Range("F" & iRow))
        InitiativeRational = Trim(sWS.Range("J" & iRow))
        InitiativeLaggingKPI = Trim(sWS.Range("O" & iRow))
        If InitiativeLaggingKPI = "" Then
            InitiativeLaggingKPI = Trim(sWS.Range("N" & iRow))
        End If
        Set InitiativeKPI_ThisFY = sWS.Range("R" & iRow)
        Set InitiativeKPI_BMCFY = sWS.Range("S" & iRow)
        Set InitiativeKPI_AfterFY = sWS.Range("T" & iRow)
    Else
        InitiativeName = "Initiative X"
        InitiativeDescription = "Cross Initiative Enablers"
        InitiativeRational = "-"
        InitiativeLaggingKPI = "-"
        'InitiativeKPI_ThisFY = "-"
        'InitiativeKPI_BMCFY.Text = "-"
    End If
                                
    'find offset to first enabler
    Err.Clear
    For iEnabler = 0 To sWS.Range("OP_InitiativeSection").Rows.Count
        If sWS.Range("B" & iRow + iEnabler) = "1" Then
            Exit For
        End If
    Next
    
    Err.Clear
    If iEnabler < sWS.Range("OP_InitiativeSection").Rows.Count Then
        iRow = iRow + iEnabler
        'PendUpdate: Cross Initiative section has 7 enablers
        For iEnabler = 1 To 7
            'Break the loop if in the enabler column there is no enabler no
            If sWS.Range("B" & iRow) = "" Then
                Exit For
                
            End If
            'This check has been replaced as the formula in that OnePagers cell got mixed up sometimes and didn't consider to remove blanks.
            'If sWS.Range(C_EnablerDefined & iRow) = True Then
            
            'find cells that must be filled to mark that enabler row as a valid enabler row.
            rI = 1
            Do While Range("_Enabler_OPCol2SumCol").Cells(rI, 1) <> ""
                'does the 4th column indicate with an "E" to take this as an Enabler cell to check.
                If InStr(1, Range("_Enabler_OPCol2SumCol").Cells(rI, 4), "E", vbTextCompare) > 0 Then
                    If Len(Trim(sWS.Range(Range("_Enabler_OPCol2SumCol").Cells(rI, 1) & iRow))) > 0 Then
                        Exit Do
                    End If
                End If
                rI = rI + 1
            Loop
            
            'if rI is within the range of the array, then a cell was found indicating that this is a valid enabler to import
            If Range("_Enabler_OPCol2SumCol").Cells(rI, 1) <> "" Then
                'Do While iEnabler sWS.Range("B" & iEnabler) <> ""
                eCount = eCount + 1
                
                'copy OnePager BMC Info
                a = CopyCellString((sWS.Parent.Name), rWS.Range(CellColumn("_E_FileName", rWS) & RowEnabler))
                a = CopyCellString((sWS.Parent.FullName), rWS.Range(C_PathFileName & RowEnabler))
                a = CopyCellString((sWS.Name), rWS.Range(C_SheetName & RowEnabler))
                a = CopyCellString((sWS.Range("OP_MarketName")), rWS.Range(C_Market & RowEnabler))
                a = CopyCellString((sWS.Range("OP_BusinessName")), rWS.Range(C_Business & RowEnabler))
                a = CopyCellString((iNumber), rWS.Range(C_InitiativeNo & RowEnabler))
                
                LastSaved = sWS.Parent.Worksheets(Tab_Settings).Range("LastSaved")
                a = CopyCellString((LastSaved), rWS.Range(CellColumn("_E_LastSaved", rWS) & RowEnabler))
    
                'copy Initiative Details
                Call CopyCellString((InitiativeName), rWS.Range(C_InitiativeName & RowEnabler))
                Call CopyCellString((InitiativeDescription), rWS.Range(C_InitiativeDescription & RowEnabler))
                Call CopyCellString((InitiativeRational), rWS.Range(C_InitiativeObjective & RowEnabler))
                Call CopyCellString((InitiativeLaggingKPI), rWS.Range(C_InitiativeLaggingKPI & RowEnabler))
                Call CopyCell(InitiativeKPI_ThisFY, rWS.Range(C_InitiativeKPIThisYear & RowEnabler))
                Call CopyCell(InitiativeKPI_BMCFY, rWS.Range(C_InitiativeKPIBMCYear & RowEnabler))
                Call CopyCell(InitiativeKPI_AfterFY, rWS.Range(C_InitiativeKPIAfterYear & RowEnabler))
                                                
                CancelEnabler = False
                
                If (iNumber = 5) Then
                    Err.Clear
                End If
                'now copy the enabler specific items - cell by cell
                'a = CopyCellString(iEnabler & "", rWS.Range(C_EnablerNo & RowEnabler)) 'Enabler Number
                rI = 1
                q4FormatRef = ""
                Do While Range("_Enabler_OPCol2SumCol").Cells(rI, 1) <> ""
                    'Application.Calculation = xlCalculationManual
                    
                    If Range("_Enabler_OPCol2SumCol").Cells(rI, 2) <> "" Then
                        aSource = sWS.Range(Range("_Enabler_OPCol2SumCol").Cells(rI, 1) & iRow).Address
                        aTarget = CellColumn(Range("_Enabler_OPCol2SumCol").Cells(rI, 2), rWS)
                        aTarget = rWS.Range(aTarget & RowEnabler).Address
                        a = CopyCell(sWS.Range(aSource), rWS.Range(aTarget), True)
                        
                        ' check if an enabler has been cancelled via Strike Through
                        Err.Clear
                        a = sWS.Range(aSource).Font.Strikethrough
                        'If Err = False And a Then
                        If Err Or a Then
                            CancelEnabler = True
                        End If
                        
                        'Apply some special handling to certain fields
                        
                        'Owner Organisation is being extracted from the Owner field
                        If Range("_Enabler_OPCol2SumCol").Cells(rI, 2) = "_OwnerOrg" Then
                            ' extract the leading part (anything before a space, ( or [ ) as Owning Organization
                            rWS.Range(aTarget) = ExtractOwningOrganization(sWS.Range(aSource))
                        End If
                        
                        'the Q4 target requires special handling as its format is dynamically predicted from the
                        'full year KPI format or alternatively if not given by any of the Qx cell formats
                        'save the cell of the first target that is being found and not empty ...
                        If q4FormatRef = "" And _
                           (InStr(1, Range("_Enabler_OPCol2SumCol").Cells(rI, 2), "_E_KPIBMCYear", vbTextCompare) Or _
                            InStr(1, Range("_Enabler_OPCol2SumCol").Cells(rI, 2), "_E_Q", vbTextCompare)) And _
                           rWS.Range(aTarget) <> "" Then
                            q4FormatRef = aTarget
                        End If
                        If Range("_Enabler_OPCol2SumCol").Cells(rI, 2) = "_E_Q4" And q4FormatRef <> "" Then
                            ' ... and apply it to the Q4 target
                            rWS.Range(aTarget).NumberFormat = rWS.Range(q4FormatRef).NumberFormat
                            rWS.Range(aTarget).NumberFormatLocal = rWS.Range(q4FormatRef).NumberFormatLocal
                        End If
                        
                    End If
                    
                    rI = rI + 1
                Loop
                
                'Call UpdateCell(rWS, "_E_AdministrativeRemarks", (RowEnabler), "HS")
                
                       
                'if in any of the enabler cells the font is "Strike Through", then cancel the enabler in the worksheet right away.
                If CancelEnabler Then
                    Call UpdateCell(rWS, "_E_Top3", (RowEnabler), "Cancel")
                    NoOfCancelEnablers = NoOfCancelEnablers + 1
                End If
                
                'Correct the Initiative # and update the I-Description
                If (iNumber = "X") Then
                    Call CopyCellString((InitiativeDescription & ": " & rWS.Range(C_InitiativeNo & RowEnabler)), rWS.Range(C_InitiativeName & RowEnabler))
                End If
                
                'overwrite the Initiative No with the actual value: iNo
                a = CopyCellString((iNo), rWS.Range(C_InitiativeNo & RowEnabler))

                RowEnabler = RowEnabler + 1
            Else
                Err.Clear
            End If
            iRow = iRow + 1
        Next
    End If
    Call ClearStatusBar
End If

TransferInitiativ = eCount

End Function

Private Sub test1()

Call UpdateCell(Worksheets("BMC Enabler Summary List"), "_E_AdministrativeRemarks", (2), "HS")
                
End Sub
Function UpdateCell(rWS As Worksheet, ColumnName As String, RowEnabler As Long, Content As String)
'
Dim aTarget As String

On Error Resume Next

aTarget = CellColumn(ColumnName, rWS)
aTarget = rWS.Range(aTarget & RowEnabler).Address
If Not Err And RowEnabler > 1 And aTarget <> "" Then
    Call CopyCellString(Content, rWS.Range(aTarget))
End If
End Function
                
Function SplitOwnerName()
' extracts from the Owner Name field the Owning Organization Name (B vs. M) and puts this into the "_Owner" column

Dim ColOwnerName    As String
Dim colOwningOrg    As String
Dim colOwnerOrg     As String
Dim ColEnablerID    As String
Dim r               As Integer
Dim sWS             As Worksheet
Dim CalcMode        As Variant

Set sWS = ActiveSheet
CalcMode = Application.Calculation

Application.Calculation = xlCalculationManual

If MsgBox("You are about to extract the Owning Organization from the Owner Name field and place it into the column 'Owning Organization'. Do you want to continue?", vbYesNo) <> vbYes Then
    Exit Function
End If

ColOwnerName = num2col(sWS.Range("_E_OwnerName").Column)
colOwnerOrg = num2col(sWS.Range("_OwnerOrg").Column)
colOwningOrg = num2col(sWS.Range("_E_Owner").Column) 'FindNamedColumn(sWS, "_E_Owner")
ColEnablerID = num2col(sWS.Range("_E_Enabler_ID").Column) 'FindNamedColumn(sWS, "_E_Enabler_ID")

r = 2 '2
If ColOwnerName <> "" And colOwningOrg <> "" And ColEnablerID <> "" Then
    Do While sWS.Range(ColEnablerID & r) <> ""
        'DoEvents
        If r Mod 100 = 0 Then
            Call StatusBarUpdate("Enabler row #" & r)
            DoEvents
        End If
        If r = 1113 Then
            Err.Clear   'test
        End If
        sWS.Range(colOwningOrg & r) = ExtractOwningOrganization(sWS.Range(ColOwnerName & r))
        If Len(sWS.Range(colOwningOrg & r)) = 0 Or sWS.Range(colOwningOrg & r) = "/" Then
            sWS.Range(colOwningOrg & r) = "tbd"
            'remove owning org from the owner name => not implement as the results are not worth doing it
            'sWS.Range(colOwnerOrg & r) = ExtractOwnerName(sWS.Range(colOwnerName & r))
        End If
        Err.Clear
        r = r + 1
    Loop
End If

Application.Calculate
Application.Calculation = CalcMode
StatusBarUpdate ("")

End Function

Function ExtractOwnerName(Owner As String) As String
Dim Org             As String
Dim j               As Integer
Dim ClearCharArray  As Variant
Dim p               As Integer

On Error Resume Next

'Application.CutCopyMode = False
    
ClearCharArray = Array(" ", "(", "[", ">", ":", ")", "]", "<", "{", "}")

Owner = Trim(Owner)
Org = Trim(Owner)

Org = Replace(Org, vbLf, " ")   'treat a CR or LF like a space to detect the separation of organizational unit and owner name
Org = Replace(Org, vbCr, " ")

For j = LBound(ClearCharArray) To UBound(ClearCharArray)
    If InStr(1, Org, ClearCharArray(j)) > 0 Then
        p = InStr(1, Org, ClearCharArray(j))
        Org = Right(Org, Len(Org) - p)
        'Org = Right(Org, Len(Org) - InStr(1, Org, ClearCharArray(j)))
        Exit For
    End If
Next

Err.Clear

Org = Application.WorksheetFunction.IfError(Application.WorksheetFunction.VLookup(Org, Range("Owner2Org"), 2, False), Org)

' clear any char that doesn't fit into the org name.
For j = LBound(ClearCharArray) To UBound(ClearCharArray)
    'Org = Replace(Org, ClearCharArray(j), "")
Next

'TC-Japan-HRC-I2-E3

ExtractOwnerName = Trim(Org)

End Function
Function ExtractOwningOrganization(Owner As String) As String

'Extracts from the "Owner" string entered into the BMC Plan OnePager files the Owning Organization [B | M2O | N]
' there are various mechanisms to identify that first part in the string as there is the entries have not been done
' consistently by the useres.
'The extraction mechanism doesn't cover all corner cases.

Dim Org             As String
Dim j               As Integer
Dim ClearCharArray  As Variant
Dim FindCharArray   As Variant
Dim OrgCharArray    As Variant
Dim p               As Integer
Dim c               As String

On Error Resume Next

'Application.CutCopyMode = False
    
ClearCharArray = Array(" ", "(", "[", ">", ":", ")", "]", "<", "{", "}")
FindCharArray = Array(" ", ")", "]", ">", "}", ":", "?", "(", "[", "<", "{")
OrgCharArray = Array("/M", "M/", "/B", "B/")

Org = Trim(Owner)

'add to each potentially ending character a space.
'Enabling the search algorithm to find that end based on the space if there is none before.
Org = Replace(Org, ")", ") ")
Org = Replace(Org, ">", "> ")
Org = Replace(Org, "}", "} ")
Org = Replace(Org, "]", "] ")
Org = Replace(Org, ":", ": ") 'Replacing the ":" doesn't seem to work
Org = Replace(Org, "?", "? ")


Org = Replace(Org, vbLf, " ")   'treat a CR or LF like a space to detect the separation of organizational unit and owner name
Org = Replace(Org, vbCr, " ")
Org = Trim(Org)

'find the first separation character according to the order specified in the array
' with the above replacement of potential ending characters by a space, in any case the first space is
' the separation position within the owner string
For j = LBound(FindCharArray) To UBound(FindCharArray)
    c = FindCharArray(j)
    p = InStr(1, Org, c)
    If p > 0 Then
        Org = Left(Org, p - 1)
        Exit For
    End If
Next

Err.Clear

'do mapping from specific org string like "CMM" to a organisation like "M"
Org = Application.WorksheetFunction.IfError(Application.WorksheetFunction.VLookup(Org, Range("Owner2Org"), 2, False), Org)

' clear any char that doesn't fit into the org name.
For j = LBound(ClearCharArray) To UBound(ClearCharArray)
    Org = Replace(Org, ClearCharArray(j), "")
Next

For j = LBound(OrgCharArray) To UBound(OrgCharArray)
    c = OrgCharArray(j)
    p = InStr(1, Org, c)
    If p > 0 Then
        c = ""
        Exit For
    End If
Next

' if the organization name is longer than 4 characters (those are usual person names or alike) than set the output to ""
If j > UBound(OrgCharArray) And Len(Org) > 4 Then
    ExtractOwningOrganization = ""
Else
    ExtractOwningOrganization = Trim(Org)
End If

End Function

Function ExtractOwningOrganization2(Owner As String) As String
' this function is currently not used
Dim Org             As String
Dim j               As Integer
Dim ClearCharArray  As Variant
                           
On Error Resume Next

'Application.CutCopyMode = False
    
ClearCharArray = Array(" ", "(", "[", ">", ":", ")", "]", "<", "{", "}")

Org = Trim(Owner)

Org = Replace(Org, vbLf, " ")   'treat a CR or LF like a space to detect the separation of organizational unit and owner name
Org = Replace(Org, vbCr, " ")

For j = LBound(ClearCharArray) To UBound(ClearCharArray)
    If InStr(1, Org, ClearCharArray(j)) > 0 Then
        Org = Left(Org, InStr(1, Org, ClearCharArray(j)) - 1)
        Exit For
    End If
Next

Err.Clear

Org = Application.WorksheetFunction.IfError(Application.WorksheetFunction.VLookup(Org, Range("Owner2Org"), 2, False), Org)

' clear any char that doesn't fit into the org name.
For j = LBound(ClearCharArray) To UBound(ClearCharArray)
    Org = Replace(Org, ClearCharArray(j), "")
Next

'TC-Japan-HRC-I2-E3

ExtractOwningOrganization2 = Trim(Org)

End Function
Function TransferBMCTotals(sWS As Worksheet, rWS As Worksheet, iWS As Worksheet, gWS As Worksheet) As Integer

'transfer the initiative data given by "i" into the provided worksheets

Dim sR, rR, sC, rC, iRow, sMaxRows As Integer
Dim RowBMC As Integer
Dim iEnabler, rI As Integer
Dim eCount As Integer
Dim a As Variant
Dim iRng As Range
Dim iNumber As String
Dim InitiativeDescription, InitiativeRational, InitiativeLaggingKPI, InitiativeKPI_ThisFY, InitiativeKPI_BMCFY As String
Dim C_EnablerDefined As String
Dim aSource, aTarget As String
Dim s As Range
Dim t As Range
Dim LastSaved As Date
               
'check if last row is empty
RowBMC = LastRow(gWS)
If EmptyEnablerRowInSummary(gWS, RowBMC) = False Then
    RowBMC = RowBMC + 1
End If
sMaxRows = 1000

'gWS.Parent.Activate
'gWS.Select
'gWS.Activate

eCount = 0

If RowBMC < sMaxRows Then

    Application.ScreenUpdating = False
    On Error Resume Next
    gWS.Select
    gWS.Activate
    Err.Clear
    
    'copy OnePager BMC Info
    a = CopyCellString((sWS.Parent.FullName), gWS.Range(CellColumn("_E_PathFileName", gWS) & RowBMC))
    a = CopyCellString((sWS.Name), gWS.Range(CellColumn("_E_SheetName", gWS) & RowBMC))
    LastSaved = sWS.Parent.Worksheets(Tab_Settings).Range("LastSaved")
    a = CopyCellString((LastSaved), gWS.Range(CellColumn("_E_LastSaved", gWS) & RowBMC))
    
    rI = 1
    Do While Range("_Global_OPCol2SumCol").Cells(rI, 1) <> ""
        If Range("_Global_OPCol2SumCol").Cells(rI, 2) <> "" Then
            aSource = sWS.Range(Range("_Global_OPCol2SumCol").Cells(rI, 1)).Address
            aTarget = CellColumn(Range("_Global_OPCol2SumCol").Cells(rI, 2), gWS)
            aTarget = gWS.Range(aTarget & RowBMC).Address
            
            Err.Clear
            Set t = gWS.Range(aTarget)
            Set s = sWS.Range(aSource)
            a = CopyCell(s, t)
            If Range("_Global_OPCol2SumCol").Cells(rI, 4) = "C" And t.HasFormula = False Then
                ' this is a completeness check cell and needs transformation
                ' get original value (which uses the WingDings font for showing "X" and "V" and convert to Yes and No
                Err.Clear
                t.Value = Application.WorksheetFunction.HLookup(s, Range("CompletenessCheckMapping"), 3, False)
                If Err Then
                    t = "?"
                    Err.Clear
                End If
            Else
                Err.Clear
            End If
        End If
        rI = rI + 1
    Loop
    
    eCount = eCount + 1

    Call ClearStatusBar
Else
    Err.Clear
End If

TransferBMCTotals = eCount

End Function

Private Sub T_Format_BMCTotals()
   
   'Call FormatEnablerSummaryColumns(ThisWorkbook.Sheets(Tab_BMCTotalsList), Range("BMCTotals_FormatMap_SCol"))
   Call FormatEnablerSummaryColumns(ThisWorkbook.Sheets(Tab_BMCEnablerList))

End Sub

Function TransferBMCGeneric(sWS As Worksheet, rWS As Worksheet, gWSName As String, NamedRange As String) As Integer

'Exit Function

'Transfer generic data range from OnePager into the provided worksheets

Dim sR, rR, sC, rC, iRow, sMaxRows As Integer
Dim RowBMC As Integer
Dim iEnabler, rI As Integer
Dim eCount As Integer
Dim a As Variant
Dim iRng As Range
Dim iNumber As String
Dim InitiativeDescription, InitiativeRational, InitiativeLaggingKPI, InitiativeKPI_ThisFY, InitiativeKPI_BMCFY As String
Dim C_EnablerDefined As String
Dim aSource, aTarget As String
Dim s           As Range
Dim t           As Range
Dim mRng        As Range
Dim LastSaved   As Date
Dim rNRRowCount As Integer
Dim SrvHeaderFixed As Boolean

Dim gWS         As Worksheet
Dim gRng        As Range
               
On Error Resume Next
Err.Clear
Set gWS = rWS.Parent.Sheets(gWSName)
If Err Then
    Exit Function
End If
Err.Clear
Set gRng = sWS.Range(NamedRange)
If Err Then
    Exit Function
End If

'check if last row is empty
RowBMC = LastRow(gWS)
If EmptyEnablerRowInSummary(gWS, RowBMC) = False Then
    RowBMC = RowBMC + 1
End If

'max number of rows in the OnePager that is being searched
sMaxRows = 10000

'gWS.Parent.Activate
'gWS.Select
'gWS.Activate

eCount = 0

If RowBMC < sMaxRows Then

    Application.ScreenUpdating = False
    
    On Error Resume Next
    'gWS.Select
    'gWS.Activate
    
    Err.Clear
    Call StatusBarUpdate("Transfer " & NamedRange)
    Set mRng = Range("ImportOPGenericMapping")
    
    
    'sR = 2
    For sR = 2 To sWS.Range(NamedRange).Rows.Count
        If Trim(sWS.Range(NamedRange).Cells(sR, 1)) <> "" Then
            If Err Then
                Exit For
            End If
            rI = 1
            Do While mRng.Cells(rI, 1) <> ""
                If Err Then
                    Exit Do
                End If
                DoEvents
                
                'START: fix for wrong header in the AOP section
                If NamedRange = "B50:Q60" And SrvHeaderFixed = False Then
                    For sC = 2 To sWS.Range(NamedRange).Columns.Count
                        sWS.Range(NamedRange).Cells(1, sC) = Replace(sWS.Range(NamedRange).Cells(1, sC), "18", "19", , , vbTextCompare)
                        sWS.Range(NamedRange).Cells(1, sC) = Replace(sWS.Range(NamedRange).Cells(1, sC), "17", "18")
                    Next sC
                    SrvHeaderFixed = True
                End If
                'END: fix for wrong header in the AOP section

                aSource = ""
                aTarget = ""
            
                If mRng.Cells(rI, 1) = gWSName Then
                    'First check the Source => OnePager
                    If Left(mRng.Cells(rI, 2), 1) = "*" Then
                        'This is a named cell
                        aSource = Trim(Right(mRng.Cells(rI, 2), Len(mRng.Cells(rI, 2)) - 1))
                    Else
                        'this is the header of column in the "NamedRange"
                        Err.Clear
                        For sC = 1 To sWS.Range(NamedRange).Columns.Count
                            'compare the headers in the receiving worksheet with the one in the table
                            If UCase(Trim(sWS.Range(NamedRange).Cells(1, sC))) = UCase(Trim(mRng.Cells(rI, 2))) Then
                                'they match
                                aSource = sWS.Range(NamedRange).Cells(sR, sC).Address
                                Exit For
                            End If
                        Next sC
                        If aSource = "" Then
                            Err.Clear
                        End If
                    End If
                    
                    'Find Target
                    If Left(mRng.Cells(rI, 3), 1) = "*" Then
                        aTarget = Trim(Right(mRng.Cells(rI, 3), Len(mRng.Cells(rI, 3)) - 1))
                        aTarget = CellColumn(aTarget, gWS)
                        aTarget = gWS.Range(aTarget & RowBMC).Address
                    Else
                        rC = 1
                        Do While gWS.Cells(1, rC) <> ""
                            'compare the headers in the receiving worksheet with the one in the table
                            If UCase(Trim(gWS.Cells(1, rC))) = UCase(Trim(mRng.Cells(rI, 3))) Then
                                'they match
                                'aTarget = gWS.Cells(1, rC).Address
                                'aTarget = CellColumn(aTarget, gWS)
                                'aTarget = gWS.Range(aTarget & RowBMC).Address
                                aTarget = gWS.Cells(RowBMC, rC).Address
                                Exit Do
                            End If
                            rC = rC + 1
                        Loop
    
                    End If
                    
                    'if Source and Target are found then ...
                    If aSource <> "" And aTarget <> "" Then
                        '... transfer cells
                        Err.Clear
                        
                        Set t = gWS.Range(aTarget)
                        Set s = sWS.Range(aSource)
                        a = CopyCell(s, t)
                        
                        'copy OnePager BMC Info
                        a = CopyCellString((sWS.Parent.FullName), gWS.Range(CellColumn("_E_PathFileName", gWS) & RowBMC))
                        a = CopyCellString((sWS.Name), gWS.Range(CellColumn("_E_SheetName", gWS) & RowBMC))
                        LastSaved = sWS.Parent.Worksheets(Tab_Settings).Range("LastSaved")
                        a = CopyCellString((LastSaved), gWS.Range(CellColumn("_E_LastSaved", gWS) & RowBMC))
                        
                        'Copy market and Business
                        aTarget = CellColumn("_E_Market", gWS)
                        aTarget = gWS.Range(aTarget & RowBMC).Address
                        Set t = gWS.Range(aTarget)
                        Set s = sWS.Range("OP_MarketName")
                        a = CopyCell(s, t)
                        
                        aTarget = CellColumn("_E_Business", gWS)
                        aTarget = gWS.Range(aTarget & RowBMC).Address
                        Set t = gWS.Range(aTarget)
                        Set s = sWS.Range("OP_BusinessName")
                        a = CopyCell(s, t)
                        
                        Err.Clear
                        aTarget = CellColumn("KPIRange", gWS)
                        aTarget = gWS.Range(aTarget & RowBMC).Address
                        Set t = gWS.Range(aTarget)
                        
                        If Err = 0 Then
                        'Set s = sWS.Range("OP_MarketName")
                            t.Value = NamedRange
                        'a = CopyCell(s, t)
                        End If
                    End If
                    Err.Clear
                End If
                Err.Clear
                rI = rI + 1
            Loop
            'sR = sR + 1
            eCount = eCount + 1
            RowBMC = RowBMC + 1
        Else
            ' empty row, skip its transfer
            Err.Clear
        End If
    Next sR
    
    Call ClearStatusBar
Else
    Err.Clear
End If

TransferBMCGeneric = eCount

End Function
Private Function Test_FormatEnablerSummaryColumnsAll()

Call FormatEnablerSummaryColumnsAll

End Function

Function FormatEnablerSummaryColumnsAll(Optional wb As ThisWorkbook)

' run thru all listed worksheets to check and fix the fomulas
' currently it makes only use of the worksheets listed in named range "ImportOPGenericList"
Dim cWB     As Workbook
Dim cWS     As Worksheet
Dim g       As Integer
Dim Rng     As Range

If wb Is Nothing Then
    Set cWB = ThisWorkbook
Else
    Set cWB = wb
End If

g = 1
Do While Trim(Range("ImportOPGenericList").Cells(g, 1)) <> ""
    Err.Clear
    'Set cWS = cWB.Worksheets(Range("ImportOPGenericList").Cells(g, 3).Text)
    Set Rng = Range(Range("ImportOPGenericList").Cells(g, 3).Text)
    Set cWS = cWB.Worksheets(Range("ImportOPGenericList").Cells(g, 1).Text)
    If Err = 0 Then
        Call FormatEnablerSummaryColumns(cWS, Rng)
    End If
    g = g + 1
Loop

    'Call FormatEnablerSummaryColumns(rWS)
    'Call FormatEnablerSummaryColumns(rWSBMCSummary, Range("BMCTotals_FormatMap_SCol"))
    'Call FormatEnablerSummaryColumns(Worksheets(Range("ImportOPGenericList").Cells(1, 1)), Range("BMCRisksAndAmbitions_FormatMap_SCol"))
    'Call FormatEnablerSummaryColumns(Worksheets(Range("ImportOPGenericList").Cells(2, 1)), Range("BMCOtherAspirations_FormatMap_SCol"))

End Function

Function FormatEnablerSummaryColumns(rWS As Worksheet, Optional cCell As Range)

Dim l, rC, rR           As Integer
Dim Rng                 As String
Dim ColumnNotMatching   As String
Dim MsgText             As String
Dim CalcMode            As Variant


'Dim cCell As Range
    
'Text Formatting of columns according to the configuration.

CalcMode = Application.Calculation
Application.Calculation = xlCalculationManual

rR = LastRow(rWS)
If cCell Is Nothing Then
    Set cCell = Range("StartSourceCol")
End If

l = 1
Do While cCell.Cells(l, 1) <> ""
    If Trim(UCase(rWS.Range(cCell.Cells(l, 1) & "1"))) = Trim(UCase(cCell.Cells(l, 2))) Then
        Rng = cCell.Cells(l, 1) & "2:" & cCell.Cells(l, 1) & rR
        If cCell.Cells(l, 1) = "J" Then
            Err.Clear
        End If
        Call StatusBarUpdate(rWS.Name & ": Format columns ... " & Rng)
        With rWS.Range(Rng)
            If InStr(1, cCell.Cells(l, 4), "L", vbTextCompare) > 0 Then
                .HorizontalAlignment = xlLeft
            End If
            If InStr(1, cCell.Cells(l, 4), "R", vbTextCompare) > 0 Then
                .HorizontalAlignment = xlRight
            End If
            If InStr(1, cCell.Cells(l, 4), "M", vbTextCompare) > 0 Then
                .HorizontalAlignment = xlCenter
            End If
            If InStr(1, cCell.Cells(l, 4), "B", vbTextCompare) > 0 Then
                .VerticalAlignment = xlBottom
            End If
            If InStr(1, cCell.Cells(l, 4), "T", vbTextCompare) > 0 Then
                .VerticalAlignment = xlTop
            End If
            If InStr(1, cCell.Cells(l, 4), "C", vbTextCompare) > 0 Then
                .VerticalAlignment = xlCenter
            End If
            If InStr(1, cCell.Cells(l, 4), "P", vbTextCompare) > 0 Then
                 ' in case it is a onePager Summary file, then all cells with no formulas become unlocked.
                If InStr(1, rWS.Parent.Name, "BG-OP", vbTextCompare) = 1 Then
                    .Locked = False
                Else
                    .Locked = True
                End If
            Else
                .Locked = False
            End If
            
            ' cells with formula lock anyhow
            If rWS.Range(cCell.Cells(l, 1) & "2").HasFormula = True Then
                .Locked = True
            End If
            
        End With
    Else
        ColumnNotMatching = ColumnNotMatching & ", " & cCell.Cells(l, 1)
    End If
    Err.Clear
    l = l + 1
Loop

'standard cell formatting across all active cells
Rng = cCell.Cells(1, 1) & "2:" & cCell.Cells(l - 1, 1) & rR
With rWS.Range(Rng)
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
            'set borders
            .Borders(xlDiagonalDown).LineStyle = xlNone
            .Borders(xlDiagonalUp).LineStyle = xlNone
            With .Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With .Borders(xlEdgeTop)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With .Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With .Borders(xlEdgeRight)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With .Borders(xlInsideVertical)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With .Borders(xlInsideHorizontal)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            '.Borders(xlInsideVertical).LineStyle = xlNone
            '.Borders(xlInsideHorizontal).LineStyle = xlNone
            ' no Fill
            With .Interior
                .Pattern = xlNone
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
End With

Call SetFreezePane(rWS)

Application.Calculation = CalcMode

If ColumnNotMatching <> "" Then
    MsgText = "Found column(s) with headers not matching the expected configuration: " & vbCrLf & _
                rWS.Parent.Name & vbCrLf & rWS.Name & _
                "Columns not matching: " & ColumnNotMatching
    Call LogEventAdd(MsgText)
    Call MsgBox(MsgText, vbOKOnly)
End If

Call ClearStatusBar

End Function

Private Sub T_SetFreezePane()
    Call SetFreezePane(ActiveSheet)
    'Call SetFreezePane(Worksheets("BMC Totals"))
End Sub

Function SetFreezePane(ws As Worksheet, Optional Col As String)

'removes and worksheet split and sets Freeze Pane on the named cell ("_FreezePanes")

Dim c       As String
Dim aWS     As Worksheet

On Error Resume Next

c = CellColumn("_FreezePanes", ws)

If c = "" And Col <> "" Then
    c = Col
End If

If c <> "" Then
    'Remember currently selected worksheet
    Set aWS = ActiveSheet
    
    ws.Activate
    ws.Select
    
    'ws.Outline.ShowLevels RowLevels:=0, ColumnLevels:=1
    ws.Outline.ShowLevels RowLevels:=0, ColumnLevels:=2
    Err.Clear
    ActiveWindow.Split = False
    ActiveWindow.Split = False
    Range(c & 2).Select
    
    ActiveWindow.FreezePanes = True
    
    aWS.Activate
    aWS.Select
End If

End Function

Public Function InitColumVariables()
    On Error Resume Next
    
    Dim ws As Worksheet
    Set ws = Worksheets(Tab_BMCEnablerList)
    C_PathFileName = CellColumn("_E_PathFileName", ws)
    C_SheetName = CellColumn("_E_SheetName", ws)
    C_Market = CellColumn("_E_Market", ws)
    C_Business = CellColumn("_E_Business", ws)
    C_CSRelated = CellColumn("_E_CSRelated", ws)
    C_OwnerOrg = CellColumn("_OwnerOrg", ws)
    C_InitiativeNo = CellColumn("_E_InitiativeNo", ws)
    C_EnablerNo = CellColumn("_E_EnablerNo", ws)
    '-------
    C_KeyEnablingActions = CellColumn("_E_EnablerDescription", ws)
    C_OwnerName = CellColumn("_E_OwnerName", ws)
    C_EnablingKPI = CellColumn("_E_EnablingKPI", ws)
    C_Top3 = CellColumn("_E_Top3", ws)
    C_FY15 = CellColumn("_E_KPIThisYear", ws)
    C_FY16 = CellColumn("_E_KPIBMCYear", ws)
    C_Q1_16 = CellColumn("_E_Q1", ws)
    C_Q2_16 = CellColumn("_E_Q2", ws)
    C_Q3_16 = CellColumn("_E_Q3", ws)
    C_Q4_16 = CellColumn("_E_Q4", ws)
    C_InitiativeName = CellColumn("_E_InitiativeName", ws)
    C_InitiativeDescription = CellColumn("_E_InitiativeDescription", ws)
    C_InitiativeObjective = CellColumn("_E_InitiativeRational", ws)
    C_InitiativeLaggingKPI = CellColumn("_E_InitiativeLaggingKPI", ws)
    C_InitiativeKPIThisYear = CellColumn("_E_InitiativeKPIThisYear", ws)
    C_InitiativeKPIBMCYear = CellColumn("_E_InitiativeKPIBMCYear", ws)
    C_InitiativeKPIAfterYear = CellColumn("_E_InitiativeKPIAfterYear", ws)
    
    'C_DuplicateEnabler = CellColumn("_E_DuplicateEnabler", ws)

    'C_FileDateTime = CellColumn("_E_FileDateTime", ws)
    'C_BGLeaderName = CellColumn("_E_BGLeaderName", ws)
    'C_MarketClusterLeaderName = CellColumn("_E_MarketClusterLeaderName", ws)
    C_ClusterName = CellColumn("_E_ClusterName", ws)
    C_BMCName = CellColumn("_E_BMCName", ws)
    'C_BMCRole = CellColumn("_E_BMCRole", ws)
    
    
    If Err Then
        MsgBox ("Failed to init 'column' variables")
    End If
End Function

Function CopyCellString(s As String, t As Range, Optional NoTrim As Boolean)

'Application.ScreenUpdating = False

If (t.HasFormula) Then
    'skip if the target cell has a formula
    Err.Clear
Else
    If NoTrim = True Then
        t = s
    Else
        t = Trim(s)
    End If
End If

End Function

Function CopyCell(s As Range, t As Range, Optional FixDate As Boolean = False)

'Application.ScreenUpdating = False
On Error Resume Next

If (t.HasFormula) Then
    'skip if the target cell has a formula
    Err.Clear
Else
    'a = S.Address
    'Copy formating information as well (color, %, number format)
    'S.Copy
    't.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Application.CutCopyMode = False
    t = s
    
    'Reset the format to general if it is potentially wrong
    If (FixDate = True) And InStr(1, s.NumberFormat, "@", vbTextCompare) > 0 Then
        t.NumberFormat = "General"
        t.NumberFormatLocal = "General"
    Else
        t.NumberFormat = s.NumberFormat
        t.NumberFormatLocal = s.NumberFormatLocal
    End If
    
    'numbers may be stored as text: the below fixes this and converts them to numbers.
    Err.Clear
    If VarType(t) = vbString Then
        'remove leading and trailing blanks
        t = Trim(t)
        Err.Clear
        'remove trailing Line Feed.
        If Right(t, 1) = vbLf Then t = Left(t, Len(t) - 1)
        If Right(t, 1) = vbLf Then t = Left(t, Len(t) - 1)

        'remove leading and trailing blanks
        t = Trim(t)
        
    ElseIf IsNumeric(t) And t.Text <> "" Then
        t = s * 1
    End If
End If

If Err Then
    Err.Clear
End If

End Function
Function CopyCell_1(s As Range, t As Range)

'Application.ScreenUpdating = False
On Error Resume Next

If (t.HasFormula) Then
    'skip if the target cell has a formula
    Err.Clear
Else
    'a = S.Address
    'Copy formating information as well (color, %, number format)
    'S.Copy
    't.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Application.CutCopyMode = False
    t = s
    
    t.NumberFormat = s.NumberFormat
    t.NumberFormatLocal = s.NumberFormatLocal
    'numbers may be stored as text: the below fixes this and converts them to numbers.
    Err.Clear
    If IsNumeric(t) And t.Text <> "" Then
        If VarType(t) = vbString Then
            Err.Clear
        Else
            t = s * 1
        End If
    ElseIf IsNumeric(t) = False And t.Text <> "" Then
        'remove leading and trailing blanks
        If InStr(1, t.Text, " ", vbTextCompare) = 1 Then
            t = Trim(t)
            Err.Clear
        End If
        'remove trailing Line Feed.
        If Right(t, 1) = vbLf Then
            t = Left(t, Len(t) - 1)
        End If
    End If
End If

If Err Then
    Err.Clear
End If

End Function

Function CellColumn(Cellname As String, Optional ws As Worksheet) As String
' the CELLNAME can either be a named cell or a column label

Dim Col, l As String

On Error Resume Next

If ws Is Nothing Then
    Set ws = ActiveSheet
End If

Col = ws.Range(Cellname).Cells(1, 1).Address

If Err Then
    'CELLNAME doesn't seem exist as a named cell
    'if the ELLNAME is shorter than 4 characters, then assume this is the column label "A ... ZZZ"
    Err.Clear
    If Len(Cellname) < 4 Then
        Col = Cellname
    End If
End If

'search $ from the string end
l = InStrRev(Col, ":")
If l > 1 Then
    '$A$1 or $A:$B or A$1 or $1:$2
    Col = Left(Col, l - 1)
End If

'search $ from the string end
l = InStrRev(Col, "$")
If l > 1 Then
    '$A$1 or $A:$B or A$1 or $1:$2
    Col = Left(Col, l - 1)
Else
    '$A1
End If

Col = Trim(Replace(Col, ":", ""))
Col = Trim(Replace(Col, "$", ""))

' if Row # are in the provided string only, then the first row # is returned: "1:5" => "1"
CellColumn = Col

End Function

Function CellRow(Cellname As String) As String
'extract the row number from a given cell address

Dim row, Col, l As String

Col = Range(Cellname).Address
l = InStrRev(Col, "$")
row = Right(Col, Len(Col) - l + 1)

CellRow = row

End Function

    
Function EmptyEnablerRowInSummary(rWS As Worksheet, r As Integer) As Boolean

'check if any cell in the given row is NOT empty

Dim m, f As Integer

f = 1
m = LastCol(rWS)
EmptyEnablerRowInSummary = True
For f = 1 To m
    If rWS.Range("A1").Cells(r, f).HasFormula = False Then
        'rWS.Range("a1").Cells(r, f).Select
        If rWS.Range("A1").Cells(r, f) <> "" Then
            EmptyEnablerRowInSummary = False
            Exit For
        End If
    End If
    f = f + 1
Next

End Function
    

Private Function Test_ImportOtherAspirations()

Dim sOP_WS  As Worksheet
Dim rOP_WS  As Worksheet
Dim myWS    As Worksheet
Dim g       As Integer
Dim wsName  As String

' select one pager to imp<ort from
' select one pager to write into

'copy all cells 1:1 that have no formula associated
'check that the size of both OnePager editions are identical
On Error Resume Next

Set sOP_WS = Nothing
Set rOP_WS = Nothing

Do While sOP_WS Is Nothing And rOP_WS Is Nothing
    Set sOP_WS = AskWSSelect("Source OnePager")
    If Not sOP_WS Is Nothing Then
        Set rOP_WS = Worksheets(Tab_RisksAndAssumptions)
    End If
    'potentially open the template file from here.
    
    If sOP_WS Is Nothing Or rOP_WS Is Nothing Then
        Err.Clear
        Exit Do
    Else
        If sOP_WS.Name = rOP_WS.Name And sOP_WS.Parent.Name = rOP_WS.Parent.Name Then
            If (MsgBox("Error Source and Target worksheet are the same." & vbCrLf & "Do you want to retry?", vbYesNo) <> vbYes) Then
                Exit Function
            End If
        Else
            'Call TransferBMCGeneric(sOP_WS, rOP_WS, Tab_RisksAndAssumptions, "OP_Comments")
            g = 1
            Do While Trim(Range("ImportOPGenericList").Cells(g, 1)) <> ""
                        Call TransferBMCGeneric(sOP_WS, rOP_WS, _
                                                Range("ImportOPGenericList").Cells(g, 1), _
                                                Range("ImportOPGenericList").Cells(g, 2))
                        g = g + 1
            Loop
            
            Err.Clear
            Set myWS = ThisWorkbook.Worksheets(Range("ImportOPGenericList").Cells(1, 1) & "") 'Tab_RisksAndAssumptions)
            Call CheckAndFixFormula(myWS)
            
            'Application.Calculate
                   
            Call FormatEnablerSummaryColumns(myWS, Range("BMCRisksAndAmbitions_FormatMap_SCol"))
            
            Set myWS = ThisWorkbook.Worksheets(Range("ImportOPGenericList").Cells(2, 1) & "") 'Tab_RisksAndAssumptions)
            Call CheckAndFixFormula(myWS)
            Call FormatEnablerSummaryColumns(myWS, Range("BMCOtherAspirations_FormatMap_SCol"))

        End If
    End If
Loop

End Function

Function AskWSSelect(WSMsg As String, Optional IsTemplate As Boolean) As Worksheet

Dim MsgTxt As String
Dim rWS As Worksheet
Dim ws As Worksheet
Dim wb As Workbook
Dim w As Integer
Dim sInput As String
Dim s As Integer

On Error Resume Next

'get the worksheet with the copy of the data in

Do While rWS Is Nothing
    w = 0
    Set rWS = Nothing
    
    MsgTxt = "Select workbook you want to select the '" & WSMsg & "' OnePager worksheet:" & vbCrLf
    For Each wb In Workbooks
        'If wb.Name <> ThisWorkbook.Name Then
            w = w + 1
            MsgTxt = MsgTxt & w & ". " & wb.Name & vbCrLf
        'End If
    Next
    MsgTxt = MsgTxt & vbCrLf & "Enter workbook # to select worksheet from."
    If w < 1 Then
        MsgTxt = "Open at least two workbooks: One that contains the Import from OnePager and the other the OnePager template to import the OnePager data into."
        Call MsgBox(MsgTxt, vbOKOnly)
        Exit Function
    End If
    sInput = InputBox(MsgTxt)
    s = sInput + 0
    w = 0
    For Each wb In Workbooks
        'If wb.Name <> ThisWorkbook.Name Then
            w = w + 1
            If s = w Then
                Exit For
            End If
        'End If
    Next
    If s <> w Or s = 0 Then
        If MsgBox("Invalid selection (" & s & ")" & vbCrLf & _
                "Press 'Ok' to retry or" & vbCrLf & _
                "Press 'Cancel' to terminate.", vbOKCancel) <> vbOK Then
            Set rWS = Nothing
            Exit Function
        End If
        s = ""
    Else
        MsgTxt = "Select worksheet " & WSMsg & ":" & vbCrLf
        w = 0
        For Each ws In wb.Worksheets
            If ws.Visible = xlSheetVisible Then
                w = w + 1
                MsgTxt = MsgTxt & w & ": " & ws.Name & vbCrLf
            End If
        Next
        'MsgTxt = MsgTxt & vbCrLf & "N: Create new worksheet" & vbCrLf
        MsgTxt = MsgTxt & vbCrLf & "Enter worksheet #"
        sInput = InputBox(MsgTxt)
        s = 0
        s = sInput + 0
        w = 0
        If s > 0 Then
            For Each ws In wb.Worksheets
                If ws.Visible = xlSheetVisible Then
                    w = w + 1
                    If s = w Then
                        Set rWS = ws
                        Exit For
                    End If
                End If
            Next
        Else
            s = 0
        End If
        
        If rWS Is Nothing Then
            If MsgBox("Invalid selection (" & s & ")" & vbCrLf & _
                    "Press 'Ok' to retry or" & vbCrLf & _
                    "Press 'Cancel' to terminate.", vbOKCancel) <> vbOK Then
                Set rWS = Nothing
                Exit Function
            End If
            s = 0
        Else
            If OP_IsOnePagerSheet(rWS) = False Then
                If MsgBox("The worksheet" & vbCrLf & rWS.Name & vbCrLf & "seems not to be a OnePager worksheet." & vbCrLf & vbCrLf & "You still want to continue?", vbYesNo) <> vbYes Then
                    Set rWS = Nothing
                    s = 0
                End If
            End If
            'Set rWS = ws
        End If
    End If
Loop

Set AskWSSelect = rWS
End Function


Attribute VB_Name = "a2_PH_ImportOnePagerFiles"
Option Explicit

'columns for initiative fields on the OnePager for attribute ...
' Dim C_OP_InitiativeName As String
' Dim C_OP_InitiativeObjective As String
' Dim C_OP_InitiativeLaggingKPI As String
' Dim C_OP_InitiativeKPIThisYear As String
' Dim C_OP_InitiativeKPIBMCYear As String

Const O_I_No As Integer = 1
Const O_I_Description As Integer = 2
Const O_I_Objective As Integer = 8
Const O_I_LaggingKPI As Integer = 13
Const O_I_FY17 As Integer = 16
Const O_I_FY18 As Integer = 17

Const MaxEnablers = 50

Private Sub test_Format()
 MsgBox Range("G2").NumberFormat
End Sub

Private Sub PH_CreateOnePagerImportSummaryFiles()

' creates the BG specific BMC OnePager summary files

    Dim StartDate As Date
    Dim m, b As Integer
    
    If MsgBox("You are about to create BG specific 'BMC OnePager Import summary' files with default seetings." & vbCrLf & _
              "Placed into the subdirectory: '" & Trim(LoadSetting("TargetDir")) & "'" & vbCrLf & vbCrLf & _
              "Do you want to do this?", vbOKCancel) <> vbOK Then
        Exit Sub
    End If
    
    StartDate = DateTime.Now
    
    'b = PH_CreateBGSummaryFiles(False, True)
    'm = CreateMarketSummaryFiles(False)
    
    Call MsgBox(b & " BG " & m & " OnePager Import Summary files have been re-created." & vbCrLf & vbCrLf & _
            "Started at: " & StartDate & vbCrLf & _
            "Ended at:   " & DateTime.Now & vbCrLf, _
            vbOKOnly)

End Sub

Sub PH_ImportOnePagerSummaryFiles()
Attribute PH_ImportOnePagerSummaryFiles.VB_ProcData.VB_Invoke_Func = "A\n14"

'Call ImportOnePagerSummaryFiles2016
Call PH_ImportOnePagerFiles2018

End Sub

Private Function PH_ImportOnePagerFiles2018()
'
' Import from the various BGs the OnePager Summary files
'

    Dim sR, rR, rC, sC, f, c, r, i As Integer
    Dim sWB As Workbook, rWB    As Workbook
    
    Dim sWS                     As Worksheet
    Dim rWS                     As Worksheet
    Dim rWSInitiative           As Worksheet
    Dim rWSBMCSummary           As Worksheet
    
    Dim StartDate               As Date
    Dim Market, EnablerSheet, MarketCol, BGCol As String
    Dim TDir, SDir, SDirString, TFile As String
    Dim BMCOnePagerFile         As String
    Dim rngMM                   As Range
    Dim BMC, NextBMC, BMCPath, ActFileName, Rng, sFilter As String
    Dim ScreenUpdate            As Variant
    Dim v                       As Variant
    Dim l, lC                   As Integer
    Dim cOP, cFOP, cI, cFI, cE  As Integer
    Dim cLock, CalcMode         As Variant
    Dim MaxEnablers             As Integer
    Dim Change                  As Boolean
    Dim InvalidFileName         As String
    Dim OpenFailedMessage       As String
    Dim OpenFailedCount         As Integer
    Dim sNoOfCanceledEnablers   As String
    
    Dim ProtE As Boolean
    Dim ProtI As Boolean
    Dim ProtT As Boolean
    
    Dim ShowMsg As Boolean
    
    '-------------------------------------------------------------------------
    
    ShowMsg = True
    
    'ThisWorkbook.Activate
    
    ActiveWorkbook.Save
    
    'Stick to the current Worksheet
    
    If IsBMCFile(True) = False Then Exit Function
    
    Application.Calculate
    
    EnablerSheet = Tab_BMCEnablerList       'LoadSetting("EnablerSheetName")
    MarketCol = LoadSetting("MarketCol")
    BGCol = LoadSetting("BGCol")
    TFile = LoadSetting("TemplateFileName")
    SDir = Trim(LoadSetting("OnePagerBGSummary"))
    If SDir = "" Then SDir = "."
    'SDir = CleanFileName((SDir))
    
    MaxEnablers = LoadSetting("MaxEnablers")
    sFilter = LoadSetting("BMCImportFilter")
    NoOfCancelEnablers = 0
    
    StartDate = DateTime.Now
    
    'Disable auto calculation to improve macro performance
    Application.Calculate
    CalcMode = Application.Calculation
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
        
    'Set rWS = Sheets(C_SummaryEnablers)
    Set rWB = ActiveWorkbook
    
    Set rngMM = Range("MarketMappingExtended")
    
    Call GetFileFilterSettings
    
    If ShowMsg Then
        If SDir = LocalFile Then
            SDirString = "This Workbook"
        Else
            SDirString = SDir
        End If
        
        SDirString = InputBox("You are importing BMC PH OnePager files from the following location:" & vbCrLf & _
                              vbCrLf & _
                              "Note: '.' indicates relative to the directory location of this Excel file. " & _
                              "E.g. '.\BMC DACH' takes all files in the relative local directory 'BMC DACH'." & vbCrLf & _
                              vbCrLf & _
                              GetFileFilterMessage, _
                              "", SDirString)
        If SDirString = "" Then
            Call MsgBox("OnePager import cancelled.", vbInformation)
            Exit Function
        Else
            If SDirString <> "This Workbook" Then
                SDir = SDirString
            End If
        End If
    End If
    SDir = CleanFileName((SDir))
    
    StartDate = DateTime.Now

    Call InitColumVariables


    ' get list of OnePager enabler tracking files
    Call SearchFiles((SDir), False)
    Call SaveAndReloadFileList      ' we keep it here outside of SearchFiles as SearchFile is used in a different context as well
    
    If FileListImportCounter = 0 Then
        ' terminate if no file found. Don't change the file (in case of an error at least the latest status will be kept)
        If ShowMsg Then
            ''"In case you are connected to the Philips network via VPN (SafeNet), then please connect your computer directly to the Philips network (e.g. in the office)."
            Call MsgBox("No files found in the given location." & vbCrLf & vbCrLf & _
                    "    '" & SDir & "'" & vbCrLf & vbCrLf & _
                    "When clicking OK you are guided to instructions how to enable your computer in seeing all files on the SharePoint again." & vbCrLf & _
                    "The current file remains unchanged." & vbCrLf & vbCrLf & _
                    "Terminating now the 'OnePager file import' process.", vbOKOnly)
        End If
        
        Call ClearStatusBar
        ThisWorkbook.Sheets(Tab_OPSummaryInstructions).Activate
        ThisWorkbook.Sheets(Tab_OPSummaryInstructions).Select
        Application.Goto reference:=Range("InstructionEnableSPAccess"), Scroll:=True
        Exit Function
    End If

    '------------------------------------------------------------------------------------------------------
    ' Prepare Enabler receiving worksheet  - show all data & clean worksheet
    On Error Resume Next
    Set rWS = rWB.Sheets(EnablerSheet)
    ProtE = UnProtectWS(rWS)
    Call ClearSummaryTab(rWS)
    
    '------------------------------------------------------------------------------------------------------
    ' Prepare Initiative receiving worksheet
    Set rWSInitiative = rWB.Sheets(Tab_BMCInitiativeList)
    ProtI = UnProtectWS(rWSInitiative)
    Call ClearSummaryTab(rWSInitiative)
    
    '------------------------------------------------------------------------------------------------------
    ' Prepare BMC totals receiving worksheet
    Set rWSBMCSummary = rWB.Sheets(Tab_BMCTotalsList)
    ProtT = UnProtectWS(rWSBMCSummary)
    Call ClearSummaryTab(rWSBMCSummary)
    
    rR = 2
    
    rWS.Select
    rWS.Activate
    
    ' mow import all files
    For f = 0 To FileListImportCounter - 1
    
        StatusBarUpdate ("Processing file " & f + 1 & " of " & FileListImportCounter & " (" & FileListImport(f) & ")")
        
        'DoEvents
        rWB.Activate
        rWS.Select
        
        BMCOnePagerFile = FileListImport(f)
        
        Err.Clear
        
        If BMCOnePagerFile <> LocalFile And BMCOnePagerFile <> rWB.Name Then
            Workbooks.Open FileName:=BMCOnePagerFile, UpdateLinks:=False, ReadOnly:=True
            'file has been opended if the actual XLS file name is including the requested file open.
            If InStr(1, BMCOnePagerFile, ActiveWorkbook.Name) > 0 Then
                Err.Clear
            Else
                OpenFailedCount = OpenFailedCount + 1
                OpenFailedMessage = OpenFailedMessage & vbCrLf & _
                                    "File: " & BMCOnePagerFile & vbCrLf & _
                                    "Error: " & Err.Description & vbCrLf
            End If
        End If
        
        If Application.Calculation <> xlManual Then
            Application.Calculation = xlManual
        End If
        
        Application.ScreenUpdating = True
        Application.ScreenUpdating = False
        
        If Err <> 0 Then
            If MsgBox("Failed to open a OnePager file. Do you want to continue with the next file? " & OpenFailedMessage, vbYesNo) <> vbYes Then
                'set trigger to break the for loop
                f = FileListImportCounter
            End If
            
        Else
            
            Set sWB = ActiveWorkbook
            On Error Resume Next
            
            'process each enabler on that OnePager sheet
            cFOP = 0
            For Each sWS In sWB.Sheets
                v = sWS.Name
                If (OP_IsActiveOnePagerPH(sWS, True) = True) Then
                    'ActiveWindow.WindowState = xlMinimized
                    ActiveWindow.WindowState = xlMaximized
                    
                    'rWSBMCSummary.Select
                    'rWSBMCSummary.Activate
                    
                    '1. Transfer Header data
                    'Call PH_TransferBMCTotals(sWS, rWS, rWSInitiative, rWSBMCSummary)
                                        
                    '2. Transfer Aspiration (financial data)
                    '3. Transfer Other aspiration
                    '4. Transfer Comments
                    
                    '5. Transfer Initiatives & Enablers
                    rWS.Select
                    rWS.Activate
                    cFI = 0         'not used for PH OnePager format
                    
                    cE = PH_TransferAllEnablers(sWS, rWS, rWSInitiative, rWSBMCSummary, i)
                    
                    'count number of Enablers
                    rR = rR + cE
                    
                    'count number of OnePager tabs and total Initiatives
                    cI = cI + cFI
                    cOP = cOP + 1
                    
                    'testing only
                    If cFI = 0 Or cOP > cI Then
                        Err.Clear
                    End If
                    
                    cFOP = cFOP + 1
                End If
            Next sWS
            
            If cFOP = 0 Then
                InvalidFileName = AddString(InvalidFileName, BMCOnePagerFile)
                Err.Clear
            End If
            
            Application.Calculate
            'close the file only if it is not the current workbook
            If BMCOnePagerFile <> LocalFile Then
                Application.CutCopyMode = False     'ClearClipboard

                sWB.Close SaveChanges:=False
            End If
        End If
        
        ActiveWorkbook.Save
        Application.ScreenUpdating = True
           
        If f Mod 10 = 9 Then
            Err.Clear
        End If
    Next
 
OP_Skip:

    Application.Calculate
    

'Exit Function

    Application.ScreenUpdating = False

    ' expand formula from first cell in the column to all other used cells in that column.
    Call CheckAndFixFormula(rWS)
    Call CheckAndFixFormula(rWSBMCSummary)
    
    Application.Calculate
           
Format1:

    Call StatusBarUpdate("Format columns ...")
                    
    '--------------------
    ' Format the columns
    '--------------------
    Call FormatEnablerSummaryColumns(rWS)
    Call FormatEnablerSummaryColumns(rWSBMCSummary, Range("BMCTotals_FormatMap_SCol"))

    
'BMCTotals_FormatMap_SCol

    'Set conditional Formatting
    Call Prepare_CF_MgmtStatus_WS(rWS)
    Call Prepare_CF_MgmtStatus_WS(rWSBMCSummary)
    
    'set Data Validation selections
    Call Expand_DV_WS(rWS)
    
    
    Call FixCellNumberFormat(ThisWorkbook)

    rWS.Cells.EntireRow.AutoFit
    rWSBMCSummary.Cells.EntireRow.AutoFit
    
    Application.Calculation = CalcMode
    Application.ScreenUpdating = True
    
    'Re-apply the filters
    Call ApplyFilterToEnablerList_EnablerID

    Call RefreshDashboardMandB      'including refresh of all pivots
    
    Range("LastImportEnablerStatus") = StartDate
    
    Call ProtectWS(rWS, ProtE)
    Call ProtectWS(rWSInitiative, ProtI)
    Call ProtectWS(rWSBMCSummary, ProtT)
    
    Application.ScreenUpdating = True
    
    Call StatusBarUpdate("")
    
    ActiveWorkbook.Save
    
    If NoOfCancelEnablers Then
        sNoOfCanceledEnablers = vbCrLf & "Canceled enablers: " & NoOfCancelEnablers & vbCrLf
    End If

    Call MsgBox(f & " File(s)" & vbCrLf & _
                cOP & " OnePager(s)" & vbCrLf & _
                cI & " Initiative(s)" & vbCrLf & _
                rR - 2 & " Enabler(s)" & vbCrLf & _
                "have been imported." & vbCrLf & _
                sNoOfCanceledEnablers & _
                vbCrLf & _
                "Started at: " & StartDate & vbCrLf & _
                "Ended at:   " & DateTime.Now & vbCrLf & _
                vbCrLf & _
                "Template Version: " & Range("FileVersion") & vbCrLf & _
                "Import directory: " & SDir & vbCrLf & _
                "Import file list date: " & Range("FileCache_LastUpdate"), vbOKOnly)
    
    If InvalidFileName <> "" Then
        Call MsgBox("Files found which seem to have no OnePager worksheet(s) included." & vbCrLf & _
                        vbCrLf & _
                        "File:" & vbCrLf & _
                        InvalidFileName, vbOKOnly)
    End If
    
    If OpenFailedMessage <> "" Then
        'Msgbox can handle only 1000 character message length
        If Len(OpenFailedMessage) > MaxMsgLength Then
            OpenFailedMessage = Left(OpenFailedMessage, MaxMsgLength) & "  ...  (more files)."
        End If
        
        Call MsgBox("Failed to open #" & OpenFailedCount & " file(s)" & vbCrLf & _
                    vbCrLf & _
                    OpenFailedMessage & vbCrLf & _
                    vbCrLf & _
                    "After finishing this import, open the files manually and check if Excel reports any error.", vbOKOnly)
    End If
    
End Function

Function OP_PH_GetInitiativeStart(wsOP As Worksheet) As Range

On Error Resume Next

Set OP_PH_GetInitiativeStart = OP_PH_GetCellStart(wsOP, "Initiative Description")

End Function

Function OP_PH_GetEnablerStart(wsOP As Worksheet) As Range

Set OP_PH_GetEnablerStart = OP_PH_GetCellStart(wsOP, "Enabler Description")

End Function

Function OP_PH_GetCellStart(Sh As Worksheet, CellContent As String, Optional FullContent As Boolean) As Range

Dim lCol    As Long
Dim lRow    As Long
Dim c, r    As Long

On Error Resume Next

Set OP_PH_GetCellStart = Nothing

lRow = LastRow(Sh)
lCol = LastCol(Sh)
lCol = 30

For r = 13 To lRow
    For c = 1 To lCol
        'If UCase(Trim(wsOP.Cells(r, c))) = "INITIATIVE DESCRIPTION" Then
        Err.Clear
        If InStr(1, Trim(Sh.Cells(r, c)), CellContent, vbTextCompare) = 1 Then
            If Err = 0 Then
                If Sh.Cells(r, c).Columns.Hidden = False Then
                    Set OP_PH_GetCellStart = Sh.Cells(r, c)
                    'stop search and exit all for loops
                    r = lRow
                    c = lCol
                Else
                    Err.Clear
                End If
            Else
                Err.Clear
            End If
        End If
    Next
Next

End Function

Function OP_PH_GetCellStartFast(Sh As Worksheet, CellContent As String, Optional FullContent As Boolean) As Range

'currently not in use but may be faster as the other

Set OP_PH_GetCellStartFast = Sh.Cells.Find(What:=CellContent, _
                            After:=Sh.Range("A1"), _
                            LookAt:=xlPart, _
                            LookIn:=xlFormulas, _
                            SearchOrder:=xlByRows, _
                            SearchDirection:=xlPrevious, _
                            MatchCase:=False)

End Function

Function OP_PH_IsValidEnabler(E_StartCell As Range, eIndex As Integer) As Range

Dim Content As String
Dim c       As Integer

On Error Resume Next

Set OP_PH_IsValidEnabler = Nothing

' the start offset may be at 3 to skip the enabler description
For c = 3 To 20
    If Err Then
        Err.Clear
    End If
    'Content = Content & E_StartCell.Cells(eIndex, c)
    If E_StartCell.Cells(eIndex, c) <> "" Then
        Set OP_PH_IsValidEnabler = E_StartCell.Cells(eIndex, 1)
        Exit For
    End If
Next c

'If Content <> "" Then
    'Set OP_PH_IsValidEnabler = E_StartCell.Cells(eIndex, 1)
'End If

End Function

Function OP_PH_GetInitiative(I_StartCell As Range, iNumber As String) As Range

Dim r As Integer

On Error Resume Next

Set OP_PH_GetInitiative = Nothing

r = 2
Do While I_StartCell.Cells(r, 1) <> ""
    Err.Clear
    If (UCase(Trim(I_StartCell.Cells(r, 1))) = UCase(iNumber)) Then
        If Not Err Then
            Set OP_PH_GetInitiative = I_StartCell.Cells(r, 1)
            Exit Do
        End If
    End If
    r = r + 1
Loop

End Function
Function OP_PH_GetLastRowToSearch(E_StartCell As Range) As Long

Dim r As Long
OP_PH_GetLastRowToSearch = 0

'search for the last row in the Enablers range that has no border
For r = 2 To MaxEnablers     'assume maximum of 50 enablers
    If E_StartCell.Cells(r, 1).Borders.LineStyle = xlNone And E_StartCell.Cells(r, 2).Borders.LineStyle = xlNone Then
        r = r - 1
        Exit For
    End If
Next r

OP_PH_GetLastRowToSearch = E_StartCell.row + r

End Function

Function OP_PH_GetMarketName(ws As Worksheet) As String
Dim Fname   As String
Dim MME     As Range
Dim r       As Integer
Dim Market  As String

On Error Resume Next

Fname = ws.Parent.Name
Set MME = ThisWorkbook.Worksheets("Input").Range("MarketMappingExtended")
OP_PH_GetMarketName = ""
'MsgBox MME.Address
For r = 1 To MME.Rows.Count
    Market = Trim(MME.Cells(r, 1))
    If Market <> "" Then
        If InStr(1, Fname, Market, vbTextCompare) Then
            Market = Trim(MME.Cells(r, 2))
            If Market <> "" Then
                OP_PH_GetMarketName = Market
                Exit For
            End If
        End If
    End If
Next r

End Function

Function OP_PH_GetBusinessName(ws As Worksheet) As String

Dim Fname       As String
Dim BBM         As Range
Dim r           As Integer
Dim Business    As String

On Error Resume Next

Fname = ws.Parent.Name
Set BBM = ThisWorkbook.Worksheets("Input").Range("BU_BG_MapingList")
OP_PH_GetBusinessName = ""

For r = 1 To BBM.Rows.Count
    Business = Trim(BBM.Cells(r, 1))
    If Business <> "" Then
        If InStr(1, Fname, "BMC " & Business, vbTextCompare) Then
            Business = Trim(BBM.Cells(r, 2))
            If Business <> "" Then
                OP_PH_GetBusinessName = Business
                Exit For
            End If
        End If
    End If
Next r

If Business = "" Then
    Business = OP_PH_GetCellStart(ws, "BMC Name").Cells(1, 4)
End If

End Function

Function OP_PH_GetCellRange(rngStart As Range, CellContent As String) As Integer

Dim lCol    As Long
Dim c       As Long

On Error Resume Next

'Set OP_PH_GetCellRange = Nothing
OP_PH_GetCellRange = 0

'lCol = LastCol(sh)
lCol = 30

For c = lCol To 1 Step -1
        If InStr(1, Trim(rngStart.Cells(1, c)), CellContent, vbTextCompare) = 1 Then
            If Err = 0 Then
                'Set OP_PH_GetCellRange = sh.Cells(r, c)
                OP_PH_GetCellRange = c
                'stop search and exit all for loops
                Exit For
            Else
                Err.Clear
            End If
        End If
Next


End Function

Function OP_PH_GetEnablerFieldIndex(FieldHeader As String) As Integer

Dim rI          As Integer
Dim E_CellMap   As Range

On Error Resume Next

OP_PH_GetEnablerFieldIndex = 0

rI = 1
Set E_CellMap = Range("_Enabler_OP_PH_Col2SumCol")
Do While E_CellMap.Cells(rI, 1) <> ""
    If E_CellMap.Cells(rI, 4) <> "" And InStr(1, E_CellMap.Cells(rI, 4), FieldHeader, vbTextCompare) > 0 Then
        If Not Err Then
            If E_CellMap.Cells(rI, 5) > 0 Then
                OP_PH_GetEnablerFieldIndex = E_CellMap.Cells(rI, 5)
            Else
                OP_PH_GetEnablerFieldIndex = E_CellMap.Cells(rI, 1)
            End If
            Exit Do
        End If
        Err.Clear
    End If
    rI = rI + 1
Loop

End Function


Function OP_PH_ExtractIndex(rngE As Range, rngI As Range)

Dim rI          As Integer
Dim E_CellMap   As Range

On Error Resume Next

rI = 1
Set E_CellMap = Range("_Enabler_OP_PH_Col2SumCol")
Do While E_CellMap.Cells(rI, 1) <> ""
    If E_CellMap.Cells(rI, 4) <> "" Then
        If Not Err Then
            E_CellMap.Cells(rI, 5) = OP_PH_GetCellRange(rngE, E_CellMap.Cells(rI, 4))
            'the index 1 is for the enabler no. only.
            If (E_CellMap.Cells(rI, 5) = 1) Then
                E_CellMap.Cells(rI, 5) = ""
            End If
        Else
            E_CellMap.Cells(rI, 5) = ""
        End If
        Err.Clear
    Else
        E_CellMap.Cells(rI, 5) = ""
    End If
    rI = rI + 1
Loop

End Function

Function PH_TransferAllEnablers(sWS As Worksheet, rWS As Worksheet, iWS As Worksheet, gWS As Worksheet, iNo As Integer) As Integer

'transfer the initiative data given by "i" into the provided worksheets

Dim sR, rR, sC, rC, r, iRow As Integer
Dim RowEnabler              As Integer
Dim j                       As Integer
Dim iEnabler, rI            As Integer
Dim eCount                  As Integer
Dim a                       As Variant
Dim iRng                    As Range
Dim iNumber                 As String
Dim InitiativeDescription, InitiativeRational, InitiativeLaggingKPI As String
Dim InitiativeKPI_ThisFY    As Range
Dim InitiativeKPI_BMCFY     As Range
Dim C_EnablerDefined        As String
Dim aSource, aTarget        As String
Dim CancelEnabler           As Boolean
Dim I_StartCell             As Range
Dim E_StartCell             As Range
Dim E_Active                As Range
Dim I_Active                As Range
Dim E_CellMap               As Range
Dim O_E_LinkedToInitiative  As Integer

Dim OP_BMCName              As String
Dim OP_Market               As String
Dim lRow, eIndex            As Integer

On Error Resume Next
           
'check if last row is empty in the Enabler summary list
RowEnabler = LastRow(rWS)
If EmptyEnablerRowInSummary(rWS, RowEnabler) = False Then
    RowEnabler = RowEnabler + 1
End If

Call StatusBarUpdate("Import from '" & sWS.Name & "' (" & sWS.Parent.Name & ")")

Set I_StartCell = OP_PH_GetInitiativeStart(sWS)
Set E_StartCell = OP_PH_GetEnablerStart(sWS)

'x sR = sWS.Range("OP_InitiativeSection").row
'x sC = sWS.Range("OP_InitiativeSection").Column

'Only if both ranges are found continue
If Not (I_StartCell Is Nothing Or E_StartCell Is Nothing) Then

    Application.ScreenUpdating = False
    eCount = 0
    lRow = OP_PH_GetLastRowToSearch(E_StartCell)
    Call OP_PH_ExtractIndex(E_StartCell, I_StartCell)

    'business: taken from business name
    OP_BMCName = OP_PH_GetBusinessName(sWS)
    OP_Market = OP_PH_GetMarketName(sWS)
    
    O_E_LinkedToInitiative = OP_PH_GetEnablerFieldIndex("Linked to Initiative")
    eIndex = 2
    For eIndex = 2 To lRow - E_StartCell.row
        
        Set E_Active = OP_PH_IsValidEnabler(E_StartCell, eIndex)
        
        If Not E_Active Is Nothing Then
    
' fix enabler number
    
            Call StatusBarUpdate("Import from '" & sWS.Name & "' Enabler '" & E_StartCell.Cells(eIndex, 1) & "' " & " (" & sWS.Parent.Name & ")")

        'retrieve initiative
            iNumber = E_Active.Cells(1, O_E_LinkedToInitiative) & ""
            
            Set I_Active = OP_PH_GetInitiative(I_StartCell, iNumber)
            
            If (Not I_Active Is Nothing) Then
                InitiativeDescription = I_Active.Cells(1, O_I_Description)
                If (InitiativeDescription = "") Then
                    'InitiativeDescription = I_Active.Cells(0, O_I_Description)
                End If
                
                InitiativeRational = I_Active.Cells(1, O_I_Objective)
                If (InitiativeRational = "") Then
                    'InitiativeRational = I_Active.Cells(0, O_I_Objective)
                End If
                InitiativeLaggingKPI = I_Active.Cells(1, O_I_LaggingKPI)
                Set InitiativeKPI_ThisFY = I_Active.Cells(1, O_I_FY17)
                Set InitiativeKPI_BMCFY = I_Active.Cells(1, O_I_FY18)
            Else
                InitiativeDescription = "See initiatives: " & E_Active.Cells(1, O_E_LinkedToInitiative)
                InitiativeRational = "See initiatives: " & E_Active.Cells(1, O_E_LinkedToInitiative)
                InitiativeLaggingKPI = "See initiatives: " & E_Active.Cells(1, O_E_LinkedToInitiative)
                InitiativeKPI_ThisFY = ""
                InitiativeKPI_BMCFY = ""
            End If
                                        
            Err.Clear
                        
            'copy OnePager BMC Info
                a = CopyCellString((sWS.Parent.Name), rWS.Range(CellColumn("_E_FileName", rWS) & RowEnabler))
                a = CopyCellString((sWS.Parent.FullName), rWS.Range(C_PathFileName & RowEnabler))
                a = CopyCellString((sWS.Name), rWS.Range(C_SheetName & RowEnabler))
            'market to be retrieved from the file name
                a = CopyCellString((OP_Market), rWS.Range(C_Market & RowEnabler))
                a = CopyCellString((OP_BMCName), rWS.Range(C_Business & RowEnabler))
                
                ' freeze iNumber as text - independent what the source format is
                iNumber = "'" & iNumber
                a = CopyCellString((iNumber), rWS.Range(C_InitiativeNo & RowEnabler))
                
            'copy Initiative Details
                Call CopyCellString((InitiativeDescription), rWS.Range(C_InitiativeName & RowEnabler))
                Call CopyCellString((InitiativeRational), rWS.Range(C_InitiativeObjective & RowEnabler))
                Call CopyCellString((InitiativeLaggingKPI), rWS.Range(C_InitiativeLaggingKPI & RowEnabler))
                Call CopyCell(InitiativeKPI_ThisFY, rWS.Range(C_InitiativeKPIThisYear & RowEnabler))
                Call CopyCell(InitiativeKPI_BMCFY, rWS.Range(C_InitiativeKPIBMCYear & RowEnabler))
                                                
                CancelEnabler = False
                
                'now copy the enabler specific items - cell by cell
                rI = 1
                
                Set E_CellMap = Range("_Enabler_OP_PH_Col2SumCol")
                Do While E_CellMap.Cells(rI, 1) <> ""
                    If E_CellMap.Cells(rI, 2) <> "" Then
                        ' from the config table referenced by E_CellMap find the offset for each specific
                        ' field to copy.
                        ' if dynamic offset (column 5 in that table) given, then use it. Otherwise ...
                        If E_CellMap.Cells(rI, 5) > 0 Then
                            aSource = E_Active.Cells(1, E_CellMap.Cells(rI, 5)).Address
                        Else
                            ' use the default offset from column 1
                            aSource = E_Active.Cells(1, E_CellMap.Cells(rI, 1)).Address
                        End If
                        aTarget = CellColumn(E_CellMap.Cells(rI, 2), rWS)
                        aTarget = rWS.Range(aTarget & RowEnabler).Address
                        
                        ' as the enabler number is pretty inconsistent for PH OnePagers
                        ' the numbering is changing from A,B, etc. 1, 2, 3, ... using the
                        ' order shown in the enabler table on the ONePager tab.
                        If E_CellMap.Cells(rI, 2) = "_E_EnablerNo" Then
                            
                            a = CopyCellString((eIndex - 1), rWS.Range(aTarget))
                            
                        ElseIf E_CellMap.Cells(rI, 2) = "_E_Top3" Then
                        
                            If (Len(sWS.Range(aSource)) <= 5 And _
                                InStr(1, sWS.Range(aSource), "Y", vbTextCompare)) Then
                                a = CopyCellString(("Yes"), rWS.Range(aTarget))
                            Else
                                a = CopyCellString(("No"), rWS.Range(aTarget))
                            End If
                    
                        Else
                            If E_CellMap.Cells(rI, 2) = "_E_Q1" Then
                                Err.Clear
                            End If
                            a = CopyCell(sWS.Range(aSource), rWS.Range(aTarget))
                        End If
                        
                        ' check if an enabler has been cancelled via Strike Through
                        Err.Clear
                        a = sWS.Range(aSource).Font.Strikethrough
                        'If Err = False And a Then
                        If Err Or a Then
                            CancelEnabler = True
                        End If
                        
                        'Owner Organisation is getting a special handling
                        If E_CellMap.Cells(rI, 2) = "_OwnerOrg" Then
                            ' extract the leading part (anything before a space, ( or [ ) as Owning Organization
                            rWS.Range(aTarget) = ExtractOwningOrganization(sWS.Range(aSource))
                        End If
                    End If
                    
                    rI = rI + 1
                Loop
                
                'Call UpdateCell(rWS, "_E_AdministrativeRemarks", (RowEnabler), "PH")
                
                'if in any of the enabler cells the font is "Strike Through", then cancel the enabler in the worksheet right away.
                If CancelEnabler Then
                    Call UpdateCell(rWS, "_E_Top3", (RowEnabler), "Cancel")
                    NoOfCancelEnablers = NoOfCancelEnablers + 1
                End If
                
                'Correct the Initiative # and update the I-Description
                'If (iNumber = "X") Then
                '    Call CopyCellString((InitiativeDescription & ": " & rWS.Range(C_InitiativeNo & RowEnabler)), rWS.Range(C_InitiativeName & RowEnabler))
                'End If
                
                'overwrite the Initiative No with the actual value: iNo
                'a = CopyCellString((iNo), rWS.Range(C_InitiativeNo & RowEnabler))

                RowEnabler = RowEnabler + 1
                eCount = eCount + 1
        End If
    Next eIndex
End If

Call ClearStatusBar

PH_TransferAllEnablers = eCount

End Function

Function PH_TransferBMCTotals(sWS As Worksheet, rWS As Worksheet, iWS As Worksheet, gWS As Worksheet) As Integer

'transfer the initiative data given by "i" into the provided worksheets

Dim sR, rR, sC, rC, iRow, sMaxRows As Integer
Dim RowBMC As Integer
Dim iEnabler, rI As Integer
Dim eCount As Integer
Dim a As Variant
Dim iRng As Range
Dim iNumber As String
Dim InitiativeDescription, InitiativeRational, InitiativeLaggingKPI, InitiativeKPI_ThisFY, InitiativeKPI_BMCFY As String
Dim C_EnablerDefined As String
Dim aSource, aTarget As String
Dim s As Range
Dim t As Range
               
'check if last row is empty
RowBMC = LastRow(gWS)
If EmptyEnablerRowInSummary(gWS, RowBMC) = False Then
    RowBMC = RowBMC + 1
End If
sMaxRows = 1000

'gWS.Parent.Activate
'gWS.Select
'gWS.Activate

eCount = 0

If RowBMC < sMaxRows Then

    Application.ScreenUpdating = False
    On Error Resume Next
    gWS.Select
    gWS.Activate
    Err.Clear
    'copy OnePager BMC Info
    a = CopyCellString((sWS.Parent.FullName), gWS.Range(CellColumn("_E_PathFileName", gWS) & RowBMC))
    a = CopyCellString((sWS.Name), gWS.Range(CellColumn("_E_SheetName", gWS) & RowBMC))
                            
    rI = 1
    Do While Range("_Global_OPCol2SumCol").Cells(rI, 1) <> ""
        If Range("_Global_OPCol2SumCol").Cells(rI, 2) <> "" Then
            aSource = sWS.Range(Range("_Global_OPCol2SumCol").Cells(rI, 1)).Address
            aTarget = CellColumn(Range("_Global_OPCol2SumCol").Cells(rI, 2), gWS)
            aTarget = gWS.Range(aTarget & RowBMC).Address
            
            Err.Clear
            Set t = gWS.Range(aTarget)
            Set s = sWS.Range(aSource)
            a = CopyCell(s, t)
            If Range("_Global_OPCol2SumCol").Cells(rI, 4) = "C" And t.HasFormula = False Then
                ' this is a completeness check cell and needs transformation
                ' get original value (which uses the WingDings font for showing "X" and "V" and convert to Yes and No
                Err.Clear
                t.Value = Application.WorksheetFunction.HLookup(s, Range("CompletenessCheckMapping"), 3, False)
                If Err Then
                    t = "?"
                    Err.Clear
                End If
            Else
                Err.Clear
            End If
        End If
        rI = rI + 1
    Loop
    
    eCount = eCount + 1

    Call ClearStatusBar
Else
    Err.Clear
End If

PH_TransferBMCTotals = eCount

End Function
Attribute VB_Name = "a3_PrepTemplate_and_CleanUp"
Option Explicit

Public Const C_SortByColumn = "_E_Enabler_ID"    '"AM"
Public Const TestLastSortColumn = ""


Private Sub Test_CleanUpAllEnablerSummaryWorksheets()

    Call CleanUpAllEnablerSummaryWorksheets
    
End Sub
Function CleanUpAllEnablerSummaryWorksheets(Optional wb As Workbook)
'clear all worksheets that are tagged as an enabler or alike list ("BMC Totals", "BMC Enabler Summary", etc.)
'the tag is indicate by a cell with the name "_E_IsBMCListTab"

    Dim rWS         As Worksheet
    Dim aWB         As Workbook
    Dim ShowMsg     As Boolean
    Dim ShowMsgNow  As Boolean
    
    If wb Is Nothing Then
        Set aWB = ActiveWorkbook
    Else
        Set aWB = wb
    End If
    
    ShowMsg = True
    
    For Each rWS In aWB.Worksheets
        ShowMsgNow = CleanUpEnablerSummaryWorksheet(rWS, ShowMsg)
        If ShowMsgNow = True Then ShowMsg = False       ' recall that once the delete was confirmed and executed
    Next rWS
    'cleanup the catched import file names
    
End Function

Function ClearSummaryTab(rWS As Worksheet)
' used to individual clean a summary like worksheet without any prompt
Call CleanUpEnablerSummaryWorksheet(rWS, False)

End Function
Function CleanUpEnablerSummaryWorksheet(rWS As Worksheet, ShowMsg As Boolean) As Boolean
'   Clean-up the enabler summary worksheet
'
    Dim sR, rR, rC, f, lC, i As Integer
    Dim StartDate As Date
    Dim EnablerSheet As String
    Dim BMC, NextBMC, BMCPath, Rng, SEnablerSheet As String
    Dim ScreenUpdate As Variant
    
    'ActiveWorkbook.Save
    CleanUpEnablerSummaryWorksheet = False
        
    If CellColumn("_E_IsBMCListTab", rWS) = "" Then
        'Ignore the call, this is not a BMC list tab
        Exit Function
    End If
    
    If (ShowMsg = True) Then
        'sheet name in the main source file where the enabler list is taken from (taken from BMC handshake files)
        If MsgBox("This is cleaning up the enabler summary worksheet '" & rWS.Name & "'" & vbCrLf & vbCrLf & _
                  "Making it ready to receive updated BMC Enabler data." & vbCrLf & vbCrLf & _
                  "Do you want to clean the old data?", vbYesNo) = vbNo Then
            Exit Function
        End If
    End If
    
    'Disable auto calculation to improve macro performance
    Application.ScreenUpdating = False
    On Error Resume Next
    rWS.Activate
    rWS.Select
    rWS.showalldata
    ActiveWindow.FreezePanes = False
    Application.Goto reference:=rWS.Range("A1"), Scroll:=True
    
    rR = LastRow(rWS)
        
    If rR <= 1 Then
        MsgBox ("Ups. Row 2 on worksheet '" & rWS & "' is missing.")
    End If
    
    If rR > 2 Then
        rWS.Range("3:" & rR).Delete
    End If
    
    'Clear row 2 where there is no formula
    Call ClearEnablerRowInSummary(rWS, 2)
    
    'Freeze first row
    rWS.Activate
    rWS.Select
    rWS.Range("A1").Select
    With ActiveWindow
        .SplitColumn = 0
        .SplitRow = 1
    End With
    ActiveWindow.FreezePanes = True
    
    Application.Goto reference:=rWS.Range("A" & LastRow(rWS)), Scroll:=True
    
    Application.Calculate
    
    Application.ScreenUpdating = True
    
    CleanUpEnablerSummaryWorksheet = True

End Function

Private Function ClearEnablerRowInSummary(rWS As Worksheet, r As Integer)

'clear each cell where there is no formula in row given by "r"

Dim m, f As Integer

f = 1
m = LastCol(rWS)
For f = 1 To m
    If rWS.Range("A1").Cells(r, f).HasFormula = False Then
        'rWS.Range("a1").Cells(r, f).Select
        rWS.Range("A1").Cells(r, f).Value = ""
    End If
Next

End Function

Function ApplyFilterToEnablerList_EnablerID()
' does it for a to EnablerList worksheet in THIS workbook
    Call ApplyFilterToBMCList(ThisWorkbook.Sheets(Tab_BMCEnablerList), C_SortByColumn)
End Function

Function ApplyFilterToEnablerList_EnablerID_WS(ws As Worksheet)
' does it for a to be given worksheet
    Call ApplyFilterToBMCList(ws, C_SortByColumn)
End Function

Function ApplyFilterToBMCList(wsEnablerSum As Worksheet, SortCol As String)

Dim cWS As Worksheet
Dim lR, lC As Integer
Dim lCol As String
Dim SortByCol As String
Dim rngFilter As Range
Dim lRow, i, r As Long, f As Long
Dim Prot As Variant

Dim ScreenUpdate As Variant

Call LogEventAdd("Start: ApplyFilterToBMCList ... '" & wsEnablerSum.Name & "'", , "FT1")

ScreenUpdate = Application.ScreenUpdating
Application.ScreenUpdating = False

'Set wsEnablerSum = ThisWorkbook.Sheets(Tab_BMCEnablerList)
Prot = UnProtectWS(wsEnablerSum)
'note: the .Column function will only detect the last VISIBLE column
'for this there is just one last column where the header contains white text on white background.
'lRow = LastRow(wsEnablerSum)
'For i = 2 To lRow

'Next i

lR = wsEnablerSum.Range("A" & Rows.Count).End(xlUp).row
lC = wsEnablerSum.Cells(1, Columns.Count).End(xlToLeft).Column
'that last column is finally excluded (-1) from the filter list
lC = lC - 1
lCol = num2col((lC))

Set cWS = ActiveSheet
wsEnablerSum.Activate
wsEnablerSum.Range("A:" & lCol).Select
'MsgBox wsEnablerSum.FilterMode

Selection.AutoFilter
On Error Resume Next
'test if there is an autofilter on the data
Set rngFilter = wsEnablerSum.AutoFilter.Range
If Err Then
    Selection.AutoFilter
End If
Selection.showalldata

SortByCol = CellColumn(SortCol, wsEnablerSum)  'extract the Column label in case column and row are given

If SortByCol <> "" Then

    Dim rngSort As String
    
    Set rngFilter = wsEnablerSum.AutoFilter.Range
    r = rngFilter.Rows.Count
    rngSort = SortByCol & "1:" & SortByCol & r
    
    wsEnablerSum.AutoFilter.Sort.SortFields.Clear
    wsEnablerSum.AutoFilter.Sort.SortFields.Add Key:=Range(rngSort), _
                SortOn:=xlSortOnValues, _
                Order:=xlAscending, _
                DataOption:=xlSortNormal
    With wsEnablerSum.AutoFilter.Sort
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End If

' under some unkonw circumstances the first few columns get hidden and can't be "enabled" again via the user interface
wsEnablerSum.Range("A:K").EntireColumn.Hidden = True       ' to make it show again first hide the columns
wsEnablerSum.Range("A:K").EntireColumn.Hidden = False      ' then unhide them

'scroll to the top of the list
Application.Goto reference:=wsEnablerSum.Range("A1"), Scroll:=True
Call SetFreezePane(wsEnablerSum)

Call ProtectWS(wsEnablerSum, (Prot))

' reset state of last viewing
cWS.Activate
Application.ScreenUpdatingScreenUpdate = ScreenUpdate

Call LogEventAdd("End: ApplyFilterToBMCList ... '" & wsEnablerSum.Name & "'", , "FT1")

End Function

Sub AllWorksheetPivots()

' RefreshPivots

Dim pt              As PivotTable
Dim ws              As Worksheet
Dim wb              As Workbook
Dim ptCount         As Integer
Dim ScreenUpdate    As Boolean
Dim wsCurrent       As Worksheet
Dim DoAll           As Boolean
Dim PtNames         As String
Dim WaitFlag        As Variant

On Error Resume Next

DoAll = False 'True
Call LogEventAdd("START: RefreshPivots" & DoAll)

WaitFlag = LoadAndSetSetting("PleaseWaitFlag", "TRUE")
Application.Calculate
ScreenUpdate = Application.ScreenUpdating

Application.ScreenUpdating = True
Application.ScreenUpdating = False
Application.Calculate


Set wb = ThisWorkbook
Set wsCurrent = ActiveSheet

' unprotect all worksheets and save their current state ...
Call WSGetStatus(wb)

If DoAll Then
    Application.EnableEvents = False
    wb.RefreshAll
    Application.EnableEvents = True
Else
'... refresh all pivot tables on the sheets ...
    For Each ws In wb.Worksheets
        
        For Each pt In ws.PivotTables
            ' seems we need to fresh all caches even if some have the same name. Need to figure out why.
            If True Then ' If (InStr(1, PtNames, pt.Name & ";", vbTextCompare) = 0) Then
                PtNames = PtNames & pt.Name & ";"
                Call StatusBarUpdate("Refresh Pivot table '" & pt.Name & "' in worksheet '" & ws.Name & "' ...")
                Err.Clear
                Application.ScreenUpdating = False
                Call LogEventAdd(pt.Name)
                pt.RefreshTable
                pt.SaveData = True
                If Err Then
                    Err.Clear
                End If
                'pt.Update
                Application.EnableEvents = True
                If Err Then
                    Err.Clear
                End If
            Else
            Err.Clear
          End If
        
        Next pt
    Next ws
End If
'... then re-set the worksheet status
Call WSSetStatus(wb)
    
Call LoadAndSetSetting("PleaseWaitFlag", (WaitFlag))
    
wsCurrent.Activate

Call LogEventAdd("END: RefreshPivots" & DoAll)
    
Call ClearStatusBar

Application.ScreenUpdating = ScreenUpdate

End Sub
Function AllWorksheetPivotsOld()

Dim p1, p2, p3 As Boolean

Dim pt As PivotTable

    p1 = UnProtectWS(Worksheets(Tab_MarketDashboard))
    p2 = UnProtectWS(Worksheets(Tab_BusinessDashboard))
        
    For Each pt In ActiveSheet.PivotTables
            
        pt.RefreshTable
        
    Next pt

    Call ProtectWS(Worksheets(Tab_MarketDashboard), (p1))
    Call ProtectWS(Worksheets(Tab_BusinessDashboard), (p2))

End Function


Private Sub Test_SetDefaultConfig()
 
Call SetDefaultConfigWB(ThisWorkbook, "HS__BMC Enabler Summary")
'Call SetDefaultConfigWB(ThisWorkbook, "US_ASEAN-Pacific__BMC Enabler Summary")
'Call SetDefaultConfigWB(ThisWorkbook, "M_North America__BMC Enabler Summary")
'Call SetDefaultConfigWB(ThisWorkbook, "BG_HI__BMC Enabler Summary")
 
End Sub


Function SetDefaultConfig()
 
Dim wsCurrent As Worksheet

Set wsCurrent = ActiveSheet

Call SetDefaultConfigWB(ThisWorkbook, "", LoadSetting("OP_ClusterType"))
 
wsCurrent.Activate
 
End Function


Function SetDefaultConfigWB(myWB As Workbook, Fname As String, Optional Cluster As String)
'if FName not given, then the myWB workbook name is used as filename
'the filename has some code information like what BG or market the default config setting is for.

Dim FirstW, SecondW, ThirdW, w, BG, Market As String
Dim rngMkt, rngBG   As Range
Dim wsBMC, wsMDB, wsBDB, wsSCDB As Worksheet
Dim protBMC, protMDB, protBDB, protSCDB, protWB As Boolean
Dim CalcMod         As Variant
Dim FileName        As String
Dim TrackingType    As Range
Dim EnablerStatusFilterDefault   As String
Dim MyCluster       As String
Dim BGDir           As String

Static ExclFilterDefault   As String

On Error Resume Next
Err.Clear

'ensure the the WB is active to get the named settings from that workbook.
myWB.Activate

'log this event in the source as well as in the target workbook
Call LogEventAdd("SetDefaultConfigWB Run for file '" & myWB.Name & "'")
Call LogEventAdd("SetDefaultConfigWB Run for file '" & myWB.Name & "'", myWB)

Set TrackingType = Range("TrackingFileType")
            
Call StatusBarUpdate("Check and set default configuration ...")

If LoadSetting("EnableDefaultConfig") <> True Then Exit Function
'On Error Resume Next

' HS_xxxx
' BG_<BG Name>  : BG Summary
' M_<Market>        : Market Summary
' <BG>_<Market>     : Market File
' Greater China, North America have a special treatment as they have a space included
If Fname <> "" Then
    FileName = Fname
Else
    FileName = myWB.Name
End If

FirstW = GetNthWord(FileName, 1)
SecondW = GetNthWord(FileName, 2)
ThirdW = GetNthWord(FileName, 3)

Set rngMkt = Range("MarketAbbreviation")
Set rngBG = Range("BG")
Set rngBG = ThisWorkbook.Worksheets("Input").Range("BG")

Set wsBMC = myWB.Worksheets(Tab_BMCDashboard)
Set wsMDB = myWB.Worksheets(Tab_MarketDashboard)
Set wsBDB = myWB.Worksheets(Tab_BusinessDashboard)
Set wsSCDB = myWB.Worksheets(Tab_StatusCheckDashboard)

protWB = UnProtectWB(myWB)
protBMC = UnProtectWS(myWB.Worksheets(Tab_BMCDashboard))
protMDB = UnProtectWS(myWB.Worksheets(Tab_MarketDashboard))
protBDB = UnProtectWS(myWB.Worksheets(Tab_BusinessDashboard))
protSCDB = UnProtectWS(myWB.Worksheets(Tab_StatusCheckDashboard))

Call UnProtectWS(myWB.Worksheets(Tab_BMCEnablerList))

Range("ShowIsFormula") = False
Range("ShowIsProtected") = False
Range("ECHECK") = False

'store calculation
CalcMod = Application.Calculation
Application.Calculation = xlCalculationManual

'Reset tracking type
TrackingType = "'-"

'set the default enabler status filter on the QPR/MPR dashboards
Err.Clear
EnablerStatusFilterDefault = Range("TrackingColor_Amber")
If Err = 0 And EnablerStatusFilterDefault <> "" Then
    EnablerStatusFilterDefault = EnablerStatusFilterDefault & "/"
End If
Err.Clear
If Range("TrackingColor_Red") <> "" Then
    If Err = 0 Then
        EnablerStatusFilterDefault = EnablerStatusFilterDefault & Range("TrackingColor_Red")
    End If
End If

'default filter in all Enabler tracking files that excludes the Market and BG summary files during data reload from the BMC Tracking files
'ActiveWorkbook.Worksheets(Tab_Settings).
'Range("Filter_FileName_Excl") = "__BMC;Editable;;Checklist;Snapshot"
If ExclFilterDefault = "" Then
    ExclFilterDefault = "__BMC;Editable;Checklist;Snapshot;Template;" & Range("BMCYear") - 1
    If UCase(Range("Filter_FileName_Excl")) <> UCase(ExclFilterDefault) Then
        ExclFilterDefault = InputBox("The exclusion file filter is not matching the default." & vbCrLf & _
                                            "Current value: " & vbCrLf & _
                                            "    " & Range("Filter_FileName_Excl") & vbCrLf & _
                                            "Overwrite with default?" & vbCrLf & _
                                            "(going forward that default will be kept)", _
                                            "Default setting for BMC file search", _
                                            ExclFilterDefault)
    End If
End If
Range("Filter_FileName_Excl") = ExclFilterDefault

Range("Filter_PathName_Incl") = ""
Range("BMCExportFilter") = ""
Range("BMCImportFilter") = ""
Range("BMCExportGrouping") = "MARKET"
Range("DB_BMC_FontSize") = 11

If FirstW = "HS" Or FirstW = "PH" Then
    ' HS_xxxx
    If InStr(1, UCase(FileName), "SUMMARY") > 1 Then
            'This seems to be the HS summary file
            'Import settings
            Range("Filter_FileName_Incl") = ""
            Range("Filter_PathName_Incl") = ""
            Range("BGLocation") = ""
            
            'set "BMC Dashboard
            'wsBMC.Visible = xlSheetVisible
            wsBMC.Range("DB_MarketSelection") = "All"
            wsBMC.Range("DB_Top3Selection") = "Top 3 only"
            wsBMC.Range("DB_BGSelection") = "All"
            wsBMC.Range("DB_BUSelection") = "All"
            
            'set "Market Dashboard"
            'Unhide
            wsMDB.Range("MDB_KPI") = "Top 3 only"
            wsMDB.Range("MDB_Market") = "All"
            wsMDB.Range("MDB_BG") = "All"
            wsMDB.Range("MDB_BU") = "All"
            wsMDB.Range("MDB_Status") = EnablerStatusFilterDefault
            
            'set "Business Dashboard"
            'Hide
            'wsBDB.Visible = xlSheetVisible
            wsBDB.Range("BDB_KPI") = "Top 3 only"
            wsBDB.Range("BDB_Market") = "All"
            wsBDB.Range("BDB_BG") = "All"
            wsBDB.Range("BDB_BU") = "All"
            wsBDB.Range("BDB_Status") = EnablerStatusFilterDefault
            
            'set "Status Check Dashboard"
            'Unhide
            'wsSCDB.Visible = xlSheetVisible
            
            If InStr(1, UCase(FileName), "BG-OP", vbTextCompare) > 1 Then
                TrackingType = "BG-OP"
            Else
                TrackingType = "HS"
            End If
            BG = FirstW
    End If
    
ElseIf FirstW = "M" Then
    
    ' M_<Market>        : Market Summary
    
    If InStr(1, UCase(FileName), "SUMMARY") > 1 Then
        'This seems to be the HS summary file
        Market = ""
        Market = Application.WorksheetFunction.VLookup(SecondW, rngMkt, 1, False)   ' just check if that market name is in the market list
        If Market = "" Then
            Market = Application.WorksheetFunction.VLookup(SecondW & " " & ThirdW, rngMkt, 1, False)
        End If
        
        If Market <> "" Then
            'Import settings
            Range("Filter_FileName_Incl") = Market
            Range("Filter_PathName_Incl") = Market
            Range("BGLocation") = ""
            
            'set "BMC Dashboard
            'wsBMC.Visible = xlSheetVisible
            wsBMC.Range("DB_MarketSelection") = Market
            wsBMC.Range("DB_Top3Selection") = "Top 3 only"
            wsBMC.Range("DB_BGSelection") = "All"
            wsBMC.Range("DB_BUSelection") = "All"
            
            'set "Market Dashboard"
            'Unhide
            'wsMDB.Visible = xlSheetVisible
            wsMDB.Range("MDB_KPI") = "Top 3 only"
            wsMDB.Range("MDB_Market") = Market
            wsMDB.Range("MDB_BG") = "All"
            wsMDB.Range("MDB_BU") = "All"
            wsMDB.Range("MDB_Status") = EnablerStatusFilterDefault
            
            'set "Business Dashboard"
            'Hide
            'wsBDB.Visible = xlSheetHidden
            wsBDB.Range("BDB_KPI") = "Top 3 only"
            wsBDB.Range("BDB_Market") = Market
            wsBDB.Range("BDB_BG") = "All"
            wsBDB.Range("BDB_BU") = "All"
            wsBDB.Range("BDB_Status") = EnablerStatusFilterDefault
            
            'set "Status Check Dashboard"
            'Hide
            'wsSCDB.Visible = xlSheetHidden
            
            TrackingType = "Market"
            
        End If
    End If

ElseIf FirstW = "BG" Then
    
    ' BG_<BG Name>  : BG Summary
    
     '.. and see if this is a valid BG
    BG = Application.WorksheetFunction.VLookup(SecondW, rngBG, 1, False)
    Err.Clear
    
    If BG <> "" Then
            'this is a BG file. Check if it is a market specific or the BG Summary
            'Import settings
            Range("Filter_FileName_Incl") = BG & "_"    ' "_" is importent as some market names include the BG string (E.g. DI in NorDIcs)
            Range("Filter_PathName_Incl") = ""      ' no need to "Incl" the BG name into the path name as the BG name is already part of the target directory
            Range("BGLocation") = BG
            
            'set the import directory specifically as for OnePager the import directory must be given.
            Range("OnePagerBGSummary") = "."
    
            'set "BMC Dashboard
            'wsBMC.Visible = xlSheetVisible
            wsBMC.Range("DB_MarketSelection") = "All"
            wsBMC.Range("DB_Top3Selection") = "Top 3 only"
            wsBMC.Range("DB_BGSelection") = BG
            wsBMC.Range("DB_BUSelection") = "All"
            
            'set "Market Dashboard"
            'Unhide
            'wsMDB.Visible = xlSheetVisible
            wsMDB.Range("MDB_KPI") = "Top 3 only"
            wsMDB.Range("MDB_Market") = "All"
            wsMDB.Range("MDB_BG") = BG
            wsMDB.Range("MDB_BU") = "All"
            wsMDB.Range("MDB_Status") = EnablerStatusFilterDefault
            
            'set "Business Dashboard"
            'Hide
            'wsBDB.Visible = xlSheetVisible
            wsBDB.Range("BDB_KPI") = "Top 3 only"
            wsBDB.Range("BDB_Market") = "All"
            wsBDB.Range("BDB_BG") = BG
            wsBDB.Range("BDB_BU") = "All"
            wsBDB.Range("BDB_Status") = EnablerStatusFilterDefault
            
            'set "Status Check Dashboard"
            'Unhide
            wsSCDB.Visible = xlSheetVisible
            
            TrackingType = "BG"
    End If
    
ElseIf FirstW = "BG-OP" Then
    
    ' BG_<BG Name>  : BG Summary
    
     '.. and see if this is a valid BG
    BG = Application.WorksheetFunction.VLookup(SecondW, rngBG, 1, False)
    Err.Clear
    
    If BG <> "" Then
            'this is a BG One Pager import summary file.
            'Import settings
            Range("Filter_FileName_Incl") = ""
            If BG = "All" Then
                Range("Filter_PathName_Incl") = ""
            Else
                Range("Filter_PathName_Incl") = BG
            End If
            Range("BGLocation") = BG
            Range("OnePagerBGSummary") = ""
    
            'set "BMC Dashboard
            'wsBMC.Visible = xlSheetHidden
            'wsBMC.Visible = xlSheetVisible
            wsBMC.Range("DB_MarketSelection") = "All"
            wsBMC.Range("DB_Top3Selection") = "Top 3 only"
            wsBMC.Range("DB_BGSelection") = BG
            wsBMC.Range("DB_BUSelection") = "All"
            
            'set "Market Dashboard"
            'Unhide
            'wsMDB.Visible = xlSheetVisible
            wsMDB.Range("MDB_KPI") = "Top 3 only"
            wsMDB.Range("MDB_Market") = "All"
            wsMDB.Range("MDB_BG") = BG
            wsMDB.Range("MDB_BU") = "All"
            wsMDB.Range("MDB_Status") = EnablerStatusFilterDefault
            
            'set "Business Dashboard"
            'Hide
            'wsBDB.Visible = xlSheetVisible
            wsBDB.Range("BDB_KPI") = "Top 3 only"
            wsBDB.Range("BDB_Market") = "All"
            wsBDB.Range("BDB_BG") = BG
            wsBDB.Range("BDB_BU") = "All"
            wsBDB.Range("BDB_Status") = EnablerStatusFilterDefault
            
            'set "Status Check Dashboard"
            'Unhide
            'wsSCDB.Visible = xlSheetVisible
            
            TrackingType = "BG-OP"
    End If
        
Else
    ' Market BG Dashboard - first word is the BG - second is the market
    BG = Application.WorksheetFunction.VLookup(FirstW, rngBG, 1, False)
    BG = Application.WorksheetFunction.VLookup(FirstW, rngBG, 1, False)
    Err.Clear
    Market = ""
    
    'On Error Resume Next
    Market = Application.WorksheetFunction.VLookup(SecondW, rngMkt, 1, False)   ' just check if that market name is in the market list
    If Market = "" Then
        Market = Application.WorksheetFunction.VLookup(SecondW & " " & ThirdW, rngMkt, 1, False)
        If Market = "" Then
            'Market = SecondW
        End If
    End If
        
    Err.Clear
    
    If Market <> "" And BG <> "" Then
            'this is a BMC (Market x BG) file.
            
            'Import settings
            Range("Filter_FileName_Incl") = BG
            Range("Filter_PathName_Incl") = ""
            Range("BGLocation") = BG
    
            'set "BMC Dashboard
            'wsBMC.Visible = xlSheetVisible
            wsBMC.Range("DB_MarketSelection") = Market
            wsBMC.Range("DB_Top3Selection") = "Top 3 only"
            wsBMC.Range("DB_BGSelection") = BG
            wsBMC.Range("DB_BUSelection") = "All"
            
            'set "Market Dashboard"
            'Unhide
            'wsMDB.Visible = xlSheetHidden
            wsMDB.Range("MDB_KPI") = "Top 3 only"
            wsMDB.Range("MDB_Market") = Market
            wsMDB.Range("MDB_BG") = BG
            wsMDB.Range("MDB_BU") = "All"
            wsMDB.Range("MDB_Status") = EnablerStatusFilterDefault
            
            'set "Business Dashboard"
            'Hide
            'wsBDB.Visible = xlSheetHidden
            wsBDB.Range("BDB_KPI") = "Top 3 only"
            wsBDB.Range("BDB_Market") = Market
            wsBDB.Range("BDB_BG") = BG
            wsBDB.Range("BDB_BU") = "All"
            wsBDB.Range("BDB_Status") = EnablerStatusFilterDefault
            
            'set "Status Check Dashboard"
            'Hide
            'wsSCDB.Visible = xlSheetHidden

            TrackingType = "BMC"
        
        'remove some text boxes and buttons when this is a market BMC enabler file
        Call CleanShapesForBMC(myWB, TrackingType.Text)
    Else
        If InStr(1, FileName, LoadSetting("OP_TemplateFileName"), vbTextCompare) > 0 Then
            TrackingType = "OP"
        End If
    End If
End If

'If Err Then Stop
Err.Clear

'Set Import Source directory
If Cluster = "" Then
    If BG = "PH" Or BG = "HS" Then
        MyCluster = BG
    Else
        MyCluster = UCase(Application.WorksheetFunction.VLookup(BG, Range("BG2ClusterMap"), 2, False))
    End If
Else
    MyCluster = Cluster
End If

If BG <> "PH" And BG <> "HS" And BG <> "" Then
    BGDir = "\" & BG
Else
    BGDir = ""
End If
    
If MyCluster <> "" And Err = 0 Then
    Range("OP_ClusterType") = MyCluster
    If MyCluster = "PH" Then
        Range("ImportSourceDir") = LoadSetting("ImportSourceDirDefaultPH") & BGDir
    Else
        Range("ImportSourceDir") = LoadSetting("ImportSourceDirDefaultHS") & BGDir
    End If
Else
    If MsgBox("Can't associated BG with a cluster (HS v. PH)." & vbCrLf & _
              "BG: " & BG & vbCrLf & _
              "Cluster: " & MyCluster & vbCrLf & _
              "File: " & myWB.Name & vbCrLf & _
              vbCrLf & _
              "Continue?", vbYesNo) <> vbYes Then
        Stop
    End If
End If

Call CleanShapesTextBox(myWB.Worksheets(Tab_Input))
Call CleanShapesButtons(myWB.Worksheets(Tab_Input))

Call SetTabDefaultStatus(myWB, TrackingType.Text)
Call SetDefaultInstructions(myWB, TrackingType.Text)
        
' Remove from the finance tab all items that do not belong to this files scope of Market and BG
Call CleanFinanceTab(myWB.Sheets(Tab_Financials), Market, (BG))

'refresh all formulas ...
Application.Calculate
'... and set the original calc mode
Application.Calculation = CalcMod

'myWB.Worksheets(Tab_Settings).Visible = xlSheetHidden

'Call ProtectWS(myWB.Worksheets(Tab_BMCDashboard), True)
'Call ProtectWS(myWB.Worksheets(Tab_MarketDashboard), True)
'Call ProtectWS(myWB.Worksheets(Tab_BusinessDashboard), True)
'Call ProtectWS(myWB.Worksheets(Tab_BMCEnablerList), True)
'Call ProtectWS(myWB.Worksheets(Tab_StatusCheckDashboard), True)

Call ClearStatusBar

'If protWB = True Then
Call ProtectWB(myWB)

End Function

Private Sub Test_SetTabDefaultStatus()
    Call SetTabDefaultStatus(ActiveWorkbook, Range("TrackingFileType"))
    'Call SetTabDefaultStatus(ActiveWorkbook, "Market")
End Sub
Function SetTabDefaultStatus(wb As Workbook, TrackingType As String)

Dim ws              As Worksheet
Dim wsActionOffset  As Integer
Dim wsProt          As Boolean
Dim wbProt          As Boolean
Dim ActionTag       As String
Dim Action          As String
Dim wsSet           As Worksheet
Dim wbAct           As Workbook
Dim wsAct           As Worksheet
'WSAction_TemplateSummary

On Error Resume Next

Application.ScreenUpdating = False

'Take settings from the workbook to which this VBA code belongs
Set wsSet = ThisWorkbook.Worksheets(Tab_Settings)

'Set wsSet = wb.Worksheets(Tab_Settings)

'save last worksheet
Set wsAct = ActiveSheet
Set wbAct = ActiveWorkbook

wbProt = UnProtectWB(wb)

wsActionOffset = 0
If InStr(1, wb.Name, "Design", vbTextCompare) = 0 Then      'only do the status setting if this is not the DESIGN file
    Select Case UCase(TrackingType)
    Case "TEMPLATE"
        wsActionOffset = wsSet.Range("WSAction_TemplateSummary").Column - wsSet.Range("WSAction_Name").Column + 1
    Case "BG-OP"
        wsActionOffset = wsSet.Range("WSAction_TemplateOnePagerSummary").Column - wsSet.Range("WSAction_Name").Column + 1
    Case "OP"
        wsActionOffset = wsSet.Range("WSAction_TemplateOnePager").Column - wsSet.Range("WSAction_Name").Column + 1
    Case Else
        wsActionOffset = wsSet.Range("WSAction_TrackingFile" & TrackingType).Column - wsSet.Range("WSAction_Name").Column + 1
        'wsActionOffset = 0
    End Select
End If

If wsActionOffset > 0 Then
    For Each ws In wb.Worksheets
        
        Err.Clear
        
        Action = UCase(Application.WorksheetFunction.VLookup(ws.Name, wsSet.Range("WorksheetAction"), wsActionOffset, False))
        Call StatusBarUpdate("Set status '" & Action & "' for worksheet " & "'" & ws.Name & "'")
        If Err = 0 Then
            'keep the sequence of the ActionTag check.
            wsProt = UnProtectWS(ws)
            
            'scroll the worksheet to the top left
            ws.Visible = xlSheetVisible
            ws.Select
            ActiveWindow.ScrollRow = 1
            ActiveWindow.ScrollColumn = 1
            ws.Range("A1").Select
        
            ActionTag = "HIDE"
            If InStr(1, Action, ActionTag, vbTextCompare) > 0 Then
                Action = Replace(Action, ActionTag, "", , , vbTextCompare)
                ws.Visible = xlSheetHidden
            Else
                ws.Visible = xlSheetVisible
            End If
            Call ProtectWS(ws, wsProt)
            
            ActionTag = "UNPRO"
            If InStr(1, Action, ActionTag, vbTextCompare) > 0 Then
                Action = Replace(Action, ActionTag, "", , , vbTextCompare)
                Call UnProtectWS(ws)
            End If
            
            ActionTag = "PROT"
            If InStr(1, Action, ActionTag, vbTextCompare) > 0 Then
                Action = Replace(Action, ActionTag, "", , , vbTextCompare)
                Call ProtectWS(ws, True)
            End If
            
            ActionTag = "DEL"
            If InStr(1, Action, ActionTag, vbTextCompare) > 0 Then
                Action = Replace(Action, ActionTag, "", , , vbTextCompare)
                wsProt = UnProtectWS(ws)
                ' don't show any warning message here
                Call DeleteWS(ws)
            End If
            
            'check for any unknown ActionTag that remains.
            Action = Replace(Action, ";", "", , , vbTextCompare)
            Action = Replace(Action, ",", "", , , vbTextCompare)
            Action = Replace(Action, " ", "", , , vbTextCompare)
            If Action <> "" Then
                'ups an action tag was used where no Action is defined here
                Call LogEventAdd("Unknown tab status tag: " & Action)
                Err.Clear
            End If
        Else
            Err.Clear
        End If
        
        Err.Clear
        
        If ws.Visible = xlSheetVisible Then
            ws.Activate
            Action = wsSet.Range("WSAction_Zoom").Column - wsSet.Range("WSAction_Name").Column + 1
            If IsNumeric(Action) Then
                Action = UCase(Application.WorksheetFunction.VLookup(ws.Name, wsSet.Range("WorksheetAction"), Action, False))
                If IsNumeric(Action) Then
                    ActiveWindow.Zoom = Action
                    ActiveWindow.DisplayGridlines = False
                End If
            End If
        End If
        

    Next
End If

If wbProt Then Call ProtectWB(wb)

wbAct.Activate
wsAct.Activate

Call ClearStatusBar

End Function

Function SetDefaultConfigWB2(myWB As Workbook)

Dim FirstW, SecondW, w, BG, Market As String
Dim rngMM  As Range

'first word is a market => then this is a market file; set the default accordingly

w = GetNthWord(myWB.Name, 2)

On Error Resume Next

Set rngMM = Range("MarketAbbreviation")
    
' HS_xxxx
' <BG>_<No market>  : BG Summary
' <BG>_<Market>     : Market File
' M_<Market>        : Market Summary
' Greater China, North America have a special treatment as they have a space included

Market = Application.WorksheetFunction.VLookup(w, rngMM, 1, False)
Err.Clear
If GetNthWord(myWB.Name, 1) = "HS" Or Market <> "" Then
    If InStr(1, UCase(myWB.Name), "SUMMARY") > 1 Then
        'This seems to be a market summary file
    

        Range("Filter_FileName_Incl") = Market
        Range("Filter_PathName_Incl") = ""
        Range("BGLocation") = ""
    End If
ElseIf InStr(1, UCase(myWB.Name), "BG") = 1 Then
    'take the second word in the name ...
    w = GetNthWord(myWB.Name, 2)
        
    Set rngMM = Range("BG")
    
    '.. and see if this is a valid BG
    BG = Application.WorksheetFunction.VLookup(w, rngMM, 1, False)
    Err.Clear
    If BG <> "" Then
        Range("Filter_FileName_Incl") = BG
        Range("Filter_PathName_Incl") = ""
        Range("BGLocation") = BG
    End If
Else    ' HS

End If

End Function
Private Sub test_Scroll()
Dim ws As Worksheet
For Each ws In ActiveWorkbook.Worksheets

    If ws.Visible Then
        Application.ScreenUpdating = False
        ws.Select
        ActiveWindow.ScrollRow = 1
        ActiveWindow.ScrollColumn = 1
        ws.Range("A1").Select
    End If
Next
End Sub
Function Test_GetNthWord()
    'MsgBox GetNthWord(Activeworkbook.Name, 1)
    MsgBox GetNthWord("Test    x x x   __2", 6)
End Function

Private Sub test_NthWordWithInput()
Dim w1, w2 As String
Static n As String

n = InputBox("Filename:")
w1 = GetNthWord(n, 1)
w2 = GetNthWord(n, 2)
MsgBox (n & vbCrLf & vbCrLf & w1 & vbCrLf & w2)

End Sub

Function GetNthWord(FileName As String, iWord As Integer) As String

Dim tArray() As String
Dim dString As String
On Error Resume Next


dString = Trim(FileName)

Do While (InStr(1, dString, "__", vbTextCompare) > 0)
  dString = Replace(dString, "__", "_")
Loop

tArray = Split(dString, "_")

GetNthWord = Trim(tArray(iWord - 1))

End Function


Private Sub PrepTemplateFile()

'------------------------------------------------------------------------------------------------------
'converts the current file into the BMC BG / HS Summary Template file. clearing all data and setting some defaults.
'------------------------------------------------------------------------------------------------------

Dim ws              As Worksheet
Dim wsSetting       As Worksheet
Dim wbT             As Workbook
Dim ThisFileName    As String

Dim Action, BMCPath, BMCFile As String
Dim Unknown         As Boolean
Dim Rng             As Range
Dim Prot            As Boolean
Dim protWB          As Boolean

If MsgBox("You are about to switch this file into the master 'BMC Enabler Summary' template file which " & _
          "is being used to create later the BG / Market specific enabler import files." & vbCrLf & _
          vbCrLf & _
          "Do you want to do this?", _
          vbOKCancel) <> vbOK Then
    Exit Sub
End If

Set wbT = ActiveWorkbook
Set wsSetting = wbT.Worksheets(Tab_Settings)
wsSetting.Range("BMCYear") = Year(Now())
Application.Calculate

ThisWorkbook.Save
ThisFileName = ThisWorkbook.path & "\" & ThisWorkbook.Name

BMCFile = LoadSetting("TemplateFileName")
If MsgBox("Do you want to first save the file as the template file '" & BMCFile & "'?", vbOKCancel) = vbOK Then
    
    BMCPath = ThisWorkbook.path & "\" & BMCFile
    ThisWorkbook.SaveAs FileName:=BMCPath, CreateBackup:=False  'FileFormat:=ThisWorkbook.FileFormat,

Else
    If MsgBox("Warning: all Enabler data is being cleared. Do you want to do this?", vbOKCancel) <> vbOK Then
        Exit Sub
    End If
End If

If ActiveWorkbook.Name <> BMCFile Or Err <> 0 Then
    MsgBox ("Something went wrong when saving the workfile as template file. " & vbCrLf & _
            Err.Description)
    Exit Sub
End If

protWB = UnProtectWB(wbT)
    
Set Rng = Range("WorksheetAction")

Call CleanUpAllEnablerSummaryWorksheets(wbT)
Call HideEnablerSummaryColumns(wbT)

On Error Resume Next

For Each ws In wbT.Worksheets
    Err.Clear
    Unknown = False
    
    ws.Visible = xlSheetVisible
    
    If ws.Visible Then
        ws.Select
        
        ' Instruction tabs; ensure that they show the first row.
        Err.Clear
        Range("InstructionVBANotEnabled").Select
        If Err = 0 Then
            'scroll window to the top
            ActiveWindow.ScrollRow = 1
        End If

        'set default Zoom
        ws.Activate
        Action = UCase(Application.WorksheetFunction.VLookup(ws.Name, Rng, 6, False))
        If Action <> "" Then
            ActiveWindow.Zoom = Action
            ActiveWindow.DisplayGridlines = False
        End If
        
        Err.Clear
        
        'DELETE
        Action = UCase(Application.WorksheetFunction.VLookup(ws.Name, Rng, 2, False))
        If Err Then
            Unknown = True
        Else
            If (Action = "YES") Then
                'If MsgBox("The following worksheet is set to be deleted. Confirm?" & vbCrLf & vbCrLf & ws.Name, vbYesNo) = vbYes Then
                    'Call UnProtectWS(ws)
                    Call DeleteWS(ws)
                'End If
            End If
        End If
        Err.Clear
        
        'Protect
        Action = UCase(Application.WorksheetFunction.VLookup(ws.Name, Rng, 3, False))
        If Err Then
            Unknown = True
        Else
            If (Action = "YES") Then
                Call ProtectWS(ws, True)
            Else
                Call UnProtectWS(ws)
            End If
        End If
        Err.Clear
        
        'Hidden
        Action = UCase(Application.WorksheetFunction.VLookup(ws.Name, Rng, 4, False))
        If Err Then
            Unknown = True
        Else
            Prot = UnProtectWS(ws)
            If (Action = "YES") Then
                ws.Visible = xlSheetHidden
            Else
                ws.Visible = xlSheetVisible
            End If
            Call ProtectWS(ws, Prot)
        End If
        
        'scroll each tab to the top left cell
        ActiveWindow.ScrollRow = 1
        ActiveWindow.ScrollColumn = 1
        ws.Range("A1").Select
        Err.Clear
    Else
    End If
    
    If Unknown Then
        If (MsgBox("Don't known what todo with the worksheet named:" & vbCrLf & vbCrLf & ws.Name & vbCrLf & vbCrLf & "Delete it?", vbYesNo) = vbYes) Then
            Call UnProtectWS(ws)
            ws.Delete
        End If
    End If
    
Next ws

Err.Clear
wsSetting.Range("Filter_FileName_Incl") = ""      'set when the final file (OnePager Summary) template is created
wsSetting.Range("Filter_FileName_Excl") = ""      'set when the final file (OnePager Summary) template is created
wsSetting.Range("OnePagerBGSummary") = ""      'set when the final file (OnePager Summary) template is created

wsSetting.Range("FixNumberFormat") = ""
wsSetting.Range("FixNumberFormatCounter") = 0
wsSetting.Range("LastImportEnablerStatus") = ""
wsSetting.Range("LastSaved") = ""
wsSetting.Range("OP_FileType") = ""

wsSetting.Range("TrackingFileType") = "TEMPLATE"
wsSetting.Range("HISecialFileImport") = ""

wsSetting.Range("BMCExportFilter") = ""
wsSetting.Range("BMCImportFilter") = ""
wsSetting.Range("EnablerWorkbookForExport") = ""
Application.Calculate

wbT.Worksheets(Tab_FileImportList).Range("A:A").ClearContents
If Err Then
    Call LogEventAdd("Reset of default config values failed (PrepTemplateFile).")
End If
Err.Clear

'refresh all pivot tables
Call AllWorksheetPivots

'Clean Dashboard view
Call RefreshDashboardView
Call RefreshDashboardMandB

Call SetTabDefaultStatus(wbT, wsSetting.Range("TrackingFileType"))

wbT.BuiltinDocumentProperties("title") = Range("ET_PropertyTitle")
wbT.BuiltinDocumentProperties("Comments") = Range("FileVersion")

wbT.Worksheets(Tab_Instructions).Select
wbT.Worksheets(Tab_Instructions).Activate

Call LogEventClear(wbT)
Call LogEventClear(wbT, Tab_LogEventListSummary)

Call ProtectWB(wbT)

Prot = ProtectedVBProject(wbT)

wsSetting.Range("Filter_PathName_Incl") = InputBox("Set inclusion filter for Path names to import:", , "")
wsSetting.Range("_S_G_LogLevel") = InputBox("Set Log Level:", , wsSetting.Range("_S_G_LogLevel"))

wbT.Save
ThisWorkbook.Save

If Prot Then
    Call MsgBox("File prepared. VBA code is protected as well.")
Else
    Call MsgBox("File prepared. Please lock as well the VBA code manually.")
End If

If (MsgBox("Do you want to open the original file again?" & vbCrLf & vbCrLf & ThisFileName, vbYesNo) = vbYes) Then
    Workbooks.Open FileName:=ThisFileName, UpdateLinks:=False, ReadOnly:=False
    If Err Then
    Else
            'ThisWorkbook.Close
    End If
End If

On Error GoTo 0

End Sub
Function SetDefaultWSZoominWB()

Dim ws As Worksheet

For Each ws In ActiveWorkbook.Sheets
    If ws.Range("") Then
        ActiveWindow.Zoom = 70
    Else
    End If
Next

End Function
    
Function HideEnablerSummaryColumns(Optional wb As Workbook)

'hide all colums that are tagged as "Hidden" (indentified via a named cells) in any worksheet
'of the Active Workbook or provided workbook

    Dim rWS As Worksheet
    Dim rWB As Workbook
    Dim Prot As Boolean
    Dim protWB As Boolean
    Dim EnablerSheet, fC, lC, Rng As String
    
    If wb Is Nothing Then
        Set rWB = ActiveWorkbook
    Else
        Set rWB = wb
    End If
    
    On Error Resume Next
    
    For Each rWS In rWB.Sheets
    
        Err.Clear
        '------------------------------------------------------------------------------------------------------
        ' Clean worksheet
        fC = num2col(rWS.Range("FirstColumn2Hide").Column)
        lC = num2col(rWS.Range("LastColumn2Hide").Column)
        If Err = 0 And fC > 0 And lC > 0 Then
            Rng = fC & ":" & lC
            'rWS.Columns(Range("FirstColumn2Hide").Column, Range("LastColumn2Hide").Column).Hidden = True
            protWB = UnProtectWB(rWS.Parent)
            Prot = UnProtectWS(rWS)
            rWS.Range(Rng).EntireColumn.Hidden = True
            Call ProtectWS(rWS, Prot)
            If protWB Then Call ProtectWB(rWS.Parent)
            'MsgBox (rWS.Name)
        End If
        
    Next
End Function

Private Sub Test_CleanShapes()
'delete all Shapes from the BMC "Enabler Summary List"
'Call CleanShapes(ThisWorkbook.Sheets(Tab_BMCEnablerList), msoTextBox)
Call CleanShapes(ActiveSheet)
End Sub

Function CleanShapesTextBox(ws As Worksheet, Optional sType As Variant)
    Call CleanShapes(ws, msoTextBox)
End Function
Function CleanShapesButtons(ws As Worksheet)
    Call CleanShapes(ws, msoFormControl)
End Function

Function CleanShapesEnabler(ws As Worksheet, Optional sType As Variant)

'delete all Shapes from the provide type on the given worksheet

Dim Sh      As Shape
Dim l       As String
Dim aType   As Variant

On Error Resume Next

If sType = "" Then
    aType = msoTextBox  'default ShapeType to remove
Else
    aType = sType
End If

If ws.Name = Tab_BMCEnablerList Then
    For Each Sh In ws.Shapes
        If Sh.Type = aType Then
            Sh.Delete
            'ActiveSheet.Shapes.Range(Array("TextBox 1")).Select
        End If
    Next Sh
End If

On Error GoTo 0

End Function
Function CleanShapes(ws As Worksheet, Optional sType As Variant)

'delete all Shapes from the provide type on the given worksheet

Dim Sh      As Shape
Dim l       As String
Dim aType   As Variant

On Error Resume Next

If sType = "" Then
    aType = msoTextBox  'default ShapeType to remove
Else
    aType = sType
End If

For Each Sh In ws.Shapes
        l = ws.Shapes.Count
        If Sh.Type = aType Then
            Sh.Delete
            'ActiveSheet.Shapes.Range(Array("TextBox 1")).Select
        'ElseIf sh.Type = msoFormControl Then
        '    sh.Delete
        Else
            Err.Clear
        End If
Next Sh

On Error GoTo 0

End Function

Function Test_CleanShapesForBMC()

Call CleanShapesForBMC(ThisWorkbook, "BMC")

End Function

Function CleanShapesForBMC(myWB As Workbook, FileType As String)

'delete all Shapes from the provide type on the given worksheet

Dim Sh      As Shape
Dim l       As Integer
Dim ws      As Worksheet
Dim Del     As Boolean
Dim d       As Integer

On Error Resume Next

'skip that procedure if the file is not a markets BMC enabler tracking file or if the workbook is the Design file
If FileType <> "BMC" Or InStr(1, myWB.Name, "Design") > 0 Then
    Exit Function
End If

'Tab_BMCInitiativeList
'Tab_BMCTotalsList
'Tab_StatusCheckDashboard
'Tab_MarketDashboard
'Tab_BusinessDashboard

'Set ws = ActiveSheet
For Each ws In myWB.Worksheets
  If ws.Visible = xlSheetVisible Then
    For Each Sh In ws.Shapes
        DoEvents
        l = ws.Shapes.Count     'testing only
        Err.Clear
        Del = False
        'delete any import data button
        If Sh.Type = msoFormControl Then
                If InStr(1, Sh.OnAction, "ImportMarketTrackingFiles", vbTextCompare) > 0 Then
                    If Err = 0 Then
                        d = d + 1
                        Del = True
                        'MsgBox (sh.Name)
                    End If
                End If
        End If
        
        'delete any text boxes that are market for removal in the markets BMC Tracking file
        If Sh.Type = msoTextBox Then
            If Sh.Title = "BMC_REMOVE" Then
                If Err = 0 Then
                    d = d + 1
                    Del = True
                End If
            End If
            Err.Clear
        End If
        
        If Del Then
            Sh.Delete
        End If
    Next Sh
  End If
Next ws

On Error GoTo 0

End Function

Private Sub Test_CleanFinanceTab()
Call CleanFinanceTab(ThisWorkbook.Sheets("Financials (2)"), "", "DELETE")
End Sub

Function CleanFinanceTab(ws As Worksheet, Market As String, BG As String) As Boolean
'Clears the finance sheet except for those rows where Market and BG matches
Dim r, l As Long
Dim row As String
Dim Clean As Boolean
Dim b, m As String
Dim Prot, Calc As Variant

'In case there is an error (e.g. from Vlookup) don't popup an error message
On Error Resume Next

b = Trim(UCase(BG))
m = Trim(UCase(Market))
'if market is given get the equivalent market name in the finance tab
If m <> "" Then m = Trim(UCase(Application.WorksheetFunction.VLookup(m, Range("Abbreviation2Market"), 2, False)))

'"ALL" indicates to keep all data
If m = "ALL" Then m = ""
If b = "ALL" Then b = ""

Calc = Application.Calculation
Application.Calculation = xlCalculationManual
Prot = UnProtectWS(ws)

'call unprotectws(ws)
l = LastRow(ws)
r = 2
Do While r <= l
    Clean = True
    If Trim(UCase(ws.Range("A" & r))) = m Or m = "" Then
        If Trim(UCase(ws.Range("E" & r))) = b Or b = "" Then
            Clean = False
        ElseIf b = "MA-TC" Then
            If Trim(UCase(ws.Range("E" & r))) = "MA" Or Trim(UCase(ws.Range("E" & r))) = "TC" Or Trim(UCase(ws.Range("E" & r))) = "S&RC" Then
                Clean = False
            End If
        End If
    End If
    If Clean Then
        'ws.Rows(r).Select
        'Err.Clear
        'ws.Rows(r).ClearContents
        ws.Range("A" & r & ":E" & r).ClearContents
    End If
    r = r + 1
Loop

'ensure the tab is hidden before being protected

ws.Visible = xlSheetHidden

Application.Calculation = Calc

Call ProtectWSFullLock(ws, True)

End Function

Private Sub Test_SetDefaultInstructions()
Call SetDefaultInstructions(ActiveWorkbook, "TEMPlate")
End Sub

Function SetDefaultInstructions(wb As Workbook, Optional FileType As String) As Worksheet

'sets the default "instruction" tab active depending on the FileType.

Dim iWS As Worksheet
Dim aWB As Workbook
Dim protWB As Boolean

On Error Resume Next
Call LogEventAdd("Start: SetDefaultInstructions ...", , "FT1")

Set aWB = ActiveWorkbook
protWB = UnProtectWB(wb)

Select Case UCase(FileType)
    Case "TEMPLATE"
        'Unhide all instruction sheets
        wb.Sheets(Tab_Instructions).Visible = xlSheetVisible
        wb.Sheets(Tab_OPSummaryInstructions).Visible = xlSheetVisible
        wb.Sheets(Tab_BMCSummaryInstructions).Visible = xlSheetVisible
        
    Case "OP"
        'Hide all instruction sheets
        wb.Sheets(Tab_Instructions).Visible = xlSheetHidden
        wb.Sheets(Tab_OPSummaryInstructions).Visible = xlSheetHidden
        wb.Sheets(Tab_BMCSummaryInstructions).Visible = xlSheetHidden
        
    Case "BG", "MARKET", "HS", "PH"
        wb.Sheets(Tab_BMCSummaryInstructions).Visible = xlSheetVisible
        wb.Sheets(Tab_Instructions).Visible = xlSheetHidden
        wb.Sheets(Tab_OPSummaryInstructions).Visible = xlSheetHidden
        
    Case "BG-OP"
        wb.Sheets(Tab_OPSummaryInstructions).Visible = xlSheetVisible
        wb.Sheets(Tab_Instructions).Visible = xlSheetHidden
        wb.Sheets(Tab_BMCSummaryInstructions).Visible = xlSheetHidden
        
    Case "" 'nothing specific given => keep selected "instruction tab" unchanged
    
    Case Else       ' this is as well the file type "BMC"
        wb.Sheets(Tab_Instructions).Visible = xlSheetVisible
        wb.Sheets(Tab_OPSummaryInstructions).Visible = xlSheetHidden
        wb.Sheets(Tab_BMCSummaryInstructions).Visible = xlSheetHidden
End Select

Err.Clear
Set iWS = wb.Sheets(Tab_Instructions)
If (Err = 0 And iWS.Visible = xlSheetVisible) Then
Else
    Err.Clear
    Set iWS = wb.Sheets(Tab_OPSummaryInstructions)
    If (Err = 0 And iWS.Visible = xlSheetVisible) Then
    Else
        Err.Clear
        Set iWS = wb.Sheets(Tab_BMCSummaryInstructions)
        If (Err = 0 And iWS.Visible = xlSheetVisible) Then
        Else
            Set iWS = Nothing
        End If
    End If
End If

If (Not iWS Is Nothing) Then
    'iWS selected: set the focus on the "instruction tab" worksheet and scroll to the top
    iWS.Activate
    iWS.Select
    ActiveWindow.DisplayHeadings = False             'Hide the headings on the instruction worksheet

    Application.Goto reference:=iWS.Range("1:1"), Scroll:=True
    iWS.Range("SectionToShowOnOpen").Select 'HIghlight a specific section when this worksheet is activated (the first time after file opeing)
    DoEvents
End If
            
Set SetDefaultInstructions = iWS

If protWB Then Call ProtectWB(wb)

aWB.Activate
Call LogEventAdd("End: SetDefaultInstructions ...", , "FT1")

End Function


Attribute VB_Name = "a4_RefreshDashboardView"
Option Explicit

Public Const Tab_BMCDashboard = "BMC Dashboard"
Public Const Tab_BMCDashboardTitle = "BMC Dashboard Title"
Public Const Tab_BMCEnablerList = "BMC Enabler Summary List"
Public Const Tab_BMCInitiativeList = "BMC Initiative Summary List"
Public Const Tab_BMCTotalsList = "BMC Totals"
Public Const Tab_StatusCheckDashboard = "Status Check"
Public Const Tab_MarketDashboard = "Market Dashboard"
Public Const Tab_BusinessDashboard = "Business Dashboard"
Public Const Tab_Instructions = "Instructions"
Public Const Tab_OPSummaryInstructions = "Instructions OnePager Summary"
Public Const Tab_BMCSummaryInstructions = "Instructions Enabler Summary"
Public Const Tab_Settings = "Settings"
Public Const Tab_Input = "Input"
Public Const Tab_Financials = "Financials"
Public Const Tab_Analysis = "Analysis"
Public Const Tab_OnePagerTemplate = "OnePager Template"

Dim MDBFilterCheck As Boolean
Dim BDBFilterCheck As Boolean

Public Const D_ColEnablerDescWidth = 40
Public Const D_ColOwnerNameWidth = 21
Public Const DefaultFontSize = 11

Private Sub test_DB_Filter_SetQuarter()
    Call DB_Filter_SetQuarter(ActiveSheet)
End Sub

Function DB_CheckSettings(ws As Worksheet)

' add here all checks that are to be carried out when a specific Dashboard worksheet is activated
'On Error Resume Next

'MMM
    If Application.CutCopyMode = False Then
        Call DB_Filter_SetQuarter(ws)
    End If
    
End Function

Function DB_Filter_SetQuarter(ws As Worksheet, Optional ShowMsg As Boolean)

'checks and sets the Quarter filters on the respective Dashboard worksheet.
'Only done the first time after the file is opened and a dashboard worksheet is selected
'With this it is ensured that the right quarter for the Dashboard export (MPR/QPR calls) is set

Dim fq              As Range
Dim q               As Integer
Dim sq              As String
Dim skip            As Boolean
Dim bRefreshPivot   As Boolean
Dim wsMDBQuarterFilter As String
Dim wsBDBQuarterFilter As String
Dim wsF             As Worksheet
Dim wsA             As Worksheet
Dim ScreenUpdate    As Boolean
Dim CalcMode        As Variant

Static MDB_Quarter     As String
Static BDB_Quarter     As String
Static DB_QuarterFilter As String
Static bInExecution    As Boolean

On Error Resume Next

If bInExecution Then
    Exit Function
End If

CalcMode = Application.Calculation
Application.Calculation = xlCalculationManual

ScreenUpdate = Application.ScreenUpdating
Application.ScreenUpdating = False

bInExecution = True
Set wsA = ActiveSheet

'store current settings
Err.Clear
If (MDB_Quarter = "") Then MDB_Quarter = Range("MDB_Quarter")
If (BDB_Quarter = "") Then BDB_Quarter = Range("BDB_Quarter")
wsMDBQuarterFilter = ws.Range("DB_QuarterFilter")
If Err = 0 Then
    If (DB_QuarterFilter = "") Then DB_QuarterFilter = ws.Range("DB_QuarterFilter")
Else
    Err.Clear
    wsBDBQuarterFilter = ws.Range("BDB_Quarter")
    If Err = 0 Then
        wsMDBQuarterFilter = ws.Range("BDB_Quarter")
    End If
End If
Err.Clear

If UCase(ws.Name) = UCase(Tab_MarketDashboard) Then
    Set fq = Range("MDB_Quarter")
    'if the filter check is true then a check was done already and we can skip it
    'this is to avoid when the quarter filter on the worksheet has been manually changed
    'if the quarter filter is different from the current quarter, then this is flagged in red on the worksheet
    If MDBFilterCheck = True Then
        skip = True
    Else
        MDBFilterCheck = True
    End If
ElseIf UCase(ws.Name) = UCase(Tab_BusinessDashboard) Then
    Set fq = Range("BDB_Quarter")
    'see comment above
    If BDBFilterCheck = True Then
        skip = True
    Else
        BDBFilterCheck = True
    End If
End If
Err.Clear

'find what's the optimal quarter based on the current month of today
If Not fq Is Nothing Then
    q = Round((Month(Date) - 1) / 3, 0)
    If q = 0 Then q = 1
    Err.Clear
End If

If q > 0 And skip <> True And Err = 0 Then
    ' ... and then check if the selected quarter filter matches (but only if the filter check isn't set to be skipped
    sq = "Q" & q
    If sq <> fq Then
        If ShowMsg = True Then
            If MsgBox("Dashboard filter is set to quarter '" & fq & "'" & vbCrLf & _
                      "The current date indicates that it the optimal setting is '" & sq & "'" & vbCrLf & _
                      vbCrLf & _
                      "Do you want to set the Dashboard filter for the quarter accordingly?", vbYesNo) = vbYes Then
            Else
                'clear the string and it will not be set
                sq = ""
            End If
        End If
        'set the quarter filter to the one based on the currnent date
        If sq <> "" Then
            fq = sq
        End If
    End If
End If

'If UCase(ws.Name) = UCase(Tab_BusinessDashboard) Then
'    Range("MDB_Quarter") = Range("BDB_Quarter")
'ElseIf UCase(ws.Name) = UCase(Tab_MarketDashboard) Then
'    Range("BDB_Quarter") = Range("MDB_Quarter")
'End If

If wsMDBQuarterFilter <> Range("MDB_Quarter") And wsMDBQuarterFilter <> "" Then
    Range("MDB_Quarter") = wsMDBQuarterFilter
End If

For Each wsF In Worksheets
    Err.Clear
    If wsMDBQuarterFilter <> "" Then
        If wsF.Range("DB_QuarterFilter") <> wsMDBQuarterFilter Then
            If Err = 0 Then
                wsF.Range("DB_QuarterFilter") = wsMDBQuarterFilter
            End If
        End If
    Else
        ' a worksheet has been selected where the DB_QuarterFilter is not on
        If wsF.Range("DB_QuarterFilter") <> Range("MDB_Quarter") Then
            If Err = 0 Then
                wsF.Range("DB_QuarterFilter") = Range("MDB_Quarter")
            End If
        End If
    End If
    
    Err.Clear
    wsF.Range("FilterQuarterUsed") = Range("MDB_Quarter")

Next wsF


Err.Clear
If MDB_Quarter <> Range("MDB_Quarter") Or BDB_Quarter <> Range("BDB_Quarter") Then
    If Err = 0 Then
        'bRefreshPivot = True
        Range("BDB_Quarter") = Range("MDB_Quarter")
        MDB_Quarter = Range("MDB_Quarter")
        BDB_Quarter = Range("BDB_Quarter")
        ws.Range("DB_QuarterFilter") = MDB_Quarter

        Call AllWorksheetPivots
    End If
End If

'rWs.Range("FilterQuarterUsed").Value = rWs.Range("MDB_Quarter").Value
Application.Calculation = CalcMode
wsA.Activate
Application.ScreenUpdating = ScreenUpdate

bInExecution = False

End Function

Sub RefreshDashboardView()

Dim converted           As Boolean
Dim mdata               As Worksheet
Dim iWS                 As Worksheet
Dim lRow                As Long
Dim lCol                As Long
Dim lastr, lastc        As Long
Dim x                   As String
Dim wsDB                  As Worksheet
Dim wd                  As Long
Dim i, j, k             As Long
Dim FoundCol            As Long
Dim FirstOutputCell     As String
Dim FirstOutputCol      As String
Dim wsInput             As Worksheet
Dim CalcMode            As Variant
Dim StatusText          As String
Dim FontSize            As Integer


StatusBarUpdate ("Please wait. Refresh the list based on your selection ...")
Application.ScreenUpdating = False

Application.Calculate

Call UnProtectWorksheet(Tab_BMCEnablerList)
Call UnProtectWorksheet(Tab_Input)
Call UnProtectWorksheet(Tab_BMCDashboard)

'On Error Resume Next

Application.ScreenUpdating = False
CalcMode = Application.Calculation
Application.Calculation = xlCalculationManual
        
'Get the dynamic data range from the Enabler List tab
Set mdata = ThisWorkbook.Sheets(Tab_BMCEnablerList)
lRow = mdata.Range("A" & Rows.Count).End(xlUp).row
'lRow = LastRow(mdata)
lCol = mdata.Cells(1, Columns.Count).End(xlToLeft).Column
x = num2col((lCol))

'set worksheet where the filter criteria are kept and where the filtered output is stored
Set wsInput = ThisWorkbook.Sheets(Tab_Input)

'Get first col where the filtered data is copied to.
FirstOutputCell = wsInput.Range("DB_BMC_FilterOutput").Cells(1, 1).Address   ' was "AL1"
FirstOutputCol = num2col(wsInput.Range("DB_BMC_FilterOutput").Column)        ' was "AL"

'Clear target range (headline as well as data area)
wsInput.Range("DB_BMC_FilterOutput").Clear    '"AL", "AAA"
wsInput.Range("DB_BMC_FilterOutput").Locked = False

'Apply advanced filter and copy the data to a temp range (that was cleared before) on the input sheet ...
mdata.Range("A1", mdata.Cells(lRow, lCol).Address).AdvancedFilter _
    Action:=xlFilterCopy, _
    CriteriaRange:=wsInput.Range("DB_BMC_FilterRange"), _
    CopyToRange:=wsInput.Range(FirstOutputCell), _
    Unique:=False

'remove shapes that are copied before.
Call CleanShapesTextBox(wsInput)
Call CleanShapesButtons(wsInput)

'... and determine the range for the filtered output
lastr = wsInput.Range(FirstOutputCol & Rows.Count).End(xlUp).row
lastc = wsInput.Cells(1, Columns.Count).End(xlToLeft).Column

'## Copy to output sheet ##

Set wsDB = ThisWorkbook.Sheets(Tab_BMCDashboard)
wsDB.Select
wsDB.Activate
Application.ScreenUpdating = True
Application.ScreenUpdating = False

' 1. unhide all rows first
wd = LastRow(ThisWorkbook.Sheets(Tab_BMCDashboard))
wsDB.Rows(DBFirstRow & ":" & wd).Hidden = False

' 2. unmerge and clear range that receives the data
wsDB.Range("E7:J10000").UnMerge
wsDB.Range("B" & DBFirstRow + 1 & ":V10000").Clear                'clear content and formatting
wsDB.Range("B" & DBFirstRow & ":V" & DBFirstRow).ClearContents    'clear content only

' 3. define the width of columne Enabler Description and Owner based on the expected PPT slide size (wide screen versus standard)
wd = D_ColEnablerDescWidth
If ThisWorkbook.Sheets(Tab_BMCDashboard).Range("SlideSize") = "16x9" Then
    wd = wd * (1000 / 720)
End If
wsDB.Columns("D:D").ColumnWidth = wd

wd = D_ColOwnerNameWidth
If ThisWorkbook.Sheets(Tab_BMCDashboard).Range("SlideSize") = "16x9" Then
    wd = wd * (1000 / 720)
End If
wsDB.Columns("F:F").ColumnWidth = wd

' 4. Copy the enabler data
Dim MySearch As String
'start search at column C up to W
Application.ScreenUpdating = False

On Error Resume Next

For i = 3 To 22 + 1
    If lastr > 1 Then
        'Range(wsInput.Range("AL1", wsInput.Cells(1, lastc).Address)).Select
        Err.Clear
        'Get the title of the column to copy from the Dashboard output table ...
        ' (note last 6 columns are hidden and for formatting purposes only)
        MySearch = wsDB.Cells(DBFirstRow - 1, i).Value
        
        FoundCol = 0
        Err.Clear
        ' ... and get for that title column the 'input" array.
        FoundCol = wsInput.Range(FirstOutputCell, wsInput.Cells(1, lastc).Address) _
                                .Find(What:=MySearch, LookAt:=xlWhole).Column
        If Err <> 0 Then
            'the search failed; try different method
            MySearch = UCase(MySearch)
            For j = 1 To lastc
                If (UCase(wsInput.Cells(1, j)) = MySearch) Then
                    Err.Clear
                    FoundCol = j
                End If
            Next j
            Err.Clear
        End If
        If Err = 0 And FoundCol > 0 Then
        'wsInput.Range(wsInput.Cells(2, foundcol), _
        '                                   wsInput.Cells(lastr, foundcol)).Select
        'copy from the 'input' column the neded number of rows ...
            
            wsInput.Range(wsInput.Cells(2, FoundCol), _
                      wsInput.Cells(lastr, FoundCol)).Select
            wsInput.Range(wsInput.Cells(2, FoundCol), _
                      wsInput.Cells(lastr, FoundCol)).Copy
        ' ... and paste it including formatting into the dashboard output column
            wsDB.Cells(DBFirstRow, i).PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        Else
            'wsInput.Cells(1, lastc).Select
            Err.Clear
        End If
    End If
Next i
On Error GoTo 0


' 5. Copy format of first cell in col B (B8) to the rest of the cells in col B
'       Format of "B8" is predefinde on the worksheet directly. Any other cell below B8 might have
'       gotten overwritten by previous dashboard updates
If lastr > 1 Then
    wsDB.Range("B" & DBFirstRow & ":B" & DBFirstRow).Copy
    wsDB.Range("B" & DBFirstRow + 1, "B" & lastr + 6).PasteSpecial xlPasteFormats
End If

'Apply Conditional formats
converted = False
'check if there was any data to show (based on the set filter criteria)
If lastr = 1 Then
    lastr = 2
    converted = True
End If

wsDB.Activate

' 6. Loop on rows and set the cell interior format
For j = DBFirstRow To DBFirstRow + lastr    '6
    StatusBarUpdate ("Please wait. Format row " & j & " ...")
    
    'Loop through the columns: B .. Q
    For i = 1 To 18
        If wsDB.Cells(j, i).Interior.ThemeColor = xlThemeColorDark1 Then
        
            'set background to light grey indicating that the cell can't be edited if it is locked
            With wsDB.Cells(j, i).Interior
                                .Pattern = xlSolid
                                .PatternColorIndex = xlAutomatic
                                .TintAndShade = 0
                                .PatternTintAndShade = 0
            End With
        End If
    Next
    'Loop on columns to color the cells based on given flag
    ' i = Column index: J = 10 => Q = 17
    ' k provides offset into the columns covering the color coding (copied from the main worksheet before)
    
    ' DB_ColFirstColorCoding - DB_ColLastColorCoding
    For i = 10 To 17

        If i < 12 Then
            k = 18
        ElseIf i > 11 And i < 14 Then
            k = 19
        ElseIf i > 13 And i < 16 Then
            k = 20
        Else
            k = 21
        End If
        'wsDB.Cells(j, k).Select
        
        ' "k" holds the column index into the output table where the color code is provided
        Select Case wsDB.Cells(j, k).Value
        Case "Missing", "" ' no entry or 'missing' is setting the cell color to none
            wsDB.Cells(j, i).Interior.ColorIndex = xlColorIndexNone
        Case "Red", GetColorCodeText("Red")
            wsDB.Cells(j, i).Interior.Color = GetColorCode("Red")  'RGB(255, 199, 206)
            wsDB.Cells(j, i).Font.Color = GetColorCodeFont("Red")  'usually black
        Case "Amber", GetColorCodeText("Amber")
            wsDB.Cells(j, i).Interior.Color = GetColorCode("Amber")  'RGB(255, 199, 206)
            wsDB.Cells(j, i).Font.Color = GetColorCodeFont("Amber")  'usually black
        Case "Green", GetColorCodeText("Green")
            wsDB.Cells(j, i).Interior.Color = GetColorCode("Green")  'RGB(255, 199, 206)
            wsDB.Cells(j, i).Font.Color = GetColorCodeFont("Green")  'usually black
        'Case "Missing", GetColorCodeText("Missing")
        '    wsDB.Cells(j, i).Interior.Color = GetColorCode("Missing")  'RGB(255, 199, 206)
        '    wsDB.Cells(j, i).Font.Color = GetColorCodeFont("Missing")  'usually black
        Case Else
            wsDB.Cells(j, i).Interior.ColorIndex = xlColorIndexNone
        End Select
    Next i
    
    'column H: Top 3 : yes/No
    If UCase(wsDB.Cells(j, 8).Value) = "YES" Then
        wsDB.Cells(j, 8).Interior.Color = RGB(0, 112, 192)
        wsDB.Cells(j, 8).Font.ThemeColor = xlThemeColorDark1
        wsDB.Cells(j, 8).Font.TintAndShade = 0
        wsDB.Cells(j, 8).Font.ThemeFont = xlThemeFontMinor
    Else
        With wsDB.Cells(j, 8).Font
            .ThemeColor = xlThemeColorLight1
            .TintAndShade = 0
            .ThemeFont = xlThemeFontMinor
        End With
        With wsDB.Cells(j, 8).Interior
            .Color = RGB(255, 255, 255)
            .Pattern = xlNone
            .TintAndShade = 0
            .PatternTintAndShade = 0
        End With
    End If
Next j

'converted indicates that lastr was modified due to now output data
' ->reset the 'lastr'
If converted = True Then lastr = 1

' 7. Clean and Hide unneccesary columns
'wsDB.Columns("Q").Hidden = True
wsDB.Range(CellColumn("DB_CCC_FilterOutput") & DBFirstRow + 1 & ":" & CellColumn("LastColumn2Hide") & "6000").Clear  ' Y:AF
wsDB.Columns(CellColumn("FirstColumn2Hide", wsDB) & ":" & CellColumn("LastColumn2Hide", wsDB)).Hidden = True

' 8. KPI Numbering = BMC Ranking: important to keep the formula as this is used as index into the main table.
If lastr > 1 Then
    wsDB.Range("B" & DBFirstRow & ":B" & lastr + 6).Value = "=W" & DBFirstRow
End If

StatusBarUpdate ("Please wait. Applying table shape ...")
    
' 9. set cell borders
If converted = True Then
    wsDB.Range("B" & DBFirstRow & ":AF" & DBFirstRow).Borders.LineStyle = xlNone
Else
    wsDB.Range("B" & DBFirstRow & ":Q" & lastr + 6).Borders.LineStyle = xlContinuous
    wsDB.Range("AA" & DBFirstRow & ":AF" & lastr + 6).Borders.LineStyle = xlContinuous
End If

'#############################################################################################
'Dashboard section: "Corrective Action section"
wsDB.Range("Y" & DBFirstRow & ":Z" & DBFirstRow).ClearContents
wsDB.Range("Y" & DBFirstRow + 1 & ":AF10000").Clear
    
Err.Clear
If converted = True Then lastr = 2
wsDB.Select
'copy the index & BMC Name from the enabler description section in output table ...
wsDB.Range("B" & DBFirstRow & ":C" & lastr + 6).Select
wsDB.Range("B" & DBFirstRow & ":C" & lastr + 6).Copy
'... to the search area in temp table (that receives later the corrective action data
wsDB.Range("Y" & DBFirstRow).PasteSpecial xlPasteValues
wsDB.Range("Y" & DBFirstRow).PasteSpecial xlPasteFormats
If converted = True Then lastr = 1

' 2. Text in CCC section only: copy format and formulas (=content) only
If converted = False Then
    'note: data is taken as lookup from the Enabler Summary sheet based on 'Nr' and 'BMC Name'
    'wsDB.Range("AA" & DBFirstRow & ":AF" & DBFirstRow).Select
    wsDB.Range("AA" & DBFirstRow & ":AF" & DBFirstRow).Copy
    wsDB.Range("AA" & DBFirstRow + 1 & ":AF" & lastr + 6).PasteSpecial xlPasteFormulas
    wsDB.Range("AA" & DBFirstRow + 1 & ":AF" & lastr + 6).PasteSpecial xlPasteFormats
    'recalculate spreadsheet
    wsDB.Calculate
End If

'Copy now the columns from the filtered range to the output table
'Paste the table below the first one: B - D
wsDB.Range("Y" & DBFirstRow - 1 & ":AB" & lastr + 6).Select
wsDB.Range("Y" & DBFirstRow - 1 & ":AB" & lastr + 6).Copy
'wsDB.Range("B" & lastr + DBFirstRow).Select
On Error Resume Next
wsDB.Range("B" & lastr + DBFirstRow).PasteSpecial xlPasteValues
wsDB.Range("B" & lastr + DBFirstRow).PasteSpecial xlPasteFormats


'Paste the table below the first one
wsDB.Range("AC" & DBFirstRow - 1 & ":AC" & lastr + 6).Copy
wsDB.Range("G" & lastr + DBFirstRow).PasteSpecial xlPasteValues
wsDB.Range("G" & lastr + DBFirstRow).PasteSpecial xlPasteFormats

'Paste the table below the first one
wsDB.Range("AD" & DBFirstRow - 1 & ":AD" & lastr + 6).Copy
wsDB.Range("J" & lastr + DBFirstRow).PasteSpecial xlPasteValues
wsDB.Range("J" & lastr + DBFirstRow).PasteSpecial xlPasteFormats


'Paste the table below the first one
wsDB.Range("AE" & DBFirstRow - 1 & ":AE" & lastr + 6).Copy
wsDB.Range("N" & lastr + 8).PasteSpecial xlPasteValues
wsDB.Range("N" & lastr + 8).PasteSpecial xlPasteFormats

'Paste the table below the first one
wsDB.Range("AF" & DBFirstRow - 1 & ":AF" & lastr + 6).Copy
wsDB.Range("P" & lastr + 8).PasteSpecial xlPasteValues
wsDB.Range("P" & lastr + 8).PasteSpecial xlPasteFormats

'Add a new column after RootCause & Merge
lRow = wsDB.Range("B6000").End(xlUp).row
For i = DBFirstRow + lastr To lRow
    wsDB.Range("E" & i, "F" & i).Merge
    wsDB.Range("E" & i).HorizontalAlignment = xlLeft
    wsDB.Range("G" & i, "I" & i).Merge
    wsDB.Range("G" & i).HorizontalAlignment = xlLeft
    wsDB.Range("J" & i, "M" & i).Merge
    wsDB.Range("J" & i).HorizontalAlignment = xlLeft
    wsDB.Range("N" & i, "O" & i).Merge
    wsDB.Range("N" & i).HorizontalAlignment = xlLeft
    wsDB.Range("P" & i, "Q" & i).Merge
    wsDB.Range("P" & i).HorizontalAlignment = xlLeft
Next i

If converted = True Then
    wsDB.Range("B" & lastr + 8 & ":Q" & lastr + 8).Borders.LineStyle = xlNone
Else
    wsDB.Range("B" & lastr + 8 & ":Q" & lRow).Borders.LineStyle = xlContinuous
    wsDB.Range("B" & lastr + 8 & ":Q" & lRow).Borders.LineStyle = xlContinuous
End If
wsDB.Range("B" & lastr + 8 & ":Q" & lRow).WrapText = True

'wsDB.Range("Y8:Z8").ClearContents
'wsDB.Range("Y9:AF10000").Clear
On Error Resume Next
Err.Clear
FontSize = wsDB.Range("DB_BMC_FontSize")
If FontSize = 0 Then
    FontSize = Range("DB_BMC_FontSize")
End If
If FontSize = 0 Then FontSize = 11

For i = DBFirstRow - 1 To lRow
    StatusBarUpdate ("Please wait. Autofit rows " & i & " ...")
    wsDB.Rows(i).Font.Size = FontSize
    
    If i = 13 Then
        Err.Clear
    End If
    'wsDB.Range(i & ":" & i).Hidden = False
    wsDB.Rows(i).Hidden = False
    Call AutoFitRow((i))
Next

'Hide unneccesary columns
wsDB.Columns("W:AF").Hidden = True
wsDB.Columns("Z").Hidden = True
wsDB.Columns("AA").Hidden = True
wsDB.Columns("AB").Hidden = True
wsDB.Columns("AC").Hidden = True
wsDB.Columns("AD").Hidden = True
wsDB.Columns("AE").Hidden = True
wsDB.Columns("AF").Hidden = True

wsDB.Range("B7").Select

Application.CutCopyMode = False
Application.ScreenUpdating = True


'Enable again the filter funtion on the enabler list
Call ApplyFilterToEnablerList_EnablerID

' and other settings like Conditional Formating or Data Validation
'Call Prepare_CF_MgmtStatus
'Call Expand_DV
            
Call ProtectWorksheet(Tab_BMCEnablerList)
Call ProtectWorksheet(Tab_BMCDashboard)
Call ProtectWorksheet(Tab_Input)

On Error GoTo 0
'scroll window to the top
ActiveWindow.ScrollRow = 1

'and select the first cell with an enabler.
wsDB.Select
wsDB.Range("B" & DBFirstRow).Select
wsDB.Range("B" & DBFirstRow).Activate

Call ClearStatusBar

Application.Calculation = CalcMode
Application.ScreenUpdating = True
ActiveWindow.Activate
    
End Sub

Attribute VB_Name = "a6_SomeFixesInOnePagerFiles"
Option Explicit

Private Function FixOnePagerFiles2018()
'
' Import from the various BGs the OnePager Summary files
'

    Dim sR, rR, rC, sC, f, c, r, i As Integer
    Dim sWB As Workbook, rWB    As Workbook
    
    Dim sWS                     As Worksheet
    Dim rWS                     As Worksheet
    Dim rWSInitiative           As Worksheet
    Dim rWSBMCSummary           As Worksheet
    
    Dim StartDate               As Date
    Dim Market, EnablerSheet, MarketCol, BGCol As String
    Dim TDir, SDir, SDirString, TFile As String
    Dim BMCOnePagerFile         As String
    Dim rngMM                   As Range
    Dim BMC, NextBMC, BMCPath, ActFileName, Rng, sFilter As String
    Dim ScreenUpdate            As Variant
    Dim v                       As Variant
    Dim l, lC                   As Integer
    Dim cOP, cFOP, cI, cFI, cE  As Integer
    Dim cLock, CalcMode         As Variant
    Dim MaxEnablers             As Integer
    Dim Change                  As Boolean
    Dim InvalidFileName         As String
    Dim OpenFailedMessage       As String
    Dim OpenFailedCount         As Integer
    Dim NoOfCanceledEnablers    As Integer
    Dim sNoOfCanceledEnablers   As String
    Dim OpenFailedMessageFile   As String
    Dim SaveChanges             As Boolean
    Dim ProtE As Boolean
    Dim ProtI As Boolean
    Dim ProtT As Boolean
    
    Dim ShowMsg As Boolean
    
    '-------------------------------------------------------------------------
    
    ShowMsg = True
    
    'ThisWorkbook.Activate
    
    'save only if the design workbook
    Call SaveWBIfDesignBook(ActiveWorkbook)
    
    'Stick to the current Worksheet
    
    If IsBMCFile(True) = False Then Exit Function
    
    Call UnProtectWorksheet(Tab_BMCEnablerList)
        
    EnablerSheet = Tab_BMCEnablerList       'LoadSetting("EnablerSheetName")
    MarketCol = LoadSetting("MarketCol")
    BGCol = LoadSetting("BGCol")
    TFile = LoadSetting("TemplateFileName")
    SDir = Trim(LoadSetting("OnePagerBGSummary"))
    'SDir = CleanFileName((SDir))
    MaxEnablers = LoadSetting("MaxEnablers")
    sFilter = LoadSetting("BMCImportFilter")
    NoOfCanceledEnablers = 0
    
    StartDate = DateTime.Now
    
    'Disable auto calculation to improve macro performance
    Application.Calculate
    CalcMode = Application.Calculation
    Application.Calculation = xlManual
    Application.ScreenUpdating = False
        
    'Set rWS = Sheets(C_SummaryEnablers)
    Set rWB = ActiveWorkbook
    
    Set rngMM = Range("MarketMappingExtended")
    
    Call GetFileFilterSettings
    
    If ShowMsg Then
        If SDir = LocalFile Then
            SDirString = "This Workbook"
        Else
            SDirString = SDir
        End If
        
        SDirString = InputBox("You are applying some fixes to the BMC OnePager files at the following location:" & vbCrLf & _
                              vbCrLf & _
                              "Note: '.' indicates relative to the directory location of this Excel file. " & _
                              "E.g. '.\BMC DACH' takes all files in the relative local directory 'BMC DACH'." & vbCrLf & _
                              vbCrLf & _
                              GetFileFilterMessage, _
                              "", SDirString)
        If SDirString = "" Then
            Call MsgBox("Fixing OnePagers cancelled.", vbInformation)
            Exit Function
        Else
            If SDirString <> "This Workbook" Then
                SDir = SDirString
            End If
        End If
    End If
    SDir = CleanFileName((SDir))
    
    StartDate = DateTime.Now

    Call InitColumVariables


    ' get list of OnePager enabler tracking files
    Call SearchFiles((SDir), False)
    Call SaveAndReloadFileList      ' we keep it here outside of SearchFiles as SearchFile is used in a different context as well
    
    If FileListImportCounter = 0 Then
        ' terminate if no file found. Don't change the file (in case of an error at least the latest status will be kept)
        If ShowMsg Then
            ''"In case you are connected to the Philips network via VPN (SafeNet), then please connect your computer directly to the Philips network (e.g. in the office)."
            Call MsgBox("No files found in the given location." & vbCrLf & vbCrLf & _
                    "    '" & SDir & "'" & vbCrLf & vbCrLf & _
                    "When clicking OK you are guided to instructions how to enable your computer in seeing all files on the SharePoint again." & vbCrLf & _
                    "The current file remains unchanged." & vbCrLf & vbCrLf & _
                    "Terminating now the 'OnePager file import' process.", vbOKOnly)
        End If
        
        Call ClearStatusBar
        ThisWorkbook.Sheets(Tab_OPSummaryInstructions).Activate
        ThisWorkbook.Sheets(Tab_OPSummaryInstructions).Select
        Application.Goto reference:=Range("InstructionEnableSPAccess"), Scroll:=True
        Exit Function
    End If

    '------------------------------------------------------------------------------------------------------
    ' Prepare Enabler receiving worksheet  - show all data & clean worksheet
    On Error Resume Next
    Set rWS = rWB.Sheets(EnablerSheet)
    ProtE = UnProtectWS(rWS)
    Call ClearSummaryTab(rWS)
    
    '------------------------------------------------------------------------------------------------------
    ' Prepare Initiative receiving worksheet
    Set rWSInitiative = rWB.Sheets(Tab_BMCInitiativeList)
    ProtI = UnProtectWS(rWSInitiative)
    Call ClearSummaryTab(rWSInitiative)
    
    '------------------------------------------------------------------------------------------------------
    ' Prepare BMC totals receiving worksheet
    Set rWSBMCSummary = rWB.Sheets(Tab_BMCTotalsList)
    ProtT = UnProtectWS(rWSBMCSummary)
    Call ClearSummaryTab(rWSBMCSummary)
    
    rR = 2
    
    rWS.Select
    rWS.Activate
    
    ' mow import all files
    For f = 0 To FileListImportCounter - 1
    
        StatusBarUpdate ("Processing file " & f + 1 & " of " & FileListImportCounter & " (" & FileListImport(f) & ")")
        
        ' by default don't save changes unless it is being triggered by the function.
        SaveChanges = False
        
        'DoEvents
        rWB.Activate
        rWS.Select
        
        BMCOnePagerFile = FileListImport(f)
        Err.Clear
        If BMCOnePagerFile <> LocalFile And BMCOnePagerFile <> rWB.Name Then
            Workbooks.Open FileName:=BMCOnePagerFile, UpdateLinks:=False, ReadOnly:=False
            'file has been opended if the actual XLS file name is including the requested file open.
            If InStr(1, BMCOnePagerFile, ActiveWorkbook.Name) > 0 Then
                Err.Clear
            Else
                OpenFailedCount = OpenFailedCount + 1
                OpenFailedMessageFile = "File: " & BMCOnePagerFile & vbCrLf & _
                                        "Error: " & Err.Description & vbCrLf
                OpenFailedMessage = OpenFailedMessage & vbCrLf & OpenFailedMessageFile
                If MsgBox("File open failed: " & vbCrLf & OpenFailedMessageFile, vbYesNo) <> vbYes Then
                    Exit Function
                Else
                    Err.Clear
                End If
            End If
        End If
        
        Application.ScreenUpdating = True
        Application.ScreenUpdating = False
        
        If Err = 0 Then
            
            Set sWB = ActiveWorkbook
            On Error Resume Next
            
            'process each enabler on that OnePager sheet
            cFOP = 0
            For Each sWS In sWB.Sheets
                v = sWS.Name
                If (OP_IsActiveOnePager(sWS, True) = True) Then
                    'ActiveWindow.WindowState = xlMinimized
                    ActiveWindow.WindowState = xlMaximized
                    
                    If SaveChanges Then
                        Err.Clear
                    End If
                    rWSBMCSummary.Select
                    rWSBMCSummary.Activate
                    SaveChanges = OnePagerFixNames(sWS)
                    If SaveChanges Then
                        Err.Clear
                    End If
                    
                    '1. Transfer Header data
                    'Call TransferBMCTotals(sWS, rWS, rWSInitiative, rWSBMCSummary)
                                        
                    '2. Transfer Aspiration (financial data)
                    '3. Transfer Other aspiration
                    '4. Transfer Comments
                    
                    '5. Transfer Initiatives & Enablers
                    sWS.Range("OP_BusinessName").Select
                    sWS.Activate
                    cFI = 0
                    For i = 1 To MaxInitiative
                        
                        'cE = TransferInitiativ(sWS, rWS, rWSInitiative, rWSBMCSummary, i)
                        If cE > 0 Then
                            'count number of initiatives
                            cFI = cFI + 1
                        End If
                        'count number of Enablers
                        rR = rR + cE
                    Next i
                    'count number of OnePager tabs and total Initiatives
                    cI = cI + cFI
                    cOP = cOP + 1
                    
                    If cFI = 0 Or cOP > cI Then
                        Err.Clear
                    End If
                    cFOP = cFOP + 1
                End If
            Next sWS
            
            If cFOP = 0 Then
                InvalidFileName = AddString(InvalidFileName, BMCOnePagerFile)
                Err.Clear
            End If
            
            Application.Calculate
            'close the file only if it is not the current workbook
            If BMCOnePagerFile <> LocalFile Then
                If SaveChanges Then
                    Err.Clear
                End If
                
                Application.CutCopyMode = False     'ClearClipboard
                sWB.Close SaveChanges:=SaveChanges
            End If
            SaveChanges = False
        End If
        Application.ScreenUpdating = True
            
    Next
 
OP_Skip:

    Application.Calculate
    

'Exit Function

    Application.ScreenUpdating = False
       
Format1:

    Call StatusBarUpdate("Format columns ...")
                        
    Application.Calculation = CalcMode
    Application.ScreenUpdating = True
    
    Call StatusBarUpdate("")
    
    ActiveWorkbook.Save
    
    Call MsgBox(f & " File(s)" & vbCrLf & _
                cOP & " OnePager(s)" & vbCrLf & _
                cI & " Initiative(s)" & vbCrLf & _
                rR - 2 & " Enabler(s)" & vbCrLf & _
                "have been imported." & vbCrLf & vbCrLf & _
                sNoOfCanceledEnablers & _
                "Started at: " & StartDate & vbCrLf & _
                "Ended at:   " & DateTime.Now & vbCrLf & _
                vbCrLf & _
                "Template Version: " & Range("FileVersion") & vbCrLf & _
                "Import directory: " & SDir & vbCrLf & _
                "Import file list date: " & Range("FileCache_LastUpdate"), vbOKOnly)
    
    If InvalidFileName <> "" Then
        Call MsgBox("Files found which seem to have no OnePager worksheet(s) included." & vbCrLf & _
                        vbCrLf & _
                        "File:" & vbCrLf & _
                        InvalidFileName, vbOKOnly)
    End If
    
    If OpenFailedMessage <> "" Then
        'Msgbox can handle only 1000 character message length
        If Len(OpenFailedMessage) > MaxMsgLength Then
            OpenFailedMessage = Left(OpenFailedMessage, MaxMsgLength) & "  ...  (more files)."
        End If
        
        Call MsgBox("Failed to open #" & OpenFailedCount & " file(s)" & vbCrLf & _
                    vbCrLf & _
                    OpenFailedMessage & vbCrLf & _
                    vbCrLf & _
                    "After finishing this import, open the files manually and check if Excel reports any error.", vbOKOnly)
    End If
    
End Function


Function OnePagerFixNames(sWS As Worksheet) As Boolean

Dim BU, Market, BGLeader, MarketLeader, BUPlanLead, BMM As Range
Dim sBU, sMarket, sBGLeader, sMarketLeader, sBUPlanLead, sBMM As String
Dim Updateok As Boolean

OnePagerFixNames = False

'By default we don't the update
Updateok = False

Set BU = sWS.Range("OP_BusinessName")
Set Market = sWS.Range("OP_MarketName")
Set BGLeader = sWS.Range("J18")
Set MarketLeader = sWS.Range("J19")
Set BUPlanLead = sWS.Range("O18")
Set BMM = sWS.Range("O19")

On Error Resume Next
Err.Clear
sBGLeader = Application.WorksheetFunction.VLookup(BU & Market, Range("OnePagerStakeHolderMap"), Range("BGLeaderOffset"), False)
If Err Then
    Err.Clear
Else
    If BGLeader <> sBGLeader Then
        If MsgBox("BG Leader name incorrect. Do you want to update?" & vbCrLf & _
                    "New BG Leader: " & sBGLeader & vbCrLf & _
                    "Old BG Leader: " & BGLeader, vbYesNo) = vbYes Then
            BGLeader = sBGLeader
            Updateok = True
        End If
    Else
        Err.Clear
    End If
End If

Err.Clear
sBUPlanLead = Application.WorksheetFunction.VLookup(BU & Market, Range("OnePagerStakeHolderMap"), Range("BUPlanLeadOffset"), False)
If Err Then
    Err.Clear
Else
    If BUPlanLead <> sBUPlanLead Then
        If MsgBox("BU Plan Lead name incorrect. Do you want to update?" & vbCrLf & _
                    "New BU Plan Lead: " & sBUPlanLead & vbCrLf & _
                    "Old BU Plan Lead: " & BUPlanLead, vbYesNo) = vbYes Then
            BUPlanLead = sBUPlanLead
            Updateok = True
        Else
            Err.Clear
        End If
    Else
        Err.Clear
    End If
End If

OnePagerFixNames = Updateok

End Function
Attribute VB_Name = "b1_CompareEnablerSnapshot"
Option Explicit
Const LastColHeader = "Update indicator"
Const HeaderChangeTag = "Update indicator"
Const C_LastColumn = "_E_IsBMCListTab"
'Const C_LastColumn = "FirstColumn2Hide"


Sub Fct_CompareEnablerLists()

'function call when the button is pressed

Call CompareEnablerLists

End Sub

Function CompareEnablerLists()

Dim rWS As Worksheet
Dim sWS As Worksheet
Dim c As Integer
Dim rRow, sRow As Integer
Dim rCol, sCol As Integer
Dim rRowLast, sRowLast As Integer
Dim rColLast, sColLast As Integer
Dim rEnablerIDCol   As Integer
Dim sEnablerIDCol   As Integer
Dim EnablerIDColText As String
Dim RowChanged      As Boolean
Dim UpdateContent   As Boolean
Dim CalcMode        As Variant
Dim lmt             As Date
Dim NewEnablers     As Long
Dim RemovedEnablers As Long
Dim ChangedFields   As Long
Dim ChangedEnablers As Long
Dim DuplicateEnablers As Long
Dim rRng            As Range
Dim sRng            As Range
Dim ColSameOrder    As Boolean

On Error Resume Next

Set rWS = SelectWorksheet
If rWS Is Nothing Then
    Exit Function
End If

'Set sWS = ThisWorkbook.Worksheets(Tab_BMCEnablerList)
Set sWS = SelectWorksheet
If sWS Is Nothing Then
    Exit Function
End If


If MsgBox("Do you want to transfer content of cells if they differ?", vbYesNo) = vbYes Then
    UpdateContent = True
End If

'check if that worksheet is ok or find new

'find the last column in the target worksheet that is filled with the CHANGED flag
c = 1
Do While UCase(rWS.Cells(1, c)) <> UCase(LastColHeader) And rWS.Cells(1, c) <> ""
    c = c + 1
Loop
If UCase(rWS.Cells(1, c)) <> UCase(LastColHeader) Then
    'Column SPARE not found. Worksheet Seems invalid
    'causes a hidden error when later accessed as the column is not found
    rColLast = 0
Else
    rColLast = c
End If

EnablerIDColText = sWS.Range("_E_Enabler_ID")
c = 1
Do While UCase(rWS.Cells(1, c)) <> UCase(sWS.Range("_E_Enabler_ID")) And rWS.Cells(1, c) <> ""
    c = c + 1
Loop
If UCase(rWS.Cells(1, c)) <> UCase(sWS.Range("_E_Enabler_ID")) Then
    'Column ENabler ID not found. Worksheet Seems invalid
    Err.Clear
End If
rEnablerIDCol = c

sEnablerIDCol = sWS.Range("_E_Enabler_ID").Column

'Compare row by row in the target list with the row in the source list
Call StatusBarUpdate("Please wait. Checking the main '" & Tab_BMCEnablerList & "' ... ")
Call ApplyFilterToEnablerList_EnablerID_WS(sWS)
rRowLast = LastRow(rWS)
sRowLast = LastRow(sWS)

If sRowLast < 2 Then
    If MsgBox("There seems to be now enabler rows in the 'BMC Enabler Summary List'." & vbCrLf & _
              "Do you still want to continue checking the difference between your local BMC enabler list and the BMC Enabler summary list?", vbYesNo) <> vbYes Then
        Exit Function
    End If
End If

'only check the visible columns
sColLast = sWS.Range(C_LastColumn).Column - 1


Application.ScreenUpdating = False
CalcMode = Application.Calculation
Application.Calculation = xlCalculationManual

'search and find any enabler that has changed
For rRow = 2 To rRowLast
    lmt = StatusBarUpdate("Update enabler '" & rWS.Cells(rRow, rEnablerIDCol) & "' ...", lmt)
    If rRow = 423 Then
        Err.Clear
    End If
    RowChanged = False

    'search Enabler ID in master enabler list
    For sRow = 2 To sRowLast
        If UCase(rWS.Cells(rRow, rEnablerIDCol)) = UCase(sWS.Cells(sRow, sEnablerIDCol)) Then
            Exit For
        End If
    Next
    If sRow > sRowLast Then
        'that enabler ID wasn't found. Set the "removed" flag
        Call SetCellFormat(rWS.Cells(rRow, rColLast))
        rWS.Cells(rRow, rColLast) = "REMOVED"
        RemovedEnablers = RemovedEnablers + 1
    Else
        'Enabler ID found. Now compare each cell and set background color if different
        For rCol = 1 To rColLast - 1
            For sCol = 1 To sColLast
                Set rRng = rWS.Cells(rRow, rCol)
                Set sRng = sWS.Cells(sRow, sCol)
                'if the headers are the same ...
                If UCase(rWS.Cells(1, rCol)) = UCase(sWS.Cells(1, sCol)) Then
                    ' then:
                    '   Compare the cells
                    '   set colors
                    '   Copy cells
                    Err.Clear
                    'if Content differs ...
                    If UCase(rRng) <> UCase(sRng) Then
                        RowChanged = True
                        ChangedFields = ChangedFields + 1
                        'sWS.Cells(sRow, sCol).Select
                        'Yellow
                        If UpdateContent = True Then
                            'show the previous cell content as comment
                            Call AddComment(rRng, "Previous content:" & vbCrLf & rRng.Value)
                            Err.Clear
                            rRng.Value = sRng.Value
                            If Err Then
                                rRng.Value = "Error??"
                                Err.Clear
                            End If
                        Else
                            'show the new cell content as comment
                            Call AddComment(rRng, "Changed content:" & vbCrLf & sRng.Value)
                        End If
                        With rRng.Interior
                            .Pattern = xlSolid
                            .PatternColorIndex = xlAutomatic
                            .Color = 65535
                            .TintAndShade = 0
                            .PatternTintAndShade = 0
                        End With
                    Else
                        Call AddComment(rRng, "")   'clear comment as nothing has changed
                        'Clear interior
                        With rRng.Interior
                            .Pattern = xlNone
                            .TintAndShade = 0
                            .PatternTintAndShade = 0
                        End With
                    End If
                    ' goto next cell in data receiving worksheet
                    Exit For
                End If
            Next
            If sCol > sColLast Then
                'that column was found
                Err.Clear
            End If
        Next
        
        Set rRng = rWS.Cells(rRow, rColLast)
        Call SetCellFormat(rRng)
        If RowChanged Then
            ChangedEnablers = ChangedEnablers + 1
            rRng = "CHANGED"
            'Set color of enabler column
            With rWS.Cells(rRow, rEnablerIDCol).Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .ThemeColor = xlThemeColorAccent2
                .TintAndShade = 0.799981688894314
                .PatternTintAndShade = 0
            End With
        Else
            rRng = ""
            'Clear color of enabler column
            With rWS.Cells(rRow, rEnablerIDCol).Interior
                .Pattern = xlNone
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
        End If
    End If
Next

'Now search for all enablers that are new and transfer them
NewEnablers = 0

'Check if the columns in both worksheets have the same order
ColSameOrder = True
For rCol = 1 To rColLast - 1
    If rWS.Cells(1, rCol) <> sWS.Cells(1, rCol) Then
        ColSameOrder = False
        Exit For
    End If
Next

For sRow = 2 To sRowLast
    lmt = StatusBarUpdate("Search for new enablers '" & sWS.Cells(sRow, sEnablerIDCol) & "' ...", lmt)
    If rRow = 423 Then
        Err.Clear
    End If
    RowChanged = False

    'search Enabler ID in master enabler list
    For rRow = 2 To rRowLast
        If UCase(rWS.Cells(rRow, rEnablerIDCol)) = UCase(sWS.Cells(sRow, sEnablerIDCol)) Then
            Exit For
        End If
    Next
    If rRow <= rRowLast Then
        'Enabler ID found. just ignore it as it has been processed before
        'rWS.Cells(rRow, rColLast) = "REMOVED"
    Else
        'that enabler ID wasn't found. Set the "removed" flag
        'rRow is now the next empty row in the target list
        Call StatusBarUpdate("Add enabler '" & sWS.Cells(sRow, sEnablerIDCol) & "' ...")
        NewEnablers = NewEnablers + 1
        If ColSameOrder = False Then
            For rCol = 1 To rColLast - 1
                For sCol = 1 To sColLast
                    If UCase(rWS.Cells(1, rCol)) = UCase(sWS.Cells(1, sCol)) Then
                        Application.ScreenUpdating = False
                        Err.Clear
                        If rRow = 77 And num2col((rCol)) = "Z" Then
                            Err.Clear
                        End If
                        'rWS.Range(num2col((rCol)) & 2).Copy
                        'rWS.Range(num2col((rCol)) & rRow).PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                        'rWS.Range(num2col((rCol)) & rRow).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                        With rWS.Cells(rRow, rCol).Interior
                                .Pattern = xlNone
                                .TintAndShade = 0
                                .PatternTintAndShade = 0
                        End With
                        Call SetCellFormat(rWS.Cells(rRow, rCol))
                        With rWS.Cells(rRow, rCol).Font
                            .ThemeColor = xlThemeColorLight1
                            .TintAndShade = 0
                        End With
                        Err.Clear
                        'rWS.Cells(rRow, rCol).Interior = rWS.Cells(2, rCol).Borders
                        Err.Clear
                        'rWS.Cells(rRow, rCol). '  = sWS.Cells(sRow, sCol).Value
                        rWS.Cells(rRow, rCol).Value = sWS.Cells(sRow, sCol).Value
                        If Err Then
                            rWS.Cells(rRow, rCol).Value = "Error??"
                            Err.Clear
                        End If
                        If InStr(1, sWS.Cells(sRow, sCol).NumberFormat, "@", vbTextCompare) = 0 Or InStr(1, sWS.Cells(1, sCol), "Date", vbTextCompare) > 0 Then
                            rWS.Cells(rRow, rCol).NumberFormat = sWS.Cells(sRow, sCol).NumberFormat
                            rWS.Cells(rRow, rCol).NumberFormatLocal = sWS.Cells(sRow, sCol).NumberFormatLocal
                        Else
                            'MsgBox (num2col((rCol)))
                            rWS.Cells(rRow, rCol).NumberFormat = "General"
                            'rWS.Cells(rRow, rCol).Select
                        End If
                        Exit For
                    End If
                Next
                If sCol > sColLast Then
                    'that column was found
                    Err.Clear
                End If
            Next
        Else
            Application.ScreenUpdating = False
            Err.Clear
            'MsgBox ("A" & rRow & num2col((rColLast)) & rRow)
            Set rRng = rWS.Range("A" & rRow & ":" & num2col((rColLast)) & rRow)
            Set sRng = sWS.Range("A" & sRow & ":" & num2col((rColLast)) & sRow)
            
            With rRng.Interior
                .Pattern = xlNone
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
            Call SetCellFormat(rRng)
            With rRng.Font
                .ThemeColor = xlThemeColorLight1
                .TintAndShade = 0
            End With
            Err.Clear
            sRng.Copy
            rRng.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            If Err Then
                'rWS.Cells(rRow, rCol).Value = "Error??"
                Err.Clear
            End If
            'If InStr(1, sWS.Cells(sRow, sCol).NumberFormat, "@", vbTextCompare) = 0 Or InStr(1, sWS.Cells(1, sCol), "Date", vbTextCompare) > 0 Then
            '   rWS.Cells(rRow, rCol).NumberFormat = sWS.Cells(sRow, sCol).NumberFormat
            '   rWS.Cells(rRow, rCol).NumberFormatLocal = sWS.Cells(sRow, sCol).NumberFormatLocal
            'Else
            '   MsgBox (num2col((rCol)))
            '   rWS.Cells(rRow, rCol).NumberFormat = "General"
            '   'rWS.Cells(rRow, rCol).Select
            'End If
        End If
        
        rWS.Cells(rRow, rColLast) = "NEW"
        
        'Set color of Enabler ID column
        With rWS.Cells(rRow, rEnablerIDCol).Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .ThemeColor = xlThemeColorAccent2
                .TintAndShade = 0.799981688894314
                .PatternTintAndShade = 0
        End With
        
        rRowLast = rRow
        
    End If
Next

'Check for duplicate enablers
For rRow = 2 To rRowLast
    For sRow = rRow + 1 To rRowLast
        If rWS.Cells(rRow, rEnablerIDCol) = rWS.Cells(sRow, rEnablerIDCol) Then
            DuplicateEnablers = DuplicateEnablers + 1
            With rWS.Cells(rRow, rEnablerIDCol).Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .ThemeColor = xlThemeColorAccent2
                    .TintAndShade = 0.799981688894314
                    .PatternTintAndShade = 0
            End With
            With rWS.Cells(sRow, rEnablerIDCol).Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .ThemeColor = xlThemeColorAccent2
                    .TintAndShade = 0.799981688894314
                    .PatternTintAndShade = 0
            End With
            If InStr(1, rWS.Cells(rRow, rColLast), "DUPLICATE") = 0 Then
                rWS.Cells(rRow, rColLast) = rWS.Cells(rRow, rColLast) & "; DUPLICATE"
            End If
        End If
    Next
Next

'update the hyperlink
Call RefreshOnePagerHyperlink(sWS, rWS)
Call SetFreezePane(rWS, num2col(rEnablerIDCol + 1))

Application.Calculation = CalcMode
Application.ScreenUpdating = True

MsgBox ("Check completed." & vbCrLf & vbCrLf & _
    "Changed Enablers:   " & ChangedEnablers & vbCrLf & _
    "Changed Fields:   " & ChangedFields & vbCrLf & _
    "Added Enablers:   " & NewEnablers & vbCrLf & _
    "Removed Enablers:   " & RemovedEnablers & vbCrLf & _
    "Duplicate Enablers:     " & DuplicateEnablers)
    
Call StatusBarUpdate("")
'Clear all color settings and the SPARE column in the target ws
'if row row not found set "REMOVED" in SPARE

'scan if all rows in the source list are in the target list. If not add it to the end.

End Function

Function SelectWorksheet() As Worksheet

Dim MsgTxt As String
Dim rWS As Worksheet
Dim ws As Worksheet
Dim wb As Workbook
Dim w As Integer
Dim sInput As String
Dim s As Integer

On Error Resume Next

'get the worksheet with the copy of the data in

Do While SelectWorksheet Is Nothing
    w = 0
    MsgTxt = "Select workbook you want to select your 'Enabler Snapshot' worksheet from:" & vbCrLf
    For Each wb In Workbooks
        If wb.Name <> ThisWorkbook.Name Then
            w = w + 1
            MsgTxt = MsgTxt & w & ". " & wb.Name & vbCrLf
        End If
    Next
    MsgTxt = MsgTxt & vbCrLf & "Enter workbook # to select worksheet from."
    If w = 0 Then
        MsgTxt = "Open at least one workbook in which you either have a BMC enabler list snapshot to compare against or to create a new BMC Enabler snapshot in."
        Call MsgBox(MsgTxt, vbOKOnly)
        Exit Function
    End If
    sInput = InputBox(MsgTxt, "Check for changed Enabler / Initiative data")
    s = sInput + 0
    w = 0
    For Each wb In Workbooks
        If wb.Name <> ThisWorkbook.Name Then
            w = w + 1
            If s = w Then
                Exit For
            End If
        End If
    Next
    If s <> w Or s = 0 Then
        If MsgBox("Invalid selection (" & s & ")" & vbCrLf & _
                "Press 'Ok' to retry or" & vbCrLf & _
                "Press 'Cancel' to terminate.", vbOKCancel) <> vbOK Then
            Set SelectWorksheet = Nothing
            Exit Function
        End If
        s = ""
    Else
        MsgTxt = "Select your 'Enabler snapshot' worksheet you want to compare with the current Enabler list:" & vbCrLf & vbCrLf
        w = 0
        For Each ws In wb.Worksheets
            If ws.Visible = xlSheetVisible Then
                w = w + 1
                MsgTxt = MsgTxt & w & ": " & ws.Name & vbCrLf
            End If
        Next
        MsgTxt = MsgTxt & vbCrLf & "N: Create new Enabler snapshot worksheet" & vbCrLf
        MsgTxt = MsgTxt & vbCrLf & "Enter worksheet #"
        sInput = InputBox(MsgTxt, "Check for changed Enabler / Initiative data")
        s = 0
        s = sInput + 0
        w = 0
        If s > 0 Then
            For Each ws In wb.Worksheets
                If ws.Visible = xlSheetVisible Then
                    w = w + 1
                    If s = w Then
                        Exit For
                    End If
                End If
            Next
        ElseIf UCase(sInput) = "N" Then
            Err.Clear
            Set ws = wb.Worksheets().Add
            If Err = 0 Then
                ws.Name = Replace(Replace(Now, ".", "-"), ":", ".") '"Enabler Snapshot "
            End If
            If Err Then
                s = 0
            Else
                Call InitEnablerWS(ThisWorkbook.Worksheets(Tab_BMCEnablerList), ws)
                If Err = 0 Then
                    s = 1
                    w = s
                End If
            End If
        End If
        If s <> w Or s = 0 Then
            If MsgBox("Invalid selection (" & s & ")" & vbCrLf & _
                    "Press 'Ok' to retry or" & vbCrLf & _
                    "Press 'Cancel' to terminate.", vbOKCancel) <> vbOK Then
                Set SelectWorksheet = Nothing
                Exit Function
            End If
            s = 0
        Else
            Set SelectWorksheet = ws
        End If
    End If
    
Loop

End Function

Function InitEnablerWS(refWS As Worksheet, rWS As Worksheet)
Dim sColLast    As Integer
Dim strRange    As String
Dim c           As Integer

On Error Resume Next
sColLast = refWS.Range(C_LastColumn).Column - 1
'prepare first row
strRange = "A1:" & num2col((sColLast)) & 1
refWS.Range(strRange).Copy
rWS.Range("A1").PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
strRange = num2col((sColLast)) & 1
rWS.Range(strRange).Copy
strRange = num2col((sColLast) + 1) & 1
rWS.Range(strRange).PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=False

rWS.Range(strRange) = HeaderChangeTag
strRange = "A1:" & num2col((sColLast) + 1) & 1

'Prepare 2nd row as reference
'rWS.Range(strRange).Copy
'rWS.Range("A2").PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
strRange = "A2:" & num2col((sColLast) + 1) & 2
With rWS.Range(strRange)
    With .Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    .NumberFormat = "General"
    .HorizontalAlignment = xlLeft
    
End With

'Delete all conditional formatting
rWS.Cells.FormatConditions.Delete
strRange = "A2:" & num2col((sColLast) + 1) & 2
Range(strRange).ClearContents

strRange = "A1:" & num2col((sColLast) + 1) & 2
Call SetCellFormat(Range(strRange))
                    

Call OP_GroupOutlineSet(refWS, 2)
For c = 1 To sColLast + 1
    If refWS.Columns(num2col((c)) & ":" & num2col((c))).ColumnWidth > 0 Then
        rWS.Columns(num2col((c)) & ":" & num2col((c))).ColumnWidth = refWS.Columns(num2col((c)) & ":" & num2col((c))).ColumnWidth
    End If
Next
Err.Clear
strRange = "A:" & num2col((sColLast) + 1)
Columns(strRange).EntireColumn.Hidden = False

End Function

Sub Macro4()
'
' Macro4 Macro
'

'
    Range("L3").Select
    'Yellow
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 65535
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    'Clear interior
    With Selection.Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    With Selection.Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    'Red font
    With Selection.Font
        .Color = -16776961
        .TintAndShade = 0
    End With
    'Black font
    With Selection.Font
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
    End With
    Range("A3").Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent2
        .TintAndShade = 0.799981688894314
        .PatternTintAndShade = 0
    End With
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 192
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent2
        .TintAndShade = 0.399975585192419
        .PatternTintAndShade = 0
    End With
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent4
        .TintAndShade = 0.399975585192419
        .PatternTintAndShade = 0
    End With
End Sub

Function SetCellFormat(Rng As Range)

With Rng
    '.ClearComments
    .Borders(xlDiagonalDown).LineStyle = xlNone
    .Borders(xlDiagonalUp).LineStyle = xlNone
    With .Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With .Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With .Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With .Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    .VerticalAlignment = xlTop
    .WrapText = True
End With

End Function


Private Sub FctRefreshOnePagerHyperlink()

Dim sWS As Worksheet
Dim rWS As Worksheet

Set sWS = SelectWorksheet()
If sWS Is Nothing Then
    Exit Sub
End If
Set rWS = SelectWorksheet()
If rWS Is Nothing Then
    Exit Sub
End If

Call RefreshOnePagerHyperlink(sWS, rWS)

End Sub
Function RefreshOnePagerHyperlink(Optional sWS As Worksheet, Optional rWS As Worksheet)


Dim sRow As Integer
Dim rRow As Integer
Dim sRowLast As Integer
Dim rRowLast As Integer
Dim dlm As Date

Dim rEnablerIDCol   As String
Dim sEnablerIDCol   As String
Dim hlAddress       As String

On Error Resume Next

If Not sWS Is Nothing And Not rWS Is Nothing Then
    rRowLast = LastRow(rWS)
    sRowLast = LastRow(sWS)
    
    sEnablerIDCol = num2col(sWS.Range("_E_Enabler_ID").Column)
            
    rEnablerIDCol = num2col(rWS.Range("_E_Enabler_ID").Column)
    If rEnablerIDCol = "" Then
        rEnablerIDCol = sEnablerIDCol
    End If
End If

Err.Clear
'Application.Calculation = xlCalculationManual

If False And rEnablerIDCol <> "" And sEnablerIDCol <> "" And rRowLast > 1 And sRowLast > 1 Then
    For rRow = 2 To rRowLast
        dlm = StatusBarUpdate("Update Hyperlink for Enabler " & rWS.Range(rEnablerIDCol & rRow), dlm)
        rWS.Range(rEnablerIDCol & rRow).Hyperlinks.Delete
        For sRow = 2 To sRowLast
            Err.Clear
            If UCase(sWS.Range(sEnablerIDCol & sRow)) = _
               UCase(rWS.Range(rEnablerIDCol & rRow)) Then
                'find the path and file name
                '_E_PathFileName _E_FileName
                If Err = 0 Then
                    hlAddress = sWS.Range(num2col(sWS.Range("_E_PathFileName").Column) & sRow)
                    'hlAddress = CleanFileName(hlAddress)
                    'rWS.Range(rEnablerIDCol & rRow).Hyperlinks.Add(
                
                    rWS.Hyperlinks.Add Anchor:=rWS.Range(rEnablerIDCol & rRow), _
                            Address:=hlAddress ', _
                            'TextToDisplay:=sWS.Range(num2col(sWS.Range("_E_FileName").Column) & sRow)
                    Err.Clear
                    Exit For
                End If
                Err.Clear
            End If
        Next
    Next
End If

Call StatusBarUpdate("")

End Function
Attribute VB_Name = "b2_OnePagerRefresh"
Option Explicit

Sub SupportFct_ReDeployOnePager()

'macro called by a button on the Settings tab
Call ReDeployOnePager

End Sub

Private Function ReDeployOnePager()

Dim sOP_WS  As Worksheet
Dim rOP_WS  As Worksheet

' select one pager to imp<ort from
' select one pager to write into

'copy all cells 1:1 that have no formula associated
'check that the size of both OnePager editions are identical
Set sOP_WS = Nothing
Set rOP_WS = Nothing

Do While sOP_WS Is Nothing And rOP_WS Is Nothing
    Set sOP_WS = SelectWS_ReDeployment("Source OnePager")
    Set rOP_WS = SelectWS_ReDeployment("Target OnePager")
    'potentially open the template file from here.
    
    If sOP_WS Is Nothing Or rOP_WS Is Nothing Then
        Err.Clear
        Exit Do
    Else
        If sOP_WS.Name = rOP_WS.Name And sOP_WS.Parent.Name = rOP_WS.Parent.Name Then
            If (MsgBox("Error Source and Target worksheet are the same." & vbCrLf & "Do you want to retry?", vbYesNo) <> vbYes) Then
                Exit Function
            End If
        End If
    End If
Loop

If Not sOP_WS Is Nothing And Not rOP_WS Is Nothing Then
    Call OP_CopyOnePager(sOP_WS, rOP_WS)

    Call OP_CheckTabName(rOP_WS)
    
    'autosize row height
    
    'save file as original file name rOP save as sOP.
End If

End Function
Function OP_CopyOnePager(sOP_WS As Worksheet, rOP_WS As Worksheet) As Boolean

Dim sOPRows As Integer
Dim rOPRows As Integer
Dim sOPCols As Integer
Dim rOPCols As Integer
Dim r As Integer
Dim c As Integer
Dim CalcMode As Variant
Dim lmdt    As Date

CalcMode = Application.Calculation
Application.Calculation = xlCalculationManual

sOPRows = LastRow(sOP_WS)
sOPCols = LastCol(sOP_WS)
rOPRows = LastRow(rOP_WS)
rOPCols = LastCol(rOP_WS)

If sOPRows > 0 And sOPCols > 0 And rOPRows > 0 And rOPCols > 0 Then

    If sOPRows <> rOPRows Or sOPCols <> rOPCols Then
        Err.Clear
    End If
    For r = 1 To sOPRows
        For c = 1 To sOPCols
            If sOP_WS.Cells(r, c).HasFormula Then
                If rOP_WS.Cells(r, c).HasFormula Then
                    'normal condition
                Else
                    'shouldn't be case
                    MsgBox (num2col(c) & r)
                    Err.Clear
                End If
            Else
                If rOP_WS.Cells(r, c).HasFormula Then
                    'shouldn't be case
                    Err.Clear
                Else
                    'normal condition - now we can copy
                    If rOP_WS.Cells(r, c).Locked = False Then
                        rOP_WS.Cells(r, c).Value = sOP_WS.Cells(r, c).Value
                        lmdt = StatusBarUpdate("Copy cell " & num2col(c) & r, lmdt)
                        Err.Clear
                    Else
                        If rOP_WS.Cells(r, c).Locked <> rOP_WS.Cells(r, c).Locked Then
                            MsgBox ("Unexpected that the receiving cell is locked: " & num2col(c) & r)
                            Err.Clear
                        End If
                    End If
                End If
            End If
        Next
    Next
    'ensure that the right tab name is created.
    
    Call OP_CheckTabName(rOP_WS)
    Call OP_AutoFitRowHeight_ALL(rOP_WS, False)
    
    OP_CopyOnePager = True
    
End If

Application.Calculation = CalcMode


End Function

Function SelectWS_ReDeployment(WSMsg As String, Optional IsTemplate As Boolean) As Worksheet

Dim MsgTxt As String
Dim rWS As Worksheet
Dim ws As Worksheet
Dim wb As Workbook
Dim w As Integer
Dim sInput As String
Dim s As Integer

On Error Resume Next

'get the worksheet with the copy of the data in

Do While rWS Is Nothing
    w = 0
    Set rWS = Nothing
    
    MsgTxt = "Select workbook you want to select the '" & WSMsg & "' OnePager worksheet:" & vbCrLf
    For Each wb In Workbooks
        If wb.Name <> ThisWorkbook.Name Then
            w = w + 1
            MsgTxt = MsgTxt & w & ". " & wb.Name & vbCrLf
        End If
    Next
    MsgTxt = MsgTxt & vbCrLf & "Enter workbook # to select worksheet from."
    If w < 2 Then
        MsgTxt = "Open at least two workbooks: One that contains the Import from OnePager and the other the OnePager template to import the OnePager data into."
        Call MsgBox(MsgTxt, vbOKOnly)
        Exit Function
    End If
    sInput = InputBox(MsgTxt)
    s = sInput + 0
    w = 0
    For Each wb In Workbooks
        If wb.Name <> ThisWorkbook.Name Then
            w = w + 1
            If s = w Then
                Exit For
            End If
        End If
    Next
    If s <> w Or s = 0 Then
        If MsgBox("Invalid selection (" & s & ")" & vbCrLf & _
                "Press 'Ok' to retry or" & vbCrLf & _
                "Press 'Cancel' to terminate.", vbOKCancel) <> vbOK Then
            Set rWS = Nothing
            Exit Function
        End If
        s = ""
    Else
        MsgTxt = "Select worksheet " & WSMsg & ":" & vbCrLf
        w = 0
        For Each ws In wb.Worksheets
            If ws.Visible = xlSheetVisible Then
                w = w + 1
                MsgTxt = MsgTxt & w & ": " & ws.Name & vbCrLf
            End If
        Next
        'MsgTxt = MsgTxt & vbCrLf & "N: Create new worksheet" & vbCrLf
        MsgTxt = MsgTxt & vbCrLf & "Enter worksheet #"
        sInput = InputBox(MsgTxt)
        s = 0
        s = sInput + 0
        w = 0
        If s > 0 Then
            For Each ws In wb.Worksheets
                If ws.Visible = xlSheetVisible Then
                    w = w + 1
                    If s = w Then
                        Set rWS = ws
                        Exit For
                    End If
                End If
            Next
        Else
            s = 0
        End If
        
        If rWS Is Nothing Then
            If MsgBox("Invalid selection (" & s & ")" & vbCrLf & _
                    "Press 'Ok' to retry or" & vbCrLf & _
                    "Press 'Cancel' to terminate.", vbOKCancel) <> vbOK Then
                Set rWS = Nothing
                Exit Function
            End If
            s = 0
        Else
            If OP_IsOnePagerSheet(rWS) = False Then
                If MsgBox("The worksheet" & vbCrLf & rWS.Name & vbCrLf & "seems not to be a OnePager worksheet." & vbCrLf & vbCrLf & "You still want to continue?", vbYesNo) <> vbYes Then
                    Set rWS = Nothing
                    s = 0
                End If
            End If
            'Set rWS = ws
        End If
    End If
Loop

Set SelectWS_ReDeployment = rWS
End Function

Attribute VB_Name = "h_AutoFitCellHeight"
Option Explicit

Public MaxHeight As Integer
Public LastExcelHeight As Integer

Public FirstRow As Integer
Global Const DBFirstRow = 8

Sub AlignEnablerRows()

Dim NextRow As Integer

MaxHeight = 10000

FirstRow = DBFirstRow
NextRow = FirstRow
Do While NextRow > 0
    NextRow = FixAtMaxTableHeight(NextRow)
Loop

End Sub

Function ResetDashboardSheet(Optional wsInput As Worksheet)

Dim lRow, i As Integer
Dim wsDB    As Worksheet

MaxHeight = 10000
FirstRow = DBFirstRow

If Not wsInput Is Nothing Then
    Set wsDB = wsInput
Else
    Set wsDB = ActiveSheet
End If
lRow = LastRow(wsDB)

'FixAtMaxTableHeight ((NextRow))
i = FirstRow
Do While i <= lRow
    'hide row in the enabler section
    wsDB.Range(i & ":" & i).EntireRow.Hidden = False
    i = i + 1
Loop

Call ProtectWS(wsDB, True)

End Function

Function FixAtMaxTableHeight(sRow As Integer, Optional wsInput As Worksheet) As Integer

' Hide / Unhide as many rows as required until the wanted "EnablerCCCSection" Height is reached

Dim s, i, j, rCCC, o, space As Integer
Dim RowHeightSum As Integer
Dim MaxRowHeight As Integer
Dim BU, Market As String
Dim ColEnablerText, ColBMCText, ColNrText As String
Dim wsDB As Worksheet
Dim ScrUpdate As Variant
Dim RowLast As Integer
Dim LastRowHeight As Integer

ScrUpdate = Application.ScreenUpdating

Application.ScreenUpdating = False

' init section on the Dashboard
ColEnablerText = "D"
ColBMCText = "C"
ColNrText = "B"

'Set wsDB = Worksheets(Tab_BMCDashboard)
If Not wsInput Is Nothing Then
    Set wsDB = wsInput
Else
    Set wsDB = ActiveSheet
End If

MaxRowHeight = Range("MaxRowHeight")

'procedure
wsDB.Activate
wsDB.Select

'determine offset between ENABLER Section and CCC Section
i = FirstRow        'start of the enabler section
o = DetermineOffsetEnabler2CCC(wsDB.Range(ColNrText & i))


'hide all rows before the first row to process (=s) as this was already processed during a previous run
s = sRow            'first row to process in the enabler section
i = FirstRow        'start of the enabler section

If sRow > 89 Then 'testing only
    Err.Clear
End If
Do While i < s
    'hide row in the enabler section
    wsDB.Range(i & ":" & i).EntireRow.Hidden = True
    'hide row in the CCC section
    rCCC = i + o
    wsDB.Range(rCCC & ":" & rCCC).EntireRow.Hidden = True
    i = i + 1
Loop

'hide all rows where the enabler text is empty
RowLast = 0
Market = ""

rCCC = FirstRow - 1 + o
RowHeightSum = (wsDB.Range(ColNrText & FirstRow - 1).Height + wsDB.Range(rCCC & ":" & rCCC).Height) '* XLS2PPT_Pixeladjustment '0.8 'AAAA
Err.Clear

Do While wsDB.Range(ColNrText & i) <> ""

    DoEvents
    Application.Calculation = xlCalculationManual
    rCCC = i + o
    
    If InStr(1, wsDB.Range(ColBMCText & i), "Greater", vbTextCompare) > 0 Then ' i = 13 Then
        Err.Clear
    End If
    'AutoFitRow (i)
    'AutoFitRow (i + o)
    
    space = InStr(1, wsDB.Range(ColBMCText & i), " ", vbTextCompare)
    If Market = "" Then
        Market = Trim(wsDB.Range(ColBMCText & i)) 'Trim(Right(wsDB.Range(ColBMCText & i), Len(wsDB.Range(ColBMCText & i)) - space))
    End If
    
    If RowLast = 0 And wsDB.Range(ColEnablerText & i) <> "" And _
                       Market = Trim(wsDB.Range(ColBMCText & i)) Then 'Trim(Right(wsDB.Range(ColBMCText & i), Len(wsDB.Range(ColBMCText & i)) - space)) Then
        wsDB.Range(i & ":" & i).EntireRow.Hidden = False
        wsDB.Range(rCCC & ":" & rCCC).EntireRow.Hidden = False
        
        ' limit the row height in the Enabler section if setting is given (MaxRowHeight)
        If (MaxRowHeight > 0 And MaxRowHeight < wsDB.Range(ColNrText & i).Height) Then
            wsDB.Range(ColNrText & i).RowHeight = MaxRowHeight  'fix row height to the maximum configured
        End If
        
        LastRowHeight = (wsDB.Range(ColNrText & i).Height + wsDB.Range(rCCC & ":" & rCCC).Height) '* XLS2PPT_Pixeladjustment '0.8
        RowHeightSum = RowHeightSum + LastRowHeight
        Err.Clear
        'i = i - 1
    Else
        wsDB.Range(i & ":" & i).EntireRow.Hidden = True
        wsDB.Range(rCCC & ":" & rCCC).EntireRow.Hidden = True
    End If
    
    If (Market <> Trim(wsDB.Range(ColBMCText & i))) Then  'Trim(Right(wsDB.Range(ColBMCText & i), Len(wsDB.Range(ColBMCText & i)) - space))) Then
        Err.Clear
    End If
    ' if the newly added row increase the max table height ...
    If RowLast = 0 And (RowHeightSum > MaxHeight) Then
        '... remove the add row from being displayed
        RowHeightSum = RowHeightSum - LastRowHeight
        i = i - 1       'AAA
        RowLast = i + 1
    ElseIf RowLast = 0 And Market <> Trim(wsDB.Range(ColBMCText & i)) Then
                                                             'Trim(Right(wsDB.Range(ColBMCText & i), Len(wsDB.Range(ColBMCText & i)) - space))) Then
        'If (wsDB.Range(ColBMCText & i + 1) <> "" And _
        '    wsDB.Range(ColBMCText & i + 1) = wsDB.Range(ColBMCText & i)) Then
            'GoTo Skip1
            j = i
            If i = 24 Then
                Err.Clear
            End If
            
            Do While wsDB.Range(ColNrText & i) <> "" And _
                                (wsDB.Range(ColBMCText & i) = wsDB.Range(ColBMCText & i + 1) Or _
                                 wsDB.Range(ColBMCText & i) <> wsDB.Range(ColBMCText & i - 1) Or _
                                 wsDB.Range(ColNrText & i + 1) = "")    'FirstBMC
                wsDB.Range(i & ":" & i).Select
                i = i - 1
            Loop
            
            ' if the "scroll" back ends before the starting line
            If i <= sRow Then
                RowHeightSum = RowHeightSum - LastRowHeight
                i = j - 1       'AAA
            End If
        'End If
Skip1:
        'if the next line is no enabler line then ignore that table height has been reached
        If (wsDB.Range(ColNrText & i + 1) <> "") Then
            RowLast = i + 1
        End If
    End If
    
    wsDB.Range("A" & i) = ""    'wsDB.Range(ColNrText & i).Height
    
    
    'BU = Trim(Replace(wsDB.Range(ColBMCText & i), wsDB.Range("B2"), "", , , vbTextCompare))
    'If InStr(1, Range("BGBusinnesses"), BU, vbTextCompare) = 0 And wsDB.Range(i & ":" & i).EntireRow.Hidden = False Then
    '    Range("BGBusinnesses") = Range("BGBusinnesses") & " - " & BU
    'End If
    
    i = i + 1
Loop

'document what BU's and Markets are on that slide
Range("BGBusinnesses") = ""
Range("MarketTitle") = ""
For i = FirstRow To FirstRow + o - 2
    
    If wsDB.Range(i & ":" & i).EntireRow.Hidden = False Then
    
        space = InStr(1, wsDB.Range(ColBMCText & i), " ", vbTextCompare)
        BU = Trim(Left(wsDB.Range(ColBMCText & i), space))
        If InStr(1, Range("BGBusinnesses"), BU, vbTextCompare) = 0 And BU <> "" Then
            If (Len(Trim(Range("BGBusinnesses"))) > 0) Then
                Range("BGBusinnesses") = Range("BGBusinnesses") & ", "
            End If
            Range("BGBusinnesses") = Range("BGBusinnesses") & BU
        End If
        Market = Trim(Right(wsDB.Range(ColBMCText & i), Len(wsDB.Range(ColBMCText & i)) - space))
        If InStr(1, Range("MarketTitle"), Market, vbTextCompare) = 0 And Market <> "" Then
            If (Len(Trim(Range("MarketTitle"))) > 0) Then
                Range("MarketTitle") = Range("MarketTitle") & " & "
            End If
            Range("MarketTitle") = Range("MarketTitle") & Market
        End If
        
    End If
Next

'document the height of each row in the CCC section
'i = FirstRow + o - 1
'Do While wsDB.Range(ColNrText & i) <> ""
    'wsDB.Range("A" & i) = wsDB.Range(ColNrText & i).Height
'    i = i + 1
'Loop
LastExcelHeight = RowHeightSum
'remember what the last row was that was shown.
FixAtMaxTableHeight = RowLast

Application.ScreenUpdating = ScrUpdate

End Function


Function DetermineOffsetEnabler2CCC(NrCell As Range) As Integer
' calculates the offset between the Enabler section and the CCC section
Dim i As Integer

i = 1

' count rows that have an entry in the "Nr" column
Do While NrCell.Cells(i, 1) <> ""
    i = i + 1
Loop

' add count of rows that have NO entry in the "Nr" column
Do While NrCell.Cells(i, 1) = ""
    i = i + 1
Loop
'add 1 to skip the headline
'i = i + 1

DetermineOffsetEnabler2CCC = i

End Function


Function AutoFitRow(MyRow As Integer, Optional StartCol As Integer = 1, Optional EndCol As Integer = 14)

' works for a single row only!

Dim myrange As Range
Dim CurrentSel As Range
Dim ws As Worksheet
Dim ScrUpdate As Variant
Dim Prot As Boolean
Dim i   As Integer
Dim s   As Integer
Dim e   As Integer

Set CurrentSel = Selection

ScrUpdate = Application.ScreenUpdating
Application.ScreenUpdating = False
Application.EnableEvents = False


Set myrange = Range("A" & MyRow)

'Set ws = ActiveWorkbook.Worksheets(MyRange.Parent.Name)
'Set ws = ActiveSheet
Prot = UnProtectWS(ActiveSheet)

If (Range(MyRow & ":" & MyRow).EntireRow.Hidden = False) Then
    Range(MyRow & ":" & MyRow).EntireRow.AutoFit
    Err.Clear
    
    For i = StartCol To EndCol
        'MyRange.Cells(1, i).Select
        Call AutoFitCell(myrange.Cells(1, i))
    Next i
End If

Call ProtectWS(ActiveSheet, (Prot))

CurrentSel.Select
CurrentSel.Activate
Application.EnableEvents = True
Application.ScreenUpdating = ScrUpdate

End Function

Function T_autofitrow()
Dim myrange As Range
Set myrange = Range("A" & 3)
    'Call AutoFitRow(myrange.Cells(1, 1))
    Call AutoFitRow_New(3)
End Function

Function AutoFitRow_New(MyRow As Integer)
' this function is for testing only and not in use right now.
' works for a single row only!

Dim myrange As Range
Dim CurrentSel As Range
Dim ws As Worksheet
Dim r, cs, cE As String
Dim i, c As Integer
Dim ScrUpdate As Variant
Dim Prot As Boolean

Set CurrentSel = Selection

ScrUpdate = Application.ScreenUpdating

Application.ScreenUpdating = False
Application.EnableEvents = False

Set myrange = Range("A" & MyRow)

'Set ws = ActiveWorkbook.Worksheets(MyRange.Parent.Name)
'Set ws = ActiveSheet
Prot = UnProtectWS(ActiveSheet)

For i = 1 To 30 ' was 10 till 2-Aug-2017
        'MyRange.Cells(1, i).Select
        cs = num2col((i))
        c = Range(cs & MyRow).MergeArea.Rows.Count
        If c > 1 Then
            Exit For
        End If
Next i
    
If (Range(MyRow & ":" & MyRow).EntireRow.Hidden = False And c = 1) Then
    ' set default minimal height
    Range(MyRow & ":" & MyRow).EntireRow.AutoFit
    Err.Clear
    
    
    For i = 1 To 30 ' was 10 till 2-Aug-2017
        'MyRange.Cells(1, i).Select
        cs = num2col((i))
        c = Range(cs & MyRow).MergeArea.Columns.Count
        cE = num2col(i + c - 1)
        r = cs & MyRow & ":" & cE & MyRow
        Set myrange = Range(r)
        If c > 1 Then
            Err.Clear
        End If
        
        'If (MyRange.Rows.Count = 1) Then
            Call AutoFitCell_New(myrange)
        'End If
        Err.Clear
        i = i + c - 1
    Next i
End If

Call ProtectWS(ActiveSheet, (Prot))

CurrentSel.Select
CurrentSel.Activate

Application.EnableEvents = True
Application.ScreenUpdating = ScrUpdate

End Function

Function AutoFitCell(Rng As Range)

' this is the original function to autofit the row height
' The call ".MergeCells = True" caused parts of the merged cells to become LOCKED. With this it can't be deleted with the DEL button
' change to "Selection.Merge" to avoid this

Dim CurrentRowHeight As Single, MergedCellRgWidth As Single
Dim CurrCell As Range
Dim ActiveCellWidth As Single, PossNewRowHeight As Single
Dim l As Boolean
Dim ScrUpdate As Variant
Dim Prot As Boolean
Dim s As String

On Error Resume Next

ScrUpdate = Application.ScreenUpdating
'Application.Calculation = xlCalculationManual

If Rng.row = 30 Then
    Err.Clear
    s = Right(Rng.Value, 1)
    
    'MsgBox ("'" & s & "'" & Len(s))
    If Right(s, 1) = vbLf Then s = Left(s, Len(s) - 1)
    If Right(s, 1) = vbCr Then s = Left(s, Len(s) - 1)
    
    'MsgBox ("'" & s & "'")
    
End If

Application.ScreenUpdating = False
Rng.Select
'Do height resizing only if there is something in that cell
If (Rng <> "") Then
    With Rng.MergeArea
             If .Rows.Count = 1 Then ' And .WrapText = True Then
                 l = Rng.Locked
                 'Keine Anzeige der |fffd|nderung -l|fffd|uft im Hintergrund
                 'Die Variable CurrentRowHeight ist die aktuelle H|fffd|he der Reihe
                 CurrentRowHeight = .RowHeight
                 
                 'get the current width of the single cell  (first cell of a merged area)
                 ActiveCellWidth = Rng.ColumnWidth
                 
                 'Alle verbundene Zellen werden zu einem Verbund gemacht.
                 
                 'Variable:MergedCellRgWidth = addiere die einzelnen Spaltenbreiten zusammen
                 For Each CurrCell In Selection
                 'F|fffd|r jede einzelne Zelle im Verbund:
                     MergedCellRgWidth = CurrCell.ColumnWidth + MergedCellRgWidth
                 Next
                 
                 
                 'Unmerge all cells in the given area
                 '.MergeCells = False
                 If Selection.Columns.Count > 1 Then
                    Rng.UnMerge
                 End If
    'GoTo l1
                 
                 'Expand the first cell to the width of the previously merged cellls
                 .Cells(1).ColumnWidth = MergedCellRgWidth
                 'optimale Zeilenh|fffd|he festlegen
    'GoTo l1
                 .EntireRow.AutoFit
                 
                 'Die variable PossNewRowHeight = diese aktuelle Zeilenh|fffd|he
                 PossNewRowHeight = .RowHeight + 5
                 If Right(Rng.Value, 1) = vbLf Then
                    'Rng.Value = Left(Rng.Value, Len(Rng.Value) - 1)
                    PossNewRowHeight = PossNewRowHeight + 10
                 End If
                 
                 'urspr|fffd|ngliche Spaltenbreite wiederherstellen
                 .Cells(1).ColumnWidth = ActiveCellWidth
                 
                 Err.Clear
                 'Merge the cells again. Selection covers the previously merged area
                 '.MergeCells = True
                 If Selection.Columns.Count > 1 Then
                    Selection.Merge = True
                 End If
                 If Err Then
                    Err.Clear
                 End If
                 'rng.Locked = l
                 'If Err Then
                 '   Err.Clear
                 'End If
                 On Error Resume Next
                 'row height might not be adjustable in case it goes beyond the maxium (whatever this is)
                 .RowHeight = IIf(CurrentRowHeight > PossNewRowHeight, CurrentRowHeight, PossNewRowHeight)
                 On Error GoTo 0
                   ' wenn Variable CurrentRowHeight > als Variable PossNewRowHeight, dann CurrentRowHeight, sonst PossNewRowHeight
             End If
l1:
    End With
End If

Application.ScreenUpdating = ScrUpdate

End Function

Function AutoFitCell_New(Rng As Range)
' this function is for testing only and not in use right now.
Dim CurrentRowHeight As Single, MergedCellRgWidth As Single
Dim CurrCell As Range
Dim ActiveCellWidth As Single, PossNewRowHeight As Single
Dim l As Boolean
Dim i, Col As Integer
Dim adr As String
Dim ScrUpdate As Variant
Dim Prot As Boolean

On Error Resume Next

ScrUpdate = Application.ScreenUpdating

adr = Rng.Address
Col = Rng.Columns.Count

Err.Clear
'Application.ScreenUpdating = False
Rng.Select
If (Rng.Cells(1, 1) <> "") Then
    With Rng
        If .Rows.Count = 1 Then ' And .WrapText = True Then
            l = Rng.Locked
            'Keine Anzeige der |fffd|nderung -l|fffd|uft im Hintergrund
            
            'Die Variable CurrentRowHeight ist die aktuelle H|fffd|he
            CurrentRowHeight = .RowHeight
                 
            ActiveCellWidth = .Cells(1, 1).ColumnWidth
                 
                
            'Alle verbundene Zellen werden zu einem Verbund gemacht.
            For i = 1 To .Columns.Count
                'F|fffd|r jede einzelne Zelle im Verbund:
                MergedCellRgWidth = .Cells(1, i).ColumnWidth + MergedCellRgWidth
            Next
                 
            'Variable:MergedCellRgWidth = addiere die einzelnen Spaltenbreiten zusammen
            ''.MergeCells = False
            .UnMerge
                 
            'verbundene Zellen teilen
            .Cells(1, 1).ColumnWidth = MergedCellRgWidth
            'Spaltenbreite auf die Breite der Variablen MergedCellRgWidth anpassen (= Breite der urspr|fffd|nglich verbundenen Zellen)
            .EntireRow.AutoFit
            'optimale Zeilenh|fffd|he festlegen
            PossNewRowHeight = .RowHeight + 5
            If Right(Rng.Cells(1, 1), 1) = vbLf Then
                    'Rng.Value = Left(Rng.Value, Len(Rng.Value) - 1)
                    'PossNewRowHeight = PossNewRowHeight + 10
            End If
            Err.Clear
            'Die variable PossNewRowHeight = diese aktuelle Zeilenh|fffd|he
            .Cells(1, 1).ColumnWidth = ActiveCellWidth
            'urspr|fffd|ngliche Spaltenbreite wiederherstellen
            For i = 1 To Col
                .Cells(1, i).Locked = l
                 If Err Then
                    Err.Clear
                 End If
            Next
            
            '.MergeCells = True
            '.MergeArea.Select
            Selection.Merge
            If Err Then
                    Err.Clear
            End If
                 'rng.Locked = l
            If Col > 1 Then
                Err.Clear
            End If
            For i = 1 To Col
                If .Cells(1, i).Locked <> l Then
                    Err.Clear
                 End If
            Next
            On Error Resume Next
            'row height might not be adjustable in case it goes beyond the maxium (whatever this is)
            .RowHeight = IIf(CurrentRowHeight > PossNewRowHeight, CurrentRowHeight, PossNewRowHeight)
            On Error GoTo 0
                 
            End If
    End With
End If

Application.ScreenUpdating = ScrUpdate

End Function
Function Test_RefreshCell()

Dim r As Range
Dim i As Integer

Set r = Selection

'MsgBox (rng.Cells(1, i).Locked)
'MsgBox (rng.Cells(1, i).Style.Locked)

r.UnMerge
r.MergeCells = True
r.Locked = False
Set r = Range("C83:G83")
Call AutoFitCell_New(r)

For i = 1 To r.Columns.Count
    'MsgBox (r.Cells(1, i).Locked)
Next i

End Function

Attribute VB_Name = "h_CellComments"
Option Explicit

Const CommentWidthMax = 200

Sub FitWSComments()

Dim c As Long

If MsgBox("Re-formats all cell COMMENTS on the current worksheet" & vbCrLf & _
            "        '" & ActiveSheet.Name & "'" & vbCrLf & _
            "Do you want to continue?", vbOKCancel) = vbOK Then
        c = FitComments(ActiveSheet)
        Call MsgBox("Number of comments formattted: " & c)
End If

End Sub

Sub FitAllComments()

'resize all comments.

Dim ws As Worksheet

For Each ws In ActiveWorkbook.Worksheets
    
    Call StatusBarUpdate("Re-sizing comment box on worksheet '" & ws.Name & "'")
    
    Call FitComments(ws)
Next

Call ClearStatusBar
    
End Sub

Private Function ResizeComment(xComment As Comment)

Dim lArea As Long

    With xComment.Shape
        .Placement = xlMoveAndSize
        .Top = xComment.Parent.Top + 5
        .Left = xComment.Parent.Offset(0, 1).Left + 5
        .TextFrame.Characters.Font.Name = "Tahoma"
        .TextFrame.Characters.Font.Size = 11
        .TextFrame.AutoSize = True
    End With
    
    lArea = xComment.Shape.Width * xComment.Shape.Height
    
    If (xComment.Shape.Width > CommentWidthMax) Then
        xComment.Shape.Width = CommentWidthMax
        xComment.Shape.Height = (lArea / xComment.Shape.Width) * 1.4
    End If

End Function
Function FitComments(rWS As Worksheet) As Long

'Makes the comments to a size that content is seen and the width is limited to 200 pixels
'addresses an issue that sometimes comments shrink to a siez of "0"

Dim xComment As Comment
Dim ws As Worksheet
Dim i As Long
Dim Prot As Boolean

If rWS Is Nothing Then
    Set ws = ActiveSheet
Else
    Set ws = rWS
End If

Prot = UnProtectWS(ws)

i = 0
For Each xComment In ws.Comments
    Call ResizeComment(xComment)
    i = i + 1
Next

Call ProtectWS(ws, Prot)

FitComments = i

End Function

Function AddComment(tCell As Range, tComment As String)

On Error Resume Next

Dim Comment As String
Dim sProtect As Boolean

sProtect = UnProtectWS(tCell.Worksheet)

Err.Clear

tCell.ClearComments

If (Len(tComment) > 0) Then
    
    tCell.AddComment (tComment)
    Call ResizeComment(tCell.Comment)
    'tCell.Comment.Shape.Width = CommentWidthMax
    'tCell.Comment.Shape.Height = 10 * Round((Len(tComment) / 40 + 1), 0)
'Else
'    tCell.ClearComments
    'Comment = tCell.Address
    'Comment = tCell.Comment.Text
End If

If Err Then
    Err.Clear
End If

Call ProtectWS(tCell.Worksheet, sProtect)

End Function
Private Sub C_Macro2()
'
' Macro2 Macro
'

'
    Range("H48").Select
    Range("H48").Comment.Delete
    Range("H48").AddComment ("2")
    Range("H48").Comment.Shape.Height = 200
    Range("H48").Comment.Shape.Width = 100
     Range("H48").Select
End Sub
Private Sub C_Macro3()
'
' Macro3 Macro
'

'
    Range("H445").Select
    Range("H445").AddComment
    Range("H445").Comment.Visible = False
    Range("H445").Comment.Text Text:= _
        "Philips:" & Chr(10) & "Thomas Bold Italic Normal" & Chr(10) & "New Line"
    Range("J446").Select
End Sub
Private Sub C_Macro4()
Dim UserN As String
Dim commt As String
Dim StartC, StartT, EndC, EndT, WhereT As String

UserN = Application.UserName
commt = UserN & Chr(10) & Chr(10) _
        & "Start: " & StartC & " X " & StartT & Chr(10) _
        & "End: " & EndC & " X " & EndT & Chr(10) _
        & "Where: " & WhereT
With Selection
        With Cells(Selection.row, Selection.Column)
        .ClearComments
        .AddComment
        .Comment.Visible = False
        .Comment.Shape.AutoShapeType = msoShapeRoundedRectangle
        .Comment.Text Text:=commt
            With .Comment.Shape.TextFrame
                ' Username
                With .Characters(1, Len(UserN)).Font
                    .Bold = True
                End With
                ' Start:
                With .Characters(InStr(1, commt, "Start:"), 6).Font
                    .Bold = True
                End With
                ' End:
                With .Characters(InStr(1, commt, "End:"), 4).Font
                    .Bold = False
                End With
                ' Where:
                With .Characters(InStr(1, commt, "Where:"), 6).Font
                    .Bold = True
                End With
                'With .Characters.Font
                '    .Size = 12
                'End With
            End With
        .Comment.Shape.TextFrame.AutoSize = True
        End With
End With
End Sub


Attribute VB_Name = "h_CompareSheets"
Option Explicit

Dim keyCol As String
Dim rStart1  As Integer
Dim rStart2  As Integer

Dim wbName1 As String
Dim wbName2 As String
Dim wsName1 As String
Dim wsName2 As String
Dim rHeader As Integer

Const wbName1Def = "MA&TC - BMC Dialogue Call Action Items 2018.xlsb"
Const wbName2Def = "MATC - BMC Dialogue Call Action Items 2018 mw updates (003).xlsb"
Const wsName1Def = "BMC Dialogue Call Action Items" '"BMC Enabler Summary List"
Const wsName2Def = "BMC Dialogue Call Action Items" '"BMC Enabler Summary List"

Function test_SelectWS()

Dim wbName As String
Dim wsName As String

wbName = "Testwb"
wsName = "Testws"

Call SelectWS(wbName, wsName)

End Function
Function SelectWS(ByRef DefWBName As String, ByRef DefWSName As String) As Worksheet

Dim tMsg    As String
Dim c       As Integer
Dim w       As Integer
Dim wb      As Workbook
Dim ws      As Worksheet
Dim wbName  As String
Dim wsName  As String

Err.Clear
On Error Resume Next
wbName = DefWBName
wsName = DefWSName

tMsg = ""
c = 0
For Each wb In Workbooks
    c = c + 1
    tMsg = tMsg & c & ": " & wb.Name & vbCrLf
Next wb
c = 0
wbName = InputBox(tMsg, "Select file", wbName)
c = wbName
If c > 0 Then
    wbName = Workbooks(c).Name
End If

Set wb = Workbooks(wbName)
If Err Then
    Err.Clear
End If
c = 0
tMsg = ""
For Each ws In wb.Worksheets
    If ws.Visible = xlSheetVisible Then
        c = c + 1
        tMsg = tMsg & c & ": " & ws.Name & vbCrLf
    End If
Next ws

c = 0
wsName = InputBox(tMsg, "Select file", wsName)
c = wsName
If c > 0 Then
    w = c
    c = 0
    For Each ws In wb.Worksheets
        If ws.Visible = xlSheetVisible Then
            c = c + 1
            If w = c Then
                wsName = ws.Name
            End If
        End If
    Next ws
End If

Err.Clear
Set SelectWS = Workbooks(wbName).Worksheets(wsName)
If Err Then
    MsgBox ("Failed to find workbook:" & vbCrLf & wbName1 & vbCrLf & wsName1)
Else
    DefWBName = wbName
    DefWSName = wsName
End If

End Function
Sub CompareWorksheets()

Dim ws1     As Worksheet
Dim ws2     As Worksheet
Dim iKeyCol As Integer
Dim cLast   As String
Dim icLast  As Integer
Dim c       As Integer
Dim tMsg    As String
Dim bNoMsg  As Boolean
Dim cChange As Long
Dim wb      As Workbook
Dim FilterCol  As String

'If wbName1 = "" Then wbName1 = wbName1Def
'If wbName2 = "" Then wbName2 = wbName2Def
'If wsName1 = "" Then wsName1 = wsName1Def
'If wsName2 = "" Then wsName2 = wsName2Def

'wbName1 = "BMC Design Master - HS v5.18-8.xlsb"
'wbName2 = wbName1
Err.Clear
On Error Resume Next

Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False

Set ws1 = SelectWS(wbName1, wsName1)
If Err Then
    MsgBox ("Failed to find workbook:" & vbCrLf & wbName1 & vbCrLf & wsName1)
    Exit Sub
End If

Err.Clear
Set ws2 = SelectWS(wbName2, wsName2)
If Err Then
    MsgBox ("Failed to find workbook:" & vbCrLf & wbName2 & vbCrLf & wsName2)
    Exit Sub
End If

FilterCol = "D"
keyCol = "A"
iKeyCol = ws1.Range(keyCol & "1").Column
cLast = "M"
icLast = ws1.Range(cLast & "1").Column

bNoMsg = True

rHeader = 4
rHeader = InputBox("Header row", "Enter Header Row", rHeader)
If Not (rHeader > 0) Then
    Exit Sub
End If

' Compare headers
rStart1 = rHeader
rStart2 = rStart1
Do While ws1.Range(num2col(iKeyCol) & rStart1) <> "" And iKeyCol <= icLast
    If ws1.Range(num2col(iKeyCol) & rStart1) <> ws2.Range(num2col(iKeyCol) & rStart2) Then
        If MsgBox("Column header (column: " & num2col(iKeyCol) & " don't match in both files.", vbOKCancel) <> vbOK Then
            Exit Sub
        End If
    End If
    iKeyCol = iKeyCol + 1
    If iKeyCol Mod 200 = 0 Then
        Stop
    End If
Loop

'find different cells
rStart1 = rHeader + 1
rStart2 = rStart1
iKeyCol = ws1.Range(keyCol & "1").Column
' go row by row
Do While ws1.Range(num2col(iKeyCol) & rStart1) <> ""
    Call StatusBarUpdate("Processing row: " & rStart1)
    'search the key in file #2
    rStart2 = 2
    Do While ws2.Range(num2col(iKeyCol) & rStart2) <> ""
        If ws1.Range(num2col(iKeyCol) & rStart1) = ws2.Range(num2col(iKeyCol) & rStart2) Then
            Exit Do
        End If
        rStart2 = rStart2 + 1
        If rStart2 Mod 200 = 0 Then
            'Stop
        End If
    Loop
    'found row in file #2
    If ws1.Range(num2col(iKeyCol) & rStart1) = ws2.Range(num2col(iKeyCol) & rStart2) Then
        ' scan the columns
        For c = 1 To icLast
            If (ws1.Range(num2col(c) & rStart1) <> ws2.Range(num2col(c) & rStart2)) Then
              If (ws1.Range(num2col(c) & rStart1).HasFormula = False) Or (ws2.Range(num2col(c) & rStart2).HasFormula = False) Then
                cChange = cChange + 1
                tMsg = "Difference found: (" & ws1.Range(FilterCol & rStart1) & ") '" & ws1.Range(num2col(iKeyCol) & rStart1) & "' " & _
                        "(" & ws1.Range(num2col(c) & rHeader) & ")" & vbCrLf & _
                          "cell#1 '" & num2col(c) & rStart1 & "': " & ws1.Range(num2col(c) & rStart1) & vbCrLf & _
                          "cell#2 '" & num2col(c) & rStart2 & "': " & ws2.Range(num2col(c) & rStart2)
                Call LogEventAdd(tMsg)
                If bNoMsg = False Then
                    ws1.Activate
                    ws1.Range(num2col(c) & rStart1).Select
                    ws2.Activate
                    ws2.Range(num2col(c) & rStart2).Select
                    If MsgBox(tMsg, vbOKCancel) <> vbOK Then
                        Exit Do
                    End If
                End If
                If cChange Mod 10 = 0 Then
                    'Stop
                End If
              End If
            End If
        Next
    Else
        If MsgBox("Haven't found key '" & ws1.Range(num2col(iKeyCol) & rStart1) & "' in file 2", vbOKCancel) <> vbOK Then
            Exit Do
        End If
    End If
    
    
    rStart1 = rStart1 + 1
    
    If rStart1 Mod 100 = 0 Then
        'Stop
    End If
Loop

Call StatusBarUpdate("")

Application.Calculation = xlCalculationAutomatic

End Sub

Attribute VB_Name = "h_Controls"
Option Explicit

Attribute VB_Name = "h_FileSearch"
Option Explicit

Public beSMART_SharePointDirectory As String
Public beSMART_SharePointHTTPSDirectory As String
Public Filter_FileExtensions_Incl As String
Public Filter_PathName_Incl As String
Public Filter_PathName_Excl As String
Public Filter_FileName_Incl As String
Public Filter_FileName_Excl As String

Public FileListImport() As String
Public FileListImportCounter As Integer
Public NetShareName As String
Public SharePointDrive As String

Public Const LocalFile = ":"
Public Const Tab_FileImportList = "File Import List"
'

Private Sub FS_Test()
    Dim MyPath As String
    
    Filter_FileExtensions_Incl = ""
    Filter_PathName_Incl = ""
    Filter_FileName_Incl = ""
    Filter_FileName_Excl = ""
    FileListImportCounter = 0
    ReDim Preserve FileListImport(0)
    MyPath = ActiveWorkbook.path
    MyPath = "https://share-intra.philips.com/sites/STS20130912130001/EMEA_Marketing_Planning/BMC Dialogue Calls 2017"
    MyPath = LoadSetting("ImportSourceDirDefaultHS")
    'MyPath = "\\share-intra.philips.com\sites\STS20130912130001\EMEA_Marketing_Planning\BMC Dialogue Calls 2017"
    Call SearchFiles(MyPath, True)
    Call SaveAndReloadFileList
    
End Sub

Function SaveAndReloadFileList(Optional ShowMsg As Boolean = True)

Dim wsFL        As Worksheet
Dim FileName    As String
Dim i           As Integer
Dim p           As Integer

On Error Resume Next

Set wsFL = Worksheets(Tab_FileImportList)

If Err Then
    'create the tab
End If

If FileListImportCounter = 0 Then
    'Load the list from the file
    i = 0
    Do While wsFL.Range("A" & i + 1) <> ""
        ReDim Preserve FileListImport(i)
        FileListImport(i) = wsFL.Range("A" & i + 1)
        i = i + 1
    Loop
    FileListImportCounter = i
    
    If i > 0 Then
        FileName = wsFL.Range("A1")
        'find the last "/" or "\" (exactly in that order!!!) in the string
        FileName = Replace(FileName, "\", "/", , , vbTextCompare)
        p = InStrRev(FileName, "/", , vbTextCompare)
        If p = 0 Then
            Err.Clear
            p = InStrRev(FileName, "\", , vbTextCompare)
        End If
        If p > 0 And Err = 0 Then
            ' and extract the file name from the string
            FileName = Right(FileName, Len(FileName) - p)
        End If
        
        If ShowMsg = False Then
            Err.Clear
        ElseIf MsgBox("No files found at the provided location." & vbCrLf & _
                  vbCrLf & _
                  "Do you want to use the import file list used last?" & vbCrLf & _
                  "Recommended when you run the enabler import to update the BG or Market enabler summary file." & vbCrLf & _
                  "# of files: " & FileListImportCounter & vbCrLf & _
                  "E.g. first file:" & vbCrLf & _
                  FileName, vbYesNo, "List of files to import enablers from") <> vbYes Then
            'Clear the above loaded file list import array
            FileListImportCounter = 0
            ReDim Preserve FileListImport(0)
            FileListImport(0) = ""
        Else
            'keep the above loaded File List Import array
        End If
    End If
Else
    'Save the file list
    wsFL.Range("A:A").ClearContents
    Range("FileCache_LastUpdate") = Now()
    For i = 1 To FileListImportCounter
        wsFL.Range("A" & i) = FileListImport(i - 1)
    Next i
End If

'Make the file name an HTTPS string allowing to open the file without opening a network drive first
For i = 0 To FileListImportCounter - 1
    'only when this is not a drive oriented filename
    If InStr(1, FileListImport(i), ":", vbTextCompare) <> 2 Then
        FileListImport(i) = Replace(FileListImport(i), "\", "/", , , vbTextCompare)
        If InStr(1, FileListImport(i), "//", vbTextCompare) = 1 Then
            FileListImport(i) = Replace(FileListImport(i), "//", "https://", , , vbTextCompare)
        End If
        FileListImport(i) = Replace(FileListImport(i), "@ssl/DavWWWRoot", "", , , vbTextCompare)
    Else
        Err.Clear
    End If
Next i

End Function

'http://www.exceltrick.com/formulas_macros/filesystemobject-in-vba/

'Accessing FileSystemObject: Creating a reference of Microsoft Scripting Runtime Library:

'To create a reference of Microsoft Scripting Runtime Library follow the below steps:
'   First of all open the VBA editor by pressing |fffd|Alt + F11|fffd|.

'Adding-FSO-reference-to-vba:
'   Next, navigate to |fffd|Tools|fffd| > |fffd|Reference|fffd| as shown above.

'Adding-FileSystemObject-reference-to-vba-3:
'   This will open a references window. Here select and check the entry |fffd|Microsoft Scripting Runtime|fffd| and click |fffd|OK|fffd|.
'   Now the reference to Microsoft Scripting Runtime Library has been added.

'Further info on File search on SharePoints
' https://stackoverflow.com/questions/1344910/get-the-content-of-a-sharepoint-folder-with-excel-vba
Function SearchFiles(path As String, ShowErrorMsg As Boolean) As Boolean

    Dim fso As FileSystemObject
    Dim baseFolder As Folder
    Dim pth As String
    
    Call GetFileFilterSettings
    
    pth = CleanFileName(path)
    
    'Only set to True if successfully finished
    SearchFiles = False
                       
    Set fso = New FileSystemObject
                    
    'check if the folder actually exists or not
    Call StatusBarUpdate("Please wait, searching for files at '" & pth & "'")
    
    If ((fso.FolderExists(pth))) Then

        Set baseFolder = fso.GetFolder(pth)
       
        On Error Resume Next
        
        'clear list
        FileListImportCounter = 0
        ReDim Preserve FileListImport(FileListImportCounter)
    
        SearchFiles = FillFileNameArray(baseFolder)
        If ShowErrorMsg And FileListImportCounter = 0 Then
        
        End If
    Else
        If pth = LocalFile Then
            FileListImportCounter = 1
            ReDim Preserve FileListImport(0)
            FileListImport(0) = pth
        End If
    End If
    
    If FileListImportCounter = 0 Then
        'when 'path' is on the SharePoint (identified by HTTPS or WebDav) then the user must logon outside of Excel to the network resource
        ' for this we launch the Explorer which then asks for the users credential
        ' Launching the explorer with the SharePoint path doesn't always force the Explorer to request the credentials.
        ' therefore we skip this approach right now.
        
GoTo SearchFiles_1
        
        If (InStr(1, UCase(path), "HTTP", vbTextCompare) > 0 Or InStr(1, UCase(path), "DAVWWW", vbTextCompare) > 0) Then
            Call MsgBox("No files found on the given SharePoint location." & vbCrLf & _
                        path & vbCrLf & _
                        "This may be due to your user account has not yet been valided against this location. " & _
                        "Please open the Internet Explorer with that SharePoint location. " & _
                        "When Windows asks you to login, please enter your CODE1 credentials. " & _
                        vbCrLf & _
                        "After that run the data import again. Thanks.")
            Call OpenExplorerPath(path)
        End If

SearchFiles_1:

    Else
        'sort the file list
        Call QuickSort(FileListImport(), LBound(FileListImport()), UBound(FileListImport()))
    End If

    Call ClearStatusBar 'Update("")
    
End Function


' in case the macro doesn't run due to missing "Folder" reference, see comment at the top of this module.

Function FillFileNameArray(baseFolder As Folder) As Boolean

'retrieves all file from a given source location and fills their names into a global array.

    Dim folder_ As Folder
    Dim file_ As File
    Dim Exclude As Boolean
    Dim ThisFile As String
    Dim InclPathNameArray() As String
    Dim ExclPathNameArray() As String
    Dim InclFileNameArray() As String
    Dim MInclFileNameArray() As String
    Dim ExclFileNameArray() As String
    Dim l As Long
    
    On Error Resume Next
    
    ' filter strings are separated by ';'
    InclPathNameArray() = Split(Filter_PathName_Incl, ";")
    ExclPathNameArray() = Split(Filter_PathName_Excl, ";")
    InclFileNameArray() = Split(Filter_FileName_Incl, ";")
    'MInclFileNameArray() = Split(Filter_FileName_Incl, "#")
    ExclFileNameArray() = Split(Filter_FileName_Excl, ";")
           
    FillFileNameArray = False
    
    'first check if the path contains an exclude filter string ...
    Exclude = False
    Err.Clear
    For l = LBound(ExclPathNameArray) To UBound(ExclPathNameArray)
        If Trim(ExclPathNameArray(l)) <> "" Then
            If InStr(1, baseFolder.Name, ExclPathNameArray(l), vbTextCompare) = 1 Then
                'that path needs to be excluded. Terminate the function
                Exclude = True
                Exit For
            End If
        End If
    Next l
    If Exclude = True Then
        Exit Function
    End If
    
    ' note: the Path inclusion check can only be done on file level
    ' if a check is done right here, then usually all path' with be excluded
    
    For Each folder_ In baseFolder.SubFolders
        'call recursive function.
        Call StatusBarUpdate("Please wait, searching for files at '" & baseFolder.path & "'. Total files found: " & FileListImportCounter)
        DoEvents
        Call FillFileNameArray(folder_)
        FillFileNameArray = True
    Next folder_
    
    DoEvents

    Exclude = False
    'first check if the path contains the filter string if any given ...
    For l = LBound(InclPathNameArray) To UBound(InclPathNameArray)
            If Trim(InclPathNameArray(l)) <> "" Then
                If InStr(1, baseFolder, InclPathNameArray(l), vbTextCompare) = 0 Then
                    Exclude = True
                Else
                    ' at least one entry in the array is found in the file name.
                    ' so include that file
                    Exclude = False
                    Exit For
                End If
            End If
    Next l
    If Exclude = True Then
        Exit Function
    End If
    
    'Extend the file array according to the number of new files.
    'ReDim Preserve FileListImport(baseFolder.Files.Count + FileListImportCounter)
    
    ThisFile = CleanFileName(ThisWorkbook.Name)
    ThisFile = ThisWorkbook.Name
        
    For Each file_ In baseFolder.Files
        ' check if this is an excel file
        Exclude = False
        
        'first check if the path contains the filter string if any given ...
        For l = LBound(InclPathNameArray) To UBound(InclPathNameArray)
            
            If Trim(InclPathNameArray(l)) <> "" Then
                If InStr(1, file_.path, InclPathNameArray(l), vbTextCompare) = 0 Then
                    Exclude = True
                Else
                    ' at least one entry in the array is found in the file name.
                    ' so include that file
                    Exclude = False
                    Exit For
                End If
            End If
        Next l
        
        'Only when the path indicates to include the file perform further checks
        If Exclude = False Then
            'first check on what to include ...
            For l = LBound(InclFileNameArray) To UBound(InclFileNameArray)
                
                If Trim(InclFileNameArray(l)) <> "" Then
                    If InStr(1, file_.Name, InclFileNameArray(l), vbTextCompare) = 0 Then
                        Exclude = True
                    Else
                        ' at least one entry in the array is found in the file name.
                        ' so include that file
                        Exclude = False
                        Exit For
                    End If
                End If
            Next l
            
            
            ' overwrite with what to exclude
            For l = LBound(ExclFileNameArray) To UBound(ExclFileNameArray)
                If Trim(ExclFileNameArray(l)) <> "" Then
                    If InStr(1, file_.Name, ExclFileNameArray(l), vbTextCompare) > 0 Then
                        ' at least one entry in the array is found in the file name.
                        ' so exclude that file
                        Exclude = True
                        Exit For
                    End If
                End If
            Next l
            If InStr(1, file_.Name, "~", vbTextCompare) = 1 Then
                ' at least one entry in the array is found in the file name.
                ' so exclude that file
                Exclude = True
            End If
            
            ' exclude the file if the extension filter doesn't match
            If Filter_FileExtensions_Incl <> "" Then
                If InStr(1, UCase(file_.Name), Filter_FileExtensions_Incl, vbTextCompare) = 0 Then
                    Exclude = True
                End If
            End If
            
            'Ignore the file that is running the "SearchFiles" script
            If UCase(file_.Name) = UCase(ThisFile) Then
                Exclude = True
                ' l = file_.ParentFolder
            End If
        End If
        
        If Exclude = False Then
            ReDim Preserve FileListImport(FileListImportCounter)
    
            FileListImport(FileListImportCounter) = file_.path
            
            FileListImportCounter = FileListImportCounter + 1
            
            ' At least one file found - return TRUE
            FillFileNameArray = True
        Else
            Err.Clear
        End If
        
        Call StatusBarUpdate("Please wait, searching for files at '" & baseFolder.path & "'. Total files found: " & FileListImportCounter)
         
    Next file_

End Function

Private Sub TestCode()
Dim WrdArray() As String
Dim l As Long

WrdArray() = Split("", ";")
For l = LBound(WrdArray) To UBound(WrdArray)
    MsgBox WrdArray(l)
Next l

End Sub


Function CleanFileName(Fname As String) As String

'make the file and path name fitting a UNC convention
    
    Dim pth As String

    
    pth = Fname
    
    'attach the ACTIVEWORKBOOK path name to the file name given when there is no absolute addressing used
    '(filename starts with . or the first character is not a / or \ and as well there is no ":" in it.
    If ((Left(pth, 1) = ".") Or (Left(pth, 1) <> "\" And Left(pth, 1) <> "/")) _
        And InStr(1, pth, ":", vbTextCompare) = 0 Then
        pth = ActiveWorkbook.path & "\" & pth
    End If
    
    'This turns a HTTPS directory name into a format that
    'the "network services" being used to search for files understands
    'From:
    '   https://share-intra.philips.com/sites/STS20130912130001/EMEA_Marketing_Planning/BMC Plans 2018
    'To
    '   \\share-intra.philips.com@ssl\DavWWWRoot\sites\STS20130912130001\EMEA_Marketing_Planning\BMC Plans 2018
    
    ' Usually no need to replace '/' by '\', but you never know what changes in the future with Windows services to path names ...
    pth = Replace(pth, "/", "\")
    
    If InStr(1, UCase(pth), "HTTP", vbTextCompare) Then
        pth = Replace(pth, "https:", "")
        pth = Replace(pth, "http:", "")
        pth = Replace(pth, "philips.com\sites", "philips.com@ssl\DavWWWRoot\sites")
    End If
    ' no need to replace '/' by '\'
    'pth = Replace(pth, "/", "\")
    
    CleanFileName = pth
    
End Function

Function GetFileFilterMessage() As String

Dim s As String

If Trim(Filter_FileExtensions_Incl) <> "" Or _
    Trim(Filter_PathName_Incl) <> "" Or _
    Trim(Filter_FileName_Incl) <> "" Or _
    Trim(Filter_FileName_Excl) <> "" Then
     s = "Import file filter settings:" & vbCrLf
    If Trim(Filter_FileExtensions_Incl) <> "" Then
        s = s & "    File Extension: " & Filter_FileExtensions_Incl & vbCrLf
    End If
    
    If Trim(Filter_PathName_Incl) <> "" Then
        s = s & "    Path name: " & Filter_PathName_Incl & vbCrLf
    End If
    
    If Trim(Filter_FileName_Incl) <> "" Then
        s = s & "    File name incl.: " & Filter_FileName_Incl & vbCrLf
    End If
    
    If Trim(Filter_FileName_Excl) <> "" Then
        s = s & "    File name excl.: " & Filter_FileName_Excl & vbCrLf
    End If
    GetFileFilterMessage = s
End If

End Function

Function GetFileFilterSettings()

 'load filter settings
    
    On Error Resume Next
    Filter_FileExtensions_Incl = Range("Filter_FileExtensions_Incl")
    Filter_PathName_Incl = Range("Filter_PathName_Incl")
    Filter_PathName_Excl = Range("Filter_PathName_Excl")
    Filter_FileName_Incl = Range("Filter_FileName_Incl")
    Filter_FileName_Excl = Range("Filter_FileName_Excl")    '& ";~;"    ' "~" => is usually an Excel backup file that we ignore
    On Error GoTo 0
    
End Function

Private Sub Test_MapDrive()

    SharePointDrive = LoadSetting("DriveLetter")
    SharePointDrive = "O:"
    NetShareName = "\\share-intra.philips.com\sites"

    If (Len(SharePointDrive) > 0) Then
        Call MapSharePointDrive(SharePointDrive, NetShareName)
    End If
    
End Sub
Public Function MapSharePointDrive(DriveLetter As String, ShareName As String) As Boolean

    Dim MyDrive As Object
    StatusBarUpdate ("Locating network resource " & ShareName & " ...")
    MapSharePointDrive = True

    '------------------------------------------------------------
    '- map drive
    On Error Resume Next ' DRIVE MAY BE MAPPED ALREADY
    Set MyDrive = CreateObject("WScript.Network")
    'MyDrive.RemoveNetworkDrive SharePointDrive, bForce:=True
    
    MyDrive.RemoveNetworkDrive DriveLetter  ', bForce:=True
    Err.Clear
    
    MyDrive.MapNetworkDrive DriveLetter, ShareName
    
    StatusBarUpdate ("")
    On Error GoTo 0
    
    '--------------------------------------------------------------
    '- error check
    If Err.number <> 0 Then
        ' check on drive already in use.
        'If Err.number <> -2147024811 Then
            MsgBox ("Drive " & DriveLetter & " already mapped or not available. Please check." & vbCrLf & vbCrLf & Err.Description)
        'End If
        MapSharePointDrive = False
    End If

End Function

Function OpenExplorerPath(path As String)

Shell "Explorer.exe " & path, vbMaximizedFocus

End Function

Function GetInvalidFileNameChar() As String
    Dim lstIllegal As Variant
    Dim i As Long
    
    lstIllegal = Array("/", "\", "[", "]", ":", "+", "*", "<", ">", "|", """", "(", ")", "{", "}", "?")
    
    For i = LBound(lstIllegal) To UBound(lstIllegal)
        If GetInvalidFileNameChar <> "" Then
            GetInvalidFileNameChar = GetInvalidFileNameChar & ", "
        End If
        GetInvalidFileNameChar = GetInvalidFileNameChar & lstIllegal(i)
    Next
End Function
Function IsValidFileName(sFileName As String) As Boolean
    Dim lstIllegal As Variant
    Dim i As Long
    Dim result As Boolean
    Dim sUpdatedFileName As String
    sUpdatedFileName = sFileName
 
    lstIllegal = Array("/", "\", "[", "]", ":", "+", "*", "<", ">", "|", """", "(", ")", "{", "}", "?", vbCr, vbLf)
    
    result = True
 
    For i = LBound(lstIllegal) To UBound(lstIllegal)
        If InStr(1, sUpdatedFileName, lstIllegal(i)) > 0 Then
            result = False
            Exit Function
        End If
    Next i
    IsValidFileName = result
End Function

Function CheckFileNameValidity(sFileName As String) As String

'Replace any invalid character that is not allowed for a file name by a "_"

    Dim lstIllegal As Variant
    Dim i As Long
    Dim sUpdatedFileName As String
    sUpdatedFileName = sFileName
 
 
    lstIllegal = Array("/", "\", "[", "]", ":", "*", "?", "<", ">", "|", """", vbCr, vbLf, "|fffd|")
   'lstIllegal = Array("/", "\", "[", "]", ":", "+", "*", "<", ">", "|", """", "(", ")", "{", "}", "?" )
    
    For i = LBound(lstIllegal) To UBound(lstIllegal)
        sUpdatedFileName = Replace(sUpdatedFileName, lstIllegal(i), "_", 1, -1, vbTextCompare)
    Next i
    CheckFileNameValidity = sUpdatedFileName
    
End Function

Function FixFileName(Fname As String) As String
'
' Certain characters are prohibited for filenames on SharePoint and disks.
' replace invalid characters them by "_" or '-' to turn them into valid file names.

Dim MyFName As String

FixFileName = CheckFileNameValidity(Fname)

Exit Function


MyFName = Fname

If (Len(MyFName) > 0) Then
        'MyFName = Replace(MyFName, " ", "_")
        MyFName = Replace(MyFName, ":", "_") '
        MyFName = Replace(MyFName, "[", "_") '
        MyFName = Replace(MyFName, "]", "_") '
        MyFName = Replace(MyFName, "|fffd|", "_") '?
        'MyFName = Replace(MyFName, "&", "-") '?
        MyFName = Replace(MyFName, "/", "_") '
        MyFName = Replace(MyFName, "\", "_") '
        MyFName = Replace(MyFName, vbCr, "_")
        MyFName = Replace(MyFName, vbLf, "_")
End If

FixFileName = MyFName
    
End Function



Attribute VB_Name = "h_FindExternalLinks"
Option Explicit

Function ShowAllLinksInfo()

'works quite ok. Doesn't find all but external links in most constellations
' Formulas, buttons, validations

'Creates a new worksheet with the name "LinksList" at the end of the tabs
'all potential external links are listed in there.
'External links are usually only identified in containing a '['.
'However also formuales contain that character when it references columns in defined tables.

'Author:        JLLatham
'Purpose:       Identify which cells in which worksheets are using Linked Data
'Requirements:  requires a worksheet to be added to the workbook and named LinksList
'Modified From: http://answers.microsoft.com/en-us/office/forum/office_2007-excel/workbook-links-cannot-be-updated/b8242469-ec57-e011-8dfc-68b599b31bf5?page=1&tm=1301177444768

    Dim aLinks           As Variant
    Dim i                As Integer
    Dim ws               As Worksheet
    Dim anyWS            As Worksheet
    Dim anyCell          As Range
    Dim reportWS         As Worksheet
    Dim nextReportRow    As Long
    Dim shtName          As String
    Dim rCell            As Range
    Dim sDvForm          As String
    Dim bWSexists        As Boolean
    Dim sShapes          As Variant 'Shape
    shtName = "LinksList"
 
    'Create the result sheet if one does not already exist
    For Each ws In ActiveWorkbook.Worksheets
        If ws.Name = shtName Then bWSexists = True
    Next ws
    If bWSexists = False Then
        Application.DisplayAlerts = False
        Set ws = ActiveWorkbook.Worksheets.Add(Type:=xlWorksheet)
        ws.Name = shtName
        ws.Select
        ws.Move After:=ActiveWorkbook.Worksheets(ActiveWorkbook.Worksheets.Count)
        Application.DisplayAlerts = True
    End If
 
    'Now start looking of linked data cells
    Set reportWS = ActiveWorkbook.Worksheets(shtName)
    reportWS.Cells.Clear
    reportWS.Range("A1") = "Link Type"
    reportWS.Range("B1") = "Worksheet"
    reportWS.Range("C1") = "Cell"
    reportWS.Range("D1") = "Formula"
    reportWS.Range("E1") = "Other"
 
    aLinks = ActiveWorkbook.LinkSources(xlExcelLinks)
    If Not IsEmpty(aLinks) Then
        'there are links somewhere in the workbook
        For Each anyWS In ActiveWorkbook.Worksheets
            'Set anyWS = ActiveSheet
            If anyWS.Name <> reportWS.Name Then
                nextReportRow = reportWS.Range("A" & Rows.Count).End(xlUp).row + 1
                reportWS.Range("A" & nextReportRow) = "Worksheet"
                reportWS.Range("B" & nextReportRow) = anyWS.Name
                            
                For Each anyCell In anyWS.UsedRange
                    If anyCell.HasFormula Then
                        If InStr(anyCell.Formula, "[") > 0 Then
                            nextReportRow = reportWS.Range("A" & Rows.Count).End(xlUp).row + 1
                            reportWS.Range("A" & nextReportRow) = "Formula"
                            reportWS.Range("B" & nextReportRow) = anyWS.Name
                            reportWS.Range("C" & nextReportRow) = anyCell.Address
                            reportWS.Range("D" & nextReportRow) = "'" & anyCell.Formula
                        End If
                    End If
                    
                    Set rCell = anyCell.Cells
                    On Error Resume Next
                    sDvForm = ""
                    sDvForm = rCell.Validation.Formula1
                    On Error GoTo 0
                     
                    'If Formula1 has a bracket, it|fffd|s a good candidate
                    'for containing an external link
                    
                    If InStr(1, sDvForm, "]") > 0 Then
                        nextReportRow = reportWS.Range("A" & Rows.Count).End(xlUp).row + 1
                        rCell.Select
                        'Debug.Print rCell.Address, rCell.Validation.Formula1
                        reportWS.Range("A" & nextReportRow) = "Validation"
                        reportWS.Range("B" & nextReportRow) = anyWS.Name
                        reportWS.Range("C" & nextReportRow) = anyCell.Address
                        reportWS.Range("D" & nextReportRow) = "'" & rCell.Validation.Formula1
                End If
                Next    ' end anyCell loop
                
                For Each sShapes In anyWS.Shapes
                      
                    If InStr(1, sShapes.Name, "Comment") <= 0 Then
                        nextReportRow = reportWS.Range("A" & Rows.Count).End(xlUp).row + 1
                        'Debug.Print rCell.Address, rCell.Validation.Formula1
                        reportWS.Range("A" & nextReportRow) = "Shapes"
                        reportWS.Range("B" & nextReportRow) = anyWS.Name
                        reportWS.Range("C" & nextReportRow) = sShapes.Name
                        reportWS.Range("D" & nextReportRow) = "'" & sShapes.OnAction
                        reportWS.Range("E" & nextReportRow) = "'" & sShapes.Top
                    End If
           
                Next sShapes
               
            End If
        Next    ' end anyWS loop
    Else
        MsgBox "No links to Excel worksheets detected."
    End If
    'housekeeping
    reportWS.Columns.AutoFit

    Set reportWS = Nothing
    Set ws = Nothing
End Function


Function DeleteNames()

Dim nm          As Name
Dim i           As Integer
Dim Del         As Boolean
Dim shtName     As String
Dim reportWS    As Worksheet
Dim ws          As Worksheet
Dim bWSexists   As Boolean
Dim SearchTerm  As String

shtName = "LinksList"

    'Create the result sheet if one does not already exist
    For Each ws In Application.Worksheets
        If ws.Name = shtName Then bWSexists = True
    Next ws
    If bWSexists = False Then
        Application.DisplayAlerts = False
        Set ws = ActiveWorkbook.Worksheets.Add(Type:=xlWorksheet)
        ws.Name = shtName
        ws.Select
        ws.Move After:=ActiveWorkbook.Worksheets(ActiveWorkbook.Worksheets.Count)
        Application.DisplayAlerts = True
    End If
 
    'Now start looking of linked data cells
    Set reportWS = ActiveWorkbook.Worksheets(shtName)
    reportWS.Cells.Clear
    reportWS.Range("A1") = "Link Type"
    reportWS.Range("B1") = "Worksheet"
    reportWS.Range("C1") = "Cell"
    reportWS.Range("D1") = "Formula"
    reportWS.Range("E1") = "Other"
    Err.Clear
    On Error Resume Next
    If bWSexists = False Then
        reportWS.Columns("A:E").Select
        reportWS.Range("E1").Activate
        Selection.AutoFilter
    End If

    On Error GoTo 0

Application.ScreenUpdating = False

'i = ActiveWorkbook.Names.Count
i = 1
For Each nm In ActiveWorkbook.Names

    StatusBarUpdate ("checking name " & i & " of " & ActiveWorkbook.Names.Count)
    reportWS.Range("A1").Offset(i, 0).Value = "Name"
    reportWS.Range("A1").Offset(i, 1).Value = "'" & nm.RefersTo ' same as 'Nm'
    reportWS.Range("A1").Offset(i, 2).Value = nm.Name
    reportWS.Range("A1").Offset(i, 3).Value = nm
    On Error Resume Next
    reportWS.Range("A1").Offset(i, 4).Value = nm.Category
    On Error GoTo 0
    
    Del = False
    
    SearchTerm = "##########"
    If InStr(1, nm, SearchTerm, vbTextCompare) > 0 Then
        If MsgBox("Do you want to delete Name:" & vbCrLf & nm.Name & vbCrLf & nm, vbYesNo) = vbYes Then
            Del = True
        End If
        
        Err.Clear
    End If
    If Del = False Then
        If InStr(1, nm.Name, SearchTerm, vbTextCompare) > 0 Then
            If MsgBox("Do you want to delete Name:" & vbCrLf & nm.Name & vbCrLf & nm, vbYesNo) = vbYes Then
                Del = True
            End If
            
            Err.Clear
        End If
    End If
    
    If Del = True Then
        nm.Delete
        reportWS.Rows(i + 1).EntireRow.ClearContents
    End If
    
    If (nm.Name = reportWS.Name & "!_FilterDatabase") Then
        reportWS.Rows(i + 1).EntireRow.ClearContents
    End If

    i = i + 1
Next nm

Do While Trim(reportWS.Range("A1").Offset(i, 0).Value) <> ""
    reportWS.Rows(i).EntireRow.ClearContents
    i = i + 1
Loop

Call ClearStatusBar

End Function

Attribute VB_Name = "h_HELP_Functions"
Option Explicit

'Private FileCounter As Integer
'Private activeSht As Worksheet

Const MyPassword1 = "Enablers"      'initial password
Const MyPassword = "Enabler"
Public UserPassword As String
Public ActivityOpenLink, ActivityOpenLinkMsgShown As Boolean

' Calculation Range Option
Public Const CalcRange = 1
Public Const CalcActiveWS = 2
Public Const CalcActiveWB = 3
Public Const CalcAllWB = 4

Function SaveWBIfDesignBook(aWB As Workbook)

'save the workbook if it is the Design master workbook.
'function is used to ensure the latest workbook edition is saved when doing tests
If IsDesignWB(aWB) Then
    aWB.Save
End If

End Function

Function IsDesignWB(aWB As Workbook) As Boolean

'Check if the the provided Workbook is the master Design Workbook.
If InStr(1, aWB.Name, "Design", vbTextCompare) > 0 Then
    IsDesignWB = True
Else
    IsDesignWB = False
End If

End Function

    
    
Function FixColumnLabelOnEnablerWS(sWS As Worksheet, Optional rWS As Worksheet)

'Column header in cell A1 is getting messed up for yet unknown reasons (only seen in the BMC Enabler summary files)
'This function fixes the header label back to the default.
'Called at startup to ensure that has been fixed but as all during data import

Dim NewLabel As String
Const CellToFix = "A1"

On Error Resume Next

Call LogEventAdd("Start: FixColumnLabelOnEnablerWS ... '" & sWS.Name & "'", , "FT1")

Err.Clear
NewLabel = sWS.Range("_E_Enabler_ID")
'if the specified field is not on the worksheet, then this is not the Enabler Summary worksheet
If Err Then
    Call LogEventAdd("Not expected to see this function being called for none 'Enabler Summary' worksheets." & vbCrLf & sWS.Name)
ElseIf Len(Trim(sWS.Range("A1"))) < 3 Then
    If rWS Is Nothing Then
        NewLabel = "Enabler ID"
    Else
        NewLabel = rWS.Range("A1")
    End If
    Call LogEventAdd("Fixed header in cell A1" & vbCrLf & _
                     "(old:'" & sWS.Range("A1") & "' new:" & NewLabel & "') in tab'" & vbCrLf & _
                     sWS.Name & "'" & " in file:" & vbCrLf & _
                     sWS.Parent.Name)
    Err.Clear
    sWS.Range("A1") = NewLabel
    If Err Then
        Call LogEventAdd("Failed to update header." & vbCrLf & Err.Description)
    End If
End If

Call LogEventAdd("End: FixColumnLabelOnEnablerWS ... '" & sWS.Name & "'", , "FT1")

End Function
    
Function AddString(StrTarget As String, Str2Add As String) As String

'concatanate two strings and put a vbCRLf inbetween.
If Trim(StrTarget) <> "" Then
    AddString = StrTarget & vbCrLf
End If

AddString = AddString & Str2Add

End Function

Public Function IsPasswordSet() As Boolean
    If UserPassword = MyPassword Then
        IsPasswordSet = True
    Else
        IsPasswordSet = False
    End If
End Function

Function T_RefreshProtectionAllSheets()
    Call RefreshProtectionAllSheets(ThisWorkbook)
End Function

Function RefreshProtectionAllSheets(wb As Workbook, Optional FullProtection As Boolean = True) As Variant
'un-protect and protect each worksheet to ensure the right protection settings are applied
' e.g. the Group expansion function [+] and [-] doesn't work by default. Must be explicitly set.
' the protection is only important for visible worksheets

Dim ws As Worksheet
Dim wsCurrent As Worksheet
Dim Prot As Boolean

On Error Resume Next

Call LogEventAdd("Open: RefreshProtectionAllSheets ... " & wb.Name, , "FO1")

Set wsCurrent = ActiveSheet

Application.ScreenUpdating = False

For Each ws In wb.Sheets
    'only reset the extended "protection" function for visible worksheets'
    'UnProtectWS = ws.ProtectContents
    If ws.Visible = xlSheetVisible Then
        ' if ws.ProtectContents =False then
        'Call LogEventAdd("Start UnProtect '" & ws.Name)
        If FullProtection = True Then
            Prot = UnProtectWS(ws)
            Call ProtectWS(ws, Prot)
        ElseIf ws.ProtectContents = False Then
            Prot = True
            Call ProtectWS(ws, Prot)
        End If
    End If
Next

wsCurrent.Activate
wsCurrent.Select

Application.ScreenUpdating = True

Call LogEventAdd("End: RefreshProtectionAllSheets ... " & wb.Name, , "FO1")

End Function

Private Sub FormatDateColumns()
Dim bSW As Worksheet
Dim i As Integer
Dim MyColumn As String

Set bSW = Worksheets("Summary")
i = 1
Do While (Len(bSW.Range("A1").Cells(1, i)) > 0)
    If (InStr(1, bSW.Range("A1").Cells(1, i), "Date", vbTextCompare) > 0 Or _
        InStr(1, bSW.Range("A1").Cells(1, i), "Deadline", vbTextCompare) > 0) Then
        MyColumn = num2col((i))
        Columns(MyColumn & ":" & MyColumn).Select
        Selection.NumberFormat = "m/d/yyyy"
        With Selection
            .HorizontalAlignment = xlRight
            .VerticalAlignment = xlTop
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If
    i = i + 1
Loop

End Sub


Function UpdatePivotTables(sWS As String)

    Const C_ReportPivot = "Unknown"

    Dim ColumnCounter_ As Integer
    Dim a As Integer
    Dim Name, PivotName, LastColumn As String
    Dim ScreenUpdate As Variant
    
    ActiveWorkbook.Sheets(sWS).Select
    StatusBarUpdate ("Refresh PIVOT tables ...")
    
    ScreenUpdate = Application.ScreenUpdating
    Application.ScreenUpdating = False
    
    ColumnCounter_ = 1
    
    Do While Len(Range(num2col(ColumnCounter_) & "1"))
        
        ColumnCounter_ = ColumnCounter_ + 1
    Loop

    ColumnCounter_ = ColumnCounter_ - 1
    LastColumn = num2col(ColumnCounter_)
    
    a = 1
    Do While a <= ActiveWorkbook.Sheets.Count
        'ActiveWorkSheet = ActiveWorkbook.Sheets(A).Select
        Name = Sheets(a).Name
        
        If Sheets(Name).Visible = True Then
                
            Sheets(Name).Activate
            On Error Resume Next
            
            PivotName = ActiveSheet.PivotTables(1).Name
             
            If Err > 0 Then
                'just for testing purpose
                a = a
            Else
    
                If (PivotName = C_ReportPivot) Then
                    ' For whatever reason first the cache needs to be changed and then the pivot table cache reference..
                    ActiveSheet.PivotTables(C_ReportPivot).ChangePivotCache ActiveWorkbook. _
                        PivotCaches.Create(SourceType:=xlDatabase, SourceData:= _
                        sWS & "!$A:$" & LastColumn, Version:=xlPivotTableVersion14)
                    ActiveSheet.PivotTables(C_ReportPivot).ChangePivotCache ( _
                        Name & "!" & C_ReportPivot)
                End If
                ActiveSheet.PivotTables(PivotName).PivotCache.Refresh
            
            End If
            
            On Error GoTo 0
            
        End If
        
        a = a + 1
            
    Loop
    
    Application.ScreenUpdating = ScreenUpdate

    'ActiveWorkbook.RefreshAll
    
    ActiveWorkbook.Sheets(sWS).Select
    StatusBarUpdate ("Refresh PIVOT completed ...")
    
    
End Function

Private Sub DashboardProtectWS()

    Call ProtectWorksheet(Tab_BMCEnablerList)
    
End Sub
Sub SupportFct_ProtectWorksheet()
Attribute SupportFct_ProtectWorksheet.VB_ProcData.VB_Invoke_Func = "P\n14"

'Unprotects the current worksheet and asks if the workbook should be unprotected as well

'Linked to shortcut ctrl-shift-P

    Dim ws As String
    
    'Protects current worksheet
    ws = ActiveSheet.Name
    
    If (MsgBox("Protect worksheet: '" & ws & "'", vbOKCancel) = vbOK) Then
        Call ProtectWorksheet(ws)
        If Worksheets(ws).ProtectContents <> True Then
            Call MsgBox("Protect worksheet failed.")
        Else
            If IsWorkbookProtected(ActiveWorkbook) = False Then
                If (MsgBox("Worksheet protected." & vbCrLf & vbCrLf & "Do you want to keep the Workbook UN-protected?", vbYesNo) = vbNo) Then
                    Call ProtectWB(ActiveWorkbook)
                End If
            Else
                Call MsgBox("Worksheet protected." & vbCrLf & vbCrLf & "Workbook is as well protected.", vbOK)
            End If
        End If
    End If
    
End Sub

Function ProtectWorksheet(ws As String)

    On Error Resume Next
    Dim ScreenUpdate As Variant
    Dim cWS As Worksheet
    Set cWS = ActiveSheet
    
    'Disabling Screenupdate is required to avoid screen flickering
    ScreenUpdate = Application.ScreenUpdating
    Application.ScreenUpdating = False

    If Len(ws) > 0 Then
        'take that worksheet from the current workbook
        If (ProtectWS(Sheets(ws), True) <> True) Then
            If (ProtectWS(ThisWorkbook.Sheets(ws), True) <> True) Then
                MsgBox ("Failed to protect worksheet '" & ws & "'" & vbCrLf & _
                    "Reason: " & Err.Description)
            End If
        End If
    End If

    cWS.Activate
    Application.ScreenUpdating = ScreenUpdate

    On Error GoTo 0

End Function
Function ProtectWS(ws As Worksheet, Sstatus As Boolean) As Boolean

    Dim OPHeaderAdr As String
    
    'Disabling Screenupdate is required to avoid screen flickering
    Dim ScreenUpdate As Variant
    Dim cWS As Worksheet
    Set cWS = ActiveSheet
    ScreenUpdate = Application.ScreenUpdating
    Application.ScreenUpdating = False

    'ProtectWS = ProtectWSEdit(ws, (Sstatus), "")
    
    'Exit Function
    
    'the below has been replaced by the function call above.
    
    On Error Resume Next

    If (Sstatus = True) Then
        'ws.Select
        
        'check if the ws is a Enabler One Pager sheet -> cell editing must be enabled
        OPHeaderAdr = ws.Range("OP_Header").Address
    
        If Err Then
        ' The following is important for REPORT worksheets!
            ws.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, UserInterFaceOnly:=True _
                , Password:=MyPassword _
                , AllowSorting:=True _
                , AllowFiltering:=True _
                , AllowFormattingColumns:=False _
                , AllowFormattingRows:=True _
                , AllowFormattingCells:=False _
                , AllowUsingPivotTables:=True
                ',  AutoFilterMode:=True
        Else
            ' this is for worksheets where CELL editing (coloring & number formating) is required
            ws.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, UserInterFaceOnly:=True _
                , Password:=MyPassword _
                , AllowSorting:=True _
                , AllowFiltering:=True _
                , AllowFormattingColumns:=False _
                , AllowFormattingRows:=True _
                , AllowFormattingCells:=True _
                , AllowUsingPivotTables:=True
                ',  AutoFilterMode:=True
        End If
        
        ws.EnableSelection = xlNoRestrictions
        ws.EnableOutlining = True
    End If

    ProtectWS = ws.ProtectContents
    cWS.Activate
    Application.ScreenUpdating = ScreenUpdate

End Function
Function ProtectWSEdit(ws As Worksheet, Sstatus As Boolean, Mode As String) As Boolean

    Dim OPHeaderAdr As String
    
    'Disabling Screenupdate is required to avoid screen flickering
    Dim ScreenUpdate As Variant
    ScreenUpdate = Application.ScreenUpdating
    Application.ScreenUpdating = False

    On Error Resume Next

    If (Sstatus = True) Then
        ws.Select
        
        'check if the ws is a Enabler One Pager sheet -> cell editing must be enabled
        
        OPHeaderAdr = ws.Range("OP_Header").Address
    
        If Mode = "E" Or Err = False Then
            ' The following is important for REPORT worksheets!
            ws.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, UserInterFaceOnly:=True _
                , Password:=MyPassword _
                , AllowSorting:=True _
                , AllowFiltering:=True _
                , AllowFormattingColumns:=True _
                , AllowFormattingRows:=True _
                , AllowUsingPivotTables:=True _
                , AllowFormattingCells:=True
                ',  AutoFilterMode:=True
        Else
            ' The following is important for REPORT worksheets!
            ws.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, UserInterFaceOnly:=True _
                , Password:=MyPassword _
                , AllowSorting:=True _
                , AllowFiltering:=True _
                , AllowFormattingColumns:=False _
                , AllowFormattingRows:=True _
                , AllowFormattingCells:=False _
                , AllowUsingPivotTables:=True   ',  AutoFilterMode:=True
        
        End If
        
        ws.EnableSelection = xlNoRestrictions
        ws.EnableOutlining = True
    End If

    ProtectWSEdit = ws.ProtectContents
    Application.ScreenUpdating = ScreenUpdate

End Function
Function ProtectWSFullLock(ws As Worksheet, Sstatus As Boolean) As Boolean

    On Error Resume Next

    'Disabling Screenupdate is required to avoid screen flickering
    Dim ScreenUpdate As Variant
    ScreenUpdate = Application.ScreenUpdating
    Application.ScreenUpdating = False

    If (Sstatus = True) Then
        ws.Select
        
        ' The following is important for REPORT worksheets!
        ws.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, UserInterFaceOnly:=True _
            , Password:=MyPassword _
            , AllowSorting:=False _
            , AllowFiltering:=False _
            , AllowFormattingColumns:=False _
            , AllowFormattingRows:=False _
            , AllowUsingPivotTables:=False   ',  AutoFilterMode:=True

        ws.EnableSelection = xlNoSelection
        ws.EnableOutlining = False
    End If

    ProtectWSFullLock = ws.ProtectContents
    Application.ScreenUpdating = ScreenUpdate

End Function

Sub SupportFct_UnProtectWorksheet()
Attribute SupportFct_UnProtectWorksheet.VB_ProcData.VB_Invoke_Func = "U\n14"
'Unprotects the current worksheet and asks if the workbook should be unprotected as well.
'Linked to shortcut shift-ctrl-u

    Dim ws As String
    Dim pw As String
    'Dim UserPassword as String
    
    'unprotects current worksheet
    ws = ActiveSheet.Name
    
    If UserPassword = "" Then
        pw = InputBox("UN-protect worksheet: '" & ws & "'" & vbCrLf & vbCrLf & "Please enter password:", "UN-Protect workseet", "Enter password")
    Else
        pw = UserPassword
    End If
    
    UserPassword = ""

    If pw = MyPassword Then
        Call UnProtectWorksheet(ws)
        If Worksheets(ws).ProtectContents <> False Then
            Call MsgBox("Unprotect failed. Wrong password?")
        Else
            UserPassword = pw
            If IsWorkbookProtected(ActiveWorkbook) Then
                If (MsgBox("Worksheet unprotected." & vbCrLf & vbCrLf & "Do you want to unprotect the Workbook as well?", vbYesNo) = vbYes) Then
                    Call UnProtectWB(ActiveWorkbook)
                End If
            Else
                Call MsgBox("Worksheet unprotected.")
            End If
        End If
    Else
        Call MsgBox("Unprotect failed. Wrong password?")
    End If

End Sub

Function UnProtectWorksheet(ws As String) As Boolean

    On Error Resume Next
    'Disabling Screenupdate is required to avoid screen flickering
    Dim ScreenUpdate As Variant
    ScreenUpdate = Application.ScreenUpdating
    Application.ScreenUpdating = False

    If Len(ws) > 0 Then
        UnProtectWorksheet = UnProtectWS(Sheets(ws))
    End If
    
    Application.ScreenUpdating = ScreenUpdate

    On Error GoTo 0

End Function
Function UnProtectWS(ws As Worksheet) As Boolean

    On Error Resume Next
    Dim cWS As Worksheet
    Set cWS = ActiveSheet
    
    'Disabling Screenupdate is required to avoid screen flickering
    Dim ScreenUpdate As Variant
    ScreenUpdate = Application.ScreenUpdating
    Application.ScreenUpdating = False

    ' get the current protection status to return it to the calling function
    UnProtectWS = ws.ProtectContents
    
    'ws.Select
    ws.Unprotect Password:=MyPassword
    If Err Then
        ws.Unprotect Password:=MyPassword1
    End If
    
    Err.Clear
    
    cWS.Activate
    Application.ScreenUpdating = ScreenUpdate

    On Error GoTo 0

End Function

Function DeleteWS(ws As Worksheet) As Boolean

Dim Prot As Boolean
Dim wb As Workbook
Dim Found As Boolean

On Error Resume Next

Found = False
'check which WB the ws belongs to ...
For Each wb In Application.Workbooks
    If wb.Name = ws.Parent.Name Then
        Found = True
        Exit For
    End If
Next

If Found = False Then
    DeleteWS = False
    Exit Function
End If

' .. then unprotect that WB and the WS
Prot = UnProtectWB(wb)
Call UnProtectWS(ws)

'Now delete without asking the user again 'Do you want ...'
Application.DisplayAlerts = False
Application.EnableEvents = False
ws.Delete
Application.EnableEvents = True
Application.DisplayAlerts = True

If Prot Then ProtectWB (wb)

End Function

Sub SupportFct_ActivateSettings()
Attribute SupportFct_ActivateSettings.VB_ProcData.VB_Invoke_Func = "B\n14"

'Shortcut: Ctrl-Shift-B

' Active the Settings worksheet

Dim aWB     As Workbook
Dim sWS     As Worksheet
Dim wbProt  As Boolean
Dim pw      As String

On Error Resume Next

Set aWB = ActiveWorkbook
Set sWS = aWB.Sheets(Tab_Settings)
wbProt = False

'If sWS.Visible <> True Then
'If aWB.Sheets(Tab_BMCDashboardTitle).Visible <> True Then
    If UserPassword = "" Then
        pw = InputBox("Please enter password:", "", "Enter password")
    Else
        pw = UserPassword
    End If
    
    UserPassword = ""

    If pw = MyPassword Then
        wbProt = UnProtectWB(aWB)
        If UnProtectWB(aWB) = False Then
                'unprotectWB was successful, keep that password.
            UserPassword = pw
            If sWS.Visible <> True Then
                sWS.Visible = True
                'Unhide es well the FileList and EventLog
                aWB.Sheets(Tab_LogEventList).Visible = True
                aWB.Sheets(Tab_FileImportList).Visible = True
                aWB.Sheets(Tab_LogEventList).Move After:=aWB.Worksheets(Tab_Settings)
                'Don't unhide the Summary event list tab if this is a BMC enabler tracking file
                If sWS.Range("TrackingFileType") <> "BMC" And sWS.Range("TrackingFileType") <> "OP" Then
                    aWB.Sheets(Tab_LogEventListSummary).Visible = True
                    aWB.Sheets(Tab_LogEventListSummary).Move After:=aWB.Worksheets(Tab_LogEventList)
                End If
            Else
                If MsgBox("Do you want to keep the Settings tab unprotected?", vbYesNo) = vbNo Then
                    sWS.Visible = False
                    aWB.Sheets(Tab_LogEventList).Visible = False
                    aWB.Sheets(Tab_LogEventListSummary).Visible = False
                    aWB.Sheets(Tab_FileImportList).Visible = False
                End If
            End If
        End If
    Else
        Call MsgBox("Sorry, can't complete your request.")
    End If
'End If
 
If sWS.Visible = True Then
    sWS.Activate
    sWS.Range("H1").Select
End If
        
If wbProt Then
    Call ProtectWB(aWB)
End If

End Sub

Sub SupportFct_UnlockSettings()
Attribute SupportFct_UnlockSettings.VB_ProcData.VB_Invoke_Func = "B\n14"

    Dim ws As String
    Dim pw As String
    'Dim UserPassword as String
    
    'unprotects current worksheet
    ws = Tab_Settings
    
    If UserPassword = "" Then
        pw = InputBox("UN-protect worksheet: '" & ws & "'" & vbCrLf & vbCrLf & "Please enter password:", "UN-Protect workseet", "Enter password")
    Else
        pw = UserPassword
    End If
    
    UserPassword = ""

    If pw = MyPassword Then
        Call UnProtectWorksheet(ws)
        If Worksheets(ws).ProtectContents <> False Then
            Call MsgBox("Unprotect failed. Wrong password?")
        Else
            UserPassword = pw
            If IsWorkbookProtected(ActiveWorkbook) Then
                If (MsgBox("Worksheet unprotected." & vbCrLf & vbCrLf & "Do you want to unprotect the Workbook as well?", vbYesNo) = vbYes) Then
                    Call UnProtectWB(ActiveWorkbook)
                End If
            Else
                Call MsgBox("Worksheet unprotected.")
            End If
            
            Worksheets(ws).Visible = True
            Worksheets(ws).Activate
            
        End If
    Else
        Call MsgBox("Unprotect failed. Wrong password?")
    End If

End Sub

Function UnProtectWB(wb As Workbook) As Boolean
    On Error Resume Next
    'Disabling Screenupdate is required to avoid screen flickering
    Dim ScreenUpdate As Variant
    ScreenUpdate = Application.ScreenUpdating
    Application.ScreenUpdating = False
    
    UnProtectWB = IsWorkbookProtected(wb)
    wb.Unprotect Password:=MyPassword
    If Err Then
        wb.Unprotect Password:=MyPassword1
    End If
    
    Err.Clear
    Application.ScreenUpdating = ScreenUpdate
    
End Function
    
Function ProtectWB(wb As Workbook) As Boolean
    'Disabling Screenupdate is required to avoid screen flickering
    Dim ScreenUpdate As Variant
    ScreenUpdate = Application.ScreenUpdating
    Application.ScreenUpdating = False
    
    wb.Protect Structure:=True, Windows:=False, Password:=MyPassword
    
    Application.ScreenUpdating = ScreenUpdate

End Function
Function IsWorkbookProtected(wb As Workbook) As Boolean
'PURPOSE: Determine if the ActiveWorkbook is password protected
'SOURCE: www.TheSpreadsheetGuru.com/the-code-vault

With wb
  If .ProtectWindows Or .ProtectStructure Then
    IsWorkbookProtected = True
  Else
    IsWorkbookProtected = False
  End If
End With

End Function

Function ThisWBProtectedVBProject() As Boolean
    Call ProtectedVBProject(ThisWorkbook)
End Function

Function ProtectedVBProject(ByVal wb As Workbook) As Boolean
' returns TRUE if the VB project in the active document is protected
Dim VBC As Integer

    VBC = -1
    On Error Resume Next
    VBC = wb.VBProject.VBComponents.Count
    On Error GoTo 0
    If VBC = -1 Then
        ProtectedVBProject = True
    Else
        ProtectedVBProject = False
    End If
End Function

Sub Test_UnprotectVBProject()
    Call UnprotectVBProject(ActiveWorkbook, "Enabler")
End Sub

Sub UnprotectVBProject(ByRef wb As Workbook, ByVal Password As String)

' only partially tested

  Dim VBProj As Object
  Set VBProj = wb.VBProject
  Application.ScreenUpdating = False
  'Ne peut proc|fffd|der si le projet est non-prot|fffd|g|fffd|.
  If VBProj.Protection <> 1 Then Exit Sub
  Set Application.VBE.ActiveVBProject = VBProj
  'Utilisation de "SendKeys" Pour envoyer le mot de passe.

  SendKeys Password & "~"
  SendKeys "~"
  'MsgBox "Apr|fffd|s Mot de passe"
  Application.VBE.CommandBars(1).FindControl(ID:=2578, recursive:=True).Execute
  'Application.Wait (Now + TimeValue("0:00:1"))

End Sub

'Display all the files in a folder. Searches all the sub folders.

Private Sub SupportFct_DisEnableActivityOpenLink()
    If ActivityOpenLink = True Then
        ActivityOpenLink = False
        ActivityOpenLinkMsgShown = False
    Else
        ActivityOpenLink = True
        ActivityOpenLinkMsgShown = True
        'Call InitVariablesSelective(False)
    End If
  
    
    Call MsgBox("Link to BMC Sheet: " & ActivityOpenLink, vbOK)
        
End Sub
Public Function FindColumnIndexFromString(TSummarySheet As String, ColumnName As String) As Integer
' find the column index which has as headline "ColumnName" and return the column index (1...n)

    Dim SheetName As String
    Dim ColumnCounter_ As Integer
    Dim HeaderRow As Integer
    Dim ThisSheet As String
    
    SheetName = TSummarySheet
    HeaderRow = 1
    
    ' shows 0 if ColumnName not found
    FindColumnIndexFromString = 0
    ThisSheet = ActiveSheet.Name
    
    Sheets(SheetName).Select
    
    ' First row contains the headline
    ColumnCounter_ = 1
    
    'Search for the column that has in row #1 the ColumnName as string
    Do While Len(Range(num2col(ColumnCounter_) & HeaderRow))
        If (Range(num2col(ColumnCounter_) & HeaderRow) = ColumnName) Then
            FindColumnIndexFromString = ColumnCounter_
            'break loop
            Exit Do
        End If
        ColumnCounter_ = ColumnCounter_ + 1
    Loop
    
    Sheets(ThisSheet).Select
    
End Function
Public Function FindColumnIndexFromStringDyn(TSummarySheet As String, ColumnName As String) As Integer
' find the column index which has as headline "ColumnName" and return the column index (1...n)

    Dim SheetName As String
    Dim ColumnCounter_ As Integer
    Dim HeaderRow As Integer
    Dim ThisSheet As String
    
    SheetName = TSummarySheet
    Sheets(SheetName).Select
    HeaderRow = 1
    If (Len(Range("A" & HeaderRow)) = 0) Then
        HeaderRow = 2
        If (Len(Range("A" & HeaderRow)) = 0) Then
            HeaderRow = 3
        End If
    End If
    ' shows 0 if ColumnName not found
    FindColumnIndexFromStringDyn = 0
    ThisSheet = ActiveSheet.Name
    
    
    ' First row contains the headline
    ColumnCounter_ = 1
    
    'Search for the column that has in row #1 the ColumnName as string
    Do While Len(Range(num2col(ColumnCounter_) & HeaderRow))
        If (Range(num2col(ColumnCounter_) & HeaderRow) = ColumnName) Then
            FindColumnIndexFromStringDyn = ColumnCounter_
            'break loop
            Exit Do
        End If
        ColumnCounter_ = ColumnCounter_ + 1
    Loop
    
    Sheets(ThisSheet).Select
    
End Function
Public Function FindColumnString(TSummarySheet As String, ColumnName As String) As String
' find the column index which has as headline "ColumnName" and return the column string as "xy"

    Dim SheetName As String
    Dim ColumnCounter_ As Integer
    Dim HeaderRow As Integer
    Dim ThisSheet As String
    
    SheetName = TSummarySheet
    HeaderRow = 1
    FindColumnString = ""
    ThisSheet = ActiveSheet.Name
    
    Sheets(SheetName).Select
    
    ' First row contains the headline
    ColumnCounter_ = 1
    
    'Search for the column that has in row #1 the ColumnName as string
    Do While Len(Range(num2col(ColumnCounter_) & HeaderRow))
        If (Range(num2col(ColumnCounter_) & HeaderRow) = ColumnName) Then
            FindColumnString = num2col(ColumnCounter_)
            'break loop
            Exit Do
        End If
        ColumnCounter_ = ColumnCounter_ + 1
    Loop
    
    Sheets(ThisSheet).Select
    
End Function
Public Function RowHidden(r As String) As Integer
    
    On Error Resume Next
    Err.Clear
    Dim Rng As String
    Rng = r & ":" & r
    'RowHidden = Range(rng).Height
    
    Err.Clear
End Function
Function MyRowHidden(ref As Range)
    MyRowHidden = Rows(ref.row).Hidden
End Function
Public Function num2col(number As Integer) As String
    
    Dim num As Integer
    
    ' Subtract one to make modulo/divide cleaner. '
    num = number
    
    num = num - 1

    ' Select return value based on invalid/one-char/two-char input. '

    If num < 0 Or num >= 27 * 26 Then
        ' Return special sentinel value if out of range. '

        num2col = "-"
    Else
        ' Single char, just get the letter. '

        If num < 26 Then
            num2col = Chr(num + 65)
        Else
           ' Double char, get letters based on integer divide and modulus. '

           num2col = Chr(num \ 26 + 64) + Chr(num Mod 26 + 65)
        End If
    End If
End Function

Public Function SplitCellReference(Cell As String) As String

'Split a cell reference into Column and Rows and add to each the "$" sign
' Example: AN34 => $AN$34
 
 Dim l As Integer
 Dim row As String
 Dim Column As String
 Dim CurrentC As Variant
 
 l = Len(Cell)
 row = ""
 Column = ""
   
 Do While l > 0
    CurrentC = Mid(Cell, l, 1)
    
    If (CurrentC = 0 Or CurrentC = 1 Or CurrentC = 2 Or CurrentC = 3 Or CurrentC = 4 Or CurrentC = 5 Or CurrentC = 6 Or CurrentC = 7 Or CurrentC = 8 Or CurrentC = 9) Then
        row = CurrentC & row
    Else
        Column = CurrentC & Column
    End If
  
    l = l - 1
 Loop
 
 SplitCellReference = ("$" & Column & "$" & row)
 
End Function

Function StatusBarUpdate(MyMessage As String, Optional LastMsgTime As Date) As Date
    
    Dim StatusUpdate    As Variant
    Dim dt              As Date
    Dim ShowMsg         As Boolean
    
    ShowMsg = False
    
    'If LastMsgTime Is Nothing Then
    If LastMsgTime = 0 Then
        ShowMsg = True
    ElseIf DateDiff("s", LastMsgTime, Now()) > 2 Then
        ShowMsg = True
    End If
    
    ' give the system a chance to respond to other events ....
    DoEvents
    
    If ShowMsg Then
        ' turns off screen updating
        StatusUpdate = Application.ScreenUpdating
        Application.ScreenUpdating = False
        
        ' makes sure that the statusbar is visible
        Application.DisplayStatusBar = True
        On Error Resume Next
        Application.StatusBar = MyMessage
        On Error GoTo 0
        
        Application.ScreenUpdating = StatusUpdate
        StatusBarUpdate = Now()
    Else
        StatusBarUpdate = LastMsgTime
    End If
    
    ' gives control of the statusbar back to the program
    ' Application.StatusBar = False
 End Function

Sub ClearStatusBar()
'Clear Status Bar can also be called with a delay to clean-up the status bar and release it back to EXCEL.
'Using the following function call:
'                                      |Time delay|Function called
'   Application.OnTime Now + TimeSerial(0, 0, 10), "ClearStatusBar"
    
    Application.StatusBar = ""
    Application.StatusBar = False
End Sub

Sub ResetLastCell()
'test only
    Dim x As Long
    Dim y As Long
    x = ActiveSheet.UsedRange.Rows.Count
y = ActiveSheet.UsedRange.Columns.Count
End Sub

Private Sub Test_LastRow()
    
    Dim r As Integer
    
    r = LastRow(ActiveSheet)
    'r = LastRow(Worksheets("Import Enablers"))
End Sub
Public Function LastRow(Sh As Worksheet) As Long
    On Error Resume Next
    Err.Clear
    LastRow = Sh.Cells.Find(What:="*", _
                            After:=Sh.Range("A1"), _
                            LookAt:=xlPart, _
                            LookIn:=xlFormulas, _
                            SearchOrder:=xlByRows, _
                            SearchDirection:=xlPrevious, _
                            MatchCase:=False).row
    
    'LastRow = Sh.UsedRange.Rows.Count
    
    If LastRow = 0 Then
        Err.Clear
    End If
    
    On Error GoTo 0
End Function
Private Sub Test_LastCol()
    Dim r, s As Integer
    r = LastCol(ActiveSheet)
    s = num2col((r))
End Sub
Function LastCol(Sh As Worksheet)
    On Error Resume Next
    LastCol = Sh.Cells.Find(What:="*", _
                            After:=Sh.Range("A1"), _
                            LookAt:=xlPart, _
                            LookIn:=xlFormulas, _
                            SearchOrder:=xlByColumns, _
                            SearchDirection:=xlPrevious, _
                            MatchCase:=False).Column
    If LastCol = 0 Then
        Err.Clear
    End If
    On Error GoTo 0
End Function

Function FindNamedColumn(rWS As Worksheet, ColHeader As String) As String

    Dim l As Long
    
    l = 1
    Do While rWS.Range(num2col((l)) & 1) <> ""
        'test start
        If l = 80 Then
            Err.Clear
        End If
        'test end
        
        If (UCase(rWS.Range(num2col((l)) & 1)) = UCase(ColHeader)) Then
            FindNamedColumn = num2col((l))
            Exit Do
        End If
        l = l + 1
    Loop
    
End Function

Function SetCurrentVersion()

'extracts from the current file name the version number and stores it in a variable on the settings sheet
'the version is only updated when the file has the label "Design" in its name.
'otherwise a user has saved the file under a different name and added his own version label to it.

    Dim n As String
    
    On Error Resume Next
    
    n = ActiveWorkbook.Name
    If IsDesignWB(ActiveWorkbook) Then
        'get the file name without the file type extension (".xlsb")
        n = Left(n, InStrRev(n, ".") - 1)
        'get the name component that is right of the the last space in the file name
        n = Right(n, Len(n) - InStrRev(n, " "))
        'if that part is beginning with a "v" for version ...
        If InStr(1, n, "v", vbTextCompare) = 1 Then
            '... then this is the revision string
            Range("FileVersion") = n
        End If
    End If
    
End Function

Function LoadAndSetSetting(ID As String, NewSetting As String) As Variant

LoadAndSetSetting = LoadSetting(ID)
Call UpdateSetting(ID, NewSetting)

End Function

Function LoadSetting(ID As String) As Variant

    On Error Resume Next
    
    LoadSetting = Range(ID)
    If Err Then LoadSetting = ""
    Err.Clear
    
End Function
Function UpdateSetting(ID As String, NewSetting As String, Optional tWB As Workbook) As Variant
    
    Dim cWB As Workbook

    On Error Resume Next
    Set cWB = ThisWorkbook
    
    If tWB Is Nothing Then
    Else
        tWB.Activate
    End If
    
    Range(ID) = NewSetting
    UpdateSetting = Range(ID)
    
    cWB.Activate
    
End Function


Private Sub Test_Sort()
    Dim SDir As String
    
    SDir = Trim(LoadSetting("ImportSourceDir"))
    SDir = CleanFileName((SDir))
    
    Call SearchFiles((SDir), False)
    
    Call QuickSort(FileListImport(), LBound(FileListImport()), UBound(FileListImport()))
End Sub
Sub BubbleSort(arr)

' BubbleSort works fine for arrays with up to a few hundreds of elements,
' but execution time quickly gets out of hand for larger arrays
' (execution time is proportional to the square of the number of elements in the array).
' For large arrays, use QuickSort, for example.

  Dim strTemp As String
  Dim i As Long
  Dim j As Long
  Dim lngMin As Long
  Dim lngMax As Long
  lngMin = LBound(arr)
  lngMax = UBound(arr)
  For i = lngMin To lngMax - 1
    For j = i + 1 To lngMax
      If arr(i) > arr(j) Then
        strTemp = arr(i)
        arr(i) = arr(j)
        arr(j) = strTemp
      End If
    Next j
  Next i
End Sub

Sub QuickSort(arr, Lo As Long, Hi As Long)

' Use like this:
'   Call QuickSort(MyArray, LBound(MyArray), UBound(MyArray))

  Dim varPivot As Variant
  Dim varTmp As Variant
  Dim tmpLow As Long
  Dim tmpHi As Long
  tmpLow = Lo
  tmpHi = Hi
  varPivot = arr((Lo + Hi) \ 2)
  Do While tmpLow <= tmpHi
    Do While arr(tmpLow) < varPivot And tmpLow < Hi
      tmpLow = tmpLow + 1
    Loop
    Do While varPivot < arr(tmpHi) And tmpHi > Lo
      tmpHi = tmpHi - 1
    Loop
    If tmpLow <= tmpHi Then
      varTmp = arr(tmpLow)
      arr(tmpLow) = arr(tmpHi)
      arr(tmpHi) = varTmp
      tmpLow = tmpLow + 1
      tmpHi = tmpHi - 1
    End If
  Loop
  If Lo < tmpHi Then QuickSort arr, Lo, tmpHi
  If tmpLow < Hi Then QuickSort arr, tmpLow, Hi
End Sub

Function IsBMCFile(ShowMsg As Boolean, Optional wb As Workbook) As Boolean

' to find out if the active workbook is a BMC file, check for the existance of certain variable.
'Dim ws As Worksheet
'Set ws = ActiveWorkbook
Dim v As String

On Error Resume Next

IsBMCFile = False
    
v = Range("FileVersion")

If Err = 0 Then IsBMCFile = True

'if requested show standard message to the user
If ShowMsg And IsBMCFile = False Then
    Call MsgBox("Sorry function not available for this active workbook." & vbCrLf & _
                "    (" & ActiveWorkbook.Name & ")" & vbCrLf & _
                vbCrLf & _
                "You may want to select another workbook that you have open." & _
                " (# of open workbooks: " & Application.Workbooks.Count & ")")
                
End If
    
End Function

'TempAddOn - complete module
Function SupportFct_SetDefaultView()

Call ResetColumnLevels(ActiveWorkbook.Worksheets(Tab_BMCEnablerList))

End Function

Function ResetWSView(ws As Worksheet)

Call LogEventAdd("Start: ResetWSView ... '" & ws.Name & "'", , "FT1")

Call ShowAllDataOnWs(ws)
Call ResetColumnLevels(ws)

Call LogEventAdd("End: ResetWSView ... '" & ws.Name & "'", , "FT1")

End Function

Function ResetColumnLevels(ws As Worksheet)
'xxSetDefaultView
Dim test                As String
Dim ExpandRanges        As String
Dim ExpandRangesArray() As String
Dim l                   As Integer
    
On Error Resume Next
'Set ws = ActiveWorkbook.Worksheets(wsName)

ExpandRanges = LoadSetting("SummaryTabExpandRanges")
If ExpandRanges = "" Then
    'use default if none is given
    ExpandRanges = "_E_Q4Actual;_E_KPIBMCYear"
End If

ExpandRangesArray() = Split(ExpandRanges, ";")
    

If UBound(ExpandRangesArray) >= 0 Then
    'Collapse all columns => show only first level
    ws.Outline.ShowLevels RowLevels:=0, ColumnLevels:=1
Else
    'expand all if not a single expand range is given => show levels = 2
    ws.Outline.ShowLevels RowLevels:=0, ColumnLevels:=2
End If

For l = LBound(ExpandRangesArray) To UBound(ExpandRangesArray)
    Err.Clear
    ExpandRanges = Trim(ExpandRangesArray(l))
    If ExpandRanges <> "" Then
        test = ws.Range(ExpandRanges)
        If Err = 0 Then
            With ws
                With .Range(ExpandRanges).EntireColumn
                    If .ShowDetail = False Then
                        .ShowDetail = True
                    End If
                End With
            End With
        Else
            LogEventAdd ("Failed to expand Column group at column '" & ExpandRanges & "' [" & Err.Description & "]")
        End If
    End If
Next l

End Function

'TempAddOn1 - complete function changed
' clearing the filter of any sorted range is set on the currently active worksheet
'function usually called from a button on the current worksheet
Sub Showalldata_OnCurrentWS()
    Call ResetWSView(ActiveSheet)
End Sub


'TempAddOn1 - complete function changed
Function ShowAllDataOnWs(Optional wsInput As Worksheet)
'
Dim ws      As Worksheet
'

On Error Resume Next
If wsInput Is Nothing Then
    Set ws = ActiveSheet
Else
    Set ws = wsInput
End If

ws.showalldata

End Function

Sub ViewHelp()
Attribute ViewHelp.VB_ProcData.VB_Invoke_Func = "H\n14"

'called by Ctrl-Shift-H

    
    'On Error Resume Next
    
    Err.Clear
    
    If IsBMCFile(True) Then
        'MsgBox ("Market: " & Range("Filter_FileName_Incl") & vbCrLf)
        MsgBox ("Template Version: " & Range("FileVersion") & vbCrLf & _
                "Excel Version Last Saved: " & Range("OfficeVersion") & vbCrLf & _
                "Oldest Excel Version Edit: " & Range("OfficeVersionOOS") & vbCrLf & _
                "Date fix: " & Range("FixNumberFormat") & vbCrLf & _
                "File type: " & Range("TrackingFileType") & vbCrLf & _
                "BG: " & Range("BGLocation") & vbCrLf & _
                "Market: " & Range("Filter_FileName_Incl") & vbCrLf & _
                "Cluster: " & Range("OP_ClusterType") & vbCrLf & _
                "Path filter: " & Range("Filter_PathName_Incl") & vbCrLf & _
                "Log level: " & Range("_S_G_LogLevel") & vbCrLf & _
                "" & vbCrLf & _
                "Ctrl-Shift-O : Show protected cells" & vbCrLf & _
                "Ctrl-Shift-K : Show cells with formula" & vbCrLf & _
                "Must have entered password via one of the other supporting functions making this work.")
    End If
            
End Sub

Function GetListOfBGNames() As String

Dim j As Integer
Dim BGrng As Range

On Error Resume Next

Set BGrng = Range("BG")

For j = 1 To BGrng.Rows.Count
    If GetListOfBGNames <> "" Then GetListOfBGNames = GetListOfBGNames & ", "
    GetListOfBGNames = GetListOfBGNames & BGrng.Cells(j, 1)
Next

End Function

Function GetCustomProperties()

'see https://msdn.microsoft.com/en-us/library/office/ff834990.aspx

Dim rw As Integer
Dim p As Variant

rw = 1

Worksheets("Custom Properties").Activate
For Each p In ActiveWorkbook.CustomDocumentProperties
    Worksheets("Custom Properties").Cells(rw, 1).Value = p.Name
    Worksheets("Custom Properties").Cells(rw, 2).Value = p.Value
    rw = rw + 1
Next
End Function

' below are support function that help to determine what Excel version and OS is in use.
Sub GetInfo()
    MsgBox "You are using a Mac: " & IsMac
    MsgBox "Your Office install is 64 Bit: " & Is64BitOffice
    MsgBox "Your Excel version is: " & Excelversion
End Sub

Function IsMac() As Boolean
#If Mac Then
    IsMac = True
#End If
End Function

Function Is64BitOffice() As Boolean
#If Win64 Then
    Is64BitOffice = True
#End If
End Function

Function Excelversion() As Double
'Win Excel versions are always a whole number (15)
'Mac Excel versions show also the number of the update (15.29)
    Excelversion = Val(Application.Version)
End Function

Function UnprotectWBFull()
Dim ws As Worksheet

Call UnProtectWB(ThisWorkbook)
For Each ws In ThisWorkbook.Worksheets
    Call UnProtectWS(ws)
Next ws

End Function

Function CalcWhatAsk()

Call CalcWhat

End Function

Function CalcWhat(Optional CalcOpt As Integer)

    Dim iAnsure As Integer
    Dim wks As Worksheet
    
    Application.Calculation = xlManual
    
    If CalcOpt < 1 Then
        On Error Resume Next
        iAnsure = InputBox("1 = Calculate A Used Range" _
          & vbCrLf & _
          "2 = Calculate This Worksheet" _
          & vbCrLf & _
          "3 = Calculate This Workbook" _
          & vbCrLf & _
          "4 = Calculate All Workbooks in Memory" _
          & vbCrLf & vbCrLf & _
          "Input Your Selection Number From Above" _
          & vbCrLf & "Then Click OK", _
          "Calculate What?", "Input Number Please", _
          5000, 5000)
    Else
        iAnsure = CalcOpt
    End If

    Select Case iAnsure
        Case 1 'Range Only
            Selection.Calculate
        Case 2 'Worksheet Only
            ActiveSheet.Calculate
        Case 3 'Workbook Only
            For Each wks In ActiveWorkbook.Worksheets
                wks.Calculate
            Next
        Case 4 'All Open Workbooks
            Application.Calculate
            'Calculate:     calculates only new, changed and volatile formulas.
            'CalculateFull: calculates all formulas regardless. As a general rule, this will therefore be slower.
            'CalculateFullRebuild: calculates all formulas and rebuilds the entire calculation dependency tree. This will be the slowest of all.
        Case Else
            Call MsgBox("Invalid input. (" & iAnsure & ")")
    End Select
    
Application.Calculation = xlCalculationAutomatic

End Function



Attribute VB_Name = "h_LogEventList"
Option Explicit

Public Const Tab_LogEventList = "LogList"
Public Const Tab_LogEventListSummary = "LogListSummary"
Public CfgLogLevel As String


Private Sub Test_LogEventAdd()
Dim i As Integer
Application.Calculation = xlCalculationManual

For i = 1 To 2000
    If i Mod 100 = 0 Then
        Err.Clear
    End If
    'ActiveCell = ActiveCell & "0123456789"
    If Len(ActiveCell) <> i * 10 Then
        MsgBox (i)
        Exit For
    End If
Next
    
'Call LogEventAdd("12345678")
End Sub
Private Sub Test_LogEventClear()
Call LogEventClear
End Sub

Function LogEventClear(Optional wbToUse As Workbook, Optional wsLogEventName As String = "")

Dim wsLL    As Worksheet
Dim rLast   As Integer
Dim wb      As Workbook

On Error Resume Next

If Not wbToUse Is Nothing Then
    Set wb = wbToUse
Else
    Set wb = ActiveWorkbook
End If

If wsLogEventName = "" Then
    Set wsLL = wb.Worksheets(Tab_LogEventList)
Else
    Set wsLL = wb.Worksheets(wsLogEventName)
End If

If Err = 0 Then
    If Not wsLL Is Nothing Then
        rLast = LastRow(wsLL)
        If rLast > 1 Then
            wsLL.Range("1:" & rLast).ClearContents
        End If
    End If
End If

End Function
Private Sub test_lea()
Call LogEventAdd("Test", , "FO")
End Sub

Function LogEventIsLevelSet(TraceLevel As String) As Boolean
'Check if a certain TraceLevelFlag is set.

'Load global log level setting
Err.Clear
If CfgLogLevel = "" Then
    CfgLogLevel = Range("_S_G_LogLevel")
    CfgLogLevel = CfgLogLevel & ","
    Err.Clear
End If

If InStr(1, CfgLogLevel, TraceLevel, vbTextCompare) > 0 Then
    LogEventIsLevelSet = True
Else
    LogEventIsLevelSet = False
End If

End Function
Function LogEventAdd(AddEvent As String, Optional tWB As Workbook, Optional TraceLevel As String = "") As Boolean

Dim cWB     As Workbook
Dim aWB     As Workbook
Dim wsFL    As Worksheet
Dim wsLL    As Worksheet
Dim rLast   As Integer
Dim t       As String
Const TXTLEN = 2000
Dim LogEvent    As Boolean
'Static  CfgLogLevel As String

On Error Resume Next

Set cWB = ActiveWorkbook
If tWB Is Nothing Then
    Set aWB = ThisWorkbook
Else
    Set aWB = tWB
End If

'Load global log level setting
Err.Clear
If CfgLogLevel = "" Then
    CfgLogLevel = Range("_S_G_LogLevel")
    CfgLogLevel = CfgLogLevel & ","
    Err.Clear
End If

Set wsLL = aWB.Worksheets(Tab_LogEventList)
If Err Then
    Set wsLL = NewTabAddAndDefault(Tab_LogEventList, aWB.Worksheets(Tab_FileImportList), aWB)
End If

If Not wsLL Is Nothing Then
    rLast = LastRow(wsLL)
    If rLast = 0 Or wsLL.Range("A1") = "" Then
        wsLL.Range("A1") = "Date & Time"
        wsLL.Range("B1") = "Event"
        wsLL.Range("C1") = "Event Type"
        wsLL.Range("D1") = "File Name"
        
        wsLL.Columns("A:A").ColumnWidth = 19
        wsLL.Columns("B:B").ColumnWidth = 45
        wsLL.Columns("C:C").ColumnWidth = 11
        wsLL.Columns("D:D").ColumnWidth = 45
    
        wsLL.Range("A:D").HorizontalAlignment = xlLeft
        'wsLL.Cells.EntireColumn.AutoFit
        'ActiveWindow.FreezePanes = True
        'ActiveWindow.FreezePanes = False
        rLast = rLast + 1
    End If
    rLast = rLast + 1
    
    Err.Clear
    LogEvent = False
    If TraceLevel = "" Then
        LogEvent = True
    ElseIf InStr(1, CfgLogLevel, UCase(TraceLevel) & ",", vbTextCompare) > 0 Then
        If Err = 0 Then
            LogEvent = True
        End If
    End If
    
    If LogEvent Then
        t = AddEvent
        'break the log event message into junkts of 2000 Characters as Excel can hardly display more in a cell.
        Do While Len(t) > 0
            wsLL.Range("A" & rLast) = Now
            wsLL.Range("C" & rLast) = TraceLevel
            If Len(t) > TXTLEN Then
                wsLL.Range("B" & rLast) = Left(t, TXTLEN - 4) & " ..."
                t = Right(t, Len(t) - Len(Left(t, TXTLEN - 4)))
                rLast = rLast + 1
            Else
                wsLL.Range("B" & rLast) = t
                t = ""
            End If
        Loop
    End If
    Err.Clear
End If

LogEventAdd = LogEvent

cWB.Activate

End Function

Function NewTabAddAndDefault(wsName As String, Optional wsRef As Worksheet, Optional tWB As Workbook) As Worksheet

Dim cWB        As Workbook
Dim rWB        As Workbook
Dim wsNew      As Worksheet
Dim wsRefTmp   As Worksheet
Dim ProtStatus As Variant

On Error Resume Next

Err.Clear
If tWB Is Nothing Then
    Set rWB = ThisWorkbook
Else
    Set rWB = tWB
End If

ProtStatus = UnProtectWB(rWB)

Set wsNew = rWB.Sheets.Add
wsNew.Name = wsName

If Err Then
    'wsFL.Delete
    Exit Function
End If
    
'set tab color and visibility to the same as the tab "File Import List"
If Not wsRef Is Nothing Then
    Set wsRefTmp = wsRef
Else
    Set wsRefTmp = Worksheets(Tab_FileImportList)
End If
    
If Not wsRefTmp Is Nothing Then
    With wsNew.Tab
        .ThemeColor = wsRefTmp.Tab.ThemeColor       'xlThemeColorAccent4
        .TintAndShade = wsRefTmp.Tab.TintAndShade   ' 0.599993896298105
    End With
    wsNew.Move After:=wsRefTmp
    wsNew.Visible = wsRefTmp.Visible
End If

If ProtStatus Then
    Call ProtectWB(rWB)
End If

Set NewTabAddAndDefault = wsNew

End Function

Private Sub test_leas()
Call LogEventClear(ThisWorkbook, Tab_LogEventListSummary)
Call LogEventImport(ThisWorkbook)
End Sub

Function LogEventImport(sWB As Workbook, Optional tWB As Workbook)

Dim cWB     As Workbook
Dim aWB     As Workbook
Dim wsFL    As Worksheet
Dim wsLL    As Worksheet
Dim wsLLS   As Worksheet
Dim rLast   As Integer
Dim rLastS  As Integer

On Error Resume Next

Set cWB = ActiveWorkbook
If tWB Is Nothing Then
    Set aWB = ThisWorkbook
Else
    Set aWB = tWB
End If

Set wsLLS = aWB.Worksheets(Tab_LogEventListSummary)
If Err Then
    Set wsLLS = NewTabAddAndDefault(Tab_LogEventListSummary, aWB.Worksheets(Tab_LogEventList), aWB)
End If

If Err = 0 Then Set wsLL = sWB.Worksheets(Tab_LogEventList)

If Not wsLLS Is Nothing And Not wsLL Is Nothing And Err = 0 Then
    rLastS = LastRow(wsLLS)
    
    If rLastS = 0 Or wsLLS.Range("A1") = "" Then
        wsLLS.Range("A1") = "Date & Time"
        wsLLS.Range("B1") = "Event"
        wsLLS.Range("C1") = "Event Type"
        wsLLS.Range("D1") = "File Name"
        
        wsLLS.Columns("A:A").ColumnWidth = 19
        wsLLS.Columns("B:B").ColumnWidth = 45
        wsLLS.Columns("C:C").ColumnWidth = 11
        wsLLS.Columns("D:D").ColumnWidth = 45
    
        wsLLS.Range("A:E").HorizontalAlignment = xlLeft
        rLastS = rLastS + 1
    End If
    rLastS = rLastS + 1
    
    rLast = LastRow(wsLL)
    If rLast > 1 Then
        Err.Clear
        wsLL.Range("D2") = sWB.Name
        wsLL.Range("D2").Copy
        'Selection.Copy
        wsLL.Range("D2:" & "D" & rLast).PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        
        wsLL.Range("A2:" & "D" & rLast).Copy
        'Selection.Copy
        wsLLS.Range("A" & rLastS).PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        If Err Then
            Call LogEventAdd("Failed to import LogEvent from file " & sWB.Name & " - " & wsLL.Name)
        End If
        Application.CutCopyMode = False     'ClearClipboard
    End If
    Err.Clear
    
End If

cWB.Activate

End Function

Attribute VB_Name = "h_NamedCells"
Function FindNamedCell()

Dim NamedCell As String
Dim aWB         As Workbook

Set aWB = ActiveWorkbook

'for each a

End Function
Private Sub test()
For Each nm In ActiveWorkbook.Names
    If nm.RefersToRange.Parent.Name = ActiveSheet.Name Then
        MsgBox nm.Name
    End If
Next nm
End Sub

Sub ShowAndLocateNames()
Attribute ShowAndLocateNames.VB_ProcData.VB_Invoke_Func = "M\n14"

Dim nm
Dim wb As Workbook
Dim ws As Worksheet
Dim SearchName      As String
Dim NamedCellList   As String
Dim Rng             As String
Dim NameCount       As Integer

On Error Resume Next

Set wb = ActiveWorkbook
Set ws = ActiveSheet

SearchName = InputBox("Enter named cell to search." & vbCrLf & "Keep input blank to show all named ranges on the current worksheet.")
For Each nm In wb.Names
    Err.Clear
    p = InStr(1, nm.Name, ws.Name)
    
    If Err = 0 Then
        If InStr(1, nm.Name, ws.Name) Then
            p = InStr(1, nm.Name, "!")
            If p > 0 Then
                
                If InStr(p, UCase(nm.Name), UCase(SearchName)) Then
                    ' Do stuff with the named range.
                    If SearchName <> "" Then
                        Rng = Replace(nm.RefersTo, "=", "")
                        Range(Rng).Select
                        'If (NameCount > 0) Then
                            If MsgBox("Search for named ranges '" & SearchName & "'" & vbCrLf & _
                                      "Named range found '" & nm.Name & "'" & vbCrLf & _
                                      "Referring to '" & nm.RefersTo & "'" & vbCrLf & _
                                      vbCrLf & _
                                      "Do you want to continue search?", vbYesNo) <> vbYes Then
                                Exit For
                            End If
                        'End If
                    End If
                    NamedCellList = NamedCellList & nm.Name & vbCrLf
                    NameCount = NameCount + 1
                End If
            End If
        End If
    
    End If
Next nm
'Stop
NamedCellList = "Found names: " & NameCount & vbCrLf & NamedCellList
MsgBox NamedCellList
End Sub
Attribute VB_Name = "h_OwnerName"
Option Explicit

Public Const Tab_EnablerOwnerList = "EnablerOwner"
Public Const Tab_EnablerOwnerListSummary = "EnablerOwnerSummary"
'Public CfgLogLevel As String

Sub Test_ExtractEnabler2OwnerMap()

Dim wb As Workbook
Dim wbT As Workbook

Set wb = ActiveWorkbook
Set wbT = ThisWorkbook

If MsgBox("Extracting enabler owner name from workbook " & vbCrLf & _
            wb.Name & _
            vbCrLf & _
            "Save User list in workbook " & vbCrLf & _
            wbT.Name, vbOKCancel) = vbOK Then

    Call ExtractEnabler2OwnerMap(wb, wbT)

End If

End Sub

Function ExtractEnabler2OwnerMap(Optional wbToUse As Workbook, Optional wbToStoreUserList)

'extracts enabler owners from the owner field and places this together with the Enabler ID onto a new worksheet called "EnablerOwner"
'that list is then used to auto generate emails to the enabler owners for updates

Dim rLast   As Long
Dim r       As Long
Dim c       As Integer
Dim l       As Integer
Dim a       As Integer
Dim wb      As Workbook
Dim wbT     As Workbook
Dim sWS     As Worksheet
Dim ColOwnerName    As String
Dim ColEnablerID    As String
Dim ColOrgName        As String
Dim ColMarket       As String
Dim OwnerNameArray() As String
Dim OwnerName       As String
Dim fOrg          As Boolean
Dim CalcStatus      As Variant
Dim NewOwnerName    As String

Dim ThisOrg As String
Dim ThisChar As String
Dim LastOrg As String
Dim fOwner As Boolean


If Not wbToUse Is Nothing Then
    Set wb = wbToUse
Else
    Set wb = ActiveWorkbook
End If

Set sWS = wb.Worksheets(Tab_BMCEnablerList)
If Err Then
    Exit Function
End If

If Not wbToStoreUserList Is Nothing Then
    Set wbT = wbToStoreUserList
Else
    Set wbT = ActiveWorkbook
End If


ColOwnerName = num2col(sWS.Range("_E_OwnerName").Column) 'FindNamedColumn(sWS, "_E_Enabler_ID")
ColEnablerID = num2col(sWS.Range("_E_Enabler_ID").Column) 'FindNamedColumn(sWS, "_E_Enabler_ID")
ColMarket = num2col(sWS.Range("_E_Market").Column) 'FindNamedColumn(sWS, "_E_Enabler_ID")
ColOrgName = num2col(sWS.Range("_E_Owner").Column) 'FindNamedColumn(sWS, "_E_Enabler_ID")

If ColOwnerName = "" Or ColEnablerID = "" Or ColMarket = "" Or ColOrgName = "" Then
    Exit Function
End If

'clear any filter setting - in filter mode the below search may not always work
Call ResetWSView(sWS)

CalcStatus = Application.Calculation
Application.Calculation = xlCalculationManual

Call EnablerOwnerClear(wbT)

rLast = LastRow(sWS)

For r = 2 To rLast
    If r Mod 100 = 0 Then
        Call StatusBarUpdate("Extract owner from enabler line #" & r)
    End If
    
    OwnerName = sWS.Range(ColOwnerName & r)
    l = Len(OwnerName)
    NewOwnerName = ""
    ThisOrg = ""
    LastOrg = sWS.Range(ColOrgName & r) 'default is the main org of that enabler
    fOrg = False
    fOwner = False
    
    'ThisOwner = ""
    If InStr(1, OwnerName, "Kagiso", vbTextCompare) Then
        'Stop
    End If
    
    OwnerName = Replace(OwnerName, vbCrLf, ";")
    OwnerName = Replace(OwnerName, vbCr, ";")
    OwnerName = Replace(OwnerName, vbLf, ";")
    OwnerName = Replace(OwnerName, "; ", ";", , , vbTextCompare)
    OwnerName = Replace(OwnerName, " ;", ";", , , vbTextCompare)
    OwnerName = Replace(OwnerName, ";;", ";", , , vbTextCompare)
    OwnerName = Replace(OwnerName, ";;", ";", , , vbTextCompare)
    OwnerName = Replace(OwnerName, ";;", ";", , , vbTextCompare)
    OwnerName = Replace(OwnerName, ";;", ";", , , vbTextCompare)

    For c = 1 To l
        If c = 36 Then
            Err.Clear
        End If
        ThisChar = Mid(OwnerName, c, 1)
        If Len(ThisChar) = 0 Then
            Err.Clear
        ElseIf ThisChar = "(" Then
            fOrg = True
            fOwner = False
            ThisOrg = ThisChar
            'NewOwnerName = NewOwnerName & ";"
        ElseIf ThisChar = ")" Then
            ThisOrg = ThisOrg & ThisChar '& ";"
            If InStr(1, ThisOrg, "?", vbTextCompare) Then
                'NewOwnerName = LastOrg & ";" & ThisOrg
                Err.Clear
            Else
                LastOrg = ThisOrg
            End If
            ThisOrg = ""
            fOrg = False
        ElseIf fOrg = True Then
            ThisOrg = ThisOrg & ThisChar
        Else
            If fOwner = False Then
                Select Case ThisChar
                Case " "
                
                Case ";"
                
                Case Else
                    If NewOwnerName <> "" Then
                        If Right(NewOwnerName, 1) <> ";" Then
                            NewOwnerName = NewOwnerName & ";"
                        End If
                        NewOwnerName = NewOwnerName & LastOrg & ";" & ThisChar
                    Else
                        NewOwnerName = LastOrg & ";" & ThisChar
                    End If
                    fOwner = True
                End Select
            Else
                Select Case ThisChar
                Case ";"
                    NewOwnerName = NewOwnerName & ";"
                    fOwner = False
                Case Else
                    NewOwnerName = NewOwnerName & ThisChar
                End Select
            End If
        End If
    Next c
    If InStr(NewOwnerName, vbCr) Or InStr(NewOwnerName, vbLf) Then
        Err.Clear
    End If
    
    NewOwnerName = Replace(NewOwnerName, "; ", ";", , , vbTextCompare)
    NewOwnerName = Replace(NewOwnerName, " ;", ";", , , vbTextCompare)
    NewOwnerName = Replace(NewOwnerName, ";;", ";", , , vbTextCompare)
    NewOwnerName = Replace(NewOwnerName, ";;", ";", , , vbTextCompare)
    NewOwnerName = Replace(NewOwnerName, ";;", ";", , , vbTextCompare)
    NewOwnerName = Replace(NewOwnerName, ";;", ";", , , vbTextCompare)
    
    If Right(NewOwnerName, 1) = ";" Then
    
    End If
    'OwnerName is now down to single names separate with ";"
    OwnerNameArray() = Split(NewOwnerName, ";")
    
    For a = LBound(OwnerNameArray) To UBound(OwnerNameArray)
        OwnerNameArray(a) = Trim(OwnerNameArray(a))
    Next a
    
    On Error Resume Next
    For a = LBound(OwnerNameArray) To UBound(OwnerNameArray)
        If Trim(OwnerNameArray(a)) <> "" Then
            Call EnablerOwnerAdd(Trim(OwnerNameArray(a + 1)), sWS.Range(ColEnablerID & r), sWS.Range(ColMarket & r), Trim(OwnerNameArray(a)), wbT)
        Else
            'Stop
        End If
        a = a + 1
    Next a
Next r

Dim pt As PivotTable
For Each pt In wb.Worksheets(Tab_EnablerOwnerList).PivotTables
    'Refresh any pivot table on that worksheet
    pt.RefreshTable
Next pt

Call ClearStatusBar

Application.Calculation = CalcStatus

End Function

Private Sub Test_EnablerOwnerAdd()

Dim i As Integer
Dim CalcMode As Variant

CalcMode = Application.Calculation

Application.Calculation = xlCalculationManual

Call EnablerOwnerClear
For i = 1 To 2
    Call EnablerOwnerAdd("Thomas", i & "")
    If i Mod 100 = 0 Then
        Err.Clear
    End If
    'ActiveCell = ActiveCell & "0123456789"
    If Len(ActiveCell) <> i * 10 Then
        MsgBox (i)
        Exit For
    End If
Next
    
'Call EnablerOwnerAdd("12345678")
Application.Calculation = CalcMode
End Sub
Private Sub Test_EnablerOwnerClear()
Call EnablerOwnerClear
End Sub

Function EnablerOwnerClear(Optional wbToUse As Workbook, Optional wsEnablerOwnerName As String = "")

Dim wsLL    As Worksheet
Dim rLast   As Integer
Dim wb      As Workbook
Dim c       As Integer

On Error Resume Next

If Not wbToUse Is Nothing Then
    Set wb = wbToUse
Else
    Set wb = ActiveWorkbook
End If

If wsEnablerOwnerName = "" Then
    Set wsLL = wb.Worksheets(Tab_EnablerOwnerList)
Else
    Set wsLL = wb.Worksheets(wsEnablerOwnerName)
End If

If Err = 0 Then
    If Not wsLL Is Nothing Then
        c = 1
        Do While wsLL.Range("A1").Cells(1, c) <> "" And c < 100 And wsLL.Range("A1").Cells(1, c).HasFormula = False
            c = c + 1
        Loop
        c = c - 1
        wsLL.Range("A:" & num2col(c)).ClearContents
        'rLast = LastRow(wsLL)
        'If crLast > 1 Then
        '    wsLL.Range("1:" & rLast).ClearContents
        'End If
    End If
End If

End Function


Function OBS_EnablerOwnerIsLevelSet(TraceLevel As String) As Boolean
'Check if a certain TraceLevelFlag is set.

Exit Function

'Load global log level setting
Err.Clear
If CfgLogLevel = "" Then
    CfgLogLevel = Range("_S_G_LogLevel")
    CfgLogLevel = CfgLogLevel & ","
    Err.Clear
End If

If InStr(1, CfgLogLevel, TraceLevel, vbTextCompare) > 0 Then
    OBS_EnablerOwnerIsLevelSet = True
Else
    OBS_EnablerOwnerIsLevelSet = False
End If

End Function
Function EnablerOwnerAdd(OwnerName As String, _
                        EnablerID As String, _
                        Optional Market As String, _
                        Optional OwnerOrg As String, _
                        Optional tWB As Workbook, _
                        Optional TraceLevel As String = "") As Boolean

Const TXTLEN = 2000

Dim cWB     As Workbook
Dim aWB     As Workbook
Dim wsFL    As Worksheet
Dim wsLL    As Worksheet
Dim rLast   As Integer
Dim t       As String
Dim s       As Integer
Dim l       As Integer
Dim c       As Integer

Dim EnablerOwner    As Boolean

'Static  CfgLogLevel As String

On Error Resume Next

Set cWB = ActiveWorkbook
If tWB Is Nothing Then
    Set aWB = ThisWorkbook
Else
    Set aWB = tWB
End If

'Load global log level setting
Err.Clear
If CfgLogLevel = "" Then
    CfgLogLevel = Range("_S_G_LogLevel")
    CfgLogLevel = CfgLogLevel & ","
    Err.Clear
End If

Set wsLL = aWB.Worksheets(Tab_EnablerOwnerList)
If Err Then
    Err.Clear
    Set wsLL = NewTabAddAndDefault(Tab_EnablerOwnerList, aWB.Worksheets(Tab_FileImportList), aWB)
End If

If Not wsLL Is Nothing Then
    rLast = 1
    Do While wsLL.Range("A" & rLast) <> "" Or wsLL.Range("B" & rLast) <> ""
        rLast = rLast + 1
    Loop
    
    'rLast = LastRow(wsLL)
    
    If rLast = 0 Or wsLL.Range("A1") = "" Then
    
        wsLL.Range("A1") = "Owner Name"
        wsLL.Range("B1") = "EnablerID"
        wsLL.Range("C1") = "Market"
        wsLL.Range("D1") = "Owning Org."
        wsLL.Range("E1") = "# of words"
        'wsLL.Range("C1") = "Event Type"
        'wsLL.Range("D1") = "File Name"
        
        wsLL.Columns("A:A").ColumnWidth = 45
        wsLL.Columns("B:B").ColumnWidth = 45
        wsLL.Columns("C:C").ColumnWidth = 45
        wsLL.Columns("D:D").ColumnWidth = 20
        wsLL.Columns("E:E").ColumnWidth = 11
        'wsLL.Columns("D:D").ColumnWidth = 45
    
        wsLL.Range("A:E").HorizontalAlignment = xlLeft
        'wsLL.Cells.EntireColumn.AutoFit
        'ActiveWindow.FreezePanes = True
        'ActiveWindow.FreezePanes = False
        rLast = 2
    Else
        'rLast = rLast + 1
    End If
    
    Err.Clear
    EnablerOwner = False
    If TraceLevel = "" Then
        EnablerOwner = True
    ElseIf InStr(1, CfgLogLevel, UCase(TraceLevel) & ",", vbTextCompare) > 0 Then
        If Err = 0 Then
            EnablerOwner = True
        End If
    End If
    
    If EnablerOwner Then
        t = Trim(OwnerName)
        For c = 1 To 3
            t = Replace(t, "  ", " ")
        Next c
        
        'break the log event message into junkts of 2000 Characters as Excel can hardly display more in a cell.
        Do While Len(t) > 0
            'wsLL.Range("A" & rLast) = Now
            'wsLL.Range("C" & rLast) = TraceLevel
            wsLL.Range("B" & rLast) = EnablerID
            wsLL.Range("C" & rLast) = Market
            wsLL.Range("D" & rLast) = OwnerOrg
            l = Len(t)
            s = 0
            If l > 5 Then
                s = 1
                For c = 1 To l
                    If Mid(t, c, 1) = " " Then
                        s = s + 1
                    End If
                Next c
            Else
                'that owner name is too short. keep # of words = 0
                Err.Clear
            End If
            'register # of words found
            
            wsLL.Range("E" & rLast) = s
            
            If Len(t) > TXTLEN Then
                wsLL.Range("t" & rLast) = Left(t, TXTLEN - 4) & " ..."
                t = Right(t, Len(t) - Len(Left(t, TXTLEN - 4)))
                rLast = rLast + 1
            Else
                wsLL.Range("A" & rLast) = t
                t = ""
            End If
        Loop
    End If
    Err.Clear
End If

EnablerOwnerAdd = EnablerOwner

cWB.Activate

End Function

Function OBS_NewTabAddAndDefault(wsName As String, Optional wsRef As Worksheet, Optional tWB As Workbook) As Worksheet

Dim cWB        As Workbook
Dim wsNew      As Worksheet
Dim wsRefTmp   As Worksheet

On Error Resume Next

Err.Clear
If tWB Is Nothing Then
    Set wsNew = ThisWorkbook.Sheets.Add
Else
    Set wsNew = tWB.Sheets.Add
End If

wsNew.Name = wsName

If Err Then
    'wsFL.Delete
    Exit Function
End If
    
'set tab color and visibility to the same as the tab "File Import List"
If Not wsRef Is Nothing Then
    Set wsRefTmp = wsRef
Else
    Set wsRefTmp = Worksheets(Tab_FileImportList)
End If
    
If Not wsRefTmp Is Nothing Then
    With wsNew.Tab
        .ThemeColor = wsRefTmp.Tab.ThemeColor       'xlThemeColorAccent4
        .TintAndShade = wsRefTmp.Tab.TintAndShade   ' 0.599993896298105
    End With
    wsNew.Move After:=wsRefTmp
    wsNew.Visible = wsRefTmp.Visible
End If

Set OBS_NewTabAddAndDefault = wsNew

End Function


Function OBS_EnablerOwnerImport(sWB As Workbook, Optional tWB As Workbook)

Dim cWB     As Workbook
Dim aWB     As Workbook
Dim wsFL    As Worksheet
Dim wsLL    As Worksheet
Dim wsLLS   As Worksheet
Dim rLast   As Integer
Dim rLastS  As Integer

On Error Resume Next

Set cWB = ActiveWorkbook
If tWB Is Nothing Then
    Set aWB = ThisWorkbook
Else
    Set aWB = tWB
End If

Set wsLLS = aWB.Worksheets(Tab_EnablerOwnerListSummary)
If Err Then
    Set wsLLS = NewTabAddAndDefault(Tab_EnablerOwnerListSummary, aWB.Worksheets(Tab_EnablerOwnerList), aWB)
End If

If Err = 0 Then Set wsLL = sWB.Worksheets(Tab_EnablerOwnerList)

If Not wsLLS Is Nothing And Not wsLL Is Nothing And Err = 0 Then
    rLastS = LastRow(wsLLS)
    
    If rLastS = 0 Or wsLLS.Range("A1") = "" Then
        wsLLS.Range("A1") = "Date & Time"
        wsLLS.Range("B1") = "Event"
        wsLLS.Range("C1") = "Event Type"
        wsLLS.Range("D1") = "File Name"
        
        wsLLS.Columns("A:A").ColumnWidth = 19
        wsLLS.Columns("B:B").ColumnWidth = 45
        wsLLS.Columns("C:C").ColumnWidth = 11
        wsLLS.Columns("D:D").ColumnWidth = 45
    
        wsLLS.Range("A:E").HorizontalAlignment = xlLeft
        rLastS = rLastS + 1
    End If
    rLastS = rLastS + 1
    
    rLast = LastRow(wsLL)
    If rLast > 1 Then
        Err.Clear
        wsLL.Range("D2") = sWB.Name
        wsLL.Range("D2").Copy
        'Selection.Copy
        wsLL.Range("D2:" & "D" & rLast).PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        
        wsLL.Range("A2:" & "D" & rLast).Copy
        'Selection.Copy
        wsLLS.Range("A" & rLastS).PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        If Err Then
            Call LogEventAdd("Failed to import EnablerOwner from file " & sWB.Name & " - " & wsLL.Name)
        End If
        Application.CutCopyMode = False     'ClearClipboard
    End If
    Err.Clear
    
End If

cWB.Activate

End Function



Attribute VB_Name = "h_Pivot"
Option Explicit

Function GetPivotFilter(Optional PivotName As String, Optional Fields2Ignore As String) As String
Attribute GetPivotFilter.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro1 Macro
'
Dim ws As Worksheet
Dim pt As PivotTable
Dim ptf As PivotField
Dim n As String
'
On Error Resume Next
Set ws = ActiveSheet

For Each pt In ws.PivotTables
    If PivotName = "" Or UCase(PivotName) = UCase(pt.Name) Then
        For Each ptf In pt.PivotFields
        
            If ptf.AllItemsVisible = False Then
                If (InStr(1, Fields2Ignore, ptf.Name, vbTextCompare) = 0) Then
                    If n <> "" Then n = n & " / "
                    n = n & ptf.Name & ": multiple"
                End If
            End If
        Next ptf
    End If
Next pt
       ' MsgBox " - " & ws.Name & " - " & pt.Name & " : " & n
GetPivotFilter = n
End Function

Function SetSlicerPropertiesWS()
Call SetSlicerProperties
End Function
Function SetSlicerProperties(Optional wsT As Worksheet)
'
' Macro3 Macro
'
Dim wb          As Workbook
Dim ws          As Worksheet
Dim Slc         As Slicer
Dim Shp         As Shape
Dim ShpNext     As Shape
Dim LeftMax     As Long
Dim TopMin      As Long
Dim ShapeName   As String
Dim SlicerOrder() As String
Dim SlcCount    As Integer
Dim i           As Integer
Dim cSlicer     As Integer
Dim ShapeFound  As Boolean

'
On Error Resume Next

If Not wsT Is Nothing Then
    Set ws = wsT
    Set wb = wsT.Parent
Else
    Set ws = ActiveSheet
    Set wb = ActiveWorkbook
End If

SlcCount = 0
For Each Shp In ws.Shapes
    'wb.SlicerCaches("Slicer_BG").Slicers("BG 1").Top = 20.1259842519685
    'ws.Shapes("BG 1").Height = 133.5118110236
    Err.Clear
    If Shp.Type = msoSlicer Then
        'find that slicer
        If LeftMax > Shp.Left Or LeftMax = 0 Then
            LeftMax = Shp.Left
            TopMin = Shp.Top
            ShapeName = Shp.Name
        End If
        SlcCount = SlcCount + 1
    'MsgBox (Shp.Name & " : " & Shp.Type)
    End If
Next

ReDim Preserve SlicerOrder(SlcCount)
For cSlicer = 0 To SlcCount - 1
    ShapeFound = False
    
    For Each Shp In ws.Shapes
        'wb.SlicerCaches("Slicer_BG").Slicers("BG 1").Top = 20.1259842519685
        'ws.Shapes("BG 1").Height = 133.5118110236
        Err.Clear
        If Shp.Type = msoSlicer Then
            ShapeFound = False
            If SlicerOrder(cSlicer) = "" Then
                ShapeFound = False
                For i = 0 To SlcCount - 1
                    If SlicerOrder(i) <> "" Then
                        If Shp.Name = SlicerOrder(i) Then
                            ShapeFound = True
                            Exit For
                        End If
                    End If
                Next i
                
                If ShapeFound = False Then
                    'set the initial entry in the slicer order list
                    SlicerOrder(cSlicer) = Shp.Name
                    Err.Clear
                End If
            Else
                ShapeFound = False
                For i = 0 To SlcCount - 1
                    If SlicerOrder(i) <> "" Then
                        If Shp.Name = SlicerOrder(i) Then
                            ShapeFound = True
                            Exit For
                        End If
                    End If
                Next i
            End If
            If ShapeFound = False Then
                If Shp.Left < ws.Shapes(SlicerOrder(cSlicer)).Left Then
                    SlicerOrder(cSlicer) = Shp.Name
                    Err.Clear
                End If
                'Exit For
            End If
        End If
    Next
    
    If SlicerOrder(cSlicer) = "" Then
        Err.Clear
    End If
Next cSlicer


End Function

Attribute VB_Name = "h_Toogle"
Option Explicit

Private ShowIsFormula, ShowIsProtected As Boolean

Sub ToogleShowError()
 If (Range("ECHECK") = True) Then
    Range("ECHECK") = False
 Else
    Range("ECHECK") = True
 End If
End Sub
Sub ToogleShowFormula()
Attribute ToogleShowFormula.VB_ProcData.VB_Invoke_Func = "K\n14"
On Error Resume Next
If (IsPasswordSet) Then
    If (Range("ShowIsFormula") = True) Then
        Range("ShowIsFormula") = False
    Else
        Range("ShowIsFormula") = True
    End If
End If

End Sub

Sub ToogleShowProtected()
Attribute ToogleShowProtected.VB_ProcData.VB_Invoke_Func = "O\n14"
On Error Resume Next
If (IsPasswordSet) Then
    If (Range("ShowIsProtected") = True) Then
        Range("ShowIsProtected") = False
    Else
        Range("ShowIsProtected") = True
    End If
End If

End Sub
Attribute VB_Name = "o1_OnePagerExportPPT"
Option Explicit

Public Const OnePagerTemplate = "One Pager <BU> EQ + SVC"

Sub ExportInitiative2PPT_0()
    Call ExportInitiative2PPT(0)
End Sub
Sub ExportInitiative2PPT_1()
    Call ExportInitiative2PPT(0)
End Sub
Sub ExportInitiative2PPT_2()
    Call ExportInitiative2PPT(0)
End Sub
Function ExportInitiative2PPT(cINum As Integer)
    MsgBox ("This function is about to come. Please check next time.")
End Function

'=AND(ShowIsProtected;CELL("protect"; INDIRECT(ADDRESS(ROW();COLUMN()))))

'=IF(AND(ISFORMULA(A1); ShowIsFormula=TRUE);TRUE;FALSE)

Attribute VB_Name = "o2_AutoFitRowHeight"
Option Explicit

Dim LastOPSheetName As String
Dim LastOPRow As Integer
Dim OPRowAdjustActive As Boolean
'

Private Sub TestAFR()
    Dim i As Integer
    
    AutoFitRow (Selection.row)
    
    'For i = 93 To 94
    '    AutoFitRow (i)
   ' Next i
   
End Sub
Function OP_AlignRowHeight(ByVal ws As Worksheet, ByVal Target As Range)
'Auto sizes the height of the row given by "TARGET"
'Called each time a cell address changes.

Dim r As Integer

If OPRowAdjustActive = False Then
    
    If (OP_IsOnePagerSheet(ws)) Then
        OPRowAdjustActive = True
        
        r = Target.row
        
        If ws.Name <> LastOPSheetName Then
            LastOPSheetName = ""
        End If
        
        If LastOPSheetName = "" Then
            LastOPSheetName = ws.Name
            LastOPRow = 0
        End If
        
        If LastOPRow = 0 And r <> 0 Then
            Call OP_AutoFitRow(r)
        ElseIf LastOPRow <> r And LastOPRow <> 0 Then
            Call OP_AutoFitRow(LastOPRow)
            
        End If
        
        LastOPRow = r
        OPRowAdjustActive = False
    Else
        LastOPSheetName = ""
        LastOPRow = 0
    End If
Else
    Err.Clear
End If
End Function
Function OP_AutoFitRow(r As Integer)

Dim s, e As Integer
Dim ScnUpdate As Variant
Dim protWB As Boolean

On Error Resume Next

s = Range("OP_InvestDashboard").row
e = Range("OP_FooterHelp").row

ScnUpdate = Application.ScreenUpdating
Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual

'only auto size rows in a certain range.
If r >= s And r < e Then
    protWB = UnProtectWB(ThisWorkbook)
    Call AutoFitRow(r)
    'Call AutoFitRow_New(r)
    If protWB Then Call ProtectWB(ThisWorkbook)
End If
   
Application.Calculation = xlCalculationAutomatic
Application.ScreenUpdating = ScnUpdate
   
End Function
        
        
Sub OP_Button_AutoFitRowHeight_ALL()
    Call OP_AutoFitRowHeight_ALL(ActiveSheet, True)
End Sub
Function OP_AutoFitRowHeight_ALL(ws As Worksheet, ShowMsg As Boolean)

Dim adr As String
Dim s, e, i As Integer
Dim ScnUpdate As Variant
Dim protWB, ProtWS, RunAutosize As Boolean

On Error Resume Next

ScnUpdate = Application.ScreenUpdating
Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual

If ws Is Nothing Then
    Set ws = ActiveSheet
End If
If OP_IsOnePagerSheet(ws) Then
    RunAutosize = True
    If ShowMsg = True Then
        If MsgBox("This will adjust the height of all rows related to initiatives and enablers to an optimum size." & vbCrLf & _
            "This takes a few seconds. Please be patient." & vbCrLf & vbCrLf & _
            "Do you want to continue?", vbYesNo) <> vbYes Then
        'Fix each row height that belongs to a certain area
        'Investment Dashboard
            RunAutosize = False
        End If
    End If
    
    If RunAutosize = True Then
        protWB = UnProtectWB(ThisWorkbook)
        ProtWS = UnProtectWS(ws)
        
        'all 5+1 Initiatives
        
        s = ws.Range("OP_InvestDashboard").row
        's = ws.Range("OP_ExportOtherAspirations").row
        e = ws.Range("OP_FooterHelp").row
        For i = s To e
            
            If ws.Rows(i).Hidden Then
                Err.Clear
            Else
                Call StatusBarUpdate("Re-adjust row size " & i & " of " & e)
                Call AutoFitRow(i)
            End If
        Next i
        Err.Clear
        
        Call ProtectWS(ws, (ProtWS))
        
        If protWB Then ProtectWB (ThisWorkbook)
        
        If ShowMsg Then MsgBox ("Done.")
        
    End If
End If

Call ClearStatusBar

Application.Calculation = xlCalculationAutomatic
Application.ScreenUpdating = True

End Function

Attribute VB_Name = "o3_OnePagerControls"
Option Explicit

Public GroupLevel As Integer
Public Const Separator = "-"

Public Const OPFormat_PH = 2
Public Const OPFormat_HS = 1
Public Const OPFormat_None = 0

Sub OP_Control()
    MsgBox ("Function not yet available")
End Sub

Sub OP_Button_CreateNewOP()

Call OP_CreateNewOP("")

End Sub

Function OP_CreateDefaultOP() As Worksheet

Dim ws As Worksheet

For Each ws In ActiveWorkbook.Worksheets
    If (UCase(ws.Name) = UCase(GetDefaultOPSheetName("<BU>", "<Market>"))) Then
        'Default Worksheet exists - delete
        Call DeleteWS(ws)
        Exit For
    End If
Next

Set ws = OP_CreateNewOP("<BU>", "<Market")
Call PrepOPTemplateSheet(ws)
ws.Range("OP_BusinessName") = ""

Set OP_CreateDefaultOP = ws

End Function

Function OP_CreateNewOP(BU As String, Optional Market As String) As Worksheet

'create new One Pager worksheet from the One Pager template worksheet and give it a unique name

Dim Extension As String
Dim i As Integer
Dim vBUName, BUName As String
Dim wbProt As Boolean

On Error Resume Next
BUName = BU

If BUName = "" Then
    BUName = Trim(InputBox("Enter BU Name: (acronym like IGT Systems, AMI, HRC, US, EMR, etc.)", "Create new One Pager worksheet", ""))
    If BUName = "" Then
        MsgBox ("Missing BU Name entry. Please try again.")
        Exit Function
    Else
        If IsValidFileName(BUName) = False Then
            MsgBox ("BU Name entry is invalid ('" & BUName & "'). " & vbCrLf & _
                    "Characters not allowed: " & vbCrLf & _
                    "       " & GetInvalidFileNameChar & vbCrLf & vbCrLf & _
                    "Please try again.")
            BUName = ""
            Exit Function
        End If
        'Search in the BUMap if the entered BU name is listed.
        vBUName = Application.WorksheetFunction.VLookup(BUName, Range("BUMap"), Range("BGAllOffset"), False)
        If (vBUName = "") Then
            i = 1
            Do While Range("BUMap").Cells(i, 1) <> ""
                vBUName = vBUName & Range("BUMap").Cells(i, 1) & ", "
                i = i + 1
            Loop
            
            If (MsgBox("The BU name entered '" & BUName & "' is not in the list of preset names." & vbCrLf & _
                        vBUName & vbCrLf & vbCrLf & _
                        "Do you want to continue?", vbYesNo) <> vbYes) Then
                Exit Function
            End If
        End If
    End If
End If

wbProt = UnProtectWB(ThisWorkbook)
'UnProtectWS (ActiveSheet)

Sheets(Tab_OnePagerTemplate).Select
Sheets(Tab_OnePagerTemplate).Copy Before:=Sheets(1)
If (OP_IsOnePagerSheet(Sheets(1)) = OPFormat_None) Then
    MsgBox ("Failed to create new One Pager worksheet.")
    Exit Function
End If

Err.Clear

Sheets(1).Visible = xlSheetVisible
Sheets(1).Activate
Sheets(1).Select

' Market name is not requested when a new sheet is created.
Call CheckAndSetSheetName(ActiveSheet, BUName, "")

Call ProtectWS(ActiveSheet, True)

If wbProt Then
    Call ProtectWB(ThisWorkbook)
End If

Set OP_CreateNewOP = ActiveSheet

End Function

Sub OP_Button_DeleteOP()

Dim Extension As String
Dim i As Integer
Dim wbProt As Boolean

On Error Resume Next

If (OP_IsOnePagerSheet(ActiveSheet) = OPFormat_None) Or UCase(ActiveSheet.Name) = UCase(Tab_OnePagerTemplate) Or OP_GetNumberOfActiveOP(ThisWorkbook) <= 1 Then
    MsgBox ("Current workshheet is not an active 'One Pager' sheet or is protected from being deleted.")
    Exit Sub
End If

If MsgBox("Do you really want to delete this One Pager sheet '" & ActiveSheet.Name & "'?", vbOKCancel) = vbOK Then
    wbProt = UnProtectWB(ThisWorkbook)
    UnProtectWS (ActiveSheet)
    ActiveSheet.Delete
    If wbProt Then
        Call ProtectWB(ThisWorkbook)
    End If
End If

End Sub

Function OP_GetNumberOfActiveOP(wb As Workbook) As Integer

Dim ws As Worksheet
Dim i As Integer

For Each ws In wb.Worksheets
    If OP_IsOnePagerSheet(ws) <> OPFormat_None And ws.Visible = xlSheetVisible Then
        i = i + 1
    End If
Next

OP_GetNumberOfActiveOP = i

End Function

Public Function OP_CheckTabName(Sh As Worksheet)

Dim BUName              As String
Dim sBUName             As String
Dim Market              As String
Dim HS                  As Boolean
Dim b, m                As Integer
Dim ClusterName         As String

On Error Resume Next

BUName = Trim(Sh.Range("OP_BusinessName"))
Market = Trim(Sh.Range("OP_MarketName"))
If Market <> "<Select market>" Then
    Market = Application.WorksheetFunction.VLookup(Market, Range("MarketMap2Short"), 2, False)
Else
    Market = "<Market>"
End If
                          
'set cluster Name from BU
ClusterName = Application.WorksheetFunction.VLookup(BUName, Range("BUMap"), Range("ClusterOffest"), False)
If ClusterName <> "" Then
    Sh.Range("OP_ClusterName") = ClusterName
End If
            
Err.Clear
If OP_IsOnePagerTemplate(Sh) = False Then
    'check if the partial BU name is already in the sh.name
    b = InStr(1, Sh.Name, Trim(Separator), vbTextCompare)
    m = InStr(b + 1, Sh.Name, Trim(Separator), vbTextCompare)
    'The BU name is inbetween the first two "-" separators
    If m > b Then
    sBUName = Trim(Mid(Sh.Name, b + 1, m - b - 1))
    'check if the partial BU name is already in the sh.name
    If (InStr(1, BUName, sBUName, vbTextCompare) = 0) Then
        b = 0
    End If
                    
    'search if that short bu name is in the list of BU Names we are aware of
    'b = 1
    'Do While Range("BUList").Cells(b, 1) <> ""
    '    If InStr(1, Range("BUList").Cells(b, 1), sBUName, vbTextCompare) > 0 Then
    '        Exit Do
    '    End If
                    '    b = b + 1
                    'Loop
                    'If (Range("BUList").Cells(b, 1) = "") Then
                    '    ' short BU name not found
                    '    b = 0
                    'End If
    Else
        b = InStr(1, Sh.Name, Separator & BUName & Separator, vbTextCompare)
    End If
                
    'check if the market is in the Sheet name
    m = InStr(1, Sh.Name, Separator & Market & Separator, vbTextCompare)
    If (b > 0 And m > 0) Then
        'BU & Market Name is in the tab name. All perfect
    Else
        If BUName = "" Then
            BUName = "<BU>"
        End If
                    
        If Market = "" Then
            Market = "<Market>"
        End If
        If (InStr(1, Market, "<", vbTextCompare) > 0) Then
            If (InStr(1, Market, "<Market>", vbTextCompare) > 0) Then
            Else
                Market = "<Market>"
            End If
        End If

        Call CheckAndSetSheetName(Sh, BUName, Market)
    End If
End If

End Function

Function CheckAndSetSheetName(ws As Worksheet, BUName As String, Optional Market As String) As Boolean

Dim i As Integer
Dim ProtWS, protWB As Boolean
Dim ShName As String
Dim Extension As String

On Error Resume Next

CheckAndSetSheetName = False

protWB = UnProtectWB(ActiveWorkbook)
ProtWS = UnProtectWS(ws)

' we try up to 15 times to set the default worksheet name on the tab
For i = 1 To 15
        Err.Clear
        ShName = GetDefaultOPSheetName(BUName, Market, Extension)
        ws.Name = ShName
        
        If Err = 0 Then
            ws.Range("OP_BusinessName") = BUName
            'remind user to "select market" if none has been entered yet
            If Trim(ws.Range("OP_MarketName")) = "" Then
                ws.Range("OP_MarketName") = "<Select market>"
            End If
            ws.Range("OP_ClusterName") = Application.WorksheetFunction.VLookup(BUName, Range("BUMap"), Range("ClusterOffest"), False)
            CheckAndSetSheetName = True
            Err.Clear
            Exit For
        End If
        Extension = "#" & i + 1
Next

Call ProtectWS(ws, (ProtWS))
If protWB Then Call ProtectWB(ActiveWorkbook)

End Function

Function GetDefaultOPSheetName(BUName As String, Optional Market As String, Optional Extension As String)

Dim ClusterType As String
Dim m As String
Dim ShName As String
Dim bName As String
Dim ext As String
Dim l, lBU As Integer
Dim Rng As Range

On Error Resume Next
Set Rng = Range("BUMap")
Err.Clear
ClusterType = UCase(Application.WorksheetFunction.VLookup(BUName, Rng, LoadSetting("ClusterOffest"), False))
If Err Then
    ClusterType = Range("OP_ClusterType")
Else
    If ClusterType = "Personal Health" Then
        ClusterType = "PH"
    Else
        ClusterType = "HS"
    End If
End If
Err.Clear
If Market <> "" Then
    m = Separator & Market
ElseIf Market = "" Then
    m = Separator & "<Market>"
ElseIf (InStr(1, Market, "<", vbTextCompare) > 0) Then
    m = Separator & "<Market>"
End If

If ClusterType = "HS" Or ClusterType = "" Then
    ext = Separator & "EQ+SVC" & Extension
Else
    ext = Separator & Extension
End If


ShName = Trim("OnePager" & Separator & BUName & m & ext)
l = Len(ShName)

If l > 31 Then
    lBU = Len(BUName) - (l - 31)
    If lBU < 3 Then lBU = 3
    bName = Trim(Left(BUName, lBU))
    
    ShName = Trim("OnePager" & Separator & bName & m & ext)
End If

ShName = Trim(ShName)
l = Len(ShName)
If l > 31 Then
    lBU = Len(ext) - (l - 31 - 1)
    ext = Trim(Separator) & Trim(Right(ext, lBU))
    ShName = Trim("OnePager" & Separator & bName & m & ext)
End If

'limit worksheet name to 31 characters.
GetDefaultOPSheetName = Left(Trim(ShName), 31)

End Function

Public Function OP_IsActiveOnePager(sWS As Worksheet, IsVisible As Boolean) As Integer

On Error Resume Next
Err.Clear

OP_IsActiveOnePager = False
If sWS.Visible = IsVisible And OP_IsOnePagerTemplate(sWS) = False Then
    OP_IsActiveOnePager = OP_IsOnePagerSheet(sWS)
End If

End Function

Public Function OP_IsActiveOnePagerHS(sWS As Worksheet, IsVisible As Boolean) As Boolean

On Error Resume Next
Err.Clear

OP_IsActiveOnePagerHS = False
If sWS.Visible = IsVisible And OP_IsOnePagerTemplate(sWS) = False Then
    OP_IsActiveOnePagerHS = OP_HS_IsOnePagerSheet(sWS)
End If

End Function
Public Function OP_IsActiveOnePagerPH(sWS As Worksheet, IsVisible As Boolean) As Boolean

On Error Resume Next
Err.Clear

OP_IsActiveOnePagerPH = False
If sWS.Visible = IsVisible And OP_IsOnePagerTemplatePH(sWS) = False Then
    OP_IsActiveOnePagerPH = OP_IsOnePagerSheetPH(sWS)
End If

End Function

Function OP_IsOnePagerTemplatePH(ws As Worksheet)

Dim adr As String

On Error Resume Next

Err.Clear

OP_IsOnePagerTemplatePH = False

If OP_IsOnePagerSheetPH(ws) Then
    If UCase(ws.Name) = UCase(Tab_OnePagerTemplate) Then
        OP_IsOnePagerTemplatePH = True
    End If
End If

End Function
Function OP_IsOnePagerSheetPH(ws As Worksheet)

Dim adr     As String
Dim r, c    As Integer

On Error Resume Next

Err.Clear
OP_IsOnePagerSheetPH = False

For r = 1 To 25
    For c = 1 To 10
        Err.Clear
        If InStr(1, ws.Range("A1").Cells(r, c), "BMC Name", vbTextCompare) Then
           
            'name field found, then the next row must show the cluster name
            If InStr(1, ws.Range("A1").Cells(r + 1, c), "Cluster", vbTextCompare) Then
                'name field found, then the next row must show the cluster name
                If Err = 0 Then
                    OP_IsOnePagerSheetPH = True
                    r = 25
                    c = 10
                End If
            End If
        End If
    Next c

Next r

Err.Clear

End Function

Function OP_IsOnePagerSheet(ws As Worksheet) As Integer

On Error Resume Next

If OP_HS_IsOnePagerSheet(ws) Then
    OP_IsOnePagerSheet = OPFormat_HS
ElseIf OP_IsOnePagerSheetPH(ws) Then
    OP_IsOnePagerSheet = OPFormat_PH
Else
    OP_IsOnePagerSheet = OPFormat_None
End If

Err.Clear

End Function

Function OP_HS_IsOnePagerSheet(ws As Worksheet) As Boolean

Dim adr As String

On Error Resume Next

Err.Clear

adr = ws.Range("OP_Header").Address

If Err Then
    OP_HS_IsOnePagerSheet = False
Else
    OP_HS_IsOnePagerSheet = True
End If

Err.Clear

End Function

Function OP_IsOnePagerTemplate(ws As Worksheet) As Boolean

Dim adr As String

On Error Resume Next

Err.Clear

OP_IsOnePagerTemplate = False

If OP_IsOnePagerSheet(ws) <> OPFormat_None Then
    If UCase(ws.Name) = UCase(Tab_OnePagerTemplate) Then
        OP_IsOnePagerTemplate = True
    End If
End If

End Function
Sub OP_Button_OutlineCollapse()
If GroupLevel <> 1 Then
    GroupLevel = 1
Else
    GroupLevel = 2
End If

Call OP_GroupOutlineSet(ActiveSheet, GroupLevel)

End Sub

Function OP_GroupOutlineSet(ws As Worksheet, level As Integer)
'1: Collapse
'2: Expand
Dim Prot As Boolean

Prot = UnProtectWS(ws)

ws.Outline.ShowLevels RowLevels:=level
ws.Outline.ShowLevels ColumnLevels:=level

Call ProtectWS(ws, Prot)

End Function
Sub OP_Button_ClearOnePager()

If MsgBox("This clears all input fields on this One Pager sheet. Do you want to continue?", vbOKCancel) = vbOK Then
    Call OP_ClearOnePager(ActiveSheet)
End If

End Sub
Function OP_ClearOnePager(ws As Worksheet)

Dim lRow, lCol, r, c As Long

On Error Resume Next

Err.Clear

If (OP_IsOnePagerSheet(ws) = OPFormat_HS) Then

    lRow = LastRow(ws)
    lCol = LastCol(ws)
    
    If lRow > 400 Then lRow = 400
    If lCol > 200 Then lCol = 200
    
    Application.ScreenUpdating = False
    For r = 1 To lRow
        StatusBarUpdate ("Clear row " & r & "...")
        For c = 1 To lCol
            If ws.Range("A1").Cells(r, c).Locked Or ws.Range("A1").Cells(r, c).HasFormula Then
            Else
                ws.Range("A1").Cells(r, c) = Null
                '
                Err.Clear
            End If
        Next c
    Next r
    Application.ScreenUpdating = True
End If

Call ClearStatusBar

End Function



Attribute VB_Name = "o4_OP_PrepTemplate"
Option Explicit

Sub OP_PrepTemplateFile()

'------------------------------------------------------------------------------------------------------
'converts the current file into the BMC Template file. clearing all data and setting some defaults.
'------------------------------------------------------------------------------------------------------

Dim ws                  As Worksheet
Dim wbT                 As Workbook
Dim wsNewOP             As Worksheet
Dim ThisFileName        As String
Dim wsSetting           As Worksheet
Dim Action, BMCPath, BMCFile As String
Dim Unknown             As Boolean
Dim Rng                 As Range
Dim Prot                As Boolean

Static ExclFilterDefault   As String

If MsgBox("You are about to switch this file into the One Pager template file with all Enabler data cleared. Do you want to do this?", vbOKCancel) = vbCancel Then
    Exit Sub
End If

Set wbT = ActiveWorkbook
Set wsSetting = wbT.Worksheets(Tab_Settings)
wsSetting.Range("BMCYear") = Year(Now())
Application.Calculate

ThisWorkbook.Save
ThisFileName = ThisWorkbook.path & "\" & ThisWorkbook.Name

BMCFile = LoadSetting("OP_TemplateFileName")
If MsgBox("Do you want to first save the file as the template file '" & BMCFile & "'?", vbOKCancel) = vbOK Then
    On Error Resume Next
    BMCPath = ThisWorkbook.path & "\" & BMCFile
    ThisWorkbook.SaveAs FileName:=BMCPath, CreateBackup:=False  'FileFormat:=ThisWorkbook.FileFormat,
    If Err Then
        MsgBox ("Failed to save file as Template file. " & Err.Description)
        Exit Sub
    End If
    On Error GoTo 0
Else
    Exit Sub
End If

If wbT.Name <> BMCFile Then
    MsgBox ("Failed to save file as Template file. " & Err.Description)
    Exit Sub
End If

If MsgBox("Warning: all Enabler data is being cleared. Do you want to do this?", vbOKCancel) <> vbOK Then
    Exit Sub
End If

Call UnProtectWB(ActiveWorkbook)
    
Set Rng = Range("WorksheetAction")

Call CleanUpAllEnablerSummaryWorksheets(ActiveWorkbook)
Call HideEnablerSummaryColumns(ActiveWorkbook)

' Remove from the finance tab all items that do not belong to this files scope of Market and BG
Call CleanFinanceTab(ActiveWorkbook.Sheets(Tab_Financials), "", "DELETE")

'default filter in all Enabler tracking files that excludes the Market and BG summary files during data reload from the BMC Tracking files
Call SetExcludeFileImportFilterDefault(wsSetting)
'wsSetting.Range("Filter_FileName_Excl") = ExclFilterDefault

wsSetting.Range("FixNumberFormat") = ""
wsSetting.Range("FixNumberFormatCounter") = 0
wsSetting.Range("LastImportEnablerStatus") = ""
wsSetting.Range("LastSaved") = ""

ActiveWorkbook.Worksheets(Tab_FileImportList).Range("A:A").ClearContents

wsSetting.Range("OP_FileType") = "OnePager"
wsSetting.Range("TrackingFileType") = "OP"

On Error Resume Next
'1. prepare the default template workbook first ...
Call PrepOPTemplateSheet(ActiveWorkbook.Worksheets(Tab_OnePagerTemplate))
'2. ... then create the Default One Pager the user is working with
Set wsNewOP = OP_CreateDefaultOP()
'3. set the status of the individual worksheets
Call SetTabDefaultStatus(ActiveWorkbook, wsSetting.Range("TrackingFileType"))

'refresh all pivot tables
Call AllWorksheetPivots

'Clean Dashboard view
Call RefreshDashboardView


ActiveWorkbook.BuiltinDocumentProperties("title") = Range("OP_PropertyTitle")
ActiveWorkbook.BuiltinDocumentProperties("Comments") = Range("FileVersion")

If MsgBox("Do you want to hide the Instruction Tab?", vbYesNo) = vbYes Then
    Set ws = ActiveWorkbook.Worksheets(Tab_Instructions)
    Prot = UnProtectWS((ws))
    ws.Visible = xlSheetHidden
    Call ProtectWS((ws), Prot)
Else
    ActiveWorkbook.Worksheets(Tab_Instructions).Select
    ActiveWorkbook.Worksheets(Tab_Instructions).Activate
End If
Call ProtectWB(ActiveWorkbook)

Prot = ProtectedVBProject(ActiveWorkbook)

ThisWorkbook.Save

Call ClearStatusBar

If Prot Then
    Call MsgBox("File prepared. VBA code is protected as well.")
Else
    Call MsgBox("File prepared. Please lock as well the VBA code manually.")
End If

If (MsgBox("Do you want to open the original file again?" & vbCrLf & vbCrLf & ThisFileName, vbYesNo) = vbYes) Then
    Workbooks.Open FileName:=ThisFileName, UpdateLinks:=False, ReadOnly:=False
    If Err Then
    Else
            'Application.CutCopyMode = False     'ClearClipboard
            'ThisWorkbook.Close
    End If
End If

On Error GoTo 0

End Sub

Function SetExcludeFileImportFilterDefault(wsSetting As Worksheet) As String
'default filter in all Enabler tracking files that excludes the Market and BG summary files during data reload from the BMC Tracking files

Static ExclFilterDefault As String

If ExclFilterDefault = "" Then
    ExclFilterDefault = "__BMC;Editable;Checklist;Snapshot;Template"
    If UCase(wsSetting.Range("Filter_FileName_Excl")) <> UCase(ExclFilterDefault) Then
        ExclFilterDefault = InputBox("The exclusion file filter is not matching the default." & vbCrLf & _
                                            "Current value: " & vbCrLf & _
                                            "    " & wsSetting.Range("Filter_FileName_Excl") & vbCrLf & _
                                            "Overwrite with default?" & vbCrLf & _
                                            "(going forward that default will be kept)", _
                                            "Default setting for BMC file search", _
                                            ExclFilterDefault)
    End If
End If

wsSetting.Range("Filter_FileName_Excl") = ExclFilterDefault

SetExcludeFileImportFilterDefault = ExclFilterDefault

End Function
Private Sub T_PrepOnePagerTemplate()
    Call PrepOPTemplateSheet(ActiveSheet)
End Sub

Function PrepOPTemplateSheet(ws As Worksheet)

' this cleans a single one pager sheet to work and prepares it with default settings.

Dim Prot As Boolean
On Error Resume Next

Err.Clear
Prot = UnProtectWS(ws)

ws.Range("OP_HiddenColumns").EntireColumn.Hidden = True
Err.Clear

Call OP_GroupOutlineSet(ws, 2)      'expand group outline

Call StatusBarUpdate("Clear template sheet...")
Call OP_ClearOnePager(ws)

Call StatusBarUpdate("Re-adjust row height ...")
Call OP_AutoFitRowHeight_ALL(ws, False)
Call FitComments(ws)

Application.Goto reference:=ws.Range("1:1"), Scroll:=True

ws.Range("OP_BusinessName").Select

Call ProtectWS(ws, Prot)

Call ClearStatusBar

End Function
Function T_SetOnePagerDefault()

Call SetOnePagerDefault

End Function
Function SetOnePagerDefault(Optional wb As Workbook)
' sets the One Pager worksheet in the workbook given to its default values
' * Protect
' * Expand Group Outline to level 2

Dim ws As Worksheet
Dim wsCurrent As Worksheet
Dim r As Integer
Dim ScrUpdate As Variant

On Error Resume Next
Set wsCurrent = ActiveSheet

ScrUpdate = Application.ScreenUpdating
Application.ScreenUpdating = False
If wb Is Nothing Then
    Set wb = ActiveWorkbook
End If

For Each ws In wb.Sheets
    If ws.Name = Tab_OnePagerTemplate Then
        Err.Clear
    End If
    
    If OP_IsOnePagerSheet(ws) Then
        Call UnProtectWS(ws)
        ws.Activate
        
        'set zoom level fitting a laptop screen width
        ActiveWindow.Zoom = 65
        
        Call OP_GroupOutlineSet(ws, 2)
                
        ' scroll to Marketname if not given
        If Trim(ws.Range("OP_MarketName")) = "" Then
            ws.Range("OP_MarketName") = "<Select market>"
        End If
        If Trim(ws.Range("OP_MarketName")) = "<Select market>" Then
            Application.Goto reference:=ws.Range("A1"), Scroll:=True
            ws.Range("OP_MarketName").Select
        End If
        
        ' scroll first to BU name if not given
        If Trim(ws.Range("OP_BusinessName")) = "" Then
            ws.Range("OP_BusinessName") = "<BU>"
        End If
        If Trim(ws.Range("OP_BusinessName")) = "<BU>" Then
            Application.Goto reference:=ws.Range("A1"), Scroll:=True
            ws.Range("OP_BusinessName").Select
        End If
        
        ' If both are given, then keep the focus on the last selected cell.
        
        Call ProtectWS(ws, True)
        
    End If
    
    Err.Clear
    
Next ws

If wsCurrent Then
    wsCurrent.Activate
    wsCurrent.Select
End If

Application.ScreenUpdating = ScrUpdate

End Function

' InQuest injected base64 decoded content
' -"jh
' 00Cj
' x)br
' zu)u
' xz%u
' .+-J

INQUEST-PP=macro
