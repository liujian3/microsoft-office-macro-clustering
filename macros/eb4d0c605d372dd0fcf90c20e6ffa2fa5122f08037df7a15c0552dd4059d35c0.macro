Attribute VB_Name = "GlobalFunctions"
Public Const ws2Name = "Wksh 2 - Plan Product Info"
Public Const ws2Source = "PlanTemplate"
Public Const ws1Name = "Wksh 1 - Market Experience"
Public Const mktCell As String = "H4"
Public bChanging As Boolean
Public bSheetValid As Boolean
Public Const ws2InputFields As String = "1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|1|0|0|0|0|0|0|1|1|1|1|1|1|1|1|1|0|1|0|0|1|1|0|0|0|0|0|0|1|1|0|1|1|0|1|1|1|0|1|1|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|1|1|1|0|1|1|0|0|0|1|1|0|0|0|0"
Public Const prodAvgCells As String = "24|25|26|33|34|35|36|37|38|39|40|41|43|46|47|54|55|57|58|60|61|62|64|65|69|70|83|84|86|87|88|90|91|95|96"
Public Const ws1Buttons As String = "Button 17|Button 21|Button 19|Button 20"
Public Const ws2Buttons As String = "Button 30|Button 35|Button 31|Button 32"
Public Const ws3Buttons As String = "Button 1|Button 2|Button 3"
Public Const wsPassword As String = "FF3Macr05"
Public Const ws2MergeCells As String = "12|13|22|23|24|29"
Public Const ws2BlackOuts As String = "66|67|92|93"
Public Const ws2Section2Top As Long = 33
Public Const ws2Section3Top As Long = 54
Public Const ws2Section4Top As Long = 80
Public Const ws2WeightedAvgCell As Long = 29
'initial formula
Public Const FormulaMask1 As String = "=IF(SUMPRODUCT(AA97)=0, 0, INT(10000 * (AA98/AA99-1)) / 10000)"
'replace AA99
Public Const FormulaMask3 = "SUMPRODUCT(<COL1>47:<COL2>47,<COL1>48:<COL2>48,--<CONDITION>)"
'replace AA98
Public Const FormulaMask2 = "SUMPRODUCT(1+<COL1>27:<COL2>27,<COL1>47:<COL2>47,<COL1>48:<COL2>48,--<CONDITION>)"
'makes it so the only plans used in the calculation are those that are renewing and have a metal type of Plantinum, Gold, Silver, Bronze, or Catastrophic
Public Const ConditionMask As String = "(<COL1>17:<COL2>17=""Renewing"")*((<COL1>14:<COL2>14=""Platinum"")+(<COL1>14:<COL2>14=""Gold"")+(<COL1>14:<COL2>14=""Silver"")+(<COL1>14:<COL2>14=""Bronze"")+(<COL1>14:<COL2>14=""Catastrophic""))"
Public Const MaxCols As Long = 32768
Public Const ValidationMask As String = "Enter the Historical Rate Increase for the Calendar year <PERIOD>prior to the effective year as a percentage value greater than or equal to 0 with up to 2 decimal points."
Public Const States As String = "|AL|AK|AZ|AR|CA|CO|CT|DC|DE|FL|GA|HI|ID|IL|IN|IA|KS|KY|LA|ME|MD|MA|MI|MN|MS|MO|MT|NE|NV|NH|NJ|NM|NY|NC|ND|OH|OK|OR|PA|RI|SC|SD|TN|TX|UT|VT|VA|WA|WV|WI|WY|AS|GU|MP|PR|VI|"
Public Const Markets As String = "|Individual|Small Group|Combined|"
Public Const UtilDescriptions As String = "|Admits|Days|Benefit Period|Visits|Services|Prescriptions|Other|"
Public Const ValidUDs As String = "ADVSO|VSO|VSO|VSO|BVSO|PVSO"
Public Const Metals As String = "|Platinum|Gold|Silver|Bronze|Catastrophic|Not Applicable|"
Public Const PlanTypes As String = "|HMO|PPO|Indemnity|EPO|POS|"
Public Const PlanCategory As String = "|New|Renewing|Terminated|"
'cell mapping for validation
Public Const Matrix_ws1_Req_Cells As String = "E3,Company Legal Name|E4,HIOS Issuer ID|H3,State|H4,Market|" & _
    "E12,Experience Period|F14,Premiums (net of MLR Rebate) in Experience Period|F15,Incurred Claims in Experience Period|" & _
    "F16,Allowed Claims|G17,Index Rate of Experience Period|F18,Experience Period Member Months|" & _
    "Q32,Projected Allowed Experience Claims PMPM (w/applied credibility if applicable) - PMPM|" & _
    "V33,Paid to Allowed Average Factor in Projection Period - After Credibility|" & _
    "V35,Projected Risk Adjustments PMPM - After Credibility|" & _
    "V37,Projected ACA reinsurance recoveries, net of rein prem, PMPM - After Credibility|" & _
    "T40,Administrative Expense Load - PMPM|T41,Profit & Risk Load - PMPM|T42,Taxes & Fees - PMPM|" & _
    "V44,Index Rate for Projection Period - After Credibility|X47,Projected Member Months"
Public Const Matrix_ws1_Req_Bene_Cols As String = "F,Actual Experience Allowed - Utilization per 1000|" & _
    "G,Actual Experience Allowed - Average Cost/Service|J,Adj't.  from Experience to Projection Period - Pop'l risk Morbidity|" & _
    "K,Adj't.  from Experience to Projection Period - Other|L,Annualized Trend Factors Cost|M,Annualized Trend Factors Util|" & _
    "R,Credibility Manual Utilization per 1000|S,Credibility Manual Average Cost/Service"
Public Const Matrix_ws2_Req_Cells As String = "12,Section I - Product|13,Section I - Product ID|14,Section I - Metal|" & _
    "15,Section I - AV Metal Value|16,Section I - AV Pricing Value|17,Section I - Plan Category|18,Section I - Plan Type|19,Section I - Plan Name|" & _
    "20,Section I - Plan ID (Standard Component ID)|21,Section I - Exchange Plan|" & _
    "22,Section I - Historical Rate Increase - Calendar Year - 2|23,Section I - Historical Rate Increase - Calendar Year - 1|" & _
    "24,Section I - Historical Rate Increase - Calendar Year 0|25,Section I - Effective Date of Proposed Rates|" & _
    "26,Section I - Rate Change % (over prior filing)|27,Section I - Cum'tive Rate Change %  (over 12 mos prior)|" & _
    "34,Section II - Inpatient|35,Section II - Outpatient|36,Section II - Professional|37,Section II - Prescription Drug|" & _
    "38,Section II - Other|39,Section II - Capitation|40,Section II - Administration|41,Section II - Taxes & Fees|" & _
    "42,Section II - Risk & Profit Charge|44,Section II - Member Cost Share Increase|46,Section II - Average Current Rate PMPM|" & _
    "47,Section II - Average Current Rate PMPM|48,Section II - Projected Member Months|55,Section III - Average Rate PMPM|56,Section III - Member Months|" & _
    "58,Section III - EHB Percent of TP|" & _
    "59,Section III - state mandated benefits portion of TP that are other than EHB|" & _
    "61,Section III - Total Allowed Claims (TAC)|62,Section III - EHB Percent of TAC|" & _
    "63,Section III - state mandated benefits portion of TAC that are other than EHB|" & _
    "65,Section III - Allowed Claims which are not the issuer's obligation|" & _
    "66,Section III - Portion of above payable by HHS's funds on behalf of insured person in dollars|" & _
    "69,Section III - Net Amt of Rein|71,Section III - Net Amt of Risk Adj|81,Section IV - Plan Adjusted Index Rate|84,Section IV - EHB Percent of TP|" & _
    "85,Section IV - state mandated benefits portion of TP that are other than EHB|87,Section IV - Total Allowed Claims (TAC)|" & _
    "88,Section IV - EHB Percent of TAC|" & _
    "89,Section IV - state mandated benefits portion of TAC that are other than EHB|" & _
    "91,Section IV - Allowed Claims which are not the issuer's obligation|" & _
    "92,Section IV - Portion of above payable by HHS's funds on behalf of insured person in dollars|" & _
    "96,Section IV - Net Amt of Rein|97,Section IV - Net Amt of Risk Adj"
' These cells check to verify total prmemium is formatted correctly if present and if associated member months cell is >0 the total premiums is required
' 0 is TP field to check
' 1 is member months field to conditionally check
' 2 is TP field name
' 3 is error msg
Public Const Matrix_ws2_Total_Premium_Member_Months_Conditional_Req_Cells As String = _
    "57,56,(Section III - Total Premium),should be entered if member months are entered.| " & _
    "83,82,(Section IV - Total Premium),should be entered if projected member months are entered."
    
Public Enum dataType
    StringData = 1
    NumericData = 2
    IntegerData = 3
End Enum
Public Enum productType
    individual = 1
    SmallGroup = 2
    Combined = 3
    Unknown = 4
End Enum
Public Enum CellColors
    LightBlue = 1
    Grey = 2
    White = 3
End Enum
Public Type prodDetail
    ws2Start As Long
    ws2End As Long
End Type
Public productDetails() As prodDetail

Public Function getFullAddress(cell As Range) As String

    Dim sFullAddr As String
    sFullAddr = cell.Parent.Name & "!" & cell.Address
    getFullAddress = sFullAddr

End Function

Public Function checkHIOSID(cellValue As String) As String

    Dim bValid As Boolean
    Dim sMsg As String
    
    'Checking HIOSID.
    'Should be 5 digit numeric
    bValid = True
    sMsg = ""
    
    If Not AllDigit(cellValue) Then
        bValid = False
    Else
        If val(cellValue) < 0 Then
            bValid = False
        End If
    End If
    
    If Not bValid Then
        sMsg = "The HIOS ID you entered is not valid.  Enter only a numeric positive value (5 digits)"
    End If
    
    checkHIOSID = sMsg

End Function

Public Function checkProductID(cellValue As String) As String

    Dim bValid As Boolean
    Dim sMsg As String
    
    'checking format of productID
    'should be 5 digit HIOS ID + 2 digit state code + 3 more digits
    sMsg = ""
    bValid = True
    If Len(cellValue) <> 10 Then
        bValid = False
    Else
        If UCase$(Left$(cellValue, 7)) <> UCase$(Left$(GetProductPrefix, 7)) Then
            bValid = False
        Else
            If Not IsNumeric(Mid$(cellValue, 8, 3)) Then
                bValid = False
            End If
        End If
    End If
    
    If Not bValid Then
        sMsg = "Product ID format not correct.  Product ID Must be 5 digit HIOS ID + 2 digit State code + 3 additional digits"
    End If
    checkProductID = sMsg
    
End Function

Public Function checkPlanID(cellValue As String, col As Long) As String

    Dim bValid As Boolean
    Dim sMsg As String
    
    'checking format of PlanID
    'Should be 10 digit ProductID + 4 more digits
    sMsg = ""
    bValid = True
    If Len(Trim$(cellValue)) <> 14 Then
        bValid = False
    Else
        If UCase$(Left$(cellValue, 10)) <> UCase$(Left$(GetProductID(col), 10)) Then
            bValid = False
        Else
            If Not IsNumeric(Mid$(cellValue, 11, 4)) Then
                bValid = False
            End If
        End If
    End If
    
    If Not bValid Then
        sMsg = "Plan ID format not correct.  Plan ID Must be 10 digit product ID + 4 additional digits"
    End If
    checkPlanID = sMsg

End Function

Public Function checkACA()
'no longer used - Small Group will now use these cells
    Dim sh As Worksheet
    Dim rng As Range
    Dim rng2 As Range
    Dim mkt As Range
    
    UnlockWorksheet ws1Name
    Set sh = Worksheets(ws1Name)
    Set rng = sh.Range("V37")
    Set rng2 = sh.Range("X37")
    Set mkt = sh.Range(mktCell)
    If Trim$(UCase$(mkt.value)) = "SMALL GROUP" Then
        rng.value = ""
        ColorCell rng, CellColors.Grey
        rng2.value = ""
        rng2.Formula = ""
        ColorCell rng2, CellColors.Grey
    Else
        ColorCell rng, CellColors.LightBlue
        ColorCell rng2, CellColors.White
        rng2.Formula = "=+$X$47*V37"
    End If
    LockWorksheet ws1Name
    
End Function

Public Function InputPasswordBox(Optional Prompt As String = "Enter value", _
    Optional Default As String = "", Optional Title As String = "Input Password") As String

    Dim ipb As InputPWDBox
    Dim sAnswer As String
    Set ipb = New InputPWDBox
    ipb.Prompt = Prompt
    ipb.Default = Default
    ipb.Title = Title
    ipb.Show
    sAnswer = ipb.value
    InputPasswordBox = sAnswer

End Function

Public Function getInput(EntryType As dataType, Prompt As String, Title As String, Default As String, _
    Optional AllowNull As Boolean = True, Optional AllowNegative As Boolean = True) As String

    Dim sAnswer As String
    Dim ianswer As Integer
    Dim bValid As Boolean
    
    bValid = False
    Do Until bValid
        sAnswer = InputBox(Prompt, Title, Default)
        If sAnswer = "" Then
            If AllowNull Then
                bValid = True
            Else
                bValid = False
            End If
        Else
            Select Case EntryType
                Case dataType.StringData
                    bValid = True
                Case dataType.IntegerData
                    If IsNumeric(sAnswer) Then
                        If InStr(sAnswer, ".") > 0 Then
                            bValid = False
                        Else
                            If Not AllowNegative And InStr(sAnswer, "-") > 0 Then
                                bValid = False
                            Else
                                bValid = True
                            End If
                        End If
                    Else
                        bValid = False
                    End If
                Case dataType.NumericData
                    If IsNumeric(sAnswer) Then
                        If Not AllowNegative And InStr(sAnswer, "-") > 0 Then
                            bValid = False
                        Else
                            bValid = True
                        End If
                    Else
                        bValid = False
                    End If
            End Select
        End If
    Loop
    
    getInput = sAnswer
    
End Function

Public Function GetColAddress(col As Long) As String

    Dim sAddress As String
    Dim sAddressParts() As String
    
    sAddress = Trim$(Replace(Sheets(1).Cells(1, col).Address, "$", " "))

    sAddressParts = Split(sAddress, " ")

    GetColAddress = sAddressParts(0)

End Function

Public Function GetFirstCol(rng As Range) As Integer
    
    Dim sAddress As String
    Dim sAddressParts() As String
    Dim cell As Range
    Dim iRet As Integer
    
    sAddress = rng.Address
    
    If InStr(sAddress, ":") > 0 Then
        
        sAddressParts = Split(sAddress, ":")
        sAddress = sAddressParts(0)
        
    End If

    Set cell = rng.Parent.Cells.Range(sAddress)
    iRet = cell.Column
    
    GetFirstCol = iRet

End Function

Public Function GetLastCol(rng As Range) As Integer
    
    Dim sAddress As String
    Dim sAddressParts() As String
    Dim cell As Range
    Dim iRet As Integer
    
    sAddress = rng.MergeArea.Address
    
    If InStr(sAddress, ":") > 0 Then
        
        sAddressParts = Split(sAddress, ":")
        sAddress = sAddressParts(UBound(sAddressParts))
        
    End If

    Set cell = rng.Parent.Cells.Range(sAddress)
    iRet = cell.Column
    
    GetLastCol = iRet

End Function

Public Function GetCellAddress(row As Long, col As Long) As String

    Dim sReturn As String
    Dim sAddress As String

    sAddress = Sheets(1).Cells(row, col).Address

    sReturn = Replace(sAddress, "$", "")

    GetCellAddress = sReturn

End Function

Public Function ColorCell(CellRange As Range, WhichColor As CellColors)

    Dim ColorValue As Double
    Dim ColorTheme As Variant
    Dim bLocked As Boolean
    
    Select Case WhichColor
        Case CellColors.White
            ColorValue = 0
            ColorTheme = xlThemeColorDark1
            bLocked = True
        Case CellColors.Grey
            ColorValue = 0.349986266670736
            ColorTheme = xlThemeColorLight1
            bLocked = True
        Case CellColors.LightBlue
            ColorValue = 0.599963377788629
            ColorTheme = xlThemeColorAccent1
            bLocked = False
    End Select
    
    With CellRange.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = ColorTheme
        .TintAndShade = ColorValue
        .PatternTintAndShade = 0
    End With
    CellRange.Locked = bLocked
    
End Function

Public Function GetProductID(PlanColumn As Long) As String
    
    Dim sAddr() As String
    Dim sProductID As String
    Dim sh As Worksheet
    
    Set sh = Sheets(ws2Name)
    If sh.Cells(13, PlanColumn).MergeCells Then
        sAddr = Split(sh.Cells(13, PlanColumn).MergeArea.Address, ":")
        sProductID = sh.Cells.Range(Replace(sAddr(0), "$", "")).value
    Else
        sProductID = sh.Cells(13, PlanColumn).value
    End If
    GetProductID = sProductID

End Function

Public Function GetProductPrefix() As String

    Dim ws As Worksheet
    Dim sTemp As String
    Set ws = Sheets(ws1Name)
    sTemp = ws.Cells(4, 5).value & ws.Cells(3, 8).value
    
    GetProductPrefix = sTemp

End Function

Public Function CopyValidation(source As Range, target As Range)
    
    With target.Validation
        .Delete
        .Add Type:=source.Validation.Type, AlertStyle:=source.Validation.AlertStyle, Operator _
            :=source.Validation.Operator, Formula1:=source.Validation.Formula1, Formula2:=source.Validation.Formula2
        .IgnoreBlank = source.Validation.IgnoreBlank
        .InCellDropdown = source.Validation.InCellDropdown
        .InputTitle = source.Validation.InputTitle
        .ErrorTitle = source.Validation.ErrorTitle
        .InputMessage = source.Validation.InputMessage
        .ErrorMessage = source.Validation.ErrorMessage
        .ShowInput = source.Validation.ShowInput
        .ShowError = source.Validation.ShowError
    End With
    
End Function

Public Function AllDigit(val As String) As Boolean

    Dim length As Integer
    Dim bRet As Boolean
    Dim i As Integer
    Dim s As String
    
    length = Len(val)
    bRet = True
    
    For i = 1 To length
    s = Mid(val, i, 1)
        If Not IsNumeric(s) Then
            bRet = False
            Exit For
        End If
    Next i
    
    AllDigit = bRet

End Function

Private Sub ResetStartup()
    
    Dim sh As Worksheet
    Set sh = Sheets("PlanTemplate")
    
    UnlockWorksheet "PlanTemplate"
    sh.Cells(1, 1).value = "REBUILD"
    LockWorksheet "PlanTemplate"

End Sub

Public Function Auto_Open()

    Dim sh As Worksheet
    Set sh = Sheets("PlanTemplate")
    Dim idx As Long
    Dim ianswer As Long
    
    If sh.Cells(1, 1).value = "REBUILD" Then
        PleaseWait.Show
        MsgBox "Template is ready for use.", vbOKOnly, "Setup Complete"
        UnlockWorksheet "PlanTemplate"
        sh.Cells(1, 1).value = ""
        LockWorksheet "PlanTemplate"
    End If

End Function

Public Function NotAvailable()

    MsgBox "This feature is not yet available."
    
End Function

Public Function cVal(cell As Range) As Double

    Dim dRet As Double
    Dim sHighPart As String
    Dim sLowPart As String
    Dim sFractionPart As String
    Dim sValue As String
    Dim sParts() As String
    Dim lPoint As Long
    
    sValue = gValue(cell)

    lPoint = InStr(sValue, ".")

    If lPoint > 0 Then
        sParts = Split(sValue, ".")
        sFractionPart = sParts(1)
        sLowPart = sParts(0)
        sHighPart = ""
    Else
        sFractionPart = ""
        sLowPart = sValue
        sHighPart = ""
    End If
    
    If Len(sLowPart) > 6 Then
        sLowPart = Right$(sValue, 6)
        sHighPart = Left$(sValue, Len(sValue) - 6)
    End If
    
    If sFractionPart <> "" Then
        sLowPart = sLowPart & "." & sFractionPart
    End If
    
    sLowPart = CStr(CLng(val(sLowPart) * 100) / 100)
    If sHighPart <> "" Then
        sLowPart = sHighPart & sLowPart
    End If
    dRet = CDbl(sLowPart)
    cVal = dRet
    
End Function

Public Function findDuplicates(searchRange As Range) As String
    Dim value As String
    Dim uniColl As Collection
    Dim dupColl As Collection
    
    Set uniColl = New Collection
    Set dupColl = New Collection
    findDuplicates = ""
    
    For Each cell In searchRange.Cells
        value = cell.value
        If value <> "" Then
            On Error Resume Next
            uniColl.Item value 'If it fails, Err.Number will be nonzero.
            uniContains = (Err.Number = 0)
            If (uniContains) Then
                If findDuplicates = "" Then
                    findDuplicates = value
                    dupColl.Add addr, value
                Else
                    dupColl.Item value 'If it fails, Err.Number will be nonzero.
                    dupContains = (Err.Number = 0)
                    If (Not (dupContains)) Then
                        findDuplicates = findDuplicates & ", " & value
                        dupColl.Add addr, value
                    End If
                End If
            Else
                uniColl.Add addr, value
            End If
        End If
    Next
    
End Function
Public Function isDecimalMaxLengthExceeded(numberVal As String, maxLength As Integer) As Boolean
 ' This function assumes numberVal is a number
 ' This function returns true if <numberVal> has more than <maxLength> decimal numbers after the decimal point
 ' and returns false otherwise
 ' This function also returns false if there is no decimal point in numberVal
 Dim digitLength As Integer
 Dim bRet As Boolean
 bRet = False
 
 digitLength = InStr(CStr(numberVal), ".")
 If digitLength > 0 Then 'there is a decimal point
        digitLength = Len(CStr(numberVal)) - InStr(CStr(numberVal), ".")
        If digitLength > maxLength Then '  more than max number after the decimal point
            bRet = True
        End If
 End If
 isDecimalMaxLengthExceeded = bRet
End Function
Attribute VB_Name = "InputPWDBox"
Attribute VB_Base = "0{34310A2D-0939-480E-859C-6E1F06099A39}{353FBBFD-B76A-450E-8745-6D241599A622}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public Title As String
Public Prompt As String
Public Default As String
Public value As String

Private Sub cmdCancel_Click()

    value = ""
    HideMe

End Sub

Private Sub cmdOK_Click()

    HideMe

End Sub

Private Sub txtValue_Change()

    value = Me.txtValue.text

End Sub

Private Sub txtValue_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)

    If KeyCode = 13 Then
        KeyCode = 0
        value = Me.txtValue.text
        HideMe
    End If

End Sub

Private Sub UserForm_Activate()

    Me.txtValue.text = ""
    Me.Caption = Title
    Me.lblPrompt.Caption = Prompt
    Me.txtValue.text = Default
    Me.txtValue.SetFocus

End Sub

Private Sub HideMe()

    Me.Hide
    
End Sub

Attribute VB_Name = "Module1"
Sub test()
MsgBox getVersion(Worksheets("Wksh 1 - Market Experience").Range("B1").text)
End Sub
Attribute VB_Name = "PleaseWait"
Attribute VB_Base = "0{21F7D1AC-4BFE-4AC2-A2CF-4F1BB4D50703}{AC75B094-6312-4BC0-9A09-094EAA5CCD6F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private WorkIsFinished As Boolean
Private Sub UserForm_Activate()
    
    WorkIsFinished = False
    Application.CalculateFull
    DoEvents
    SetFormulas FindLastPlan(ws2Name)
    Application.CalculateFull
    DoEvents
    'checkACA
    FixValidation
    
End Sub

Private Sub FixValidation()

    Dim sh As Worksheet
    Dim planCount As Long
    Dim inputFields() As String
    Dim prodIdx As Long
    Dim planIdx As Long
    Dim idx As Long
    Dim totalCnt As Long
    Dim lastPercent As Long
    Dim progressCnt As Long
    Dim cell As Range
    Dim addr As String
    Dim row As Long
    Dim sFirstCol As String
    Dim sLastCol As String
    
    sFirstCol = "G"
    sLastCol = GetColAddress(FindLastPlan(ws2Name))
    Set sh = Sheets(ws2Name)
    inputFields = Split(ws2InputFields, "|")
    planCount = FindLastPlan(ws2Name) - 6
    FindProducts
    totalCnt = (1 + UBound(inputFields)) * planCount
    
    UnlockWorksheet ws2Name
    sh.Columns(sFirstCol & ":" & sLastCol).ColumnWidth = 15
    prodIdx = 0
    planIdx = 0
    progressCnt = 0
    lastPercent = 0
    For prodIdx = 0 To UBound(productDetails)
        'setting Threshold formula
        BuildThresholdFormula productDetails(prodIdx).ws2Start, productDetails(prodIdx).ws2End
        For planIdx = productDetails(prodIdx).ws2Start To productDetails(prodIdx).ws2End
            For idx = 0 To UBound(inputFields)
                progressCnt = progressCnt + 1
                If CInt(inputFields(idx)) = 1 Then
                    row = idx + 12
                    addr = GetColAddress(planIdx) & CStr(row)
                    Set cell = sh.Range(addr).Cells
                    SetValidation cell
                    If CInt((progressCnt / totalCnt) * 100) > lastPercent Then
                        lastPercent = CInt((progressCnt / totalCnt) * 100)
                        Me.lblProgress.Caption = CStr(lastPercent) & "%"
                        DoEvents
                    End If
                End If
            Next idx
        Next planIdx
    Next prodIdx
    
    LockWorksheet ws2Name
    Me.lblProgress.Caption = "100%"
    WorkIsFinished = True
    Unload Me
    
End Sub

Private Function SetValidation(target As Range)

    Dim source As Range
    Dim sh As Worksheet
    Set sh = Sheets("PlanTemplate")
    Set source = sh.Cells(target.row, 7)
    
    UnlockWorksheet ws2Name
    
    With target.Validation
        .Delete
        .Add Type:=source.Validation.Type, AlertStyle:=source.Validation.AlertStyle, Operator _
            :=source.Validation.Operator, Formula1:=source.Validation.Formula1, Formula2:=source.Validation.Formula2
        .IgnoreBlank = source.Validation.IgnoreBlank
        .InCellDropdown = source.Validation.InCellDropdown
        .InputTitle = source.Validation.InputTitle
        .ErrorTitle = source.Validation.ErrorTitle
        .InputMessage = source.Validation.InputMessage
        .ErrorMessage = source.Validation.ErrorMessage
        .ShowInput = source.Validation.ShowInput
        .ShowError = source.Validation.ShowError
    End With
    
End Function

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If Not WorkIsFinished Then
        Cancel = True
    End If
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Private Sub Worksheet_SelectionChange(ByVal target As Range)

    MoveButtons
    
End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_SelectionChange(ByVal target As Range)

    MoveButtons

End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_AfterXmlImport(ByVal Map As XmlMap, ByVal IsRefresh As Boolean, ByVal Result As XlXmlImportResult)

End Sub

Private Sub Workbook_SheetChange(ByVal sh As Object, ByVal target As Range)
 
    Dim rng As Range
    Dim srcRng As Range
    Dim tsh As Worksheet
    Dim tsh2 As Worksheet
    
    
    
    Dim date1 As Date
    Dim date2 As Date
    Dim CellList() As String
    Dim col1 As Long
    Dim col2 As Long
    Dim idx As Integer
    Dim sAddress As String
    Dim sAddr() As String
    Dim bValid As Boolean
    Dim sResult As String
    Dim row As Long
    Dim prodAvgOn As Boolean
    Dim colsWithProduct() As Long
    
    Dim mBoxResult As Integer
    
    Application.ScreenUpdating = False
    Select Case target.Worksheet.Name
        Case ws1Name
            ' testing for Index Rate of Experience PMPM not greater than two digits of precision
            If target.row = 17 And target.Column = 7 Then
                If (isDecimalMaxLengthExceeded(target.value, 2) Or (target.value < 0)) Then
                    mBoxResult = MsgBox("Must be a numeric value with up to two decimal places.", vbOKOnly + vbCritical, "Value not valid:")
                    target.value = ""
                    target.Activate
                End If
            End If
        Case ws2Name
            If Not bChanging Then
                bChanging = True
                'testing to see if a single cell is being changed
                If InStr(target.Address, ":") = 0 Then
                    'testing to see if the Exchange Plan cell is changing and
                    'if there is data in the column that is being changed
                    Set tsh = Worksheets(ws2Source)
                    If target.row = 21 And target.Column > 6 And _
                        sh.Cells(ws2Section2Top, target.Column).value <> "" Then
                        UnlockWorksheet ws2Name
                        CellList = Split(ws2BlackOuts, "|")
                        If UCase(target.value) = "NO" Then
                            'clearing cells and making them gray background
                            idx = 0
                            Do While idx <= UBound(CellList)
                                sh.Cells(CLng(CellList(idx)), target.Column).value = ""
                                Set rng = sh.Range(GetCellAddress(CLng(CellList(idx)), target.Column))
                                ColorCell rng, CellColors.Grey
                                idx = idx + 1
                            Loop
                        Else
                            'setting cell background colors back right and adding formulas
                            idx = 0
                            Do While idx <= UBound(CellList)
                                Set rng = sh.Range(GetColAddress(CLng(target.Column)) & CStr(CellList(idx)))
                                Set srcRng = tsh.Range(GetColAddress(7) & CStr(CellList(idx)))
                                srcRng.Copy
                                rng.PasteSpecial xlPasteAll
                                Application.CutCopyMode = False
                                Select Case CLng(CellList(idx))
                                    Case 66, 92
                                        ColorCell rng, CellColors.LightBlue
                                    Case Else
                                        ColorCell rng, CellColors.White
                                End Select
                                idx = idx + 1
                            Loop
                        End If
                        LockWorksheet ws2Name
                        target.Activate
                    End If
                    ' testing for total premium not greater than two digits of precision
                    If (target.row = 57 Or target.row = 83) And (target.Column > 6) Then
                        If (isDecimalMaxLengthExceeded(target.value, 2) Or (target.value < 0)) Then
                            mBoxResult = MsgBox("Must be a numeric value with up to two decimal places.", vbOKOnly + vbCritical, "Value not valid:")
                            target.value = ""
                            target.Activate
                        End If
                    End If

                    
                    'testing for changes in plan effective date
                    Set tsh = Worksheets(ws1Name)
                    
                    Set tsh2 = Worksheets(ws2Name)
                    If target.row = 25 Then 'effective date of proposed rates
                        UnlockWorksheet ws1Name
                        tsh.Cells(5, 5).value = getLatestEffectiveDate
                        LockWorksheet ws1Name
                        
                        ' determine if there are any other columns with the same product, but different plan
                        colsWithProduct = getWsh2ColumnsMergedToCol(target.Column)
                        If Not (colsWithProduct(0)) = target.Column Then ' cell 12 in this column is merged with another column
                            For idx = 0 To UBound(colsWithProduct)
                                If (Trim(tsh2.Cells(25, colsWithProduct(idx)).value) = "") Then ' cell contains no date
                                    tsh2.Cells(25, colsWithProduct(idx)).value = tsh2.Cells(25, target.Column)
                                End If
                            Next idx
                        End If
                    End If
                End If
                bChanging = False
            End If
    End Select
    Application.ScreenUpdating = True
End Sub

Function getWsh2ColumnsMergedToCol(colId As Long) As Long()

    ' this function returns an array of all columns merged to colId at row 12 (product ID)
    ' this function returns an array with just colId if no columns are merged to this column at row 12
    Dim colsFound() As Long
    Dim foundCtr As Long
    Dim wsh2 As Worksheet
    Dim sArray() As String
    foundCtr = 0
    ReDim colsFound(foundCtr)
    colsFound(foundCtr) = colId
    
    Set wsh2 = Worksheets(ws2Name)
    If (wsh2.Cells(12, colId).MergeCells) Then ' this column is merged with at least one more column at row 12
        sArray = Split(wsh2.Cells(12, colId).MergeArea.Address, ":") ' contains leftmost and rtmost cell addresses of the merge area($G$12, $J$12)
        For idx = Range(sArray(0)).Column To Range(sArray(1)).Column
          If (Not idx = colId) Then ' only return columns that are not this column
            ReDim Preserve colsFound(foundCtr)
            colsFound(foundCtr) = idx ' add column idx to array
            foundCtr = foundCtr + 1
          End If
        Next idx
    End If
    
    getWsh2ColumnsMergedToCol = colsFound
    
End Function
Function isBlackOutCell(cellRow As Long) As Boolean

    Dim ret As Boolean
    ret = False
    If InStr("|" & ws2BlackOuts & "|", "|" & CStr(cellRow) & "|") > 0 Then
        ret = True
    End If
    isBlackOutCell = ret

End Function
Attribute VB_Name = "UnusedCode"

Function GetExcelVersion() As String

     Dim sh As Worksheet
     Dim sTest As String
     Set sh = Sheets(1)
     On Error GoTo ExcelErr
     sTest = sh.Cells(1, 257).text
     sTest = "2007"
ExitFunc:
     GetExcelVersion = sTest
     Exit Function
ExcelErr:
     If Err.Number = 1004 Then
         sTest = "2003"
     Else
         sTest = "UNKNOWN"
     End If
     Resume ExitFunc

End Function


Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{375C37CF-3911-4B18-AACB-66429B04D1D0}{227D9810-B78A-451E-AF69-5FF7107E23C9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
    Me.Hide
End Sub

Private Sub UserForm_Activate()

    Me.ShowMessage.SetFocus

End Sub

Attribute VB_Name = "WorksheetFunctions"
Public Sub Validate()
Attribute Validate.VB_ProcData.VB_Invoke_Func = "I\n14"

    Dim sMessage As String
    bSheetValid = True
    sMessage = ValidateData()
    
    If sMessage <> "" Then
        
        UserForm1.ShowMessage.text = sMessage
        UserForm1.ShowMessage.SetFocus
        'scroll top top line
        UserForm1.ShowMessage.CurLine = 0
        
        UserForm1.Show
    
    Else

        MsgBox "All data is currently valid."
    
    End If
    
End Sub

Public Sub ValidateAndFinalize()
Attribute ValidateAndFinalize.VB_ProcData.VB_Invoke_Func = "F\n14"

    Dim sMessage As String
    Dim sh As Worksheet
    Set sh = Sheets(ws2Source)
    Dim sAnswer As String
    bSheetValid = True
    sMessage = ValidateData()
    
    If sMessage <> "" Then
        UserForm1.ShowMessage.text = sMessage
        UserForm1.ShowMessage.SetFocus
        'scroll top top line
        UserForm1.ShowMessage.CurLine = 0
        
        UserForm1.Show
    End If
    If Not bSheetValid Then
    
        'test for xml export
        If sh.Cells(1, 2).value = "TEST" Then
            sAnswer = InputPasswordBox("Validation has failed.  Enter Administrator password to produce a test XML output file.", , _
                "Enter Administrator Password")
            If sAnswer = wsPassword Then
                convertXML
            Else
                MsgBox "Administrator password not correct.", vbOKOnly, "Invalid Password"
            End If
        End If
    
    Else

        convertXML
    
    End If
End Sub

Private Function ValidateData() As String

    Dim sMsg As String
    Dim cellRefs() As String
    Dim cellRefsTPCheck() As String
    Dim cellInfo() As String
    Dim idx As Integer
    Dim market As productType
    Dim ws1 As Worksheet
    Dim ws2 As Worksheet
    Dim cell As Range
    Dim cellTP As Range
    Dim cellMM As Range
    Dim sAddr As String
    Dim sAddrTP As String
    Dim col As Integer
    Dim sCategory As String
    Dim prod As Integer
    Dim bHistoryFound As Boolean
    Dim sRateChange As String
    Dim sCellValue As String
    Dim sMemberMonths As String
    Dim sProjectedMemberMonths As String
    Dim sExchangePlan As String
    Dim sProductName As String
    Dim sOrigMsg As String
    Dim sWarning As String
    Dim bOneCategoryFound As Boolean
    Dim sTmpMsg As String
    Dim sMarket As String
    Dim sResult As String
    Dim sValidUDs() As String
    Dim tstRng1 As Range
    Dim tstRng2 As Range
    Dim tstRng3 As Range
    Dim tstVal As Single
    Dim prodRange As Range
    Dim planRange As Range
   
        
    'Verify at least one product is present
    If FindLastPlan(ws2Name) < 7 Then
        sMsg = "No products were found to export on the " & ws2Name & " sheet."
    Else
        Set ws1 = Sheets(ws1Name)
        Set ws2 = Sheets(ws2Name)
        
        'Verify no duplicate Product IDs
        Set prodRange = ws2.Range("G13" & ":" & GetCellAddress(13, FindLastPlan(ws2Name)))
        duplicateProds = findDuplicates(prodRange)
        If duplicateProds <> "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - The following Product IDs are duplicated: " & duplicateProds)
        End If
                
        'Verify no duplicate Plan IDs
        Set planRange = ws2.Range("G20" & ":" & GetCellAddress(20, FindLastPlan(ws2Name)))
        duplicatePlans = findDuplicates(planRange)
        If duplicatePlans <> "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - The following Plan IDs are duplicated: " & duplicatePlans)
        End If
        
        'Verify all Worksheet1 required cells
        sValidUDs = Split(ValidUDs, "|")
        Set cell = ws1.Range(mktCell).Cells
        sMarket = cell.value
        market = GetProductType(sMarket)
        cellRefs = Split(Matrix_ws1_Req_Cells, "|")
        idx = 0
        'verifying required cells worksheet 1
        Do While idx <= UBound(cellRefs)
            cellInfo = Split(cellRefs(idx), ",")
            Set cell = ws1.Range(cellInfo(0)).Cells
            sAddr = Replace(cell.Address, "$", "")
            If cellInfo(0) = "V37" Then
                If Trim$(IIf(IsEmpty(cell.value), "", cell.value)) = "" Then
                    sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & cellInfo(0) & " - (" & cellInfo(1) & ") is required for " & sMarket & " Market.")
                    bSheetValid = False
                End If
            Else
                If cell.value = "" Then
                    sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & cellInfo(0) & " - (" & cellInfo(1) & ") is required.")
                    bSheetValid = False
                End If
            End If
            'verifying cell values worksheet 1
            Select Case cellInfo(0)
                Case "E3"
                    'company name
                    If Len(cell.value) > 100 Then
                        sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - Company name cannot be more than 100 characters.")
                        bSheetValid = False
                    End If
                Case "E4"
                    'hios ID
                    sResult = checkHIOSID(cell.value)
                    If sResult <> "" Then
                        sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & sResult)
                        bSheetValid = False
                    End If
                Case "E5", "E12"
                    If Not IsDate(cell.value) Then
                        sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - Value is not a valid date.")
                        bSheetValid = False
                    Else
                        If cellInfo(0) = "E12" Then
                            If Not ValidStartDate(sMarket, cell.value) Then
                                sWarning = AddMsg(sWarning, "WARNING - " & ws1Name & " - Cell " & sAddr & " - Value does not appear to be a valid start period for the selected market.")
                            End If
                        End If
                    End If
                Case "H3"
                    If InStr(States, "|" & cell.value & "|") = 0 Then
                        sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - State is not a valid value from the list.")
                        bSheetValid = False
                    End If
                Case "H4"
                    If InStr(Markets, "|" & cell.value & "|") = 0 Then
                        sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - Market is not a valid value from the list.")
                        bSheetValid = False
                    End If
                Case "F12", "F15", "F16", "G17", "F18", "Q32", "V33", "V35", "T40", "T41", "T42", "V44", "X47", "V37"
                    If Not IsNumeric(cell.value) Then
                        sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - Must be a numeric value.")
                        bSheetValid = False
                    Else
                        Select Case cellInfo(0)
                            Case "G17"
                                ' check that there is no more than 2 decimal places are in the cell value
                                If (isDecimalMaxLengthExceeded(cell.value, 2) Or (cell.value < 0)) Then
                                        sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - (" & cellInfo(1) & ") Must be a numeric value with up to two decimal places.")
                                        bSheetValid = False
                                End If
                            Case "F18"
                                If val(ws1.Cells(14, 6).value) > 0 And val(cell.value) <= 0 Then
                                    sWarning = AddMsg(sWarning, "WARNING - " & ws1Name & " - Cell " & sAddr & " - Must be > 0 if Allowed Claims (Cell F16) is greater than 0.")
                                End If
                            Case "Q32", "V33", "T40", "T42"
                                If val(cell.value) < 0 Or val(cell.value) > 1 Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - Must be between 0 and 100.")
                                    bSheetValid = False
                                End If
                            Case "T41"
                                If val(cell.value) < -1 Or val(cell.value) > 1 Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - Must be between -100 and 100.")
                                    bSheetValid = False
                                End If
                            Case "X47"
                                If val(cell.value) < 1 Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - Must be greater than zero.")
                                    bSheetValid = False
                                End If
                            Case "V44"
                                If val(cell.value) <= 0 Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - Must be greater than zero.")
                                    bSheetValid = False
                                End If
                        End Select
                    End If
            End Select
            
            idx = idx + 1
        Loop
        
        'Verify all Benefit Category Columns if used
        cellRefs = Split(Matrix_ws1_Req_Bene_Cols, "|")
        bOneCategoryFound = False
        For idx = 24 To 29
            If OneValueExists(ws1, cellRefs, idx) Then
                'Benefit Category is being used so checking columns for category
                bOneCategoryFound = True
                sAddr = "C" & CStr(idx)
                Set cell = ws1.Range(sAddr).Cells
                sCategory = cell.value
                col = 0
                Do While col <= UBound(cellRefs)
                    cellInfo = Split(cellRefs(col), ",")
                    sAddr = cellInfo(0) & CStr(idx)
                    Set cell = ws1.Range(sAddr).Cells
                    sAddr = Replace(cell.Address, "$", "")
                    If Trim$(IIf(IsEmpty(cell.value), "", cell.value)) = "" Then
                        sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - (Benefit Category '" & sCategory & _
                            "' - " & cellInfo(1) & ") is required.")
                        bSheetValid = False
                    Else
                        Select Case UCase$(cellInfo(0))
                            Case "E"
                                If InStr(UtilDescriptions, "|" & cell.value & "|") = 0 Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - (Benefit Category '" & sCategory & _
                                        "' - " & cellInfo(1) & ") is not a valid value from the list.")
                                    bSheetValid = False
                                Else
                                    If InStr(sValidUDs(idx - 24), UCase$(Left$(cell.value, 1))) = 0 Then
                                        sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - (Benefit Category '" & sCategory & _
                                            "' - " & cellInfo(1) & ") utilization description is not valid for the " & sCategory & " category.")
                                        bSheetValid = False
                                    End If
                                End If
                            Case "F", "G", "R", "S", "J", "K", "L", "M"
                                If Not IsNumeric(cell.value) Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - (Benefit Category '" & sCategory & _
                                        "' - " & cellInfo(1) & ") must be numeric.")
                                    bSheetValid = False
                                Else
                                    Select Case UCase$(cellInfo(0))
'                                        Case "J", "K", "L", "M"
'                                            If val(ws1.Cells(idx, 6).Value) < 0 And val(cell.Value) < 1 Then
'                                                sWarning = AddMsg(sWarning, "WARNING - " & ws1Name & " - Cell " & sAddr & " - (Benefit Category '" & sCategory & _
'                                                    "' - " & cellInfo(1) & ") must be greater than 0 if Utilization per 1000 (cell F" & CStr(idx) & ") is greater than 0.")
'                                            End If
                                        Case "R", "S"
                                            If cell.row <> 28 Then
                                                If val(ws1.Cells(32, 17).value) < 1 And val(cell.value) < 1 Then
                                                    sWarning = AddMsg(sWarning, "WARNING - " & ws1Name & " - Cell " & sAddr & " - (Benefit Category '" & sCategory & _
                                                        "' - " & cellInfo(1) & ") must be greater than 0 if Projected Allowed Experience Claims PMPM (w/applied credibility if applicable) (cell Q32) is less than 100%.")
                                                End If
                                            End If
                                    End Select
                                End If
                        End Select
                    End If
                    col = col + 1
                Loop
            End If
        Next idx
        
        'special conditions worksheet 1
        If Not bOneCategoryFound And cVal(ws1.Cells(16, 6)) > 0 Then
            sWarning = AddMsg(sWarning, "WARNING - " & ws1Name & " - Data for at least one Benefit Category (Rows 24 through 29) is required if allowed claims (Cell F16) is greater than 0.")
        End If
        
        Set tstRng1 = ws1.Range("F16")
        Set tstRng2 = ws1.Range("F15")
        If val(tstRng1.value) < val(tstRng2.value) Then
            sWarning = AddMsg(sWarning, "WARNING - " & ws1Name & " Allowed Claims (Claims Amount) (Cell F16) must be greater than or equal to Incurred Claims in Experience Period (Claims Amount) (Cell F15).")
        End If
        
        Set tstRng1 = ws1.Range("H30")
        Set tstRng2 = ws1.Range("G16")
        If cVal(tstRng1) <> cVal(tstRng2) Then
            sWarning = AddMsg(sWarning, "WARNING - " & ws1Name & " Total PMPM (Cell H30) is not equal to Allowed Claims (Cell G16).")
        End If
        
        Set tstRng1 = ws1.Range("V35")
        Set tstRng2 = ws1.Range("V43")
        If Abs(cVal(tstRng1)) >= cVal(tstRng2) Then
            sWarning = AddMsg(sWarning, "WARNING - " & ws1Name & " Projected Risk Adjustments, PMPM (Cell V35) must be less than Single Risk Pool Gross Premium Avg. Rate, PMPM (Cell V43).")
        End If
        
        If UCase$(sMarket) <> "SMALL GROUP" Then
            Set tstRng1 = ws1.Range("V44")
            Set tstRng2 = ws1.Range("V32")
            If cVal(tstRng1) > cVal(tstRng2) Then
                sWarning = AddMsg(sWarning, "WARNING - " & ws1Name & " Index Rate For Projection Period (Cell V44) must be less than or equal to Projected Allowed Experience Claims PMPM (w/applied credibility if applicable), After Credibility Total (Cell V32).")
            End If
        End If
        Set tstRng1 = ws1.Range("T40")
        Set tstRng2 = ws1.Range("T41")
        Set tstRng3 = ws1.Range("T42")
        tstVal = cVal(tstRng1) + cVal(tstRng2) + cVal(tstRng3)
        If tstVal < 0 Or tstVal > 1 Then
            sWarning = AddMsg(sWarning, "WARNING - " & ws1Name & " The sum of Administrative Expense Load (Cell T40), Profit & Risk Load (Cell T41), and Taxes & Fees (Cell T42) must also be between 0% and 100%.")
        End If
        
        'Verify all Worksheet 2 cells
        FindProducts
        prod = 0
        cellRefs = Split(Matrix_ws2_Req_Cells, "|")
        
        
        
        Do While prod <= UBound(productDetails)
            bHistoryFound = False
            sProductName = Trim$(ws2.Cells(12, productDetails(prod).ws2Start).value)
            For col = productDetails(prod).ws2Start To productDetails(prod).ws2End
                sRateChange = Trim$(ws2.Cells(26, col).value)
                sMemberMonths = Trim$(ws2.Cells(56, col).value)
                sProjectedMemberMonths = Trim$(ws2.Cells(48, col).value)
                sExchangePlan = Trim$(ws2.Cells(21, col).value)
                For idx = 0 To UBound(cellRefs)
                    cellInfo = Split(cellRefs(idx), ",")
                    Set cell = ws2.Cells(CInt(cellInfo(0)), col)
                    sCellValue = Trim$(IIf(IsEmpty(cell.value), "", cell.value))
                    sAddr = Replace(cell.Address, "$", "")
                    Select Case cell.row
                        Case 12, 13
                            If col = productDetails(prod).ws2Start Then
                                If sCellValue = "" Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                        " - (" & cellInfo(1) & ") is required.")
                                    bSheetValid = False
                                Else
                                    If cell.row = 12 Then
                                        If Len(cell.value) > 100 Then
                                            sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                                " - (" & cellInfo(1) & ") must be 100 characters or less.")
                                            bSheetValid = False
                                        End If
                                    Else
                                        sResult = checkProductID(cell.value)
                                        If sResult <> "" Then
                                            sWarning = AddMsg(sWarning, "WARNING - " & ws2Name & " - Cell " & sAddr & _
                                                " - (" & cellInfo(1) & ") " & sResult)
                                        End If
                                    End If
                                End If
                            End If
                            
                        Case 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27
                            If sCellValue = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                    " - (" & cellInfo(1) & ") is required.")
                                bSheetValid = False
                            Else
                                Select Case cell.row
                                    Case 14
                                        If InStr(Metals, "|" & cell.value & "|") = 0 Then
                                            sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                                " - (" & cellInfo(1) & ") Metal is not a valid value from the list.")
                                            bSheetValid = False
                                        End If
                                    Case 17
                                        If InStr(PlanCategory, "|" & cell.value & "|") = 0 Then
                                            sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                                " - (" & cellInfo(1) & ") Plan Category is not a valid value from the list.")
                                            bSheetValid = False
                                        End If
                                    Case 18
                                        If InStr(PlanTypes, "|" & cell.value & "|") = 0 Then
                                            sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                                " - (" & cellInfo(1) & ") Plan Type is not a valid value from the list.")
                                            bSheetValid = False
                                        End If
                                    Case 15, 16, 26, 27
                                        If Not IsNumeric(cell.value) Then
                                            sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                                " - (" & cellInfo(1) & ") must be a numeric value.")
                                            bSheetValid = False
                                        Else
                                            If cell.row = 15 Or cell.row = 16 Or cell.row = 47 Then
                                                If val(cell.value) < 0 Then
                                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                                        " - (" & cellInfo(1) & ") must be greater than or equal to 0.")
                                                    bSheetValid = False
                                                End If
                                            End If
                                        End If
                                    Case 19
                                        If Len(cell.value) > 100 Then
                                            sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                                " - (" & cellInfo(1) & ") must be 100 characters or less.")
                                            bSheetValid = False
                                        End If
                                    Case 20
                                        sResult = checkPlanID(cell.value, cell.Column)
                                        If sResult <> "" Then
                                            sWarning = AddMsg(sWarning, "WARNING - " & ws2Name & " - Cell " & sAddr & _
                                                " - (" & cellInfo(1) & ") " & sResult)
                                        End If
                                    Case 21
                                        If cell.value <> "Yes" And cell.value <> "No" Then
                                            sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                                " - (" & cellInfo(1) & ") Exchange Plan is not a valid value from the list.")
                                            bSheetValid = False
                                        End If
                                    Case 25
                                        If Not IsDate(cell.value) Then
                                            sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                                " - (" & cellInfo(1) & ") must be a valid date.")
                                            bSheetValid = False
                                        End If
                                End Select
                            End If
                            If cell.row = 15 Then
                                sTmpMsg = ValidateAVMetal(cell)
                                If sTmpMsg <> "" Then
                                    sWarning = AddMsg(sWarning, "WARNING - " & ws2Name & " - Cell " & sAddr & _
                                        " - (" & cellInfo(1) & ") " & sTmpMsg)
                                End If
                            End If
                            
                        Case 22, 23, 24
                            If col = productDetails(prod).ws2Start Then
                                If sCellValue <> "" Then
                                    bHistoryFound = True
                                    If Not IsNumeric(cell.value) Then
                                        sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                            " - (" & cellInfo(1) & ") must be a numeric value.")
                                        bSheetValid = False
                                    Else
                                        If val(cell.value) < -1 Or val(cell.value) > 1 Then
                                            sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                                " - (" & cellInfo(1) & ") must be between -100% and 100%.")
                                            bSheetValid = False
                                        End If
                                    End If
                                End If
                            End If
                            
                        Case 34, 35, 36, 37, 38, 39, 40, 41, 42, 44
                            If sRateChange <> "" And sCellValue = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                    " - (" & cellInfo(1) & ") is required. (enter 0 if not provided)")
                                bSheetValid = False
                            Else
                                If Not IsNumeric(cell.value) Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                        " - (" & cellInfo(1) & ") must be a numeric value.")
                                    bSheetValid = False
                                End If
                            End If
                        
                        Case 66, 92
                            If UCase$(sExchangePlan) = "YES" Then
                                If sCellValue <> "" Then
                                    If Not IsNumeric(sCellValue) Then
                                        sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                            " - (" & cellInfo(1) & ") must be a numeric value if a value is entered.")
                                        bSheetValid = False
                                    End If
                                End If
                            End If
                        
                        Case 47, 48, 56, 58, 59, 70, 71, 96, 97
                            If cell.value <> "" Then
                                If Not IsNumeric(cell.value) Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                        " - (" & cellInfo(1) & ") must be a numeric value if a value is entered.")
                                    bSheetValid = False
                                Else
                                    If cell.row = 58 Or cell.row = 59 Then
                                        If val(sCellValue) < 0 Or val(sCellValue) > 1 Then
                                            sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                                " - (" & cellInfo(1) & ") must be between 0% and 100%.")
                                            bSheetValid = False
                                        End If
                                    ElseIf cell.row = 47 And val(sCellValue) <= 0 And ws2.Cells(17, col) = "Renewing" Then
                                        sWarning = AddMsg(sWarning, "WARNING - " & ws2Name & " - The value of Cell " & _
                                            sAddr & " must be greater than 0 since the plan is not new and will be offered during the projected period.")
                                    End If
                                End If
                            End If
                        
                        Case 55, 61, 62, 63, 65
                            If val(sMemberMonths) > 0 Then
                                If sCellValue = "" Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                        " - (" & cellInfo(1) & ") should be entered if member months are entered.")
                                        bSheetValid = False
                                Else
                                    If Not IsNumeric(sCellValue) Then
                                        sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                            " - (" & cellInfo(1) & ") must be a numeric value.")
                                        bSheetValid = False
                                    Else
                                        If cell.row = 62 Or cell.row = 63 Then
                                            If val(sCellValue) < 0 Or val(sCellValue) > 1 Then
                                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                                    " - (" & cellInfo(1) & ") must be between 0% and 100%.")
                                                bSheetValid = False
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                            
                        Case 81, 84, 85, 87, 88, 89, 91
                            If val(sProjectedMemberMonths) > 0 Then
                                If sCellValue = "" Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                        " - (" & cellInfo(1) & ") should be entered if projected member months are entered.")
                                        bSheetValid = False
                                Else
                                    If Not IsNumeric(sCellValue) Then
                                        sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                            " - (" & cellInfo(1) & ") must be a numeric value.")
                                        bSheetValid = False
                                    Else
                                        If cell.row = 85 Or cell.row = 89 Then
                                            If val(sCellValue) < 0 Or val(sCellValue) > 1 Then
                                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                                    " - (" & cellInfo(1) & ") must be between 0% and 100%.")
                                                bSheetValid = False
                                            End If
                                        End If
                                        If cell.row = 84 Or cell.row = 88 Then
                                            If val(sCellValue) <= 0 Or val(sCellValue) > 1 Then
                                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & _
                                                    " - (" & cellInfo(1) & ") must be between 1% and 100%. This cell requires an input " & _
                                                    "with a non-zero value.  If this plan is a Terminating Plan with no projected enrollment, " & _
                                                    "enter a value of 1.0%.")
                                                    bSheetValid = False
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                    End Select
                Next idx
                
                'Total premium conditional check
                cellRefsTPCheck = Split(Matrix_ws2_Total_Premium_Member_Months_Conditional_Req_Cells, "|")
                
                For idx = 0 To UBound(cellRefsTPCheck)
                    cellInfo = Split(cellRefsTPCheck(idx), ",")
                    
                    Set cellTP = ws2.Cells(CInt(cellInfo(0)), col)
                    Set cellMM = ws2.Cells(CInt(cellInfo(1)), col)
                    
                    sAddrTP = Replace(cellTP.Address, "$", "")
                    
                    presentTP = True
                
                    If Trim$(IIf(IsEmpty(cellTP.value), "", cellTP.value)) = "" Then 'missing
                        presentTP = False
                    End If
                    
                    If presentTP Then
                        If IsNumeric(cellTP.value) Then
                            If cellTP.value >= 0 Then
                               ' check that there are no more than 2 decimal places are in the cell value
                               If isDecimalMaxLengthExceeded(cellTP.value, 2) Then
                                  sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddrTP & " - " & cellInfo(2) & " must be a numeric value with up to two decimal places.")
                                  bSheetValid = False
                                End If
                            Else ' its negative
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddrTP & " - " & cellInfo(2) & " must be a numeric value with up to two decimal places.")
                                bSheetValid = False
                            End If
                        Else ' not a number
                            sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddrTP & " - " & cellInfo(2) & " must be a numeric value with up to two decimal places.")
                            bSheetValid = False
                        End If
                    Else ' TP is not present - verify member months
                        If IsNumeric(cellMM.value) Then ' member months
                            If (cellMM.value > 0) Then  ' member months is > 0 but TP is not present
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddrTP & " - " & cellInfo(2) & " " & cellInfo(3))
                                bSheetValid = False
                            End If
                        End If
                    End If
                Next idx
                
                
                Set tstRng1 = ws2.Cells(58, col)
                Set tstRng2 = ws2.Cells(59, col)
                Set tstRng3 = ws2.Cells(60, col)
                If cVal(tstRng1) + cVal(tstRng2) < 0 Or cVal(tstRng1) + cVal(tstRng2) > 1 Then
                    sWarning = AddMsg(sWarning, "WARNING - " & ws2Name & " the sum of cells " & _
                        Replace(tstRng1.Address, "$", "") & ", " & Replace(tstRng2.Address, "$", "") & " should be between 0% and 100% ")
                End If
                Set tstRng1 = ws2.Cells(62, col)
                Set tstRng2 = ws2.Cells(63, col)
                Set tstRng3 = ws2.Cells(64, col)
                If cVal(tstRng1) + cVal(tstRng2) < 0 Or cVal(tstRng1) + cVal(tstRng2) > 1 Then
                    sWarning = AddMsg(sWarning, "WARNING - " & ws2Name & " the sum of cells " & _
                        Replace(tstRng1.Address, "$", "") & ", " & Replace(tstRng2.Address, "$", "") & " should be between 0% and 100%")
                End If
                Set tstRng1 = ws2.Cells(84, col)
                Set tstRng2 = ws2.Cells(85, col)
                Set tstRng3 = ws2.Cells(86, col)
                If cVal(tstRng1) + cVal(tstRng2) < 0 Or cVal(tstRng1) + cVal(tstRng2) > 1 Then
                    sWarning = AddMsg(sWarning, "WARNING - " & ws2Name & " the sum of cells " & _
                        Replace(tstRng1.Address, "$", "") & ", " & Replace(tstRng2.Address, "$", "") & " should be between 0% and 100%")
                End If
                Set tstRng1 = ws2.Cells(88, col)
                Set tstRng2 = ws2.Cells(89, col)
                Set tstRng3 = ws2.Cells(90, col)
                If cVal(tstRng1) + cVal(tstRng2) < 0 Or cVal(tstRng1) + cVal(tstRng2) > 1 Then
                    sWarning = AddMsg(sWarning, "WARNING - " & ws2Name & " the sum of cells " & _
                        Replace(tstRng1.Address, "$", "") & ", " & Replace(tstRng2.Address, "$", "") & " should be between 0% and 100%")
                End If
            Next col
            If Not bHistoryFound Then
                sWarning = AddMsg(sWarning, "WARNING - " & ws2Name & _
                    " - No Historical Rate Increase data (Rows 22-24) was entered for the product '" & _
                        sProductName & "'")
            End If
            prod = prod + 1
        Loop
    
    End If
    
    sMsg = AddMsg(sMsg, sWarning)
    
    ValidateData = sMsg

End Function

Function OneValueExists(ws As Worksheet, cellRefs() As String, row As Integer) As Boolean

    Dim bFound As Boolean
    Dim col As Integer
    Dim sAddr As String
    Dim cell As Range
    bFound = False
    col = 0
    Do While col <= UBound(cellRefs)
        cellInfo = Split(cellRefs(col), ",")
        sAddr = cellInfo(0) & CStr(row)
        Set cell = ws.Range(sAddr).Cells
        If cell.value <> "" Then bFound = True
        col = col + 1
    Loop
    OneValueExists = bFound
    
End Function

Function ValidStartDate(sMarket As String, sDate As String) As Boolean
    
    Dim bRet As Boolean
    bRet = True
    If Not IsDate(sDate) Then
        bRet = False
    Else
        If UCase$(sMarket) = "SMALL GROUP" Then
            If DatePart("d", sDate) <> 1 Then
                bRet = False
            Else
                If DatePart("M", sDate) <> 1 And DatePart("M", sDate) <> 4 And _
                    DatePart("M", sDate) <> 7 And DatePart("M", sDate) <> 10 Then
                    bRet = False
                End If
            End If
        Else
            If DatePart("d", sDate) <> 1 Or DatePart("M", sDate) <> 1 Then
                bRet = False
            End If
        End If
    End If
    ValidStartDate = bRet

End Function

Function ValidateAVMetal(cell As Range) As String
    
    Dim sRet As String
    Dim addr As String
    Dim sh As Worksheet
    Dim metalCell As Range
    Dim AVMetal As Single
    sRet = ""
    addr = Replace(Replace(cell.Address, "15", "14"), "$", "")
    Set sh = Sheets(ws2Name)
    Set metalCell = sh.Range(addr)
    AVMetal = CSng(IIf(gValue(cell) = "", 0, gValue(cell)))
    Select Case metalCell.value
        Case "Platinum"
            If AVMetal > 0.92 Or AVMetal < 0.86 Then
                sRet = "value is not valid.  For Platinum metal plans the AV Metal Value must be between 0.92 And 0.86"
            End If
        Case "Gold"
            If AVMetal > 0.82 Or AVMetal < 0.76 Then
                sRet = "value is not valid.  For Gold metal plans the AV Metal Value must be between 0.82 And 0.76"
            End If
        Case "Silver"
            If AVMetal > 0.72 Or AVMetal < 0.66 Then
                sRet = "value is not valid.  For Silver metal plans the AV Metal Value must be between 0.72 And 0.66"
            End If
        Case "Bronze"
            If AVMetal > 0.65 Or AVMetal < 0.56 Then
                sRet = "value is not valid.  For Bronze metal plans the AV Metal Value must be between 0.65 And 0.56"
            End If
    End Select

    ValidateAVMetal = sRet

End Function

Function AddMsg(sMsgVar As String, sNewMsg As String)

    If sMsgVar <> "" Then
        sMsgVar = sMsgVar & vbCrLf & vbCrLf
    End If
    sMsgVar = sMsgVar & sNewMsg
    
    AddMsg = sMsgVar

End Function

Public Sub TestHarness()
Attribute TestHarness.VB_ProcData.VB_Invoke_Func = "T\n14"
    
    'Dim ianswer As Integer
    
    'ianswer = InputBox("Select macro.  1=Lock/Unlock, 2=RebuildFormula", "Choose Test", 1)
    'Select Case ianswer
        'Case 1
            testLUL
        'Case 2
            'testRebuildFormula
    'End Select
    
End Sub

Private Sub testLUL()

    Dim sAnswer
    Dim sSheet As String
    sSheet = ActiveSheet.Name
    sAnswer = InputBox("Enter 1 to lock, 2 to unlock", "Lock or Unlock sheet")
    If sAnswer = "1" Then
        LockWorksheet sSheet
        MoveButtons
    Else
        If sAnswer = "2" Then
            UnlockWorksheet sSheet
            DockButtons
        End If
    End If

End Sub

Public Function DockButtons()

    Dim sh As Worksheet
    Dim buttonNames() As String
    Dim lastTop As Double
    Dim lastLeft As Double
    Dim lastWidth As Double
    Dim btnCnt As Long

    Set sh = ActiveSheet

    Select Case sh.Name
        Case ws1Name
            buttonNames = Split(ws1Buttons, "|")
        Case ws2Name
            buttonNames = Split(ws2Buttons, "|")
        Case ws3Name
            buttonNames = Split(ws3Buttons, "|")
    End Select
    
    btnCnt = 0
        
    lastTop = sh.Cells(1, 1).Top
    lastLeft = sh.Cells(1, 1).Left

    On Error GoTo errorHandler

    sh.Shapes(buttonNames(btnCnt)).Left = sh.Cells(1, col + 5).Left

    Do While btnCnt <= UBound(buttonNames)
        With sh.Shapes(buttonNames(btnCnt))
            .Top = lastTop
            .Left = lastLeft
            .Width = 75
        End With
        lastLeft = lastLeft + 80
        btnCnt = btnCnt + 1
    Loop
    
skipButtonMove:
    
    Exit Function
    
errorHandler:
    Resume skipButtonMove
    
End Function

Public Function FindProducts()

    Dim sh As Worksheet
    Dim sAddr() As String
    Dim rng As Range
    Dim iCol As Long
    Dim iProduct As Integer
    Dim bRet As Boolean
    Dim plansFound As Long
    
    bRet = True
    iProduct = 0
    ReDim productDetails(iProduct)
    plansFound = FindLastPlan(ws2Name)
    
    'get start and end cells for worksheet 2
    Set sh = Sheets(ws2Name)
    iCol = 7
    Do While iCol <= plansFound
        ReDim Preserve productDetails(iProduct)
        If sh.Cells(12, iCol).MergeCells And InStr(sh.Cells(12, iCol).MergeArea.Address, ":") > 0 Then
            productDetails(iProduct).ws2Start = iCol
            sAddr = Split(sh.Cells(12, iCol).MergeArea.Address, ":")
            Set rng = sh.Range(Replace(sAddr(1), "$", ""))
            productDetails(iProduct).ws2End = rng.Column
            iCol = productDetails(iProduct).ws2End + 1
        Else
            productDetails(iProduct).ws2Start = iCol
            productDetails(iProduct).ws2End = iCol
            iCol = iCol + 1
        End If
        iProduct = iProduct + 1
    Loop

End Function

Public Sub AddNewProduct()
Attribute AddNewProduct.VB_ProcData.VB_Invoke_Func = "P\n14"

    GetProductDetails

End Sub

Function GetProductType(prodType As String) As productType
    Dim ret As productType
    
    Select Case prodType
        Case "Individual"
            ret = productType.individual
        Case "Small Group"
            ret = productType.SmallGroup
        Case "Combined"
            ret = productType.Combined
        Case Else
            ret = productType.Unknown
    End Select
    
    GetProductType = ret

End Function

Private Sub GetProductDetails()
    
    Dim lastCol As Long
    Dim prodCount As Integer
    Dim yearOfInception As Integer
    Dim sAnswer As String
    Dim sh As Worksheet
    Dim prodType As productType
    Dim iProdAnswer As Variant
    Dim sYearTitle As String
    Dim sYearPrompt As String
    Dim sYearDefault As String
    
    Set sh = Sheets(ws1Name)
    
    sAnswer = getInput(dataType.IntegerData, "Enter number of Plans for this Product (Minimum of 1)", _
            "Enter plan count", "1", True, False)
    
    If sAnswer <> "" Then
        prodCount = CInt(sAnswer)
        If SheetHasRoom(ws2Name, prodCount) Then
            AddProduct prodCount
            lastCol = FindLastPlan(ws2Name)
            SetFormulas lastCol
            MoveButtons
        Else
            MsgBox "There is no more room to add products on this template.", vbOKOnly, "Template Maximum Products Reached"
        
        End If
    End If
    
End Sub

Private Sub AddProduct(planCount As Integer)
    Dim currPlan As Long
    Dim sourceRange As Range
    Dim mergeRange As Range
    Dim destRange As Range
    Dim sNewCol As String
    Dim newProdCol As String
    Dim startCol As Long
    Dim userFields() As String
    Dim mergedCells() As String
    Dim idx As Integer
    Dim rowCnt As Integer
    Dim currCol As Long
    Dim currRow As Long
    Dim intFirstYear As Integer
    Dim intLastYear As Integer
    Dim intCurrYear As Integer
    Dim currColAddr As String
    Dim sValidationMsg As String
    Dim lTemp As Long
    
    'Unlock sheets
    UnlockWorksheet ws2Name
    bChanging = True
    
    'setting up data area for sheet 2
    startCol = FindLastPlan(ws2Name) + 1
    currPlan = 1
    
    'insert new columns and merge the appropriate cells
    InsertCols startCol, planCount
    MergeCols startCol, planCount
    
    'Lock worksheet
    bChanging = False
    LockWorksheet ws2Name
    
End Sub

Public Function BuildThresholdFormula(iStart As Long, iEnd As Long) As String

    Dim sh As Worksheet
    Dim mergeRange As Range
    Dim FinalFormula As String
    Dim FormulaPart1 As String
    Dim FormulaPart2 As String
    Dim FormulaPart3 As String
    Dim col1 As String
    Dim col2 As String
    Dim planCount As Integer
    Dim ExprCOND As String
    
    'Unlock sheets
    UnlockWorksheet ws2Name
    bChanging = True
    
    'building weighted average formula
    planCount = 1 + (iEnd - iStart)
    Set sh = Sheets(ws2Name)
    Set mergeRange = sh.Range(GetCellAddress(ws2WeightedAvgCell, iStart) & ":" & _
        GetCellAddress(ws2WeightedAvgCell, iEnd))
    mergeRange.UnMerge
    mergeRange.HorizontalAlignment = xlCenterAcrossSelection
    
    col1 = GetColAddress(iStart)
    col2 = GetColAddress(iEnd)
    
    ExprCOND = Replace(Replace(ConditionMask, "<COL1>", col1), "<COL2>", col2)
    FormulaPart1 = FormulaMask1
    FormulaPart2 = Replace(Replace(Replace(FormulaMask2, "<COL1>", col1), "<COL2>", col2), "<CONDITION>", ExprCOND)
    FormulaPart3 = Replace(Replace(Replace(FormulaMask3, "<COL1>", col1), "<COL2>", col2), "<CONDITION>", ExprCOND)
    
    With sh.Cells(ws2WeightedAvgCell, iStart)
        .FormulaArray = FormulaPart1
        .Replace "AA97", ExprCOND
        .Replace "AA98", FormulaPart2
        .Replace "AA99", FormulaPart3
    End With
    
    mergeRange.Merge
    
    'Lock worksheet
    bChanging = False
    LockWorksheet ws2Name

End Function

Public Function SetFormulas(lastCol As Long)

    Dim x As Integer
    Dim startRow As Integer
    Dim sTemp As String
    Dim sCol As String
    Dim sh As Worksheet
    Dim source As Worksheet
    
    'Unlocking sheet
    UnlockWorksheet ws2Name
    
    If lastCol > 6 Then
        startRow = 30
        skipRows = 0
        sCol = GetColAddress(lastCol)
        Set sh = Worksheets(ws2Name)
        Set source = Worksheets(ws2Source)
        For x = ws2WeightedAvgCell + 3 To 97
            sTemp = source.Cells(x, 6).Formula
            If Trim$(sTemp) <> "" Then
                sh.Cells(x, 6).Formula = Replace(sTemp, "X", sCol)
            End If
        Next x
    End If
    
    'Locking sheet
    LockWorksheet ws2Name
    
End Function

Public Function FindLastPlan(WorksheetName As String) As Long

    Dim found As Boolean
    Dim col As Long
    Dim row As Long
    Dim sh As Worksheet
        
    found = False
    
    Select Case WorksheetName
        Case ws2Name
            col = 7
            row = ws2Section2Top
        Case ws3Name
            col = 2
            row = 13
        Case Else
            col = 1
            row = 1
    End Select
    
    Set sh = Sheets(WorksheetName)
    
    Do While col <= MaxCols And Not found
        
        If Trim(sh.Cells(row, col).value) = "" Then
            col = col - 1
            found = True
        Else
            col = col + 1
        End If
    
    Loop
        
    FindLastPlan = col
    
End Function

Private Function SheetHasRoom(sheetName As String, Optional ColumnsNeeded As Integer = 0) As Boolean

    Dim bRet As Boolean
    Dim mktType As productType
    Dim iWidthNeeded As Long
    Dim firstOpenCol As Long
    
    bRet = False
    iWidthNeeded = ColumnsNeeded
    
    If sheetName = ws3Name Then
        mktType = GetProductType(Sheets(ws3Name).Cells(4, 8).value)
        If mktType = productType.individual Then
            iWidthNeeded = 7
        Else
            iWidthNeeded = 2
        End If
    End If
    
    If iWidthNeeded > 0 Then
        firstOpenCol = FindLastPlan(sheetName) - 1
        If firstOpenCol + iWidthNeeded <= MaxCols Then
            bRet = True
        End If
    End If
    
    SheetHasRoom = bRet

End Function

Private Sub ResetFormulas()

    SetFormulas 7

End Sub

Public Function getLatestEffectiveDate() As String
    
    Dim col As Long
    Dim sRet As String
    Dim sTemp As String
    Dim sh As Worksheet
    Set sh = Worksheets(ws2Name)
    
    col = 7
    sRet = ""
    Do While sh.Cells(ws2Section2Top, col).value <> ""
        sTemp = sh.Cells(25, col).value
        If sTemp <> "" Then
            If IsDate(sTemp) Then
                If sRet = "" Then
                    sRet = sTemp
                Else
                    If CDate(sTemp) > CDate(sRet) Then
                        sRet = sTemp
                    End If
                End If
            End If
        End If
        col = col + 1
    Loop
    
    getLatestEffectiveDate = sRet
    
End Function

Public Function MoveButtons()

    Dim addr As String
    Dim se() As String
    Dim row As Long
    Dim col As Long
    Dim sh As Worksheet
    Dim buttonNames() As String
    Dim lastTop As Double
    Dim lastLeft As Double
    Dim lastWidth As Double
    Dim btnCnt As Long
    Dim sVersion As String
    
    If ActiveSheet.ProtectContents Or ActiveSheet.ProtectDrawingObjects _
        Or ActiveSheet.ProtectScenarios Then
    
        sVersion = GetExcelVersion
        
        Set sh = ActiveSheet
        addr = ActiveWindow.VisibleRange.Address
        se = Split(addr, ":")
        se(0) = Replace(se(0), "$", "")
        
        row = sh.Range(se(0)).row
        col = sh.Range(se(0)).Column
        
        If (sVersion = "2003" And col < 247) Or sVersion = "2007" Then
        
            Select Case sh.Name
                Case ws1Name
                    buttonNames = Split(ws1Buttons, "|")
                Case ws2Name
                    buttonNames = Split(ws2Buttons, "|")
                Case ws3Name
                    buttonNames = Split(ws3Buttons, "|")
            End Select
            
            btnCnt = 0
                
            lastTop = sh.Cells(row, col + 5).Top
            lastLeft = sh.Cells(row, col + 5).Left
        
            On Error GoTo errorHandler
        
            sh.Shapes(buttonNames(btnCnt)).Left = sh.Cells(row, col + 5).Left
        
            Do While btnCnt <= UBound(buttonNames)
                With sh.Shapes(buttonNames(btnCnt))
                    .Top = lastTop
                    .Left = lastLeft
                    .Width = 82
                End With
                lastLeft = lastLeft + 87
                btnCnt = btnCnt + 1
            Loop
            
            'Make Remove Product button visible if Product or Product ID selected
            If (sh.Name = ws2Name And (ActiveCell.row = "12" Or ActiveCell.row = 13) And (ActiveCell.Column >= 7 And ActiveCell.Column <= FindLastPlan(ws2Name))) Then
                With sh.Shapes("Button 36")
                    .Visible = True
                    .Top = lastTop
                    .Left = lastLeft
                    .Width = 82
                End With
            ElseIf (sh.Name = ws2Name) Then
                sh.Shapes("Button 36").Visible = False
            End If
            
            'Make Remove Plan button visible if Plan Name or Plan ID selected
            If (sh.Name = ws2Name And (ActiveCell.row = 19 Or ActiveCell.row = 20) And (ActiveCell.Column >= 7 And ActiveCell.Column <= FindLastPlan(ws2Name))) Then
                With sh.Shapes("Button 37")
                    .Visible = True
                    .Top = lastTop
                    .Left = lastLeft
                    .Width = 82
                End With
            ElseIf (sh.Name = ws2Name) Then
                sh.Shapes("Button 37").Visible = False
            End If
            
        End If
    End If
    
skipButtonMove:
    
    Exit Function
    
errorHandler:
    Resume skipButtonMove
    
End Function

Public Function UnlockWorksheet(sheetName As String)

    Sheets(sheetName).Unprotect Password:=wsPassword
    'ActiveWorkbook.Unprotect Password:=wsPassword
    
End Function
 
Public Function LockWorksheet(sheetName As String)

    Sheets(sheetName).Protect DrawingObjects:=False, Contents:=True, Scenarios:=False, Password:=wsPassword
    'ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:=wsPassword
        
End Function

Function lastInstr(StringToSearch As String, StringToFind As String) As Integer

    Dim iplace As Integer
    Dim iLastPlace As Integer
    
    iplace = 1
    
    Do While iplace > 0 And iplace <= Len(StringToSearch)
    
        iplace = InStr(iplace, StringToSearch, StringToFind)
        If iplace <> 0 Then
            iLastPlace = iplace
            iplace = iplace + 1
        End If
    
    Loop
    
    lastInstr = iLastPlace

End Function

Function getVersion(text As String) As String
Dim i As Integer
Dim verNum As String

i = lastInstr(text, " ")
verNum = Trim(Mid$(text, i + 1, Len(text)))

getVersion = verNum
End Function

Public Sub AddNewPlan()
Attribute AddNewPlan.VB_ProcData.VB_Invoke_Func = "L\n14"
    
    'check that the Issuer ID and State fields are already filled out
    If Sheets(ws1Name).Range("E4").value = "" Or Sheets(ws1Name).Range("H3").value = "" Then
        MsgBox "Please fill out the Issuer ID and State fields (cells E4 and H3 on the Market Experience worksheet) before adding a plan"
        Exit Sub
    End If
    
    frmPlanID.Show

End Sub

Public Sub AddPlan(planId As String)
    Dim lastCol As Long
    Dim newCol As Integer
    Dim startCol As Long

    'create new column
    If SheetHasRoom(ws2Name, 1) Then
        startCol = FindLastPlan(ws2Name) + 1
        InsertCols startCol, 1
        MergeCols startCol, 1
        lastCol = FindLastPlan(ws2Name)
        SetFormulas lastCol
        MoveButtons
    Else
        MsgBox "There is no more room to add products on this template.", vbOKOnly, "Template Maximum Products Reached"
    
    End If

    'Fill in Plan ID and Product ID
    bChanging = True
    newCol = FindLastPlan(ws2Name)
    UnlockWorksheet ws2Name
    Set sh = Sheets(ws2Name)
    sh.Cells(20, newCol).value = planId
    sh.Cells(13, newCol).value = Left(planId, 10)
    bChanging = False
    LockWorksheet ws2Name
    
End Sub

Public Sub RemovePlan()
    Dim destRange As Range
    Dim selectedCol As String
    Dim startCell As String
    Dim endCell As String
    Dim selectedRange As String
    Dim idx As Integer
    Dim mergeRange As Range
    Dim ntlRange As Range
    Dim firstCell As String
    Dim nextCell As String
    Dim nextToLastCell As String
    Dim prodCell As String
    Dim prodCol As Long
    Dim selectedCol_long As Long
    Dim sh As Worksheet
    Dim firstCol As Long
    Dim nextCol As Long
    Dim nextToLastCol As Long

    rmWarning = MsgBox("Are you sure you want to remove the Plan?  Its column will be deleted from this worksheet.", vbYesNo, "Remove Plan?")
    
    If rmWarning = vbYes Then
        'Unlock sheets
        UnlockWorksheet ws2Name
        bChanging = True
        
        selectedCol_long = ActiveCell.Column
        selectedCol = GetColAddress(selectedCol_long)
        startCell = selectedCol & "12"
        mergedCells = Split(ws2MergeCells, "|")
        prodCell = GetCellAddress(CLng(mergedCells(0)), CLng(Range(startCell).MergeArea.Cells(1, 1).Column))
        prodCol = CLng(Range(prodCell).Column)
        planCount = Range(startCell).MergeArea.count
        firstCol = CLng(Range(startCell).MergeArea.Cells(1, 1).Column)
        nextCol = CLng(Range(startCell).MergeArea.Cells(1, 2).Column)
        nextToLastCol = CLng(Range(startCell).MergeArea.Cells(1, planCount - 1).Column)
        
        'unmerge and copy cells before deletion if necessary
        Set sh = Worksheets(ws2Name)
        If (planCount > 1) Then
            idx = 0
            Do While idx <= UBound(mergedCells)
                firstCell = GetCellAddress(CLng(mergedCells(idx)), firstCol)
                nextCell = GetCellAddress(CLng(mergedCells(idx)), nextCol)
                nextToLastCell = GetCellAddress(CLng(mergedCells(idx)), nextToLastCol)
                Set mergeRange = sh.Range(prodCell & ":" & _
                    GetCellAddress(CLng(mergedCells(idx)), CLng(prodCol + planCount - 1)))
                mergeRange.UnMerge
                Set ntlRange = sh.Range(nextToLastCell)
                ntlRange.Borders(xlEdgeRight).LineStyle = XlLineStyle.xlContinuous
                Range(nextCell).value = Range(firstCell).value
                idx = idx + 1
            Loop
        
        End If
        
        'remove column
        endCell = selectedCol & "101"
        selectedRange = startCell & ":" & endCell
        Set destRange = Sheets(ws2Name).Range(selectedRange)
        destRange.Delete Shift:=xlToLeft
        
        'merge cells back together after deletion
        MergeCols prodCol, planCount - 1
        
        'recalculate effective date
        UnlockWorksheet ws1Name
        Sheets(ws1Name).Cells(5, 5).value = getLatestEffectiveDate
        LockWorksheet ws1Name
        
        'Lock worksheet
        bChanging = False
        LockWorksheet ws2Name
    End If

End Sub

Public Sub RemoveProduct()
    Dim destRange As Range
    Dim selectedCol As String
    Dim startCell As String
    Dim endCell As String
    Dim selectedRange As String

    rmWarning = MsgBox("Are you sure you want to remove the Product?  Its column(s) will be deleted from this worksheet.", vbYesNo, "Remove Product?")
    
    If rmWarning = vbYes Then
        'Unlock sheets
        UnlockWorksheet ws2Name
        bChanging = True
        
        colCount = ActiveCell.MergeArea.count
        selectedCol = GetColAddress(ActiveCell.Column)
        endCol = GetColAddress(ActiveCell.Column + colCount - 1)
        startCell = selectedCol & "12"
        endCell = endCol & "101"
        selectedRange = startCell & ":" & endCell
        Set destRange = Sheets(ws2Name).Range(selectedRange)
        destRange.Delete Shift:=xlToLeft
        
        'recalculate effective date
        UnlockWorksheet ws1Name
        Sheets(ws1Name).Cells(5, 5).value = getLatestEffectiveDate
        LockWorksheet ws1Name
        
        'Lock worksheet
        bChanging = False
        LockWorksheet ws2Name
    End If

End Sub

Private Sub InsertCols(startCol As Long, planCount As Integer)
Dim currPlan As Long
    Dim sh As Worksheet
    Dim sourceRange As Range
    Dim mergeRange As Range
    Dim destRange As Range
    Dim sNewCol As String
    Dim source As Worksheet
    Dim newProdCol As String
    Dim mergedCells() As String
    Dim idx As Integer
    Dim lTemp As Long
    Dim cell As Range
    Dim iStart As Long
    Dim iEnd As Long
    
    'Unlock sheets
    UnlockWorksheet ws2Name
    bChanging = True
    
    Set sh = Sheets(ws2Name)
    Set source = Sheets(ws2Source)
    userFields = Split(ws2InputFields, "|")
    currPlan = 1
    
    
    Do While currPlan <= planCount
        sNewCol = GetColAddress(startCol + currPlan - 1)
        newProdCol = sNewCol & "12"
        Set sourceRange = source.Range("DataEntryBlock")
        sourceRange.Copy
        Set destRange = sh.Range(newProdCol)
        destRange.Insert Shift:=xlToRight
        sh.Columns(sNewCol & ":" & sNewCol).ColumnWidth = 15
        
        'adding cell references so user can enter first plan and it will
        'mirror data if they choose to enter data by product average
        If currPlan > 1 Then
            sh.Cells(10, startCol).value = "    "
        Else
            sh.Cells(10, startCol).value = ""
        End If
        currPlan = currPlan + 1
    Loop
    
    'recalculate effective date
    UnlockWorksheet ws1Name
    Sheets(ws1Name).Cells(5, 5).value = getLatestEffectiveDate
    LockWorksheet ws1Name
    
    'Lock worksheet
    bChanging = False
    LockWorksheet ws2Name
    
End Sub

Private Sub MergeCols(startCol As Long, planCount As Integer)
    Dim mergedCells() As String
    Dim idx As Integer
    Dim mergeRange As Range
    Dim lTemp As Long
    Dim sourceRange As Range
    Dim sh As Worksheet
    Dim cell As Range
    Dim iStart As Long
    Dim iEnd As Long

    'Unlock sheets
    UnlockWorksheet ws2Name
    bChanging = True

    Set sh = Sheets(ws2Name)
    Set source = Sheets(ws2Source)

    If planCount > 1 Then
        mergedCells = Split(ws2MergeCells, "|")
        'Merging cells that span all plans
        Application.CutCopyMode = False
        Application.DisplayAlerts = False
        idx = 0
        Do While idx <= UBound(mergedCells)
            Set mergeRange = sh.Range(GetCellAddress(CLng(mergedCells(idx)), CLng(startCol)) & ":" & _
                GetCellAddress(CLng(mergedCells(idx)), CLng(startCol + planCount - 1)))
            mergeRange.Merge
            lTemp = CLng(mergedCells(idx))
            If lTemp < 28 Then
                Set sourceRange = source.Range("G" & CStr(lTemp))
                CopyValidation sourceRange, mergeRange
            End If
            idx = idx + 1
        Loop
        Application.DisplayAlerts = True
    End If
    
    'building weighted average formula
    Set sh = Sheets(ws2Name)
    Set cell = sh.Cells(ws2WeightedAvgCell, startCol)
    iStart = GetFirstCol(cell)
    iEnd = GetLastCol(cell)
    
    BuildThresholdFormula iStart, iEnd
    
    'Lock worksheet
    bChanging = False
    LockWorksheet ws2Name

End Sub

Public Sub AddPlanToProd(startCol As Long, count As Integer, planId As String)
    Dim targetCol As Long

    targetCol = startCol + count

    'create new column
    If SheetHasRoom(ws2Name, 1) Then
        InsertCols targetCol, 1
        MergeCols startCol, count + 1
        SetFormulas targetCol
        MoveButtons
    Else
        MsgBox "There is no more room to add plans on this template.", vbOKOnly, "Template Maximum Plans Reached"
    
    End If

    'Fill in Plan ID and Product ID
    Sheets(ws2Name).Activate
    UnlockWorksheet ws2Name
    Cells(20, targetCol).value = planId
    LockWorksheet ws2Name
    
End Sub
Attribute VB_Name = "frmPlanID"
Attribute VB_Base = "0{E6FCF81D-2021-4799-8087-C30F5BCAB1FB}{BB60B87F-AE6E-4800-ACA8-1A8C381E912A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Public TitleText As String
Public FieldText As String
Private settingValue As Boolean


Private Sub UserForm_Initialize()

    Me.txtPlan.value = Sheets(ws1Name).Range("E4").value + Sheets(ws1Name).Range("H3").value

End Sub


Private Sub btnOk_Click()
    Dim startCol As Long
    Dim colCount As Integer
        
    If Len(Me.txtPlan.value) <> 14 Then
        MsgBox "Invalid: Plan ID must have a length of 14 characters"
    ElseIf Left(Me.txtPlan.value, 5) <> Sheets(ws1Name).Range("E4").value Then
        MsgBox "Invalid: The first 5 characters of the Plan ID must match the Issuer ID that is present in cell E4 of the Market Experience worksheet"
    ElseIf Left(Mid(Me.txtPlan.value, 6), 2) <> Sheets(ws1Name).Range("H3").value Then
        MsgBox "Invalid: The 6th and 7th character of the Plan ID must match the state abbreviation that is present in cell H3 of the Market Experience worksheet"
    Else
        searchResults = Application.Match(Left(Me.txtPlan.value, 10), Worksheets(ws2Name).Rows(13), 0)
        If IsError(searchResults) Then
            AddPlan Me.txtPlan
        Else
            'startCol = Cells(12, searchResults).MergeArea.Cells(1, 1)
            colCount = Cells(12, searchResults).MergeArea.count
            AddPlanToProd CLng(searchResults), colCount, Me.txtPlan
        End If
        cancelDialog
    End If
    
End Sub

Private Sub btnCancel_Click()

    cancelDialog

End Sub

Private Sub Label1_Click()

End Sub


Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

    If Not settingValue Then cancelDialog

End Sub

Private Sub cancelDialog()

    Me.Hide
    Unload Me

End Sub










Attribute VB_Name = "toXML"
Option Explicit
Private Const startRow As Long = 12
Private Const numCol As Long = 7

'Cell mapping for InsuranceRateForecastTempVO
Public Const Matrix_IRFT_VO As String = "E4,submittingIssuerHIOSIdentifier|E3,companyLegalName|H3,stateAbbreviationText|E12,experiencePeriodBeginningDate|" & _
    "F14,premiumsNetOfMlrRebateInExperiencePeriodAmount|F15,incurredClaimsInExperiencePeriodAmount|F16,allowedClaimsAmount|" & _
    "G17,experiencePeriodIndexRatePMPMQuantity|L21,projectionPeriodStartDate|Q32,projectedAllowedExperienceClaimsPMPMCredibilityIndexQuantity|" & _
    "T32,projectedAllowedManualClaimsPMPMCredibilityIndexQuantity|V32,projectedAdjustedExperienceClaimsPMPMAmount|" & _
    "X32,projectedAllowedExperienceClaimsAmount|V33,paidToAllowedAverageFactorInProjectionPeriodQuantity|" & _
    "V34,projectedIncurredClaimsBeforeAdjustmentAmount|V35,projectedRiskAdjustmentsPMPMAmount|" & _
    "V37,projectedACAReinsuranceRecoveriesPMPMAmount|T40,administrativeExpenseLoadQuantity|V40,administrativeExpenseLoadPMPMAmount|" & _
    "T41,profitAndRiskLoadQuantity|V41,profitAndRiskLoadPMPMAmount|T42,taxesAndFeesPercentQuantity|V42,taxesAndFeesPMPMAmount|" & _
    "V43,singleRiskPoolGrossPremiumAvgRatePMPMAmount|V44,indexRateForProjectionPeriodAmount|" & _
    "V45,percentIncreaseOverExperiencePeriodQuantity|X47,projectedMemberMonthsQuantity|H4,poolingInsuranceMarketLevelType|" & _
    "G12,experiencePeriodEndingDate|E5,rateReviewEffectiveDate|G14,premiumsNetOfMlrRebateInExperiencePeriodPMPMAmount|" & _
    "H14,premiumsNetOfMlrRebateInExperiencePeriodQuantity|G15,incurredClaimsInExperiencePeriodPMPMAmount|" & _
    "H15,incurredClaimsInExperiencePeriodQuantity|G16,allowedClaimsPMPMAmount|H16,allowedClaimsPercentQuantity|" & _
    "F18,experiencePeriodMemberMonthsQuantity|O21,projectionPeriodEndDate|T21,midpointToMidpointMonthsQuantity|" & _
    "H30,totalExperiencePeriodOnActualExperienceAllowedPMPMAmount|Q30,totalProjectionsBeforeCredibilityAdjustmentPMPMAmount|" & _
    "T30,totalCredibilityManualPMPMAmount|V38,projectedIncurredClaimsPMPMAmount|" & _
    "X43,singleRiskPoolGrossPremiumAvgRatePMPMTotalAmount|X42,taxesAndFeesPMPMTotalAmount|X41,profitAndRiskLoadPMPMTotalAmount|" & _
    "X40,administrativeExpenseLoadPMPMTotalAmount|X34,projectedIncurredClaimsBeforeAdjustmentPMPMTotalAmount|" & _
    "X38,projectedIncurredClaimsPMPMTotalAmount|X35,projectedRiskAdjustmentsPMPMTotalAmount|" & _
    "X37,projectedACAReinsuranceRecoveriesPMPMTotalAmount|V46,percentIncreaseAnnualizedQuantity|" & _
    "V36,projectedIncurredClaimsBeforeReinsuranceRecoveriesPMPMAmount|X36,projectedIncurredClaimsBeforeReinsuranceRecoveriesPMPMTotalAmount"
'Cell Mapping for BenefitCategoryAllowedClaimTempVO
Public Const Matrix_BCACT_VO As String = "L,annualizedCostQuantity|M,annualizedUtilizationQuantity|O,credibilityUtilizationPer1000Quantity|" & _
    "P,creditabilityAverageCostPerServiceAmount|Q,creditabilityPMPMAmount|G,experienceAverageCostPerServiceAmount|" & _
    "H,experiencePMPMAmount|E,experienceUtilizationDescriptionText|F,experienceUtilizationPer1000Quantity|" & _
    "K,otherAnticipatedChangeQuantity|J,populationRiskMorbidityQuantity|S,projectionAverageCostPerServiceAmount|" & _
    "T,projectionPMPMAmount|R,projectionUtilizationPer1000Quantity|C,definingBenefitCostType"
'Cell Mapping for InsuranceRateForecastSectionChangeSummaryTermpVO
Public Const Matrix_IRFSCST_VO As String = "2,averageRatePMPMAmount|3,memberMonthsQuantity|4,totalPremiumAmount|" & _
    "5,fullPortionOrEhbBasisOfTPQuantity|6,stateMandatedBenefitsPortionThatAreOtherThanEHBQuantity|" & _
    "7,otherBenefitsPortionOfTPQuantity|8,totalAllowedClaimsAmount|9,fullPortionOrEhbBasisOfTACQuantity|" & _
    "10,stateMandatedBenefitsPortionOfTACThatAreOtherThanEHBQuantity|11,otherBenefitsPortionOfTACQuantity|" & _
    "12,allowedClaimsNotIssuersObligationAmount|13,portionOfAllowedClaimsPayableByHHSFundsOnBehalfOfInsuredPersonAmount|" & _
    "14,portionOfAbovePayableByHHSOnBehalfOfInsuredPersonQuantity|15,totalIncurredClaimsPayableWithIssuerFundsAmount|" & _
    "17,netReinAmount|18,netRiskAdjustmentAmount|20,incurredClaimsPMPMQuantity|21,allowedClaimsPMPMQuantity|" & _
    "22,ehbPortionOfAllowedClaimsPMPMQuantity"
'Cell Mapping for InsurancePlanRateChangePeriodTempVO
Public Const Matrix_IPRCPT_VO As String = "2,averageRatePMPMQuantity|3,memberMonthsQuantity|4,totalPremiumAmount|" & _
    "5,fullPortionOrEhbBasisOfTPQuantity|6,stateMandatedBenefitsPortionThatAreOtherThanEHBQuantity|" & _
    "7,otherBenefitsPortionOfTPQuantity|8,totalAllowedClaimsAmount|9,fullPortionOrEhbBasisOfTACQuantity|" & _
    "10,stateMandatedBenefitsPortionOfTACThatAreOtherThanEHBQuantity|11,otherBenefitsPortionOfTACQuantity|" & _
    "12,allowedClaimsNotIssuersObligationAmount|13,portionOfAllowedClaimsPayableByHHSFundsOnBehalfOfInsuredPersonAmount|" & _
    "14,portionOfAllowedClaimsPayableByHHSOnBehalfOfInsuredPersonQuantity|15,totalIncurredClaimsPayableWithIssuerFundsAmount|" & _
    "17,netReinAmount|18,netRiskAdjustmentAmount|20,incurredClaimsPMPMQuantity|21,allowedClaimsPMPMQuantity|" & _
    "22,ehbPortionOfAllowedClaimsPMPMQuantity"
'Cell Mapping for InsurancePlanRateChangeTempVO
Public Const Matrix_IPRCT_VO As String = "20,basedInsurancePlanIdentifier|43,totalRateChangeQuantity|" & _
    "44,memberCostShareIncreaseQuantity|47,averageCurrentRatePerPMPMAmount|48,projectedMemberMonthsQuantity|" & _
    "15,avMetalValueQuantity|16,avPricingValueQuantity|21,exchangePlanIndicator|" & _
    "14,definingInsurancePlanBenefitMetalTierType|17,definingInsurancePlanCurrentStatusType|19,planName|18,planType|25,proposedRateEffectiveDate|" & _
    "26,rateChangeQuantity|27,rateCumulativeChangeQuantity|28,rateProjectedChangeQuantity"
    
Public Function convertXML()

    Dim ws1 As Worksheet
    Dim ws2 As Worksheet
    Dim addr As String
    Dim nodeName As String
    Dim objFile As DOMDocument
    Dim objOI As IXMLDOMProcessingInstruction
    Dim objTop As IXMLDOMNode
    Dim objMainSection As IXMLDOMElement
    Dim objSection As IXMLDOMElement
    Dim objSubSection As IXMLDOMElement
    Dim objElement As IXMLDOMElement
    Dim cellElement As IXMLDOMElement
    Dim cellVal As IXMLDOMElement
    Dim cellLocation As IXMLDOMElement
    Dim nameSpace As String
    Dim Matrix() As String
    Dim sTemp() As String
    Dim idx As Integer
    Dim rowIdx As Integer
    Dim cell As Range
    Dim prodIdx As Long
    Dim planIdx As Long
    Dim sTempValue As String
    Dim bNoZeroFill As Boolean
    Dim versionNum As String
    
    
    nameSpace = "http://vo.urr.oversight.ff.cms.hhs.gov"
    Set ws1 = ThisWorkbook.Sheets(ws1Name)
    Set ws2 = ThisWorkbook.Sheets(ws2Name)
        
    Set objFile = New DOMDocument
    objFile.async = False
    objFile.validateonparse = False
    
    'first check if the file exists
    Dim file_name As Variant
    file_name = Application.GetSaveAsFilename("UnifiedRateReviewSubmission", FileFilter:="XML File (*.xml), *xml")
    file_name = Replace(file_name, ".xml", "_" & Format(Date, "yyyymmdd") & Format(Time, "hms") & ".xml")
        
    If file_name = False Then
        Exit Function
    ElseIf Dir(file_name) <> "" Then
        Kill file_name
    End If
        
    objFile.Load (file_name)
    
    Set objOI = objFile.createProcessingInstruction("xml", "version='1.0'")
    objFile.appendChild objOI
        
    Set objTop = objFile.createNode(1, "insuranceRateForecastTempVO", nameSpace)
    objFile.appendChild objTop
    
    'get the version number
    versionNum = getVersion(ws1.Range("B1").text)

    'set version number in object
    Set objElement = objFile.createNode(1, "templateVersion", nameSpace)
    objElement.text = versionNum
    objTop.appendChild objElement
    
    'adding all elements for InsuranceRateForecastTempVO (fields from worksheet 1)
    Matrix = Split(Matrix_IRFT_VO, "|")
    
    idx = 0
    Do While idx <= UBound(Matrix)
        sTemp = Split(Matrix(idx), ",")
        addr = sTemp(0)
        nodeName = sTemp(1)
        Set cell = ws1.Range(addr).Cells
        If (nodeName = "experiencePeriodIndexRatePMPMQuantity") Then ' two digit precision required
            Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), Format(gValue(cell), "Fixed"), gFormula(cell))
        Else
            Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
        End If
        objTop.appendChild objElement
        idx = idx + 1
    Loop

    'adding elements for 0 to X BenefitCategoryAllowedClaimTempVO nodes (rows 25-29 from worksheet 1)
    Matrix = Split(Matrix_BCACT_VO, "|")
    
    For rowIdx = 24 To 29
        'checking to see if Benefit Category contains data
        If ws1.Cells(rowIdx, 5).value <> "" Then
            Set objSection = objFile.createNode(1, "collectedBenefitCategoryAllowedClaim", nameSpace)
            objTop.appendChild objSection
            idx = 0
            Do While idx <= UBound(Matrix)
                sTemp = Split(Matrix(idx), ",")
                addr = sTemp(0) & CStr(rowIdx)
                nodeName = sTemp(1)
                Set cell = ws1.Range(addr).Cells
                Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
                objSection.appendChild objElement
                idx = idx + 1
            Loop
        End If
    Next rowIdx
    
    'adding elements for InsurancePlanRateChange (totals in rows 43,44,47,48 from worksheet 2)
    Set objMainSection = objFile.createNode(1, "definedInsurancePlanRateChange", nameSpace)
    objTop.appendChild objMainSection
    For idx = 43 To 48
        If idx <> 45 And idx <> 46 Then
            addr = "F" & CStr(idx)
            Select Case idx
                Case 43
                    nodeName = "totalRateChangeQuantity"
                Case 44
                    nodeName = "memberCostShareIncreaseQuantity"
                Case 47
                    nodeName = "averageCurrentRatePerPMPMAmount"
                Case 48
                    nodeName = "projectedMemberMonthsQuantity"
            End Select
            Set cell = ws2.Range(addr).Cells
            Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
            objMainSection.appendChild objElement
        End If
    Next idx

        'adding elements for InsurancePlanPremiumComponentTempVO (section 2 totals from Worksheet 2)
        For idx = 34 To 42
            Set objSection = objFile.createNode(1, "definedInsurancePlanPremiumComponent", nameSpace)
            objMainSection.appendChild objSection
            addr = "F" & CStr(idx)
            nodeName = "changedRatePerPMPMQuantity"
            Set cell = ws2.Range(addr).Cells
            Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
            objSection.appendChild objElement
            
            addr = "E" & CStr(idx)
            nodeName = "definingRateChangeComponentType"
            Set cell = ws2.Range(addr).Cells
            Set objElement = MakeNode(objFile, nameSpace, nodeName, "", gValue(cell), "")
            objSection.appendChild objElement
        Next idx
    
    'Matrix used for next 2 sections
    Matrix = Split(Matrix_IRFSCST_VO, "|")

    'adding elements for InsuranceRateForecastSectionChangeSummaryTermpVO (section 3 totals from Worksheet 2)
    Set objSection = objFile.createNode(1, "definedInsuranceRateForecastSectionChangeSummary", nameSpace)
    objTop.appendChild objSection
    idx = 0
    Do While idx <= UBound(Matrix)
        sTemp = Split(Matrix(idx), ",")
        addr = "F" & CStr(ws2Section3Top + CInt(sTemp(0)) - 1)
        nodeName = sTemp(1)
        Set cell = ws2.Range(addr).Cells
        If (nodeName = "totalPremiumAmount") Then  ' two digit precision required
            Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), Format(gValue(cell), "Fixed"), gFormula(cell))
        Else
            Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
        End If
        
        objSection.appendChild objElement
        idx = idx + 1
    Loop
    nodeName = "definingInsuranceRateForecastSectionType"
    Set objElement = MakeNode(objFile, nameSpace, nodeName, "", "Section3Totals", "")
    objSection.appendChild objElement

    'adding elements for InsuranceRateForecastSectionChangeSummaryTermpVO (section 4 totals from Worksheet 2)
    Set objSection = objFile.createNode(1, "definedInsuranceRateForecastSectionChangeSummary", nameSpace)
    objTop.appendChild objSection
    idx = 0
    Do While idx <= UBound(Matrix)
        sTemp = Split(Matrix(idx), ",")
        addr = "F" & CStr(ws2Section4Top + CInt(sTemp(0)) - 1)
        nodeName = sTemp(1)
        Set cell = ws2.Range(addr).Cells
        If (nodeName = "totalPremiumAmount") Then  ' two digit precision required
            Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), Format(gValue(cell), "Fixed"), gFormula(cell))
        Else
            Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
        End If
        
        objSection.appendChild objElement
        idx = idx + 1
    Loop
    nodeName = "definingInsuranceRateForecastSectionType"
    Set objElement = MakeNode(objFile, nameSpace, nodeName, "", "Section4Totals", "")
    objSection.appendChild objElement
    
    'Adding Elements for Products
    FindProducts
    For prodIdx = 0 To UBound(productDetails)
        'adding elements for InsuranceProductRateChangeTempVO (1 for each product)
        Set objMainSection = objFile.createNode(1, "changedInsuranceProductRateChange", nameSpace)
        objTop.appendChild objMainSection
                
        addr = GetColAddress(productDetails(prodIdx).ws2Start) & "13"
        nodeName = "hiosInsuranceProductIdentifier"
        Set cell = ws2.Range(addr).Cells
        Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
        objMainSection.appendChild objElement
        
        addr = GetColAddress(productDetails(prodIdx).ws2Start) & "12"
        nodeName = "productName"
        Set cell = ws2.Range(addr).Cells
        Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
        objMainSection.appendChild objElement

        addr = GetColAddress(productDetails(prodIdx).ws2Start) & "29"
        nodeName = "weightedAverageProductRateChangePercentQuantity"
        Set cell = ws2.Range(addr).Cells
        Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormulaArray(cell))
        objMainSection.appendChild objElement
        
        'adding elements for InsuranceProductLifetimeLossTempVO
        For idx = 22 To 24
            Set objSection = objFile.createNode(1, "projectedInsuranceProductLifetimeLoss", nameSpace)
            objMainSection.appendChild objSection
            
            nodeName = "documentingPeriodCycleYearType"
            sTempValue = "Year - " & CStr(Abs(idx - 24))
            Set objElement = MakeNode(objFile, nameSpace, nodeName, "", sTempValue, "")
            objSection.appendChild objElement
            
            addr = GetColAddress(productDetails(prodIdx).ws2Start) & CStr(idx)
            nodeName = "rateChangePercentQuantity"
            Set cell = ws2.Range(addr).Cells
            Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
            objSection.appendChild objElement
        Next idx
        
        'adding elements for InsurancePlanRateChangeTempVO (one for each Plan in Product)
        For planIdx = productDetails(prodIdx).ws2Start To productDetails(prodIdx).ws2End
            Set objSection = objFile.createNode(1, "associatingInsurancePlanRateChange", nameSpace)
            objMainSection.appendChild objSection
            Matrix = Split(Matrix_IPRCT_VO, "|")
            idx = 0
            Do While idx <= UBound(Matrix)
                sTemp = Split(Matrix(idx), ",")
                addr = GetColAddress(planIdx) & sTemp(0)
                nodeName = sTemp(1)
                Set cell = ws2.Range(addr).Cells
                Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
                objSection.appendChild objElement
                idx = idx + 1
            Loop
            
            'adding elements for InsurancePlanPremiumComponentTempVO (section 2 for each Plan in a Product)
            For idx = 34 To 42
                Set objSubSection = objFile.createNode(1, "definedInsurancePlanPremiumComponent", nameSpace)
                objSection.appendChild objSubSection
                addr = GetColAddress(planIdx) & CStr(idx)
                nodeName = "changedRatePerPMPMQuantity"
                Set cell = ws2.Range(addr).Cells
                Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
                objSubSection.appendChild objElement
                
                addr = "E" & CStr(idx)
                nodeName = "definingRateChangeComponentType"
                Set cell = ws2.Range(addr).Cells
                Set objElement = MakeNode(objFile, nameSpace, nodeName, "", gValue(cell), "")
                objSubSection.appendChild objElement
            Next idx
            
            'Matrix used for next 2 sections
            Matrix = Split(Matrix_IPRCPT_VO, "|")
        
            'adding elements for InsurancePlanRateChangePeriodTempVO (section 3 from Worksheet 2)
            Set objSubSection = objFile.createNode(1, "projecedInsurancePlanRateChangePeriod", nameSpace)
            objSection.appendChild objSubSection
            idx = 0
            Do While idx <= UBound(Matrix)
                sTemp = Split(Matrix(idx), ",")
                addr = GetColAddress(planIdx) & CStr(ws2Section3Top + CInt(sTemp(0)) - 1)
                nodeName = sTemp(1)
                Set cell = ws2.Range(addr).Cells
                If ws2Section3Top + CInt(sTemp(0)) - 1 = 66 Or ws2Section3Top + CInt(sTemp(0)) - 1 = 67 Then
                    bNoZeroFill = True
                Else
                    bNoZeroFill = False
                End If
                If (nodeName = "totalPremiumAmount") Then  ' two digit precision required
                    Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), Format(gValue(cell), "Fixed"), gFormula(cell), bNoZeroFill)
                Else
                    Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell), bNoZeroFill)
                End If
                
                objSubSection.appendChild objElement
                idx = idx + 1
            Loop
            nodeName = "definingInsuranceRateCostPeriodType"
            Set objElement = MakeNode(objFile, nameSpace, nodeName, "", "Plan-Section3", "")
            objSubSection.appendChild objElement
        
            'adding elements for InsurancePlanRateChangePeriodTempVO (section 4 from Worksheet 2)
            Set objSubSection = objFile.createNode(1, "projecedInsurancePlanRateChangePeriod", nameSpace)
            objSection.appendChild objSubSection
            idx = 0
            Do While idx <= UBound(Matrix)
                sTemp = Split(Matrix(idx), ",")
                addr = GetColAddress(planIdx) & CStr(ws2Section4Top + CInt(sTemp(0)) - 1)
                nodeName = sTemp(1)
                Set cell = ws2.Range(addr).Cells
                If ws2Section3Top + CInt(sTemp(0)) - 1 = 92 Or ws2Section3Top + CInt(sTemp(0)) - 1 = 93 Then
                    bNoZeroFill = True
                Else
                    bNoZeroFill = False
                End If
                If (nodeName = "totalPremiumAmount") Then ' two digit precision required
                    Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), Format(gValue(cell), "Fixed"), gFormula(cell), bNoZeroFill)
                Else
                    Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell), bNoZeroFill)
                End If
                objSubSection.appendChild objElement
                idx = idx + 1
            Loop
            nodeName = "definingInsuranceRateCostPeriodType"
            Set objElement = MakeNode(objFile, nameSpace, nodeName, "", "Plan-Section4", "")
            objSubSection.appendChild objElement
                    
        Next planIdx
        
    Next prodIdx
    
    FormatXmlDocument objFile
    objFile.Save file_name
    
    MsgBox "This template has been exported to an xml file named: " & file_name
    
End Function


Public Function gValue(cell As Range) As String
    Dim sRet As String
    
    If IsError(cell) Then
        sRet = ""
    Else
        If Not IsEmpty(cell.value) Then
            sRet = Trim$(cell.value)
        Else
            sRet = ""
        End If
    End If
    gValue = sRet

End Function

Private Function gFormula(cell As Range) As String
    Dim sRet As String
    
    If IsError(cell) Then
        sRet = ""
    Else
        If Not IsEmpty(cell.value) Then
            sRet = Trim$(cell.Formula)
        Else
            sRet = ""
        End If
    End If
    gFormula = sRet

End Function

Private Function gFormulaArray(cell As Range) As String
    Dim sRet As String
    
    If IsError(cell) Then
        sRet = ""
    Else
        If Not IsEmpty(cell.value) Then
            sRet = Trim$(cell.FormulaArray)
        Else
            sRet = ""
        End If
    End If
    gFormulaArray = sRet

End Function

Private Function MakeNode(ByRef objFile As DOMDocument, nameSpace As String, nodeName As String, _
    cellAddress As String, cellValue As String, cellFormula As String, Optional NoZeroFill As Boolean = False) As IXMLDOMElement

    Dim newElement As IXMLDOMElement
    Dim cellAddressNode As IXMLDOMElement
    Dim cellValueNode As IXMLDOMElement
    Dim cellFormulaNode As IXMLDOMElement
    
    'creating node
    If Not NoZeroFill Then
        If cellValue = "" Then
            cellValue = "0"
        End If
    End If
    Set newElement = objFile.createNode(1, nodeName, nameSpace)
    'adding cellAddress sub element
    Set cellAddressNode = objFile.createNode(1, "cellLocation", nameSpace)
    cellAddressNode.text = cellAddress
    newElement.appendChild cellAddressNode
    'adding cellValue sub element
    Set cellValueNode = objFile.createNode(1, "cellValue", nameSpace)
    cellValueNode.text = cellValue
    newElement.appendChild cellValueNode
    'adding cellFormula sub element
    If Left$(cellFormula, 1) = "=" Then
        'stripping leading = from formulas
        cellFormula = Mid$(cellFormula, 2, Len(cellFormula) - 1)
    End If
    Set cellFormulaNode = objFile.createNode(1, "cellFormula", nameSpace)
    cellFormulaNode.text = cellFormula
    newElement.appendChild cellFormulaNode
    
    Set MakeNode = newElement

End Function

' Add formatting to the document.
Private Sub FormatXmlDocument(ByVal xml_doc As DOMDocument)
    FormatXmlNode xml_doc.DocumentElement, 0
End Sub

' Add formatting to this element. Indent it and add a
' carriage return before its children. Then recursively
' format the children with increased indentation.
Private Sub FormatXmlNode(ByVal node As IXMLDOMNode, ByVal _
    indent As Integer)
Dim child As IXMLDOMNode
Dim text_only As Boolean

    ' Do nothing if this is a text node.
    If TypeOf node Is IXMLDOMText Then Exit Sub

    ' See if this node contains only text.
    text_only = True
    If node.HasChildNodes Then
        For Each child In node.ChildNodes
            If Not (TypeOf child Is IXMLDOMText) Then
                text_only = False
                Exit For
            End If
        Next child
    End If

    ' Process child nodes.
    If node.HasChildNodes Then
        ' Add a carriage return before the children.
        If Not text_only Then
            node.InsertBefore _
                node.OwnerDocument.createTextNode(vbCrLf), _
                node.FirstChild
        End If

        ' Format the children.
        For Each child In node.ChildNodes
            FormatXmlNode child, indent + 2
        Next child
    End If

    ' Format this element.
    If indent > 0 Then
        ' Indent before this element.
        node.ParentNode.InsertBefore _
            node.OwnerDocument.createTextNode(Space$(indent)), _
 _
            node

        ' Indent after the last child node.
        If Not text_only Then _
            node.appendChild _
                node.OwnerDocument.createTextNode(Space$(indent))

        ' Add a carriage return after this node.
        If node.NextSibling Is Nothing Then
            node.ParentNode.appendChild _
                node.OwnerDocument.createTextNode(vbCrLf)
        Else
            node.ParentNode.InsertBefore _
                node.OwnerDocument.createTextNode(vbCrLf), _
                node.NextSibling
        End If
    End If
End Sub

'Private Sub LoadXMLSheet(objXML As DOMDocument)
'
'    Dim sh As Worksheet
'    Set sh = Sheets(XMLSheetName)
'    Dim XMLStruct As String
'    Dim lRow As Long
'    Dim lByte As Long
'
'    sh.Activate
'    sh.Cells.Select
'    Selection.ClearContents
'    sh.Range("A1").Select
'
'    XMLStruct = objXML.XML
'    lRow = 1
'    lByte = 1
'
'    Do While lByte + 1023 <= Len(XMLStruct)
'        sh.Cells(lRow, 1).Value = "'" & Mid$(XMLStruct, lByte, 1024) & "'"
'        lRow = lRow + 1
'        lByte = lByte + 1024
'    Loop
'    If lByte < Len(XMLStruct) Then
'        sh.Cells(lRow, 1).Value = "'" & Mid$(XMLStruct, lByte, (Len(XMLStruct) - lByte) + 1) & "'"
'    End If
'
'End Sub





' InQuest injected base64 decoded content
' xZ+y
' ^t	e
' ^t	e
' ^tLiz
' ^t	e
' fz{l<
' xZ+>
' 1:-jP&
' 1:-jP&
' 1:-jP&
' fz{O0
' fz{l<
' 1:-jP&
' .j{b
' .j{b
' xZ+y
' $.j{b
' .j{b
' z{b~'
' .j{b
' ^t(Z
' xZ+y
' .j{b
' 'z{S
' xZ+y
' *'O*^
' *,"{.

INQUEST-PP=macro
