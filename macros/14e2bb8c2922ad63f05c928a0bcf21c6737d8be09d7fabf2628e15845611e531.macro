Attribute VB_Name = "Agenda"
' --------------------------------------------------------------------------------------
' WORD 97 WIZARD
' Agenda Wizard Specific Code
' --------------------------------------------------------------------------------------
Option Explicit

' --------------------------------------------------------------------------------------
' CONSTANT DECLARATIONS

' The following Autotext and Bookmark names MUST match names in Autotext entries

' Autotext Names
Public Const strAUTOTEXT_MINUTES            As String = "Minutes"
Public Const strAUTOTEXT_BOXES              As String = "Formal"
Public Const strAUTOTEXT_MODERN             As String = "Informal"
Public Const strAUTOTEXT_STANDARD           As String = "Standard"
Public Const strA4                          As String = "A4"

' Bookmark Names in Autotext
Public Const strBKMK_HEADING                As String = "Heading"
Public Const strBKMK_TITLE                  As String = "AgendaTitle"
Public Const strBKMK_NAMES                  As String = "Names"
Public Const strBKMK_ATTENDEES              As String = "Attendees"
Public Const strBKMK_TOPICS                 As String = "Topics"
Public Const strBKMK_ADDL_INFO              As String = "AdditionalInformation"
Public Const strBKMK_ITEMS                  As String = "AgendaItems"
Public Const strBKMK_OBSERVERS              As String = "Observers"
Public Const strBKMK_LOGISTICS              As String = "Logistics"
Public Const strBKMK_ADDITIONAL             As String = "Additional"
Public Const strBKMK_M_HEADING              As String = "MinuteHeading"
Public Const strBKMK_M_ADDITIONAL           As String = "MinuteAdditional"
Public Const strBKMK_M_DISCUSSION            As String = "MinuteDiscussion"
Public Const strBKMK_M_CONCLUSION           As String = "MinuteConclusion"
Public Const strBKMK_M_ITEMS                As String = "MinuteActionItems"
Public Const strBKMK_M_PERSON               As String = "MinutePersonResponsible"
Public Const strBKMK_M_DEADLINE             As String = "MinuteDeadline"
Public Const strBKMK_M_TOPIC                As String = "MinuteTopic"
Public Const strBKMK_M_SECTION              As String = "MinuteTopicSection"

' Mail dialog strings
Public Const strMAIL_PROMPT                 As String = "Wie m|fffd|chten Sie die Agenda versenden?"
Public Const strMAIL_CAPTION                As String = "Agenda versenden"

' Banter strings
Public Const strEMPTY_MACRO                 As String = "EmptyMacro "
Public Const strHELP_TOPIC                  As String = "Klicken Sie an die Stelle, an der Sie Text eingeben m|fffd|chten und beginnen Sie zu schreiben. Um zur n|fffd|chsten |fffd|berschrift innerhalb einer Zelle zu gelangen, dr|fffd|cken Sie die Eingabetaste. Um zur n|fffd|chsten Zelle zu gelangen, dr|fffd|cken Sie die Tabulatortaste."
Public Const strCREATING_MINUTES_FORM       As String = "Erstelle Protokollformular..."

' Document Label Strings
Public Const strTIME_FORMAT                 As String = "H:mm "
Public Const strTO                          As String = " bis "
Public Const strINFO_BOXES                  As String = "Sonstige Informationen"
Public Const strINFO_STANDARD               As String = "Zus|fffd|tzliche Information"
Public Const strCALLED_BY                   As String = "Besprechung einberufen von:"
Public Const strMEETING_TYPE                As String = "Art der Besprechung:"
Public Const strFACILITATOR                 As String = "Leitung:"
Public Const strNOTETAKER                   As String = "Protokoll:"
Public Const strTIMEKEEPER                  As String = "Zeiteinteilung:"
Public Const strATTENDEES                   As String = "Teilnehmer:"
Public Const strREAD                        As String = "Bitte vorbereiten:"
Public Const strBRING                       As String = "Bitte mitbringen:"
Public Const strOBSERVERS                   As String = "Gastteilnehmer:"
Public Const strPERSONS                     As String = "Fachspezialisten:"
Public Const strNOTES                       As String = "Anmerkungen:"
Public Const strDISCUSSION                  As String = "Diskussionspunkte:"
Public Const strCONCLUSIONS                 As String = "Beschl|fffd|sse:"
Public Const strITEMS                       As String = "Zu erledigen:"
Public Const strRESPONSIBLE                 As String = "Verantwortlich:"
Public Const strDEADLINE                    As String = "Erledigen bis:"
Public Const strPRE_HOUR                    As String = ""          ' Singular units
Public Const strPOST_HOUR                   As String = " Stunde"     ' "
Public Const strPRE_MINUTE                  As String = ""          ' "
Public Const strPOST_MINUTE                 As String = " Minute"   ' "
Public Const strPRE_HOURS                   As String = ""          ' Plural units
Public Const strPOST_HOURS                  As String = " Stunden"    ' "
Public Const strPRE_MINUTES                 As String = ""          ' "
Public Const strPOST_MINUTES                As String = " Minuten"  ' "
Public Const strTIME_DELIMITER              As String = ", "        ' Between hours and minutes
' Note: to report minutes before hours, locate "INVERT HOURS AND MINUTES" in CreateNewDoc

Public Const strCALL_BACK_HEADING           As String = "M|fffd|chten Sie die Agenda ver|fffd|ndern?"
' --------------------------------------------------------------------------------------
' DO NOT LOCALIZE ANY CODE BEYOND THIS POINT EXCEPT FOR InitWizardName and InitWizardStrings
' --------------------------------------------------------------------------------------

' Memo Wizard  Document and Form Control Related Constants
Public Const wzPAGE_START                   As Integer = 0
Public Const wzPAGE_STYLE                   As Integer = 1
Public Const wzPAGE_DETAILS                 As Integer = 2
Public Const wzPAGE_HEADINGS                As Integer = 3
Public Const wzPAGE_NAMES                   As Integer = 4
Public Const wzPAGE_TOPICS                  As Integer = 5
Public Const wzPAGE_MINUTES                 As Integer = 6
Public Const wzPAGE_FINISH                  As Integer = 7

' Agenda Style Constants
Public Const wzBOXES                        As Integer = 0
Public Const wzMODERN                       As Integer = 1
Public Const wzSTANDARD                     As Integer = 2

Public Const iMAX_PANEL                     As Integer = 7  ' Number of last panel in MultiPage (First=0)
Public rgstrAssistantMsg(iMAX_PANEL + 1)    As String       ' as many as there are states
Public Const iCALL_BACK_COUNT               As Integer = 3  ' Number of items in CallBackBalloon (First=1)
Public rgstrCallBackMsg(iCALL_BACK_COUNT)   As String

Public Const strPOST_WIZ_BLN                As String = "Agenda Post Wizard Balloon"
' --------------------------------------------------------------------------------------
' VARIABLE DECLARATIONS

' General
Public formSend                             As formMailFax ' Instance of Send by Mail/FAX form
Public rgstrTopics(3)                       As String
Public objBkmks                             As Bookmarks

Public iAgendaStyle                         As Integer

Public Sub InitWizardName(fDummy As Boolean)
    ' Localize these strings:
    strWizShortName = "Agenda"
    strWizLongName = "Agenda-Assistent"
    strWizName = strWizLongName
End Sub


Public Sub InitWizardStrings()
    On Error GoTo FatalError
    
    ' Localize these strings:
    ' Wizard Panel Help Tips
    rgstrAssistantMsg(0) = "Der Agenda-Assistent hilft Ihnen, eine detailierte Agenda f|fffd|r eine Besprechung mit optionalen Seiten f|fffd|r das Protokoll zu erstellen. Sie werden auch dabei unterst|fffd|tzt, die Agenda per E-Mail oder Fax zu versenden."
    rgstrAssistantMsg(1) = "W|fffd|hlen Sie einen Stil f|fffd|r die Agenda aus. Wenn Sie den Stil sp|fffd|ter ver|fffd|ndern m|fffd|chten, k|fffd|nnen Sie in diesen Dialog zur|fffd|ckkehren, nachdem der Assistent durchgelaufen ist."
    rgstrAssistantMsg(2) = "Wenn Sie diese Details sp|fffd|ter ver|fffd|ndern m|fffd|chten, k|fffd|nnen Sie Informationen hinzuf|fffd|gen, entfernen oder ver|fffd|ndern nachdem der Assistent durchgelaufen ist."
    rgstrAssistantMsg(3) = "Kreuzen Sie die Kontrollk|fffd|stchen der Elemente an, die in der Agenda erscheinen sollen. Kreuzen Sie nur die Elemente an, die in der Agenda erscheinen sollen."
    rgstrAssistantMsg(4) = "Die Themen, die Sie ausw|fffd|hlen, werden zur Agenda hinzugef|fffd|gt. Neben den |fffd|berschriften ist Platz f|fffd|r die Informationen. I.d.R. nehmen Teilnehmer aktiv an der Besprechung teil, Gastteilnehmer sind passive Beobachter, Fachspezialisten geben Hintergrundinformationen zu bestimmten Themen."
    rgstrAssistantMsg(5) = "Wenn Sie den Zeitrahmen nicht angeben m|fffd|chten/k|fffd|nnen, lassen Sie das Eingabefeld unter 'Minuten geplant' frei. Wenn der Assistent durchgelaufen ist, k|fffd|nnen Sie Themen hinzuf|fffd|gen, bearbeiten oder die Reihenfolge der Themen ver|fffd|ndern."
    rgstrAssistantMsg(6) = "Klicken Sie auf 'Ja' um zu jedem Besprechungspunkt Platz f|fffd|r das Protokoll zu lassen."
    rgstrAssistantMsg(7) = "Klicken Sie auf '<Zur|fffd|ck', um Einstellungen u ver|fffd|ndern."
    
    ' Post Wizard Menu Items
    rgstrCallBackMsg(0) = "Text eingeben"
    rgstrCallBackMsg(1) = "Die Agenda versenden"
    rgstrCallBackMsg(2) = "Hilfe zu einem anderen Thema..."
    
    rgstrTopics(wzBOXES) = "----- Tagesordnung -----"
    rgstrTopics(wzMODERN) = "Tagesordnung"
    rgstrTopics(wzSTANDARD) = "Tagesordnung" 'Agenda
    

' --------------------------------------------------------------------------------------
'*******************   DO NOT LOCALIZE ANY ANY CODE BEYOND THIS POINT *****************
' --------------------------------------------------------------------------------------
    strRegSettingsKey = strREG_SETTINGS_BASE_KEY & "Agenda Wizard"

    Exit Sub
    
FatalError:
    ReportError Err
End Sub  ' InitWizardStrings


Public Sub InitWizard(fDummy As Boolean)
    On Error GoTo FatalError
    
    ' Global Vars
    iCurrentPanel = 0
    
    ' Initialize strings
    InitWizardStrings
    
    ' Create a new instance of the form
    Set formWizard = New formWizDlg
    If formWizard Is Nothing Then GoTo FatalError
    formWizard.lblWizName1.Caption = " " & strWizLongName & " "
    
    Exit Sub
    
FatalError:
    DisplayErrorMsg strERR_INIT_FORM
    ReportError Err
End Sub


' fDummy prevents sub from appearing in Word Tools/Macro list
Public Sub SaveDialogValues(fDummy As Boolean)
    Dim i As Integer
    Dim iNumTopics As Integer
    
    On Error GoTo FatalError
    
    ' Display status
    Application.ScreenUpdating = False
    StatusBar = strSAVE_SETTINGS
    System.Cursor = wdCursorWait
    
    ' Assistant
    System.PrivateProfileString("", strREG_SETTINGS_BASE_KEY, strREG_ASSISTANT_TIME_STAMP) = Format$(Now, "General Date")
    StoreValPref strREG_ASSISTANT_HELP, iLocalState
    
    ' Page 1
    StoreValPref "Agenda Style", iAgendaStyle

    ' Page 2
    StorePref "Date", formWizard.txtDate.Text
    StorePref "Title", formWizard.txtTitle.Text
    StorePref "Location", formWizard.txtLocation.Text

    ' Page 3
    StoreValPref "Meeting Type", formWizard.chkMeetingType.Value
    StoreValPref "Read", formWizard.chkRead.Value
    StoreValPref "Bring", formWizard.chkBring.Value
    StoreValPref "Notes", formWizard.chkNotes.Value
    
    ' Page 4
    StoreValPref "Called By", formWizard.chkCalledBy.Value
    StoreValPref "Facilitator", formWizard.chkFacilitator.Value
    StoreValPref "Notetaker", formWizard.chkNotetaker.Value
    StoreValPref "Timekeeper", formWizard.chkTimekeeper.Value
    StoreValPref "Attendees", formWizard.chkAttendees.Value
    StoreValPref "Observers", formWizard.chkObservers.Value
    StoreValPref "Resource", formWizard.chkResource.Value
    
    ' Page 5
    With formWizard.lstTopics
        iNumTopics = .ListCount
        StoreValPref "NumTopics", iNumTopics
        For i = 0 To iNumTopics - 1
            StorePref "Topic" & i, .List(i, 0)
            StorePref "Presenter" & i, .List(i, 1)
            StorePref "Duration" & i, .List(i, 2)
        Next i
    End With

    ' Page 6
    StoreValPref "Include Minutes", formWizard.optYesMinutes.Value
    
    ' Done
    StatusBar = ""
    System.Cursor = wdCursorNormal
    fSettingsSaved = True
    Application.ScreenUpdating = True
    Exit Sub
    
FatalError:
    ReportError Err
End Sub  ' SaveNewWizardValues


Public Sub RestoreDialogValues(fDummy As Boolean)
    Dim i As Integer
    Dim iNumTopics As Integer
    Dim strTemp As String
    
    On Error GoTo FatalError
    
    ' Display status
    Application.ScreenUpdating = False
    System.Cursor = wdCursorWait
    StatusBar = strRST_SETTINGS

    ' Page 1
    iAgendaStyle = IRestorePref("Agenda Style", 0)
    Select Case iAgendaStyle
        Case wzBOXES
            formWizard.optBoxes.Value = True
            formWizard.shpBoxesShadow.Visible = True
        Case wzMODERN
            formWizard.optModern.Value = True
            formWizard.shpModernShadow.Visible = True
        Case wzSTANDARD
            formWizard.optStandard.Value = True
            formWizard.shpStandardShadow.Visible = True
        Case Else
            iAgendaStyle = wzBOXES
            formWizard.optBoxes.Value = True
            formWizard.shpBoxesShadow.Visible = True
    End Select

    ' Page 2
    formWizard.txtDate.Text = Date
    formWizard.txtTime.Text = Format(Time, strTIME_FORMAT)
    formWizard.txtTitle.Text = StrRestorePref("Title", "")
    formWizard.txtLocation.Text = StrRestorePref("Location", "")
    
    ' Page 3
    formWizard.chkMeetingType.Value = FRestorePref("Meeting Type", True)
    formWizard.chkRead.Value = FRestorePref("Read", True)
    formWizard.chkBring.Value = FRestorePref("Bring", True)
    formWizard.chkNotes.Value = FRestorePref("Notes", True)
    
    ' Page 4
    formWizard.chkCalledBy.Value = FRestorePref("Called By", True)
    formWizard.chkFacilitator.Value = FRestorePref("Facilitator", True)
    formWizard.chkNotetaker.Value = FRestorePref("Notetaker", True)
    formWizard.chkTimekeeper.Value = FRestorePref("Timekeeper", True)
    formWizard.chkAttendees.Value = FRestorePref("Attendees", True)
    formWizard.chkObservers.Value = FRestorePref("Observers", True)
    formWizard.chkResource.Value = FRestorePref("Resource", True)
    
    ' Page 5
    iNumTopics = IRestorePref("NumTopics", 0)
    With formWizard.lstTopics
        For i = 0 To iNumTopics - 1
            ' Insert topic into listbox
            strTemp = StrRestorePref("Topic" & i, "")
            .AddItem strTemp
            .List(i, 1) = StrRestorePref("Presenter" & i, "")
            .List(i, 2) = StrRestorePref("Duration" & i, "")
        Next i
    End With

    ' Page 6
    If FRestorePref("Include Minutes", True) Then
        formWizard.optYesMinutes.Value = True
    Else
        formWizard.optNoMinutes.Value = True
    End If
    
    StatusBar = ""
    fSettingsRestored = True
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True
    Exit Sub
FatalError:
    ReportError Err

End Sub


' fDummy prevents sub from appearing in Word Tools/Macro list
Public Sub CreateNewDoc(fDummy As Boolean)
    Dim i As Integer
    Dim j As Integer
    Dim objRow As Row
    Dim iNumTopics As Integer
    Dim strLogistics As String
    Dim strEndTime As String
    Dim strAgendaCaption As String
    Dim strAgendaTitle As String
    Dim strAgendaDate As String
    Dim strBreak As String
    Dim objTopicBuffer As Range
    Dim iNumChecked As Integer
    Dim sTime               As Single
    Dim strTemp             As String
    Dim strTime             As String
    
    Dim objLstTopics        As ListBox
    Dim rgstrLstItems()     As String

    
    On Error GoTo FatalError
    Application.ScreenUpdating = False
    
    ' Insert Agenda Autotext
    If Not FApplyAgendaStyle(False) Then GoTo FatalError

    ' Let user know we're busy
    StatusBar = strCREATING_DOC
    System.Cursor = wdCursorWait
    
    Set objLstTopics = formWizard.lstTopics
    
    ' Initialize topics array and meeting time
    iNumTopics = objLstTopics.ListCount
    sTime = 0
    ReDim rgstrLstItems(iNumTopics, 3)
    'initialize this array with the list items
    For i = 0 To iNumTopics - 1
        If iAgendaStyle = wzMODERN Then
            strTemp = objLstTopics.List(i, 2)
            sTime = sTime + Val(strTemp)
            rgstrLstItems(i, 0) = strTemp
            rgstrLstItems(i, 1) = objLstTopics.List(i, 0)
            rgstrLstItems(i, 2) = objLstTopics.List(i, 1)
        Else
            strTemp = objLstTopics.List(i, 2)
            sTime = sTime + Val(strTemp)
            rgstrLstItems(i, 0) = objLstTopics.List(i, 0)
            rgstrLstItems(i, 1) = objLstTopics.List(i, 1)
            rgstrLstItems(i, 2) = strTemp
        End If
    Next i
    
    Set objBkmks = ActiveDocument.Bookmarks
    ' Create Doc...

    ' Agenda Title
    strAgendaTitle = formWizard.txtTitle.Text
    strAgendaDate = formWizard.txtDate.Text
    objBkmks(strBKMK_TITLE).Range.Text = strAgendaTitle
    strTime = StrGetMinutesTime(sTime)
    
    strLogistics = strAgendaDate & vbCr & strTime & formWizard.txtLocation.Text
    Set objActiveRange = objBkmks(strBKMK_LOGISTICS).Range
    objActiveRange.Text = strLogistics
    
    objActiveRange.Collapse wdCollapseEnd

    objActiveRange.Move wdCell, 2
    If iAgendaStyle = wzSTANDARD Then objActiveRange.Move wdCell
    
    'we are now in the first table.
    iNumChecked = 0
    If formWizard.chkCalledBy.Value Then
        objActiveRange.Text = strCALLED_BY
        objActiveRange.Move wdCell, 2
        iNumChecked = iNumChecked + 1
    End If
    If formWizard.chkMeetingType.Value Then
        objActiveRange.Text = strMEETING_TYPE
        objActiveRange.Move wdCell, 2
        iNumChecked = iNumChecked + 1
    End If
    If formWizard.chkFacilitator.Value Then
            objActiveRange.Text = strFACILITATOR
        objActiveRange.Move wdCell, 2
        iNumChecked = iNumChecked + 1
    End If
    If formWizard.chkNotetaker.Value Then
        objActiveRange.Text = strNOTETAKER
        objActiveRange.Move wdCell, 2
        iNumChecked = iNumChecked + 1
    End If
    If formWizard.chkTimekeeper.Value Then
        objActiveRange.Text = strTIMEKEEPER
        objActiveRange.Move wdCell, 2
        iNumChecked = iNumChecked + 1
    End If
    
    If iNumChecked = 5 Then
    'this will make the range to be in the first cell of the next table
        Select Case iAgendaStyle
            Case wzMODERN
                objActiveRange.Move wdCell
            Case wzBOXES
                objActiveRange.Move wdCell, 3
            Case wzSTANDARD
                objActiveRange.Move wdCell, 4
        End Select
    Else 'need to delete some cells
        If iAgendaStyle <> wzMODERN Then '4 columns in each row
            i = iNumChecked Mod 2
            If i Then 'move 2 cells to go to a fresh row
                objActiveRange.Move wdCell, 2
            End If
        End If
        'if modern already in a new row
        objActiveRange.End = objBkmks(strBKMK_NAMES).Range.End
        objActiveRange.Rows.Delete
        objActiveRange.Move wdCell
        If iAgendaStyle = wzSTANDARD Then objActiveRange.Move wdCell
    End If

    'objActiveRange is now in the first cell of the Attendees bookmark cells
    iNumChecked = 0
    If formWizard.chkAttendees.Value Then
        objActiveRange.Text = strATTENDEES
        objActiveRange.Move wdCell, 2
        iNumChecked = iNumChecked + 1
    End If
    If formWizard.chkRead.Value Then
    objActiveRange.Text = strREAD
        objActiveRange.Move wdCell, 2
        iNumChecked = iNumChecked + 1
    End If
    If formWizard.chkBring.Value Then
        objActiveRange.Text = strBRING
        objActiveRange.Move wdCell, 2
        iNumChecked = iNumChecked + 1
    End If
    
    If iNumChecked <> 3 Then
        'some rows need to be deleted
        objActiveRange.End = objBkmks(strBKMK_ATTENDEES).Range.End
        objActiveRange.Rows.Delete
    End If

    If iAgendaStyle = wzMODERN Then
        objActiveRange.Move wdCell, 2
    Else
        objActiveRange.Move wdCell
    End If
    
    objActiveRange.Text = rgstrTopics(iAgendaStyle)
    Set objActiveRange = objBkmks(strBKMK_ADDL_INFO).Range
    
    Select Case iAgendaStyle
        Case wzBOXES
            objActiveRange.Text = strINFO_BOXES
            objActiveRange.Move wdCell

        Case wzSTANDARD
            objActiveRange.Text = strINFO_STANDARD
            objActiveRange.Move wdCell, 2
    End Select
    iNumChecked = 0

    If formWizard.chkObservers.Value Then
        objActiveRange.Text = strOBSERVERS
        objActiveRange.Move wdCell, 2
        iNumChecked = iNumChecked + 1
    End If
    If formWizard.chkResource.Value Then
        objActiveRange.Text = strPERSONS
        objActiveRange.Move wdCell, 2
        iNumChecked = iNumChecked + 1
    End If
    If formWizard.chkNotes.Value Then
        objActiveRange.Text = strNOTES
        objActiveRange.Move wdCell, 2
        iNumChecked = iNumChecked + 1
    End If
    
    If iNumChecked <> 3 Then 'need to delete rows
        objActiveRange.End = objBkmks(strBKMK_OBSERVERS).Range.End
        objActiveRange.Rows.Delete
        If iAgendaStyle = wzMODERN Then objActiveRange.Tables(1).Borders(wdBorderBottom) = True
    End If

    Set objActiveRange = objBkmks(strBKMK_ITEMS).Range
    objActiveRange.Select
    Selection.Collapse wdCollapseStart

    If iNumTopics > 1 Then WordBasic.TableInsertRow iNumTopics - 1
    Selection.Collapse wdCollapseStart
    ' Insert topic strings

    For i = 0 To iNumTopics - 1
        Selection.Text = rgstrLstItems(i, 0)
        Selection.Move wdCell
        Selection.Text = rgstrLstItems(i, 1)
        Selection.Move wdCell
        Selection.Text = rgstrLstItems(i, 2)
        Selection.Move wdCell
    Next i

    ' Include Minutes?
    If formWizard.optYesMinutes.Value Then
        ' Insert Page Break
        Set objActiveRange = ActiveDocument.Content
        objActiveRange.Collapse wdCollapseEnd
        objActiveRange.InsertBreak Type:=wdPageBreak

        objActiveRange.Collapse wdCollapseEnd

        ' Insert Minutes Autotext Table
        If Not FApplyAgendaStyle(True) Then GoTo FatalError
        StatusBar = strCREATING_MINUTES_FORM
        ' Insert Wizard Specific text labels
        objBkmks(strBKMK_M_TOPIC).Range.Text = rgstrTopics(iAgendaStyle)
        
        ' Copy Heading from Agenda Table
        Set objActiveRange = objBkmks(strBKMK_M_HEADING).Range
        objActiveRange.Rows(1).Delete
        objActiveRange.FormattedText = objBkmks(strBKMK_HEADING).Range.FormattedText
        
        
        ' Copy Additional from Agenda Table
        Set objActiveRange = objBkmks(strBKMK_M_ADDITIONAL).Range
        objActiveRange.FormattedText = objBkmks(strBKMK_ADDITIONAL).Range.FormattedText
        objActiveRange.Collapse wdCollapseEnd
        'delete the extra paragraph mark
        With objActiveRange
            .End = .Start + 1
            .Delete
        End With
        
        ' Insert common topic text labels
        objBkmks(strBKMK_M_CONCLUSION).Range.Text = strCONCLUSIONS
        objBkmks(strBKMK_M_DISCUSSION).Range.Text = strDISCUSSION
        objBkmks(strBKMK_M_ITEMS).Range.Text = strITEMS
        objBkmks(strBKMK_M_PERSON).Range.Text = strRESPONSIBLE
        objBkmks(strBKMK_M_DEADLINE).Range.Text = strDEADLINE
    
        ' Keep topic section together
        objBkmks(strBKMK_M_SECTION).Range.Paragraphs.KeepWithNext = True
        
        ' Get topics buffer
        Set objTopicBuffer = objBkmks(strBKMK_M_SECTION).Range.Duplicate
        objTopicBuffer.Cells(1).Range.Select
        
        ' Label First Topic
        For j = 0 To 2
            Selection.Text = rgstrLstItems(0, j)
            Selection.Move wdCell
        Next j
        
        ' Insert each additional topic, starting with last
        For i = iNumTopics - 1 To 1 Step -1
            ' Set insertion point
            Set objActiveRange = objBkmks(strBKMK_M_ADDITIONAL).Range
            objActiveRange.Collapse wdCollapseStart
            
            ' Insert section break
            objActiveRange.InsertBreak Type:=wdSectionBreakContinuous
            objActiveRange.Collapse wdCollapseEnd
            
            ' Insert buffer
            objActiveRange.FormattedText = objTopicBuffer.FormattedText
            objActiveRange.Collapse wdCollapseStart
            
            ' Label Topic Item
            objActiveRange.Cells(1).Range.Select
            For j = 0 To 2
                Selection.Text = rgstrLstItems(i, j)
                Selection.MoveRight wdCell
            Next j
        Next i
                    
    End If

    If iNumTopics Then
        WordBasic.FileSummaryInfo Title:=strAgendaTitle, Subject:=formWizard.lstTopics.List(0, 0)
    Else
        WordBasic.FileSummaryInfo Title:=strAgendaTitle
    End If
    
    ' Window Caption
    If Len(strAgendaTitle) Then
        strAgendaCaption = ": " & strAgendaTitle
        strBreak = ", "
    Else
        strAgendaCaption = ""
        strBreak = ": "
    End If
    If Len(strAgendaDate) Then strAgendaCaption = strAgendaCaption & strBreak & strAgendaDate
    
    objBkmks(strBKMK_HEADING).Delete
    objBkmks(strBKMK_ADDITIONAL).Delete
    objBkmks(strBKMK_ITEMS).Delete
    
    ' Final settings
    With ActiveDocument
        With .Content
            .SpellingChecked = True
            .GrammarChecked = True
        End With
        .UndoClear
    End With
    
    With ActiveWindow
        .Caption = .Caption & " - " & strWizShortName & strAgendaCaption
        .View.TableGridlines = False
    End With
    
    ' Show to user
    Selection.HomeKey wdStory

    Exit Sub
    
FatalError:
    ReportError Err
End Sub ' CreateNewDoc
Private Function StrGetMinutesTime(sTime As Single) As String
Dim strStart As String
Dim strTime As String
Dim sHours As Single
Dim strHours As String
Dim sMinutes As Single
Dim strMinutes As String
    
    On Error GoTo ErrDate
    
    strStart = formWizard.txtTime.Text
    strTime = ""
    If IsDate(strStart) Then
        ' Starting Time To Ending Time
        strTime = Format(CDate(strStart), strTIME_FORMAT)
        If sTime Then strTime = strTime & strTO & Format(DateAdd("n", sTime, CDate(strStart)), strTIME_FORMAT)
    ElseIf sTime Then
        ' Elapsed time in hours and minutes
        sHours = sTime \ 60
        sMinutes = sTime - sHours * 60
        
        ' Build hours string
        Select Case sHours
            Case 0 ' Minutes only
                strHours = ""
            Case 1 ' One Hour
                strHours = strPRE_HOUR & "1" & strPOST_HOUR
            Case Else ' Hours
                strHours = strPRE_HOURS & CStr(sHours) & strPOST_HOURS
        End Select
        
        ' Build minutes string
        Select Case sMinutes
            Case 0 ' Hours only
                strMinutes = ""
            Case 1 ' One Minute
                strMinutes = strPRE_MINUTE & "1" & strPOST_MINUTE
            Case Else ' Minutes
                strMinutes = strPRE_MINUTES & CStr(sMinutes) & strPOST_MINUTES
        End Select
        
        If (Len(strMinutes) <> 0) And (Len(strHours) <> 0) Then
            ' both hours AND minutes
            strTime = strHours & strTIME_DELIMITER & strMinutes
            ' INVERT HOURS AND MINUTES use following line to specify minutes before hours
            'strTime = strMinutes & strTIME_DELIMITER & strHours
        Else
            ' only hours OR minutes, so order is not important
            strTime = strHours & strMinutes
        End If
    End If
    If Len(strTime) Then strTime = strTime & vbCr
    
    StrGetMinutesTime = strTime
    Exit Function
ErrDate:
    Resume Next
End Function


Public Function FApplyAgendaStyle(fMinutes As Boolean) As Boolean
    Dim strAutoTextName As String
    
    On Error GoTo TemplateNotFound

    StatusBar = strAPPLYING

    ' Which AutoText?
    If fMinutes Then
        strAutoTextName = strAUTOTEXT_MINUTES & CStr(iAgendaStyle)
    Else
        Select Case iAgendaStyle
        Case wzBOXES
            strAutoTextName = strAUTOTEXT_BOXES
        Case wzMODERN
            strAutoTextName = strAUTOTEXT_MODERN
        Case wzSTANDARD
            strAutoTextName = strAUTOTEXT_STANDARD
        Case Else
            iAgendaStyle = wzBOXES
            strAutoTextName = strAUTOTEXT_BOXES
        End Select
    End If
  
    ' Insert the AutoText
    Set objActiveRange = objWizTemplate.AutoTextEntries(strAutoTextName).Insert(objActiveRange, True)
    objActiveRange.Collapse wdCollapseStart
    
    StatusBar = ""
    FApplyAgendaStyle = True
    Exit Function
    
TemplateNotFound:
    DisplayErrorMsg strERR_AUTOTEXT_NOT_FOUND
    FApplyAgendaStyle = False
End Function


Public Sub InitCallBack(fDummy As Boolean)
    Dim i As Integer
    Dim objCallBackLabels As BalloonLabels

    On Error GoTo ErrorCallBack
    
    If Not (fBlnInitialized) Then
    
        Set objPostWizBln = Assistant.NewBalloon
        fBlnInitialized = True
        With objPostWizBln
            .Heading = strCALL_BACK_HEADING
            .Mode = msoModeModeless
            .Button = msoButtonSetCancel
            .BalloonType = msoBalloonTypeButtons
            .Callback = "Agenda.fnCallBack"
        End With
    
        Set objCallBackLabels = objPostWizBln.Labels
        objCallBackLabels.Count = iCALL_BACK_COUNT
        For i = 1 To iCALL_BACK_COUNT
            objCallBackLabels.Item(i).Text = rgstrCallBackMsg(i - 1)
        Next i
    End If
    
    objPostWizBln.Show

    If (Assistant.BalloonError) Then GoTo ErrorCallBack
    
    fPostWizBlnOpen = True
    Set objDocBln = ActiveDocument
    Set clsBln.app = Application
    ActiveDocument.Variables.Add strPOST_WIZ_BLN, "1"
    
    Exit Sub
    
ErrorCallBack:
    DisplayErrorMsg strERR_INIT_CALL_BACK
    fPostWizBlnOpen = False
    Set objDocBln = ActiveDocument
    Set clsBln.app = Application
    ActiveDocument.Variables.Add strPOST_WIZ_BLN, "0"
End Sub


Public Function fnCallBack(objBln As Balloon, iBtn As Integer, lPrivate As Long)
    Dim objTmpDoc As Document
    
    On Error GoTo ErrorCallBack
    
    Select Case iBtn
        Case Is < 1 'Exit
            objBln.Close
            fPostWizBlnOpen = False
            ActiveDocument.Variables(strPOST_WIZ_BLN).Value = "0"
            RestoreAssistant (True)
        Case 1: 'Enter text
            DisplayPostWizTip strHELP_TOPIC
        Case 2: 'Send the agenda to someone
            Set formSend = New formMailFax
            With formSend
                .Caption = strMAIL_CAPTION
                .lblPrompt.Caption = strMAIL_PROMPT
            End With
            Set objTmpDoc = ActiveDocument
            objBln.Close
            fPostWizBlnOpen = False
            formSend.Show
            Set formSend = Nothing
            'if we are back in the same doc. due to some error
            'then Changedoc event won't get fired
            If (objTmpDoc = ActiveDocument) And (Not (fPostWizBlnOpen)) Then
                objBln.Show
                fPostWizBlnOpen = True
            End If
        Case 3: 'Get help...
            Assistant.Help
    End Select
    Exit Function
    
ErrorCallBack:
    DisplayErrorMsg Err.Description
End Function

'displays post wizard tip in an autodown balloon if Assistant is visible
Public Sub DisplayPostWizTip(strTip As String)
    Dim objBlnTip As Balloon
    
    On Error GoTo FatalError
    
    ' Create new balloon with tip
    Set objBlnTip = Assistant.NewBalloon
    With objBlnTip
        .Mode = msoModeModal
        .Heading = strWizName
        .Text = strTip
        .Button = msoButtonSetOK
    End With
    objBlnTip.Show

    If Assistant.BalloonError = msoBalloonErrorNone Then Exit Sub

FatalError:
    Err.Clear

End Sub

' End Agenda Wizard Module


Attribute VB_Name = "ClassAppEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WithEvents app As Application

Private Sub app_DocumentChange()
    On Error Resume Next
    
    CloseBln
    
    OpenBln
    Set objDocBln = ActiveDocument
FatalError:
    Err.Clear
End Sub

Private Sub CloseBln()
Dim strVal As String
    On Error GoTo FatalErrorClose
    strVal = ""
    
    'if old doc's bln was being displayed, then close it
    strVal = objDocBln.Variables(strPOST_WIZ_BLN).Value
    If strVal = "1" Then
        If fPostWizBlnOpen Then
            objPostWizBln.Close
            fPostWizBlnOpen = False
        End If
    End If
FatalErrorClose:
    Err.Clear
End Sub

Private Sub OpenBln()
Dim strVal As String

    On Error GoTo FatalErrorOpen
    strVal = ""
    strVal = ActiveDocument.Variables(strPOST_WIZ_BLN).Value

    'check to see if bln should be displayed for new doc.
    If (strVal = "1") Then
        objPostWizBln.Show
        fPostWizBlnOpen = True
    End If
    
FatalErrorOpen:
    Err.Clear
End Sub
Attribute VB_Name = "Common"
' --------------------------------------------------------------------------------------
' WORD 97 WIZARD
' Common VBA Module
' --------------------------------------------------------------------------------------

Option Explicit

' --------------------------------------------------------------------------------------
' CONSTANT DECLARATIONS

' Note use of trailing spaces and punctuation...

' Banter strings
Public Const strSTARTING        As String = "Der "
Public Const strSTARTING2       As String = " wird geladen..."
Public Const strAPPLYING        As String = "Formatvorlagen werden kopiert..."
Public Const strCREATING_DOC    As String = "Dokument wird erstellt..."
Public Const strSAVE_SETTINGS   As String = "Einstellungen werden gespeichert..."
Public Const strRST_SETTINGS    As String = "Einstellungen werden wiederhergestellt..."
Public Const strUPDATING_STYLE  As String = "Formatvorlagen werden kopiert..."

' Error messages
Public Const strERR_BAD_DOC         As String = "Der Assistent kann nicht im aktiven Dokument verwendet werden. Um den Assistenten zu verwenden, w|fffd|hlen Sie ""Neu"" im Men|fffd| ""Datei"" und w|fffd|hlen Sie den "
Public Const strERR_BAD_DOC2        As String = " aus."
Public Const strERR_INTERNAL        As String = "Der Assistent kann nicht fortfahren, da ein Fehler aufgetreten ist."
Public Const strERR_WIZ_NOT_FOUND   As String = "Der Assistent konnte nicht im Benutzer-Vorlagen-Pfad gefunden werden."
Public Const strERR_STYLE_NOT_FOUND As String = "Der Assistent konnte die ben|fffd|tigte Datei "
Public Const strERR_STYLE_NOT_FOUND2 As String = " nicht finden. Diese Datei wird ben|fffd|tigt, um das Dokument zu formatieren. Falls die Datei nicht installiert ist, f|fffd|hren Sie bitte das Setup erneut durch, und installieren Sie die Datei."
Public Const strERR_ADDR_BOOK       As String = "Fehler beim Einf|fffd|gen eines Namens aus einem Adre|fffd|buch."
Public Const strERR_SEND_FAX        As String = "Der Assistent konnte dieses Dokument nicht per Fax versenden."
Public Const strERR_SEND_MAIL       As String = "Der Assistent konnte dieses Dokument nicht per E-Mail versenden."
Public Const strERR_AUTOTEXT_NOT_FOUND As String = "Word konnte keinen AutoText aus dem Assistenten einf|fffd|gen. Bitte f|fffd|hren Sie das Setup-Programm erneut aus und installieren Sie diesen Assistenten neu."
Public Const strERR_INIT_FORM       As String = "Word konnte den Eingabedialog des Assistenten nicht anzeigen. Bitte starten Sie den Assistenten erneut."
Public Const strERR_INIT_CALL_BACK  As String = "Word konnte die Auswahloptionen zum Ende des Assistenten nicht anzeigen. Bitte starten Sie den Assistenten erneut, um die Auswahlm|fffd|glichkeiten zu sehen."

' Misc strings
Public Const strWIZ As String = ".wiz"  'common extension to a wizard file
Public Const strDOT As String = ".dot"  'extension to a template file

'the setting in which this wizard has been saved. If the wizard is saved with A4 settings then
'this constant should be set to A4
Public Const strWIZ_SAVED_AS As String = "A4"

'the settings key for page size
Public Const strREG_PAGE_SIZE As String = "PageSize"
'to check if it is A4 and change the pagesize if the key's value is this string
Public Const strA4_SETTING As String = "A4"
' --------------------------------------------------------------------------------------
' ************     DO NOT LOCALIZE ANY CODE BEYOND THIS POINT  *************************
' --------------------------------------------------------------------------------------

'registry key under which to store individual wizard preference settings
Public Const strREG_SETTINGS_BASE_KEY As String = "HKEY_CURRENT_USER\Software\Microsoft\Office\8.0\Word\Wizards\"

Public Const strSPACE       As String = " "
Public Const strCOMMA       As String = ","
Public Const strSHP_MAP     As String = "shpMap"  'prefix to the names of the shapes in the navigation chart/map
Public Const strLBL_MAP     As String = "lblMap"  'prefix to the names of the labels in the navigation chart/map
Public Const strREG_ASSISTANT_HELP As String = "Assistant Help" 'registry entry to store local state of Assistant
                                                                'for this wizard
Public Const strREG_ASSISTANT_TIME_STAMP As String = "Time Stamp" 'registry to store the time stamp when the
                                                                  'local state of the wizard changed.

'COLOR constants used
Public Const COLOR_DISABLED As Long = &H404040  'used for disabled panel's label and shape
Public Const COLOR_DARKGREY As Long = &H808080  'used for visited panel's label and shape
Public Const COLOR_LIGHTGREY As Long = &HC0C0C0 'used for unvisited panel's label and shape
Public Const COLOR_RED      As Long = vbRed
Public Const COLOR_GREEN    As Long = vbGreen
Public Const COLOR_WHITE    As Long = vbWhite


' --------------------------------------------------------------------------------------
' VARIABLE DECLARATIONS

' Wizard Names And FileNames
Public strWizName As String
Public strWizLongName As String
Public strWizShortName As String

Public fSettingsRestored As Boolean
Public fSettingsSaved As Boolean

' Application Environment
Public objActiveRange   As Range     'current range
Public objWizTemplate   As Template  'doc's template i.e the wizard
Public iAlertsLevel      As Integer   'stores the initial alerts level

' Variables to store some environment values
Public strPathSeparator As String   ' Directory separator in a path
Public strTemplatePath As String    ' Path of the the wizard and corresponding templates

'current panel of the multipage control in the dialog
Public iCurrentPanel As Integer

' Registry location key
Public strRegSettingsKey As String

' Assistant
Public objAssistantBalloon  As Balloon  'help balloon displayed for each panel
Public fBalloonVisible      As Boolean  'true if the above balloon is visible
Public iLocalState          As Integer  'Local State of Assistant for passing to Office
Public lAssistantId         As Long     'assistant id obtained from StartWizard call
Public fExitTglEvent        As Boolean  'this is set to True, if we don't want the click
                                        'event for the toggle buttonto be executed when
                                        'we change its value

Public fWizardCallBack      As Boolean  'we set it to True in FReenterWizardPanel
                                        'since it is used only in JumpToPanel
                                        'to disable jumping to otherpanels, by clicking
                                        'on the shapes
Public fInitialAssistantState As Boolean  ' to go back to after exiting wizard
Public fAsstHelp As Boolean

'if the activedocument's papersize was changed then one of the two following
'variables will be set according to the paper size that is being set.
Public fChangeToA4 As Boolean
Public fChangeToLetter As Boolean

'Post wizard balloon options.
Public objPostWizBln As Balloon
Public objDocBln As Document
Public clsBln As New ClassAppEvents
Public fBlnInitialized As Boolean
Public fPostWizBlnOpen As Boolean

'variables storing the rectangle of the form to be avoided
'by the asst. and balloon
Public lFormTop As Long, lFormHeight As Long
Public lFormLeft As Long, lFormWidth As Long

' Wizard dialog form
Public formWizard As formWizDlg 'New formWizDlg

' General Purpose Utilities for Starting, Saving, and Restoring Wizards
' --------------------------------------------------------------------------------------
Public Sub StartWizard()
    On Error GoTo FatalError
  
    Application.ScreenUpdating = False
    
    ' Init Global Var
    fWizardCallBack = False
    fExitTglEvent = False
    fSettingsRestored = False
    fSettingsSaved = False
    lAssistantId = 0
  
    ' Identify Wizard
    InitWizardName (True)
    
    ' We're busy now
    StatusBar = strSTARTING & strWizName & strSTARTING2

    SetWizardEnvironment

    ' Locate the wizard template
    InitDocTemplate
    strTemplatePath = StrWizardPath

    ' Initialize the new document
    InitDoc
    
    ' Initialize form
    InitWizard (True)
    
    'remove any text which might written for indicating progress
    StatusBar = ""
    
    ' Connect to the Assistant
    InitWizardAssistant
    
    ' Bring up dialog
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True
    
    formWizard.Show
    
    ResetWizardEnvironment (True)
    Exit Sub

FatalError:
    ReportError Err
End Sub  ' Main / StartWizard


Private Sub InitDocTemplate()
    ' Did user create a New Document or a New Template?
    On Error GoTo CreatingNewTemplate
    
    ' New Document
    Set objWizTemplate = ActiveDocument.AttachedTemplate
    Exit Sub

CreatingNewTemplate:
    ' New Template
    Set objWizTemplate = ActiveDocument
End Sub  ' InitDocTemplate


Private Function StrWizardPath() As String
    Dim strPath As String
    Dim strFileName As String
    Dim i As Integer
    Dim fFound As Boolean

    On Error GoTo FatalError
    
    fFound = True
    strPath = objWizTemplate.Path

    If (Len(strPath) = 0) Then
        ' New template based on Wizard
        ' Get location of templates - first look in UserTemplatesPath
        ' and then in Workgroup path
        i = 0
        fFound = False
        strPath = Application.Options.DefaultFilePath(wdUserTemplatesPath)
        
        While ((i < 2) And fFound = False)
            If (Len(strPath) <> 0) Then
                ' First try to find wizard with long filename
                WordBasic.FileFind SearchPath:=strPath, Name:=strWizLongName & strWIZ, SubDir:=1, MatchCase:=0
                If WordBasic.CountFoundFiles() = 0 Then
                    ' Try to find wizard with short filename
                    WordBasic.FileFind SearchPath:=strPath, Name:=strWizShortName & strWIZ, SubDir:=1, MatchCase:=0
                    If WordBasic.CountFoundFiles() <> 0 Then fFound = True
                Else
                    fFound = True
                End If
            End If
        
            i = i + 1
            strPath = Application.Options.DefaultFilePath(wdWorkgroupTemplatesPath)
        Wend
        
        If (fFound) Then ' Wizard was found, so save path
            strFileName = WordBasic.[FoundFileName$](1)
            strPath = WordBasic.[FileNameInfo$](strFileName, 5)
        End If
    End If

    If (fFound) Then
        strPathSeparator = Application.PathSeparator
        If Right$(strPath, 1) <> strPathSeparator Then strPath = strPath & strPathSeparator
        StrWizardPath = strPath
        Exit Function
    End If

LWizardMissing:
    DisplayErrorMsg strERR_WIZ_NOT_FOUND
    
FatalError:
    ReportError Err
End Function ' StrWizardPath

'sets the wizard environment
Private Sub SetWizardEnvironment()
    System.Cursor = wdCursorWait
    'set alert level to none, so that Word/VBA dont display display any
    'error messages by themselves
    iAlertsLevel = Application.DisplayAlerts
    Application.DisplayAlerts = wdAlertsNone
    'Disable Cancel key, to prevent ESC key from interrupting the macro.
    'it will still dismiss the Form though
    Application.EnableCancelKey = wdCancelDisabled
End Sub

'resets the environment to what it was before the wizard was executed
Sub ResetWizardEnvironment(fDummy As Boolean)
    System.Cursor = wdCursorNormal
    'remove any text which might written for indicating progress
    StatusBar = ""
    Application.ScreenUpdating = True
    ActiveWindow.View.Type = wdPageView
    Application.DisplayAlerts = iAlertsLevel
    Application.EnableCancelKey = wdCancelInterrupt
End Sub

'returns the value stored in registry key strId
Public Function StrFetchPref(strId As String) As String
    On Error GoTo LReturnNull
    
    StrFetchPref = System.PrivateProfileString("", strRegSettingsKey, strId)
    Exit Function
LReturnNull:
    StrFetchPref = ""
End Function

'stores strValue in registry key strId
Public Sub StorePref(strId As String, strValue As String)
    Dim strTemp As String

    ' If string is empty, store "~" as placeholder
    If (Len(strValue) = 0) Then
        strTemp = "~"
    Else
        strTemp = strValue
    End If
    
    System.PrivateProfileString("", strRegSettingsKey, strId) = strTemp
End Sub

'returns the string stored in strId. If empty, returns strDefault
Public Function StrRestorePref(strId As String, strDefault As String) As String
    Dim strTemp As String

    strTemp = StrFetchPref(strId)
    ' If length is 0, it wasn't in regsistry, so use default value
    If Len(strTemp) = 0 Then
        strTemp = strDefault
    ' "~" is a placeholder to allow returning empty strings
    ElseIf strTemp = "~" Then
        strTemp = ""
    End If
    
    StrRestorePref = strTemp
End Function

' stores iVal in registry key strId as a string
Public Sub StoreValPref(strId As String, iVal As Integer)
    StorePref strId, CStr(iVal)
End Sub

'returns the value stored in the key strId
'if invalid, returns iDefault
Public Function FRestorePref(strId As String, fDefault As Boolean) As Boolean

    Dim strVal As String

    strVal = StrFetchPref(strId)
    If Len(strVal) = 0 Then
        FRestorePref = fDefault
    Else
        FRestorePref = Val(strVal)
    End If
End Function


'returns the value stored in the key strId
'if invalid, returns iDefault
Public Function IRestorePref(strId As String, iDefault As Integer) As Integer
    Dim strVal As String

    strVal = StrFetchPref(strId)
    If Len(strVal) = 0 Then
        IRestorePref = iDefault
    Else
        IRestorePref = Val(strVal)
    End If
End Function


'main error reporting routine called for fatal errors in the wizard
'SHOULD NOT BE CALLED FOR POST-WIZARD ERRORS
Public Sub ReportError(ByVal ErrorCode As ErrObject)
    Dim lErrorCode As Long
    Dim strErrorMsg As String
    
    lErrorCode = ErrorCode.Number
    strErrorMsg = ErrorCode.Description
    
    'The next statement seems to reset the ErrorCode object,
    'even though it is a ByVal argument
    On Error Resume Next
    
    ResetWizardEnvironment (True)
    
    If fBalloonVisible Then objAssistantBalloon.Close
    If lErrorCode Then DisplayErrorMsg strErrorMsg
    If lAssistantId Then Assistant.EndWizard lAssistantId, False '2nd parameter is fSuccess
    
    If (Not (formWizard Is Nothing)) Then
        formWizard.Hide
        Unload formWizard
        Set formWizard = Nothing
    End If
    
    'ReportError is not called in post-wizard option errors.
    'So, always closing the doc.
    ActiveDocument.Close wdDoNotSaveChanges 'ActiveDocument assumed to be set
    
    'terminate the wizard
    End

End Sub ' ReportError

'initialises the new doc. that is getting created
Private Sub InitDoc()
    Dim fBadDoc As Integer
    
    On Error GoTo FatalError

    'chk if doc.path errors if path not present.
    fBadDoc = False
    If (Len(ActiveDocument.Path) <> 0) Then
        'doc has been saved before
        fBadDoc = True
    Else
        Set objActiveRange = ActiveDocument.Content
        'chk if range has anything other than a paragraph mark
        If (objActiveRange.End > objActiveRange.Start + 1) Then fBadDoc = True
    End If
        
    If (fBadDoc) Then
        DisplayErrorMsg strERR_BAD_DOC & strWizName & strERR_BAD_DOC2
        ResetWizardEnvironment (True)
        'terminate the wizard
        End
    End If
    
    objActiveRange.Collapse wdCollapseStart
    
    SetPageSize

    Exit Sub

FatalError:
    ReportError Err
End Sub  ' InitDoc

' --------------------------------------------------------------------------------------
' Assistant related functions
' --------------------------------------------------------------------------------------

'initialises the Assistant for the wizard
Private Sub InitWizardAssistant()
    Dim lPrivate As Long
    
    fBalloonVisible = False
    On Error GoTo FatalError
    
    ' Was Assistant visible, when wizard was started?
    fInitialAssistantState = Assistant.Visible
    
    ' What is the local state of Assistant for this wizard?
    'if user changed "Help for wizards" globally in the Assistant Options dlg,
    'Word will automatically update this to reflect the latest value.
    iLocalState = IRestorePref(strREG_ASSISTANT_HELP, msoWizardActInactive)
    
    'the form is shown centered on the app. -StartUpPosition = CenterOwner
    lFormHeight = formWizard.Height
    lFormWidth = formWizard.Width
    lFormTop = Application.Top + (Application.Height / 2) - (lFormHeight / 2)
    If (lFormTop < 0) Then lFormTop = 0
    lFormLeft = Application.Left + (Application.Width / 2) - (lFormWidth / 2)
    If (lFormLeft < 0) Then lFormLeft = 0

    lAssistantId = Assistant.StartWizard(iLocalState, "Common.fnHelpCallBack", lPrivate, _
                                    Top:=lFormTop, Left:=lFormLeft, _
                                    Bottom:=lFormTop + lFormHeight, _
                                    Right:=lFormLeft + lFormWidth)
    
    iLocalState = msoWizardActInactive
    If lAssistantId = 0 Then GoTo FatalError 'error with Assistant.Startwizard.
                                             'Assistant probably not installed
    
    ' Initialize Balloon
    Set objAssistantBalloon = Assistant.NewBalloon
    With objAssistantBalloon
        .Heading = strWizName
        .Mode = msoModeModeless
        .Button = msoButtonSetNone
        .Text = rgstrAssistantMsg(0)
    End With
    objAssistantBalloon.SetAvoidRectangle lFormLeft, lFormTop, lFormLeft + lFormWidth, lFormTop + lFormHeight
    If Assistant.BalloonError Then GoTo FatalError
    fAsstHelp = True
    Exit Sub
    
FatalError:
    fAsstHelp = False
    'since error occurred with assistant actions, let's disable Assistant button
    formWizard.tglAssistant.Enabled = False
    Err.Clear
End Sub

'this function called when user clicks on a button in the balloon put up by StartWizard or
'ActivateWizard.
Public Sub fnHelpCallBack(iHelp As Integer, lPrivate As Long)
    Select Case iHelp
        Case msoWizardMsgLocalStateOff:
            iLocalState = msoWizardActInactive
            'user doesn't want help anymore
            'if balloon is up,then close it
            If fBalloonVisible Then
                objAssistantBalloon.Close
                fBalloonVisible = False
            End If
            
            If (formWizard.tglAssistant.Value) Then
                fExitTglEvent = True
                formWizard.tglAssistant.Value = False
            End If
        Case msoWizardMsgShowHelp:
            iLocalState = msoWizardActActive
                        
            If (Not (formWizard.tglAssistant.Value)) Then
                fExitTglEvent = True
                formWizard.tglAssistant.Value = True
            End If
            
            If fBalloonVisible Then Exit Sub 'help balloon already up (should not occur, though)
            
            If fAsstHelp Then 'if no error in building help balloon
                objAssistantBalloon.Text = rgstrAssistantMsg(iCurrentPanel)
                objAssistantBalloon.Show
                If Assistant.BalloonError = msoBalloonErrorNone Then _
                    fBalloonVisible = True
            End If

    End Select
End Sub

Public Sub RestoreAssistant(fDummy As Boolean)
    On Error Resume Next
    Assistant.Visible = fInitialAssistantState
    Err.Clear
End Sub  ' RestoreAssistant


'displays error message in a balloon if Assistant is visible
'else uses a Msgbox
Public Sub DisplayErrorMsg(strErrMsg As String)
    Dim objErrBalloon As Balloon

    On Error GoTo DisplayMsgBox
    
    If lAssistantId Then
        If Assistant.Visible Then
            Set objErrBalloon = Assistant.NewBalloon
            With objErrBalloon
                .Mode = msoModeModal
                .Heading = strWizName
                .Text = strErrMsg
                .Button = msoButtonSetOK
                .Icon = msoIconAlert
            End With
            objErrBalloon.Show
            If Assistant.BalloonError = msoBalloonErrorNone Then
                Err.Clear
                Exit Sub
            End If
        End If
    End If
    
DisplayMsgBox:
    MsgBox strErrMsg, vbExclamation + vbOKOnly + vbApplicationModal, strWizName
    Err.Clear
    
End Sub
'if there exists a PageSize key with a value of A4 then change
'activedocument's page size to be A4
Private Sub SetPageSize()
    Dim strProperty As String
    
    fChangeToA4 = False
    fChangeToLetter = False
    On Error GoTo TryLetterPageSize
    strProperty = ""
    strProperty = System.PrivateProfileString("", strREG_SETTINGS_BASE_KEY, strREG_PAGE_SIZE)
    If strProperty = strA4_SETTING Then
        If strWIZ_SAVED_AS <> "A4" Then
            ActiveDocument.PageSetup.PaperSize = wdPaperA4
            fChangeToA4 = True
        End If
    End If

TryLetterPageSize:
    On Error GoTo -1 'resets Err and the error handler
    On Error GoTo ExitSub
    If Len(strProperty) Then
    'registry entry was not found. Wizard should have letter size settings
        If strWIZ_SAVED_AS <> "A4" Then
            ActiveDocument.PageSetup.PaperSize = wdPaperLetter
            fChangeToLetter = True
        End If
    Else
        ActiveDocument.PageSetup.PaperSize = wdPaperLetter
        fChangeToLetter = True
    End If
ExitSub:
    Err.Clear
End Sub

' End Common Module
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Document_Close()
On Error GoTo Close_error
    If ActiveDocument.Variables(strPOST_WIZ_BLN).Value = "1" Then
        If fPostWizBlnOpen Then
            objPostWizBln.Close
            fPostWizBlnOpen = False
        End If
    End If
    
Close_error:
    Err.Clear
End Sub
Private Sub Document_New()
    Common.StartWizard
End Sub

Attribute VB_Name = "formMailFax"
Attribute VB_Base = "0{27DDDE58-5182-11D0-B5E8-00AA00BBB76C}{27DDDE4E-5182-11D0-B5E8-00AA00BBB76C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False







' Word Wizard / Selection of Email Target
Option Explicit

Private Sub cmdCancel_Click()
    ' Close Form
    formSend.Hide
End Sub

Private Sub cmdOK_Click()
    Dim fAttachMailState As Boolean
    Dim strErrMsg As String
    
    strErrMsg = ""
    formSend.Hide
    If optEmail.Value Then
        On Error GoTo ErrEMail
        ' Get current state
        fAttachMailState = Options.SendMailAttach
        ' Force state to True
        Options.SendMailAttach = True
        ' Send Mail
        ActiveDocument.SendMail
        ' Restore state
        Options.SendMailAttach = fAttachMailState
    Else
        On Error GoTo ErrFax
        ' Send Fax
        Application.SendFax
    End If
    
CloseForm:
    Exit Sub
    
ErrEMail:
    If Err.Number Then strErrMsg = vbCr & Err.Description
    DisplayErrorMsg strERR_SEND_MAIL & strErrMsg
    GoTo CloseForm
    
ErrFax:
    If Err.Number Then strErrMsg = vbCr & Err.Description
    DisplayErrorMsg strERR_SEND_FAX & strErrMsg
    GoTo CloseForm
End Sub

' End MailFax Form Code Module

Attribute VB_Name = "formWizDlg"
Attribute VB_Base = "0{27DDDE5C-5182-11D0-B5E8-00AA00BBB76C}{27DDDE50-5182-11D0-B5E8-00AA00BBB76C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

' Agenda Wizard Form

Option Explicit

' Flowchart Controls
    
Private Sub lblMap0_Click()
    JumpToPanel (0)
End Sub

Private Sub lblMap1_Click()
    JumpToPanel (1)
End Sub

Private Sub lblMap2_Click()
    JumpToPanel (2)
End Sub

Private Sub lblMap3_Click()
    JumpToPanel (3)
End Sub

Private Sub lblMap4_Click()
    JumpToPanel (4)
End Sub

Private Sub lblMap5_Click()
    JumpToPanel (5)
End Sub

Private Sub lblMap6_Click()
    JumpToPanel (6)
End Sub

Private Sub lblMap7_Click()
    JumpToPanel (7)
End Sub

Private Sub shpMap0_Click()
    JumpToPanel (0)
End Sub

Private Sub shpMap1_Click()
    JumpToPanel (1)
End Sub

Private Sub shpMap2_Click()
    JumpToPanel (2)
End Sub

Private Sub shpMap3_Click()
    JumpToPanel (3)
End Sub

Private Sub shpMap4_Click()
    JumpToPanel (4)
End Sub

Private Sub shpMap5_Click()
    JumpToPanel (5)
End Sub

Private Sub shpMap6_Click()
    JumpToPanel (6)
End Sub

Private Sub shpMap7_Click()
    JumpToPanel (7)
End Sub


' Navigator Controls
Private Sub tglAssistant_Click()
    If lAssistantId = 0 Then Exit Sub 'tglAssistant should be disabled. extra safety

    If fExitTglEvent Then
        fExitTglEvent = False
        Exit Sub
    End If

    If (iLocalState = msoWizardActInactive) Then
        'we want the button to be pressed only when user chooses
        'Help with this wizard option.
        If tglAssistant.Value Then
            fExitTglEvent = True
            tglAssistant.Value = False
        End If
        Assistant.ActivateWizard lAssistantId, msoWizardActActive
    ElseIf (iLocalState = msoWizardActActive) Then
        Assistant.ActivateWizard lAssistantId, msoWizardActInactive
    End If
    
End Sub

Private Sub cmdBack_Click()
    If iCurrentPanel <> wzPAGE_START Then JumpToPanel (iCurrentPanel - 1)
End Sub

Private Sub cmdNext_Click()
    If iCurrentPanel <> wzPAGE_FINISH Then JumpToPanel (iCurrentPanel + 1)
End Sub

Private Sub cmdCancel_Click()
    Err.Clear
    ReportError Err
End Sub

Private Sub cmdFinish_Click()
    Application.ScreenUpdating = False
    If iCurrentPanel = wzPAGE_TOPICS Then AddNewTopic
    
    ' Assistant Visible?
    If fBalloonVisible Then
        objAssistantBalloon.Close
        fBalloonVisible = False
    End If
    
    If Not (fSettingsRestored) Then
        RestoreDialogValues (True)
        System.PrivateProfileString("", strREG_SETTINGS_BASE_KEY, strREG_ASSISTANT_TIME_STAMP) = Format$(Now, "General Date")
        StoreValPref strREG_ASSISTANT_HELP, iLocalState
    Else
        If Not (fSettingsSaved) Then SaveDialogValues (True)
    End If
    CreateNewDoc (True)
    
    formWizard.Hide
    Unload formWizard
    Set formWizard = Nothing
    If lAssistantId Then
        Assistant.EndWizard lAssistantId, True
        InitCallBack (True)
    End If
End Sub

' Page 1
Private Sub optBoxes_Click()
    If iAgendaStyle <> wzBOXES Then
        Select Case iAgendaStyle
            Case wzMODERN
                shpModernShadow.Visible = False
            Case wzSTANDARD
                shpStandardShadow.Visible = False
        End Select
        shpBoxesShadow.Visible = True
        iAgendaStyle = wzBOXES
    End If
End Sub

Private Sub optModern_Click()
    If iAgendaStyle <> wzMODERN Then
        Select Case iAgendaStyle
            Case wzBOXES
                shpBoxesShadow.Visible = False
            Case wzSTANDARD
                shpStandardShadow.Visible = False
        End Select
        shpModernShadow.Visible = True
        iAgendaStyle = wzMODERN
    End If
End Sub

Private Sub optStandard_Click()
    If iAgendaStyle <> wzSTANDARD Then
        Select Case iAgendaStyle
            Case wzBOXES
                shpBoxesShadow.Visible = False
            Case wzMODERN
                shpModernShadow.Visible = False
        End Select
        shpStandardShadow.Visible = True
        iAgendaStyle = wzSTANDARD
    End If
End Sub

Private Sub imgBoxes_Click()
    If iAgendaStyle <> wzBOXES Then
        Select Case iAgendaStyle
            Case wzMODERN
                shpModernShadow.Visible = False
            Case wzSTANDARD
                shpStandardShadow.Visible = False
        End Select
        shpBoxesShadow.Visible = True
        iAgendaStyle = wzBOXES
        optBoxes.Value = True
        optBoxes.SetFocus
    End If
End Sub

Private Sub imgModern_Click()
    If iAgendaStyle <> wzMODERN Then
        Select Case iAgendaStyle
            Case wzBOXES
                shpBoxesShadow.Visible = False
            Case wzSTANDARD
                shpStandardShadow.Visible = False
        End Select
        shpModernShadow.Visible = True
        iAgendaStyle = wzMODERN
        optModern.Value = True
        optModern.SetFocus
    End If
End Sub

Private Sub imgStandard_Click()
    If iAgendaStyle <> wzSTANDARD Then
        Select Case iAgendaStyle
            Case wzBOXES
                shpBoxesShadow.Visible = False
            Case wzMODERN
                shpModernShadow.Visible = False
        End Select
        shpStandardShadow.Visible = True
        iAgendaStyle = wzSTANDARD
        optStandard.Value = True
        optStandard.SetFocus
    End If
End Sub

' Page 5
Private Sub cmdAddTopic_Click()
    AddNewTopic
    txtNewTopic.SetFocus
End Sub

Sub AddNewTopic()
    Dim iIndex As Integer
    
    ' Trim text entries
    With txtNewTopic
        If .TextLength Then .Text = Trim(.Text)
    End With
    With txtNewPerson
        If .TextLength Then .Text = Trim(.Text)
    End With
    With txtNewMinutes
        If .TextLength Then .Text = Trim(.Text)
    End With
    
    ' Exit if nothing to add
    If txtNewTopic.TextLength + txtNewPerson.TextLength + txtNewMinutes.TextLength = 0 Then Exit Sub
    
    ' Insert topic into list
'jeb debug:  Workaround 'cuz AddItem won't take ""
    With txtNewTopic
    If .TextLength = 0 Then .Text = " "
    lstTopics.AddItem .Text
    End With
    iIndex = lstTopics.ListCount - 1
    
    ' Insert person into second column
    If txtNewPerson.TextLength Then
        lstTopics.List(iIndex, 1) = txtNewPerson.Text
    Else
        lstTopics.List(iIndex, 1) = ""
    End If
    
    ' Insert time into third column
    If txtNewMinutes.TextLength Then
        lstTopics.List(iIndex, 2) = txtNewMinutes.Text
    Else
        lstTopics.List(iIndex, 2) = ""
    End If
    
    ' Clear text boxes
    txtNewTopic.Text = ""
    txtNewPerson.Text = ""
    txtNewMinutes.Text = ""

End Sub

Private Sub cmdRemoveTopic_Click()
    Dim iSelected As Integer
    Dim iLast As Integer
    
    ' Has row been selected?
    On Error GoTo FatalError
    With lstTopics
        iLast = .ListCount - 1
        iSelected = .ListIndex
        ' Remove selected row
        If (iSelected <> 0) And (iSelected = iLast) Then .ListIndex = iSelected - 1
        .RemoveItem (iSelected)
    End With
    lstTopics.SetFocus
    
    Exit Sub
FatalError:
End Sub

Private Sub cmdRemoveAllTopics_Click()
    Dim i As Integer
    Dim iCount As Integer
    
    On Error GoTo FatalError
    ' Remove selected rows from bottom up
    With lstTopics
        iCount = .ListCount - 1
        For i = 0 To iCount
            .RemoveItem (iCount - i)
        Next i
    End With
    
    txtNewTopic.SetFocus
    Exit Sub
    
FatalError:
End Sub

Private Sub cmdMoveDown_Click()
    Dim strTopic As String
    Dim strPerson As String
    Dim strMinutes As String
    Dim iCurrent As Integer
    Dim iLast As Integer
    
    On Error GoTo ErrorTrap
    
    With lstTopics
        iCurrent = .ListIndex + 1
        iLast = .ListCount
        If iCurrent = iLast Then Exit Sub ' No need to move
        ' save next row
        strTopic = .List(iCurrent, 0)
        strPerson = .List(iCurrent, 1)
        strMinutes = .List(iCurrent, 2)
        ' remove next row
        .RemoveItem (iCurrent)
        ' insert one row down
        .AddItem strTopic, (iCurrent - 1)
        .List(iCurrent - 1, 1) = strPerson
        .List(iCurrent - 1, 2) = strMinutes
        .ListIndex = iCurrent
    End With
ErrorTrap:
End Sub

Private Sub cmdMoveUp_Click()
    Dim strTopic As String
    Dim strPerson As String
    Dim strMinutes As String
    Dim iCurrent As Integer
    
    On Error GoTo ErrorTrap
    
    With lstTopics
        iCurrent = .ListIndex
        If iCurrent = 0 Then Exit Sub  ' No need to move
        strTopic = .List(iCurrent, 0)
        strPerson = .List(iCurrent, 1)
        strMinutes = .List(iCurrent, 2)
        .RemoveItem (iCurrent)
        iCurrent = iCurrent - 1
        .AddItem strTopic, iCurrent
        .List(iCurrent, 1) = strPerson
        .List(iCurrent, 2) = strMinutes
        .ListIndex = iCurrent
    End With
ErrorTrap:
End Sub

' Page 6
Private Sub JumpToPanel(iNewPanel As Integer)
    Dim objControls As Object
    Dim lNewFormTop As Long
    Dim lNewFormLeft As Long
    
    ' Don't allow jump if CallBack mode, or if no change in Panel Number
    If iCurrentPanel = iNewPanel Or fWizardCallBack Then Exit Sub

    If FPageLostFocus Then
        Set objControls = formWizard.Controls
        ' Deselect current flow chart marker
        objControls(strSHP_MAP & iCurrentPanel).BackColor = COLOR_DARKGREY
        objControls(strLBL_MAP & iCurrentPanel).FONTBOLD = False
            
        ' Select new flow chart marker
        objControls(strSHP_MAP & iNewPanel).BackColor = COLOR_GREEN
        objControls(strLBL_MAP & iNewPanel).FONTBOLD = True
            
        ' Change to new active page
        iCurrentPanel = iNewPanel
        mpgWizardPage.Value = iCurrentPanel
        If fBalloonVisible Then
            lNewFormTop = formWizard.Top
            lNewFormLeft = formWizard.Left
            
            If (lNewFormTop <> lFormTop) Or (lNewFormLeft <> lFormLeft) Then
                lFormTop = lNewFormTop
                lFormLeft = lNewFormLeft
                objAssistantBalloon.SetAvoidRectangle lFormLeft, lFormTop, lFormLeft + lFormWidth, lFormTop + lFormHeight
            End If
            objAssistantBalloon.Close
            objAssistantBalloon.Text = rgstrAssistantMsg(iNewPanel)
            objAssistantBalloon.Show
        End If
        
        ' Set focus to desired control
        PageSetFocus
    End If
End Sub

Private Function FPageLostFocus() As Boolean
    Select Case iCurrentPanel
        Case wzPAGE_START
            cmdBack.Enabled = True
            If Not (fSettingsRestored) Then RestoreDialogValues (True)
        Case wzPAGE_TOPICS
            AddNewTopic
        Case wzPAGE_FINISH
            cmdNext.Enabled = True
            fSettingsSaved = False
    End Select

    FPageLostFocus = True
End Function

Private Sub PageSetFocus()
    Select Case iCurrentPanel
        Case wzPAGE_START
            cmdNext.SetFocus
            cmdBack.Enabled = False
        Case wzPAGE_STYLE
            Select Case iAgendaStyle
                Case wzBOXES
                    optBoxes.SetFocus
                Case wzMODERN
                    optModern.SetFocus
                Case wzSTANDARD
                    optStandard.SetFocus
                Case Else
                    iAgendaStyle = wzBOXES
                    optBoxes.SetFocus
            End Select
        Case wzPAGE_DETAILS
            With txtDate
                .SelStart = 0
                .SelLength = .TextLength
                .SetFocus
            End With
        Case wzPAGE_HEADINGS
            chkMeetingType.SetFocus
        Case wzPAGE_NAMES
            chkCalledBy.SetFocus
        Case wzPAGE_TOPICS
            With txtNewTopic
                .SelStart = 0
                .SelLength = .TextLength
                .SetFocus
            End With
        Case wzPAGE_MINUTES
            optYesMinutes.SetFocus
        Case wzPAGE_FINISH
            cmdFinish.SetFocus
            cmdNext.Enabled = False
            If Not (fSettingsSaved) Then SaveDialogValues (True)
    End Select
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If (CloseMode = vbFormControlMenu) Then
        Err.Clear
        ReportError Err
    End If
End Sub

' End Agenda Wizard Form Code

' InQuest injected base64 decoded content
' {"nW
' Szjej

INQUEST-PP=macro
