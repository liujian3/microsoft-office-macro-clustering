Attribute VB_Name = "AssociateForm"
Attribute VB_Base = "0{B5CBBDAE-9AD9-44E8-9FE5-F76A6921C30C}{297E9C77-6A3D-4F6F-86B1-A1C3457E87A9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False









Private Sub CommandButton1_Click()

Dim x2 As Long, x1 As Long

x1 = 4
Do
    x1 = x1 + 1
Loop Until Worksheets("Associated Projects").Cells(x1, 2).Value = ""

'update ECD for associated files below. x1 notes total # of projects but not selected ones
For x2 = 0 To x1 - 5
    If AssociateForm.ListBox1.Selected(x2) Then
        Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value = Worksheets("Associated Projects").Cells(x2 + 4, 3).Value
        Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = Worksheets("Associated Projects").Cells(x2 + 4, 4).Value
    End If
Next x2
AssociateForm.Hide
Call flexURL
End Sub

Private Sub CommandButton2_Click()
AssociateForm.Hide
End Sub
Attribute VB_Name = "AssumptionForm"
Attribute VB_Base = "0{9A5882E0-8094-409A-8C00-B0F15BA9FF18}{7ED12D53-74D8-4D8F-9009-57B5638D2772}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False









Private m_sngX As Single
Private m_sngY As Single
Private Sub AssumptionForm_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If Button = 1 Then
        m_sngX = Me.Width - x
        m_sngY = Me.Height - y
    End If
End Sub
Private Sub AssumptionForm_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If Button = 1 Then
        AssumptionForm.Width = m_sngX + x
        AssumptionForm.Height = m_sngY + y
    End If
End Sub



Private Sub CheckBox100_Click()

Call refreshAssump
End Sub

Private Sub CheckBox101_Click()

Call refreshAssump
End Sub

Private Sub CheckBox2_Click()
Dim tabNum As Long, x As Long, z As Long, BU As Long, subsetstr As String
tabNum = AssumptionForm.TabStrip1.Value
'If AssumptionForm.ComboBox1.Value = "PM" Then
'    subsetStr = "PM "
'Else
'    subsetStr = ""
'End If
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    subsetstr = ""
End If
BU = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value
Worksheets(subsetstr & "Assumptions").Cells(10 + 2 + 7 * tabNum, 2 + 4 * BU).Value = CheckBox2.Value
Call refreshAssump


End Sub

Private Sub CheckBox3_Click()
Dim tabNum As Long, x As Long, z As Long, BU As Long, subsetstr As String
tabNum = AssumptionForm.TabStrip1.Value
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    subsetstr = ""
End If
BU = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value
Worksheets(subsetstr & "Assumptions").Cells(10 + 3 + 7 * tabNum, 2 + 4 * BU).Value = CheckBox3.Value
Call refreshAssump

End Sub

Private Sub CheckBox4_Click()
Dim tabNum As Long, x As Long, z As Long, BU As Long, subsetstr As String
tabNum = AssumptionForm.TabStrip1.Value
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    subsetstr = ""
End If
BU = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value
Worksheets(subsetstr & "Assumptions").Cells(10 + 4 + 7 * tabNum, 2 + 4 * BU).Value = CheckBox4.Value
Call refreshAssump

End Sub

Private Sub CheckBox5_Click()
Dim tabNum As Long, x As Long, z As Long, BU As Long, subsetstr As String
tabNum = AssumptionForm.TabStrip1.Value
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    subsetstr = ""
End If
BU = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value
Worksheets(subsetstr & "Assumptions").Cells(10 + 5 + 7 * tabNum, 2 + 4 * BU).Value = CheckBox5.Value
Call refreshAssump


End Sub

Private Sub CheckBox6_Click()
Dim tabNum As Long, x As Long, z As Long, BU As Long, subsetstr As String
tabNum = AssumptionForm.TabStrip1.Value
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    subsetstr = ""
End If
BU = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value
Worksheets(subsetstr & "Assumptions").Cells(10 + 6 + 7 * tabNum, 2 + 4 * BU).Value = CheckBox6.Value
Call refreshAssump

End Sub

Private Sub CheckBox7_Click()
Dim tabNum As Long, x As Long, z As Long, BU As Long, subsetstr As String
tabNum = AssumptionForm.TabStrip1.Value
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    subsetstr = ""
End If
BU = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value
Worksheets(subsetstr & "Assumptions").Cells(10 + 7 + 7 * tabNum, 2 + 4 * BU).Value = CheckBox7.Value
Call refreshAssump


End Sub


Private Sub ComboBox1_Change()

Worksheets("Assumptions").Cells(1, 2).Value = AssumptionForm.ComboBox1.ListIndex
'Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text = ""
AssumptionForm.ComboBox2.Clear
Call refreshAssump

End Sub

Private Sub ComboBox2_Change()

Dim subsetstr As String, BU As Long, s1 As String, x As Long
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    subsetstr = ""
End If
If AssumptionForm.ComboBox2.ListIndex > -1 Then
    Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value = AssumptionForm.ComboBox2.ListIndex
End If
Call refreshAssump
'Exit Sub

If Not (Worksheets("Needs Assessment").Shapes("Drop Down 85") Is Nothing) Then
s1 = Worksheets("Needs Assessment").Shapes("Drop Down 85").ControlFormat.List(Worksheets("Needs Assessment").Shapes("Drop Down 85").ControlFormat.ListIndex)
If s1 = "BMS" And AssumptionForm.ComboBox1.Value = "BMS" Then
  If AssumptionForm.ComboBox2.ListIndex > -1 Then
    Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text = ""
    x = 2
    Do
        Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text = Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text & Worksheets(subsetstr & "Items Required").Cells(AssumptionForm.ComboBox2.ListIndex + 1, x).Value
        x = x + 1
    Loop Until Worksheets(subsetstr & "Items Required").Cells(AssumptionForm.ComboBox2.ListIndex + 1, x).Value = ""
  End If
End If
End If

End Sub

Private Sub CommandButton1_Click()
Dim x As Long

    Worksheets("Needs Assessment").Cells(Assumptionsrow(), 2).Value = TextBox1.Text
    
    AssumptionForm.Hide
    
End Sub

Private Sub CheckBox1_Click()

Dim tabNum As Long, x As Long, z As Long, BU As Long, subsetstr As String
tabNum = AssumptionForm.TabStrip1.Value
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    subsetstr = ""
End If
BU = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value
Worksheets(subsetstr & "Assumptions").Cells(10 + 1 + 7 * tabNum, 2 + 4 * BU).Value = CheckBox1.Value
Call refreshAssump
    
End Sub

Private Sub CommandButton2_Click()
Call refreshAssump
End Sub

Private Sub TabStrip1_Change()

Dim tabNum As Long, BU As Long, z As Long, subsetstr As String
    tabNum = AssumptionForm.TabStrip1.Value
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    subsetstr = ""
End If
BU = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value
'    BU = Worksheets("Assumptions").Cells(1, 2).Value
    
For z = 1 To 7 'only 5 entries in userform for entering parameters
    AssumptionForm.Controls.Item("Checkbox" & z).Value = Worksheets(subsetstr & "Assumptions").Cells(10 + z + 7 * tabNum, 2 + 4 * BU).Value
Next z
Call refreshAssump

End Sub

Private Sub TextBox11_Change()

Dim tabNum As Long, x As Long, z As Long, BU As Long, subsetstr As String
tabNum = AssumptionForm.TabStrip1.Value
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    subsetstr = ""
End If
BU = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value

Worksheets(subsetstr & "Assumptions").Cells(10 + 1 + 7 * tabNum, 3 + 4 * BU).Value = TextBox11.Value

Call refreshAssump

End Sub

Private Sub TextBox12_Change()
Dim tabNum As Long, x As Long, z As Long, BU As Long, subsetstr As String
tabNum = AssumptionForm.TabStrip1.Value
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    subsetstr = ""
End If
BU = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value

Worksheets(subsetstr & "Assumptions").Cells(10 + 2 + 7 * tabNum, 3 + 4 * BU).Value = TextBox12.Value

Call refreshAssump
End Sub

Private Sub TextBox13_Change()
Dim tabNum As Long, x As Long, z As Long, BU As Long, subsetstr As String
tabNum = AssumptionForm.TabStrip1.Value
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    subsetstr = ""
End If
BU = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value

Worksheets(subsetstr & "Assumptions").Cells(10 + 3 + 7 * tabNum, 3 + 4 * BU).Value = TextBox13.Value

Call refreshAssump
End Sub

Private Sub TextBox14_Change()
Dim tabNum As Long, x As Long, z As Long, BU As Long, subsetstr As String
tabNum = AssumptionForm.TabStrip1.Value
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    subsetstr = ""
End If
BU = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value

Worksheets(subsetstr & "Assumptions").Cells(10 + 4 + 7 * tabNum, 3 + 4 * BU).Value = TextBox14.Value

Call refreshAssump
End Sub

Private Sub TextBox15_Change()
Dim tabNum As Long, x As Long, z As Long, BU As Long, subsetstr As String
tabNum = AssumptionForm.TabStrip1.Value
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    subsetstr = ""
End If
BU = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value

Worksheets(subsetstr & "Assumptions").Cells(10 + 5 + 7 * tabNum, 3 + 4 * BU).Value = TextBox15.Value

Call refreshAssump
End Sub

Private Sub TextBox16_Change()
Dim tabNum As Long, x As Long, z As Long, BU As Long, subsetstr As String
tabNum = AssumptionForm.TabStrip1.Value
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    subsetstr = ""
End If
BU = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value

Worksheets(subsetstr & "Assumptions").Cells(10 + 6 + 7 * tabNum, 3 + 4 * BU).Value = TextBox16.Value

Call refreshAssump
End Sub

Private Sub TextBox17_Change()
Dim tabNum As Long, x As Long, z As Long, BU As Long, subsetstr As String
tabNum = AssumptionForm.TabStrip1.Value
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    subsetstr = ""
End If
BU = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value

Worksheets(subsetstr & "Assumptions").Cells(10 + 7 + 7 * tabNum, 3 + 4 * BU).Value = TextBox17.Value

Call refreshAssump
End Sub

Private Sub TextBox2_Change()
Call refreshAssump
End Sub

Private Sub TextBox3_Change()
Call refreshAssump
End Sub

Private Sub TextBox4_Enter()
'Call refreshAssump
End Sub

Private Sub TextBox4_Exit(ByVal Cancel As MSForms.ReturnBoolean)
Call refreshAssump
End Sub

Attribute VB_Name = "ConfirmForm"
Attribute VB_Base = "0{62188E5B-2864-40A2-B84B-F547EBA57058}{B7C66A56-F31B-4275-A84B-435720CFC837}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub CommandButton1_Click()
ConfirmForm.Hide
End Sub

Private Sub CommandButton2_Click()


Dim x As Long, y As Long, z As Long, tabNum As Long
Dim mypath As String
Dim IE As InternetExplorer, doc As HTMLDocument
Dim x1 As Long, x2 As Long, y1 As Long, y2 As Long

'MsgBox "Be sure to be logged into Flex in CHROME before continuing."
''tabNum = DocForm.TabStrip1.SelectedItem.index
For tabNum = 0 To 5
x2 = 0
Do
    x2 = x2 + 1
Loop Until Worksheets("Documents").Cells(x2 + 6, 2 + 7 * tabNum).Value = ""

Dim index
If x2 + 6 > 7 Then
    For x = 1 To x2 - 1
        If Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value <> "New file, not uploaded yet: " And Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value <> "Deleted: " Then
            If Worksheets("Documents").Cells(x + 6, 4 + 7 * tabNum).Value = "" Then
                Call StartDocForm
            End If
            Call deleteDoc2(Worksheets("Documents").Cells(x + 6, 4 + 7 * tabNum).Value, Worksheets("Documents").Cells(x + 6, 2 + 7 * tabNum).Value)
            Sleep 400
            y = 1
            Worksheets("Documents").Cells(x + 6, 4 + 7 * tabNum).Value = ""
            Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Deleted: "
'            Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value = downloadPath() & "\" & Worksheets("Documents").Cells(x + 6, 2 + 7 * tabNum).Value
        End If
    Next x
End If
Next tabNum
Call RefreshListbox

ConfirmForm.Hide

End Sub
Attribute VB_Name = "DocForm"
Attribute VB_Base = "0{747B3F00-6F11-4ADD-9A0B-B7E9BBCBDE97}{C8576999-3AC2-4C22-ADA9-F0298D36F846}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Private Sub CommandButton22_Click()

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long
Dim pWebAddress As String
Dim tbl As Object, p As Object, li As Object, td As Object, fld As Object, td2 As HTMLBaseElement, div As Object
Dim doc As HTMLDocument, lastAddress As String
Dim totalDocuments As Long, y As Long, yy As Long, z As Long, page As Long
Dim IE As InternetExplorer
Dim docx() As HTMLDocument
Dim IEx() As InternetExplorer
Dim shx()
Dim eachIEx()
Dim pwebAddressx() As String
Dim tabNum As Long, x As Long, docName As String, docLink As String, x9 As HTMLBaseElement, y9 As HTMLBaseElement
Dim totalTasks As Long, taskCount As Long
Dim varx() As String, varxNum() As Long, errorRevised As String, errorNotUploaded As String
    
''tabNum = DocForm.TabStrip1.SelectedItem.index

'Verify Flex URL/ID is present
Call validateURL


    If Worksheets("Documents").Cells(7, 52) = "" Then
        Call StartDocForm
        'MsgBox "Press the 'Fetch flex file info' button and try again"
        'GoTo noTasks
    End If

    taskCount = 0
    y = 1
    Do
        'Debug.Print "Task: " & Worksheets("Documents").Cells(6 + y, 52).Value
        If InStr(LCase(Worksheets("Documents").Cells(6 + y, 52).Value), "review") >= 1 Or InStr(LCase(Worksheets("Documents").Cells(6 + y, 52).Value), "tc_processing") >= 1 Then
            'Debug.Print "associating docs"
            taskCount = taskCount + 1
            x3 = taskCount - 1
            ReDim IEx(x3)
            ReDim pwebAddressx(x3)
            ReDim shx(x3)
            ReDim eachIEx(x3)
            ReDim docx(x3)

pwebAddressx(x3) = "https://portal.ul.com/Project/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "/Task/Detail/" & Worksheets("Documents").Cells(6 + y, 53).Value
Set IEx(x3) = NewValidIE(pwebAddressx(x3))
IEx(x3).Visible = True

While IEx(x3).Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Sleep 25
Do
DoEvents
Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
Set docx(x3) = IEx(x3).Document

login:
If docx(x3).getElementById("body") Is Nothing Then
    MsgBox "Log into Flex"
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    GoTo login
End If

Do
Sleep 25
Set docx(x3) = IEx(x3).Document
Loop Until Not (docx(x3).getElementById("gritternotifications") Is Nothing)

Set x9 = docx(x3).getElementById("body").Children(0).Children(3)
Set x9 = x9.Children(1)
Set x9 = x9.Children(1)
Set x9 = x9.Children(0)

If InStr(LCase(x9.innerText), LCase("COMPLETED")) > 1 Or InStr(LCase(x9.innerText), LCase("CANCELED")) > 1 Or InStr(LCase(x9.innerText), LCase("CANCELLED")) > 1 Then
    GoTo taskCompleted
End If
docx(x3).getElementById("editTask").Click

Do
Sleep 25
Set docx(x3) = IEx(x3).Document
Loop Until Not (docx(x3).getElementById("modal-task-documents") Is Nothing)
Sleep 25
Do
    DoEvents
Loop Until IEx(x3).readyState = READYSTATE_COMPLETE

    docx(x3).getElementById("modal-task-documents").Click

    Do
        Sleep 25
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("projectDocuments") Is Nothing)
    Sleep 25
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE

    Set x9 = docx(x3).getElementById("projectDocuments")
'Debug.Print "# documents available " & x9.Children(0).Children(1).Children.Length

    Do
        DoEvents
        Set docx(x3) = IEx(x3).Document
    Loop Until x9.Children(0).Children(1).Children.Length > 0

'Sleep 5000
'Set docx(x3) = IEx(x3).Document
''Debug.Print "# documents available " & x9.Children(0).Children(1).Children.Length
'Sleep 5000
'Set docx(x3) = IEx(x3).Document
''Debug.Print "# documents available " & x9.Children(0).Children(1).Children.Length

    For x = 0 To 4
    If x = 2 Then
        GoTo noComms
    End If
    x1 = 0
    Do 'New file
        If InStr(LCase(Worksheets("Documents").Cells(6 + x1, 6 + 7 * x).Value), "revised") > 0 Then
            If InStr(errorRevised, Worksheets("Documents").Cells(6 + x1, 2 + 7 * x).Value & ", ") < 1 Then
                errorRevised = errorRevised & Worksheets("Documents").Cells(6 + x1, 2 + 7 * x).Value & ", "
            End If
        End If
        If InStr(LCase(Worksheets("Documents").Cells(6 + x1, 6 + 7 * x).Value), "new file") > 0 Then
            If InStr(errorNotUploaded, Worksheets("Documents").Cells(6 + x1, 2 + 7 * x).Value & ", ") < 1 Then
                errorNotUploaded = errorNotUploaded & Worksheets("Documents").Cells(6 + x1, 2 + 7 * x).Value & ", "
            End If
        End If

        For x2 = 1 To x9.Children(0).Children(1).Children.Length
            Set y9 = x9.Children(0).Children(1).Children(x2 - 1)
            If InStr(y9.Children(0).innerText, Worksheets("Documents").Cells(6 + x1, 2 + 7 * x).Value) Then
                y9.Children(2).Children(0).Click
                Sleep 10
            End If
            'Debug.Print "looking for " & Worksheets("Documents").Cells(6 + x1, 2 + 7 * x).Value & " in : " & y9.Children(0).innerText
        Next x2
        x1 = x1 + 1
    Loop Until Worksheets("Documents").Cells(6 + x1, 2 + 7 * x).Value = ""
noComms:
    Next x
    docx(x3).getElementById("addTaskDocuments").Click
    Sleep 50
    docx(x3).getElementById("btnUpdateTask").Click

taskCompleted:
End If
    y = y + 1
Loop Until Worksheets("Documents").Cells(6 + y, 52) = ""

            'errorRevised As String, errorNotUploaded As String
If errorRevised <> "" Or errorNotUploaded <> "" Then
    MsgBox "Not all documents were associated." & vbLf & vbLf & "The following files were identified as revised and not uploaded: " & errorRevised & vbLf & vbLf & "The following files were identified as new and not uploaded: " & errorNotUploaded
End If

noTasks:
Call RefreshListbox

End Sub

Private Sub CommandButton23_Click() ' Download All

Dim x As Long, y As Long, z As Long, tabNum As Long
Dim mypath As String
Dim IE As InternetExplorer, doc As HTMLDocument
Dim x1 As Long, x2 As Long, y1 As Long, y2 As Long

MsgBox "Be sure to be logged into Flex in CHROME before continuing." & vbLf & vbLf & "Note: Any existing filepath will be changed to download directory."
''tabNum = DocForm.TabStrip1.SelectedItem.index
For tabNum = 0 To 5
x2 = 0
Do
    x2 = x2 + 1
Loop Until Worksheets("Documents").Cells(x2 + 6, 2 + 7 * tabNum).Value = ""

Dim index
If x2 > 1 Then
    For x = 1 To x2 - 1
        'Debug.Print "x = " & x
        If Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value <> "New file, not uploaded yet: " Then
            If Worksheets("Documents").Cells(x + 6, 4 + 7 * tabNum).Value = "" Then
                Call StartDocForm
            End If
            Call downloadDoc(Worksheets("Documents").Cells(x + 6, 4 + 7 * tabNum).Value, Worksheets("Documents").Cells(x + 6, 2 + 7 * tabNum).Value)
            Sleep 400
            y = 1
            Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Downloaded: "
            Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value = downloadPath() & "\" & Worksheets("Documents").Cells(x + 6, 2 + 7 * tabNum).Value
        End If
    Next x
End If
Next tabNum

If DocForm.CheckBox1.Value = True Then
    Call MoveFiles
Else
    Call RefreshListbox
End If

End Sub

Private Sub CommandButton24_Click()

MsgBox "Download button requires Chrome browswer. To enable automatic downloads without prompt, go to the Chrome settings, click Advanced. Under Privacy, click on 'Content settings'; then under Automatic Downloads click the 'Manage exceptions' button. Add a new line for 'https://portal.ul.com'."

End Sub

Private Sub CommandButton25_Click()

Call clearDocForm

End Sub

Private Sub CommandButton26_Click()

MsgBox "Make sure that the 'Flex URL' is populated on the Needs Assessment form. When this is done, click on the 'Get flex file info' button and wait for the current file information on flex to pull into the tool." & vbLf & "After this is done, you can download individually selected files or all files using the buttons shown. Note that additional guidance on configuring Chrome is given in the button with the '?'. The files will be downloaded to your default download folder but can be accessed directly from the form interface by using the 'Open Selected' button." & vbLf & "The 'Upload All' button will upload all documents up to flex and should be used before the 'Associated all categorized documents...' button." & vbLf & "New files can be added by either the 'Add New Files' button or by drag and drop onto the file field."

End Sub

Private Sub CommandButton27_Click() 'upload selected

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long
Dim pWebAddress As String
Dim tbl As Object, p As Object, li As Object, td As Object, fld As Object, td2 As HTMLBaseElement, div As Object
Dim doc As HTMLDocument, lastAddress As String
Dim totalDocuments As Long, y As Long, yy As Long, z As Long, page As Long
Dim IE As InternetExplorer
Dim docx(6) As HTMLDocument
Dim IEx(6) As InternetExplorer
Dim shx(6)
Dim eachIEx(6)
Dim pwebAddressx(6) As String
Dim tabNum As Long, x As Long, docName As String, docLink As String, x9 As HTMLBaseElement
Dim totalTasks As Long
Dim varx(6), varxNum(6)
Dim debugText As String, varxLenError As String
Dim varCol(6) As New Collection, IEcol(6) As New Collection, ColCount(6) As Long

''tabNum = DocForm.TabStrip1.SelectedItem.index
'    DocForm.Controls.item("ListView" & tabNum + 1).ListItems.Clear
If tabNum = 6 Then
    MsgBox "Upload individual files from the individual file tabs"
    GoTo errorEnd
End If

MsgBox "NOTE: Wait for all uploads to complete before using mouse and keyboard."
'Verify Flex URL/ID is present
For tabNum = 0 To 5
Call validateURL
debugText = ""

'x3 = 0
x3 = tabNum
'Do
varx(x3) = ""
y = 0
Worksheets("Documents").Cells(5, 2 + 7 * x3).Value = ""
If Worksheets("Documents").Cells(7 + y, 2 + 7 * x3).Value <> "" Then
    Do
        If Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value <> "" Then
            If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems(y + 1).Selected = True Then
                If Dir(Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value) = "" Then
                    debugText = debugText & vbLf & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value
                Else
                    If Len(varx(x3) & Chr(34) & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value & Chr(34) & " ") < 258 Then
                        Worksheets("Documents").Cells(5, 2 + 7 * x3).Value = Worksheets("Documents").Cells(5, 2 + 7 * x3).Value & Chr(34) & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value & Chr(34) & " "
                        Worksheets("Documents").Cells(7 + y, 6 + 7 * x3).Value = "Uploaded: "
                        varx(x3) = varx(x3) & Chr(34) & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value & Chr(34) & " "
                    Else
                        'Debug.Print "Node created :" & varx(x3)
                        varCol(x3).Add varx(x3) ', varCol(x3).Count + 1
                        varx(x3) = Chr(34) & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value & Chr(34) & " "
                        'varxLenError = varxLenError & ", " & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value
                    End If
                End If
            End If
        End If
        y = y + 1
    Loop Until Worksheets("Documents").Cells(7 + y, 2 + 7 * x3).Value = ""
    varCol(x3).Add varx(x3) ', varCol(x3).Count+1
End If
'End If
varx(x3) = Worksheets("Documents").Cells(5, 2 + 7 * x3).Value

pwebAddressx(0) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&Filters.ariaDocumentTypeId=" & "12981bac-5d2f-43e6-9bf8-1404fecf3701"
pwebAddressx(1) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&Filters.ariaDocumentTypeId=" & "dc055d4f-0835-4972-8231-2aeea611ec49"
pwebAddressx(2) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&Filters.ariaDocumentTypeId=" & "a19b4b06-32a8-45d7-9083-961e7d92e242"
pwebAddressx(3) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&Filters.ariaDocumentTypeId=" & "a98c8961-7385-4933-a90b-9ab9885c654b"
pwebAddressx(4) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&Filters.ariaDocumentTypeId=" & "738429ff-2d0d-48ba-891c-168499dc9555"
pwebAddressx(5) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&Filters.ariaDocumentTypeId=" & "c3da7c2b-2350-4306-964b-3ea5b8846abc"

x3 = tabNum
'Do
If varCol(x3).Count = 0 Then
    GoTo noDocs
End If
For y3 = 1 To varCol(x3).Count

varx(x3) = varCol(x3).Item(y3)

Set IEx(x3) = NewValidIE(pwebAddressx(x3))
IEcol(x3).Add IEx(x3)

Sleep 25
Do
DoEvents
Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
Set docx(x3) = IEx(x3).Document

login:
If docx(x3).getElementById("body") Is Nothing Then
    MsgBox "Log into Flex"
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    GoTo login
End If

Do
Sleep 25
Set docx(x3) = IEx(x3).Document
Loop Until Not (docx(x3).getElementById("upload") Is Nothing) '(docx(x3).getElementsByTagName("div") Is Nothing)

'/html/body/form/div[2]/fieldset[1]/div/div/div/input
    docx(x3).getElementById("upload").Click
    
    Sleep 400
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 200
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
Set x9 = docx(x3).body
Set x9 = x9.Children(15)
Set x9 = x9.Children(0)
Set x9 = x9.Children(0)
Set x9 = x9.Children(1)
Set x9 = x9.Children(0)
Set x9 = x9.Children(0)
Set x9 = x9.Children(1)
Set x9 = x9.Children(1)

    Worksheets("Documents").Cells(5, 2 + 7 * x3).Copy
    x9.Focus
    
    'Set x9 = Nothing
    'Set docx(x3) = Nothing
    'Set IEx(x3) = Nothing
        
    Sleep 50
    SendKeys " "

    
'''at file picker window here. User to paste copied file information into window
    'Debug.Print varx(x3)
    Sleep 1000

    SendKeys (Replace(Replace(varx(x3), "(", "{(}"), ")", "{)}"))
    Sleep 100
    SendKeys "{ENTER}"
    
Next y3
    
noDocs:
'    x3 = x3 + 1
'Loop Until x3 = 6
    
    
x3 = tabNum
'Do
If varCol(x3).Count = 0 Then
    GoTo noDocs2
End If
For y3 = 1 To varCol(x3).Count
    
Set IEx(x3) = IEcol(x3).Item(y3)

While IEx(x3).Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Sleep 25
Do
DoEvents
Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
Set docx(x3) = IEx(x3).Document
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    docx(x3).getElementById("apply").Click
    
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    docx(x3).getElementById("Overwrite").Click

    Sleep 50
    docx(x3).getElementById("DocumentTypeId").selectedIndex = x3
    '/html/body/div[8]/div/form/div[4]/input
    Set x9 = docx(x3).body
    Set x9 = docx(x3).getElementById("apply").parentElement.parentElement.parentElement.parentElement.parentElement.parentElement
    Set x9 = x9.Children(3)
    Set x9 = x9.Children(1)
    x9.Click
'    IEx(x3).Visible = False
noDocs2:
Next y3

Next tabNum

If debugText <> "" Then
    MsgBox "The following file names differ in flex from the downloaded file name and will need to be manually uploaded: " & vbLf & debugText & vbLf & vbLf & "The following files were unable to upload due to field size limitations: " & varxLenError
End If

Call RefreshListbox
errorEnd:


End Sub

Private Sub CommandButton29_Click()

    Dim SaveDriveDir As String, mypath As String, s1 As String
    Dim fName As Variant
    Dim tabNum As Long, x As Long
    
    tabNum = 1
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    x = 0
    Do
        x = x + 1
    Loop Until Worksheets("Documents").Cells(7 + x - 1, 2 + 7 * tabNum).Value = ""
    
    SaveDriveDir = CurDir
    mypath = SaveDriveDir
    ChDrive mypath
    ChDir mypath
    fName = Application.GetOpenFilename(Title:="Select documents to add", MultiSelect:=True) 'filefilter:="Rich*") '  Text Format (*.rtf*")
    If Not IsArray(fName) Then
        If fName = False Then
        GoTo Cancelled:
        End If
    End If

    If IsArray(fName) Then
        For i = LBound(fName) To UBound(fName)
            s1 = fName(i)
            Call addDocItem(tabNum, getFNameAndExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
        Next i
    Else
            s1 = fName
            Call addDocItem(tabNum, getFNameNoExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
    End If
Call RefreshListbox
Cancelled:
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
Exit Sub

errHandler:
    MsgBox "There is an error"


End Sub

Private Sub CommandButton30_Click()

    Dim SaveDriveDir As String, mypath As String, s1 As String
    Dim fName As Variant
    Dim tabNum As Long, x As Long
    
    tabNum = 2
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    x = 0
    Do
        x = x + 1
    Loop Until Worksheets("Documents").Cells(7 + x - 1, 2 + 7 * tabNum).Value = ""
    
    SaveDriveDir = CurDir
    mypath = SaveDriveDir
    ChDrive mypath
    ChDir mypath
    fName = Application.GetOpenFilename(Title:="Select documents to add", MultiSelect:=True) 'filefilter:="Rich*") '  Text Format (*.rtf*")
    If Not IsArray(fName) Then
        If fName = False Then
        GoTo Cancelled:
        End If
    End If

    If IsArray(fName) Then
        For i = LBound(fName) To UBound(fName)
            s1 = fName(i)
            Call addDocItem(tabNum, getFNameAndExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
        Next i
    Else
            s1 = fName
            Call addDocItem(tabNum, getFNameNoExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
    End If
Call RefreshListbox
Cancelled:
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
Exit Sub

errHandler:
    MsgBox "There is an error"


End Sub

Private Sub CommandButton31_Click()

    Dim SaveDriveDir As String, mypath As String, s1 As String
    Dim fName As Variant
    Dim tabNum As Long, x As Long
    
    tabNum = 3
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    x = 0
    Do
        x = x + 1
    Loop Until Worksheets("Documents").Cells(7 + x - 1, 2 + 7 * tabNum).Value = ""
    
    SaveDriveDir = CurDir
    mypath = SaveDriveDir
    ChDrive mypath
    ChDir mypath
    fName = Application.GetOpenFilename(Title:="Select documents to add", MultiSelect:=True) 'filefilter:="Rich*") '  Text Format (*.rtf*")
    If Not IsArray(fName) Then
        If fName = False Then
        GoTo Cancelled:
        End If
    End If

    If IsArray(fName) Then
        For i = LBound(fName) To UBound(fName)
            s1 = fName(i)
            Call addDocItem(tabNum, getFNameAndExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
        Next i
    Else
            s1 = fName
            Call addDocItem(tabNum, getFNameNoExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
    End If
Call RefreshListbox
Cancelled:
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
Exit Sub

errHandler:
    MsgBox "There is an error"


End Sub

Private Sub CommandButton32_Click()

    Dim SaveDriveDir As String, mypath As String, s1 As String
    Dim fName As Variant
    Dim tabNum As Long, x As Long
    
    tabNum = 4
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    x = 0
    Do
        x = x + 1
    Loop Until Worksheets("Documents").Cells(7 + x - 1, 2 + 7 * tabNum).Value = ""
    
    SaveDriveDir = CurDir
    mypath = SaveDriveDir
    ChDrive mypath
    ChDir mypath
    fName = Application.GetOpenFilename(Title:="Select documents to add", MultiSelect:=True) 'filefilter:="Rich*") '  Text Format (*.rtf*")
    If Not IsArray(fName) Then
        If fName = False Then
        GoTo Cancelled:
        End If
    End If

    If IsArray(fName) Then
        For i = LBound(fName) To UBound(fName)
            s1 = fName(i)
            Call addDocItem(tabNum, getFNameAndExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
        Next i
    Else
            s1 = fName
            Call addDocItem(tabNum, getFNameNoExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
    End If
Call RefreshListbox
Cancelled:
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
Exit Sub

errHandler:
    MsgBox "There is an error"


End Sub

Private Sub CommandButton33_Click()

    Dim SaveDriveDir As String, mypath As String, s1 As String
    Dim fName As Variant
    Dim tabNum As Long, x As Long
    
    tabNum = 5
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    x = 0
    Do
        x = x + 1
    Loop Until Worksheets("Documents").Cells(7 + x - 1, 2 + 7 * tabNum).Value = ""
    
    SaveDriveDir = CurDir
    mypath = SaveDriveDir
    ChDrive mypath
    ChDir mypath
    fName = Application.GetOpenFilename(Title:="Select documents to add", MultiSelect:=True) 'filefilter:="Rich*") '  Text Format (*.rtf*")
    If Not IsArray(fName) Then
        If fName = False Then
        GoTo Cancelled:
        End If
    End If

    If IsArray(fName) Then
        For i = LBound(fName) To UBound(fName)
            s1 = fName(i)
            Call addDocItem(tabNum, getFNameAndExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
        Next i
    Else
            s1 = fName
            Call addDocItem(tabNum, getFNameNoExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
    End If
Call RefreshListbox
Cancelled:
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
Exit Sub

errHandler:
    MsgBox "There is an error"


End Sub

Private Sub CommandButton35_Click() ' deleteAll

'Dim x As Long, y As Long, z As Long, tabNum As Long
'Dim mypath As String
'Dim IE As InternetExplorer, doc As HTMLDocument
'Dim x1 As Long, x2 As Long, y1 As Long, y2 As Long
'
'MsgBox "Be sure to be logged into Flex in CHROME before continuing."
'''tabNum = DocForm.TabStrip1.SelectedItem.index
'For tabNum = 0 To 5
'x2 = 1
'Do
'    x2 = x2 + 1
'Loop Until Worksheets("Documents").Cells(x2 + 6, 2 + 7 * tabNum).Value = ""
'
'Dim index
'If x2 > 1 Then
'    For x = 1 To x2 - 1
'        'Debug.Print "x = " & x
'        If Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value <> "New file, not uploaded yet: " Then
'            Call downloadDoc(Worksheets("Documents").Cells(x + 6, 4 + 7 * tabNum).Value, Worksheets("Documents").Cells(x + 6, 2 + 7 * tabNum).Value)
'            Sleep 400
'            y = 1
'            Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Downloaded: "
'            Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value = downloadPath() & "\" & Worksheets("Documents").Cells(x + 6, 2 + 7 * tabNum).Value
'        End If
'    Next x
'End If
'Next tabNum
'Call RefreshListbox
ConfirmForm.Show

End Sub

Private Sub CommandButton36_Click()
Call DownloadSelected(0)
End Sub

Private Sub CommandButton37_Click()
Call DownloadSelected(1)


End Sub

Private Sub CommandButton38_Click()
Call DownloadSelected(2)
End Sub

Private Sub CommandButton39_Click()
Call DownloadSelected(3)
End Sub

Private Sub CommandButton40_Click()
Call DownloadSelected(4)
End Sub

Private Sub CommandButton41_Click()
Call DownloadSelected(5)
End Sub

Private Sub CommandButton42_Click()
Call uploadFlexFiles(0)
End Sub

Private Sub CommandButton43_Click()
Call uploadFlexFiles(1)
End Sub

Private Sub CommandButton44_Click()
Call uploadFlexFiles(2)
End Sub

Private Sub CommandButton45_Click()
Call uploadFlexFiles(3)
End Sub

Private Sub CommandButton46_Click()
Call uploadFlexFiles(4)
End Sub

Private Sub CommandButton47_Click()
Call uploadFlexFiles(5)
End Sub

Private Sub CommandButton48_Click()
Dim x As Long, z As Long, tabNum As Long
Dim Shex As Object

tabNum = 0

Set Shex = CreateObject("Shell.Application")
''tabNum = DocForm.TabStrip1.SelectedItem.index
'AssumptionForm.Controls.item("data" & i).Value
'For tabNum = 0 To 5
'    DocForm.Controls.item("ListView" & tabNum + 1).ListItems.Clear

x = 0
If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count > 0 Then
    For x = 1 To DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count
        If ListView1.ListItems(x).Selected = True Then
            If Dir(Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value) = "" Then
                MsgBox "Filepath not set. Download file before opening."
            Else
                Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
                ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
            End If
        End If
    Next x
End If
'Next tabNum

Call RefreshListbox

End Sub

Private Sub CommandButton49_Click()
Dim x As Long, z As Long, tabNum As Long
Dim Shex As Object

tabNum = 1

Set Shex = CreateObject("Shell.Application")
''tabNum = DocForm.TabStrip1.SelectedItem.index
'AssumptionForm.Controls.item("data" & i).Value
'For tabNum = 0 To 5
'    DocForm.Controls.item("ListView" & tabNum + 1).ListItems.Clear

x = 0
If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count > 0 Then
    For x = 1 To DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count
        'Debug.Print x
        If ListView1.ListItems(x).Selected = True Then
            If Dir(Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value) = "" Then
                MsgBox "Filepath not set. Download file before opening."
            Else
                Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
                ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
            End If
'        ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
        End If
    Next x
End If
'Next tabNum

Call RefreshListbox
End Sub

Private Sub CommandButton50_Click()
Dim x As Long, z As Long, tabNum As Long
Dim Shex As Object

tabNum = 2

Set Shex = CreateObject("Shell.Application")
''tabNum = DocForm.TabStrip1.SelectedItem.index
'AssumptionForm.Controls.item("data" & i).Value
'For tabNum = 0 To 5
'    DocForm.Controls.item("ListView" & tabNum + 1).ListItems.Clear

x = 0
If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count > 0 Then
    For x = 1 To DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count
        If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems(x).Selected = True Then
            If Dir(Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value) = "" Then
                MsgBox "Filepath not set. Download file before opening."
            Else
                Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
                ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
            End If
'         Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
'        ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
        End If
    Next x
End If
'Next tabNum

Call RefreshListbox
End Sub

Private Sub CommandButton51_Click()
Dim x As Long, z As Long, tabNum As Long
Dim Shex As Object

tabNum = 3

Set Shex = CreateObject("Shell.Application")
''tabNum = DocForm.TabStrip1.SelectedItem.index
'AssumptionForm.Controls.item("data" & i).Value
'For tabNum = 0 To 5
'    DocForm.Controls.item("ListView" & tabNum + 1).ListItems.Clear

x = 0
If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count > 0 Then
    For x = 1 To DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count
        If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems(x).Selected = True Then
            If Dir(Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value) = "" Then
                MsgBox "Filepath not set. Download file before opening."
            Else
                Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
                ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
            End If
'         Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
'        ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
        End If
    Next x
End If
'Next tabNum

Call RefreshListbox
End Sub

Private Sub CommandButton52_Click()
Dim x As Long, z As Long, tabNum As Long
Dim Shex As Object

tabNum = 4

Set Shex = CreateObject("Shell.Application")
''tabNum = DocForm.TabStrip1.SelectedItem.index
'AssumptionForm.Controls.item("data" & i).Value
'For tabNum = 0 To 5
'    DocForm.Controls.item("ListView" & tabNum + 1).ListItems.Clear

x = 0
If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count > 0 Then
    For x = 1 To DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count
        If ListView1.ListItems(x).Selected = True Then
            If Dir(Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value) = "" Then
                MsgBox "Filepath not set. Download file before opening."
            Else
                Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
                ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
            End If
'         Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
'        ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
        End If
    Next x
End If
'Next tabNum

Call RefreshListbox
End Sub

Private Sub CommandButton53_Click()
Dim x As Long, z As Long, tabNum As Long
Dim Shex As Object

tabNum = 5

Set Shex = CreateObject("Shell.Application")
''tabNum = DocForm.TabStrip1.SelectedItem.index
'AssumptionForm.Controls.item("data" & i).Value
'For tabNum = 0 To 5
'    DocForm.Controls.item("ListView" & tabNum + 1).ListItems.Clear

x = 0
If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count > 0 Then
    For x = 1 To DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count
        If ListView1.ListItems(x).Selected = True Then
            If Dir(Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value) = "" Then
                MsgBox "Filepath not set. Download file before opening."
            Else
                Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
                ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
            End If
'         Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
'        ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
        End If
    Next x
End If
'Next tabNum

Call RefreshListbox
End Sub

Private Sub CommandButton54_Click()
'deleteDoc(tabNum As Long, row As Long, docType As String)
Call deleteSelected2(0)

End Sub

Private Sub CommandButton55_Click()
deleteSelected2 (1)
End Sub

Private Sub CommandButton56_Click()
deleteSelected2 (2)
End Sub

Private Sub CommandButton57_Click()
deleteSelected2 (3)
End Sub

Private Sub CommandButton58_Click()
deleteSelected2 (4)
End Sub

Private Sub CommandButton59_Click()
deleteSelected2 (5)
End Sub

Private Sub CommandButton60_Click()

'MsgBox "This button will associate all documents identified as Reports, Reference Materials (figures and illustrations), Test Records and Datasheets, and Facility Assessments with any tasks containing the word 'review' or 'TC_Processing'."
Call MoveFiles

End Sub

Private Sub ListView1_DblClick()
Dim x As Long, z As Long, tabNum As Long
Dim Shex As Object
tabNum = 0
Set Shex = CreateObject("Shell.Application")
x = 0
If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count > 0 Then
    For x = 1 To DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count
        If ListView1.ListItems(x).Selected = True Then
            If Dir(Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value) = "" Then
                MsgBox "Filepath not set. Download file before opening."
            Else
                Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
                ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
            End If
'         Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
'        ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
        End If
    Next x
End If
Call RefreshListbox
End Sub
Private Sub ListView2_DblClick()
Dim x As Long, z As Long, tabNum As Long
Dim Shex As Object
tabNum = 1
Set Shex = CreateObject("Shell.Application")
x = 0
If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count > 0 Then
    For x = 1 To DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count
        If ListView2.ListItems(x).Selected = True Then
            If Dir(Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value) = "" Then
                MsgBox "Filepath not set. Download file before opening."
            Else
                Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
                ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
            End If
'         Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
'        ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
        End If
    Next x
End If
Call RefreshListbox
End Sub
Private Sub ListView3_DblClick()
Dim x As Long, z As Long, tabNum As Long
Dim Shex As Object
tabNum = 2
Set Shex = CreateObject("Shell.Application")
x = 0
If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count > 0 Then
    For x = 1 To DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count
        If ListView3.ListItems(x).Selected = True Then
            If Dir(Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value) = "" Then
                MsgBox "Filepath not set. Download file before opening."
            Else
                Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
                ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
            End If
'         Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
'        ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
        End If
    Next x
End If
Call RefreshListbox
End Sub
Private Sub ListView4_DblClick()
Dim x As Long, z As Long, tabNum As Long
Dim Shex As Object
tabNum = 3
Set Shex = CreateObject("Shell.Application")
x = 0
If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count > 0 Then
    For x = 1 To DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count
        If ListView4.ListItems(x).Selected = True Then
            If Dir(Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value) = "" Then
                MsgBox "Filepath not set. Download file before opening."
            Else
                Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
                ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
            End If
'         Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
'        ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
        End If
    Next x
End If
Call RefreshListbox
End Sub
Private Sub ListView5_DblClick()
Dim x As Long, z As Long, tabNum As Long
Dim Shex As Object
tabNum = 4
Set Shex = CreateObject("Shell.Application")
x = 0
If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count > 0 Then
    For x = 1 To DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count
        If ListView5.ListItems(x).Selected = True Then
            If Dir(Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value) = "" Then
                MsgBox "Filepath not set. Download file before opening."
            Else
                Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
                ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
            End If
'         Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
'        ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
        End If
    Next x
End If
Call RefreshListbox
End Sub
Private Sub ListView6_DblClick()
Dim x As Long, z As Long, tabNum As Long
Dim Shex As Object
tabNum = 5
Set Shex = CreateObject("Shell.Application")
x = 0
If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count > 0 Then
    For x = 1 To DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count
        If ListView6.ListItems(x).Selected = True Then
            If Dir(Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value) = "" Then
                MsgBox "Filepath not set. Download file before opening."
            Else
                Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
                ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
            End If
'         Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
'        ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
        End If
    Next x
End If
Call RefreshListbox
End Sub

'Dim WithEvents ListView1 as new
Private Sub ListView1_OLEDragDrop(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, Shift As Integer, x As Single, y As Single)

Dim i As Integer
Dim li As ListItem
Dim SaveDriveDir As String, mypath As String, s1 As String
Dim fName As Variant
Dim tabNum As Long
tabNum = 0
If Data.GetFormat(15) = True Then
For i = 1 To Data.files.Count
    s1 = Data.files(i)
    Call addDocItem(tabNum, getFNameAndExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
    Call RefreshListbox
Next
End If
End Sub

Private Sub ListView2_OLEDragDrop(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, Shift As Integer, x As Single, y As Single)

Dim i As Integer
Dim li As ListItem
Dim SaveDriveDir As String, mypath As String, s1 As String
Dim fName As Variant
Dim tabNum As Long
tabNum = 1
If Data.GetFormat(15) = True Then
For i = 1 To Data.files.Count
    s1 = Data.files(i)
    Call addDocItem(tabNum, getFNameAndExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
    Call RefreshListbox
Next
End If
End Sub

Private Sub ListView3_OLEDragDrop(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, Shift As Integer, x As Single, y As Single)

Dim i As Integer
Dim li As ListItem
Dim SaveDriveDir As String, mypath As String, s1 As String
Dim fName As Variant
Dim tabNum As Long
tabNum = 2
If Data.GetFormat(15) = True Then
For i = 1 To Data.files.Count
    s1 = Data.files(i)
    Call addDocItem(tabNum, getFNameAndExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
    Call RefreshListbox
Next
End If
End Sub

Private Sub ListView4_OLEDragDrop(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, Shift As Integer, x As Single, y As Single)

Dim i As Integer
Dim li As ListItem
Dim SaveDriveDir As String, mypath As String, s1 As String
Dim fName As Variant
Dim tabNum As Long
tabNum = 3
If Data.GetFormat(15) = True Then
For i = 1 To Data.files.Count
    s1 = Data.files(i)
    Call addDocItem(tabNum, getFNameAndExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
    Call RefreshListbox
Next
End If
End Sub

Private Sub ListView5_OLEDragDrop(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, Shift As Integer, x As Single, y As Single)

Dim i As Integer
Dim li As ListItem
Dim SaveDriveDir As String, mypath As String, s1 As String
Dim fName As Variant
Dim tabNum As Long
tabNum = 4
If Data.GetFormat(15) = True Then
For i = 1 To Data.files.Count
    s1 = Data.files(i)
    Call addDocItem(tabNum, getFNameAndExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
    Call RefreshListbox
Next
End If
End Sub

Private Sub ListView6_OLEDragDrop(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, Shift As Integer, x As Single, y As Single)

Dim i As Integer
Dim li As ListItem
Dim SaveDriveDir As String, mypath As String, s1 As String
Dim fName As Variant
Dim tabNum As Long
tabNum = 5
If Data.GetFormat(15) = True Then
For i = 1 To Data.files.Count
    s1 = Data.files(i)
    Call addDocItem(tabNum, getFNameAndExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
    Call RefreshListbox
Next
End If
End Sub

Private Sub ComboBox3_Change()
    Call RefreshListbox
End Sub

Private Sub CommandButton15_Click()
'confirmBox.Show

End Sub


Private Sub CommandButton16_Click() ' Associate Selected Documents with Task Button
Dim x As Long, z As Long, tabNum As Long

''tabNum = DocForm.TabStrip1.SelectedItem.index
'x = 0
'Do
'    If DocForm.ListBox1.Selected(x) Then
'        If InStr(Worksheets("Documents").Cells(x + 7, 6 + 7 * tabNum).Value, "Added to task " & DocForm.ComboBox2.Value & ": ") < 1 Then
'            Worksheets("Documents").Cells(x + 7, 6 + 7 * tabNum).Value = Worksheets("Documents").Cells(x + 7, 6 + 7 * tabNum).Value & "Added to task " & DocForm.ComboBox2.Value & ": "
'        End If
'        If InStr(Worksheets("Documents").Cells(x + 7, 5 + 7 * tabNum).Value, DocForm.ComboBox2.Value) < 1 Then
'            Worksheets("Documents").Cells(x + 7, 6 + 7 * tabNum).Value = Worksheets("Documents").Cells(x + 7, 6 + 7 * tabNum).Value & "Added to task " & DocForm.ComboBox2.Value & ": "
'        End If
'        If InStr(Worksheets("Documents").Cells(x + 7, 6 + 7 * tabNum).Value, "Remove from task " & DocForm.ComboBox2.Value & ": ") < 1 Then
'            Worksheets("Documents").Cells(x + 7, 6 + 7 * tabNum).Value = Replace(Worksheets("Documents").Cells(x + 7, 6 + 7 * tabNum).Value, "Remove from task " & DocForm.ComboBox2.Value & ": ", "")
'        End If
'    End If
'    x = x + 1
'Loop Until x >= DocForm.ListBox1.ListCount
'
'Call RefreshListbox ()

End Sub

Private Sub CommandButton17_Click() 'Remove Document Association
Dim x As Long, z As Long, tabNum As Long

''tabNum = DocForm.TabStrip1.SelectedItem.index
'x = 0
'Do
'    If DocForm.ListBox1.Selected(x) Then
'        If InStr(Worksheets("Documents").Cells(x + 7, 6 + 7 * tabNum).Value, "Added to task " & DocForm.ComboBox2.Value & ": ") > 0 Then
'            Worksheets("Documents").Cells(x + 7, 6 + 7 * tabNum).Value = Replace(Worksheets("Documents").Cells(x + 7, 6 + 7 * tabNum).Value, "Added to task " & DocForm.ComboBox2.Value & ": ", "")
'        End If
'        If InStr(Worksheets("Documents").Cells(x + 7, 6 + 7 * tabNum).Value, "Remove from task " & DocForm.ComboBox2.Value & ": ") < 1 Then
'            Worksheets("Documents").Cells(x + 7, 6 + 7 * tabNum).Value = Worksheets("Documents").Cells(x + 7, 6 + 7 * tabNum).Value & "Added to task " & DocForm.ComboBox2.Value & ": "
'        End If
'        If InStr(Worksheets("Documents").Cells(x + 7, 5 + 7 * tabNum).Value, DocForm.ComboBox2.Value) > 0 Then
'            Worksheets("Documents").Cells(x + 7, 6 + 7 * tabNum).Value = Worksheets("Documents").Cells(x + 7, 6 + 7 * tabNum).Value & "Remove from task " & DocForm.ComboBox2.Value & ": "
'        End If
'    End If
'    x = x + 1
'Loop Until x >= DocForm.ListBox1.ListCount

'Call RefreshListbox ()

End Sub

Private Sub CommandButton19_Click() 'reupload

'link for re-upload option?
'https://portal.ul.com/Container/UploadMultiple/cec0d3a133964422bda018fd528082d?entityType=Document&containerId=b6ef5e387...&reupload=True&assetId=cec0d3a1

'go to "upload doc" for project, choose over-write and process for each file type.
Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, y3 As Long, s3 As String, x4 As Long
Dim pWebAddress As String
Dim tbl As Object, p As Object, li As Object, td As Object, fld As Object, td2 As HTMLBaseElement, div As Object
Dim doc As HTMLDocument, lastAddress As String
Dim totalDocuments As Long, y As Long, yy As Long, z As Long, page As Long
Dim IE As InternetExplorer
Dim docx(6) As HTMLDocument
Dim IEx(6) As InternetExplorer
Dim shx(6)
Dim eachIEx(6)
Dim pwebAddressx(6) As String
Dim tabNum As Long, x As Long, docName As String, docLink As String, x9 As HTMLBaseElement
Dim totalTasks As Long
Dim varx(6), varxNum(6)
Dim debugText As String, varxLenError As String, debugNoFile As String
Dim varCol(6) As New Collection, IEcol(6) As New Collection, ColCount(6) As Long

MsgBox "NOTE: Wait for all uploads to complete before using mouse and keyboard." & vbLf & vbLf & "Press Start button again before downloading or making the task-document associations"
'Verify Flex URL/ID is present
Call validateURL
debugText = ""

x3 = 0
Do
''Debug.Print "X3 = " & x3
varx(x3) = ""
y = 0
Worksheets("Documents").Cells(5, 2 + 7 * x3).Value = ""
If Worksheets("Documents").Cells(7 + y, 2 + 7 * x3).Value <> "" Then
    Do
        If Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value <> "" Then
            If Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value = "" Then
                debugNoFile = debugNoFile & vbLf & Worksheets("Documents").Cells(7 + y, 2 + 7 * x3).Value
            End If
            If Dir(Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value) = "" Then
                debugText = debugText & vbLf & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value
            Else
                If Len(varx(x3) & Chr(34) & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value & Chr(34) & " ") - InStr(varx(x3), Chr(34)) + 1 < 258 Then
                    Worksheets("Documents").Cells(5, 2 + 7 * x3).Value = Worksheets("Documents").Cells(5, 2 + 7 * x3).Value & Chr(34) & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value & Chr(34) & " "
                    Worksheets("Documents").Cells(7 + y, 6 + 7 * x3).Value = "Uploaded: "
                    If Len(varx(x3)) = 0 Then
                        varx(x3) = getFDirectory(Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value) & " " & Chr(34) & getFNameAndExt(Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value) & Chr(34) & " "
                        Worksheets("Documents").Cells(7 + y, 6 + 7 * x3).Value = "Uploaded: "
                    Else
                        If InStr(varx(x3), getFDirectory(Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value)) > 0 Then
                            varx(x3) = varx(x3) & Chr(34) & getFNameAndExt(Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value) & Chr(34) & " "
                        Else
                            'Debug.Print "Node created per directory change :" & varx(x3)
                            varCol(x3).Add varx(x3) ', varCol(x3).Count + 1
                            varx(x3) = getFDirectory(Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value) & " " & Chr(34) & getFNameAndExt(Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value) & Chr(34) & " "
                            Worksheets("Documents").Cells(7 + y, 6 + 7 * x3).Value = "Uploaded: "
                            varxLenError = varxLenError & ", " & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value
                        End If
                    End If
                Else
                    'Debug.Print "Node created per string length limitation:" & varx(x3)
                    varCol(x3).Add varx(x3) ', varCol(x3).Count + 1
                    varx(x3) = getFDirectory(Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value) & " " & Chr(34) & getFNameAndExt(Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value) & Chr(34) & " "
                    Worksheets("Documents").Cells(7 + y, 6 + 7 * x3).Value = "Uploaded: "
                    varxLenError = varxLenError & ", " & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value
                End If
            End If
        End If
        y = y + 1
    Loop Until Worksheets("Documents").Cells(7 + y, 2 + 7 * x3).Value = ""
    'Debug.Print "Node created per completion of doc type:" & varx(x3)
    varCol(x3).Add varx(x3) ', varCol(x3).Count+1
End If
    varx(x3) = Worksheets("Documents").Cells(5, 2 + 7 * x3).Value
x3 = x3 + 1
Loop Until x3 = 6

x3 = 0
Do
    ''Debug.Print "X3 = " & x3
    For y3 = 1 To varCol(x3).Count
        ''Debug.Print y3 & ": " & varCol(x3).item(y3)
    Next y3
    x3 = x3 + 1
Loop Until x3 = 6


pwebAddressx(0) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "12981bac-5d2f-43e6-9bf8-1404fecf3701"
pwebAddressx(1) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "dc055d4f-0835-4972-8231-2aeea611ec49"
pwebAddressx(2) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "a19b4b06-32a8-45d7-9083-961e7d92e242"
pwebAddressx(3) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "a98c8961-7385-4933-a90b-9ab9885c654b"
pwebAddressx(4) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "738429ff-2d0d-48ba-891c-168499dc9555"
pwebAddressx(5) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "c3da7c2b-2350-4306-964b-3ea5b8846abc"

x3 = 0
Do

'If varx(x3) = "" Then
''Debug.Print varCol(x3).Count
If varCol(x3).Count = 0 Then
    GoTo noDocs
End If
For y3 = 1 To varCol(x3).Count

varx(x3) = varCol(x3).Item(y3)
If varx(x3) = "" Then
    GoTo noDocs
End If

Set IEx(x3) = NewValidIE(pwebAddressx(x3))
IEx(x3).Visible = True
IEcol(x3).Add IEx(x3)

Sleep 25
Do
DoEvents
Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
Set docx(x3) = IEx(x3).Document

login:
If docx(x3).getElementById("body") Is Nothing Then
    MsgBox "Log into Flex"
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    GoTo login
End If

Do
Sleep 25
Set docx(x3) = IEx(x3).Document
Loop Until Not (docx(x3).getElementById("upload") Is Nothing) '(docx(x3).getElementsByTagName("div") Is Nothing)

'/html/body/form/div[2]/fieldset[1]/div/div/div/input
    docx(x3).getElementById("upload").Click
    
    Sleep 400
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 200
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
'    Set docx(x3) = IEx(x3).Document
'Set x9 = docx(x3).body
'Set x9 = x9.Children(15)
'Set x9 = x9.Children(0)
'Set x9 = x9.Children(0)
'Set x9 = x9.Children(1)
'Set x9 = x9.Children(0)
'Set x9 = x9.Children(0)
'Set x9 = x9.Children(1)
'Set x9 = x9.Children(1)
uploadFormPending:
    Set docx(x3) = IEx(x3).Document
Set x9 = docx(x3).body
For Each li In docx(x3).getElementsByTagName("button")
    Debug.Print li.innerText
    If li.innerText = "Browse" Then
        Set x9 = li
        Set x9 = x9.parentElement
        'Set x9 = x9.NextSibling
        GoTo uploadFormDone
        
    End If
Next li
GoTo uploadFormPending

uploadFormDone:
Debug.Print x9.Children.Length
Debug.Print x9.parentElement.Children.Length
Set x9 = x9.parentElement
Set x9 = x9.Children(1)



    Worksheets("Documents").Cells(5, 2 + 7 * x3).Copy
    x9.Focus
    
    Sleep 200
    SendKeys " "

    
'''at file picker window here. User to paste copied file information into window
    'Debug.Print varx(x3)
    Sleep 1000

    SendKeys (Replace(Replace(Mid(varx(x3), 1, InStr(varx(x3), Chr(34)) - 1), "(", "{(}"), ")", "{)}"))
    Sleep 400
    SendKeys "{ENTER}"
    Sleep 400
    SendKeys Chr(34) & (Replace(Replace(Mid(varx(x3), InStr(varx(x3), Chr(34)), Len(varx(x3)) - InStr(varx(x3), Chr(34)) + 1), "(", "{(}"), ")", "{)}"))
    'Debug.Print (Replace(Replace(Mid(varx(x3), InStr(varx(x3), Chr(34)) - 1, Len(varx(x3)) - InStr(varx(x3), Chr(34)) + 1), "(", "{(}"), ")", "{)}"))
    Sleep 400
    SendKeys "{ENTER}"
Next y3

noDocs:
    x3 = x3 + 1
Loop Until x3 = 6



x3 = 0
Do

If varCol(x3).Count = 0 Then
    GoTo noDocs2
End If
If varx(x3) = "" Then
    GoTo noDocs2
End If

For y3 = 1 To varCol(x3).Count
    
Set IEx(x3) = IEcol(x3).Item(y3)
    
While IEx(x3).Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Sleep 25
Do
DoEvents
Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
Set docx(x3) = IEx(x3).Document
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    docx(x3).getElementById("apply").Click
    
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    docx(x3).getElementById("Overwrite").Click

    Sleep 50
    docx(x3).getElementById("DocumentTypeId").selectedIndex = x3
    '/html/body/div[8]/div/form/div[4]/input
    Set x9 = docx(x3).body
    Set x9 = docx(x3).getElementById("apply").parentElement.parentElement.parentElement.parentElement.parentElement.parentElement
    Set x9 = x9.Children(3)
    Set x9 = x9.Children(1)
    x9.Click
'    IEx(x3).Visible = False
noDocs2:
Next y3

x3 = x3 + 1

Loop Until x3 = 6

y = 0
Do
    Worksheets("Documents").Cells(7 + y, 6 + 7 * 6).Value = "Uploaded: "
    y = y + 1
Loop Until Worksheets("Documents").Cells(7 + y, 2 + 7 * 6).Value = ""

If debugText <> "" Then
    MsgBox "The following file names differ in flex from the downloaded file name and will need to be manually uploaded: " & vbLf & debugText '& vbLf & vbLf & "The following files were unable to upload due to field size limitations: " & varxLenError
End If

If debugNoFile <> "" Then
    MsgBox "The following files are not yet downloaded: " & vbLf & debugNoFile '& vbLf & vbLf & "The following files were unable to upload due to field size limitations: " & varxLenError
End If
'Call StartDocForm
Call RefreshListbox
errorEnd:

End Sub

Private Sub CommandButton2_Click() 'add files 1

    Dim SaveDriveDir As String, mypath As String, s1 As String
    Dim fName As Variant
    Dim tabNum As Long, x As Long
    
    tabNum = 0
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    x = 0
    Do
        x = x + 1
    Loop Until Worksheets("Documents").Cells(7 + x - 1, 2 + 7 * tabNum).Value = ""
    
    SaveDriveDir = CurDir
    mypath = SaveDriveDir
    ChDrive mypath
    ChDir mypath
    fName = Application.GetOpenFilename(Title:="Select documents to add", MultiSelect:=True) 'filefilter:="Rich*") '  Text Format (*.rtf*")
    If Not IsArray(fName) Then
        If fName = False Then
        GoTo Cancelled:
        End If
    End If

    If IsArray(fName) Then
        For i = LBound(fName) To UBound(fName)
            s1 = fName(i)
            Call addDocItem(tabNum, getFNameAndExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
        Next i
    Else
            s1 = fName
            Call addDocItem(tabNum, getFNameNoExt(s1), s1, "", "", "New file, not uploaded yet: ", "", "")
    End If
Call RefreshListbox
Cancelled:
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
Exit Sub

errHandler:
    MsgBox "There is an error"


End Sub


Private Sub CommandButton20_Click() ' open selected documents
Dim x As Long, z As Long, tabNum As Long
Dim Shex As Object

Set Shex = CreateObject("Shell.Application")
''tabNum = DocForm.TabStrip1.SelectedItem.index
'AssumptionForm.Controls.item("data" & i).Value
For tabNum = 0 To 5
'    DocForm.Controls.item("ListView" & tabNum + 1).ListItems.Clear

x = 0
If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count > 0 Then
    For x = 1 To DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count
        If ListView1.ListItems(x).Selected = True Then
         Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Revised: "
        ShellExecute 0, "Open", Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value, "", "", vbNormalNoFocus
        End If
    Next x
End If
Next tabNum

Call RefreshListbox
End Sub

Private Sub CommandButton7_Click() ' "Done" button

'Worksheets("Documents").Cells(4, 3) = DocForm.TextBox1.text
'Worksheets("Documents").Cells(4, 5) = DocForm.TextBox2.text
'Worksheets("scratch").Cells(2, 2).Value = DocForm.TabStrip1.Count

Worksheets("Documents").Cells(8, 60).Value = DocForm.ListView1.ColumnHeaders(1).Width
Worksheets("Documents").Cells(9, 60).Value = DocForm.ListView1.ColumnHeaders(2).Width
Worksheets("Documents").Cells(10, 60).Value = DocForm.ListView1.ColumnHeaders(3).Width

DocForm.Hide
End Sub



Private Sub CommandButton18_Click() ' download selected
Dim x As Long, y As Long, z As Long, tabNum As Long
Dim mypath As String
Dim IE As InternetExplorer, doc As HTMLDocument
Dim x1 As Long, x2 As Long, y1 As Long, y2 As Long

''tabNum = DocForm.TabStrip1.SelectedItem.index
For tabNum = 0 To 5
'    DocForm.Controls.item("ListView" & tabNum + 1).ListItems.Clear

Dim index
If Worksheets("Documents").Cells(7, 2 + 7 * tabNum).Value <> "" Then 'DocForm.Controls.item("ListView" & tabNum + 1).ListItems.Count > 0 Then
    For x = 1 To DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count
        If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems(x).Selected = True Then
'            For y1 = 0 To 5
'            x1 = 1
'            Do
'                If Worksheets("Documents").Cells(x1 + 6, 2 + 7 * y1).Value = DocForm.Controls.item("ListView" & tabNum + 1).ListItems.item(x) Then
'                    Exit Do ' x1 as row value for doc
'                End If
'                x1 = x1 + 1
'            Loop Until Worksheets("Documents").Cells(x1 + 6, 2 + 7 * y1).Value = ""
'            If Worksheets("Documents").Cells(x1 + 6, 2 + 7 * y1).Value <> "" Then
'                Exit For 'y1 has tabNum for doc
'            End If
'            Next y1
'            x2 = 1
'            Do
'                If Worksheets("Documents").Cells(x2 + 6, 2 + 7 * 6).Value = DocForm.Controls.item("ListView" & tabNum + 1).ListItems.item(x) Then
'                    Exit Do
'                End If
'                x2 = x2 + 1
'            Loop Until Worksheets("Documents").Cells(x2 + 6, 2 + 7 * 6).Value = ""
            
            If Worksheets("Documents").Cells(x + 6, 4 + 7 * tabNum).Value = "" Then
                Call StartDocForm
            End If
            Call downloadDoc(Worksheets("Documents").Cells(x + 6, 4 + 7 * tabNum).Value, Worksheets("Documents").Cells(x + 6, 2 + 7 * tabNum).Value)
            Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Downloaded: "
            Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value = downloadPath() & "\" & Worksheets("Documents").Cells(x2 + 6, 2 + 7 * 6).Value
'            Call downloadDoc(Worksheets("Documents").Cells(x1 + 6, 4 + 7 * y1).Value, Worksheets("Documents").Cells(x1 + 6, 2 + 7 * y1).Value)
'            y = 1
'                    Worksheets("Documents").Cells(x2 + 6, 6 + 7 * 6).Value = "Downloaded: "
'                    Worksheets("Documents").Cells(x2 + 6, 3 + 7 * 6).Value = downloadPath() & "\" & Worksheets("Documents").Cells(x2 + 6, 2 + 7 * 6).Value
'                    Worksheets("Documents").Cells(x1 + 6, 6 + 7 * y1).Value = "Downloaded: "
'                    Worksheets("Documents").Cells(x1 + 6, 3 + 7 * y1).Value = downloadPath() & "\" & Worksheets("Documents").Cells(x1 + 6, 2 + 7 * y1).Value
        End If
    Next x
End If
Next tabNum

Call RefreshListbox
End Sub


'
Private Sub CommandButton21_Click() ' Get file information from project

Call StartDocForm


End Sub

Private Sub CommandButton9_Click()

'Worksheets("Documents").Cells(4, 3) = DocForm.TextBox1.text
'Worksheets("Documents").Cells(4, 5) = DocForm.TextBox2.text
'Worksheets("scratch").Cells(1, 2).Value = DocForm.TabStrip1.SelectedItem.Index
'Worksheets("scratch").Cells(2, 2).Value = DocForm.TabStrip1.Count
''add enclosure population to worksheet on file import. Cannot store file info for tabstrip

'DocForm.Hide

End Sub

Private Sub Label12_Click()

End Sub

Private Sub Frame2_BeforeDropOrPaste(ByVal Cancel As MSForms.ReturnBoolean, ByVal Control As MSForms.Control, ByVal Action As MSForms.fmAction, ByVal Data As MSForms.DataObject, ByVal x As Single, ByVal y As Single, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)

End Sub

Private Sub Frame2_Click()

End Sub

Private Sub ListBox1_BeforeDropOrPaste(ByVal Cancel As MSForms.ReturnBoolean, ByVal Action As MSForms.fmAction, ByVal Data As MSForms.DataObject, ByVal x As Single, ByVal y As Single, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
Dim s1 As String

s1 = Data.files(1)
MsgBox s1
End Sub


Private Sub ListBox1_Select()
''Debug.Print "listbox1 click event"
End Sub


Private Sub MultiPage1_Change()

End Sub





Private Sub TabStrip1_Change()

Dim tabNum
'tabNum = DocForm.TabStrip1.SelectedItem.index
Call RefreshListbox

End Sub


Attribute VB_Name = "ENVSForm"
Attribute VB_Base = "0{01E3640D-9C71-4A18-827D-375857E6372D}{B2D83DEF-E15E-4DC5-8CFB-4B18C40BB747}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub CommandButton1_Click()
ENVSForm.Hide
End Sub

Private Sub CommandButton2_Click() 'Check IFVS for existing base listing

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, s3 As String
Dim pWebAddress As String, sh As Object, eachIE As Object
Dim tbl As Object, td As Object, fld As Object
Dim doc As HTMLDocument, doc2 As HTMLDocument

Call initializeConst

'If Worksheets("Needs Assessment").Cells(Filerow(), 2) = "" Then
If ENVSForm.TextBox1.Text = "" Then
    MsgBox ("Add file number")
    GoTo errorEnd
End If
pWebAddress = "http://ifvs.ul.com/Pages/FileDetails.aspx?action=FD"

Dim IE As InternetExplorer
Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing
While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Sleep 50
Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document

login:
If doc.getElementById("txtFileNumber") Is Nothing Then
    MsgBox "Log into VPN"
    Sleep 200
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

Dim x9 As HTMLBaseElement, x10 As HTMLBaseElement
Set x9 = doc.getElementById("txtFileNumber")
'x9.Value = Worksheets("Needs Assessment").Cells(Filerow, 2).Value
'x9.innerText = Worksheets("Needs Assessment").Cells(Filerow, 2).Value
x9.Value = ENVSForm.TextBox1.Text
x9.innerText = ENVSForm.TextBox1.Text


'x9.outerText = Worksheets("Needs Assessment").Cells(Filerow, 2).Value
Set x10 = doc.getElementById("btnSearch")
x10.Click

'//*[@id="gvFile"]/tbody/tr/th[1]
Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Do
    Set doc = IE.Document
    DoEvents
Loop Until Not (doc.getElementById("gvFile") Is Nothing)
Sleep 50
Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document

Set x9 = doc.getElementById("gvFile")
If x9.Children(0).Children.Length = 1 Then
    ENVSForm.Label2.Caption = "Results: No current CCN's for file." & vbLf & "Action: Add parent line for UXYT/UYFS to scope and parent line for ENVS."
    GoTo endSub
End If
For x = 1 To x9.Children(0).Children.Length - 4
    Debug.Print x9.Children(0).Children(x).Children(6).innerText
    If InStr(x9.Children(0).Children(x).Children(6).innerText, "UXYT") > 0 Or InStr(x9.Children(0).Children(x).Children(6).innerText, "UYFS") > 0 Then
        ENVSForm.Label2.Caption = "Results: Current CCN " & x9.Children(0).Children(x).Children(6).innerText & " found." & vbLf & "Action: Add parent line for ENVS only."
        GoTo endSub
    End If
Next x
ENVSForm.Label2.Caption = "Results: No current CCN UXYT/UYFS for file." & vbLf & "Action: Add parent line for UXYT/UYFS to scope and parent line for ENVS."
            
            
endSub:
ENVSForm.CommandButton3.Visible = True
Set doc = Nothing
IE.Quit
Set IE = Nothing
errorEnd:

End Sub

Private Sub CommandButton3_Click() ' add lines to scope
Call initializeConst
Dim x As Long
'Rows("40:40").Select
'Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
x = AHLParentStartrow + 5
Worksheets("Needs Assessment").Cells(Scoperow, 2).Value = ""
If InStr(ENVSForm.Label2.Caption, "Add parent line for UXYT/UYFS to scope") > 0 Then
    Worksheets("Needs Assessment").Cells(Scoperow, 2).Value = "UXYT/UYFS safety evaluation and "
    Worksheets("Needs Assessment").Cells(x, 1).Value = "UL/cUL"
    Worksheets("Needs Assessment").Cells(x, 2).Value = "UXYT/UYFS Certification"
    Worksheets("Needs Assessment").Cells(x, 3).Value = "AHL - FULL EVALUATION"
    Worksheets("Needs Assessment").Cells(x, 6).Value = "1"
    x = x + 1
    Rows(x & ":" & x).Select
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    Worksheets("Needs Assessment").Cells(x, 5).Value = "=G" & x & "*$D$4+H" & x & "*$D$5"
End If
Worksheets("Needs Assessment").Cells(Scoperow, 2).Value = Worksheets("Needs Assessment").Cells(Scoperow, 2).Value & "UL Energy Efficiency Certification Mark"
Worksheets("Needs Assessment").Cells(x, 1).Value = "other"
Worksheets("Needs Assessment").Cells(x, 2).Value = "ENVS Energy Verification"
Worksheets("Needs Assessment").Cells(x, 3).Value = "AHL - Performance Testing"
Worksheets("Needs Assessment").Cells(x, 6).Value = x - (AHLParentStartrow + 5) + 1



End Sub

Private Sub CommandButton4_Click() ' button for "Email Customer Information Package"

EmailLightingENVS
'Call emailAddress(Worksheets("Needs Assessment").Cells(cemailrow(), 2).Value, "File: " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "  Project: " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & "  CCN: " & Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value, "")

End Sub

Private Sub CommandButton5_Click() 'Open Contracts Site
'https://erp.global.ul.com
'https://erp.global.ul.com/OA_HTML/OA.jsp?page=/oracle/apps/okc/repository/authoring/webui/CreateContractPG&pgMode=CREATE&_ti=2058149576&retainAM=N&addBreadCrumb=N&oapc=11&oas=jrFsg8ainmlbSxiyfogxSw..
    Dim pWebAddress As String
    
    pWebAddress = "https://erp.global.ul.com/OA_HTML/OA.jsp?page=/oracle/apps/okc/repository/authoring/webui/CreateContractPG&pgMode=CREATE&_ti=2058149576&retainAM=N&addBreadCrumb=N&oapc=11&oas=jrFsg8ainmlbSxiyfogxSw.."
    Call NewShell(pWebAddress, 3)

End Sub
Attribute VB_Name = "FlexUploadForm"
Attribute VB_Base = "0{79DBE123-0E4E-4A9C-8AFD-3E98C5AD8819}{D5D9D691-292F-4011-8093-ABC1D2F14BD9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False









Private Sub CommandButton1_Click()

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String
Dim pWebAddress As String, flexNum As String, pwebAddressx As String
Dim IE As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object, div2 As Object, div3 As Object
Dim doc As HTMLDocument, doc2 As HTMLDocument, cEmail As String, cPhone As String
Dim elem As HTMLBaseElement
Dim x
Dim docx() As HTMLDocument
Dim IEx() As InternetExplorer

x1 = 4
Do
    x1 = x1 + 1
Loop Until Worksheets("Associated Projects").Cells(x1, 2).Value = ""
ReDim docx(x1 - 4)
ReDim IEx(x1 - 4)


flexNum = Replace(Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value, "-", "")
pWebAddress = "https://portal.ul.com/Project/Index/" & Replace(flexNum, "-", "")
Set IE = New InternetExplorerMedium
IE.Visible = True
IE.navigate pWebAddress

Dim sh
Dim eachIE
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Sleep 200
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Set doc = IE.Document

login:
If doc.getElementById("create") Is Nothing Then
    MsgBox "Log into Flex"
'    Sleep 200
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

doc.getElementById("create").Click
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Do
Sleep 5
Set doc = IE.Document
Loop Until Not (doc.getElementById("AdditionalCriteria") Is Nothing)
'Set doc = IE.Document

'Assumptions
If InStr(doc.getElementById("AdditionalCriteria").Value, "Assumptions: ") > 1 Then
    s1 = Mid(doc.getElementById("AdditionalCriteria").Value, 1, InStr(doc.getElementById("AdditionalCriteria").Value, "Assumptions: ") - 2) & vbLf
End If
If InStr(doc.getElementById("AdditionalCriteria").Value, "Assumptions: ") < 1 And Len(doc.getElementById("AdditionalCriteria").Value) > 0 Then
    s1 = doc.getElementById("AdditionalCriteria").Value & vbLf
End If
If InStr(doc.getElementById("AdditionalCriteria").Value, "Assumptions: ") < 1 And Len(doc.getElementById("AdditionalCriteria").Value) = 0 Then
    s1 = ""
End If
If Len(s1 & "Assumptions: " & vbLf & Worksheets("Needs Assessment").Cells(Assumptionsrow(), 2).Value) < 1000 Then
    doc.getElementById("AdditionalCriteria").Value = s1 & "Assumptions: " & vbLf & Worksheets("Needs Assessment").Cells(Assumptionsrow(), 2).Value
Else
    If Len(s1 & "Project assumptions too large to store in project comments. See Needs Assessment document for assumptions.") < 1000 Then
        doc.getElementById("AdditionalCriteria").Value = s1 & "Project assumptions too large to store in project comments. See Needs Assessment document for assumptions."
    End If
End If

doc.getElementById("EndDate").Value = Worksheets("Needs Assessment").Cells(ECDrow(), 2).Value
Dim hcol As Object
Set hcol = doc.getElementsByTagName("textarea")
For Each Text In hcol
    If Text.ID = "Description" Then
        Text.Value = Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
        Exit For
    End If
Next

doc.getElementById("project-planning").Click
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Do
Sleep 5
Set doc = IE.Document
Loop Until Not (doc.getElementById("ProjectCcn") Is Nothing) Or Not (doc.getElementById("CCN") Is Nothing)
'Set doc = IE.Document

doc.getElementById("Standards").Value = Worksheets("Needs Assessment").Cells(Standardsrow(), 2).Value
If Not (doc.getElementById("CCN") Is Nothing) Then
    doc.getElementById("CCN").Value = Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value
End If
If Not (doc.getElementById("ProjectCcn") Is Nothing) Then
    doc.getElementById("ProjectCcn").Value = Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value
End If

doc.getElementById("FileNo").Value = Worksheets("Needs Assessment").Cells(Filerow(), 2).Value

doc.getElementById("btneditProject").Click
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Sleep 200
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

'IE.Quit
Set IE = Nothing


'update ECD for associated files below. x1 notes total # of projects but not selected ones
For x2 = 0 To x1 - 5
    'Debug.Print x2
    'Debug.Print x1 - 4
    If FlexUploadForm.ListBox1.Selected(x2) Then
        pWebAddress = Worksheets("Associated Projects").Cells(x2 + 4, 3).Value
        Set IEx(x2) = New InternetExplorerMedium
        IEx(x2).Visible = True
        IEx(x2).navigate pWebAddress
        While IEx(x2).Busy
            DoEvents
        Wend
        Do
            Set sh = New Shell32.Shell
            For Each eachIE In sh.Windows
                If InStr(1, eachIE.LocationURL, pWebAddress) Then
                    Set IEx(x2) = eachIE
                    'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
                    Exit Do
                End If
            Next eachIE
        Loop
        Set eachIE = Nothing
        Set sh = Nothing

        While IEx(x2).Busy  ' The new process may still be busy even after you find it
            DoEvents
        Wend
    End If

    If FlexUploadForm.ListBox1.Selected(x2) Then
        Do
            DoEvents
        Loop Until IEx(x2).readyState = READYSTATE_COMPLETE
        Sleep 200
        Do
            DoEvents
        Loop Until IEx(x2).readyState = READYSTATE_COMPLETE

        Set doc = IEx(x2).Document

login2:
        If doc.getElementById("create") Is Nothing Then
            MsgBox "Log into Flex"
        '    Sleep 200
            Do
                DoEvents
            Loop Until IEx(x2).readyState = READYSTATE_COMPLETE
            Set doc = IEx(x2).Document
            GoTo login2
        End If

        doc.getElementById("create").Click
        Do
            DoEvents
        Loop Until IEx(x2).readyState = READYSTATE_COMPLETE

        Do
            Sleep 50
        Set doc = IEx(x2).Document
        Loop Until Not (doc.getElementById("AdditionalCriteria") Is Nothing)
'Set doc = IE.Document

        doc.getElementById("EndDate").Value = Worksheets("Needs Assessment").Cells(ECDrow(), 2).Value

        doc.getElementById("btneditProject").Click
        Do
            DoEvents
        Loop Until IEx(x2).readyState = READYSTATE_COMPLETE
        Sleep 200
        Do
            DoEvents
        Loop Until IEx(x2).readyState = READYSTATE_COMPLETE
        'IE.Quit
        Set IEx(x2) = Nothing
    End If
Next x2


FlexUploadForm.Hide

End Sub

Private Sub CommandButton2_Click()
FlexUploadForm.Hide
End Sub
Attribute VB_Name = "ItemsReqForm"
Attribute VB_Base = "0{24EADB29-51E6-4BCC-A569-6A4437EFB67F}{310080FB-063C-48AF-9E22-189CB8531280}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False









Private Sub CommandButton1_Click()
Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text = ItemsReqForm.TextBox1.Text
Worksheets("Needs Assessment").Cells(ItemsReqrow, 2).Value = ItemsReqForm.TextBox1.Text
ItemsReqForm.Hide
End Sub

Attribute VB_Name = "LISForm"
Attribute VB_Base = "0{6723ED90-1583-4324-99C8-1E9593932014}{555084F6-74C2-4216-AD17-DC93376D5592}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False









Option Explicit
 'Declarations

'#If Win32 Then

Private Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" (ByVal pCaller As LongPtr, ByVal szURL As String, ByVal szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As LongPtr) As LongPtr
'#End If

Private Function DownloadFile(URL As String, LocalFilename As String) As Boolean
     'Thanks Mentalis:)
    Dim lngRetVal As Long
    lngRetVal = URLDownloadToFile(0, URL, LocalFilename, 0, 0)
    If lngRetVal = 0 Then DownloadFile = True
End Function
Private Sub CommandButton1_Click()

Dim mypath As String
Dim x As Long, y As Long
Dim IE As InternetExplorer
Set IE = New InternetExplorerMedium
Dim oFile As CommandBar
Dim oFileMenu As CommandBarControl
Dim oEditWord As CommandBarPopup
Dim oEditWord2 As CommandBarControls
    Dim objWord As Object, rngStory As Object, myStoryRange As Range
    Dim objDoc As Object

    Application.DisplayAlerts = False
    Application.ScreenUpdating = False

   Set objWord = CreateObject("Word.Application")

For x = 1 To LISForm.ListBox1.ListCount
    If LISForm.ListBox1.Selected(x - 1) Then
'getDirectory()
    mypath = getDirectory() & Mid(LISForm.ListBox1.List(x - 1, 0), 1, Len(LISForm.ListBox1.List(x - 1, 0)) - 1) & ".html"
    mypath = Mid(mypath, 1, Len(mypath) - 5) & ".doc"
'    mypath = "C:\Users\" & Environ("username") & "\Desktop\" & Mid(LISForm.ListBox1.List(x - 1, 0), 1, Len(LISForm.ListBox1.List(x - 1, 0)) - 1) & ".html"
'mypath = Mid(mypath, 1, Len(mypath) - 5) & ".docx"
    If Dir(mypath) <> "" Then
        Kill mypath
    End If
    y = DownloadFile("http://lis.ul.com/" & LISForm.ListBox1.List(x - 1, 1), mypath)
'    'Debug.Print mypath
    
    End If
Next x

LISForm.Hide
End Sub

Private Sub CommandButton2_Click()
LISForm.Hide
End Sub

Attribute VB_Name = "MSDForm"
Attribute VB_Base = "0{530AB08A-BF51-4E22-AF99-A6F2AD7088D1}{214D0DA1-4169-4CE3-962F-FCF270293233}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub ComboBox1_Change()
    Dim SaveDriveDir As String, mypath As String
    Dim fName As Variant
    Dim lngLastRow As Long
    Dim r As Range
    Dim rng As Range
    Dim firstColor As Long
    Dim secondColor As Long
    Dim CCNLength As Long
    Dim CCN As String
    Dim n As Long
    Dim l As Long, x As Long, y As Long, x2 As Long, x3 As Long, x4 As Long
    Dim currentFile As String, s1 As String, s2 As String, s3 As String, fName1 As String, fName2, s4 As String
    Dim wb As Workbook
    Dim sx(63) As String
    Dim customerCol As Long, accountCol As Long, streetAddressCol As Long, stateAddressCol As Long, zipAddressCol As Long, contactCol As Long
    Dim opportunityNumCol As Long, scopeCol As Long, entityCol As Long, versionCol As Long, ownerNumCol As Long
    
    Dim customerS As String, accountS As String, streetAddressS As String, stateAddressS As String, zipAddressS As String, contactS As String
    Dim opportunityNumS As String, scopeS As String, entityS As String, versionS As String, ownerNumS As String
        
    If MSDForm.ComboBox1.Value = "" Then
        Exit Sub
    End If
    MSDForm.ComboBox2.Value = ""
    MSDForm.ComboBox3.Clear
    
        'output reports columns appear to not be constant based on report generation request parameters.
        x = 4
        Do
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Account Number") > 0 Then
                accountCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Account" Then
                customerCol = x
            End If
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Address 1: Street 1") > 0 Then
                streetAddressCol = x
            End If
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Address 1: State/Province") > 0 Then
                stateAddressCol = x
            End If
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Address 1: ZIP/Postal Code") > 0 Then
                zipAddressCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Opportunity Number" Then
                opportunityNumCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Contact" Then
                contactCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Topic" Then
                scopeCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "UL Legal Entity" Then
                entityCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Opporunity Version" Then
                versionCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Primary Email (Created By) (User)" Then
                creatorNumCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Primary Email (Owning User) (User)" Then
                ownerNumCol = x
            End If
            x = x + 1
        Loop Until Worksheets("MSD Data").Cells(1, x).Value = ""
        
        'get users email address from outlook directory
        MSDForm.ListBox1.Clear
        userEmail = MSDForm.ComboBox1.Value
        Debug.Print "Looking for email address: " & userEmail
        x = 2
        y = 0
        Do
            If Worksheets("MSD Data").Cells(x, ownerNumCol).Value = userEmail Then
                'MSDForm.ComboBox1.Value = userEmail
                MSDForm.ListBox1.AddItem
                Debug.Print x
                MSDForm.ListBox1.List(y, 0) = Worksheets("MSD Data").Cells(x, customerCol).Value
                MSDForm.ListBox1.List(y, 1) = Worksheets("MSD Data").Cells(x, opportunityNumCol).Value
                MSDForm.ListBox1.List(y, 2) = Worksheets("MSD Data").Cells(x, scopeCol).Value
                MSDForm.ListBox1.List(y, 3) = x
                MSDForm.ListBox1.List(y, 5) = Worksheets("MSD Data").Cells(x, creatorNumCol).Value
                MSDForm.ListBox1.List(y, 4) = Worksheets("MSD Data").Cells(x, ownerNumCol).Value
                y = y + 1
            End If
            x = x + 1
        Loop Until Worksheets("MSD Data").Cells(x, 1).Value = ""

End Sub

Private Sub ComboBox2_Change()
    Dim SaveDriveDir As String, mypath As String
    Dim fName As Variant
    Dim lngLastRow As Long
    Dim r As Range
    Dim rng As Range
    Dim firstColor As Long
    Dim secondColor As Long
    Dim CCNLength As Long
    Dim CCN As String
    Dim n As Long
    Dim l As Long, x As Long, y As Long, x2 As Long, x3 As Long, x4 As Long
    Dim currentFile As String, s1 As String, s2 As String, s3 As String, fName1 As String, fName2, s4 As String
    Dim wb As Workbook
    Dim sx(63) As String
    Dim customerCol As Long, accountCol As Long, streetAddressCol As Long, stateAddressCol As Long, zipAddressCol As Long, contactCol As Long
    Dim opportunityNumCol As Long, scopeCol As Long, entityCol As Long, versionCol As Long, ownerNumCol As Long
    
    Dim customerS As String, accountS As String, streetAddressS As String, stateAddressS As String, zipAddressS As String, contactS As String
    Dim opportunityNumS As String, scopeS As String, entityS As String, versionS As String, ownerNumS As String
        
    If MSDForm.ComboBox2.Value = "" Then
        Exit Sub
    End If
    MSDForm.ComboBox1.Value = ""
    MSDForm.ComboBox3.Clear
        
        
        'output reports columns appear to not be constant based on report generation request parameters.
        x = 4
        Do
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Account Number") > 0 Then
                accountCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Account" Then
                customerCol = x
            End If
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Address 1: Street 1") > 0 Then
                streetAddressCol = x
            End If
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Address 1: State/Province") > 0 Then
                stateAddressCol = x
            End If
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Address 1: ZIP/Postal Code") > 0 Then
                zipAddressCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Opportunity Number" Then
                opportunityNumCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Contact" Then
                contactCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Topic" Then
                scopeCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "UL Legal Entity" Then
                entityCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Opporunity Version" Then
                versionCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Primary Email (Created By) (User)" Then
                creatorNumCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Primary Email (Owning User) (User)" Then
                ownerNumCol = x
            End If
            x = x + 1
        Loop Until Worksheets("MSD Data").Cells(1, x).Value = ""
        
        'get users email address from outlook directory
        MSDForm.ListBox1.Clear
        userEmail = MSDForm.ComboBox2.Value
        Debug.Print "Looking for email address: " & userEmail
        x = 2
        y = 0
        Do
            If Worksheets("MSD Data").Cells(x, creatorNumCol).Value = userEmail Then
                'MSDForm.ComboBox1.Value = userEmail
                MSDForm.ListBox1.AddItem
                Debug.Print x
                MSDForm.ListBox1.List(y, 0) = Worksheets("MSD Data").Cells(x, customerCol).Value
                MSDForm.ListBox1.List(y, 1) = Worksheets("MSD Data").Cells(x, opportunityNumCol).Value
                MSDForm.ListBox1.List(y, 2) = Worksheets("MSD Data").Cells(x, scopeCol).Value
                MSDForm.ListBox1.List(y, 3) = x
                MSDForm.ListBox1.List(y, 5) = Worksheets("MSD Data").Cells(x, creatorNumCol).Value
                MSDForm.ListBox1.List(y, 4) = Worksheets("MSD Data").Cells(x, ownerNumCol).Value
                y = y + 1
            End If
            x = x + 1
        Loop Until Worksheets("MSD Data").Cells(x, 1).Value = ""

End Sub

Private Sub CommandButton1_Click()

'Dim sTemp As String
'Dim x As Long
'x = 0
'sTemp = Worksheets("Needs Assessment").Cells(Standardsrow(), 2).Value
'Do
'    If SelectStandardsForm.ListBox1.Selected(x) Then
'        If sTemp = "" Then
'            sTemp = SelectStandardsForm.ListBox1.List(x, 0)
'        Else
'            sTemp = sTemp & vbCrLf & SelectStandardsForm.ListBox1.List(x, 0)
'        End If
'    End If
'    x = x + 1
'Loop Until x = SelectStandardsForm.ListBox1.ListCount
'Worksheets("Needs Assessment").Cells(Standardsrow(), 2).Value = sTemp

MSDForm.Hide

End Sub



Private Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
MSDForm.Hide
End Sub

Private Sub TextBox1_Change()
    
    Dim l As Long, x As Long, y As Long, x2 As Long, x3 As Long, x4 As Long
    Dim currentFile As String, s1 As String, s2 As String, s3 As String, fName1 As String, fName2, s4 As String
    Dim wb As Workbook
    Dim sx(63) As String
    Dim customerCol As Long, accountCol As Long, streetAddressCol As Long, stateAddressCol As Long, zipAddressCol As Long, contactCol As Long
    Dim opportunityNumCol As Long, scopeCol As Long, entityCol As Long, versionCol As Long, ownerNumCol As Long
    
    Dim customerS As String, accountS As String, streetAddressS As String, stateAddressS As String, zipAddressS As String, contactS As String
    Dim opportunityNumS As String, scopeS As String, entityS As String, versionS As String, ownerNumS As String
        
    If Len(MSDForm.TextBox1.Text) < 6 Then
        Exit Sub
    End If
    If MSDForm.ComboBox3.ListCount = 0 Then
        MSDForm.ComboBox3.Clear
        MSDForm.ComboBox3.AddItem "Owner"
        MSDForm.ComboBox3.AddItem "Creator"
        MSDForm.ComboBox3.Value = "Owner"
    End If
    
    MSDForm.ComboBox1.Value = ""
    MSDForm.ComboBox2.Value = ""
        
        'output reports columns appear to not be constant based on report generation request parameters.
        x = 4
        Do
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Account Number") > 0 Then
                accountCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Account" Then
                customerCol = x
            End If
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Address 1: Street 1") > 0 Then
                streetAddressCol = x
            End If
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Address 1: State/Province") > 0 Then
                stateAddressCol = x
            End If
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Address 1: ZIP/Postal Code") > 0 Then
                zipAddressCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Opportunity Number" Then
                opportunityNumCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Contact" Then
                contactCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Topic" Then
                scopeCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "UL Legal Entity" Then
                entityCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Opporunity Version" Then
                versionCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Primary Email (Created By) (User)" Then
                creatorNumCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Primary Email (Owning User) (User)" Then
                ownerNumCol = x
            End If
            x = x + 1
        Loop Until Worksheets("MSD Data").Cells(1, x).Value = ""
        
        'get users email address from outlook directory
        MSDForm.ListBox1.Clear
        'userEmail = MSDForm.ComboBox2.Value
        'Debug.Print "Looking for email address: " & userEmail
        x = 2
        y = 0
        Do
            Debug.Print "Checking " & Worksheets("MSD Data").Cells(x, opportunityNumCol).Value & " against " & "OPP-" & MSDForm.TextBox1.Text
            If InStr(Worksheets("MSD Data").Cells(x, opportunityNumCol).Value, "OPP-" & MSDForm.TextBox1.Text) > 0 Then ' userEmail Then
                Debug.Print "opp# match found"
                'MSDForm.ComboBox1.Value = userEmail
                MSDForm.ListBox1.AddItem
                Debug.Print x
                MSDForm.ListBox1.List(y, 0) = Worksheets("MSD Data").Cells(x, customerCol).Value
                MSDForm.ListBox1.List(y, 1) = Worksheets("MSD Data").Cells(x, opportunityNumCol).Value
                MSDForm.ListBox1.List(y, 2) = Worksheets("MSD Data").Cells(x, scopeCol).Value
                MSDForm.ListBox1.List(y, 3) = x
                MSDForm.ListBox1.List(y, 5) = Worksheets("MSD Data").Cells(x, creatorNumCol).Value
                MSDForm.ListBox1.List(y, 4) = Worksheets("MSD Data").Cells(x, ownerNumCol).Value
                y = y + 1
            End If
            x = x + 1
        Loop Until Worksheets("MSD Data").Cells(x, 1).Value = ""

End Sub

Attribute VB_Name = "ManagerForm"
Attribute VB_Base = "0{5F9F65D8-B7EF-4BBB-BE74-BDAEB9012F33}{21215863-2F60-4981-B077-6FF841C87ED2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub CommandButton1_Click()
Call getTeam
End Sub

Private Sub CommandButton2_Click()
ManagerForm.Hide
End Sub
Attribute VB_Name = "Module1"
Sub Rectangle28A_Click()

'Dim MyArray As Variant
Dim xSelShp As Shape, xSelLst As Variant, i As Integer
Set xSelShp = ActiveSheet.Shapes(Application.Caller)
Set xLstbox = ActiveSheet.ListBox28A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'MyArray = Array()

If xLstbox.Visible = False Then
    xLstbox.Visible = True
    xSelShp.TextFrame2.TextRange.Characters.Text = "Step 1: New Project, Retest, Add a Mfr, Admin Services or CRI?"
Else
    xLstbox.Visible = False
    xSelShp.TextFrame2.TextRange.Characters.Text = "Step 1: New Project, Retest, Add a Mfr, Admin Services or CRI?"
    For i = 0 To (xLstbox.ListCount - 1)
    If xLstbox.Selected(i) = True Then
        'xSelLst = xLstBox.List(I) & ";" & xSelLst
        'ReDim Preserve MyArray(0 To UBound(MyArray) + 1) As Variant
         MyArray(ArrayIndex) = xLstbox.List(i)
         ArrayIndex = ArrayIndex + 1
         
        End If
    Next i
    If xSelLst <> "" Then
        Range("ListBoxOutput28A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
    Else
        Range("ListBoxOutput28A") = ""
    End If
End If

'Paste to Range
ActiveWorkbook.Worksheets("PM Pricing").Select
Range("d12").Value = WorksheetFunction.Transpose(MyArray)


End Sub
Sub Rectangle5A_Click()

'Dim MyArray As Variant
Dim xSelShp As Shape, xSelLst As Variant, i As Integer
Set xSelShp = ActiveSheet.Shapes(Application.Caller)
Set xLstbox = ActiveSheet.ListBox5A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'MyArray = Array()

If xLstbox.Visible = False Then
    xLstbox.Visible = True
    xSelShp.TextFrame2.TextRange.Characters.Text = "Step 2: Select CCN or Product Type"
Else
    xLstbox.Visible = False
    xSelShp.TextFrame2.TextRange.Characters.Text = "Step 2: Select CCN or Product Type"
    For i = 0 To (xLstbox.ListCount - 1)
    If xLstbox.Selected(i) = True Then
        'xSelLst = xLstBox.List(I) & ";" & xSelLst
        'ReDim Preserve MyArray(0 To UBound(MyArray) + 1) As Variant
         MyArray(ArrayIndex) = xLstbox.List(i)
         ArrayIndex = ArrayIndex + 1
         
        End If
    Next i
    If xSelLst <> "" Then
        Range("ListBoxOutput5A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
    Else
        Range("ListBoxOutput5A") = ""
    End If
End If

'Paste to Range
ActiveWorkbook.Worksheets("PM Pricing").Select
Range("c10").Value = WorksheetFunction.Transpose(MyArray)

End Sub

Sub Rectangle27A_Click()

'Dim MyArray As Variant
Dim xSelShp As Shape, xSelLst As Variant, i As Integer
Set xSelShp = ActiveSheet.Shapes(Application.Caller)
Set xLstbox = ActiveSheet.ListBox27A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'MyArray = Array()

If xLstbox.Visible = False Then
    xLstbox.Visible = True
    xSelShp.TextFrame2.TextRange.Characters.Text = "Step 3: Select Country/Region"
Else
    xLstbox.Visible = False
    xSelShp.TextFrame2.TextRange.Characters.Text = "Step 3: Select Country/Region"
    For i = 0 To (xLstbox.ListCount - 1)
    If xLstbox.Selected(i) = True Then
        'xSelLst = xLstBox.List(I) & ";" & xSelLst
        'ReDim Preserve MyArray(0 To UBound(MyArray) + 1) As Variant
         MyArray(ArrayIndex) = xLstbox.List(i)
         ArrayIndex = ArrayIndex + 1
         
        End If
    Next i
    If xSelLst <> "" Then
        Range("ListBoxOutput27A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
    Else
        Range("ListBoxOutput27A") = ""
    End If
End If

'Paste to Range
ActiveWorkbook.Worksheets("PM Pricing").Select
Range("d10").Value = WorksheetFunction.Transpose(MyArray)


End Sub
Sub Rectangle6A_Click()


'Dim MyArray As Variant
Dim xSelShp As Shape, xSelLst As Variant, i As Integer
Set xSelShp = ActiveSheet.Shapes(Application.Caller)
Set xLstbox = ActiveSheet.ListBox6A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'MyArray = Array()

If xLstbox.Visible = False Then
    xLstbox.Visible = True
    xSelShp.TextFrame2.TextRange.Characters.Text = "Step 4: Select Product Attribute"
Else
    xLstbox.Visible = False
    xSelShp.TextFrame2.TextRange.Characters.Text = "Step 4: Select Product Attribute"
    For i = 0 To (xLstbox.ListCount - 1)
    If xLstbox.Selected(i) = True Then
        'xSelLst = xLstBox.List(I) & ";" & xSelLst
        'ReDim Preserve MyArray(0 To UBound(MyArray) + 1) As Variant
         MyArray(ArrayIndex) = xLstbox.List(i)
         ArrayIndex = ArrayIndex + 1
         
        End If
    Next i
    If xSelLst <> "" Then
        Range("ListBoxOutput6A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
    Else
        Range("ListBoxOutput6A") = ""
    End If
End If

'Paste to Range
ActiveWorkbook.Worksheets("PM Pricing").Select
Range("g10:g16").Value = WorksheetFunction.Transpose(MyArray)

End Sub

Sub Rectangle22A_Click()


'Dim MyArray As Variant
Dim xSelShp As Shape, xSelLst As Variant, i As Integer
Set xSelShp = ActiveSheet.Shapes(Application.Caller)
Set xLstbox = ActiveSheet.ListBox22A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'MyArray = Array()

If xLstbox.Visible = False Then
    xLstbox.Visible = True
    xSelShp.TextFrame2.TextRange.Characters.Text = "Step 5: Select Service Type"
Else
    xLstbox.Visible = False
    xSelShp.TextFrame2.TextRange.Characters.Text = "Step 5: Select Service Type"
    For i = 0 To (xLstbox.ListCount - 1)
    If xLstbox.Selected(i) = True Then
        'xSelLst = xLstBox.List(I) & ";" & xSelLst
        'ReDim Preserve MyArray(0 To UBound(MyArray) + 1) As Variant
         MyArray(ArrayIndex) = xLstbox.List(i)
         ArrayIndex = ArrayIndex + 1
         
        End If
    Next i
    If xSelLst <> "" Then
        Range("ListBoxOutput22A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
    Else
        Range("ListBoxOutput22A") = ""
    End If
End If

'Paste to Range
ActiveWorkbook.Worksheets("PM Pricing").Select
Range("f10").Value = WorksheetFunction.Transpose(MyArray)

End Sub
Sub Rectangle21A_Click()


'Dim MyArray As Variant
Dim xSelShp As Shape, xSelLst As Variant, i As Integer
Set xSelShp = ActiveSheet.Shapes(Application.Caller)
Set xLstbox = ActiveSheet.ListBox21A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'MyArray = Array()

If xLstbox.Visible = False Then
    xLstbox.Visible = True
    xSelShp.TextFrame2.TextRange.Characters.Text = "Step 6: Select Model Type"
Else
    xLstbox.Visible = False
    xSelShp.TextFrame2.TextRange.Characters.Text = "Step 6: Select Model Type"
    For i = 0 To (xLstbox.ListCount - 1)
    If xLstbox.Selected(i) = True Then
        'xSelLst = xLstBox.List(I) & ";" & xSelLst
        'ReDim Preserve MyArray(0 To UBound(MyArray) + 1) As Variant
         MyArray(ArrayIndex) = xLstbox.List(i)
         ArrayIndex = ArrayIndex + 1
         
        End If
    Next i
    If xSelLst <> "" Then
        Range("ListBoxOutput21A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
    Else
        Range("ListBoxOutput21A") = ""
    End If
End If

'Paste to Range
ActiveWorkbook.Worksheets("PM Pricing").Select
Range("e10").Value = WorksheetFunction.Transpose(MyArray)

End Sub



Sub Rectangle25A_Click()


'Dim MyArray As Variant
Dim xSelShp As Shape, xSelLst As Variant, i As Integer
Set xSelShp = ActiveSheet.Shapes(Application.Caller)
Set xLstbox = ActiveSheet.ListBox25A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'MyArray = Array()

If xLstbox.Visible = False Then
    xLstbox.Visible = True
    xSelShp.TextFrame2.TextRange.Characters.Text = "Select Group 1 Tests/Activities"
Else
    xLstbox.Visible = False
    xSelShp.TextFrame2.TextRange.Characters.Text = "Select Group 1 Tests/Activities"
    For i = 0 To (xLstbox.ListCount - 1)
    If xLstbox.Selected(i) = True Then
        'xSelLst = xLstBox.List(I) & ";" & xSelLst
        'ReDim Preserve MyArray(0 To UBound(MyArray) + 1) As Variant
         MyArray(ArrayIndex) = xLstbox.List(i)
         ArrayIndex = ArrayIndex + 1
         
        End If
    Next i
    If xSelLst <> "" Then
        Range("ListBoxOutput25A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
    Else
        Range("ListBoxOutput25A") = ""
    End If
End If

'Paste to Range
ActiveWorkbook.Worksheets("PM Pricing").Select
Range("aa22:aa28").Value = WorksheetFunction.Transpose(MyArray)

End Sub



Attribute VB_Name = "Module2"
Sub Rectangle7A_Click()

'Dim MyArray As Variant
Dim xSelShp As Shape, xSelLst As Variant, i As Integer
Set xSelShp = ActiveSheet.Shapes(Application.Caller)
Set xLstbox = ActiveSheet.ListBox7A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'MyArray = Array()

If xLstbox.Visible = False Then
    xLstbox.Visible = True
    xSelShp.TextFrame2.TextRange.Characters.Text = "Step 7: Select Test/Certification Activities"
Else
    xLstbox.Visible = False
    xSelShp.TextFrame2.TextRange.Characters.Text = "Step 7: Select Test/Certification Activities"
    For i = 0 To (xLstbox.ListCount - 1)
    If xLstbox.Selected(i) = True Then
        'xSelLst = xLstBox.List(I) & ";" & xSelLst
        'ReDim Preserve MyArray(0 To UBound(MyArray) + 1) As Variant
         MyArray(ArrayIndex) = xLstbox.List(i)
         ArrayIndex = ArrayIndex + 1
         
        End If
    Next i
    If xSelLst <> "" Then
        Range("ListBoxOutput7A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
    Else
        Range("ListBoxOutput7A") = ""
    End If
End If
'Paste to Range
ActiveWorkbook.Worksheets("PM Pricing").Select
Range("aa11:aa20").Value = WorksheetFunction.Transpose(MyArray)

End Sub
Sub Rectangle17A_Click()

'Dim MyArray As Variant
Dim xSelShp As Shape, xSelLst As Variant, i As Integer
Set xSelShp = ActiveSheet.Shapes(Application.Caller)
Set xLstbox = ActiveSheet.ListBox17A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'MyArray = Array()

If xLstbox.Visible = False Then
    xLstbox.Visible = True
    xSelShp.TextFrame2.TextRange.Characters.Text = "Select Group 2 Tests/Activities"
Else
    xLstbox.Visible = False
    xSelShp.TextFrame2.TextRange.Characters.Text = "Select Group 2 Tests/Activities"
    For i = 0 To (xLstbox.ListCount - 1)
    If xLstbox.Selected(i) = True Then
        'xSelLst = xLstBox.List(I) & ";" & xSelLst
        'ReDim Preserve MyArray(0 To UBound(MyArray) + 1) As Variant
         MyArray(ArrayIndex) = xLstbox.List(i)
         ArrayIndex = ArrayIndex + 1
         
        End If
    Next i
    If xSelLst <> "" Then
        Range("ListBoxOutput17A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
    Else
        Range("ListBoxOutput17A") = ""
    End If
End If

'Paste to Range
ActiveWorkbook.Worksheets("PM Pricing").Select
Range("aa31:aa38").Value = WorksheetFunction.Transpose(MyArray)

End Sub
Sub Rectangle18A_Click()

'Dim MyArray As Variant
Dim xSelShp As Shape, xSelLst As Variant, i As Integer
Set xSelShp = ActiveSheet.Shapes(Application.Caller)
Set xLstbox = ActiveSheet.ListBox18A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'MyArray = Array()

If xLstbox.Visible = False Then
    xLstbox.Visible = True
    xSelShp.TextFrame2.TextRange.Characters.Text = "Select Group 3 Tests/Activities"
Else
    xLstbox.Visible = False
    xSelShp.TextFrame2.TextRange.Characters.Text = "Select Group 3 Tests/Activities"
    For i = 0 To (xLstbox.ListCount - 1)
    If xLstbox.Selected(i) = True Then
        'xSelLst = xLstBox.List(I) & ";" & xSelLst
        'ReDim Preserve MyArray(0 To UBound(MyArray) + 1) As Variant
         MyArray(ArrayIndex) = xLstbox.List(i)
         ArrayIndex = ArrayIndex + 1
         
        End If
    Next i
    If xSelLst <> "" Then
        Range("ListBoxOutput18A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
    Else
        Range("ListBoxOutput18A") = ""
    End If
End If

'Paste to Range
ActiveWorkbook.Worksheets("PM Pricing").Select
Range("aa41:aa48").Value = WorksheetFunction.Transpose(MyArray)
End Sub

Attribute VB_Name = "Module3"
Sub Rectangle8A_Click()

'Dim MyArray As Variant
Dim xSelShp As Shape, xSelLst As Variant, i As Integer
Set xSelShp = ActiveSheet.Shapes(Application.Caller)
Set xLstbox = ActiveSheet.ListBox8A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'MyArray = Array()

If xLstbox.Visible = False Then
    xLstbox.Visible = True
    xSelShp.TextFrame2.TextRange.Characters.Text = "Select Group 4 Tests/Activities"
Else
    xLstbox.Visible = False
    xSelShp.TextFrame2.TextRange.Characters.Text = "Select Group 4 Tests/Activities"
    For i = 0 To (xLstbox.ListCount - 1)
    If xLstbox.Selected(i) = True Then
        'xSelLst = xLstBox.List(I) & ";" & xSelLst
        'ReDim Preserve MyArray(0 To UBound(MyArray) + 1) As Variant
         MyArray(ArrayIndex) = xLstbox.List(i)
         ArrayIndex = ArrayIndex + 1
         
        End If
    Next i
    If xSelLst <> "" Then
        Range("ListBoxOutput8A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
    Else
        Range("ListBoxOutput8A") = ""
    End If
End If

'Paste to Range
ActiveWorkbook.Worksheets("PM Pricing").Select
Range("aa51:aa58").Value = WorksheetFunction.Transpose(MyArray)
End Sub
Sub Rectangle9A_Click()

'Dim MyArray As Variant
Dim xSelShp As Shape, xSelLst As Variant, i As Integer
Set xSelShp = ActiveSheet.Shapes(Application.Caller)
Set xLstbox = ActiveSheet.ListBox9A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'MyArray = Array()

If xLstbox.Visible = False Then
    xLstbox.Visible = True
    xSelShp.TextFrame2.TextRange.Characters.Text = "Select Group 5 Tests/Activities"
Else
    xLstbox.Visible = False
    xSelShp.TextFrame2.TextRange.Characters.Text = "Select Group 5 Tests/Activities"
    For i = 0 To (xLstbox.ListCount - 1)
    If xLstbox.Selected(i) = True Then
        'xSelLst = xLstBox.List(I) & ";" & xSelLst
        'ReDim Preserve MyArray(0 To UBound(MyArray) + 1) As Variant
         MyArray(ArrayIndex) = xLstbox.List(i)
         ArrayIndex = ArrayIndex + 1
         
        End If
    Next i
    If xSelLst <> "" Then
        Range("ListBoxOutput9A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
    Else
        Range("ListBoxOutput9A") = ""
    End If
End If

'Paste to Range
ActiveWorkbook.Worksheets("PM Pricing").Select
Range("aa61:aa68").Value = WorksheetFunction.Transpose(MyArray)
End Sub
Sub Rectangle23A_Click()

'Dim MyArray As Variant
Dim xSelShp As Shape, xSelLst As Variant, i As Integer
Set xSelShp = ActiveSheet.Shapes(Application.Caller)
Set xLstbox = ActiveSheet.ListBox23A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'MyArray = Array()

If xLstbox.Visible = False Then
    xLstbox.Visible = True
    xSelShp.TextFrame2.TextRange.Characters.Text = "Select Group 6 Tests/Activities"
Else
    xLstbox.Visible = False
    xSelShp.TextFrame2.TextRange.Characters.Text = "Select Group 6 Tests/Activities"
    For i = 0 To (xLstbox.ListCount - 1)
    If xLstbox.Selected(i) = True Then
        'xSelLst = xLstBox.List(I) & ";" & xSelLst
        'ReDim Preserve MyArray(0 To UBound(MyArray) + 1) As Variant
         MyArray(ArrayIndex) = xLstbox.List(i)
         ArrayIndex = ArrayIndex + 1
         
        End If
    Next i
    If xSelLst <> "" Then
        Range("ListBoxOutput23A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
    Else
        Range("ListBoxOutput23A") = ""
    End If
End If

'Paste to Range
ActiveWorkbook.Worksheets("PM Pricing").Select
Range("aa71:aa78").Value = WorksheetFunction.Transpose(MyArray)
End Sub
Sub Rectangle24A_Click()

'Dim MyArray As Variant
Dim xSelShp As Shape, xSelLst As Variant, i As Integer
Set xSelShp = ActiveSheet.Shapes(Application.Caller)
Set xLstbox = ActiveSheet.ListBox24A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'MyArray = Array()

If xLstbox.Visible = False Then
    xLstbox.Visible = True
    xSelShp.TextFrame2.TextRange.Characters.Text = "Select Group 7 Tests/Activities"
Else
    xLstbox.Visible = False
    xSelShp.TextFrame2.TextRange.Characters.Text = "Select Group 7 Tests/Activities"
    For i = 0 To (xLstbox.ListCount - 1)
    If xLstbox.Selected(i) = True Then
        'xSelLst = xLstBox.List(I) & ";" & xSelLst
        'ReDim Preserve MyArray(0 To UBound(MyArray) + 1) As Variant
         MyArray(ArrayIndex) = xLstbox.List(i)
         ArrayIndex = ArrayIndex + 1
         
        End If
    Next i
    If xSelLst <> "" Then
        Range("ListBoxOutput24A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
    Else
        Range("ListBoxOutput24A") = ""
    End If
End If

'Paste to Range
ActiveWorkbook.Worksheets("PM Pricing").Select
Range("aa81:aa88").Value = WorksheetFunction.Transpose(MyArray)
End Sub

Sub Rectangle11A_Click()

'Dim MyArray As Variant
Dim xSelShp As Shape, xSelLst As Variant, i As Integer
Set xSelShp = ActiveSheet.Shapes(Application.Caller)
Set xLstbox = ActiveSheet.ListBox11A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'MyArray = Array()

If xLstbox.Visible = False Then
    xLstbox.Visible = True
    xSelShp.TextFrame2.TextRange.Characters.Text = "Select Certification Type"
Else
    xLstbox.Visible = False
    xSelShp.TextFrame2.TextRange.Characters.Text = "Select Certification Type"
    For i = 0 To (xLstbox.ListCount - 1)
    If xLstbox.Selected(i) = True Then
        'xSelLst = xLstBox.List(I) & ";" & xSelLst
        'ReDim Preserve MyArray(0 To UBound(MyArray) + 1) As Variant
         MyArray(ArrayIndex) = xLstbox.List(i)
         ArrayIndex = ArrayIndex + 1
         
        End If
    Next i
    If xSelLst <> "" Then
        Range("ListBoxOutput11A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
    Else
        Range("ListBoxOutput11A") = ""
    End If
End If

'Paste to Range
ActiveWorkbook.Worksheets("PM Pricing").Select
Range("i18").Value = WorksheetFunction.Transpose(MyArray)


End Sub
Sub Rectangle12A_Click()


'Dim MyArray As Variant
Dim xSelShp As Shape, xSelLst As Variant, i As Integer
Set xSelShp = ActiveSheet.Shapes(Application.Caller)
Set xLstbox = ActiveSheet.ListBox12A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'MyArray = Array()

If xLstbox.Visible = False Then
    xLstbox.Visible = True
    xSelShp.TextFrame2.TextRange.Characters.Text = "Step 8: Select Lab Location"
Else
    xLstbox.Visible = False
    xSelShp.TextFrame2.TextRange.Characters.Text = "Step 8: Select Lab Location"
    For i = 0 To (xLstbox.ListCount - 1)
    If xLstbox.Selected(i) = True Then
        'xSelLst = xLstBox.List(I) & ";" & xSelLst
        'ReDim Preserve MyArray(0 To UBound(MyArray) + 1) As Variant
         MyArray(ArrayIndex) = xLstbox.List(i)
         ArrayIndex = ArrayIndex + 1
         
        End If
    Next i
    If xSelLst <> "" Then
        Range("ListBoxOutput12A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
    Else
        Range("ListBoxOutput12A") = ""
    End If
End If

'Paste to Range
ActiveWorkbook.Worksheets("PM Pricing").Select
Range("d11").Value = WorksheetFunction.Transpose(MyArray)


End Sub


Sub Questions_Click()

Worksheets("Summary").Activate
ActiveWindow.ScrollRow = 1
ActiveWindow.ScrollColumn = 1

End Sub

Sub Questions2_Click()

Worksheets("PM Pricing").Activate
ActiveWindow.ScrollRow = 1
ActiveWindow.ScrollColumn = 1

End Sub

Sub Questions3_Click()

Worksheets("PM Pricing").Activate
ActiveWindow.ScrollRow = 19
ActiveWindow.ScrollColumn = 1

End Sub
Sub Questions4_Click()

Worksheets("Summary").Activate
ActiveWindow.ScrollRow = 35
ActiveWindow.ScrollColumn = 1

End Sub
Sub Questions5_Click()

Worksheets("Instructions").Activate
ActiveWindow.ScrollRow = 56
ActiveWindow.ScrollColumn = 1

End Sub


Attribute VB_Name = "Module4"
Sub Rectangle1Reset_Click()
    Range("d2:d5").Select
    Selection.ClearContents
    Range("d6:d7").Select
    Selection.ClearContents
    Range("c10").Select
    Selection.ClearContents
    Range("d10:g19").Select
    Selection.ClearContents
    Range("aa10:aa19").Select
    Selection.ClearContents
    Range("aa22:aa28").Select
    Selection.ClearContents
    Range("e21:e28").Select
    Selection.ClearContents
    Range("h21:h28").Select
    Selection.ClearContents
    Range("aa31:aa38").Select
    Selection.ClearContents
    Range("e31:e38").Select
    Selection.ClearContents
    Range("h31:h38").Select
    Selection.ClearContents
    Range("aa41:aa48").Select
    Selection.ClearContents
    Range("e41:e48").Select
    Selection.ClearContents
    Range("h41:h48").Select
    Selection.ClearContents
    Range("aa51:aa58").Select
    Selection.ClearContents
    Range("e51:e58").Select
    Selection.ClearContents
    Range("h51:h58").Select
    Selection.ClearContents
    Range("aa61:aa68").Select
    Selection.ClearContents
    Range("e61:e68").Select
    Selection.ClearContents
    Range("h61:h68").Select
    Range("aa71:aa79").Select
    Selection.ClearContents
    Range("e71:e78").Select
    Selection.ClearContents
    Range("h71:h78").Select
    Selection.ClearContents
    Range("aa81:aa88").Select
    Selection.ClearContents
    Range("e81:e88").Select
    Selection.ClearContents
    Range("h81:h88").Select
    Range("g4:g7").Select
    Selection.ClearContents
    Sheets("Summary").Select
    Range("d34").Select
    Selection.ClearContents
    ActiveWindow.ScrollRow = 1
    ActiveWindow.ScrollColumn = 1
    Sheets("PM Pricing").Select
    ActiveSheet.Range("d2:d3").Select
    
    Sheets(4).Cells(2, 4).Value = ""
    Sheets("Summary").Range(Sheets("Summary").Cells(37, 4), Sheets("Summary").Cells(51, 4)).Value = ""
End Sub

Sub Rectangle1Reset2_Click()
    Range("aa22:aa28").Select
    Selection.ClearContents
    Range("e21:e28").Select
    Selection.ClearContents
    Range("h21:h28").Select
    Selection.ClearContents
    ActiveWindow.ScrollRow = 17
    ActiveWindow.ScrollColumn = 1
End Sub

Sub Rectangle1Reset3_Click()
    Range("aa31:aa38").Select
    Selection.ClearContents
    Range("e31:e38").Select
    Selection.ClearContents
    Range("h31:h38").Select
    Selection.ClearContents
    ActiveWindow.ScrollRow = 27
    ActiveWindow.ScrollColumn = 1
End Sub
Sub Rectangle1Reset4_Click()
    Range("aa41:aa48").Select
    Selection.ClearContents
    Range("e41:e48").Select
    Selection.ClearContents
    Range("h41:h48").Select
    Selection.ClearContents
    ActiveWindow.ScrollRow = 37
    ActiveWindow.ScrollColumn = 1
End Sub
Sub Rectangle1Reset5_Click()
    Range("aa51:aa58").Select
    Selection.ClearContents
    Range("e51:e58").Select
    Selection.ClearContents
    Range("h51:h58").Select
    Selection.ClearContents
    ActiveWindow.ScrollRow = 47
    ActiveWindow.ScrollColumn = 1
End Sub
Sub Rectangle1Reset6_Click()
    Range("aa61:aa68").Select
    Selection.ClearContents
    Range("e61:e68").Select
    Selection.ClearContents
    Range("h61:h68").Select
    Selection.ClearContents
    ActiveWindow.ScrollRow = 57
    ActiveWindow.ScrollColumn = 1
End Sub
Sub Rectangle1Reset7_Click()
    Range("aa71:aa78").Select
    Selection.ClearContents
    Range("e71:e78").Select
    Selection.ClearContents
    Range("h71:h78").Select
    Selection.ClearContents
    ActiveWindow.ScrollRow = 67
    ActiveWindow.ScrollColumn = 1
End Sub
Sub Rectangle1Reset8_Click()
    Range("aa81:aa88").Select
    Selection.ClearContents
    Range("e81:e88").Select
    Selection.ClearContents
    Range("h81:h88").Select
    Selection.ClearContents
    ActiveWindow.ScrollRow = 77
    ActiveWindow.ScrollColumn = 1
End Sub
Attribute VB_Name = "Module5"
Sub SaveQuote_click()
Attribute SaveQuote_click.VB_ProcData.VB_Invoke_Func = " \n14"

'PURPOSE: How To Paste Values Only With PasteSpecial
'SOURCE: www.TheSpreadsheetGuru.com/the-code-vault
  
   
'Copy A Range of Data
  Worksheets("Summary").Range("l34").Copy

'PasteSpecial Values Only
  Worksheets("Summary").Range("d34").PasteSpecial Paste:=xlPasteValues

'Clear Clipboard (removes "marching ants" around your original data set)
  Application.CutCopyMode = False


'We use the below location to create an OFFLINE/Local database. This is for
'times when people are not on the UL network, but still want to generate quotes.
'Once they connect back to the network, we merge the databases together. You may not need this.
Const DB_LOCATION = "C:\PC Documents\Local_Database.accdb"
'Location of the database template file
Const OFFLINE_DB_TEMPLATE = ""
'Location of the server database file. Update your employee ID here if you want to use the
'database on your desktop
Const SERVER_DB_LOCATION = "\\ul.sharepoint.com@SSL\DavWWWRoot\sites\pm\GCP\Pricing Tool\PM Safety Certification Quoting Tool\PM Quote Database.accdb"
'Dim OutputType As String
'Dim WRITE_TO_SERVER As Boolean

Dim SaveTime As Date
Dim db As DAO.Database
Dim rs As DAO.Recordset
Dim ValidQuote As Boolean
Dim ord As Boolean
Dim answer As Integer

'    answer = MsgBox("Will this quote be sent to the customer?", vbYesNo + vbQuestion, "Empty Sheet")
'
'    If answer = vbYes Then
'        '//Quote is valid, write to server
'        ValidQuote = True
'    Else
'        '//Invalid Quote
'        ValidQuote = False
'    End If

    '//If errors occur the function will exit with a return value of false (insertion failed)
    'On Error GoTo ErrHandler:


    '//Recommended: Validate all values here before inserting into DB
    '//   -- Check that data is of right type and meets business rules
    
    '//Table has a datecreated/datemodified timestamp for each record
    SaveTime = Now
    
'    '//Open Local Database
'    If db Is Nothing And [DatabaseStatus].Value = "OFFLINE" Then
'        MsgBox "Writing to local database. Please merge when online."
'       Set db = DAO.Workspaces(0).OpenDatabase(DB_LOCATION)
'    End If
'
'    '//Open Server Database
'    If db Is Nothing And [DatabaseStatus].Value = "ONLINE" Then
       Set db = DAO.Workspaces(0).OpenDatabase(SERVER_DB_LOCATION)
'    End If
    
    '//Open Customer Table
    If rs Is Nothing Then
        Set rs = db.OpenRecordset("Quote_Table", dbOpenDynaset)
    End If
    
    Dim row As Range
    
    
    For Each row In Worksheets("PM Pricing").Range("A10:A16")
        'If data exists, dump into database. If no data, skip
        'Cells(Row,Col)
        If row.Cells(1, 9) <> "" Then
            With rs
            '//Insert Record into Database
            .AddNew
            ![industry] = [industry]
            ![project_description] = [project_description]
            ![employee_number] = [employee_number]
            ![quote_number] = [quote_number]
            ![Customer_Name] = [customer]
            ![discount_percent] = [discount_percent]
            ![discount_reason] = [discount_reason]
            ![region] = [region]
            ![quote_reference] = [quote_reference]
            ![currency] = row.Cells(1, 24) 'Currency
            ![Base_tests] = row.Cells(1, 8) 'Base Tests
            ![CCN] = row.Cells(1, 3) 'CCN
            ![project_type] = [project_type] 'Project Type
            ![Product_Attributes] = row.Cells(1, 45) 'Product Attributes
            ![new_model_number] = row.Cells(1, 50) 'Number of New Models
            ![additional_model_number] = row.Cells(1, 51) ' Number of Additional Models
            ![certification_type] = row.Cells(1, 48) 'Type of Certification
            ![test_location] = row.Cells(1, 47) 'Test Location
            ![New_Model_Price] = row.Cells(1, 44) 'Calculated Model Price
            ![NM_Engineering_Hours] = row.Cells(1, 12) 'New Model Engineering Hours
            ![Standard] = row.Cells(1, 9) 'UL Standard being tested
            ![product_type] = row.Cells(1, 52) 'Oracle product type
            ![service_type] = row.Cells(1, 48) 'Type of Certification
            ![feedback] = [feedback] 'Oracle product type
            ![Modified_New_Work_Eng_Hours] = [Modified_New_Work_Eng_Hours]
            ![Modified_New_Work_Lab_hours] = [Modified_New_Work_Lab_hours]
            ![Time_Stamp] = SaveTime 'Current day and time
            .Update
            End With
        End If
        Next row
    
    MsgBox "Information update was successful."
    rs.Close
    Set rs = Nothing

End Sub
Attribute VB_Name = "Module6"
Sub Macrotest()
Attribute Macrotest.VB_Description = "macro test"
Attribute Macrotest.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macrotest Macro
' macro test
'

'
    'Sheets("MSD Data").Select
    'Application.SendKeys ("%a")
    'Application.SendKeys ("%y1")
    
    
    aSheet = ActiveSheet.Name
    Sheets("MSD Data").Visible = True
    Sheets("MSD Data").Select
    Application.SendKeys ("%a")
    Application.SendKeys ("%y1")
    Sheets("MSD Data").Visible = False
    Sheets(aSheet).Select
    
End Sub

Attribute VB_Name = "Module7"
Sub Spinner50_Change()

End Sub
Attribute VB_Name = "ModuleAssumptions"
Attribute VB_Name = "ModuleDocuments"
Sub openECM()

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, s3 As String
Dim pWebAddress As String, flexNum As String, docx(5) As HTMLDocument, pwebAddressx(5) As String
Dim IE As InternetExplorer, IEx(5) As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object, div2 As Object, div3 As Object
Dim doc As HTMLDocument, cEmail As String, cPhone As String
Dim elem As HTMLBaseElement
Dim sh, shx(5)
Dim eachIE, eachIEx(5)
Dim x9 As HTMLBaseElement

Call initializeConst
If Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = "" Then
    MsgBox "Add Flex ID number and try again"
    GoTo noFlexID
End If

Dim errNum As Long, answer As Integer
If 1 = 0 Then ' only get to errHandler if there is an error
errHandler:
    answer = MsgBox("Program error. Click the 'Check for tool updates' button to attempt to fix.", vbCritical, "I am afraid I can't do that Dave")
    Exit Sub
End If


flexNum = Replace(Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value, "-", "")

pWebAddress = "https://ecm.ul.com/otcs/cs.exe/app/nodes/150283005"

ProgressForm.Label1.Visible = False
ProgressForm.Label3.Caption = "log into office 365"
ProgressForm.Left = Application.Left
ProgressForm.Top = Application.Top
ProgressForm.Show

Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      ProgressForm.Label1.Visible = True
      ProgressForm.Hide
      Set IE = eachIE
      IE.Visible = True 'False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend


Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Do
    Set doc = IE.Document
    DoEvents
Loop Until Not (doc.getElementById("csui-textfield-alpaca17") Is Nothing) And Not (doc.getElementById("csui-custom-search-form-submit") Is Nothing)

login:
Set x9 = doc.getElementById("csui-textfield-alpaca17")
Set x9 = x9.Children(0).Children(0).Children(0)
x9.Click
x9.Value = flexNum
x9.Click
x9.FireEvent ("onchange")
Sleep 100
doc.getElementById("csui-custom-search-form-submit").Click

Set IE = Nothing

noFlexID:

End Sub

Sub MoveFiles()

    Dim SaveDriveDir As String, mypath As String, s1 As String
    Dim fName As Variant, temp As String, timeout As Long
    Dim tabNum As Long, x As Long
    Dim s2 As String
    tabNum = 0
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False

    SaveDriveDir = CurDir
    mypath = SaveDriveDir
    ChDrive mypath
    ChDir mypath
'Sleep 1000
timeout = 0
Do
    timeout = timeout + 1
    Sleep 100
Loop Until Dir(downloadPath & "*.crdownload") = "" Or timeout = 100
Sleep 100
tabNum = 0
Do
    x = 0
    Do
        If Worksheets("Documents").Cells(7 + x, 3 + 7 * tabNum).Value <> "" Then
            If Dir(Worksheets("Documents").Cells(7 + x, 3 + 7 * tabNum).Value) = "" Then
                fName = Application.GetOpenFilename(Title:=Worksheets("Documents").Cells(7 + x, 2 + 7 * tabNum).Value & " not found or is still downloading. Locate this document to proceed", MultiSelect:=False) 'filefilter:="Rich*") '  Text Format (*.rtf*")
                If fName = False Then
                    GoTo Cancelled
                End If
                temp = fName
            Else
                temp = Worksheets("Documents").Cells(7 + x, 3 + 7 * tabNum).Value
            End If
            s1 = getDirectory() & getFNameNoExt(temp)
            s2 = getFNameExt(temp)
            If Dir(s1 & s2) <> "" Then
                x = 0
                Do
                    x = x + 1
                Loop Until Dir(s1 & " (" & x & ")" & s2) = ""
                Name s1 & s2 As s1 & " (" & x & ")" & s2
            End If
            
            Name temp As (getDirectory() & getFNameAndExt(temp))
            Worksheets("Documents").Cells(7 + x, 3 + 7 * tabNum).Value = (getDirectory() & getFNameAndExt(temp))
        End If
Cancelled:
        x = x + 1
    Loop Until Worksheets("Documents").Cells(7 + x, 2 + 7 * tabNum).Value = ""
    tabNum = tabNum + 1
Loop Until tabNum > 5

Call RefreshListbox
    
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
Exit Sub

errHandler:
    MsgBox "There is an error"


End Sub

Sub StartDocForm()

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long
Dim pWebAddress As String
Dim x As Long, i As Long
Dim tbl As Object, p As Object, li As Object, td As Object, fld As Object, td2 As HTMLBaseElement
Dim doc As HTMLDocument, lastAddress As String
Dim totalDocuments As Long, y As Long, yy As Long, z As Long, page As Long, y2 As Long, z1 As Long
Dim IE As InternetExplorer
Dim docxx(6) As HTMLDocument, pWebAddressxx(6) As String
Dim IExx(6) As InternetExplorer
Dim IE1(6) As Boolean, IE2(10) As Boolean
Dim tabNum As Long, docName As String, docLink As String
Dim totalTasks As Long
Dim shxx(6)
Dim eachIExx(6)

On Error GoTo errHandler
Dim errNum As Long, answer As Integer
If 1 = 0 Then ' only get to errHandler if there is an error
errHandler:
    answer = MsgBox("Program error. Click the 'Check for tool updates' button to attempt to fix.", vbCritical, "I am afraid I can't do that Dave")
    Exit Sub
End If



'Verify Flex URL/ID is present
Call validateURL

Set IE = New InternetExplorer
StatusForm.Show
StatusForm.Label1.Caption = "Retreiving Task information"
IE.Visible = False ' True
pWebAddress = "https://portal.ul.com/Project/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "/Task?&viewType=List"
IE.navigate pWebAddress
IE.Visible = False

Dim sh
Dim eachIE
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing
While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Set doc = IE.Document

login:
If doc.getElementById("body") Is Nothing Then
    MsgBox "Log into Flex"
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If
Do
    Sleep 50
Set doc = IE.Document
Loop Until Not (doc.getElementsByTagName("body") Is Nothing)
Set doc = IE.Document
IE.Visible = False 'True

Dim x9 As HTMLBaseElement

pWebAddressxx(0) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "12981bac-5d2f-43e6-9bf8-1404fecf3701"
pWebAddressxx(1) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "dc055d4f-0835-4972-8231-2aeea611ec49"
pWebAddressxx(2) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "a19b4b06-32a8-45d7-9083-961e7d92e242"
pWebAddressxx(3) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "a98c8961-7385-4933-a90b-9ab9885c654b"
pWebAddressxx(4) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "738429ff-2d0d-48ba-891c-168499dc9555"
pWebAddressxx(5) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "c3da7c2b-2350-4306-964b-3ea5b8846abc"

For x = 0 To 5
Set IExx(x) = New InternetExplorer
IExx(x).Visible = False
IExx(x).Left = 0
IExx(x).Top = 0
IExx(x).Height = 0
IExx(x).Width = 0
IExx(x).navigate pWebAddressxx(x)
IExx(x).Visible = False
While IExx(x).Busy
  DoEvents
  Wend
Sleep 50
Next x

For x = 0 To 5
If x = 0 Then
    StatusForm.Label1.Caption = "Retreiving Reports"
End If
If x = 1 Then
    StatusForm.Label1.Caption = "Retreiving Reference Materials"
End If
If x = 2 Then
    StatusForm.Label1.Caption = "Retreiving Communications"
End If
If x = 3 Then
    StatusForm.Label1.Caption = "Retreiving Datasheets and Test Records"
End If
If x = 4 Then
    StatusForm.Label1.Caption = "Retreiving Facility Assessment"
End If
If x = 5 Then
    StatusForm.Label1.Caption = "Retreiving Unspecified"
End If
Do
  Set shxx(x) = New Shell32.Shell
  For Each eachIExx(x) In shxx(x).Windows
    If InStr(1, eachIExx(x).LocationURL, pWebAddressxx(x)) Then
      Set IExx(x) = eachIExx(x)
      IExx(x).Visible = True  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIExx(x)
  Loop
Set eachIExx(x) = Nothing
Set shxx(x) = Nothing
While IExx(x).Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Do
DoEvents
Loop Until IExx(x).readyState = READYSTATE_COMPLETE
Set docxx(x) = IExx(x).Document

loginx:
If docxx(x).getElementById("body") Is Nothing Then
    MsgBox "Log into Flex"
    Do
        DoEvents
    Loop Until IExx(x).readyState = READYSTATE_COMPLETE
    Set docxx(x) = IExx(x).Document
    GoTo loginx
End If
Do
Sleep 50
Set docxx(x) = IExx(x).Document
Loop Until Not (docxx(x).getElementById("body") Is Nothing)
Next x



'''fix for projects without a task #1

Set x9 = doc.getElementById("body").Children(0).Children(2).Children(7).Children(1).Children(1)
'Clear tasks in sheet
y2 = 0
Do
    Worksheets("Documents").Cells(7 + y2, 52).Value = ""
    Worksheets("Documents").Cells(7 + y2, 53).Value = ""
    Worksheets("Documents").Cells(7 + y2, 54).Value = ""
    y2 = y2 + 1
Loop Until Worksheets("Documents").Cells(7 + y2, 52).Value = ""

totalTasks = x9.Children.Length

For y = 1 To totalTasks
    Worksheets("Documents").Cells(6 + y, 52).Value = x9.Children(y - 1).Children(2).innerText 'doc.getElementById("body").Children(0).Children(2).Children(3).Children(0).Children(1).Children(y - 1).Children(2).innerText
    If x9.Children(y - 1).Children(4).innerText = "Completed" Or x9.Children(y - 1).Children(4).innerText = "Canceled" Then
        s1 = x9.Children(y - 1).Children(11).Children(0).Children(1).Children(1).Children(0).innerHTML
        Worksheets("Documents").Cells(6 + y, 53).Value = Mid(s1, InStr(s1, "/Task/Detail/") + 13, 77) ' Len(s1) - (InStr(s1, "view_") + 5) + 1)
    Else
        s1 = x9.Children(y - 1).Children(11).Children(0).Children(2).Children(1).Children(0).innerHTML 'doc.getElementById("body").Children(0).Children(2).Children(3).Children(0).Children(1).Children(y - 1).Children(2).Children(11).Children(0).Children(1).Children(1).Children(0).innerHTML
        Worksheets("Documents").Cells(6 + y, 53).Value = Mid(s1, InStr(s1, "/Task/Detail/") + 13, 77) ' Len(s1) - (InStr(s1, "view_") + 5) + 1)
    End If
Next y
StatusForm.Hide

'add function to get document associations from link here
If Worksheets("Documents").Cells(7, 60).Value <> "" Then
For y = 1 To totalTasks
    pWebAddress = "https://portal.ul.com/Project/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "/Task/Detail/" & Worksheets("Documents").Cells(6 + y, 53).Value
    StatusForm.Show
    StatusForm.Label1.Caption = "Fetching task info #" & y & ": " & Worksheets("Documents").Cells(6 + y, 52).Value
    IE.Visible = True
    IE.navigate pWebAddress
    IE.Visible = True
    While IE.Busy
        DoEvents
    Wend
    Do
        Set sh = New Shell32.Shell
        For Each eachIE In sh.Windows
            If InStr(1, eachIE.LocationURL, pWebAddress) Then
                Set IE = eachIE
                IE.Visible = True  'This is here because in some environments, the new process defaults to Visible.
                Exit Do
            End If
        Next eachIE
    Loop
    Set eachIE = Nothing
    Set sh = Nothing
    While IE.Busy  ' The new process may still be busy even after you find it
        DoEvents
    Wend

    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Do
        Sleep 50
        Set doc = IE.Document
    Loop Until Not (doc.getElementById("body") Is Nothing)
    Set doc = IE.Document
    For Each td In doc.getElementsByTagName("dd")
        If InStr(td.innerHTML, "DownloadDocument") > 0 Then
            Worksheets("Documents").Cells(6 + y, 54).Value = Worksheets("Documents").Cells(6 + y, 54).Value & td.innerText & " " ' vbLf
        End If
    Next td
Next y

debug1:
GoTo debug2:

Dim IEx() As InternetExplorer
Dim docx() As HTMLDocument
Dim shx()
Dim eachIEx()
Dim pwebAddressx() As String

ReDim IEx(totalTasks)
ReDim docx(totalTasks)
ReDim shx(totalTasks)
ReDim eachIEx(totalTasks)
ReDim pwebAddressx(totalTasks)
For y = 1 To totalTasks
    pwebAddressx(y - 1) = "https://portal.ul.com/Project/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "/Task/Detail/" & Worksheets("Documents").Cells(6 + y, 53).Value
    StatusForm.Show
    StatusForm.Label1.Caption = "Fetching task info #" & y & ": " & Worksheets("Documents").Cells(6 + y, 52).Value
    Set IEx(y - 1) = New InternetExplorer
    IEx(y - 1).Visible = True
    IEx(y - 1).navigate pwebAddressx(y - 1)
    While IEx(y - 1).Busy
        DoEvents
    Wend
    Do
        Set shx(y - 1) = New Shell32.Shell
        For Each eachIEx(y - 1) In shx(y - 1).Windows
            If InStr(1, eachIEx(y - 1).LocationURL, pwebAddressx(y - 1)) Then
                Set IEx(y - 1) = eachIEx(y - 1)
                'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
                Exit Do
            End If
        Next eachIEx(y - 1)
    Loop
    Set eachIEx(y - 1) = Nothing
    Set shx(y - 1) = Nothing
Next y
For y = 1 To totalTasks
    While IEx(y - 1).Busy ' The new process may still be busy even after you find it
        DoEvents
    Wend

    Do
        DoEvents
    Loop Until IEx(y - 1).readyState = READYSTATE_COMPLETE
    Do
        Sleep 50
        Set docx(y - 1) = IEx(y - 1).Document
    Loop Until Not (docx(y - 1).getElementById("body") Is Nothing)
    Set docx(y - 1) = IEx(y - 1).Document
For Each td In docx(y - 1).getElementsByTagName("dd")
    If InStr(td.innerHTML, "DownloadDocument") > 0 Then
        Worksheets("Documents").Cells(6 + y, 54).Value = Worksheets("Documents").Cells(6 + y, 54).Value & td.innerText & " " ' vbLf
    End If
Next td
IEx(y - 1).Quit
Set IEx(y - 1) = Nothing
Next y
End If 'end if statement for task flag
debug2:

StatusForm.Hide
debugNoTasks:


For z1 = 0 To 5
If z1 = 0 Then
    StatusForm.Label1.Caption = "Retreiving Reports"
End If
If z1 = 1 Then
    StatusForm.Label1.Caption = "Retreiving Reference Materials"
End If
If z1 = 2 Then
    StatusForm.Label1.Caption = "Retreiving Communications"
End If
If z1 = 3 Then
    StatusForm.Label1.Caption = "Retreiving Datasheets and Test Records"
End If
If z1 = 4 Then
    StatusForm.Label1.Caption = "Retreiving Facility Assessment"
End If
If z1 = 5 Then
    StatusForm.Label1.Caption = "Retreiving Unspecified"
End If

tabNum = z1
page = 1
x = 6
Do
    x = x + 1
Loop Until Worksheets("Documents").Cells(x, 2 + 7 * tabNum).Value = ""

s2 = docxx(z1).getElementById("body").Children(0).Children(2).Children(1).Children(2).innerHTML
s2 = "https://portal.ul.com" & Mid(s2, InStr(s2, "href=") + 6, 145)
Worksheets("Documents").Cells(5, 53).Value = s2

If docxx(z1).getElementById("body").Children(0).Children(3).Children(2).Children.Length = 1 Then
    GoTo noDocs
End If

s1 = docxx(z1).getElementById("frmSearchTop").Children(1).Children(0).Children(0).innerText
s2 = Mid(s1, InStr(s1, "of") + 3, Len(s1) - InStr(s1, "of") - 2)
totalDocuments = CInt(s2)

yy = 1 'yy is the current count (1 thru 10) for the page
For y = 1 To totalDocuments
    'if end of 10 documents on page, go to next page
If y = docxx(z1).getElementById("body").Children(0).Children(3).Children(2).Children.Length = 1 Then
    GoTo noDocs
End If
    
    If y = page * 10 + 1 Then
        page = page + 1
        IExx(z1).navigate Replace(pWebAddressxx(z1), "Paging.Page=1", "Paging.Page=" & page), self
        Do
            DoEvents
        Loop Until IExx(z1).readyState = READYSTATE_COMPLETE
        Sleep 50
        Do
            DoEvents
        Loop Until IExx(z1).readyState = READYSTATE_COMPLETE
        Debug.Print Replace(pWebAddress, "Paging.Page=1", "Paging.Page=" & page)
        Do
            Sleep 50
            Set doc = IExx(z1).Document
        Loop Until Not (docxx(z1).getElementById("body") Is Nothing)
        Set docxx(z1) = IExx(z1).Document
        Debug.Print z1
        Debug.Print y
        Debug.Print totalDocuments
        If docxx(z1).getElementById("body").Children(0).Children(3).Children(2).Children.Length = 1 Then
            GoTo noDocs
        End If
        lastAddress = IExx(z1).LocationURL
        yy = 1
    End If
    If docxx(z1).getElementById("body").Children(0).Children(3).Children(2).Children.Length = 2 * (yy - 1) Then
        GoTo noDocs
    End If
    docName = docxx(z1).getElementById("body").Children(0).Children(3).Children(2).Children(2 * (yy - 1)).Children(2).Children(1).Children(0).innerText
    
    s1 = docxx(z1).getElementById("body").Children(0).Children(3).Children(2).Children(2 * (yy - 1)).Children(2).Children(1).Children(0)
    
'get reupload link
    Set x9 = docxx(z1).getElementById("body").Children(0).Children(3).Children(2).Children(2 * (yy - 1)).Children(1).Children(0).Children(1)
    s1 = x9.Children(0).innerHTML
    For Each li In x9.getElementsByTagName("li")
        If InStr(li.outerHTML, "UploadMultiple") > 0 Then
            s2 = li.innerHTML
            s2 = "https://portal.ul.com/" & Mid(s2, InStr(s2, "href=") + 6, 194)
        End If
    Next li
    
    If InStr(s1, "data-id=") > 0 Then
        docLink = Replace(Mid(s1, InStr(s1, "data-id=") + 9, 36), "-", "")
    Else
        docLink = Mid(s1, InStr(s1, "DownloadDocument/") + 17, 32)
    End If
'figure out the associated tasks
    s1 = ""
    x1 = 7
    Do
        If InStr(Worksheets("Documents").Cells(x1, 54).Value, docName) > 0 Then
            s1 = s1 & Worksheets("Documents").Cells(x1, 52).Value & ": "
        End If
        x1 = x1 + 1
    Loop Until Worksheets("Documents").Cells(x1, 52).Value = ""
    
    Call addDocItem(z1, docName, "", docLink, s1, "Online file, not downloaded yet: ", "", s2)
        
    lastAddress = IExx(z1).LocationURL
    
    yy = yy + 1
Next y

noDocs:
IExx(z1).Quit
Set docxx(z1) = Nothing
Set IExx(z1) = Nothing
Next z1

Call RefreshListbox

    IE.Quit
    Set doc = Nothing
    Set IE = Nothing
   
errorEnd:

End Sub
Sub myFormat()

MsgBox Format(Date, "yymmdd") & "-" & Format(Time(), "hhmmss")

End Sub
Sub uploadFlexFiles(tabNum As Long)

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long
Dim pWebAddress As String
Dim tbl As Object, p As Object, li As Object, td As Object, fld As Object, td2 As HTMLBaseElement, div As Object
Dim doc As HTMLDocument, lastAddress As String
Dim totalDocuments As Long, y As Long, yy As Long, z As Long, page As Long
Dim IE As InternetExplorer
Dim docx(6) As HTMLDocument
Dim IEx(6) As InternetExplorer
Dim shx(6)
Dim eachIEx(6)
Dim pwebAddressx(6) As String
Dim x As Long, docName As String, docLink As String, x9 As HTMLBaseElement
Dim totalTasks As Long
Dim varx(6), varxNum(6)
Dim debugText As String, varxLenError As String
Dim varCol(6) As New Collection, IEcol(6) As New Collection, ColCount(6) As Long

MsgBox "NOTE: Wait for all uploads to complete before using mouse and keyboard." & vbLf & vbLf & "Press Start button again before downloading or making the task-document associations"
'Verify Flex URL/ID is present
Call validateURL
debugText = ""

'x3 = 0
x3 = tabNum
'Do
varx(x3) = ""
y = 0
Worksheets("Documents").Cells(5, 2 + 7 * x3).Value = ""
If Worksheets("Documents").Cells(7 + y, 2 + 7 * x3).Value <> "" Then
Do
        If Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value <> "" Then
            If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems(y + 1).Selected = True Then
                If Dir(Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value) = "" Then
                    debugText = debugText & vbLf & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value
                Else
                    If Len(varx(x3) & Chr(34) & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value & Chr(34) & " ") < 258 Then
                        Worksheets("Documents").Cells(5, 2 + 7 * x3).Value = Worksheets("Documents").Cells(5, 2 + 7 * x3).Value & Chr(34) & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value & Chr(34) & " "
                        Worksheets("Documents").Cells(7 + y, 6 + 7 * x3).Value = "Uploaded: "
                        varx(x3) = varx(x3) & Chr(34) & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value & Chr(34) & " "
                    Else
                        varCol(x3).Add varx(x3) ', varCol(x3).Count + 1
                        varx(x3) = Chr(34) & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value & Chr(34) & " "
                        Worksheets("Documents").Cells(7 + y, 6 + 7 * x3).Value = "Uploaded: "
                    End If
                End If
            End If
        End If
        y = y + 1
    Loop Until Worksheets("Documents").Cells(7 + y, 2 + 7 * x3).Value = ""
    varCol(x3).Add varx(x3) ', varCol(x3).Count+1
End If

pwebAddressx(0) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "12981bac-5d2f-43e6-9bf8-1404fecf3701"
pwebAddressx(1) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "dc055d4f-0835-4972-8231-2aeea611ec49"
pwebAddressx(2) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "a19b4b06-32a8-45d7-9083-961e7d92e242"
pwebAddressx(3) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "a98c8961-7385-4933-a90b-9ab9885c654b"
pwebAddressx(4) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "738429ff-2d0d-48ba-891c-168499dc9555"
pwebAddressx(5) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "c3da7c2b-2350-4306-964b-3ea5b8846abc"

x3 = tabNum
'Do
If varCol(x3).Count = 0 Then
    GoTo noDocs
End If
For y3 = 1 To varCol(x3).Count

varx(x3) = varCol(x3).Item(y3)

Set IEx(x3) = NewValidIE(pwebAddressx(x3))
IEx(x3).Visible = True
IEcol(x3).Add IEx(x3)

Sleep 50
Do
DoEvents
Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
Set docx(x3) = IEx(x3).Document

login:
If docx(x3).getElementById("body") Is Nothing Then
    MsgBox "Log into Flex"
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    GoTo login
End If

Do
Sleep 50
Set docx(x3) = IEx(x3).Document
Loop Until Not (docx(x3).getElementById("upload") Is Nothing) '(docx(x3).getElementsByTagName("div") Is Nothing)

    docx(x3).getElementById("upload").Click
    
    Sleep 500
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 200
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    
    
''' updated 10/9/2017 per R18 update
uploadFormPending:
    Set docx(x3) = IEx(x3).Document
Set x9 = docx(x3).body
For Each li In docx(x3).getElementsByTagName("button")
    Debug.Print li.innerText
    If li.innerText = "Browse" Then
        Set x9 = li
        Set x9 = x9.parentElement
        GoTo uploadFormDone
        
    End If
Next li
GoTo uploadFormPending

uploadFormDone:
Debug.Print x9.Children.Length
Debug.Print x9.parentElement.Children.Length
Set x9 = x9.parentElement
Set x9 = x9.Children(1)

    Worksheets("Documents").Cells(5, 2 + 7 * x3).Copy
    x9.Focus
    
    Sleep 50
    SendKeys " "

    
'''at file picker window here. User to paste copied file information into window
    Sleep 1000

    SendKeys (Replace(Replace(varx(x3), "(", "{(}"), ")", "{)}"))
    Sleep 200
    SendKeys "{ENTER}"
    
Next y3
    
noDocs:
x3 = tabNum
If varCol(x3).Count = 0 Then
    GoTo noDocs2
End If
For y3 = 1 To varCol(x3).Count
    
Set IEx(x3) = IEcol(x3).Item(y3)

While IEx(x3).Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Sleep 50
Do
DoEvents
Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
Set docx(x3) = IEx(x3).Document
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    docx(x3).getElementById("apply").Click
    
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    docx(x3).getElementById("Overwrite").Click

    Sleep 50
    docx(x3).getElementById("DocumentTypeId").selectedIndex = x3
    Set x9 = docx(x3).body
    Set x9 = docx(x3).getElementById("apply").parentElement.parentElement.parentElement.parentElement.parentElement.parentElement
    Set x9 = x9.Children(3)
    Set x9 = x9.Children(1)
    x9.Click
noDocs2:
Next y3


If debugText <> "" Then
    MsgBox "The following file names differ in flex from the downloaded file name and will need to be manually uploaded: " & vbLf & debugText & vbLf & vbLf & "The following files were unable to upload due to field size limitations: " & varxLenError
End If
Call RefreshListbox
errorEnd:

End Sub

Sub uploadSpecificFile(tabNum As Long, fileName As String)

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long
Dim pWebAddress As String
Dim tbl As Object, p As Object, li As Object, td As Object, fld As Object, td2 As HTMLBaseElement, div As Object
Dim doc As HTMLDocument, lastAddress As String
Dim totalDocuments As Long, y As Long, yy As Long, z As Long, page As Long
Dim IE As InternetExplorer
Dim docx(6) As HTMLDocument
Dim IEx(6) As InternetExplorer
Dim shx(6)
Dim eachIEx(6)
Dim pwebAddressx(6) As String
Dim x As Long, docName As String, docLink As String, x9 As HTMLBaseElement
Dim totalTasks As Long
Dim varx(6), varxNum(6)
Dim debugText As String, varxLenError As String
Dim varCol(6) As New Collection, IEcol(6) As New Collection, ColCount(6) As Long

'Verify Flex URL/ID is present
Call validateURL
debugText = ""

x3 = tabNum
varx(x3) = fileName

    varCol(x3).Add varx(x3) ', varCol(x3).Count+1

pwebAddressx(0) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "12981bac-5d2f-43e6-9bf8-1404fecf3701"
pwebAddressx(1) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "dc055d4f-0835-4972-8231-2aeea611ec49"
pwebAddressx(2) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "a19b4b06-32a8-45d7-9083-961e7d92e242"
pwebAddressx(3) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "a98c8961-7385-4933-a90b-9ab9885c654b"
pwebAddressx(4) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "738429ff-2d0d-48ba-891c-168499dc9555"
pwebAddressx(5) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "c3da7c2b-2350-4306-964b-3ea5b8846abc"

x3 = tabNum
If varCol(x3).Count = 0 Then
    GoTo noDocs
End If
For y3 = 1 To varCol(x3).Count

varx(x3) = varCol(x3).Item(y3)

Set IEx(x3) = NewValidIE(pwebAddressx(x3))
IEx(x3).Visible = True
IEcol(x3).Add IEx(x3)

Sleep 50
Do
DoEvents
Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
Set docx(x3) = IEx(x3).Document

login:
If docx(x3).getElementById("body") Is Nothing Then
    MsgBox "Log into Flex"
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    GoTo login
End If

Do
Sleep 50
Set docx(x3) = IEx(x3).Document
Loop Until Not (docx(x3).getElementById("upload") Is Nothing) '(docx(x3).getElementsByTagName("div") Is Nothing)

    docx(x3).getElementById("upload").Click
    
    Sleep 500
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 200
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
Set x9 = docx(x3).body
Set x9 = x9.Children(15)
Set x9 = x9.Children(0)
Set x9 = x9.Children(0)
Set x9 = x9.Children(1)
Set x9 = x9.Children(0)
Set x9 = x9.Children(0)
Set x9 = x9.Children(1)
Set x9 = x9.Children(1)

    Worksheets("Documents").Cells(5, 2 + 7 * x3).Copy
    x9.Focus
    
    Sleep 50
    SendKeys " "

    
'''at file picker window here. User to paste copied file information into window
    Sleep 1000

    SendKeys (Replace(Replace(varx(x3), "(", "{(}"), ")", "{)}"))
    Sleep 200
    SendKeys "{ENTER}"
    
Next y3
    
noDocs:
    
x3 = tabNum
If varCol(x3).Count = 0 Then
    GoTo noDocs2
End If
For y3 = 1 To varCol(x3).Count
    
Set IEx(x3) = IEcol(x3).Item(y3)

While IEx(x3).Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Sleep 50
Do
DoEvents
Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
Set docx(x3) = IEx(x3).Document
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    docx(x3).getElementById("apply").Click
    
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    docx(x3).getElementById("Overwrite").Click

    Sleep 50
    docx(x3).getElementById("DocumentTypeId").selectedIndex = x3
    Set x9 = docx(x3).body
    Set x9 = docx(x3).getElementById("apply").parentElement.parentElement.parentElement.parentElement.parentElement.parentElement
    Set x9 = x9.Children(3)
    Set x9 = x9.Children(1)
    x9.Click
noDocs2:
Next y3


If debugText <> "" Then
    MsgBox "The following file names differ in flex from the downloaded file name and will need to be manually uploaded: " & vbLf & debugText & vbLf & vbLf & "The following files were unable to upload due to field size limitations: " & varxLenError
End If
Call RefreshListbox
errorEnd:

End Sub
Public Function downloadPath() As String

Dim myWS As Object

  On Error Resume Next
  'access Windows scripting
  Set myWS = CreateObject("WScript.Shell")
  'read key from registry
  downloadPath = Replace(myWS.RegRead("HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders\{374DE290-123F-4565-9164-39C4925E467B}"), "%USERPROFILE%", "C:\Users\" & Environ("username"))
'ShellExecute 0, "Open", Replace("%USERPROFILE%\Downloads\Notice of Authorization-083116.pdf", "%USERPROFILE%", "C:\Users\" & Environ("username")), "", "", vbNormalNoFocus

End Function

Sub deleteSelected2(tabNum As Long)

Dim x As Long, y As Long, z As Long
Dim mypath As String
Dim IE As InternetExplorer, doc As HTMLDocument
Dim x1 As Long, x2 As Long, y1 As Long, y2 As Long

Dim index
If Worksheets("Documents").Cells(7, 2 + 7 * tabNum).Value <> "" Then 'DocForm.Controls.item("ListView" & tabNum + 1).ListItems.Count > 0 Then
    For x = 1 To DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count
        If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems(x).Selected = True Then
            If Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value <> "New file, not uploaded yet: " Or Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value <> "Deleted: " Then
                If Worksheets("Documents").Cells(x + 6, 4 + 7 * tabNum).Value = "" Then
                    Call StartDocForm
                End If
                Call deleteDoc2(Worksheets("Documents").Cells(x + 6, 4 + 7 * tabNum).Value, Worksheets("Documents").Cells(x + 6, 2 + 7 * tabNum).Value)
                Worksheets("Documents").Cells(x + 6, 4 + 7 * tabNum).Value = ""
                Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Deleted: "
            End If
        End If
    Next x
End If

Call RefreshListbox


End Sub

Sub DownloadSelected(tabNum As Long)

Dim x As Long, y As Long, z As Long
Dim mypath As String
Dim IE As InternetExplorer, doc As HTMLDocument
Dim x1 As Long, x2 As Long, y1 As Long, y2 As Long

MsgBox "Be sure to be logged into Flex in CHROME before continuing." & vbLf & vbLf & "Note: Any existing filepath will be changed to download directory."

Dim index
If Worksheets("Documents").Cells(7, 2 + 7 * tabNum).Value <> "" Then 'DocForm.Controls.item("ListView" & tabNum + 1).ListItems.Count > 0 Then
    For x = 1 To DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count
        If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems(x).Selected = True Then
            If Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value <> "New file, not uploaded yet: " Then
            If Worksheets("Documents").Cells(x + 6, 4 + 7 * tabNum).Value = "" Then
                Call StartDocForm
            End If
            Call downloadDoc(Worksheets("Documents").Cells(x + 6, 4 + 7 * tabNum).Value, Worksheets("Documents").Cells(x + 6, 2 + 7 * tabNum).Value)
            Sleep 400
            y = 1
            Worksheets("Documents").Cells(x + 6, 6 + 7 * tabNum).Value = "Downloaded: "
            Worksheets("Documents").Cells(x + 6, 3 + 7 * tabNum).Value = downloadPath() & "\" & Worksheets("Documents").Cells(x + 6, 2 + 7 * tabNum).Value
            End If
        End If
    Next x
End If
If DocForm.CheckBox1.Value = True Then
    Call MoveFiles
Else
    Call RefreshListbox
End If
'Call RefreshListbox

End Sub
Sub DeleteSelected(tabNum As Long)

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long
Dim tbl As Object, p As Object, li As Object, td As Object, fld As Object, td2 As HTMLBaseElement, x9 As HTMLBaseElement
Dim doc As HTMLDocument, lastAddress As String
Dim totalDocuments As Long, y As Long, yy As Long, z As Long, page As Long
Dim IE As InternetExplorer
Dim x As Long, docName As String, docLink As String, pWebAddress As String
    
'Loop for Datasheets and Test Records
pWebAddress = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=List" ' &Filters.ariaDocumentTypeId=" & docType
Set IE = NewValidIE(pWebAddress)
IE.Visible = True

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document

login:
If doc.getElementById("body") Is Nothing Then
    MsgBox "Log into Flex"
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

Do
Sleep 50
Set doc = IE.Document
Loop Until Not (doc.getElementById("body") Is Nothing)

page = 1
x = 6
Do
    x = x + 1
Loop Until Worksheets("Documents").Cells(x, 2 + 7 * tabNum).Value = ""

If doc.getElementById("body").Children(0).Children(3).Children(2).Children.Length = 1 Then
    GoTo noDocs
End If

s1 = doc.getElementById("frmSearchTop").Children(1).Children(0).Children(0).innerText
s2 = Mid(s1, InStr(s1, "of") + 3, Len(s1) - InStr(s1, "of") - 2)
totalDocuments = CInt(s2)

yy = 1 'yy is the current count (1 thru 10) for the page
For y = 1 To totalDocuments
    'if end of 10 documents on page, go to next page
    If y = page * 10 + 1 Then
        page = page + 1
        IE.navigate Replace(pWebAddress, "Paging.Page=1", "Paging.Page=" & page)
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Do
            Sleep 50
            Set doc = IE.Document
        Loop Until Not (doc.getElementById("body") Is Nothing)
        Set doc = IE.Document
        lastAddress = IE.LocationURL
        yy = 1
    End If
    docName = doc.getElementById("body").Children(0).Children(3).Children(2).Children(2 * (yy - 1)).Children(2).Children(1).Children(0).innerText

    If Worksheets("Documents").Cells(7, 2 + 7 * tabNum).Value <> "" Then 'DocForm.Controls.item("ListView" & tabNum + 1).ListItems.Count > 0 Then
        For z = 1 To DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Count
            If DocForm.Controls.Item("ListView" & tabNum + 1).ListItems(z).Selected = True And docName = Worksheets("Documents").Cells(6 + z, 2 + 7 * tabNum).Value Then
                s1 = doc.getElementById("body").Children(0).Children(3).Children(2).Children(2 * (yy - 1)).Children(2).Children(1).Children(0)
                Set x9 = doc.getElementById("body").Children(0).Children(3).Children(2).Children(2 * (yy - 1)).Children(1).Children(0).Children(1)
                s1 = x9.Children(0).innerHTML
                For Each li In x9.getElementsByTagName("li")
                    If InStr(li.outerHTML, "DeleteDocument") > 0 Then
                        IE.Visible = True
                        'click on box first, reload form. Then proceed
                        li.parentElement.previousSibling.Click
                         Do
                            DoEvents
                        Loop Until IE.readyState = READYSTATE_COMPLETE
                        Sleep 50
                        Do
                            DoEvents
                        Loop Until IE.readyState = READYSTATE_COMPLETE
                        Set doc = IE.Document
                                               
                        li.Click
                        Do
                            DoEvents
                        Loop Until IE.readyState = READYSTATE_COMPLETE
                        Sleep 50
                        Do
                            DoEvents
                        Loop Until IE.readyState = READYSTATE_COMPLETE
                        Set doc = IE.Document
                
                        doc.getElementById("submitDelete").Click
                        Do
                            DoEvents
                        Loop Until IE.readyState = READYSTATE_COMPLETE
                        Sleep 50
                        Do
                            DoEvents
                        Loop Until IE.readyState = READYSTATE_COMPLETE
                        GoTo noDocs
                
                    End If
                Next li
            End If
        Next z
    End If
    yy = yy + 1
Next y

noDocs:
IE.Quit
Set IE = Nothing


Call RefreshListbox

End Sub
Sub temp323()
Debug.Print Application.UserName
End Sub


Function NewValidIE(pwebAddress1 As String) As Object
Dim doc As HTMLDocument
Dim totalDocuments As Long, x As Long, y As Long, yy As Long, z As Long, page As Long
Dim IE As InternetExplorer
Dim sh
Dim eachIE
Dim pwebAdddress As String
'use the history area as a landing site. Browser will be redirected from here to avoid taking over a browser window that currently be in use.
pWebAddress = "https://portal.ul.com/Project/History/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value

Set IE = New InternetExplorer
IE.Left = 0
IE.Top = 0
IE.Visible = False
IE.navigate pWebAddress, self
While IE.Busy
  DoEvents
  Wend
  Sleep 50
  Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, "https://idselfserv.ul.com/oam/server/") > 0 Then
      Set IE = eachIE
      IE.Visible = True ' True  'This is here because in some environments, the new process defaults to Visible.
      MsgBox "Log into Flex" ''''
      Set doc = IE.Document
login:
        If doc.getElementById("body") Is Nothing Then
            MsgBox "Log into Flex"
            Do
                DoEvents
            Loop Until IE.readyState = READYSTATE_COMPLETE
            Set doc = IE.Document
            GoTo login
        End If
      
      Exit Do
    End If
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      IE.Visible = False ' True  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
    End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

IE.Visible = False
IE.navigate pwebAddress1
IE.Visible = False

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Sleep 50
While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
IE.Visible = False
Set NewValidIE = IE

End Function

Function NewValidIEUnloaded(pwebAddress1 As String) As Object

Dim doc As HTMLDocument
Dim totalDocuments As Long, x As Long, y As Long, yy As Long, z As Long, page As Long
Dim IE As InternetExplorer
Dim sh
Dim eachIE
Dim pwebAdddress As String
pWebAddress = "https://portal.ul.com/Project/History/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value

'y = 0
Set IE = New InternetExplorer
IE.Left = 0
IE.Top = 0
IE.Visible = False
IE.navigate pWebAddress, self
IE.Visible = False
While IE.Busy
  DoEvents
  Wend
  Sleep 50
  Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, "https://idselfserv.ul.com/oam/server/") > 0 Then
      Set IE = eachIE
      IE.Visible = True ' True  'This is here because in some environments, the new process defaults to Visible.
      MsgBox "Log into Flex" ''''
      Set doc = IE.Document
login:
        If doc.getElementById("body") Is Nothing Then
            MsgBox "Log into Flex"
            Do
                DoEvents
            Loop Until IE.readyState = READYSTATE_COMPLETE
            Set doc = IE.Document
            GoTo login
        End If
      
      Exit Do
    End If
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      IE.Visible = False ' True  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
     'End If
    End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

IE.navigate pwebAddress1
Do
    Sleep 25
Loop Until IE.LocationURL <> pWebAddress

Set NewValidIEUnloaded = IE

End Function

Sub clearDocForm()
Dim x As Long, y As Long


For x = 0 To 6
    y = 0
    Do
        Worksheets("Documents").Cells(7 + y, 2 + 7 * x).Value = ""
        Worksheets("Documents").Cells(7 + y, 3 + 7 * x).Value = ""
        Worksheets("Documents").Cells(7 + y, 4 + 7 * x).Value = ""
        Worksheets("Documents").Cells(7 + y, 5 + 7 * x).Value = ""
        Worksheets("Documents").Cells(7 + y, 6 + 7 * x).Value = ""
        Worksheets("Documents").Cells(7 + y, 7 + 7 * x).Value = ""
        Worksheets("Documents").Cells(7 + y, 8 + 7 * x).Value = ""
        y = y + 1
    Loop Until Worksheets("Documents").Cells(7 + y, 2 + 7 * x).Value = ""
Next x

    y = 0
    Do
        Worksheets("Documents").Cells(7 + y, 52).Value = ""
        Worksheets("Documents").Cells(7 + y, 53).Value = ""
        Worksheets("Documents").Cells(7 + y, 54).Value = ""
        y = y + 1
    Loop Until Worksheets("Documents").Cells(7 + y, 52).Value = ""

    Dim tabNum As Long
    Call RefreshListbox

End Sub

Sub showDocForm()

'separated subs to allow doc form to load without error
Call showDocForm2

End Sub

Sub showDocForm2()
Call RefreshListbox
DocForm.ComboBox3.Clear

x = 7
Do
    DocForm.ComboBox3.AddItem Worksheets("Documents").Cells(x, 52).Value
    x = x + 1
Loop Until Worksheets("Documents").Cells(x, 52).Value = ""
DocForm.Show

End Sub

Sub uploadDocsChrome()

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long
Dim pWebAddress As String
Dim tbl As Object, p As Object, li As Object, td As Object, fld As Object, td2 As HTMLBaseElement, div As Object
Dim doc As HTMLDocument, lastAddress As String
Dim totalDocuments As Long, y As Long, yy As Long, z As Long, page As Long
Dim IE As InternetExplorer
Dim docx(6) As HTMLDocument
Dim IEx(6) As InternetExplorer
Dim shx(6)
Dim eachIEx(6)
Dim pwebAddressx(6) As String
Dim tabNum As Long, x As Long, docName As String, docLink As String, x9 As HTMLBaseElement
Dim totalTasks As Long
Dim varx(6)
    
'Verify Flex URL/ID is present
Call validateURL


x3 = 0
Do
y = 0
Worksheets("Documents").Cells(5, 2 + 7 * x3).Value = ""
If Worksheets("Documents").Cells(7 + y, 2 + 7 * x3).Value <> "" Then
    Do
        Worksheets("Documents").Cells(5, 2 + 7 * x3).Value = Worksheets("Documents").Cells(5, 2 + 7 * x3).Value & Chr(34) & Worksheets("Documents").Cells(7 + y, 2 + 7 * x3).Value & Chr(34) & " "
        y = y + 1
    Loop Until Worksheets("Documents").Cells(7 + y, 2 + 7 * x3).Value = ""
End If
varx(x3) = Worksheets("Documents").Cells(5, 2 + 7 * x3).Value
x3 = x3 + 1
Loop Until x3 = 5


x3 = 0
Do
Set IEx(x3) = New InternetExplorer
IEx(x3).Visible = True
pwebAddressx(x3) = "https://portal.ul.com/Project/Index/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value 'Worksheets("Documents").Cells(5, 53).Value
Shell ("C:\Program Files\Google\Chrome\Application\chrome.exe -url " & pwebAddressx(x3))
IEx(x3).navigate pwebAddressx(x3), self

While IEx(x3).Busy
  DoEvents
  Wend
Do
  Set shx(x3) = New Shell32.Shell
  For Each eachIEx(x3) In shx(x3).Windows
    If InStr(1, eachIEx(x3).LocationURL, pwebAddressx(x3)) Then
      Set IEx(x3) = eachIEx(x3)
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIEx(x3)
  Loop
Set eachIEx(x3) = Nothing
Set shx(x3) = Nothing
While IEx(x3).Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Sleep 50
Do
DoEvents
Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
Set docx(x3) = IEx(x3).Document

login:
If docx(x3).getElementById("body") Is Nothing Then
    MsgBox "Log into Flex"
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    GoTo login
End If

Do
Sleep 50
Set docx(x3) = IEx(x3).Document
Loop Until Not (docx(x3).getElementsByTagName("div") Is Nothing)

    SendKeys "%{TAB}"
    Sleep 100
    For x2 = 1 To 23
        SendKeys "{TAB}"
        Sleep 100
    Next x2
    SendKeys " "
    docx(x3).getElementById("upload").Click
    
    Sleep 400
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
Set x9 = docx(x3).body
Set x9 = x9.Children(15)
Set x9 = x9.Children(0)
Set x9 = x9.Children(0)
Set x9 = x9.Children(1)
Set x9 = x9.Children(0)
Set x9 = x9.Children(0)
Set x9 = x9.Children(1)
Set x9 = x9.Children(1)

    Sleep 10000
    x9.Click
    Sleep 100
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
'''at file picker window here

    Sleep 100
    SendKeys "k"
    Sleep 100
    SendKeys (varx(x3))
    Sleep 100
    SendKeys "{ENTER}"
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    docx(x3).getElementById("apply").Value = True
    
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    docx(x3).getElementById("Overwrite").Value = True

    docx(x3).getElementById("DocumentTypeId").Value = x + 1

    Set x9 = docx(x3).getElementsByClassName("btn btn-primary startUpload")
    x9.Click

'rebuild tool based on IEx

x3 = x3 + 1

Loop Until x3 = 5

errorEnd:

End Sub



Sub deleteDoc2(docID As String, docName As String)


Dim pWebAddress As String
Dim x As Long, y As Long, z As Long, tabNum As Long
Dim mypath As String
Dim IE As InternetExplorer, doc As HTMLDocument

Dim s1 As String, s2 As String

pWebAddress = "https://portal.ul.com/Container/DeleteDocument/" & docID
Set IE = NewValidIE(pWebAddress)
Sleep 50

IE.Quit
Set IE = Nothing
''''
'Shell ("C:\Program Files\Google\Chrome\Application\chrome.exe -url " & pwebAddress)


End Sub

Sub downloadDoc(docID As String, docName As String)

Dim pWebAddress As String
Dim x As Long, y As Long, z As Long, tabNum As Long
Dim mypath As String
Dim IE As InternetExplorer, doc As HTMLDocument

If docID = "" Then
    
End If

Dim s1 As String, s2 As String
If InStr(docName, ".") > 0 Then
    s1 = downloadPath() & "\" & Mid(docName, 1, InStrRev(docName, ".") - 1)
    s2 = Mid(docName, InStrRev(docName, "."), Len(docName) - InStrRev(docName, ".") + 1)
    If Dir(s1 & s2) <> "" Then
        x = 0
        Do
            x = x + 1
        Loop Until Dir(s1 & " (" & x & ")" & s2) = ""
        Name s1 & s2 As s1 & " (" & x & ")" & s2
    End If
Else
    ' figure out what to do with files generated as template documents without suffix
End If

pWebAddress = "https://portal.ul.com/Container/DownloadDocument/" & docID
If Dir("C:\Program Files\Google\Chrome\Application\chrome.exe") <> "" Then
    Shell ("C:\Program Files\Google\Chrome\Application\chrome.exe -url " & pWebAddress)
End If
If Dir("C:\Program Files (x86)\Google\Chrome\Application\chrome.exe") <> "" Then
    Shell ("C:\Program Files (x86)\Google\Chrome\Application\chrome.exe -url " & pWebAddress)
End If


End Sub
Sub deleteDoc(tabNum As Long, row As Long, docType As String)

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long
Dim tbl As Object, p As Object, li As Object, td As Object, fld As Object, td2 As HTMLBaseElement, x9 As HTMLBaseElement
Dim doc As HTMLDocument, lastAddress As String
Dim totalDocuments As Long, y As Long, yy As Long, z As Long, page As Long
Dim IE As InternetExplorer
Dim x As Long, docName As String, docLink As String
    
'Loop for Datasheets and Test Records
pWebAddress = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=List&Filters.ariaDocumentTypeId=" & docType
Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress

Dim sh
Dim eachIE
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing
While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document


login:
If doc.getElementById("body") Is Nothing Then
    MsgBox "Log into Flex"
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

Do
Sleep 50
Set doc = IE.Document
Loop Until Not (doc.getElementById("body") Is Nothing)

page = 1
x = 6
Do
    x = x + 1
Loop Until Worksheets("Documents").Cells(x, 2 + 7 * tabNum).Value = ""

If doc.getElementById("body").Children(0).Children(3).Children(2).Children.Length = 1 Then
    GoTo noDocs
End If

s1 = doc.getElementById("frmSearchTop").Children(1).Children(0).Children(0).innerText
s2 = Mid(s1, InStr(s1, "of") + 3, Len(s1) - InStr(s1, "of") - 2)
totalDocuments = CInt(s2)

yy = 1 'yy is the current count (1 thru 10) for the page
For y = 1 To totalDocuments
    'if end of 10 documents on page, go to next page
    If y = page * 10 + 1 Then
        page = page + 1
        IE.navigate Replace(pWebAddress, "Paging.Page=1", "Paging.Page=" & page)
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Do
            Sleep 50
            Set doc = IE.Document
        Loop Until Not (doc.getElementById("body") Is Nothing)
        Set doc = IE.Document
        lastAddress = IE.LocationURL
        yy = 1
    End If
    docName = doc.getElementById("body").Children(0).Children(3).Children(2).Children(2 * (yy - 1)).Children(2).Children(1).Children(0).innerText
If docName = Worksheets("Documents").Cells(6 + row, 2 + 7 * tabNum).Value Then
    
    s1 = doc.getElementById("body").Children(0).Children(3).Children(2).Children(2 * (yy - 1)).Children(2).Children(1).Children(0)
'get reupload link
    Set x9 = doc.getElementById("body").Children(0).Children(3).Children(2).Children(2 * (yy - 1)).Children(1).Children(0).Children(1)
    s1 = x9.Children(0).innerHTML
    For Each li In x9.getElementsByTagName("li")
        If InStr(li.outerHTML, "DeleteDocument") > 0 Then
            li.Click

            While IE.Busy  ' The new process may still be busy even after you find it
                DoEvents
            Wend

            Do
                DoEvents
            Loop Until IE.readyState = READYSTATE_COMPLETE
            Set doc = IE.Document
                
            doc.getElementById("submitDelete").Click
            While IE.Busy  ' The new process may still be busy even after you find it
                DoEvents
            Wend

            Do
                DoEvents
            Loop Until IE.readyState = READYSTATE_COMPLETE
            GoTo noDocs
                
        End If
    Next li
End If
    
    
    yy = yy + 1
Next y

noDocs:
IE.Quit
Set IE = Nothing
End Sub


Sub addDocItem(tabNum As Long, docName As String, docFilePath As String, docLink As String, docTasks As String, docStatus As String, revDate As String, misc As String)
'addDocItem(tabNum, getFNameNoExt(fName(i)), fName(i), "", "", "New file, not uploaded yet: ")
Dim x As Long, s1 As String, s2 As String, x1 As Long, z1 As String, z2 As String, x2 As Long, y As Long

If Worksheets("Documents").Cells(7, 2 + 7 * tabNum).Value = "" Then
'    MsgBox "checkpoint1"
    Worksheets("Documents").Cells(7, 2 + 7 * tabNum).Value = docName
    Worksheets("Documents").Cells(7, 3 + 7 * tabNum).Value = docFilePath
    Worksheets("Documents").Cells(7, 4 + 7 * tabNum).Value = docLink
    Worksheets("Documents").Cells(7, 5 + 7 * tabNum).Value = docTasks
    Worksheets("Documents").Cells(7, 6 + 7 * tabNum).Value = docStatus
    Worksheets("Documents").Cells(7, 7 + 7 * tabNum).Value = revDate
    Worksheets("Documents").Cells(7, 8 + 7 * tabNum).Value = misc
Else
x = 7
    Do
        s1 = Worksheets("Documents").Cells(x, 2 + 7 * tabNum).Value
        s2 = docName
        If docName = s1 Then
            Worksheets("Documents").Cells(x, 4 + 7 * tabNum).Value = docLink
            GoTo RepeatItem
        End If
        If StrComp(LCase(s1), LCase(s2)) = 0 Then 'same file name
            Worksheets("Documents").Cells(x, 4 + 7 * tabNum).Value = docLink
            Worksheets("Documents").Cells(x, 5 + 7 * tabNum).Value = docTasks
            Worksheets("Documents").Cells(x, 6 + 7 * tabNum).Value = docStatus
            Worksheets("Documents").Cells(x, 7 + 7 * tabNum).Value = revDate
            Worksheets("Documents").Cells(x, 8 + 7 * tabNum).Value = misc
            GoTo alreadyPresent
        End If
        If StrComp(LCase(s1), LCase(s2)) = 1 Then
            x1 = x
            Do
                x1 = x1 + 1
            Loop Until Worksheets("Documents").Cells(x1, 2 + 7 * tabNum).Value = ""
            x2 = x1
            Do
                Worksheets("Documents").Cells(x2, 2 + 7 * tabNum).Value = Worksheets("Documents").Cells(x2 - 1, 2 + 7 * tabNum).Value
                Worksheets("Documents").Cells(x2, 3 + 7 * tabNum).Value = Worksheets("Documents").Cells(x2 - 1, 3 + 7 * tabNum).Value
                Worksheets("Documents").Cells(x2, 4 + 7 * tabNum).Value = Worksheets("Documents").Cells(x2 - 1, 4 + 7 * tabNum).Value
                Worksheets("Documents").Cells(x2, 5 + 7 * tabNum).Value = Worksheets("Documents").Cells(x2 - 1, 5 + 7 * tabNum).Value
                Worksheets("Documents").Cells(x2, 6 + 7 * tabNum).Value = Worksheets("Documents").Cells(x2 - 1, 6 + 7 * tabNum).Value
                Worksheets("Documents").Cells(x2, 7 + 7 * tabNum).Value = Worksheets("Documents").Cells(x2 - 1, 7 + 7 * tabNum).Value
                Worksheets("Documents").Cells(x2, 8 + 7 * tabNum).Value = Worksheets("Documents").Cells(x2 - 1, 8 + 7 * tabNum).Value
                x2 = x2 - 1
            Loop Until x2 = x
            Exit Do
        End If
        x = x + 1
    Loop Until Worksheets("Documents").Cells(x, 2 + 7 * tabNum).Value = ""
    Worksheets("Documents").Cells(x, 2 + 7 * tabNum).Value = docName
    Worksheets("Documents").Cells(x, 3 + 7 * tabNum).Value = docFilePath
    Worksheets("Documents").Cells(x, 4 + 7 * tabNum).Value = docLink
    Worksheets("Documents").Cells(x, 5 + 7 * tabNum).Value = docTasks
    Worksheets("Documents").Cells(x, 6 + 7 * tabNum).Value = docStatus
    Worksheets("Documents").Cells(x, 7 + 7 * tabNum).Value = revDate
    Worksheets("Documents").Cells(x, 8 + 7 * tabNum).Value = misc
End If
alreadyPresent:

'all items
If Worksheets("Documents").Cells(7, 2 + 7 * 6).Value = "" Then
'    MsgBox "checkpoint1"
    Worksheets("Documents").Cells(7, 2 + 7 * 6).Value = docName
    Worksheets("Documents").Cells(7, 3 + 7 * 6).Value = docFilePath
    Worksheets("Documents").Cells(7, 4 + 7 * 6).Value = docLink
    Worksheets("Documents").Cells(7, 5 + 7 * 6).Value = docTasks
    Worksheets("Documents").Cells(7, 6 + 7 * 6).Value = docStatus
    Worksheets("Documents").Cells(7, 7 + 7 * 6).Value = revDate
    Worksheets("Documents").Cells(7, 8 + 7 * 6).Value = misc
Else
x = 7
    Do
        s1 = Worksheets("Documents").Cells(x, 2 + 7 * 6).Value
        s2 = docName
        If docName = s1 Then
            GoTo RepeatItem
        End If
        If StrComp(LCase(s1), LCase(s2)) = 0 Then 'same file name
            Worksheets("Documents").Cells(x, 4 + 7 * 6).Value = docLink
            Worksheets("Documents").Cells(x, 5 + 7 * 6).Value = docTasks
            Worksheets("Documents").Cells(x, 6 + 7 * 6).Value = docStatus
            Worksheets("Documents").Cells(x, 7 + 7 * 6).Value = revDate
            Worksheets("Documents").Cells(x, 8 + 7 * 6).Value = misc
            GoTo alreadyPresent2
        End If
        If StrComp(LCase(s1), LCase(s2)) = 1 Then
            x1 = x
            Do
                x1 = x1 + 1
            Loop Until Worksheets("Documents").Cells(x1, 2 + 7 * 6).Value = ""
            x2 = x1
            Do
                Worksheets("Documents").Cells(x2, 2 + 7 * 6).Value = Worksheets("Documents").Cells(x2 - 1, 2 + 7 * 6).Value
                Worksheets("Documents").Cells(x2, 3 + 7 * 6).Value = Worksheets("Documents").Cells(x2 - 1, 3 + 7 * 6).Value
                Worksheets("Documents").Cells(x2, 4 + 7 * 6).Value = Worksheets("Documents").Cells(x2 - 1, 4 + 7 * 6).Value
                Worksheets("Documents").Cells(x2, 5 + 7 * 6).Value = Worksheets("Documents").Cells(x2 - 1, 5 + 7 * 6).Value
                Worksheets("Documents").Cells(x2, 6 + 7 * 6).Value = Worksheets("Documents").Cells(x2 - 1, 6 + 7 * 6).Value
                Worksheets("Documents").Cells(x2, 7 + 7 * 6).Value = Worksheets("Documents").Cells(x2 - 1, 7 + 7 * 6).Value
                Worksheets("Documents").Cells(x2, 8 + 7 * 6).Value = Worksheets("Documents").Cells(x2 - 1, 8 + 7 * 6).Value
                x2 = x2 - 1
            Loop Until x2 = x
            Exit Do
        End If
        x = x + 1
    Loop Until Worksheets("Documents").Cells(x, 2 + 7 * 6).Value = ""
    Worksheets("Documents").Cells(x, 2 + 7 * 6).Value = docName
    Worksheets("Documents").Cells(x, 3 + 7 * 6).Value = docFilePath
    Worksheets("Documents").Cells(x, 4 + 7 * 6).Value = docLink
    Worksheets("Documents").Cells(x, 5 + 7 * 6).Value = docTasks
    Worksheets("Documents").Cells(x, 6 + 7 * 6).Value = docStatus
    Worksheets("Documents").Cells(x, 7 + 7 * 6).Value = revDate
    Worksheets("Documents").Cells(x, 8 + 7 * 6).Value = misc
End If
alreadyPresent2:

Call RefreshListbox

RepeatItem:
End Sub

Sub RefreshListbox()

Dim x As Long, li As Object, y As Long, x10 As Long, tabNum

'AssumptionForm.Controls.item("data" & i).Value
For tabNum = 0 To 5
    DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Clear
    If DocForm.Controls.Item("ListView" & tabNum + 1).ColumnHeaders.Count = 0 Then
    DocForm.Controls.Item("ListView" & tabNum + 1).ColumnHeaders.Add , , "File"
    DocForm.Controls.Item("ListView" & tabNum + 1).ColumnHeaders.Add , , "Doc Status"
    DocForm.Controls.Item("ListView" & tabNum + 1).ColumnHeaders.Add , , "Tasks"
    DocForm.Controls.Item("ListView" & tabNum + 1).ColumnHeaders(1).Width = Worksheets("Documents").Cells(8, 60).Value
    DocForm.Controls.Item("ListView" & tabNum + 1).ColumnHeaders(2).Width = Worksheets("Documents").Cells(9, 60).Value
    DocForm.Controls.Item("ListView" & tabNum + 1).ColumnHeaders(3).Width = Worksheets("Documents").Cells(10, 60).Value
    End If

x = 7
If DocForm.ComboBox3.Value = "" Then ' combobox3 notes which tasks to see associated files for
    Do
        Set li = DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Add(, , Worksheets("Documents").Cells(x, 2 + 7 * tabNum).Value)
        li.SubItems(2) = Worksheets("Documents").Cells(x, 5 + 7 * tabNum).Value
        li.SubItems(1) = Worksheets("Documents").Cells(x, 6 + 7 * tabNum).Value
        x = x + 1
    Loop Until Worksheets("Documents").Cells(x, 2 + 7 * tabNum).Value = ""
Else
    y = DocForm.ComboBox3.ListIndex + 7
    Do
        If InStr(Worksheets("Documents").Cells(y, 54).Value, Worksheets("Documents").Cells(x, 2 + 7 * tabNum).Value) > 0 Then
            Set li = DocForm.Controls.Item("ListView" & tabNum + 1).ListItems.Add(, , Worksheets("Documents").Cells(x, 2 + 7 * tabNum).Value)
            li.SubItems(2) = Worksheets("Documents").Cells(x, 5 + 7 * tabNum).Value
            li.SubItems(1) = Worksheets("Documents").Cells(x, 6 + 7 * tabNum).Value
        End If
        x = x + 1
    Loop Until Worksheets("Documents").Cells(x, 2 + 7 * tabNum).Value = ""
End If

Worksheets("Documents").Cells(8, 60).Value = DocForm.Controls.Item("ListView" & tabNum + 1).ColumnHeaders(1).Width
Worksheets("Documents").Cells(9, 60).Value = DocForm.Controls.Item("ListView" & tabNum + 1).ColumnHeaders(2).Width
Worksheets("Documents").Cells(10, 60).Value = DocForm.Controls.Item("ListView" & tabNum + 1).ColumnHeaders(3).Width

Next tabNum

If DocForm.ListView1.ListItems.Count > 2 Then
    DocForm.ListView1.Height = (DocForm.ListView1.ListItems.Count + 1) * 1.5 * DocForm.ListView1.Font.size
Else
    DocForm.ListView1.Height = DocForm.ListView1.Font.size * 6
End If


For tabNum = 2 To 6
    DocForm.Controls.Item("Label" & tabNum + 16).Top = DocForm.Controls.Item("ListView" & tabNum - 1).Top + DocForm.Controls.Item("ListView" & tabNum - 1).Height + 20
    DocForm.Controls.Item("ListView" & tabNum).Top = DocForm.Controls.Item("Label" & tabNum + 16).Top + 20
    DocForm.Controls.Item("CommandButton" & tabNum + 27).Top = DocForm.Controls.Item("Label" & tabNum + 16).Top + 12
    DocForm.Controls.Item("CommandButton" & tabNum + 35).Top = DocForm.Controls.Item("Label" & tabNum + 16).Top + 30 '37
    DocForm.Controls.Item("CommandButton" & tabNum + 41).Top = DocForm.Controls.Item("Label" & tabNum + 16).Top + 48 ' 43
    DocForm.Controls.Item("CommandButton" & tabNum + 47).Top = DocForm.Controls.Item("Label" & tabNum + 16).Top + 66 ' 43
    DocForm.Controls.Item("CommandButton" & tabNum + 53).Top = DocForm.Controls.Item("Label" & tabNum + 16).Top + 84 ' 43

    If DocForm.Controls.Item("ListView" & tabNum).ListItems.Count > 2 Then
        DocForm.Controls.Item("ListView" & tabNum).Height = (DocForm.Controls.Item("ListView" & tabNum).ListItems.Count + 1) * 1.5 * DocForm.Controls.Item("ListView" & tabNum).Font.size
    Else
        DocForm.Controls.Item("ListView" & tabNum).Height = DocForm.Controls.Item("ListView" & tabNum).Font.size * 6
    End If
Next tabNum

DocForm.ScrollHeight = DocForm.Controls.Item("ListView6").Top + DocForm.Controls.Item("ListView6").Height + 36

End Sub

Sub addDocs(tabNum As Long, docType As String)

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long
Dim tbl As Object, p As Object, li As Object, td As Object, fld As Object, td2 As HTMLBaseElement, x9 As HTMLBaseElement
Dim doc As HTMLDocument, lastAddress As String
Dim totalDocuments As Long, y As Long, yy As Long, z As Long, page As Long
Dim IE As InternetExplorer
Dim x As Long, docName As String, docLink As String
    
'Loop for Datasheets and Test Records
pWebAddress = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & docType
Set IE = New InternetExplorer
IE.Visible = False
'IE.Visible = True
IE.navigate pWebAddress

Dim sh
Dim eachIE
While IE.Busy
  DoEvents
  Wend
Sleep 50
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing
While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document


login:
If doc.getElementById("body") Is Nothing Then
    MsgBox "Log into Flex"
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

Do
Sleep 50
Set doc = IE.Document
Loop Until Not (doc.getElementById("body") Is Nothing)

page = 1
x = 6
Do
    x = x + 1
Loop Until Worksheets("Documents").Cells(x, 2 + 7 * tabNum).Value = ""

s2 = doc.getElementById("body").Children(0).Children(2).Children(1).Children(2).innerHTML
s2 = "https://portal.ul.com" & Mid(s2, InStr(s2, "href=") + 6, 145)
Worksheets("Documents").Cells(5, 53).Value = s2
'Debug.Print Worksheets("Documents").Cells(5, 53).Value

If doc.getElementById("body").Children(0).Children(3).Children(2).Children.Length = 1 Then
    GoTo noDocs
End If

s1 = doc.getElementById("frmSearchTop").Children(1).Children(0).Children(0).innerText
s2 = Mid(s1, InStr(s1, "of") + 3, Len(s1) - InStr(s1, "of") - 2)
totalDocuments = CInt(s2)

yy = 1 'yy is the current count (1 thru 10) for the page
For y = 1 To totalDocuments
    'if end of 10 documents on page, go to next page
If y = doc.getElementById("body").Children(0).Children(3).Children(2).Children.Length = 1 Then
    GoTo noDocs
End If
    
    If y = page * 10 + 1 Then
        page = page + 1
        IE.navigate Replace(pWebAddress, "Paging.Page=1", "Paging.Page=" & page)
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Do
            Sleep 50
            Set doc = IE.Document
        Loop Until Not (doc.getElementById("body") Is Nothing)
        Set doc = IE.Document
        If doc.getElementById("body").Children(0).Children(3).Children(2).Children.Length = 1 Then
            GoTo noDocs
        End If
        lastAddress = IE.LocationURL
        yy = 1
    End If
    If doc.getElementById("body").Children(0).Children(3).Children(2).Children.Length = 2 * (yy - 1) Then
        GoTo noDocs
    End If
    docName = doc.getElementById("body").Children(0).Children(3).Children(2).Children(2 * (yy - 1)).Children(2).Children(1).Children(0).innerText
    
    s1 = doc.getElementById("body").Children(0).Children(3).Children(2).Children(2 * (yy - 1)).Children(2).Children(1).Children(0)
    
'get reupload link
    Set x9 = doc.getElementById("body").Children(0).Children(3).Children(2).Children(2 * (yy - 1)).Children(1).Children(0).Children(1)
    s1 = x9.Children(0).innerHTML
    For Each li In x9.getElementsByTagName("li")
        If InStr(li.outerHTML, "UploadMultiple") > 0 Then
            s2 = li.innerHTML
            s2 = "https://portal.ul.com/" & Mid(s2, InStr(s2, "href=") + 6, 194)
        End If
    Next li
    
    If InStr(s1, "data-id=") > 0 Then
        docLink = Replace(Mid(s1, InStr(s1, "data-id=") + 9, 36), "-", "")
    Else
        docLink = Mid(s1, InStr(s1, "DownloadDocument/") + 17, 32)
    End If
'figure out the associated tasks
    s1 = ""
    x1 = 7
    Do
        If InStr(Worksheets("Documents").Cells(x1, 54).Value, docName) > 0 Then
            s1 = s1 & Worksheets("Documents").Cells(x1, 52).Value & ": "
        End If
        x1 = x1 + 1
    Loop Until Worksheets("Documents").Cells(x1, 52).Value = ""
    
    Call addDocItem(tabNum, docName, "", docLink, s1, "Online file, not downloaded yet: ", "", s2)
        
    lastAddress = IE.LocationURL
    
    yy = yy + 1
Next y

noDocs:
IE.Quit
Set IE = Nothing
End Sub


Function getFDirectory(fName As String) As String

Dim temp As String, x As Long

x = InStrRev(fName, "\")
getFDirectory = Mid(fName, 1, x - 1)

End Function

Function getFNameNoExt(fName As String) As String

Dim temp As String, x As Long

x = InStrRev(fName, "\")
temp = Mid(fName, x + 1, Len(fName) - x)
x = InStrRev(temp, ".")
getFNameNoExt = Mid(temp, 1, x - 1)

End Function
Function getFNameAndExt(fName As String) As String

Dim temp As String, x As Long

x = InStrRev(fName, "\")
getFNameAndExt = Mid(fName, x + 1, Len(fName) - x)

End Function
Function getFNameExt(fName As String) As String

Dim temp As String, x As Long

x = InStrRev(fName, ".")
getFNameExt = Mid(fName, x, Len(fName) - x + 1)

End Function

Sub showTCForm()

Dim x As Long
 
If TCDownload.ComboBox1.Value = "" Then
    TCDownload.ComboBox1.Clear
    x = 0
    Do
        TCDownload.ComboBox1.AddItem Worksheets("Task Document Download").Cells(10, 2 + x).Value
        If Worksheets("Task Document Download").Cells(9, 2 + x).Value <> "" Then
            TCDownload.ComboBox1.ListIndex = x
        End If
        x = x + 1
    Loop Until Worksheets("Task Document Download").Cells(10, 2 + x).Value = ""
End If
TCDownload.Top = Application.Top
TCDownload.Left = Application.Left
TCDownload.Show
End Sub
Attribute VB_Name = "ModuleDragDrop"
Public Sub addFilesDragDrop(nList As Collection, x9 As HTMLBaseElement) ' (Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, Shift As Integer, x As Single, y As Single)

Dim Data As MSComctlLib.DataObjectFiles 'MSComctlLib.DataObject
Dim data2 As MSComctlLib.DataObject
Dim files() As String

ReDim files(nList.Count)
For i = 1 To nList.Count 'Data.files.Count
    files(i - 1) = nList.Item(i)
    Data.Add nList.Item(i)
Next
'data2.setData "text", 1

'Data files, vbCFFiles

x9.dragDrop
'x9
'Debug.Print "test"
End Sub


Public Sub uploadDragDrop()

'go to "upload doc" for project, choose over-write and process for each file type.
Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, y3 As Long, s3 As String, x4 As Long
Dim pWebAddress As String
Dim tbl As Object, p As Object, li As Object, td As Object, fld As Object, td2 As HTMLBaseElement, div As Object
Dim doc As HTMLDocument, lastAddress As String
Dim totalDocuments As Long, y As Long, yy As Long, z As Long, page As Long
Dim IE As InternetExplorer
Dim docx(6) As HTMLDocument
Dim IEx(6) As InternetExplorer
Dim shx(6)
Dim eachIEx(6)
Dim pwebAddressx(6) As String
Dim tabNum As Long, x As Long, docName As String, docLink As String, x9 As HTMLBaseElement
Dim totalTasks As Long
Dim varx(6), varxNum(6)
Dim debugText As String, varxLenError As String, debugNoFile As String
Dim varCol(6) As New Collection, IEcol(6) As New Collection, ColCount(6) As Long
Dim varCol2(6) As New Collection

MsgBox "NOTE: Wait for all uploads to complete before using mouse and keyboard."
'Verify Flex URL/ID is present
Call validateURL
debugText = ""

x3 = 0
Do
'Debug.Print "X3 = " & x3
varx(x3) = ""
y = 0
Worksheets("Documents").Cells(5, 2 + 7 * x3).Value = ""
If Worksheets("Documents").Cells(7 + y, 2 + 7 * x3).Value <> "" Then
    Do
        If Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value <> "" Then
            If Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value = "" Then
                debugNoFile = debugNoFile & vbLf & Worksheets("Documents").Cells(7 + y, 2 + 7 * x3).Value
            End If
            If Dir(Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value) = "" Then
                debugText = debugText & vbLf & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value
            Else
                If Len(varx(x3) & Chr(34) & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value & Chr(34) & " ") < 258 Then
                    Worksheets("Documents").Cells(5, 2 + 7 * x3).Value = Worksheets("Documents").Cells(5, 2 + 7 * x3).Value & Chr(34) & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value & Chr(34) & " "
                    Worksheets("Documents").Cells(7 + y, 6 + 7 * x3).Value = "Uploaded: "
                    varx(x3) = varx(x3) & Chr(34) & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value & Chr(34) & " "
                Else
                    'Debug.Print "Node created :" & varx(x3)
                    varCol(x3).Add varx(x3) ', varCol(x3).Count + 1
                    varx(x3) = Chr(34) & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value & Chr(34) & " "
                    varxLenError = varxLenError & ", " & Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value
                End If
                varCol2(x3).Add Worksheets("Documents").Cells(7 + y, 3 + 7 * x3).Value
            End If
        End If
        y = y + 1
    Loop Until Worksheets("Documents").Cells(7 + y, 2 + 7 * x3).Value = ""
    varCol(x3).Add varx(x3) ', varCol(x3).Count+1
End If
    varx(x3) = Worksheets("Documents").Cells(5, 2 + 7 * x3).Value
x3 = x3 + 1
Loop Until x3 = 6

x3 = 0
Do
    'Debug.Print "X3 = " & x3
    For y3 = 1 To varCol(x3).Count
        'Debug.Print y3 & ": " & varCol(x3).item(y3)
    Next y3
    x3 = x3 + 1
Loop Until x3 = 6


pwebAddressx(0) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "12981bac-5d2f-43e6-9bf8-1404fecf3701"
pwebAddressx(1) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "dc055d4f-0835-4972-8231-2aeea611ec49"
pwebAddressx(2) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "a19b4b06-32a8-45d7-9083-961e7d92e242"
pwebAddressx(3) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "a98c8961-7385-4933-a90b-9ab9885c654b"
pwebAddressx(4) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "738429ff-2d0d-48ba-891c-168499dc9555"
pwebAddressx(5) = "https://portal.ul.com/Project/Documents/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "?Query=&Paging.Page=1&EntityType=Document&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&viewType=Default&Filters.ariaDocumentTypeId=" & "c3da7c2b-2350-4306-964b-3ea5b8846abc"

x3 = 0
Do

'If varx(x3) = "" Then
'Debug.Print varCol(x3).Count
If varCol(x3).Count = 0 Then
    GoTo noDocs
End If
For y3 = 1 To varCol(x3).Count

varx(x3) = varCol(x3).Item(y3)
If varx(x3) = "" Then
    GoTo noDocs
End If

'Debug.Print pWebAddressx(x3)
Set IEx(x3) = NewValidIE(pwebAddressx(x3))
IEx(x3).Visible = True
IEcol(x3).Add IEx(x3)

Sleep 50
Do
DoEvents
Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
Set docx(x3) = IEx(x3).Document

login:
If docx(x3).getElementById("body") Is Nothing Then
    MsgBox "Log into Flex"
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    GoTo login
End If

Do
Sleep 50
Set docx(x3) = IEx(x3).Document
Loop Until Not (docx(x3).getElementById("upload") Is Nothing) '(docx(x3).getElementsByTagName("div") Is Nothing)

'/html/body/form/div[2]/fieldset[1]/div/div/div/input
    docx(x3).getElementById("upload").Click
    
    Sleep 400
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 200
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
Set x9 = docx(x3).body
Set x9 = x9.Children(15)
Set x9 = x9.Children(0)
Set x9 = x9.Children(0)
Set x9 = x9.Children(1)
Set x9 = x9.Children(0)
Set x9 = x9.Children(0)
Set x9 = x9.Children(1)
Set x9 = x9.Children(1)

    Worksheets("Documents").Cells(5, 2 + 7 * x3).Copy
    x9.Focus
    
    Call addFilesDragDrop(varCol2(x3), x9)

    Sleep 200
    SendKeys " "

    
'''at file picker window here. User to paste copied file information into window
    Sleep 1000

    SendKeys (Replace(Replace(varx(x3), "(", "{(}"), ")", "{)}"))
    Sleep 200
    SendKeys "{ENTER}"
    
Next y3

noDocs:
    x3 = x3 + 1
Loop Until x3 = 6



x3 = 0
Do

If varCol(x3).Count = 0 Then
    GoTo noDocs2
End If
If varx(x3) = "" Then
    GoTo noDocs2
End If

For y3 = 1 To varCol(x3).Count
    
Set IEx(x3) = IEcol(x3).Item(y3)
    
While IEx(x3).Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Sleep 50
Do
DoEvents
Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
Set docx(x3) = IEx(x3).Document
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    docx(x3).getElementById("apply").Click
    
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Sleep 50
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    docx(x3).getElementById("Overwrite").Click

    Sleep 50
    docx(x3).getElementById("DocumentTypeId").selectedIndex = x3
    '/html/body/div[8]/div/form/div[4]/input
    Set x9 = docx(x3).body
    Set x9 = docx(x3).getElementById("apply").parentElement.parentElement.parentElement.parentElement.parentElement.parentElement
    Set x9 = x9.Children(3)
    Set x9 = x9.Children(1)
    x9.Click
'    IEx(x3).Visible = False
noDocs2:
Next y3

x3 = x3 + 1

Loop Until x3 = 6

y = 0
Do
    Worksheets("Documents").Cells(7 + y, 6 + 7 * 6).Value = "Uploaded: "
    y = y + 1
Loop Until Worksheets("Documents").Cells(7 + y, 2 + 7 * 6).Value = ""

If debugText <> "" Then
    MsgBox "The following file names differ in flex from the downloaded file name and will need to be manually uploaded: " & vbLf & debugText '& vbLf & vbLf & "The following files were unable to upload due to field size limitations: " & varxLenError
End If

If debugNoFile <> "" Then
    MsgBox "The following files are not yet downloaded: " & vbLf & debugNoFile '& vbLf & vbLf & "The following files were unable to upload due to field size limitations: " & varxLenError
End If

Call RefreshListbox
errorEnd:


End Sub
Attribute VB_Name = "ModuleECD"
Sub DropDown76_Change()

'Debug.Print ActiveSheet.Shapes("Drop Down 76").ControlFormat.List(ActiveSheet.Shapes("Drop Down 76").ControlFormat.ListIndex)
Dim s1 As String

s1 = ActiveSheet.Shapes("Drop Down 76").ControlFormat.List(ActiveSheet.Shapes("Drop Down 76").ControlFormat.ListIndex)
If s1 = "Generate Transmittal" Then
    Call Transmittal
End If
If s1 = "Generate NoA" Then
    Call EPIC_NOA
End If
If s1 = "Email PDF NoA" Then
    Call Send_EPICNoA_email
End If
If s1 = "Generate ECD letter" Then
    Call ECD_desktop_word(False)
End If
If s1 = "Generate PED ECD letter" Then
    Call PEDECD_desktop_word(True)
End If
If s1 = "Generate ECD letter-leave open" Then
    Call ECD_desktop_word(True)
End If
If s1 = "Email ECD letter" Then
    Call Send_ECD_email
End If
If s1 = "Generate TAT letter" Then
    Call TAT_desktop_word(False)
End If
If s1 = "Generate PED TAT letter" Then
    Call PEDTAT_desktop_word(True)
End If
If s1 = "Generate TAT letter-leave open" Then
    Call TAT_desktop_word(True)
End If
If s1 = "Email TAT letter" Then
    Call Send_TAT_email
End If
If s1 = "Email ECD letter - PDF format" Then
    Call Send_ECD_PDF_email
End If
If s1 = "Email TAT letter - PDF format" Then
    Call Send_TAT_PDF_email
End If
If s1 = "Checklist (Lighting)" Then
    Call LightingChecklist
End If
If s1 = "Email Checklist (Lighting)" Then
    Call EmailLightingChecklist
End If

ActiveSheet.Shapes("Drop Down 76").ControlFormat.ListIndex = 1

End Sub
Sub DropDown85_Change()

Dim s1 As String

s1 = ActiveSheet.Shapes("Drop Down 85").ControlFormat.List(ActiveSheet.Shapes("Drop Down 85").ControlFormat.ListIndex)
If s1 = "AHL" Or s1 = "AHL GMA" Or s1 = "PM" Or s1 = "BMS" Or s1 = "Lighting" Then
    If s1 = "Lighting" Then
        Worksheets("Needs Assessment").Cells(3, 4).Value = "Lighting"
        ActiveSheet.Shapes("Button ENVS").Visible = True
    Else
        Worksheets("Needs Assessment").Cells(3, 4).Value = "Alternate Construction (AHL)"
        ActiveSheet.Shapes("Button ENVS").Visible = False
    End If
    Worksheets("Needs Assessment").Rows(TestPlanrow + 3 & ":" & TestPlanrow + 12).EntireRow.Hidden = False
    Worksheets("Needs Assessment").Rows(TestPlanrow + 13 & ":" & custDaterow - 2).EntireRow.Hidden = True
    Worksheets("Needs Assessment").Rows(6).EntireRow.Hidden = True
End If
If s1 = "EPT" Then
    ActiveSheet.Shapes("Button ENVS").Visible = False
    Worksheets("Needs Assessment").Cells(3, 4).Value = "EPT"
    Worksheets("Needs Assessment").Rows(TestPlanrow + 3 & ":" & TestPlanrow + 12).EntireRow.Hidden = True
    Worksheets("Needs Assessment").Rows(TestPlanrow + 13 & ":" & custDaterow - 2).EntireRow.Hidden = False
    Worksheets("Needs Assessment").Rows(6).EntireRow.Hidden = False
End If

'set assumption set to stated tool parameters
Worksheets("Assumptions").Cells(1, 2).Value = Worksheets("Scratch").Cells(1, 11).Value - 1

End Sub

Sub showENVS()
    initializeConst
    ENVSForm.TextBox1.Text = Worksheets("Needs Assessment").Cells(Filerow, 2).Value
    ENVSForm.Left = Application.Left
    ENVSForm.Top = Application.Top
    ENVSForm.Show

End Sub

Sub DropDown103_Change()

Dim s1 As String, index As Long
Dim s2 As String, x As Long, x1 As Long, x2 As Long, s3 As String
Dim pWebAddress As String
Dim hName As String, rName As String, hNum As String, rNum As String
Dim IE As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object
Dim doc As HTMLDocument
Dim elem As HTMLBaseElement

pWebAddress = "http://usnbkm504/eCommArchive/eCommSearch.nsf/eSearch?open"

Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress

Dim sh
Dim eachIE
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
    Sleep 25
    Set doc = IE.Document
Loop Until Not (doc.getElementById("query") Is Nothing)

Set doc = IE.Document

login:
If doc.getElementById("searchtype") Is Nothing Then
    MsgBox "Log into VPN"
    Sleep 200
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

s1 = ActiveSheet.Shapes("Drop Down 103").ControlFormat.List(ActiveSheet.Shapes("Drop Down 103").ControlFormat.ListIndex)
index = ActiveSheet.Shapes("Drop Down 103").ControlFormat.ListIndex - 1
If index = 1 Then
    doc.getElementById("searchtype").Value = "Company Name"
    doc.getElementById("searchtype").FireEvent ("onchange")
    doc.getElementById("query_company").Value = Worksheets("Needs Assessment").Cells(compNrow(), 2).Value
End If
If index = 2 Then
    doc.getElementById("searchtype").Value = "File Number"
    doc.getElementById("searchtype").FireEvent ("onchange")
    doc.getElementById("query").Value = Worksheets("Needs Assessment").Cells(Filerow(), 2).Value
End If
If index = 3 Then
    doc.getElementById("searchtype").Value = "Order Number"
    doc.getElementById("searchtype").FireEvent ("onchange")
    doc.getElementById("query").Value = Worksheets("Needs Assessment").Cells(Partyrow(), 5).Value
End If
If index = 4 Then
    doc.getElementById("searchtype").Value = "Project Number"
    doc.getElementById("searchtype").FireEvent ("onchange")
    doc.getElementById("query").Value = Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value
End If
If index = 5 Then
    doc.getElementById("searchtype").Value = "Quote Number"
    doc.getElementById("searchtype").FireEvent ("onchange")
    doc.getElementById("query").Value = Worksheets("Needs Assessment").Cells(Quoterow(), 2).Value
End If
doc.getElementsByClassName("nrmButton").Item(0).Click
'set assumption set to stated tool parameters
ActiveSheet.Shapes("Drop Down 103").ControlFormat.ListIndex = 1

End Sub

Sub DropDown104_Change()

Dim s1 As String, index As Long
Dim s2 As String, x As Long, x1 As Long, x2 As Long, s3 As String
Dim pWebAddress As String
Dim hName As String, rName As String, hNum As String, rNum As String
Dim IE As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object
Dim doc As HTMLDocument
Dim elem As HTMLBaseElement

s1 = ActiveSheet.Shapes("Drop Down 104").ControlFormat.List(ActiveSheet.Shapes("Drop Down 104").ControlFormat.ListIndex)
index = ActiveSheet.Shapes("Drop Down 104").ControlFormat.ListIndex - 1
If s1 = "Find Task/Project" Then
    Call showTaskForm
End If
If s1 = "Get Customer Info" Then
    Call flexURL
End If
If s1 = "Update Flex Profile" Then
    Call updateFlexNA
End If
If s1 = "Manage Documents (Flex)" Then
    Call showDocForm
End If
If s1 = "Manage Documents (ECM)" Then
    pWebAddress = "https://ecm.ul.com/otcs/cs.exe/app/search/Category_150219022_3_value7/" _
     & Worksheets("Needs Assessment").Cells(Projectrow, 5).Value _
     & "/BrowseLivelink_value1_ID/150283005/query_id/151141532"
    Call NewShell(pWebAddress, 3)
End If
If s1 = "Manage Aurora (AWI)" Then
    Call Aurora_Link
End If
If s1 = "Initialize Form" Then
    Call Initialize
End If
If s1 = "Check for Tool Updates" Then
    Call updateMacros
End If
If s1 = "Multiple Profile Update" Then
    Worksheets("Projects").Visible = True
    Worksheets("Tasks").Visible = True
    Worksheets("Projects").Select
End If

Worksheets("Needs Assessment").Shapes("Drop Down 104").ControlFormat.ListIndex = 1

End Sub


Sub flexURL()
Call initializeConst
Call validateURL
If Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value <> "" Then
    Call getCustInfo
End If
NoEntry:
End Sub
Sub validateURL()
Dim s1 As String, s2 As String
If Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value = "" And Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = "" Then
    ResponseForm.Caption = "Copy URL from project view (CTRL+V to paste)"
    ResponseForm.Show
End If
If Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value <> "" And Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value = "" Then
    Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value = "https://portal.ul.com/Project/Index/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value
    GoTo flexID
End If
s1 = Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value
s1 = Replace(s1, "-", "")
If InStr(s1, "Project") < 1 Then
    MsgBox ("Valid Flex URL required")
    GoTo flexID
End If
If InStr(s1, "Task") > 0 Then
    s2 = Mid(s1, InStr(s1, "Project") + 8, Len(s1) - (InStr(s1, "Project") + 8) + 1)
    Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = Mid(s2, 1, InStr(s2, "/") - 1)
Else
    s2 = Mid(s1, InStrRev(s1, "/") + 1, 32)
    Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = s2
End If
flexID:
End Sub
Sub updateFlexNA()

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, s3 As String
Dim pWebAddress As String, flexNum As String
Dim IE As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object, div2 As Object, div3 As Object
Dim doc As HTMLDocument, doc2 As HTMLDocument, cEmail As String, cPhone As String
Dim elem As HTMLBaseElement, elem1 As Object
Dim x

If Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = "" Then
    MsgBox "Add Flex ID number and try again"
    GoTo noFlexID
End If

flexNum = Replace(Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value, "-", "")
pWebAddress = "https://portal.ul.com/Project/Index/" & Replace(flexNum, "-", "")

Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress

Dim sh
Dim eachIE
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Set doc = IE.Document

login:
If doc.getElementById("create") Is Nothing Then
    MsgBox "Log into Flex"
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

doc.getElementById("create").Click
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Do
Sleep 50
Set doc = IE.Document
Loop Until Not (doc.getElementById("AdditionalCriteria") Is Nothing) And Not (doc.getElementById("Description") Is Nothing)

Set doc = IE.Document

Dim hcol As Object
Set hcol = doc.getElementsByTagName("textarea")
For Each Text In hcol
    If Text.ID = "Description" Then
        If Text.Value = "" Then
            FlexUploadForm.TextBox1.Text = "Scope revised from (none) to " & vbLf & Worksheets("Needs Assessment").Cells(Scoperow, 2).Value
        Else
            FlexUploadForm.TextBox1.Text = "Scope revised from " & vbLf & Text.Value & vbLf & " to " & vbLf & Worksheets("Needs Assessment").Cells(Scoperow, 2).Value
        End If
        Exit For
    End If
Next

'Assumptions
If InStr(doc.getElementById("AdditionalCriteria").Value, "Assumptions: ") > 1 Then
    s1 = Mid(doc.getElementById("AdditionalCriteria").Value, 1, InStr(doc.getElementById("AdditionalCriteria").Value, "Assumptions: ") - 2) & vbLf
End If
If InStr(doc.getElementById("AdditionalCriteria").Value, "Assumptions: ") < 1 And Len(doc.getElementById("AdditionalCriteria").Value) > 0 Then
    s1 = doc.getElementById("AdditionalCriteria").Value & vbLf
End If
If InStr(doc.getElementById("AdditionalCriteria").Value, "Assumptions: ") < 1 And Len(doc.getElementById("AdditionalCriteria").Value) = 0 Then
    s1 = ""
End If
If s1 = "" Then
    FlexUploadForm.TextBox1.Text = FlexUploadForm.TextBox1.Text & vbLf & vbLf & "Assumptions/Notes revised from (none) to " & vbLf & Worksheets("Needs Assessment").Cells(Assumptionsrow(), 2).Value
Else
    FlexUploadForm.TextBox1.Text = FlexUploadForm.TextBox1.Text & vbLf & vbLf & "Assumptions/Notes revised from " & vbLf & doc.getElementById("AdditionalCriteria").Value & vbLf & " to " & vbLf & s1 & "Assumptions: " & vbLf & Worksheets("Needs Assessment").Cells(Assumptionsrow(), 2).Value
End If

doc.getElementById("project-planning").Click
Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Do
Sleep 50
Set doc = IE.Document
Loop Until Not (doc.getElementById("FileNo") Is Nothing)

If doc.getElementById("Standards").Value = "" Then
    FlexUploadForm.TextBox1.Text = FlexUploadForm.TextBox1.Text & vbLf & vbLf & "Standards revised from (none) to " & vbLf & Worksheets("Needs Assessment").Cells(Standardsrow(), 2).Value
Else
    FlexUploadForm.TextBox1.Text = FlexUploadForm.TextBox1.Text & vbLf & vbLf & "Standards revised from " & vbLf & doc.getElementById("Standards").Value & vbLf & " to " & vbLf & Worksheets("Needs Assessment").Cells(Standardsrow(), 2).Value
End If

If Not (doc.getElementById("CCN") Is Nothing) Then
If doc.getElementById("CCN").Value = "" Then
    FlexUploadForm.TextBox1.Text = FlexUploadForm.TextBox1.Text & vbLf & vbLf & "CCN revised from (none) to " & vbLf & Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value
Else
    FlexUploadForm.TextBox1.Text = FlexUploadForm.TextBox1.Text & vbLf & vbLf & "CCN revised from " & vbLf & doc.getElementById("CCN").Value & vbLf & " to " & vbLf & Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value
End If
End If
If Not (doc.getElementById("ProjectCcn") Is Nothing) Then
If doc.getElementById("ProjectCcn").Value = "" Then
    FlexUploadForm.TextBox1.Text = FlexUploadForm.TextBox1.Text & vbLf & vbLf & "CCN revised from (none) to " & vbLf & Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value
Else
    FlexUploadForm.TextBox1.Text = FlexUploadForm.TextBox1.Text & vbLf & vbLf & "CCN revised from " & vbLf & doc.getElementById("ProjectCcn").Value & vbLf & " to " & vbLf & Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value
End If
End If

If doc.getElementById("FileNo").Value = "" Then
    FlexUploadForm.TextBox1.Text = FlexUploadForm.TextBox1.Text & vbLf & vbLf & "File No. revised from (none) to " & vbLf & Worksheets("Needs Assessment").Cells(Filerow, 2).Value
Else
    FlexUploadForm.TextBox1.Text = FlexUploadForm.TextBox1.Text & vbLf & vbLf & "File No. revised from " & vbLf & doc.getElementById("FileNo").Value & vbLf & " to " & vbLf & Worksheets("Needs Assessment").Cells(Filerow, 2).Value
End If

FlexUploadForm.TextBox1.Text = FlexUploadForm.TextBox1.Text & vbLf & vbLf & "ECD to be updated to " & Worksheets("Needs Assessment").Cells(ECDrow(), 2).Value

'associated projects with same order #
If Replace(Worksheets("Needs Assessment").Cells(Partyrow, 5), " ", "") <> "" Then
x = 4
Do
    Worksheets("Associated Projects").Cells(x, 2).Value = ""
    Worksheets("Associated Projects").Cells(x, 3).Value = ""
    Worksheets("Associated Projects").Cells(x, 4).Value = ""
    x = x + 1
Loop Until Worksheets("Associated Projects").Cells(x, 2).Value = ""
FlexUploadForm.ListBox1.Clear
IE.navigate "https://portal.ul.com/Search/Project?viewType=Default&EntityType=Project&Filters.ariaOrderNumber=" & Worksheets("Needs Assessment").Cells(Partyrow, 5).Value & "&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending"
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Sleep 25
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Sleep 25
Do
Sleep 25
Set doc = IE.Document
Loop Until Not (doc.getElementsByTagName("frmSearchTop") Is Nothing)

page = 1

'get total number of projects from this field
s1 = doc.getElementById("frmSearchTop").Children(1).Children(0).Children(0).innerText

s2 = Mid(s1, InStr(s1, "of") + 3, Len(s1) - InStr(s1, "of") - 2)
totalProjects = CInt(s2)

yy = 1 'yy is the current count (1 thru 10) for the page
For y = 1 To totalProjects
    ProgressForm.Label3.Caption = "Work on hand: project " & y & " of " & totalProjects
    If y = page * 10 + 1 Then
        page = page + 1
        IE.navigate Replace(pWebAddress, "EntityType", "Query=&Paging.Page=" & page & "&EntityType"), self
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Do
            Sleep 25
            Set doc = IE.Document
        Loop Until Not (doc.getElementById("body") Is Nothing)
        Set doc = IE.Document
        lastAddress = IE.LocationURL
        yy = 1
    End If
   
   'project name
    Worksheets("Associated Projects").Cells(3 + y, 2).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0).innerText
    'employee name
'    Worksheets("Associated Projects").Cells(x + y - 1, 3).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(3).Children(1).innerText
    'project link
    s1 = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0)
    Worksheets("Associated Projects").Cells(3 + y, 3).Value = "https" & Mid(s1, InStr(s1, "href") + 6, Len(s1) - InStr(s1, "href") - 5 - (InStr(s1, "title") - 3))
    FlexUploadForm.ListBox1.AddItem Worksheets("Associated Projects").Cells(3 + y, 2).Value
   
    s2 = Mid(Worksheets("Associated Projects").Cells(3 + y, 3).Value, InStrRev(Worksheets("Associated Projects").Cells(3 + y, 3).Value, "/") + 1, 32)     ' Len( Worksheets("Associated Projects").Cells(3 + y, 3).Value ) - (InStrRev( Worksheets("Associated Projects").Cells(3 + y, 3).Value , "/") + 1) + 1)
     Worksheets("Associated Projects").Cells(3 + y, 4).Value = s2  ' Mid(s2, 1, InStr(s2, "/") - 1)
    
    'project cost
'    Worksheets("Associated Projects").Cells(x + y - 1, 6).Value = "No order lines"
    lastAddress = IE.LocationURL
    yy = yy + 1
Next y
FlexUploadForm.Label2.Caption = Worksheets("Needs Assessment").Cells(ECDrow(), 2).Value
Else
    FlexUploadForm.ListBox1.Clear
    FlexUploadForm.ListBox1.AddItem "N/A - No order lines"
    FlexUploadForm.Label2.Caption = "N/A"
End If

IE.Quit
Set IE = Nothing

FlexUploadForm.Show

noFlexID:

End Sub

Sub getCustInfo()

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, s3 As String
Dim pWebAddress As String, flexNum As String, docx(5) As HTMLDocument, pwebAddressx(5) As String
Dim IE As InternetExplorer, IEx(5) As InternetExplorer
Dim tbl As Object, fld As Object, div As Object, li As Object, div2 As Object, div3 As Object
Dim doc As HTMLDocument, cEmail As String, cPhone As String
Dim elem As HTMLBaseElement ', td As HTMLBaseElement
Dim td As Object, skipx4 As Boolean
Dim sh, shx(5)
Dim eachIE, eachIEx(5), temp As String

'Dim dom As DOMDocument
Call initializeConst
Call removeAgentLines
Call initializeConst
If Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = "" Then
    MsgBox "Add Flex ID number and try again"
    GoTo noFlexID
End If


'On Error GoTo errHandler
Dim errNum As Long, answer As Integer
If 1 = 0 Then ' only get to errHandler if there is an error
errHandler:
    answer = MsgBox("Program error. Click the 'Check for tool updates' button to attempt to fix.", vbCritical, "I am afraid I can't do that Dave")
    Exit Sub
End If

flexNum = Replace(Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value, "-", "")

Dim loginAttempt As Boolean
loginAttempt = False


'open history page to check login status
pWebAddress = "https://portal.ul.com/Project/History/" & Replace(flexNum, "-", "")
Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
    End If
      'https://idselfserv.ul.com/oam/server/obrareq.cgi?encquery%3DtVALwED5IRaETyPF7IabSB3BHCvXsl%2FXMSIFfrvxebcDJ%2FRf4I9XCzf8QFKVM6KkLU3X6%2F7AZCIbDeWZjW%2B6F7wSkBcUW%2FEE2IIJeFiPfvMrTFCUFRb2PvqAZWsKcbo7QzZu0mNyastwFq%2BPs8ehPAsLdfpFvd%2BNVIMMHqr8oQxZ9GUOxiZOpYwHkr3%2FN6lgOKwbo%2Fhtns6jyowQX5T0h%2FFjNSPjNR8JuB%2BPFDYkoGDp%2BjBRKrwJUMQ7o98S2ROLt%2FZ3jqdw0X0LgiSj%2B3ugqrIItOmFAxXyR1R%2BjkS2me9eh1YSMHZZSeC7jay34mvUh3UGpZx8F3pzXKl%2BaFlZjlaEZUV4qU5X0J3ABWcuDfy2XrZQMupmEgZ8k981VF590VG0YAaQRDrovsd0WKe9fOaHPswfTO%2FinznIILqjmSfDKTWDh4iedlh1n1Ec14W4%20agentid%3DWebgate_IDM%20ver%3D1%20crmethod%3D2
      If InStr(eachIE.LocationURL, "https://idselfserv.ul.com/oam/server/obrareq.cgi") > 0 And loginAttempt = False Then
        loginAttempt = True
        Set IE = eachIE
        While IE.Busy  ' The new process may still be busy even after you find it
            DoEvents
            Wend
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Set doc = IE.Document
        'attempt 1 login if credentials are stored
        If doc.getElementById("body") Is Nothing Then
    '       'Debug.Print doc.getElementById("username").Value
            Sleep 200
            If doc.getElementById("username").Value <> "" Then
                doc.getElementById("loginSbtButton").Click
                Sleep 200
            End If
            Do
                DoEvents
            Loop Until IE.readyState = READYSTATE_COMPLETE
            Set doc = IE.Document
        End If
      End If
      'https://signin.ul.com/oamfed/idp/wsfed11?wa=wsignin1.0&wtrealm=https%3a%2f%2fportal.ul.com&wctx=rm%3d0%26id%3dAriaSignIn%26ru%3d%252fSearch%253fQuery%253dAHL%252bneeds%252bassessment%2526Paging.Page%253d1%2526EntityType%253dTask%2526Filters.ariaTaskTaskOwner%253dRyan.Barnes%252540ul.com%2526Filters.ariaTaskPhase%253d000150%2526Filters.ariaTaskPhase%253d000200%2526Filters.ariaTaskPhase%253d00000%2526Filters.ariaTaskPhase%253d000000%2526Filters.ariaTaskPhase%253d000100%2526Filters.ariaTaskPhase%253d000300%2526location%253d%25252FSearch&wct=2018-09-21T14%3a27%3a30Z
      If InStr(eachIE.LocationURL, "https://signin.ul.com/") > 0 And loginAttempt = False Then
        loginAttempt = True
        Set IE = eachIE
        While IE.Busy  ' The new process may still be busy even after you find it
            DoEvents
            Wend
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Set doc = IE.Document
        'attempt 1 login if credentials are stored
        If doc.getElementById("body") Is Nothing Then
    '       'Debug.Print doc.getElementById("username").Value
            Sleep 200
            If doc.getElementById("username").Value <> "" Then
                doc.getElementById("loginSbtButton").Click
                Sleep 200
            End If
            Do
                DoEvents
            Loop Until IE.readyState = READYSTATE_COMPLETE
            Set doc = IE.Document
        End If
      End If
  
      
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing
While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Dim x

Set doc = IE.Document

login:
If doc.getElementById("body") Is Nothing Then
'If doc.getElementById("project-from-bnp") Is Nothing Then
    MsgBox "Log into Flex"
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

pwebAddressx(0) = "https://portal.ul.com/Project/OrderInfo/" & flexNum
pwebAddressx(1) = "https://portal.ul.com/Project/PlanningAndOperations/" & flexNum
pwebAddressx(2) = "https://portal.ul.com/Project/Details/" & flexNum
pwebAddressx(3) = "https://portal.ul.com/Project/AgentInfo/" & flexNum
pwebAddressx(4) = "https://portal.ul.com/Project/CustomerInfo/" & Replace(flexNum, "-", "")
For x3 = 0 To 4
Set IEx(x3) = New InternetExplorer
IEx(x3).Left = 0
IEx(x3).Top = 0
IEx(x3).Height = 0
IEx(x3).Width = 0
IEx(x3).navigate pwebAddressx(x3)
Next x3


'x3 = 4
Do
Sleep 50
Set doc = IE.Document
Loop Until Not (doc.getElementById("manageDap") Is Nothing)

s1 = Mid(doc.getElementById("manageDap").outerHTML, InStr(doc.getElementById("manageDap").outerHTML, "href") + 6, Len(doc.getElementById("manageDap").outerHTML) - (InStr(doc.getElementById("manageDap").outerHTML, "href") + 6) + 1)
s1 = Mid(s1, 1, InStrRev(s1, "SourceID=50") + 10)
s1 = Replace(s1, "amp;", "")
Worksheets("Flex Info").Cells(23, 2).Value = s1
s1 = Mid(doc.getElementById("manageLabWare").outerHTML, InStr(doc.getElementById("manageDap").outerHTML, "href") + 6, Len(doc.getElementById("manageDap").outerHTML) - (InStr(doc.getElementById("manageDap").outerHTML, "href") + 6) + 1)
If InStr(s1, "target") < 1 Then
    GoTo noAurora
End If
s1 = Mid(s1, 1, InStrRev(s1, "target") - 3)
s1 = Replace(s1, "amp;", "")
s1 = Mid(s1, 9, Len(s1) - 8)
Worksheets("Flex Info").Cells(24, 2).Value = s1
noAurora:


For x3 = 0 To 3
Do
  Set shx(x3) = New Shell32.Shell
  For Each eachIEx(x3) In shx(x3).Windows
    If InStr(1, eachIEx(x3).LocationURL, pwebAddressx(x3)) Then
      Set IEx(x3) = eachIEx(x3)
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
        End If
    Next eachIEx(x3)
    Loop
    Set eachIEx(x3) = Nothing
    Set shx(x3) = Nothing
Next x3
x3 = 4
Do
  Set shx(x3) = New Shell32.Shell
  For Each eachIEx(x3) In shx(x3).Windows
    If InStr(1, eachIEx(x3).LocationURL, pwebAddressx(x3)) Or InStr(1, eachIEx(x3).LocationURL, "FileNotFound") Then
      Set IEx(x3) = eachIEx(x3)
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
        End If
    Next eachIEx(x3)
    Loop
    Set eachIEx(x3) = Nothing
    Set shx(x3) = Nothing



For x3 = 0 To 4
Do
    DoEvents
Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
Next x3
Sleep 50
For x3 = 0 To 4
Do
    DoEvents
Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
Next x3

For x3 = 0 To 4
If x3 = 4 And InStr(IEx(x3).LocationURL, "FileNotFound") > 0 Then
    Exit For
End If
Set doc = IEx(x3).Document
If Not (doc.getElementById("project-from-bnp") Is Nothing) Then
    Debug.Print "Found"
End If
Debug.Print IEx(x3).LocationURL

Worksheets("Needs Assessment").Cells(compNrow, 2).Value = doc.getElementById("CustomerCompanyName").innerText
y = 0
Do
  If InStr(doc.getElementById("body").Children(0).Children(1).Children(0).Children(2).Children(y).innerText, "Project Handler:") > 0 Then
    Worksheets("Needs Assessment").Cells(hNamerow, 2).Value = doc.getElementById("body").Children(0).Children(1).Children(0).Children(2).Children(y + 1).innerText
    Worksheets("Needs Assessment").Cells(hNamerow, 2).Value = Replace(Replace(Worksheets("Needs Assessment").Cells(hNamerow, 2).Value, "@ul.com", ""), ".", " ")
    Worksheets("Needs Assessment").Cells(hNamerow, 2).Value = StrConv(Worksheets("Needs Assessment").Cells(hNamerow, 2).Value, vbProperCase)
  End If
  y = y + 1
Loop Until y = doc.getElementById("body").Children(0).Children(1).Children(0).Children(2).Children.Length - 1


'//*[@id="body"]/section/div/fieldset
'For Each elem In doc.getElementById("project-from-bnp")
Set elem = doc.getElementById("body").Children(0).Children(3).Children(1)
For Each td In elem.getElementsByTagName("div")
'For Each td In doc.getElementsByTagName("div")
'x=0 items
    If InStr(td.innerText, "Order Number") > 0 And InStr(td.ClassName, "display-label-row") > 0 Then
        Debug.Print td.innerText
        'Debug.Print td.parentElement.Children.Length
        'Debug.Print td.Children(0).innerText
        temp = td.parentElement.Children(1).innerText
        Debug.Print temp
        Worksheets("Needs Assessment").Cells(Partyrow(), 5).Value = temp
    End If
    If InStr(td.innerText, "Oracle Project Number") > 0 And InStr(td.ClassName, "display-label-row") > 0 Then
        temp = td.parentElement.Children(1).innerText
        Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value = temp
    End If
    If InStr(td.innerText, "Quote Number") > 0 And InStr(td.ClassName, "display-label-row") > 0 Then
        temp = td.parentElement.Children(1).innerText
        Worksheets("Needs Assessment").Cells(Quoterow(), 2).Value = temp
    End If
    If InStr(td.innerText, "Customer PO") > 0 And InStr(td.ClassName, "display-label-row") > 0 Then
        temp = td.parentElement.Children(1).innerText
        Worksheets("Needs Assessment").Cells(custNrow(), 5).Value = temp
    End If
'x3 = 1
    If InStr(td.innerText, "CCN") > 0 And InStr(td.ClassName, "display-label-row") > 0 Then
        temp = td.parentElement.Children(1).innerText
        Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value = temp
    End If
    If InStr(td.innerText, "File No.") > 0 And InStr(td.ClassName, "display-label-row") > 0 Then
        temp = td.parentElement.Children(1).innerText
        Worksheets("Needs Assessment").Cells(Filerow(), 2).Value = temp
    End If
'x3 = 2
    If InStr(td.innerText, "Project Scope") > 0 And InStr(td.ClassName, "display-label-row") > 0 Then
        temp = td.parentElement.Children(1).innerText
        Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value = temp
    End If
    If InStr(td.innerText, "Project Name") > 0 And InStr(td.ClassName, "display-label-row") > 0 Then
        temp = td.parentElement.Children(1).innerText
        Worksheets("Needs Assessment").Cells(cemailrow(), 5).Value = temp
    End If
    If InStr(td.innerText, "Project Handler") > 0 And InStr(td.ClassName, "display-label-row") > 0 Then
        temp = td.parentElement.Children(1).innerText
        Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value = StrConv(Replace(Replace(temp, "@ul.com", ""), ".", " "), vbProperCase)
    End If
    
'x3=3
    If InStr(td.innerText, "Agent Company Name") > 0 And td.parentElement.Children.Length > 1 And InStr(td.ClassName, "display-label-row") > 0 Then
        Call addAgentLines
        Call initializeConst
        temp = td.parentElement.Children(1).innerText
        Worksheets("Needs Assessment").Cells(cphonerow() + 1, 2).Value = temp
        'Worksheets("Needs Assessment").Cells(cphonerow() + 4, 2).Value = ""
        If td.parentElement.Children.Length > 2 Then
            Worksheets("Needs Assessment").Cells(cphonerow() + 2, 2).Value = td.parentElement.Children(2).innerText
        End If
        If td.parentElement.Children.Length > 3 Then
            Worksheets("Needs Assessment").Cells(cphonerow() + 3, 2).Value = Replace(td.parentElement.Children(3).innerText, vbLf & vbCrLf, vbLf)
        End If
    End If
    If InStr(td.innerText, "Agent Party Site Number") > 0 And Worksheets("Needs Assessment").Cells(cphonerow() + 1, 1).Value = "Agent Company Name:" And InStr(td.ClassName, "display-label-row") > 0 Then
        If td.parentElement.Children.Length > 1 Then
            temp = td.parentElement.Children(1).innerText
            Debug.Print temp
            Worksheets("Needs Assessment").Cells(cphonerow() + 4, 2).Value = temp
        Else
            Worksheets("Needs Assessment").Cells(cphonerow() + 4, 2).Value = "Account not synced"
        End If
    End If
    If InStr(td.innerText, "Agent Company Contact") > 0 And Worksheets("Needs Assessment").Cells(cphonerow() + 1, 1).Value = "Agent Company Name:" And InStr(td.ClassName, "display-label-row") > 0 Then
        If td.parentElement.Children.Length > 1 Then
            temp = td.parentElement.Children(1).innerText
            Worksheets("Needs Assessment").Cells(cphonerow() + 5, 2).Value = temp
        End If
        For Each td2 In td.parentElement.getElementsByTagName("div")
            If InStr(td2.innerText, "Email") > 0 Then
                Debug.Print td2.innerText
                temp = Replace(td2.innerText, " ", "")
                Debug.Print temp
                Worksheets("Needs Assessment").Cells(cphonerow() + 6, 2).Value = Mid(temp, 7, Len(temp) - 6)
            End If
            If InStr(td2.innerText, "Phone") > 0 Then
                temp = td2.innerText
                Worksheets("Needs Assessment").Cells(cphonerow() + 7, 2).Value = Mid(temp, 8, Len(temp) - 7)
            End If
        Next td2
    End If

'x3 = 4
    If InStr(td.innerText, "Customer Company Name") > 0 And td.parentElement.Children.Length > 1 And InStr(td.ClassName, "display-label-row") > 0 Then
        temp = td.parentElement.Children(1).innerText
        Worksheets("Needs Assessment").Cells(compNrow, 2).Value = temp
        If td.parentElement.Children.Length > 2 Then
            Worksheets("Needs Assessment").Cells(compA1row(), 2).Value = td.parentElement.Children(2).innerText
        End If
        If td.parentElement.Children.Length > 3 Then
            Worksheets("Needs Assessment").Cells(compA2row(), 2).Value = Replace(td.parentElement.Children(3).innerText, vbLf & vbCrLf, vbLf)
        End If
    End If
    

    If InStr(td.innerText, "Customer Company Address") > 0 And td.parentElement.Children.Length > 1 And InStr(td.ClassName, "display-label-row") > 0 Then
        'temp = td.parentElement.Children(1).innerText
        'Debug.Print td.parentElement.Children(1).outerText
        'showHTMLtext (td.parentElement.Children(1))
        temp = td.parentElement.Children(1).innerHTML
        If Mid(temp, 1, 1) = " " Or Mid(temp, 1, 1) = vbLf Then
            Do
                temp = Mid(temp, 2)
            Loop Until Mid(temp, 1, 1) <> " " And Mid(temp, 1, 1) <> vbLf
        End If
        
        'Worksheets("Needs Assessment").Cells(compNrow, 2).Value = Mid(temp, 1, InStr(temp, vbLf) - 1)
        'If td.parentElement.Children.Length > 2 Then
        '    Worksheets("Needs Assessment").Cells(compA1row(), 2).Value = Mid(temp, InStr(temp, vbLf) + 1) 'td.parentElement.Children(2).innerText
        'End If
        
        
        
        If td.parentElement.Children.Length > 2 Then
            Worksheets("Needs Assessment").Cells(compA1row(), 2).Value = Replace(temp, doc.getElementById("body").innerText, "")
        End If
        
                
        
        'showHTMLtext (td.parentElement.Children(2))

        If td.parentElement.Children.Length > 2 Then
            Worksheets("Needs Assessment").Cells(compA2row(), 2).Value = Mid(td.parentElement.Children(2).innerText, 1, InStr(td.parentElement.Children(2).innerText, vbLf) - 1) & Mid(td.parentElement.Children(2).innerText, InStr(td.parentElement.Children(2).innerText, vbLf) + 1) 'Replace(td.parentElement.Children(3).innerText, vbLf & vbCrLf, vbLf)
        End If
    End If
    If InStr(td.innerText, "Customer Party Site Number") > 0 And InStr(td.ClassName, "display-label-row") > 0 Then
        If td.parentElement.Children.Length > 1 Then
            temp = td.parentElement.Children(1).innerText
            Worksheets("Needs Assessment").Cells(Partyrow(), 2).Value = temp
        Else
            Worksheets("Needs Assessment").Cells(Partyrow(), 2).Value = "Account not synced"
        End If
    End If
    If InStr(td.innerText, "Customer Company Contact") > 0 And InStr(td.ClassName, "display-label-row") > 0 Then
        If td.parentElement.Children.Length > 1 Then
            temp = td.parentElement.Children(1).innerText
            Worksheets("Needs Assessment").Cells(custNrow(), 2).Value = temp
        End If
        For Each td2 In td.parentElement.getElementsByTagName("div")
            If InStr(td2.innerText, "Email") > 0 Then
                temp = Replace(td2.innerText, " ", "")
                Worksheets("Needs Assessment").Cells(cemailrow(), 2).Value = Mid(temp, 7, Len(temp) - 6)
            Debug.Print cemailrow()
            End If
            If InStr(td2.innerText, "Phone") > 0 Then
                temp = td2.innerText
                Worksheets("Needs Assessment").Cells(cphonerow(), 2).Value = Mid(temp, 8, Len(temp) - 7)
            End If
        Next td2
    End If
Next td
'Next elem
Debug.Print x3
Next x3



'noAgent:

IE.Quit
Set IE = Nothing
For x3 = 0 To 4
    Debug.Print x3
    IEx(x3).Quit
    Set IEx(x3) = Nothing
Next x3
Call initializeConst

'cleanup of extra line feeds in text strings
For x = compNrow() To Scoperow()
    s1 = Worksheets("Needs Assessment").Cells(x, 2).Value
    If s1 <> "" Then
      If Mid(s1, Len(s1), 1) = " " Or Mid(s1, Len(s1), 1) = vbLf Or Mid(s1, Len(s1), 1) = vbCr Then
        Do
            s1 = Mid(s1, 1, Len(s1) - 1)
        If Len(s1) = 0 Then
            Exit Do
        End If
        Loop Until Mid(s1, Len(s1), 1) <> " " And Mid(s1, Len(s1), 1) <> vbLf And Mid(s1, Len(s1), 1) <> vbCr
      End If
    End If
    Worksheets("Needs Assessment").Cells(x, 2).Value = s1
Next x
x = Partyrow()
    s1 = Worksheets("Needs Assessment").Cells(x, 5).Value
    If s1 <> "" Then
      If Mid(s1, Len(s1), 1) = " " Or Mid(s1, Len(s1), 1) = vbLf Or Mid(s1, Len(s1), 1) = vbCr Then
        Do
            s1 = Mid(s1, 1, Len(s1) - 1)
            If s1 = "" Then
                Exit Do
            End If
        Loop Until Mid(s1, Len(s1), 1) <> " " And Mid(s1, Len(s1), 1) <> vbLf And Mid(s1, Len(s1), 1) <> vbCr
      End If
    End If
    Worksheets("Needs Assessment").Cells(x, 5).Value = s1

noFlexID:

End Sub


Sub addAgentLines() '''example macro for adding a line + inserting button with defined macro

Dim btn As Button, t As Range, aSheet As String
aSheet = ""
If ActiveSheet.Name <> "Needs Assessment" Then
    aSheet = ActiveSheet.Name
    Worksheets("Needs Assessment").Select
End If

Call initializeConst
If InStr(Worksheets("Needs Assessment").Cells(cphonerow() + 1).Value, "Agent") < 1 Then
    Worksheets("Needs Assessment").Rows(cphonerow() + 1).Select
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    For x = 1 To 7
        Range(Worksheets("Needs Assessment").Cells(cphonerow() + x, 2), Worksheets("Needs Assessment").Cells(cphonerow() + x, 4)).Select
        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .ThemeColor = xlThemeColorAccent4
            .TintAndShade = 0.799981688894314
            .PatternTintAndShade = 0
        End With
        Selection.Merge
        Worksheets("Needs Assessment").Cells(cphonerow() + x, 1).Value = "Agent " & Worksheets("Needs Assessment").Cells(cphonerow() + x - 7, 1).Value
        Worksheets("Needs Assessment").Cells(cphonerow() + x, 1).Font.size = 8
    Next x
    Set t = Worksheets("Needs Assessment").Range(Cells(cphonerow() + 6, 1), Cells(cphonerow() + 6, 1))
    Set btn = Worksheets("Needs Assessment").Buttons.Add(t.Left, t.Top, 67.5, 14) '.Select
    With btn
        .OnAction = "emailAgent"
        .Caption = "Email"
        .Font.size = 10
    End With
End If
If aSheet <> "" Then
    Sheets(aSheet).Select
End If

End Sub

Sub removeAgentLines() 'agent row cleanup

Call initializeConst
aSheet = ""
If ActiveSheet.Name <> "Needs Assessment" Then
    aSheet = ActiveSheet.Name
    Worksheets("Needs Assessment").Select
End If
If InStr(Worksheets("Needs Assessment").Cells(cphonerow() + 1, 1).Value, "Agent") > 0 Then
  For x = 1 To 7
    Worksheets("Needs Assessment").Rows(cphonerow() + 1).Select
    Selection.Delete Shift:=xlUp
  Next x
End If
Debug.Print aSheet
If aSheet <> "" Then
    If Sheets(aSheet).Visible = False Then
        Exit Sub
    End If
    Sheets(aSheet).Select
End If
End Sub


Sub standardsFromCCN()

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, s3 As String
Dim pWebAddress As String
Dim hName As String, rName As String, hNum As String, rNum As String
Dim IE As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object
Dim doc As HTMLDocument
Dim elem As HTMLBaseElement, counter As Long

Call initializeConst

If Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value = "" Then
    Exit Sub
End If

pWebAddress = "http://usnbkw421p.us.ul.com/applications/ctr/manual/"

Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress
Dim sh
Dim eachIE
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Sleep 100
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

login:
If doc.getElementByName("CCN") Is Nothing Then
    MsgBox "Log into VPN"
    Sleep 200
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

'''potentially repeat for multiple ccns in cell with commas
doc.getElementByName("CCN").Value = Mid(Worksheets("Needs Assessment").Cells(CCNrow, 2).Value, 1, 4)

Dim USCCN As Boolean, CACCN As Boolean
Dim standards As New Collection
USCCN = False
CACCN = False

NewCCNEntry:
doc.getElementByName("Action").Click
Sleep 100
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Sleep 100
For Each li In doc.getElementsByName("Action")
    If InStr(li.Value, Mid(Worksheets("Needs Assessment").Cells(CCNrow, 2).Value, 1, 4)) < 1 Then
        GoTo NewCCNEntry
    End If
Next li

If USCCN = False Then
For Each li In doc.getElementsByName("Action")
    If li.Value = Mid(Worksheets("Needs Assessment").Cells(CCNrow, 2).Value, 1, 4) Or li.Value = Mid(Worksheets("Needs Assessment").Cells(CCNrow, 2).Value, 1, 4) & "2" Then
        USCCN = True
        li.Click
        Sleep 100
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Sleep 100
        For Each td In doc.getElementsByClassName("table")(2)
            x = 0
            For Each tr In td.getElementbyclassname("tr")
                x = x + 1
                If x Mod 5 = 2 Then
                    standards.Add tr.getElementbyclassname("td")(1).Value
                End If
            Next tr
        Next td
        GoTo NewCCNEntry
    End If
Next li
End If

If CACCN = False Then
For Each li In doc.getElementsByName("Action")
    If li.Value = Mid(Worksheets("Needs Assessment").Cells(CCNrow, 2).Value, 1, 4) & "7" Or li.Value = Mid(Worksheets("Needs Assessment").Cells(CCNrow, 2).Value, 1, 4) & "8" Then
        CACCN = True
        li.Click
        Sleep 100
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Sleep 100
        For Each td In doc.getElementsByClassName("table")(2)
            x = 0
            For Each tr In td.getElementbyclassname("tr")
                x = x + 1
                If x Mod 5 = 2 Then
                    standards.Add tr.getElementbyclassname("td")(1).Value
                End If
            Next tr
        Next td
        GoTo NewCCNEntry
    End If
Next li
End If

'''all potential standards in standards collection
'''lookup all entries in standards portal
'''prompt user to select correct standards and editions

IE.Quit
Set IE = Nothing


End Sub
Sub standardsFromCCNLIS2()

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, s3 As String
Dim pWebAddress As String, sh As Object, eachIE As Object
Dim x As Long
Dim tbl As Object, td As Object, fld As Object
Dim doc As HTMLDocument, x9 As HTMLBaseElement, IEstandards As InternetExplorer, pwebAddressx As String

If Worksheets("Needs Assessment").Cells(CCNrow(), 2) = "" Or UCase(Mid(Worksheets("Needs Assessment").Cells(CCNrow(), 2), 1, 3)) = "DKY" Then
    GoTo errorEnd
End If


StatusForm.Top = Application.Top
StatusForm.Left = Application.Left
StatusForm.Label1 = "Getting standards information from LIS"
StatusForm.Show


pWebAddress = "http://lis.ul.com/cgi-bin/XYV/template/LISINT242/1FRAME/gensrch.html?searchtype=ccn"
Debug.Print "Starting LIS"
Dim IE As InternetExplorer
Set IE = New InternetExplorer
IE.Top = 0
IE.Left = 0
IE.Height = 0
IE.Width = 0
IE.Visible = True
IE.navigate pWebAddress
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Sleep 50
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document

login:
If doc.getElementsByTagName("TABLE") Is Nothing Then
    MsgBox "Log into VPN"
    Sleep 200
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

Debug.Print "Starting standards hub"
'start loading standards hub
pwebAddressx = "http://standardshub.ul.com/standards"
Set IEstandards = New InternetExplorer
IEstandards.Left = 0
IEstandards.Top = 0
'IEstandards.Height = 0
'IEstandards.Width = 0
IEstandards.Visible = True
IEstandards.navigate pwebAddressx


Debug.Print "Staring LIS search"
For Each tbl In doc.getElementsByTagName("TABLE")
    For Each td In tbl.getElementsByTagName("td")
        s1 = td.innerHTML
        If InStr(s1, "CCNGUIDE") > 0 Then
            td.getElementsByTagName("input")(0).Click
        End If
        If InStr(s1, "CCN") > 0 And InStr(s1, "CCNMODEL") = 0 And InStr(s1, "CCNtitle") = 0 Then
            If Not (td.getElementsByTagName("input")(0) Is Nothing) Then
                td.getElementsByTagName("input")(0).Value = Mid(Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value, 1, 4) & "*"
            End If
        End If
        If InStr(s1, "submit") > 0 Then
            td.getElementsByTagName("input")(0).Click
            Do
                DoEvents
            Loop Until IE.readyState = READYSTATE_COMPLETE
        End If
    Next td
Next tbl
Sleep 100
Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Sleep 100
Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document


Dim IEcol As New Collection, IEx As InternetExplorer, IEAddress As New Collection
Debug.Print "Hashing LIS search results into new browsers"
For Each tbl In doc.getElementsByTagName("TABLE")
    For Each td In tbl.getElementsByTagName("td")
        If InStr(td.innerText, "Guide Information") > 0 Then
            s1 = td.NextSibling.NextSibling.innerHTML
            x1 = InStr(s1, "href=") + 6
            x2 = InStrRev(s1, "sequence=1") + 10
            s2 = Replace(Mid(td.NextSibling.NextSibling.innerHTML, x1, x2 - x1), "amp;", "")
            s2 = "http://lis.ul.com" & s2
    'StatusForm.Label1 = "Getting standards information from LIS: " & vbLf & s2
            Set IEx = New InternetExplorer
            pwebAddressx = s2
            IEAddress.Add s2
            IEx.Left = 0
            IEx.Top = 0
            IEx.Height = 0
            IEx.Width = 0
            IEx.Visible = True
            IEx.navigate pwebAddressx

        End If
    Next td
Next tbl
For x1 = 1 To IEAddress.Count
Debug.Print "Loading new browser " & x1 & " of " & IEAddress.Count
pwebAddressx = IEAddress.Item(x1)


While IEx.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pwebAddressx) Then
      Set IEx = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing
While IEx.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
            IEcol.Add IEx
            x = x + 1
'        End If
'    Next td
'Next tbl
Next x1
''' IEcol now has colleciton of unloaded IE objects with each having an LIS guidecard page

Dim standardsCol As New Collection, showStandards As New Collection

For x1 = 1 To IEcol.Count
    Debug.Print "Looking in search result #: " & x1 & " of " & IEcol.Count
    Set IEx = IEcol.Item(x1)
    Do
        DoEvents
    Loop Until IEx.readyState = READYSTATE_COMPLETE
    Sleep 50
    Do
        DoEvents
    Loop Until IEx.readyState = READYSTATE_COMPLETE
    Set doc = IEx.Document
    
    s1 = doc.body.innerHTML
    If InStr(s1, "<HEADING>REQUIREMENTS</HEADING>") > 0 Then
        s1 = Mid(s1, InStr(s1, "<HEADING>REQUIREMENTS</HEADING>"))
    End If
    Do
        s1 = Mid(s1, InStr(UCase(s1), "<STDNUMBER>") + 11)
        If Mid(s1, 1, 8) = "<A href=" Then
            s1 = Mid(s1, InStr(s1, ">") + 1)
        End If
        s2 = Mid(s1, 1, InStr(s1, "<")) 'should have standard number here
        If InStr(s2, ",") > 0 Then
            s2 = Mid(s2, 1, InStr(s2, ",") - 1)
        Else
            s2 = Mid(s2, 1, Len(s2) - 1)
        End If
        s2 = Replace(s2, "ANSI/", "")
        s2 = Replace(s2, "CAN/CSA-", "CSA ")
        s2 = Replace(s2, "CSA-", "CSA ")
        If InStr(s2, "(") > 0 Then
            s2 = Mid(s2, 1, InStr(s2, "(") - 2)
        End If
        
        If standardsCol.Count > 0 Then
            For x2 = 1 To standardsCol.Count
                If standardsCol.Item(x2) = s2 Then
                    GoTo repeatStandard
                End If
            Next x2
        End If
        Debug.Print "Adding standard: " & s2
        standardsCol.Add s2
repeatStandard:
        s1 = Mid(s1, InStr(UCase(s1), "</STDNUMBER>") + 12)
    Loop Until InStr(UCase(s1), "<STDNUMBER>") < 1
    IEx.Quit
Next x1
    IE.Quit

''' standardsCol should now have all possible standards based on CCN
''' next go to standards site and look for all possible entries
Debug.Print "done with LIS, loading hub"
StatusForm.Label1 = "Loading standards hub..."
'pick browser for standardshub back up
pwebAddressx = "http://standardshub.ul.com/standards"
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pwebAddressx) Then
      Set IEstandards = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing
While IEstandards.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Do
    DoEvents
Loop Until IEstandards.readyState = READYSTATE_COMPLETE
Sleep 50
Do
DoEvents
Loop Until IEstandards.readyState = READYSTATE_COMPLETE
Set doc = IEstandards.Document

For x1 = 1 To standardsCol.Count
StatusForm.Label1 = "Getting standard editions for: " & standardsCol.Item(x1)
    
    Do
        DoEvents
    Loop Until IEstandards.readyState = READYSTATE_COMPLETE
    Do
        Set doc = IEstandards.Document
        Sleep 50
    Loop Until Not (doc.getElementById("standards_index_table_filter") Is Nothing)
    Sleep 50
    Do
        DoEvents
    Loop Until IEstandards.readyState = READYSTATE_COMPLETE
    Set doc = IEstandards.Document
debugloop:
    
    Set doc = IEstandards.Document
    Set x9 = doc.getElementById("standards_index_table_filter")
    Set x9 = x9.Children(0).Children(0)
    x9.Click
    x9.Focus
    Sleep 50
    x9.Value = Chr(34) & standardsCol.Item(x1) & Chr(34)
    x9.DefaultValue = Chr(34) & standardsCol.Item(x1) & Chr(34)
    x9.placeholder = Chr(34) & standardsCol.Item(x1) & Chr(34)
    x9.innerText = Chr(34) & standardsCol.Item(x1) & Chr(34)
    
    Do
        DoEvents
    Loop Until IEstandards.readyState = READYSTATE_COMPLETE
    Sleep 50
    Do
        DoEvents
    Loop Until IEstandards.readyState = READYSTATE_COMPLETE
    Set doc = IEstandards.Document
    For Each td In doc.getElementsByTagName("td")
      If InStr(UCase(td.innerText), UCase(standardsCol.Item(x1))) > 0 And InStr(td.innerText, "Edition") > 0 Then
        s3 = td.innerText '& " " & td.nextSibling.nextSibling.nextSibling.innerText & " - Edition " & td.nextSibling.innerText & " - Revision Date " & td.nextSibling.nextSibling.innerText
        showStandards.Add s3
        SelectStandardsForm.ListBox1.AddItem s3
      End If
    Next td
Next x1

StatusForm.Hide
SelectStandardsForm.Top = Application.Top
SelectStandardsForm.Left = Application.Left
SelectStandardsForm.Show
    
    Set doc = Nothing
    Set IE = Nothing
    Set IEx = Nothing
    IEstandards.Quit
    Set IEstandards = Nothing
    
errorEnd:


End Sub


Sub standardsFromCCNLIS()

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, s3 As String
Dim pWebAddress As String
Dim hName As String, rName As String, hNum As String, rNum As String
Dim IE As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object
Dim doc As HTMLDocument
Dim elem As HTMLBaseElement, counter As Long

Call initializeConst

If Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value = "" Then
    Exit Sub
End If

pWebAddress = "http://database.ul.com/cgi-bin/XYV/template/LISEXT/1FRAME/index.html?_ga=2.44272230.394396327.1504492438-1226304216.1406644025"

Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress
Dim sh
Dim eachIE
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Sleep 100
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

login:
If doc.getElementByName("CCN") Is Nothing Then
    MsgBox "Log into VPN"
    Sleep 200
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

'''potentially repeat for multiple ccns in cell with commas
doc.getElementByName("CCN").Value = Mid(Worksheets("Needs Assessment").Cells(CCNrow, 2).Value, 1, 4)

Dim USCCN As Boolean, CACCN As Boolean
Dim standards As New Collection
USCCN = False
CACCN = False

NewCCNEntry:
doc.getElementByName("Action").Click
Sleep 100
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Sleep 100
For Each li In doc.getElementsByName("Action")
    If InStr(li.Value, Mid(Worksheets("Needs Assessment").Cells(CCNrow, 2).Value, 1, 4)) < 1 Then
        GoTo NewCCNEntry
    End If
Next li

If USCCN = False Then
For Each li In doc.getElementsByName("Action")
    If li.Value = Mid(Worksheets("Needs Assessment").Cells(CCNrow, 2).Value, 1, 4) Or li.Value = Mid(Worksheets("Needs Assessment").Cells(CCNrow, 2).Value, 1, 4) & "2" Then
        USCCN = True
        li.Click
        Sleep 100
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Sleep 100
        For Each td In doc.getElementsByClassName("table")(2)
            x = 0
            For Each tr In td.getElementbyclassname("tr")
                x = x + 1
                If x Mod 5 = 2 Then
                    standards.Add tr.getElementbyclassname("td")(1).Value
                End If
            Next tr
        Next td
        GoTo NewCCNEntry
    End If
Next li
End If

If CACCN = False Then
For Each li In doc.getElementsByName("Action")
    If li.Value = Mid(Worksheets("Needs Assessment").Cells(CCNrow, 2).Value, 1, 4) & "7" Or li.Value = Mid(Worksheets("Needs Assessment").Cells(CCNrow, 2).Value, 1, 4) & "8" Then
        CACCN = True
        li.Click
        Sleep 100
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Sleep 100
        For Each td In doc.getElementsByClassName("table")(2)
            x = 0
            For Each tr In td.getElementbyclassname("tr")
                x = x + 1
                If x Mod 5 = 2 Then
                    standards.Add tr.getElementbyclassname("td")(1).Value
                End If
            Next tr
        Next td
        GoTo NewCCNEntry
    End If
Next li
End If

'''all potential standards in standards collection
'''lookup all entries in standards portal
'''prompt user to select correct standards and editions

IE.Quit
Set IE = Nothing


End Sub


Sub updateFlexPerNA() ' future development

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, s3 As String
Dim pWebAddress As String, flexNum As String
Dim IE As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object, div2 As Object, div3 As Object
Dim doc As HTMLDocument, cEmail As String, cPhone As String
Dim elem As HTMLBaseElement

flexNum = Replace(Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value, "-", "")
pWebAddress = "https://portal.ul.com/Project/CustomerInfo/" & Replace(flexNum, "-", "")

Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress


Dim sh
Dim eachIE
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Dim x

Set doc = IE.Document

login:
If doc.getElementById("project-from-bnp") Is Nothing Then
    MsgBox "Log into Flex"
    Sleep 200
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

Worksheets("Needs Assessment").Cells(compNrow(), 2).Value = doc.getElementById("project-from-bnp").Children(1).Children(0).Children(1).innerText
Worksheets("Needs Assessment").Cells(compA1row(), 2).Value = doc.getElementById("project-from-bnp").Children(1).Children(0).Children(2).innerText
Worksheets("Needs Assessment").Cells(compA2row(), 2).Value = Replace(doc.getElementById("project-from-bnp").Children(1).Children(0).Children(3).innerText, vbLf & vbCrLf, vbLf) '& vbLf & doc.getElementById("project-from-bnp").Children(1).Children(0).Children(4).innerText

Worksheets("Needs Assessment").Cells(custNrow(), 2).Value = doc.getElementById("project-from-bnp").Children(1).Children(1).Children(1).innerText

cEmail = doc.getElementById("project-from-bnp").Children(1).Children(1).Children(2).innerText
Worksheets("Needs Assessment").Cells(cemailrow(), 2).Value = Mid(cEmail, 8, Len(cEmail) - 7)

cPhone = doc.getElementById("project-from-bnp").Children(1).Children(1).Children(3).innerText
Worksheets("Needs Assessment").Cells(cphonerow(), 2).Value = Mid(cPhone, 8, Len(cEmail) - 7)


pWebAddress = "https://portal.ul.com/Project/OrderInfo/" & flexNum
IE.navigate pWebAddress


While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend


Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value = doc.getElementById("body").Children(0).Children(3).Children(1).Children(2).Children(0).Children(1).innerText

IE.Quit
Set IE = Nothing

End Sub

Sub Handler_Reviewer_info()

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, s3 As String
Dim pWebAddress As String
Dim hName As String, rName As String, hNum As String, rNum As String
Dim IE As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object
Dim doc As HTMLDocument
Dim elem As HTMLBaseElement, counter As Long

If Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value = "" Or Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value = "Add handler name" Then
    Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value = "Add handler name"
    GoTo ReviewerInfo
Else
    If Worksheets("Needs Assessment").Cells(hNamerow() + 1, 2).Value <> "" And Worksheets("Needs Assessment").Cells(hNamerow() + 2, 2).Value <> "" And Worksheets("Needs Assessment").Cells(hNamerow() + 3, 2).Value <> "" And Worksheets("Needs Assessment").Cells(hNamerow() + 4, 2).Value <> "" Then
        GoTo ReviewerInfo
    End If
End If
hName = Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value

pWebAddress = "http://sharepoint.ul.com/sites/search/Pages/peopleresults.aspx#k=" & Replace(hName, " ", "%20")

Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress

Dim sh
Dim eachIE
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Sleep 100
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

For counter = 0 To 20
    Set doc = IE.Document
    If Not (doc.getElementById("NameField") Is Nothing) Then
        Exit For
    End If
    Sleep 250
Next counter
Set doc = IE.Document

login:
If doc.getElementById("NameField") Is Nothing Then
'If doc.getElementById("imgPrefetch") Is Nothing Then
    MsgBox "Log into VPN"
    Sleep 200
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If



Dim x As Long
x = 0
Set li = doc.getElementById("NameField")
            s1 = Mid(li.innerHTML, InStr(li.innerHTML, "http"), 68)
            hNum = Mid(s1, Len(s1) - 4, 5)
            Worksheets("Needs Assessment").Cells(hIDrow(), 2).Value = hNum

pWebAddress = "http://mysharepoint.ul.com/Person.aspx?accountname=GLOBAL%5C" & hNum
IE.navigate pWebAddress

While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document

Worksheets("Needs Assessment").Cells(hemailrow(), 2).Value = Replace(doc.getElementById("ProfileViewer_ValueWorkEmail").innerText, vbLf, "")
Worksheets("Needs Assessment").Cells(hTitlerow(), 2).Value = doc.getElementById("ProfileViewer_ValueTitle").innerText

Set li = doc.getElementById("ProfileViewer_ProfileDetails")
For Each div In doc.getElementsByTagName("div")
    If InStr(div.innerText, "Organization") > 0 Then
        Worksheets("Needs Assessment").Cells(hDepartmentrow(), 2).Value = Replace(div.innerText, "Organization", "")
    End If
Next div

IE.Quit
Set IE = Nothing

ReviewerInfo:
If Worksheets("Needs Assessment").Cells(rNamerow(), 2) = "" Or Worksheets("Needs Assessment").Cells(rNamerow(), 2) = "Add reviewer name" Then
    Worksheets("Needs Assessment").Cells(rNamerow(), 2) = "Add reviewer name"
    GoTo errorEnd
Else
    If Worksheets("Needs Assessment").Cells(rNamerow() + 1, 2).Value <> "" And Worksheets("Needs Assessment").Cells(rNamerow() + 2, 2).Value <> "" And Worksheets("Needs Assessment").Cells(rNamerow() + 3, 2).Value <> "" And Worksheets("Needs Assessment").Cells(rNamerow() + 4, 2).Value <> "" Then
        GoTo errorEnd
    End If
End If

rName = Worksheets("Needs Assessment").Cells(rNamerow(), 2).Value

Set IE = New InternetExplorer
IE.Visible = True
pWebAddress = "http://sharepoint.ul.com/sites/search/Pages/peopleresults.aspx#k=" & Replace(rName, " ", "%20")
IE.navigate pWebAddress
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Sleep 100
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

For counter = 0 To 20
    Set doc = IE.Document
    If Not (doc.getElementById("NameField") Is Nothing) Then
        Exit For
    End If
    Sleep 250
Next counter
Set doc = IE.Document

loginR:
If doc.getElementById("NameField") Is Nothing Then
    MsgBox "Log into VPN"
    Sleep 200
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo loginR
End If

Set doc = IE.Document

Set li = doc.getElementById("NameField")
s1 = Mid(li.innerHTML, InStr(li.innerHTML, "http"), 68)
rNum = Mid(s1, Len(s1) - 4, 5)
Worksheets("Needs Assessment").Cells(rIDrow(), 2).Value = rNum

pWebAddress = "http://mysharepoint.ul.com/Person.aspx?accountname=GLOBAL%5C" & rNum
IE.navigate pWebAddress

While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend


Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document

Worksheets("Needs Assessment").Cells(remailrow(), 2).Value = Replace(doc.getElementById("ProfileViewer_ValueWorkEmail").innerText, vbLf, "")
Worksheets("Needs Assessment").Cells(rTitlerow(), 2).Value = doc.getElementById("ProfileViewer_ValueTitle").innerText

Set li = doc.getElementById("ProfileViewer_ProfileDetails")
For Each div In doc.getElementsByTagName("div")
    If InStr(div.innerText, "Organization") > 0 Then
        Worksheets("Needs Assessment").Cells(rDepartmentrow(), 2).Value = Replace(div.innerText, "Organization", "")
    End If
Next div

IE.Quit
Set doc = Nothing
Set IE = Nothing

errorEnd:


End Sub

Sub ECD_desktop_word(stayOpen As Boolean) ' populates and saves word version of NoA to desktop

Dim oEmbFile As Object, objWod As Object, objDoc As Object
Dim WDObj As Object, objWord As Object, rngStory As Object, myStoryRange As Range
Dim objSelection, SaveDriveDir As String, mypath As String, fName As Variant
Dim l As Long, CName As String

Application.DisplayAlerts = False
Application.ScreenUpdating = False

mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - ECD.docx"
If Dir(mypath) <> "" Then
    Kill mypath
End If

Set objWord = CreateObject("Word.Application")
Set objDoc = objWord.Documents.Add

Set oEmbFile = ThisWorkbook.Sheets("ECD").OLEObjects("Object 1").Duplicate
oEmbFile.Verb Verb:=xlOpen

Dim num As Long
num = 0 'search only first storyrange
   Set objWord = CreateObject("Word.Application")
   Set objDoc = oEmbFile.Object 'objWord.Documents.Open(FName)
   objWord.Visible = False

If Worksheets("Needs Assessment").Cells(Projectrow(), 2) = "" Then
    Call getCustInfo
End If
objDoc.Bookmarks("CCN").Range.InsertAfter Worksheets("Needs Assessment").Cells(CCNrow, 2).Value
objDoc.Bookmarks("cEmail").Range.InsertAfter Worksheets("Needs Assessment").Cells(cemailrow, 2).Value
objDoc.Bookmarks("cName").Range.InsertAfter Worksheets("Needs Assessment").Cells(custNrow, 2).Value
objDoc.Bookmarks("Company").Range.InsertAfter Worksheets("Needs Assessment").Cells(compNrow, 2).Value
objDoc.Bookmarks("Company_Address1").Range.InsertAfter Worksheets("Needs Assessment").Cells(compA1row, 2).Value
objDoc.Bookmarks("Company_Address2").Range.InsertAfter Worksheets("Needs Assessment").Cells(compA2row, 2).Value
objDoc.Bookmarks("ECD").Range.InsertAfter Worksheets("Needs Assessment").Cells(ECDrow(), 2).Value
objDoc.Bookmarks("Handler").Range.InsertAfter Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value
objDoc.Bookmarks("hEmail").Range.InsertAfter Worksheets("Needs Assessment").Cells(hemailrow(), 2).Value
objDoc.Bookmarks("hTitle").Range.InsertAfter Worksheets("Needs Assessment").Cells(hTitlerow(), 2).Value
objDoc.Bookmarks("projectNum").Range.InsertAfter Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value
objDoc.Bookmarks("RequestDate").Range.InsertAfter Worksheets("Needs Assessment").Cells(custDaterow(), 2).Value
objDoc.Bookmarks("RequiredItems").Range.InsertAfter Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text
objDoc.Bookmarks("samples").Range.InsertAfter Worksheets("Needs Assessment").Shapes.Item("TextBox 2").TextFrame.Characters.Text
objDoc.Bookmarks("scope").Range.InsertAfter Worksheets("Needs Assessment").Cells(Scoperow, 2).Value
objDoc.Bookmarks("standards").Range.InsertAfter Worksheets("Needs Assessment").Cells(Standardsrow, 2).Value
objDoc.Bookmarks("TestPlan").Range.InsertAfter Worksheets("Needs Assessment").Cells(TestPlanrow, 2).Value
objDoc.Bookmarks("Assumptions").Range.InsertAfter Worksheets("Needs Assessment").Cells(Assumptionsrow, 2).Value
objDoc.Bookmarks("date").Range.InsertAfter Date

Dim bkm As Bookmark
For Each bkm In objDoc.Bookmarks
    bkm.Delete
Next bkm
NextStep:

Sheets("Needs Assessment").Select
mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - ECD.docx"
If Dir(mypath) <> "" Then
    Kill mypath
End If

objDoc.SaveAs mypath
Call addDocItem(2, getFNameAndExt(mypath), mypath, "", "", "New file, not uploaded yet: ", "", "")
If stayOpen = False Then
    objDoc.Close
    objWord.Quit
    MsgBox ("ECD has been saved to " & getDirectory())
End If

oEmbFile.Delete

Set oEmbFile = Nothing
Set objDoc = Nothing
Set objWord = Nothing

Sheets("Needs Assessment").Select
Application.DisplayAlerts = True
Exit Sub

errHandler:
    MsgBox "There is an error"

End Sub
Sub PEDECD_desktop_word(stayOpen As Boolean) ' populates and saves word version of NoA to desktop

Dim oEmbFile As Object, objWod As Object, objDoc As Object
Dim WDObj As Object, objWord As Object, rngStory As Object, myStoryRange As Range
Dim objSelection, SaveDriveDir As String, mypath As String, fName As Variant
Dim l As Long, CName As String

Application.DisplayAlerts = False
Application.ScreenUpdating = False
initializeConst
mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - ECD.docx"
If Dir(mypath) <> "" Then
    Kill mypath
End If

Set objWord = CreateObject("Word.Application")
Set objDoc = objWord.Documents.Add

Set oEmbFile = ThisWorkbook.Sheets("PED ECD").OLEObjects("Object 1").Duplicate
oEmbFile.Verb Verb:=xlOpen

Dim num As Long
num = 0 'search only first storyrange
   Set objWord = CreateObject("Word.Application")
   Set objDoc = oEmbFile.Object 'objWord.Documents.Open(FName)
   objWord.Visible = False

If Worksheets("Needs Assessment").Cells(Projectrow(), 2) = "" Then
    Call getCustInfo
End If
objDoc.Bookmarks("CCN").Range.InsertAfter Worksheets("Needs Assessment").Cells(CCNrow, 2).Value
objDoc.Bookmarks("cEmail").Range.InsertAfter Worksheets("Needs Assessment").Cells(cemailrow, 2).Value
objDoc.Bookmarks("cName").Range.InsertAfter Worksheets("Needs Assessment").Cells(custNrow, 2).Value
objDoc.Bookmarks("Company").Range.InsertAfter Worksheets("Needs Assessment").Cells(compNrow, 2).Value
objDoc.Bookmarks("Company_Address1").Range.InsertAfter Worksheets("Needs Assessment").Cells(compA1row, 2).Value
objDoc.Bookmarks("Company_Address2").Range.InsertAfter Worksheets("Needs Assessment").Cells(compA2row, 2).Value
objDoc.Bookmarks("ECD").Range.InsertAfter Worksheets("Needs Assessment").Cells(ECDrow(), 2).Value
objDoc.Bookmarks("Handler").Range.InsertAfter Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value
objDoc.Bookmarks("hEmail").Range.InsertAfter Worksheets("Needs Assessment").Cells(hemailrow(), 2).Value
objDoc.Bookmarks("hTitle").Range.InsertAfter Worksheets("Needs Assessment").Cells(hTitlerow(), 2).Value
objDoc.Bookmarks("Handler2").Range.InsertAfter Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value
objDoc.Bookmarks("hEmail2").Range.InsertAfter Worksheets("Needs Assessment").Cells(hemailrow(), 2).Value
objDoc.Bookmarks("hTitle2").Range.InsertAfter Worksheets("Needs Assessment").Cells(hTitlerow(), 2).Value
objDoc.Bookmarks("rName").Range.InsertAfter Worksheets("Needs Assessment").Cells(rNamerow(), 2).Value
objDoc.Bookmarks("rEmail").Range.InsertAfter Worksheets("Needs Assessment").Cells(remailrow(), 2).Value
objDoc.Bookmarks("rTitle").Range.InsertAfter Worksheets("Needs Assessment").Cells(rTitlerow(), 2).Value

objDoc.Bookmarks("projectNum").Range.InsertAfter Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value
objDoc.Bookmarks("RequestDate").Range.InsertAfter Worksheets("Needs Assessment").Cells(custDaterow(), 2).Value
'objDoc.Bookmarks("RequiredItems").Range.InsertAfter Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text
objDoc.Bookmarks("samples").Range.InsertAfter Worksheets("Needs Assessment").Shapes.Item("TextBox 2").TextFrame.Characters.Text
objDoc.Bookmarks("scope").Range.InsertAfter Worksheets("Needs Assessment").Cells(Scoperow, 2).Value
objDoc.Bookmarks("standards").Range.InsertAfter Worksheets("Needs Assessment").Cells(Standardsrow, 2).Value
objDoc.Bookmarks("TestPlan").Range.InsertAfter Worksheets("Needs Assessment").Cells(TestPlanrow, 2).Value
objDoc.Bookmarks("Assumptions").Range.InsertAfter Worksheets("Needs Assessment").Cells(Assumptionsrow, 2).Value
objDoc.Bookmarks("date").Range.InsertAfter Date


Dim bkm As Bookmark
For Each bkm In objDoc.Bookmarks
    bkm.Delete
Next bkm
NextStep:

Sheets("Needs Assessment").Select
mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - ECD.docx"
If Dir(mypath) <> "" Then
    Kill mypath
End If

objDoc.SaveAs mypath
Call addDocItem(2, getFNameAndExt(mypath), mypath, "", "", "New file, not uploaded yet: ", "", "")
If stayOpen = False Then
    objDoc.Close
    objWord.Quit
    MsgBox ("ECD has been saved to " & getDirectory())
End If

oEmbFile.Delete

Set oEmbFile = Nothing
Set objDoc = Nothing
Set objWord = Nothing

Sheets("Needs Assessment").Select
Application.DisplayAlerts = True
Exit Sub

errHandler:
    MsgBox "There is an error"

End Sub

Sub ECD_desktop_pdf() ' populates and saves word version of NoA to desktop

Dim oEmbFile As Object, objWod As Object, objDoc As Object
Dim WDObj As Object, objWord As Object, rngStory As Object, myStoryRange As Range
Dim objSelection, SaveDriveDir As String, mypath As String, fName As Variant
Dim l As Long, CName As String

Application.DisplayAlerts = False
Application.ScreenUpdating = False

mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - ECD.docx"
If Dir(mypath) <> "" Then
    Kill mypath
End If

Set objWord = CreateObject("Word.Application")
Set objDoc = objWord.Documents.Add

Set oEmbFile = ThisWorkbook.Sheets("ECD").OLEObjects("Object 1").Duplicate
oEmbFile.Verb Verb:=xlOpen

Dim num As Long
num = 0 'search only first storyrange
   Set objWord = CreateObject("Word.Application")
   Set objDoc = oEmbFile.Object 'objWord.Documents.Open(FName)
   objWord.Visible = False

If Worksheets("Needs Assessment").Cells(Projectrow(), 2) = "" Then
    Call getCustInfo
End If
objDoc.Bookmarks("CCN").Range.InsertAfter Worksheets("Needs Assessment").Cells(CCNrow, 2).Value
objDoc.Bookmarks("cEmail").Range.InsertAfter Worksheets("Needs Assessment").Cells(cemailrow, 2).Value
objDoc.Bookmarks("cName").Range.InsertAfter Worksheets("Needs Assessment").Cells(custNrow, 2).Value
objDoc.Bookmarks("Company").Range.InsertAfter Worksheets("Needs Assessment").Cells(compNrow, 2).Value
objDoc.Bookmarks("Company_Address1").Range.InsertAfter Worksheets("Needs Assessment").Cells(compA1row, 2).Value
objDoc.Bookmarks("Company_Address2").Range.InsertAfter Worksheets("Needs Assessment").Cells(compA2row, 2).Value
objDoc.Bookmarks("ECD").Range.InsertAfter Worksheets("Needs Assessment").Cells(ECDrow(), 2).Value
objDoc.Bookmarks("Handler").Range.InsertAfter Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value
objDoc.Bookmarks("hEmail").Range.InsertAfter Worksheets("Needs Assessment").Cells(hemailrow(), 2).Value
objDoc.Bookmarks("hTitle").Range.InsertAfter Worksheets("Needs Assessment").Cells(hTitlerow(), 2).Value
objDoc.Bookmarks("projectNum").Range.InsertAfter Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value
objDoc.Bookmarks("RequestDate").Range.InsertAfter Worksheets("Needs Assessment").Cells(custDaterow(), 2).Value
objDoc.Bookmarks("RequiredItems").Range.InsertAfter Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text
objDoc.Bookmarks("samples").Range.InsertAfter Worksheets("Needs Assessment").Shapes.Item("TextBox 2").TextFrame.Characters.Text
objDoc.Bookmarks("scope").Range.InsertAfter Worksheets("Needs Assessment").Cells(Scoperow, 2).Value
objDoc.Bookmarks("standards").Range.InsertAfter Worksheets("Needs Assessment").Cells(Standardsrow, 2).Value
objDoc.Bookmarks("TestPlan").Range.InsertAfter Worksheets("Needs Assessment").Cells(TestPlanrow, 2).Value
objDoc.Bookmarks("Assumptions").Range.InsertAfter Worksheets("Needs Assessment").Cells(Assumptionsrow, 2).Value
objDoc.Bookmarks("date").Range.InsertAfter Date


Dim bkm As Bookmark
For Each bkm In objDoc.Bookmarks
    bkm.Delete
Next bkm
NextStep:

Sheets("Needs Assessment").Select
mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - ECD.pdf"
If Dir(mypath) <> "" Then
    Kill mypath
End If

objDoc.ExportAsFixedFormat OutputFileName:=mypath, ExportFormat:=wdExportFormatPDF

If stayOpen = False Then
    objDoc.Close
    objWord.Quit
    MsgBox ("ECD(pdf) has been saved to " & getDirectory())
End If

oEmbFile.Delete

Set oEmbFile = Nothing
Set objDoc = Nothing
Set objWord = Nothing

Sheets("Needs Assessment").Select
Application.DisplayAlerts = True
Exit Sub

errHandler:
    MsgBox "There is an error"

End Sub
Sub EpicECD_desktop_word() ' populates and saves word version of NoA to desktop

Dim oEmbFile As Object, objWod As Object, objDoc As Object
Dim WDObj As Object, objWord As Object, rngStory As Object, myStoryRange As Range
Dim objSelection, SaveDriveDir As String, mypath As String, fName As Variant
Dim l As Long, CName As String
Dim appWord As Word.Application
Dim doc As Word.Document

Application.DisplayAlerts = False
Application.ScreenUpdating = False

mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - ECD.docx"
If Dir(mypath) <> "" Then
    MsgBox "File already exists: " & mypath
    Exit Sub
End If

Set objWord = CreateObject("Word.Application")
Set objDoc = objWord.Documents.Add

Set oEmbFile = ThisWorkbook.Sheets("ECD").OLEObjects("Object 1").Duplicate
oEmbFile.Verb Verb:=xlOpen

Dim num As Long
num = 0 'search only first storyrange
   Set objWord = CreateObject("Word.Application")
   Set doc = oEmbFile.Object 'objWord.Documents.Open(FName)
   objWord.Visible = False

If Worksheets("Needs Assessment").Cells(Projectrow(), 2) = "" Then
    Call getCustInfo
End If

'Avoid error 429, when Word isn't open.
On Error Resume Next
Err.Clear

'Cycle through records to fill Word form fields.
Do While Not rst.EOF
With doc
  .FormFields("fldCustomerID").Result = rst!CustomerID
  .FormFields("fldCompanyName").Result = rst!CompanyName
  .FormFields("fldContactName").Result = rst!ContactName
  .FormFields("fldContactTitle").Result = rst!ContactTitle
  .FormFields("fldAddress").Result = rst!Address
  .FormFields("fldCity").Result = rst!City
  .FormFields("fldRegion").Result = rst!region
  .FormFields("fldPostalCode").Result = rst!PostalCode
  .FormFields("fldCountry").Result = rst!Country
  .FormFields("fldPhone").Result = rst!Phone
  .FormFields("fldFax").Result = rst!Fax
  .Visible = True
  .Activate
rst.MoveNext
End With
Loop
Exit Sub
errHandler:
MsgBox Err.Number & ": " & Err.Description


NextStep:

Sheets("Needs Assessment").Select
mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - ECD.docx"
If Dir(mypath) <> "" Then
    Kill mypath
End If

objDoc.SaveAs mypath
objDoc.Close
objWord.Quit
MsgBox ("ECD has been saved to " & getDirectory())

oEmbFile.Delete

Set oEmbFile = Nothing
Set objDoc = Nothing
Set objWord = Nothing

Sheets("Needs Assessment").Select
Application.DisplayAlerts = True
Exit Sub

''errHandler:
    MsgBox "There is an error"

End Sub
Sub TAT_desktop_word(stayOpen As Boolean) ' populates and saves word version of TAT to desktop

Dim oEmbFile As Object, objWod As Object, objDoc As Object
Dim WDObj As Object

    Dim objWord As Object, rngStory As Object, myStoryRange As Range
    Dim objSelection
    Dim SaveDriveDir As String, mypath As String
    Dim fName As Variant
    Dim l As Long
    Dim CName As String

Application.DisplayAlerts = False
Application.ScreenUpdating = False

mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - TAT.docx"
If Dir(mypath) <> "" Then
    Kill mypath
End If

Set objWord = CreateObject("Word.Application")
Set objDoc = objWord.Documents.Add

Set oEmbFile = ThisWorkbook.Sheets("TAT").OLEObjects("Object 1").Duplicate
    oEmbFile.Verb Verb:=xlOpen

Dim num As Long

num = 0 'search only first storyrange

   Set objWord = CreateObject("Word.Application")
   Set objDoc = oEmbFile.Object 'objWord.Documents.Open(FName)
   objWord.Visible = False

If Worksheets("Needs Assessment").Cells(Projectrow(), 2) = "" Then
    Call getCustInfo
End If
objDoc.Bookmarks("CCN").Range.InsertAfter Worksheets("Needs Assessment").Cells(CCNrow, 2).Value
objDoc.Bookmarks("cEmail").Range.InsertAfter Worksheets("Needs Assessment").Cells(cemailrow, 2).Value
objDoc.Bookmarks("cName").Range.InsertAfter Worksheets("Needs Assessment").Cells(custNrow, 2).Value
objDoc.Bookmarks("Company").Range.InsertAfter Worksheets("Needs Assessment").Cells(compNrow, 2).Value
objDoc.Bookmarks("Company_Address1").Range.InsertAfter Worksheets("Needs Assessment").Cells(compA1row, 2).Value
objDoc.Bookmarks("Company_Address2").Range.InsertAfter Worksheets("Needs Assessment").Cells(compA2row, 2).Value
objDoc.Bookmarks("TAT").Range.InsertAfter Worksheets("Needs Assessment").Cells(TATrow(), 2).Value & " weeks"
objDoc.Bookmarks("Handler").Range.InsertAfter Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value
objDoc.Bookmarks("hEmail").Range.InsertAfter Worksheets("Needs Assessment").Cells(hemailrow(), 2).Value
objDoc.Bookmarks("hTitle").Range.InsertAfter Worksheets("Needs Assessment").Cells(hTitlerow(), 2).Value
objDoc.Bookmarks("projectNum").Range.InsertAfter Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value
objDoc.Bookmarks("RequiredItems").Range.InsertAfter Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text
objDoc.Bookmarks("samples").Range.InsertAfter Worksheets("Needs Assessment").Shapes.Item("TextBox 2").TextFrame.Characters.Text
objDoc.Bookmarks("scope").Range.InsertAfter Worksheets("Needs Assessment").Cells(Scoperow, 2).Value
objDoc.Bookmarks("standards").Range.InsertAfter Worksheets("Needs Assessment").Cells(Standardsrow, 2).Value
objDoc.Bookmarks("TestPlan").Range.InsertAfter Worksheets("Needs Assessment").Cells(TestPlanrow, 2).Value
objDoc.Bookmarks("Assumptions").Range.InsertAfter Worksheets("Needs Assessment").Cells(Assumptionsrow, 2).Value
objDoc.Bookmarks("date").Range.InsertAfter Date

Dim bkm As Bookmark
For Each bkm In objDoc.Bookmarks
    bkm.Delete
Next bkm

NextStep:

Sheets("Needs Assessment").Select

mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - TAT.docx"
If Dir(mypath) <> "" Then
    Kill mypath
End If

objDoc.SaveAs (mypath)
Call addDocItem(2, getFNameAndExt(mypath), mypath, "", "", "New file, not uploaded yet: ", "", "")

If stayOpen = False Then
    objDoc.Close
    objWord.Quit
    MsgBox ("TAT has been saved to " & getDirectory())
End If

oEmbFile.Delete

Set oEmbFile = Nothing
Set objDoc = Nothing
Set objWord = Nothing

Sheets("Needs Assessment").Select
Application.DisplayAlerts = True
Exit Sub

errHandler:
    MsgBox "There is an error"


End Sub

Sub PEDTAT_desktop_word(stayOpen As Boolean) ' populates and saves word version of TAT to desktop

Dim oEmbFile As Object, objWod As Object, objDoc As Object
Dim WDObj As Object

    Dim objWord As Object, rngStory As Object, myStoryRange As Range
    Dim objSelection
    Dim SaveDriveDir As String, mypath As String
    Dim fName As Variant
    Dim l As Long
    Dim CName As String

Application.DisplayAlerts = False
Application.ScreenUpdating = False

mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - TAT.docx"
If Dir(mypath) <> "" Then
    Kill mypath
End If

Set objWord = CreateObject("Word.Application")
Set objDoc = objWord.Documents.Add

Set oEmbFile = ThisWorkbook.Sheets("PED TAT").OLEObjects("Object 1").Duplicate
    oEmbFile.Verb Verb:=xlOpen

Dim num As Long

num = 0 'search only first storyrange

   Set objWord = CreateObject("Word.Application")
   Set objDoc = oEmbFile.Object 'objWord.Documents.Open(FName)
   objWord.Visible = False

If Worksheets("Needs Assessment").Cells(Projectrow(), 2) = "" Then
    Call getCustInfo
End If
objDoc.Bookmarks("CCN").Range.InsertAfter Worksheets("Needs Assessment").Cells(CCNrow, 2).Value
objDoc.Bookmarks("cEmail").Range.InsertAfter Worksheets("Needs Assessment").Cells(cemailrow, 2).Value
objDoc.Bookmarks("cName").Range.InsertAfter Worksheets("Needs Assessment").Cells(custNrow, 2).Value
objDoc.Bookmarks("Company").Range.InsertAfter Worksheets("Needs Assessment").Cells(compNrow, 2).Value
objDoc.Bookmarks("Company_Address1").Range.InsertAfter Worksheets("Needs Assessment").Cells(compA1row, 2).Value
objDoc.Bookmarks("Company_Address2").Range.InsertAfter Worksheets("Needs Assessment").Cells(compA2row, 2).Value
objDoc.Bookmarks("TAT").Range.InsertAfter Worksheets("Needs Assessment").Cells(TATrow(), 2).Value & " weeks"
objDoc.Bookmarks("Handler").Range.InsertAfter Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value
objDoc.Bookmarks("hEmail").Range.InsertAfter Worksheets("Needs Assessment").Cells(hemailrow(), 2).Value
objDoc.Bookmarks("hTitle").Range.InsertAfter Worksheets("Needs Assessment").Cells(hTitlerow(), 2).Value
objDoc.Bookmarks("projectNum").Range.InsertAfter Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value
objDoc.Bookmarks("RequiredItems").Range.InsertAfter Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text
objDoc.Bookmarks("samples").Range.InsertAfter Worksheets("Needs Assessment").Shapes.Item("TextBox 2").TextFrame.Characters.Text
objDoc.Bookmarks("scope").Range.InsertAfter Worksheets("Needs Assessment").Cells(Scoperow, 2).Value
objDoc.Bookmarks("standards").Range.InsertAfter Worksheets("Needs Assessment").Cells(Standardsrow, 2).Value
objDoc.Bookmarks("TestPlan").Range.InsertAfter Worksheets("Needs Assessment").Cells(TestPlanrow, 2).Value
objDoc.Bookmarks("Assumptions").Range.InsertAfter Worksheets("Needs Assessment").Cells(Assumptionsrow, 2).Value
objDoc.Bookmarks("date").Range.InsertAfter Date

Dim bkm As Bookmark
For Each bkm In objDoc.Bookmarks
    bkm.Delete
Next bkm

NextStep:

Sheets("Needs Assessment").Select

mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - TAT.docx"
If Dir(mypath) <> "" Then
    Kill mypath
End If

objDoc.SaveAs (mypath)
Call addDocItem(2, getFNameAndExt(mypath), mypath, "", "", "New file, not uploaded yet: ", "", "")

If stayOpen = False Then
    objDoc.Close
    objWord.Quit
    MsgBox ("TAT has been saved to " & getDirectory())
End If

oEmbFile.Delete

Set oEmbFile = Nothing
Set objDoc = Nothing
Set objWord = Nothing

Sheets("Needs Assessment").Select
Application.DisplayAlerts = True
Exit Sub

errHandler:
    MsgBox "There is an error"


End Sub

Sub LightingChecklist()

Dim oEmbFile As Object, objWod As Object, objDoc As Object
Dim WDObj As Object

    Dim objWord As Object, rngStory As Object, myStoryRange As Range
    Dim objSelection
    Dim SaveDriveDir As String, mypath As String
    Dim fName As Variant
    Dim l As Long
    Dim CName As String

Application.DisplayAlerts = False
Application.ScreenUpdating = False

mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - checklist.docx"
If Dir(mypath) <> "" Then
    Kill mypath
End If

Set objWord = CreateObject("Word.Application")
Set objDoc = objWord.Documents.Add

Set oEmbFile = ThisWorkbook.Sheets("Lighting checklist").OLEObjects("Object 1").Duplicate
    oEmbFile.Verb Verb:=xlOpen

Dim num As Long

num = 0 'search only first storyrange

   Set objWord = CreateObject("Word.Application")
   Set objDoc = oEmbFile.Object 'objWord.Documents.Open(FName)
   objWord.Visible = False

If Worksheets("Needs Assessment").Cells(Projectrow(), 2) = "" Then
    Call getCustInfo
End If
objDoc.Bookmarks("applicant").Range.InsertAfter Worksheets("Needs Assessment").Cells(compNrow, 2).Value
objDoc.Bookmarks("project").Range.InsertAfter Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value
objDoc.Bookmarks("scope").Range.InsertAfter Worksheets("Needs Assessment").Cells(Scoperow, 2).Value
objDoc.Bookmarks("fileNo").Range.InsertAfter Worksheets("Needs Assessment").Cells(Filerow, 2).Value
objDoc.Bookmarks("quote").Range.InsertAfter Worksheets("Needs Assessment").Cells(Quoterow, 2).Value

   
Set oTable = objDoc.Tables(2)
xx = 0
Skip = 0
Do
  If Worksheets("Checklist").Cells(xx + 4, 2).Value <> "" Or Worksheets("Checklist").Cells(xx + 4, 3).Value <> "" Then
    oTable.Cell(2 + xx - Skip, 1).Range.Text = Worksheets("Checklist").Cells(xx + 4, 1).Value
    oTable.Cell(2 + xx - Skip, 2).Range.Text = Worksheets("Checklist").Cells(xx + 4, 2).Value
    oTable.Cell(2 + xx - Skip, 3).Range.Text = Worksheets("Checklist").Cells(xx + 4, 3).Value
    oTable.Cell(2 + xx - Skip, 4).Range.Text = Worksheets("Checklist").Cells(xx + 4, 4).Value
    oTable.Cell(2 + xx - Skip, 5).Range.Text = Worksheets("Checklist").Cells(xx + 4, 5).Value
    If Worksheets("Checklist").Cells(5 + xx, 4) <> "" Then
        oTable.Rows.Add
    End If
  Else
    Skip = Skip + 1
  End If
  xx = xx + 1
Loop Until Worksheets("Checklist").Cells(4 + xx, 4) = ""

Set oTable = objDoc.Tables(3)
xx = 0
Skip = 0
Do
  If Worksheets("Checklist").Cells(xx + 28, 2).Value <> "" Or Worksheets("Checklist").Cells(xx + 28, 4).Value <> "" Then
    oTable.Cell(2 + xx - Skip, 1).Range.Text = Worksheets("Checklist").Cells(xx + 28, 2).Value
    oTable.Cell(2 + xx - Skip, 2).Range.Text = Worksheets("Checklist").Cells(xx + 28, 3).Value
    oTable.Cell(2 + xx - Skip, 3).Range.Text = Worksheets("Checklist").Cells(xx + 28, 4).Value
    If Worksheets("Checklist").Cells(5 + xx, 4) <> "" Then
        oTable.Rows.Add
    End If
  Else
    Skip = Skip + 1
  End If
  xx = xx + 1
Loop Until Worksheets("Checklist").Cells(4 + xx, 4) = ""

Dim bkm As Bookmark
For Each bkm In objDoc.Bookmarks
    bkm.Delete
Next bkm

NextStep:

Sheets("Needs Assessment").Select

'mypath = "C:\Users\" & Environ("username") & "\Desktop\" & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - TAT.docx"
mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - checklist.docx"
If Dir(mypath) <> "" Then
    Kill mypath
End If

objDoc.SaveAs (mypath)
Call addDocItem(2, getFNameAndExt(mypath), mypath, "", "", "New file, not uploaded yet: ", "", "")
Call uploadSpecificFile(2, mypath)

If stayOpen = False Then
    objDoc.Close
    objWord.Quit
    MsgBox ("Checklist has been saved to " & getDirectory())
End If

oEmbFile.Delete

Set oEmbFile = Nothing
Set objDoc = Nothing
Set objWord = Nothing

Sheets("Needs Assessment").Select
Application.DisplayAlerts = True
Exit Sub

errHandler:
    MsgBox "There is an error"


End Sub

Sub TAT_desktop_pdf() ' populates and saves word version of TAT to desktop

Dim oEmbFile As Object, objWod As Object, objDoc As Object
Dim WDObj As Object

    Dim objWord As Object, rngStory As Object, myStoryRange As Range
    Dim objSelection
    Dim SaveDriveDir As String, mypath As String
    Dim fName As Variant
    Dim l As Long
    Dim CName As String

Application.DisplayAlerts = False
Application.ScreenUpdating = False

mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - TAT.docx"
If Dir(mypath) <> "" Then
    Kill mypath
End If

Set objWord = CreateObject("Word.Application")
Set objDoc = objWord.Documents.Add

Set oEmbFile = ThisWorkbook.Sheets("TAT").OLEObjects("Object 1").Duplicate
    oEmbFile.Verb Verb:=xlOpen

Dim num As Long

num = 0 'search only first storyrange

   Set objWord = CreateObject("Word.Application")
   Set objDoc = oEmbFile.Object 'objWord.Documents.Open(FName)
   objWord.Visible = False

If Worksheets("Needs Assessment").Cells(Projectrow(), 2) = "" Then
    Call getCustInfo
End If

objDoc.Bookmarks("CCN").Range.InsertAfter Worksheets("Needs Assessment").Cells(CCNrow, 2).Value
objDoc.Bookmarks("cEmail").Range.InsertAfter Worksheets("Needs Assessment").Cells(cemailrow, 2).Value
objDoc.Bookmarks("cName").Range.InsertAfter Worksheets("Needs Assessment").Cells(custNrow, 2).Value
objDoc.Bookmarks("Company").Range.InsertAfter Worksheets("Needs Assessment").Cells(compNrow, 2).Value
objDoc.Bookmarks("Company_Address1").Range.InsertAfter Worksheets("Needs Assessment").Cells(compA1row, 2).Value
objDoc.Bookmarks("Company_Address2").Range.InsertAfter Worksheets("Needs Assessment").Cells(compA2row, 2).Value
objDoc.Bookmarks("TAT").Range.InsertAfter Worksheets("Needs Assessment").Cells(TATrow(), 2).Value & " weeks"
objDoc.Bookmarks("Handler").Range.InsertAfter Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value
objDoc.Bookmarks("hEmail").Range.InsertAfter Worksheets("Needs Assessment").Cells(hemailrow(), 2).Value
objDoc.Bookmarks("hTitle").Range.InsertAfter Worksheets("Needs Assessment").Cells(hTitlerow(), 2).Value
objDoc.Bookmarks("projectNum").Range.InsertAfter Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value
objDoc.Bookmarks("RequiredItems").Range.InsertAfter Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text
objDoc.Bookmarks("samples").Range.InsertAfter Worksheets("Needs Assessment").Shapes.Item("TextBox 2").TextFrame.Characters.Text
objDoc.Bookmarks("scope").Range.InsertAfter Worksheets("Needs Assessment").Cells(Scoperow, 2).Value
objDoc.Bookmarks("standards").Range.InsertAfter Worksheets("Needs Assessment").Cells(Standardsrow, 2).Value
objDoc.Bookmarks("TestPlan").Range.InsertAfter Worksheets("Needs Assessment").Cells(TestPlanrow, 2).Value
objDoc.Bookmarks("Assumptions").Range.InsertAfter Worksheets("Needs Assessment").Cells(Assumptionsrow, 2).Value
objDoc.Bookmarks("date").Range.InsertAfter Date

Dim bkm As Bookmark
For Each bkm In objDoc.Bookmarks
    bkm.Delete
Next bkm

NextStep:

Sheets("Needs Assessment").Select

mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - TAT.pdf"
If Dir(mypath) <> "" Then
    Kill mypath
End If

objDoc.ExportAsFixedFormat OutputFileName:=mypath, ExportFormat:=wdExportFormatPDF

If stayOpen = False Then
    objDoc.Close
    objWord.Quit
    MsgBox ("TAT has been saved to " & getDirectory())
End If

oEmbFile.Delete

Set oEmbFile = Nothing
Set objDoc = Nothing
Set objWord = Nothing

Sheets("Needs Assessment").Select
Application.DisplayAlerts = True
Exit Sub

errHandler:
    MsgBox "There is an error"


End Sub

Sub MSGDATE()
MsgBox Date
End Sub

Sub EPIC_NOA()

Dim s1 As String, s2 As String, x As Long, x1 As Long, x2 As Long, s3 As String, fNamepdf As String
Dim pWebAddress As String, flexNum As String
Dim IE As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object, div2 As Object, div3 As Object
Dim doc As HTMLDocument, cEmail As String, cPhone As String
Dim elem As HTMLBaseElement
Dim objDoc As Object, objWord As Object

mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - NoA.pdf"
If Dir(mypath) <> "" Then
    MsgBox "File already exists: " & mypath
    Exit Sub
End If

If Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = "" Then
    MsgBox "Add Flex ID number and try again"
    Exit Sub
End If
If Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value = "" Then
    MsgBox "Add project number before generating NoA"
    Exit Sub
End If

If Worksheets("Needs Assessment").Cells(Filerow, 5).Value = "" Then
    Worksheets("Needs Assessment").Cells(Filerow, 5).Value = "TBD"
End If
pWebAddress = "https://publishing.ul.com/Report?TemplateUNID=2&ProjectNumber=" & Replace(Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value, " ", "") & "&FRDate=" & Replace(Date, "/", "%2F") & "&VolumeNumber=" & Worksheets("Needs Assessment").Cells(Filerow, 5).Value

Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress

Dim sh
Dim eachIE
While IE.Busy
  DoEvents
  Wend
Do
    Set sh = New Shell32.Shell
    For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, "https://idselfserv.ul.com/oam/server/") > 0 Then
      Set IE = eachIE
      IE.Visible = True ' True  'This is here because in some environments, the new process defaults to Visible.
      MsgBox "Log into Flex" ''''
      'ProgressForm.Label1.Visible = False
      'ProgressForm.Caption = "Action needed"
      'ProgressForm.Label2.Caption = "Log into Flex"
      'ProgressForm.Show
      
      Set doc = IE.Document
login:
        If doc.getElementById("template-dropdown") Is Nothing Then
            'ProgressForm.Label1.Visible = False
            'ProgressForm.Caption = "Action needed"
            'ProgressForm.Label2.Caption = "Log into Flex"
            'ProgressForm.Show
            MsgBox "Log into Flex"
            Do
                DoEvents
            Loop Until IE.readyState = READYSTATE_COMPLETE
            Set doc = IE.Document
            GoTo login
        End If
        'ProgressForm.Hide
        'ProgressForm.Caption = "Progress"
        'ProgressForm.Label1.Visible = True
      Exit Do
    End If
  
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      IE.Visible = True  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
Sleep 50
Set doc = IE.Document
Loop Until Not (doc.getElementById("template-dropdown") Is Nothing)

For Each div In doc.getElementsByTagName("div")
    If div.innerText = "Create Now" Then
        div.Click
    End If
Next div

doc.getElementById("ReportForm").Children(0).Children(0).Children(0).Children(0).Children(doc.getElementById("ReportForm").Children(0).Children(0).Children(0).Children(0).Children.Length - 1).Children(1).Children(4).Click
Sleep 2000
MsgBox "Save NoA, then click to ok to continue"
'ProgressForm.Label1.Visible = False
'ProgressForm.Caption = "Action needed"
'ProgressForm.Label2.Caption = "Save NoA to continue"
'ProgressForm.Show
'DoEvents



Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value = Replace(Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value, " ", "")
'doc is generated with the name "Notice of Authorization1" & mmddyy
Dim StrFile As String
s2 = Format(Date, "yyyy-mm-dd") & "-" & Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value ' soo much simpler

x = 0
Do
    Sleep 500
    If Dir(downloadPath() & "\Notice of Authorization-" & s2 & ".docx") <> "" Then
        GoTo fileReady
    End If
    x = x + 1
Loop Until x = 10

Dim SaveDriveDir As String ', fName As String
Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    SaveDriveDir = CurDir
    mypath = downloadPath() 'CurDir ' Application.DefaultFilePath    'or use "C:\Data"
    ChDrive mypath
    ChDir mypath
    fName = Application.GetOpenFilename(filefilter:="Word Documents, *.docx", Title:="Unable to find " & downloadPath() & "\Notice of Authorization-" & s2 & ".docx. Please select correct file.")

    If fName = False Then
        MsgBox "No file selected. Manually add NoA to email. "
        Exit Sub
    End If
Set objWord = CreateObject("Word.Application")
Set objDoc = objWord.Documents.Open(fName)
fNamepdf = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - NoA.pdf" 'downloadPath() & "Notice of Authorization-" & s2 & ".pdf"
objDoc.ExportAsFixedFormat OutputFileName:=fNamepdf, ExportFormat:=wdExportFormatPDF
objDoc.Close
Call addDocItem(0, getFNameAndExt(fNamepdf), fNamepdf, "", "", "New file, not uploaded yet: ", "", "")
Set objDoc = Nothing
Set objWord = Nothing

Exit Sub

fileReady:
'ProgressForm.Hide
'ProgressForm.Caption = "Progress"
'ProgressForm.Label1.Visible = True

Set objWord = CreateObject("Word.Application")
Set objDoc = objWord.Documents.Open(downloadPath() & "\Notice of Authorization-" & s2 & ".docx")
fNamepdf = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - NoA.pdf" 'downloadPath() & "Notice of Authorization-" & s2 & ".pdf"
objDoc.ExportAsFixedFormat OutputFileName:=fNamepdf, ExportFormat:=wdExportFormatPDF
objDoc.Close
Call addDocItem(0, getFNameAndExt(fNamepdf), fNamepdf, "", "", "New file, not uploaded yet: ", "", "")
Set objDoc = Nothing
Set objWord = Nothing


End Sub
Sub Send_EPICNoA_email()

Dim OutApp As Object, OutMail As Object, signature As String, sigString As String, ECD As String, l As Long, CName As String, HTMLStandards As String, HTMLAssumptions As String
Dim s2 As String
    Call EPIC_NOA
    
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)

    On Error Resume Next

With ThisWorkbook
    With OutMail
    signature = Environ("appdata") & "\Microsoft\Signatures\"
    If Dir(signature, vbDirectory) <> vbNullString Then
        signature = signature & Dir$(signature & "*.htm")
    Else:
        signature = ""
    End If
    signature = CreateObject("Scripting.FileSystemObject").GetFile(signature).OpenAsTextStream(1, -2).ReadAll
    s2 = Replace(Replace(Worksheets("Needs Assessment").Cells(custNrow, 2).Value, "MR. ", ""), "MS. ", "")
    s2 = Mid(s2, 1, InStr(s2, " ") - 1)
    s2 = StrConv(s2, vbProperCase)
    On Error Resume Next
        .To = Worksheets("Needs Assessment").Cells(cemailrow, 2)
        .CC = ""
        .BCC = "NAAHLeMailTasks@ul.com"
        .Subject = "UL Project # " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - NofA Letter - " & Worksheets("Needs Assessment").Cells(Scoperow, 2).Value
'        .body = "Hello," & Chr(10) & Chr(10) & "We have received all necessary information and/or samples needed to proceed with this project " & _
'        "Please see attached for a letter containing important information, including our estimated completion date." & Chr(10) & Chr(10) & _
'        "If you have any questions, please contact me at any time." & signature
        .HTMLBody = "<BODY style=font-size:10pt;font-family:Arial>Dear " & s2 & ", <br> <br>The subject engineering evaluation has been completed and the Notice of Authorization is attached. If you have any questions, please contact me at any time. <br><br>" & signature
        .Display
        .Attachments.Add getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - NoA.pdf"
    End With
End With
    On Error GoTo 0

    Set OutMail = Nothing
    Set OutApp = Nothing


End Sub


Attribute VB_Name = "ModuleGANTT"
Sub CopyGantt3()
'
' Macro2 Macro
'

ActiveSheet.ChartObjects(1).Copy
    
    
End Sub
Sub CopyMilestones2()
'
' CopyMilestones2 Macro
'

'
    Range("A6:C8").Select
    
    Selection.Copy
End Sub


Sub Refresh1()
'
' Go Macro
'

'
    ActiveSheet.ChartObjects(1).Activate
    ActiveChart.Axes(xlValue).MinimumScale = Range("C3")
    ActiveChart.Axes(xlValue).MaximumScale = Range("C8")
    Range("A1").Select
End Sub

Sub copyRangeMacro()
'
' copyRangeMacro Macro
'

'
    Range(Selection, Selection.End(xlDown)).Select
    Selection.Copy
    Range("B8").Select
    ActiveSheet.Paste
End Sub



Attribute VB_Name = "ModuleImportProject"
Option Explicit


Public Sub GetData(SourceFile As Variant, SourceSheet As String, _
                   SourceRange As String, TargetRange As Range, Header As Boolean, UseHeaderRow As Boolean)
    Dim rsCon As Object
    Dim rsData As Object
    Dim szConnect As String
    Dim szSQL As String
    Dim lCount As Long
    
    ' Create the connection string.
    If Header = False Then
        If Val(Application.Version) < 12 Then
            szConnect = "Provider=Microsoft.Jet.OLEDB.4.0;" & _
                        "Data Source=" & SourceFile & ";" & _
                        "Extended Properties=""Excel 8.0;HDR=No"";"
        Else
            szConnect = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                        "Data Source=" & SourceFile & ";" & _
                        "Extended Properties=""Excel 12.0;HDR=No"";"
        End If
    Else
        If Val(Application.Version) < 12 Then
            szConnect = "Provider=Microsoft.Jet.OLEDB.4.0;" & _
                        "Data Source=" & SourceFile & ";" & _
                        "Extended Properties=""Excel 8.0;HDR=Yes"";"
        Else
            szConnect = "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                        "Data Source=" & SourceFile & ";" & _
                        "Extended Properties=""Excel 12.0;HDR=Yes"";"
        End If
    End If

    If SourceSheet = "" Then
        ' workbook level name
        szSQL = "SELECT * FROM " & SourceRange$ & ";"
    Else
        ' worksheet level name or range
        szSQL = "SELECT * FROM [" & SourceSheet$ & "$" & SourceRange$ & "];"
    End If

    On Error GoTo SomethingWrong

    Set rsCon = CreateObject("ADODB.Connection")
    Set rsData = CreateObject("ADODB.Recordset")

    rsCon.Open szConnect
    rsData.Open szSQL, rsCon, 0, 1, 1

    ' Check to make sure we received data and copy the data
    If Not rsData.EOF Then

        If Header = False Then
            TargetRange.Cells(1, 1).CopyFromRecordset rsData
        Else
            'Add the header cell in each column if the last argument is True
            If UseHeaderRow Then
                For lCount = 0 To rsData.Fields.Count - 1
                    TargetRange.Cells(1, 1 + lCount).Value = _
                    rsData.Fields(lCount).Name
                Next lCount
                TargetRange.Cells(2, 1).CopyFromRecordset rsData
            Else
                TargetRange.Cells(1, 1).CopyFromRecordset rsData
            End If
        End If

    Else
        MsgBox "No records returned from : " & SourceFile, vbCritical
    End If

    ' Clean up our Recordset object.
    rsData.Close
    Set rsData = Nothing
    rsCon.Close
    Set rsCon = Nothing
    Exit Sub

SomethingWrong:

    On Error GoTo 0

End Sub

Sub LookupProjectNum()

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, s3 As String
Dim pWebAddress As String, flexNum As String, page As Long
Dim IE As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object, div2 As Object, div3 As Object
Dim doc As HTMLDocument, doc2 As HTMLDocument, cEmail As String, cPhone As String
Dim elem As HTMLBaseElement, elem1 As Object
Dim x As Long, p As Object

Dim x3 As Long, x4 As Long
Dim pwebAddressx As String
Dim td2 As HTMLBaseElement
Dim lastAddress As String

Dim totalProjects As Long, y As Long, yy As Long, z As Long, y1 As Long
Dim x9 As HTMLBaseElement


If Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value = "" Then
    MsgBox "Add project number and try again"
    GoTo noProjectnum
End If

pWebAddress = "https://portal.ul.com/Search/Project?viewType=Default&EntityType=Project&Filters.ariaProjectNumber=" & Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value & "&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending"""

Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress

Dim sh
Dim eachIE
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Set doc = IE.Document

login:
If doc.getElementById("frmSearchTop") Is Nothing Then
    MsgBox "Log into Flex"
'    Sleep 200
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

x = 4
Do ' clear associations
    Worksheets("Associated Projects").Cells(x, 2).Value = ""
    Worksheets("Associated Projects").Cells(x, 3).Value = ""
    Worksheets("Associated Projects").Cells(x, 4).Value = ""
    x = x + 1
Loop Until Worksheets("Associated Projects").Cells(x, 2).Value = ""
AssociateForm.ListBox1.Clear
'Set IE = NewValidIE("https://portal.ul.com/Search/Project?viewType=Default&EntityType=Project&Filters.ariaOrderNumber=" & Worksheets("Needs Assessment").Cells(Partyrow(), 5).Value & "&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending")
page = 1

For Each p In doc.getElementsByTagName("p")
    If InStr(p.innerText, "There are no projects to display.") > 0 Then
        MsgBox "Add valid project number and try again"
        GoTo noProjectnum
    End If
Next p

'get total number of projects from this field
s1 = doc.getElementById("frmSearchTop").Children(1).Children(0).Children(0).innerText

s2 = Mid(s1, InStr(s1, "of") + 3, Len(s1) - InStr(s1, "of") - 2)
totalProjects = CInt(s2)

yy = 1 'yy is the current count (1 thru 10) for the page
For y = 1 To totalProjects
    ProgressForm.Label3.Caption = "Work on hand: project " & y & " of " & totalProjects
    If y = page * 10 + 1 Then
        page = page + 1
        IE.navigate (Replace(pWebAddress, "EntityType", "Query=&Paging.Page=" & page & "&EntityType"))
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Do
            Sleep 25
            Set doc = IE.Document
        Loop Until Not (doc.getElementById("body") Is Nothing)
        Set doc = IE.Document
        lastAddress = IE.LocationURL
        yy = 1
    End If
   
   'project name
    Worksheets("Associated Projects").Cells(3 + y, 2).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0).innerText
    'employee name
'    Worksheets("Associated Projects").Cells(x + y - 1, 3).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(3).Children(1).innerText
    'project link
    s1 = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0)
    Worksheets("Associated Projects").Cells(3 + y, 3).Value = "https" & Mid(s1, InStr(s1, "href") + 6, Len(s1) - InStr(s1, "href") - 5 - (InStr(s1, "title") - 3))
    AssociateForm.ListBox1.AddItem Worksheets("Associated Projects").Cells(3 + y, 2).Value
   
    s2 = Mid(Worksheets("Associated Projects").Cells(3 + y, 3).Value, InStrRev(Worksheets("Associated Projects").Cells(3 + y, 3).Value, "/") + 1, 32)     ' Len( Worksheets("Associated Projects").Cells(3 + y, 3).Value ) - (InStrRev( Worksheets("Associated Projects").Cells(3 + y, 3).Value , "/") + 1) + 1)
     Worksheets("Associated Projects").Cells(3 + y, 4).Value = s2  ' Mid(s2, 1, InStr(s2, "/") - 1)
    
    'project cost
'    Worksheets("Associated Projects").Cells(x + y - 1, 6).Value = "No order lines"
    lastAddress = IE.LocationURL
    yy = yy + 1
Next y
IE.Quit
Set IE = Nothing

AssociateForm.Show
noProjectnum:

End Sub


Sub Import_project_data()
    Dim SaveDriveDir As String, mypath As String
    Dim fName As Variant
    Dim lngLastRow As Long
    Dim r As Range
    Dim rng As Range
    Dim firstColor As Long
    Dim secondColor As Long
    Dim CCNLength As Long
    Dim CCN As String
    Dim n As Long
    Dim l As Long, x As Long, y As Long, z As Long
    Dim sigString As String, signature As String
    Dim pWebAddress As String
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    SaveDriveDir = CurDir
    mypath = Application.DefaultFilePath    'or use "C:\Data"
    ChDrive mypath
    ChDir mypath
    fName = Application.GetOpenFilename(filefilter:="Excel Files, *.xl*")

    If fName = False Then
        GoTo Cancelled:
    Else
        With Sheets("Flex Info").Range("A1:AZ2")
            .ClearContents
            .ClearFormats
        End With
        
        GetData fName, "Projects", "A1:AZ2", Sheets("Flex Info").Range("A1"), False, False
        
    End If
    
CCNLength = Len(Worksheets("Flex Info").Cells(2, 12))
CCN = Worksheets("Flex Info").Cells(2, 12)
If CCNLength > 4 Then
    If CCNLength = 5 Then
        Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value = Mid(CCN, 1, 5)
        Worksheets("Needs Assessment").Cells(CCNrow(), 3).Value = ""
    Else
            If Mid(CCN, 5, 1) = "/" Then
                Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value = Mid(CCN, 1, 4)
            End If
            If Mid(CCN, 5, 1) = "," Then
                Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value = Mid(CCN, 1, 4)
            End If
            If Mid(CCN, 5, 1) = "2" Or Mid(CCN, 5, 1) = "3" Then
                Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value = Mid(CCN, 1, 5)
'                Worksheets("Needs Assessment").Cells(CCNrow(), 3).Value = Mid(CCN, 1, 4) & (Mid(CCN, 5, 1) + 6)    'only if default is to add cUR
            End If
            If CCNLength > 5 Then
            l = 5
            Do
                If Mid(CCN, l, 2) = "/7" Or Mid(CCN, l, 2) = "/8" Then
                    Worksheets("Needs Assessment").Cells(CCNrow(), 3).Value = Mid(CCN, 1, 4) & Mid(CCN, l + 1, 1)
                End If
                l = l + 1
            Loop Until l = CCNLength
            End If
            
            If CCNLength > 8 Then
            l = 5
            Do
                If Mid(CCN, l, 5) = Mid(CCN, 1, 4) & "7" Or Mid(CCN, l, 5) = Mid(CCN, 1, 4) & "8" Then
                    Worksheets("Needs Assessment").Cells(CCNrow(), 3).Value = Mid(CCN, l, 5)
                End If
                l = l + 1
            Loop Until l = CCNLength - 3
            End If
    End If
Else
    Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value = CCN
    Worksheets("Needs Assessment").Cells(CCNrow(), 3).Value = "" ' Mid(CCN, 1, 4) & "7"  'only if default is to add cUL
End If
    
Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value = Worksheets("Flex Info").Cells(2, 19).Value
Worksheets("Flex Info").Cells(7, 2).Value = Environ("username")
    
    
If Worksheets("Needs Assessment").Cells(48, 2) <> "" Then
    GoTo ToFar
End If

sigString = Environ("appdata") & "\Microsoft\Signatures\" & Dir(Environ("appdata") & "\Microsoft\Signatures\*.txt")

If Dir(sigString) <> "" Then
    signature = GetSig(sigString)
Else
    signature = ""
End If
    
If signature <> "" Then
    x = 1
    y = 1
    l = 0
    Do
    If Mid(signature, x, 1) = "," Then
        y = x + 2
        GoTo sincerely
    End If
    If Mid(signature, x, 1) = vbLf Then
        y = 1
        GoTo sincerely
    End If
    x = x + 1
    Loop Until x = Len(signature)
sincerely:
    
    Do
'    If Mid(signature, y, 1) <> vbLf Then
    If Asc(Mid(signature, y, 1)) >= Asc("A") And Asc(Mid(signature, y, 1)) <= Asc("z") Then
        z = y
        Do
        z = z + 1
        If z = Len(signature) Then
            GoTo endsig
        End If
        Loop Until Mid(signature, z, 1) = vbLf
endsig:
        Worksheets("Needs Assessment").Cells(48 + l, 2).Value = Mid(signature, y, z - y)
        y = z
        l = l + 1
        If l = 4 Then
            If Mid(Worksheets("Needs Assessment").Cells(48 + l - 1, 2).Value, 1, 2) <> "T:" Then
'                Worksheets("Needs Assessment").Cells(48 + l - 1, 2).Value , 1, 2 = Mid(Worksheets("Needs Assessment").Cells(48 + l - 1, 2).Value, 3, Len(Worksheets("Needs Assessment").Cells(48 + l - 1, 2).Value) - 2)
                l = l - 1
'                MsgBox (Mid(Worksheets("Needs Assessment").Cells(48 + l - 1, 2).Value, 1, 2))
            'Else
            'GoTo ToFar
            End If
        End If

        If l = 5 Then
            n = 1
            Do
                If Mid(Worksheets("Needs Assessment").Cells(48 + l - 1, 2).Value, n, 1) = "@" Then
                    GoTo isEmail
                End If
            n = n + 1
            Loop Until n = Len(Worksheets("Needs Assessment").Cells(48 + l - 1, 2).Value)
            l = l - 1
isEmail:

        End If
        If l = 5 Then
            GoTo ToFar
        End If


    End If
    y = y + 1
'        MsgBox (y & " - " & Len(signature))
    Loop Until y >= Len(signature)
End If
    
ToFar:
    
    
If Worksheets("Flex Info").Cells(2, 50).Value <> "" Then
    Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value = Worksheets("Flex Info").Cells(2, 50).Value
End If
    
On Error GoTo errHandler:

    ChDrive SaveDriveDir
    ChDir SaveDriveDir
       
Sheets("Needs Assessment").Select
'MsgBox "Project Data Imported"
    
    
Dim vol As String
If Worksheets("Needs Assessment").Cells(Filerow(), 5).Value = "" Then
    vol = InputBox("Enter volume number: ")
    Worksheets("Needs Assessment").Cells(Filerow(), 5).Value = vol
End If
    
Dim IE As InternetExplorer
Set IE = New InternetExplorer
'IE.Visible = True
IE.navigate "http://psservices.ul.com/ePro/fvsearch.aspx?file=" & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "&volume=" & Worksheets("Needs Assessment").Cells(Filerow(), 5).Value
pWebAddress = "http://psservices.ul.com/ePro/fvsearch.aspx?file=" & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "&volume=" & Worksheets("Needs Assessment").Cells(Filerow(), 5).Value

Dim sh
Dim eachIE
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Dim tbl As Object, td As Object
Dim doc As HTMLDocument
Set doc = IE.Document

Set tbl = IE.Document.getElementById("ListeeInfo")
        For Each td In tbl.getElementsByTagName("td")
            If td.innerText = "Company Name" Then
                Worksheets("Needs Assessment").Cells(compNrow(), 2).Value = td.NextSibling.innerText
            ElseIf td.innerText = "Address" Then
                Worksheets("Needs Assessment").Cells(compA1row(), 2).Value = td.NextSibling.innerText
            ElseIf td.innerText = "City/State/Province/Country/Zip" Then
                Worksheets("Needs Assessment").Cells(compA2row(), 2).Value = td.NextSibling.innerText
            ElseIf td.innerText = "Subscriber Number" Then
                Worksheets("Needs Assessment").Cells(Filerow(), 8).Value = Mid(td.NextSibling.innerText, 1, 6) & "-" & Mid(td.NextSibling.innerText, 7, 3)
            ElseIf td.innerText = "Party Site Number" Then
       
            End If

        Next
    
    IE.Quit
    Set IE = Nothing

    
    
    
    
Cancelled:
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
Exit Sub

errHandler:
    MsgBox "There is an error"

End Sub


Attribute VB_Name = "ModuleLinks"
'#If Win32 Then

Option Explicit
Private pWebAddress As String
Public Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As LongPtr, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As LongPtr
'#End If

Public Sub NewShell(cmdLine As String, lngWindowHndl As LongPtr)
    ShellExecute lngWindowHndl, "open", cmdLine, "", "", 1
End Sub

Sub BuildFlexLink()

Dim s1 As String, x As Long

s1 = "https://portal.ul.com/Search/Project?EntityType=Project"
x = 10
If Worksheets("Flex Search Links").Cells(x, 2).Value <> "" Then
    Do
        s1 = s1 & "&Filters.aria" & Worksheets("Flex Search Links").Cells(x, 2).Value & "=" & Worksheets("Flex Search Links").Cells(x, 3).Value
        x = x + 1
    Loop Until Worksheets("Flex Search Links").Cells(x, 2).Value = ""
End If
s1 = s1 & "&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending"
Worksheets("Flex Search Links").Cells(6, 2).Value = s1
End Sub

Sub openFlexSearchLink()

    Call NewShell(Worksheets("Flex Search Links").Cells(6, 2).Value, 3)

End Sub


Public Sub DAP_MTL_Link()
    
If Worksheets("Flex Info").Cells(23, 2).Value = "" Then
    Call flexURL
End If
    Call NewShell(Worksheets("Flex Info").Cells(23, 2).Value, 3)

End Sub
Public Sub Aurora_Link()

If Worksheets("Flex Info").Cells(24, 2).Value = "" Then
    Call flexURL
End If
    Call NewShell(Worksheets("Flex Info").Cells(24, 2).Value, 3)
    Exit Sub
    
    Dim s1 As String, s2 As String, pWebAddress As String
    
    If Worksheets("Needs Assessment").Cells(compNrow(), 2).Value = "" Or Worksheets("Needs Assessment").Cells(custNrow(), 2).Value = "" Or Worksheets("Needs Assessment").Cells(Partyrow(), 2).Value = "" Or Worksheets("Needs Assessment").Cells(Partyrow(), 3).Value = "" Or Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value = "" Or Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = "" Then
        Call flexURL
        If Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = "" Then
            Exit Sub
        End If
    End If
    s1 = Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value
    s2 = Mid(s1, 1, 8) & "-" & Mid(s1, 9, 4) & "-" & Mid(s1, 13, 4) & "-" & Mid(s1, 17, 4) & "-" & Mid(s1, 21, 12)
    pWebAddress = "http://awi.ul.com/?uid=" & Environ("username") & "&sid=250&fid=" & s2 & "&oon=" & Replace(Worksheets("Needs Assessment").Cells(Partyrow(), 5).Value, ".", "%2E") & "&opn=" & Replace(Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value, ".", "%2E") & "&psn=" & Worksheets("Needs Assessment").Cells(Partyrow(), 2).Value & "&cuscom=" & Replace(Worksheets("Needs Assessment").Cells(compNrow(), 2).Value, " ", "+") & "&cuscon=" & Replace(Worksheets("Needs Assessment").Cells(custNrow(), 2).Value, " ", "+")
    Call NewShell(pWebAddress, 3)
    
End Sub
Public Sub Add_Standards3()
    
    UserForm7.TextBox1.Text = Replace(Worksheets("Needs Assessment").Cells(Standardsrow(), 2).Value, vbLf & vbLf, vbLf)
    UserForm7.Top = Application.Top
    UserForm7.Left = Application.Left
    UserForm7.Show
    
    pWebAddress = "http://standardshub.ul.com/standards"
    Call NewShell(pWebAddress, 3)


End Sub
Public Sub manageAurora()
    

End Sub


Public Sub DAP_MTL_Link_SR()
    pWebAddress = Worksheets("Flex Info").Cells(17, 2).Value
    Call NewShell(pWebAddress, 3)
End Sub


Sub New_LPM()
    Call NewShell("Notes://USNBKM501/LAB\LPM.nsf/", 3)
End Sub


Sub LIS_Link()
    
Dim s1 As String, s2 As String, x1 As Long, x2 As Long, s3 As String
Dim pWebAddress As String, sh As Object, eachIE As Object

If Worksheets("Needs Assessment").Cells(Filerow(), 2) = "" Then
    MsgBox ("Add file number")
    GoTo errorEnd
End If
pWebAddress = "http://lis.ul.com/cgi-bin/XYV/cgifind.new/LISINT242/1FRAME/srchres.html?collection=/data3/verity_collections/lisint242&vdkhome=/data3/verity_sw_rev24/common&SORT_BY=textlines:asc%2cccnshorttitle:asc&query=(" & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & ")+%3CIN%3E+File_Number"

Dim IE As InternetExplorer
Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Dim tbl As Object, td As Object, fld As Object
Dim doc As HTMLDocument
Set doc = IE.Document
''Debug.Print statement

LISForm.ListBox1.Clear
Dim x As Long
x = 0
For Each tbl In doc.getElementsByTagName("TABLE")
    For Each td In tbl.getElementsByTagName("td")
        If td.innerText = "No Matches Were Found" Then
            GoTo modelCards
        End If
    Next td
        'only gets to this point if there are LIS cards to grab
    For Each td In tbl.getElementsByTagName("td")
        x1 = InStr(td.innerText, "." & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value)
        s3 = td.innerText
        If x1 > 0 Then
            s3 = Mid(s3, x1 + 1, Len(s3) - x1 - 1)
        End If
        If InStr(LCase(Worksheets("Needs Assessment").Cells(Filerow(), 2).Value), LCase(s3)) > 0 And Len(LCase(s3)) > 3 Then
            s1 = td.innerHTML
            x1 = InStr(s1, "href=") + 6
            x2 = InStrRev(s1, "sequence=1") + 10
            s2 = Replace(Mid(td.innerHTML, x1, x2 - x1), "amp;", "")
             LISForm.ListBox1.AddItem
             LISForm.ListBox1.List(x, 0) = td.innerText
             LISForm.ListBox1.List(x, 1) = Replace(s2, "amp;", "")
             x = x + 1
        End If
    Next td
Next tbl

modelCards:

IE.navigate "http://lis.ul.com/cgi-bin/XYV/template/LISINT242/1FRAME/gensrch.html?searchtype=ccn"
pWebAddress = "http://lis.ul.com/cgi-bin/XYV/template/LISINT242/1FRAME/gensrch.html?searchtype=ccn"
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Set doc = IE.Document
For Each tbl In doc.getElementsByTagName("TABLE")
    For Each td In tbl.getElementsByTagName("td")
        
        s1 = td.innerHTML
        If InStr(s1, "CCNMODEL") > 0 Then
            td.getElementsByTagName("input")(1).Click
        End If
        If InStr(s1, "CCN") > 0 And InStr(s1, "CCNMODEL") = 0 And InStr(s1, "CCNtitle") = 0 Then
            If Not (td.getElementsByTagName("input")(0) Is Nothing) Then
                td.getElementsByTagName("input")(0).Value = Mid(Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value, 1, 4) & "*"
            End If
        End If
        If InStr(s1, "submit") > 0 Then
            td.getElementsByTagName("input")(0).Click
            Do
                DoEvents
            Loop Until IE.readyState = READYSTATE_COMPLETE
        End If
    Next td
Next tbl
Sleep 200
Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
For Each tbl In doc.getElementsByTagName("TABLE")
    For Each td In tbl.getElementsByTagName("td")
        If InStr(td.innerText, "UL L L C") > 0 Then
            s1 = td.NextSibling.NextSibling.innerHTML
            x1 = InStr(s1, "href=") + 6
            x2 = InStrRev(s1, "sequence=1") + 10
            s2 = Replace(Mid(td.NextSibling.NextSibling.innerHTML, x1, x2 - x1), "amp;", "")
             LISForm.ListBox1.AddItem
             LISForm.ListBox1.List(x, 0) = td.NextSibling.NextSibling.innerText
             LISForm.ListBox1.List(x, 1) = s2
             x = x + 1
        End If
    Next td
Next tbl
    
    IE.Quit
    Set IE = Nothing

startForm:
    
LISForm.Show
   
errorEnd:
   
End Sub

Attribute VB_Name = "ModuleMainSheetFunctions"
Sub cleanNames()
x = 1
Do
    If InStr(ActiveWorkbook.Names(x).Value, "#REF") > 0 Or InStr(ActiveWorkbook.Names(x).Value, "https://ul.sharepoint.com") > 0 Or InStr(ActiveWorkbook.Names(x).Value, "Z:\") > 0 Or InStr(ActiveWorkbook.Names(x).Value, "C:\") > 0 Then
        Debug.Print "Removing " & ActiveWorkbook.Names(x).Value
        ActiveWorkbook.Names(x).Delete
        x = x - 1
    End If
    x = x + 1
Loop Until x = ActiveWorkbook.Names.Count

End Sub
Sub cleanBadNames()
x = 1
Do
    If InStr(ActiveWorkbook.Names(x).Value, "#REF") > 0 Then
        Debug.Print "Removing " & ActiveWorkbook.Names(x).Value
        ActiveWorkbook.Names(x).Delete
        x = x - 1
    End If
    x = x + 1
Loop Until x = ActiveWorkbook.Names.Count

End Sub
Sub autoSize()
    Call autoSizeRng(Range(Worksheets("Needs Assessment").Cells(26, 2), Worksheets("Needs Assessment").Cells(26, 7)))
    Exit Sub
    
    
    With Range(Worksheets("Scratch").Cells(100, 19), Worksheets("Scratch").Cells(100, 19))
        .ColumnWidth = Range(Worksheets("Needs Assessment").Cells(26, 2), Worksheets("Needs Assessment").Cells(26, 7)).Width / 8.35
    End With
    Worksheets("Scratch").Cells(100, 19).Value = Range(Worksheets("Needs Assessment").Cells(26, 2), Worksheets("Needs Assessment").Cells(26, 7)).Value
    Range(Worksheets("Needs Assessment").Cells(26, 2), Worksheets("Needs Assessment").Cells(26, 7)).RowHeight = Range(Worksheets("Scratch").Cells(100, 19), Worksheets("Scratch").Cells(100, 19)).Height '/ 8.35
    'Range(Worksheets("Needs Assessment").Cells(26, 2), Worksheets("Needs Assessment").Cells(26, 7)).EntireRow.AutoFit
    
End Sub
Sub autoSizeRng(rng As Range)
    
    With Range(Worksheets("Scratch").Cells(100, 19), Worksheets("Scratch").Cells(100, 19))
        .ColumnWidth = rng.Width / 8.35
        Debug.Print .Width
        Debug.Print rng.Width / 8.35
    End With
    Worksheets("Scratch").Cells(100, 19).Font.size = rng.Font.size
    Worksheets("Scratch").Cells(100, 19).Value = rng.Value
    rng.RowHeight = Range(Worksheets("Scratch").Cells(100, 19), Worksheets("Scratch").Cells(100, 19)).Height
    
End Sub
Sub ItemsReqBoxChange()
    Worksheets("Needs Assessment").Cells(ItemsReqrow, 2).Value = Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text
End Sub
Sub SampleBoxChange()
    Worksheets("Needs Assessment").Cells(Samplerow, 2).Value = Worksheets("Needs Assessment").Shapes.Item("TextBox 2").TextFrame.Characters.Text
End Sub

Sub showAllReferences()
Set VBAEditor = Application.VBE
Set vbProj = ActiveWorkbook.VBProject
errorMsg = ""
msg = ""
For Each chkRef In vbProj.References
    msg = msg & ", " & chkRef.Name & " : " & chkRef.FullPath & vbLf
Next
'MsgBox msg
Debug.Print msg
End Sub

Sub showAllSheets()

Dim x As Long
For x = 1 To ActiveWorkbook.Sheets.Count
    Sheets(x).Visible = True
Next x

End Sub
Sub showAllNASheets()

Dim x As Long, y As Long
y = 0
For x = 1 To ActiveWorkbook.Sheets.Count
    If Sheets(x).Name = "Needs Assessment" Then
        y = 1
    End If
    If y = 1 Then
        Sheets(x).Visible = True
    End If
Next x

End Sub
Sub gotoProject()
    
    Dim pWebAddress As String
    
    If Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value = "" Then
        MsgBox "Add Flex URL"
        Exit Sub
    End If
    pWebAddress = Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value
    Call NewShell(pWebAddress, 3)

End Sub

Sub refreshAssump()

    Dim x As Long, y As Long, z As Long, temp As String, BU As Long, BU2 As Long
    Dim tabNum As Long, tabNum2 As Long, totalTabs As Long, subsetstr As String

'y = Worksheets("Assumptions").Cells(1, 2).Value
If AssumptionForm.ComboBox1.ListCount < 1 Then
AssumptionForm.ComboBox1.Clear
x = 0
Do
    AssumptionForm.ComboBox1.AddItem Worksheets("Assumptions").Cells(8, 2 + 4 * x).Value
    x = x + 1
Loop Until Worksheets("Assumptions").Cells(8, 2 + 4 * x).Value = ""
End If
'Worksheets("Assumptions").Cells(1, 2).Value = y
AssumptionForm.ComboBox1.ListIndex = Worksheets("Assumptions").Cells(1, 2).Value
'combobox in form should have BU's as available inputs
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
'If AssumptionForm.ComboBox1.Value = "PM" Then
    AssumptionForm.Label5.Visible = True
    AssumptionForm.ComboBox2.Visible = True
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    AssumptionForm.Label5.Visible = False
    AssumptionForm.ComboBox2.Visible = False
    subsetstr = ""
End If

If AssumptionForm.ComboBox2.ListCount < 1 Or AssumptionForm.ComboBox2.ListIndex < 0 Then
AssumptionForm.ComboBox2.Clear
x = 0
Do
    AssumptionForm.ComboBox2.AddItem Worksheets(subsetstr & "Assumptions").Cells(8, 2 + 4 * x).Value
    x = x + 1
Loop Until Worksheets(subsetstr & "Assumptions").Cells(8, 2 + 4 * x).Value = ""
End If


'Worksheets("Assumptions").Cells(1, 2).Value = y
AssumptionForm.ComboBox2.ListIndex = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value
'BU2 = Worksheets("PM Assumptions").Cells(1, 2).Value

BU = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value
'check to see if the tabs in tabstrip need to be updated.
x = 1
If Worksheets(subsetstr & "Assumptions").Cells(10 + x, 3 + 4 * BU).Value <> "" Then
Do
    x = x + 1
Loop Until Worksheets(subsetstr & "Assumptions").Cells(10 + x, 3 + 4 * BU).Value = ""
End If

totalTabs = Application.WorksheetFunction.RoundUp(x / 7, 0) ''' change the divider based on the number of available options per tab

If AssumptionForm.TabStrip1.Tabs.Count <> totalTabs Then
    y = AssumptionForm.TabStrip1.Tabs.Count
    If y <> 1 Then
    Do
        AssumptionForm.TabStrip1.Tabs.Remove (y - 1)
        y = y - 1
    Loop Until y = 1
    End If
    For y = 1 To totalTabs - 1
        AssumptionForm.TabStrip1.Tabs.Add
        AssumptionForm.TabStrip1.Tabs(y).Caption = y * 7 + 1 & " to " & (y + 1) * 7
    Next y
End If

'update tabstrip contents
For z = 1 To 7 'only 5 entries in userform for entering parameters
    tabNum = AssumptionForm.TabStrip1.Value
    Debug.Print "z = " & z & " -> " & 10 + z + 7 * tabNum
    AssumptionForm.Controls.Item("Checkbox" & z).Value = Worksheets(subsetstr & "Assumptions").Cells(10 + z + 7 * tabNum, 2 + 4 * BU).Value
'    AssumptionForm.Controls.Item("Checkbox" & z).Caption = Worksheets(subsetStr & "Assumptions").Cells(10 + z + 7 * tabNum, 3 + 4 * BU).Value
    AssumptionForm.Controls.Item("Textbox1" & z).Text = Worksheets(subsetstr & "Assumptions").Cells(10 + z + 7 * tabNum, 3 + 4 * BU).Value
'    If AssumptionForm.Controls.Item("Checkbox" & z).Caption = "" Then
    If AssumptionForm.Controls.Item("Textbox1" & z).Text = "" Then
        AssumptionForm.Controls.Item("Checkbox" & z).Visible = False
        AssumptionForm.Controls.Item("Textbox1" & z).Visible = False
    Else
        AssumptionForm.Controls.Item("Checkbox" & z).Visible = True
        AssumptionForm.Controls.Item("Textbox1" & z).Visible = True
    End If
Next z
'tabstrip should be updated to show current tabs info

Dim size As Long
    AssumptionForm.TextBox1.Text = ""
x = 1
Do
    If Worksheets(subsetstr & "Assumptions").Cells(10 + x, 2 + 4 * BU).Value = True Then
        AssumptionForm.TextBox1.Text = AssumptionForm.TextBox1.Text & Worksheets(subsetstr & "Assumptions").Cells(10 + x, 3 + 4 * BU).Value & vbLf
    End If
    x = x + 1
Loop Until Worksheets(subsetstr & "Assumptions").Cells(10 + x, 3 + 4 * BU).Value = ""
    
    If AssumptionForm.CheckBox101.Value = True Then
        AssumptionForm.TextBox1.Text = AssumptionForm.TextBox1.Text & "- other: " & AssumptionForm.TextBox3.Text & vbLf
    End If
        AssumptionForm.Height = 525 * CDbl(AssumptionForm.TextBox4.Text) / 100
        AssumptionForm.Width = 825 * CDbl(AssumptionForm.TextBox4.Text) / 100
        AssumptionForm.Zoom = CDbl(AssumptionForm.TextBox4.Text)


End Sub


Sub TestCust()

Dim IE As InternetExplorer
Set IE = New InternetExplorer
'IE.Visible = True
IE.navigate "http://psservices.ul.com/ePro/fvsearch.aspx?file=" & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "&volume=" & Worksheets("Needs Assessment").Cells(Filerow(), 5).Value
Dim pWebAddress As String
pWebAddress = "http://psservices.ul.com/ePro/fvsearch.aspx?file=" & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "&volume=" & Worksheets("Needs Assessment").Cells(Filerow(), 5).Value

While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend



Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Dim tbl As Object, td As Object
Dim doc As HTMLDocument
Set doc = IE.Document

Set tbl = IE.Document.getElementById("ListeeInfo")
        For Each td In tbl.getElementsByTagName("td")
            If td.innerText = "Company Name" Then
                Worksheets("Needs Assessment").Cells(compNrow(), 2).Value = td.NextSibling.innerText
            ElseIf td.innerText = "Address" Then
                Worksheets("Needs Assessment").Cells(compA1row(), 2).Value = td.NextSibling.innerText
            ElseIf td.innerText = "City/State/Province/Country/Zip" Then
                Worksheets("Needs Assessment").Cells(compA2row(), 2).Value = td.NextSibling.innerText
            ElseIf td.innerText = "Subscriber Number" Then
                Worksheets("Needs Assessment").Cells(Filerow(), 8).Value = Mid(td.NextSibling.innerText, 1, 6) & "-" & Mid(td.NextSibling.innerText, 7, 3)
            ElseIf td.innerText = "Party Site Number" Then
       
            End If

        Next
    
    IE.Quit
    Set IE = Nothing

End Sub
Sub DropDown27_Change()

    If Worksheets("Scratch").Cells(7, 3).Value = "2" Or Worksheets("Scratch").Cells(7, 3).Value = "3" Then
        Worksheets("Needs Assessment").Cells(TestNoTestrow(), 2).Value = "Test"
    End If
    
    If Worksheets("Scratch").Cells(7, 3).Value = "4" Or Worksheets("Scratch").Cells(7, 3).Value = "5" Then
        Worksheets("Needs Assessment").Cells(TestNoTestrow(), 2).Value = "No Test"
    End If
End Sub
Sub asdf1234()
Debug.Print Environ("username")
End Sub



Sub Add_Standards2()

Dim sText As String, sTemp As String, sTempLength As Integer
Dim InvertSheet As String, InvertRange As Range, FormatRange As Range
Dim endColumn As Long, endRow As Long, sTempLong As Long, sTempLongEnd As Long
Dim interval As Long, nFifteen As Long, nRowCount As Long
Dim maxCycles As Long, nColCount As Long, i As Long

StandardSheet = "CCN-Standard"
With ThisWorkbook
    Set StandardRange = Worksheets(StandardSheet).Cells(1, 2)
End With
endColumn = 1  ' StandardRange.End(xlToRight).Column
'endRow = 100
endRow = StandardRange.End(xlDown).row

With ThisWorkbook
    Set StandardRange = Worksheets(StandardSheet).Cells(1, 1)
End With

SelectStandardsForm.ListBox1.Clear
'SelectStandardsForm.ListBox1.ColumnWidth = 8
i = 0

nRowCount = 1
'sTemp = ""
Do
    sTemp = ""
    nRowCount = nRowCount + 1
    If StandardRange.Cells(nRowCount, 1) <> "" Then
        sTemp = sTemp & StandardRange.Cells(nRowCount, 3) & " - " & StandardRange.Cells(nRowCount, 4) & " - " & StandardRange.Cells(nRowCount, 5) & " ed. - "
        If StandardRange.Cells(nRowCount, 7) = "" Then
            sTemp = sTemp & "issued " & StandardRange.Cells(nRowCount, 6)
        Else
            sTemp = sTemp & "revised " & StandardRange.Cells(nRowCount, 7)
        End If
        
        If StandardRange.Cells(nRowCount, 8) <> "" Then
'        Else
            sTemp = sTemp & " - Reaffirmed " & StandardRange.Cells(nRowCount, 8)
        End If
        
'        sTemp = sTemp & vbCrLf
        SelectStandardsForm.ListBox1.AddItem
        SelectStandardsForm.ListBox1.List(i, 0) = StandardRange.Cells(nRowCount, 2)
        SelectStandardsForm.ListBox1.List(i, 1) = sTemp
        i = i + 1
    End If
Loop Until nRowCount = endRow

Dim x As Long, y As Long, z As Long

z = 0
x = 0
If SelectStandardsForm.ListBox1.ListCount >= 2 Then
Do
    y = x + 1
    Do
        If SelectStandardsForm.ListBox1.List(x, 0) = SelectStandardsForm.ListBox1.List(y, 0) Then
            z = 1
        End If
        y = y + 1
    Loop Until y >= SelectStandardsForm.ListBox1.ListCount - 1
    x = x + 1
Loop Until x >= SelectStandardsForm.ListBox1.ListCount - 2
End If

If z = 0 Then
GoTo NoMultiSelect
End If

SelectStandardsForm.ListBox1.ColumnWidths = "40"
x = 0
Do
        SelectStandardsForm.ListBox1.Selected(x) = True
    x = x + 1
Loop Until x = SelectStandardsForm.ListBox1.ListCount
SelectStandardsForm.Show



GoTo daEnd

NoMultiSelect:
x = 0
sTemp = ""
If SelectStandardsForm.ListBox1.ListCount > 0 Then
Do
    If x = 0 Then
        sTemp = SelectStandardsForm.ListBox1.List(x, 1)
    Else
        sTemp = sTemp & vbCrLf & SelectStandardsForm.ListBox1.List(x, 1)
    End If
    x = x + 1
Loop Until x >= SelectStandardsForm.ListBox1.ListCount
End If
Worksheets("Needs Assessment").Cells(Standardsrow(), 2).Value = sTemp

daEnd:
End Sub





Sub Copy_prev()
    Dim SaveDriveDir As String, mypath As String
    Dim fName As Variant
    Dim lngLastRow As Long
    Dim r As Range
    Dim rng As Range
    Dim firstColor As Long
    Dim secondColor As Long
    Dim CCNLength As Long
    Dim CCN As String
    Dim n As Long
    Dim l As Long, x As Long, y As Long, x2 As Long, x3 As Long, x4 As Long
    Dim currentFile As String, s1 As String, s2 As String, s3 As String, fName1 As String, fName2, s4 As String
    Dim wb As Workbook
    Dim sx(63) As String
        
    currentFile = ActiveWorkbook.Name
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    SaveDriveDir = CurDir
    mypath = CurDir ' Application.DefaultFilePath    'or use "C:\Data"
    ChDrive mypath
    ChDir mypath
    fName = Application.GetOpenFilename(filefilter:="Excel Files, *.xl*", Title:="Choose previous tool to import")

    If fName = False Then
        GoTo Cancelled:
    End If
    'Debug.Print fName
    'Debug.Print currentFile
    fName1 = Mid(fName, InStrRev(fName, "\") + 1, Len(fName) - InStrRev(fName, "\"))
    
    'Call initializeConst
    
    If fName = ActiveWorkbook.Name Then
        MsgBox "Filename cannot be the same as current file"
        GoTo Cancelled:
    Else
        
        Set wb = Workbooks.Open(fName)
        Call initializeConst
        sx(0) = Worksheets("Needs Assessment").Cells(CCNrow, 2).Value
        sx(1) = Worksheets("Needs Assessment").Cells(compNrow, 2).Value
        sx(2) = Worksheets("Needs Assessment").Cells(compA1row, 2).Value
        sx(3) = Worksheets("Needs Assessment").Cells(compA2row, 2).Value
        sx(4) = Worksheets("Needs Assessment").Cells(compA2row + 1, 2).Value
        sx(5) = Worksheets("Needs Assessment").Cells(compA2row + 1, 5).Value
        sx(6) = Worksheets("Needs Assessment").Cells(custNrow, 2).Value
        sx(7) = Worksheets("Needs Assessment").Cells(custNrow, 5).Value
        sx(8) = Worksheets("Needs Assessment").Cells(cemailrow, 2).Value
        sx(9) = Worksheets("Needs Assessment").Cells(cemailrow, 5).Value
        sx(10) = Worksheets("Needs Assessment").Cells(cphonerow, 2).Value
        sx(11) = Worksheets("Needs Assessment").Cells(Quoterow, 2).Value
        sx(12) = Worksheets("Needs Assessment").Cells(Quoterow, 5).Value
        sx(13) = Worksheets("Needs Assessment").Cells(Projectrow, 2).Value
        sx(14) = Worksheets("Needs Assessment").Cells(Projectrow, 5).Value
        sx(15) = Worksheets("Needs Assessment").Cells(Filerow, 2).Value
        sx(16) = Worksheets("Needs Assessment").Cells(Filerow, 5).Value
        sx(17) = Worksheets("Needs Assessment").Cells(Scoperow, 2).Value
        sx(18) = Worksheets("Needs Assessment").Cells(Standardsrow, 2).Value
        sx(19) = Worksheets("Needs Assessment").Cells(ProjectTyperow, 2).Value
        sx(20) = Worksheets("Needs Assessment").Cells(TestNoTestrow, 2).Value
        sx(21) = Worksheets("Needs Assessment").Cells(DAProw, 2).Value
        sx(22) = Worksheets("Needs Assessment").Cells(Assumptionsrow, 2).Value
        sx(23) = Worksheets("Needs Assessment").Cells(ItemsReqrow, 2).Value
        sx(24) = Worksheets("Needs Assessment").Cells(Samplerow, 2).Value
        sx(25) = Worksheets("Needs Assessment").Cells(TestPlanrow, 2).Value
        sx(26) = Worksheets("Needs Assessment").Cells(hNamerow, 2).Value
        sx(27) = Worksheets("Needs Assessment").Cells(hemailrow, 2).Value
        sx(28) = Worksheets("Needs Assessment").Cells(hTitlerow, 2).Value
        sx(29) = Worksheets("Needs Assessment").Cells(hDepartmentrow, 2).Value
        sx(30) = Worksheets("Needs Assessment").Cells(hIDrow, 2).Value
        sx(31) = Worksheets("Needs Assessment").Cells(rNamerow, 2).Value
        sx(32) = Worksheets("Needs Assessment").Cells(remailrow, 2).Value
        sx(33) = Worksheets("Needs Assessment").Cells(rTitlerow, 2).Value
        sx(34) = Worksheets("Needs Assessment").Cells(rDepartmentrow, 2).Value
        sx(35) = Worksheets("Needs Assessment").Cells(rIDrow, 2).Value
        sx(36) = Worksheets("Needs Assessment").Cells(LISrow, 2).Value
        Workbooks(currentFile).Activate
        Call initializeConst
        Worksheets("Needs Assessment").Cells(CCNrow, 2).Value = sx(0)
        Worksheets("Needs Assessment").Cells(compNrow, 2).Value = sx(1)
        Worksheets("Needs Assessment").Cells(compA1row, 2).Value = sx(2)
        Worksheets("Needs Assessment").Cells(compA2row, 2).Value = sx(3)
        Worksheets("Needs Assessment").Cells(compA2row + 1, 2).Value = sx(4)
        Worksheets("Needs Assessment").Cells(compA2row + 1, 5).Value = sx(5)
        Worksheets("Needs Assessment").Cells(custNrow, 2).Value = sx(6)
        Worksheets("Needs Assessment").Cells(custNrow, 5).Value = sx(7)
        Worksheets("Needs Assessment").Cells(cemailrow, 2).Value = sx(8)
        Worksheets("Needs Assessment").Cells(cemailrow, 5).Value = sx(9)
        Worksheets("Needs Assessment").Cells(cphonerow, 2).Value = sx(10)
        Worksheets("Needs Assessment").Cells(Quoterow, 2).Value = sx(11)
        Worksheets("Needs Assessment").Cells(Quoterow, 5).Value = sx(12)
        Worksheets("Needs Assessment").Cells(Projectrow, 2).Value = sx(13)
        Worksheets("Needs Assessment").Cells(Projectrow, 5).Value = sx(14)
        Worksheets("Needs Assessment").Cells(Filerow, 2).Value = sx(15)
        Worksheets("Needs Assessment").Cells(Filerow, 5).Value = sx(16)
        Worksheets("Needs Assessment").Cells(Scoperow, 2).Value = sx(17)
        Worksheets("Needs Assessment").Cells(Standardsrow, 2).Value = sx(18)
        Worksheets("Needs Assessment").Cells(ProjectTyperow, 2).Value = sx(19)
        Worksheets("Needs Assessment").Cells(TestNoTestrow, 2).Value = sx(20)
        Worksheets("Needs Assessment").Cells(DAProw, 2).Value = sx(21)
        Worksheets("Needs Assessment").Cells(Assumptionsrow, 2).Value = sx(22)
        Worksheets("Needs Assessment").Cells(ItemsReqrow, 2).Value = sx(23)
        Worksheets("Needs Assessment").Cells(Samplerow, 2).Value = sx(24)
        Worksheets("Needs Assessment").Cells(TestPlanrow, 2).Value = sx(25)
        Worksheets("Needs Assessment").Cells(hNamerow, 2).Value = sx(26)
        Worksheets("Needs Assessment").Cells(hemailrow, 2).Value = sx(27)
        Worksheets("Needs Assessment").Cells(hTitlerow, 2).Value = sx(28)
        Worksheets("Needs Assessment").Cells(hDepartmentrow, 2).Value = sx(29)
        Worksheets("Needs Assessment").Cells(hIDrow, 2).Value = sx(30)
        Worksheets("Needs Assessment").Cells(rNamerow, 2).Value = sx(31)
        Worksheets("Needs Assessment").Cells(remailrow, 2).Value = sx(32)
        Worksheets("Needs Assessment").Cells(rTitlerow, 2).Value = sx(33)
        Worksheets("Needs Assessment").Cells(rDepartmentrow, 2).Value = sx(34)
        Worksheets("Needs Assessment").Cells(rIDrow, 2).Value = sx(35)
        Worksheets("Needs Assessment").Cells(LISrow, 2).Value = sx(36)
        
        'copy all sheets starting with Assumptions on forward.
        x = 6
        Do
            x2 = Worksheets.Count
            Worksheets(x).Range(Cells.Address).Copy
            Workbooks(currentFile).Activate
            x3 = Worksheets.Count
            Worksheets(x).Range(Cells.Address).PasteSpecial xlPasteAll
            Workbooks(fName1).Activate
            x = x + 1
        Loop Until x > x2 Or x > x3
        
        s1 = Application.Workbooks(fName1).Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text
        s2 = Application.Workbooks(fName1).Worksheets("Needs Assessment").Shapes.Item("TextBox 2").TextFrame.Characters.Text
        wb.Close
        Application.Workbooks(currentFile).Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text = s1
        Application.Workbooks(currentFile).Worksheets("Needs Assessment").Shapes.Item("TextBox 2").TextFrame.Characters.Text = s2
    
    End If
    
On Error GoTo errHandler:

    ChDrive SaveDriveDir
    ChDir SaveDriveDir
       
Sheets("Needs Assessment").Select
    
Cancelled:
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
Exit Sub

errHandler:
    MsgBox "There is an error"
End Sub

Sub Assumptions()


Dim s1 As String, subsetstr As String
Dim x As Long, y As Long, y2 As Long, BU As Long

y = Worksheets("Assumptions").Cells(1, 2).Value
'Debug.Print y

    Call refreshAssump
If AssumptionForm.ComboBox1.ListCount < 1 Then
AssumptionForm.ComboBox1.Clear
x = 0
Do
    AssumptionForm.ComboBox1.AddItem Worksheets("Assumptions").Cells(8, 2 + 4 * x).Value
    x = x + 1
Loop Until Worksheets("Assumptions").Cells(8, 2 + 4 * x).Value = ""
End If
Worksheets("Assumptions").Cells(1, 2).Value = y
AssumptionForm.ComboBox1.ListIndex = Worksheets("Assumptions").Cells(1, 2).Value
'Worksheets("Assumptions").Cells(1, 2).Value = y
    
BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
'If AssumptionForm.ComboBox1.Value = "PM" Then
    AssumptionForm.Label5.Visible = True
    AssumptionForm.ComboBox2.Visible = True
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    AssumptionForm.Label5.Visible = False
    AssumptionForm.ComboBox2.Visible = False
    subsetstr = ""
End If
    
y2 = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value
If AssumptionForm.ComboBox2.ListCount < 1 Then
AssumptionForm.ComboBox2.Clear
x = 0
Do
    AssumptionForm.ComboBox2.AddItem Worksheets(subsetstr & "Assumptions").Cells(8, 2 + 4 * x).Value
    x = x + 1
Loop Until Worksheets(subsetstr & "Assumptions").Cells(8, 2 + 4 * x).Value = ""
End If
Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value = y2
AssumptionForm.ComboBox2.ListIndex = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value
   
    AssumptionForm.TextBox1.Text = ""
For x = 1 To 7
    If AssumptionForm.Controls.Item("CheckBox" & x).Value = True Then
        AssumptionForm.TextBox1.Text = AssumptionForm.TextBox1.Text & AssumptionForm.Controls.Item("Textbox1" & x).Text & vbLf
    End If
Next x

    If InStr(Worksheets("Needs Assessment").Cells(Assumptionsrow(), 2).Value, "- other: ") > 0 Then
        AssumptionForm.CheckBox101.Value = True
        s1 = Mid(Worksheets("Needs Assessment").Cells(Assumptionsrow(), 2).Value, InStr(Worksheets("Needs Assessment").Cells(Assumptionsrow(), 2).Value, "- other: ") + 9, Len(Worksheets("Needs Assessment").Cells(Assumptionsrow(), 2).Value) - (InStr(Worksheets("Needs Assessment").Cells(Assumptionsrow(), 2).Value, "- other: ") + 9) + 1)
         AssumptionForm.TextBox3.Text = s1
    End If
    
    Call refreshAssump
    
    AssumptionForm.Top = Application.Top
    AssumptionForm.Left = Application.Left
    AssumptionForm.Show

End Sub

Sub Transmittal()

Dim oEmbFile As Object, objWod As Object, objDoc As Object
Dim WDObj As Object
Dim objCC As ContentControl

    Dim objWord As Object, rngStory As Object, myStoryRange As Range
    Dim objSelection
    Dim SaveDriveDir As String, mypath As String
    Dim fName As Variant



Application.DisplayAlerts = False
Application.ScreenUpdating = False

If Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value = "" Or Worksheets("Needs Assessment").Cells(rNamerow(), 2).Value = "" Then
    MsgBox "Identify the project handler and reviewer"
    Exit Sub
    GoTo errHandler
End If

If Worksheets("Needs Assessment").Cells(hIDrow(), 2).Value = "" Or Worksheets("Needs Assessment").Cells(rIDrow(), 2).Value = "" Then
    Call Handler_Reviewer_info
End If

Set objWord = CreateObject("Word.Application")
Set objDoc = objWord.Documents.Add

For x = 1 To ThisWorkbook.Sheets("transmittal").OLEObjects.Count
    Set oEmbFile = ThisWorkbook.Sheets("transmittal").OLEObjects(x).Duplicate
    Exit For
Next x

'Set oEmbFile = ThisWorkbook.Sheets("transmittal").OLEObjects("Object 1").Duplicate
    oEmbFile.Verb Verb:=xlOpen

Dim num As Long

   Set objWord = CreateObject("Word.Application")
   Set objDoc = oEmbFile.Object 'objWord.Documents.Open(FName)
   objWord.Visible = False

objDoc.Bookmarks("hName").Range.InsertAfter Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value
objDoc.Bookmarks("hNum").Range.InsertAfter Worksheets("Needs Assessment").Cells(hIDrow(), 2).Value
objDoc.Bookmarks("rName").Range.InsertAfter Worksheets("Needs Assessment").Cells(rNamerow(), 2).Value
objDoc.Bookmarks("rNum").Range.InsertAfter Worksheets("Needs Assessment").Cells(rIDrow(), 2).Value
       
' , ,
If Worksheets("Needs Assessment").Cells(ProjectTyperow(), 2).Value = "Add Alternate Components" Then
     objDoc.SelectContentControlsByTag("1").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(ProjectTyperow(), 2).Value = "Add or change a model" Then
     objDoc.SelectContentControlsByTag("2").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(ProjectTyperow(), 2).Value = "Add/change/delete CCN" Then
     objDoc.SelectContentControlsByTag("3").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(ProjectTyperow(), 2).Value = "Corrections" Then
     objDoc.SelectContentControlsByTag("4").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(ProjectTyperow(), 2).Value = "Corrections with Review" Then
     objDoc.SelectContentControlsByTag("5").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(ProjectTyperow(), 2).Value = "Add Manufacturer to file" Then
     objDoc.SelectContentControlsByTag("6").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(ProjectTyperow(), 2).Value = "Add Volume or Section Pair - Multiple Heading" Then
     objDoc.SelectContentControlsByTag("7").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(ProjectTyperow(), 2).Value = "Reinstate a File" Then
     objDoc.SelectContentControlsByTag("8").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(ProjectTyperow(), 2).Value = "Transfer" Then
     objDoc.SelectContentControlsByTag("9").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(ProjectTyperow(), 2).Value = "DAP Audit" Then
     objDoc.SelectContentControlsByTag("10").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(ProjectTyperow(), 2).Value = "Create a New Volume" Then
     objDoc.SelectContentControlsByTag("11").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(ProjectTyperow(), 2).Value = "Authorized Copy" Then
     objDoc.SelectContentControlsByTag("12").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(ProjectTyperow(), 2).Value = "ULtraLink" Then
     objDoc.SelectContentControlsByTag("13").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(ProjectTyperow(), 2).Value = "New Unlisted Component" Then
     objDoc.SelectContentControlsByTag("14").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(ProjectTyperow(), 2).Value = "Revised Unlised Component" Then
     objDoc.SelectContentControlsByTag("15").Item(1).Checked = True
End If


If Worksheets("Needs Assessment").Cells(TestNoTestrow(), 2).Value = "Test" Then
     objDoc.SelectContentControlsByTag("21").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(TestNoTestrow(), 2).Value = "No Test" Then
     objDoc.SelectContentControlsByTag("22").Item(1).Checked = True
End If


If Worksheets("Needs Assessment").Cells(DAProw(), 2).Value = "Yes" Then
     objDoc.SelectContentControlsByTag("33").Item(1).Checked = True
End If

If Worksheets("Needs Assessment").Cells(LISrow(), 2).Value = "PCD Drafted by CAS - TC publishes" Then
     objDoc.SelectContentControlsByTag("41").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(LISrow(), 2).Value = "PCD updated and published by CAS" Then
     objDoc.SelectContentControlsByTag("42").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(LISrow(), 2).Value = "Draft LIS attached" Then
     objDoc.SelectContentControlsByTag("43").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(LISrow(), 2).Value = "no LIS/PCD updates required" Then
     objDoc.SelectContentControlsByTag("44").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(LISrow(), 2).Value = "LIS - Schedule Publication(provide date in transmittal)" Then
     objDoc.SelectContentControlsByTag("45").Item(1).Checked = True
End If
If Worksheets("Needs Assessment").Cells(LISrow(), 2).Value = "Workbench CCN" Then
     objDoc.SelectContentControlsByTag("46").Item(1).Checked = True
End If

NextStep:

Sheets("Needs Assessment").Select

mypath = getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - transmittal.docx"
If Dir(mypath) <> "" Then
    Kill mypath
End If

objDoc.SaveAs (mypath)
Call addDocItem(0, getFNameAndExt(mypath), mypath, "", "", "New file, not uploaded yet: ", "", "")

objDoc.Close
objWord.Quit
MsgBox ("Transmittal has been saved to " & getDirectory())

oEmbFile.Delete

Set oEmbFile = Nothing
Set objDoc = Nothing
Set objWord = Nothing

Sheets("Needs Assessment").Select
Application.DisplayAlerts = True
Exit Sub

errHandler:
    MsgBox "There is an error"

End Sub


Sub Generate_sample_form()

    Dim mypath As String

Application.DisplayAlerts = False
Application.ScreenUpdating = False

Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value = Replace(Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value, "/", "")

mypath = "C:\Users\" & Environ("username") & "\Desktop\" & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - Shipping Form.xlsx"
If Dir(mypath) <> "" Then
    Kill mypath
End If

Sheets("Shipping Form").Visible = True

If Mid(Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value, 1, 4) = "4786" Then
Worksheets("Shipping Form").Cells(19, 4).Value = "Project"
Worksheets("Shipping Form").Cells(19, 5).Value = Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value

Else
Worksheets("Shipping Form").Cells(19, 4).Value = "Quote"
Worksheets("Shipping Form").Cells(19, 5).Value = Worksheets("Needs Assessment").Cells(Quoterow(), 2).Value

End If
Sheets("Shipping Form").Select
Sheets("Shipping Form").Copy
ActiveWorkbook.SaveAs (mypath)
ActiveWorkbook.Close

ThisWorkbook.Activate
Sheets("Shipping Form").Visible = False

MsgBox ("Shipping form has been saved to the desktop")

Sheets("Needs Assessment").Select
Application.DisplayAlerts = True
Exit Sub

errHandler:
    MsgBox "There is an error"


End Sub


Sub Initialize()
Dim x As Long
Dim sx(63) As String
Call initializeConst
Call removeAgentLines
Call initializeConst

Worksheets("Flex Info").Range("A2:AY2").Value = ""
'Worksheets("TAT Form").Range("A1:A20").Value = ""
        x = 1
        Do
            If x <> 4 And x <> 5 And x <> 6 And x <> 7 Then
                Worksheets("Needs Assessment").Cells(x, 2).Value = ""
            End If
            x = x + 1
        Loop Until x > TestPlanrow
        Worksheets("Needs Assessment").Range("E11:E18").Value = ""
        Worksheets("Needs Assessment").Range("C38:D40").Value = ""
        Worksheets("Needs Assessment").Range("G38:H40").Value = ""
        
        'Worksheets("Needs Assessment").Cells(cemailrow(), 2).Hyperlinks.Delete
'        ActiveSheet.Hyperlink.Address.Delete
        ActiveSheet.Hyperlinks.Delete
        x = custDaterow
        Do
            Worksheets("Needs Assessment").Cells(x, 2).Value = ""
            x = x + 1
        Loop Until x > LISrow()
        Worksheets("Flex Info").Cells(23, 2).Value = ""
        Worksheets("Flex Info").Cells(24, 2).Value = ""

        Call clearDocForm
x = 4
Do
    Worksheets("Associated Projects").Cells(x, 2).Value = ""
    Worksheets("Associated Projects").Cells(x, 3).Value = ""
    Worksheets("Associated Projects").Cells(x, 4).Value = ""
    x = x + 1
Loop Until Worksheets("Associated Projects").Cells(x, 2).Value = ""
x = 4
Do
    Worksheets("Task-scratch").Cells(x, 7).Value = ""
    Worksheets("Task-scratch").Cells(x, 8).Value = ""
    Worksheets("Task-scratch").Cells(x, 9).Value = ""
    Worksheets("Task-scratch").Cells(x, 10).Value = ""
    Worksheets("Task-scratch").Cells(x, 11).Value = ""
    Worksheets("Task-scratch").Cells(x, 12).Value = ""
    Worksheets("Task-scratch").Cells(x, 13).Value = ""
    Worksheets("Task-scratch").Cells(x, 14).Value = ""
    x = x + 1
Loop Until Worksheets("Task-scratch").Cells(x, 2).Value = ""
Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text = ""
Worksheets("Needs Assessment").Shapes.Item("TextBox 2").TextFrame.Characters.Text = ""
'Worksheets("Needs Assessment").Cells(TestPlanrow, 2).Value = ""


End Sub

Sub Send_ECD_email()

Dim OutApp As Object, OutMail As Object, signature As String, sigString As String, ECD As String, l As Long, CName As String, HTMLStandards As String, HTMLAssumptions As String
Dim s2 As String
    
    Call ECD_desktop_word(False)
    
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)

    On Error Resume Next

With ThisWorkbook
    With OutMail
    signature = Environ("appdata") & "\Microsoft\Signatures\"
    If Dir(signature, vbDirectory) <> vbNullString Then
        signature = signature & Dir$(signature & "*.htm")
    Else:
        signature = ""
    End If
    signature = CreateObject("Scripting.FileSystemObject").GetFile(signature).OpenAsTextStream(1, -2).ReadAll
    s2 = Replace(Replace(Worksheets("Needs Assessment").Cells(custNrow, 2).Value, "MR. ", ""), "MS. ", "")
    s2 = Mid(s2, 1, InStr(s2, " ") - 1)
    s2 = StrConv(s2, vbProperCase)
    On Error Resume Next
        .To = Worksheets("Needs Assessment").Cells(cemailrow(), 2)
        .CC = ""
        .BCC = "NAAHLeMailTasks@ul.com"
        .Subject = "UL Project # " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - ECD Letter - " & Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
'        .body = "Hello," & Chr(10) & Chr(10) & "We have received all necessary information and/or samples needed to proceed with this project " & _
'        "Please see attached for a letter containing important information, including our estimated completion date." & Chr(10) & Chr(10) & _
'        "If you have any questions, please contact me at any time." & signature
        .HTMLBody = "<BODY style=font-size:10pt;font-family:Arial; line-height: 1>Dear " & s2 & ", <br> <br>We have received all necessary information and/or samples needed to proceed with this project. " & _
        "Please see attached for a letter containing important information, including our estimated completion date. <br> <br>" & _
        signature '"If you have any questions, please contact me at any time. <br><br>" & signature
        .Display
        .Attachments.Add getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - ECD.docx"
    End With
End With
    On Error GoTo 0

    Set OutMail = Nothing
    Set OutApp = Nothing


End Sub
Sub EmailLightingChecklist()

Dim OutApp As Object, OutMail As Object, signature As String, sigString As String, ECD As String, l As Long, CName As String, HTMLStandards As String, HTMLAssumptions As String
Dim s2 As String
   
Call LightingChecklist
    
Set OutApp = CreateObject("Outlook.Application")
Set OutMail = OutApp.CreateItem(0)

On Error Resume Next

With ThisWorkbook
    With OutMail
    signature = Environ("appdata") & "\Microsoft\Signatures\"
    If Dir(signature, vbDirectory) <> vbNullString Then
        signature = signature & Dir$(signature & "*.htm")
    Else:
        signature = ""
    End If
    signature = CreateObject("Scripting.FileSystemObject").GetFile(signature).OpenAsTextStream(1, -2).ReadAll
    s2 = Replace(Replace(Worksheets("Needs Assessment").Cells(custNrow, 2).Value, "MR. ", ""), "MS. ", "")
    s2 = Mid(s2, 1, InStr(s2, " ") - 1)
    s2 = StrConv(s2, vbProperCase)
    On Error Resume Next
        .To = Worksheets("Needs Assessment").Cells(cemailrow(), 2)
        .CC = ""
        .BCC = "NAAHLeMailTasks@ul.com"
        .Subject = "UL Project # " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - Checklist - " & Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
        .HTMLBody = "<BODY style=font-size:10pt;font-family:Arial; line-height: 1>Dear " & s2 & ", <br> <br>Please review the attached for necessary information and/or samples needed to proceed with this project. " & _
        "Please see attached for a letter containing important information, including our estimated completion date. <br> <br>" & _
        signature '"If you have any questions, please contact me at any time. <br><br>" & signature
        .Display
        .Attachments.Add getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - checklist.docx"
    End With
End With
    On Error GoTo 0

    Set OutMail = Nothing
    Set OutApp = Nothing


End Sub

Sub EmailLightingENVS()

Dim OutApp As Object, OutMail As Object, signature As String, sigString As String, ECD As String, l As Long, CName As String, HTMLStandards As String, HTMLAssumptions As String
Dim s2 As String
   
Set OutApp = CreateObject("Outlook.Application")
Set OutMail = OutApp.CreateItem(0)

On Error Resume Next

With ThisWorkbook
    With OutMail
    signature = Environ("appdata") & "\Microsoft\Signatures\"
    If Dir(signature, vbDirectory) <> vbNullString Then
        signature = signature & Dir$(signature & "*.htm")
    Else:
        signature = ""
    End If
    signature = CreateObject("Scripting.FileSystemObject").GetFile(signature).OpenAsTextStream(1, -2).ReadAll
    s2 = Replace(Replace(Worksheets("Needs Assessment").Cells(custNrow, 2).Value, "MR. ", ""), "MS. ", "")
    s2 = Mid(s2, 1, InStr(s2, " ") - 1)
    s2 = StrConv(s2, vbProperCase)
    On Error Resume Next
        .To = Worksheets("Needs Assessment").Cells(cemailrow(), 2)
        .CC = ""
        '.BCC = "NAAHLeMailTasks@ul.com"
        .Subject = "UL Quote # " & Worksheets("Needs Assessment").Cells(Quoterow(), 2) & " - ENVS - " & Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
        .HTMLBody = "<BODY style=font-size:10pt;font-family:Arial; line-height: 1>Dear " & s2 & ", <br> <br>Please review the below information related to the subject scope and California Energy Commission Title 24. " & _
        "<br> <br><a href ="" " & "https://industries.ul.com/wp-content/uploads/sites/2/2015/03/Title-24-Brochure.pdf" & " "">" & "https://industries.ul.com/wp-content/uploads/sites/2/2015/03/Title-24-Brochure.pdf" & "</a><br> <br>" & _
        signature
        'https://www.ul.com/global/documents/offerings/industries/lighting/signs/ElectricSignEnergyCertification.pdf
        'https://industries.ul.com/wp-content/uploads/sites/2/2015/03/Title-24-Brochure.pdf
        '"<a href ="" " & Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value & " "">" & Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value & "</a>"
        .Display
'        .Attachments.Add getDirectory() & "\Electric Sign Energy Certification.pdf"
    End With
End With
    On Error GoTo 0
    
'    Kill getDirectory() & "\Electric Sign Energy Certification.pdf"

    Set OutMail = Nothing
    Set OutApp = Nothing


End Sub
Sub Send_TAT_email()

Dim OutApp As Object, OutMail As Object, signature As String, sigString As String, ECD As String, l As Long, CName As String, HTMLStandards As String, HTMLAssumptions As String
Dim s2 As String
    Call TAT_desktop_word(False)
    
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)

    On Error Resume Next

With ThisWorkbook
    With OutMail
    signature = Environ("appdata") & "\Microsoft\Signatures\"
    If Dir(signature, vbDirectory) <> vbNullString Then
        signature = signature & Dir$(signature & "*.htm")
    Else:
        signature = ""
    End If
    signature = CreateObject("Scripting.FileSystemObject").GetFile(signature).OpenAsTextStream(1, -2).ReadAll
    s2 = Replace(Replace(Worksheets("Needs Assessment").Cells(custNrow, 2).Value, "MR. ", ""), "MS. ", "")
    s2 = Mid(s2, 1, InStr(s2, " ") - 1)
    s2 = StrConv(s2, vbProperCase)
    On Error Resume Next
                
        .To = Worksheets("Needs Assessment").Cells(cemailrow(), 2)
        .CC = ""
        .BCC = "NAAHLeMailTasks@ul.com"
        .Subject = "UL Project # " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - TAT Letter - " & Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
'        .body = "Hello," & Chr(10) & Chr(10) & "We have initiated the subject project but have not received all necessary information and/or samples needed to proceed with the project " & _
'        "Please see attached for a letter containing important information, including the items required and turnaround time." & Chr(10) & Chr(10) & _
'        "If you have any questions, please contact me at any time." & signature
        .HTMLBody = "<BODY style=font-size:10pt;font-family:Arial; line-height: 1>Dear " & s2 & ", <br> <br>We have initiated the subject project but have not received all necessary information and/or samples needed to proceed with the project. " & _
        "Please see attached for a letter containing important information, including the items required and turnaround time. <br> <br>" & _
        signature '"If you have any questions, please contact me at any time. <br><br>" & signature
        .Display
        .Attachments.Add getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - TAT.docx"
    End With
End With
    On Error GoTo 0

    Set OutMail = Nothing
    Set OutApp = Nothing


End Sub
Sub Send_ECD_PDF_email()

Dim OutApp As Object, OutMail As Object, signature As String, sigString As String, ECD As String, l As Long, CName As String, HTMLStandards As String, HTMLAssumptions As String
Dim s2 As String
    
    Call ECD_desktop_pdf
    
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)

    On Error Resume Next

With ThisWorkbook
    With OutMail
    signature = Environ("appdata") & "\Microsoft\Signatures\"
    If Dir(signature, vbDirectory) <> vbNullString Then
        signature = signature & Dir$(signature & "*.htm")
    Else:
        signature = ""
    End If
    signature = CreateObject("Scripting.FileSystemObject").GetFile(signature).OpenAsTextStream(1, -2).ReadAll
    s2 = Replace(Replace(Worksheets("Needs Assessment").Cells(custNrow, 2).Value, "MR. ", ""), "MS. ", "")
    s2 = Mid(s2, 1, InStr(s2, " ") - 1)
    s2 = StrConv(s2, vbProperCase)
    On Error Resume Next
        .To = Worksheets("Needs Assessment").Cells(cemailrow(), 2)
        .CC = ""
        .BCC = "NAAHLeMailTasks@ul.com"
        .Subject = "UL Project # " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - ECD Letter - " & Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
        .HTMLBody = "<BODY style=font-size:10pt;font-family:Arial; line-height: 1>Dear " & s2 & ", <br> <br>We have received all necessary information and/or samples needed to proceed with this project. " & _
        "Please see attached for a letter containing important information, including our estimated completion date. <br> <br>" & _
        signature '"If you have any questions, please contact me at any time. <br><br>" & signature
        .Display
        .Attachments.Add getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - ECD.pdf"
    End With
End With
    On Error GoTo 0

    Set OutMail = Nothing
    Set OutApp = Nothing


End Sub
Sub Send_TAT_PDF_email()

Dim OutApp As Object, OutMail As Object, signature As String, sigString As String, ECD As String, l As Long, CName As String, HTMLStandards As String, HTMLAssumptions As String
Dim s2 As String
    Call TAT_desktop_pdf
    
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)

    On Error Resume Next

With ThisWorkbook
    With OutMail
    signature = Environ("appdata") & "\Microsoft\Signatures\"
    If Dir(signature, vbDirectory) <> vbNullString Then
        signature = signature & Dir$(signature & "*.htm")
    Else:
        signature = ""
    End If
    signature = CreateObject("Scripting.FileSystemObject").GetFile(signature).OpenAsTextStream(1, -2).ReadAll
    s2 = Replace(Replace(Worksheets("Needs Assessment").Cells(custNrow, 2).Value, "MR. ", ""), "MS. ", "")
    s2 = Mid(s2, 1, InStr(s2, " ") - 1)
    s2 = StrConv(s2, vbProperCase)
    On Error Resume Next
                
        .To = Worksheets("Needs Assessment").Cells(cemailrow(), 2)
        .CC = ""
        .BCC = "NAAHLeMailTasks@ul.com"
        .Subject = "UL Project # " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - TAT Letter - " & Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
        .HTMLBody = "<BODY style=font-size:10pt;font-family:Arial; line-height: 1>Dear " & s2 & ", <br> <br>We have initiated the subject project but have not received all necessary information and/or samples needed to proceed with the project. " & _
        "Please see attached for a letter containing important information, including the items required and turnaround time. <br> <br>" & _
        signature '"If you have any questions, please contact me at any time. <br><br>" & signature
        .Display
        .Attachments.Add getDirectory() & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - TAT.pdf"
    End With
End With
    On Error GoTo 0

    Set OutMail = Nothing
    Set OutApp = Nothing


End Sub



Sub emailExpress()

Dim OutApp As Object, OutMail As Object, signature As String, sigString As String, ECD As String, l As Long, CName As String, HTMLStandards As String, HTMLAssumptions As String
        
'    Call TAT_desktop_word
    
Set OutApp = CreateObject("Outlook.Application")
Set OutMail = OutApp.CreateItem(0)

On Error Resume Next

With ThisWorkbook
    With OutMail
        
    signature = Environ("appdata") & "\Microsoft\Signatures\"
    If Dir(signature, vbDirectory) <> vbNullString Then
        signature = signature & Dir$(signature & "*.htm")
    Else:
        signature = ""
    End If
    signature = CreateObject("Scripting.FileSystemObject").GetFile(signature).OpenAsTextStream(1, -2).ReadAll
    
    
    On Error Resume Next
                
        .To = Worksheets("Needs Assessment").Cells(cemailrow(), 2)
        .CC = ""
        .BCC = "NAAHLeMailTasks@ul.com"
        .Subject = "UL Project # " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - " & Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
        '.body = Chr(10) & Chr(10) & signature
        .HTMLBody = "<br> <br>" & signature
        .Display
    End With
End With
    On Error GoTo 0

    Set OutMail = Nothing
    Set OutApp = Nothing


End Sub

Sub emailAgent()

Dim OutApp As Object, OutMail As Object, signature As String, sigString As String, ECD As String, l As Long, CName As String, HTMLStandards As String, HTMLAssumptions As String
        
Set OutApp = CreateObject("Outlook.Application")
Set OutMail = OutApp.CreateItem(0)

On Error Resume Next

With ThisWorkbook
    With OutMail
        
    signature = Environ("appdata") & "\Microsoft\Signatures\"
    If Dir(signature, vbDirectory) <> vbNullString Then
        signature = signature & Dir$(signature & "*.htm")
    Else:
        signature = ""
    End If
    signature = CreateObject("Scripting.FileSystemObject").GetFile(signature).OpenAsTextStream(1, -2).ReadAll
    
    On Error Resume Next
                
        .To = Worksheets("Needs Assessment").Cells(cemailrow() + 6, 2)
        .CC = ""
        .BCC = "NAAHLeMailTasks@ul.com"
        .Subject = "UL Project # " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - " & Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
        '.body = Chr(10) & Chr(10) & signature
        .HTMLBody = "<br> <br>" & signature
        .Display
    End With
End With
    On Error GoTo 0

    Set OutMail = Nothing
    Set OutApp = Nothing

End Sub

Sub emailAddress(emailAdd As String, subj As String, emailBody As String)

Dim OutApp As Object, OutMail As Object, signature As String, sigString As String, ECD As String, l As Long, CName As String, HTMLStandards As String, HTMLAssumptions As String

Set OutApp = CreateObject("Outlook.Application")
Set OutMail = OutApp.CreateItem(0)

On Error Resume Next

With ThisWorkbook
    With OutMail
    signature = Environ("appdata") & "\Microsoft\Signatures\"
    If Dir(signature, vbDirectory) <> vbNullString Then
        signature = signature & Dir$(signature & "*.htm")
    Else:
        signature = ""
    End If
    signature = CreateObject("Scripting.FileSystemObject").GetFile(signature).OpenAsTextStream(1, -2).ReadAll
    On Error Resume Next
        .To = emailAdd
        .CC = ""
        .BCC = "" '"NAAHLeMailTasks@ul.com"
        '.Subject = "File: " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "UL Project # " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - " & Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
        .Subject = subj '"File: " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "UL Project # " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - " & Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
        '.body = Chr(10) & Chr(10) & signature
        .HTMLBody = "<br>" & emailBody & "<br> <br>Project link: <a href ="" " & Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value & " "">" & Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value & "</a> <br> <br> " & signature
        .Display
    End With
End With
    On Error GoTo 0
    Set OutMail = Nothing
    Set OutApp = Nothing
End Sub

Sub emailAddress3(emailAdd As String, ccAdd As String, subj As String, emailBody As String)

Dim OutApp As Object, OutMail As Object, signature As String, sigString As String, ECD As String, l As Long, CName As String, HTMLStandards As String, HTMLAssumptions As String

Set OutApp = CreateObject("Outlook.Application")
Set OutMail = OutApp.CreateItem(0)

On Error Resume Next

With ThisWorkbook
    With OutMail
    signature = Environ("appdata") & "\Microsoft\Signatures\"
    If Dir(signature, vbDirectory) <> vbNullString Then
        signature = signature & Dir$(signature & "*.htm")
    Else:
        signature = ""
    End If
    signature = CreateObject("Scripting.FileSystemObject").GetFile(signature).OpenAsTextStream(1, -2).ReadAll
    On Error Resume Next
        .To = emailAdd
        .CC = ccAdd
        .BCC = "" '"NAAHLeMailTasks@ul.com"
        '.Subject = "File: " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "UL Project # " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - " & Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
        .Subject = subj '"File: " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "UL Project # " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - " & Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
        '.body = Chr(10) & Chr(10) & signature
        .HTMLBody = "<br>" & emailBody & "<br> <br>Project link: <a href ="" " & Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value & " "">" & Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value & "</a> <br> <br> " & signature
        .Display
    End With
End With
    On Error GoTo 0
    Set OutMail = Nothing
    Set OutApp = Nothing
End Sub
Sub emailAddress4(emailAdd As String, subj As String, emailBody As String)

Dim OutApp As Object, OutMail As Object, signature As String, sigString As String, ECD As String, l As Long, CName As String, HTMLStandards As String, HTMLAssumptions As String

Set OutApp = CreateObject("Outlook.Application")
Set OutMail = OutApp.CreateItem(0)

On Error Resume Next

With ThisWorkbook
    With OutMail
    signature = Environ("appdata") & "\Microsoft\Signatures\"
    If Dir(signature, vbDirectory) <> vbNullString Then
        signature = signature & Dir$(signature & "*.htm")
    Else:
        signature = ""
    End If
    signature = CreateObject("Scripting.FileSystemObject").GetFile(signature).OpenAsTextStream(1, -2).ReadAll
    On Error Resume Next
        .To = emailAdd
        .CC = ""
        .BCC = "" '"NAAHLeMailTasks@ul.com"
        '.Subject = "File: " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "UL Project # " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - " & Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
        .Subject = subj '"File: " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "UL Project # " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - " & Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
        '.body = Chr(10) & Chr(10) & signature
        .HTMLBody = emailBody & signature
        .Display
    End With
End With
    On Error GoTo 0
    Set OutMail = Nothing
    Set OutApp = Nothing
End Sub


Function RangetoHTML(rng As Range)
' By Ron de Bruin.
    Dim fso As Object
    Dim ts As Object
    Dim TempFile As String
    Dim TempWB As Workbook

    TempFile = Environ$("temp") & "/" & Format(Now, "dd-mm-yy h-mm-ss") & ".htm"

    'Copy the range and create a new workbook to past the data in
    rng.Copy
    Set TempWB = Workbooks.Add(1)
    With TempWB.Sheets(1)
        .Cells(1).PasteSpecial Paste:=8
        .Cells(1).PasteSpecial xlPasteValues, , False, False
        .Cells(1).PasteSpecial xlPasteFormats, , False, False
        .Cells(1).Select
        Application.CutCopyMode = False
        On Error Resume Next
        .DrawingObjects.Visible = True
        .DrawingObjects.Delete
        On Error GoTo 0
    End With

    'Publish the sheet to a htm file
    With TempWB.PublishObjects.Add( _
         SourceType:=xlSourceRange, _
         fileName:=TempFile, _
         Sheet:=TempWB.Sheets(1).Name, _
         Source:=TempWB.Sheets(1).UsedRange.Address, _
         HtmlType:=xlHtmlStatic)
        .Publish (True)
    End With

    'Read all data from the htm file into RangetoHTML
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.GetFile(TempFile).OpenAsTextStream(1, -2)
    RangetoHTML = ts.ReadAll
    ts.Close
    RangetoHTML = Replace(RangetoHTML, "align=center x:publishsource=", _
                          "align=left x:publishsource=")

    'Close TempWB
    TempWB.Close savechanges:=False

    'Delete the htm file we used in this function
    Kill TempFile

    Set ts = Nothing
    Set fso = Nothing
    Set TempWB = Nothing
End Function
Sub emailAddress2(emailAdd As String, subj As String, emailBody As String)

Dim OutApp As Object, OutMail As Object, signature As String, sigString As String, ECD As String, l As Long, CName As String, HTMLStandards As String, HTMLAssumptions As String
Dim rng As Range

Set OutApp = CreateObject("Outlook.Application")
Set OutMail = OutApp.CreateItem(0)
Set rng = Nothing
On Error Resume Next
' Only send the visible cells in the selection.
Set rng = Sheets("Task Document Download").RangetoHTML("T31:V34").SpecialCells(xlCellTypeVisible)
    Range("T31:V34").Select
    Selection.Copy
On Error GoTo 0
On Error Resume Next

With ThisWorkbook
    With OutMail
    signature = Environ("appdata") & "\Microsoft\Signatures\"
    If Dir(signature, vbDirectory) <> vbNullString Then
        signature = signature & Dir$(signature & "*.htm")
    Else:
        signature = ""
    End If
    signature = CreateObject("Scripting.FileSystemObject").GetFile(signature).OpenAsTextStream(1, -2).ReadAll
    On Error Resume Next
        .To = emailAdd
        .CC = ""
        .BCC = "" '"NAAHLeMailTasks@ul.com"
        .Subject = subj '"File: " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "UL Project # " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - " & Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
        .HTMLBody = "Hello XXXX,<br> <br>" _
& "The CCN Category for this request resides in the Workbench application, where there are additional actions which still need to be completed by either you or the Reviewer in order for the Models to update the Listing card properly. <br><br>" _
& "File: <br>" _
& "CCN: <br>" _
& "Existing Report Date: <i style='mso-bidi-font-style:normal'><span style='color:red'>&lt;if applicable&gt;</span></i><br><br>" _
& "<b style='mso-bidi-font-weight:normal'>Project Link</b>: <i style='mso-bidi-font-style:normal'><span style='color:red'>&lt;insert link to Project&gt;</span><o:p></o:p></i><br><br>" _
& "Impacted Models (may be more than listed, please verify all Models within your Project): <br><br>" _
& "Missing Models: <i style='mso-bidi-font-style:normal'><span style='color:red'>&lt;if applicable&gt;</span><o:p></o:p></i><br><br>" _
& "<b style='mso-bidi-font-weight:normal'>Link to Models</b>: <i style='mso-bidi-font-style:normal'><span style='color:red'>&lt;insert Workbench link to Collection or Search Results as applicable&gt;</span></i><br><br>" _
& "Reason for return or notification: <i style='mso-bidi-font-style:normal'>&lt;only select applicable reasons&gt;</i><br><br>" _
& "<w:Sdt CheckBox=""t"" CheckBoxIsChecked=""f"" CheckBoxValueChecked=""&#9746;"" CheckBoxValueUnchecked=""&#9744;"" CheckBoxFontChecked=""MS Gothic"" CheckBoxFontUnchecked=""MS Gothic"" ID=""-1181804791""><span style=font-family:""MS Gothic"";mso-bidi-font-family: ""MS Gothic"">&#9744;</span></w:Sdt><span style=mso-spacerun:yes></span>Model missing in the Workbench<br><br>" _
& "<w:Sdt CheckBox=""t"" CheckBoxIsChecked=""f"" CheckBoxValueChecked=""&#9746;"" CheckBoxValueUnchecked=""&#9744;"" CheckBoxFontChecked=""MS Gothic"" CheckBoxFontUnchecked=""MS Gothic"" ID=""1984657204"">Model missing Certification Date<br><br>" _
& "<w:Sdt CheckBox=""t"" CheckBoxIsChecked=""f"" CheckBoxValueChecked=""&#9746;"" CheckBoxValueUnchecked=""&#9744;"" CheckBoxFontChecked=""MS Gothic"" CheckBoxFontUnchecked=""MS Gothic"" ID=""963008648"">Incorrect Certification Date for Existing Report<br><br>" _
& "<w:Sdt CheckBox=""t"" CheckBoxIsChecked=""f"" CheckBoxValueChecked=""&#9746;"" CheckBoxValueUnchecked=""&#9744;"" CheckBoxFontChecked=""MS Gothic"" CheckBoxFontUnchecked=""MS Gothic"" ID=""-1895346265"">Model in DRAFT status (must be ACTIVE to reflect on LIS)<br><br>" _
& "<w:Sdt CheckBox=""t"" CheckBoxIsChecked=""f"" CheckBoxValueChecked=""&#9746;"" CheckBoxValueUnchecked=""&#9744;"" CheckBoxFontChecked=""MS Gothic"" CheckBoxFontUnchecked=""MS Gothic"" ID=""-332071884"">Multiple Models are listed on one Model entry<br><br>" _
& "Please help to make the corrections within the Workbench for all impacted Models in your Project, as poor data quality may negatively impact customers and/or delay Project completion.<br><br>Thank you. <br><br>" & signature
        
        
        
        'Set MyRange = ActiveDocument.Content
        'MyRange.Collapse Direction:=wdCollapseEnd
        'ActiveDocument.Tables.aDD Range:=MyRange, NumRows:=6, NumColumns:=10
        .Display
    End With
End With
    On Error GoTo 0
    Set OutMail = Nothing
    Set OutApp = Nothing
End Sub

Sub emailHandlerReviewer()

Dim OutApp As Object, OutMail As Object, signature As String, sigString As String, ECD As String, l As Long, CName As String, HTMLStandards As String, HTMLAssumptions As String

Set OutApp = CreateObject("Outlook.Application")
Set OutMail = OutApp.CreateItem(0)

On Error Resume Next

With ThisWorkbook
    With OutMail
    signature = Environ("appdata") & "\Microsoft\Signatures\"
    If Dir(signature, vbDirectory) <> vbNullString Then
        signature = signature & Dir$(signature & "*.htm")
    Else:
        signature = ""
    End If
    signature = CreateObject("Scripting.FileSystemObject").GetFile(signature).OpenAsTextStream(1, -2).ReadAll
    On Error Resume Next
        .To = Worksheets("Needs Assessment").Cells(hemailrow(), 2).Value & "; " & Worksheets("Needs Assessment").Cells(remailrow(), 2).Value
        .CC = ""
        .BCC = "NAAHLeMailTasks@ul.com"
        .Subject = "UL Project # " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - " & Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
        '.body = Chr(10) & Chr(10) & signature
        .HTMLBody = "<br> <br>" & signature
        .Display
    End With
End With
    On Error GoTo 0
    Set OutMail = Nothing
    Set OutApp = Nothing
End Sub

Function GetSig(ByVal sFile As String) As String
    Dim fso As Object
    Dim ts As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.GetFile(sFile).OpenAsTextStream(1, -2)
'    Set ts = fso.OpenTextFile(sFile)
    GetSig = ts.ReadAll
'    MsgBox (GetSig)
    ts.Close
End Function

Sub Add_Standards()

Dim sText As String, sTemp As String, sTempLength As Integer
Dim InvertSheet As String, InvertRange As Range, FormatRange As Range
Dim endColumn As Long, endRow As Long, sTempLong As Long, sTempLongEnd As Long
Dim interval As Long, nFifteen As Long, nRowCount As Long
Dim maxCycles As Long, nColCount As Long

StandardSheet = "CCN-Standard"
With ThisWorkbook
    Set StandardRange = Worksheets(StandardSheet).Cells(1, 2)
End With
endColumn = 1  ' StandardRange.End(xlToRight).Column
'endRow = 100
endRow = StandardRange.End(xlDown).row

With ThisWorkbook
    Set StandardRange = Worksheets(StandardSheet).Cells(1, 1)
End With


nRowCount = 1
sTemp = ""
Do
    nRowCount = nRowCount + 1
    If StandardRange.Cells(nRowCount, 1) <> "" Then
        sTemp = sTemp & StandardRange.Cells(nRowCount, 3) & " - " & StandardRange.Cells(nRowCount, 4) & " - " & StandardRange.Cells(nRowCount, 5) & " ed. - "
        If StandardRange.Cells(nRowCount, 7) = "" Then
            sTemp = sTemp & "issued " & StandardRange.Cells(nRowCount, 6)
        Else
            sTemp = sTemp & "revised " & StandardRange.Cells(nRowCount, 7)
        End If
        
        If StandardRange.Cells(nRowCount, 8) <> "" Then
'        Else
            sTemp = sTemp & " - Reaffirmed " & StandardRange.Cells(nRowCount, 8)
        End If
        
        sTemp = sTemp & vbCrLf
        
    End If
Loop Until nRowCount = endRow

Worksheets("Needs Assessment").Cells(Standardsrow(), 2) = sTemp

'MsgBox sTemp

End Sub
Attribute VB_Name = "ModuleQuote"
Sub lookupPMIFVS()
Call PMcheckIFVS(True)
End Sub
Function getUserEmailAddress() As String
    signature = Mid(Environ("appdata"), 1, InStrRev(Environ("appdata"), "\")) & "Local\Microsoft\Outlook\"
    If Dir(signature, vbDirectory) <> vbNullString Then
            signature = signature & Dir$(signature & "*.ost")
        Else
            MsgBox "Error: no outlook directory to lookup email"
            Exit Function
        End If
        signature = Replace(Mid(signature, InStrRev(signature, "\") + 1), ".ost", "")
    Debug.Print signature
    getUserEmailAddress = signature
End Function

Sub FetchMSDOutput()
    Dim SaveDriveDir As String, mypath As String
    Dim fName As Variant
    Dim lngLastRow As Long
    Dim r As Range
    Dim rng As Range
    Dim firstColor As Long
    Dim secondColor As Long
    Dim CCNLength As Long
    Dim CCN As String
    Dim n As Long
    Dim l As Long, x As Long, y As Long, x2 As Long, x3 As Long, x4 As Long
    Dim currentFile As String, s1 As String, s2 As String, s3 As String, fName1 As String, fName2, s4 As String
    Dim wb As Workbook
    Dim sx(63) As String
    Dim customerCol As Long, accountCol As Long, streetAddressCol As Long, stateAddressCol As Long, zipAddressCol As Long, contactCol As Long
    Dim opportunityNumCol As Long, scopeCol As Long, entityCol As Long, versionCol As Long, ownerNumCol As Long
    
    Dim customerS As String, accountS As String, streetAddressS As String, stateAddressS As String, zipAddressS As String, contactS As String
    Dim opportunityNumS As String, scopeS As String, entityS As String, versionS As String, ownerNumS As String
        
        
    currentFile = ActiveWorkbook.Name
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    SaveDriveDir = CurDir
    mypath = CurDir ' Application.DefaultFilePath    'or use "C:\Data"
    ChDrive mypath
    ChDir mypath
    fName = Application.GetOpenFilename(filefilter:="Excel Files, *.xl*", Title:="Choose MS Dynamic output report file")

    If fName = False Then
        GoTo Cancelled:
    End If
    'Debug.Print fName
    'Debug.Print currentFile
    fName1 = Mid(fName, InStrRev(fName, "\") + 1, Len(fName) - InStrRev(fName, "\"))
    
    'Call initializeConst
    
    If fName = ActiveWorkbook.Name Then
        MsgBox "Filename cannot be the same as current file"
        GoTo Cancelled:
    Else
        Set wb = Workbooks.Open(fName)
        Call initializeConst
        '''search open workbook for sales rep name
        MSDForm.Left = Application.Left
        MSDForm.Top = Application.Top
        MSDForm.ListBox1.Clear
        MSDForm.ComboBox1.Clear
        
        'output reports columns appear to not be constant based on report generation request parameters.
        x = 4
        Do
            If InStr(Worksheets(1).Cells(1, x).Value, "Account Number") > 0 Then
                accountCol = x
            End If
            If Worksheets(1).Cells(1, x).Value = "Account" Then
                customerCol = x
            End If
            If InStr(Worksheets(1).Cells(1, x).Value, "Address 1: Street 1") > 0 Then
                streetAddressCol = x
            End If
            If InStr(Worksheets(1).Cells(1, x).Value, "Address 1: State/Province") > 0 Then
                stateAddressCol = x
            End If
            If InStr(Worksheets(1).Cells(1, x).Value, "Address 1: ZIP/Postal Code") > 0 Then
                zipAddressCol = x
            End If
            If Worksheets(1).Cells(1, x).Value = "Opportunity Number" Then
                opportunityNumCol = x
            End If
            If Worksheets(1).Cells(1, x).Value = "Contact" Then
                contactCol = x
            End If
            If Worksheets(1).Cells(1, x).Value = "Topic" Then
                scopeCol = x
            End If
            If Worksheets(1).Cells(1, x).Value = "UL Legal Entity" Then
                entityCol = x
            End If
            If Worksheets(1).Cells(1, x).Value = "Opporunity Version" Then
                versionCol = x
            End If
            If Worksheets(1).Cells(1, x).Value = "Primary Email (Owning User) (User)" Then
                ownerNumCol = x
            End If
            x = x + 1
        Loop Until Worksheets(1).Cells(1, x).Value = ""
        
        'get users email address from outlook directory
        Debug.Print getUserEmailAddress()
        If getUserEmailAddress() = "Ryan.Barnes@ul.com" Then
            userEmail = "Paul.Abosch@ul.com" 'debug entry since I'm not in the excel sheet...
        Else
            userEmail = getUserEmailAddress()
        End If
        Debug.Print "Looking for email address: " & userEmail
        x = 2
        y = 0
        Do
            If MSDForm.ComboBox1.ListCount = 0 Then
                MSDForm.ComboBox1.AddItem Worksheets(1).Cells(x, ownerNumCol).Value
            Else
                For z = 0 To MSDForm.ComboBox1.ListCount - 1
                    If MSDForm.ComboBox1.List(z) = Worksheets(1).Cells(x, ownerNumCol).Value Then
                        GoTo repeatEmail
                    End If
                Next z
                MSDForm.ComboBox1.AddItem Worksheets(1).Cells(x, ownerNumCol).Value
repeatEmail:
            End If
            Debug.Print "checking email match: " & Worksheets(1).Cells(x, ownerNumCol).Value & " vs " & userEmail
            If Worksheets(1).Cells(x, ownerNumCol).Value = userEmail Then
                MSDForm.ComboBox1.Value = userEmail
                MSDForm.ListBox1.AddItem
                Debug.Print x
                MSDForm.ListBox1.List(y, 0) = Worksheets(1).Cells(x, customerCol).Value
                MSDForm.ListBox1.List(y, 1) = Worksheets(1).Cells(x, opportunityNumCol).Value
                MSDForm.ListBox1.List(y, 2) = Worksheets(1).Cells(x, scopeCol).Value
                MSDForm.ListBox1.List(y, 3) = x
                MSDForm.ListBox1.List(y, 4) = Worksheets(1).Cells(x, ownerNumCol).Value
                MSDForm.ListBox1.List(y, 5) = Worksheets(1).Cells(x, scopeCol).Value
                
                y = y + 1
            End If
            x = x + 1
        Loop Until Worksheets(1).Cells(x, 1).Value = ""
        
        
        MSDForm.Show
                
        'loop through form listbox to find selected value
        y = 0
        Do
            If MSDForm.ListBox1.Selected(y) Then
                GoTo SelectionFound
            End If
            y = y + 1
        Loop Until y >= MSDForm.ListBox1.ListCount
        
        wb.Close
        Exit Sub 'no entry selected
SelectionFound:
        'y has value of selected listbox entry
        x = MSDForm.ListBox1.List(y, 3)
        'x has index for sheet entry
        
        customerS = Worksheets(1).Cells(x, customerCol).Value
        accountS = Worksheets(1).Cells(x, accountCol).Value
        streetAddressS = Worksheets(1).Cells(x, streetAddressCol).Value
        stateAddressS = Worksheets(1).Cells(x, stateAddressCol).Value
        zipAddressS = Worksheets(1).Cells(x, zipAddressCol).Value
        contactS = Worksheets(1).Cells(x, contactCol).Value
        opportunityNumS = Worksheets(1).Cells(x, opportunityNumCol).Value
        scopeS = Worksheets(1).Cells(x, scopeCol).Value
        entityS = Worksheets(1).Cells(x, entityCol).Value
        versionS = Worksheets(1).Cells(x, versionCol).Value
        ownerNumS = Worksheets(1).Cells(x, ownerNumCol).Value
    
        'sx(0) = Worksheets(1).Cells(CCNrow, 2).Value
        
        Workbooks(currentFile).Activate
        Worksheets("Summary").Cells(23, 5).Value = customerS
        [customer] = customerS
        Worksheets("Summary").Cells(24, 5).Value = accountS
        If InStr(contactS, ",") > 0 Then
            Worksheets("Summary").Cells(25, 5).Value = Mid(contactS, InStr(contactS, ",") + 2) & " " & Mid(contactS, 1, InStr(contactS, ",") - 1)
        Else
            Worksheets("Summary").Cells(25, 5).Value = contactS
        End If
        Worksheets("Summary").Cells(26, 5).Value = streetAddressS
        Worksheets("summary").Cells(27, 5).Value = ""
'        Worksheets("summary").Cells(27, 5).Value = suiteS
'        Worksheets("summary").Cells(28, 5).Value = cityS
        Worksheets("summary").Cells(28, 5).Value = ""
        Worksheets("Summary").Cells(29, 5).Value = stateAddressS
        Worksheets("Summary").Cells(30, 5).Value = zipAddressS
'        Worksheets("Summary").Cells(31, 5).Value = countryS
        Worksheets("summary").Cells(31, 5).Value = ""
        Worksheets("summary").Cells(32, 5).Value = ""
        Worksheets("Summary").Cells(37, 5).Value = 1 'versionS
        Worksheets("Summary").Cells(23, 6).Value = entityS
        If entityS = "UL AG" Then
            Worksheets("Summary").Cells(26, 6).Value = "Ringstrasse 1"
            Worksheets("Summary").Cells(27, 6).Value = ""
            Worksheets("Summary").Cells(28, 6).Value = "8603 Schwerzenbach"
            Worksheets("Summary").Cells(29, 6).Value = ""
            Worksheets("Summary").Cells(30, 6).Value = ""
            Worksheets("Summary").Cells(31, 6).Value = "Switzerland"
        End If
        If entityS = "UL LLC" Then
            Worksheets("Summary").Cells(26, 6).Value = "333 Pfingsten Road"
            Worksheets("Summary").Cells(27, 6).Value = ""
            Worksheets("Summary").Cells(28, 6).Value = "Northbrook"
            Worksheets("Summary").Cells(29, 6).Value = "IL"
            Worksheets("Summary").Cells(30, 6).Value = "60062-2096"
            Worksheets("Summary").Cells(31, 6).Value = "USA"
        End If
        'Worksheets("Summary").Cells(25, 6).Value = Replace(Replace(userEmail, "@ul.com", ""), ".", " ")
        Worksheets("Summary").Cells(25, 6).Value = Replace(Replace(MSDForm.ComboBox1.Value, "@ul.com", ""), ".", " ")
        
        [quote_number] = opportunityNumS
        Worksheets(4).Cells(2, 4).Value = scopeS
        [employee_number] = Environ("username")

' lookup customer address by account #. Use ENVS procedures for IFVS
        Call PMcheckIFVS(False)

' lookup employee address in directory. Use previous employee ID procedure
        'Call PMEmployeeLookup
        
        wb.Close
            
    End If
    
On Error GoTo errHandler:

    ChDrive SaveDriveDir
    ChDir SaveDriveDir
       
'Sheets("Needs Assessment").Select
    
Cancelled:
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
Exit Sub

errHandler:
    MsgBox "There is an error"
End Sub


Sub FetchMSDOutput_insheet()
   'asheet = ActiveSheet.Name
    'Sheets("MSD Data").Visible = True
    'Sheets("MSD Data").Select
    'Application.SendKeys ("%a")
    'Application.SendKeys ("%y1")
    'Sheets("MSD Data").Visible = False
    'Sheets(asheet).Select
    
    Dim SaveDriveDir As String, mypath As String
    Dim fName As Variant
    Dim lngLastRow As Long
    Dim r As Range
    Dim rng As Range
    Dim firstColor As Long
    Dim secondColor As Long
    Dim CCNLength As Long
    Dim CCN As String
    Dim n As Long
    Dim l As Long, x As Long, y As Long, x2 As Long, x3 As Long, x4 As Long
    Dim currentFile As String, s1 As String, s2 As String, s3 As String, fName1 As String, fName2, s4 As String
    Dim wb As Workbook
    Dim sx(63) As String
    Dim customerCol As Long, accountCol As Long, streetAddressCol As Long, stateAddressCol As Long, zipAddressCol As Long, contactCol As Long
    Dim opportunityNumCol As Long, scopeCol As Long, entityCol As Long, versionCol As Long, ownerNumCol As Long, IDCol
    Dim cityCol As Long, CountryCol As Long, contactEmailCol As Long, creatorNumCol As Long
    
    Dim customerS As String, accountS As String, streetAddressS As String, stateAddressS As String, zipAddressS As String, contactS As String
    Dim opportunityNumS As String, scopeS As String, entityS As String, versionS As String, ownerNumS As String
    Dim cityS As String, CountryS As String, contactEmailS As String
            
        

            
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    

    Call initializeConst
        
    '''search open workbook for sales rep name
    MSDForm.Left = Application.Left
    MSDForm.Top = Application.Top
    MSDForm.ListBox1.Clear
'    MSDForm.ComboBox1.Clear
        
        'output reports columns appear to not be constant based on report generation request parameters.
        x = 4
        Do
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Account Number") > 0 Then
                accountCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Account" Then
                customerCol = x
            End If
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Address 1: Street 1") > 0 Then
                streetAddressCol = x
            End If
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Address 1: State/Province") > 0 Then
                stateAddressCol = x
            End If
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Address 1: ZIP/Postal Code") > 0 Then
                zipAddressCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Opportunity Number" Then
                opportunityNumCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Contact" Then
                contactCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Topic" Then
                scopeCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "UL Legal Entity" Then
                entityCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Opporunity Version" Then
                versionCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Primary Email (Owning User) (User)" Then
                ownerNumCol = x
            End If
            'UL Employee Number
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "UL Employee Number") > 0 Then
                IDCol = x
            End If
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Address 1: City") > 0 Then
                cityCol = x
            End If
            If InStr(Worksheets("MSD Data").Cells(1, x).Value, "Address 1: Country") > 0 Then
                CountryCol = x
            End If
             If InStr(Worksheets("MSD Data").Cells(1, x).Value, "E-mail (Contact)") > 0 Then
                contactEmailCol = x
            End If
            If Worksheets("MSD Data").Cells(1, x).Value = "Primary Email (Created By) (User)" Then
                creatorNumCol = x
            End If

            x = x + 1
        Loop Until Worksheets("MSD Data").Cells(1, x).Value = ""
        invalidcol = x
        
        'get users email address from outlook directory
        Debug.Print getUserEmailAddress()
        If getUserEmailAddress() = "Ryan.Barnes@ul.com" Then
            userEmail = "Paul.Abosch@ul.com" 'debug entry since I'm not in the excel sheet...
        Else
            userEmail = getUserEmailAddress()
        End If
        Debug.Print "Looking for email address: " & userEmail
        
        x = 2
        y = 0
        If MSDForm.ComboBox1.ListCount < 1 Or MSDForm.ComboBox2.ListCount < 1 Then
        Do
            If MSDForm.ComboBox1.ListCount = 0 Then
                MSDForm.ComboBox1.AddItem Worksheets("MSD Data").Cells(x, ownerNumCol).Value
            Else
                For z = 0 To MSDForm.ComboBox1.ListCount - 1
                    If MSDForm.ComboBox1.List(z) = Worksheets("MSD Data").Cells(x, ownerNumCol).Value Then
                        GoTo repeatEmail
                    End If
                Next z
                MSDForm.ComboBox1.AddItem Worksheets("MSD Data").Cells(x, ownerNumCol).Value
repeatEmail:
            End If
            Debug.Print "checking email match: " & Worksheets("MSD Data").Cells(x, ownerNumCol).Value & " vs " & userEmail
            'If Worksheets("MSD Data").Cells(x, ownerNumCol).Value = userEmail Then
            '    MSDForm.ComboBox1.Value = userEmail
            '    MSDForm.ListBox1.AddItem
            '    Debug.Print x
            '    MSDForm.ListBox1.List(y, 0) = Worksheets("MSD Data").Cells(x, customerCol).Value
            '    MSDForm.ListBox1.List(y, 1) = Worksheets("MSD Data").Cells(x, opportunityNumCol).Value
            '    MSDForm.ListBox1.List(y, 2) = Worksheets("MSD Data").Cells(x, scopeCol).Value
            '    MSDForm.ListBox1.List(y, 3) = x
            '    MSDForm.ListBox1.List(y, 4) = Worksheets("MSD Data").Cells(x, ownerNumCol).Value
            '    MSDForm.ListBox1.List(y, 5) = Worksheets("MSD Data").Cells(x, creatorNumCol).Value
            '
            '    y = y + 1
            'End If
            
            
            If MSDForm.ComboBox2.ListCount = 0 Then
                MSDForm.ComboBox2.AddItem Worksheets("MSD Data").Cells(x, creatorNumCol).Value
            Else
                For z = 0 To MSDForm.ComboBox2.ListCount - 1
                    If MSDForm.ComboBox2.List(z) = Worksheets("MSD Data").Cells(x, creatorNumCol).Value Then
                        GoTo repeatEmail2
                    End If
                Next z
                MSDForm.ComboBox2.AddItem Worksheets("MSD Data").Cells(x, creatorNumCol).Value
repeatEmail2:
            End If
            x = x + 1
        Loop Until Worksheets("MSD Data").Cells(x, 1).Value = ""
        End If
        
'        x = 2
'        y = 0
'        Do
'            If MSDForm.ComboBox2.ListCount = 0 Then
'                MSDForm.ComboBox2.AddItem Worksheets("MSD Data").Cells(x, creatorNumCol).Value
'            Else
'                For z = 0 To MSDForm.ComboBox2.ListCount - 1
'                    If MSDForm.ComboBox2.List(z) = Worksheets("MSD Data").Cells(x, creatorNumCol).Value Then
'                        GoTo repeatEmail2
'                    End If
'                Next z
'                MSDForm.ComboBox2.AddItem Worksheets("MSD Data").Cells(x, creatorNumCol).Value
'repeatEmail2:
'            End If
'            x = x + 1
'        Loop Until Worksheets("MSD Data").Cells(x, 1).Value = ""
        
        
        
        MSDForm.Show
        'Form has ShowModal = True, program will hald until the form has been closed through a selection
                
                
        'loop through form listbox to find selected value
        y = 0
        Do
            If MSDForm.ListBox1.Selected(y) Then
                GoTo SelectionFound
            End If
            y = y + 1
        Loop Until y >= MSDForm.ListBox1.ListCount
        
        Exit Sub 'no entry selected
SelectionFound:
        'y has value of selected listbox entry
        x = MSDForm.ListBox1.List(y, 3)
        'x has index for sheet entry
        
        customerS = Worksheets("MSD Data").Cells(x, customerCol).Value
        accountS = Worksheets("MSD Data").Cells(x, accountCol).Value
        streetAddressS = Worksheets("MSD Data").Cells(x, streetAddressCol).Value
        stateAddressS = Worksheets("MSD Data").Cells(x, stateAddressCol).Value
        zipAddressS = Worksheets("MSD Data").Cells(x, zipAddressCol).Value
        contactS = Worksheets("MSD Data").Cells(x, contactCol).Value
        opportunityNumS = Worksheets("MSD Data").Cells(x, opportunityNumCol).Value
        scopeS = Worksheets("MSD Data").Cells(x, scopeCol).Value
        cityS = Worksheets("MSD Data").Cells(x, cityCol).Value
        CountryS = Worksheets("MSD Data").Cells(x, CountryCol).Value
        contactEmailS = Worksheets("MSD Data").Cells(x, contactEmailCol).Value
'        entityS = Worksheets("MSD Data").Cells(x, entityCol).Value
'        versionS = Worksheets("MSD Data").Cells(x, versionCol).Value
        If MSDForm.ComboBox1.Value <> "" Then
            ownerNumS = Worksheets("MSD Data").Cells(x, ownerNumCol).Value
        Else
            ownerNumS = Worksheets("MSD Data").Cells(x, creatorNumCol).Value
        End If
        IDS = Worksheets("MSD Data").Cells(x, IDCol).Value
        'sx(0) = worksheets("MSD Data").Cells(CCNrow, 2).Value
        
'        Workbooks(currentFile).Activate
        Worksheets("Summary").Cells(37, 4).Value = customerS
        [customer] = customerS
        Worksheets("Summary").Cells(38, 4).Value = accountS
        If InStr(contactS, ",") > 0 Then
            Worksheets("Summary").Cells(39, 4).Value = Mid(contactS, InStr(contactS, ",") + 2) & " " & Mid(contactS, 1, InStr(contactS, ",") - 1)
        Else
            Worksheets("Summary").Cells(39, 4).Value = contactS
        End If
        Worksheets("Summary").Cells(40, 4).Value = streetAddressS
        Worksheets("Summary").Cells(41, 4).Value = ""
'        Worksheets("summary").Cells(39, 4).Value = suiteS
        Worksheets("summary").Cells(42, 4).Value = cityS
        Worksheets("Summary").Cells(43, 4).Value = stateAddressS
        Worksheets("Summary").Cells(44, 4).Value = zipAddressS
        Worksheets("Summary").Cells(45, 4).Value = CountryS
        Worksheets("summary").Cells(46, 4).Value = contactEmailS
        
        'Worksheets("Summary").Cells(23, 6).Value = entityS
        'If entityS = "UL AG" Then
        '    Worksheets("Summary").Cells(26, 6).Value = "Ringstrasse 1"
        '    Worksheets("Summary").Cells(27, 6).Value = ""
        '    Worksheets("Summary").Cells(28, 6).Value = "8603 Schwerzenbach"
        '    Worksheets("Summary").Cells(29, 6).Value = ""
        '    Worksheets("Summary").Cells(30, 6).Value = ""
        '    Worksheets("Summary").Cells(31, 6).Value = "Switzerland"
        'End If
        'If entityS = "UL LLC" Then
        '    Worksheets("Summary").Cells(26, 6).Value = "333 Pfingsten Road"
        '    Worksheets("Summary").Cells(27, 6).Value = ""
        '    Worksheets("Summary").Cells(28, 6).Value = "Northbrook"
        '    Worksheets("Summary").Cells(29, 6).Value = "IL"
        '    Worksheets("Summary").Cells(30, 6).Value = "60062-2096"
        '    Worksheets("Summary").Cells(31, 6).Value = "USA"
        'End If
        'Worksheets("Summary").Cells(25, 6).Value = Replace(Replace(MSDForm.ComboBox1.Value, "@ul.com", ""), ".", " ")
        If MSDForm.ComboBox1.Value <> "" Then
            tempS = MSDForm.ComboBox1.Value
            index1 = ownerNumCol
        End If
        If MSDForm.ComboBox2.Value <> "" Then
            tempS = MSDForm.ComboBox2.Value
            index1 = creatorNumCol
        End If
        If MSDForm.ComboBox1.Value = "" And MSDForm.ComboBox2.Value = "" Then
            If MSDForm.ComboBox3.Value = "Owner" Then
                index1 = ownerNumCol
            End If
            If MSDForm.ComboBox3.Value = "Creator" Then
                index1 = creatorNumCol
            End If
            tempS = Worksheets("MSD Data").Cells(x, index1).Value
        End If
        
        Worksheets("Proposal letter").Cells(10, 3).Value = Replace(Replace(tempS, "@ul.com", ""), ".", " ")
        Worksheets("Summary").Cells(48, 4).Value = Replace(Replace(tempS, "@ul.com", ""), ".", " ")
        Worksheets("Proposal letter").Cells(8, 3).Value = scopeS
        Worksheets("Proposal letter").Cells(13, 3).Value = tempS
     
        [quote_number] = opportunityNumS
        [project_description] = scopeS
        'Worksheets(4).Cells(2, 4).Value = scopeS
        '[employee_number] = IDS 'Environ("username")

' lookup customer address by account #. Use ENVS procedures for IFVS
        If Sheets("Summary").Cells(36, 4).Value <> "" Then
        '    Call PMcheckIFVS(False)
        End If

' lookup employee address in directory. Use previous employee ID procedure
'        Call PMEmployeeLookup2
    'End If
'    If MSDForm.ComboBox1.Value <> "" Then
'        index1 = ownerNumCol
'    Else
'        index1 = creatorNumCol
'    End If
    [employee_number] = Worksheets("MSD Data").Cells(x, index1 - 1).Value
    Worksheets("Proposal letter").Cells(12, 3).Value = Worksheets("MSD Data").Cells(x, index1 + 1).Value 'Replace(div.innerText, "Work phone", "")
    Worksheets("Proposal letter").Cells(11, 3).Value = Worksheets("MSD Data").Cells(x, index1 + 2).Value 'doc.getElementById("ProfileViewer_ValueTitle").innerText
    Worksheets("Summary").Cells(49, 4).Value = Worksheets("MSD Data").Cells(x, index1 + 2).Value 'doc.getElementById("ProfileViewer_ValueTitle").innerText
            
On Error GoTo errHandler:

'    ChDrive SaveDriveDir
'    ChDir SaveDriveDir
       
'Sheets("Needs Assessment").Select
    
Cancelled:
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
Exit Sub

errHandler:
    MsgBox "There is an error"
End Sub




Sub PMEmployeeLookup() 'obsolete
Dim s1 As String, s2 As String, x1 As Long, x2 As Long, s3 As String
Dim pWebAddress As String
Dim hName As String, rName As String, hNum As String, rNum As String
Dim IE As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object
Dim doc As HTMLDocument
Dim elem As HTMLBaseElement, counter As Long

'hName = Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value

'pWebAddress = "http://sharepoint.ul.com/sites/search/Pages/peopleresults.aspx#k=" & Replace(hName, " ", "%20")

Set IE = New InternetExplorer
IE.Top = 0
IE.Left = 0
IE.Height = 0
IE.Width = 0
IE.Visible = True
'IE.navigate pWebAddress

Dim sh
Dim eachIE

Dim empID As String
empID = [employee_number]

appendID:
Debug.Print empID
If Len(empID) < 5 Then
    empID = "0" & empID
    GoTo appendID
End If


pWebAddress = "http://mysharepoint.ul.com/Person.aspx?accountname=GLOBAL%5C" & empID
IE.navigate pWebAddress

While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document


'pull employee directory info here
For Each div In doc.getElementsByTagName("div")
    If InStr(div.innerText, "Street Address") > 0 Then
        Worksheets("Summary").Cells(26, 6).Value = Replace(div.innerText, "Street Address", "")
    End If
    If InStr(div.innerText, "City") > 0 Then
        Worksheets("Summary").Cells(28, 6).Value = Replace(div.innerText, "City", "")
    End If
    If InStr(div.innerText, "State Province") > 0 Then
        Worksheets("Summary").Cells(29, 6).Value = Replace(div.innerText, "State Province", "")
    End If
    If InStr(div.innerText, "Postal Code") > 0 Then
        Worksheets("Summary").Cells(30, 6).Value = Replace(div.innerText, "Postal Code", "")
    End If
    If InStr(div.innerText, "country") > 0 Then
        Worksheets("Summary").Cells(31, 6).Value = Replace(div.innerText, "country", "")
    End If
Next div

'Worksheets("Needs Assessment").Cells(hemailrow(), 2).Value = Replace(doc.getElementById("ProfileViewer_ValueWorkEmail").innerText, vbLf, "")
'Worksheets("Needs Assessment").Cells(hTitlerow(), 2).Value = doc.getElementById("ProfileViewer_ValueTitle").innerText
'Set li = doc.getElementById("ProfileViewer_ProfileDetails")
'For Each div In doc.getElementsByTagName("div")
'    If InStr(div.innerText, "Organization") > 0 Then
'        Worksheets("Needs Assessment").Cells(hDepartmentrow(), 2).Value = Replace(div.innerText, "Organization", "")
'    End If
'Next div


IE.Quit
Set IE = Nothing
Set doc = Nothing

errorEnd:

End Sub
Sub PMEmployeeLookup2()
Dim s1 As String, s2 As String, x1 As Long, x2 As Long, s3 As String
Dim pWebAddress As String
Dim hName As String, rName As String, hNum As String, rNum As String
Dim IE As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object
Dim doc As HTMLDocument
Dim elem As HTMLBaseElement, counter As Long

'hName = Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value

'pWebAddress = "http://sharepoint.ul.com/sites/search/Pages/peopleresults.aspx#k=" & Replace(hName, " ", "%20")

'Set IE = New InternetExplorer
'IE.Visible = True
'IE.navigate pWebAddress

Dim sh
Dim eachIE

Dim empID As String
empID = [employee_number]

appendID:
Debug.Print empID
If Len(empID) < 5 Then
    empID = "0" & empID
    GoTo appendID
End If


hName = Worksheets("Summary").Cells(48, 4).Value

pWebAddress = "http://sharepoint.ul.com/sites/search/Pages/peopleresults.aspx#k=" & Replace(hName, " ", "%20")

Set IE = New InternetExplorer
IE.Top = 0
IE.Left = 0
IE.Height = 0
IE.Width = 0
IE.Visible = True
IE.navigate pWebAddress

'Dim sh
'Dim eachIE
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Sleep 100
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

For counter = 0 To 20
    Set doc = IE.Document
    If Not (doc.getElementById("NameField") Is Nothing) Then
        Exit For
    End If
    Sleep 250
Next counter
Set doc = IE.Document

login:
If doc.getElementById("NameField") Is Nothing Then
'If doc.getElementById("imgPrefetch") Is Nothing Then
    MsgBox "Log into VPN"
    Sleep 200
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If



Dim x As Long
x = 0
Set li = doc.getElementById("NameField")
            s1 = Mid(li.innerHTML, InStr(li.innerHTML, "http"), 68)
            hNum = Mid(s1, Len(s1) - 4, 5)
            [employee_number] = hNum
            

pWebAddress = "http://mysharepoint.ul.com/Person.aspx?accountname=GLOBAL%5C" & hNum
IE.navigate pWebAddress

While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document


'pull employee directory info here
For Each div In doc.getElementsByTagName("div")
    'If InStr(div.innerText, "Street Address") > 0 Then
    '    Worksheets("Proposal letter").Cells(26, 6).Value = Replace(div.innerText, "Street Address", "")
    'End If
    'If InStr(div.innerText, "City") > 0 Then
    '    Worksheets("Proposal letter").Cells(28, 6).Value = Replace(div.innerText, "City", "")
    'End If
    'If InStr(div.innerText, "State Province") > 0 Then
    '    Worksheets("Proposal letter").Cells(29, 6).Value = Replace(div.innerText, "State Province", "")
    'End If
    'If InStr(div.innerText, "Postal Code") > 0 Then
    '    Worksheets("Proposal letter").Cells(30, 6).Value = Replace(div.innerText, "Postal Code", "")
    'End If
    'If InStr(div.innerText, "country") > 0 Then
    '    Worksheets("Proposal letter").Cells(31, 6).Value = Replace(div.innerText, "country", "")
    'End If
    If InStr(div.innerText, "Work phone") > 0 Then
        Worksheets("Proposal letter").Cells(12, 3).Value = Replace(div.innerText, "Work phone", "")
    End If
Next div

'Worksheets("Proposal letter").Cells(13, 3).Value = Replace(doc.getElementById("ProfileViewer_ValueWorkEmail").innerText, vbLf, "")
Worksheets("Proposal letter").Cells(11, 3).Value = doc.getElementById("ProfileViewer_ValueTitle").innerText
Worksheets("Summary").Cells(49, 4).Value = doc.getElementById("ProfileViewer_ValueTitle").innerText
'Set li = doc.getElementById("ProfileViewer_ProfileDetails")
'For Each div In doc.getElementsByTagName("div")
'    If InStr(div.innerText, "Organization") > 0 Then
'        Worksheets("Needs Assessment").Cells(hDepartmentrow(), 2).Value = Replace(div.innerText, "Organization", "")
'    End If
'Next div


IE.Quit
Set IE = Nothing
Set doc = Nothing

errorEnd:

End Sub

Sub PMcheckIFVS(stayOpen As Boolean)

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, s3 As String
Dim pWebAddress As String, sh As Object, eachIE As Object
Dim tbl As Object, td As Object, fld As Object
Dim doc As HTMLDocument, doc2 As HTMLDocument

On Error GoTo errorEnd

'Call initializeConst
If Worksheets("Summary").Cells(38, 4).Value = "" Then
    Worksheets("Summary").Visible = True
    Worksheets("Summary").Select
    MsgBox ("Add account number")
    GoTo errorEnd
End If
pWebAddress = "http://ifvs.ul.com/Pages/FileDetails.aspx?action=FD"

Dim IE As InternetExplorer
Set IE = New InternetExplorer
IE.Top = 0
IE.Left = 0
'IE.Height = 0
'IE.Width = 0
IE.Visible = True
IE.navigate pWebAddress
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing
While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Sleep 50
Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document

login:
If doc.getElementById("txtFileNumber") Is Nothing Then
    MsgBox "Log into VPN"
    Sleep 200
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If


Dim x9 As HTMLBaseElement, x10 As HTMLBaseElement
Set x9 = doc.getElementById("txtAccNumber")

x9.Value = Worksheets("Summary").Cells(38, 4).Value
x9.innerText = Worksheets("Summary").Cells(38, 4).Value

Set x10 = doc.getElementById("btnSearch")
x10.Click
Sleep 500
'//*[@id="gvFile"]/tbody/tr/th[1]
Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Do
    Set doc = IE.Document
    DoEvents
Loop Until Not (doc.getElementById("gvFile") Is Nothing)
Sleep 50
Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document



'Set x9 = doc.getElementById("gvFile")
'If x9.Children(0).Children.Length = 1 Then
'    MsgBox "No entry in IFVS for account number. Customer information to be manually added to 'Summary' tab"
'    GoTo endSub
'End If
''For x = 1 To x9.Children(0).Children.Length - 4
'x = 1
'    'Debug.Print x9.Children(0).Children(x).Children(6).innerText
'    'results are in x9.Children(0).Children(x).Children(col#)
'    fullAddress = x9.Children(0).Children(x).Children(5).innerText
'    'Worksheets("Summary").Cells(28, 5).Value
'    fullAddress = Replace(fullAddress, vbLf, "") 'remove carriage returns from html
'    cityAddress = Replace(fullAddress, Worksheets("Summary").Cells(40, 4).Value, "")
'    cityAddress = Replace(cityAddress, Worksheets("Summary").Cells(41, 4).Value, "")
'    cityAddress = Replace(cityAddress, Worksheets("Summary").Cells(42, 4).Value, "")
'    Worksheets("Summary").Cells(45, 4).Value = Mid(cityAddress, Len(cityAddress) - 2)
'    cityAddress = Mid(cityAddress, 1, Len(cityAddress) - 3)
'    Worksheets("Summary").Cells(42, 4).Value = cityAddress
    
'Next x
            
endSub:

Set doc = Nothing
If stayOpen = False Then
    IE.Quit
End If
Set IE = Nothing
errorEnd:

End Sub
Sub PMcheckIFVS2(stayOpen As Boolean) 'original renamed to 2

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, s3 As String
Dim pWebAddress As String, sh As Object, eachIE As Object
Dim tbl As Object, td As Object, fld As Object
Dim doc As HTMLDocument, doc2 As HTMLDocument

'Call initializeConst
If Worksheets("Summary").Cells(24, 5).Value = "" Then
    Worksheets("Summary").Visible = True
    Worksheets("Summary").Select
    MsgBox ("Add account number")
    GoTo errorEnd
End If
pWebAddress = "http://ifvs.ul.com/Pages/FileDetails.aspx?action=FD"

Dim IE As InternetExplorer
Set IE = New InternetExplorer
IE.Top = 0
IE.Left = 0
IE.Height = 0
IE.Width = 0
IE.Visible = True
IE.navigate pWebAddress
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing
While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Sleep 50
Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document

login:
If doc.getElementById("txtFileNumber") Is Nothing Then
    MsgBox "Log into VPN"
    Sleep 200
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If


Dim x9 As HTMLBaseElement, x10 As HTMLBaseElement
Set x9 = doc.getElementById("txtAccNumber")

x9.Value = [account_number]
x9.innerText = [account_number]

Set x10 = doc.getElementById("btnSearch")
x10.Click
Sleep 500
'//*[@id="gvFile"]/tbody/tr/th[1]
Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Do
    Set doc = IE.Document
    DoEvents
Loop Until Not (doc.getElementById("gvFile") Is Nothing)
Sleep 50
Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document



Set x9 = doc.getElementById("gvFile")
If x9.Children(0).Children.Length = 1 Then
    MsgBox "No entry in IFVS for account number. Customer information to be manually added to 'Summary' tab"
    GoTo endSub
End If
'For x = 1 To x9.Children(0).Children.Length - 4
x = 1
    'Debug.Print x9.Children(0).Children(x).Children(6).innerText
    'results are in x9.Children(0).Children(x).Children(col#)
    fullAddress = x9.Children(0).Children(x).Children(5).innerText
    'Worksheets("Summary").Cells(28, 5).Value
    fullAddress = Replace(fullAddress, vbLf, "") 'remove carriage returns from html
    cityAddress = Replace(fullAddress, Worksheets("Summary").Cells(26, 5).Value, "")
    cityAddress = Replace(cityAddress, Worksheets("Summary").Cells(30, 5).Value, "")
    cityAddress = Replace(cityAddress, Worksheets("Summary").Cells(29, 5).Value, "")
    Worksheets("Summary").Cells(31, 5).Value = Mid(cityAddress, Len(cityAddress) - 2)
    cityAddress = Mid(cityAddress, 1, Len(cityAddress) - 3)
    Worksheets("Summary").Cells(28, 5).Value = cityAddress
    
'Next x
            
endSub:

Set doc = Nothing
If stayOpen = False Then
    IE.Quit
End If
Set IE = Nothing
errorEnd:

End Sub
Sub QuoteLetter() ' populates and saves word version of NoA to desktop

Dim oEmbFile As Object, objWod As Object, objDoc As Word.Document
Dim WDObj As Object
Dim objDoc2 As Word.Document
    Dim objWord As Word.Application, rngStory As Object, myStoryRange As Range
    Dim objSelection
    Dim SaveDriveDir As String, mypath As String
    Dim fName As Variant
    Dim l As Long
    Dim CName As String

Application.DisplayAlerts = False
Application.ScreenUpdating = False


'Set objWord = CreateObject("Word.Application")
'Set objDoc = objWord.Documents.Add

Set oEmbFile = ThisWorkbook.Sheets("Quote letter").OLEObjects(1).Duplicate
oEmbFile.Verb Verb:=xlOpen

Dim num As Long

'num = 0 'search only first storyrange
'Set objWord = CreateObject("Word.Application")
Set objDoc = oEmbFile.Object 'objWord.Documents.Open(FName)
Set objWord = objDoc.Application
'objWord.Visible = True 'False

'If Worksheets("Needs Assessment").Cells(16, 2) = "" Then
'    Call getCustInfo
'End If

'''Need template quote letter, then can bookmark/markup as needed for below replacement operations
With objDoc.StoryRanges(1).Find
    .Text = "<<UL site>>"
    .Replacement.Text = Worksheets("Summary").Cells(23, 6).Value
    .Wrap = wdFindContinue
    .Execute Replace:=wdReplaceAll
End With
With objDoc.StoryRanges(1).Find
    .Text = "<<UL address>>"
    s1 = Worksheets("Summary").Cells(26, 6).Value & vbCr & Worksheets("Summary").Cells(28, 6).Value
    If Worksheets("Summary").Cells(29, 6).Value <> "" Then
        s1 = s1 & ", " & Worksheets("Summary").Cells(29, 6).Value
    End If
    If Worksheets("Summary").Cells(30, 6).Value <> "" Then
        s1 = s1 & " " & Worksheets("Summary").Cells(30, 6).Value
    End If
    '.Replacement.Text = Worksheets("Summary").Cells(26, 6).Value & vbCr & Worksheets("Summary").Cells(28, 6).Value & ", " & Worksheets("Summary").Cells(29, 6).Value & " " & Worksheets("Summary").Cells(30, 6).Value & vbCr & Worksheets("Summary").Cells(31, 6).Value
    .Replacement.Text = s1 & vbCr & Worksheets("Summary").Cells(31, 6).Value
    .Wrap = wdFindContinue
    .Execute Replace:=wdReplaceAll
End With
With objDoc.StoryRanges(1).Find
    .Text = "<<customer>>"
    .Replacement.Text = Worksheets("Summary").Cells(23, 5).Value
    .Wrap = wdFindContinue
    .Execute Replace:=wdReplaceAll
End With
With objDoc.StoryRanges(1).Find
    .Text = "<<account #>>"
    .Replacement.Text = Worksheets("Summary").Cells(24, 5).Value
    .Wrap = wdFindContinue
    .Execute Replace:=wdReplaceAll
End With
With objDoc.StoryRanges(1).Find
    .Text = "<<address>>"
    s1 = Worksheets("Summary").Cells(26, 5).Value & vbCr
    If Worksheets("Summary").Cells(27, 5).Value <> "" Then
        s1 = s1 & "Suite " & Worksheets("Summary").Cells(27, 5).Value & vbCr
    End If
    s1 = s1 & Worksheets("Summary").Cells(28, 5).Value & ", " & Worksheets("Summary").Cells(29, 5).Value & " " & Worksheets("Summary").Cells(30, 5).Value & vbCr & Worksheets("Summary").Cells(31, 5).Value
    
    .Replacement.Text = s1
    .Wrap = wdFindContinue
    .Execute Replace:=wdReplaceAll
End With
With objDoc.StoryRanges(1).Find
    .Text = "<<quote date>>"
    .Replacement.Text = Format(Date, "mm/dd/yyyy")
    .Wrap = wdFindContinue
    .Execute Replace:=wdReplaceAll
End With
With objDoc.StoryRanges(1).Find
    .Text = "<<valid until>> "
    'Debug.Print Format(DateValue(Format(Date, "mm/dd/yyyy")) + 60, "mm/dd/yyyy")
    .Replacement.Text = Format(DateValue(Format(Date, "mm/dd/yyyy")) + 60, "mm/dd/yyyy")
    .Wrap = wdFindContinue
    .Execute Replace:=wdReplaceAll
End With
With objDoc.StoryRanges(1).Find
    .Text = "<<opportunity/quote>>"
    .Replacement.Text = Replace(Sheets(4).Cells(4, 3).Value, "MSD ", "")
    .Wrap = wdFindContinue
    .Execute Replace:=wdReplaceAll
End With
With objDoc.StoryRanges(1).Find
    .Text = "<<quote #>>"
    .Replacement.Text = [quote_number]
    .Wrap = wdFindContinue
    .Execute Replace:=wdReplaceAll

End With
With objDoc.StoryRanges(1).Find
    .Text = "<<version>>"
    .Replacement.Text = Worksheets("Summary").Cells(37, 5).Value
    .Wrap = wdFindContinue
    .Execute Replace:=wdReplaceAll
End With
With objDoc.StoryRanges(1).Find
    .Text = "<<Project Description>>"
    .Replacement.Text = Sheets(4).Cells(2, 4).Value
    .Wrap = wdFindContinue
    .Execute Replace:=wdReplaceAll
End With
With objDoc.StoryRanges(1).Find
    .Text = "<<Sales Rep>>"
    .Replacement.Text = Worksheets("Summary").Cells(25, 6).Value
    .Wrap = wdFindContinue
    .Execute Replace:=wdReplaceAll
End With
With objDoc.StoryRanges(1).Find
    .Text = "<<sales rep phone>>"
    .Replacement.Text = Worksheets("Summary").Cells(32, 6).Value
    .Wrap = wdFindContinue
    .Execute Replace:=wdReplaceAll
End With
With objDoc.StoryRanges(1).Find
    .Text = "<<sales rep email>>"
    .Replacement.Text = getUserEmailAddress
    .Wrap = wdFindContinue
    .Execute Replace:=wdReplaceAll
End With

'''update table on page 2 with quote information



    'Dim objWord As Object ', rngStory As Object, myStoryRange As Range
    'Dim objDoc As Object
    'Dim SaveDriveDir As String, mypath As String
    'Dim fName As Variant
    'Dim l As Long
    'Dim sh As Shape, objOLE As OLEObject
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
'    SaveDriveDir = CurDir
'    'MyPath = Application.DefaultFilePath    'or use "C:\Data"
'    mypath = SaveDriveDir
'    ChDrive mypath
'    ChDir mypath
'    fName = Application.GetOpenFilename(Title:="Select TRF document") 'filefilter:="Rich*") '  Text Format (*.rtf*")
'  If fName = False Then
'        GoTo Cancelled:
'  End If

Dim fName2 As String
Dim zz As Long, zzz As Long, y As Long
Dim oWD As Document

'fName = UserForm1.Label1.Caption''
'y = 0
'zz = 1
'fName2 = fName
'Do
'If Mid(fName, zz, 1) = "\" Then
'    'FName2 = Mid(FName, zz + 1, Len(FName) - zz)
'    zzz = zz
'End If
'If Mid(fName, zz, 1) = "[" Then
'    y = 1
'    fName2 = Mid(fName, zzz + 1, zz - zzz - 1)
'End If
'If Mid(fName, zz, 1) = "." And y = 0 Then
'    fName2 = Mid(fName, zzz + 1, zz - zzz - 1)
'End If
'zz = zz + 1
'Loop Until zz = Len(fName)
'UserForm1.Label1.Caption = fName
''FName2 has file name without file path or extension, FName has complete file path

'On Error Resume Next

Dim oTable As Word.Table
Dim oCell As Word.Cell
Dim n1 As Long, n2 As Long, n3 As Long

Dim endColumn As Long, startRow As Long, endRow As Long, sTempLong As Long, sTempLongEnd As Long

Set oTable = objDoc.Tables(1)
endRow = oTable.Rows.Count
endColumn = oTable.Columns.Count
n1 = 0
Do
    oTable.Rows.Add oTable.Rows(2 + 2 * n1)
    oTable.Rows.Add oTable.Rows(2 + 2 * n1)
    oTable.Cell(2 + 2 * n1, 1).Range.Text = n1 + 1
    oTable.Cell(2 + 2 * n1, 2).Range.Text = "Performance Materials Services - " & Sheets("Summary").Cells(9 + n1, 5).Value
    oTable.Cell(2 + 2 * n1, 3).Range.Text = 1 ' [new_model_number] + [additional_model_number]
    oTable.Cell(2 + 2 * n1, 4).Range.Text = Sheets("Summary").Cells(9 + n1, 13).Value
    oTable.Cell(2 + 2 * n1, 5).Range.Text = Sheets("Summary").Cells(9 + n1, 13).Value
    oTable.Cell(3 + 2 * n1, 3).Range.Text = [certification_type]
    

    
'    n2 = 1
'    Do
'        ActiveSheet.Cells(startRow + n1, 8 + n2).Value = WorksheetFunction.Clean(oTable.Cell(n1, n2).Range.Text)
'        n2 = n2 + 1
'    Loop Until n2 > oTable.Rows(n1).Cells.Count '= endColumn
'    ActiveSheet.Cells(startRow + n1, 8).Value = n3
'    ActiveSheet.Cells(startRow + n1, 11).Value = n1
    
    n1 = n1 + 1
Loop Until Sheets("Summary").Cells(9 + n1, 5).Value = ""
oTable.Cell(oTable.Rows.Count - 1, 5).Range.Text = Sheets("Summary").Cells(17, 13).Value
oTable.Cell(oTable.Rows.Count, 5).Range.Text = Sheets("Summary").Cells(17, 13).Value

Set oTable = objDoc.Tables(2)
oTable.Cell(2, 1).Range.Text = Sheets("Summary").Cells(19, 5).Value
'''Assumptions needed?!?

'objDoc.Bookmarks("Assumptions").Range.InsertAfter Worksheets("Needs Assessment").Cells(25, 2).Value



NextStep:

'Sheets("Needs Assessment").Select
If [quote_number] = "" Then ' just for debugging
    mypath = getDirectory() & "quote number blank.pdf"
Else
    mypath = getDirectory() & [quote_number] & ".pdf"
End If
If Dir(mypath) <> "" Then
    SetAttr pathname:=mypath, Attributes:=vbNormal
    Kill mypath
End If

'objDoc.SaveAs fileName:=MyPath, FileFormat:=wdFormatPDF, WritePassword:="flexible", ReadOnlyRecommended:=True
objDoc.ExportAsFixedFormat OutputFileName:=mypath, ExportFormat:=wdExportFormatPDF, useISO19005_1:=True
SetAttr pathname:=mypath, Attributes:=vbReadOnly 'makes it read only but does not require password
'''need to open pdf and set security settings with password???


objDoc.Close
objWord.Quit

oEmbFile.Delete
Set oEmbFile = Nothing
Set objDoc = Nothing
Set objWord = Nothing

'Sheets("Needs Assessment").Select
Application.DisplayAlerts = True

Call QuoteEmail


Exit Sub
errHandler:
    MsgBox "There is an error"
End Sub
Sub ProposalLetter() ' populates and saves word version of NoA to desktop

Dim oEmbFile As Object, objWod As Object, objDoc As Word.Document
Dim WDObj As Object
Dim objDoc2 As Word.Document
    Dim objWord As Word.Application, rngStory As Object, myStoryRange As Range
    Dim objSelection
    Dim SaveDriveDir As String, mypath As String
    Dim fName As Variant
    Dim l As Long
    Dim CName As String
Dim oTable As Word.Table
Dim oCell As Word.Cell
Dim n1 As Long, n2 As Long, n3 As Long, x As Long
Dim s19 As String
Dim endColumn As Long, startRow As Long, endRow As Long, sTempLong As Long, sTempLongEnd As Long
Dim s2 As String, subjectS As String

With Sheets("Summary")
If .Cells(37, 4).Value = "" Or .Cells(39, 4).Value = "" Or .Cells(40, 4).Value = "" Or .Cells(42, 4).Value = "" Or .Cells(44, 4).Value = "" Or .Cells(45, 4).Value = "" Or .Cells(46, 4).Value = "" Then
    MsgBox "Customer information missing from Summary tab, please add the highlighted missing information and try again."
    Worksheets("Summary").Activate
    ActiveWindow.ScrollRow = 34
    ActiveWindow.ScrollColumn = 1
    Exit Sub
End If
End With

Application.DisplayAlerts = False
Application.ScreenUpdating = False


'Set objWord = CreateObject("Word.Application")
'Set objDoc = objWord.Documents.Add

Set oEmbFile = ThisWorkbook.Sheets("Proposal letter").OLEObjects(1).Duplicate
oEmbFile.Verb Verb:=xlOpen

Dim num As Long
s9 = Sheets("Proposal letter").Cells(2, 11).Value
x = 2
Do
    If InStr([region], Sheets("Proposal letter").Cells(x, 8).Value) > 0 Then
        Exit Do
    End If
    x = x + 1
Loop Until Sheets("Proposal letter").Cells(x, 8).Value = ""
'x has the index for language

'''example for language lookup
'Do
'    s9 = TranslateText(s9, "English", Sheets("Proposal letter").Cells(x, 10).Value) & vbCr
'Loop Until s9 <> ""

'num = 0 'search only first storyrange
'Set objWord = CreateObject("Word.Application")
Set objDoc = oEmbFile.Object 'objWord.Documents.Open(FName)
Set objWord = objDoc.Application
objWord.Visible = False

'If Worksheets("Needs Assessment").Cells(16, 2) = "" Then
'    Call getCustInfo
'End If

'''Need template quote letter, then can bookmark/markup as needed for below replacement operations
objDoc.Bookmarks("date").Range.InsertAfter Format(Date, "mmmm dd,yyyy")

'objDoc.Bookmarks("CompanyName").Range.InsertAfter [customer]
s1 = [customer] & vbCr & Worksheets("Summary").Cells(40, 4).Value & vbCr
If Worksheets("Summary").Cells(41, 4).Value <> "" Then
    s1 = s1 & "Suite " & Worksheets("Summary").Cells(41, 4).Value & vbCr
End If
s1 = s1 & Worksheets("Summary").Cells(42, 4).Value & ", " & Worksheets("Summary").Cells(43, 4).Value & " " & Worksheets("Summary").Cells(44, 4).Value & vbCr & Worksheets("Summary").Cells(45, 4).Value

objDoc.Bookmarks("OpportunityNumber").Range.InsertAfter [quote_number]
objDoc.Bookmarks("SalesRep").Range.InsertAfter Worksheets("Proposal letter").Cells(10, 3).Value
objDoc.Bookmarks("RepPhone").Range.InsertAfter Worksheets("Proposal letter").Cells(12, 3).Value
objDoc.Bookmarks("RepEmail").Range.InsertAfter Worksheets("Proposal letter").Cells(13, 3).Value
objDoc.Bookmarks("currency").Range.InsertAfter Mid([total_price], InStr([total_price], " ") + 1)

s2 = Replace(Replace(Worksheets("Summary").Cells(39, 4).Value, "MR. ", ""), "MS. ", "")
If InStr(s2, " ") > 0 Then
    s2 = Mid(s2, 1, InStr(s2, " ") - 1)
End If
s2 = "Dear " & StrConv(s2, vbProperCase)


y = 2
If InStr(Sheets("Summary").Cells(21, 4), "LTTA Program Assessment Services") > 0 And InStr(Sheets("Summary").Cells(22, 4), "LTTA") < 1 Then
    y = 3
End If
If InStr(Sheets("Summary").Cells(21, 4), "LTTA") > 0 And InStr(Sheets("Summary").Cells(21, 4), "LTTA Program Assessment Services") < 1 Then
    y = 4
End If


''''''

SelectLangForm.ComboBox1.AddItem "English"
SelectLangForm.ComboBox1.AddItem "Arabic"
SelectLangForm.ComboBox1.AddItem "Chinese (Simplified)"
SelectLangForm.ComboBox1.AddItem "Chinese (Traditional)"
SelectLangForm.ComboBox1.AddItem "Danish"
SelectLangForm.ComboBox1.AddItem "Dutch"
SelectLangForm.ComboBox1.AddItem "French"
SelectLangForm.ComboBox1.AddItem "German"
SelectLangForm.ComboBox1.AddItem "Greek"
SelectLangForm.ComboBox1.AddItem "Indonesian"
SelectLangForm.ComboBox1.AddItem "Italian"
SelectLangForm.ComboBox1.AddItem "Japanese"
SelectLangForm.ComboBox1.AddItem "Korean"
SelectLangForm.ComboBox1.AddItem "Portuguese"
SelectLangForm.ComboBox1.AddItem "Russian"
SelectLangForm.ComboBox1.AddItem "Spanish"
SelectLangForm.ComboBox1.AddItem "Thai"
SelectLangForm.ComboBox1.AddItem "Vietnamese"
SelectLangForm.ComboBox1.ListIndex = 0
SelectLangForm.Show
If SelectLangForm.ComboBox1.ListIndex > 0 Then
    GoTo Translated ''' use this to toggle translations for debugging
End If
''''''

objDoc.Bookmarks("LetterHeader").Range.InsertAfter Sheets("Proposal letter").Cells(y, 12).Value
objDoc.Bookmarks("CompanyAddress").Range.InsertAfter s1
objDoc.Bookmarks("contact").Range.InsertAfter s2
objDoc.Bookmarks("ProductServices").Range.InsertAfter "Subject: " & Sheets("Summary").Cells(3, 4).Value 'Sheets("Summary").Cells(18, 4).Value
objDoc.Bookmarks("RepTitle").Range.InsertAfter Worksheets("Proposal letter").Cells(11, 3).Value
objDoc.Bookmarks("PhoneS").Range.InsertAfter "Phone: "
objDoc.Bookmarks("EmailS").Range.InsertAfter "Email: "
objDoc.Bookmarks("SincerelyS").Range.InsertAfter "Sincerely: "
objDoc.Bookmarks("RequestS").Range.InsertAfter "Request Number: "
If y < 4 Then
    If y = 2 Then 'R2C2
        objDoc.Bookmarks("certification_type").Range.InsertAfter [certification_type]
    Else
        objDoc.Bookmarks("certification_type").Range.InsertAfter "Program Assessment - LTTA"
    End If
    objDoc.Bookmarks("total_price").Range.InsertAfter [total_price]
    objDoc.Bookmarks("Assumption").Range.InsertAfter Sheets("Summary").Cells(33, 4).Value ' Sheets(4).Cells(10, 40).Value 'R4C2
    objDoc.Bookmarks("ProjectDescription").Range.InsertAfter Sheets("Summary").Cells(3, 4).Value 'R1C2

    objDoc.Bookmarks("R1C1").Range.InsertAfter Sheets("Proposal letter").Cells(y, 13).Value
    objDoc.Bookmarks("R2C1").Range.InsertAfter Sheets("Proposal letter").Cells(y, 14).Value
    objDoc.Bookmarks("R3C1").Range.InsertAfter Sheets("Proposal letter").Cells(y, 15).Value
    objDoc.Bookmarks("R4C1").Range.InsertAfter Sheets("Proposal letter").Cells(y, 16).Value

    Set oTable = objDoc.Tables(2)
    oTable.Delete
Else
    Set oTable = objDoc.Tables(1)
    oTable.Delete
    Set oTable = objDoc.Tables(1)
    n1 = 0
    Do
        oTable.Rows.Add oTable.Rows(2 + n1)
        oTable.Cell(2 + n1, 1).Range.Text = n1 + 1
        oTable.Cell(2 + n1, 2).Range.Text = Sheets("Summary").Cells(21 + n1, 4).Value
        oTable.Cell(2 + n1, 3).Range.Text = Sheets("Summary").Cells(21 + n1, 26).Value
        oTable.Cell(2 + n1, 4).Range.Text = Sheets("Summary").Cells(21 + n1, 12).Value
        n1 = n1 + 1
    Loop Until Sheets("Summary").Cells(21 + n1, 4).Value = ""
    oTable.Cell(oTable.Rows.Count, 3).Range.Text = Sheets("Summary").Cells(31, 12).Value
End If
objDoc.Bookmarks("LetterFooter").Range.InsertAfter Sheets("Proposal letter").Cells(y, 17).Value
Set oTable = Nothing
s19 = Replace(Sheets("Proposal letter").Cells(y, 11).Value, vbLf, "<br>")
subjectS = Sheets("Summary").Cells(3, 4).Value & " - " & Worksheets(4).Cells(4, 3).Value & " " & [quote_number] & " *" & Sheets("Summary").Cells(48, 4).Value ' email subject

GoTo nottranslated
Translated:

Dim s12(19) As String
s12(0) = Sheets("Proposal letter").Cells(y, 11).Value ' email header
s12(1) = Sheets("Proposal letter").Cells(y, 12).Value ' letter header
s12(2) = Sheets("Proposal letter").Cells(y, 13).Value ' table R1C1
s12(3) = Sheets("Proposal letter").Cells(y, 14).Value ' table R2C1
s12(4) = Sheets("Proposal letter").Cells(y, 15).Value ' table R3C1
s12(5) = Sheets("Proposal letter").Cells(y, 16).Value ' table R4C1
s12(6) = Sheets("Proposal letter").Cells(y, 17).Value ' letter footer

s12(7) = s1 ' Customer name and address
s12(8) = "Request Number: " ' "Request Number"
s12(9) = "Subject: " & Sheets("Summary").Cells(3, 4).Value ' Subject: (subject)
s12(10) = Sheets(4).Cells(2, 4).Value ' R1C2
If y = 2 Then 'R2C2
    s12(11) = [certification_type]
Else
    s12(11) = "Program Assessment - LTTA"
End If
's12(11) = Sheets("Proposal letter").Cells(y, 17).Value 'R3C2
s12(12) = Sheets("Summary").Cells(33, 4).Value 'Sheets(4).Cells(10, 40).Value 'R4C2
s12(13) = "Sincerely" '"Sincerely"
s12(14) = Worksheets("Proposal letter").Cells(11, 3).Value ' handler title
s12(15) = "Phone: " ' "Phone:"
s12(16) = "Email: " ' "Email:"
s12(17) = s2 ' "Dear (name)
s12(18) = Worksheets(4).Cells(2, 4).Value & " - " & Worksheets(4).Cells(4, 3).Value & " " & [quote_number] & " *" & Sheets("Summary").Cells(48, 4).Value ' email subject

'Call TranslateTextArray(s12, "English", Sheets("Proposal letter").Cells(x, 10).Value)
Call TranslateTextArray(s12, "English", SelectLangForm.ComboBox1.Value)
s19 = s12(0)
s2 = s12(17)
s12(7) = s1 'rewrite over company name and address with orig info. Does not translate well...
subjectS = s12(18)
objDoc.Bookmarks("LetterHeader").Range.InsertAfter s12(1) 'okTranslate(Sheets("Proposal letter").Cells(y, 12).Value, x)
objDoc.Bookmarks("CompanyAddress").Range.InsertAfter s12(7)
objDoc.Bookmarks("contact").Range.InsertAfter s12(17)
objDoc.Bookmarks("ProductServices").Range.InsertAfter s12(9)
objDoc.Bookmarks("RepTitle").Range.InsertAfter s12(14)
objDoc.Bookmarks("PhoneS").Range.InsertAfter s12(15)
objDoc.Bookmarks("EmailS").Range.InsertAfter s12(16)
objDoc.Bookmarks("SincerelyS").Range.InsertAfter s12(13)
objDoc.Bookmarks("RequestS").Range.InsertAfter s12(8)

Dim s13() As String, s14() As String
n1 = 0
Do
    n1 = n1 + 1
Loop Until Sheets("Summary").Cells(21 + n1, 4).Value = ""
ReDim s13(n1 + 1)
ReDim s14(n1 + 1)
n1 = 0
Do
    s13(n1) = Sheets("Summary").Cells(21 + n1, 4).Value
    s14(n1) = Sheets("Summary").Cells(21 + n1, 26).Value
    n1 = n1 + 1
Loop Until Sheets("Summary").Cells(21 + n1, 4).Value = ""
Call TranslateTextArray(s13, "English", SelectLangForm.ComboBox1.Value)
Call TranslateTextArray(s14, "English", SelectLangForm.ComboBox1.Value)

If y < 4 Then
    If y = 2 Then
        objDoc.Bookmarks("certification_type").Range.InsertAfter s12(11) '[certification_type] 'okTranslate([certification_type], x)
    Else
        objDoc.Bookmarks("certification_type").Range.InsertAfter s12(11) '"Program Assessment - LTTA" 'okTranslate("Program Assessment - LTTA", x)
    End If
    objDoc.Bookmarks("total_price").Range.InsertAfter [total_price] 'okTranslate([total_price], x)
    objDoc.Bookmarks("Assumption").Range.InsertAfter s12(12) ' Sheets(4).Cells(10, 40).Value 'okTranslate(Sheets(4).Cells(10, 40).Value, x)
    objDoc.Bookmarks("ProjectDescription").Range.InsertAfter s12(10) 'Sheets(4).Cells(2, 4).Value 'okTranslate(Sheets(4).Cells(2, 4).Value, x)

    objDoc.Bookmarks("R1C1").Range.InsertAfter s12(2) 'okTranslate(Sheets("Proposal letter").Cells(y, 13).Value, x)
    objDoc.Bookmarks("R2C1").Range.InsertAfter s12(3) 'okTranslate(Sheets("Proposal letter").Cells(y, 14).Value, x)
    objDoc.Bookmarks("R3C1").Range.InsertAfter s12(4) 'okTranslate(Sheets("Proposal letter").Cells(y, 15).Value, x)
    objDoc.Bookmarks("R4C1").Range.InsertAfter s12(5) 'okTranslate(Sheets("Proposal letter").Cells(y, 16).Value, x)

    Set oTable = objDoc.Tables(2)
    oTable.Delete
Else
    Set oTable = objDoc.Tables(1)
    oTable.Delete
    Set oTable = objDoc.Tables(1)
    n1 = 0
    Do
        oTable.Rows.Add oTable.Rows(2 + n1)
        oTable.Cell(2 + n1, 1).Range.Text = n1 + 1
'        s99 = ""
'        Do
'            s99 = TranslateText(Sheets("Summary").Cells(21 + n1, 4).Value, "English", SelectLangForm.ComboBox1.Value)
'            s100 = TranslateText(Sheets("Summary").Cells(21 + n1, 26).Value, "English", SelectLangForm.ComboBox1.Value)
'        Loop Until s99 <> ""
'        oTable.Cell(2 + n1, 2).Range.Text = s99 'TranslateText(Sheets("Summary").Cells(21 + n1, 4).Value, "English", SelectLangForm.ComboBox1.Value)
'        oTable.Cell(2 + n1, 3).Range.Text = s100
        oTable.Cell(2 + n1, 2).Range.Text = s13(n1) 'TranslateText(Sheets("Summary").Cells(21 + n1, 4).Value, "English", SelectLangForm.ComboBox1.Value)
        oTable.Cell(2 + n1, 3).Range.Text = s14(n1)
        oTable.Cell(2 + n1, 4).Range.Text = Sheets("Summary").Cells(21 + n1, 12).Value 'TranslateText(Sheets("Summary").Cells(21 + n1, 12).Value, "English", SelectLangForm.ComboBox1.Value)
        n1 = n1 + 1
    Loop Until Sheets("Summary").Cells(21 + n1, 4).Value = ""
    oTable.Cell(oTable.Rows.Count, 3).Range.Text = Sheets("Summary").Cells(31, 12).Value
End If
objDoc.Bookmarks("LetterFooter").Range.InsertAfter s12(6) 'okTranslate(Sheets("Proposal letter").Cells(y, 17).Value, x)
Set oTable = Nothing

nottranslated:

Dim bkm As Bookmark
For Each bkm In objDoc.Bookmarks
    bkm.Delete
Next bkm

GoTo NextStep


'''below code kept for reference - OBSOLETE
With objDoc.StoryRanges(1).Find
    .Text = "<<Company Name>>"
    .Replacement.Text = [customer]
    .Wrap = wdFindContinue
    .Execute Replace:=wdReplaceAll
End With



NextStep:

'Sheets("Needs Assessment").Select
If [quote_number] = "" Then ' just for debugging
    mypath = getDirectory() & "quote number blank.pdf"
Else
    mypath = getDirectory() & [quote_number] & ".pdf"
End If
If Dir(mypath) <> "" Then
    SetAttr pathname:=mypath, Attributes:=vbNormal
    Kill mypath
End If

'objDoc.SaveAs fileName:=MyPath, FileFormat:=wdFormatPDF, WritePassword:="flexible", ReadOnlyRecommended:=True
'objWord.Visible = True
''AppActivate "Microsoft Word"
'objWord.Activate
objDoc.SaveAs2 Mid(mypath, 1, Len(mypath) - 4) & ".doc"
objDoc.Close

Set objWord = CreateObject("Word.Application")
Set objDoc = objWord.Documents.Open(Mid(mypath, 1, Len(mypath) - 4) & ".doc")
objWord.Visible = True
DoEvents
objWord.Activate
DoEvents

ProceedForm.Label1.Caption = "Confirm language of the proposal letter and proceed to email customer"
ProceedForm.Show
DoEvents
objWord.Activate
DoEvents
Do
    DoEvents
    Sleep 50
Loop Until ProceedForm.Visible = False

'Do
'DocOpen:
'    DoEvents
'    Sleep 100
'    If objWord.Documents.Count = 0 Then
'        Exit Do
'    End If
'    For x = 1 To objWord.Documents.Count
'        If objWord.Documents(x).Name = Mid(MyPath, 1, Len(MyPath) - 4) & ".doc" Then
'            GoTo DocOpen
'        End If
'    Next x
'    Exit Do 'only gets here if doc is closed
'
'
'    If objDoc Is Nothing Then
'        Exit Do
'    End If
'Loop
On Error GoTo alreadyClosed
objDoc.Save
objDoc.Close
objWord.Quit

alreadyClosed:
Set objWord = CreateObject("Word.Application")
Set objDoc = objWord.Documents.Open(Mid(mypath, 1, Len(mypath) - 4) & ".doc")

objDoc.ExportAsFixedFormat OutputFileName:=mypath, ExportFormat:=wdExportFormatPDF, useISO19005_1:=True
SetAttr pathname:=mypath, Attributes:=vbReadOnly 'makes it read only but does not require password
'''need to open pdf and set security settings with password???

objDoc.Close
objWord.Quit
Kill Mid(mypath, 1, Len(mypath) - 4) & ".doc"

oEmbFile.Delete
Set oEmbFile = Nothing
Set objDoc = Nothing
Set objWord = Nothing

'Sheets("Needs Assessment").Select
Application.DisplayAlerts = True


Call ProposalEmail(s19, s2, subjectS)


Exit Sub
errHandler:
    MsgBox "There is an error"
End Sub


Sub QuoteEmail()

Dim OutApp As Object, OutMail As Object, signature As String, sigString As String, ECD As String, l As Long, CName As String, HTMLStandards As String, HTMLAssumptions As String
Dim s2 As String
    
Set OutApp = CreateObject("Outlook.Application")
Set OutMail = OutApp.CreateItem(0)

On Error Resume Next

If [quote_number] = "" Then ' just for debugging
    mypath = getDirectory() & "quote number blank.pdf"
Else
    mypath = getDirectory() & [quote_number] & ".pdf"
End If

With ThisWorkbook
    With OutMail
        signature = Environ("appdata") & "\Microsoft\Signatures\"
        If Dir(signature, vbDirectory) <> vbNullString Then
            signature = signature & Dir$(signature & "*.htm")
        Else:
            signature = ""
        End If
        signature = CreateObject("Scripting.FileSystemObject").GetFile(signature).OpenAsTextStream(1, -2).ReadAll
        s2 = Replace(Replace(Worksheets("Summary").Cells(25, 5).Value, "MR. ", ""), "MS. ", "")
        s2 = Mid(s2, 1, InStr(s2, " ") - 1)
        s2 = StrConv(s2, vbProperCase)
        On Error Resume Next
        .To = Sheets("Summary").Cells(34, 5).Value
        .CC = ""
        '.BCC = "NAAHLeMailTasks@ul.com"
        '.Subject = scope & "quote" & quote# & "*" & SalesRepName
        '.Subject = Worksheets("Needs Assessment").Cells(Scoperow, 2).Value & " - Quote " & Worksheets("Needs Assessment").Cells(Quoterow(), 2) & " *" & Worksheets("Needs Assessment").Cells(hNamerow, 2).Value
        .Subject = Sheets("Summary").Cells(3, 4).Value & " - " & Worksheets(4).Cells(4, 3).Value & " " & [quote_number] & " *" & Sheets("Summary").Cells(25, 6).Value
'        .body = "Hello," & Chr(10) & Chr(10) & "We have received all necessary information and/or samples needed to proceed with this project " & _
'        "Please see attached for a letter containing important information, including our estimated completion date." & Chr(10) & Chr(10) & _
'        "If you have any questions, please contact me at any time." & signature
        .HTMLBody = "<BODY style=font-size:10pt;font-family:Arial>Dear " & s2 & ", <br> <br>" & _
         "Thank you for choosing UL! <br><br> Attached is the quote for your work request. Please review the letter and the associated assumptions. If you would like to accept the quote please reply to this e-mail and type ""ACCEPT"" at the beginning of the subject line. We will have the quote processed and prepared for our service fulfillment staff.<br><br>" & _
         "Please provide the following information with quote acceptance (if applicable):<br>" & _
         "-   Purchase order (PO) number<br>" & _
         "-   Bill-to location where the invoice for this project is to be sent<br>" & _
         "If you have any questions, please do not hesitate to contact me. I look forward to hearing from you!<br><br>" & signature
        .Display
        .Attachments.Add mypath
    End With
End With
    On Error GoTo 0

    Set OutMail = Nothing
    Set OutApp = Nothing


End Sub
Sub ProposalEmail(s9 As String, s2 As String, s12 As String)

s9 = s9 & vbCrLf

Dim OutApp As Object, OutMail As Object, signature As String, sigString As String, ECD As String, l As Long, CName As String, HTMLStandards As String, HTMLAssumptions As String
Dim x As Long
    
Set OutApp = CreateObject("Outlook.Application")
Set OutMail = OutApp.CreateItem(0)

On Error Resume Next

If [quote_number] = "" Then ' just for debugging
    mypath = getDirectory() & "quote number blank.pdf"
Else
    mypath = getDirectory() & [quote_number] & ".pdf"
End If


's9 = Sheets("Proposal letter").Cells(2, 11).Value
''''''
'y = 2
'If InStr(Sheets("Summary").Cells(21, 4), "LTTA Program Assessment Services") > 0 And InStr(Sheets("Summary").Cells(22, 4), "LTTA") < 1 Then
'    y = 3
'End If
'If InStr(Sheets("Summary").Cells(21, 4), "LTTA") > 0 And InStr(Sheets("Summary").Cells(21, 4), "LTTA Program Assessment Services") < 1 Then
'    y = 4
'End If
'
'x = 2
'Do
'    If InStr([region], Sheets("Proposal letter").Cells(x, 8).Value) > 0 Then
'        Exit Do
'    End If
'    x = x + 1
'Loop Until Sheets("Proposal letter").Cells(x, 8).Value = ""
'Do
'    s9 = okTranslate(Sheets("Proposal letter").Cells(y, 11).Value, x) 'TranslateText(s9, "English", Sheets("Proposal letter").Cells(x, 10).Value) & vbCr
'Loop Until s9 <> ""
''''''
'
'Debug.Print s9
'Debug.Print "Translating to " & Sheets("Proposal letter").Cells(x, 10).Value
With ThisWorkbook
    With OutMail
        signature = Environ("appdata") & "\Microsoft\Signatures\"
        If Dir(signature, vbDirectory) <> vbNullString Then
            signature = signature & Dir$(signature & "*.htm")
        Else:
            signature = ""
        End If
        signature = CreateObject("Scripting.FileSystemObject").GetFile(signature).OpenAsTextStream(1, -2).ReadAll
        's2 = Replace(Replace(Worksheets("Summary").Cells(39, 4).Value, "MR. ", ""), "MS. ", "")
        's2 = Mid(s2, 1, InStr(s2, " ") - 1)
        's2 = StrConv(s2, vbProperCase)
        On Error Resume Next
        .To = Sheets("Summary").Cells(46, 4).Value
        .CC = ""
        '.BCC = "NAAHLeMailTasks@ul.com"
        '.Subject = scope & "quote" & quote# & "*" & SalesRepName
        '.Subject = Worksheets("Needs Assessment").Cells(Scoperow, 2).Value & " - Quote " & Worksheets("Needs Assessment").Cells(Quoterow(), 2) & " *" & Worksheets("Needs Assessment").Cells(hNamerow, 2).Value
'        .Subject = Worksheets(4).Cells(2, 4).Value & " - " & Worksheets(4).Cells(4, 3).Value & " " & [quote_number] & " *" & Sheets("Summary").Cells(48, 4).Value
        .Subject = s12
        
        '.HTMLBody = "<BODY style=font-size:10pt;font-family:Arial>Dear " & s2 & ", <br> <br>" & _
        ' "Thank you for choosing UL! <br><br> Attached is the proposed prise estimate for your work request. Please review the letter and the associated assumptions. If you would like to accept the estimate, please reply to this e-mail with your acceptance. We will have the request processed and prepared for our service fulfillment staff.<br><br>" & _
        ' "Please provide the following information with the acceptance (if applicable):<br>" & _
        ' "-   Purchase order (PO) number<br>" & _
        ' "-   Bill-to location where the invoice for this project is to be sent<br><br>" & _
        ' "If you have any questions, please do not hesitate to contact me. I look forward to hearing from you!<br><br>" & signature
       
        .HTMLBody = "<BODY style=font-size:10pt;font-family:Arial>" & s2 & ", <br> <br>" & _
        Replace(s9, vbCr, "<br>") & "<br>" & signature
        
        .Display
        .Attachments.Add mypath
    End With
End With
    On Error GoTo 0

    Set OutMail = Nothing
    Set OutApp = Nothing


End Sub

Sub DiscountApprovalEmail()

Dim OutApp As Object, OutMail As Object, signature As String, sigString As String, ECD As String, l As Long, CName As String, HTMLStandards As String, HTMLAssumptions As String
Dim s2 As String
    
Set OutApp = CreateObject("Outlook.Application")
Set OutMail = OutApp.CreateItem(0)

On Error Resume Next

With ThisWorkbook
    With OutMail
        signature = Environ("appdata") & "\Microsoft\Signatures\"
        If Dir(signature, vbDirectory) <> vbNullString Then
            signature = signature & Dir$(signature & "*.htm")
        Else:
            signature = ""
        End If
        signature = CreateObject("Scripting.FileSystemObject").GetFile(signature).OpenAsTextStream(1, -2).ReadAll
        
        On Error Resume Next
        
        .To = Sheets("Summary").Cells(34, 5).Value
        .CC = ""
        '.BCC = "NAAHLeMailTasks@ul.com"
        .Subject = "A discount is requested for " & Sheets(4).Cells(4, 3).Value & " " & [quote_number] 'Worksheets(4).Cells(2, 4).Value & " - " & Worksheets(4).Cells(4, 3).Value & " " & [quote_number]
        .HTMLBody = "<BODY style=font-size:10pt;font-family:Arial>Dear " & "Sales Manager" & ", <br> <br>" & _
         "A discount is requested for " & Sheets(4).Cells(4, 3).Value & " " & [quote_number] & _
         "<br>Customer: " & [customer] & _
         "<br>Scope: " & Sheets(4).Cells(2, 4).Value & _
         "<br>Discount: " & Round(-1 * 100 * [discount_percent], 0) & "%" & _
         "<br>Discount Reason: " & [discount_reason] & _
         "<br>Total Price: " & [total_price] & _
         "<br><br>Please reply back with X in front of APPROVE or DISAPPROVE below.  If possible, please explain reason for DISAPPROVAL <br><br>" & _
        "<br>  _ APPROVE                    _ DISAPPROVE <br><br>" & signature
        .Display
'        .Attachments.Add mypath
    End With
End With
    On Error GoTo 0

    Set OutMail = Nothing
    Set OutApp = Nothing


End Sub

Attribute VB_Name = "ModuleQuoteToolAddon"
Sub Select10boxUpdate()
Dim nCol As Long, selCount As Long
'load previous item selections
If QuoteDBLookupForm.ComboBox2.ListIndex < 0 Then
    Exit Sub
End If

nCol = 22 + QuoteDBLookupForm.ComboBox2.ListIndex
Range(Worksheets("Scratch").Cells(2, nCol), Worksheets("Scratch").Cells(2, nCol).End(xlDown)).Value = ""
Debug.Print "nCol = " & nCol
selCount = 0
If QuoteDBLookupForm.ListBox4.ListCount > 0 Then
    For x = 1 To QuoteDBLookupForm.ListBox4.ListCount
        If QuoteDBLookupForm.ListBox4.Selected(x - 1) = True Then
            Worksheets("Scratch").Cells(selCount + 2, nCol).Value = x
            selCount = selCount + 1
        End If
        If selCount >= 10 Then
            Exit For 'ListBox4.Selected(x - 1) = False
        End If
    Next x
End If
End Sub

Sub CopyToolTabs()
    Dim s1 As String, y As Long, x As Long
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    s1 = ActiveWorkbook.Name
    y = 0
    x = 1
    Do
        If Sheets(x).Name = "Needs Assessment" Then
            y = 1
        End If
        
        If y = 1 Then
            Sheets(x).Delete
            x = x - 1
        End If
        x = x + 1
    Loop Until x = ActiveWorkbook.Sheets.Count
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    
    DoEvents

'remove current namespaces after worksheet removal
x = 1
Do
    If InStr(ActiveWorkbook.Names(x).Value, "#REF") > 0 Then
        ActiveWorkbook.Names(x).Delete
        x = x - 1
    End If
    x = x + 1
Loop Until x = ActiveWorkbook.Names.Count
    
    DoEvents
    
    Workbooks.Open fileName:= _
        "C:\Users\09049\Desktop\Tools\Flex tool - EPro Classic\Needs Assessment - Alternate - Copy.xlsm" _
        , UpdateLinks:=0
'remove any error namespaces in copy over workbook
    DoEvents
    
    Sheets("Needs Assessment").Select
    
    For x = 1 To ActiveWorkbook.Sheets.Count
        Sheets(x).Visible = True
    Next x
    
    'add blank sheet to avoid source file closure and error
    Sheets("Needs Assessment").Select
    Sheets.Add
    
    'Exit Sub
    DoEvents
    Sheets("Needs Assessment").Select
    ActiveWindow.ScrollWorkbookTabs Position:=xlLast
    Sheets(Array("Needs Assessment", "First time user", "Revenue", _
        "Task Document Download", "Projects", "Tasks", "DB Scratch", "Documents", _
        "Flex Info", "transmittal", "Scratch", "ECD", "TAT", _
        "PM Assumptions", "BMS Assumptions", "Assumptions", "Associated Projects", _
        "Task-scratch", _
        "BMS Items Required")).Select
    Sheets("Needs Assessment").Activate
    Sheets(Array("Lighting checklist", "Checklist", "MARKET_ACCESS", _
        "auto update", "Database lookup")).Select Replace:=False
    Sheets(Array("Needs Assessment", "First time user", "Revenue", _
        "Task Document Download", "Projects", "Tasks", "DB Scratch", "Documents", _
        "Flex Info", "transmittal", "Scratch", "ECD", "TAT", _
        "PM Assumptions", "BMS Assumptions", "Assumptions", "Associated Projects", _
        "Task-scratch", _
        "Database lookup")).Select
    Sheets("Database lookup").Activate
    Sheets(Array("BMS Items Required", "Lighting checklist", "Checklist", _
        "MARKET_ACCESS", "auto update")).Select Replace:=False
    Sheets(Array("Needs Assessment", "First time user", "Revenue", _
        "Task Document Download", "Projects", "Tasks", "DB Scratch", "Documents", _
        "Flex Info", "transmittal", "Scratch", "ECD", "TAT", _
        "PM Assumptions", "BMS Assumptions", "Assumptions", "Associated Projects", _
        "Task-scratch", _
        "BMS Items Required", "Lighting checklist", "Checklist", _
        "MARKET_ACCESS", "auto update", "Database lookup")).Move After:=Workbooks(s1).Sheets(Workbooks(s1).Sheets.Count)
    DoEvents
    
    Workbooks(s1).Activate
'rehide sheets
    y = 0
    x = 1
    Do
        If y = 1 Then
            Sheets(x).Visible = False
        End If
        If Sheets(x).Name = "Tasks" Then
            y = 1
        End If
        x = x + 1
    Loop Until x = ActiveWorkbook.Sheets.Count

Exit Sub
'setup macro updates
x = 2
Do
    Worksheets("auto update").Cells(x, 4).Value = "01/01/2017 07:42 AM"
    x = x + 1
Loop Until Worksheets("auto update").Cells(x, 4).Value = ""
Call updateMacrosFromDrive


End Sub

Sub updateQuoteDBForm()

''listbox4 update
'Dim nCol As Long, selCount As Long
''load previous item selections
'nCol = 22 + QuoteDBLookupForm.ComboBox2.ListIndex
'Range(Worksheets("Scratch").Cells(2, nCol), Worksheets("Scratch").Cells(2, nCol).End(xlDown)).Value = ""
'selCount = 0
'If QuoteDBLookupForm.ListBox4.ListCount > 0 Then
'    For x = 1 To QuoteDBLookupForm.ListBox4.ListCount
'        If selCount >= 10 Then
'            'ListBox4.Selected(x - 1) = False
'        End If
'        Debug.Print selCount
'        If QuoteDBLookupForm.ListBox4.Selected(x - 1) = True And selCount < 10 Then
'            Worksheets("Scratch").Cells(selCount + 2, nCol).Value = x
'            selCount = selCount + 1
'        End If
'    Next x
'End If

'update listbox1 (ie results box)
QuoteDBLookupForm.ListBox1.Clear
x = 1
Do
    QuoteDBLookupForm.ListBox1.AddItem
    z = 0
    Item = 0
    Do
        If Item >= 10 Then
            GoTo maxFields
            'Exit Do
        End If
        'Debug.Print z
        If QuoteDBLookupForm.ListBox4.Selected(z) = True Then
            y = 1
            Do
                If Worksheets("Database lookup").Cells(1, y).Value = QuoteDBLookupForm.ListBox4.List(z) Then
                    Exit Do
                End If
                y = y + 1
            Loop Until Worksheets("Database lookup").Cells(1, y).Value = ""
            'QuoteDBLookupForm.ListBox1.List(x - 1, Item) = Worksheets("Database lookup").Cells(x, z + 1).Value
            QuoteDBLookupForm.ListBox1.List(x - 1, Item) = Worksheets("Database lookup").Cells(x, y).Value
            'Debug.Print "add info " & Worksheets("Database lookup").Cells(x, z + 1).Value
            Item = Item + 1
        End If
        z = z + 1
    Loop Until z >= QuoteDBLookupForm.ListBox4.ListCount ' Worksheets("Database lookup").Cells(1, z + 1).Value = ""
maxFields:
    x = x + 1
Loop Until Worksheets("Database lookup").Cells(x, 1).Value = ""

End Sub

Sub ImportQuote()

If QuoteDBLookupForm.ComboBox2.ListIndex = 0 Then 'search by quote tool DB
    Call ImportQuoteDB
End If
If QuoteDBLookupForm.ComboBox2.ListIndex = 1 Then 'search by previous order DB
    Call ImportQuoteOrderDB
End If
End Sub

Sub ImportQuoteDB()
'We use the below location to create an OFFLINE/Local database. This is for
'times when people are not on the UL network, but still want to generate quotes.
'Once they connect back to the network, we merge the databases together. You may not need this.
Const DB_LOCATION = "C:\Users\09049\Desktop\Tools\Example_Database.accdb"
'Location of the database template file
Const OFFLINE_DB_TEMPLATE = ""
'Location of the server database file. Update your employee ID here if you want to use the
'database on your desktop
If Sheets(4).Name = "PM Pricing" Then
    SERVER_DB_LOCATION = "\\ul.sharepoint.com@SSL\DavWWWRoot\sites\pm\GCP\Pricing Tool\PM Safety Certification Quoting Tool\PM Quote Database.accdb"
Else
    SERVER_DB_LOCATION = "\\ul.sharepoint.com@SSL\DavWWWRoot\sites\AHL\AHL\Quoting Files\Example_Database.accdb"
End If
Debug.Print "Looking in server " & SERVER_DB_LOCATION

Dim SaveTime As Date
Dim db As DAO.Database
Dim rs As DAO.Recordset
Dim ValidQuote As Boolean
Dim ord As Boolean
Dim answer As Integer
Dim queryS As String
Dim x2 As Long, x3 As Long
Dim r1 As Range

Dim s1 As String
    'On Error GoTo ErrHandler:
QuoteDBLookupForm.ListBox1.Clear

For x = 2 To 10
    s1 = s1 & Worksheets("Scratch").Cells(x, 24).Value & "; "
Next x
QuoteDBLookupForm.ListBox1.AddItem

'assign headers based on selected items from listbox4
y = 0
For x = 1 To QuoteDBLookupForm.ListBox4.ListCount
    If QuoteDBLookupForm.ListBox4.Selected(x - 1) = True Then
        QuoteDBLookupForm.ListBox1.List(QuoteDBLookupForm.ListBox1.ListCount - 1, y) = QuoteDBLookupForm.ListBox4.List(x - 1)
        y = y + 1
    End If
    If y = 9 Then
        Exit For
    End If
Next x
    
    '//Table has a datecreated/datemodified timestamp for each record
    SaveTime = Now
    
    
  If QuoteDBLookupForm.TextBox1.Text <> "" Then
    If QuoteDBLookupForm.ComboBox1.List(QuoteDBLookupForm.ComboBox1.ListIndex) = "Employee_Number" Then
        If Mid(QuoteDBLookupForm.TextBox1.Text, 1, 1) = "0" Then
            Do
                QuoteDBLookupForm.TextBox1.Text = Mid(QuoteDBLookupForm.TextBox1.Text, 2)
            Loop Until Mid(QuoteDBLookupForm.TextBox1.Text, 1, 1) <> "0"
        End If
    End If
    
    Set r1 = Worksheets("Database lookup").Range(Worksheets("Database lookup").Cells(1, 1), Worksheets("Database lookup").Cells(1, 1).End(xlToRight))
    Range(r1, r1.End(xlDown)).Value = ""
    
    queryS = "[Region] LIKE '" & QuoteDBLookupForm.ComboBox5.List(QuoteDBLookupForm.ComboBox5.ListIndex) & "*'"
    If QuoteDBLookupForm.ComboBox1.ListIndex > -1 Then
        queryS = queryS & "AND [" & QuoteDBLookupForm.ComboBox1.List(QuoteDBLookupForm.ComboBox1.ListIndex) & "] LIKE '" & QuoteDBLookupForm.TextBox1.Text & "*'"
    End If
    If QuoteDBLookupForm.ComboBox3.ListIndex > -1 Then
        queryS = queryS & "AND [" & QuoteDBLookupForm.ComboBox3.List(QuoteDBLookupForm.ComboBox3.ListIndex) & "] LIKE '" & QuoteDBLookupForm.TextBox2.Text & "*'"
    End If
    If QuoteDBLookupForm.ComboBox4.ListIndex > -1 Then
        queryS = queryS & "AND [" & QuoteDBLookupForm.ComboBox4.List(QuoteDBLookupForm.ComboBox4.ListIndex) & "] LIKE '" & QuoteDBLookupForm.TextBox3.Text & "*'"
    End If
    Debug.Print queryS
    
    x2 = 0
    x3 = 0
    find1 = 0
    lCount = 0
    
'    '//Open Server Database
       Set db = DAO.Workspaces(0).OpenDatabase(SERVER_DB_LOCATION, , True)
    '//Open Customer Table
    If rs Is Nothing Then
    '    Set rs = db.OpenRecordset("Quote_Table", dbOpenDynaset)
        Set rs = db.OpenRecordset("Quote_Table", dbOpenSnapshot)
    End If
    
    rs.FindFirst (queryS)
    If rs.NoMatch Then
        QuoteDBLookupForm.ListBox1.AddItem
        QuoteDBLookupForm.ListBox1.List(QuoteDBLookupForm.ListBox1.ListCount - 1, 0) = "No matches found"
        GoTo cleanup
    Else
        Do While Not rs.NoMatch
            QuoteDBLookupForm.ListBox1.AddItem
            For z = 1 To y
                If rs.Fields(QuoteDBLookupForm.ListBox1.List(0, z - 1)).Value <> "" Then
                  If rs.Fields(QuoteDBLookupForm.ListBox1.List(0, z - 1)).Value <> "" Then
                    QuoteDBLookupForm.ListBox1.List(QuoteDBLookupForm.ListBox1.ListCount - 1, z - 1) = rs.Fields(QuoteDBLookupForm.ListBox1.List(0, z - 1)).Value
                  Else
                    QuoteDBLookupForm.ListBox1.List(QuoteDBLookupForm.ListBox1.ListCount - 1, z - 1) = ""
                  End If
                Else
                    QuoteDBLookupForm.ListBox1.List(QuoteDBLookupForm.ListBox1.ListCount - 1, z - 1) = ""
                End If
            Next z
            Debug.Print "found"
            If find1 = 0 Then
              For z = 0 To rs.Fields.Count - 1
              'grab all available field names
                Worksheets("Scratch").Cells(z + 2, 20 + QuoteDBLookupForm.ComboBox2.ListIndex).Value = rs.Fields(z).Name
                Worksheets("Database lookup").Cells(1, z + 1).Value = Worksheets("Scratch").Cells(z + 2, 20 + QuoteDBLookupForm.ComboBox2.ListIndex).Value
                'Range(r1, r1.End(xlDown)).Value = ""
                'Worksheets("Database lookup").Cells(QuoteDBLookupForm.ListBox1.ListCount, z + 1).Value = rs.Fields(z).Value
              Next z
              Worksheets("Database lookup").Range("A" & QuoteDBLookupForm.ListBox1.ListCount).CopyFromRecordset rs, 1
              find1 = 1
            Else
              Worksheets("Database lookup").Range("A" & QuoteDBLookupForm.ListBox1.ListCount).CopyFromRecordset rs, 1
            End If
            DoEvents
            rs.FindNext (queryS)
        Loop
        rs.FindNext (queryS)
    End If
  End If

cleanup:
    rs.Close
    Set rs = Nothing
    Set db = Nothing

End Sub


Sub ImportQuoteOrderDB()
'We use the below location to create an OFFLINE/Local database. This is for
'times when people are not on the UL network, but still want to generate quotes.
'Once they connect back to the network, we merge the databases together. You may not need this.
Const DB_LOCATION = "C:\Users\09049\Desktop\Tools\Example_Database.accdb"
Const OFFLINE_DB_TEMPLATE = ""
If Sheets(4).Name = "PM Pricing" Then
    SERVER_DB_LOCATION = "\\ul.sharepoint.com@SSL\DavWWWRoot\sites\pm\GCP\Pricing Tool\PM Safety Certification Quoting Tool\PM Project History.accdb"
Else
    SERVER_DB_LOCATION = "\\ul.sharepoint.com@SSL\DavWWWRoot\sites\AHL\AHL\Quoting Files\AHL Project History.accdb"
End If

Dim SaveTime As Date
Dim db As DAO.Database
Dim rs As DAO.Recordset
Dim ValidQuote As Boolean
Dim ord As Boolean
Dim answer As Integer
Dim queryS As String
Dim x2 As Long, x3 As Long
Dim r1 As Range

Dim s1 As String
    'On Error GoTo ErrHandler:
QuoteDBLookupForm.ListBox1.Clear

For x = 2 To 10
    s1 = s1 & Worksheets("Scratch").Cells(x, 24).Value & "; "
Next x
QuoteDBLookupForm.ListBox1.AddItem

'assign headers based on selected items from listbox4
y = 0
For x = 1 To QuoteDBLookupForm.ListBox4.ListCount
    If QuoteDBLookupForm.ListBox4.Selected(x - 1) = True Then
        QuoteDBLookupForm.ListBox1.List(QuoteDBLookupForm.ListBox1.ListCount - 1, y) = QuoteDBLookupForm.ListBox4.List(x - 1)
        y = y + 1
    End If
    If y = 9 Then
        Exit For
    End If
Next x
    
    '//Table has a datecreated/datemodified timestamp for each record
    SaveTime = Now
    
'    '//Open Server Database
       Set db = DAO.Workspaces(0).OpenDatabase(SERVER_DB_LOCATION)
    
    '//Open Customer Table
    If rs Is Nothing Then
        Set rs = db.OpenRecordset("Project History", dbOpenDynaset) 'Set rs = db.OpenRecordset("Quote_Table", dbOpenDynaset)
    End If
    
  If QuoteDBLookupForm.TextBox1.Text <> "" Then
    If QuoteDBLookupForm.ComboBox1.List(QuoteDBLookupForm.ComboBox1.ListIndex) = "Handler Employee Number" Then
        If Mid(QuoteDBLookupForm.TextBox1.Text, 1, 1) = "0" Then
            Do
                QuoteDBLookupForm.TextBox1.Text = Mid(QuoteDBLookupForm.TextBox1.Text, 2)
            Loop Until Mid(QuoteDBLookupForm.TextBox1.Text, 1, 1) <> "0"
        End If
    End If
    
    queryS = "[Region] LIKE '" & QuoteDBLookupForm.ComboBox5.List(QuoteDBLookupForm.ComboBox5.ListIndex) & "*'"
    If QuoteDBLookupForm.ComboBox1.ListIndex > -1 Then
        queryS = queryS & "AND [" & QuoteDBLookupForm.ComboBox1.List(QuoteDBLookupForm.ComboBox1.ListIndex) & "] LIKE '" & QuoteDBLookupForm.TextBox1.Text & "*'"
    End If
    If QuoteDBLookupForm.ComboBox3.ListIndex > -1 Then
        queryS = queryS & "AND [" & QuoteDBLookupForm.ComboBox3.List(QuoteDBLookupForm.ComboBox3.ListIndex) & "] LIKE '" & QuoteDBLookupForm.TextBox2.Text & "*'"
    End If
    If QuoteDBLookupForm.ComboBox4.ListIndex > -1 Then
        queryS = queryS & "AND [" & QuoteDBLookupForm.ComboBox4.List(QuoteDBLookupForm.ComboBox4.ListIndex) & "] LIKE '" & QuoteDBLookupForm.TextBox3.Text & "*'"
    End If
    Debug.Print queryS
    
Set r1 = Worksheets("Database lookup").Range(Worksheets("Database lookup").Cells(1, 1), Worksheets("Database lookup").Cells(1, 1).End(xlToRight))
Range(r1, r1.End(xlDown)).Value = ""
    
    x2 = 0
    x3 = 0
    find1 = 0
    lCount = 0
    
    rs.FindFirst (queryS)
    If rs.NoMatch Then
        QuoteDBLookupForm.ListBox1.AddItem
        QuoteDBLookupForm.ListBox1.List(QuoteDBLookupForm.ListBox1.ListCount - 1, 0) = "No matches found"
        GoTo cleanup
    Else
        Do While Not rs.NoMatch
            QuoteDBLookupForm.ListBox1.AddItem
            For z = 1 To y
                If rs.Fields(QuoteDBLookupForm.ListBox1.List(0, z - 1)).Value <> "" Then
                  If rs.Fields(QuoteDBLookupForm.ListBox1.List(0, z - 1)).Value <> "" Then
                    QuoteDBLookupForm.ListBox1.List(QuoteDBLookupForm.ListBox1.ListCount - 1, z - 1) = rs.Fields(QuoteDBLookupForm.ListBox1.List(0, z - 1)).Value
                  Else
                    QuoteDBLookupForm.ListBox1.List(QuoteDBLookupForm.ListBox1.ListCount - 1, z - 1) = ""
                  End If
                Else
                    QuoteDBLookupForm.ListBox1.List(QuoteDBLookupForm.ListBox1.ListCount - 1, z - 1) = ""
                End If
            Next z
            
            If find1 = 0 Then
              For z = 0 To rs.Fields.Count - 1
              'grab all available field names
                Worksheets("Scratch").Cells(z + 2, 20 + QuoteDBLookupForm.ComboBox2.ListIndex).Value = rs.Fields(z).Name
                Worksheets("Database lookup").Cells(1, z + 1).Value = Worksheets("Scratch").Cells(z + 2, 20 + QuoteDBLookupForm.ComboBox2.ListIndex).Value
                'Range(r1, r1.End(xlDown)).Value = ""
                'Worksheets("Database lookup").Cells(QuoteDBLookupForm.ListBox1.ListCount, z + 1).Value = rs.Fields(z).Value
              Next z
              Worksheets("Database lookup").Range("A" & QuoteDBLookupForm.ListBox1.ListCount).CopyFromRecordset rs, 1
              find1 = 1
            Else
              Worksheets("Database lookup").Range("A" & QuoteDBLookupForm.ListBox1.ListCount).CopyFromRecordset rs, 1
            End If

            DoEvents
            rs.FindNext (queryS)
        Loop
        rs.FindNext (queryS)
    End If
  End If

cleanup:
    rs.Close
    Set rs = Nothing
    Set db = Nothing

End Sub

Sub ImportQuoteLoad()

Dim x As Long, y As Long, y1 As Long, z As Long
Dim row As Range

'set variable start position in quote form. Starting row for fields differs between quote tools...
y = 0
Do
 y = y + 1
Loop Until Sheets(4).Cells(y, 3) = "CCN Selected"
y = y + 1
y1 = y
Sheets(4).Select
For x = 0 To QuoteDBLookupForm.ListBox1.ListCount - 1
    If QuoteDBLookupForm.ListBox1.Selected(x) Then
      If Sheets(4).Name = "PM Pricing" Then
        [employee_number] = Worksheets("Database lookup").Cells(x + 1, 2).Value
        [quote_number] = Worksheets("Database lookup").Cells(x + 1, 3).Value
        [customer] = Worksheets("Database lookup").Cells(x + 1, 4).Value
        [industry] = Worksheets("Database lookup").Cells(x + 1, 12).Value
        [discount_percent] = Worksheets("Database lookup").Cells(x + 1, 9).Value
        [new_model_number] = Worksheets("Database lookup").Cells(x + 1, 18).Value
        [additional_model_number] = Worksheets("Database lookup").Cells(x + 1, 19).Value
        Sheets(4).Cells(y, 8) = Worksheets("Database lookup").Cells(x + 1, 17).Value
        Sheets(4).Cells(y, 9) = Worksheets("Database lookup").Cells(x + 1, 31).Value
        Sheets(4).Cells(y, 10) = Worksheets("Database lookup").Cells(x + 1, 24).Value
        [total_price] = "=sum(J10:j16)" 'Sheets(4).Cells(10, 10).Value + Sheets(4).Cells(11, 10).Value + Sheets(4).Cells(12, 10).Value + Sheets(4).Cells(13, 10).Value + Sheets(4).Cells(14, 10).Value + Sheets(4).Cells(15, 10).Value + Sheets(4).Cells(16, 10).Value + Sheets(4).Cells(17, 10).Value
        Sheets(4).Cells(y, 3) = Worksheets("Database lookup").Cells(x + 1, 5).Value
'        Sheets(4).Cells(y, 4) = Worksheets("Database lookup").Cells(x + 1, 23).Value
        Sheets(4).Cells(y, 4) = Worksheets("Database lookup").Cells(x + 1, 39).Value
        Sheets(4).Cells(y, 6) = Worksheets("Database lookup").Cells(x + 1, 22).Value
        Sheets(4).Cells(y, 5) = Worksheets("Database lookup").Cells(x + 1, 39).Value
        Sheets(4).Cells(y, 7) = Worksheets("Database lookup").Cells(x + 1, 15).Value
        [modified_pricing_assumptions] = Worksheets("Database lookup").Cells(x + 1, 33).Value
        [Modified_New_Work_Eng_Hours] = Worksheets("Database lookup").Cells(x + 1, 34).Value
        [Modified_New_Work_Lab_hours] = Worksheets("Database lookup").Cells(x + 1, 35).Value
      Else
        [employee_number] = Worksheets("Database lookup").Cells(x + 1, 2).Value
        [quote_number] = Worksheets("Database lookup").Cells(x + 1, 3).Value
        [customer] = Worksheets("Database lookup").Cells(x + 1, 4).Value
        [industry] = Worksheets("Database lookup").Cells(x + 1, 12).Value
        [discount_percent] = Worksheets("Database lookup").Cells(x + 1, 9).Value
        [discount_reason] = Worksheets("Database lookup").Cells(x + 1, 10).Value
        Sheets(4).Cells(y, 3) = Worksheets("Database lookup").Cells(x + 1, 5).Value
        Sheets(4).Cells(y, 4) = Worksheets("Database lookup").Cells(x + 1, 15).Value
        Sheets(4).Cells(y, 8) = Worksheets("Database lookup").Cells(x + 1, 18).Value
        Sheets(4).Cells(y, 9) = Worksheets("Database lookup").Cells(x + 1, 19).Value
        Sheets(4).Cells(y, 10) = Worksheets("Database lookup").Cells(x + 1, 22).Value
        Sheets(4).Cells(y, 11) = Worksheets("Database lookup").Cells(x + 1, 23).Value
        [modified_pricing_assumptions] = Worksheets("Database lookup").Cells(x + 1, 33).Value
        [Modified_New_Work_Eng_Hours] = Worksheets("Database lookup").Cells(x + 1, 34).Value
        [Modified_New_Work_Lab_hours] = Worksheets("Database lookup").Cells(x + 1, 35).Value
        [Modified_AC_Eng_Hours] = Worksheets("Database lookup").Cells(x + 1, 36).Value
        [Modified_AC_Lab_Hours] = Worksheets("Database lookup").Cells(x + 1, 37).Value
        [Modified_Price] = Worksheets("Database lookup").Cells(x + 1, 38).Value
        [region] = Worksheets("Database lookup").Cells(x + 1, 39).Value
      End If
        y = y + 1
    End If
noCCN:
Next x
QuoteDBLookupForm.Hide
Exit Sub

ExportOrder:
y = 1
Do
    y = y + 1
Loop Until Worksheets("Database lookup").Cells(y + 1, 2).Value = ""

x = y
Do
    Debug.Print x
    If QuoteDBLookupForm.ListBox1.Selected(x - 1) = False Then
        Worksheets("Database lookup").Rows(x).Delete Shift:=xlUp
    End If
    x = x - 1
Loop Until x < 2

currentFile = ActiveWorkbook.Name

Sheets("Database lookup").Visible = True
Sheets("Database lookup").Select
Sheets("Database lookup").Copy

Workbooks(currentFile).Activate
Sheets("Database lookup").Visible = False
If Sheets(1).Name = "Needs Assessment" Then
    Sheets(1).Select
Else
    If Sheets(4).Visible = True Then
        Sheets(4).Select
    End If
End If

'''reactivate
GoTo debugEnd





''' below code not run, erase after debug...
Workbooks.Add
y = 1
ActiveSheet.Cells(1, 1).Value = "Handler Employee #"
ActiveSheet.Cells(1, 2).Value = "Sales Rep #"
ActiveSheet.Cells(1, 3).Value = "Quote #"
ActiveSheet.Cells(1, 4).Value = "CCN"
ActiveSheet.Cells(1, 5).Value = "Customer"
ActiveSheet.Cells(1, 6).Value = "Project Type"
ActiveSheet.Cells(1, 7).Value = "Oracle Service Type"
ActiveSheet.Cells(1, 8).Value = "Completed MM/YYYY"
ActiveSheet.Cells(1, 9).Value = "$ Amount"
ActiveSheet.Cells(1, 10).Value = "Project Name"
ActiveSheet.Cells(1, 11).Value = "Handler Name"
ActiveSheet.Cells(1, 12).Value = "Sales Rep Name"
ActiveSheet.Cells(1, 13).Value = "Oracle Product Type"
For x = 0 To QuoteDBLookupForm.ListBox1.ListCount - 1
    If QuoteDBLookupForm.ListBox1.Selected(x) Then
        ActiveSheet.Cells(y + 1, 1).Value = QuoteDBLookupForm.ListBox1.List(x, 0)
        ActiveSheet.Cells(y + 1, 2).Value = QuoteDBLookupForm.ListBox1.List(x, 1)
        ActiveSheet.Cells(y + 1, 3).Value = QuoteDBLookupForm.ListBox1.List(x, 2)
        ActiveSheet.Cells(y + 1, 4).Value = QuoteDBLookupForm.ListBox1.List(x, 3)
        ActiveSheet.Cells(y + 1, 5).Value = QuoteDBLookupForm.ListBox1.List(x, 4)
        ActiveSheet.Cells(y + 1, 6).Value = QuoteDBLookupForm.ListBox1.List(x, 5)
        ActiveSheet.Cells(y + 1, 7).Value = QuoteDBLookupForm.ListBox1.List(x, 6)
        ActiveSheet.Cells(y + 1, 8).Value = QuoteDBLookupForm.ListBox1.List(x, 7)
        ActiveSheet.Cells(y + 1, 9).Value = QuoteDBLookupForm.ListBox1.List(x, 8)
        ActiveSheet.Cells(y + 1, 10).Value = QuoteDBLookupForm.ListBox1.List(x, 9)
        ActiveSheet.Cells(y + 1, 11).Value = QuoteDBLookupForm.ListBox2.List(x, 0)
        ActiveSheet.Cells(y + 1, 12).Value = QuoteDBLookupForm.ListBox2.List(x, 1)
        ActiveSheet.Cells(y + 1, 13).Value = QuoteDBLookupForm.ListBox2.List(x, 2)
        y = y + 1
    End If
Next x
    Columns("A:M").Select
    Selection.Columns.AutoFit

debugEnd:

QuoteDBLookupForm.Hide
End Sub

Sub showQuoteDBLookup()

QuoteDBLookupForm.ListBox1.Clear
QuoteDBLookupForm.ComboBox1.Clear
QuoteDBLookupForm.ComboBox2.Clear
QuoteDBLookupForm.ComboBox3.Clear
QuoteDBLookupForm.ComboBox4.Clear
'Add lookup parameter, matching field name in database. Cause I'm too lazy to create a reference between the database parameter and a user friendly parameter...

QuoteDBLookupForm.ComboBox2.AddItem "Quote Tool database"
QuoteDBLookupForm.ComboBox2.AddItem "Order Info database"


QuoteDBLookupForm.ComboBox2.ListIndex = Worksheets("Scratch").Cells(2, 24).Value


x = 2
Do
    Debug.Print "looking in row " & x
    Debug.Print "adding value in column " & 20 + QuoteDBLookupForm.ComboBox2.ListIndex
    QuoteDBLookupForm.ComboBox1.AddItem Worksheets("Scratch").Cells(x, 20 + QuoteDBLookupForm.ComboBox2.ListIndex).Value
    QuoteDBLookupForm.ComboBox3.AddItem Worksheets("Scratch").Cells(x, 20 + QuoteDBLookupForm.ComboBox2.ListIndex).Value
    QuoteDBLookupForm.ComboBox4.AddItem Worksheets("Scratch").Cells(x, 20 + QuoteDBLookupForm.ComboBox2.ListIndex).Value
    x = x + 1
Loop Until Worksheets("Scratch").Cells(x, 20 + QuoteDBLookupForm.ComboBox2.ListIndex).Value = ""

'QuoteDBLookupForm.ComboBox2.AddItem "Quote Tool database"
'QuoteDBLookupForm.ComboBox2.AddItem "Order Info database"
'QuoteDBLookupForm.ComboBox2.ListIndex = Worksheets("Scratch").Cells(2, 24).Value

QuoteDBLookupForm.Top = Application.Top
QuoteDBLookupForm.Left = Application.Left
QuoteDBLookupForm.Show
QuoteDBLookupForm.CommandButton2.Caption = "Import selected results"

End Sub
Sub flexURL2()

Call initializeConst
Worksheets("Needs Assessment").Cells(Quoterow, 5).Value = ""
Worksheets("Needs Assessment").Cells(Projectrow, 5).Value = ""
Worksheets("Needs Assessment").Cells(4, 4).Value = "N/A"
Worksheets("Needs Assessment").Cells(5, 4).Value = "N/A"

Call showTaskForm

[employee_number] = Environ("username")
[quote_number] = Worksheets("Needs Assessment").Cells(Quoterow, 2).Value
[customer] = Worksheets("Needs Assessment").Cells(compNrow, 2).Value

sCCN = Worksheets("Needs Assessment").Cells(CCNrow, 2).Value

Dim xSelShp As Shape, xSelLst As Variant, i As Integer
Set xSelShp = ActiveSheet.Shapes(Application.Caller)
Set xLstbox = ActiveSheet.ListBox5A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'xSelShp.TextFrame2.TextRange.Characters.Text = "Select CCN"
For i = 0 To (xLstbox.ListCount - 1)
    Debug.Print Mid(xLstbox.List(i), 1, 4) & " - " & Mid(sCCN, 1, 4)
    If Mid(xLstbox.List(i), 1, 4) = Mid(sCCN, 1, 4) Then
        Debug.Print "CCN matched"
        MyArray(ArrayIndex) = xLstbox.List(i)
        ArrayIndex = ArrayIndex + 1
    End If
Next i
Debug.Print "xSelLst = " & xSelLst
If xSelLst <> "" Then
    Range("ListBoxOutput5A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
Else
    Range("ListBoxOutput5A") = ""
End If
'Paste to Range
ActiveWorkbook.Worksheets(4).Select
s1 = "c17"
If Sheets(4).Name = "PM Pricing" Then
    s1 = "C10"
End If
Range(s1).Value = WorksheetFunction.Transpose(MyArray)


NoEntry:
End Sub
Sub flexURL3()

Call initializeConst
'Worksheets("Needs Assessment").Cells(Quoterow, 5).Value = ""
'Call validateURL
'Call getCustInfo
If Sheets(1).Name = "Needs Assessment" Then
Exit Sub
End If

[employee_number] = Environ("username")
[quote_number] = Worksheets("Needs Assessment").Cells(Quoterow, 2).Value
[customer] = Worksheets("Needs Assessment").Cells(compNrow, 2).Value

sCCN = Worksheets("Needs Assessment").Cells(CCNrow, 2).Value

Dim xSelShp As Shape, xSelLst As Variant, i As Integer



'Set xSelShp = Worksheets(4).Shapes(Application.Caller)
Set xLstbox = Worksheets(4).ListBox5A
Dim MyArray(1 To 200) As String
Dim ArrayIndex As Integer
ArrayIndex = 1

'xSelShp.TextFrame2.TextRange.Characters.Text = "Select CCN"
For i = 0 To (xLstbox.ListCount - 1)
    Debug.Print Mid(xLstbox.List(i), 1, 4) & " - " & Mid(sCCN, 1, 4)
    If Mid(xLstbox.List(i), 1, 4) = Mid(sCCN, 1, 4) Then
        Debug.Print "CCN matched"
        MyArray(ArrayIndex) = xLstbox.List(i)
        ArrayIndex = ArrayIndex + 1
    End If
Next i
Debug.Print "xSelLst = " & xSelLst
If xSelLst <> "" Then
    Range("ListBoxOutput5A") = Mid(xSelLst, 1, Len(xSelLst) - 1)
Else
    Range("ListBoxOutput5A") = ""
End If
'Paste to Range
ActiveWorkbook.Worksheets(4).Select
s1 = "c17"
If Sheets(4).Name = "PM Pricing" Then
    s1 = "C10"
End If
Range(s1).Value = WorksheetFunction.Transpose(MyArray)

NoEntry:
End Sub

Sub exportForm()
MultipleLineForm.Left = Application.Left
MultipleLineForm.Top = Application.Top
MultipleLineForm.Show
End Sub
Sub exportDBResults()

y = 1
Do
    y = y + 1
Loop Until Worksheets("Database lookup").Cells(y + 1, 2).Value = ""

x = y
Do
    Debug.Print x
    If QuoteDBLookupForm.ListBox1.Selected(x - 1) = False Then
        Worksheets("Database lookup").Rows(x).Delete Shift:=xlUp
    End If
    x = x - 1
Loop Until x < 2

currentFile = ActiveWorkbook.Name

Sheets("Database lookup").Visible = True
Sheets("Database lookup").Select
Sheets("Database lookup").Copy

Workbooks(currentFile).Activate
Sheets("Database lookup").Visible = False
If Sheets(1).Name = "Needs Assessment" Then
    Sheets(1).Select
Else
    If Sheets(4).Visible = True Then
        Sheets(4).Select
    End If
End If

'''reactivate
GoTo debugEnd





''' below code not run, erase after debug...
Workbooks.Add
y = 1
ActiveSheet.Cells(1, 1).Value = "Handler Employee #"
ActiveSheet.Cells(1, 2).Value = "Sales Rep #"
ActiveSheet.Cells(1, 3).Value = "Quote #"
ActiveSheet.Cells(1, 4).Value = "CCN"
ActiveSheet.Cells(1, 5).Value = "Customer"
ActiveSheet.Cells(1, 6).Value = "Project Type"
ActiveSheet.Cells(1, 7).Value = "Oracle Service Type"
ActiveSheet.Cells(1, 8).Value = "Completed MM/YYYY"
ActiveSheet.Cells(1, 9).Value = "$ Amount"
ActiveSheet.Cells(1, 10).Value = "Project Name"
ActiveSheet.Cells(1, 11).Value = "Handler Name"
ActiveSheet.Cells(1, 12).Value = "Sales Rep Name"
ActiveSheet.Cells(1, 13).Value = "Oracle Product Type"
For x = 0 To QuoteDBLookupForm.ListBox1.ListCount - 1
    If QuoteDBLookupForm.ListBox1.Selected(x) Then
        ActiveSheet.Cells(y + 1, 1).Value = QuoteDBLookupForm.ListBox1.List(x, 0)
        ActiveSheet.Cells(y + 1, 2).Value = QuoteDBLookupForm.ListBox1.List(x, 1)
        ActiveSheet.Cells(y + 1, 3).Value = QuoteDBLookupForm.ListBox1.List(x, 2)
        ActiveSheet.Cells(y + 1, 4).Value = QuoteDBLookupForm.ListBox1.List(x, 3)
        ActiveSheet.Cells(y + 1, 5).Value = QuoteDBLookupForm.ListBox1.List(x, 4)
        ActiveSheet.Cells(y + 1, 6).Value = QuoteDBLookupForm.ListBox1.List(x, 5)
        ActiveSheet.Cells(y + 1, 7).Value = QuoteDBLookupForm.ListBox1.List(x, 6)
        ActiveSheet.Cells(y + 1, 8).Value = QuoteDBLookupForm.ListBox1.List(x, 7)
        ActiveSheet.Cells(y + 1, 9).Value = QuoteDBLookupForm.ListBox1.List(x, 8)
        ActiveSheet.Cells(y + 1, 10).Value = QuoteDBLookupForm.ListBox1.List(x, 9)
        ActiveSheet.Cells(y + 1, 11).Value = QuoteDBLookupForm.ListBox2.List(x, 0)
        ActiveSheet.Cells(y + 1, 12).Value = QuoteDBLookupForm.ListBox2.List(x, 1)
        ActiveSheet.Cells(y + 1, 13).Value = QuoteDBLookupForm.ListBox2.List(x, 2)
        y = y + 1
    End If
Next x
    Columns("A:M").Select
    Selection.Columns.AutoFit

debugEnd:

QuoteDBLookupForm.Hide
End Sub
Sub quote2NA()

    Dim x2 As Long, x3 As Long, x4 As Long
    Dim CCN As String
    Dim n As Long, sx(100)
    Dim l As Long, x As Long, y As Long, z As Long

        Call initializeConst
        'x4 = Worksheets("Needs Assessment").Cells(7, 2).Value 'Worksheets(4).Cells("I8").Value + Worksheets(4).Cells("I11").Value + Worksheets(4).Cells("M8").Value
        s1 = [total_price]
        If InStr(s1, " ") > 0 Then
            s1 = Mid(s1, 1, InStr(s1, " ") - 1)
        End If
        x4 = CLng(s1)
        If Sheets(4).Name <> "PM Pricing" Then 'no test assumptions for PM, yet...
            temp1 = [test_assumption1] 'Worksheets(4).Cells(8, 18).Value
            temp2 = [test_assumption2] 'Worksheets(4).Cells(11, 18).Value
        End If
        'Worksheets("Needs Assessment").Cells(TestPlanrow, 2).Value = temp1 & temp2 ' test plan
        
        
        If MultipleLineForm.CheckBox1.Value = True Then
            sx(3) = MultipleLineForm.TextBox3.Text '"Phase 1 - Initial Assessment and Test Plan" ' parent line 1 scope
            sx(4) = x4 * CDbl(MultipleLineForm.TextBox1.Text / 100) ' parent line 1 cost
            sx(5) = MultipleLineForm.TextBox4.Text '"Phase 2 - Testing and Certification" ' parent line 2 scope
            sx(6) = x4 * CDbl(MultipleLineForm.TextBox2.Text / 100) ' parent line 2 cost
        Else
            sx(3) = "N/A - Single parent line" ' parent line 1 scope
            sx(4) = x4  ' parent line 1 cost
            sx(5) = "" ' parent line 2 scope
            sx(6) = "" ' parent line 2 cost
        End If
'        sx(7) = Worksheets(4).Cells("I9").Value + Worksheets(4).Cells("I12").Value + Worksheets(4).Cells("M11").Value + Worksheets(4).Cells("M13").Value
'        sx(8) = Worksheets(4).Cells("I10").Value + Worksheets(4).Cells("I13").Value + Worksheets(4).Cells("M12").Value + Worksheets(4).Cells("M14").Value
        
        If Sheets(4).Name <> "PM Pricing" Then 'no hours found in sheet
            sx(7) = [Total_Engineering_Hours] 'Worksheets(4).Cells(9, 4).Value
            sx(8) = [Total_Lab_Hours] 'Worksheets(4).Cells(10, 4).Value
        End If
        
        sx(9) = [total_price] 'Worksheets(4).Cells(8, 4).Value

        Worksheets("Needs Assessment").Cells(AHLParentStartrow + 5, 2).Value = sx(3)
        Worksheets("Needs Assessment").Cells(AHLParentStartrow + 5, 5).Value = sx(4)
        Worksheets("Needs Assessment").Cells(AHLParentStartrow + 6, 2).Value = sx(5)
        Worksheets("Needs Assessment").Cells(AHLParentStartrow + 6, 5).Value = sx(6)
        Worksheets("Needs Assessment").Cells(4, 2).Value = sx(7)
        Worksheets("Needs Assessment").Cells(5, 2).Value = sx(8)
        Worksheets("Needs Assessment").Cells(7, 2).Value = sx(9)
'        Worksheets("Needs Assessment").Cells(TestPlanrow, 2).Value = Worksheets(4).Cells(8, 18).Value & vbLf & Worksheets(4).Cells(11, 18).Value
        Worksheets("Needs Assessment").Cells(TestPlanrow, 2).Value = temp1 & vbLf & temp2

    Sheets("Needs Assessment").Select
    Worksheets("Needs Assessment").Cells(1, 1).Select
    
    
    
'    ActiveWorkbook.Save
    Application.DisplayAlerts = False
    x = 1
    Do
        Worksheets(x).Delete
    Loop Until Worksheets(x).Name = "Needs Assessment"
    Application.DisplayAlerts = True
    
    mypath = getDirectory() & "Quote - " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " - Needs Assessment.xlsm"
    If Dir(mypath) <> "" Then
        Kill mypath
    End If
    ActiveWorkbook.SaveAs fileName:=mypath
    MsgBox ("Needs Assessment has been saved to " & getDirectory())

End Sub
Sub showTaskForm()

TaskForm.ComboBox1.Clear
TaskForm.ComboBox1.AddItem "Projects"
TaskForm.ComboBox1.AddItem "Tasks"
TaskForm.ComboBox1.Value = "Tasks"

Dim StrFile As String
If Dir("C:\Users\" & Environ("username") & "\AppData\Local\Microsoft\Outlook\*@ul.com.ost") <> "" Then
StrFile = Dir("C:\Users\" & Environ("username") & "\AppData\Local\Microsoft\Outlook\*@ul.com.ost")
Do While Len(StrFile) > 0
    'Debug.Print StrFile
    Worksheets("Task-scratch").Cells(1, 2).Value = Replace(StrFile, ".ost", "")
    StrFile = Dir
Loop
End If


TaskForm.TextBox1.Text = Worksheets("Task-scratch").Cells(1, 2).Value
TaskForm.TextBox2.Text = Worksheets("Task-scratch").Cells(2, 2).Value
Dim x As Long
TaskForm.ListBox1.Clear
x = 3
Do
    Worksheets("Task-scratch").Cells(x + 1, 2).Value = ""
    Worksheets("Task-scratch").Cells(x + 1, 3).Value = ""
    Worksheets("Task-scratch").Cells(x + 1, 4).Value = ""
    Worksheets("Task-scratch").Cells(x + 1, 5).Value = ""
    Worksheets("Task-scratch").Cells(x + 1, 6).Value = ""
    x = x + 1
Loop Until Worksheets("Task-scratch").Cells(x + 1, 2).Value = ""
TaskForm.Top = Application.Top
TaskForm.Left = Application.Left

TaskForm.Show
End Sub



Sub EmployeeTaskList(employee As String, taskName As String)

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long
Dim pWebAddress As String, pwebAddressx As String
Dim x As Long
Dim tbl As Object, p As Object, td As Object, fld As Object, td2 As HTMLBaseElement
Dim doc As HTMLDocument, lastAddress As String
Dim totalProjects As Long, y As Long, yy As Long, z As Long, page As Long, y1 As Long
Dim IE As InternetExplorer
Dim docx(10) As HTMLDocument
Dim IEx(10) As InternetExplorer
Dim IE1(10) As Boolean, IE2(10) As Boolean, x9 As HTMLBaseElement

Dim sh
Dim eachIE
Dim shx(10)
Dim eachIEx(10)

'Loop for all in progress projects
'https://portal.ul.com/Search?Query=AHL+Needs+Assessment&Paging.Page=1&EntityType=Task&Filters.ariaTaskTaskOwner=ryan.barnes%40ul.com&Filters.ariaTaskPhase=000150&Filters.ariaTaskPhase=000200&Filters.ariaTaskPhase=00000&Filters.ariaTaskPhase=000000&Filters.ariaTaskPhase=000100&Filters.ariaTaskPhase=000300&location=%2FSearch
'https://portal.ul.com/Search/Project?Query=&Paging.Page=2&EntityType=Project&Sorts%5B0%5D.FieldName=ariaUpdatedOn&Sorts%5B0%5D.Order=Descending&Filters.ariaProjectProjectStatus=InProgress&Filters.ariaProjectProjectStatus=OnHold&Filters.ariaProjectHandler=Ryan.Barnes@ul.com&location=%2FSearch%2FProject
If taskName = "Projects" Then
    pWebAddress = "https://portal.ul.com/Search/Project?Query=&Paging.Page=1&EntityType=Project&Filters.ariaProjectProjectStatus=InProgress&Filters.ariaProjectProjectStatus=OnHold&Filters.ariaProjectHandler=" & Replace(employee, "@", "%40") & "&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending&viewType=Default"
Else
    pWebAddress = "https://portal.ul.com/Search?Query=" & Replace(taskName, " ", "+") & "&Paging.Page=1&EntityType=Task&Filters.ariaTaskTaskOwner=" & Replace(employee, "@", "%40") & "&Filters.ariaTaskPhase=000150&Filters.ariaTaskPhase=000200&Filters.ariaTaskPhase=00000&Filters.ariaTaskPhase=000000&Filters.ariaTaskPhase=000100&Filters.ariaTaskPhase=000300&location=%2FSearch"
End If
'Debug.Print pWebAddress
Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress, self


Dim loginAttempt As Boolean
loginAttempt = False
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
      If InStr(1, eachIE.LocationURL, pWebAddress) Then
        Set IE = eachIE
        'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
        Exit Do
      End If
      'https://idselfserv.ul.com/oam/server/obrareq.cgi?encquery%3DtVALwED5IRaETyPF7IabSB3BHCvXsl%2FXMSIFfrvxebcDJ%2FRf4I9XCzf8QFKVM6KkLU3X6%2F7AZCIbDeWZjW%2B6F7wSkBcUW%2FEE2IIJeFiPfvMrTFCUFRb2PvqAZWsKcbo7QzZu0mNyastwFq%2BPs8ehPAsLdfpFvd%2BNVIMMHqr8oQxZ9GUOxiZOpYwHkr3%2FN6lgOKwbo%2Fhtns6jyowQX5T0h%2FFjNSPjNR8JuB%2BPFDYkoGDp%2BjBRKrwJUMQ7o98S2ROLt%2FZ3jqdw0X0LgiSj%2B3ugqrIItOmFAxXyR1R%2BjkS2me9eh1YSMHZZSeC7jay34mvUh3UGpZx8F3pzXKl%2BaFlZjlaEZUV4qU5X0J3ABWcuDfy2XrZQMupmEgZ8k981VF590VG0YAaQRDrovsd0WKe9fOaHPswfTO%2FinznIILqjmSfDKTWDh4iedlh1n1Ec14W4%20agentid%3DWebgate_IDM%20ver%3D1%20crmethod%3D2
      If InStr(eachIE.LocationURL, "https://idselfserv.ul.com/oam/server/obrareq.cgi") > 0 And loginAttempt = False Then
        loginAttempt = True
        Set IE = eachIE
        While IE.Busy  ' The new process may still be busy even after you find it
            DoEvents
            Wend
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Set doc = IE.Document
        'attempt 1 login if credentials are stored
        If doc.getElementById("body") Is Nothing Then
    '       'Debug.Print doc.getElementById("username").Value
            Sleep 200
            If doc.getElementById("username").Value <> "" Then
                doc.getElementById("loginSbtButton").Click
                Sleep 200
            End If
            Do
                DoEvents
            Loop Until IE.readyState = READYSTATE_COMPLETE
            Set doc = IE.Document
        End If
      End If
  Next eachIE
Loop

Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document
'MsgBox "pause"

'attempt 1 login if credentials are stored
If doc.getElementById("body") Is Nothing And loginAttempt = False Then
    loginAttempt = True
    Sleep 200
    If doc.getElementById("username").Value <> "" Then
        doc.getElementById("loginSbtButton").Click
        Sleep 200
    End If
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
End If

login:
If doc.getElementById("body") Is Nothing Then
    MsgBox "Log into Flex"
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

'IE.Visible = False

Do
Sleep 25
Set doc = IE.Document
Loop Until Not (doc.getElementsByTagName("p") Is Nothing)



page = 1
x = 3
Do
    x = x + 1
Loop Until Worksheets("Task-scratch").Cells(x, 2).Value = ""

For Each p In doc.getElementsByTagName("p")
    If InStr(p.innerText, "There are no projects to display.") > 0 Or InStr(p.innerText, "There are no tasks to display.") > 0 Then
        TaskForm.ListBox1.AddItem "No active projects/tasks"
        GoTo noActiveProjects
    End If
Next p

'get total number of projects from this field
s1 = doc.getElementById("frmSearchTop").Children(1).Children(0).Children(0).innerText
s2 = Mid(s1, InStr(s1, "of") + 3, Len(s1) - InStr(s1, "of") - 2)

totalProjects = CInt(s2)

For x1 = 0 To 9
    Set IEx(x1) = New InternetExplorer
    IEx(x1).Visible = False
Next x1
ProgressForm.Top = Application.Top
ProgressForm.Left = Application.Left
ProgressForm.Show

yy = 1 'yy is the current count (1 thru 10) for the page
For y = 1 To totalProjects
    ProgressForm.Label3.Caption = "Work on hand: project " & y & " of " & totalProjects
    If y = page * 10 + 1 Then
        page = page + 1
        IE.navigate Replace(pWebAddress, "Paging.Page=1&EntityType", "Paging.Page=" & page & "&EntityType"), self
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Do
            Sleep 50
            Set doc = IE.Document
        Loop Until Not (doc.getElementById("body") Is Nothing)
        Set doc = IE.Document
        lastAddress = IE.LocationURL
        yy = 1
    End If
   
    Worksheets("Task-scratch").Cells(x + y - 1, 6).Value = taskName
    Worksheets("Task-scratch").Cells(x + y - 1, 2).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0).innerText
    s1 = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0)
    Worksheets("Task-scratch").Cells(x + y - 1, 3).Value = "https" & Mid(s1, InStr(s1, "href") + 6, Len(s1) - InStr(s1, "href") - 5 - (InStr(s1, "title") - 3))
    Worksheets("Task-scratch").Cells(x + y - 1, 4).Value = Mid(s1, InStr(s1, "/Task/Detail/") + 13, 32)
If taskName = "Projects" Then
    Worksheets("Task-scratch").Cells(x + y - 1, 4).Value = ""
    Worksheets("Task-scratch").Cells(x + y - 1, 5).Value = Mid(s1, InStrRev(s1, "/") + 1, Len(s1) - (InStrRev(s1, "/") + 1) + 1)
End If
    
    lastAddress = IE.LocationURL
   
   'Ryan stopped here
If taskName <> "Projects" Then
    If y Mod 10 = 0 Then
        For x3 = 0 To 9
            Sleep 50
            pwebAddressx = "https://portal.ul.com/Task/Detail/" & Worksheets("Task-scratch").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 4).Value
            IEx(x3).navigate pwebAddressx, self
        While IEx(x3).Busy
            DoEvents
            Wend
        Do
            Set shx(x3) = New Shell32.Shell
            For Each eachIEx(x3) In shx(x3).Windows
                If InStr(1, eachIEx(x3).LocationURL, pwebAddressx) Then
                    Set IEx(x3) = eachIEx(x3)
                    IEx(x3).Visible = False  'This is here because in some environments, the new process defaults to Visible.
                    Exit Do
                End If
            Next eachIEx(x3)
        Loop

        While IEx(x3).Busy  ' The new process may still be busy even after you find it
            DoEvents
            Wend
            Next x3
    End If
If y = totalProjects And y Mod 10 <> 0 Then
    For x3 = 0 To (y - 1) Mod 10
        Sleep 50
pwebAddressx = "https://portal.ul.com/Task/Detail/" & Worksheets("Task-scratch").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 4).Value
        IEx(x3).navigate pwebAddressx, self
While IEx(x3).Busy
  DoEvents
  Wend
Do
  Set shx(x3) = New Shell32.Shell
  For Each eachIEx(x3) In shx(x3).Windows
    If InStr(1, eachIEx(x3).LocationURL, pwebAddressx) Then
      Set IEx(x3) = eachIEx(x3)
      IEx(x3).Visible = False
      Exit Do
      End If
    Next eachIEx(x3)
  Loop

While IEx(x3).Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
  
    Next x3
End If




loadloop:
If y Mod 10 = 0 Then
    For x3 = 0 To 9
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 25
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    s1 = docx(x3).getElementById("body").Children(0).Children(0).Children(1).Children(2).Children(0).outerHTML
    '''Debug.Print s1
    Worksheets("Task-scratch").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 5).Value = Mid(s1, InStr(s1, "data-max-chars=") - 34, 32)
    Worksheets("Task-scratch").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 6).Value = docx(x3).getElementById("body").Children(0).Children(0).Children(1).Children(2).Children(0).innerText
    IEx(x3).Visible = False
    Next x3
End If

If y = totalProjects And y Mod 10 <> 0 Then
    For x3 = 0 To (y - 1) Mod 10
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 25
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    '''Debug.Print docx(x3).getElementById("body").Children(0).Children(0).Children(1).Children(2).outerHTML
    s1 = docx(x3).getElementById("body").Children(0).Children(0).Children(1).Children(2).Children(0).outerHTML
    ''Debug.Print s1
    Worksheets("Task-scratch").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 5).Value = Mid(s1, InStr(s1, "data-max-chars=") - 34, 32)
    Worksheets("Task-scratch").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 6).Value = docx(x3).getElementById("body").Children(0).Children(0).Children(1).Children(2).Children(0).innerText
    Next x3
End If
End If ' end if for finding task details
    yy = yy + 1
Next y
ProgressForm.Hide

x = 3
'Ryan stopped here
Do

    If Worksheets("Task-scratch").Cells(x + 1, 6).Value = "Projects" Then
        TaskForm.ListBox1.AddItem Worksheets("Task-scratch").Cells(x + 1, 2).Value
    Else
        TaskForm.ListBox1.AddItem Worksheets("Task-scratch").Cells(x + 1, 2).Value & " for " & Worksheets("Task-scratch").Cells(x + 1, 6).Value
    End If
    x = x + 1
Loop Until Worksheets("Task-scratch").Cells(x + 1, 2).Value = ""

For x3 = 0 To 9
    Sleep 50
'    If Not (IEx(x3) Is Nothing) Then
        IEx(x3).Quit
        Set IEx(x3) = Nothing
        Set shx(x3) = Nothing
        Set eachIEx(x3) = Nothing
'    End If
Next x3

noActiveProjects:


    IE.Quit
    Set IE = Nothing
   
   
   
   
   
errorEnd:
   
End Sub

Sub testdir()

    Dim x As Long
    If Dir("C:\Program Files (x86)\", vbDirectory) = "" Then
        Debug.Print "Not 64 bit"
        Debug.Print Dir("C:\Program Files (x86)\Common Files\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB", vbHidden And vbDirectory)
    End If
    If Dir("C:\Program Files\", vbDirectory) = "" Then
        Debug.Print "Not 32 bit"
        Debug.Print Dir("C:\Program Files\Common Files\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB", vbHidden And vbDirectory)
    End If
    
End Sub
Sub ItemsReqDisp()
Dim s1 As String

s1 = ActiveSheet.Shapes("Drop Down 85").ControlFormat.List(ActiveSheet.Shapes("Drop Down 85").ControlFormat.ListIndex)
If s1 = "Lighting" Then
    Worksheets("Checklist").Cells(4, 4).Value = "Samples (list quantity of each in [ ]):" & vbLf & Worksheets("Needs Assessment").Shapes.Item("TextBox 2").TextFrame.Characters.Text & vbLf & vbLf & "Estimated Ship Date:" & vbLf & "Tracking Number:"
    Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text = "See checklist from Items Required button"
    Sheets("Checklist").Visible = True
    Sheets("Checklist").Select
Else
    ItemsReqForm.TextBox1.Text = Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text
    ItemsReqForm.Show
End If

End Sub
Sub CloseChecklist()
Sheets("Needs Assessment").Select
Sheets("Checklist").Visible = False
End Sub

Sub unhidesheets()
Dim x As Long

For x = 1 To Application.Worksheets.Count
    Worksheets(x).Visible = True
Next x
End Sub




Attribute VB_Name = "ModuleRemoveAllModules"
Sub removeModules()  ' for clean up and readding standard modules

Dim uform As Object, x As Long
Dim VBAEditor As Object
Dim vbProj As Object
Dim chkRef As Object

For x = 1 To Application.VBE.ActiveVBProject.VBComponents.Count
    If InStr(Application.VBE.ActiveVBProject.VBComponents.Item(x).Name, "Module") > 0 And Application.VBE.ActiveVBProject.VBComponents.Item(x).Name <> "ModuleRemoveAllModules" Then
        Application.VBE.ActiveVBProject.VBComponents.Remove Application.VBE.ActiveVBProject.Item(x)
    End If
Next x

End Sub


Sub exportModules()  ' for quick export purposes. Note - Change file path for users other than me...

Dim uform As Object, x As Long
Dim VBAEditor As Object
Dim vbProj As Object
Dim chkRef As Object
Dim s1 As String, s2 As String

For x = 1 To Application.VBE.ActiveVBProject.VBComponents.Count
    If InStr(Application.VBE.ActiveVBProject.VBComponents.Item(x).Name, "Sheet") <> 1 And InStr(Application.VBE.ActiveVBProject.VBComponents.Item(x).Name, "ThisWorkbook") <> 1 Then
        s1 = "C:\Users\09049\Documents\modules\" & Application.VBE.ActiveVBProject.VBComponents.Item(x).Name
        s2 = "C:\Users\09049\Documents\modules\update modules\" & Application.VBE.ActiveVBProject.VBComponents.Item(x).Name
        If InStr(Application.VBE.ActiveVBProject.VBComponents.Item(x).Name, "Module") = 1 Then
            s1 = s1 & ".bas"
            s2 = s2 & ".bas"
            If Dir(s1) <> "" Then
                Kill s1
            End If
            If Dir(s2) <> "" Then
                Kill s2
            End If
        Else
            If Dir(s1 & ".frm") <> "" Then
                Kill s1 & ".frm"
                Kill s1 & ".frx"
            End If
            If Dir(s2 & ".frm") <> "" Then
                Kill s2 & ".frm"
                Kill s2 & ".frx"
            End If
            s1 = s1 & ".frm"
            s2 = s2 & ".frm"
        End If
        'Debug.Print s1
        Application.VBE.ActiveVBProject.VBComponents.Item(x).Export (s1)
'        s2 = Replace(s1, "C:\Users\09049\Documents\modules\", "C:\Users\09049\Documents\modules\update modules\")
        y = 2
        Do
            If Worksheets("auto update").Cells(y, 1).Value = Application.VBE.ActiveVBProject.VBComponents.Item(x).Name And Worksheets("auto update").Cells(y, 2).Value <> "frx" Then
                Debug.Print "exporting update module " & s2
                Application.VBE.ActiveVBProject.VBComponents.Item(x).Export (s2)
            End If
            y = y + 1
        Loop Until Worksheets("auto update").Cells(y, 1).Value = ""
    
    End If
Next x

End Sub

Attribute VB_Name = "ModuleRevenue"
Sub GetTeamRevenue()

    ManagerForm.Show

End Sub
Sub RevenueClear()

Dim r1 As Range
Set r1 = Worksheets("Revenue").Range(Worksheets("Revenue").Cells(4, 3), Worksheets("Revenue").Cells(4, 24))
Range(r1, r1.End(xlDown)).Value = ""

End Sub

Sub ProjectTaskClear()
Dim x As Long, y As Long

Worksheets("Projects").Cells(1, 2).Value = ""
Worksheets("Projects").Select
Worksheets("Projects").Range(Worksheets("Projects").Cells(4, 1), Worksheets("Projects").Cells(4, 14)).Select
'Range(Selection, Selection.End(xlToRight)).Select
Range(Selection, Selection.End(xlDown)).Select
Selection.Value = ""

Worksheets("Tasks").Cells(1, 2).Value = ""
Worksheets("Tasks").Select
Worksheets("Tasks").Range(Worksheets("Tasks").Cells(4, 1), Worksheets("Tasks").Cells(4, 11)).Select
'Range(Selection, Selection.End(xlToRight)).Select
Range(Selection, Selection.End(xlDown)).Select
Selection.Value = ""
Worksheets("Projects").Select
End Sub

Sub getTeam()
Dim s1 As String, s2 As String, x1 As Long, x2 As Long, s3 As String, x As Long
Dim pWebAddress As String
Dim hName As String, rName As String, hNum As String, rNum As String
Dim IE As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object, tr As Object
Dim doc As HTMLDocument
Dim elem As HTMLBaseElement


If ManagerForm.TextBox1.Text = "" Then
    MsgBox ("Add a name")
    GoTo noInfo
End If
hName = Replace(Replace(ManagerForm.TextBox1.Text, ".", " "), "  ", " ")

'pWebAddress = "http://intranet.ul.com/ULSearch/Pages/peopleresults.aspx?k=" & Replace(hName, " ", "%20")
pWebAddress = "http://sharepoint.ul.com/sites/search/Pages/peopleresults.aspx#k=" & Replace(hName, " ", "%20")
Debug.Print pWebAddress
Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress

Dim sh
Dim eachIE
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Set doc = IE.Document

For counter = 0 To 20
    Set doc = IE.Document
    If Not (doc.getElementById("NameField") Is Nothing) Then
        Exit For
    End If
    Sleep 250
Next counter
Set doc = IE.Document

login:
If doc.getElementById("NameField") Is Nothing Then
'If doc.getElementById("imgPrefetch") Is Nothing Then
    MsgBox "Log into VPN"
    Sleep 200
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

x = 0
Set li = doc.getElementById("NameField")
'        If InStr(li.innerHTML, "http://my.intranet.ul.com/my/Person.aspx") > 0 Then
'            s1 = Mid(li.innerHTML, InStr(li.innerHTML, "http"), 67)
            s1 = Mid(li.innerHTML, InStr(li.innerHTML, "http"), 68)
            hNum = Mid(s1, Len(s1) - 4, 5)
            Worksheets("Needs Assessment").Cells(hIDrow(), 2).Value = hNum

'pWebAddress = "http://my.intranet.ul.com/my/Person.aspx?accountname=global%5C" & hNum
pWebAddress = "http://mysharepoint.ul.com/Person.aspx?accountname=GLOBAL%5C" & hNum
IE.navigate pWebAddress
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Do
    Sleep 50
    Set doc = IE.Document
Loop Until Not (doc.getElementById("ReportingHierarchy") Is Nothing)


Worksheets("Needs Assessment").Cells(hemailrow(), 2).Value = Replace(doc.getElementById("ProfileViewer_ValueWorkEmail").innerText, vbLf, "")
Worksheets("Needs Assessment").Cells(hTitlerow(), 2).Value = doc.getElementById("ProfileViewer_ValueTitle").innerText

x = 3
Do
    x = x + 1
Loop Until ActiveSheet.Cells(x, 1).Value = ""
''''' fix below employee retrieval code '//*[@id="ReportingHierarchy"]/tbody/tr[2]/td[2]/table/tbody/tr[2]
x1 = 0
Set tbl = doc.getElementById("ReportingHierarchy").Children(0)
Set tbl = tbl.Children(tbl.Children.Length - 1).Children(1).Children(0).Children(0)
For x2 = 0 To tbl.Children.Length - 1
    s1 = tbl.Children(x2).Children(1).Children(0).innerText
    Debug.Print s1
    s1 = Mid(s1, InStr(s1, ",") + 2, Len(s1) - (InStr(s1, ",") + 2) + 1) & " " & Mid(s1, 1, InStr(s1, ",") - 1)
    Debug.Print s1
    ActiveSheet.Cells(x + x2, 1).Value = s1
Next x2

GoTo skipDebug


For Each td In doc.getElementsByTagName("td")
    If InStr(td.innerHTML, hNum) > 0 Then
        x1 = x1 + 1
    End If
    If InStr(td.innerHTML, "http://my.intranet.ul.com:80/my/Person.aspx?accountname=global%") > 0 And InStr(td.innerText, vbLf) < 1 And InStr(td.innerText, "VP&GM") < 1 And InStr(td.innerText, "Director") < 1 Then
        s1 = td.innerText
        s1 = Mid(s1, 1, InStr(s1, "  ") - 1)
        s1 = Mid(s1, InStr(s1, ",") + 2, Len(s1) - (InStr(s1, ",") + 2) + 1) & " " & Mid(s1, 1, InStr(s1, ",") - 1)
        ActiveSheet.Cells(x, 1).Value = s1
        x = x + 1
    End If
Next td

skipDebug:
Set doc = Nothing
IE.Quit
Set IE = Nothing

errorEnd:
Worksheets("Needs Assessment").Cells(hIDrow(), 2).Value = ""
Worksheets("Needs Assessment").Cells(hemailrow(), 2).Value = ""
Worksheets("Needs Assessment").Cells(hTitlerow(), 2).Value = ""

ManagerForm.Hide

noInfo:
End Sub

Sub cycleEmployees()

Dim s1 As String, x As Long, s2 As String
Dim IE As InternetExplorer
Dim sh
Dim eachIE

'Loop for all in progress projects
Set IE = New InternetExplorer
IE.Visible = False

If Not Worksheets("Revenue").Cells(4, 1).Value = "" And Worksheets("Revenue").Cells(26, 3).Value = "" And Worksheets("Revenue").Cells(26, 6).Value = "" Then
    ProgressForm.Show
    x = 4
    Do
        ProgressForm.Label2.Caption = Worksheets("Revenue").Cells(x, 1).Value
        Call EmployeeProjectList(Worksheets("Revenue").Cells(x, 1).Value)
        x = x + 1
    Loop Until Worksheets("Revenue").Cells(x, 1).Value = ""
    ProgressForm.Hide
End If
If Worksheets("Revenue").Cells(3, 26).Value <> "" Then    'Option: cycling keywords
    ProgressForm.Show
    s1 = Worksheets("Revenue").Cells(3, 26).Value
    If InStr(s1, ",") > 0 Then
    Do
        s2 = Mid(s1, 1, InStr(s1, ",") - 1)
        ProgressForm.Label2.Caption = s2
        Call EmployeeProjectList(Replace(s2, "&", "%26"))
        s1 = Mid(s1, InStr(s1, ",") + 1, Len(s1) - (InStr(s1, ",") + 1) + 1)
    Loop Until InStr(s1, ",") < 1
    End If
    ProgressForm.Label2.Caption = s1
    Call EmployeeProjectList(Replace(s1, "&", "%26"))
    ProgressForm.Hide
End If

If Worksheets("Revenue").Cells(6, 26).Value <> "" Then    'Option: cycling keywords
    ProgressForm.Show
    s1 = Worksheets("Revenue").Cells(7, 26).Value
    If InStr(s1, ",") > 0 Then
    Do
        s2 = Mid(s1, 1, InStr(s1, ",") - 1)
        ProgressForm.Label2.Caption = s2
        Call CCNHistoryProjectList(Replace(s2, "&", "%26"))
        s1 = Mid(s1, InStr(s1, ",") + 1, Len(s1) - (InStr(s1, ",") + 1) + 1)
    Loop Until InStr(s1, ",") < 1
    End If
    ProgressForm.Label2.Caption = s1
    Call CCNHistoryProjectList(Replace(s1, "&", "%26"))
    ProgressForm.Hide
End If

IE.Quit
Set IE = Nothing

End Sub

Sub DropDown1_Change()

'Debug.Print ActiveSheet.Shapes("Drop Down 76").ControlFormat.List(ActiveSheet.Shapes("Drop Down 76").ControlFormat.ListIndex)
Dim s1 As String, index As Long

s1 = ActiveSheet.Shapes("Drop Down 104").ControlFormat.List(ActiveSheet.Shapes("Drop Down 104").ControlFormat.ListIndex)
index = ActiveSheet.Shapes("Drop Down 104").ControlFormat.ListIndex - 1
Debug.Print "index = " & index
'If s1 = "Find Task/Project" Then
'    Call showTaskForm
'End If
Call ProjectTaskStart
ActiveSheet.Shapes("Drop Down 104").ControlFormat.ListIndex = 1

End Sub





Sub ProjectTaskStart()


If Not Worksheets("Projects").Cells(1, 2).Value = "" Then
    ProgressForm.Left = Application.Left
    ProgressForm.Top = Application.Top
    ProgressForm.Show
    
    ProgressForm.Label2.Caption = Worksheets("Projects").Cells(1, 2).Value
    Call ProjectTaskList(Worksheets("Projects").Cells(1, 2).Value)
    ProgressForm.Hide
Else
    MsgBox "Add handler Name"
End If
End Sub

Sub ProjectTaskList(employee As String)

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long, x5 As Long
Dim pWebAddress As String, pwebAddressx As String
Dim x As Long
Dim tbl As Object, p As Object, td As Object, fld As Object, td2 As HTMLBaseElement
Dim doc As HTMLDocument, lastAddress As String
Dim totalProjects As Long, y As Long, yy As Long, z As Long, page As Long, y1 As Long
Dim IE As InternetExplorer
Dim docx(10) As HTMLDocument
Dim IEx(10) As InternetExplorer, IExN(10) As Long
Dim IE1(10) As Boolean, IE2(10) As Boolean, x9 As HTMLBaseElement

Dim sh
Dim eachIE
Dim shx(10)
Dim eachIEx(10)

Dim ProjLinkCol As Long, LineItemCol As Long, ECDCol As Long, StatusNotesCol As Long, StatusCol As Long
Dim index As Long
'index = ActiveSheet.Shapes("Drop Down 104").ControlFormat.ListIndex - 1
If ActiveSheet.Cells(2, 1).Value = "Fetch Projects and Tasks" Then
    index = 1
End If
If ActiveSheet.Cells(2, 1).Value = "Fetch Projects only" Then
    index = 2
End If
If ActiveSheet.Cells(2, 1).Value = "Fetch Projects and Tasks without hours" Then
    index = 3
End If
If ActiveSheet.Cells(2, 1).Value = "Fetch Task Actual Hours" Then
    index = 4
End If



StatusCol = 7
ProjLinkCol = 14
LineItemCol = 2
ECDCol = 5
StatusNotesCol = 9

'Debug.Print employee
'Loop for all in progress projects
Debug.Print Worksheets("Projects").Cells(2, 27).Value
If Worksheets("Projects").Cells(1, 1).Value = Worksheets("Projects").Cells(2, 27).Value Then ' project number
    pWebAddress = "https://portal.ul.com/Search/Project?EntityType=Project&Filters.ariaProjectProjectStatus=InProgress&Filters.ariaProjectProjectStatus=OnHold&Filters.ariaProjectHandler=" & Replace(Replace(employee, " ", "."), "..", ".") & "%40ul.com&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending&viewType=Default"
End If
If Worksheets("Projects").Cells(1, 1).Value = Worksheets("Projects").Cells(3, 27).Value Then ' order number
    pWebAddress = "https://portal.ul.com/Search/Project?viewType=Default&EntityType=Project&Filters.ariaOrderNumber=" & Worksheets("Projects").Cells(1, 2).Value & "&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending"
End If

'https://portal.ul.com/Search/Project?EntityType=Project&Filters.ariaProjectProjectStatus=InProgress&Filters.ariaProjectProjectStatus=OnHold&Filters.ariaProjectHandler=RITTAL.GMBH%40ul.com&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending&viewType=DefaultSet IE = New InternetExplorer
Dim loginAttempt As Boolean
loginAttempt = False

Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress, self
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
      If InStr(1, eachIE.LocationURL, pWebAddress) Then
        Set IE = eachIE
        Exit Do
      End If
  Next eachIE
Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document
login:
If doc.getElementById("body") Is Nothing Then
    ProgressForm.Hide
    MsgBox "Log into Flex"
    ProgressForm.Show
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

IE.Visible = False

Do
Sleep 25
Set doc = IE.Document
Loop Until Not (doc.getElementsByTagName("p") Is Nothing)

page = 1
'project counter
x = 3
Do
    x = x + 1
Loop Until Worksheets("Projects").Cells(x, ProjLinkCol).Value = ""

'task counter
z = 3
Do
    z = z + 1
Loop Until Worksheets("Tasks").Cells(z, 11).Value = ""

For Each p In doc.getElementsByTagName("p")
    If InStr(p.innerText, "There are no projects to display.") > 0 Then
        'Worksheets("Projects").Cells(4, EmpCol).Value = employee
        Worksheets("Projects").Cells(4, 1).Value = "No active projects"
        GoTo noActiveProjects
    End If
Next p

'get total number of projects from this field
s1 = doc.getElementById("frmSearchTop").Children(1).Children(0).Children(0).innerText
s2 = Mid(s1, InStr(s1, "of") + 3, Len(s1) - InStr(s1, "of") - 2)

totalProjects = CInt(s2)

For x1 = 0 To 9
    Sleep 25
    IE1(x1) = False
    IE2(x1) = False
    Debug.Print x1
    Set IEx(x1) = New InternetExplorer
    IEx(x1).Left = 0
    IEx(x1).Top = 0
    IEx(x1).Height = 0
    IEx(x1).Width = 0
    IEx(x1).Visible = False
    IExN(x1) = 0
'    IEx(x1).Application.ScreenUpdating = False
Next x1




If index = 1 Or index = 2 Or index = 3 Then
yy = 1 'yy is the current count (1 thru 10) for the page
For y = 1 To totalProjects
    ProgressForm.Label3.Caption = "Work on hand: project " & y & " of " & totalProjects
    If y = page * 10 + 1 Then
        For x1 = 0 To 9
            IE1(x1) = False
            IE2(x1) = False
        Next x1
        page = page + 1
        IE.navigate Replace(pWebAddress, "EntityType", "Query=&Paging.Page=" & page & "&EntityType"), self
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Do
            Sleep 25
            Set doc = IE.Document
        Loop Until Not (doc.getElementById("body") Is Nothing)
        Set doc = IE.Document
        lastAddress = IE.LocationURL
        yy = 1
    End If
   
'check for existing project
    x5 = 4
    s1 = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0)
    Do
        If Worksheets("Projects").Cells(x5, ProjLinkCol).Value = "https" & Mid(s1, InStr(s1, "href") + 6, Len(s1) - InStr(s1, "href") - 5 - (InStr(s1, "title") - 3)) Then
            Debug.Print "X5 = " & x5
            Worksheets("Projects").Rows(x5).Delete Shift:=xlUp
            x = x - 1
            ''' remove duplicate tasks
            x2 = 4
            Do
                If Worksheets("Tasks").Cells(x2, 11).Value = "https" & Mid(s1, InStr(s1, "href") + 6, Len(s1) - InStr(s1, "href") - 5 - (InStr(s1, "title") - 3)) Then
                    Worksheets("Tasks").Rows(x2).Delete Shift:=xlUp
                    z = z - 1
                    x2 = x2 - 1
                End If
                x2 = x2 + 1
            Loop Until Worksheets("Tasks").Cells(x2, 11).Value = ""
            Exit Do
        End If
        x5 = x5 + 1
    Loop Until Worksheets("Projects").Cells(x5, ProjLinkCol).Value = ""
        
    'project link
    Worksheets("Projects").Cells(x + y - 1, ProjLinkCol).Value = "https" & Mid(s1, InStr(s1, "href") + 6, Len(s1) - InStr(s1, "href") - 5 - (InStr(s1, "title") - 3))
    'project handler
    Worksheets("Projects").Cells(x + y - 1, 11).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(3).Children(1).innerText
    Worksheets("Projects").Cells(x + y - 1, 12).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(3).Children(1).innerText
    'project name
    Worksheets("Projects").Cells(x + y - 1, 3).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0).innerText
    Worksheets("Projects").Cells(x + y - 1, 4).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0).innerText
'    Worksheets("Projects").Cells(x + y - 1, CompanyCol).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(2).Children(1).innerText
    'Flex ID
    'Worksheets("Projects").Cells(x + y - 1, ProjLinkCol - 1).Value = "-" 'Mid(Worksheets("Projects").Cells(x + y - 1, 13).Value, InStrRev(Worksheets("Projects").Cells(x + y - 1, 13).Value, "/") + 1)
    'order lines
    Worksheets("Projects").Cells(x + y - 1, 2).Value = "No order lines"
    lastAddress = IE.LocationURL
    
If y = totalProjects Or y Mod 10 = 0 Then
    
    For x3 = 0 To (y - 1) Mod 10
        Sleep 5
        IEx(x3).Visible = False
        IEx(x3).navigate (Replace(Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "OrderInfo")), self
        IEx(x3).Visible = False
        IExN(x3) = 0
    Next x3
    For x3 = 0 To (y - 1) Mod 10
    'Do
        Do
            Sleep 5
            Set sh = New Shell32.Shell
            pwebAddressx = Replace(Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "OrderInfo")
            Debug.Print "checking address: " & pwebAddressx
            For Each eachIE In sh.Windows
              'For x3 = 0 To (y - 1) Mod 10
                If InStr(1, eachIE.LocationURL, pwebAddressx) Then
                    Set IEx(x3) = eachIE
                    IEx(x3).Visible = False  'This is here because in some environments, the new process defaults to Visible.
                    
                    Exit Do
                    IExN(x3) = 1
                End If
              'Next x3
            Next eachIE
        Loop
    Next x3
  
  
  For x3 = 0 To (y - 1) Mod 10
   'If IEx(x3).Busy = False And IEx(x3).readyState = READYSTATE_COMPLETE And IExN(x3) = 1 Then
    While IEx(x3).Busy  ' The new process may still be busy even after you find it
       DoEvents
    Wend
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 5
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
            Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 1).Value = docx(x3).getElementById("body").Children(0).Children(3).Children(1).Children(2).Children(0).Children(1).innerText
            For Each tbl In docx(x3).getElementsByTagName("TABLE")
                x4 = 0
                For Each td In tbl.getElementsByTagName("td")
                    If InStr(td.innerText, "AWAITING_FULFILLMENT") > 0 Or InStr(td.innerText, "BOOKED") > 0 Then
                      If InStr(td.parentElement.Children(0).innerText, ".") <> InStrRev(td.parentElement.Children(0).innerText, ".") Then
                        If Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value <> "No order lines" Then
                            s1 = td.parentElement.Children(2).innerText
                            'Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value = (Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value) + CDbl(Mid(s1, 1, InStr(s1, " ") - 1))
                            Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value = Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value & ", " & td.parentElement.Children(0).innerText ' "Multiple line items"
                        Else
                            s1 = td.parentElement.Children(2).innerText
                            'Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value = CDbl(Mid(s1, 1, InStr(s1, " ") - 1))
                            Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value = td.parentElement.Children(0).innerText
                        End If
                        'Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CurrencyCol).Value = Mid(s1, InStr(s1, " ") + 1, Len(s1) - InStr(s1, " "))
                      End If
                    End If
                Next td
            Next tbl
            IE1(x3) = True
            IEx(x3).Visible = False
            IEx(x3).navigate (Replace(Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "Details")), self
            IEx(x3).Visible = False
            IExN(x3) = 2
     'End If
   Next x3
    
   For x3 = 0 To (y - 1) Mod 10
    'If IEx(x3).Busy = False And IEx(x3).readyState = READYSTATE_COMPLETE Then 'And IExN(x3) = 2 Then
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 5
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    
    Set docx(x3) = IEx(x3).Document
    
    For Each div In docx(x3).getElementsByTagName("div")
        If InStr(div.innerText, "Estimated Completion Date") > 0 Then
            Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ECDCol).Value = div.parentElement.Children(1).innerText
        End If
    Next div
     Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ECDCol).Value = docx(x3).getElementById("body").Children(0).Children(3).Children(1).Children(4).Children(1).Children(1).innerText
     'If Replace(Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ECDCol).Value, " ", "") = "" Then
     '   Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ECDCol).Value = "-"
     'End If
     Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ECDCol + 1).Value = Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ECDCol).Value
     Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, StatusNotesCol).Value = docx(x3).getElementById("body").Children(0).Children(3).Children(1).Children(5).Children(0).Children(1).innerText
     'If Replace(Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, StatusNotesCol).Value, " ", "") = "" Then
     '   Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, StatusNotesCol).Value = "-"
     'End If
     Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, StatusNotesCol + 1).Value = Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, StatusNotesCol).Value
    '//*[@id="body"]/section/div/fieldset/div[2]/div[1]/div[2]
    '//*[@id="body"]/section/div/fieldset/div[5]/div[1]/div[2]
     Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, StatusCol).Value = docx(x3).getElementById("body").Children(0).Children(3).Children(1).Children(2).Children(0).Children(1).innerText
     Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, StatusCol).Value = Mid(Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, StatusCol).Value, 1, Len(Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, StatusCol).Value) - 1)
     Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, StatusCol + 1).Value = Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, StatusCol).Value
    
    'If Worksheets("Projects").Cells(5, 26).Value <> "" Then
        IEx(x3).navigate (Replace(Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index/", "") & "/Task?&viewType=List"), self
        IEx(x3).Visible = False
        IExN(x3) = 3
    'Else
    '    IExN(x3) = 4
    'End If
     'End If
    Next x3


''' get task information
 If index = 1 Or index = 3 Then
  For x3 = 0 To (y - 1) Mod 10
    'If IEx(x3).Busy = False And IEx(x3).readyState = READYSTATE_COMPLETE And IExN(x3) = 3 Then
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 5
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
   For Each p In docx(x3).getElementsByTagName("p")
    If InStr(p.innerText, "There are no tasks associated with this project.") > 0 Then
        GoTo noTasksInProject
    End If
   Next p
   For x4 = 0 To docx(x3).getElementById("body").Children(0).Children(2).Children(7).Children(1).Children(1).Children.Length - 1 'docx(x3).getElementById("body").Children(0).Children(2).Children(5).Children(0).Children(1).Children.Length - 1
        Set x9 = docx(x3).getElementById("body").Children(0).Children(2).Children(7).Children(1).Children(1).Children(x4)
''' ONLY ACTIVE TASKS NEEDED?
        If InStr(LCase(x9.Children(4).innerText), LCase("completed")) < 1 And InStr(LCase(x9.Children(4).innerText), LCase("canceled")) < 1 Then
            Worksheets("Tasks").Cells(z, 1).Value = Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 1).Value
            Worksheets("Tasks").Cells(z, 2).Value = Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 3).Value
            Worksheets("Tasks").Cells(z, 3).Value = x9.Children(2).innerText & " - " & x9.Children(4).innerText
            Worksheets("Tasks").Cells(z, 4).Value = x9.Children(6).innerText
            'If Replace(Worksheets("Tasks").Cells(z, 4).Value, " ", "") = "" Then
            '    Worksheets("Tasks").Cells(z, 4).Value = "-"
            'End If
            Worksheets("Tasks").Cells(z, 5).Value = Worksheets("Tasks").Cells(z, 4).Value
            'go through 2nd round of pulls just for column 6/7 of task sheet
            
            Worksheets("Tasks").Cells(z, 8).Value = x9.Children(10).innerText
            Worksheets("Tasks").Cells(z, 8 + 1).Value = Worksheets("Tasks").Cells(z, 8).Value
            
            For Each div In x9.getElementsByClassName("li")
                If div.innerText = "View Task" Then
                    s1 = div.innerHTML
                End If
            Next div
            Debug.Print "Checking View Task link - HTML: " & s1
            's1 = x9.Children(11).Children(0).Children(2).Children(1).Children(yy - 1).Children(2).Children(1).Children(0)
            'task link
            Debug.Print s1
            's1 = x9.Children(11).Children(0).Children(2).Children(1).Children(yy - 1).Children(2).Children(1).Children(0)
            'Debug.Print s1 '//*[@id="view_34ff782b3e3749e29295c9b29d875ead"]
            
            'Set x9 = docx(x3).getElementById("body").Children(0).Children(2).Children(7).Children(1).Children(1)
            If x9.Children(4).innerText = "Completed" Or x9.Children(4).innerText = "Canceled" Then
                s1 = x9.Children(11).Children(0).Children(1).Children(1).Children(0).innerHTML
                Worksheets("Tasks").Cells(z, 10).Value = Mid(s1, InStr(s1, "/Task/Detail/") + 13, 77) ' Len(s1) - (InStr(s1, "view_") + 5) + 1)
            Else
                s1 = x9.Children(11).Children(0).Children(2).Children(1).Children(0).innerHTML 'doc.getElementById("body").Children(0).Children(2).Children(3).Children(0).Children(1).Children(y - 1).Children(2).Children(11).Children(0).Children(1).Children(1).Children(0).innerHTML
                Worksheets("Tasks").Cells(z, 10).Value = Mid(s1, InStr(s1, "/Task/Detail/") + 13, 77) ' Len(s1) - (InStr(s1, "view_") + 5) + 1)
            End If
            
            'Worksheets("Tasks").Cells(z, 10).Value = "https" & Mid(s1, InStr(s1, "href") + 6, Len(s1) - InStr(s1, "href") - 5 - (InStr(s1, "title") - 3))
            Worksheets("Tasks").Cells(z, 11).Value = Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value
            Worksheets("Tasks").Cells(z, 10).Value = Replace(Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index/", "") & "/Task/Detail/" & Worksheets("Tasks").Cells(z, 10).Value
            Debug.Print "Checking View Task link - link: " & Worksheets("Projects").Cells(x + y - 1, ProjLinkCol).Value
            
            z = z + 1
'            Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, IncompleteTaskCol).Value = Worksheets("Projects").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, IncompleteTaskCol).Value & vbLf & x9.Children(2).innerText & " - " & x9.Children(4).innerText
        End If
    Next x4
noTasksInProject:
    IExN(x3) = 4
    'End If
  Next x3
  End If
  End If
    yy = yy + 1
Next y
End If


If index = 1 Or index = 4 Then
'If Worksheets("Projects").Cells(2, 2).Value <> "" Then
'Cycle tasks
page = 1
yy = 1 'yy is the current count (1 thru 10) for the page
For y = 1 To z - 3
    ProgressForm.Label3.Caption = "Work on hand: tasks " & y & " of " & z - 3
    If y = page * 10 + 1 Then
        page = page + 1
        yy = 1
    End If
    
If y = totalProjects Or y Mod 10 = 0 Then
    
    For x3 = 0 To (y - 1) Mod 10
        Sleep 5
        IEx(x3).Visible = False
        IEx(x3).navigate (Worksheets("Tasks").Cells(4 + (x3 + (page - 1) * 10), 10).Value), self
        IEx(x3).Visible = False
        IExN(x3) = 0
    Next x3
    For x3 = 0 To (y - 1) Mod 10
    'Do
        Do
            Sleep 5
            Set sh = New Shell32.Shell
            For Each eachIE In sh.Windows
              'For x3 = 0 To (y - 1) Mod 10
                pwebAddressx = Worksheets("Tasks").Cells(4 + (x3 + (page - 1) * 10), 10).Value
                If InStr(1, eachIE.LocationURL, pwebAddressx) Then
                    Set IEx(x3) = eachIE
                    IEx(x3).Visible = False  'This is here because in some environments, the new process defaults to Visible.
                    Exit Do
                    IExN(x3) = 1
                End If
              'Next x3
            Next eachIE
        Loop
    Next x3
  
  For x3 = 0 To (y - 1) Mod 10
   'If IEx(x3).Busy = False And IEx(x3).readyState = READYSTATE_COMPLETE Then 'And IExN(x3) = 1 Then
    While IEx(x3).Busy  ' The new process may still be busy even after you find it
       DoEvents
    Wend
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 5
        Debug.Print x3
        Debug.Print y
        Debug.Print Worksheets("Tasks").Cells(4 + (x3 + (page - 1) * 10), 10).Value
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    Worksheets("Tasks").Cells(4 + (x3 + (page - 1) * 10), 6).Value = docx(x3).getElementById("body").Children(0).Children(3).Children(1).Children(3).Children(2).Children(1).innerText
    Worksheets("Tasks").Cells(4 + (x3 + (page - 1) * 10), 7).Value = Worksheets("Tasks").Cells(4 + (x3 + (page - 1) * 10), 6).Value
  Next x3
   
  End If

    yy = yy + 1
Next y
End If

noActiveProjects:


For x3 = 0 To 9
    If Not (IEx(x3) Is Nothing) Then
        IEx(x3).Quit
        Set IEx(x3) = Nothing
        Set shx(x3) = Nothing
        Set eachIEx(x3) = Nothing
    End If
Next x3

    IE.Quit
    Set IE = Nothing
   
errorEnd:
   

End Sub

Sub TaskProjectList()

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long, x5 As Long
Dim pWebAddress As String, pwebAddressx As String
Dim x As Long
Dim tbl As Object, p As Object, td As Object, fld As Object, td2 As HTMLBaseElement
Dim doc As HTMLDocument, lastAddress As String
Dim totalProjects As Long, y As Long, yy As Long, z As Long, page As Long, y1 As Long
Dim IE As InternetExplorer
Dim docx(10) As HTMLDocument
Dim IEx(10) As InternetExplorer, IExN(10) As Long
Dim IE1(10) As Boolean, IE2(10) As Boolean, x9 As HTMLBaseElement

Dim sh
Dim eachIE
Dim shx(10)
Dim eachIEx(10)

Dim ProjLinkCol As Long, LineItemCol As Long, ECDCol As Long, StatusNotesCol As Long, StatusCol As Long
StatusCol = 7
ProjLinkCol = 14
LineItemCol = 2
ECDCol = 5
StatusNotesCol = 9

pWebAddress = "https://portal.ul.com"

Dim loginAttempt As Boolean
loginAttempt = False

Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress, self
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
      If InStr(1, eachIE.LocationURL, pWebAddress) Then
        Set IE = eachIE
        Exit Do
      End If
  Next eachIE
Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document
login:
If doc.getElementById("body") Is Nothing Then
    ProgressForm.Hide
    MsgBox "Log into Flex"
    ProgressForm.Show
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

IE.Visible = False

Do
Sleep 25
Set doc = IE.Document
Loop Until Not (doc.getElementsByTagName("p") Is Nothing)


page = 1
'project counter
x = 3
Do
    x = x + 1
Loop Until Worksheets("Projects").Cells(x, ProjLinkCol).Value = ""

'task counter
z = 3
Do
    z = z + 1
Loop Until Worksheets("Tasks").Cells(z, 11).Value = ""

For Each p In doc.getElementsByTagName("p")
    If InStr(p.innerText, "There are no projects to display.") > 0 Then
        'Worksheets("Projects").Cells(4, EmpCol).Value = employee
        Worksheets("Projects").Cells(4, 1).Value = "No active projects"
        GoTo noActiveProjects
    End If
Next p

For x1 = 0 To 9
    Sleep 10
    IE1(x1) = False
    IE2(x1) = False
    Set IEx(x1) = New InternetExplorer
    IEx(x1).Left = 0
    IEx(x1).Top = 0
    IEx(x1).Height = 0
    IEx(x1).Width = 0
    IEx(x1).Visible = False
    IExN(x1) = 0
'    IEx(x1).Application.ScreenUpdating = False
Next x1


ProgressForm.Left = Application.Left
ProgressForm.Top = Application.Top
ProgressForm.Show

'Cycle tasks
page = 1
yy = 1 'yy is the current count (1 thru 10) for the page
For y = 1 To z - 3
    ProgressForm.Label3.Caption = "Work on hand: tasks " & y & " of " & z - 3
    If y = page * 10 + 1 Then
        page = page + 1
        yy = 1
    End If
    
If y = totalProjects Or y Mod 10 = 0 Then
    
    For x3 = 0 To (y - 1) Mod 10
        Sleep 50
        IEx(x3).Visible = False
        IEx(x3).navigate (Worksheets("Tasks").Cells(4 + (x3 + (page - 1) * 10), 10).Value), self
        IEx(x3).Visible = False
        IExN(x3) = 0
    Next x3
    For x3 = 0 To (y - 1) Mod 10
    'Do
        Do
            Sleep 50
            Set sh = New Shell32.Shell
            For Each eachIE In sh.Windows
              'For x3 = 0 To (y - 1) Mod 10
                pwebAddressx = Worksheets("Tasks").Cells(4 + (x3 + (page - 1) * 10), 10).Value
                If InStr(1, eachIE.LocationURL, pwebAddressx) Then
                    Set IEx(x3) = eachIE
                    IEx(x3).Visible = False  'This is here because in some environments, the new process defaults to Visible.
                    Exit Do
                    IExN(x3) = 1
                End If
              'Next x3
            Next eachIE
        Loop
    Next x3
  
  For x3 = 0 To (y - 1) Mod 10
   'If IEx(x3).Busy = False And IEx(x3).readyState = READYSTATE_COMPLETE Then 'And IExN(x3) = 1 Then
    While IEx(x3).Busy  ' The new process may still be busy even after you find it
       DoEvents
    Wend
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 25
        Debug.Print x3
        Debug.Print y
        Debug.Print Worksheets("Tasks").Cells(4 + (x3 + (page - 1) * 10), 10).Value
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    Worksheets("Tasks").Cells(4 + (x3 + (page - 1) * 10), 6).Value = docx(x3).getElementById("body").Children(0).Children(3).Children(1).Children(3).Children(2).Children(1).innerText
    Worksheets("Tasks").Cells(4 + (x3 + (page - 1) * 10), 7).Value = Worksheets("Tasks").Cells(4 + (x3 + (page - 1) * 10), 6).Value
  Next x3

  End If

    yy = yy + 1
Next y
ProgressForm.Hide
noActiveProjects:


For x3 = 0 To 9
    If Not (IEx(x3) Is Nothing) Then
        IEx(x3).Quit
        Set IEx(x3) = Nothing
        Set shx(x3) = Nothing
        Set eachIEx(x3) = Nothing
    End If
Next x3

    IE.Quit
    Set IE = Nothing
   
errorEnd:
   

End Sub



Function stringToDecimal(sNum As String) As Long

stringToDecimal = CDbl(sNum)

End Function


Sub EmployeeProjectList(employee As String)
    
Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long
Dim pWebAddress As String, pwebAddressx As String
Dim x As Long
Dim tbl As Object, p As Object, td As Object, fld As Object, td2 As HTMLBaseElement
Dim doc As HTMLDocument, lastAddress As String
Dim totalProjects As Long, y As Long, yy As Long, z As Long, page As Long, y1 As Long
Dim IE As InternetExplorer
Dim docx(10) As HTMLDocument
Dim IEx(10) As InternetExplorer, IExN(10) As Long
Dim IE1(10) As Boolean, IE2(10) As Boolean, x9 As HTMLBaseElement

Dim sh
Dim eachIE
Dim shx(10)
Dim eachIEx(10)

Dim EmpCol As Long, ProjNameCol As Long, ProjLinkCol As Long, CostLimitCol As Long, CurrencyCol As Long, ECDCol As Long, CompletedCol As Long, LineItemCol As Long, TCCol As Long, IncompleteTaskCol As Long, StatusNotesCol As Long
Dim CompanyCol As Long
'Data defaults to column 24 if any of the column headers are deleted
EmpCol = 24
ProjNameCol = 24
ProjLinkCol = 24
CostLimitCol = 24
CurrencyCol = 24
ECDCol = 24
CompletedCol = 24
LineItemCol = 24
TCCol = 24
IncompleteTaskCol = 24
StatusNotesCol = 24
CompanyCol = 24

For x = 3 To 24
    If Worksheets("Revenue").Cells(3, x).Value = "Employee" Then
        EmpCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Project Name" Then
        ProjNameCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Project link" Then
        ProjLinkCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Cost limit" Then
        CostLimitCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Currency" Then
        CurrencyCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "ECD" Then
        ECDCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Completed?" Then
        CompletedCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Line Item" Then
        LineItemCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "TC_Processing" Then
        TCCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Incomplete Tasks" Then
        IncompleteTaskCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Status Notes" Then
        StatusNotesCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Company" Then
        CompanyCol = x
    End If
Next x


'Debug.Print employee
'Loop for all in progress projects
pWebAddress = "https://portal.ul.com/Search/Project?EntityType=Project&Filters.ariaProjectProjectStatus=InProgress&Filters.ariaProjectProjectStatus=OnHold&Filters.ariaProjectHandler=" & Replace(Replace(employee, " ", "."), "..", ".") & "%40ul.com&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending&viewType=Default"
If Worksheets("Revenue").Cells(3, 26).Value <> "" Then
    pWebAddress = "https://portal.ul.com/Search/Project?viewType=Default&EntityType=Project&query=" & Replace(employee, " ", "+") & "&Filters.ariaProjectProjectStatus=InProgress&Filters.ariaProjectProjectStatus=OnHold&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending"
End If
Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress, self


Dim loginAttempt As Boolean
loginAttempt = False
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
      If InStr(1, eachIE.LocationURL, pWebAddress) Then
        Set IE = eachIE
        'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
        Exit Do
      End If
  Next eachIE
Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document
login:
If doc.getElementById("body") Is Nothing Then
    ProgressForm.Hide
    MsgBox "Log into Flex"
    ProgressForm.Show
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

IE.Visible = False

Do
Sleep 25
Set doc = IE.Document
Loop Until Not (doc.getElementsByTagName("p") Is Nothing)

page = 1
x = 3
Do
    x = x + 1
Loop Until Worksheets("Revenue").Cells(x, EmpCol).Value = ""

For Each p In doc.getElementsByTagName("p")
    If InStr(p.innerText, "There are no projects to display.") > 0 Then
        Worksheets("Revenue").Cells(x, EmpCol).Value = employee
        Worksheets("Revenue").Cells(x, ProjNameCol).Value = "No active projects"
        GoTo noActiveProjects
    End If
Next p

'get total number of projects from this field
s1 = doc.getElementById("frmSearchTop").Children(1).Children(0).Children(0).innerText
s2 = Mid(s1, InStr(s1, "of") + 3, Len(s1) - InStr(s1, "of") - 2)

totalProjects = CInt(s2)

For x1 = 0 To 9
    Sleep 10
    IE1(x1) = False
    IE2(x1) = False
    Set IEx(x1) = New InternetExplorer
    IEx(x1).Left = 0
    IEx(x1).Top = 0
    IEx(x1).Height = 0
    IEx(x1).Width = 0
    'IEx(x1).Visible = False
    IExN(x1) = 0
'    IEx(x1).Application.ScreenUpdating = False
Next x1

yy = 1 'yy is the current count (1 thru 10) for the page
For y = 1 To totalProjects
    ProgressForm.Label3.Caption = "Work on hand: project " & y & " of " & totalProjects
    If y = page * 10 + 1 Then
        For x1 = 0 To 9
            IE1(x1) = False
            IE2(x1) = False
        Next x1
        page = page + 1
        IE.navigate Replace(pWebAddress, "EntityType", "Query=&Paging.Page=" & page & "&EntityType"), self
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Do
            Sleep 25
            Set doc = IE.Document
        Loop Until Not (doc.getElementById("body") Is Nothing)
        Set doc = IE.Document
        lastAddress = IE.LocationURL

        yy = 1
    End If
   
    'Worksheets("Revenue").Cells(x + y - 1, EmpCol).value = employee
    Worksheets("Revenue").Cells(x + y - 1, ProjNameCol).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0).innerText
    Worksheets("Revenue").Cells(x + y - 1, CompanyCol).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(2).Children(1).innerText
    Worksheets("Revenue").Cells(x + y - 1, EmpCol).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(3).Children(1).innerText
    s1 = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0)
    Worksheets("Revenue").Cells(x + y - 1, ProjLinkCol).Value = "https" & Mid(s1, InStr(s1, "href") + 6, Len(s1) - InStr(s1, "href") - 5 - (InStr(s1, "title") - 3))
    Worksheets("Revenue").Cells(x + y - 1, CostLimitCol).Value = "No order lines"
    lastAddress = IE.LocationURL
    
If y = totalProjects Or y Mod 10 = 0 Then
    
    For x3 = 0 To (y - 1) Mod 10
        Sleep 50
        'IEx(x3).Visible = False
        IEx(x3).navigate (Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "OrderInfo")), self
        'IEx(x3).Visible = False
        IExN(x3) = 0
    Next x3
  If y Mod 10 <> 0 Then
    For x3 = (y) Mod 10 To 9
        IExN(x3) = 99
    Next x3
  End If
    Do
        Do
            Sleep 50
            If IExN(0) > 0 And IExN(1) > 0 And IExN(2) > 0 And IExN(3) > 0 And IExN(4) > 0 And IExN(5) > 0 And IExN(6) > 0 And IExN(7) > 0 And IExN(8) > 0 And IExN(9) > 0 Then
               Exit Do
            End If
            Set sh = New Shell32.Shell
            For Each eachIE In sh.Windows
              For x3 = 0 To (y - 1) Mod 10
                pwebAddressx = Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "OrderInfo")
                If InStr(1, eachIE.LocationURL, pwebAddressx) Then
                    Set IEx(x3) = eachIE
                    'IEx(x3).Visible = False  'This is here because in some environments, the new process defaults to Visible.
                    IExN(x3) = 1
                End If
              Next x3
            Next eachIE
        Loop
  
  
  For x3 = 0 To (y - 1) Mod 10
   If IEx(x3).Busy = False And IEx(x3).readyState = READYSTATE_COMPLETE And IExN(x3) = 1 Then
    While IEx(x3).Busy  ' The new process may still be busy even after you find it
       DoEvents
    Wend
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 25
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
            For Each tbl In docx(x3).getElementsByTagName("TABLE")
                x4 = 0
                For Each td In tbl.getElementsByTagName("td")
                    If InStr(td.innerText, "AWAITING_FULFILLMENT") > 0 Or InStr(td.innerText, "BOOKED") > 0 Then
                      If InStr(td.parentElement.Children(0).innerText, ".") <> InStrRev(td.parentElement.Children(0).innerText, ".") Then
                        If Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value <> "No order lines" Then
                            s1 = td.parentElement.Children(2).innerText
                            Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value = (Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value) + CDbl(Mid(s1, 1, InStr(s1, " ") - 1))
                            Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value = Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value & ", " & td.parentElement.Children(0).innerText ' "Multiple line items"
                        Else
                            s1 = td.parentElement.Children(2).innerText
                            Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value = CDbl(Mid(s1, 1, InStr(s1, " ") - 1))
                            Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value = td.parentElement.Children(0).innerText
                        End If
                        Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CurrencyCol).Value = Mid(s1, InStr(s1, " ") + 1, Len(s1) - InStr(s1, " "))
                      End If
                    End If
                Next td
            Next tbl
            IE1(x3) = True
            'IEx(x3).Visible = False
            IEx(x3).navigate (Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "Details")), self
            IExN(x3) = 2
     End If
'    Next x3
    
'    For x3 = 0 To (y - 1) Mod 10
    If IEx(x3).Busy = False And IEx(x3).readyState = READYSTATE_COMPLETE And IExN(x3) = 2 Then
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 25
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    
    Set docx(x3) = IEx(x3).Document
    
    For Each div In docx(x3).getElementsByTagName("div")
        If InStr(div.innerText, "Estimated Completion Date") > 0 Then
            Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ECDCol).Value = div.parentElement.Children(1).innerText
        End If
    Next div
     Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ECDCol).Value = docx(x3).getElementById("body").Children(0).Children(3).Children(1).Children(4).Children(1).Children(1).innerText
     Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, StatusNotesCol).Value = docx(x3).getElementById("body").Children(0).Children(3).Children(1).Children(5).Children(0).Children(1).innerText
    If Worksheets("Revenue").Cells(5, 26).Value <> "" Then
        IEx(x3).navigate (Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index/", "") & "/Task?&viewType=List"), self
        IExN(x3) = 3
    Else
        IExN(x3) = 4
    End If
     End If
    Next x3

  If Worksheets("Revenue").Cells(5, 26).Value <> "" Then '''' get task information
  For x3 = 0 To (y - 1) Mod 10
    If IEx(x3).Busy = False And IEx(x3).readyState = READYSTATE_COMPLETE And IExN(x3) = 3 Then
        Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 25
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
Debug.Print doc.getElementById("body").Children.Length - 1 'docx(x3).getElementById("body").Children(0).Children(2).Children(5).Children(0).Children(1).Children.Length
Debug.Print doc.getElementById("body").Children(0).Children.Length - 1 'docx(x3).getElementById("body").Children(0).Children(2).Children(5).Children(0).Children(1).Children.Length
Debug.Print doc.getElementById("body").Children(0).Children(2).Children.Length - 1 'docx(x3).getElementById("body").Children(0).Children(2).Children(5).Children(0).Children(1).Children.Length
Debug.Print doc.getElementById("body").Children(0).Children(2).Children(5).Children.Length - 1 'docx(x3).getElementById("body").Children(0).Children(2).Children(5).Children(0).Children(1).Children.Length
Debug.Print doc.getElementById("body").Children(0).Children(2).Children(5).Children(1).Children.Length - 1 'docx(x3).getElementById("body").Children(0).Children(2).Children(5).Children(0).Children(1).Children.Length
Debug.Print IEx(x3).LocationURL

For Each p In docx(x3).getElementsByTagName("p")
    If InStr(p.innerText, "There are no tasks associated with this project.") > 0 Then
        Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, IncompleteTaskCol).Value = "No tasks in project"
        GoTo noTasksInProject
    End If
Next p
For x4 = 0 To docx(x3).getElementById("body").Children(0).Children(2).Children(7).Children(1).Children(1).Children.Length - 1 'docx(x3).getElementById("body").Children(0).Children(2).Children(5).Children(0).Children(1).Children.Length - 1
        Set x9 = docx(x3).getElementById("body").Children(0).Children(2).Children(7).Children(1).Children(1).Children(x4)
        If InStr(LCase(x9.Children(4).innerText), LCase("completed")) < 1 And InStr(LCase(x9.Children(4).innerText), LCase("canceled")) < 1 Then
            Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, IncompleteTaskCol).Value = Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, IncompleteTaskCol).Value & vbLf & x9.Children(2).innerText & " - " & x9.Children(4).innerText
        End If
    Next x4
noTasksInProject:
    IExN(x3) = 4
    End If
  Next x3
  End If



'''TC_Processing flag
If Worksheets("Revenue").Cells(4, 26).Value <> "" Then
    For x3 = 0 To (y - 1) Mod 10
     If IEx(x3).Busy = False And IEx(x3).readyState = READYSTATE_COMPLETE And IExN(x3) = 4 Then
        IEx(x3).navigate (Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "") & "/Task?&viewType=List"), self
        IExN(x3) = 5
     End If
    If IEx(x3).Busy = False And IEx(x3).readyState = READYSTATE_COMPLETE And IExN(x3) = 5 Then
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 25
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document

Debug.Print Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "") & "/Task?&viewType=List"
   
    For Each p In docx(x3).getElementsByTagName("p")
      If InStr(p.innerText, "There are no tasks associated with this project.") > 0 Then
        GoTo noTasksInProjectTC
      End If
    Next p
    Set x9 = docx(x3).getElementById("body").Children(0).Children(2).Children(7).Children(1).Children(1).Children(0)
Set x9 = x9.Children.Item(x9.Children.Length - 2)
totalTasks = x9.parentElement.parentElement.Children.Length
i = 1
For y1 = 1 To totalTasks
    If InStr(x9.parentElement.parentElement.Children(y1 - 1).Children(4).innerText, "Canceled") < 1 And InStr(x9.parentElement.parentElement.Children(y1 - 1).Children(4).innerText, "Completed") < 1 Then
        s1 = x9.parentElement.parentElement.Children(y1 - 1).Children(2).innerText
        If InStr(LCase(s1), "tc_processing") > 0 Then
            'TCDownload.TextBox13.text = x9.parentElement.parentElement.Children(y - 1).Children(6).innerText
            Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, TCCol).Value = Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, TCCol).Value & x9.parentElement.parentElement.Children(y1 - 1).Children(4).innerText & ", started: " & x9.parentElement.parentElement.Children(y1 - 1).Children(6).innerText & vbLf
        End If
    End If
Next y1
noTasksInProjectTC:
    IE2(x3) = True
    IExN(x3) = 10
    End If

    Next x3
Else
    For x3 = 0 To (y - 1) Mod 10
      If IExN(x3) = 4 Then
        IExN(x3) = 10
      End If
    Next x3
End If

'end if for TC Processing

Loop Until IExN(0) > 9 And IExN(1) > 9 And IExN(2) > 9 And IExN(3) > 9 And IExN(4) > 9 And IExN(5) > 9 And IExN(6) > 9 And IExN(7) > 9 And IExN(8) > 9 And IExN(9) > 9
       
End If
' endif for y = totalProjects or y Mod 10 = 0

'if project is completed and date is before cutoff, then goto end of procedure
    yy = yy + 1
Next y

noActiveProjects:






If Worksheets("Revenue").Cells(1, 5).Value <> "" Then
    GoTo noCompletedProjects
End If
'Cycle through all completed projects
pWebAddress = "https://portal.ul.com/Search/Project?EntityType=Project&Filters.ariaProjectProjectStatus=Completed&Filters.ariaProjectHandler=" & Replace(Replace(employee, " ", "."), "..", ".") & "%40ul.com&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending&viewType=Default"
'pWebAddress = "https://portal.ul.com/Search/Project?EntityType=Project&Filters.ariaProjectProjectStatus=InProgress&Filters.ariaProjectProjectStatus=OnHold&Filters.ariaProjectHandler=" & Replace(Replace(employee, " ", "."), "..", ".") & "%40ul.com&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending&viewType=Default"
If Worksheets("Revenue").Cells(3, 26).Value <> "" Then
    pWebAddress = "https://portal.ul.com/Search/Project?viewType=Default&EntityType=Project&query=" & Replace(employee, " ", "+") & "&Filters.ariaProjectProjectStatus=Completed&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending"
End If

'Set IE = New InternetExplorer
'IE.Visible = True
IE.navigate pWebAddress, self
Do
    DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document

Do
    Sleep 25
    Set doc = IE.Document
Loop Until Not (doc.getElementsByTagName("p") Is Nothing)
'Do
'    DoEvents
'Loop Until IE.readyState = READYSTATE_COMPLETE

page = 1
x = 3
Do
    x = x + 1
Loop Until Worksheets("Revenue").Cells(x, EmpCol).Value = ""

For Each p In doc.getElementsByTagName("p")
    If InStr(p.innerText, "There are no projects to display.") > 0 Then
        GoTo noCompletedProjects
    End If
Next p

'get total number of projects from this field
s1 = doc.getElementById("frmSearchTop").Children(1).Children(0).Children(0).innerText
s2 = Mid(s1, InStr(s1, "of") + 3, Len(s1) - InStr(s1, "of") - 2)
totalProjects = CInt(s2)

yy = 1 'yy is the current count (1 thru 10) for the page
For y = 1 To totalProjects
    ProgressForm.Label3.Caption = "Completed project # " & y
    If y = page * 10 + 1 Then
        For x1 = 0 To 9
            IE1(x1) = False
            IE2(x1) = False
        Next x1
        page = page + 1
        IE.navigate Replace(pWebAddress, "EntityType", "Query=&Paging.Page=" & page & "&EntityType"), self
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Do
            Sleep 25
            Set doc = IE.Document
        Loop Until Not (doc.getElementById("body") Is Nothing)
        Set doc = IE.Document
        lastAddress = IE.LocationURL

        yy = 1
    End If
    
    
        s1 = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(7).Children(1).innerText
        s2 = Mid(s1, 1, InStrRev(s1, "/") + 4)
        ProgressForm.Label3.Caption = "Completed project # " & y & " completed " & s2

        If CInt(Mid(s1, InStrRev(s1, "/") + 1, 4)) < CInt(Worksheets("Revenue").Cells(2, EmpCol).Value) Then
            If y = 1 Then
                GoTo noCompletedProjects
            End If
            y = y - 1
            totalProjects = y
            GoTo endCompletedProjects
        End If
        If CInt(Mid(s2, Len(s2) - 3, 4)) = CInt(Worksheets("Revenue").Cells(2, EmpCol).Value) Then
            If CInt(Mid(s1, 1, InStr(s1, "/") - 1)) < Worksheets("Revenue").Cells(2, 2).Value Then
                If y = 1 Then
                    GoTo noCompletedProjects
                End If
                y = y - 1
                totalProjects = y
                GoTo endCompletedProjects
            End If
        End If
    'End If
    Worksheets("Revenue").Cells(x + y - 1, CompletedCol).Value = "Yes"
    Worksheets("Revenue").Cells(x + y - 1, ECDCol).Value = s2
    'Debug.Print s1
    'Debug.Print s2
'    Worksheets("Revenue").Cells(x + y - 1, EmpCol).value = employee
    Worksheets("Revenue").Cells(x + y - 1, EmpCol).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(3).Children(1).innerText
    Worksheets("Revenue").Cells(x + y - 1, ProjNameCol).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0).innerText
    Worksheets("Revenue").Cells(x + y - 1, CompanyCol).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(2).Children(1).innerText
    s1 = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0)
    Worksheets("Revenue").Cells(x + y - 1, ProjLinkCol).Value = "https" & Mid(s1, InStr(s1, "href") + 6, Len(s1) - InStr(s1, "href") - 5 - (InStr(s1, "title") - 3))
    Worksheets("Revenue").Cells(x + y - 1, CostLimitCol).Value = "No order lines"
    lastAddress = IE.LocationURL
    
endCompletedProjects:
If y Mod 10 = 0 Then
    For x3 = 0 To 9
        Sleep 25
'        Set IEx(x3) = New InternetExplorer
'        IEx(x3).Visible = False
        IEx(x3).navigate (Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "OrderInfo")), self
    
pwebAddressx = Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "OrderInfo")
While IEx(x3).Busy
  DoEvents
  Wend
Do
  Set shx(x3) = New Shell32.Shell
  For Each eachIEx(x3) In shx(x3).Windows
    If InStr(1, eachIEx(x3).LocationURL, pwebAddressx) Then
      Set IEx(x3) = eachIEx(x3)
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIEx(x3)
  Loop
'Set eachIEx(x3) = Nothing
'Set shx(x3) = Nothing

While IEx(x3).Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
  
    Next x3
'    MsgBox "pause 1"
End If
''Debug.Print "y = " & y & "; totalProjects = " & totalProjects
If y = totalProjects Then
    For x3 = 0 To (y - 1) Mod 10
        Sleep 25
'        Set IEx(x3) = New InternetExplorer
'        IEx(x3).Visible = False
        IEx(x3).navigate (Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "OrderInfo")), self
pwebAddressx = Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "OrderInfo")
While IEx(x3).Busy
  DoEvents
  Wend
Do
  Set shx(x3) = New Shell32.Shell
  For Each eachIEx(x3) In shx(x3).Windows
    If InStr(1, eachIEx(x3).LocationURL, pwebAddressx) Then
      Set IEx(x3) = eachIEx(x3)
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIEx(x3)
  Loop
While IEx(x3).Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
    
    Next x3
End If

If y Mod 10 = 0 Then
    For x3 = 0 To 9
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE

    Do
        Sleep 25
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
            
            For Each tbl In docx(x3).getElementsByTagName("TABLE")
                x4 = 0
                For Each td In tbl.getElementsByTagName("td")
                    'If InStr(td.innerText, "AWAITING_FULFILLMENT") > 0 Then
                    '    If Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value <> "No order lines" Then
                    '        s1 = td.parentElement.Children(2).innerText
                    '        Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value = (Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value) + CDbl(Mid(s1, 1, InStr(s1, " ") - 1))
                    '        Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value = Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value & ", " & td.parentElement.Children(0).innerText ' "Multiple line items"
                    '    Else
                    '        s1 = td.parentElement.Children(2).innerText
                    '        Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value = CDbl(Mid(s1, 1, InStr(s1, " ") - 1))
                    '        Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value = td.parentElement.Children(0).innerText
                    '    End If
                    '
                    '    Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CurrencyCol).Value = Mid(s1, InStr(s1, " ") + 1, Len(s1) - InStr(s1, " "))
                    'End If
                    If InStr(td.innerText, "AWAITING_FULFILLMENT") > 0 Or InStr(td.innerText, "BOOKED") > 0 Then
                      If InStr(td.parentElement.Children(0).innerText, ".") <> InStrRev(td.parentElement.Children(0).innerText, ".") Then
                        If Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value <> "No order lines" Then
                            s1 = td.parentElement.Children(2).innerText
                            Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value = (Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value) + CDbl(Mid(s1, 1, InStr(s1, " ") - 1))
                            Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value = Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value & ", " & td.parentElement.Children(0).innerText ' "Multiple line items"
                        Else
                            s1 = td.parentElement.Children(2).innerText
                            Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value = CDbl(Mid(s1, 1, InStr(s1, " ") - 1))
                            Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value = td.parentElement.Children(0).innerText
                        End If
                        Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CurrencyCol).Value = Mid(s1, InStr(s1, " ") + 1, Len(s1) - InStr(s1, " "))
                      End If
                    End If
                Next td
            Next tbl
            IE1(x3) = True
            'IEx(x3).Visible = False
            IEx(x3).navigate (Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "Details")), self
    Next x3
End If

If y = totalProjects And y Mod 10 <> 0 Then
    For x3 = 0 To (y - 1) Mod 10
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE

    Do
        Sleep 25
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
            
            For Each tbl In docx(x3).getElementsByTagName("TABLE")
                x4 = 0
                For Each td In tbl.getElementsByTagName("td")
                    'If InStr(td.innerText, "AWAITING_FULFILLMENT") > 0 Then
                    '    If Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value <> "No order lines" Then
                    '        s1 = td.parentElement.Children(2).innerText
                    '        Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value = (Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value) + CDbl(Mid(s1, 1, InStr(s1, " ") - 1))
                    '        Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value = Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value & ", " & td.parentElement.Children(0).innerText ' "Multiple line items"
                    '    Else
                    '        s1 = td.parentElement.Children(2).innerText
                    '        Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value = CDbl(Mid(s1, 1, InStr(s1, " ") - 1))
                    '        Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value = td.parentElement.Children(0).innerText
                    '    End If
                    '    Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CurrencyCol).Value = Mid(s1, InStr(s1, " ") + 1, Len(s1) - InStr(s1, " "))
                    'End If
                    If InStr(td.innerText, "AWAITING_FULFILLMENT") > 0 Or InStr(td.innerText, "BOOKED") > 0 Then
                      If InStr(td.parentElement.Children(0).innerText, ".") <> InStrRev(td.parentElement.Children(0).innerText, ".") Then
                        If Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value <> "No order lines" Then
                            s1 = td.parentElement.Children(2).innerText
                            Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value = (Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value) + CDbl(Mid(s1, 1, InStr(s1, " ") - 1))
                            Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value = Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value & ", " & td.parentElement.Children(0).innerText ' "Multiple line items"
                        Else
                            s1 = td.parentElement.Children(2).innerText
                            Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value = CDbl(Mid(s1, 1, InStr(s1, " ") - 1))
                            Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, LineItemCol).Value = td.parentElement.Children(0).innerText
                        End If
                        Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, CurrencyCol).Value = Mid(s1, InStr(s1, " ") + 1, Len(s1) - InStr(s1, " "))
                      End If
                    End If
                Next td
            Next tbl
            IE1(x3) = True
        'IEx(x3).Visible = False
        IEx(x3).navigate (Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "Details")), self
    Next x3
End If


'load 2nd set of info for each set
If y Mod 10 = 0 Then
    For x3 = 0 To 9
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 25
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    IE2(x3) = True
    Next x3
End If

If y = totalProjects And y Mod 10 <> 0 Then
    For x3 = 0 To (y - 1) Mod 10
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 25
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    IE2(x3) = True
    Next x3
End If

'if project is completed and date is before cutoff, then goto end of procedure
    yy = yy + 1
'Sleep 50
    If y = totalProjects Then
        GoTo noCompletedProjects
    End If
Next y

noCompletedProjects:

For x3 = 0 To 9
    If Not (IEx(x3) Is Nothing) Then
        IEx(x3).Quit
        Set IEx(x3) = Nothing
        Set shx(x3) = Nothing
        Set eachIEx(x3) = Nothing
    End If
Next x3

    IE.Quit
    Set IE = Nothing
   
errorEnd:
   
End Sub

Sub CCNHistoryProjectList(CCN As String)
    
Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long
Dim pWebAddress As String, pwebAddressx As String
Dim x As Long, z9 As Long
Dim tbl As Object, p As Object, td As Object, fld As Object, td2 As HTMLBaseElement
Dim doc As HTMLDocument, lastAddress As String
Dim totalProjects As Long, y As Long, yy As Long, z As Long, page As Long, y1 As Long
Dim IE As InternetExplorer
Dim docx(10) As HTMLDocument
Dim IEx(10) As InternetExplorer, IExN(10) As Long
Dim IE1(10) As Boolean, IE2(10) As Boolean, x9 As HTMLBaseElement

Dim sh
Dim eachIE
Dim shx(10)
Dim eachIEx(10)

Dim EmpCol As Long, ProjNameCol As Long, ProjLinkCol As Long, CostLimitCol As Long, CurrencyCol As Long, ECDCol As Long, CompletedCol As Long, LineItemCol As Long, TCCol As Long, IncompleteTaskCol As Long, StatusNotesCol As Long
Dim CompanyCol As Long
'Data defaults to column 24 if any of the column headers are deleted
EmpCol = 24
ProjNameCol = 24
ProjLinkCol = 24
CostLimitCol = 24
CurrencyCol = 24
ECDCol = 24
CompletedCol = 24
LineItemCol = 24
TCCol = 24
IncompleteTaskCol = 24
StatusNotesCol = 24
CompanyCol = 24

For x = 3 To 24
    If Worksheets("Revenue").Cells(3, x).Value = "Employee" Then
        EmpCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Project Name" Then
        ProjNameCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Project link" Then
        ProjLinkCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Cost limit" Then
        CostLimitCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Currency" Then
        CurrencyCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "ECD" Then
        ECDCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Completed?" Then
        CompletedCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Line Item" Then
        LineItemCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "TC_Processing" Then
        TCCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Incomplete Tasks" Then
        IncompleteTaskCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Status Notes" Then
        StatusNotesCol = x
    End If
    If Worksheets("Revenue").Cells(3, x).Value = "Company" Then
        CompanyCol = x
    End If
Next x


'Debug.Print employee
'Loop for all in progress projects
pWebAddress = "https://portal.ul.com/Search/Project?EntityType=Project&Filters.ariaProjectProjectStatus=InProgress&Filters.ariaProjectProjectStatus=OnHold&Filters.ariaProjectHandler=" & Replace(Replace(employee, " ", "."), "..", ".") & "%40ul.com&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending&viewType=Default"
If Worksheets("Revenue").Cells(6, 26).Value <> "" Then
    pWebAddress = "https://portal.ul.com/Search/Project?viewType=Default&EntityType=Project&Filters.ariaProjectCCN=" & CCN & "&Filters.ariaProjectProjectStatus=InProgress&Filters.ariaProjectProjectStatus=OnHold&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending"
End If
Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress, self


Dim loginAttempt As Boolean
loginAttempt = False
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
      If InStr(1, eachIE.LocationURL, pWebAddress) Then
        Set IE = eachIE
        'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
        Exit Do
      End If
  Next eachIE
Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document
login:
If doc.getElementById("body") Is Nothing Then
    ProgressForm.Hide
    MsgBox "Log into Flex"
    ProgressForm.Show
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

IE.Visible = False

Do
Sleep 25
Set doc = IE.Document
Loop Until Not (doc.getElementsByTagName("p") Is Nothing)

page = 1
x = 3
Do
    x = x + 1
Loop Until Worksheets("Revenue").Cells(x, EmpCol).Value = ""

For Each p In doc.getElementsByTagName("p")
    If InStr(p.innerText, "There are no projects to display.") > 0 Then
        Worksheets("Revenue").Cells(x, EmpCol).Value = employee
        Worksheets("Revenue").Cells(x, ProjNameCol).Value = "No active projects"
        GoTo noActiveProjects
    End If
Next p

'get total number of projects from this field
s1 = doc.getElementById("frmSearchTop").Children(1).Children(0).Children(0).innerText
s2 = Mid(s1, InStr(s1, "of") + 3, Len(s1) - InStr(s1, "of") - 2)

totalProjects = CInt(s2)

For x1 = 0 To 9
    Sleep 10
    IE1(x1) = False
    IE2(x1) = False
    Set IEx(x1) = New InternetExplorer
    IEx(x1).Left = 0
    IEx(x1).Top = 0
    'IEx(x1).Height = 0
    'IEx(x1).Width = 0
    IEx(x1).Visible = True
    IExN(x1) = 0
'    IEx(x1).Application.ScreenUpdating = False
Next x1

yy = 1 'yy is the current count (1 thru 10) for the page
For y = 1 To totalProjects
    ProgressForm.Label3.Caption = "Work on hand: project " & y & " of " & totalProjects
    If y = page * 10 + 1 Then
        For x1 = 0 To 9
            IE1(x1) = False
            IE2(x1) = False
        Next x1
        page = page + 1
        IE.navigate Replace(pWebAddress, "EntityType", "Query=&Paging.Page=" & page & "&EntityType"), self
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Do
            Sleep 25
            Set doc = IE.Document
        Loop Until Not (doc.getElementById("body") Is Nothing)
        Set doc = IE.Document
        lastAddress = IE.LocationURL
        yy = 1
    End If
   
'   z9 = 4
'   Do
'    If Worksheets("Revenue").Cells(z9, ProjLinkCol).Value = "https" & Mid(s1, InStr(s1, "href") + 6, Len(s1) - InStr(s1, "href") - 5 - (InStr(s1, "title") - 3)) Then
'        GoTo repeatEntry
'    End If
'    z9 = z9 + 1
'   Loop Until Worksheets("Revenue").Cells(z9, ProjLinkCol).Value = ""
   
    'Worksheets("Revenue").Cells(x + y - 1, EmpCol).value = employee
    Worksheets("Revenue").Cells(x + y - 1, ProjNameCol).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0).innerText
    Worksheets("Revenue").Cells(x + y - 1, CompanyCol).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(2).Children(1).innerText
    Worksheets("Revenue").Cells(x + y - 1, EmpCol).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(3).Children(1).innerText
    s1 = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0)
    Worksheets("Revenue").Cells(x + y - 1, ProjLinkCol).Value = "https" & Mid(s1, InStr(s1, "href") + 6, Len(s1) - InStr(s1, "href") - 5 - (InStr(s1, "title") - 3))
    Worksheets("Revenue").Cells(x + y - 1, CostLimitCol).Value = "No order lines"
    lastAddress = IE.LocationURL
    
  If y = totalProjects Or y Mod 10 = 0 Then
    For x3 = 0 To (y - 1) Mod 10
        Sleep 50
        'IEx(x3).Visible = False
'        IEx(x3).navigate (Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "OrderInfo")), self
        IEx(x3).navigate (Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "History")), self
        'Debug.Print Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "History")
        'IEx(x3).Visible = False
        IExN(x3) = 0
    Next x3
    For x3 = 0 To (y - 1) Mod 10
        Do
            Sleep 50
            Set sh = New Shell32.Shell
            For Each eachIE In sh.Windows
                pwebAddressx = Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "History")
                'Debug.Print pWebAddressx
                If InStr(1, eachIE.LocationURL, pwebAddressx) Then
                    Set IEx(x3) = eachIE
                    'IEx(x3).Visible = False  'This is here because in some environments, the new process defaults to Visible.
                    Exit Do
                    IExN(x3) = 1
                End If
            Next eachIE
        Loop
    Next x3
    
  
  
  For x3 = 0 To (y - 1) Mod 10
    While IEx(x3).Busy  ' The new process may still be busy even after you find it
       DoEvents
    Wend
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 25
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    For Each tbl In docx(x3).getElementsByClassName("table")
        For Each td In tbl.getElementsByTagName("td")
'            Debug.Print "Looking for " & LCase(Worksheets("Revenue").Cells(8, 26).Value) & " in " & LCase(td.innerText)
            If InStr(LCase(td.innerText), LCase(Worksheets("Revenue").Cells(8, 26).Value)) > 0 Then
                GoTo ActiveFound
            End If
        Next td
    Next tbl
    z9 = 0
    Do
        Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10) - 1, ProjNameCol).Value = Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10), ProjNameCol).Value
        Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10) - 1, CompanyCol).Value = Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10), CompanyCol).Value
        Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10) - 1, EmpCol).Value = Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10), EmpCol).Value
        Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value = Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10), ProjLinkCol).Value
        Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value = Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10), CostLimitCol).Value
        z9 = z9 + 1
    Loop Until Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value = ""
    x = x - 1
ActiveFound:
  Next x3
 End If
' endif for y = totalProjects or y Mod 10 = 0

'if project is completed and date is before cutoff, then goto end of procedure
    yy = yy + 1
Next y

noActiveProjects:






If Worksheets("Revenue").Cells(1, 5).Value <> "" Then
    GoTo noCompletedProjects
End If
'Cycle through all completed projects
If Worksheets("Revenue").Cells(6, 26).Value <> "" Then
    pWebAddress = "https://portal.ul.com/Search/Project?viewType=Default&EntityType=Project&Filters.ariaProjectCCN=" & CCN & "&Filters.ariaProjectProjectStatus=Completed&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending"
End If

IE.navigate pWebAddress, self
Do
    DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document
Do
    Sleep 25
    Set doc = IE.Document
Loop Until Not (doc.getElementsByTagName("p") Is Nothing)

page = 1
x = 3
Do
    x = x + 1
Loop Until Worksheets("Revenue").Cells(x, EmpCol).Value = ""

For Each p In doc.getElementsByTagName("p")
    If InStr(p.innerText, "There are no projects to display.") > 0 Then
        GoTo noCompletedProjects
    End If
Next p

'get total number of projects from this field
s1 = doc.getElementById("frmSearchTop").Children(1).Children(0).Children(0).innerText
s2 = Mid(s1, InStr(s1, "of") + 3, Len(s1) - InStr(s1, "of") - 2)
totalProjects = CInt(s2)

yy = 1 'yy is the current count (1 thru 10) for the page
For y = 1 To totalProjects
    ProgressForm.Label3.Caption = "Completed project # " & y
    If y = page * 10 + 1 Then
        For x1 = 0 To 9
            IE1(x1) = False
            IE2(x1) = False
        Next x1
        page = page + 1
        IE.navigate Replace(pWebAddress, "EntityType", "Query=&Paging.Page=" & page & "&EntityType"), self
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Do
            Sleep 25
            Set doc = IE.Document
        Loop Until Not (doc.getElementById("body") Is Nothing)
        Set doc = IE.Document
        lastAddress = IE.LocationURL
        yy = 1
    End If
        
    s1 = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(7).Children(1).innerText
    s2 = Mid(s1, 1, InStrRev(s1, "/") + 4)
    ProgressForm.Label3.Caption = "Completed project # " & y & " completed " & s2

    If CInt(Mid(s1, InStrRev(s1, "/") + 1, 4)) < CInt(Worksheets("Revenue").Cells(2, EmpCol).Value) Then
        If y = 1 Then
            GoTo noCompletedProjects
        End If
        y = y - 1
        totalProjects = y
        GoTo endCompletedProjects
    End If
    If CInt(Mid(s2, Len(s2) - 3, 4)) = CInt(Worksheets("Revenue").Cells(2, EmpCol).Value) Then
        If CInt(Mid(s1, 1, InStr(s1, "/") - 1)) < Worksheets("Revenue").Cells(2, 2).Value Then
            If y = 1 Then
                GoTo noCompletedProjects
            End If
            y = y - 1
            totalProjects = y
            GoTo endCompletedProjects
        End If
    End If
    Worksheets("Revenue").Cells(x + y - 1, CompletedCol).Value = "Yes"
    Worksheets("Revenue").Cells(x + y - 1, ECDCol).Value = s2
    Worksheets("Revenue").Cells(x + y - 1, EmpCol).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(3).Children(1).innerText
    Worksheets("Revenue").Cells(x + y - 1, ProjNameCol).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0).innerText
    Worksheets("Revenue").Cells(x + y - 1, CompanyCol).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(2).Children(1).innerText
    s1 = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0)
    Worksheets("Revenue").Cells(x + y - 1, ProjLinkCol).Value = "https" & Mid(s1, InStr(s1, "href") + 6, Len(s1) - InStr(s1, "href") - 5 - (InStr(s1, "title") - 3))
    Worksheets("Revenue").Cells(x + y - 1, CostLimitCol).Value = "No order lines"
    lastAddress = IE.LocationURL
    
endCompletedProjects:
    If y = totalProjects Or y Mod 10 = 0 Then
        For x3 = 0 To (y - 1) Mod 10
            Sleep 50
            IEx(x3).navigate (Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "History")), self
            IExN(x3) = 0
        Next x3
        If y Mod 10 <> 0 Then
            For x3 = (y) Mod 10 To 9
                IExN(x3) = 99
            Next x3
        End If
      For x3 = 0 To (y - 1) Mod 10
        Do
            Sleep 50
            Set sh = New Shell32.Shell
            For Each eachIE In sh.Windows
                pwebAddressx = Replace(Worksheets("Revenue").Cells(x + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value, "Index", "History")
                If InStr(1, eachIE.LocationURL, pwebAddressx) Then
                    Set IEx(x3) = eachIE
                    'IEx(x3).Visible = False  'This is here because in some environments, the new process defaults to Visible.
                    Exit Do
                    IExN(x3) = 1
                End If
            Next eachIE
        Loop
      Next x3
        
  For x3 = 0 To (y - 1) Mod 10
    While IEx(x3).Busy  ' The new process may still be busy even after you find it
       DoEvents
    Wend
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 25
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    For Each tbl In docx(x3).getElementsByClassName("table")
        For Each td In tbl.getElementsByTagName("td")
'            Debug.Print "Looking for " & LCase(Worksheets("Revenue").Cells(8, 26).Value) & " in " & LCase(td.innerText)
            If InStr(LCase(td.innerText), LCase(Worksheets("Revenue").Cells(8, 26).Value)) > 0 Then
                GoTo CompletedFound
            End If
        Next td
    Next tbl
    z9 = 0
    Do
        Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10) - 1, ProjNameCol).Value = Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10), ProjNameCol).Value
        Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10) - 1, CompanyCol).Value = Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10), CompanyCol).Value
        Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10) - 1, EmpCol).Value = Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10), EmpCol).Value
        Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value = Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10), ProjLinkCol).Value
        Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10) - 1, CostLimitCol).Value = Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10), CostLimitCol).Value
        Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10) - 1, ECDCol).Value = Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10), ECDCol).Value
        Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10) - 1, CompletedCol).Value = Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10), CompletedCol).Value
        z9 = z9 + 1
    Loop Until Worksheets("Revenue").Cells(x + z9 + (x3 + 1 + (page - 1) * 10) - 1, ProjLinkCol).Value = ""
    x = x - 1
CompletedFound:
  Next x3
    
    
    
    
    
    End If
'if project is completed and date is before cutoff, then goto end of procedure
    yy = yy + 1
'Sleep 50
    If y = totalProjects Then
        GoTo noCompletedProjects
    End If
Next y

noCompletedProjects:

For x3 = 0 To 9
    If Not (IEx(x3) Is Nothing) Then
        IEx(x3).Quit
        Set IEx(x3) = Nothing
        Set shx(x3) = Nothing
        Set eachIEx(x3) = Nothing
    End If
Next x3

    IE.Quit
    Set IE = Nothing
   
errorEnd:
   
End Sub

Sub ProjectTaskUpdate()

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String
Dim pWebAddress As String, flexNum As String, pwebAddressx As String
Dim IE As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object, div2 As Object, div3 As Object
Dim doc As HTMLDocument, doc2 As HTMLDocument, cEmail As String, cPhone As String
Dim elem As HTMLBaseElement
Dim x As Long, x9 As HTMLBaseElement
Dim docx(10) As HTMLDocument, IEx(10) As InternetExplorer
Dim updateProject As New Collection, updateTask As New Collection
Dim hcol As Object

Dim ProjLinkCol As Long, LineItemCol As Long, ECDCol As Long, StatusNotesCol As Long, StatusCol As Long
StatusCol = 7
ProjLinkCol = 14
LineItemCol = 2
ECDCol = 5
StatusNotesCol = 9

'x1 = 3
'Do
'    x1 = x1 + 1
'Loop Until Worksheets("Projects").Cells(x1, ProjLinkCol).Value = ""
'ReDim docx(x1 - 3)
'ReDim IEx(x1 - 3)

'flexNum = Replace(Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value, "-", "")
'pWebAddress = "https://portal.ul.com/Project/Index/" & Replace(flexNum, "-", "")


page = 1
''project counter
x = 4
Do
    If Worksheets("Projects").Cells(x, 4).Value <> Worksheets("Projects").Cells(x, 3).Value Or Worksheets("Projects").Cells(x, 6).Value <> Worksheets("Projects").Cells(x, 5).Value Or Worksheets("Projects").Cells(x, 8).Value <> Worksheets("Projects").Cells(x, 7).Value Or Worksheets("Projects").Cells(x, 10).Value <> Worksheets("Projects").Cells(x, 9).Value Or Worksheets("Projects").Cells(x, 11).Value <> Worksheets("Projects").Cells(x, 12).Value Then
        updateProject.Add x
        Debug.Print "Line " & x & " to be updated in projects"
    End If
    x = x + 1
Loop Until Worksheets("Projects").Cells(x, ProjLinkCol).Value = ""

''task counter
z = 4
Do
    If Worksheets("Tasks").Cells(z, 5).Value <> Worksheets("Tasks").Cells(z, 4).Value Or Worksheets("Tasks").Cells(z, 7).Value <> Worksheets("Tasks").Cells(z, 6).Value Or Worksheets("Tasks").Cells(z, 9).Value <> Worksheets("Tasks").Cells(z, 8).Value Then
        updateTask.Add z
        Debug.Print "Line " & z & " to be updated in tasks"
    End If
    z = z + 1
Loop Until Worksheets("Tasks").Cells(z, 11).Value = ""

'get total number of projects from this field
's1 = doc.getElementById("frmSearchTop").Children(1).Children(0).Children(0).innerText
's2 = Mid(s1, InStr(s1, "of") + 3, Len(s1) - InStr(s1, "of") - 2)
'totalProjects = CInt(s2)
totalProjects = updateProject.Count
totalTasks = updateTask.Count
Debug.Print "updateProject count = " & updateProject.Count
Debug.Print "updateTask count = " & updateTask.Count

If totalProjects = 0 And totalTasks = 0 Then
    MsgBox "No updates identified"
    Exit Sub
End If



''' Initial login
pWebAddress = "https://portal.ul.com/"
Set IE = New InternetExplorerMedium
IE.Visible = True
IE.navigate pWebAddress
Dim sh
Dim eachIE
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing
While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Sleep 200
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document
login:
If doc.getElementById("ui-id-3") Is Nothing Then
    MsgBox "Log into Flex"
'    Sleep 200
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If





For x1 = 0 To 9
    Sleep 10
    Set IEx(x1) = New InternetExplorer
    IEx(x1).Left = 0
    IEx(x1).Top = 0
'    IEx(x1).Visible = True
'    IEx(x1).Height = 0
'    IEx(x1).Width = 0
'    IEx(x1).Application.ScreenUpdating = False
Next x1


ProgressForm.Top = Application.Top
ProgressForm.Left = Application.Left
ProgressForm.Show


If totalProjects > 0 Then
For y = 1 To totalProjects
    ProgressForm.Label3.Caption = "Updating: project " & y & " of " & totalProjects
    If y = page * 10 + 1 Then
        page = page + 1
    End If
    If y = totalProjects Or y Mod 10 = 0 Then
        For x3 = 0 To (y - 1) Mod 10
            Sleep 50
            Debug.Print x3 + 10 * (page - 1)
            Debug.Print updateProject.Item(x3 + 10 * (page - 1) + 1)
            IEx(x3).navigate (Replace(Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), ProjLinkCol).Value, "Index", "OrderInfo")), self
            'IEx(x3).Visible = False
        Next x3
        For x3 = 0 To (y - 1) Mod 10
            Do
                Sleep 50
                Set sh = New Shell32.Shell
                For Each eachIE In sh.Windows
                    pwebAddressx = Replace(Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), ProjLinkCol).Value, "Index", "OrderInfo")
                    Debug.Print "checking address: " & pwebAddressx
                    If InStr(1, eachIE.LocationURL, pwebAddressx) Then
                        Set IEx(x3) = eachIE
                        Exit Do
                        'IEx(x3).Visible = False  'This is here because in some environments, the new process defaults to Visible.
                    End If
                Next eachIE
            Loop
        Next x3
        For x3 = 0 To (y - 1) Mod 10
   'If IEx(x3).Busy = False And IEx(x3).readyState = READYSTATE_COMPLETE And IExN(x3) = 1 Then
            While IEx(x3).Busy  ' The new process may still be busy even after you find it
                DoEvents
            Wend
            Do
                DoEvents
            Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
            Do
                Sleep 25
                Set docx(x3) = IEx(x3).Document
            Loop Until Not (docx(x3).getElementById("body") Is Nothing)
            Do
                DoEvents
            Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
            Set docx(x3) = IEx(x3).Document
'''
            docx(x3).getElementById("create").Click
            Do
                DoEvents
            Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
            Do
                Sleep 5
            Set docx(x3) = IEx(x3).Document
            Loop Until Not (docx(x3).getElementById("AdditionalCriteria") Is Nothing)
            Set docx(x3) = IEx(x3).Document

''Assumptions
'        If InStr(doc.getElementById("AdditionalCriteria").Value, "Assumptions: ") > 1 Then
'            s1 = Mid(doc.getElementById("AdditionalCriteria").Value, 1, InStr(doc.getElementById("AdditionalCriteria").Value, "Assumptions: ") - 2) & vbLf
'        End If
'        If InStr(doc.getElementById("AdditionalCriteria").Value, "Assumptions: ") < 1 And Len(doc.getElementById("AdditionalCriteria").Value) > 0 Then
'            s1 = doc.getElementById("AdditionalCriteria").Value & vbLf
'        End If
'        If InStr(doc.getElementById("AdditionalCriteria").Value, "Assumptions: ") < 1 And Len(doc.getElementById("AdditionalCriteria").Value) = 0 Then
'            s1 = ""
'        End If
'        If Len(s1 & "Assumptions: " & vbLf & Worksheets("Needs Assessment").Cells(Assumptionsrow(), 2).Value) < 1000 Then
'            doc.getElementById("AdditionalCriteria").Value = s1 & "Assumptions: " & vbLf & Worksheets("Needs Assessment").Cells(Assumptionsrow(), 2).Value
'        Else
'            If Len(s1 & "Project assumptions too large to store in project comments. See Needs Assessment document for assumptions.") < 1000 Then
'                doc.getElementById("AdditionalCriteria").Value = s1 & "Project assumptions too large to store in project comments. See Needs Assessment document for assumptions."
'            End If
'        End If
debugProject:
'ECD - good
            docx(x3).getElementById("EndDate").Value = Format(Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), ECDCol + 1).Value, "MM/DD/YYYY")
            Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), ECDCol).Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), ECDCol + 1).Value
            Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), ECDCol + 1).Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), ECDCol + 1).Value

'status Notes - good
            docx(x3).getElementById("StatusNotes").Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusNotesCol + 1).Value
            Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusNotesCol).Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusNotesCol + 1).Value
            Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusNotesCol + 1).Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusNotesCol + 1).Value
            
'Project Name - good
            docx(x3).getElementById("Name").Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), 4).Value
            Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), 3).Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), 4).Value
            Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), 4).Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), 4).Value

'Project Status - dropdown box - good
        'docx(x3).getElementById("DocumentTypeId").selectedIndex = x3
            If Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusCol + 1).Value = "In Progress" Then
                docx(x3).getElementById("ProjectStatus").selectedIndex = 0
            End If
            If Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusCol + 1).Value = "On Hold" Then
                docx(x3).getElementById("ProjectStatus").selectedIndex = 1
            End If
            Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusCol).Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusCol + 1).Value
            Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusCol + 1).Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusCol + 1).Value
            'If Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusCol + 1).Value = "Completed" Then
            '    docx(x3).getElementById("ProjectStatus").selectedIndex = 2
            'End If
            'docx(x3).getElementById("ProjectStatus").Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusCol + 1).Value

'scope
'        Set hcol = doc.getElementsByTagName("textarea")
'        For Each Text In hcol
'            If Text.ID = "Description" Then
'                Text.Value = Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
'                Exit For
'            End If
'        Next

'assigned handler - good
            Set x9 = docx(x3).getElementById("ProjectHandlerAssigned")
            Set x9 = x9.parentElement.parentElement.parentElement.Children(1).Children(0).Children(0)
            x9.Click
            Sleep 50
            docx(x3).getElementById("ProjectHandler").Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), 12).Value
            Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), 11).Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), 12).Value
            Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), 12).Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), 12).Value
            Debug.Print "check status here"
'            GoTo debugProject

            docx(x3).getElementById("btneditProject").Click
            Do
                DoEvents
            Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
            Sleep 200
            Do
                DoEvents
            Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
        Next x3
    End If
Next y
End If



'update tasks
page = 1
If totalTasks > 0 Then
For y = 1 To totalTasks
    ProgressForm.Label3.Caption = "Updating: task " & y & " of " & totalTasks
    If y = page * 10 + 1 Then
        page = page + 1
    End If
    If y = totalTasks Or y Mod 10 = 0 Then
        For x3 = 0 To (y - 1) Mod 10
            Sleep 50
            IEx(x3).navigate Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 10).Value, self
            'IEx(x3).Visible = False
        Next x3
        For x3 = 0 To (y - 1) Mod 10
            Do
                Sleep 50
                Set sh = New Shell32.Shell
                For Each eachIE In sh.Windows
                    pwebAddressx = Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 10).Value
                    Debug.Print "checking address: " & pwebAddressx
                    If InStr(1, eachIE.LocationURL, pwebAddressx) Then
                        Set IEx(x3) = eachIE
                        Exit Do
                        'IEx(x3).Visible = False  'This is here because in some environments, the new process defaults to Visible.
                    End If
                Next eachIE
            Loop
        Next x3
        For x3 = 0 To (y - 1) Mod 10
   'If IEx(x3).Busy = False And IEx(x3).readyState = READYSTATE_COMPLETE And IExN(x3) = 1 Then
            While IEx(x3).Busy  ' The new process may still be busy even after you find it
                DoEvents
            Wend
            Do
                DoEvents
            Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
            Do
                Sleep 25
                Set docx(x3) = IEx(x3).Document
            'Loop Until Not (docx(x3).getElementById("body") Is Nothing)
            Loop Until Not (docx(x3).getElementById("gritternotifications") Is Nothing)
            Do
                DoEvents
            Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
            Set docx(x3) = IEx(x3).Document
'''
            Set x9 = docx(x3).getElementById("body").Children(0).Children(3)
            Set x9 = x9.Children(1)
            Set x9 = x9.Children(1)
            Set x9 = x9.Children(0)

            If InStr(LCase(x9.innerText), LCase("COMPLETED")) > 1 Or InStr(LCase(x9.innerText), LCase("CANCELED")) > 1 Or InStr(LCase(x9.innerText), LCase("CANCELLED")) > 1 Then
                GoTo taskCompleted
            End If
            docx(x3).getElementById("editTask").Click

            Do
                Sleep 25
                Set docx(x3) = IEx(x3).Document
            Loop Until Not (docx(x3).getElementById("modal-task-documents") Is Nothing)
            Sleep 25
            Do
                DoEvents
            Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
            Set docx(x3) = IEx(x3).Document
taskDebug:
'Task Handler - good
            Set x9 = docx(x3).getElementById("TaskOwnerAssigned")
            Set x9 = x9.parentElement.parentElement.Children(4).Children(0).Children(0)
            docx(x3).getElementById("TaskOwner").Value = Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 9).Value
            x9.Click
            Sleep 50
            'docx(x3).getElementById("TaskOwnerAssigned")(2).Click
            docx(x3).getElementById("TaskOwner").Value = Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 9).Value
            docx(x3).getElementById("TaskOwner").DefaultValue = Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 9).Value
            'Set x9 = docx(x3).getElementById("taskOwner")
            'x9.FireEvent "accept"
            'x9.FireEvent "onchange"
            'x9.FireEvent "formAction"
            'x9.FireEvent "oninput"
            'x9.FireEvent "onload"
            'x9.FireEvent "onloadeddata"
            'x9.FireEvent "onplay"
            'x9.FireEvent "onprogress"
            
            
            '//*[@id="task-details-view"]/div[4]
            'docx(x3).getElementById("task-details-view").Click '.FireEvent ("onclick")
            'x9.Click
            'x9.Focus
            'x9.FireEvent "onchange"
            'x9.FireEvent "onclick"
            'x9.FireEvent "onfocusin"
            'x9.FireEvent "onkeypress"
            docx(x3).getElementById("task-details-view").Children(22).Focus
            
            Set x9 = docx(x3).getElementById("Phase")
            x9.Children(0).Value = "InProgress" 'revise form option from default option of unassigned
            
            
            Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 8).Value = Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 9).Value
            Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 9).Value = Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 9).Value

'Start Date - good
            'Debug.Print Format(Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 5).Value, "MM/DD/YYYY")
            docx(x3).getElementById("StartDate").Value = Format(Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 5).Value, "MM/DD/YYYY")
            Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 4).Value = Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 5).Value
            Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 5).Value = Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 5).Value
            
'Actual Hours - good
            If Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 7).Value <> "" Then
                docx(x3).getElementById("ActualDuration").Value = Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 7).Value
            Else
                docx(x3).getElementById("ActualDuration").Value = ""
            End If
            Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 6).Value = Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 7).Value
            Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 7).Value = Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 7).Value


            Debug.Print "check task status"
'            GoTo taskDebug
            docx(x3).getElementById("btnUpdateTask").Click
taskCompleted:
        'GoTo taskDebug
        Next x3
    End If
Next y
End If

ProgressForm.Hide

IE.Quit
Set IE = Nothing

For x3 = 0 To 9
    If Not (IEx(x3) Is Nothing) Then
        IEx(x3).Quit
        Set IEx(x3) = Nothing
    End If
Next x3




End Sub




Sub TaskProjectUpdate()

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String
Dim pWebAddress As String, flexNum As String, pwebAddressx As String
Dim IE As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object, div2 As Object, div3 As Object
Dim doc As HTMLDocument, doc2 As HTMLDocument, cEmail As String, cPhone As String
Dim elem As HTMLBaseElement
Dim x As Long, x9 As HTMLBaseElement
Dim docx(10) As HTMLDocument, IEx(10) As InternetExplorer
Dim updateProject As New Collection, updateTask As New Collection
Dim hcol As Object

Dim ProjLinkCol As Long, LineItemCol As Long, ECDCol As Long, StatusNotesCol As Long, StatusCol As Long
StatusCol = 7
ProjLinkCol = 14
LineItemCol = 2
ECDCol = 5
StatusNotesCol = 9

'x1 = 3
'Do
'    x1 = x1 + 1
'Loop Until Worksheets("Projects").Cells(x1, ProjLinkCol).Value = ""
'ReDim docx(x1 - 3)
'ReDim IEx(x1 - 3)

'flexNum = Replace(Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value, "-", "")
'pWebAddress = "https://portal.ul.com/Project/Index/" & Replace(flexNum, "-", "")

''' Initial login
pWebAddress = "https://portal.ul.com/"
Set IE = New InternetExplorerMedium
IE.Visible = True
IE.navigate pWebAddress
Dim sh
Dim eachIE
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing
While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Sleep 200
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document
login:
If doc.getElementById("ui-id-3") Is Nothing Then
    MsgBox "Log into Flex"
'    Sleep 200
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If



page = 1
''project counter
x = 4
Do
    If Worksheets("Projects").Cells(x, 4).Value <> Worksheets("Projects").Cells(x, 3).Value Or Worksheets("Projects").Cells(x, 6).Value <> Worksheets("Projects").Cells(x, 5).Value Or Worksheets("Projects").Cells(x, 8).Value <> Worksheets("Projects").Cells(x, 7).Value Or Worksheets("Projects").Cells(x, 10).Value <> Worksheets("Projects").Cells(x, 9).Value Then
        updateProject.Add x
        Debug.Print "Line " & x & " to be updated in projects"
    End If
    x = x + 1
Loop Until Worksheets("Projects").Cells(x, ProjLinkCol).Value = ""

''task counter
z = 4
Do
    If Worksheets("Tasks").Cells(z, 5).Value <> Worksheets("Tasks").Cells(z, 4).Value Or Worksheets("Tasks").Cells(z, 7).Value <> Worksheets("Tasks").Cells(z, 6).Value Or Worksheets("Tasks").Cells(z, 9).Value <> Worksheets("Tasks").Cells(z, 8).Value Then
        updateTask.Add z
        Debug.Print "Line " & z & " to be updated in tasks"
    End If
    z = z + 1
Loop Until Worksheets("Tasks").Cells(z, 11).Value = ""

'get total number of projects from this field
's1 = doc.getElementById("frmSearchTop").Children(1).Children(0).Children(0).innerText
's2 = Mid(s1, InStr(s1, "of") + 3, Len(s1) - InStr(s1, "of") - 2)
'totalProjects = CInt(s2)
totalProjects = updateProject.Count
totalTasks = updateTask.Count
Debug.Print "updateProject count = " & updateProject.Count
Debug.Print "updateTask count = " & updateTask.Count

For x1 = 0 To 9
    Sleep 10
    Set IEx(x1) = New InternetExplorer
    IEx(x1).Left = 0
    IEx(x1).Top = 0
'    IEx(x1).Visible = True
'    IEx(x1).Height = 0
'    IEx(x1).Width = 0
'    IEx(x1).Application.ScreenUpdating = False
Next x1

If totalProjects > 0 Then
For y = 1 To totalProjects
    ProgressForm.Label3.Caption = "Updating: project " & y & " of " & totalProjects
    If y = page * 10 + 1 Then
        page = page + 1
    End If
    If y = totalProjects Or y Mod 10 = 0 Then
        For x3 = 0 To (y - 1) Mod 10
            Sleep 50
            Debug.Print x3 + 10 * (page - 1)
            Debug.Print updateProject.Item(x3 + 10 * (page - 1) + 1)
            IEx(x3).navigate (Replace(Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), ProjLinkCol).Value, "Index", "OrderInfo")), self
            'IEx(x3).Visible = False
        Next x3
        For x3 = 0 To (y - 1) Mod 10
            Do
                Sleep 50
                Set sh = New Shell32.Shell
                For Each eachIE In sh.Windows
                    pwebAddressx = Replace(Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), ProjLinkCol).Value, "Index", "OrderInfo")
                    Debug.Print "checking address: " & pwebAddressx
                    If InStr(1, eachIE.LocationURL, pwebAddressx) Then
                        Set IEx(x3) = eachIE
                        Exit Do
                        'IEx(x3).Visible = False  'This is here because in some environments, the new process defaults to Visible.
                    End If
                Next eachIE
            Loop
        Next x3
        For x3 = 0 To (y - 1) Mod 10
   'If IEx(x3).Busy = False And IEx(x3).readyState = READYSTATE_COMPLETE And IExN(x3) = 1 Then
            While IEx(x3).Busy  ' The new process may still be busy even after you find it
                DoEvents
            Wend
            Do
                DoEvents
            Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
            Do
                Sleep 25
                Set docx(x3) = IEx(x3).Document
            Loop Until Not (docx(x3).getElementById("body") Is Nothing)
            Do
                DoEvents
            Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
            Set docx(x3) = IEx(x3).Document
'''
            docx(x3).getElementById("create").Click
            Do
                DoEvents
            Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
            Do
                Sleep 5
            Set docx(x3) = IEx(x3).Document
            Loop Until Not (docx(x3).getElementById("AdditionalCriteria") Is Nothing)
            Set docx(x3) = IEx(x3).Document

''Assumptions
'        If InStr(doc.getElementById("AdditionalCriteria").Value, "Assumptions: ") > 1 Then
'            s1 = Mid(doc.getElementById("AdditionalCriteria").Value, 1, InStr(doc.getElementById("AdditionalCriteria").Value, "Assumptions: ") - 2) & vbLf
'        End If
'        If InStr(doc.getElementById("AdditionalCriteria").Value, "Assumptions: ") < 1 And Len(doc.getElementById("AdditionalCriteria").Value) > 0 Then
'            s1 = doc.getElementById("AdditionalCriteria").Value & vbLf
'        End If
'        If InStr(doc.getElementById("AdditionalCriteria").Value, "Assumptions: ") < 1 And Len(doc.getElementById("AdditionalCriteria").Value) = 0 Then
'            s1 = ""
'        End If
'        If Len(s1 & "Assumptions: " & vbLf & Worksheets("Needs Assessment").Cells(Assumptionsrow(), 2).Value) < 1000 Then
'            doc.getElementById("AdditionalCriteria").Value = s1 & "Assumptions: " & vbLf & Worksheets("Needs Assessment").Cells(Assumptionsrow(), 2).Value
'        Else
'            If Len(s1 & "Project assumptions too large to store in project comments. See Needs Assessment document for assumptions.") < 1000 Then
'                doc.getElementById("AdditionalCriteria").Value = s1 & "Project assumptions too large to store in project comments. See Needs Assessment document for assumptions."
'            End If
'        End If
debugProject:
'ECD - good
            docx(x3).getElementById("EndDate").Value = Format(Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), ECDCol + 1).Value, "MM/DD/YYYY")

'status Notes - good
            docx(x3).getElementById("StatusNotes").Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusNotesCol + 1).Value

'Project Name - good
            docx(x3).getElementById("Name").Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), 4).Value

'Project Status - dropdown box - good
        'docx(x3).getElementById("DocumentTypeId").selectedIndex = x3
            If Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusCol + 1).Value = "In Progress" Then
                docx(x3).getElementById("ProjectStatus").selectedIndex = 0
            End If
            If Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusCol + 1).Value = "On Hold" Then
                docx(x3).getElementById("ProjectStatus").selectedIndex = 1
            End If
            'If Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusCol + 1).Value = "Completed" Then
            '    docx(x3).getElementById("ProjectStatus").selectedIndex = 2
            'End If
            'docx(x3).getElementById("ProjectStatus").Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), StatusCol + 1).Value

'scope
'        Set hcol = doc.getElementsByTagName("textarea")
'        For Each Text In hcol
'            If Text.ID = "Description" Then
'                Text.Value = Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value
'                Exit For
'            End If
'        Next

'assigned handler - good
            Set x9 = docx(x3).getElementById("ProjectHandlerAssigned")
            Set x9 = x9.parentElement.parentElement.parentElement.Children(1).Children(0).Children(0)
            x9.Click
            Sleep 50
            docx(x3).getElementById("ProjectHandler").Value = Worksheets("Projects").Cells(updateProject.Item(x3 + 10 * (page - 1) + 1), 12).Value
            Debug.Print "check status here"
'            GoTo debugProject

            docx(x3).getElementById("btneditProject").Click
            Do
                DoEvents
            Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
            Sleep 200
            Do
                DoEvents
            Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
        Next x3
    End If
Next y
End If





'update tasks
page = 1
If totalTasks > 0 Then
For y = 1 To totalTasks
    ProgressForm.Label3.Caption = "Updating: task " & y & " of " & totalTasks
    If y = page * 10 + 1 Then
        page = page + 1
    End If
    If y = totalTasks Or y Mod 10 = 0 Then
        For x3 = 0 To (y - 1) Mod 10
            Sleep 50
            IEx(x3).navigate Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 10).Value, self
            'IEx(x3).Visible = False
        Next x3
        For x3 = 0 To (y - 1) Mod 10
            Do
                Sleep 50
                Set sh = New Shell32.Shell
                For Each eachIE In sh.Windows
                    pwebAddressx = Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 10).Value
                    Debug.Print "checking address: " & pwebAddressx
                    If InStr(1, eachIE.LocationURL, pwebAddressx) Then
                        Set IEx(x3) = eachIE
                        Exit Do
                        'IEx(x3).Visible = False  'This is here because in some environments, the new process defaults to Visible.
                    End If
                Next eachIE
            Loop
        Next x3
        For x3 = 0 To (y - 1) Mod 10
   'If IEx(x3).Busy = False And IEx(x3).readyState = READYSTATE_COMPLETE And IExN(x3) = 1 Then
            While IEx(x3).Busy  ' The new process may still be busy even after you find it
                DoEvents
            Wend
            Do
                DoEvents
            Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
            Do
                Sleep 25
                Set docx(x3) = IEx(x3).Document
            'Loop Until Not (docx(x3).getElementById("body") Is Nothing)
            Loop Until Not (docx(x3).getElementById("gritternotifications") Is Nothing)
            Do
                DoEvents
            Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
            Set docx(x3) = IEx(x3).Document
'''
            Set x9 = docx(x3).getElementById("body").Children(0).Children(3)
            Set x9 = x9.Children(1)
            Set x9 = x9.Children(1)
            Set x9 = x9.Children(0)

            If InStr(LCase(x9.innerText), LCase("COMPLETED")) > 1 Or InStr(LCase(x9.innerText), LCase("CANCELED")) > 1 Or InStr(LCase(x9.innerText), LCase("CANCELLED")) > 1 Then
                GoTo taskCompleted
            End If
            docx(x3).getElementById("editTask").Click

            Do
                Sleep 25
                Set docx(x3) = IEx(x3).Document
            Loop Until Not (docx(x3).getElementById("modal-task-documents") Is Nothing)
            Sleep 25
            Do
                DoEvents
            Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
            Set docx(x3) = IEx(x3).Document
taskDebug:
'Start Date - good
            'Debug.Print Format(Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 5).Value, "MM/DD/YYYY")
            docx(x3).getElementById("StartDate").Value = Format(Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 5).Value, "MM/DD/YYYY")
        
'Actual Hours - good
            docx(x3).getElementById("ActualDuration").Value = Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 7).Value

'Task Handler - good
            Set x9 = docx(x3).getElementById("TaskOwnerAssigned")
            Set x9 = x9.parentElement.parentElement.Children(4).Children(0).Children(0)
            x9.Click
            Sleep 50
            'docx(x3).getElementById("TaskOwnerAssigned")(2).Click
            docx(x3).getElementById("TaskOwner").Value = Worksheets("Tasks").Cells(updateTask.Item(x3 + 10 * (page - 1) + 1), 9).Value

            Debug.Print "check task status"
            'GoTo taskDebug
            docx(x3).getElementById("btnUpdateTask").Click
taskCompleted:
        Next x3
    End If
Next y
End If

For x3 = 0 To 9
    If Not (IEx(x3) Is Nothing) Then
        IEx(x3).Quit
        Set IEx(x3) = Nothing
    End If
Next x3

IE.Quit
Set IE = Nothing



End Sub

Attribute VB_Name = "ModuleRowNumbering"
Option Explicit

Public CCNNum As Long
Public compNNum As Long
Public compA1Num As Long
Public compA2Num As Long
Public PartyNum As Long
Public custNNum As Long
Public cemailNum As Long
Public cphoneNum As Long
Public QuoteNum As Long
Public ProjectNum As Long
Public FileNum As Long
Public ScopeNum As Long
Public StandardsNum As Long
Public ProjectTypeNum As Long
Public TestNoTestNum As Long
Public DAPNum As Long
Public AssumptionsNum As Long
Public ItemsReqNum As Long
Public SampleNum As Long
Public TestPlanNum As Long
Public AHLParentStartNum As Long
Public AHLParentEndNum As Long
Public EPTParentStartNum As Long
Public EPTParentEndNum As Long
Public custDateNum As Long
Public ECDNum As Long
Public TATNum As Long
Public hNameNum As Long
Public hemailNum As Long
Public hTitleNum As Long
Public hDepartmentNum As Long
Public hIDNum As Long
Public rNameNum As Long
Public remailNum As Long
Public rTitleNum As Long
Public rDepartmentNum As Long
Public rIDNum As Long
Public LISNum As Long
Sub initializeConst()

CCNNum = 2
compNNum = 7 '
compA1Num = 8 '
compA2Num = 9
PartyNum = 10
custNNum = 11
cemailNum = 12
cphoneNum = 13
QuoteNum = 15
ProjectNum = 16
FileNum = 17
ScopeNum = 18
StandardsNum = 20
ProjectTypeNum = 21
TestNoTestNum = 22
DAPNum = 23
AssumptionsNum = 25
ItemsReqNum = 27
SampleNum = 29
TestPlanNum = 31
AHLParentStartNum = 32
AHLParentEndNum = 42
EPTParentStartNum = 43
EPTParentEndNum = 97
custDateNum = 45
ECDNum = 46
TATNum = 47
hNameNum = 51
hemailNum = 52
hTitleNum = 53
hDepartmentNum = 54
hIDNum = 55
rNameNum = 57
remailNum = 58
rTitleNum = 59
rDepartmentNum = 60
rIDNum = 61
LISNum = 63

End Sub

Sub testConsts()

Call initializeConst

Debug.Print CCNrow()
Debug.Print compNrow()
Debug.Print compA1row()
Debug.Print compA2row()
Debug.Print Partyrow()
Debug.Print custNrow()
Debug.Print cemailrow()
Debug.Print cphonerow()
Debug.Print Quoterow()
Debug.Print Projectrow()
Debug.Print Filerow()
Debug.Print Scoperow()
Debug.Print Standardsrow()
Debug.Print ProjectTyperow()
Debug.Print TestNoTestrow()
Debug.Print DAProw()
Debug.Print Assumptionsrow()
Debug.Print ItemsReqrow()
Debug.Print Samplerow()
Debug.Print TestPlanrow()
Debug.Print AHLParentStartrow()
Debug.Print AHLParentEndrow()
Debug.Print EPTParentStartrow()
Debug.Print EPTParentEndrow()
Debug.Print custDaterow()
Debug.Print ECDrow()
Debug.Print TATrow()
Debug.Print hNamerow()
Debug.Print hemailrow()
Debug.Print hTitlerow()
Debug.Print hDepartmentrow()
Debug.Print hIDrow()
Debug.Print rNamerow()
Debug.Print remailrow()
Debug.Print rTitlerow()
Debug.Print rDepartmentrow()
Debug.Print rIDrow()
Debug.Print LISrow()


End Sub


Function CCNrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(CCNNum, 1).Value = "CCN(s):" Then
    CCNrow = CCNNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "CCN(s):" Then
        CCNrow = x
        CCNNum = x
        Exit Function
    End If
Next x
End Function

Function compNrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(compNNum, 1).Value = "Company Name:" Then
    'Debug.Print "compNrow found same"
    compNrow = compNNum
    Exit Function
End If
For x = 1 To 200
    'Debug.Print "compNrow found different"
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Company Name:" Then
        compNrow = x
        compNNum = x
        Exit Function
    End If
Next x
End Function

Function compA1row() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(compA1Num, 1).Value = "Company Address:" Then
    'Debug.Print "compA1row found same"
    compA1row = compA1Num
    Exit Function
End If
For x = 1 To 200
    'Debug.Print "compA1row found different"
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Company Address:" Then
        compA1row = x
        compA1Num = x
        Exit Function
    End If
Next x
End Function
Function compA2row() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(compA2Num, 1).Value = "City, state zip" Then
    compA2row = compA2Num
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "City, state zip" Then
        compA2row = x
        compA2Num = x
        Exit Function
    End If
Next x
End Function

Function Partyrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(PartyNum, 1).Value = "Party/subscriber no." Then
    Partyrow = PartyNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Party/subscriber no." Then
        Partyrow = x
        PartyNum = x
        Exit Function
    End If
Next x
End Function

Function custNrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(custNNum, 1).Value = "Customer Name:" Then
    custNrow = custNNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Customer Name:" Then
        custNrow = x
        custNNum = x
        Exit Function
    End If
Next x
End Function

Function cemailrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(cemailNum, 1).Value = "Email" Then
    cemailrow = cemailNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Email" Then
        cemailrow = x
        cemailNum = x
        Exit Function
    End If
Next x
End Function

Function cphonerow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(cphoneNum, 1).Value = "Phone" Then
    cphonerow = cphoneNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Phone" Then
        cphonerow = x
        cphoneNum = x
        Exit Function
    End If
Next x
End Function
Function Quoterow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(QuoteNum, 1).Value = "Quote:" Then
    Quoterow = QuoteNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Quote:" Then
        Quoterow = x
        QuoteNum = x
        Exit Function
    End If
Next x
End Function

Function Projectrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(ProjectNum, 1).Value = "Project/SR #:" Then
    Projectrow = ProjectNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Project/SR #:" Then
        Projectrow = x
        ProjectNum = x
        Exit Function
    End If
Next x
End Function
Function Filerow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(FileNum, 1).Value = "File No." Then
    Filerow = FileNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "File No." Then
        Filerow = x
        FileNum = x
        Exit Function
    End If
Next x
End Function

Function Scoperow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(ScopeNum, 1).Value = "Scope:" Then
    Scoperow = ScopeNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Scope:" Then
        Scoperow = x
        ScopeNum = x
        Exit Function
    End If
Next x
End Function
Function Standardsrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(StandardsNum, 1).Value = "Standards:" Then
    Standardsrow = StandardsNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Standards:" Then
        Standardsrow = x
        StandardsNum = x
        Exit Function
    End If
Next x
End Function

Function ProjectTyperow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(ProjectTypeNum, 1).Value = "Project Type:" Then
    ProjectTyperow = ProjectTypeNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Project Type:" Then
        ProjectTyperow = x
        ProjectTypeNum = x
        Exit Function
    End If
Next x
End Function

Function TestNoTestrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(TestNoTestNum, 1).Value = "Test/No Test:" Then
    TestNoTestrow = TestNoTestNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Test/No Test:" Then
        TestNoTestrow = x
        TestNoTestNum = x
        Exit Function
    End If
Next x
End Function

Function DAProw() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(DAPNum, 1).Value = "DAP:" Then
    DAProw = DAPNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "DAP:" Then
        DAProw = x
        DAPNum = x
        Exit Function
    End If
Next x
End Function

Function Assumptionsrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(AssumptionsNum, 1).Value = "Assumptions:" Then
    Assumptionsrow = AssumptionsNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Assumptions:" Then
        Assumptionsrow = x
        AssumptionsNum = x
        Exit Function
    End If
Next x
End Function

Function ItemsReqrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(ItemsReqNum, 1).Value = "Items Required:" Then
    ItemsReqrow = ItemsReqNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Items Required:" Then
        ItemsReqrow = x
        ItemsReqrow = x
        Exit Function
    End If
Next x
End Function

Function Samplerow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(SampleNum, 1).Value = "Sample requirements:" Then
    Samplerow = SampleNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Sample requirements:" Then
        Samplerow = x
        SampleNum = x
        Exit Function
    End If
Next x
End Function

Function TestPlanrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(TestPlanNum, 1).Value = "Test Plan:" Then
    TestPlanrow = TestPlanNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Test Plan:" Then
        TestPlanrow = x
        TestPlanNum = x
        Exit Function
    End If
Next x
End Function
Function AHLParentStartrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(AHLParentStartNum, 1).Value = "AHL start" Then
    AHLParentStartrow = AHLParentStartNum
    'debug.print AHLParentStartrow
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "AHL start" Then
        AHLParentStartrow = x
        AHLParentStartNum = x
        'debug.print AHLParentStartrow
        Exit Function
    End If
Next x
End Function
Function AHLParentEndrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(AHLParentEndNum, 1).Value = "AHL end" Then
    AHLParentEndrow = AHLParentEndNum
    'debug.print AHLParentEndrow
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "AHL end" Then
        AHLParentEndrow = x
        AHLParentEndNum = x
        'debug.print AHLParentEndrow
        Exit Function
    End If
Next x
End Function
Function EPTParentStartrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(EPTParentStartNum, 1).Value = "EPT start" Then
    EPTParentStartrow = EPTParentStartNum
    'debug.print EPTParentStartrow
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "EPT start" Then
        EPTParentStartrow = x
        EPTParentStartNum = x
        'debug.print EPTParentStartrow
        Exit Function
    End If
Next x
End Function
Function EPTParentEndrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(EPTParentEndNum, 1).Value = "EPT end" Then
    EPTParentEndrow = EPTParentEndNum
    'debug.print EPTParentEndrow
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "EPT end" Then
        EPTParentEndrow = x
        EPTParentEndNum = x
        'debug.print EPTParentEndrow
        Exit Function
    End If
Next x
End Function

Function custDaterow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(custDateNum, 1).Value = "Customer requested completion date (mm/dd/yyyy):" Then
    custDaterow = custDateNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Customer requested completion date (mm/dd/yyyy):" Then
        custDaterow = x
        custDateNum = x
        Exit Function
    End If
Next x
End Function

Function ECDrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(ECDNum, 1).Value = "ECD  (mm/dd/yyyy):" Then
    ECDrow = ECDNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "ECD  (mm/dd/yyyy):" Then
        ECDrow = x
        ECDNum = x
        Exit Function
    End If
Next x
End Function

Function TATrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(TATNum, 1).Value = "TAT:" Then
    TATrow = TATNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "TAT:" Then
        TATrow = x
        TATNum = x
        Exit Function
    End If
Next x
End Function

Function hNamerow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(hNameNum, 1).Value = "Evaluator Name:" Then
    hNamerow = hNameNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Evaluator Name:" Then
        hNamerow = x
        hNameNum = x
        Exit Function
    End If
Next x
End Function
Function hemailrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(hNameNum, 1).Value = "Evaluator Name:" And hemailNum = hNameNum + 1 Then
    hemailrow = hemailNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Evaluator Name:" Then
        hemailrow = x + 1
        hemailNum = x + 1
        Exit Function
    End If
Next x
End Function

Function hTitlerow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(hNameNum, 1).Value = "Evaluator Name:" And hTitleNum = hTitleNum + 2 Then
    hTitlerow = hTitleNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Evaluator Name:" Then
        hTitlerow = x + 2
        hTitleNum = x + 2
        Exit Function
    End If
Next x
End Function
Function hDepartmentrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(hNameNum, 1).Value = "Evaluator Name:" And hDepartmentNum = hDepartmentNum + 3 Then
    hDepartmentrow = hDepartmentNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Evaluator Name:" Then
        hDepartmentrow = x + 3
        hDepartmentNum = x + 3
        Exit Function
    End If
Next x
End Function
Function hIDrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(hNameNum, 1).Value = "Evaluator Name:" And hIDNum = hNameNum + 4 Then
    hIDrow = hIDNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Evaluator Name:" Then
        hIDrow = x + 4
        hIDNum = x + 4
        Exit Function
    End If
Next x
End Function



Function rNamerow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(rNameNum, 1).Value = "Reviewer:" Then
    rNamerow = rNameNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Reviewer:" Then
        rNamerow = x
        rNameNum = x
        Exit Function
    End If
Next x
End Function
Function remailrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(rNameNum, 1).Value = "Reviewer:" And remailNum = rNameNum + 1 Then
    remailrow = remailNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Reviewer:" Then
        remailrow = x + 1
        remailNum = x + 1
        Exit Function
    End If
Next x
End Function

Function rTitlerow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(rNameNum, 1).Value = "Reviewer:" And rTitleNum = rTitleNum + 2 Then
    rTitlerow = rTitleNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Reviewer:" Then
        rTitlerow = x + 2
        rTitleNum = x + 2
        Exit Function
    End If
Next x
End Function
Function rDepartmentrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(rNameNum, 1).Value = "Reviewer:" And rDepartmentNum = rNameNum + 3 Then
    rDepartmentrow = rDepartmentNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Reviewer:" Then
        rDepartmentrow = x + 3
        rDepartmentNum = x + 3
        Exit Function
    End If
Next x
End Function
Function rIDrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(rNameNum, 1).Value = "Reviewer:" And rIDNum = rNameNum + 4 Then
    rIDrow = rIDNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "Reviewer:" Then
        rIDrow = x + 4
        rIDNum = x + 4
        Exit Function
    End If
Next x
End Function

Function LISrow() As Long
If CCNNum = 0 Then
    Call initializeConst
End If
Dim x As Long
If Worksheets("Needs Assessment").Cells(LISNum, 1).Value = "LIS/PCD:" Then
    LISrow = LISNum
    Exit Function
End If
For x = 1 To 200
    If Worksheets("Needs Assessment").Cells(x, 1).Value = "LIS/PCD:" Then
        LISrow = x
        Exit Function
    End If
Next x
End Function

Attribute VB_Name = "ModuleSandbox"

'read binary file As a string value
Function GetFile(fileName As String) As String
  Dim FileContents() As Byte, FileNumber As Integer
  ReDim FileContents(FileLen(fileName) - 1)
  FileNumber = FreeFile
  Open fileName For Binary As FileNumber
    Get FileNumber, , FileContents
  Close FileNumber
  GetFile = StrConv(FileContents, vbUnicode)
End Function
'******************* upload - end


Attribute VB_Name = "ModuleStartStop"
Sub startSub() 'for future reference. Allow for updating the startup code with only module update

End Sub
Sub endSub() 'for future reference. Allow for updating the shutdown code with only module update

'Exit Sub
Dim x As Long, y As Long

'Correct module name changes that could occur during module updates.
x = 0
If Worksheets("auto update").Cells(x + 2, 1).Value <> "" Then
  Do
    For y = 1 To Application.VBE.ActiveVBProject.VBComponents.Count
        If Application.VBE.ActiveVBProject.VBComponents.Item(y).Name = Worksheets("auto update").Cells(x + 2, 1).Value & "1" Then
            Application.VBE.ActiveVBProject.VBComponents.Item(y).Name = Worksheets("auto update").Cells(x + 2, 1).Value
            Debug.Print "Fixed module name for " & Worksheets("auto update").Cells(x + 2, 1).Value
        End If
    Next y
    x = x + 1
  Loop Until Worksheets("auto update").Cells(x + 2, 1).Value = ""
End If
Debug.Print "end of module name check"
End Sub

Attribute VB_Name = "ModuleTCDownload"
Sub TCProc_getFlexID()
Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long
Dim pWebAddress As String
Dim x As Long, i As Long
Dim tbl As Object, p As Object, li As Object, td As Object, fld As Object, td2 As HTMLBaseElement
Dim doc As HTMLDocument, lastAddress As String
Dim totalDocuments As Long, y As Long, yy As Long, z As Long, page As Long
Dim IE As InternetExplorer
Dim IE1(10) As Boolean, IE2(10) As Boolean
Dim tabNum As Long, docName As String, docLink As String
Dim totalTasks As Long

    pWebAddress = TCDownload.TextBox1
    Set IE = New InternetExplorer
    IE.Visible = True
    IE.navigate pWebAddress
    While IE.Busy
        DoEvents
    Wend
    Do
        Set sh = New Shell32.Shell
        For Each eachIE In sh.Windows
            If InStr(1, eachIE.LocationURL, pWebAddress) Then
                Set IE = eachIE
                'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
                Exit Do
            End If
        Next eachIE
    Loop
    Set eachIE = Nothing
    Set sh = Nothing
    While IE.Busy  ' The new process may still be busy even after you find it
        DoEvents
    Wend

    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Do
        Sleep 50
        Set doc = IE.Document
    Loop Until Not (doc.getElementById("body") Is Nothing)
    Set doc = IE.Document
    
    IE.Visible = True
    s1 = doc.getElementById("body").Children(0).Children(0).Children(1).Children(2).Children(0).outerHTML
    Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = Mid(s1, InStr(s1, "data-max-chars=") - 34, 32)
    Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value = "https://portal.ul.com/Project/Index/" & Mid(s1, InStr(s1, "data-max-chars=") - 34, 32)

End Sub


Function TCProc_GetReviewerInfo() As String ' Optional predecessor As String = "a") As String

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long
Dim pWebAddress As String
Dim x As Long, i As Long
Dim tbl As Object, p As Object, li As Object, td As Object, fld As Object, td2 As HTMLBaseElement
Dim doc As HTMLDocument, lastAddress As String
Dim totalDocuments As Long, y As Long, yy As Long, z As Long, page As Long
Dim IE As InternetExplorer
Dim IE1(10) As Boolean, IE2(10) As Boolean
Dim tabNum As Long, docName As String, docLink As String
Dim totalTasks As Long

Call validateURL
Call clearDocForm
pWebAddress = "https://portal.ul.com/Project/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "/Task?&viewType=List"
Set IE = NewValidIE(pWebAddress) '  InternetExplorer
IE.Visible = True 'False

Do
    DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document
Do
    Sleep 50
    Set doc = IE.Document
Loop Until Not (doc.getElementsByTagName("body") Is Nothing)
Set doc = IE.Document

IE.Visible = True

Dim x9 As HTMLBaseElement

'Set x9 = doc.getElementById("body").Children(0).Children(2).Children(5).Children(0).Children(1).Children(0)
'Set x9 = x9.Children.Item(x9.Children.Length - 2)
'totalTasks = x9.parentElement.parentElement.Children.Length
Set x9 = doc.getElementById("body").Children(0).Children(2).Children(7).Children(1).Children(1)
totalTasks = x9.Children.Length

i = 1
For y = 1 To totalTasks
    If x9.Children(y - 1).Children(4).innerText = "Completed" Or x9.Children(y - 1).Children(4).innerText = "Canceled" Then
        Debug.Print pWebAddress
        Debug.Print y
'        s1 = x9.Children(y - 1).Children(11).Children(0).Children(1).Children(1).Children(0).innerHTML 'doc.getElementById("body").Children(0).Children(2).Children(3).Children(0).Children(1).Children(y - 1).Children(2).Children(11).Children(0).Children(1).Children(1).Children(0).innerHTML
        s1 = x9.Children(y - 1).Children(x9.Children(y - 1).Children.Length - 1).Children(0).Children(1).Children(1).Children(0).innerHTML 'doc.getElementById("body").Children(0).Children(2).Children(3).Children(0).Children(1).Children(y - 1).Children(2).Children(11).Children(0).Children(1).Children(1).Children(0).innerHTML
        Worksheets("Documents").Cells(6 + i, 53).Value = Mid(s1, InStr(s1, "/Task/Detail/") + 13, 77) ' Len(s1) - (InStr(s1, "view_") + 5) + 1)
        Worksheets("Documents").Cells(6 + i, 52).Value = x9.Children(y - 1).Children(2).innerText 'doc.getElementById("body").Children(0).Children(2).Children(3).Children(0).Children(1).Children(y - 1).Children(2).innerText
        i = i + 1
    End If
    If x9.Children(y - 1).Children(4).innerText <> "Completed" And x9.Children(y - 1).Children(4).innerText <> "Canceled" Then
'        s1 = x9.Children(y - 1).Children(11).Children(0).Children(2).Children(1).Children(0).innerHTML
        s1 = x9.Children(y - 1).Children(x9.Children(y - 1).Children.Length - 1).Children(0).Children(2).Children(1).Children(0).innerHTML
        'Debug.Print LCase(s1)
        'Debug.Print LCase(x9.Children(y - 1).Children(x9.Children(y - 1).Children.Length - 1).Children(0).Children(2).Children(1).Children(0).innerText)
        s1 = x9.Children(y - 1).Children(2).innerText
        Debug.Print s1
        If InStr(LCase(s1), "tc_processing") > 0 Then
            TCDownload.TextBox13.Text = x9.Children(y - 1).Children(6).innerText
        End If
    End If
Next y
'StatusForm.Hide

TCProc_GetReviewerInfo = ""
''If Worksheets("Documents").Cells(7, 60).Value <> "" Then
'If predecessor <> "a" Then
'    s4 = Replace(predecessor, " ", "") & ","
'    For x = 1 To (Len(s4) - Len(Replace(s4, ",", "")))
'
'    y = CInt(Mid(s4, 1, InStr(s4, ",") - 1))
'    pWebAddress = "https://portal.ul.com/Project/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "/Task/Detail/" & Worksheets("Documents").Cells(6 + y, 53).Value
'    StatusForm.Show
'    StatusForm.Label1.Caption = "Fetching task info #" & y & ": " & Worksheets("Documents").Cells(6 + y, 52).Value
'    IE.Visible = False
'    IE.navigate pWebAddress
'    IE.Visible = False
'    While IE.Busy
'        DoEvents
'    Wend
'    Do
'        Set sh = New Shell32.Shell
'        For Each eachIE In sh.Windows
'            If InStr(1, eachIE.LocationURL, pWebAddress) Then
'                Set IE = eachIE
'                'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
'                Exit Do
'            End If
'        Next eachIE
'    Loop
'    Set eachIE = Nothing
'    Set sh = Nothing
'    While IE.Busy  ' The new process may still be busy even after you find it
'        DoEvents
'    Wend
'
'    Do
'        DoEvents
'    Loop Until IE.readyState = READYSTATE_COMPLETE
'    Do
'        Sleep 50
'        Set doc = IE.Document
'    Loop Until Not (doc.getElementById("body") Is Nothing)
'    Set doc = IE.Document
'
'    s1 = doc.getElementById("body").Children(0).Children(3).Children(1).Children(2).Children(1).Children(1).innerText
'    Worksheets("Needs Assessment").Cells(rNamerow(), 2).Value = Replace(Replace(s1, "@ul.com", ""), ".", " ")
''    TCProc_GetReviewerInfo = doc.getElementById("body").Children(0).Children(3).Children(1).Children(5).Children(1).Children(1).innerText
'    TCProc_GetReviewerInfo = TCProc_GetReviewerInfo & Worksheets("Documents").Cells(6 + y, 52).Value & " completed " & doc.getElementById("body").Children(0).Children(3).Children(1).Children(5).Children(1).Children(1).innerText & vbLf
'       If x = (Len(s4) - Len(Replace(s4, ",", ""))) Then
'           Exit Function
'       End If
'        s4 = Mid(s4, InStr(s4, ","), Len(s4) - InStr(s4, ",") + 1)
'    Next x
'End If

For y = 1 To i 'totalTasks
'  If InStr(LCase(Worksheets("Documents").Cells(6 + y, 52).Value), "final review") > 0 Or InStr(LCase(Worksheets("Documents").Cells(6 + y, 52).Value), "prime review") > 0 Then
  If InStr(LCase(Worksheets("Documents").Cells(6 + y, 52).Value), "review") > 0 Then
    pWebAddress = "https://portal.ul.com/Project/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "/Task/Detail/" & Worksheets("Documents").Cells(6 + y, 53).Value
    StatusForm.Top = Application.Top
    StatusForm.Left = Application.Left
    StatusForm.Show
    StatusForm.Label1.Caption = "Fetching task info #" & y & ": " & Worksheets("Documents").Cells(6 + y, 52).Value
    IE.Visible = False
    IE.navigate pWebAddress
    IE.Visible = False
    While IE.Busy
        DoEvents
    Wend
    Do
        Set sh = New Shell32.Shell
        For Each eachIE In sh.Windows
            If InStr(1, eachIE.LocationURL, pWebAddress) Then
                Set IE = eachIE
                'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
                Exit Do
            End If
        Next eachIE
    Loop
    Set eachIE = Nothing
    Set sh = Nothing
    While IE.Busy  ' The new process may still be busy even after you find it
        DoEvents
    Wend

    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Do
        Sleep 50
        Set doc = IE.Document
    Loop Until Not (doc.getElementById("body") Is Nothing)
    Set doc = IE.Document
    
    IE.Visible = True
    s1 = doc.getElementById("body").Children(0).Children(3).Children(1).Children(2).Children(1).Children(1).innerText
    If InStr(s1, "Unassigned") < 1 Then
        'MsgBox s1
        Worksheets("Needs Assessment").Cells(rNamerow(), 2).Value = StrConv(Replace(Replace(s1, "@ul.com", ""), ".", " "), vbProperCase) 'Replace(Replace(s1, "@ul.com", ""), ".", " ")
'    TCProc_GetReviewerInfo = doc.getElementById("body").Children(0).Children(3).Children(1).Children(5).Children(1).Children(1).innerText
        TCProc_GetReviewerInfo = TCProc_GetReviewerInfo & Worksheets("Documents").Cells(6 + y, 52).Value & " completed " & doc.getElementById("body").Children(0).Children(3).Children(1).Children(5).Children(1).Children(1).innerText & vbLf
    End If
  End If

Next y

StatusForm.Hide

noDocs:
    IE.Quit
    Set IE = Nothing
   
errorEnd:

End Function

Attribute VB_Name = "ModuleTC_Processing"
Sub cycleEmployeesTC()

Dim s1 As String, x As Long, s2 As String
Dim IE As InternetExplorer
Dim sh
Dim eachIE

'Loop for all in progress projects
Set IE = New InternetExplorer
IE.Visible = False

If Not ActiveSheet.Cells(4, 1).Value = "" And ActiveSheet.Cells(26, 3).Value = "" Then
    'Debug.Print "cycling employees"
    ProgressForm.Show
    x = 4
    Do
        ProgressForm.Label2.Caption = ActiveSheet.Cells(x, 1).Value
        Call EmployeeProjectListTC(ActiveSheet.Cells(x, 1).Value)
        x = x + 1
    Loop Until ActiveSheet.Cells(x, 1).Value = ""
    ProgressForm.Hide
End If
''Debug.Print Activesheet.Cells(3, 26).Value
If ActiveSheet.Cells(3, 26).Value <> "" Then
    'Debug.Print "cycling keywords"
    
    ProgressForm.Show
    s1 = ActiveSheet.Cells(3, 26).Value
    If InStr(s1, ",") > 0 Then
    Do
        s2 = Mid(s1, 1, InStr(s1, ",") - 1)
        ProgressForm.Label2.Caption = s2
        Call EmployeeProjectListTC(Replace(s2, "&", "%26"))
        s1 = Mid(s1, InStr(s1, ",") + 1, Len(s1) - (InStr(s1, ",") + 1) + 1)
    Loop Until InStr(s1, ",") < 1
    End If
    ProgressForm.Label2.Caption = s1
    Call EmployeeProjectListTC(Replace(s1, "&", "%26"))
    ProgressForm.Hide
End If


IE.Quit
Set IE = Nothing

End Sub

Sub EmployeeProjectListTC(employee As String)
    
Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long
Dim pWebAddress As String, pwebAddressx As String
Dim x As Long
Dim tbl As Object, p As Object, td As Object, fld As Object, td2 As HTMLBaseElement
Dim doc As HTMLDocument, lastAddress As String
Dim totalProjects As Long, y As Long, yy As Long, z As Long, page As Long
Dim IE As InternetExplorer
Dim docx(10) As HTMLDocument
Dim IEx(10) As InternetExplorer
Dim IE1(10) As Boolean, IE2(10) As Boolean

Dim sh
Dim eachIE
Dim shx(10)
Dim eachIEx(10)


'Debug.Print employee
'Loop for all in progress projects
pWebAddress = "https://portal.ul.com/Search/Project?EntityType=Project&Filters.ariaProjectProjectStatus=InProgress&Filters.ariaProjectProjectStatus=OnHold&Filters.ariaProjectHandler=" & Replace(Replace(employee, " ", "."), "..", ".") & "%40ul.com&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending&viewType=Default"
If ActiveSheet.Cells(3, 26).Value <> "" Then
    pWebAddress = "https://portal.ul.com/Search/Project?viewType=Default&EntityType=Project&query=" & Replace(employee, " ", "+") & "&Filters.ariaProjectProjectStatus=InProgress&Filters.ariaProjectProjectStatus=OnHold&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending"
End If
Set IE = New InternetExplorer
IE.Visible = True
IE.navigate pWebAddress, self

While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing

While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document
login:
If doc.getElementById("body") Is Nothing Then
    ProgressForm.Hide
    MsgBox "Log into Flex"
    ProgressForm.Show
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

Do
Sleep 25
Set doc = IE.Document
Loop Until Not (doc.getElementsByTagName("p") Is Nothing)

page = 1
x = 3
Do
    x = x + 1
Loop Until ActiveSheet.Cells(x, 3).Value = ""

For Each p In doc.getElementsByTagName("p")
    If InStr(p.innerText, "There are no projects to display.") > 0 Then
        ActiveSheet.Cells(x, 3).Value = employee
        ActiveSheet.Cells(x, 4).Value = "No active projects"
        GoTo noActiveProjects
    End If
Next p

'get total number of projects from this field
s1 = doc.getElementById("frmSearchTop").Children(1).Children(0).Children(0).innerText
s2 = Mid(s1, InStr(s1, "of") + 3, Len(s1) - InStr(s1, "of") - 2)

totalProjects = CInt(s2)

For x1 = 0 To 9
    IE1(x1) = False
    IE2(x1) = False
    Set IEx(x1) = New InternetExplorer
    IEx(x1).Visible = False
Next x1

yy = 1 'yy is the current count (1 thru 10) for the page
For y = 1 To totalProjects
    ProgressForm.Label3.Caption = "Work on hand: project " & y & " of " & totalProjects
    If y = page * 10 + 1 Then
        For x1 = 0 To 9
            IE1(x1) = False
            IE2(x1) = False
        Next x1
        page = page + 1
        IE.navigate Replace(pWebAddress, "EntityType", "Query=&Paging.Page=" & page & "&EntityType"), self
        Do
            DoEvents
        Loop Until IE.readyState = READYSTATE_COMPLETE
        Do
            Sleep 25
            Set doc = IE.Document
        Loop Until Not (doc.getElementById("body") Is Nothing)
        Set doc = IE.Document
        lastAddress = IE.LocationURL

        yy = 1
    End If
   
    'Activesheet.Cells(x + y - 1, 3).Value = employee
    ActiveSheet.Cells(x + y - 1, 4).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0).innerText
    ActiveSheet.Cells(x + y - 1, 3).Value = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(3).Children(1).innerText
    s1 = doc.getElementById("body").Children(0).Children(3).Children(2).Children(yy - 1).Children(2).Children(1).Children(0)
    ActiveSheet.Cells(x + y - 1, 5).Value = "https" & Mid(s1, InStr(s1, "href") + 6, Len(s1) - InStr(s1, "href") - 5 - (InStr(s1, "title") - 3))
    ActiveSheet.Cells(x + y - 1, 6).Value = "No order lines"
    lastAddress = IE.LocationURL
    
If y Mod 10 = 0 Then
    For x3 = 0 To 9
        Sleep 50
'        Set IEx(x3) = New InternetExplorer
'        IEx(x3).Visible = False
        IEx(x3).navigate (Replace(ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 5).Value, "Index", "OrderInfo")), self
pwebAddressx = Replace(ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 5).Value, "Index", "OrderInfo")
While IEx(x3).Busy
  DoEvents
  Wend
Do
  Set shx(x3) = New Shell32.Shell
  For Each eachIEx(x3) In shx(x3).Windows
    If InStr(1, eachIEx(x3).LocationURL, pwebAddressx) Then
      Set IEx(x3) = eachIEx(x3)
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIEx(x3)
  Loop
'Set eachIEx(x3) = Nothing
'Set shx(x3) = Nothing

While IEx(x3).Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
    
    Next x3
End If
If y = totalProjects Then
    For x3 = 0 To (y - 1) Mod 10
        Sleep 50
'        Set IEx(x3) = New InternetExplorer
'        IEx(x3).Visible = False
        IEx(x3).navigate (Replace(ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 5).Value, "Index", "OrderInfo")), self
pwebAddressx = Replace(ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 5).Value, "Index", "OrderInfo")
While IEx(x3).Busy
  DoEvents
  Wend
Do
  Set shx(x3) = New Shell32.Shell
  For Each eachIEx(x3) In shx(x3).Windows
    If InStr(1, eachIEx(x3).LocationURL, pwebAddressx) Then
      Set IEx(x3) = eachIEx(x3)
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIEx(x3)
  Loop
'Set eachIEx(x3) = Nothing
'Set shx(x3) = Nothing

While IEx(x3).Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend
  
    Next x3
End If

loadloop:
If y Mod 10 = 0 Then
    For x3 = 0 To 9
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 25
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
            For Each tbl In docx(x3).getElementsByTagName("TABLE")
                x4 = 0
                For Each td In tbl.getElementsByTagName("td")
                    If InStr(td.innerText, "AWAITING_FULFILLMENT") > 0 Then
                        If ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 6).Value <> "No order lines" Then
                            s1 = td.parentElement.Children(2).innerText
                            ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 6).Value = (ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 6).Value) + CDbl(Mid(s1, 1, InStr(s1, " ") - 1))
                            ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 10).Value = ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 10).Value & ", " & td.parentElement.Children(0).innerText ' "Multiple line items"
                        Else
                            s1 = td.parentElement.Children(2).innerText
                            ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 6).Value = CDbl(Mid(s1, 1, InStr(s1, " ") - 1))
                            ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 10).Value = td.parentElement.Children(0).innerText
                        End If
                        
                        ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 7).Value = Mid(s1, InStr(s1, " ") + 1, Len(s1) - InStr(s1, " "))
                    End If
                
                Next td
            Next tbl
            
            IE1(x3) = True
            IEx(x3).Visible = False
            IEx(x3).navigate (Replace(ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 5).Value, "Index", "Details")), self
    Next x3
End If

If y = totalProjects And y Mod 10 <> 0 Then
    For x3 = 0 To (y - 1) Mod 10
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 25
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
            For Each tbl In docx(x3).getElementsByTagName("TABLE")
                x4 = 0
                For Each td In tbl.getElementsByTagName("td")
                    If InStr(td.innerText, "AWAITING_FULFILLMENT") > 0 Then
                        If ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 6).Value <> "No order lines" Then
                            s1 = td.parentElement.Children(2).innerText
                            ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 6).Value = (ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 6).Value) + CDbl(Mid(s1, 1, InStr(s1, " ") - 1))
                            ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 10).Value = ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 10).Value & ", " & td.parentElement.Children(0).innerText ' "Multiple line items"
                        Else
                            s1 = td.parentElement.Children(2).innerText
                            ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 6).Value = CDbl(Mid(s1, 1, InStr(s1, " ") - 1))
                            ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 10).Value = td.parentElement.Children(0).innerText
                        End If
                        
                        ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 7).Value = Mid(s1, InStr(s1, " ") + 1, Len(s1) - InStr(s1, " "))
                    End If
                Next td
            Next tbl
            IE1(x3) = True
            IEx(x3).Visible = False
            IEx(x3).navigate (Replace(ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 5).Value, "Index", "Details")), self
    Next x3
End If

If y Mod 10 = 0 Then
    For x3 = 0 To 9
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 25
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    
    Set docx(x3) = IEx(x3).Document
    For Each div In docx(x3).getElementsByTagName("div")
        If InStr(div.innerText, "Estimated Completion Date") > 0 Then
            ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 8).Value = div.parentElement.Children(1).innerText
        End If
    Next div
    IE2(x3) = True
'    IEx(x3).Quit
'    Set IEx(x3) = Nothing

    Next x3
End If

If y = totalProjects And y Mod 10 <> 0 Then
    For x3 = 0 To (y - 1) Mod 10
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 25
        Set docx(x3) = IEx(x3).Document
    Loop Until Not (docx(x3).getElementById("body") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    Set docx(x3) = IEx(x3).Document
    For Each div In docx(x3).getElementsByTagName("div")
        If InStr(div.innerText, "Estimated Completion Date") > 0 Then
            ActiveSheet.Cells(x + (x3 + 1 + (page - 1) * 10) - 1, 8).Value = div.parentElement.Children(1).innerText
        End If
    Next div
    IE2(x3) = True
'    IEx(x3).Quit
'    Set IEx(x3) = Nothing
    Next x3
End If

skipLoad2:


'if project is completed and date is before cutoff, then goto end of procedure
    yy = yy + 1

'Sleep 50

Next y

noActiveProjects:

noCompletedProjects:

For x3 = 0 To 9
'    If Not (IEx(x3) Is Nothing) Then
        IEx(x3).Quit
        Set IEx(x3) = Nothing
        Set shx(x3) = Nothing
        Set eachIEx(x3) = Nothing
'    End If
Next x3

    IE.Quit
    Set IE = Nothing
   
errorEnd:
   
End Sub
Attribute VB_Name = "ModuleTable"
Option Explicit

Sub Test()

    Dim strJsonString As String
    Dim arrResult() As Variant

    ' download
    strJsonString = DownloadJson("https://portal.ul.com/Search/Task?viewType=Default&EntityType=Task&Filters.ariaTaskTaskOwner=Ryan.Barnes%40ul.com&Sorts%5b0%5d.FieldName=ariaUpdatedOn&Sorts%5b0%5d.Order=Descending")

    ' process
    arrResult = ConvertJsonToArray(strJsonString)

    ' output
    Output Sheets("Sheet1"), arrResult

End Sub

Function DownloadJson(strUrl As String) As String

    With CreateObject("MSXML2.XMLHTTP")
        .Open "GET", strUrl
        .send
        If .Status <> 200 Then
            'Debug.Print .Status
            Exit Function
        End If
        DownloadJson = .responseText
    End With

End Function


Function ConvertJsonToArray(strJsonString As String) As Variant

    Dim strCnt As String
    Dim strMarkerQuot As String
    Dim arrUnicode() As String
    Dim arrQuots() As String
    Dim arrRows() As String
    Dim arrProps() As String
    Dim arrTokens() As String
    Dim arrHeader() As String
    Dim arrColumns() As Variant
    Dim arrColumn() As Variant
    Dim arrTable() As Variant
    Dim j As Long
    Dim i As Long
    Dim lngMaxRowIdx As Long
    Dim lngMaxColIdx As Long
    Dim lngPrevIdx As Long
    Dim lngFoundIdx As Long
    Dim arrProperty() As String
    Dim strPropName As String
    Dim strPropValue As String

    strCnt = Split(strJsonString, "[{")(1)
    strCnt = Split(strCnt, "}]")(0)

    strMarkerQuot = Mid(CreateObject("Scriptlet.TypeLib").GUID, 2, 36)
    strCnt = Replace(strCnt, "\\", "\")
    strCnt = Replace(strCnt, "\""", strMarkerQuot)
    strCnt = Replace(strCnt, "\/", "/")
    strCnt = Replace(strCnt, "\b", Chr(8))
    strCnt = Replace(strCnt, "\f", Chr(12))
    strCnt = Replace(strCnt, "\n", vbLf)
    strCnt = Replace(strCnt, "\r", vbCr)
    strCnt = Replace(strCnt, "\t", vbTab)

    arrUnicode = Split(strCnt, "\u")
    For i = 1 To UBound(arrUnicode)
        arrUnicode(i) = ChrW(CLng("&H" & Left(arrUnicode(i), 4))) & Mid(arrUnicode(i), 5)
    Next
    strCnt = Join(arrUnicode, "")

    arrQuots = Split(strCnt, """")
    ReDim arrTokens(UBound(arrQuots) \ 2)
    For i = 1 To UBound(arrQuots) Step 2
        arrTokens(i \ 2) = Replace(arrQuots(i), strMarkerQuot, """")
        arrQuots(i) = "%" & i \ 2
    Next

    strCnt = Join(arrQuots, "")
    strCnt = Replace(strCnt, " ", "")

    arrRows = Split(strCnt, "},{")
    lngMaxRowIdx = UBound(arrRows)
    For j = 0 To lngMaxRowIdx
        lngPrevIdx = -1
        arrProps = Split(arrRows(j), ",")
        For i = 0 To UBound(arrProps)
            arrProperty = Split(arrProps(i), ":")
            strPropName = arrProperty(0)
            If Left(strPropName, 1) = "%" Then strPropName = arrTokens(Mid(strPropName, 2))
            lngFoundIdx = GetArrayItemIndex(arrHeader, strPropName)
            If lngFoundIdx = -1 Then
                ReDim arrColumn(lngMaxRowIdx)
                If lngPrevIdx = -1 Then
                    ArrayAddItem arrHeader, strPropName
                    lngPrevIdx = UBound(arrHeader)
                    ArrayAddItem arrColumns, arrColumn
                Else
                    lngPrevIdx = lngPrevIdx + 1
                    ArrayInsertItem arrHeader, lngPrevIdx, strPropName
                    ArrayInsertItem arrColumns, lngPrevIdx, arrColumn
                End If
            Else
                lngPrevIdx = lngFoundIdx
            End If
            strPropValue = arrProperty(1)
            If Left(strPropValue, 1) = "%" Then strPropValue = arrTokens(Mid(strPropValue, 2))
            arrColumns(lngPrevIdx)(j) = strPropValue
        Next
    Next
    lngMaxColIdx = UBound(arrHeader)
    ReDim arrTable(lngMaxRowIdx + 1, lngMaxColIdx)
    For i = 0 To lngMaxColIdx
        arrTable(0, i) = arrHeader(i)
    Next
    For j = 0 To lngMaxRowIdx
        For i = 0 To lngMaxColIdx
            arrTable(j + 1, i) = arrColumns(i)(j)
        Next
    Next

    ConvertJsonToArray = arrTable

End Function

Sub Output(objSheet As Worksheet, arrCells() As Variant)

    With objSheet
        .Select
        .Range(.Cells(1, 1), Cells(UBound(arrCells, 1) + 1, UBound(arrCells, 2) + 1)).Value = arrCells
        .Columns.AutoFit
    End With
    With ActiveWindow
        .SplitColumn = 0
        .SplitRow = 1
        .FreezePanes = True
    End With

End Sub

Function GetArrayItemIndex(arrElements, varTest)
    For GetArrayItemIndex = 0 To SafeUBound(arrElements)
        If arrElements(GetArrayItemIndex) = varTest Then Exit Function
    Next
    GetArrayItemIndex = -1
End Function

Sub ArrayAddItem(arrElements, varElement)
    ReDim Preserve arrElements(SafeUBound(arrElements) + 1)
    arrElements(UBound(arrElements)) = varElement
End Sub

Sub ArrayInsertItem(arrElements, lngIndex, varElement)
    Dim i As Long
    ReDim Preserve arrElements(SafeUBound(arrElements) + 1)
    For i = UBound(arrElements) To lngIndex + 1 Step -1
        arrElements(i) = arrElements(i - 1)
    Next
    arrElements(i) = varElement
End Sub

Function SafeUBound(arrTest)
    On Error Resume Next
    SafeUBound = -1
    SafeUBound = UBound(arrTest)
End Function
Attribute VB_Name = "ModuleTemplate"
Sub ShowTemplateForm()
    
Dim x As Long, index As Long, li As Object, endCol As Long, y As Long
Worksheets("Associated Projects").Cells(4, 2).Value = Worksheets("Needs Assessment").Cells(Scoperow, 2).Value
Worksheets("Associated Projects").Cells(4, 3).Value = Worksheets("Needs Assessment").Cells(Quoterow, 5).Value
Worksheets("Associated Projects").Cells(4, 4).Value = Worksheets("Needs Assessment").Cells(Projectrow, 5).Value
index = Worksheets("Needs Assessment").Shapes("Drop Down 85").ControlFormat.ListIndex - 1
If Worksheets("Needs Assessment").Shapes("Drop Down 85").ControlFormat.ListIndex <> 2 Then
    x = -1
    Do
        x = x + 1
    Loop Until Worksheets("Needs Assessment").Cells(AHLParentStartrow + 5 + x, 1).Value = ""
    If x = 0 Then
        MsgBox "No AHL parent lines"
        Exit Sub
    End If
    If TemplateForm.ComboBox1.ListCount < x Then
    TemplateForm.ComboBox1.Clear
    For y = 0 To x
        TemplateForm.ComboBox1.AddItem Worksheets("Needs Assessment").Cells(AHLParentStartrow + 5 + y, 2).Value
    Next y
    TemplateForm.ComboBox1.ListIndex = 0
    End If
Else
    x = 0
    Do
        Debug.Print "row = " & EPTParentStartrow + 3 + x & ": " & Worksheets("Needs Assessment").Cells(EPTParentStartrow + 3 + x, 2).Value
        If (x + 4) Mod 13 = 0 And x <> 0 Then
            x = x + 4
        Else
            x = x + 1
        End If
    Loop Until Worksheets("Needs Assessment").Cells(EPTParentStartrow + 3 + x, 2).Value = ""
    Debug.Print x
    If x = 1 Then
        MsgBox "No EPT parent lines"
        Exit Sub
    End If
    If TemplateForm.ComboBox1.ListCount < x Then
    TemplateForm.ComboBox1.Clear
    x = 0
    Do
        TemplateForm.ComboBox1.AddItem Worksheets("Needs Assessment").Cells(EPTParentStartrow + 3 + x, 2).Value
        If (x + 4) Mod 13 = 0 And x <> 0 Then
            x = x + 4
        Else
            x = x + 1
        End If
    Loop Until Worksheets("Needs Assessment").Cells(EPTParentStartrow + 3 + x, 2).Value = ""
    TemplateForm.ComboBox1.ListIndex = 0
End If

End If

TemplateForm.ComboBox2.Clear
x = 3
If Worksheets("Create Templates").Cells(x, 5 + 8 * (index)).Value <> "" Then
    Do
        TemplateForm.ComboBox2.AddItem Worksheets("Create Templates").Cells(x, 5 + 8 * (index)).Value
        x = x + 1
    Loop Until Worksheets("Create Templates").Cells(x, 5 + 8 * (index)).Value <> ""
End If
TemplateForm.ListView1.ListItems.Clear


'Call getTaskInfo

Call RefreshTemplate
TemplateForm.Show

End Sub
Sub getTaskInfo()

'Exit Sub

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, y As Long, y2 As Long, totalTasks As Long
Dim pWebAddress As String, flexNum As String, pwebAddressx As String, temp As String, temp2 As String, notChecked As Long, checkedCount As Long
Dim IE As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object, div2 As Object, div3 As Object
Dim doc As HTMLDocument, doc2 As HTMLDocument, cEmail As String, cPhone As String
Dim elem As HTMLBaseElement, x9 As HTMLBaseElement, parentTasks() As Long
Dim x
Dim docx() As HTMLDocument
Dim IEx() As InternetExplorer

Dim TaskOffset As Long, curTab As Long, index As Long
TaskOffset = 6

curTab = TemplateForm.ComboBox1.ListIndex
If curTab < 0 Then
    curTab = 0
End If
index = Worksheets("Needs Assessment").Shapes("Drop Down 85").ControlFormat.ListIndex - 1
If Worksheets("Associated Projects").Cells(4 + curTab, 4).Value = "" Then   'TemplateForm.TabStrip1.TabIndex, 4).Value = "" Then
    ResponseForm.Caption = "Copy URL for Flex profile to be used(CTRL+V to paste)"
    ResponseForm.Show
    Worksheets("Associated Projects").Cells(4 + curTab, 2).Value = "Line " & curTab
    Worksheets("Associated Projects").Cells(4 + curTab, 3).Value = ResponseForm.TextBox1.Text
    'Worksheets("Associated Projects").Cells(4 + curTab, 4).Value = Mid(ResponseForm.TextBox1.Text, InStrRev(ResponseForm.TextBox1.Text, "\" + 1))
    s1 = ResponseForm.TextBox1.Text
If InStr(s1, "Task") > 0 Then
    s2 = Mid(s1, InStr(s1, "Project") + 8, Len(s1) - (InStr(s1, "Project") + 8) + 1)
    Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 4).Value = Mid(s2, 1, InStr(s2, "/") - 1)
Else
    s2 = Mid(s1, InStrRev(s1, "/") + 1, 32) ' Len(s1) - (InStrRev(s1, "/") + 1) + 1)
    Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 4).Value = s2 ' Mid(s2, 1, InStr(s2, "/") - 1)
End If
    If Worksheets("Associated Projects").Cells(4 + curTab, 4).Value = "" Then
        Exit Sub
    End If
End If

flexNum = Worksheets("Associated Projects").Cells(4 + curTab, 4).Value
pWebAddress = "https://portal.ul.com/Project/" & Worksheets("Associated Projects").Cells(4 + curTab, 4).Value & "/Task?&viewType=List"
Set IE = NewValidIE(pWebAddress)
IE.Visible = True

Do
Sleep 25
Set doc = IE.Document '//*[@id="body"]/section/aside/div/div[2]/div/em
Loop Until Not (doc.getElementById("downloadTasks") Is Nothing) 'Loop Until Not (doc.getElementById("addATask") Is Nothing)
Set doc = IE.Document

'get any existing parent task information here and identify current max task #
Set x9 = doc.getElementById("body").Children(0).Children(2).Children(5).Children(0).Children(1).Children(0)
'Clear tasks in sheet
Worksheets("Task-scratch").Cells(2, TaskOffset + 2 + 8 * curTab).Value = 0
y2 = 4
Do
    Worksheets("Task-scratch").Cells(y2, TaskOffset + 1 + 8 * curTab).Value = ""
    Worksheets("Task-scratch").Cells(y2, TaskOffset + 2 + 8 * curTab).Value = ""
    Worksheets("Task-scratch").Cells(y2, TaskOffset + 3 + 8 * curTab).Value = ""
    Worksheets("Task-scratch").Cells(y2, TaskOffset + 4 + 8 * curTab).Value = ""
    Worksheets("Task-scratch").Cells(y2, TaskOffset + 5 + 8 * curTab).Value = ""
    Worksheets("Task-scratch").Cells(y2, TaskOffset + 6 + 8 * curTab).Value = ""
    Worksheets("Task-scratch").Cells(y2, TaskOffset + 7 + 8 * curTab).Value = ""
    Worksheets("Task-scratch").Cells(y2, TaskOffset + 8 + 8 * curTab).Value = ""
    y2 = y2 + 1
Loop Until Worksheets("Task-scratch").Cells(y2, TaskOffset + 2 + 8 * curTab).Value = ""

Set x9 = x9.Children.Item(x9.Children.Length - 2)
totalTasks = x9.parentElement.parentElement.Children.Length

For y = 1 To totalTasks
    Worksheets("Task-scratch").Cells(y + 3, TaskOffset + 1 + 8 * curTab).Value = x9.parentElement.parentElement.Children(y - 1).Children(1).innerText
    If Worksheets("Task-scratch").Cells(y + 3, TaskOffset + 1 + 8 * curTab).Value > Worksheets("Task-scratch").Cells(2, TaskOffset + 2 + 8 * curTab).Value Then
        Worksheets("Task-scratch").Cells(2, TaskOffset + 2 + 8 * curTab).Value = Worksheets("Task-scratch").Cells(y + 3, TaskOffset + 1 + 8 * curTab).Value 'current largest task #
    End If
    'detect child tasks
    Debug.Print x9.parentElement.parentElement.Children(y - 1).Children(2).outerHTML
    If InStr(x9.parentElement.parentElement.Children(y - 1).Children(2).outerHTML, "padding-left: 25px;") > 0 Then
        Worksheets("Task-scratch").Cells(y + 3, TaskOffset + 2 + 8 * curTab).Value = "!" & x9.parentElement.parentElement.Children(y - 1).Children(2).innerText
    Else
        If InStr(x9.parentElement.parentElement.Children(y - 1).Children(2).outerHTML, "icon-minus parent-button") > 0 Then
            Worksheets("Task-scratch").Cells(y + 3, TaskOffset + 2 + 8 * curTab).Value = "@" & Mid(x9.parentElement.parentElement.Children(y - 1).Children(2).innerText, 2)
        Else
            Worksheets("Task-scratch").Cells(y + 3, TaskOffset + 2 + 8 * curTab).Value = x9.parentElement.parentElement.Children(y - 1).Children(2).innerText
        End If
    End If
    
    If x9.parentElement.parentElement.Children(y - 1).Children(4).innerText = "Completed" Or x9.parentElement.parentElement.Children(y - 1).Children(4).innerText = "Canceled" Then
        s1 = x9.parentElement.parentElement.Children(y - 1).Children(11).Children(0).Children(0).Children(1).Children(0).innerHTML 'doc.getElementById("body").Children(0).Children(2).Children(3).Children(0).Children(1).Children(y - 1).Children(2).Children(11).Children(0).Children(1).Children(1).Children(0).innerHTML
        Worksheets("Task-scratch").Cells(y + 3, TaskOffset + 3 + 8 * curTab).Value = Mid(s1, InStr(s1, "/Task/Detail/") + 13, 77) ' Len(s1) - (InStr(s1, "view_") + 5) + 1)
    Else
        s1 = x9.parentElement.parentElement.Children(y - 1).Children(11).Children(0).Children(1).Children(1).Children(0).innerHTML 'doc.getElementById("body").Children(0).Children(2).Children(3).Children(0).Children(1).Children(y - 1).Children(2).Children(11).Children(0).Children(1).Children(1).Children(0).innerHTML
        Worksheets("Task-scratch").Cells(y + 3, TaskOffset + 3 + 8 * curTab).Value = Mid(s1, InStr(s1, "/Task/Detail/") + 13, 77) ' Len(s1) - (InStr(s1, "view_") + 5) + 1)
    End If
    'Worksheets("Task-scratch").Cells(y+3, TaskOffset + 4 + 8 * curTab).Value 'don't care about associated docs
    Worksheets("Task-scratch").Cells(y + 3, TaskOffset + 5 + 8 * curTab).Value = x9.parentElement.parentElement.Children(y - 1).Children(4).innerText
    Worksheets("Task-scratch").Cells(y + 3, TaskOffset + 6 + 8 * curTab).Value = x9.parentElement.parentElement.Children(y - 1).Children(10).innerText
Next y
IE.Quit
Set IE = Nothing
Set doc = Nothing

End Sub

Sub RefreshTemplate()

TemplateForm.TreeView1.Visible = False
TemplateForm.ListView1.Visible = False
TemplateForm.TreeView1.Visible = True
TemplateForm.ListView1.Visible = True


Dim x As Long, li As Object, y As Long, x10 As Long, index As Long
Dim tabNum As Long, curTab As Long, i As Long

If TemplateForm.ListView1.ColumnHeaders.Count = 0 Then
    TemplateForm.ListView1.ColumnHeaders.Add , , "Task"
    TemplateForm.ListView1.ColumnHeaders(1).Width = 200
End If

'index = Worksheets("Needs Assessment").Shapes("Drop Down 85").ControlFormat.ListIndex
curTab = TemplateForm.ComboBox1.ListIndex 'TemplateForm.TabStrip1.SelectedItem.index
tabNum = TemplateForm.ComboBox1.ListIndex 'TemplateForm.TabStrip1.SelectedItem.index
index = Worksheets("Needs Assessment").Shapes("Drop Down 85").ControlFormat.ListIndex - 1
x = 3
'Debug.Print index
'If Worksheets("Create Templates").Cells(x, 2 + 8 * (index)).Value = "" Then
'    TemplateForm.ListView1.Visible = False
'    TemplateForm.TreeView1.Visible = False
    TemplateForm.CommandButton2.Visible = True
'    TemplateForm.Label1.Visible = True
'    Exit Sub
'Else
    TemplateForm.ListView1.Visible = True
    TemplateForm.TreeView1.Visible = True
'    TemplateForm.CommandButton2.Visible = False
'    TemplateForm.Label1.Visible = False
'End If

TemplateForm.TreeView1.Nodes.Clear
If TemplateForm.TreeView1.Nodes.Count = 0 Then
x = 4
If Worksheets("Task-scratch").Cells(x, 8 + 8 * (curTab)).Value <> "" Then
Do
  If Mid(Worksheets("Task-scratch").Cells(x, 8 + 8 * (curTab)).Value, 1, 1) = "@" Then
    TemplateForm.TreeView1.Nodes.Add Key:="%" & CStr(x - 3), Text:=Mid(Worksheets("Task-scratch").Cells(x, 8 + 8 * (curTab)).Value, 2) & " - Status: " & Worksheets("Task-scratch").Cells(x, 11 + 8 * (curTab)).Value & " - Assigned to: " & Worksheets("Task-scratch").Cells(x, 12 + 8 * (curTab)).Value & " - ACTIVE TASK"
    TemplateForm.TreeView1.Nodes("%" & CStr(x - 3)).Expanded = True
  Else
    If Mid(Worksheets("Task-scratch").Cells(x, 8 + 8 * (curTab)).Value, 1, 1) = "!" Then
        y = x
        Do
            y = y - 1
        Loop Until Mid(Worksheets("Task-scratch").Cells(y, 8 + 8 * (curTab)).Value, 1, 1) = "@"
        TemplateForm.TreeView1.Nodes.Add "%" & CStr(y - 3), tvwChild, "%" & CStr(x - 3), Mid(Worksheets("Task-scratch").Cells(x, 8 + 8 * (curTab)).Value, 2) & " - Status: " & Worksheets("Task-scratch").Cells(x, 11 + 8 * (curTab)).Value & " - Assigned to: " & Worksheets("Task-scratch").Cells(x, 12 + 8 * (curTab)).Value & " - ACTIVE TASK"
    Else
        'when just a regular non-parent, non-child line
        Debug.Print "%" & CStr(x - 3)
        TemplateForm.TreeView1.Nodes.Add Key:="%" & CStr(x - 3), Text:=Worksheets("Task-scratch").Cells(x, 8 + 8 * (curTab)).Value & " - Status: " & Worksheets("Task-scratch").Cells(x, 11 + 8 * (curTab)).Value & " - Assigned to: " & Worksheets("Task-scratch").Cells(x, 12 + 8 * (curTab)).Value & " - ACTIVE TASK"
    End If
  End If
  x = x + 1
Loop Until Worksheets("Task-scratch").Cells(x, 8 + 8 * (curTab)).Value = ""
End If

x = 3
If Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value <> "" Then
Do
  If Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = 0 Then
    TemplateForm.TreeView1.Nodes.Add Key:="#" & CStr(x - 2), Text:=Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value & " - Scheduled for: " & Worksheets("Create Templates").Cells(x, 8 + 8 * (curTab)).Value & " - PENDING TASK"
    TemplateForm.TreeView1.Nodes("#" & CStr(x - 2)).Expanded = True
  End If
  If Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value > 0 Then
    TemplateForm.TreeView1.Nodes.Add "#" & CInt(Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value), tvwChild, "#" & CStr(x - 2), Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value & " - Scheduled for: " & Worksheets("Create Templates").Cells(x, 8 + 8 * (curTab)).Value & " - PENDING TASK"
  End If
  If Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value < 0 Then
    Debug.Print "%" & CStr(Abs(Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value))
    TemplateForm.TreeView1.Nodes.Add "%" & CStr(Abs(Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value)), tvwChild, "#" & CStr(x - 2), Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value & " - Scheduled for: " & Worksheets("Create Templates").Cells(x, 8 + 8 * (curTab)).Value & " - PENDING TASK"
    TemplateForm.TreeView1.Nodes("%" & CStr(Abs(Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value))).Expanded = True
  End If
  x = x + 1
Loop Until Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value = ""
End If

'retain checked values
x = 3
If Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value <> "" Then
Do
'  If Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value > -1 Then
      Debug.Print x
      TemplateForm.TreeView1.Nodes("#" & CStr(x - 2)).Checked = Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value
'  End If
  x = x + 1
Loop Until Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value = ""
End If
x = 4
If Worksheets("Task-scratch").Cells(x, 8 + 8 * (curTab)).Value <> "" Then
Do
'  If Worksheets("Task-scratch").Cells(x, 10 + 8 * (curTab)).Value > -1 Then
      'Debug.Print CStr(x - 3)
      TemplateForm.TreeView1.Nodes("%" & CStr(x - 3)).Checked = Worksheets("Task-scratch").Cells(x, 10 + 8 * (curTab)).Value
'  End If
  x = x + 1
Loop Until Worksheets("Task-scratch").Cells(x, 8 + 10 * (curTab)).Value = ""
End If


End If

'available tasks from the "Templates" tab
TemplateForm.ListView1.ListItems.Clear
x = 3
Do
  Set li = TemplateForm.ListView1.ListItems.Add(, , Worksheets("Templates").Cells(x, 2 + 8 * (index)).Value)
  x = x + 1
Loop Until Worksheets("Templates").Cells(x, 2 + 8 * (index)).Value = ""
'End If

End Sub


Attribute VB_Name = "ModuleTranslate"
Function okTranslate(s9 As String, x As Long) As String
    Dim s1 As String
    On Error GoTo done
    Debug.Print s9
    If InStr(s9, vbCrLf) > 0 Then
        Debug.Print "vbCrLf"
    End If
    If InStr(s9, vbCr) > 0 Then
        Debug.Print "vbCr"
    End If
    If InStr(s9, vbLf) > 0 Then
        Debug.Print "vbLf"
    End If
    
    
    If InStr(s9, vbLf) > 0 Then
        Do
            If s1 = "" Then
                Do
                    s1 = TranslateText(Mid(s9, 1, InStr(s9, vbLf) - 1), "English", Sheets("Proposal letter").Cells(x, 10).Value) & vbLf & vbLf
                Loop Until s1 <> ""
            Else
                Do
                    s1 = s1 & TranslateText(Mid(s9, 1, InStr(s9, vbLf) - 1), "English", Sheets("Proposal letter").Cells(x, 10).Value) & vbLf & vbLf
                Loop Until s1 <> ""
            End If
            s9 = Mid(s9, InStr(s9, vbLf) + 2)
        Loop Until InStr(s9, vbLf) < 1 Or Len(s9) < 1
    End If 'Else
        Do
            s1 = s1 & TranslateText(s9, "English", Sheets("Proposal letter").Cells(x, 10).Value) & vbLf
        Loop Until s1 <> ""
    'End If
done:
    Debug.Print s1
    okTranslate = s1
End Function
Sub okTranslateTest()
    Dim s9 As String, x As Long
    s9 = "Translate this for me"
    x = 3
    Do
        s9 = TranslateText(s9, "English", Sheets("Proposal letter").Cells(x, 10).Value) & vbCr
    Loop Until s9 <> ""
    'Debug.Print s9
    'MsgBox s9
    Sheets("Proposal letter").Cells(22, 1).Value = s9
'    okTranslate = s9
End Sub

Sub TranslateTextArray(ByRef strTextToConvert() As String, strInputLang As String, strOutputLang As String)
'    Dim returnVal() As String
    x = UBound(strTextToConvert) - LBound(strTextToConvert) + 1
'    ReDim returnVal(x)
    
    Dim lngLoop                 As Long
    Dim strInputLangId          As String
    Dim strOutputLangId         As String
    Dim strTempOutput           As String
    Dim varCleanData
    
    If x = 0 Then Exit Sub      'strTextToConvert = "" Then Exit Function
 
    ' Tools Reference Select Microsoft internet Control
    Dim IE() As InternetExplorer
    Dim x9() As HTMLBaseElement, doc() As HTMLDocument
    
    ReDim IE(x)
    ReDim x9(x)
    ReDim doc(x)
    
    'INPUT LANGUAGE
    If strInputLang = "" Then
        strInputLangId = "auto"
    Else
        strInputLangId = GetLanguageIds(strInputLang)
    End If
 
    'OUTPUT LANGUAGE
    strOutputLangId = GetLanguageIds(strOutputLang)
 
    If strOutputLangId = "" Or strInputLangId = "" Then
        'TranslateTextArray = strTextToConvert
        Exit Sub
    End If
    
    ProgressForm.Top = 0
    ProgressForm.Left = 0
    ProgressForm.Label1.Visible = False
    ProgressForm.Label3.Caption = "Starting Google translate"
    ProgressForm.Show
    
For y = 0 To x - 1
    Set IE(y) = New InternetExplorer 'CreateObject("InternetExplorer.application")

    'open website
    IE(y).Visible = False
    Debug.Print "http://translate.google.com/#" & strInputLangId & "/" & strOutputLangId & "/" & WorksheetFunction.EncodeURL("<1>" & strTextToConvert(y))
    IE(y).navigate "http://translate.google.com/#" & strInputLangId & "/" & strOutputLangId & "/" & WorksheetFunction.EncodeURL("<1>" & strTextToConvert(y))
Next y
 
For y = 0 To x - 1
ProgressForm.Label3.Caption = "Asking translation " & y + 1 & " of " & x
    Do
    DoEvents
    Loop Until IE(y).readyState = 4
    Sleep 50
    Do
    DoEvents
    Loop Until IE(y).readyState = 4
'    Set doc(y) = IE(y).Document
'    Set x9(y) = doc(y).getElementById("source")
'    x9(y).Value = strTextToConvert(y)
Next y

For y = 0 To x - 1
ProgressForm.Label3.Caption = "Fetching translation " & y + 1 & " of " & x
loadloop:
Debug.Print "y = " & y
Sleep 100
    Do
    DoEvents
    Loop Until IE(y).readyState = 4
    Sleep 50
    Do
    DoEvents
    Loop Until IE(y).readyState = 4
    Set doc(y) = IE(y).Document

    Set x9(y) = IE(y).Document.getElementById("gt-ovfl")
    Set x9(y) = x9(y).parentElement.parentElement.Children(1).Children(4).Children(0).Children(1).Children(0).Children(0)
    Debug.Print "x9 text = " & x9(y).outerText
    If Len(x9(y)) > 3 Then
        strTextToConvert(y) = Mid(x9(y).outerText, 4)
    Else
        strTextToConvert(y) = ""
    End If
    Debug.Print "return value = " & strTextToConvert(y)
'For Each li In doc(y).getElementsByTagName("div")
'    If InStr(li.outerText, "<1>") > 1 Then
'        Debug.Print "Translate item y = " & y + 1 & ": " & Mid(li.outerText, 4)
'        strTextToConvert(y) = Mid(li.outerText, 4)
'        GoTo Translated
'    End If
'Next li
'GoTo loadloop
'Translated:
  
'    strTextToConvert(y) = x9(y).outerText
'    strTextToConvert(y) = IE(y).Document.getElementById("result_box").outerText

'MsgBox (strInputLang & "->" & strOutputLang & " : " & TranslateText)
    IE(y).Quit
    Set IE(y) = Nothing
Next y
    ProgressForm.Label1.Visible = True
    ProgressForm.Hide

End Sub

Sub TranslateTextArray_20181207(ByRef strTextToConvert() As String, strInputLang As String, strOutputLang As String)
'    Dim returnVal() As String
    x = UBound(strTextToConvert) - LBound(strTextToConvert) + 1
'    ReDim returnVal(x)
    
    Dim lngLoop                 As Long
    Dim strInputLangId          As String
    Dim strOutputLangId         As String
    Dim strTempOutput           As String
    Dim varCleanData
    Dim query As String
    Dim li As Object, lu As Object
    
    If x = 0 Then Exit Sub      'strTextToConvert = "" Then Exit Function
 
    ' Tools Reference Select Microsoft internet Control
    Dim IE As InternetExplorer, IE1() As InternetExplorer
    Dim x9 As HTMLBaseElement, doc As HTMLDocument
    
    ReDim IE1(x)
    
    'INPUT LANGUAGE
    If strInputLang = "" Then
        strInputLangId = "auto"
    Else
        strInputLangId = GetLanguageIds(strInputLang)
    End If
 
    'OUTPUT LANGUAGE
    strOutputLangId = GetLanguageIds(strOutputLang)
 
    If strOutputLangId = "" Or strInputLangId = "" Then
        'TranslateTextArray = strTextToConvert
        Exit Sub
    End If
    
    ProgressForm.Top = 0
    ProgressForm.Left = 0
    ProgressForm.Label1.Visible = False
    ProgressForm.Label3.Caption = "Starting Google translate"
    ProgressForm.Show
    
    query = ""
For y = 0 To x - 1
    query = query & "<" & y + 1 & ">" & vbLf & strTextToConvert(y) & vbLf
    Set IE1(y) = New InternetExplorer
    IE1(y).Visible = True
    IE1(y).navigate "http://translate.google.com/#" & strInputLangId & "/" & strOutputLangId & "/" & WorksheetFunction.EncodeURL("<1>" & strTextToConvert(y))
Next y
    query = Mid(query, 1, Len(query) - 1)
    
    Set IE = New InternetExplorer 'CreateObject("InternetExplorer.application")

    'open website
    'IE.Visible = False
    'IE.Navigate2 s11
    'IE.navigate "http://translate.google.com/#" & strInputLangId & "/" & strOutputLangId & "/" & WorksheetFunction.EncodeURL(query)
 
    ProgressForm.Label3.Caption = "Asking translation " '& y + 1 & " of " & x
    Do
        DoEvents
    Loop Until IE.readyState = 4
    'IE.Visible = True
    Sleep 50
    Do
        DoEvents
    Loop Until IE.readyState = 4
    Set doc = IE.Document
    Set x9 = doc.getElementById("source")
    'IE.Visible = True
'debugloop:
    x9.Value = query
    'IE.Visible = True
    'doc.getElementById("gt-submit").Click
    Sleep 100

'For Each li In doc.getElementsByTagName("div")
'    Debug.Print li.outerText
'    If InStr(li.outerText, "Translate") > 1 And InStr(li.outerText, "Google Translate") < 1 Then
'        li.Click
'
'    End If
'Next li
    x9.Click
    'x9.onchange
    x9.FireEvent ("onchange")

ProgressForm.Label3.Caption = "Fetching translation " '& y + 1 & " of " & x
loadloop:
    x9.Select
    x9.Click
    'x9.FireEvent ("input")
    'x9.FireEvent ("selectionchange")
    'x9.FireEvent ("textInput")
    'x9.FireEvent ("touchstart")
    Sleep 100
    Do
    DoEvents
    Loop Until IE.readyState = 4
    Sleep 50
    Do
    DoEvents
    Loop Until IE.readyState = 4
Set doc = IE.Document
'GoTo debugloop
'Set x9 = IE.Document.getElementById("gt-ovfl")
'Debug.Print IE.LocationURL
'Set x9 = x9.parentElement.parentElement.Children(1).Children(4).Children(0).Children(1).Children(0).Children(0)
'Debug.Print x9.outerText

'varCleanData = Split(Application.WorksheetFunction.Substitute(x9.innerHTML, "</SPAN>", ""), "<")
'Debug.Print varCleanData
''varCleanData = Split(Application.WorksheetFunction.Substitute(IE.Document.getElementById("result_box").innerHTML, "</SPAN>", ""), "<")
'    strTempOutput = ""
''    Debug.Print varCleanData
'    For lngLoop = LBound(varCleanData) To UBound(varCleanData)
'        strTempOutput = strTempOutput & Right(varCleanData(lngLoop), Len(varCleanData(lngLoop)) - InStr(varCleanData(lngLoop), ">"))
'    Next lngLoop
''    strTextToConvert = strTempOutput
For Each li In doc.getElementsByTagName("div")
    If InStr(li.outerText, "<1>") > 1 Then
        Debug.Print li.outerText
        s10 = li.outerText
        GoTo Translated
    End If
Next li
GoTo loadloop
Translated:
For y = 0 To x - 1
    s10 = Mid(s10, InStr(s10, vbLf) + 1)
    Debug.Print "y = " & y
    Debug.Print s10
    strTextToConvert(y) = Mid(s10, 1, InStr(s10, "<" & y + 2 & ">") - 1)
    s10 = Mid(s10, InStr(s10, "<" & y + 2 & ">"))
Next y
'    strTextToConvert(y) = IE(y).Document.getElementById("result_box").outerText

'MsgBox (strInputLang & "->" & strOutputLang & " : " & TranslateText)
    IE.Quit
    Set IE = Nothing
'Next y
    ProgressForm.Label1.Visible = True
    ProgressForm.Hide

End Sub
Sub TranslateTextArray_12062018(ByRef strTextToConvert() As String, strInputLang As String, strOutputLang As String)
'    Dim returnVal() As String
    x = UBound(strTextToConvert) - LBound(strTextToConvert) + 1
'    ReDim returnVal(x)
    
    Dim lngLoop                 As Long
    Dim strInputLangId          As String
    Dim strOutputLangId         As String
    Dim strTempOutput           As String
    Dim varCleanData
    
    If x = 0 Then Exit Sub      'strTextToConvert = "" Then Exit Function
 
    ' Tools Reference Select Microsoft internet Control
    Dim IE() As InternetExplorer
    Dim x9() As HTMLBaseElement, doc() As HTMLDocument
    
    ReDim IE(x)
    ReDim x9(x)
    ReDim doc(x)
    
    'INPUT LANGUAGE
    If strInputLang = "" Then
        strInputLangId = "auto"
    Else
        strInputLangId = GetLanguageIds(strInputLang)
    End If
 
    'OUTPUT LANGUAGE
    strOutputLangId = GetLanguageIds(strOutputLang)
 
    If strOutputLangId = "" Or strInputLangId = "" Then
        'TranslateTextArray = strTextToConvert
        Exit Sub
    End If
    
    ProgressForm.Top = 0
    ProgressForm.Left = 0
    ProgressForm.Label1.Visible = False
    ProgressForm.Label3.Caption = "Starting Google translate"
    ProgressForm.Show
    
For y = 0 To x - 1
    Set IE(y) = New InternetExplorer 'CreateObject("InternetExplorer.application")

    'open website
    'IE(y).Visible = False
    IE(y).navigate "http://translate.google.com/#" & strInputLangId & "/" & strOutputLangId & "/" & strTextToConvert(y)
Next y
 
For y = 0 To x - 1
ProgressForm.Label3.Caption = "Asking translation " & y + 1 & " of " & x
    Do
    DoEvents
    Loop Until IE(y).readyState = 4
    Sleep 50
    Do
    DoEvents
    Loop Until IE(y).readyState = 4
    Set doc(y) = IE(y).Document
    Set x9(y) = doc(y).getElementById("source")
    'IE(y).Visible = True
    x9(y).Value = strTextToConvert(y)
    'IE(y).Visible = True
    'doc(y).getElementById("gt-submit").Click
Next y

For y = 0 To x - 1
ProgressForm.Label3.Caption = "Fetching translation " & y + 1 & " of " & x
    Sleep 100
    Do
    DoEvents
    Loop Until IE(y).readyState = 4
    Sleep 50
    Do
    DoEvents
    Loop Until IE(y).readyState = 4
'    MsgBox IE(y).Document.getElementById("result_box").outerText
'    MsgBox IE(y).Document.getElementById("result_box").innerText
'    MsgBox IE(y).Document.getElementById("result_box").Value
    
'Sheets("Proposal letter").Cells(22, 1).Value = IE(y).Document.getElementById("result_box").outerText
 '/html/body/div[2]/div[1]/div[2]/div[1]/div[1]/div[2]/div[2]/div[1]/div[2]/div/span[1]
 '/html/body/div[2]/div[1]/div[2]/div[1]/div[1]/div[2]/div[2]/div[1]/div[2]/div/span[1]
Set doc(y) = IE(y).Document
'Debug.Print IE(y).LocationURL
Set x9(y) = IE(y).Document.getElementById("gt-ovfl")
Debug.Print IE(y).LocationURL
Set x9(y) = x9(y).parentElement.parentElement.Children(1).Children(4).Children(0).Children(1).Children(0).Children(0)
'Debug.Print x9(y).innerText
'Debug.Print x9(y).innerHTML

'Debug.Print IE(y).LocationURL
Debug.Print x9(y).outerText
'varCleanData = Split(Application.WorksheetFunction.Substitute(x9(y).innerHTML, "</SPAN>", ""), "<")
'Debug.Print varCleanData
''varCleanData = Split(Application.WorksheetFunction.Substitute(IE(y).Document.getElementById("result_box").innerHTML, "</SPAN>", ""), "<")
'    strTempOutput = ""
''    Debug.Print varCleanData
'    For lngLoop = LBound(varCleanData) To UBound(varCleanData)
'        strTempOutput = strTempOutput & Right(varCleanData(lngLoop), Len(varCleanData(lngLoop)) - InStr(varCleanData(lngLoop), ">"))
'    Next lngLoop
''    strTextToConvert(y) = strTempOutput
    
    strTextToConvert(y) = x9(y).outerText
'    strTextToConvert(y) = IE(y).Document.getElementById("result_box").outerText

'MsgBox (strInputLang & "->" & strOutputLang & " : " & TranslateText)
    IE(y).Quit
    Set IE(y) = Nothing
Next y
    ProgressForm.Label1.Visible = True
    ProgressForm.Hide

End Sub

Sub Translate()

    Dim SaveDriveDir As String, mypath As String
    Dim fName As Variant
    Dim lngLastRow As Long
    Dim r As Range
    Dim rng As Range
    Dim firstColor As Long
    Dim secondColor As Long
    Dim n As Long
    Dim l As Long, x As Long, y As Long, z As Long
    
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    If Worksheets("languages").Cells(1, 4) = 2 Then
        SaveDriveDir = CurDir
    Else
        SaveDriveDir = "C:\Users\" & Environ$("Username") & "\Desktop\"
    End If
    
    mypath = Application.DefaultFilePath    'or use "C:\Data"
    ChDrive mypath
    ChDir mypath
    fName = Application.GetOpenFilename(filefilter:="PowerPoint Presentation, *.ppt*")

    If fName = False Then
        GoTo Cancelled
    End If
    
    Dim objPPT As Object
    'Dim ppPres As Presentation
    
    Set objPPT = CreateObject("PowerPoint.Application")
'    objPPT.Visible = False

'Change the directory path and file name to the location
'of your document

    Set ppPres = objPPT.Presentations.Open(fName)
     Dim textShapes() As Shape, i As Long
 'Dim sld As Slide
    'Dim shp As PowerPoint.Shape
    'Dim thisShape As PowerPoint.Shape
    Dim sr As Series
    Dim chrt As Chart
    
    ReDim textShapes(0 To 2)

    i = 0

'MsgBox (Worksheets("languages").Cells(Worksheets("languages").Cells(1, 1).Value, 2).Value)


    For Each sld In ppPres.Slides
    For Each thisShape In sld.Shapes
        If thisShape.HasTextFrame Then
            If thisShape.TextFrame.HasText Then
               thisShape.TextFrame.TextRange = TranslateText(thisShape.TextFrame.TextRange, Worksheets("languages").Cells(Worksheets("languages").Cells(1, 1).Value, 2).Value, Worksheets("languages").Cells(Worksheets("languages").Cells(2, 1).Value, 2).Value) ' & " (" & thisShape.TextFrame.TextRange & ")"
               'Set textShapes(i) = thisShape
               'i = i + 1
               'ReDim Preserve textShapes(0 To i) As Shape
            End If
         End If
    Next thisShape
    Next sld
    
'MsgBox (FName)
Dim fName2 As String
Dim zz As Long

zz = 1
fName2 = fName
Do
If Mid(fName, zz, 1) = "\" Then
    fName2 = Mid(fName, zz + 1, Len(fName) - zz)
End If
zz = zz + 1
Loop Until zz = Len(fName)

'MsgBox (SaveDriveDir & "Translated-" & FName2)
    
If Dir(SaveDriveDir & "Translated-" & fName2) <> "" Then
    Kill SaveDriveDir & "Translated-" & fName2
End If

ppPres.SaveAs (SaveDriveDir & "Translated-" & fName2)
ppPres.Close

'objPPT.Quit

Cancelled:
End Sub
Sub trial2()
MsgBox TranslateText("hello world. This is only a drill.", "English", "Portuguese")
End Sub
'below functions courtesy of http://excelexperts.com/vba-language-convertor

Function TranslateText(strTextToConvert As String, strInputLang As _
 String, strOutputLang As String)
 
    Dim lngLoop                 As Long
    Dim strInputLangId          As String
    Dim strOutputLangId         As String
    Dim strTempOutput           As String
    Dim varCleanData
    If strTextToConvert = "" Then Exit Function
 
    ' Tools Reference Select Microsoft internet Control
    Dim objInternetExplorer     As Object
    Set objInternetExplorer = CreateObject("InternetExplorer.application")
'Dim objInternetExplorer As InternetExplorer
'Set objInternetExplorer = New InternetExplorerMedium

    'INPUT LANGUAGE
    If strInputLang = "" Then
        strInputLangId = "auto"
    Else
        strInputLangId = GetLanguageIds(strInputLang)
    End If
 
    'OUTPUT LANGUAGE
    strOutputLangId = GetLanguageIds(strOutputLang)
 
    If strOutputLangId = "" Or strInputLangId = "" Then
        TranslateText = strTextToConvert
        Exit Function
    End If

    
    'open website
    objInternetExplorer.Visible = False
    objInternetExplorer.navigate "http://translate.google.com/#" & strInputLangId & "/" & strOutputLangId & "/" & WorksheetFunction.EncodeURL("<1>" & strTextToConvert)
Sleep 100
Do
DoEvents
Loop Until objInternetExplorer.readyState = 4
 Sleep 50
Do
DoEvents
Loop Until objInternetExplorer.readyState = 4
 
Dim x9 As HTMLBaseElement, doc As HTMLDocument
Set doc = objInternetExplorer.Document

'Set x9 = doc.getElementById("source")
'x9.Value = strTextToConvert
'doc.getElementById("gt-submit").Click
'Sleep 100
'Do
'DoEvents
'Loop Until objInternetExplorer.readyState = 4
' Sleep 50
'Do
'DoEvents
'Loop Until objInternetExplorer.readyState = 4
Set x9 = objInternetExplorer.Document.getElementById("gt-ovfl")
objInternetExplorer.Visible = False
Set x9 = x9.parentElement.parentElement.Children(1).Children(4).Children(0).Children(1).Children(0).Children(0)
Debug.Print "x9 text = " & x9.outerText
If Len(x9) > 3 Then
    TranslateText = Mid(x9.outerText, 4)
Else
    TranslateText = ""
End If


'Sheets("Proposal letter").Cells(22, 1).Value = objInternetExplorer.Document.getElementById("result_box").outerText
'    varCleanData = Split(Application.WorksheetFunction.Substitute(objInternetExplorer.Document.getElementById("result_box").innerHTML, "</SPAN>", ""), "<")
'
'    For lngLoop = LBound(varCleanData) To UBound(varCleanData)
'        strTempOutput = strTempOutput & Right(varCleanData(lngLoop), Len(varCleanData(lngLoop)) - InStr(varCleanData(lngLoop), ">"))
'    Next lngLoop
'
'    TranslateText = strTempOutput

'MsgBox (strInputLang & "->" & strOutputLang & " : " & TranslateText)
    objInternetExplorer.Quit
    Set objInternetExplorer = Nothing
 
End Function
 
Function GetLanguageIds(strLang As String) As String
 
    Dim strLangIds      As String
    Dim arrLangIds      As Variant
    Dim strId           As String
    Dim intLoop         As Integer
 
    'This is hard coded------
    strLangIds = "Afrikaans - af,Albanian - sq,Arabic - ar,Armenian - hy,Azerbaijani - az,Basque - eu,Belarusian - be,Bengali - bn,Bulgarian - bg,Catalan - ca,Chinese (Simplified) - zh-CN,Chinese (Traditional) - zh-TW,Croatian - hr,Czech - cs,Danish - da,Dutch - nl,English - en,Esperanto - eo,Estonian - et,Filipino - tl,Finnish - fi,French - fr,Galician - gl,Georgian - ka,German - de,Greek - el,Gujarati - gu,Haitian Creole - ht,Hebrew - iw,Hindi - hi,Hungarian - hu,Icelandic - is,Indonesian - id,Irish - ga,Italian - it,Japanese - ja,Kannada - kn,Korean - ko,Latin - la,Latvian - lv,Lithuanian - lt,Macedonian - mk,Malay - ms,Maltese - mt,Norwegian - no,Persian - fa,Polish - pl,Portuguese - pt,Romanian - ro,Russian - ru,Serbian - sr,Slovak - sk,Slovenian - sl,Spanish - es,Swahili - sw,Swedish - sv,Tamil - ta,Telugu - te,Thai - th,Turkish - tr,Ukrainian - uk,Urdu - ur,Vietnamese - vi,Welsh - cy,Yiddish - yi"
    '========================
    arrLangIds = Split(strLangIds, ",")
     For intLoop = LBound(arrLangIds) To UBound(arrLangIds)
        If Split(arrLangIds(intLoop), " - ")(0) = strLang Then
            strId = Split(arrLangIds(intLoop), " - ")(1)
            Exit For
        End If
    Next intLoop
    
    GetLanguageIds = strId
    'Debug.Print strId
    Erase arrLangIds
 
End Function

Attribute VB_Name = "ModuleUpdateCode"
Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" (ByVal pCaller As LongPtr, ByVal szURL As String, ByVal szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As LongPtr) As LongPtr

Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
Public Function DownloadFile(URL As String, LocalFilename As String) As Boolean
Dim lngRetVal As Long
lngRetVal = URLDownloadToFile(0, URL, LocalFilename, 0, 0)
If lngRetVal = 0 Then
    If Dir(LocalFilename) <> vbNullString Then
        DownloadFile = True
    End If
End If
End Function

Function getDirectory() As String

Dim temp As String

temp = Application.ActiveWorkbook.Path & "\"
If Mid(temp, 1, 2) = "C:" Then
    getDirectory = temp
Else
    getDirectory = "C:\Users\" & Environ("username") & "\Desktop\" ' returns desktop if file is not on C: drive
End If

End Function


Sub updateMacros()

Dim doc As HTMLDocument
Dim totalDocuments As Long, x As Long, y As Long, yy As Long, z As Long, page As Long, s1 As String, s2 As String
Dim IE As InternetExplorer
Dim sh
Dim eachIE
Dim pwebAdddress As String, updateItems As String
Dim x9 As HTMLBaseElement
Dim d1 As Date, d2 As Date
pWebAddress = "https://ul.sharepoint.com/sites/CI/PS-CET/DeploymentReadiness/PilotUsersSite/FlexPitStopDocs/Forms/AllItems.aspx?RootFolder=%2Fsites%2FCI%2FPS-CET%2FDeploymentReadiness%2FPilotUsersSite%2FFlexPitStopDocs%2FAHL%20Flex%20Docs%2FNA%20modules&FolderCTID=0x0120009AAB26E56C08C44F968C2BCAAA7C66C7&View=%7B594DB2BD-5C45-4E50-A92C-B24C18E2201D%7D"

StatusForm.Top = Application.Top
StatusForm.Left = Application.Left
StatusForm.Label1.Caption = "Loading pitstop site..."
StatusForm.Show

Set IE = New InternetExplorer
IE.Left = 0
IE.Top = 0
IE.Height = 0
IE.Width = 0
IE.navigate pWebAddress
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing
Do
    Sleep 50
Loop Until IE.readyState = READYSTATE_COMPLETE
Sleep 50
Do
    Sleep 50
Loop Until IE.readyState = READYSTATE_COMPLETE
Set doc = IE.Document
login:
If doc.getElementById("onetidDoclibViewTbl0") Is Nothing Then
    MsgBox "Log into VPN"
    Sleep 200
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If

updateItems = ""
x = 0
If Worksheets("auto update").Cells(x + 2, 1).Value <> "" Then
 Do
    StatusForm.Label1.Caption = Worksheets("auto update").Cells(x + 2, 1).Value & " - checking"
    If Worksheets("auto update").Cells(x + 2, 2).Value = "frm" And Worksheets("auto update").Cells(x + 3, 2).Value <> "frx" Then
        MsgBox "frx file not identified for " & Worksheets("auto update").Cells(x + 2, 1).Value & ".frm   - correct before retrying"
        Exit Sub
    End If
    If Worksheets("auto update").Cells(x + 2, 2).Value = "frx" Then
        GoTo frx
    End If
    For y = 0 To doc.getElementById("onetidDoclibViewTbl0").Children(3).Children.Length - 1
        'Debug.Print "y = " & y + 1 & " of " & doc.getElementById("onetidDoclibViewTbl0").Children(3).Children.Length & " - Checking " & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value & " against " & doc.getElementById("onetidDoclibViewTbl0").Children(3).Children(y).Children(2).Children(0).innerText
        If doc.getElementById("onetidDoclibViewTbl0").Children(3).Children(y).Children(2).Children(0).innerText = Worksheets("auto update").Cells(x + 2, 1).Value Then
            Debug.Print "potential file path: " & getDirectory() & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value
            Set x9 = doc.getElementById("onetidDoclibViewTbl0").Children(3).Children(y).Children(5)
            s1 = Mid(x9.innerHTML, 14, 19)
            Debug.Print s1
            d1 = Replace(s1, Chr(34), "")
            d2 = Worksheets("auto update").Cells(x + 2, 4).Value
            Debug.Print "Potential time: " & Format(d1, "mm/dd/yyyy") & " " & Format(d1, "Medium Time")
            If d1 > d2 Then
                StatusForm.Label1.Caption = Worksheets("auto update").Cells(x + 2, 1).Value & " - updating"
                updateItems = Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value & vbLf & updateItems
                Debug.Print "Updating VBA: " & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value
                'remove modules if currently present
                If Dir(getDirectory() & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value) <> "" Then
                    Kill getDirectory() & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value
                End If
                'download additional file needed for userforms
                If Worksheets("auto update").Cells(x + 2, 2).Value = "frm" Then
                    Call DownloadFile(Worksheets("auto update").Cells(x + 3, 3).Value, getDirectory() & Worksheets("auto update").Cells(x + 3, 1).Value & "." & Worksheets("auto update").Cells(x + 3, 2).Value)
                End If
                Call DownloadFile(Worksheets("auto update").Cells(x + 2, 3).Value, getDirectory() & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value)
                
                
                'check for module presence before removing
                For z = 1 To Application.VBE.ActiveVBProject.VBComponents.Count
                    If Application.VBE.ActiveVBProject.VBComponents.Item(z).Name = Worksheets("auto update").Cells(x + 2, 1).Value Then
                        Application.VBE.ActiveVBProject.VBComponents.Remove Application.VBE.ActiveVBProject.VBComponents(Worksheets("auto update").Cells(x + 2, 1).Value)
                        Exit For
                    End If
                Next z
'                Application.VBE.ActiveVBProject.VBComponents.Remove Application.VBE.ActiveVBProject.VBComponents(Worksheets("auto update").Cells(x + 2, 1).Value)
                
                
                Sleep 50
                Application.VBE.ActiveVBProject.VBComponents.Import getDirectory() & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value
                'update time stamp
                Worksheets("auto update").Cells(x + 2, 4).Value = Format(d1, "mm/dd/yyyy") & " " & Format(d1, "Medium Time")
                'clean downloaded files
                Kill getDirectory() & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value
                If Worksheets("auto update").Cells(x + 2, 2).Value = "frm" Then
                    Kill getDirectory() & Worksheets("auto update").Cells(x + 3, 1).Value & "." & Worksheets("auto update").Cells(x + 3, 2).Value
                    Worksheets("auto update").Cells(x + 3, 4).Value = Format(d1, "mm/dd/yyyy") & " " & Format(d1, "Medium Time")
                End If
            Else
                Debug.Print "No need to update VBA: " & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value
            End If
        End If
    Next y
frx:
    x = x + 1
 Loop Until Worksheets("auto update").Cells(x + 2, 1).Value = ""
    StatusForm.Hide
End If

If updateItems <> "" Then
    MsgBox "Updated the following modules: " & vbLf & updateItems
Else
    MsgBox "No updates made"
End If

Set doc = Nothing
IE.Quit
Set IE = Nothing

End Sub



Sub updateMacrosFromDrive()

Dim doc As HTMLDocument
Dim totalDocuments As Long, x As Long, y As Long, yy As Long, z As Long, page As Long, s1 As String, s2 As String
Dim IE As InternetExplorer
Dim sh
Dim eachIE
Dim pwebAdddress As String, updateItems As String
Dim x9 As HTMLBaseElement
Dim d1 As Date, d2 As Date
pWebAddress = "https://ul.sharepoint.com/sites/CI/PS-CET/DeploymentReadiness/PilotUsersSite/FlexPitStopDocs/Forms/AllItems.aspx?RootFolder=%2Fsites%2FCI%2FPS-CET%2FDeploymentReadiness%2FPilotUsersSite%2FFlexPitStopDocs%2FAHL%20Flex%20Docs%2FNA%20modules&FolderCTID=0x0120009AAB26E56C08C44F968C2BCAAA7C66C7&View=%7B594DB2BD-5C45-4E50-A92C-B24C18E2201D%7D"

StatusForm.Top = Application.Top
StatusForm.Left = Application.Left
StatusForm.Label1.Caption = "Loading pitstop site..."
StatusForm.Show


updateItems = ""
x = 0
If Worksheets("auto update").Cells(x + 2, 1).Value <> "" Then
 Do
    StatusForm.Label1.Caption = Worksheets("auto update").Cells(x + 2, 1).Value & " - checking"
    If Worksheets("auto update").Cells(x + 2, 2).Value = "frm" And Worksheets("auto update").Cells(x + 3, 2).Value <> "frx" Then
        MsgBox "frx file not identified for " & Worksheets("auto update").Cells(x + 2, 1).Value & ".frm   - correct before retrying"
        Exit Sub
    End If
    If Worksheets("auto update").Cells(x + 2, 2).Value = "frx" Then
        GoTo frx
    End If
'    For y = 0 To doc.getElementById("onetidDoclibViewTbl0").Children(3).Children.Length - 1
'        'Debug.Print "y = " & y + 1 & " of " & doc.getElementById("onetidDoclibViewTbl0").Children(3).Children.Length & " - Checking " & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value & " against " & doc.getElementById("onetidDoclibViewTbl0").Children(3).Children(y).Children(2).Children(0).innerText
'        If doc.getElementById("onetidDoclibViewTbl0").Children(3).Children(y).Children(2).Children(0).innerText = Worksheets("auto update").Cells(x + 2, 1).Value Then
'            Debug.Print "potential file path: " & getDirectory() & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value
'            Set x9 = doc.getElementById("onetidDoclibViewTbl0").Children(3).Children(y).Children(5)
'            s1 = Mid(x9.innerHTML, 14, 19)
'            Debug.Print s1
'            d1 = Replace(s1, Chr(34), "")
'            d2 = Worksheets("auto update").Cells(x + 2, 4).Value
'            Debug.Print "Potential time: " & Format(d1, "mm/dd/yyyy") & " " & Format(d1, "Medium Time")
'            If d1 > d2 Then
                StatusForm.Label1.Caption = Worksheets("auto update").Cells(x + 2, 1).Value & " - updating"
                updateItems = Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value & vbLf & updateItems
                Debug.Print "Updating VBA: " & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value
'                'remove modules if currently present
'                If Dir(getDirectory() & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value) <> "" Then
'                    Kill getDirectory() & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value
'                End If
'                'download additional file needed for userforms
'                If Worksheets("auto update").Cells(x + 2, 2).Value = "frm" Then
'                    Call DownloadFile(Worksheets("auto update").Cells(x + 3, 3).Value, getDirectory() & Worksheets("auto update").Cells(x + 3, 1).Value & "." & Worksheets("auto update").Cells(x + 3, 2).Value)
'                End If
'                Call DownloadFile(Worksheets("auto update").Cells(x + 2, 3).Value, getDirectory() & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value)
                
                'check for module presence before removing
                For z = 1 To Application.VBE.ActiveVBProject.VBComponents.Count
                    If Application.VBE.ActiveVBProject.VBComponents.Item(z).Name = Worksheets("auto update").Cells(x + 2, 1).Value Then
                        Application.VBE.ActiveVBProject.VBComponents.Remove Application.VBE.ActiveVBProject.VBComponents(Worksheets("auto update").Cells(x + 2, 1).Value)
                        Exit For
                    End If
                Next z
'                Application.VBE.ActiveVBProject.VBComponents.Remove Application.VBE.ActiveVBProject.VBComponents(Worksheets("auto update").Cells(x + 2, 1).Value)
                
                Sleep 50
                Application.VBE.ActiveVBProject.VBComponents.Import "C:\Users\09049\Documents\modules\update modules\" & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value
'                'update time stamp
'                Worksheets("auto update").Cells(x + 2, 4).Value = Format(d1, "mm/dd/yyyy") & " " & Format(d1, "Medium Time")
'                'clean downloaded files
'                Kill getDirectory() & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value
'                If Worksheets("auto update").Cells(x + 2, 2).Value = "frm" Then
'                    Kill getDirectory() & Worksheets("auto update").Cells(x + 3, 1).Value & "." & Worksheets("auto update").Cells(x + 3, 2).Value
'                    Worksheets("auto update").Cells(x + 3, 4).Value = Format(d1, "mm/dd/yyyy") & " " & Format(d1, "Medium Time")
'                End If
'            Else
'                Debug.Print "No need to update VBA: " & Worksheets("auto update").Cells(x + 2, 1).Value & "." & Worksheets("auto update").Cells(x + 2, 2).Value
'            End If
'        End If
'    Next y
frx:
    x = x + 1
 Loop Until Worksheets("auto update").Cells(x + 2, 1).Value = ""
    StatusForm.Hide
End If

If updateItems <> "" Then
    MsgBox "Updated the following modules: " & vbLf & updateItems
Else
    MsgBox "No updates made"
End If

'Set doc = Nothing
'IE.Quit
'Set IE = Nothing

End Sub

'Sub exportModules()
'Call DownloadFile(Worksheets("auto update").Cells(3, 3).Value, getDirectory() & Worksheets("auto update").Cells(3, 1).Value & "." & Worksheets("auto update").Cells(3, 2).Value)
'
'End Sub
Attribute VB_Name = "MultipleLineForm"
Attribute VB_Base = "0{9C9690A0-1CEC-427F-B857-5BBA93636B97}{5FD33AAE-CB6F-4FB9-B231-A95B4832E16C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False










Private Sub CommandButton1_Click()
MultipleLineForm.Hide
Call quote2NA
End Sub

Private Sub Label6_Click()

End Sub

Attribute VB_Name = "OkCancelForm"
Attribute VB_Base = "0{BB4C3887-4EF7-43BE-8ADE-0B9F272D504B}{ADB09158-F05F-4769-89DE-3874F202C8F1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
OkCancelForm.Hide
End Sub

Private Sub CommandButton2_Click()
OkCancelForm.Label2.Caption = "x"
OkCancelForm.Hide
Call updateMacros
End Sub
Attribute VB_Name = "ProceedForm"
Attribute VB_Base = "0{536478A4-26BA-4A06-946F-8F530FD77A4E}{B6AFFEE9-0808-42F9-975A-6FF6B3D88397}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
ProceedForm.Hide
End Sub
Attribute VB_Name = "ProgressForm"
Attribute VB_Base = "0{80BA0C32-C6C1-463F-A4F5-2FBBEC5B83D2}{732307F1-CE57-4EBB-A17C-F3AE9F741AB7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Attribute VB_Name = "QuoteDBLookupForm"
Attribute VB_Base = "0{38659A53-A46C-4E53-A14A-6FAC2CDB73F2}{F0F3123D-3C1E-4571-A0E2-01A8778218EA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False








Private Sub ComboBox1_Change()
'Worksheets("Scratch").Cells(2, 21).Value = ComboBox1.ListIndex
End Sub

Private Sub ComboBox2_Change()
Worksheets("Scratch").Cells(2, 24).Value = ComboBox2.ListIndex

Dim nCol As Long, selCount As Long
Dim toolIndex As Long
If QuoteDBLookupForm.ComboBox2.ListIndex > -1 Then
    nCol = 22 + QuoteDBLookupForm.ComboBox2.ListIndex
Else
    nCol = 22
End If


'find way to auto assign toolIndex
If InStr(Worksheets(4).Name, "Lighting") > 0 Then
    toolIndex = 0
End If
If InStr(Worksheets(4).Name, "Specialty Appliance") > 0 Then
    toolIndex = 0
End If
If InStr(Worksheets(4).Name, "Controls") > 0 Then
    toolIndex = 1
End If
If InStr(Worksheets(4).Name, "Major Appliance") > 0 Then
    toolIndex = 2
End If
If InStr(Worksheets(4).Name, "HVAC") > 0 Then
    toolIndex = 3
End If



QuoteDBLookupForm.ComboBox1.Clear
QuoteDBLookupForm.ComboBox3.Clear
QuoteDBLookupForm.ComboBox4.Clear

'new region selection box
QuoteDBLookupForm.ComboBox5.Clear
If QuoteDBLookupForm.ComboBox2.ListIndex > -1 Then
    x = 3
    Do
        QuoteDBLookupForm.ComboBox5.AddItem Worksheets("DB Scratch").Cells(x, QuoteDBLookupForm.ComboBox2.ListIndex + 1).Value
        x = x + 1
    Loop Until Worksheets("DB Scratch").Cells(x, QuoteDBLookupForm.ComboBox2.ListIndex + 1).Value = ""
    QuoteDBLookupForm.ComboBox5.ListIndex = 0
End If



Dim list4index(10) As Long
For x = 2 To 11
    'Debug.Print x
    'Debug.Print Worksheets("Scratch").Cells(x, nCol).Value
    'Debug.Print 22 + QuoteDBLookupForm.ComboBox2.ListIndex
    list4index(x - 2) = Worksheets("Scratch").Cells(x, nCol).Value
Next x
QuoteDBLookupForm.ListBox4.Clear


'Debug.Print QuoteDBLookupForm.ComboBox2.ListIndex
''old method to populate search parameter boxes and display selections. Used for Order DB
If QuoteDBLookupForm.ComboBox2.ListIndex = 1 Then
    QuoteDBLookupForm.CommandButton2.Visible = False
    x = 2
    Do
        QuoteDBLookupForm.ComboBox1.AddItem Worksheets("Scratch").Cells(x, 20 + ComboBox2.ListIndex).Value
        QuoteDBLookupForm.ComboBox3.AddItem Worksheets("Scratch").Cells(x, 20 + ComboBox2.ListIndex).Value
        QuoteDBLookupForm.ComboBox4.AddItem Worksheets("Scratch").Cells(x, 20 + ComboBox2.ListIndex).Value
        QuoteDBLookupForm.ListBox4.AddItem Worksheets("Scratch").Cells(x, 20 + ComboBox2.ListIndex).Value
        x = x + 1
    Loop Until Worksheets("Scratch").Cells(x, 20 + ComboBox2.ListIndex).Value = ""
End If

Debug.Print "toolIndex + 11 = " & toolIndex + 11
'new method for search parameter items. Used for Quote DB
If QuoteDBLookupForm.ComboBox2.ListIndex = 0 Then
    'QuoteDBLookupForm.CommandButton2.Visible = True
    x = 3
    Do
        QuoteDBLookupForm.ComboBox1.AddItem Worksheets("DB Scratch").Cells(x, toolIndex + 11).Value
        QuoteDBLookupForm.ComboBox3.AddItem Worksheets("DB Scratch").Cells(x, toolIndex + 11).Value
        QuoteDBLookupForm.ComboBox4.AddItem Worksheets("DB Scratch").Cells(x, toolIndex + 11).Value
        x = x + 1
    Loop Until Worksheets("DB Scratch").Cells(x, toolIndex + 11).Value = ""
    'new method for display selection items
    x = 3
    Do
        QuoteDBLookupForm.ListBox4.AddItem Worksheets("DB Scratch").Cells(x, toolIndex + 12).Value
        x = x + 1
    Loop Until Worksheets("DB Scratch").Cells(x, toolIndex + 12).Value = ""
End If



'If ComboBox2.ListIndex = 0 Then 'search by quote tool DB
'    CommandButton2.Caption = ""
'Else
'    CommandButton2.Caption = "Import Selected Results"
'End If
'If ComboBox2.ListIndex = 1 Then 'search by previous order DB
'    CommandButton2.Caption = "Export Selected Items"
'End If

'load previous item selections

x = 2
If Worksheets("Scratch").Cells(x, nCol).Value <> "" And list4index(x - 2) > 0 And QuoteDBLookupForm.ComboBox2.ListIndex > -1 Then
    Do
        Debug.Print list4index(x - 2) - 1
        Debug.Print QuoteDBLookupForm.ListBox4.ListCount
        If list4index(x - 2) - 1 <= QuoteDBLookupForm.ListBox4.ListCount Then
            QuoteDBLookupForm.ListBox4.Selected(list4index(x - 2) - 1) = True
        End If
        x = x + 1
    Loop Until list4index(x - 2) = 0 Or list4index(x - 2) = Null Or x = 12
End If


End Sub

Private Sub CommandButton1_Click()
Call Select10boxUpdate
Call ImportQuote
End Sub

Private Sub CommandButton2_Click()
Call ImportQuoteLoad
End Sub

Private Sub Label6_Click()

End Sub

Private Sub CommandButton3_Click()
If QuoteDBLookupForm.ListBox1.ListCount < 2 Then
    Exit Sub
End If
For x = 1 To QuoteDBLookupForm.ListBox1.ListCount - 1
    QuoteDBLookupForm.ListBox1.Selected(x) = True
Next x

End Sub

Private Sub CommandButton4_Click()
Call Select10boxUpdate
Call updateQuoteDBForm
End Sub

Private Sub CommandButton5_Click()
Call exportDBResults
End Sub

Private Sub ListBox1_Change()
  If QuoteDBLookupForm.ListBox1.Selected(0) Then
   QuoteDBLookupForm.ListBox1.Selected(0) = False
  End If
End Sub

Private Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Call ImportQuoteLoad
End Sub

'Private Sub ListBox4_Change()
'Dim nCol As Long, selCount As Long
''load previous item selections
'If QuoteDBLookupForm.ComboBox2.ListIndex < 0 Then
'    Exit Sub
'End If
'
'nCol = 22 + QuoteDBLookupForm.ComboBox2.ListIndex
'Range(Worksheets("Scratch").Cells(2, nCol), Worksheets("Scratch").Cells(2, nCol).End(xlDown)).Value = ""
'
'selCount = 0
'If ListBox4.ListCount > 0 Then
'    For x = 1 To ListBox4.ListCount
'        If selCount >= 10 Then
'            Exit For 'ListBox4.Selected(x - 1) = False
'        End If
'        Debug.Print selCount
'        If ListBox4.Selected(x - 1) = True And selCount < 10 Then
'            Worksheets("Scratch").Cells(selCount + 2, nCol).Value = x
'            selCount = selCount + 1
'        End If
'    Next x
'End If
'End Sub

Private Sub ListBox4_Click()

'Dim nCol As Long, selCount As Long
''load previous item selections
'nCol = 22 + QuoteDBLookupForm.ComboBox2.ListIndex
'selCount = 0
'If ListBox4.ListCount > 0 Then
'    For x = 1 To ListBox4.ListCount
'        If selCount = 10 Then
'            ListBox4.List(x).Selected = False
'        End If
'        If ListBox4.List(x).Selected = True Then
'            Worksheets("Scratch").Cells(selCount + 2, nCol).Value = x
'            selCount = selCount + 1
'        End If
'    Next x
'End If

End Sub

Attribute VB_Name = "ResponseForm"
Attribute VB_Base = "0{37D70570-8EF5-4363-A03A-D3320B730CD3}{F640A069-0AAA-4A0B-89F2-D07D39C6182B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False








Private Sub CommandButton1_Click()
ResponseForm.Hide
End Sub

Private Sub CommandButton2_Click()

Dim s1 As String, s2 As String

'If TemplateForm.Visible = False Then
s1 = ResponseForm.TextBox1.Text
If InStr(s1, "Project") < 1 Then
    MsgBox ("Valid Flex URL required")
    GoTo NoEntry
End If
Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value = s1
'If InStr(s1, "Task") > 0 Then
'    s2 = Mid(s1, InStr(s1, "Project") + 8, Len(s1) - (InStr(s1, "Project") + 8) + 1)
'    Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = Mid(s2, 1, InStr(s2, "/") - 1)
'Else
'    s2 = Mid(s1, InStrRev(s1, "/") + 1, Len(s1) - (InStrRev(s1, "/") + 1) + 1)
'    Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = s2 ' Mid(s2, 1, InStr(s2, "/") - 1)
'End If
'End If

'Call getCustInfo
ResponseForm.Hide
NoEntry:

End Sub

Attribute VB_Name = "SelectLangForm"
Attribute VB_Base = "0{B609CF5F-419D-4665-A32E-7D15F2A9A9C5}{86C72FB6-4077-42F8-8F4D-8454A46D3E5F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
SelectLangForm.Hide
End Sub

Attribute VB_Name = "SelectStandardsForm"
Attribute VB_Base = "0{325CEF51-3C07-41DE-A479-27CBA4FD0D6D}{62929203-669E-4BC9-A669-5717D68C7FBE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False










'Private Sub UserForm_Initialize()
'
'With ListBox1
'    .AddItem "Sales"
'    .AddItem "Production"
'    .AddItem "Logistics"
'    .AddItem "Human Resources"
'End With
'
'OptionButton3.Value = True
'
'End Sub
Private Sub CommandButton1_Click()

Dim sTemp As String
Dim x As Long


x = 0
sTemp = Worksheets("Needs Assessment").Cells(Standardsrow(), 2).Value

Do
    If SelectStandardsForm.ListBox1.Selected(x) Then
        If sTemp = "" Then
            sTemp = SelectStandardsForm.ListBox1.List(x, 0)
        Else
            sTemp = sTemp & vbCrLf & SelectStandardsForm.ListBox1.List(x, 0)
        End If
    End If
    x = x + 1
Loop Until x = SelectStandardsForm.ListBox1.ListCount
Worksheets("Needs Assessment").Cells(Standardsrow(), 2).Value = sTemp

SelectStandardsForm.Hide

End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub CommandButton1_Click()

End Sub

Private Sub ComboBox1_Change()

    If ComboBox1.Value = "New product" Or ComboBox1.Value = "Alternate Construction" Then
        Worksheets("Needs Assessment").Cells(TestNoTestrow(), 2).Value = "Test"
    End If
    
    If ComboBox1.Value = "Component Replacement" Or ComboBox1.Value = "Report Revisions" Then
        Worksheets("Needs Assessment").Cells(TestNoTestrow(), 2).Value = "No Test"
    End If

End Sub

Private Sub TextBox1_Change()
    Worksheets("Needs Assessment").Cells(ItemsReqrow, 2).Value = TextBox1.Text
End Sub
Private Sub TextBox2_Change()
    Worksheets("Needs Assessment").Cells(Samplerow, 2).Value = TextBox2.Text
End Sub

Private Sub ToggleButton1_Click()

End Sub

Private Sub Worksheet_Activate()
Worksheets("Flex Info").Cells(30, 2).Value = ActiveSheet.Name

If ActiveSheet.Cells(15, 5).Value = "" And ActiveSheet.Cells(16, 5).Value = "" Then
'''    Call showTaskForm
End If

End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
Call initializeConst

On Error GoTo errorEnd

'change overall project cost at top
If Target.Cells.row = 7 And Target.Cells.Column = 2 Then
    If Target.Cells.Value = "" Then
        Target.Cells.Value = "=IF(D4=""-"",""See parent lines below"",D4*B4+D5*B5)"
        Worksheets("Needs Assessment").Cells(4, 2).Value = "=G42+SUM(H47:H56)+SUM(H60:H69)+SUM(H73:H82)+SUM(H86:H95)"
        Worksheets("Needs Assessment").Cells(5, 2).Value = "=H42+SUM(I47:I56)+SUM(I60:I69)+SUM(I73:I82)+SUM(I86:I95)"
        Worksheets("Needs Assessment").Cells(AHLParentEndrow - 1, 5).Value = "=SUM(E$38:E41)"
        x = 1
        Do
            Worksheets("Needs Assessment").Cells(AHLParentStartrow + 4 + x, 4).Value = ""
            x = x + 1
        Loop Until Worksheets("Needs Assessment").Cells(AHLParentStartrow + 4 + x, 4).Value = ""
    Else
        Worksheets("Needs Assessment").Cells(AHLParentEndrow - 1, 5).Value = Target.Cells.Value
    End If
End If
'change overall project cost
If Target.Cells.row = AHLParentEndrow - 1 And Target.Cells.Column = 5 Then
    If Target.Cells.Value = "" Then
        Target.Cells.Value = "=SUM(E$38:E41)"
'        Worksheets("Needs Assessment").Cells(7, 2).Value = "=IF(D4=""-"",""See parent lines below"",D4*B4+D5*B5)"
''    Else
''        Worksheets("Needs Assessment").Cells(7, 2).Value = Target.Cells.Value
    End If
End If
'change eng hours
If Target.Cells.row = 4 And Target.Cells.Column = 2 Then
    If Target.Cells.Value = "" Then
        Target.Cells.Value = "=G42+SUM(H47:H56)+SUM(H60:H69)+SUM(H73:H82)+SUM(H86:H95)"
        Worksheets("Needs Assessment").Cells(AHLParentEndrow - 1, 5).Value = "=SUM(E$38:E41)"
    Else
        Worksheets("Needs Assessment").Cells(AHLParentEndrow - 1, 5).Value = Worksheets("Needs Assessment").Cells(7, 2).Value
    End If
End If
'change lab hours
If Target.Cells.row = 5 And Target.Cells.Column = 2 Then
    If Target.Cells.Value = "" Then
        Target.Cells.Value = "=H42+SUM(I47:I56)+SUM(I60:I69)+SUM(I73:I82)+SUM(I86:I95)"
        Worksheets("Needs Assessment").Cells(AHLParentEndrow - 1, 5).Value = "=SUM(E$38:E41)"
    Else
        Worksheets("Needs Assessment").Cells(AHLParentEndrow - 1, 5).Value = Worksheets("Needs Assessment").Cells(7, 2).Value
    End If
End If

'change in parent line percentages
If Target.Cells.row < AHLParentEndrow - 1 And Target.Cells.row > AHLParentStartrow + 4 And Target.Cells.Column = 4 Then
    If Target.Cells.Value = "" Then
        Worksheets("Needs Assessment").Cells(Target.Cells.row, 5).Value = "=G" & Target.Cells.row & "*$D$4+H" & Target.Cells.row & "*$D$5"
        Worksheets("Needs Assessment").Cells(Target.Cells.row, 7).Value = 0
        Worksheets("Needs Assessment").Cells(Target.Cells.row, 8).Value = 0
        'Worksheets("Needs Assessment").Cells(AHLParentEndrow - 1, 7).Value = "=SUM(G$38:G41)"
    Else
        x = Worksheets("Needs Assessment").Cells(AHLParentEndrow - 1, 5).Value
        Debug.Print x
        'Worksheets("Needs Assessment").Cells(AHLParentEndrow - 1, 7).Value = Worksheets("Needs Assessment").Cells(AHLParentEndrow - 1, 5).Value / Worksheets("Needs Assessment").Cells(4, 4).Value
        Worksheets("Needs Assessment").Cells(Target.Cells.row, 5).Value = Worksheets("Needs Assessment").Cells(Target.Cells.row, 4).Value * x '/ 100
        Worksheets("Needs Assessment").Cells(Target.Cells.row, 7).Value = "N/A"
        Worksheets("Needs Assessment").Cells(Target.Cells.row, 8).Value = "N/A"
    End If
End If



If Target.Cells.row >= Assumptionsrow And Target.Cells.row <= TestPlanrow And Target.Cells.Column = 2 Then
    Call autoSizeRng(Range(Worksheets("Needs Assessment").Cells(Target.Cells.row, 2), Worksheets("Needs Assessment").Cells(Target.Cells.row, 7)))
End If
If Target.Cells.row = Standardsrow And Target.Cells.Column = 2 Then
    Call autoSizeRng(Range(Worksheets("Needs Assessment").Cells(Target.Cells.row, 2), Worksheets("Needs Assessment").Cells(Target.Cells.row, 7)))
End If
'Worksheets("Needs Assessment").Cells(ItemsReqrow, 2).Value = Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text
'Worksheets("Needs Assessment").Cells(Samplerow, 2).Value = Worksheets("Needs Assessment").Shapes.Item("TextBox 2").TextFrame.Characters.Text

errorEnd:
End Sub



Private Sub Worksheet_Deactivate()

End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
'Exit Sub

If Worksheets("Tasks").Visible = False Then
Exit Sub
End If

Dim canHide As Boolean, x As Long
Worksheets("Tasks").Select
canHide = False
If Target.Cells.Column = 1 And Target.Cells.row = 1 Then
    Worksheets("Projects").Cells(1, 1).Value = ActiveSheet.Cells(1, 1).Value
End If
If Target.Cells.Column = 2 And Target.Cells.row = 1 Then
    Worksheets("Projects").Cells(1, 2).Value = ActiveSheet.Cells(1, 2).Value
End If
If Target.Cells.Column = 2 And Target.Cells.row = 2 Then
    Worksheets("Projects").Cells(2, 2).Value = ActiveSheet.Cells(2, 2).Value
End If

If Target.Cells.Column = 5 Or Target.Cells.Column = 7 Or Target.Cells.Column = 9 Then
  If Target.Cells.row > 3 Then
    If ActiveSheet.Cells(Target.Cells.row, Target.Cells.Column).Value <> ActiveSheet.Cells(Target.Cells.row, Target.Cells.Column - 1).Value Then
'        Columns(Target.Cells.Column - 1).Select
'        Selection.EntireColumn.Hidden = False
'        Target.Cells.Select
        'Target.AddComment
        'Target.Comment.Visible = False
        'Target.Comment.Text Text:="Revised from: " & ActiveSheet.Cells(Target.Cells.row, Target.Cells.Column - 1).Value
        Target.Select
        With Selection.Font
            .Color = -16776961
            .TintAndShade = 0
        End With
        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .Color = 65535
            .TintAndShade = 0
            .PatternTintAndShade = 0
        End With
    
        'Range("A8").Select
    Else
'        Target.Comment.Delete
        Target.Select
        With Selection.Font
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
        End With
        With Selection.Interior
            .Pattern = xlNone
            .TintAndShade = 0
            .PatternTintAndShade = 0
        End With
    'Target.Comment.Text Text:="Barnes, Ryan:" & Chr(10) & "asdf"
    End If

'    x = 4
'    Do
'        If ActiveSheet.Cells(x, Target.Cells.Column).Value <> ActiveSheet.Cells(Target.Cells.row, Target.Cells.Column - 1).Value Then
'            Exit Sub
'        End If
'    Loop Until ActiveSheet.Cells(x, 1).Value = ""
'    Columns(Target.Cells.Column - 1).Select
'    Target.Cells.Select
'    Selection.EntireColumn.Hidden = True'
  End If
End If
Worksheets("Tasks").Select

'If Target.Cells.row = Standardsrow And Target.Cells.Column = 2 Then
'    Call autoSizeRng(Range(Worksheets("Needs Assessment").Cells(Target.Cells.row, 2), Worksheets("Needs Assessment").Cells(Target.Cells.row, 7)))
'End If
'Worksheets("Needs Assessment").Cells(ItemsReqrow, 2).Value = Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text
'Worksheets("Needs Assessment").Cells(Samplerow, 2).Value = Worksheets("Needs Assessment").Shapes.Item("TextBox 2").TextFrame.Characters.Text
End Sub

Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()

Worksheets("Flex Info").Cells(30, 2).Value = ActiveSheet.Name
Call showTCForm

End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet33"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet34"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet35"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet36"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet37"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet38"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet39"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet40"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet42"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
'Exit Sub

If Worksheets("Projects").Visible = False Then
Exit Sub
End If

Dim canHide As Boolean, x As Long
Worksheets("Projects").Select
canHide = False
'If Target.Cells.Column = 1 Or Target.Cells.row = 1 Then
'    Worksheets("Tasks").Cells(1, 1).Value = ActiveSheet.Cells(Target.Cells.row, Target.Cells.Column).Value
'End If
'If Target.Cells.Column = 2 Or Target.Cells.row = 1 Then
'    Worksheets("Tasks").Cells(1, 2).Value = ActiveSheet.Cells(Target.Cells.row, Target.Cells.Column).Value
'End If
If Target.Cells.Column = 4 Or Target.Cells.Column = 6 Or Target.Cells.Column = 8 Or Target.Cells.Column = 10 Or Target.Cells.Column = 12 Then
  If Target.Cells.row > 3 Then
    If ActiveSheet.Cells(Target.Cells.row, Target.Cells.Column).Value <> ActiveSheet.Cells(Target.Cells.row, Target.Cells.Column - 1).Value Then
'        Columns(Target.Cells.Column - 1).Select
'        Selection.EntireColumn.Hidden = False
'        Target.Cells.Select
        'Target.AddComment
        'Target.Comment.Visible = False
        'Target.Comment.Text Text:="Revised from: " & ActiveSheet.Cells(Target.Cells.row, Target.Cells.Column - 1).Value
        Target.Select
        With Selection.Font
            .Color = -16776961
            .TintAndShade = 0
        End With
        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .Color = 65535
            .TintAndShade = 0
            .PatternTintAndShade = 0
        End With
    
        'Range("A8").Select
    Else
'        Target.Comment.Delete
        Target.Select
        With Selection.Font
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
        End With
        With Selection.Interior
            .Pattern = xlNone
            .TintAndShade = 0
            .PatternTintAndShade = 0
        End With
    'Target.Comment.Text Text:="Barnes, Ryan:" & Chr(10) & "asdf"
    End If

'    x = 4
'    Do
'        If ActiveSheet.Cells(x, Target.Cells.Column).Value <> ActiveSheet.Cells(Target.Cells.row, Target.Cells.Column - 1).Value Then
'            Exit Sub
'        End If
'    Loop Until ActiveSheet.Cells(x, 1).Value = ""
'    Columns(Target.Cells.Column - 1).Select
'    Target.Cells.Select
'    Selection.EntireColumn.Hidden = True'
  End If
End If


'If Target.Cells.row = Standardsrow And Target.Cells.Column = 2 Then
'    Call autoSizeRng(Range(Worksheets("Needs Assessment").Cells(Target.Cells.row, 2), Worksheets("Needs Assessment").Cells(Target.Cells.row, 7)))
'End If
'Worksheets("Needs Assessment").Cells(ItemsReqrow, 2).Value = Worksheets("Needs Assessment").Shapes.Item("TextBox 1").TextFrame.Characters.Text
'Worksheets("Needs Assessment").Cells(Samplerow, 2).Value = Worksheets("Needs Assessment").Shapes.Item("TextBox 2").TextFrame.Characters.Text
End Sub
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ToggleButton1, 245, 8, MSForms, ToggleButton"
Attribute VB_Control = "ListBox12A, 42, 9, MSForms, ListBox"
Attribute VB_Control = "ListBox24A, 41, 10, MSForms, ListBox"
Attribute VB_Control = "ListBox23A, 40, 11, MSForms, ListBox"
Attribute VB_Control = "ListBox9A, 39, 12, MSForms, ListBox"
Attribute VB_Control = "ListBox8A, 37, 13, MSForms, ListBox"
Attribute VB_Control = "ListBox18A, 35, 14, MSForms, ListBox"
Attribute VB_Control = "ListBox17A, 34, 15, MSForms, ListBox"
Attribute VB_Control = "ListBox27A, 33, 16, MSForms, ListBox"
Attribute VB_Control = "ListBox6A, 15, 17, MSForms, ListBox"
Attribute VB_Control = "ListBox5A, 1, 18, MSForms, ListBox"
Attribute VB_Control = "ListBox7A, 3, 19, MSForms, ListBox"
Attribute VB_Control = "ListBox25A, 25, 20, MSForms, ListBox"
Attribute VB_Control = "ListBox21A, 26, 21, MSForms, ListBox"
Attribute VB_Control = "ListBox22A, 27, 22, MSForms, ListBox"
Attribute VB_Control = "ListBox28A, 48, 23, MSForms, ListBox"
Private Sub ListBox1A_Click()

End Sub

Private Sub ListBox3A_Click()

End Sub

Private Sub ComboBox1_Change()

End Sub

Private Sub ListBox15A_Click()

End Sub

Private Sub ListBox25A_Click()

End Sub

Private Sub ListBox6A_Click()

End Sub

Private Sub ListBox7A_Click()

End Sub

Private Sub ListBox9A_Click()

End Sub

Private Sub SpinButton1_Change()

End Sub

Private Sub ToggleButton1_Click()

End Sub

Private Sub TextBox1_Change()

End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
Call initializeConst

On Error GoTo errorEnd

'change overall project cost at top
If Target.Cells.row = 7 And Target.Cells.Column = 7 Then
    If ActiveSheet.Cells(5, 44).Value < -0.01 Then
        If MsgBox("Please note discounts require manager approval. Do you want to proceed?", vbOKCancel, "Create template approval email?") = 1 Then
            Call DiscountApprovalEmail
        End If
        'MsgBox "Manager approval needed for discounts. Use provided template email."
    Else
    
    End If
End If

errorEnd:
End Sub
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "StatusForm"
Attribute VB_Base = "0{3B59EC2A-063B-4773-8F80-F412392EF9ED}{E1103876-D924-4116-8092-B45B74B2B759}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Attribute VB_Name = "TCDownload"
Attribute VB_Base = "0{E2A8EC84-1A9D-4D53-BC90-6D1CCDB48C98}{F292B1C1-E3CC-43C5-8357-FCB88F06BD83}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False










Private Sub ComboBox1_Change()
Dim x As Long
x = 0
Do
    Worksheets("Task Document Download").Cells(9, 2 + x).Value = ""
    x = x + 1
Loop Until Worksheets("Task Document Download").Cells(10, 2 + x).Value = ""
Worksheets("Task Document Download").Cells(9, 2 + TCDownload.ComboBox1.ListIndex).Value = "x"
End Sub

Private Sub CommandButton1_Click()

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, x4 As Long
Dim pWebAddress As String
Dim x As Long, i As Long
Dim tbl As Object, p As Object, li As Object, td As Object, fld As Object, td2 As HTMLBaseElement
Dim doc As HTMLDocument, lastAddress As String
Dim totalDocuments As Long, y As Long, yy As Long, z As Long, page As Long
Dim IE As InternetExplorer
Dim IE1(10) As Boolean, IE2(10) As Boolean
Dim tabNum As Long, docName As String, docLink As String
Dim totalTasks As Long
    
If TCDownload.TextBox1.Text = "" Then
    MsgBox "Add URL for TC_Processing task"
    Exit Sub
End If

MsgBox "Be sure to be logged into Flex in CHROME before continuing."

Set IE = New InternetExplorer
'StatusForm.Show
'StatusForm.Label1.Caption = "Retreiving Task information"
IE.Visible = True ' True
pWebAddress = TCDownload.TextBox1.Text '"https://portal.ul.com/Project/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "/Task?&viewType=List"
IE.navigate pWebAddress
IE.Visible = True

Dim sh
Dim eachIE
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      IE.Visible = True  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing
While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Set doc = IE.Document

login:
If doc.getElementById("body") Is Nothing Then
    MsgBox "Log into Flex"
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Set doc = IE.Document
    GoTo login
End If
Do
    Sleep 25
Set doc = IE.Document
Loop Until Not (doc.getElementsByTagName("body") Is Nothing)
Set doc = IE.Document
IE.Visible = True

Dim docID As String
'Dim docName As String

For Each td In doc.getElementsByTagName("dd")
    If InStr(td.innerHTML, "DownloadDocument") > 0 Then
        'Debug.Print td.innerHTML
        'Debug.Print td.innerText
        docID = Mid(td.innerHTML, InStr(td.innerHTML, "DownloadDocument") + 17, 32)
        docName = td.innerText
        Call downloadDoc(docID, docName)
    End If
Next td
IE.Quit
Set IE = Nothing


errorEnd:


End Sub

Private Sub CommandButton10_Click() ' email TC
Call emailAddress(Worksheets("Task Document Download").Cells(14, 2 + TCDownload.ComboBox1.ListIndex).Value, "File: " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "  Project: " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & "  CCN: " & Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value, "")
End Sub

Private Sub CommandButton11_Click() 'WB Update Required
'MsgBox "pause"
Dim s1 As String

If Worksheets("Needs Assessment").Cells(hNamerow, 2).Value <> "" Then
    s1 = Replace(Worksheets("Task Document Download").Cells(50, 10).Value, "||handler||", Mid(Worksheets("Needs Assessment").Cells(hNamerow, 2).Value, 1, InStr(Worksheets("Needs Assessment").Cells(hNamerow, 2).Value, " ") - 1))
Else
    s1 = Worksheets("Task Document Download").Cells(50, 10).Value
End If
s1 = Replace(s1, "||file||", Worksheets("Needs Assessment").Cells(Filerow, 2).Value)
s1 = Replace(s1, "||ccn||", Worksheets("Needs Assessment").Cells(CCNrow, 2).Value)
s1 = Replace(s1, "||project link||", "<a href ="" " & Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value & " "">" & Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value & "</a>")

Call emailAddress4(Worksheets("Needs Assessment").Cells(hemailrow(), 2).Value & "; " & Worksheets("Needs Assessment").Cells(remailrow(), 2).Value, _
"WB update required for Project/SR# " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " and File # " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value, _
s1)

'Call emailAddress2(Worksheets("Needs Assessment").Cells(hemailrow(), 2).Value & "; " & Worksheets("Needs Assessment").Cells(remailrow(), 2).Value, _
'"WB update required for Project/SR# " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & " and File # " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value, _
'"")
Range("A1").Select
End Sub

Private Sub CommandButton12_Click()
    Dim pWebAddress As String
    pWebAddress = "https://ecm.ul.com/otcs/cs.exe/app/search/Category_150219022_3_value7/" _
     & Worksheets("Needs Assessment").Cells(Projectrow, 5).Value _
     & "/BrowseLivelink_value1_ID/150283005/query_id/151141532"
    Call NewShell(pWebAddress, 3)
End Sub

Private Sub CommandButton2_Click()
TCDownload.Hide
End Sub

Private Sub CommandButton3_Click()

MsgBox "Download button requires Chrome browswer. To enable automatic downloads without prompt, go to the Chrome settings, click Advanced. Under Privacy, click on 'Content settings'; then under Automatic Downloads click the 'Manage exceptions' button. Add a new line for 'https://portal.ul.com'."

End Sub

Private Sub CommandButton4_Click()

Dim s1 As String, s2 As String, s3 As String
Call Initialize
s1 = TCDownload.TextBox1.Text
If InStr(s1, "Project") < 1 Then
    Call TCProc_getFlexID
Else
'    s2 = Mid(s1, InStr(s1, "Project") + 8, Len(s1) - (InStr(s1, "Project") + 8) + 1)
'    Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = Mid(s2, 1, InStr(s2, "/") - 1)
'    Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value = "https://portal.ul.com/Project/Index/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value
    Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value = s1
End If

Call validateURL
Call getCustInfo

'''need to get reviewer info and FR review date here.
s2 = TCProc_GetReviewerInfo

Call Handler_Reviewer_info
TCDownload.TextBox2.Text = Worksheets("Needs Assessment").Cells(compNrow(), 2).Value
TCDownload.TextBox3.Text = Worksheets("Needs Assessment").Cells(Filerow(), 2).Value
TCDownload.TextBox4.Text = Worksheets("Needs Assessment").Cells(Projectrow(), 2).Value
TCDownload.TextBox5.Text = Worksheets("Needs Assessment").Cells(Partyrow(), 5).Value
TCDownload.TextBox6.Text = Worksheets("Needs Assessment").Cells(custNrow(), 5).Value
TCDownload.TextBox7.Text = Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value

TCDownload.TextBox8.Text = s2 'Worksheets("Needs Assessment").Cells(compNrow(), 2).Value
TCDownload.TextBox9.Text = Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value 'Worksheets("Needs Assessment").Cells(compNrow(), 2).Value
TCDownload.TextBox10.Text = Worksheets("Needs Assessment").Cells(hIDrow(), 2).Value 'Worksheets("Needs Assessment").Cells(compNrow(), 2).Value
TCDownload.TextBox11.Text = Worksheets("Needs Assessment").Cells(cemailrow(), 5).Value
TCDownload.TextBox12.Text = Worksheets("Needs Assessment").Cells(Scoperow(), 2).Value



End Sub

Private Sub CommandButton5_Click() ' FUS
'updated stationary on 12/12/17
'Call emailAddress(Worksheets("Task Document Download").Cells(11, 2 + TCDownload.ComboBox1.ListIndex).Value, "Installed Base & Service Contract update needed for Project/SR: " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & "  File: " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value, "File: " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "<br>Volume: " & Worksheets("Needs Assessment").Cells(Filerow(), 5).Value & "<br>Action & Item: <br>Mailing or Billing Updates: <br><br>AF Billing Date: <font color=""red""><i>(pls. specify if it needs earlier than the email date.  If notification to Service Contracts was delayed, please use Flex task completion date)</i> </font>")
Call emailAddress(Worksheets("Task Document Download").Cells(11, 2 + TCDownload.ComboBox1.ListIndex).Value, "Installed Base & Service Contract update needed for Project/SR: " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & "  File: " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value, "File: " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "<br>Volume: " & Worksheets("Needs Assessment").Cells(Filerow(), 5).Value & "<br>Action & Item: <br>Mailing or Billing Updates: <br><br>")

End Sub

Private Sub CommandButton6_Click() ' LIS
Call emailAddress(Worksheets("Task Document Download").Cells(12, 2 + TCDownload.ComboBox1.ListIndex).Value, "File: " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "  Project: " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & "  CCN: " & Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value, "")
End Sub

Private Sub CommandButton7_Click()

'Call emailHandlerReviewer
'Call emailAddress(Worksheets("Needs Assessment").Cells(hemailrow(), 2).Value & "; " & Worksheets("Needs Assessment").Cells(remailrow(), 2).Value)
Call emailAddress(Worksheets("Needs Assessment").Cells(hemailrow(), 2).Value & "; " & Worksheets("Needs Assessment").Cells(remailrow(), 2).Value, "File: " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "  Project: " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & "  CCN: " & Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value, "")

End Sub

Private Sub CommandButton8_Click() ' MLs
Call emailAddress(Worksheets("Task Document Download").Cells(13, 2 + TCDownload.ComboBox1.ListIndex).Value, "File: " & Worksheets("Needs Assessment").Cells(Filerow(), 2).Value & "  Project: " & Worksheets("Needs Assessment").Cells(Projectrow(), 2) & "  CCN: " & Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value, "")
End Sub

Private Sub CommandButton9_Click() ' Clear Results

Dim i As Long
Call Initialize
'example: DocForm.Controls.item("ListView" & tabNum + 1).ColumnHeaders.aDD , , "Doc Status"
For i = 1 To 13
    TCDownload.Controls.Item("TextBox" & i).Text = ""
Next i

End Sub
Attribute VB_Name = "TaskForm"
Attribute VB_Base = "0{68A2CD53-D930-4B56-9456-2E76612B4502}{2A3A7471-5300-4328-86BE-43182E4BF022}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False









Private Sub ComboBox1_Change()

If TaskForm.ComboBox1.Value = "Projects" Then
    TaskForm.Label2.Visible = False
    TaskForm.TextBox2.Visible = False
End If

If TaskForm.ComboBox1.Value = "Tasks" Then
    TaskForm.Label2.Visible = True
    TaskForm.TextBox2.Visible = True
End If

End Sub

Private Sub CommandButton1_Click()

Dim x As Long
Dim s1 As String, s2 As String

If TaskForm.TextBox3.Text <> "" Then
  'ResponseForm.TextBox1.Text = TaskForm.TextBox3.Text
  'If TemplateForm.Visible = False Then
    s1 = TaskForm.TextBox3.Text
    If InStr(s1, "Project") < 1 Then
      MsgBox ("Valid Flex URL required")
      GoTo NoEntry
    End If
    Worksheets("Needs Assessment").Cells(Quoterow(), 5).Value = s1
    If InStr(s1, "Task") > 0 Then
      s2 = Mid(s1, InStr(s1, "Project") + 8, Len(s1) - (InStr(s1, "Project") + 8) + 1)
      Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = Mid(s2, 1, InStr(s2, "/") - 1)
    Else
      s2 = Mid(s1, InStrRev(s1, "/") + 1, Len(s1) - (InStrRev(s1, "/") + 1) + 1)
      Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = s2 ' Mid(s2, 1, InStr(s2, "/") - 1)
    End If
  'End If
  
  Call flexURL
  Call flexURL3
  TaskForm.Hide

NoEntry:
  Exit Sub
  TaskForm.Hide
End If

TaskForm.ListBox1.Clear
x = 3
Do
    Worksheets("Task-scratch").Cells(x + 1, 2).Value = ""
    Worksheets("Task-scratch").Cells(x + 1, 3).Value = ""
    Worksheets("Task-scratch").Cells(x + 1, 4).Value = ""
    Worksheets("Task-scratch").Cells(x + 1, 5).Value = ""
    Worksheets("Task-scratch").Cells(x + 1, 6).Value = ""
    x = x + 1
Loop Until Worksheets("Task-scratch").Cells(x + 1, 2).Value = ""

If TaskForm.ComboBox1.Value = "Projects" Then
    Call EmployeeTaskList(TaskForm.TextBox1, "Projects")
Else
    Call EmployeeTaskList(TaskForm.TextBox1, TaskForm.TextBox2)
End If

Call flexURL3

End Sub

Private Sub CommandButton2_Click()
TaskForm.Hide
End Sub

Private Sub CommandButton3_Click()

Call Initialize

Dim x As Long

For x = 0 To TaskForm.ListBox1.ListCount
    If TaskForm.ListBox1.Selected(x) = True Then
        Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = Worksheets("Task-scratch").Cells(x + 4, 5).Value
        Call flexURL
        Call flexURL3
        TaskForm.Hide
        Exit Sub
    End If
Next x
Call flexURL3
TaskForm.Hide
End Sub

Private Sub CommandButton4_Click()
Call Copy_prev
TaskForm.Hide
End Sub

Private Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Call Initialize

Dim x As Long

For x = 0 To TaskForm.ListBox1.ListCount
    If TaskForm.ListBox1.Selected(x) = True Then
        Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value = Worksheets("Task-scratch").Cells(x + 4, 5).Value
        Call flexURL
        Call flexURL3
        TaskForm.Hide
        Exit Sub
    End If
Next x
Call flexURL3
TaskForm.Hide
End Sub

Private Sub TextBox1_Change()
Worksheets("Task-scratch").Cells(1, 2).Value = TaskForm.TextBox1.Text
End Sub

Private Sub TextBox2_Change()
Worksheets("Task-scratch").Cells(2, 2).Value = TaskForm.TextBox2.Text
End Sub

Attribute VB_Name = "TemplateForm"
Attribute VB_Base = "0{9CFEC4DF-0024-490C-97E7-FCC7A954DF0B}{FB3F9F49-A7CE-427E-84A0-58007D4D5BA0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub ComboBox1_Change()
    Call getTaskInfo
    Call RefreshTemplate
End Sub

Private Sub CommandButton1_Click()

    TemplateForm.Hide

End Sub

Private Sub CommandButton10_Click() ' Remove Selected

Dim x As Long, curTab As Long, x1 As Long, y As Long, y1 As Long, z As Long
Dim temp As String, temp2 As String, temp3 As String, tempx(8) As String
curTab = TemplateForm.ComboBox1.ListIndex 'TemplateForm.TabStrip1.SelectedItem.index

x = 3
Do
  If Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = True Then ' And Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value <> True Then
     
     'adjust parent task #'s
debugloop:
     y = 3
     Do
        If Worksheets("Create Templates").Cells(y, 3 + 8 * (curTab)).Value = (x - 2) Then
            'Debug.Print "parent task " & x - 2 & " removed from " & y - 2
            If x = 3 Then '''no previous parent task - may need to assign to existing parent task # or prevent deletion of last parent task
                'z = 3
                'Do
                '    z = z + 1
                'Loop Until Worksheets("Create Templates").Cells(z, 2 + 8 * (curTab)).Value = "" 'get last entry
                
                y1 = y
                Do
                    y1 = y1 + 1
                Loop Until Worksheets("Create Templates").Cells(y1, 3 + 8 * (curTab)).Value = 0
                
                Worksheets("Create Templates").Cells(y, 3 + 8 * (curTab)).Value = y1 - 3
                If y1 > y Then
                    For z = 0 To 7
                        tempx(z) = Worksheets("Create Templates").Cells(y, 2 + z + 8 * curTab).Value
                        Worksheets("Create Templates").Cells(y, 2 + z + 8 * curTab).Value = Worksheets("Create Templates").Cells(y1, 2 + z + 8 * curTab).Value
                        Worksheets("Create Templates").Cells(y1, 2 + z + 8 * curTab).Value = tempx(z)
                    Next z
                    z = 3
                    Do
                        If Worksheets("Create Templates").Cells(z, 3 + 8 * (curTab)).Value = y1 - 2 Then
                            Worksheets("Create Templates").Cells(z, 3 + 8 * (curTab)).Value = y - 2
                        End If
                        z = z + 1
                    Loop Until Worksheets("Create Templates").Cells(z, 3 + 8 * (curTab)).Value = ""
                    y1 = y
                End If
            Else
                y1 = x
                Do
                    y1 = y1 - 1
                Loop Until Worksheets("Create Templates").Cells(y1, 3 + 8 * (curTab)).Value = 0
                Worksheets("Create Templates").Cells(y, 3 + 8 * (curTab)).Value = y1 - 2
            End If
        Else
            'Debug.Print "y = " & y & ", cell = " & Worksheets("Create Templates").Cells(y, 3 + 8 * (curTab)).Value & ", x-2 = " & x - 2
            If Worksheets("Create Templates").Cells(y, 3 + 8 * (curTab)).Value > (x - 2) Then
                'Debug.Print "y = " & y
                Worksheets("Create Templates").Cells(y, 3 + 8 * (curTab)).Value = Worksheets("Create Templates").Cells(y, 3 + 8 * (curTab)).Value - 1
            End If
        End If
        y = y + 1
     Loop Until Worksheets("Create Templates").Cells(y, 2 + 8 * (curTab)).Value = ""
     
     
'     GoTo debugloop
     '''need to go through task list, find all with a predecessor task # that matches this item and remove the reference.
    y = 3
    Do
      If Worksheets("Create Templates").Cells(y, 4 + 8 * (curTab)).Value <> "" Then
        temp = Worksheets("Create Templates").Cells(y, 4 + 8 * (curTab)).Value 'holds part of string left to be analyzed
        temp2 = "" 'individual task #
        temp3 = "" 'new string to be applied
        'Debug.Print "temp = " & temp
        If InStr(temp, ",") Then
            Do
                Debug.Print temp
                temp2 = CStr(CLng(Mid(temp, 1, InStr(temp, ",") - 1))) 'individual predecessor task #
                'Debug.Print temp2
                If CLng(temp2) < x - 2 And CLng(temp2) > 0 Then
                  If temp3 = "" Then 'collection of all predecessor #'s
                        temp3 = temp2
                  Else
                        temp3 = temp3 & "," & temp2
                  End If
                    Debug.Print temp3
                End If
                Debug.Print temp3
'                If CLng(temp2) = x - 2 Then
'                    temp3 = temp3
'                End If
                If CLng(temp2) > x - 2 Then
                    If temp3 = "" Then
                        temp3 = CStr(CLng(temp2) - 1)
                    Else
                        temp3 = temp3 & "," & CStr(CLng(temp2) - 1)
                    End If
                    Debug.Print temp3
                End If
                Debug.Print temp3
                temp = Mid(temp, InStr(temp, ",") + 1)
            Loop Until InStr(temp, ",") < 1
            temp2 = temp 'individual predecessor task #
            If CLng(temp2) < x - 2 And CLng(temp2) > 0 Then
                temp3 = temp3 & "," & temp2
            End If
            If CLng(temp2) = x - 2 Then
                temp3 = temp3
            End If
            If CLng(temp2) > x - 2 Then
               temp3 = temp3 & "," & CStr(CLng(temp2) - 1)
            End If
            Debug.Print temp3
        Else
            temp2 = temp 'individual predecessor task #
            If CLng(temp2) < x - 2 And CLng(temp2) > 0 Then
                temp3 = temp2
            End If
            If CLng(temp2) = x - 2 Then
                temp3 = temp3
            End If
            If CLng(temp2) > x - 2 Then
               temp3 = CStr(CLng(temp2) - 1)
            End If
        End If
        If Mid(temp3, 1, 1) = "," Then
            temp3 = Mid(temp3, 2)
        End If
        Worksheets("Create Templates").Cells(y, 4 + 8 * (curTab)).Value = temp3
      End If
      y = y + 1
    Loop Until Worksheets("Create Templates").Cells(y, 2 + 8 * (curTab)).Value = ""
      
     
     x1 = x
     Do
         Worksheets("Create Templates").Cells(x1, 2 + 8 * (curTab)).Value = Worksheets("Create Templates").Cells(x1 + 1, 2 + 8 * (curTab)).Value
         Worksheets("Create Templates").Cells(x1, 3 + 8 * (curTab)).Value = Worksheets("Create Templates").Cells(x1 + 1, 3 + 8 * (curTab)).Value
         Worksheets("Create Templates").Cells(x1, 4 + 8 * (curTab)).Value = Worksheets("Create Templates").Cells(x1 + 1, 4 + 8 * (curTab)).Value
         Worksheets("Create Templates").Cells(x1, 5 + 8 * (curTab)).Value = Worksheets("Create Templates").Cells(x1 + 1, 5 + 8 * (curTab)).Value
         Worksheets("Create Templates").Cells(x1, 6 + 8 * (curTab)).Value = Worksheets("Create Templates").Cells(x1 + 1, 6 + 8 * (curTab)).Value
         Worksheets("Create Templates").Cells(x1, 7 + 8 * (curTab)).Value = Worksheets("Create Templates").Cells(x1 + 1, 7 + 8 * (curTab)).Value
         Worksheets("Create Templates").Cells(x1, 8 + 8 * (curTab)).Value = Worksheets("Create Templates").Cells(x1 + 1, 8 + 8 * (curTab)).Value
         Worksheets("Create Templates").Cells(x1, 9 + 8 * (curTab)).Value = Worksheets("Create Templates").Cells(x1 + 1, 9 + 8 * (curTab)).Value
         x1 = x1 + 1
      Loop Until Worksheets("Create Templates").Cells(x1, 2 + 8 * (curTab)).Value = ""
  End If
  If Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = True Then
    TemplateForm.Label4.Caption = "Use Flex to remove already applied tasks."
  End If
    x = x + 1
Loop Until Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value = ""

x = 4
Do
  If Worksheets("Task-scratch").Cells(x, 10 + 8 * (curTab)).Value = True Then
    TemplateForm.Label4.Caption = "Use Flex to remove already applied tasks."
    Worksheets("Task-scratch").Cells(x, 10 + 8 * (curTab)).Value = False
    x1 = x
  End If
  x = x + 1
Loop Until Worksheets("Task-scratch").Cells(x, 8 + 8 * (curTab)).Value = ""

Call RefreshTemplate
End Sub

Private Sub CommandButton11_Click() 'Change to parent
Dim x As Long, curTab As Long
curTab = TemplateForm.ComboBox1.ListIndex 'TemplateForm.TabStrip1.SelectedItem.index
x = 3
Do
    If Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = True And Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value > 0 Then
        Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = 0
        Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = False
    End If
    x = x + 1
Loop Until Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value = ""

Call RefreshTemplate
End Sub

Private Sub CommandButton12_Click() 'assign tasks to custom name
Dim x As Long, curTab As Long
curTab = TemplateForm.ComboBox1.ListIndex 'TemplateForm.TabStrip1.SelectedItem.index
x = 3
Do
  If Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = True Then
        Worksheets("Create Templates").Cells(x, 8 + 8 * (curTab)).Value = TemplateForm.TextBox2.Text
  End If
  x = x + 1
Loop Until Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value = ""
Call RefreshTemplate
End Sub

Private Sub CommandButton13_Click() 'change parent/child status

Dim x As Long, curTab As Long, x1 As Long, y As Long, y1 As Long, z As Long
Dim temp As String, temp2 As String, temp3 As String, tempx(8) As String
curTab = TemplateForm.ComboBox1.ListIndex 'TemplateForm.TabStrip1.SelectedItem.index

x = 3
Do
    If Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = True And Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value > 0 Then
        Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = 0
        Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = False
    End If
    x = x + 1
Loop Until Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value = ""

x = 3 'x is the current checked task
Do
  If Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = True And Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = 0 Then ' And Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value <> True Then
debugloop:
     y = 3 ' y cycles through each task to see if it references the checked task as a parent task
     Do
        If Worksheets("Create Templates").Cells(y, 3 + 8 * (curTab)).Value = (x - 2) Then
'            Debug.Print "parent task " & x - 2 & " removed from " & y - 2
            If x = 3 Then '''no previous parent task - may need to assign to existing parent task # or prevent deletion of last parent task
                y1 = y 'y1 to be the next available parent #
                Do
                    y1 = y1 + 1
                Loop Until Worksheets("Create Templates").Cells(y1, 3 + 8 * (curTab)).Value = 0
                
                Worksheets("Create Templates").Cells(y, 3 + 8 * (curTab)).Value = y1 - 3
                If y1 > x Then
                    For z = 0 To 7
                        tempx(z) = Worksheets("Create Templates").Cells(x, 2 + z + 8 * curTab).Value
                        Worksheets("Create Templates").Cells(x, 2 + z + 8 * curTab).Value = Worksheets("Create Templates").Cells(y1, 2 + z + 8 * curTab).Value
                        Worksheets("Create Templates").Cells(y1, 2 + z + 8 * curTab).Value = tempx(z)
                    Next z
                    z = 3
                    Do
                        If Worksheets("Create Templates").Cells(z, 3 + 8 * (curTab)).Value = y1 - 2 Then
                            Worksheets("Create Templates").Cells(z, 3 + 8 * (curTab)).Value = x - 2
'                        Else
'                          If Worksheets("Create Templates").Cells(z, 3 + 8 * (curTab)).Value = x - 2 Then
'                            Worksheets("Create Templates").Cells(z, 3 + 8 * (curTab)).Value = x - 2
'                          End If
                        End If
                        z = z + 1
                    Loop Until Worksheets("Create Templates").Cells(z, 3 + 8 * (curTab)).Value = ""
                    y1 = x
                End If
                
                Debug.Print "Replaced with " & y1 - 3
            Else
                y1 = x
                Do
                    Debug.Print "y1 = " & y1
                    y1 = y1 - 1
                Loop Until Worksheets("Create Templates").Cells(y1, 3 + 8 * (curTab)).Value = 0
                Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = y1 - 2
                Worksheets("Create Templates").Cells(y, 3 + 8 * (curTab)).Value = y1 - 2
                
                Debug.Print "Replaced with " & y1 - 2
            End If
'        Else
'            If Worksheets("Create Templates").Cells(y, 3 + 8 * (curTab)).Value > (x - 2) Then
'                Worksheets("Create Templates").Cells(y, 3 + 8 * (curTab)).Value = Worksheets("Create Templates").Cells(y, 3 + 8 * (curTab)).Value - 1
'            End If
        End If
        y = y + 1
     Loop Until Worksheets("Create Templates").Cells(y, 2 + 8 * (curTab)).Value = ""
     Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = False
  End If
'  If Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = True Then
'    TemplateForm.Label4.Caption = "Use Flex to remove already applied tasks."
'  End If
    x = x + 1
Loop Until Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value = ""

x = 4
Do
  If Worksheets("Task-scratch").Cells(x, 10 + 8 * (curTab)).Value = True Then
    TemplateForm.Label4.Caption = "Use Flex to change currently applied tasks."
    Worksheets("Task-scratch").Cells(x, 10 + 8 * (curTab)).Value = False
    x1 = x
  End If
  x = x + 1
Loop Until Worksheets("Task-scratch").Cells(x, 8 + 8 * (curTab)).Value = ""

Call RefreshTemplate


End Sub

Private Sub CommandButton14_Click() 'move up
Dim x As Long, curTab As Long, y As Long
curTab = TemplateForm.ComboBox1.ListIndex 'TemplateForm.TabStrip1.SelectedItem.index
x = 3
Do
    If Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = True Then
     If Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value > 0 Then
        If Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = 1 Then
            y = 4
            Do
                y = y + 1
            Loop Until Worksheets("Task-scratch").Cells(y, 8 + 8 * curTab).Value = ""
            Do
                y = y - 1
            Loop Until Mid(Worksheets("Task-scratch").Cells(y, 8 + 8 * curTab).Value, 1, 1) <> "!" Or y < 4 'y now has the last parent task
            If y >= 4 Then
                Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = "-" & (y - 3)
                'Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = False
            End If
        Else
            y = Worksheets("Create Templates").Cells(x, 3 + 8 * curTab).Value + 2
            Do
                y = y - 1
            Loop Until Worksheets("Create Templates").Cells(y, 3 + 8 * curTab).Value = 0
            Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = y - 2
            'Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = False
        End If
    Else
        'does nothing if parent is -1 (top of existing task list)
        If Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value <> -1 Then
            y = Abs(Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value) + 3
            Do
                y = y - 1
            Loop Until Mid(Worksheets("Task-scratch").Cells(y, 8 + 8 * curTab).Value, 1, 1) <> "!" Or y < 4
            If y >= 4 Then
               Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = "-" & (y - 3)
               'Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = False
            End If
        End If
      End If
    End If
    x = x + 1
Loop Until Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value = ""
x = 4
Do
    If Worksheets("Task-scratch").Cells(x, 10 + 8 * (curTab)).Value = True Then
        Worksheets("Task-scratch").Cells(x, 10 + 8 * (curTab)).Value = False
        TemplateForm.Label4.Caption = "Cannot adjust existing tasks"
    End If
    x = x + 1
Loop Until Worksheets("Task-scratch").Cells(x, 8 + 8 * (curTab)).Value = ""

Call RefreshTemplate
End Sub

Private Sub CommandButton15_Click() 'move down button
Dim x As Long, curTab As Long, y As Long
curTab = TemplateForm.ComboBox1.ListIndex 'TemplateForm.TabStrip1.SelectedItem.index
x = 3
Do
    If Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = True Then
     If Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value > 0 Then
        y = Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value + 2
        Do
            y = y + 1
        Loop Until Worksheets("Create Templates").Cells(y, 2 + 8 * curTab).Value = "" Or Worksheets("Create Templates").Cells(y, 3 + 8 * curTab).Value = 0
        If Worksheets("Create Templates").Cells(y, 2 + 8 * curTab).Value <> "" Then
            Debug.Print "y = " & y
            Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = y - 2
            'Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = False
        End If
      Else
        y = Abs(Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value) + 3
        Do
            y = y + 1
        Loop Until Worksheets("Task-scratch").Cells(y, 8 + 8 * curTab).Value = "" Or Mid(Worksheets("Task-scratch").Cells(y, 8 + 8 * curTab).Value, 1, 1) <> "!"
        If Mid(Worksheets("Task-scratch").Cells(y, 8 + 8 * curTab).Value, 1, 1) <> "!" And Worksheets("Task-scratch").Cells(y, 8 + 8 * curTab).Value <> "" Then
            Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = "-" & (y - 3)
            'Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = False
        End If
        If Worksheets("Task-scratch").Cells(y, 8 + 8 * curTab).Value = "" Then
            Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = 1
            'Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = False
        End If
      End If
    End If
    x = x + 1
Loop Until Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value = ""

x = 4
Do
    If Worksheets("Task-scratch").Cells(x, 10 + 8 * (curTab)).Value = True Then
        Worksheets("Task-scratch").Cells(x, 10 + 8 * (curTab)).Value = False
        TemplateForm.Label4.Caption = "Cannot adjust existing tasks"
    End If
    x = x + 1
Loop Until Worksheets("Task-scratch").Cells(x, 8 + 8 * (curTab)).Value = ""

Call RefreshTemplate
End Sub

Private Sub CommandButton16_Click() 'change predecessors button
Dim x As Long, curTab As Long
Dim i As Integer
Dim li As ListItem
Dim SaveDriveDir As String, mypath As String, s1 As String
Dim fName As Variant
    Dim sNode As Node
    Dim dNode As Node, xNode As Node
    Dim dNodeKey As String
    Dim dNodeTxt As String
    Dim newNodeKey As String, hitNodeKey As String
    Dim newNodeTxt As String, hitNodeTxt As String
    Dim crossover As Long

curTab = TemplateForm.ComboBox1.ListIndex 'TemplateForm.TabStrip1.SelectedItem.index
TemplateForm.ListBox1.Clear
x = 4
Do
    TemplateForm.ListBox1.AddItem Worksheets("Task-scratch").Cells(x, 8 + 8 * (curTab)).Value
    If Worksheets("Task-scratch").Cells(x, 10 + 8 * (curTab)).Value = True Then
        Worksheets("Task-scratch").Cells(x, 10 + 8 * (curTab)).Value = False
    End If
    x = x + 1
Loop Until Worksheets("Task-scratch").Cells(x, 8 + 8 * (curTab)).Value = ""
crossover = x - 4
x = 3
Do
    TemplateForm.ListBox1.AddItem Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value
    x = x + 1
Loop Until Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value = ""
TemplateForm.Frame1.Visible = True

x = 3
Do
    If Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = True Then
       
    ' populate listbox with predecessor task names
        TemplateForm.Label6.Caption = "Predecessors for task #" & x - 2 & " - " & Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value 'task # here
        y = x
        If Worksheets("Create Templates").Cells(y, 4 + 8 * (curTab)).Value <> "" Then
            temp = Worksheets("Create Templates").Cells(y, 4 + 8 * (curTab)).Value 'holds part of string left to be analyzed
            temp2 = "" 'individual task #
            temp3 = "" 'new string to be applied
            If InStr(temp, ",") Then
                Do
                    temp2 = CStr(CLng(Mid(temp, 1, InStr(temp, ",") - 1))) 'individual predecessor task #
                    If CLng(temp2) > -1 Then
                        TemplateForm.ListBox1.Selected(Abs(CLng(temp2)) + crossover - 1) = True
                    Else
                        TemplateForm.ListBox1.Selected(Abs(CLng(temp2)) - 1) = True
                    End If
                    temp = Mid(temp, InStr(temp, ",") + 1)
                Loop Until InStr(temp, ",") < 1
                temp2 = temp 'leftover individual predecessor task #
                If CLng(temp2) > -1 Then
                    TemplateForm.ListBox1.Selected(Abs(CLng(temp2)) + crossover - 1) = True
                Else
                    TemplateForm.ListBox1.Selected(Abs(CLng(temp2)) - 1) = True
                End If
            Else
                temp2 = temp 'only one predecessor task #
                If CLng(temp2) > -1 Then
                    TemplateForm.ListBox1.Selected(Abs(CLng(temp2)) + crossover - 1) = True
                Else
                    TemplateForm.ListBox1.Selected(Abs(CLng(temp2)) - 1) = True
                End If
            End If
        End If
    End If
    x = x + 1
Loop Until Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value = ""

End Sub

Private Sub CommandButton17_Click()
TemplateForm.Frame1.Visible = False
End Sub

Private Sub CommandButton2_Click() 'Apply Template

Dim x As Long, curTab As Long, index As Long, TaskOffset As Long, repeatCount As Long, y2 As Long, z As Long
Dim temp As String, temp2 As String, temp3 As String, s1 As String, s2 As String
curTab = TemplateForm.ComboBox1.ListIndex
index = Worksheets("Needs Assessment").Shapes("Drop Down 85").ControlFormat.ListIndex
TaskOffset = 6
repeatCount = 0
x = 3
Do
    y = 4
    Do
      If InStr(Worksheets("Task-scratch").Cells(y, TaskOffset + 2 + 8 * curTab).Value, Worksheets("Templates").Cells(x, 2 + 8 * (curTab)).Value) > 0 Then
        repeatCount = repeatCount + 1
        TemplateForm.Label4.Caption = "Repeated tasks not added"
        GoTo RepeatTask
      End If
      y = y + 1
    Loop Until Worksheets("Task-scratch").Cells(y, TaskOffset + 2 + 8 * curTab).Value = ""
    Worksheets("Create Templates").Cells(x - repeatCount, 2 + 8 * (curTab)).Value = Worksheets("Templates").Cells(x, 2 + 8 * (index - 1)).Value
    
    If Worksheets("Templates").Cells(x, 3 + 8 * (index - 1)).Value = "0" Then
        Worksheets("Create Templates").Cells(x - repeatCount, 3 + 8 * (curTab)).Value = Worksheets("Templates").Cells(x, 3 + 8 * (index - 1)).Value
    Else '''should adjust this to find the task with same name as in "Templates" and assign this #
        y2 = x
        Do
            y2 = y2 - 1
        Loop Until Worksheets("Create Templates").Cells(y2 - repeatCount, 3 + 8 * (curTab)).Value = "0"
        Worksheets("Create Templates").Cells(x - repeatCount, 3 + 8 * (curTab)).Value = y2 - repeatCount - 2
    End If
    
' adjust predecessor values
    If Worksheets("Templates").Cells(x, 4 + 8 * (index - 1)).Value <> "" Then
        temp = Worksheets("Templates").Cells(x, 4 + 8 * (index - 1)).Value
        temp2 = ""
        temp3 = ""
        If InStr(temp, ",") Then
            Do
                temp2 = CStr(CInt(Mid(temp, 1, InStr(temp, ",") - 1))) 'individual predecessor task #
                s1 = Worksheets("Templates").Cells(CInt(temp2) + 2, 2 + 8 * (index - 1)).Value
                z = 3
                Do
                  If s1 = Worksheets("Create Templates").Cells(z, 2 + 8 * curTab).Value Then
                    If temp3 = "" Then 'collection of all predecessor #'s
                        temp3 = CStr(CInt(Mid(temp, 1, InStr(temp, ",") - 1)))
                    Else
                        temp3 = temp3 & "," & CStr(CInt(Mid(temp, 1, InStr(temp, ",") - 1)))
                    End If
                  End If
                  z = z + 1
                Loop Until Worksheets("Create Templates").Cells(z, 2 + 8 * curTab).Value = ""
                temp = Mid(temp, InStr(temp, ",") + 1)
            Loop Until InStr(temp, ",") < 1
            temp2 = temp 'individual predecessor task #
            s1 = Worksheets("Templates").Cells(CInt(temp2) + 2, 2 + 8 * (index - 1)).Value
            z = 3
            Do
              If s1 = Worksheets("Create Templates").Cells(z, 2 + 8 * curTab).Value Then
                If temp3 = "" Then 'collection of all predecessor #'s
                    temp3 = CStr(CInt(Mid(temp, 1, InStr(temp, ",") - 1)))
                Else
                    temp3 = temp3 & "," & temp
                End If
              End If
              z = z + 1
            Loop Until Worksheets("Create Templates").Cells(z, 2 + 8 * curTab).Value = ""
        Else
            temp2 = temp 'individual predecessor task #
            s1 = Worksheets("Templates").Cells(CInt(temp2) + 2, 2 + 8 * (index - 1)).Value
            z = 3
            Do
              If s1 = Worksheets("Create Templates").Cells(z, 2 + 8 * curTab).Value Then
                temp3 = temp
              End If
              z = z + 1
            Loop Until Worksheets("Create Templates").Cells(z, 2 + 8 * curTab).Value = ""
        End If
        Worksheets("Create Templates").Cells(x - repeatCount, 4 + 8 * (curTab)).Value = temp3
    End If
    
    Worksheets("Create Templates").Cells(x - repeatCount, 5 + 8 * (curTab)).Value = False 'Worksheets("Templates").Cells(x, 5 + 8 * (index - 1)).Value
    Worksheets("Create Templates").Cells(x - repeatCount, 6 + 8 * (curTab)).Value = Worksheets("Templates").Cells(x, 6 + 8 * (index - 1)).Value
    Worksheets("Create Templates").Cells(x - repeatCount, 7 + 8 * (curTab)).Value = Worksheets("Templates").Cells(x, 7 + 8 * (index - 1)).Value
    Worksheets("Create Templates").Cells(x - repeatCount, 8 + 8 * (curTab)).Value = Worksheets("Templates").Cells(x, 8 + 8 * (index - 1)).Value
    'Worksheets("Create Templates").Cells(x - repeatCount, 9 + 8 * (curTab)).Value = Worksheets("Templates").Cells(x, 9 + 8 * (index - 1)).Value
RepeatTask:
    x = x + 1
Loop Until Worksheets("Templates").Cells(x, 3 + 8 * (index - 1)).Value < 0

Call RefreshTemplate

End Sub

Private Sub CommandButton3_Click() 'Add new task to available list

Dim x As Long, curTab As Long, index As Long

curTab = TemplateForm.ComboBox1.ListIndex 'TemplateForm.TabStrip1.SelectedItem.index
index = Worksheets("Needs Assessment").Shapes("Drop Down 85").ControlFormat.ListIndex

If TemplateForm.TextBox1.Text <> "" Then
    x = 3
    Do
        x = x + 1
    Loop Until Worksheets("Templates").Cells(x, 2 + 8 * (index - 1)).Value = ""
    Worksheets("Templates").Cells(x, 2 + 8 * (index - 1)).Value = TemplateForm.TextBox1.Text
    Worksheets("Templates").Cells(x, 3 + 8 * (index - 1)).Value = -1
'    Worksheets("Templates").Cells(x, 5 + 8 * (index - 1)).Value = False
End If
TemplateForm.ListView1.ListItems.Clear
Call RefreshTemplate
End Sub

Private Sub CommandButton4_Click() '''Start new project creation - fail...

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String
Dim pWebAddress As String, flexNum As String, pwebAddressx As String
Dim IE As InternetExplorer
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object, div2 As Object, div3 As Object
Dim doc As HTMLDocument, doc2 As HTMLDocument, cEmail As String, cPhone As String
Dim elem As HTMLBaseElement, x9 As HTMLBaseElement
Dim x
Dim docx() As HTMLDocument
Dim IEx() As InternetExplorer


flexNum = Replace(Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value, "-", "")
pWebAddress = "https://portal.ul.com/Project/History/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value '"https://portal.ul.com/Project/CreateNew"
'pWebAddress = "https://portal.ul.com/Project/CreateNew"
Set IE = NewValidIE(pWebAddress) ' New InternetExplorerMedium

IE.Visible = True
Set doc = IE.Document
'Set x9 = doc.getElementById("create")(1)
'Set x9 = doc.getElementById("manageLabWare").parentElement.nextSibling.Children(0) 'same ID used for "edit project"
Set x9 = doc.getElementById("create")
x9.Focus
SendKeys " "

Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE

Do
Sleep 5
Set doc = IE.Document
Loop Until Not (doc.getElementById("createProject") Is Nothing)
Set doc = IE.Document

doc.getElementById("CompanyName").Value = Worksheets("Needs Assessment").Cells(compNrow(), 2).Value
doc.getElementById("ProjectHandlerAssigned").Click
doc.getElementById("IsEmailRequested").Click
doc.getElementById("ProjectHandler").Value = Replace(Worksheets("Needs Assessment").Cells(hNamerow(), 2).Value, " ", ".") & "@ul.com"
doc.getElementById("Name").Value = Worksheets("Needs Assessment").Cells(cemailrow(), 5).Value
doc.getElementById("Description").Value = Worksheets("Needs Assessment").Cells(Scoperow(), 5).Value
doc.getElementById("OrderNumber").Value = Worksheets("Needs Assessment").Cells(Partyrow(), 5).Value
doc.getElementById("QuoteNo").Value = Worksheets("Needs Assessment").Cells(Quoterow(), 2).Value
doc.getElementById("FileNo").Value = Worksheets("Needs Assessment").Cells(Filerow(), 2).Value
doc.getElementById("ProjectCcn").Value = Worksheets("Needs Assessment").Cells(CCNrow(), 2).Value

ResponseForm.Caption = "Create Project and paste URL below(CTRL+V to paste)"
ResponseForm.Show
'form is modal, program continues after form close
'x = 4
'Do
'    Worksheets("Associated Projects").Cells(x, 2).Value = ""
'    Worksheets("Associated Projects").Cells(x, 3).Value = ""
'    Worksheets("Associated Projects").Cells(x, 4).Value = ""
'    x = x + 1
'Loop Until Worksheets("Associated Projects").Cells(x, 2).Value = ""
'TemplateForm.ComboBox1.ListIndex
'Worksheets("Associated Projects").Cells(3 + TemplateForm.TabStrip1.TabIndex, 2).Value = "Line " & TemplateForm.TabStrip1.TabIndex
'Worksheets("Associated Projects").Cells(3 + TemplateForm.TabStrip1.TabIndex, 3).Value = ResponseForm.TextBox1.Text
'Worksheets("Associated Projects").Cells(3 + TemplateForm.TabStrip1.TabIndex, 4).Value = Mid(ResponseForm.TextBox1.Text, InStrRev(ResponseForm.TextBox1.Text, "\" + 1))
Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 2).Value = "Line " & TemplateForm.ComboBox1.ListIndex
Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 3).Value = ResponseForm.TextBox1.Text
'Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 4).Value = Mid(ResponseForm.TextBox1.Text, InStrRev(ResponseForm.TextBox1.Text, "\" + 1))
s1 = ResponseForm.TextBox1.Text
If InStr(s1, "Task") > 0 Then
    s2 = Mid(s1, InStr(s1, "Project") + 8, Len(s1) - (InStr(s1, "Project") + 8) + 1)
    Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 4).Value = Mid(s2, 1, InStr(s2, "/") - 1)
'ElseIf InStr(s1, "Documents") And InStr(s1, "?") Then
Else
    s2 = Mid(s1, InStrRev(s1, "/") + 1, 32) ' Len(s1) - (InStrRev(s1, "/") + 1) + 1)
    Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 4).Value = s2 ' Mid(s2, 1, InStr(s2, "/") - 1)
End If

End Sub

Private Sub CommandButton5_Click() 'Apply Template - need to add adjustments for previously applied tasks

Dim s1 As String, s2 As String, x1 As Long, x2 As Long, x3 As Long, s3 As String, y As Long, y2 As Long, totalTasks As Long
Dim pWebAddress As String, flexNum As String, pwebAddressx As String, temp As String, temp2 As String, temp3 As String, temp4 As String, notChecked As Long, checkedCount As Long
Dim IE As InternetExplorer, curMaxTask As Long, x
Dim tbl As Object, td As Object, fld As Object, div As Object, li As Object, div2 As Object, div3 As Object
Dim doc As HTMLDocument, doc2 As HTMLDocument, cEmail As String, cPhone As String
Dim elem As HTMLBaseElement, x9 As HTMLBaseElement, x10 As HTMLBaseElement, parentTasks() As Long, curMax As Long
Dim docx() As HTMLDocument, IEx() As InternetExplorer, shx(), eachIEx()
Dim predecessorNameCol() As New Collection, predecessorNumCol() As New Collection, parent() As String, newTaskCount As Long
Dim sh
Dim eachIE
Dim taskMsg As String, index As Long

temp = "Tasks not selected: " & vbLf & vbLf
temp3 = ""
index = Worksheets("Needs Assessment").Shapes("Drop Down 85").ControlFormat.ListIndex - 1
x = 3
Do
  If Worksheets("Templates").Cells(x, 6 + 8 * (index)).Value <> "" Then
    temp3 = Worksheets("Templates").Cells(x, 6 + 8 * (index)).Value
    x1 = 4
    Do
        If Worksheets("Task-scratch").Cells(x1, 8 + 8 * TemplateForm.ComboBox1.ListIndex).Value = Worksheets("Templates").Cells(x, 2 + 8 * (index)).Value Then
            temp3 = ""
        End If
        x1 = x1 + 1
    Loop Until Worksheets("Task-scratch").Cells(x1, 8 + 8 * TemplateForm.ComboBox1.ListIndex).Value = ""
    x1 = 3
    Do
        If Worksheets("Create Templates").Cells(x1, 2 + 8 * TemplateForm.ComboBox1.ListIndex).Value = Worksheets("Templates").Cells(x, 2 + 8 * (index)).Value Then
            temp3 = ""
        End If
        x1 = x1 + 1
    Loop Until Worksheets("Create Templates").Cells(x1, 2 + 8 * TemplateForm.ComboBox1.ListIndex).Value = ""
    
    If temp3 <> "" Then
        temp = temp & Worksheets("Templates").Cells(x, 2 + 8 * (index)).Value & ": " & temp3 & vbLf & vbLf
    End If
  End If
  x = x + 1
Loop Until Worksheets("Templates").Cells(x, 2 + 8 * (index)).Value = ""
MsgBox temp

'curMaxTask = Worksheets("Task-scratch").Cells(2, 8 + 8 * curTab).Value
If Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 4).Value = "" Then   'TemplateForm.TabStrip1.TabIndex, 4).Value = "" Then
    ResponseForm.Caption = "Copy URL for Flex profile to be used(CTRL+V to paste)"
    ResponseForm.Show
    Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 2).Value = "Line " & TemplateForm.ComboBox1.ListIndex
    Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 3).Value = ResponseForm.TextBox1.Text
    'Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 4).Value = Mid(ResponseForm.TextBox1.Text, InStrRev(ResponseForm.TextBox1.Text, "\" + 1))
    s1 = ResponseForm.TextBox1.Text
If InStr(s1, "Task") > 0 Then
    s2 = Mid(s1, InStr(s1, "Project") + 8, Len(s1) - (InStr(s1, "Project") + 8) + 1)
    Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 4).Value = Mid(s2, 1, InStr(s2, "/") - 1)
Else
    s2 = Mid(s1, InStrRev(s1, "/") + 1, 32) ' Len(s1) - (InStrRev(s1, "/") + 1) + 1)
    Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 4).Value = s2 ' Mid(s2, 1, InStr(s2, "/") - 1)
End If
    If Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 4).Value = "" Then
        Exit Sub
    End If
End If

flexNum = Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 4).Value
pWebAddress = "https://portal.ul.com/Project/" & Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 4).Value & "/Task?&viewType=List"  ' Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 3).Value & "/Task"
Set IE = New InternetExplorer 'NewValidIE(pWebAddress)
IE.navigate pWebAddress
While IE.Busy
  DoEvents
  Wend
Do
  Set sh = New Shell32.Shell
  For Each eachIE In sh.Windows
    If InStr(1, eachIE.LocationURL, pWebAddress) Then
      Set IE = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
      Exit Do
      End If
    Next eachIE
  Loop
Set eachIE = Nothing
Set sh = Nothing
While IE.Busy  ' The new process may still be busy even after you find it
  DoEvents
  Wend

IE.Visible = True



x3 = 2
Do
    x3 = x3 + 1
Loop Until Worksheets("Create Templates").Cells(x3, 2 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value = ""
x3 = x3 - 3
ReDim IEx(x3)
ReDim predecessorNameCol(x3)
ReDim predecessorNumCol(x3)
ReDim parent(x3)
ReDim docx(x3)
newTaskCount = x3
StatusForm.Show
StatusForm.Label1.Caption = "Creating new tasks"
x3 = 0
temp = ""
Do
'    Set IEx(x3) = NewValidIE(pWebAddress & temp)
'    Set IEx(x3) = NewValidIEUnloaded(pWebAddress)    'Set IEx(x3) = CreateObject("InternetExplorer.Application")
    Set IEx(x3) = New InternetExplorer
    IEx(x3).navigate pWebAddress & temp
    x3 = x3 + 1
    temp = temp & "?"
Loop Until x3 = newTaskCount

Do
    'Do
    '    Sleep 25
    'Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
    'Set IEx(x3) = New InternetExplorer 'NewValidIE(pWebAddress)
    'IEx(x3).navigate pWebAddress
    'While IEx(x3).Busy
    '    DoEvents
    'Wend
    Do
        Set sh = New Shell32.Shell
        For Each eachIE In sh.Windows
            If InStr(1, eachIE.LocationURL, pWebAddress) Then
                Set IEx(x3) = eachIE
      'IE.Visible = False  'This is here because in some environments, the new process defaults to Visible.
                Exit Do
            End If
        Next eachIE
    Loop
    Set eachIE = Nothing
    Set sh = Nothing
    While IEx(x3).Busy  ' The new process may still be busy even after you find it
        DoEvents
    Wend
   
    IEx(x3).Visible = True
    IEx(x3).Top = 0
    IEx(x3).Left = 0
    'IEx(x3).Height = 0
    'IEx(x3).Width = 0
    Set docx(x3) = IEx(x3).Document
    
    'parent task name
    If Worksheets("Create Templates").Cells(x3 + 3, 3 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value > 0 Then
        parent(x3) = Worksheets("Create Templates").Cells(2 + Worksheets("Create Templates").Cells(x3 + 3, 3 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value, 2 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value
    End If
    If Worksheets("Create Templates").Cells(x3 + 3, 3 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value < 0 Then
        parent(x3) = Worksheets("Task-scratch").Cells(Abs(Worksheets("Create Templates").Cells(x3 + 3, 3 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value) + 3, 8 + 8 * TemplateForm.ComboBox1.ListIndex).Value
    End If
    
    'assign predecessor task NAME's
    If Worksheets("Create Templates").Cells(x3 + 3, 4 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value <> "" Then
        temp = Worksheets("Create Templates").Cells(x3 + 3, 4 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value
        temp2 = ""
        temp3 = ""
        If InStr(temp, ",") Then
            Do
                temp3 = CLng(Mid(temp, 1, InStr(temp, ",") - 1))
                If temp3 > 0 Then
                    predecessorNameCol(x3).Add (Worksheets("Create Templates").Cells(CLng(temp3) + 2, 2 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value)
                Else
                    predecessorNumCol(x3).Add (Worksheets("Task-scratch").Cells(Abs(CLng(temp3)) + 3, 7 + 8 * TemplateForm.ComboBox1.ListIndex).Value)
                End If
                temp = Mid(temp, InStr(temp, ",") + 1)
            Loop Until InStr(temp, ",") < 1
        End If
        temp3 = CLng(temp)
        If temp3 > 0 Then
            predecessorNameCol(x3).Add (Worksheets("Create Templates").Cells(CLng(temp3) + 2, 2 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value)
        Else
            predecessorNumCol(x3).Add (Worksheets("Task-scratch").Cells(Abs(CLng(temp3)) + 3, 7 + 8 * TemplateForm.ComboBox1.ListIndex).Value)
        End If
    End If
    x3 = x3 + 1
Loop Until x3 = newTaskCount


Do
Sleep 25
Set doc = IE.Document
Loop Until Not (doc.getElementById("addATask") Is Nothing)
Set doc = IE.Document

'get any existing parent task information here and identify current max task #
Set x9 = doc.getElementById("body").Children(0).Children(2).Children(5).Children(0).Children(1).Children(0)
'Clear tasks in sheet
y2 = 0
Do
    Worksheets("Documents").Cells(7 + y2, 51).Value = ""
    Worksheets("Documents").Cells(7 + y2, 52).Value = ""
    Worksheets("Documents").Cells(7 + y2, 53).Value = ""
    Worksheets("Documents").Cells(7 + y2, 54).Value = ""
    y2 = y2 + 1
Loop Until Worksheets("Documents").Cells(7 + y2, 52).Value = ""

Set x9 = x9.Children.Item(x9.Children.Length - 2)
totalTasks = x9.parentElement.parentElement.Children.Length ' need to adjust the totalTasks for predecessor/parent task numbering. Need to identify the current max task # instead.

For y = 1 To totalTasks
    Worksheets("Documents").Cells(6 + y, 51).Value = x9.parentElement.parentElement.Children(y - 1).Children(1).innerText 'doc.getElementById("body").Children(0).Children(2).Children(3).Children(0).Children(1).Children(y - 1).Children(2).innerText
    Worksheets("Documents").Cells(6 + y, 52).Value = x9.parentElement.parentElement.Children(y - 1).Children(2).innerText 'doc.getElementById("body").Children(0).Children(2).Children(3).Children(0).Children(1).Children(y - 1).Children(2).innerText
    If x9.parentElement.parentElement.Children(y - 1).Children(4).innerText = "Completed" Or x9.parentElement.parentElement.Children(y - 1).Children(4).innerText = "Canceled" Then
        s1 = x9.parentElement.parentElement.Children(y - 1).Children(11).Children(0).Children(0).Children(1).Children(0).innerHTML 'doc.getElementById("body").Children(0).Children(2).Children(3).Children(0).Children(1).Children(y - 1).Children(2).Children(11).Children(0).Children(1).Children(1).Children(0).innerHTML
        Worksheets("Documents").Cells(6 + y, 53).Value = Mid(s1, InStr(s1, "/Task/Detail/") + 13, 77) ' Len(s1) - (InStr(s1, "view_") + 5) + 1)
    Else
        s1 = x9.parentElement.parentElement.Children(y - 1).Children(11).Children(0).Children(1).Children(1).Children(0).innerHTML 'doc.getElementById("body").Children(0).Children(2).Children(3).Children(0).Children(1).Children(y - 1).Children(2).Children(11).Children(0).Children(1).Children(1).Children(0).innerHTML
        Worksheets("Documents").Cells(6 + y, 53).Value = Mid(s1, InStr(s1, "/Task/Detail/") + 13, 77) ' Len(s1) - (InStr(s1, "view_") + 5) + 1)
    End If
Next y



curMax = Worksheets("Task-scratch").Cells(2, 8 + 8 * TemplateForm.ComboBox1.ListIndex).Value
notChecked = 0
z = 3
Do
    Do
        DoEvents
    Loop Until IEx(z - 3).readyState = READYSTATE_COMPLETE
    Sleep 50
    Do
        DoEvents
        Set docx(z - 3) = IEx(z - 3).Document
    Loop Until Not (docx(z - 3).getElementById("addATask") Is Nothing)
    docx(z - 3).getElementById("addATask").Click
    z = z + 1
Loop Until Worksheets("Create Templates").Cells(z, 2 + 8 * TemplateForm.ComboBox1.ListIndex).Value = ""

z = 3
Do
        Do
            Sleep 25
            Set docx(z - 3) = IEx(z - 3).Document
        Loop Until Not (docx(z - 3).getElementById("btnCreateTask") Is Nothing)
        Set docx(z - 3) = IEx(z - 3).Document
        
        'assign predefined task names
        If Worksheets("Create Templates").Cells(z, 7 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value <> "" Then
            docx(z - 3).getElementById("tbox").NextSibling.Click
            Do
                Sleep 25
                'Set docx(z - 3) = IEx(z - 3).Document
                'Debug.Print z - 3
                Set docx(z - 3) = IEx(z - 3).Document
            Loop Until docx(z - 3).getElementById("ui-id-2").Children.Length <> 0
            Set docx(z - 3) = IEx(z - 3).Document
            docx(z - 3).getElementById(Worksheets("Create Templates").Cells(z, 7 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value).Click
        Else
            docx(z - 3).getElementById("tbox").Value = Worksheets("Create Templates").Cells(z, 2 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value
            docx(z - 3).getElementById("TaskName").Value = Worksheets("Create Templates").Cells(z, 2 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value
        End If ' for when task is predefined task with ID #
        
 ''' moved below to separate loop for handling all tasks at once
        'assign parent task #, if not a parent task
'        If Worksheets("Create Templates").Cells(z, 3 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value > 0 Then
'            Debug.Print "Parent task assignment: sheet value - " & Worksheets("Create Templates").Cells(z, 3 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value & "; curMax - " & curMax
'            doc.getElementById("ParentTaskNumber").Value = CStr(CLng(Worksheets("Create Templates").Cells(z, 3 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value) + curMax)
'        End If
'        If Worksheets("Create Templates").Cells(z, 3 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value < 0 Then
'            Debug.Print "Parent task assignment: sheet value - " & Worksheets("Create Templates").Cells(z, 3 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value & "; curMax - " & curMax
'            doc.getElementById("ParentTaskNumber").Value = Worksheets("Task-scratch").Cells(Abs(Worksheets("Create Templates").Cells(z, 3 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value) + 3, 7 + 8 * TemplateForm.ComboBox1.ListIndex).Value
'        End If
'
'
'        'assign predecessor task #'s
'        If Worksheets("Create Templates").Cells(z, 4 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value <> "" Then
'        temp = Worksheets("Create Templates").Cells(z, 4 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value
'        temp2 = ""
'        temp3 = ""
'        If InStr(temp, ",") Then
'            Do
'                temp3 = CLng(Mid(temp, 1, InStr(temp, ",") - 1))
'                Debug.Print temp3
'                If temp2 = "" Then
'                    If temp3 > 0 Then
'                        'temp2 = CStr(CInt(Mid(temp, 1, InStr(temp, ",") - 1)) + curMax)
'                        temp2 = CLng(temp3) + curMax
'                    Else
'                        temp2 = Worksheets("Task-scratch").Cells(Abs(CLng(temp3)) + 3, 7 + 8 * TemplateForm.ComboBox1.ListIndex).Value
'                    End If
'                Else
'                    'temp2 = temp2 & "," & CStr(CInt(Mid(temp, 1, InStr(temp, ",") - 1)) + curMax)
'                    If temp3 > 0 Then
'                        temp2 = temp2 & "," & CLng(temp3) + curMax
'                    Else
'                        temp2 = temp2 & "," & Worksheets("Task-scratch").Cells(Abs(CLng(temp3)) + 3, 7 + 8 * TemplateForm.ComboBox1.ListIndex).Value
'                    End If
'
'                End If
'                temp = Mid(temp, InStr(temp, ",") + 1)
'            Loop Until InStr(temp, ",") < 1
'            checkedCount = 0
'            'temp2 = temp2 & ", " & CStr(CInt(Mid(temp, 1, InStr(temp, ",") - 1)) + curMax)
'            temp3 = CLng(temp)
'            If temp3 > 0 Then
'                temp2 = temp2 & "," & CLng(temp3) + curMax
'            Else
'                temp2 = temp2 & "," & Worksheets("Task-scratch").Cells(Abs(CLng(temp3)) + 3, 7 + 8 * TemplateForm.ComboBox1.ListIndex).Value
'            End If
'        Else
'            temp3 = CLng(temp)
'            Debug.Print temp3
'            'temp2 = CStr(CInt(temp) + curMax)
'            If temp3 > 0 Then
'                'temp2 = CStr(CInt(Mid(temp, 1, InStr(temp, ",") - 1)) + curMax)
'                 temp2 = CLng(temp3) + curMax
'            Else
'                temp2 = Worksheets("Task-scratch").Cells(Abs(CLng(temp3)) + 3, 7 + 8 * TemplateForm.ComboBox1.ListIndex).Value
'            End If
'        End If
'        doc.getElementById("PredecessorTask").Value = temp2
'        End If
        
        'Assign task owner
        If Worksheets("Create Templates").Cells(z, 8 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value <> "" Then
            docx(z - 3).getElementById("TaskOwner").Value = Worksheets("Create Templates").Cells(z, 8 + 8 * (TemplateForm.ComboBox1.ListIndex)).Value
        End If
        Sleep 25
        Set x9 = docx(z - 3).getElementById("body").Children(0).Children(2).Children(5).Children(0).Children(1).Children(0)
        Set x9 = x9.Children.Item(x9.Children.Length - 2)
        x = x9.parentElement.parentElement.Children.Length 'gets # of tasks before new task is created
        
        
        'Exit Sub 'debugging
        'GoTo RepeatParent 'debugging
        Debug.Print z - 3
        docx(z - 3).getElementById("btnCreateTask").Click
RepeatParent:
        z = z + 1
Loop Until Worksheets("Create Templates").Cells(z, 2 + 8 * TemplateForm.ComboBox1.ListIndex).Value = ""
        
StatusForm.Label1.Caption = "Assigning parent and predecessor task numbers"
debugLoop2:
'prepare parent/predecessor task info
z = 3
Do
        Do
         Do
            Sleep 25
            Set docx(z - 3) = IEx(z - 3).Document
         Loop Until docx(z - 3).getElementById("btnCreateTask") Is Nothing
         Do
            DoEvents
         Loop Until IEx(z - 3).readyState = READYSTATE_COMPLETE
         Sleep 200
         Do
            Sleep 25
            Set docx(z - 3) = IEx(z - 3).Document
         Loop Until Not (docx(z - 3).getElementById("body") Is Nothing)
         Set docx(z - 3) = IEx(z - 3).Document
         Set x9 = docx(z - 3).getElementById("body").Children(0).Children(2).Children(5).Children(0).Children(1).Children(0)
         Set x9 = x9.Children.Item(x9.Children.Length - 2)
        Loop Until x < x9.parentElement.parentElement.Children.Length 'only moves on once a new task shows up.
         
         Do
            Sleep 25
            Set docx(z - 3) = IEx(z - 3).Document
         Loop Until Not (docx(z - 3).getElementById("addATask") Is Nothing)
         Do
            DoEvents
         Loop Until IEx(z - 3).readyState = READYSTATE_COMPLETE
         Sleep 100
         Do
            Sleep 25
            Set docx(z - 3) = IEx(z - 3).Document
         Loop Until Not (docx(z - 3).getElementById("body") Is Nothing)
         Set docx(z - 3) = IEx(z - 3).Document

    z = z + 1
Loop Until Worksheets("Create Templates").Cells(z, 2 + 8 * TemplateForm.ComboBox1.ListIndex).Value = ""


'start load of main project edit page to verify the auto-close option is checked.
'GoTo debugLoop2
doc.getElementById("create").Click

'2nd load loop for getting and assigning predecessor/parent task values.
z = 3
Do
taskLoad:
'determine parent task # based on task name
    Set x9 = docx(z - 3).getElementById("body").Children(0).Children(2).Children(5).Children(0).Children(1).Children(0)
    Set x9 = x9.Children.Item(x9.Children.Length - 2)
    Set x10 = Nothing
    temp = ""
    If parent(z - 3) <> "" Then
        y = 1
        Do
            Debug.Print x9.parentElement.parentElement.Children(y - 1).Children(2).innerText
            Debug.Print parent(z - 3)
            If InStr(x9.parentElement.parentElement.Children(y - 1).Children(2).innerText, parent(z - 3)) > 0 Then
                temp = x9.parentElement.parentElement.Children(y - 1).Children(1).innerText
                Debug.Print "match found for parent task # " & x9.parentElement.parentElement.Children(y - 1).Children(1).innerText
            End If
            If InStr(x9.parentElement.parentElement.Children(y - 1).Children(2).innerText, Worksheets("Create Templates").Cells(z, 2 + 8 * TemplateForm.ComboBox1.ListIndex).Value) > 0 Then
                Set x10 = x9.parentElement.parentElement.Children(y - 1).Children(11).Children(0).Children(1).Children(1).Children(1)
                Debug.Print x10.innerHTML
            End If
            y = y + 1
        Loop Until y > x9.parentElement.parentElement.Children.Length
        If temp = "" Then
            IEx(z - 3).Refresh
            Do
                Sleep 25
                Set docx(z - 3) = IEx(z - 3).Document
            Loop Until Not (docx(z - 3).getElementById("addATask") Is Nothing)
            Do
                DoEvents
            Loop Until IEx(z - 3).readyState = READYSTATE_COMPLETE
            Sleep 100
            Do
                Sleep 25
                Set docx(z - 3) = IEx(z - 3).Document
            Loop Until Not (docx(z - 3).getElementById("body") Is Nothing)
            Set docx(z - 3) = IEx(z - 3).Document
            GoTo taskLoad
        End If
    End If
  
'determine predecessor task # based on task name
   temp3 = ""
   If predecessorNameCol(z - 3).Count > 0 Then
     Do
        temp2 = ""
        y = 1
        Do
            Debug.Print predecessorNameCol(z - 3).Count
            If predecessorNameCol(z - 3).Count = 0 Then
                Exit Do
            End If
            If InStr(x9.parentElement.parentElement.Children(y - 1).Children(2).innerText, predecessorNameCol(z - 3).Item(1)) > 0 Then
                predecessorNumCol(z - 3).Add x9.parentElement.parentElement.Children(y - 1).Children(1).innerText
                predecessorNameCol(z - 3).Remove (1)
                Debug.Print "match found for predecessor task # " & x9.parentElement.parentElement.Children(y - 1).Children(1).innerText
                temp2 = "x"
            End If
            If InStr(x9.parentElement.parentElement.Children(y - 1).Children(2).innerText, Worksheets("Create Templates").Cells(z, 2 + 8 * TemplateForm.ComboBox1.ListIndex).Value) > 0 Then
                Set x10 = x9.parentElement.parentElement.Children(y - 1).Children(11).Children(0).Children(1).Children(1).Children(1)
                Debug.Print x10.innerHTML
            End If
            y = y + 1
        Loop Until y > x9.parentElement.parentElement.Children.Length Or predecessorNameCol(z - 3).Count = 0 ' Worksheets("Documents").Cells(y + 6, 51).Value = ""
        If temp2 = "" Then
            IEx(z - 3).Refresh
            Do
                Sleep 25
                Set docx(z - 3) = IEx(z - 3).Document
            Loop Until Not (docx(z - 3).getElementById("addATask") Is Nothing)
            Do
                DoEvents
            Loop Until IEx(z - 3).readyState = READYSTATE_COMPLETE
            Sleep 100
            Do
                Sleep 25
                Set docx(z - 3) = IEx(z - 3).Document
            Loop Until Not (docx(z - 3).getElementById("body") Is Nothing)
            Set docx(z - 3) = IEx(z - 3).Document
            GoTo taskLoad
        End If
     Loop Until predecessorNameCol(z - 3).Count = 0
   End If
          
    If predecessorNumCol(z - 3).Count <> 0 Then
        temp3 = ""
        Do
            If temp3 = "" Then
                temp3 = predecessorNumCol(z - 3).Item(1)
            Else
                temp3 = temp3 & "," & predecessorNumCol(z - 3).Item(1)
            End If
            predecessorNumCol(z - 3).Remove (1)
        Loop Until predecessorNumCol(z - 3).Count = 0
    End If
    
  If temp <> "" Or temp3 <> "" Then
    
    '''
'pWebAddressx(x3) = "https://portal.ul.com/Project/" & Worksheets("Needs Assessment").Cells(Projectrow(), 5).Value & "/Task/Detail/" & Worksheets("Documents").Cells(6 + y, 53).Value
'Set IEx(x3) = NewValidIE(pWebAddressx(x3))
'IEx(x3).Visible = True''
'
'While IEx(x3).Busy  ' The new process may still be busy even after you find it
'  DoEvents
'  Wend
'Sleep 25
'Do
'DoEvents
'Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
'Set docx(x3) = IEx(x3).Document'
'
'login:
'If docx(x3).getElementById("body") Is Nothing Then
'    MsgBox "Log into Flex"
'    Do
'        DoEvents
'    Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
'    Set docx(x3) = IEx(x3).Document
'    GoTo login
'End If
'
'Do
'Sleep 25
'Set docx(x3) = IEx(x3).Document
'Loop Until Not (docx(x3).getElementById("gritternotifications") Is Nothing)'
'
'Set x9 = docx(x3).getElementById("body").Children(0).Children(3)
'Set x9 = x9.Children(1)
'Set x9 = x9.Children(1)
'Set x9 = x9.Children(0)
'If InStr(LCase(x9.innerText), LCase("COMPLETED")) > 1 Or InStr(LCase(x9.innerText), LCase("CANCELED")) > 1 Or InStr(LCase(x9.innerText), LCase("CANCELLED")) > 1 Then
'    GoTo taskCompleted
'End If
'docx(x3).getElementById("editTask").Click
'Do
'Sleep 25
'Set docx(x3) = IEx(x3).Document
'Loop Until Not (docx(x3).getElementById("modal-task-documents") Is Nothing)
'Sleep 25
'Do
'    DoEvents
'Loop Until IEx(x3).readyState = READYSTATE_COMPLETE
  
    
    
    
    
    y = 1
    Do
        If InStr(x9.parentElement.parentElement.Children(y - 1).Children(2).innerText, Worksheets("Create Templates").Cells(z, 2 + 8 * TemplateForm.ComboBox1.ListIndex).Value) > 0 Then
            Set x10 = x9.parentElement.parentElement.Children(y - 1).Children(11).Children(0).Children(1).Children(1).Children(0)
            'Debug.Print x10.innerHTML
        End If
        y = y + 1
    Loop Until y = x9.parentElement.parentElement.Children.Length
    'x10.parentElement.previousSibling.Click
    'Sleep 10
    'x10.Click  'docx(z - 3).getElementById("addATask").Click
    'Debug.Print Mid(x10.innerHTML, InStr(x10.innerHTML, "href=") + 6, Len(x10.innerHTML) - (InStr(x10.innerHTML, "href=") + 6) + 1 - 15)
    'Debug.Print "https://portal.ul.com" & Mid(x10.innerHTML, InStr(x10.innerHTML, "href=") + 6, Len(x10.innerHTML) - (InStr(x10.innerHTML, "href=") + 6) + 1 - 15)
    IEx(z - 3).navigate "https://portal.ul.com" & Mid(x10.innerHTML, InStr(x10.innerHTML, "href=") + 6, Len(x10.innerHTML) - (InStr(x10.innerHTML, "href=") + 6) + 1 - 15) 'go to individual task view
    Do
        DoEvents
    Loop Until IEx(z - 3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 25
        Set docx(z - 3) = IEx(z - 3).Document
    Loop Until Not (docx(z - 3).getElementById("editTask") Is Nothing)
    Do
        DoEvents
    Loop Until IEx(z - 3).readyState = READYSTATE_COMPLETE
    Set docx(z - 3) = IEx(z - 3).Document
    docx(z - 3).getElementById("editTask").Click
    
    Do
        DoEvents
    Loop Until IEx(z - 3).readyState = READYSTATE_COMPLETE
    Do
        Sleep 25
        Set docx(z - 3) = IEx(z - 3).Document
    Loop Until Not (docx(z - 3).getElementById("btnUpdateTask") Is Nothing)
    Set docx(z - 3) = IEx(z - 3).Document
    docx(z - 3).getElementById("ParentTaskNumber").Value = temp
    Sleep 25
    docx(z - 3).getElementById("PredecessorTask").Value = temp3
    Sleep 50
    docx(z - 3).getElementById("btnUpdateTask").Click
  End If
    z = z + 1
Loop Until Worksheets("Create Templates").Cells(z, 2 + 8 * TemplateForm.ComboBox1.ListIndex).Value = ""


StatusForm.Label1.Caption = "Verifying auto-complete enabled"
'edit project and ensure that auto-close flag is set here.
Do
DoEvents
Loop Until IE.readyState = READYSTATE_COMPLETE
Do
Sleep 5
Set doc = IE.Document
Loop Until Not (doc.getElementById("AdditionalCriteria") Is Nothing)

If doc.getElementById("OverrideAutoComplete").Value = True Then
    doc.getElementById("OverrideAutoComplete").Click
    Sleep 25
    doc.getElementById("btneditProject").Click
    Do
        Sleep 25
        Set doc = IE.Document
    Loop Until Not (doc.getElementById("addATask") Is Nothing)
    Do
        DoEvents
    Loop Until IE.readyState = READYSTATE_COMPLETE
    Sleep 100
    Do
        Sleep 25
        Set doc = IE.Document
    Loop Until Not (doc.getElementById("body") Is Nothing)
    Set doc = IE.Document
End If

StatusForm.Hide

'cleanup
IE.Quit
Set doc = Nothing
Set IE = Nothing
z = 3
Do
    IEx(z - 3).Quit
    Set docx(z - 3) = Nothing
    Set IEx(z - 3) = Nothing
    z = z + 1
Loop Until Worksheets("Create Templates").Cells(z, 2 + 8 * TemplateForm.ComboBox1.ListIndex).Value = ""


End Sub

Private Sub CommandButton6_Click() 'open link to project task section
    Dim pWebAddress As String
    Dim x As Long, curTab As Long
    curTab = TemplateForm.ComboBox1.ListIndex 'TemplateForm.TabStrip1.SelectedItem.index

If Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 4).Value = "" Then   'TemplateForm.TabStrip1.TabIndex, 4).Value = "" Then
    ResponseForm.Caption = "Copy URL for Flex profile to be used(CTRL+V to paste)"
    ResponseForm.Show
    Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 2).Value = "Line " & TemplateForm.ComboBox1.ListIndex
    Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 3).Value = ResponseForm.TextBox1.Text
s1 = ResponseForm.TextBox1.Text
If InStr(s1, "Task") > 0 Then
    s2 = Mid(s1, InStr(s1, "Project") + 8, Len(s1) - (InStr(s1, "Project") + 8) + 1)
    Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 4).Value = Mid(s2, 1, InStr(s2, "/") - 1)
'ElseIf InStr(s1, "Documents") And InStr(s1, "?") Then
Else
    s2 = Mid(s1, InStrRev(s1, "/") + 1, 32) ' Len(s1) - (InStrRev(s1, "/") + 1) + 1)
    Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 4).Value = s2 ' Mid(s2, 1, InStr(s2, "/") - 1)
End If
    
    'Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 4).Value = Mid(ResponseForm.TextBox1.Text, InStrRev(ResponseForm.TextBox1.Text, "\" + 1))
    If Worksheets("Associated Projects").Cells(4 + TemplateForm.ComboBox1.ListIndex, 4).Value = "" Then
        Exit Sub
    End If
End If
    pWebAddress = "https://portal.ul.com/Project/" & Worksheets("Associated Projects").Cells(4 + curTab, 4).Value & "/Task"

    Call NewShell(pWebAddress, 3)

End Sub

Private Sub CommandButton7_Click() ' assign task to handler

Dim x As Long, curTab As Long
curTab = TemplateForm.ComboBox1.ListIndex 'TemplateForm.TabStrip1.SelectedItem.index

x = 3
Do
  If Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = True Then
        Worksheets("Create Templates").Cells(x, 8 + 8 * (curTab)).Value = Worksheets("Needs Assessment").Cells(hemailrow(), 2).Value
  End If
  x = x + 1
Loop Until Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value = ""
Call RefreshTemplate

End Sub

Private Sub CommandButton8_Click() ' assign task to reviewer

Dim x As Long, curTab As Long
curTab = TemplateForm.ComboBox1.ListIndex 'TemplateForm.TabStrip1.SelectedItem.index

x = 3
Do
  If Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = True Then
        Worksheets("Create Templates").Cells(x, 8 + 8 * (curTab)).Value = Worksheets("Needs Assessment").Cells(remailrow(), 2).Value
  End If
    x = x + 1
Loop Until Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value = ""
Call RefreshTemplate
End Sub

Private Sub CommandButton9_Click() ' records assigned predecessor #'s

Dim y As Long, x As Long, temp As String, curTab As Long, z As Long
Dim crossover As Long

x = 4
Do
    x = x + 1
Loop Until Worksheets("Task-scratch").Cells(x, 8 + 8 * (curTab)).Value = ""
crossover = x - 4

curTab = TemplateForm.ComboBox1.ListIndex

temp = ""
If TemplateForm.ListBox1.ListCount <> 0 Then
    x = 0
    Do
        If TemplateForm.ListBox1.Selected(x) = True Then
            If temp = "" Then
                If x - crossover > -1 Then 'there is no task #0
                    temp = x - crossover + 1
                Else
                    temp = "-" & x + 1
                End If
            Else
                If x - crossover > -1 Then
                    temp = temp & "," & CStr(x - crossover + 1)
                Else
                    temp = temp & "," & "-" & x + 1
                End If
            End If
        End If
        x = x + 1
    Loop Until x = TemplateForm.ListBox1.ListCount
End If
Debug.Print temp

z = 3 'assign predecessors to all checked boxes
Do
    If Worksheets("Create Templates").Cells(z, 5 + 8 * (curTab)).Value = True Then
        Worksheets("Create Templates").Cells(z, 4 + 8 * curTab).Value = temp
    End If
    z = z + 1
Loop Until Worksheets("Create Templates").Cells(z, 2 + 8 * (curTab)).Value = ""
TemplateForm.Frame1.Visible = False

End Sub

Private Sub ListView1_OLESetData(Data As MSComctlLib.DataObject, DataFormat As Integer)
    Dim i As Integer, zw As String
 
    For i = 1 To ListView1.ListItems.Count
        If ListView1.ListItems(i).Selected Then
            If Len(zw) <> 0 Then
                zw = zw & vbCrLf
            End If
            zw = zw & ListView1.ListItems(i).Text
        End If
    Next
    
    Data.setData zw
    DataFormat = vbCFText

End Sub

Private Sub TreeView1_KeyDown(KeyCode As Integer, ByVal Shift As Integer)

'Dim x As Long'
'If KeyCode = 17 Then
'For x = 1 To TreeView1.Nodes.Count
'    If TreeView1.Nodes(x).Selected = True Then
'        TreeView1.Nodes(x).BackColor = RGB(0, 150, 255)
'        TreeView1.Nodes(x).ForeColor = RGB(255, 255, 255)
'    End If
'Next x
'End If

End Sub

Private Sub TreeView1_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As stdole.OLE_XPOS_PIXELS, ByVal y As stdole.OLE_YPOS_PIXELS)
'MsgBox Shift 'Cntr = 2
Dim i As Integer
Dim li As ListItem
Dim SaveDriveDir As String, mypath As String, s1 As String
Dim fName As Variant
Dim curTab As Long

    Dim sNode As Node
    Dim dNode As Node, xNode As Node
    Dim dNodeKey As String
    Dim dNodeTxt As String
    Dim newNodeKey As String, hitNodeKey As String
    Dim newNodeTxt As String, hitNodeTxt As String


'Button = 1 for left, 2 for Right button
Exit Sub ' changed to checkbox method. HitNode function not reliable

If Button = 2 Then
    
    ' populate listbox with predecessor task names
    Set sNode = TreeView1.SelectedItem
    Set dNode = TreeView1.HitTest(x, y * 18)
    TemplateForm.Frame1.Top = y
    TemplateForm.Frame1.Left = x
    
    Debug.Print dNode.Key
    hitNodeKey = dNode.Key ' sNode.Key
    hitNodeTxt = dNode.Text ' sNode.Text
    If Mid(hitNodeKey, 1, 1) = "%" Then
        TemplateForm.Label4.Caption = "Cannot change current applied tasks" 'future use
        TemplateForm.Frame1.Visible = False
        Exit Sub
    End If
    TemplateForm.Label6.Caption = Mid(hitNodeKey, 2) 'task # here
'    Set TreeView1.DropHighlight = dNode
    
'add new task(s) to the Create Template worksheet
curTab = TemplateForm.ComboBox1.ListIndex 'TemplateForm.TabStrip1.SelectedItem.index

'x = 4
'Do
'    TemplateForm.ListBox1.AddItem Worksheets("Task-scratch").Cells(x, 8 + 8 * (curTab)).Value
'    x = x + 1
'Loop Until Worksheets("Task-scratch").Cells(x, 8 + 8 * (curTab)).Value = ""
x = 3
Do
    TemplateForm.ListBox1.AddItem Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value
    x = x + 1
Loop Until Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value = ""

y = TemplateForm.Label6.Caption
If Worksheets("Create Templates").Cells(y, 4 + 8 * (curTab)).Value <> "" Then
    temp = Worksheets("Create Templates").Cells(y, 4 + 8 * (curTab)).Value 'holds part of string left to be analyzed
    temp2 = "" 'individual task #
    temp3 = "" 'new string to be applied
    If InStr(temp, ",") Then
        Do
            temp2 = CStr(CInt(Mid(temp, 1, InStr(temp, ",") - 1))) 'individual predecessor task #
            TemplateForm.ListBox1.Selected(CInt(temp2)) = True
            temp = Mid(temp, InStr(temp, ",") + 1)
        Loop Until InStr(temp, ",") < 1
        temp2 = temp 'individual predecessor task #
        TemplateForm.ListBox1.Selected(CInt(temp2)) = True
    Else
        temp2 = temp 'individual predecessor task #
        TemplateForm.ListBox1.Selected(CInt(temp2)) = True
    End If
End If
End If



End Sub

Private Sub TreeView1_NodeCheck(ByVal Node As MSComctlLib.Node)

Dim x As Long, curTab As Long, s1 As String

curTab = TemplateForm.ComboBox1.ListIndex 'TemplateForm.TabStrip1.SelectedItem.index
s1 = Node.Key
If Mid(s1, 1, 1) = "%" Then
    x = CInt(Mid(s1, 2)) + 3
    Worksheets("Task-scratch").Cells(x, 10 + 8 * (curTab)).Value = Node.Checked
'    If Node.Parent Is Nothing And Node.Checked = False Then
'        Node.Checked = True
'        Worksheets("Task-scratch").Cells(x, 10 + 8 * (curTab)).Value = True
'        TreeView1.Nodes("%" & x - 3).Checked = True
''        TemplateForm.Label4.Caption = "Parent tasks unaffected by checkboxes"
'    End If
Else
    x = CInt(Mid(s1, 2)) + 2
    Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = Node.Checked
'    If Node.Parent Is Nothing And Node.Checked = False Then
'        Node.Checked = True
'        Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = True
'        TreeView1.Nodes("#" & x - 2).Checked = True
''        TemplateForm.Label4.Caption = "Parent tasks unaffected by checkboxes"
'    End If
End If

'Call RefreshTemplate 'Not necessary and caused flickering
End Sub

Private Sub TreeView1_NodeClick(ByVal Node As MSComctlLib.Node)
'Dim x As Long
'For x = 1 To TreeView1.Nodes.Count
'    'If Node.BackColor = RGB(0, 150, 255) Then
'    '    TreeView1.Nodes(x).BackColor = RGB(255, 255, 255)
'    '    TreeView1.Nodes(x).ForeColor = RGB(0, 0, 0)
'    '    Node.Selected = False
'    'End If
'    If TreeView1.Nodes(x).Selected = True Then
'        TreeView1.Nodes(x).BackColor = RGB(0, 150, 255)
'        TreeView1.Nodes(x).ForeColor = RGB(255, 255, 255)
'    End If
'Next x
'    Node.Selected = True
''RefreshTemplate

End Sub

Private Sub TreeView1_OLEDragDrop(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, Shift As Integer, x As Single, y As Single)
        
Dim i As Integer
Dim li As ListItem
Dim SaveDriveDir As String, mypath As String, s1 As String
Dim fName As Variant, z1 As Long
Dim curTab As Long

index = Worksheets("Needs Assessment").Shapes("Drop Down 85").ControlFormat.ListIndex - 1

If Data.GetFormat(1) = True Then 'VbCFText
    s1 = Data.GetData(1) 'values are vbCrLf delimited
End If
    Dim sNode As Node
    Dim dNode As Node, xNode As Node
    Dim dNodeKey As String
    Dim dNodeTxt As String
    Dim newNodeKey As String, hitNodeKey As String
    Dim newNodeTxt As String, hitNodeTxt As String

    On Error Resume Next
    Effect = fmDropEffectMove
    If TreeView1.HitTest(x * 20, y * 20) Is Nothing Then
        Set sNode = TreeView1.Nodes(1)
        Set dNode = TreeView1.Nodes(1)
    Else
        Set sNode = TreeView1.SelectedItem
        Set dNode = TreeView1.HitTest(x * 20, y * 20)
    End If
    
    hitNodeKey = dNode.Key ' sNode.Key
    hitNodeTxt = dNode.Text ' sNode.Text
'    If Mid(hitNodeKey, 1, 1) = "%" Then
'        TemplateForm.Label4.Caption = "Cannot add children to current parent tasks"
'        Exit Sub
'    End If
    Set TreeView1.DropHighlight = dNode
    
'add new task(s) to the Create Template worksheet
curTab = TemplateForm.ComboBox1.ListIndex 'TemplateForm.TabStrip1.SelectedItem.index
'index = curTab
x = 2
Do
    x = x + 1
Loop Until Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value = ""  'x now has the row for the first empty cell
'add new task(s) to the appropriate parent task
Do
    If InStr(s1, vbCrLf) > 0 Then
        newNodeTxt = Mid(s1, 1, InStr(s1, vbCrLf) - 1)
        z1 = 3
        Do
            If newNodeTxt = Worksheets("Templates").Cells(z1, 2 + 8 * (index)).Value Then
                Debug.Print "Match found: " & z1 & "; " & Worksheets("Templates").Cells(z1, 7 + 8 * (index)).Value
                Exit Do
            End If
            z1 = z1 + 1
        Loop Until Worksheets("Templates").Cells(z1, 2 + 8 * (index)).Value = ""
        
        Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value = newNodeTxt
        Debug.Print z1
        Worksheets("Create Templates").Cells(x, 4 + 8 * (curTab)).Value = Worksheets("Templates").Cells(z1, 4 + 8 * (index)).Value
        Worksheets("Create Templates").Cells(x, 6 + 8 * (curTab)).Value = Worksheets("Templates").Cells(z1, 6 + 8 * (index)).Value
        Worksheets("Create Templates").Cells(x, 7 + 8 * (curTab)).Value = Worksheets("Templates").Cells(z1, 7 + 8 * (index)).Value
        Worksheets("Create Templates").Cells(x, 8 + 8 * (curTab)).Value = Worksheets("Templates").Cells(z1, 8 + 8 * (index)).Value
        Set xNode = dNode
        Do While (xNode.parent Is Nothing) = False
            Set xNode = xNode.parent
        Loop
'        If Mid(hitNodeKey, 1, 1) <> "%" Then
        If Mid(xNode.Key, 1, 1) <> "%" Then
            Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = Mid(xNode.Key, 2) 'parent task #
            Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = False
            TemplateForm.TreeView1.Nodes.Add "#" & CInt(Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value), tvwChild, "#" & CStr(x - 2), Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value & " - Scheduled for: " & Worksheets("Create Templates").Cells(x, 8 + 8 * (curTab)).Value & " - PENDING TASK"
        Else
            Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = "-" & Mid(xNode.Key, 2)
            Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = False
            TemplateForm.TreeView1.Nodes.Add "%" & CStr(Abs(Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value)), tvwChild, "#" & CStr(x - 2), Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value & " - Scheduled for: " & Worksheets("Create Templates").Cells(x, 8 + 8 * (curTab)).Value & " - PENDING TASK"
            TemplateForm.TreeView1.Nodes("%" & CStr(Abs(Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value))).Expanded = True
        End If
        s1 = Mid(s1, InStr(s1, vbCrLf) + 2)
        Debug.Print "s1 = " & s1
        If TemplateForm.CheckBox1.Value = True Then
            Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = 0
        End If
        x = x + 1
    Else
        newNodeTxt = s1
        z1 = 3
        Do
            If newNodeTxt = Worksheets("Templates").Cells(z1, 2 + 8 * (index)).Value Then
                Exit Do
            End If
            z1 = z1 + 1
        Loop Until Worksheets("Templates").Cells(z1, 2 + 8 * (index)).Value = ""
        
        Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value = newNodeTxt
        Worksheets("Create Templates").Cells(x, 4 + 8 * (curTab)).Value = Worksheets("Templates").Cells(z1, 4 + 8 * (index)).Value
        Worksheets("Create Templates").Cells(x, 6 + 8 * (curTab)).Value = Worksheets("Templates").Cells(z1, 6 + 8 * (index)).Value
        Worksheets("Create Templates").Cells(x, 7 + 8 * (curTab)).Value = Worksheets("Templates").Cells(z1, 7 + 8 * (index)).Value
        Worksheets("Create Templates").Cells(x, 8 + 8 * (curTab)).Value = Worksheets("Templates").Cells(z1, 8 + 8 * (index)).Value
        
        Set xNode = dNode
        Do While (xNode.parent Is Nothing) = False
            Set xNode = xNode.parent
        Loop
'        If Mid(hitNodeKey, 1, 1) <> "%" Then
        If Mid(xNode.Key, 1, 1) <> "%" Then
            Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = Mid(xNode.Key, 2) 'parent task #
            Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = False
            If TemplateForm.CheckBox1.Value = False Then
                TemplateForm.TreeView1.Nodes.Add "#" & CInt(Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value), tvwChild, "#" & CStr(x - 2), Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value & " - Scheduled for: " & Worksheets("Create Templates").Cells(x, 8 + 8 * (curTab)).Value & " - PENDING TASK"
            Else
                TemplateForm.TreeView1.Nodes.Add Key:="#" & CStr(x - 2), Text:=Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value & " - Scheduled for: " & Worksheets("Create Templates").Cells(x, 8 + 8 * (curTab)).Value & " - PENDING TASK"
            End If
        Else
            Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = "-" & Mid(xNode.Key, 2)
            Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = False
            If TemplateForm.CheckBox1.Value = False Then
                TemplateForm.TreeView1.Nodes.Add "%" & CStr(Abs(Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value)), tvwChild, "#" & CStr(x - 2), Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value & " - Scheduled for: " & Worksheets("Create Templates").Cells(x, 8 + 8 * (curTab)).Value & " - PENDING TASK"
                TemplateForm.TreeView1.Nodes("%" & CStr(Abs(Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value))).Expanded = True
            Else
                TemplateForm.TreeView1.Nodes.Add Key:="#" & CStr(x - 2), Text:=Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value & " - Scheduled for: " & Worksheets("Create Templates").Cells(x, 8 + 8 * (curTab)).Value & " - PENDING TASK"
            End If
        End If
'        Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = Mid(xNode.Key, 2) 'parent task #
        Worksheets("Create Templates").Cells(x, 5 + 8 * (curTab)).Value = False
        TemplateForm.TreeView1.Nodes.Add "#" & CInt(Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value), tvwChild, "#" & CStr(x - 2), Worksheets("Create Templates").Cells(x, 2 + 8 * (curTab)).Value & " - Scheduled for: " & Worksheets("Create Templates").Cells(x, 8 + 8 * (curTab)).Value & " - PENDING TASK"
        s1 = Mid(s1, InStr(s1, vbCrLf) + 2)
        Debug.Print "s1 = " & s1
        If TemplateForm.CheckBox1.Value = True Then
            Worksheets("Create Templates").Cells(x, 3 + 8 * (curTab)).Value = 0
        End If
        x = x + 1
        Exit Do
    End If
Loop Until Len(s1) = 2 'Or InStr(s1, vbCrLf) < 1
    
    
TemplateForm.ListView1.ListItems.Clear
x = 3
Do
  Set li = TemplateForm.ListView1.ListItems.Add(, , Worksheets("Templates").Cells(x, 2 + 8 * (index)).Value)
  x = x + 1
Loop Until Worksheets("Templates").Cells(x, 2 + 8 * (index)).Value = ""
    
    'TemplateForm.TreeView1.Nodes.Clear
    'TemplateForm.ListView1.ListItems.Clear
    'TemplateForm.Hide
    'Call ShowTemplateForm
    'Call RefreshTemplate
End Sub

Private Sub TreeView1_OLEDragOver(Data As MSComctlLib.DataObject, Effect As Long, Button As Integer, Shift As Integer, x As Single, y As Single, State As Integer)
    Dim nodSelected As Node
    Dim nodOver As Node
    If TreeView1.SelectedItem Is Nothing Then
        Set nodSelected = TreeView1.HitTest(x * 20, y * 20)
        If Not nodSelected Is Nothing Then
            nodSelected.Selected = True
        End If
    Else
        If TreeView1.HitTest(x * 20, y * 20) Is Nothing Then
        Else
            Set nodOver = TreeView1.HitTest(x * 20, y * 20)
            Set TreeView1.DropHighlight = nodOver
        End If
    End If
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_BeforeClose(Cancel As Boolean)
Application.EnableEvents = True
Dim uform As Object, x As Long
Dim VBAEditor As Object
Dim vbProj As Object
Dim chkRef As Object

'Debug.Print VBA.UserForms.Count
'For x = 1 To Application.VBE.ActiveVBProject.VBComponents.Count
'    If Application.VBE.ActiveVBProject.VBComponents.Item(x).Name = "DocForm" Then
'        Application.VBE.ActiveVBProject.VBComponents.Remove Application.VBE.ActiveVBProject.VBComponents("DocForm")
'        Exit For
'    End If
'Next x
'For x = 1 To Application.VBE.ActiveVBProject.VBComponents.Count
'    If Application.VBE.ActiveVBProject.VBComponents.Item(x).Name = "TemplateForm" Then
'        Application.VBE.ActiveVBProject.VBComponents.Remove Application.VBE.ActiveVBProject.VBComponents("TemplateForm")
'        Exit For
'    End If
'Next x

Set VBAEditor = Application.VBE
Set vbProj = ActiveWorkbook.VBProject
For Each chkRef In vbProj.References
    If chkRef.Name <> "VBA" And chkRef.Name <> "Excel" And chkRef.Name <> "MSForms" Then
        vbProj.References.Remove chkRef
    End If
Next chkRef

Call endSub

If Sheets(1).Name = "Needs Assessment" Then
    ActiveWorkbook.Save
End If

End Sub


Private Sub Workbook_Open()
'Application.EnableEvents = False

Dim msg As String
Dim VBAEditor As Object
    Dim vbProj As Object
    Dim chkRef As Object
    Dim B1 As Boolean, B2 As Boolean, B3 As Boolean, B4 As Boolean, B5 As Boolean, B6 As Boolean, B7 As Boolean, B8 As Boolean, B9 As Boolean, B10 As Boolean, B11 As Boolean, B12 As Boolean, B13 As Boolean, B14 As Boolean, B15 As Boolean
    Dim curSheet As String, x As Long, x2 As Long, BU As Long, subsetstr As String
    Dim errorMsg As String

errorMsg = "Trust Center settings not set. Please follow instructions for First Time Users." & vbLf & vbLf & "If error persists and tool is being opened from explorer mode in sharepoint, please note new instruction item 3A. "
'On Error GoTo errorEnd

curSheet = ActiveSheet.Name
Sheets("First time user").Visible = True
Sheets("First time user").Select
Worksheets("First time user").Cells(1, 1).Select

Set VBAEditor = Application.VBE
Set vbProj = ActiveWorkbook.VBProject
errorMsg = ""
msg = ""
For Each chkRef In vbProj.References
    msg = msg & ", " & chkRef.Name & " : " & chkRef.FullPath & vbLf
    If chkRef.Name = "VBA" Then
        B1 = True
    End If
    If chkRef.Name = "Excel" Then
        B2 = True
    End If
    If chkRef.Name = "stdole" Then
        B3 = True
    End If
    If chkRef.Name = "Office" Then
        B4 = True
    End If
    If chkRef.Name = "MSForms" Then
        B5 = True
    End If
    If chkRef.Name = "Word" Then
        B6 = True
    End If
    If chkRef.Name = "MSHTML" Then
        B7 = True
    End If
    If chkRef.Name = "SHDocVw" Then
        B8 = True
    End If
    If chkRef.Name = "VBIDE" Then
        B9 = True
    End If
    If chkRef.Name = "MSComctlLib" Then
        B10 = True
    End If
    If chkRef.Name = "Shell32" Then
        B11 = True
    End If
    If chkRef.Name = "System" Then
        B12 = True
    End If
    If chkRef.Name = "System_Drawing" Then
        B13 = True
    End If
    If chkRef.Name = "System_Windows_Forms" Then
        B14 = True
    End If
    If chkRef.Name = "DAO" Then
        B15 = True
    End If
Next
'MsgBox msg
Debug.Print msg

Dim x86

x86 = ""
If Dir("C:\Program Files (x86)\", vbDirectory) <> "" Then
    x86 = " (x86)"
End If


'If B1 = False Then
'    vbProj.References.AddFromFile "C:\PROGRA~1\COMMON~1\MICROS~1\VBA\VBA7\VBE7.DLL"
'End If
'If B2 = False Then
'    vbProj.References.AddFromFile "C:\PROGRA~1\COMMON~1\MICROS~1\VBA\VBA7\VBE7.DLL"
'End If
If B3 = False Then
    errorMsg = "Error loading stdole2.tlb"
    vbProj.References.AddFromFile "C:\Windows\system32\stdole2.tlb"
    errorMsg = ""
End If
If B4 = False Then
    errorMsg = "Error loading MSO.DLL"
    For x = 10 To 40
         If Dir("C:\Program Files" & x86 & "\Common Files\Microsoft Shared\Office" & x & "\MSO.DLL") <> "" Then
            vbProj.References.AddFromFile "C:\Program Files" & x86 & "\Common Files\Microsoft Shared\Office" & x & "\MSO.DLL"
            Exit For
         End If
         If Dir("C:\Program Files" & x86 & "\Common Files\Microsoft Shared\root\Office" & x & "\MSO.DLL") <> "" Then
            vbProj.References.AddFromFile "C:\Program Files" & x86 & "\Common Files\Microsoft Shared\root\Office" & x & "\MSO.DLL"
            Exit For
         End If
    Next x
    errorMsg = ""
End If
If B5 = False Then
  errorMsg = "Error loading FM20.DLL"
  If Dir("C:\WINDOWS\system32\FM20.DLL") <> "" Then
    vbProj.References.AddFromFile "C:\WINDOWS\system32\FM20.DLL"
  Else
   If Dir("C:\Program Files (x86)\Microsoft Office\root\VFS\SystemX86\FM20.DLL") <> "" Then
    vbProj.References.AddFromFile "C:\Program Files (x86)\Microsoft Office\root\VFS\SystemX86\FM20.DLL"
   End If
  End If
  errorMsg = ""
End If
If B6 = False Then
errorMsg = "Error loading MSWORD.OLB"
    For x = 10 To 40
         'Debug.Print "Adding: " & "C:\Program Files" & x86 & "\Microsoft Office\Office" & x & "\MSWORD.OLB"
         If Dir("C:\Program Files" & x86 & "\Microsoft Office\Office" & x & "\MSWORD.OLB") <> "" Then
            vbProj.References.AddFromFile "C:\Program Files" & x86 & "\Microsoft Office\Office" & x & "\MSWORD.OLB"
            Exit For
         End If
         If Dir("C:\Program Files" & x86 & "\Microsoft Office\root\Office" & x & "\MSWORD.OLB") <> "" Then
            vbProj.References.AddFromFile "C:\Program Files" & x86 & "\Microsoft Office\root\Office" & x & "\MSWORD.OLB"
            Exit For
         End If
    Next x
errorMsg = ""
End If
If B7 = False Then
errorMsg = "Error loading mshtml.tlb"
  If Dir("C:\Windows\System32\mshtml.tlb") <> "" Then
    vbProj.References.AddFromFile "C:\Windows\System32\mshtml.tlb"
  Else
    MsgBox "Error adding library for MSHTML"
  End If
  errorMsg = ""
End If
If B8 = False Then
errorMsg = "Error loading ieframe.dll"
  If Dir("C:\Windows\System32\ieframe.dll") <> "" Then
   vbProj.References.AddFromFile "C:\Windows\System32\ieframe.dll"
  Else
    MsgBox "Error adding library for SHDocVw"
  End If
errorMsg = ""
End If
If B9 = False Then
errorMsg = "Error loading VBE6EXT.OLB"
  If Dir("C:\Program Files\Common Files\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB") <> "" Then
    vbProj.References.AddFromFile "C:\Program Files\Common Files\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB"
  End If
  If Dir("C:\Program Files (x86)\Microsoft Office\root\VFS\ProgramFilesCommonX86\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB") <> "" Then
    vbProj.References.AddFromFile "C:\Program Files (x86)\Microsoft Office\root\VFS\ProgramFilesCommonX86\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB"
  End If
  errorMsg = ""
End If
If B10 = False Then
    errorMsg = "Error loading MSCOMCTL.OCX"
    vbProj.References.AddFromFile "C:\Windows\system32\MSCOMCTL.OCX"
    errorMsg = ""
End If
If B11 = False Then
    errorMsg = "Error loading shell32.dll"
    vbProj.References.AddFromFile "C:\Windows\system32\shell32.dll"
    errorMsg = ""
End If
If B12 = False Then
    errorMsg = "Error loading system.tlb"
    vbProj.References.AddFromFile "C:\Windows\Microsoft.NET\Framework\v2.0.50727\System.tlb"
    errorMsg = ""
End If
If B13 = False Then
    errorMsg = "Error loading stdole2.tlb"
    vbProj.References.AddFromFile "C:\Windows\Microsoft.NET\Framework\v2.0.50727\System.Drawing.tlb"
    errorMsg = "Error loading stdole2.tlb"
End If
If B14 = False Then
    errorMsg = "Error loading System.Windows.Forms.tlb"
    vbProj.References.AddFromFile "C:\Windows\Microsoft.NET\Framework\v2.0.50727\System.Windows.Forms.tlb"
    errorMsg = ""
End If
If B15 = False Then
  errorMsg = "error loading ACEDAO.DLL"
    For x = 10 To 40
         If Dir("C:\Program Files" & x86 & "\Common Files\Microsoft Shared\Office" & x & "\ACEDAO.DLL") <> "" Then
            vbProj.References.AddFromFile "C:\Program Files" & x86 & "\Common Files\Microsoft Shared\Office" & x & "\ACEDAO.DLL"
            Exit For
         End If
         If Dir("C:\Program Files" & x86 & "\Common Files\Microsoft Shared\root\Office" & x & "\ACEDAO.DLL") <> "" Then
            vbProj.References.AddFromFile "C:\Program Files" & x86 & "\Common Files\Microsoft Shared\root\Office" & x & "\ACEDAO.DLL"
            Exit For
         End If
    Next x
  errorMsg = ""
End If
Sheets(curSheet).Select
Worksheets(curSheet).Cells(1, 1).Select
'If Sheets(1).Name = "Needs Assessment" And Worksheets(1).Visible = True Then
'    For x = 1 To ActiveWorkbook.Sheets.Count
'    If Worksheets(x).Visible = True Then
'        Sheets(x).Select
'        Worksheets(x).Cells(1, 1).Select
'        Exit For
'    End If
'    Next x
''    Worksheets("Needs Assessment").Cells(1, 1).Select
'Else
'    Sheets(4).Select
'End If
Sheets("First time user").Visible = False
'end of standard startup code




BU = Worksheets("Assumptions").Cells(1, 2).Value
If Worksheets("Assumptions").Cells(11, 3 + 4 * BU).Value = "SUBINDUSTRY" Then
'If AssumptionForm.ComboBox1.Value = "PM" Then
    AssumptionForm.Label5.Visible = True
    AssumptionForm.ComboBox2.Visible = True
    subsetstr = Worksheets("Assumptions").Cells(8, 2 + 4 * BU).Value & " " 'AssumptionForm.ComboBox1.Value '"PM "
Else
    AssumptionForm.Label5.Visible = False
    AssumptionForm.ComboBox2.Visible = False
    subsetstr = ""
End If

x2 = Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value


AssumptionForm.ComboBox1.Clear
x = 0
Do
    AssumptionForm.ComboBox1.AddItem Worksheets("Assumptions").Cells(8, 2 + 4 * x).Value
    x = x + 1
Loop Until Worksheets("Assumptions").Cells(8, 2 + 4 * x).Value = ""
AssumptionForm.ComboBox1.ListIndex = Worksheets("Assumptions").Cells(1, 2).Value

If AssumptionForm.ComboBox2.ListCount < 1 Or AssumptionForm.ComboBox2.ListIndex < 0 Then
AssumptionForm.ComboBox2.Clear
x = 0
Do
    AssumptionForm.ComboBox2.AddItem Worksheets(subsetstr & "Assumptions").Cells(8, 2 + 4 * x).Value
    x = x + 1
Loop Until Worksheets(subsetstr & "Assumptions").Cells(8, 2 + 4 * x).Value = ""
AssumptionForm.ComboBox2.ListIndex = x2 '
Worksheets(subsetstr & "Assumptions").Cells(1, 2).Value = x2
End If
Call initializeConst
Application.EnableEvents = True



''' below code to save embedded userforms to folder, import userforms and then clean up copies
''' needed due to compile errors on open when MS Common Controls reference is not loaded and datatype
''' is needed for listview/treeview drag drop operations. Cannot compile without reference
''' but need to run startup procedure to add reference, which requried compile.
Dim SaveDriveDir As String, mypath As String, temp As String
Dim num As Long
Dim uform As Object
    
Call startSub

errorEnd:

Application.EnableEvents = True
If errorMsg <> "" Then
    MsgBox errorMsg
End If


End Sub







Attribute VB_Name = "UserForm7"
Attribute VB_Base = "0{D492C9C4-FC9A-4C02-8AC0-3FBEE081A9BA}{13087F41-736F-4323-BB54-BED28E0A236E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False









Private Sub CommandButton1_Click()

Worksheets("Needs Assessment").Cells(Standardsrow(), 2).Value = Replace(UserForm7.TextBox1.Text, vbLf & vbLf, vbLf)
UserForm7.Hide

End Sub

Attribute VB_Name = "dataSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' (^rIb
' N?x*&
' ;C6n
' |KdN.
' hFTW
' T@0O
' Gjwez

INQUEST-PP=macro
