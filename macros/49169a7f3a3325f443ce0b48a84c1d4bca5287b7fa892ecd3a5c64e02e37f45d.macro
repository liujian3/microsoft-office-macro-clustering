Attribute VB_Name = "Module1"
Option Explicit

'Define variables and constants
Public NumberOfBombs As Integer
Public H_Pos As Integer
Public V_Pos As Integer
Public BombCounter As Integer
Public ChosenCell As String
Public AreThereBlanks As Boolean
Public H_Size As Integer
Public V_Size As Integer
Public xCols As Integer
Public xRows As Integer
Public CellCounter As Integer
Public GameOver As Boolean
Public Const BorderColour As Integer = 16
Public Const BlankColour As Integer = 36
Public Const NumberColour As Integer = 0
Public Const GreyColour As Integer = 15
Public Const DarkGrey As Integer = 48
Public Const ExplodeColour As Integer = 3
Public DoubleClicked As Boolean
Public StartingUp As Boolean

Sub ClearBoard()
Attribute ClearBoard.VB_ProcData.VB_Invoke_Func = " \n14"

'Clear board area and reset scores
    DoubleClicked = False
    Range("Board").ClearContents
    Range("Board2").Clear
    Range("Flagged").Value = 0
    Range("Unchecked").Value = H_Size * V_Size

End Sub

Sub SetBoard()
Attribute SetBoard.VB_ProcData.VB_Invoke_Func = " \n14"
    Application.ScreenUpdating = False
'Make sure board is truly random
    Randomize
    
'Set parameters for game
    NumberOfBombs = Range("BombCount").Value
    H_Size = Range("BoardWidth").Value
    V_Size = Range("BoardHeight").Value
    If H_Size * V_Size <= NumberOfBombs Then
        MsgBox "Too many Bombs for specified playing area", vbCritical, "Cell Sweeper"
        Exit Sub
    End If
    
'Initialise game
    ClearBoard
    DrawBoard
    GameOver = False
    Range("Toggle").Value = 1
    Range("Toggle").Offset(0, 2).Value = "Click = Clear squares"
'Place the bombs
    For xCols = 1 To NumberOfBombs
        Do
            H_Pos = Int(Rnd() * H_Size)
            V_Pos = Int(Rnd() * V_Size)
            If Range("Square1").Offset(V_Pos, H_Pos).Value <> "M" Then
                Range("Square1").Offset(V_Pos, H_Pos).Value = "M"
                Exit Do
            End If
        Loop
    Next xCols
    Range("HiddenBombCount").Value = NumberOfBombs
End Sub

Sub DrawBoard()
Attribute DrawBoard.VB_ProcData.VB_Invoke_Func = " \n14"
    
'Draw grid and set colour to grey
    With Range("D9", Range("D9").Offset(V_Size - 1, H_Size - 1))
        .Interior.ColorIndex = GreyColour
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlEdgeRight).ColorIndex = BorderColour
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).ColorIndex = BorderColour
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeTop).ColorIndex = BorderColour
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).ColorIndex = BorderColour
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideVertical).ColorIndex = BorderColour
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).ColorIndex = BorderColour
    End With
    [b16].Select
End Sub

Sub CheckAround()
Attribute CheckAround.VB_ProcData.VB_Invoke_Func = " \n14"
'Main routine to check selection

'Exit if chosen cell is outside of the playing area
    If Range(ChosenCell).Row > 8 + V_Size Then Exit Sub
    If Range(ChosenCell).Row < 9 Then Exit Sub
    If Range(ChosenCell).Column > 3 + H_Size Then Exit Sub
    If Range(ChosenCell).Column < 4 Then Exit Sub
    
'Count surrounding bombs
    BombCounter = 0
    With Range("Board!" & ChosenCell)
        If .Offset(-1, -1).Value = "M" Then BombCounter = BombCounter + 1
        If .Offset(-1, 0).Value = "M" Then BombCounter = BombCounter + 1
        If .Offset(-1, 1).Value = "M" Then BombCounter = BombCounter + 1
        If .Offset(0, -1).Value = "M" Then BombCounter = BombCounter + 1
        If .Offset(0, 1).Value = "M" Then BombCounter = BombCounter + 1
        If .Offset(1, -1).Value = "M" Then BombCounter = BombCounter + 1
        If .Offset(1, 0).Value = "M" Then BombCounter = BombCounter + 1
        If .Offset(1, 1).Value = "M" Then BombCounter = BombCounter + 1
    End With
    
'Chamge game counter
    If Range(ChosenCell).Interior.ColorIndex = GreyColour Then
        Range("Unchecked").Value = Range("Unchecked").Value - 1
    End If

'change colour depending on whether bombs are found
    With Range(ChosenCell)
        If BombCounter > 0 Then
            .Value = BombCounter
            .Interior.ColorIndex = BlankColour
        Else
            .Interior.ColorIndex = NumberColour
            'Flag neighboring cells for checking
            If .Offset(-1, -1).Interior.ColorIndex = GreyColour Then Worksheets("Board").Range(ChosenCell).Offset(-1, -1).Value = "X"
            If .Offset(-1, 0).Interior.ColorIndex = GreyColour Then Worksheets("Board").Range(ChosenCell).Offset(-1, 0).Value = "X"
            If .Offset(-1, 1).Interior.ColorIndex = GreyColour Then Worksheets("Board").Range(ChosenCell).Offset(-1, 1).Value = "X"
            If .Offset(0, -1).Interior.ColorIndex = GreyColour Then Worksheets("Board").Range(ChosenCell).Offset(0, -1).Value = "X"
            If .Offset(0, 1).Interior.ColorIndex = GreyColour Then Worksheets("Board").Range(ChosenCell).Offset(0, 1).Value = "X"
            If .Offset(1, -1).Interior.ColorIndex = GreyColour Then Worksheets("Board").Range(ChosenCell).Offset(1, -1).Value = "X"
            If .Offset(1, 0).Interior.ColorIndex = GreyColour Then Worksheets("Board").Range(ChosenCell).Offset(1, 0).Value = "X"
            If .Offset(1, 1).Interior.ColorIndex = GreyColour Then Worksheets("Board").Range(ChosenCell).Offset(1, 1).Value = "X"
        End If
    End With
    
    
'Check to see if game is won
    CheckFinish
End Sub

Sub LoopForBlanks()
Attribute LoopForBlanks.VB_ProcData.VB_Invoke_Func = " \n14"
    
'Loop to clear flagged cells
    Do
        AreThereBlanks = False
        For xCols = 4 To 4 + H_Size
            For xRows = 9 To 9 + V_Size
                If Worksheets("Board").Cells(xRows, xCols).Value = "X" Then
                    AreThereBlanks = True
                    Worksheets("Board").Cells(xRows, xCols).Value = ""
                    ChosenCell = Cells(xRows, xCols).Address
                    CheckAround
                End If
            Next xRows
        Next xCols
    Loop Until Not (AreThereBlanks)
End Sub

Sub ToggleMouse()
Attribute ToggleMouse.VB_ProcData.VB_Invoke_Func = "q\n14"

'Toggle betweet clearing or flagging squares
    If Range("Toggle").Value = 0 Then
        Range("Toggle").Value = 1
        Range("Toggle").Offset(0, 3).Value = "Click = Clear squares"
    Else
        Range("Toggle").Value = 0
        Range("Toggle").Offset(0, 3).Value = "Click = Set Flags"
    End If
End Sub

Sub CheckFinish()
Attribute CheckFinish.VB_ProcData.VB_Invoke_Func = " \n14"
    
'Check to see if game is won
    If Range("Unchecked").Value = Range("HiddenBombCount").Value Then
        MsgBox "You've won!", vbExclamation, "Cell Sweeper"
        PlayAgain
    End If
End Sub

Sub PlayAgain()
Attribute PlayAgain.VB_ProcData.VB_Invoke_Func = " \n14"

'Might choose to add another feature or two here
    SetBoard
End Sub

Sub CannotLose()
Attribute CannotLose.VB_ProcData.VB_Invoke_Func = " \n14"
    
'Loop to ensure that first cell selected is not a mine
    Range("Board!" & ActiveCell.Address).Value = ""
    AreThereBlanks = False
    For xCols = 4 To 4 + H_Size - 1
        For xRows = 9 To 9 + V_Size - 1
            If Worksheets("Board").Cells(xRows, xCols).Value <> "M" Then
                If xRows <> ActiveCell.Row And xCols <> ActiveCell.Column Then
                    Worksheets("Board").Cells(xRows, xCols).Value = "M"
                    CheckAround
                    LoopForBlanks
                    End
                End If
            End If
        Next xRows
    Next xCols
End Sub

Sub Bang()
Attribute Bang.VB_ProcData.VB_Invoke_Func = " \n14"
'Show all the mines
    Application.ScreenUpdating = False
    For xCols = 4 To 4 + H_Size
        For xRows = 9 To 9 + V_Size
            If Worksheets("Board").Cells(xRows, xCols).Value = "M" Then
                With Worksheets("CellSweeper").Cells(xRows, xCols)
                    .Value = "*"
                    .Interior.ColorIndex = ExplodeColour
                End With
            End If
        Next xRows
    Next xCols
    GameOver = True
    Application.ScreenUpdating = True
    MsgBox "Bang!", vbExclamation, "Cell Sweeper"
    Exit Sub
End Sub
Attribute VB_Name = "Module2"
Sub ClearAround()
Attribute ClearAround.VB_ProcData.VB_Invoke_Func = " \n14"
'Check if cell is within board area
    Calculate
    H_Pos = ActiveCell.Column
    V_Pos = ActiveCell.Row
    If ActiveCell.Cells.Count > 1 Then Exit Sub
    If GameOver Then Exit Sub
    If V_Pos > 8 + V_Size Then Exit Sub
    If V_Pos < 9 Then Exit Sub
    If H_Pos > 3 + H_Size Then Exit Sub
    If H_Pos < 4 Then Exit Sub
    If IsEmpty(ActiveCell.Value) Then Exit Sub
    If ActiveCell.Value = "?" Then Exit Sub
    If ActiveCell.Value = 8 Then Exit Sub
    If ActiveCell.Interior.ColorIndex <> BlankColour Then Exit Sub
'Count flagged cells
    CellCounter = 0
    If ActiveCell.Offset(-1, -1).Value = "?" Then CellCounter = CellCounter + 1
    If ActiveCell.Offset(-1, 0).Value = "?" Then CellCounter = CellCounter + 1
    If ActiveCell.Offset(-1, 1).Value = "?" Then CellCounter = CellCounter + 1
    If ActiveCell.Offset(0, -1).Value = "?" Then CellCounter = CellCounter + 1
    If ActiveCell.Offset(0, 1).Value = "?" Then CellCounter = CellCounter + 1
    If ActiveCell.Offset(1, -1).Value = "?" Then CellCounter = CellCounter + 1
    If ActiveCell.Offset(1, 0).Value = "?" Then CellCounter = CellCounter + 1
    If ActiveCell.Offset(1, 1).Value = "?" Then CellCounter = CellCounter + 1
    If ActiveCell.Value <> CellCounter Then Exit Sub
'Check for mines and uncover unselected squares
    If IsEmpty(ActiveCell.Offset(-1, -1).Value) Then
        If Range("Board!" & ActiveCell.Offset(-1, -1).Address).Value = "M" Then
            Bang
        Else
'Start main routine
            ChosenCell = ActiveCell.Offset(-1, -1).Address
            CheckAround
        End If
    End If
    
    If IsEmpty(ActiveCell.Offset(-1, 0).Value) Then
        If Range("Board!" & ActiveCell.Offset(-1, 0).Address).Value = "M" Then
            Bang
        Else
'Start main routine
            ChosenCell = ActiveCell.Offset(-1, 0).Address
            CheckAround
        End If
    End If
    
    If IsEmpty(ActiveCell.Offset(-1, 1).Value) Then
        If Range("Board!" & ActiveCell.Offset(-1, 1).Address).Value = "M" Then
            Bang
        Else
'Start main routine
            ChosenCell = ActiveCell.Offset(-1, 1).Address
            CheckAround
        End If
    End If
    
    If IsEmpty(ActiveCell.Offset(0, -1).Value) Then
        If Range("Board!" & ActiveCell.Offset(0, -1).Address).Value = "M" Then
            Bang
        Else
'Start main routine
            ChosenCell = ActiveCell.Offset(0, -1).Address
            CheckAround
        End If
    End If
    
    If IsEmpty(ActiveCell.Offset(0, 1).Value) Then
        If Range("Board!" & ActiveCell.Offset(0, 1).Address).Value = "M" Then
            Bang
        Else
'Start main routine
            ChosenCell = ActiveCell.Offset(0, 1).Address
            CheckAround
        End If
    End If
    
    If IsEmpty(ActiveCell.Offset(1, -1).Value) Then
        If Range("Board!" & ActiveCell.Offset(1, -1).Address).Value = "M" Then
            Bang
        Else
'Start main routine
            ChosenCell = ActiveCell.Offset(1, -1).Address
            CheckAround
        End If
    End If
    
    If IsEmpty(ActiveCell.Offset(1, 0).Value) Then
        If Range("Board!" & ActiveCell.Offset(1, 0).Address).Value = "M" Then
            Bang
        Else
'Start main routine
            ChosenCell = ActiveCell.Offset(1, 0).Address
            CheckAround
        End If
    End If
    
    If IsEmpty(ActiveCell.Offset(1, 1).Value) Then
        If Range("Board!" & ActiveCell.Offset(1, 1).Address).Value = "M" Then
            Bang
        Else
'Start main routine
            ChosenCell = ActiveCell.Offset(1, 1).Address
            CheckAround
        End If
    End If
'Clear "chain reactions"
    LoopForBlanks
    [b16].Select
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    ClearAround
    Exit Sub
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)
    If StartingUp Then Exit Sub
'Check if cell is within board area
    H_Pos = Target.Column
    V_Pos = Target.Row
    If Target.Cells.Count > 1 Then [b16].Select: Exit Sub
    If GameOver Then [b16].Select: Exit Sub
    If V_Pos > 8 + V_Size Then Exit Sub
    If V_Pos < 9 Then Exit Sub
    If H_Pos > 3 + H_Size Then Exit Sub
    If H_Pos < 4 Then Exit Sub
    If Not IsEmpty(Target.Value) Then
        If Target.Value <> "?" Then
            Exit Sub
        End If
    End If
    If Range("Toggle").Value = 0 Then
        If Target.Interior.ColorIndex < 0 Then [b16].Select: Exit Sub
        If Target.Value = "?" Then
            Target.ClearContents
            Target.Interior.ColorIndex = GreyColour
            Range("Flagged").Value = Range("Flagged").Value - 1
        ElseIf Target.Value = "" Then
            Target.Value = "?"
            Target.Interior.ColorIndex = DarkGrey
            Range("Flagged").Value = Range("Flagged").Value + 1
        End If
        [b16].Select
        Exit Sub
    End If
    
'Check if cell has already been cleared
    If Target.Interior.ColorIndex <> GreyColour Then
        [b16].Select
        Exit Sub
    End If

'Check for bomb
    If Worksheets("Board").Cells(V_Pos, H_Pos).Value = "M" Then

'If it's the first click make sure you can't lose!
        If V_Size * H_Size = Range("Unchecked").Value Then
            ChosenCell = Target.Address
            CannotLose
            LoopForBlanks
            [b16].Select
            Exit Sub
        End If
        Bang
    End If
    
'Start main routine
    ChosenCell = Target.Address
    CheckAround
    
'Clear "chain reactions"
    LoopForBlanks
    [b16].Select
End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_BeforeClose(Cancel As Boolean)
'Put edit mode back the way it was
    If Range("EditMode").Value = "On" Then
        Application.EditDirectlyInCell = True
    End If
End Sub

Private Sub Workbook_Open()
    StartingUp = True
'Fit to screen
    Application.ScreenUpdating = False
    Range("PlayArea").Select
    ActiveWindow.Zoom = True
    [b16].Select
    StartingUp = False
'Stop double click causing cell edit
    If Application.EditDirectlyInCell Then
        Range("EditMode").Value = "On"
    Else
        Range("EditMode").Value = "Off"
    End If
    Application.EditDirectlyInCell = False
    UserForm2.Show
End Sub
Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{EA187E30-85A1-44CE-B233-D796EE1707D1}{50979730-53A5-40BD-B094-DE5AA2691832}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub CommandButton1_Click()
    Me.Hide
End Sub


INQUEST-PP=macro
