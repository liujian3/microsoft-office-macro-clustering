Attribute VB_Name = "AddSchools"
Option Explicit

Sub SchoolAdd(strPhase As String)
    Dim lngAnchor As Long
    Dim lngRow As Long
    Dim strMsgText As String

    Range(strPhase).Select
    lngAnchor = Selection.Row
    lngRow = lngAnchor + 1
    Do
        If ActiveSheet.Cells(lngRow, 2) <> "" Then
            lngRow = lngRow + 1
        Else
            strMsgText = Switch(strPhase = "Nursery", "Nursery", _
                                strPhase = "Primary", "Primary", _
                                strPhase = "PriMiddle", "Middle Deemed Primary", _
                                strPhase = "Secondary", "Secondary", _
                                strPhase = "SecMiddle", "Middle Deemed Secondary", _
                                strPhase = "Special", "Special")
            If lngRow - lngAnchor = 1 Then
                MsgBox "There is already an unused blank line for the " & vbCrLf & _
                       strMsgText & " phase.", vbExclamation, "S52 Education Outturn Statement"
            Else
                ActiveWorkbook.Sheets("Table B").Unprotect (strTBPassWord)
                'Insert row
                Range("A" & lngRow & ":BL" & lngRow).Insert shift:=xlDown
                'Copy data cell formats
                Range("A" & lngRow - 1 & ":U" & lngRow - 1).Copy
                Range("A" & lngRow).PasteSpecial (xlPasteFormats)
                'Copy formula for total cell
                Range("O" & lngRow - 1).Copy
                Range("O" & lngRow).PasteSpecial
                'Copy error cell formulae
                Range("X" & lngRow - 1 & ":AQ" & lngRow - 1).Copy
                Range("X" & lngRow).PasteSpecial
                'Turn off cell selection once finished copy/pasting
                Application.CutCopyMode = False
                'Right align SEN col (7) which allows asterisk input
                Range("H" & lngRow).HorizontalAlignment = xlRight
                Rows(lngRow & ":" & lngRow).AutoFit
                Cells(lngRow, 2).Select
                ActiveWorkbook.Sheets("Table B").Protect (strTBPassWord)
                MsgBox "Blank School Line inserted into the " & vbCrLf & _
                       strMsgText & " phase.", vbInformation, _
                       strMsgTitle
            End If
            Exit Do
        End If
    Loop
End Sub
Attribute VB_Name = "Globals"
Option Explicit

Public Const strMsgTitle As String = "Section 251 Outturn 2009-10"

Public Const strWorkBookPassWord As String = "Financia1RetUrn"
Public Const strSubmitDataPassWord As String = "C0ntRo1"
Public Const strTAPassWord As String = "OutTA0607"
Public Const strTA1PassWord As String = "OutTA10607"
Public Const strTBPassWord As String = "OutTB0607"
Public Const strRECPassWord As String = "OutREC0607"

Public strXTableFormula(256) As String

Public gstrWorkBookPath As String
Public gstrFileName As String
Public gblnMissingInfo As Boolean
Attribute VB_Name = "ImportExportTable"
Option Explicit

Sub ExportTable(strTableID As String)
    '+---------------------------------------------------------------+
    '| This command exports the worksheet of the selected table to a |
    '| separate Excel workbook, containing just the selected table.  |
    '+---------------------------------------------------------------+
    Dim strWorkBookPath As String
    Dim lngLEA As Long
    Dim xlOriginatingWorkbook As Excel.Workbook
    Dim xlApp As Excel.Application
    Dim xlResultingWorkbook As Excel.Workbook
    Dim lngCounter As Long
    Dim strSheetName As String
    Dim strSaveFileName As String
    Dim strFormula As String
    Dim lngColumn As Long
    Dim lngRow As Long
    Dim strPhase As String
    Dim lngPhase As Long
    Dim strCol4Formula As String
    Dim strCol6Formula As String
    Dim strErrorCodes As String
    
    On Error GoTo ErrorHandler

    strErrorCodes = "Error Codes"
    strSheetName = Switch(strTableID = "A", "Table A")
        '                  strTableID = "YS", "YS Annex")

    Set xlOriginatingWorkbook = ActiveWorkbook
    xlOriginatingWorkbook.Sheets(strSheetName).Select
    If strTableID = "A" Then
        lngLEA = xlOriginatingWorkbook.Sheets(strSheetName).Cells(3, 11)
    ElseIf strTableID = "YS" Then
        lngLEA = xlOriginatingWorkbook.Sheets(strSheetName).Cells(3, 12)
    End If
    If lngLEA = 0 Then
        MsgBox "Your LEA number is blank on " & strSheetName & ", please correct " & _
               "this prior to exporting it", vbExclamation, strMsgTitle
        Exit Sub
    End If
    strWorkBookPath = xlOriginatingWorkbook.Path
    If strWorkBookPath = "" Then
        MsgBox "You have not saved this workbook - Please save this workbook first", _
        vbExclamation, strMsgTitle
        Exit Sub
    End If

    strSaveFileName = Switch(strTableID = "A", "TA")
     '                        strTableID = "YS", "TAaYS")
    If Dir(strWorkBookPath & "\s5209-10o" & strSaveFileName & lngLEA & ".xls") <> "" Then
        Kill (strWorkBookPath & "\s5209-10o" & strSaveFileName & lngLEA & ".xls")
    End If
    Set xlResultingWorkbook = Excel.Workbooks.Add
    xlResultingWorkbook.SaveAs strWorkBookPath & "\s5209-10o" & strSaveFileName & lngLEA & ".xls"
    xlOriginatingWorkbook.Activate
    xlOriginatingWorkbook.Sheets(strSheetName).Select
    xlOriginatingWorkbook.Unprotect (strWorkBookPassWord)
    xlOriginatingWorkbook.Sheets(strErrorCodes).Copy Before:=xlResultingWorkbook.Sheets(1)
    xlOriginatingWorkbook.Sheets(strSheetName).Copy Before:=xlResultingWorkbook.Sheets(1)
    xlOriginatingWorkbook.Protect (strWorkBookPassWord)
    Application.DisplayAlerts = False
    xlResultingWorkbook.Activate
    lngCounter = xlResultingWorkbook.Sheets.Count
    Do While lngCounter > 2
        xlResultingWorkbook.Sheets(lngCounter).Select
        xlResultingWorkbook.Sheets(lngCounter).Delete
        lngCounter = xlResultingWorkbook.Sheets.Count
    Loop

    '+------------------------------------------------------------------+
    '| Now we need to remove references to other tables prior to saving |
    '| the worksheet. These are:                                        |
    '| Table A & B - Lots and lots!!                                    |
    '| YS Annex - 2 references to Table A                               |
    '+------------------------------------------------------------------+
    xlResultingWorkbook.Sheets(strSheetName).Select
    With xlResultingWorkbook.Sheets(strSheetName)
        Select Case strTableID
            Case "A"
                .Unprotect (strTAPassWord)
                'First remove the references to TB from columns (b) to (e)
                'replacing them with the TB values.
                'Line 40 = spreadsheet line 60
                'Line 41 = spreadsheet line 61
                'Line 43 = spreadsheet line 63
                'Line 44 = spreadsheet line 64
                'Line 52 = spreadsheet line 74
                'Line 57 = spreadsheet line 81
                'Line 61 = spreadsheet line 89
                'Line 62 = spreadsheet line 90
                'Line 63 = spreadsheet line 91
                For lngCounter = 1 To 10
                    lngRow = Switch(lngCounter = 1, 63, _
                                    lngCounter = 2, 64, _
                                    lngCounter = 3, 66, _
                                    lngCounter = 4, 67, _
                                    lngCounter = 5, 78, _
                                    lngCounter = 6, 85, _
                                    lngCounter = 7, 93, _
                                    lngCounter = 8, 97, _
                                    lngCounter = 9, 98, _
                                    lngCounter = 10, 99)
                    For lngColumn = 3 To 6
                        .Cells(lngRow, lngColumn).Formula = .Cells(lngRow, lngColumn).Value
                    Next lngColumn
                Next lngCounter

                'Now remove references to other tables from the error
                'checking formulae (errors/warnings area).
                'Line 32
                .Cells(51, 33).Formula = ZeroCellFormula("C51")
                .Cells(51, 34).Formula = ZeroCellFormula("D51")
                .Cells(51, 35).Formula = ZeroCellFormula("E51")
                .Cells(51, 36).Formula = ZeroCellFormula("F51")
                .Cells(51, 37).Formula = ZeroCellFormula("G51")
                'Line 33
                .Cells(52, 33).Formula = ZeroCellFormula("C52")
                .Cells(52, 34).Formula = ZeroCellFormula("D52")
                .Cells(52, 35).Formula = ZeroCellFormula("E52")
                .Cells(52, 36).Formula = ZeroCellFormula("F52")
                .Cells(52, 37).Formula = ZeroCellFormula("G52")
             
            '    .Cells(53, 31).Formula = ZeroCellFormula("C53")
            '    .Cells(53, 32).Formula = ZeroCellFormula("D53")
            '    .Cells(53, 33).Formula = ZeroCellFormula("E53")
            '    .Cells(53, 34).Formula = ZeroCellFormula("F53")
            '    .Cells(53, 35).Formula = ZeroCellFormula("G53")
                'Line 35
                .Cells(55, 33).Formula = ZeroCellFormula("C55")
                .Cells(55, 34).Formula = ZeroCellFormula("D55")
                .Cells(55, 35).Formula = ZeroCellFormula("E55")
                .Cells(55, 36).Formula = ZeroCellFormula("F55")
                .Cells(55, 37).Formula = ""
                'Line 36
                .Cells(59, 33).Formula = ZeroCellFormula("C59")
                .Cells(59, 34).Formula = EqualZeroCellFormula("D59")
                .Cells(59, 35).Formula = Lea201_420_Over0("E59")
                .Cells(59, 36).Formula = Lea201_420_Over0("F59")
                .Cells(59, 37).Formula = EqualZeroCellFormula("G59")
                'Line 37
                .Cells(60, 33).Formula = ZeroCellFormula("C60")
                .Cells(60, 34).Formula = ZeroCellFormula("D60")
                .Cells(60, 35).Formula = ZeroCellFormula("E60")
                .Cells(60, 36).Formula = ZeroCellFormula("F60")
                .Cells(60, 37).Formula = ZeroCellFormula("G60")
                'Line 38
                .Cells(61, 33).Formula = ZeroCellFormula("C61")
                .Cells(61, 34).Formula = ZeroCellFormula("D61")
                .Cells(61, 35).Formula = ZeroCellFormula("E61")
                .Cells(61, 36).Formula = ZeroCellFormula("F61")
                .Cells(61, 37).Formula = ZeroCellFormula("G61")
                'Line 39
                .Cells(62, 33).Formula = AsteriskWarnFormula("C62")
                .Cells(62, 34).Formula = AsteriskWarnFormula("D62")
                .Cells(62, 35).Formula = AsteriskWarnFormula("E62")
                .Cells(62, 36).Formula = AsteriskWarnFormula("F62")
                .Cells(62, 37).Formula = ZeroCellFormula("G62")
                'Line 40
                .Cells(63, 33).Formula = AsteriskWarnFormula("C63")
                .Cells(63, 34).Formula = AsteriskWarnFormula("D63")
                .Cells(63, 35).Formula = AsteriskWarnFormula("E63")
                .Cells(63, 36).Formula = AsteriskWarnFormula("F63")
                .Cells(63, 37).Formula = ZeroCellFormula("G63")

                'Line 41
                .Cells(64, 33).Formula = ZeroCellFormula("C64")
                .Cells(64, 34).Formula = WarnIfEqualZero("D64")
                .Cells(64, 35).Formula = WarnIfEqualZero("E64")
                .Cells(64, 36).Formula = WarnIfEqualZero("F64")
                .Cells(64, 37).Formula = WarnIfEqualZero("G64")
                'Line 42
                .Cells(65, 33).Formula = ZeroCellFormula("C65")
                .Cells(65, 34).Formula = ZeroCellFormula("D65")
                .Cells(65, 35).Formula = ZeroCellFormula("E65")
                .Cells(65, 36).Formula = ZeroCellFormula("F65")
                .Cells(65, 37).Formula = ZeroCellFormula("G65")
                'Line 43
                .Cells(66, 33).Formula = ZeroCellFormula("C66")
                .Cells(66, 34).Formula = ZeroCellFormula("D66")
                .Cells(66, 35).Formula = ZeroCellFormula("E66")
                .Cells(66, 36).Formula = ZeroCellFormula("F66")
                .Cells(66, 37).Formula = ZeroCellFormula("G66")
                'Line 44
                .Cells(67, 33).Formula = ZeroCellFormula("C67")
                .Cells(67, 34).Formula = ZeroCellFormula("D67")
                .Cells(67, 35).Formula = ZeroCellFormula("E67")
                .Cells(67, 36).Formula = ZeroCellFormula("F67")
                .Cells(67, 37).Formula = ZeroCellFormula("G67")
                'Line 45
              '  .Cells(68, 31).Formula = ZeroCellFormula("C68")
              '  .Cells(68, 32).Formula = ZeroCellFormula("D68")
              '  .Cells(68, 33).Formula = ZeroCellFormula("E68")
              '  .Cells(68, 35).Formula = ZeroCellFormula("F68")
             '   .Cells(68, 35).Formula = ZeroCellFormula("G68")
                'Line 45
'                .Cells(69, 31).Formula = ZeroCellFormula("C69")
'                .Cells(69, 32).Formula = ZeroCellFormula("D69")
'                .Cells(69, 33).Formula = ZeroCellFormula("E69")
'                .Cells(69, 34).Formula = ZeroCellFormula("F69")
'                .Cells(69, 35).Formula = ZeroCellFormula("G69")
                
                'Line 52
                
                .Cells(78, 33).Formula = ZeroCellFormula("C78")
                .Cells(78, 34).Formula = ZeroCellFormula("D78")
                .Cells(78, 35).Formula = ZeroCellFormula("E78")
                .Cells(78, 36).Formula = ZeroCellFormula("F78")
                .Cells(78, 37).Formula = ZeroCellFormula("G78")
                'Line 55
                .Cells(81, 33).Formula = ZeroCellFormula("C81")
                .Cells(81, 34).Formula = ZeroCellFormula("D81")
                .Cells(81, 35).Formula = ZeroCellFormula("E81")
                .Cells(81, 36).Formula = ZeroCellFormula("F81")
                .Cells(81, 37).Formula = ZeroCellFormula("G81")
                'Line 57
                .Cells(85, 33).Formula = MustBeNumericFormula("C85")
                .Cells(85, 34).Formula = MustBeNumericFormula("D85")
                .Cells(85, 35).Formula = MustBeNumericFormula("E85")
                .Cells(85, 36).Formula = MustBeNumericFormula("F85")
                .Cells(85, 37).Formula = ""
                'Line 58
                .Cells(91, 33).Formula = MustBeNumericFormula("C91")
                .Cells(91, 34).Formula = MustBeNumericFormula("D91")
                .Cells(91, 35).Formula = MustBeNumericFormula("E91")
                .Cells(91, 36).Formula = MustBeNumericFormula("F91")
                .Cells(91, 37).Formula = ""
                'Line 59
                .Cells(92, 33).Formula = MustBeNumericFormula("C92")
                .Cells(92, 34).Formula = MustBeNumericFormula("D92")
                .Cells(92, 35).Formula = MustBeNumericFormula("E92")
                .Cells(92, 36).Formula = MustBeNumericFormula("F92")
                .Cells(92, 37).Formula = ""
                'Line 60
                .Cells(93, 33).Formula = MustBeNumericFormula("C93")
                .Cells(93, 34).Formula = MustBeNumericFormula("D93")
                .Cells(93, 35).Formula = MustBeNumericFormula("E93")
                .Cells(93, 36).Formula = MustBeNumericFormula("F93")
                .Cells(93, 37).Formula = ""
                'Line 61
                .Cells(97, 33).Formula = MustBeNumericFormula("C97")
                .Cells(97, 34).Formula = MustBeNumericFormula("D97")
                .Cells(97, 35).Formula = MustBeNumericFormula("E97")
                .Cells(97, 36).Formula = MustBeNumericFormula("F97")
                .Cells(97, 37).Formula = ""
                'Line 62
                .Cells(98, 33).Formula = MustBeNumericFormula("C98")
                .Cells(98, 34).Formula = MustBeNumericFormula("D98")
                .Cells(98, 35).Formula = MustBeNumericFormula("E98")
                .Cells(98, 36).Formula = MustBeNumericFormula("F98")
                .Cells(98, 37).Formula = ""
                'Line 63
                .Cells(99, 33).Formula = MustBeNumericFormula("C99")
                .Cells(99, 34).Formula = MustBeNumericFormula("D99")
                .Cells(99, 35).Formula = MustBeNumericFormula("E99")
                .Cells(99, 36).Formula = MustBeNumericFormula("F99")
                .Cells(99, 37).Formula = ""
'
'                'Youth and Community Line 95
'                .Cells(158, 38).Formula = ""
'                'Youth and Community Line 103
'                .Cells(169, 38).Formula = ""
                .Protect (strTAPassWord)
'            Case "YS"
'                .Unprotect (strTAaYSPassWord)
'                .Cells(19, 25).Formula = ""
'                .Cells(20, 25).Formula = ""
'                .Protect (strTAaYSPassWord)
        End Select
    End With
    xlResultingWorkbook.Save
    xlResultingWorkbook.Close
    Application.DisplayAlerts = True
    xlOriginatingWorkbook.Activate
    xlOriginatingWorkbook.Sheets("Submit Data").Select
    MsgBox "The " & strSheetName & " worksheet has been exported to the following file:-" & _
           vbCrLf & vbCrLf & _
           strWorkBookPath & "\s5209-10o" & strSaveFileName & lngLEA & ".xls" & _
           vbCrLf & vbCrLf & _
           "Please do not rename this file if you wish to import it back into" & vbCrLf & _
           "this workbook at a later date, since the application expects an" & vbCrLf & _
           "import file of the same name.", vbInformation, strMsgTitle
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module ExportTable(" & strTableID & ")." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub

Sub ImportTable(strTableID As String)
    '+----------------------------------------------------------+
    '| This command imports a worksheet containing the selected |
    '| table back in to the main Excel workbook.                |
    '+----------------------------------------------------------+
    Dim strWorkBookPath As String
    Dim lngLEA As Long
    Dim xlOriginalWorkbook As Excel.Workbook
    Dim xlApp As Excel.Application
    Dim xlImportingWorkbook As Excel.Workbook
    Dim lngCounter As Long
    Dim lngSheetNo As Long
    Dim strSheetName As String
    Dim strInSheetName As String
    Dim strAfterSheetName As String
    Dim myCell As Range
    'Dim lngPhaseRow(5) As Long
    Dim strImportFileName As String
    Dim strFormula As String
    Dim xlSheet As Excel.Worksheet
    Dim lngTBFormRow As Long
    Dim lngArrayColumn As Long
    Dim lngPhase As Long
    Dim strPhase As String
    Dim lngRow As Long
    Dim iCol As Integer
    On Error GoTo ErrorHandler

    strSheetName = Switch(strTableID = "A", "Table A")
     '                     strTableID = "YS", "YS Annex")
    ' Set the original workbook as an object for future references
    Set xlOriginalWorkbook = ActiveWorkbook
    xlOriginalWorkbook.Sheets(strSheetName).Select

    ' Check we have an LEA number
    If strTableID = "A" Then
        lngLEA = xlOriginalWorkbook.Sheets(strSheetName).Cells(3, 11)
'    ElseIf strTableID = "YS" Then
'        lngLEA = xlOriginalWorkbook.Sheets(strSheetName).Cells(3, 12)
    End If
    If lngLEA = 0 Then
        MsgBox "Your LEA number is blank on " & strSheetName & ", please correct " & _
               "this prior to importing the new file", vbExclamation, strMsgTitle
        Exit Sub
    End If

    ' Check we have a valid file path
    strWorkBookPath = xlOriginalWorkbook.Path
    If strWorkBookPath = "" Then
        MsgBox "You have not saved this workbook - Please save this workbook first", _
        vbExclamation, strMsgTitle
        Exit Sub
    End If
    strImportFileName = Switch(strTableID = "A", "TA")
                  '            strTableID = "YS", "TAaYS")

    ' Check the import file exists
    If Dir(strWorkBookPath & "\s5209-10o" & strImportFileName & lngLEA & ".xls") = "" Then
        MsgBox "Cannot find the import file. Expected file:-" & vbCrLf & vbCrLf & _
               strWorkBookPath & "\s5209-10o" & strImportFileName & lngLEA & ".xls", _
               vbExclamation, strMsgTitle
        Exit Sub
    End If

    ' Open the import file - turn system alerts off in case the spreadsheet
    ' has already been opened, to disable the query message "are you sure
    ' you wish to reopen this blah blah blah..."
    Application.DisplayAlerts = False
    Set xlImportingWorkbook = _
        Excel.Workbooks.Open(strWorkBookPath & "\s5209-10o" & strImportFileName & _
        lngLEA & ".xls")
    Application.DisplayAlerts = True

    ' Find the correct worksheet to import
    strInSheetName = ""
    xlImportingWorkbook.Activate
    lngCounter = xlImportingWorkbook.Sheets.Count
    If lngCounter = 1 Then
        ' Import sheets(1) irrespective of name as long as it
        ' meets the validation criteria.
        strInSheetName = "Sheets(1)"
    Else
        ' More than one sheet in the import file, so see if you can find
        ' the correctly named sheet.
        For lngSheetNo = 1 To lngCounter
            If UCase(Trim(xlImportingWorkbook.Sheets(lngSheetNo).Name)) = UCase(strSheetName) Then
                strInSheetName = xlImportingWorkbook.Sheets(lngSheetNo).Name
                Exit For
            End If
        Next lngSheetNo
        If strInSheetName = "" Then
            MsgBox "Cannot find a worksheet named " & strSheetName & " in the import file." & vbCrLf & _
                   "Please check the import file and try again.", _
                   vbExclamation, strMsgTitle
            Exit Sub
        End If
    End If

    ' Ensure the worksheet to import has a consistent name
    If strInSheetName = "Sheets(1)" Then
        xlImportingWorkbook.Sheets(1).Select
        xlImportingWorkbook.Sheets(1).Name = "New " & strSheetName
    Else
        xlImportingWorkbook.Sheets(strInSheetName).Select
        xlImportingWorkbook.Sheets(strInSheetName).Name = "New " & strSheetName
    End If
    strInSheetName = "New " & strSheetName

    'Check protection
    If Not CheckProtection(strTableID) Then
        'Failed the protection check, either because the protection has been
        'removed, or it has been changed. In any case, a message will already
        'have been generated by the CheckProtection() function, so all we need
        'to do now is tidy up and cancel the import routine.
        Application.DisplayAlerts = False
        xlImportingWorkbook.Close
        Application.DisplayAlerts = True
        Exit Sub
    End If

    For lngCounter = 1 To 256
        strXTableFormula(lngCounter) = ""
    Next lngCounter

    '+--------------------------------------------------------------------+
    '| During export, various formulae were removed from the tables prior |
    '| to saving as separate worksheets. We now need to store these       |
    '| formulae again to the array strXTableFormula() so we can re-insert |
    '| them in the imported file. The  cells and tables affected are:-    |
    '+--------------------------------------------------------------------+
    With xlOriginalWorkbook.Sheets(strSheetName)
        Select Case strTableID
            '+---------+
            '| Table A |
            '+---------+
            Case "A"
                .Unprotect (strTAPassWord)
                'Line 32
                strXTableFormula(1) = .Cells(51, 33).Formula
                strXTableFormula(2) = .Cells(51, 34).Formula
                strXTableFormula(3) = .Cells(51, 35).Formula
                strXTableFormula(4) = .Cells(51, 36).Formula
                strXTableFormula(5) = .Cells(51, 37).Formula
                'Line 33
                strXTableFormula(6) = .Cells(52, 33).Formula
                strXTableFormula(7) = .Cells(52, 34).Formula
                strXTableFormula(8) = .Cells(52, 35).Formula
                strXTableFormula(9) = .Cells(52, 36).Formula
                strXTableFormula(10) = .Cells(52, 37).Formula
                'Line 35
                strXTableFormula(11) = .Cells(55, 33).Formula
                strXTableFormula(12) = .Cells(55, 34).Formula
                strXTableFormula(13) = .Cells(55, 35).Formula
                strXTableFormula(14) = .Cells(55, 36).Formula
                strXTableFormula(15) = .Cells(55, 37).Formula
                'Line 36
                strXTableFormula(16) = .Cells(59, 33).Formula
                strXTableFormula(17) = .Cells(59, 34).Formula
                strXTableFormula(18) = .Cells(59, 35).Formula
                strXTableFormula(19) = .Cells(59, 36).Formula
                strXTableFormula(20) = .Cells(59, 37).Formula
                'Line 37
                strXTableFormula(21) = .Cells(60, 33).Formula
                strXTableFormula(22) = .Cells(60, 34).Formula
                strXTableFormula(23) = .Cells(60, 35).Formula
                strXTableFormula(24) = .Cells(60, 36).Formula
                strXTableFormula(25) = .Cells(60, 37).Formula
                'Line 38
                strXTableFormula(26) = .Cells(61, 33).Formula
                strXTableFormula(27) = .Cells(61, 34).Formula
                strXTableFormula(28) = .Cells(61, 35).Formula
                strXTableFormula(29) = .Cells(61, 36).Formula
                strXTableFormula(30) = .Cells(61, 37).Formula
                'Line 39
                strXTableFormula(31) = .Cells(62, 33).Formula
                strXTableFormula(32) = .Cells(62, 34).Formula
                strXTableFormula(33) = .Cells(62, 35).Formula
                strXTableFormula(34) = .Cells(62, 36).Formula
                strXTableFormula(35) = .Cells(62, 37).Formula
                'Line 40
                strXTableFormula(36) = .Cells(63, 33).Formula
                strXTableFormula(37) = .Cells(63, 34).Formula
                strXTableFormula(38) = .Cells(63, 35).Formula
                strXTableFormula(39) = .Cells(63, 36).Formula
                strXTableFormula(40) = .Cells(63, 37).Formula
    
       '        strXTableFormula(41) = .Cells(63, 3).Formula
       '         strXTableFormula(42) = .Cells(63, 4).Formula
       '         strXTableFormula(43) = .Cells(63, 5).Formula
       '         strXTableFormula(44) = .Cells(63, 6).Formula
                'Line 41
                strXTableFormula(45) = .Cells(64, 33).Formula
                strXTableFormula(46) = .Cells(64, 34).Formula
                strXTableFormula(47) = .Cells(64, 35).Formula
                strXTableFormula(48) = .Cells(64, 36).Formula
                strXTableFormula(49) = .Cells(64, 37).Formula
         '       strXTableFormula(50) = .Cells(64, 3).Formula
         '       strXTableFormula(51) = .Cells(64, 4).Formula
         '       strXTableFormula(52) = .Cells(64, 5).Formula
         '       strXTableFormula(53) = .Cells(64, 6).Formula
                'Line 42
                strXTableFormula(54) = .Cells(65, 33).Formula
                strXTableFormula(55) = .Cells(65, 34).Formula
                strXTableFormula(56) = .Cells(65, 35).Formula
                strXTableFormula(57) = .Cells(65, 36).Formula
                strXTableFormula(58) = .Cells(65, 37).Formula
                'Line 43
                strXTableFormula(59) = .Cells(66, 33).Formula
                strXTableFormula(60) = .Cells(66, 34).Formula
                strXTableFormula(61) = .Cells(66, 35).Formula
                strXTableFormula(62) = .Cells(66, 36).Formula
                strXTableFormula(63) = .Cells(66, 37).Formula
            '    strXTableFormula(64) = .Cells(66, 3).Formula
            '    strXTableFormula(65) = .Cells(66, 4).Formula
            '    strXTableFormula(66) = .Cells(66, 5).Formula
            '    strXTableFormula(67) = .Cells(66, 6).Formula
                'Line 44
                strXTableFormula(68) = .Cells(67, 33).Formula
                strXTableFormula(69) = .Cells(67, 34).Formula
                strXTableFormula(70) = .Cells(67, 35).Formula
                strXTableFormula(71) = .Cells(67, 36).Formula
                strXTableFormula(72) = .Cells(67, 37).Formula
          '      strXTableFormula(73) = .Cells(67, 3).Formula
          '      strXTableFormula(74) = .Cells(67, 4).Formula
          '      strXTableFormula(75) = .Cells(67, 5).Formula
          '      strXTableFormula(76) = .Cells(67, 6).Formula
                'Line 52
                strXTableFormula(77) = .Cells(78, 33).Formula
                strXTableFormula(78) = .Cells(78, 34).Formula
                strXTableFormula(79) = .Cells(78, 35).Formula
                strXTableFormula(80) = .Cells(78, 36).Formula
                strXTableFormula(81) = .Cells(78, 37).Formula
        '        strXTableFormula(82) = .Cells(78, 3).Formula
        '        strXTableFormula(83) = .Cells(78, 4).Formula
        '        strXTableFormula(84) = .Cells(78, 5).Formula
        '        strXTableFormula(85) = .Cells(78, 6).Formula
                
                
                'Line 55
                strXTableFormula(86) = .Cells(81, 33).Formula
                strXTableFormula(87) = .Cells(81, 34).Formula
                strXTableFormula(88) = .Cells(81, 35).Formula
                strXTableFormula(89) = .Cells(81, 36).Formula
                strXTableFormula(90) = .Cells(81, 37).Formula
                'Line 57
                strXTableFormula(91) = .Cells(85, 33).Formula
                strXTableFormula(92) = .Cells(85, 34).Formula
                strXTableFormula(93) = .Cells(85, 35).Formula
                strXTableFormula(95) = .Cells(85, 36).Formula
          '      strXTableFormula(96) = .Cells(85, 3).Formula
          '      strXTableFormula(97) = .Cells(85, 4).Formula
          '      strXTableFormula(98) = .Cells(85, 5).Formula
          '      strXTableFormula(99) = .Cells(85, 6).Formula
                'Line 58
                strXTableFormula(100) = .Cells(91, 33).Formula
                strXTableFormula(101) = .Cells(91, 34).Formula
                strXTableFormula(102) = .Cells(91, 35).Formula
                strXTableFormula(103) = .Cells(91, 36).Formula
                strXTableFormula(104) = .Cells(91, 37).Formula
                'Line 59
                strXTableFormula(105) = .Cells(92, 33).Formula
                strXTableFormula(106) = .Cells(92, 34).Formula
                strXTableFormula(107) = .Cells(92, 35).Formula
                strXTableFormula(108) = .Cells(92, 36).Formula
                strXTableFormula(109) = .Cells(92, 37).Formula
                'Line 60
                strXTableFormula(110) = .Cells(93, 33).Formula
                strXTableFormula(111) = .Cells(93, 34).Formula
                strXTableFormula(112) = .Cells(93, 35).Formula
                strXTableFormula(113) = .Cells(93, 36).Formula
                strXTableFormula(114) = .Cells(93, 37).Formula
            '    strXTableFormula(115) = .Cells(93, 3).Formula
            '    strXTableFormula(116) = .Cells(93, 4).Formula
            '    strXTableFormula(117) = .Cells(93, 5).Formula
            '    strXTableFormula(118) = .Cells(93, 6).Formula
                'Line 61
                strXTableFormula(119) = .Cells(97, 33).Formula
                strXTableFormula(120) = .Cells(97, 34).Formula
                strXTableFormula(121) = .Cells(97, 35).Formula
                strXTableFormula(122) = .Cells(97, 36).Formula
                strXTableFormula(123) = .Cells(97, 37).Formula
           '     strXTableFormula(124) = .Cells(97, 3).Formula
           '     strXTableFormula(125) = .Cells(97, 4).Formula
           '     strXTableFormula(126) = .Cells(97, 5).Formula
           '     strXTableFormula(127) = .Cells(97, 6).Formula
                'Line 62
                strXTableFormula(128) = .Cells(98, 33).Formula
                strXTableFormula(129) = .Cells(98, 34).Formula
                strXTableFormula(130) = .Cells(98, 35).Formula
                strXTableFormula(131) = .Cells(98, 36).Formula
                strXTableFormula(132) = .Cells(98, 37).Formula
           '     strXTableFormula(133) = .Cells(98, 3).Formula
            '    strXTableFormula(134) = .Cells(98, 4).Formula
            '    strXTableFormula(135) = .Cells(98, 5).Formula
            '    strXTableFormula(136) = .Cells(98, 6).Formula
                'Line 63
                strXTableFormula(137) = .Cells(99, 33).Formula
                strXTableFormula(138) = .Cells(99, 34).Formula
                strXTableFormula(139) = .Cells(99, 35).Formula
                strXTableFormula(140) = .Cells(99, 36).Formula
                strXTableFormula(141) = .Cells(99, 37).Formula
          '      strXTableFormula(142) = .Cells(99, 3).Formula
          '     strXTableFormula(143) = .Cells(99, 4).Formula
          '      strXTableFormula(144) = .Cells(99, 5).Formula
          '      strXTableFormula(145) = .Cells(99, 6).Formula
                'Youth and Community Line 95
'                strXTableFormula(146) = .Cells(158, 38).Formula
'                'Youth and Community Line 103
'                strXTableFormula(147) = .Cells(169, 38).Formula
'                .Protect (strTAPassWord)
                'Various formula on TB, lines (20)-(24)
                'Cols (3), (5)-(12) and (14)-(19)
                With xlOriginalWorkbook.Sheets("Table B")
                    .Unprotect (strTBPassWord)
                    For lngPhase = 1 To 5
                        strPhase = Switch(lngPhase = 1, "TotalNursery", _
                                          lngPhase = 2, "TotalPrimary", _
                                          lngPhase = 3, "TotalSecondary", _
                                          lngPhase = 4, "TotalSpecial", _
                                          lngPhase = 5, "TotalSpecial")
                        iCol = Switch(lngPhase = 1, 148, _
                                          lngPhase = 2, 164, _
                                          lngPhase = 3, 180, _
                                          lngPhase = 4, 196, _
                                          lngPhase = 5, 212)
                        lngRow = IIf(lngPhase = 5, .Range(strPhase).Row + 2, .Range(strPhase).Row)
'                        lngArrayColumn = ((lngPhase + 9) * 15) - 6
                        '1st = 148, 2nd = 164, 3rd = 180, 4th = 196, 5th = 212
                        'last number used = 228
                        'lngPhaseRow(lngPhase) = lngRow
                        strXTableFormula(iCol) = .Cells(lngRow, 26).Formula
                        strXTableFormula(iCol + 1) = .Cells(lngRow, 27).Formula
                        strXTableFormula(iCol + 2) = .Cells(lngRow, 29).Formula
                        strXTableFormula(iCol + 3) = .Cells(lngRow, 30).Formula
                        strXTableFormula(iCol + 4) = .Cells(lngRow, 31).Formula
                        strXTableFormula(iCol + 5) = .Cells(lngRow, 32).Formula
                        strXTableFormula(iCol + 6) = .Cells(lngRow, 33).Formula
                        strXTableFormula(iCol + 7) = .Cells(lngRow, 34).Formula
                        strXTableFormula(iCol + 8) = .Cells(lngRow, 35).Formula
                        strXTableFormula(iCol + 9) = .Cells(lngRow, 36).Formula
                        strXTableFormula(iCol + 10) = .Cells(lngRow, 38).Formula
                        strXTableFormula(iCol + 11) = .Cells(lngRow, 39).Formula
                        strXTableFormula(iCol + 12) = .Cells(lngRow, 40).Formula
                        strXTableFormula(iCol + 13) = .Cells(lngRow, 41).Formula
                        strXTableFormula(iCol + 14) = .Cells(lngRow, 42).Formula
                        strXTableFormula(iCol + 15) = .Cells(lngRow, 43).Formula
       
                        
                    Next lngPhase
                    .Protect (strTBPassWord)
                End With
'                With xlOriginalWorkbook.Sheets("YS Annex")
'                    .Unprotect (strTAaYSPassWord)
'                    strXTableFormula(229) = .Cells(19, 25).Formula
'                    strXTableFormula(230) = .Cells(20, 25).Formula
'                    .Protect (strTAaYSPassWord)
'                End With
'                With xlOriginalWorkbook.Sheets("Reconciliation Table")
'                    .Unprotect (strRECPassWord)
'                    'Data cells in column K
'                    strXTableFormula(231) = .Cells(23, 11).Formula
'                    strXTableFormula(232) = .Cells(24, 11).Formula
'                    strXTableFormula(233) = .Cells(32, 11).Formula
'                    strXTableFormula(234) = .Cells(34, 11).Formula
'                    strXTableFormula(235) = .Cells(37, 11).Formula
'                    strXTableFormula(236) = .Cells(44, 11).Formula
'                    strXTableFormula(237) = .Cells(45, 11).Formula
'                    strXTableFormula(238) = .Cells(49, 11).Formula
'                    strXTableFormula(239) = .Cells(50, 11).Formula
'                    strXTableFormula(240) = .Cells(51, 11).Formula
'                    strXTableFormula(241) = .Cells(61, 11).Formula
'                    strXTableFormula(242) = .Cells(66, 11).Formula
'                    strXTableFormula(243) = .Cells(68, 11).Formula
'                    strXTableFormula(244) = .Cells(77, 11).Formula
'                    strXTableFormula(245) = .Cells(78, 11).Formula
'                    'Error checking cells in column Z
'                    strXTableFormula(246) = .Cells(23, 26).Formula
'                    strXTableFormula(247) = .Cells(24, 26).Formula
'                    strXTableFormula(248) = .Cells(34, 26).Formula
'                    strXTableFormula(249) = .Cells(44, 26).Formula
'                    strXTableFormula(250) = .Cells(45, 26).Formula
'                    strXTableFormula(251) = .Cells(49, 26).Formula
'                    strXTableFormula(252) = .Cells(50, 26).Formula
'                    strXTableFormula(253) = .Cells(51, 26).Formula
'                    strXTableFormula(254) = .Cells(61, 26).Formula
'                    strXTableFormula(255) = .Cells(66, 26).Formula
'                    strXTableFormula(256) = .Cells(68, 26).Formula
'                    .Protect (strRECPassWord)
'                End With
'            '+---------+
'            '| Annex A |
'            '+---------+
'            Case "YS"
'                .Unprotect (strTAaYSPassWord)
'                strXTableFormula(1) = .Cells(19, 25).Formula
'                strXTableFormula(2) = .Cells(20, 25).Formula
'                .Protect (strTAaYSPassWord)
'                With xlOriginalWorkbook.Sheets("Table A")
'                    .Unprotect (strTAPassWord)
'                    'AL147 and AL158
'                    strXTableFormula(3) = .Cells(147, 38).Formula
'                    strXTableFormula(4) = .Cells(158, 38).Formula
'                    .Protect (strTAPassWord)
'                End With
        End Select
    End With

    '+----------------------------+
    '| Turn off the system alerts |
    '+----------------------------+
    Application.DisplayAlerts = False
    ' Unprotect the workbook and delete the old table
    xlOriginalWorkbook.Unprotect (strWorkBookPassWord)
    xlOriginalWorkbook.Sheets(strSheetName).Delete
    ' Bring in the new Table
    strAfterSheetName = Switch(strTableID = "A", "Submit Data", strTableID = "YS", "Table A")
    xlImportingWorkbook.Sheets(strInSheetName).Copy After:=xlOriginalWorkbook.Sheets(strAfterSheetName)
    xlImportingWorkbook.Close
    xlOriginalWorkbook.Activate
    ' Rename the 'New Table nn' as 'Table nn' and re-protect the workbook
    xlOriginalWorkbook.Sheets(strInSheetName).Select
    xlOriginalWorkbook.Sheets(strInSheetName).Name = strSheetName
    xlOriginalWorkbook.Protect (strWorkBookPassWord)

    '+--------------------------------------------------------------------+
    '| Now re-insert the X-table error-checking formula in the relevant   |
    '| sheets:-                                                           |
    '+--------------------------------------------------------------------+
    With xlOriginalWorkbook.Sheets(strSheetName)
        Select Case strTableID
            '+---------+
            '| Table A |
            '+---------+
            Case "A"
                .Unprotect (strTAPassWord)
                'Line 32
                .Cells(51, 33).Formula = strXTableFormula(1)
                .Cells(51, 34).Formula = strXTableFormula(2)
                .Cells(51, 35).Formula = strXTableFormula(3)
                .Cells(51, 36).Formula = strXTableFormula(4)
                .Cells(51, 37).Formula = strXTableFormula(5)
                'Line 33
                .Cells(52, 33).Formula = strXTableFormula(6)
                .Cells(52, 34).Formula = strXTableFormula(7)
                .Cells(52, 35).Formula = strXTableFormula(8)
                .Cells(52, 36).Formula = strXTableFormula(9)
                .Cells(52, 37).Formula = strXTableFormula(10)
                'Line 35
                .Cells(55, 33).Formula = strXTableFormula(11)
                .Cells(55, 34).Formula = strXTableFormula(12)
                .Cells(55, 35).Formula = strXTableFormula(13)
                .Cells(55, 36).Formula = strXTableFormula(14)
                .Cells(55, 37).Formula = strXTableFormula(15)
                'Line 36
                .Cells(59, 33).Formula = strXTableFormula(16)
                .Cells(59, 34).Formula = strXTableFormula(17)
                .Cells(59, 35).Formula = strXTableFormula(18)
                .Cells(59, 36).Formula = strXTableFormula(19)
                .Cells(59, 37).Formula = strXTableFormula(20)
                'Line 37
                .Cells(60, 33).Formula = strXTableFormula(21)
                .Cells(60, 34).Formula = strXTableFormula(22)
                .Cells(60, 35).Formula = strXTableFormula(23)
                .Cells(60, 36).Formula = strXTableFormula(24)
                .Cells(60, 37).Formula = strXTableFormula(25)
                'Line 38
                .Cells(61, 33).Formula = strXTableFormula(26)
                .Cells(61, 34).Formula = strXTableFormula(27)
                .Cells(61, 35).Formula = strXTableFormula(28)
                .Cells(61, 36).Formula = strXTableFormula(29)
                .Cells(61, 37).Formula = strXTableFormula(30)
                'Line 39
                .Cells(62, 33).Formula = strXTableFormula(31)
                .Cells(62, 34).Formula = strXTableFormula(32)
                .Cells(62, 35).Formula = strXTableFormula(33)
                .Cells(62, 36).Formula = strXTableFormula(34)
                .Cells(62, 37).Formula = strXTableFormula(35)
                'Line 40
                .Cells(63, 33).Formula = strXTableFormula(36)
                .Cells(63, 34).Formula = strXTableFormula(37)
                .Cells(63, 35).Formula = strXTableFormula(38)
                .Cells(63, 36).Formula = strXTableFormula(39)
                .Cells(63, 37).Formula = strXTableFormula(40)
'                .Cells(63, 3).Formula = strXTableFormula(41)
'                .Cells(63, 4).Formula = strXTableFormula(42)
'                .Cells(63, 5).Formula = strXTableFormula(43)
'                .Cells(63, 6).Formula = strXTableFormula(44)
                'Line 41
                .Cells(64, 31).Formula = strXTableFormula(45)
                .Cells(64, 32).Formula = strXTableFormula(46)
                .Cells(64, 33).Formula = strXTableFormula(47)
                .Cells(64, 34).Formula = strXTableFormula(48)
                .Cells(64, 35).Formula = strXTableFormula(49)
'                .Cells(64, 3).Formula = strXTableFormula(50)
'                .Cells(64, 4).Formula = strXTableFormula(51)
'                .Cells(64, 5).Formula = strXTableFormula(52)
'                .Cells(64, 6).Formula = strXTableFormula(53)
                'Line 42
                .Cells(65, 31).Formula = strXTableFormula(54)
                .Cells(65, 32).Formula = strXTableFormula(55)
                .Cells(65, 33).Formula = strXTableFormula(56)
                .Cells(65, 34).Formula = strXTableFormula(57)
                .Cells(65, 35).Formula = strXTableFormula(58)
                'Line 43
                .Cells(66, 31).Formula = strXTableFormula(59)
                .Cells(66, 32).Formula = strXTableFormula(60)
                .Cells(66, 33).Formula = strXTableFormula(61)
                .Cells(66, 34).Formula = strXTableFormula(62)
                .Cells(66, 35).Formula = strXTableFormula(63)
                .Cells(66, 3).Formula = strXTableFormula(64)
                .Cells(66, 4).Formula = strXTableFormula(65)
                .Cells(66, 5).Formula = strXTableFormula(66)
                .Cells(66, 6).Formula = strXTableFormula(67)
                'Line 44
                .Cells(67, 31).Formula = strXTableFormula(68)
                .Cells(67, 32).Formula = strXTableFormula(69)
                .Cells(67, 33).Formula = strXTableFormula(70)
                .Cells(67, 34).Formula = strXTableFormula(71)
                .Cells(67, 35).Formula = strXTableFormula(72)
                .Cells(67, 3).Formula = strXTableFormula(73)
                .Cells(67, 4).Formula = strXTableFormula(74)
                .Cells(67, 5).Formula = strXTableFormula(75)
                .Cells(67, 6).Formula = strXTableFormula(76)
                'Line 52
                .Cells(78, 31).Formula = strXTableFormula(77)
                .Cells(78, 32).Formula = strXTableFormula(78)
                .Cells(78, 33).Formula = strXTableFormula(79)
                .Cells(78, 34).Formula = strXTableFormula(80)
                .Cells(78, 35).Formula = strXTableFormula(81)
                '.Cells(74, 3).Formula = strXTableFormula(82)
                '.Cells(74, 4).Formula = strXTableFormula(83)
                '.Cells(74, 5).Formula = strXTableFormula(84)
                '.Cells(74, 6).Formula = strXTableFormula(85)
                'Line 55
                .Cells(81, 31).Formula = strXTableFormula(86)
                .Cells(81, 32).Formula = strXTableFormula(87)
                .Cells(81, 33).Formula = strXTableFormula(88)
                .Cells(81, 34).Formula = strXTableFormula(89)
                .Cells(81, 35).Formula = strXTableFormula(90)
                'Line 57
                .Cells(85, 31).Formula = strXTableFormula(91)
                .Cells(85, 32).Formula = strXTableFormula(92)
                .Cells(85, 33).Formula = strXTableFormula(93)
                .Cells(85, 34).Formula = strXTableFormula(94)
                .Cells(85, 35).Formula = strXTableFormula(95)
                '.Cells(81, 3).Formula = strXTableFormula(96)
                '.Cells(81, 4).Formula = strXTableFormula(97)
                '.Cells(81, 5).Formula = strXTableFormula(98)
                '.Cells(81, 6).Formula = strXTableFormula(99)
                'Line 58
                .Cells(91, 31).Formula = strXTableFormula(100)
                .Cells(91, 32).Formula = strXTableFormula(101)
                .Cells(91, 33).Formula = strXTableFormula(102)
                .Cells(91, 34).Formula = strXTableFormula(103)
                .Cells(91, 35).Formula = strXTableFormula(104)
                'Line 59
                .Cells(92, 31).Formula = strXTableFormula(105)
                .Cells(92, 32).Formula = strXTableFormula(106)
                .Cells(92, 33).Formula = strXTableFormula(107)
                .Cells(92, 34).Formula = strXTableFormula(108)
                .Cells(92, 35).Formula = strXTableFormula(109)
                'Line 60
                .Cells(93, 31).Formula = strXTableFormula(110)
                .Cells(93, 32).Formula = strXTableFormula(111)
                .Cells(93, 33).Formula = strXTableFormula(112)
                .Cells(93, 34).Formula = strXTableFormula(113)
                .Cells(93, 35).Formula = strXTableFormula(114)
                'Line 61
                .Cells(97, 31).Formula = strXTableFormula(119)
                .Cells(97, 32).Formula = strXTableFormula(120)
                .Cells(97, 33).Formula = strXTableFormula(121)
                .Cells(97, 34).Formula = strXTableFormula(122)
                .Cells(97, 35).Formula = strXTableFormula(123)
                .Cells(97, 3).Formula = strXTableFormula(124)
                .Cells(97, 4).Formula = strXTableFormula(125)
                .Cells(97, 5).Formula = strXTableFormula(126)
                .Cells(97, 6).Formula = strXTableFormula(127)
                'Line 62
                .Cells(98, 31).Formula = strXTableFormula(128)
                .Cells(98, 32).Formula = strXTableFormula(129)
                .Cells(98, 33).Formula = strXTableFormula(130)
                .Cells(98, 34).Formula = strXTableFormula(131)
                .Cells(98, 35).Formula = strXTableFormula(132)
                .Cells(98, 3).Formula = strXTableFormula(133)
                .Cells(98, 4).Formula = strXTableFormula(134)
                .Cells(98, 5).Formula = strXTableFormula(135)
                .Cells(98, 6).Formula = strXTableFormula(136)
                'Line 63
                .Cells(99, 31).Formula = strXTableFormula(137)
                .Cells(99, 32).Formula = strXTableFormula(138)
                .Cells(99, 33).Formula = strXTableFormula(139)
                .Cells(99, 34).Formula = strXTableFormula(140)
                .Cells(99, 35).Formula = strXTableFormula(141)
                .Cells(99, 3).Formula = strXTableFormula(142)
                .Cells(99, 4).Formula = strXTableFormula(143)
                .Cells(99, 5).Formula = strXTableFormula(144)
                .Cells(99, 6).Formula = strXTableFormula(145)
                'Youth and Community Line 95
'                .Cells(147, 38).Formula = strXTableFormula(142)
'                'Youth and Community Line 103
'                .Cells(158, 38).Formula = strXTableFormula(143)
                .Protect (strTAPassWord)
                'Various formula on TB, lines (20)-(24)
                'Cols (3), (5)-(12) and (14)-(19)
                With xlOriginalWorkbook.Sheets("Table B")
                    .Unprotect (strTBPassWord)
                    For lngPhase = 1 To 5
                        strPhase = Switch(lngPhase = 1, "TotalNursery", _
                                          lngPhase = 2, "TotalPrimary", _
                                          lngPhase = 3, "TotalSecondary", _
                                          lngPhase = 4, "TotalSpecial", _
                                          lngPhase = 5, "TotalSpecial")
                        iCol = Switch(lngPhase = 1, 148, _
                                          lngPhase = 2, 164, _
                                          lngPhase = 3, 180, _
                                          lngPhase = 4, 196, _
                                          lngPhase = 5, 212)
                        lngRow = IIf(lngPhase = 5, .Range(strPhase).Row + 2, .Range(strPhase).Row)
                        'lngArrayColumn = ((lngPhase + 9) * 15) - 6
                        '1st = 144, 2nd = 159, 3rd = 174, 4th = 189, 5th = 204
                        'last number used = 218
                        .Cells(lngRow, 26).Formula = strXTableFormula(iCol)
                        .Cells(lngRow, 27).Formula = strXTableFormula(iCol + 1)
                        .Cells(lngRow, 29).Formula = strXTableFormula(iCol + 2)
                        .Cells(lngRow, 30).Formula = strXTableFormula(iCol + 3)
                        .Cells(lngRow, 31).Formula = strXTableFormula(iCol + 4)
                        .Cells(lngRow, 32).Formula = strXTableFormula(iCol + 5)
                        .Cells(lngRow, 33).Formula = strXTableFormula(iCol + 6)
                        .Cells(lngRow, 34).Formula = strXTableFormula(iCol + 7)
                        .Cells(lngRow, 35).Formula = strXTableFormula(iCol + 8)
                        .Cells(lngRow, 36).Formula = strXTableFormula(iCol + 9)
                        .Cells(lngRow, 38).Formula = strXTableFormula(iCol + 10)
                        .Cells(lngRow, 39).Formula = strXTableFormula(iCol + 11)
                        .Cells(lngRow, 40).Formula = strXTableFormula(iCol + 12)
                        .Cells(lngRow, 41).Formula = strXTableFormula(iCol + 13)
                        .Cells(lngRow, 42).Formula = strXTableFormula(iCol + 14)
                        .Cells(lngRow, 43).Formula = strXTableFormula(iCol + 15)

                    Next lngPhase
                    .Protect (strTBPassWord)
                End With
'                With xlOriginalWorkbook.Sheets("YS Annex")
'                    .Unprotect (strTAaYSPassWord)
'                    .Cells(19, 25).Formula = strXTableFormula(229)
'                    .Cells(20, 25).Formula = strXTableFormula(230)
'                    .Protect (strTAaYSPassWord)
'                End With
'                With xlOriginalWorkbook.Sheets("Reconciliation Table")
'                    .Unprotect (strRECPassWord)
'                    'Data cells in column K
'                    .Cells(23, 11).Formula = strXTableFormula(231)
'                    .Cells(24, 11).Formula = strXTableFormula(232)
'                    .Cells(32, 11).Formula = strXTableFormula(233)
'                    .Cells(34, 11).Formula = strXTableFormula(234)
'                    .Cells(37, 11).Formula = strXTableFormula(235)
'                    .Cells(44, 11).Formula = strXTableFormula(236)
'                    .Cells(45, 11).Formula = strXTableFormula(237)
'                    .Cells(49, 11).Formula = strXTableFormula(238)
'                    .Cells(50, 11).Formula = strXTableFormula(239)
'                    .Cells(51, 11).Formula = strXTableFormula(240)
'                    .Cells(61, 11).Formula = strXTableFormula(241)
'                    .Cells(66, 11).Formula = strXTableFormula(242)
'                    .Cells(68, 11).Formula = strXTableFormula(243)
'                    .Cells(77, 11).Formula = strXTableFormula(244)
'                    .Cells(78, 11).Formula = strXTableFormula(245)
'                    'Error checking cells in column Z
'                    .Cells(23, 26).Formula = strXTableFormula(246)
'                    .Cells(24, 26).Formula = strXTableFormula(247)
'                    .Cells(34, 26).Formula = strXTableFormula(248)
'                    .Cells(44, 26).Formula = strXTableFormula(249)
'                    .Cells(45, 26).Formula = strXTableFormula(250)
'                    .Cells(49, 26).Formula = strXTableFormula(251)
'                    .Cells(50, 26).Formula = strXTableFormula(252)
'                    .Cells(51, 26).Formula = strXTableFormula(253)
'                    .Cells(61, 26).Formula = strXTableFormula(254)
'                    .Cells(66, 26).Formula = strXTableFormula(255)
'                    .Cells(68, 26).Formula = strXTableFormula(256)
'                    .Protect (strRECPassWord)
'                End With
'            '+---------+
'            '| Annex A |
'            '+---------+
'            Case "YS"
'                .Unprotect (strTAaYSPassWord)
'                .Cells(19, 25).Formula = strXTableFormula(1)
'                .Cells(20, 25).Formula = strXTableFormula(2)
'                .Protect (strTAaYSPassWord)
'                With xlOriginalWorkbook.Sheets("Table A")
'                    .Unprotect (strTAPassWord)
'                    .Cells(147, 38).Formula = strXTableFormula(3)
'                    .Cells(158, 38).Formula = strXTableFormula(4)
'                    .Protect (strTAPassWord)
               ' End With
      End Select
    End With


    'Clear out the formulae from the variables - free up memory!
    For lngCounter = 1 To 256
        strXTableFormula(lngCounter) = ""
    Next lngCounter

    xlOriginalWorkbook.Save
    ' Turn the system alerts back on
    Application.DisplayAlerts = True
    MsgBox "The " & strSheetName & " worksheet has been imported from the following file:-" & _
           vbCrLf & vbCrLf & _
           strWorkBookPath & "\s5209-10o" & strImportFileName & lngLEA & ".xls", _
           vbInformation, strMsgTitle
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module ImportTable(" & strTableID & ")." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub

Function MustBeNumericFormula(strCellRef As String)
    '+---------------------------------------------------------------+
    '| This function returns the formula needed to check for blanks, |
    '| numeric data, and less than zero in the Excel cell reference  |
    '| passed to it. It is used during the process to amend the cell |
    '| references which have references to other tables in them,     |
    '| during the export process.                                    |
    '+---------------------------------------------------------------+
    MustBeNumericFormula = "=IF(AND(" & strCellRef & "=" & Chr(34) & Chr(34) & _
                           ",$H$1<>" & Chr(34) & "*" & Chr(34) & ")," & Chr(34) & _
                           Chr(34) & ",IF(AND(" & strCellRef & "=" & Chr(34) & _
                           Chr(34) & ",$H$1=" & Chr(34) & "*" & Chr(34) & ")," & _
                           Chr(34) & "Error 1.1" & Chr(34) & ",IF(ISNUMBER(" & _
                           strCellRef & ")=FALSE," & Chr(34) & "Error 1.2" & Chr(34) & _
                           "," & Chr(34) & Chr(34) & ")))"
End Function

Function ZeroCellFormula(strCellRef As String)
    '+---------------------------------------------------------------+
    '| This function returns the formula needed to check for blanks, |
    '| numeric data, and less than zero in the Excel cell reference  |
    '| passed to it. It is used during the process to amend the cell |
    '| references which have references to other tables in them,     |
    '| during the export process.                                    |
    '+---------------------------------------------------------------+
    ZeroCellFormula = "=IF(AND(" & strCellRef & "=" & Chr(34) & Chr(34) & _
                      ",$H$1<>" & Chr(34) & "*" & Chr(34) & ")," & Chr(34) & _
                      Chr(34) & ",IF(AND(" & strCellRef & "=" & Chr(34) & _
                      Chr(34) & ",$H$1=" & Chr(34) & "*" & Chr(34) & ")," & _
                      Chr(34) & "Error 1.1" & Chr(34) & ",IF(ISNUMBER(" & _
                      strCellRef & ")=FALSE," & Chr(34) & "Error 1.2" & Chr(34) & _
                      ",IF(" & strCellRef & "<0," & Chr(34) & "Error 1.3" & _
                      Chr(34) & "," & Chr(34) & Chr(34) & "))))"
End Function

Function AsteriskWarnFormula(strCellRef As String)
    '+-----------------------------------------------------------------+
    '| This function returns the formula needed to check for blanks,   |
    '| numeric data, less than zero values in the Excel                |
    '| cell reference passed to it. It is used during the process to   |
    '| amend the cell references which have references to other tables |
    '| in them, during the export process.                             |
    '+-----------------------------------------------------------------+
    AsteriskWarnFormula = "=IF(AND(" & strCellRef & "=" & Chr(34) & Chr(34) & _
                      ",$H$1<>" & Chr(34) & "*" & Chr(34) & ")," & Chr(34) & _
                      Chr(34) & ",IF(AND(" & strCellRef & "=" & Chr(34) & _
                      Chr(34) & ",$H$1=" & Chr(34) & "*" & Chr(34) & ")," & _
                      Chr(34) & "Error 1.1" & Chr(34) & ",IF(" & strCellRef & _
                      "=" & Chr(34) & "*" & Chr(34) & "," & Chr(34) & _
                      "Warning 1.1" & Chr(34) & ",IF(ISNUMBER(" & _
                      strCellRef & ")=FALSE," & Chr(34) & "Error 1.2" & Chr(34) & _
                      ",IF(" & strCellRef & "<0," & Chr(34) & "Error 1.3" & _
                      Chr(34) & "," & Chr(34) & Chr(34) & ")))))"
End Function

Function EqualZeroCellFormula(strCellRef As String)
    '+-----------------------------------------------------------------+
    '| This function returns the formula needed to check for blanks,   |
    '| numeric data, less than zero values in the Excel                |
    '| cell reference passed to it. It is used during the process to   |
    '| amend the cell references which have references to other tables |
    '| in them, during the export process.                             |
    '+-----------------------------------------------------------------+
    EqualZeroCellFormula = "=IF(AND(" & strCellRef & "=" & Chr(34) & Chr(34) & _
                           ",$H$1<>" & Chr(34) & "*" & Chr(34) & ")," & Chr(34) & _
                           Chr(34) & ",IF(AND(" & strCellRef & "=" & Chr(34) & _
                           Chr(34) & ",$H$1=" & Chr(34) & "*" & Chr(34) & ")," & _
                           Chr(34) & "Error 1.1" & Chr(34) & ",IF(ISNUMBER(" & _
                           strCellRef & ")=FALSE," & Chr(34) & "Error 1.2" & Chr(34) & _
                           ",IF(" & strCellRef & "<=0," & Chr(34) & "Error 1.4" & _
                           Chr(34) & "," & Chr(34) & Chr(34) & "))))"
End Function

Function ShouldBeZeroCellFormula(strCellRef As String)
    '+-----------------------------------------------------------------+
    '| This function returns the formula needed to check for blanks,   |
    '| numeric data, less than zero and integer values in the Excel    |
    '| cell reference passed to it. It is used during the process to   |
    '| amend the cell references which have references to other tables |
    '| in them, during the export process. E1.3 becomes W1.3           |
    '+-----------------------------------------------------------------+
    ShouldBeZeroCellFormula = "=IF(AND(" & strCellRef & "=" & Chr(34) & Chr(34) & _
                      ",$H$1<>" & Chr(34) & "*" & Chr(34) & ")," & Chr(34) & _
                      Chr(34) & ",IF(AND(" & strCellRef & "=" & Chr(34) & _
                      Chr(34) & ",$H$1=" & Chr(34) & "*" & Chr(34) & ")," & _
                      Chr(34) & "Error 1.1" & Chr(34) & ",IF(ISNUMBER(" & _
                      strCellRef & ")=FALSE," & Chr(34) & "Error 1.2" & Chr(34) & _
                      ",IF(" & strCellRef & "<0," & Chr(34) & "Warning 1.3" & _
                      Chr(34) & "," & Chr(34) & Chr(34) & "))))"
End Function

Function Line35colB(strCellRef As String)
    '+-----------------------------------------------------------------+
    '| This function returns the formula needed to check for blanks,   |
    '| numeric data, less than zero and integer values in the Excel    |
    '| cell reference passed to it. It is used during the process to   |
    '| amend the cell references which have references to other tables |
    '| in them, during the export process.                             |
    '+-----------------------------------------------------------------+
    Line35colB = "=IF(AND(" & strCellRef & "=" & Chr(34) & Chr(34) & _
                 ",$H$1<>" & Chr(34) & "*" & Chr(34) & ")," & Chr(34) & _
                 Chr(34) & ",IF(AND(" & strCellRef & "=" & Chr(34) & _
                 Chr(34) & ",$H$1=" & Chr(34) & "*" & Chr(34) & ")," & _
                 Chr(34) & "Error 1.1" & Chr(34) & ",IF(ISNUMBER(" & _
                 strCellRef & ")=FALSE," & Chr(34) & "Error 1.2" & Chr(34) & _
                 ",IF(" & strCellRef & "<0," & Chr(34) & "Error 1.3" & _
                 Chr(34) & ",IF(" & strCellRef & "<>SUM(C15,C17,C28,C51)," & _
                 Chr(34) & "Warning 1.5" & Chr(34) & "," & _
                 Chr(34) & Chr(34) & ")))))"
End Function

Function Line35colC(strCellRef As String)
    '+------------------------------------------------------------------+
    '| This function returns the formula needed for line 33 colum C. It |
    '| is used during the process to amend the cell references which    |
    '| have references to other tables, during the export process.      |
    '+------------------------------------------------------------------+
    Line35colC = "=IF(AND(" & strCellRef & "=" & Chr(34) & Chr(34) & _
                 ",$H$1<>" & Chr(34) & "*" & Chr(34) & ")," & Chr(34) & _
                 Chr(34) & ",IF(AND(" & strCellRef & "=" & Chr(34) & _
                 Chr(34) & ",$H$1=" & Chr(34) & "*" & Chr(34) & ")," & _
                 Chr(34) & "Error 1.1" & Chr(34) & ",IF(ISNUMBER(" & _
                 strCellRef & ")=FALSE," & Chr(34) & "Error 1.2" & Chr(34) & _
                 ",IF(" & strCellRef & "<0," & Chr(34) & "Error 1.3" & _
                 Chr(34) & ",IF(" & strCellRef & "<>SUM(D15,D17,D28,D51)," & _
                 Chr(34) & "Warning 1.5" & Chr(34) & "," & _
                 Chr(34) & Chr(34) & ")))))"
End Function

Function Lea201_420_Over0(strCellRef As String)
    '+------------------------------------------------------------------+
    '| This function returns the formula needed for columns C and D for |
    '| LEAs 201 and 420 >0 has to be replaced with >=0. It is used      |
    '| during the process to amend the cell references which have       |
    '| references to other tables, during the export process.           |
    '+------------------------------------------------------------------+
    Lea201_420_Over0 = "=IF(AND(" & strCellRef & "=" & Chr(34) & Chr(34) & _
                       ",$H$1<>" & Chr(34) & "*" & Chr(34) & ")," & Chr(34) & _
                       Chr(34) & ",IF(AND(" & strCellRef & "=" & Chr(34) & _
                       Chr(34) & ",$H$1=" & Chr(34) & "*" & Chr(34) & ")," & _
                       Chr(34) & "Error 1.1" & Chr(34) & ",IF(ISNUMBER(" & _
                       strCellRef & ")=FALSE," & Chr(34) & "Error 1.2" & Chr(34) & _
                       ",IF(AND(K3<>201,K3<>420," & strCellRef & "<=0)," & Chr(34) & _
                       "Error 1.4" & Chr(34) & ",IF(AND(OR(K3=201,K3=420)," & _
                       strCellRef & "<0)," & Chr(34) & "Error 1.3" & Chr(34) & _
                       "," & Chr(34) & Chr(34) & _
                       ")))))"
End Function

Function WarnIfEqualZero(strCellRef As String)
    WarnIfEqualZero = "=IF(AND(" & strCellRef & "=" & Chr(34) & Chr(34) & _
                      ",$H$1<>" & Chr(34) & "*" & Chr(34) & ")," & Chr(34) & _
                      Chr(34) & ",IF(AND(" & strCellRef & "=" & Chr(34) & _
                      Chr(34) & ",$H$1=" & Chr(34) & "*" & Chr(34) & ")," & _
                      Chr(34) & "Error 1.1" & Chr(34) & ",IF(ISNUMBER(" & _
                      strCellRef & ")=FALSE," & Chr(34) & "Error 1.2" & Chr(34) & _
                      ",IF(" & strCellRef & "<0," & Chr(34) & "Error 1.3" & _
                      Chr(34) & ",IF(" & strCellRef & "=0," & Chr(34) & _
                      "Warning 1.6" & Chr(34) & "," & Chr(34) & Chr(34) & ")))))"
End Function
Function CheckProtection(strTableID As String)
    Dim strPassword As String
    Dim strSheetName As String
    Dim blnAcceptError As Boolean
    On Error GoTo ErrorTrap

    CheckProtection = False
    strPassword = Switch(strTableID = "A", strTAPassWord, _
                         strTableID = "B", strTBPassWord)
     '                    strTableID = "YS", strTAaYSPassWord)
    strSheetName = Switch(strTableID = "A", "New Table A", _
                          strTableID = "B", "New Table B")
                    '      strTableID = "YS", "New YS Annex")
    blnAcceptError = True
    ActiveWorkbook.Sheets(strSheetName).Unprotect ("TeSt")
    'Failed as the protection has been removed
    MsgBox "The worksheet you are trying to import has had the protection" & vbCrLf & _
           "removed, this indicates that it is not a standard DCSF template." & vbCrLf & vbCrLf & _
           "Please check the import file and try again", vbOKOnly, strMsgTitle
    Application.ScreenUpdating = True
    Exit Function

CorrectFailure:
    blnAcceptError = False
    'Check if the password has been changed
    ActiveWorkbook.Sheets(strSheetName).Unprotect (strPassword)
    'If it is successful then re-protect it.
    ActiveWorkbook.Sheets(strSheetName).Protect (strPassword)
    CheckProtection = True
    Exit Function

ErrorTrap:
    If Err.Number = 1004 Then
        If blnAcceptError Then
            Resume CorrectFailure
        Else
            MsgBox "The worksheet you are trying to import has had the protection" & vbCrLf & _
                   "changed, this indicates that it is not a standard DCSF template." & vbCrLf & vbCrLf & _
                   "Please check the import file and try again", vbOKOnly, strMsgTitle
        End If
    Else
        MsgBox "Error " & Err.Number & " occurred in module CheckProtection()." & _
               vbCrLf & vbCrLf & _
               Err.Description, vbExclamation, strMsgTitle
    End If
    Application.ScreenUpdating = True
End Function
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "imgYSShowBlanks, 1, 0, MSForms, Image"
Option Explicit



Private Sub imgYSShowBlanks_Click()
  Dim myCell As Range
    On Error GoTo ErrorHandler

    Application.Sheets("Table A1").Cells(1, 9) = "*"     'Put an asterisk in cell I1
    For Each myCell In Range("TA1_Error_Range")
        'Check for Excel errors (#REF!, #NAME? etc..)
        If IsError(myCell) Then
            MsgBox "There is an Excel error in your worksheet, this is usually" & vbCrLf & _
                   "caused by using cut/paste instead of copy/paste and has" & vbCrLf & _
                   "corrupted the error-checking formula.", vbExclamation, "Section 52 Outturn 2008-09"
            Exit For
        Else
            'Check for Error1 (Blank cells)
            If myCell.Value = "Error 1.1" Then
                MsgBox "You have left some cells blank. These are highlighted in blue. " & vbCrLf & _
                       "Please replace these with a zero or other number as appropriate", _
                       vbExclamation, "Section 52 Outturn 2008-09"
                Exit For
            End If
        End If
    Next myCell
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module imgTA1ShowBlanks_Click()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, "Section 52 Outturn 2009-10"
    Application.ScreenUpdating = True
    Resume Next
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    Dim strErrorWarning As String
    Dim strEWnumber As String
    Dim lngRow As Long
    Dim lngFirstDataRow As Long
    Dim lngErrRangeOffset As Long
    Dim lngColorIndexCF As Long
    Dim lngErrCol As Long
    Dim lngerrRow As Long

    If IsError(ActiveCell) Then
        MsgBox "There is an Excel error in your worksheet, this is usually" & vbCrLf & _
               "caused by using cut/paste instead of copy/paste and has" & vbCrLf & _
               "corrupted the error-checking formula.", vbExclamation, "Section 52 Outturn 2009-10"
        Exit Sub
    End If

    lngFirstDataRow = 12
    lngErrRangeOffset = 21
    strErrorWarning = ""

    'New code added 25/05/2007. Checks to see if you are on a data cell
    'in error, and if so, it displays the error message here too.
    If ActiveCell.Row < lngFirstDataRow Then
        'Simpler check for the header cells.
        lngColorIndexCF = ColorIndexOfCF(Range(ActiveCell.AddressLocal))
        'Gets the conditional formatting applied to the cell if there is one.
        If lngColorIndexCF = 3 Or lngColorIndexCF = 6 Or lngColorIndexCF = 36 Then
            '3 is red, 6 is yellow and 36 is light yellow
            Select Case ActiveCell.AddressLocal
                Case "$D$4", "$E$4"
                    'Contact = Error H1
                    MsgBox "Error H1" & vbCrLf & vbCrLf & _
                           "You must enter a contact name here", vbOKOnly, "Error Message"
                Case "$D$5", "$E$5"
                    'Tel No. = Error H2
                    MsgBox "Error H2" & vbCrLf & vbCrLf & _
                           "You must enter a contact telephone number here", vbOKOnly, "Error Message"
                Case "$F$4", "$G$4"
                    'Email = Error H3
                    MsgBox "Error H3" & vbCrLf & vbCrLf & _
                           "You must enter a contact email address here", vbOKOnly, "Error Message"
                Case "$F$5", "$G$5"
                    'Version = Warning H1
                    MsgBox "Warning H1" & vbCrLf & vbCrLf & _
                           "You should enter the version number of this return here", vbOKOnly, "Warning Message"
                Case "$H$5", "$I$5"
                    'Date = Warning H2
                    MsgBox "Warning H2" & vbCrLf & vbCrLf & _
                           "You should enter the date you completed this return here", vbOKOnly, "Warning Message"
            End Select
        End If
        Exit Sub
    End If
    lngColorIndexCF = ColorIndexOfCF(Range(ActiveCell.AddressLocal))
    'Gets the conditional formatting applied to the cell if there is one.
    If lngColorIndexCF = 3 Or lngColorIndexCF = 6 Or lngColorIndexCF = 36 Then
        '3 is red, 6 is yellow and 36 is light yellow
        lngErrCol = ActiveCell.Column + lngErrRangeOffset
        lngerrRow = ActiveCell.Row
        If Left(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 5) = "Error" Then
            strErrorWarning = "E"
            strEWnumber = Trim(Mid(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 7))
        ElseIf Left(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 7) = "Warning" Then
            strErrorWarning = "W"
            strEWnumber = Trim(Mid(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 9))
        End If
    ElseIf Left(ActiveCell.Value, 9) = "Error 1.1" Then
        MsgBox "Value is missing. Do not leave any cell blank"
    ElseIf Left(ActiveCell.Value, 5) = "Error" Then
        strErrorWarning = "E"
        strEWnumber = Trim(Mid(ActiveCell.Value, 7))
    ElseIf Left(ActiveCell.Value, 7) = "Warning" Then
        strErrorWarning = "W"
        strEWnumber = Trim(Mid(ActiveCell.Value, 9))
    End If

    If strErrorWarning <> "" Then
        With ActiveWorkbook.Sheets("Error Codes")
            lngRow = 1
            Do While .Cells(lngRow, 1) <> ""
                If .Cells(lngRow, 1) = strErrorWarning And _
                   .Cells(lngRow, 2) = strEWnumber Then
                   MsgBox IIf(strErrorWarning = "E", "Error " & strEWnumber, "Warning " & strEWnumber) & _
                          vbCrLf & vbCrLf & _
                          .Cells(lngRow, 3), vbOKOnly, _
                            IIf(strErrorWarning = "E", "Error Message", "Warning Message")
                    Exit Do
                End If
                lngRow = lngRow + 1
            Loop
        End With
    End If
End Sub

Private Function ColorIndexOfCF(Rng As Range) As Integer
    Dim AC As Integer
    ColorIndexOfCF = 0
    AC = ActiveCondition(Rng)
    If AC <> 0 Then
        ColorIndexOfCF = Rng.FormatConditions(AC).Interior.ColorIndex
    End If
End Function

Private Function ActiveCondition(Rng As Range) As Integer
    Dim Ndx As Long
    Dim FC As FormatCondition
    If Rng.FormatConditions.Count <> 0 Then
        For Ndx = 1 To Rng.FormatConditions.Count
            Set FC = Rng.FormatConditions(Ndx)
            If Application.Evaluate(FC.Formula1) Then
                ActiveCondition = Ndx
                Exit Function
            End If
        Next Ndx
    End If
    ActiveCondition = 0
End Function
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "imgTBShowBlanks, 1, 0, MSForms, Image"
Attribute VB_Control = "imgTBSort, 2, 1, MSForms, Image"
Attribute VB_Control = "imgTBInsertSchool, 3, 2, MSForms, Image"
Option Explicit

Private Sub imgTBInsertSchool_Click()
    frmInsert.Show
End Sub

Private Sub imgTBShowBlanks_Click()
    Dim myCell As Range
    On Error GoTo ErrorHandler

    Application.Sheets("Table B").Cells(1, 8) = "*"     'Put an asterisk in cell H1
    For Each myCell In Range("TB_Error_Range")
        'Check for Excel errors (#REF!, #NAME? etc..)
        If IsError(myCell) Then
            MsgBox "There is an Excel error in your worksheet, this is usually" & vbCrLf & _
                   "caused by using cut/paste instead of copy/paste and has" & vbCrLf & _
                   "corrupted the error-checking formula.", vbExclamation, strMsgTitle
            Exit For
        Else
            'Check for Error1 (Blank cells)
            If myCell.Value = "Error 1.1" Then
                MsgBox "You have left some cells blank. These are highlighted in blue. " & vbCrLf & _
                       "Please replace these with a zero or other number as appropriate", _
                       vbExclamation, strMsgTitle
                Exit For
            End If
        End If
    Next myCell
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module imgTBShowBlanks_Click()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
    Resume Next
End Sub

Private Sub imgTBSort_Click()
    frmSorting.Show
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    Dim strErrorWarning As String
    Dim strEWnumber As String
    Dim lngRow As Long
    Dim lngFirstDataRow As Long
    Dim lngErrRangeOffset As Long
    Dim lngColorIndexCF As Long
    Dim lngErrCol As Long
    Dim lngerrRow As Long

    If IsError(ActiveCell) Then
        MsgBox "There is an Excel error in your worksheet, this is usually" & vbCrLf & _
               "caused by using cut/paste instead of copy/paste and has" & vbCrLf & _
               "corrupted the error-checking formula.", vbExclamation, strMsgTitle
        Exit Sub
    End If

    lngFirstDataRow = 12
    lngErrRangeOffset = 22
    strErrorWarning = ""

    'New code added 25/05/2007. Checks to see if you are on a data cell
    'in error, and if so, it displays the error message here too.
    If ActiveCell.Row < lngFirstDataRow Then
        'Simpler check for the header cells.
        lngColorIndexCF = ColorIndexOfCF(Range(ActiveCell.AddressLocal))
        'Gets the conditional formatting applied to the cell if there is one.
        If lngColorIndexCF = 3 Or lngColorIndexCF = 6 Or lngColorIndexCF = 36 Then
            '3 is red, 6 is yellow and 36 is light yellow
            Select Case ActiveCell.AddressLocal
                Case "$F$4", "$G$4"
                    'Contact = Error H1
                    MsgBox "Error H1" & vbCrLf & vbCrLf & _
                           "You must enter a contact name here", vbOKOnly, "Error Message"
                Case "$F$5", "$G$5"
                    'Tel No. = Error H2
                    MsgBox "Error H2" & vbCrLf & vbCrLf & _
                           "You must enter a contact telephone number here", vbOKOnly, "Error Message"
                Case "$J$4", "$K$4"
                    'Email = Error H3
                    MsgBox "Error H3" & vbCrLf & vbCrLf & _
                           "You must enter a contact email address here", vbOKOnly, "Error Message"
                Case "$J$5", "$K$5"
                    'Version = Warning H1
                    MsgBox "Warning H1" & vbCrLf & vbCrLf & _
                           "You should enter the version number of this return here", vbOKOnly, "Warning Message"
                Case "$L$5", "$N$5"
                    'Date = Warning H2
                    MsgBox "Warning H2" & vbCrLf & vbCrLf & _
                           "You should enter the date you completed this return here", vbOKOnly, "Warning Message"
            End Select
        End If
        Exit Sub
    End If
    lngColorIndexCF = ColorIndexOfCF(Range(ActiveCell.AddressLocal))
    'Gets the conditional formatting applied to the cell if there is one.
    If lngColorIndexCF = 3 Or lngColorIndexCF = 6 Or lngColorIndexCF = 36 Then
        '3 is red, 6 is yellow and 36 is light yellow
        lngErrCol = ActiveCell.Column + lngErrRangeOffset
        lngerrRow = ActiveCell.Row
        If Left(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 5) = "Error" Then
            strErrorWarning = "E"
            strEWnumber = Trim(Mid(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 7))
        ElseIf Left(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 7) = "Warning" Then
            strErrorWarning = "W"
            strEWnumber = Trim(Mid(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 9))
        End If
    ElseIf Left(ActiveCell.Value, 9) = "Error 1.1" Then
        MsgBox "Value is missing. Do not leave any cell blank"
    ElseIf Left(ActiveCell.Value, 5) = "Error" Then
        strErrorWarning = "E"
        strEWnumber = Trim(Mid(ActiveCell.Value, 7))
    ElseIf Left(ActiveCell.Value, 7) = "Warning" Then
        strErrorWarning = "W"
        strEWnumber = Trim(Mid(ActiveCell.Value, 9))
    End If

    If strErrorWarning <> "" Then
        With ActiveWorkbook.Sheets("Error Codes")
            lngRow = 1
            Do While .Cells(lngRow, 1) <> ""
                If .Cells(lngRow, 1) = strErrorWarning And _
                   .Cells(lngRow, 2) = strEWnumber Then
                   MsgBox IIf(strErrorWarning = "E", "Error " & strEWnumber, "Warning " & strEWnumber) & _
                          vbCrLf & vbCrLf & _
                          .Cells(lngRow, 3), vbOKOnly, _
                            IIf(strErrorWarning = "E", "Error Message", "Warning Message")
                    Exit Do
                End If
                lngRow = lngRow + 1
            Loop
        End With
    End If
End Sub

Private Function ColorIndexOfCF(Rng As Range) As Integer
    Dim AC As Integer
    ColorIndexOfCF = 0
    AC = ActiveCondition(Rng)
    If AC <> 0 Then
        ColorIndexOfCF = Rng.FormatConditions(AC).Interior.ColorIndex
    End If
End Function

Private Function ActiveCondition(Rng As Range) As Integer
    Dim Ndx As Long
    Dim FC As FormatCondition
    If Rng.FormatConditions.Count <> 0 Then
        For Ndx = 1 To Rng.FormatConditions.Count
            Set FC = Rng.FormatConditions(Ndx)
            If Application.Evaluate(FC.Formula1) Then
                ActiveCondition = Ndx
                Exit Function
            End If
        Next Ndx
    End If
    ActiveCondition = 0
End Function
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "imgSDValidate, 1, 0, MSForms, Image"
Attribute VB_Control = "imgSDCreateXMLon, 15, 1, MSForms, Image"
Attribute VB_Control = "imgSDExport, 4, 3, MSForms, Image"
Attribute VB_Control = "imgSDImport, 5, 4, MSForms, Image"
Attribute VB_Control = "imgSDCreateXMLoff, 16, 5, MSForms, Image"
Option Explicit

Private blnErrorFound As Boolean
Private blnXMLErrorFound As Boolean
Private blnWarningFound As Boolean
Private blnNoteFound As Boolean
Private blnBlankFound As Boolean
Private blnHeaderErrorFound As Boolean
Private blnHeaderWarningFound As Boolean

Private Sub imgSDCreateXMLoff_Click()
        MsgBox "An XML file cannot be created untill " & _
               "the validation procedure has been completed "
               

End Sub

Private Sub imgSDCreateXMLon_Click()
    Dim strWorkBookPath As String
    Dim strFileName As String
    Dim strLANo As String
    Dim sheetName As String
    Dim CurrentDateTime As Variant
    Dim strData As String
    Dim ct As Integer
    Dim ct1(6) As Integer
    Dim ct2(6) As Integer
    Dim SchType(6) As String
    On Error GoTo ErrorHandler

    sheetName = "Table A"
    strWorkBookPath = Excel.ActiveWorkbook.Path
    If strWorkBookPath = "" Then
        MsgBox "You have not saved this workbook - PLAse save this workbook first", vbExclamation
    Else

        strLANo = Right(Sheets(sheetName).Cells(3, 11).Value, 3)
        If IsNumeric(strLANo) = False Then strLANo = 0
        Application.StatusBar = "Generating XML File, PLAse Wait ..."

        ActiveWorkbook.Application.ScreenUpdating = False
        strFileName = "S52OutTurn0910" & strLANo & ".xml"
        'Create XML file
          'Write XML Header details
        Open strWorkBookPath & "\" & strFileName For Output As #1
        Print #1, "<Message>"
        Print #1, "<Header>"
        Print #1, "<CollectionDetails>"
        Print #1, "<Collection>s251Outturn</Collection>"
        Print #1, "<Year>2010</Year>"
        Print #1, "<ReferenceDate>2010-08-27</ReferenceDate>"
        Print #1, "</CollectionDetails>"
        Print #1, "<Source>"
        Print #1, "<SourceLevel>L</SourceLevel>"
        Print #1, "<LEA>" & GetValue(strLANo) & "</LEA>"
        Print #1, "<SoftwareCode>DfE</SoftwareCode>"
        Print #1, "<Release>1</Release>"
        Print #1, "<SerialNo> 001</SerialNo>"
        Print #1, "<DateTime>" & Format(Date, "YYYY-MM-DD") & "T" & Format(Time, "ttttt") & "</DateTime>"
        Print #1, "</Source>"
        Print #1, "<Content>"
        Print #1, "<CBDSLevels>"
        Print #1, "<CBDSLevel>LA</CBDSLevel>"
        Print #1, "</CBDSLevels>"
        Print #1, "<CBDSLevels>"
        Print #1, "<CBDSLevel>Schools</CBDSLevel>"
        Print #1, "</CBDSLevels>"
        Print #1, "</Content>"
        Print #1, "</Header>"

        'Call each procedure to output the data from each sheet in XML style
        Call ExportTableASchoolData
        Call ExportTableBSchoolData
        Call ExportTableALEAData
        Call ExportTableA1LEAData
    
        
        Print #1, "</Message>"
        Close #1
        MsgBox "An XML file has now been created in the folder:" & vbCrLf & vbCrLf & _
               strWorkBookPath & "\" & strFileName & vbCrLf & vbCrLf & _
               "Please load this file into the Collect system .", vbInformation
               
        Me.imgSDCreateXMLoff.Visible = True
        Me.imgSDCreateXMLon.Visible = False
               
    End If
    ActiveWorkbook.Application.ScreenUpdating = True
    Me.imgSDCreateXMLon.Visible = False
    Application.StatusBar = "Ready"

    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred." & vbCrLf & vbCrLf & _
           Err.Description, vbExclamation
    ActiveWorkbook.Application.ScreenUpdating = True

End Sub

Sub ExportTableASchoolData()
    Dim strNotes As String
    Dim strWorkBookPath As String
    Dim strFileName As String
    Dim strLANo As String
    Dim sheetName As String
    Dim CurrentDateTime As Variant
    Dim strData As String
    Dim ct As Integer
    Dim ct1(6) As Integer
    Dim ct2(6) As Integer
    Dim SchType(6) As String
    Dim Typect As Integer

    On Error GoTo ErrorHandler

    Print #1, "<LAInformation>"
    Print #1, "<LEA>" & GetValue(strLANo) & "</LEA>"
    Print #1, "<LAName>" & Sheets("Table A").Cells(3, 5).Value & "</LAName>"
    Print #1, "<TAContactName>" & Sheets("Table A").Cells(4, 5).Value & "</TAContactName>"
    Print #1, "<TAPhoneNo>" & Sheets("Table A").Cells(5, 5).Value & "</TAPhoneNo>"
    Print #1, "<TAEmail>" & Sheets("Table A").Cells(4, 8).Value & "</TAEmail>"
        strNotes = GetNotesA()
    Print #1, "<TableANote>" & strNotes & "</TableANote>"
    Print #1, "<TBContactName>"; Sheets("Table B").Cells(4, 7).Value & "</TBContactName>"
    Print #1, "<TBPhoneNo>" & Sheets("Table B").Cells(5, 7).Value & "</TBPhoneNo>"
    Print #1, "<TBEmail>" & Sheets("Table B").Cells(4, 11).Value & "</TBEmail>"
        strNotes = GetNotesB()
    Print #1, "<TableBNote>" & strNotes & "</TableBNote>"
    Print #1, "<TA1ContactName>" & Sheets("Table A1").Cells(3, 6).Value & "</TA1ContactName>"
    Print #1, "<TA1PhoneNo>" & Sheets("Table A1").Cells(4, 6).Value & "</TA1PhoneNo>"
    Print #1, "<TA1Email>" & Sheets("Table A1").Cells(4, 8).Value & "</TA1Email>"
        strNotes = GetNotesA1()
    Print #1, "<TableA1Note>" & strNotes & "</TableA1Note>"
    Print #1, "</LAInformation>"
    Print #1, "<SchoolCFR>"
    Print #1, "<SchoolsCFRBalance>"
    Print #1, "<Functions>"
    Print #1, "<Function>"
    Print #1, "<LineNo>01</LineNo>"
    Print #1, "<CFRName>E01</CFRName>"
    Print #1, "<CFRDescription>Teaching staff (E01)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(13, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(13, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(13, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(13, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>02</LineNo>"
    Print #1, "<CFRName>E02</CFRName>"
    Print #1, "<CFRDescription>Supply teaching staff (E02)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(14, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(14, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(14, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(14, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>03</LineNo>"
    Print #1, "<CFRDescription>Teaching Staff Total </CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(15, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(15, 4).Value) & "</PrimarySchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>04</LineNo>"
    Print #1, "<CFRName>E03</CFRName>"
    Print #1, "<CFRDescription> SUPPORT STAFF (E03</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(17, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(17, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(17, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(17, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>05</LineNo>"
    Print #1, "<CFRName>E04</CFRName>"
    Print #1, "<CFRDescription>Premises Staff(E04)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(21, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(21, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(21, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(21, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>06</LineNo>"
    Print #1, "<CFRName>E05</CFRName>"
    Print #1, "<CFRDescription>Administrative and clerical staff (E05)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(22, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(22, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(22, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(22, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>07</LineNo>"
    Print #1, "<CFRName>E06</CFRName>"
    Print #1, "<CFRDescription>catering Staff(E06)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(23, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(23, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(23, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(23, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>08</LineNo>"
    Print #1, "<CFRName>E07</CFRName>"
    Print #1, "<CFRDescription>Cost of other staff (E07)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(24, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(24, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(24, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(24, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>09</LineNo>"
    Print #1, "<CFRName>E08</CFRName>"
    Print #1, "<CFRDescription>Indirect employee expenses (E08)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(25, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(25, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(25, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(25, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>10</LineNo>"
    Print #1, "<CFRName>E09</CFRName>"
    Print #1, "<CFRDescription>Development and training (E09)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(26, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(26, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(26, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(26, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>11</LineNo>"
    Print #1, "<CFRName>E10</CFRName>"
    Print #1, "<CFRDescription>Supply teacher insurance (E10)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(27, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(27, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(27, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(27, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>12</LineNo>"
    Print #1, "<CFRName>E11</CFRName>"
    Print #1, "<CFRDescription>Staff related insurance (E11)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(28, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(28, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(28, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(28, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>13</LineNo>"
    Print #1, "<CFRDescription>TOTAL OTHER EMPLOYEE COSTS</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(29, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(29, 4).Value) & "</PrimarySchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>14</LineNo>"
    Print #1, "<CFRName>E12</CFRName>"
    Print #1, "<CFRDescription>Building maintenance And improvement(E12)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(33, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(33, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(33, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(33, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>15</LineNo>"
    Print #1, "<CFRName>E13</CFRName>"
    Print #1, "<CFRDescription>Grounds maintenance and improvement (E13)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(34, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(34, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(34, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(34, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>16</LineNo>"
    Print #1, "<CFRName>E14</CFRName>"
    Print #1, "<CFRDescription>Cleaning and caretaking (E14)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(35, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(35, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(35, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(35, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>17</LineNo>"
    Print #1, "<CFRName>E15</CFRName>"
    Print #1, "<CFRDescription>Water and sewerage (E15)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(36, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(36, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(36, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(36, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>18</LineNo>"
    Print #1, "<CFRName>E16</CFRName>"
    Print #1, "<CFRDescription>Energy (E16)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(37, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(37, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(37, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(37, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>19</LineNo>"
    Print #1, "<CFRName>E17</CFRName>"
    Print #1, "<CFRDescription>Rates (E17)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(38, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(38, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(38, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(38, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>20</LineNo>"
    Print #1, "<CFRName>E18</CFRName>"
    Print #1, "<CFRDescription>Other occupation costs (E18)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(39, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(39, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(39, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(39, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>21</LineNo>"
    Print #1, "<CFRName>E19</CFRName>"
    Print #1, "<CFRDescription>learning resources(Not ICT)(E19)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(40, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(40, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(40, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(40, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>22</LineNo>"
    Print #1, "<CFRName>E20</CFRName>"
    Print #1, "<CFRDescription>ICT learning resources (E20)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(41, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(41, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(41, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(41, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>23</LineNo>"
    Print #1, "<CFRName>E21</CFRName>"
    Print #1, "<CFRDescription>Examination fees (E21)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(42, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(42, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(42, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(42, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>24</LineNo>"
    Print #1, "<CFRName>E22</CFRName>"
    Print #1, "<CFRDescription>Administrative supplies(E22)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(43, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(43, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(43, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(43, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>25</LineNo>"
    Print #1, "<CFRName>E23</CFRName>"
    Print #1, "<CFRDescription>Other insurance premiums (E23)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(44, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(44, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(44, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(44, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>26</LineNo>"
    Print #1, "<CFRName>E24</CFRName>"
    Print #1, "<CFRDescription>Special facilities(E24)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(45, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(45, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(45, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(45, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>27</LineNo>"
    Print #1, "<CFRName>E25</CFRName>"
    Print #1, "<CFRDescription>catering supplies(E25)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(46, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(46, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(46, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(46, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>28</LineNo>"
    Print #1, "<CFRName>E26</CFRName>"
    Print #1, "<CFRDescription>Agency supply teaching staff (E26)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(47, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(47, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(47, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(47, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>29</LineNo>"
    Print #1, "<CFRName>E27</CFRName>"
    Print #1, "<CFRDescription>Bought-in professional services - curriculum (E27)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(48, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(48, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(48, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(48, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>30</LineNo>"
    Print #1, "<CFRName>E28</CFRName>"
    Print #1, "<CFRDescription>Bought-in professional services - other (E28)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(49, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(49, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(49, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(49, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>31</LineNo>"
    Print #1, "<CFRName>E29</CFRName>"
    Print #1, "<CFRDescription>Loan interest(E29)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(50, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(50, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(50, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(50, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>32</LineNo>"
    Print #1, "<CFRName>E31</CFRName>"
    Print #1, "<CFRDescription>Community focused extended school staff (E31)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(51, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(51, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(51, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(51, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>33</LineNo>"
    Print #1, "<CFRName>E32</CFRName>"
    Print #1, "<CFRDescription>Community focused extended school costs (E32)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(52, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(52, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(52, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(52, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>35</LineNo>"
    Print #1, "<CFRDescription>TOTAL GROSS EXPENDITURE</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(55, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(55, 4).Value) & "</PrimarySchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>36</LineNo>"
    Print #1, "<CFRName>I01</CFRName>"
    Print #1, "<CFRDescription>Funds delegated by the LA (I01)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(59, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(59, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(59, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(59, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>37</LineNo>"
    Print #1, "<CFRName>I02</CFRName>"
    Print #1, "<CFRDescription>Funding for sixth form students (I02)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(60, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(60, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(60, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(60, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>38</LineNo>"
    Print #1, "<CFRName>I03</CFRName>"
    Print #1, "<CFRDescription>SEN funding (Not for special schools) (I03)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(61, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(61, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(61, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(61, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>39</LineNo>"
    Print #1, "<CFRName>I04</CFRName>"
    Print #1, "<CFRDescription>Funding for minority ethnic pupils (I04)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(62, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(62, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(62, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(62, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>40</LineNo>"
    Print #1, "<CFRName>I05</CFRName>"
    Print #1, "<CFRDescription>Standards Fund(I05)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(63, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(63, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(63, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(63, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>41</LineNo>"
    Print #1, "<CFRName>I06</CFRName>"
    Print #1, "<CFRDescription>Other government grants (I06)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(64, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(64, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(64, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(64, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>42</LineNo>"
    Print #1, "<CFRName>I14</CFRName>"
    Print #1, "<CFRDescription>School Standards Grant (SSG) pupil focused (I14)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(65, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(65, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(65, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(65, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>43</LineNo>"
    Print #1, "<CFRName>I15</CFRName>"
    Print #1, "<CFRDescription>Pupil focused extended school funding and/or grants (I15)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(66, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(66, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(66, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(66, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>44</LineNo>"
    Print #1, "<CFRName>I16</CFRName>"
    Print #1, "<CFRDescription>Community focused extended school funding and/or grants (I16)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(67, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(67, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(67, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(67, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>46</LineNo>"
    Print #1, "<CFRName>I07</CFRName>"
    Print #1, "<CFRDescription>other grants And payments(I07)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(72, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(72, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(72, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(72, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>47</LineNo>"
    Print #1, "<CFRName>I08</CFRName>"
    Print #1, "<CFRDescription>Income from facilities and services (I08)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(73, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(73, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(73, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(73, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>48</LineNo>"
    Print #1, "<CFRName>I09</CFRName>"
    Print #1, "<CFRDescription>Income from catering (I09)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(74, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(74, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(74, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(74, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>49</LineNo>"
    Print #1, "<CFRName>I10</CFRName>"
    Print #1, "<CFRDescription>Receipts from supply teacher insurance claims (I10)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(75, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(75, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(75, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(75, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>50</LineNo>"
    Print #1, "<CFRName>I11</CFRName>"
    Print #1, "<CFRDescription>Receipts from other insurance claims (I11)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(76, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(76, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(76, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(76, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>51</LineNo>"
    Print #1, "<CFRName>I12</CFRName>"
    Print #1, "<CFRDescription>Income from contributions to visits etc.(I12)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(77, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(77, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(77, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(77, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>52</LineNo>"
    Print #1, "<CFRName>I17</CFRName>"
    Print #1, "<CFRDescription>Community focused extended school facilities income (I17)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(78, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(78, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(78, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(78, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>54</LineNo>"
    Print #1, "<CFRName>I13</CFRName>"
    Print #1, "<CFRDescription>Donations and/or voluntary funds (I13)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(80, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(80, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(80, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(80, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>57</LineNo>"
    Print #1, "<CFRName>E30</CFRName>"
    Print #1, "<CFRDescription>Capital Expenditure from Revenue - CERA (E30) (Schools)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(85, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(85, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(85, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(85, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>58</LineNo>"
    Print #1, "<CFRName>B01-2009</CFRName>"
    Print #1, "<CFRDescription>Committed revenue balance (B01)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(91, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(91, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(91, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(91, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>59</LineNo>"
    Print #1, "<CFRName>B02-2009</CFRName>"
    Print #1, "<CFRDescription>Uncommitted revenue balance (B02)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(92, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(92, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(92, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(92, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>60</LineNo>"
    Print #1, "<CFRName>B06-2009</CFRName>"
    Print #1, "<CFRDescription>Community focused extended school revenue balance (B06)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(93, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(93, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(93, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(93, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>61</LineNo>"
    Print #1, "<CFRName>B01-2010</CFRName>"
    Print #1, "<CFRDescription>Committed revenue balance (B01)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(97, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(97, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(97, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(97, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>62</LineNo>"
    Print #1, "<CFRName>B02-2010</CFRName>"
    Print #1, "<CFRDescription>Uncommitted revenue balance (B02)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(98, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(98, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(98, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(98, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>63</LineNo>"
    Print #1, "<CFRName>B06-2010</CFRName>"
    Print #1, "<CFRDescription>Community focused extended school revenue balance (B06)</CFRDescription>"
    Print #1, "<NurserySchools>" & GetValue(Sheets("Table A").Cells(99, 3).Value) & "</NurserySchools>"
    Print #1, "<PrimarySchools>" & GetValue(Sheets("Table A").Cells(99, 4).Value) & "</PrimarySchools>"
    Print #1, "<SecondarySchools>" & GetValue(Sheets("Table A").Cells(99, 5).Value) & "</SecondarySchools>"
    Print #1, "<SpecialSchools>" & GetValue(Sheets("Table A").Cells(99, 6).Value) & "</SpecialSchools>"
    Print #1, "</Function>"
    Print #1, "</Functions>"
    Print #1, "</SchoolsCFRBalance>"
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module imgSDValidate_Click()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub

Sub ExportTableBSchoolData()
    Dim strNotes As String
    Dim strWorkBookPath As String
    Dim strFileName As String
    Dim strLANo As String
    Dim sheetName As String
    Dim CurrentDateTime As Variant
    Dim strData As String
    Dim ct As Integer
    Dim ct1(6) As Integer
    Dim ct2(6) As Integer
    Dim SchType(6) As String
    Dim Typect As Integer
    Dim strXMLvalidSchoolName As String

    Print #1, "<IndividualSchoolBalances>"
    Print #1, "<Schools>"

    SchType(0) = "Nursery"
    SchType(1) = "Primary"
    SchType(2) = "PriMiddle"
    SchType(3) = "Secondary"
    SchType(4) = "SecMiddle"
    SchType(5) = "Special"
    
        'Get the start rows for each section
        
    ct1(0) = Sheets("Table B").Range("Nursery").Row + 1
    ct1(1) = Sheets("Table B").Range("Primary").Row + 1
    ct1(2) = Sheets("Table B").Range("PriMiddle").Row + 1
    ct1(3) = Sheets("Table B").Range("Secondary").Row + 1
    ct1(4) = Sheets("Table B").Range("SecMiddle").Row + 1
    ct1(5) = Sheets("Table B").Range("Special").Row + 1

    
    'Get the end rows for each section

    
    ct2(0) = Sheets("Table B").Range("TotalNursery").Row - 2
    ct2(1) = Sheets("Table B").Range("PriMiddle").Row - 2
    ct2(2) = Sheets("Table B").Range("TotalPrimary").Row - 2
    ct2(3) = Sheets("Table B").Range("SecMiddle").Row - 2
    ct2(4) = Sheets("Table B").Range("TotalSecondary").Row - 2
    ct2(5) = Sheets("Table B").Range("TotalSpecial").Row - 2
    
    For Typect = 0 To 5
        
       
        For ct = ct1(Typect) To ct2(Typect)
             If (Sheets("Table B").Cells(ct, 3).Value) <> "" And (Sheets("Table B").Cells(ct, 4).Value) <> "" Then
                Print #1, "<School>"
                Print #1, "<SchoolTypeName>" & SchType(Typect) & "</SchoolTypeName>"
                strXMLvalidSchoolName = Replace(Trim(Sheets("Table B").Cells(ct, 2).Value), "&", "&amp;")
                Print #1, "<SchoolName>" & strXMLvalidSchoolName & "</SchoolName>"
                Print #1, "<Estab>" & GetValue(Sheets("Table B").Cells(ct, 3).Value) & "</Estab>"
                Print #1, "<OB01>" & GetValue(Sheets("Table B").Cells(ct, 4).Value) & "</OB01>"
                Print #1, "<OB02>" & GetValue(Sheets("Table B").Cells(ct, 5).Value) & "</OB02>"
                Print #1, "<BudgetShare>" & GetValue(Sheets("Table B").Cells(ct, 6).Value) & "</BudgetShare>"
                Print #1, "<DelegatedFunds>" & GetValue(Sheets("Table B").Cells(ct, 7).Value) & "</DelegatedFunds>"
                Print #1, "<SENFunding>" & GetValue(Sheets("Table B").Cells(ct, 8).Value) & "</SENFunding>"
                Print #1, "<I05>" & GetValue(Sheets("Table B").Cells(ct, 9).Value) & "</I05>"
                Print #1, "<I06>" & GetValue(Sheets("Table B").Cells(ct, 10).Value) & "</I06>"
                Print #1, "<GeneratedIncome>" & GetValue(Sheets("Table B").Cells(ct, 11).Value) & "</GeneratedIncome>"
                Print #1, "<I15>" & GetValue(Sheets("Table B").Cells(ct, 12).Value) & "</I15>"
                Print #1, "<I16>" & GetValue(Sheets("Table B").Cells(ct, 13).Value) & "</I16>"
                Print #1, "<I17>" & GetValue(Sheets("Table B").Cells(ct, 14).Value) & "</I17>"
                Print #1, "<SchoolExpenditure>" & GetValue(Sheets("Table B").Cells(ct, 16).Value) & "</SchoolExpenditure>"
                Print #1, "<CommunityFocus>" & GetValue(Sheets("Table B").Cells(ct, 17).Value) & "</CommunityFocus>"
                Print #1, "<E30>" & GetValue(Sheets("Table B").Cells(ct, 18).Value) & "</E30>"
                Print #1, "<B01>" & GetValue(Sheets("Table B").Cells(ct, 19).Value) & "</B01>"
                Print #1, "<B02>" & GetValue(Sheets("Table B").Cells(ct, 20).Value) & "</B02>"
                Print #1, "<B06>" & GetValue(Sheets("Table B").Cells(ct, 21).Value) & "</B06>"
                Print #1, "</School>"
             End If
       Next ct
    
    Next Typect


    Print #1, "</Schools>"



    Print #1, " </IndividualSchoolBalances>"
    Print #1, "</SchoolCFR>"
Exit Sub
ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module imgSDValidate_Click()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
    
End Sub

Sub ExportTableALEAData()
    Dim strNotes As String
    Dim strWorkBookPath As String
    Dim strFileName As String
    Dim strLANo As String
    Dim sheetName As String
    Dim CurrentDateTime As Variant
    Dim strData As String
    Dim ct As Integer
    Dim ct1(6) As Integer
    Dim ct2(6) As Integer
    Dim SchType(6) As String
    Dim Typect As Integer

    ' <!-- This is where we start the bottom-half of Table A LA Expenditure (Approx. Lines 64 onwards) -->

    '     <!-- This section is the Schools Budget (lines 64-68) -->
    Print #1, "<LABalance>"
    Print #1, "<Functions>"
    Print #1, "<Function>"
    Print #1, "<LineNo>64</LineNo>"
    Print #1, "<SpendingGroup>SPENDING BY SCHOOLS (brought forward)</SpendingGroup>"
    Print #1, "<SpendingType>Nursery Schools</SpendingType>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(107, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(107, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(107, 13).Value) & "</LSC>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(107, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>65</LineNo>"
    Print #1, "<SpendingType>Primary Schools</SpendingType>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(108, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(108, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(108, 13).Value) & "</LSC>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(108, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>66</LineNo>"
    Print #1, "<SpendingType>Secondary Schools</SpendingType>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(109, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(109, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(109, 13).Value) & "</LSC>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(109, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>67</LineNo>"
    Print #1, "<SpendingType>Special Schools</SpendingType>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(110, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(110, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(110, 13).Value) & "</LSC>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(110, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "</Function>"

    '    <!-- This section is the LA spending (lines 69 +) -->

    Print #1, "<Function>"
    Print #1, "<LineNo>69</LineNo>"
    Print #1, "<SpendingGroup>SPENDING BY LA WITHIN THE SCHOOLS BUDGET (EXCLUDING DELEGATED OR DEVOLVED FUNDING)</SpendingGroup>"
    Print #1, "<SpendingType>Nursery Schools</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(114, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(114, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(114, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(114, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(114, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(114, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(114, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(114, 13).Value) & "</LSC>"
    Print #1, "<IARRunningExpences>" & GetValue(Sheets("Table A").Cells(114, 16).Value) & "</IARRunningExpences>"
    Print #1, "<IARIncome>" & GetValue(Sheets("Table A").Cells(114, 17).Value) & "</IARIncome>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(114, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>70</LineNo>"
    Print #1, "<SpendingType>Primary Schools</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(115, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(115, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(115, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(115, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(115, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(115, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(115, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(115, 13).Value) & "</LSC>"
    Print #1, "<IARRunningExpences>" & GetValue(Sheets("Table A").Cells(115, 16).Value) & "</IARRunningExpences>"
    Print #1, "<IARIncome>" & GetValue(Sheets("Table A").Cells(115, 17).Value) & "</IARIncome>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(115, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>71</LineNo>"
    Print #1, "<SpendingType>Secondary Schools</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(116, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(116, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(116, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(116, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(116, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(116, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(116, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(116, 13).Value) & "</LSC>"
    Print #1, "<IARRunningExpences>" & GetValue(Sheets("Table A").Cells(116, 16).Value) & "</IARRunningExpences>"
    Print #1, "<IARIncome>" & GetValue(Sheets("Table A").Cells(116, 17).Value) & "</IARIncome>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(116, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>72</LineNo>"
    Print #1, "<SpendingType>Special Schools</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(117, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(117, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(117, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(117, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(117, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(117, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(117, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(117, 13).Value) & "</LSC>"
    Print #1, "<IARRunningExpences>" & GetValue(Sheets("Table A").Cells(117, 16).Value) & "</IARRunningExpences>"
    Print #1, "<IARIncome>" & GetValue(Sheets("Table A").Cells(117, 17).Value) & "</IARIncome>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(117, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>73</LineNo>"
    Print #1, "<SpendingType>Education Under 5 Fees</SpendingType>"
    Print #1, " <TeachingStaff>" & GetValue(Sheets("Table A").Cells(119, 3).Value) & "</TeachingStaff>"
    Print #1, " <EducationStaff>" & GetValue(Sheets("Table A").Cells(119, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(119, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(119, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(119, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(119, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(119, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(119, 13).Value) & "</LSC>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>74</LineNo>"
    Print #1, "<SpendingType>Independent NMSS Fees</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(120, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(120, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(120, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(120, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(120, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(120, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(120, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(120, 13).Value) & "</LSC>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>75</LineNo>"
    Print #1, "<SpendingType>Education out of school</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(121, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(121, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(121, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(121, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(121, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(121, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(121, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(121, 13).Value) & "</LSC>"
    Print #1, "<IARRunningExpences>" & GetValue(Sheets("Table A").Cells(121, 16).Value) & "</IARRunningExpences>"
    Print #1, "<IARIncome>" & GetValue(Sheets("Table A").Cells(121, 17).Value) & "</IARIncome>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>76</LineNo>"
    Print #1, "<SpendingType>School Meals Milk</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(122, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(122, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(122, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(122, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(122, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(122, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(122, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(122, 13).Value) & "</LSC>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>77</LineNo>"
    Print #1, "<SpendingType>Other Support </SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(123, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(123, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(123, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(123, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(123, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(123, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(123, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(123, 13).Value) & "</LSC>"
    Print #1, "<IARRunningExpences>" & GetValue(Sheets("Table A").Cells(123, 16).Value) & "</IARRunningExpences>"
    Print #1, "<IARIncome>" & GetValue(Sheets("Table A").Cells(123, 17).Value) & "</IARIncome>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>79</LineNo>"
    Print #1, "<SpendingType>CERA</SpendingType>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(127, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(127, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(127, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(127, 13).Value) & "</LSC>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>82</LineNo>"
    Print #1, "<SpendingGroup>LA CENTRAL FUNCTIONS</SpendingGroup>"
    Print #1, "<SpendingType>Central Admin</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(137, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(137, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(137, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(137, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(137, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(137, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(137, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(137, 13).Value) & "</LSC>"
    Print #1, "<IARRunningExpences>" & GetValue(Sheets("Table A").Cells(137, 16).Value) & "</IARRunningExpences>"
    Print #1, "<IARIncome>" & GetValue(Sheets("Table A").Cells(137, 17).Value) & "</IARIncome>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(137, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>83</LineNo>"
    Print #1, "<SpendingType>Teacher development</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(138, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(138, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(138, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(138, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(138, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(138, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(138, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(138, 13).Value) & "</LSC>"
    Print #1, "<IARRunningExpences>" & GetValue(Sheets("Table A").Cells(138, 16).Value) & "</IARRunningExpences>"
    Print #1, "<IARIncome>" & GetValue(Sheets("Table A").Cells(138, 17).Value) & "</IARIncome>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(138, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>84</LineNo>"
    Print #1, "<SpendingType>HEFE Courses</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(139, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(139, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(139, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(139, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(139, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(139, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(139, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(139, 13).Value) & "</LSC>"
    Print #1, "<IARRunningExpences>" & GetValue(Sheets("Table A").Cells(139, 16).Value) & "</IARRunningExpences>"
    Print #1, "<IARIncome>" & GetValue(Sheets("Table A").Cells(139, 17).Value) & "</IARIncome>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(139, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>85</LineNo>"
    Print #1, "<SpendingType>Pension and Redundancy</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(140, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(140, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(140, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(140, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(140, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(140, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(140, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(140, 13).Value) & "</LSC>"
    Print #1, "<IARRunningExpences>" & GetValue(Sheets("Table A").Cells(140, 16).Value) & "</IARRunningExpences>"
    Print #1, "<IARIncome>" & GetValue(Sheets("Table A").Cells(140, 17).Value) & "</IARIncome>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(140, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>87</LineNo>"
    Print #1, "<SpendingType>Pupil Support</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(145, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(145, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(145, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(145, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(145, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(145, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(145, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(145, 13).Value) & "</LSC>"
    Print #1, "<IARRunningExpences>" & GetValue(Sheets("Table A").Cells(145, 16).Value) & "</IARRunningExpences>"
    Print #1, "<IARIncome>" & GetValue(Sheets("Table A").Cells(145, 17).Value) & "</IARIncome>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(145, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>88</LineNo>"
    Print #1, "<SpendingType>Other Support </SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(146, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(146, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(146, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(146, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(146, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(146, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(146, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(146, 13).Value) & "</LSC>"
    Print #1, "<IARRunningExpences>" & GetValue(Sheets("Table A").Cells(146, 16).Value) & "</IARRunningExpences>"
    Print #1, "<IARIncome>" & GetValue(Sheets("Table A").Cells(146, 17).Value) & "</IARIncome>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(146, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>89</LineNo>"
    Print #1, "<SpendingType>HTS SEN </SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(147, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(147, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(147, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(147, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(147, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(147, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(147, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(147, 13).Value) & "</LSC>"
    Print #1, "<IARRunningExpences>" & GetValue(Sheets("Table A").Cells(147, 16).Value) & "</IARRunningExpences>"
    Print #1, "<IARIncome>" & GetValue(Sheets("Table A").Cells(147, 17).Value) & "</IARIncome>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(147, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "<HTSTransportNursery>" & GetValue(Sheets("Table A").Cells(147, 19).Value) & "</HTSTransportNursery>"
    Print #1, "<HTSTransportPrimary>" & GetValue(Sheets("Table A").Cells(147, 20).Value) & "</HTSTransportPrimary>"
    Print #1, "<HTSTransportSecondary>" & GetValue(Sheets("Table A").Cells(147, 21).Value) & "</HTSTransportSecondary>"
    Print #1, "<HTSCollegeSpecial>" & GetValue(Sheets("Table A").Cells(147, 22).Value) & "</HTSCollegeSpecial>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>90</LineNo>"
    Print #1, "<SpendingType>HTS Other</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(148, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(148, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(148, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(148, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(148, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(148, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(148, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(148, 13).Value) & "</LSC>"
    Print #1, "<IARRunningExpences>" & GetValue(Sheets("Table A").Cells(148, 16).Value) & "</IARRunningExpences>"
    Print #1, "<IARIncome>" & GetValue(Sheets("Table A").Cells(148, 17).Value) & "</IARIncome>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(148, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "<HTSTransportNursery>" & GetValue(Sheets("Table A").Cells(148, 19).Value) & "</HTSTransportNursery>"
    Print #1, "<HTSTransportPrimary>" & GetValue(Sheets("Table A").Cells(148, 20).Value) & "</HTSTransportPrimary>"
    Print #1, "<HTSTransportSecondary>" & GetValue(Sheets("Table A").Cells(148, 21).Value) & "</HTSTransportSecondary>"
    Print #1, "<HTSCollegeSpecial>" & GetValue(Sheets("Table A").Cells(148, 22).Value) & "</HTSCollegeSpecial>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>91</LineNo>"
    Print #1, "<SpendingType>HTP 16 -18 SEN LLDD </SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(149, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(149, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(149, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(149, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(149, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(149, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(149, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(149, 13).Value) & "</LSC>"
    Print #1, "<IARRunningExpences>" & GetValue(Sheets("Table A").Cells(149, 16).Value) & "</IARRunningExpences>"
    Print #1, "<IARIncome>" & GetValue(Sheets("Table A").Cells(149, 17).Value) & "</IARIncome>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(149, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "<HTSTransportNursery>" & GetValue(Sheets("Table A").Cells(149, 19).Value) & "</HTSTransportNursery>"
    Print #1, "<HTSTransportPrimary>" & GetValue(Sheets("Table A").Cells(149, 20).Value) & "</HTSTransportPrimary>"
    Print #1, "<HTSTransportSecondary>" & GetValue(Sheets("Table A").Cells(149, 21).Value) & "</HTSTransportSecondary>"
    Print #1, "<HTSCollegeSpecial>" & GetValue(Sheets("Table A").Cells(149, 22).Value) & "</HTSCollegeSpecial>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>92</LineNo>"
    Print #1, "<SpendingType>HTP 19-25 SEN LLDD </SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(150, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(150, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(150, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(150, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(150, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(150, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(150, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(150, 13).Value) & "</LSC>"
    Print #1, "<IARRunningExpences>" & GetValue(Sheets("Table A").Cells(150, 16).Value) & "</IARRunningExpences>"
    Print #1, "<IARIncome>" & GetValue(Sheets("Table A").Cells(150, 17).Value) & "</IARIncome>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(150, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "<HTSTransportNursery>" & GetValue(Sheets("Table A").Cells(150, 19).Value) & "</HTSTransportNursery>"
    Print #1, "<HTSTransportPrimary>" & GetValue(Sheets("Table A").Cells(150, 20).Value) & "</HTSTransportPrimary>"
    Print #1, "<HTSTransportSecondary>" & GetValue(Sheets("Table A").Cells(150, 21).Value) & "</HTSTransportSecondary>"
    Print #1, "<HTSCollegeSpecial>" & GetValue(Sheets("Table A").Cells(150, 22).Value) & "</HTSCollegeSpecial>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>93</LineNo>"
    Print #1, "<SpendingType>HTP Other</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(151, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(151, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(151, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(151, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(151, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(151, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(151, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(151, 13).Value) & "</LSC>"
    Print #1, "<IARRunningExpences>" & GetValue(Sheets("Table A").Cells(151, 16).Value) & "</IARRunningExpences>"
    Print #1, "<IARIncome>" & GetValue(Sheets("Table A").Cells(151, 17).Value) & "</IARIncome>"
    Print #1, "<CapExpenditureExcCERA>" & GetValue(Sheets("Table A").Cells(151, 18).Value) & "</CapExpenditureExcCERA>"
    Print #1, "<HTSTransportNursery>" & GetValue(Sheets("Table A").Cells(151, 19).Value) & "</HTSTransportNursery>"
    Print #1, "<HTSTransportPrimary>" & GetValue(Sheets("Table A").Cells(151, 20).Value) & "</HTSTransportPrimary>"
    Print #1, "<HTSTransportSecondary>" & GetValue(Sheets("Table A").Cells(151, 21).Value) & "</HTSTransportSecondary>"
    Print #1, "<HTSCollegeSpecial>" & GetValue(Sheets("Table A").Cells(151, 22).Value) & "</HTSCollegeSpecial>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>96</LineNo>"
    Print #1, "<SpendingGroup>YOUTH AND COMMUNITY</SpendingGroup>"
    Print #1, "<SpendingType>Positive Actions</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(159, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(159, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(159, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(159, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(159, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(159, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(159, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(159, 13).Value) & "</LSC>"
    Print #1, "<ControlOrStart>" & GetValue(Sheets("Table A").Cells(159, 16).Value) & "</ControlOrStart>"
    Print #1, "<FridayOrSaturday>" & GetValue(Sheets("Table A").Cells(159, 17).Value) & "</FridayOrSaturday>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>97</LineNo>"
    Print #1, "<SpendingGroup>YOUTH AND COMMUNITY</SpendingGroup>"
    Print #1, "<SpendingType>Youth Work</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(160, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(160, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(160, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(160, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(160, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(160, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(160, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(160, 13).Value) & "</LSC>"
    Print #1, "<ControlOrStart>" & GetValue(Sheets("Table A").Cells(160, 16).Value) & "</ControlOrStart>"
    Print #1, "<FridayOrSaturday>" & GetValue(Sheets("Table A").Cells(160, 17).Value) & "</FridayOrSaturday>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>98</LineNo>"
    Print #1, "<SpendingGroup>YOUTH AND COMMUNITY</SpendingGroup>"
    Print #1, "<SpendingType>Connexions</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(162, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(162, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(162, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(162, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(162, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(162, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(162, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(162, 13).Value) & "</LSC>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>99</LineNo>"
    Print #1, "<SpendingGroup>YOUTH AND COMMUNITY</SpendingGroup>"
    Print #1, "<SpendingType>Student Support</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(163, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(163, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(163, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(163, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(163, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(163, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(163, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(163, 13).Value) & "</LSC>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>100</LineNo>"
    Print #1, "<SpendingGroup>YOUTH AND COMMUNITY</SpendingGroup>"
    Print #1, "<SpendingType>Other Community</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(164, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(164, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(164, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(164, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(164, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(164, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(164, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(164, 13).Value) & "</LSC>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>101</LineNo>"
    Print #1, "<SpendingGroup>YOUTH AND COMMUNITY</SpendingGroup>"
    Print #1, "<SpendingType>Adult Community Learning</SpendingType>"
    Print #1, "<TeachingStaff>" & GetValue(Sheets("Table A").Cells(165, 3).Value) & "</TeachingStaff>"
    Print #1, "<EducationStaff>" & GetValue(Sheets("Table A").Cells(165, 4).Value) & "</EducationStaff>"
    Print #1, "<OtherEmployees>" & GetValue(Sheets("Table A").Cells(165, 5).Value) & "</OtherEmployees>"
    Print #1, "<RunningExpenses>" & GetValue(Sheets("Table A").Cells(165, 6).Value) & "</RunningExpenses>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(165, 8).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A").Cells(165, 11).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A").Cells(165, 12).Value) & "</GovtOutsideAEF>"
    Print #1, "<LSC>" & GetValue(Sheets("Table A").Cells(165, 13).Value) & "</LSC>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>105</LineNo>"
    Print #1, "<SpendingGroup>Capital Expenditure from Revenue </SpendingGroup>"
    Print #1, "<SpendingType>CERA LA</SpendingType>"
    Print #1, "<TotalExpenditure>" & GetValue(Sheets("Table A").Cells(172, 7).Value) & "</TotalExpenditure>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(172, 8).Value) & "</Income>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<LineNo>106</LineNo>"
    Print #1, "<SpendingGroup>Capital Expenditure from Revenue </SpendingGroup>"
    Print #1, "<SpendingType>CERA Youth and Community</SpendingType>"
    Print #1, "<TotalExpenditure>" & GetValue(Sheets("Table A").Cells(173, 7).Value) & "</TotalExpenditure>"
    Print #1, "<Income>" & GetValue(Sheets("Table A").Cells(173, 8).Value) & "</Income>"
    Print #1, "</Function>"
    Print #1, "</Functions>"

    Print #1, "</LABalance>"
Exit Sub
    
ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module imgSDValidate_Click()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub
Sub ExportTableA1LEAData()
    Dim strNotes As String
    Dim strWorkBookPath As String
    Dim strFileName As String
    Dim strLANo As String
    Dim sheetName As String
    Dim CurrentDateTime As Variant
    Dim strData As String
    Dim ct As Integer
    Dim ct1(6) As Integer
    Dim ct2(6) As Integer
    Dim SchType(6) As String
    Dim Typect As Integer

     '    <!-- This is where we start Table A1 -->
    Print #1, "<CYPServicesBalance>"
    Print #1, "<Functions>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Secure Youth Accommodation</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(12, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(12, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(12, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(12, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(12, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(12, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(12, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>YOTS</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(13, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(13, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(13, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(13, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(12, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(13, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(13, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Other Youth Justice</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(14, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(14, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(14, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(14, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(14, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(14, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(14, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Residential Care</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(18, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(18, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(18, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(18, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(18, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(18, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(18, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Fostering</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(19, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(19, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(19, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(19, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(19, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(19, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(19, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Other CLA</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(20, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(20, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(20, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(20, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(20, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(20, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(20, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Secure Welfare Accommodation</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(21, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(21, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(21, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(21, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(21, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(21, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(21, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Short Breaks Children</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(22, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(22, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(22, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(22, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(22, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(22, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(22, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Family Friends Placement</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(23, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(23, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(23, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(23, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(23, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(23, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(23, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Advocacy</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(24, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(24, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(24, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(24, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(24, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(24, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(24, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Education</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(25, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(25, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(25, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(25, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(25, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(25, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(25, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Leaving Care</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(26, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(26, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(26, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(26, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(26, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(26, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(26, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Asylum Seeker</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(27, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(27, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(27, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(27, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(27, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(27, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(27, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>UASC Care</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(28, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(28, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(28, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(28, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(28, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(28, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(28, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>UASC Accommodation</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(29, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(29, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(29, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(29, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(29, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(29, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(29, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Death Processes</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(34, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(34, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(34, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(34, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(34, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(34, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(34, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Preventative</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(35, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(35, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(35, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(35, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(35, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(35, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(35, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>LA Functions</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(36, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(36, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(36, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(36, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(36, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(36, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(36, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Local SC Board</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(37, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(37, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(37, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(37, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(37, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(37, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(37, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Direct payments</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(41, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(41, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(41, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(41, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(41, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(41, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(41, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Short Breaks disabled</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(42, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(42, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(42, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(42, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(42, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(42, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(42, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Home Care</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(43, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(43, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(43, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(43, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(43, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(43, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(43, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Equipment</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(44, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(44, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(44, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(44, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(44, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(44, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(44, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Other Family Support</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(45, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(45, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(45, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(45, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(45, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(45, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(45, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Substance Misuse</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(46, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(46, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(46, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(46, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(46, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(46, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(46, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Health Care Contribution</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(47, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(47, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(47, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(47, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(47, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(47, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(47, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Teenage Pregnancy</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(48, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(48, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(48, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(48, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(48, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(48, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(48, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Adoption</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(52, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(52, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(52, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(52, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(52, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(52, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(52, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Special guardianship</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(53, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(53, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(53, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(53, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(53, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(53, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(53, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Other Children And Families</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(54, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(54, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(54, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(54, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(54, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(54, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(54, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>CYP Plan</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(58, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(58, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(58, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(58, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(58, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(58, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(58, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Partnership Costs</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(59, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(59, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(59, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(59, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(59, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(59, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(59, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Central Commissioning</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(60, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(60, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(60, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(60, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(60, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(60, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(60, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Commissioning and Social</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(61, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(61, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(61, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(61, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(61, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(61, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(61, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>Trust Fund Top Ups</CYPService>"
    Print #1, "<OwnProvision>" & GetValue(Sheets("Table A1").Cells(64, 4).Value) & "</OwnProvision>"
    Print #1, "<PrivateProvision>" & GetValue(Sheets("Table A1").Cells(64, 5).Value) & "</PrivateProvision>"
    Print #1, "<OtherPublicProvision>" & GetValue(Sheets("Table A1").Cells(64, 6).Value) & "</OtherPublicProvision>"
    Print #1, "<VoluntaryProvision>" & GetValue(Sheets("Table A1").Cells(64, 7).Value) & "</VoluntaryProvision>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(64, 9).Value) & "</Income>"
    Print #1, "<GovtInAEF>" & GetValue(Sheets("Table A1").Cells(64, 12).Value) & "</GovtInAEF>"
    Print #1, "<GovtOutsideAEF>" & GetValue(Sheets("Table A1").Cells(64, 13).Value) & "</GovtOutsideAEF>"
    Print #1, "</Function>"
    Print #1, "<Function>"
    Print #1, "<CYPService>CYP CERA</CYPService>"
    Print #1, "<TotalExpenditure>" & GetValue(Sheets("Table A1").Cells(66, 8).Value) & "</TotalExpenditure>"
    Print #1, "<Income>" & GetValue(Sheets("Table A1").Cells(66, 9).Value) & "</Income>"
    Print #1, "</Function>"
    Print #1, "</Functions>"
    
    Print #1, "</CYPServicesBalance>"

 '   Print #1, "</Message>"
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module imgSDValidate_Click()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub

Private Function GetValue(varValue As String) As String
    On Error GoTo ErrRoute
    Dim ct As Long, ct1 As Long
    If IsNull(varValue) Or varValue = "" Then
        GetValue = ""
        Exit Function
    End If
    If varValue = "*" Then
       GetValue = 1
       Exit Function
    End If
    ct1 = 0
    For ct = 1 To Len(varValue)
        If IsNumeric(Mid$(varValue, ct, 1)) Or _
            Mid$(varValue, ct, 1) = "." Or _
            Mid$(varValue, ct, 1) = "-" Or _
            Mid$(varValue, ct, 1) = "E" Then
        Else
            ct1 = 1
        End If
    Next
    If ct1 = 0 Then
        'getvalue = BRound(Val(varValue), 5) & Chr(9)
        GetValue = BRound(Val(varValue), 5)
    Else
        'getvalue = 0 & Chr(9)
        GetValue = ""
    End If
    Exit Function
 
ErrRoute:
    MsgBox "Error " & Err.Number & " has occurred in module GetValue()." & vbCrLf & vbCrLf & _
           Err.Description & vbCrLf & vbCrLf & _
           "Please refer this to the system administrator", _
           vbExclamation
End Function

Function BRound(dblNumber As Double, Optional numDecimalPlaces As Integer) As Double
    Dim r#
    Dim c%
    r = 10#
    If numDecimalPlaces > 0 Then
        For c = 2 To numDecimalPlaces
            r = r * 10#
        Next c
    Else
        For c = numDecimalPlaces To 0
            r = r / 10#
        Next c
    End If
    BRound = Int(dblNumber * r + 0.5000000000001) / r
End Function

Function GetNotesB()
    '+----------------------------------------------------------------+
    '| This function inserts the notes into the text file for Table 1 |
    '+----------------------------------------------------------------+
    Dim xlSheet As Excel.Worksheet
    Dim strNotes As String
    Dim Rowcount As Long
    Dim myCell As Range
    On Error GoTo ErrRoute

    Set xlSheet = Sheets("Table B")
    strNotes = ""

    'Use the defined range 'TB_Notes' in the workbook to locate
    'the Notes range, and then scan it for any non-blank lines.
    For Each myCell In xlSheet.Range("TB_Notes")
        If myCell.Value <> "" Then
            strNotes = strNotes & myCell.Value & Chr(9)
        End If
    Next myCell

    strNotes = Replace(strNotes, "&", "&amp;")
    strNotes = Replace(strNotes, "<", "lt;")
    strNotes = Replace(strNotes, ">", "gt;")

    GetNotesB = Trim(strNotes)
    Exit Function

ErrRoute:
    MsgBox "Error " & Err.Number & " has occurred in module GetValue()." & vbCrLf & vbCrLf & _
           Err.Description & vbCrLf & vbCrLf & _
           "Please refer this to the system administrator", _
           vbExclamation
End Function

Function GetNotesA()
    '+----------------------------------------------------------------+
    '| This function inserts the notes into the text file for Table 1 |
    '+----------------------------------------------------------------+
    Dim xlSheet As Excel.Worksheet
    Dim strNotes As String
    Dim Rowcount As Long
    Dim myCell As Range
    On Error GoTo ErrRoute

    Set xlSheet = Sheets("Table A")
    strNotes = ""

    'Use the defined range 'TA_Notes' in the workbook to locate
    'the Notes range, and then scan it for any non-blank lines.
    For Each myCell In xlSheet.Range("TA_Notes")
        If myCell.Value <> "" Then
            strNotes = strNotes & myCell.Value & Chr(9)
        End If
    Next myCell

    strNotes = Replace(strNotes, "&", "&amp;")
    strNotes = Replace(strNotes, "<", "lt;")
    strNotes = Replace(strNotes, ">", "gt;")

    GetNotesA = Trim(strNotes)
    Exit Function

ErrRoute:
    MsgBox "Error " & Err.Number & " has occurred in module GetValue()." & vbCrLf & vbCrLf & _
           Err.Description & vbCrLf & vbCrLf & _
           "Please refer this to the system administrator", _
           vbExclamation
End Function

Function GetNotesA1()
    '+----------------------------------------------------------------+
    '| This function inserts the notes into the text file for Table 1 |
    '+----------------------------------------------------------------+
    Dim xlSheet As Excel.Worksheet
    Dim strNotes As String
    Dim Rowcount As Long
    Dim myCell As Range
    On Error GoTo ErrRoute

    Set xlSheet = Sheets("Table A1")
    strNotes = ""

    'Use the defined range 'TB_Notes' in the workbook to locate
    'the Notes range, and then scan it for any non-blank lines.
    For Each myCell In xlSheet.Range("TA1_Notes")
        If myCell.Value <> "" Then
            strNotes = strNotes & myCell.Value & Chr(9)
        End If
    Next myCell

    strNotes = Replace(strNotes, "&", "&amp;")
    strNotes = Replace(strNotes, "<", "lt;")
    strNotes = Replace(strNotes, ">", "gt;")

    GetNotesA1 = Trim(strNotes)
    Exit Function

ErrRoute:
    MsgBox "Error " & Err.Number & " has occurred in module GetValue()." & vbCrLf & vbCrLf & _
           Err.Description & vbCrLf & vbCrLf & _
           "Please refer this to the system administrator", _
           vbExclamation
End Function
 
Private Function CheckCharacters(ByVal origText As String, ByVal typeNumeric As Boolean)
    Dim newText As String
    Dim nCount As Integer
    Dim char As String

    newText = ""
    For nCount = 1 To Len(origText)
        char = Mid$(origText, nCount, 1)
        Select Case char
        Case "&"
            newText = newText & "&amp;"
        Case "<"
            newText = newText & "&lt;"
        Case ">"
            newText = newText & "&gt;"
        Case """"
            newText = newText & "&quot;"
        Case "'"
            newText = newText & "&apos;"
        Case "|fffd|"
            If typeNumeric Then
                newText = newText & ""
            Else
                newText = newText & "#"
            End If
        Case "$"
            If typeNumeric Then
                newText = newText & ""
            Else
                newText = newText & "#"
            End If
        Case Else
            newText = newText & char
        End Select
    Next nCount
    CheckCharacters = newText

End Function

Private Sub imgSDExport_Click()
    frmExport.Show
End Sub

Private Sub imgSDImport_Click()
    frmImport.Show
End Sub

Private Sub imgSDValidate_Click()
    '+---------------------------------------------------------------+
    '| 1.  Looks for Blank Cells, Errors and Warnings in each sheet. |
    '| 2.  Looks for Header Errors and Warnings.                     |
    '| 3.  Sets the message for the sheet in the 'menu' depending on |
    '|     the flag settings (BlankCells, errors & warnings).        |
    '+---------------------------------------------------------------+
    Dim myCell As Range
    Dim MySheet As String
    Dim strNoteArea As String
    Dim lngSheetCount As Long
    On Error GoTo ErrorHandler

    blnXMLErrorFound = False
    'Don't reset this flag with the others, as it should only be reset once and then any error 1.2
    'or # error should set it to True to disable XML generation.

    ActiveWorkbook.Application.ScreenUpdating = False
    'ImageOff.Visible = True
    For lngSheetCount = 1 To 3
        MySheet = Switch(lngSheetCount = 1, "Table A", _
                         lngSheetCount = 2, "Table A1", _
                         lngSheetCount = 3, "Table B")
      '                   lngSheetCount = 4, "Reconciliation Table")

        If Application.Worksheets(MySheet).Cells(1, 8) <> "*" Then
            Application.Worksheets(MySheet).Cells(1, 8) = "*"
        End If
        Application.Worksheets(MySheet).Calculate
        Call CheckForErrors(MySheet)
        
        If lngSheetCount <> 2 Then
            'Only need to check for note entries on these tables if
            'there is at least one warning (not header warning).
            If blnWarningFound Then
                'Check the table has an associated note
                strNoteArea = Switch(lngSheetCount = 1, "TA", _
                                     lngSheetCount = 2, "TA1", _
                                     lngSheetCount = 3, "TB")
                Call CheckForNotes(strNoteArea)
            End If
        End If
        Call SetMenuMessage(MySheet)
    Next lngSheetCount
    Application.Worksheets("Submit Data").Activate
    ActiveWorkbook.Application.ScreenUpdating = True

    If blnXMLErrorFound Then
        Me.imgSDCreateXMLoff.Visible = True
        Me.imgSDCreateXMLon.Visible = False
            MsgBox "Your workbook contains either XL Reference Errors or " & _
            "unexpected alpha characters (Error 1.2). " & _
            "You will be unable to produce an XLM file " & _
            "untill these errors are corrected . "

    Else
        Me.imgSDCreateXMLoff.Visible = False
        Me.imgSDCreateXMLon.Visible = True
        

    End If
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module imgSDValidate_Click()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub

Sub ResetFlags(ByVal blnValue As Boolean)
    '+-------------------------------------------------------+
    '| Reset all of the private variables and set to true or |
    '| false depending on the value passed into the sub.     |
    '+-------------------------------------------------------+
    blnErrorFound = blnValue
    'blnXMLErrorFound = blnValue
    blnWarningFound = blnValue
    blnNoteFound = blnValue
    blnHeaderErrorFound = blnValue
    blnHeaderWarningFound = blnValue
    blnBlankFound = blnValue
End Sub

Sub CheckForErrors(ByVal CurrentSheetName As String)
    '+---------------------------------------------------+
    '| Checks for errors in the worksheet name which is  |
    '| passed into the sub.                              |
    '| Uses named ranges within each worksheet, and sets |
    '| the private variables accordingly.                |
    '+---------------------------------------------------+
    Dim strErrorRangeName As String
    Dim rngCell As Range
    On Error GoTo ErrorHandler

    '+-----------------------------------------------+
    '| Reset all the private variables prior to use. |
    '+-----------------------------------------------+
    Call ResetFlags(False)
    strErrorRangeName = Switch(CurrentSheetName = "Table A", "TA", _
                               CurrentSheetName = "Table A1", "TA1", _
                               CurrentSheetName = "Table B", "TB")
     '                          CurrentSheetName = "Reconciliation Table", "REC")
    strErrorRangeName = strErrorRangeName & "_Error_Range"
    Application.Worksheets(CurrentSheetName).Activate
    For Each rngCell In Sheets(CurrentSheetName).Range(strErrorRangeName)
        If IsError(rngCell) Then
            blnErrorFound = True
            blnXMLErrorFound = True
            ' Formula Error within the worksheet (i.e. #REF!, #VALUE! etc.)
        Else
            If Left(rngCell.Value, 9) = "Error 1.1" Then
                blnBlankFound = True
            ElseIf Left(rngCell.Value, 7) = "Error H" Then
                blnHeaderErrorFound = True
            ElseIf Left(rngCell.Value, 9) = "Error 1.2" Then
                blnXMLErrorFound = True
            ElseIf Left(rngCell.Value, 9) = "Warning H" Then
                blnHeaderWarningFound = True
            ElseIf Left(rngCell.Value, 5) = "Error" Then
                blnErrorFound = True
            ElseIf Left(rngCell.Value, 7) = "Warning" Then
                blnWarningFound = True
            End If
        End If
    Next rngCell
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module CheckForErrors()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub

Sub CheckForNotes(ByVal CurrentSheetName As String)
    '+---------------------------------------------+
    '| finds out whether an entry has been put in  |
    '| the notes if a warning has been identified. |
    '+---------------------------------------------+
    Dim myRange As String
    Dim myCell As Range
    On Error GoTo ErrorHandler

    myRange = CurrentSheetName & "_Notes"
    For Each myCell In Application.Range(myRange)
        If Trim(myCell.Value) <> "" Then
            blnNoteFound = True
            Exit For
        End If
    Next myCell
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module CheckForNotes()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub

Sub SetMenuMessage(ByVal CurrentSheetName As String)
    '+---------------------------------------------------+
    '| This sets the error message that is output to the |
    '| Submit Data sheet depending upon the flags set.   |
    '+---------------------------------------------------+
    Dim myRange As String
    Dim strMessage As String
    Dim strErrorRangeName As String
    On Error GoTo ErrorHandler

    strMessage = ""
    If blnBlankFound Then
        strMessage = "Failed - Blank cells"
    End If

    If blnErrorFound Then
        If Len(strMessage) <> 0 Then
            strMessage = strMessage & " and Errors"
        Else
            strMessage = strMessage & "Failed - Errors"
        End If
    End If

    If blnHeaderErrorFound Then
        If Len(strMessage) <> 0 Then
            strMessage = strMessage & " and Header Errors"
        Else
            strMessage = strMessage & "Failed - Header Errors"
        End If
    End If

    If blnWarningFound Then
        '+--------------------------------------------------------------------+
        '| Two choices here - fail if no note, or pass if a note was entered. |
        '+--------------------------------------------------------------------+
        If blnNoteFound Then
            '+--------------------------------+
            '| A note has been entered - Pass |
            '+--------------------------------+
            If Len(strMessage) <> 0 Then
                '+-----------------------------------------------------+
                '| Already failed with other errors, so no need to say |
                '| anything about these warnings which have passed.    |
                '+-----------------------------------------------------+
            Else
                strMessage = strMessage & "Passed with Noted Warnings"
            End If
        Else
            '+---------------------------------+
            '| No note has been entered - Fail |
            '+---------------------------------+
            If Len(strMessage) <> 0 Then
                strMessage = strMessage & " and un-noted Warnings"
            Else
                strMessage = strMessage & "Failed - un-noted Warnings"
            End If
        End If
    End If

    If blnHeaderWarningFound Then
        If Len(strMessage) <> 0 Then
            strMessage = strMessage & " and Header Warnings"
        Else
            strMessage = strMessage & "Passed with Header Warnings"
        End If
    End If
    If strMessage = "" Then strMessage = "Passed all validation checks"

    strErrorRangeName = Switch(CurrentSheetName = "Table A", "TA", _
                               CurrentSheetName = "Table A1", "TA1", _
                               CurrentSheetName = "Table B", "TB")
       '                        CurrentSheetName = "Reconciliation Table", "REC")
    strErrorRangeName = strErrorRangeName & "_Message"

    '+-----------------------------------------------------+
    '| Use the named ranges in the "Submit Data" worksheet |
    '| to assign the error checking results to the grid.   |
    '+-----------------------------------------------------+
    With Worksheets("Submit Data")
        '.Activate
        .Unprotect Password:=strSubmitDataPassWord
        .Range(strErrorRangeName).Value = strMessage
        .Protect Password:=strSubmitDataPassWord
    End With
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module SetMenuMessage()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub

Private Sub Worksheet_Activate()
        Me.imgSDCreateXMLoff.Visible = True
        Me.imgSDCreateXMLon.Visible = False
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "imgTAShowBlanks, 1, 0, MSForms, Image"
Option Explicit

Private Sub imgTAShowBlanks_Click()
    Dim myCell As Range
    On Error GoTo ErrorHandler

    Application.Sheets("Table A").Cells(1, 8) = "*"     'Put an asterisk in cell H1
    For Each myCell In Range("TA_Error_Range")
        'Check for Excel errors (#REF!, #NAME? etc..)
        If IsError(myCell) Then
            MsgBox "There is an Excel error in your worksheet, this is usually" & vbCrLf & _
                   "caused by using cut/paste instead of copy/paste and has" & vbCrLf & _
                   "corrupted the error-checking formula.", vbExclamation, "Section 52 Outturn 2008-09"
            Exit For
        Else
            'Check for Error1 (Blank cells)
            If myCell.Value = "Error 1.1" Then
                MsgBox "You have left some cells blank. These are highlighted in blue. " & vbCrLf & _
                       "Please replace these with a zero or other number as appropriate", _
                       vbExclamation, "Section 52 Outturn 2008-09"
                Exit For
            End If
        End If
    Next myCell
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module imgTAShowBlanks_Click()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, "Section 52 Outturn 2008-09"
    Application.ScreenUpdating = True
    Resume Next
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    Dim strErrorWarning As String
    Dim strEWnumber As String
    Dim lngRow As Long
    Dim lngFirstDataRow As Long
    Dim lngErrRangeOffset As Long
    Dim lngColorIndexCF As Long
    Dim lngErrCol As Long
    Dim lngerrRow As Long

    If IsError(ActiveCell) Then
        MsgBox "There is an Excel error in your worksheet, this is usually" & vbCrLf & _
               "caused by using cut/paste instead of copy/paste and has" & vbCrLf & _
               "corrupted the error-checking formula.", vbExclamation, "Section 52 Outturn 2008-09"
        Exit Sub
    End If

    lngFirstDataRow = 13
    lngErrRangeOffset = 30
    strErrorWarning = ""

    'New code added 25/05/2007. Checks to see if you are on a data cell
    'in error, and if so, it displays the error message here too.
    If ActiveCell.Row < lngFirstDataRow Then
        'Simpler check for the header cells.
        lngColorIndexCF = ColorIndexOfCF(Range(ActiveCell.AddressLocal))
        'Gets the conditional formatting applied to the cell if there is one.
        If lngColorIndexCF = 3 Or lngColorIndexCF = 6 Or lngColorIndexCF = 36 Then
            '3 is red, 6 is yellow and 36 is light yellow
            Select Case ActiveCell.AddressLocal
                Case "$D$4", "$E$4"
                    'Contact = Error H1
                    MsgBox "Error H1" & vbCrLf & vbCrLf & _
                           "You must enter a contact name here", vbOKOnly, "Error Message"
                Case "$D$5", "$E$5"
                    'Tel No. = Error H2
                    MsgBox "Error H2" & vbCrLf & vbCrLf & _
                           "You must enter a contact telephone number here", vbOKOnly, "Error Message"
                Case "$G$4", "$H$4"
                    'Email = Error H3
                    MsgBox "Error H3" & vbCrLf & vbCrLf & _
                           "You must enter a contact email address here", vbOKOnly, "Error Message"
                Case "$G$5", "$H$5"
                    'Version = Warning H1
                    MsgBox "Warning H1" & vbCrLf & vbCrLf & _
                           "You should enter the version number of this return here", vbOKOnly, "Warning Message"
                Case "$I$5", "$K$5"
                    'Date = Warning H2
                    MsgBox "Warning H2" & vbCrLf & vbCrLf & _
                           "You should enter the date you completed this return here", vbOKOnly, "Warning Message"
            End Select
        End If
        Exit Sub
    End If
    lngColorIndexCF = ColorIndexOfCF(Range(ActiveCell.AddressLocal))
    'Gets the conditional formatting applied to the cell if there is one.
    If lngColorIndexCF = 3 Or lngColorIndexCF = 6 Or lngColorIndexCF = 36 Then
        '3 is red, 6 is yellow and 36 is light yellow
        lngErrCol = ActiveCell.Column + lngErrRangeOffset
        lngerrRow = ActiveCell.Row
        If Left(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 5) = "Error" Then
            strErrorWarning = "E"
            strEWnumber = Trim(Mid(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 7))
        ElseIf Left(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 7) = "Warning" Then
            strErrorWarning = "W"
            strEWnumber = Trim(Mid(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 9))
        End If
    ElseIf Left(ActiveCell.Value, 9) = "Error 1.1" Then
        MsgBox "Value is missing. Do not leave any cell blank"
    ElseIf Left(ActiveCell.Value, 5) = "Error" Then
        strErrorWarning = "E"
        strEWnumber = Trim(Mid(ActiveCell.Value, 7))
    ElseIf Left(ActiveCell.Value, 7) = "Warning" Then
        strErrorWarning = "W"
        strEWnumber = Trim(Mid(ActiveCell.Value, 9))
    End If

    If strErrorWarning <> "" Then
        With ActiveWorkbook.Sheets("Error Codes")
            lngRow = 1
            Do While .Cells(lngRow, 1) <> ""
                If .Cells(lngRow, 1) = strErrorWarning And _
                   .Cells(lngRow, 2) = strEWnumber Then
                   MsgBox IIf(strErrorWarning = "E", "Error " & strEWnumber, "Warning " & strEWnumber) & _
                          vbCrLf & vbCrLf & _
                          .Cells(lngRow, 3), vbOKOnly, _
                            IIf(strErrorWarning = "E", "Error Message", "Warning Message")
                    Exit Do
                End If
                lngRow = lngRow + 1
            Loop
        End With
    End If
End Sub

Private Function ColorIndexOfCF(Rng As Range) As Integer
    Dim AC As Integer
    ColorIndexOfCF = 0
    AC = ActiveCondition(Rng)
    If AC <> 0 Then
        ColorIndexOfCF = Rng.FormatConditions(AC).Interior.ColorIndex
    End If
End Function

Private Function ActiveCondition(Rng As Range) As Integer
    Dim Ndx As Long
    Dim FC As FormatCondition
    If Rng.FormatConditions.Count <> 0 Then
        For Ndx = 1 To Rng.FormatConditions.Count
            Set FC = Rng.FormatConditions(Ndx)
            If Application.Evaluate(FC.Formula1) Then
                ActiveCondition = Ndx
                Exit Function
            End If
        Next Ndx
    End If
    ActiveCondition = 0
End Function
Attribute VB_Name = "Sorting"
Option Explicit

Sub Start_Sort(strField As String, strOrdering As String)
    ' This routine will sort the column either ascending or descending
    Dim lngPhaseTop As Long
    Dim lngPhaseBottom As Long
    Dim strPhase As String
    Dim strPhaseBase As String
    Dim lngCounter As Long

    ActiveWorkbook.Sheets("Table B").Unprotect (strTBPassWord)
    For lngCounter = 1 To 6
        strPhase = Switch(lngCounter = 1, "Nursery", _
                          lngCounter = 2, "Primary", _
                          lngCounter = 3, "PriMiddle", _
                          lngCounter = 4, "Secondary", _
                          lngCounter = 5, "SecMiddle", _
                          lngCounter = 6, "Special")
        strPhaseBase = Switch(lngCounter = 1, "TotalNursery", _
                              lngCounter = 2, "PriMiddle", _
                              lngCounter = 3, "TotalPrimary", _
                              lngCounter = 4, "SecMiddle", _
                              lngCounter = 5, "TotalSecondary", _
                              lngCounter = 6, "TotalSpecial")
        lngPhaseTop = Range(strPhase).Row + 1
        lngPhaseBottom = Range(strPhaseBase).Row - 2
        Call SortIt(lngPhaseTop, lngPhaseBottom, strField, strOrdering)
    Next lngCounter
    ActiveWorkbook.Sheets("Table B").Protect (strTBPassWord)
End Sub

Sub SortIt(lngPhaseTop As Long, lngPhaseBottom As Long, _
           strField As String, strOrder As String)
    Dim strPhaseRange As String
    Dim strPhaseKey As String

    strPhaseRange = "A" & lngPhaseTop & ":U" & lngPhaseBottom
    Select Case strField
        Case "DFES"
            strPhaseKey = "C" & lngPhaseTop
        Case "LAREF"
            strPhaseKey = "A" & lngPhaseTop
        Case "SCHOOL"
            strPhaseKey = "B" & lngPhaseTop
    End Select

    If strOrder = "ASC" Then
        Range(strPhaseRange).Sort key1:=Range(strPhaseKey), Order1:=xlAscending
    Else
        Range(strPhaseRange).Sort key1:=Range(strPhaseKey), Order1:=xlDescending
    End If
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    Dim myCell As Range
    Dim NoteCell As Range
    Dim blnW41Noted As Boolean
    Dim blnErrors As Boolean

    blnErrors = False
    If Dir("G:\S52Outturn0910\DSC.txt") = "" Then
            Application.Sheets("Table A").Cells(1, 8).Value = "*"
            Application.Sheets("Table B").Cells(1, 8).Value = "*"
            Application.Sheets("Table A1").Cells(1, 8).Value = "*"
     '       Application.Sheets("Reconciliation Table").Cells(1, 8).Value = "*"

        '+---------------------------------------------------------+
        '| This traps worksheets where the error matrix has become |
        '| corrupt, causing it to display a '#...!' error instead  |
        '| of the number of errors/warnings.                       |
        '+---------------------------------------------------------+
        If IsError(Application.Sheets("Table A").Cells(2, 53)) Then blnErrors = True
        If IsError(Application.Sheets("Table B").Cells(2, 42)) Then blnErrors = True
        If IsError(Application.Sheets("Table A1").Cells(2, 28)) Then blnErrors = True
       '[ If IsError(Application.Sheets("Reconciliation Table").Cells(2, 29)) Then blnErrors = True

        If blnErrors = False Then
            '+--------------------------------------------+
            '| This checks the error matrix to see if the |
            '| number of errors/warnings is zero.         |
            '+--------------------------------------------+
            If Application.Sheets("Table A").Cells(2, 53) <> 0 Then blnErrors = True
            If Application.Sheets("Table B").Cells(2, 42) <> 0 Then blnErrors = True
            If Application.Sheets("Table A1").Cells(2, 28) <> 0 Then blnErrors = True
        '    If Application.Sheets("Reconciliation Table").Cells(2, 29) <> 0 Then blnErrors = True
        End If

        If blnErrors Then
            '+-----------------------------------+
            '| There are Errors/Warnings present |
            '+-----------------------------------+
            
            MsgBox "The workbook that you are saving contains errors and/or queries" & vbCrLf & _
                   "on one or more of the tables. Before submission to the DfE, please" & vbCrLf & _
                   "ensure that (1) any errors are cleared and (2) explanations are" & vbCrLf & _
                   "given in the notes and comments box for queries. This will help us" & vbCrLf & _
                   "to understand your data and should reduce any subsequent" & vbCrLf & _
                   "correspondence about the figures.", vbExclamation, strMsgTitle
        End If

        '+----------------------------------------------------------------------+
        '| Run the check for Warning 4.1 on the Reconciliation Table, and check |
        '| for notes if one is found. If there are no notes display a warning.  |
        '+----------------------------------------------------------------------+
        For Each myCell In Range("A1_Error_Range")
            'Check for Excel errors (#REF!, #NAME? etc..)
            If IsError(myCell) Then
                'Skip the check on this cell
            ElseIf myCell.Value = "Warning 4.1" Then
                'Got a Warning 4.1, so now we have to check the notes area
                blnW41Noted = False
                For Each NoteCell In Range("REC_Notes")
                    If Trim(NoteCell.Value) <> "" Then
                        blnW41Noted = True
                        Exit For
                    End If
                Next NoteCell
                If Not blnW41Noted Then
                    MsgBox "The workbook contains significant variances from your authorities'" & vbCrLf & _
                           "2008-09 Section 52 Budget Statement.  Before submission to the DCSF, " & vbCrLf & _
                           "please ensure that an explanation is given for any large variances." & vbCrLf & vbCrLf & _
                           "This will help us to understand your data and should reduce any" & vbCrLf & _
                           "subsequent correspondence about the figures.", vbExclamation, strMsgTitle
                End If
                Exit For
            End If
        Next myCell
    End If
End Sub
Attribute VB_Name = "frmExport"
Attribute VB_Base = "0{48227A32-1E66-4F00-982E-73D932D42B7E}{C1F02125-91D9-4F76-8CE8-CFBEF4D0BAE2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancel_Click()
    Me.Hide
End Sub

Private Sub cmdExport_Click()
    Me.Hide
    If Me.optTableA.Value Then
        Call ExportTable("A")
'    ElseIf Me.optAnnexYS Then
'        Call ExportTable("YS")
    End If
End Sub
Attribute VB_Name = "frmImport"
Attribute VB_Base = "0{A77E82CD-B547-4FCC-B545-ACDDFFE62CAF}{D42693D8-B3B5-4D95-8FE1-87A89BB2EA26}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancel_Click()
    Me.Hide
End Sub

Private Sub cmdImport_Click()
    If MsgBox("You have opted to import the " & _
           IIf(Me.optTableA.Value, "Table A", "YS Annex") & " worksheet." & _
           vbCrLf & vbCrLf & _
           "Once you click 'OK', please wait until the message appears telling" & _
           vbCrLf & _
           "you that the import was successful, otherwise the workbook may" & _
           vbCrLf & _
           "become corrupt." & vbCrLf & vbCrLf & _
           "Alternatively, press the 'Cancel' button to cancel this action.", _
           vbOKCancel, strMsgTitle) = vbOK Then
        Me.Hide
        If Me.optTableA.Value Then
            Call ImportTable("A")
'        ElseIf Me.optAnnexYS Then
'            Call ImportTable("YS")
        End If
    Else
        Me.Hide
    End If
End Sub
Attribute VB_Name = "frmInsert"
Attribute VB_Base = "0{7E457CFB-3F88-451B-8F1C-07EDA635E52A}{A6FEDD13-EE96-4B47-B609-560C317B06BA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancel_Click()
    Me.Hide
End Sub

Private Sub cmdInsert_Click()
    Me.Hide
    If Me.optNursery.Value = True Then
        Call SchoolAdd("Nursery")
    ElseIf Me.optPrimary.Value = True Then
        Call SchoolAdd("Primary")
    ElseIf Me.optPriMiddle.Value = True Then
        Call SchoolAdd("PriMiddle")
    ElseIf Me.optSecondary.Value = True Then
        Call SchoolAdd("Secondary")
    ElseIf Me.optSecMiddle.Value = True Then
        Call SchoolAdd("SecMiddle")
    ElseIf Me.optSpecial.Value = True Then
        Call SchoolAdd("Special")
    End If
End Sub

Private Sub UserForm_Activate()
    Me.optNursery.Value = True
End Sub
Attribute VB_Name = "frmSorting"
Attribute VB_Base = "0{2BBF6A41-64B5-4179-89BA-22E0659A53A9}{A13D9843-7641-403E-A708-65263BF1C8BB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancel_Click()
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    Dim strOrder As String

    Me.Hide
    If Me.optAscending.Value = True Then
        strOrder = "ASC"
    Else
        strOrder = "DESC"
    End If
    If Me.optDfES.Value = True Then
        Call Start_Sort("DFES", strOrder)
    ElseIf Me.optLAref.Value = True Then
        Call Start_Sort("LAREF", strOrder)
    ElseIf Me.optSchool.Value = True Then
        Call Start_Sort("SCHOOL", strOrder)
    End If
End Sub

Private Sub UserForm_Initialize()
    Me.optAscending.Value = True
    Me.optSchool.Value = True
End Sub

' InQuest injected base64 decoded content
' 'njT

INQUEST-PP=macro
