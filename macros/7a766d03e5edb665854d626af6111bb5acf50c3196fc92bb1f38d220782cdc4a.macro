Attribute VB_Name = "Module1"
Option Explicit
Type chromosome
    v(0 To 10) As Double
    f As Double
End Type
Dim ws1 As Object, ws2 As Object
Dim ws3 As Object, ws4 As Object
Dim ws5 As Object, ws6 As Object
Dim ws7 As Object, ws8 As Object, ws9 As Object
Dim chrom(0 To 200) As chromosome
Dim chromElite As chromosome
Dim maxLimit(0 To 10) As Double
Dim minLimit(0 To 10) As Double
Dim pop As Integer, nParm As Integer, maxGen As Integer
Dim gen As Integer
Dim beta As Double
Dim pm As Double, pc As Double

'----------------------------
'GA Engine
'----------------------------
Public Sub GaEngine()
Attribute GaEngine.VB_ProcData.VB_Invoke_Func = " \n14"
Dim j As Integer, k As Integer
Dim dcb As String, c As String, mx As String
Dim i As Integer
    nParm = ws1.Range("d4").Value
    pop = ws1.Range("d6").Value
    maxGen = ws1.Range("d8").Value
    pc = ws1.Range("d9").Value
    pm = ws1.Range("d10").Value
    beta = ws1.Range("d11").Value
    
    For i = 0 To nParm - 1
        minLimit(i) = ws1.Cells(5 + i, 7).Value
        maxLimit(i) = ws1.Cells(5 + i, 8).Value
    Next i
    
    For i = 1 To nParm
        ws2.Cells(i, 24).Value = Rnd * (maxLimit(i - 1) _
                        - minLimit(i - 1)) + minLimit(i)
        chromElite.v(i - 1) = ws2.Cells(i, 24).Value
    Next i
    chromElite.f = ws2.Range("b8").Value
    Randomize
    ws3.Activate
    ws3.Range("b5:m500").ClearContents
    ws3.Range("d4:m4").ClearContents
    ws4.Range("o1:p500").ClearContents
    
    For j = 1 To nParm
        ws3.Cells(4, j + 3).Value = j
    Next j
    If ws2.Range("Z1").Value = True Then
        For j = 1 To pop
            ws3.Cells(4 + j, 2).Value = j
        Next j
    Else
        ws3.Range("b5").Value = 1
    End If
    initialPop
    fitness
    For gen = 1 To maxGen
        ws3.Range("b3").Value = gen
        selekt
        crossover
        mutate
        fitness
        Report
    Next gen
    
    For j = 1 To nParm
        ws2.Cells(j, 24).Value = ws3.Cells(5, 3 + j).Value
    Next j
    dcb = Chr(34)
    mx = Str(maxGen)
    c = "O1:P" & Right(mx, Len(mx) - 1)
    ws4.ChartObjects("Chart 4").Activate
    ActiveChart.SetSourceData Source:=Sheets("GRAPH").Range(c), _
                PlotBy:=xlColumns
    Range("i1").Activate
    
End Sub


'------------------------------
'If a variable is out of bound,
'replace it with a random value
'------------------------------
Private Function check(i As Integer, v As Double) As Double
Attribute check.VB_ProcData.VB_Invoke_Func = " \n14"
Dim u As Double
    u = v
    If v > maxLimit(i) Or v < minLimit(i) Then
        u = Rnd * (maxLimit(i) - minLimit(i)) + minLimit(i)
    End If
    check = u
End Function

'-------------------------------
'Linear whole crossover routine
'adapted from Wright
'-------------------------------
Public Sub crossover()
Attribute crossover.VB_ProcData.VB_Invoke_Func = " \n14"
Dim babyChrom(0 To 2) As chromosome
Dim ctemp As chromosome
Dim i As Integer, s As Integer
Dim j As Integer, k As Integer
    i = 0
    While i < pop - 2
      If Rnd < pc Then
         For s = 0 To nParm - 1
            babyChrom(0).v(s) = 0.5 * chrom(i).v(s) + 0.5 * chrom(i + 1).v(s)
            babyChrom(1).v(s) = check(s, -0.5 * chrom(i).v(s) + 1.5 * chrom(i + 1).v(s))
            babyChrom(2).v(s) = check(s, 1.5 * chrom(i).v(s) - 0.5 * chrom(i + 1).v(s))
         Next s
         For k = 0 To 2
            For j = 0 To nParm - 1
                ws2.Cells(j + 1, 24).Value = babyChrom(k).v(j)
            Next j
            babyChrom(k).f = ws2.Range("b8").Value
         Next k
         If babyChrom(1).f < babyChrom(0).f Then
            swap babyChrom(1), babyChrom(0)
         End If
         
         If babyChrom(2).f < babyChrom(0).f Then
            swap babyChrom(2), babyChrom(0)
         End If
         
         If babyChrom(2).f < babyChrom(1).f Then
            swap babyChrom(2), babyChrom(1)
         End If
         chrom(i) = babyChrom(0)
         chrom(i + 1) = babyChrom(1)
      End If
      i = i + 2
   Wend

End Sub

'-------------------------------
'Non uniform mutation operator
'-------------------------------
Private Function delta(y As Double) As Double
Attribute delta.VB_ProcData.VB_Invoke_Func = " \n14"
Dim gt As Double, pt As Double
   gt = maxGen
   pt = gen
   delta = y * Rnd * (1# - pt / gt) ^ beta

End Function


'----------------------------
'Evaluate fitness by calling
'ObjFun and sort on fitness
'----------------------------
Public Sub fitness()
Attribute fitness.VB_ProcData.VB_Invoke_Func = " \n14"
Dim i As Integer, j As Integer
Dim bestChrom As chromosome

   For j = 0 To pop - 1
        For i = 0 To nParm - 1
            ws2.Cells(i + 1, 24).Value = chrom(j).v(i)
        Next i
        chrom(j).f = ws2.Range("b8").Value
   Next j
   bestChrom = chrom(0)
   For j = 1 To pop - 1
        If chrom(j).f < bestChrom.f Then
            bestChrom = chrom(j)
        End If
   Next j
   If bestChrom.f < chromElite.f Then
        chromElite = bestChrom
   End If
   
End Sub

'-------------------------------------
'Randomly create an initial population
'-------------------------------------
Public Sub initialPop()
Attribute initialPop.VB_ProcData.VB_Invoke_Func = " \n14"
Dim j As Integer, i As Integer
   For j = 0 To pop - 1
      For i = 0 To nParm - 1
         chrom(j).v(i) = Rnd * (maxLimit(i) - minLimit(i)) _
                         + minLimit(i)
      Next i
   Next j

End Sub

'----------------------------
'Non uniform mutation routine
'adapted from Michalewicz
'----------------------------
Public Sub mutate()
Attribute mutate.VB_ProcData.VB_Invoke_Func = " \n14"
Dim i As Integer, s As Integer

    For i = 0 To pop - 1
      If Rnd < pm Then
         s = rand(nParm)
         If Rnd < 0.5 Then
            chrom(i).v(s) = chrom(i).v(s) + delta(maxLimit(s) - chrom(i).v(s))
         Else
            chrom(i).v(s) = chrom(i).v(s) - delta(-minLimit(s) + chrom(i).v(s))
         End If
      End If
    Next i
End Sub

'------------------------------
'Random number between 1 and k
'------------------------------
Private Function rand(ByVal k As Integer) As Integer
Attribute rand.VB_ProcData.VB_Invoke_Func = " \n14"

    rand = Int(Rnd * k)

End Function

'-------------------------------
'Stochastic remainder selection
'routine, adapted from Goldberg
'-------------------------------
Public Sub selekt()
Attribute selekt.VB_ProcData.VB_Invoke_Func = " \n14"
Dim newChrom(0 To 200) As chromosome
Dim i As Integer, j As Integer, k As Integer

For i = 0 To pop - 1
    j = rand(pop - 1)
    k = rand(pop - 1)
    newChrom(i) = chrom(j)
    If chrom(k).f < chrom(j).f Then
        newChrom(i) = chrom(k)
    End If
Next i
j = rand(pop - 1)
newChrom(j) = chromElite
For i = 0 To pop - 1
    chrom(i) = newChrom(i)
Next i

End Sub



Public Sub gotoInput()
Attribute gotoInput.VB_ProcData.VB_Invoke_Func = " \n14"
    ws1.Activate
End Sub

Public Sub varLimits()
Attribute varLimits.VB_ProcData.VB_Invoke_Func = " \n14"
Dim i As Integer
    nParm = ws1.Range("d4").Value
    ws1.Range("f5:h14").ClearContents
    For i = 1 To nParm
        ws1.Cells(4 + i, 6).Value = i
    Next i
End Sub

Public Sub gotoFunction()
Attribute gotoFunction.VB_ProcData.VB_Invoke_Func = " \n14"

    ws2.Activate
   
End Sub

Public Sub Auto_Open()
    Set ws1 = Sheets("INPUT")
    Set ws2 = Sheets("FUNCTION")
    Set ws3 = Sheets("EVOLUTION")
    Set ws4 = Sheets("GRAPH")
    Set ws5 = Sheets("GENETIK")
    Set ws6 = Sheets("HELP")
    Set ws7 = Sheets("HELP2")
    Set ws8 = Sheets("HELP3")
    Set ws9 = Sheets("HELP4")
    ws2.Range("Z1").Value = False
    ws5.Activate
End Sub

Public Sub Report()
Dim j As Integer, i As Integer
    
    ws3.Cells(5, 3).Value = chromElite.f
    For i = 0 To nParm - 1
        ws3.Cells(5, 4 + i).Value = chromElite.v(i)
    Next i
    If ws2.Range("Z1").Value = True Then
        For j = 1 To pop - 1
            ws3.Cells(5 + j, 3).Value = chrom(j).f
            For i = 0 To nParm - 1
                ws3.Cells(5 + j, 4 + i).Value = chrom(j).v(i)
            Next i
        Next j
    End If
    
    ws4.Cells(gen, 15).Value = gen
    ws4.Cells(gen, 16).Value = chromElite.f
    
End Sub

Public Sub gotoAide()
     ws6.Activate
End Sub

Public Sub retourAg()
     ws5.Activate
End Sub

Private Function swap(a As chromosome, b As chromosome)
Dim temp As chromosome

    temp = a
    a = b
    b = temp

End Function

Public Sub Goto_evol()
    ws3.Activate
End Sub

Public Sub Goto_Input()
    ws1.Activate
End Sub

Public Sub Goto_graph()
    ws4.Activate
End Sub

Public Sub Goto_help2()
    ws7.Activate
End Sub

Public Sub Goto_help3()
    ws8.Activate
End Sub

Public Sub Goto_help4()
    ws9.Activate
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)

End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()

End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)

End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Open()

End Sub


INQUEST-PP=macro
