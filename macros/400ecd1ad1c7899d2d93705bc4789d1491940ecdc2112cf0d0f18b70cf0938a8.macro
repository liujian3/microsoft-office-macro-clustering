Attribute VB_Name = "E_Main"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

























Attribute VB_Name = "H_GRP"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


























Attribute VB_Name = "H_IND"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

























Attribute VB_Name = "H_JUR"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


























Attribute VB_Name = "H_MAN"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

























Attribute VB_Name = "H_MET"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


























Attribute VB_Name = "H_TAC"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True





























Attribute VB_Name = "T_Fr21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






















Attribute VB_Name = "T_Fr22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






















Attribute VB_Name = "T_Fr23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






















Attribute VB_Name = "T_Fr231"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True























Attribute VB_Name = "T_Fr241"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True























Attribute VB_Name = "T_Fr25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






















Attribute VB_Name = "T_Fr261"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True























Attribute VB_Name = "T_Fr271"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True























Attribute VB_Name = "T_Fr281"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True























Attribute VB_Name = "T_Fr291"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True























Attribute VB_Name = "T_Fr30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






















Attribute VB_Name = "T_Fr301"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






















Attribute VB_Name = "T_Fr31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






















Attribute VB_Name = "T_Fr32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






















Attribute VB_Name = "T_Fr33"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






















Attribute VB_Name = "T_Fr43"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






















Attribute VB_Name = "T_Fr441"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True























Attribute VB_Name = "T_Fr451"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True























Attribute VB_Name = "T_Fr461"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True























Attribute VB_Name = "T_Fr471"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True























Attribute VB_Name = "T_Hrh28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






















Attribute VB_Name = "T_Hrh29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






















Attribute VB_Name = "T_Hrh30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True





















Attribute VB_Name = "T_Hrh31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True





















Attribute VB_Name = "T_Hrh32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True





















Attribute VB_Name = "T_Hrh33"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True





















Attribute VB_Name = "T_Hrh34"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True





















Attribute VB_Name = "T_Hrh35"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True





















Attribute VB_Name = "T_Hrh36"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True





















Attribute VB_Name = "T_Hrh37"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True





















Attribute VB_Name = "T_Hrh38"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True





















Attribute VB_Name = "T_PMHYP23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






















Attribute VB_Name = "T_PMHYP24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






















Attribute VB_Name = "T_PMHYP25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






















Attribute VB_Name = "T_PMHYP26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True






















Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True














Private Sub Workbook_Activate()
On Error GoTo err_activate

If (ActiveWorkbook.Name = v_Classeur And v_OK) Then
      Workbooks(v_Classeur_Cible).Activate
End If
Exit Sub

err_activate:
  Resume Next
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    RecupOldEssbaseIni
End Sub

Private Sub Workbook_Open()
  LaunchApp
End Sub
Attribute VB_Name = "U_Contenu"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


























Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)

End Sub
Attribute VB_Name = "U_Suivi"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



















Attribute VB_Name = "Z_Param"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


























Attribute VB_Name = "frm4Date"
Attribute VB_Base = "0{371AA32D-E3C5-4F48-9DCB-B8C5D6402908}{D8A63ADE-7212-4EDD-AED9-4391C579DCDD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




















Private Sub DateN_Update()
    Dim oDateNDeb, oDateNFin As Variant
    oDateNDeb = DateSerial(Worksheets("param").Range("var_aa").Value, frm4Date.MoisNDeb.ListIndex + 1, frm4Date.JourNDeb.ListIndex + 1)
    oDateNFin = DateSerial(Worksheets("param").Range("var_aa").Value, frm4Date.MoisNFin.ListIndex + 1, frm4Date.JourNFin.ListIndex + 1)
    On Error Resume Next
If Month(oDateNDeb) = frm4Date.MoisNDeb.ListIndex + 1 And Month(oDateNFin) = frm4Date.MoisNFin.ListIndex + 1 And oDateNFin >= oDateNDeb Then
    frm4Date.PeriodeN.Caption = "du " + Format$(oDateNDeb, "DD/MM/YY") + " au " + Format$(oDateNFin, "DD/MM/YY")
    frm4Date.PeriodeN.Caption = "P|fffd|riode de " + LTrim(Str(oDateNFin - oDateNDeb + 1)) + " jours : " + frm4Date.PeriodeN.Caption
    frm4Date.PeriodeN.Tag = 1
    Worksheets("param").Range("var_date1").Value = oDateNDeb
    Worksheets("param").Range("var_date2").Value = oDateNFin
Else
    frm4Date.PeriodeN.Caption = "P|fffd|riode s|fffd|lectionn|fffd|e invalide"
    frm4Date.PeriodeN.Tag = -1
End If
If Val(frm4Date.PeriodeN.Tag) + Val(frm4Date.PeriodeH.Tag) > 0 Then
    frm4Date.btnOK.Enabled = True
    Worksheets("param").Range("var_date0").Value = 1
Else
    frm4Date.btnOK.Enabled = False
End If
End Sub

Private Sub btnOK_Click()
    Worksheets("param").Range("var_date0").Value = 1
    frm4Date.Hide
End Sub

Private Sub JourNDeb_Change()
    DateN_Update
End Sub

Private Sub MoisNDeb_Change()
    DateN_Update
End Sub

Private Sub JourNFin_Change()
    DateN_Update
End Sub

Private Sub MoisNFin_Change()
    DateN_Update
End Sub
Private Sub DateH_Update()
    Dim oDateHDeb, oDateHFin As Variant
    oDateHDeb = DateSerial(Worksheets("param").Range("var_aa").Value - 1, frm4Date.MoisHDeb.ListIndex + 1, frm4Date.JourHDeb.ListIndex + 1)
    oDateHFin = DateSerial(Worksheets("param").Range("var_aa").Value - 1, frm4Date.MoisHFin.ListIndex + 1, frm4Date.JourHFin.ListIndex + 1)
    On Error Resume Next
If Month(oDateHDeb) = frm4Date.MoisHDeb.ListIndex + 1 And Month(oDateHFin) = frm4Date.MoisHFin.ListIndex + 1 And oDateHFin >= oDateHDeb Then
    frm4Date.PeriodeH.Caption = "du " + Format$(oDateHDeb, "DD/MM/YY") + " au " + Format$(oDateHFin, "DD/MM/YY")
    frm4Date.PeriodeH.Caption = "P|fffd|riode de " + LTrim(Str(oDateHFin - oDateHDeb + 1)) + " jours : " + frm4Date.PeriodeH.Caption
    frm4Date.PeriodeH.Tag = 1
    Worksheets("param").Range("var_date3").Value = oDateHDeb
    Worksheets("param").Range("var_date4").Value = oDateHFin
Else
    frm4Date.PeriodeH.Caption = "P|fffd|riode s|fffd|lectionn|fffd|e invalide"
    frm4Date.PeriodeH.Tag = -1
End If
If Val(frm4Date.PeriodeN.Tag) + Val(frm4Date.PeriodeH.Tag) > 0 Then
    frm4Date.btnOK.Enabled = True
 
Else
    frm4Date.btnOK.Enabled = False
End If
End Sub

Private Sub JourHDeb_Change()
    DateH_Update
End Sub

Private Sub moishDeb_Change()
    DateH_Update
End Sub

Private Sub JourHFin_Change()
    DateH_Update
End Sub

Private Sub moishFin_Change()
    DateH_Update
End Sub

Sub Select4Date()
    application.Cursor = xlDefault
    frm4Date.MoisNDeb.AddItem ("Janvier")
    frm4Date.MoisNDeb.AddItem ("F|fffd|vrier")
    frm4Date.MoisNDeb.AddItem ("Mars")
    frm4Date.MoisNDeb.AddItem ("Avril")
    frm4Date.MoisNDeb.AddItem ("Mai")
    frm4Date.MoisNDeb.AddItem ("Juin")
    frm4Date.MoisNDeb.AddItem ("Juillet")
    frm4Date.MoisNDeb.AddItem ("Ao|fffd|t")
    frm4Date.MoisNDeb.AddItem ("Septembre")
    frm4Date.MoisNDeb.AddItem ("Octobre")
    frm4Date.MoisNDeb.AddItem ("Novembre")
    frm4Date.MoisNDeb.AddItem ("D|fffd|cembre")
    frm4Date.MoisNDeb.ListIndex = Month(Worksheets("param").Range("var_date1").Value) - 1
    
    frm4Date.MoisNFin.AddItem ("Janvier")
    frm4Date.MoisNFin.AddItem ("F|fffd|vrier")
    frm4Date.MoisNFin.AddItem ("Mars")
    frm4Date.MoisNFin.AddItem ("Avril")
    frm4Date.MoisNFin.AddItem ("Mai")
    frm4Date.MoisNFin.AddItem ("Juin")
    frm4Date.MoisNFin.AddItem ("Juillet")
    frm4Date.MoisNFin.AddItem ("Ao|fffd|t")
    frm4Date.MoisNFin.AddItem ("Septembre")
    frm4Date.MoisNFin.AddItem ("Octobre")
    frm4Date.MoisNFin.AddItem ("Novembre")
    frm4Date.MoisNFin.AddItem ("D|fffd|cembre")
    frm4Date.MoisNFin.ListIndex = Month(Worksheets("param").Range("var_date2").Value) - 1
    
    frm4Date.MoisHDeb.AddItem ("Janvier")
    frm4Date.MoisHDeb.AddItem ("F|fffd|vrier")
    frm4Date.MoisHDeb.AddItem ("Mars")
    frm4Date.MoisHDeb.AddItem ("Avril")
    frm4Date.MoisHDeb.AddItem ("Mai")
    frm4Date.MoisHDeb.AddItem ("Juin")
    frm4Date.MoisHDeb.AddItem ("Juillet")
    frm4Date.MoisHDeb.AddItem ("Ao|fffd|t")
    frm4Date.MoisHDeb.AddItem ("Septembre")
    frm4Date.MoisHDeb.AddItem ("Octobre")
    frm4Date.MoisHDeb.AddItem ("Novembre")
    frm4Date.MoisHDeb.AddItem ("D|fffd|cembre")
    frm4Date.MoisHDeb.ListIndex = Month(Worksheets("param").Range("var_date3").Value) - 1
    
    frm4Date.MoisHFin.AddItem ("Janvier")
    frm4Date.MoisHFin.AddItem ("F|fffd|vrier")
    frm4Date.MoisHFin.AddItem ("Mars")
    frm4Date.MoisHFin.AddItem ("Avril")
    frm4Date.MoisHFin.AddItem ("Mai")
    frm4Date.MoisHFin.AddItem ("Juin")
    frm4Date.MoisHFin.AddItem ("Juillet")
    frm4Date.MoisHFin.AddItem ("Ao|fffd|t")
    frm4Date.MoisHFin.AddItem ("Septembre")
    frm4Date.MoisHFin.AddItem ("Octobre")
    frm4Date.MoisHFin.AddItem ("Novembre")
    frm4Date.MoisHFin.AddItem ("D|fffd|cembre")
    frm4Date.MoisHFin.ListIndex = Month(Worksheets("param").Range("var_date4").Value) - 1

    For i = 1 To 31
        frm4Date.JourNDeb.AddItem (i)
        frm4Date.JourNFin.AddItem (i)
        frm4Date.JourHDeb.AddItem (i)
        frm4Date.JourHFin.AddItem (i)
    Next
    frm4Date.JourNDeb.ListIndex = Day(Worksheets("param").Range("var_date1").Value) - 1
    frm4Date.JourNFin.ListIndex = Day(Worksheets("param").Range("var_date2").Value) - 1
    frm4Date.JourHDeb.ListIndex = Day(Worksheets("param").Range("var_date3").Value) - 1
    frm4Date.JourHFin.ListIndex = Day(Worksheets("param").Range("var_date4").Value) - 1
    
    If Worksheets("param").Range("var_date1").Value <= Worksheets("param").Range("var_date2").Value And Worksheets("param").Range("var_date3").Value <= Worksheets("param").Range("var_date4").Value Then
        frm4Date.btnOK.Enabled = True
    Else
        frm4Date.btnOK.Enabled = False
    End If
    frm4Date.Show
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    CloseMode = 1
    Cancel = 1
End Sub
Attribute VB_Name = "frmEssInfo"
Attribute VB_Base = "0{E12EEB31-15F4-4CF0-8AD8-98C467E97C0B}{1D5B24C9-536B-40B2-91BC-1FCFC5490CFE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
















































'********************************************************************************************
' Code Formulaire frmEssInfo
'********************************************************************************************
' Historique versions :
' 040512 PSA Lecture cycle en cours dans onglet MAN sans cr|fffd|ation d'un onglet suppl|fffd|mentaire
' 040903 PSA Determination serveur en fct nom classeur (supprimer ctrl valeur sur var_server)
'********************************************************************************************
Option Explicit

Private Sub btnOK_Click()
    frmEssInfo.Hide
End Sub

Public Sub Init()
    Dim sMajDate As String
    Dim tblResult As Variant
    Dim oSheet As Worksheet
    Dim ocell As Range
  
    On Error GoTo Err_Init
    
    SetModeMacro
    
    ' Server & Database
    '040902 D|fffd|termination automatique du serveur d'apr|fffd|s nom fichier
    'Formule |fffd| mettre en "var_server" : =IF(ISNA(VLOOKUP(var_Envt;tab_Servers;3;FALSE));"?";VLOOKUP(var_Envt;tab_Servers;3;FALSE))
    Range("var_Envt").Value = "=LEFT(RIGHT(MID(CELL(""filename"",R[-5]C[-5]),FIND(""[""&var_outil,CELL(""filename"",R[-5]C[-5]))+1,25+len(var_outil)),13),1)"
    Worksheets("param").Calculate
    Do While Range("var_server").Value = "?" 'Saisie si ind|fffd|termin|fffd|
        Range("var_Envt").Value = InputBox("Tapez D pour D|fffd|veloppement, I pour Integration, P pour Production", "Adresse serveur ind|fffd|termin|fffd|e", "I")
        Worksheets("param").Calculate
    Loop
    
    txServer.Text = Range("tab_servers").Find(Range("var_server").Value).Offset(0, 1).Value & " [" & Range("var_server").Value & "]"
    txDatabase.Text = Range("var_application").Value & " - " & Range("var_database").Value
    txTool.Text = Range("var_outil").Value
    txVersion.Text = ToolVersion
    
    ' Temp sheet for Essbase opeations purpose
'    Set osheet = ThisWorkbook.Worksheets.Add 'Modif PSA 040512 lecture cycle en cours dans onglet MAN
    Set oSheet = Worksheets("MAN")
'    oSheet.Visible = xlSheetHidden
    ConnectSheet oSheet

    ' Cube update date
    tblResult = EssVGetMemberInfo(fGetSheetName(oSheet), "DM-PHASE", EssDimensionLevel, True)
    If IsArray(tblResult) Then sMajDate = tblResult(0)
    EssVFreeMemberInfo (tblResult)
    txGen = Mid(sMajDate, InStr(sMajDate, "le ") + 3, Len(sMajDate) - InStr(sMajDate, "le ") - 3)

    Range("var_majcube").Value = txGen
    If Left(UCase(Range("var_application").Value), 2) = "CA" Then
        Range("var_majcube").Value = "=TEXT(Left(""" + txGen + """, 16),""jj/mm/aaaa hh:mm"")"
        If Left(Mid(sMajDate, 36, 11), 1) = "P" Then
            Range("var_TypeDonnee").Value = Mid(sMajDate, 36, 11)
        Else
            Range("var_TypeDonnee").Value = ""
        End If
    End If
    
    ' Current Period (substitution variable: "cycleencours")
    If Left(UCase(Range("var_application").Value), 2) <> "CA" Then
        Set ocell = oSheet.Range(oSheet.Cells(1, 4), oSheet.Cells(20, 20))
        ocell.Cells(1, 1).Value = "&cycleencours"
        ocell.Cells(2, 1).Value = "&moisencours"
        Retrieve oSheet, ocell
        txCurPer = ocell.Cells(1, 1).Value
        Range("var_Cycle").Value = Val(txCurPer)
        ocell.Cells(2, 1).Replace What:="""", Replacement:="", LookAt:=xlPart, _
            SearchOrder:=xlByColumns, MatchCase:=False
        Range("var_moisencours").Value = ocell.Cells(2, 1).Value
        
        Disconnect oSheet
        Set oSheet = Nothing
    End If
    
    SetModeUser

Err_Init:
  Exit Sub

End Sub

Attribute VB_Name = "frmMain"
Attribute VB_Base = "0{6531FBA0-2C33-4A69-A5E1-B14F998E35C4}{FBC20C8E-A3C1-49B7-BFD2-FB560640A3F6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





































Option Explicit

Private Sub btChild_Click()
    Dim onode As Node
    Dim selectedNode As Node
    Dim nameTreeview As String
On Error GoTo btChild_Click_error
    nameTreeview = Mid(MultiPage1.SelectedItem.Controls.Item(0).Name, 4)
    For Each onode In MultiPage1.SelectedItem.Controls.Item(0).Nodes
       If onode.Selected Then Exit For
    Next onode
    Set selectedNode = onode
    If onode.Selected Then
        Set onode = onode.Child.FirstSibling
            If onode.Tag <> selectedNode.Tag Then
                onode.Checked = selectedNode.Tag
                Call SaveNodecheck(nameTreeview, onode)
            End If
            onode.EnsureVisible
        While onode <> selectedNode.Child.LastSibling
            Set onode = onode.Next
            If onode.Tag <> selectedNode.Tag Then
                onode.Checked = selectedNode.Tag
                Call SaveNodecheck(nameTreeview, onode)
            End If
            onode.EnsureVisible
        Wend
    End If
btChild_Click_error:
    On Error GoTo 0

End Sub

'Proc|fffd|dure (initialement dans frmmain)
Sub SaveNodecheck(nTreeview As String, snode As Node)
    Select Case UCase(nTreeview)
        Case "MAN"
            Call TrvMan_NodeCheck(snode) 'Proc|fffd|dure g|fffd|n|fffd|rale
        Case "GRP"
            Call TrvGrp_NodeCheck(snode) 'Proc|fffd|dure g|fffd|n|fffd|rale
        Case "TAC"
            Call TrvTac_NodeCheck(snode) 'Proc|fffd|dure g|fffd|n|fffd|rale
        Case "MET"
            Call TrvMet_NodeCheck(snode) 'Proc|fffd|dure g|fffd|n|fffd|rale
        Case "RFI"
            Call TrvRFI_NodeCheck(snode) 'Proc|fffd|dure g|fffd|n|fffd|rale
        Case "ENS"
            Call TrvEns_NodeCheck(snode) 'Proc|fffd|dure g|fffd|n|fffd|rale
        Case "JUR"
            Call TrvJur_NodeCheck(snode) 'Proc|fffd|dure g|fffd|n|fffd|rale
        Case "IND"
            Call TrvInd_NodeCheck(snode) 'Proc|fffd|dure g|fffd|n|fffd|rale
        Case "PER"
            Call TrvPer_NodeCheck(snode) 'Proc|fffd|dure g|fffd|n|fffd|rale
        Case "CHO"
            Call TrvCho_NodeCheck(snode) 'Proc|fffd|dure sp|fffd|cifique
        Case "TCT"
            Call TrvTct_NodeCheck(snode) 'Proc|fffd|dure sp|fffd|cifique
        Case "CSF"
            Call TrvCsf_NodeCheck(snode) 'Proc|fffd|dure sp|fffd|cifique
    End Select
End Sub

' ****************************************************************************************************
' ************************************ USER INTERFACE FUNCTIONS ***************************
' ****************************************************************************************************

' Display Essbase info window
Private Sub BtnEssInfo_Click()
    frmEssInfo.Show
End Sub

' Modify Password
Private Sub btnPwd_Click()
   ConnectSheet Sheets(SHEET_CONTENT)
   frmUserPass.txPassOld = fChangePassword(Sheets(SHEET_CONTENT), Range("var_Server").Value, frmUserPass.txUser, frmUserPass.txPassOld)
   Disconnect Sheets(SHEET_CONTENT) 'Deconnexion
End Sub

' Lauch report generation in "View" mode
Private Sub BtnVisu_Click()
  GenRep "REPORT"
End Sub

' Lauch report generation in "Export" mode
Private Sub BtnExport_Click()
  GenRep "EXPORT"
End Sub

' Lauch report generation in "Print" mode
Private Sub BtnPrint_Click()
  GenRep "PRINT"
End Sub

' Quit application
Private Sub btnQuit_Click()
  ThisWorkbook.Close False
End Sub

' Display expanded elements
Private Sub btnExpand_Click()
Dim onode As Node
  
  SetModeMacro
  
  For Each onode In MultiPage1.SelectedItem.Controls.Item(0).Nodes
    If onode.Children = 0 And onode.Visible = False Then onode.EnsureVisible
  Next onode
  
  SetModeUser

End Sub

Private Sub Carrefour_Click()
    GoModeAdmin
End Sub

Private Sub Carrefour_Market_Click()
    GoModeAdmin
End Sub


' Restore treeview selection (XL bug: a treeview looses its selection if it's hidden)
Private Sub MultiPage1_Change()
Dim onode As Node
  On Error GoTo MultiPage1_Change_error
        
  application.ScreenUpdating = False
  For Each onode In MultiPage1.SelectedItem.Controls.Item(0).Nodes
    If onode.Visible Then
        onode.Checked = IIf(IsNumeric(onode.Tag), onode.Tag, False)
    End If
  Next onode
MultiPage1_Change_error:
    On Error GoTo 0
    application.ScreenUpdating = True
End Sub


Private Sub TrvMan_NodeCheck(ByVal onode As MSComctlLib.Node)

    ' MODIF 06/12/2004 - AHG
    ' Correction bug s|fffd|lection trop grande
    ' si Benchmark: noeud s|fffd|lectionn|fffd| = ACL, GRP, RGR, REG ou FRA
    ' si Analyse: pas la racine, un seul noeud, si en ligne avertissement si le zoom d|fffd|passe 300 noeuds
    ' MODIF 08/03/2005 - PSA
    ' si Analyse: racine s|fffd|lectionnable sauf si "TMAN"
    
    If Left(UCase(Range("var_application").Value), 2) = "CA" Then
        If Worksheets("param").Range("TypeRapport").Value = "Analyse" Then
    ' S|fffd|lection de la racine impossible
            If onode.Checked And (Left(UCase(onode.Text), 6) = "HMAN-1" Or Left(UCase(onode.Text), 6) = "HGRP-1") Then  '16102007 : UMA DCL - Report des modifs li|fffd|es |fffd| la Stab Lot 4
                RestrictAnalyseur frmMain.TrvMan.Nodes, onode
                MsgBox ("Veuillez s|fffd|lectionner un noeud diff|fffd|rent")
                Call DeselectionNoeud(onode, frmMain.TrvMan)
                RestrictAnalyseur frmMain.TrvMan.Nodes, onode
                Exit Sub
            End If
        End If
    End If
    
   If onode.Checked And Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 2).Value = "S" Then  '16102007 : UMA DCL - Report des modifs li|fffd|es |fffd| la Stab Lot 4
        If UCase(Left(onode.Text, 3)) <> "ACL" Then
            RestrictAnalyseur frmMain.TrvMan.Nodes, onode
            MsgBox "Les saisies se font uniquement sur le niveau ACL. Veuiller s|fffd|lectionner un ACL!", vbExclamation
            Call DeselectionNoeud(onode, frmMain.TrvMan)
            Exit Sub
        End If
    End If
    
    Select Case Worksheets("param").Range("TypeRapport").Value
    Case "Analyse", "ApprobPJ"
    ' RestrictAnalyseur: Ne permet qu'une s|fffd|lection
        RestrictAnalyseur frmMain.TrvMan.Nodes, onode
        ' S|fffd|lection de la racine impossible
        If onode.Parent Is Nothing And onode.Checked And Left(UCase(onode.Text), 4) = "TMAN" Then  '16102007 : UMA DCL - Report des modifs li|fffd|es |fffd| la Stab Lot 4
            RestrictAnalyseur frmMain.TrvMan.Nodes, onode
            MsgBox ("Veuillez s|fffd|lectionner un noeud diff|fffd|rent de la racine")
            Call DeselectionNoeud(onode, frmMain.TrvMan)
            Exit Sub
        ElseIf Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 2).Value = "L" Or Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 2).Value = "L1" Then
            Call NbLineRetrieve(onode, 2)
            RestrictAnalyseur frmMain.TrvMan.Nodes, onode
        End If
    
    Case "Benchmark"
        ' S|fffd|lections ACL, RGR, REG, SAT, EXP ou FRA possibles
        If onode.Checked And (Left(UCase(onode.Text), 3) <> "ACL" And Left(UCase(onode.Text), 3) <> "RGR" And Left(UCase(onode.Text), 3) <> "REG" And Left(UCase(onode.Text), 3) <> "SAT" And Left(UCase(onode.Text), 3) <> "EXP" And Left(UCase(onode.Text), 3) <> "FRA") Then  '16102007 : UMA DCL - Report des modifs li|fffd|es |fffd| la Stab Lot 4
            MsgBox ("Veuillez s|fffd|lectionner un noeud de type FRA, EXP, SAT, REG, RGR ou ACL")
            Call DeselectionNoeud(onode, frmMain.TrvMan)
            Exit Sub
        End If
    End Select

    ' Tag m|fffd|morise l'|fffd|tat du noeud pour |fffd|viter la perte d'info
    onode.Tag = onode.Checked
    Call ComputeChecked(onode, "MAN")
End Sub

Private Sub TrvGrp_NodeCheck(ByVal onode As MSComctlLib.Node)

    ' MODIF 06/12/2004 - AHG
    ' Correction bug s|fffd|lection trop grande
    ' si Benchmark: noeud s|fffd|lectionn|fffd| = ACL, GRP, RGR, REG ou FRA
    ' si Analyse: un seul noeud, si en ligne avertissement si le zoom d|fffd|passe 300 noeuds

    Select Case Worksheets("param").Range("TypeRapport").Value
    Case "Analyse"
        ' RestrictAnalyseur: Ne permet qu'une s|fffd|lection
        RestrictAnalyseur frmMain.TrvGrp.Nodes, onode
        If Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 3).Value = "L" Then
            Call NbLineRetrieve(onode, 3)
            RestrictAnalyseur frmMain.TrvGrp.Nodes, onode
        End If

    Case "Benchmark"
        ' S|fffd|lections ACL, RGR, REG, SAT, EXP ou FRA possibles
        If onode.Checked And (Left(UCase(onode.Text), 3) <> "ACL" And Left(UCase(onode.Text), 3) <> "RGR" And Left(UCase(onode.Text), 3) <> "REG" And Left(UCase(onode.Text), 3) <> "SAT" And Left(UCase(onode.Text), 3) <> "EXP" And Left(UCase(onode.Text), 3) <> "FRA") Then  '16102007 : UMA DCL - Report des modifs li|fffd|es |fffd| la Stab Lot 4
            MsgBox ("Veuillez s|fffd|lectionner un noeud de type FRA, EXP, SAT, REG, RGR ou ACL")
            Call DeselectionNoeud(onode, frmMain.TrvGrp)
            Exit Sub
        End If
    End Select
    
    ' Tag m|fffd|morise l'|fffd|tat du noeud pour |fffd|viter la perte d'info
    onode.Tag = onode.Checked
    Call ComputeChecked(onode, "GRP")

End Sub


Private Sub TrvTac_NodeCheck(ByVal onode As MSComctlLib.Node)
    
    ' MODIF 06/12/2004 - AHG
    ' Correction bug s|fffd|lection trop grande
    ' si Analyse: un seul noeud, si en ligne avertissement si le zoom d|fffd|passe 300 noeuds
    
    If Worksheets("param").Range("TypeRapport").Value = "Analyse" Then
        ' RestrictAnalyseur: Ne permet qu'une s|fffd|lection
        RestrictAnalyseur frmMain.TrvTac.Nodes, onode
        If Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 4).Value = "L" Then
            Call NbLineRetrieve(onode, 4)
            RestrictAnalyseur frmMain.TrvTac.Nodes, onode
        End If
    End If
    '16102007 : UMA DCL - Report des modifs li|fffd|es |fffd| la Stab Lot 4
    If Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 2).Value = "S" Then
        If UCase(Left(onode.Text, 4)) <> "TACL" And onode.Checked Then
            RestrictAnalyseur frmMain.TrvTac.Nodes, onode
            MsgBox "Les saisies se font uniquement sur le niveau le plus fin. Veuiller s|fffd|lectionner un Type d'ACL!", vbExclamation
            Call DeselectionNoeud(onode, frmMain.TrvTac)
            Exit Sub
        End If
    End If


    ' Tag m|fffd|morise l'|fffd|tat du noeud pour |fffd|viter la perte d'info
    onode.Tag = onode.Checked
    Call ComputeChecked(onode, "TAC")

End Sub

Private Sub TrvMet_NodeCheck(ByVal onode As MSComctlLib.Node)
    Dim reportNode As Node ', stype As String,
    Dim ActualBook As Workbook ', otargetBook As Workbook, codeIn As String)
    Dim nMET As Node
    Dim code As String
    Dim oDescNode As Node
    Dim oDescNb As Integer
    Dim i As Integer


    ' MODIF 06/12/2004 - AHG
    ' Correction bug s|fffd|lection trop grande
    ' si Analyse: pas la racine, un seul noeud, si en ligne avertissement si le zoom d|fffd|passe 300 noeuds
    ' MODIF 08/03/2005 - PSA
    ' si Analyse: racine s|fffd|lectionnable sauf si "TMET"
    
    If Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 2).Value = "S" Then
        If onode.Checked And UCase(Left(onode.Text, 3)) <> "MET" Then  '16102007 : UMA DCL - Report des modifs li|fffd|es |fffd| la Stab Lot 4
            RestrictAnalyseur frmMain.TrvMet.Nodes, onode
            MsgBox "Les saisies se font uniquement sur le niveau le plus fin. Veuiller s|fffd|lectionner un MET!", vbExclamation   '16102007 : UMA DCL - Report des modifs li|fffd|es |fffd| la Stab Lot 4
            Call DeselectionNoeud(onode, frmMain.TrvMet)
            Exit Sub
        End If
    End If
    
    If Left(UCase(Range("var_application").Value), 2) = "CA" Then
    ' S|fffd|lection de la racine impossible
        If onode.Checked And onode.Parent Is Nothing And Left(UCase(onode.Text), 4) = "TMET" Then  '16102007 : UMA DCL - Report des modifs li|fffd|es |fffd| la Stab Lot 4
            RestrictAnalyseur frmMain.TrvMet.Nodes, onode
            MsgBox ("Veuillez s|fffd|lectionner un noeud diff|fffd|rent de la racine")
            Call DeselectionNoeud(onode, frmMain.TrvMet)
            Exit Sub

        ' S|fffd|lection |fffd| confirmer si on s|fffd|lectionne un noeud haut dans la hi|fffd|rarchie
        ElseIf Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 5).Value = "L" Then
            Call NbLineRetrieve(onode, 5)
            RestrictAnalyseur frmMain.TrvMet.Nodes, onode
        End If
    
    
    Else
    If Worksheets("param").Range("TypeRapport").Value = "Analyse" Then
        ' RestrictAnalyseur: Ne permet qu'une s|fffd|lection
        RestrictAnalyseur frmMain.TrvMet.Nodes, onode
        ' S|fffd|lection de la racine impossible
        If onode.Checked And onode.Parent Is Nothing And Left(UCase(onode.Text), 4) = "TMET" Then  '16102007 : UMA DCL - Report des modifs li|fffd|es |fffd| la Stab Lot 4
            RestrictAnalyseur frmMain.TrvMet.Nodes, onode
            MsgBox ("Veuillez s|fffd|lectionner un noeud diff|fffd|rent de la racine")
            Call DeselectionNoeud(onode, frmMain.TrvMet)
            Exit Sub

        ' S|fffd|lection |fffd| confirmer si on s|fffd|lectionne un noeud haut dans la hi|fffd|rarchie
        ElseIf Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 5).Value = "L" Then
            Call NbLineRetrieve(onode, 5)
            RestrictAnalyseur frmMain.TrvMet.Nodes, onode
        End If
    End If
    End If
    
    
    ' Tag m|fffd|morise l'|fffd|tat du noeud pour |fffd|viter la perte d'info
    onode.Tag = onode.Checked
    Call ComputeChecked(onode, "MET")
End Sub

Private Sub TrvRFI_NodeCheck(ByVal onode As MSComctlLib.Node)
    
    ' MODIF 06/12/2004 - AHG
    ' Correction bug s|fffd|lection trop grande
    ' si Analyse: un seul noeud, si en ligne avertissement si le zoom d|fffd|passe 300 noeuds
    
    If Worksheets("param").Range("TypeRapport").Value = "Analyse" Then
        ' RestrictAnalyseur: 050315 Ne permet qu'une s|fffd|lection
        RestrictAnalyseur frmMain.TrvRFI.Nodes, onode
        ' S|fffd|lection de la racine impossible
        If onode.Checked And onode.Parent Is Nothing And Left(UCase(onode.Text), 4) = "TMET" Then '16102007 : UMA DCL - Report des modifs li|fffd|es |fffd| la Stab Lot 4
            RestrictAnalyseur frmMain.TrvRFI.Nodes, onode
            MsgBox ("Veuillez s|fffd|lectionner un noeud diff|fffd|rent de la racine")
            Call DeselectionNoeud(onode, frmMain.TrvRFI)
            Exit Sub

        ' S|fffd|lection |fffd| confirmer si on s|fffd|lectionne un noeud haut dans la hi|fffd|rarchie
        ElseIf Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 6).Value = "L" Then
            Call NbLineRetrieve(onode, 6)
            RestrictAnalyseur frmMain.TrvRFI.Nodes, onode
        End If
        
    End If



    ' Tag m|fffd|morise l'|fffd|tat du noeud pour |fffd|viter la perte d'info
    onode.Tag = onode.Checked
    Call ComputeChecked(onode, "RFI")

End Sub

Private Sub TrvEns_NodeCheck(ByVal onode As MSComctlLib.Node)
    
    ' MODIF 06/12/2004 - AHG
    ' Correction bug s|fffd|lection trop grande
    ' si Analyse: un seul noeud, si en ligne avertissement si le zoom d|fffd|passe 300 noeuds
    
    If Worksheets("param").Range("TypeRapport").Value = "Analyse" Then
        ' RestrictAnalyseur: Ne permet qu'une s|fffd|lection
        RestrictAnalyseur frmMain.TrvEns.Nodes, onode
        If Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 7).Value = "L" Then
            Call NbLineRetrieve(onode, 7)
            RestrictAnalyseur frmMain.TrvEns.Nodes, onode
        End If
    End If

    ' Tag m|fffd|morise l'|fffd|tat du noeud pour |fffd|viter la perte d'info
    onode.Tag = onode.Checked
    Call ComputeChecked(onode, "ENS")

End Sub

Private Sub TrvJur_NodeCheck(ByVal onode As MSComctlLib.Node)
    
    ' MODIF 06/12/2004 - AHG
    ' Correction bug s|fffd|lection trop grande
    ' si Analyse: un seul noeud, si en ligne avertissement si le zoom d|fffd|passe 300 noeuds
    
    If Worksheets("param").Range("TypeRapport").Value = "Analyse" Then
        ' RestrictAnalyseur: Ne permet qu'une s|fffd|lection
        RestrictAnalyseur frmMain.TrvJur.Nodes, onode
        If Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 8).Value = "L" Then
            Call NbLineRetrieve(onode, 8)
            RestrictAnalyseur frmMain.TrvJur.Nodes, onode
        End If
    End If

    ' Tag m|fffd|morise l'|fffd|tat du noeud pour |fffd|viter la perte d'info
    onode.Tag = onode.Checked
    Call ComputeChecked(onode, "JUR")

End Sub

Private Sub TrvInd_NodeCheck(ByVal onode As MSComctlLib.Node)
    
    ' MODIF 06/12/2004 - AHG
    ' Correction bug s|fffd|lection trop grande
    ' si Analyse: pas la racine, un seul noeud, si en ligne avertissement si le zoom d|fffd|passe 300 noeuds
    
    If Worksheets("param").Range("TypeRapport").Value = "Analyse" Then
        ' RestrictAnalyseur: Ne permet qu'une s|fffd|lection
        RestrictAnalyseur frmMain.TrvInd.Nodes, onode
        If onode.Checked And onode.Parent Is Nothing Then  '16102007 : UMA DCL - Report des modifs li|fffd|es |fffd| la Stab Lot 4
            RestrictAnalyseur frmMain.TrvInd.Nodes, onode
            MsgBox ("Veuillez s|fffd|lectionner un noeud diff|fffd|rent de la racine")
            Call DeselectionNoeud(onode, frmMain.TrvInd)
            Exit Sub

        ElseIf Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 9).Value = "L" Then
            RestrictAnalyseur frmMain.TrvInd.Nodes, onode
            Call NbLineRetrieve(onode, 9)
        End If
    End If
    
    ' Tag m|fffd|morise l'|fffd|tat du noeud pour |fffd|viter la perte d'info
    onode.Tag = onode.Checked
    Call ComputeChecked(onode, "IND")
    
End Sub
Private Sub TrvPer_NodeCheck(ByVal onode As MSComctlLib.Node)
    
    ' pour Caj: un seul noeud s|fffd|lectionnable pour la p|fffd|riode
    
    RestrictAnalyseur frmMain.TrvMet.Nodes, onode
        
      If onode.Checked And onode.Parent Is Nothing And Left(UCase(onode.Text), 7) = "HIE-SEM" Then  '16102007 : UMA DCL - Report des modifs li|fffd|es |fffd| la Stab Lot 4
        RestrictAnalyseur frmMain.TrvPer.Nodes, onode
        MsgBox ("Veuillez s|fffd|lectionner un noeud diff|fffd|rent de la racine")
        Call DeselectionNoeud(onode, frmMain.TrvPer)
        Exit Sub
    
    
    'Si au moins 1 rapport journalier a |fffd|t|fffd| cocher:
    'D|fffd|selectionne le noeud de l'onglet PER si diff|fffd|rent de jour
    
    ElseIf TypeDate = "Jour" Then
        If (Right(Left(UCase(onode.Text), 11), 4) <> "JOUR") Then
            RestrictAnalyseur frmMain.TrvPer.Nodes, onode
            MsgBox ("Vous avez s|fffd|lectionn|fffd| au moins un rapport journalier. Veuillez s|fffd|lectionner un jour")
            Call DeselectionNoeud(onode, frmMain.TrvPer)
         End If
    End If

    ' Tag m|fffd|morise l'|fffd|tat du noeud pour |fffd|viter la perte d'info
    onode.Tag = onode.Checked
    Call ComputeChecked(onode, "PER")

End Sub
Private Sub TrvCho_NodeCheck(ByVal onode As MSComctlLib.Node)

    ' MODIF 06/12/2004 - AHG
    ' Correction bug s|fffd|lection trop grande
    ' si Analyse: un seul noeud, si en ligne avertissement si le zoom d|fffd|passe 300 noeuds
    
    If Worksheets("param").Range("TypeRapport").Value = "Analyse" Then
        ' RestrictAnalyseur: Ne permet qu'une s|fffd|lection
        RestrictAnalyseur frmMain.TrvCho.Nodes, onode
        If Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 10).Value = "L" Then
            RestrictAnalyseur frmMain.TrvCho.Nodes, onode
            Call NbLineRetrieve(onode, 10)
        End If
    End If
    
    ' Tag m|fffd|morise l'|fffd|tat du noeud pour |fffd|viter la perte d'info
    onode.Tag = onode.Checked
    Call ComputeChecked(onode, "CHO")
    
End Sub

Private Sub TrvTct_NodeCheck(ByVal onode As MSComctlLib.Node)

    ' MODIF 06/12/2004 - AHG
    ' Correction bug s|fffd|lection trop grande
    ' si Analyse: un seul noeud, si en ligne avertissement si le zoom d|fffd|passe 300 noeuds
    
    If Worksheets("param").Range("TypeRapport").Value = "Analyse" Then
        ' RestrictAnalyseur: Ne permet qu'une s|fffd|lection
        RestrictAnalyseur frmMain.TrvTct.Nodes, onode
        If Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 11).Value = "L" Then
            RestrictAnalyseur frmMain.TrvTct.Nodes, onode
            Call NbLineRetrieve(onode, 11)
        End If
    End If
    
    ' Tag m|fffd|morise l'|fffd|tat du noeud pour |fffd|viter la perte d'info
    onode.Tag = onode.Checked
    Call ComputeChecked(onode, "TCT")
    
End Sub

Private Sub TrvCsf_NodeCheck(ByVal onode As MSComctlLib.Node)

    ' MODIF 06/12/2004 - AHG
    ' Correction bug s|fffd|lection trop grande
    ' si Analyse: un seul noeud, si en ligne avertissement si le zoom d|fffd|passe 300 noeuds
    
    If Worksheets("param").Range("TypeRapport").Value = "Analyse" Then
        ' RestrictAnalyseur: Ne permet qu'une s|fffd|lection
        RestrictAnalyseur frmMain.TrvCsf.Nodes, onode
        If Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 12).Value = "L" Then
            RestrictAnalyseur frmMain.TrvCsf.Nodes, onode
            Call NbLineRetrieve(onode, 12)
        End If
    End If
    
    ' Tag m|fffd|morise l'|fffd|tat du noeud pour |fffd|viter la perte d'info
    onode.Tag = onode.Checked
    Call ComputeChecked(onode, "CSF")
    
End Sub

' Deploy node state upon its children (in "Reports" treeview)
Private Sub TrvRap_NodeCheck(ByVal onode As MSComctlLib.Node)

Dim i As Integer
Dim oChildNode As Node
Dim snode As Node
Dim TabTreeView As Variant

    If Worksheets("param").Range("var_outil").Value = "Analyseur" Then
        RestrictAnalyseur frmMain.TrvRap.Nodes, onode
    End If

        ' Recherche axes |fffd| afficher
    Set TabTreeView = Worksheets("param").Range("tab_Treeview")

    Select Case Worksheets("param").Range("TypeRapport").Value
    'Si Analyse on impose 1 s|fffd|lection rapport
    Case "Analyse"
        If onode.Parent Is Nothing Then
            MsgBox "Veuillez s|fffd|lectionner un seul rapport"
            Call DeselectionNoeud(onode, frmMain.TrvRap)
            ' RestrictAnalyseur: Ne permet qu'une s|fffd|lection
            RestrictAnalyseur frmMain.TrvRap.Nodes, onode
        End If
        RestrictAnalyseur frmMain.TrvRap.Nodes, onode
        ' Et on d|fffd|coche automatiquement les noeuds s|fffd|lectionn|fffd|s de la dimension en ligne
        If Worksheets("param").Range("dimension").Value <> "" Then
            i = Worksheets("param").Range("dimension").Value
            If TabTreeView(3, i) <> "0" Then
                For Each snode In frmMain.MultiPage1.Pages.Item(i - 2).Controls.Item(0).Nodes
                    snode.Checked = False
                    snode.Tag = False
                Next snode
                TabTreeView(3, i) = 0
            End If
        End If
       
       End Select

    onode.Tag = onode.Checked
    
    ' S|fffd|lection des enfants
    If onode.Children > 0 Then
        Set oChildNode = onode.Child.FirstSibling
        For i = 1 To onode.Children
            oChildNode.Checked = onode.Checked
            oChildNode.Tag = onode.Tag
            Set oChildNode = oChildNode.Next
        Next i
    End If
    
    ' MAJ des treeview visibles
    For i = 2 To MAXVAL + 1
        TabTreeView(2, i).Value = "0"
    Next i
    
    'Pour CAJ
    'Test si rapport journalier -> JOUR
    TypeDate = ""
    i = 2
    For Each oChildNode In frmMain.TrvRap.Nodes
        If oChildNode.Tag Then
            If TabTreeView(oChildNode.index + 3, pPER).Value = "J" Then TypeDate = "Jour"
            'If TabTreeView(oChildNode.index + 3, pMET).Value = "c" Then
            'Worksheets("param").Range("TypeRapport").Value = "Analyse"
            'Worksheets("param").Range("Dimension").Value = i
            'End If
        End If
        Set oChildNode = oChildNode.Next
    i = i + 1
    Next oChildNode
    
    ' M|fffd|morisation du rapport si Benchmark - de la dimension en ligne si Analyseur
    Worksheets("param").Range("Groupe_Compar").Value = 0
    Worksheets("param").Range("TypeRapport").Value = 0
    For Each oChildNode In frmMain.TrvRap.Nodes
        If oChildNode.Tag Then
            Worksheets("param").Range("NumeroRapport").Value = oChildNode.index
            For i = 2 To MAXVAL + 1
                If TabTreeView(oChildNode.index + 3, i).Value <> "0" Then
                    TabTreeView(2, i).Value = "1"
                    If TabTreeView(oChildNode.index + 3, i).Value = "G" Then
                        Worksheets("param").Range("TypeRapport").Value = "Benchmark"
                        Worksheets("param").Range("Groupe_Compar").Value = 1
                    ElseIf TabTreeView(oChildNode.index + 3, i).Value = "L" Then
                        Worksheets("param").Range("TypeRapport").Value = "Analyse"
                        Worksheets("param").Range("Dimension").Value = i
                    ElseIf TabTreeView(oChildNode.index + 3, i).Value = "L1" Then
                        Worksheets("param").Range("TypeRapport").Value = "ApprobPJ"
                        Worksheets("param").Range("Dimension").Value = i
                        Worksheets("param").Range("Groupe_Compar").Value = 1
                    'ElseIf TabTreeView(oChildNode.index + 3, pMET).Value = "C" Then
                    '    Worksheets("param").Range("TypeRapport").Value = "Analyse"
                    '    Worksheets("param").Range("Dimension").Value = i
                    End If
                End If
            Next i
        End If
    Next oChildNode

    ' Si Benchmark on d|fffd|coche les |fffd|ventuels noeuds s|fffd|lectionn|fffd|s dans MAN d'un niveau sup|fffd|rieur |fffd| FRA
    Select Case Worksheets("param").Range("TypeRapport").Value
    Case "Benchmark", "ApprobPJ"
        For i = 0 To 1
            For Each snode In frmMain.MultiPage1.Pages.Item(i).Controls.Item(0).Nodes
                If (Left(UCase(snode.Text), 3) <> "ACL" And Left(UCase(snode.Text), 3) <> "RGR" And Left(UCase(snode.Text), 3) <> "REG" And Left(UCase(snode.Text), 3) <> "SAT" And Left(UCase(snode.Text), 3) <> "EXP" And Left(UCase(snode.Text), 3) <> "FRA") Then
                    snode.Checked = False
                    snode.Tag = False
                End If
            Next
        Next
        
        'Pr CAJ ne pas combin|fffd| le bench avec les C pMet
        If Left(UCase(Range("var_application").Value), 2) = "CA" Then
            If onode.Parent Is Nothing Then
                MsgBox "Veuillez s|fffd|lectionner un seul rapport"
                Call DeselectionNoeud(onode, frmMain.TrvRap)
                ' RestrictAnalyseur: Ne permet qu'une s|fffd|lection
                RestrictAnalyseur frmMain.TrvRap.Nodes, onode
            End If
            RestrictAnalyseur frmMain.TrvRap.Nodes, onode
            ' Et on d|fffd|coche automatiquement les noeuds s|fffd|lectionn|fffd|s de la dimension en ligne
            If Worksheets("param").Range("dimension").Value <> "" Then
                i = Worksheets("param").Range("dimension").Value
                If TabTreeView(3, i) <> "0" Then
                    For Each snode In frmMain.MultiPage1.Pages.Item(i - 2).Controls.Item(0).Nodes
                        snode.Checked = False
                        snode.Tag = False
                    Next snode
                    TabTreeView(3, i) = 0
                End If
            End If
        End If
        
    End Select
    
    For i = 2 To MAXVAL + 1
        MultiPage1(i - 2).Visible = IIf(TabTreeView(2, i).Value <> "0", True, False)
    Next i
    frmMain.MultiPage1.Value = 0

Exit Sub

End Sub

' Reset user selection for the active treeview
Private Sub btnClearNodes_Click()
    Dim onode As Node
    Dim TabTreeView As Variant
    Dim i As Integer
    
On Error GoTo btnClearNodes_Click_error
    ' remise |fffd| z|fffd|ro du compteur de selection
    Set TabTreeView = Worksheets("param").Range("tab_Treeview")
    For i = 2 To (MAXVAL + 1)
        If UCase(TabTreeView(1, i).Value) = _
            UCase(Mid((frmMain.MultiPage1.SelectedItem.Controls.Item(0).Name), 4)) Then
                TabTreeView(3, i).Value = 0
        End If
    Next i
    SetModeMacro
    For Each onode In frmMain.MultiPage1.SelectedItem.Controls.Item(0).Nodes
      onode.Checked = False
      onode.Tag = False
    Next onode

btnClearNodes_Click_error:
    On Error GoTo 0
    SetModeUser

End Sub

' Search an item in active treeview
Private Sub btnFind_Click()
   frmSearch.Show
End Sub


' ********************************************************
' ******************* CUSTOM METHODS ************
' ********************************************************

' Initialize form
Public Sub Init()
    Dim CurrentTreeview As TreeView
    Dim oSheet As Worksheet
    Dim currTreeview As TreeView
    Dim tabAxes As Variant
    Dim TabTreeView As Variant
    Dim i As Integer
    Dim i1 As Integer
    Dim j As Integer
    Dim currObject
    Dim oR1 As Range
    
'On Error GoTo Init_Err
    ' en r|fffd||fffd|l retrieve
    situTEST = False
    OrdreTriAsc = True 'Ordre de tri ascendant par d|fffd|faut
    
    SetModeMacro
  
    Set oR1 = Worksheets("param").Range("Tab_treeview")
    Set oR1 = Range(oR1.Cells(1, 1), oR1.End(xlDown))

    LimitNbRapport = oR1.Rows.Count - 3

    ' Populate Month Combo
    frmMain.nom_outil.Caption = Range("var_outil").Value & " - " & Range("var_application").Value
    frmMain.btChild.Visible = Not UCase(Range("var_outil").Value) = "ANALYSEUR" '050318 Btn cach|fffd| pour analyseur car une seule s|fffd|lection
    '050325 Selection automatique du logo
    If UCase(Mid$(Range("var_application").Value, 3, 2)) = "SU" Then
        frmMain.Carrefour_Market.Visible = True
        frmMain.Carrefour.Visible = False
    Else
        frmMain.Carrefour_Market.Visible = False
        frmMain.Carrefour.Visible = True
    End If
    SelectPeriodInit '040804 Initialisation des combo mois et ann|fffd|e par proc|fffd|dure
     
    ' Populate Reports Treeview
    frmMain.tvwInitReport
    
    ' initialisation des tables ptablib et ptabval
    pTabLib = Array("MAN", "GRP", "TAC", "MET", "RFI", "ENS", "JUR", "IND", "PER", "CHO", "TCT", "CSF")
    pTabVal = Array(pMan, pGRP, pTAC, pMET, pRFI, pENS, pJUR, pIND, pPER, pCHO, pTCT, pCSF)

'    axeVisible = "________"
    ' initialisation de la table des treeview visibles et nb de noeuds selectionn|fffd|s
    Set TabTreeView = Worksheets("param").Range("tab_Treeview")
    For i = 2 To (MAXVAL + 1)
        TabTreeView(2, i).Value = 0
        TabTreeView(3, i).Value = 0
    Next i
    '===========================================================
    '=    MISE A JOUR DES TREEVIEW UTILISES (propriete Visible)
    '===========================================================
    For i = 2 To (MAXVAL + 1)

      For i1 = 3 To LimitNbRapport + 3
        If (TabTreeView(i1, i).Value <> "0") Then
             TabTreeView(2, i).Value = "1"
             Exit For
        End If
      Next i1
    Next i
    '=========================================================
    
    ' chargement des treeview axes
    Set tabAxes = Worksheets("param").Range("tab_Axes")
    For i = 1 To MAXVAL
        If (tabAxes(i, 2).Value <> "" And TabTreeView(2, i + 1) = "1") Then
            For Each currObject In frmMain.Controls
                If UCase(currObject.Name) = "TRV" & tabAxes(i, 1).Value Then
                    Set oSheet = IniDimSheet(tabAxes(i, 1).Value, tabAxes(i, 2).Value, tabAxes(i, 8).Value) 'Le 3eme parametre d|fffd|finit la colonne IND de TAb_Axe
                    Set currTreeview = currObject
                    GetHierarchie oSheet, currTreeview, tabAxes(i, MAXVAL + 3).Value, tabAxes(i, MAXVAL + 5).Value
                    'GetHierarchie Worksheets(tabAxes(i, 1).Value), currTreeview, tabAxes(i, 12).Value, tabAxes(i, 13).Value
                End If
            Next currObject
        End If
    Next i
    frmMain.MultiPage1.Value = 0
  
    Exit Sub
 
Init_Err:
    
    MsgBox "Erreur lors de l'initialisation du formulaire", vbOKOnly, "Error", , vbError
    ThisWorkbook.Close False
    SetModeUser

End Sub


' Initialize Reports Treeview (from SHEET_CONTENT)
Sub tvwInitReport()
Dim tblReports  As Variant
Dim oRange, oRange2 As Range
Dim oTvwReport As TreeView
Dim onode As Node
Dim Max, i As Integer

    Set oTvwReport = frmMain.TrvRap
    oTvwReport.Nodes.Clear
    Set oRange = Sheets(SHEET_CONTENT).Range("A4")
    Set oRange = Range(oRange, oRange.End(xlDown))
' << HAA 20030126 : le tableau des rapports est constitu|fffd| des lignes de la feuille "contenu"
'                   avec les colonnes 1 |fffd| 13
'                   les colonnes 5 |fffd| 13 repr|fffd|sentent les onglets |fffd| faire apparaitre ainsi que
'                   le mode de gestion des selections pour chaque couple axe/rapport
'                   P : pour positionnement en page
'                   L : mise en ligne avec zoom axe
'                   G : mise en ligne avec recherche groupe de comparaison

    Set oRange = oRange.Resize(, 12)
' >> HAA 20030126
    tblReports = oRange.Value
    tblReports2 = tblReports
    Set onode = oTvwReport.Nodes.Add(, tvwChild, "N" & tblReports(1, 1), tblReports(1, 4))
    onode.Tag = False
    
    ProcessNode onode, oTvwReport, tblReports, 1

End Sub


Sub DeselectionNoeud(onode As Node, myTreeview As TreeView)

    onode.Checked = False
    myTreeview.Refresh
    onode.Tag = onode.Checked

End Sub


Attribute VB_Name = "frmSearch"
Attribute VB_Base = "0{586F71B4-CF25-400B-8966-6C7572B95347}{478B7563-0D73-4EC2-9133-36F5397E88D7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False























































Private ICurNodeIndex As Integer
Private Sub btnNext_Click()
  Dim iNodeIndex
  Dim oTrv As TreeView
  Dim onode As Node
On Error GoTo btnNext_Click_error

If txSearch.Value = "" Then Exit Sub
  Me.MousePointer = fmMousePointerAppStarting
  Set oTrv = frmMain.MultiPage1.SelectedItem.Controls.Item(0)
  If ICurNodeIndex <> 0 Then
    oTrv.Nodes(ICurNodeIndex).BackColor = vbWindowBackground
    oTrv.Nodes(ICurNodeIndex).ForeColor = vbWindowText
  End If
  
  For iNodeIndex = ICurNodeIndex + 1 To oTrv.Nodes.Count
    
    Set onode = oTrv.Nodes(iNodeIndex)
    If InStr(onode.Text, txSearch.Value) <> 0 Then
    
      onode.EnsureVisible
      onode.BackColor = vbHighlight
      onode.ForeColor = vbHighlightText
      ICurNodeIndex = iNodeIndex
      Exit For
    
    End If
        
  Next iNodeIndex
  
  Me.MousePointer = fmMousePointerDefault
  If iNodeIndex > oTrv.Nodes.Count Then
    ICurNodeIndex = 1
    MsgBox "Recherche termin|fffd|e."
  End If
btnNext_Click_error:
    On Error GoTo 0
    Me.MousePointer = fmMousePointerDefault

End Sub
Private Sub btnClose_Click()
  Unload Me
End Sub
Private Sub txSearch_Change()
Dim oTrv As TreeView
  
  If ICurNodeIndex <> 0 Then
    Set oTrv = frmMain.MultiPage1.SelectedItem.Controls.Item(0)
    oTrv.Nodes(ICurNodeIndex).BackColor = vbWindowBackground
    oTrv.Nodes(ICurNodeIndex).ForeColor = vbWindowText
    ICurNodeIndex = 1
  End If
End Sub
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
Dim oTrv As TreeView
  
  If ICurNodeIndex <> 0 Then
    Set oTrv = frmMain.MultiPage1.SelectedItem.Controls.Item(0)
    oTrv.Nodes(ICurNodeIndex).BackColor = vbWindowBackground
    oTrv.Nodes(ICurNodeIndex).ForeColor = vbWindowText
    ICurNodeIndex = 1
  End If
  
End Sub


Private Sub UserForm_Activate()
  'FindWindowA(vbNullString, Me.Caption), HWND_TOPMOST, 0, 0, 0, 0, SWP_NOMOVE Or SWP_NOSIZE
End Sub



Attribute VB_Name = "frmUserPass"
Attribute VB_Base = "0{0F9BE7A3-5BD0-450A-8CB5-B8622E9EA8E8}{66952302-DB66-4FD0-8209-B177716D7F28}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





















































'********************************************************************************************
' Code Formulaire frmEssInfo
'********************************************************************************************
' Historique versions :
'
'********************************************************************************************
Private Sub btnCancel_Click()
  On Error Resume Next
  Me.txUser = vbNullString
  Me.txPassOld = vbNullString
  Me.Hide
  application.Workbooks.Close
  Exit Sub
End Sub

Private Sub btnOK_Click()
  ' Cas de la connexion
  If txUser.Enabled Then
    If txPassOld.Text = "" Then
      Exit Sub
    Else
      Me.Hide
    End If
  
    txPassNew.Text = vbNullString
    txPassNewConf.Text = vbNullString
  
  ' Cas du changement de mot de passe
  Else
    If txPassOld.Text = txPassNew.Text Then
        MsgBox "L'ancien et le nouveau de passe sont identiques. Merci de saisir le nouveau mot de passe |fffd| nouveau.", vbCritical
    Else
        If txPassNew.Text <> txPassNewConf.Text Then
            MsgBox "Les mots de passe entr|fffd|s ne sont pas identiques. Merci de les saisir |fffd| nouveau.", vbCritical
        Else
            Me.Hide
            Exit Sub
            End If
        End If
        txPassNew.Text = vbNullString
        txPassNewConf.Text = vbNullString
    End If
End Sub


Private Sub UserForm_Activate()
    If txUser.Enabled Then
        btnOK.Top = 90
        btnCancel.Top = 90
        Me.Height = 130
    Else
        lbUser.Enabled = False
        txUser.Enabled = False
        lbPassOld.Enabled = False
        txPassOld.Enabled = False
        lbPassNew.Visible = True
        txPassNew.Visible = True
        lbPassNewConf.Visible = True
        txPassNewConf.Visible = True
        btnOK.Top = 138
        btnCancel.Top = 138
        Me.Height = 180
    End If
End Sub
Attribute VB_Name = "md0_Declare"
'*************************************************************************************
' D|fffd|claration variables globales
'*************************************************************************************
' Modules
' =======
' md0_Declare : D|fffd|claration globale des variables
' md0_DeclareEssbaseAPI : D|fffd|claration des fonctions Essbase
' md0_Declarexxxx : D|fffd|claration sp|fffd|cifique des variables
' md0_Office97 : Gestion des versions Office97 et ult|fffd|rieures
' md1_Essbase : Proc|fffd|dures Essbase connect, retrieve...
' md2_Analyseur : Proc|fffd|dures r|fffd|serv|fffd|es |fffd| l'analyseur
' md2_Select : Proc|fffd|dures de gestion des s|fffd|lection dans treeview
' md3_Toolbox : Proc|fffd|dures d'administration de l'outil
' md9_OldBnD : ancienne version outil B&D
' md9_Test_HAA : tests initiaux
'
'*************************************************************************************
' Mise |fffd| jour des anciennes versions automate & analyseur :
' =========================================================
' 1 D|fffd|placer la proc|fffd|dure locale LetIND de Au_GstRetrieve dans frmMain en public en activant la mise |fffd| jour de VAR_libIND
' 2 D|fffd|placer la d|fffd|claration des variables pxxx et MAXVAL de Au_GstRetrieve vers md0_Declarexxx
' 3 Lancer le module ImportVBModule pour importer tous les modules g|fffd|n|fffd|riques
' 4 remplacer la variable Maxrapports par LimitNbRapport
' 5 Remplacer procedures Trvxxx_Nodecheck de FrmMain par le code de NewTrvxxx_Nodecheck de md9_Toolbox
' 6 Supprimer procedure GenRep de frmmain (d|fffd|plac|fffd|e dans md2_Main depuis V040720)
' 7 Remplacer initialisation combo mois+annee de frmmain par appel |fffd| SelectPeriodInit de md2_Main (V040804)
' 8 Cr|fffd|er zone var_Envt dans param (IP serveur calcul|fffd|)
' 9 Debugger
' 10 Si modification importante, incr|fffd|menter la variable ToolVersion et lancer le module ExportVBmodule
'
'*************************************************************************************
Public Const ToolVersion = "V081106"

'081106: UMA DCL - Modification de la proc|fffd|dure Retrieve dans le module md1_Essbase
'071016: UMA DCL - Int|fffd|gration des modifications Stab lot 4 + Roll Over PM dans le moteur (suite RollOver CAJ 2008)
'070905: Adaptation moteur pour int|fffd|grateur CASU (Type de rapport S pour Type ACL). Suppression des messages de s|fffd|lection restrictive dans le cas d'une d|fffd|s|fffd|lection
'070827 : UMA DCL - Correction de la r|fffd|serve |fffd|mise dans PV Recette PMHY08 - 20070824-01(Analyseur) (option Filtre et Tri) - R|fffd|insertion des modifications apport|fffd|es pour le RollOver 2007 - module md2_Analyseur
'070503: TMA SID - Modification de la fonction CompteurNoeud (dans md2_Main) suite au probl|fffd|me d'affichage de la hi|fffd|rarchie soci|fffd|t|fffd| (impossibilit|fffd| de faire plusieurs s|fffd|lections "soci|fffd|t|fffd|")
'070313: TMA SID - Modification de la fonction Retrieve (dans md1_Essbase) pour suppression du contenu de l'onglet MAN |fffd| chaque ouverture de l'automate (en se connectant au cube).
'060928: TMA SID - Modification du placement du texte lors des tris
'060905: Correction format de date dans les rapports
'060627: Adaptation moteur pour automate CAJ. Cr|fffd|ation des types de rapport C Zoom en colonne,J s|fffd|lection jour, O Op|fffd|rations sp|fffd|ciales
'051202: D|fffd|placement de la macro GoModeAdmin de frmMain vers md3_Admin
'050826: Int|fffd|gration V050825 avec V050722 (correction affichage Satellites + tri impression)
'050825: Correction de l'affichage des rapports benchmarks pour toutes les s|fffd|lections FRA, EXP, SAT, REG, RGR, ACL (+correction affichage RGR de l'ACL d|fffd|j|fffd| signal|fffd| le 11/03/2005)
'        dans le cas des rapports Benchmark dans les proc|fffd|dures PopulateLineTemplate (rajout du niveau 3 : arri|fffd|re grand-p|fffd|re) et GetRelatives
'050823: Rajout expression "SAT" dans la Msgbox pour TrvGrp_NodeCheck et TrvMan_NodeCheck dans le cas des s|fffd|lections Benchmark
'050722: Correction impression des r|fffd|sultats: parcours des donn|fffd|es retrieve dans l'ordre r|fffd|el d'affichage lors de la
'        constitution du treeview (dans le module main, proc|fffd|dures get_H, gethierarchie et rajout fonction getnodelevel_max pour le calcul
'        du niveau maximum pour chaque onglet)
'050706: Correction limitation au mois en cours sur cube RA ou PM: prise en compte d'une seule valeur dans la liste d|fffd|roulante LstMM dan frmMain
'050519: Ajout de ROUNDDOWN sur le calcul de niveau de l'analyseur, suite |fffd| pb des espaces doubles dans le libell|fffd|
'050325: Limitation au mois en cours seul et choix de 4 ans pour cube RA, s|fffd|lection auto du logo Carrefour_Market ou Carrefour
'050318: BtChild de FrmMain cach|fffd| pour analyseur car une seule s|fffd|lection
'050315: Restriction s|fffd|lection total TMET dans Treeview RFI (pour cubes xxFR)
'050309: Ajout test sur valeur noeur racine pour permettre sa s|fffd|lection en acc|fffd|s filtr|fffd| uniquement
'        et modif pr|fffd|sentation texte intitul|fffd| dans filtreTri
'        et LetInd modifi|fffd| pour RHFR (appel LetCho au lieu de GenerateReport). LetCho, LetTct, LetCsf d|fffd|plac|fffd| de frmain vers md2_select
'        et module md0_Declarexxx limit|fffd| |fffd| d|fffd|claration Maxval (nb dimensions) car toutes autres variables d|fffd|clar|fffd|es dans md0_Declare
'050208: Dans CompteurNoeud le tri se fait sur 34 colonnes au lieu de 4 auparavant. Dans IniDimSheet on cherche dans l'onglet MAN les valeurs <> "#NoAccess" sur la 5|fffd| colonne et non la 2|fffd|
'050104: Modifications pour Benchmark dans GenerateReport et Trvxxx_NodeCheck
'041206: Modifications pour l'analyseur: s|fffd|lection selon le rapport s|fffd|lectionn|fffd| (ie la dimension en ligne), dans md2_Analyseur, frmMain
'041110: Possibilit|fffd|s de choix sur axe
'041022: Tri onglets gr|fffd|ce |fffd| proc|fffd|dure CompteurNoeud, TriOnglets et passage d'un argument CodeIn dans les LetXXX, d|fffd|finition var-noXXX, d|fffd|finition PlageIndex
'        et dans Trv_MAN et Trv_MET condition sur Analyseur (possibilit|fffd| de plusieurs choix sur MAN et MET au niveau le plus fin pour Automate)
'040920: Ajout test nb colonnes >256 avant suppression ligne des rapports Bench
'040909: Remplacement des zones nomm|fffd|es Zone_DynamicXXX par Zone_Dynamic dans template bench et analyseur
'040902: Indication onglet param avant mise |fffd| jour range "var_IND" et "var_libIND" par s|fffd|lection user (sinon plantage lors s|fffd|lection multiple)
'040804: Initialisation des Combobox mois et ann|fffd|e d|fffd|plac|fffd| dans proc|fffd|dure SelectPeriodInit (n|fffd|cessite zone nomm|fffd| var_MoisEnCours dans Param)

Dim lTemplate As Integer
Public situTEST As Boolean
Public TabTreeView As Variant ' table des treeview

Public pTabLib ' tables de correspondance nom var. pXXX <--> valeur, noms des Treeview=MAN,GRP,TAC...
Public pTabVal ' table des valeurs var. pXXX, valeurs des var.=pMAN,pGRP,pTAC...

' nombre maximum de rapports de l'outil
Public LimitNbRapport As Integer

Public Var_Analyseur As Integer
Public v_Classeur As String
Public v_Classeur_Cible As String
Public v_OK As Boolean

'Pour saisies, CAJ super
Public Var_Application As String
Public Var_Database As String
Public Var_Server As String
Public Var_User As String
Public Var_Password As String
Public test_envoi As Integer

Public OrdreTriAsc As Boolean
Public Code_Retour_Retrieve As Long

'Nom des onglets r|fffd|serv|fffd|s
Public Const SHEET_CONTENT = "Contenu"
Public Const SHEET_MAIN = "Main"
Public Const SHEET_PARAM = "Param"

'Mots de passe
Public Const AUTOMATEPASSWORD = "carref01"
Public Const ADMIN_PASSWORD = "carref01"
Public Const VBA_PASSWORD = "version01"

'Nom des zones r|fffd|serv|fffd|es
Public Const ZoneColHide = "ColHide"
Public Const ZoneLigHide = "LigHide"

Public Const ERR_REGISTER_OK = &H0
Public Const SWP_NOSIZE = &H1
Public Const SWP_NOMOVE = &H2
Public Const HWND_TOPMOST = -1
Public Const HWND_NOTOPMOST = -2
Public tblReports2  As Variant

'Variable pour CAJ
Public TypeDate As String

' position axe dans la table d'utilisation des axes (variable axeVisible) pour chaque rapport
Public Const pMan       As Byte = 2
Public Const pGRP       As Byte = 3
Public Const pTAC       As Byte = 4
Public Const pMET       As Byte = 5
Public Const pRFI       As Byte = 6
Public Const pENS       As Byte = 7
Public Const pJUR       As Byte = 8
Public Const pIND       As Byte = 9
Public Const pPER       As Byte = 10 '060323 ajout|fffd| LP CAJ
Public Const pCHO       As Byte = 11 '050308 ajout|fffd|
Public Const pTCT       As Byte = 12 '050308 ajout|fffd|
Public Const pCSF       As Byte = 13 '050308 ajout|fffd|



Attribute VB_Name = "md0_DeclareEssbaseAPI"
' Copyright 1992-1999 Hyperion Solutions Corporation. All Rights Reserved.

' RESTRICTED RIGHTS LEGEND:

' Use, duplication, or disclosure by the Government is subject to
' restrictions as set forth in subparagraph (c)(1)(ii) of the Rights
' in Technical Data and Computer Software clause at DFARS 252.227-7013,
' or in the Commercial Computer Software Restricted Rights clause at
' FAR 52.227-19, as applicable.

' Hyperion Solutions Corporation
' 1344 Crossman Avenue, Sunnyvale, CA  94089  USA
'
'
'     /*********************************************************\
'     *                                                                                       *
'     *   ESSXLVBA.TXT - Essbase Excel VBA Include File.        *
'     *                                                                                       *
'     *   For Essbase Release 6                                                    *
'     *                                                                                       *
'     \*********************************************************/
'


' The following prototypes declare the Visual Basic menu-equivalent functions

Declare Function EssMenuVRetrieve Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVKeepOnly Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVZoomIn Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVZoomOut Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVPivot Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVWizard Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVQueryDesigner Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVFlashBack Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVOptions Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVMemberSelection Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVCurrencyReport Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVCascade Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVRetrieveLock Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVLock Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVUnlock Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVSend Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVCalculation Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVConnect Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVDisconnect Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVDatalessNav Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVLinkedObjects Lib "ESSEXCLN.XLL" () As Long
Declare Function EssMenuVRemoveOnly Lib "ESSEXCLN.XLL" () As Long

' The following prototype declares the VBA-specific functions

Declare Function EssVGetHctxFromSheet Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant) As Long
Declare Function EssVGetMemberInfo Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal mbrName As Variant, ByVal action As Variant, ByVal aliases As Variant) As Variant
Declare Function EssVFreeMemberInfo Lib "ESSEXCLN.XLL" (ByRef memInfo As Variant) As Long
Declare Function EssVFreeDataPoint Lib "ESSEXCLN.XLL" (ByRef Info As Variant) As Long

' The following constants are suitable as actions
' for the EssVGetMemberInfo function

Public Const EssChildLevel = 1
Public Const EssDescendentLevel = 2
Public Const EssBottomLevel = 3
Public Const EssSiblingLevel = 4
Public Const EssSameLevel = 5
Public Const EssSameGenerationLevel = 6
Public Const EssCalculationLevel = 7
Public Const EssParentLevel = 8
Public Const EssDimensionLevel = 9

' The following prototypes declare the Visual Basic
' Extended Spreadsheet macro-equivalent functions

Declare Function EssVCalculate Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal calcScript As Variant, ByVal synchronous As Variant) As Long
Declare Function EssVCancelCalc Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant) As Long
Declare Function EssVCascade Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal Range As Variant, ByVal selection As Variant, ByVal path As Variant, ByVal prefix As Variant, ByVal suffix As Variant, ByVal level As Variant, ByVal openFile As Variant, ByVal copyFormats As Variant, ByVal overwrite As Variant, ByVal listFile As Variant) As Long
Declare Function EssVCell Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ParamArray memberList() As Variant) As Variant
Declare Function EssVConnect Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal userName As Variant, ByVal Password As Variant, ByVal server As Variant, ByVal application As Variant, ByVal database As Variant) As Long
Declare Function EssVDisconnect Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant) As Long
Declare Function EssVFlashBack Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant) As Long
Declare Function EssVGetCurrency Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant) As Variant
Declare Function EssVGetDataPoint Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal cell As Variant, ByVal Range As Variant, ByVal aliases As Variant) As Variant
Declare Function EssVGetGlobalOption Lib "ESSEXCLN.XLL" (ByVal Item As Long) As Variant
Declare Function EssVGetSheetOption Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal Item As Variant) As Variant
Declare Function EssVKeepOnly Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal Range As Variant, ByVal selection As Variant) As Long
Declare Function EssVRemoveOnly Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal Range As Variant, ByVal selection As Variant) As Long
Declare Function EssVPivot Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal Range As Variant, ByVal startPoint As Variant, ByVal endPoint As Variant) As Long
Declare Function EssVRetrieve Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal Range As Variant, ByVal lockFlag As Variant) As Long
Declare Function EssVSendData Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal Range As Variant) As Long
Declare Function EssVSetCurrency Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal currencyIdentifier As Variant) As Long
Declare Function EssVSetGlobalOption Lib "ESSEXCLN.XLL" (ByVal Item As Long, ByVal globalOption As Variant) As Long
Declare Function EssVSetSheetOption Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal Item As Variant, ByVal sheetOption As Variant) As Long
Declare Function EssVUnlock Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant) As Long
Declare Function EssVZoomIn Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal Range As Variant, ByVal selection As Variant, ByVal level As Variant, ByVal across As Variant) As Long
Declare Function EssVZoomOut Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal Range As Variant, ByVal selection As Variant) As Long
Declare Function EssVSetMenu Lib "ESSEXCLN.XLL" (ByVal setMenu As Boolean) As Long
Declare Function EssVGetStyle Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal styleType As Variant, ByVal dimName As Variant, ByVal Item As Long) As Variant
Declare Function EssVSetStyle Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal styleType As Variant, ByVal dimName As Variant, ByVal Item As Long, ByVal newValue As Variant) As Long
Declare Function EssVLoginSetPassword Lib "ESSEXCLN.XLL" (ByVal sheetName As Variant, ByVal newPassword As Variant, ByVal oldPassword As Variant, ByVal server As Variant, ByVal userName As Variant) As Long
Declare Function EssVSetSKUMouse Lib "ESSEXCLN.XLL" (ByVal fSKUWithMouse As Variant) As Long

Attribute VB_Name = "md0_DeclareTBSU"
' nombre maximum de variables pXXX
Public Const MAXVAL = 9

Attribute VB_Name = "md0_Office97"
Option Explicit

'' ************************************************************
'' *   Module : mdOfficeCompatibilty                          *
'' *            Declaration des fonctions VBA v6              *
'' *                 Pour version 97 d'Excel                  *
'' *                                                          *
'' * Attention ce code est libre de tous droits               *
'' * Source VB2TheMax.Com                                     *
'' ************************************************************
''
'' ==> Peut |fffd|tre supprim|fffd| totalement si utilis|fffd| exclusivement sur Office 2000 & +
'' ____________________________________________________________

' Lecture d'une cha|fffd|ne jusqu'au d|fffd|limiteur indiqu|fffd|
' NB : utilis|fffd| dans le split, mais non pr|fffd|sent dans Office 2000
Function ReadUntil(ByRef sIn As String, sDelim As String, Optional bCompare As Long = 0) As String

Dim nPos As String

' position du d|fffd|limiteur
nPos = InStr(1, sIn, sDelim, bCompare)

' S'il y en a un renvoie la valeur correcte
If nPos > 0 Then

  ReadUntil = Left(sIn, nPos - 1)

  sIn = Mid(sIn, nPos + Len(sDelim))

End If

End Function

' Ne pas toucher aux instructions pr|fffd|c|fffd|d|fffd|es de #
#If VBA6 Then
  ' Pas de d|fffd|claration n|fffd|cessaire pour Office 2000 & +
#Else

' Fonction Replace pour Office 97
' Remplace un/plusieurs |fffd|l|fffd|ment(s) d'une cha|fffd|ne par un autre
Function Replace(source As Variant, Find As String, ReplaceStr As String, _
    Optional ByVal Start As Long = 1, Optional Count As Long = -1, _
    Optional Compare As Long = 0) As String

Dim sResult As String

  Dim findLen As Long
  Dim replaceLen As Long
  Dim index As Long
  Dim counter As Long
    
  findLen = Len(Find)
  replaceLen = Len(ReplaceStr)
  
  ' Pour |fffd|viter une boucle sans fin
  If findLen = 0 Then Err.Raise 5
    
  If Start < 1 Then Start = 1
  
  index = Start
    
  ' Recup|fffd|re la source dans une variable
  sResult = source
    
  Do

    index = InStr(index, sResult, Find, Compare)
    If index = 0 Then Exit Do

    If findLen = replaceLen Then
      ' Les cha|fffd|nes sont |fffd|quivalentes, on peut remplacer plus rapidement
      Mid$(sResult, index, findLen) = ReplaceStr
    Else
      ' sinon on concat|fffd|ne
      sResult = Left$(sResult, index - 1) & ReplaceStr & Mid$(sResult, _
                      index + findLen)
    End If
        
    ' D|fffd|place notre pointeur au del|fffd| de la chiane que l'on vient de remplacer
    index = index + replaceLen
    ' Inremente le compteur d'occurences
    counter = counter + 1
  
  Loop Until counter = Count
    
  If Start > 1 Then sResult = Mid$(sResult, Start)


Replace = sResult

End Function



' Fonction Filter pour Office 97
'
' Le tableau d'origine est modifi|fffd| c'est pourquoi
' c'est une procedure

Sub Filter(arr As Variant, ByVal Search As String, Optional ByVal Include As _
    Boolean, Optional ByVal CompareMethod As Long = 0)
    
  Dim index As Long
  Dim Count As Long
    
  Count = LBound(arr) - 1
    
  For index = LBound(arr) To UBound(arr)
    If (InStr(1, arr(index), Search, CompareMethod) > 0) = Include Then
            
      ' Cet |fffd|l|fffd|ment est inclus
      Count = Count + 1
            
      If index <> Count Then
                
        ' Copie les donn|fffd|es si n|fffd|cessaire
        arr(Count) = arr(index)
      
      End If
      
    End If
    
  Next index
    
  ' Suppression des |fffd|l|fffd|ments superflus
  If Count < UBound(arr) Then
    ReDim Preserve arr(LBound(arr) To Count) As String
  End If
    
End Sub

' Fonction Join pour Office 97
'
Function Join(source As Variant, Optional _
              sDelim As String = " ") As String

  Dim sOut As String, iC As Integer

  On Error GoTo errh:

  For iC = LBound(source) To UBound(source) - 1

    sOut = sOut & source(iC) & sDelim

  Next iC

  sOut = sOut & source(iC)
  Join = sOut

  Exit Function

errh:

  Err.Raise Err.Number

End Function

' Fonction Split pour Office 97
'
Function Split(ByVal sIn As String, Optional sDelim As _
               String, Optional nLimit As Long = -1, Optional bCompare As Long = 0) As Variant

  Dim sRead As String, sOut As Variant, nC As Integer

  If sDelim = "" Then

    Split = sIn

  End If

  sRead = ReadUntil(sIn, sDelim, bCompare)

  ReDim sOut(0) As String
          
  Do While sRead <> ""

    ReDim Preserve sOut(nC)

    sOut(nC) = sRead
    nC = nC + 1

    If nLimit <> -1 And nC >= nLimit Then Exit Do

    sRead = ReadUntil(sIn, sDelim)

  Loop

  ReDim Preserve sOut(nC)

  sOut(nC) = sIn
  Split = sOut

End Function

' Fonction StrReverse pour Office 97
'
Function StrReverse(ByVal sIn As String) As String

  Dim nC As Integer, sOut As String

  For nC = Len(sIn) To 1 Step -1

    sOut = sOut & Mid(sIn, nC, 1)

  Next nC

  StrReverse = sOut

End Function

' Fonction InstrRev pour Office 97
'
Function InStrRev(ByVal sIn As String, sFind As String, _
                  Optional nStart As Long = 1, Optional bCompare As Long = 0) As Long

  Dim nPos As Long

  sIn = StrReverse(sIn)
  sFind = StrReverse(sFind)
  nPos = InStr(nStart, sIn, sFind, bCompare)

  If nPos = 0 Then
    InStrRev = 0
  Else
    InStrRev = Len(sIn) - nPos - Len(sFind) + 2
  End If

End Function
 


#End If
Attribute VB_Name = "md1_Essbase"
'***************************************************************************************
' Proc|fffd|dures Essbase
'***************************************************************************************

Option Explicit
Public Declare Function FindWindowA Lib "User32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long

'Sub Retrieve(osheet As Worksheet, oRange As range)

'  Dim lValue As Long
  
  ' Simple Retrieve
  ' SendKeys "{ESC}"
'  lValue = EssVRetrieve(fGetSheetName(osheet), oRange, 1)
  ' DoEvents
  
'  If lValue = 1020010 Then ' Flashback en cas de soucis
    
    ' SendKeys "{ESC}"
'    lValue = EssVFlashBack(fGetSheetName(osheet))
    ' DoEvents
  
'  ElseIf lValue <> 0 Then
    
    ' Err.Raise vbObjectError + 1, "Retrieve", "Impossible d'effectuer le Retrieve depuis le serveur, erreur : " & Hex(lValue)'
'    MsgBox ("Retrieve impossible sur " & osheet.Name)
'  Else
  
  
'  End If
'
'End Sub
'====================== fonction ajout|fffd|e =========================
Sub Retrieve(oSheet As Worksheet, oRange As Range)

  Dim lValue As Long
  Dim sNameSheet As String
  Dim iRow, iCol As Integer
  
  Code_Retour_Retrieve = 0
  ' Simple Retrieve
  ' SendKeys "{ESC}"
  sNameSheet = Mid(fGetSheetName(oSheet), InStr(1, fGetSheetName(oSheet), "]") + 1)
  
  ' Modif du 13/03/2007 : suppression du contenu de l'onglet MAN |fffd| chaque ouverture de l'automate (en se connectant au cube)
  ' Cet onglet qui ne se rafraichissait pas automatiquement |fffd| l'initialisation emp|fffd|chait d'effectuer des modifications sur l'automate
  ' UMA DCL - Modif du 06/11/2008 : la suppression ne doit pas se faire sur l'automate RAFR
  If sNameSheet = "MAN" And Left(Range("var_Application").Value, 2) <> "RA" Then
    Sheets(sNameSheet).Cells.Delete Shift:=xlUp
  End If
  
  lValue = EssVRetrieve(fGetSheetName(oSheet), oRange, 1)
  ' DoEvents
  Code_Retour_Retrieve = lValue
  '
  If lValue = 1020010 Then
    
    MsgBox ("Pas de donn|fffd|es pour cette s|fffd|lection ")
    Code_Retour_Retrieve = lValue
    '
  
  'code erreur dont 1020010 Then ' Flashback en cas de soucis
  ElseIf lValue <> 0 Then
    
    ' Err.Raise vbObjectError + 1, "Retrieve", "Impossible d'effectuer le Retrieve depuis le serveur, erreur : " & Hex(lValue)
    MsgBox ("Retrieve impossible sur " & oSheet.Name)
     ' SendKeys "{ESC}"
     lValue = EssVFlashBack(fGetSheetName(oSheet))
     DoEvents

  End If

End Sub
'=================================================================

Sub ZoomIn(oSheet As Worksheet, oRange As Range, ocell As Range, _
    iLevel As Integer, bAcross As Boolean)
    Dim lValue As Long
    ' SendKeys "{ESC}"
    lValue = EssVZoomIn(fGetSheetName(oSheet), oRange, ocell, iLevel, bAcross)
    ' DoEvents
  
    If lValue = 1020010 Then ' Flashback en cas de soucis
        ' SendKeys "{ESC}"
        lValue = EssVFlashBack(fGetSheetName(oSheet))
        ' DoEvents
    ElseIf lValue <> 0 Then
        Err.Raise vbObjectError + 1, "ZoomIn", "Impossible d'effectuer le Retrieve depuis le serveur, erreur : " & Hex(lValue)
    End If
End Sub

Sub ZoomInSheet_AllDesc(oSheet As Worksheet, oRange As Range, ocell As Range)
    If Not fIsSheetConnected(oSheet) Then ConnectSheet oSheet   ' On se connecte
    ZoomIn oSheet, oRange, ocell, EssDescendentLevel, False     ' On r|fffd|cup|fffd|re tous les descendants
    Disconnect oSheet                                           ' On se d|fffd|connecte
End Sub

Sub ZoomOut(oSheet As Worksheet, oRange As Range, ocell As Range)
    Dim lValue As Long
    ' SendKeys "{ESC}"
    lValue = EssVZoomOut(fGetSheetName(oSheet), oRange, ocell)
    ' DoEvents
    If lValue = 1020010 Then ' Flashback en cas de soucis
        ' SendKeys "{ESC}"
        lValue = EssVFlashBack(fGetSheetName(oSheet))
        ' DoEvents
    ElseIf lValue <> 0 Then
        Err.Raise vbObjectError + 1, "Retrieve", "Impossible d'effectuer le Retrieve depuis le serveur, erreur : " & Hex(lValue)
    End If
End Sub

Sub Send(oSheet As Worksheet, oRange As Range)
  Dim lValue As Long
  
  ' Lock des donn|fffd|es
  ' SendKeys "{ESC}"
  lValue = EssVRetrieve(fGetSheetName(oSheet), oRange, 3)
  ' DoEvents
  
  ' Send des donn|fffd|es
  ' SendKeys "{ESC}"
  lValue = EssVSendData(fGetSheetName(oSheet), oRange)
  ' DoEvents

End Sub

Sub Connect(oSheet As Worksheet, _
            sServer As String, _
            sApplication As String, _
            sDatabase As String, _
            ByRef sUser As String, _
            ByRef sPassword As String)
    Dim lValue As Long
  
    ' Pas de param|fffd|tres de connexion : Utilisateur et mot de passe
    If sUser = "" Or sPassword = "" Then
        GetUserPassword sServer, sUser, sPassword
    End If
  
    Do
        ' SendKeys "{ESC}"
        lValue = EssVConnect(fGetSheetName(oSheet), sUser, sPassword, sServer, sApplication, sDatabase)
        ' DoEvents
  
        Select Case lValue
        Case 1          ' La fen|fffd|tre de connexion est apparue ???
            GetUserPassword sServer, sUser, sPassword
        Case 1051093    'Mot de passe expir|fffd|
            MsgBox "Votre mot de passe est expir|fffd|"
            Unload frmUserPass
            With frmUserPass
                .txUser.Enabled = False
                .txUser.Text = sUser
                .txPassOld.Text = sPassword
            End With
            frmUserPass.txPassOld = fChangePassword(Sheets(SHEET_CONTENT), Range("var_Server").Value, frmUserPass.txUser, frmUserPass.txPassOld)
            sPassword = frmUserPass.txPassOld
        Case Is > 1 ' Erreur Essbase |fffd| d|fffd|tailler
            GetUserPassword sServer, sUser, sPassword
        Case Is < 0
            MsgBox "Erreur locale de l'Add-In"
            ThisWorkbook.Close False
        End Select
    Loop Until sUser = "" Or lValue = 0

End Sub

Sub ConnectSheet(oSheet As Worksheet)
  Dim sServer As String
  Dim sApplication As String
  Dim sDatabase As String
  Dim sUser As String
  Dim sPassword As String
  
  ' R|fffd|cup|fffd|re les variables du classeur
  '=============================================================
  '= MODIF 11-03-2004
  '=============================================================
  ThisWorkbook.Activate
  sServer = Range("var_Server").Value
  sApplication = Range("var_Application").Value
  sDatabase = Range("var_Database").Value
  
  On Error Resume Next
  sUser = frmUserPass.txUser
  sPassword = frmUserPass.txPassOld
  On Error GoTo 0
  
  Connect oSheet, sServer, sApplication, sDatabase, sUser, sPassword  ' Connecte la feuille
End Sub

Sub RetrieveSheet(oSheet As Worksheet)
  Dim oRange As Range
  
  ' Connecte la feuille si  on connect|fffd|e
  If Not fIsSheetConnected(oSheet) Then ConnectSheet oSheet
  ' Pour chaque zone, effectue un Retrieve
  For Each oRange In fGetZones(oSheet)
    oRange.Cells(1, 1).Value = Left(Range("var_outil").Value, 3) & Trim(oSheet.Name)
    Retrieve oSheet, oRange
  Next oRange
  Disconnect oSheet   ' D|fffd|connecte la feuille
End Sub

Sub Disconnect(oSheet As Worksheet)
  Dim lValue As Long
  
  ' SendKeys "{ESC}"
  lValue = EssVDisconnect(fGetSheetName(oSheet))
  ' DoEvents
  If lValue <> 0 Then _
     Err.Raise vbObjectError + 1, "D|fffd|connexion du serveur", "Un probl|fffd|me est survenu pendant la d|fffd|connexion, erreur : " & Hex(lValue)
End Sub

Function fGetSheetName(oSheet As Worksheet) As String
  fGetSheetName = "[" & oSheet.Parent.Name & "]" & oSheet.Name
End Function

' Changement du mot de passe de l'utilisateur
' --> Renvoi le nouveau mot de passe de celui-ci
Function fChangePassword(oSheet As Worksheet, sServer As String, sUser As String, sOldPassword) As String
  Dim sNewPassword As String
  Dim lValue As Long
  Dim lTitre As String
  
  lTitre = "Changement du mot de passe sur le serveur " & sServer 'Titre des fen|fffd|tres
  ' Chargement de la bo|fffd|te de dialogue
  Load frmUserPass
  With frmUserPass
     .txUser = sUser
     .txPassOld = sOldPassword
     .Caption = lTitre
     .txPassNew = vbNullString
     .txPassNewConf = vbNullString
     .txUser.Enabled = False
  End With
  
  SetModeUser
  frmUserPass.Show
  
  sNewPassword = frmUserPass.txPassNew  ' R|fffd|cup|fffd|re les informations
  If sNewPassword = "" Then
     MsgBox "Changement annul|fffd|", , lTitre
     fChangePassword = sOldPassword.Value
     Exit Function
  End If
  
  ' Envoi des informations au serveur Essbase
 ' ConnectSheet oSheet
  
  lValue = EssVLoginSetPassword(fGetSheetName(oSheet), sNewPassword, sOldPassword.Value, sServer, sUser)
  If lValue <> 0 Then
     MsgBox "Le serveur a renvoy|fffd| une erreur " & Hex(lValue), , lTitre
     fChangePassword = sOldPassword.Value   ' Renvoi l'anicen mot de passe
  Else
     MsgBox "Changement correctement effectu|fffd|", , lTitre
     fChangePassword = sNewPassword   ' Renvoi le mot de passe valid|fffd|
  End If
  SetModeUser
End Function

' R|fffd|cup|fffd|re le nom d'utilisateur et le mot de passe
' --> Passe user & pwd en ref
Sub GetUserPassword(sServer As String, ByRef sUser As String, ByRef sPassword As String)
  Dim sNewPassword As String
  
  ' Chargement de la bo|fffd|te de dialogue
  Load frmUserPass
  
  frmUserPass.txUser = sUser
  frmUserPass.txPassOld = sPassword
  frmUserPass.Caption = "Connexion |fffd| un serveur Essbase : " & sServer
  
  frmUserPass.lbPassOld = "Mot de passe : "
  frmUserPass.lbComment = "Veuillez saisir un nom d'utilisateur et un mot de passe, pour acceder |fffd| ce serveur"
  frmUserPass.txUser.Enabled = True
  
  SetModeUser
  
  frmUserPass.Show
  
  SetModeMacro
  
  ' R|fffd|cup|fffd|re les informations
  sPassword = frmUserPass.txPassOld
  sUser = frmUserPass.txUser
  
  If Worksheets("param").Range("var_outil").Value = "Integrateur" Then
    Worksheets("param").Range("Var_Password").Value = sPassword
    Worksheets("param").Range("Var_User").Value = sUser
  End If
  
  If sPassword = "" Or sUser = "" Then
    SetModeUser
    Err.Raise vbObjectError + 1, "Param|fffd|tres de connexion", "L'utilisateur n'a pas saisie d'indentifiant ou de mot de passe"
  End If
  
End Sub

Function fIsSheetConnected(oSheet As Worksheet) As Boolean
  fIsSheetConnected = (EssVGetHctxFromSheet(fGetSheetName(oSheet)) <> 0)
End Function


Sub SendSheet(oSheet As Worksheet)
    Dim oRange As Range
    If Not fIsSheetConnected(oSheet) Then ConnectSheet oSheet ' Connecte la feuille si  on connect|fffd|e
    ' Pour chaque zone, effectue un Retrieve
    For Each oRange In fGetZones(oSheet)
        Send oSheet, oRange
    Next oRange
    Disconnect oSheet  ' D|fffd|connecte la feuille
End Sub

Attribute VB_Name = "md2_Analyseur"
Option Explicit
' ligne courante utilis|fffd|e dans le chargement de la zone dynamique des analyseurs
Dim lTemplate As Integer
Type ReportInfo
     oTemplate As String
     oZoom As String
     oAxe As String
End Type

' <<HAA 20/01/2004>>  Traitement des mises en ligne dans template
Sub PrepareLineZooming(reportNode As Node, myNode As Node, myTreeview As TreeView, myAxeSheet As Worksheet, ActualBook As Workbook, otargetBook As Workbook)
'    Dim myLevel As Integer
    Dim fLine As Integer
    Dim l As Integer
    Dim C As Integer
    Dim cmax As Integer
    Dim lmax As Integer
    Dim Onglet As Worksheet
    Dim myPage
    Dim i As Integer
    Dim fLine_Bas As Integer
    Dim cMin As Integer
    
    ' BUG VBA : le treeview de r|fffd|f|fffd|rence doit |fffd|tre visible
    For Each myPage In frmMain.MultiPage1.Pages
        If UCase(Mid(myPage.Name, 5)) = myAxeSheet.Name Then
            frmMain.MultiPage1.Value = myPage.index
        End If
    Next myPage
  
    ' recherche axe |fffd| afficher
    Set Onglet = ActualBook.Worksheets(Mid(reportNode.Key, 2))
    application.ScreenUpdating = False

    '==================== MODIF JM RIQUIER 13/02/2004 ==========================
    Dim zone_supp As String
    zone_supp = Onglet.Name
    If Left(UCase(zone_supp), 1) = "N" Then zone_supp = Right(zone_supp, Len(zone_supp) - 1)
          
    Call ProtectReport(Onglet, False)
           
    Onglet.Visible = xlSheetVisible
    Onglet.Activate
    
    '-------- MODIF JM RIQUIER ----- cellule(0,0) = titre du rapport -------
    
    ' effacer contenu
    Onglet.Range("Zone_clear1").ClearContents
    ' effacer format pr|fffd|c|fffd|dent
    l = Onglet.Range("Zone_clear1").Row
    C = Onglet.Range("Zone_clear1").Column
    lmax = l + Onglet.Range("Zone_clear1").Rows.Count - 1
    cmax = C + Onglet.Range("Zone_clear1").Columns.Count - 1
    Onglet.Range(Cells(l + 1, 1), Cells(lmax, cmax)).ClearFormats
    ' r|fffd|duction |fffd| une seule ligne de la zone variable
    Call RedimZone(Onglet, "Zone_retrieve1", Onglet.Range("Zone_dynamic").Row)
    Call RedimZone(Onglet, "Zone_clear1", Onglet.Range("Zone_dynamic").Row)
    
    Onglet.Range("Zone_clear1").ClearContents       ' efface zone de dynamic
    fLine = Onglet.Range("Zone_dynamic").Row    ' premi|fffd|re ligne dynamique
    lTemplate = fLine
    
    ' remplissage colonnes  par rapport |fffd| la zone Zone_dynamic cMin
    '  -1 : vrai si ligne vide en valeur
    '   0 : zone de retrieve pour la selection
    '  +1 : niveau
    cMin = Range("Zone_dynamic").Column
    ReportLineHeading Onglet, lTemplate, cMin, ExtractAlias(myNode.Text), myNode.Text, 0
   
    ' remplissage avec les enfants
    lTemplate = lTemplate + 1
    Call PopulateLineTemplate(myNode, Onglet, myTreeview)
    
    fLine_Bas = lTemplate
    lTemplate = lTemplate - 1
    If (fLine_Bas = l + 1) Then
        lTemplate = lTemplate + 1
        fLine_Bas = lTemplate + 1
    End If
    '------------------ copie format derni|fffd|re ligne precedente ------
    '------------------ sur derni|fffd|re ligne actuelle -----------------
    Onglet.Range(Cells(lmax + 1, 1), Cells(lmax + 1, cmax + 1)).Copy
    Onglet.Range(Cells(fLine_Bas, 1), Cells(fLine_Bas, cmax)).PasteSpecial xlPasteFormats, xlPasteSpecialOperationNone
    Onglet.Range(Cells(fLine_Bas + 1, 1), Cells(5000, cmax)).ClearFormats 'Effacement des formats des lignes suivantes
    '------------------ copie format ---------------------------------
'    Onglet.Range(Cells(l, 1), Cells(l, cMax + 1)).Copy
'    Onglet.Range(Cells(l + 1, 1), Cells(fLine_Bas - 1, cMax + 1)).PasteSpecial xlPasteFormats, xlPasteSpecialOperationNone
    'Si + de 1000 lignes, copie par bloc de 1000 lignes pour |fffd|viter bug "selection trop grande"
    If fLine_Bas > 1000 Then
        For i = 0 To Int(fLine_Bas / 1000) - 1
            Onglet.Range(Cells(l, 1), Cells(l, cmax + 1)).Copy
            Onglet.Range(Cells(l + i * 1000 + 1, 1), Cells(l + 1000 * (i + 1), cmax + 1)).PasteSpecial xlPasteFormats, xlPasteSpecialOperationNone
        Next
        Onglet.Range(Cells(l, 1), Cells(l, cmax + 1)).Copy
        Onglet.Range(Cells(l + 1000 * i, 1), Cells(fLine_Bas - 1, cmax + 1)).PasteSpecial xlPasteFormats, xlPasteSpecialOperationNone
    Else
        Onglet.Range(Cells(l, 1), Cells(l, cmax + 1)).Copy
        Onglet.Range(Cells(l + 1, 1), Cells(fLine_Bas - 1, cmax + 1)).PasteSpecial xlPasteFormats, xlPasteSpecialOperationNone
    End If
    
    ' mise |fffd| jour Zone_Retrieve1, Zone_clear1 et Zone_d_impression
    Call RedimZone(Onglet, "Zone_retrieve1", lTemplate)
    Call RedimZone(Onglet, "Zone_clear1", lTemplate)
    Call RedimZone(Onglet, "Zone_d_impression", lTemplate + 2)

Exit Sub

End Sub

' <<HAA 20/01/2004>>  Traitement des mises en ligne dans template
Sub PrepareGroupZooming(ByRef reportNode As Node, ByRef currNode As Node, myAxeSheet As Worksheet, ActualBook As Workbook, otargetBook As Workbook)

    Dim Onglet As Worksheet
    Dim ZoomNode1 As Node
    Dim ZoomNode2 As Node
    Dim myPage
    Dim i As Integer
    Dim cmax As Integer
    Dim lmin As Integer
    Dim lmax As Integer
    Dim fLine1 As Integer
    Dim fLine2 As Integer
    Dim cMin As Integer
    Dim zone_supp As String
    
    application.ScreenUpdating = False
    ' BUG VBA : le treeview de r|fffd|f|fffd|rence doit |fffd|tre visible
    For Each myPage In frmMain.MultiPage1.Pages
        If UCase(Mid(myPage.Name, 5)) = myAxeSheet.Name Then
            frmMain.MultiPage1.Value = myPage.index
        End If
    Next myPage
    application.ScreenUpdating = False
    
    '============================================
    '=========== MODIF JM RIQUIER 15/02/2004 ===========
    '============================================
    Set Onglet = ActualBook.Worksheets(Mid(reportNode.Key, 2))

    zone_supp = Onglet.Name
    If Left(UCase(zone_supp), 1) = "N" Then zone_supp = Right(zone_supp, Len(zone_supp) - 1)
    Call ProtectReport(Onglet, False)
    Onglet.Visible = xlSheetVisible
    Onglet.Activate
    
    ' M|fffd|morisation derni|fffd|re ligne et colonne zone
    lmin = Onglet.Range("Zone_clear1").Row
    lmax = lmin + Onglet.Range("Zone_clear1").Rows.Count - 1
    cmax = Onglet.Range("Zone_clear1").Column + Onglet.Range("Zone_clear1").Columns.Count - 1
    Onglet.Range("Zone_clear1").ClearContents
    ' Des 2 anciens tableaux on ne garde que les 2 premi|fffd|res lignes du 1er, et les 2 derni|fffd|res du 2|fffd|me
    If lmax - lmin > 3 Then Onglet.Range(Cells(lmin + 2, 1), Cells(lmax - 2, cmax)).Delete xlShiftUp
    ' R|fffd|duction |fffd| une seule ligne de la zone variable
    Call RedimZone(Onglet, "Zone_retrieve1", lmin + 3)
    Call RedimZone(Onglet, "Zone_clear1", lmin + 3)
    ' M|fffd|morisation premi|fffd|re ligne dynamique
    fLine1 = lmin
    lTemplate = fLine1

    ' Copie le format de Zone_clear1 juste en-dessous, pour le 2|fffd|me tableau
    Onglet.Range(Cells(lmin - 1, 1), Cells(lmin + Onglet.Range("Zone_clear1").Rows.Count - 1, cmax)).Copy
    Onglet.Range(Cells(lmin + Onglet.Range("Zone_clear1").Rows.Count, 1), Cells(lmin + Onglet.Range("Zone_clear1").Rows.Count + 4, cmax)).PasteSpecial xlPasteFormats, xlPasteSpecialOperationNone

    ' Noeud |fffd| partir duquel on doit zoomer
    If Range("nogrp1").Value <> "0" Then Set ZoomNode1 = frmMain.TrvMan.Nodes(Range("nogrp1").Value)
    If Range("nogrp2").Value <> "0" Then Set ZoomNode2 = frmMain.TrvMan.Nodes(Range("nogrp2").Value)

    ' Peuple le 1er Tableau
    cMin = Range("Zone_retrieve1").Column
    Onglet.Cells(fLine1 - 1, 2).Value = Worksheets("Param").Range("Titre1").Value
    Onglet.Cells(fLine1 - 1, cMin + 1).Value = 0
    Onglet.Cells(fLine1 - 1, cMin).Formula = "=0"
    If Range("nogrp1").Value <> "0" Then
        ' On affiche le titre et on va |fffd| la ligne
        ReportLineHeading Onglet, lTemplate, cMin, Range("libgrp1").Value, ZoomNode1.Text, 1
        lTemplate = lTemplate + 1
        Call PopulateLineTemplate(ZoomNode1, Onglet, frmMain.TrvMan, fLine1, Range("NiveauZoom1").Value)
        ' Cas o|fffd| l'on n'a rien dans le tableau, ajout d'une ligne pour |fffd|viter la perte du format
        ReportLineHeading Onglet, lTemplate, cMin, Range("libgrp1").Value, ZoomNode1.Text, 1
        lTemplate = lTemplate + 2
        fLine2 = lTemplate
    ' Si premier groupe non existant, on laisse le 1er tableau vide et on passe au suivant
    ElseIf Range("nogrp1").Value = "0" Then
        lTemplate = lTemplate + 5
        fLine2 = lTemplate
    End If

    ' Peuple le 2|fffd|me tableau
    If Range("nogrp2").Value <> "0" Then
        Onglet.Cells(fLine2 - 1, 2).Value = Worksheets("Param").Range("Titre2").Value
        Onglet.Cells(fLine2 - 1, cMin + 1).Value = 0
        Onglet.Cells(fLine2 - 1, cMin).Formula = "=0"
        ' On affiche le titre et on va |fffd| la ligne
        ReportLineHeading Onglet, lTemplate, cMin, Range("libgrp2").Value + "(" + Range("grp2_sec").Value + ")", ZoomNode2.Text, 1
        lTemplate = lTemplate + 1
        Call PopulateLineTemplate(ZoomNode2, Onglet, frmMain.TrvMan, fLine2, Range("NiveauZoom2").Value)
        ' Cas o|fffd| l'on n'a rien dans le tableau, ajout d'une ligne pour |fffd|viter la perte du format
        ReportLineHeading Onglet, lTemplate, cMin, Range("libgrp2").Value, Range("grp2_sec").Value, 1
    End If
    
    ' MAJ Zone_Retrieve1 et Zone_clear1
    Call RedimZone(Onglet, "Zone_retrieve1", lTemplate)
    Call RedimZone(Onglet, "Zone_clear1", lTemplate)
    Call RedimZone(Onglet, "Zone_d_impression", lTemplate)


End Sub

' Proc|fffd|dure qui peuple les template: appel|fffd|e par PrepareLineZooming ou PrepareGroupZooming
' Arguments: noeud s|fffd|lectionn|fffd|, onglet de rapport, treeview de la dimension, titre |fffd|ventuel dans le cas PrepareGroupZooming, niveau de zoom
Sub PopulateLineTemplate(ByRef parentNode As Node, Onglet As Worksheet, myTreeview As TreeView, Optional TitleLine As Integer, Optional lowLevel As String)
    
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim ZoomNode As Node
    Dim ZoomNode2 As Node
    Dim snode As Node
    Dim snode2 As Node
    Dim myMember As String
    Dim myLevel As Integer
    Dim zColMin As Integer
    Dim zColMax As Integer
    Dim ZoomNodesNumber As Integer
    Dim ChildNumber As Integer

    zColMin = Range("zone_retrieve1").Column
    zColMax = zColMin + Range("zone_retrieve1").Columns.Count

' Si PrepareGroupZooming appelle PopulateLineTemplate: insertion d'autant de lignes qu'il y a de parentNode.children
' Zoom sur les fils: on boucle sur les enfants
If (lowLevel <> "" And lowLevel <> "2" And lowLevel <> "3") Then
    If lowLevel = 0 Then
        Set ZoomNode = parentNode
        ZoomNodesNumber = 1
        Range(Cells(TitleLine + 2, 1), Cells(TitleLine + 2, zColMax)).Delete xlShiftUp
    ElseIf lowLevel = 1 Then
        Set ZoomNode = parentNode.Child.FirstSibling
        ZoomNodesNumber = parentNode.Children
        If ZoomNodesNumber > 3 Then
            Range(Cells(TitleLine + 2, 1), Cells(TitleLine + 2 + (ZoomNodesNumber - 3), zColMax)).Insert Shift:=xlDown
        ElseIf ZoomNodesNumber = 1 Then
            Range(Cells(TitleLine + 2, 1), Cells(TitleLine + 2, zColMax)).Delete xlShiftUp
        End If
    End If
    ' Remplissage col libell|fffd|
    For i = 1 To ZoomNodesNumber
        ReportLineHeading Onglet, lTemplate, zColMin, ExtractAlias(ZoomNode.Text), ZoomNode.Text, 2
        lTemplate = lTemplate + 1
        ' On passe au noeud suivant
        If (i <> ZoomNodesNumber) Then
            Set ZoomNode = ZoomNode.Next
        End If
    Next i

' Zoom sur les petits-fils:on boucle sur les enfants, et les enfants des enfants
ElseIf lowLevel = "2" Then
    Set snode = parentNode.Child
    For j = 1 To parentNode.Children
        ZoomNodesNumber = ZoomNodesNumber + snode.Children
    If j <> parentNode.Children Then
        Set snode = snode.Next
    End If
    Next j
    If ZoomNodesNumber > 3 Then
        Range(Cells(TitleLine + 2, 1), Cells(TitleLine + 2 + (ZoomNodesNumber - 3), zColMax)).Insert Shift:=xlDown
    ElseIf ZoomNodesNumber = 1 Then
        Range(Cells(TitleLine + 2, 1), Cells(TitleLine + 2, zColMax)).Delete xlShiftUp
    End If
    
    ' Remplissage col libell|fffd|
    Set snode = parentNode.Child
    For j = 1 To parentNode.Children
        Set ZoomNode = snode.Child.FirstSibling
        For i = 1 To snode.Children
        ReportLineHeading Onglet, lTemplate, zColMin, ExtractAlias(ZoomNode.Text), ZoomNode.Text, 2
        lTemplate = lTemplate + 1
        ' On passe au noeud suivant
        If (i <> ZoomNodesNumber) Then
            Set ZoomNode = ZoomNode.Next
        End If
        Next i
    If (j <> parentNode.Children) Then
        Set snode = snode.Next
    End If
    Next j

' Zoom sur les petits petits-fils:on boucle sur les enfants, les enfants des enfants , et les enfants des
' petits fils
ElseIf lowLevel = "3" Then
     Set snode = parentNode.Child
     For i = 1 To parentNode.Children
     Set snode2 = snode.Child
      For j = 1 To snode.Children
      ZoomNodesNumber = ZoomNodesNumber + snode2.Children
       If j <> snode.Children Then
         Set snode2 = snode2.Next
       End If
      Next j
     If i <> parentNode.Children Then
      Set snode = snode.Next
     End If
     Next i
          
    If ZoomNodesNumber > 3 Then
        Range(Cells(TitleLine + 2, 1), Cells(TitleLine + 2 + (ZoomNodesNumber - 3), zColMax)).Insert Shift:=xlDown
    ElseIf ZoomNodesNumber = 1 Then
        Range(Cells(TitleLine + 2, 1), Cells(TitleLine + 2, zColMax)).Delete xlShiftUp
    End If
    
    ' Remplissage col libell|fffd|
    Set snode = parentNode.Child
    For j = 1 To parentNode.Children
        Set snode2 = snode.Child
        For i = 1 To snode.Children
        Set ZoomNode2 = snode2.Child.FirstSibling
          For k = 1 To snode2.Children
          ReportLineHeading Onglet, lTemplate, zColMin, ExtractAlias(ZoomNode2.Text), ZoomNode2.Text, 2
          lTemplate = lTemplate + 1
         ' On passe au noeud suivant
          If (k <> ZoomNodesNumber) Then
            Set ZoomNode2 = ZoomNode2.Next
          End If
          Next k
        If (i <> snode.Children) Then
          Set snode2 = snode2.Next
        End If
        Next i
                
    If (j <> parentNode.Children) Then
        Set snode = snode.Next
    End If
    Next j



ElseIf lowLevel = "" Then
    If parentNode.Children > 0 Then
        Set ZoomNode = parentNode.Child.FirstSibling
    Else
        Set ZoomNode = parentNode
    End If
    ZoomNodesNumber = parentNode.Children
    For i = 1 To parentNode.Children
        ' remplissage col libell|fffd|
        ReportLineHeading Onglet, lTemplate, zColMin, ExtractAlias(ZoomNode.Text), ZoomNode.Text, 0
        lTemplate = lTemplate + 1
        ' si le noeud a des enfants appel recursif
        If (ZoomNode.Children > 0) Then
            Call PopulateLineTemplate(ZoomNode, Onglet, myTreeview)
        End If
        ' on passe au noeud suivant
        If (i <> parentNode.Children) Then
            Set ZoomNode = ZoomNode.Next
        End If
    Next i

End If

End Sub

'-------------------------------------------------------------------------
' Proc|fffd|dure de groupage
Sub MiseEnForme(Onglet As Worksheet, zone_supp As String, ActualBook As Workbook, otargetBook As Workbook)
    Dim l As Integer
    Dim oRange As Range
    Dim oCol As Integer
    
    On Error GoTo err_MiseEnForme
    If Onglet.Names("Zone_dynamic").index = 0 Then Exit Sub
    If Onglet.Names("Zone_clear1").index = 0 Then Exit Sub
       
    ' Groupage des lignes
    '========================== EN PLUS =================================
    Set oRange = Onglet.Range("Zone_clear1")
    oCol = Onglet.Range("Zone_retrieve1").Column + 1
    '========================== FIN MODIF =================================
        
    ' indentation max
    Call HideSelection(Onglet, False)
    For l = application.WorksheetFunction.Max(oRange.Columns(oCol)) To 1 Step -1
         oRange.Columns(oCol).AutoFilter Field:=1, Criteria1:=">" & LTrim(Str(l)), Operator:=xlAnd
         Call NewGroup(oRange.SpecialCells(xlCellTypeVisible))
         oRange.Rows(1).Ungroup
         oRange.Columns(oCol).AutoFilter
    Next l
   
    oRange.Worksheet.Outline.SummaryRow = xlSummaryAbove
Exit Sub

err_MiseEnForme:
   MsgBox ("Erreur dans la procedure MiseEnForme")
   Exit Sub

End Sub

'Proc|fffd|dure de restriction de la s|fffd|lection |fffd| un seul membre
Sub RestrictAnalyseur(ByRef myNodes As Nodes, selectedNode As Node)
    
    Dim ONode1 As Node
    For Each ONode1 In myNodes
        If IsNumeric(ONode1.Tag) Then
            If ((ONode1.Checked = True) And (ONode1.Text <> selectedNode.Text)) Then
                ONode1.Checked = False
                ONode1.Tag = ONode1.Checked
            End If
        End If
    Next ONode1

End Sub

Function SizeSelection(ByRef onode As Node, myTreeview As TreeView) As Boolean
Dim testNode As Node

    ' Renvoie True si on est |fffd| un niveau 2 ou 3 dans la hi|fffd|rarchie, False sinon
    If onode.Parent.Parent Is Nothing Then
        SizeSelection = True
    Else
        Set testNode = onode.Parent.Parent
        If testNode.Parent Is Nothing Then
            SizeSelection = True
        Else
            SizeSelection = False
        End If
    End If
    
End Function

' Calcule le nombre de noeud en-dessous de celui s|fffd|lectionn|fffd|: s'il est >300, avertissement et possibilit|fffd| de continuer ou d|fffd|s|fffd|lectionner
Sub NbLineRetrieve(ByVal onode As Node, i As Integer)

    If NbDescendants(onode) > 300 Then
        Dim Confirmation As Integer
        Confirmation = MsgBox("Le nombre de lignes |fffd| interroger est: " & NbDescendants(onode) & Chr(10) & "La s|fffd|lection peut ralentir la restitution" & Chr(10) & "Voulez vous continuer?", vbYesNo + 256, "Veuillez patienter...")
        If Confirmation = 6 Then
            Exit Sub
        ElseIf Confirmation = 7 Then
            onode.Checked = False
            onode.Tag = onode.Checked
            Worksheets("param").Range("Tab_Treeview").Cells(3, i).Value = 0
        End If
    End If

End Sub

Function ReportInfo(ByRef onode As Node) As ReportInfo
    Dim R As ReportInfo
    R.oAxe = ""
    R.oTemplate = ""
    R.oZoom = ""

    If InStr(1, onode.Key, "!") > 0 Then
        R.oAxe = Mid(onode.Key, InStr(1, onode.Key, "!") + 1)
        R.oTemplate = Mid(onode.Key, 2, InStr(1, onode.Key, "!") - 2)
    End If
    ReportInfo = R
End Function

' Remplissage Ent|fffd|te de ligne en mode analyseur et mise en ligne
' Arguments pass|fffd|s: feuille de rapport dans laquelle on travaille, ligne et colonne o|fffd| l'on affiche, nom et code affich|fffd|s, titre dans le cas PrepareGroupZooming
Sub ReportLineHeading(oSheet As Worksheet, oLine As Integer, oCol As Integer, oLabel As String, oCode As String, Optional IndiceIndentation As Integer)
        
        'Code du membre dans 1|fffd|re colonne Zone_Retrieve
        oSheet.Cells(oLine, oCol).Value = oCode
    If IndiceIndentation = 1 Then
        ' Noeud de la 1|fffd|re ligne est fix|fffd| |fffd| niveau 1
        oSheet.Cells(oLine, oCol + 1).Formula = "=1"
        'Libell|fffd| en colonne B
        oSheet.Cells(oLine, 2).Value = oLabel
    ElseIf IndiceIndentation = 2 Then
        ' Noeuds suivants: on cherche leur niveau relatif |fffd| celui de la 1|fffd|re ligne
        oSheet.Cells(oLine, oCol + 1).Formula = "=ROUNDDOWN((LEN(" + oSheet.Cells(oLine, oCol).Address + ") - LEN(TRIM(" + oSheet.Cells(oLine, oCol).Address + ")))/ 5 ,0)+ 1"
        'Libell|fffd| en colonne B
        oSheet.Cells(oLine, 2).Value = "     " + oLabel
    ElseIf IndiceIndentation = 0 Then
        ' On cherche le niveau des noeuds
        oSheet.Cells(oLine, oCol + 1).Formula = "=ROUNDDOWN((LEN(" + oSheet.Cells(oLine, oCol).Address + ") - LEN(TRIM(" + oSheet.Cells(oLine, oCol).Address + ")))/ 5,0) + 1"
        'Libell|fffd| en colonne B
        oSheet.Cells(oLine, 2).Formula = "=REPLACE(CONCATENATE(SUBSTITUTE(REPT(""    c"", " + oSheet.Cells(oLine, oCol + 1).Address + "), ""c"","" ""), """ + oLabel + """),1,5,"""")"
    End If
    
End Sub

Sub FiltreTri()
'=============================================================
'    PROCEDURE : |fffd|v|fffd|nementielle si clic sur bouton
'    ROLE      : cr|fffd|e un double de la feuille
'=============================================================
  Dim oObj As Object
  Dim oSheet As Worksheet
  Dim oRange As Range
  Dim ind_x, ind_Y As Integer
  Dim debut As Integer
  Dim ztexte As String
  Dim i As Integer
  
  '--------------- Evenement clic sur bouton Filtre te tri --------------
  '--------------- on cree une 2i|fffd|me feuile -----------------------------
  Set oRange = ActiveSheet.Range("zone_retrieve1")
  ind_x = ActiveCell.Row - oRange.Rows(1).Row + 1
  ind_Y = ActiveCell.Column - oRange.Columns(1).Column + 1

  'PCN : 01/04/205 : Ajout du cas pas de donn|fffd|e (ActiveSheet.Range("zone_clear1").Rows.Count = 1)
  If ind_x < 1 Or ind_x > oRange.Rows.Count Or application.IsText(ActiveCell.Value) Or ActiveSheet.Range("zone_clear1").Rows.Count = 1 Then
  MsgBox "Le tri est impossible car il n'y a pas de donn|fffd|es pour la s|fffd|lection!"
  Exit Sub
  End If
  
  'Memorisation des couleurs des cellules de la ligne
  Dim oColor() As Variant
  ReDim oColor(oRange.Columns.Count)
  For i = 0 To oRange.Columns.Count - 1
     oColor(i) = oRange.Cells(ind_x, i + 1).Interior.ColorIndex
  Next
  oRange.Rows(ind_x).Interior.ColorIndex = 6
  oRange.Columns(ind_Y).Interior.ColorIndex = 6

  OrdreTriAsc = IIf(Range("b3").Value = 2, False, True)
  ztexte = " par ordre " & IIf(OrdreTriAsc, "", "d|fffd|") & "croissant des membres de m|fffd|me niveau que """ & LTrim(oRange.Cells(ind_x, -2).Value) & """"

  If Not MsgBox("Voulez-vous filtrer et trier" + ztexte + " ?", vbYesNo) = vbYes Then
  
  oRange.Cells(ind_x, -2).Select
  
     'Reinitialisation des couleurs  des cellules de la ligne
     For i = 0 To oRange.Columns.Count - 1
       oRange.Cells(ind_x, i + 1).Interior.ColorIndex = oColor(i)
     Next
     oRange.Columns(ind_Y).Interior.ColorIndex = xlNone
     Exit Sub
  End If
  application.ScreenUpdating = False
  application.DisplayAlerts = False
  
  'Reinitialisation des couleurs  des cellules de la ligne
  For i = 0 To oRange.Columns.Count - 1
     oRange.Cells(ind_x, i + 1).Interior.ColorIndex = oColor(i)
  Next
  oRange.Columns(ind_Y).Interior.ColorIndex = xlNone

  ActiveSheet.Copy After:=Worksheets(Worksheets.Count)
  Set oSheet = ActiveSheet
  
  ' Redimensionnement de la zone a traiter de 3 colonnes vers la gauche pour inclure les titres de ligne
  Set oRange = oSheet.Range("zone_retrieve1")
  debut = oRange.Cells(1, -2).End(xlDown).Row - oRange.Row
  oRange.Rows(debut + 1).EntireRow.Insert
  Set oRange = oRange.Offset(debut, -3).Resize(oRange.Rows.Count - debut, oRange.Columns.Count + 3)
  ind_Y = ind_Y + 3
  ind_x = ind_x - debut + 1
  
  'Degroupage
  HideSelection oSheet, False
  oRange.Columns(ind_Y).Interior.ColorIndex = 6
  oRange.Rows.Ungroup
  oRange.Rows.ClearOutline
  
  'Filtre des lignes ayant meme niveau
  oRange.AutoFilter Field:=5, Criteria1:="<>" & LTrim(Str(oRange.Cells(ind_x, 5).Value))
  oRange.SpecialCells(xlCellTypeVisible).EntireRow.Delete

  'Tri
  If OrdreTriAsc = False Then
      oRange.Sort Key1:=oRange.Columns(ind_Y), Order1:=xlDescending, Header:=xlNo, _
      OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
      'DataOption1:=xlSortNormal
  Else
    oRange.Sort Key1:=oRange.Columns(ind_Y), Order1:=xlAscending, Header:=xlNo, _
      OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
      'DataOption1:=xlSortNormal
  End If

  'Suppression des boutons et zones "ordre tri" et "retour sommaire"
  If oSheet.Names("RowToDel").index > 0 Then oSheet.Range("RowToDel").EntireRow.Delete
  For Each oObj In oSheet.Buttons
    oObj.Delete
  Next
  For Each oObj In oSheet.Shapes
    oObj.Delete
  Next
  
 
HideSelection oSheet, True
  'Insertion d'une ligne de titre
  Set oRange = oSheet.Cells.SpecialCells(xlCellTypeVisible).Cells(2, 1) '2eme ligne visible
  oRange.EntireRow.Insert
  Set oRange = oRange.Offset(-1, 1) 'TMA SID Roll-Over 2007 deplacement de 1 colonne sur la droite
  With oRange
    .Value = "Filtre et tri" & ztexte
    .VerticalAlignment = xlBottom
    With .Font
       .Size = 12
       .Bold = False
       .Italic = True
    End With
  End With
  With oSheet.Range(oRange, oRange.Offset(0, 1)) '050308: Intitul|fffd| centr|fffd| sur 2 colonnes uniquement + Modif TMA SID Roll-Over 2007
    .WrapText = True
    .Orientation = 0
    .HorizontalAlignment = xlCenter
    .ShrinkToFit = True
    .MergeCells = True
  End With
  oRange.EntireRow.RowHeight = oRange.EntireRow.RowHeight * 2 '050308: Hauteur ligne doubl|fffd|e

  application.ScreenUpdating = True
  application.DisplayAlerts = True

End Sub

Attribute VB_Name = "md2_Main"
Option Explicit

' Launch the application
Sub LaunchApp()
    If (TestAddIn) Then
        SetModeMacro
        Load frmMain           'Load main form in memory
        SaveOldEssbasseIni    'Save Essbase options
        InitGlobalOption
        If Left(UCase(Range("var_application").Value), 2) = "CA" Then
            application.Cursor = xlDefault
            ChoixAnn|fffd|e
            Worksheets("param").Range("var_date0").Value = 0
        End If
        frmEssInfo.Init          'Init Essbase info window
        If Left(ThisWorkbook.Name, 11) = "Integrateur" Then
            Var_User = Worksheets("param").Range("Var_User").Value
            Var_Password = Worksheets("param").Range("Var_Password").Value
        End If
        frmMain.Init              'Init main form
        SetModeUser
        frmMain.Show           'Display main form
    Else
        MsgBox "L'add-in Essbase pour Excel n'est pas disponible", vbCritical
        ThisWorkbook.Close False
    End If
End Sub

' *********************************************
' **** A VOIR (g|fffd|n|fffd|ration des treeview) *******
' *********************************************


Sub GetHierarchie(ByVal CurrentSheet As Worksheet, CurrentTreeview As TreeView, _
    Optional bNA As Boolean, Optional bMissing As Boolean)
    Dim oUpperCell As Range
    Dim oBottomCell As Range
    Dim Max As Long
    
    Set oUpperCell = CurrentSheet.Cells(3, 1)
    Set oBottomCell = oUpperCell.End(xlDown).End(xlToRight)
    CurrentTreeview.Nodes.Clear
    'Calcul de max : niveau le plus grand dans currentsheet
    Max = Getnodelevel_Max(CurrentSheet.Range(oUpperCell, oBottomCell).Value)
    'Mise en forme de la p|fffd|riode pour le CAJ
    If CurrentSheet.Name = "PER" Then
        Format_Code_DxPt_Alias ("PER")
        Worksheets("param").Range("var_date1").Value = Date
        Worksheets("param").Range("var_date2").Value = Date
        Worksheets("param").Range("var_date3").Value = Date
        Worksheets("param").Range("var_date4").Value = Date
    End If
    CompteurNoeud CurrentSheet, Max
    Set oUpperCell = CurrentSheet.Cells(3, 4)
    Set oBottomCell = oUpperCell.End(xlDown).End(xlToRight)
    Max = Get_H(CurrentSheet.Range(oUpperCell, oBottomCell).Value, CurrentTreeview, , , , bNA)
    
End Sub


'Cr|fffd|ation d'un nouvel index pour trier les onglets
Sub CompteurNoeud(ByVal oSheet As Worksheet, ByVal Max As Long)

    Dim i As Long
    Dim j As Long
    Dim NbLignes As Long
    Dim compteur(20) As Long
    Dim Plage As Range
    Dim index As String
    Dim NiveauNoeud As String
    Dim FormatIndex As String

    oSheet.Activate
    'Attention: l'ajout ou suppression de colonnes dans l'onglet MAN touche IniDimSheet dans la recherche des cases <> "#NoAccess"
    'Dans la boucle sur MAN
    Columns("A:C").EntireColumn.Insert
    
    'Cr|fffd|ation de la zone Plage
    Set Plage = oSheet.Range("D3", oSheet.Range("D3").End(xlDown))
    NbLignes = Plage.Rows.Count
    FormatIndex = "0" & String(Len(LTrim(Str(NbLignes))) - 1, "#")
    
    
    'D|fffd|finition de la zone PlageIndex
    Range(oSheet.Cells(3, 1), oSheet.Cells(NbLignes + 2, 2)).Name = "'" & oSheet.Name & "'!PlageIndex"

    'Initialisation compteur(i)
    For i = 0 To Max
    compteur(i) = NbLignes
    Next i

            
    'Chaque membre (i) du tableau compteur(20) est d|fffd|cr|fffd|ment|fffd| de 1 |fffd| chaque passage sur un noeud de niveau (i)
    'On affiche chaque compteur: compteur (i) pour noeud de niveau (i), compteur(i)+1 sinon
    For j = NbLignes To 1 Step -1
        index = ""
        NiveauNoeud = Getnodelevel(Plage.Cells(j, 1).Value)
        For i = 0 To Max
            If NiveauNoeud = i Then
                    
                'Modif du 03/05/07 : suppression de :
                'If NiveauNoeud = Max Then
                '    compteur(NiveauNoeud) = compteur(NiveauNoeud) - 1
                'Else
                '    compteur(NiveauNoeud) = compteur(NiveauNoeud) - 2
                'End If
                                
                compteur(NiveauNoeud) = compteur(NiveauNoeud) - 1
                    
            
            End If
            index = index & Format(compteur(i) + IIf(NiveauNoeud = i, 0, 1), FormatIndex)
        Next i
        Plage.Cells(j, 1).Offset(0, -1).Value = "I" & index
        oSheet.Cells(j + 2, 1).Value = LTrim(Plage.Cells(j, 1).Value)
        oSheet.Cells(j + 2, 2).FormulaR1C1 = "=RIGHT(""" & FormatIndex & """&ROW(RC[-1])-2," & Len(FormatIndex) & ")"
    Next j

    'Tri par ordre croissant selon Index
    'Extension de la zone jusqu'|fffd| 34 colonnes: 4 + 30. 30 est le nb de colonne (fix|fffd| dans IniDimSheet), et 4 est le nombre de colonnes d'ent|fffd|te du retrieve dans "MAN"
    Range(oSheet.Cells(3, 1), oSheet.Cells(NbLignes + 2, 34)).Sort Key1:=Range("C1"), Order1:=xlAscending, Header:=xlNo, OrderCustom:=1, Orientation:=xlTopToBottom

End Sub
Function Getnodelevel_Max(tblDimension As Variant) As Integer
  Dim i As Long
  Dim icurlevel As Integer
  Dim Max As Integer
  
  Max = 0
  i = LBound(tblDimension, 1)
  Do While i <= UBound(tblDimension, 1)
    icurlevel = Getnodelevel(tblDimension(i, 1))
    If icurlevel > Max Then Max = icurlevel
    i = i + 1
  Loop
  Getnodelevel_Max = Max

End Function
'Calcul niveau du membre a partir de l'indentation du libell|fffd|
Function Getnodelevel(ByVal Member As String) As Integer
Attribute Getnodelevel.VB_ProcData.VB_Invoke_Func = " \n14"
    Getnodelevel = ((Len(Member) - Len(LTrim(Member))) \ 5)
End Function
Function Get_H(tblDimension As Variant, oTree As TreeView, Optional oParentNode As Node, Optional ByRef lLine As Long, Optional Max As Long, Optional bNA As Boolean) As Long
  
  Dim i As Long
  Dim ind_r As Long
  Dim icurlevel As Integer
  Dim Trouve As Boolean
  Dim oCurNode As Node
  
  i = IIf(lLine = 0, LBound(tblDimension, 1), lLine)  ' Origine du tableau ou ligne en cours
  
  ' Boucle sur le tableau
  Do While i <= UBound(tblDimension, 1)

    icurlevel = Getnodelevel(tblDimension(i, 1))
    If icurlevel > Max Then Max = icurlevel
    
    ' Ajoute le membre au treeview, si ce n'est pas HAB ou #NoAccess
    ' <HAA 20/01/2004> Ajout num|fffd|ro de ligne dans Key de chaque node
    ' <HAA 20/01/2004> cette option permet de r|fffd|cuperer
    '                  les membres avec leur niveau pour les mises en ligne
    If Trim(tblDimension(i, 1)) <> "Habilitation Management (technique)" And Trim(tblDimension(i, 1)) <> "Habilitation M|fffd|tier (technique)" Then
      If Not bNA Or (bNA And fKeepLine(tblDimension, i)) Then
        If oParentNode Is Nothing Then
          Set oCurNode = oTree.Nodes.Add(, , "L" & Format(i + 2, "000000"), Trim(tblDimension(i, 1)))
          oCurNode.Tag = False
        Else
            Set oCurNode = oTree.Nodes.Add(oParentNode, tvwChild, "L" & Format(i + 2, "000000"), Trim(tblDimension(i, 1)))
            oCurNode.Tag = False
        End If
      ElseIf (i < UBound(tblDimension, 1) And Not (oParentNode Is Nothing)) Then
        '-------- on verifie si il n existe pas un parent en Noaccess -----
        '-------- different du parent precedent cr|fffd||fffd| dans le Treeview -----
        ind_r = i
        Trouve = False
        Do While (oParentNode.Text <> tblDimension(ind_r, 1) And ind_r > LBound(tblDimension, 1))
           ind_r = ind_r - 1
           If Trim(oParentNode.Text) <> Trim(tblDimension(ind_r, 1)) And (Not fKeepLine(tblDimension, i - 1)) And (Getnodelevel(tblDimension(ind_r, 1)) > Getnodelevel(tblDimension(i, 1))) Then
              Trouve = True
           End If
        Loop
        If Trouve Then
           Set oParentNode = Nothing
        End If
      End If
    End If
    
    i = i + 1
    
    If i > UBound(tblDimension, 1) Then Exit Do
    
    ' C'est un enfant, appel r|fffd|cursif de la fonction
    '--------- si niveau parent pr|fffd|c|fffd|dent < niveau noeud courant -------
    If icurlevel < Getnodelevel(tblDimension(i, 1)) Then
    
      Get_H tblDimension, oTree, oCurNode, i, Max, IIf((bNA And fKeepLine(tblDimension, i - 1)), Not bNA, bNA)
    
    ' C'est un parent on quitte la boucle / fonction
    '-------- si niveau iCurlevel > niveau du noeud lu --------
    ElseIf icurlevel > Getnodelevel(tblDimension(i, 1)) Then

      Exit Do
    
    End If
    
    If i > UBound(tblDimension, 1) Then Exit Do
    
    ' Si on est pas on bon niveau on remonte encore
    If icurlevel > Getnodelevel(tblDimension(i, 1)) Then Exit Do
    
  Loop
  
  ' Renvoie la ligne courante
  lLine = i
  Get_H = Max
  
End Function
' Peuple un TreeView avec un tableau |fffd| 2 Dimensions



' Teste la pr|fffd|sence des NoAccess sur les lignes de dimension
Function fKeepLine(tblSheet As Variant, lLine As Long) As Boolean
  Dim i As Integer
  
  fKeepLine = False
  ' Pour toutes les colonnes contenant des donn|fffd|es
  For i = LBound(tblSheet, 2) + 1 To UBound(tblSheet, 2)
    If InStr(tblSheet(lLine, i), "#NoAccess") = 0 Then
      ' On conserve la ligne
      fKeepLine = True
      Exit For
    End If
  Next i
End Function
' R|fffd|-initialise le classeur et affiche le sommaire
Sub RetSommaire()
    Dim oSheet As Worksheet
    SetModeMacro
  
  On Error GoTo AnoRetSommaire
  v_OK = False
  

  '---------------- fermeture classeur sans sauver avant retour ----------------
  ActiveWorkbook.Close False
  'application.Workbooks("TMP").Close False

  ThisWorkbook.Worksheets(SHEET_MAIN).Visible = xlSheetVisible
  
  ' Supprime les feuilles g|fffd|n|fffd|r|fffd|es
  'For Each osheet In ActiveWorkbook.Worksheets
  '  If Left(osheet.Name, 1) = "~" Then osheet.Delete
  'Next osheet

  ' Masque toutes les feuilles sauf la page de garde (Main)
  'For Each osheet In ActiveWorkbook.Worksheets
  '  If (osheet.Name <> SHEET_MAIN) Then
  '      osheet.Visible = xlSheetVeryHidden
  '  End If
  'Next osheet
  
  ThisWorkbook.Worksheets(SHEET_MAIN).Activate
  If Left(UCase(Range("var_application").Value), 2) = "CA" Then
     Worksheets("param").Range("var_date0").Value = 0
  End If

 If Left(ThisWorkbook.Name, 11) = "Integrateur" Then
    If ThisWorkbook.Worksheets("param").Range("test_controle").Value <> "1" Then
      If Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 2).Value = "S" Then
        'Modif XV 030122007 MsgBox est d|fffd|ja integer|fffd| dans la "Var_fermeture_saisi"
        'If test_envoi = 0 Then
        ' MsgBox ("Aucun envoi effectu|fffd| pour cette s|fffd|lection.")
        'End If
      End If
    End If
 End If
  
  SetModeUser
  frmMain.Show

FinRetSommaire:
    On Error GoTo 0
    SetModeUser
    Exit Sub
  
AnoRetSommaire:
    ThisWorkbook.Activate
    ThisWorkbook.Sheets(SHEET_MAIN).Visible = True
    ThisWorkbook.Sheets(SHEET_MAIN).Activate
    Resume FinRetSommaire

End Sub

' R|fffd|cup|fffd|re les zones de Retrieve sous forme de collection
Function fGetZones(oSheet As Worksheet) As Collection
    Dim oName As Name
    Dim oCollection As New Collection
    For Each oName In oSheet.Names    ' Parcours les noms locaux
        If InStr(1, UCase(oName.Name), "ZONE_RETRIEVE") <> 0 Then
            oCollection.Add oName.RefersToRange ' Ajoute la zone de Retrieve |fffd| la liste
        End If
    Next oName
    Set fGetZones = oCollection
End Function

' Format dimension sheet and zoom in to get full hierarchy
Function IniDimSheet(sSheetName As String, sMember_Retrieve As String, sIndic_Retrieve As String) As Worksheet
    Dim oSheet As Worksheet
    Dim zCptL, zCptL1 As Integer
    Dim zCptC, zCptC1 As Integer
    Dim tabAxes As Range
    Dim zZoom As String

    Set tabAxes = Worksheets("param").Range("tab_Axes")
    'Contenu de "Tab_axes"
    'Onglet  Zoom    Temps   Phase   MAN/GRP MET JUR IND ENS TAC RFI
    '1        2        3        4        5    6   7   8   9   10  11

    Set oSheet = Worksheets(sSheetName)
    ConnectSheet oSheet 'Connexion feuille
    Call InitSheetOption(oSheet, 2, True, 2, False, "~", False, "#NoAccess")

    'Vidage de la feuille de dimension
    oSheet.UsedRange.ClearContents
    oSheet.UsedRange.ClearFormats
    For zCptL1 = 1 To tabAxes.Rows.Count
        If tabAxes.Cells(zCptL1, 1).Value = sSheetName Then
            zCptL = zCptL1
            zZoom = tabAxes.Cells(zCptL, 2).Value
        End If
    Next
    'Remplissage si la dimension est pr|fffd|sente
    If Len(zZoom) > 0 Then
        'Ecriture du membre Zoom
        oSheet.Cells(3, 1).Value = zZoom
        For zCptC = 3 To tabAxes.Columns.Count - 2
            'Ecriture de la dimension MET en ligne 2
            If zCptC = 6 Or zCptC = 11 Then
                If oSheet.Cells(2, 2).Value = "" Then oSheet.Cells(2, 2).Value = IIf(tabAxes.Cells(zCptL, 6).Value <> "", tabAxes.Cells(zCptL, 6).Value, tabAxes.Cells(zCptL, 11).Value)
            'Ecriture de la dimension MAN en ligne 2 sur onglet MET
            ElseIf zCptC = 5 And zZoom = "TMET-TMET" Then
                frmMain.MultiPage1.Value = 0
                '-------------------------------------------------------------------
                '-  On |fffd|crit horizontalement dand la feuille MET
                '-  les valeurs de MAN qui ne sont pas en   "#NoAccess"
                '-------------------------------------------------------------------
                zCptL1 = 3
                ' Boucle sur les |fffd|l|fffd|ments racines de l'axe MAN
                zCptC1 = 2
                Do While (Worksheets("MAN").Cells(zCptL1, 1).Value <> "") And zCptC1 < 30
                    'On fait le test sur la 5|fffd|me colonne de la feuille MAN pour les #NoAccess: CompteurNoeud d|fffd|calle les colonnes du retrieve sur MAN
                    'L'ajout de colonne sur l'onglet MAN modifie la colonne sur laquelle on chercher les cases <> "#NoAccess"
                    If Worksheets("MAN").Cells(zCptL1, 5).Value <> "#NoAccess" Then
                       oSheet.Cells(2, zCptC1).Value = Worksheets("MAN").Cells(zCptL1, 1).Value
                       zCptC1 = zCptC1 + 1
                    End If
                    zCptL1 = zCptL1 + 1
                Loop
            Else
                oSheet.Cells(1, zCptC - 1).Value = tabAxes.Cells(zCptL, zCptC).Value
                'Ecriture de la dimension en ligne 1
            End If
        Next
    Else
        With oSheet.Cells(1, 1)
            .Value = Range("var_application").Value & ": Dimension " & sSheetName & " non pr|fffd|sente"
            .Font.ColorIndex = 3
            .Font.Bold = True
            With .Interior
                .ColorIndex = 6
                .Pattern = xlSolid
            End With
        End With
    End If
    ZoomInSheet_AllDesc oSheet, oSheet.UsedRange.Resize(3), oSheet.Cells(3, 1)
    oSheet.Calculate
    Set IniDimSheet = oSheet
End Function

' Extract code from a string like "code:alias"
Function ExtractCode(ByVal m As String) As String
    If InStr(1, m, ":") = 0 Then
        ExtractCode = m
    Else
        
        ExtractCode = Trim(Mid(m, 1, InStr(1, m, ":") - 1))
    End If
End Function

' Extract alias from a string like "code:alias"
Function ExtractAlias(ByVal m As String) As String
    If InStr(1, m, ":") = 0 Then
        ExtractAlias = m
    Else
        ExtractAlias = Trim(Mid(m, InStr(1, m, ":") + 1))
    End If
End Function

' Recursive function required to populate the "Report" Treeview
' << HAA >> : key = N & nom onglet template
' <HAA 20/01/2004> : les tag sont mis |fffd| false par d|fffd|faut
Sub ProcessNode(oRelativeNode As Node, oTvw As TreeView, tblHierarchy As Variant, ByRef iCurrentIndex As Integer)
Dim oCurrentNode As Node
Dim iParentIndex As Integer
Dim sKey As String
Dim i As Byte
    
    iParentIndex = iCurrentIndex
    
    If (GetNodeLevelTrv(iCurrentIndex + 1, tblHierarchy) > GetNodeLevelTrv(iParentIndex, tblHierarchy)) Then
        iCurrentIndex = iCurrentIndex + 1
        sKey = "N" & tblHierarchy(iCurrentIndex, 1) & tblHierarchy(iCurrentIndex, 2)
        Set oCurrentNode = oTvw.Nodes.Add(oRelativeNode, tvwChild, sKey, LTrim(tblHierarchy(iCurrentIndex, 4)))
        oCurrentNode.Tag = False
        
        ProcessNode oCurrentNode, oTvw, tblHierarchy, iCurrentIndex
    End If
    
    If (GetNodeLevelTrv(iCurrentIndex + 1, tblHierarchy) = GetNodeLevelTrv(iParentIndex, tblHierarchy)) Then
        iCurrentIndex = iCurrentIndex + 1
        sKey = "N" & tblHierarchy(iCurrentIndex, 1) & tblHierarchy(iCurrentIndex, 2)
        Set oCurrentNode = oTvw.Nodes.Add(oRelativeNode, tvwLast, sKey, LTrim(tblHierarchy(iCurrentIndex, 4)))
        oCurrentNode.Tag = False

        ProcessNode oCurrentNode, oTvw, tblHierarchy, iCurrentIndex
    End If
        
End Sub

' Get the hierarchy level of an element of Treeview (used by ProcessNode)
Function GetNodeLevelTrv(Iindex As Integer, tblHierarchy As Variant) As Integer
    Dim sLevel As Variant
    If (Iindex > UBound(tblHierarchy, 1)) Then
        GetNodeLevelTrv = -1
    Else
        sLevel = Split(tblHierarchy(Iindex, 1), ".")
        GetNodeLevelTrv = UBound(sLevel) - LBound(sLevel)
    End If
End Function

' Remplacement des libelles de phases par un seul code phase (libell|fffd| change |fffd| chaque chargement du cube)
Sub EffacePhase(oSheet As Worksheet)
    Dim ophase As Integer
    Dim ocell As Variant
    ophase = 0
    For Each ocell In oSheet.Range("A1:O15")
        If Left(UCase(ocell.Value), 8) = "DM-PHASE" Then
            If ophase = 0 Then ocell.Value = "DM-PHASE" Else: ocell.Value = ""
            ophase = ophase + 1
        End If
    Next
End Sub
Sub RedimZone(Onglet As Worksheet, oZone As String, lmax As Integer)
    Dim l As Integer
    Dim C As Integer
    Dim cmax As Integer
    On Error Resume Next
    l = Onglet.Range(oZone).Row
    C = Onglet.Range(oZone).Column
    cmax = C + Onglet.Range(oZone).Columns.Count - 1
    If Onglet.Names(oZone).index > 0 Then
        Onglet.Names(oZone).Delete
    End If
    Onglet.Names.Add Name:=oZone, _
        RefersTo:="=" + Range(Cells(l, C), Cells(lmax, cmax)).Address
    On Error GoTo 0
End Sub
'Pr CAJ
'pr redimensionner une zone en colonne
Sub RedimZoneCol(MonOnglet As String, oZone As String, cmax As Integer)
    Dim l As Integer
    Dim C As Integer
    Dim lmax As Integer
    On Error Resume Next
    l = Worksheets(MonOnglet).Range(oZone).Row
    C = Worksheets(MonOnglet).Range(oZone).Column
    lmax = C + Worksheets(MonOnglet).Range(oZone).Rows.Count
    If Worksheets(MonOnglet).Names(oZone).index > 0 Then
        Worksheets(MonOnglet).Names(oZone).Delete
    End If
    Worksheets(MonOnglet).Names.Add Name:=oZone, _
        RefersTo:="=" + Range(Cells(l, C), Cells(lmax, cmax)).Address
    On Error GoTo 0
End Sub

'Procedure de groupage des lignes de m|fffd|me niveau
Sub NewGroup(R As Range)
    Dim rr As Range
    If (R.Areas.Count > 0) Then
        For Each rr In R.Areas
            rr.Rows.Group
        Next rr
    End If
End Sub

Sub DelGroup(xSheet As String)
    Dim i As Integer
    On Error GoTo delGroup_error
    Worksheets(xSheet).Cells.Select
    For i = 1 To 20
        selection.Rows.Ungroup
    Next i
delGroup_error:
    On Error GoTo 0
End Sub

Sub GenRep(stype As String)
    Dim onode As Node
    Dim TabTreeView As Variant
    Dim i As Integer
    Dim ONode1 As Node
    application.ScreenUpdating = False
    ' Check if a date has been selected
    If frmMain.LstMM.Value = "" Or frmMain.LstAA.Value = "" Then
        MsgBox "Veuillez s|fffd|lectionner une p|fffd|riode", vbExclamation
        frmMain.LstMM.SetFocus
        Exit Sub
    End If
    
    ' chek for report has been selected
    i = 0
    For Each onode In frmMain.TrvRap.Nodes
        If onode.Children = 0 And onode.Tag Then i = i + 1
    Next onode
    If i = 0 Then
        MsgBox "Veuillez s|fffd|lectionner au moins un rapport", vbExclamation
        Exit Sub
    End If
    '------------- Groupe de comparaison existant ---------------------------
    frmMain.MultiPage1.Value = 0 ' 040720 PSA TreeView Management r|fffd|activ|fffd| pour corriger anomalie de perte propri|fffd|t|fffd| Checked
    
    ' Check if component has been selected
    Set TabTreeView = Worksheets("param").Range("tab_Treeview")
    For i = 2 To MAXVAL + 1
        If TabTreeView(2, i).Value > 0 Then
            If TabTreeView(3, i).Value = 0 Then
                frmMain.MultiPage1.Value = (i - 2)
                MsgBox "Veuillez s|fffd|lectionner au moins un |fffd|l|fffd|ment de l'axe " & Chr(10) & _
                    Chr(10) & frmMain.MultiPage1.Pages(i - 2).Caption, vbExclamation
                Exit Sub
            End If
        End If
    Next i
    Call LetReport(stype)

End Sub

Sub SelectPeriodInit()
    '------------ vidage des listes -----------------------
    frmMain.LstMM.Clear
    frmMain.LstAA.Clear
    
    '050325 : Limitation au mois en cours seul pour cube RA
    If Left(UCase(Range("var_application").Value), 2) = "RA" Then
        Select Case Val(Right(Range("var_moisencours").Value, 2))
            Case 1: frmMain.LstMM.AddItem ("Janvier")
            Case 2: frmMain.LstMM.AddItem ("F|fffd|vrier")
            Case 3: frmMain.LstMM.AddItem ("Mars")
            Case 4: frmMain.LstMM.AddItem ("Avril")
            Case 5: frmMain.LstMM.AddItem ("Mai")
            Case 6: frmMain.LstMM.AddItem ("Juin")
            Case 7: frmMain.LstMM.AddItem ("Juillet")
            Case 8: frmMain.LstMM.AddItem ("Ao|fffd|t")
            Case 9: frmMain.LstMM.AddItem ("Septembre")
            Case 10: frmMain.LstMM.AddItem ("Octobre")
            Case 11: frmMain.LstMM.AddItem ("Novembre")
            Case 12: frmMain.LstMM.AddItem ("D|fffd|cembre")
        End Select
    Else
        frmMain.LstMM.AddItem ("Janvier")
        frmMain.LstMM.AddItem ("F|fffd|vrier")
        frmMain.LstMM.AddItem ("Mars")
        frmMain.LstMM.AddItem ("Avril")
        frmMain.LstMM.AddItem ("Mai")
        frmMain.LstMM.AddItem ("Juin")
        frmMain.LstMM.AddItem ("Juillet")
        frmMain.LstMM.AddItem ("Ao|fffd|t")
        frmMain.LstMM.AddItem ("Septembre")
        frmMain.LstMM.AddItem ("Octobre")
        frmMain.LstMM.AddItem ("Novembre")
        frmMain.LstMM.AddItem ("D|fffd|cembre")
    End If
    
    If (Left(UCase(Range("var_application").Value), 2) <> "PM") And (Left(UCase(Range("var_application").Value), 2) <> "RA") And (Left(UCase(Range("var_application").Value), 2) <> "CA") Then
        frmMain.LstMM.ListIndex = Val(Right(Range("var_moisencours").Value, 2)) - 1  '040804 Selection du mois en cours par d|fffd|faut
    Else
        frmMain.LstMM.ListIndex = frmMain.LstMM.ListCount - 1
    End If
    
    If (Left(UCase(Range("var_application").Value), 2) = "CA") Then  '060411 Selection du mois syst|fffd|me car pas de var mois ne cours
        frmMain.LstMM.ListIndex = Format$(Month(Now()) - 1, "00")
    End If
       
    ' Populate Year Combo
    '050325 : Choix de 4 ans pour cube RA
    If Left(UCase(Range("var_application").Value), 2) = "RA" Then
      frmMain.LstAA.AddItem (Range("var_cycle").Value - 3)
      frmMain.LstAA.AddItem (Range("var_cycle").Value - 2)
      frmMain.LstAA.AddItem (Range("var_cycle").Value - 1)
    ElseIf Left(UCase(Range("var_application").Value), 2) <> "TB" And Left(UCase(Range("var_application").Value), 2) <> "CA" Then
      frmMain.LstAA.AddItem (Range("var_cycle").Value - 1)
    End If
    frmMain.LstAA.AddItem Range("var_cycle").Value
    frmMain.LstAA.ListIndex = frmMain.LstAA.ListCount - 1

End Sub


'mise en forme de l'onglet p|fffd|riode "code:alias"
Sub Format_Code_DxPt_Alias(Onglet As String)

Dim nb_ligne As Integer
Dim i As Integer
Dim cell As Variant
Dim nvcode As String
 
    Worksheets(Onglet).Visible = xlSheetVisible
    If Worksheets(Onglet).Select Then
    ActiveSheet.Range("A3").Select
    selection.End(xlDown).Select
    nb_ligne = ActiveCell.Row
    
    ActiveSheet.Range("A3").Select
    ActiveSheet.Range(selection, selection.End(xlDown)).Select
    
    'Cr|fffd|ation de la zone Plage
    Range(ActiveSheet.Cells(3, 1), ActiveSheet.Cells(nb_ligne, 1)).Name = "Plage"
    
    'Concat|fffd|nation code:alias
    i = ActiveCell.Row
    For Each cell In Range("Plage")

        If ActiveCell.Value <> "" Then
            nvcode = Cells(i, 1).Value & " : " & LTrim(Cells(i, 2).Value)
            Cells(i, 1).Value = nvcode
        End If
        
        i = i + 1
    Next cell
    End If
    
    Worksheets(Onglet).Visible = xlSheetVeryHidden
End Sub

Attribute VB_Name = "md2_Select"
'******************************************************
' Proc|fffd|dures de prise en compte des s|fffd|lections utilisateur
' Ancien nom=AU_GSTRetrieve
'******************************************************
Option Explicit

Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)


Sub LetReport(stype As String)
Attribute LetReport.VB_ProcData.VB_Invoke_Func = " \n14"
  Dim oBtn As Button
  Dim oSheet As Worksheet
  Dim otargetBook As Workbook
  Dim ActualBook As Workbook
  Dim Var_fermeture_saisi As String
  Dim test_controle As Variant
  
  SetModeMacro
  Set TabTreeView = Worksheets("param").Range("tab_Treeview")
    Range("var_PER").Value = "MM-" + Format$(frmMain.LstMM.ListIndex + 1, "00")
    Range("var_MM").Value = frmMain.LstMM.Text
    Range("var_AA").Value = frmMain.LstAA.Text
    
    If Worksheets("param").Range("var_outil").Value = "Integrateur" Then
        Var_fermeture_saisi = Worksheets("param").Range("Var_fermeture_saisi").Value
    End If
   
  ' boucle de r|fffd|cup des rapports s|fffd|lectionn|fffd|s
  Dim reportNode As Node
  
  '=========================
  '  MODIF ANALYSEUR V2  11-03-2004
  '=========================
  Set ActualBook = ThisWorkbook
  v_Classeur = ActualBook.Name
  
  Set otargetBook = application.Workbooks.Add
  v_Classeur_Cible = otargetBook.Name
          
  ActualBook.Activate

  For Each reportNode In frmMain.TrvRap.Nodes
    ' select only checked last node
    If reportNode.Tag And reportNode.Children = 0 Then
        application.ScreenUpdating = False
        Call LetMAN(reportNode, stype, ActualBook, otargetBook)
    End If
  Next reportNode
  application.ScreenUpdating = True
  TriOnglets otargetBook
  frmMain.Hide
  
  Select Case stype
  Case "REPORT"
  
    ' N'affiche que les feuilles g|fffd|n|fffd|r|fffd|es
    For Each oSheet In ActiveWorkbook.Worksheets
      If Left(oSheet.Name, 1) <> "~" Then
        oSheet.Visible = xlSheetVeryHidden
      Else
        Dim index As Integer

        For index = 1 To oSheet.Shapes.Count
            If oSheet.Shapes(index).Name = "Lien1" Then
                oSheet.Shapes(index).OnAction = "'" & v_Classeur & "'!RetSommaire"
                Exit For
            End If
        Next index
      End If
    Next oSheet
    v_OK = True

  Case "PRINT"
  '=========================
  '  MODIF ANALYSEUR V2  15-03-2004
  '=========================
    RetSommaire
    'otargetBook.Close False
      
  Case "EXPORT"
  '=========================
  '  MODIF ANALYSEUR V2  15-03-2004
  '=========================
   
    Dim oBook As Workbook
    Dim vPath As Variant
    
    Set oBook = application.Workbooks.Add
               
    ' Exporte les feuilles g|fffd|n|fffd|r|fffd|es
    For Each oSheet In otargetBook.Worksheets
    
      If Left(oSheet.Name, 1) = "~" Then
        ' MODIF JM RIQUIER
        For Each oBtn In oSheet.Buttons
             oBtn.Delete
        Next
        Dim i, j As Integer
        For i = 1 To 2
          For j = 1 To 4
           oSheet.Cells(i, j) = ""
          Next j
        Next i
        oSheet.Copy After:=oBook.Worksheets(oBook.Worksheets.Count)
      ElseIf oSheet.Name <> SHEET_CONTENT And oSheet.Name <> SHEET_MAIN Then
        oSheet.Visible = xlSheetVeryHidden
      End If
    
    Next oSheet

    ' Efface les feuilles blanches du nouveau classeur
    For Each oSheet In oBook.Worksheets
        If Left(oSheet.Name, 1) <> "~" Then oSheet.Delete
    Next oSheet
    
    vPath = application.GetSaveAsFilename(ThisWorkbook.path & "\GenFile.xls", "Fichier Excel (*.xls), *.xls", 1, "Enregistrement de l'export g|fffd|n|fffd|r|fffd|")
    
    If VarType(vPath) = vbBoolean Then
      If vPath = False Then
        oBook.Close False
      End If
    Else
        If Right(vPath, 4) <> ".xls" Then vPath = vPath & ".xls"
        oBook.SaveAs vPath
        oBook.Close False
        MsgBox ("Rapports correctement export|fffd|s dans " & vPath)
    End If
    RetSommaire
    
  End Select

  If Left(ActualBook.Name, 11) = "Integrateur" Then
  
  ActualBook.Worksheets("param").Range("test_controle").Value = otargetBook.ActiveSheet.Range("Controle").Value
  test_controle = ActualBook.Worksheets("param").Range("test_controle").Value
    
    If test_controle <> "1" Then
    
          '***ajout pour v|fffd|rification saisie lors fermeture
        With otargetBook.VBProject.VBComponents("ThisWorkbook").CodeModule
          ' Le DeleteLines sert |fffd| |fffd|viter d'avoir 2 fois Option Explicit
          ' si la d|fffd|claration explicite est coch|fffd|e dans les pr|fffd|f|fffd|rences
          'sans effet si l'option n'est pas coch|fffd|e
          .DeleteLines 1, .CountOfLines
          .AddFromString Var_fermeture_saisi
        End With

    End If
  End If

  SetModeUser

End Sub

Sub LetMAN(reportNode As Node, stype As String, ActualBook As Workbook, otargetBook As Workbook)
  ' Boucle de r|fffd|cup des s|fffd|lections axe management
    Dim nMan As Node
    Dim code As String
    Dim oDescNode As Node
    Dim oNiv1Node, oNiv2Node, oNiv3Node As Node
    Dim oDescNb1, oDescNb2, oDescNb3, oDescNb As Integer
    Dim i, j, k As Integer
    Dim myPage
    Dim oDescMax As Integer
    oDescMax = 20
        
    ' Pas de s|fffd|lection MAN alors on passe |fffd| l'axe suivant et on sort de la proc|fffd|dure
    If TabTreeView(reportNode.index + 3, pMan) = "0" Then
        Call LetGRP(reportNode, stype, ActualBook, otargetBook, code)
        Exit Sub
    End If
    For Each nMan In frmMain.TrvMan.Nodes
        If nMan.Tag Then
            ActualBook.Activate
            ActualBook.Worksheets("param").Range("var_MAN").Value = ExtractCode(nMan.Text)
            ActualBook.Worksheets("param").Range("var_libMAN").Value = ExtractAlias(nMan.Text)
            ActualBook.Worksheets("param").Range("var_noMAN").Calculate
            code = ActualBook.Worksheets("param").Range("var_noMAN").Value
                  
            If Not Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 2).Value = "S" Then
                If (ActualBook.Worksheets("param").Range("tab_Axes").Cells(2, 2) <> "" And ActualBook.Worksheets("param").Range("Groupe_Compar").Value = 1) Or (UCase(Left(nMan, 3)) = "ACL") Then GetRelatives frmMain.TrvMan, nMan
            End If
            
            ' Pr|fffd|paration template pour chaque noeud s|fffd|lectionn|fffd|
            Select Case TabTreeView(reportNode.index + 3, pMan)
                Case "L", "L1"
                    Call PrepareLineZooming(reportNode, nMan, frmMain.TrvMan, ActualBook.Worksheets("MAN"), ActualBook, otargetBook)
                    Call LetGRP(reportNode, stype, ActualBook, otargetBook, code)
                    Exit For
                Case "G"
                    Call PrepareGroupZooming(reportNode, nMan, ActualBook.Worksheets("MAN"), ActualBook, otargetBook)
                    Call LetGRP(reportNode, stype, ActualBook, otargetBook, code)
' LPR 060330
                'Etat avec zoom en colonne (creation liste membre a afficher)
                Case "C", "O"
                    ' BUG VBA : le treeview de r|fffd|f|fffd|rence doit |fffd|tre visible
                    For Each myPage In frmMain.MultiPage1.Pages
                        If UCase(Mid(myPage.Name, 5)) = "MAN" Then frmMain.MultiPage1.Value = myPage.index
                    Next myPage
                    
                    'Effacement zone de liste var_ListMET pour zoom en colonne
                    ActualBook.Worksheets("Param").Range("var_listMAN").ClearContents
                    oDescNb = 0
            
'                    'Pour RGR, Creation de la liste des ACL descendants (niveau N-1)
'                    If UCase(Left(nMan.Text, 3)) = "RGR" Then
'                        Set oNiv1Node = nMan.Child.FirstSibling
'                        oDescNb1 = nMan.Children
'                        oDescNb = oDescNb1 'Nb total descendants
'                        For i = 1 To oDescNb1
'                            If i <= oDescMax Then
'                                'Ecriture des descendant de niveau 1 dans zone Var_ListMAN
'                                ActualBook.Worksheets("param").Range("var_ListMAN").Cells(i + 1, 1).Value = ExtractCode(oNiv1Node.Text)
'                                ActualBook.Worksheets("param").Range("var_ListMAN").Cells(i + 1, 2).Value = ExtractAlias(oNiv1Node.Text)
'                            End If
'                            Set oNiv1Node = oNiv1Node.Next
'                        Next i
'                        ActualBook.Worksheets("param").Range("var_ListMAN").Cells(1, 1).Value = oDescNb
'
'                    'Pour REG, Creation de la liste des ACL descendants (niveau N-2)
'                    ElseIf UCase(Left(nMan.Text, 3)) = "REG" Then
'                        Set oNiv1Node = nMan.Child.FirstSibling 'Premier fils
'                        oDescNb1 = nMan.Children
'                        For i = 1 To oDescNb1
'                            Set oNiv2Node = oNiv1Node.Child.FirstSibling
'                            oDescNb2 = oNiv1Node.Children 'Nb de niv-2
'                            For j = 1 To oDescNb2
'                                If j + oDescNb <= oDescMax Then
'                                    'Ecriture des descendant de niveau 2 dans zone Var_ListMAN
'                                    ActualBook.Worksheets("param").Range("var_ListMAN").Cells(j + 1 + oDescNb, 1).Value = ExtractCode(oNiv2Node.Text)
'                                    ActualBook.Worksheets("param").Range("var_ListMAN").Cells(j + 1 + oDescNb, 2).Value = ExtractAlias(oNiv2Node.Text)
'                                End If
'                                Set oNiv2Node = oNiv2Node.Next
'                            Next j
'                            oDescNb = oDescNb + oDescNb2 'Nb total descendants
'                            Set oNiv1Node = oNiv1Node.Next
'                        Next i
'                        ActualBook.Worksheets("param").Range("var_ListMAN").Cells(1, 1).Value = oDescNb
        
'                    'Pour EXP, Creation de la liste des REG descendants (niveau N-1)
'                    ElseIf UCase(Left(nMan.Text, 3)) = "EXP" Then
'                        Set oNiv1Node = nMan.Child.FirstSibling
'                        oDescNb1 = nMan.Children
'                        oDescNb = oDescNb1 'Nb total descendants
'                        For i = 1 To oDescNb1
'                            If i <= oDescMax Then
'                                'Ecriture des descendant de niveau 1 dans zone Var_ListMAN
'                                ActualBook.Worksheets("param").Range("var_ListMAN").Cells(i + 1, 1).Value = ExtractCode(oNiv1Node.Text)
'                                ActualBook.Worksheets("param").Range("var_ListMAN").Cells(i + 1, 2).Value = ExtractAlias(oNiv1Node.Text)
'                            End If
'                            Set oNiv1Node = oNiv1Node.Next
'                        Next i
'
'                        If oDescNb > oDescMax Then
'                            MsgBox "Le nombre de descendants est limit|fffd| |fffd| " + LTrim(Str(oDescMax))
'                            oDescNb = oDescMax
'                        End If
'                        ActualBook.Worksheets("param").Range("var_ListMAN").Cells(1, 1).Value = oDescNb
'                    End If
                    
                'Pour une s|fffd|lection des fils |fffd| tous les niveau de l'axe management (niveau N-1)
                    
                    Select Case UCase(Left(nMan.Text, 3))
                    Case "FOR", "FRA", "EXP", "REG", "RGR", "GRE", "GRS", "GRP"
                    
                        Set oNiv1Node = nMan.Child.FirstSibling
                        oDescNb1 = nMan.Children
                        oDescNb = oDescNb1 'Nb total descendants
                        For i = 1 To oDescNb1
                            If i <= oDescMax Then
                                'Ecriture des descendant de niveau 1 dans zone Var_ListMAN
                                ActualBook.Worksheets("param").Range("var_ListMAN").Cells(i + 1, 1).Value = ExtractCode(oNiv1Node.Text)
                                ActualBook.Worksheets("param").Range("var_ListMAN").Cells(i + 1, 2).Value = ExtractAlias(oNiv1Node.Text)
                            End If
                            Set oNiv1Node = oNiv1Node.Next
                        Next i
                        
                        If oDescNb > oDescMax Then
                            MsgBox "Le nombre de descendants est limit|fffd| |fffd| " + LTrim(Str(oDescMax))
                            oDescNb = oDescMax
                        End If
                        ActualBook.Worksheets("param").Range("var_ListMAN").Cells(1, 1).Value = oDescNb
                    
                    End Select
                    
                    
                    'Appel fenetre de s|fffd|lection de 4 dates pour le rapport de type O si pas de s|fffd|lection pr|fffd|c|fffd|dente
                    If TabTreeView(reportNode.index + 3, pMan) = "O" And ActualBook.Worksheets("param").Range("var_date0").Value = 0 Then frm4Date.Select4Date
                    Call LetGRP(reportNode, stype, ActualBook, otargetBook, code)
'fin LPR 060330
                Case Else
                    Call LetGRP(reportNode, stype, ActualBook, otargetBook, code)
            End Select
        End If
    Next
End Sub
Sub LetGRP(reportNode As Node, stype As String, ActualBook As Workbook, otargetBook As Workbook, codeIn As String)
  ' boucle de r|fffd|cup des s|fffd|lections axe GRP
    Dim nGRP As Node
    Dim code As String
    ' pas de s|fffd|lection GRP alors on passe |fffd| l'axe suivant et on sort de la proc|fffd|dure
    If TabTreeView(reportNode.index + 3, pGRP) = "0" Then
        Call LetTAC(reportNode, stype, ActualBook, otargetBook, codeIn)
        Exit Sub
    End If
    For Each nGRP In frmMain.TrvGrp.Nodes
        If nGRP.Tag Then
            ' Pr|fffd|paration template et sortie de la boucle
            ActualBook.Activate
            ActualBook.Worksheets("param").Range("var_noGRP").Calculate
            code = codeIn & ActualBook.Worksheets("param").Range("var_noGRP").Value
            Select Case TabTreeView(reportNode.index + 3, pGRP)
                Case "L"
                    Call PrepareLineZooming(reportNode, nGRP, frmMain.TrvGrp, ActualBook.Worksheets("GRP"), ActualBook, otargetBook)
                    Call LetTAC(reportNode, stype, ActualBook, otargetBook, code)
                    Exit For
                Case "G"
                    Call PrepareGroupZooming(reportNode, nGRP, ActualBook.Worksheets("GRP"), ActualBook, otargetBook)
                    Call LetTAC(reportNode, stype, ActualBook, otargetBook, code)
                Case Else
                    Call LetTAC(reportNode, stype, ActualBook, otargetBook, code)
            End Select
        End If
    Next nGRP
End Sub
Sub LetTAC(reportNode As Node, stype As String, ActualBook As Workbook, otargetBook As Workbook, codeIn As String)
  ' boucle de r|fffd|cup des s|fffd|lections axe TACagement
    Dim nTAC As Node
    Dim code As String
    ' pas de s|fffd|lection TAC alors on passe |fffd| l'axe suivant et on sort de la proc|fffd|dure
    If TabTreeView(reportNode.index + 3, pTAC) = "0" Then
        Call LetMET(reportNode, stype, ActualBook, otargetBook, codeIn)
        Exit Sub
    End If
    For Each nTAC In frmMain.TrvTac.Nodes
        If nTAC.Tag Then
            ActualBook.Activate
            ActualBook.Worksheets("param").Range("var_TAC").Value = ExtractCode(nTAC.Text)
            ActualBook.Worksheets("param").Range("var_libTAC").Value = ExtractAlias(nTAC.Text)
            ActualBook.Worksheets("param").Range("var_noTAC").Calculate
            code = codeIn & ActualBook.Worksheets("param").Range("var_noTAC").Value
            ' si zoom dans le report sur TAC alors
            ' pr|fffd|paration template et sortie de la boucle
            Select Case TabTreeView(reportNode.index + 3, pTAC)
                Case "L"
                    Call PrepareLineZooming(reportNode, nTAC, frmMain.TrvTac, ActualBook.Worksheets("TAC"), ActualBook, otargetBook)
                    Call LetMET(reportNode, stype, ActualBook, otargetBook, code)
                    Exit For
                Case "G"
                    Call PrepareGroupZooming(reportNode, nTAC, ActualBook.Worksheets("TAC"), ActualBook, otargetBook)
                    Call LetMET(reportNode, stype, ActualBook, otargetBook, code)
                Case Else
                    Call LetMET(reportNode, stype, ActualBook, otargetBook, code)
            End Select
        End If
    Next nTAC
End Sub

Sub LetMET(reportNode As Node, stype As String, ActualBook As Workbook, otargetBook As Workbook, codeIn As String)
  ' boucle de r|fffd|cup des s|fffd|lections axe MET
    Dim nMET As Node
    Dim code As String
    Dim oNiv1Node, oNiv2Node, oNiv3Node As Node
    Dim oDescNb1, oDescNb2, oDescNb3, oDescNb As Integer
    Dim i, j, k As Integer
    Dim myPage
    Dim oDescMax As Integer
    oDescMax = 20
    
   ' pas de s|fffd|lection MET alors on passe |fffd| l'axe suivant et on sort de la proc|fffd|dure
    If TabTreeView(reportNode.index + 3, pMET) = "0" Then
        Call LetRFI(reportNode, stype, ActualBook, otargetBook, codeIn)
        Exit Sub
    End If
    For Each nMET In frmMain.TrvMet.Nodes
        If nMET.Tag Then
            ActualBook.Activate
            ActualBook.Worksheets("param").Range("var_MET").Value = ExtractCode(nMET.Text)
            ActualBook.Worksheets("param").Range("var_libMET").Value = ExtractAlias(nMET.Text)
            ActualBook.Worksheets("param").Range("var_noMET").Calculate
            code = codeIn & ActualBook.Worksheets("param").Range("var_noMET").Value
            ' si zoom dans le report sur MET alors
            ' pr|fffd|paration template et sortie de la boucle
            Select Case TabTreeView(reportNode.index + 3, pMET)
                Case "L"
                    Call PrepareLineZooming(reportNode, nMET, frmMain.TrvMet, ActualBook.Worksheets("MET"), ActualBook, otargetBook)
                    Call LetRFI(reportNode, stype, ActualBook, otargetBook, code)
                    Exit For
                Case "G"
                    Call PrepareGroupZooming(reportNode, nMET, ActualBook.Worksheets("MET"), ActualBook, otargetBook)
                    Call LetRFI(reportNode, stype, ActualBook, otargetBook, code)
                    
'LPR 060404 debut   'Etat avec zoom en colonne (creation liste membre a afficher)
                Case "C"
                    ' BUG VBA : le treeview de r|fffd|f|fffd|rence doit |fffd|tre visible
                    For Each myPage In frmMain.MultiPage1.Pages
                        If UCase(Mid(myPage.Name, 5)) = "MET" Then frmMain.MultiPage1.Value = myPage.index
                    Next myPage
                    
                    'Effacement zone de liste var_ListMET pour zoom en colonne
                    ActualBook.Worksheets("Param").Range("var_listMET").ClearContents
                    oDescNb = 0
            
'                    'Pour UNI et DRM, Creation des listes respectives de MET et UNI (niveau N-1)
'                    If (UCase(Left(nMET.Text, 3)) = "DRM" Or UCase(Left(nMET.Text, 3)) = "UNI") Then
'                        Set oNiv1Node = nMET.Child.FirstSibling
'                        oDescNb1 = nMET.Children
'                        oDescNb = oDescNb1 'Nb total descendants
'                        For i = 1 To oDescNb1
'                            If i <= oDescMax Then
'                                'Ecriture des descendant de niveau 1 dans zone Var_ListMET
'                                ActualBook.Worksheets("param").Range("var_ListMET").Cells(i + 1, 1).Value = ExtractCode(oNiv1Node.Text)
'                                ActualBook.Worksheets("param").Range("var_ListMET").Cells(i + 1, 2).Value = ExtractAlias(oNiv1Node.Text)
'                            End If
'                            Set oNiv1Node = oNiv1Node.Next
'                        Next i
'                        ActualBook.Worksheets("param").Range("var_ListMET").Cells(1, 1).Value = oDescNb
'
'                    'Pour DIV, Creation de la liste du niveau N-2 (UNI)
'                    ElseIf UCase(Left(nMET.Text, 3)) = "DIV" Then
'                        Set oNiv1Node = nMET.Child.FirstSibling 'Premier fils
'                        oDescNb1 = nMET.Children
'                        For i = 1 To oDescNb1
'                            Set oNiv2Node = oNiv1Node.Child.FirstSibling
'                            oDescNb2 = oNiv1Node.Children 'Nb de niv-2
'                            For j = 1 To oDescNb2
'                                If j + oDescNb <= oDescMax Then
'                                    'Ecriture des descendant de niveau 2 dans zone Var_ListMET
'                                    ActualBook.Worksheets("param").Range("var_ListMET").Cells(j + 1 + oDescNb, 1).Value = ExtractCode(oNiv2Node.Text)
'                                    ActualBook.Worksheets("param").Range("var_ListMET").Cells(j + 1 + oDescNb, 2).Value = ExtractAlias(oNiv2Node.Text)
'                                End If
'                                Set oNiv2Node = oNiv2Node.Next
'                            Next j
'                            oDescNb = oDescNb + oDescNb2 'Nb total descendants
'                            Set oNiv1Node = oNiv1Node.Next
'                        Next i
'                        ActualBook.Worksheets("param").Range("var_ListMET").Cells(1, 1).Value = oDescNb
'
'                    'Pour SGA, Creation de la liste des UNI descendants (niveau N-3)
'                    ElseIf UCase(Left(nMET.Text, 3)) = "SGA" Then
'                        Set oNiv1Node = nMET.Child.FirstSibling 'Premier fils
'                        oDescNb1 = nMET.Children
'                        For i = 1 To oDescNb1
'                            Set oNiv2Node = oNiv1Node.Child.FirstSibling
'                            oDescNb2 = oNiv1Node.Children 'Nb de niv-2
'                            For j = 1 To oDescNb2
'                                Set oNiv3Node = oNiv2Node.Child.FirstSibling
'                                oDescNb3 = oNiv2Node.Children 'Nb de niv-3
'                                For k = 1 To oDescNb3
'                                    If k + oDescNb <= oDescMax Then
'                                        'Ecriture des descendant de niveau 3 dans zone Var_ListMET
'                                        ActualBook.Worksheets("param").Range("var_ListMET").Cells(k + 1 + oDescNb, 1).Value = ExtractCode(oNiv3Node.Text)
'                                        ActualBook.Worksheets("param").Range("var_ListMET").Cells(k + 1 + oDescNb, 2).Value = ExtractAlias(oNiv3Node.Text)
'                                    End If
'                                    Set oNiv3Node = oNiv3Node.Next
'                                Next k
'                                oDescNb = oDescNb + oDescNb3 'Nb total descendants
'                                Set oNiv2Node = oNiv2Node.Next
'                            Next j
'                            Set oNiv1Node = oNiv1Node.Next
'                        Next i
'                        If oDescNb > oDescMax Then
'                            MsgBox "Le nombre de descendants est limit|fffd| |fffd| " + LTrim(Str(oDescMax))
'                            oDescNb = oDescMax
'                        End If
'                        ActualBook.Worksheets("param").Range("var_ListMET").Cells(1, 1).Value = oDescNb
'                    End If

                    Select Case UCase(Left(nMET.Text, 3))
                    
                    Case "SGA", "DIV", "DRM", "UNI"
                        
                        Set oNiv1Node = nMET.Child.FirstSibling
                        oDescNb1 = nMET.Children
                        oDescNb = oDescNb1 'Nb total descendants
                        For i = 1 To oDescNb1
                            If i <= oDescMax Then
                                'Ecriture des descendant de niveau 1 dans zone Var_ListMET
                                ActualBook.Worksheets("param").Range("var_ListMET").Cells(i + 1, 1).Value = ExtractCode(oNiv1Node.Text)
                                ActualBook.Worksheets("param").Range("var_ListMET").Cells(i + 1, 2).Value = ExtractAlias(oNiv1Node.Text)
                            End If
                            Set oNiv1Node = oNiv1Node.Next
                        Next i
                        If oDescNb > oDescMax Then
                            MsgBox "Le nombre de descendants est limit|fffd| |fffd| " + LTrim(Str(oDescMax))
                            oDescNb = oDescMax
                        End If
                        ActualBook.Worksheets("param").Range("var_ListMET").Cells(1, 1).Value = oDescNb
                    
                    End Select
                    

                    Call LetRFI(reportNode, stype, ActualBook, otargetBook, code)
'LPR 060404 fin
                Case Else
                    Call LetRFI(reportNode, stype, ActualBook, otargetBook, code)
            End Select
        End If
    Next nMET
End Sub


Sub LetRFI(reportNode As Node, stype As String, ActualBook As Workbook, otargetBook As Workbook, codeIn As String)
  ' boucle de r|fffd|cup des s|fffd|lections axe RFI
    Dim nRFI As Node
    Dim code As String
    ' pas de s|fffd|lection RFI alors on passe |fffd| l'axe suivant et on sort de la proc|fffd|dure
    If TabTreeView(reportNode.index + 3, pRFI) = "0" Then
        Call LetENS(reportNode, stype, ActualBook, otargetBook, codeIn)
        Exit Sub
    End If
    For Each nRFI In frmMain.TrvRFI.Nodes
        If nRFI.Tag Then
            ActualBook.Activate
            ActualBook.Worksheets("param").Range("var_RFI").Value = ExtractCode(nRFI.Text)
            ActualBook.Worksheets("param").Range("var_libRFI").Value = ExtractAlias(nRFI.Text)
            ActualBook.Worksheets("param").Range("var_noRFI").Calculate
            code = codeIn & ActualBook.Worksheets("param").Range("var_noRFI").Value
            ' si zoom dans le report sur RFI alors
            ' Pr|fffd|paration template et sortie de la boucle
            Select Case TabTreeView(reportNode.index + 3, pRFI)
                Case "L"
                    Call PrepareLineZooming(reportNode, nRFI, frmMain.TrvRFI, ActualBook.Worksheets("RFI"), ActualBook, otargetBook)
                    Call LetENS(reportNode, stype, ActualBook, otargetBook, code)
                    Exit For
                Case "G"
                    Call PrepareGroupZooming(reportNode, nRFI, ActualBook.Worksheets("RFI"), ActualBook, otargetBook)
                    Call LetENS(reportNode, stype, ActualBook, otargetBook, code)
                Case Else
                    Call LetENS(reportNode, stype, ActualBook, otargetBook, code)
            End Select
        End If
    Next nRFI
End Sub

Sub LetENS(reportNode As Node, stype As String, ActualBook As Workbook, otargetBook As Workbook, codeIn As String)
  ' boucle de r|fffd|cup des s|fffd|lections axe ENS
    Dim nENS As Node
    Dim nENSIndex As Integer
    Dim code As String
    ' pas de s|fffd|lection ENS alors on passe |fffd| l'axe suivant et on sort de la proc|fffd|dure
    If TabTreeView(reportNode.index + 3, pENS) = "0" Then
        Call LetJUR(reportNode, stype, ActualBook, otargetBook, codeIn)
        Exit Sub
    End If
    For nENSIndex = frmMain.TrvEns.Nodes.Count - 1 To 0 Step -1 '040720 PSA Lecture du treeview par le bas (auparavant "For Each nENS In frmMain.TrvEns.Nodes")
        Set nENS = frmMain.TrvEns.Nodes(nENSIndex + 1)
        If nENS.Tag Then
            ActualBook.Activate
            ActualBook.Worksheets("param").Range("var_ENS").Value = ExtractCode(nENS.Text)
            ActualBook.Worksheets("param").Range("var_libENS").Value = ExtractAlias(nENS.Text)
            ActualBook.Worksheets("param").Range("var_noENS").Calculate
            code = codeIn & ActualBook.Worksheets("param").Range("var_noENS").Value
            ' si zoom dans le report sur ENS alors
            ' Pr|fffd|paration template et sortie de la boucle
            Select Case TabTreeView(reportNode.index + 3, pENS)
                Case "L"
                    Call PrepareLineZooming(reportNode, nENS, frmMain.TrvEns, ActualBook.Worksheets("ENS"), ActualBook, otargetBook)
                    Call LetJUR(reportNode, stype, ActualBook, otargetBook, code)
                    Exit For
                Case "G"
                    Call PrepareGroupZooming(reportNode, nENS, ActualBook.Worksheets("ENS"), ActualBook, otargetBook)
                    Call LetJUR(reportNode, stype, ActualBook, otargetBook, code)
               Case Else
                    Call LetJUR(reportNode, stype, ActualBook, otargetBook, code)
            End Select
        End If
    Next
End Sub

Sub LetJUR(reportNode As Node, stype As String, ActualBook As Workbook, otargetBook As Workbook, codeIn As String)
  ' boucle de r|fffd|cup des s|fffd|lections axe JUR
    Dim nJUR As Node
    Dim code As String
   ' pas de s|fffd|lection JUR alors on passe |fffd| l'axe suivant et on sort de la proc|fffd|dure
    If TabTreeView(reportNode.index + 3, pJUR) = "0" Then
        Call LetPER(reportNode, stype, ActualBook, otargetBook, codeIn)
        Exit Sub
    End If
    For Each nJUR In frmMain.TrvJur.Nodes
        If nJUR.Tag Then
            ActualBook.Activate
            ActualBook.Worksheets("param").Range("var_JUR").Value = ExtractCode(nJUR.Text)
            ActualBook.Worksheets("param").Range("var_libJUR").Value = ExtractAlias(nJUR.Text)
            ActualBook.Worksheets("param").Range("var_noJUR").Calculate
            code = codeIn & ActualBook.Worksheets("param").Range("var_noJUR").Value
            ' si zoom dans le report sur JUR alors
            ' Pr|fffd|paration template et sortie de la boucle
            Select Case TabTreeView(reportNode.index + 3, pJUR)
                Case "L"
                    Call PrepareLineZooming(reportNode, nJUR, frmMain.TrvJur, ActualBook.Worksheets("JUR"), ActualBook, otargetBook)
                    Call LetPER(reportNode, stype, ActualBook, otargetBook, code)
                    Exit For
                Case "G"
                    Call PrepareGroupZooming(reportNode, nJUR, ActualBook.Worksheets("JUR"), ActualBook, otargetBook)
                    Call LetPER(reportNode, stype, ActualBook, otargetBook, code)
                Case Else
                    Call LetPER(reportNode, stype, ActualBook, otargetBook, code)
            End Select
        End If
    Next nJUR
End Sub
Sub LetPER(reportNode As Node, stype As String, ActualBook As Workbook, otargetBook As Workbook, codeIn As String)
  ' boucle de r|fffd|cup des s|fffd|lections axe PER
    Dim nPER As Node
    Dim code As String
    Dim codesem, mois, aliasextrait As String
    Dim nb_ligne As Integer
    Dim i As Integer
    Dim cell, omois As Variant
   ' pas de s|fffd|lection PER alors on passe |fffd| l'axe suivant et on sort de la proc|fffd|dure
    If TabTreeView(reportNode.index + 3, pPER) = "0" Then
    Call LetIND(reportNode, stype, ActualBook, otargetBook, codeIn)
    Exit Sub
    End If
    For Each nPER In frmMain.TrvPer.Nodes
        If nPER.Tag Then
            ActualBook.Activate
            ActualBook.Worksheets("param").Range("var_JJ").Value = ExtractCode(nPER.Text)
            ActualBook.Worksheets("param").Range("var_libJJ").Value = ExtractAlias(nPER.Text)
            ActualBook.Worksheets("param").Range("var_noJJ").Calculate
            code = codeIn & ActualBook.Worksheets("param").Range("var_noJJ").Value
            If (Right(Left(UCase(nPER.Text), 11), 4) <> "JOUR") Then
                ActualBook.Worksheets("param").Range("var_SEM").Value = ExtractCode(nPER.Text)
                ActualBook.Worksheets("param").Range("var_libSEM").Value = ExtractAlias(nPER.Text)
                aliasextrait = ExtractAlias(nPER.Text)
                mois = Trim(Mid(aliasextrait, InStr(aliasextrait, " ")))
                mois = Trim(Right(mois, InStr(mois, " ")))
                omois = "MM-" & Format$(mois, "MM")
                ActualBook.Worksheets("param").Range("var_PER").Value = omois
           Else
                aliasextrait = ExtractAlias(nPER.Text)
                mois = Trim(Mid(Trim(Mid(aliasextrait, InStr(aliasextrait, " "))), InStr(Trim(Mid(aliasextrait, InStr(aliasextrait, " "))), " ")))
                mois = Trim(Left(mois, InStr(mois, " ")))
                If mois = "d|fffd|cembre" Then omois = "MM-12"
                If mois = "janvier" Then omois = "MM-01"
                If mois = "f|fffd|vrier" Then omois = "MM-02"
                If mois = "mars" Then omois = "MM-03"
                If mois = "avril" Then omois = "MM-04"
                If mois = "mai" Then omois = "MM-05"
                If mois = "juin" Then omois = "MM-06"
                If mois = "juillet" Then omois = "MM-07"
                If mois = "ao|fffd|t" Then omois = "MM-08"
                If mois = "septembre" Then omois = "MM-09"
                If mois = "octobre" Then omois = "MM-10"
                If mois = "novembre" Then omois = "MM-11"
                ActualBook.Worksheets("param").Range("var_PER").Value = omois
                codesem = Left(UCase(nPER.Text), 6)
                ActualBook.Worksheets("param").Range("var_SEM").Value = codesem
                ActualBook.Activate
                ActualBook.Worksheets("PER").Visible = xlSheetVisible
                ActualBook.Worksheets("PER").Select
                                
                'R|fffd|cup|fffd|ration de l'alias de la semaine dans l'onglet PER
                i = 1
                nb_ligne = Range("Plage").Rows.Count
                Worksheets("PER").Range("A:A").Select
                For cell = i To nb_ligne
                    Cells(i, 1).Select
                    If Left(ActiveCell.Value, 6) = codesem Then
                         ActualBook.Worksheets("param").Range("var_libSEM") = LTrim(ActiveSheet.Cells(i, 5).Value)
                         Exit For
                    End If
                i = i + 1
                Next cell
                
                'ActualBook.Worksheets("param").Range("var_libSEM").Value = ExtractAlias(codesem)
            End If
            ' si zoom dans le report sur PER alors
            ' pr|fffd|paration template et sortie de la boucle
            Select Case TabTreeView(reportNode.index + 3, pPER)
                Case "L"
                    Call PrepareLineZooming(reportNode, nPER, frmMain.TrvPer, ActualBook.Worksheets("PER"), ActualBook, otargetBook)
                    Call LetIND(reportNode, stype, ActualBook, otargetBook, code)
                    Exit For
                Case "G"
                    Call PrepareGroupZooming(reportNode, nPER, ActualBook.Worksheets("PER"), ActualBook, otargetBook)
                    Call LetIND(reportNode, stype, ActualBook, otargetBook, code)
                Case Else
                    Call LetIND(reportNode, stype, ActualBook, otargetBook, code)
            End Select
        End If
    Next nPER
End Sub
Sub LetIND(reportNode As Node, stype As String, ActualBook As Workbook, otargetBook As Workbook, codeIn As String)
  ' boucle de r|fffd|cup des s|fffd|lections axe IND
    Dim nIND As Node
    Dim code As String
    '------------------------------------------------------
    '050308 Appel GenerateReport pour tous cubes sauf RHFR
    '------------------------------------------------------
    If Left(UCase(Range("var_application")), 4) <> "RHFR" Then
        ' pas de s|fffd|lection IND alors on passe |fffd| l'axe suivant et on sort de la proc|fffd|dure
        If TabTreeView(reportNode.index + 3, pIND) = "0" Then
            Call GenerateReport(reportNode, stype, ActualBook, otargetBook, codeIn)
            Exit Sub
        End If
        For Each nIND In frmMain.TrvInd.Nodes
            If nIND.Tag Then
                ActualBook.Activate
                ActualBook.Worksheets("param").Range("var_IND").Value = nIND.Text
                ActualBook.Worksheets("param").Range("var_libIND").Value = nIND.Text
                ActualBook.Worksheets("param").Range("var_noIND").Calculate
                code = codeIn & ActualBook.Worksheets("param").Range("var_noIND").Value
                    Select Case TabTreeView(reportNode.index + 3, pIND)
                    Case "L"
                        Call PrepareLineZooming(reportNode, nIND, frmMain.TrvInd, ActualBook.Worksheets("IND"), ActualBook, otargetBook)
                        Call GenerateReport(reportNode, stype, ActualBook, otargetBook, code)
                        Exit For
                    Case "G"
                        Call PrepareGroupZooming(reportNode, nIND, ActualBook.Worksheets("IND"), ActualBook, otargetBook)
                        Call GenerateReport(reportNode, stype, ActualBook, otargetBook, code)
                    Case Else
                        Call GenerateReport(reportNode, stype, ActualBook, otargetBook, code)
                End Select
            End If
        Next nIND
    '------------------------------------------------------
    '050308 Appel LetCho pour RHFR
    '------------------------------------------------------
    Else
        ' pas de s|fffd|lection IND alors on passe |fffd| l'axe suivant et on sort de la proc|fffd|dure
        If TabTreeView(reportNode.index + 3, pIND) = "0" Then
            Call LetCHO(reportNode, stype, ActualBook, otargetBook, codeIn)
            Exit Sub
        End If
        For Each nIND In frmMain.TrvInd.Nodes
            If nIND.Tag Then
                ActualBook.Worksheets("param").Range("var_IND").Value = nIND.Text
                ActualBook.Worksheets("param").Range("var_libIND").Value = nIND.Text
                ActualBook.Worksheets("param").Range("var_noIND").Calculate
                code = codeIn & ActualBook.Worksheets("param").Range("var_noIND").Value
                          Select Case TabTreeView(reportNode.index + 3, pIND)
                    Case "L"
                        Call PrepareLineZooming(reportNode, nIND, frmMain.TrvInd, ActualBook.Worksheets("IND"), ActualBook, otargetBook)
                        Call LetCHO(reportNode, stype, ActualBook, otargetBook, code)
                        Exit For
                    Case "G"
                        Call PrepareGroupZooming(reportNode, nIND, ActualBook.Worksheets("IND"), ActualBook, otargetBook)
                        Call LetCHO(reportNode, stype, ActualBook, otargetBook, code)
                    Case Else
                        Call LetCHO(reportNode, stype, ActualBook, otargetBook, code)
                End Select
            End If
        Next nIND
    End If
End Sub
Public Sub LetCHO(reportNode As Node, stype As String, ActualBook As Workbook, otargetBook As Workbook, codeIn As String)
  ' boucle de r|fffd|cup des selections axe CHO uniquement pour RHFR
    Dim nCHO As Node
    Dim code As String
    ' pas de s|fffd|lection CHO alors on passe |fffd| l'axe suivant et on sort de la proc|fffd|dure
    If TabTreeView(reportNode.index + 3, pCHO) = "0" Then
        Call LetTCT(reportNode, stype, ActualBook, otargetBook, codeIn)
        Exit Sub
    End If
    For Each nCHO In frmMain.TrvCho.Nodes
        If nCHO.Tag Then
            ActualBook.Activate
            ActualBook.Worksheets("param").Range("var_CHO").Value = ExtractCode(nCHO.Text)
            ActualBook.Worksheets("param").Range("var_libCHO").Value = ExtractAlias(nCHO.Text)
            ActualBook.Worksheets("param").Range("var_noCHO").Calculate
            code = codeIn & ActualBook.Worksheets("param").Range("var_noCHO").Value
            ' si zoom dans le report sur CHO alors
            ' pr|fffd|paration template et sortie de la boucle
            Select Case TabTreeView(reportNode.index + 3, pCHO)
                Case "L"
                    Call PrepareLineZooming(reportNode, nCHO, frmMain.TrvCho, ActualBook.Worksheets("CHO"), ActualBook, otargetBook)
                    Call LetTCT(reportNode, stype, ActualBook, otargetBook, code)
                    Exit For
                Case "G"
                    Call PrepareGroupZooming(reportNode, nCHO, ActualBook.Worksheets("CHO"), ActualBook, otargetBook)
                    Call LetTCT(reportNode, stype, ActualBook, otargetBook, code)
                    Exit For
                Case Else
                    Call LetTCT(reportNode, stype, ActualBook, otargetBook, code)
            End Select
        End If
    Next nCHO
End Sub

Sub LetTCT(reportNode As Node, stype As String, ActualBook As Workbook, otargetBook As Workbook, codeIn As String)
  ' boucle de r|fffd|cup des selections axe TCT uniquement pour RHFR
    Dim nTCT As Node
    Dim code As String
    ' pas de s|fffd|lection TCT alors on passe |fffd| l'axe suivant et on sort de la proc|fffd|dure
    If TabTreeView(reportNode.index + 3, pTCT) = "0" Then
        Call LetCSF(reportNode, stype, ActualBook, otargetBook, codeIn)
        Exit Sub
    End If
    For Each nTCT In frmMain.TrvTct.Nodes
        If nTCT.Tag Then
            ActualBook.Activate
            ActualBook.Worksheets("param").Range("var_TCT").Value = ExtractCode(nTCT.Text)
            ActualBook.Worksheets("param").Range("var_libTCT").Value = ExtractAlias(nTCT.Text)
            ActualBook.Worksheets("param").Range("var_noTCT").Calculate
            code = codeIn & ActualBook.Worksheets("param").Range("var_noTCT").Value
            ' si zoom dans le report sur CHO alors
            ' pr|fffd|paration template et sortie de la boucle
            Select Case TabTreeView(reportNode.index + 3, pTCT)
                Case "L"
                    Call PrepareLineZooming(reportNode, nTCT, frmMain.TrvTct, ActualBook.Worksheets("TCT"), ActualBook, otargetBook)
                    Call LetCSF(reportNode, stype, ActualBook, otargetBook, code)
                    Exit For
                Case "G"
                    Call PrepareGroupZooming(reportNode, nTCT, ActualBook.Worksheets("TCT"), ActualBook, otargetBook)
                    Call LetCSF(reportNode, stype, ActualBook, otargetBook, code)
                    Exit For
                Case Else
                    Call LetCSF(reportNode, stype, ActualBook, otargetBook, code)
            End Select
        End If
    Next nTCT
End Sub

Sub LetCSF(reportNode As Node, stype As String, ActualBook As Workbook, otargetBook As Workbook, codeIn As String)
  ' boucle de r|fffd|cup des selections axe CSF uniquement pour RHFR
    Dim nCSF As Node
    Dim code As String
    ' pas de s|fffd|lection CSF alors on passe |fffd| l'axe suivant et on sort de la proc|fffd|dure
    If TabTreeView(reportNode.index + 3, pCSF) = "0" Then
        Call GenerateReport(reportNode, stype, ActualBook, otargetBook, codeIn)
    Exit Sub
    End If
    For Each nCSF In frmMain.TrvCsf.Nodes
        If nCSF.Tag Then
            ActualBook.Activate
            ActualBook.Worksheets("param").Range("var_CSF").Value = ExtractCode(nCSF.Text)
            ActualBook.Worksheets("param").Range("var_libCSF").Value = ExtractAlias(nCSF.Text)
            ActualBook.Worksheets("param").Range("var_noCSF").Calculate
            code = codeIn & ActualBook.Worksheets("param").Range("var_noCSF").Value
            ' si zoom dans le report sur CHO alors
            ' pr|fffd|paration template et sortie de la boucle
            Select Case TabTreeView(reportNode.index + 3, pCSF)
                Case "L"
                    Call PrepareLineZooming(reportNode, nCSF, frmMain.TrvCsf, ActualBook.Worksheets("CSF"), ActualBook, otargetBook)
                    Call GenerateReport(reportNode, stype, ActualBook, otargetBook, code)
                    Exit For
                Case "G"
                    Call PrepareGroupZooming(reportNode, nCSF, ActualBook.Worksheets("CSF"), ActualBook, otargetBook)
                    Call GenerateReport(reportNode, stype, ActualBook, otargetBook, code)
                    Exit For
                Case Else
                    Call GenerateReport(reportNode, stype, ActualBook, otargetBook, code)
            End Select
        End If
    Next nCSF
End Sub

Sub GenerateReportList(reportNode As Node, stype As String, ActualBook As Workbook, otargetBook As Workbook)

End Sub

Sub GenerateReport(reportNode As Node, stype As String, ActualBook As Workbook, otargetBook As Workbook, code As String)
    Dim oBook As Workbook
    Dim Onglet As String
    Dim i As Integer
    Dim oSheet As Worksheet
    Dim zone_supp As String
    Dim C_OBJ As Object
    Dim LETT As String
    Dim pXXX As Byte
    Dim zCell As Integer
    Dim oColMbr As Integer
    Dim oRange As Range
    Dim zNbRow As Integer
    Dim zNbCol As Integer
    Dim TitleLine As Integer
    Dim indexMAN, indexMET, varlibMAN, varlibENS As Variant
    Dim Titreok As Boolean
    Dim var_AA, var_Date1, var_Date2, var_Date3, var_Date4, var_tit_opN, var_tit_opY As Variant
    Dim oName As Name
    Dim Z_Zone, Zone As String
    
    Titreok = False
    ' Temporisation (|fffd| r|fffd|duire si performances trop faibles)
    Sleep 1000
    Onglet = Mid(reportNode.Key, 2)
    '  MODIF JM RIQUIER 13/02/2004
    zone_supp = Onglet
    If (Left(UCase(zone_supp), 1) = "N") Then zone_supp = Right(zone_supp, Len(zone_supp) - 1)
      
    ActualBook.Activate
    ActualBook.Worksheets(Onglet).Visible = True
    ActualBook.Worksheets(Onglet).Activate
    
    '=========================
    '  MODIF Automate LPR 30/03/06
    '=========================
    varlibMAN = Worksheets("param").Range("var_libMAN")
    varlibENS = Worksheets("param").Range("var_libENS")
    If TabTreeView(reportNode.index + 3, pMan) = "O" Then
        Titreok = True
        var_AA = Worksheets("param").Range("var_AA")
        var_Date1 = Worksheets("param").Range("var_Date1")
        var_Date2 = Worksheets("param").Range("var_Date2")
        var_Date3 = Worksheets("param").Range("var_Date3")
        var_Date4 = Worksheets("param").Range("var_Date4")
        
        var_tit_opN = "Op|fffd|ration " & var_AA & " du " & Format$(var_Date1, "DDDD DD/MM/YYYY") & " au " & Format$(var_Date2, "DDDD DD/MM/YYYY") & " (dur|fffd|e " & var_Date2 - (var_Date1 - 1) & " jours)"
        var_tit_opY = "Op|fffd|ration " & var_AA - 1 & " du " & Format$(var_Date3, "DDDD DD/MM/YYYY") & " au " & Format$(var_Date4, "DDDD DD/MM/YYYY") & " (dur|fffd|e " & var_Date4 - (var_Date3 - 1) & " jours)"
        varlibMAN = var_tit_opN
        varlibENS = var_tit_opY

    End If
    
    Select Case TabTreeView(reportNode.index + 3, pMan)
    Case "C", "O"
        indexMAN = Worksheets("param").Range("Index_man")
    
    Case "S"
        test_envoi = 0
        Worksheets("param").Range("test_envoi").Value = test_envoi
    End Select
    Select Case TabTreeView(reportNode.index + 3, pMET)
    Case "C"
        indexMET = Worksheets("param").Range("Index_met")

    End Select
    
    '=========================
    '  MODIF ANALYSEUR V2  11-03-2004
    '=========================
    ActualBook.Worksheets(Onglet).Copy After:=otargetBook.Worksheets(otargetBook.Worksheets.Count)

    '=========================
    '  MODIF ANALYSEUR V2  11-03-2004
    '=========================
    ActualBook.Activate
    For Each oSheet In ActualBook.Worksheets
        If (oSheet.Name <> SHEET_MAIN) Then
            oSheet.Visible = xlSheetVeryHidden
        End If
    Next oSheet
   
    Call ProtectReport(ActualBook.Worksheets(Onglet), True)
    otargetBook.Activate

    ' *** MODIF JM RIQUIER - 12/02/2004
    ' *** ne lancer la procedure MiseEnForme que pour les analyseurs

    ActualBook.Worksheets("param").Range("TypeRapport").Value = ""
    ' On parcourt toutes les colonnes pour la ligne correspondante au rapport
    ' Ces noms de colonnes sont r|fffd|cup|fffd|r|fffd|s |fffd| partir des noms de Treeview
    For Each C_OBJ In frmMain.Controls
        If (UCase(Left(C_OBJ.Name, 3)) = "TRV" And UCase(Right(C_OBJ.Name, Len(C_OBJ.Name) - 3)) <> "RAP") Then
            LETT = UCase(Right(C_OBJ.Name, Len(C_OBJ.Name) - 3))
            For i = 0 To (MAXVAL - 1)
                If LETT = pTabLib(i) Then pXXX = pTabVal(i)
            Next i
            If TabTreeView(reportNode.index + 3, pXXX) = "L" Then
                ActualBook.Worksheets("param").Range("TypeRapport").Value = "Analyse"
                Exit For
            ElseIf TabTreeView(reportNode.index + 3, pXXX) = "G" Then
                ActualBook.Worksheets("param").Range("TypeRapport").Value = "Benchmark"
                Exit For
            ElseIf TabTreeView(reportNode.index + 3, pXXX) = "L1" Then
                ActualBook.Worksheets("param").Range("TypeRapport").Value = "ApprobPJ"
                Exit For
            End If
        End If
    Next C_OBJ
      
    '=================================
    '  MODIF ANALYSEUR V2  11-03-2004
    '  Ajout nouvelle feuille dans classeur externe otargetBook
    '=================================
     
    Set oSheet = otargetBook.Worksheets(otargetBook.Worksheets.Count)
    oSheet.Name = "~" & Onglet & "_" & code
    ' suppression protection feuille copi|fffd|e
    Call ProtectReport(oSheet, False)
      
    'parametre 5 = supression lignes vides
    Call InitSheetOption(oSheet, 1, False, 2, False, " ", True, " ")
    
    ' Retrieve
    If Not situTEST Then
        oSheet.Calculate
        Call RetrieveSheet(oSheet)
        oSheet.Calculate
        ' Si pas de donn|fffd|e retour |fffd| la s|fffd|lection
        If (Code_Retour_Retrieve = 1020010) Then
            otargetBook.Close False
            application.ScreenUpdating = True
            Call RetSommaire
            Exit Sub
        End If
    End If
    oSheet.Calculate

    Select Case Worksheets("param").Range("TypeRapport").Value
    ' Si Analyseur on supprime les lignes vides en gardant au moins une ligne
    Case "Analyse"
        oColMbr = oSheet.Range("zone_dynamic").Column
        Set oRange = oSheet.Range("zone_clear1")
        zNbRow = oRange.Rows.Count
        For zCell = 1 To zNbRow
            zNbCol = oRange.Cells(zCell, oRange.Columns.Count - oColMbr - 1).End(xlToRight).Column
            If zNbRow > 0 And zNbCol <= 256 Then
            ' On somme les valeurs d'une ligne du tableau et on la supprime si la somme est nulle
                If (application.WorksheetFunction.Sum(Range(oRange.Cells(zCell, oColMbr + 3), oRange.Cells(zCell, oRange.Columns.Count))) = 0) And oRange.Cells(zCell, oColMbr).Value <> "" Then
                    If zCell <> 1 Then
                        oRange.Cells(zCell, oColMbr).EntireRow.Delete
                        zNbRow = zNbRow - 1
                        zCell = zCell - 1
                    ElseIf zCell = 1 Then
                        oRange.Cells(zCell, oColMbr).EntireRow.ClearContents
                        If zNbRow = 2 Then
                            oRange(zNbRow, oColMbr).EntireRow.Delete
                            zNbRow = zNbRow - 1
                        End If
                    End If
                End If
            End If
        Next
        If zNbRow = 1 Then
            oRange.Cells(zNbRow, oColMbr).EntireRow.ClearContents
            MsgBox "Pas de donn|fffd|e pour la s|fffd|lection"
        End If

    ' Si Benchmark on supprime les lignes en en gardant un minimum pour |fffd|viter la perte de format
    Case "Benchmark"
        oColMbr = oSheet.Range("zone_dynamic").Column
        Set oRange = oSheet.Range("zone_clear1")
        zNbRow = oRange.Rows.Count
        For zCell = 1 To zNbRow
            If oRange.Cells(zCell, oColMbr).Value = "0" Then TitleLine = zCell
        Next
        ' On est dans le cas d'un 1er tableau non vide
        ' On somme les valeurs d'une ligne du 1er tableau et on la supprime si la somme est nulle
        ' On efface le contenu de la ligne s'il ne reste que 4 lignes dans le tableau
        If application.WorksheetFunction.Sum(Range(oRange.Cells(1, oColMbr + 3), oRange.Cells(1, oRange.Columns.Count))) = 0 And oRange.Cells(1, oColMbr).Value <> "" Then
            For zCell = 1 To TitleLine - 1
                oRange.Cells(zCell, oColMbr).EntireRow.ClearContents
                If TitleLine - 1 - zCell > 3 Then
                    oRange.Cells(2, oColMbr).EntireRow.Delete
                    TitleLine = TitleLine - 1
                    zNbRow = zNbRow - 1
                    zCell = zCell - 1
                ElseIf zCell = TitleLine - 1 Then
                    Exit For
                End If
            Next
            MsgBox "Pas de donn|fffd|e pour le 1er tableau"
        ' On somme les valeurs d'une ligne du tableau et on la supprime si la somme est nulle
        ' On est dans le cas o|fffd| il existe au moins une ligne dans le 1er tableau: on peut donc supprimer sans perdre le format
        ElseIf application.WorksheetFunction.Sum(Range(oRange.Cells(1, oColMbr + 3), oRange.Cells(1, oRange.Columns.Count))) <> "0" Then
            For zCell = 2 To TitleLine - 1
                If application.WorksheetFunction.Sum(Range(oRange.Cells(zCell, oColMbr + 3), oRange.Cells(zCell, oRange.Columns.Count))) = 0 And oRange.Cells(zCell, oColMbr).Value <> "" Then
                    If zCell < TitleLine - 1 Then
                        oRange.Cells(zCell, oColMbr).EntireRow.Delete
                        zNbRow = zNbRow - 1
                        zCell = zCell - 1
                        TitleLine = TitleLine - 1
                    ElseIf zCell = TitleLine - 1 Then
                        Exit For
                    End If
                End If
            Next
            If TitleLine - 1 - zCell = 3 Then oRange.Cells(zCell + 1, oColMbr).EntireRow.Insert Shift:=xlUp
        End If
        ' On est dans le cas d'un 2|fffd|me tableau non vide
        ' On somme les valeurs d'une ligne du 2|fffd|me tableau et on la supprime si la somme est nulle
        ' On efface le contenu de la ligne s'il ne reste que 4 lignes dans le tableau
        If application.WorksheetFunction.Sum(Range(oRange.Cells(zNbRow, oColMbr + 3), oRange.Cells(zNbRow, oRange.Columns.Count))) = 0 And oRange.Cells(zNbRow, oColMbr).Value <> "" Then
            For zCell = TitleLine + 1 To zNbRow
                oRange.Cells(zCell, oColMbr).EntireRow.ClearContents
                If zNbRow - (TitleLine + 1) > 3 Then
                    oRange.Cells(TitleLine + 2, oColMbr).EntireRow.Delete
                    zNbRow = zNbRow - 1
                    zCell = zCell - 1
                ElseIf zCell > zNbRow - 1 Then
                    Exit For
                End If
            Next
            MsgBox "Pas de donn|fffd|e pour le 2|fffd|me tableau"
        ' On somme les valeurs d'une ligne du tableau et on la supprime si la somme est nulle
        ' On est dans le cas o|fffd| il existe au moins une ligne dans le 2|fffd|me tableau: on peut donc supprimer sans perdre le format
        ElseIf application.WorksheetFunction.Sum(Range(oRange.Cells(zNbRow, oColMbr + 3), oRange.Cells(zNbRow, oRange.Columns.Count))) <> "0" Then
            For zCell = TitleLine + 2 To zNbRow
                If application.WorksheetFunction.Sum(Range(oRange.Cells(zCell, oColMbr + 3), oRange.Cells(zCell, oRange.Columns.Count))) = 0 And oRange.Cells(zCell, oColMbr).Value <> "" Then
                    If zCell < zNbRow Then
                        oRange.Cells(zCell, oColMbr).EntireRow.Delete
                        zNbRow = zNbRow - 1
                        zCell = zCell - 1
                        TitleLine = TitleLine - 1
                    ElseIf zCell = zNbRow Then
                        Exit For
                    End If
                End If
            Next
            If zNbRow - zCell = 3 Then oRange.Cells(TitleLine + 1, oColMbr).EntireRow.Insert Shift:=xlUp
        End If
   End Select

    ' Copier / Coller par valeur
    oSheet.UsedRange.Copy
    oSheet.UsedRange.PasteSpecial xlPasteValues
    Call ProtectReport(oSheet, False)

    oSheet.Activate
    application.GoTo Reference:=oSheet.Cells.SpecialCells(xlCellTypeVisible).Cells(1, 1)
 
    ' Si Analyseur ou Groupes de comparaison uniquement appel MiseenForme
    If ActualBook.Worksheets("param").Range("TypeRapport").Value = "Analyse" And zNbRow > 0 Then Call MiseEnForme(oSheet, zone_supp, ActualBook, otargetBook)
    Call HideSelection(oSheet, True)
    Select Case TabTreeView(reportNode.index + 3, pMan)
    Case "L"
        If Left(UCase(Range("var_application").Value), 2) = "CA" Then
            Call Repositionne_Zone(oSheet, otargetBook)
        End If
    Case "C"
        If Left(UCase(Range("var_application").Value), 2) = "CA" Then
       
            'Call CacheColonne(oSheet.Name, indexMAN, varlibMAN, varlibENS, False)
        End If
    Case "O"
        If Left(UCase(Range("var_application").Value), 2) = "CA" Then
       
            'Call CacheColonne(oSheet.Name, indexMAN, varlibMAN, varlibENS, True)
        End If
    
    Case "S"    '***Insertion formules semi-totaux pour contr|fffd|le des saisies
        
    ActualBook.Activate
    For Each oName In Worksheets(Onglet).Names
        Z_Zone = oName.Name
        Zone = Mid(Z_Zone, InStr(1, Z_Zone, "!") + 1)
        If InStr(1, UCase(oName.Name), "ZONE_FORMULE") <> 0 Then
            ActualBook.Worksheets(Onglet).Activate
            Range(Z_Zone).Select
            selection.Copy
            otargetBook.Activate
            oSheet.Activate
            Range(Zone).Select
            oSheet.Paste
        End If
    Next oName
    
    End Select
    Select Case TabTreeView(reportNode.index + 3, pMET)
    Case "C"
        If Left(UCase(Range("var_application").Value), 2) = "CA" Then
   
            'Call CacheColonne(oSheet.Name, indexMET, varlibMAN, varlibENS, False)
        End If
    End Select
    application.GoTo Reference:=oSheet.Cells.SpecialCells(xlCellTypeVisible).Cells(1, 1)
    'Impression feuille
    If stype = "PRINT" Then oSheet.PrintOut
End Sub

' Calculate number of selected node
Sub ComputeChecked(snode As Node, sTrv As String)
    Dim TabTreeView As Variant
    Dim i As Integer
    Set TabTreeView = Worksheets("param").Range("tab_Treeview")
    For i = 2 To MAXVAL + 1
        If UCase(TabTreeView(1, i).Value) = UCase(sTrv) Then
            If snode.Tag Then
                TabTreeView(3, i).Value = TabTreeView(3, i).Value + 1
            ElseIf (snode.Tag = False And TabTreeView(3, i).Value <> "0") Then
                TabTreeView(3, i).Value = TabTreeView(3, i).Value - 1
            End If
        End If
    Next i
End Sub

'=======================================================================
' 041102 PSA/AHG: Recherche des 2 noeuds |fffd| partir desquels on zoom pour les deux pav|fffd|s des Benchmarks
' Diff|fffd|rencie les cas selon le niveau du noeud s|fffd|lectionn|fffd|: r|fffd|cup|fffd|re code, alias, index des noeuds |fffd| partir desquels on zoom,
' la profondeur du zoom et les titres des pav|fffd|s (grp1_sec, libgrp1, nogrp1, NiveauZoom1, Titre1 dans "Param")
'=======================================================================
Public Sub GetRelatives(ByRef myTreeview As TreeView, onode As MSComctlLib.Node)
    Dim ONode2 As Node
    Dim var_xxx As String
    Dim var_libxxx As String

    ' Valeur par d|fffd|faut des codes, alias et index
    Range("grp2_sec").Value = "NE"
    Range("libgrp2").Value = "NE"
    Range("grp1_sec").Value = "NE"
    Range("libgrp1").Value = "NE"
    Range("nogrp1").Value = 0
    Range("nogrp2").Value = 0

    If (UCase(Left(onode.Text, 3)) <> "ACL" And UCase(Left(onode.Text, 3)) <> "RGR" And UCase(Left(onode.Text, 3)) <> "REG" And UCase(Left(onode.Text, 3)) <> "SAT" And UCase(Left(onode.Text, 3)) <> "EXP" And UCase(Left(onode.Text, 3)) <> "FRA") Then
    
    

    ' Cas o|fffd| la s|fffd|lection se fait |fffd| un niveau ACL on prend son p|fffd|re et son grand-p|fffd|re
    ElseIf UCase(Left(onode.Text, 3)) = "ACL" Then
        ' On cherche si le noeud s|fffd|lectionn|fffd| est dans Total Management ET dans Total Groupe Comparaison
           For Each ONode2 In myTreeview.Nodes
                If Not (ONode2.Parent Is Nothing Or onode.Parent Is Nothing) Then
                    If (Trim(ONode2.Text) = Trim(onode.Text) And ONode2.Parent.Text <> onode.Parent.Text) Then
                        var_xxx = ExtractCode(ONode2.Parent.Text)
                        var_libxxx = ExtractAlias(ONode2.Parent.Text)
                        Exit For
                    End If
                End If
            Next ONode2
            
            ' Cas o|fffd| il n'y a pas de premier groupe, chercher le deuxi|fffd|me (existe toujours): affectation code, alias et index du noeud du 2|fffd|me pav|fffd|
            If var_xxx = "" And var_libxxx = "" Then
               '  MsgBox "Axe Management - Le noeud s|fffd|lectionn|fffd| ne comprend pas de Groupe de Comparaison", vbExclamation
                If Not onode.Parent Is Nothing Then
                    If Not onode.Parent.Parent Is Nothing Then
                        Range("grp2_sec").Value = ExtractCode(onode.Parent.Text)
                        Range("libgrp2").Value = ExtractAlias(onode.Parent.Text)
                        Range("nogrp2").Value = onode.Parent.index
                    End If
              End If
              
            
            ' Noeud s|fffd|lection|fffd| sur Axe Total Management (1er pav|fffd| du benchmark non vide): affectation code, alias et index des 2 noeuds
            ElseIf (UCase(Left(onode.Parent.Text, 3)) = "RGR") Then
                Range("grp1_sec").Value = var_xxx
                Range("libgrp1").Value = var_libxxx
                Range("nogrp1").Value = ONode2.Parent.index
                Range("grp2_sec").Value = ExtractCode(onode.Parent.Text)
                Range("libgrp2").Value = ExtractAlias(onode.Parent.Text)
                Range("nogrp2").Value = onode.Parent.index
        
            ' Noeud s|fffd|lection|fffd| sur Axe Total Groupe Comparaison (1er pav|fffd| du benchmark non vide): affectation code, alias et index des 2 noeuds
            ElseIf (UCase(Left(onode.Parent.Text, 3)) = "GRP") Then
                Range("grp1_sec").Value = ExtractCode(onode.Parent.Text)
                Range("libgrp1").Value = ExtractAlias(onode.Parent.Text)
                Range("nogrp1").Value = onode.Parent.index
                Range("grp2_sec").Value = var_xxx
                Range("libgrp2").Value = var_libxxx
                Range("nogrp2").Value = ONode2.Parent.index
            End If
            
            ' On affecte |fffd| Titre1, Titre2, NiveauZoom1 et NiveauZoom2 leur valeur
            Worksheets("Param").Range("Titre1").Value = Range("ACL").Cells(1, 2)
            Worksheets("Param").Range("Titre2").Value = Range("ACL").Cells(1, 3)
            Range("NiveauZoom1").Value = Range("ACL").Cells(1, 4)
            Range("NiveauZoom2").Value = Range("ACL").Cells(1, 5)
    
    ' Cas o|fffd| la s|fffd|lection se fait |fffd| un niveau RGR on prend son p|fffd|re et ce noeud
    ElseIf UCase(Left(onode.Text, 3)) = "RGR" Then
        ' On affecte |fffd| Titre1, Titre2, NiveauZoom1 et NiveauZoom2 leur valeur
        Worksheets("Param").Range("Titre1").Value = Range("RGR").Cells(1, 2)
        Worksheets("Param").Range("Titre2").Value = Range("RGR").Cells(1, 3)
        Range("NiveauZoom1").Value = Range("RGR").Cells(1, 4)
        Range("NiveauZoom2").Value = Range("RGR").Cells(1, 5)
        ' On affecte |fffd| code, alias et index leur valeur
        Range("grp1_sec").Value = ExtractCode(onode.Parent.Text)
        Range("libgrp1").Value = ExtractAlias(onode.Parent.Text)
        Range("nogrp1").Value = onode.Parent.index
        Range("grp2_sec").Value = ExtractCode(onode.Text)
        Range("libgrp2").Value = ExtractAlias(onode.Text)
        Range("nogrp2").Value = onode.index

    ' Cas o|fffd| la s|fffd|lection se fait |fffd| un niveau REG on prend son arriere grand-p|fffd|re et ce noeud
    ElseIf UCase(Left(onode.Text, 3)) = "REG" Then
        ' On affecte |fffd| Titre1, Titre2, NiveauZoom1 et NiveauZoom2 leur valeur
        Worksheets("Param").Range("Titre1").Value = Range("REG").Cells(1, 2)
        Worksheets("Param").Range("Titre2").Value = Range("REG").Cells(1, 3)
        Range("NiveauZoom1").Value = Range("REG").Cells(1, 4)
        Range("NiveauZoom2").Value = Range("REG").Cells(1, 5)
        ' On affecte |fffd| code, alias et index leur valeur
        Range("grp1_sec").Value = ExtractCode(onode.Parent.Parent.Parent.Text)
        Range("libgrp1").Value = ExtractAlias(onode.Parent.Parent.Parent.Text)
        Range("nogrp1").Value = onode.Parent.Parent.Parent.index
        Range("grp2_sec").Value = ExtractCode(onode.Text)
        Range("libgrp2").Value = ExtractAlias(onode.Text)
        Range("nogrp2").Value = onode.index

    ' Cas o|fffd| la s|fffd|lection se fait |fffd| un niveau SAT on prend son grand-p|fffd|re
    ElseIf UCase(Left(onode.Text, 3)) = "SAT" Then
        ' On affecte |fffd| Titre1, Titre2, NiveauZoom1 et NiveauZoom2 leur valeur
        Worksheets("Param").Range("Titre1").Value = Range("SAT").Cells(1, 2)
        Worksheets("Param").Range("Titre2").Value = Range("SAT").Cells(1, 3)
        Range("NiveauZoom1").Value = Range("SAT").Cells(1, 4)
        Range("NiveauZoom2").Value = Range("SAT").Cells(1, 5)
        ' On affecte |fffd| code, alias et index leur valeur
        Range("grp1_sec").Value = ExtractCode(onode.Parent.Parent.Text)
        Range("libgrp1").Value = ExtractAlias(onode.Parent.Parent.Text)
        Range("nogrp1").Value = onode.Parent.Parent.index
        Range("grp2_sec").Value = ExtractCode(onode.Parent.Parent.Text)
        Range("libgrp2").Value = ExtractAlias(onode.Parent.Parent.Text)
        Range("nogrp2").Value = onode.Parent.Parent.index
        
    ' Cas o|fffd| la s|fffd|lection se fait |fffd| un niveau EXP on prend son p|fffd|re
    ElseIf UCase(Left(onode.Text, 3)) = "EXP" Then
        ' On affecte |fffd| Titre1, Titre2, NiveauZoom1 et NiveauZoom2 leur valeur
        Worksheets("Param").Range("Titre1").Value = Range("EXP").Cells(1, 2)
        Worksheets("Param").Range("Titre2").Value = Range("EXP").Cells(1, 3)
        Range("NiveauZoom1").Value = Range("EXP").Cells(1, 4)
        Range("NiveauZoom2").Value = Range("EXP").Cells(1, 5)
        ' On affecte |fffd| code, alias et index leur valeur
        Range("grp1_sec").Value = ExtractCode(onode.Parent.Text)
        Range("libgrp1").Value = ExtractAlias(onode.Parent.Text)
        Range("nogrp1").Value = onode.Parent.index
        Range("grp2_sec").Value = ExtractCode(onode.Parent.Text)
        Range("libgrp2").Value = ExtractAlias(onode.Parent.Text)
        Range("nogrp2").Value = onode.Parent.index
    
    ' Cas o|fffd| la s|fffd|lection se fait |fffd| un niveau FRA on prend ce noeud
    ElseIf UCase(Left(onode.Text, 3)) = "FRA" Then
        ' On affecte |fffd| Titre1, Titre2, NiveauZoom1 et NiveauZoom2 leur valeur
        Worksheets("Param").Range("Titre1").Value = Range("FRA").Cells(1, 2)
        Worksheets("Param").Range("Titre2").Value = Range("FRA").Cells(1, 3)
        Range("NiveauZoom1").Value = Range("FRA").Cells(1, 4)
        Range("NiveauZoom2").Value = Range("FRA").Cells(1, 5)
        ' On affecte |fffd| code, alias et index leur valeur
        Range("grp1_sec").Value = ExtractCode(onode.Text)
        Range("libgrp1").Value = ExtractAlias(onode.Text)
        Range("nogrp1").Value = onode.index
        Range("grp2_sec").Value = ExtractCode(onode.Text)
        Range("libgrp2").Value = ExtractAlias(onode.Text)
        Range("nogrp2").Value = onode.index

    End If

End Sub

'Tri les Onglets dans l'ordre Rapports/Dimensions
Sub TriOnglets(ByVal ActualBook As Workbook)

    Dim i As Integer
    Dim j As Integer
    Dim Onglet As Worksheet
    Dim oSheet As Worksheet
    Dim oFeuille As Worksheet
    Dim type_outil As Variant
    Dim xBook As Workbook
    
    For Each xBook In Workbooks
        If Left(xBook.Name, 11) = "Integrateur" Then
            type_outil = xBook.Worksheets("param").Range("var_outil").Value
        End If
    Next xBook
    
    'On prend Feuil1 ou Sheet1 comme feuille de r|fffd|cup|fffd|ration des codes de chaque rapport
    For Each oSheet In ActualBook.Worksheets
        If (Left(oSheet.Name, 2) = "Fe" Or Left(oSheet.Name, 2) = "Sh") Then
            'Dans Feuil1/Sheet1 on r|fffd|cup|fffd|re les Name, CodeName
             i = 1
             For Each oFeuille In ActualBook.Worksheets
                 If Left(oFeuille.CodeName, 2) = "T_" Then
                     i = i + 1
                     oSheet.Cells(i, 1).Value = oFeuille.Name
                 End If
            Next oFeuille
            'Tri par ordre croissant selon Code
            Range(oSheet.Cells(2, 1), oSheet.Cells(i, 1)).Sort Key1:=oSheet.Range("A2"), Order1:=xlAscending, Header:=xlGuess, OrderCustom:=1, Orientation:=xlTopToBottom
            'Tri onglets
            For j = 2 To i
                Set Onglet = ActualBook.Worksheets(oSheet.Cells(j, 1).Value)
                Onglet.Name = Left(Onglet.Name, InStr(1, Onglet.Name, "_")) & LTrim(Str(j - 1))
                Onglet.Move Before:=Sheets(j - 1)
                If type_outil = "Integrateur" Then
                    SetModeMacro
                    ActiveSheet.Copy Before:=Worksheets(Worksheets.Count)
                    ActiveSheet.Name = Onglet.Name & "_bis"
                    ActiveWindow.SelectedSheets.Visible = False
                End If
            Next j
            Exit For
        End If
    Next oSheet

End Sub

'Calcule le nombre de descendants d'un noeud
Public Function NbDescendants(ByVal onode As Node) As Integer
    Dim FirstNode As Node
    
    Set FirstNode = onode
    While onode.Children <> "0"
        Set onode = onode.Child
    Wend

NbDescendants = Right(FirstNode.Key, 4) - Right(onode.Key, 4)

End Function

' Ajouter pour le CAJ
' Permet l'affichage d'une bo|fffd|te de dialogue pour choisir l'ann|fffd|e

Sub ChoixAnn|fffd|e()

Dim i As Integer
Dim TopPos As Integer
Dim SelectCube As DialogSheet
Dim cb As OptionButton
Dim Choix1, Choix2, Choix3 As Variant
Dim Annee1, Annee2, Annee3 As Variant
Dim Choix
Dim ArrChoix

application.ScreenUpdating = False
Worksheets("param").Visible = xlSheetVisible

' Ajoute une feuille de dialogue temporaire
Set SelectCube = ActiveWorkbook.DialogSheets.Add

' Ajoute les boutons d'option de l'onglet param

Annee1 = Worksheets("param").Range("Annee1")
Annee2 = Worksheets("param").Range("Annee2")
Annee3 = Worksheets("param").Range("Annee3")

ArrChoix = Array("", Annee1, Annee2, Annee3)
TopPos = 40
For i = 1 To 3
SelectCube.OptionButtons.Add 78, TopPos, 150, 16.5
SelectCube.OptionButtons(i).Text = ArrChoix(i)
TopPos = TopPos + 13
Next i

' Positionne les boutons OK et Annuler
SelectCube.Buttons.Left = 240

' Dimensionne la hauteur, la largeur et le titre de la bte de dialogue
With SelectCube.DialogFrame
.Height = application.Max _
(68, SelectCube.DialogFrame.Top + TopPos - 34)
.Width = 230
.Caption = "Choisissez une ann|fffd|e"
End With

' Change l'ordre de tabulation des boutons OK et Annuler
' afin de donner le focus au premier bouton d'option
SelectCube.Buttons("Button 2").BringToFront
SelectCube.Buttons("Button 3").BringToFront
SelectCube.Show

' r|fffd|cup|fffd|ration du choix effectu|fffd|
For i = 1 To 3
If SelectCube.OptionButtons(i).Value = xlOn Then
Choix = SelectCube.OptionButtons(i).Text
End If
Next
If Choix = "" Then
MsgBox "Aucun choix n'a |fffd|t|fffd| fait"
RetSommaire
End If
If Choix = CStr(Annee1) Then
Choix1 = 1
Choix2 = 0
Choix3 = 0
Worksheets("param").Range("Choix1") = Choix1
Worksheets("param").Range("Choix2") = Choix2
Worksheets("param").Range("Choix3") = Choix3
ElseIf Choix = CStr(Annee2) Then
Choix1 = 0
Choix2 = 1
Choix3 = 0
Worksheets("param").Range("Choix1") = Choix1
Worksheets("param").Range("Choix2") = Choix2
Worksheets("param").Range("Choix3") = Choix3
ElseIf Choix = CStr(Annee3) Then
Choix1 = 0
Choix2 = 0
Choix3 = 1
Worksheets("param").Range("Choix1") = Choix1
Worksheets("param").Range("Choix2") = Choix2
Worksheets("param").Range("Choix3") = Choix3
End If

' Supprime la feuille de dialogue temporaire (sans message d'avertissement)
application.DisplayAlerts = False
SelectCube.Delete
application.DisplayAlerts = True

Var_Application = Worksheets("param").Range("Var_Application").Value
Var_Database = Worksheets("param").Range("Var_Database").Value
Var_Server = Worksheets("param").Range("Var_Server").Value

Worksheets("param").Visible = xlSheetVeryHidden


End Sub

' Ajouter pour le CAJ
' Permet de mettre en forme les colonnes choisies dynamiquement

Sub CacheColonne(MonOnglet As String, index As Variant, varlibMAN As Variant, varlibENS As Variant, Titreok As Boolean)
    Dim ColDeb, ColFin, cmax As Integer
    Dim MaCol As Integer
    Dim MaLigne As Integer
  
    application.ScreenUpdating = False
    Worksheets(MonOnglet).Select
    ActiveSheet.Unprotect AUTOMATEPASSWORD
    ColDeb = Range("ZoneCacheCol").Column
    ColFin = ColDeb + Range("ZoneCacheCol").Columns.Count - 1
    
    MaLigne = Range("ZoneCacheCol").Row
    
    cmax = ColDeb
    For MaCol = ColDeb To ColFin
        If Cells(MaLigne, MaCol).Value > index Then
            ActiveSheet.Columns(MaCol).Hidden = True
        Else
            ActiveSheet.Columns(MaCol).Hidden = False
            cmax = cmax + 1
        End If
    Next
    Call RedimZoneCol(MonOnglet, "Zone_d_impression", cmax - 1)
    Call FinalizeLastCol(MonOnglet, cmax, varlibMAN, varlibENS, Titreok)
    
End Sub

Sub Repositionne_Zone(Onglet As Worksheet, otargetBook As Workbook)

Dim nb_ligne As Integer
Dim nb_ligne2 As Integer
Dim MaCol As Integer
Dim numlig As Integer
Dim ligne_retrieve As Integer
Dim lmax As Integer

    otargetBook.Activate
    'Worksheets(Onglet).Visible = xlSheetVisible
    'Worksheets(Onglet).Select
    'Onglet.Visible = xlSheetVisible
    Onglet.Select
    ActiveSheet.Unprotect AUTOMATEPASSWORD
    
    
    'Cr|fffd|ation de la zone |fffd| D|fffd|placer
    ActiveSheet.Rows("14:26").Name = "PerimADeplacer"
    
    
    'Identification de l'endroit ou droit se faire la recopie |fffd| partir de la zone de retrieve1
    ActiveSheet.Range("Zone_retrieve1").Select
    MaCol = Range("Zone_retrieve1").Column
    nb_ligne = Range("Zone_retrieve1").Rows.Count
    ligne_retrieve = Range("Zone_retrieve1").Row
    numlig = nb_ligne + ligne_retrieve + 3
       

    'copier-coller-suppression du p|fffd|rim|fffd|tre |fffd| d|fffd|placer (pr concerver les formats)
    ActiveSheet.Range("PerimADeplacer").Select
    selection.Copy
    Cells(numlig, 1).Select
    ActiveSheet.Paste
    ActiveSheet.Range("PerimADeplacer").Select
    selection.Delete Shift:=xlUp
    
    'Redefini la zone d'impression
    ActiveSheet.Range("Zone_retrieve1").Select
    nb_ligne = Range("Zone_retrieve1").Rows.Count
    ligne_retrieve = Range("Zone_retrieve1").Row
    lmax = nb_ligne + ligne_retrieve + 10
    Call RedimZone(Onglet, "Zone_d_impression", lmax + 6)
    
End Sub

'Pour CAJ
'mise en forme de la derniere colonne et rajout des titres

Sub FinalizeLastCol(MonOnglet As String, MaCol As Integer, varlibMAN As Variant, varlibENS As Variant, Titreok As Boolean)
    
    Dim MaLigne, C, l, cmax, lmax As Integer
    Dim cell As Variant
    
    On Error Resume Next
    
    'rajout des titres
    
    If Titreok = True Then
        MaLigne = Range("ZoneTable").Row
        If Worksheets(MonOnglet).Cells(MaLigne - 2, MaCol - 1).Value = "" Then
            Worksheets(MonOnglet).Cells(MaLigne - 2, MaCol - 1).Value = varlibMAN
        End If
        If Worksheets(MonOnglet).Cells(MaLigne - 1, MaCol - 1).Value = "" Then
            Worksheets(MonOnglet).Cells(MaLigne - 1, MaCol - 1).Value = varlibENS
        End If
    End If
    
    
    'cr|fffd|ation de la zone derni|fffd|re col |fffd| parcourir
    l = Worksheets(MonOnglet).Range("ZoneTable").Row
    C = Worksheets(MonOnglet).Range("ZoneTable").Column
    lmax = C + Worksheets(MonOnglet).Range("ZoneTable").Rows.Count - 1
    Range(ActiveSheet.Cells(l, MaCol - 1), ActiveSheet.Cells(lmax, MaCol - 1)).Name = "PlageCol"
    
    'ajout d'un bordure meduim |fffd| la derni|fffd|re colone (visible) du tableau
    For Each cell In Range("PlageCol")
    
        Worksheets(MonOnglet).Cells(MaLigne, MaCol - 1).Select
        If selection.Borders(xlEdgeRight).LineStyle = xlDouble Then
            selection.Borders(xlEdgeRight).LineStyle = xlContinuous
            selection.Borders(xlEdgeRight).Weight = xlMedium
            selection.Borders(xlEdgeRight).ColorIndex = xlAutomatic
        End If
        
        MaLigne = MaLigne + 1
    Next cell
    
End Sub

Attribute VB_Name = "md3_Admin"
'Code du bouton "Mot de passe" de Frmmain
'   ConnectSheet Sheets(SHEET_CONTENT)
'   frmUserPass.txPassOld = fChangePassword(Sheets(SHEET_CONTENT), range("var_Server").Value, frmUserPass.txUser, frmUserPass.txPassOld)
'   Disconnect Sheets(SHEET_CONTENT) 'Deconnexion
Option Explicit

' Display all sheets
Sub ShowAllSheets()
    Dim oSheet As Worksheet
     If InputBox("Entrez votre mot de passe :", "Mot de Passe") <> VBA_PASSWORD Then
        MsgBox "Mauvais mot de passe !", vbExclamation, "Error"
        Exit Sub
    End If
    For Each oSheet In ActiveWorkbook.Worksheets
        oSheet.Visible = xlSheetVisible
        oSheet.Unprotect AUTOMATEPASSWORD
    Next oSheet
    Sheets(SHEET_MAIN).Activate
    SetModeUser
End Sub

' Lock templates
Sub LockTemplate()
    Dim oSheet As Worksheet
    SetModeMacro
    For Each oSheet In ActiveWorkbook.Worksheets
        If Left(oSheet.CodeName, 2) = "T_" Then
            HideSelection oSheet, True
            ActiveWindow.SmallScroll toright:=-200
            ActiveWindow.SmallScroll Down:=-200
            application.GoTo Reference:=oSheet.Cells.SpecialCells(xlCellTypeVisible).Cells(1, 1)
            'oSheet.Protect AUTOMATEPASSWORD, , , , True
        End If
    Next oSheet
    Sheets(SHEET_CONTENT).Activate
    HideTemplate
    SetModeUser
    If MsgBox("Sauvegarde du classeur ?", vbYesNo) = vbYes Then ActiveWorkbook.Save
End Sub
' Unlock templates
Sub UnlockTemplate()
    Dim oSheet As Worksheet
    For Each oSheet In ActiveWorkbook.Worksheets
        If Left(oSheet.CodeName, 2) = "T_" Then
            oSheet.Unprotect AUTOMATEPASSWORD
            HideSelection oSheet, False
        End If
    Next oSheet
    Sheets(SHEET_CONTENT).Activate
    SetModeUser
End Sub
' Display templates
Function ShowTemplate()
Attribute ShowTemplate.VB_ProcData.VB_Invoke_Func = "U\n14"
    Dim oSheet As Worksheet
    ShowTemplate = True
    If InputBox("Entrez votre mot de passe :", "Mot de Passe") <> ADMIN_PASSWORD Then
        MsgBox "Mauvais mot de passe !", vbExclamation, "Error"
        ShowTemplate = False
        Exit Function
    End If
    For Each oSheet In ActiveWorkbook.Worksheets
        If Left(UCase(oSheet.CodeName), 2) = "T_" Or Left(UCase(oSheet.CodeName), 2) = "U_" Then
            oSheet.Visible = xlSheetVisible
        End If
    Next oSheet
    Sheets(SHEET_CONTENT).Activate
    SetModeUser
End Function

' Hide templates
Sub HideTemplate()
Attribute HideTemplate.VB_ProcData.VB_Invoke_Func = "L\n14"
    Dim oSheet As Worksheet
    For Each oSheet In ActiveWorkbook.Worksheets
        If oSheet.Name <> SHEET_MAIN Then
        oSheet.Visible = xlSheetVeryHidden
        Call ProtectReport(oSheet, False)
        End If
    Next oSheet
    Sheets(SHEET_MAIN).Activate
    SetModeUser
End Sub

' Masquer les lignes et colonnes (zones de retrieve)
Sub HideSelection(oSheet As Worksheet, bEtat As Boolean)
    Dim oName As Name
    For Each oName In oSheet.Names
        If InStr(1, oName.Name, ZoneColHide) > 0 Then
            oSheet.Range(oName.Name).EntireColumn.Hidden = bEtat
        ElseIf InStr(1, oName.Name, ZoneLigHide) > 0 Then
            Range(oName.Name).EntireRow.Hidden = bEtat
        End If
    Next oName
End Sub

' Prot|fffd|ge une feuille particuli|fffd|re
Sub ProtectReport(oSheet As Worksheet, bEtat As Boolean)
    If bEtat Then
        oSheet.Protect AUTOMATEPASSWORD, , , , True
    Else
        oSheet.Unprotect AUTOMATEPASSWORD
    End If
End Sub

'Procedure de (d|fffd|)verrouillage des templates
Private Sub btnMode_QuandClic()
    Dim oBtnMode
    Set oBtnMode = Sheets(SHEET_CONTENT).Shapes("btnMode").DrawingObject
    If oBtnMode.Caption = "D|fffd|verrouiller" Then
        UnlockTemplate
        oBtnMode.Caption = "Verrouiller"
    Else
        LockTemplate
        oBtnMode.Caption = "D|fffd|verrouiller"
    End If
End Sub

Private Sub btnLaunch_QuandClic()
  'HideTemplate
  LaunchApp
End Sub
'Procedure de passage en mode administration de template
Sub GoModeAdmin()
    On Error GoTo err_res
    ShowTemplate
    frmMain.Hide
    SetModeUser

err_res:
    Resume Next
End Sub

'Procedure de gestion des saisies utilisateurs
Sub Saisi()

Dim oName As Variant
Dim oSheet, xSheet As Worksheet
Dim oBook, xBook As Workbook
Dim Z_Sais, perimetre As String
Dim lValue As Long
Dim i As Integer 'n|fffd| de colonne
Dim j As Integer 'n|fffd| de ligne
Dim l, lmax, C, cmax, nb_saisi, bis As Integer
Dim SheetBis As String
Dim sUser, sPassword, sServer, sApplication, sDatabase As String
Dim mois_valide As Variant
Dim ApprobPJ As Boolean

test_envoi = 1
nb_saisi = 0
bis = 0
ApprobPJ = True

Set oSheet = ActiveSheet
Set oBook = ActiveWorkbook

For Each xBook In Workbooks
If Left(xBook.Name, 11) = "Integrateur" Then
    xBook.Worksheets("Param").Activate
    sServer = Worksheets("param").Range("Var_Server").Value
    sApplication = Worksheets("param").Range("Var_Application").Value
    sDatabase = Worksheets("param").Range("Var_Database").Value
    sUser = Worksheets("param").Range("Var_User").Value
    sPassword = Worksheets("param").Range("Var_Password").Value
    Worksheets("param").Range("test_envoi").Value = test_envoi
    If Range("Tab_Treeview").Cells(Worksheets("param").Range("NumeroRapport").Value + 3, 2).Value = "S" Then ApprobPJ = False
End If
Next xBook

oSheet.Activate
oBook.Activate
                    
'    On Error GoTo err_res

With ActiveWorkbook.ActiveSheet

    If ApprobPJ Then
        mois_valide = "1"
    Else
        mois_valide = ActiveSheet.Range("mois_valide").Value
    End If

If mois_valide = "1" Then
'Recherche zone de saisie
If Left(UCase(ActiveSheet.CodeName), 2) = "T_" Then
    For Each oName In ActiveSheet.Names
        If InStr(1, UCase(oName.Name), "ZONE_RETRIEVE1") <> 0 Then
            Z_Sais = oName.Name
            
            'Gestion des cas particuliers lors de la saisie
            'Comparaison des donn|fffd|es

            l = ActiveSheet.Range(Z_Sais).Row
            C = ActiveSheet.Range(Z_Sais).Column
            lmax = l + ActiveSheet.Range(Z_Sais).Rows.Count
            cmax = C + ActiveSheet.Range(Z_Sais).Columns.Count

            SheetBis = ActiveSheet.Name & "_bis"
            'oSheet = ActiveSheet.Name

            For i = C To cmax
                   For j = l To lmax
                     'ActiveSheet.Name
                     If Worksheets(SheetBis).Cells(j, i).Value <> ActiveSheet.Cells(j, i).Value Then
                        If Left(ActiveSheet.Cells(j, i).Formula, 1) <> "=" Then
                          nb_saisi = nb_saisi + 1
                        End If
                     End If
                   Next j
            Next i
            
            'ActiveWindow.SelectedSheets.Delete
            
            perimetre = Right(Z_Sais, 1)
            
            If nb_saisi = 0 Then
                If MsgBox("Aucunes saisies effectu|fffd|es. Voulez-vous cependant continuer ?", vbYesNo) = vbYes Then
                GoTo Continu
                Else
                GoTo Finish
                End If
            Else
Continu:
                Range(Z_Sais).Select
                If Var_Password <> "" Then
                    lValue = EssVConnect(Empty, Var_User, Var_Password, Var_Server, Var_Application, Var_Database)
                Else
                
    '                    On Error Resume Next
                        frmUserPass.Show
                        sUser = frmUserPass.txUser
                        sPassword = frmUserPass.txPassOld
                        frmUserPass.Hide
    '                    On Error GoTo 0
                        lValue = EssVConnect(Empty, sUser, sPassword, sServer, sApplication, sDatabase)
                        'Connect oSheet, sServer, sApplication, sDatabase, sUser, sPassword  ' Connecte la feuille
                    
                    'Set oSheet = ActiveSheet
                    'ConnectSheet Worksheets(oSheet)
                    
                End If
                
                Call Send(ActiveSheet, Range(Z_Sais))
                MsgBox (nb_saisi & " nouvelles saisies enregistr|fffd|es.")
                application.Cursor = xlDefault
                Cells(1, 1).Select
             End If
        End If
    Next oName
    SetModeMacro
    Worksheets(SheetBis).Delete
    For Each xSheet In ActiveWorkbook.Sheets
        If Left(UCase(xSheet.CodeName), 2) = "T_" And Right(xSheet.Name, 4) = "_bis" Then
            SetModeMacro
            xSheet.Delete
        End If
    Next xSheet
    SetModeUser
End If

Finish:

'V|fffd|rifie l'existance des feuilles _bis (feuilles de comparaison)
For Each xSheet In ActiveWorkbook.Sheets
    If Left(UCase(xSheet.CodeName), 2) = "T_" Then
        If Right(xSheet.Name, 4) = "_bis" Then
            bis = bis + 1
        End If
    End If
Next xSheet

'Cr|fffd|ation des feuilles bis (pour d|fffd|terminer par comparaison les saisies)
If bis = 0 Then
    For Each xSheet In ActiveWorkbook.Sheets
        If Left(UCase(xSheet.CodeName), 2) = "T_" And Right(xSheet.Name, 4) <> "_bis" Then
            SetModeMacro
            xSheet.Copy Before:=Worksheets(Worksheets.Count)
            ActiveSheet.Name = xSheet.Name & "_bis"
            ActiveSheet.Visible = False
        End If
    Next xSheet
End If

SetModeUser
application.Cursor = xlDefault

Else
    MsgBox "Le mois s|fffd|lectionn|fffd| est valid|fffd| et ne pr|fffd|voie plus les saisies!", vbCritical 'vbExclamation
End If
End With

    sServer = ""
    sApplication = ""
    sDatabase = ""
    sUser = ""
    sPassword = ""

'err_res:
'MsgBox ("echec d'envoi. Merci de reprendre l'op|fffd|ration")
'    Resume Next
End Sub


Attribute VB_Name = "md3_ToolBox"
Option Explicit

Sub CopyFormat(oSource As Worksheet, oTarget As Worksheet)
    Dim oName As Variant
    Dim sZoneName As String
    For Each oName In oSource.Names
        If InStr(1, UCase(oName.Name), "ZONE_RETRIEVE") <> 0 Then
            sZoneName = Mid(oName.Name, InStr(1, oName.Name, "!") + 1)
            oSource.Names(sZoneName).RefersToRange.Copy
            oTarget.Names(sZoneName).RefersToRange.PasteSpecial xlPasteFormats
        End If
    Next oName
End Sub

'Initialise et stocke l'ordre de tri pour la fonction FiltreTri
Sub InitOrdreTri()
    If IsNumeric(ActiveSheet.Range("b3").Value) Then
       OrdreTriAsc = ActiveSheet.Range("b3").Value = 1
       ActiveSheet.Range("b3").Value = 1 + IIf(OrdreTriAsc, 0, 1)
    Else
       OrdreTriAsc = True
    End If
End Sub

'Procedure de remplacement automatique de formats erron|fffd|s "_)"
Sub CorrigeFormatNum()
    'Si nb format personnalis|fffd| trop important, la macro plante en erreur 1004
    Dim oName As Variant
    Dim oSheet As Worksheet
    Dim oFormat, oFormatOld As Variant
    Dim oDebut As Integer
    Dim ocell As Range
Dim x As Integer
x = 50
    For Each oSheet In ActiveWorkbook.Sheets
        If Left(UCase(oSheet.CodeName), 2) = "T_" Then
            For Each oName In oSheet.Names
                If InStr(1, UCase(oName.Name), "ZONE_RETRIEVE") <> 0 Then
Sheets("contenu").Cells(x, 1).Value = oSheet.Name
Sheets("contenu").Cells(x, 2).Value = oSheet.UsedRange.Address
x = x + 1
                    'For Each oCell In range(oName.Name)
                    For Each ocell In oSheet.UsedRange
                        oFormat = ocell.NumberFormat
                        oFormatOld = oFormat
                        If oFormat <> "General" And oFormat <> "Null" And ocell.Font.ColorIndex <> 2 Then
                            oDebut = InStr(1, oFormat, "_)")
                            Do While oDebut > 0
                                oFormat = Left(oFormat, oDebut - 1) + " " + Right(oFormat, Len(oFormat) - oDebut - 1)
                                oDebut = InStr(1, oFormat, "_)")
                            Loop
                            If oFormat <> oFormatOld Then ocell.NumberFormat = oFormat
                        End If
                    Next ocell
                End If
            Next oName
        End If
    Next oSheet
End Sub
Sub CorrigeFormatNumSheet()
'On Error GoTo PbFormat
    'Si nb format personnalis|fffd| trop important, la macro plante en erreur 1004
    Dim oName As Variant
    Dim oSheet As Worksheet
    Dim oFormat As String
    Dim oFormatOld As String
    Dim oDebut As Integer
    Dim ocell As Range
    Set oSheet = ActiveSheet
    If Left(UCase(oSheet.CodeName), 2) = "T_" Then
        For Each oName In oSheet.Names
            If InStr(1, UCase(oName.Name), "ZONE_RETRIEVE") <> 0 Then
                'For Each oCell In range(oName.Name)
                For Each ocell In oSheet.UsedRange
                    oFormat = ocell.NumberFormat
                    oFormatOld = oFormat
                    If oFormat <> "General" And ocell.Font.ColorIndex <> 2 Then
                        oDebut = InStr(1, oFormat, "_)")
                        Do While oDebut > 0
                            oFormat = Left(oFormat, oDebut - 1) + " " + Right(oFormat, Len(oFormat) - oDebut - 1)
                            oDebut = InStr(1, oFormat, "_)")
                        Loop
                        If oFormat <> oFormatOld Then ocell.NumberFormat = oFormat
                    End If
                Next ocell
            End If
        Next oName
    End If
    Exit Sub
PbFormat:
    Resume Next
End Sub


Sub SetModeMacro()
  application.Cursor = xlWait
  application.ScreenUpdating = False
  ' application.Interactive = False
  application.DisplayAlerts = False
  application.Calculation = xlCalculationManual
End Sub

Sub SetModeUser()
  application.Calculation = xlCalculationAutomatic
  application.DisplayAlerts = True
  ' application.Interactive = True
  application.ScreenUpdating = True
  application.Cursor = xlDefault
End Sub

'Import & Export de module
Private Sub ExImportVBComponent(ByVal CompFileName As String, ByVal CompTool As String, ByVal CompFileType As String, ByVal CompImport As Boolean)
    Dim oPath As String
    Dim oFile As String
    Dim oModule, VBComp As Variant
    
    oPath = "S:\Gestion France (reporting)\4-Outils\4-1 Automate & Analyseur\Code Unique\"
    Set oModule = ActiveWorkbook.VBProject.VBComponents
    oFile = oPath & CompFileName & LTrim(CompTool) & "." & CompFileType
    ' source file exist for import
    If Dir(oFile) <> "" And CompImport Then
        On Error Resume Next ' ignores any errors if the project is protected
        For Each VBComp In oModule
            If UCase(VBComp.Name) = UCase(CompFileName) Then ActiveWorkbook.VBProject.VBComponents.Remove VBComp
        Next
        oModule.Import oFile ' inserts component from file
        On Error GoTo 0
    ElseIf Not CompImport Then
        For Each VBComp In oModule
            If UCase(VBComp.Name) = UCase(CompFileName) Then ActiveWorkbook.VBProject.VBComponents(CompFileName).Export oFile
        Next
    End If
End Sub

'Import automatique des modules g|fffd|n|fffd|riques
Private Sub ImportVBModule()
    ExImportVBComponent "frm4Date", "", "frm", True
    ExImportVBComponent "frmEssInfo", "", "frm", True
    ExImportVBComponent "frmSearch", "", "frm", True
    ExImportVBComponent "frmUserPass", "", "frm", True
    ExImportVBComponent "md0_Declare", "", "bas", True
    ExImportVBComponent "md0_DeclareEssbaseAPI", "", "bas", True
    ExImportVBComponent "md0_Office97", "", "bas", True
    ExImportVBComponent "md1_Essbase", "", "bas", True
    ExImportVBComponent "md2_Analyseur", "", "bas", True
    ExImportVBComponent "md2_Main", "", "bas", True
    ExImportVBComponent "md2_Select", "", "bas", True
    ExImportVBComponent "md3_Admin", "", "bas", True
    ExImportVBComponent "md3_ToolBox", "", "bas", True
    ExImportVBComponent "md9_OldBnD", "", "bas", True
    ExImportVBComponent "md9_Test_HAA", "", "bas", True
    If MsgBox("Voulez-vous importer la feuille FrmMain g|fffd|n|fffd|rique ?", vbYesNo) = vbYes Then
        ExImportVBComponent "frmMain", "", "frm", True
        MsgBox "Attention md0_Declarexxx (sp|fffd|cifique) non import|fffd| automatiquement !"
    Else
        MsgBox "Attention FrmMain (g|fffd|n|fffd|rique) et md0_Declarexxx (sp|fffd|cifique) non import|fffd|s automatiquement !"
    End If
End Sub

'Export automatique des modules g|fffd|n|fffd|riques et sp|fffd|cifiques
Private Sub ExportVBModule()
    'Export tous modules communs (parametre 2=vide)
    ExImportVBComponent "frm4Date", "", "frm", False
    ExImportVBComponent "frmEssInfo", "", "frm", False
    ExImportVBComponent "frmMain", "", "frm", False
    ExImportVBComponent "frmSearch", "", "frm", False
    ExImportVBComponent "frmUserPass", "", "frm", False
    ExImportVBComponent "md0_Declare", "", "bas", False
    ExImportVBComponent "md0_DeclareEssbaseAPI", "", "bas", False
    ExImportVBComponent "md0_Office97", "", "bas", False
    ExImportVBComponent "md1_Essbase", "", "bas", False
    ExImportVBComponent "md2_Analyseur", "", "bas", False
    ExImportVBComponent "md2_Main", "", "bas", False
    ExImportVBComponent "md2_Select", "", "bas", False
    ExImportVBComponent "md3_Admin", "", "bas", False
    ExImportVBComponent "md3_ToolBox", "", "bas", False
    ExImportVBComponent "md9_OldBnD", "", "bas", False
    ExImportVBComponent "md9_Test_HAA", "", "bas", False
    'Export modules sp|fffd|cifiques (param|fffd|tre 2=application)
    ExImportVBComponent "md0_Declare" & Left(Range("var_application").Value, 4), "", "bas", False
    'ExImportVBComponent "frmMain", Range("var_application").Value, "frm", False
End Sub


Attribute VB_Name = "md9_OldBnD"
Option Explicit

' ================================================================================================
' =   MODULE PERMETTANT :
' =         - LE TEST DE PRESENCE DE L'ADD IN ESSBASE
' =         - LA SAUVEGARDE DES OPTIONS GLOBALES DU CLASSEUR
' =         - LA NAVIGATION DANS L'AUTOMATE
' =         - SELECTION DE TOUTE UNE LISTE
' ================================================================================================


Public Type FileVersion
    FileVersion As String        ' Full file version as a string
    FileVersionMSl As Integer    ' File version MSB Low
    FileVersionMSh As Integer    ' File version MSB High
    FileVersionLSl As Integer    ' File version LSB Low
    FileVersionLSh As Integer    ' File version LSB High
    ProductVersion As String     ' File product version as a string
    ProductVersionMSl As Integer ' Product version MSB low
    ProductVersionMSh As Integer ' Product version MSB high
    ProductVersionLSl As Integer ' Product version LSB low
    ProductVersionLSh As Integer ' Product version LSB high
End Type

Public Type VS_FIXEDFILEINFO
    dwSignature As Long
    dwStrucVersionl As Integer
    dwStrucVersionh As Integer
    dwFileVersionMSl As Integer
    dwFileVersionMSh As Integer
    dwFileVersionLSl As Integer
    dwFileVersionLSh As Integer
    dwProductVersionMSl As Integer
    dwProductVersionMSh As Integer
    dwProductVersionLSl As Integer
    dwProductVersionLSh As Integer
    dwFileFlagsMask As Long
    dwFileFlags As Long
    dwFileOS As Long
    dwFileType As Long
    dwFileSubtype As Long
    dwFileDateMS As Long
    dwFileDateLS As Long
End Type


Global Const gintMAX_SIZE% = 255
Global Const gstrNULL$ = ""
Global Const gstrSEP_DIR = "\"
Global Const EssRegOptionsPath As String = "HKEY_CURRENT_USER\Software\Hyperion Solutions\Essbase\CSL Global Options"

Declare Function WinExec Lib "kernel32" _
    (ByVal lpCmdLine As String, _
    ByVal nCmdShow As Long) _
As Long

Public Declare Function GetFileVersionInfo Lib "Version.dll" Alias "GetFileVersionInfoA" _
    (ByVal lptstrFilename As String, _
    ByVal dwHandle As Long, _
    ByVal dwLen As Long, _
    lpData As Any) _
  As Long

Public Declare Function GetFileVersionInfoSize Lib "Version.dll" Alias "GetFileVersionInfoSizeA" _
    (ByVal lptstrFilename As String, _
    lpdwHandle As Long) _
As Long

Public Declare Function VerQueryValue Lib "Version.dll" Alias "VerQueryValueA" _
    (pBlock As Any, _
    ByVal lpSubBlock As String, _
    lplpBuffer As Any, _
    puLen As Long) _
As Long

Public Declare Sub MoveMemory Lib "kernel32" Alias "RtlMoveMemory" _
    (dest As Any, _
    ByVal source As Long, _
    ByVal length As Long)

Declare Function GetWindowsDirectory Lib "kernel32" Alias "GetWindowsDirectoryA" (ByVal lpBuffer As String, ByVal nsize As Long) As Long
Declare Function GetVersion Lib "kernel32" () As Long

' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
' +  TEST DE PRESENCE DE L'ADD IN ESSBASE
' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

' ------------------------------------------------------------------------------------------------------------------------------------------------
' - Test la pr|fffd|sence de l'AddIn Essbase
' ------------------------------------------------------------------------------------------------------------------------------------------------
Function TestAddIn() As Boolean

  Dim CmdBar
  Dim CmdBar_name
  TestAddIn = False
    
  For Each CmdBar In CommandBars
    
    CmdBar_name = Replace(CmdBar.Name, "&", "")

    If CmdBar_name = "Essbase" Then
      
      TestAddIn = True
      Exit Function
    
    Else
      
      TestAddIn = False
      
    End If
  
  Next CmdBar
  
End Function

' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
' +  SAUVEGARDE DES OPTIONS GLOBALES DU CLASSEUR
' +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


' -----------------------------------------------------------
' - FUNCTION: GetWindowsDir
' -
' - Calls the windows API to get the windows directory and
' - ensures that a trailing dir separator is present
' -
' - Returns: The windows directory
' -----------------------------------------------------------

Function GetWindowsDir() As String
    Dim strBuf As String
    On Error Resume Next

    '
    'Get the windows directory and then trim the buffer to the exact length
    'returned and add a dir sep (backslash) if the API didn't return one
    '
    'If GetWindowsDirectory(strBuf, gintMAX_SIZE) > 0 Then
    '    strBuf = StripTerminator$(strBuf)
    '    AddDirSep strBuf

    '    GetWindowsDir = UCase(strBuf)
    'Else
    '    GetWindowsDir = gstrNULL
    'End If
    If GetAttr("C:\temp\") And vbDirectory = "" Then
        MkDir UCase("C:\temp\")
    End If
    GetWindowsDir = UCase("C:\temp\")

End Function

' -----------------------------------------------------------
' - FUNCTION: StripTerminator
' -
' - Returns a string without any zero terminator.  Typically,
' - this was a string returned by a Windows API call.
' -
' - IN: [strString] - String to remove terminator from
' -
' - Returns: The value of the string passed in minus any
' -          terminating zero.
' -----------------------------------------------------------

Function StripTerminator(ByVal strString As String) As String
    Dim intZeroPos As Integer

    intZeroPos = InStr(strString, Chr$(0))
    If intZeroPos > 0 Then
        StripTerminator = Left$(strString, intZeroPos - 1)
    Else
        StripTerminator = strString
    End If
End Function

' -----------------------------------------------------------
' - SUB: AddDirSep
' - Add a trailing directory path separator (back slash) to the
' - end of a pathname unless one already exists
' -
' - IN/OUT: [strPathName] - path to add separator to
' -----------------------------------------------------------

Public Sub AddDirSep(strPathName As String)
  If Right$(RTrim$(strPathName), Len(gstrSEP_DIR)) <> gstrSEP_DIR Then
    strPathName = RTrim$(strPathName) & gstrSEP_DIR
  End If
End Sub



' ------------------------------------------------------------------------------------------------------------------------------------------------
' - Sauvegarde des options globales du classeurs
' ------------------------------------------------------------------------------------------------------------------------------------------------
Sub SaveOldEssbasseIni()
    Dim RepEssbaseIni As String
    Dim strCmdLine As String
    
    RepEssbaseIni = GetWindowsDir()
    
    If AreOptionsInRegistry() = True Then
        Dim objShell

        Set objShell = CreateObject("shell.application")
        objShell.ShellExecute "regedit.exe", "/e " & RepEssbaseIni & "EssbaseReg.reg " & Chr$(34) & EssRegOptionsPath & Chr$(34), "", "open", 1
        Set objShell = Nothing
    Else
        Workbooks.OpenText Filename:=RepEssbaseIni & "essbase.ini"
        ActiveWorkbook.SaveAs Filename:=RepEssbaseIni & "essbaseOld.ini", FileFormat:= _
            xlText
        ActiveWindow.Close SaveChanges:=False
    End If

End Sub


' ------------------------------------------------------------------------------------------------------------------------------------------------
' - R|fffd|cup|fffd|ration des options globales du classeurs
' ------------------------------------------------------------------------------------------------------------------------------------------------
Sub RecupOldEssbaseIni()
    Dim RepEssbaseIni As String
    Dim strCmdLine As String
   
    RepEssbaseIni = GetWindowsDir()
    
    If AreOptionsInRegistry Then
        If Dir(RepEssbaseIni & "EssbaseReg.reg") <> "" Then
            Dim objShell

            Set objShell = CreateObject("shell.application")
            objShell.ShellExecute "regedit.exe", "/s C:\TEMP\EssbaseReg.reg ", "", "open", 1
            Set objShell = Nothing
        Else
            MsgBox "Les pr|fffd|c|fffd|dents param|fffd|tres de l'Add-In Essbase" & Chr(10) & _
                        "n'ont pas pu |fffd|tre restaur|fffd|s.", vbExclamation
        End If
    Else
        If Dir(RepEssbaseIni & "essbaseOld.ini") <> "" Then
            Workbooks.OpenText Filename:=RepEssbaseIni & "essbaseOld.ini"
            Kill RepEssbaseIni & "essbase.ini"
            ActiveWorkbook.SaveAs Filename:=RepEssbaseIni & "essbase.ini", FileFormat:= _
                xlText, ReadOnlyRecommended:=False, CreateBackup:=False
            ActiveWindow.Close SaveChanges:=False
            Kill RepEssbaseIni & "essbaseOld.ini"
        End If
    End If
    
End Sub



Public Function AreOptionsInRegistry() As Boolean
    Dim intEssReleaseArray
    Dim i As Integer

    ' rechercher l'addin pour recuperer le fichier+nom
    For i = 1 To AddIns.Count
        If UCase(AddIns(i).Name) = "ESSEXCLN.XLL" Then
            intEssReleaseArray = GetResourceVersion(AddIns(i).FullName)
            Exit For
        End If
    Next

    ' on retourne true si on est en version >= 6.5
    'If intEssReleaseArray(0) >= 6 And intEssReleaseArray(1) >= 5 Then
    If intEssReleaseArray(0) > 6 Or (intEssReleaseArray(0) >= 6 And intEssReleaseArray(1) >= 5) Then
        AreOptionsInRegistry = True
    Else
        AreOptionsInRegistry = False
    End If
    
End Function


'==============================================================================
' Gestion des options d'un onglet (variables pour options : 1,2,5 et 9)
'==============================================================================
Public Function InitSheetOption(oSheet As Worksheet, MonPrm1 As Integer, MonPrm2 As Boolean, MonPrm5 As Integer, MonPrm6 As Boolean, MonPrm9 As String, MonPrm11 As Boolean, MonPrm19 As String) As Long
    Dim sts As Long
    Dim MonOnglet As String
    
    sts = 0
    
    MonOnglet = fGetSheetName(oSheet)
    
    If EssVGetSheetOption(MonOnglet, 7) = True Then
        sts = sts + EssVSetSheetOption(MonOnglet, 7, False)
    End If
    If EssVGetSheetOption(MonOnglet, 6) = True Then
        sts = sts + EssVSetSheetOption(MonOnglet, 6, False)
        sts = sts + EssVSetSheetOption(MonOnglet, 11, False)
    Else
        sts = sts + EssVSetSheetOption(MonOnglet, 11, False)
        sts = sts + EssVSetSheetOption(MonOnglet, 6, False)
    End If
    'Drill Level : 1,2,3,4
    sts = sts + EssVSetSheetOption(MonOnglet, 1, MonPrm1)
    'Include-selection setting : boolean
    sts = sts + EssVSetSheetOption(MonOnglet, 2, MonPrm2)
    'Specify Indent setting : 1,2,3,4
    sts = sts + EssVSetSheetOption(MonOnglet, 5, MonPrm5)
    'Enable Suppress Missing setting : boolean
    If MonPrm6 = True Then
        sts = sts + EssVSetSheetOption(MonOnglet, 6, MonPrm6)
    End If
    'Retain on Retrieval formula preservation setting: False si MonPrm6 = True
    If MonPrm11 = True Then
        sts = sts + EssVSetSheetOption(MonOnglet, 11, MonPrm11)
    End If
    'Specify alias for missing text: text
    sts = sts + EssVSetSheetOption(MonOnglet, 9, MonPrm9)
    '#NoAccess label
    sts = sts + EssVSetSheetOption(MonOnglet, 19, MonPrm19)
    
    InitSheetOption = sts
End Function

'==============================================================================
' Gestion des options globales
'==============================================================================
Public Function InitGlobalOption() As Long
    Dim sts As Long
    sts = 0
' Enable secondary button setting : false
    sts = sts + EssVSetGlobalOption(1, False)
' Enable double-clicking setting  : false
    sts = sts + EssVSetGlobalOption(2, False)
' Enable FlashBack setting : false
    sts = sts + EssVSetGlobalOption(3, False)
' This setting is maintained for backward compatibility with previous Essbase versions : false
    sts = sts + EssVSetGlobalOption(4, False)
' Specify message level setting : 4 (1   Info, Warning & Error messages, 2   Warning & Error messages only, 3   Error Messages only, 4   No messages)
    sts = sts + EssVSetGlobalOption(5, 4)
' Enable display unknown messages setting : false
    sts = sts + EssVSetGlobalOption(6, False)
' Enable route messages to log setting : false
    sts = sts + EssVSetGlobalOption(7, False)
' Enable purge log setting : false
    sts = sts + EssVSetGlobalOption(8, False)
' Enable double-clicking to browse Linked Report Objects setting : false
    sts = sts + EssVSetGlobalOption(9, False)
' Display Member Select Save dialog box setting : false
    sts = sts + EssVSetGlobalOption(10, False)
' Enable Navigate Without Data : false
    sts = sts + EssVSetGlobalOption(11, False)
    InitGlobalOption = sts
End Function


Public Function GetResourceVersion(strFileName As String)
  ' Comments  : Returns file version information.
  ' Parameters: strFileName - Name of the file
  ' Returns   : product version bytes array
  '
    Dim lngRC As Long
    Dim lngDummy As Long
    Dim abytBuffer() As Byte
    Dim lngBufferLen As Long
    Dim lngVerPointer As Long
    Dim udtVerBuffer As VS_FIXEDFILEINFO
    Dim lngVerbufferLen As Long
    Dim recFileVer As FileVersion
    Dim intProdVerArray(3) As String
    
    On Error GoTo PROC_ERR
    
    ' Get the size.
    lngBufferLen = GetFileVersionInfoSize(strFileName, lngDummy)
    If lngBufferLen < 1 Then
    Exit Function
    End If
    
    ' Set up the byte array.
    ReDim abytBuffer(lngBufferLen)
    
    ' Get the file version information.
    lngRC = GetFileVersionInfo(strFileName, 0&, lngBufferLen, abytBuffer(0))
    lngRC = VerQueryValue(abytBuffer(0), "\", lngVerPointer, lngVerbufferLen)
    
    ' Manipulate the bits.
    MoveMemory udtVerBuffer, lngVerPointer, Len(udtVerBuffer)
    
    ' Build the file version string.
    recFileVer.FileVersion = _
    Format$(udtVerBuffer.dwFileVersionMSh) & "." & _
    Format$(udtVerBuffer.dwFileVersionMSl) & "." & _
    Format$(udtVerBuffer.dwFileVersionLSh) & "." & _
    Format$(udtVerBuffer.dwFileVersionLSl)
    
    recFileVer.FileVersionLSh = udtVerBuffer.dwFileVersionLSh
    recFileVer.FileVersionLSl = udtVerBuffer.dwFileVersionLSl
    recFileVer.FileVersionMSh = udtVerBuffer.dwFileVersionMSh
    recFileVer.FileVersionMSl = udtVerBuffer.dwFileVersionMSl
    
    ' Build the product version string.
    recFileVer.ProductVersion = _
    Format$(udtVerBuffer.dwProductVersionMSh) & "." & _
    Format$(udtVerBuffer.dwProductVersionMSl) & "." & _
    Format$(udtVerBuffer.dwProductVersionLSh) & "." & _
    Format$(udtVerBuffer.dwProductVersionLSl)
    
    recFileVer.ProductVersionLSh = udtVerBuffer.dwProductVersionLSh
    recFileVer.ProductVersionLSl = udtVerBuffer.dwProductVersionLSl
    recFileVer.ProductVersionMSh = udtVerBuffer.dwProductVersionMSh
    recFileVer.ProductVersionMSl = udtVerBuffer.dwProductVersionMSl
    
    
    intProdVerArray(0) = recFileVer.ProductVersionMSh
    intProdVerArray(1) = recFileVer.ProductVersionMSl
    intProdVerArray(2) = recFileVer.ProductVersionLSh
    intProdVerArray(3) = recFileVer.ProductVersionLSl

    
    GetResourceVersion = intProdVerArray
    
PROC_EXIT:
    Exit Function
    
PROC_ERR:
    MsgBox "Error: " & Err.Number & ". " & Err.Description, , _
    "GetResourceVersion"
    Resume PROC_EXIT

End Function


Attribute VB_Name = "md9_Test_HAA"
Option Explicit
Private Sub Haa_Init()
    Dim CurrentTreeview As TreeView
    Dim oSheet As Worksheet
    Dim currTreeview As TreeView
    Dim tabAxes As Variant
    Dim TabTreeView As Variant
    Dim i
    Dim j
    Dim currObject
'On Error GoTo Haa_Init_Err
  
    ' pour les tests pas de retrieve
    situTEST = True
    
    
'    SetModeMacro
   frmMain.Show
    ' Populate Month Combo
    frmMain.LstMM.AddItem ("Janvier")
    frmMain.LstMM.AddItem ("F|fffd|vrier")
    frmMain.LstMM.AddItem ("Mars")
    frmMain.LstMM.AddItem ("Avril")
    frmMain.LstMM.AddItem ("Mai")
    frmMain.LstMM.AddItem ("Juin")
    frmMain.LstMM.AddItem ("Juillet")
    frmMain.LstMM.AddItem ("Ao|fffd|t")
    frmMain.LstMM.AddItem ("Septembre")
    frmMain.LstMM.AddItem ("Octobre")
    frmMain.LstMM.AddItem ("Novembre")
    frmMain.LstMM.AddItem ("D|fffd|cembre")
    frmMain.LstMM.ListIndex = frmMain.LstMM.ListCount - 1
    
    ' Populate Year Combo
    frmMain.LstAA.AddItem "2003"
    frmMain.LstAA.AddItem "2004"
    frmMain.LstAA.ListIndex = frmMain.LstAA.ListCount - 1
    
    
    ' Populate Reports Treeview
    frmMain.tvwInitReport
'    axeVisible = "________"
    ' initialisation de la table des treeview visibles et nb de noeuds selectionn|fffd|s
    Set TabTreeView = Worksheets("param").Range("tab_Treeview")
    For i = 2 To MAXVAL + 1
        TabTreeView(2, i).Value = 0
        TabTreeView(3, i).Value = 0
    Next i
    ' chargement des treeview axes
    Set tabAxes = Worksheets("param").Range("tab_Axes")
    For i = 1 To 8
        If tabAxes(i, 2).Value <> "" Then
            For Each currObject In frmMain.Controls
                If UCase(currObject.Name) = "TRV" & tabAxes(i, 1).Value Then
                    Set currTreeview = currObject
                    GetHierarchie Worksheets(tabAxes(i, 1).Value), currTreeview, True, False
                End If
            Next currObject
        End If
    Next i
    frmMain.MultiPage1.Value = 0

  
  
    Exit Sub
 
Haa_Init_Err:
    
    MsgBox "Erreur lors de l'initialisation du formulaire", vbCritical, "Error"
'    ThisWorkbook.Close False
'    SetModeUser

End Sub


Private Sub HAA_QuickDeleteNames()
'Quickly delete multi-selected names By Shailesh Shah, mpep

  If TypeName(ActiveWorkbook) <> "Workbook" Then
    Exit Sub
  End If
  application.ScreenUpdating = 0
Dim i As Integer, x As Integer, Top As Integer, SelItem As Integer
Dim MyMsg As String, MyCap As String
Dim MyDlg As DialogSheet, LBox1 As ListBox

  MyCap = "[D|fffd|truire les noms]"
  MyMsg = "Aucun nom |fffd| d|fffd|truire n'a |fffd|t|fffd| trouv|fffd|"
  Set MyDlg = ThisWorkbook.DialogSheets.Add
  With MyDlg
    .ListBoxes.Add 78, 35, 150, 16.5
    Set LBox1 = .ListBoxes(1)
    .Buttons.Left = 240
  End With
rept:
  Top = i = x = 0
  With LBox1
    .MultiSelect = xlSimple
    .RemoveAllItems
  End With
  With ActiveWorkbook
    For x = 1 To .Names.Count
      If .Names(x).Visible Then
        LBox1.AddItem .Names(x).Name & .Names(x)
        Top = Top + 10
      End If
    Next x
  End With
  LBox1.Height = application.Min(IIf(Top <= 40, 40, Top), 300)
  With MyDlg.DialogFrame
    .Height = application.Min(.Top + LBox1.Height, 320)
    .Width = 230
    .Caption = MyCap
  End With
  If MyDlg.Show Then
    With LBox1
      i = 0
      SelItem = 0
      For i = .ListCount To 1 Step -1
        If .Selected(i) Then
          SelItem = SelItem + 1
          ActiveWorkbook.Names(Left(.List(i), InStr(1, .List(i), "=") - 1)).Delete
        End If
      Next i
      If SelItem = 0 Then MsgBox MyMsg
      GoTo rept: End
    End With
  End If
  application.ScreenUpdating = 0
  application.DisplayAlerts = 0
  MyDlg.Delete
  application.ScreenUpdating = 1
  application.DisplayAlerts = 1
End Sub

Private Sub HAA_CreateZone()
Attribute HAA_CreateZone.VB_ProcData.VB_Invoke_Func = "q\n14"
    Dim l As Integer
    Dim C As Integer
    Dim lmax As Integer
    Dim cmax As Integer
    Dim nz As String
    nz = InputBox("entrer le nom de la zone")

    l = selection.Row
    C = selection.Column
'    lmax = l + selection.Rows.Count
    lmax = l + selection.Rows.Count - 1
    cmax = C + selection.Columns.Count - 1
       
'    If ActiveSheet.Names(nz).index > 0 Then
'        ActiveSheet.Names(nz).Delete
'    End If
    ActiveSheet.Names.Add Name:=nz, _
        RefersTo:="=" + Range(Cells(l, C), Cells(lmax, cmax)).Address

End Sub





' InQuest injected base64 decoded content
' zw2E

INQUEST-PP=macro
