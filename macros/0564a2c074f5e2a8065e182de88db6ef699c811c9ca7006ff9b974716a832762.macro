Attribute VB_Name = "Module1"
Sub CopyData_E()
Dim ws As Worksheet
Dim DataFile As String
Dim varCellContent As Worksheet
On Error GoTo errHandler

   Set ws = ActiveSheet
   
    MsgBox ("Please select a file to copy data from.")
    DataFile = Application.GetOpenFilename("Excel Files(*.xls; *.xlsx; *.xlsm), *.xls; *.xlsx; *.xlsm", 1, "Select One File To Open", , False)
    

          Workbooks.Open DataFile, UpdateLinks:=False
                
        
     Set varCellContent = Application.InputBox("Select any cell on the cost summary sheet.", Type:=8).Parent
    
 

 
 Sheets(varCellContent.Name).Range("F9:F110").Copy
 ws.Range("E9:E110").PasteSpecial Paste:=xlPasteValues
 
        ActiveWorkbook.Close False
    
    
exitHandler:
    Exit Sub
errHandler:
    MsgBox "Estimate Not Selected"
    Resume exitHandler
    
End Sub
Attribute VB_Name = "Module2"
Sub CopyData_F()
Dim ws As Worksheet
Dim DataFile As String
Dim varCellContent As Worksheet
On Error GoTo errHandler

   Set ws = ActiveSheet
   
    MsgBox ("Please select a file to copy data from.")
    DataFile = Application.GetOpenFilename("Excel Files(*.xls; *.xlsx; *.xlsm), *.xls; *.xlsx; *.xlsm", 1, "Select One File To Open", , False)
    

          Workbooks.Open DataFile, UpdateLinks:=False
                
        
     Set varCellContent = Application.InputBox("Select any cell on the cost summary sheet.", Type:=8).Parent
    
 

 
 Sheets(varCellContent.Name).Range("F9:F110").Copy
 ws.Range("F9:F110").PasteSpecial Paste:=xlPasteValues
 
        ActiveWorkbook.Close False
    
    
exitHandler:
    Exit Sub
errHandler:
    MsgBox "Estimate Not Selected"
    Resume exitHandler
    
End Sub

Attribute VB_Name = "Module3"
Sub CopyData_G()
Dim ws As Worksheet
Dim DataFile As String
Dim varCellContent As Worksheet
On Error GoTo errHandler

   Set ws = ActiveSheet
   
    MsgBox ("Please select a file to copy data from.")
    DataFile = Application.GetOpenFilename("Excel Files(*.xls; *.xlsx; *.xlsm), *.xls; *.xlsx; *.xlsm", 1, "Select One File To Open", , False)
    

          Workbooks.Open DataFile, UpdateLinks:=False
                
        
     Set varCellContent = Application.InputBox("Select any cell on the cost summary sheet.", Type:=8).Parent
    
 

 
 Sheets(varCellContent.Name).Range("F9:F110").Copy
 ws.Range("G9:G110").PasteSpecial Paste:=xlPasteValues
 
        ActiveWorkbook.Close False
    
    
exitHandler:
    Exit Sub
errHandler:
    MsgBox "Estimate Not Selected"
    Resume exitHandler
    
End Sub

Attribute VB_Name = "Module4"
Public Sub SpellCheckIt()

'ActiveSheet.Unprotect "tbdexcel@101#$%"

ActiveSheet.Columns("AZ:BI").ClearContents

ActiveSheet.CheckSpelling

MsgBox ("Spell Check Complete / No Errors Found")

'ActiveSheet.Protect "tbdexcel@101#$%", DrawingObjects:=False, Contents:=True, Scenarios:=False, _
'AllowFormattingCells:=True, AllowFormattingColumns:=False, AllowFormattingRows:=True, _
'AllowInsertingColumns:=False, AllowInsertingRows:=True, AllowInsertingHyperlinks:=True, _
'AllowDeletingColumns:=False, AllowDeletingRows:=True, AllowSorting:=True, AllowFiltering:=True, _
'AllowUsingPivotTables:=True

End Sub

Attribute VB_Name = "Module5"
Sub CreateTableOfContents()
    ' Copyright 1999 MrExcel.com
    ' Determine if there is already a Table of Contents
    TOCFound = False
    For Each S In Worksheets
        If S.Name = "CONTENTS" Then
            TOCFound = True
            Exit For
        End If
    Next S
      
    ' Set up the table of contents page
    TOCRow = 14
    'PageCount = 0
    'Range("A2").Value = "Table of Contents"
    'Range("A6").CurrentRegion.Clear
    'Range("A6").Value = "Subject"
    'Range("A6").ColumnWidth = 36
    'Range("B6").Value = "Page(s)"
    'Range("B6").ColumnWidth = 12
    ' Do a print preview on all sheets so Excel calcs page breaks
    ' The user must manually close the PrintPreview window
    'Worksheets.Select
    
UserForm1.Show
  
    'Msg = "Excel needs to do a print preview to calculate the number of pages. "
    'Msg = Msg & "Please dismiss the print preview by clicking close."
    'MsgBox Msg
    'ActiveWindow.SelectedSheets.PrintPreview
    ' Loop through each sheet, collecting TOC information
    
    Worksheets("CONTENTS").Range("B14:G100").ClearContents
    
    For Each S In ActiveWindow.SelectedSheets
    If S.Visible Then
        S.Select
   
    ' Use any one of the following 3 lines
        ThisName = ActiveSheet.Name
        'ThisName = Range("A1").Value
        'ThisName = ActiveSheet.PageSetup.LeftHeader
        HPages = ActiveSheet.HPageBreaks.Count + 1
        VPages = ActiveSheet.VPageBreaks.Count + 1
        ThisPages = HPages * VPages
        ' Enter info about this sheet on TOC
        Sheets("CONTENTS").Select
        
        Range("B" & TOCRow).Value = ThisName
        Range("G" & TOCRow).NumberFormat = "@"
        If ThisPages = 1 Then
            Range("G" & TOCRow).Value = PageCount + 1 & " "
        Else
            Range("G" & TOCRow).Value = PageCount + 1 & " - " & PageCount + ThisPages
        End If
        PageCount = PageCount + ThisPages
        TOCRow = TOCRow + 3
     End If
    Next S
    
End Sub

Attribute VB_Name = "Module6"
Sub SaveAs_PDF()

UserForm2.Show vbModeless

End Sub
Attribute VB_Name = "Module7"
Public Function URLEncode( _
   StringVal As String, _
   Optional SpaceAsPlus As Boolean = False _
) As String

  Dim StringLen As Long: StringLen = Len(StringVal)

  If StringLen > 0 Then
    ReDim result(StringLen) As String
    Dim i As Long, CharCode As Integer
    Dim Char As String, Space As String

    If SpaceAsPlus Then Space = "+" Else Space = "%20"

    For i = 1 To StringLen
      Char = Mid$(StringVal, i, 1)
      CharCode = Asc(Char)
      Select Case CharCode
        Case 97 To 122, 65 To 90, 48 To 57, 45, 46, 95, 126
          result(i) = Char
        Case 32
          result(i) = Space
        Case 0 To 15
          result(i) = "%0" & Hex(CharCode)
        Case Else
          result(i) = "%" & Hex(CharCode)
      End Select
    Next i
    URLEncode = Join(result, "")
  End If
End Function

Sub DownloadData()

Sheets("COVER").Pictures("Picture 31").Formula = ""
'your code here


On Error GoTo errHandler

Application.ScreenUpdating = False


Dim myWb As Excel.Workbook

    Set myWb = ActiveWorkbook

'Table Parse Variables
    Dim wk As Worksheet
    Dim Rng As Range
    Dim strResult As MSHTML.HTMLDocument
    Dim hTable As MSHTML.HTMLTable
    Dim hRow As MSHTML.HTMLTableRow
    Dim hCell As MSHTML.HTMLTableCell
    Dim SetSect As String
    Dim LocationIndex As String
    Dim MarketIndex As String


    
    If Len(ActiveSheet.TextBox1.Value) < 3 Then
        MsgBox "Please enter more than two characters"

    End

    End If
    
    If Len(ActiveSheet.TextBox2.Value) < 1 Then
        MsgBox "Please enter Location Index"

    End

    End If
    
    If Len(ActiveSheet.TextBox3.Value) < 1 Then
        MsgBox "Please enter Market Index"

    End

    End If
    
    SetSect = ActiveSheet.TextBox1.Value
    LocationIndex = ActiveSheet.TextBox2.Value
    MarketIndex = ActiveSheet.TextBox3.Value
    

UserForm4.Show vbModeless

'url and form parameters
Dim strURL As String: strURL = "http://www.baydim.com/TBDconsultants/TBDprivate/Estimator/UnitRatesSearch.asp"

'set the worksheet where the data is to be extracted to
    Set wk = ActiveSheet
    'wk.Visible = True
    'wk.Select




'create the XMLHTTP object
Dim XMLhttp: Set XMLhttp = CreateObject("Msxml2.ServerXMLHTTP")
'Dim strResult As String

'initialise the XMLHTTP connection with a HTTP synchronous request
XMLhttp.Open "GET", strURL, False

XMLhttp.setRequestHeader "Cookie", "cVar01=" & LocationIndex & " ;path=/TBDconsultants/TBDprivate/Estimator"
XMLhttp.setRequestHeader "Cookie", "cVar02=" & LocationIndex & " ;path=/TBDconsultants/TBDprivate/Estimator"
XMLhttp.setRequestHeader "Cookie", "cVar03=" & MarketIndex & " ;path=/TBDconsultants/TBDprivate/Estimator"
XMLhttp.setRequestHeader "Cookie", "cVar04=" & MarketIndex & " ;path=/TBDconsultants/TBDprivate/Estimator"
XMLhttp.setRequestHeader "Cookie", "SetSect=" & URLEncode(SetSect, True) & " ;path=/TBDconsultants/TBDprivate/Estimator"
XMLhttp.setRequestHeader "Content-Type", "text/html"
XMLhttp.send strRequest

'wait until ready to read
    Do
        DoEvents
    Loop Until XMLhttp.readyState = 4





'create a document object
Set strResult = CreateObject("htmlfile")


'set the body of the document that the response text
strResult.body.innerHtml = XMLhttp.responseText

'wk.Rows("2:" & Rows.Count).ClearContents
wk.Columns("BA:BI").ClearContents
wk.Columns("BA:BI").NumberFormat = "General"

 'obtain the table where the Id matches
    Set hTable = strResult.getElementsByTagName("table")(0)
 
    'set the range where the destination starts at
    Set Rng = Range("BA1")
    

     
    'for each row
    For Each hRow In hTable.Rows
         
         
         
        'for each cell
        For Each hCell In hRow.Cells
         
         UserForm4.Label1.Caption = "Updating List for " & hCell.outerText & "..."
        DoEvents
         
            'write to the range with the contents
            Rng.Value = hCell.outerText
             
            'move to the cell in the next column
            Set Rng = Rng.Offset(, 1)
             
        Next hCell
         
        'move to the next row
        Set Rng = Range("BA" & Rng.Row + 1)
    

    Next hRow



Unload UserForm4



UserForm3.Show
    
    
 'wk.Visible = False

'ActiveSheet.Protect "tbdexcel@101#$%", DrawingObjects:=False, Contents:=True, Scenarios:=False, _
'AllowFormattingCells:=True, AllowFormattingColumns:=False, AllowFormattingRows:=True, _
'AllowInsertingColumns:=False, AllowInsertingRows:=True, AllowInsertingHyperlinks:=True, _
'AllowDeletingColumns:=False, AllowDeletingRows:=True, AllowSorting:=True, AllowFiltering:=True, _
'AllowUsingPivotTables:=True

Sheets("COVER").Pictures("Picture 31").Formula = "=MyPicture"

exitHandler:
    Exit Sub
errHandler:
    MsgBox "Database Search Error"
    Resume exitHandler


End Sub
Attribute VB_Name = "Module8"
'Enables mouse wheel scrolling in controls
Option Explicit

#If Win64 Then
    Private Type POINTAPI
       XY As LongLong
    End Type
#Else
    Private Type POINTAPI
           X As Long
           Y As Long
    End Type
#End If

Private Type MOUSEHOOKSTRUCT
    Pt As POINTAPI
    hWnd As Long
    wHitTestCode As Long
    dwExtraInfo As Long
End Type

#If VBA7 Then
    Private Declare PtrSafe Function FindWindow Lib "user32" _
                                            Alias "FindWindowA" ( _
                                                            ByVal lpClassName As String, _
                                                            ByVal lpWindowName As String) As Long ' not sure if this should be LongPtr
    #If Win64 Then
        Private Declare PtrSafe Function GetWindowLongPtr Lib "user32" _
                                            Alias "GetWindowLongPtrA" ( _
                                                            ByVal hWnd As LongPtr, _
                                                            ByVal nIndex As Long) As LongPtr
    #Else
        Private Declare PtrSafe Function GetWindowLong Lib "user32" _
                                            Alias "GetWindowLongA" ( _
                                                            ByVal hWnd As LongPtr, _
                                                            ByVal nIndex As Long) As LongPtr
    #End If
    Private Declare PtrSafe Function SetWindowsHookEx Lib "user32" _
                                            Alias "SetWindowsHookExA" ( _
                                                            ByVal idHook As Long, _
                                                            ByVal lpfn As LongPtr, _
                                                            ByVal hmod As LongPtr, _
                                                            ByVal dwThreadId As Long) As LongPtr
    Private Declare PtrSafe Function CallNextHookEx Lib "user32" ( _
                                                            ByVal hHook As LongPtr, _
                                                            ByVal nCode As Long, _
                                                            ByVal wParam As LongPtr, _
                                                           lParam As Any) As LongPtr
    Private Declare PtrSafe Function UnhookWindowsHookEx Lib "user32" ( _
                                                            ByVal hHook As LongPtr) As LongPtr ' MAYBE Long
    'Private Declare PtrSafe Function PostMessage Lib "user32.dll" _
    '                                         Alias "PostMessageA" ( _
    '                                                         ByVal hwnd As LongPtr, _
    '                                                         ByVal wMsg As Long, _
    '                                                         ByVal wParam As LongPtr, _
    '                                                         ByVal lParam As LongPtr) As LongPtr   ' MAYBE Long
    #If Win64 Then
        Private Declare PtrSafe Function WindowFromPoint Lib "user32" ( _
                                                            ByVal Point As LongLong) As LongPtr    '
    #Else
        Private Declare PtrSafe Function WindowFromPoint Lib "user32" ( _
                                                            ByVal xPoint As Long, _
                                                            ByVal yPoint As Long) As LongPtr    '
    #End If
    Private Declare PtrSafe Function GetCursorPos Lib "user32" ( _
                                                            ByRef lpPoint As POINTAPI) As LongPtr   'MAYBE Long
#Else
    Private Declare Function FindWindow Lib "user32" _
                                            Alias "FindWindowA" ( _
                                                            ByVal lpClassName As String, _
                                                            ByVal lpWindowName As String) As Long
    Private Declare Function GetWindowLong Lib "user32.dll" _
                                            Alias "GetWindowLongA" ( _
                                                            ByVal hWnd As Long, _
                                                            ByVal nIndex As Long) As Long
    Private Declare Function SetWindowsHookEx Lib "user32" _
                                            Alias "SetWindowsHookExA" ( _
                                                            ByVal idHook As Long, _
                                                            ByVal lpfn As Long, _
                                                            ByVal hmod As Long, _
                                                            ByVal dwThreadId As Long) As Long
    Private Declare Function CallNextHookEx Lib "user32" ( _
                                                            ByVal hHook As Long, _
                                                            ByVal nCode As Long, _
                                                            ByVal wParam As Long, _
                                                           lParam As Any) As Long
    Private Declare Function UnhookWindowsHookEx Lib "user32" ( _
                                                            ByVal hHook As Long) As Long
    'Private Declare Function PostMessage Lib "user32.dll" _
    '                                         Alias "PostMessageA" ( _
    '                                                         ByVal hwnd As Long, _
    '                                                         ByVal wMsg As Long, _
    '                                                         ByVal wParam As Long, _
    '                                                         ByVal lParam As Long) As Long
    Private Declare Function WindowFromPoint Lib "user32" ( _
                                                            ByVal xPoint As Long, _
                                                            ByVal yPoint As Long) As Long
    Private Declare Function GetCursorPos Lib "user32.dll" ( _
                                                            ByRef lpPoint As POINTAPI) As Long
#End If

Private Const WH_MOUSE_LL As Long = 14
Private Const WM_MOUSEWHEEL As Long = &H20A
Private Const HC_ACTION As Long = 0
Private Const GWL_HINSTANCE As Long = (-6)
'Private Const WM_KEYDOWN As Long = &H100
'Private Const WM_KEYUP As Long = &H101
'Private Const VK_UP As Long = &H26
'Private Const VK_DOWN As Long = &H28
'Private Const WM_LBUTTONDOWN As Long = &H201
Dim n As Long
Private mCtl As Object
Private mbHook As Boolean
#If VBA7 Then
    Private mLngMouseHook As LongPtr
    Private mListBoxHwnd As LongPtr
#Else
    Private mLngMouseHook As Long
    Private mListBoxHwnd As Long
#End If
     
Sub HookListBoxScroll(frm As Object, ctl As Object)
    Dim tPT As POINTAPI
    #If VBA7 Then
        Dim lngAppInst As LongPtr
        Dim hwndUnderCursor As LongPtr
    #Else
        Dim lngAppInst As Long
        Dim hwndUnderCursor As Long
    #End If
    GetCursorPos tPT
    #If Win64 Then
        hwndUnderCursor = WindowFromPoint(tPT.XY)
    #Else
        hwndUnderCursor = WindowFromPoint(tPT.X, tPT.Y)
    #End If
    If TypeOf ctl Is UserForm Then
        If Not frm Is ctl Then
               ctl.SetFocus
        End If
    Else
        If Not frm.ActiveControl Is ctl Then
             ctl.SetFocus
        End If
    End If
    If mListBoxHwnd <> hwndUnderCursor Then
        UnhookListBoxScroll
        Set mCtl = ctl
        mListBoxHwnd = hwndUnderCursor
        #If Win64 Then
            lngAppInst = GetWindowLongPtr(mListBoxHwnd, GWL_HINSTANCE)
        #Else
            lngAppInst = GetWindowLong(mListBoxHwnd, GWL_HINSTANCE)
        #End If
        ' PostMessage mListBoxHwnd, WM_LBUTTONDOWN, 0&, 0&
        If Not mbHook Then
            mLngMouseHook = SetWindowsHookEx( _
                                            WH_MOUSE_LL, AddressOf MouseProc, lngAppInst, 0)
            mbHook = mLngMouseHook <> 0
        End If
    End If
End Sub

Sub UnhookListBoxScroll()
    If mbHook Then
        Set mCtl = Nothing
        UnhookWindowsHookEx mLngMouseHook
        mLngMouseHook = 0
        mListBoxHwnd = 0
        mbHook = False
    End If
End Sub
#If VBA7 Then
    Private Function MouseProc( _
                            ByVal nCode As Long, ByVal wParam As Long, _
                            ByRef lParam As MOUSEHOOKSTRUCT) As LongPtr
        Dim idx As Long
        On Error GoTo errH
        If (nCode = HC_ACTION) Then
            #If Win64 Then
                If WindowFromPoint(lParam.Pt.XY) = mListBoxHwnd Then
                    If wParam = WM_MOUSEWHEEL Then
                        MouseProc = True
'                        If lParam.hWnd > 0 Then
'                            postMessage mListBoxHwnd, WM_KEYDOWN, VK_UP, 0
'                        Else
'                            postMessage mListBoxHwnd, WM_KEYDOWN, VK_DOWN, 0
'                        End If
'                        postMessage mListBoxHwnd, WM_KEYUP, VK_UP, 0
                        If TypeOf mCtl Is Frame Then
                            If lParam.hWnd > 0 Then idx = -10 Else idx = 10
                            idx = idx + mCtl.ScrollTop
                            If idx >= 0 And idx < ((mCtl.ScrollHeight - mCtl.Height) + 17.25) Then
                                mCtl.ScrollTop = idx
                            End If
                        ElseIf TypeOf mCtl Is UserForm Then
                            If lParam.hWnd > 0 Then idx = -10 Else idx = 10
                            idx = idx + mCtl.ScrollTop
                            If idx >= 0 And idx < ((mCtl.ScrollHeight - mCtl.Height) + 17.25) Then
                                mCtl.ScrollTop = idx
                            End If
                        Else
                            If lParam.hWnd > 0 Then idx = -1 Else idx = 1
                            idx = idx + mCtl.ListIndex
                            If idx >= 0 Then mCtl.ListIndex = idx
                        End If
                    Exit Function
                    End If
                Else
                    UnhookListBoxScroll
                End If
            #Else
                If WindowFromPoint(lParam.Pt.X, lParam.Pt.Y) = mListBoxHwnd Then
                    If wParam = WM_MOUSEWHEEL Then
                        MouseProc = True
'                        If lParam.hWnd > 0 Then
'                            postMessage mListBoxHwnd, WM_KEYDOWN, VK_UP, 0
'                        Else
'                            postMessage mListBoxHwnd, WM_KEYDOWN, VK_DOWN, 0
'                        End If
'                        postMessage mListBoxHwnd, WM_KEYUP, VK_UP, 0
                        If TypeOf mCtl Is Frame Then
                            If lParam.hWnd > 0 Then idx = -10 Else idx = 10
                            idx = idx + mCtl.ScrollTop
                            If idx >= 0 And idx < ((mCtl.ScrollHeight - mCtl.Height) + 17.25) Then
                                mCtl.ScrollTop = idx
                            End If
                        ElseIf TypeOf mCtl Is UserForm Then
                            If lParam.hWnd > 0 Then idx = -10 Else idx = 10
                            idx = idx + mCtl.ScrollTop
                            If idx >= 0 And idx < ((mCtl.ScrollHeight - mCtl.Height) + 17.25) Then
                                mCtl.ScrollTop = idx
                            End If
                        Else
                            If lParam.hWnd > 0 Then idx = -1 Else idx = 1
                            idx = idx + mCtl.ListIndex
                            If idx >= 0 Then mCtl.ListIndex = idx
                        End If
                        Exit Function
                    End If
                Else
                    UnhookListBoxScroll
                End If
            #End If
        End If
        MouseProc = CallNextHookEx( _
                                mLngMouseHook, nCode, wParam, ByVal lParam)
        Exit Function
errH:
        UnhookListBoxScroll
    End Function
#Else
    Private Function MouseProc( _
                            ByVal nCode As Long, ByVal wParam As Long, _
                            ByRef lParam As MOUSEHOOKSTRUCT) As Long
        Dim idx As Long
        On Error GoTo errH
        If (nCode = HC_ACTION) Then
            If WindowFromPoint(lParam.Pt.X, lParam.Pt.Y) = mListBoxHwnd Then
                If wParam = WM_MOUSEWHEEL Then
                    MouseProc = True
'                    If lParam.hWnd > 0 Then
'                    postMessage mListBoxHwnd, WM_KEYDOWN, VK_UP, 0
'                    Else
'                    postMessage mListBoxHwnd, WM_KEYDOWN, VK_DOWN, 0
'                    End If
'                    postMessage mListBoxHwnd, WM_KEYUP, VK_UP, 0
                    
                    If TypeOf mCtl Is Frame Then
                        If lParam.hWnd > 0 Then idx = -10 Else idx = 10
                        idx = idx + mCtl.ScrollTop
                        If idx >= 0 And idx < ((mCtl.ScrollHeight - mCtl.Height) + 17.25) Then
                            mCtl.ScrollTop = idx
                        End If
                    ElseIf TypeOf mCtl Is UserForm Then
                        If lParam.hWnd > 0 Then idx = -10 Else idx = 10
                        idx = idx + mCtl.ScrollTop
                        If idx >= 0 And idx < ((mCtl.ScrollHeight - mCtl.Height) + 17.25) Then
                            mCtl.ScrollTop = idx
                        End If
                    Else
                        If lParam.hWnd > 0 Then idx = -1 Else idx = 1
                        idx = idx + mCtl.ListIndex
                        If idx >= 0 Then mCtl.ListIndex = idx
                    End If
                    Exit Function
                End If
            Else
                UnhookListBoxScroll
            End If
        End If
        MouseProc = CallNextHookEx( _
        mLngMouseHook, nCode, wParam, ByVal lParam)
        Exit Function
errH:
        UnhookListBoxScroll
    End Function
#End If


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 5, 0, MSForms, CommandButton"
Attribute VB_Control = "TextBox3, 4, 1, MSForms, TextBox"
Attribute VB_Control = "TextBox2, 3, 2, MSForms, TextBox"
Attribute VB_Control = "TextBox1, 2, 3, MSForms, TextBox"
Private Sub CommandButton1_Click()

Set wk = ActiveSheet

If TextBox1.Value = wk.Range("AZ1") Then
    
    Application.ScreenUpdating = False
    'wk.Visible = True
    'wk.Select

'ActiveSheet.Unprotect "tbdexcel@101#$%"

    UserForm3.Show
    
    'wk.Visible = False
    
'    ActiveSheet.Protect "tbdexcel@101#$%", DrawingObjects:=False, Contents:=True, Scenarios:=False, _
'AllowFormattingCells:=True, AllowFormattingColumns:=False, AllowFormattingRows:=True, _
'AllowInsertingColumns:=False, AllowInsertingRows:=True, AllowInsertingHyperlinks:=True, _
'AllowDeletingColumns:=False, AllowDeletingRows:=True, AllowSorting:=True, AllowFiltering:=True, _
'AllowUsingPivotTables:=True


    Else

    wk.Range("AZ1") = TextBox1.Value
    
'    ActiveSheet.Unprotect "tbdexcel@101#$%"

    DownloadData

End If

End Sub

Private Sub TextBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)


Set wk = ActiveSheet

If KeyCode = 13 Then
        
    If TextBox1.Value = wk.Range("AZ1") Then

    Application.ScreenUpdating = False
    'wk.Visible = True
    'wk.Select
    
'    ActiveSheet.Unprotect "tbdexcel@101#$%"

        UserForm3.Show
    
    'wk.Visible = False
    
'    ActiveSheet.Protect "tbdexcel@101#$%", DrawingObjects:=False, Contents:=True, Scenarios:=False, _
'AllowFormattingCells:=True, AllowFormattingColumns:=False, AllowFormattingRows:=True, _
'AllowInsertingColumns:=False, AllowInsertingRows:=True, AllowInsertingHyperlinks:=True, _
'AllowDeletingColumns:=False, AllowDeletingRows:=True, AllowSorting:=True, AllowFiltering:=True, _
'AllowUsingPivotTables:=True


    Else


        wk.Range("AZ1") = TextBox1.Value
        
'        ActiveSheet.Unprotect "tbdexcel@101#$%"

        DownloadData
        
    End If

End If
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'Written: June 11, 2008
'Author:  Leith Ross

'Open the Internet object

'------------------------------------------
#If Win64 Then

Private Declare PtrSafe Function InternetOpen _
                          Lib "wininet.dll" _
                              Alias "InternetOpenA" _
                              (ByVal sAgent As String, _
                               ByVal lAccessType As Long, _
                               ByVal sProxyName As String, _
                               ByVal sProxyBypass As String, _
                               ByVal lFlags As Long) As Long

#Else

Private Declare Function InternetOpen _
                          Lib "wininet.dll" _
                              Alias "InternetOpenA" _
                              (ByVal sAgent As String, _
                               ByVal lAccessType As Long, _
                               ByVal sProxyName As String, _
                               ByVal sProxyBypass As String, _
                               ByVal lFlags As Long) As Long

 #End If
'------------------------------------------



#If Win64 Then

'Connect to the network
Private Declare PtrSafe Function InternetConnect _
                          Lib "wininet.dll" _
                              Alias "InternetConnectA" _
                              (ByVal hInternetSession As Long, _
                               ByVal sServerName As String, _
                               ByVal nServerPort As Integer, _
                               ByVal sUsername As String, _
                               ByVal sPassword As String, _
                               ByVal lService As Long, _
                               ByVal lFlags As Long, _
                               ByVal lContext As Long) As Long

#Else

'Connect to the network
Private Declare Function InternetConnect _
                          Lib "wininet.dll" _
                              Alias "InternetConnectA" _
                              (ByVal hInternetSession As Long, _
                               ByVal sServerName As String, _
                               ByVal nServerPort As Integer, _
                               ByVal sUsername As String, _
                               ByVal sPassword As String, _
                               ByVal lService As Long, _
                               ByVal lFlags As Long, _
                               ByVal lContext As Long) As Long

 #End If
'------------------------------------------

#If Win64 Then

'Get a file using FTP
Private Declare PtrSafe Function FtpGetFile _
                          Lib "wininet.dll" _
                              Alias "FtpGetFileA" _
                              (ByVal hFtpSession As Long, _
                               ByVal lpszRemoteFile As String, _
                               ByVal lpszNewFile As String, _
                               ByVal fFailIfExists As Boolean, _
                               ByVal dwFlagsAndAttributes As Long, _
                               ByVal dwFlags As Long, _
                               ByVal dwContext As Long) As Boolean
                               
#Else
                               
'Get a file using FTP
Private Declare Function FtpGetFile _
                          Lib "wininet.dll" _
                              Alias "FtpGetFileA" _
                              (ByVal hFtpSession As Long, _
                               ByVal lpszRemoteFile As String, _
                               ByVal lpszNewFile As String, _
                               ByVal fFailIfExists As Boolean, _
                               ByVal dwFlagsAndAttributes As Long, _
                               ByVal dwFlags As Long, _
                               ByVal dwContext As Long) As Boolean

 #End If
'------------------------------------------
                               
#If Win64 Then

'Send a file using FTP
Private Declare PtrSafe Function FtpPutFile _
                          Lib "wininet.dll" _
                              Alias "FtpPutFileA" _
                              (ByVal hFtpSession As Long, _
                               ByVal lpszLocalFile As String, _
                               ByVal lpszRemoteFile As String, _
                               ByVal dwFlags As Long, _
                               ByVal dwContext As Long) As Boolean
         
#Else
         
'Send a file using FTP
Private Declare Function FtpPutFile _
                          Lib "wininet.dll" _
                              Alias "FtpPutFileA" _
                              (ByVal hFtpSession As Long, _
                               ByVal lpszLocalFile As String, _
                               ByVal lpszRemoteFile As String, _
                               ByVal dwFlags As Long, _
                               ByVal dwContext As Long) As Boolean
         
 #End If
'------------------------------------------

#If Win64 Then

'Close the Internet object
Private Declare PtrSafe Function InternetCloseHandle _
                          Lib "wininet.dll" _
                              (ByVal hInet As Long) As Integer
   #Else
   
   Private Declare Function InternetCloseHandle _
                          Lib "wininet.dll" _
                              (ByVal hInet As Long) As Integer
 #End If
'------------------------------------------
                              
                              

Private Sub Workbook_BeforeClose(Cancel As Boolean)
        
'When uploading a file, make sure you have permisson to create a file on the server.
'The size limit for a uploading a file is 4GB.

Dim hostFile As String
Dim INet As Long
Dim INetConn As Long
Dim localFile As String
Dim Password As String
Dim RetVal As Long
Dim ServerName As String
Dim Success As Long
Dim UserName As String
Dim Directory As String

Const ASCII_TRANSFER = 1
Const BINARY_TRANSFER = 2
Const INTERNET_INVALID_PORT_NUMBER = 0
Const INTERNET_DEFAULT_FTP_PORT = 21
Const INTERNET_OPEN_TYPE_DIRECT = 1
Const INTERNET_SERVICE_FTP = 1
Const INTERNET_FLAG_PASSIVE = &H8000000

Dim wbName As String
wbName = Replace(ActiveWorkbook.Name, ".xlsm", "")

If Sheets("COVER").Range("M8").Value = "DISABLED" Then Exit Sub


ActiveWorkbook.SaveCopyAs ActiveWorkbook.Path & "\" & "Backup001_" & wbName & ".xlsm"

ServerName = Sheets("COVER").Range("M12").Value
UserName = Sheets("COVER").Range("M14").Value
Password = Sheets("COVER").Range("M15").Value
Directory = Sheets("COVER").Range("M13").Value
localFile = ActiveWorkbook.Path & "\" & "Backup001_" & wbName & ".xlsm"
' note the change to the hostFile below. This will put the new themaster.xml I will ftp at my website address in a folder I call "test"
hostFile = Directory & "Backup001_" & wbName & ".xlsm"

UserForm4.Show vbModeless

UserForm4.Label1.Caption = "Backing up to Cloud..."
        DoEvents
        


RetVal = False
INet = InternetOpen("MyFTP Control", 1, vbNullString, vbNullString, 0)
If INet > 0 Then
INetConn = InternetConnect(INet, ServerName, INTERNET_DEFAULT_FTP_PORT, UserName, Password, INTERNET_SERVICE_FTP, INTERNET_FLAG_PASSIVE, 0)
If INetConn > 0 Then
Success = FtpPutFile(INetConn, localFile, hostFile, BINARY_TRANSFER, 0)
RetVal = InternetCloseHandle(INetConn)
End If
RetVal = InternetCloseHandle(INet)
End If
         


If Success <> 0 Then

Unload UserForm4

Else
Unload UserForm4
MsgBox "Cloud Backup Failed"
End If

End Sub

Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{BD393C91-409E-4E50-9B5B-A6B973E87A1B}{A9024957-D980-4546-BF6B-DE7961A1B9F4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public Sub ChkALL_Click()
    Dim i
     
    For i = 0 To ListBox1.ListCount - 1
        ListBox1.Selected(i) = ChkALL
    Next i
     
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then
        End
    End If
End Sub

Public Sub UserForm_Initialize()
    Dim ws As Worksheet
    For Each ws In ActiveWorkbook.Worksheets
        If ws.Visible Then ListBox1.AddItem ws.Name
    Next ws
    
ListBox1.RemoveItem 0
    
End Sub
Public Sub CommandButton1_Click()

Dim arrSheets()
Dim relativePath As String
Dim idx As Long    ' don't use Selected, that's a listbox property.:)
Dim cnt As Long

For idx = 0 To ListBox1.ListCount - 1
        If ListBox1.Selected(idx) Then
            ReDim Preserve arrSheets(cnt)
            arrSheets(cnt) = ListBox1.List(idx)
            cnt = cnt + 1
        End If
    Next idx

    If cnt > 0 Then
 
        Sheets(arrSheets).Select
       
    End If

Unload Me

End Sub

Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{43ADD151-813A-4C95-8545-7FDC8D6557C4}{37D753AE-D527-47EB-8278-7905A1221272}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ChkALL2_Click()
    Dim i
     
    For i = 0 To ListBox2.ListCount - 1
        ListBox2.Selected(i) = ChkALL2
    Next i
     
End Sub




Private Sub UserForm_Initialize()

Dim PrinterNameDefault As String
     
        PrinterNameDefault = "Microsoft Print to PDF"


    Dim ws1 As Worksheet
    For Each ws1 In ActiveWorkbook.Worksheets
        If ws1.Visible Then ListBox2.AddItem ws1.Name
    Next ws1
    
 Dim X As Long, Printers As Object, arrPrinters As Variant
  With CreateObject("WScript.Network")
    For X = 1 To .EnumPrinterConnections.Count Step 2
      ComboBox1.AddItem .EnumPrinterConnections(X)
    Next
  End With
  
  ComboBox1.Text = PrinterNameDefault
    
End Sub
 Public Function GetPrinterPort2(strPrinterName As String) As String
    Dim objReg As Object, strRegVal As String, strValue As String
    Const HKEY_CURRENT_USER = &H80000001
    Set objReg = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv")
    strRegVal = "Software\Microsoft\Windows NT\CurrentVersion\PrinterPorts\"
    objReg.GetStringValue HKEY_CURRENT_USER, strRegVal, strPrinterName, strValue
    GetPrinterPort2 = Mid$(strValue, 10, 5)
End Function

Private Sub CommandButton2_Click()

Dim arrSheets()
Dim idx As Long    ' don't use Selected, that's a listbox property.:)
Dim cnt As Long
Dim strPath As String
Dim myFile As Variant
Dim strFile As String


For idx = 0 To ListBox2.ListCount - 1
        If ListBox2.Selected(idx) Then
            ReDim Preserve arrSheets(cnt)
            arrSheets(cnt) = ListBox2.List(idx)
            cnt = cnt + 1
        End If
    Next idx

    If cnt > 0 Then
 
 
       Sheets(arrSheets).Select
        
strFile = Replace(ActiveWorkbook.FullName, ".xlsm", ".pdf")
 
 If myFile <> "False" Then
 
Dim strPrinter As String

strPrinter = ComboBox1.Text

On Error GoTo errHandler

Application.ActivePrinter = strPrinter & " on " & GetPrinterPort2(strPrinter)

Application.Dialogs(xlDialogSaveAs).Show strFile, 57
       
    
    End If
    
    

Unload Me
       Worksheets("COVER").Select
       
    End If
    
exitHandler:
       Worksheets("COVER").Select
    Exit Sub
errHandler:
    MsgBox "Could not create PDF file. Choose Different PDF printer."
    
'Unload Me
'           Worksheets("COVER").Select
    
    Resume exitHandler



End Sub



Attribute VB_Name = "UserForm3"
Attribute VB_Base = "0{B11E998E-DDB6-4BEB-A028-35207F0E83C7}{8F0B2D62-2324-4386-BFA5-9B11DD0EC924}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Dim ColOrder, i
'----------------------------------------------------------
'   Set the order of the columns to be displayed in ListBox
'       the first one is the searched column
    ColOrder = Array("BA", "BB", "BC", "BD", "BE", "BF", "BG", "BH", "BI")
    ListBox1.ColumnCount = UBound(ColOrder) + 1 ' set column count
'----------------------------------------------------------
    Dim C, firstaddress
    ListBox1.Clear
'----------------------------------------------------------
' Use the first row as a header row
'----------------------------------------------------------
    PutRowInLB Me.ListBox1, 1, ColOrder
'----------------------------------------------------------
'Do the searching
    With Application.Intersect(Range("BA1").CurrentRegion, Columns(ColOrder(3)))
        Set C = .Find(TextBox1.Text, LookIn:=xlValues, LookAt:=xlPart)
        
        If Not C Is Nothing Then
            firstaddress = C.Address
            Do
            If C.Row > 1 Then PutRowInLB Me.ListBox1, C.Row, ColOrder
            Set C = .FindNext(C)
            Loop While Not C Is Nothing And C.Address <> firstaddress
                        
               
           
                  
                                              Else


                MsgBox "Not Found / Blank - List will reset"
                
                Set C = .Find("*", LookIn:=xlValues, LookAt:=xlPart)
                        firstaddress = C.Address
                        Do
                            If C.Row > 1 Then PutRowInLB Me.ListBox1, C.Row, ColOrder
                            Set C = .FindNext(C)
                            Loop While Not C Is Nothing And C.Address <> firstaddress
                  

                            
        End If
    End With
End Sub

Sub PutRowInLB(lb, irow, ColOrder)
    Dim i
    lb.AddItem Range(ColOrder(0) & irow)
    For i = 1 To UBound(ColOrder)
        lb.List(lb.ListCount - 1, i) = Range(ColOrder(i) & irow)
    Next i
End Sub

Private Sub CommandButton2_Click()

Dim ColOrder, i
    
'----------------------------------------------------------
'   Set the order of the columns to be displayed in ListBox
'       the first one is the searched column
    ColOrder = Array("BA", "BB", "BC", "BD", "BE", "BF", "BG", "BH", "BI")
    ListBox1.ColumnCount = UBound(ColOrder) + 1 ' set column count
'----------------------------------------------------------
    Dim C, firstaddress
    ListBox1.Clear
'----------------------------------------------------------
' Use the first row as a header row
'----------------------------------------------------------
    PutRowInLB Me.ListBox1, 1, ColOrder
'----------------------------------------------------------
'       Do the searching
    With Application.Intersect(Range("BA1").CurrentRegion, Columns(ColOrder(3)))
        Set C = .Find("*", LookIn:=xlValues, LookAt:=xlPart)
        If Not C Is Nothing Then
            firstaddress = C.Address
            
            Do
            '----------------------------------------------------------
            ' Post the found row infor (skip first row header)
            '----------------------------------------------------------
                If C.Row > 1 Then PutRowInLB Me.ListBox1, C.Row, ColOrder
                Set C = .FindNext(C)
                
            Loop While Not C Is Nothing And C.Address <> firstaddress
            
            
        End If
    End With
    
End Sub





Private Sub ListBox1_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)

HookListBoxScroll Me, Me.ListBox1

End Sub

Private Sub TextBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)

If KeyCode = 13 Then
CommandButton1_Click

KeyCode = 0

End If

End Sub
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
     UnhookListBoxScroll
End Sub

Private Sub UserForm_Initialize()

    With Image1
        ' use a image control to get the size
        .AutoSize = False
        .Width = 64.5
        .Height = 22.5
    End With

    Dim ColOrder, i
    
'----------------------------------------------------------
'   Set the order of the columns to be displayed in ListBox
'       the first one is the searched column
    ColOrder = Array("BA", "BB", "BC", "BD", "BE", "BF", "BG", "BH", "BI")
    ListBox1.ColumnCount = UBound(ColOrder) + 1 ' set column count
'----------------------------------------------------------
    Dim C, firstaddress
    ListBox1.Clear
'----------------------------------------------------------
' Use the first row as a header row
'----------------------------------------------------------
    PutRowInLB Me.ListBox1, 1, ColOrder
'----------------------------------------------------------
'       Do the searching
    With Application.Intersect(Range("BA1").CurrentRegion, Columns(ColOrder(3)))
        Set C = .Find("*", LookIn:=xlValues, LookAt:=xlPart)
        If Not C Is Nothing Then
            firstaddress = C.Address
            
            Do
            '----------------------------------------------------------
            ' Post the found row infor (skip first row header)
            '----------------------------------------------------------
                If C.Row > 1 Then PutRowInLB Me.ListBox1, C.Row, ColOrder
                Set C = .FindNext(C)
                
            Loop While Not C Is Nothing And C.Address <> firstaddress
            
            
        End If
    End With
    
End Sub

Attribute VB_Name = "UserForm4"
Attribute VB_Base = "0{66744910-1044-4870-B7CE-0F2EC1357C78}{166460C5-871D-4DA3-A355-D6EDD98330E8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



INQUEST-PP=macro
