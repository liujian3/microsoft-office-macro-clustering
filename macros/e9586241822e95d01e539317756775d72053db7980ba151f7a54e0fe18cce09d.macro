Attribute VB_Name = "Module1"
Option Explicit

Public SodukoNumber(9) As Byte
Public BoxRef(9) As String
Public ColumnMix(3) As Byte
Public RowMix(3) As Byte
Public Squares As Byte
Public BigSquareRow As Byte
Public BigSquareCol As Byte
Public m As Byte
Public n As Byte
Public xCols As Byte
Public xRows As Byte
Public x As Byte
Public y As Byte
Public YesNo As Boolean
Public ColOK As Boolean
Public RowOK As Boolean
Public Placed As Boolean
Public GameCounter As Integer
Public CanGo As Byte
Public SolveMoveCounter As Byte
Public StillSolving As Boolean
Public TempCounter As Byte

Sub ClearAll()
    Range("Grid").ClearContents
    Range("Grid").Font.ColorIndex = 1
    [a1].Select
End Sub

Sub ShowHelp()
    UserForm1.Show
End Sub
Sub RestartGame()
    For xCols = 0 To 8
        For xRows = 0 To 8
            If Range("TopSquare").Offset(xRows, xCols).Font.ColorIndex <> 1 Then
                Range("TopSquare").Offset(xRows, xCols).Font.ColorIndex = 3
                Range("TopSquare").Offset(xRows, xCols).ClearContents
            End If
        Next xRows
    Next xCols
End Sub

Sub GetNineNumbers()
    For Squares = 1 To 9
        SodukoNumber(Squares) = Int(Rnd() * 9) + 1
        If Squares > 1 Then
            Do
                YesNo = True
                For m = 1 To Squares - 1
                    If SodukoNumber(Squares) = SodukoNumber(m) Then
                        SodukoNumber(Squares) = Int(Rnd() * 9) + 1
                        YesNo = False
                        Exit For
                    End If
                Next m
            Loop Until YesNo
        End If
    Next Squares
End Sub

Sub GetBoxRefs()
    BoxRef(1) = Range("TopSquare").Address
    BoxRef(2) = Range("TopSquare").Offset(0, 3).Address
    BoxRef(3) = Range("TopSquare").Offset(0, 6).Address
    BoxRef(4) = Range("TopSquare").Offset(3, 0).Address
    BoxRef(5) = Range("TopSquare").Offset(3, 3).Address
    BoxRef(6) = Range("TopSquare").Offset(3, 6).Address
    BoxRef(7) = Range("TopSquare").Offset(6, 0).Address
    BoxRef(8) = Range("TopSquare").Offset(6, 3).Address
    BoxRef(9) = Range("TopSquare").Offset(6, 6).Address
End Sub
Sub RandomizeRows()
    For x = 1 To 3
        RowMix(x) = Int(Rnd() * 3) + 1
        If x > 1 Then
            Do
                YesNo = True
                For y = 1 To x - 1
                    If RowMix(x) = RowMix(y) Then
                        RowMix(x) = Int(Rnd() * 3) + 1
                        YesNo = False
                        Exit For
                    End If
                Next y
            Loop Until YesNo
        End If
    Next x
End Sub

Sub RandomizeColumns()
    For x = 1 To 3
        ColumnMix(x) = Int(Rnd() * 3) + 1
        If x > 1 Then
            Do
                YesNo = True
                For y = 1 To x - 1
                    If ColumnMix(x) = ColumnMix(y) Then
                        ColumnMix(x) = Int(Rnd() * 3) + 1
                        YesNo = False
                        Exit For
                    End If
                Next y
            Loop Until YesNo
        End If
    Next x
End Sub

Sub GeneratePuzzle()
    ClearAll
    Application.ScreenUpdating = False
    Do
        PutOnGrid
        YesNo = True
        For n = 0 To 8
            For x = 0 To 8
                If IsEmpty(Range("TopSquare").Offset(n, x)) Then
                    YesNo = False
                    Exit For
                End If
            Next x
            If YesNo = False Then Exit For
        Next n
    Loop Until YesNo
    CreateUnsolvedPuzzle
End Sub

Sub PutOnGrid()
    Randomize
    Range("Grid").ClearContents
    GetNineNumbers
    GetBoxRefs
    For n = 1 To 9
        RandomizeColumns
        RandomizeRows
        For Squares = 1 To 9
            Placed = False
            For xCols = 1 To 3
                For xRows = 1 To 3
                    CheckCol
                    CheckRow
                    If IsEmpty(Range(BoxRef(Squares)).Offset(RowMix(xRows) - 1, ColumnMix(xCols) - 1).Value) Then
                        If RowOK And ColOK Then
                            Range(BoxRef(Squares)).Offset(RowMix(xRows) - 1, ColumnMix(xCols) - 1).Value = SodukoNumber(n)
                            Placed = True
                            Exit For
                        End If
                    End If
                Next xRows
                If Placed Then Exit For
            Next xCols
            If Not Placed Then Exit Sub
        Next Squares
    Next n
End Sub

Sub CheckCol()
    For x = 1 To 9
        If Range("TopSquare").Offset(x - 1, Range(BoxRef(Squares)).Column - Range("TopSquare").Column + ColumnMix(xCols) - 1).Value = SodukoNumber(n) Then
            ColOK = False
            Exit Sub
        End If
    Next x
    ColOK = True
End Sub

Sub CheckRow()
    For x = 1 To 9
        If Range("TopSquare").Offset(Range(BoxRef(Squares)).Row - Range("TopSquare").Row + RowMix(xRows) - 1, x - 1).Value = SodukoNumber(n) Then
            RowOK = False
            Exit Sub
        End If
    Next x
    RowOK = True
End Sub

Sub CreateUnsolvedPuzzle()
    For GameCounter = 1 To 1000
        n = Int(Rnd * 9)
        x = Int(Rnd * 9)
        If Not IsEmpty(Range("TopSquare").Offset(n, x)) Then
            SodukoNumber(1) = Range("TopSquare").Offset(n, x).Value
            YesNo = True
            Select Case n
            Case 0
                FindInRow (Range("TopSquare").Row + 1)
                FindInRow (Range("TopSquare").Row + 2)
            Case 1
                FindInRow (Range("TopSquare").Row)
                FindInRow (Range("TopSquare").Row + 2)
            Case 2
                FindInRow (Range("TopSquare").Row)
                FindInRow (Range("TopSquare").Row + 1)
            Case 3
                FindInRow (Range("TopSquare").Row + 4)
                FindInRow (Range("TopSquare").Row + 5)
            Case 4
                FindInRow (Range("TopSquare").Row + 3)
                FindInRow (Range("TopSquare").Row + 5)
            Case 5
                FindInRow (Range("TopSquare").Row + 3)
                FindInRow (Range("TopSquare").Row + 4)
            Case 6
                FindInRow (Range("TopSquare").Row + 7)
                FindInRow (Range("TopSquare").Row + 8)
            Case 7
                FindInRow (Range("TopSquare").Row + 6)
                FindInRow (Range("TopSquare").Row + 8)
            Case 8
                FindInRow (Range("TopSquare").Row + 6)
                FindInRow (Range("TopSquare").Row + 7)
            End Select
            Select Case x
            Case 0
                FindInCol (Range("TopSquare").Column + 1)
                FindInCol (Range("TopSquare").Column + 2)
            Case 1
                FindInCol (Range("TopSquare").Column)
                FindInCol (Range("TopSquare").Column + 2)
            Case 2
                FindInCol (Range("TopSquare").Column)
                FindInCol (Range("TopSquare").Column + 1)
            Case 3
                FindInCol (Range("TopSquare").Column + 4)
                FindInCol (Range("TopSquare").Column + 5)
            Case 4
                FindInCol (Range("TopSquare").Column + 3)
                FindInCol (Range("TopSquare").Column + 5)
            Case 5
                FindInCol (Range("TopSquare").Column + 3)
                FindInCol (Range("TopSquare").Column + 4)
            Case 6
                FindInCol (Range("TopSquare").Column + 7)
                FindInCol (Range("TopSquare").Column + 8)
            Case 7
                FindInCol (Range("TopSquare").Column + 6)
                FindInCol (Range("TopSquare").Column + 8)
            Case 8
                FindInCol (Range("TopSquare").Column + 6)
                FindInCol (Range("TopSquare").Column + 7)
            End Select
            If YesNo Then
                Range("Topsquare").Offset(n, x).ClearContents
                Range("Topsquare").Offset(n, x).Font.ColorIndex = 3
            End If
        End If
    Next GameCounter
End Sub

Sub FindInRow(xRow As Byte)
    If Not IsEmpty(Range("TopSquare").Offset(xRow - Range("TopSquare").Row, x)) Then Exit Sub
    For xCols = 0 To 8
    If Range("TopSquare").Offset(xRow - Range("TopSquare").Row, xCols).Value = SodukoNumber(1) Then
        Exit Sub
    End If
    Next xCols
    YesNo = False
End Sub

Sub FindInCol(xCol As Byte)
    If Not IsEmpty(Range("TopSquare").Offset(n, xCol - Range("TopSquare").Column)) Then Exit Sub
    For xRows = 0 To 8
    If Range("TopSquare").Offset(xRows, xCol - Range("TopSquare").Column).Value = SodukoNumber(1) Then
        Exit Sub
    End If
    Next xRows
    YesNo = False
End Sub

Attribute VB_Name = "Module2"
Sub SolveAll()
    Do
        StillSolving = False
        ScanGrid
        ScanGrid
    Loop Until Not StillSolving
End Sub

Sub ScanGrid()
    'Make sure cell refs for boxes are extablisbed
    GetBoxRefs
    'Loop through whole grid
    For xRows = 0 To 8
        For xCols = 0 To 8
            If IsEmpty(Range("TopSquare").Offset(xRows, xCols)) Then
                'Loop through numbers 1 to 9
                For x = 1 To 9
                    'First check number can be put in Row/Column/Square
                    YesNo = True
                    CheckNumberInRow
                    If YesNo Then
                        YesNo = True
                        CheckNumberInColumn
                        If YesNo Then
                            YesNo = True
                            CheckNumberInSquare
                            If YesNo Then
                                'Check other spaces in box cannot be used
                                CanGo = 0
                                If Range(BoxRef(Squares)).Address <> Range("TopSquare").Offset(xRows, xCols).Address Then
                                    If IsEmpty(Range(BoxRef(Squares))) Then CheckSquare 0, 0
                                End If
                                If Range(BoxRef(Squares)).Offset(0, 1).Address <> Range("TopSquare").Offset(xRows, xCols).Address Then
                                    If IsEmpty(Range(BoxRef(Squares)).Offset(0, 1)) Then CheckSquare 0, 1
                                End If
                                If Range(BoxRef(Squares)).Offset(0, 2).Address <> Range("TopSquare").Offset(xRows, xCols).Address Then
                                    If IsEmpty(Range(BoxRef(Squares)).Offset(0, 2)) Then CheckSquare 0, 2
                                End If
                                If Range(BoxRef(Squares)).Offset(1, 0).Address <> Range("TopSquare").Offset(xRows, xCols).Address Then
                                    If IsEmpty(Range(BoxRef(Squares)).Offset(1, 0)) Then CheckSquare 1, 0
                                End If
                                If Range(BoxRef(Squares)).Offset(1, 1).Address <> Range("TopSquare").Offset(xRows, xCols).Address Then
                                    If IsEmpty(Range(BoxRef(Squares)).Offset(1, 1)) Then CheckSquare 1, 1
                                End If
                                If Range(BoxRef(Squares)).Offset(1, 2).Address <> Range("TopSquare").Offset(xRows, xCols).Address Then
                                    If IsEmpty(Range(BoxRef(Squares)).Offset(1, 2)) Then CheckSquare 1, 2
                                End If
                                If Range(BoxRef(Squares)).Offset(2, 0).Address <> Range("TopSquare").Offset(xRows, xCols).Address Then
                                    If IsEmpty(Range(BoxRef(Squares)).Offset(2, 0)) Then CheckSquare 2, 0
                                End If
                                If Range(BoxRef(Squares)).Offset(2, 1).Address <> Range("TopSquare").Offset(xRows, xCols).Address Then
                                    If IsEmpty(Range(BoxRef(Squares)).Offset(2, 1)) Then CheckSquare 2, 1
                                End If
                                If Range(BoxRef(Squares)).Offset(2, 2).Address <> Range("TopSquare").Offset(xRows, xCols).Address Then
                                    If IsEmpty(Range(BoxRef(Squares)).Offset(2, 2)) Then CheckSquare 2, 2
                                End If
                                If CanGo <> 0 Then
                                    CountFilledInRow
                                    CountFilledInColumn
                                End If
                                If CanGo = 0 Then
                                    Range("TopSquare").Offset(xRows, xCols).Value = x
                                    Range("TopSquare").Offset(xRows, xCols).Font.ColorIndex = 5
                                    StillSolving = True
                                    Exit Sub
                                End If
                            End If
                        End If
                    End If
                Next x
            End If
        Next xCols
    Next xRows
End Sub

Sub CountFilledInRow()
    TempCounter = 0
    For n = 0 To 8
        If Not IsEmpty(Range("TopSquare").Offset(xRows, n)) Then
            TempCounter = TempCounter + 1
        End If
    Next n
    If TempCounter = 8 Then CanGo = 0
End Sub

Sub CountFilledInColumn()
    TempCounter = 0
    For n = 0 To 8
        If Not IsEmpty(Range("TopSquare").Offset(n, xCols)) Then
            TempCounter = TempCounter + 1
        End If
    Next n
    If TempCounter = 8 Then CanGo = 0
End Sub

Sub CheckNumberInRow()
    For n = 0 To 8
        If Range("TopSquare").Offset(xRows, n).Value = x Then
            YesNo = False
            Placed = True
            Exit Sub
        End If
    Next n
End Sub

Sub CheckNumberInColumn()
    For n = 0 To 8
        If Range("TopSquare").Offset(n, xCols).Value = x Then
            YesNo = False
            Exit Sub
        End If
    Next n
End Sub

Sub CheckNumberInSquare()
    'Find out what square we are in
    Select Case xRows
    Case 0, 1, 2
        BigSquareRow = 1
    Case 3, 4, 5
        BigSquareRow = 2
    Case 6, 7, 8
        BigSquareRow = 3
    End Select
    Select Case xCols
    Case 0, 1, 2
        BigSquareCol = 1
    Case 3, 4, 5
        BigSquareCol = 2
    Case 6, 7, 8
        BigSquareCol = 3
    End Select
    Select Case BigSquareRow
        Case 1
            Select Case BigSquareCol
                Case 1
                    Squares = 1
                Case 2
                    Squares = 2
                Case 3
                    Squares = 3
            End Select
        Case 2
            Select Case BigSquareCol
                Case 1
                    Squares = 4
                Case 2
                    Squares = 5
                Case 3
                    Squares = 6
            End Select
        Case 3
            Select Case BigSquareCol
                Case 1
                    Squares = 7
                Case 2
                    Squares = 8
                Case 3
                    Squares = 9
            End Select
    End Select
    'Check each square - too short to write a loop!
    If Range(BoxRef(Squares)).Value = x Then
        YesNo = False
        Exit Sub
    End If
    If Range(BoxRef(Squares)).Offset(1, 0).Value = x Then
        YesNo = False
        Exit Sub
    End If
    If Range(BoxRef(Squares)).Offset(2, 0).Value = x Then
        YesNo = False
        Exit Sub
    End If
    If Range(BoxRef(Squares)).Offset(0, 1).Value = x Then
        YesNo = False
        Exit Sub
    End If
    If Range(BoxRef(Squares)).Offset(1, 1).Value = x Then
        YesNo = False
        Exit Sub
    End If
    If Range(BoxRef(Squares)).Offset(2, 1).Value = x Then
        YesNo = False
        Exit Sub
    End If
    If Range(BoxRef(Squares)).Offset(0, 2).Value = x Then
        YesNo = False
        Exit Sub
    End If
    If Range(BoxRef(Squares)).Offset(1, 2).Value = x Then
        YesNo = False
        Exit Sub
    End If
    If Range(BoxRef(Squares)).Offset(2, 2).Value = x Then
        YesNo = False
        Exit Sub
    End If
End Sub

Sub ExamineRow(xRow As Byte)
    If Not IsEmpty(Range("TopSquare").Offset(xRow, xCols)) Then
        YesNo = False
        Exit Sub
    End If
    For n = 0 To 8
        If Range("TopSquare").Offset(xRow, n) = x Then
            YesNo = False
            Exit Sub
        End If
    Next n
End Sub

Sub ExamineColumn(xCol As Byte)
    If Not IsEmpty(Range("TopSquare").Offset(xRows, xCols)) Then
        YesNo = False
        Exit Sub
    End If
    For n = 0 To 8
        If Range("TopSquare").Offset(n, xCol) = x Then
            YesNo = False
            Exit Sub
        End If
    Next n
End Sub

Sub CheckSquare(xRow As Byte, xCol As Byte)
    For n = 0 To 8
        'If Range("TopSquare").Offset(Range(BoxRef(Squares)).Row + xRow, n).Value = x Then Exit Sub
        Select Case Squares
            Case 1, 2, 3
                If Range("TopSquare").Offset(xRow, n).Value = x Then Exit Sub
            Case 4, 5, 6
                If Range("TopSquare").Offset(xRow + 3, n).Value = x Then Exit Sub
            Case 7, 8, 9
                If Range("TopSquare").Offset(xRow + 6, n).Value = x Then Exit Sub
        End Select
        Select Case Squares
            Case 1, 4, 7
                If Range("TopSquare").Offset(n, xCol).Value = x Then Exit Sub
            Case 2, 5, 8
                If Range("TopSquare").Offset(n, xCol + 3).Value = x Then Exit Sub
            Case 3, 6, 9
                If Range("TopSquare").Offset(n, xCol + 6).Value = x Then Exit Sub
        End Select
    Next n
    CanGo = CanGo + 1
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{69179D86-2639-4898-B0FF-D9749BF5C511}{E3DF22FB-2988-454D-9289-A9ADCC01B434}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Me.Hide
End Sub




INQUEST-PP=macro
