Attribute VB_Name = "ChapterNum"
Attribute VB_Base = "0{DA895272-80CF-4112-A645-536F07E2B010}{4215E2B1-26E0-49FF-A641-45B3CC7DF6BB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub Cancel_Click()
    ChapterNum.Hide
End Sub

Private Sub ok_Click()
    nr = Trim(chapter.value)
    If nr <> "" Then
        ActiveDocument.Variables("medChapterNr").value = nr
    End If
    ChapterNum.Hide
    Exit Sub
        
End Sub

Private Sub UserForm_Activate()
    chapter.value = 1
    If helpers.VariableExists("medChapterNr") Then
        chapter.value = ActiveDocument.Variables("medChapterNr").value
    Else
        helpers.SetVariable "medChapterNr", "1"
        chapter.value = "1"
    End If
End Sub

Attribute VB_Name = "ConvertTable"
Attribute VB_Base = "0{9231494D-7FFD-468E-8D47-8BBA34F41FCC}{E9423F5F-A509-4561-A0CE-DC2303BFA13D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub UserForm_Activate()
    If Not Selection.Information(wdWithInTable) Then
        ConvertTable.Hide
        MsgBox "Diese Funktion kann nur in Tabellen angewendet werden"
    End If
End Sub

Private Sub Cancel_Click()
    ConvertTable.Hide
End Sub

Private Sub ok_Click()
    ConvertTable.Hide
    tables.tConvert MakeLegend, MakeHeader, makeFooter
End Sub

Attribute VB_Name = "InsertPic"
Attribute VB_Base = "0{4BCC47AB-5C23-44AE-8789-2A6552BAC2F2}{8F45417F-6301-4AE0-B7EA-092BD74DE69A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub UserForm_Initialize()
    abb_typ.AddItem "Strich-Abb."
    abb_typ.AddItem "Halbton-Abb."
    abb_typ.ListIndex = 0
    abb_typ.BoundColumn = 1
    
    color_ist.AddItem "1c"
    color_ist.AddItem "2c"
    color_ist.AddItem "4c"
    color_ist.ListIndex = 0
    color_ist.BoundColumn = 1
    
    color_soll.AddItem "1c"
    color_soll.AddItem "2c"
    color_soll.AddItem "4c"
    color_soll.ListIndex = 0
    color_soll.BoundColumn = 1
    
    abdruckrechte.AddItem "Nicht notwendig"
    abdruckrechte.AddItem "Liegt vor"
    abdruckrechte.AddItem "Angefordert + erhalten"
    abdruckrechte.AddItem "Angefordert + noch nicht erhalten"
    abdruckrechte.AddItem "AG abgelehnt (-> Abb. entf|fffd|llt)"
    abdruckrechte.AddItem "Noch zu kl|fffd|ren"
    abdruckrechte.ListIndex = 0
    abdruckrechte.BoundColumn = 1

End Sub

Private Sub UserForm_Activate()
    autonumber.value = True
    InsertPic.file.Text = ""
    InsertPic.Legende.Text = ""
    InsertPic.Quellen.Text = ""
    InsertPic.hinweise.Text = ""
    InsertPic.RechteAutor = False
    InsertPic.abb_typ.ListIndex = 0
    InsertPic.color_ist.ListIndex = 0
    InsertPic.color_soll.ListIndex = 0
    InsertPic.abdruckrechte.ListIndex = 0
    InsertPic.Legende.SetFocus
End Sub

Private Sub Cancel_Click()
    InsertPic.file.Text = ""
    InsertPic.Legende.Text = ""
    InsertPic.Hide
End Sub

Private Sub ok_Click()
    
    If Trim(InsertPic.Quellen.value) = "" And Not InsertPic.RechteAutor.value Then
        MsgBox "Bitte Bildrechte eingeben"
        Exit Sub
    End If
    
    helpers.ifInPar
    menu.insertSpecial "SpFigureStart", "SpFigureStop", "Platzhalter Abbildung"
    If InsertPic.autonumber Then
        helpers.checkAndSetCaptionLabels ("Abb.")
        Selection.InsertCaption label:="Abb.", TitleAutoText:="", Title:=""
        Selection.style = ActiveDocument.Styles("SpFigLegend")
        Selection.MoveEnd Unit:=wdLine, Count:=1
        Selection.TypeText " "
    Else
        Selection.style = ActiveDocument.Styles("SpFigLegend")
    End If
        
        
    Selection.Text = InsertPic.Legende.Text & sizeTxt
    Selection.InsertParagraphAfter
    Selection.MoveDown Unit:=wdLine
    Selection.InsertAfter "Datei: " & InsertPic.file.Text
    Selection.style = ActiveDocument.Styles("SpFigFilename")
    
    Selection.InsertParagraphAfter
    Selection.MoveDown Unit:=wdLine
    Selection.InsertAfter "Abb.-Typ: " & InsertPic.abb_typ
    Selection.style = ActiveDocument.Styles("SpFigMeta")
    
    Selection.InsertParagraphAfter
    Selection.MoveDown Unit:=wdLine
    Selection.InsertAfter "Farbigkeit (IST): " & InsertPic.color_ist
    Selection.style = ActiveDocument.Styles("SpFigMeta")
    
    Selection.InsertParagraphAfter
    Selection.MoveDown Unit:=wdLine
    Selection.InsertAfter "Farbigkeit (SOLL): " & InsertPic.color_soll
    Selection.style = ActiveDocument.Styles("SpFigMeta")
    
    Selection.InsertParagraphAfter
    Selection.MoveDown Unit:=wdLine
    Selection.InsertAfter "Bildrechte: " & InsertPic.Quellen.Text
    If InsertPic.RechteAutor.value Then
        Selection.InsertAfter " [Urheberrecht beim Autor]"
    End If
    Selection.style = ActiveDocument.Styles("SpFigMeta")
    
    Selection.InsertParagraphAfter
    Selection.MoveDown Unit:=wdLine
    Selection.InsertAfter "Abdruckrechte: " & InsertPic.abdruckrechte
    Selection.style = ActiveDocument.Styles("SpFigMeta")
    
    Selection.InsertParagraphAfter
    Selection.MoveDown Unit:=wdLine
    Selection.InsertAfter "Hinweise Verlag/Setzerei: " & InsertPic.hinweise
    Selection.style = ActiveDocument.Styles("SpFigMeta")
    Selection.MoveDown Unit:=wdParagraph
    Selection.MoveDown Unit:=wdParagraph
        
    InsertPic.Hide
    Selection.Collapse wdCollapseEnd
End Sub

Private Sub Dateiauswahl_Click()
    With Dialogs(wdDialogInsertPicture)
        res = .Display
        Select Case res
            Case -1:
                InsertPic.file.Text = helpers.DateiName(.name)
            Case Else
                ' do nothing
        End Select
    End With
End Sub
Attribute VB_Name = "InsertTable"
Attribute VB_Base = "0{88ED7A15-219B-4FCC-B24A-63D88969BC80}{B07AC68A-FDD1-40B9-AEE1-8FF7C14B42A8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub UserForm_Initialize()
    picSize.AddItem "Layoutgr|fffd||fffd|e"
    picSize.AddItem "S"
    picSize.AddItem "M"
    picSize.AddItem "L"
    picSize.BoundColumn = 0
    picSize.ListIndex = 0
End Sub

Private Sub UserForm_Activate()
    autonumbering.value = True
    picSize.ListIndex = 0
End Sub

Private Sub Cancel_Click()
    InsertTable.Hide
End Sub

Private Sub ok_Click()
    
    If colCount.value <> "" And rowCount.value <> "" Then
        InsertTable.Hide
        If Val(colCount.value) > 1 And Val(rowCount.value) > 0 Then
            If Not helpers.IsLineEmpty() Then
                Selection.EndKey Unit:=wdLine
                Selection.TypeParagraph
            End If
            Selection.TypeParagraph
            'Selection.TypeParagraph
            Selection.MoveUp Unit:=wdLine, Count:=1
            
            If picSize.value <> 0 Then
                Select Case picSize.value
                    Case 1
                        sizeTxt = "#S"
                    Case 2
                        sizeTxt = "#M"
                    Case 3
                        sizeTxt = "#L"
                End Select
            Else
                sizeTxt = ""
            End If
            
            tables.makeTable tCaption.value, header.value, footer.value, rowCount, colCount, autonumbering.value, sizeTxt
        Else
            MsgBox "Eine Tabelle muss mindestens 2 Spalten und 1 Reihe haben"
        End If
    End If
    
End Sub

Attribute VB_Name = "SelRef"
Attribute VB_Base = "0{87802B58-42F1-4C0F-BA83-44E0034BEDB2}{23F72403-2367-4C16-B21D-EE4CA2765B47}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub Cancel_Click()
    SelRef.Hide
End Sub

Private Sub ok_Click()
    'On Error GoTo ErrorHandler
    If ListBox1.ListIndex <> -1 Then
        If SelRef.Tag = "Lit." Then
            Selection.InsertCrossReference ReferenceType:=wdRefTypeNumberedItem, InsertAsHyperlink:=True, _
                ReferenceKind:=wdNumberNoContext, ReferenceItem:=ListBox1.List(ListBox1.ListIndex, 1)
        ElseIf SelRef.Tag = "T.-Abb." Then
            InsertPrefix ""
            Selection.InsertCrossReference ReferenceType:=wdRefTypeNumberedItem, InsertAsHyperlink:=True, _
                ReferenceKind:=wdNumberNoContext, ReferenceItem:=ListBox1.List(ListBox1.ListIndex, 1)
        ElseIf SelRef.Tag = "heading" Then
            ' Sonderbehandlung f|fffd|r Kapitelverweis
            x = ListBox1.List(ListBox1.ListIndex, 0)
            If InStr(Left(x, InStr(x, " ")), ".") <> 0 Then
                InsertPrefix "heading", " Abschn. "
            Else
                InsertPrefix "heading", " Kap. "
            End If
            Selection.InsertCrossReference ReferenceType:=wdRefTypeHeading, InsertAsHyperlink:=True, _
                ReferenceKind:=wdNumberNoContext, ReferenceItem:=ListBox1.List(ListBox1.ListIndex, 1)
        ElseIf SelRef.Tag = "Abb." Then
            InsertPrefix "Abb"
            Selection.InsertCrossReference ReferenceType:="Abb.", ReferenceKind:= _
                wdOnlyLabelAndNumber, ReferenceItem:=ListBox1.List(ListBox1.ListIndex, 1), _
                InsertAsHyperlink:=True, IncludePosition:=False, SeparateNumbers:=False, SeparatorString:=" "
        ElseIf SelRef.Tag = "Tab." Then
            InsertPrefix "Tab"
            Selection.InsertCrossReference ReferenceType:="Tab.", ReferenceKind:= _
                wdOnlyLabelAndNumber, ReferenceItem:=ListBox1.List(ListBox1.ListIndex, 1), _
                InsertAsHyperlink:=True, IncludePosition:=False, SeparateNumbers:=False, SeparatorString:=" "
        ElseIf SelRef.Tag = "Eq." Then
            InsertPrefix ""
            Selection.InsertCrossReference ReferenceType:="Gl.", ReferenceKind:= _
                wdOnlyLabelAndNumber, ReferenceItem:=ListBox1.List(ListBox1.ListIndex, 1), _
                InsertAsHyperlink:=True, IncludePosition:=False, SeparateNumbers:=False, SeparatorString:=" "
                        
            'Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, Text:="STYLEREF 1 \s ", PreserveFormatting:=False
            'Selection.TypeText Text:="."
            'Selection.InsertCrossReference ReferenceType:=wdRefTypeNumberedItem, ReferenceKind:= _
            '    wdNumberNoContext, ReferenceItem:=ListBox1.List(ListBox1.ListIndex, 1), _
            '    InsertAsHyperlink:=True, IncludePosition:=False, SeparateNumbers:=False, SeparatorString:=" "
        End If
    End If
    SelRef.Hide
    Exit Sub
    
ErrorHandler:
    MsgBox "Es ist ein Fehler aufgetreten. Bitte stellen Sie sicher, dass das Verweisziel nicht der letzte Absatz im Dokument ist.", vbCritical
    Exit Sub
End Sub

Private Sub ListBox1_DblClick(ByVal cancel As MSForms.ReturnBoolean)
    ok_Click
End Sub

Private Sub UserForm_Activate()
         
    ListBox1.Clear
    Application.ScreenUpdating = False
    
    LookFor = ""
    FromLeft = 0
    If SelRef.Tag = "Abb." Then
        SelRef.caption = "Querverweis f|fffd|r Abbildung einf|fffd|gen"
        myCap = "Abb."
    ElseIf SelRef.Tag = "Tab." Then
        SelRef.caption = "Querverweis f|fffd|r Tabelle einf|fffd|gen"
        myCap = "Tab."
    ElseIf SelRef.Tag = "heading" Then
        SelRef.caption = "Querverweis f|fffd|r |fffd|berschrift einf|fffd|gen"
        nItems = ActiveDocument.GetCrossReferenceItems(wdRefTypeHeading)
    ElseIf SelRef.Tag = "Lit." Then
        SelRef.caption = "Querverweis f|fffd|r Literatur einf|fffd|gen"
        LookFor = "["
        FromLeft = 1
        nItems = ActiveDocument.GetCrossReferenceItems(wdRefTypeNumberedItem)
    ElseIf SelRef.Tag = "T.-Abb." Then
        SelRef.caption = "Querverweis f|fffd|r Teilabbildung einf|fffd|gen"
        LookFor = "T.-Abb."
        FromLeft = 7
        nItems = ActiveDocument.GetCrossReferenceItems(wdRefTypeNumberedItem)
    ElseIf SelRef.Tag = "Eq." Then
        SelRef.caption = "Querverweis f|fffd|r Formeln einf|fffd|gen"
        myCap = "Gl."
        'LookFor = ")"
        'FromRight = 1
        'nItems = ActiveDocument.GetCrossReferenceItems(wdRefTypeNumberedItem)
    
    End If
    
    If SelRef.Tag = "Lit." Or SelRef.Tag = "T.-Abb." Then
        For i = 1 To UBound(nItems)
            If Left(Trim(nItems(i)), FromLeft) = LookFor Then
                ListBox1.AddItem Trim(nItems(i))
                ListBox1.List(ListBox1.ListCount - 1, 1) = i
            End If
        Next i
    'ElseIf SelRef.Tag = "Eq." Then
    '    For i = 1 To UBound(nItems)
    '        If Right(Trim(nItems(i)), FromRight) = LookFor Then
    '            ListBox1.AddItem Trim(nItems(i))
    '            ListBox1.List(ListBox1.ListCount - 1, 1) = i
    '        End If
    '    Next i
    Else
        If SelRef.Tag = "Abb." Or SelRef.Tag = "Tab." Or SelRef.Tag = "Eq." Then
            ' 2 Tage Versuch des Bug-Fixings getCrossReferenceItem
            ' Die Funktion liefert je nach Prozessorgeschwindigkeit und Umgebung
            ' eine vollkommmen unterschiedliche Anzahl von Elementen zur|fffd|ck.
            ' Nach Kapselung der Funktion in einer eigenen Funktion scheint es zu gehen
            x = refWorkaround.getRefs2(myCap)
            For i = 1 To UBound(x)
                If SelRef.Tag = "Eq." Then
                    's = Right(x(i), Len(x(i)) - InStr(x(i), "Formel ") + 1)
                    ListBox1.AddItem Trim(x(i))
                Else
                    ListBox1.AddItem Trim(x(i))
                End If
                ListBox1.List(ListBox1.ListCount - 1, 1) = i
            Next i
        ElseIf SelRef.Tag = "heading" Then
            For i = 1 To UBound(nItems)
                ListBox1.AddItem Trim(nItems(i))
                ListBox1.List(ListBox1.ListCount - 1, 1) = i
            Next i
        End If
    End If
    Application.ScreenUpdating = True
    Application.ScreenRefresh
       
End Sub

Sub InsertPrefix(pType, Optional headingType = "")
    
    If pType = "heading" Then
        Selection.InsertSymbol CharacterNumber:=9654, Unicode:=True
        Selection.TypeText headingType
    ElseIf pType = "Abb" Then
        Selection.InsertSymbol CharacterNumber:=9673, Unicode:=True
        Selection.TypeText " "
    ElseIf pType = "Tab" Then
        Selection.InsertSymbol CharacterNumber:=9673, Unicode:=True
        Selection.TypeText " "
    ElseIf pType = "page" Then
        Selection.InsertSymbol CharacterNumber:=9654, Unicode:=True
        Selection.TypeText " "
    ElseIf pType = "part" Then
        Selection.InsertSymbol CharacterNumber:=9654, Unicode:=True
        Selection.TypeText " Abschn. "
    ElseIf pType = "headfree" Then
        Selection.InsertSymbol CharacterNumber:=9654, Unicode:=True
        Selection.TypeText " Kap. "
    ElseIf pType = "Formel" Then
        Selection.TypeText "Formel "
    
    End If

End Sub
Attribute VB_Name = "Statistic"
Attribute VB_Base = "0{623A9FAD-B69F-4B40-9E68-6A8CB1AA17F9}{A7A79769-0545-49E3-A1F9-A273DF49AFE7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub ok_Click()
    Statistic.Hide
End Sub

Private Sub UserForm_Activate()
    LPages.caption = Str(ActiveDocument.ComputeStatistics(wdStatisticPages, True))
    LPars.caption = Str(ActiveDocument.ComputeStatistics(wdStatisticParagraphs, True))
    LLines.caption = Str(ActiveDocument.ComputeStatistics(wdStatisticLines, True))
    LWords.caption = Str(ActiveDocument.ComputeStatistics(wdStatisticWords, True))
    LChars.caption = Str(ActiveDocument.ComputeStatistics(wdStatisticCharactersWithSpaces, True))
End Sub

Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Dim mehrfachTemplate As Boolean
' ActiveDocument.Variables("thVersion").value = "2.0.14"
' unter Formulare.versionInfo setzen

Private Sub Document_New()
    stdInit
End Sub

Private Sub Document_Open()
    stdInit
End Sub

Private Sub stdInit()
    On Error GoTo ErrorHandler
            
    'deleteMacroWarning
    init.InitDoc
    Exit Sub
   
ErrorHandler:
    Mldg = "Fehler # " & Str(Err.Number) & " wurde ausgel|fffd|st von " _
            & Err.Source & Chr(13) & "-> " & Err.Description & Chr(13) _
            & "Empfehlung: speichern, Dokument schlie|fffd|en, Dokument neu |fffd|ffnen."
    MsgBox Mldg, , "Fehler", Err.HelpFile, Err.HelpContext
End Sub

Private Sub deleteMacroWarning()
    On Error GoTo Dummy
    If ActiveDocument.Range(0, 18) = "Achtung! Sie haben" Then
        ActiveDocument.Paragraphs(1).Range.Delete
        Selection.style = "SpStandard"
    End If
Dummy:

End Sub
Attribute VB_Name = "Validierung"
Attribute VB_Base = "0{9F9F3635-9057-4477-BB3F-599E0B9B7809}{00009F1D-F175-40FB-A197-24FBF6AADDDA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Attribute VB_Name = "WaitInit"
Attribute VB_Base = "0{0387BC32-0BAB-4665-9349-A8941E1CFD50}{43F34A77-AFD6-4E0E-BD1E-AEC1127293BC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "blocker"
' Option Private Module

Sub FormatAbsatz()

End Sub

Sub FormatEigenschaften()

End Sub

Sub FormatFormatVorlage()

End Sub

Sub Formatierfenster()

End Sub

Sub Formatvorlage()

End Sub

Sub Formatvorlage|fffd|ndern()

End Sub

Sub FormatvorlageNeuDefinieren()

End Sub

Sub FormatvorlageNachBeispiel()

End Sub

Sub FormatvorlageSichtbar()

End Sub

Sub FormatZeichen()

End Sub

Sub FormatPosRahmen()

End Sub

Sub FormatDesign()

End Sub

Sub FormatFormatvorlagenGruppe()

End Sub

Sub ExtrasMakro()

End Sub

Sub ExtrasOptionen()

End Sub

Sub ExtrasAnpassen()

End Sub

Sub Schriftart()

End Sub

Sub Schriftgradauswahl()

End Sub

Sub AnsichtKopfzeile()

End Sub

Sub AnsichtFu|fffd|zeile()

End Sub

'AnzeigenAufgabenbereich

Sub AnzeigenFormatierung()

End Sub

Attribute VB_Name = "callbacks"
Sub btnStyle(control As IRibbonControl)
    Select Case control.id
    Case "parStandard"
        Selection.style = ActiveDocument.Styles("SpStandard")
    Case "h1": Selection.style = ActiveDocument.Styles(wdStyleHeading1)
    Case "h2": Selection.style = ActiveDocument.Styles(wdStyleHeading2)
    Case "h3": Selection.style = ActiveDocument.Styles(wdStyleHeading3)
    Case "h4": Selection.style = ActiveDocument.Styles(wdStyleHeading4)
    Case "h5": Selection.style = ActiveDocument.Styles(wdStyleHeading5)
    Case "H6": Selection.style = ActiveDocument.Styles(wdStyleHeading6)
    Case "chapterHeader"
        Selection.style = ActiveDocument.Styles("SpPart")
    Case "chapterSubHeader"
        Selection.style = ActiveDocument.Styles("SpH1SubHeader")
    Case "specialHead1"
        menu.whichButton "<specialHead1>"
    Case "specialHead2"
        menu.whichButton "<specialHead2>"
    Case "specialHead3"
        menu.whichButton "<specialHead3>"
    Case Else
        MsgBox "btnStyle: " & control.id
    End Select
                
End Sub

Sub btnMac(control As IRibbonControl)

    Select Case control.id
    Case "insFootnote"
        menu.whichButton "mFootnote"
    Case "deleteStyle"
        menu.whichButton "clearFormat"
    Case "margin"
        menu.whichButton "mMargin"
    Case "templateVersion"
        versionInfo.Show vbModal
    Case "statistic"
        menu.whichButton "mStatistic"
    Case "insIndexEntry2"
        menu.whichButton "mSachverzeichnis"
    Case "marginLex"
        menu.whichButton "mRandspalteLexikon"
    Case "parMarginText"
        Selection.style = ActiveDocument.Styles("SpMarginText")
    Case Else
        MsgBox "btnMac: " & control.id
    End Select
    
End Sub

Sub mnTab(control As IRibbonControl)
    Select Case control.id
    Case "insTable"
        menu.whichButton "mInsertTable"
    Case "setTabLegend"
        menu.whichButton "<T_Tab_Leg>"
    Case "setTabHeader"
        menu.whichButton "<T_Tab_Kopf>"
    Case "setTabBody"
        menu.whichButton "<T_Tab_Body>"
    Case "setTabSubtitle1"
        menu.whichButton "<specialHead1>"
    Case "setTabSubtitle2"
        menu.whichButton "<specialHead2>"
    Case "setTabFooter"
        menu.whichButton "<T_Tab_Fuss>"
    Case "convertTable"
        menu.whichButton "mConvertTable"
    Case "insPartBreak"
        Selection.InsertBreak Type:=wdSectionBreakContinuous
    Case Else
        MsgBox "mnTab: " & control.id
    End Select
    
End Sub

Sub mnAbb(control As IRibbonControl)
    
    Select Case control.id
    Case "insFigure"
        InsertPic.Show vbModal
    Case "setCharFigureTitel"
        Selection.style = ActiveDocument.Styles("SpFigTitle")
    Case "setFigLegend"
        Selection.style = ActiveDocument.Styles("SpFigLegend")
    Case "setFigFile"
        Selection.style = ActiveDocument.Styles("SpFigFilename")
    Case "abdr_0"
        picMetaHelper "Nicht notwendig"
    Case "abdr_1"
        picMetaHelper "Liegt vor"
    Case "abdr_2"
        picMetaHelper "Angefordert + erhalten"
    Case "abdr_3"
        picMetaHelper "Angefordert + noch nicht erhalten"
    Case "abdr_4"
        picMetaHelper "AG abgelehnt (Abb. entf|fffd|llt)"
    Case "abdr_5"
        picMetaHelper "Noch zu kl|fffd|ren"
    Case Else
        MsgBox "mnAbb: " & control.id
    End Select
    
End Sub

Sub mnStyle(control As IRibbonControl)
    
    Select Case control.id
    Case "parAuthor"
        menu.whichButton "<author>"
    Case "parMotto"
        menu.whichButton "SpMotto"
    Case "parLiterature"
        menu.whichButton "<literatur>"
    Case "parEquation"
        menu.whichButton "<equation>"
    Case "litemDash1"
        Selection.style = ActiveDocument.Styles("SpListDash1")
    Case "litemDash2"
        Selection.style = ActiveDocument.Styles("SpListDash2")
    Case "litemDash3"
        Selection.style = ActiveDocument.Styles("SpListDash3")
    Case "litemNum1"
        Selection.style = ActiveDocument.Styles("SpListArabic1")
    Case "litemNum2"
        Selection.style = ActiveDocument.Styles("SpListArabic2")
    Case "litemNum3"
        Selection.style = ActiveDocument.Styles("SpListArabic3")
    Case "litemChar1"
        Selection.style = ActiveDocument.Styles("SpListChar1")
    Case "litemChar2"
        Selection.style = ActiveDocument.Styles("SpListChar2")
    Case "litemChar3"
        Selection.style = ActiveDocument.Styles("SpListChar3")
    Case "litemEmpty1"
        Selection.style = ActiveDocument.Styles("SpListEmpty1")
    Case "litemEmpty2"
        Selection.style = ActiveDocument.Styles("SpListEmpty2")
    Case "litemEmpty3"
        Selection.style = ActiveDocument.Styles("SpListEmpty3")
    Case "litemRomNum1"
        Selection.style = ActiveDocument.Styles("SpListRom1")
    Case "litemRomNum2"
        Selection.style = ActiveDocument.Styles("SpListRom2")
    Case "litemRomNum3"
        Selection.style = ActiveDocument.Styles("SpListRom3")
    Case "litemUpperChar1"
        Selection.style = ActiveDocument.Styles("SpListUpperChar1")
    Case "litemUpperChar2"
        Selection.style = ActiveDocument.Styles("SpListUpperChar2")
    Case "litemUpperChar3"
        Selection.style = ActiveDocument.Styles("SpListUpperChar3")
    Case "counterReset"
        menu.whichButton "ListReset"
    Case "counterContinue"
        menu.whichButton "ListContinue"
    Case "blockQuote"
        menu.whichButton "<blockQuote>"
    Case "parLine"
        Selection.style = ActiveDocument.Styles("SpLine")
    Case "parArticleNote"
        Selection.style = ActiveDocument.Styles("SpArticlenote")
    Case "parAbstract"
        helpers.ifInPar
        Selection.style = ActiveDocument.Styles("SpAbstract")
        Selection.Font.Bold = True
        Selection.TypeText Text:="Zusammenfassung"
        Selection.Font.Bold = False
        Selection.TypeText Text:=" "
        Selection.InsertParagraphAfter
        Selection.MoveDown
        Selection.style = ActiveDocument.Styles("SpAbstract")
    Case "parKeywords"
    Selection.style = ActiveDocument.Styles("SpKeywords")
    Case Else
        MsgBox "mnStyle: " & control.id
    End Select

End Sub

Sub mnMac(control As IRibbonControl)
    
    Select Case control.id
    Case "equationCounter"
        menu.whichButton "mInsertEqCounter"
    Case "insRefPic"
        menu.whichButton "mPicRef"
    Case "insRefTab"
        menu.whichButton "mTabRef"
    Case "insRefHeading"
        menu.whichButton "mSetHeadingRef"
    Case "insRefLiterature"
        menu.whichButton "mLitRef"
    Case "insRefBlockade"
        menu.whichButton "mPageRef"
    Case "refreshCounter"
        menu.whichButton "mUpdateFields"
    Case "refreshCounter2"
        menu.whichButton "mUpdateFields"
    Case "setChapNum"
        menu.EnterChapNum
    Case "validate"
        check.Start
    Case "clearValidationErrors"
        check.undoRed
    Case "makePicList"
        pics.makeAbbList
    Case "makeTabList"
        tables.MakeTabList
    Case "spExkurs"
        menu.whichButton "mExkurse"
    Case "spFallbeispiel"
        menu.whichButton "mCaseStudy"
    Case "spPetit"
        menu.whichButton "mMaterials"
    Case "spJoker3"
        menu.whichButton "mBox"
    Case "spJoker4"
        menu.whichButton "mResults"
    Case "spHead1"
        menu.whichButton "<specialHead1>"
    Case "spHead2"
        menu.whichButton "<specialHead2>"
    Case "spAnleitungen"
        menu.whichButton "Procedure"
    Case "spAntworten"
        menu.whichButton "Answers"
    Case "spBeispiel"
        menu.whichButton "mExample"
    Case "spCave"
        menu.whichButton "mWarning"
    Case "spDefinition"
        menu.whichButton "mDefinition"
    Case "spDosierung"
        menu.whichButton "mRecipe"
    Case "spFazit"
        menu.whichButton "mConclusion"
    Case "spFragen"
        menu.whichButton "mQuestions"
    Case "spMerksatz"
        menu.whichButton "mImportant"
    Case "spTipp"
        menu.whichButton "mTip"
    Case "spTrailer"
        menu.whichButton "mTrailer"
    Case "spOverview"
        menu.whichButton "mOverview"
    Case "spBackground"
        menu.whichButton "mBackground"
    Case "spZitat"
        menu.whichButton "mLiteral"
    Case "spJoker1"
        menu.whichButton "mEyeCatcher"
    Case "spJoker2"
        menu.whichButton "mLearningGoals"
    Case "spLegal"
        menu.whichButton "mLegalText"
    Case "spQuestionnaire"
        menu.whichButton "mQuestionnaire"
    Case "spHead1_1"
        menu.whichButton "<specialHead1>"
    Case "hintAuthor"
        menu.whichButton "mMsgAuthor"
    Case "hintCE"
        menu.whichButton "mMsgCE"
    Case "indexEntryToArial"
        menu.whichButton "mIndexEntryToArial"
    Case "spAbbrev"
        menu.whichButton "mAbbrevGroup"
    Case "spGloassary"
        menu.whichButton "mGlossary"
    Case "spDefinitionList"
        menu.whichButton "mDefList"
    Case "insRefEq"
        menu.whichButton "mEqRef"
    Case "insRefHeadingFree"
        menu.whichButton "mHeadingFreeRef"
    Case "insRefPartFree"
        menu.whichButton "mPartFreeRef"
    Case "spTerm"
        menu.whichButton "spTerm"
    Case "spDesc"
        menu.whichButton "spDescription"
    Case "greekfloat"
        greekFloating.Show
    Case "insertToc"
        menu.InsertToc
    Case "acceptChanges":
        If ActiveDocument.Revisions.Count >= 1 Then
            ActiveDocument.AcceptAllRevisions
        End If
    Case "delComments":
        If ActiveDocument.Comments.Count > 0 Then
            ActiveDocument.DeleteAllComments
        End If
        menu.deletePartBreaks
        helpers.delMultipleBlanks
        helpers.delMultiplePars
        helpers.removeAllHighlights
        helpers.removeTocs
        helpers.removeSVZs
    Case "shortcuts"
        shortcuts.Show vbModeless
    Case Else
        MsgBox "mnMac: " & control.id
    End Select

End Sub

Sub galMac(control As IRibbonControl, id As String, index As Integer)

    Select Case id
    Case "__id62"
        Selection.Text = "|fffd|"
    Case "__id63"
        Selection.Text = "|fffd|"
    Case "__id64"
        Selection.Text = ChrW(8211)
    Case "__id65"
        Selection.Text = ChrW(8804)
    Case "__id66"
        Selection.Text = ChrW(8805)
    Case "__id67"
        Selection.Text = ChrW(8800)
    Case "__id68"
        Selection.Text = ChrW(8592)
    Case "__id69"
        Selection.Text = ChrW(8593)
    Case "__id85"
        Selection.Text = ChrW(8594)
    Case "__id70"
        Selection.Text = ChrW(8595)
    Case "__id71"
        Selection.Text = "|fffd|"
    Case "__id72"
        Selection.Text = "|fffd|"
    Case "__id73"
        Selection.Text = "|fffd|"
    Case "__id74"
        Selection.Text = "|fffd|"
    Case "__id75"
        Selection.Text = "|fffd|"
    Case "__id76"
        Selection.Text = ChrW(8531)
    Case "__id77"
        Selection.Text = "|fffd|"
    Case "__id78"
        Selection.Text = "|fffd|"
    Case "__id79"
        Selection.Text = "|fffd|"
    Case "__id80"
        Selection.Text = ChrW(9608)
    Case "__id81"
        Selection.Text = ChrW(160)
    Case "__id82"
        Selection.Text = ChrW(8218) ' 8220
    Case "__id83"
        Selection.Text = ChrW(8219) ' 8221
    Case "__id24"
        Selection.Text = ChrW(945)
    Case "__id25"
        Selection.Text = ChrW(946)
    Case "__id26"
        Selection.Text = ChrW(947)
    Case "__id27"
        Selection.Text = ChrW(948)
    Case "__id28"
        Selection.Text = ChrW(949)
    Case "__id29"
        Selection.Text = ChrW(950)
    Case "__id30"
        Selection.Text = ChrW(951)
    Case "__id31"
        Selection.Text = ChrW(952)
    Case "__id32"
        Selection.Text = ChrW(953)
    Case "__id33"
        Selection.Text = ChrW(954)
    Case "__id34"
        Selection.Text = ChrW(955)
    Case "__id35"
        Selection.Text = ChrW(956)
    Case "__id36"
        Selection.Text = ChrW(957)
    Case "__id37"
        Selection.Text = ChrW(958)
    Case "__id38"
        Selection.Text = ChrW(959)
    Case "__id39"
        Selection.Text = ChrW(960)
    Case "__id40"
        Selection.Text = ChrW(961)
    Case "__id41"
        Selection.Text = ChrW(963)
    Case "__id42"
        Selection.Text = ChrW(962)
    Case "__id43"
        Selection.Text = ChrW(964)
    Case "__id44"
        Selection.Text = ChrW(965)
    Case "__id45"
        Selection.Text = ChrW(966)
    Case "__id46"
        Selection.Text = ChrW(967)
    Case "__id47"
        Selection.Text = ChrW(968)
    Case "__id48"
        Selection.Text = ChrW(969)
    Case "__id49"
        Selection.Text = ChrW(977)
    Case "__id50"
        Selection.Text = ChrW(981)
    Case "__id51"
        Selection.Text = ChrW(982)
    Case "__id52"
        Selection.Text = ChrW(915)
    Case "__id53"
        Selection.Text = ChrW(916)
    Case "__id54"
        Selection.Text = ChrW(920)
    Case "__id55"
        Selection.Text = ChrW(923)
    Case "__id56"
        Selection.Text = ChrW(926)
    Case "__id57"
        Selection.Text = ChrW(928)
    Case "__id58"
        Selection.Text = ChrW(931)
    Case "__id59"
        Selection.Text = ChrW(934)
    Case "__id60"
        Selection.Text = ChrW(936)
    Case "__id61"
        Selection.Text = ChrW(937)
    Case "__linePlaceholder"
        'Selection.Text = ChrW(9601)
        Selection.Text = ChrW(9601) & ChrW(9601) & ChrW(9601)
    Case "__xover"
        helpers.sonder_xquer
    Case "__vdot"
        helpers.sonder_vdot
    Case "__stuhl"
        Selection.Text = ChrW(9281)
    Case Else
        MsgBox "galMac: " & id & " " & index
    End Select
    Selection.Collapse Direction:=wdCollapseEnd
    
End Sub

Sub picMetaHelper(tx)
    Selection.Paragraphs(1).Range.Delete
    Selection.InsertParagraphBefore
    Selection.Collapse
    Selection.InsertAfter "Abdruckrechte: " & tx
    Selection.style = ActiveDocument.Styles("SpFigMeta")
    Selection.Collapse
End Sub
Attribute VB_Name = "check"
Option Private Module
Dim allowedPars As Variant
Dim errCounter As Integer

Sub InitContext()
    allowedPars = Array("|fffd|berschrift 1", "|fffd|berschrift 2", "|fffd|berschrift 3", "|fffd|berschrift 4", "|fffd|berschrift 5", "|fffd|berschrift 6", "|fffd|berschrift 7", _
    "Heading 1", "Heading 2", "Heading 3", "Heading 4", "Heading 5", "Heading 6", "Heading 7", "Fu|fffd|notentext", "Endnotentext", "Hyperlink")
    errCounter = 0
End Sub

Private Function notAllowed(token As String)
    notAllowed = True
    For Each entry In allowedPars
        If entry = token Then
            notAllowed = False
            Exit For
        End If
    Next entry
End Function

Sub Start()
    Validierung.Show
    Validierung.Repaint
    Application.ScreenRefresh
    OK = True
    InitContext
    errorList.lb.Clear
    delOldErrorBookmarks
    ' Styles
    If Not stylesOK Then OK = False
    If Not specialsOk Then OK = False
    
    Validierung.Hide
    If Not OK Then
        'MsgBox "Es sind Fehler bei der Evaluierung des Dokuments aufgetreten"
        errorList.Show
    Else
        MsgBox "Dokument in Ordnung!"
    End If
End Sub

Sub ResetErrorList()
    errorList.lb.Clear
    delOldErrorBookmarks
End Sub

Function stylesOK()
    Dim mainStory As Range
    Dim r As Range
    Dim p As Paragraph
    Dim s As style
    Dim Found As Boolean
        
    stylesOK = True
    Selection.Find.clearFormatting
    Selection.Find.Replacement.clearFormatting
    Application.ScreenUpdating = False
    Set mainStory = ActiveDocument.Content
    For Each p In mainStory.Paragraphs
        x = Left(p.style, 2)
        If (x <> "Sp" And notAllowed(p.style)) Then
            If p.Range.Characters.Count > 1 Then
                stylesOK = False
                insertErrorBookmark p, "Absatz: "
                'paraFalse p
            ElseIf Not helpers.inTable(p) Then
                stylesOK = False
                insertErrorBookmark p, "Absatz: "
                'paraFalse p
            End If
        Else
            If p.Range.Font.name <> "Arial Unicode MS" Then
                If p.Range.OMaths.Count = 0 Then
                    'paraFalse p
                    'charsFalse p
                    insertErrorBookmark p, "Zeichen: "
                    stylesOK = False
                End If
            End If
        End If
    Next p
    'replaceRedChars
    Application.ScreenUpdating = True
    If Not stylesOK Then
        MsgBox "Sie d|fffd|rfen nur erlaubte Formate und die Schrift Arial Unicode MS verwenden!"
    End If
End Function

Sub paraFalse(p As Paragraph)
    With p
        With .Borders(wdBorderLeft)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth600pt
            .color = wdColorRed
        End With
        .Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Borders(wdBorderTop).LineStyle = wdLineStyleNone
        .Borders(wdBorderBottom).LineStyle = wdLineStyleNone
        With .Borders
            .DistanceFromTop = 1
            .DistanceFromLeft = 4
            .DistanceFromBottom = 1
            .DistanceFromRight = 4
            .Shadow = False
        End With
    End With
End Sub

Sub charsFalse(p As Paragraph)
    p.Range.Font.color = wdColorGold
End Sub

Sub replaceRedChars()
    Selection.HomeKey Unit:=wdStory
    With Selection.Find
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
        .Font.NameAscii = "Arial Unicode MS"
        .Font.color = wdColorGold
        .Wrap = wdFindContinue
        .Replacement.Font.color = wdColorBlack
    End With
    Selection.Find.Execute FindText:="", ReplaceWith:="", Forward:=True, Format:=True, Replace:=wdReplaceAll
End Sub

Sub undoRed()
    ResetErrorList
    'Set mainStory = ActiveDocument.Content
    'For Each p In mainStory.Paragraphs
    '    With p.Borders(wdBorderLeft)
    '        If .LineStyle = wdLineStyleSingle And .LineWidth = wdLineWidth600pt And .color = wdColorRed Then
    '            .LineStyle = wdLineStyleNone
    '        End If
    '    End With
    'Next p
End Sub

Function specialsOk()
    Dim i, Add As Integer
    Dim p As Paragraph
    Dim HStack As Variant
    specialsOk = True
    HStack = Array(0, 0, 0, 0, 0, 0)
    Add = 1
    
    For Each p In ActiveDocument.Content.Paragraphs
        foundH = True
        Select Case p.style
            Case "SpSpecialStart"
                HStack(1) = HStack(1) + Add
            Case "SpBoxStart"
                HStack(2) = HStack(2) + Add
            Case "SpMarginStart"
                HStack(3) = HStack(3) + Add
            Case "SpFigureStart"
                HStack(4) = HStack(4) + Add
            Case "<T_H5Start>"
                HStack(5) = HStack(5) + Add
                
            Case "SpSpecialStop"
                HStack(1) = HStack(1) - Add
            Case "SpBoxStop"
                HStack(2) = HStack(2) - Add
            Case "SpMarginStop"
                HStack(3) = HStack(3) - Add
            Case "SpFigureStop"
                HStack(4) = HStack(4) - Add
            Case "<T_H5Stop>"
                HStack(5) = HStack(5) - Add
            Case Else
                foundH = False
        End Select
        
        If foundH Then
            For i = 1 To 5
                If HStack(i) > 1 Or HStack(i) < 0 Then
                    specialsOk = False
                    insertErrorBookmark p, "Container: "
                    'markSpecial p
                    Exit For
                End If
            Next i
            If specialsOk Then
                j = HStack(1) + HStack(2) + HStack(3) + HStack(4) + HStack(5)
                If j > 1 Then
                    specialsOk = False
                    insertErrorBookmark p, "Container: "
                    'markSpecial p
                End If
            End If
            If Not specialsOk Then
                MsgBox "Mindestens eine Sonderumgebung wurde nicht korrekt geschlossen!"
                'MsgBox "Eine Sonderumgebung wurde nicht korrekt geschlossen!" _
                '& Chr(13) & "Der Cursor wird an der Stelle plaziert, an der entweder" _
                '& Chr(13) & "eine Schlie|fffd|ung zu viel existiert oder eine Sonderumgebung" _
                '& Chr(13) & "er|fffd|ffnet wird, ohne die vorherige geschlossen zu haben."
                'MsgBox HStack(1) & HStack(2) & HStack(3) & HStack(4) & HStack(5)
                Exit Function
            End If
        End If
        
    Next p
    
    'Kontrolle auf einen einzigen ge|fffd|ffneten ohne Ende
    For i = 1 To 5
        If HStack(i) = 1 Then
            findLastPar (i)
            specialsOk = False
            If Not specialsOk Then
                MsgBox "Mindestens eine Sonderumgebung wurde nicht korrekt geschlossen!"
                'MsgBox "Eine Sonderumgebung (H1-H5) wurde nicht korrekt geschlossen!" _
                '& Chr(13) & "Der Cursor wird an der Stelle plaziert, an der entweder" _
                '& Chr(13) & "eine Schlie|fffd|ung zu viel existiert oder eine Sonderumgebung" _
                '& Chr(13) & "er|fffd|ffnet wird, ohne die vorherige geschlossen zu haben."
                'MsgBox HStack(1) & HStack(2) & HStack(3) & HStack(4) & HStack(5)
                Exit Function
            End If
        End If
    Next
    
End Function

Sub findLastPar(i)
    Select Case i
        Case 1
            s = "SpSpecialStart"
        Case 2
            s = "SpBoxStart"
        Case 3
            s = "SpMarginStart"
        Case 4
            s = "SpFigureStart"
        Case 5
            s = "<T_H5Start>"
        Case Else
            s = "#######"
    End Select
    
    maxp = ActiveDocument.Paragraphs.Count
    
    For i = maxp To 1 Step -1
        If ActiveDocument.Paragraphs(i).style = s Then
            'markSpecial ActiveDocument.Paragraphs(i)
            insertErrorBookmark ActiveDocument.Paragraphs(i), "Container: "
            Exit For
        End If
    Next i
End Sub

Sub markSpecial(p As Paragraph)
    'p.Format.Shading.BackgroundPatternColor = wdColorRed
    'p.Range.InsertBefore "Diese oder die vorhergehende Hervorhebung ist falsch geschlossen!"
    'p.Range.Font.color = wdColorWhite
    p.Range.Select
End Sub

Sub indexEntryToArial()
    Dim f As Field
    
    For Each f In ActiveDocument.Fields
        If f.Type = wdFieldIndexEntry Then
            f.Select
            Selection.Font.name = "Arial Unicode MS"
        End If
    Next f
End Sub

Private Sub insertErrorBookmark(p As Paragraph, prefix As String)
    Dim bName As String
    
    errCounter = errCounter + 1
    bName = "err__" & Trim(Str(errCounter))
    errorList.Add p, bName, prefix
    ActiveDocument.bookmarks.Add bName, p.Range

End Sub

Private Sub delOldErrorBookmarks()
    Dim b As Bookmark

    For Each b In ActiveDocument.bookmarks
        If Left(b.name, 5) = "err__" Then
            b.Delete
        End If
    Next b
    
End Sub


Attribute VB_Name = "errorList"
Attribute VB_Base = "0{453798B2-CABA-478B-9210-0D477875182F}{6E053AA9-963E-4629-BF60-8C9867249BF8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub lb_Click()
    If lb.ListIndex <> -1 Then
        ActiveDocument.bookmarks(lb.List(lb.ListIndex, 1)).Select
    End If
End Sub

Sub Add(p As Paragraph, bName As String, prefix As String)
    lb.AddItem prefix & Left(p.Range.Text, 30)
    lb.List(lb.ListCount - 1, 1) = bName
End Sub

Attribute VB_Name = "greekFloating"
Attribute VB_Base = "0{9C948A3D-1541-4E9E-9211-169069036A20}{594CDE18-9960-4DC2-8EA8-D05955D6E4DF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub SimpleAdd(c, Optional lb = "")
    If lb = "" Then
        lbs.AddItem c
        lbs.List(lbs.ListCount - 1, 1) = c
    ElseIf lb = "lbg" Then
        lbg.AddItem c
        lbg.List(lbg.ListCount - 1, 1) = c
    End If
    
End Sub

Private Sub UserForm_Activate()

    lbs.Clear
    SimpleAdd "|fffd|"
    SimpleAdd "|fffd|"
    SimpleAdd ChrW(8211)
    SimpleAdd ChrW(8804)
    SimpleAdd ChrW(8805)
    SimpleAdd ChrW(8800)
    SimpleAdd ChrW(8592)
    SimpleAdd ChrW(8593)
    SimpleAdd ChrW(8594)
    SimpleAdd ChrW(8595)
    SimpleAdd "|fffd|"
    SimpleAdd "|fffd|"
    SimpleAdd "|fffd|"
    SimpleAdd "|fffd|"
    SimpleAdd "|fffd|"
    SimpleAdd ChrW(8531)
    SimpleAdd "|fffd|"
    SimpleAdd "|fffd|"
    SimpleAdd "|fffd|"
    SimpleAdd ChrW(9608)
    lbs.AddItem "_"
    lbs.List(lbs.ListCount - 1, 1) = ChrW(160)
    SimpleAdd ChrW(8218) ' 8220
    SimpleAdd ChrW(8219) ' 8221
    SimpleAdd ChrW(9601)
    lbs.AddItem "x quer"
    lbs.List(lbs.ListCount - 1, 1) = "m_xquer"
    lbs.AddItem "v punkt"
    lbs.List(lbs.ListCount - 1, 1) = "m_vdot"
    
    SimpleAdd ChrW(945), "lbg"
    SimpleAdd ChrW(946), "lbg"
    SimpleAdd ChrW(947), "lbg"
    SimpleAdd ChrW(948), "lbg"
    SimpleAdd ChrW(949), "lbg"
    SimpleAdd ChrW(950), "lbg"
    SimpleAdd ChrW(951), "lbg"
    SimpleAdd ChrW(952), "lbg"
    SimpleAdd ChrW(953), "lbg"
    SimpleAdd ChrW(954), "lbg"
    SimpleAdd ChrW(955), "lbg"
    SimpleAdd ChrW(956), "lbg"
    SimpleAdd ChrW(957), "lbg"
    SimpleAdd ChrW(958), "lbg"
    SimpleAdd ChrW(959), "lbg"
    SimpleAdd ChrW(960), "lbg"
    SimpleAdd ChrW(961), "lbg"
    SimpleAdd ChrW(962), "lbg"
    SimpleAdd ChrW(963), "lbg"
    SimpleAdd ChrW(964), "lbg"
    SimpleAdd ChrW(965), "lbg"
    SimpleAdd ChrW(966), "lbg"
    SimpleAdd ChrW(967), "lbg"
    SimpleAdd ChrW(968), "lbg"
    SimpleAdd ChrW(969), "lbg"
    SimpleAdd ChrW(977), "lbg"
    SimpleAdd ChrW(981), "lbg"
    SimpleAdd ChrW(982), "lbg"
    SimpleAdd ChrW(915), "lbg"
    SimpleAdd ChrW(916), "lbg"
    SimpleAdd ChrW(920), "lbg"
    SimpleAdd ChrW(923), "lbg"
    SimpleAdd ChrW(926), "lbg"
    SimpleAdd ChrW(928), "lbg"
    SimpleAdd ChrW(931), "lbg"
    SimpleAdd ChrW(934), "lbg"
    SimpleAdd ChrW(936), "lbg"
    SimpleAdd ChrW(937), "lbg"
    
End Sub

Private Sub UserForm_Initialize()
    ' hier nacher die Sachen von Activate |fffd|bernehmen
        
    
End Sub

Private Sub lbg_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    If lbg.ListIndex <> -1 Then
        Selection.InsertAfter lbg.List(lbg.ListIndex, 1)
        Selection.Collapse Direction:=wdCollapseEnd
    End If
End Sub

Private Sub lbs_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    If lbs.ListIndex <> -1 Then
        If lbs.List(lbs.ListIndex, 1) = "m_xquer" Then
            helpers.sonder_xquer
        ElseIf lbs.List(lbs.ListIndex, 1) = "m_vdot" Then
            helpers.sonder_vdot
        Else
            Selection.InsertAfter lbs.List(lbs.ListIndex, 1)
            Selection.Collapse Direction:=wdCollapseEnd
        End If
    End If
End Sub

Attribute VB_Name = "helpers"
Option Private Module

Function inTable(p As Paragraph)
    inTable = True
    If p.Range.tables.Count = 0 Then
        inTable = False
    End If
End Function
'Selection.Information(wdWithInTable)

Function IsLineEmpty()
    If Selection.Paragraphs(1).Range.Characters.Count = 1 Then
        IsLineEmpty = True
    Else
        IsLineEmpty = False
    End If
End Function

Function VariableExists(name)
    VariableExists = False
    For Each V In ActiveDocument.Variables
        If V.name = name Then
            VariableExists = True
            Exit For
        End If
    Next
End Function

Sub SetVariable(name, value)
    If Not VariableExists(name) Then
        ActiveDocument.Variables.Add name, value
    End If
End Sub

Sub toggleFormatView()
    If ActiveWindow.StyleAreaWidth = 0 Then
        ActiveWindow.StyleAreaWidth = CentimetersToPoints(2.5)
        If ActiveWindow.View.SplitSpecial = wdPaneNone Then
            ActiveWindow.ActivePane.View.Type = wdNormalView
        Else
            ActiveWindow.View.Type = wdNormalView
        End If
    Else
        ActiveWindow.StyleAreaWidth = 0
        If ActiveWindow.View.SplitSpecial = wdPaneNone Then
            ActiveWindow.ActivePane.View.Type = wdPrintView
        Else
            ActiveWindow.View.Type = wdPrintView
        End If
    End If
End Sub

Function styleExists(name)
    styleExists = False
    For Each f In ActiveDocument.Styles
        If f.NameLocal = name Then
            styleExists = True
            Exit For
        End If
    Next
End Function

Sub AddButtonToBar(cBar, caption, tooltip, cmd, Optional begGroup = False)
    Dim Button As CommandBarButton
    Set Button = CommandBars(cBar).Controls.Add(Type:=msoControlButton, temporary:=False)
    With Button
        .caption = caption
        .TooltipText = tooltip
        .style = msoButtonCaption
        .BeginGroup = begGroup
        .Tag = cmd
        .OnAction = "menu.whichButton"
        
    End With
End Sub

Sub AddButtonToCtrl(ctrl As CommandBarPopup, caption, tooltip, cmd, Optional begGroup = False, Optional enabled = True)
    Dim Button As CommandBarButton
    Set Button = ctrl.Controls.Add(Type:=msoControlButton, temporary:=False)
    With Button
        .caption = caption
        .TooltipText = tooltip
        .style = msoButtonAutomatic
        .BeginGroup = begGroup
        .enabled = enabled
        .Tag = cmd
        .OnAction = "menu.whichButton"
    End With
End Sub

Function ListTemplateIndex(ListTemplateName) As ListTemplate
    Dim lt As ListTemplate
    
    For Each lt In ActiveDocument.ListTemplates
        If lt.name = ListTemplateName Then
            Set ListTemplateIndex = lt
            Exit For
        End If
    Next
    
    If ListTemplateIndex Is Nothing Then
        Set ListTemplateIndex = ActiveDocument.ListTemplates.Add(True)
        ListTemplateIndex.name = ListTemplateName
    End If
    
    Set lt = Nothing
End Function

Sub AllowCommandBarCustomization(blnAllowEnabled As Boolean)
   ' This procedure allows or prevents access to the command bars
   ' Customize dialog box according to the value of the blnAllowEnabled
   ' argument.
   'ActiveDocument.CommandBars("Tools").Controls("Customize...").enabled = blnAllowEnabled
   CustomizationContext = ActiveDocument
   ActiveDocument.CommandBars.FindControl(id:=797).enabled = blnAllowEnabled
   ActiveDocument.CommandBars("Toolbar List").enabled = blnAllowEnabled
End Sub

Sub ifInPar()
    If Not helpers.IsLineEmpty() Then
        Selection.Paragraphs(1).Range.InsertParagraphAfter
        Selection.MoveDown wdParagraph
    End If
End Sub

Function makeSecureVarName(name)
    
    secureName = Replace(name, " ", "_")
    secureName = Replace(secureName, ".", "_")
    secureName = Replace(secureName, ",", "_")
    secureName = Replace(secureName, "$", "_")
    secureName = Replace(secureName, "@", "_")
    secureName = Replace(secureName, "&", "_")
    secureName = Replace(secureName, "|fffd|", "_")
    secureName = Replace(secureName, "%", "_")
    secureName = Replace(secureName, "/", "_")
    secureName = Replace(secureName, "\", "_")
    secureName = Replace(secureName, "?", "_")
    secureName = Replace(secureName, "=", "_")
    secureName = Replace(secureName, "#", "_")
    secureName = Replace(secureName, ":", "_")
    secureName = Replace(secureName, ">", "_")
    secureName = Replace(secureName, "<", "_")
    secureName = Replace(secureName, "*", "_")
    secureName = Replace(secureName, "+", "_")
    secureName = Replace(secureName, "'", "_")
    secureName = Replace(secureName, "-", "_")
    secureName = Replace(secureName, "~", "_")
    secureName = Replace(secureName, ";", "_")
    secureName = Replace(secureName, "|", "_")
    secureName = Replace(secureName, "|fffd|", "_")
    secureName = Replace(secureName, "^", "_")
    secureName = Replace(secureName, "!", "_")
    secureName = Replace(secureName, "(", "_")
    secureName = Replace(secureName, ")", "_")
    secureName = Replace(secureName, "`", "_")
    secureName = Replace(secureName, "|fffd|", "_")
    secureName = Replace(secureName, "}", "_")
    secureName = Replace(secureName, "{", "_")
    secureName = Replace(secureName, """", "_")
    makeSecureVarName = secureName
End Function

Sub checkAndSetCaptionLabels(labelName)

    Dim label, x As CaptionLabel
    Dim flag As Boolean
    
    flag = False
    For Each label In CaptionLabels
        If label.name = labelName Then
            flag = True
            Set x = label
            Exit For
        End If
    Next label
    
    If Not flag Then
        Set x = CaptionLabels.Add(labelName)
    End If
    x.Separator = wdSeparatorPeriod
    x.ChapterStyleLevel = 1
    x.IncludeChapterNumber = True
    
End Sub

Sub startOfPar()
    Selection.Paragraphs.First.Range.Characters(1).Select
    Selection.HomeKey
End Sub

Sub sonder_xquer()
    ActiveWindow.View.ShowFieldCodes = Not ActiveWindow.View.ShowFieldCodes
    Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, PreserveFormatting:=False
    Selection.TypeText Text:="eq \O(x;"
    Selection.TypeText ChrW(713)
    Selection.TypeText Text:=")"
    Selection.MoveRight Unit:=wdCharacter, Count:=3
    ActiveWindow.View.ShowFieldCodes = Not ActiveWindow.View.ShowFieldCodes
End Sub

Sub sonder_vdot()
    ActiveWindow.View.ShowFieldCodes = Not ActiveWindow.View.ShowFieldCodes
    Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, PreserveFormatting:=False
    Selection.TypeText Text:="eq \O(V;"
    Selection.TypeText ChrW(729)
    Selection.TypeText Text:=")"
    Selection.MoveRight Unit:=wdCharacter, Count:=3
    ActiveWindow.View.ShowFieldCodes = Not ActiveWindow.View.ShowFieldCodes
End Sub

Sub delMultipleBlanks()
    Selection.Find.clearFormatting
    Selection.Find.Replacement.clearFormatting
    With Selection.Find
        .Text = " {2;}"
        .Replacement.Text = " "
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchAllWordForms = False
        .MatchSoundsLike = False
        .MatchWildcards = True
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
End Sub

Sub delMultiplePars()
    Selection.Find.clearFormatting
    Selection.Find.Replacement.clearFormatting
    With Selection.Find
        .Text = "(^13){2;}"
        .Replacement.Text = "\1"
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = True
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    
    Selection.Find.Execute Replace:=wdReplaceAll

End Sub

Sub removeTocs()
    For Each myToc In ActiveDocument.TablesOfContents
        myToc.Delete
    Next myToc

End Sub

Sub removeSVZs()
    Dim myIndex As index
    For Each myIndex In ActiveDocument.Indexes
        myIndex.Delete
    Next myIndex
    
End Sub
 
Sub removeAllHighlights()
    Dim rngTemp As Range
    
    Set rngTemp = ActiveDocument.Range(Start:=0, End:=0)
    With rngTemp.Find
        .clearFormatting
        .Highlight = True
        With .Replacement
            .clearFormatting
            .Highlight = False
        End With
        .Execute Replace:=wdReplaceAll, Forward:=True, FindText:="", _
             ReplaceWith:="", Format:=True
    End With
End Sub

Function DateiName(PfadUndName As String, Optional MitEndung) As String
    Dim Pos As Integer, SuchZeichen As String
    If PfadUndName = "" Then Exit Function
    
    ' Letzten Backslash suchen
    Pos = 0
    Do
        PfadUndName = Mid(PfadUndName, Pos + 1)
        Pos = InStr(1, PfadUndName, "\")
    Loop Until Pos = 0
    
    If IsMissing(MitEndung) Then MitEndung = True
    If Not MitEndung Then
        ' Letzten Punkt suchen
        For Pos = Len(PfadUndName) To 1 Step -1
            If Mid(PfadUndName, Pos, 1) = "." Then
                PfadUndName = Left(PfadUndName, Pos - 1)
                Exit For
            End If
        Next Pos
    End If
    
    DateiName = PfadUndName
End Function

Sub mytest()
    nItems = ActiveDocument.GetCrossReferenceItems(wdRefTypeNumberedItem)
    For i = 1 To UBound(nItems)
        If Left(nItems(i), 1) = " " Then
            MsgBox nItems(i)
        End If
    Next i
End Sub

Attribute VB_Name = "init"
Option Private Module

Sub InitDoc()
    ' Options setzen
    CustomizationContext = ThisDocument 'ActiveDocument
    
    Options.ShowControlCharacters = False
    Options.TabIndentKey = False
        
    ActiveWindow.View.Type = wdPrintView
    ActiveWindow.View.ShowBookmarks = True
    ActiveWindow.StyleAreaWidth = CentimetersToPoints(2)
                                                           
End Sub

Sub delListFormats()
    ' als erstes aufrufen
    'delListTemplate "SpListDash"
    'delListTemplate "SpListArabic"
    'delListTemplate "SpListChar"
    'delListTemplate "SpListEmpty"
End Sub

Sub setListFormats()
    ' als zweites aufrufen
    'makeListTemplate "SpListDash", "dash"
    'makeListTemplate "SpListArabic", "arabic"
    'makeListTemplate "SpListChar", "char"
    'makeListTemplate "SpListEmpty", "empty"
    
    makeListTemplate "SpListUpperChar", "upperChar"
    makeListTemplate "SpListRom", "roman"
End Sub

Sub delListTemplate(name)
    For intLoop = 1 To 3
        s = Trim(name) & Trim(Str(intLoop)) '& ">"
        ActiveDocument.Styles(s).Delete
    Next intLoop
End Sub

Sub makeListTemplate(name, typ)
  
    Dim ltTemp As ListTemplate
    Dim intLoop As Integer
    Dim NumStyle As WdListNumberStyle
       
    On Error GoTo ErrorHandler
    ' Ist das Format schon vorhanden, wird abgebrochen
    For intLoop = 1 To 3
        s = Trim(name) & Trim(Str(intLoop)) ' & ">"
        newPar s, s
        With ActiveDocument.Styles(s).ParagraphFormat
            .TabStops.ClearAll
            .SpaceBefore = 0
            .SpaceAfter = 0
            .LeftIndent = 0
            .RightIndent = 0
        End With
    Next intLoop
        
    ' Alle Formate neu angelegt - jetzt wird ein neues ListTemplate angelegt bzw.
    ' ein bereits vorhandenes mit diesem Namen verwendet
    Set ltTemp = helpers.ListTemplateIndex(name)
    For intLoop = 1 To 3
        s = Trim(name) & Trim(Str(intLoop)) ' & ">"
        If typ = "dash" Then
            NumStyle = wdListNumberStyleNone
            If intLoop = 1 Then
                NumFormat = "-" 'ChrW(9679)
            ElseIf intLoop = 2 Then
                NumFormat = "-"
            ElseIf intLoop = 3 Then
                NumFormat = "-" ' ChrW(9675)
            End If
        ElseIf typ = "empty" Then
            NumStyle = wdListNumberStyleNone
            NumFormat = ""
        ElseIf typ = "arabic" Then
            NumStyle = wdListNumberStyleArabic
            NumFormat = "%" & Trim(Str(intLoop)) & "."
        ElseIf typ = "char" Then
            NumStyle = wdListNumberStyleLowercaseLetter
            NumFormat = "%" & Trim(Str(intLoop)) & "."
        ElseIf typ = "upperChar" Then
            NumStyle = wdListNumberStyleUppercaseLetter
            NumFormat = "%" & Trim(Str(intLoop)) & "."
        ElseIf typ = "roman" Then
            NumStyle = wdListNumberStyleUppercaseRoman
            NumFormat = "%" & Trim(Str(intLoop)) & "."
        ElseIf typ = "dot" Then
            NumStyle = wdListNumberStyleNone
            NumFormat = ChrW(9679) ' 25CF
        ElseIf typ = "square" Then
            NumStyle = wdNumberStyleNone
            NumFormat = ChrW(8718) ' 220E
        
        End If
        With ltTemp.ListLevels(intLoop)
            .NumberStyle = NumStyle
            .NumberPosition = CentimetersToPoints(0.65 * (intLoop - 1))
            .TextPosition = CentimetersToPoints(0.65 * intLoop)
            .TabPosition = CentimetersToPoints(0.65 * intLoop)
            .NumberFormat = NumFormat
            .LinkedStyle = s
        End With
    Next intLoop
        
ErrorHandler:
        
End Sub

Sub ChangeListItem(name, level)
    Dim ltTemp As ListTemplate
    Set ltTemp = helpers.ListTemplateIndex(name)
    
    's = Trim(name) & Trim(Str(level))
    With ltTemp.ListLevels(level)
        .NumberStyle = wdListNumberStyleArabic
        .NumberFormat = "[%1]"
        .NumberPosition = CentimetersToPoints(0.9 * (level - 1))
        .TextPosition = CentimetersToPoints(0.9 * level)
        .TabPosition = CentimetersToPoints(0.9 * level)
        .LinkedStyle = "SpReferences"
        .startAt = 1
    End With

End Sub

Private Sub newPar(name, nextPar)
    ActiveDocument.Styles.Add name:=name, Type:=wdStyleTypeParagraph
    With ActiveDocument.Styles(name)
        .AutomaticallyUpdate = False
        .BaseStyle = "SpStandard"
        .NextParagraphStyle = nextPar
    End With
End Sub

Sub makeShortCuts()
    CustomizationContext = ThisDocument 'ActiveDocument
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKey1), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.h1"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKey2), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.h2"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKey3), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.h3"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKey4), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.h4"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKey5), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.h5"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKey6), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.h6"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKey7), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.h7"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKeyS), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.scInsSubtitle"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKeyControl, wdKeyA), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.scPhead1"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKeyControl, wdKeyB), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.scPhead2"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKeyControl, wdKeyP), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.scPhead3"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKeyControl, wdKeyU), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.scTerm"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyControl, wdKeyShift, wdKeyX), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.scGS"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKeyControl, wdKeyHyphen), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.scDash1"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKeyControl, wdKeyShift, wdKeyHyphen), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.scDash2"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKeyZ), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.scBlockquote"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKeyL), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.scBiblio"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyControl, wdKeyShift, wdKeyT), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.scInsTable"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyControl, wdKeyShift, wdKeyA), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.scInsPic"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKeyT), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.scInsTableRef"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKeyA), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.scInsPicRef"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKeyU), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.scInsHeadingRef"
    KeyBindings.Add KeyCode:=BuildKeyCode(wdKeyAlt, wdKeyV), KeyCategory:=wdKeyCategoryMacro, Command:="mPublic.scInsFreeRef"
    
            
End Sub

Sub showKeyBindings()
    Dim aKey As KeyBinding
    CustomizationContext = ThisDocument
    For Each aKey In KeyBindings
        Selection.InsertAfter aKey.Command & vbTab & aKey.KeyString & vbCr
        Selection.Collapse Direction:=wdCollapseEnd
    Next aKey
End Sub

Sub makeHeadings(Optional startAt = 1, Optional chapChar = "")
    
    Dim lt As ListTemplate
    Dim NumFormat As String
        
    Set lt = helpers.ListTemplateIndex("thHeadings")
    For i = 1 To 7
        If i = 1 Then
            NumFormat = "%1"
            style = ActiveDocument.Styles(wdStyleHeading1)
        ElseIf i = 2 Then
            NumFormat = "%1.%2"
            style = ActiveDocument.Styles(wdStyleHeading2)
        ElseIf i = 3 Then
            NumFormat = "%1.%2.%3"
            style = ActiveDocument.Styles(wdStyleHeading3)
        ElseIf i = 4 Then
            NumFormat = "%1.%2.%3.%4"
            style = ActiveDocument.Styles(wdStyleHeading4)
        ElseIf i = 5 Then
            NumFormat = "%1.%2.%3.%4.%5"
            style = ActiveDocument.Styles(wdStyleHeading5)
        ElseIf i = 6 Then
            NumFormat = "%1.%2.%3.%4.%5.%6"
            style = ActiveDocument.Styles(wdStyleHeading6)
        ElseIf i = 7 Then
            NumFormat = "%1.%2.%3.%4.%5.%6.%7"
            style = ActiveDocument.Styles(wdStyleHeading7)
        End If
        
        With lt.ListLevels(i)
            .NumberStyle = wdListNumberStyleArabic
            .NumberPosition = 0
            .TextPosition = CentimetersToPoints(2.8)
            .TabPosition = CentimetersToPoints(2.8)
            .NumberFormat = NumFormat
            If i = 1 Then
                .ResetOnHigher = False
                .startAt = startAt
            Else
                .ResetOnHigher = i - 1
                .startAt = 1
            End If
            .LinkedStyle = style
        End With
    Next
End Sub


Sub makeEqCounter()
  
    Dim ltTemp As ListTemplate
               
    Set ltTemp = helpers.ListTemplateIndex("eqCounter")
    ltTemp.ListLevels(1).NumberFormat = "%1"
                
End Sub

Attribute VB_Name = "mPublic"
Sub WordCount()
    MsgBox "Zeichen: " & Str(Selection.Characters.Count())
End Sub
  
Sub GetVersion()
    versionInfo.Show (vbModal)
End Sub

Sub Dummy()

End Sub

Sub h1() ' <ALT><1>
    Selection.style = ActiveDocument.Styles(wdStyleHeading1)
End Sub

Sub h2() ' <ALT><2>
    Selection.style = ActiveDocument.Styles(wdStyleHeading2)
End Sub

Sub h3() ' <ALT><3>
    Selection.style = ActiveDocument.Styles(wdStyleHeading3)
End Sub

Sub h4() ' <ALT><4>
    Selection.style = ActiveDocument.Styles(wdStyleHeading4)
End Sub

Sub h5() ' <ALT><5>
    Selection.style = ActiveDocument.Styles(wdStyleHeading5)
End Sub

Sub h6() ' <ALT><6>
    Selection.style = ActiveDocument.Styles(wdStyleHeading6)
End Sub

Sub h7() ' <ALT><6>
    Selection.style = ActiveDocument.Styles(wdStyleHeading7)
End Sub

Sub scPhead1() ' strg alt A
    menu.whichButton "<specialHead1>"
End Sub

Sub scPhead2() ' strg alt B
    menu.whichButton "<specialHead2>"
End Sub

Sub scPhead3() ' strg alt P
    menu.whichButton "<specialHead3>"
End Sub

Sub scTerm() ' strg alt u
    menu.whichButton "SpTerm"
End Sub

Sub scGS() ' strg shift X
    menu.whichButton "SpStandard"
End Sub

Sub scDash1() ' strg alt -
    menu.whichButton "SpListDash1"
End Sub

Sub scDash2() ' strg shift alt -
    menu.whichButton "SpListDash2"
End Sub

Sub scBlockquote() ' alt Z
    menu.whichButton "SpBlockQuote"
End Sub

Sub scBiblio() ' alt L
    menu.whichButton "SpReferences"
End Sub

Sub scInsTable() ' strg shift T
    menu.whichButton "mInsertTable"
End Sub

Sub scInsEquation() ' strg shift E
    WordBasic.EquationEdit
End Sub

Sub scInsTableRef() ' alt T
    menu.whichButton "mTabRef"
End Sub

Sub scInsPicRef() ' alt A
    menu.whichButton "mPicRef"
End Sub

Sub scInsHeadingRef() ' alt U
    menu.whichButton "mSetHeadingRef"
End Sub

Sub scInsFreeRef() ' alt V
    menu.whichButton "mPageRef"
End Sub


Sub scInsPic() ' strg shift A
    InsertPic.Show vbModal
End Sub

Sub scInsSubtitle()
    Selection.style = ActiveDocument.Styles("SpH1Subheader")
End Sub
Attribute VB_Name = "menu"
Option Private Module
' ******************************************************************
' Mapping Buttons / Formate / Macs
' ******************************************************************
Sub whichButton(cmd)
    'MsgBox cmd
    'Exit Sub
    Select Case cmd
        ' basics
        Case "<specialHead1>"
            If Selection.Range <> "" Then Selection.Collapse
            Selection.style = ActiveDocument.Styles("SpSpecialHead1")
        Case "<specialHead2>"
            If Selection.Range <> "" Then Selection.Collapse
            Selection.style = ActiveDocument.Styles("SpSpecialHead2")
        Case "<specialHead3>"
            If Selection.Range <> "" Then Selection.Collapse
            Selection.style = ActiveDocument.Styles("SpSpecialHead3")
        Case "mFootnote"
            Dialogs(wdDialogInsertFootnote).Show
        ' Listen
        Case "ListReset"
            ListNumReset
        Case "ListContinue"
            ListNumContinue
        Case "ListNoNumbers"
            ListNumDel
        ' Extras
        Case "mNewChapNum"
            menu.EnterChapNum
        Case "mValidate"
            check.Start
        Case "mUndoMarks"
            check.undoRed
        ' Formate
        Case "<author>"
            Selection.style = ActiveDocument.Styles("SpAuthor")
        Case "<literatur>"
            Selection.style = ActiveDocument.Styles("SpReferences")
        Case "mMargin"
            insertSpecial "SpMarginStart", "SpMarginStop", "Marginalienblock"
        Case "clearFormat"
            If Application.Version = "9.0" Then
                MsgBox "Diese Funktion steht erst ab Word 2002 zur Verf|fffd|gung"
            Else
                non2000.clearFormatting
            End If
        Case "<equation>"
            Selection.style = ActiveDocument.Styles("SpEquation")
        Case "mInsertEqCounter"
            Selection.HomeKey Unit:=wdLine, Extend:=wdMove
            'Selection.EndKey Unit:=wdLine, Extend:=wdMove
            helpers.checkAndSetCaptionLabels ("Gl.")
            Selection.InsertCaption label:="Gl.", TitleAutoText:="", Title:=""
            Selection.style = ActiveDocument.Styles("SpEquation")
            Selection.TypeText Text:=vbTab
            'Selection.TypeText Text:="("
            'Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, Text:="STYLEREF 1 \s ", PreserveFormatting:=False
            'Selection.TypeText Text:="."
            'Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, Text:="LISTNUM  eqCounter \l 1 ", PreserveFormatting:=False
            'Selection.TypeText Text:=")"
        ' Tabellen
        Case "mInsertTable"
            InsertTable.Show vbModal
        Case "<T_Tab_Leg>":
            tables.SetTableLegLater
        Case "<T_Tab_Kopf>"
            tables.setTableHeader
        Case "<T_Tab_Body>"
            Selection.style = ActiveDocument.Styles("SpTab_Body")
        Case "<T_Tab_Fuss>"
            Selection.style = ActiveDocument.Styles("SpTab_Footer")
        Case "mConvertTable"
            ConvertTable.Show vbModal
        ' Querverweise
        Case "mPicRef"
            SelRef.Tag = "Abb."
            SelRef.Show vbModal
        Case "mTabRef"
            SelRef.Tag = "Tab."
            SelRef.Show vbModal
        Case "mSetHeadingRef"
            ' Dialogs(wdDialogInsertCrossReference).Show
            SelRef.Tag = "heading"
            SelRef.Show vbModal
        Case "mLitRef"
            SelRef.Tag = "Lit."
            SelRef.Show vbModal
        Case "mPageRef"
            SelRef.InsertPrefix "page"
        Case "mHeadingFreeRef"
            SelRef.InsertPrefix "headfree"
        Case "mPartFreeRef"
            SelRef.InsertPrefix "part"
        Case "mEqRef"
            SelRef.Tag = "Eq."
            SelRef.Show vbModal
        Case "mUpdateFields"
            ActiveDocument.Fields.Update
        Case "mSachverzeichnis"
            Dialogs(wdDialogMarkIndexEntry).Show
        ' Sonstiges
        Case "mNbsp"
            Selection.InsertSymbol CharacterNumber:=160, Unicode:=True, Bias:=0
        ' Container frei
        Case "mBox"
            insertSpecial "SpBoxStart", "SpBoxStop", "Box", "", "[Diesen Text durch |fffd|berschrift ersetzen.]"
        Case "mCaseStudy"
            insertSpecial "SpBoxStart", "SpBoxStop", "Case Study", "", "[Diesen Text durch |fffd|berschrift ersetzen.]"
        Case "mResults"
            insertSpecial "SpInlineBoxStart", "SpInlineBoxEnd", "Results", "", "[Diesen Text durch |fffd|berschrift ersetzen.]"
        Case "mExkurse"
            insertSpecial "SpBoxStart", "SpBoxStop", "Exkurs", "", "[Diesen Text durch |fffd|berschrift ersetzen.]"
        ' Container mitlaufend
        Case "mTrailer"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Trailer"
        Case "mConclusion"
            insertSpecial "SpInlineBoxStart", "SpInlineBoxEnd", "Conclusion", "", "[Diesen Text durch |fffd|berschrift ersetzen.]"
        Case "mEyeCatcher"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Eye Catcher"
        Case "mLearningGoals"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Learning Goals"
        Case "mLegalText"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Legal Text"
        Case "mLiteral"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Programmcode", "SpLiteral"
        Case "mOverview"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Overview"
        Case "mBackground"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Background Information"
        Case "mImportant"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Important"
        Case "mWarning"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Warning"
        Case "mTip"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Tip"
        Case "mRecipe"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Recipe"
        Case "mDefinition"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Definition"
        Case "mExample"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Example"
        Case "mQuestions"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Questions"
        Case "Answers"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Answers"
        Case "mQuestionnaire"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Questionnaire"
        Case "Procedure"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Procedure"
        Case "mMaterials"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Materials and Methods", "", "[Diesen Text durch |fffd|berschrift ersetzen.]"
        ' Hinweise
        Case "mMsgAuthor"
            HinweisAutor
        Case "mMsgCE"
            HinweisRedaktion
        ' Sonstiges
        Case "mStatistic"
            Statistic.Show (vbModal)
        Case "<blockQuote>"
            Selection.style = ActiveDocument.Styles("SpBlockQuote")
        Case "mRandspalteLexikon"
            RandspalteLexikon
        Case "mIndexEntryToArial"
            check.indexEntryToArial
        Case "mDefList"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "DefinitionList", "", "[Diesen Text durch |fffd|berschrift ersetzen.]"
            Selection.style = ActiveDocument.Styles("SpTerm")
            Selection.Text = "[Durch Term ersetzen - Return erzeugt Description]"
        Case "mAbbrevGroup"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "AbbreviationGroup", "", "[Diesen Text durch |fffd|berschrift ersetzen.]"
            Selection.style = ActiveDocument.Styles("SpTerm")
            Selection.Text = "[Durch Term ersetzen - Return erzeugt Description]"
        Case "mGlossary"
            insertSpecial "SpSpecialStart", "SpSpecialStop", "Glossary", "", "[Diesen Text durch |fffd|berschrift ersetzen.]"
            Selection.style = ActiveDocument.Styles("SpTerm")
            Selection.Text = "[Durch Term ersetzen - Return erzeugt Description]"
        ' Else
        Case Else
            Selection.style = ActiveDocument.Styles(cmd)
    End Select
End Sub

' ******************************************************************
' Specials
' ******************************************************************

Sub insertSpecial(StartStyle, StopStyle, caption, Optional FirstStyle = "", Optional DummyHeader = "")
    Dim block As Boolean
    block = False
    CR = False
    
    If Selection.Characters.Count > 1 Then
        Selection.Copy
        If Asc(Selection.Characters.Last.Text) = 13 Then
            Selection.MoveEnd Unit:=wdCharacter, Count:=-1
            CR = True
        'Else
        '    Selection.Paragraphs.Last.Range.InsertParagraphAfter
        End If
        Selection.Delete
        block = True
    End If
    If Not helpers.IsLineEmpty() Then
        Selection.Paragraphs(1).Range.InsertParagraphAfter
        Selection.MoveDown wdParagraph
    End If
    Selection.style = ActiveDocument.Styles(StartStyle)
    Selection.InsertAfter caption & " Start"
    Selection.EndKey Unit:=wdLine
    If DummyHeader <> "" Then
        Selection.TypeParagraph
        Selection.Text = DummyHeader
        Selection.style = ActiveDocument.Styles("SpSpecialHead1")
        Selection.EndKey Unit:=wdLine
    End If
    Selection.TypeParagraph
    Selection.TypeParagraph
    Selection.style = ActiveDocument.Styles(StopStyle)
    Selection.InsertAfter caption & " Stop"
    Selection.EndKey Unit:=wdLine
    Selection.TypeParagraph
    Selection.MoveUp Unit:=wdLine, Count:=2
    If block Then Selection.Paste
    If CR Then Selection.TypeBackspace
    If FirstStyle <> "" Then
        Selection.style = ActiveDocument.Styles(FirstStyle)
    End If
End Sub


' *********************
' Lists
' *********************
Sub ListNumReset()
    Dim lfTmp As ListFormat
    Set lfTmp = Selection.Range.ListFormat
    lfTmp.ApplyListTemplate lfTmp.ListTemplate, False
End Sub

Sub ListNumContinue()
    Dim lfTmp As ListFormat
    Set lfTmp = Selection.Range.ListFormat
    lfTmp.ApplyListTemplate lfTmp.ListTemplate, True
End Sub

Sub ListNumDel()
    Selection.Range.ListFormat.RemoveNumbers 'NumberType:=wdNumberParagraph
End Sub

' *********************
' Sonstiges
' *********************

Sub EnterChapNum()
    ChapterNum.Show (vbModal)
    Application.ScreenRefresh
    Application.ScreenUpdating = False
    
    init.makeHeadings Val(ChapterNum.chapter.value)
    ActiveDocument.Fields.Update
    Application.ScreenUpdating = True
End Sub

Sub HinweisAutor()
    helpers.ifInPar
    Selection.style = ActiveDocument.Styles("SpHintAuthor")
    Selection.Font.Bold = True
    Selection.TypeText Text:="Hinweis an Autor:"
    Selection.Font.Bold = False
    Selection.TypeText Text:=" "
End Sub

Sub HinweisRedaktion()
    helpers.ifInPar
    Selection.style = ActiveDocument.Styles("SpHintCopyEditing")
    Selection.Font.Bold = True
    Selection.TypeText Text:="Hinweis an Verlag:"
    Selection.Font.Bold = False
    Selection.TypeText Text:=" "
End Sub

Sub InsertToc()
    Set myRange = ActiveDocument.Range(0, 0)
    ActiveDocument.TablesOfContents.Add myRange, UseFields:=False, UseHeadingStyles:=True, UpperHeadingLevel:=1, LowerHeadingLevel:=5
    
End Sub

Sub RandspalteLexikon()
    If Selection.Range.Start <> Selection.Range.End Then
        t = Selection.Text
        Selection.Copy
    Else
        Selection.InsertAfter "Legal number"
        t = "Legal number"
    End If
    Selection.InsertAfter " ["
    Selection.InsertAfter ChrW(9654)
    Selection.InsertAfter " "
    Selection.InsertAfter t
    Selection.InsertAfter "] "
    Selection.style = ActiveDocument.Styles("SpMarginLex")
    Selection.Collapse
End Sub


Sub deletePartBreaks()
    Selection.Find.clearFormatting
    Selection.Find.Replacement.clearFormatting
    With Selection.Find
        .Text = "^b"
        .Replacement.Text = "^p"
        .Forward = True
        .Wrap = wdFindContinue
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
End Sub
Attribute VB_Name = "non2000"
Option Private Module

Sub clearFormatting()
    Selection.clearFormatting
End Sub
Attribute VB_Name = "pics"
Option Private Module

Sub makeAbbList()
    Dim p As Paragraph
    Dim figBlock As Boolean
    Dim A(6000, 8) As String
    
    WaitInit.Show
    Application.ScreenUpdating = False
    figBlock = False
    i = 0
    
    For Each p In ActiveDocument.Paragraphs
        If p.style = "SpFigureStart" Then
            figBlock = True
            tx1 = ""
            tx2 = ""
            tx3 = ""
            tx4 = ""
            tx5 = ""
            tx6 = ""
            tx7 = ""
            tx8 = ""
            tx9 = ""
        ElseIf p.style = "SpFigureStop" Then
            figBlock = False
            A(i, 0) = tx1
            A(i, 1) = tx2
            A(i, 2) = tx3
            A(i, 3) = tx4
            A(i, 4) = tx5
            A(i, 5) = tx6
            A(i, 6) = tx7
            A(i, 7) = tx8
            A(i, 8) = tx9
            i = i + 1
        ElseIf p.style = "SpFigLegend" Then
            tx1 = Split(p.Range.Text, Limit:=3)(1)
            tx2 = ""
            On Error Resume Next
            tx2 = Split(p.Range.Text, Limit:=3)(2)
            tx2 = Left(tx2, Len(tx2) - 1)
        ElseIf p.style = "SpFigMeta" Then
            If Left(p.Range.Text, 9) = "Abb.-Typ:" Then
                tx4 = Trim(Right(p.Range.Text, Len(p.Range.Text) - 9))
                tx4 = Left(tx4, Len(tx4) - 1)
            ElseIf Left(p.Range.Text, 17) = "Farbigkeit (IST):" Then
                tx5 = Trim(Right(p.Range.Text, Len(p.Range.Text) - 17))
                tx5 = Left(tx5, Len(tx5) - 1)
            ElseIf Left(p.Range.Text, 18) = "Farbigkeit (SOLL):" Then
                tx6 = Trim(Right(p.Range.Text, Len(p.Range.Text) - 18))
                tx6 = Left(tx6, Len(tx6) - 1)
            ElseIf Left(p.Range.Text, 11) = "Bildrechte:" Then
                tx7 = Trim(Right(p.Range.Text, Len(p.Range.Text) - 11))
                tx7 = Left(tx7, Len(tx7) - 1)
            ElseIf Left(p.Range.Text, 14) = "Abdruckrechte:" Then
                tx8 = Trim(Right(p.Range.Text, Len(p.Range.Text) - 14))
                tx8 = Left(tx8, Len(tx8) - 1)
            ElseIf Left(p.Range.Text, 25) = "Hinweise Verlag/Setzerei:" Then
                tx9 = Trim(Right(p.Range.Text, Len(p.Range.Text) - 25))
                tx9 = Left(tx9, Len(tx9) - 1)
            End If
        ElseIf p.style = "SpFigFilename" Then
            If Left(p.Range.Text, 6) = "Datei:" Then
                tx3 = Trim(Right(p.Range.Text, Len(p.Range.Text) - 6))
                tx3 = Left(tx3, Len(tx3) - 1)
            End If
        End If
    Next p
        
    makePicListTable
    If i > 5990 Then
        i = 5990
    End If
    If i = 0 Then
        Selection.MoveRight Unit:=wdCell
        Selection.Text = "keine nummerierten Abbildungen im Dokument vorhanden"
    Else
        For j = 0 To i - 1
            Selection.Text = "Abb. " & A(j, 0)
            Selection.MoveRight Unit:=wdCell
            Selection.Text = "" & A(j, 1)
            Selection.MoveRight Unit:=wdCell
            Selection.Text = "" & A(j, 2)
            Selection.MoveRight Unit:=wdCell
            Selection.Text = "" & A(j, 3)
            Selection.MoveRight Unit:=wdCell
            Selection.Text = "" & A(j, 4)
            Selection.MoveRight Unit:=wdCell
            Selection.Text = "" & A(j, 5)
            Selection.MoveRight Unit:=wdCell
            Selection.Text = "" & A(j, 6)
            Selection.MoveRight Unit:=wdCell
            Selection.Text = "" & A(j, 7)
            Selection.MoveRight Unit:=wdCell
            Selection.Text = "" & A(j, 8)
            Selection.tables(1).Rows.Add
            Selection.MoveRight Unit:=wdCell
        Next j
        Selection.tables(1).Rows.Last.Delete
    End If
    Application.ScreenUpdating = True
    WaitInit.Hide
    Application.ScreenRefresh

End Sub

Private Sub makePicListTable()
    Dim t As Table
    Selection.EndKey Unit:=wdStory
    Selection.InsertParagraphAfter
    Selection.MoveDown Unit:=wdLine
    Selection.InsertBreak Type:=wdSectionBreakNextPage
    Selection.PageSetup.Orientation = wdOrientLandscape
    
    Set t = Selection.tables.Add(Selection.Range, CInt(1), CInt(9))
    t.Range.style = ActiveDocument.Styles("SpTab_Piclist")
    t.Columns(1).SetWidth ColumnWidth:=60, RulerStyle:=wdAdjustProportional
    t.Columns(2).SetWidth ColumnWidth:=200, RulerStyle:=wdAdjustProportional
    t.Columns(3).SetWidth ColumnWidth:=110, RulerStyle:=wdAdjustProportional
    t.Columns(5).SetWidth ColumnWidth:=40, RulerStyle:=wdAdjustProportional
    t.Columns(6).SetWidth ColumnWidth:=40, RulerStyle:=wdAdjustProportional
    
    With t
        .Borders(wdBorderLeft).LineStyle = wdLineStyleSingle
        .Borders(wdBorderRight).LineStyle = wdLineStyleSingle
        .Borders(wdBorderTop).LineStyle = wdLineStyleSingle
        .Borders(wdBorderBottom).LineStyle = wdLineStyleSingle
        .Borders(wdBorderHorizontal).LineStyle = wdLineStyleSingle
        With .Borders(wdBorderVertical)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth050pt
            .color = wdColorBlack
        End With
        With .Borders(wdBorderHorizontal)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth050pt
            .color = wdColorBlack
        End With
        .Borders.Shadow = False
        With Options
            .DefaultBorderLineStyle = wdLineStyleSingle
            .DefaultBorderLineWidth = wdLineWidth050pt
            .DefaultBorderColor = wdColorBlack
        End With
    End With
    t.cell 1, 1
    Selection.Text = "Abb.-Nr."
    Selection.MoveRight Unit:=wdCell
    Selection.Text = "Abb.-Legende"
    Selection.MoveRight Unit:=wdCell
    Selection.Text = "Dateiname"
    Selection.MoveRight Unit:=wdCell
    Selection.Text = "Abb.-Typ"
    Selection.MoveRight Unit:=wdCell
    Selection.Text = "Farbigk. (Ist)"
    Selection.MoveRight Unit:=wdCell
    Selection.Text = "Farbigk. (Soll)"
    Selection.MoveRight Unit:=wdCell
    Selection.Text = "Rechteinhaber"
    Selection.MoveRight Unit:=wdCell
    Selection.Text = "Abdruckrechte / Abdruckgenehmigung"
    Selection.MoveRight Unit:=wdCell
    Selection.Text = "Hinweise f|fffd|r Verlag / Setzerei"
    Selection.MoveRight Unit:=wdCell
    
End Sub
Attribute VB_Name = "refWorkaround"
Option Private Module

Sub getRefs(refType)
    ' funktioniert nicht
    Max = UBound(ActiveDocument.GetCrossReferenceItems(refType))
    x = ActiveDocument.GetCrossReferenceItems(refType)
    For i = 1 To Max
        x1 = x(i)
        x2 = Trim(x1)
        SelRef.ListBox1.AddItem x2
        SelRef.ListBox1.List(SelRef.ListBox1.ListCount - 1, 1) = i
    Next i
End Sub

Function getRefs2(refType)
    ' funktioniert auf allen getesteten Rechnern
    getRefs2 = ActiveDocument.GetCrossReferenceItems(refType)
End Function

Sub setRefs()

End Sub

Attribute VB_Name = "shortcuts"
Attribute VB_Base = "0{17F249FA-86B9-4834-8C45-72BD20276758}{E2FD3792-52FA-4A09-AD54-433AC4A91D43}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Attribute VB_Name = "tables"
Option Private Module

Sub makeTable(caption As Boolean, header As Boolean, footer As Boolean, rowCount As String, _
                colCount As String, autonumbering As Boolean, Optional sizeMarker = "")
    Dim t As Table
    
    If caption Then
        If autonumbering Then
            helpers.checkAndSetCaptionLabels ("Tab.")
            Selection.InsertCaption label:="Tab.", TitleAutoText:="", Title:=""
            Selection.style = ActiveDocument.Styles("SpTab_Leg")
            Selection.MoveEnd Unit:=wdLine, Count:=1
            Selection.TypeText " " & sizeMarker
            Selection.style = ActiveDocument.Styles("SpTab_Leg")
        Else
            Selection.style = ActiveDocument.Styles("SpTab_Leg_ohne")
        End If
        Selection.MoveDown Unit:=wdLine, Count:=1
    End If
    
    Set t = makeBaseTable(header, footer, rowCount, colCount)
    If header Then makeTableHeader t
    t.style = "SpTableStandard"
    changeLastRow t, footer
    PlaceFinalCursor t
End Sub

Private Function makeBaseTable(header, footer, rowCount, colCount) As Table

    Dim t As Table
    Dim i As Integer
    i = 0
    If header Then i = i + 1
    If footer Then i = i + 1
    Set t = Selection.tables.Add(Selection.Range, CInt(rowCount) + i, CInt(colCount))
    t.Range.style = ActiveDocument.Styles("SpTab_Body")
    Set makeBaseTable = t
    
End Function

Private Sub makeBaseStyle(t As Table)
' alter Tabellenstil
    t.Select
    With t
        With .Shading
            .Texture = wdTextureNone
            .ForegroundPatternColor = wdColorAutomatic
            .BackgroundPatternColor = wdColorGray125
        End With
        .Borders(wdBorderLeft).LineStyle = wdLineStyleNone
        .Borders(wdBorderRight).LineStyle = wdLineStyleNone
        .Borders(wdBorderTop).LineStyle = wdLineStyleNone
        .Borders(wdBorderBottom).LineStyle = wdLineStyleNone
        .Borders(wdBorderHorizontal).LineStyle = wdLineStyleNone
        If t.Columns.Count > 1 Then
            With .Borders(wdBorderVertical)
                .LineStyle = wdLineStyleSingle
                .LineWidth = wdLineWidth050pt
                .color = wdColorWhite
            End With
        End If
        With .Borders(wdBorderHorizontal)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth050pt
            .color = wdColorWhite
        End With
        .Borders(wdBorderDiagonalDown).LineStyle = wdLineStyleNone
        .Borders(wdBorderDiagonalUp).LineStyle = wdLineStyleNone
        .Borders.Shadow = False
        With Options
            .DefaultBorderLineStyle = wdLineStyleSingle
            .DefaultBorderLineWidth = wdLineWidth050pt
            .DefaultBorderColor = wdColorWhite
        End With
    End With
End Sub

Private Sub makeTableHeader(t As Table)
    ' jetzt nicht mehr zuweisen, da die Funktion Word-Table-Header genutzt werden soll und nur
    ' noch manuell
    
    't.cell(1, 1).Select
    'Selection.EndOf Unit:=wdRow, Extend:=wdExtend
    'setTableHeader
End Sub

Sub setTableHeader()
    If Not helpers.inTable(Selection.Paragraphs.First) Then Exit Sub
    Selection.Rows.HeadingFormat = True
    Selection.style = ActiveDocument.Styles("SpTab_Header")
End Sub

Private Sub changeLastRow(t As Table, footer As Boolean)
    If footer Then
        t.Rows.Item(t.Rows.Count - 1).Select
    Else
        t.Rows.Last.Select
    End If
    If footer Then
        t.Rows.Last.Select
        Selection.Cells.Merge
        t.Rows.Last.Cells(1).Select
        Selection.style = ActiveDocument.Styles("SpTab_Footer")
        Selection.Text = "[Tabellenfu|fffd|zeile - bitte |fffd|berschreiben]"
    End If
End Sub

Private Sub PlaceFinalCursor(t As Table)
    t.cell(1, 1).Select
    Selection.MoveUp Unit:=wdLine, Count:=1
    Selection.EndOf Unit:=wdLine
End Sub

Sub setTabNumbering()

    Dim ltTemp As ListTemplate
    Dim NumStyle As WdListNumberStyle
          
    ' Alle Formate neu angelegt - jetzt wird ein neues ListTemplate angelegt bzw.
    ' ein bereits vorhandenes mit diesem Namen verwendet
    ' Set ltTemp = helpers.ListTemplateIndex("tabList")
    Set ltTemp = helpers.ListTemplateIndex("thHeadings")
    With ltTemp.ListLevels(9)
        .NumberFormat = "Tab. " & "%1.%9"
        .NumberStyle = wdListNumberStyleArabic
        .NumberPosition = CentimetersToPoints(0)
        .TextPosition = CentimetersToPoints(0)
        .TabPosition = CentimetersToPoints(2)
        .TrailingCharacter = wdTrailingTab
        .ResetOnHigher = 1
        .startAt = 1
        .LinkedStyle = "SpTab_Leg"
    End With

End Sub

' *******************************************
' ********* Tabellenkonvertierung ***********
' *******************************************

Sub tConvert(legend As Boolean, header As Boolean, footer As Boolean)
    Dim t As Table
    
    ' legende merken und l|fffd|schen
    If legend Then
        legendText = getLegendText()
    End If
    ' und wieder selektieren
    Selection.tables.Item(1).Select
    Selection.Cut
    Selection.InsertParagraphBefore
    Selection.style = ActiveDocument.Styles("SpStandard")
    ' neuer header immer
    helpers.checkAndSetCaptionLabels ("Tab.")
    Selection.InsertCaption label:="Tab.", TitleAutoText:="", Title:=""
    If legend Then
        Selection.Text = " " & legendText
    Else
        Selection.Text = " " & legendText & Chr(13) & Chr(10)
        'Selection.TypeParagraph
        'Selection.MoveUp Unit:=wdParagraph, Count:=1
    End If
    Selection.Collapse
    Selection.style = ActiveDocument.Styles("SpTab_Leg")
    Selection.MoveDown Unit:=wdParagraph, Count:=1
    Selection.style = ActiveDocument.Styles("SpStandard")
    Selection.HomeKey Unit:=wdLine
    ' Tabelle wieder einsetzen
    Selection.Paste
    Selection.MoveUp Unit:=wdParagraph, Count:=1
    ' und wieder selektieren
    Set t = Selection.tables(1)
    t.cell(1, 1).Select
    Selection.Collapse
    If header Then
        makeTableHeader t
        convertFirstRow t
    End If
    setTableParFormats t
    t.style = "SpTableStandard"
    ' footer umwandeln
    If footer Then
        makeFooter
    End If
    PlaceFinalCursor t
End Sub

Private Sub makeFooter()
    Dim t As Table
    'Tabelle initialisieren
    Set t = Selection.tables.Item(1)
    ' letzte spalte Zellen zusammenf|fffd|hren
    t.Rows.Last.Cells.Merge
    t.Rows.Last.Select
    Selection.style = ActiveDocument.Styles("SpTab_Footer")
End Sub

Private Function getLegendText()
    Dim t As Table
    
    'Tabelle initialisieren
    Set t = Selection.tables.Item(1)
    ' erste Spalte Zellen zusammenf|fffd|hren
    t.Rows.First.Cells.Merge
    ' Abs|fffd|tze l|fffd|schen
    t.Rows.First.Select
    Selection.Find.clearFormatting
    Selection.Find.Replacement.clearFormatting
    With Selection.Find
        .Text = "^p"
        .Replacement.Text = ". "
        .Forward = True
        .Wrap = wdFindStop
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
    getLegendText = t.Rows.First.Range.Paragraphs.First.Range.Text
    t.Rows.First.Delete
End Function

Private Sub convertFirstRow(t As Table)
    Dim c As cell
    On Error GoTo ErrorHandler
    
    ' workaround f|fffd|r 1. Reihen mit vertikal verbundenen Zellen
    For i = 1 To 100
        With t.cell(1, i).Borders(wdBorderTop)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth050pt
            .color = wdColorBlack
        End With
    Next
    
ErrorHandler:
    
End Sub

Private Sub setTableParFormats(t As Table)
' durch Tabelle durchlaufen und entweder T_Tab_Body oder Listenformate setzen, header und footer in Ruhe lassen
    Dim p As Paragraph
    t.Select
    For Each p In Selection.Paragraphs
        If p.style <> "SpTab_Header" And p.style <> "<SpTab_Footer" Then
            If Left(p.style, 3) <> "<T_" Then
                ListStyle = checkListing(p)
                If ListStyle <> "" Then
                    p.style = ActiveDocument.Styles(ListStyle)
                Else
                    p.style = ActiveDocument.Styles("SpTab_Body")
                End If
            End If
        End If
    Next
End Sub

Private Function checkListing(p As Paragraph) As String
' p auf listgallery member untersuchen. Wenn ja, level auslesen und Thieme Standardlisting zuweisen
    checkListing = ""
    If p.Range.ListFormat.ListType <> wdListNoNumbering Then
        lev = p.Range.ListFormat.ListLevelNumber
        If lev = 1 Then
            checkListing = "SpListDash1"
        ElseIf lev = 2 Then
            checkListing = "SpListDash2"
        ElseIf lev = 3 Then
            checkListing = "SpListDash3"
        Else
            checkListing = "SpListDash3"
        End If
    End If
End Function

Sub SetTableLegLater()
    helpers.startOfPar
    helpers.checkAndSetCaptionLabels ("Tab.")
    Selection.InsertCaption label:="Tab.", TitleAutoText:="", Title:=""
    Selection.Collapse
    Selection.style = ActiveDocument.Styles("SpTab_Leg")
    Selection.Text = " "
    Selection.Collapse
End Sub

Sub SetTableStyle(tStyle)
            
    If Not Selection.Information(wdWithInTable) Then
        MsgBox "Cursor muss in Tabelle stehen"
    Else
        Selection.style = ActiveDocument.Styles(tStyle)
    End If

End Sub

Sub MakeTabList()

    Dim p As Paragraph
    Dim figBlock As Boolean
    Dim A(5000, 2) As String
    
    WaitInit.Show
    Application.ScreenUpdating = False
    i = 0
    
    For Each p In ActiveDocument.Paragraphs
        If p.style = "SpTab_Leg" Then
            tx1 = Split(p.Range.Text, Limit:=3)(1)
            tx2 = Split(p.Range.Text, Limit:=3)(2)
            tx2 = Left(tx2, Len(tx2) - 1)
            A(i, 0) = tx1
            A(i, 1) = tx2
            i = i + 1
        End If
    Next p
        
    makeTabListTable
    If i > 5990 Then
        i = 5990
    End If
    If i = 0 Then
        Selection.MoveRight Unit:=wdCell
        Selection.Text = "keine Tabellen im Dokument vorhanden"
    Else
        For j = 0 To i - 1
            Selection.Text = "Tab. " & A(j, 0)
            Selection.MoveRight Unit:=wdCell
            Selection.Text = "" & A(j, 1)
            Selection.MoveRight Unit:=wdCell
            Selection.tables(1).Rows.Add
            Selection.MoveRight Unit:=wdCell
        Next j
        Selection.tables(1).Rows.Last.Delete
    End If
    Application.ScreenUpdating = True
    WaitInit.Hide
    Application.ScreenRefresh

End Sub

Private Sub makeTabListTable()
    Dim t As Table
    Selection.EndKey Unit:=wdStory
    Selection.InsertParagraphAfter
    Selection.MoveDown Unit:=wdLine
    Set t = Selection.tables.Add(Selection.Range, CInt(1), CInt(3))
    t.Range.style = ActiveDocument.Styles("SpTab_Body")
    t.Columns(1).SetWidth ColumnWidth:=60, RulerStyle:=wdAdjustProportional
    With t
        .Borders(wdBorderLeft).LineStyle = wdLineStyleSingle
        .Borders(wdBorderRight).LineStyle = wdLineStyleSingle
        .Borders(wdBorderTop).LineStyle = wdLineStyleSingle
        .Borders(wdBorderBottom).LineStyle = wdLineStyleSingle
        .Borders(wdBorderHorizontal).LineStyle = wdLineStyleSingle
        With .Borders(wdBorderVertical)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth050pt
            .color = wdColorBlack
        End With
        With .Borders(wdBorderHorizontal)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth050pt
            .color = wdColorBlack
        End With
        .Borders.Shadow = False
        With Options
            .DefaultBorderLineStyle = wdLineStyleSingle
            .DefaultBorderLineWidth = wdLineWidth050pt
            .DefaultBorderColor = wdColorBlack
        End With
    End With
    t.cell 1, 1
End Sub

Attribute VB_Name = "versionInfo"
Attribute VB_Base = "0{20FDBAE9-6F97-46DC-9124-AE15CC1023E5}{FBDB1685-8467-4AF7-AC53-3A9827B94FC8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub ok_Click()
    versionInfo.Hide
End Sub

Private Sub UserForm_Activate()
    versionInfo.versionLabel.caption = "V. 2.0.14"
End Sub


' InQuest injected base64 decoded content
' yJiz
' yJiz
' jZ "{
' jZ "{
' jZ 1

INQUEST-PP=macro
