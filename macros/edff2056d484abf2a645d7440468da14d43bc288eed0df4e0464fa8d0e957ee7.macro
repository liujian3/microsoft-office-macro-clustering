Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim tmaReg As tmaReg
Dim Registry As String
Dim Version As String

Public Sub Workbook_Open()
    'Initialise tmaReg class
    If tmaReg Is Nothing Then
        Set tmaReg = New tmaReg
    End If
    
    Check
End Sub

Public Sub Check()
    On Error GoTo ErrH:
    Dim CheckReg As Boolean
    CheckReg = True
    
    ' Check HKCU then HKLM
    If (tmaReg.RegKeyExists("HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\Excel\Addins\Analytics\FriendlyName")) Then
        Registry = "HKEY_CURRENT_USER"
    ElseIf (tmaReg.RegKeyExists("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Office\Excel\Addins\Analytics\FriendlyName")) Then
        Registry = "HKEY_LOCAL_MACHINE"
    Else
        Registry = ""
        CheckReg = False
    End If
    
    ' Get Application version
    Version = Application.Version
    
    'MsgBox "Version = " & Version
    
    If (Not CheckReg) Then
        MsgBox "The TeamMate Analytics add-in could not be found. Please Restart Excel. If the problem persists, please repair your TeamMate Analytics installation in Windows Programs and Features"
    Else
        ' Check to see if load behavior is set to run, then check if addin is hard disabled
        Dim loadBehavior As Integer
        Dim regKey As String
        regKey = Registry & "\SOFTWARE\Microsoft\Office\Excel\Addins\Analytics\LoadBehavior"
        loadBehavior = tmaReg.RegKeyRead(regKey)
        
        If (loadBehavior = 3) Then
            'MsgBox "Its OK"
        Else
            tmaReg.RegKeySave regKey, "3", "REG_DWORD"
            Application.COMAddIns.Item("Analytics").Connect = True
            'MsgBox "Load behavior set to 3" ' & regKey
        End If
        
        ' Check hard disable
        'If (tmaReg.EnumKeyContains("SOFTWARE\Microsoft\Office\15.0\Excel\Resiliency\StartupItems", "analyticsshim.dll", True)) Then
        '    MsgBox "Startup item found, and deleted"
        'End If
        
    End If
    Exit Sub
ErrH:
    MsgBox "There was a problem with loading the TeamMate Analytics  add-in. Please restart Excel.  If the problem persists, please repair your TeamMate Analytics installation in Windows Programs and Features"
End Sub
Attribute VB_Name = "tmaAddinUndo"
Option Explicit
Dim oUndo As tmaAddinUndoClass

Sub SetAddinUndo(sUndoGuid As String, sOperation As String, sParm As String)
    If oUndo Is Nothing Then
        Set oUndo = New tmaAddinUndoClass
    End If
    oUndo.AddUndo sUndoGuid
    Application.OnRepeat "Test", "AddinRedo"
    Application.OnUndo sOperation, "AddinUndo"
End Sub

Sub AddinUndo()
    If oUndo Is Nothing Then
        'MsgBox "Nothing in undo stack"
    Else
        If oUndo.More Then
            oUndo.Undo
        End If
    End If
End Sub
Sub AddinRedo()
End Sub

Sub AddinUndoMore()
AddinUndo
End Sub

Sub CreateQuery(sQueryName As String, sODBC As String, sTableName As String, sTableDest As String, IsAddConnection As Boolean)
    Dim Registry As String
    Dim FormulaTxt As String
    FormulaTxt = "let" & Chr(13) & "" & Chr(10) & "    Source = Odbc.DataSource(""" & sODBC & """, [HierarchicalNavigation=true])," & Chr(13) & "" & Chr(10) & "    Source_Table = Source{[Name=""" & sTableName & """,Kind=""Table""]}[Data]" & Chr(13) & "" & Chr(10) & "in" & Chr(13) & "" & Chr(10) & "    Source_Table"
    ActiveWorkbook.Queries.Add Name:=sQueryName, Formula:=FormulaTxt
    If IsAddConnection = True Then
       ActiveWorkbook.Connections.Add2 sQueryName, "Connection" & sQueryName, "OLEDB;Provider=Microsoft.Mashup.OleDb.1;Data Source=$Workbook$;Location=" & sQueryName & ";Extended Properties=" _
                , """" & sQueryName & """", 6, True, False
    End If
    
  
    
End Sub


Sub TestFunction()
   CreateQuery "test", "Driver={SQLite3 ODBC Driver};Database=d:\0\test2.db;StepAPI=0;SyncPragma=;NoTXN=0;Timeout=1000;ShortNames=0;LongNames=0;", "Source", "|fffd||fffd||fffd||fffd|1R1C1"
End Sub
Attribute VB_Name = "tmaAddinUndoClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim undoGuid As String
Dim addin As Object

Sub AddUndo(sGuid)
    undoGuid = sGuid
End Sub

Sub Undo()
    'If addin Is Nothing Then
    '    addin = GetAddin
    'End If
    'If addin Is Nothing Then
    '    MsgBox "Error"
    '    Exit Sub
    'End If
    GetAddin
    With addin
        .Undo
    End With
           
End Sub

Function More() As Boolean
 If addin Is Nothing Then
        GetAddin
    End If
    If addin Is Nothing Then
        'MsgBox "Error"
        Exit Function
    End If
        
    More = addin.More
End Function
Function GetAddin() As Object
    If Not addin Is Nothing Then
        'GetAddin = addin
        Exit Function
    End If
        
    Dim um As COMAddIn
    Dim automationObject As Object
    'Set um = Application.COMAddIns("UndoMaster")
    For Each um In Application.COMAddIns
        'MsgBox "Desc: " & um.Description & " ProgID: " & um.progID
       If (um.Description = "TeamMate Analytics") Then
            'MsgBox "Found"
            Exit For
        End If
        
    Next
    If (Not um Is Nothing) Then
        'MsgBox um.Description
        
        Set automationObject = um.Object
        If (automationObject Is Nothing) Then
           MsgBox "The TeamMate Analytics add-in could not be found. Please Restart Excel. If the problem persists, please repair your TeamMate Analytics installation in Windows Programs and Features"
           Else
           Set addin = automationObject
           'GetAddin = addin
        End If
        
        
    Else
        'MsgBox "Teammate Addin not found"
    End If
End Function
Attribute VB_Name = "tmaReg"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'reads the value for the registry key i_RegKey
'if the key cannot be found, the return value is ""
Function RegKeyRead(i_RegKey As String) As Variant
Dim myWS As Object
 
  On Error Resume Next
  'access Windows scripting
  Set myWS = CreateObject("WScript.Shell")
  'read key from registry
  RegKeyRead = myWS.RegRead(i_RegKey)
End Function
 
'sets the registry key i_RegKey to the
'value i_Value with type i_Type
'if i_Type is omitted, the value will be saved as string
'if i_RegKey wasn't found, a new registry key will be created
 
' change REG_DWORD to the correct key type
Sub RegKeySave(i_RegKey As String, _
               i_Value As String, _
      Optional i_Type As String = "REG_DWORD")
Dim myWS As Object
 
  'access Windows scripting
  Set myWS = CreateObject("WScript.Shell")
  'write registry key
  myWS.RegWrite i_RegKey, i_Value, i_Type
 
End Sub
 
'returns True if the registry key i_RegKey was found
'and False if not
Function RegKeyExists(i_RegKey As String) As Boolean
Dim myWS As Object
 
  On Error GoTo ErrorHandler
  'access Windows scripting
  Set myWS = CreateObject("WScript.Shell")
  'try to read the registry key
  myWS.RegRead i_RegKey
  'key was found
  RegKeyExists = True
  Exit Function
   
ErrorHandler:
  'key was not found
  RegKeyExists = False
End Function

Function RegKeyDelete(i_RegKey As String) As Boolean

    Dim myWS As Object
 
   On Error GoTo ErrH:
  'access Windows scripting
  Set myWS = CreateObject("WScript.Shell")
  'try to read the registry key
  myWS.RegDelete i_RegKey
  'key was found
  RegKeyDelete = True
  Exit Function
   
ErrH:
  'key was not found
  RegKeyDelete = False
End Function

Function EnumKeyContains(sKeyPath As String, sContains As String, blDelete As Boolean) As Boolean

    Const HKEY = &H80000001
    Const strComputer = "."
    Const REG_SZ = 1
    Const REG_EXPAND_SZ = 2
    Const REG_BINARY = 3
    Const REG_DWORD = 4
    Const REG_MULTI_SZ = 7
    Dim binVar As Variant
    'ss = tmaReg.RegKeyRead("HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\15.0\Excel\Resiliency\DisabledItems\1F54B65F")
    'MsgBox "Test: " & RegBinaryToString(ss)
    
    Dim oReg As Object
    Dim i As Integer
    Dim s As String
    
    Dim subKey, arrSubkeys, arrSubKeyTypes As Variant
    Dim sCurrentKey As String
 
    Set oReg = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" & strComputer & "\root\default:StdRegProv")
    
    'strKeyPath = "SOFTWARE\Microsoft\Office\15.0\Excel\Resiliency\DisabledItems"
    oReg.EnumValues HKEY, sKeyPath, arrSubkeys, arrSubKeyTypes
    
    If Not IsNull(arrSubkeys) Then
        For i = 0 To UBound(arrSubkeys)
            'MsgBox arrSubkeys(i) ' Just for debugging
            Select Case arrSubKeyTypes(i)
                Case REG_SZ
                    s = "Data Type: String"
                Case REG_EXPAND_SZ
                    s = "Data Type: Expanded String"
                Case REG_BINARY
                    s = "Data Type: Binary"
                    sCurrentKey = "HKEY_CURRENT_USER\" & sKeyPath & "\" & arrSubkeys(i)
                    binVar = RegKeyRead(sCurrentKey)
                    s = RegBinaryToString(binVar)
                Case REG_DWORD
                    s = "Data Type: DWORD"
                Case REG_MULTI_SZ
                   s = "Data Type: Multi String"
            End Select
        
        ' If this is a addin we want then delete it
        Dim pos As Variant
        pos = InStr(1, LCase(s), LCase(sContains), vbTextCompare)
        If (pos > 0) Then
            EnumKeyContains = True
            If (blDelete) Then
                RegKeyDelete (sCurrentKey)
            End If
        End If
        
        Next i
    End If
End Function
Function RegBinaryToString(arrValue)
 Dim strInfo As String
 Dim i As Integer
 
 strInfo = ""
  For i = 0 To UBound(arrValue)
   If arrValue(i) <> 0 Then strInfo = strInfo & Chr(arrValue(i))
  Next
 RegBinaryToString = strInfo
End Function
Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
