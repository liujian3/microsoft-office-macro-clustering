Attribute VB_Name = "Calendar"
' --------------------------------------------------------------------------------------
' WORD 97 WIZARD
' Calendar Wizard Specific Code
' --------------------------------------------------------------------------------------
'
Option Explicit

' --------------------------------------------------------------------------------------
' CONSTANT DECLARATIONS

'=============================== LOCALIZATION BLOCK ===============================

' Localization Note: iWeekStartDay is the starting day of the week (Sun = 0, Mon = 1, ...Sat = 6)
Public Const iWeekStartDay       As Integer = 1

' Banter strings
Public Const strWarnYearReq        As String = "Sowohl das Startjahr, als auch das Endjahr werden ben|fffd|tigt."
Public Const strWarnMinExceeded    As String = "Das Startjahr darf nicht vo 1900 liegen"
Public Const strWarnMaxExceeded    As String = "Das Endjahr darf nicht nach 4095 liegen."
Public Const strWarnRangeExceeded  As String = "Der Kalender ist limitiert auf 120 Monate (10 Jahre)."


Public Const strAppCaptionPart1    As String = "Kalender: "
Public Const strAppCaptionPart1b   As String = ""      'Localization: Used only for multiple months
Public Const strAppCaptionPart2    As String = " "
Public Const strAppCaptionPart3    As String = " bis "
Public Const strAppCaptionPart4    As String = " "

' Status messages
Public Const strStatusIntro        As String = "Erstelle Kalender..."
Public Const strStatusPart1        As String = "Erstelle "
Public Const strStatusPart2        As String = " "
Public Const strStatusPart3        As String = "..."

' Assistant
Public Const strCallBackHeading     As String = "M|fffd|chten Sie den Kalender ver|fffd|ndern?"

'Margins for A4 size (if wizard changes pagesize to A4)
Public Const sA4_SHORT_MARGIN As Single = 28.8
Public Const sA4_LONG_MARGIN As Single = 57.6
'Margins for Letter size (if wizard changes pagesize to Letter) in pts
Public Const sLETTER_SHORT_MARGIN As Single = 36
Public Const sLETTER_LONG_MARGIN As Single = 36

'========== END LOCALIZATION BLOCK - DO NOT MAKE CHANGES BELOW THIS LINE ==========

Public Const iYearMin       As Integer = 1900
Public Const iYearMax       As Integer = 4095

' Bookmark Names  -  DO NOT LOCALIZE
' Note: No spaces allowed in bookmark names
Public Const strBkMkMonth     As String = "Month"
Public Const strBkMkDays      As String = "Days"
Public Const strBkMkDayNames  As String = "DayNames"
Public Const strBkMkYear      As String = "Year"

' Calendar Style Names and Constants
Public Const wzBOXES            As Integer = 0
Public Const wzBANNER           As Integer = 1
Public Const wzJAZZY            As Integer = 2

' Form Control
Public Const wzPAGE_START       As Integer = 0
Public Const wzPAGE_STYLE       As Integer = 1
Public Const wzPAGE_DIRECTION   As Integer = 2
Public Const wzPAGE_MONTHS      As Integer = 3
Public Const wzPAGE_FINISH      As Integer = 4

'orientation
Public Const iORTN_PORTRAIT     As Integer = 0
Public Const iORTN_LANDSCAPE    As Integer = 1
' Assistant
Public Const iMAX_PANEL         As Integer = 4  ' Number of last panel in MultiPage (First=0)
Public Const iCALL_BACK_COUNT   As Integer = 3  ' Number of items in CallBackBalloon (First=1)

'postwizard balloon document variable
Public Const strPOST_WIZ_BLN As String = "Calendar post wizard balloon"
' --------------------------------------------------------------------------------------
' VARIABLE DECLARATIONS

' General
Public rgstrMonthName(11)    As String
Public rgstrDayName(6)       As String
Public rgiDaysInMonth(11)  As String
Public fDateError        As Boolean
Public fCheckValidity   As Boolean 'if set then the dates are checked for validity

'variables used in doc. creation
Public str1_TO_28 As String
Public rgsDaysHeight(2, 1, 1) As Single
Public rgsMonthNamesHeight(2, 1, 1) As Single
Public rgstrDaysStyle(2) As String
Public rgstrMonthNamesStyle(2) As String
Public strSTY_BANNER_HDG3 As String

' Assistant
Public rgstrAssistantMsg(iMAX_PANEL + 1)    As String
Public rgstrCallBackMsg(iCALL_BACK_COUNT)   As String
Public rgstrCallBackTip(iCALL_BACK_COUNT)   As String

' Page 1
Public iCalendarStyle   As Integer
Public iSavedStyle      As Integer
' Page 2
' Page 3
' Page 4

Public Sub InitWizardName(fDummy As Boolean)

  strWizName = "Kalender-Assistent"
  strWizLongName = strWizName
  strWizShortName = "Kalender"

End Sub
Public Sub InitWizardStrings(fDummy As Boolean)
    Dim i As Integer
      On Error GoTo FatalError
      
    '=============================== LOCALIZATION BLOCK ===============================
    
      ' Note: this list is indexed 0 - iMAX_PANEL
      rgstrAssistantMsg(0) = "Der Kalender-Assistent erstellt Monatskalender, die Sie nach Ihren W|fffd|schen mit Bildern und Termineintr|fffd|gen anpassen k|fffd|nnen. Wenn Sie Ereignisse |fffd|berwachen m|fffd|chten oder an Termine erinnert werden m|fffd|chten, sollten Sie Microsoft Outlook, Microsoft Schedule+ oder Microsoft Exchange verwenden."
      rgstrAssistantMsg(1) = "W|fffd|hlen Sie einen Stil f|fffd|r Ihren Kalender. Der Dekorative Stil verwendet die Schriftart ""Algerian"". Wenn diese Schriftart nicht auf Ihrem System installiert ist, Installieren Sie die Schrift mit Hilfe der Systemsteuerung aus dem Ordner ""CDZugabe"" Ihrer Microsoft Office CD."
      rgstrAssistantMsg(2) = "Wenn Sie Platz lassen f|fffd|r eine Grafik, wird Word automatisch eine Grafik ins Dokument einf|fffd|gen. Sie k|fffd|nnen die Grafik durch ein beliebiges Bild ersetzen."
      rgstrAssistantMsg(3) = "Der Kalender kann zu einem beliebigen Monat beginnen und k|fffd|rzer oder l|fffd|nger als 12 Monate sein. Jeder Monat wird auf einer eigenen Seite ausgedruckt."
      rgstrAssistantMsg(4) = "Um eine Einstellung zu |fffd|ndern, klicken Sie bitte auf '< Zur|fffd|ck'."
      
      ' Note: change constant  iCALL_BACK_COUNT if number of items in list changes
      rgstrCallBackMsg(0) = "Ein Bild hinzuf|fffd|gen, entfernen oder austauschen"
      rgstrCallBackMsg(1) = "Informationen in den Kalender eingeben"
      rgstrCallBackMsg(2) = "Hilfe zu einem anderen Thema anfordern..."
    
      rgstrCallBackTip(0) = "Um eine Grafik zu entfernen, klicken Sie auf die Grafik und dr|fffd|cken Sie die ENTF-Taste. Um eine Grafik hinzuzuf|fffd|gen, klicken Sie an die Stelle, an der Sie die Grafik einf|fffd|gen m|fffd|chten, und w|fffd|hlen Sie den Befehl ""Grafik"" im Men|fffd| ""Einf|fffd|gen""."
      rgstrCallBackTip(1) = "Um zus|fffd|tzliche Informationen einzugeben, klicken Sie an die Stelle im Kalender, wo Sie den Text eingeben m|fffd|chten, und tippen ihn anschlie|fffd|end ein. Um zwischen verschiedenen Tagen im Kalender zu wechseln, dr|fffd|cken Sie die Tabulator-Taste f|fffd|r den n|fffd|chsten Tag bzw. gleichzeitig die Umschalt-Taste f|fffd|r den vorherigen Tag."
        
      'Load Month Name array
      rgstrMonthName(0) = "Januar"
      rgstrMonthName(1) = "Februar"
      rgstrMonthName(2) = "M|fffd|rz"
      rgstrMonthName(3) = "April"
      rgstrMonthName(4) = "Mai"
      rgstrMonthName(5) = "Juni"
      rgstrMonthName(6) = "Juli"
      rgstrMonthName(7) = "August"
      rgstrMonthName(8) = "September"
      rgstrMonthName(9) = "Oktober"
      rgstrMonthName(10) = "November"
      rgstrMonthName(11) = "Dezember"
      
      'Load Day Name array LOCALIZATION NOTE: DO NOT CHANGE THE ORDER IN WHICH THESE APPEAR!
      '                    TO CHANGE THE WEEK START DAY, CHANGE THE CONSTANT iWeekStartDay
      rgstrDayName(0) = "So"
      rgstrDayName(1) = "Mo"
      rgstrDayName(2) = "Di"
      rgstrDayName(3) = "Mi"
      rgstrDayName(4) = "Do"
      rgstrDayName(5) = "Fr"
      rgstrDayName(6) = "Sa"
      
        
      'Load Days In Month array
      rgiDaysInMonth(0) = 31
      rgiDaysInMonth(1) = 28   'Will not be used - must be calculated for leap year accuracy
      rgiDaysInMonth(2) = 31
      rgiDaysInMonth(3) = 30
      rgiDaysInMonth(4) = 31
      rgiDaysInMonth(5) = 30
      rgiDaysInMonth(6) = 31
      rgiDaysInMonth(7) = 31
      rgiDaysInMonth(8) = 30
      rgiDaysInMonth(9) = 31
      rgiDaysInMonth(10) = 30
      rgiDaysInMonth(11) = 31
      
    
    rgstrDaysStyle(wzBOXES) = "Boxes"
    rgstrDaysStyle(wzBANNER) = "Banner"
    rgstrDaysStyle(wzJAZZY) = "Jazzy"
    
    rgstrMonthNamesStyle(wzBOXES) = "Boxes Heading2"
    rgstrMonthNamesStyle(wzBANNER) = "Banner Heading2"
'we dont set the style for month names in Jazzy style
'the Banner style landscape calendar with picture uses Banner Heading3 style for month names
    strSTY_BANNER_HDG3 = "Banner Heading3"
    
    rgsMonthNamesHeight(wzBOXES, iORTN_PORTRAIT, 0) = 55
    rgsMonthNamesHeight(wzBOXES, iORTN_PORTRAIT, 1) = 55
    rgsMonthNamesHeight(wzBOXES, iORTN_LANDSCAPE, 0) = 36
    rgsMonthNamesHeight(wzBOXES, iORTN_LANDSCAPE, 1) = 36
    
    rgsDaysHeight(wzBOXES, iORTN_PORTRAIT, 0) = 56
    rgsDaysHeight(wzBOXES, iORTN_PORTRAIT, 1) = 102
    rgsDaysHeight(wzBOXES, iORTN_LANDSCAPE, 0) = 72
    rgsDaysHeight(wzBOXES, iORTN_LANDSCAPE, 1) = 71
    
    rgsMonthNamesHeight(wzBANNER, iORTN_PORTRAIT, 0) = 60
    rgsMonthNamesHeight(wzBANNER, iORTN_PORTRAIT, 1) = 60
    rgsMonthNamesHeight(wzBANNER, iORTN_LANDSCAPE, 0) = 55
    rgsMonthNamesHeight(wzBANNER, iORTN_LANDSCAPE, 1) = 51
    
    rgsDaysHeight(wzBANNER, iORTN_PORTRAIT, 0) = 64
    rgsDaysHeight(wzBANNER, iORTN_PORTRAIT, 1) = 110
    rgsDaysHeight(wzBANNER, iORTN_LANDSCAPE, 0) = 81
    rgsDaysHeight(wzBANNER, iORTN_LANDSCAPE, 1) = 81

    rgsMonthNamesHeight(wzJAZZY, iORTN_PORTRAIT, 0) = 73
    rgsMonthNamesHeight(wzJAZZY, iORTN_PORTRAIT, 1) = 73
    rgsMonthNamesHeight(wzJAZZY, iORTN_LANDSCAPE, 0) = 62
    rgsMonthNamesHeight(wzJAZZY, iORTN_LANDSCAPE, 1) = 59
    
    rgsDaysHeight(wzJAZZY, iORTN_PORTRAIT, 0) = 40.5
    rgsDaysHeight(wzJAZZY, iORTN_PORTRAIT, 1) = 81.8
    rgsDaysHeight(wzJAZZY, iORTN_LANDSCAPE, 0) = 58.2
    rgsDaysHeight(wzJAZZY, iORTN_LANDSCAPE, 1) = 57.5
    
    str1_TO_28 = ""
    For i = 1 To 28
        str1_TO_28 = str1_TO_28 & CStr(i) & vbTab
    Next i
    'strip off last tab
    str1_TO_28 = Left$(str1_TO_28, Len(str1_TO_28) - 1)
      ' Location in registry DO NOT LOCALIZE
      strRegSettingsKey = strREG_SETTINGS_BASE_KEY & "Calendar Wizard"

  Exit Sub

FatalError:
  ReportError Err
    
End Sub  ' InitWizardStrings

Public Sub InitWizard(fDummy As Boolean)
        
  ' Global Vars
  fWizardCallBack = False
  fDateError = False
  iCurrentPanel = 0
    
  ' Initialize strings
  InitWizardStrings (True)
  
  ' Create a new instance of the form
  Set formWizard = New formWizDlg
  If formWizard Is Nothing Then GoTo FatalError
  
    formWizard.lblWizName1.Caption = " " & strWizLongName & " "
  
  Exit Sub
   
FatalError:
  DisplayErrorMsg strERR_INIT_FORM
  ReportError Err

End Sub

' fDummy prevents sub from appearing in Word Tools/Macro list
Public Sub SaveDialogValues(fDummy As Boolean)
  
    On Error GoTo FatalError
  
    ' Display status
    Application.ScreenUpdating = False
    System.Cursor = wdCursorWait
    StatusBar = strSAVE_SETTINGS
  
   ' Assistant
    System.PrivateProfileString("", strREG_SETTINGS_BASE_KEY, strREG_ASSISTANT_TIME_STAMP) = Format$(Now, "General Date")
    StoreValPref strREG_ASSISTANT_HELP, iLocalState
    
    ' Page 1
    StoreValPref "iCalendarStyle", iCalendarStyle
    
    ' Page 2
    StoreValPref "optPortrait", formWizard.optPortrait.Value
    StoreValPref "optPictureYes", formWizard.optPictureYes.Value
    
    ' Page 3
    
    StatusBar = ""
    System.Cursor = wdCursorNormal
    fSettingsSaved = True
    Application.ScreenUpdating = True
    
    Exit Sub
    
FatalError:
    ReportError Err
  
End Sub


Public Sub RestoreDialogValues(fDummy As Boolean)
  
  Dim i As Integer
  On Error GoTo FatalError
  
  ' Display status
  Application.ScreenUpdating = False
  StatusBar = strRST_SETTINGS
  System.Cursor = wdCursorWait

  ' Page 1
  iCalendarStyle = IRestorePref("iCalendarStyle", 0)
  Select Case iCalendarStyle
    Case wzBOXES
      formWizard.optBoxes.Value = True
      formWizard.shpShadowBoxes.Visible = True
    Case wzBANNER
      formWizard.optBanner.Value = True
      formWizard.shpShadowBanner.Visible = True
    Case wzJAZZY
      formWizard.optJazzy.Value = True
      formWizard.shpShadowJazzy.Visible = True
    Case Else
      iCalendarStyle = wzBOXES
      formWizard.optBoxes.Value = True
      formWizard.shpShadowBoxes.Visible = True
  End Select

  ' Page 2
  If FRestorePref("optPortrait", False) Then
    formWizard.optPortrait.Value = True
    formWizard.shpPortraitShadow.Visible = True
    formWizard.shpLandscapeShadow.Visible = False
  Else
    formWizard.optLandscape.Value = True
    formWizard.shpPortraitShadow.Visible = False
    formWizard.shpLandscapeShadow.Visible = True
  End If
  formWizard.optPictureYes.Value = FRestorePref("optPictureYes", False)
  
  ' Page 3
  formWizard.cboMonthStart.ListIndex = Month(Date) - 1
  formWizard.cboMonthEnd.ListIndex = Month(Date) - 1
  formWizard.txtYearStart = Year(Date)
  formWizard.txtYearEnd = Year(Date)
  
  fCheckValidity = False
  StatusBar = ""
  System.Cursor = wdCursorNormal
  fSettingsRestored = True
  Application.ScreenUpdating = True
  Exit Sub
  
FatalError:
  ReportError Err
  Exit Sub
  
End Sub  ' RestoreDialogValues


' fDummy prevents sub from appearing in Word Tools/Macro list
Public Sub CreateNewDoc(fDummy As Boolean)

  Dim iMonthCurr     As Integer
  Dim iYearCurr      As Integer
  Dim lYearMonthCurr As Long
  Dim lYearMonthEnd  As Long
  Dim iDaysCnt       As Integer
  Dim iDaysInMonth   As Integer
  Dim iCnt           As Integer
  Dim strAutoTextName  As String
  Dim objTableDays     As Table
  Dim iRow           As Integer
  Dim iCol           As Integer
  Dim ocboMonthStart   As ComboBox
  Dim ocboMonthEnd     As ComboBox
  Dim otxtYearStart    As TextBox
  Dim otxtYearEnd      As TextBox
  Dim strJazzyDayNames As String
  Dim objFps As PageSetup
  Dim objRng As Range

  Dim sShortMargin As Single
  Dim sLongMargin As Single
  Dim strCaptionTxt As String
  
  Dim iOrientation As Integer
  Dim iNoPicture As Integer
  Dim i As Integer
  Dim strDays As String
    
    On Error GoTo CreateNewDoc_Error
    
    System.Cursor = wdCursorWait
  
    Set ocboMonthStart = formWizard.cboMonthStart
    Set ocboMonthEnd = formWizard.cboMonthEnd
    Set otxtYearStart = formWizard.txtYearStart
    Set otxtYearEnd = formWizard.txtYearEnd

    With Application
      .ScreenUpdating = False
      .StatusBar = strStatusIntro
    End With

    Set objActiveRange = ActiveDocument.Content
    objActiveRange.Collapse wdCollapseEnd
  
    If (formWizard.optPortrait) Then
        iOrientation = iORTN_PORTRAIT
    Else
        iOrientation = iORTN_LANDSCAPE
    End If
    iNoPicture = Abs(formWizard.optPictureNo.Value)
    
    'the margins have to be changed if papersize was changed in Common
    If (fChangeToA4 Or fChangeToLetter) Then
        Set objFps = ActiveDocument.PageSetup
        If iOrientation = iORTN_LANDSCAPE Then
            objFps.Orientation = wdOrientLandscape 'setting paper size in common
                                                    'resets orientation to Portrait
            If fChangeToA4 Then
                sShortMargin = sA4_SHORT_MARGIN
                sLongMargin = sA4_LONG_MARGIN
            Else
                sShortMargin = sLETTER_SHORT_MARGIN
                sLongMargin = sLETTER_LONG_MARGIN
            End If
        Else
            If fChangeToA4 Then
                sShortMargin = sA4_LONG_MARGIN
                sLongMargin = sA4_SHORT_MARGIN
            Else
                sShortMargin = sLETTER_LONG_MARGIN
                sLongMargin = sLETTER_SHORT_MARGIN
            End If

        End If
        With objFps
            .TopMargin = sShortMargin
            .BottomMargin = sShortMargin
            .LeftMargin = sLongMargin
            .RightMargin = sLongMargin
        End With
    End If

    strAutoTextName = StrBuildAutoTextName(True)
    objWizTemplate.AutoTextEntries(strAutoTextName).Insert objActiveRange, True
        
    If iCalendarStyle <> wzJAZZY Then
        Set objActiveRange = ActiveDocument.Bookmarks(strBkMkDays).Range
    Else
        Set objActiveRange = ActiveDocument.Bookmarks(strBkMkDayNames).Range
    End If

    strJazzyDayNames = ""
    For iCnt = iWeekStartDay To 6
        strJazzyDayNames = strJazzyDayNames & rgstrDayName(iCnt) & vbTab
    Next
    For iCnt = 0 To (iWeekStartDay - 1)
        strJazzyDayNames = strJazzyDayNames & rgstrDayName(iCnt) & vbTab
    Next
    'Strip trailing Tab
    strJazzyDayNames = Left$(strJazzyDayNames, Len(strJazzyDayNames) - 1)

    objActiveRange.Text = strJazzyDayNames

    If iCalendarStyle <> wzJAZZY Then

        If (iCalendarStyle = wzBANNER) And (iOrientation = iORTN_LANDSCAPE) And (iNoPicture = 0) Then
            objActiveRange.Style = strSTY_BANNER_HDG3
        Else
            objActiveRange.Style = rgstrMonthNamesStyle(iCalendarStyle)
        End If
        objActiveRange.Select
        Selection.ConvertToTable wdSeparateByTabs, 1, 7
    End If

    Set objActiveRange = ActiveDocument.Content
    objActiveRange.Copy

    iMonthCurr = CInt(ocboMonthStart.ListIndex) + 1
    iYearCurr = CInt(otxtYearStart.Text)
    lYearMonthCurr = (CLng(iYearCurr) * 100) + CLng(iMonthCurr)
    lYearMonthEnd = (CLng(otxtYearEnd.Text) * 100) + (CLng(ocboMonthEnd.ListIndex) + 1)
  
    'Create each month of the calendar
    Do Until lYearMonthCurr > lYearMonthEnd
  
        Application.StatusBar = strStatusPart1 & rgstrMonthName(iMonthCurr - 1) & strStatusPart2 & CStr(iYearCurr) & strStatusPart3
        
        'Set month
        If iCalendarStyle = wzJAZZY Then
            ActiveDocument.Bookmarks(strBkMkMonth).Range.Text = CStr(iMonthCurr)
        Else
            ActiveDocument.Bookmarks(strBkMkMonth).Range.Text = rgstrMonthName(iMonthCurr - 1)
        End If
    
        'Set year
        ActiveDocument.Bookmarks(strBkMkYear).Range.Text = CStr(iYearCurr)
    
        'Determine number of days in month
        If iMonthCurr = 2 Then
            iDaysInMonth = DateSerial(iYearCurr, 3, 1) - DateSerial(iYearCurr, 2, 1)
        Else
            iDaysInMonth = rgiDaysInMonth(iMonthCurr - 1)
        End If
    
        'Set Column of First Day Of Month by using Weekday function.  The 8th
        'is used (to start with) instead of the 1st to allow for offsetting (via
        'iWeekStartDay) for localization since the 8th will always fall on the
        'same day (of the week) as the 1st.
        iCol = WeekDay(DateSerial(iYearCurr, iMonthCurr, 8 - iWeekStartDay))
        
        ActiveDocument.Bookmarks(strBkMkDays).Select
        If iCalendarStyle <> wzJAZZY Then _
            Selection.MoveDown wdLine 'the bookmark is now in the first cell of the table

        strDays = ""
        For i = 1 To iCol - 1
            strDays = strDays & vbTab
        Next i
        strDays = strDays & str1_TO_28
        For i = 29 To iDaysInMonth
            strDays = strDays & vbTab & CStr(i)
        Next i
        'to get a 6 * 7 table always
        For i = iDaysInMonth + iCol - 1 To 41
            strDays = strDays & vbTab
        Next i
        Set objActiveRange = Selection.Range
        objActiveRange.Text = strDays
        objActiveRange.Style = rgstrDaysStyle(iCalendarStyle) & iOrientation & iNoPicture
    
        objActiveRange.Select
        Selection.ConvertToTable wdSeparateByTabs, 6, 7
        Selection.Cells.Height = rgsDaysHeight(iCalendarStyle, iOrientation, iNoPicture)
        Selection.Tables(1).Rows(1).Height = rgsMonthNamesHeight(iCalendarStyle, iOrientation, iNoPicture)

        ActiveDocument.Bookmarks(strBkMkDays).Delete
        'Advance the current month
        If iMonthCurr = 12 Then
            iMonthCurr = 1
            iYearCurr = iYearCurr + 1
        Else
            iMonthCurr = iMonthCurr + 1
        End If
    
        lYearMonthCurr = (CLng(iYearCurr) * 100) + CLng(iMonthCurr)
    

        If lYearMonthCurr <= lYearMonthEnd Then
            Set objActiveRange = ActiveDocument.Content
            objActiveRange.Collapse wdCollapseEnd
            
            'Insert Page Break
            objActiveRange.InsertBreak wdPageBreak
              
            Set objActiveRange = ActiveDocument.Content
            objActiveRange.Collapse wdCollapseEnd
            objActiveRange.Paste
        End If
    Loop

    Application.StatusBar = ""
    strCaptionTxt = ""
    'Set Application caption

    strCaptionTxt = " - " & strAppCaptionPart1 & strAppCaptionPart1b & ocboMonthStart.Text & strAppCaptionPart2 & otxtYearStart.Text & strAppCaptionPart3 & ocboMonthEnd.Text & strAppCaptionPart4 & otxtYearEnd.Text

    ActiveDocument.UndoClear
    
    With ActiveWindow
        .Caption = .Caption & strCaptionTxt
        With .View
            .TableGridlines = False
            .ShowDrawings = True
        End With
    End With

'Position cursor at the top
    Selection.HomeKey wdStory

CreateNewDoc_Exit:
    Exit Sub

CreateNewDoc_Error:
    ReportError Err
    GoTo CreateNewDoc_Exit

End Sub ' CreateNewDoc

Public Sub InitCallBack(fDummy As Boolean)
    Dim i As Integer
    Dim objCallBackLabels As BalloonLabels

    On Error GoTo ErrorCallBack
    
    If Not (fBlnInitialized) Then
    
        Set objPostWizBln = Assistant.NewBalloon
        fBlnInitialized = True
        With objPostWizBln
            .Heading = strCallBackHeading
            .Mode = msoModeModeless
            .Button = msoButtonSetCancel
            .BalloonType = msoBalloonTypeButtons
            .Callback = "Calendar.fnCallBack"
        End With
    
        Set objCallBackLabels = objPostWizBln.Labels
        objCallBackLabels.Count = iCALL_BACK_COUNT
        For i = 1 To iCALL_BACK_COUNT
            objCallBackLabels.Item(i).Text = rgstrCallBackMsg(i - 1)
        Next i
    End If
    
    objPostWizBln.Show

    If (Assistant.BalloonError) Then GoTo ErrorCallBack
    
    fPostWizBlnOpen = True
    Set objDocBln = ActiveDocument
    Set clsBln.app = Application
    ActiveDocument.Variables.Add strPOST_WIZ_BLN, "1"
    
    Exit Sub
    
ErrorCallBack:
    DisplayErrorMsg strERR_INIT_CALL_BACK

    fPostWizBlnOpen = False
    Set objDocBln = ActiveDocument
    Set clsBln.app = Application
    ActiveDocument.Variables.Add strPOST_WIZ_BLN, "0"
End Sub
Public Function fnCallBack(objBln As Balloon, iBtn As Integer, lPrivate As Long)
    
  On Error GoTo ErrorCallBack

  Select Case iBtn
    Case Is < 1 'Exit
      objBln.Close
      fPostWizBlnOpen = False
      ActiveDocument.Variables(strPOST_WIZ_BLN).Value = "0"
      RestoreAssistant (True)
    Case 1 'Remove existing picture
        DisplayTip rgstrCallBackTip(0)
    Case 2 'Enter information into calendar
        DisplayTip rgstrCallBackTip(1)
    Case 3 ' Get help
      Assistant.Help
  End Select
  
  Exit Function
    
ErrorCallBack:
    DisplayErrorMsg Err.Description
    
End Function
Private Function StrBuildAutoTextName(fDummy As Boolean) As String

  Dim strATName As String
  
  On Error GoTo BuildAutoTextName_Error
  
  'Select base AutoText Name NOTE: DO NOT LOCALIZE
  Select Case iCalendarStyle
    Case wzBOXES
      strATName = "Boxes"
    Case wzBANNER
      strATName = "Banner"
    Case wzJAZZY
      strATName = "Jazzy"
  End Select
  
  strATName = strATName & CStr(Abs(formWizard.optLandscape.Value))
  strATName = strATName & CStr(Abs(formWizard.optPictureNo.Value))
  
  StrBuildAutoTextName = strATName
  
BuildAutoTextName_Exit:
  Exit Function

BuildAutoTextName_Error:
  StrBuildAutoTextName = ""
  Resume BuildAutoTextName_Exit
  
End Function

'displays a tip during post-wizard options
'assumes that Assistant is present since it is called from post-wizard balloon
Private Sub DisplayTip(strTip As String)
    Dim objBlnTip As Balloon
    On Error GoTo FatalError
    
    Set objBlnTip = Assistant.NewBalloon
    
    With objBlnTip
        .Mode = msoModeModal
        .Heading = strWizName
        .Text = strTip
        .Button = msoButtonSetOK
    End With
    objBlnTip.Show
    
    If Assistant.BalloonError <> msoBalloonErrorNone Then GoTo FatalError

    Exit Sub

FatalError:
    Err.Clear

End Sub
Attribute VB_Name = "ClassAppEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WithEvents app As Application

Private Sub app_DocumentChange()
    On Error Resume Next
    
    CloseBln
    
    OpenBln
    Set objDocBln = ActiveDocument
FatalError:
    Err.Clear
End Sub

Private Sub CloseBln()
Dim strVal As String
    On Error GoTo FatalErrorClose
    strVal = ""
    
    'if old doc's bln was being displayed, then close it
    strVal = objDocBln.Variables(strPOST_WIZ_BLN).Value
    If strVal = "1" Then
        If fPostWizBlnOpen Then
            objPostWizBln.Close
            fPostWizBlnOpen = False
        End If
    End If
FatalErrorClose:
    Err.Clear
End Sub

Private Sub OpenBln()
Dim strVal As String

    On Error GoTo FatalErrorOpen
    strVal = ""
    strVal = ActiveDocument.Variables(strPOST_WIZ_BLN).Value

    'check to see if bln should be displayed for new doc.
    If (strVal = "1") Then
        objPostWizBln.Show
        fPostWizBlnOpen = True
    End If
    
FatalErrorOpen:
    Err.Clear
End Sub

Attribute VB_Name = "Common"
' --------------------------------------------------------------------------------------
' WORD 97 WIZARD
' Common VBA Module
' --------------------------------------------------------------------------------------

Option Explicit

' --------------------------------------------------------------------------------------
' CONSTANT DECLARATIONS

' Note use of trailing spaces and punctuation...

' Banter strings
Public Const strSTARTING        As String = "Der "
Public Const strSTARTING2       As String = " wird geladen..."
Public Const strAPPLYING        As String = "Formatvorlagen werden kopiert..."
Public Const strCREATING_DOC    As String = "Dokument wird erstellt..."
Public Const strSAVE_SETTINGS   As String = "Einstellungen werden gespeichert..."
Public Const strRST_SETTINGS    As String = "Einstellungen werden wiederhergestellt..."
Public Const strUPDATING_STYLE  As String = "Formatvorlagen werden kopiert..."

' Error messages
Public Const strERR_BAD_DOC         As String = "Der Assistent kann nicht im aktiven Dokument verwendet werden. Um den Assistenten zu verwenden, w|fffd|hlen Sie ""Neu"" im Men|fffd| ""Datei"" und w|fffd|hlen Sie den "
Public Const strERR_BAD_DOC2        As String = " aus."
Public Const strERR_INTERNAL        As String = "Der Assistent kann nicht fortfahren, da ein Fehler aufgetreten ist."
Public Const strERR_WIZ_NOT_FOUND   As String = "Der Assistent konnte nicht im Benutzer-Vorlagen-Pfad gefunden werden."
Public Const strERR_STYLE_NOT_FOUND As String = "Der Assistent konnte die ben|fffd|tigte Datei "
Public Const strERR_STYLE_NOT_FOUND2 As String = " nicht finden. Diese Datei wird ben|fffd|tigt, um das Dokument zu formatieren. Falls die Datei nicht installiert ist, f|fffd|hren Sie bitte das Setup erneut durch, und installieren Sie die Datei."
Public Const strERR_ADDR_BOOK       As String = "Fehler beim Einf|fffd|gen eines Namens aus einem Adre|fffd|buch."
Public Const strERR_SEND_FAX        As String = "Der Assistent konnte dieses Dokument nicht per Fax versenden."
Public Const strERR_SEND_MAIL       As String = "Der Assistent konnte dieses Dokument nicht per E-Mail versenden."
Public Const strERR_AUTOTEXT_NOT_FOUND As String = "Word konnte keinen AutoText aus dem Assistenten einf|fffd|gen. Bitte f|fffd|hren Sie das Setup-Programm erneut aus und installieren Sie diesen Assistenten neu."
Public Const strERR_INIT_FORM       As String = "Word konnte den Eingabedialog des Assistenten nicht anzeigen. Bitte starten Sie den Assistenten erneut."
Public Const strERR_INIT_CALL_BACK  As String = "Word konnte die Auswahloptionen zum Ende des Assistenten nicht anzeigen. Bitte starten Sie den Assistenten erneut, um die Auswahlm|fffd|glichkeiten zu sehen."

' Misc strings
Public Const strWIZ As String = ".wiz"  'common extension to a wizard file
Public Const strDOT As String = ".dot"  'extension to a template file

'the setting in which this wizard has been saved. If the wizard is saved with A4 settings then
'this constant should be set to A4
Public Const strWIZ_SAVED_AS As String = "A4"

'the settings key for page size
Public Const strREG_PAGE_SIZE As String = "PageSize"
'to check if it is A4 and change the pagesize if the key's value is this string
Public Const strA4_SETTING As String = "A4"
' --------------------------------------------------------------------------------------
' ************     DO NOT LOCALIZE ANY CODE BEYOND THIS POINT  *************************
' --------------------------------------------------------------------------------------

'registry key under which to store individual wizard preference settings
Public Const strREG_SETTINGS_BASE_KEY As String = "HKEY_CURRENT_USER\Software\Microsoft\Office\8.0\Word\Wizards\"

Public Const strSPACE       As String = " "
Public Const strCOMMA       As String = ","
Public Const strSHP_MAP     As String = "shpMap"  'prefix to the names of the shapes in the navigation chart/map
Public Const strLBL_MAP     As String = "lblMap"  'prefix to the names of the labels in the navigation chart/map
Public Const strREG_ASSISTANT_HELP As String = "Assistant Help" 'registry entry to store local state of Assistant
                                                                'for this wizard
Public Const strREG_ASSISTANT_TIME_STAMP As String = "Time Stamp" 'registry to store the time stamp when the
                                                                  'local state of the wizard changed.

'COLOR constants used
Public Const COLOR_DISABLED As Long = &H404040  'used for disabled panel's label and shape
Public Const COLOR_DARKGREY As Long = &H808080  'used for visited panel's label and shape
Public Const COLOR_LIGHTGREY As Long = &HC0C0C0 'used for unvisited panel's label and shape
Public Const COLOR_RED      As Long = vbRed
Public Const COLOR_GREEN    As Long = vbGreen
Public Const COLOR_WHITE    As Long = vbWhite


' --------------------------------------------------------------------------------------
' VARIABLE DECLARATIONS

' Wizard Names And FileNames
Public strWizName As String
Public strWizLongName As String
Public strWizShortName As String

Public fSettingsRestored As Boolean
Public fSettingsSaved As Boolean

' Application Environment
Public objActiveRange   As Range     'current range
Public objWizTemplate   As Template  'doc's template i.e the wizard
Public iAlertsLevel      As Integer   'stores the initial alerts level

' Variables to store some environment values
Public strPathSeparator As String   ' Directory separator in a path
Public strTemplatePath As String    ' Path of the the wizard and corresponding templates

'current panel of the multipage control in the dialog
Public iCurrentPanel As Integer

' Registry location key
Public strRegSettingsKey As String

' Assistant
Public objAssistantBalloon  As Balloon  'help balloon displayed for each panel
Public fBalloonVisible      As Boolean  'true if the above balloon is visible
Public iLocalState          As Integer  'Local State of Assistant for passing to Office
Public lAssistantId         As Long     'assistant id obtained from StartWizard call
Public fExitTglEvent        As Boolean  'this is set to True, if we don't want the click
                                        'event for the toggle buttonto be executed when
                                        'we change its value

Public fWizardCallBack      As Boolean  'we set it to True in FReenterWizardPanel
                                        'since it is used only in JumpToPanel
                                        'to disable jumping to otherpanels, by clicking
                                        'on the shapes
Public fInitialAssistantState As Boolean  ' to go back to after exiting wizard
Public fAsstHelp As Boolean

'if the activedocument's papersize was changed then one of the two following
'variables will be set according to the paper size that is being set.
Public fChangeToA4 As Boolean
Public fChangeToLetter As Boolean

'Post wizard balloon options.
Public objPostWizBln As Balloon
Public objDocBln As Document
Public clsBln As New ClassAppEvents
Public fBlnInitialized As Boolean
Public fPostWizBlnOpen As Boolean

'variables storing the rectangle of the form to be avoided
'by the asst. and balloon
Public lFormTop As Long, lFormHeight As Long
Public lFormLeft As Long, lFormWidth As Long

' Wizard dialog form
Public formWizard As formWizDlg 'New formWizDlg

' General Purpose Utilities for Starting, Saving, and Restoring Wizards
' --------------------------------------------------------------------------------------
Public Sub StartWizard()
    On Error GoTo FatalError
  
    Application.ScreenUpdating = False
    
    ' Init Global Var
    fWizardCallBack = False
    fExitTglEvent = False
    fSettingsRestored = False
    fSettingsSaved = False
    lAssistantId = 0
  
    ' Identify Wizard
    InitWizardName (True)
    
    ' We're busy now
    StatusBar = strSTARTING & strWizName & strSTARTING2

    SetWizardEnvironment

    ' Locate the wizard template
    InitDocTemplate
    strTemplatePath = StrWizardPath

    ' Initialize the new document
    InitDoc
    
    ' Initialize form
    InitWizard (True)
    
    'remove any text which might written for indicating progress
    StatusBar = ""
    
    ' Connect to the Assistant
    InitWizardAssistant
    
    ' Bring up dialog
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True
    
    formWizard.Show
    
    ResetWizardEnvironment (True)
    Exit Sub

FatalError:
    ReportError Err
End Sub  ' Main / StartWizard


Private Sub InitDocTemplate()
    ' Did user create a New Document or a New Template?
    On Error GoTo CreatingNewTemplate
    
    ' New Document
    Set objWizTemplate = ActiveDocument.AttachedTemplate
    Exit Sub

CreatingNewTemplate:
    ' New Template
    Set objWizTemplate = ActiveDocument
End Sub  ' InitDocTemplate


Private Function StrWizardPath() As String
    Dim strPath As String
    Dim strFileName As String
    Dim i As Integer
    Dim fFound As Boolean

    On Error GoTo FatalError
    
    fFound = True
    strPath = objWizTemplate.Path

    If (Len(strPath) = 0) Then
        ' New template based on Wizard
        ' Get location of templates - first look in UserTemplatesPath
        ' and then in Workgroup path
        i = 0
        fFound = False
        strPath = Application.Options.DefaultFilePath(wdUserTemplatesPath)
        
        While ((i < 2) And fFound = False)
            If (Len(strPath) <> 0) Then
                ' First try to find wizard with long filename
                WordBasic.FileFind SearchPath:=strPath, Name:=strWizLongName & strWIZ, SubDir:=1, MatchCase:=0
                If WordBasic.CountFoundFiles() = 0 Then
                    ' Try to find wizard with short filename
                    WordBasic.FileFind SearchPath:=strPath, Name:=strWizShortName & strWIZ, SubDir:=1, MatchCase:=0
                    If WordBasic.CountFoundFiles() <> 0 Then fFound = True
                Else
                    fFound = True
                End If
            End If
        
            i = i + 1
            strPath = Application.Options.DefaultFilePath(wdWorkgroupTemplatesPath)
        Wend
        
        If (fFound) Then ' Wizard was found, so save path
            strFileName = WordBasic.[FoundFileName$](1)
            strPath = WordBasic.[FileNameInfo$](strFileName, 5)
        End If
    End If

    If (fFound) Then
        strPathSeparator = Application.PathSeparator
        If Right$(strPath, 1) <> strPathSeparator Then strPath = strPath & strPathSeparator
        StrWizardPath = strPath
        Exit Function
    End If

LWizardMissing:
    DisplayErrorMsg strERR_WIZ_NOT_FOUND
    
FatalError:
    ReportError Err
End Function ' StrWizardPath

'sets the wizard environment
Private Sub SetWizardEnvironment()
    System.Cursor = wdCursorWait
    'set alert level to none, so that Word/VBA dont display display any
    'error messages by themselves
    iAlertsLevel = Application.DisplayAlerts
    Application.DisplayAlerts = wdAlertsNone
    'Disable Cancel key, to prevent ESC key from interrupting the macro.
    'it will still dismiss the Form though
    Application.EnableCancelKey = wdCancelDisabled
End Sub

'resets the environment to what it was before the wizard was executed
Sub ResetWizardEnvironment(fDummy As Boolean)
    System.Cursor = wdCursorNormal
    'remove any text which might written for indicating progress
    StatusBar = ""
    Application.ScreenUpdating = True
    ActiveWindow.View.Type = wdPageView
    Application.DisplayAlerts = iAlertsLevel
    Application.EnableCancelKey = wdCancelInterrupt
End Sub

'returns the value stored in registry key strId
Public Function StrFetchPref(strId As String) As String
    On Error GoTo LReturnNull
    
    StrFetchPref = System.PrivateProfileString("", strRegSettingsKey, strId)
    Exit Function
LReturnNull:
    StrFetchPref = ""
End Function

'stores strValue in registry key strId
Public Sub StorePref(strId As String, strValue As String)
    Dim strTemp As String

    ' If string is empty, store "~" as placeholder
    If (Len(strValue) = 0) Then
        strTemp = "~"
    Else
        strTemp = strValue
    End If
    
    System.PrivateProfileString("", strRegSettingsKey, strId) = strTemp
End Sub

'returns the string stored in strId. If empty, returns strDefault
Public Function StrRestorePref(strId As String, strDefault As String) As String
    Dim strTemp As String

    strTemp = StrFetchPref(strId)
    ' If length is 0, it wasn't in regsistry, so use default value
    If Len(strTemp) = 0 Then
        strTemp = strDefault
    ' "~" is a placeholder to allow returning empty strings
    ElseIf strTemp = "~" Then
        strTemp = ""
    End If
    
    StrRestorePref = strTemp
End Function

' stores iVal in registry key strId as a string
Public Sub StoreValPref(strId As String, iVal As Integer)
    StorePref strId, CStr(iVal)
End Sub

'returns the value stored in the key strId
'if invalid, returns iDefault
Public Function FRestorePref(strId As String, fDefault As Boolean) As Boolean

    Dim strVal As String

    strVal = StrFetchPref(strId)
    If Len(strVal) = 0 Then
        FRestorePref = fDefault
    Else
        FRestorePref = Val(strVal)
    End If
End Function


'returns the value stored in the key strId
'if invalid, returns iDefault
Public Function IRestorePref(strId As String, iDefault As Integer) As Integer
    Dim strVal As String

    strVal = StrFetchPref(strId)
    If Len(strVal) = 0 Then
        IRestorePref = iDefault
    Else
        IRestorePref = Val(strVal)
    End If
End Function


'main error reporting routine called for fatal errors in the wizard
'SHOULD NOT BE CALLED FOR POST-WIZARD ERRORS
Public Sub ReportError(ByVal ErrorCode As ErrObject)
    Dim lErrorCode As Long
    Dim strErrorMsg As String
    
    lErrorCode = ErrorCode.Number
    strErrorMsg = ErrorCode.Description
    
    'The next statement seems to reset the ErrorCode object,
    'even though it is a ByVal argument
    On Error Resume Next
    
    ResetWizardEnvironment (True)
    
    If fBalloonVisible Then objAssistantBalloon.Close
    If lErrorCode Then DisplayErrorMsg strErrorMsg
    If lAssistantId Then Assistant.EndWizard lAssistantId, False '2nd parameter is fSuccess
    
    If (Not (formWizard Is Nothing)) Then
        formWizard.Hide
        Unload formWizard
        Set formWizard = Nothing
    End If
    
    'ReportError is not called in post-wizard option errors.
    'So, always closing the doc.
    ActiveDocument.Close wdDoNotSaveChanges 'ActiveDocument assumed to be set
    
    'terminate the wizard
    End

End Sub ' ReportError

'initialises the new doc. that is getting created
Private Sub InitDoc()
    Dim fBadDoc As Integer
    
    On Error GoTo FatalError

    'chk if doc.path errors if path not present.
    fBadDoc = False
    If (Len(ActiveDocument.Path) <> 0) Then
        'doc has been saved before
        fBadDoc = True
    Else
        Set objActiveRange = ActiveDocument.Content
        'chk if range has anything other than a paragraph mark
        If (objActiveRange.End > objActiveRange.Start + 1) Then fBadDoc = True
    End If
        
    If (fBadDoc) Then
        DisplayErrorMsg strERR_BAD_DOC & strWizName & strERR_BAD_DOC2
        ResetWizardEnvironment (True)
        'terminate the wizard
        End
    End If
    
    objActiveRange.Collapse wdCollapseStart
    
    SetPageSize

    Exit Sub

FatalError:
    ReportError Err
End Sub  ' InitDoc

' --------------------------------------------------------------------------------------
' Assistant related functions
' --------------------------------------------------------------------------------------

'initialises the Assistant for the wizard
Private Sub InitWizardAssistant()
    Dim lPrivate As Long
    
    fBalloonVisible = False
    On Error GoTo FatalError
    
    ' Was Assistant visible, when wizard was started?
    fInitialAssistantState = Assistant.Visible
    
    ' What is the local state of Assistant for this wizard?
    'if user changed "Help for wizards" globally in the Assistant Options dlg,
    'Word will automatically update this to reflect the latest value.
    iLocalState = IRestorePref(strREG_ASSISTANT_HELP, msoWizardActInactive)
    
    'the form is shown centered on the app. -StartUpPosition = CenterOwner
    lFormHeight = formWizard.Height
    lFormWidth = formWizard.Width
    lFormTop = Application.Top + (Application.Height / 2) - (lFormHeight / 2)
    If (lFormTop < 0) Then lFormTop = 0
    lFormLeft = Application.Left + (Application.Width / 2) - (lFormWidth / 2)
    If (lFormLeft < 0) Then lFormLeft = 0

    lAssistantId = Assistant.StartWizard(iLocalState, "Common.fnHelpCallBack", lPrivate, _
                                    Top:=lFormTop, Left:=lFormLeft, _
                                    Bottom:=lFormTop + lFormHeight, _
                                    Right:=lFormLeft + lFormWidth)
    
    iLocalState = msoWizardActInactive
    If lAssistantId = 0 Then GoTo FatalError 'error with Assistant.Startwizard.
                                             'Assistant probably not installed
    
    ' Initialize Balloon
    Set objAssistantBalloon = Assistant.NewBalloon
    With objAssistantBalloon
        .Heading = strWizName
        .Mode = msoModeModeless
        .Button = msoButtonSetNone
        .Text = rgstrAssistantMsg(0)
    End With
    objAssistantBalloon.SetAvoidRectangle lFormLeft, lFormTop, lFormLeft + lFormWidth, lFormTop + lFormHeight
    If Assistant.BalloonError Then GoTo FatalError
    fAsstHelp = True
    Exit Sub
    
FatalError:
    fAsstHelp = False
    'since error occurred with assistant actions, let's disable Assistant button
    formWizard.tglAssistant.Enabled = False
    Err.Clear
End Sub

'this function called when user clicks on a button in the balloon put up by StartWizard or
'ActivateWizard.
Public Sub fnHelpCallBack(iHelp As Integer, lPrivate As Long)
    Select Case iHelp
        Case msoWizardMsgLocalStateOff:
            iLocalState = msoWizardActInactive
            'user doesn't want help anymore
            'if balloon is up,then close it
            If fBalloonVisible Then
                objAssistantBalloon.Close
                fBalloonVisible = False
            End If
            
            If (formWizard.tglAssistant.Value) Then
                fExitTglEvent = True
                formWizard.tglAssistant.Value = False
            End If
        Case msoWizardMsgShowHelp:
            iLocalState = msoWizardActActive
                        
            If (Not (formWizard.tglAssistant.Value)) Then
                fExitTglEvent = True
                formWizard.tglAssistant.Value = True
            End If
            
            If fBalloonVisible Then Exit Sub 'help balloon already up (should not occur, though)
            
            If fAsstHelp Then 'if no error in building help balloon
                objAssistantBalloon.Text = rgstrAssistantMsg(iCurrentPanel)
                objAssistantBalloon.Show
                If Assistant.BalloonError = msoBalloonErrorNone Then _
                    fBalloonVisible = True
            End If

    End Select
End Sub

Public Sub RestoreAssistant(fDummy As Boolean)
    On Error Resume Next
    Assistant.Visible = fInitialAssistantState
    Err.Clear
End Sub  ' RestoreAssistant


'displays error message in a balloon if Assistant is visible
'else uses a Msgbox
Public Sub DisplayErrorMsg(strErrMsg As String)
    Dim objErrBalloon As Balloon

    On Error GoTo DisplayMsgBox
    
    If lAssistantId Then
        If Assistant.Visible Then
            Set objErrBalloon = Assistant.NewBalloon
            With objErrBalloon
                .Mode = msoModeModal
                .Heading = strWizName
                .Text = strErrMsg
                .Button = msoButtonSetOK
                .Icon = msoIconAlert
            End With
            objErrBalloon.Show
            If Assistant.BalloonError = msoBalloonErrorNone Then
                Err.Clear
                Exit Sub
            End If
        End If
    End If
    
DisplayMsgBox:
    MsgBox strErrMsg, vbExclamation + vbOKOnly + vbApplicationModal, strWizName
    Err.Clear
    
End Sub
'if there exists a PageSize key with a value of A4 then change
'activedocument's page size to be A4
Private Sub SetPageSize()
    Dim strProperty As String
    
    fChangeToA4 = False
    fChangeToLetter = False
    On Error GoTo TryLetterPageSize
    strProperty = ""
    strProperty = System.PrivateProfileString("", strREG_SETTINGS_BASE_KEY, strREG_PAGE_SIZE)
    If strProperty = strA4_SETTING Then
        If strWIZ_SAVED_AS <> "A4" Then
            ActiveDocument.PageSetup.PaperSize = wdPaperA4
            fChangeToA4 = True
        End If
    End If

TryLetterPageSize:
    On Error GoTo -1 'resets Err and the error handler
    On Error GoTo ExitSub
    If Len(strProperty) Then
    'registry entry was not found. Wizard should have letter size settings
        If strWIZ_SAVED_AS <> "A4" Then
            ActiveDocument.PageSetup.PaperSize = wdPaperLetter
            fChangeToLetter = True
        End If
    Else
        ActiveDocument.PageSetup.PaperSize = wdPaperLetter
        fChangeToLetter = True
    End If
ExitSub:
    Err.Clear
End Sub

' End Common Module
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Document_Close()
On Error GoTo Close_error
    If ActiveDocument.Variables(strPOST_WIZ_BLN).Value = "1" Then
        If fPostWizBlnOpen Then
            objPostWizBln.Close
            fPostWizBlnOpen = False
        End If
    End If
    
Close_error:
    Err.Clear
End Sub
Private Sub Document_New()
    Common.StartWizard
End Sub

Attribute VB_Name = "formWizDlg"
Attribute VB_Base = "0{9CA1A252-4E17-11D0-B5E8-00AA00BBB76C}{9CA1A24C-4E17-11D0-B5E8-00AA00BBB76C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

' Calendar Wizard Form
Option Explicit

Private Sub cboMonthEnd_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Dim i As Integer
    If (CInt(txtYearStart.Text) = CInt(txtYearEnd.Text)) And (CInt(cboMonthStart.ListIndex) > CInt(cboMonthEnd.ListIndex)) Then
        Cancel = True
        cboMonthEnd.Value = cboMonthStart.Value
        fCheckValidity = False
    Else
        i = IRangeExceeded
        If i > 120 Then
            If (i < 132) Then '< 12 months error, resetting month should reset it.
                cboMonthEnd.Value = cboMonthStart.Value
                fCheckValidity = False
            Else
                fCheckValidity = True
            End If
            Cancel = True
        Else
            fCheckValidity = False
        End If
    End If
End Sub

Private Sub cboMonthEnd_Change()
    fCheckValidity = True
End Sub

Private Sub cboMonthStart_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
Dim i As Integer
    If (CInt(txtYearStart.Text) = CInt(txtYearEnd.Text)) And (CInt(cboMonthStart.ListIndex) > CInt(cboMonthEnd.ListIndex)) Then
        Cancel = True
        cboMonthEnd.Value = cboMonthStart.Value
        fCheckValidity = False
    Else
        i = IRangeExceeded
        If i > 120 Then
            If (i < 132) Then '< 12 months error, resetting month should reset it.
                cboMonthEnd.Value = cboMonthStart.Value
                fCheckValidity = False
            Else
                fCheckValidity = True
            End If
            Cancel = True
        Else
            fCheckValidity = False
        End If
    End If
End Sub


Private Sub cboMonthStart_Change()
    fCheckValidity = True
End Sub

' Flowchart Controls
Private Sub lblMap0_Click()

  JumpToPanel (0)
  
End Sub

Private Sub lblMap1_Click()
    
  JumpToPanel (1)
    
End Sub

Private Sub lblMap2_Click()
  
  JumpToPanel (2)
  
End Sub

Private Sub lblMap3_Click()
  
  JumpToPanel (3)
  
End Sub

Private Sub lblMap4_Click()
  
  JumpToPanel (4)
  
End Sub



Private Sub shpMap0_Click()
    
  JumpToPanel (0)
  
End Sub

Private Sub shpMap1_Click()
  
  JumpToPanel (1)
    
End Sub

Private Sub shpMap2_Click()
    
  JumpToPanel (2)
  
End Sub

Private Sub shpMap3_Click()
    
  JumpToPanel (3)
  
End Sub

Private Sub shpMap4_Click()
    
  JumpToPanel (4)
    
End Sub

Private Sub spnYearEnd_SpinDown()
Dim iYearEnd As Integer
Dim iYearStart As Integer

    iYearEnd = CInt(txtYearEnd.Text)
    iYearStart = CInt(txtYearStart.Text)

    If iYearEnd > iYearStart Then
        txtYearEnd.Text = iYearEnd - 1
    
        If iYearStart = CInt(txtYearEnd.Text) Then
            If cboMonthStart.ListIndex > cboMonthEnd.ListIndex Then _
                cboMonthEnd.Value = cboMonthStart.Value
        End If
    End If
   
    fCheckValidity = False
End Sub


Private Sub spnYearEnd_SpinUp()
Dim iYearEnd As Integer
Dim iMaxDiff As Integer

    iYearEnd = CInt(txtYearEnd.Text)
    If cboMonthStart.ListIndex = cboMonthEnd.ListIndex Then
        iMaxDiff = 10
    Else
        iMaxDiff = 9
    End If
    If (iYearEnd < iYearMax) And (iYearEnd < (CInt(txtYearStart.Text) + iMaxDiff)) Then _
        txtYearEnd.Text = iYearEnd + 1
  
    fCheckValidity = False
End Sub

Private Sub spnYearStart_SpinDown()
Dim iYearStart As Integer
Dim iMaxDiff As Integer

    If cboMonthStart.ListIndex = cboMonthEnd.ListIndex Then
        iMaxDiff = 10
    Else
        iMaxDiff = 9
    End If
    iYearStart = CInt(txtYearStart.Text)
    If (iYearStart > iYearMin) And (iYearStart > (CInt(txtYearEnd.Text) - iMaxDiff)) Then _
        txtYearStart.Text = iYearStart - 1
  
    fCheckValidity = False
End Sub

Private Sub spnYearStart_SpinUp()
Dim iYearEnd As Integer
Dim iYearStart As Integer

    iYearEnd = CInt(txtYearEnd.Text)
    iYearStart = CInt(txtYearStart.Text)
    
    If iYearStart < iYearEnd Then
        txtYearStart.Text = iYearStart + 1
    
        If CInt(txtYearStart.Text) = iYearEnd Then
            If cboMonthStart.ListIndex > cboMonthEnd.ListIndex Then _
            cboMonthEnd.Value = cboMonthStart.Value
        End If
    Else 'both are equal
        If (iYearStart < iYearMax) Then
            txtYearStart.Text = iYearStart + 1
            txtYearEnd.Text = iYearEnd + 1
        End If
    End If
  
    fCheckValidity = False
End Sub


' Navigator Controls
'fExitTglEvent is set when we programmatically change tglAssistant's value,
'and so we don't want to call ActivateWizard once again.
Private Sub tglAssistant_Click()
    If lAssistantId = 0 Then Exit Sub 'tglAssistant should be disabled. extra safety

    If fExitTglEvent Then
        fExitTglEvent = False
        Exit Sub
    End If

    If (iLocalState = msoWizardActInactive) Then
        'we want the button to be pressed only when user chooses
        'Help with this wizard option.
        If tglAssistant.Value Then
            fExitTglEvent = True
            tglAssistant.Value = False
        End If
        Assistant.ActivateWizard lAssistantId, msoWizardActActive
    ElseIf (iLocalState = msoWizardActActive) Then
        Assistant.ActivateWizard lAssistantId, msoWizardActInactive
    End If
    
End Sub

Private Sub cmdBack_Click()
    
  If iCurrentPanel <> wzPAGE_START Then JumpToPanel (iCurrentPanel - 1)
    
End Sub

Private Sub cmdNext_Click()
  
  If iCurrentPanel <> wzPAGE_FINISH Then JumpToPanel (iCurrentPanel + 1)
  
End Sub

Private Sub cmdCancel_Click()

  Err.Clear
  ReportError Err
  
End Sub

Private Sub cmdFinish_Click()
  Application.ScreenUpdating = False
  If fBalloonVisible Then
    objAssistantBalloon.Close
    'to prevent ReportError from closing Balloon again, set it to False
    fBalloonVisible = False
  End If
    If Not (fSettingsRestored) Then
        RestoreDialogValues (True)
        System.PrivateProfileString("", strREG_SETTINGS_BASE_KEY, strREG_ASSISTANT_TIME_STAMP) = Format$(Now, "General Date")
        StoreValPref strREG_ASSISTANT_HELP, iLocalState
    Else
        If Not (fSettingsSaved) Then SaveDialogValues (True)
    End If
  CreateNewDoc (True)
  
  formWizard.Hide
  Unload formWizard
  Set formWizard = Nothing
  
    If lAssistantId Then
        Assistant.EndWizard lAssistantId, True
        InitCallBack (True)
    End If
  
End Sub



' Page 1
Private Sub optBoxes_Click()

  iCalendarStyle = wzBOXES
  ApplyShadow

End Sub

Private Sub optBanner_Click()
    
  iCalendarStyle = wzBANNER
  ApplyShadow

End Sub

Private Sub optJazzy_Click()
    
  iCalendarStyle = wzJAZZY
  ApplyShadow

End Sub

Private Sub imgBoxes_Click()
  
  iCalendarStyle = wzBOXES
  optBoxes.Value = True
  ApplyShadow
  optBoxes.SetFocus

End Sub

Private Sub imgBanner_Click()
  
  iCalendarStyle = wzBANNER
  optBanner.Value = True
  ApplyShadow
  optBanner.SetFocus

End Sub

Private Sub imgJazzy_Click()
  
  iCalendarStyle = wzJAZZY
  optJazzy.Value = True
  ApplyShadow
  optJazzy.SetFocus

End Sub

Private Sub ApplyShadow()
    
  shpShadowBoxes.Visible = optBoxes.Value
  shpShadowBanner.Visible = optBanner.Value
  shpShadowJazzy.Visible = optJazzy.Value

End Sub

' Page 2
Private Sub optPortrait_Click()
  
  ApplyPortraitShadow
  ActiveDocument.PageSetup.Orientation = wdOrientPortrait

End Sub

Private Sub imgPortrait_Click()
  
  optPortrait.Value = True
  ApplyPortraitShadow
  optPortrait.SetFocus

End Sub

Private Sub optLandscape_Click()
    
  ApplyPortraitShadow
  ActiveDocument.PageSetup.Orientation = wdOrientLandscape
End Sub

Private Sub imgLandscape_Click()
  
  optLandscape.Value = True
  ApplyPortraitShadow
  optLandscape.SetFocus

End Sub

Private Sub ApplyPortraitShadow()
  
  shpPortraitShadow.Visible = optPortrait
  shpLandscapeShadow.Visible = Not optPortrait

End Sub

Private Sub txtYearEnd_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Dim iYear As Integer
    
    If FInvalidDates Then
        GoTo YearError
    ElseIf IRangeExceeded > 120 Then
        GoTo YearError
    Else
    
        If CInt(txtYearStart.Text) > CInt(txtYearEnd.Text) Then
            txtYearEnd.Text = txtYearStart.Text
            If (cboMonthEnd.ListIndex < cboMonthStart.ListIndex) Then _
                cboMonthEnd.Value = cboMonthStart.Value
        End If
    End If
    
    fCheckValidity = False
    Exit Sub
YearError:
    iYear = CInt(txtYearStart.Text)
    If iYear < iYearMax Then
        txtYearEnd.Text = iYear + 1
    Else
        txtYearEnd.Text = iYear
        If (cboMonthEnd.ListIndex < cboMonthStart.ListIndex) Then _
            cboMonthEnd.Value = cboMonthStart.Value
    End If
    fCheckValidity = False
    txtYearEnd.SelStart = 0
    txtYearEnd.SelLength = txtYearEnd.TextLength
    txtYearEnd.SetFocus
    Cancel = True
End Sub

Private Sub txtYearEnd_Change()
    fCheckValidity = True
End Sub

Private Sub txtYearStart_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
Dim iYear As Integer
    If FInvalidDates Then
        GoTo YearError
    ElseIf IRangeExceeded > 120 Then
        GoTo YearError
    Else
    
        If CInt(txtYearStart.Text) > CInt(txtYearEnd.Text) Then
            txtYearEnd.Text = txtYearStart.Text
            If (cboMonthEnd.ListIndex < cboMonthStart.ListIndex) Then _
                cboMonthEnd.Value = cboMonthStart.Value
        End If
    End If
    
    fCheckValidity = False
    Exit Sub
YearError:
    iYear = CInt(txtYearEnd.Text)
    If iYear > iYearMin Then
        txtYearStart.Text = iYear - 1
    Else
        txtYearStart.Text = iYear
        If (cboMonthEnd.ListIndex < cboMonthStart.ListIndex) Then _
            cboMonthEnd.Value = cboMonthStart.Value
    End If
    fCheckValidity = False
    txtYearStart.SelStart = 0
    txtYearStart.SelLength = txtYearStart.TextLength
    txtYearStart.SetFocus
    Cancel = True
    
End Sub
Private Sub txtYearStart_Change()
    fCheckValidity = True
End Sub

Private Sub UserForm_Initialize()

  Dim iCounter As Integer
  
  'Load Start and End month selection combo boxes
  For iCounter = 0 To 11
    cboMonthStart.AddItem (rgstrMonthName(iCounter))
    cboMonthEnd.AddItem (rgstrMonthName(iCounter))
  Next
  
  'Init month combo boxes to current month
  cboMonthStart.ListIndex = Month(Date) - 1
  cboMonthEnd.ListIndex = Month(Date) - 1
  
  'Init start and end years to current year
  txtYearStart.Text = Year(Date)
  txtYearEnd.Text = Year(Date)
      
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If (CloseMode = vbFormControlMenu) Then
        Err.Clear
        ReportError Err
    End If
End Sub

' General service procedures
Private Sub JumpToPanel(iNewPanel As Integer)
    Dim lNewFormTop As Long, lNewFormLeft As Long
    Dim objControls As Object
  
    ' Don't allow jump if CallBack mode, or if no change in Panel Number
    If iCurrentPanel = iNewPanel Or fWizardCallBack Then Exit Sub

    If FPageLostFocus Then
        Set objControls = formWizard.Controls
        ' Deselect current flow chart marker
        objControls(strSHP_MAP & iCurrentPanel).BackColor = COLOR_DARKGREY
        objControls(strLBL_MAP & iCurrentPanel).FontBold = False
        
        ' Select new flow chart marker
        objControls(strSHP_MAP & iNewPanel).BackColor = COLOR_GREEN
        objControls(strLBL_MAP & iNewPanel).FontBold = True
        
        ' Change to new active page
        iCurrentPanel = iNewPanel
        formWizard.mpgWizardPage.Value = iCurrentPanel
        If fBalloonVisible Then
            lNewFormTop = formWizard.Top
            lNewFormLeft = formWizard.Left
            
            If (lNewFormTop <> lFormTop) Or (lNewFormLeft <> lFormLeft) Then
                lFormTop = lNewFormTop
                lFormLeft = lNewFormLeft
                objAssistantBalloon.SetAvoidRectangle lFormLeft, lFormTop, lFormLeft + lFormWidth, lFormTop + lFormHeight
            End If
            objAssistantBalloon.Close
            objAssistantBalloon.Text = rgstrAssistantMsg(iNewPanel)
            objAssistantBalloon.Show
        End If
        PageSetFocus
    End If

End Sub

Private Function FInvalidDates() As Boolean
   
    On Error GoTo InvalidDates_Error

    If FInValidStartYear Then
        GoTo InvalidDates_Error
    ElseIf FInValidEndYear Then
        GoTo InvalidDates_Error
    ElseIf (CInt(txtYearStart.Text) = CInt(txtYearEnd.Text)) And (cboMonthStart.ListIndex > cboMonthEnd.ListIndex) Then
        cboMonthEnd.Value = cboMonthStart.Value
        fDateError = False
        FInvalidDates = False
    Else
        fDateError = False
        FInvalidDates = False
    End If

    Exit Function

InvalidDates_Error:
    Err.Clear
    fDateError = True
    FInvalidDates = True

End Function
Private Function FInValidStartYear() As Boolean
Dim strYearStart As String

    On Error GoTo InvalidStartYrError
    strYearStart = txtYearStart.Text
    
    If (Len(strYearStart) = 0) Then
        DisplayErrorMsg strWarnYearReq
        GoTo InvalidStartYrError
    ElseIf (CInt(strYearStart) < iYearMin) Then
        DisplayErrorMsg strWarnMinExceeded
        GoTo InvalidStartYrError
    ElseIf (CInt(strYearStart) > iYearMax) Then
        DisplayErrorMsg strWarnMaxExceeded
        GoTo InvalidStartYrError
    End If
    
    FInValidStartYear = False
    Exit Function
    
InvalidStartYrError:
    Err.Clear
    fDateError = True
    FInValidStartYear = True
End Function

Private Function FInValidEndYear() As Boolean
Dim strYearEnd As String

    On Error GoTo InvalidEndYrError
    strYearEnd = txtYearEnd.Text
    
    If (Len(strYearEnd) = 0) Then
        DisplayErrorMsg strWarnYearReq
        GoTo InvalidEndYrError
    ElseIf (CInt(strYearEnd) < iYearMin) Then
        DisplayErrorMsg strWarnMinExceeded
        GoTo InvalidEndYrError
    ElseIf (CInt(strYearEnd) > iYearMax) Then
        DisplayErrorMsg strWarnMaxExceeded
        GoTo InvalidEndYrError
    End If
    
    FInValidEndYear = False
    Exit Function
    
InvalidEndYrError:
    Err.Clear
    fDateError = True
    FInValidEndYear = True
End Function
Public Function IRangeExceeded() As Integer
  Dim i As Integer
  Dim dtmDateFrom As Date
  Dim dtmDateTo   As Date
  
    On Error GoTo RangeExceeded_Error

    dtmDateFrom = Format$((CInt(cboMonthStart.ListIndex) + 1) & "/01/" & CInt(txtYearStart.Text), "mm/dd/yyyy")
    dtmDateTo = Format$((CInt(cboMonthEnd.ListIndex) + 1) & "/01/" & CInt(txtYearEnd.Text), "mm/dd/yyyy")

    i = CInt(DateDiff("m", dtmDateFrom, dtmDateTo))
    If i > 120 Then
        DisplayErrorMsg strWarnRangeExceeded
        fDateError = True
    Else
        fDateError = False
    End If

    IRangeExceeded = i
    Exit Function

RangeExceeded_Error:
    Err.Clear
    fDateError = True
    IRangeExceeded = 200
    
End Function
Private Function FPageLostFocus() As Boolean
  Dim fRet As Boolean
  fRet = True
  Select Case iCurrentPanel
    Case wzPAGE_START
      formWizard.cmdBack.Enabled = True
      If Not (fSettingsRestored) Then RestoreDialogValues (True)
    Case 3
        If fCheckValidity Then
            If FInValidStartYear Then
                txtYearStart.SelStart = 0
                txtYearStart.SelLength = txtYearStart.TextLength
                'txtYearStart.SetFocus
                fRet = False
            ElseIf FInValidEndYear Then
                txtYearEnd.SelStart = 0
                txtYearEnd.SelLength = txtYearEnd.TextLength
                'txtYearEnd.SetFocus
                fRet = False
            ElseIf CInt(txtYearStart.Text) > CInt(txtYearEnd.Text) Then
                txtYearEnd.Text = txtYearStart.Text
                cboMonthEnd.Value = cboMonthStart.Value
                fCheckValidity = False
                fRet = False
            ElseIf (CInt(txtYearStart.Text) = CInt(txtYearEnd.Text)) And (cboMonthStart.ListIndex > cboMonthEnd.ListIndex) Then
                cboMonthEnd.Value = cboMonthStart.Value
                fCheckValidity = False
                fRet = False
            ElseIf IRangeExceeded > 120 Then
                txtYearEnd.SelStart = 0
                txtYearEnd.SelLength = txtYearEnd.TextLength
                txtYearStart.SelStart = 0
                txtYearStart.SelLength = txtYearStart.TextLength
                fRet = False
            End If
        End If
    Case wzPAGE_FINISH
      formWizard.cmdNext.Enabled = True
      fSettingsSaved = False
  End Select
  
  ' Calendar Wizard always returns true
  FPageLostFocus = fRet

End Function

Private Sub PageSetFocus()

  Select Case iCurrentPanel
    Case wzPAGE_START
      formWizard.cmdNext.SetFocus
      formWizard.cmdBack.Enabled = False
    Case wzPAGE_STYLE
      If formWizard.optBoxes.Value Then
        formWizard.optBoxes.SetFocus
      ElseIf formWizard.optBanner.Value Then
        formWizard.optBanner.SetFocus
      Else
        formWizard.optJazzy.SetFocus
      End If
    Case wzPAGE_FINISH
      formWizard.cmdFinish.SetFocus
      formWizard.cmdNext.Enabled = False
      If Not (fSettingsSaved) Then SaveDialogValues (True)
  End Select
  
End Sub

' End Calendar Wizard form code



' InQuest injected base64 decoded content
' Szjej

INQUEST-PP=macro
