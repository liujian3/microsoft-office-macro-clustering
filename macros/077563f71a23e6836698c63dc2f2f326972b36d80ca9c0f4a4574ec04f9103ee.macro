Attribute VB_Name = "AUD_MASTER_CONFIG"
' AUD build time
Public Const AudMasterBuild = "_201805221300"

' Box settings password
Public Const BOX_settings_pw = "vhc"

' Style limits password
Public Const STYLE_limits_pw = "vhc"

' Table restore constants
Public Const TableRestoreValueSplitCharacter = "|fffd|"

' Style property constants
Public Const StylePropertyPartHook = "<>"
Public Const StylePropertyHook = "|fffd|"
Public Const StylePropertyValueHook = "#"
Public Const StylePropertyStyleNameHook = ":"

' AUD styles
Public Const AUD_basestyle = "AUD_basestyle"
Public Const AUD_basestyle_list = "AUD_basestyle_list"
Public Const AUD_tf_box_01 = "CHV_tf_Kasten_01"
Public Const AUD_tf_box_02 = "CHV_tf_Kasten_02"
Public Const AUD_tf_box_03 = "CHV_tf_Kasten_03"
Public Const AUD_tf_box_04 = "AUD_tf_box_04"
Public Const AUD_tf_box_05 = "AUD_tf_box_05"
Public Const AUD_tf_box_06 = "CHV_tf_Kasten_06"
Public Const AUD_tf_box_07 = "CHV_tf_Kasten_07"
Public Const AUD_tf_box_08 = "CHV_tf_Kasten_08"
Public Const AUD_tf_box_09 = "CHV_tf_Kasten_09"
Public Const AUD_tf_box_10 = "AUD_tf_box_10"
Public Const AUD_tf_box_11 = "AUD_tf_box_11"
Public Const AUD_tf_box_12 = "AUD_tf_box_12"
Public Const AUD_tf_box_13 = "AUD_tf_box_13"
Public Const AUD_tf_box_14 = "AUD_tf_box_14"
Public Const AUD_tf_box_15 = "AUD_tf_box_15"
Public Const AUD_tf_box_16 = "AUD_tf_box_16"
Public Const AUD_tf_box_17 = "AUD_tf_box_17"
Public Const AUD_tf_box_18 = "AUD_tf_box_18"
Public Const AUD_tf_box_19 = "AUD_tf_box_19"
Public Const AUD_tf_box_20 = "AUD_tf_box_20"
Public Const AUD_tf_box_21 = "AUD_tf_box_21"
Public Const AUD_tf_box_22 = "AUD_tf_box_22"
Public Const AUD_tf_box_23 = "AUD_tf_box_23"
Public Const AUD_tf_box_24 = "AUD_tf_box_24"
Public Const AUD_tf_box_25 = "AUD_tf_box_25"
Public Const AUD_tf_columntext = "CHV_tf_Layouttabelle"
Public Const AUD_tf_equation_figure = "CHV_tf_Formel"
Public Const AUD_tf_equation_text = "CHV_tf_Formel_Text"
Public Const AUD_tf_figure = "CHV_tf_Bild"
Public Const AUD_tf_marginal_note = "CHV_tf_Marginalie"
Public Const AUD_tf_meta = "AUD_tf_meta"
Public Const AUD_tf_special_container_01 = "AUD_tf_special_container_01"
Public Const AUD_tf_special_container_02 = "AUD_tf_special_container_02"
Public Const AUD_tf_special_container_03 = "AUD_tf_special_container_03"
Public Const AUD_tf_special_container_04 = "AUD_tf_special_container_04"
Public Const AUD_tf_special_container_05 = "AUD_tf_special_container_05"
Public Const AUD_tf_table = "CHV_tf_Tabelle"
Public Const AUD_tf_table_aux_01 = "AUD_tf_table_aux_01"
Public Const AUD_tf_table_aux_02 = "AUD_tf_table_aux_02"
Public Const AUD_tf_table_aux_03 = "AUD_tf_table_aux_03"
Public Const AUD_lf_heads_num = "CHV_lf_Ueberschriften"
Public Const AUD_lf_symbol = "CHV_lf_Liste_Symbol"
Public Const AUD_lf_numeric = "CHV_lf_Liste_Nummer"
Public Const AUD_lf_character = "CHV_lf_Liste_alphabetisch"
Public Const AUD_lf_character_capital = "AUD_lf_character_capital"
Public Const AUD_lf_roman = "CHV_lf_Liste_roem"
Public Const AUD_lf_roman_capital = "CHV_lf_Liste_roem_gross"
Public Const AUD_lf_unordered = "AUD_lf_unordered"
Public Const AUD_lf_ordered = "AUD_lf_ordered"
Public Const AUD_lf_manual = "AUD_lf_manual"
Public Const AUD_lf_blank = "CHV_lf_Liste_Einzug"
Public Const AUD_lf_temp = "AUD_lf_temp"
Public Const AUD_bodytext = "CHV_Standard"
Public Const AUD_bodytext_centre = "AUD_bodytext_centre"
Public Const AUD_bodytext_right = "AUD_bodytext_right"
Public Const AUD_sub = "CHV_SUBSUP_tief"
Public Const AUD_subsub = "AUD_subsub"
Public Const AUD_subsup = "AUD_subsup"
Public Const AUD_sup = "CHV_SUBSUP_hoch"
Public Const AUD_supsub = "AUD_supsub"
Public Const AUD_supsup = "AUD_supsup"
Public Const AUD_emph_bold = "CHV_AUSZ_1_fett"
Public Const AUD_emph_bold_sub = "CHV_AUSZ_1_fett_tief"
Public Const AUD_emph_bold_subsub = "AUD_emph_bold_subsub"
Public Const AUD_emph_bold_sup = "CHV_AUSZ_1_fett_hoch"
Public Const AUD_emph_bold_supsup = "AUD_emph_bold_supsup"
Public Const AUD_emph_italic = "CHV_AUSZ_2_kursiv"
Public Const AUD_emph_italic_sub = "CHV_AUSZ_2_kursiv_tief"
Public Const AUD_emph_italic_subsub = "AUD_emph_italic_subsub"
Public Const AUD_emph_italic_sup = "CHV_AUSZ_2_kursiv_hoch"
Public Const AUD_emph_italic_supsup = "AUD_emph_italic_supsup"
Public Const AUD_emph_bolditalic = "CHV_AUSZ_1_fett-kursiv"
Public Const AUD_emph_bolditalic_sub = "CHV_AUSZ_1_fett-kursiv_tief"
Public Const AUD_emph_bolditalic_subsub = "AUD_emph_bolditalic_subsub"
Public Const AUD_emph_bolditalic_sup = "CHV_AUSZ_1_fett-kursiv_hoch"
Public Const AUD_emph_bolditalic_supsup = "AUD_emph_bolditalic_supsup"
Public Const AUD_emph_caps = "AUD_emph_caps"
Public Const AUD_emph_caps_bold = "AUD_emph_caps_bold"
Public Const AUD_emph_caps_bolditalic = "AUD_emph_caps_bolditalic"
Public Const AUD_emph_caps_italic = "AUD_emph_caps_italic"
Public Const AUD_emph_smallcaps = "CHV_AUSZ_3_Kapitaelchen"
Public Const AUD_emph_smallcaps_bold = "CHV_AUSZ_3_Kapitaelchen_fett"
Public Const AUD_emph_smallcaps_bolditalic = "CHV_AUSZ_3_Kapitaelchen_fett-kursiv"
Public Const AUD_emph_smallcaps_italic = "CHV_AUSZ_3_Kapitaelchen_kursiv"
Public Const AUD_emph_spaced = "AUD_emph_spaced"
Public Const AUD_emph_spaced_bold = "AUD_emph_spaced_bold"
Public Const AUD_emph_spaced_bolditalic = "AUD_emph_spaced_bolditalic"
Public Const AUD_emph_spaced_italic = "AUD_emph_spaced_italic"
Public Const AUD_emph_strikethrough = "AUD_emph_strikethrough"
Public Const AUD_emph_strikethrough_bold = "AUD_emph_strikethrough_bold"
Public Const AUD_emph_strikethrough_bolditalic = "AUD_emph_strikethrough_bolditalic"
Public Const AUD_emph_strikethrough_italic = "AUD_emph_strikethrough_italic"
Public Const AUD_emph_underline = "CHV_AUSZ_5_unterstrichen"
Public Const AUD_emph_underline_bold = "CHV_AUSZ_5_unterstrichen_fett"
Public Const AUD_emph_underline_bolditalic = "AUD_emph_underline_bolditalic"
Public Const AUD_emph_underline_italic = "CHV_AUSZ_5_unterstrichen_kursiv"
Public Const AUD_emph_initial = "AUD_emph_initial"
Public Const AUD_emph_regular = "AUD_emph_regular"
Public Const AUD_ipa = "AUD_ipa"
Public Const AUD_aux_char_01 = "CHV_CODE_inline"
Public Const AUD_aux_char_02 = "CHV_CODE_inline_fett"
Public Const AUD_aux_char_03 = "CHV_CODE_inline_kursiv"
Public Const AUD_aux_char_04 = "CHV_AUSZ_6_gerahmt"
Public Const AUD_aux_char_05 = "CHV_AUSZ_6_gerahmt_fett"
Public Const AUD_aux_char_06 = "CHV_AUSZ_6_gerahmt_kursiv"
Public Const AUD_aux_char_07 = "CHV_AUSZ_7_hinterlegt"
Public Const AUD_aux_char_08 = "CHV_AUSZ_7_hinterlegt_fett"
Public Const AUD_aux_char_09 = "CHV_AUSZ_7_hinterlegt_kursiv"
Public Const AUD_aux_char_10 = "CHV_AUSZ_8_rot"
Public Const AUD_aux_char_11 = "CHV_AUSZ_8_rot_fett"
Public Const AUD_aux_char_12 = "CHV_AUSZ_8_rot_kursiv"
Public Const AUD_aux_char_13 = "CHV_AUSZ_8_blau"
Public Const AUD_aux_char_14 = "CHV_AUSZ_8_blau_fett"
Public Const AUD_aux_char_15 = "CHV_AUSZ_8_blau_kursiv"
Public Const AUD_aux_char_16 = "CHV_AUSZ_8_gruen"
Public Const AUD_aux_char_17 = "CHV_AUSZ_8_gruen_fett"
Public Const AUD_aux_char_18 = "CHV_AUSZ_8_gruen_kursiv"
Public Const AUD_aux_char_19 = "CHV_AUSZ_8_orange"
Public Const AUD_aux_char_20 = "CHV_AUSZ_8_orange_fett"
Public Const AUD_aux_char_21 = "CHV_AUSZ_8_orange_kursiv"
Public Const AUD_aux_char_22 = "CHV_AUSZ_4_fett-grau"
Public Const AUD_aux_char_23 = "CHV_AUSZ_4_fett-grau_hoch"
Public Const AUD_aux_char_24 = "CHV_AUSZ_4_fett-grau_tief"
Public Const AUD_aux_char_25 = "AUD_aux_char_25"
Public Const AUD_aux_char_26 = "AUD_aux_char_26"
Public Const AUD_aux_char_27 = "AUD_aux_char_27"
Public Const AUD_aux_char_28 = "AUD_aux_char_28"
Public Const AUD_aux_char_29 = "AUD_aux_char_29"
Public Const AUD_aux_char_30 = "AUD_aux_char_30"
Public Const AUD_aux_para_01 = "CHV_CODE_display_num"
Public Const AUD_aux_para_02 = "AUD_aux_para_02"
Public Const AUD_aux_para_03 = "AUD_aux_para_03"
Public Const AUD_aux_para_04 = "AUD_aux_para_04"
Public Const AUD_aux_para_05 = "AUD_aux_para_05"
Public Const AUD_aux_para_06 = "AUD_aux_para_06"
Public Const AUD_aux_para_07 = "AUD_aux_para_07"
Public Const AUD_aux_para_08 = "AUD_aux_para_08"
Public Const AUD_aux_para_09 = "AUD_aux_para_09"
Public Const AUD_aux_para_10 = "AUD_aux_para_10"
Public Const AUD_aux_para_11 = "CHV_Standard_Einzug"
Public Const AUD_aux_para_12 = "CHV_MATH_Legende"
Public Const AUD_aux_para_13 = "AUD_aux_para_13"
Public Const AUD_aux_para_14 = "AUD_aux_para_14"
Public Const AUD_aux_para_15 = "AUD_aux_para_15"
Public Const AUD_aux_para_16 = "AUD_aux_para_16"
Public Const AUD_aux_para_17 = "AUD_aux_para_17"
Public Const AUD_aux_para_18 = "AUD_aux_para_18"
Public Const AUD_aux_para_19 = "AUD_aux_para_19"
Public Const AUD_aux_para_20 = "AUD_aux_para_20"
Public Const AUD_aux_para_21 = "AUD_aux_para_21"
Public Const AUD_aux_para_22 = "AUD_aux_para_22"
Public Const AUD_aux_para_23 = "AUD_aux_para_23"
Public Const AUD_aux_para_24 = "AUD_aux_para_24"
Public Const AUD_aux_para_25 = "AUD_aux_para_25"
Public Const AUD_aux_para_26 = "AUD_aux_para_26"
Public Const AUD_aux_para_27 = "AUD_aux_para_27"
Public Const AUD_aux_para_28 = "AUD_aux_para_28"
Public Const AUD_aux_para_29 = "AUD_aux_para_29"
Public Const AUD_aux_para_30 = "AUD_aux_para_30"
Public Const AUD_authors = "CHV_Autor"
Public Const AUD_parttitle = "CHV_U_Teil"
Public Const AUD_parttitle_sub = "AUD_parttitle_sub"
Public Const AUD_parttitle_sub_sub = "AUD_parttitle_sub_sub"
Public Const AUD_h1 = "CHV_U1"
Public Const AUD_h2 = "CHV_U2"
Public Const AUD_h3 = "CHV_U3"
Public Const AUD_h4 = "CHV_U4"
Public Const AUD_h5 = "CHV_U5"
Public Const AUD_h6 = "CHV_U6"
Public Const AUD_h7 = "AUD_h7"
Public Const AUD_h8 = "AUD_h8"
Public Const AUD_h9 = "AUD_h9"
Public Const AUD_h1_nonum = "AUD_h1_nonum"
Public Const AUD_h2_nonum = "AUD_h2_nonum"
Public Const AUD_h3_nonum = "AUD_h3_nonum"
Public Const AUD_h4_nonum = "AUD_h4_nonum"
Public Const AUD_h5_nonum = "AUD_h5_nonum"
Public Const AUD_h6_nonum = "AUD_h6_nonum"
Public Const AUD_h7_nonum = "AUD_h7_nonum"
Public Const AUD_h8_nonum = "AUD_h8_nonum"
Public Const AUD_h9_nonum = "AUD_h9_nonum"
Public Const AUD_h1_sub = "AUD_h1_sub"
Public Const AUD_h2_sub = "AUD_h2_sub"
Public Const AUD_parahead = "CHV_Spitzmarke"
Public Const AUD_subhead = "CHV_U_ZwiTi"
Public Const AUD_list_01_symbol = "CHV_LISTE_1"
Public Const AUD_list_02_symbol = "CHV_LISTE_2"
Public Const AUD_list_03_symbol = "CHV_LISTE_3"
Public Const AUD_list_01_numeric = "CHV_LISTE_num_1"
Public Const AUD_list_02_numeric = "AUD_list_02_numeric"
Public Const AUD_list_03_numeric = "AUD_list_03_numeric"
Public Const AUD_list_01_character = "CHV_LISTE_num_a"
Public Const AUD_list_02_character = "CHV_LISTE_num_aa"
Public Const AUD_list_03_character = "AUD_list_03_character"
Public Const AUD_list_01_character_capital = "AUD_list_01_character_capital"
Public Const AUD_list_02_character_capital = "AUD_list_02_character_capital"
Public Const AUD_list_03_character_capital = "AUD_list_03_character_capital"
Public Const AUD_list_01_roman = "AUD_list_03_character_capital"
Public Const AUD_list_02_roman = "AUD_list_02_roman"
Public Const AUD_list_03_roman = "CHV_LISTE_roem_iii"
Public Const AUD_list_01_roman_capital = "CHV_LISTE_roem_I"
Public Const AUD_list_02_roman_capital = "AUD_list_02_roman_capital"
Public Const AUD_list_03_roman_capital = "AUD_list_03_roman_capital"
Public Const AUD_list_01_unordered = "AUD_list_01_unordered"
Public Const AUD_list_02_unordered = "AUD_list_02_unordered"
Public Const AUD_list_03_unordered = "AUD_list_03_unordered"
Public Const AUD_list_04_unordered = "AUD_list_04_unordered"
Public Const AUD_list_05_unordered = "AUD_list_05_unordered"
Public Const AUD_list_06_unordered = "AUD_list_06_unordered"
Public Const AUD_list_07_unordered = "AUD_list_07_unordered"
Public Const AUD_list_08_unordered = "AUD_list_08_unordered"
Public Const AUD_list_09_unordered = "AUD_list_09_unordered"
Public Const AUD_list_01_ordered = "AUD_list_01_ordered"
Public Const AUD_list_02_ordered = "AUD_list_02_ordered"
Public Const AUD_list_03_ordered = "AUD_list_03_ordered"
Public Const AUD_list_04_ordered = "AUD_list_04_ordered"
Public Const AUD_list_05_ordered = "AUD_list_05_ordered"
Public Const AUD_list_06_ordered = "AUD_list_06_ordered"
Public Const AUD_list_07_ordered = "AUD_list_07_ordered"
Public Const AUD_list_08_ordered = "AUD_list_08_ordered"
Public Const AUD_list_09_ordered = "AUD_list_09_ordered"
Public Const AUD_list_01_manual = "AUD_list_01_manual"
Public Const AUD_list_02_manual = "AUD_list_02_manual"
Public Const AUD_list_03_manual = "AUD_list_03_manual"
Public Const AUD_list_04_manual = "AUD_list_04_manual"
Public Const AUD_list_05_manual = "AUD_list_05_manual"
Public Const AUD_list_06_manual = "AUD_list_06_manual"
Public Const AUD_list_07_manual = "AUD_list_07_manual"
Public Const AUD_list_08_manual = "AUD_list_08_manual"
Public Const AUD_list_09_manual = "AUD_list_09_manual"
Public Const AUD_list_01_blank = "CHV_LISTE_Einzug_1"
Public Const AUD_list_02_blank = "CHV_LISTE_Einzug_2"
Public Const AUD_list_03_blank = "CHV_LISTE_Einzug_3"
Public Const AUD_list_04_blank = "AUD_list_04_blank"
Public Const AUD_list_05_blank = "AUD_list_05_blank"
Public Const AUD_list_06_blank = "AUD_list_06_blank"
Public Const AUD_list_07_blank = "AUD_list_07_blank"
Public Const AUD_list_08_blank = "AUD_list_08_blank"
Public Const AUD_list_09_blank = "AUD_list_09_blank"
Public Const AUD_list_01_temp = "AUD_list_01_temp"
Public Const AUD_list_02_temp = "AUD_list_02_temp"
Public Const AUD_list_03_temp = "AUD_list_03_temp"
Public Const AUD_list_04_temp = "AUD_list_04_temp"
Public Const AUD_list_05_temp = "AUD_list_05_temp"
Public Const AUD_list_06_temp = "AUD_list_06_temp"
Public Const AUD_list_07_temp = "AUD_list_07_temp"
Public Const AUD_list_08_temp = "AUD_list_08_temp"
Public Const AUD_list_09_temp = "AUD_list_09_temp"
Public Const AUD_list_continue_marker = "AUD_list_continue_marker"
Public Const AUD_list_label_manual = "AUD_list_label_manual"
Public Const AUD_box_footnote = "AUD_box_footnote"
Public Const AUD_box_h1 = "CHV_KASTEN_U1"
Public Const AUD_box_h2 = "CHV_KASTEN_U2"
Public Const AUD_box_h3 = "AUD_box_h3"
Public Const AUD_box_h4 = "AUD_box_h4"
Public Const AUD_box_h5 = "AUD_box_h5"
Public Const AUD_box_h6 = "AUD_box_h6"
Public Const AUD_box_h7 = "AUD_box_h7"
Public Const AUD_box_h8 = "AUD_box_h8"
Public Const AUD_box_h9 = "AUD_box_h9"
Public Const AUD_box_title = "CHV_KASTEN_Legende"
Public Const AUD_table_alignment = "AUD_table_alignment"
Public Const AUD_table_caption = "CHV_TAB_Ueberschrift"
Public Const AUD_table_caption_addtext = "CHV_TAB_Ueberschrift_Fortsetzung"
Public Const AUD_table_footnote = "CHV_TAB_Legende"
Public Const AUD_table_head_01 = "CHV_TAB_Kopf"
Public Const AUD_table_head_02 = "CHV_TAB_Zwischentitel"
Public Const AUD_table_head_03 = "AUD_table_head_03"
Public Const AUD_table_wanted_break = "AUD_table_wanted_break"
Public Const AUD_figure_caption = "CHV_ABB_Unterschrift"
Public Const AUD_figure_caption_addtext = "CHV_ABB_Legende"
Public Const AUD_figure_id = "CHV_ABB"
Public Const AUD_figure_inline = "AUD_figure_inline"
Public Const AUD_figure_scale = "AUD_figure_scale"
Public Const AUD_icon = "AUD_icon"
Public Const AUD_equation_caption = "CHV_MATH_Formelzahl"
Public Const AUD_equation_id = "CHV_MATH"
Public Const AUD_equation_inline = "AUD_equation_inline"
Public Const AUD_equation_text = "CHV_MATH_Text"
Public Const AUD_bibref_bodytext = "CHV_LIT_Text"
Public Const AUD_bibref_first_name = "AUD_bibref_first_name"
Public Const AUD_bibref_head = "CHV_LIT_Ueberschrift"
Public Const AUD_bibref_journal_number = "AUD_bibref_journal_number"
Public Const AUD_bibref_last_accessed_on = "AUD_bibref_last_accessed_on"
Public Const AUD_bibref_last_name = "AUD_bibref_last_name"
Public Const AUD_bibref_last_update_copyright = "AUD_bibref_last_update_copyright"
Public Const AUD_bibref_location = "AUD_bibref_location"
Public Const AUD_bibref_page = "AUD_bibref_page"
Public Const AUD_bibref_publisher = "AUD_bibref_publisher"
Public Const AUD_bibref_subtitle = "AUD_bibref_subtitle"
Public Const AUD_bibref_title = "AUD_bibref_title"
Public Const AUD_bibref_url = "AUD_bibref_url"
Public Const AUD_bibref_volume = "AUD_bibref_volume"
Public Const AUD_bibref_year = "AUD_bibref_year"
Public Const AUD_comment_char_01 = "CHV_Inhaltliches_zu_klaeren"
Public Const AUD_comment_char_02 = "CHV_Formatierung_zu_klaeren"
Public Const AUD_comment_para_01 = "AUD_comment_para_01"
Public Const AUD_comment_para_02 = "AUD_comment_para_02"
Public Const AUD_quotation_01 = "CHV_Zitat"
Public Const AUD_quotation_01_author = "CHV_Zitat_Autor"
Public Const AUD_quotation_01_inline = "AUD_quotation_01_inline"
Public Const AUD_quotation_01_inline_author = "AUD_quotation_01_inline_author"
Public Const AUD_quotation_02 = "AUD_quotation_02"
Public Const AUD_quotation_02_author = "AUD_quotation_02_author"
Public Const AUD_quotation_02_inline = "AUD_quotation_02_inline"
Public Const AUD_quotation_02_inline_author = "AUD_quotation_02_inline_author"
Public Const AUD_endnote = "AUD_endnote"
Public Const AUD_endnote_label = "AUD_endnote_label"
Public Const AUD_footnote = "CHV_Fussnote"
Public Const AUD_footnote_label = "CHV_Fussnote_Zeichen"
Public Const AUD_footnote_label_manual = "AUD_footnote_label_manual"
Public Const AUD_marginal_note = "AUD_marginal_note"
Public Const AUD_marginal_note_anchor = "AUD_marginal_note_anchor"
Public Const AUD_marginal_number = "AUD_marginal_number"
Public Const AUD_meta_copyright = "AUD_meta_copyright"
Public Const AUD_meta_inline = "AUD_meta_inline"
Public Const AUD_meta_para = "AUD_meta_para"
Public Const AUD_meta_sid = "AUD_meta_sid"
Public Const AUD_crossref_chapter = "CHV_VERWEIS_Kapitel"
Public Const AUD_crossref_code = "CHV_VERWEIS_Listing"
Public Const AUD_crossref_critical = "AUD_crossref_critical"
Public Const AUD_crossref_equation = "CHV_VERWEIS_Formel"
Public Const AUD_crossref_figure = "CHV_VERWEIS_Bild"
Public Const AUD_crossref_general = "CHV_VERWEIS"
Public Const AUD_crossref_marginal_number = "AUD_crossref_marginal_number"
Public Const AUD_crossref_page = "AUD_crossref_page"
Public Const AUD_crossref_table = "CHV_VERWEIS_Tabelle"
Public Const AUD_code_caption = "CHV_CODE_Ueberschrift"
Public Const AUD_code_display = "CHV_CODE_display"
Public Const AUD_code_inline = "AUD_code_inline"
Public Const AUD_web_email = "CHV_web_email"
Public Const AUD_web_url = "CHV_web_URL"
Public Const AUD_columnbreak = "AUD_columnbreak"
Public Const AUD_pagebreak = "AUD_pagebreak"
Public Const AUD_wanted_empty_para = "AUD_wanted_empty_para"
Public Const AUD_wanted_empty_para_2 = "AUD_wanted_empty_para_2"
Public Const AUD_wanted_empty_para_after_marginal_note = "CHV_bewusste_Leerzeile_nach_Marginalie"
Public Const AUD_wanted_empty_para_after_word_table = "CHV_bewusste_Leerzeile_nach_Tabelle"
Public Const AUD_fm_aux_bodytext = "AUD_fm_aux_bodytext"
Public Const AUD_fm_aux_head = "AUD_fm_aux_head"
Public Const AUD_fm_dedication = "AUD_fm_dedication"
Public Const AUD_fm_dedication_author = "AUD_fm_dedication_author"
Public Const AUD_fm_ht_authors = "AUD_fm_ht_authors"
Public Const AUD_fm_ht_title = "AUD_fm_ht_title"
Public Const AUD_fm_ht_title_sub = "AUD_fm_ht_title_sub"
Public Const AUD_fm_ht_title_sub_sub = "AUD_fm_ht_title_sub_sub"
Public Const AUD_fm_imprint_bodytext = "AUD_fm_imprint_bodytext"
Public Const AUD_fm_imprint_head = "AUD_fm_imprint_head"
Public Const AUD_fm_mt_authors = "AUD_fm_mt_authors"
Public Const AUD_fm_mt_bodytext = "AUD_fm_mt_bodytext"
Public Const AUD_fm_mt_publisher = "AUD_fm_mt_publisher"
Public Const AUD_fm_mt_title = "AUD_fm_mt_title"
Public Const AUD_fm_mt_title_sub = "AUD_fm_mt_title_sub"
Public Const AUD_fm_mt_title_sub_sub = "AUD_fm_mt_title_sub_sub"
Public Const AUD_preface_01 = "AUD_preface_01"
Public Const AUD_preface_02 = "AUD_preface_02"
Public Const AUD_toc_author_char = "AUD_toc_author_char"
Public Const AUD_toc_author_para = "AUD_toc_author_para"
Public Const AUD_toc_aux = "AUD_toc_aux"
Public Const AUD_toc_h1 = "AUD_toc_h1"
Public Const AUD_toc_h2 = "AUD_toc_h2"
Public Const AUD_toc_h3 = "AUD_toc_h3"
Public Const AUD_toc_h4 = "AUD_toc_h4"
Public Const AUD_toc_h5 = "AUD_toc_h5"
Public Const AUD_toc_h6 = "AUD_toc_h6"
Public Const AUD_toc_h7 = "AUD_toc_h7"
Public Const AUD_toc_h8 = "AUD_toc_h8"
Public Const AUD_toc_h9 = "AUD_toc_h9"
Public Const AUD_toc_head = "AUD_toc_head"
Public Const AUD_toc_locator = "AUD_toc_locator"
Public Const AUD_toc_number = "AUD_toc_number"
Public Const AUD_toc_parttitle = "AUD_toc_parttitle"
Public Const AUD_toc_parttitle_sub = "AUD_toc_parttitle_sub"
Public Const AUD_toc_parttitle_sub_sub = "AUD_toc_parttitle_sub_sub"
Public Const AUD_xe_head_01 = "AUD_xe_head_01"
Public Const AUD_xe_head_02 = "AUD_xe_head_02"
Public Const AUD_xe_main = "AUD_xe_main"
Public Const AUD_xe_sub1 = "AUD_xe_sub1"
Public Const AUD_xe_sub2 = "AUD_xe_sub2"
Public Const AUD_xe_sub3 = "AUD_xe_sub3"
Public Const AUD_xe_sub4 = "AUD_xe_sub4"
Public Const AUD_xe_sub5 = "AUD_xe_sub5"

Function TableStyles() As Variant
    Dim arrStyles(39) As String
    arrStyles(0) = "CHV_tf_Kasten_01"
    arrStyles(1) = "CHV_tf_Kasten_02"
    arrStyles(2) = "CHV_tf_Kasten_03"
    arrStyles(3) = "AUD_tf_box_04"
    arrStyles(4) = "AUD_tf_box_05"
    arrStyles(5) = "CHV_tf_Kasten_06"
    arrStyles(6) = "CHV_tf_Kasten_07"
    arrStyles(7) = "CHV_tf_Kasten_08"
    arrStyles(8) = "CHV_tf_Kasten_09"
    arrStyles(9) = "AUD_tf_box_10"
    arrStyles(10) = "AUD_tf_box_11"
    arrStyles(11) = "AUD_tf_box_12"
    arrStyles(12) = "AUD_tf_box_13"
    arrStyles(13) = "AUD_tf_box_14"
    arrStyles(14) = "AUD_tf_box_15"
    arrStyles(15) = "AUD_tf_box_16"
    arrStyles(16) = "AUD_tf_box_17"
    arrStyles(17) = "AUD_tf_box_18"
    arrStyles(18) = "AUD_tf_box_19"
    arrStyles(19) = "AUD_tf_box_20"
    arrStyles(20) = "AUD_tf_box_21"
    arrStyles(21) = "AUD_tf_box_22"
    arrStyles(22) = "AUD_tf_box_23"
    arrStyles(23) = "AUD_tf_box_24"
    arrStyles(24) = "AUD_tf_box_25"
    arrStyles(25) = "CHV_tf_Layouttabelle"
    arrStyles(26) = "CHV_tf_Formel"
    arrStyles(27) = "CHV_tf_Formel_Text"
    arrStyles(28) = "CHV_tf_Bild"
    arrStyles(29) = "CHV_tf_Marginalie"
    arrStyles(30) = "AUD_tf_meta"
    arrStyles(31) = "AUD_tf_special_container_01"
    arrStyles(32) = "AUD_tf_special_container_02"
    arrStyles(33) = "AUD_tf_special_container_03"
    arrStyles(34) = "AUD_tf_special_container_04"
    arrStyles(35) = "AUD_tf_special_container_05"
    arrStyles(36) = "CHV_tf_Tabelle"
    arrStyles(37) = "AUD_tf_table_aux_01"
    arrStyles(38) = "AUD_tf_table_aux_02"
    arrStyles(39) = "AUD_tf_table_aux_03"
    TableStyles = arrStyles
End Function

Function SpecialContainerTableStyles() As Variant
    Dim arrStyles(4) As String
    arrStyles(0) = "AUD_tf_special_container_01"
    arrStyles(1) = "AUD_tf_special_container_02"
    arrStyles(2) = "AUD_tf_special_container_03"
    arrStyles(3) = "AUD_tf_special_container_04"
    arrStyles(4) = "AUD_tf_special_container_05"
    SpecialContainerTableStyles = arrStyles
End Function

Function BoxTableStyles() As Variant
    Dim arrStyles(24) As String
    arrStyles(0) = "CHV_tf_Kasten_01;strBoxTitle01"
    arrStyles(1) = "CHV_tf_Kasten_02;strBoxTitle02"
    arrStyles(2) = "CHV_tf_Kasten_03;strBoxTitle03"
    arrStyles(3) = "AUD_tf_box_04;strBoxTitle04"
    arrStyles(4) = "AUD_tf_box_05;strBoxTitle05"
    arrStyles(5) = "CHV_tf_Kasten_06;strBoxTitle06"
    arrStyles(6) = "CHV_tf_Kasten_07;strBoxTitle07"
    arrStyles(7) = "CHV_tf_Kasten_08;strBoxTitle08"
    arrStyles(8) = "CHV_tf_Kasten_09;strBoxTitle09"
    arrStyles(9) = "AUD_tf_box_10;strBoxTitle10"
    arrStyles(10) = "AUD_tf_box_11;strBoxTitle11"
    arrStyles(11) = "AUD_tf_box_12;strBoxTitle12"
    arrStyles(12) = "AUD_tf_box_13;strBoxTitle13"
    arrStyles(13) = "AUD_tf_box_14;strBoxTitle14"
    arrStyles(14) = "AUD_tf_box_15;strBoxTitle15"
    arrStyles(15) = "AUD_tf_box_16;strBoxTitle16"
    arrStyles(16) = "AUD_tf_box_17;strBoxTitle17"
    arrStyles(17) = "AUD_tf_box_18;strBoxTitle18"
    arrStyles(18) = "AUD_tf_box_19;strBoxTitle19"
    arrStyles(19) = "AUD_tf_box_20;strBoxTitle20"
    arrStyles(20) = "AUD_tf_box_21;strBoxTitle21"
    arrStyles(21) = "AUD_tf_box_22;strBoxTitle22"
    arrStyles(22) = "AUD_tf_box_23;strBoxTitle23"
    arrStyles(23) = "AUD_tf_box_24;strBoxTitle24"
    arrStyles(24) = "AUD_tf_box_25;strBoxTitle25"
    BoxTableStyles = arrStyles
End Function

Function ListStyles() As Variant
    Dim arrStyles(62) As String
    arrStyles(0) = "CHV_LISTE_1"
    arrStyles(1) = "CHV_LISTE_2"
    arrStyles(2) = "CHV_LISTE_3"
    arrStyles(3) = "CHV_LISTE_num_1"
    arrStyles(4) = "AUD_list_02_numeric"
    arrStyles(5) = "AUD_list_03_numeric"
    arrStyles(6) = "CHV_LISTE_num_a"
    arrStyles(7) = "CHV_LISTE_num_aa"
    arrStyles(8) = "AUD_list_03_character"
    arrStyles(9) = "AUD_list_01_character_capital"
    arrStyles(10) = "AUD_list_02_character_capital"
    arrStyles(11) = "AUD_list_03_character_capital"
    arrStyles(12) = "AUD_list_03_character_capital"
    arrStyles(13) = "AUD_list_02_roman"
    arrStyles(14) = "CHV_LISTE_roem_iii"
    arrStyles(15) = "CHV_LISTE_roem_I"
    arrStyles(16) = "AUD_list_02_roman_capital"
    arrStyles(17) = "AUD_list_03_roman_capital"
    arrStyles(18) = "AUD_list_01_unordered"
    arrStyles(19) = "AUD_list_02_unordered"
    arrStyles(20) = "AUD_list_03_unordered"
    arrStyles(21) = "AUD_list_04_unordered"
    arrStyles(22) = "AUD_list_05_unordered"
    arrStyles(23) = "AUD_list_06_unordered"
    arrStyles(24) = "AUD_list_07_unordered"
    arrStyles(25) = "AUD_list_08_unordered"
    arrStyles(26) = "AUD_list_09_unordered"
    arrStyles(27) = "AUD_list_01_ordered"
    arrStyles(28) = "AUD_list_02_ordered"
    arrStyles(29) = "AUD_list_03_ordered"
    arrStyles(30) = "AUD_list_04_ordered"
    arrStyles(31) = "AUD_list_05_ordered"
    arrStyles(32) = "AUD_list_06_ordered"
    arrStyles(33) = "AUD_list_07_ordered"
    arrStyles(34) = "AUD_list_08_ordered"
    arrStyles(35) = "AUD_list_09_ordered"
    arrStyles(36) = "AUD_list_01_manual"
    arrStyles(37) = "AUD_list_02_manual"
    arrStyles(38) = "AUD_list_03_manual"
    arrStyles(39) = "AUD_list_04_manual"
    arrStyles(40) = "AUD_list_05_manual"
    arrStyles(41) = "AUD_list_06_manual"
    arrStyles(42) = "AUD_list_07_manual"
    arrStyles(43) = "AUD_list_08_manual"
    arrStyles(44) = "AUD_list_09_manual"
    arrStyles(45) = "CHV_LISTE_Einzug_1"
    arrStyles(46) = "CHV_LISTE_Einzug_2"
    arrStyles(47) = "CHV_LISTE_Einzug_3"
    arrStyles(48) = "AUD_list_04_blank"
    arrStyles(49) = "AUD_list_05_blank"
    arrStyles(50) = "AUD_list_06_blank"
    arrStyles(51) = "AUD_list_07_blank"
    arrStyles(52) = "AUD_list_08_blank"
    arrStyles(53) = "AUD_list_09_blank"
    arrStyles(54) = "AUD_list_01_temp"
    arrStyles(55) = "AUD_list_02_temp"
    arrStyles(56) = "AUD_list_03_temp"
    arrStyles(57) = "AUD_list_04_temp"
    arrStyles(58) = "AUD_list_05_temp"
    arrStyles(59) = "AUD_list_06_temp"
    arrStyles(60) = "AUD_list_07_temp"
    arrStyles(61) = "AUD_list_08_temp"
    arrStyles(62) = "AUD_list_09_temp"
    ListStyles = arrStyles
End Function

Function ListStylesOrdered() As Variant
    Dim arrStyles(23) As String
    arrStyles(0) = "CHV_LISTE_num_1"
    arrStyles(1) = "AUD_list_02_numeric"
    arrStyles(2) = "AUD_list_03_numeric"
    arrStyles(3) = "CHV_LISTE_num_a"
    arrStyles(4) = "CHV_LISTE_num_aa"
    arrStyles(5) = "AUD_list_03_character"
    arrStyles(6) = "AUD_list_01_character_capital"
    arrStyles(7) = "AUD_list_02_character_capital"
    arrStyles(8) = "AUD_list_03_character_capital"
    arrStyles(9) = "AUD_list_03_character_capital"
    arrStyles(10) = "AUD_list_02_roman"
    arrStyles(11) = "CHV_LISTE_roem_iii"
    arrStyles(12) = "CHV_LISTE_roem_I"
    arrStyles(13) = "AUD_list_02_roman_capital"
    arrStyles(14) = "AUD_list_03_roman_capital"
    arrStyles(15) = "AUD_list_01_ordered"
    arrStyles(16) = "AUD_list_02_ordered"
    arrStyles(17) = "AUD_list_03_ordered"
    arrStyles(18) = "AUD_list_04_ordered"
    arrStyles(19) = "AUD_list_05_ordered"
    arrStyles(20) = "AUD_list_06_ordered"
    arrStyles(21) = "AUD_list_07_ordered"
    arrStyles(22) = "AUD_list_08_ordered"
    arrStyles(23) = "AUD_list_09_ordered"
    ListStylesOrdered = arrStyles
End Function

Function ListStylesBlank() As Variant
    Dim arrStyles(8) As String
    arrStyles(0) = "CHV_LISTE_Einzug_1"
    arrStyles(1) = "CHV_LISTE_Einzug_2"
    arrStyles(2) = "CHV_LISTE_Einzug_3"
    arrStyles(3) = "AUD_list_04_blank"
    arrStyles(4) = "AUD_list_05_blank"
    arrStyles(5) = "AUD_list_06_blank"
    arrStyles(6) = "AUD_list_07_blank"
    arrStyles(7) = "AUD_list_08_blank"
    arrStyles(8) = "AUD_list_09_blank"
    ListStylesBlank = arrStyles
End Function

Function StyleOrder() As Variant
    Dim arrStyles(383) As String
    arrStyles(0) = "AUD_basestyle;False;99;False"
    arrStyles(1) = "AUD_basestyle_list;False;99;False"
    arrStyles(2) = "CHV_tf_Kasten_01;True;99;True"
    arrStyles(3) = "CHV_tf_Kasten_02;True;99;True"
    arrStyles(4) = "CHV_tf_Kasten_03;True;99;True"
    arrStyles(5) = "AUD_tf_box_04;False;99;False"
    arrStyles(6) = "AUD_tf_box_05;False;99;False"
    arrStyles(7) = "CHV_tf_Kasten_06;True;99;True"
    arrStyles(8) = "CHV_tf_Kasten_07;True;99;True"
    arrStyles(9) = "CHV_tf_Kasten_08;True;99;True"
    arrStyles(10) = "CHV_tf_Kasten_09;True;99;True"
    arrStyles(11) = "AUD_tf_box_10;False;99;False"
    arrStyles(12) = "AUD_tf_box_11;False;99;False"
    arrStyles(13) = "AUD_tf_box_12;False;99;False"
    arrStyles(14) = "AUD_tf_box_13;False;99;False"
    arrStyles(15) = "AUD_tf_box_14;False;99;False"
    arrStyles(16) = "AUD_tf_box_15;False;99;False"
    arrStyles(17) = "AUD_tf_box_16;False;99;False"
    arrStyles(18) = "AUD_tf_box_17;False;99;False"
    arrStyles(19) = "AUD_tf_box_18;False;99;False"
    arrStyles(20) = "AUD_tf_box_19;False;99;False"
    arrStyles(21) = "AUD_tf_box_20;False;99;False"
    arrStyles(22) = "AUD_tf_box_21;False;99;False"
    arrStyles(23) = "AUD_tf_box_22;False;99;False"
    arrStyles(24) = "AUD_tf_box_23;False;99;False"
    arrStyles(25) = "AUD_tf_box_24;False;99;False"
    arrStyles(26) = "AUD_tf_box_25;False;99;False"
    arrStyles(27) = "CHV_tf_Layouttabelle;True;99;True"
    arrStyles(28) = "CHV_tf_Formel;True;99;True"
    arrStyles(29) = "CHV_tf_Formel_Text;True;99;True"
    arrStyles(30) = "CHV_tf_Bild;True;99;True"
    arrStyles(31) = "CHV_tf_Marginalie;True;99;True"
    arrStyles(32) = "AUD_tf_meta;False;99;False"
    arrStyles(33) = "AUD_tf_special_container_01;False;99;False"
    arrStyles(34) = "AUD_tf_special_container_02;False;99;False"
    arrStyles(35) = "AUD_tf_special_container_03;False;99;False"
    arrStyles(36) = "AUD_tf_special_container_04;False;99;False"
    arrStyles(37) = "AUD_tf_special_container_05;False;99;False"
    arrStyles(38) = "CHV_tf_Tabelle;True;99;True"
    arrStyles(39) = "AUD_tf_table_aux_01;False;99;False"
    arrStyles(40) = "AUD_tf_table_aux_02;False;99;False"
    arrStyles(41) = "AUD_tf_table_aux_03;False;99;False"
    arrStyles(42) = "CHV_lf_Ueberschriften;False;99;True"
    arrStyles(43) = "CHV_lf_Liste_Symbol;False;99;True"
    arrStyles(44) = "CHV_lf_Liste_Nummer;False;99;True"
    arrStyles(45) = "CHV_lf_Liste_alphabetisch;False;99;True"
    arrStyles(46) = "AUD_lf_character_capital;False;99;False"
    arrStyles(47) = "CHV_lf_Liste_roem;False;99;True"
    arrStyles(48) = "CHV_lf_Liste_roem_gross;False;99;True"
    arrStyles(49) = "AUD_lf_unordered;False;99;False"
    arrStyles(50) = "AUD_lf_ordered;False;99;False"
    arrStyles(51) = "AUD_lf_manual;False;99;False"
    arrStyles(52) = "CHV_lf_Liste_Einzug;False;99;True"
    arrStyles(53) = "AUD_lf_temp;False;99;False"
    arrStyles(54) = "CHV_Standard;True;2;True"
    arrStyles(55) = "AUD_bodytext_centre;False;2;False"
    arrStyles(56) = "AUD_bodytext_right;False;2;False"
    arrStyles(57) = "CHV_SUBSUP_tief;True;3;True"
    arrStyles(58) = "AUD_subsub;False;3;False"
    arrStyles(59) = "AUD_subsup;False;3;False"
    arrStyles(60) = "CHV_SUBSUP_hoch;True;3;True"
    arrStyles(61) = "AUD_supsub;False;3;False"
    arrStyles(62) = "AUD_supsup;False;3;False"
    arrStyles(63) = "CHV_AUSZ_1_fett;True;4;True"
    arrStyles(64) = "CHV_AUSZ_1_fett_tief;True;4;True"
    arrStyles(65) = "AUD_emph_bold_subsub;False;4;False"
    arrStyles(66) = "CHV_AUSZ_1_fett_hoch;True;4;True"
    arrStyles(67) = "AUD_emph_bold_supsup;False;4;False"
    arrStyles(68) = "CHV_AUSZ_2_kursiv;True;5;True"
    arrStyles(69) = "CHV_AUSZ_2_kursiv_tief;True;5;True"
    arrStyles(70) = "AUD_emph_italic_subsub;False;5;False"
    arrStyles(71) = "CHV_AUSZ_2_kursiv_hoch;True;5;True"
    arrStyles(72) = "AUD_emph_italic_supsup;False;5;False"
    arrStyles(73) = "CHV_AUSZ_1_fett-kursiv;True;6;True"
    arrStyles(74) = "CHV_AUSZ_1_fett-kursiv_tief;True;6;True"
    arrStyles(75) = "AUD_emph_bolditalic_subsub;False;6;False"
    arrStyles(76) = "CHV_AUSZ_1_fett-kursiv_hoch;True;6;True"
    arrStyles(77) = "AUD_emph_bolditalic_supsup;False;6;False"
    arrStyles(78) = "AUD_emph_caps;False;7;False"
    arrStyles(79) = "AUD_emph_caps_bold;False;7;False"
    arrStyles(80) = "AUD_emph_caps_bolditalic;False;7;False"
    arrStyles(81) = "AUD_emph_caps_italic;False;7;False"
    arrStyles(82) = "CHV_AUSZ_3_Kapitaelchen;True;7;True"
    arrStyles(83) = "CHV_AUSZ_3_Kapitaelchen_fett;True;7;True"
    arrStyles(84) = "CHV_AUSZ_3_Kapitaelchen_fett-kursiv;True;7;True"
    arrStyles(85) = "CHV_AUSZ_3_Kapitaelchen_kursiv;True;7;True"
    arrStyles(86) = "AUD_emph_spaced;False;7;False"
    arrStyles(87) = "AUD_emph_spaced_bold;False;7;False"
    arrStyles(88) = "AUD_emph_spaced_bolditalic;False;7;False"
    arrStyles(89) = "AUD_emph_spaced_italic;False;7;False"
    arrStyles(90) = "AUD_emph_strikethrough;False;7;False"
    arrStyles(91) = "AUD_emph_strikethrough_bold;False;7;False"
    arrStyles(92) = "AUD_emph_strikethrough_bolditalic;False;7;False"
    arrStyles(93) = "AUD_emph_strikethrough_italic;False;7;False"
    arrStyles(94) = "CHV_AUSZ_5_unterstrichen;True;7;True"
    arrStyles(95) = "CHV_AUSZ_5_unterstrichen_fett;True;7;True"
    arrStyles(96) = "AUD_emph_underline_bolditalic;False;7;False"
    arrStyles(97) = "CHV_AUSZ_5_unterstrichen_kursiv;True;7;True"
    arrStyles(98) = "AUD_emph_initial;False;8;False"
    arrStyles(99) = "AUD_emph_regular;False;8;False"
    arrStyles(100) = "AUD_ipa;False;9;False"
    arrStyles(101) = "CHV_CODE_inline;True;10;True"
    arrStyles(102) = "CHV_CODE_inline_fett;True;10;True"
    arrStyles(103) = "CHV_CODE_inline_kursiv;True;10;True"
    arrStyles(104) = "CHV_AUSZ_6_gerahmt;True;10;True"
    arrStyles(105) = "CHV_AUSZ_6_gerahmt_fett;True;10;True"
    arrStyles(106) = "CHV_AUSZ_6_gerahmt_kursiv;True;10;True"
    arrStyles(107) = "CHV_AUSZ_7_hinterlegt;True;10;True"
    arrStyles(108) = "CHV_AUSZ_7_hinterlegt_fett;True;10;True"
    arrStyles(109) = "CHV_AUSZ_7_hinterlegt_kursiv;True;10;True"
    arrStyles(110) = "CHV_AUSZ_8_rot;True;10;True"
    arrStyles(111) = "CHV_AUSZ_8_rot_fett;True;10;True"
    arrStyles(112) = "CHV_AUSZ_8_rot_kursiv;True;10;True"
    arrStyles(113) = "CHV_AUSZ_8_blau;True;10;True"
    arrStyles(114) = "CHV_AUSZ_8_blau_fett;True;10;True"
    arrStyles(115) = "CHV_AUSZ_8_blau_kursiv;True;10;True"
    arrStyles(116) = "CHV_AUSZ_8_gruen;True;10;True"
    arrStyles(117) = "CHV_AUSZ_8_gruen_fett;True;10;True"
    arrStyles(118) = "CHV_AUSZ_8_gruen_kursiv;True;10;True"
    arrStyles(119) = "CHV_AUSZ_8_orange;True;10;True"
    arrStyles(120) = "CHV_AUSZ_8_orange_fett;True;10;True"
    arrStyles(121) = "CHV_AUSZ_8_orange_kursiv;True;10;True"
    arrStyles(122) = "CHV_AUSZ_4_fett-grau;True;10;True"
    arrStyles(123) = "CHV_AUSZ_4_fett-grau_hoch;True;10;True"
    arrStyles(124) = "CHV_AUSZ_4_fett-grau_tief;True;10;True"
    arrStyles(125) = "AUD_aux_char_25;False;10;False"
    arrStyles(126) = "AUD_aux_char_26;False;10;False"
    arrStyles(127) = "AUD_aux_char_27;False;10;False"
    arrStyles(128) = "AUD_aux_char_28;False;10;False"
    arrStyles(129) = "AUD_aux_char_29;False;10;False"
    arrStyles(130) = "AUD_aux_char_30;False;10;False"
    arrStyles(131) = "CHV_CODE_display_num;True;11;True"
    arrStyles(132) = "AUD_aux_para_02;False;11;False"
    arrStyles(133) = "AUD_aux_para_03;False;11;False"
    arrStyles(134) = "AUD_aux_para_04;False;11;False"
    arrStyles(135) = "AUD_aux_para_05;False;11;False"
    arrStyles(136) = "AUD_aux_para_06;False;11;False"
    arrStyles(137) = "AUD_aux_para_07;False;11;False"
    arrStyles(138) = "AUD_aux_para_08;False;11;False"
    arrStyles(139) = "AUD_aux_para_09;False;11;False"
    arrStyles(140) = "AUD_aux_para_10;False;11;False"
    arrStyles(141) = "CHV_Standard_Einzug;True;11;True"
    arrStyles(142) = "CHV_MATH_Legende;True;11;True"
    arrStyles(143) = "AUD_aux_para_13;False;11;False"
    arrStyles(144) = "AUD_aux_para_14;False;11;False"
    arrStyles(145) = "AUD_aux_para_15;False;11;False"
    arrStyles(146) = "AUD_aux_para_16;False;11;False"
    arrStyles(147) = "AUD_aux_para_17;False;11;False"
    arrStyles(148) = "AUD_aux_para_18;False;11;False"
    arrStyles(149) = "AUD_aux_para_19;False;11;False"
    arrStyles(150) = "AUD_aux_para_20;False;11;False"
    arrStyles(151) = "AUD_aux_para_21;False;11;False"
    arrStyles(152) = "AUD_aux_para_22;False;11;False"
    arrStyles(153) = "AUD_aux_para_23;False;11;False"
    arrStyles(154) = "AUD_aux_para_24;False;11;False"
    arrStyles(155) = "AUD_aux_para_25;False;11;False"
    arrStyles(156) = "AUD_aux_para_26;False;11;False"
    arrStyles(157) = "AUD_aux_para_27;False;11;False"
    arrStyles(158) = "AUD_aux_para_28;False;11;False"
    arrStyles(159) = "AUD_aux_para_29;False;11;False"
    arrStyles(160) = "AUD_aux_para_30;False;11;False"
    arrStyles(161) = "CHV_Autor;True;12;True"
    arrStyles(162) = "CHV_U_Teil;False;12;True"
    arrStyles(163) = "AUD_parttitle_sub;False;12;False"
    arrStyles(164) = "AUD_parttitle_sub_sub;False;12;False"
    arrStyles(165) = "CHV_U1;True;13;True"
    arrStyles(166) = "CHV_U2;True;14;True"
    arrStyles(167) = "CHV_U3;True;15;True"
    arrStyles(168) = "CHV_U4;True;16;True"
    arrStyles(169) = "CHV_U5;True;17;True"
    arrStyles(170) = "CHV_U6;True;18;True"
    arrStyles(171) = "AUD_h7;False;19;False"
    arrStyles(172) = "AUD_h8;False;20;False"
    arrStyles(173) = "AUD_h9;False;21;False"
    arrStyles(174) = "AUD_h1_nonum;False;22;False"
    arrStyles(175) = "AUD_h2_nonum;False;23;False"
    arrStyles(176) = "AUD_h3_nonum;False;24;False"
    arrStyles(177) = "AUD_h4_nonum;False;25;False"
    arrStyles(178) = "AUD_h5_nonum;False;26;False"
    arrStyles(179) = "AUD_h6_nonum;False;27;False"
    arrStyles(180) = "AUD_h7_nonum;False;28;False"
    arrStyles(181) = "AUD_h8_nonum;False;29;False"
    arrStyles(182) = "AUD_h9_nonum;False;30;False"
    arrStyles(183) = "AUD_h1_sub;False;31;False"
    arrStyles(184) = "AUD_h2_sub;False;31;False"
    arrStyles(185) = "CHV_Spitzmarke;False;31;True"
    arrStyles(186) = "CHV_U_ZwiTi;True;31;True"
    arrStyles(187) = "CHV_LISTE_1;True;32;True"
    arrStyles(188) = "CHV_LISTE_2;True;33;True"
    arrStyles(189) = "CHV_LISTE_3;True;34;True"
    arrStyles(190) = "CHV_LISTE_num_1;True;35;True"
    arrStyles(191) = "AUD_list_02_numeric;False;36;False"
    arrStyles(192) = "AUD_list_03_numeric;False;37;False"
    arrStyles(193) = "CHV_LISTE_num_a;True;38;True"
    arrStyles(194) = "CHV_LISTE_num_aa;True;39;True"
    arrStyles(195) = "AUD_list_03_character;False;40;False"
    arrStyles(196) = "AUD_list_01_character_capital;False;41;False"
    arrStyles(197) = "AUD_list_02_character_capital;False;42;False"
    arrStyles(198) = "AUD_list_03_character_capital;False;43;False"
    arrStyles(199) = "AUD_list_03_character_capital;False;44;False"
    arrStyles(200) = "AUD_list_02_roman;False;45;False"
    arrStyles(201) = "CHV_LISTE_roem_iii;True;46;True"
    arrStyles(202) = "CHV_LISTE_roem_I;True;47;True"
    arrStyles(203) = "AUD_list_02_roman_capital;False;48;False"
    arrStyles(204) = "AUD_list_03_roman_capital;False;49;False"
    arrStyles(205) = "AUD_list_01_unordered;False;50;False"
    arrStyles(206) = "AUD_list_02_unordered;False;51;False"
    arrStyles(207) = "AUD_list_03_unordered;False;52;False"
    arrStyles(208) = "AUD_list_04_unordered;False;53;False"
    arrStyles(209) = "AUD_list_05_unordered;False;54;False"
    arrStyles(210) = "AUD_list_06_unordered;False;55;False"
    arrStyles(211) = "AUD_list_07_unordered;False;56;False"
    arrStyles(212) = "AUD_list_08_unordered;False;57;False"
    arrStyles(213) = "AUD_list_09_unordered;False;58;False"
    arrStyles(214) = "AUD_list_01_ordered;False;59;False"
    arrStyles(215) = "AUD_list_02_ordered;False;60;False"
    arrStyles(216) = "AUD_list_03_ordered;False;61;False"
    arrStyles(217) = "AUD_list_04_ordered;False;62;False"
    arrStyles(218) = "AUD_list_05_ordered;False;63;False"
    arrStyles(219) = "AUD_list_06_ordered;False;64;False"
    arrStyles(220) = "AUD_list_07_ordered;False;65;False"
    arrStyles(221) = "AUD_list_08_ordered;False;66;False"
    arrStyles(222) = "AUD_list_09_ordered;False;67;False"
    arrStyles(223) = "AUD_list_01_manual;False;68;False"
    arrStyles(224) = "AUD_list_02_manual;False;69;False"
    arrStyles(225) = "AUD_list_03_manual;False;70;False"
    arrStyles(226) = "AUD_list_04_manual;False;71;False"
    arrStyles(227) = "AUD_list_05_manual;False;72;False"
    arrStyles(228) = "AUD_list_06_manual;False;73;False"
    arrStyles(229) = "AUD_list_07_manual;False;74;False"
    arrStyles(230) = "AUD_list_08_manual;False;75;False"
    arrStyles(231) = "AUD_list_09_manual;False;76;False"
    arrStyles(232) = "CHV_LISTE_Einzug_1;True;77;True"
    arrStyles(233) = "CHV_LISTE_Einzug_2;True;78;True"
    arrStyles(234) = "CHV_LISTE_Einzug_3;True;79;True"
    arrStyles(235) = "AUD_list_04_blank;False;80;False"
    arrStyles(236) = "AUD_list_05_blank;False;81;False"
    arrStyles(237) = "AUD_list_06_blank;False;82;False"
    arrStyles(238) = "AUD_list_07_blank;False;83;False"
    arrStyles(239) = "AUD_list_08_blank;False;84;False"
    arrStyles(240) = "AUD_list_09_blank;False;85;False"
    arrStyles(241) = "AUD_list_01_temp;False;86;False"
    arrStyles(242) = "AUD_list_02_temp;False;86;False"
    arrStyles(243) = "AUD_list_03_temp;False;86;False"
    arrStyles(244) = "AUD_list_04_temp;False;86;False"
    arrStyles(245) = "AUD_list_05_temp;False;86;False"
    arrStyles(246) = "AUD_list_06_temp;False;86;False"
    arrStyles(247) = "AUD_list_07_temp;False;86;False"
    arrStyles(248) = "AUD_list_08_temp;False;86;False"
    arrStyles(249) = "AUD_list_09_temp;False;86;False"
    arrStyles(250) = "AUD_list_continue_marker;False;86;False"
    arrStyles(251) = "AUD_list_label_manual;False;86;False"
    arrStyles(252) = "AUD_box_footnote;False;87;False"
    arrStyles(253) = "CHV_KASTEN_U1;True;87;True"
    arrStyles(254) = "CHV_KASTEN_U2;True;87;True"
    arrStyles(255) = "AUD_box_h3;False;87;False"
    arrStyles(256) = "AUD_box_h4;False;87;False"
    arrStyles(257) = "AUD_box_h5;False;87;False"
    arrStyles(258) = "AUD_box_h6;False;87;False"
    arrStyles(259) = "AUD_box_h7;False;87;False"
    arrStyles(260) = "AUD_box_h8;False;87;False"
    arrStyles(261) = "AUD_box_h9;False;87;False"
    arrStyles(262) = "CHV_KASTEN_Legende;True;87;True"
    arrStyles(263) = "AUD_table_alignment;False;88;False"
    arrStyles(264) = "CHV_TAB_Ueberschrift;True;88;True"
    arrStyles(265) = "CHV_TAB_Ueberschrift_Fortsetzung;True;88;True"
    arrStyles(266) = "CHV_TAB_Legende;True;88;True"
    arrStyles(267) = "CHV_TAB_Kopf;True;88;True"
    arrStyles(268) = "CHV_TAB_Zwischentitel;True;88;True"
    arrStyles(269) = "AUD_table_head_03;False;88;False"
    arrStyles(270) = "AUD_table_wanted_break;False;88;False"
    arrStyles(271) = "CHV_ABB_Unterschrift;True;89;True"
    arrStyles(272) = "CHV_ABB_Legende;True;89;True"
    arrStyles(273) = "CHV_ABB;True;89;True"
    arrStyles(274) = "AUD_figure_inline;False;89;False"
    arrStyles(275) = "AUD_figure_scale;False;89;False"
    arrStyles(276) = "AUD_icon;False;89;False"
    arrStyles(277) = "CHV_MATH_Formelzahl;True;90;True"
    arrStyles(278) = "CHV_MATH;True;90;True"
    arrStyles(279) = "AUD_equation_inline;False;90;False"
    arrStyles(280) = "CHV_MATH_Text;True;90;True"
    arrStyles(281) = "CHV_LIT_Text;True;91;True"
    arrStyles(282) = "AUD_bibref_first_name;False;91;False"
    arrStyles(283) = "CHV_LIT_Ueberschrift;True;91;True"
    arrStyles(284) = "AUD_bibref_journal_number;False;91;False"
    arrStyles(285) = "AUD_bibref_last_accessed_on;False;91;False"
    arrStyles(286) = "AUD_bibref_last_name;False;91;False"
    arrStyles(287) = "AUD_bibref_last_update_copyright;False;91;False"
    arrStyles(288) = "AUD_bibref_location;False;91;False"
    arrStyles(289) = "AUD_bibref_page;False;91;False"
    arrStyles(290) = "AUD_bibref_publisher;False;91;False"
    arrStyles(291) = "AUD_bibref_subtitle;False;91;False"
    arrStyles(292) = "AUD_bibref_title;False;91;False"
    arrStyles(293) = "AUD_bibref_url;False;91;False"
    arrStyles(294) = "AUD_bibref_volume;False;91;False"
    arrStyles(295) = "AUD_bibref_year;False;91;False"
    arrStyles(296) = "CHV_Inhaltliches_zu_klaeren;False;92;True"
    arrStyles(297) = "CHV_Formatierung_zu_klaeren;False;92;True"
    arrStyles(298) = "AUD_comment_para_01;False;92;False"
    arrStyles(299) = "AUD_comment_para_02;False;92;False"
    arrStyles(300) = "CHV_Zitat;True;93;True"
    arrStyles(301) = "CHV_Zitat_Autor;True;93;True"
    arrStyles(302) = "AUD_quotation_01_inline;False;93;False"
    arrStyles(303) = "AUD_quotation_01_inline_author;False;93;False"
    arrStyles(304) = "AUD_quotation_02;False;93;False"
    arrStyles(305) = "AUD_quotation_02_author;False;93;False"
    arrStyles(306) = "AUD_quotation_02_inline;False;93;False"
    arrStyles(307) = "AUD_quotation_02_inline_author;False;93;False"
    arrStyles(308) = "AUD_endnote;False;94;False"
    arrStyles(309) = "AUD_endnote_label;False;94;False"
    arrStyles(310) = "CHV_Fussnote;True;94;True"
    arrStyles(311) = "CHV_Fussnote_Zeichen;True;94;True"
    arrStyles(312) = "AUD_footnote_label_manual;False;94;False"
    arrStyles(313) = "AUD_marginal_note;False;94;False"
    arrStyles(314) = "AUD_marginal_note_anchor;False;94;False"
    arrStyles(315) = "AUD_marginal_number;False;94;False"
    arrStyles(316) = "AUD_meta_copyright;False;94;False"
    arrStyles(317) = "AUD_meta_inline;False;94;False"
    arrStyles(318) = "AUD_meta_para;False;94;False"
    arrStyles(319) = "AUD_meta_sid;False;94;False"
    arrStyles(320) = "CHV_VERWEIS_Kapitel;False;95;True"
    arrStyles(321) = "CHV_VERWEIS_Listing;False;95;True"
    arrStyles(322) = "AUD_crossref_critical;False;95;False"
    arrStyles(323) = "CHV_VERWEIS_Formel;False;95;True"
    arrStyles(324) = "CHV_VERWEIS_Bild;False;95;True"
    arrStyles(325) = "CHV_VERWEIS;False;95;True"
    arrStyles(326) = "AUD_crossref_marginal_number;False;95;False"
    arrStyles(327) = "AUD_crossref_page;False;95;False"
    arrStyles(328) = "CHV_VERWEIS_Tabelle;False;95;True"
    arrStyles(329) = "CHV_CODE_Ueberschrift;True;96;True"
    arrStyles(330) = "CHV_CODE_display;True;96;True"
    arrStyles(331) = "AUD_code_inline;False;96;False"
    arrStyles(332) = "CHV_web_email;True;96;True"
    arrStyles(333) = "CHV_web_URL;True;96;True"
    arrStyles(334) = "AUD_columnbreak;False;97;False"
    arrStyles(335) = "AUD_pagebreak;False;97;False"
    arrStyles(336) = "AUD_wanted_empty_para;False;97;False"
    arrStyles(337) = "AUD_wanted_empty_para_2;False;97;False"
    arrStyles(338) = "CHV_bewusste_Leerzeile_nach_Marginalie;True;97;True"
    arrStyles(339) = "CHV_bewusste_Leerzeile_nach_Tabelle;True;97;True"
    arrStyles(340) = "AUD_fm_aux_bodytext;False;98;False"
    arrStyles(341) = "AUD_fm_aux_head;False;98;False"
    arrStyles(342) = "AUD_fm_dedication;False;98;False"
    arrStyles(343) = "AUD_fm_dedication_author;False;98;False"
    arrStyles(344) = "AUD_fm_ht_authors;False;98;False"
    arrStyles(345) = "AUD_fm_ht_title;False;98;False"
    arrStyles(346) = "AUD_fm_ht_title_sub;False;98;False"
    arrStyles(347) = "AUD_fm_ht_title_sub_sub;False;98;False"
    arrStyles(348) = "AUD_fm_imprint_bodytext;False;98;False"
    arrStyles(349) = "AUD_fm_imprint_head;False;98;False"
    arrStyles(350) = "AUD_fm_mt_authors;False;98;False"
    arrStyles(351) = "AUD_fm_mt_bodytext;False;98;False"
    arrStyles(352) = "AUD_fm_mt_publisher;False;98;False"
    arrStyles(353) = "AUD_fm_mt_title;False;98;False"
    arrStyles(354) = "AUD_fm_mt_title_sub;False;98;False"
    arrStyles(355) = "AUD_fm_mt_title_sub_sub;False;98;False"
    arrStyles(356) = "AUD_preface_01;False;98;False"
    arrStyles(357) = "AUD_preface_02;False;98;False"
    arrStyles(358) = "AUD_toc_author_char;False;98;False"
    arrStyles(359) = "AUD_toc_author_para;False;98;False"
    arrStyles(360) = "AUD_toc_aux;False;98;False"
    arrStyles(361) = "AUD_toc_h1;False;98;False"
    arrStyles(362) = "AUD_toc_h2;False;98;False"
    arrStyles(363) = "AUD_toc_h3;False;98;False"
    arrStyles(364) = "AUD_toc_h4;False;98;False"
    arrStyles(365) = "AUD_toc_h5;False;98;False"
    arrStyles(366) = "AUD_toc_h6;False;98;False"
    arrStyles(367) = "AUD_toc_h7;False;98;False"
    arrStyles(368) = "AUD_toc_h8;False;98;False"
    arrStyles(369) = "AUD_toc_h9;False;98;False"
    arrStyles(370) = "AUD_toc_head;False;98;False"
    arrStyles(371) = "AUD_toc_locator;False;98;False"
    arrStyles(372) = "AUD_toc_number;False;98;False"
    arrStyles(373) = "AUD_toc_parttitle;False;98;False"
    arrStyles(374) = "AUD_toc_parttitle_sub;False;98;False"
    arrStyles(375) = "AUD_toc_parttitle_sub_sub;False;98;False"
    arrStyles(376) = "AUD_xe_head_01;False;98;False"
    arrStyles(377) = "AUD_xe_head_02;False;98;False"
    arrStyles(378) = "AUD_xe_main;False;98;False"
    arrStyles(379) = "AUD_xe_sub1;False;98;False"
    arrStyles(380) = "AUD_xe_sub2;False;98;False"
    arrStyles(381) = "AUD_xe_sub3;False;98;False"
    arrStyles(382) = "AUD_xe_sub4;False;98;False"
    arrStyles(383) = "AUD_xe_sub5;False;98;False"
    StyleOrder = arrStyles
End Function

Function SmartIdExceptionStyles() As Variant
    Dim arrStyles(55) As String
    arrStyles(0) = "AUD_list_continue_marker"
    arrStyles(1) = "AUD_table_wanted_break"
    arrStyles(2) = "CHV_ABB"
    arrStyles(3) = "CHV_MATH"
    arrStyles(4) = "CHV_MATH_Text"
    arrStyles(5) = "AUD_comment_para_01"
    arrStyles(6) = "AUD_comment_para_02"
    arrStyles(7) = "AUD_marginal_number"
    arrStyles(8) = "AUD_meta_para"
    arrStyles(9) = "AUD_columnbreak"
    arrStyles(10) = "AUD_pagebreak"
    arrStyles(11) = "AUD_wanted_empty_para"
    arrStyles(12) = "AUD_wanted_empty_para_2"
    arrStyles(13) = "CHV_bewusste_Leerzeile_nach_Marginalie"
    arrStyles(14) = "CHV_bewusste_Leerzeile_nach_Tabelle"
    arrStyles(15) = "AUD_fm_aux_bodytext"
    arrStyles(16) = "AUD_fm_aux_head"
    arrStyles(17) = "AUD_fm_dedication"
    arrStyles(18) = "AUD_fm_dedication_author"
    arrStyles(19) = "AUD_fm_ht_authors"
    arrStyles(20) = "AUD_fm_ht_title"
    arrStyles(21) = "AUD_fm_ht_title_sub"
    arrStyles(22) = "AUD_fm_ht_title_sub_sub"
    arrStyles(23) = "AUD_fm_imprint_bodytext"
    arrStyles(24) = "AUD_fm_imprint_head"
    arrStyles(25) = "AUD_fm_mt_authors"
    arrStyles(26) = "AUD_fm_mt_bodytext"
    arrStyles(27) = "AUD_fm_mt_publisher"
    arrStyles(28) = "AUD_fm_mt_title"
    arrStyles(29) = "AUD_fm_mt_title_sub"
    arrStyles(30) = "AUD_fm_mt_title_sub_sub"
    arrStyles(31) = "AUD_preface_01"
    arrStyles(32) = "AUD_preface_02"
    arrStyles(33) = "AUD_toc_author_para"
    arrStyles(34) = "AUD_toc_aux"
    arrStyles(35) = "AUD_toc_h1"
    arrStyles(36) = "AUD_toc_h2"
    arrStyles(37) = "AUD_toc_h3"
    arrStyles(38) = "AUD_toc_h4"
    arrStyles(39) = "AUD_toc_h5"
    arrStyles(40) = "AUD_toc_h6"
    arrStyles(41) = "AUD_toc_h7"
    arrStyles(42) = "AUD_toc_h8"
    arrStyles(43) = "AUD_toc_h9"
    arrStyles(44) = "AUD_toc_head"
    arrStyles(45) = "AUD_toc_parttitle"
    arrStyles(46) = "AUD_toc_parttitle_sub"
    arrStyles(47) = "AUD_toc_parttitle_sub_sub"
    arrStyles(48) = "AUD_xe_head_01"
    arrStyles(49) = "AUD_xe_head_02"
    arrStyles(50) = "AUD_xe_main"
    arrStyles(51) = "AUD_xe_sub1"
    arrStyles(52) = "AUD_xe_sub2"
    arrStyles(53) = "AUD_xe_sub3"
    arrStyles(54) = "AUD_xe_sub4"
    arrStyles(55) = "AUD_xe_sub5"
    SmartIdExceptionStyles = arrStyles
End Function

Function StyleProperties() As Variant
    Dim arrStyleProperties(154) As String
    arrStyleProperties(0) = "AUD_basestyle:FN#Calibri|fffd|FS#11|fffd|PLSR#3|fffd|PLSP#12<>FN#Calibri|fffd|FS#11|fffd|PLSR#3|fffd|PLSP#12<>FN#Calibri|fffd|FS#14|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(1) = "AUD_basestyle_list:PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(2) = "CHV_lf_Liste_Symbol:LLFC#13929812<>LLFC#4210752<>LLFC#13929812"
    arrStyleProperties(3) = "CHV_lf_Liste_Nummer:LLFC#13929812<>LLFC#4210752<>LLFC#13929812"
    arrStyleProperties(4) = "CHV_lf_Liste_alphabetisch:LLFC#13929812<>LLFC#4210752<>LLFC#13929812"
    arrStyleProperties(5) = "AUD_lf_character_capital:LLFC#13929812<>LLFC#4210752<>LLFC#13929812"
    arrStyleProperties(6) = "CHV_lf_Liste_roem:LLFC#13929812<>LLFC#4210752<>LLFC#13929812"
    arrStyleProperties(7) = "CHV_lf_Liste_roem_gross:LLFC#13929812<>LLFC#4210752<>LLFC#13929812"
    arrStyleProperties(8) = "AUD_lf_unordered:LLFC#13929812<>LLFC#4210752<>LLFC#13929812"
    arrStyleProperties(9) = "AUD_lf_ordered:LLFC#13929812<>LLFC#4210752<>LLFC#13929812"
    arrStyleProperties(10) = "AUD_lf_temp:LLFC#13929812<>LLFC#4210752<>LLFC#13929812"
    arrStyleProperties(11) = "CHV_Standard:PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(12) = "AUD_emph_initial:FS#16<>FS#16<>FS#14"
    arrStyleProperties(13) = "CHV_CODE_inline:SC#-704577639<>SC#-603914241<>SC#-704577639"
    arrStyleProperties(14) = "CHV_CODE_inline_fett:SC#-704577639<>SC#-603914241<>SC#-704577639"
    arrStyleProperties(15) = "CHV_CODE_inline_kursiv:SC#-704577639<>SC#-603914241<>SC#-704577639"
    arrStyleProperties(16) = "CHV_AUSZ_6_gerahmt:SC#65535<>SC#-603914241<>SC#65535"
    arrStyleProperties(17) = "CHV_AUSZ_6_gerahmt_fett:SC#65535<>SC#-603914241<>SC#65535"
    arrStyleProperties(18) = "CHV_AUSZ_6_gerahmt_kursiv:SC#65535<>SC#-603914241<>SC#65535"
    arrStyleProperties(19) = "CHV_AUSZ_7_hinterlegt:SC#16776960<>SC#-603914241<>SC#16776960"
    arrStyleProperties(20) = "CHV_AUSZ_7_hinterlegt_fett:SC#16776960<>SC#-603914241<>SC#16776960"
    arrStyleProperties(21) = "CHV_AUSZ_7_hinterlegt_kursiv:SC#16776960<>SC#-603914241<>SC#16776960"
    arrStyleProperties(22) = "CHV_AUSZ_8_rot:SC#-16777216<>SC#-603914241<>SC#-16777216"
    arrStyleProperties(23) = "CHV_AUSZ_8_rot_fett:SC#-16777216<>SC#-603914241<>SC#-16777216"
    arrStyleProperties(24) = "CHV_AUSZ_8_rot_kursiv:SC#-16777216<>SC#-603914241<>SC#-16777216"
    arrStyleProperties(25) = "CHV_AUSZ_8_blau:SC#-16777216<>SC#-603914241<>SC#-16777216"
    arrStyleProperties(26) = "CHV_AUSZ_8_blau_fett:SC#-16777216<>SC#-603914241<>SC#-16777216"
    arrStyleProperties(27) = "CHV_AUSZ_8_blau_kursiv:SC#-16777216<>SC#-603914241<>SC#-16777216"
    arrStyleProperties(28) = "CHV_AUSZ_8_gruen:SC#-16777216<>SC#-603914241<>SC#-16777216"
    arrStyleProperties(29) = "CHV_AUSZ_8_gruen_fett:SC#-16777216<>SC#-603914241<>SC#-16777216"
    arrStyleProperties(30) = "CHV_AUSZ_8_gruen_kursiv:SC#-16777216<>SC#-603914241<>SC#-16777216"
    arrStyleProperties(31) = "CHV_AUSZ_8_orange:SC#-16777216<>SC#-603914241<>SC#-16777216"
    arrStyleProperties(32) = "CHV_AUSZ_8_orange_fett:SC#-16777216<>SC#-603914241<>SC#-16777216"
    arrStyleProperties(33) = "CHV_AUSZ_8_orange_kursiv:SC#-16777216<>SC#-603914241<>SC#-16777216"
    arrStyleProperties(34) = "CHV_AUSZ_4_fett-grau:FC#-603947009|fffd|FB#-1|fffd|SC#-16777216|fffd|BC#-16777216|fffd|BS#0<>FC#-603947009|fffd|FB#-1|fffd|SC#-16777216|fffd|BC#-16777216|fffd|BS#0<>FC#-603947009|fffd|FB#-1|fffd|SC#-16777216|fffd|BC#-16777216|fffd|BS#0"
    arrStyleProperties(35) = "CHV_AUSZ_4_fett-grau_hoch:FC#-603947009|fffd|FB#-1|fffd|FSUP#-1|fffd|SC#-16777216|fffd|BC#-16777216|fffd|BS#0<>FC#-603947009|fffd|FB#-1|fffd|FSUP#-1|fffd|SC#-16777216|fffd|BC#-16777216|fffd|BS#0<>FC#-603947009|fffd|FB#-1|fffd|FSUP#-1|fffd|SC#-16777216|fffd|BC#-16777216|fffd|BS#0"
    arrStyleProperties(36) = "CHV_AUSZ_4_fett-grau_tief:FC#-603947009|fffd|FB#-1|fffd|FSUB#-1|fffd|SC#-16777216|fffd|BC#-16777216|fffd|BS#0<>FC#-603947009|fffd|FB#-1|fffd|FSUB#-1|fffd|SC#-16777216|fffd|BC#-16777216|fffd|BS#0<>FC#-603947009|fffd|FB#-1|fffd|FSUB#-1|fffd|SC#-16777216|fffd|BC#-16777216|fffd|BS#0"
    arrStyleProperties(37) = "AUD_aux_char_25:SC#13083058<>SC#-603914241<>SC#13083058"
    arrStyleProperties(38) = "AUD_aux_char_26:SC#9737689<>SC#-603914241<>SC#9737689"
    arrStyleProperties(39) = "AUD_aux_char_27:SC#10213058<>SC#-603914241<>SC#10213058"
    arrStyleProperties(40) = "AUD_aux_char_28:SC#9420794<>SC#-603914241<>SC#9420794"
    arrStyleProperties(41) = "AUD_aux_char_29:SC#6750207<>SC#-603914241<>SC#6750207"
    arrStyleProperties(42) = "AUD_aux_char_30:SC#13083058<>SC#-603914241<>SC#13083058"
    arrStyleProperties(43) = "CHV_CODE_display_num:SC#-704577639|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#-704577639"
    arrStyleProperties(44) = "AUD_aux_para_02:SC#12379094|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#12379094"
    arrStyleProperties(45) = "AUD_aux_para_03:SC#11851003|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#11851003"
    arrStyleProperties(46) = "AUD_aux_para_04:SC#10092543|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#10092543"
    arrStyleProperties(47) = "AUD_aux_para_05:SC#14270668|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#14270668"
    arrStyleProperties(48) = "AUD_aux_para_06:SC#12040421|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#12040421"
    arrStyleProperties(49) = "AUD_aux_para_07:SC#12379094|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#12379094"
    arrStyleProperties(50) = "AUD_aux_para_08:SC#11851003|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#11851003"
    arrStyleProperties(51) = "AUD_aux_para_09:SC#10092543|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#10092543"
    arrStyleProperties(52) = "AUD_aux_para_10:SC#14270668|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#14270668"
    arrStyleProperties(53) = "CHV_Standard_Einzug:SC#-16777216|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#-16777216"
    arrStyleProperties(54) = "CHV_MATH_Legende:SC#-738132173|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#-738132173"
    arrStyleProperties(55) = "AUD_aux_para_13:SC#11851003|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#11851003"
    arrStyleProperties(56) = "AUD_aux_para_14:SC#10092543|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#10092543"
    arrStyleProperties(57) = "AUD_aux_para_15:SC#14270668|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#14270668"
    arrStyleProperties(58) = "AUD_aux_para_16:SC#12040421|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#12040421"
    arrStyleProperties(59) = "AUD_aux_para_17:SC#12379094|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#12379094"
    arrStyleProperties(60) = "AUD_aux_para_18:SC#11851003|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#11851003"
    arrStyleProperties(61) = "AUD_aux_para_19:SC#10092543|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#10092543"
    arrStyleProperties(62) = "AUD_aux_para_20:SC#14270668|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#14270668"
    arrStyleProperties(63) = "AUD_aux_para_21:SC#12040421|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#12040421"
    arrStyleProperties(64) = "AUD_aux_para_22:SC#12379094|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#12379094"
    arrStyleProperties(65) = "AUD_aux_para_23:SC#11851003|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#11851003"
    arrStyleProperties(66) = "AUD_aux_para_24:SC#10092543|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#10092543"
    arrStyleProperties(67) = "AUD_aux_para_25:SC#14270668|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#14270668"
    arrStyleProperties(68) = "AUD_aux_para_26:SC#12040421|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#12040421"
    arrStyleProperties(69) = "AUD_aux_para_27:SC#12379094|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#12379094"
    arrStyleProperties(70) = "AUD_aux_para_28:SC#11851003|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#11851003"
    arrStyleProperties(71) = "AUD_aux_para_29:SC#10092543|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#10092543"
    arrStyleProperties(72) = "AUD_aux_para_30:SC#14270668|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>SC#-603914241|fffd|PSB#0|fffd|PSA#9|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#14270668"
    arrStyleProperties(73) = "CHV_U_Teil:FS#32|fffd|PBB#-1<>FS#32|fffd|PBB#-1<>FS#14|fffd|PBB#0"
    arrStyleProperties(74) = "AUD_parttitle_sub:FS#24|fffd|PBB#0<>FS#24|fffd|PBB#0<>FS#14|fffd|PBB#0"
    arrStyleProperties(75) = "AUD_parttitle_sub_sub:FS#20|fffd|PBB#0<>FS#20|fffd|PBB#0<>FS#14|fffd|PBB#0"
    arrStyleProperties(76) = "CHV_U1:FS#21|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#-1<>FS#21|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#-1<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(77) = "CHV_U2:FS#19|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12|fffd|PBB#0<>FS#19|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12|fffd|PBB#0<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(78) = "CHV_U3:FS#17|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12|fffd|PBB#0<>FS#17|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12|fffd|PBB#0<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(79) = "CHV_U4:FS#15|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12|fffd|PBB#0<>FS#15|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12|fffd|PBB#0<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(80) = "CHV_U5:FS#13|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12|fffd|PBB#0<>FS#13|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12|fffd|PBB#0<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(81) = "CHV_U6:FS#12|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12|fffd|PBB#0<>FS#12|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12|fffd|PBB#0<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(82) = "AUD_h7:FS#11|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#11|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(83) = "AUD_h8:FS#11|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#11|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(84) = "AUD_h9:FS#11|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#11|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(85) = "AUD_h1_nonum:FS#21|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#-1<>FS#21|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#-1<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(86) = "AUD_h2_nonum:FS#19|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#19|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(87) = "AUD_h3_nonum:FS#17|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#17|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(88) = "AUD_h4_nonum:FS#15|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#15|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(89) = "AUD_h5_nonum:FS#13|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#13|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(90) = "AUD_h6_nonum:FS#12|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#12|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(91) = "AUD_h7_nonum:FS#11|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#11|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(92) = "AUD_h8_nonum:FS#11|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#11|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(93) = "AUD_h9_nonum:FS#11|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#11|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#0|fffd|PLSP#12|fffd|PBB#0<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(94) = "AUD_h1_sub:FS#13<>FS#13<>FS#14"
    arrStyleProperties(95) = "AUD_h2_sub:FS#12<>FS#12<>FS#14"
    arrStyleProperties(96) = "CHV_Spitzmarke:FC#-570359809|fffd|SC#-553582721<>FC#-16777216|fffd|SC#15790320<>FC#-570359809|fffd|SC#-553582721"
    arrStyleProperties(97) = "AUD_list_continue_marker:SC#15783875|fffd|BCTLR#13929812|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#0|fffd|PLSP#12<>SC#12632256|fffd|BCTLR#8421504|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#0|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|SC#15783875|fffd|BCTLR#13929812"
    arrStyleProperties(98) = "AUD_box_footnote:FS#8<>FS#8<>FS#14"
    arrStyleProperties(99) = "CHV_KASTEN_U1:FS#13|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>FS#13|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(100) = "CHV_KASTEN_U2:FS#12<>FS#12<>FS#14"
    arrStyleProperties(101) = "AUD_box_h3:FS#11<>FS#11<>FS#14"
    arrStyleProperties(102) = "AUD_box_h4:FS#11<>FS#11<>FS#14"
    arrStyleProperties(103) = "AUD_box_h5:FS#11<>FS#11<>FS#14"
    arrStyleProperties(104) = "AUD_box_h6:FS#11<>FS#11<>FS#14"
    arrStyleProperties(105) = "AUD_box_h7:FS#11<>FS#11<>FS#14"
    arrStyleProperties(106) = "AUD_box_h8:FS#11<>FS#11<>FS#14"
    arrStyleProperties(107) = "AUD_box_h9:FS#11<>FS#11<>FS#14"
    arrStyleProperties(108) = "CHV_KASTEN_Legende:FS#9|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>FS#9|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(109) = "CHV_TAB_Ueberschrift:PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#11<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#11<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(110) = "CHV_TAB_Legende:FS#8,5|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#10<>FS#8,5|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#10<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(111) = "CHV_TAB_Kopf:FS#12<>FS#12<>FS#14"
    arrStyleProperties(112) = "CHV_TAB_Zwischentitel:FS#11<>FS#11<>FS#14"
    arrStyleProperties(113) = "CHV_LIT_Ueberschrift:PSB#3|fffd|PSA#0|fffd|PLSR#4|fffd|PLSP#14<>PSB#3|fffd|PSA#0|fffd|PLSR#4|fffd|PLSP#14<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(114) = "CHV_Zitat_Autor:PSB#3|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#12<>PSB#3|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(115) = "AUD_quotation_02_author:PSB#3|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#12<>PSB#3|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(116) = "AUD_footnote_label_manual:FC#-570359809|fffd|SC#-587137089<>FC#-16777216|fffd|SC#15790320<>FC#-570359809|fffd|SC#-587137089"
    arrStyleProperties(117) = "AUD_marginal_note:PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12|fffd|PRI#100<>PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12|fffd|PRI#100<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PRI#75"
    arrStyleProperties(118) = "AUD_marginal_number:SC#15790335|fffd|BC#15790335|fffd|BS#1|fffd|BW#18|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12|fffd|PRI#130<>SC#-603914241|fffd|BC#-16777216|fffd|BS#0|fffd|BW#0|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12|fffd|PRI#130<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PRI#105|fffd|SC#15790335|fffd|BC#15790335|fffd|BS#1|fffd|BW#18"
    arrStyleProperties(119) = "CHV_VERWEIS_Kapitel:SC#48895<>SC#-603914241<>SC#48895"
    arrStyleProperties(120) = "CHV_VERWEIS_Listing:SC#7118505<>SC#-603914241<>SC#7118505"
    arrStyleProperties(121) = "CHV_VERWEIS_Formel:SC#9737689<>SC#-603914241<>SC#9737689"
    arrStyleProperties(122) = "CHV_VERWEIS_Bild:SC#15774720<>SC#-603914241<>SC#15774720"
    arrStyleProperties(123) = "CHV_VERWEIS:SC#13148340<>SC#-603914241<>SC#13148340"
    arrStyleProperties(124) = "AUD_crossref_marginal_number:SC#12174245<>SC#-603914241<>SC#12174245"
    arrStyleProperties(125) = "AUD_crossref_page:SC#11850490<>SC#-603914241<>SC#11850490"
    arrStyleProperties(126) = "CHV_VERWEIS_Tabelle:SC#5296790<>SC#-603914241<>SC#5296790"
    arrStyleProperties(127) = "AUD_pagebreak:PSB#0|fffd|PSA#0|fffd|PLSR#4|fffd|PLSP#14|fffd|PBB#-1<>PSB#0|fffd|PSA#0|fffd|PLSR#4|fffd|PLSP#14|fffd|PBB#-1<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23|fffd|PBB#0"
    arrStyleProperties(128) = "CHV_bewusste_Leerzeile_nach_Tabelle:PSB#0|fffd|PSA#6|fffd|PLSR#0<>PSB#0|fffd|PSA#6|fffd|PLSR#0<>PSB#0|fffd|PSA#2|fffd|PLSR#0"
    arrStyleProperties(129) = "AUD_fm_aux_bodytext:PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(130) = "AUD_fm_aux_head:FS#19|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>FS#19|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(131) = "AUD_fm_dedication:PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(132) = "AUD_fm_dedication_author:PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(133) = "AUD_fm_ht_title:PSB#6|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#12<>PSB#6|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(134) = "AUD_fm_ht_title_sub:PSB#6|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#12<>PSB#6|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(135) = "AUD_fm_ht_title_sub_sub:PSB#6|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#12<>PSB#6|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(136) = "AUD_fm_imprint_head:PSB#12|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#12<>PSB#12|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(137) = "AUD_fm_mt_authors:PSB#6|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#12<>PSB#6|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(138) = "AUD_fm_mt_bodytext:PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(139) = "AUD_fm_mt_publisher:PSB#36|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>PSB#36|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(140) = "AUD_fm_mt_title:FS#24|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>FS#24|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(141) = "AUD_fm_mt_title_sub:FS#19|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>FS#19|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(142) = "AUD_fm_mt_title_sub_sub:FS#17|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>FS#17|fffd|PSB#6|fffd|PSA#6|fffd|PLSR#3|fffd|PLSP#12<>FS#14|fffd|PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(143) = "AUD_toc_h1:PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(144) = "AUD_toc_h2:PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(145) = "AUD_toc_h3:PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(146) = "AUD_toc_h4:PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(147) = "AUD_toc_h5:PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(148) = "AUD_toc_h6:PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(149) = "AUD_toc_h7:PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(150) = "AUD_toc_h8:PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(151) = "AUD_toc_h9:PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(152) = "AUD_toc_parttitle:PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(153) = "AUD_toc_parttitle_sub:PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    arrStyleProperties(154) = "AUD_toc_parttitle_sub_sub:PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#3|fffd|PLSR#3|fffd|PLSP#12<>PSB#0|fffd|PSA#0|fffd|PLSR#3|fffd|PLSP#23"
    StyleProperties = arrStyleProperties
End Function

Function DocumentProperties() As String
    DocumentProperties = "PLM#40|fffd|PRM#25|fffd|PTM#25|fffd|PBM#20<>PLM#40|fffd|PRM#25|fffd|PTM#25|fffd|PBM#20<>PLM#30|fffd|PRM#50|fffd|PTM#25|fffd|PBM#25"
End Function

Function TableStyleProperties() As Variant
    Dim arrTableStyleProperties(39) As String
    arrTableStyleProperties(0) = AUD_tf_box_01 & "|fffd|12697792"
    arrTableStyleProperties(1) = AUD_tf_box_02 & "|fffd|12632512"
    arrTableStyleProperties(2) = AUD_tf_box_03 & "|fffd|12698048"
    arrTableStyleProperties(3) = AUD_tf_box_04 & "|fffd|12632257"
    arrTableStyleProperties(4) = AUD_tf_box_05 & "|fffd|12697793"
    arrTableStyleProperties(5) = AUD_tf_box_06 & "|fffd|12632513"
    arrTableStyleProperties(6) = AUD_tf_box_07 & "|fffd|12698049"
    arrTableStyleProperties(7) = AUD_tf_box_08 & "|fffd|12763328"
    arrTableStyleProperties(8) = AUD_tf_box_09 & "|fffd|12632768"
    arrTableStyleProperties(9) = AUD_tf_box_10 & "|fffd|12763840"
    arrTableStyleProperties(10) = AUD_tf_box_11 & "|fffd|12632258"
    arrTableStyleProperties(11) = AUD_tf_box_12 & "|fffd|12763330"
    arrTableStyleProperties(12) = AUD_tf_box_13 & "|fffd|12632770"
    arrTableStyleProperties(13) = AUD_tf_box_14 & "|fffd|12763842"
    arrTableStyleProperties(14) = AUD_tf_box_15 & "|fffd|12828864"
    arrTableStyleProperties(15) = AUD_tf_box_16 & "|fffd|12633024"
    arrTableStyleProperties(16) = AUD_tf_box_17 & "|fffd|12829632"
    arrTableStyleProperties(17) = AUD_tf_box_18 & "|fffd|12632259"
    arrTableStyleProperties(18) = AUD_tf_box_19 & "|fffd|12828867"
    arrTableStyleProperties(19) = AUD_tf_box_20 & "|fffd|12633027"
    arrTableStyleProperties(20) = AUD_tf_box_21 & "|fffd|12829635"
    arrTableStyleProperties(21) = AUD_tf_box_22 & "|fffd|12894400"
    arrTableStyleProperties(22) = AUD_tf_box_23 & "|fffd|12633280"
    arrTableStyleProperties(23) = AUD_tf_box_24 & "|fffd|12895424"
    arrTableStyleProperties(24) = AUD_tf_box_25 & "|fffd|12632260"
    arrTableStyleProperties(25) = AUD_tf_columntext & "|fffd|12566720"
    arrTableStyleProperties(26) = AUD_tf_equation_figure & "|fffd|12632000"
    arrTableStyleProperties(27) = AUD_tf_equation_text & "|fffd|12566464"
    arrTableStyleProperties(28) = AUD_tf_figure & "|fffd|12632255"
    arrTableStyleProperties(29) = AUD_tf_marginal_note & "|fffd|12566719"
    arrTableStyleProperties(30) = AUD_tf_special_container_01 & "|fffd|16777214"
    arrTableStyleProperties(31) = AUD_tf_special_container_02 & "|fffd|16711678"
    arrTableStyleProperties(32) = AUD_tf_special_container_03 & "|fffd|16776958"
    arrTableStyleProperties(33) = AUD_tf_special_container_04 & "|fffd|16711422"
    arrTableStyleProperties(34) = AUD_tf_special_container_05 & "|fffd|16646143"
    arrTableStyleProperties(35) = AUD_tf_table & "|fffd|4276288"
    arrTableStyleProperties(36) = AUD_tf_table_aux_01 & "|fffd|4211008"
    arrTableStyleProperties(37) = AUD_tf_table_aux_02 & "|fffd|4276544"
    arrTableStyleProperties(38) = AUD_tf_table_aux_03 & "|fffd|4210753"
    arrTableStyleProperties(39) = AUD_tf_meta & "|fffd|4276289"
    TableStyleProperties = arrTableStyleProperties
End Function

Attribute VB_Name = "CrossRef"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private strCrossRefType As Variant
Private strCrossRefKind As Long
Private objCrossRefItem As Range
Private strCrossRefPrefixKey As String
Private strCrossRefSymbolKey As String
Private strCrossRefSuffixKey As String
Private strCrossRefKey As String
Private strCrossRefStyle As String
Private strCrossRefIdentifier As String

Public Property Get CrossRefType() As Variant
    CrossRefType = strCrossRefType
End Property

Public Property Let CrossRefType(Value As Variant)
    strCrossRefType = Value
End Property

Public Property Get CrossRefKind() As Long
    CrossRefKind = strCrossRefKind
End Property

Public Property Let CrossRefKind(Value As Long)
    strCrossRefKind = Value
End Property

Public Property Get CrossRefItem() As Range
    Set CrossRefItem = objCrossRefItem
End Property

Public Property Let CrossRefItem(Value As Range)
    Set objCrossRefItem = Value
End Property

Public Property Get CrossRefPrefixKey() As String
    CrossRefPrefixKey = strCrossRefPrefixKey
End Property

Public Property Let CrossRefPrefixKey(Value As String)
    strCrossRefPrefixKey = Value
End Property

Public Property Get CrossRefSymbolKey() As String
    CrossRefSymbolKey = strCrossRefSymbolKey
End Property

Public Property Let CrossRefSymbolKey(Value As String)
    strCrossRefSymbolKey = Value
End Property

Public Property Get CrossRefSuffixKey() As String
    CrossRefSuffixKey = strCrossRefSuffixKey
End Property

Public Property Let CrossRefSuffixKey(Value As String)
    strCrossRefSuffixKey = Value
End Property

Public Property Get CrossRefKey() As String
    CrossRefKey = strCrossRefKey
End Property

Public Property Let CrossRefKey(Value As String)
    strCrossRefKey = Value
End Property

Public Property Get CrossRefStyle() As String
    CrossRefStyle = strCrossRefStyle
End Property

Public Property Let CrossRefStyle(Value As String)
    strCrossRefStyle = Value
End Property

Public Property Get CrossRefIdentifier() As String
    CrossRefIdentifier = strCrossRefIdentifier
End Property

Public Property Let CrossRefIdentifier(Value As String)
    strCrossRefIdentifier = Value
End Property
Attribute VB_Name = "CrossRefConfig"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private crossRefs() As CrossRef

Public Property Let SetCrossRefs(crossRefItems() As CrossRef)
    crossRefs = crossRefItems
End Property

Public Property Get GetCrossRefs() As CrossRef()
    GetCrossRefs = crossRefs
End Property

Attribute VB_Name = "ExtractEntry"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public ExtractEntryRange As Range
Public ExtractEntrySeekView As Long
Public ExtractEntryParentStory As Long
Public ExtractEntryCharacterStyle As String
Public ExtractEntryParagraphStyle As String
Public ExtractEntryTableStyle As String
Public ExtractEntryExtractParagraphStyle As String
Public ExtractEntrySort As String
Public ExtractEntryGroupKey As String

Public Property Get ExtractEntryStyle() As String
    If ExtractEntryCharacterStyle <> "" Then
        ExtractEntryStyle = ExtractEntryCharacterStyle
    ElseIf ExtractEntryParagraphStyle <> "" Then
        ExtractEntryStyle = ExtractEntryParagraphStyle
    ElseIf ExtractEntryTableStyle <> "" Then
        ExtractEntryStyle = ExtractEntryTableStyle
    End If
End Property

Public Property Get ExtractEntryStyleDisplay() As String
    If ExtractEntryCharacterStyle <> "" Then
        ExtractEntryStyleDisplay = "[a] " & ExtractEntryCharacterStyle
    ElseIf ExtractEntryParagraphStyle <> "" Then
        ExtractEntryStyleDisplay = "[|fffd|] " & ExtractEntryParagraphStyle
    ElseIf ExtractEntryTableStyle <> "" Then
        ExtractEntryStyleDisplay = "[T] " & ExtractEntryTableStyle
    End If
End Property

Public Property Get ExtractEntryStyleWithContextDisplay() As String
    ExtractEntryStyleWithContextDisplay = _
        fctArrayJoin(Array(ExtractEntryCharacterStyleDisplay, _
                            ExtractEntryParagraphStyleDisplay, _
                            ExtractEntryTableStyleDisplay), " ")
End Property

Public Property Get ExtractEntryCharacterStyleDisplay() As String
    If ExtractEntryCharacterStyle <> "" Then
        ExtractEntryCharacterStyleDisplay = "[a] " & ExtractEntryCharacterStyle
    End If
End Property

Public Property Get ExtractEntryParagraphStyleDisplay() As String
    If ExtractEntryParagraphStyle <> "" Then
        ExtractEntryParagraphStyleDisplay = "[|fffd|] " & ExtractEntryParagraphStyle
    End If
End Property

Public Property Get ExtractEntryTableStyleDisplay() As String
    If ExtractEntryTableStyle <> "" Then
        ExtractEntryTableStyleDisplay = "[T] " & ExtractEntryTableStyle
    End If
End Property

Public Property Get ExtractEntryGroupKeyRange() As Variant
    If ExtractEntryRange.storyType = wdTextFrameStory Then
        ExtractEntryGroupKeyRange = Format(ExtractEntryParentStory, "00") & "99"
    Else
        ExtractEntryGroupKeyRange = Format(ExtractEntryRange.storyType, "00") & "00"
    End If
End Property

Public Property Get ExtractEntryGroupKeyStyle() As String
    ExtractEntryGroupKeyStyle = _
        ExtractEntryGroupKeyRange & _
        LCase(Left(ExtractEntryStyle & Space(50), 50))
End Property

Public Property Get ExtractEntryGroupKeyStyleWithContext() As String
    ExtractEntryGroupKeyStyleWithContext = _
        ExtractEntryGroupKeyRange & _
        LCase(Left(ExtractEntryCharacterStyle & Space(50), 50)) & _
        LCase(Left(ExtractEntryParagraphStyle & Space(50), 50)) & _
        LCase(Left(ExtractEntryTableStyle & Space(50), 50))
End Property

Public Property Get ExtractEntrySortSortByRange() As Variant
    ExtractEntrySortSortByRange = _
        ExtractEntryGroupKeyRange & _
        Format(ExtractEntryRange.start, "000000")
End Property

Public Property Get ExtractEntrySortSortByStyle() As Variant
    ExtractEntrySortSortByStyle = _
        ExtractEntryGroupKeyStyle & _
        Format(ExtractEntryRange.start, "000000")
End Property

Public Property Get ExtractEntrySortSortByStyleWithContext() As Variant
    ExtractEntrySortSortByStyleWithContext = _
        ExtractEntryGroupKeyStyleWithContext & _
        Format(ExtractEntryRange.start, "000000")
End Property
Attribute VB_Name = "ExtractStory"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public ExtractStoryRange As Range
Public ExtractStorySeekView As Long
Public ExtractStoryParentStory As Long
Public Sort As Variant
Attribute VB_Name = "FigureEntry"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public FigureEntryRange As Range
Public FigureEntryCode As Integer
Attribute VB_Name = "MainBoxStyles"
Option Explicit


Public Function fctGetBoxStylesStart(rngSelection As Range) As Boolean

Dim strFirstParaStyle As String

strFirstParaStyle = rngSelection.Paragraphs.First.Style

    Select Case strFirstParaStyle
        
        Case "Kasten_Anfang": fctGetBoxStylesStart = True
        Case "Kasten Anfang": fctGetBoxStylesStart = True
        Case "KastenAnfang": fctGetBoxStylesStart = True
        Case "Kastenanfang": fctGetBoxStylesStart = True
        Case "AUD_box_type": fctGetBoxStylesStart = True
        Case "Legende_Start": fctGetBoxStylesStart = True
        Case "Tab_Start": fctGetBoxStylesStart = True
        Case "Gleichung_Start": fctGetBoxStylesStart = True
        Case "Einleitung_Start": fctGetBoxStylesStart = True
        Case "Def_Start": fctGetBoxStylesStart = True
        Case "Merke_Start": fctGetBoxStylesStart = True
        Case "Praxistipp_Start": fctGetBoxStylesStart = True
        Case "Beispiel_Start": fctGetBoxStylesStart = True
        Case "Kasten_Start": fctGetBoxStylesStart = True
        Case "Zuss-Fass_Start": fctGetBoxStylesStart = True
        Case "Wieder-Fragen_Start": fctGetBoxStylesStart = True
        Case "|fffd|bungen_Start": fctGetBoxStylesStart = True
        Case "Bsp-num_Start": fctGetBoxStylesStart = True
        
    End Select
    
End Function


Public Function fctGetBoxStylesEnd(rngSelection As Range) As Boolean

Dim strLastParaStyle As String
    
strLastParaStyle = rngSelection.Paragraphs.Last.Style

    Select Case strLastParaStyle
    
        Case "Kasten_Ende": fctGetBoxStylesEnd = True
        Case "Kasten Ende": fctGetBoxStylesEnd = True
        Case "KastenEnde": fctGetBoxStylesEnd = True
        Case "Kastenende": fctGetBoxStylesEnd = True
        Case "AUD_box_type_end": fctGetBoxStylesEnd = True
        Case "Legende_Ende": fctGetBoxStylesEnd = True
        Case "Tab_Ende": fctGetBoxStylesEnd = True
        Case "Gleichung_Ende": fctGetBoxStylesEnd = True
        Case "Einleitung_Ende": fctGetBoxStylesEnd = True
        Case "Def_Ende": fctGetBoxStylesEnd = True
        Case "Merke_Ende": fctGetBoxStylesEnd = True
        Case "Praxistipp_Ende": fctGetBoxStylesEnd = True
        Case "Beispiel_Ende": fctGetBoxStylesEnd = True
        Case "Kasten_Ende": fctGetBoxStylesEnd = True
        Case "Zuss-Fass_Ende": fctGetBoxStylesEnd = True
        Case "Wieder-Fragen_Ende": fctGetBoxStylesEnd = True
        Case "|fffd|bungen_Ende": fctGetBoxStylesEnd = True
        Case "Bsp-num_Ende": fctGetBoxStylesEnd = True
    
    End Select
       
End Function
Attribute VB_Name = "MainErrorMessages"
Option Explicit

Public Function fctGetErrorMsg(errorCode As String) As String

Dim strErrorMsg As String

If fctGetLanguage = "deDE" Then
    Select Case errorCode
        Case "01": strErrorMsg = "Bitte Bereich ausw|fffd|hlen."
        Case "02": strErrorMsg = "Diese Ausrichtung bitte nur in Tabellen verwenden."
        Case "03": strErrorMsg = "Tabellenkopf bitte nur in Tabellen verwenden."
        Case "04": strErrorMsg = "Tabellenunter|fffd|berschrift bitte nur in Tabellen verwenden."
        Case "05": strErrorMsg = "Tabellenlegende bitte nur in Tabellen verwenden."
        Case "06": strErrorMsg = "Diese Microsoft Word-Version unterst|fffd|tzt den Quellenmanager nicht."
        Case "07": strErrorMsg = "Bitte Kasten in einem separaten Absatz einf|fffd|gen."
        Case "08": strErrorMsg = "Kasten in Kasten wird im Moment nicht unterst|fffd|tzt."
        Case "09": strErrorMsg = "Bitte zuerst eine |fffd|berschrift Ebene 1 anlegen."
        Case "10": strErrorMsg = "Bitte Bereich markieren, in welchem der Kommentar zu l|fffd|schen ist."
        Case "11": strErrorMsg = "Diese Microsoft Word-Version unterst|fffd|tzt diesen Dialog nicht."
        Case "12": strErrorMsg = "Der Auswahlbereich muss leer sein."
        Case "13": strErrorMsg = "Tabelle in Tabelle wird zur Zeit nicht unterst|fffd|tzt."
        Case "14": strErrorMsg = "Bitte Kastentitel nur innerhalb eines Kasten verwenden."
        Case "15": strErrorMsg = "Kasten|fffd|berschrift bitte nur innerhalb eines Kastens verwenden."
        Case "16": strErrorMsg = "Tabellenlegende bitte nur in Tabellen verwenden."
        Case "17": strErrorMsg = "Bitte Kasten ausw|fffd|hlen."
        Case "18": strErrorMsg = "Cursor muss in einem Kasten stehen."
        Case "19": strErrorMsg = "Kein g|fffd|ltiges Zahlenformat."
        Case "20": strErrorMsg = "Es k|fffd|nnen nur K|fffd|sten gel|fffd|scht werden."
        Case "21": strErrorMsg = "Wollen Sie den Kasten samt Inhalt wirklich l|fffd|schen?"
        Case "22": strErrorMsg = "Bitte einen Wert gr|fffd||fffd|er 0 eintragen."
        Case "23": strErrorMsg = "Sie m|fffd|ssen mindestens zwei Zellen markieren."
        Case "24": strErrorMsg = "Diese Funktion ist nur innerhalb von Tabellen m|fffd|glich."
        Case "25": strErrorMsg = "Bitte Wert ausw|fffd|hlen."
        Case "26": strErrorMsg = "ACHTUNG: Inhalt der Zwischenablage wird gel|fffd|scht. Wollen Sie das wirklich?"
        Case "27": strErrorMsg = "Der Formatinspektor steht in dieser Word-Version nicht zur Verf|fffd|gung. Bitte benutzen Sie Ansicht > Toolbox > Formatvorlagen (Office 2011) bzw. Start > Bereich Formatvorlagen (Office 2016)."
        Case "28": strErrorMsg = "ACHTUNG: Kastenanfang und Kastenende stimmen nicht |fffd|berein."
        Case "29": strErrorMsg = "Bei vertikal-verbundenen Zellen kann kein Tabellenumbruch erfolgen."
        Case "30": strErrorMsg = "Microsoft Word kann die Anzahl an Spalten/Reihen nicht verarbeiten."
        Case "31": strErrorMsg = "Diese Funktion ist nur innerhalb einer Liste Ebene 1 m|fffd|glich."
        Case "32": strErrorMsg = "Bitte nutzen Sie f|fffd|r diese Funktion Ansicht > Toolbox > Zitate (Office 2011) bzw. Verweise > Zitate (Office 2016)."
        Case "34": strErrorMsg = "##Dateibezeichnung unvollst|fffd|ndig##"
        Case "35": strErrorMsg = "##Dateibezeichnung unbekannt##"
        Case "36": strErrorMsg = "Bitte w|fffd|hlen Sie den zu konvertierenden Text aus."
        Case "37": strErrorMsg = "Bitte Verweisziel ausw|fffd|hlen."
        Case "38": strErrorMsg = "Keine Verweisziele vorhanden."
        Case "39": strErrorMsg = "Diese Funktion steht nur innerhalb von K|fffd|sten/Tabellen zur Verf|fffd|gung."
        Case "40": strErrorMsg = "Wollen Sie den Kasten/die Tabelle samt Inhalt wirklich l|fffd|schen?"
        Case "41": strErrorMsg = "Diese Funktion steht in dieser Word-Version nicht zur Verf|fffd|gung."
        Case "42": strErrorMsg = "Abbildungs-/Gleichungscontainer d|fffd|rfen nicht verschachtelt werden."
        Case "44": strErrorMsg = "Diese Funktion steht nur innerhalb von K|fffd|sten zur Verf|fffd|gung."
        Case "45": strErrorMsg = "Diese Funktion steht nur innerhalb von Special-Container zur Verf|fffd|gung."
        Case "46": strErrorMsg = "Diese Funktion ist nur in Tabellen mit den Formaten """ & AUD_tf_table & """ oder """ & AUD_tf_table_aux_01 & """ zul|fffd|ssig."
        Case "47": strErrorMsg = "Diese Funktion ist nur in Tabellen mit den Formaten """ & AUD_tf_table & """ oder """ & AUD_tf_table_aux_02 & """ zul|fffd|ssig."
        Case "48": strErrorMsg = "Diese Funktion ist nur in Tabellen mit den Formaten """ & AUD_tf_table_aux_01 & """ oder """ & AUD_tf_table_aux_02 & """ zul|fffd|ssig."
        Case "49": strErrorMsg = "Bitte Kastenfu|fffd|note nur innerhalb eines Kasten verwenden."
        Case "99": strErrorMsg = "Unbekannter Fehler!"
    End Select
Else
    Select Case errorCode
        Case "01": strErrorMsg = "Please select a range."
        Case "02": strErrorMsg = "Alignment should only be used inside a table."
        Case "03": strErrorMsg = "Please use table heads only inside a table."
        Case "04": strErrorMsg = "Please use table subheads only inside a table."
        Case "05": strErrorMsg = "Please use table footnotes only inside a table."
        Case "06": strErrorMsg = "This Microsoft Word version does not support the source manager"
        Case "07": strErrorMsg = "Please insert the box in a separate paragraph."
        Case "08": strErrorMsg = "Box-in-box is at the moment not possible."
        Case "09": strErrorMsg = "Please insert heading level 1 first."
        Case "10": strErrorMsg = "Please mark the range where the comment should be deleted."
        Case "11": strErrorMsg = "This Microsoft Word version does not support this option."
        Case "12": strErrorMsg = "The selection should be empty."
        Case "13": strErrorMsg = "Table-in-table is at the moment not possible."
        Case "14": strErrorMsg = "Box title must be inside a box."
        Case "15": strErrorMsg = "Box heading must be inside a box."
        Case "16": strErrorMsg = "Please use table caption only inside a table."
        Case "17": strErrorMsg = "Please choose a box."
        Case "18": strErrorMsg = "Cursor must be inside a box."
        Case "19": strErrorMsg = "No valid number format."
        Case "20": strErrorMsg = "Only boxes can be deleted."
        Case "21": strErrorMsg = "Do you really want to delete the box incl. its content?"
        Case "22": strErrorMsg = "Please enter a value greater then 0."
        Case "23": strErrorMsg = "Please mark more then one cell."
        Case "24": strErrorMsg = "This function is only available within tables."
        Case "25": strErrorMsg = "Please choose a value."
        Case "26": strErrorMsg = "ATTENTION: Clipboard will be deleted. Do you wish to continue?"
        Case "27": strErrorMsg = "The style inspector is not available under the current operating system."
        Case "28": strErrorMsg = "ATTENTION: Box start and box end do not fit together."
        Case "29": strErrorMsg = "Vertical-combined cells could not have a table break."
        Case "30": strErrorMsg = "The number of columns/rows exceeds the table object of Mircosoft Word."
        Case "31": strErrorMsg = "This function is only possible within a list level 1."
        Case "32": strErrorMsg = "This function is not available under the current operating system."
        Case "34": strErrorMsg = "##File name incomplete##"
        Case "35": strErrorMsg = "##File name unknown##"
        Case "36": strErrorMsg = "Please select the text to be converted."
        Case "37": strErrorMsg = "Please choose crossref target."
        Case "38": strErrorMsg = "No crossref targets exist."
        Case "39": strErrorMsg = "This function is only available within boxes/tables."
        Case "40": strErrorMsg = "Do you really want to delete the box/table incl. its content?"
        Case "41": strErrorMsg = "This Word version does not support this function."
        Case "42": strErrorMsg = "Figure/equation container must not be nested."
        Case "44": strErrorMsg = "This function is only available within boxes."
        Case "45": strErrorMsg = "This function is only available within special container."
        Case "46": strErrorMsg = "This function is only available within tables of style """ & AUD_tf_table & """ or """ & AUD_tf_table_aux_01 & """."
        Case "47": strErrorMsg = "This function is only available within tables of style """ & AUD_tf_table & """ or """ & AUD_tf_table_aux_02 & """."
        Case "48": strErrorMsg = "This function is only available within tables of style """ & AUD_tf_table_aux_01 & """ or """ & AUD_tf_table_aux_02 & """."
        Case "49": strErrorMsg = "Box footnote must be inside a box."
        Case "99": strErrorMsg = "Unknown error!"
    End Select
End If

    fctGetErrorMsg = strErrorMsg
    
End Function
Attribute VB_Name = "MainFormCaptions"
Option Explicit

Public Function fctGetFormCaption(strFormCaption As String) As String

Dim strCaption As String

If fctGetLanguage = "deDE" Then
    Select Case strFormCaption
        'Glyphen
        Case "01": strCaption = "Griechische Buchstaben"
        Case "02": strCaption = "Br|fffd|che"
        Case "03": strCaption = "Klammern"
        Case "04": strCaption = "Akzente"
        Case "05": strCaption = "Pfeile"
        Case "06": strCaption = "Striche und Leerr|fffd|ume"
        Case "07": strCaption = "Zahlen im Kreis"
        Case "08": strCaption = "Symbole"
        Case "09": strCaption = "Phonetische Zeichen"
        Case "11": strCaption = "Mathematische Operatoren"
        Case "14": strCaption = "Bitte Kennwort eingeben."
        Case "15": strCaption = "OK"
        Case "16": strCaption = "Abbruch"
        Case "17": strCaption = "Kapitelnummer"
        Case "18": strCaption = "Kapitelnummer |fffd|ndern"
        
        'StyleModifier
        Case "20": strCaption = "fett"
        Case "21": strCaption = "kursiv"
        Case "22": strCaption = "unterstrichen"
        Case "23": strCaption = "hochgestellt"
        Case "24": strCaption = "tiefgestellt"
        Case "25": strCaption = "Zeichenformate anpassen"
        Case "26": strCaption = "Bitte Zeichenformat ausw|fffd|hlen ..."
        Case "27": strCaption = "KAPIT|fffd|LCHEN"
        
        'Tables
        Case "40": strCaption = "Nummerierte Tabelle"
        Case "41": strCaption = "Zeilenanzahl"
        Case "42": strCaption = "Spaltenanzahl"
        Case "43": strCaption = "Tabellenkopf"
        Case "44": strCaption = "Tabellenlegende"
        Case "45": strCaption = "Text in Spalten"
        Case "46": strCaption = "Tabelle konvertieren"
        Case "47": strCaption = "Konvertierungsoptionen"
        Case "48": strCaption = "Tabellen|fffd|berschrift"
        Case "49": strCaption = "Tabellenkopf"
        Case "50": strCaption = "Tab. mit Legende | nur TabNr"
        Case "51": strCaption = "Unnummerierte Tabelle"
        Case "52": strCaption = "Unnummerierte Tabelle"
        Case "53": strCaption = "AUX-Tab. mit Legende"
        Case "54": strCaption = "AUX-Tab. ohne Legende"
        
        'Statistic
        Case "60": strCaption = "Zeichenanzahl-A (inkl. Leerzeichen und Indexmarken)"
        Case "61": strCaption = "Zeichenanzahl-B (inkl. Leerzeichen)"
        Case "62": strCaption = "Anzahl Indexmarken"
        Case "63": strCaption = "Dokumentstatistik"
        Case "64": strCaption = "basiert auf:"
        
        'Listen
        Case "70": strCaption = "Liste neu starten"
        Case "71": strCaption = "Liste fortf|fffd|hren"
        Case "72": strCaption = "Listen"
        
        'Abbildungslegende
        Case "80": strCaption = "Bild inkl. Dateinamen einf|fffd|gen"
        Case "81": strCaption = "Dateinamen mit AbbNr und Erweiterung generieren"
        Case "82": strCaption = "Dateinamen mit AbbNr generieren"
        Case "83": strCaption = "Dateinamen selber eintragen"
        Case "84": strCaption = "Dateiname noch unbekannt"
        Case "86": strCaption = "Bild mit Legende | AbschnittsNr + BildNr"
        Case "87": strCaption = "Bild mit Legende | nur BildNr"
        Case "88": strCaption = "Bild mit Legende | ohne Nr"
        Case "89": strCaption = "Bild ohne Legende"
        
        'Gleichungen
        Case "900": strCaption = "manuelle Eingabe der Formel"
        Case "901": strCaption = "Bild inkl. Dateinamen einf|fffd|gen"
        Case "902": strCaption = "Dateinamen mit GlnNr und Erweiterung generieren"
        Case "903": strCaption = "Dateinamen mit GlnNr generieren"
        Case "904": strCaption = "Dateinamen selber eintragen"
        Case "905": strCaption = "Dateiname noch unbekannt"
        Case "910": strCaption = "Formel mit Legende | AbschnittsNr + FormelNr"
        Case "911": strCaption = "Formel mit Legende | nur FormelNr"
        Case "912": strCaption = "Formel mit Legende | ohne Nr"
        Case "913": strCaption = "Formel ohne Legende"
        
        'CrossRefs
        Case "95": strCaption = "Verweis auf Rz. einf|fffd|gen"
        Case "96": strCaption = "Verweis auf Bild einf|fffd|gen"
        Case "97": strCaption = "Verweis auf Tab. einf|fffd|gen"
        Case "98": strCaption = "Verweis auf Abschnitt einf|fffd|gen"
        Case "99": strCaption = "Verweis auf Formel einf|fffd|gen"
        Case "100": strCaption = "Verweisziele"
        Case "101": strCaption = "Keine Verweisziele vorhanden"
        Case "1020": strCaption = "|fffd| Leerer Absatz |fffd|"
        Case "1021": strCaption = "Verweis einf|fffd|gen"
        Case "1022": strCaption = "Schlie|fffd|en"
        
        ' Table restore
        Case "102": strCaption = "AUD-Tabellen pr|fffd|fen"
        Case "103": strCaption = "Tabellen gepr|fffd|ft:"
        Case "104": strCaption = "korrekt:"
        Case "105": strCaption = "wiederhergestellt:"
        Case "106": strCaption = "unbekannt:"
        Case "107": strCaption = "Pr|fffd|fen"
        Case "108": strCaption = "Schlie|fffd|en"
        
        ' Other languages
        Case "112": strCaption = "Andere Sprachen"
        Case "113": strCaption = "Skandinavische Sprachen"
        Case "114": strCaption = "Tschechisch"
        Case "115": strCaption = "Russisch"
        Case "116": strCaption = "Polnisch"
        Case "117": strCaption = "Slowakisch"
        
         'Formatierungsbeschr|fffd|nkungen - Passwortfenster
        Case "120": strCaption = "Formatierungseinschr|fffd|nkungen"
        Case "121": strCaption = "Passwort"
        Case "122": strCaption = "Abbrechen"
        Case "123": strCaption = "OK"
        Case "124": strCaption = "Das eingegebene Passwort ist nicht korrekt."
        Case "125": strCaption = "Falsches Passwort"
        Case "126": strCaption = "Der folgende Dialog bietet die M|fffd|glichkeit, die Bearbeitung auf AUD-Formate" & _
                                 " einzuschr|fffd|nken und unzul|fffd|ssige Formatierungen im gesamten Dokument zu" & _
                                 " bereinigen."
      
        'Formatierungsbeschr|fffd|nkungen
        Case "130": strCaption = "Formatierungseinschr|fffd|nkungen"
        
        Case "131": strCaption = "Formatierungseinschr|fffd|nkungen aktivieren"
        Case "132": strCaption = "|fffd|  Direktformatierungen (Fett, Kursiv, etc.) entfernen" & Chr(13) & _
                                 "|fffd|  Abs|fffd|tzen mit Nicht-AUD-Format das Format ""Standard"" zuweisen" & Chr(13) & _
                                 "|fffd|  Format ""Standard"" pink einf|fffd|rben" & Chr(13) & _
                                 "|fffd|  Zuweisen von Direktformatierungen verhindern" & Chr(13) & _
                                 "|fffd|  Anlegen/Zuweisen neuer Formate verhindern" & Chr(13) & _
                                 "|fffd|  Bearbeiten bestehender Formate verhindern" & Chr(13) & _
                                 "|fffd|  Fremdformatierungen bei kopiertem Text entfernen" & Chr(13) & _
                                 "|fffd|  Bild-/Tabellen-/Inhaltsverzeichnisse und Indexe aktualisieren"
                                 
        Case "133": strCaption = "ACHTUNG:"
        Case "134": strCaption = "Dieser Schritt kann nicht r|fffd|ckg|fffd|ngig gemacht werden!"
        Case "135": strCaption = "Aktivieren"
        
        Case "136": strCaption = "Formatierungseinschr|fffd|nkungen deaktivieren"
        Case "137": strCaption = "|fffd|  farbige Hervorhebung von Abs|fffd|tzen ohne AUD-Format deaktivieren"
        Case "138": strCaption = "Deaktivieren"
        
        'Meta-Daten Editieren
        Case "140": strCaption = "Meta-Daten editieren"
        Case "141": strCaption = "Schlie|fffd|en"
        Case "142": strCaption = "Meta-Daten speichern"
        Case "143": strCaption = "Element"
        Case "144": strCaption = "Attribut"
        Case "145": strCaption = "PI"
        Case "146": strCaption = "unbestimmt"
        
        'Box settings pw
        Case "150": strCaption = "Box-Einstellungen"
        Case "151": strCaption = "Passwort"
        Case "152": strCaption = "Abbrechen"
        Case "153": strCaption = "OK"
        Case "154": strCaption = "Falsches Passwort"
        Case "155": strCaption = "Das eingegebene Passwort ist nicht korrekt."
        
        'Box settings
        Case "160": strCaption = "Box-Einstellungen"
        Case "161": strCaption = "Box-Bezeichnung"
        Case "162": strCaption = "Box-Icon"
        Case "163": strCaption = "Box-Titel"
        Case "164": strCaption = "Sichtbar"
        Case "165": strCaption = "Abbrechen"
        Case "166": strCaption = "OK"
        Case "167": strCaption = "Box-Titel aktualisieren"
        
        'Table info
        Case "170": strCaption = "Kasten-/Tabellen-Info"
        Case "171": strCaption = "|fffd| BOX IST IN DIESER AUD NICHT AKTIV |fffd|"
                                    
        'Abbildungs-Einstellungen
        Case "190": strCaption = "Abbildungs-/Gleichungs-Einstellungen"
        Case "191": strCaption = "Abbildungs-/Gleichungs-Pr|fffd|fix"
        Case "192": strCaption = "Abbildungs-/Gleichungs-Suffix"
        Case "193": strCaption = "Einstellungen sind in dieser AUD nicht verf|fffd|gbar."
        Case "194": strCaption = "Abbrechen"
        Case "195": strCaption = "OK"
        
        'Content extrahieren
        Case "200": strCaption = "|fffd| IGNORIEREN |fffd|"
        Case "201": strCaption = "Content extrahieren"
        Case "202": strCaption = "Zeichenformat"
        Case "203": strCaption = "Absatzformat"
        Case "204": strCaption = "Tabellenformat"
        Case "205": strCaption = "Extrahieren"
        Case "206": strCaption = "Abbrechen"
        Case "207": strCaption = "Formate neu ermitteln"
        Case "208": strCaption = "Es wurde kein passender Content gefunden."
        Case "209": strCaption = "Alle Tabellen wurden extrahiert."
        Case "210": strCaption = "Folgende Platzhalterzeichen k|fffd|nnen verwendet werden:" & _
                                    vbCr & vbCr & "?  Ein beliebiges einzelnes Zeichen" & _
                                    vbCr & "*  Null oder mehrere Zeichen" & _
                                    vbCr & "#  Beliebige einstellige Ziffer [0|fffd|9]" & _
                                    vbCr & vbCr & "AUD_h? findet z. B. die Formate AUD_h1, AUD_h2, etc." & _
                                    vbCr & vbCr & "Soll nach diesen Sonderzeichen gesucht werden, " & _
                                    "m|fffd|ssen diese in eckigen Klammern angegeben werden, " & _
                                    vbCr & "also: [?], [*] oder [#]." & _
                                    vbCr & vbCr & "Zus|fffd|tzlich k|fffd|nnen mehrere Suchausdr|fffd|cke auch |fffd|ber eine " & _
                                    "ODER-Verkn|fffd|pfung miteinander kombiniert werden, z. B. " & _
                                    vbCr & "AUD_h? ODER AUD_parttitle*"
        
        'Dokumentenbereiche (StoryTypes)
        Case "211": strCaption = "Hauptdokument"
        Case "212": strCaption = "Fu|fffd|noten"
        Case "213": strCaption = "Endnoten"
        Case "214": strCaption = "Kommentar"
        Case "215": strCaption = "Textrahmen"
        Case "216": strCaption = "Gerade Kopfzeile"
        Case "217": strCaption = "Prim|fffd|re Kopfzeile"
        Case "218": strCaption = "Gerade Fu|fffd|zeile"
        Case "219": strCaption = "Prim|fffd|re Fu|fffd|zeile"
        Case "220": strCaption = "Erste Kopfzeile"
        Case "221": strCaption = "Erste Fu|fffd|zeile"
        Case "222": strCaption = "Fu|fffd|notentrennlinie"
        Case "223": strCaption = "Fu|fffd|noten-Fortsetzungstrennlinie"
        Case "224": strCaption = "Fu|fffd|noten-Fortsetzungshinweis"
        Case "225": strCaption = "Endnotentrennlinie"
        Case "226": strCaption = "Endnoten-Fortsetzungstrennlinie"
        Case "227": strCaption = "Endnoten-Fortsetzungshinweis"
        
        ' Box-Dialog (Auswahl Box einf|fffd|gen/Boxtyp |fffd|ndern)
        Case "230": strCaption = "Kasten |fffd|ndern/einf|fffd|gen"
        Case "231": strCaption = "Kastentyp |fffd|ndern"
        Case "232": strCaption = "Kasten einf|fffd|gen"
        Case "233": strCaption = "Abbrechen"
        
        ' Abbildungen/Gleichungen aktualisieren
        Case "240": strCaption = "Abbildungen/Gleichungen aktualisieren"
        Case "241": strCaption = "Abbildungen:"
        Case "242": strCaption = "aktualisiert:"
        Case "243": strCaption = "nicht aktualisiert:"
        Case "244": strCaption = "Abbildungen im Text:"
        Case "245": strCaption = "Gleichungen:"
        Case "246": strCaption = "Gleichungen im Text:"
        Case "247": strCaption = "Aktualisieren"
        Case "248": strCaption = "Schlie|fffd|en"
        Case "249": strCaption = "ohne/leere Legende:"
        Case "250": strCaption = "Symbole:"
        Case "251": strCaption = "|fffd| Leer |fffd|"
        Case "252": strCaption = "Diese Funktion ermittelt alle Abbildungslegenden " & _
                                 "im Dokument und aktualisiert jeweils die Abbildungsbezeichnung " & _
                                 "gem|fffd||fffd| der hinterlegten Namenskonvention. Es wird empfohlen das " & _
                                 "Dokument vor der Ausf|fffd|hrung zu speichern."

        ' Copyright-Dialog
        Case "260": strCaption = "Copyright-Information editieren"
        Case "261": strCaption = "Schlie|fffd|en"
        Case "262": strCaption = "Copyright speichern"
        Case "263": strCaption = "Urheber"
        Case "264": strCaption = "Copyright"
        Case "265": strCaption = "Wollen Sie alle Copyright-Informationen im Dokument l|fffd|schen?"
        
        ' Feldfunktionen pr|fffd|fen
        Case "270": strCaption = "Feldfunktionen pr|fffd|fen"
        Case "271": strCaption = "Keine fehlerhaften Feldfunktionen gefunden"
        Case "272": strCaption = "Fehlerhafte Feldfunktionen gefunden"
        Case "273": strCaption = "Schlie|fffd|en"
        
        'Content extrahieren - Fortsetzung
        Case "280": strCaption = "Sortieren nach:"
        Case "281": strCaption = "Vorkommen"
        Case "282": strCaption = "Format"
        Case "283": strCaption = "Umgebende Formate anzeigen"
        Case "284": strCaption = "< Zur|fffd|ck"
        Case "285": strCaption = "Weiter >"
        Case "286": strCaption = "Keine Treffer"
        
        'Randziffer einf|fffd|gen
        Case "290": strCaption = "Randziffer einf|fffd|gen"
        Case "291": strCaption = "Alle folgenden Randziffern bleiben unver|fffd|ndert"
        Case "292": strCaption = "Alle folgenden Randziffern in rot werden neu nummeriert"
        Case "293": strCaption = "Randziffer einf|fffd|gen"
        Case "294": strCaption = "Randziffer einf|fffd|gen"
        Case "295": strCaption = "|fffd|nderungsverfolgungsmodus einschalten"
        Case "296": strCaption = "Randziffer einf|fffd|gen"
        
        'Randziffern neu nummerieren
        Case "300": strCaption = "Randziffern neu nummerieren"
        Case "301": strCaption = "Alle Randziffern in rot werden neu nummeriert"
        Case "302": strCaption = "Alle Randziffern bleiben unver|fffd|ndert"
        Case "303": strCaption = "Startwert:"
        Case "304": strCaption = "Randziffern neu nummerieren"
        Case "305": strCaption = "|fffd|nderungsverfolgungsmodus einschalten"
        Case "306": strCaption = "Randziffern neu nummerieren"
        Case "307": strCaption = "Das Dokument enth|fffd|lt keine Randziffern."
        
        'SmartIndex
        Case "310": strCaption = "SmartID-Info"
        Case "311": strCaption = "SmartIDs einrechnen/aktualisieren"
        Case "312": strCaption = "SmartIDs einrechnen/aktualisieren"
        Case "313": strCaption = "Absatz {x} von {y}"
        Case "314": strCaption = "Diese Funktion ermittelt alle indexierungsw|fffd|rdigen Abs|fffd|tze " & _
                                 "im Dokument und rechnet jeweils eine eindeutige SmartID ein " & _
                                 "bzw. aktualisiert in bestehenden SmartIDs die Kapitel-/Absatznummer. " & _
                                 "Es wird empfohlen das Dokument vor der Ausf|fffd|hrung zu speichern."
        Case "315": strCaption = "SmartIDs einrechnen/aktualisieren"
        
        'Sonstiges
        Case "50000": strCaption = "Kommentare in Auswahl l|fffd|schen"
    
    End Select
Else
    Select Case strFormCaption
        Case "01": strCaption = "Greeks"
        Case "02": strCaption = "Fractions"
        Case "03": strCaption = "Brackets"
        Case "04": strCaption = "Accents"
        Case "05": strCaption = "Arrows"
        Case "06": strCaption = "Dashes and spaces"
        Case "07": strCaption = "Circled numbers"
        Case "08": strCaption = "Icons"
        Case "09": strCaption = "IPA"
        Case "11": strCaption = "Maths"
        Case "14": strCaption = "Please enter password"
        Case "15": strCaption = "OK"
        Case "16": strCaption = "Cancel"
        Case "17": strCaption = "Chapter number"
        Case "18": strCaption = "Change chapter number"
        
        'StyleModifier
        Case "20": strCaption = "bold"
        Case "21": strCaption = "italic"
        Case "22": strCaption = "underline"
        Case "23": strCaption = "superscript"
        Case "24": strCaption = "subscript"
        Case "25": strCaption = "customize character style"
        Case "26": strCaption = "Please choose a character style ..."
        Case "27": strCaption = "CAPS"
        
        'Tables
        Case "40": strCaption = "Tab. with caption | ChpNo + TabNo"
        Case "41": strCaption = "table column"
        Case "42": strCaption = "table row"
        Case "43": strCaption = "table head"
        Case "44": strCaption = "table footnote"
        Case "45": strCaption = "column text"
        Case "46": strCaption = "convert table"
        Case "47": strCaption = "convert options"
        Case "48": strCaption = "table caption"
        Case "49": strCaption = "table head"
        Case "50": strCaption = "Tab. with caption | ChpNo + TabNo"
        Case "51": strCaption = "Tab. with caption | FigNo only"
        Case "52": strCaption = "Tab. without caption"
        Case "53": strCaption = "Table AUX with caption"
        Case "54": strCaption = "Table AUX without caption"
        
        'Statistics
        Case "60": strCaption = "Character-Count-A (incl. spaces and index marks)"
        Case "61": strCaption = "Character-Count-B (incl. spaces)"
        Case "62": strCaption = "Index marks"
        Case "63": strCaption = "Document statistics"
        Case "64": strCaption = "based on:"
        
        'Lists
        Case "70": strCaption = "start new list"
        Case "71": strCaption = "continue list"
        Case "72": strCaption = "lists"
        
        'Figures
        Case "80": strCaption = "insert figure incl. file name"
        Case "81": strCaption = "generate file name with fig no and extension"
        Case "82": strCaption = "generate file name with fig no"
        Case "83": strCaption = "enter file name manually"
        Case "84": strCaption = "file name unknown"
        Case "86": strCaption = "Fig. with caption | ChpNo + FigNo"
        Case "87": strCaption = "Fig. with caption | FigNo only"
        Case "88": strCaption = "Fig. with caption | without No"
        Case "89": strCaption = "Fig. without caption"
        
        'Equations
        Case "900": strCaption = "enter equation manually"
        Case "901": strCaption = "insert figure incl. file name"
        Case "902": strCaption = "generate file name with eqn no and extension"
        Case "903": strCaption = "generate file name with eqn no"
        Case "904": strCaption = "enter file name manually"
        Case "905": strCaption = "file name unknown"
        Case "910": strCaption = "Equation | ChpNo + EqnNo"
        Case "911": strCaption = "Equation | EqnNo only"
        Case "912": strCaption = "Equation | without No"
        Case "913": strCaption = "Equation without caption"
        
        ' CrossRefs
        Case "95": strCaption = "Insert marginal number crossref"
        Case "96": strCaption = "Insert Fig. crossref"
        Case "97": strCaption = "Insert Tab. crossref"
        Case "98": strCaption = "Insert Chap. crossref"
        Case "99": strCaption = "Insert Eqn. crossref"
        Case "100": strCaption = "Crossref targets"
        Case "101": strCaption = "No crossref targets exist"
        Case "1020": strCaption = "|fffd| Empty paragraph |fffd|"
        Case "1021": strCaption = "Insert crossref"
        Case "1022": strCaption = "Close"
        
        ' Table restore
        Case "102": strCaption = "Check AUD tables"
        Case "103": strCaption = "Tables checked:"
        Case "104": strCaption = "correct:"
        Case "105": strCaption = "restored:"
        Case "106": strCaption = "unknown:"
        Case "107": strCaption = "Check"
        Case "108": strCaption = "Close"
        
        ' Other languages
        Case "112": strCaption = "Other languages"
        Case "113": strCaption = "Scandinavian languages"
        Case "114": strCaption = "Czech"
        Case "115": strCaption = "Russian"
        Case "116": strCaption = "Polish"
        Case "117": strCaption = "Slovak"
       
       'Style limits | password
        Case "120": strCaption = "Style limitations"
        Case "121": strCaption = "Password"
        Case "122": strCaption = "Cancel"
        Case "123": strCaption = "OK"
        Case "124": strCaption = "The entered password is not correct."
        Case "125": strCaption = "Wrong password"
        Case "126": strCaption = "The following dialog offers the possibility to limit styles to AUD styles only and" & _
                                 " to remove invalid styles/direct formatting from the entire document."
        
        'Style limits
        Case "130": strCaption = "Style limitations"
        Case "131": strCaption = "Activate style limitations"
        
        
        Case "132": strCaption = "|fffd|  remove direct formatting (e.g. bold, italics)" & Chr(13) & _
                                 "|fffd|  assign style ""Normal"" to paragraphs with non-AUD style" & Chr(13) & _
                                 "|fffd|  highlight style ""Normal"" in pink" & Chr(13) & _
                                 "|fffd|  prevent direct formatting" & Chr(13) & _
                                 "|fffd|  prevent creation/assignment of new styles" & Chr(13) & _
                                 "|fffd|  prevent modification of existing styles" & Chr(13) & _
                                 "|fffd|  remove unknown styles from copied text" & Chr(13) & _
                                 "|fffd|  update figure lists, table lists, TOCs and indexes"
                                 
        Case "133": strCaption = "WARNING:"
        Case "134": strCaption = "This step cannot be undone!"
        Case "135": strCaption = "Activate"
        Case "136": strCaption = "Deactivate style limitations"
        
        Case "137": strCaption = "|fffd|  deactivate pink highlighting of paragraphs with non-AUD style"
        Case "138": strCaption = "Deactivate"
        
        'Edit meta data
        Case "140": strCaption = "Edit meta data"
        Case "141": strCaption = "Close"
        Case "142": strCaption = "Save meta data"
        Case "143": strCaption = "Element"
        Case "144": strCaption = "Attribute"
        Case "145": strCaption = "PI"
        Case "146": strCaption = "undetermined"
        
        'Box settings pw
        Case "150": strCaption = "Box settings"
        Case "151": strCaption = "Password"
        Case "152": strCaption = "Cancel"
        Case "153": strCaption = "OK"
        Case "154": strCaption = "Wrong password"
        Case "155": strCaption = "The entered password is not correct."
        
        'Box settings
        Case "160": strCaption = "Box settings"
        Case "161": strCaption = "Box name"
        Case "162": strCaption = "Box icon"
        Case "163": strCaption = "Box title"
        Case "164": strCaption = "Visible"
        Case "165": strCaption = "Cancel"
        Case "166": strCaption = "OK"
        Case "167": strCaption = "Update box title"
        
        'Table info
        Case "170": strCaption = "Box/table info"
        Case "171": strCaption = "|fffd| BOX IS INACTIVE IN THIS AUD |fffd|"
                                    
        'Figure settings
        Case "190": strCaption = "Figure/equation settings"
        Case "191": strCaption = "Figure/equation prefix"
        Case "192": strCaption = "Figure/equation suffix"
        Case "193": strCaption = "Settings are not available in this AUD."
        Case "194": strCaption = "Cancel"
        Case "195": strCaption = "OK"
        
        'Extract content
        Case "200": strCaption = "|fffd| IGNORE |fffd|"
        Case "201": strCaption = "Extract content"
        Case "202": strCaption = "Character style"
        Case "203": strCaption = "Paragraph style"
        Case "204": strCaption = "Table style"
        Case "205": strCaption = "Extract"
        Case "206": strCaption = "Cancel"
        Case "207": strCaption = "Update selected styles"
        Case "208": strCaption = "No suitable content found."
        Case "209": strCaption = "All tables were extracted."
        Case "210": strCaption = "The following wildcards can be used:" & _
                                    vbCr & vbCr & "?  any single character" & _
                                    vbCr & "*  none or more characters" & _
                                    vbCr & "#  any single digit [0|fffd|9]" & _
                                    vbCr & vbCr & "e.g. AUD_h? will find the styles AUD_h1, AUD_h2, etc." & _
                                    vbCr & vbCr & "If you want to search for these wildcard characters, " & _
                                    "they must be given in brackets, " & _
                                    vbCr & "like: [?], [*] or [#]." & _
                                    vbCr & vbCr & "In addition multiple patterns can be combined " & _
                                    "by using an OR operator, e.g. " & _
                                    vbCr & "AUD_h? OR AUD_parttitle*"
        
        'StoryTypes
        Case "211": strCaption = "Main document"
        Case "212": strCaption = "Footnotes"
        Case "213": strCaption = "Endnotes"
        Case "214": strCaption = "Comments"
        Case "215": strCaption = "Text frame"
        Case "216": strCaption = "Even pages header"
        Case "217": strCaption = "Primary header"
        Case "218": strCaption = "Even pages footer"
        Case "219": strCaption = "Primary footer"
        Case "220": strCaption = "First page header"
        Case "221": strCaption = "First page footer"
        Case "222": strCaption = "Footnote separator"
        Case "223": strCaption = "Footnote continuation separator"
        Case "224": strCaption = "Footnote continuation notice"
        Case "225": strCaption = "Endnote separator"
        Case "226": strCaption = "Endnote continuation separator"
        Case "227": strCaption = "Endnote continuation notice"
        
        ' Box dialog (selection insert box/change box type)
        Case "230": strCaption = "Change/insert box"
        Case "231": strCaption = "Change box type"
        Case "232": strCaption = "Insert box"
        Case "233": strCaption = "Cancel"
      
        ' Update figures/equations
        Case "240": strCaption = "Update figures/equations"
        Case "241": strCaption = "Figures:"
        Case "242": strCaption = "updated:"
        Case "243": strCaption = "not updated:"
        Case "244": strCaption = "Inline figures:"
        Case "245": strCaption = "Equations:"
        Case "246": strCaption = "Inline equations:"
        Case "247": strCaption = "Update"
        Case "248": strCaption = "Close"
        Case "249": strCaption = "without/empty caption:"
        Case "250": strCaption = "Icons:"
        Case "251": strCaption = "|fffd| Empty |fffd|"
        Case "252": strCaption = "This function will determine all figure captions in the " & _
                                 "document and update the respective figure names according to the " & _
                                 "naming convention. It is recommended to save the document before proceeding."
        
        ' Copyright dialog
        Case "260": strCaption = "Edit copyright"
        Case "261": strCaption = "Close"
        Case "262": strCaption = "Save copyright"
        Case "263": strCaption = "Creator"
        Case "264": strCaption = "Copyright"
        Case "265": strCaption = "Do you want to delete all copyright data in the document?"
        
        ' Feldfunktionen pr|fffd|fen
        Case "270": strCaption = "Check field functions"
        Case "271": strCaption = "No errors in field functions found"
        Case "272": strCaption = "Errors in field functions found"
        Case "273": strCaption = "Close"
        
        'Extract content - contd.
        Case "280": strCaption = "Order by:"
        Case "281": strCaption = "Location"
        Case "282": strCaption = "Style"
        Case "283": strCaption = "Show enclosing styles"
        Case "284": strCaption = "< Back"
        Case "285": strCaption = "Forward >"
        Case "286": strCaption = "No matches"
        
        'Insert marginal number
        Case "290": strCaption = "Insert marginal number"
        Case "291": strCaption = "Alle following marginal numbers remain unchanged"
        Case "292": strCaption = "Alle following marg. numbers in red will be renumbered"
        Case "293": strCaption = "Insert marginal number"
        Case "294": strCaption = "Insert marginal number"
        Case "295": strCaption = "Activate track change mode"
        Case "296": strCaption = "Insert marginal number"

        'Renumber marginal numbers
        Case "300": strCaption = "Renumber marginal numbers"
        Case "301": strCaption = "Alle marginal numbers in red will be renumbered"
        Case "302": strCaption = "Alle marginal numbers remain unchanged"
        Case "303": strCaption = "Start value:"
        Case "304": strCaption = "Renumber marginal numbers"
        Case "305": strCaption = "Activate track change mode"
        Case "306": strCaption = "Renumber marginal numbers"
        Case "307": strCaption = "The document does not contain any marginal numbers."
        
        'SmartIndex
        Case "310": strCaption = "SmartID info"
        Case "311": strCaption = "Generate/refresh SmartIDs"
        Case "312": strCaption = "Generate/refresh SmartIDs"
        Case "313": strCaption = "Paragraph {x} of {y}"
        Case "314": strCaption = "This function will determine all index-worthy paragraphs in " & _
                                 "the document and generates a unique SmartID per paragraph or " & _
                                 "updates chapter/paragraph numbers in existing SmartIDs. " & _
                                 "It is recommended to save the document before proceeding."
        Case "315": strCaption = "Generate/refresh SmartIDs"
        
        'Miscellaneous
        Case "50000": strCaption = "Delete comments in selection"
        
    End Select
End If

    fctGetFormCaption = strCaption
    
End Function






Attribute VB_Name = "MainFunctions"
Option Explicit

'------------------
'GLOBALE FUNKTIONEN
'------------------

'Aktives Dokument
Public Function fctWordDoc() As Word.Document
    Set fctWordDoc = ActiveDocument
End Function

'Selection Range
Public Function fctGetRng() As Word.Range
    Set fctGetRng = Selection.Range
End Function

'Selection mit Highlight belegen
Public Function fctGetHighlight(strHighlightValue As Integer) As Integer
    Selection.Range.HighlightColorIndex = strHighlightValue
End Function

'Selection Style mit |fffd|bergabewert
Public Function fctGetStyle(strStyleName As String) As Word.Style
    Set fctGetStyle = fctWordDoc.Styles(strStyleName)
End Function

'F|fffd|gt ein unicode-basiertes Sonderzeichen (mit |fffd|bergabewert) an der Markierung ein
Public Function fctGetSpecialCharacter(lngSpecialCharacterNum As Long) As String
    Selection.InsertSymbol CharacterNumber:=lngSpecialCharacterNum, Unicode:=True, Font:="Arial Unicode MS"
End Function

'Tabelle erzeugen mit variablen Reihen und Spalten
Public Function fctGetTable(wdRng As Word.Range, lngNumRows As Long, lngNumColumns As Long) As Word.Table
    Dim wdTbl As Word.Table
    Set wdTbl = fctGetRng.tables.Add(Range:=wdRng, numRows:=lngNumRows, NumColumns:=lngNumColumns)
    wdTbl.Range.Style = wdStyleDefaultParagraphFont
    If Not wdTbl.Range.Paragraphs.Last.Next Is Nothing Then
        If wdTbl.Range.Paragraphs.Last.Next.Range = vbCr Then
            wdTbl.Range.Paragraphs.Last.Next.Range.Style = wdStyleDefaultParagraphFont
        End If
    End If
    Set fctGetTable = wdTbl
End Function

'|fffd|bergibt die aktuelle Word-Version
Public Function fctGetWordVersion() As Integer
    fctGetWordVersion = CInt(Split(Application.Version, ".")(0))
End Function

'Gibt True zur|fffd|ck, falls es sich um ein MAC-OS handelt
Public Function fctIsMac() As Boolean
    fctIsMac = InStr(1, Application.System.OperatingSystem, "Macintosh")
End Function

'Gibt True zur|fffd|ck, falls es sich um Office 2011 (Version 14) unter Mac handelt
Public Function fctIsMac2011() As Boolean
    fctIsMac2011 = fctIsMac And fctGetWordVersion = 14
End Function

' Gibt True f|fffd|r Win + Office > 2003 (11) oder Mac + Office > 2011 (14)
Public Function fctIsRibbonVersion() As Boolean
    fctIsRibbonVersion = (Not fctIsMac And fctGetWordVersion > 11) Or _
        (fctIsMac And fctGetWordVersion > 14)
End Function

'Aktuellen Font aus AUD_BaseStyle auslesen
Public Function fctGetFontName() As String
    With ActiveDocument.Styles(AUD_basestyle)
        fctGetFontName = .Font.Name
    End With
End Function

'Fragt Language-ID ab
Public Function fctGetLanguage() As String
    fctGetLanguage = fctWordDoc.CustomDocumentProperties("strLanguageID")
End Function

'Legt den CaptionSeparator aus Dokumentvarible fest; Wert als Dezimal eintragen
Public Function fctGetCaptionSeparator() As String
    fctGetCaptionSeparator = ActiveDocument.CustomDocumentProperties("strCaptionSeparator")
End Function

'Zufallszahl generieren
Public Function fctGetRandomNumber(sglUpper As Single, sglLower As Single) As Single
    fctGetRandomNumber = Int((sglUpper - sglLower + 1) * Rnd + sglLower)
End Function

'Abstand Spitzmarke
Public Function fctGetSpaceParahead()
Dim strSpaceParahead As String

    strSpaceParahead = ActiveDocument.CustomDocumentProperties("strSpaceParahead").Value
    
    fctGetSpaceParahead = strSpaceParahead

End Function

'Abstand Tabellen-/Abbildungslegende
Public Function fctGetSpaceTabFigEqu()
Dim strSpaceTabFigEqu As String

    strSpaceTabFigEqu = ActiveDocument.CustomDocumentProperties("strSpaceTabFigEqu").Value
    
    fctGetSpaceTabFigEqu = strSpaceTabFigEqu

End Function

'Letztes Zeichen einer Auswahl
Public Function fctGetLastCharacter() As Boolean

    If Asc(fctGetRng.Characters.Last) = 13 Then
        Selection.End = Selection.End - 1
        fctGetLastCharacter = True
    End If
    
End Function

'Gibt True zur|fffd|ck, wenn vor dem |fffd|bergebenen Bereich eine (verschachtelte) Tabelle steht
Function fctSelectionHasPrecedingTable(objRng As Range) As Boolean
    Dim iNestingLevelCurrent As Integer
    Dim iNestingLevelPrevious As Integer
    Dim objRngStart As Range
    Set objRngStart = objRng.Duplicate
    objRngStart.End = objRngStart.start
    
    If objRngStart.Information(wdWithInTable) Then
        iNestingLevelCurrent = objRngStart.tables.nestingLevel
    End If
    
    If Not objRngStart.Characters.Last.Previous Is Nothing Then
        If objRngStart.Characters.Last.Previous.Information(wdWithInTable) Then
            iNestingLevelPrevious = objRngStart.Characters.Last.Previous.tables.nestingLevel
        End If
    End If

    fctSelectionHasPrecedingTable = iNestingLevelCurrent < iNestingLevelPrevious
End Function

'Gibt True zur|fffd|ck, wenn nach dem |fffd|bergebenen Bereich eine (verschachtelte) Tabelle steht
Function fctSelectionHasFollowingTable(objRng As Range) As Boolean
    Dim iNestingLevelCurrent As Integer
    Dim iNestingLevelFollowing As Integer
    Dim objRngEnd1 As Range
    Set objRngEnd1 = objRng.Duplicate
    objRngEnd1.start = objRng.Characters.Last.start
    
    Dim objRngEnd2 As Range
    Set objRngEnd2 = objRng.Duplicate
    objRngEnd2.start = objRng.End

    If objRngEnd1.Information(wdWithInTable) Then
        iNestingLevelCurrent = objRngEnd1.tables.nestingLevel
    End If
    
    If objRngEnd2.Information(wdWithInTable) Then
        iNestingLevelFollowing = objRngEnd2.tables.nestingLevel
    End If

    fctSelectionHasFollowingTable = iNestingLevelCurrent < iNestingLevelFollowing
End Function

' Gibt alle Tabellen (auch verschachtelte) der Selektion als Array zur|fffd|ck
Function fctGetTablesInSelection(objRange As Range) As Table()
    Dim arrTables() As Table
    Dim numTables As Long
   
    numTables = fctGetNumDocumentTables(objRange.tables, numTables)

    If numTables = 0 Then
        ReDim arrTables(0 To 0)
    ElseIf numTables > 0 Then
        ReDim arrTables(0 To numTables - 1)
    End If
    
    fctGetTablesInSelection = fctIterateTables(objRange.tables, arrTables, 0)
    
End Function

' Gibt alle Tabellen (auch verschachtelte) des Dokuments als Array zur|fffd|ck
Function fctGetDocumentTables() As Table()
    Dim arrTables() As Table
    Dim numTables As Long
    Dim firstEmptyIndex As Long
    
    Dim rngStory As Range

    For Each rngStory In ActiveDocument.StoryRanges
        numTables = fctGetNumDocumentTables(rngStory.tables, numTables)
        Do While Not (rngStory.NextStoryRange Is Nothing)
            Set rngStory = rngStory.NextStoryRange
            numTables = fctGetNumDocumentTables(rngStory.tables, numTables)
        Loop
    Next rngStory

    If numTables = 0 Then
        ReDim arrTables(0 To 0)
    ElseIf numTables > 0 Then
        ReDim arrTables(0 To numTables - 1)
    End If
    
    For Each rngStory In ActiveDocument.StoryRanges
        arrTables = fctIterateTables(rngStory.tables, arrTables, firstEmptyIndex)
        firstEmptyIndex = fctGetFirstEmptyIndex(arrTables)
        Do While Not (rngStory.NextStoryRange Is Nothing)
            Set rngStory = rngStory.NextStoryRange
            arrTables = fctIterateTables(rngStory.tables, arrTables, firstEmptyIndex)
            firstEmptyIndex = fctGetFirstEmptyIndex(arrTables)
        Loop
    Next rngStory
    
    fctGetDocumentTables = arrTables
    
End Function

' Gibt die Anzahl aller Tabellen (auch verschachtelter) des Dokuments zur|fffd|ck
Function fctGetNumDocumentTables(objTables As Word.tables, numTables As Long) As Long
    Dim objTable As Table
    Dim objCell As Cell
    For Each objTable In objTables
        numTables = numTables + 1
        For Each objCell In objTable.Range.Cells
            fctGetNumDocumentTables objCell.tables, numTables
        Next objCell
    Next objTable
    fctGetNumDocumentTables = numTables
End Function

' Durchl|fffd|uft rekursiv alle Tabellen und darin enthaltenen Zellen
Function fctIterateTables(objTables As Word.tables, arrTables() As Table, tableIndex As Long) As Table()
    Dim objTable As Table
    Dim objCell As Cell
    For Each objTable In objTables
        Set arrTables(tableIndex) = objTable
        tableIndex = tableIndex + 1
        For Each objCell In objTable.Range.Cells
            fctIterateTables objCell.tables, arrTables, tableIndex
        Next objCell
    Next objTable
    fctIterateTables = arrTables
End Function

' Gib den ersten Eintrag des Arrays mit Nothing zur|fffd|ck
Function fctGetFirstEmptyIndex(arrTables() As Table) As Long
    Dim i As Long
    For i = 0 To UBound(arrTables)
        If arrTables(i) Is Nothing Then
            fctGetFirstEmptyIndex = i
            Exit Function
        End If
    Next i
    fctGetFirstEmptyIndex = -1
End Function

' Pr|fffd|ft, ob ein String mit dem |fffd|bergebenen Teilstring beginnt
Function fctStartsWith(strTest As String, prefix As String) As Boolean
    fctStartsWith = Left(strTest, Len(prefix)) = prefix
End Function

' Pr|fffd|ft, ob ein String mit dem |fffd|bergebenen Teilstring endet
Function fctEndsWith(strTest As String, suffix As String) As Boolean
    fctEndsWith = Right(strTest, Len(suffix)) = suffix
End Function

' Ersetzt im |fffd|bergebenen Pfad \ durch / auf MAC, optional wird \ durch \\ ersetzt
Function fctReplaceSlashes(strFile As String, escapeBackslash As Boolean) As String
    Dim strFileReplaces As String
    strFileReplaces = strFile
    If fctIsMac Then
        fctReplaceSlashes = Replace(strFile, "\", "/")
        Exit Function
    End If
    If escapeBackslash Then
        strFileReplaces = Replace(strFile, "\", "\\")
    End If
    fctReplaceSlashes = strFileReplaces
End Function

' Liefert aus dem |fffd|bergebenen Dateipfad den Dateinamen ohne Dateiendung
Function fctFileNameWithoutExt(strPath As String) As String
    Dim strTemp As String
    strTemp = Mid$(strPath, InStrRev(strPath, Application.PathSeparator) + 1)
    If InStr(strTemp, ".") > 0 Then
        fctFileNameWithoutExt = Left$(strTemp, InStrRev(strTemp, ".") - 1)
    Else
        fctFileNameWithoutExt = strTemp
    End If
End Function
 
' Liefert aus dem |fffd|bergebenen Dateipfad den Dateinamen mit Dateiendung
Function fctFileNameWithExt(strPath As String) As String
    fctFileNameWithExt = Mid$(strPath, InStrRev(strPath, Application.PathSeparator) + 1)
End Function

' Gibt den gesamten Text des |fffd|bergebenen Absatzes ohne Absatzmarke zur|fffd|ck
Function fctGetParagraphText(objParagraph As Paragraph) As String
    Dim r As Range
    Set r = objParagraph.Range
    r.End = r.Characters.Last.End - 1
    fctGetParagraphText = r.Text
End Function

' Gibt die Range des |fffd|bergebenen Absatzes ohne Absatzmarke zur|fffd|ck
Function fctGetParagraphRange(objParagraph As Paragraph) As Range
    Dim r As Range
    Set r = objParagraph.Range
    r.End = r.Characters.Last.End - 1
    Set fctGetParagraphRange = r
End Function

' Gibt true zur|fffd|ck, wenn Cursor am Absatzanfang platziert ist
Function fctIsCursorAtParagraphStart(r As Range) As Boolean
    If r.start = r.Paragraphs(1).Range.Characters.First.start Then
        fctIsCursorAtParagraphStart = True
    End If
End Function

' Gibt true zur|fffd|ck, wenn Cursor am Absatzende platziert ist
Function fctIsCursorAtParagraphEnd(r As Range) As Boolean
    If r.End = r.Paragraphs(1).Range.Characters.Last.End - 1 Then
        fctIsCursorAtParagraphEnd = True
    End If
End Function

' Gibt true zur|fffd|ck, wenn |fffd|bergebener Absatz leer ist
Function fctIsParagraphEmpty(objParagraph As Paragraph) As Boolean
    fctIsParagraphEmpty = Len(fctGetParagraphText(objParagraph)) = 0
End Function

' Gibt n|fffd|chsten/vorherigen Absatz zur|fffd|ck, welcher das zu suchende Absatzformat enth|fffd|lt
Function fctFindParagraphWithStyle(currentParagraph As Paragraph, _
            isForwardSearch As Boolean, searchStyle As String) As Paragraph
    Dim objParagraph As Paragraph
    Set objParagraph = currentParagraph
    
    If objParagraph Is Nothing Then Exit Function
    
    Do
        If Not isForwardSearch Then
            Set objParagraph = objParagraph.Previous
        Else
             Set objParagraph = objParagraph.Next
        End If
        
        If objParagraph Is Nothing Then
            Exit Do
        End If
        
        If objParagraph.Style.NameLocal = searchStyle And _
            Not fctIsParagraphEmpty(objParagraph) Then
            Set fctFindParagraphWithStyle = objParagraph
            Exit Do
        End If
    Loop
End Function

' F|fffd|gt Array-Elemente durch beliebigen Delimiter getrennt zusammen
Function fctArrayJoin(maxElements As Variant, delimiter As String, _
                        Optional prefix As String, Optional suffix As String) As String
    Dim elements() As String
    Dim counter As Integer
    Dim elementsJoined As String
    Dim element As Variant
    
    For Each element In maxElements
        If element <> "" Then
            ReDim Preserve elements(counter) As String
            elements(counter) = element
            counter = counter + 1
        End If
    Next

    elementsJoined = Join(elements, delimiter)
    If elementsJoined <> "" Then
        fctArrayJoin = prefix & elementsJoined & suffix
    End If
End Function

' Sortiert Array
Public Sub fctArraySort(vArray As Variant, inLow As Long, inHi As Long)

  Dim pivot   As Variant
  Dim tmpSwap As Variant
  Dim tmpLow  As Long
  Dim tmpHi   As Long

  tmpLow = inLow
  tmpHi = inHi

  pivot = vArray((inLow + inHi) \ 2)

  While (tmpLow <= tmpHi)

     While (vArray(tmpLow) < pivot And tmpLow < inHi)
        tmpLow = tmpLow + 1
     Wend

     While (pivot < vArray(tmpHi) And tmpHi > inLow)
        tmpHi = tmpHi - 1
     Wend

     If (tmpLow <= tmpHi) Then
        tmpSwap = vArray(tmpLow)
        vArray(tmpLow) = vArray(tmpHi)
        vArray(tmpHi) = tmpSwap
        tmpLow = tmpLow + 1
        tmpHi = tmpHi - 1
     End If

  Wend

  If (inLow < tmpHi) Then fctArraySort vArray, inLow, tmpHi
  If (tmpLow < inHi) Then fctArraySort vArray, tmpLow, inHi

End Sub

' Sortiert Array mit Elementen vom Typ Range nach Start aufsteigend
Public Sub fctArrayOfRangeSortAsc(vArray() As Range, inLow As Long, inHi As Long)

  Dim pivot   As Range
  Dim tmpSwap As Range
  Dim tmpLow  As Long
  Dim tmpHi   As Long

  tmpLow = inLow
  tmpHi = inHi

  Set pivot = vArray((inLow + inHi) \ 2)

  While (tmpLow <= tmpHi)

     While (vArray(tmpLow).start < pivot.start And tmpLow < inHi)
        tmpLow = tmpLow + 1
     Wend

     While (pivot.start < vArray(tmpHi).start And tmpHi > inLow)
        tmpHi = tmpHi - 1
     Wend

     If (tmpLow <= tmpHi) Then
        Set tmpSwap = vArray(tmpLow)
        Set vArray(tmpLow) = vArray(tmpHi)
        Set vArray(tmpHi) = tmpSwap
        tmpLow = tmpLow + 1
        tmpHi = tmpHi - 1
     End If

  Wend

  If (inLow < tmpHi) Then fctArrayOfRangeSortAsc vArray, inLow, tmpHi
  If (tmpLow < inHi) Then fctArrayOfRangeSortAsc vArray, tmpLow, inHi

End Sub

' Sortiert Array mit Elementen vom Typ Range nach Start absteigend
Public Sub fctArrayOfRangeSortDesc(vArray() As Range, inLow As Long, inHi As Long)

  Dim pivot   As Range
  Dim tmpSwap As Range
  Dim tmpLow  As Long
  Dim tmpHi   As Long

  tmpLow = inLow
  tmpHi = inHi

  Set pivot = vArray((inLow + inHi) \ 2)

  While (tmpLow <= tmpHi)

     While (vArray(tmpLow).start > pivot.start And tmpLow < inHi)
        tmpLow = tmpLow + 1
     Wend

     While (pivot.start > vArray(tmpHi).start And tmpHi > inLow)
        tmpHi = tmpHi - 1
     Wend

     If (tmpLow <= tmpHi) Then
        Set tmpSwap = vArray(tmpLow)
        Set vArray(tmpLow) = vArray(tmpHi)
        Set vArray(tmpHi) = tmpSwap
        tmpLow = tmpLow + 1
        tmpHi = tmpHi - 1
     End If

  Wend

  If (inLow < tmpHi) Then fctArrayOfRangeSortDesc vArray, inLow, tmpHi
  If (tmpLow < inHi) Then fctArrayOfRangeSortDesc vArray, tmpLow, inHi

End Sub

' Gibt die Anzahl Elemente im |fffd|bergebenen Array zur|fffd|ck bzw. -1, falls das Array keine Elemente enh|fffd|lt
Function fctArrayCount(arrayToCount As Variant) As Long
    Dim arrayCount As Long
    arrayCount = -1
    On Error Resume Next
    arrayCount = UBound(arrayToCount)
    On Error GoTo 0
    fctArrayCount = arrayCount
End Function

' Pr|fffd|ft, ob das Element needle im Array haystack enthalten ist
Function fctInArray(needle As String, haystack As Variant) As Boolean
    
    Dim i As Long
    Dim arrayCount As Long
    arrayCount = fctArrayCount(haystack)
    
    If arrayCount = -1 Then Exit Function
    
    For i = 0 To arrayCount
        If haystack(i) = needle Then
            fctInArray = True
            Exit Function
        End If
    Next

End Function

' F|fffd|gt dem |fffd|bergebenen Array ein Element hinzu
Sub fctArrayPush(arrToPush As Variant, valueToPush As Variant)
    Dim currentIndex As Long
    currentIndex = fctArrayCount(arrToPush) + 1
    If currentIndex = 0 Then
        ReDim arrToPush(0)
    Else
        ReDim Preserve arrToPush(currentIndex)
    End If
    arrToPush(currentIndex) = valueToPush
End Sub

' F|fffd|gt dem |fffd|bergebenen Array ein Element vom Typ Object hinzu
Sub fctArrayPushObject(arrToPush As Variant, valueToPush As Object)
    Dim currentIndex As Long
    currentIndex = fctArrayCount(arrToPush) + 1
    If currentIndex = 0 Then
        ReDim arrToPush(0)
    Else
        ReDim Preserve arrToPush(currentIndex)
    End If
    Set arrToPush(currentIndex) = valueToPush
End Sub

' Gibt den Bereich des letzten Punktes einer Range zur|fffd|ck
Public Function fctGetExtensionSeparator(objRange As Range) As Range

    With objRange.Find
        .Text = "."
        .Forward = False
        .Execute
    End With
    
    If objRange.Find.Found Then
        Set fctGetExtensionSeparator = objRange
    End If
End Function

' Gibt true zur|fffd|ck, wenn Tabellen-Format mit zu suchendem Format |fffd|bereinstimmt
Function fctIsMatchingTableStyle(objRange As Range, ByVal selectedStyle As String, _
    Optional isPatternSearch As Boolean) As Boolean
    
    If objRange.tables.Count > 0 Then
        If isPatternSearch Then
            fctIsMatchingTableStyle = objRange.tables(1).Style Like selectedStyle
        Else
            fctIsMatchingTableStyle = objRange.tables(1).Style = selectedStyle
        End If
    End If
End Function

' Liefert, sofern vorhanden, den Alias zur|fffd|ck, ansonsten den Formatnamen
Function fctGetFilteredStyleName(strStyleName As String) As String
    If InStr(strStyleName, ";") > 0 Then
        strStyleName = Split(strStyleName, ";")(1)
    End If
    
    fctGetFilteredStyleName = strStyleName
End Function

' Gibt die |fffd|bergebene Range ohne Absatzmarke zur|fffd|ck
Function fctRemoveParagraphMarkFromRange(rngStory As Range) As Range
    Dim objRange As Range
    Set objRange = rngStory.Duplicate
    If objRange.Characters.Last = Chr(13) Or objRange.Characters.Last = Chr(13) & Chr(7) Then
        objRange.End = objRange.End - 1
    End If
    Set fctRemoveParagraphMarkFromRange = objRange
End Function

' Gibt den LRM aus der DocVar lrm zur|fffd|ck (Left-to-right mark U+200E)
Function fctLrm() As String
    On Error Resume Next
    fctLrm = fctWordDoc.CustomDocumentProperties("lrm")
    On Error GoTo 0
End Function

' Erweitert eine Range nach links und nach rechts um das angegebene Zeichenformat
Function fctExtendFormattedRange(objRange As Range, objStyle As Style) As Range

    Dim objRangeTempStart As Range
    Dim objRangeTempEnd As Range
    Dim firstCharInParaStart As Long
    Dim lastCharInParaEnd As Long
    Dim rangeStart As Long
    Dim rangeEnd As Long
   
    rangeStart = objRange.start
    rangeEnd = objRange.End
   
    firstCharInParaStart = objRange.Paragraphs(1).Range.start
    lastCharInParaEnd = objRange.Paragraphs.Last.Range.End
    
    Set objRangeTempStart = objRange.Duplicate
    
    Do
        objRangeTempStart.Collapse wdCollapseStart
        rangeStart = objRangeTempStart.start
        objRangeTempStart.start = objRangeTempStart.start - 1
    Loop While (objRangeTempStart.start < rangeStart And _
        objRangeTempStart.start >= firstCharInParaStart And _
        objRangeTempStart.Style.NameLocal = objStyle.NameLocal)
    
    If objRangeTempStart.start < rangeStart Then
        objRangeTempStart.start = objRangeTempStart.start + 1
    End If
    
    objRange.start = objRangeTempStart.start
    
    Set objRangeTempEnd = objRange.Duplicate
    objRangeTempEnd.Collapse wdCollapseEnd
 
    Do
        rangeEnd = objRangeTempEnd.End
        objRangeTempEnd.Collapse wdCollapseEnd
        objRangeTempEnd.End = objRangeTempEnd.End + 1
    Loop While (objRangeTempEnd.End > rangeEnd And _
        objRangeTempEnd.End <= lastCharInParaEnd And _
        objRangeTempEnd.Style.NameLocal = objStyle.NameLocal)
    
    If objRangeTempEnd.End > rangeEnd Then
        objRangeTempEnd.End = objRangeTempEnd.End - 1
    End If
    
    objRange.End = objRangeTempEnd.End
    
    Set fctExtendFormattedRange = objRange

End Function

' Pr|fffd|ft ob die |fffd|bergebene Range L|fffd|schungen enth|fffd|lt
Function fctRangeHasDeletions(objRange As Range) As Boolean
    Dim objRevision As Revision
    Dim objRangeCopy As Range
    Dim i As Long
    If objRange Is Nothing Then Exit Function
    Set objRangeCopy = objRange.Duplicate
    On Error Resume Next
    For i = 1 To objRangeCopy.revisions.Count
        Set objRevision = objRangeCopy.revisions(i)
        If objRevision.Type = wdRevisionDelete Or _
                objRevision.Type = 14 Then ' 14 = wdRevisionMovedFrom
            fctRangeHasDeletions = True
            On Error GoTo 0
            Exit Function
        End If
    Next
    On Error GoTo 0
End Function

' Setzt den Zoom auf 150 f|fffd|r das |fffd|bergebene Formular unter MAC
Sub fctSetZoom(objUserForm As Object)
    If Not fctIsMac Then Exit Sub
    Dim zoomFactor As Integer
    zoomFactor = 150
    objUserForm.Zoom = zoomFactor
    objUserForm.Height = objUserForm.Height * (zoomFactor / 100) - 10
    objUserForm.Width = objUserForm.Width * (zoomFactor / 100)
End Sub

' Setzt |fffd|berarbeitsmodus auf "Abgeschlossen: Markups anzeigen" und zeigt gel|fffd|schten Text durchgestrichen
' Werte vor der Umstellung werden als Array zur|fffd|ckgegeben
Function fctSetTrackChangeModeShowMarkupShowDeleted() As Variant

    Dim objApplication As Object
    Dim currentMode(3) As Variant
    
    Set objApplication = GetObject(, "Word.Application")
    
    currentMode(0) = ActiveWindow.View.RevisionsView
    currentMode(1) = ActiveWindow.View.ShowRevisionsAndComments
    currentMode(2) = objApplication.Options.DeletedTextMark
    
    If fctGetWordVersion > 11 Then
        currentMode(3) = objApplication.Options.MoveFromTextMark
    End If
    
    Application.ScreenUpdating = False
    
    ActiveWindow.View.RevisionsView = wdRevisionsViewFinal
    ActiveWindow.View.ShowRevisionsAndComments = True
    
    objApplication.Options.DeletedTextMark = _
        fctGetWdDeletedTextMarkStrikeThrough
    
    If fctGetWordVersion > 11 Then
        objApplication.Options.MoveFromTextMark = _
            fctGetWdMoveFromTextMarkStrikeThrough
    End If
    
    fctSetTrackChangeModeShowMarkupShowDeleted = currentMode

End Function

' Setzt |fffd|berarbeitsmodus auf "Abgeschlossen: Markups anzeigen" und versteckt gel|fffd|schten Text
' Werte vor der Umstellung werden als Array zur|fffd|ckgegeben
Function fctSetTrackChangeModeShowMarkupHideDeleted() As Variant
    
    Dim objApplication As Object
    Dim currentMode(3) As Variant
    
    Set objApplication = GetObject(, "Word.Application")
    
    currentMode(0) = ActiveWindow.View.RevisionsView
    currentMode(1) = ActiveWindow.View.ShowRevisionsAndComments
    currentMode(2) = objApplication.Options.DeletedTextMark
    
    If fctGetWordVersion > 11 Then
        currentMode(3) = objApplication.Options.MoveFromTextMark
    End If
    
    Application.ScreenUpdating = False
    
    ActiveWindow.View.RevisionsView = wdRevisionsViewFinal
    ActiveWindow.View.ShowRevisionsAndComments = True
    
    objApplication.Options.DeletedTextMark = _
        fctGetWdDeletedTextMarkHidden
    
    If fctGetWordVersion > 11 Then
        objApplication.Options.MoveFromTextMark = _
            fctGetWdMoveFromTextMarkHidden
    End If
    
    fctSetTrackChangeModeShowMarkupHideDeleted = currentMode

End Function

' Setzt |fffd|berarbeitungsmodus/-optionen auf Werte in |fffd|bergebenem Array zur|fffd|ck
Sub fctRestoreTrackChangeMode(currentMode As Variant)
    
    Dim objApplication As Object
    Set objApplication = GetObject(, "Word.Application")
    
    ActiveWindow.View.RevisionsView = currentMode(0)
    ActiveWindow.View.ShowRevisionsAndComments = currentMode(1)
    objApplication.Options.DeletedTextMark = currentMode(2)
    
    If fctGetWordVersion > 11 Then
        objApplication.Options.MoveFromTextMark = currentMode(3)
    End If
    
    Application.ScreenUpdating = True

End Sub

' Gibt abh|fffd|ngig vom OS den korrekten Wert f|fffd|r wdDeletedTextMarkHidden zur|fffd|ck (Win 0, Mac 7)
Function fctGetWdDeletedTextMarkHidden()
    Dim deletedTextMarkHidden As Long
    deletedTextMarkHidden = wdDeletedTextMarkHidden
    If fctIsMac Then
        deletedTextMarkHidden = 7
    End If
    fctGetWdDeletedTextMarkHidden = deletedTextMarkHidden
End Function

' Gibt abh|fffd|ngig vom OS den korrekten Wert f|fffd|r wdMoveFromTextMarkHidden zur|fffd|ck (Win 0, Mac 7)
Function fctGetWdMoveFromTextMarkHidden()
    Dim moveFromTextMarkHidden As Long
    moveFromTextMarkHidden = wdMoveFromTextMarkHidden
    If fctIsMac Then
        moveFromTextMarkHidden = 7
    End If
    fctGetWdMoveFromTextMarkHidden = moveFromTextMarkHidden
End Function

' Gibt abh|fffd|ngig vom OS den korrekten Wert f|fffd|r wdDeletedTextMarkStrikeThrough zur|fffd|ck (Win 1, Mac 6)
Function fctGetWdDeletedTextMarkStrikeThrough()
    Dim deletedTextMarkStrikeThrough As Long
    deletedTextMarkStrikeThrough = wdDeletedTextMarkStrikeThrough
    If fctIsMac Then
        deletedTextMarkStrikeThrough = 6
    End If
    fctGetWdDeletedTextMarkStrikeThrough = deletedTextMarkStrikeThrough
End Function

' Gibt abh|fffd|ngig vom OS den korrekten Wert f|fffd|r wdMoveFromTextMarkStrikeThrough zur|fffd|ck (Win 2, Mac 6)
Function fctGetWdMoveFromTextMarkStrikeThrough()
    Dim moveFromTextMarkStrikeThrough As Long
    moveFromTextMarkStrikeThrough = wdMoveFromTextMarkStrikeThrough
    If fctIsMac Then
        moveFromTextMarkStrikeThrough = 6
    End If
    fctGetWdMoveFromTextMarkStrikeThrough = moveFromTextMarkStrikeThrough
End Function

' Gibt den Range Start-Wert (= Position vor FF-Klammer) der Feldfunktion zur|fffd|ck
Function fctGetFieldStart(objField As Field) As Long
    Dim objRange As Range
    Set objRange = objField.Code
    objRange.Collapse wdCollapseStart
    objRange.Move wdCharacter, -1
    fctGetFieldStart = objRange.start
End Function

' Gibt den Range End-Wert (= Position nach FF-Klammer) der Feldfunktion zur|fffd|ck
Function fctGetFieldEnd(objField As Field) As Long
    Dim objRange As Range
    Set objRange = objField.Code
    objRange.Collapse wdCollapseEnd
    objRange.Move wdCharacter, 1
    fctGetFieldEnd = objRange.start
End Function

' Gibt die gesamte Range einer Feldfunktion inkl. Feldfunktionsklammern zur|fffd|ck
Function fctGetFieldRange(objField As Field) As Range
    Dim objRange As Range
    Set objRange = objField.Code
    objRange.start = fctGetFieldStart(objField)
    objRange.End = fctGetFieldEnd(objField)
    Set fctGetFieldRange = objRange
End Function

' Gibt true zur|fffd|ck, wenn ein wantedEmptyPara-Absatz eingef|fffd|gt oder korrigiert wurde
Function fctAddedWantedEmptyParagraph(objTable As Table) As Boolean
  
    Dim objRange As Range
    Dim wantedEmptyParaStyle As String
    Dim objParagraph As Paragraph
    Dim objParagraphLast As Paragraph
    
    Set objParagraph = objTable.Range.Paragraphs.Last.Next
    
    wantedEmptyParaStyle = AUD_wanted_empty_para_after_word_table
    If objTable.Style = AUD_tf_marginal_note Then
        wantedEmptyParaStyle = AUD_wanted_empty_para_after_marginal_note
    End If
    
    If objParagraph.Style.NameLocal = wantedEmptyParaStyle Then Exit Function
    
    If fctIsWantedEmptyParagraphStyle(objParagraph) Then
        objParagraph.Style = wantedEmptyParaStyle
    ElseIf fctGetParagraphNestingLevel(objParagraph) = objTable.nestingLevel Then
        Set objParagraphLast = objTable.Range.Paragraphs.Last
        objTable.rows.Add
        Set objRange = objParagraphLast.Range
        objRange.Collapse wdCollapseEnd
        objRange.End = objParagraph.Range.start
        objRange.Cells.Merge
        objRange.rows.ConvertToText
        objRange.Style = wantedEmptyParaStyle
    Else
        Set objRange = objParagraph.Range
        objRange.Collapse wdCollapseStart
        objRange.InsertParagraphBefore
        objTable.Range.Paragraphs.Last.Next.Style = wantedEmptyParaStyle
    End If
    
    fctAddedWantedEmptyParagraph = True
    
End Function

' Gibt das NestingLevel der ersten Tabelle des |fffd|bergebenen Absatzes zur|fffd|ck
' bzw. -1, wenn dieser keine Tabelle enth|fffd|lt
Function fctGetParagraphNestingLevel(objParagraph As Paragraph) As Long
    Dim nestingLevel As Long
    nestingLevel = -1
    If objParagraph.Range.tables.Count > 0 Then
        nestingLevel = objParagraph.Range.tables(1).nestingLevel
    End If
    fctGetParagraphNestingLevel = nestingLevel
End Function

' Gibt true zur|fffd|ck, wenn auf dem |fffd|bergebenen Absatz ein wantedEmptyPara-Format angewendet wird
Function fctIsWantedEmptyParagraphStyle(objParagraph As Paragraph) As Boolean
    fctIsWantedEmptyParagraphStyle = _
        objParagraph.Style.NameLocal = AUD_wanted_empty_para_after_marginal_note Or _
        objParagraph.Style.NameLocal = AUD_wanted_empty_para_after_word_table
End Function

' Start custom record if Win and Version >= 14 (=2010)
Function fctStartRecordUndo(customRecordName As String) As Object
    If Not fctIsMac And fctGetWordVersion >= 14 Then
        Set fctStartRecordUndo = fctStartRecordUndoWin(customRecordName)
    End If
End Function

' Start custom record
Function fctStartRecordUndoWin(customRecordName As String) As Object
    Dim objUndoRecord As UndoRecord
    Set objUndoRecord = Application.UndoRecord
    objUndoRecord.StartCustomRecord (customRecordName)
    Set fctStartRecordUndoWin = objUndoRecord
End Function

' End custom record if Win and Version >= 14 (=2010)
Sub fctEndRecordUndo(objUndoRecord As Object)
    If objUndoRecord Is Nothing Then Exit Sub
    If Not fctIsMac And fctGetWordVersion >= 14 Then
        objUndoRecord.EndCustomRecord
    End If
End Sub

' Pr|fffd|ft f|fffd|r die |fffd|bergebenen Formatnamen ob diese existieren und gibt dann jeweils
' die Eigenschaft .NameLocal des Style-Objekts zur|fffd|ck
Function fctGetStylesByStyleNames(styleNames As Variant) As Variant

    Dim objStyle
    Dim objStyles() As Variant
    Dim numStyleNames As Integer
    Dim i As Long

    numStyleNames = fctArrayCount(styleNames)
    If numStyleNames = -1 Then Exit Function

    For i = 0 To numStyleNames
        Set objStyle = Nothing
        On Error Resume Next
        Set objStyle = ActiveDocument.Styles(styleNames(i))
        On Error GoTo 0
        If Not objStyle Is Nothing Then
            fctArrayPush objStyles, objStyle.NameLocal
        End If
    Next

    fctGetStylesByStyleNames = objStyles

End Function

' Speziell f|fffd|r UserForms unter #special characters#
' Setzt alternative Schriftart, wenn Word-Version > 11 (11 = Word 2003)
Sub fctSetAlternativeLabelFont(objUserForm As UserForm, fontName As String, altFontName As String)
    Dim objControl As control
    If fctGetWordVersion > 11 Then Exit Sub
    For Each objControl In objUserForm.Controls
        If Left(objControl.Name, 4) = "lbl_" Then
            If objControl.Font.Name = fontName Then
                objControl.Font.Name = altFontName
            End If
        End If
    Next
End Sub
Attribute VB_Name = "MainSub"
Option Explicit

Public Sub InsertParaAfterTable(strStyleAfterTable As String)

    Dim wdCurrentFigureTbl As Word.Table
    Dim wdRng As Word.Range
    
    If Selection.Information(wdWithInTable) = True Then
        Set wdCurrentFigureTbl = Selection.tables(1)
        Set wdRng = wdCurrentFigureTbl.Range
    
        wdRng.SetRange start:=wdRng.End, End:=wdRng.End
        wdRng.InsertParagraphAfter
        wdRng.Style = fctWordDoc.Styles(strStyleAfterTable)
        wdRng.Style = wdStyleDefaultParagraphFont
    Else
        Selection.InsertParagraphAfter
        Selection.Style = fctWordDoc.Styles(strStyleAfterTable)
        Selection.Style = wdStyleDefaultParagraphFont
    End If

End Sub

Sub GetCaption(strCaptionText As String, strCaptionIdentifier As String, strCaptionWithNumYesNo As String, endOfType As Long)

Dim fldChpNum As Word.Field
Dim fldRunNum As Word.Field
Dim strChpNum As String
Dim strSSwitch As String

    Application.CaptionLabels.Add (strCaptionIdentifier)
    
    With CaptionLabels(strCaptionIdentifier)
        .NumberStyle = wdCaptionNumberStyleArabic
        .IncludeChapterNumber = True
    End With
    
    If strCaptionText <> fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
        InsertSpecialText (strCaptionText)
    End If
    
    Selection.EndOf endOfType
    
    If strCaptionWithNumYesNo = "ChapNumFigNum" Then
    
        Set fldChpNum = fctWordDoc.Fields.Add(Range:=Selection.Range, Type:=wdFieldStyleRef, Text:="\s " & AUD_h1)
            
        On Error Resume Next
            strChpNum = CInt(Replace(fldChpNum.Result, fctWordDoc.CustomDocumentProperties("lrm"), ""))
        On Error GoTo 0
        
            If strChpNum = "" Then
                fldChpNum.Delete
            Else
                Selection.EndOf endOfType
                Selection.Range.Text = fctGetCaptionSeparator
            End If
                
    End If
                
    Selection.EndOf endOfType
    
    strSSwitch = ""
    If strCaptionWithNumYesNo = "ChapNumFigNum" And strChpNum <> "" Then
        strSSwitch = " \s 1"
    End If
    
    Set fldRunNum = fctWordDoc.Fields.Add(Range:=Selection.Range, Type:=wdFieldSequence, Text:=strCaptionIdentifier & " \* ARABIC" & strSSwitch)
    Selection.EndOf endOfType

    If strCaptionIdentifier <> fctWordDoc.CustomDocumentProperties("strEquationCaptionIdentifier") Then
        InsertSpecialText fctGetSpaceTabFigEqu
        Selection.EndOf endOfType
    End If
                
End Sub

Sub InsertSpecialText(strCrossRef As String)

    Dim i As Long
    
    Dim strCrossRefParts() As String
    Dim strCrossRefPart As String
    
    Dim strCrossRefText As String
    Dim strCrossRefTextParts() As String
    Dim strCrossRefTextFont As String
    Dim strCrossRefTextDecimalId As Long

    If strCrossRef <> "" Then
        strCrossRefParts = Split(strCrossRef, ";")
        For i = 0 To UBound(strCrossRefParts)
            strCrossRefPart = strCrossRefParts(i)
            strCrossRefTextParts = Split(strCrossRefPart, "=")
            If UBound(strCrossRefTextParts) = 0 Then
                Selection.Font.Name = fctGetFontName
                Selection.TypeText strCrossRefPart
            Else
                strCrossRefTextFont = strCrossRefTextParts(0)
                If strCrossRefTextFont = "" Then
                    strCrossRefTextFont = fctGetFontName
                End If
                strCrossRefTextDecimalId = CLng(strCrossRefTextParts(1))
                If strCrossRefTextFont = "+eastasian" Then
                    Selection.InsertSymbol CharacterNumber:=strCrossRefTextDecimalId, Unicode:=True, Bias:=wdFontBiasFareast
                Else
                    Selection.InsertSymbol CharacterNumber:=strCrossRefTextDecimalId, Font:=strCrossRefTextFont, Unicode:=True
                End If
            End If
        Next i
    End If
End Sub

Sub SetParagraphStyle(strParagraphStyle As String)
    If Selection.Paragraphs.Count = 1 Then
        Selection.Paragraphs.Style = fctWordDoc.Styles(strParagraphStyle)
    Else
        Selection.Style = fctWordDoc.Styles(strParagraphStyle)
    End If
End Sub

Attribute VB_Name = "MarginalNumberConfig"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public MarginalNumberConfigEntryBefore As MarginalNumberEntry
Public MarginalNumberConfigEntryNewRenumber As MarginalNumberEntry
Public MarginalNumberConfigEntryNewNoRenumber As MarginalNumberEntry
Public MarginalNumberConfigEntriesFollowingChangeStatus As Integer

Private marginalNumberConfigEntriesFollowing() As MarginalNumberEntry

Public Property Let SetMarginalNumberConfigEntriesFollowing(entriesFollowing() As MarginalNumberEntry)
    marginalNumberConfigEntriesFollowing = entriesFollowing
End Property

Public Property Get GetMarginalNumberConfigEntriesFollowing() As MarginalNumberEntry()
    GetMarginalNumberConfigEntriesFollowing = marginalNumberConfigEntriesFollowing
End Property
Attribute VB_Name = "MarginalNumberEntry"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public MarginalNumberEntryRange As Range
Public MarginalNumberLevels As Variant
Public MarginalNumberPatternLevels As Variant
Public MarginalNumberHasIdenticalMainLevel As Boolean
Public MarginalNumberLabelHistoric As String

Public Property Get MarginalNumberLabel() As String
    MarginalNumberLabel = modMarginalNumberGetEntryLabel(MarginalNumberLevels)
End Property

Public Property Get MarginalNumberMainLevelValue() As String
    Dim mainLevelValue As String
    If fctArrayCount(MarginalNumberLevels) > -1 Then
        MarginalNumberMainLevelValue = MarginalNumberLevels(0)(1)
    End If
End Property

Public Property Let SetLevel(levelIndex As Integer)

    Dim numLevels As Integer
    Dim nextLevel As Variant
    numLevels = fctArrayCount(MarginalNumberLevels)
    
    If levelIndex = -1 Then
        levelIndex = numLevels + 1
    End If

    If levelIndex > numLevels Then
        nextLevel = modMarginalNumberGetNextLevelByPattern(MarginalNumberLevels, MarginalNumberPatternLevels)
        If numLevels = -1 Then
            ReDim MarginalNumberLevels(levelIndex)
        Else
            ReDim Preserve MarginalNumberLevels(levelIndex)
        End If
        MarginalNumberLevels(levelIndex) = nextLevel
    Else
        MarginalNumberLevels(levelIndex)(1) = _
            modMarginalNumberGetLevelIncrement(MarginalNumberLevels(levelIndex)(1))
    End If
    
    ReDim Preserve MarginalNumberLevels(levelIndex)

End Property

Public Function Clone() As MarginalNumberEntry
    Set Clone = New MarginalNumberEntry
    Set Clone.MarginalNumberEntryRange = MarginalNumberEntryRange
    Clone.MarginalNumberHasIdenticalMainLevel = MarginalNumberHasIdenticalMainLevel
    Clone.MarginalNumberLevels = MarginalNumberLevels
    Clone.MarginalNumberPatternLevels = MarginalNumberPatternLevels
    Clone.MarginalNumberLabelHistoric = MarginalNumberLabelHistoric
End Function
Attribute VB_Name = "SmartIdEntry"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public SmartIdEntryRange As Range
Public SmartIdEntrySmartId As String
Public SmartIdEntryRunningNum As String
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Private Sub Document_Open()
    On Error Resume Next
    Options.PrintHiddenText = True
    modSetPrintView
    modSetTrackChangeView
    modRestoreAddInMac2011
    On Error GoTo 0
End Sub

Sub modSetPrintView()
    If ActiveWindow.View.SplitSpecial = wdPaneNone Then
        ActiveWindow.ActivePane.View.Type = wdPrintView
    Else
        ActiveWindow.View.Type = wdPrintView
    End If
End Sub

Sub modSetTrackChangeView()
    With ActiveWindow.View
        .RevisionsView = fctWordDoc.CustomDocumentProperties("strRevisionsView")
        .ShowRevisionsAndComments = fctWordDoc.CustomDocumentProperties("bolShowRevisions")
    End With
End Sub

Sub modRestoreAddInMac2011()
    
    If Not fctIsMac2011 Then Exit Sub
    
    If CommandBars.Item("AUDCustom01").Left < 0 Then
        CommandBars.Item("AUDCustom01").Left = 0
    End If
    
    If CommandBars.Item("AUDCustom02").Left < 0 Then
        CommandBars.Item("AUDCustom02").Left = 0
    End If
    
    If CommandBars.Item("AUDCustom03").Left < 0 Then
        CommandBars.Item("AUDCustom03").Left = 0
    End If
    
End Sub
Attribute VB_Name = "authors"
Option Explicit

Sub modAuthors(Optional control As Object)
    SetParagraphStyle AUD_authors
End Sub


Attribute VB_Name = "auxiliary"
Option Explicit

Sub modAuxChar01(Optional control As Object)
    fctAuxChar (AUD_aux_char_01)
End Sub

Sub modAuxChar02(Optional control As Object)
    fctAuxChar (AUD_aux_char_02)
End Sub

Sub modAuxChar03(Optional control As Object)
    fctAuxChar (AUD_aux_char_03)
End Sub

Sub modAuxChar04(Optional control As Object)
    fctAuxChar (AUD_aux_char_04)
End Sub

Sub modAuxChar05(Optional control As Object)
    fctAuxChar (AUD_aux_char_05)
End Sub

Sub modAuxChar06(Optional control As Object)
    fctAuxChar (AUD_aux_char_06)
End Sub

Sub modAuxChar07(Optional control As Object)
    fctAuxChar (AUD_aux_char_07)
End Sub

Sub modAuxChar08(Optional control As Object)
    fctAuxChar (AUD_aux_char_08)
End Sub

Sub modAuxChar09(Optional control As Object)
    fctAuxChar (AUD_aux_char_09)
End Sub

Sub modAuxChar10(Optional control As Object)
    fctAuxChar (AUD_aux_char_10)
End Sub

Sub modAuxChar11(Optional control As Object)
    fctAuxChar (AUD_aux_char_11)
End Sub

Sub modAuxChar12(Optional control As Object)
    fctAuxChar (AUD_aux_char_12)
End Sub

Sub modAuxChar13(Optional control As Object)
    fctAuxChar (AUD_aux_char_13)
End Sub

Sub modAuxChar14(Optional control As Object)
    fctAuxChar (AUD_aux_char_14)
End Sub

Sub modAuxChar15(Optional control As Object)
    fctAuxChar (AUD_aux_char_15)
End Sub

Sub modAuxChar16(Optional control As Object)
    fctAuxChar (AUD_aux_char_16)
End Sub

Sub modAuxChar17(Optional control As Object)
    fctAuxChar (AUD_aux_char_17)
End Sub

Sub modAuxChar18(Optional control As Object)
    fctAuxChar (AUD_aux_char_18)
End Sub

Sub modAuxChar19(Optional control As Object)
    fctAuxChar (AUD_aux_char_19)
End Sub

Sub modAuxChar20(Optional control As Object)
    fctAuxChar (AUD_aux_char_20)
End Sub

Sub modAuxChar21(Optional control As Object)
    fctAuxChar (AUD_aux_char_21)
End Sub

Sub modAuxChar22(Optional control As Object)
    fctAuxChar (AUD_aux_char_22)
End Sub

Sub modAuxChar23(Optional control As Object)
    fctAuxChar (AUD_aux_char_23)
End Sub

Sub modAuxChar24(Optional control As Object)
    fctAuxChar (AUD_aux_char_24)
End Sub

Sub modAuxChar25(Optional control As Object)
    fctAuxChar (AUD_aux_char_25)
End Sub

Sub modAuxChar26(Optional control As Object)
    fctAuxChar (AUD_aux_char_26)
End Sub

Sub modAuxChar27(Optional control As Object)
    fctAuxChar (AUD_aux_char_27)
End Sub

Sub modAuxChar28(Optional control As Object)
    fctAuxChar (AUD_aux_char_28)
End Sub

Sub modAuxChar29(Optional control As Object)
    fctAuxChar (AUD_aux_char_29)
End Sub

Sub modAuxChar30(Optional control As Object)
    fctAuxChar (AUD_aux_char_30)
End Sub

Sub modAuxPara01(Optional control As Object)
    fctAuxPara (AUD_aux_para_01)
End Sub

Sub modAuxPara02(Optional control As Object)
    fctAuxPara (AUD_aux_para_02)
End Sub

Sub modAuxPara03(Optional control As Object)
    fctAuxPara (AUD_aux_para_03)
End Sub

Sub modAuxPara04(Optional control As Object)
    fctAuxPara (AUD_aux_para_04)
End Sub

Sub modAuxPara05(Optional control As Object)
    fctAuxPara (AUD_aux_para_05)
End Sub

Sub modAuxPara06(Optional control As Object)
    fctAuxPara (AUD_aux_para_06)
End Sub

Sub modAuxPara07(Optional control As Object)
    fctAuxPara (AUD_aux_para_07)
End Sub

Sub modAuxPara08(Optional control As Object)
    fctAuxPara (AUD_aux_para_08)
End Sub

Sub modAuxPara09(Optional control As Object)
    fctAuxPara (AUD_aux_para_09)
End Sub

Sub modAuxPara10(Optional control As Object)
    fctAuxPara (AUD_aux_para_10)
End Sub

Sub modAuxPara11(Optional control As Object)
    fctAuxPara (AUD_aux_para_11)
End Sub

Sub modAuxPara12(Optional control As Object)
    fctAuxPara (AUD_aux_para_12)
End Sub

Sub modAuxPara13(Optional control As Object)
    fctAuxPara (AUD_aux_para_13)
End Sub

Sub modAuxPara14(Optional control As Object)
    fctAuxPara (AUD_aux_para_14)
End Sub

Sub modAuxPara15(Optional control As Object)
    fctAuxPara (AUD_aux_para_15)
End Sub

Sub modAuxPara16(Optional control As Object)
    fctAuxPara (AUD_aux_para_16)
End Sub

Sub modAuxPara17(Optional control As Object)
    fctAuxPara (AUD_aux_para_17)
End Sub

Sub modAuxPara18(Optional control As Object)
    fctAuxPara (AUD_aux_para_18)
End Sub

Sub modAuxPara19(Optional control As Object)
    fctAuxPara (AUD_aux_para_19)
End Sub

Sub modAuxPara20(Optional control As Object)
    fctAuxPara (AUD_aux_para_20)
End Sub

Sub modAuxPara21(Optional control As Object)
    fctAuxPara (AUD_aux_para_21)
End Sub

Sub modAuxPara22(Optional control As Object)
    fctAuxPara (AUD_aux_para_22)
End Sub

Sub modAuxPara23(Optional control As Object)
    fctAuxPara (AUD_aux_para_23)
End Sub

Sub modAuxPara24(Optional control As Object)
    fctAuxPara (AUD_aux_para_24)
End Sub

Sub modAuxPara25(Optional control As Object)
    fctAuxPara (AUD_aux_para_25)
End Sub

Sub modAuxPara26(Optional control As Object)
    fctAuxPara (AUD_aux_para_26)
End Sub

Sub modAuxPara27(Optional control As Object)
    fctAuxPara (AUD_aux_para_27)
End Sub

Sub modAuxPara28(Optional control As Object)
    fctAuxPara (AUD_aux_para_28)
End Sub

Sub modAuxPara29(Optional control As Object)
    fctAuxPara (AUD_aux_para_29)
End Sub

Sub modAuxPara30(Optional control As Object)
    fctAuxPara (AUD_aux_para_30)
End Sub

Sub fctAuxChar(strAuxStyle As String)

If Not Selection.Range = "" Then
    Selection.Style = fctWordDoc.Styles(strAuxStyle)
Else
    MsgBox fctGetErrorMsg(Format(1, "00"))
End If

End Sub

Sub fctAuxPara(strAuxStyle As String)
    SetParagraphStyle strAuxStyle
End Sub


Attribute VB_Name = "bibref"
Option Explicit

Sub modBibrefHead(Optional control As Object)
    modKeyBibrefHead
End Sub

Sub modKeyBibrefHead()
    SetParagraphStyle AUD_bibref_head
End Sub

Sub modBibrefBody(Optional control As Object)
    modKeyBibrefBody
End Sub

Sub modKeyBibrefBody()
    SetParagraphStyle AUD_bibref_bodytext
End Sub

Sub modBibrefJournalNumber(Optional control As Object)
    fctBibRef (AUD_bibref_journal_number)
End Sub

Sub modBibrefLastAccessedOn(Optional control As Object)
    fctBibRef (AUD_bibref_last_accessed_on)
End Sub

Sub modBibrefLastUpdateCopyright(Optional control As Object)
    fctBibRef (AUD_bibref_last_update_copyright)
End Sub

Sub modBibrefLocation(Optional control As Object)
    fctBibRef (AUD_bibref_location)
End Sub

Sub modBibrefFirstName(Optional control As Object)
    fctBibRef (AUD_bibref_first_name)
End Sub

Sub modBibrefName(Optional control As Object)
    fctBibRef (AUD_bibref_last_name)
End Sub

Sub modBibrefPage(Optional control As Object)
    fctBibRef (AUD_bibref_page)
End Sub

Sub modBibrefPublisher(Optional control As Object)
    fctBibRef (AUD_bibref_publisher)
End Sub

Sub modBibrefSubtitle(Optional control As Object)
    fctBibRef (AUD_bibref_subtitle)
End Sub

Sub modBibrefTitle(Optional control As Object)
    fctBibRef (AUD_bibref_title)
End Sub

Sub modBibrefUrl(Optional control As Object)
    fctBibRef (AUD_bibref_url)
End Sub

Sub modBibrefVolumne(Optional control As Object)
    fctBibRef (AUD_bibref_volume)
End Sub

Sub modBibrefYear(Optional control As Object)
    fctBibRef (AUD_bibref_year)
End Sub

Sub modSourceManager(Optional control As Object)

    If fctGetWordVersion = 11 Then
        MsgBox fctGetErrorMsg(Format(41, "00"))
        Exit Sub
    End If

    If fctIsMac Then
        MsgBox fctGetErrorMsg(Format(32, "00"))
    Else
        modSourceManagerWIN
    End If
End Sub

Sub modSourceManagerWIN()
    Dialogs(wdDialogSourceManager).Show
End Sub

Sub fctBibRef(strBibRefStyle As String)

    Dim wdRng As Word.Range
    Set wdRng = Selection.Range
    
    If Not wdRng = "" Then
        Selection.Range.Style = fctWordDoc.Styles(strBibRefStyle)
    Else
        MsgBox fctGetErrorMsg(Format(1, "00"))
    End If

End Sub
Attribute VB_Name = "bodytext"
Option Explicit

Sub modBodytext(Optional control As Object)
    modKeyBodytext
End Sub

Sub modKeyBodytext()
    fctBodytext (AUD_bodytext)
End Sub

Sub modBodytextCentre(Optional control As Object)
    fctBodytext (AUD_bodytext_centre)
End Sub

Sub modBodytextRight(Optional control As Object)
    fctBodytext (AUD_bodytext_right)
End Sub

Sub fctBodytext(strBodytextStyle As String)
    SetParagraphStyle strBodytextStyle
End Sub

Attribute VB_Name = "boxes"
Option Explicit

Sub modBoxTitle(Optional control As Object)
    If Selection.Information(wdWithInTable) Then
        SetParagraphStyle AUD_box_title
    Else
        MsgBox fctGetErrorMsg(Format(14, "00"))
    End If
End Sub

Sub modBoxH1(Optional control As Object)
    If Selection.Information(wdWithInTable) Then
        SetParagraphStyle AUD_box_h1
    Else
        MsgBox fctGetErrorMsg(Format(15, "00"))
    End If
End Sub

Sub modBoxH2(Optional control As Object)
    If Selection.Information(wdWithInTable) Then
        SetParagraphStyle AUD_box_h2
    Else
        MsgBox fctGetErrorMsg(Format(15, "00"))
    End If
End Sub

Sub modBoxH3(Optional control As Object)
    If Selection.Information(wdWithInTable) Then
        SetParagraphStyle AUD_box_h3
    Else
        MsgBox fctGetErrorMsg(Format(15, "00"))
    End If
End Sub

Sub modBoxH4(Optional control As Object)
    If Selection.Information(wdWithInTable) Then
        SetParagraphStyle AUD_box_h4
    Else
        MsgBox fctGetErrorMsg(Format(15, "00"))
    End If
End Sub

Sub modBoxH5(Optional control As Object)
    If Selection.Information(wdWithInTable) Then
        SetParagraphStyle AUD_box_h5
    Else
        MsgBox fctGetErrorMsg(Format(15, "00"))
    End If
End Sub

Sub modBoxH6(Optional control As Object)
    If Selection.Information(wdWithInTable) Then
        SetParagraphStyle AUD_box_h6
    Else
        MsgBox fctGetErrorMsg(Format(15, "00"))
    End If
End Sub

Sub modBoxH7(Optional control As Object)
    If Selection.Information(wdWithInTable) Then
        SetParagraphStyle AUD_box_h7
    Else
        MsgBox fctGetErrorMsg(Format(15, "00"))
    End If
End Sub

Sub modBoxH8(Optional control As Object)
    If Selection.Information(wdWithInTable) Then
        SetParagraphStyle AUD_box_h8
    Else
        MsgBox fctGetErrorMsg(Format(15, "00"))
    End If
End Sub

Sub modBoxH9(Optional control As Object)
    If Selection.Information(wdWithInTable) Then
        SetParagraphStyle AUD_box_h9
    Else
        MsgBox fctGetErrorMsg(Format(15, "00"))
    End If
End Sub

Sub modBoxFootnote(Optional control As Object)
    If Selection.Information(wdWithInTable) Then
        SetParagraphStyle AUD_box_footnote
    Else
        MsgBox fctGetErrorMsg(Format(49, "00"))
    End If
End Sub

Sub modBoxRemoveBoxContainer(Optional control As Object)

    Dim wdTbl As Table
    Set wdTbl = modBoxGetParentTable()
    
    If wdTbl Is Nothing Then
        MsgBox fctGetErrorMsg(Format(44, "00"))
        Exit Sub
    End If
    
    If wdTbl.Range.Next.Paragraphs(1).Style = AUD_wanted_empty_para_after_word_table Or _
       wdTbl.Range.Next.Paragraphs(1).Style = AUD_wanted_empty_para_after_marginal_note Then
        If fctSelectionHasFollowingTable(wdTbl.Range.Next.Paragraphs(1).Range.Characters.Last) Or _
                wdTbl.Range.Next.Paragraphs(1).Range.Characters.Last = Chr(13) & Chr(7) Then
            wdTbl.Range.Next.Paragraphs(1).Style = AUD_bodytext
        Else
            wdTbl.Range.Next.Paragraphs(1).Range.Delete
        End If
    End If
    
    wdTbl.ConvertToText Separator:=wdSeparateByParagraphs, NestedTables:=False

End Sub

Function modBoxGetParentTable() As Table
    If Selection.tables.Count > 0 Then
        Dim wdRng As Range, i As Long
        Dim wdTbl As Table
        
        Set wdRng = Selection.Range
        
        For i = 1 To wdRng.tables.nestingLevel
            Set wdRng = wdRng.tables(1).Range
            If modBoxGetBoxTitleKey(wdRng.tables(1).Style.NameLocal) <> "" Then
                Set wdTbl = wdRng.tables(1)
                Exit For
            End If
            wdRng.Collapse wdCollapseEnd
        Next
        
        Set modBoxGetParentTable = wdTbl
    End If
End Function

Function modBoxGetBoxTitleKey(strBoxTableStyle As String) As String
    Dim arrBoxTableStyles As Variant
    Dim boxTableStyleParts As Variant
    Dim i As Integer
    arrBoxTableStyles = BoxTableStyles
    
    For i = 0 To UBound(arrBoxTableStyles)
        boxTableStyleParts = Split(arrBoxTableStyles(i), ";")
        If strBoxTableStyle = boxTableStyleParts(0) Then
            modBoxGetBoxTitleKey = boxTableStyleParts(1)
            Exit Function
        End If
    Next i
End Function

Sub modMainBox(strBoxTableStyle As String, strBoxTitleKey As String)
    If Not Selection.Information(wdWithInTable) Then
        modMainBoxTemp strBoxTableStyle, strBoxTitleKey
    ElseIf modSpecialContainerIsSpecialContainerTableStyle(Selection.tables(1).Style.NameLocal) Then
        modMainBoxTemp strBoxTableStyle, strBoxTitleKey
    ElseIf modBoxGetBoxTitleKey(Selection.tables(1).Style) <> "" Then
        If fctWordDoc.CustomDocumentProperties("bolAllowNestedBoxes").Value Then
            Load frmBoxAction
            frmBoxAction.txtBoxTableStyle = strBoxTableStyle
            frmBoxAction.txtBoxTitleKey = strBoxTitleKey
            frmBoxAction.Show
        Else
            modChangeBoxType strBoxTableStyle, strBoxTitleKey
        End If
    End If
End Sub

Sub modMainBoxTemp(strBoxTableStyle As String, strBoxTitleKey As String)

    Dim wdTbl As Word.Table
    
    Dim wdFirstParaInBox As Word.Range
    Dim wdSecondParaInBox As Word.Range
    Dim wdRngBoxTitle As Word.Range
    Dim boxTitleParts As Variant
    
    Dim bolExpandSelection As Boolean
    Dim wdRngEnd As Long
    Dim wdRng As Word.Range
    Dim wdPreviousPara As Word.Paragraph
    
    Dim lastParaStyle As String
    
    boxTitleParts = Split(fctWordDoc.CustomDocumentProperties(strBoxTitleKey).Value, ";")

    If Selection.Range.Text <> "" Then
    
        Set wdRng = Selection.Range
        
        If fctGetBoxStylesStart(Selection.Range) Then
            wdRng.Paragraphs.First.Range.Delete
        End If
        
        wdRng.Select
        
        If fctGetBoxStylesEnd(Selection.Range) Then
            wdRng.Paragraphs.Last.Range.Delete
        End If
        
        wdRng.Select
        
        If Asc(Selection.Characters.Last) = 13 Then
            Selection.End = Selection.End - 1
            bolExpandSelection = True
        End If
        
        Set wdRng = Selection.Range
        wdRngEnd = wdRng.End
        
        lastParaStyle = wdRng.Paragraphs.Last.Style
        Selection.Collapse wdCollapseEnd

    End If
    
    If fctSelectionHasPrecedingTable(Selection.Range.Characters.First) Then
       Selection.InsertParagraphAfter
       Selection.Collapse wdCollapseEnd
       Selection.Font.Reset
       Selection.Style = fctWordDoc.Styles(AUD_bodytext)
    End If
    
    Set wdTbl = fctGetTable(fctGetRng, 1, 1)
    
    Set wdFirstParaInBox = Selection.tables(1).Range.Paragraphs(1).Range
    wdFirstParaInBox.Style = fctWordDoc.Styles(AUD_bodytext)

    With wdTbl
        .AllowAutoFit = False
        .PreferredWidthType = wdPreferredWidthPercent
        .PreferredWidth = 100
        .Style = strBoxTableStyle
    End With
    
    modInsertBoxTitle wdFirstParaInBox, boxTitleParts

    wdTbl.Range.Cells(1).Select
    Selection.EndOf wdCell
    
    If Not wdRng Is Nothing Then
        Selection.Range.FormattedText = wdRng
        Selection.EndOf wdCell
        Selection.Range.Paragraphs.Last.Style = lastParaStyle
        wdRng.Select
        If bolExpandSelection = True Then
            Selection.Expand wdParagraph
        End If
        Selection.Delete
        
        Set wdPreviousPara = wdTbl.Range.Paragraphs(1).Previous(1)
        If Not wdPreviousPara Is Nothing Then
            If wdRng.start <> wdTbl.Range.Cells(1).Range.start And _
               Not fctSelectionHasPrecedingTable(wdPreviousPara.Range.Characters.Last) And _
               Not wdPreviousPara.Style = AUD_wanted_empty_para And _
               Not wdPreviousPara.Style = AUD_wanted_empty_para_2 Then
                If wdPreviousPara.Range = vbCr Then
                    On Error Resume Next
                    wdPreviousPara.Range.Delete
                    On Error GoTo 0
                End If
            End If
        End If
        
    End If

    wdTbl.Range.Cells(1).Select
    Selection.Collapse wdCollapseStart
    Selection.EndOf wdCell

    Call InsertParaAfterTable(AUD_wanted_empty_para_after_word_table)

End Sub

Sub modInsertBoxTitle(wdFirstParaInBox As Range, boxTitleParts As Variant)
    Dim boxIcon As String
    Dim boxTitle As String
    
    boxIcon = boxTitleParts(3)
    boxTitle = boxTitleParts(4)

    If boxIcon <> "" Or boxTitle <> "" Then
        wdFirstParaInBox.InsertParagraphBefore
        wdFirstParaInBox.Paragraphs(1).Range.Font.Reset
        wdFirstParaInBox.Collapse wdCollapseStart
        wdFirstParaInBox.Paragraphs(1).Style = AUD_box_title
        
        If boxTitle <> "" Then
            wdFirstParaInBox.Text = boxTitle
        End If
        
        If boxIcon <> "" Then
            wdFirstParaInBox.Collapse wdCollapseStart
            modFigureInsertPrefixSuffix wdFirstParaInBox, boxIcon, AUD_icon
        End If
    End If
End Sub

Sub modChangeBoxType(strBoxTableStyle As String, strBoxTitleKey As String)
    
    Dim wdFirstParaInBox As Word.Range
    Dim updateBoxTitle As Boolean
    Dim boxTitleParts As Variant
    Dim objTable As Table
    
    boxTitleParts = Split(fctWordDoc.CustomDocumentProperties(strBoxTitleKey).Value, ";")
    updateBoxTitle = CBool(boxTitleParts(5))
    
    Set objTable = Selection.tables(1)

    If Not objTable.Range.Paragraphs.Last.Next.Style = AUD_wanted_empty_para_after_word_table Then
        fctAddedWantedEmptyParagraph objTable
    End If
    
    Set wdFirstParaInBox = objTable.Range.Paragraphs(1).Range
    objTable.Style = strBoxTableStyle

    If updateBoxTitle Then
        If wdFirstParaInBox.Paragraphs(1).Style = AUD_box_title Then
            wdFirstParaInBox.Delete
        End If
        modInsertBoxTitle wdFirstParaInBox, boxTitleParts
    End If

    objTable.Range.Cells(1).Select
    Selection.EndOf wdCell

End Sub

Sub modBox01(Optional control As Object)
    Call modMainBox(AUD_tf_box_01, "strBoxTitle01")
End Sub

Sub modBox02(Optional control As Object)
    Call modMainBox(AUD_tf_box_02, "strBoxTitle02")
End Sub

Sub modBox03(Optional control As Object)
    Call modMainBox(AUD_tf_box_03, "strBoxTitle03")
End Sub

Sub modBox04(Optional control As Object)
    Call modMainBox(AUD_tf_box_04, "strBoxTitle04")
End Sub

Sub modBox05(Optional control As Object)
    Call modMainBox(AUD_tf_box_05, "strBoxTitle05")
End Sub

Sub modBox06(Optional control As Object)
    Call modMainBox(AUD_tf_box_06, "strBoxTitle06")
End Sub

Sub modBox07(Optional control As Object)
    Call modMainBox(AUD_tf_box_07, "strBoxTitle07")
End Sub

Sub modBox08(Optional control As Object)
    Call modMainBox(AUD_tf_box_08, "strBoxTitle08")
End Sub

Sub modBox09(Optional control As Object)
    Call modMainBox(AUD_tf_box_09, "strBoxTitle09")
End Sub

Sub modBox10(Optional control As Object)
    Call modMainBox(AUD_tf_box_10, "strBoxTitle10")
End Sub

Sub modBox11(Optional control As Object)
    Call modMainBox(AUD_tf_box_11, "strBoxTitle11")
End Sub

Sub modBox12(Optional control As Object)
    Call modMainBox(AUD_tf_box_12, "strBoxTitle12")
End Sub

Sub modBox13(Optional control As Object)
    Call modMainBox(AUD_tf_box_13, "strBoxTitle13")
End Sub

Sub modBox14(Optional control As Object)
    Call modMainBox(AUD_tf_box_14, "strBoxTitle14")
End Sub

Sub modBox15(Optional control As Object)
    Call modMainBox(AUD_tf_box_15, "strBoxTitle15")
End Sub

Sub modBox16(Optional control As Object)
    Call modMainBox(AUD_tf_box_16, "strBoxTitle16")
End Sub

Sub modBox17(Optional control As Object)
    Call modMainBox(AUD_tf_box_17, "strBoxTitle17")
End Sub

Sub modBox18(Optional control As Object)
    Call modMainBox(AUD_tf_box_18, "strBoxTitle18")
End Sub

Sub modBox19(Optional control As Object)
    Call modMainBox(AUD_tf_box_19, "strBoxTitle19")
End Sub

Sub modBox20(Optional control As Object)
    Call modMainBox(AUD_tf_box_20, "strBoxTitle20")
End Sub

Sub modBox21(Optional control As Object)
    Call modMainBox(AUD_tf_box_21, "strBoxTitle21")
End Sub

Sub modBox22(Optional control As Object)
    Call modMainBox(AUD_tf_box_22, "strBoxTitle22")
End Sub

Sub modBox23(Optional control As Object)
    Call modMainBox(AUD_tf_box_23, "strBoxTitle23")
End Sub

Sub modBox24(Optional control As Object)
    Call modMainBox(AUD_tf_box_24, "strBoxTitle24")
End Sub

Sub modBox25(Optional control As Object)
    Call modMainBox(AUD_tf_box_25, "strBoxTitle25")
End Sub




Attribute VB_Name = "columntext"
Option Explicit

Sub modColumntextInsertColumntext(Optional control As Object)
    Load frmColumntextGenerator
    frmColumntextGenerator.Show
End Sub

Sub modColumntextConvertTableToColumntext(Optional control As Object)
    If Not Selection.Information(wdWithInTable) Then
        MsgBox fctGetErrorMsg(Format(24, "00"))
        Exit Sub
    End If
    Selection.tables(1).Style = fctWordDoc.Styles(AUD_tf_columntext)
    If Not Selection.tables(1).Range.Paragraphs.Last.Next.Range.Paragraphs(1).Style = AUD_wanted_empty_para_after_word_table Then
        fctAddedWantedEmptyParagraph Selection.tables(1)
    End If
End Sub
Attribute VB_Name = "comments"
Option Explicit

Sub modCommentsSetCommentChar01(Optional control As Object)
    modCommentsSetCommentChar AUD_comment_char_01, "strCommentChar01"
End Sub

Sub modCommentsDeleteCommentChar01(Optional control As Object)
    modCommentsDeleteCommentChar AUD_comment_char_01, "strCommentChar01"
End Sub

Sub modCommentsSetCommentChar02(Optional control As Object)
    modCommentsSetCommentChar AUD_comment_char_02, "strCommentChar02"
End Sub

Sub modCommentsDeleteCommentChar02(Optional control As Object)
    modCommentsDeleteCommentChar AUD_comment_char_02, "strCommentChar02"
End Sub

Sub modCommentsSetCommentPara01(Optional control As Object)
    SetParagraphStyle AUD_comment_para_01
End Sub

Sub modCommentsSetCommentPara02(Optional control As Object)
    SetParagraphStyle AUD_comment_para_02
End Sub

Sub modCommentsSetCommentChar(commentCharStyleName As String, commentDocVar As String)
    Dim wdRng As Word.Range
    Dim commentCharParts As Variant
    
    commentCharParts = Split(fctWordDoc.CustomDocumentProperties(commentDocVar).Value, ";")
    Set wdRng = fctRemoveParagraphMarkFromRange(Selection.Range.Duplicate)
    
    If fctGetRng <> "" Then
        With fctGetRng
            .Collapse wdCollapseStart
            .Text = commentCharParts(0)
            .Expand unit:=wdCharacter
            .Style = fctWordDoc.Styles(commentCharStyleName)
            .Collapse wdCollapseEnd
        End With
        
        With wdRng
            .Collapse wdCollapseEnd
            .Text = commentCharParts(1)
            .Style = fctWordDoc.Styles(commentCharStyleName)
            .Collapse wdCollapseEnd
        End With
        
        Selection.Collapse wdCollapseEnd
        
    Else
        MsgBox fctGetErrorMsg(Format(1, "00"))
    End If
    
End Sub

Sub modCommentsDeleteCommentChar(commentCharStyleName As String, commentDocVar As String)

    Dim commentCharParts() As String
    Dim arrRanges() As Range
    Dim objRangeSelection As Range
    Dim objStyle As Style
    Dim objRange As Range
    Dim i As Long
    Dim arrRangesCount As Long
    Dim objUndoRecord As Object
    
    commentCharParts = Split(fctWordDoc.CustomDocumentProperties(commentDocVar).Value, ";")
    
    Set objStyle = ActiveDocument.Styles(commentCharStyleName)
    Set objRangeSelection = fctExtendFormattedRange(Selection.Range, objStyle)

    modCommentsGetCommentsInSelection objRangeSelection.Duplicate, objStyle, _
        commentCharParts(0), arrRanges

    modCommentsGetCommentsInSelection objRangeSelection.Duplicate, objStyle, _
        commentCharParts(1), arrRanges
        
    arrRangesCount = fctArrayCount(arrRanges)
    
    If arrRangesCount = -1 Then Exit Sub
    
    fctArrayOfRangeSortDesc arrRanges, 0, arrRangesCount
    
    Set objUndoRecord = fctStartRecordUndo(fctGetFormCaption("50000"))
    
    For i = 0 To arrRangesCount
        arrRanges(i).Delete
    Next
    
    fctEndRecordUndo objUndoRecord

End Sub

Sub modCommentsGetCommentsInSelection(objRange As Range, objStyle As Style, _
    searchText As String, arrRanges() As Range)
    
    Dim objRangeSelection As Range
    Dim objRangeTempEnd As Range
    
    Set objRangeSelection = objRange.Duplicate
    objRange.Collapse wdCollapseStart
    
    With objRange.Find
        Do
            .Style = objStyle
            .Wrap = wdFindStop
            .Format = True
            .Text = searchText
            .Execute
            
            If Not .Found Then Exit Do
            If Not objRange.InRange(objRangeSelection) Then Exit Do
                       
            If objRange <> "" And objRange <> vbCr Then
                fctArrayPushObject arrRanges, objRange.Duplicate
            End If
            
            Set objRangeTempEnd = objRange.Duplicate
            objRange.Collapse wdCollapseEnd
            
            If objRange.InRange(objRangeTempEnd) Then Exit Do
        Loop
    End With
        
End Sub


Attribute VB_Name = "crossrefs"
Option Explicit

Sub modCrossRef(objCrossRef As CrossRef)

    Dim strCrossRef As String
    Dim strCrossRefPrefix As String
    Dim strCrossRefParts() As String
    Dim strCrossRefPart As String

    Dim strCrossRefText As String
    Dim strCrossRefTextParts() As String
    Dim strCrossRefTextFont As String
    Dim strCrossRefTextDecimalId As String

    Dim i As Integer

    If fctWordDoc.CustomDocumentProperties(objCrossRef.CrossRefSymbolKey) <> fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
        strCrossRef = fctWordDoc.CustomDocumentProperties(objCrossRef.CrossRefSymbolKey)
    End If

    If objCrossRef.CrossRefKey <> "" Then
        If fctWordDoc.CustomDocumentProperties(objCrossRef.CrossRefKey) <> fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
            If strCrossRef <> "" Then
                strCrossRef = strCrossRef & ";"
            End If
            strCrossRef = strCrossRef & fctWordDoc.CustomDocumentProperties(objCrossRef.CrossRefKey)
        End If
    End If

    If (fctWordDoc.CustomDocumentProperties(objCrossRef.CrossRefPrefixKey) <> fctWordDoc.CustomDocumentProperties("strBlankIndicator")) Then
        strCrossRefPrefix = fctWordDoc.CustomDocumentProperties(objCrossRef.CrossRefPrefixKey)
    End If

    modInsertCrossRefPrefix (strCrossRefPrefix)

    Selection.Style = objCrossRef.CrossRefStyle

    InsertSpecialText (strCrossRef)

End Sub

Function modSetCrossRefStyle(objCrossRef As CrossRef) As Boolean
    If Selection.Range.Text <> "" And Asc(Selection.Range.Characters.Last) = 13 Then
        Selection.End = Selection.End - 1
    End If

    If Selection.Range.Text <> "" Then
        Selection.Range.Style = objCrossRef.CrossRefStyle
        Selection.Collapse wdCollapseEnd
        modSetCrossRefStyle = True
        Exit Function
    End If
End Function

Sub modInsertCrossRefPrefix(strCrossRefPrefix As String)
    Selection.Text = " "
    On Error Resume Next
    Selection.Font.Reset
    On Error GoTo 0

    If strCrossRefPrefix = "" Then
        Selection.Delete
    Else
        InsertSpecialText strCrossRefPrefix
    End If
    Selection.Collapse wdCollapseEnd

    Selection.Text = " "
    On Error Resume Next
    Selection.Font.Reset
    On Error GoTo 0
End Sub

Sub modInsertCrossRefSuffix(objCrossRef As CrossRef)

    Dim strCrossRefSuffix As String
    If (fctWordDoc.CustomDocumentProperties(objCrossRef.CrossRefSuffixKey) <> fctWordDoc.CustomDocumentProperties("strBlankIndicator")) Then
        strCrossRefSuffix = fctWordDoc.CustomDocumentProperties(objCrossRef.CrossRefSuffixKey)
    End If

    Selection.Text = " "
    On Error Resume Next
    Selection.Font.Reset
    On Error GoTo 0

    If strCrossRefSuffix = "" Then
        Selection.Delete
    Else
        InsertSpecialText strCrossRefSuffix
    End If
    Selection.Collapse wdCollapseEnd

End Sub

Sub modCrossRefDynamic(objCrossRef As CrossRef)
    Dim rngStart As Long
    rngStart = Selection.start
    Selection.InsertCrossReference _
        ReferenceType:=objCrossRef.CrossRefType, _
        ReferenceKind:=objCrossRef.CrossRefKind, _
        ReferenceItem:=modCrossRefInsertCrossRefBookmark(objCrossRef.CrossRefItem), _
        InsertAsHyperlink:=True
    Selection.start = rngStart
    Selection.Fields.Item(1).Code.Text = Selection.Fields.Item(1).Code.Text & " \* MERGEFORMAT "
    Selection.Fields.Item(1).Update
    Selection.Style = objCrossRef.CrossRefStyle
    Selection.Collapse wdCollapseEnd
End Sub

Sub modCrossRefDynamicFrmInit(objCrossRef As CrossRef)
    modCrossRef objCrossRef
    On Error Resume Next
    modCrossRefDynamic objCrossRef
    On Error GoTo 0
    modInsertCrossRefSuffix objCrossRef
End Sub

Sub modCrossRefFixedInit(strCrossRefIdentifier As String, strCrossRefStyle As String)
    Dim objCrossRef As CrossRef
    Set objCrossRef = New CrossRef
    objCrossRef.CrossRefPrefixKey = "strCrossRef" & strCrossRefIdentifier & "Prefix"
    objCrossRef.CrossRefSymbolKey = "strCrossRef" & strCrossRefIdentifier & "Symbol"
    objCrossRef.CrossRefSuffixKey = "strCrossRef" & strCrossRefIdentifier & "Suffix"
    objCrossRef.CrossRefKey = "strCrossRef" & strCrossRefIdentifier
    objCrossRef.CrossRefStyle = strCrossRefStyle
    If Not modSetCrossRefStyle(objCrossRef) Then
        If Not modIsFixedCrossRefEmpty(objCrossRef) Then
            modCrossRef objCrossRef
            modInsertCrossRefSuffix objCrossRef
        Else
            MsgBox fctGetErrorMsg(Format(1, "00"))
        End If
    End If
End Sub

Sub modCrossRefDynamicInit(intCaptionIndex As Integer, strCrossRefIdentifier As String, _
        strCrossRefType As Variant, strCrossRefKind As Long, strCrossRefStyle As String)

    Dim currentMode As Variant
    Dim objField As Field
    Dim objRange As Range
    Dim objRangeItem As Range
    Dim objCrossRef As CrossRef
    Dim objCrossRefConfig As CrossRefConfig
    Dim arrCrossRefs() As CrossRef
    Dim i As Long

    modToolsUpdateFields False
    frmCrossRefs.lboxCrossRefItems.Clear
    currentMode = fctSetTrackChangeModeShowMarkupHideDeleted

    For Each objField In ActiveDocument.Fields
        If objField.Type = wdFieldSequence Then
            If InStr(objField.Code, " " & strCrossRefType & " ") > 0 Then
                Set objRange = fctGetFieldRange(objField)
                objRange.start = modSmartIndexExcludeSmartIdFromRange( _
                                    objRange.Paragraphs(1).Range.Duplicate).start
                Set objCrossRef = New CrossRef
                objCrossRef.CrossRefItem = objRange
                objCrossRef.CrossRefType = wdRefTypeBookmark
                objCrossRef.CrossRefKind = -1
                objCrossRef.CrossRefPrefixKey = "strCrossRef" & strCrossRefIdentifier & "Prefix"
                objCrossRef.CrossRefSymbolKey = "strCrossRef" & strCrossRefIdentifier & "Symbol"
                objCrossRef.CrossRefSuffixKey = "strCrossRef" & strCrossRefIdentifier & "Suffix"
                objCrossRef.CrossRefStyle = strCrossRefStyle
                objCrossRef.CrossRefIdentifier = strCrossRefIdentifier
                modCrossRefAdd arrCrossRefs, objCrossRef
                Set objRangeItem = objRange.Duplicate
                objRangeItem.End = objRangeItem.Paragraphs.Last.Range.End - 1
                objRangeItem.TextRetrievalMode.IncludeFieldCodes = False
                objRangeItem.TextRetrievalMode.IncludeHiddenText = False
                frmCrossRefs.lboxCrossRefItems.AddItem modCrossRefGetParagraphContent(objRangeItem)
            End If
        End If
    Next

    fctRestoreTrackChangeMode currentMode

    If frmCrossRefs.lboxCrossRefItems.ListCount = 0 Then
        MsgBox fctGetErrorMsg(Format(38, "00"))
        Exit Sub
    End If

    Set objCrossRefConfig = New CrossRefConfig
    objCrossRefConfig.SetCrossRefs = arrCrossRefs
    frmCrossRefs.Caption = fctGetFormCaption(Format(intCaptionIndex, "00"))
    frmCrossRefs.SetCrossRefConfig objCrossRefConfig

    frmCrossRefs.Show

End Sub

Sub modCrossRefBookmarkDynamicInit(intCaptionIndex As Integer, strCrossRefIdentifier As String, _
        strCrossRefKind As Long, paragraphStyleNames As Variant, strCrossRefStyle As String)

    Dim i As Long
    Dim objParagraph As Paragraph
    Dim objRange As Range
    Dim objStyle As Style
    Dim objStyles() As Variant
    Dim objCrossRef As CrossRef
    Dim objCrossRefConfig As CrossRefConfig
    Dim arrCrossRefs() As CrossRef
    Dim arrCrossRefCount As Long
    Dim currentMode As Variant

    objStyles = fctGetStylesByStyleNames(paragraphStyleNames)

    modToolsUpdateFields False
    frmCrossRefs.lboxCrossRefItems.Clear
    currentMode = fctSetTrackChangeModeShowMarkupShowDeleted

    For Each objParagraph In ActiveDocument.Paragraphs
        If fctInArray(objParagraph.Style.NameLocal, objStyles) Then
            If Not fctRangeHasDeletions(objParagraph.Range.Characters.Last) Then
                Set objRange = fctRemoveParagraphMarkFromRange( _
                                modSmartIndexExcludeSmartIdFromRange(objParagraph.Range.Duplicate))
                Set objCrossRef = New CrossRef
                objCrossRef.CrossRefItem = objRange
                objCrossRef.CrossRefKey = "strCrossRefDynamic" & strCrossRefIdentifier
                objCrossRef.CrossRefKind = strCrossRefKind
                objCrossRef.CrossRefStyle = strCrossRefStyle
                objCrossRef.CrossRefType = wdRefTypeBookmark
                objCrossRef.CrossRefPrefixKey = "strCrossRef" & strCrossRefIdentifier & "Prefix"
                objCrossRef.CrossRefSymbolKey = "strCrossRef" & strCrossRefIdentifier & "Symbol"
                objCrossRef.CrossRefSuffixKey = "strCrossRef" & strCrossRefIdentifier & "Suffix"
                objCrossRef.CrossRefIdentifier = strCrossRefIdentifier
                modCrossRefAdd arrCrossRefs, objCrossRef
            End If
        End If
    Next
    fctRestoreTrackChangeMode currentMode

    currentMode = fctSetTrackChangeModeShowMarkupHideDeleted

    arrCrossRefCount = fctArrayCount(arrCrossRefs)
    For i = 0 To arrCrossRefCount
        Set objRange = arrCrossRefs(i).CrossRefItem
        objRange.TextRetrievalMode.IncludeFieldCodes = False
        objRange.TextRetrievalMode.IncludeHiddenText = False
        frmCrossRefs.lboxCrossRefItems.AddItem modCrossRefGetParagraphContent(objRange)
        frmCrossRefs.lboxCrossRefItems.List(frmCrossRefs.lboxCrossRefItems.ListCount - 1, 1) = i
    Next

    fctRestoreTrackChangeMode currentMode

    If frmCrossRefs.lboxCrossRefItems.ListCount = 0 Then
        MsgBox fctGetErrorMsg(Format(38, "00"))
        Exit Sub
    End If

    Set objCrossRefConfig = New CrossRefConfig
    objCrossRefConfig.SetCrossRefs = arrCrossRefs
    frmCrossRefs.Caption = fctGetFormCaption(Format(intCaptionIndex, "00"))
    frmCrossRefs.SetCrossRefConfig objCrossRefConfig

    frmCrossRefs.Show

End Sub

Function modCrossRefGetCrossRefBookmarkInRange(objRange As Range) As Bookmark
    Dim objBookmark As Bookmark
    objRange.Bookmarks.ShowHidden = True
    For Each objBookmark In objRange.Bookmarks
        If fctStartsWith(objBookmark.Name, "_Ref") Then
            Set modCrossRefGetCrossRefBookmarkInRange = objBookmark
            Exit Function
        End If
    Next
End Function

Function modIsFixedCrossRefEmpty(objCrossRef As CrossRef) As Boolean

    Dim strCrossRefPrefix As String
    Dim strCrossRefSymbol As String
    Dim strCrossRef As String
    Dim strCrossRefSuffix As String

    If (fctWordDoc.CustomDocumentProperties(objCrossRef.CrossRefPrefixKey) <> fctWordDoc.CustomDocumentProperties("strBlankIndicator")) Then
        strCrossRefPrefix = fctWordDoc.CustomDocumentProperties(objCrossRef.CrossRefPrefixKey)
    End If

    If fctWordDoc.CustomDocumentProperties(objCrossRef.CrossRefSymbolKey) <> fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
        strCrossRefSymbol = fctWordDoc.CustomDocumentProperties(objCrossRef.CrossRefSymbolKey)
    End If

    If fctWordDoc.CustomDocumentProperties(objCrossRef.CrossRefKey) <> fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
        strCrossRef = fctWordDoc.CustomDocumentProperties(objCrossRef.CrossRefKey)
    End If

    If (fctWordDoc.CustomDocumentProperties(objCrossRef.CrossRefSuffixKey) <> fctWordDoc.CustomDocumentProperties("strBlankIndicator")) Then
        strCrossRefSuffix = fctWordDoc.CustomDocumentProperties(objCrossRef.CrossRefSuffixKey)
    End If

    modIsFixedCrossRefEmpty = strCrossRefPrefix = "" And strCrossRefSymbol = "" And strCrossRef = "" And strCrossRefSuffix = ""

End Function


Function modCrossRefGetParagraphContent(objRange As Range) As String

    Dim parts As Variant
    Dim paragraphText As String

    paragraphText = objRange.Text
    If paragraphText = "" Then
        paragraphText = fctGetFormCaption("1020")
    End If

    fctArrayPush parts, objRange.ListFormat.ListString
    fctArrayPush parts, paragraphText

    modCrossRefGetParagraphContent = fctArrayJoin(parts, "    ")

End Function

Sub modCrossRefAdd(arrCrossRefs() As CrossRef, objCrossRef As CrossRef)
    Dim currentIndex As Long
    currentIndex = fctArrayCount(arrCrossRefs) + 1
    If currentIndex = 0 Then
        ReDim arrCrossRefs(0)
    Else
        ReDim Preserve arrCrossRefs(currentIndex)
    End If
    Set arrCrossRefs(currentIndex) = objCrossRef
End Sub

Function modCrossRefInsertCrossRefBookmark(objRange As Range) As String
    Dim bookmarkName As String
    bookmarkName = modCrossRefGetCrossRefBookmarkName(objRange)
    objRange.Bookmarks.Add bookmarkName
    modCrossRefInsertCrossRefBookmark = bookmarkName
End Function

Function modCrossRefGetCrossRefBookmarkName(objRange As Range) As String
    Dim objBookmark As Bookmark
    Set objBookmark = modCrossRefGetCrossRefBookmarkInRange(objRange)
    If Not objBookmark Is Nothing Then
        modCrossRefGetCrossRefBookmarkName = objBookmark.Name
    Else
        modCrossRefGetCrossRefBookmarkName = modCrossRefGetRandomCrossRefBookmarkName
    End If
End Function

Function modCrossRefGetRandomCrossRefBookmarkName() As String
    Dim out As String
    Dim i As Integer
    Randomize
    For i = 1 To 9
        out = out & fctGetRandomNumber(9, 0)
    Next
    modCrossRefGetRandomCrossRefBookmarkName = "_Ref" & out
End Function

' CrossRefFixed [Figure, Table, Equation, Chapter, Code, Marginal number]: General style

Sub modCrossRefFixedFigureGeneralStyle(Optional control As Object)
    modKeyCrossRefFixedFigureGeneralStyle
End Sub

Sub modKeyCrossRefFixedFigureGeneralStyle()
    modCrossRefFixedInit "Figure", AUD_crossref_general
End Sub

Sub modCrossRefFixedTableGeneralStyle(Optional control As Object)
    modKeyCrossRefFixedTableGeneralStyle
End Sub

Sub modKeyCrossRefFixedTableGeneralStyle()
    modCrossRefFixedInit "Table", AUD_crossref_general
End Sub

Sub modCrossRefFixedEquationGeneralStyle(Optional control As Object)
    modKeyCrossRefFixedEquationGeneralStyle
End Sub

Sub modKeyCrossRefFixedEquationGeneralStyle()
    modCrossRefFixedInit "Equation", AUD_crossref_general
End Sub

Sub modCrossRefFixedChapterGeneralStyle(Optional control As Object)
    modKeyCrossRefFixedChapterGeneralStyle
End Sub

Sub modKeyCrossRefFixedChapterGeneralStyle()
    modCrossRefFixedInit "Chapter", AUD_crossref_general
End Sub

Sub modCrossRefFixedCodeGeneralStyle(Optional control As Object)
    modKeyCrossRefFixedCodeGeneralStyle
End Sub

Sub modKeyCrossRefFixedCodeGeneralStyle()
    modCrossRefFixedInit "Code", AUD_crossref_general
End Sub

Sub modCrossRefFixedMarginalNumberGeneralStyle(Optional control As Object)
    modKeyCrossRefFixedMarginalNumberGeneralStyle
End Sub

Sub modKeyCrossRefFixedMarginalNumberGeneralStyle()
    modCrossRefFixedInit "MarginalNumber", AUD_crossref_general
End Sub

' CrossRefFixed [Figure, Table, Equation, Chapter, Code, Marginal number]: Specific style

Sub modCrossRefFixedFigureSpecificStyle(Optional control As Object)
    modKeyCrossRefFixedFigureSpecificStyle
End Sub

Sub modKeyCrossRefFixedFigureSpecificStyle()
    modCrossRefFixedInit "Figure", AUD_crossref_figure
End Sub

Sub modCrossRefFixedTableSpecificStyle(Optional control As Object)
    modKeyCrossRefFixedTableSpecificStyle
End Sub

Sub modKeyCrossRefFixedTableSpecificStyle()
    modCrossRefFixedInit "Table", AUD_crossref_table
End Sub

Sub modCrossRefFixedEquationSpecificStyle(Optional control As Object)
    modKeyCrossRefFixedEquationSpecificStyle
End Sub

Sub modKeyCrossRefFixedEquationSpecificStyle()
    modCrossRefFixedInit "Equation", AUD_crossref_equation
End Sub

Sub modCrossRefFixedChapterSpecificStyle(Optional control As Object)
    modKeyCrossRefFixedChapterSpecificStyle
End Sub

Sub modKeyCrossRefFixedChapterSpecificStyle()
    modCrossRefFixedInit "Chapter", AUD_crossref_chapter
End Sub

Sub modCrossRefFixedCodeSpecificStyle(Optional control As Object)
    modKeyCrossRefFixedCodeSpecificStyle
End Sub

Sub modKeyCrossRefFixedCodeSpecificStyle()
    modCrossRefFixedInit "Code", AUD_crossref_code
End Sub

Sub modCrossRefFixedMarginalNumberSpecificStyle(Optional control As Object)
    modKeyCrossRefFixedMarginalNumberSpecificStyle
End Sub

Sub modKeyCrossRefFixedMarginalNumberSpecificStyle()
    modCrossRefFixedInit "MarginalNumber", AUD_crossref_marginal_number
End Sub

' CrossRefDynamic [Figure, Table, Equation, Chapter, Code, Marginal number]: Specific style

Sub modCrossRefDynamicFigureSpecificStyle(Optional control As Object)
    modKeyCrossRefDynamicFigureSpecificStyle
End Sub

Sub modKeyCrossRefDynamicFigureSpecificStyle()
    modCrossRefDynamicInit 96, "Figure", fctWordDoc.CustomDocumentProperties("strFigureCaptionIdentifier"), _
        wdOnlyLabelAndNumber, AUD_crossref_figure
End Sub

Sub modCrossRefDynamicTableSpecificStyle(Optional control As Object)
    modKeyCrossRefDynamicTableSpecificStyle
End Sub

Sub modKeyCrossRefDynamicTableSpecificStyle()
    modCrossRefDynamicInit 97, "Table", fctWordDoc.CustomDocumentProperties("strTableCaptionIdentifier"), _
        wdOnlyLabelAndNumber, AUD_crossref_table
End Sub

Sub modCrossRefDynamicEquationSpecificStyle(Optional control As Object)
    modKeyCrossRefDynamicEquationSpecificStyle
End Sub

Sub modKeyCrossRefDynamicEquationSpecificStyle()
    modCrossRefDynamicInit 99, "Equation", fctWordDoc.CustomDocumentProperties("strEquationCaptionIdentifier"), _
        wdOnlyLabelAndNumber, AUD_crossref_equation
End Sub

Sub modCrossRefDynamicChapterSpecificStyle(Optional control As Object)
    modKeyCrossRefDynamicChapterSpecificStyle
End Sub

Sub modKeyCrossRefDynamicChapterSpecificStyle()
    Dim chapterRefKind As Long
    chapterRefKind = wdNumberFullContext
    On Error Resume Next
    chapterRefKind = CLng(fctWordDoc.CustomDocumentProperties("strCrossRefDynamicChapterRefKind"))
    On Error GoTo 0
    modCrossRefBookmarkDynamicInit 98, "Chapter", chapterRefKind, _
        Array(AUD_h1, AUD_h2, AUD_h3, AUD_h4, AUD_h5, _
                AUD_h6, AUD_h7, AUD_h8, AUD_h9), AUD_crossref_chapter
End Sub

Sub modCrossRefDynamicCodeSpecificStyle(Optional control As Object)
    modKeyCrossRefDynamicCodeSpecificStyle
End Sub

Sub modKeyCrossRefDynamicCodeSpecificStyle()
    modCrossRefDynamicInit 98, "Code", fctWordDoc.CustomDocumentProperties("strListingCaptionIdentifier"), _
        wdOnlyLabelAndNumber, AUD_crossref_code
End Sub

Sub modCrossRefDynamicMarginalNumberSpecificStyle(Optional control As Object)
    modKeyCrossRefDynamicMarginalNumberSpecificStyle
End Sub

Sub modKeyCrossRefDynamicMarginalNumberSpecificStyle()
    modCrossRefBookmarkDynamicInit 95, "MarginalNumber", wdContentText, _
        Array(AUD_marginal_number), AUD_crossref_marginal_number
End Sub

' CrossRefFixed [Page]: Specific style

Sub modCrossRefFixedPageSpecificStyle(Optional control As Object)
    modKeyCrossRefFixedPageSpecificStyle
End Sub

Sub modKeyCrossRefFixedPageSpecificStyle()
    modCrossRefFixedInit "Page", AUD_crossref_page
End Sub

' CrossRefFixed [Page]: General style

Sub modCrossRefFixedPageGeneralStyle(Optional control As Object)
    modKeyCrossRefFixedPageGeneralStyle
End Sub

Sub modKeyCrossRefFixedPageGeneralStyle()
    modCrossRefFixedInit "Page", AUD_crossref_general
End Sub

' CrossRefFixed [General]: General style

Sub modCrossRefFixedGeneral(Optional control As Object)
    modKeyCrossRefFixedGeneral
End Sub

Sub modKeyCrossRefFixedGeneral()
    modCrossRefFixedInit "General", AUD_crossref_general
End Sub

Sub modCrossRefCritical(Optional control As Object)
    modKeyCrossRefCritical
End Sub

Sub modKeyCrossRefCritical()

    Dim wdRng As Word.Range
    Set wdRng = Selection.Range

    If Not wdRng = "" Then
        Selection.Range.Style = fctWordDoc.Styles(AUD_crossref_critical)
    Else
        MsgBox fctGetErrorMsg(Format(1, "00"))
    End If

End Sub


Attribute VB_Name = "emphasis"
Option Explicit

Private wdEmphCreator As Variant

Sub modEmph01(Optional control As Object)
    modKeyEmph01
End Sub

Sub modKeyEmph01()
    fctEmphasis (AUD_emph_bold)
End Sub

Sub modEmph01Sub(Optional control As Object)
    fctEmphasis (AUD_emph_bold_sub)
End Sub

Sub modEmph01SubSub(Optional control As Object)
    fctEmphasis (AUD_emph_bold_subsub)
End Sub

Sub modEmph01Sup(Optional control As Object)
    fctEmphasis (AUD_emph_bold_sup)
End Sub

Sub modEmph01SupSup(Optional control As Object)
    fctEmphasis (AUD_emph_bold_supsup)
End Sub

Sub modEmph02(Optional control As Object)
    modKeyEmph02
End Sub

Sub modKeyEmph02()
    fctEmphasis (AUD_emph_italic)
End Sub

Sub modEmph02Sub(Optional control As Object)
    fctEmphasis (AUD_emph_italic_sub)
End Sub

Sub modEmph02SubSub(Optional control As Object)
    fctEmphasis (AUD_emph_italic_subsub)
End Sub

Sub modEmph02Sup(Optional control As Object)
    fctEmphasis (AUD_emph_italic_sup)
End Sub

Sub modEmph02SupSup(Optional control As Object)
    fctEmphasis (AUD_emph_italic_supsup)
End Sub

Sub modEmph03(Optional control As Object)
    modKeyEmph03
End Sub

Sub modKeyEmph03()
    fctEmphasis (AUD_emph_bolditalic)
End Sub

Sub modEmph03Sub(Optional control As Object)
    fctEmphasis (AUD_emph_bolditalic_sub)
End Sub

Sub modEmph03SubSub(Optional control As Object)
    fctEmphasis (AUD_emph_bolditalic_subsub)
End Sub

Sub modEmph03Sup(Optional control As Object)
    fctEmphasis (AUD_emph_bolditalic_sup)
End Sub

Sub modEmph03SupSup(Optional control As Object)
    fctEmphasis (AUD_emph_bolditalic_supsup)
End Sub

Sub modEmph04(Optional control As Object)
    fctEmphasis (AUD_emph_smallcaps)
End Sub

Sub modEmph04b(Optional control As Object)
    fctEmphasis (AUD_emph_smallcaps_bold)
End Sub

Sub modEmph04i(Optional control As Object)
    fctEmphasis (AUD_emph_smallcaps_italic)
End Sub

Sub modEmph04bi(Optional control As Object)
    fctEmphasis (AUD_emph_smallcaps_bolditalic)
End Sub

Sub modEmph05(Optional control As Object)
    fctEmphasis (AUD_emph_underline)
End Sub

Sub modEmph05b(Optional control As Object)
    fctEmphasis (AUD_emph_underline_bold)
End Sub

Sub modEmph05i(Optional control As Object)
    fctEmphasis (AUD_emph_underline_italic)
End Sub

Sub modEmph05bi(Optional control As Object)
    fctEmphasis (AUD_emph_underline_bolditalic)
End Sub

Sub modEmph06(Optional control As Object)
    fctEmphasis (AUD_emph_caps)
End Sub

Sub modEmph06b(Optional control As Object)
    fctEmphasis (AUD_emph_caps_bold)
End Sub

Sub modEmph06i(Optional control As Object)
    fctEmphasis (AUD_emph_caps_italic)
End Sub

Sub modEmph06bi(Optional control As Object)
    fctEmphasis (AUD_emph_caps_bolditalic)
End Sub

Sub modEmph07(Optional control As Object)
    fctEmphasis (AUD_emph_strikethrough)
End Sub

Sub modEmph07b(Optional control As Object)
    fctEmphasis (AUD_emph_strikethrough_bold)
End Sub

Sub modEmph07i(Optional control As Object)
    fctEmphasis (AUD_emph_strikethrough_italic)
End Sub

Sub modEmph07bi(Optional control As Object)
    fctEmphasis (AUD_emph_strikethrough_bolditalic)
End Sub

Sub modEmph08(Optional control As Object)
    fctEmphasis (AUD_emph_spaced)
End Sub

Sub modEmph08b(Optional control As Object)
    fctEmphasis (AUD_emph_spaced_bold)
End Sub

Sub modEmph08i(Optional control As Object)
    fctEmphasis (AUD_emph_spaced_italic)
End Sub

Sub modEmph08bi(Optional control As Object)
    fctEmphasis (AUD_emph_spaced_bolditalic)
End Sub

Sub modEmph09(Optional control As Object)
    fctEmphasis (AUD_emph_initial)
End Sub

Sub modEmph10(Optional control As Object)
    fctEmphasis (AUD_emph_regular)
End Sub

Sub fctEmphasis(strEmphStyle As String)
    Dim wdRng As Word.Range
    Set wdRng = Selection.Range
    
    If Not wdRng = "" Then
        Selection.Style = fctWordDoc.Styles(strEmphStyle)
    Else
        MsgBox fctGetErrorMsg(Format(1, "00"))
    End If
End Sub
Attribute VB_Name = "endnote"
Option Explicit

Sub modInsertEndnote(Optional control As Object)
    
    Dim objEndnote As Word.endnote
    Set objEndnote = Selection.Endnotes.Add(Range:=Selection.Range)
    objEndnote.Reference.Style = fctWordDoc.Styles(AUD_endnote_label)
    objEndnote.Range.Style = fctWordDoc.Styles(AUD_endnote)
    
    Selection.StartOf wdParagraph
    Selection.Expand wdCharacter
    Selection.Range.Style = ActiveDocument.Styles(AUD_endnote_label)
    Selection.EndOf wdParagraph
    
End Sub

Sub modEndnote(Optional control As Object)
    SetParagraphStyle AUD_endnote
End Sub

Sub modEndnoteLabel(Optional control As Object)

    Dim wdRng As Word.Range
    Set wdRng = Selection.Range
    
    If Not wdRng = "" Then
        Selection.Range.Style = fctWordDoc.Styles(AUD_endnote_label)
    Else
        MsgBox fctGetErrorMsg(Format(1, "00"))
    End If
    
End Sub
Attribute VB_Name = "equations"
Option Explicit

Sub modEquationInsertEquationWithCaptionWithChapterNumPlusFigureNum(Optional control As Object)

    If modIsInEquationContainer Then
        MsgBox fctGetErrorMsg(Format(42, "00"))
        Exit Sub
    End If

    frmEquation.Caption = fctGetFormCaption(Format(910, "00"))
    frmEquation.txtEquationCaptionYesNo.Value = "yes"
    frmEquation.txtEquationNr.Value = "ChapNumFigNum"
    frmEquation.FrmEquationPrepareUserForm
    frmEquation.Show
End Sub

Sub modEquationInsertEquationWithCaptionWithFigureNumOnly(Optional control As Object)

    If modIsInEquationContainer Then
        MsgBox fctGetErrorMsg(Format(42, "00"))
        Exit Sub
    End If

    frmEquation.Caption = fctGetFormCaption(Format(911, "00"))
    frmEquation.txtEquationCaptionYesNo.Value = "yes"
    frmEquation.txtEquationNr.Value = "FigNumOnly"
    frmEquation.FrmEquationPrepareUserForm
    frmEquation.Show
End Sub

Sub modEquationInsertEquationWithCaptionWithOutNum(Optional control As Object)

    If modIsInEquationContainer Then
        MsgBox fctGetErrorMsg(Format(42, "00"))
        Exit Sub
    End If

    frmEquation.Caption = fctGetFormCaption(Format(912, "00"))
    frmEquation.txtEquationCaptionYesNo.Value = "yes"
    frmEquation.txtEquationNr.Value = "NoNum"
    frmEquation.FrmEquationPrepareUserForm "fileref_auto_ext;fileref_auto_no_ext"
    frmEquation.Show
End Sub

Sub modEquationInsertEquationWithOutCaption(Optional control As Object)
    If modIsInEquationContainer Then
        MsgBox fctGetErrorMsg(Format(42, "00"))
        Exit Sub
    End If

    frmEquation.Caption = fctGetFormCaption(Format(913, "00"))
    frmEquation.txtEquationCaptionYesNo.Value = "no"
    frmEquation.txtEquationNr.Value = "NoNum"
    frmEquation.FrmEquationPrepareUserForm "fileref_auto_ext;fileref_auto_no_ext"
    frmEquation.Show
End Sub

Function modIsInEquationContainer() As Boolean
    If Selection.Information(wdWithInTable) Then
        If Selection.tables(1).Style = AUD_tf_equation_figure Or _
           Selection.tables(1).Style = AUD_tf_equation_text Or _
           Selection.tables(1).Style = AUD_tf_figure Then
            modIsInEquationContainer = True
        End If
    End If
End Function

Sub modEquationCaption(Optional control As Object)
    SetParagraphStyle AUD_equation_caption
End Sub

Sub modEquationCreator(strEquationNr As String)

    Dim wdTbl As Word.Table
    Dim wdTblFirstCell As Word.Cell
    Dim wdTblLastCell As Word.Cell
    
    Dim fldChpNum As Word.Field
    Dim fldRunNum As Word.Field
    
    Dim wdRngCellLastInsertionPoint As Range
    Dim wdRngExtensionSeparator As Range
    
    Dim strEquationID As String
    Dim strEquationIDExtension As String
    Dim strChpNum As String
    Dim strRunNum As String
    
    Dim strCaptionText As String
    Dim strCaptionIdentifier As String
    Dim strCaptionNoNumText As String
    Dim strFileNamePlaceholder As String
    Dim strSSwitch As String
    
    Dim iNumColumns As Long
    
    strCaptionText = fctWordDoc.CustomDocumentProperties("strEquationCaptionText")
    strCaptionIdentifier = fctWordDoc.CustomDocumentProperties("strEquationCaptionIdentifier")
    strCaptionNoNumText = fctWordDoc.CustomDocumentProperties("strEquationCaptionNoNumText")
    strFileNamePlaceholder = fctWordDoc.CustomDocumentProperties("strFilenamePlaceholder")

    iNumColumns = 2

    If frmEquation.txtEquationCaptionYesNo.Value = "no" Then
        iNumColumns = 1
    End If
    
    If fctSelectionHasFollowingTable(Selection.Characters.Last) Then
        Selection.End = Selection.Characters.Last.start
    End If

    Set wdTbl = fctGetTable(fctGetRng, 1, iNumColumns)
    Set wdTblFirstCell = wdTbl.Cell(1, 1)
    
    If iNumColumns = 2 Then
        Set wdTblLastCell = wdTbl.Cell(1, 2)
    End If
    
    With wdTbl
        .AllowAutoFit = False
        .AllowPageBreaks = False
        .PreferredWidthType = wdPreferredWidthPercent
        .PreferredWidth = 100
        If Not wdTblLastCell Is Nothing Then
            .columns.First.PreferredWidthType = wdPreferredWidthPercent
            .columns.First.PreferredWidth = 80
            .columns.Last.PreferredWidthType = wdPreferredWidthPercent
            .columns.Last.PreferredWidth = 20
        End If
    End With
    
    wdTblFirstCell.Select
    Selection.EndOf wdCell
    
    If frmEquation.equation_manual.Value Then
        wdTbl.Style = fctWordDoc.Styles(AUD_tf_equation_text)
        wdTblFirstCell.Range.Style = fctWordDoc.Styles(AUD_equation_text)
    Else
        wdTbl.Style = fctWordDoc.Styles(AUD_tf_equation_figure)
        wdTblFirstCell.Range.Style = fctWordDoc.Styles(AUD_equation_id)
    End If
    
    ' txt_fileref_from_file: Abbildung inkl. Dateinamen einf|fffd|gen
    If frmEquation.fileref_from_file.Value Then
        If frmEquation.txt_fileref_from_file <> "" Then
            modEquationInsertFigureAsInlineShape frmEquation.txt_fileref_from_file.ControlTipText
            Set wdRngCellLastInsertionPoint = wdTblFirstCell.Range.Characters.Last
            wdRngCellLastInsertionPoint.Collapse wdCollapseStart
            wdRngCellLastInsertionPoint.Text = vbCr & frmEquation.txt_fileref_from_file.Text
            
            If CBool(fctWordDoc.CustomDocumentProperties( _
                "bolEquationsFileRefFromFileShowExtension")) Then
                Set wdRngExtensionSeparator = _
                    fctGetExtensionSeparator(wdTblFirstCell.Range.Paragraphs.Last.Range)
            End If
        End If
    ' fileref_auto_ext | fileref_auto_no_ext: Dateinamen mit GlnNr generieren
    ElseIf frmEquation.fileref_auto_ext Or frmEquation.fileref_auto_no_ext Then
    
        Set fldChpNum = wdTbl.Range.Fields.Add(Range:=Selection.Range, _
            Type:=wdFieldStyleRef, Text:="\s " & AUD_h1)
        
        If frmEquation.txtEquationNr.Value = "ChapNumFigNum" Then
            On Error Resume Next
                strChpNum = Format(CInt(Replace(fldChpNum.Result, _
                    fctWordDoc.CustomDocumentProperties("lrm"), "")), "000")
            On Error GoTo 0
            
            fldChpNum.Delete
            
            If strChpNum <> "" Then
                strEquationID = Replace( _
                    fctWordDoc.CustomDocumentProperties("strEquationIDChapNumSyntax"), _
                        "#kapnr#", strChpNum)
            End If
            
        End If
        
        strSSwitch = ""
        If strEquationNr = "ChapNumFigNum" And strChpNum <> "" Then
            strSSwitch = " \s 1"
        End If
    
        Set fldRunNum = wdTbl.Range.Fields.Add(Range:=Selection.Range, _
            Type:=wdFieldSequence, Text:=strCaptionIdentifier & " \* ARABIC" & strSSwitch)
        fctWordDoc.Fields.Update
        strRunNum = Format(Replace(fldRunNum.Result.Text, _
            fctWordDoc.CustomDocumentProperties("lrm"), ""), "000")
        fldRunNum.Delete
        
        If frmEquation.fileref_auto_ext Then
            strEquationIDExtension = frmEquation.txt_fileref_auto_ext.Value
        End If
        
        wdTblFirstCell.Range.Text = strEquationID & _
            Replace(fctWordDoc.CustomDocumentProperties("strEquationIDFigNumSyntax"), _
                "#abbnr#", strRunNum) & strEquationIDExtension
                        
    ' fileref_manual: Dateinamen selber eintragen
    ElseIf frmEquation.fileref_manual Then
        wdTblFirstCell.Range.Text = frmEquation.txt_fileref_manual.Value
    ' fileref_unknown: Dateiname noch unbekannt
    ElseIf frmEquation.fileref_unknown And _
        strFileNamePlaceholder <> fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
        wdTblFirstCell.Range.Text = strFileNamePlaceholder
    End If
    
    If Not frmEquation.equation_manual.Value Then
        ' FigureId-Prefix einf|fffd|gen
        modEquationInsertFieldCode "strFigureIdPrefix", "#AUD_figure_id_prefix#", _
            wdTblFirstCell.Range.Paragraphs.Last.Range, True
        
        ' FigureId-Suffix einf|fffd|gen
        modEquationInsertFieldCode "strFigureIdSuffix", "#AUD_figure_id_suffix#", _
            wdTblFirstCell.Range.Paragraphs.Last.Range.Characters.Last, True, wdRngExtensionSeparator
    End If
        
    If Not wdTblLastCell Is Nothing Then
        wdTblLastCell.Range.Style = fctWordDoc.Styles(AUD_equation_caption)
        wdTblLastCell.Select
        Selection.EndOf wdCell
    
        If strEquationNr = "ChapNumFigNum" Or strEquationNr = "FigNumOnly" Then
            Call GetCaption(strCaptionText, strCaptionIdentifier, strEquationNr, wdCell)
        Else
            If strCaptionNoNumText <> fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
                Selection.Text = strCaptionNoNumText
            End If
        End If
    End If
    
    fctWordDoc.Fields.Update
        
    wdTblFirstCell.Select
    Selection.EndOf wdCell
    
    Unload frmEquation
    
    Call InsertParaAfterTable(AUD_wanted_empty_para_after_word_table)
    
End Sub

Sub modEquationInline(Optional control As Object)

    Dim objRangeStart As Range
    
    Set objRangeStart = Selection.Range.Duplicate
    objRangeStart.End = objRangeStart.start

    modFigureInsertPrefixSuffix Selection.Range, _
        fctWordDoc.CustomDocumentProperties("strEquationInlineID"), AUD_equation_inline

    modFigureInsertCopyright objRangeStart, True, False

    Selection.Text = " "
    On Error Resume Next
    Selection.Font.Reset
    On Error GoTo 0
    
    Selection.Collapse wdCollapseEnd

End Sub

Sub modEquationInsertFigureAsInlineShape(strPictureFile As String)
    Dim isLinkedToFile As Boolean
    Dim isSavedWithDocument As Boolean
    Dim objShape As InlineShape
    
    isLinkedToFile = False
    isSavedWithDocument = True
    If CBool(fctWordDoc.CustomDocumentProperties("bolEquationsFileRefFromFileLinked")) Then
        isLinkedToFile = True
        isSavedWithDocument = False
    End If
    
    Set objShape = ActiveDocument.Shapes.AddPicture(FileName:= _
        fctReplaceSlashes(strPictureFile, False), LinkToFile:=isLinkedToFile, _
        SaveWithDocument:=isSavedWithDocument).ConvertToInlineShape

    Selection.FormattedText = objShape.Range
    objShape.Delete
End Sub

Function modEquationInsertFieldCode(docVarKey As String, fieldIdentifier As String, _
    ByVal objInsertionPoint As Range, doCollapseRange As Boolean, _
    Optional objExtensionSeparator As Range) As Range
    
    Dim docVarParts As Variant
    Dim fIf As Field
    Dim fQuote As Field
    
    If Not objExtensionSeparator Is Nothing Then
        Set objInsertionPoint = objExtensionSeparator
    End If
    
    docVarParts = Split(fctWordDoc.CustomDocumentProperties(docVarKey).Value, ";")
     
    If Not CBool(docVarParts(0)) Then
        Set modEquationInsertFieldCode = objInsertionPoint
        Exit Function
    End If
    
    If doCollapseRange Then
        objInsertionPoint.Collapse wdCollapseStart
    End If

    Set fIf = objInsertionPoint.Fields.Add(objInsertionPoint, wdFieldEmpty)
    fIf.Code.Text = " IF 1 = 1 "
    
    Set fQuote = objInsertionPoint.Fields.Add(modMetaDataCollapsed(fIf.Code), _
        wdFieldIf, "", False)
    fQuote.Code.Text = " QUOTE """ & docVarParts(1) & """ "
    
    modMetaDataCollapsed(fIf.Code).Text = " "
    
    Set fQuote = objInsertionPoint.Fields.Add(modMetaDataCollapsed(fIf.Code), _
        wdFieldIf, "", False)
    fQuote.Code.Text = " QUOTE """ & fieldIdentifier & """ "
    fQuote.Result.Text = fieldIdentifier
    
    modMetaDataCollapsed(fIf.Code).Text = " "
    
    fIf.Update
    ActiveWindow.View.ShowFieldCodes = False
    
    Set objInsertionPoint = fIf.Code
    objInsertionPoint.Collapse wdCollapseEnd
    objInsertionPoint.Move wdCharacter
    
    Set modEquationInsertFieldCode = objInsertionPoint
End Function

Sub modEquationInsertWordEquation(Optional control As Object)
    Dim objRange As Range
    Dim objEq As OMath
 
    Set objRange = Selection.Range
    objRange.Text = ""
    Set objRange = Selection.OMaths.Add(objRange)
    Set objEq = objRange.OMaths(1)
    
    objEq.BuildUp
    objEq.Range.Select
End Sub
Attribute VB_Name = "extract"
Option Explicit

Public IgnoreIdentifier As String
Public DocumentStyles() As Variant

Function modExtractExtractStyles(extractType As String, selectedStyles As Variant, _
            rngStory As Range, sortType As String) As Boolean
    
    Dim matchingStyles As Variant
    Dim arrStyleDisplaySorted As Variant
    Dim arrExtractEntry() As ExtractEntry
    Dim arrExtractEntryCount As Long
    Dim sourceDoc As Document
    Dim targetDoc As Document
    Dim groupKey As String
    Dim i As Long
    
    Set sourceDoc = ActiveDocument

    If extractType = "character" Then
        matchingStyles = modExtractGetMatchingStyles(selectedStyles(0))
        If fctArrayCount(matchingStyles) = -1 Then Exit Function
        arrExtractEntry = _
            modExtractGetPrevNextCharacterStyles(selectedStyles, matchingStyles, _
                rngStory, rngStory.storyType, 0, "Next", True, sortType)
    ElseIf extractType = "paragraph" Then
        arrExtractEntry = _
            modExtractGetPrevNextParagraphStyles(selectedStyles, rngStory, _
                rngStory.storyType, 0, "Next", True, sortType)
    ElseIf extractType = "table" Then
        arrExtractEntry = _
            modExtractGetPrevNextTableStyles(selectedStyles, rngStory, _
                rngStory.storyType, 0, "Next", True, sortType)
    End If

    arrExtractEntryCount = fctArrayCount(arrExtractEntry)
    
    If arrExtractEntryCount = -1 Then Exit Function

    Set targetDoc = Documents.Add
    targetDoc.CustomDocumentProperties.Add Name:="strLanguageID", LinkToContent:=False, _
        Value:=sourceDoc.CustomDocumentProperties("strLanguageID"), Type:=msoPropertyTypeString

    targetDoc.ActiveWindow.ActivePane.View.Zoom.Percentage = 100

    modExtractPrepareStyles targetDoc

    If fctGetWordVersion >= 12 Then
        modLookSetThemeColors 0, sourceDoc, targetDoc
    End If

    modExtractAssignPageSettings sourceDoc.PageSetup, targetDoc

    If sortType = "Range" Or sortType = "RangeWithContext" Then
        arrStyleDisplaySorted = modExtractGetStyleDisplaySorted(arrExtractEntry, sortType)
    End If

    groupKey = ""
    For i = 0 To arrExtractEntryCount

        If groupKey <> arrExtractEntry(i).ExtractEntryGroupKey Then
            modExtractWriteGroupKeyHeader targetDoc, arrExtractEntry(i), _
                arrExtractEntry, arrStyleDisplaySorted, sortType
        End If

        modExtractExtractSelection sourceDoc, targetDoc, _
                arrExtractEntry(i).ExtractEntryRange, _
                arrExtractEntry(i).ExtractEntryExtractParagraphStyle

        groupKey = arrExtractEntry(i).ExtractEntryGroupKey
    Next

    modExtractCleanupTargetDoc targetDoc

    targetDoc.Characters.First.Select
    Selection.Collapse wdCollapseStart
    
    modExtractExtractStyles = True

End Function

Function modExtractMoveToPrevNext(extractType As String, selectedStyles As Variant, rngStory As Range, _
            parentStory As Long, shapeRangeStart As Long, direction As String) As Boolean

    Dim matchingStyles As Variant
    Dim arrExtractEntry() As ExtractEntry
    Dim arrExtractEntryCount As Long
    Dim objExtractEntry As ExtractEntry

    If extractType = "character" Then
        matchingStyles = modExtractGetMatchingStyles(selectedStyles(0))
        If fctArrayCount(matchingStyles) = -1 Then Exit Function
        arrExtractEntry = _
            modExtractGetPrevNextCharacterStyles(selectedStyles, matchingStyles, rngStory, _
                parentStory, shapeRangeStart, direction, False, "Range")
    ElseIf extractType = "paragraph" Then
        arrExtractEntry = _
            modExtractGetPrevNextParagraphStyles(selectedStyles, rngStory.Duplicate, _
                parentStory, shapeRangeStart, direction, False, "Range")
    ElseIf extractType = "table" Then
        arrExtractEntry = _
            modExtractGetPrevNextTableStyles(selectedStyles, rngStory.Duplicate, _
                parentStory, shapeRangeStart, direction, False, "Range")
    End If

    arrExtractEntryCount = fctArrayCount(arrExtractEntry)
    
    If arrExtractEntryCount = -1 Then Exit Function
    
    If direction = "Next" Or direction = "First" Then
        Set objExtractEntry = arrExtractEntry(0)
    Else
        Set objExtractEntry = arrExtractEntry(arrExtractEntryCount)
    End If
    
    modExtractSelectRange objExtractEntry
    
    modExtractMoveToPrevNext = True

End Function

Function modExtractGetPrevNextCharacterStyles(selectedStyles As Variant, matchingStyles As Variant, _
            rngStory As Range, parentStory As Long, shapeRangeStart As Long, direction As String, _
            isExtraction As Boolean, sortType As String) As ExtractEntry()

    Dim arrExtractEntry() As ExtractEntry
    Dim arrExtractEntryCount As Long
    Dim arrExtractStory() As ExtractStory
    Dim nextStoryIndex As Long
    Dim numStoryRanges As Long
    Dim storySeekView As Long
    Dim storyParentStory As Long
    Dim objExtractStory As ExtractStory

    If Not isExtraction And direction <> "First" And direction <> "Last" Then
        Set rngStory = modExtractGetStartRange(rngStory, direction)
    End If

    arrExtractStory = modExtractGetStoryRanges(rngStory, parentStory, _
                        shapeRangeStart, direction, isExtraction)
    numStoryRanges = fctArrayCount(arrExtractStory)

    storySeekView = modExtractGetSeekView(parentStory)
    storyParentStory = parentStory

    Do
        modExtractGetPrevNextCharacterStyle selectedStyles, matchingStyles, _
            rngStory, storyParentStory, storySeekView, arrExtractEntry, direction, isExtraction, sortType

        arrExtractEntryCount = fctArrayCount(arrExtractEntry)
        
        If Not isExtraction And arrExtractEntryCount <> -1 Then Exit Do

        Set rngStory = Nothing
        If nextStoryIndex >= 0 And nextStoryIndex <= numStoryRanges Then
            Set objExtractStory = arrExtractStory(nextStoryIndex)
            Set rngStory = objExtractStory.ExtractStoryRange
            storySeekView = objExtractStory.ExtractStorySeekView
            storyParentStory = objExtractStory.ExtractStoryParentStory
            If Not rngStory Is Nothing Then
                If direction = "Next" Or direction = "First" Then
                    rngStory.End = rngStory.start
                Else
                    rngStory.start = rngStory.End
                End If
            End If
        End If

        nextStoryIndex = nextStoryIndex + 1

    Loop While Not rngStory Is Nothing

    If arrExtractEntryCount = -1 Then Exit Function

    modExtractSortArrayOfExtractEntry arrExtractEntry, 0, arrExtractEntryCount
    
    modExtractGetPrevNextCharacterStyles = arrExtractEntry

End Function

Sub modExtractGetPrevNextCharacterStyle(selectedStyles As Variant, matchingStyles As Variant, _
            rngStory As Range, storyParentStory As Long, storySeekView As Long, arrExtractEntry() As ExtractEntry, _
            direction As String, isExtraction As Boolean, sortType As String)

    Dim isMatchingTableStyle As Boolean
    Dim isMatchingParagraphStyle As Boolean
    Dim lastCharInParaEnd As Long
    Dim i As Integer
    Dim objRange As Range
    Dim matchingStylesLength As Long
    Dim objExtractEntry As ExtractEntry
    Dim objRangeTempEnd As Range
    Dim rangeEnd As Long
    Dim objLastCharacterInStory As Range
    Dim paragraphStyleName As String
    Dim tableStyleName As String
   
    If rngStory Is Nothing Then Exit Sub
    
    Set objLastCharacterInStory = modExtractGetEndOfStoryMark(rngStory)

    matchingStylesLength = fctArrayCount(matchingStyles)
    
    If matchingStylesLength = -1 Then Exit Sub

    For i = 0 To matchingStylesLength
        Set objRange = rngStory.Duplicate
        With objRange.Find
            Do
                .Forward = direction = "Next" Or direction = "First"
                .Style = matchingStyles(i)
                .Wrap = wdFindStop
                .Format = True
                .Execute
                
                If Not .Found Then Exit Do
                
                paragraphStyleName = fctGetFilteredStyleName(objRange.Paragraphs(1).Style)
                tableStyleName = modExtractGetTableStyleName(objRange)
                
                isMatchingParagraphStyle = selectedStyles(1) = "" Or _
                   modExtractIsMatchingStyle(paragraphStyleName, selectedStyles(1))

                isMatchingTableStyle = selectedStyles(2) = "" Or _
                   modExtractIsMatchingStyle(tableStyleName, selectedStyles(2))

                Set objRangeTempEnd = objRange.Duplicate
                lastCharInParaEnd = objRangeTempEnd.Paragraphs(1).Range.End - 1

                Do
                    rangeEnd = objRangeTempEnd.End
                    objRangeTempEnd.Collapse wdCollapseEnd
                    objRangeTempEnd.End = objRangeTempEnd.End + 1
                Loop While (objRangeTempEnd.End > rangeEnd And _
                    objRangeTempEnd.Style.NameLocal = matchingStyles(i).NameLocal And _
                    objRangeTempEnd.End <= lastCharInParaEnd)

                If objRangeTempEnd.End > rangeEnd Then
                    objRangeTempEnd.End = objRangeTempEnd.End - 1
                End If

                objRangeTempEnd.start = objRange.start
                objRange.End = objRangeTempEnd.End
                
                If objRange = "" Or modExtractRangeIsEndOfStoryMark(objLastCharacterInStory, objRange) Then
                    Exit Do
                End If

                If (Not isExtraction Or (isExtraction And objRange <> vbCr)) And _
                        isMatchingParagraphStyle And isMatchingTableStyle Then
                    
                    Set objExtractEntry = modExtractAddExtractEntryToArray(arrExtractEntry)
                    Set objExtractEntry.ExtractEntryRange = objRange.Duplicate
                    objExtractEntry.ExtractEntrySeekView = storySeekView
                    objExtractEntry.ExtractEntryParentStory = storyParentStory
                    
                    objExtractEntry.ExtractEntryCharacterStyle = matchingStyles(i)
                    objExtractEntry.ExtractEntryParagraphStyle = paragraphStyleName
                    objExtractEntry.ExtractEntryTableStyle = tableStyleName

                    objExtractEntry.ExtractEntryExtractParagraphStyle = AUD_bodytext
                    
                    If sortType = "Range" Or sortType = "RangeWithContext" Then
                        objExtractEntry.ExtractEntrySort = objExtractEntry.ExtractEntrySortSortByRange
                        objExtractEntry.ExtractEntryGroupKey = objExtractEntry.ExtractEntryGroupKeyRange
                    ElseIf sortType = "Style" Then
                        objExtractEntry.ExtractEntrySort = objExtractEntry.ExtractEntrySortSortByStyle
                        objExtractEntry.ExtractEntryGroupKey = objExtractEntry.ExtractEntryGroupKeyStyle
                    ElseIf sortType = "StyleWithContext" Then
                        objExtractEntry.ExtractEntrySort = objExtractEntry.ExtractEntrySortSortByStyleWithContext
                        objExtractEntry.ExtractEntryGroupKey = objExtractEntry.ExtractEntryGroupKeyStyleWithContext
                    End If

                    If Not isExtraction Then Exit Do
                
                End If
                
                If direction = "Next" Or direction = "First" Then
                    objRange.Collapse wdCollapseEnd
                Else
                    objRange.Collapse wdCollapseStart
                End If
            Loop
        End With
    Next

End Sub

Function modExtractGetPrevNextParagraphStyles(selectedStyles As Variant, rngStory As Range, _
            parentStory As Long, shapeRangeStart As Long, direction As String, _
            isExtraction As Boolean, sortType As String) As ExtractEntry()

    Dim arrExtractEntry() As ExtractEntry
    Dim arrExtractEntryCount As Long
    Dim objExtractEntry As ExtractEntry
    Dim arrExtractStory As Variant
    Dim nextStoryIndex As Long
    Dim arrExtractStoryCount As Long
    Dim storySeekView As Long
    Dim storyParentStory As Long
    Dim objExtractStory As ExtractStory
    
    If Not isExtraction And direction <> "First" And direction <> "Last" Then
        Set rngStory = modExtractGetStartRange(rngStory, direction)
    End If
    
    arrExtractStory = _
        modExtractGetStoryRanges(rngStory, parentStory, shapeRangeStart, _
        direction, isExtraction)
    
    arrExtractStoryCount = fctArrayCount(arrExtractStory)

    storySeekView = modExtractGetSeekView(parentStory)
    storyParentStory = parentStory

    Do
        modExtractGetPrevNextParagraphStyle selectedStyles, rngStory, storyParentStory, _
            storySeekView, arrExtractEntry, direction, nextStoryIndex > 0, isExtraction, sortType
            
        arrExtractEntryCount = fctArrayCount(arrExtractEntry)
        
        If Not isExtraction And arrExtractEntryCount <> -1 Then Exit Do

        Set rngStory = Nothing
        If nextStoryIndex >= 0 And nextStoryIndex <= arrExtractStoryCount Then
            Set objExtractStory = arrExtractStory(nextStoryIndex)
            Set rngStory = objExtractStory.ExtractStoryRange
            storySeekView = objExtractStory.ExtractStorySeekView
            storyParentStory = objExtractStory.ExtractStoryParentStory
            If Not rngStory Is Nothing Then
                If direction = "Next" Or direction = "First" Then
                    rngStory.End = rngStory.start
                Else
                    rngStory.start = rngStory.End
                End If
            End If
        End If

        nextStoryIndex = nextStoryIndex + 1

    Loop While Not rngStory Is Nothing
    
    If arrExtractEntryCount = -1 Then Exit Function

    modExtractSortArrayOfExtractEntry arrExtractEntry, 0, arrExtractEntryCount
    
    modExtractGetPrevNextParagraphStyles = arrExtractEntry

End Function

Sub modExtractGetPrevNextParagraphStyle(selectedStyles As Variant, rngStory As Range, _
            parentStory As Long, storySeekView As Long, arrExtractEntry() As ExtractEntry, _
            direction As String, isStoryChange As Boolean, isExtraction As Boolean, sortType As String)

    Dim objParagraph As Paragraph
    Dim objExtractEntry As ExtractEntry
    Dim isMatchingParagraphStyle As Boolean
    Dim isMatchingTableStyle As Boolean
    Dim paragraphStyleName As String
    Dim tableStyleName As String
    
    If Not isExtraction And Not isStoryChange And direction = "Next" Then
        Set objParagraph = rngStory.Paragraphs(1).Next
    ElseIf Not isStoryChange And direction = "Prev" Then
        Set objParagraph = rngStory.Paragraphs(1).Previous
    Else
        Set objParagraph = rngStory.Paragraphs(1)
    End If

    Do
        If objParagraph Is Nothing Then Exit Do
        
        If Not modExtractIsTableExcludeParagraph(objParagraph) Then
        
            paragraphStyleName = fctGetFilteredStyleName(objParagraph.Style)
            tableStyleName = modExtractGetTableStyleName(objParagraph.Range)
            
            isMatchingParagraphStyle = modExtractIsMatchingStyle(paragraphStyleName, selectedStyles(1))
                
            isMatchingTableStyle = selectedStyles(2) = "" Or _
               modExtractIsMatchingStyle(tableStyleName, selectedStyles(2))
            
            If (Not isExtraction Or (isExtraction And Not modExtractIsEmptyParagraph(objParagraph))) And _
                    isMatchingParagraphStyle And isMatchingTableStyle Then
                Set objExtractEntry = modExtractAddExtractEntryToArray(arrExtractEntry)
                Set objExtractEntry.ExtractEntryRange = modExtractReduceRange(objParagraph.Range)
                objExtractEntry.ExtractEntrySeekView = storySeekView
                objExtractEntry.ExtractEntryParentStory = parentStory
                
                objExtractEntry.ExtractEntryParagraphStyle = paragraphStyleName
                objExtractEntry.ExtractEntryTableStyle = tableStyleName
                
                objExtractEntry.ExtractEntryExtractParagraphStyle = objParagraph.Style.NameLocal
                
                If sortType = "Range" Or sortType = "RangeWithContext" Then
                    objExtractEntry.ExtractEntrySort = objExtractEntry.ExtractEntrySortSortByRange
                    objExtractEntry.ExtractEntryGroupKey = objExtractEntry.ExtractEntryGroupKeyRange
                ElseIf sortType = "Style" Then
                    objExtractEntry.ExtractEntrySort = objExtractEntry.ExtractEntrySortSortByStyle
                    objExtractEntry.ExtractEntryGroupKey = objExtractEntry.ExtractEntryGroupKeyStyle
                ElseIf sortType = "StyleWithContext" Then
                    objExtractEntry.ExtractEntrySort = objExtractEntry.ExtractEntrySortSortByStyleWithContext
                    objExtractEntry.ExtractEntryGroupKey = objExtractEntry.ExtractEntryGroupKeyStyleWithContext
                End If
                
                If Not isExtraction Then Exit Sub
            End If
            
        End If
        
        If direction = "Next" Or direction = "First" Then
            Set objParagraph = objParagraph.Next
        Else
            Set objParagraph = objParagraph.Previous
        End If
        
    Loop

End Sub

Function modExtractGetPrevNextTableStyles(selectedStyles As Variant, rngStory As Range, _
            parentStory As Long, shapeRangeStart As Long, direction As String, _
            isExtraction As Boolean, sortType As String) As ExtractEntry()

    Dim arrExtractEntry() As ExtractEntry
    Dim arrExtractEntryCount As Long
    Dim objExtractEntry As ExtractEntry
    Dim arrExtractStory As Variant
    Dim nextStoryIndex As Long
    Dim arrExtractStoryCount As Long
    Dim storySeekView As Long
    Dim storyParentStory As Long
    Dim objExtractStory As ExtractStory

    arrExtractStory = _
        modExtractGetStoryRanges(rngStory, parentStory, shapeRangeStart, _
            direction, isExtraction)
    
    arrExtractStoryCount = fctArrayCount(arrExtractStory)
    
    storySeekView = modExtractGetSeekView(parentStory)
    storyParentStory = parentStory
    
    Do
        If direction = "Next" Or direction = "First" Then
            modExtractGetNextTableStyle selectedStyles, rngStory, storyParentStory, _
                    storySeekView, arrExtractEntry, shapeRangeStart, _
                    nextStoryIndex > 0, isExtraction, direction, sortType
        Else
            modExtractGetPrevTableStyle selectedStyles, rngStory, storyParentStory, _
                    storySeekView, arrExtractEntry, shapeRangeStart
        End If
        
        arrExtractEntryCount = fctArrayCount(arrExtractEntry)
        
        If Not isExtraction And arrExtractEntryCount <> -1 Then Exit Do

        Set rngStory = Nothing
        If nextStoryIndex >= 0 And nextStoryIndex <= arrExtractStoryCount Then
            Set objExtractStory = arrExtractStory(nextStoryIndex)
            Set rngStory = objExtractStory.ExtractStoryRange
            storySeekView = objExtractStory.ExtractStorySeekView
            storyParentStory = objExtractStory.ExtractStoryParentStory
            If Not rngStory Is Nothing Then
                If direction = "Next" Or direction = "First" Then
                    rngStory.End = rngStory.start
                Else
                    rngStory.start = rngStory.End
                End If
            End If
        End If

        nextStoryIndex = nextStoryIndex + 1

    Loop While Not rngStory Is Nothing
    
    If arrExtractEntryCount = -1 Then Exit Function

    modExtractSortArrayOfExtractEntry arrExtractEntry, 0, arrExtractEntryCount
    
    modExtractGetPrevNextTableStyles = arrExtractEntry

End Function

Sub modExtractGetNextTableStyle(selectedStyles As Variant, rngStory As Range, parentStory As Long, _
            storySeekView As Long, arrExtractEntry() As ExtractEntry, shapeRangeStart As Long, _
            isStoryChange As Boolean, isExtraction As Boolean, direction As String, sortType As String)

    Dim arrTables As Variant
    Dim objExtractEntry As ExtractEntry
    Dim objTable As Table
    Dim objRange As Range
    Dim objWholeStory As Range
    Dim i As Long
    Dim tableRangeStart As Long
    
    Set objWholeStory = rngStory.Duplicate
    objWholeStory.WholeStory
    
    rngStory.End = objWholeStory.End
    
    arrTables = fctGetTablesInSelection(rngStory)
    
    If arrTables(0) Is Nothing Then Exit Sub
    
    tableRangeStart = -1
    For i = 0 To UBound(arrTables)
        Set objTable = arrTables(i)
        If (isExtraction Or isStoryChange Or direction = "First" Or objTable.Range.start > rngStory.start) And _
                modExtractIsMatchingStyle(objTable.Style.NameLocal, selectedStyles(2)) Then
            
            Set objExtractEntry = modExtractAddExtractEntryToArray(arrExtractEntry)
            Set objExtractEntry.ExtractEntryRange = modExtractGetTableRange(objTable)
            objExtractEntry.ExtractEntrySeekView = storySeekView
            objExtractEntry.ExtractEntryParentStory = parentStory
            
            objExtractEntry.ExtractEntryTableStyle = objTable.Style.NameLocal
            
            objExtractEntry.ExtractEntryExtractParagraphStyle = AUD_wanted_empty_para_after_word_table
            
            If sortType = "Range" Or sortType = "RangeWithContext" Then
                objExtractEntry.ExtractEntrySort = objExtractEntry.ExtractEntrySortSortByRange
                objExtractEntry.ExtractEntryGroupKey = objExtractEntry.ExtractEntryGroupKeyRange
            ElseIf sortType = "Style" Then
                objExtractEntry.ExtractEntrySort = objExtractEntry.ExtractEntrySortSortByStyle
                objExtractEntry.ExtractEntryGroupKey = objExtractEntry.ExtractEntryGroupKeyStyle
            ElseIf sortType = "StyleWithContext" Then
                objExtractEntry.ExtractEntrySort = objExtractEntry.ExtractEntrySortSortByStyleWithContext
                objExtractEntry.ExtractEntryGroupKey = objExtractEntry.ExtractEntryGroupKeyStyleWithContext
            End If
            
            i = i + fctGetNumDocumentTables(objTable.tables, 0)

            If Not isExtraction Then Exit Sub
        End If
    Next
    
End Sub

Sub modExtractGetPrevTableStyle(selectedStyles As Variant, rngStory As Range, parentStory As Long, _
            storySeekView As Long, arrExtractEntry() As ExtractEntry, shapeRangeStart As Long)

    Dim objParagraph As Paragraph
    Dim arrTables As Variant
    Dim objTable As Table
    Dim objExtractEntry As ExtractEntry
    Dim objWholeStory As Range
    Dim i As Long
    
    rngStory.Collapse wdCollapseStart
    Set objParagraph = modExtractGetStartParagraph(rngStory.Paragraphs(1), _
                            modExtractGetTableNestingLevel(rngStory.Paragraphs(1)), "Prev")
    
    If objParagraph Is Nothing Then Exit Sub
    
    Set objWholeStory = rngStory.Duplicate
    objWholeStory.WholeStory
    
    rngStory.End = objParagraph.Range.End
    rngStory.start = objWholeStory.start
    
    arrTables = fctGetTablesInSelection(rngStory)

    Dim numTables As Long
    
    If arrTables(0) Is Nothing Then Exit Sub
    
    numTables = UBound(arrTables)
    
    For i = numTables To 0 Step -1
        Set objTable = arrTables(i)
        If objTable.Range.start < rngStory.End And _
                modExtractIsMatchingStyle(objTable.Style.NameLocal, selectedStyles(2)) Then
            Set objExtractEntry = modExtractAddExtractEntryToArray(arrExtractEntry)
            Set objExtractEntry.ExtractEntryRange = modExtractGetTableRange(objTable)
            objExtractEntry.ExtractEntrySeekView = storySeekView
            objExtractEntry.ExtractEntryParentStory = parentStory
            objExtractEntry.ExtractEntrySort = objExtractEntry.ExtractEntrySortSortByRange
            Exit Sub
        End If
    Next
    
End Sub

Function modExtractGetTableRange(objTable As Table) As Range
    
    Dim objRange As Range
    Set objRange = objTable.Range.Duplicate
    
    If objRange.Paragraphs.Last.Next.Style = AUD_wanted_empty_para_after_word_table Or _
        objRange.Paragraphs.Last.Next.Style = AUD_wanted_empty_para_after_marginal_note Then
        objRange.End = objRange.Next.End
    End If
    
    Set modExtractGetTableRange = objRange

End Function

Function modExtractGetStartParagraph(objParagraph As Paragraph, nestingLevelStart As Integer, _
            direction As String) As Paragraph
    
    Do
        If objParagraph Is Nothing Then Exit Do
        
        If modExtractGetTableNestingLevel(objParagraph) <> nestingLevelStart Then
            Set modExtractGetStartParagraph = objParagraph
            Exit Function
        End If
        
        If direction = "Next" Then
            Set objParagraph = objParagraph.Next
        Else
            Set objParagraph = objParagraph.Previous
        End If
    Loop

End Function

Function modExtractGetTableNestingLevel(objParagraph As Paragraph) As Integer
    
    If objParagraph Is Nothing Then Exit Function
    If objParagraph.Range.tables.Count = 0 Then Exit Function
    
    modExtractGetTableNestingLevel = objParagraph.Range.tables(1).nestingLevel
    
End Function

Function modExtractIsTableExcludeParagraph(objParagraph As Paragraph) As Boolean
    
    If objParagraph Is Nothing Then Exit Function
    If objParagraph.Range.tables.Count = 0 Then Exit Function
    
    If objParagraph.Range.Cells.Count > 0 Then Exit Function
    
    modExtractIsTableExcludeParagraph = True
End Function

Function modExtractGetMatchingStyles(selectedStyle As Variant) As Variant

    Dim matchingStyles As Variant
    Dim objStyle As Style
    
    On Error Resume Next
    Set objStyle = ActiveDocument.Styles(modExtractUnescape(selectedStyle))
    On Error GoTo 0
    
    If Not objStyle Is Nothing Then
        ReDim matchingStyles(0)
        Set matchingStyles(0) = objStyle
    Else
        modExtractInitDocumentStyles
        matchingStyles = modExtractGetMatchingStylesByPattern(selectedStyle)
    End If

    modExtractGetMatchingStyles = matchingStyles

End Function

Function modExtractGetMatchingStylesByPattern(selectedStyle As Variant) As Variant
    
    Dim numStyles As Long
    Dim currentIndex As Long
    Dim objStyle As Style
    Dim i As Long
    Dim matchingStyles() As Variant
    
    numStyles = fctArrayCount(DocumentStyles)
    
    If numStyles = -1 Then Exit Function
    
    For i = 0 To numStyles
        Set objStyle = ActiveDocument.Styles(DocumentStyles(i))
        If modExtractIsMatchingStyle(fctGetFilteredStyleName(objStyle.NameLocal), selectedStyle) Then
            If objStyle.Type = wdStyleTypeCharacter Then
                currentIndex = fctArrayCount(matchingStyles) + 1
                ReDim Preserve matchingStyles(currentIndex)
                Set matchingStyles(currentIndex) = objStyle
            End If
        End If
    Next
    
    modExtractGetMatchingStylesByPattern = matchingStyles

End Function

Function modExtractIsMatchingStyle(styleName As String, selectedStyle As Variant) As Boolean
    
    Dim selectedStylesSplit As Variant
    Dim numSelectedStylesSplit As Integer
    Dim i As Integer
    
    If styleName = "" Then
        Exit Function
    End If
    
    selectedStylesSplit = Split(selectedStyle, " or ")
    
    For i = 0 To UBound(selectedStylesSplit)
        If LCase(styleName) Like selectedStylesSplit(i) Then
            modExtractIsMatchingStyle = True
            Exit Function
        End If
    Next

End Function

Sub modExtractInitDocumentStyles()
    
    If fctArrayCount(DocumentStyles) <> -1 Then Exit Sub
    
    Dim numStyles As Long
    Dim currentIndex As Long
    Dim objStyle As Style
    Dim i As Long
    
    numStyles = ActiveDocument.Styles.Count
    
    If numStyles = -1 Then Exit Sub
    
    For i = 1 To numStyles
        Set objStyle = ActiveDocument.Styles(i)
        currentIndex = fctArrayCount(DocumentStyles) + 1
        ReDim Preserve DocumentStyles(currentIndex)
        Set DocumentStyles(currentIndex) = objStyle
    Next
    
End Sub

Function modExtractGetStartRange(objRange As Range, direction As String) As Range
    
    Dim objStyle As Style

    On Error Resume Next
    Set objStyle = objRange.Style
    On Error GoTo 0
    
    If Not objStyle Is Nothing Then
        If objStyle.Type = WdStyleType.wdStyleTypeCharacter Then
            Set objRange = fctExtendFormattedRange(objRange, objStyle)
        End If
    End If

    If direction = "Next" Then
        objRange.start = objRange.End
    Else
        objRange.End = objRange.start
    End If
    
    Set modExtractGetStartRange = objRange
    
End Function

Function modExtractGetStoryRanges(objRange As Range, parentStory As Long, _
            shapeRangeStart As Long, direction As String, isExtraction As Boolean) As ExtractStory()

    Dim objStoryRange As Range
    Dim arrExtractStory() As ExtractStory
    Dim arrExtractStoryCount As Long
    Dim sortIndex As Integer
    Dim objRangeStoryType As Long
    Dim objExtractStory As ExtractStory
    
    If Not objRange Is Nothing Then
        objRangeStoryType = objRange.storyType
    End If
    
    For Each objStoryRange In ActiveDocument.StoryRanges
        
        If objStoryRange.storyType <> wdTextFrameStory Then
            
            sortIndex = 0
            If objStoryRange.storyType <= parentStory Then
                sortIndex = 1
            End If
            
            Set objExtractStory = modExtractAddExtractStoryToArray(arrExtractStory)
            Set objExtractStory.ExtractStoryRange = objStoryRange
            objExtractStory.ExtractStorySeekView = modExtractGetSeekView(objStoryRange.storyType)
            objExtractStory.ExtractStoryParentStory = objStoryRange.storyType
            objExtractStory.Sort = sortIndex & ":" & Format(objStoryRange.storyType, "00") & ":00000000"
            
        End If
    
    Next
    
    modExtractAddShapeStoryRanges _
        ActiveDocument.Shapes, arrExtractStory, objRangeStoryType, parentStory, _
        shapeRangeStart
    
    modExtractAddShapeStoryRanges _
        ActiveDocument.Sections(1).Headers(wdHeaderFooterPrimary).Shapes, arrExtractStory, _
        objRangeStoryType, parentStory, shapeRangeStart

    arrExtractStoryCount = fctArrayCount(arrExtractStory)
    
    If arrExtractStoryCount = -1 Then Exit Function
    
    modExtractSortArrayOfExtractStory arrExtractStory, 0, arrExtractStoryCount
    
    If direction = "Prev" Or direction = "Last" Then
        modExtractReverseArrayOfExtractStory arrExtractStory
        modExtractFirstExtractStoryToLast arrExtractStory
    End If
    
    If isExtraction Then
        If arrExtractStoryCount = 0 Then
            Erase arrExtractStory
        ElseIf arrExtractStoryCount > 0 Then
            ReDim Preserve arrExtractStory(arrExtractStoryCount - 1)
        End If
    End If

    modExtractGetStoryRanges = arrExtractStory
    
End Function

Sub modExtractAddShapeStoryRanges(arrShapes As Shapes, arrExtractStory() As ExtractStory, _
            objRangeStoryType As Long, parentStory As Long, shapeRangeStart As Long)

    Dim objShapeRange As Shape
    Dim sortIndex As Integer
    Dim objExtractStory As ExtractStory
    Dim objTextRange As Range
    Dim i As Long

    For i = 1 To arrShapes.Count
        
        Set objShapeRange = arrShapes(i)
        Set objTextRange = Nothing
        On Error Resume Next
        Set objTextRange = objShapeRange.TextFrame.TextRange
        On Error GoTo 0
        
        If Not objTextRange Is Nothing Then
            
            sortIndex = 0
            If objShapeRange.Anchor.storyType < parentStory Or (objShapeRange.Anchor.storyType = parentStory _
                    And objRangeStoryType = wdTextFrameStory And objShapeRange.Anchor.start <= shapeRangeStart) Then
                sortIndex = 1
            End If
            
            Set objExtractStory = modExtractAddExtractStoryToArray(arrExtractStory)
            Set objExtractStory.ExtractStoryRange = objTextRange
            objExtractStory.ExtractStorySeekView = modExtractGetSeekView(objShapeRange.Anchor.storyType)
            objExtractStory.ExtractStoryParentStory = objShapeRange.Anchor.storyType
            objExtractStory.Sort = sortIndex & ":" & Format(objShapeRange.Anchor.storyType, "00") & _
                ":1" & Format(objShapeRange.Anchor.start, "0000000")
        
        End If

    Next
    
End Sub

Function modExtractAddExtractStoryToArray(arrExtractStory() As ExtractStory) As ExtractStory
    
    Dim currentIndex As Long
    Dim objExtractStory As ExtractStory
    Set objExtractStory = New ExtractStory
    
    currentIndex = fctArrayCount(arrExtractStory) + 1
    If currentIndex = 0 Then
        ReDim arrExtractStory(0)
    Else
        ReDim Preserve arrExtractStory(currentIndex)
    End If

    Set arrExtractStory(currentIndex) = objExtractStory
    
    Set modExtractAddExtractStoryToArray = objExtractStory
    
End Function

Function modExtractAddExtractEntryToArray(arrExtractEntry() As ExtractEntry) As ExtractEntry
    
    Dim currentIndex As Long
    Dim objExtractEntry As ExtractEntry
    Set objExtractEntry = New ExtractEntry
    
    currentIndex = fctArrayCount(arrExtractEntry) + 1
    If currentIndex = 0 Then
        ReDim arrExtractEntry(0)
    Else
        ReDim Preserve arrExtractEntry(currentIndex)
    End If

    Set arrExtractEntry(currentIndex) = objExtractEntry
    
    Set modExtractAddExtractEntryToArray = objExtractEntry
    
End Function

Sub modExtractFirstExtractStoryToLast(arrExtractStory() As ExtractStory)

    Dim index As Long
    Dim objExtractStory As ExtractStory
    Dim arrExtractStoryCount As Long
    
    arrExtractStoryCount = fctArrayCount(arrExtractStory)
    
    If arrExtractStoryCount = -1 Then Exit Sub
    
    Set objExtractStory = arrExtractStory(0)
    ReDim Preserve arrExtractStory(arrExtractStoryCount + 1)
    Set arrExtractStory(arrExtractStoryCount + 1) = objExtractStory
    
    For index = 0 To UBound(arrExtractStory) - 1
        Set arrExtractStory(index) = arrExtractStory(index + 1)
    Next
    
    ReDim Preserve arrExtractStory(LBound(arrExtractStory) To UBound(arrExtractStory) - 1)

End Sub

Function modExtractGetTableStyleName(objRange As Range) As String
    If objRange.tables.Count > 0 Then
        modExtractGetTableStyleName = objRange.tables(1).Style.NameLocal
    End If
End Function

Function modExtractReduceRange(rngStory As Range) As Range
    Dim objRange As Range
    Set objRange = rngStory.Duplicate
    If objRange.Characters.Last = Chr(13) Or objRange.Characters.Last = Chr(13) & Chr(7) Then
        objRange.End = objRange.End - 1
    End If
    Set modExtractReduceRange = objRange
End Function

Function modExtractGetSelectedStyles(selectedStyles As Variant) As Variant
    selectedStyles(0) = modExtractPrepareSelectedStyle(selectedStyles(0))
    selectedStyles(1) = modExtractPrepareSelectedStyle(selectedStyles(1))
    selectedStyles(2) = modExtractPrepareSelectedStyle(selectedStyles(2))
    modExtractGetSelectedStyles = selectedStyles
End Function

Function modExtractEscape(ByVal styleName As String) As String
    Dim replaceString As String
    replaceString = Replace(styleName, "#", "[#]")
    replaceString = Replace(replaceString, "*", "[*]")
    replaceString = Replace(replaceString, "?", "[?]")
    modExtractEscape = replaceString
End Function

Function modExtractUnescape(ByVal styleName As String) As String
    Dim replaceString As String
    replaceString = Replace(styleName, "[#]", "#")
    replaceString = Replace(replaceString, "[*]", "*")
    replaceString = Replace(replaceString, "[?]", "?")
    modExtractUnescape = replaceString
End Function

Function modExtractGetSeekView(stryType As Long) As Long
    Select Case stryType
        Case wdMainTextStory
            modExtractGetSeekView = wdSeekMainDocument
        Case wdFootnotesStory
            modExtractGetSeekView = wdSeekFootnotes
        Case wdEndnotesStory
            modExtractGetSeekView = wdSeekEndnotes
        Case wdCommentsStory
            modExtractGetSeekView = wdSeekMainDocument
        Case wdTextFrameStory
            modExtractGetSeekView = wdSeekMainDocument
        Case wdEvenPagesHeaderStory
            modExtractGetSeekView = wdSeekEvenPagesHeader
        Case wdPrimaryHeaderStory
            modExtractGetSeekView = wdSeekPrimaryHeader
        Case wdEvenPagesFooterStory
            modExtractGetSeekView = wdSeekEvenPagesFooter
        Case wdPrimaryFooterStory
            modExtractGetSeekView = wdSeekPrimaryFooter
        Case wdFirstPageHeaderStory
            modExtractGetSeekView = wdSeekFirstPageHeader
        Case wdFirstPageFooterStory
            modExtractGetSeekView = wdSeekFirstPageFooter
        Case wdFootnoteSeparatorStory
            modExtractGetSeekView = wdSeekFootnotes
        Case wdFootnoteContinuationSeparatorStory
            modExtractGetSeekView = wdSeekFootnotes
        Case wdFootnoteContinuationNoticeStory
            modExtractGetSeekView = wdSeekFootnotes
        Case wdEndnoteSeparatorStory
            modExtractGetSeekView = wdSeekEndnotes
        Case wdEndnoteContinuationSeparatorStory
            modExtractGetSeekView = wdSeekEndnotes
        Case wdEndnoteContinuationNoticeStory
            modExtractGetSeekView = wdSeekEndnotes
    End Select
    modExtractGetSeekView = Format(modExtractGetSeekView, "00")
End Function

Function modExtractRangeIsEndOfStoryMark(objLastCharacterInRange As Range, objRange As Range) As Boolean
    modExtractRangeIsEndOfStoryMark = _
        objLastCharacterInRange.start = objRange.start And _
        objLastCharacterInRange.End = objRange.End
End Function

Function modExtractGetEndOfStoryMark(objRange As Range) As Range
    Dim storyRange As Range
    Set storyRange = objRange.Duplicate
    storyRange.Expand wdStory
    Set modExtractGetEndOfStoryMark = storyRange.Characters.Last
End Function

Sub modExtractSelectRange(objExtractEntry As ExtractEntry)
    
    If ActiveWindow.View.SplitSpecial <> wdPaneNone Then
        ActiveWindow.Panes(2).Close
    End If
    
    If ActiveWindow.ActivePane.View.Type = wdNormalView Or ActiveWindow. _
        ActivePane.View.Type = wdOutlineView Then
        ActiveWindow.ActivePane.View.Type = wdPrintView
    End If

    If Not fctIsMac Then
        modExtractScrollIntoView objExtractEntry.ExtractEntryRange
    End If
    
    On Error Resume Next
    ActiveWindow.ActivePane.View.SeekView = objExtractEntry.ExtractEntrySeekView
    On Error GoTo 0
    
    objExtractEntry.ExtractEntryRange.Select

End Sub

Function modExtractScrollIntoView(objRange As Range)
    ActiveDocument.ActiveWindow.ScrollIntoView objRange.Characters.First, False
End Function

Sub modExtractSortArrayOfExtractEntry(arrExtractEntry() As ExtractEntry, inLow As Long, inHi As Long)

  Dim pivot As ExtractEntry
  Dim tmpSwap As ExtractEntry
  Dim tmpLow As Long
  Dim tmpHi As Long

  tmpLow = inLow
  tmpHi = inHi

  Set pivot = arrExtractEntry((inLow + inHi) \ 2)

  While (tmpLow <= tmpHi)

     While (arrExtractEntry(tmpLow).ExtractEntrySort < pivot.ExtractEntrySort And tmpLow < inHi)
        tmpLow = tmpLow + 1
     Wend

     While (pivot.ExtractEntrySort < arrExtractEntry(tmpHi).ExtractEntrySort And tmpHi > inLow)
        tmpHi = tmpHi - 1
     Wend

     If (tmpLow <= tmpHi) Then
        Set tmpSwap = arrExtractEntry(tmpLow)
        Set arrExtractEntry(tmpLow) = arrExtractEntry(tmpHi)
        Set arrExtractEntry(tmpHi) = tmpSwap
        tmpLow = tmpLow + 1
        tmpHi = tmpHi - 1
     End If

  Wend

  If (inLow < tmpHi) Then modExtractSortArrayOfExtractEntry arrExtractEntry, inLow, tmpHi
  If (tmpLow < inHi) Then modExtractSortArrayOfExtractEntry arrExtractEntry, tmpLow, inHi

End Sub

Sub modExtractSortArrayOfExtractStory(arrExtractStory() As ExtractStory, inLow As Long, inHi As Long)

  Dim pivot As ExtractStory
  Dim tmpSwap As ExtractStory
  Dim tmpLow As Long
  Dim tmpHi As Long

  tmpLow = inLow
  tmpHi = inHi

  Set pivot = arrExtractStory((inLow + inHi) \ 2)

  While (tmpLow <= tmpHi)

     While (arrExtractStory(tmpLow).Sort < pivot.Sort And tmpLow < inHi)
        tmpLow = tmpLow + 1
     Wend

     While (pivot.Sort < arrExtractStory(tmpHi).Sort And tmpHi > inLow)
        tmpHi = tmpHi - 1
     Wend

     If (tmpLow <= tmpHi) Then
        Set tmpSwap = arrExtractStory(tmpLow)
        Set arrExtractStory(tmpLow) = arrExtractStory(tmpHi)
        Set arrExtractStory(tmpHi) = tmpSwap
        tmpLow = tmpLow + 1
        tmpHi = tmpHi - 1
     End If

  Wend

  If (inLow < tmpHi) Then modExtractSortArrayOfExtractStory arrExtractStory, inLow, tmpHi
  If (tmpLow < inHi) Then modExtractSortArrayOfExtractStory arrExtractStory, tmpLow, inHi

End Sub

Sub modExtractReverseArrayOfExtractStory(arrExtractStory() As ExtractStory)
    
    Dim index As Long
    Dim index2 As Long
    Dim temp As ExtractStory
    Dim arrExtractStoryCount As Long
    
    arrExtractStoryCount = fctArrayCount(arrExtractStory)
    If arrExtractStoryCount = -1 Then Exit Sub
    
    index2 = UBound(arrExtractStory)

    For index = 0 To (arrExtractStoryCount \ 2)
        Set temp = arrExtractStory(index)
        Set arrExtractStory(index) = arrExtractStory(index2)
        Set arrExtractStory(index2) = temp
        index2 = index2 - 1
    Next

End Sub

Function modExtractIsEmptyParagraph(objParagraph As Paragraph) As Boolean
    modExtractIsEmptyParagraph = objParagraph.Range = vbCr Or objParagraph.Range = Chr(13) & Chr(7)
End Function

Sub modExtractAssignPageSettings(sourceDocumentPageSetup As PageSetup, targetDocument As Document)
    With targetDocument.PageSetup
        .Orientation = sourceDocumentPageSetup.Orientation
        .LeftMargin = sourceDocumentPageSetup.LeftMargin
        .RightMargin = sourceDocumentPageSetup.RightMargin
        .BottomMargin = sourceDocumentPageSetup.BottomMargin
        .TopMargin = sourceDocumentPageSetup.TopMargin
    End With
End Sub

Sub modExtractCleanupTargetDoc(targetDoc As Document)
    If targetDoc.Characters.Last = vbCr And _
        targetDoc.Characters.Last.Style <> AUD_wanted_empty_para_after_word_table And _
        targetDoc.Characters.Last.Style <> AUD_wanted_empty_para_after_marginal_note And _
        targetDoc.Characters.Last.Style <> AUD_wanted_empty_para And _
        targetDoc.Characters.Last.Style <> AUD_wanted_empty_para_2 Then
        targetDoc.Characters.Last.Delete
    End If
End Sub

Function modExtractGetStoryTypeText(rngStoryType As WdStoryType) As String
    Select Case rngStoryType
        Case 1:
            modExtractGetStoryTypeText = fctGetFormCaption("211")
        Case 2:
            modExtractGetStoryTypeText = fctGetFormCaption("212")
        Case 3:
            modExtractGetStoryTypeText = fctGetFormCaption("213")
        Case 4:
            modExtractGetStoryTypeText = fctGetFormCaption("214")
        Case 5:
            modExtractGetStoryTypeText = fctGetFormCaption("215")
        Case 6:
            modExtractGetStoryTypeText = fctGetFormCaption("216")
        Case 7:
            modExtractGetStoryTypeText = fctGetFormCaption("217")
        Case 8:
            modExtractGetStoryTypeText = fctGetFormCaption("218")
        Case 9:
            modExtractGetStoryTypeText = fctGetFormCaption("219")
        Case 10:
            modExtractGetStoryTypeText = fctGetFormCaption("220")
        Case 11:
            modExtractGetStoryTypeText = fctGetFormCaption("221")
        Case 12:
            modExtractGetStoryTypeText = fctGetFormCaption("222")
        Case 13:
            modExtractGetStoryTypeText = fctGetFormCaption("223")
        Case 14:
            modExtractGetStoryTypeText = fctGetFormCaption("224")
        Case 15:
            modExtractGetStoryTypeText = fctGetFormCaption("225")
        Case 16:
            modExtractGetStoryTypeText = fctGetFormCaption("226")
        Case 17:
            modExtractGetStoryTypeText = fctGetFormCaption("227")
    End Select
End Function

Sub modExtractWriteGroupKeyHeader(targetDoc As Document, objExtractEntry As ExtractEntry, _
        arrExtractEntry() As ExtractEntry, arrStyleDisplaySorted As Variant, sortType As String)
    
    Dim targetDocAllRange As Range
    Dim storyText As Variant
    Dim styleText As String

    If objExtractEntry.ExtractEntryRange.storyType <> objExtractEntry.ExtractEntryParentStory Then
        storyText = _
            modExtractGetStoryTypeText(objExtractEntry.ExtractEntryParentStory) & " | " & _
            modExtractGetStoryTypeText(objExtractEntry.ExtractEntryRange.storyType)
    Else
        storyText = modExtractGetStoryTypeText(objExtractEntry.ExtractEntryRange.storyType)
    End If

    If sortType = "Range" Or sortType = "RangeWithContext" Then
        styleText = _
            modExtractJoinStyleDisplaySorted(arrStyleDisplaySorted, objExtractEntry.ExtractEntryGroupKey)
    ElseIf sortType = "Style" Then
        styleText = objExtractEntry.ExtractEntryStyleDisplay
    ElseIf sortType = "StyleWithContext" Then
        styleText = objExtractEntry.ExtractEntryStyleWithContextDisplay
    End If
    
    Set targetDocAllRange = targetDoc.Range
    targetDocAllRange.Collapse wdCollapseEnd
    
    targetDocAllRange.Style = "Extract_Story"
    targetDocAllRange.Text = storyText
    targetDocAllRange.InsertParagraphAfter
    targetDocAllRange.Collapse wdCollapseEnd
    targetDocAllRange.Style = "Extract_Style"
    targetDocAllRange.Text = styleText
    targetDocAllRange.InsertParagraphAfter
    
End Sub

Sub modExtractPrepareStyles(targetDoc As Document)

    Dim objStyleExtractStory As Style
    Dim objStyleExtractStyle As Style
    Dim objStyleExtractStyleSeparator As Style
    
    Set objStyleExtractStory = targetDoc.Styles.Add("Extract_Story", wdStyleTypeParagraph)
    Set objStyleExtractStyle = targetDoc.Styles.Add("Extract_Style", wdStyleTypeParagraph)
    
    With objStyleExtractStory
        .NoSpaceBetweenParagraphsOfSameStyle = True
        .ParagraphFormat.Alignment = wdAlignParagraphLeft
        .ParagraphFormat.KeepWithNext = True
        .ParagraphFormat.SpaceAfter = 0
        .ParagraphFormat.SpaceBefore = 12
        .Font.Color = RGB(166, 166, 166)
        With .Borders(wdBorderTop)
            .LineStyle = wdLineStyleDot
            .LineWidth = wdLineWidth025pt
            .Color = RGB(166, 166, 166)
        End With
        With .Borders(wdBorderBottom)
            .LineStyle = wdLineStyleDot
            .LineWidth = wdLineWidth025pt
            .Color = RGB(166, 166, 166)
        End With
        With .Borders(wdBorderLeft)
            .LineStyle = wdLineStyleDot
            .LineWidth = wdLineWidth025pt
            .Color = RGB(166, 166, 166)
        End With
        With .Borders(wdBorderRight)
            .LineStyle = wdLineStyleDot
            .LineWidth = wdLineWidth025pt
            .Color = RGB(166, 166, 166)
        End With
        With .Shading
            .BackgroundPatternColor = RGB(242, 242, 242)
        End With
    End With

    With objStyleExtractStyle
        .BaseStyle = objStyleExtractStory
        .ParagraphFormat.SpaceAfter = 12
        .ParagraphFormat.SpaceBefore = 3
        .Font.Color = RGB(166, 166, 166)
        .Shading.BackgroundPatternColor = wdColorAutomatic
    End With

End Sub

Sub modExtractExtractSelection(sourceDoc As Document, targetDoc As Document, _
    objRange As Range, paragraphStyle As String)
    
    Dim targetDocAllRange As Range
    Set targetDocAllRange = targetDoc.Range
        
    targetDocAllRange.Collapse wdCollapseEnd
    targetDocAllRange.FormattedText = objRange.FormattedText
      
    If targetDocAllRange = "" Or targetDocAllRange.Characters.Last <> Chr(13) Then
        targetDocAllRange.Collapse wdCollapseEnd
        targetDocAllRange.Style = sourceDoc.Styles(paragraphStyle)
        targetDoc.Characters.Last.InsertParagraphAfter
    End If
End Sub

Function modExtractPrepareSelectedStyle(selectedStyle As Variant) As String
    If selectedStyle = IgnoreIdentifier Then Exit Function
    selectedStyle = LCase(selectedStyle)
    selectedStyle = Replace(selectedStyle, " oder ", " or ")
    selectedStyle = Replace(selectedStyle, " | ", " or ")
    modExtractPrepareSelectedStyle = selectedStyle
End Function

Function modExtractGetStyleDisplaySorted(arrExtractEntry() As ExtractEntry, sortType As String) As Variant
    
    Dim objExtractEntry As ExtractEntry
    Dim arrExtractEntryCount As Long
    
    Dim arrStyleDisplaySorted As Variant
    Dim arrStyleDisplaySortedCount As Long
    
    Dim currentIndex As Long
    Dim i As Long
    Dim groupKey As String
    
    arrExtractEntryCount = fctArrayCount(arrExtractEntry)
    For i = 0 To arrExtractEntryCount
        
        Set objExtractEntry = arrExtractEntry(i)
        
        groupKey = objExtractEntry.ExtractEntryGroupKey & "$$$"

        If sortType = "Range" Then
            groupKey = groupKey & _
            objExtractEntry.ExtractEntryGroupKeyStyle & "$$$" & _
            objExtractEntry.ExtractEntryStyleDisplay
        ElseIf sortType = "RangeWithContext" Then
            groupKey = groupKey & _
            objExtractEntry.ExtractEntryGroupKeyStyleWithContext & "$$$" & _
            objExtractEntry.ExtractEntryStyleWithContextDisplay
        End If

        If Not fctInArray(groupKey, arrStyleDisplaySorted) Then
            fctArrayPush arrStyleDisplaySorted, groupKey
        End If
    Next
    
    arrStyleDisplaySortedCount = fctArrayCount(arrStyleDisplaySorted)
    
    If arrStyleDisplaySortedCount <> -1 Then
        fctArraySort arrStyleDisplaySorted, 0, arrStyleDisplaySortedCount
    End If
    
    modExtractGetStyleDisplaySorted = arrStyleDisplaySorted
    
End Function

Function modExtractJoinStyleDisplaySorted(arrStyleDisplaySorted As Variant, groupKey As String) As String
    
    Dim arrStyleDisplayJoined As Variant
    Dim arrStyleDisplaySortedCount As Long
    
    Dim arrStyleDisplaySplit As Variant
    Dim i As Long
    Dim currentIndex As Long

    arrStyleDisplaySortedCount = fctArrayCount(arrStyleDisplaySorted)

    If arrStyleDisplaySortedCount = -1 Then Exit Function

    For i = 0 To arrStyleDisplaySortedCount

        arrStyleDisplaySplit = Split(arrStyleDisplaySorted(i), "$$$")

        If arrStyleDisplaySplit(0) = groupKey Then
            fctArrayPush arrStyleDisplayJoined, arrStyleDisplaySplit(2)
        End If
    Next

    modExtractJoinStyleDisplaySorted = fctArrayJoin(arrStyleDisplayJoined, vbCr)

End Function
Attribute VB_Name = "figures"
Option Explicit

Sub modFigureInline(Optional control As Object)

    Dim objRangeStart As Range
    
    Set objRangeStart = Selection.Range.Duplicate
    objRangeStart.End = objRangeStart.start

    modFigureInsertPrefixSuffix Selection.Range, _
        fctWordDoc.CustomDocumentProperties("strFigureInlineID"), AUD_figure_inline
    
    modFigureInsertCopyright objRangeStart, True, False
    
    Selection.Text = " "
    On Error Resume Next
    Selection.Font.Reset
    On Error GoTo 0

    Selection.Collapse wdCollapseEnd
    
End Sub

Sub modFigureCaption(Optional control As Object)
    SetParagraphStyle AUD_figure_caption
End Sub

Sub modFigureAddOnText(Optional control As Object)
    SetParagraphStyle AUD_figure_caption_addtext
End Sub

Sub modFigureWithCaptionWithChapterNumPlusFigureNum(Optional control As Object)

    If modIsInFigureContainer Then
        MsgBox fctGetErrorMsg(Format(42, "00"))
        Exit Sub
    End If

    Load frmFigure
    frmFigure.Caption = fctGetFormCaption(Format(86, "00"))
    frmFigure.txtFigureNr.Value = "ChapNumFigNum"
    frmFigure.txtFigureCaptionYesNo.Value = "yes"
    frmFigure.txtConvertFigureYesNo.Value = "no"
    frmFigure.FrmFigurePrepareUserForm
    frmFigure.Show
End Sub

Sub modFigureWithCaptionWithFigureNumOnly(Optional control As Object)

    If modIsInFigureContainer Then
        MsgBox fctGetErrorMsg(Format(42, "00"))
        Exit Sub
    End If

    Load frmFigure
    frmFigure.Caption = fctGetFormCaption(Format(87, "00"))
    frmFigure.txtFigureNr.Value = "FigNumOnly"
    frmFigure.txtFigureCaptionYesNo.Value = "yes"
    frmFigure.txtConvertFigureYesNo.Value = "no"
    frmFigure.FrmFigurePrepareUserForm
    frmFigure.Show
End Sub

Sub modFigureWithCaptionWithOutNum(Optional control As Object)

    If modIsInFigureContainer Then
        MsgBox fctGetErrorMsg(Format(42, "00"))
        Exit Sub
    End If

    Load frmFigure
    frmFigure.Caption = fctGetFormCaption(Format(88, "00"))
    frmFigure.txtFigureNr.Value = "NoNum"
    frmFigure.txtFigureCaptionYesNo.Value = "yes"
    frmFigure.txtConvertFigureYesNo.Value = "no"
    frmFigure.FrmFigurePrepareUserForm "fileref_auto_ext;fileref_auto_no_ext"
    frmFigure.Show
End Sub

Sub modFigureWithOutCaption(Optional control As Object)

    If modIsInFigureContainer Then
        MsgBox fctGetErrorMsg(Format(42, "00"))
        Exit Sub
    End If

    Load frmFigure
    frmFigure.Caption = fctGetFormCaption(Format(89, "00"))
    frmFigure.txtFigureNr.Value = "NoNum"
    frmFigure.txtFigureCaptionYesNo.Value = "no"
    frmFigure.txtConvertFigureYesNo.Value = "no"
    frmFigure.FrmFigurePrepareUserForm "fileref_auto_ext;fileref_auto_no_ext"
    frmFigure.Show
End Sub

Sub modFigureConvertToFigureCaptionWithChapterNumPlusFigureNum(Optional control As Object)

    If modIsEmptyRange Then
        MsgBox fctGetErrorMsg(Format(36, "00"))
        Exit Sub
    End If
    
    If modIsInFigureContainer Then
        MsgBox fctGetErrorMsg(Format(42, "00"))
        Exit Sub
    End If

    Load frmFigure
    frmFigure.Caption = fctGetFormCaption(Format(86, "00"))
    frmFigure.txtFigureNr.Value = "ChapNumFigNum"
    frmFigure.txtFigureCaptionYesNo.Value = "yes"
    frmFigure.txtConvertFigureYesNo.Value = "yes"
    frmFigure.FrmFigurePrepareUserForm
    frmFigure.Show
End Sub

Sub modFigureConvertToFigureCaptionWithFigureNumOnly(Optional control As Object)
    
    If modIsEmptyRange Then
        MsgBox fctGetErrorMsg(Format(36, "00"))
        Exit Sub
    End If
    
    If modIsInFigureContainer Then
        MsgBox fctGetErrorMsg(Format(42, "00"))
        Exit Sub
    End If
    
    Load frmFigure
    frmFigure.Caption = fctGetFormCaption(Format(87, "00"))
    frmFigure.txtFigureNr.Value = "FigNumOnly"
    frmFigure.txtFigureCaptionYesNo.Value = "yes"
    frmFigure.txtConvertFigureYesNo.Value = "yes"
    frmFigure.FrmFigurePrepareUserForm
    frmFigure.Show
End Sub

Sub modFigureConvertToFigureCaptionWithOutNum(Optional control As Object)

    If modIsEmptyRange Then
        MsgBox fctGetErrorMsg(Format(36, "00"))
        Exit Sub
    End If
    
    If modIsInFigureContainer Then
        MsgBox fctGetErrorMsg(Format(42, "00"))
        Exit Sub
    End If
    
    Load frmFigure
    frmFigure.Caption = fctGetFormCaption(Format(88, "00"))
    frmFigure.txtFigureNr.Value = "NoNum"
    frmFigure.txtFigureCaptionYesNo.Value = "yes"
    frmFigure.txtConvertFigureYesNo.Value = "yes"
    frmFigure.FrmFigurePrepareUserForm "fileref_auto_ext;fileref_auto_no_ext"
    frmFigure.Show
End Sub

Function modIsInFigureContainer() As Boolean
    If Selection.Information(wdWithInTable) Then
        If Selection.tables(1).Style = AUD_tf_figure Or _
           Selection.tables(1).Style = AUD_tf_equation_figure Or _
           Selection.tables(1).Style = AUD_tf_equation_text Then
            modIsInFigureContainer = True
        End If
    End If
End Function

Function modIsEmptyRange() As Boolean
    If Selection.Range.Text = "" Or Selection.Range.Text = vbCr Then
        modIsEmptyRange = True
    End If
End Function

Sub modFigureCaptionCreator()

    Dim wdTbl As Word.Table
    Dim lngNumRows As Long
    Dim wdTblFirstCell As Word.Cell
    Dim wdTblLastCell As Word.Cell
    Dim fldChpNum As Word.Field
    Dim fldRunNum As Word.Field
    Dim strRunNum As String
    Dim strChpNum As String
    Dim strFigureID As String
    Dim strFigureIDExtension As String
    Dim bolExpandSelection As Boolean
    Dim wdRngEnd As Long
    Dim wdRng As Range
    Dim wdRngCellLastInsertionPoint As Range
    Dim wdRngExtensionSeparator As Range
    Dim wdPreviousPara As Paragraph
    Dim strCaptionText As String
    Dim strCaptionIdentifier As String
    Dim strCaptionNoNumText As String
    Dim strFileNamePlaceholder As String
    Dim strSSwitch As String
    
    strCaptionText = fctWordDoc.CustomDocumentProperties("strFigureCaptionText")
    strCaptionIdentifier = fctWordDoc.CustomDocumentProperties("strFigureCaptionIdentifier")
    strCaptionNoNumText = fctWordDoc.CustomDocumentProperties("strFigureCaptionNoNumText")
    strFileNamePlaceholder = fctWordDoc.CustomDocumentProperties("strFilenamePlaceholder")
        
    If Selection.Range.Text <> "" And Asc(Selection.Characters.Last) = 13 Then
        Selection.End = Selection.End - 1
        bolExpandSelection = True
    End If

    Set wdRng = Selection.Range
    wdRngEnd = wdRng.End

    If frmFigure.txtConvertFigureYesNo.Value = "yes" Then
        Selection.Collapse wdCollapseEnd
    End If
    
    lngNumRows = 2
    
    If frmFigure.txtFigureCaptionYesNo.Value = "no" Then
        lngNumRows = 1
    End If
   
    'Objektvariable festlegen
    Set wdTbl = fctGetTable(wdRng:=Selection.Range, lngNumRows:=lngNumRows, lngNumColumns:=1)
    
    With wdTbl
        .PreferredWidthType = wdPreferredWidthPercent
        .PreferredWidth = 100
    End With
    
    'Objektvariable festlegen
    Set wdTblFirstCell = wdTbl.Cell(Row:=1, Column:=1)
    
    'Objektvariable festlegen
    Set wdTblLastCell = wdTbl.Cell(Row:=lngNumRows, Column:=1)

    'Tabelle mit Format belegen
    wdTbl.Range.Style = fctWordDoc.Styles(AUD_tf_figure)
    
    'Erste Zelle mit Format belegen
    wdTblFirstCell.Range.Style = fctWordDoc.Styles(AUD_figure_id)
    
    ' txt_fileref_from_file: Abbildung inkl. Dateinamen einf|fffd|gen
    If frmFigure.fileref_from_file.Value Then
        If frmFigure.txt_fileref_from_file <> "" Then
            modFigureInsertFigureAsInlineShape frmFigure.txt_fileref_from_file.ControlTipText
            Set wdRngCellLastInsertionPoint = wdTblFirstCell.Range.Characters.Last
            wdRngCellLastInsertionPoint.Collapse wdCollapseStart
            wdRngCellLastInsertionPoint.Text = vbCr & frmFigure.txt_fileref_from_file.Text
            
            If CBool(fctWordDoc.CustomDocumentProperties( _
               "bolFiguresFileRefFromFileShowExtension")) Then
                Set wdRngExtensionSeparator = _
                    fctGetExtensionSeparator(wdTblFirstCell.Range.Paragraphs.Last.Range)
            End If
        End If
    ' fileref_auto_ext | fileref_auto_no_ext: Dateinamen mit AbbNr generieren
    ElseIf frmFigure.fileref_auto_ext Or frmFigure.fileref_auto_no_ext Then
        
        Set fldChpNum = wdTbl.Range.Fields.Add(Range:=Selection.Range, _
            Type:=wdFieldStyleRef, Text:="\s " & AUD_h1)
        
        If frmFigure.txtFigureNr.Value = "ChapNumFigNum" Then
            On Error Resume Next
                strChpNum = Format(CInt(Replace(fldChpNum.Result, _
                    fctWordDoc.CustomDocumentProperties("lrm"), "")), "000")
            On Error GoTo 0
            
            fldChpNum.Delete
            
            If strChpNum <> "" Then
                strFigureID = Replace( _
                    fctWordDoc.CustomDocumentProperties("strFigureIDChapNumSyntax"), _
                        "#kapnr#", strChpNum)
            End If
            
        End If
        
        strSSwitch = ""
        If frmFigure.txtFigureNr.Value = "ChapNumFigNum" And strChpNum <> "" Then
            strSSwitch = " \s 1"
        End If
    
        Set fldRunNum = wdTbl.Range.Fields.Add(Range:=Selection.Range, _
            Type:=wdFieldSequence, Text:=strCaptionIdentifier & " \* ARABIC" & strSSwitch)
        fctWordDoc.Fields.Update
        strRunNum = Format(Replace(fldRunNum.Result.Text, _
            fctWordDoc.CustomDocumentProperties("lrm"), ""), "000")
        fldRunNum.Delete
        
        If frmFigure.fileref_auto_ext Then
            strFigureIDExtension = frmFigure.txt_fileref_auto_ext.Value
        End If
        
        wdTblFirstCell.Range.Text = strFigureID & _
            Replace(fctWordDoc.CustomDocumentProperties("strFigureIDFigNumSyntax"), _
                "#abbnr#", strRunNum) & strFigureIDExtension
    
    ' fileref_manual: Dateinamen selber eintragen
    ElseIf frmFigure.fileref_manual Then
        wdTblFirstCell.Range.Text = frmFigure.txt_fileref_manual.Value
    ' fileref_unknown: Dateiname noch unbekannt
    ElseIf strFileNamePlaceholder <> fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
        wdTblFirstCell.Range.Text = strFileNamePlaceholder
    End If
    
    ' FigureId-Prefix einf|fffd|gen
    modFigureInsertFieldCode "strFigureIdPrefix", "#AUD_figure_id_prefix#", _
        wdTblFirstCell.Range.Paragraphs.Last.Range, True
    
    ' FigureId-Suffix einf|fffd|gen
    modFigureInsertFieldCode "strFigureIdSuffix", "#AUD_figure_id_suffix#", _
        wdTblFirstCell.Range.Paragraphs.Last.Range.Characters.Last, True, wdRngExtensionSeparator
     
    ' Copyright einf|fffd|gen
    modFigureInsertCopyright wdTblFirstCell.Range.Paragraphs.Last.Range, True, False
    
    If frmFigure.txtFigureCaptionYesNo.Value = "yes" Then
        Selection.rows(1).Next.Select
        Selection.Cells(1).Select
        Selection.StartOf wdCell
        
        If frmFigure.txtFigureNr.Value = "ChapNumFigNum" Or _
            frmFigure.txtFigureNr.Value = "FigNumOnly" Then
            Call GetCaption(strCaptionText, strCaptionIdentifier, _
                frmFigure.txtFigureNr.Value, wdCell)
        Else
            If strCaptionNoNumText <> _
                fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
                Selection.Range.Text = strCaptionNoNumText
                Selection.EndOf wdCell
            End If
        End If
    End If

    If Not wdRng Is Nothing And frmFigure.txtConvertFigureYesNo.Value = "yes" Then
        Selection.Range.FormattedText = wdRng
        wdRng.Select
        
        If bolExpandSelection = True Then
            Selection.Expand wdParagraph
        End If
        
        Selection.Delete
        
        Set wdPreviousPara = wdTbl.Range.Paragraphs(1).Previous(1)
        If Not wdPreviousPara Is Nothing Then
            If wdRng.start <> wdTbl.rows(1).Cells(1).Range.start And _
               Not fctSelectionHasPrecedingTable(wdPreviousPara.Range.Characters.Last) And _
               Not wdPreviousPara.Style = AUD_wanted_empty_para And _
               Not wdPreviousPara.Style = AUD_wanted_empty_para_2 Then
                If wdPreviousPara.Range = vbCr Then
                    On Error Resume Next
                    wdPreviousPara.Range.Delete
                    On Error GoTo 0
                End If
            End If
        End If
        
    End If
    
    If frmFigure.txtFigureCaptionYesNo = "yes" Then
        wdTbl.rows.Last.Range.Style = AUD_figure_caption_addtext
        wdTbl.rows.Last.Range.Paragraphs.First.Style = AUD_figure_caption
    End If
    
    wdTbl.rows.Last.Cells(1).Select
    Selection.Collapse wdCollapseStart
    Selection.EndOf wdCell
      
    fctWordDoc.Fields.Update
    Unload frmFigure
    
    Call InsertParaAfterTable(AUD_wanted_empty_para_after_word_table)
        
End Sub

Function modFigureGetFile() As String
    If fctIsMac = True Then
        modFigureGetFile = modFigureGetFileMac
    Else
        modFigureGetFile = modFigureGetFileWin
    End If
End Function

Function modFigureGetFileWin() As String
    
    Dim dlgInsertFigure As FileDialog
    Set dlgInsertFigure = Application.FileDialog(msoFileDialogFilePicker)
    
    With dlgInsertFigure
        .AllowMultiSelect = False
        .Show
        If .SelectedItems.Count = 0 Then
            Exit Function
        End If
        modFigureGetFileWin = .SelectedItems(1)
    End With

    Set dlgInsertFigure = Nothing
End Function

Function modFigureGetFileMac() As String
    
    Dim strPath As String
    Dim strScript As String

    On Error Resume Next
    strPath = MacScript("return (path to documents folder) as String")

    strScript = "set applescript's text item delimiters to "","" " & vbNewLine & _
            "set theFiles to (choose file of type " & " {""public.image""} " & _
            "with prompt ""Please select a file or files"" default location alias """ & _
            strPath & """ multiple selections allowed false) as string" & vbNewLine & _
            "set applescript's text item delimiters to """" " & vbNewLine & _
            "return theFiles"

    If fctIsMac2011 Then
        modFigureGetFileMac = MacScript(strScript)
    Else
        modFigureGetFileMac = MacScript("get POSIX path of """ & MacScript(strScript) & """")
    End If
    On Error GoTo 0

End Function

Sub modFigureInsertFigureAsInlineShape(strPictureFile As String)
    Dim isLinkedToFile As Boolean
    Dim isSavedWithDocument As Boolean
    Dim objShape As InlineShape
    
    isLinkedToFile = False
    isSavedWithDocument = True
    If CBool(fctWordDoc.CustomDocumentProperties("bolFiguresFileRefFromFileLinked")) Then
        isLinkedToFile = True
        isSavedWithDocument = False
    End If
    
    Set objShape = ActiveDocument.Shapes.AddPicture(FileName:= _
        fctReplaceSlashes(strPictureFile, False), LinkToFile:=isLinkedToFile, _
        SaveWithDocument:=isSavedWithDocument).ConvertToInlineShape

    Selection.FormattedText = objShape.Range
    objShape.Delete
End Sub

Sub modListOfFigures(Optional control As Object)
    With ActiveDocument
        .TablesOfFigures.Add Range:=Selection.Range, AddedStyles:=AUD_figure_caption, _
            Caption:=fctWordDoc.CustomDocumentProperties("strFigureCaptionIdentifier")
        .TablesOfFigures(1).TabLeader = wdTabLeaderDots
        .TablesOfFigures.Format = wdIndexIndent
    End With
End Sub

Sub modFigureInsertPrefixSuffixFieldCode(objInsertionPoint As Range)
    Dim fQuote As Field
    Dim fIf As Field
    Dim fieldCodeText As String
    Dim fieldIdentifier As String
    Dim prefixCodeText As String
    Dim suffixCodeText As String
            
    Dim i As Integer

    prefixCodeText = fctWordDoc.CustomDocumentProperties("strFigureIdPrefix").Value
    suffixCodeText = fctWordDoc.CustomDocumentProperties("strFigureIdSuffix").Value
    
    For i = 0 To 1
    
        fieldCodeText = prefixCodeText
        fieldIdentifier = "#AUD_figure_id_prefix#"
        objInsertionPoint.StartOf wdCell
        If i = 1 Then
            fieldCodeText = suffixCodeText
            fieldIdentifier = "#AUD_figure_id_suffix#"
            objInsertionPoint.EndOf wdCell
        End If
        
        Set fIf = objInsertionPoint.Fields.Add(objInsertionPoint, wdFieldEmpty)
        fIf.Code.Text = " IF 1 = 1 "
          
        Set fQuote = objInsertionPoint.Fields.Add(modMetaDataCollapsed(fIf.Code), wdFieldIf, "", False)
        fQuote.Code.Text = " QUOTE """ & fieldCodeText & """"
        
        Set fQuote = objInsertionPoint.Fields.Add(modMetaDataCollapsed(fIf.Code), wdFieldIf, "", False)
        fQuote.Code.Text = " QUOTE """ & fieldIdentifier & """"
    Next
End Sub

Function modFigureInsertFieldCode(docVarKey As String, fieldIdentifier As String, _
    ByVal objInsertionPoint As Range, doCollapseRange As Boolean, _
    Optional objExtensionSeparator As Range) As Range
    
    Dim docVarParts As Variant
    Dim fIf As Field
    Dim fQuote As Field
    
    If Not objExtensionSeparator Is Nothing Then
        Set objInsertionPoint = objExtensionSeparator
    End If
    
    docVarParts = Split(fctWordDoc.CustomDocumentProperties(docVarKey).Value, ";")
     
    If Not CBool(docVarParts(0)) Then
        Set modFigureInsertFieldCode = objInsertionPoint
        Exit Function
    End If
    
    If doCollapseRange Then
        objInsertionPoint.Collapse wdCollapseStart
    End If

    Set fIf = objInsertionPoint.Fields.Add(objInsertionPoint, wdFieldEmpty)
    fIf.Code.Text = " IF 1 = 1 "
    
    Set fQuote = objInsertionPoint.Fields.Add(modMetaDataCollapsed(fIf.Code), _
        wdFieldIf, "", False)
    fQuote.Code.Text = " QUOTE """ & docVarParts(1) & """ "
    
    modMetaDataCollapsed(fIf.Code).Text = " "
    
    Set fQuote = objInsertionPoint.Fields.Add(modMetaDataCollapsed(fIf.Code), _
        wdFieldIf, "", False)
    fQuote.Code.Text = " QUOTE """ & fieldIdentifier & """ "
    fQuote.Result.Text = fieldIdentifier
    
    modMetaDataCollapsed(fIf.Code).Text = " "
    
    fIf.Update
    ActiveWindow.View.ShowFieldCodes = False
    
    Set objInsertionPoint = fIf.Code
    objInsertionPoint.Collapse wdCollapseEnd
    objInsertionPoint.Move wdCharacter
    
    Set modFigureInsertFieldCode = objInsertionPoint
End Function

Sub modFigureInsertPrefixSuffix(rngFigureId As Range, figureIdText As String, figureIdStyle As String)

    rngFigureId.Text = " "
    On Error Resume Next
    rngFigureId.Font.Reset
    On Error GoTo 0
    
    rngFigureId.Style = fctWordDoc.Styles(figureIdStyle)
    
    Set rngFigureId = modFigureInsertFieldCode("strFigureIdPrefix", _
        "#AUD_figure_id_prefix#", rngFigureId, False)
        
    rngFigureId.Text = figureIdText
    rngFigureId.Collapse wdCollapseEnd
    
    Set rngFigureId = modFigureInsertFieldCode("strFigureIdSuffix", _
        "#AUD_figure_id_suffix#", rngFigureId.Characters.First, True)
   
    rngFigureId.Collapse wdCollapseEnd
    rngFigureId.Select
End Sub

Sub modFigureScale(Optional control As Object)
    Dim wdRng As Word.Range
    Set wdRng = Selection.Range
    
    If Not wdRng = "" Then
        Selection.Range.Style = fctWordDoc.Styles(AUD_figure_scale)
    Else
        MsgBox fctGetErrorMsg(Format(1, "00"))
    End If
End Sub

Sub modFigureInsertFigureCopyright(Optional control As Object)
    modFigureInsertCopyright(Selection.Range, True, True).Select
    Load frmCopyright
    frmCopyright.Show
End Sub

Function modFigureInsertCopyright(objRange As Range, doCollapseStart As Boolean, alwaysInsert As Boolean) As Range

    Dim fMacro As Field
    Dim fIf As Field
    Dim docVarParts As Variant
    Dim objFieldRange As Range
    Dim objStyleRange As Range
    
    docVarParts = Split(fctWordDoc.CustomDocumentProperties("strMetaCopyright").Value, ";")
    
    If Not (CBool(docVarParts(0)) Or alwaysInsert) Then
        Set modFigureInsertCopyright = objRange
        Exit Function
    End If
    
    If doCollapseStart Then
        objRange.Collapse wdCollapseStart
    End If
    
    Set fMacro = objRange.Fields.Add(objRange, wdFieldMacroButton, "modFigureEditCopyright", False)
    Set objFieldRange = modFigureToolsGetFieldRange(fMacro)
    
    Set objStyleRange = objFieldRange.Duplicate
    objStyleRange.Collapse wdCollapseEnd
    objStyleRange.End = objStyleRange.End + 1
    
    If objStyleRange.Style.Type = wdStyleTypeCharacter Then
        objFieldRange.Style = objStyleRange.Style
    Else
        objFieldRange.Style = fctGetStyle(wdStyleDefaultParagraphFont)
    End If
    
    fMacro.Code.Style = fctGetStyle(AUD_meta_copyright)
    
    Set fIf = fMacro.Code.Fields.Add(modMetaDataCollapsed(fMacro.Code), wdFieldIf, "", False)
    fIf.Code.Text = " IF 1 = 1 """ & docVarParts(1) _
        & """ ""#AUD_meta_copyright#@@@$@@@#AUD_meta_copyright#"" "
    
    fMacro.Update
    
    ActiveWindow.View.ShowFieldCodes = False

    Set modFigureInsertCopyright = objFieldRange

End Function

Sub modFigureEditCopyright()

    Dim uF As Object
    Dim objField As Field
    Dim metaCopyright As String
    Dim metaCopyrightParts As Variant
    Dim metaCopyrightCreator As String
    Dim metaCopyrightCopyright As String
    
    Set uF = New frmCopyright
    
    On Error Resume Next
    Set objField = Selection.Fields(2)
    On Error GoTo 0
    
    If objField Is Nothing Then Exit Sub
    
    If (UBound(Split(objField.Code.Text, "#AUD_meta_copyright#")) > 0) Then
        metaCopyright = Split(objField.Code.Text, "#AUD_meta_copyright#")(1)
    Else
        Exit Sub
    End If

    metaCopyrightParts = Split(metaCopyright, "@@@$@@@")
    
    metaCopyrightCreator = Replace(metaCopyrightParts(0), "@@vbCrLf@@", vbCrLf)
    metaCopyrightCreator = Replace(metaCopyrightCreator, "@@vbLf@@", vbLf)
    metaCopyrightCreator = Replace(metaCopyrightCreator, "@@vbCr@@", vbCr)
    metaCopyrightCreator = Replace(metaCopyrightCreator, "@@vbTab@@", vbTab)
    
    metaCopyrightCopyright = Replace(metaCopyrightParts(1), "@@vbCrLf@@", vbCrLf)
    metaCopyrightCopyright = Replace(metaCopyrightCopyright, "@@vbLf@@", vbLf)
    metaCopyrightCopyright = Replace(metaCopyrightCopyright, "@@vbCr@@", vbCr)
    metaCopyrightCopyright = Replace(metaCopyrightCopyright, "@@vbTab@@", vbTab)
    
    uF.txtCreator.Text = metaCopyrightCreator
    uF.txtCopyright.Text = metaCopyrightCopyright
    
    uF.Show
    
End Sub

Sub modFigureDeleteFigureCopyrightsInDocument(Optional control As Object)

    If MsgBox(fctGetFormCaption(265), vbYesNo + vbDefaultButton2) = vbNo Then
        Exit Sub
    End If

    Dim rngStory As Range
    For Each rngStory In ActiveDocument.StoryRanges
        modFigureDeleteCopyrightsInStory rngStory
        Do While Not (rngStory.NextStoryRange Is Nothing)
            Set rngStory = rngStory.NextStoryRange
            modFigureDeleteCopyrightsInStory rngStory
        Loop
    Next rngStory
End Sub

Sub modFigureDeleteCopyrightsInStory(objRange As Range)
    Dim objField As Field
    For Each objField In objRange.Fields
        If modFigureToolsIsCopyrightField(objField) Then
            objField.Delete
        End If
    Next
End Sub
Attribute VB_Name = "figuretools"
Option Explicit

Sub modFigureToolsUpdateFiguresEquationsInDocument(Optional control As Object)
    If MsgBox(fctGetFormCaption("252"), _
                vbOKCancel + vbExclamation + vbDefaultButton2, fctGetFormCaption("240")) = vbCancel Then
        Exit Sub
    End If
    Load frmFigureUpdate
    frmFigureUpdate.Init Nothing
End Sub

Sub modFigureToolsUpdateFiguresEquationsInSelection(Optional control As Object)
    Load frmFigureUpdate
    frmFigureUpdate.Init Selection.Range
End Sub

Function modFigureToolsUpdateFigureIdsInDocument() As FigureEntry()
    Dim arrTables As Variant
    arrTables = fctGetDocumentTables
    modFigureToolsUpdateFigureIdsInDocument = _
        modFigureToolsUpdateFigureIds(arrTables, AUD_tf_figure, AUD_figure_id, _
        AUD_figure_caption, "Figure", "strFiguresFileRefOptions")
End Function

Function modFigureToolsUpdateEquationIdsInDocument() As FigureEntry()
    Dim arrTables As Variant
    arrTables = fctGetDocumentTables
    modFigureToolsUpdateEquationIdsInDocument = _
        modFigureToolsUpdateFigureIds(arrTables, AUD_tf_equation_figure, _
        AUD_equation_id, AUD_equation_caption, "Equation", "strEquationsFileRefOptions")
End Function

Function modFigureToolsUpdateFigureIdsInSelection(objSelectionRange As Range) As FigureEntry()
    Dim arrTables As Variant
    arrTables = fctGetTablesInSelection(objSelectionRange.Duplicate)
    modFigureToolsUpdateFigureIdsInSelection = _
        modFigureToolsUpdateFigureIds(arrTables, AUD_tf_figure, _
        AUD_figure_id, AUD_figure_caption, "Figure", "strFiguresFileRefOptions")
End Function

Function modFigureToolsUpdateEquationIdsInSelection(objSelectionRange As Range) As FigureEntry()
    Dim arrTables As Variant
    arrTables = fctGetTablesInSelection(objSelectionRange.Duplicate)
    modFigureToolsUpdateEquationIdsInSelection = _
        modFigureToolsUpdateFigureIds(arrTables, AUD_tf_equation_figure, _
        AUD_equation_id, AUD_equation_caption, "Equation", "strEquationsFileRefOptions")
End Function

Function modFigureToolsUpdateFigureInlineIdsInDocument() As Variant
   modFigureToolsUpdateFigureInlineIdsInDocument = ( _
    modFigureToolsUpdateFigureInlineIdsInDocumentByStyle( _
        AUD_figure_inline, Array(AUD_icon, AUD_equation_inline)))
End Function

Function modFigureToolsUpdateEquationInlineIdsInDocument() As Variant
    modFigureToolsUpdateEquationInlineIdsInDocument = ( _
    modFigureToolsUpdateFigureInlineIdsInDocumentByStyle( _
        AUD_equation_inline, Array(AUD_icon, AUD_figure_inline)))
End Function

Function modFigureToolsUpdateIconInlineIdsInDocument() As Variant
   modFigureToolsUpdateIconInlineIdsInDocument = ( _
    modFigureToolsUpdateFigureInlineIdsInDocumentByStyle( _
        AUD_icon, Array(AUD_figure_inline, AUD_equation_inline)))
End Function

Function modFigureToolsUpdateFigureInlineIdsInDocumentByStyle( _
    styleName As String, styleNameExcludes As Variant) As Variant
    Dim objStyle As Style
    Set objStyle = fctGetStyle(styleName)
    modFigureToolsUpdateFigureInlineIdsInDocumentByStyle = _
        modFigureToolsUpdateFigureInlineIds( _
            modFigureToolsGetFigureInlineIdsByStory(objStyle), _
            objStyle, styleNameExcludes)
End Function

Function modFigureToolsUpdateFigureInlineIdsInSelection( _
    objSelectionRange As Range) As Variant
    modFigureToolsUpdateFigureInlineIdsInSelection = _
        modFigureToolsUpdateFigureInlineIdsInSelectionByStyle( _
            objSelectionRange, AUD_figure_inline, Array(AUD_icon, AUD_equation_inline))
End Function

Function modFigureToolsUpdateEquationInlineIdsInSelection( _
    objSelectionRange As Range) As Variant
    modFigureToolsUpdateEquationInlineIdsInSelection = _
        modFigureToolsUpdateFigureInlineIdsInSelectionByStyle( _
            objSelectionRange, AUD_equation_inline, Array(AUD_icon, AUD_figure_inline))
End Function

Function modFigureToolsUpdateIconInlineIdsInSelection( _
    objSelectionRange As Range) As Variant
    modFigureToolsUpdateIconInlineIdsInSelection = _
        modFigureToolsUpdateFigureInlineIdsInSelectionByStyle( _
            objSelectionRange, AUD_icon, Array(AUD_equation_inline, AUD_figure_inline))
End Function

Function modFigureToolsUpdateFigureInlineIdsInSelectionByStyle( _
    objSelectionRange As Range, styleName As String, _
    styleNameExcludes As Variant) As Variant
    
    Dim arrFigureInlineRanges() As Variant
    Dim objStyle As Style
    
    Set objStyle = fctGetStyle(styleName)
    
    modFigureToolsUpdateFigureInlineIdsInSelectionByStyle = _
        modFigureToolsUpdateFigureInlineIds( _
            modFigureToolsGetFigureInlineIds( _
                fctExtendFormattedRange(objSelectionRange.Duplicate, objStyle), _
                objStyle, arrFigureInlineRanges), _
            objStyle, styleNameExcludes)
End Function

Function modFigureToolsUpdateFigureIds(arrTables As Variant, figureTableStyle As String, _
    figureIdStyle As String, figureCaptionStyle As String, _
    figureType As String, fileRefOptionsDocVarKey As String) As FigureEntry()
    
    Dim objTable As Table
    Dim currentTable As Variant
    Dim numFigureIdRanges As Long
    Dim arrFigureIdRanges() As FigureEntry
    Dim figureIdExtension As String

    If arrTables(0) Is Nothing Then Exit Function
    
    figureIdExtension = _
        modFigureToolsGetFigureIdExtension(figureType, fileRefOptionsDocVarKey)

    For Each currentTable In arrTables
        Set objTable = currentTable
        If objTable.Style.NameLocal = figureTableStyle Then
            numFigureIdRanges = fctArrayCount(arrFigureIdRanges) + 1
            If numFigureIdRanges = 0 Then
                ReDim arrFigureIdRanges(0)
            Else
                ReDim Preserve arrFigureIdRanges(numFigureIdRanges)
            End If
            Set arrFigureIdRanges(numFigureIdRanges) = _
                modFigureToolsUpdateFigureId(objTable, figureIdStyle, _
                    figureCaptionStyle, figureType, figureIdExtension)
        End If
    Next

    modFigureToolsUpdateFigureIds = arrFigureIdRanges
End Function

Function modFigureToolsUpdateFigureId(objTable As Table, figureIdStyle As String, _
    figureCaptionStyle As String, figureType As String, figureIdExtension As String) As FigureEntry
    
    Dim objFigureId As Range
    Dim objLastFigureIdInRange As Range
    Dim objFigureEntry As FigureEntry
    
    Set objLastFigureIdInRange = modFigureToolsGetLastFigureIdInRange( _
        objTable.Cell(1, 1).Range, figureIdStyle)
    
    Set objFigureId = modFigureToolsIncludePrefixSuffixInRange( _
        modFigureToolsGetFigureIdRange(objLastFigureIdInRange), Nothing)
    
    If objFigureId Is Nothing Then
        Set objFigureEntry = New FigureEntry
        Set objFigureEntry.FigureEntryRange = objTable.Range.Cells( _
            objTable.Range.Cells.Count).Range
        objFigureEntry.FigureEntryCode = 1
        Set modFigureToolsUpdateFigureId = objFigureEntry
        Exit Function
    End If
    
    Set modFigureToolsUpdateFigureId = _
        modFigureToolsUpdateFigureIdText(objFigureId, figureCaptionStyle, figureType, figureIdExtension)
    
    modFigureToolsUpdateFigureIdPrefixSuffix _
        objFigureId, fctGetStyle(wdStyleDefaultParagraphFont)

End Function

Function modFigureToolsGetLastFigureIdInRange(firstCellRange As Range, _
    figureIdStyle As String) As Range
    Dim i As Long
    For i = firstCellRange.Paragraphs.Count To 1 Step -1
        If firstCellRange.Paragraphs(i).Style.NameLocal = figureIdStyle Then
            Set modFigureToolsGetLastFigureIdInRange = firstCellRange.Paragraphs(i).Range
            Exit Function
        End If
    Next
End Function

Function modFigureToolsUpdateFigureIdText(objFigureId As Range, _
    figureCaptionStyle As String, figureType As String, figureIdExtension As String) As FigureEntry
    
    Dim chapText As String
    Dim runText As String
    Dim strChapNum As String
    Dim strRunNum As String
    Dim objFigureCaption As Range
    Dim objFigureEntry As FigureEntry
    
    Set objFigureCaption = objFigureId.tables(1).Range.Cells( _
        objFigureId.tables(1).Range.Cells.Count).Range.Paragraphs(1).Range
    
    If objFigureId.tables(1).Range.Cells.Count = 1 Then
        Set objFigureEntry = New FigureEntry
        objFigureEntry.FigureEntryCode = 2
        Set modFigureToolsUpdateFigureIdText = objFigureEntry
        Exit Function
    End If
    
    If objFigureCaption.Style.NameLocal <> figureCaptionStyle Then
        Set objFigureEntry = New FigureEntry
        Set objFigureEntry.FigureEntryRange = objFigureCaption
        objFigureEntry.FigureEntryCode = 1
        Set modFigureToolsUpdateFigureIdText = objFigureEntry
        Exit Function
    End If
    
    If fctGetParagraphText(objFigureCaption.Paragraphs(1)) = "" Then
        Set objFigureEntry = New FigureEntry
        objFigureEntry.FigureEntryCode = 2
        Set modFigureToolsUpdateFigureIdText = objFigureEntry
        Exit Function
    End If
    
    objFigureCaption.Fields.Update
   
    strChapNum = modFigureToolsGetFigureCaptionFieldResult( _
        objFigureCaption, wdFieldStyleRef)
        
    strRunNum = modFigureToolsGetFigureCaptionFieldResult( _
        objFigureCaption, wdFieldSequence)
    
    If strRunNum = "" Or Not modFigureToolsIsAllowedCaptionDelimiter( _
        objFigureCaption) Or fctRangeHasDeletions(objFigureId) Then
        Set objFigureEntry = New FigureEntry
        Set objFigureEntry.FigureEntryRange = objFigureCaption
        objFigureEntry.FigureEntryCode = 1
        Set modFigureToolsUpdateFigureIdText = objFigureEntry
        Exit Function
    End If
    
    If strChapNum <> "" Then
        chapText = Replace( _
            fctWordDoc.CustomDocumentProperties("str" & figureType & "IDChapNumSyntax"), _
         "#kapnr#", Format(Replace(strChapNum, fctLrm, ""), "000"))
    End If
    
    If strRunNum <> "" Then
        runText = Replace( _
            fctWordDoc.CustomDocumentProperties("str" & figureType & "IDFigNumSyntax"), _
        "#abbnr#", Format(Replace(strRunNum, fctLrm, ""), "000"))
    End If
        
    objFigureId.Text = chapText & runText & figureIdExtension
    objFigureId.Font.Reset
    
End Function

Function modFigureToolsGetFigureIdExtension(figureType As String, fileRefOptionsDocVarKey As String) As String
    Dim arrFigureOptions() As String
    Dim numFigureOptions As Integer
    Dim i As Integer
    arrFigureOptions = Split(fctWordDoc.CustomDocumentProperties(fileRefOptionsDocVarKey), ";")
    numFigureOptions = fctArrayCount(arrFigureOptions)
    For i = 0 To numFigureOptions
        If arrFigureOptions(i) = "fileref_auto_ext" Then
            If fctWordDoc.CustomDocumentProperties("str" & figureType & "IDExtension") <> _
                    fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
                modFigureToolsGetFigureIdExtension = fctWordDoc.CustomDocumentProperties("str" & figureType & "IDExtension")
            End If
            Exit Function
        End If
    Next i
End Function

Function modFigureToolsIsAllowedCaptionDelimiter(objFigureCaption As Range) As Boolean
    Dim objField As Field
    Dim objRange As Range
    For Each objField In objFigureCaption.Fields
        If objField.Type = wdFieldSequence Then
            Set objRange = modFigureToolsGetFieldRange(objField)
            objRange.Collapse wdCollapseEnd
            objRange.End = objRange.End + 1
            modFigureToolsIsAllowedCaptionDelimiter = _
                InStr(fctWordDoc.CustomDocumentProperties( _
                "strAllowedCaptionDelimiter").Value, objRange.Text) > 0 Or _
                fctEndsWith(objRange.Text, Chr(13) & Chr(7))
            Exit Function
        End If
    Next
End Function

Function modFigureToolsGetFigureCaptionFieldResult( _
    objFieldRange As Range, fieldType As WdFieldType) As String
    Dim fCode As Field
    For Each fCode In objFieldRange.Fields
        If fCode.Type = fieldType Then
            modFigureToolsGetFigureCaptionFieldResult = fCode.Result.Text
            Exit Function
        End If
    Next
End Function

Function modFigureToolsIncludePrefixSuffixInRange(objRange As Range, _
    styleNameExcludes As Variant) As Range
    
    Dim objRangeTest As Range
    Dim objParagraphRange As Range
    Dim objRangeCopy As Range
    
    If objRange Is Nothing Then Exit Function
 
    Set objParagraphRange = fctRemoveParagraphMarkFromRange( _
        objRange.Paragraphs(1).Range)
    
    If objRange.start > objParagraphRange.start Then
        Set objRangeCopy = objRange.Duplicate
        objRangeCopy.Collapse wdCollapseStart
        objRangeCopy.start = objRangeCopy.start - 1
        
        Set objRangeTest = _
            modFigureToolsGetPrefixSuffixField(objRangeCopy, styleNameExcludes)
        
        If Not objRangeTest Is Nothing Then
            objRange.start = objRangeTest.start
        End If
    End If
    
    If objRange.End < objParagraphRange.End Then
        Set objRangeCopy = objRange.Duplicate
        objRangeCopy.Collapse wdCollapseEnd
        objRangeCopy.End = objRangeCopy.End + 1
        
        Set objRangeTest = _
            modFigureToolsGetPrefixSuffixField(objRangeCopy, styleNameExcludes)

        If Not objRangeTest Is Nothing Then
            objRange.End = objRangeTest.End
        End If
    End If
    
    Set modFigureToolsIncludePrefixSuffixInRange = objRange
End Function

Function modFigureToolsExcludeCopyrightFromRange(objRange As Range) As Range
    
    Dim objRangeTest As Range
    Dim objParagraphRange As Range
    Dim objRangeCopy As Range
    
    If objRange Is Nothing Then Exit Function
 
    Set objRangeCopy = objRange.Duplicate
    objRangeCopy.Collapse wdCollapseStart
    objRangeCopy.End = objRangeCopy.End + 1
    
    Set objRangeTest = modFigureToolsGetCopyrightField(objRangeCopy)

    If Not objRangeTest Is Nothing Then
        objRange.start = objRangeTest.End
    End If
    
    Set modFigureToolsExcludeCopyrightFromRange = objRange
End Function

Function modFigureToolsGetPrefixSuffixField(objRange As Range, _
    styleNameExcludes As Variant) As Range
    
    If objRange Is Nothing Then Exit Function
    If fctInArray(objRange.Style.NameLocal, styleNameExcludes) Then Exit Function
    
    If objRange.Fields.Count = 0 Then Exit Function
    If modFigureToolsIsPrefixSuffixField(objRange.Fields(1)) Then
        Set modFigureToolsGetPrefixSuffixField = _
            modFigureToolsGetFieldRange(objRange.Fields(1))
    End If
End Function

Function modFigureToolsGetCopyrightField(objRange As Range) As Range
    If objRange Is Nothing Then Exit Function
    If objRange.Fields.Count = 0 Then Exit Function
    If modFigureToolsIsCopyrightField(objRange.Fields(1)) Then
        Set modFigureToolsGetCopyrightField = _
            modFigureToolsGetFieldRange(objRange.Fields(1))
    End If
End Function

Sub modFigureToolsDeleteFieldsInRange(objRange As Range)
    Dim objField As Field
    For Each objField In objRange.Fields
        If modFigureToolsIsPrefixSuffixField(objField) Then
            objField.Delete
        End If
    Next
End Sub

Function modFigureToolsIsPrefixSuffixField(objField As Field) As Boolean
    modFigureToolsIsPrefixSuffixField = objField.Type = wdFieldIf And _
        (InStr(objField.Code.Text, "#AUD_figure_id_prefix#") > 0 Or _
            InStr(objField.Code.Text, "#AUD_figure_id_suffix#") > 0)
End Function

Function modFigureToolsIsCopyrightField(objField As Field) As Boolean
    modFigureToolsIsCopyrightField = objField.Type = wdFieldMacroButton And _
        InStr(objField.Code.Text, "#AUD_meta_copyright#") > 0
End Function

Function modFigureToolsUpdateFigureInlineIds(arrFigureInlineRanges As Variant, _
    objStyle As Style, styleNameExcludes As Variant) As Variant
    
    Dim objRange As Range
    Dim objFigureId As Range
    Dim numFigureInlineRanges As Long
    Dim i As Long
    
    numFigureInlineRanges = -1
    
    On Error Resume Next
    numFigureInlineRanges = UBound(arrFigureInlineRanges)
    On Error GoTo 0
    
    If numFigureInlineRanges = -1 Then Exit Function
    
    For i = UBound(arrFigureInlineRanges) To 0 Step -1
        Set objRange = arrFigureInlineRanges(i)
        Set objFigureId = modFigureToolsUpdateFigureIdPrefixSuffix( _
            modFigureToolsExcludeCopyrightFromRange( _
            modFigureToolsIncludePrefixSuffixInRange(objRange, styleNameExcludes)), objStyle)
    Next
    modFigureToolsUpdateFigureInlineIds = arrFigureInlineRanges
End Function

Function modFigureToolsGetFigureInlineIdsByStory(objStyle As Style) As Variant
    Dim arrFigureInlineRanges() As Variant
    Dim rngStory As Range
    For Each rngStory In ActiveDocument.StoryRanges
        arrFigureInlineRanges = modFigureToolsGetFigureInlineIds(rngStory, _
            objStyle, arrFigureInlineRanges)
        Do While Not (rngStory.NextStoryRange Is Nothing)
            Set rngStory = rngStory.NextStoryRange
            arrFigureInlineRanges = modFigureToolsGetFigureInlineIds(rngStory, _
                objStyle, arrFigureInlineRanges)
        Loop
    Next rngStory
    modFigureToolsGetFigureInlineIdsByStory = arrFigureInlineRanges
End Function

Function modFigureToolsGetFigureInlineIds(objRange As Range, objStyle As Style, _
    arrFigureInlineRanges() As Variant) As Variant
    
    Dim objRangeSelection As Range
    Dim objRangeTempEnd As Range
    Dim nextIndex As Long
    Dim lastCharInParaEnd As Long
    Dim rangeEnd As Long
    
    Set objRangeSelection = objRange.Duplicate
    objRange.Collapse wdCollapseStart
    
    With objRange.Find
        Do
            .Style = objStyle
            .Wrap = wdFindStop
            .Format = True
            .Execute
            
            If Not .Found Then Exit Do

            If Not objRange.InRange(objRangeSelection) Then Exit Do
            
            Set objRangeTempEnd = objRange.Duplicate
            lastCharInParaEnd = objRangeTempEnd.Paragraphs(1).Range.End - 1
            
            Do
                rangeEnd = objRangeTempEnd.End
                objRangeTempEnd.Collapse wdCollapseEnd
                objRangeTempEnd.End = objRangeTempEnd.End + 1
            Loop While (objRangeTempEnd.End > rangeEnd And _
                objRangeTempEnd.Style.NameLocal = objStyle.NameLocal And _
                objRangeTempEnd.End <= lastCharInParaEnd)
              
            If objRangeTempEnd.End > rangeEnd Then
                objRangeTempEnd.End = objRangeTempEnd.End - 1
            End If
            
            objRangeTempEnd.start = objRange.start
            objRange.End = objRangeTempEnd.End
                       
            If objRange <> "" And objRange <> vbCr Then
                On Error Resume Next
                nextIndex = UBound(arrFigureInlineRanges) + 1
                On Error GoTo 0
                ReDim Preserve arrFigureInlineRanges(nextIndex)
                Set arrFigureInlineRanges(nextIndex) = fctRemoveParagraphMarkFromRange( _
                    objRange.Duplicate)
            End If
            objRange.Collapse wdCollapseEnd
            If objRange.InRange(objRangeTempEnd) Then Exit Do
        Loop
    End With
    
    modFigureToolsGetFigureInlineIds = arrFigureInlineRanges
    
End Function

Function modFigureToolsUpdateFigureIdPrefixSuffix( _
    objFigureId As Range, objStyle As Style) As Range
    
    Dim isFigureIdPrefixEnabled As Boolean
    Dim isFigureIdSuffixEnabled As Boolean
    Dim objRangePrefix As Range
    Dim objRangeSuffix As Range
    Dim objFigureIdCopy As Range
    
    If fctRangeHasDeletions(objFigureId) Then Exit Function

    isFigureIdPrefixEnabled = CBool(Split( _
        fctWordDoc.CustomDocumentProperties("strFigureIdPrefix"), ";")(0))
        
    isFigureIdSuffixEnabled = CBool(Split( _
        fctWordDoc.CustomDocumentProperties("strFigureIdSuffix"), ";")(0))
            
    modFigureToolsDeleteFieldsInRange objFigureId
    
    Set objFigureIdCopy = objFigureId.Duplicate
    
    If isFigureIdSuffixEnabled Then
        Set objRangeSuffix = objFigureId.Duplicate
        objRangeSuffix.Collapse wdCollapseEnd
        objRangeSuffix.End = modFigureInsertFieldCode( _
            "strFigureIdSuffix", "#AUD_figure_id_suffix#", objRangeSuffix, False).End
        objRangeSuffix.Style = objStyle
        objFigureIdCopy.End = objRangeSuffix.End
    End If
           
    If isFigureIdPrefixEnabled Then
        Set objRangePrefix = objFigureId.Duplicate
        objRangePrefix.Collapse wdCollapseStart
        objRangePrefix.End = modFigureInsertFieldCode( _
            "strFigureIdPrefix", "#AUD_figure_id_prefix#", objRangePrefix, False).End
        objRangePrefix.Style = objStyle
        objFigureIdCopy.start = objRangePrefix.start
    End If
    
    Set modFigureToolsUpdateFigureIdPrefixSuffix = objFigureIdCopy
    
End Function

Function modFigureToolsGetFigureIdRange(objFigureId As Range) As Range
    
    Dim isFigureIdCharacter As Boolean
    Dim i As Long
    Dim rangeStart As Long
    Dim objRange As Range
    Dim objFigureIdCopy As Range
    
    If objFigureId Is Nothing Then Exit Function
   
    objFigureId.End = objFigureId.End - 1
    Set objFigureIdCopy = objFigureId.Duplicate
    
    Set objRange = objFigureId.Duplicate
    objRange.Collapse wdCollapseStart
    rangeStart = -1
    
    For i = objFigureId.start To objFigureId.End - 1
        objRange.start = i
        objRange.End = i + 1
       
        isFigureIdCharacter = modFigureToolsIsFigureIdCharacter(objRange)
        If isFigureIdCharacter And rangeStart = -1 Then
            objFigureIdCopy.start = objRange.start
            rangeStart = objRange.start
        ElseIf Not isFigureIdCharacter And rangeStart > -1 Then
            objFigureIdCopy.End = objRange.start
            Exit For
        End If
        
        If objRange.Fields.Count > 0 Then
            i = modFigureToolsGetFieldRange(objRange.Fields(1)).End - 1
        End If
        
    Next
    
    If rangeStart = -1 Then
        objFigureIdCopy.start = objFigureIdCopy.End
    End If
    
    Set modFigureToolsGetFigureIdRange = objFigureIdCopy
End Function

Function modFigureToolsIsFigureIdCharacter(objRange As Range) As Boolean
    modFigureToolsIsFigureIdCharacter = _
        (objRange.Fields.Count = 0 Or _
        Not modFigureToolsGetPrefixSuffixField(objRange, Nothing) Is Nothing) And _
        objRange.Style <> AUD_figure_scale
End Function

Function modFigureToolsGetFieldStart(objField As Field) As Long
    Dim objRange As Range
    Set objRange = objField.Code
    objRange.Collapse wdCollapseStart
    objRange.Move wdCharacter, -1
    modFigureToolsGetFieldStart = objRange.start
End Function

Function modFigureToolsGetFieldEnd(objField As Field) As Long
    Dim objRange As Range
    Set objRange = objField.Code
    objRange.Collapse wdCollapseEnd
    objRange.Move wdCharacter, 1
    modFigureToolsGetFieldEnd = objRange.start
End Function

Function modFigureToolsGetFieldRange(objField As Field) As Range
    Dim objRange As Range
    Set objRange = objField.Code
    objRange.start = modFigureToolsGetFieldStart(objField)
    objRange.End = modFigureToolsGetFieldEnd(objField)
    Set modFigureToolsGetFieldRange = objRange
End Function


Attribute VB_Name = "footnote"
Option Explicit

Sub modInsertFootnote(Optional control As Object)
    
    Dim objFootnote As Word.footnote
    Set objFootnote = Selection.Footnotes.Add(Range:=Selection.Range)
    objFootnote.Reference.Style = fctWordDoc.Styles(AUD_footnote_label)
    objFootnote.Range.Style = fctWordDoc.Styles(AUD_footnote)
    
    Selection.StartOf wdParagraph
    Selection.Expand wdCharacter
    Selection.Range.Style = ActiveDocument.Styles(AUD_footnote_label)
    Selection.EndOf wdParagraph
    
End Sub

Sub modFootnote(Optional control As Object)
    SetParagraphStyle AUD_footnote
End Sub

Sub modFootnoteLabel(Optional control As Object)
    
    Dim wdRng As Word.Range
    Set wdRng = Selection.Range
    
    If Not wdRng = "" Then
        Selection.Range.Style = fctWordDoc.Styles(AUD_footnote_label)
    Else
        MsgBox fctGetErrorMsg(Format(1, "00"))
    End If
    
End Sub

Sub modFootnoteLabelManual(Optional control As Object)
    
    Dim wdRng As Word.Range
    Set wdRng = Selection.Range
    
    If Not wdRng = "" Then
        Selection.Range.Style = fctWordDoc.Styles(AUD_footnote_label_manual)
    Else
        MsgBox fctGetErrorMsg(Format(1, "00"))
    End If
    
End Sub
Attribute VB_Name = "frmAccents"
Attribute VB_Base = "0{13995135-0B4A-4512-8890-A905382E9203}{C41CC87B-175B-44C2-8279-BDDF1AA63E32}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub A_acute_Click()
    fctAccent 193, fctGetFontName
End Sub

Private Sub A_circumflex_Click()
    fctAccent 194, fctGetFontName
End Sub

Private Sub A_grave_Click()
    fctAccent 192, fctGetFontName
End Sub

Private Sub A_ring_Click()
    fctAccent 197, fctGetFontName
End Sub

Private Sub A_tilde_Click()
    fctAccent 195, fctGetFontName
End Sub

Private Sub A_uml_Click()
    fctAccent 196, fctGetFontName
End Sub

Private Sub aacute_Click()
    fctAccent 225, fctGetFontName
End Sub

Private Sub acircumflex_Click()
    fctAccent 226, fctGetFontName
End Sub

Private Sub AE_ligature_Click()
    fctAccent 198, fctGetFontName
End Sub

Private Sub aeligature_Click()
    fctAccent 230, fctGetFontName
End Sub

Private Sub agrave_Click()
    fctAccent 224, fctGetFontName
End Sub

Private Sub aring_Click()
    fctAccent 229, fctGetFontName
End Sub

Private Sub atilde_Click()
    fctAccent 227, fctGetFontName
End Sub

Private Sub auml_Click()
    fctAccent 228, fctGetFontName
End Sub

Private Sub btnCloseDialog_Click()
    Unload Me
End Sub

Private Sub c_capital_caron_Click()
    fctAccent 268, fctGetFontName
End Sub

Private Sub C_cedil_Click()
    fctAccent 199, fctGetFontName
End Sub

Private Sub c_small_caron_Click()
    fctAccent 269, fctGetFontName
End Sub

Private Sub ccedil_Click()
    fctAccent 231, fctGetFontName
End Sub

Private Sub E_acute_Click()
    fctAccent 201, fctGetFontName
End Sub

Private Sub E_circumflex_Click()
    fctAccent 202, fctGetFontName
End Sub

Private Sub E_grave_Click()
    fctAccent 200, fctGetFontName
End Sub

Private Sub E_uml_Click()
    fctAccent 203, fctGetFontName
End Sub

Private Sub eacute_Click()
    fctAccent 233, fctGetFontName
End Sub

Private Sub ecircumflex_Click()
    fctAccent 234, fctGetFontName
End Sub

Private Sub egrave_Click()
    fctAccent 232, fctGetFontName
End Sub

Private Sub euml_Click()
    fctAccent 235, fctGetFontName
End Sub

Private Sub I_acute_Click()
    fctAccent 205, fctGetFontName
End Sub

Private Sub I_circumflex_Click()
    fctAccent 206, fctGetFontName
End Sub

Private Sub I_grave_Click()
    fctAccent 204, fctGetFontName
End Sub

Private Sub I_uml_Click()
    fctAccent 207, fctGetFontName
End Sub

Private Sub iacute_Click()
    fctAccent 237, fctGetFontName
End Sub

Private Sub icircumflex_Click()
    fctAccent 238, fctGetFontName
End Sub

Private Sub igrave_Click()
    fctAccent 236, fctGetFontName
End Sub

Private Sub iuml_Click()
    fctAccent 239, fctGetFontName
End Sub

Private Sub N_tilde_Click()
    fctAccent 209, fctGetFontName
End Sub

Private Sub ntilde_Click()
    fctAccent 241, fctGetFontName
End Sub

Private Sub O_acute_Click()
    fctAccent 211, fctGetFontName
End Sub

Private Sub O_circumflex_Click()
    fctAccent 212, fctGetFontName
End Sub

Private Sub O_grave_Click()
    fctAccent 210, fctGetFontName
End Sub

Private Sub O_tilde_Click()
    fctAccent 213, fctGetFontName
End Sub

Private Sub O_uml_Click()
    fctAccent 214, fctGetFontName
End Sub

Private Sub oacute_Click()
    fctAccent 243, fctGetFontName
End Sub

Private Sub ocircumflex_Click()
    fctAccent 244, fctGetFontName
End Sub

Private Sub OE_ligature_Click()
    fctAccent 338, fctGetFontName
End Sub

Private Sub oeligature_Click()
    fctAccent 339, fctGetFontName
End Sub

Private Sub ograve_Click()
    fctAccent 242, fctGetFontName
End Sub

Private Sub otilde_Click()
    fctAccent 245, fctGetFontName
End Sub

Private Sub ouml_Click()
    fctAccent 246, fctGetFontName
End Sub

Private Sub szligature_Click()
    fctAccent 223, fctGetFontName
End Sub

Private Sub U_acute_Click()
    fctAccent 218, fctGetFontName
End Sub

Private Sub U_circumflex_Click()
    fctAccent 219, fctGetFontName
End Sub

Private Sub U_grave_Click()
    fctAccent 217, fctGetFontName
End Sub

Private Sub U_uml_Click()
    fctAccent 220, fctGetFontName
End Sub

Private Sub uacute_Click()
    fctAccent 250, fctGetFontName
End Sub

Private Sub ucircumflex_Click()
    fctAccent 251, fctGetFontName
End Sub

Private Sub ugrave_Click()
    fctAccent 249, fctGetFontName
End Sub

Private Sub uuml_Click()
    fctAccent 252, fctGetFontName
End Sub

Private Sub Y_uml_Click()
    fctAccent 376, fctGetFontName
End Sub

Private Sub yuml_Click()
    fctAccent 255, fctGetFontName
End Sub

Sub fctAccent(intAccentID As Integer, fontName As String)
    Selection.Collapse wdCollapseStart
    Selection.InsertSymbol intAccentID, Unicode:=True, Font:=fontName
End Sub

Private Sub UserForm_Initialize()

    frmAccents.Caption = fctGetFormCaption(Format(4, "00"))
    
    fctSetAlternativeLabelFont Me, "Cambria Math", "Cambria"
    
    lbl_A_acute.Caption = ChrW(193)
    lbl_E_acute.Caption = ChrW(201)
    lbl_I_acute.Caption = ChrW(205)
    lbl_O_acute.Caption = ChrW(211)
    lbl_U_acute.Caption = ChrW(218)
    lbl_C_cedil.Caption = ChrW(199)
    lbl_A_circumflex.Caption = ChrW(194)
    lbl_E_circumflex.Caption = ChrW(202)
    lbl_I_circumflex.Caption = ChrW(206)
    lbl_O_circumflex.Caption = ChrW(212)
    lbl_U_circumflex.Caption = ChrW(219)
    lbl_AE_ligature.Caption = ChrW(198)
    lbl_OE_ligature.Caption = ChrW(338)
    lbl_A_grave.Caption = ChrW(192)
    lbl_E_grave.Caption = ChrW(200)
    lbl_I_grave.Caption = ChrW(204)
    lbl_O_grave.Caption = ChrW(210)
    lbl_U_grave.Caption = ChrW(217)
    lbl_A_ring.Caption = ChrW(197)
    lbl_A_tilde.Caption = ChrW(195)
    lbl_N_tilde.Caption = ChrW(209)
    lbl_O_tilde.Caption = ChrW(213)
    lbl_A_uml.Caption = ChrW(196)
    lbl_E_uml.Caption = ChrW(203)
    lbl_I_uml.Caption = ChrW(207)
    lbl_O_uml.Caption = ChrW(214)
    lbl_U_uml.Caption = ChrW(220)
    lbl_Y_uml.Caption = ChrW(376)
    lbl_c_capital_caron.Caption = ChrW(268)
    lbl_aacute.Caption = ChrW(225)
    lbl_eacute.Caption = ChrW(233)
    lbl_iacute.Caption = ChrW(237)
    lbl_oacute.Caption = ChrW(243)
    lbl_uacute.Caption = ChrW(250)
    lbl_ccedil.Caption = ChrW(231)
    lbl_acircumflex.Caption = ChrW(226)
    lbl_ecircumflex.Caption = ChrW(234)
    lbl_icircumflex.Caption = ChrW(238)
    lbl_ocircumflex.Caption = ChrW(244)
    lbl_ucircumflex.Caption = ChrW(251)
    lbl_aeligature.Caption = ChrW(230)
    lbl_oeligature.Caption = ChrW(339)
    lbl_agrave.Caption = ChrW(224)
    lbl_egrave.Caption = ChrW(232)
    lbl_igrave.Caption = ChrW(236)
    lbl_ograve.Caption = ChrW(242)
    lbl_ugrave.Caption = ChrW(249)
    lbl_aring.Caption = ChrW(229)
    lbl_atilde.Caption = ChrW(227)
    lbl_ntilde.Caption = ChrW(241)
    lbl_otilde.Caption = ChrW(245)
    lbl_auml.Caption = ChrW(228)
    lbl_euml.Caption = ChrW(235)
    lbl_iuml.Caption = ChrW(239)
    lbl_ouml.Caption = ChrW(246)
    lbl_uuml.Caption = ChrW(252)
    lbl_yuml.Caption = ChrW(255)
    lbl_c_small_caron.Caption = ChrW(269)
    lbl_szligature.Caption = ChrW(223)
    
    fctSetZoom Me

End Sub
Attribute VB_Name = "frmArrows"
Attribute VB_Base = "0{55C24D60-B717-469A-BCB6-0DBC9BD2B0CA}{35FDD923-7D34-43AA-A247-7A318C8C190A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnCloseDialog_Click()
    Unload Me
End Sub

Private Sub leftwards_arrow_Click()
    fctArrows 8592, fctGetFontName
End Sub

Private Sub rightwards_arrow_Click()
    fctArrows 8594, fctGetFontName
End Sub

Private Sub downwards_arrow_Click()
    fctArrows 8595, fctGetFontName
End Sub

Private Sub upwards_arrow_Click()
    fctArrows 8593, fctGetFontName
End Sub

Private Sub left_right_arrow_Click()
    fctArrows 8596, fctGetFontName
End Sub

Private Sub upwards_paired_arrows_Click()
    fctArrows 8648, "Cambria Math"
End Sub

Private Sub downwards_paired_arrows_Click()
    fctArrows 8650, "Cambria Math"
End Sub

Private Sub leftwards_harpoon_over_rightwards_harpoon_Click()
    fctArrows 8651, "Cambria Math"
End Sub

Sub fctArrows(intArrowID As Integer, fontName As String)
    Selection.Collapse wdCollapseStart
    Selection.InsertSymbol Font:=fontName, CharacterNumber:=intArrowID, Unicode:=True
End Sub

Private Sub UserForm_Initialize()

    frmArrows.Caption = fctGetFormCaption(Format(5, "00"))
    
    fctSetAlternativeLabelFont Me, "Cambria Math", "Cambria"
    
    lbl_leftwards_arrow.Caption = ChrW(8592)
    lbl_rightwards_arrow.Caption = ChrW(8594)
    lbl_downwards_arrow.Caption = ChrW(8595)
    lbl_upwards_arrow.Caption = ChrW(8593)
    lbl_left_right_arrow.Caption = ChrW(8596)
    lbl_upwards_paired_arrows.Caption = ChrW(8648)
    lbl_downwards_paired_arrows.Caption = ChrW(8650)
    lbl_leftwards_harpoon_over_rightwards_harpoon.Caption = ChrW(8651)
    
    fctSetZoom Me

End Sub
Attribute VB_Name = "frmBoxAction"
Attribute VB_Base = "0{46D96298-7A3C-433B-9A3A-61C88C734ED0}{DED63A1A-8D14-49DC-9067-09A7DA97748B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdChangeBoxType_Click()
    modChangeBoxType txtBoxTableStyle, txtBoxTitleKey
    Unload Me
End Sub

Private Sub cmdInsertNestedBox_Click()
    modMainBoxTemp txtBoxTableStyle, txtBoxTitleKey
    Unload Me
End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    frmBoxAction.Caption = fctGetFormCaption("230")
    frmBoxAction.cmdChangeBoxType.Caption = fctGetFormCaption("231")
    frmBoxAction.cmdInsertNestedBox.Caption = fctGetFormCaption("232")
    frmBoxAction.cmdCancel.Caption = fctGetFormCaption("233")
    fctSetZoom Me
End Sub
Attribute VB_Name = "frmBoxSettings"
Attribute VB_Base = "0{8CE48453-43B8-4B17-9123-37E59620BD97}{5BB5DBE4-6FCA-47BB-AF0D-496DEB36C53D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
    
    Dim i As Integer
    Dim strBoxIndex As String
    Dim isBoxActive As Integer
    Dim boxTitleUpdating As Integer
    
    For i = 1 To 25
        strBoxIndex = Format(i, "00")
        isBoxActive = Abs(CBool(Split(fctWordDoc.CustomDocumentProperties("strBoxTitle" & strBoxIndex).Value, ";")(0)))
    
        If isBoxActive Then

            fctWordDoc.CustomDocumentProperties("strBoxTitle" & strBoxIndex).Value = _
                isBoxActive & ";" & Abs(CInt(Me.Controls("chkBoxVisible" & strBoxIndex).Value)) & ";" & _
                Me.Controls("txtBoxName" & strBoxIndex).Text & ";" & _
                Me.Controls("txtBoxIcon" & strBoxIndex).Text & ";" & _
                Me.Controls("txtBoxTitle" & strBoxIndex).Text & ";" & _
                Abs(CInt(Me.Controls("chkBoxUpdateBoxTitle" & strBoxIndex).Value))

            SetBoxControl strBoxIndex
        End If
    Next

    If fctIsRibbonVersion Then
        InvalidateRibbonUI
    End If

    Unload Me
End Sub

Private Sub InvalidateRibbonUI()
    ribbon.IRibbonUI_Invalidate
End Sub

Private Sub SetBoxControl(strBoxIndex As String)
    Dim wdCbr As CommandBar
    Dim wdCbc As CommandBarControl
    Dim wdCbb As CommandBarButton
    
    On Error Resume Next
    Set wdCbr = CommandBars("AUDCustom01")
    Set wdCbc = wdCbr.Controls(11)
    Set wdCbb = wdCbc.Controls(CInt(strBoxIndex))
    On Error GoTo 0
    
    If wdCbb Is Nothing Then Exit Sub
    
    wdCbb.Caption = Me.Controls("txtBoxName" & strBoxIndex).Text
    wdCbb.visible = Me.Controls("chkBoxVisible" & strBoxIndex).Value
End Sub

Private Sub lblToggleAllVisibleCheckBoxes_Click()
    Dim objCtrl As control
    
    chkToggleAllVisibleCheckBoxes.Value = Not chkToggleAllVisibleCheckBoxes
    
    For Each objCtrl In Controls
        If InStr(objCtrl.Name, "chkBoxVisible") <> 0 Then
            objCtrl.Value = chkToggleAllVisibleCheckBoxes.Value
        End If
    Next
End Sub

Private Sub lblToggleAllUpdateCheckBoxes_Click()
    Dim objCtrl As control
    
    chkToggleAllUpdateCheckBoxes.Value = Not chkToggleAllUpdateCheckBoxes
    
    For Each objCtrl In Controls
        If InStr(objCtrl.Name, "chkBoxUpdateBoxTitle") <> 0 Then
            objCtrl.Value = chkToggleAllUpdateCheckBoxes.Value
        End If
    Next
End Sub

Private Sub UserForm_Initialize()
    frmBoxSettings.Caption = fctGetFormCaption(Format(160, "00"))
    frmBoxSettings.lblBoxName.Caption = fctGetFormCaption(Format(161, "00"))
    frmBoxSettings.lblBoxIcon.Caption = fctGetFormCaption(Format(162, "00"))
    frmBoxSettings.lblBoxTitle.Caption = fctGetFormCaption(Format(163, "00"))
    frmBoxSettings.cmdCancel.Caption = fctGetFormCaption(Format(165, "00"))
    frmBoxSettings.lblVisibleCheckBoxes.Caption = fctGetFormCaption(Format(164, "00"))
    frmBoxSettings.cmdOK.Caption = fctGetFormCaption(Format(166, "00"))
    frmBoxSettings.lblUpdateCheckBoxes.Caption = fctGetFormCaption(Format(167, "00"))
    
    CreateBoxControls
    SetCheckBoxValue
    
    fctSetZoom Me
    
End Sub

Private Sub CreateBoxControls()
    Dim objLblBox As Label
    Dim objChkBoxVisible As MSForms.CheckBox
    Dim objTxtBoxName As TextBox
    Dim objTxtBoxIcon As TextBox
    Dim objTxtBoxTitle As TextBox
    Dim objChkBoxUpdateBoxTitle As MSForms.CheckBox
    
    Dim strBoxControlId As String
    Dim boxTitleParts As Variant
    Dim isBoxVisible As Boolean
    Dim isBoxActive As Boolean
    Dim dblTopPos As Double
    Dim offsetPos As Integer
    Dim i As Integer
    Dim btnTopPrev As Single
   
    dblTopPos = 22
    offsetPos = 18
    btnTopPrev = cmdCancel.Top
    
    For i = 1 To 25
        strBoxControlId = Format(i, "00")
        boxTitleParts = Split(fctWordDoc.CustomDocumentProperties("strBoxTitle" & strBoxControlId).Value, ";")
        isBoxActive = Abs(CBool(boxTitleParts(0)))
        isBoxVisible = CBool(boxTitleParts(1))
        
        If isBoxActive Then
        
            Set objLblBox = Me.Controls.Add("Forms.Label.1", "lblBox" & strBoxControlId, True)
            Set objChkBoxVisible = Me.Controls.Add("Forms.CheckBox.1", "chkBoxVisible" & strBoxControlId, True)
            Set objTxtBoxName = Me.Controls.Add("Forms.TextBox.1", "txtBoxName" & strBoxControlId, True)
            Set objTxtBoxIcon = Me.Controls.Add("Forms.TextBox.1", "txtBoxIcon" & strBoxControlId, True)
            Set objTxtBoxTitle = Me.Controls.Add("Forms.TextBox.1", "txtBoxTitle" & strBoxControlId, True)
            Set objChkBoxUpdateBoxTitle = Me.Controls.Add("Forms.CheckBox.1", "chkBoxUpdateBoxTitle" & strBoxControlId, True)
                    
            With objLblBox
                .Left = 8
                .Top = dblTopPos + 4
                .Width = 36
                .Height = 12
                .Caption = "Box " & strBoxControlId
            End With

            With objChkBoxVisible
                .Left = objLblBox.Left + objLblBox.Width + 4
                .Top = dblTopPos
                .Width = 20
                .Height = 18
                .Value = CBool(boxTitleParts(1))
                .GroupName = "visibility"
                .TabStop = False
            End With

            With objTxtBoxName
                .Left = objChkBoxVisible.Left + objChkBoxVisible.Width
                .Top = dblTopPos
                .Width = 160
                .Height = 16
                .Text = boxTitleParts(2)
                .SpecialEffect = fmSpecialEffectFlat
                .BorderStyle = fmBorderStyleSingle
                .BorderColor = 14737632
            End With
            
            With objTxtBoxIcon
                .Left = objTxtBoxName.Left + objTxtBoxName.Width + 4
                .Top = dblTopPos
                .Width = 72
                .Height = 16
                .Text = boxTitleParts(3)
                .SpecialEffect = fmSpecialEffectFlat
                .BorderStyle = fmBorderStyleSingle
                .BorderColor = 14737632
            End With
            
            With objTxtBoxTitle
                .Left = objTxtBoxIcon.Left + objTxtBoxIcon.Width + 4
                .Top = dblTopPos
                .Width = 160
                .Height = 16
                .Text = boxTitleParts(4)
                .SpecialEffect = fmSpecialEffectFlat
                .BorderStyle = fmBorderStyleSingle
                .BorderColor = 14737632
            End With
            
            With objChkBoxUpdateBoxTitle
                .Left = objTxtBoxTitle.Left + objTxtBoxTitle.Width + 7
                .Top = dblTopPos
                .Width = 20
                .Height = 18
                .Font.Bold = False
                .Value = CBool(boxTitleParts(5))
                .GroupName = "updateable"
                .TabStop = False
            End With
            
            dblTopPos = dblTopPos + offsetPos
        End If
    Next
    
    cmdCancel.Top = dblTopPos + 4
    cmdOK.Top = dblTopPos + 4
    Height = Height + cmdCancel.Top - btnTopPrev
    
End Sub

Private Sub SetCheckBoxValue()
    Dim objCtrl As control
    
    For Each objCtrl In Controls
        If TypeName(objCtrl) = "CheckBox" And _
            Not objCtrl.Name = "chkToggleAllVisibleCheckBoxes" Then
            If objCtrl.GroupName = "visibility" Then
                If objCtrl.Value = False Then
                    chkToggleAllVisibleCheckBoxes.Value = False
                    Exit For
                End If
            End If
        End If
    Next
    
     For Each objCtrl In Controls
        If TypeName(objCtrl) = "CheckBox" And _
            Not objCtrl.Name = "chkToggleAllUpdateCheckBoxes" Then
            If objCtrl.GroupName = "updateable" Then
                If objCtrl.Value = False Then
                    chkToggleAllUpdateCheckBoxes.Value = False
                    Exit Sub
                End If
            End If
        End If
    Next
End Sub

Attribute VB_Name = "frmBoxSettingsPw"
Attribute VB_Base = "0{C1787EF2-8CD2-48B0-BBC2-E45657DE6F6C}{5F720905-6771-4029-87FE-4370C929FE0B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub btnCancel_Click()
    Unload Me
End Sub

Private Sub btnOk_Click()

If txtPassword.Value = BOX_settings_pw Then
    
    Load frmBoxSettings
    Unload frmBoxSettingsPw
    frmBoxSettings.Show
        
Else
    MsgBox fctGetFormCaption("155"), vbCritical + vbOKOnly, fctGetFormCaption("154")
    txtPassword.SelStart = 0
    txtPassword.SelLength = txtPassword.TextLength
    txtPassword.SetFocus
End If
    
End Sub

Private Sub UserForm_Initialize()

    frmBoxSettingsPw.Caption = fctGetFormCaption(Format(150, "00"))
    lblEnterPassword.Caption = fctGetFormCaption(Format(151, "00"))
    btnCancel.Caption = fctGetFormCaption(Format(152, "00"))
    btnOk.Caption = fctGetFormCaption(Format(153, "00"))
    
    fctSetZoom Me

End Sub


Attribute VB_Name = "frmBrackets"
Attribute VB_Base = "0{E3D0E51E-ACBF-4F86-BF48-80A65BC3514E}{F06B692E-CEA8-4DFB-B95A-166DEFF7125A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnCloseDialog_Click()
    Unload Me
End Sub

Private Sub left_square_bracket_Click()
    fctBracket 91, fctGetFontName
End Sub

Private Sub right_square_bracket_Click()
    fctBracket 93, fctGetFontName
End Sub

Private Sub left_curly_bracket_Click()
    fctBracket 123, fctGetFontName
End Sub

Private Sub right_curly_bracket_Click()
    fctBracket 125, fctGetFontName
End Sub

Private Sub fctBracket(intMathID As Integer, fontName As String)
    Selection.Collapse wdCollapseStart
    Selection.InsertSymbol CharacterNumber:=intMathID, Unicode:=True, Font:=fontName
End Sub

Private Sub UserForm_Initialize()

    frmBrackets.Caption = fctGetFormCaption(Format(3, "00"))
    
    fctSetAlternativeLabelFont Me, "Cambria Math", "Cambria"
    
    lbl_left_square_bracket.Caption = ChrW(91)
    lbl_right_square_bracket.Caption = ChrW(93)
    lbl_left_curly_bracket.Caption = ChrW(123)
    lbl_right_curly_bracket.Caption = ChrW(125)
    
    fctSetZoom Me

End Sub
Attribute VB_Name = "frmCheckFieldFunctions"
Attribute VB_Base = "0{74672961-E2C0-46F2-B82A-4B0AE4B6B297}{334EAEA0-86E9-4594-B1BB-9EA462D6A878}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Sub Init()
    
    Dim arrFields As Variant
    Dim numArrFields As Long
    Dim fieldParts As Variant
    Dim i As Long
    Dim btnTopPrev As Single
    
    arrFields = modToolsUpdateFields(True)

    numArrFields = fctArrayCount(arrFields)
    
    If numArrFields = -1 Then Exit Sub
    
    lblFieldsStatus.Caption = fctGetFormCaption("272")
    frameExclamationMark.visible = True
    frameCheckMark.visible = False
    btnTopPrev = cmdClose.Top
    
    For i = 0 To numArrFields
        fieldParts = Split(arrFields(i), ";")
        lboxFailureFields.AddItem fieldParts(2)
        lboxFailureFields.List(lboxFailureFields.ListCount - 1, 1) = fieldParts(1)
        lboxFailureFields.List(lboxFailureFields.ListCount - 1, 2) = fieldParts(0)
    Next
    
    frameLbox.Height = lboxFailureFields.Height
    frameLbox.visible = True
    cmdClose.Top = frameLbox.Height + frameLbox.Top + 6
    Height = Height + cmdClose.Top - btnTopPrev

End Sub

Private Sub cmdClose_Click()
    Unload Me
End Sub

Private Sub lboxFailureFields_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim storyType As Integer
    Dim fieldIndex As Long
    
    If lboxFailureFields.listIndex = -1 Then Exit Sub
    
    fieldIndex = lboxFailureFields.List(lboxFailureFields.listIndex, 1)
    storyType = lboxFailureFields.List(lboxFailureFields.listIndex, 2)
    
    If storyType < 0 Then
        ActiveDocument.Shapes(Abs(storyType)).TextFrame.TextRange.Fields(fieldIndex).Select
    Else
        ActiveDocument.StoryRanges(storyType).Fields(fieldIndex).Select
    End If
End Sub

Private Sub UserForm_Initialize()
    Caption = fctGetFormCaption("270")
    lblFieldsStatus.Caption = fctGetFormCaption("271")
    cmdClose.Caption = fctGetFormCaption("273")
    lblCheckMark.Caption = ChrW(10003)
    Init
    fctSetZoom Me
End Sub
Attribute VB_Name = "frmColumntextGenerator"
Attribute VB_Base = "0{6D6D147B-C30D-406A-BF3D-1F617CB85EC6}{2D36FCE2-F75A-46DA-9CC1-27FC3F55FCCB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdExit_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
Dim wdTbl As Word.Table

On Error GoTo err_handler

If Not txtRows.Value = "0" And Not txtColumns.Value = "0" Then
    If fctSelectionHasFollowingTable(Selection.Characters.Last) Then
        Selection.End = Selection.Characters.Last.start
    End If
    Set wdTbl = fctGetTable(fctGetRng, txtRows.Value, txtColumns.Value)
        With wdTbl
            .AllowAutoFit = True
            .PreferredWidthType = wdPreferredWidthPercent
            .PreferredWidth = 100
            .Style = fctWordDoc.Styles(AUD_tf_columntext)
            .Range.Style = fctWordDoc.Styles(AUD_bodytext)
         End With
Else
    MsgBox ("Please insert a value greater than zero.")
End If

    Call InsertParaAfterTable(AUD_wanted_empty_para_after_word_table)
    
    Unload Me
            
    Set wdTbl = Nothing
    
err_handler:
Select Case Err.Number
    Case "5148": MsgBox fctGetErrorMsg(Format(30, "00"))
                 txtColumns.Text = "1"
                 txtColumns.SetFocus
End Select
        
End Sub

Private Sub spinRows_Change()
    txtRows.Value = spinRows.Value
End Sub

Private Sub spinColumns_Change()
    txtColumns.Value = spinColumns.Value
End Sub

Private Sub UserForm_Initialize()

    frmColumntextGenerator.Caption = fctGetFormCaption(Format(45, "00"))
    rows.Caption = fctGetFormCaption(Format(41, "00"))
    columns.Caption = fctGetFormCaption(Format(42, "00"))
    
    cmdOK.Caption = fctGetFormCaption(Format(15, "00"))
    cmdExit.Caption = fctGetFormCaption(Format(16, "00"))

    txtRows.Value = 1
    spinRows.Value = 1
    
    txtColumns.Value = 1
    spinColumns.Value = 1
    
    fctSetZoom Me
    
End Sub
Attribute VB_Name = "frmConvertTable"
Attribute VB_Base = "0{D3909D5D-5551-4223-A265-B48B175EFC3D}{92614F9C-2C6C-4A64-B3B3-04F485BFC572}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdExit_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()

Dim wdTbl As Word.Table
Dim wdTblFirstRow As Word.Row
Dim wdTblLastRow As Word.Row

Dim wdLastCell As Word.Cell

Dim fldChpNum As Word.Field
Dim fldRunNum As Word.Field

Dim strCaptionText As String
Dim strCaptionIdentifier As String
Dim strCaptionNoNumText As String

Dim intHeadRowIndex As Integer

strCaptionText = fctWordDoc.CustomDocumentProperties("strTableCaptionText")
strCaptionIdentifier = fctWordDoc.CustomDocumentProperties("strTableCaptionIdentifier")
strCaptionNoNumText = fctWordDoc.CustomDocumentProperties("strTableCaptionNoNumText")

Set wdTbl = Selection.tables(1)
wdTbl.Style = fctWordDoc.Styles(txtTableStyle.Value)

On Error GoTo err_handler
    
    intHeadRowIndex = 1
    If chkTableCaption.Value Or wdTbl.Cell(1, 1).Range.Paragraphs(1).Style = AUD_table_caption Then
        intHeadRowIndex = 2
    End If
    
    If chkTableCaption.Value And wdTbl.Cell(1, 1).Range.Paragraphs(1).Style <> AUD_table_caption Then

        With wdTbl
            .Cell(1, 1).Select
            Selection.InsertRowsAbove 1
            Selection.Cells.Merge
            Selection.Range.Style = fctWordDoc.Styles(AUD_table_caption)
            Selection.rows.HeadingFormat = fctWordDoc.CustomDocumentProperties("bolRepeatTableCaptionHead")
        End With

        wdTbl.Cell(1, 1).Select

        If chkTableCaption.Value = True Then
            If txtTableNr.Value = "ChapNumFigNum" Or txtTableNr.Value = "FigNumOnly" Then
                Call GetCaption(strCaptionText, strCaptionIdentifier, txtTableNr.Value, wdCell)
            Else
                If strCaptionNoNumText <> fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
                    Selection.Range.Text = strCaptionNoNumText
                End If
            End If
        End If
    End If

    If chkTableHead.Value Then
        If wdTbl.Cell(intHeadRowIndex, 1).Range.Paragraphs(1).Style <> AUD_table_head_01 Then
            With wdTbl
                .Cell(intHeadRowIndex, 1).Select
                Selection.InsertRowsAbove 1
                Selection.Range.Style = fctWordDoc.Styles(AUD_table_head_01)
            End With
        End If
        With wdTbl
            .Cell(intHeadRowIndex, 1).Select
             Selection.rows.HeadingFormat = fctWordDoc.CustomDocumentProperties("bolRepeatTableCaptionHead")
        End With
    End If

    Set wdLastCell = fctGetLastCell

    If chkTableFootnote.Value And wdLastCell.Range.Paragraphs(1).Style <> AUD_table_footnote Then
        wdLastCell.Select
        Selection.InsertRowsBelow 1
        Selection.Cells.Merge
        Selection.Range.Style = AUD_table_footnote
    End If
    
    With wdTbl
        .AllowAutoFit = True
        .PreferredWidthType = wdPreferredWidthPercent
        .PreferredWidth = 100
        .Cell(1, 1).Select
    End With
   
    Selection.Collapse wdCollapseStart
    Selection.EndOf wdCell
    
    If Not wdTbl.Range.Paragraphs.Last.Next.Range.Paragraphs(1).Style = AUD_wanted_empty_para_after_word_table Then
        fctAddedWantedEmptyParagraph wdTbl
    End If
    
    Unload Me
    
err_handler:
Select Case Err.Number
    Case 5991: MsgBox fctGetErrorMsg(Format(29, "00"))
    Unload Me
    Exit Sub
End Select

End Sub


Function fctGetLastCell() As Word.Cell
    
    Dim i As Long
    Dim numRows As Long
    Dim numCols As Long
    Dim wdLastCell As Cell
    numRows = Selection.tables(1).rows.Count
    numCols = Selection.tables(1).columns.Count
    
    For i = 1 To numCols
        On Error Resume Next
        Set wdLastCell = Selection.tables(1).Cell(numRows, i)
        On Error GoTo 0
        If Not wdLastCell Is Nothing Then
            Exit For
        End If
        Set wdLastCell = Nothing
    Next i
    
    Set fctGetLastCell = wdLastCell

End Function


Private Sub UserForm_Initialize()

    Dim wdTbl As Table
    Dim wdLastCell As Cell
    Dim intHeadRowIndex As Integer
    
    Set wdTbl = Selection.tables(1)

    intHeadRowIndex = 1
    If wdTbl.Cell(1, 1).Range.Paragraphs(1).Style = AUD_table_caption Then
        intHeadRowIndex = 2
        chkTableCaption.Enabled = False
        lblTableCaption.ForeColor = 12632256
    End If
    
    If wdTbl.Cell(intHeadRowIndex, 1).Range.Paragraphs(1).Style = AUD_table_head_01 Then
        chkTableHead.Enabled = False
        lblTableHead.ForeColor = 12632256
    End If
    
    Set wdLastCell = fctGetLastCell
    If wdLastCell.Range.Paragraphs(1).Style = AUD_table_footnote Then
        chkTableFootnote.Enabled = False
        lblTableFootnote.ForeColor = 12632256
        chkTableFootnote.Value = True
    End If

    frmConvertTable.Caption = fctGetFormCaption(Format(46, "00"))
    
    cmdOK.Caption = fctGetFormCaption(Format(15, "00"))
    cmdExit.Caption = fctGetFormCaption(Format(16, "00"))
    
    lblConvertOptions.Caption = fctGetFormCaption(Format(47, "00"))
    
    lblTableCaption.Caption = fctGetFormCaption(Format(48, "00"))
    lblTableHead.Caption = fctGetFormCaption(Format(49, "00"))
    lblTableFootnote.Caption = fctGetFormCaption(Format(44, "00"))
    
    chkTableCaption.Value = True
    chkTableHead.Value = True
    
    fctSetZoom Me

End Sub

Attribute VB_Name = "frmCopyright"
Attribute VB_Base = "0{F6CD614D-68CE-4C94-B0ED-188AD76FC6EB}{AAD76F09-FBA3-45BD-9BF0-BD37447B668A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnClose_Click()
    Unload Me
End Sub

Private Sub btnSaveCopyright_Click()
    
    Dim strMetaCreator As String
    Dim strMetaCopyright As String
    Dim strMetaType As String
    Dim docVarParts As Variant
    
    docVarParts = Split(fctWordDoc.CustomDocumentProperties("strMetaCopyright").Value, ";")
    
    strMetaCreator = Replace(txtCreator.Text, vbCrLf, "@@vbCrLf@@")
    strMetaCreator = Replace(strMetaCreator, vbCrLf, "@@vbLf@@")
    strMetaCreator = Replace(strMetaCreator, vbCr, "@@vbCr@@")
    strMetaCreator = Replace(strMetaCreator, vbTab, "@@vbTab@@")
    strMetaCreator = Replace(strMetaCreator, "#AUD_meta_copyright#", "")
    
    strMetaCopyright = Replace(txtCopyright.Text, vbCrLf, "@@vbCrLf@@")
    strMetaCopyright = Replace(strMetaCopyright, vbCrLf, "@@vbLf@@")
    strMetaCopyright = Replace(strMetaCopyright, vbCr, "@@vbCr@@")
    strMetaCopyright = Replace(strMetaCopyright, vbTab, "@@vbTab@@")
    strMetaCopyright = Replace(strMetaCopyright, "#AUD_meta_copyright#", "")
    
    Selection.Fields(2).Code.Text = " IF 1 = 1 """ & docVarParts(1) _
        & """ ""#AUD_meta_copyright#" & strMetaCreator & "@@@$@@@" & strMetaCopyright & "#AUD_meta_copyright#"" "
    
    Selection.Fields(2).Update
    
    ActiveWindow.View.ShowFieldCodes = False
    
    Unload Me
End Sub

Private Sub UserForm_Initialize()

    Caption = fctGetFormCaption("260")
    btnClose.Caption = fctGetFormCaption("261")
    btnSaveCopyright.Caption = fctGetFormCaption("262")
    lblCreator.Caption = fctGetFormCaption("263")
    lblCopyright.Caption = fctGetFormCaption("264")
    
    fctSetZoom Me
    
End Sub
Attribute VB_Name = "frmCrossRefs"
Attribute VB_Base = "0{D5294116-992A-405D-A1CF-8C44F5D437DE}{0157D677-E1E3-46A7-B22E-2077223689E5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim frmObjCrossRefConfig As CrossRefConfig

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
    If lboxCrossRefItems.listIndex = -1 Then
        MsgBox fctGetErrorMsg(Format(37, "00"))
        Exit Sub
    End If
    InitCrossRefDynamic
End Sub

Private Sub lboxCrossRefItems_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    cmdOK_Click
End Sub

Private Sub InitCrossRefDynamic()
    Dim objCrossRef As CrossRef
    Set objCrossRef = frmObjCrossRefConfig.GetCrossRefs()(lboxCrossRefItems.listIndex)
    objCrossRef.CrossRefKind = GetCrossRefKind(objCrossRef)
    crossRefs.modCrossRefDynamicFrmInit objCrossRef
End Sub

Private Sub UserForm_Activate()
    
    Dim btnPrevTop As Single
    
    btnPrevTop = cmdCancel.Top
    frameLbox.Height = lboxCrossRefItems.Height
    cmdCancel.Top = frameLbox.Top + frameLbox.Height + 6
    cmdOK.Top = cmdCancel.Top
    Height = Height + cmdCancel.Top - btnPrevTop
    
    fctSetZoom Me
    
End Sub

Private Sub UserForm_Initialize()
    cmdOK.Caption = fctGetFormCaption("1021")
    cmdCancel.Caption = fctGetFormCaption("1022")
    lblCaptionCrossRefTarget.Caption = fctGetFormCaption(Format(100, "00"))
End Sub

Private Function GetCrossRefKind(objCrossRef As CrossRef) As Long
    
    If objCrossRef.CrossRefIdentifier <> "Chapter" Then
        GetCrossRefKind = objCrossRef.CrossRefKind
        Exit Function
    End If
    
    If objCrossRef.CrossRefKind = wdNumberFullContext And _
            objCrossRef.CrossRefItem.ListFormat.ListString = "" Then
        GetCrossRefKind = wdContentText
        Exit Function
    End If
    
    GetCrossRefKind = objCrossRef.CrossRefKind

End Function

Public Sub SetCrossRefConfig(objCrossRefConfig As CrossRefConfig)
    Set frmObjCrossRefConfig = objCrossRefConfig
End Sub

Attribute VB_Name = "frmCustom01"
Attribute VB_Base = "0{CF50FECE-0B08-4FFD-AA00-20BDA8FFE168}{90D41E98-4E24-4545-AB94-33EC44C69093}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub btnCloseDialog_Click()
    Unload Me
End Sub

Private Sub row01_custom01_Click()
    fctCustom "strSpecialCharactersCustom01Row01", 0, row01_custom01, lbl_row01_custom01
End Sub

Private Sub row01_custom02_Click()
    fctCustom "strSpecialCharactersCustom01Row01", 1, row01_custom02, lbl_row01_custom02
End Sub

Private Sub row01_custom03_Click()
    fctCustom "strSpecialCharactersCustom01Row01", 2, row01_custom03, lbl_row01_custom03
End Sub

Private Sub row01_custom04_Click()
    fctCustom "strSpecialCharactersCustom01Row01", 3, row01_custom04, lbl_row01_custom04
End Sub

Private Sub row01_custom05_Click()
    fctCustom "strSpecialCharactersCustom01Row01", 4, row01_custom05, lbl_row01_custom05
End Sub

Private Sub row01_custom06_Click()
    fctCustom "strSpecialCharactersCustom01Row01", 5, row01_custom06, lbl_row01_custom06
End Sub

Private Sub row01_custom07_Click()
    fctCustom "strSpecialCharactersCustom01Row01", 6, row01_custom07, lbl_row01_custom07
End Sub

Private Sub row01_custom08_Click()
    fctCustom "strSpecialCharactersCustom01Row01", 7, row01_custom08, lbl_row01_custom08
End Sub

Private Sub row01_custom09_Click()
    fctCustom "strSpecialCharactersCustom01Row01", 8, row01_custom09, lbl_row01_custom09
End Sub

Private Sub row02_custom01_Click()
    fctCustom "strSpecialCharactersCustom01Row02", 0, row02_custom01, lbl_row02_custom01
End Sub

Private Sub row02_custom02_Click()
    fctCustom "strSpecialCharactersCustom01Row02", 1, row02_custom02, lbl_row02_custom02
End Sub

Private Sub row02_custom03_Click()
    fctCustom "strSpecialCharactersCustom01Row02", 2, row02_custom03, lbl_row02_custom03
End Sub

Private Sub row02_custom04_Click()
    fctCustom "strSpecialCharactersCustom01Row02", 3, row02_custom04, lbl_row02_custom04
End Sub

Private Sub row02_custom05_Click()
    fctCustom "strSpecialCharactersCustom01Row02", 4, row02_custom05, lbl_row02_custom05
End Sub

Private Sub row02_custom06_Click()
    fctCustom "strSpecialCharactersCustom01Row02", 5, row02_custom06, lbl_row02_custom06
End Sub

Private Sub row02_custom07_Click()
    fctCustom "strSpecialCharactersCustom01Row02", 6, row02_custom07, lbl_row02_custom07
End Sub

Private Sub row02_custom08_Click()
    fctCustom "strSpecialCharactersCustom01Row02", 7, row02_custom08, lbl_row02_custom08
End Sub

Private Sub row02_custom09_Click()
    fctCustom "strSpecialCharactersCustom01Row02", 8, row02_custom09, lbl_row02_custom09
End Sub

Private Sub row03_custom01_Click()
    fctCustom "strSpecialCharactersCustom01Row03", 0, row03_custom01, lbl_row03_custom01
End Sub

Private Sub row03_custom02_Click()
    fctCustom "strSpecialCharactersCustom01Row03", 1, row03_custom02, lbl_row03_custom02
End Sub

Private Sub row03_custom03_Click()
    fctCustom "strSpecialCharactersCustom01Row03", 2, row03_custom03, lbl_row03_custom03
End Sub

Private Sub row03_custom04_Click()
    fctCustom "strSpecialCharactersCustom01Row03", 3, row03_custom04, lbl_row03_custom04
End Sub

Private Sub row03_custom05_Click()
    fctCustom "strSpecialCharactersCustom01Row03", 4, row03_custom05, lbl_row03_custom05
End Sub

Private Sub row03_custom06_Click()
    fctCustom "strSpecialCharactersCustom01Row03", 5, row03_custom06, lbl_row03_custom06
End Sub

Private Sub row03_custom07_Click()
    fctCustom "strSpecialCharactersCustom01Row03", 6, row03_custom07, lbl_row03_custom07
End Sub

Private Sub row03_custom08_Click()
    fctCustom "strSpecialCharactersCustom01Row03", 7, row03_custom08, lbl_row03_custom08
End Sub

Private Sub row03_custom09_Click()
    fctCustom "strSpecialCharactersCustom01Row03", 8, row03_custom09, lbl_row03_custom09
End Sub

Private Sub row04_custom01_Click()
    fctCustom "strSpecialCharactersCustom01Row04", 0, row04_custom01, lbl_row04_custom01
End Sub

Private Sub row04_custom02_Click()
    fctCustom "strSpecialCharactersCustom01Row04", 1, row04_custom02, lbl_row04_custom02
End Sub

Private Sub row04_custom03_Click()
    fctCustom "strSpecialCharactersCustom01Row04", 2, row04_custom03, lbl_row04_custom03
End Sub

Private Sub row04_custom04_Click()
    fctCustom "strSpecialCharactersCustom01Row04", 3, row04_custom04, lbl_row04_custom04
End Sub

Private Sub row04_custom05_Click()
    fctCustom "strSpecialCharactersCustom01Row04", 4, row04_custom05, lbl_row04_custom05
End Sub

Private Sub row04_custom06_Click()
    fctCustom "strSpecialCharactersCustom01Row04", 5, row04_custom06, lbl_row04_custom06
End Sub

Private Sub row04_custom07_Click()
    fctCustom "strSpecialCharactersCustom01Row04", 6, row04_custom07, lbl_row04_custom07
End Sub

Private Sub row04_custom08_Click()
    fctCustom "strSpecialCharactersCustom01Row04", 7, row04_custom08, lbl_row04_custom08
End Sub

Private Sub row04_custom09_Click()
    fctCustom "strSpecialCharactersCustom01Row04", 8, row04_custom09, lbl_row04_custom09
End Sub

Private Sub row05_custom01_Click()
    fctCustom "strSpecialCharactersCustom01Row05", 0, row05_custom01, lbl_row05_custom01
End Sub

Private Sub row05_custom02_Click()
    fctCustom "strSpecialCharactersCustom01Row05", 1, row05_custom02, lbl_row05_custom02
End Sub

Private Sub row05_custom03_Click()
    fctCustom "strSpecialCharactersCustom01Row05", 2, row05_custom03, lbl_row05_custom03
End Sub

Private Sub row05_custom04_Click()
    fctCustom "strSpecialCharactersCustom01Row05", 3, row05_custom04, lbl_row05_custom04
End Sub

Private Sub row05_custom05_Click()
    fctCustom "strSpecialCharactersCustom01Row05", 4, row05_custom05, lbl_row05_custom05
End Sub

Private Sub row05_custom06_Click()
    fctCustom "strSpecialCharactersCustom01Row05", 5, row05_custom06, lbl_row05_custom06
End Sub

Private Sub row05_custom07_Click()
    fctCustom "strSpecialCharactersCustom01Row05", 6, row05_custom07, lbl_row05_custom07
End Sub

Private Sub row05_custom08_Click()
    fctCustom "strSpecialCharactersCustom01Row05", 7, row05_custom08, lbl_row05_custom08
End Sub

Private Sub row05_custom09_Click()
    fctCustom "strSpecialCharactersCustom01Row05", 8, row05_custom09, lbl_row05_custom09
End Sub

Private Sub row06_custom01_Click()
    fctCustom "strSpecialCharactersCustom01Row06", 0, row06_custom01, lbl_row06_custom01
End Sub

Private Sub row06_custom02_Click()
    fctCustom "strSpecialCharactersCustom01Row06", 1, row06_custom02, lbl_row06_custom02
End Sub

Private Sub row06_custom03_Click()
    fctCustom "strSpecialCharactersCustom01Row06", 2, row06_custom03, lbl_row06_custom03
End Sub

Private Sub row06_custom04_Click()
    fctCustom "strSpecialCharactersCustom01Row06", 3, row06_custom04, lbl_row06_custom04
End Sub

Private Sub row06_custom05_Click()
    fctCustom "strSpecialCharactersCustom01Row06", 4, row06_custom05, lbl_row06_custom05
End Sub

Private Sub row06_custom06_Click()
    fctCustom "strSpecialCharactersCustom01Row06", 5, row06_custom06, lbl_row06_custom06
End Sub

Private Sub row06_custom07_Click()
    fctCustom "strSpecialCharactersCustom01Row06", 6, row06_custom07, lbl_row06_custom07
End Sub

Private Sub row06_custom08_Click()
    fctCustom "strSpecialCharactersCustom01Row06", 7, row06_custom08, lbl_row06_custom08
End Sub

Private Sub row06_custom09_Click()
    fctCustom "strSpecialCharactersCustom01Row06", 8, row06_custom09, lbl_row06_custom09
End Sub

Private Sub row07_custom01_Click()
    fctCustom "strSpecialCharactersCustom01Row07", 0, row07_custom01, lbl_row07_custom01
End Sub

Private Sub row07_custom02_Click()
    fctCustom "strSpecialCharactersCustom01Row07", 1, row07_custom02, lbl_row07_custom02
End Sub

Private Sub row07_custom03_Click()
    fctCustom "strSpecialCharactersCustom01Row07", 2, row07_custom03, lbl_row07_custom03
End Sub

Private Sub row07_custom04_Click()
    fctCustom "strSpecialCharactersCustom01Row07", 3, row07_custom04, lbl_row07_custom04
End Sub

Private Sub row07_custom05_Click()
    fctCustom "strSpecialCharactersCustom01Row07", 4, row07_custom05, lbl_row07_custom05
End Sub

Private Sub row07_custom06_Click()
    fctCustom "strSpecialCharactersCustom01Row07", 5, row07_custom06, lbl_row07_custom06
End Sub

Private Sub row07_custom07_Click()
    fctCustom "strSpecialCharactersCustom01Row07", 6, row07_custom07, lbl_row07_custom07
End Sub

Private Sub row07_custom08_Click()
    fctCustom "strSpecialCharactersCustom01Row07", 7, row07_custom08, lbl_row07_custom08
End Sub

Private Sub row07_custom09_Click()
    fctCustom "strSpecialCharactersCustom01Row07", 8, row07_custom09, lbl_row07_custom09
End Sub

Private Sub row08_custom01_Click()
    fctCustom "strSpecialCharactersCustom01Row08", 0, row08_custom01, lbl_row08_custom01
End Sub

Private Sub row08_custom02_Click()
    fctCustom "strSpecialCharactersCustom01Row08", 1, row08_custom02, lbl_row08_custom02
End Sub

Private Sub row08_custom03_Click()
    fctCustom "strSpecialCharactersCustom01Row08", 2, row08_custom03, lbl_row08_custom03
End Sub

Private Sub row08_custom04_Click()
    fctCustom "strSpecialCharactersCustom01Row08", 3, row08_custom04, lbl_row08_custom04
End Sub

Private Sub row08_custom05_Click()
    fctCustom "strSpecialCharactersCustom01Row08", 4, row08_custom05, lbl_row08_custom05
End Sub

Private Sub row08_custom06_Click()
    fctCustom "strSpecialCharactersCustom01Row08", 5, row08_custom06, lbl_row08_custom06
End Sub

Private Sub row08_custom07_Click()
    fctCustom "strSpecialCharactersCustom01Row08", 6, row08_custom07, lbl_row08_custom07
End Sub

Private Sub row08_custom08_Click()
    fctCustom "strSpecialCharactersCustom01Row08", 7, row08_custom08, lbl_row08_custom08
End Sub

Private Sub row08_custom09_Click()
    fctCustom "strSpecialCharactersCustom01Row08", 8, row08_custom09, lbl_row08_custom09
End Sub

Private Sub row09_custom01_Click()
    fctCustom "strSpecialCharactersCustom01Row09", 0, row09_custom01, lbl_row09_custom01
End Sub

Private Sub row09_custom02_Click()
    fctCustom "strSpecialCharactersCustom01Row09", 1, row09_custom02, lbl_row09_custom02
End Sub

Private Sub row09_custom03_Click()
    fctCustom "strSpecialCharactersCustom01Row09", 2, row09_custom03, lbl_row09_custom03
End Sub

Private Sub row09_custom04_Click()
    fctCustom "strSpecialCharactersCustom01Row09", 3, row09_custom04, lbl_row09_custom04
End Sub

Private Sub row09_custom05_Click()
    fctCustom "strSpecialCharactersCustom01Row09", 4, row09_custom05, lbl_row09_custom05
End Sub

Private Sub row09_custom06_Click()
    fctCustom "strSpecialCharactersCustom01Row09", 5, row09_custom06, lbl_row09_custom06
End Sub

Private Sub row09_custom07_Click()
    fctCustom "strSpecialCharactersCustom01Row09", 6, row09_custom07, lbl_row09_custom07
End Sub

Private Sub row09_custom08_Click()
    fctCustom "strSpecialCharactersCustom01Row09", 7, row09_custom08, lbl_row09_custom08
End Sub

Private Sub row09_custom09_Click()
    fctCustom "strSpecialCharactersCustom01Row09", 8, row09_custom09, lbl_row09_custom09
End Sub

Private Sub row10_custom01_Click()
    fctCustom "strSpecialCharactersCustom01Row10", 0, row10_custom01, lbl_row10_custom01
End Sub

Private Sub row10_custom02_Click()
    fctCustom "strSpecialCharactersCustom01Row10", 1, row10_custom02, lbl_row10_custom02
End Sub

Private Sub row10_custom03_Click()
    fctCustom "strSpecialCharactersCustom01Row10", 2, row10_custom03, lbl_row10_custom03
End Sub

Private Sub row10_custom04_Click()
    fctCustom "strSpecialCharactersCustom01Row10", 3, row10_custom04, lbl_row10_custom04
End Sub

Private Sub row10_custom05_Click()
    fctCustom "strSpecialCharactersCustom01Row10", 4, row10_custom05, lbl_row10_custom05
End Sub

Private Sub row10_custom06_Click()
    fctCustom "strSpecialCharactersCustom01Row10", 5, row10_custom06, lbl_row10_custom06
End Sub

Private Sub row10_custom07_Click()
    fctCustom "strSpecialCharactersCustom01Row10", 6, row10_custom07, lbl_row10_custom07
End Sub

Private Sub row10_custom08_Click()
    fctCustom "strSpecialCharactersCustom01Row10", 7, row10_custom08, lbl_row10_custom08
End Sub

Private Sub row10_custom09_Click()
    fctCustom "strSpecialCharactersCustom01Row10", 8, row10_custom09, lbl_row10_custom09
End Sub

Private Sub fctCustom(strDocVar As String, docVarIndex As Integer, ctrlClick As Object, ctrlLabel As Object)
    
    Dim docVarParts As Variant
    Dim unicodeIds As Variant
    Dim i As Integer

    docVarParts = Split(fctWordDoc.CustomDocumentProperties(strDocVar), ";")
    
    Selection.Collapse wdCollapseStart
    If UBound(docVarParts) >= docVarIndex Then
        unicodeIds = Split(docVarParts(docVarIndex), "|")
        For i = 0 To UBound(unicodeIds)
            Selection.InsertSymbol CharacterNumber:=unicodeIds(i), Unicode:=True, Font:=fctGetFontName
        Next
        ctrlClick.visible = True
        ctrlLabel.visible = True
    End If
    
End Sub

Private Sub UserForm_Initialize()

    Caption = fctWordDoc.CustomDocumentProperties("strSpecialCharactersCustom01")
    fctSetAlternativeLabelFont Me, "Cambria Math", "Cambria"
    SetLabels
    
    fctSetZoom Me

End Sub

Private Sub SetLabels()
    
    Dim strDocVar As String
    Dim strRow As String
    Dim docVarParts As Variant
    Dim unicodeIds As Variant
    Dim ctrlClick As Object
    Dim ctrlLabel As Object
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer

    For i = 0 To 9
        strRow = Format(i + 1, "00")
        strDocVar = "strSpecialCharactersCustom01Row" & strRow
        docVarParts = Split(fctWordDoc.CustomDocumentProperties(strDocVar), ";")
        For j = 0 To UBound(docVarParts)
            If docVarParts(j) <> fctWordDoc.CustomDocumentProperties("strBlankIndicator") And _
                    docVarParts(j) <> "" Then
                Set ctrlClick = Controls("row" & strRow & "_custom" & Format(j + 1, "00"))
                Set ctrlLabel = Controls("lbl_row" & strRow & "_custom" & Format(j + 1, "00"))
                unicodeIds = Split(docVarParts(j), "|")
                For k = 0 To UBound(unicodeIds)
                    ctrlLabel.Caption = ctrlLabel.Caption & ChrW(unicodeIds(k))
                Next
                ctrlClick.visible = True
                ctrlLabel.visible = True
            End If
        Next
    Next
    
    If Not ctrlClick Is Nothing Then
        Height = Height + ctrlClick.Top - row01_custom01.Top
    End If

End Sub
Attribute VB_Name = "frmCustom02"
Attribute VB_Base = "0{51689E54-07E0-488E-90A7-00827A0B62A7}{C9B61399-3432-4F11-8A92-41FBE8CA9729}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub btnCloseDialog_Click()
    Unload Me
End Sub

Private Sub row01_custom01_Click()
    fctCustom "strSpecialCharactersCustom02Row01", 0, row01_custom01, lbl_row01_custom01
End Sub

Private Sub row01_custom02_Click()
    fctCustom "strSpecialCharactersCustom02Row01", 1, row01_custom02, lbl_row01_custom02
End Sub

Private Sub row01_custom03_Click()
    fctCustom "strSpecialCharactersCustom02Row01", 2, row01_custom03, lbl_row01_custom03
End Sub

Private Sub row01_custom04_Click()
    fctCustom "strSpecialCharactersCustom02Row01", 3, row01_custom04, lbl_row01_custom04
End Sub

Private Sub row01_custom05_Click()
    fctCustom "strSpecialCharactersCustom02Row01", 4, row01_custom05, lbl_row01_custom05
End Sub

Private Sub row01_custom06_Click()
    fctCustom "strSpecialCharactersCustom02Row01", 5, row01_custom06, lbl_row01_custom06
End Sub

Private Sub row01_custom07_Click()
    fctCustom "strSpecialCharactersCustom02Row01", 6, row01_custom07, lbl_row01_custom07
End Sub

Private Sub row01_custom08_Click()
    fctCustom "strSpecialCharactersCustom02Row01", 7, row01_custom08, lbl_row01_custom08
End Sub

Private Sub row01_custom09_Click()
    fctCustom "strSpecialCharactersCustom02Row01", 8, row01_custom09, lbl_row01_custom09
End Sub

Private Sub row02_custom01_Click()
    fctCustom "strSpecialCharactersCustom02Row02", 0, row02_custom01, lbl_row02_custom01
End Sub

Private Sub row02_custom02_Click()
    fctCustom "strSpecialCharactersCustom02Row02", 1, row02_custom02, lbl_row02_custom02
End Sub

Private Sub row02_custom03_Click()
    fctCustom "strSpecialCharactersCustom02Row02", 2, row02_custom03, lbl_row02_custom03
End Sub

Private Sub row02_custom04_Click()
    fctCustom "strSpecialCharactersCustom02Row02", 3, row02_custom04, lbl_row02_custom04
End Sub

Private Sub row02_custom05_Click()
    fctCustom "strSpecialCharactersCustom02Row02", 4, row02_custom05, lbl_row02_custom05
End Sub

Private Sub row02_custom06_Click()
    fctCustom "strSpecialCharactersCustom02Row02", 5, row02_custom06, lbl_row02_custom06
End Sub

Private Sub row02_custom07_Click()
    fctCustom "strSpecialCharactersCustom02Row02", 6, row02_custom07, lbl_row02_custom07
End Sub

Private Sub row02_custom08_Click()
    fctCustom "strSpecialCharactersCustom02Row02", 7, row02_custom08, lbl_row02_custom08
End Sub

Private Sub row02_custom09_Click()
    fctCustom "strSpecialCharactersCustom02Row02", 8, row02_custom09, lbl_row02_custom09
End Sub

Private Sub row03_custom01_Click()
    fctCustom "strSpecialCharactersCustom02Row03", 0, row03_custom01, lbl_row03_custom01
End Sub

Private Sub row03_custom02_Click()
    fctCustom "strSpecialCharactersCustom02Row03", 1, row03_custom02, lbl_row03_custom02
End Sub

Private Sub row03_custom03_Click()
    fctCustom "strSpecialCharactersCustom02Row03", 2, row03_custom03, lbl_row03_custom03
End Sub

Private Sub row03_custom04_Click()
    fctCustom "strSpecialCharactersCustom02Row03", 3, row03_custom04, lbl_row03_custom04
End Sub

Private Sub row03_custom05_Click()
    fctCustom "strSpecialCharactersCustom02Row03", 4, row03_custom05, lbl_row03_custom05
End Sub

Private Sub row03_custom06_Click()
    fctCustom "strSpecialCharactersCustom02Row03", 5, row03_custom06, lbl_row03_custom06
End Sub

Private Sub row03_custom07_Click()
    fctCustom "strSpecialCharactersCustom02Row03", 6, row03_custom07, lbl_row03_custom07
End Sub

Private Sub row03_custom08_Click()
    fctCustom "strSpecialCharactersCustom02Row03", 7, row03_custom08, lbl_row03_custom08
End Sub

Private Sub row03_custom09_Click()
    fctCustom "strSpecialCharactersCustom02Row03", 8, row03_custom09, lbl_row03_custom09
End Sub

Private Sub row04_custom01_Click()
    fctCustom "strSpecialCharactersCustom02Row04", 0, row04_custom01, lbl_row04_custom01
End Sub

Private Sub row04_custom02_Click()
    fctCustom "strSpecialCharactersCustom02Row04", 1, row04_custom02, lbl_row04_custom02
End Sub

Private Sub row04_custom03_Click()
    fctCustom "strSpecialCharactersCustom02Row04", 2, row04_custom03, lbl_row04_custom03
End Sub

Private Sub row04_custom04_Click()
    fctCustom "strSpecialCharactersCustom02Row04", 3, row04_custom04, lbl_row04_custom04
End Sub

Private Sub row04_custom05_Click()
    fctCustom "strSpecialCharactersCustom02Row04", 4, row04_custom05, lbl_row04_custom05
End Sub

Private Sub row04_custom06_Click()
    fctCustom "strSpecialCharactersCustom02Row04", 5, row04_custom06, lbl_row04_custom06
End Sub

Private Sub row04_custom07_Click()
    fctCustom "strSpecialCharactersCustom02Row04", 6, row04_custom07, lbl_row04_custom07
End Sub

Private Sub row04_custom08_Click()
    fctCustom "strSpecialCharactersCustom02Row04", 7, row04_custom08, lbl_row04_custom08
End Sub

Private Sub row04_custom09_Click()
    fctCustom "strSpecialCharactersCustom02Row04", 8, row04_custom09, lbl_row04_custom09
End Sub

Private Sub row05_custom01_Click()
    fctCustom "strSpecialCharactersCustom02Row05", 0, row05_custom01, lbl_row05_custom01
End Sub

Private Sub row05_custom02_Click()
    fctCustom "strSpecialCharactersCustom02Row05", 1, row05_custom02, lbl_row05_custom02
End Sub

Private Sub row05_custom03_Click()
    fctCustom "strSpecialCharactersCustom02Row05", 2, row05_custom03, lbl_row05_custom03
End Sub

Private Sub row05_custom04_Click()
    fctCustom "strSpecialCharactersCustom02Row05", 3, row05_custom04, lbl_row05_custom04
End Sub

Private Sub row05_custom05_Click()
    fctCustom "strSpecialCharactersCustom02Row05", 4, row05_custom05, lbl_row05_custom05
End Sub

Private Sub row05_custom06_Click()
    fctCustom "strSpecialCharactersCustom02Row05", 5, row05_custom06, lbl_row05_custom06
End Sub

Private Sub row05_custom07_Click()
    fctCustom "strSpecialCharactersCustom02Row05", 6, row05_custom07, lbl_row05_custom07
End Sub

Private Sub row05_custom08_Click()
    fctCustom "strSpecialCharactersCustom02Row05", 7, row05_custom08, lbl_row05_custom08
End Sub

Private Sub row05_custom09_Click()
    fctCustom "strSpecialCharactersCustom02Row05", 8, row05_custom09, lbl_row05_custom09
End Sub

Private Sub row06_custom01_Click()
    fctCustom "strSpecialCharactersCustom02Row06", 0, row06_custom01, lbl_row06_custom01
End Sub

Private Sub row06_custom02_Click()
    fctCustom "strSpecialCharactersCustom02Row06", 1, row06_custom02, lbl_row06_custom02
End Sub

Private Sub row06_custom03_Click()
    fctCustom "strSpecialCharactersCustom02Row06", 2, row06_custom03, lbl_row06_custom03
End Sub

Private Sub row06_custom04_Click()
    fctCustom "strSpecialCharactersCustom02Row06", 3, row06_custom04, lbl_row06_custom04
End Sub

Private Sub row06_custom05_Click()
    fctCustom "strSpecialCharactersCustom02Row06", 4, row06_custom05, lbl_row06_custom05
End Sub

Private Sub row06_custom06_Click()
    fctCustom "strSpecialCharactersCustom02Row06", 5, row06_custom06, lbl_row06_custom06
End Sub

Private Sub row06_custom07_Click()
    fctCustom "strSpecialCharactersCustom02Row06", 6, row06_custom07, lbl_row06_custom07
End Sub

Private Sub row06_custom08_Click()
    fctCustom "strSpecialCharactersCustom02Row06", 7, row06_custom08, lbl_row06_custom08
End Sub

Private Sub row06_custom09_Click()
    fctCustom "strSpecialCharactersCustom02Row06", 8, row06_custom09, lbl_row06_custom09
End Sub

Private Sub row07_custom01_Click()
    fctCustom "strSpecialCharactersCustom02Row07", 0, row07_custom01, lbl_row07_custom01
End Sub

Private Sub row07_custom02_Click()
    fctCustom "strSpecialCharactersCustom02Row07", 1, row07_custom02, lbl_row07_custom02
End Sub

Private Sub row07_custom03_Click()
    fctCustom "strSpecialCharactersCustom02Row07", 2, row07_custom03, lbl_row07_custom03
End Sub

Private Sub row07_custom04_Click()
    fctCustom "strSpecialCharactersCustom02Row07", 3, row07_custom04, lbl_row07_custom04
End Sub

Private Sub row07_custom05_Click()
    fctCustom "strSpecialCharactersCustom02Row07", 4, row07_custom05, lbl_row07_custom05
End Sub

Private Sub row07_custom06_Click()
    fctCustom "strSpecialCharactersCustom02Row07", 5, row07_custom06, lbl_row07_custom06
End Sub

Private Sub row07_custom07_Click()
    fctCustom "strSpecialCharactersCustom02Row07", 6, row07_custom07, lbl_row07_custom07
End Sub

Private Sub row07_custom08_Click()
    fctCustom "strSpecialCharactersCustom02Row07", 7, row07_custom08, lbl_row07_custom08
End Sub

Private Sub row07_custom09_Click()
    fctCustom "strSpecialCharactersCustom02Row07", 8, row07_custom09, lbl_row07_custom09
End Sub

Private Sub row08_custom01_Click()
    fctCustom "strSpecialCharactersCustom02Row08", 0, row08_custom01, lbl_row08_custom01
End Sub

Private Sub row08_custom02_Click()
    fctCustom "strSpecialCharactersCustom02Row08", 1, row08_custom02, lbl_row08_custom02
End Sub

Private Sub row08_custom03_Click()
    fctCustom "strSpecialCharactersCustom02Row08", 2, row08_custom03, lbl_row08_custom03
End Sub

Private Sub row08_custom04_Click()
    fctCustom "strSpecialCharactersCustom02Row08", 3, row08_custom04, lbl_row08_custom04
End Sub

Private Sub row08_custom05_Click()
    fctCustom "strSpecialCharactersCustom02Row08", 4, row08_custom05, lbl_row08_custom05
End Sub

Private Sub row08_custom06_Click()
    fctCustom "strSpecialCharactersCustom02Row08", 5, row08_custom06, lbl_row08_custom06
End Sub

Private Sub row08_custom07_Click()
    fctCustom "strSpecialCharactersCustom02Row08", 6, row08_custom07, lbl_row08_custom07
End Sub

Private Sub row08_custom08_Click()
    fctCustom "strSpecialCharactersCustom02Row08", 7, row08_custom08, lbl_row08_custom08
End Sub

Private Sub row08_custom09_Click()
    fctCustom "strSpecialCharactersCustom02Row08", 8, row08_custom09, lbl_row08_custom09
End Sub

Private Sub row09_custom01_Click()
    fctCustom "strSpecialCharactersCustom02Row09", 0, row09_custom01, lbl_row09_custom01
End Sub

Private Sub row09_custom02_Click()
    fctCustom "strSpecialCharactersCustom02Row09", 1, row09_custom02, lbl_row09_custom02
End Sub

Private Sub row09_custom03_Click()
    fctCustom "strSpecialCharactersCustom02Row09", 2, row09_custom03, lbl_row09_custom03
End Sub

Private Sub row09_custom04_Click()
    fctCustom "strSpecialCharactersCustom02Row09", 3, row09_custom04, lbl_row09_custom04
End Sub

Private Sub row09_custom05_Click()
    fctCustom "strSpecialCharactersCustom02Row09", 4, row09_custom05, lbl_row09_custom05
End Sub

Private Sub row09_custom06_Click()
    fctCustom "strSpecialCharactersCustom02Row09", 5, row09_custom06, lbl_row09_custom06
End Sub

Private Sub row09_custom07_Click()
    fctCustom "strSpecialCharactersCustom02Row09", 6, row09_custom07, lbl_row09_custom07
End Sub

Private Sub row09_custom08_Click()
    fctCustom "strSpecialCharactersCustom02Row09", 7, row09_custom08, lbl_row09_custom08
End Sub

Private Sub row09_custom09_Click()
    fctCustom "strSpecialCharactersCustom02Row09", 8, row09_custom09, lbl_row09_custom09
End Sub

Private Sub row10_custom01_Click()
    fctCustom "strSpecialCharactersCustom02Row10", 0, row10_custom01, lbl_row10_custom01
End Sub

Private Sub row10_custom02_Click()
    fctCustom "strSpecialCharactersCustom02Row10", 1, row10_custom02, lbl_row10_custom02
End Sub

Private Sub row10_custom03_Click()
    fctCustom "strSpecialCharactersCustom02Row10", 2, row10_custom03, lbl_row10_custom03
End Sub

Private Sub row10_custom04_Click()
    fctCustom "strSpecialCharactersCustom02Row10", 3, row10_custom04, lbl_row10_custom04
End Sub

Private Sub row10_custom05_Click()
    fctCustom "strSpecialCharactersCustom02Row10", 4, row10_custom05, lbl_row10_custom05
End Sub

Private Sub row10_custom06_Click()
    fctCustom "strSpecialCharactersCustom02Row10", 5, row10_custom06, lbl_row10_custom06
End Sub

Private Sub row10_custom07_Click()
    fctCustom "strSpecialCharactersCustom02Row10", 6, row10_custom07, lbl_row10_custom07
End Sub

Private Sub row10_custom08_Click()
    fctCustom "strSpecialCharactersCustom02Row10", 7, row10_custom08, lbl_row10_custom08
End Sub

Private Sub row10_custom09_Click()
    fctCustom "strSpecialCharactersCustom02Row10", 8, row10_custom09, lbl_row10_custom09
End Sub

Private Sub fctCustom(strDocVar As String, docVarIndex As Integer, ctrlClick As Object, ctrlLabel As Object)
    
    Dim docVarParts As Variant
    Dim unicodeIds As Variant
    Dim i As Integer

    docVarParts = Split(fctWordDoc.CustomDocumentProperties(strDocVar), ";")
    
    Selection.Collapse wdCollapseStart
    If UBound(docVarParts) >= docVarIndex Then
        unicodeIds = Split(docVarParts(docVarIndex), "|")
        For i = 0 To UBound(unicodeIds)
            Selection.InsertSymbol CharacterNumber:=unicodeIds(i), Unicode:=True, Font:=fctGetFontName
        Next
        ctrlClick.visible = True
        ctrlLabel.visible = True
    End If
    
End Sub

Private Sub UserForm_Initialize()

    Caption = fctWordDoc.CustomDocumentProperties("strSpecialCharactersCustom02")
    fctSetAlternativeLabelFont Me, "Cambria Math", "Cambria"
    SetLabels
    
    fctSetZoom Me

End Sub

Private Sub SetLabels()
    
    Dim strDocVar As String
    Dim strRow As String
    Dim docVarParts As Variant
    Dim unicodeIds As Variant
    Dim ctrlClick As Object
    Dim ctrlLabel As Object
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer

    For i = 0 To 9
        strRow = Format(i + 1, "00")
        strDocVar = "strSpecialCharactersCustom02Row" & strRow
        docVarParts = Split(fctWordDoc.CustomDocumentProperties(strDocVar), ";")
        For j = 0 To UBound(docVarParts)
            If docVarParts(j) <> fctWordDoc.CustomDocumentProperties("strBlankIndicator") And _
                    docVarParts(j) <> "" Then
                Set ctrlClick = Controls("row" & strRow & "_custom" & Format(j + 1, "00"))
                Set ctrlLabel = Controls("lbl_row" & strRow & "_custom" & Format(j + 1, "00"))
                unicodeIds = Split(docVarParts(j), "|")
                For k = 0 To UBound(unicodeIds)
                    ctrlLabel.Caption = ctrlLabel.Caption & ChrW(unicodeIds(k))
                Next
                ctrlClick.visible = True
                ctrlLabel.visible = True
            End If
        Next
    Next
    
    If Not ctrlClick Is Nothing Then
        Height = Height + ctrlClick.Top - row01_custom01.Top
    End If

End Sub
Attribute VB_Name = "frmDashesSpaces"
Attribute VB_Base = "0{006710BE-D802-4912-B416-4FCD5B8EEF16}{83D08507-6CFD-4CC4-AF3C-102981C3BFCF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnCloseDialog_Click()
    Unload Me
End Sub

Private Sub en_dash_Click()
    fctDashesAndSpaces 8211, fctGetFontName
End Sub

Private Sub em_dash_Click()
    fctDashesAndSpaces 8212, fctGetFontName
End Sub

Private Sub hyphen_Click()
    fctDashesAndSpaces 45, fctGetFontName
End Sub

Private Sub em_space_Click()
    fctDashesAndSpaces 8195, fctGetFontName
End Sub

Private Sub en_space_Click()
    fctDashesAndSpaces 8194, fctGetFontName
End Sub

Private Sub i_space_Click()
    fctDashesAndSpaces 8197, fctGetFontName
End Sub

Private Sub thin_space_Click()
    fctDashesAndSpaces 8201, fctGetFontName
End Sub

Private Sub hair_space_Click()
    fctDashesAndSpaces 8202, fctGetFontName
End Sub

Private Sub no_break_space_Click()
    fctDashesAndSpaces 160, fctGetFontName
End Sub

Sub fctDashesAndSpaces(intDashesAndSpacesID As Integer, fontName As String)
    Selection.Collapse wdCollapseStart
    Selection.InsertSymbol Font:=fontName, CharacterNumber:=intDashesAndSpacesID, Unicode:=True
End Sub

Private Sub UserForm_Initialize()

    frmDashesSpaces.Caption = fctGetFormCaption(Format(6, "00"))
    
    fctSetAlternativeLabelFont Me, "Cambria Math", "Cambria"
    
    lbl_hyphen.Caption = ChrW(45)
    lbl_en_dash.Caption = ChrW(8211)
    lbl_em_dash.Caption = ChrW(8212)
    lbl_em_space.Caption = ChrW(8195)
    lbl_en_space.Caption = ChrW(8194)
    lbl_i_space.Caption = ChrW(8197)
    lbl_thin_space.Caption = ChrW(8201)
    lbl_hair_space.Caption = ChrW(8202)
    lbl_no_break_space.Caption = ChrW(176)
    
    fctSetZoom Me

End Sub
Attribute VB_Name = "frmEnclosedAlphanum"
Attribute VB_Base = "0{A64C0E9D-B7FD-4EA5-A8E8-64191FFAB526}{CF8013D5-32E8-4B0F-9294-208A1051C3CB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnCloseDialog_Click()
    Unload Me
End Sub

Private Sub circled_eight_Click()
    fctGetCircledNumber 9319
End Sub

Private Sub circled_eighteen_Click()
    fctGetCircledNumber 9329
End Sub

Private Sub circled_eleven_Click()
    fctGetCircledNumber 9322
End Sub

Private Sub circled_fifteen_Click()
    fctGetCircledNumber 9326
End Sub

Private Sub circled_five_Click()
    fctGetCircledNumber 9316
End Sub

Private Sub circled_four_Click()
    fctGetCircledNumber 9315
End Sub

Private Sub circled_fourteen_Click()
    fctGetCircledNumber 9325
End Sub

Private Sub circled_nine_Click()
    fctGetCircledNumber 9320
End Sub

Private Sub circled_nineteen_Click()
    fctGetCircledNumber 9330
End Sub

Private Sub circled_one_Click()
    fctGetCircledNumber 9312
End Sub

Private Sub circled_seven_Click()
    fctGetCircledNumber 9318
End Sub

Private Sub circled_seventeen_Click()
    fctGetCircledNumber 9328
End Sub

Private Sub circled_six_Click()
    fctGetCircledNumber 9317
End Sub

Private Sub circled_sixteen_Click()
    fctGetCircledNumber 9327
End Sub

Private Sub circled_ten_Click()
    fctGetCircledNumber 9321
End Sub

Private Sub circled_thirteen_Click()
    fctGetCircledNumber 9324
End Sub

Private Sub circled_three_Click()
    fctGetCircledNumber 9314
End Sub

Private Sub circled_twelve_Click()
    fctGetCircledNumber 9323
End Sub

Private Sub circled_twenty_Click()
    fctGetCircledNumber 9331
End Sub

Private Sub circled_two_Click()
    fctGetCircledNumber 9313
End Sub

Sub fctGetCircledNumber(intCircledNum As Integer)
    Selection.Collapse wdCollapseStart
    Selection.InsertSymbol CharacterNumber:=intCircledNum, Unicode:=True, Font:=fctGetFontName
End Sub

Private Sub UserForm_Initialize()

    frmEnclosedAlphanum.Caption = fctGetFormCaption(Format(7, "00"))
    
    fctSetAlternativeLabelFont Me, "Cambria Math", "Cambria"
    
    lbl_circled_one.Caption = ChrW(9312)
    lbl_circled_two.Caption = ChrW(9313)
    lbl_circled_three.Caption = ChrW(9314)
    lbl_circled_four.Caption = ChrW(9315)
    lbl_circled_five.Caption = ChrW(9316)
    lbl_circled_six.Caption = ChrW(9317)
    lbl_circled_seven.Caption = ChrW(9318)
    lbl_circled_eight.Caption = ChrW(9319)
    lbl_circled_nine.Caption = ChrW(9320)
    lbl_circled_ten.Caption = ChrW(9321)
    lbl_circled_eleven.Caption = ChrW(9322)
    lbl_circled_twelve.Caption = ChrW(9323)
    lbl_circled_thirteen.Caption = ChrW(9324)
    lbl_circled_fourteen.Caption = ChrW(9325)
    lbl_circled_fifteen.Caption = ChrW(9326)
    lbl_circled_sixteen.Caption = ChrW(9327)
    lbl_circled_seventeen.Caption = ChrW(9328)
    lbl_circled_eighteen.Caption = ChrW(9329)
    lbl_circled_nineteen.Caption = ChrW(9330)
    lbl_circled_twenty.Caption = ChrW(9331)
    
    fctSetZoom Me

End Sub
Attribute VB_Name = "frmEquation"
Attribute VB_Base = "0{8E17E881-48F0-44AD-A24C-80632E52115E}{3E46755F-F59C-4972-AAD4-4B3EA04EB563}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btn_fileref_from_file_Click()
    
    Dim strFile As String
    strFile = modFigureGetFile

    If strFile <> "" Then
        txt_fileref_from_file.Locked = False
        txt_fileref_from_file.Text = FrmEquationGetFilename(strFile)
        txt_fileref_from_file.ControlTipText = strFile
        txt_fileref_from_file.Locked = True
    End If

End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
    Call modEquationCreator(frmEquation.txtEquationNr.Value)
End Sub

Private Sub frm_equation_manual_Enter()
    equation_manual.Value = True
    equation_manual.SetFocus
    FrmEquationActivateCheckbox equation_manual
End Sub

Private Sub frm_fileref_from_file_Enter()
    fileref_from_file.Value = True
    txt_fileref_from_file.SetFocus
    FrmEquationActivateCheckbox fileref_from_file
End Sub

Private Sub frm_fileref_auto_ext_Enter()
    fileref_auto_ext.Value = True
    txt_fileref_auto_ext.SetFocus
    FrmEquationActivateCheckbox fileref_auto_ext
End Sub

Private Sub frm_fileref_auto_no_ext_Enter()
    fileref_auto_no_ext.Value = True
    fileref_auto_no_ext.SetFocus
    FrmEquationActivateCheckbox fileref_auto_no_ext
End Sub

Private Sub frm_fileref_manual_Enter()
    fileref_manual.Value = True
    txt_fileref_manual.SetFocus
    FrmEquationActivateCheckbox fileref_manual
End Sub

Private Sub frm_fileref_unknown_Enter()
    fileref_unknown.Value = True
    FrmEquationActivateCheckbox fileref_unknown
End Sub

Private Sub UserForm_Initialize()
   
    lbl_equation_manual.Caption = fctGetFormCaption(Format(900, "00"))
    lbl_fileref_from_file.Caption = fctGetFormCaption(Format(901, "00"))
    lbl_fileref_auto_ext.Caption = fctGetFormCaption(Format(902, "00"))
    lbl_fileref_auto_no_ext.Caption = fctGetFormCaption(Format(903, "00"))
    lbl_fileref_manual.Caption = fctGetFormCaption(Format(904, "00"))
    lbl_fileref_unknown.Caption = fctGetFormCaption(Format(905, "00"))

    cmdOK.Caption = fctGetFormCaption(Format(15, "00"))
    cmdCancel.Caption = fctGetFormCaption(Format(16, "00"))

End Sub

Sub FrmEquationPrepareUserForm(Optional strExcludeOptions As String)

    Dim strPreselectionItem As String
    Dim strEquationIdTextDocVarKey As String

    FrmEquationSetActiveOptionsVisible strExcludeOptions
    FrmEquationPositionFrames

    strPreselectionItem = fctWordDoc.CustomDocumentProperties("strEquationsFileRefOptionDefault")
    If Controls.Item(strPreselectionItem).Parent.visible Then
        Controls.Item(strPreselectionItem).Parent.SetFocus
    End If

    If fctWordDoc.CustomDocumentProperties("strEquationIDExtension") <> _
        fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
        txt_fileref_auto_ext.Value = fctWordDoc.CustomDocumentProperties("strEquationIDExtension")
    End If
    
    If txt_fileref_manual.visible Then
        strEquationIdTextDocVarKey = "strEquationIDNoCaptionText"
        If txtEquationCaptionYesNo.Value = "yes" Then
            strEquationIdTextDocVarKey = "strEquationIDCaptionText"
        End If
        If fctWordDoc.CustomDocumentProperties(strEquationIdTextDocVarKey) <> _
                fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
            txt_fileref_manual.Value = fctWordDoc.CustomDocumentProperties(strEquationIdTextDocVarKey)
        End If
    End If
    
    fctSetZoom Me
    
End Sub

Private Sub FrmEquationSetActiveOptionsVisible(strExcludeOptions As String)
    Dim insertFigureOptions() As String
    Dim i As Integer
    insertFigureOptions = Split( _
        fctWordDoc.CustomDocumentProperties("strEquationsFileRefOptions"), ";")
    For i = 0 To UBound(insertFigureOptions)
        If Not FrmEquationOptionIsExcludeOption(insertFigureOptions(i), strExcludeOptions) Then
            Controls.Item(insertFigureOptions(i)).Parent.visible = True
        End If
    Next i
End Sub

Private Sub FrmEquationActivateCheckbox(optControl As control)
    Dim ctrl As control
    For Each ctrl In Controls
        If optControl.Name <> ctrl.Name And ( _
            fctStartsWith(ctrl.Name, "fileref") Or fctStartsWith(ctrl.Name, "equation")) Then
            ctrl.Value = False
        End If
    Next
End Sub

Private Sub FrmEquationPositionFrames()
    
    Dim arrForms(5) As control
    Dim optCtrl As control
    Dim currentTop As Long
    Dim i As Integer
    Dim btnTopPrev As Single
    
    Set arrForms(0) = frm_equation_manual
    Set arrForms(1) = frm_fileref_from_file
    Set arrForms(2) = frm_fileref_auto_ext
    Set arrForms(3) = frm_fileref_auto_no_ext
    Set arrForms(4) = frm_fileref_manual
    Set arrForms(5) = frm_fileref_unknown
    
    btnTopPrev = cmdCancel.Top
    
    For i = 0 To UBound(arrForms)
        Set optCtrl = arrForms(i)
        If optCtrl.visible Then
            optCtrl.Top = currentTop
            currentTop = optCtrl.Top + optCtrl.Height
        End If
    Next i
    
    cmdOK.Top = currentTop + 10
    cmdCancel.Top = currentTop + 10
    
    Height = Height + cmdCancel.Top - btnTopPrev

End Sub

Private Function FrmEquationOptionIsExcludeOption(insertFigureOption As String, _
                                                strExcludeOptions As String) As Boolean
    Dim excludeOptions() As String
    Dim i As Integer
    excludeOptions = Split(strExcludeOptions, ";")

    If UBound(excludeOptions) = -1 Then Exit Function
    
    For i = 0 To UBound(excludeOptions)
        If insertFigureOption = excludeOptions(i) Then
            FrmEquationOptionIsExcludeOption = True
            Exit Function
        End If
    Next i
End Function

Private Function FrmEquationGetFilename(strFile As String) As String
    If CBool(fctWordDoc.CustomDocumentProperties("bolFiguresFileRefFromFileShowExtension")) Then
        FrmEquationGetFilename = fctFileNameWithExt(strFile)
    Else
        FrmEquationGetFilename = fctFileNameWithoutExt(strFile)
    End If
End Function


Attribute VB_Name = "frmExtract"
Attribute VB_Base = "0{4C7C7047-3EE5-411E-B631-6A2EA5C424B7}{BC8CA770-ADC6-4A9D-BE5A-FDA628011E58}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub FillComboBox(cmbBox As comboBox, stylesByType As Variant, styleType As Integer)
    Dim i As Integer
    Dim stylesByTypeSplit As Variant
   
    cmbBox.AddItem extract.IgnoreIdentifier
    cmbBox.Text = extract.IgnoreIdentifier
            
    For i = 0 To UBound(stylesByType)
        stylesByTypeSplit = Split(stylesByType(i), "|fffd|")
        If CInt(stylesByTypeSplit(0)) = styleType Then
            cmbBox.AddItem modExtractEscape(stylesByTypeSplit(2))
        End If
    Next
End Sub

Sub SetComboBoxDefaults()
    Dim objRange As Range
    Set objRange = Selection.Range
    objRange.Collapse wdCollapseStart
    objRange.End = objRange.End + 1
    
    chckBoxFilterCharacterStyles.Value = False
    chckBoxFilterParagraphStyles.Value = False
    chckBoxFilterTableStyles.Value = False
    cmbBoxCharacterStyles.listIndex = 0
    cmbBoxParagraphStyles.listIndex = 0
    cmbBoxTableStyles.listIndex = 0
    
    If objRange.Style <> ActiveDocument.Styles(wdStyleDefaultParagraphFont).NameLocal Then
        If objRange.Style.Type = WdStyleType.wdStyleTypeCharacter Then
            cmbBoxCharacterStyles.Text = modExtractEscape(objRange.Style)
            chckBoxFilterCharacterStyles.Value = True
        End If
    End If
    
    cmbBoxParagraphStyles.Text = modExtractEscape(fctGetFilteredStyleName(Selection.Paragraphs _
        (1).Style.NameLocal))
        
    If Not chckBoxFilterCharacterStyles.Value Then
        chckBoxFilterParagraphStyles.Value = True
    End If
   
    If Selection.Information(wdWithInTable) Then
        cmbBoxTableStyles.Text = modExtractEscape(objRange.tables(1).Style)
    End If
End Sub

Function GetStylesByType() As Variant
    Dim objStyle As Style
    Dim stylesByType() As String
    Dim styleNameFiltered As String
    Dim i As Integer
    Dim numStyles As Integer
    Dim styleParts() As String
    Dim currentIndex As Long
    Dim arrStyleOrder As Variant
    
    arrStyleOrder = StyleOrder
    numStyles = UBound(arrStyleOrder)
    
    For i = 1 To numStyles
        styleParts = Split(arrStyleOrder(i), ";")
        If CBool(styleParts(3)) Then
            ReDim Preserve stylesByType(currentIndex)
            Set objStyle = ActiveDocument.Styles(styleParts(0))
            styleNameFiltered = fctGetFilteredStyleName(objStyle.NameLocal)
            stylesByType(currentIndex) = objStyle.Type & "|fffd|" & Left(LCase(styleNameFiltered) & _
                                            String(100, "_"), 100) & "|fffd|" & styleNameFiltered
            currentIndex = currentIndex + 1
        End If
    Next
    
    GetStylesByType = stylesByType
End Function

Private Sub btnGetSelectionStyles_Enter()
    btnForFocus.SetFocus
    chckBoxFilterCharacterStyles.Value = True
    chckBoxFilterParagraphStyles.Value = True
    chckBoxFilterTableStyles.Value = True
    SetComboBoxDefaults
End Sub

Private Sub chckBoxFilterCharacterStyles_Click()
    cmbBoxCharacterStyles.Enabled = Not cmbBoxCharacterStyles.Enabled
End Sub

Private Sub chckBoxFilterParagraphStyles_Click()
    cmbBoxParagraphStyles.Enabled = Not cmbBoxParagraphStyles.Enabled
End Sub

Private Sub chckBoxFilterTableStyles_Click()
    cmbBoxTableStyles.Enabled = Not cmbBoxTableStyles.Enabled
End Sub

Private Sub cmdCancel_Enter()
    btnForFocus.SetFocus
    Unload Me
End Sub

Sub NavigateContent(direction As String)

    Dim characterStyle As String
    Dim paragraphStyle As String
    Dim tableStyle As String
    Dim selectedStyles As Variant
    Dim objRange As Range
    Dim extractType As String
    
    characterStyle = IgnoreIdentifier
    If chckBoxFilterCharacterStyles.Value Then
        characterStyle = cmbBoxCharacterStyles.Text
    End If
    
    paragraphStyle = IgnoreIdentifier
    If chckBoxFilterParagraphStyles.Value Then
        paragraphStyle = cmbBoxParagraphStyles.Text
    End If
    
    tableStyle = IgnoreIdentifier
    If chckBoxFilterTableStyles.Value Then
        tableStyle = cmbBoxTableStyles.Text
    End If
    
    Set objRange = Selection.Range
    If direction = "First" Or direction = "Last" Then
        Set objRange = ActiveDocument.Range
        If direction = "First" Then
            objRange.Collapse wdCollapseStart
        Else
            objRange.Collapse wdCollapseEnd
        End If
    End If
    
    selectedStyles = modExtractGetSelectedStyles(Array(characterStyle, paragraphStyle, tableStyle))
    
    If selectedStyles(0) <> "" Then
        extractType = "character"
    ElseIf selectedStyles(1) <> "" Then
        extractType = "paragraph"
    Else
        extractType = "table"
    End If
    
    ShowMessageLabel modExtractMoveToPrevNext(extractType, selectedStyles, objRange, _
        GetParentStory(), GetShapeRangeStart(), direction)

End Sub

Sub ExtractContent()
    
    Dim targetDoc As Document
    Dim characterStyle As String
    Dim paragraphStyle As String
    Dim tableStyle As String
    Dim selectedStyles As Variant
    Dim objRange As Range
    Dim sortType As String
    Dim extractType As String
    
    characterStyle = IgnoreIdentifier
    If chckBoxFilterCharacterStyles.Value Then
        characterStyle = cmbBoxCharacterStyles.Text
    End If
    
    paragraphStyle = IgnoreIdentifier
    If chckBoxFilterParagraphStyles.Value Then
        paragraphStyle = cmbBoxParagraphStyles.Text
    End If
    
    tableStyle = IgnoreIdentifier
    If chckBoxFilterTableStyles.Value Then
        tableStyle = cmbBoxTableStyles.Text
    End If
    
    sortType = "Range"
    If optSortTypeStyle.Value Then
        sortType = "Style"
    End If
    
    If chckShowStyleContext.Value Then
        sortType = sortType & "WithContext"
    End If

    Set objRange = ActiveDocument.Content
    objRange.Collapse wdCollapseStart
    
    selectedStyles = modExtractGetSelectedStyles(Array(characterStyle, paragraphStyle, tableStyle))
    
    If selectedStyles(0) <> "" Then
        extractType = "character"
    ElseIf selectedStyles(1) <> "" Then
        extractType = "paragraph"
    Else
        extractType = "table"
    End If
    
    ShowMessageLabel modExtractExtractStyles(extractType, selectedStyles, objRange, sortType)

End Sub

Private Function GetShapeRangeStart() As Long
    On Error Resume Next
    If Selection.ShapeRange.Count = 0 Then Exit Function
    GetShapeRangeStart = Selection.ShapeRange.Anchor.start
    On Error GoTo 0
End Function

Private Function GetParentStory() As Long
    On Error Resume Next
    If Selection.ShapeRange.Count = 0 Then
        GetParentStory = Selection.storyType
        Exit Function
    End If
    GetParentStory = Selection.ShapeRange.Anchor.storyType
    On Error GoTo 0
End Function

Private Sub btnExtract_Enter()
    btnForFocus.SetFocus
    ExtractContent
End Sub

Private Sub btnGoFirst_Enter()
    btnForFocus.SetFocus
    NavigateContent "First"
End Sub

Private Sub btnGoBackward_Enter()
    btnForFocus.SetFocus
    NavigateContent "Prev"
End Sub

Private Sub btnGoForward_Enter()
    btnForFocus.SetFocus
    NavigateContent "Next"
End Sub

Private Sub btnGoLast_Enter()
    btnForFocus.SetFocus
    NavigateContent "Last"
End Sub

Private Sub imgInfo1_Click()
    ShowWildcardInfo
End Sub

Private Sub imgInfo2_Click()
    ShowWildcardInfo
End Sub

Private Sub imgInfo3_Click()
    ShowWildcardInfo
End Sub

Sub ShowWildcardInfo()
    With frameInfo
        .Left = 4
        .Top = 4
        .visible = Not .visible
    End With
End Sub

Private Sub UserForm_Activate()
    Dim stylesByType As Variant
   
    stylesByType = GetStylesByType
    fctArraySort stylesByType, 0, UBound(stylesByType)
    
    FillComboBox cmbBoxCharacterStyles, stylesByType, wdStyleTypeCharacter
    FillComboBox cmbBoxParagraphStyles, stylesByType, wdStyleTypeParagraph
    FillComboBox cmbBoxTableStyles, stylesByType, wdStyleTypeTable
    
    SetComboBoxDefaults
End Sub

Private Sub UserForm_Initialize()
    
    IgnoreIdentifier = fctGetFormCaption("200")
    Caption = fctGetFormCaption("201")
    chckBoxFilterCharacterStyles.Caption = fctGetFormCaption("202")
    chckBoxFilterParagraphStyles.Caption = fctGetFormCaption("203")
    chckBoxFilterTableStyles.Caption = fctGetFormCaption("204")
    btnExtract.Caption = fctGetFormCaption("205")
    cmdCancel.Caption = fctGetFormCaption("206")
    btnGetSelectionStyles.ControlTipText = fctGetFormCaption("207")
    lblWildcardInfo.Caption = fctGetFormCaption("210")
    lblSortBy.Caption = fctGetFormCaption("280")
    lblSortTypeRange.Caption = fctGetFormCaption("281")
    lblSortTypeStyle.Caption = fctGetFormCaption("282")
    chckShowStyleContext.Caption = fctGetFormCaption("283")
    btnGoBackward.Caption = fctGetFormCaption("284")
    btnGoForward.Caption = fctGetFormCaption("285")
    lblMessage.Caption = fctGetFormCaption("286")
    
    fctSetZoom Me
    
End Sub

Sub ShowMessageLabel(hasMatches As Boolean)
    If Not hasMatches Then
        frameMessage.visible = True
        Wait 0.75
        frameMessage.visible = False
    End If
End Sub

Private Sub Wait(pause As Integer)
    Dim start As Single
    start = Timer
    Do While Timer < start + pause
        DoEvents
    Loop
End Sub

Attribute VB_Name = "frmFigure"
Attribute VB_Base = "0{F3A8C69D-5DF0-47EF-95FD-DA6C967260F3}{A5FC2255-25EB-4DB9-9516-36E427A51678}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btn_fileref_from_file_Click()
    
    Dim strFile As String
    strFile = modFigureGetFile

    If strFile <> "" Then
        txt_fileref_from_file.Locked = False
        txt_fileref_from_file.Text = FrmFigureGetFilename(strFile)
        txt_fileref_from_file.ControlTipText = strFile
        txt_fileref_from_file.Locked = True
    End If

End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
    Call modFigureCaptionCreator
End Sub

Private Sub frm_fileref_from_file_Enter()
    fileref_from_file.Value = True
    txt_fileref_from_file.SetFocus
    FrmFigureActivateCheckbox fileref_from_file
End Sub

Private Sub frm_fileref_auto_ext_Enter()
    fileref_auto_ext.Value = True
    txt_fileref_auto_ext.SetFocus
    FrmFigureActivateCheckbox fileref_auto_ext
End Sub

Private Sub frm_fileref_auto_no_ext_Enter()
    fileref_auto_no_ext.Value = True
    fileref_auto_no_ext.SetFocus
    FrmFigureActivateCheckbox fileref_auto_no_ext
End Sub

Private Sub frm_fileref_manual_Enter()
    fileref_manual.Value = True
    txt_fileref_manual.SetFocus
    FrmFigureActivateCheckbox fileref_manual
End Sub

Private Sub frm_fileref_unknown_Enter()
    fileref_unknown.Value = True
    FrmFigureActivateCheckbox fileref_unknown
End Sub

Private Sub UserForm_Initialize()
   
    lbl_fileref_from_file.Caption = fctGetFormCaption(Format(80, "00"))
    lbl_fileref_auto_ext.Caption = fctGetFormCaption(Format(81, "00"))
    lbl_fileref_auto_no_ext.Caption = fctGetFormCaption(Format(82, "00"))
    lbl_fileref_manual.Caption = fctGetFormCaption(Format(83, "00"))
    lbl_fileref_unknown.Caption = fctGetFormCaption(Format(84, "00"))

    cmdOK.Caption = fctGetFormCaption(Format(15, "00"))
    cmdCancel.Caption = fctGetFormCaption(Format(16, "00"))

End Sub

Sub FrmFigurePrepareUserForm(Optional strExcludeOptions As String)

    Dim strPreselectionItem As String
    Dim strFigureIdTextDocVarKey As String

    FrmFigureSetActiveOptionsVisible strExcludeOptions
    FrmFigurePositionFrames

    strPreselectionItem = fctWordDoc.CustomDocumentProperties("strFiguresFileRefOptionDefault")
    If Controls.Item(strPreselectionItem).Parent.visible Then
        Controls.Item(strPreselectionItem).Parent.SetFocus
    End If

    If fctWordDoc.CustomDocumentProperties("strFigureIDExtension") <> _
        fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
        txt_fileref_auto_ext.Value = fctWordDoc.CustomDocumentProperties("strFigureIDExtension")
    End If
    
    If txt_fileref_manual.visible Then
            strFigureIdTextDocVarKey = "strFigureIDNoCaptionText"
            If txtFigureCaptionYesNo.Value = "yes" Then
                strFigureIdTextDocVarKey = "strFigureIDCaptionText"
            End If
            If fctWordDoc.CustomDocumentProperties(strFigureIdTextDocVarKey) <> _
                    fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
                txt_fileref_manual.Value = fctWordDoc.CustomDocumentProperties(strFigureIdTextDocVarKey)
            End If
    End If
    
    fctSetZoom Me
    
End Sub

Private Sub FrmFigureSetActiveOptionsVisible(strExcludeOptions As String)
    Dim insertFigureOptions() As String
    Dim i As Integer
    insertFigureOptions = Split( _
        fctWordDoc.CustomDocumentProperties("strFiguresFileRefOptions"), ";")
    For i = 0 To UBound(insertFigureOptions)
        If Not FrmFigureOptionIsExcludeOption(insertFigureOptions(i), strExcludeOptions) Then
            Controls.Item(insertFigureOptions(i)).Parent.visible = True
        End If
    Next i
End Sub

Private Sub FrmFigureActivateCheckbox(optControl As control)
    Dim ctrl As control
    For Each ctrl In Controls
        If optControl.Name <> ctrl.Name And fctStartsWith(ctrl.Name, "fileref") Then
            ctrl.Value = False
        End If
    Next
End Sub

Private Sub FrmFigurePositionFrames()
    
    Dim arrForms(4) As control
    Dim optCtrl As control
    Dim currentTop As Long
    Dim i As Integer
    Dim btnTopPrev As Single
    
    Set arrForms(0) = frm_fileref_from_file
    Set arrForms(1) = frm_fileref_auto_ext
    Set arrForms(2) = frm_fileref_auto_no_ext
    Set arrForms(3) = frm_fileref_manual
    Set arrForms(4) = frm_fileref_unknown
    
    btnTopPrev = cmdCancel.Top
    
    For i = 0 To UBound(arrForms)
        Set optCtrl = arrForms(i)
        If optCtrl.visible Then
            optCtrl.Top = currentTop
            currentTop = optCtrl.Top + optCtrl.Height
        End If
    Next i
    
    cmdOK.Top = currentTop + 10
    cmdCancel.Top = currentTop + 10
    
    Height = Height + cmdCancel.Top - btnTopPrev

End Sub

Private Function FrmFigureOptionIsExcludeOption(insertFigureOption As String, _
                                                strExcludeOptions As String) As Boolean
    Dim excludeOptions() As String
    Dim i As Integer
    excludeOptions = Split(strExcludeOptions, ";")

    If UBound(excludeOptions) = -1 Then Exit Function
    
    For i = 0 To UBound(excludeOptions)
        If insertFigureOption = excludeOptions(i) Then
            FrmFigureOptionIsExcludeOption = True
            Exit Function
        End If
    Next i
End Function

Private Function FrmFigureGetFilename(strFile As String) As String
    If CBool(fctWordDoc.CustomDocumentProperties("bolFiguresFileRefFromFileShowExtension")) Then
        FrmFigureGetFilename = fctFileNameWithExt(strFile)
    Else
        FrmFigureGetFilename = fctFileNameWithoutExt(strFile)
    End If
End Function
Attribute VB_Name = "frmFigureSettings"
Attribute VB_Base = "0{3E34D7BF-EC93-4388-BE04-8C16054758FE}{903BF66B-D8BA-43A9-AAAB-56F92ACD44CC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
    SetFigureIdSettings
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    
    Dim isPrefixEnabled As Boolean
    Dim isSuffixEnabled As Boolean
    Dim btnTopPrev As Single
        
    isPrefixEnabled = CBool(Split(fctWordDoc.CustomDocumentProperties _
        ("strFigureIdPrefix").Value, ";")(0))
    
    isSuffixEnabled = CBool(Split(fctWordDoc.CustomDocumentProperties _
        ("strFigureIdSuffix").Value, ";")(0))
  
    Caption = fctGetFormCaption(Format(190, "00"))
    frameFigureIdPrefix.Caption = fctGetFormCaption(Format(191, "00"))
    frameFigureIdSuffix.Caption = fctGetFormCaption(Format(192, "00"))
    lblInfo.Caption = fctGetFormCaption(Format(193, "00"))
    cmdCancel.Caption = fctGetFormCaption(Format(194, "00"))
    cmdOK.Caption = fctGetFormCaption(Format(195, "00"))
    
    btnTopPrev = cmdCancel.Top
    
    If Not isPrefixEnabled Then
        frameFigureIdPrefix.visible = False
        frameFigureIdSuffix.Top = frameFigureIdPrefix.Top
    End If
    
    If Not isSuffixEnabled Then
        frameFigureIdSuffix.visible = False
    End If
    
    If Not isPrefixEnabled Or Not isSuffixEnabled Then
        cmdOK.Top = frameFigureIdPrefix.Top + frameFigureIdPrefix.Height + 6
        cmdCancel.Top = frameFigureIdPrefix.Top + frameFigureIdPrefix.Height + 6
    End If
    
    If Not isPrefixEnabled And Not isSuffixEnabled Then
        frameFigureIdPrefix.visible = False
        frameFigureIdSuffix.visible = False
        frameInfo.visible = True
    End If
    
    Height = Height + cmdCancel.Top - btnTopPrev
    
    txtFigureIdPrefix.Text = _
        Split(fctWordDoc.CustomDocumentProperties("strFigureIdPrefix").Value, ";")(1)
    
    txtFigureIdSuffix.Text = _
        Split(fctWordDoc.CustomDocumentProperties("strFigureIdSuffix").Value, ";")(1)
        
    fctSetZoom Me
    
End Sub

Sub SetFigureIdSettings()
    
    Dim docVarFigureIdPrefix As DocumentProperty
    Dim docVarFigureIdSuffix As DocumentProperty
    Dim rngStory As Range
    
    Set docVarFigureIdPrefix = fctWordDoc.CustomDocumentProperties("strFigureIdPrefix")
    Set docVarFigureIdSuffix = fctWordDoc.CustomDocumentProperties("strFigureIdSuffix")
    
    docVarFigureIdPrefix.Value = Split(docVarFigureIdPrefix.Value, ";")(0) & _
        ";" & txtFigureIdPrefix.Text
    
    docVarFigureIdSuffix.Value = Split(docVarFigureIdSuffix.Value, ";")(0) & _
        ";" & txtFigureIdSuffix.Text
  
    Application.DisplayAlerts = wdAlertsNone
    For Each rngStory In ActiveDocument.StoryRanges
        UpdateQuoteFields rngStory
        Do While Not (rngStory.NextStoryRange Is Nothing)
            Set rngStory = rngStory.NextStoryRange
            UpdateQuoteFields rngStory
        Loop
    Next rngStory
    Application.DisplayAlerts = wdAlertsAll
    
End Sub

Sub UpdateQuoteFields(rngStory As Range)
    Dim objField As Field
    For Each objField In rngStory.Fields
        UpdateQuoteField objField, txtFigureIdPrefix, "#AUD_figure_id_prefix#"
        UpdateQuoteField objField, txtFigureIdSuffix, "#AUD_figure_id_suffix#"
    Next objField
    rngStory.Fields.Update
End Sub

Sub UpdateQuoteField(objField As Field, txtBoxQuote As TextBox, fieldIdentifier As String)
    
    If Not txtBoxQuote.Enabled Then Exit Sub
    
    If objField.Code.Fields.Count <> 2 Then Exit Sub
    
    Dim fQuote As Field
    Set fQuote = objField.Code.Fields(2)
    
    If fQuote.Type <> wdFieldQuote Or fQuote.Result.Text <> fieldIdentifier Then Exit Sub
    
    objField.Code.Fields(1).Code.Text = " QUOTE """ & txtBoxQuote.Text & """ "

End Sub
Attribute VB_Name = "frmFigureUpdate"
Attribute VB_Base = "0{793D664C-1A52-478F-BC18-8C8A28ADD04A}{88AB85F7-CB70-44D2-B05B-49E1E76A6121}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public arrFigureIdRanges As Variant
Public arrEquationIdRanges As Variant

Private Sub cmdClose_Click()
    Unload Me
End Sub

Private Sub f_lboxFailureCaptions_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
   ListBoxDblClick arrFigureIdRanges, "f_", "e_"
End Sub

Private Sub e_lboxFailureCaptions_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
   ListBoxDblClick arrEquationIdRanges, "e_", "f_"
End Sub

Private Sub ListBoxDblClick(arrIdRanges As Variant, namePrefix As String, _
                namePrefixOpposite As String)
    
    Dim objFigureEntry As FigureEntry
    
    If Controls(namePrefix & "lboxFailureCaptions").listIndex = -1 Then Exit Sub
    
    Set objFigureEntry = _
        arrIdRanges(Controls(namePrefix & "lboxFailureCaptions").List( _
            Controls(namePrefix & "lboxFailureCaptions").listIndex, 1))
        
    If objFigureEntry Is Nothing Then Exit Sub
    If objFigureEntry.FigureEntryRange Is Nothing Then Exit Sub
    
    If Controls(namePrefixOpposite & "lboxFailureCaptions").listIndex > -1 Then
        Controls(namePrefixOpposite & "lboxFailureCaptions").Selected( _
            Controls(namePrefixOpposite & "lboxFailureCaptions").listIndex) = False
    End If
        
    If objFigureEntry.FigureEntryRange.tables.Count > 0 Then
        objFigureEntry.FigureEntryRange.tables(1).Select
    End If
End Sub

Private Sub WriteFigureIdValues(arrIdRanges As Variant, namePrefix As String)

    Dim objFigureEntry As FigureEntry
    Dim numIdRanges As Long
    Dim listItemText As String
    Dim i As Long
    Dim numIdRangesUpdated As Long
    Dim numIdRangesNotUpdated As Long
    Dim numIdRangesNoCaption As Long
    
    numIdRanges = fctArrayCount(arrIdRanges)
    
    Controls(namePrefix & "lbl01b").Caption = numIdRanges + 1
    
    For i = 0 To numIdRanges
        Set objFigureEntry = arrIdRanges(i)
        If Not objFigureEntry Is Nothing Then
            If Not objFigureEntry.FigureEntryRange Is Nothing Then
                listItemText = fctGetParagraphText(objFigureEntry.FigureEntryRange.Paragraphs(1))
                If listItemText = "" Then listItemText = fctGetFormCaption("251")
                Controls(namePrefix & "lboxFailureCaptions").AddItem listItemText
                Controls(namePrefix & "lboxFailureCaptions").List( _
                    Controls(namePrefix & "lboxFailureCaptions").ListCount - 1, 1) = i
                Controls(namePrefix & "frameControls").Enabled = True
                Controls(namePrefix & "frameExclamationMark").visible = True
                Controls(namePrefix & "lbl03b").Caption = _
                    CLng(Controls(namePrefix & "lbl03b").Caption) + 1
            Else
                Controls(namePrefix & "lbl04b").Caption = _
                    CLng(Controls(namePrefix & "lbl04b").Caption) + 1
            End If
        Else
            Controls(namePrefix & "lbl02b").Caption = _
                    CLng(Controls(namePrefix & "lbl02b").Caption) + 1
        End If
    Next

End Sub

Public Sub WriteFigureInlineIdValues(arrInlineIdRanges As Variant, namePrefix As String)
    On Error Resume Next
    Controls(namePrefix & "lbl05b").Caption = UBound(arrInlineIdRanges) + 1
    On Error GoTo 0
End Sub

Public Sub Init(objSelectionRange As Range)
    
    Dim arrFigureInlineIdRanges As Variant
    Dim arrEquationInlineIdRanges As Variant
    Dim arrIconInlineIdRanges As Variant
    Dim lboxHeight As Single
    Dim lboxHeightPrev As Single
    Dim lboxHeightDiff As Single
    Dim currentMode As Variant
    Dim objUndoRecord As Object
    
    Set objUndoRecord = fctStartRecordUndo(fctGetFormCaption("240"))
    currentMode = fctSetTrackChangeModeShowMarkupShowDeleted
    
    If objSelectionRange Is Nothing Then
        arrFigureIdRanges = modFigureToolsUpdateFigureIdsInDocument
        arrEquationIdRanges = modFigureToolsUpdateEquationIdsInDocument
        arrFigureInlineIdRanges = modFigureToolsUpdateFigureInlineIdsInDocument
        arrEquationInlineIdRanges = modFigureToolsUpdateEquationInlineIdsInDocument
        arrIconInlineIdRanges = modFigureToolsUpdateIconInlineIdsInDocument
    Else
        arrFigureIdRanges = _
            modFigureToolsUpdateFigureIdsInSelection(objSelectionRange)
        arrEquationIdRanges = _
            modFigureToolsUpdateEquationIdsInSelection(objSelectionRange)
        arrFigureInlineIdRanges = _
            modFigureToolsUpdateFigureInlineIdsInSelection(objSelectionRange)
        arrEquationInlineIdRanges = _
            modFigureToolsUpdateEquationInlineIdsInSelection(objSelectionRange)
        arrIconInlineIdRanges = _
            modFigureToolsUpdateIconInlineIdsInSelection(objSelectionRange)
    End If
    
    fctRestoreTrackChangeMode currentMode
    fctEndRecordUndo objUndoRecord
    
    lboxHeightPrev = f_lboxFailureCaptions.Height
    
    WriteFigureIdValues arrFigureIdRanges, "f_"
    WriteFigureIdValues arrEquationIdRanges, "e_"
    WriteFigureInlineIdValues arrFigureInlineIdRanges, "f_"
    WriteFigureInlineIdValues arrEquationInlineIdRanges, "e_"
    WriteFigureInlineIdValues arrIconInlineIdRanges, "i_"
    
    If f_lboxFailureCaptions.ListCount = 0 And e_lboxFailureCaptions.ListCount = 0 Then
        lboxHeightDiff = f_frameSummary.Height - f_frameControls.Height
        f_frameControls.Height = f_frameSummary.Height
        e_frameControls.Height = f_frameSummary.Height
    Else
        If f_lboxFailureCaptions.Height <> lboxHeightPrev Then
            lboxHeight = f_lboxFailureCaptions.Height
        ElseIf e_lboxFailureCaptions.Height <> lboxHeightPrev Then
            lboxHeight = e_lboxFailureCaptions.Height
        Else
            lboxHeight = f_lboxFailureCaptions.Height
        End If
        f_lboxFailureCaptions.Height = lboxHeight
        e_lboxFailureCaptions.Height = lboxHeight
        lboxHeightDiff = lboxHeight - lboxHeightPrev
        f_frameControls.Height = f_frameControls.Height + lboxHeightDiff
        e_frameControls.Height = e_frameControls.Height + lboxHeightDiff
    
    End If
    
    frameInlineSummary.Top = f_frameControls.Top + f_frameControls.Height + 6
    Height = Height + lboxHeightDiff
    
    DoEvents
    fctSetZoom Me

    Show

End Sub

Private Sub UserForm_Initialize()
    
    Caption = fctGetFormCaption("240")
    f_lbl01a.Caption = fctGetFormCaption("241")
    f_lbl02a.Caption = fctGetFormCaption("242")
    f_lbl03a.Caption = fctGetFormCaption("243")
    f_lbl04a.Caption = fctGetFormCaption("249")
    f_lbl05a.Caption = fctGetFormCaption("244")
    e_lbl01a.Caption = fctGetFormCaption("245")
    e_lbl02a.Caption = fctGetFormCaption("242")
    e_lbl03a.Caption = fctGetFormCaption("243")
    e_lbl04a.Caption = fctGetFormCaption("249")
    e_lbl05a.Caption = fctGetFormCaption("246")
    i_lbl05a.Caption = fctGetFormCaption("250")
    cmdClose.Caption = fctGetFormCaption("248")
    
    f_lblCheckMark.Caption = ChrW(10003)
    e_lblCheckMark.Caption = ChrW(10003)
    
End Sub
Attribute VB_Name = "frmFraction"
Attribute VB_Base = "0{75E5EAEC-87F3-48E5-995A-CCAD3C0828A4}{C8F3D7F2-F9ED-437C-9C11-00B38B7B88B6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnCloseDialog_Click()
    Unload Me
End Sub

Private Sub vulgar_fraction_one_quarter_Click()
    fctFraction 188, fctGetFontName
End Sub

Private Sub vulgar_fraction_one_half_Click()
    fctFraction 189, fctGetFontName
End Sub

Private Sub vulgar_fraction_three_quarters_Click()
    fctFraction 190, fctGetFontName
End Sub

Private Sub vulgar_fraction_one_third_Click()
    fctFraction 8531, fctGetFontName
End Sub

Private Sub vulgar_fraction_two_thirds_Click()
    fctFraction 8532, fctGetFontName
End Sub

Private Sub vulgar_fraction_one_fifth_Click()
    fctFraction 8533, fctGetFontName
End Sub

Private Sub vulgar_fraction_two_fifths_Click()
    fctFraction 8534, fctGetFontName
End Sub

Private Sub vulgar_fraction_three_fifths_Click()
    fctFraction 8535, fctGetFontName
End Sub

Private Sub vulgar_fraction_four_fifths_Click()
    fctFraction 8536, fctGetFontName
End Sub

Private Sub vulgar_fraction_one_sixth_Click()
    fctFraction 8537, fctGetFontName
End Sub

Private Sub vulgar_fraction_five_sixths_Click()
    fctFraction 8538, fctGetFontName
End Sub

Private Sub vulgar_fraction_one_eighth_Click()
    fctFraction 8539, fctGetFontName
End Sub

Private Sub vulgar_fraction_three_eighths_Click()
    fctFraction 8540, fctGetFontName
End Sub

Private Sub vulgar_fraction_five_eighths_Click()
    fctFraction 8541, fctGetFontName
End Sub

Private Sub vulgar_fraction_seven_eighths_Click()
    fctFraction 8542, fctGetFontName
End Sub

Private Sub vulgar_fraction_numerator_one_Click()
    fctFraction 8543, fctGetFontName
End Sub

Sub fctFraction(intFractionID, fontName As String)
    Selection.Collapse wdCollapseStart
    Selection.InsertSymbol CharacterNumber:=intFractionID, Unicode:=True, Font:=fontName
End Sub

Private Sub UserForm_Initialize()

    frmFraction.Caption = fctGetFormCaption(Format(2, "00"))
    
    fctSetAlternativeLabelFont Me, "Cambria Math", "Cambria"
    
    lbl_vulgar_fraction_one_quarter.Caption = ChrW(188)
    lbl_vulgar_fraction_one_half.Caption = ChrW(189)
    lbl_vulgar_fraction_three_quarters.Caption = ChrW(190)
    lbl_vulgar_fraction_one_third.Caption = ChrW(8531)
    lbl_vulgar_fraction_two_thirds.Caption = ChrW(8532)
    lbl_vulgar_fraction_one_fifth.Caption = ChrW(8533)
    lbl_vulgar_fraction_two_fifths.Caption = ChrW(8534)
    lbl_vulgar_fraction_three_fifths.Caption = ChrW(8535)
    lbl_vulgar_fraction_four_fifths.Caption = ChrW(8536)
    lbl_vulgar_fraction_one_sixth.Caption = ChrW(8537)
    lbl_vulgar_fraction_five_sixths.Caption = ChrW(8538)
    lbl_vulgar_fraction_one_eighth.Caption = ChrW(8539)
    lbl_vulgar_fraction_three_eighths.Caption = ChrW(8540)
    lbl_vulgar_fraction_five_eighths.Caption = ChrW(8541)
    lbl_vulgar_fraction_seven_eighths.Caption = ChrW(8542)
    lbl_vulgar_fraction_numerator_one.Caption = ChrW(8543)
    
    fctSetZoom Me

End Sub


Attribute VB_Name = "frmGreeks"
Attribute VB_Base = "0{692D8361-331B-406E-B780-1F37B2BA4928}{34009620-7482-4FAF-8BEF-34F1FF310B21}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Sub btnCloseDialog_Click()
    Unload Me
End Sub

Private Sub greek_capital_letter_alpha_Click()
    fctGreek 913, fctGetFontName
End Sub

Private Sub greek_capital_letter_beta_Click()
    fctGreek 914, fctGetFontName
End Sub

Private Sub greek_capital_letter_chi_Click()
    fctGreek 935, fctGetFontName
End Sub

Private Sub greek_capital_letter_delta_Click()
    fctGreek 916, fctGetFontName
End Sub

Private Sub greek_capital_letter_epsilon_Click()
    fctGreek 917, fctGetFontName
End Sub

Private Sub greek_capital_letter_eta_Click()
    fctGreek 919, fctGetFontName
End Sub

Private Sub greek_capital_letter_gamma_Click()
    fctGreek 915, fctGetFontName
End Sub

Private Sub greek_capital_letter_iota_Click()
    fctGreek 921, fctGetFontName
End Sub

Private Sub greek_capital_letter_kappa_Click()
    fctGreek 922, fctGetFontName
End Sub

Private Sub greek_capital_letter_lamda_Click()
    fctGreek 923, fctGetFontName
End Sub

Private Sub greek_capital_letter_mu_Click()
    fctGreek 924, fctGetFontName
End Sub

Private Sub greek_capital_letter_nu_Click()
    fctGreek 925, fctGetFontName
End Sub

Private Sub greek_capital_letter_omega_Click()
    fctGreek 937, fctGetFontName
End Sub

Private Sub greek_capital_letter_omicron_Click()
    fctGreek 927, fctGetFontName
End Sub

Private Sub greek_capital_letter_phi_Click()
    fctGreek 934, fctGetFontName
End Sub

Private Sub greek_capital_letter_pi_Click()
    fctGreek 928, fctGetFontName
End Sub

Private Sub greek_capital_letter_psi_Click()
    fctGreek 936, fctGetFontName
End Sub

Private Sub greek_capital_letter_rho_Click()
    fctGreek 929, fctGetFontName
End Sub

Private Sub greek_capital_letter_sigma_Click()
    fctGreek 931, fctGetFontName
End Sub

Private Sub greek_capital_letter_tau_Click()
    fctGreek 932, fctGetFontName
End Sub

Private Sub greek_capital_letter_theta_Click()
    fctGreek 920, fctGetFontName
End Sub

Private Sub greek_capital_letter_uplison_Click()
    fctGreek 933, fctGetFontName
End Sub

Private Sub greek_capital_letter_xi_Click()
    fctGreek 926, fctGetFontName
End Sub

Private Sub greek_capital_letter_zeta_Click()
    fctGreek 918, fctGetFontName
End Sub

Private Sub greek_small_letter_alpha_Click()
    fctGreek 945, fctGetFontName
End Sub

Private Sub greek_small_letter_beta_Click()
    fctGreek 946, fctGetFontName
End Sub

Private Sub greek_beta_symbol_Click()
    fctGreek 976, fctGetFontName
End Sub

Private Sub greek_small_letter_chi_Click()
    fctGreek 967, fctGetFontName
End Sub

Private Sub greek_small_letter_delta_Click()
    fctGreek 948, fctGetFontName
End Sub

Private Sub greek_small_letter_epsilon_Click()
    fctGreek 949, fctGetFontName
End Sub

Private Sub greek_lunate_epsilon_symbol_Click()
    fctGreek 1013, fctGetFontName
End Sub

Private Sub greek_small_letter_eta_Click()
    fctGreek 951, fctGetFontName
End Sub

Private Sub greek_small_letter_final_sigma_Click()
    fctGreek 962, fctGetFontName
End Sub

Private Sub greek_small_letter_gamma_Click()
    fctGreek 947, fctGetFontName
End Sub

Private Sub greek_small_letter_iota_Click()
    fctGreek 953, fctGetFontName
End Sub

Private Sub greek_small_letter_iota_with_dialytika_Click()
    fctGreek 970, fctGetFontName
End Sub

Private Sub greek_small_letter_kappa_Click()
    fctGreek 954, fctGetFontName
End Sub

Private Sub greek_kappa_symbol_Click()
    fctGreek 1008, fctGetFontName
End Sub

Private Sub greek_small_letter_lamda_Click()
    fctGreek 955, fctGetFontName
End Sub

Private Sub greek_small_letter_mu_Click()
    fctGreek 956, fctGetFontName
End Sub

Private Sub greek_small_letter_nu_Click()
    fctGreek 957, fctGetFontName
End Sub

Private Sub greek_small_letter_omega_Click()
    fctGreek 969, fctGetFontName
End Sub

Private Sub greek_small_letter_omicron_Click()
    fctGreek 959, fctGetFontName
End Sub

Private Sub greek_small_letter_phi_Click()
    fctGreek 966, fctGetFontName
End Sub

Private Sub greek_phi_symbol_Click()
    fctGreek 981, fctGetFontName
End Sub

Private Sub greek_small_letter_pi_Click()
    fctGreek 960, fctGetFontName
End Sub

Private Sub greek_pi_symbol_Click()
    fctGreek 982, fctGetFontName
End Sub

Private Sub greek_small_letter_psi_Click()
    fctGreek 968, fctGetFontName
End Sub

Private Sub greek_small_letter_rho_Click()
    fctGreek 961, fctGetFontName
End Sub

Private Sub greek_rho_symbol_Click()
    fctGreek 1009, fctGetFontName
End Sub

Private Sub greek_small_letter_sigma_Click()
    fctGreek 963, fctGetFontName
End Sub

Private Sub greek_lunate_sigma_symbol_Click()
    fctGreek 1010, fctGetFontName
End Sub

Private Sub greek_small_letter_tau_Click()
    fctGreek 964, fctGetFontName
End Sub

Private Sub greek_small_letter_theta_Click()
    fctGreek 952, fctGetFontName
End Sub

Private Sub greek_theta_symbol_Click()
    fctGreek 977, fctGetFontName
End Sub

Private Sub greek_small_letter_upsilon_Click()
    fctGreek 965, fctGetFontName
End Sub

Private Sub greek_small_letter_xi_Click()
    fctGreek 958, fctGetFontName
End Sub

Private Sub greek_small_letter_zeta_Click()
    fctGreek 950, fctGetFontName
End Sub

Sub fctGreek(intGreekID As Integer, fontName As String)
    Selection.Collapse wdCollapseStart
    Selection.InsertSymbol CharacterNumber:=intGreekID, Unicode:=True, Font:=fontName
End Sub

Private Sub UserForm_Initialize()

    frmGreeks.Caption = fctGetFormCaption(Format(1, "00"))
    
    fctSetAlternativeLabelFont Me, "Cambria Math", "Cambria"
    
    lbl_greek_small_letter_alpha.Caption = ChrW(945)
    lbl_greek_small_letter_beta.Caption = ChrW(946)
    lbl_greek_beta_symbol.Caption = ChrW(976)
    lbl_greek_small_letter_gamma.Caption = ChrW(947)
    lbl_greek_small_letter_delta.Caption = ChrW(948)
    lbl_greek_small_letter_epsilon.Caption = ChrW(949)
    lbl_greek_lunate_epsilon_symbol.Caption = ChrW(1013)
    lbl_greek_small_letter_zeta.Caption = ChrW(950)
    lbl_greek_small_letter_eta.Caption = ChrW(951)
    lbl_greek_small_letter_theta.Caption = ChrW(952)
    lbl_greek_theta_symbol.Caption = ChrW(977)
    lbl_greek_small_letter_iota.Caption = ChrW(953)
    lbl_greek_small_letter_kappa.Caption = ChrW(954)
    lbl_greek_kappa_symbol.Caption = ChrW(1008)
    lbl_greek_small_letter_lamda.Caption = ChrW(955)
    lbl_greek_small_letter_mu.Caption = ChrW(956)
    lbl_greek_small_letter_nu.Caption = ChrW(957)
    lbl_greek_small_letter_xi.Caption = ChrW(958)
    lbl_greek_small_letter_omicron.Caption = ChrW(959)
    lbl_greek_small_letter_pi.Caption = ChrW(960)
    lbl_greek_pi_symbol.Caption = ChrW(982)
    lbl_greek_small_letter_rho.Caption = ChrW(961)
    lbl_greek_rho_symbol.Caption = ChrW(1009)
    lbl_greek_small_letter_sigma.Caption = ChrW(963)
    lbl_greek_small_letter_final_sigma.Caption = ChrW(962)
    lbl_greek_lunate_sigma_symbol.Caption = ChrW(1010)
    lbl_greek_small_letter_tau.Caption = ChrW(964)
    lbl_greek_small_letter_upsilon.Caption = ChrW(965)
    lbl_greek_small_letter_phi.Caption = ChrW(966)
    lbl_greek_phi_symbol.Caption = ChrW(981)
    lbl_greek_small_letter_chi.Caption = ChrW(967)
    lbl_greek_small_letter_psi.Caption = ChrW(968)
    lbl_greek_small_letter_omega.Caption = ChrW(969)
    lbl_greek_small_letter_iota_with_dialytika.Caption = ChrW(970)
    lbl_greek_capital_letter_alpha.Caption = ChrW(913)
    lbl_greek_capital_letter_beta.Caption = ChrW(914)
    lbl_greek_capital_letter_gamma.Caption = ChrW(915)
    lbl_greek_capital_letter_delta.Caption = ChrW(916)
    lbl_greek_capital_letter_epsilon.Caption = ChrW(917)
    lbl_greek_capital_letter_zeta.Caption = ChrW(918)
    lbl_greek_capital_letter_eta.Caption = ChrW(919)
    lbl_greek_capital_letter_theta.Caption = ChrW(920)
    lbl_greek_capital_letter_iota.Caption = ChrW(921)
    lbl_greek_capital_letter_kappa.Caption = ChrW(922)
    lbl_greek_capital_letter_lamda.Caption = ChrW(923)
    lbl_greek_capital_letter_mu.Caption = ChrW(924)
    lbl_greek_capital_letter_nu.Caption = ChrW(925)
    lbl_greek_capital_letter_xi.Caption = ChrW(926)
    lbl_greek_capital_letter_omicron.Caption = ChrW(927)
    lbl_greek_capital_letter_pi.Caption = ChrW(928)
    lbl_greek_capital_letter_rho.Caption = ChrW(929)
    lbl_greek_capital_letter_sigma.Caption = ChrW(931)
    lbl_greek_capital_letter_tau.Caption = ChrW(932)
    lbl_greek_capital_letter_uplison.Caption = ChrW(933)
    lbl_greek_capital_letter_phi.Caption = ChrW(934)
    lbl_greek_capital_letter_chi.Caption = ChrW(935)
    lbl_greek_capital_letter_psi.Caption = ChrW(936)
    lbl_greek_capital_letter_omega.Caption = ChrW(937)
    
    fctSetZoom Me

End Sub
Attribute VB_Name = "frmHeadsRenum"
Attribute VB_Base = "0{05C00E29-72F1-4DD1-96F1-65B7213A85BA}{5B550220-D984-447E-8108-8C03BF058E2C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()

Dim listNum As String

If Not (txtChapterNum.Value) = "" Then
    listNum = txtChapterNum.Value
    If ActiveDocument.Styles(AUD_lf_heads_num) <> "" Then
        With ActiveDocument.Styles(AUD_lf_heads_num).ListTemplate.ListLevels(1)
            .StartAt = listNum
        End With
        Unload Me
    End If
Else
    MsgBox fctGetErrorMsg(Format(19, "00"))
    txtChapterNum.SetFocus
End If
    ActiveDocument.Fields.Update
    Application.ScreenRefresh
End Sub

Private Sub txtChapterNum_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

Select Case KeyAscii

    Case 48 To 57
    Case Else
        KeyAscii = 0

End Select

End Sub


Private Sub UserForm_Initialize()
    
    cmdOK.Caption = fctGetFormCaption(Format(15, "00"))
    cmdCancel.Caption = fctGetFormCaption(Format(16, "00"))
    lblInput.Caption = fctGetFormCaption(Format(17, "00"))
    frmHeadsRenum.Caption = fctGetFormCaption(Format(18, "00"))
    
    fctSetZoom Me
    
End Sub
Attribute VB_Name = "frmIcons"
Attribute VB_Base = "0{63EFC82A-8FDF-436E-ACE1-EF30E110B690}{DEFC5ED9-5975-4FD8-84C2-FD87454F6092}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnCloseDialog_Click()
    Unload Me
End Sub

Private Sub copyright_sign_Click()
    fctIcons 169, fctGetFontName
End Sub

Private Sub registered_sign_Click()
    fctIcons 174, "Cambria Math"
End Sub

Private Sub trade_mark_sign_Click()
    fctIcons 8482, fctGetFontName
End Sub

Private Sub horizontal_ellipsis_Click()
    fctIcons 8230, fctGetFontName
End Sub

Private Sub check_mark_Click()
    fctIconsBias 10003
End Sub

Private Sub female_sign_Click()
    fctIconsBias 9792
End Sub

Private Sub male_sign_Click()
    fctIconsBias 9794
End Sub

Private Sub white_smiling_face_Click()
    fctIcons 9786, "Segoe UI Symbol"
End Sub

Private Sub yin_yang_Click()
    fctIconsBias 9775
End Sub

Private Sub skull_and_crossbones_Click()
    fctIconsBias 9760
End Sub

Private Sub ballot_x_Click()
    fctIconsBias 10007
End Sub

Private Sub ballot_box_Click()
    fctIconsBias 9744
End Sub

Private Sub ballot_box_with_check_Click()
    fctIconsBias 9745
End Sub

Private Sub ballot_box_with_x_Click()
    fctIconsBias 9746
End Sub

Private Sub cmdIcon01_Click()
    fctIconPlaceholder "icon001"
End Sub

Private Sub cmdIcon02_Click()
   fctIconPlaceholder "icon002"
End Sub

Private Sub cmdIcon03_Click()
    fctIconPlaceholder "icon003"
End Sub

Private Sub cmdIcon04_Click()
    fctIconPlaceholder "icon004"
End Sub

Private Sub cmdIcon05_Click()
    fctIconPlaceholder "icon005"
End Sub

Private Sub cmdIcon06_Click()
    fctIconPlaceholder "icon006"
End Sub

Private Sub cmdIcon07_Click()
    fctIconPlaceholder "icon007"
End Sub

Private Sub cmdIcon08_Click()
    fctIconPlaceholder "icon008"
End Sub

Private Sub cmdIcon09_Click()
    fctIconPlaceholder "icon009"
End Sub

Private Sub cmdIcon10_Click()
    fctIconPlaceholder "icon010"
End Sub

Private Sub UserForm_Initialize()

    frmIcons.Caption = fctGetFormCaption(Format(8, "00"))
    
    fctSetAlternativeLabelFont Me, "Cambria Math", "Cambria"
    
    lbl_copyright_sign.Caption = ChrW(169)
    lbl_registered_sign.Caption = ChrW(174)
    lbl_trade_mark_sign.Caption = ChrW(8482)
    lbl_horizontal_ellipsis.Caption = ChrW(8230)
    lbl_check_mark.Caption = ChrW(10003)
    lbl_female_sign.Caption = ChrW(9792)
    lbl_male_sign.Caption = ChrW(9794)
    lbl_white_smiling_face.Caption = ChrW(9786)
    lbl_yin_yang.Caption = ChrW(9775)
    lbl_skull_and_crossbones.Caption = ChrW(9760)
    lbl_ballot_x.Caption = ChrW(10007)
    lbl_ballot_box.Caption = ChrW(9744)
    lbl_ballot_box_with_check.Caption = ChrW(9745)
    lbl_ballot_box_with_x.Caption = ChrW(9746)

    fctSetZoom Me

End Sub

Private Sub fctIcons(intIconID As Integer, fontName As String)
    Selection.Collapse wdCollapseStart
    Selection.InsertSymbol CharacterNumber:=intIconID, Unicode:=True, Font:=fontName
End Sub

Private Sub fctIconsBias(intIconID As Integer)
    Selection.Collapse wdCollapseStart
    Selection.InsertSymbol CharacterNumber:=intIconID, Unicode:=True, Bias:=wdFontBiasFareast
End Sub

Sub fctIconPlaceholder(iconText As String)
    modFigureInsertPrefixSuffix Selection.Range, iconText, AUD_icon
End Sub

Attribute VB_Name = "frmIpas"
Attribute VB_Base = "0{9AE7209F-BCFB-465D-9E61-EFB68218E7BA}{501D6991-6A2A-46D2-9BEE-8AF05414209E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub InsertSpecialCharacters(strDecIds As Variant)
    
    Dim i As Integer
    
    Selection.Text = " "
    On Error Resume Next
    Selection.Font.Reset
    On Error GoTo 0
    
    Selection.Style = ActiveDocument.Styles(AUD_ipa)
    
    For i = 0 To UBound(strDecIds)
        Selection.InsertSymbol CharacterNumber:=strDecIds(i), Unicode:=True, Font:=fctGetFontName
    Next i
    
    Selection.Text = " "
    On Error Resume Next
    Selection.Font.Reset
    On Error GoTo 0

    Selection.TypeBackspace
End Sub

Private Sub btnCloseDialog_Click()
    Unload Me
End Sub

Private Sub c_cedille_Click()
    InsertSpecialCharacters (Array(231))
End Sub

Private Sub capital_y_Click()
    InsertSpecialCharacters (Array(655))
End Sub

Private Sub inverted_r_Click()
    InsertSpecialCharacters (Array(641))
End Sub

Private Sub open_e_Click()
    InsertSpecialCharacters (Array(603))
End Sub

Private Sub open_e_double_point_Click()
    InsertSpecialCharacters (Array(603, 58))
End Sub

Private Sub open_e_tilde_Click()
    InsertSpecialCharacters (Array(603, 771))
End Sub

Private Sub open_e_tilde_double_point_Click()
    InsertSpecialCharacters (Array(603, 771, 58))
End Sub

Private Sub revesed_a_Click()
    InsertSpecialCharacters (Array(592))
End Sub

Private Sub small_a_Click()
    InsertSpecialCharacters (Array(97))
End Sub

Private Sub small_a_i_bow_above_Click()
    InsertSpecialCharacters (Array(97, 105, 865))
End Sub

Private Sub small_a_reverse_circle_Click()
    InsertSpecialCharacters (Array(592, 815))
End Sub

Private Sub small_a_tilde_Click()
    InsertSpecialCharacters (Array(227))
End Sub

Private Sub small_a_tilde_double_point_Click()
    InsertSpecialCharacters (Array(227, 58))
End Sub

Private Sub small_a_u_bow_above_Click()
    InsertSpecialCharacters (Array(97, 117, 865))
End Sub

Private Sub small_a_with_double_point_Click()
    InsertSpecialCharacters (Array(97, 58))
End Sub

Private Sub small_ao_reverse_circle_Click()
    InsertSpecialCharacters (Array(111, 815, 97))
End Sub

Private Sub small_capital_i_Click()
    InsertSpecialCharacters (Array(618))
End Sub

Private Sub small_dz_Click()
    InsertSpecialCharacters (Array(676, 865))
End Sub

Private Sub small_e_Click()
    InsertSpecialCharacters (Array(101))
End Sub

Private Sub small_e_double_point_Click()
    InsertSpecialCharacters (Array(101, 58))
End Sub

Private Sub small_esh_Click()
    InsertSpecialCharacters (Array(643))
End Sub

Private Sub small_eth_Click()
    InsertSpecialCharacters (Array(240))
End Sub

Private Sub small_ezh_Click()
    InsertSpecialCharacters (Array(658))
End Sub

Private Sub small_i_Click()
    InsertSpecialCharacters (Array(105))
End Sub

Private Sub small_i_double_point_Click()
    InsertSpecialCharacters (Array(105, 58))
End Sub

Private Sub small_i_reverse_circle_Click()
    InsertSpecialCharacters (Array(105, 815))
End Sub

Private Sub small_l_syllabic_Click()
    InsertSpecialCharacters (Array(108, 809))
End Sub

Private Sub small_n_stroke_below_Click()
    InsertSpecialCharacters (Array(110, 809))
End Sub

Private Sub small_n_with_retrofelx_hook_Click()
    InsertSpecialCharacters (Array(627))
End Sub

Private Sub small_o_Click()
    InsertSpecialCharacters (Array(111))
End Sub

Private Sub small_o_double_point_Click()
    InsertSpecialCharacters (Array(111, 58))
End Sub

Private Sub small_o_stroke_Click()
    InsertSpecialCharacters (Array(248))
End Sub

Private Sub small_o_stroke_double_point_Click()
    InsertSpecialCharacters (Array(248, 58))
End Sub

Private Sub small_o_tilde_Click()
    InsertSpecialCharacters (Array(245))
End Sub

Private Sub small_o_tilde_double_point_Click()
    InsertSpecialCharacters (Array(245, 58))
End Sub

Private Sub small_oe_Click()
    InsertSpecialCharacters (Array(339))
End Sub

Private Sub small_oe_tilde_Click()
    InsertSpecialCharacters (Array(339, 771))
End Sub

Private Sub small_oe_tilde_double_point_Click()
    InsertSpecialCharacters (Array(339, 771, 58))
End Sub

Private Sub small_open_c_y_bow_Click()
    InsertSpecialCharacters (Array(596, 121, 865))
End Sub

Private Sub small_open_o_Click()
    InsertSpecialCharacters (Array(596))
End Sub

Private Sub small_open_o_double_point_Click()
    InsertSpecialCharacters (Array(596, 58))
End Sub

Private Sub small_s_Click()
    InsertSpecialCharacters (Array(115))
End Sub

Private Sub small_s_hook_Click()
    InsertSpecialCharacters (Array(642))
End Sub

Private Sub small_schwa_Click()
    InsertSpecialCharacters (Array(601))
End Sub

Private Sub small_t_esh_bow_Click()
    InsertSpecialCharacters (Array(116, 643, 865))
End Sub

Private Sub small_theta_Click()
    InsertSpecialCharacters (Array(952))
End Sub

Private Sub small_ts_bow_Click()
    InsertSpecialCharacters (Array(116, 115, 865))
End Sub

Private Sub small_u_Click()
    InsertSpecialCharacters (Array(117))
End Sub

Private Sub small_u_double_point_Click()
    InsertSpecialCharacters (Array(117, 58))
End Sub

Private Sub small_u_reverse_circle_Click()
    InsertSpecialCharacters (Array(117, 815))
End Sub

Private Sub small_upsilon_Click()
    InsertSpecialCharacters (Array(650))
End Sub

Private Sub small_v_Click()
    InsertSpecialCharacters (Array(118))
End Sub

Private Sub small_v_hook_Click()
    InsertSpecialCharacters (Array(651))
End Sub

Private Sub small_w_Click()
    InsertSpecialCharacters (Array(119))
End Sub

Private Sub small_x_Click()
    InsertSpecialCharacters (Array(120))
End Sub

Private Sub small_y_circle_above_Click()
    InsertSpecialCharacters (Array(121, 774))
End Sub

Private Sub small_y_Click()
    InsertSpecialCharacters (Array(121))
End Sub

Private Sub small_y_double_point_Click()
    InsertSpecialCharacters (Array(121, 58))
End Sub

Private Sub small_z_Click()
    InsertSpecialCharacters (Array(122))
End Sub

Private Sub vertical_line_Click()
    InsertSpecialCharacters (Array(124))
End Sub

Private Sub UserForm_Initialize()

    frmIpas.Caption = fctGetFormCaption(Format(9, "00"))
    
    fctSetAlternativeLabelFont Me, "Cambria Math", "Cambria"
    
    lbl_small_a.Caption = ChrW(97)
    lbl_small_a_with_double_point.Caption = ChrW(97) & ChrW(58)
    lbl_revesed_a.Caption = ChrW(592)
    lbl_small_a_reverse_circle.Caption = ChrW(592) & ChrW(815)
    lbl_small_a_tilde.Caption = ChrW(227)
    lbl_small_a_tilde_double_point.Caption = ChrW(227) & ChrW(58)
    lbl_small_a_i_bow_above.Caption = ChrW(97) & ChrW(105) & ChrW(865)
    lbl_small_a_u_bow_above.Caption = ChrW(97) & ChrW(117) & ChrW(865)
    lbl_c_cedille.Caption = ChrW(231)
    lbl_small_dz.Caption = ChrW(676) & ChrW(865)
    lbl_small_e.Caption = ChrW(101)
    lbl_small_e_double_point.Caption = ChrW(101) & ChrW(58)
    lbl_open_e.Caption = ChrW(603)
    lbl_open_e_double_point.Caption = ChrW(603) & ChrW(58)
    lbl_open_e_tilde.Caption = ChrW(603) & ChrW(771)
    lbl_open_e_tilde_double_point.Caption = ChrW(603) & ChrW(771) & ChrW(58)
    lbl_small_schwa.Caption = ChrW(601)
    lbl_small_i.Caption = ChrW(105)
    lbl_small_i_double_point.Caption = ChrW(105) & ChrW(58)
    lbl_small_i_reverse_circle.Caption = ChrW(105) & ChrW(815)
    lbl_small_capital_i.Caption = ChrW(618)
    lbl_small_l_syllabic.Caption = ChrW(108) & ChrW(809)
    lbl_small_n_stroke_below.Caption = ChrW(110) & ChrW(809)
    lbl_small_n_with_retrofelx_hook.Caption = ChrW(627)
    lbl_small_o.Caption = ChrW(111)
    lbl_small_o_double_point.Caption = ChrW(111) & ChrW(58)
    lbl_small_open_o.Caption = ChrW(596)
    lbl_small_open_o_double_point.Caption = ChrW(596) & ChrW(58)
    lbl_small_o_tilde.Caption = ChrW(245)
    lbl_small_o_tilde_double_point.Caption = ChrW(245) & ChrW(58)
    lbl_small_o_stroke.Caption = ChrW(248)
    lbl_small_o_stroke_double_point.Caption = ChrW(248) & ChrW(58)
    lbl_small_oe.Caption = ChrW(339)
    lbl_small_oe_tilde.Caption = ChrW(339) & ChrW(771)
    lbl_small_oe_tilde_double_point.Caption = ChrW(339) & ChrW(771) & ChrW(58)
    lbl_small_ao_reverse_circle.Caption = ChrW(111) & ChrW(815) & ChrW(97)
    lbl_small_open_c_y_bow.Caption = ChrW(596) & ChrW(121) & ChrW(865)
    lbl_small_s.Caption = ChrW(115)
    lbl_small_esh.Caption = ChrW(643)
    lbl_small_ts_bow.Caption = ChrW(116) & ChrW(115) & ChrW(865)
    lbl_small_t_esh_bow.Caption = ChrW(116) & ChrW(643) & ChrW(865)
    lbl_small_u.Caption = ChrW(117)
    lbl_small_u_double_point.Caption = ChrW(117) & ChrW(58)
    lbl_small_u_reverse_circle.Caption = ChrW(117) & ChrW(815)
    lbl_small_v_hook.Caption = ChrW(651)
    lbl_small_v.Caption = ChrW(118)
    lbl_small_w.Caption = ChrW(119)
    lbl_small_x.Caption = ChrW(120)
    lbl_small_y.Caption = ChrW(121)
    lbl_small_y_double_point.Caption = ChrW(121) & ChrW(58)
    lbl_small_y_circle_above.Caption = ChrW(121) & ChrW(774)
    lbl_capital_y.Caption = ChrW(655)
    lbl_small_z.Caption = ChrW(122)
    lbl_small_ezh.Caption = ChrW(658)
    lbl_small_theta.Caption = ChrW(952)
    lbl_small_eth.Caption = ChrW(240)
    lbl_vertical_line.Caption = ChrW(124)
    lbl_inverted_r.Caption = ChrW(641)
    lbl_small_s_hook.Caption = ChrW(642)
    lbl_small_upsilon.Caption = ChrW(650)
    
    fctSetZoom Me

End Sub
Attribute VB_Name = "frmMarginalNumberInsert"
Attribute VB_Base = "0{AED784B8-F568-4CF6-B4D2-1D5082DB1C3C}{C705A67C-E1B2-4701-8043-30D9E44F4DD3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim frmFrameIndex As Integer
Dim frmFramesCount As Integer
Dim frmObjMarginalNumberConfig As MarginalNumberConfig
Dim frmTrackRevisionSettings() As Boolean

Private Sub btnCancel_Click()
    Unload Me
End Sub

Private Sub lblBtnMethodA_Click()
    Dim objUndoRecord As Object
    Set objUndoRecord = fctStartRecordUndo(fctGetFormCaption("296"))
    ActivateTrackChange
    modMarginalNumberInsertEntryNew frmObjMarginalNumberConfig.MarginalNumberConfigEntryNewNoRenumber
    DeactivateTrackChange
    fctEndRecordUndo objUndoRecord
    Unload Me
End Sub

Private Sub lblBtnMethodB_Click()
    Dim objUndoRecord As Object
    Set objUndoRecord = fctStartRecordUndo(fctGetFormCaption("296"))
    ActivateTrackChange
    modMarginalNumberRenumberEntriesFollowing frmObjMarginalNumberConfig.GetMarginalNumberConfigEntriesFollowing
    modMarginalNumberInsertEntryNew frmObjMarginalNumberConfig.MarginalNumberConfigEntryNewRenumber
    DeactivateTrackChange
    modToolsUpdateFields False
    fctEndRecordUndo objUndoRecord
    Unload Me
End Sub

Private Sub ActivateTrackChange()
    frmTrackRevisionSettings = modMarginalNumberActivateTrackChange(chkActivateTrackChange.Value)
End Sub

Private Sub DeactivateTrackChange()
    modMarginalNumberDeactivateTrackChange frmTrackRevisionSettings
End Sub

Private Sub lblArrowUp_Click()
    NavigateFrames frmFrameIndex - 1
End Sub

Private Sub lblArrowDown_Click()
    NavigateFrames frmFrameIndex + 1
End Sub

Sub NavigateFrames(frmFrameIndexNew As Integer)
    
    If frmFramesCount = 0 Then Exit Sub
    
    Controls("frameMethodA" & frmFrameIndex).visible = False
    Controls("frameMethodB" & frmFrameIndex).visible = False
    
    frmFrameIndex = frmFrameIndexNew
    
    Controls("frameMethodA" & frmFrameIndex).visible = True
    Controls("frameMethodB" & frmFrameIndex).visible = True
    Controls("frameMethodA" & frmFrameIndex).ZOrder (0)
    Controls("frameMethodB" & frmFrameIndex).ZOrder (0)
    
    lblArrowUp.visible = False
    lblArrowDown.visible = False
    
    If frmFrameIndex > 0 Then
        lblArrowUp.visible = True
    End If
    
    If frmFrameIndex < frmFramesCount - 1 Then
        lblArrowDown.visible = True
    End If
End Sub

Private Sub lblChkClick_Click()
    chkActivateTrackChange.Value = Not chkActivateTrackChange.Value
End Sub

Private Sub UserForm_Activate()

    lblArrowUp.Caption = ChrW(9650)
    lblArrowDown.Caption = ChrW(9660)

    If frmObjMarginalNumberConfig Is Nothing Then
        SetMarginalNumberConfig modMarginalNumberInsertGetConfig(modMarginalNumberGetRange(Selection.Range))
    End If

    AddFramesMethodA frmObjMarginalNumberConfig
    AddFramesMethodB frmObjMarginalNumberConfig

    If frmFramesCount - 1 > 0 Then
        lblArrowDown.visible = True
    End If

    NavigateFrames 0

    Caption = fctGetFormCaption("290")
    lblTextMethodA.Caption = fctGetFormCaption("291")
    lblTextMethodB.Caption = fctGetFormCaption("292")
    lblBtnMethodA.Caption = fctGetFormCaption("293")
    lblBtnMethodB.Caption = fctGetFormCaption("294")
    lblChkText.Caption = fctGetFormCaption("295")
    chkActivateTrackChange.Value = ActiveDocument.TrackRevisions

    If frmObjMarginalNumberConfig.MarginalNumberConfigEntriesFollowingChangeStatus = 0 Then
        lblExclamtionMark.visible = False
        lblTextMethodB.Caption = fctGetFormCaption("291")
    End If
    
    fctSetZoom Me

End Sub

Sub AddFramesMethodA(objMarginalNumberConfig As MarginalNumberConfig)

    If objMarginalNumberConfig Is Nothing Then Exit Sub

    Dim objFrame As Object
    Dim dblTopPos As Long
    Dim offsetPos As Long
    Dim i As Long
    Dim counter As Long
    Dim arrMarginalNumberEntry() As MarginalNumberEntry
    Dim numMarginalNumberEntry As Long

    arrMarginalNumberEntry = objMarginalNumberConfig.GetMarginalNumberConfigEntriesFollowing
    numMarginalNumberEntry = fctArrayCount(arrMarginalNumberEntry)

    txtNewA.Text = objMarginalNumberConfig.MarginalNumberConfigEntryNewNoRenumber.MarginalNumberLabel
    If objMarginalNumberConfig.MarginalNumberConfigEntryBefore.MarginalNumberLabelHistoric = "" Then
        txtPreviousA.Text = "|fffd|"
    Else
        txtPreviousA.Text = objMarginalNumberConfig.MarginalNumberConfigEntryBefore.MarginalNumberLabelHistoric
    End If
    
    offsetPos = 15.3
    
    For i = 0 To numMarginalNumberEntry
        
        If i Mod 10 = 0 Then
            Set objFrame = AddFrame(frameMethodA, lblNewBackgroundA, "frameMethodA" & counter)
            dblTopPos = 0
            counter = counter + 1
        End If
        
        AddTextBox objFrame, txtTemplateUnchanged, "txtBoxNameA" & "Unchanged" & i, _
                        arrMarginalNumberEntry(i).MarginalNumberLabelHistoric, 6, dblTopPos
        
        AddLabel objFrame, "lblCoverA" & i, 7, dblTopPos
        
        dblTopPos = dblTopPos + offsetPos
    Next
    
    frmFramesCount = counter

End Sub

Sub AddFramesMethodB(objMarginalNumberConfig As MarginalNumberConfig)

    If objMarginalNumberConfig Is Nothing Then Exit Sub

    Dim dblTopPos As Long
    Dim offsetPos As Long
    Dim i As Long
    Dim counter As Long
    Dim objFrame As Object
    Dim arrMarginalNumberEntry() As MarginalNumberEntry
    Dim numMarginalNumberEntry As Long

    arrMarginalNumberEntry = objMarginalNumberConfig.GetMarginalNumberConfigEntriesFollowing
    numMarginalNumberEntry = fctArrayCount(arrMarginalNumberEntry)

    txtNewB.Text = objMarginalNumberConfig.MarginalNumberConfigEntryNewRenumber.MarginalNumberLabel
    If objMarginalNumberConfig.MarginalNumberConfigEntryBefore.MarginalNumberLabelHistoric = "" Then
        txtPreviousB.Text = "|fffd|"
    Else
        txtPreviousB.Text = objMarginalNumberConfig.MarginalNumberConfigEntryBefore.MarginalNumberLabelHistoric
    End If
    
    offsetPos = 15.3
    
    For i = 0 To numMarginalNumberEntry
       
        If i Mod 10 = 0 Then
            Set objFrame = AddFrame(frameMethodB, lblNewBackgroundB, "frameMethodB" & counter)
            counter = counter + 1
            dblTopPos = 0
        End If
        
        If arrMarginalNumberEntry(i).MarginalNumberLabel = arrMarginalNumberEntry(i).MarginalNumberLabelHistoric Then
            AddTextBox objFrame, txtTemplateUnchanged, "txtBoxNameB" & "Unchanged" & i, _
                            arrMarginalNumberEntry(i).MarginalNumberLabelHistoric, 6, dblTopPos
        Else
            AddTextBox objFrame, txtTemplateNew, "txtBoxNameB" & "New" & i, _
                            arrMarginalNumberEntry(i).MarginalNumberLabel, 54, dblTopPos
            
            AddTextBox objFrame, txtTemplateOld, "txtBoxNameB" & "Old" & i, _
                            arrMarginalNumberEntry(i).MarginalNumberLabelHistoric, 6, dblTopPos
        End If
        
        AddLabel objFrame, "lblCoverB" & i, 7, dblTopPos
        
        dblTopPos = dblTopPos + offsetPos
    Next
    
    frmFramesCount = counter

End Sub

Function AddFrame(frameRef As Object, lblRef As Object, frameName As String) As Object
    Dim objFrame As Object
    Set objFrame = Controls.Add("Forms.frame.1", frameName, True)
    objFrame.BorderColor = 16777215
    objFrame.BackColor = 16777215
    objFrame.BorderStyle = 1
    objFrame.SpecialEffect = fmSpecialEffectFlat
    objFrame.Top = frameRef.Top + lblRef.Top + lblRef.Height + 1
    objFrame.Left = frameRef.Left + 1
    objFrame.Width = frameRef.Width - 2
    objFrame.Height = 150
    objFrame.visible = False
    Set AddFrame = objFrame
End Function

Sub AddTextBox(frameRef As Object, txtBoxTemplate As Object, txtBoxName As String, _
            txtBoxText As String, posLeft As Long, posTop As Long)
    
    Dim objTxtBox As Object
    Set objTxtBox = frameRef.Controls.Add("Forms.TextBox.1", txtBoxName, True)

    objTxtBox.BackColor = txtBoxTemplate.BackColor
    objTxtBox.ForeColor = txtBoxTemplate.ForeColor
    objTxtBox.Height = txtBoxTemplate.Height
    objTxtBox.Width = txtBoxTemplate.Width
    objTxtBox.SpecialEffect = txtBoxTemplate.SpecialEffect
    objTxtBox.Font.Bold = txtBoxTemplate.Font.Bold
    objTxtBox.Font.StrikeThrough = txtBoxTemplate.Font.StrikeThrough
    objTxtBox.Font.Underline = txtBoxTemplate.Font.Underline
    objTxtBox.TextAlign = txtBoxTemplate.TextAlign
    objTxtBox.TabStop = False
    
    With objTxtBox
        .Left = posLeft
        .Top = posTop
        .Text = txtBoxText
    End With
    
End Sub

Sub AddLabel(frameRef As Object, lblName As String, posLeft As Long, posTop As Long)
    
    Dim objLabel As Object
    Set objLabel = frameRef.Controls.Add("Forms.Label.1", lblName, True)

    objLabel.Height = lblCover.Height
    objLabel.Width = lblCover.Width
    objLabel.BackStyle = lblCover.BackStyle
    
    With objLabel
        .Left = posLeft
        .Top = posTop
    End With
    
End Sub

Public Sub SetMarginalNumberConfig(objMarginalNumberConfig As MarginalNumberConfig)
    Set frmObjMarginalNumberConfig = objMarginalNumberConfig
End Sub
Attribute VB_Name = "frmMarginalNumberRenumber"
Attribute VB_Base = "0{F345139F-528B-4A43-929B-376AF056E593}{97CE20FE-4192-4E1A-83C9-78398F9592D2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim frmFrameIndex As Integer
Dim frmFramesCount As Integer
Dim frmObjMarginalNumberConfig As MarginalNumberConfig
Dim frmTrackRevisionSettings() As Boolean

Private Sub btnCancel_Click()
    Unload Me
End Sub

Private Sub lblBtnRenumber_Click()
    Dim objUndoRecord As Object
    Set objUndoRecord = fctStartRecordUndo(fctGetFormCaption("306"))
    ActivateTrackChange
    modMarginalNumberRenumberEntriesFollowing frmObjMarginalNumberConfig.GetMarginalNumberConfigEntriesFollowing
    DeactivateTrackChange
    modToolsUpdateFields False
    fctEndRecordUndo objUndoRecord
    Unload Me
End Sub

Private Sub ActivateTrackChange()
    frmTrackRevisionSettings = modMarginalNumberActivateTrackChange(chkActivateTrackChange.Value)
End Sub

Private Sub DeactivateTrackChange()
    modMarginalNumberDeactivateTrackChange frmTrackRevisionSettings
End Sub

Private Sub lblArrowUp_Click()
    NavigateFrames frmFrameIndex - 1
End Sub

Private Sub lblArrowDown_Click()
    NavigateFrames frmFrameIndex + 1
End Sub

Sub NavigateFrames(frmFrameIndexNew As Integer)
    
    If frmFramesCount = 0 Then Exit Sub
    
    Controls("frameMain" & frmFrameIndex).visible = False
    
    frmFrameIndex = frmFrameIndexNew

    Controls("frameMain" & frmFrameIndex).visible = True
    Controls("frameMain" & frmFrameIndex).ZOrder (0)
    
    lblArrowUp.visible = False
    lblArrowDown.visible = False
    
    If frmFrameIndex > 0 Then
        lblArrowUp.visible = True
    End If
    
    If frmFrameIndex < frmFramesCount - 1 Then
        lblArrowDown.visible = True
    End If
    
    If frmFrameIndex = 0 Then
        frameStartValue.visible = True
        frameStartValue.ZOrder (0)
    Else
        frameStartValue.visible = False
    End If
    
End Sub

Private Sub lblChkClick_Click()
    chkActivateTrackChange.Value = Not chkActivateTrackChange.Value
End Sub

Private Sub txtStartValue_Change()
    SetMarginalNumberConfig modMarginalNumberRenumGetConfig(txtStartValue.Text)
    Init
End Sub

Private Sub UserForm_Activate()

    Dim marginalNumberEntries() As MarginalNumberEntry
    Dim numMarginalNumberEntries As Long
    
    lblArrowUp.Caption = ChrW(9650)
    lblArrowDown.Caption = ChrW(9660)

    If frmObjMarginalNumberConfig Is Nothing Then
        SetMarginalNumberConfig modMarginalNumberRenumGetConfig(1)
    End If
    
    marginalNumberEntries = frmObjMarginalNumberConfig.GetMarginalNumberConfigEntriesFollowing
    numMarginalNumberEntries = fctArrayCount(marginalNumberEntries)
    
    Caption = fctGetFormCaption("300")
    lblText.Caption = fctGetFormCaption("301")
    lblStartValue.Caption = fctGetFormCaption("303")
    lblBtnRenumber.Caption = fctGetFormCaption("304")
    lblChkText.Caption = fctGetFormCaption("305")
    chkActivateTrackChange.Value = ActiveDocument.TrackRevisions
    
    If numMarginalNumberEntries > -1 Then
        txtStartValue.Text = marginalNumberEntries(0).MarginalNumberPatternLevels(0)(1)
    End If

    fctSetZoom Me

    Init

End Sub

Private Sub Init()

    AddFramesRenumber frmObjMarginalNumberConfig

    If frmFramesCount - 1 > 0 Then
        lblArrowDown.visible = True
    End If

    NavigateFrames 0
    
    lblText.Caption = fctGetFormCaption("301")
    lblExclamtionMark.visible = True
    If frmObjMarginalNumberConfig.MarginalNumberConfigEntriesFollowingChangeStatus = 0 Then
        lblText.Caption = fctGetFormCaption("302")
        lblExclamtionMark.visible = False
    End If

End Sub

Sub AddFramesRenumber(objMarginalNumberConfig As MarginalNumberConfig)

    If objMarginalNumberConfig Is Nothing Then Exit Sub

    Dim dblTopPos As Long
    Dim offsetPos As Long
    Dim i As Long
    Dim counter As Long
    Dim objFrame As Object
    Dim arrMarginalNumberEntry() As MarginalNumberEntry
    Dim numMarginalNumberEntry As Long

    arrMarginalNumberEntry = objMarginalNumberConfig.GetMarginalNumberConfigEntriesFollowing
    numMarginalNumberEntry = fctArrayCount(arrMarginalNumberEntry)
    
    offsetPos = 15.3
    
    For i = 0 To numMarginalNumberEntry
       
        If i Mod 10 = 0 Then
            On Error Resume Next
            Controls.Remove ("frameMain" & counter)
            On Error GoTo 0
            Set objFrame = AddFrame(frameMain, "frameMain" & counter)
            counter = counter + 1
            dblTopPos = 6
        End If
        
        If arrMarginalNumberEntry(i).MarginalNumberLabel = arrMarginalNumberEntry(i).MarginalNumberLabelHistoric Then
            If i = 0 Then
                AddTextBox objFrame, txtTemplateUnchangedFirst, "txtBoxName" & "UnchangedFirst" & i, _
                                arrMarginalNumberEntry(i).MarginalNumberLabelHistoric, 7, dblTopPos
            Else
                AddTextBox objFrame, txtTemplateUnchanged, "txtBoxName" & "Unchanged" & i, _
                                arrMarginalNumberEntry(i).MarginalNumberLabelHistoric, 7, dblTopPos
            End If
        Else
            AddTextBox objFrame, txtTemplateNew, "txtBoxName" & "New" & i, _
                            arrMarginalNumberEntry(i).MarginalNumberLabel, 87, dblTopPos
            
            AddTextBox objFrame, txtTemplateOld, "txtBoxName" & "Old" & i, _
                            arrMarginalNumberEntry(i).MarginalNumberLabelHistoric, 7, dblTopPos
        End If
        
        AddLabel objFrame, "lblCover" & i, 7, dblTopPos
        
        dblTopPos = dblTopPos + offsetPos
    Next
    
    frmFramesCount = counter

End Sub

Function AddFrame(frameRef As Object, frameName As String) As Object
    Dim objFrame As Object
    Set objFrame = Controls.Add("Forms.frame.1", frameName, True)
    objFrame.BorderColor = 14737632
    objFrame.BackColor = 16777215
    objFrame.BorderStyle = 1
    objFrame.SpecialEffect = fmSpecialEffectFlat
    objFrame.Top = frameRef.Top
    objFrame.Left = frameRef.Left
    objFrame.Width = frameRef.Width
    objFrame.Height = frameRef.Height
    objFrame.visible = False
    Set AddFrame = objFrame
End Function

Sub AddTextBox(frameRef As Object, txtBoxTemplate As Object, txtBoxName As String, _
            txtBoxText As String, posLeft As Long, posTop As Long)
    
    Dim objTxtBox As Object
    Set objTxtBox = frameRef.Controls.Add("Forms.TextBox.1", txtBoxName, True)

    objTxtBox.BackColor = txtBoxTemplate.BackColor
    objTxtBox.ForeColor = txtBoxTemplate.ForeColor
    objTxtBox.Height = txtBoxTemplate.Height
    objTxtBox.Width = txtBoxTemplate.Width
    objTxtBox.SpecialEffect = txtBoxTemplate.SpecialEffect
    objTxtBox.Font.Bold = txtBoxTemplate.Font.Bold
    objTxtBox.Font.StrikeThrough = txtBoxTemplate.Font.StrikeThrough
    objTxtBox.Font.Underline = txtBoxTemplate.Font.Underline
    objTxtBox.TextAlign = txtBoxTemplate.TextAlign
    objTxtBox.TabStop = False
    
    With objTxtBox
        .Left = posLeft
        .Top = posTop
        .Text = txtBoxText
    End With
    
End Sub


Sub AddLabel(frameRef As Object, lblName As String, posLeft As Long, posTop As Long)
    
    Dim objLabel As Object
    Set objLabel = frameRef.Controls.Add("Forms.Label.1", lblName, True)

    objLabel.Height = lblCover.Height
    objLabel.Width = lblCover.Width
    objLabel.BackStyle = lblCover.BackStyle
    
    With objLabel
        .Left = posLeft
        .Top = posTop
    End With
    
End Sub

Public Sub SetMarginalNumberConfig(objMarginalNumberConfig As MarginalNumberConfig)
    Set frmObjMarginalNumberConfig = objMarginalNumberConfig
End Sub

Attribute VB_Name = "frmMaths"
Attribute VB_Base = "0{DE2CB1CA-6DE1-427A-A2FD-0704F770829E}{2C4CDCD3-D5C3-4934-BDBE-9933B31653C0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Sub almost_equal_to_Click()
    fctMath 8776, fctGetFontName
End Sub

Private Sub almost_equal_or_equal_to_Click()
    fctMath 8778, "Cambria Math"
End Sub

Private Sub approximately_equal_to_Click()
    fctMath 8773, "Cambria Math"
End Sub

Private Sub btnCloseDialog_Click()
    Unload Me
End Sub

Private Sub bullet_operator_Click()
    fctMath 8729, fctGetFontName
End Sub

Private Sub division_sign_Click()
    fctMath 247, fctGetFontName
End Sub

Private Sub estimates_Click()
    fctMath 8793, "Cambria Math"
End Sub

Private Sub greater_than_or_equal_to_Click()
    fctMath 8805, fctGetFontName
End Sub

Private Sub mikro_sign_Click()
    fctMath 181, fctGetFontName
End Sub

Private Sub identical_to_Click()
    fctMathBias 8801
End Sub

Private Sub inverted_exclamation_mark_Click()
    fctMath 161, fctGetFontName
End Sub

Private Sub latin_capital_letter_O_stroke_Click()
    fctMath 216, fctGetFontName
End Sub

Private Sub latin_small_letter_O_stroke_Click()
    fctMath 248, fctGetFontName
End Sub

Private Sub less_than_or_equal_to_Click()
    fctMath 8804, fctGetFontName
End Sub

Private Sub minus_sign_Click()
    fctMath 8722, fctGetFontName
End Sub

Private Sub multiplication_sign_Click()
    fctMath 215, fctGetFontName
End Sub

Private Sub not_equal_to_Click()
    fctMathBias 8800
End Sub

Private Sub per_mille_sign_Click()
    fctMath 8240, fctGetFontName
End Sub

Private Sub plus_minus_sign_Click()
    fctMath 177, fctGetFontName
End Sub

Private Sub plus_sign_Click()
    fctMath 43, fctGetFontName
End Sub

Private Sub square_root_Click()
    fctMathBias 8730
End Sub

Private Sub infinity_Click()
    fctMathBias 8734
End Sub

Private Sub tilde_operator_Click()
    fctMath 126, fctGetFontName
End Sub

Private Sub much_less_than_Click()
    fctMathBias 8810
End Sub

Private Sub much_greater_than_Click()
    fctMathBias 8811
End Sub

Private Sub nabla_Click()
    fctMathBias 8711
End Sub

Private Sub prime_Click()
    fctMath 8242, fctGetFontName
End Sub

Private Sub double_prime_Click()
    fctMath 8243, fctGetFontName
End Sub

Private Sub fctMath(intMathID As Integer, fontName As String)
    Selection.Collapse wdCollapseStart
    Selection.InsertSymbol CharacterNumber:=intMathID, Unicode:=True, Font:=fontName
End Sub

Private Sub fctMathBias(intMathID As Integer)
    Selection.Collapse wdCollapseStart
    Selection.InsertSymbol CharacterNumber:=intMathID, Unicode:=True, Bias:=wdFontBiasFareast
End Sub

Private Sub UserForm_Initialize()

    frmMaths.Caption = fctGetFormCaption(Format(11, "00"))
    
    fctSetAlternativeLabelFont Me, "Cambria Math", "Cambria"
    
    lbl_plus_sign.Caption = ChrW(43)
    lbl_minus_sign.Caption = ChrW(8722)
    lbl_multiplication_sign.Caption = ChrW(215)
    lbl_bullet_operator.Caption = ChrW(8729)
    lbl_division_sign.Caption = ChrW(247)
    lbl_plus_minus_sign.Caption = ChrW(177)
    lbl_greater_than_or_equal_to.Caption = ChrW(8805)
    lbl_less_than_or_equal_to.Caption = ChrW(8804)
    lbl_inverted_exclamation_mark.Caption = ChrW(161)
    lbl_tilde_operator.Caption = ChrW(126)
    lbl_almost_equal_to.Caption = ChrW(8776)
    lbl_approximately_equal_to.Caption = ChrW(8773)
    lbl_almost_equal_or_equal_to.Caption = ChrW(8778)
    lbl_estimates.Caption = ChrW(8793)
    lbl_identical_to.Caption = ChrW(8801)
    lbl_not_equal_to.Caption = ChrW(8800)
    lbl_square_root.Caption = ChrW(8730)
    lbl_infinity.Caption = ChrW(8734)
    lbl_per_mille_sign.Caption = ChrW(8240)
    lbl_latin_capital_letter_O_stroke.Caption = ChrW(216)
    lbl_latin_small_letter_O_stroke.Caption = ChrW(248)
    lbl_mikro_sign.Caption = ChrW(181)
    lbl_much_less_than.Caption = ChrW(8810)
    lbl_much_greater_than.Caption = ChrW(8811)
    lbl_nabla.Caption = ChrW(8711)
    lbl_prime.Caption = ChrW(8242)
    lbl_double_prime.Caption = ChrW(8243)
    
    fctSetZoom Me

End Sub
Attribute VB_Name = "frmMetaData"
Attribute VB_Base = "0{D322343A-31EE-4803-B809-37429E6433F6}{A3F998A5-A894-42DA-B22A-3AACC22848C8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub btnClose_Click()
    Unload Me
End Sub

Private Sub btnSaveMetaData_Click()
    
    Dim strMetaData As String
    Dim strMetaType As String
    
    strMetaData = Replace(txtMetaData.Text, vbCrLf, "@@vbCrLf@@")
    strMetaData = Replace(strMetaData, vbCrLf, "@@vbLf@@")
    strMetaData = Replace(strMetaData, vbCr, "@@vbCr@@")
    strMetaData = Replace(strMetaData, vbTab, "@@vbTab@@")
    strMetaData = Replace(strMetaData, "#AUD_meta_inline_general#", "")
    strMetaData = Replace(strMetaData, "#AUD_meta_inline_element#", "")
    strMetaData = Replace(strMetaData, "#AUD_meta_inline_attribute#", "")
    strMetaData = Replace(strMetaData, "#AUD_meta_inline_pi#", "")
    
    strMetaType = "#AUD_meta_inline_general#"
    If cmbMetaDataTypeOptions.Value = fctGetFormCaption(143) Then
        strMetaType = "#AUD_meta_inline_element#"
    ElseIf cmbMetaDataTypeOptions.Value = fctGetFormCaption(144) Then
        strMetaType = "#AUD_meta_inline_attribute#"
    ElseIf cmbMetaDataTypeOptions.Value = fctGetFormCaption(145) Then
        strMetaType = "#AUD_meta_inline_pi#"
    End If
    
    Selection.Fields(2).Code.Text = " IF 1 = 1 """ & _
        fctWordDoc.CustomDocumentProperties("strMetaInline").Value & _
            """ """ & strMetaType & strMetaData & strMetaType & """ "
    Selection.Fields(2).Update
    
    ActiveWindow.View.ShowFieldCodes = False
    
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    
    Caption = fctGetFormCaption(Format(140, "00"))
    btnClose.Caption = fctGetFormCaption(Format(141, "00"))
    btnSaveMetaData.Caption = fctGetFormCaption(Format(142, "00"))
    
    cmbMetaDataTypeOptions.AddItem fctGetFormCaption(Format(143, "00"))
    cmbMetaDataTypeOptions.AddItem fctGetFormCaption(Format(144, "00"))
    cmbMetaDataTypeOptions.AddItem fctGetFormCaption(Format(145, "00"))
    cmbMetaDataTypeOptions.AddItem fctGetFormCaption(Format(146, "00"))
    
    fctSetZoom Me

End Sub
Attribute VB_Name = "frmOtherLang"
Attribute VB_Base = "0{EEA2A7AC-DECD-4D49-BD96-22A684D85F8F}{13B913B1-83B4-48E8-8BB7-AC533AE21F7C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub btnCloseDialog_Click()
    Unload Me
End Sub

Private Sub SCAN_00E1_latin_small_letter_a_with_acute_Click()
    fctOtherLang "00E1", fctGetFontName
End Sub

Private Sub SCAN_00E5_latin_small_letter_a_with_ring_above_Click()
    fctOtherLang "00E5", fctGetFontName
End Sub

Private Sub SCAN_00E6_latin_small_letter_ae_Click()
    fctOtherLang "00E6", fctGetFontName
End Sub

Private Sub SCAN_00E9_latin_small_letter_e_with_acute_Click()
    fctOtherLang "00E9", fctGetFontName
End Sub

Private Sub SCAN_00ED_latin_small_letter_i_with_acute_Click()
    fctOtherLang "00ED", fctGetFontName
End Sub

Private Sub SCAN_00F0_latin_small_letter_eth_Click()
    fctOtherLang "00F0", fctGetFontName
End Sub

Private Sub SCAN_00F3_latin_small_letter_o_with_acute_Click()
    fctOtherLang "00F3", fctGetFontName
End Sub

Private Sub SCAN_00F8_latin_small_letter_o_with_stroke_Click()
    fctOtherLang "00F8", fctGetFontName
End Sub

Private Sub SCAN_00FA_latin_small_letter_u_with_acute_Click()
    fctOtherLang "00FA", fctGetFontName
End Sub

Private Sub SCAN_00FD_latin_small_letter_y_with_acute_Click()
    fctOtherLang "00FD", fctGetFontName
End Sub

Private Sub SCAN_00FE_latin_small_letter_thorn_Click()
    fctOtherLang "00FE", fctGetFontName
End Sub

Private Sub SCAN_00C1_latin_capital_letter_a_with_acute_Click()
    fctOtherLang "00C1", fctGetFontName
End Sub

Private Sub SCAN_00C5_latin_capital_letter_a_with_ring_above_Click()
    fctOtherLang "00C5", fctGetFontName
End Sub

Private Sub SCAN_00C6_latin_capital_letter_ae_Click()
    fctOtherLang "00C6", fctGetFontName
End Sub

Private Sub SCAN_00C9_latin_capital_letter_e_with_acute_Click()
    fctOtherLang "00C9", fctGetFontName
End Sub

Private Sub SCAN_00CD_latin_capital_letter_i_with_acute_Click()
    fctOtherLang "00CD", fctGetFontName
End Sub

Private Sub SCAN_00D0_latin_capital_letter_eth_Click()
    fctOtherLang "00D0", fctGetFontName
End Sub

Private Sub SCAN_00D3_latin_capital_letter_o_with_acute_Click()
    fctOtherLang "00D3", fctGetFontName
End Sub

Private Sub SCAN_00D8_latin_capital_letter_o_with_stroke_Click()
    fctOtherLang "00D8", fctGetFontName
End Sub

Private Sub SCAN_00DA_latin_capital_letter_u_with_acute_Click()
    fctOtherLang "00DA", fctGetFontName
End Sub

Private Sub SCAN_00DD_latin_capital_letter_y_with_acute_Click()
    fctOtherLang "00DD", fctGetFontName
End Sub

Private Sub SCAN_00DE_latin_capital_letter_thorn_Click()
    fctOtherLang "00DE", fctGetFontName
End Sub

Private Sub CZ_00E1_latin_small_letter_a_with_acute_Click()
    fctOtherLang "00E1", fctGetFontName
End Sub

Private Sub CZ_010D_latin_small_letter_c_with_caron_Click()
    fctOtherLang "010D", fctGetFontName
End Sub

Private Sub CZ_010F_latin_small_letter_d_with_caron_Click()
    fctOtherLang "010F", fctGetFontName
End Sub

Private Sub CZ_00E9_latin_small_letter_e_with_acute_Click()
    fctOtherLang "00E9", fctGetFontName
End Sub

Private Sub CZ_011B_latin_small_letter_e_with_caron_Click()
    fctOtherLang "011B", fctGetFontName
End Sub

Private Sub CZ_00ED_latin_small_letter_i_with_acute_Click()
    fctOtherLang "00ED", fctGetFontName
End Sub

Private Sub CZ_0148_latin_small_letter_n_with_caron_Click()
    fctOtherLang "0148", fctGetFontName
End Sub

Private Sub CZ_00F3_latin_small_letter_o_with_acute_Click()
    fctOtherLang "00F3", fctGetFontName
End Sub

Private Sub CZ_0159_latin_small_letter_r_with_caron_Click()
    fctOtherLang "0159", fctGetFontName
End Sub

Private Sub CZ_0161_latin_small_letter_s_with_caron_Click()
    fctOtherLang "0161", fctGetFontName
End Sub

Private Sub CZ_0165_latin_small_letter_t_with_caron_Click()
    fctOtherLang "0165", fctGetFontName
End Sub

Private Sub CZ_00FA_latin_small_letter_u_with_acute_Click()
    fctOtherLang "00FA", fctGetFontName
End Sub

Private Sub CZ_016F_latin_small_letter_u_with_ring_above_Click()
    fctOtherLang "016F", fctGetFontName
End Sub

Private Sub CZ_00FD_latin_small_letter_y_with_acute_Click()
    fctOtherLang "00FD", fctGetFontName
End Sub

Private Sub CZ_017E_latin_small_letter_z_with_caron_Click()
    fctOtherLang "017E", fctGetFontName
End Sub

Private Sub CZ_00C1_latin_capital_letter_a_with_acute_Click()
    fctOtherLang "00C1", fctGetFontName
End Sub

Private Sub CZ_010C_latin_capital_letter_c_with_caron_Click()
    fctOtherLang "010C", fctGetFontName
End Sub

Private Sub CZ_010E_latin_capital_letter_d_with_caron_Click()
    fctOtherLang "010E", fctGetFontName
End Sub

Private Sub CZ_00C9_latin_capital_letter_e_with_acute_Click()
    fctOtherLang "00C9", fctGetFontName
End Sub

Private Sub CZ_011A_latin_capital_letter_e_with_caron_Click()
    fctOtherLang "011A", fctGetFontName
End Sub

Private Sub CZ_00CD_latin_capital_letter_i_with_acute_Click()
    fctOtherLang "00CD", fctGetFontName
End Sub

Private Sub CZ_0147_latin_capital_letter_n_with_caron_Click()
    fctOtherLang "0147", fctGetFontName
End Sub

Private Sub CZ_00D3_latin_capital_letter_o_with_acute_Click()
    fctOtherLang "00D3", fctGetFontName
End Sub

Private Sub CZ_0158_latin_capital_letter_r_with_caron_Click()
    fctOtherLang "0158", fctGetFontName
End Sub

Private Sub CZ_0160_latin_capital_letter_s_with_caron_Click()
    fctOtherLang "0160", fctGetFontName
End Sub

Private Sub CZ_0164_latin_capital_letter_t_with_caron_Click()
    fctOtherLang "0164", fctGetFontName
End Sub

Private Sub CZ_00DA_latin_capital_letter_u_with_acute_Click()
    fctOtherLang "00DA", fctGetFontName
End Sub

Private Sub CZ_016E_latin_capital_letter_u_with_ring_above_Click()
    fctOtherLang "016E", fctGetFontName
End Sub

Private Sub CZ_00DD_latin_capital_letter_y_with_acute_Click()
    fctOtherLang "00DD", fctGetFontName
End Sub

Private Sub CZ_017D_latin_capital_letter_z_with_caron_Click()
    fctOtherLang "017D", fctGetFontName
End Sub

Private Sub RUS_0430_cyrillic_small_letter_a_Click()
    fctOtherLang "0430", fctGetFontName
End Sub

Private Sub RUS_0431_cyrillic_small_letter_be_Click()
    fctOtherLang "0431", fctGetFontName
End Sub

Private Sub RUS_0432_cyrillic_small_letter_ve_Click()
    fctOtherLang "0432", fctGetFontName
End Sub

Private Sub RUS_0433_cyrillic_small_letter_ghe_Click()
    fctOtherLang "0433", fctGetFontName
End Sub

Private Sub RUS_0434_cyrillic_small_letter_de_Click()
    fctOtherLang "0434", fctGetFontName
End Sub

Private Sub RUS_0435_cyrillic_small_letter_ie_Click()
    fctOtherLang "0435", fctGetFontName
End Sub

Private Sub RUS_0451_cyrillic_small_letter_io_Click()
    fctOtherLang "0451", fctGetFontName
End Sub

Private Sub RUS_0436_cyrillic_small_letter_zhe_Click()
    fctOtherLang "0436", fctGetFontName
End Sub

Private Sub RUS_0437_cyrillic_small_letter_ze_Click()
    fctOtherLang "0437", fctGetFontName
End Sub

Private Sub RUS_0438_cyrillic_small_letter_i_Click()
    fctOtherLang "0438", fctGetFontName
End Sub

Private Sub RUS_0439_cyrillic_small_letter_short_i_Click()
    fctOtherLang "0439", fctGetFontName
End Sub

Private Sub RUS_043A_cyrillic_small_letter_ka_Click()
    fctOtherLang "043A", fctGetFontName
End Sub

Private Sub RUS_043B_cyrillic_small_letter_el_Click()
    fctOtherLang "043B", fctGetFontName
End Sub

Private Sub RUS_043C_cyrillic_small_letter_em_Click()
    fctOtherLang "043C", fctGetFontName
End Sub

Private Sub RUS_043D_cyrillic_small_letter_en_Click()
    fctOtherLang "043D", fctGetFontName
End Sub

Private Sub RUS_043E_cyrillic_small_letter_o_Click()
    fctOtherLang "043E", fctGetFontName
End Sub

Private Sub RUS_043F_cyrillic_small_letter_pe_Click()
    fctOtherLang "043F", fctGetFontName
End Sub

Private Sub RUS_0440_cyrillic_small_letter_er_Click()
    fctOtherLang "0440", fctGetFontName
End Sub

Private Sub RUS_0441_cyrillic_small_letter_es_Click()
    fctOtherLang "0441", fctGetFontName
End Sub

Private Sub RUS_0442_cyrillic_small_letter_te_Click()
    fctOtherLang "0442", fctGetFontName
End Sub

Private Sub RUS_0443_cyrillic_small_letter_u_Click()
    fctOtherLang "0443", fctGetFontName
End Sub

Private Sub RUS_0444_cyrillic_small_letter_ef_Click()
    fctOtherLang "0444", fctGetFontName
End Sub

Private Sub RUS_0445_cyrillic_small_letter_ha_Click()
    fctOtherLang "0445", fctGetFontName
End Sub

Private Sub RUS_0446_cyrillic_small_letter_tse_Click()
    fctOtherLang "0446", fctGetFontName
End Sub

Private Sub RUS_0447_cyrillic_small_letter_che_Click()
    fctOtherLang "0447", fctGetFontName
End Sub

Private Sub RUS_0448_cyrillic_small_letter_sha_Click()
    fctOtherLang "0448", fctGetFontName
End Sub

Private Sub RUS_0449_cyrillic_small_letter_shcha_Click()
    fctOtherLang "0449", fctGetFontName
End Sub

Private Sub RUS_044A_cyrillic_small_letter_hard_sign_Click()
    fctOtherLang "044A", fctGetFontName
End Sub

Private Sub RUS_044B_cyrillic_small_letter_yeru_Click()
    fctOtherLang "044B", fctGetFontName
End Sub

Private Sub RUS_044C_cyrillic_small_letter_soft_sign_Click()
    fctOtherLang "044C", fctGetFontName
End Sub

Private Sub RUS_044D_cyrillic_small_letter_e_Click()
    fctOtherLang "044D", fctGetFontName
End Sub

Private Sub RUS_044E_cyrillic_small_letter_yu_Click()
    fctOtherLang "044E", fctGetFontName
End Sub

Private Sub RUS_044F_cyrillic_small_letter_ya_Click()
    fctOtherLang "044F", fctGetFontName
End Sub

Private Sub RUS_0410_cyrillic_capital_letter_a_Click()
    fctOtherLang "0410", fctGetFontName
End Sub

Private Sub RUS_0411_cyrillic_capital_letter_be_Click()
    fctOtherLang "0411", fctGetFontName
End Sub

Private Sub RUS_0412_cyrillic_capital_letter_ve_Click()
    fctOtherLang "0412", fctGetFontName
End Sub

Private Sub RUS_0413_cyrillic_capital_letter_ghe_Click()
    fctOtherLang "0413", fctGetFontName
End Sub

Private Sub RUS_0414_cyrillic_capital_letter_de_Click()
    fctOtherLang "0414", fctGetFontName
End Sub

Private Sub RUS_0415_cyrillic_capital_letter_ie_Click()
    fctOtherLang "0415", fctGetFontName
End Sub

Private Sub RUS_0401_cyrillic_capital_letter_io_Click()
    fctOtherLang "0401", fctGetFontName
End Sub

Private Sub RUS_0416_cyrillic_capital_letter_zhe_Click()
    fctOtherLang "0416", fctGetFontName
End Sub

Private Sub RUS_0417_cyrillic_capital_letter_ze_Click()
    fctOtherLang "0417", fctGetFontName
End Sub

Private Sub RUS_0418_cyrillic_capital_letter_i_Click()
    fctOtherLang "0418", fctGetFontName
End Sub

Private Sub RUS_0419_cyrillic_capital_letter_short_i_Click()
    fctOtherLang "0419", fctGetFontName
End Sub

Private Sub RUS_041A_cyrillic_capital_letter_ka_Click()
    fctOtherLang "041A", fctGetFontName
End Sub

Private Sub RUS_041B_cyrillic_capital_letter_el_Click()
    fctOtherLang "041B", fctGetFontName
End Sub

Private Sub RUS_041C_cyrillic_capital_letter_em_Click()
    fctOtherLang "041C", fctGetFontName
End Sub

Private Sub RUS_041D_cyrillic_capital_letter_en_Click()
    fctOtherLang "041D", fctGetFontName
End Sub

Private Sub RUS_041E_cyrillic_capital_letter_o_Click()
    fctOtherLang "041E", fctGetFontName
End Sub

Private Sub RUS_041F_cyrillic_capital_letter_pe_Click()
    fctOtherLang "041F", fctGetFontName
End Sub

Private Sub RUS_0420_cyrillic_capital_letter_er_Click()
    fctOtherLang "0420", fctGetFontName
End Sub

Private Sub RUS_0421_cyrillic_capital_letter_es_Click()
    fctOtherLang "0421", fctGetFontName
End Sub

Private Sub RUS_0422_cyrillic_capital_letter_te_Click()
    fctOtherLang "0422", fctGetFontName
End Sub

Private Sub RUS_0423_cyrillic_capital_letter_u_Click()
    fctOtherLang "0423", fctGetFontName
End Sub

Private Sub RUS_0424_cyrillic_capital_letter_ef_Click()
    fctOtherLang "0424", fctGetFontName
End Sub

Private Sub RUS_0425_cyrillic_capital_letter_ha_Click()
    fctOtherLang "0425", fctGetFontName
End Sub

Private Sub RUS_0426_cyrillic_capital_letter_tse_Click()
    fctOtherLang "0426", fctGetFontName
End Sub

Private Sub RUS_0427_cyrillic_capital_letter_che_Click()
    fctOtherLang "0427", fctGetFontName
End Sub

Private Sub RUS_0428_cyrillic_capital_letter_sha_Click()
    fctOtherLang "0428", fctGetFontName
End Sub

Private Sub RUS_0429_cyrillic_capital_letter_shcha_Click()
    fctOtherLang "0429", fctGetFontName
End Sub

Private Sub RUS_042A_cyrillic_capital_letter_hard_sign_Click()
    fctOtherLang "042A", fctGetFontName
End Sub

Private Sub RUS_042B_cyrillic_capital_letter_yeru_Click()
    fctOtherLang "042B", fctGetFontName
End Sub

Private Sub RUS_042C_cyrillic_capital_letter_soft_sign_Click()
    fctOtherLang "042C", fctGetFontName
End Sub

Private Sub RUS_042D_cyrillic_capital_letter_e_Click()
    fctOtherLang "042D", fctGetFontName
End Sub

Private Sub RUS_042E_cyrillic_capital_letter_yu_Click()
    fctOtherLang "042E", fctGetFontName
End Sub

Private Sub RUS_042F_cyrillic_capital_letter_ya_Click()
    fctOtherLang "042F", fctGetFontName
End Sub

Private Sub PL_0105_latin_small_letter_a_with_ogonek_Click()
    fctOtherLang "0105", fctGetFontName
End Sub

Private Sub PL_0107_latin_small_letter_c_with_acute_Click()
    fctOtherLang "0107", fctGetFontName
End Sub

Private Sub PL_0119_latin_small_letter_e_with_ogonek_Click()
    fctOtherLang "0119", fctGetFontName
End Sub

Private Sub PL_0142_latin_small_letter_l_with_stroke_Click()
    fctOtherLang "0142", fctGetFontName
End Sub

Private Sub PL_00F3_latin_small_letter_o_with_acute_Click()
    fctOtherLang "00F3", fctGetFontName
End Sub

Private Sub PL_015B_latin_small_letter_s_with_acute_Click()
    fctOtherLang "015B", fctGetFontName
End Sub

Private Sub PL_017A_latin_small_letter_z_with_acute_Click()
    fctOtherLang "017A", fctGetFontName
End Sub

Private Sub PL_017C_latin_small_letter_z_with_dot_above_Click()
    fctOtherLang "017C", fctGetFontName
End Sub

Private Sub PL_0104_latin_capital_letter_a_with_ogonek_Click()
    fctOtherLang "0104", fctGetFontName
End Sub

Private Sub PL_0106_latin_capital_letter_c_with_acute_Click()
    fctOtherLang "0106", fctGetFontName
End Sub

Private Sub PL_0118_latin_capital_letter_e_with_ogonek_Click()
    fctOtherLang "0118", fctGetFontName
End Sub

Private Sub PL_0141_latin_capital_letter_l_with_stroke_Click()
    fctOtherLang "0141", fctGetFontName
End Sub

Private Sub PL_00D3_latin_capital_letter_o_with_acute_Click()
    fctOtherLang "00D3", fctGetFontName
End Sub

Private Sub PL_015A_latin_capital_letter_s_with_acute_Click()
    fctOtherLang "015A", fctGetFontName
End Sub

Private Sub PL_0179_latin_capital_letter_z_with_acute_Click()
    fctOtherLang "0179", fctGetFontName
End Sub

Private Sub PL_017B_latin_capital_letter_z_with_dot_above_Click()
    fctOtherLang "017B", fctGetFontName
End Sub

Private Sub SL_00E1_latin_small_letter_a_with_acute_Click()
    fctOtherLang "00E1", fctGetFontName
End Sub

Private Sub SL_00E4_latin_small_letter_a_with_diaeresis_Click()
    fctOtherLang "00E4", fctGetFontName
End Sub

Private Sub SL_010D_latin_small_letter_c_with_caron_Click()
    fctOtherLang "010D", fctGetFontName
End Sub

Private Sub SL_010F_latin_small_letter_d_with_caron_Click()
    fctOtherLang "010F", fctGetFontName
End Sub

Private Sub SL_00E9_latin_small_letter_e_with_acute_Click()
    fctOtherLang "00E9", fctGetFontName
End Sub

Private Sub SL_00ED_latin_small_letter_i_with_acute_Click()
    fctOtherLang "00ED", fctGetFontName
End Sub

Private Sub SL_013A_latin_small_letter_l_with_acute_Click()
    fctOtherLang "013A", fctGetFontName
End Sub

Private Sub SL_013E_latin_small_letter_l_with_caron_Click()
    fctOtherLang "013E", fctGetFontName
End Sub

Private Sub SL_0148_latin_small_letter_n_with_caron_Click()
    fctOtherLang "0148", fctGetFontName
End Sub

Private Sub SL_00F3_latin_small_letter_o_with_acute_Click()
    fctOtherLang "00F3", fctGetFontName
End Sub

Private Sub SL_00F4_latin_small_letter_o_with_circumflex_Click()
    fctOtherLang "00F4", fctGetFontName
End Sub

Private Sub SL_0155_latin_small_letter_r_with_acute_Click()
    fctOtherLang "0155", fctGetFontName
End Sub

Private Sub SL_0161_latin_small_letter_s_with_caron_Click()
    fctOtherLang "0161", fctGetFontName
End Sub

Private Sub SL_0165_latin_small_letter_t_with_caron_Click()
    fctOtherLang "0165", fctGetFontName
End Sub

Private Sub SL_00FA_latin_small_letter_u_with_acute_Click()
    fctOtherLang "00FA", fctGetFontName
End Sub

Private Sub SL_00FD_latin_small_letter_y_with_acute_Click()
    fctOtherLang "00FD", fctGetFontName
End Sub

Private Sub SL_017E_latin_small_letter_z_with_caron_Click()
    fctOtherLang "017E", fctGetFontName
End Sub

Private Sub fctOtherLang(strOtherLangID As String, fontName As String)
    Selection.Collapse wdCollapseStart
    Selection.InsertSymbol CharacterNumber:=CLng("&H" & strOtherLangID), Unicode:=True, Font:=fontName
End Sub

Private Sub UserForm_Initialize()

    Caption = fctGetFormCaption(Format(112, "00"))
    
    fctSetAlternativeLabelFont Me, "Cambria Math", "Cambria"
    
    frmOtherLang.lblScandinavian = fctGetFormCaption(Format(113, "00"))
    frmOtherLang.lblCzech = fctGetFormCaption(Format(114, "00"))
    frmOtherLang.lblRussian = fctGetFormCaption(Format(115, "00"))
    frmOtherLang.lblPolish = fctGetFormCaption(Format(116, "00"))
    frmOtherLang.lblSlovak = fctGetFormCaption(Format(117, "00"))
    
    lbl_SCAN_00E1_latin_small_letter_a_with_acute.Caption = ChrW(225)
    lbl_SCAN_00E5_latin_small_letter_a_with_ring_above.Caption = ChrW(229)
    lbl_SCAN_00E6_latin_small_letter_ae.Caption = ChrW(230)
    lbl_SCAN_00E9_latin_small_letter_e_with_acute.Caption = ChrW(233)
    lbl_SCAN_00ED_latin_small_letter_i_with_acute.Caption = ChrW(237)
    lbl_SCAN_00F0_latin_small_letter_eth.Caption = ChrW(240)
    lbl_SCAN_00F3_latin_small_letter_o_with_acute.Caption = ChrW(243)
    lbl_SCAN_00F8_latin_small_letter_o_with_stroke.Caption = ChrW(248)
    lbl_SCAN_00FA_latin_small_letter_u_with_acute.Caption = ChrW(250)
    lbl_SCAN_00FD_latin_small_letter_y_with_acute.Caption = ChrW(253)
    lbl_SCAN_00FE_latin_small_letter_thorn.Caption = ChrW(254)
    lbl_SCAN_00C1_latin_capital_letter_a_with_acute.Caption = ChrW(193)
    lbl_SCAN_00C5_latin_capital_letter_a_with_ring_above.Caption = ChrW(197)
    lbl_SCAN_00C6_latin_capital_letter_ae.Caption = ChrW(198)
    lbl_SCAN_00C9_latin_capital_letter_e_with_acute.Caption = ChrW(201)
    lbl_SCAN_00CD_latin_capital_letter_i_with_acute.Caption = ChrW(205)
    lbl_SCAN_00D0_latin_capital_letter_eth.Caption = ChrW(208)
    lbl_SCAN_00D3_latin_capital_letter_o_with_acute.Caption = ChrW(211)
    lbl_SCAN_00D8_latin_capital_letter_o_with_stroke.Caption = ChrW(216)
    lbl_SCAN_00DA_latin_capital_letter_u_with_acute.Caption = ChrW(218)
    lbl_SCAN_00DD_latin_capital_letter_y_with_acute.Caption = ChrW(221)
    lbl_SCAN_00DE_latin_capital_letter_thorn.Caption = ChrW(222)
    lbl_CZ_00E1_latin_small_letter_a_with_acute.Caption = ChrW(225)
    lbl_CZ_010D_latin_small_letter_c_with_caron.Caption = ChrW(269)
    lbl_CZ_010F_latin_small_letter_d_with_caron.Caption = ChrW(271)
    lbl_CZ_00E9_latin_small_letter_e_with_acute.Caption = ChrW(233)
    lbl_CZ_011B_latin_small_letter_e_with_caron.Caption = ChrW(283)
    lbl_CZ_00ED_latin_small_letter_i_with_acute.Caption = ChrW(237)
    lbl_CZ_0148_latin_small_letter_n_with_caron.Caption = ChrW(328)
    lbl_CZ_00F3_latin_small_letter_o_with_acute.Caption = ChrW(243)
    lbl_CZ_0159_latin_small_letter_r_with_caron.Caption = ChrW(345)
    lbl_CZ_0161_latin_small_letter_s_with_caron.Caption = ChrW(353)
    lbl_CZ_0165_latin_small_letter_t_with_caron.Caption = ChrW(357)
    lbl_CZ_00FA_latin_small_letter_u_with_acute.Caption = ChrW(250)
    lbl_CZ_016F_latin_small_letter_u_with_ring_above.Caption = ChrW(367)
    lbl_CZ_00FD_latin_small_letter_y_with_acute.Caption = ChrW(253)
    lbl_CZ_017E_latin_small_letter_z_with_caron.Caption = ChrW(382)
    lbl_CZ_00C1_latin_capital_letter_a_with_acute.Caption = ChrW(193)
    lbl_CZ_010C_latin_capital_letter_c_with_caron.Caption = ChrW(268)
    lbl_CZ_010E_latin_capital_letter_d_with_caron.Caption = ChrW(270)
    lbl_CZ_00C9_latin_capital_letter_e_with_acute.Caption = ChrW(201)
    lbl_CZ_011A_latin_capital_letter_e_with_caron.Caption = ChrW(282)
    lbl_CZ_00CD_latin_capital_letter_i_with_acute.Caption = ChrW(205)
    lbl_CZ_0147_latin_capital_letter_n_with_caron.Caption = ChrW(327)
    lbl_CZ_00D3_latin_capital_letter_o_with_acute.Caption = ChrW(211)
    lbl_CZ_0158_latin_capital_letter_r_with_caron.Caption = ChrW(344)
    lbl_CZ_0160_latin_capital_letter_s_with_caron.Caption = ChrW(352)
    lbl_CZ_0164_latin_capital_letter_t_with_caron.Caption = ChrW(356)
    lbl_CZ_00DA_latin_capital_letter_u_with_acute.Caption = ChrW(218)
    lbl_CZ_016E_latin_capital_letter_u_with_ring_above.Caption = ChrW(366)
    lbl_CZ_00DD_latin_capital_letter_y_with_acute.Caption = ChrW(221)
    lbl_CZ_017D_latin_capital_letter_z_with_caron.Caption = ChrW(381)
    lbl_RUS_0430_cyrillic_small_letter_a.Caption = ChrW(1072)
    lbl_RUS_0431_cyrillic_small_letter_be.Caption = ChrW(1073)
    lbl_RUS_0432_cyrillic_small_letter_ve.Caption = ChrW(1074)
    lbl_RUS_0433_cyrillic_small_letter_ghe.Caption = ChrW(1075)
    lbl_RUS_0434_cyrillic_small_letter_de.Caption = ChrW(1076)
    lbl_RUS_0435_cyrillic_small_letter_ie.Caption = ChrW(1077)
    lbl_RUS_0451_cyrillic_small_letter_io.Caption = ChrW(1105)
    lbl_RUS_0436_cyrillic_small_letter_zhe.Caption = ChrW(1078)
    lbl_RUS_0437_cyrillic_small_letter_ze.Caption = ChrW(1079)
    lbl_RUS_0438_cyrillic_small_letter_i.Caption = ChrW(1080)
    lbl_RUS_0439_cyrillic_small_letter_short_i.Caption = ChrW(1081)
    lbl_RUS_043A_cyrillic_small_letter_ka.Caption = ChrW(1082)
    lbl_RUS_043B_cyrillic_small_letter_el.Caption = ChrW(1083)
    lbl_RUS_043C_cyrillic_small_letter_em.Caption = ChrW(1084)
    lbl_RUS_043D_cyrillic_small_letter_en.Caption = ChrW(1085)
    lbl_RUS_043E_cyrillic_small_letter_o.Caption = ChrW(1086)
    lbl_RUS_043F_cyrillic_small_letter_pe.Caption = ChrW(1087)
    lbl_RUS_0440_cyrillic_small_letter_er.Caption = ChrW(1088)
    lbl_RUS_0441_cyrillic_small_letter_es.Caption = ChrW(1089)
    lbl_RUS_0442_cyrillic_small_letter_te.Caption = ChrW(1090)
    lbl_RUS_0443_cyrillic_small_letter_u.Caption = ChrW(1091)
    lbl_RUS_0444_cyrillic_small_letter_ef.Caption = ChrW(1092)
    lbl_RUS_0445_cyrillic_small_letter_ha.Caption = ChrW(1093)
    lbl_RUS_0446_cyrillic_small_letter_tse.Caption = ChrW(1094)
    lbl_RUS_0447_cyrillic_small_letter_che.Caption = ChrW(1095)
    lbl_RUS_0448_cyrillic_small_letter_sha.Caption = ChrW(1096)
    lbl_RUS_0449_cyrillic_small_letter_shcha.Caption = ChrW(1097)
    lbl_RUS_044A_cyrillic_small_letter_hard_sign.Caption = ChrW(1098)
    lbl_RUS_044B_cyrillic_small_letter_yeru.Caption = ChrW(1099)
    lbl_RUS_044C_cyrillic_small_letter_soft_sign.Caption = ChrW(1100)
    lbl_RUS_044D_cyrillic_small_letter_e.Caption = ChrW(1101)
    lbl_RUS_044E_cyrillic_small_letter_yu.Caption = ChrW(1102)
    lbl_RUS_044F_cyrillic_small_letter_ya.Caption = ChrW(1103)
    lbl_RUS_0410_cyrillic_capital_letter_a.Caption = ChrW(1040)
    lbl_RUS_0411_cyrillic_capital_letter_be.Caption = ChrW(1041)
    lbl_RUS_0412_cyrillic_capital_letter_ve.Caption = ChrW(1042)
    lbl_RUS_0413_cyrillic_capital_letter_ghe.Caption = ChrW(1043)
    lbl_RUS_0414_cyrillic_capital_letter_de.Caption = ChrW(1044)
    lbl_RUS_0415_cyrillic_capital_letter_ie.Caption = ChrW(1045)
    lbl_RUS_0401_cyrillic_capital_letter_io.Caption = ChrW(1025)
    lbl_RUS_0416_cyrillic_capital_letter_zhe.Caption = ChrW(1046)
    lbl_RUS_0417_cyrillic_capital_letter_ze.Caption = ChrW(1047)
    lbl_RUS_0418_cyrillic_capital_letter_i.Caption = ChrW(1048)
    lbl_RUS_0419_cyrillic_capital_letter_short_i.Caption = ChrW(1049)
    lbl_RUS_041A_cyrillic_capital_letter_ka.Caption = ChrW(1050)
    lbl_RUS_041B_cyrillic_capital_letter_el.Caption = ChrW(1051)
    lbl_RUS_041C_cyrillic_capital_letter_em.Caption = ChrW(1052)
    lbl_RUS_041D_cyrillic_capital_letter_en.Caption = ChrW(1053)
    lbl_RUS_041E_cyrillic_capital_letter_o.Caption = ChrW(1054)
    lbl_RUS_041F_cyrillic_capital_letter_pe.Caption = ChrW(1055)
    lbl_RUS_0420_cyrillic_capital_letter_er.Caption = ChrW(1056)
    lbl_RUS_0421_cyrillic_capital_letter_es.Caption = ChrW(1057)
    lbl_RUS_0422_cyrillic_capital_letter_te.Caption = ChrW(1058)
    lbl_RUS_0423_cyrillic_capital_letter_u.Caption = ChrW(1059)
    lbl_RUS_0424_cyrillic_capital_letter_ef.Caption = ChrW(1060)
    lbl_RUS_0425_cyrillic_capital_letter_ha.Caption = ChrW(1061)
    lbl_RUS_0426_cyrillic_capital_letter_tse.Caption = ChrW(1062)
    lbl_RUS_0427_cyrillic_capital_letter_che.Caption = ChrW(1063)
    lbl_RUS_0428_cyrillic_capital_letter_sha.Caption = ChrW(1064)
    lbl_RUS_0429_cyrillic_capital_letter_shcha.Caption = ChrW(1065)
    lbl_RUS_042A_cyrillic_capital_letter_hard_sign.Caption = ChrW(1066)
    lbl_RUS_042B_cyrillic_capital_letter_yeru.Caption = ChrW(1067)
    lbl_RUS_042C_cyrillic_capital_letter_soft_sign.Caption = ChrW(1068)
    lbl_RUS_042D_cyrillic_capital_letter_e.Caption = ChrW(1069)
    lbl_RUS_042E_cyrillic_capital_letter_yu.Caption = ChrW(1070)
    lbl_RUS_042F_cyrillic_capital_letter_ya.Caption = ChrW(1071)
    lbl_PL_0105_latin_small_letter_a_with_ogonek.Caption = ChrW(261)
    lbl_PL_0107_latin_small_letter_c_with_acute.Caption = ChrW(263)
    lbl_PL_0119_latin_small_letter_e_with_ogonek.Caption = ChrW(281)
    lbl_PL_0142_latin_small_letter_l_with_stroke.Caption = ChrW(322)
    lbl_PL_00F3_latin_small_letter_o_with_acute.Caption = ChrW(243)
    lbl_PL_015B_latin_small_letter_s_with_acute.Caption = ChrW(347)
    lbl_PL_017A_latin_small_letter_z_with_acute.Caption = ChrW(378)
    lbl_PL_017C_latin_small_letter_z_with_dot_above.Caption = ChrW(380)
    lbl_PL_0104_latin_capital_letter_a_with_ogonek.Caption = ChrW(260)
    lbl_PL_0106_latin_capital_letter_c_with_acute.Caption = ChrW(262)
    lbl_PL_0118_latin_capital_letter_e_with_ogonek.Caption = ChrW(280)
    lbl_PL_0141_latin_capital_letter_l_with_stroke.Caption = ChrW(321)
    lbl_PL_00D3_latin_capital_letter_o_with_acute.Caption = ChrW(211)
    lbl_PL_015A_latin_capital_letter_s_with_acute.Caption = ChrW(346)
    lbl_PL_0179_latin_capital_letter_z_with_acute.Caption = ChrW(377)
    lbl_PL_017B_latin_capital_letter_z_with_dot_above.Caption = ChrW(379)
    lbl_SL_00E1_latin_small_letter_a_with_acute.Caption = ChrW(225)
    lbl_SL_00E4_latin_small_letter_a_with_diaeresis.Caption = ChrW(228)
    lbl_SL_010D_latin_small_letter_c_with_caron.Caption = ChrW(269)
    lbl_SL_010F_latin_small_letter_d_with_caron.Caption = ChrW(271)
    lbl_SL_00E9_latin_small_letter_e_with_acute.Caption = ChrW(233)
    lbl_SL_00ED_latin_small_letter_i_with_acute.Caption = ChrW(237)
    lbl_SL_013A_latin_small_letter_l_with_acute.Caption = ChrW(314)
    lbl_SL_013E_latin_small_letter_l_with_caron.Caption = ChrW(318)
    lbl_SL_0148_latin_small_letter_n_with_caron.Caption = ChrW(328)
    lbl_SL_00F3_latin_small_letter_o_with_acute.Caption = ChrW(243)
    lbl_SL_00F4_latin_small_letter_o_with_circumflex.Caption = ChrW(244)
    lbl_SL_0155_latin_small_letter_r_with_acute.Caption = ChrW(341)
    lbl_SL_0161_latin_small_letter_s_with_caron.Caption = ChrW(353)
    lbl_SL_0165_latin_small_letter_t_with_caron.Caption = ChrW(357)
    lbl_SL_00FA_latin_small_letter_u_with_acute.Caption = ChrW(250)
    lbl_SL_00FD_latin_small_letter_y_with_acute.Caption = ChrW(253)
    lbl_SL_017E_latin_small_letter_z_with_caron.Caption = ChrW(382)
    
    fctSetZoom Me

End Sub

Attribute VB_Name = "frmSmartIndexGenerate"
Attribute VB_Base = "0{A66A6029-C60C-4621-98FA-DC792B16D9AF}{39DA6641-1BC7-439E-9631-1F2ECF64B8C6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnCloseDialog_Click()
    Unload Me
End Sub

Sub GenerateRefreshSmartIds()
    
    Dim objSmartIdEntry As SmartIdEntry
    Dim i As Long
    Dim arrSmartIdNum As Long
    Dim singleProgress As Double
    Dim arrSmartIdEntry() As SmartIdEntry
    Dim paragraphInfo As String
    Dim totalProgress As Double
    
    paragraphInfo = fctGetFormCaption("313")
    
    DoEvents
    
    Selection.Collapse wdCollapseStart
    Application.ScreenUpdating = False
    
    modSmartIndexGenerateRefreshSmartIds arrSmartIdEntry, ActiveDocument.Paragraphs(1), _
        modSmartIndexGetTable(ActiveDocument.Paragraphs(1)), "", "", 0, 0
    
    arrSmartIdNum = fctArrayCount(arrSmartIdEntry)
    lblProgressBarForeground.visible = True
    
    singleProgress = (lblProgressBarBackground.Width - 4.5) / (arrSmartIdNum + 1)
    lblProgressBarForeground.Width = 1

    For i = 0 To arrSmartIdNum
        Set objSmartIdEntry = arrSmartIdEntry(i)
        
        modSmartIndexInsertSmartIdField objSmartIdEntry
         
        totalProgress = totalProgress + singleProgress
        lblProgressBarForeground.Width = totalProgress
        
        lblSmartIndexCounter.Caption = Replace(Replace(paragraphInfo, "{x}", i), "{y}", arrSmartIdNum + 1) & _
            " [ " & CStr(CInt((lblProgressBarForeground.Width) / lblProgressBarBackground.Width * 100)) & "% ]"
            
        DoEvents
    Next
    
    lblSmartIndexCounter.Caption = _
        Replace(Replace(paragraphInfo, "{x}", arrSmartIdNum + 1), "{y}", arrSmartIdNum + 1) & " [ 100% ]"
    
    lblProgressBarForeground.Width = lblProgressBarBackground.Width

    Application.ScreenUpdating = True
   
End Sub

Private Sub UserForm_Activate()
    GenerateRefreshSmartIds
End Sub

Private Sub UserForm_Initialize()
    Caption = fctGetFormCaption("311")
    lblSmartIndexCounter.Caption = fctGetFormCaption("312")
End Sub


Attribute VB_Name = "frmSmartIndexInfo"
Attribute VB_Base = "0{C64C5CCE-E088-4A21-AD80-A223CF7EC874}{25CB9BF5-2DB4-421D-B697-80E940D913DC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub btnCloseDialog_Click()
    Unload Me
End Sub

Private Sub UserForm_Activate()
    txtSmartIndex.SelStart = 0
    txtSmartIndex.SelLength = Len(txtSmartIndex.Text)
    txtSmartIndex.Copy
End Sub
Attribute VB_Name = "frmStatistics"
Attribute VB_Base = "0{844C8BBA-40DD-449C-AC40-0D5CD9F10DA9}{910DEA1A-4621-4474-87BC-BB017C01036E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub btnCloseDialog_Click()
    Unload Me
End Sub

Private Sub UserForm_Initialize()

    Dim objToCheck As Object
    
    Set objToCheck = ActiveDocument
    If Selection.start <> Selection.End Then
       Set objToCheck = Selection.Range
    End If

    Caption = fctGetFormCaption(63)
    lblInfoCharCountA.Caption = fctGetFormCaption(60)
    lblInfoCharCountB.Caption = fctGetFormCaption(61)
    lblInfoIndexMarkCount.Caption = fctGetFormCaption(62)
    
    SetPrintHiddenTextOption True
    lblCharCountA.Caption = Format(GetCharacterCountA(objToCheck, _
        wdStatisticCharactersWithSpaces), "#,#;;0")
    
    SetPrintHiddenTextOption False
    lblCharCountB.Caption = Format(GetCharacterCountA(objToCheck, _
        wdStatisticCharactersWithSpaces), "#,#;;0")
    
    lblIndexMarkCount.Caption = Format(GetIndexMarkCount(objToCheck), "#,#;;0")
    SetPrintHiddenTextOption True
    
    lblDocVersion.Caption = fctWordDoc.CustomDocumentProperties("strVersion")
    lblDocVersionBasedOn.Caption = fctGetFormCaption(64) & " " & _
        fctWordDoc.CustomDocumentProperties("strVersionBasedOn") & AudMasterBuild
    
    fctSetZoom Me

End Sub

Private Function GetCharacterCountA(objToCheck As Object, statisticType As Long) As String
    If TypeName(objToCheck) = "Range" Then
        GetCharacterCountA = objToCheck.ComputeStatistics(statisticType)
    Else
        GetCharacterCountA = objToCheck.ComputeStatistics(wdStatisticCharactersWithSpaces, True)
    End If
End Function

Private Sub SetPrintHiddenTextOption(optionPrintHiddenText As Boolean)
    Options.PrintHiddenText = optionPrintHiddenText
    ActiveDocument.Bookmarks.Add("__AUD_temp_bm").Delete
End Sub

Private Function GetIndexMarkCount(objToCheck As Object) As Long
    Dim currentMode As Variant
    currentMode = fctSetTrackChangeModeShowMarkupHideDeleted
    If TypeName(objToCheck) = "Range" Then
        GetIndexMarkCount = GetIndexMarkCountInRange(objToCheck)
    Else
        GetIndexMarkCount = GetIndexMarkCountByDocument
    End If
    fctRestoreTrackChangeMode currentMode
End Function

Private Function GetIndexMarkCountByDocument() As Long
    Dim rngStory As Range
    GetIndexMarkCountByDocument = GetIndexMarkCountByShape
    For Each rngStory In ActiveDocument.StoryRanges
        If rngStory.storyType <> wdTextFrameStory Then
            GetIndexMarkCountByDocument = GetIndexMarkCountByDocument + _
                GetIndexMarkCountInRange(rngStory)
        End If
    Next
End Function

Private Function GetIndexMarkCountByShape() As Long
    GetIndexMarkCountByShape = _
        GetIndexMarkCountInShapes(ActiveDocument.Shapes) + _
        GetIndexMarkCountInShapes(ActiveDocument.Sections(1).Headers(wdHeaderFooterPrimary).Shapes)
End Function

Private Function GetIndexMarkCountInRange(objRange As Range) As Long
    Dim objField As Field
    For Each objField In objRange.Fields
        If objField.Type = wdFieldIndexEntry And Len(objField.Code.Text) > 0 Then
            GetIndexMarkCountInRange = GetIndexMarkCountInRange + 1
        End If
    Next
End Function

Private Function GetIndexMarkCountInShapes(objShapes As Shapes) As Long

    Dim objShape As Shape
    Dim objRange As Range
    Dim i As Long

    For i = 1 To objShapes.Count
        Set objShape = objShapes(i)
        Set objRange = Nothing
        On Error Resume Next
        Set objRange = objShape.TextFrame.TextRange
        On Error GoTo 0
        If Not objRange Is Nothing Then
            GetIndexMarkCountInShapes = GetIndexMarkCountInShapes + _
                GetIndexMarkCountInRange(objRange)
        End If
    Next
    
End Function

Attribute VB_Name = "frmStyleLimits"
Attribute VB_Base = "0{6584468D-C696-48B4-AC0C-D70A4C18B8B8}{26920FA0-E28F-4773-849E-A65C46191D35}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnActivate_Click()
    modToolsLockNonAudStyles
    ActiveDocument.RemoveLockedStyles
    ActiveDocument.Styles.Add("__AUD_temp_style", wdStyleTypeCharacter).Delete
    ActiveDocument.AutoFormatOverride = True
    ActiveDocument.LockTheme = False
    ActiveDocument.LockQuickStyleSet = False
    ActiveDocument.Protect Type:=wdNoProtection, EnforceStyleLock:=True, _
        Password:=STYLE_limits_pw, NoReset:=False

    CheckDocumentProtection
    ActiveDocument.Styles(wdStyleNormal).Font.Color = 16711935
    
    UpdateTablesOfFigures
    UpdateTablesOfContents
    UpdateIndexes
    
    modKeyReOrganizeLists
End Sub

Private Sub UpdateTablesOfFigures()
    Dim i As Integer
    
    For i = 1 To ActiveDocument.TablesOfFigures.Count
        ActiveDocument.TablesOfFigures(i).Update
    Next
End Sub

Private Sub UpdateTablesOfContents()
    Dim i As Integer
    
    For i = 1 To ActiveDocument.TablesOfContents.Count
        ActiveDocument.TablesOfContents(i).Update
    Next
End Sub

Private Sub UpdateIndexes()
    Dim i As Integer
    
    For i = 1 To ActiveDocument.Indexes.Count
        ActiveDocument.Indexes(i).Update
    Next
End Sub

Private Sub cmdCloseDialog_Click()
    Unload Me
End Sub

Private Sub btnProtectOff_Click()
    On Error Resume Next
        ActiveDocument.Unprotect Password:=STYLE_limits_pw
    On Error GoTo 0
    
    CheckDocumentProtection
    ActiveDocument.Styles(wdStyleNormal).Font.Color = -16777216
End Sub

Private Sub UserForm_Initialize()
    frmStyleLimits.Caption = fctGetFormCaption("130")
    grpActivateStyleLimits.Caption = fctGetFormCaption("131")
    lblActivate.Caption = fctGetFormCaption("132")
    lblAttention2.Caption = fctGetFormCaption("133")
    lblAttention3.Caption = fctGetFormCaption("134")
    btnActivate.Caption = fctGetFormCaption("135")
    grpDeactivateStyleLimits.Caption = fctGetFormCaption("136")
    lblDeactivate.Caption = fctGetFormCaption("137")
    btnProtectOff.Caption = fctGetFormCaption("138")
    
    CheckDocumentProtection
End Sub

Private Sub CheckDocumentProtection()
    If CommandBars.FindControl(ID:=113).Enabled Then
        SetControlStateOfFrame grpDeactivateStyleLimits, False
        SetControlStateOfFrame grpActivateStyleLimits, True
        grpActivateStyleLimits.SetFocus
    Else
        SetControlStateOfFrame grpDeactivateStyleLimits, True
        SetControlStateOfFrame grpActivateStyleLimits, False
        grpDeactivateStyleLimits.SetFocus
    End If
End Sub

Private Sub SetControlStateOfFrame(grpBox As MSForms.Frame, isEnabled As Boolean)
    Dim oCtrl As control
    For Each oCtrl In grpBox.Controls
        If Left(oCtrl.Name, 3) = "btn" Or Left(oCtrl.Name, 3) = "lbl" Or Left(oCtrl.Name, 3) = "grp" Then
            oCtrl.Enabled = isEnabled
        End If
    Next
    grpBox.Enabled = isEnabled
End Sub



Attribute VB_Name = "frmStyleLimitsPw"
Attribute VB_Base = "0{534F6058-6F63-4F7C-AC25-C9A433F89842}{D8420A68-7D93-4B6C-99EA-DC098E9C6A81}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub btnCancel_Click()
    Unload Me
End Sub

Private Sub btnOk_Click()
   
    If txtPassword.Text = STYLE_limits_pw Then
        Unload Me
        frmStyleLimits.Show
    Else
        MsgBox fctGetFormCaption("124"), vbCritical + vbOKOnly, fctGetFormCaption("125")
        txtPassword.SelStart = 0
        txtPassword.SelLength = txtPassword.TextLength
        txtPassword.SetFocus
    End If
End Sub

Private Sub UserForm_Initialize()
    frmStyleLimitsPw.Caption = fctGetFormCaption("120")
    lblPassword.Caption = fctGetFormCaption("121")
    btnCancel.Caption = fctGetFormCaption("122")
    btnOk.Caption = fctGetFormCaption("123")
    lblPwInfo.Caption = fctGetFormCaption("126")
End Sub
Attribute VB_Name = "frmTableGenerator"
Attribute VB_Base = "0{E8A3C050-7578-473D-8D6B-C963882569C1}{179FE881-55DC-4F3B-BA54-69357DD32089}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private wdTableCreator As String

Private Sub cmdExit_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()

Dim wdTbl As Word.Table
Dim wdRowsFirst As Word.Row
Dim wdRowsLast As Word.Row

Dim intHeadRowIndex As Integer

Dim lngRows As Long
Dim lngColumns As Long
Dim strTableHead As String
Dim strTableFootNote As String

lngRows = fctGetRows

If lngRows = 0 Then
    Exit Sub
End If

intHeadRowIndex = 1

If txtTableCaptionYesNo.Value = "yes" Then
    intHeadRowIndex = 2
End If

lngColumns = txtColumns.Value
strTableHead = chkboxTableHead.Value
strTableFootNote = chkboxTableFootNote.Value

On Error GoTo err_handler

If fctSelectionHasFollowingTable(Selection.Characters.Last) Then
    Selection.End = Selection.Characters.Last.start
End If

Set wdTbl = fctGetTable(fctGetRng, fctGetRows, lngColumns)
Set wdRowsFirst = wdTbl.rows.First
Set wdRowsLast = wdTbl.rows.Last

    With wdTbl
        .AllowAutoFit = True
        .PreferredWidthType = wdPreferredWidthPercent
        .PreferredWidth = 100
        .Style = fctWordDoc.Styles(txtTableStyle.Value)
        .Range.Style = fctWordDoc.Styles(AUD_bodytext)
        
        If txtTableCaptionYesNo.Value = "yes" Then
            wdRowsFirst.Range.Style = fctWordDoc.Styles(AUD_table_caption)
            wdRowsFirst.Cells.Merge
        End If
        
        If chkboxTableHead.Value = True Then
            With wdTbl
                .rows(intHeadRowIndex).Range.Style = fctWordDoc.Styles(AUD_table_head_01)
            End With
        End If
    
        If chkboxTableFootNote.Value = True Then
            wdRowsLast.Cells.Merge
            wdRowsLast.Range.Style = fctWordDoc.Styles(AUD_table_footnote)
        End If
    End With
    
    Call tables.modTableCaptionCreator(txtTableCaptionYesNo.Value, txtTableNr.Value)
    
    If txtTableCaptionYesNo.Value = "yes" Then
        wdRowsFirst.HeadingFormat = fctWordDoc.CustomDocumentProperties("bolRepeatTableCaptionHead")
    End If
    
    If chkboxTableHead.Value = True Then
        wdTbl.rows(intHeadRowIndex).HeadingFormat = fctWordDoc.CustomDocumentProperties("bolRepeatTableCaptionHead")
    End If
    
    Call InsertParaAfterTable(AUD_wanted_empty_para_after_word_table)
    
    Unload Me

err_handler:
Select Case Err.Number
    Case "5148": MsgBox fctGetErrorMsg(Format(30, "00"))
                 txtColumns.Text = "1"
                 txtColumns.SetFocus
    
End Select
    
End Sub

Function fctGetRows() As Long

Dim lngRows As Long
Dim lngColumns As Long

On Error Resume Next
lngRows = CLng(txtRows.Value)
lngColumns = CLng(txtColumns.Value)
On Error GoTo 0

    If lngRows <= 0 Or lngColumns <= 0 Then
        MsgBox (fctGetErrorMsg(Format(22, "00")))
        Exit Function
    End If

    If txtTableCaptionYesNo = "yes" Then
        lngRows = lngRows + 1
    End If
    
    If chkboxTableHead.Value = True Then
        lngRows = lngRows + 1
    End If
    
    If chkboxTableFootNote.Value = True Then
        lngRows = lngRows + 1
    End If
    

fctGetRows = lngRows

End Function

Private Sub spinRows_Change()
    txtRows.Value = spinRows.Value
End Sub

Private Sub spinColumns_Change()
    txtColumns.Value = spinColumns.Value
End Sub

Private Sub UserForm_Initialize()

    rows.Caption = fctGetFormCaption(Format(41, "00"))
    columns.Caption = fctGetFormCaption(Format(42, "00"))
    
    lblTableHead.Caption = fctGetFormCaption(Format(43, "00"))
    lblTableFootnote.Caption = fctGetFormCaption(Format(44, "00"))
    
    cmdOK.Caption = fctGetFormCaption(Format(15, "00"))
    cmdExit.Caption = fctGetFormCaption(Format(16, "00"))

    txtRows.Value = 1
    spinRows.Value = 1
    
    txtColumns.Value = 1
    spinColumns.Value = 1
    
    chkboxTableHead.Value = 1
    chkboxTableFootNote.Value = 0
    
    fctSetZoom Me
    
End Sub



Attribute VB_Name = "frmTableInfo"
Attribute VB_Base = "0{5CA28389-8BFF-4ABB-978C-A5C60A41D85D}{A2F6E7DA-3A72-4078-AE40-9E85876C0CB5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnCloseDialog_Click()
    Unload Me
End Sub

Private Sub UserForm_Activate()
    ShowTableInfo
End Sub

Private Sub ShowTableInfo()
    Dim tableInfo As Table
    Dim splitParts As Variant
    Dim boxTitleKey As String

    Dim myCommandBar As CommandBar
    Dim myCommandBarCtl As CommandBarControl
    
    Set myCommandBar = ActiveDocument.CommandBars("AUDCustom01")
    Set myCommandBarCtl = myCommandBar.Controls(10)

    Set tableInfo = Selection.tables(1)
    lblTableStyle.Caption = tableInfo.Style.NameLocal

    boxTitleKey = modBoxGetBoxTitleKey(lblTableStyle.Caption)
    If boxTitleKey <> "" Then

        splitParts = Split(fctWordDoc.CustomDocumentProperties(boxTitleKey).Value, ";")
        
        lblBoxName.Caption = splitParts(2)

        If (splitParts(0) = "0") Then
            lblBoxName.Caption = fctGetFormCaption("171")
        End If

        lblBackground.BorderColor = tableInfo.Style.Table.Borders(wdBorderTop).Color
    Else
        lblTableStyleNoBox.Caption = tableInfo.Style.NameLocal
        lblTableStyleNoBox.visible = True
        lblBoxName.visible = False
        lblTableStyle.visible = False
    End If
    
    fctSetZoom Me

End Sub

Private Sub UserForm_Initialize()
    Me.Caption = fctGetFormCaption("170")
End Sub
Attribute VB_Name = "frmTableRestore"
Attribute VB_Base = "0{A18FBA2D-687D-492C-9480-47EF5550A8F0}{AC607684-A622-4434-9046-83E682A51637}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public arrAllTables As Variant

Public Sub InitTableRestore()

    Dim btnTopPrev As Single

    ' OK/Pr|fffd|fen-Buttons inaktiv setzen
    cmdClose.Enabled = False
    cmdCheck.Enabled = False
    
    ' Formular zur|fffd|cksetzen
    ResetUserForm
    
    btnTopPrev = cmdClose.Top

    Dim arrTables As Variant

    ' Alle Tabellen des Dokuments ermitteln
    arrTables = fctGetDocumentTables
    arrAllTables = arrTables
    
    ' Tabellenformate wiederherstellen
    On Error Resume Next
    modRestoreTableStyles arrTables

    If CLng(frmTableRestore.lbl04b.Caption) > 0 Then
        frameLbox.Height = lboxNonRestoredTableStyles.Height
        frameLbox.visible = True
        cmdClose.Top = frameLbox.Top + frameLbox.Height + 6
        cmdCheck.Top = frameLbox.Top + frameLbox.Height + 6
        frameExclamationMark.visible = True
        frameCheckMark.visible = False
        Height = Height + cmdClose.Top - btnTopPrev
    Else
        frameExclamationMark.visible = False
        frameCheckMark.visible = True
    End If
    Err.Clear
    
    On Error GoTo 0
    
    ' OK/Pr|fffd|fen-Buttons aktiv setzen
    cmdClose.Enabled = True
    cmdCheck.Enabled = True
    
    fctSetZoom Me
    
End Sub

Sub modRestoreTableStyles(arrTables As Variant)
    
    If arrTables(0) Is Nothing Then Exit Sub
    
    Dim arrTableStylePropertiesSplit As Variant
    Dim arrTableStyleProperties As Variant
    Dim tableStyleProperty As Variant
    Dim i, k As Integer
    Dim n As Long
    Dim objTable As Table
    Dim tableStyleMatch As Boolean
    Dim brdColorRight As Long

    arrTableStyleProperties = TableStyleProperties
    
    If arrTableStyleProperties(0) = "" Then
        Exit Sub
    End If
    
    For n = 0 To UBound(arrTables)
        
        Set objTable = arrTables(n)
        frmTableRestore.lbl01b.Caption = n + 1
        
        If Not modToolsTableIsAudTable(objTable.Style.NameLocal) Then
            
            brdColorRight = objTable.Borders(wdBorderRight).Color
            tableStyleMatch = False
            
            If brdColorRight > 0 Then
                For i = 0 To UBound(arrTableStyleProperties)
                    arrTableStylePropertiesSplit = Split(arrTableStyleProperties(i), _
                        TableRestoreValueSplitCharacter)
                    
                    If brdColorRight = CLng(arrTableStylePropertiesSplit(1)) Then
                        fctAddedWantedEmptyParagraph objTable
                        objTable.Style = arrTableStylePropertiesSplit(0)
                        tableStyleMatch = True
                        frmTableRestore.lbl03b.Caption = CLng(frmTableRestore.lbl03b.Caption) + 1
                        Exit For
                    End If
                Next i
            End If
            
            If Not tableStyleMatch Then
                frmTableRestore.lbl04b.Caption = CLng(frmTableRestore.lbl04b.Caption) + 1
                frmTableRestore.lboxNonRestoredTableStyles.AddItem (objTable.Style & " #" & (n + 1))
            End If
        Else
            If fctAddedWantedEmptyParagraph(objTable) Then
                frmTableRestore.lbl03b.Caption = CLng(frmTableRestore.lbl03b.Caption) + 1
            Else
                frmTableRestore.lbl02b.Caption = CLng(frmTableRestore.lbl02b.Caption) + 1
            End If
        End If
        
        DoEvents

    Next n

End Sub

Private Sub cmdCheck_Click()
    InitTableRestore
End Sub

Private Sub cmdClose_Click()
    Unload Me
End Sub

Private Sub lboxNonRestoredTableStyles_Click()
    Dim listItemParts As Variant
    Dim objTable As Table
    Dim listIndex As Long
    listItemParts = Split(frmTableRestore.lboxNonRestoredTableStyles.List( _
        frmTableRestore.lboxNonRestoredTableStyles.listIndex), "#")
    On Error Resume Next
        listIndex = listItemParts(UBound(listItemParts)) - 1
        Set objTable = arrAllTables(listIndex)
    On Error GoTo 0
    If Not objTable Is Nothing Then
        objTable.Select
    End If
End Sub

Private Sub lboxNonRestoredTableStyles_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    lboxNonRestoredTableStyles_Click
End Sub

Private Sub UserForm_Activate()
    InitTableRestore
End Sub

Private Sub UserForm_Initialize()
    frmTableRestore.Caption = fctGetFormCaption("102")
    frmTableRestore.lbl01a = fctGetFormCaption("103")
    frmTableRestore.lbl02a = fctGetFormCaption("104")
    frmTableRestore.lbl03a = fctGetFormCaption("105")
    frmTableRestore.lbl04a = fctGetFormCaption("106")
    frmTableRestore.cmdCheck.Caption = fctGetFormCaption("107")
    frmTableRestore.cmdClose.Caption = fctGetFormCaption("108")
    frmTableRestore.lblCheckMark.Caption = ChrW(10003)
End Sub

Sub ResetUserForm()
    Dim rFrm As Variant
    Set rFrm = New frmTableRestore
    DoEvents
    frmTableRestore.cmdClose.Top = rFrm.cmdClose.Top
    frmTableRestore.cmdCheck.Top = rFrm.cmdCheck.Top
    frmTableRestore.Height = rFrm.Height
    frmTableRestore.Width = rFrm.Width
    frmTableRestore.Zoom = 100
    frmTableRestore.lbl01b.Caption = rFrm.lbl01b.Caption
    frmTableRestore.lbl02b.Caption = rFrm.lbl02b.Caption
    frmTableRestore.lbl03b.Caption = rFrm.lbl03b.Caption
    frmTableRestore.lbl04b.Caption = rFrm.lbl04b.Caption
    frmTableRestore.frameCheckMark.visible = rFrm.frameCheckMark.visible
    frmTableRestore.frameExclamationMark.visible = rFrm.frameExclamationMark.visible
    frmTableRestore.frameLbox.visible = rFrm.frameLbox.visible
    frmTableRestore.lboxNonRestoredTableStyles.Clear
End Sub
Attribute VB_Name = "frontmatter"
Sub modFrontmatterHalftitleAuthors(Optional control As Object)
    SetParagraphStyle AUD_fm_ht_authors
End Sub

Sub modFrontmatterHalftitleTitle(Optional control As Object)
    SetParagraphStyle AUD_fm_ht_title
End Sub

Sub modFrontmatterHalftitleTitleSub(Optional control As Object)
    SetParagraphStyle AUD_fm_ht_title_sub
End Sub

Sub modFrontmatterHalftitleTitleSubSub(Optional control As Object)
    SetParagraphStyle AUD_fm_ht_title_sub_sub
End Sub

Sub modFrontmatterDedication(Optional control As Object)
    SetParagraphStyle AUD_fm_dedication
End Sub

Sub modFrontmatterDedicationAuthor(Optional control As Object)
    SetParagraphStyle AUD_fm_dedication_author
End Sub

Sub modFrontmatterMaintitleAuthors(Optional control As Object)
    SetParagraphStyle AUD_fm_mt_authors
End Sub

Sub modFrontmatterMaintitleTitle(Optional control As Object)
    SetParagraphStyle AUD_fm_mt_title
End Sub

Sub modFrontmatterMaintitleTitleSub(Optional control As Object)
    SetParagraphStyle AUD_fm_mt_title_sub
End Sub

Sub modFrontmatterMaintitleTitleSubSub(Optional control As Object)
    SetParagraphStyle AUD_fm_mt_title_sub_sub
End Sub

Sub modFrontmatterMaintitleBodytext(Optional control As Object)
    SetParagraphStyle AUD_fm_mt_bodytext
End Sub

Sub modFrontmatterMaintitlePublisher(Optional control As Object)
    SetParagraphStyle AUD_fm_mt_publisher
End Sub

Sub modFrontmatterImprintHead(Optional control As Object)
    SetParagraphStyle AUD_fm_imprint_head
End Sub

Sub modFrontmatterImprintBodytext(Optional control As Object)
    SetParagraphStyle AUD_fm_imprint_bodytext
End Sub

Sub modFrontmatterAuxHead(Optional control As Object)
    SetParagraphStyle AUD_fm_aux_head
End Sub

Sub modFrontmatterAuxBodytext(Optional control As Object)
    SetParagraphStyle AUD_fm_aux_bodytext
End Sub

Sub modFrontmatterPreface01(Optional control As Object)
    SetParagraphStyle AUD_preface_01
End Sub

Sub modFrontmatterPreface02(Optional control As Object)
    SetParagraphStyle AUD_preface_02
End Sub
Attribute VB_Name = "heads"
Option Explicit

Sub modPartTitle(Optional control As Object)
    fctHeads (AUD_parttitle)
End Sub

Sub modPartTitleSub(Optional control As Object)
    fctHeads (AUD_parttitle_sub)
End Sub

Sub modPartTitleSubSub(Optional control As Object)
    fctHeads (AUD_parttitle_sub_sub)
End Sub

Sub modChapTitle(Optional control As Object)
    modKeyChapTitle
End Sub

Sub modKeyChapTitle()
    fctHeads (AUD_h1)
    fctWordDoc.Fields.Update
End Sub

Sub modH01(Optional control As Object)
    modKeyH01
End Sub

Sub modKeyH01()
    fctHeads (AUD_h2)
End Sub

Sub modH02(Optional control As Object)
    modKeyH02
End Sub

Sub modKeyH02()
    fctHeads (AUD_h3)
End Sub

Sub modH03(Optional control As Object)
    modKeyH03
End Sub

Sub modKeyH03()
    fctHeads (AUD_h4)
End Sub

Sub modH04(Optional control As Object)
    modKeyH04
End Sub

Sub modKeyH04()
    fctHeads (AUD_h5)
End Sub

Sub modH05(Optional control As Object)
    modKeyH05
End Sub

Sub modKeyH05()
    fctHeads (AUD_h6)
End Sub

Sub modH06(Optional control As Object)
    modKeyH06
End Sub

Sub modKeyH06()
    fctHeads (AUD_h7)
End Sub

Sub modH07(Optional control As Object)
    modKeyH07
End Sub

Sub modKeyH07()
    fctHeads (AUD_h8)
End Sub

Sub modH08(Optional control As Object)
    modKeyH08
End Sub

Sub modKeyH08()
    fctHeads (AUD_h9)
End Sub

Sub modChapTitleWithoutNum(Optional control As Object)
    fctHeads (AUD_h1_nonum)
    fctWordDoc.Fields.Update
End Sub

Sub modH01WithoutNum(Optional control As Object)
    fctHeads (AUD_h2_nonum)
End Sub

Sub modH02WithoutNum(Optional control As Object)
    fctHeads (AUD_h3_nonum)
End Sub

Sub modH03WithoutNum(Optional control As Object)
    fctHeads (AUD_h4_nonum)
End Sub

Sub modH04WithoutNum(Optional control As Object)
    fctHeads (AUD_h5_nonum)
End Sub

Sub modH05WithoutNum(Optional control As Object)
    fctHeads (AUD_h6_nonum)
End Sub

Sub modH06WithoutNum(Optional control As Object)
    fctHeads (AUD_h7_nonum)
End Sub

Sub modH07WithoutNum(Optional control As Object)
    fctHeads (AUD_h8_nonum)
End Sub

Sub modH08WithoutNum(Optional control As Object)
    fctHeads (AUD_h9_nonum)
End Sub

Sub modHeadsNumber(Optional control As Object)
    Load frmHeadsRenum
    frmHeadsRenum.Show
End Sub

Sub fctHeads(strHeadSyle As String)
    SetParagraphStyle strHeadSyle
End Sub

Sub modTOC(Optional control As Object)
    With fctWordDoc
        .TablesOfContents.Add Range:=Selection.Range
        .TablesOfContents(1).TabLeader = wdTabLeaderDots
        .TablesOfContents.Format = wdIndexIndent
    End With
End Sub

Sub modH01Sub(Optional control As Object)
    fctHeads (AUD_h1_sub)
End Sub

Sub modH02Sub(Optional control As Object)
    fctHeads (AUD_h2_sub)
End Sub

Sub modHeadsSubhead(Optional control As Object)
    fctHeads (AUD_subhead)
End Sub

Sub modHeadsShowHideHeadingStructure(Optional control As Object)
    Application.Run MacroName:="ViewDocumentMap"
End Sub
Attribute VB_Name = "index"
Option Explicit

Sub modIndex(Optional control As Object)
    With ActiveDocument
        .Indexes.Add Range:=Selection.Range, HeadingSeparator:=wdHeadingSeparatorNone, Type:=wdIndexIndent, RightAlignPageNumbers:=False, NumberOfColumns:=1
        .Indexes(1).TabLeader = wdTabLeaderDots
    End With
End Sub

Sub modIndexEntryMark(Optional control As Object)
    If fctGetWordVersion = 11 Or fctIsMac Then
        Application.Dialogs(wdDialogMarkIndexEntry).Show
    Else
        modIndexEntryMarkExecuteMso
    End If
End Sub

Sub modIndexEntryMarkExecuteMso()
    CommandBars.ExecuteMso ("IndexMarkEntry")
End Sub

Sub modListOfAbbrevs(Optional control As Object)

    Dim wdTbl As Word.Table

    Selection.Paragraphs(1).Style = AUD_parttitle_sub
    
    Selection.TypeText Text:=fctWordDoc.CustomDocumentProperties("strTableOfAbbrevsTitle")
    Selection.TypeText Text:=vbCrLf
    Selection.Paragraphs(1).Style = AUD_bodytext

    Set wdTbl = fctGetTable(fctGetRng, 5, 2)
        With wdTbl
            .AllowAutoFit = True
            .PreferredWidthType = wdPreferredWidthPercent
            .PreferredWidth = 100
            .Style = AUD_tf_columntext
         End With
         
    Call InsertParaAfterTable(AUD_wanted_empty_para_after_word_table)
         
    Set wdTbl = Nothing
    
End Sub
Attribute VB_Name = "listings"
Option Explicit

Sub modCodeBlock(Optional control As Object)
    SetParagraphStyle AUD_code_display
End Sub


Sub modCodeInline(Optional control As Object)

    Dim wdRng As Word.Range
    Set wdRng = Selection.Range
    
    If Not wdRng = "" Then
        Selection.Range.Style = fctWordDoc.Styles(AUD_code_inline)
    Else
        MsgBox fctGetErrorMsg(Format(1, "00"))
    End If

End Sub

Sub modListingCaption(Optional control As Object)

    Dim strCaptionText As String
    Dim strCaptionIdentifier As String

    Dim wdRngEnd As Long
    Dim wdRng As Range
    
    strCaptionText = fctWordDoc.CustomDocumentProperties("strListingCaptionText")
    strCaptionIdentifier = fctWordDoc.CustomDocumentProperties("strListingCaptionIdentifier")
    
    Selection.Paragraphs(1).Range.Select
    Selection.End = Selection.End - 1

    Set wdRng = Selection.Range
    wdRngEnd = wdRng.End
    
    Selection.Collapse wdCollapseEnd
    
    GetCaption strCaptionText, strCaptionIdentifier, "ChapNumFigNum", wdLine
    SetParagraphStyle AUD_code_caption
    
    If Not wdRng Is Nothing Then
        If wdRng <> "" Then
            Selection.Range.FormattedText = wdRng
            wdRng.Select
            Selection.Delete
        End If
    End If
    
    fctWordDoc.Fields.Update

End Sub
Attribute VB_Name = "lists"
Option Explicit

Private wdListCreator As String

Sub modReOrganizeLists(Optional control As Object)
    modKeyReOrganizeLists
End Sub

Sub modKeyReOrganizeLists()

    Dim rngStory As Range

    For Each rngStory In ActiveDocument.StoryRanges
        modReOrganizeListsByStory rngStory, True
        Do While Not (rngStory.NextStoryRange Is Nothing)
            Set rngStory = rngStory.NextStoryRange
            modReOrganizeListsByStory rngStory, True
        Loop
    Next rngStory

End Sub

Sub modReOrganizeListsByStory(rngStory As Range, listsOnly As Boolean)
    
    Dim listParas As ListParagraphs
    Dim currentPara As Paragraph
    Dim i As Long
    Dim bolCurrentParaIsList As Boolean
    
    Set listParas = rngStory.ListParagraphs
    For i = 1 To listParas.Count
        Set currentPara = listParas(i)
        bolCurrentParaIsList = fctListCurrentParaIsOrderedList(currentPara)
        If Not listsOnly Or bolCurrentParaIsList Then
            currentPara.Style = fctWordDoc.Styles(currentPara.Style)
        End If
        If bolCurrentParaIsList Then
            fctIteratePara currentPara.Range
        End If
    Next i

End Sub


Sub modSetListException(Optional control As Object)

    Dim currentParaIsListPara As Boolean
    
    Dim currentPara As Paragraph
    Set currentPara = Selection.Paragraphs(1)
    
    Dim previousStylePara As Paragraph
    Set previousStylePara = Selection.Paragraphs(1).Previous(1)

    currentParaIsListPara = fctListCurrentParaIsList(currentPara)

    If currentParaIsListPara And Not previousStylePara Is Nothing Then
        currentPara.Style = fctWordDoc.Styles(currentPara.Style)
    End If
    
    If Not previousStylePara Is Nothing Then
        If previousStylePara.Style = fctWordDoc.Styles(AUD_list_continue_marker) Then
            If Not currentParaIsListPara Then
                Selection.Style = fctWordDoc.Styles(AUD_list_01_numeric)
            End If
            Exit Sub
        End If
    End If
        
    Selection.StartOf wdParagraph
    Selection.InsertParagraphBefore
    Selection.Collapse wdCollapseStart
    Selection.Style = fctWordDoc.Styles(AUD_list_continue_marker)
    
    Selection.Paragraphs(1).Next.Range.Select
    Selection.EndOf wdParagraph
    
    If Not currentParaIsListPara Then
        Selection.StartOf wdParagraph
        Selection.Style = fctWordDoc.Styles(AUD_list_01_numeric)
        Selection.Collapse wdCollapseStart
    End If

End Sub

Function fctListCurrentParaIsList(currentPara As Paragraph) As Boolean
    If Not currentPara Is Nothing Then
        Dim arrListStyles As Variant
        Dim i As Integer
        
        arrListStyles = ListStyles
        
        For i = 0 To UBound(arrListStyles)
            If currentPara.Style = arrListStyles(i) Then
                fctListCurrentParaIsList = True
                Exit Function
            End If
        Next
    End If
End Function

Function fctListCurrentParaIsOrderedList(currentPara As Paragraph) As Boolean
    If Not currentPara Is Nothing Then
        Dim arrListStyles As Variant
        Dim i As Integer
        
        arrListStyles = ListStylesOrdered
       
        For i = 0 To UBound(arrListStyles)
            If currentPara.Style = arrListStyles(i) Then
                fctListCurrentParaIsOrderedList = True
                Exit Function
            End If
        Next
    End If
End Function

Function fctListCurrentParaIsBlankList(currentPara As Paragraph) As Boolean
    If Not currentPara Is Nothing Then
        Dim i As Integer
        Dim arrListStylesBlank As Variant
        
        arrListStylesBlank = ListStylesBlank
    
        For i = 0 To UBound(ListStylesBlank)
            If currentPara.Style = ListStylesBlank(i) Then
                fctListCurrentParaIsBlankList = True
                Exit Function
            End If
        Next i
    End If
End Function

Sub fctIteratePara(currentSelection As Range)

    currentSelection.Collapse wdCollapseStart

    Dim colNum As Integer
    Dim previousColNum As Integer
    colNum = currentSelection.Information(wdStartOfRangeColumnNumber)

    Dim ltList As ListTemplate
    Set ltList = currentSelection.Paragraphs(1).Style.ListTemplate

    Dim previousPara As Paragraph
    Set previousPara = currentSelection.Paragraphs(1).Previous(1)
    
    Dim ignoreListContinueMarker As Boolean

    Do
        If previousPara Is Nothing Then
            Exit Do
        End If

        previousColNum = previousPara.Range.Information(wdStartOfRangeColumnNumber)

        If previousPara.Style = AUD_list_continue_marker And colNum = previousColNum Then
            If ignoreListContinueMarker Then
                Set previousPara = previousPara.Previous
                GoTo EndLoop
            End If
            Exit Do
        End If

        If Not fctListCurrentParaIsList(previousPara) Or colNum <> previousColNum Then
            currentSelection.ListFormat.ApplyListTemplate ltList, _
                ContinuePreviousList:=False, ApplyTo:=wdListApplyToWholeList
            Exit Do
        End If

        If previousPara.Style.ListLevelNumber > currentSelection.Paragraphs(1).Style.ListLevelNumber Then
            ignoreListContinueMarker = True
        End If

        If previousPara.Style.ListLevelNumber = currentSelection.Paragraphs(1).Style.ListLevelNumber And _
            previousPara.Style = currentSelection.Paragraphs(1).Style Then
            Exit Do
        End If

        If previousPara.Style.ListLevelNumber < currentSelection.Paragraphs(1).Style.ListLevelNumber Or _
        (previousPara.Style.ListLevelNumber = currentSelection.Paragraphs(1).Style.ListLevelNumber And _
            previousPara.Style <> currentSelection.Paragraphs(1).Style And _
                Not fctListCurrentParaIsBlankList(previousPara)) Then
            currentSelection.ListFormat.ApplyListTemplate ltList, _
                ContinuePreviousList:=False, ApplyTo:=wdListApplyToWholeList
            Exit Do
        End If

EndLoop:
        Set previousPara = previousPara.Previous

    Loop

End Sub

Sub fctIterateParaForward(nextPara As Paragraph)

    If nextPara Is Nothing Then Exit Sub
    
    Dim colNum As Integer
    Dim previousColNum As Integer
    previousColNum = nextPara.Range.Information(wdStartOfRangeColumnNumber)
    
    Set nextPara = nextPara.Next
    
    Do
        If _
           nextPara Is Nothing Or _
           Not fctListCurrentParaIsList(nextPara) _
        Then
            Exit Do
        End If

        colNum = nextPara.Range.Information(wdStartOfRangeColumnNumber)
        
        If colNum <> previousColNum Then
            Exit Do
        End If
        
        nextPara.Style = fctWordDoc.Styles(nextPara.Style)

        fctIteratePara nextPara.Range
        
        previousColNum = nextPara.Range.Information(wdStartOfRangeColumnNumber)

        Set nextPara = nextPara.Next
    Loop
    
End Sub

Sub fctLists(strListStyle As String)
    
    SetParagraphStyle strListStyle

    Dim listParas As ListParagraphs
    Dim currentPara As Paragraph
    Dim i As Long

    Set listParas = Selection.Range.ListParagraphs
    For i = 1 To listParas.Count
        Set currentPara = listParas(i)
        If fctListCurrentParaIsOrderedList(currentPara) Then
            fctIteratePara currentPara.Range
        End If
    Next i
    
    On Error Resume Next
    fctIterateParaForward Selection.Paragraphs.Last
    On Error GoTo 0

End Sub

Sub modListSym01(Optional control As Object)
    fctLists (AUD_list_01_symbol)
End Sub

Sub modListSym02(Optional control As Object)
    fctLists (AUD_list_02_symbol)
End Sub

Sub modListSym03(Optional control As Object)
    fctLists (AUD_list_03_symbol)
End Sub


Sub modListNum01(Optional control As Object)
    fctLists (AUD_list_01_numeric)
End Sub

Sub modListNum02(Optional control As Object)
    fctLists (AUD_list_02_numeric)
End Sub
    
Sub modListNum03(Optional control As Object)
    fctLists (AUD_list_03_numeric)
End Sub


Sub modListChar01(Optional control As Object)
    fctLists (AUD_list_01_character)
End Sub

Sub modListChar02(Optional control As Object)
    fctLists (AUD_list_02_character)
End Sub

Sub modListChar03(Optional control As Object)
    fctLists (AUD_list_03_character)
End Sub


Sub modListChar01Capital(Optional control As Object)
    fctLists (AUD_list_01_character_capital)
End Sub

Sub modListChar02Capital(Optional control As Object)
    fctLists (AUD_list_02_character_capital)
End Sub

Sub modListChar03Capital(Optional control As Object)
    fctLists (AUD_list_03_character_capital)
End Sub


Sub modListRoman01(Optional control As Object)
    fctLists (AUD_list_01_roman)
End Sub

Sub modListRoman02(Optional control As Object)
    fctLists (AUD_list_02_roman)
End Sub

Sub modListRoman03(Optional control As Object)
    fctLists (AUD_list_03_roman)
End Sub


Sub modListRoman01Capital(Optional control As Object)
    fctLists (AUD_list_01_roman_capital)
End Sub

Sub modListRoman02Capital(Optional control As Object)
    fctLists (AUD_list_02_roman_capital)
End Sub

Sub modListRoman03Capital(Optional control As Object)
    fctLists (AUD_list_03_roman_capital)
End Sub


Sub modListUnordered01(Optional control As Object)
    fctLists (AUD_list_01_unordered)
End Sub

Sub modListUnordered02(Optional control As Object)
    fctLists (AUD_list_02_unordered)
End Sub

Sub modListUnordered03(Optional control As Object)
    fctLists (AUD_list_03_unordered)
End Sub

Sub modListUnordered04(Optional control As Object)
    fctLists (AUD_list_04_unordered)
End Sub

Sub modListUnordered05(Optional control As Object)
    fctLists (AUD_list_05_unordered)
End Sub

Sub modListUnordered06(Optional control As Object)
    fctLists (AUD_list_06_unordered)
End Sub

Sub modListUnordered07(Optional control As Object)
    fctLists (AUD_list_07_unordered)
End Sub

Sub modListUnordered08(Optional control As Object)
    fctLists (AUD_list_08_unordered)
End Sub

Sub modListUnordered09(Optional control As Object)
    fctLists (AUD_list_09_unordered)
End Sub


Sub modListOrdered01(Optional control As Object)
    fctLists (AUD_list_01_ordered)
End Sub

Sub modListOrdered02(Optional control As Object)
    fctLists (AUD_list_02_ordered)
End Sub

Sub modListOrdered03(Optional control As Object)
    fctLists (AUD_list_03_ordered)
End Sub

Sub modListOrdered04(Optional control As Object)
    fctLists (AUD_list_04_ordered)
End Sub

Sub modListOrdered05(Optional control As Object)
    fctLists (AUD_list_05_ordered)
End Sub

Sub modListOrdered06(Optional control As Object)
    fctLists (AUD_list_06_ordered)
End Sub

Sub modListOrdered07(Optional control As Object)
    fctLists (AUD_list_07_ordered)
End Sub

Sub modListOrdered08(Optional control As Object)
    fctLists (AUD_list_08_ordered)
End Sub

Sub modListOrdered09(Optional control As Object)
    fctLists (AUD_list_09_ordered)
End Sub


Sub modListBlank01(Optional control As Object)
    fctLists (AUD_list_01_blank)
End Sub

Sub modListBlank02(Optional control As Object)
    fctLists (AUD_list_02_blank)
End Sub

Sub modListBlank03(Optional control As Object)
    fctLists (AUD_list_03_blank)
End Sub

Sub modListBlank04(Optional control As Object)
    fctLists (AUD_list_04_blank)
End Sub

Sub modListBlank05(Optional control As Object)
    fctLists (AUD_list_05_blank)
End Sub

Sub modListBlank06(Optional control As Object)
    fctLists (AUD_list_06_blank)
End Sub

Sub modListBlank07(Optional control As Object)
    fctLists (AUD_list_07_blank)
End Sub

Sub modListBlank08(Optional control As Object)
    fctLists (AUD_list_08_blank)
End Sub

Sub modListBlank09(Optional control As Object)
    fctLists (AUD_list_09_blank)
End Sub


Sub modFormatManualListLabel(Optional control As Object)
    Dim wdRng As Word.Range
    Set wdRng = Selection.Range
    
    If Not wdRng = "" Then
        Selection.Style = fctWordDoc.Styles(AUD_list_label_manual)
    Else
        MsgBox fctGetErrorMsg(Format(1, "00"))
    End If
End Sub

Sub modDeleteManualListLabelsInSelectedParagraphs(Optional control As Object)

    Dim objRange As Range
    Dim objTabRange As Range
    Dim objRangeInitial As Range
    Dim arrParagraphs() As Paragraph
    Dim objParagraph As Paragraph
    Dim indexTab As Long
    Dim i As Long
    Dim isSelectionEmpty As Boolean
    ReDim arrParagraphs(Selection.Paragraphs.Count - 1)
    
    Set objRangeInitial = Selection.Range
    isSelectionEmpty = objRangeInitial.start = objRangeInitial.End And _
        objRangeInitial.Paragraphs(1).Range.start = objRangeInitial.start
    
    i = 0
    For Each objParagraph In Selection.Paragraphs
        Set arrParagraphs(i) = objParagraph
        i = i + 1
    Next
    
    For i = 0 To UBound(arrParagraphs)
        Set objRange = arrParagraphs(i).Range
        Set objTabRange = fctGetFirstTabInRange(objRange.Duplicate)

        objRange.Collapse wdCollapseStart
        
        If Not objTabRange Is Nothing And objRange.Style = AUD_list_label_manual Then
            objRange.End = objTabRange.End
            objRange.Delete
        End If
    Next
    
    If Not isSelectionEmpty Then objRangeInitial.Select
    
End Sub

Sub modListManual01(Optional control As Object)
    fctListsManual AUD_list_01_manual, "strListLabelManual01"
End Sub

Sub modListManual02(Optional control As Object)
    fctListsManual AUD_list_02_manual, "strListLabelManual02"
End Sub

Sub modListManual03(Optional control As Object)
    fctListsManual AUD_list_03_manual, "strListLabelManual03"
End Sub

Sub modListManual04(Optional control As Object)
    fctListsManual AUD_list_04_manual, "strListLabelManual04"
End Sub

Sub modListManual05(Optional control As Object)
    fctListsManual AUD_list_05_manual, "strListLabelManual05"
End Sub

Sub modListManual06(Optional control As Object)
    fctListsManual AUD_list_06_manual, "strListLabelManual06"
End Sub

Sub modListManual07(Optional control As Object)
    fctListsManual AUD_list_07_manual, "strListLabelManual07"
End Sub

Sub modListManual08(Optional control As Object)
    fctListsManual AUD_list_08_manual, "strListLabelManual08"
End Sub

Sub modListManual09(Optional control As Object)
    fctListsManual AUD_list_09_manual, "strListLabelManual09"
End Sub

Sub fctListsManual(strListStyle As String, strListStyleDocVar As String)

    fctLists (strListStyle)
    
    Dim objRange As Range
    Dim objRangeInitial As Range
    Dim arrParagraphs() As Paragraph
    Dim objParagraph As Paragraph
    Dim strListManualPrefix As String
    Dim strListManualSeparator As String
    Dim i As Long
    Dim isSelectionEmpty As Boolean
    ReDim arrParagraphs(Selection.Paragraphs.Count - 1)
    
    Set objRangeInitial = Selection.Range
    isSelectionEmpty = objRangeInitial.start = objRangeInitial.End And _
        objRangeInitial.Paragraphs(1).Range.start = objRangeInitial.start
    
    i = 0
    For Each objParagraph In Selection.Paragraphs
        Set arrParagraphs(i) = objParagraph
        i = i + 1
    Next
    
    If fctWordDoc.CustomDocumentProperties(strListStyleDocVar) <> _
        fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
        strListManualPrefix = fctWordDoc.CustomDocumentProperties(strListStyleDocVar)
    End If
    
    If fctWordDoc.CustomDocumentProperties("strListLabelManualSeparator") <> _
        fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
        strListManualSeparator = fctWordDoc.CustomDocumentProperties("strListLabelManualSeparator")
    End If
    
    For i = 0 To UBound(arrParagraphs)
    
        Set objRange = arrParagraphs(i).Range
        objRange.End = objRange.start
        objRange.Select

        If Not Selection.IsEndOfRowMark And Selection.Style <> AUD_list_label_manual Then

            If strListManualPrefix <> "" Then
                InsertSpecialText strListManualPrefix
                objRange.End = Selection.start
                objRange.Style = AUD_list_label_manual
            End If
            
            Selection.Text = " "
            On Error Resume Next
            Selection.Font.Reset
            On Error GoTo 0
            
            If strListManualSeparator = "" Then
                Selection.Delete
            Else
                If strListManualSeparator = "vbTab" Then
                    Selection.TypeText vbTab
                Else
                    InsertSpecialText strListManualSeparator
                End If
            End If
        
        End If
    
    Next i

    If Not isSelectionEmpty Then objRangeInitial.Select

End Sub

Function fctGetFirstTabInRange(objRange As Range) As Range
    
    With objRange.Find
        .Text = "^t"
        .Execute
    End With
    
    If objRange.Find.Found Then
        Set fctGetFirstTabInRange = objRange
        Exit Function
    End If

End Function
Attribute VB_Name = "look"
Sub modLookSetLookMaster(Optional control As Object)

    If fctGetWordVersion < 12 Then
        MsgBox fctGetErrorMsg(Format(11, "00"))
        Exit Sub
    End If
   
    modLookSetThemeColors 0, fctWordDoc, fctWordDoc
    modLookSetStyleProperties 0
    modLookSetDocumentProperties 0
        
End Sub

Sub modLookSetLookAlternative01(Optional control As Object)

    If fctGetWordVersion < 12 Then
        MsgBox fctGetErrorMsg(Format(11, "00"))
        Exit Sub
    End If
    
    modLookSetThemeColors 1, fctWordDoc, fctWordDoc
    modLookSetStyleProperties 1
    modLookSetDocumentProperties 1

End Sub

Sub modLookSetLookAlternative02(Optional control As Object)

    If fctGetWordVersion < 12 Then
        MsgBox fctGetErrorMsg(Format(11, "00"))
        Exit Sub
    End If
   
    modLookSetThemeColors 2, fctWordDoc, fctWordDoc
    modLookSetStyleProperties 2
    modLookSetDocumentProperties 2

End Sub

Sub modLookSetThemeColors(iSplitIndex As Integer, sourceDocument As Document, _
    targetDocument As Document)

    targetDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeDark1) = _
        modLookGetWdColor("strLookWdColorsMsoThemeDark1", iSplitIndex, sourceDocument)
    targetDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeLight1) = _
        modLookGetWdColor("strLookWdColorsMsoThemeLight1", iSplitIndex, sourceDocument)
    targetDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeDark2) = _
        modLookGetWdColor("strLookWdColorsMsoThemeDark2", iSplitIndex, sourceDocument)
    targetDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeLight2) = _
        modLookGetWdColor("strLookWdColorsMsoThemeLight2", iSplitIndex, sourceDocument)
    targetDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeAccent1) = _
        modLookGetWdColor("strLookWdColorsMsoThemeAccent1", iSplitIndex, sourceDocument)
    targetDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeAccent2) = _
        modLookGetWdColor("strLookWdColorsMsoThemeAccent2", iSplitIndex, sourceDocument)
    targetDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeAccent3) = _
        modLookGetWdColor("strLookWdColorsMsoThemeAccent3", iSplitIndex, sourceDocument)
    targetDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeAccent4) = _
        modLookGetWdColor("strLookWdColorsMsoThemeAccent4", iSplitIndex, sourceDocument)
    targetDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeAccent5) = _
        modLookGetWdColor("strLookWdColorsMsoThemeAccent5", iSplitIndex, sourceDocument)
    targetDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeAccent6) = _
        modLookGetWdColor("strLookWdColorsMsoThemeAccent6", iSplitIndex, sourceDocument)
    targetDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeHyperlink) = _
        modLookGetWdColor("strLookWdColorsMsoThemeHyperlink", iSplitIndex, sourceDocument)
    targetDocument.DocumentTheme.ThemeColorScheme.Colors(msoThemeFollowedHyperlink) = _
        modLookGetWdColor("strLookWdColorsMsoThemeFollowedHyperlink", iSplitIndex, sourceDocument)
        
End Sub

Function modLookGetWdColor(strDocVar As String, iSplitIndex As Integer, _
     sourceDocument As Document) As Long
    
    modLookGetWdColor = CLng(Split(sourceDocument.CustomDocumentProperties(strDocVar).Value, ";")(iSplitIndex))
End Function

Sub modLookSetDocumentProperty(propertyType As String, propertyValue As String)
   
    If propertyType = "" Then Exit Sub
    
    Select Case propertyType
       
        Case "PLM"
            ActiveDocument.PageSetup.LeftMargin = MillimetersToPoints(CSng(propertyValue))
        Case "PRM"
            ActiveDocument.PageSetup.RightMargin = MillimetersToPoints(CSng(propertyValue))
        Case "PTM"
            ActiveDocument.PageSetup.TopMargin = MillimetersToPoints(CSng(propertyValue))
        Case "PBM"
            ActiveDocument.PageSetup.BottomMargin = MillimetersToPoints(CSng(propertyValue))
        Case "PH"
            ActiveDocument.PageSetup.PageHeight = MillimetersToPoints(CSng(propertyValue))
        Case "PW"
            ActiveDocument.PageSetup.PageWidth = MillimetersToPoints(CSng(propertyValue))
        Case "PO"
            ActiveDocument.PageSetup.Orientation = propertyValue
        Case "AH"
            ActiveDocument.AutoHyphenation = CSng(propertyValue)
        
    End Select
End Sub

Sub modLookSetStyleProperty(propertyType As String, propertyValue As String, strStyleName As String)

    Dim objStyle As Style
    On Error Resume Next
    Set objStyle = fctGetStyle(strStyleName)
    On Error GoTo 0
    
    If objStyle Is Nothing Then Exit Sub

    Select Case propertyType
        Case "FN"
            objStyle.Font.Name = propertyValue
        Case "FS"
            objStyle.Font.Size = CSng(propertyValue)
        Case "FC"
            objStyle.Font.Color = CLng(propertyValue)
        Case "FB":
            objStyle.Font.Bold = CLng(propertyValue)
            If Not fctIsMac Then
                modLookSetBiProperty "BoldBi", objStyle.Font, CLng(propertyValue)
            End If
        Case "FI":
            objStyle.Font.Italic = CLng(propertyValue)
            If Not fctIsMac Then
                modLookSetBiProperty "ItalicBi", objStyle.Font, CLng(propertyValue)
            End If
        Case "FUS":
            objStyle.Font.Underline = CLng(propertyValue)
        Case "FUC":
            objStyle.Font.UnderlineColor = CLng(propertyValue)
        Case "FST":
            objStyle.Font.StrikeThrough = CLng(propertyValue)
        Case "FDST":
            objStyle.Font.DoubleStrikeThrough = CLng(propertyValue)
        Case "FSUP":
            objStyle.Font.superscript = CLng(propertyValue)
        Case "FSUB":
            objStyle.Font.subscript = CLng(propertyValue)
        Case "FSC":
            objStyle.Font.SmallCaps = CLng(propertyValue)
        Case "FAC":
            objStyle.Font.AllCaps = CLng(propertyValue)
        Case "FH":
            objStyle.Font.Hidden = CLng(propertyValue)
        Case "PA":
            objStyle.ParagraphFormat.Alignment = CLng(propertyValue)
        Case "PLI":
            objStyle.ParagraphFormat.LeftIndent = MillimetersToPoints(CSng(propertyValue))
        Case "PRI":
            objStyle.ParagraphFormat.RightIndent = MillimetersToPoints(CSng(propertyValue))
        Case "PSB":
            objStyle.ParagraphFormat.SpaceBefore = CLng(propertyValue)
        Case "PSBA":
            objStyle.ParagraphFormat.SpaceBeforeAuto = CLng(propertyValue)
        Case "PSA":
            objStyle.ParagraphFormat.SpaceAfter = CLng(propertyValue)
        Case "PSAA":
            objStyle.ParagraphFormat.SpaceAfterAuto = CLng(propertyValue)
        Case "PLSR":
            objStyle.ParagraphFormat.LineSpacingRule = CLng(propertyValue)
        Case "PLSP":
            objStyle.ParagraphFormat.LineSpacing = CLng(propertyValue)
        Case "PLSL":
            objStyle.ParagraphFormat.LineSpacing = LinesToPoints(CSng(propertyValue))
        Case "PFLI":
            objStyle.ParagraphFormat.FirstLineIndent = MillimetersToPoints(CSng(propertyValue))
        Case "PBB":
            objStyle.ParagraphFormat.PageBreakBefore = CLng(propertyValue)
        Case "LLFC"
            objStyle.ListTemplate.ListLevels(1).Font.Color = CLng(propertyValue)
            objStyle.ListTemplate.ListLevels(2).Font.Color = CLng(propertyValue)
            objStyle.ListTemplate.ListLevels(3).Font.Color = CLng(propertyValue)
            If objStyle.ListTemplate.ListLevels(4).LinkedStyle <> "" Then
                objStyle.ListTemplate.ListLevels(4).Font.Color = CLng(propertyValue)
            End If
            If objStyle.ListTemplate.ListLevels(5).LinkedStyle <> "" Then
                objStyle.ListTemplate.ListLevels(5).Font.Color = CLng(propertyValue)
            End If
            If objStyle.ListTemplate.ListLevels(6).LinkedStyle <> "" Then
                objStyle.ListTemplate.ListLevels(6).Font.Color = CLng(propertyValue)
            End If
            If objStyle.ListTemplate.ListLevels(7).LinkedStyle <> "" Then
                objStyle.ListTemplate.ListLevels(7).Font.Color = CLng(propertyValue)
            End If
            If objStyle.ListTemplate.ListLevels(8).LinkedStyle <> "" Then
                objStyle.ListTemplate.ListLevels(8).Font.Color = CLng(propertyValue)
            End If
            If objStyle.ListTemplate.ListLevels(9).LinkedStyle <> "" Then
                objStyle.ListTemplate.ListLevels(9).Font.Color = CLng(propertyValue)
            End If
        Case "LLFN1"
            objStyle.ListTemplate.ListLevels(1).Font.Name = propertyValue
        Case "LLFC1"
            objStyle.ListTemplate.ListLevels(1).Font.Color = CLng(propertyValue)
        Case "LLS1"
            objStyle.ListTemplate.ListLevels(1).StartAt = CLng(propertyValue)
        Case "LLNS1"
            objStyle.ListTemplate.ListLevels(1).NumberStyle = CLng(propertyValue)
        Case "LLNF1"
            objStyle.ListTemplate.ListLevels(1).NumberFormat = propertyValue
        Case "LLFN2"
            objStyle.ListTemplate.ListLevels(2).Font.Name = propertyValue
        Case "LLFC2"
            objStyle.ListTemplate.ListLevels(2).Font.Color = CLng(propertyValue)
        Case "LLS2"
            objStyle.ListTemplate.ListLevels(2).StartAt = CLng(propertyValue)
        Case "LLNS2"
            objStyle.ListTemplate.ListLevels(2).NumberStyle = CLng(propertyValue)
        Case "LLNF2"
            objStyle.ListTemplate.ListLevels(2).NumberFormat = propertyValue
        Case "LLFN3"
            objStyle.ListTemplate.ListLevels(3).Font.Name = propertyValue
        Case "LLFC3"
            objStyle.ListTemplate.ListLevels(3).Font.Color = CLng(propertyValue)
        Case "LLS3"
            objStyle.ListTemplate.ListLevels(3).StartAt = CLng(propertyValue)
        Case "LLNS3"
            objStyle.ListTemplate.ListLevels(3).NumberStyle = CLng(propertyValue)
        Case "LLNF3"
            objStyle.ListTemplate.ListLevels(3).NumberFormat = propertyValue
        Case "LLFN4"
            objStyle.ListTemplate.ListLevels(4).Font.Name = propertyValue
        Case "LLFC4"
            objStyle.ListTemplate.ListLevels(4).Font.Color = CLng(propertyValue)
        Case "LLS4"
            objStyle.ListTemplate.ListLevels(4).StartAt = CLng(propertyValue)
        Case "LLNS4"
            objStyle.ListTemplate.ListLevels(4).NumberStyle = CLng(propertyValue)
        Case "LLNF4"
            objStyle.ListTemplate.ListLevels(4).NumberFormat = propertyValue
        Case "LLFN5"
            objStyle.ListTemplate.ListLevels(5).Font.Name = propertyValue
        Case "LLFC5"
            objStyle.ListTemplate.ListLevels(5).Font.Color = CLng(propertyValue)
        Case "LLS5"
            objStyle.ListTemplate.ListLevels(5).StartAt = CLng(propertyValue)
        Case "LLNS5"
            objStyle.ListTemplate.ListLevels(5).NumberStyle = CLng(propertyValue)
        Case "LLNF5"
            objStyle.ListTemplate.ListLevels(5).NumberFormat = propertyValue
        Case "LLFN6"
            objStyle.ListTemplate.ListLevels(6).Font.Name = propertyValue
        Case "LLFC6"
            objStyle.ListTemplate.ListLevels(6).Font.Color = CLng(propertyValue)
        Case "LLS6"
            objStyle.ListTemplate.ListLevels(6).StartAt = CLng(propertyValue)
        Case "LLNS6"
            objStyle.ListTemplate.ListLevels(6).NumberStyle = CLng(propertyValue)
        Case "LLNF6"
            objStyle.ListTemplate.ListLevels(6).NumberFormat = propertyValue
        Case "LLFN7"
            objStyle.ListTemplate.ListLevels(7).Font.Name = propertyValue
        Case "LLFC7"
            objStyle.ListTemplate.ListLevels(7).Font.Color = CLng(propertyValue)
        Case "LLS7"
            objStyle.ListTemplate.ListLevels(7).StartAt = CLng(propertyValue)
        Case "LLNS7"
            objStyle.ListTemplate.ListLevels(7).NumberStyle = CLng(propertyValue)
        Case "LLNF7"
            objStyle.ListTemplate.ListLevels(7).NumberFormat = propertyValue
        Case "LLFN8"
            objStyle.ListTemplate.ListLevels(8).Font.Name = propertyValue
        Case "LLFC8"
            objStyle.ListTemplate.ListLevels(8).Font.Color = CLng(propertyValue)
        Case "LLS8"
            objStyle.ListTemplate.ListLevels(8).StartAt = CLng(propertyValue)
        Case "LLNS8"
            objStyle.ListTemplate.ListLevels(8).NumberStyle = CLng(propertyValue)
        Case "LLNF8"
            objStyle.ListTemplate.ListLevels(8).NumberFormat = propertyValue
        Case "LLFN9"
            objStyle.ListTemplate.ListLevels(9).Font.Name = propertyValue
        Case "LLFC9"
            objStyle.ListTemplate.ListLevels(9).Font.Color = CLng(propertyValue)
        Case "LLS9"
            objStyle.ListTemplate.ListLevels(9).StartAt = CLng(propertyValue)
        Case "LLNS9"
            objStyle.ListTemplate.ListLevels(9).NumberStyle = CLng(propertyValue)
        Case "LLNF9"
            objStyle.ListTemplate.ListLevels(9).NumberFormat = propertyValue
        Case "SC"
            modLookGetStyleShading(objStyle).BackgroundPatternColor = CLng(propertyValue)
        Case "BC"
            modLookGetStyleBorders(objStyle, wdBorderTop).Color = CLng(propertyValue)
            modLookGetStyleBorders(objStyle, wdBorderLeft).Color = CLng(propertyValue)
            modLookGetStyleBorders(objStyle, wdBorderBottom).Color = CLng(propertyValue)
            modLookGetStyleBorders(objStyle, wdBorderRight).Color = CLng(propertyValue)
        Case "BCTLR"
            modLookGetStyleBorders(objStyle, wdBorderTop).Color = CLng(propertyValue)
            modLookGetStyleBorders(objStyle, wdBorderLeft).Color = CLng(propertyValue)
            modLookGetStyleBorders(objStyle, wdBorderRight).Color = CLng(propertyValue)
        Case "BCTL"
            modLookGetStyleBorders(objStyle, wdBorderTop).Color = CLng(propertyValue)
            modLookGetStyleBorders(objStyle, wdBorderLeft).Color = CLng(propertyValue)
        Case "BCT"
            modLookGetStyleBorders(objStyle, wdBorderTop).Color = CLng(propertyValue)
        Case "BCL"
            modLookGetStyleBorders(objStyle, wdBorderLeft).Color = CLng(propertyValue)
        Case "BCB"
            modLookGetStyleBorders(objStyle, wdBorderBottom).Color = CLng(propertyValue)
        Case "BCR"
            modLookGetStyleBorders(objStyle, wdBorderRight).Color = CLng(propertyValue)
        Case "BS"
            modLookGetStyleBorders(objStyle, wdBorderTop).LineStyle = CLng(propertyValue)
            modLookGetStyleBorders(objStyle, wdBorderLeft).LineStyle = CLng(propertyValue)
            modLookGetStyleBorders(objStyle, wdBorderBottom).LineStyle = CLng(propertyValue)
            modLookGetStyleBorders(objStyle, wdBorderRight).LineStyle = CLng(propertyValue)
        Case "BSTL"
            modLookGetStyleBorders(objStyle, wdBorderTop).LineStyle = CLng(propertyValue)
            modLookGetStyleBorders(objStyle, wdBorderLeft).LineStyle = CLng(propertyValue)
        Case "BST"
            modLookGetStyleBorders(objStyle, wdBorderTop).LineStyle = CLng(propertyValue)
        Case "BSL"
            modLookGetStyleBorders(objStyle, wdBorderLeft).LineStyle = CLng(propertyValue)
        Case "BSB"
            modLookGetStyleBorders(objStyle, wdBorderBottom).LineStyle = CLng(propertyValue)
        Case "BSR"
            modLookGetStyleBorders(objStyle, wdBorderRight).LineStyle = CLng(propertyValue)
        Case "BW"
            modLookGetStyleBorders(objStyle, wdBorderTop).LineWidth = CLng(propertyValue)
            modLookGetStyleBorders(objStyle, wdBorderLeft).LineWidth = CLng(propertyValue)
            modLookGetStyleBorders(objStyle, wdBorderBottom).LineWidth = CLng(propertyValue)
            modLookGetStyleBorders(objStyle, wdBorderRight).LineWidth = CLng(propertyValue)
        Case "BWTL"
            modLookGetStyleBorders(objStyle, wdBorderTop).LineWidth = CLng(propertyValue)
            modLookGetStyleBorders(objStyle, wdBorderLeft).LineWidth = CLng(propertyValue)
        Case "BWT"
            modLookGetStyleBorders(objStyle, wdBorderTop).LineWidth = CLng(propertyValue)
        Case "BWL"
            modLookGetStyleBorders(objStyle, wdBorderLeft).LineWidth = CLng(propertyValue)
        Case "BWB"
            modLookGetStyleBorders(objStyle, wdBorderBottom).LineWidth = CLng(propertyValue)
        Case "BWR"
            modLookGetStyleBorders(objStyle, wdBorderRight).LineWidth = CLng(propertyValue)
    End Select
End Sub

Sub modLookSetBiProperty(biType As String, objFont As Font, propertyValue As Long)
    Select Case biType
        Case "BoldBi"
            objFont.BoldBi = propertyValue
        Case "ItalicBi"
            objFont.ItalicBi = propertyValue
    End Select
End Sub

Function modLookGetStyleBorders(objStyle As Style, lngBorderType As WdBorderType) As Border
    Select Case objStyle.Type
        Case wdStyleTypeTable
            Set modLookGetStyleBorders = objStyle.Table.Borders(lngBorderType)
        Case wdStyleTypeParagraph
            Set modLookGetStyleBorders = objStyle.ParagraphFormat.Borders(lngBorderType)
        Case wdStyleTypeCharacter
            Set modLookGetStyleBorders = objStyle.Font.Borders(lngBorderType)
    End Select
End Function

Function modLookGetStyleShading(objStyle As Style) As Shading
    Select Case objStyle.Type
        Case wdStyleTypeTable
            Set modLookGetStyleShading = objStyle.Table.Shading
        Case wdStyleTypeParagraph
            Set modLookGetStyleShading = objStyle.ParagraphFormat.Shading
        Case wdStyleTypeCharacter
            Set modLookGetStyleShading = objStyle.Font.Shading
    End Select
End Function

Sub modLookSetStylePropertiesByPart(ByVal strStyleAlternativeProperties As String, iStylePropertyIndex As Integer)
    
    Dim styleName As String
    Dim propertyType As String
    Dim propertyValue As String
    Dim i As Integer

    Dim styleAlternativePropertiesSplit() As String
    Dim stylePropertiesSplit() As String

    styleAlternativePropertiesSplit = Split(Split(strStyleAlternativeProperties, _
        StylePropertyStyleNameHook)(1), StylePropertyPartHook)
        
    styleName = Split(strStyleAlternativeProperties, StylePropertyStyleNameHook)(0)
    
    stylePropertiesSplit = Split(styleAlternativePropertiesSplit(iStylePropertyIndex), StylePropertyHook)
    
    For i = 0 To UBound(stylePropertiesSplit)
        propertyType = Split(stylePropertiesSplit(i), StylePropertyValueHook)(0)
        propertyValue = Split(stylePropertiesSplit(i), StylePropertyValueHook)(1)
        modLookSetStyleProperty propertyType, propertyValue, styleName
    Next i

End Sub

Sub modLookSetDocumentPropertiesByPart(ByVal strDocumentAlternativeProperties As String, iDocumentPropertyIndex As Integer)
    
    Dim propertyType As String
    Dim propertyValue As String
    Dim i As Integer

    Dim documentAlternativePropertiesSplit() As String
    Dim documentPropertiesSplit() As String
    
    documentAlternativePropertiesSplit = Split(strDocumentAlternativeProperties, _
        StylePropertyPartHook)
            
    documentPropertiesSplit = Split(documentAlternativePropertiesSplit(iDocumentPropertyIndex), _
        StylePropertyHook)
    
    For i = 0 To UBound(documentPropertiesSplit)
        propertyType = Split(documentPropertiesSplit(i), StylePropertyValueHook)(0)
        propertyValue = Split(documentPropertiesSplit(i), StylePropertyValueHook)(1)
        modLookSetDocumentProperty propertyType, propertyValue
    Next i

End Sub

Sub modLookSetStyleProperties(iStylePropertyIndex As Integer)
    Dim i As Integer
    Dim arrStyleProperties As Variant

    arrStyleProperties = StyleProperties

    If arrStyleProperties(0) = "" Then Exit Sub

    For i = 0 To UBound(arrStyleProperties)
        modLookSetStylePropertiesByPart arrStyleProperties(i), iStylePropertyIndex
    Next i
End Sub

Sub modLookSetDocumentProperties(iDocumentPropertyIndex As Integer)
    If DocumentProperties = "" Then Exit Sub
    modLookSetDocumentPropertiesByPart DocumentProperties, iDocumentPropertyIndex
End Sub




Attribute VB_Name = "marginalnote"
Option Explicit

Sub modMarginalNoteMarginalNoteAsParagraph(Optional control As Object)
    SetParagraphStyle AUD_marginal_note
End Sub

Sub modMarginalNoteMarginalNoteAsTable(Optional control As Object)
    
    Dim wdTbl As Word.Table
    
    Dim bolExpandSelection As Boolean
    Dim wdRngEnd As Long
    Dim wdRng As Word.Range
    Dim wdPreviousPara As Word.Paragraph
    
    Dim lastParaStyle As String
    
    If Selection.Range.Text <> "" Then
             
        If Asc(Selection.Characters.Last) = 13 Then
            Selection.End = Selection.End - 1
            bolExpandSelection = True
        End If
        
        Set wdRng = Selection.Range
        wdRngEnd = wdRng.End
        
        lastParaStyle = wdRng.Paragraphs.Last.Style
        Selection.Collapse wdCollapseEnd

    End If
    
    If fctSelectionHasFollowingTable(Selection.Characters.Last) Then
        Selection.End = Selection.Characters.Last.start
    End If
    
    If fctSelectionHasPrecedingTable(Selection.Range.Characters.First) Then
       Selection.InsertParagraphAfter
       Selection.Collapse wdCollapseEnd
       Selection.Font.Reset
       Selection.Style = fctWordDoc.Styles(AUD_bodytext)
    End If
    
    Set wdTbl = fctGetTable(fctGetRng, 1, 1)
    
    With wdTbl
        .AllowAutoFit = False
        .PreferredWidthType = wdPreferredWidthPercent
        .PreferredWidth = 33
        .Style = fctWordDoc.Styles(AUD_tf_marginal_note)
        .Range.Paragraphs(1).Style = fctWordDoc.Styles(AUD_bodytext)
        
        wdTbl.Range.Cells(1).Select
        Selection.EndOf wdCell
    
        If Not wdRng Is Nothing Then
            Selection.Range.FormattedText = wdRng
            Selection.EndOf wdCell
            Selection.Range.Paragraphs.Last.Style = lastParaStyle
            wdRng.Select
            If bolExpandSelection = True Then
                Selection.Expand wdParagraph
            End If
            Selection.Delete
            
            Set wdPreviousPara = wdTbl.Range.Paragraphs(1).Previous(1)
            If Not wdPreviousPara Is Nothing Then
                If wdRng.start <> wdTbl.Range.Cells(1).Range.start And _
                   Not fctSelectionHasPrecedingTable(wdPreviousPara.Range.Characters.Last) And _
                   Not wdPreviousPara.Style = AUD_wanted_empty_para And _
                   Not wdPreviousPara.Style = AUD_wanted_empty_para_2 Then
                    If wdPreviousPara.Range = vbCr Then
                        On Error Resume Next
                        wdPreviousPara.Range.Delete
                        On Error GoTo 0
                    End If
                End If
            End If
            
        End If
         
        Selection.EndOf wdCell
  
    End With
    
    wdTbl.Range.Cells(1).Select
    Selection.Collapse wdCollapseStart
    Selection.EndOf wdCell
    
    Call InsertParaAfterTable(AUD_wanted_empty_para_after_marginal_note)
    
End Sub

Sub modMarginalNoteMarginalNoteTitle(Optional control As Object)
    SetParagraphStyle AUD_box_title
End Sub

Sub modMarginalNoteMarginalNoteAsComment(Optional control As Object)
    Dim objRange As Range
    Dim objInsertionPoint As Range
    Dim objComment As Comment
    Dim objField As Field
    
    With ActiveWindow.View
        If .SplitSpecial = wdPaneRevisions Then
            ActiveWindow.ActivePane.Close
        End If
        
        .ShowRevisionsAndComments = True
        .RevisionsView = wdRevisionsViewFinal
        If fctIsMac Then
            .RevisionsMode = wdBalloonRevisions
        Else
            modMarginalNoteSetRevisionsModeToMixedRevisions
        End If
        .RevisionsBalloonShowConnectingLines = True
        .RevisionsBalloonWidthType = wdBalloonWidthPercent
        .RevisionsBalloonWidth = 25
        .RevisionsBalloonSide = wdLeftMargin
    End With
    Options.CommentsColor = wdGray25
    
    Set objRange = Selection.Range.Duplicate
    objRange.Collapse wdCollapseEnd
    
    Set objField = Selection.Fields.Add(objRange)
    objField.Code.Text = " QUOTE " & _
        fctWordDoc.CustomDocumentProperties("strAnnotationPrefix")
    
    If fctWordDoc.CustomDocumentProperties("bolAnnotationCount") Then
        Set objInsertionPoint = objField.Code
        objInsertionPoint.Collapse wdCollapseEnd
        objInsertionPoint.Fields.Add(objInsertionPoint).Code.Text = " SEQ " & _
            fctWordDoc.CustomDocumentProperties("strAnnotationIdentifier") & " "
    End If
    
    Set objInsertionPoint = objField.Code
    objInsertionPoint.Collapse wdCollapseEnd
    objInsertionPoint.Text = " "
    
    objField.Code.Style = fctGetStyle(AUD_marginal_note_anchor)
   
    Set objComment = Selection.comments.Add(Range:=objField.Code)
    objComment.Author = "AUD annotation"
    objComment.Initial = fctWordDoc.CustomDocumentProperties("strAnnotationPrefix")
    objComment.Range.Style = AUD_bodytext
    objComment.Reference.Style = wdStyleDefaultParagraphFont
    objComment.Range.Paragraphs(1).Range.Style = wdStyleDefaultParagraphFont
    objComment.Range.Paragraphs(1).Range.Fields(1).Delete
    objComment.Edit
    
    ActiveDocument.Fields.Update
End Sub

Sub modMarginalNoteMarginalNoteAsFootnote(Optional control As Object)

    Dim objFootnote As Word.footnote
    Set objFootnote = Selection.Footnotes.Add(Range:=Selection.Range)
    objFootnote.Reference.Style = fctWordDoc.Styles(AUD_footnote_label)
    objFootnote.Range.Style = fctWordDoc.Styles(AUD_footnote)
    
    Selection.StartOf wdParagraph
    Selection.Expand wdCharacter
    Selection.Range.Style = ActiveDocument.Styles(AUD_footnote_label)
    Selection.EndOf wdParagraph
    
End Sub

Sub modMarginalNoteSetRevisionsModeToMixedRevisions()
    ActiveWindow.View.RevisionsMode = wdMixedRevisions
End Sub

Attribute VB_Name = "marginalnumber"
Option Explicit

Sub modMarginalNumberMarginalNumber(Optional control As Object)
    SetParagraphStyle AUD_marginal_number
End Sub

Sub modMarginalNumberInsertMarginalNumber(Optional control As Object)

    Dim objMarginalNumberConfig As MarginalNumberConfig
    Dim numEntriesFollowing As Long
    Dim objUndoRecord As Object
    
    Set objMarginalNumberConfig = _
            modMarginalNumberInsertGetConfig(modMarginalNumberGetRange(Selection.Range.Duplicate))
    
    numEntriesFollowing = fctArrayCount(objMarginalNumberConfig.GetMarginalNumberConfigEntriesFollowing)
    If numEntriesFollowing = -1 Then
        Set objUndoRecord = fctStartRecordUndo(fctGetFormCaption("296"))
        modMarginalNumberInsertEntryNew objMarginalNumberConfig.MarginalNumberConfigEntryNewNoRenumber
        fctEndRecordUndo objUndoRecord
        Exit Sub
    End If

    Load frmMarginalNumberInsert
    frmMarginalNumberInsert.SetMarginalNumberConfig objMarginalNumberConfig
    frmMarginalNumberInsert.Show

End Sub

Sub modMarginalNumberRenumberMarginalNumbers(Optional control As Object)
    
    Dim objMarginalNumberConfig As MarginalNumberConfig
    Dim numEntries As Long
    
    Set objMarginalNumberConfig = modMarginalNumberRenumGetConfig("1")
    
    numEntries = fctArrayCount(objMarginalNumberConfig.GetMarginalNumberConfigEntriesFollowing)
    If numEntries = -1 Then
        MsgBox fctGetFormCaption("307")
        Exit Sub
    End If
    
    Load frmMarginalNumberRenumber
    frmMarginalNumberRenumber.SetMarginalNumberConfig objMarginalNumberConfig
    frmMarginalNumberRenumber.Show

End Sub

Sub modMarginalNumberInsertEntryNew(objMarginalNumberEntry As MarginalNumberEntry)
    
    Dim objSelection As Range
    Dim collapseDirection As Integer
    Dim objParagraphNext As Paragraph
    Dim insertEmptyParagraphAfter As Boolean
    Dim nextMarginalNumber As MarginalNumberEntry

    Set objSelection = Selection.Range
    objSelection.Collapse wdCollapseEnd

    If Not fctIsCursorAtParagraphStart(objSelection) Then
        Set objSelection = objSelection.Paragraphs(1).Range.Characters.Last
        objSelection.Collapse wdCollapseStart
    End If

    If Not fctIsParagraphEmpty(objSelection.Paragraphs(1)) Then
        collapseDirection = wdCollapseEnd
        If fctIsCursorAtParagraphStart(objSelection) Then
            collapseDirection = wdCollapseStart
        End If
        objSelection.InsertParagraph
        If collapseDirection = wdCollapseEnd Then
            objSelection.Collapse wdCollapseEnd
        Else
            objSelection.Collapse wdCollapseStart
        End If
    End If

    objSelection.Text = objMarginalNumberEntry.MarginalNumberLabel
    objSelection.Paragraphs(1).Style = AUD_marginal_number
    objSelection.Collapse wdCollapseEnd

    Set objParagraphNext = objSelection.Paragraphs(1).Next

    insertEmptyParagraphAfter = True
    If Not objParagraphNext Is Nothing Then
        If fctIsParagraphEmpty(objParagraphNext) And _
           Not objParagraphNext.Range.Information(wdWithInTable) Then
            insertEmptyParagraphAfter = False
        End If
    End If

    If insertEmptyParagraphAfter Then
        objSelection.InsertParagraph
    Else
        Set objSelection = objSelection.Paragraphs(1).Range
    End If
    
    objSelection.Collapse wdCollapseEnd
    objSelection.Paragraphs(1).Style = AUD_bodytext
    objSelection.Select

End Sub

Sub modMarginalNumberRenumberEntriesFollowing(entriesFollowing() As MarginalNumberEntry)

    Dim i As Long
    Dim entriesFollowingCount As Long
    Dim objMarginalNumberEntry As MarginalNumberEntry
    Dim bookmarkNames As Variant
    Dim currentUserName As String
    Dim objRange As Range
    Dim currentMode As Variant

    currentMode = fctSetTrackChangeModeShowMarkupHideDeleted
    entriesFollowingCount = fctArrayCount(entriesFollowing)
    
    For i = 0 To entriesFollowingCount
    
        Set objMarginalNumberEntry = entriesFollowing(i)
        Set objRange = fctGetParagraphRange(objMarginalNumberEntry.MarginalNumberEntryRange.Paragraphs(1))
        
        If objRange.Text <> objMarginalNumberEntry.MarginalNumberLabel Then
        
            bookmarkNames = modMarginalNumberGetBookmarkNames(objMarginalNumberEntry.MarginalNumberEntryRange)
            objRange.Delete
            objRange.Text = objMarginalNumberEntry.MarginalNumberLabel
    
            modMarginalNumberReinsertBookmarks bookmarkNames, _
                fctGetParagraphRange(objMarginalNumberEntry.MarginalNumberEntryRange.Paragraphs(1))
        End If
    Next
    
    fctRestoreTrackChangeMode currentMode

End Sub

Function modMarginalNumberGetBookmarkNames(objRange As Range)
    Dim objBookmark As Bookmark
    Dim bookmarkNames As Variant
    objRange.Bookmarks.ShowHidden = True
    For Each objBookmark In objRange.Bookmarks
        fctArrayPush bookmarkNames, objBookmark.Name
    Next
    modMarginalNumberGetBookmarkNames = bookmarkNames
End Function

Sub modMarginalNumberReinsertBookmarks(bookmarkNames As Variant, objRange As Range)
    
    Dim numBookmarkNames As Long
    Dim i As Long
    numBookmarkNames = fctArrayCount(bookmarkNames)
    
    For i = 0 To numBookmarkNames
        objRange.Bookmarks.Add bookmarkNames(i)
    Next
    
End Sub

Function modMarginalNumberInsertGetConfig(objSelection As Range) As MarginalNumberConfig

    Dim objParagraphAfter As Paragraph
    Dim objParagraphBefore As Paragraph
    Dim patternLevels As Variant
    Dim objMarginalNumberEntryBefore As MarginalNumberEntry
    Dim objMarginalNumberEntryAfter As MarginalNumberEntry
    Dim objMarginalNumberEntryNewRenumber As MarginalNumberEntry
    Dim objMarginalNumberEntryNewNoRenumber As MarginalNumberEntry
    Dim marginalNumberEntriesFollowing() As MarginalNumberEntry
    Dim currentMode As Variant

    currentMode = fctSetTrackChangeModeShowMarkupHideDeleted

    patternLevels = _
        modMarginalNumberGetLevels(fctWordDoc.CustomDocumentProperties("strMarginalNumberPattern"))

    If objSelection.Paragraphs(1).Style = AUD_marginal_number And _
        Not fctIsParagraphEmpty(objSelection.Paragraphs(1)) And _
        fctIsCursorAtParagraphEnd(objSelection) Then
        Set objParagraphBefore = objSelection.Paragraphs(1)
    Else
        Set objParagraphBefore = _
            fctFindParagraphWithStyle(objSelection.Paragraphs(1), False, AUD_marginal_number)
    End If

    If objSelection.Paragraphs(1).Style = AUD_marginal_number And _
            Not fctIsParagraphEmpty(objSelection.Paragraphs(1)) And _
            fctIsCursorAtParagraphStart(objSelection) Then
        Set objParagraphAfter = objSelection.Paragraphs(1)
    Else
        Set objParagraphAfter = _
            fctFindParagraphWithStyle(objSelection.Paragraphs(1), True, AUD_marginal_number)
    End If

    Set objMarginalNumberEntryBefore = modMarginalNumberGetEntry(objParagraphBefore, patternLevels)
    Set objMarginalNumberEntryAfter = modMarginalNumberGetEntry(objParagraphAfter, patternLevels)
    Set objMarginalNumberEntryNewRenumber = modMarginalNumberGetEntryNew(objMarginalNumberEntryBefore, objMarginalNumberEntryAfter, True)
    Set objMarginalNumberEntryNewNoRenumber = modMarginalNumberGetEntryNew(objMarginalNumberEntryBefore, objMarginalNumberEntryAfter, False)

    marginalNumberEntriesFollowing = modMarginalNumberGetEntriesFollowing(objMarginalNumberEntryNewRenumber)
    
    Dim objMarginalNumberConfig As New MarginalNumberConfig
    objMarginalNumberConfig.SetMarginalNumberConfigEntriesFollowing = marginalNumberEntriesFollowing
    Set objMarginalNumberConfig.MarginalNumberConfigEntryNewRenumber = objMarginalNumberEntryNewRenumber
    Set objMarginalNumberConfig.MarginalNumberConfigEntryNewNoRenumber = objMarginalNumberEntryNewNoRenumber
    Set objMarginalNumberConfig.MarginalNumberConfigEntryBefore = objMarginalNumberEntryBefore
    objMarginalNumberConfig.MarginalNumberConfigEntriesFollowingChangeStatus = _
        modMarginalNumberEntriesFollowingChangeStatus(marginalNumberEntriesFollowing)

    fctRestoreTrackChangeMode currentMode
    
    Set modMarginalNumberInsertGetConfig = objMarginalNumberConfig

End Function

Function modMarginalNumberRenumGetConfig(startValue As String) As MarginalNumberConfig

    Dim patternLevels As Variant
    Dim marginalNumberEntriesFollowing() As MarginalNumberEntry
    Dim currentMode As Variant

    currentMode = fctSetTrackChangeModeShowMarkupHideDeleted

    patternLevels = _
        modMarginalNumberGetLevels(fctWordDoc.CustomDocumentProperties("strMarginalNumberPattern"))

    marginalNumberEntriesFollowing = modMarginalNumberGetEntries(patternLevels, startValue)
    
    Dim objMarginalNumberConfig As New MarginalNumberConfig
    objMarginalNumberConfig.SetMarginalNumberConfigEntriesFollowing = marginalNumberEntriesFollowing
    objMarginalNumberConfig.MarginalNumberConfigEntriesFollowingChangeStatus = _
        modMarginalNumberEntriesFollowingChangeStatus(marginalNumberEntriesFollowing)

    fctRestoreTrackChangeMode currentMode

    Set modMarginalNumberRenumGetConfig = objMarginalNumberConfig

End Function

Function modMarginalNumberGetEntryNew(objMarginalNumberEntryBefore As MarginalNumberEntry, _
            objMarginalNumberEntryAfter As MarginalNumberEntry, doRenumber As Boolean) As MarginalNumberEntry

    Dim objMarginalNumberEntry As MarginalNumberEntry

    Set objMarginalNumberEntry = New MarginalNumberEntry
    Set objMarginalNumberEntry.MarginalNumberEntryRange = objMarginalNumberEntryAfter.MarginalNumberEntryRange
    objMarginalNumberEntry.MarginalNumberLevels = objMarginalNumberEntryBefore.MarginalNumberLevels
    objMarginalNumberEntry.MarginalNumberPatternLevels = objMarginalNumberEntryBefore.MarginalNumberPatternLevels

    ' Level 0 empty
    If objMarginalNumberEntryBefore.MarginalNumberMainLevelValue = "" Or objMarginalNumberEntryAfter.MarginalNumberMainLevelValue = "" Then
        objMarginalNumberEntry.SetLevel = 0
    ' Level 0 identical
    ElseIf objMarginalNumberEntryBefore.MarginalNumberMainLevelValue = objMarginalNumberEntryAfter.MarginalNumberMainLevelValue Then
        objMarginalNumberEntry.SetLevel = IIf(doRenumber, 1, -1)
        objMarginalNumberEntry.MarginalNumberHasIdenticalMainLevel = True
    ' Level 0 different
    Else
        objMarginalNumberEntry.SetLevel = IIf(doRenumber, 0, 1)
    End If

    Set modMarginalNumberGetEntryNew = objMarginalNumberEntry

End Function

Function modMarginalNumberGetEntriesFollowing(objMarginalNumberEntryNew As MarginalNumberEntry) As MarginalNumberEntry()

    Dim objMarginalNumberEntry As MarginalNumberEntry
    Dim objMarginalNumberEntryNewCopy As MarginalNumberEntry
    Dim marginalNumberEntriesFollowing() As MarginalNumberEntry

    If objMarginalNumberEntryNew.MarginalNumberEntryRange Is Nothing Then Exit Function

    Set objMarginalNumberEntryNewCopy = objMarginalNumberEntryNew.Clone
    Set objMarginalNumberEntry = objMarginalNumberEntryNew.Clone
    
    Do
        If objMarginalNumberEntry.MarginalNumberEntryRange Is Nothing Then Exit Do

        If Not objMarginalNumberEntryNewCopy.MarginalNumberHasIdenticalMainLevel Or _
                objMarginalNumberEntry.MarginalNumberMainLevelValue = objMarginalNumberEntryNewCopy.MarginalNumberMainLevelValue Then
            
            If Not objMarginalNumberEntryNewCopy.MarginalNumberHasIdenticalMainLevel Then
                objMarginalNumberEntryNewCopy.SetLevel = 0
            Else
                objMarginalNumberEntryNewCopy.SetLevel = 1
            End If

            objMarginalNumberEntry.MarginalNumberLevels = objMarginalNumberEntryNewCopy.MarginalNumberLevels
            objMarginalNumberEntry.MarginalNumberPatternLevels = _
                objMarginalNumberEntryNewCopy.MarginalNumberPatternLevels
            objMarginalNumberEntry.MarginalNumberLabelHistoric = _
                fctGetParagraphText(objMarginalNumberEntry.MarginalNumberEntryRange.Paragraphs(1))

            modMarginalNumberEntryAdd marginalNumberEntriesFollowing, objMarginalNumberEntry
        Else
            Exit Do
        End If
        
        Set objMarginalNumberEntry = _
            modMarginalNumberGetEntry(fctFindParagraphWithStyle( _
                objMarginalNumberEntry.MarginalNumberEntryRange.Paragraphs(1), True, AUD_marginal_number), _
                    objMarginalNumberEntry.MarginalNumberPatternLevels)

    Loop

    modMarginalNumberGetEntriesFollowing = marginalNumberEntriesFollowing

End Function

Function modMarginalNumberGetEntries(patternLevels As Variant, startValue As String) As MarginalNumberEntry()

    Dim objMarginalNumberEntry As MarginalNumberEntry
    Dim objMarginalNumberEntryCopy As MarginalNumberEntry
    Dim marginalNumberEntries() As MarginalNumberEntry
    Dim objParagraph As Paragraph
    
    Set objParagraph = ActiveDocument.Paragraphs(1)
    
    If objParagraph.Style <> AUD_marginal_number Or fctIsParagraphEmpty(objParagraph) Then
        Set objParagraph = fctFindParagraphWithStyle(objParagraph, True, AUD_marginal_number)
    End If

    If objParagraph Is Nothing Then Exit Function
    
    Set objMarginalNumberEntry = modMarginalNumberGetEntryStart(objParagraph, patternLevels, startValue)
    If fctArrayCount(objMarginalNumberEntry.MarginalNumberLevels) = -1 Then
        objMarginalNumberEntry.SetLevel = 0
    End If

    modMarginalNumberEntryAdd marginalNumberEntries, objMarginalNumberEntry

    Set objMarginalNumberEntryCopy = objMarginalNumberEntry.Clone

    Do
        Set objMarginalNumberEntry = _
            modMarginalNumberGetEntry(fctFindParagraphWithStyle( _
                objMarginalNumberEntry.MarginalNumberEntryRange.Paragraphs(1), True, AUD_marginal_number), _
                patternLevels)
    
        If objMarginalNumberEntry.MarginalNumberEntryRange Is Nothing Then Exit Do
            
        objMarginalNumberEntryCopy.SetLevel = 0
        objMarginalNumberEntry.MarginalNumberLevels = objMarginalNumberEntryCopy.MarginalNumberLevels
        objMarginalNumberEntry.MarginalNumberPatternLevels = _
            objMarginalNumberEntryCopy.MarginalNumberPatternLevels
        objMarginalNumberEntry.MarginalNumberLabelHistoric = _
            fctGetParagraphText(objMarginalNumberEntry.MarginalNumberEntryRange.Paragraphs(1))

        modMarginalNumberEntryAdd marginalNumberEntries, objMarginalNumberEntry

    Loop

    modMarginalNumberGetEntries = marginalNumberEntries

End Function

Function modMarginalNumberGetEntry(objParagraph As Paragraph, patternLevels As Variant) As MarginalNumberEntry

    Dim marginalNumber As String
    Dim objMarginalNumberEntry As MarginalNumberEntry

    Set objMarginalNumberEntry = New MarginalNumberEntry
    
    If Not objParagraph Is Nothing Then
        marginalNumber = fctGetParagraphText(objParagraph)
        Set objMarginalNumberEntry.MarginalNumberEntryRange = objParagraph.Range
    End If

    objMarginalNumberEntry.MarginalNumberLevels = modMarginalNumberGetLevelsByPattern(marginalNumber, patternLevels)
    objMarginalNumberEntry.MarginalNumberPatternLevels = patternLevels
    objMarginalNumberEntry.MarginalNumberLabelHistoric = marginalNumber

    Set modMarginalNumberGetEntry = objMarginalNumberEntry

End Function

Function modMarginalNumberGetEntryStart(objParagraph As Paragraph, patternLevels As Variant, marginalNumber As String) As MarginalNumberEntry

    Dim marginalNumberHistoric As String
    Dim objMarginalNumberEntry As MarginalNumberEntry

    Set objMarginalNumberEntry = New MarginalNumberEntry
    
    If Not objParagraph Is Nothing Then
        marginalNumberHistoric = fctGetParagraphText(objParagraph)
        Set objMarginalNumberEntry.MarginalNumberEntryRange = objParagraph.Range
    End If

    objMarginalNumberEntry.MarginalNumberLevels = modMarginalNumberGetLevelsByPattern(marginalNumber, patternLevels)
    objMarginalNumberEntry.MarginalNumberPatternLevels = patternLevels
    objMarginalNumberEntry.MarginalNumberLabelHistoric = marginalNumberHistoric

    Set modMarginalNumberGetEntryStart = objMarginalNumberEntry

End Function

Function modMarginalNumberGetLevelsByPattern(marginalNumber As String, patternLevels As Variant) As Variant

    Dim levels As Variant
    Dim numPatternLevels As Integer
    Dim numLevels As Integer
    Dim patternLevelIndex As Integer
    Dim i As Integer

    levels = modMarginalNumberGetLevels(marginalNumber)

    numPatternLevels = fctArrayCount(patternLevels)
    numLevels = fctArrayCount(levels)

    For i = numLevels To 0 Step -1
        patternLevelIndex = modMarginalNumberGetPatternLevelIndex(i - 1, numPatternLevels)
        levels(i)(0) = patternLevels(patternLevelIndex)(0)
        If (levels(i)(2) <> patternLevels(patternLevelIndex)(2)) Then
            If i - 1 = -1 Then
                Erase levels
            Else
                ReDim Preserve levels(i - 1)
            End If
        End If
    Next

    modMarginalNumberGetLevelsByPattern = levels

End Function

Function modMarginalNumberGetNextLevelByPattern(levels As Variant, patternLevels As Variant) As Variant
    modMarginalNumberGetNextLevelByPattern = _
        patternLevels(modMarginalNumberGetPatternLevelIndex(fctArrayCount(levels), fctArrayCount(patternLevels)))
End Function

Function modMarginalNumberGetLevels(marginalNumber As String) As Variant

    Dim i As Long
    Dim marginalNumberParts As Variant
    Dim marginalNumberPart As String
    Dim currentType As String
    Dim previousType As String
    Dim levelValue As String
    Dim seperatorValue As String

    If marginalNumber = "" Then Exit Function

    previousType = "OTHER"

    For i = 1 To Len(marginalNumber)

        marginalNumberPart = Mid(marginalNumber, i, 1)

        currentType = "OTHER"
        If IsNumeric(marginalNumberPart) Then
            currentType = "NUM"
        ElseIf marginalNumberPart Like "[A-Z]" Then
            currentType = "A2Z"
        ElseIf marginalNumberPart Like "[a-z]" Then
            currentType = "a2z"
        End If

        If previousType <> "OTHER" And previousType <> currentType Then
            fctArrayPush marginalNumberParts, Array(seperatorValue, levelValue, previousType)
            levelValue = ""
            seperatorValue = ""
        End If

        If currentType = "OTHER" Then
            seperatorValue = seperatorValue & marginalNumberPart
        Else
            levelValue = levelValue & marginalNumberPart
        End If

        previousType = currentType

    Next

    If previousType <> "OTHER" Then
        fctArrayPush marginalNumberParts, Array(seperatorValue, levelValue, previousType)
    End If

    modMarginalNumberGetLevels = marginalNumberParts

End Function

Public Function modMarginalNumberGetPatternLevelIndex(patternLevelIndex As Integer, numPatternLevels As Integer) As Integer
    If numPatternLevels = 0 Or patternLevelIndex = -1 Then Exit Function
    modMarginalNumberGetPatternLevelIndex = 1 + patternLevelIndex - numPatternLevels * Int(patternLevelIndex / numPatternLevels)
End Function

Function modMarginalNumberGetLevelIncrement(levelValue As Variant) As String

    Dim i As Long
    Dim levelValuePart As String
    Dim levelValueParts As Variant
    Dim startLevel As String
    Dim maxLevel As String
    Dim incrLeft As Boolean

    If IsNumeric(levelValue) Then
        modMarginalNumberGetLevelIncrement = CLng(levelValue) + 1
        Exit Function
    End If

    startLevel = modMarginalNumberGetLevelStartValue(CStr(levelValue))
    maxLevel = Chr(Asc(startLevel) + 25)

    If levelValue = String(Len(levelValue), maxLevel) Then
        levelValue = Chr(Asc(startLevel) - 1) & levelValue
    End If

    ReDim levelValueParts(Len(levelValue) - 1)

    For i = UBound(levelValueParts) + 1 To 1 Step -1
        levelValueParts(i - 1) = Mid(levelValue, i, 1)
    Next

    For i = UBound(levelValueParts) + 1 To 1 Step -1

        levelValuePart = Mid(levelValue, i, 1)

        incrLeft = False
        If levelValuePart = maxLevel Then
            levelValuePart = startLevel
            incrLeft = True
        Else
            levelValuePart = Chr(Asc(levelValuePart) + 1)
        End If

        levelValueParts(i - 1) = levelValuePart
        If Not incrLeft Then Exit For

    Next

    modMarginalNumberGetLevelIncrement = Join(levelValueParts, "")

End Function

Function modMarginalNumberGetLevelStartValue(levelValue As String) As String
    Dim levelStartValue As String
    If Left(levelValue, 1) Like "[a-z]" Then
        levelStartValue = "a"
    ElseIf Left(levelValue, 1) Like "[A-Z]" Then
        levelStartValue = "A"
    End If
    modMarginalNumberGetLevelStartValue = levelStartValue
End Function

Function modMarginalNumberGetEntryLabel(levels As Variant) As String
    Dim numLevels As Integer
    Dim i As Integer
    Dim levelLabels As Variant
    numLevels = fctArrayCount(levels)
    For i = 0 To numLevels
        fctArrayPush levelLabels, levels(i)(0) & levels(i)(1)
    Next
    modMarginalNumberGetEntryLabel = Join(levelLabels, "")
End Function

Function modMarginalNumberEntryAdd(arrMarginalNumberEntry() As MarginalNumberEntry, _
    objMarginalNumberEntry As MarginalNumberEntry) As MarginalNumberEntry

    Dim currentIndex As Long

    currentIndex = fctArrayCount(arrMarginalNumberEntry) + 1
    If currentIndex = 0 Then
        ReDim arrMarginalNumberEntry(0)
    Else
        ReDim Preserve arrMarginalNumberEntry(currentIndex)
    End If

    Set arrMarginalNumberEntry(currentIndex) = objMarginalNumberEntry

End Function

Function modMarginalNumberGetRange(objSelection As Range) As Range
    
    Dim objRange As Range

    Set objRange = objSelection.Duplicate
    objRange.Collapse wdCollapseEnd

    If Not fctIsCursorAtParagraphStart(objRange) Then
        Set objRange = objRange.Paragraphs(1).Range.Characters.Last
        objRange.Collapse wdCollapseStart
    End If
    
    Set modMarginalNumberGetRange = objRange

End Function

Function modMarginalNumberEntriesFollowingChangeStatus(arrMarginalNumberEntry() As MarginalNumberEntry) As Integer

    Dim numMarginalNumberEntry As Long
    Dim i As Long
    Dim numChanges As Long
    
    numMarginalNumberEntry = fctArrayCount(arrMarginalNumberEntry)
    
    numChanges = -1
    For i = 0 To numMarginalNumberEntry
        If arrMarginalNumberEntry(i).MarginalNumberLabel <> arrMarginalNumberEntry(i).MarginalNumberLabelHistoric Then
            numChanges = numChanges + 1
        End If
    Next

    If numChanges = -1 Then
        modMarginalNumberEntriesFollowingChangeStatus = 0
    ElseIf numChanges < numMarginalNumberEntry Then
        modMarginalNumberEntriesFollowingChangeStatus = 1
    Else
        modMarginalNumberEntriesFollowingChangeStatus = 2
    End If

End Function

Function modMarginalNumberActivateTrackChange(doTrackRevisions As Boolean) As Boolean()
    Dim trackChangeSettings(1) As Boolean
    trackChangeSettings(0) = ActiveDocument.TrackRevisions
    ActiveDocument.TrackRevisions = doTrackRevisions
    If Not fctIsMac And fctGetWordVersion > 11 Then
        trackChangeSettings(1) = ActiveDocument.TrackFormatting
        ActiveDocument.TrackFormatting = False
    End If
    modMarginalNumberActivateTrackChange = trackChangeSettings
End Function

Sub modMarginalNumberDeactivateTrackChange(trackChangeSettings() As Boolean)
    ActiveDocument.TrackRevisions = trackChangeSettings(0)
    If Not fctIsMac And fctGetWordVersion > 11 Then
        ActiveDocument.TrackFormatting = trackChangeSettings(1)
    End If
End Sub
Attribute VB_Name = "metadata"
Option Explicit

Sub modMetaDataInsertMetaDataTable(Optional control As Object)
    Dim wdTbl As Table
    
    Set wdTbl = fctGetTable(fctGetRng, 2, 1)
    
    With wdTbl
        .AllowAutoFit = False
        .PreferredWidthType = wdPreferredWidthPercent
        .PreferredWidth = 100
        .Style = AUD_tf_meta
        .rows(1).Range.Text = fctWordDoc.CustomDocumentProperties("strMetaTableHeader").Value
        .rows(1).Range.Style = fctGetStyle(AUD_table_head_01)
        .rows(2).Select
    End With
    
    Selection.EndOf wdCell
    
    Call InsertParaAfterTable(AUD_wanted_empty_para_after_word_table)
End Sub

Sub modMetaDataInsertMetaDataInline(Optional control As Object)
    Dim fMacro As Field
    Dim fIf As Field
    
    Selection.Collapse wdCollapseEnd
    
    Set fMacro = Selection.Fields.Add(Selection.Range, wdFieldMacroButton, "modMetaDataEdit", False)
    fMacro.Code.Style = fctGetStyle(AUD_meta_inline)
    
    Set fIf = fMacro.Code.Fields.Add(modMetaDataCollapsed(fMacro.Code), wdFieldIf, "", False)
    fIf.Code.Text = " IF 1 = 1 """ & fctWordDoc.CustomDocumentProperties("strMetaInline").Value _
        & """ ""#AUD_meta_inline_general##AUD_meta_inline_general#"" "
    
    fMacro.Update
    fMacro.Select
    
    ActiveWindow.View.ShowFieldCodes = False
    
    Load frmMetaData
    frmMetaData.cmbMetaDataTypeOptions.Value = fctGetFormCaption(146)
    frmMetaData.Show
End Sub

Sub modMetaDataEdit()

    Dim uF As Object
    Dim objField As Field
    Dim metaData As String
    Set uF = New frmMetaData
    
    On Error Resume Next
    Set objField = Selection.Fields(2)
    On Error GoTo 0
    
    If objField Is Nothing Then Exit Sub
    
    If (UBound(Split(objField.Code.Text, "#AUD_meta_inline_general#")) > 0) Then
        metaData = Split(objField.Code.Text, "#AUD_meta_inline_general#")(1)
        uF.cmbMetaDataTypeOptions.Value = fctGetFormCaption(146)
    ElseIf (UBound(Split(objField.Code.Text, "#AUD_meta_inline_element#")) > 0) Then
        metaData = Split(objField.Code.Text, "#AUD_meta_inline_element#")(1)
        uF.cmbMetaDataTypeOptions.Value = fctGetFormCaption(143)
    ElseIf (UBound(Split(objField.Code.Text, "#AUD_meta_inline_attribute#")) > 0) Then
        metaData = Split(objField.Code.Text, "#AUD_meta_inline_attribute#")(1)
        uF.cmbMetaDataTypeOptions.Value = fctGetFormCaption(144)
    ElseIf (UBound(Split(objField.Code.Text, "#AUD_meta_inline_pi#")) > 0) Then
        metaData = Split(objField.Code.Text, "#AUD_meta_inline_pi#")(1)
        uF.cmbMetaDataTypeOptions.Value = fctGetFormCaption(145)
    Else
        Exit Sub
    End If

    metaData = Replace(metaData, "@@vbCrLf@@", vbCrLf)
    metaData = Replace(metaData, "@@vbLf@@", vbLf)
    metaData = Replace(metaData, "@@vbCr@@", vbCr)
    metaData = Replace(metaData, "@@vbTab@@", vbTab)
    uF.txtMetaData.Text = metaData
    uF.Show
End Sub

Function modMetaDataCollapsed(r As Range) As Range
    Dim rLastIns As Range
    Set rLastIns = r.Duplicate
    rLastIns.start = rLastIns.End
    Set modMetaDataCollapsed = rLastIns
End Function

Sub modMetaDataMetaDataParagraph(Optional control As Object)
    SetParagraphStyle AUD_meta_para
End Sub

Sub modMetaDataInsertSpecialInline01(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline01"
End Sub

Sub modMetaDataInsertSpecialInline02(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline02"
End Sub

Sub modMetaDataInsertSpecialInline03(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline03"
End Sub

Sub modMetaDataInsertSpecialInline04(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline04"
End Sub

Sub modMetaDataInsertSpecialInline05(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline05"
End Sub

Sub modMetaDataInsertSpecialInline06(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline06"
End Sub

Sub modMetaDataInsertSpecialInline07(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline07"
End Sub

Sub modMetaDataInsertSpecialInline08(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline08"
End Sub

Sub modMetaDataInsertSpecialInline09(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline09"
End Sub

Sub modMetaDataInsertSpecialInline10(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline10"
End Sub

Sub modMetaDataInsertSpecialInline11(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline11"
End Sub

Sub modMetaDataInsertSpecialInline12(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline12"
End Sub

Sub modMetaDataInsertSpecialInline13(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline13"
End Sub

Sub modMetaDataInsertSpecialInline14(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline14"
End Sub

Sub modMetaDataInsertSpecialInline15(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline15"
End Sub

Sub modMetaDataInsertSpecialInline16(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline16"
End Sub

Sub modMetaDataInsertSpecialInline17(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline17"
End Sub

Sub modMetaDataInsertSpecialInline18(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline18"
End Sub

Sub modMetaDataInsertSpecialInline19(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline19"
End Sub

Sub modMetaDataInsertSpecialInline20(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline20"
End Sub

Sub modMetaDataInsertSpecialInline21(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline21"
End Sub

Sub modMetaDataInsertSpecialInline22(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline22"
End Sub

Sub modMetaDataInsertSpecialInline23(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline23"
End Sub

Sub modMetaDataInsertSpecialInline24(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline24"
End Sub

Sub modMetaDataInsertSpecialInline25(Optional control As Object)
    modMetaDataInsertSpecialInline "strSpecialInline25"
End Sub

Sub modMetaDataInsertSpecialInline(docVarKey As String)
    Dim objInsertionPoint As Range
    Dim objComment As Comment
    Dim objField As Field
    Dim splitDocVar() As String
    
    splitDocVar = Split(fctWordDoc.CustomDocumentProperties(docVarKey), ";")
    
    With ActiveWindow.View
        If .SplitSpecial = wdPaneRevisions Then
            ActiveWindow.ActivePane.Close
        End If
        
        .ShowRevisionsAndComments = True
        .RevisionsView = wdRevisionsViewFinal
        If fctIsMac Then
            .RevisionsMode = wdBalloonRevisions
        Else
            modMarginalNoteSetRevisionsModeToMixedRevisions
        End If
        .RevisionsBalloonShowConnectingLines = True
        .RevisionsBalloonWidthType = wdBalloonWidthPercent
        .RevisionsBalloonWidth = 25
        .RevisionsBalloonSide = wdLeftMargin
    End With
    Options.CommentsColor = wdGray25
   
    Set objComment = Selection.comments.Add(Range:=Selection.Range, Text:="")
    objComment.Initial = splitDocVar(0)
    objComment.Author = "AUD special | " & splitDocVar(1)
    objComment.Range.Style = AUD_bodytext
    objComment.Reference.Style = wdStyleDefaultParagraphFont
    objComment.Range.Paragraphs(1).Range.Style = wdStyleDefaultParagraphFont
    objComment.Range.Paragraphs(1).Range.Fields(1).Delete
    objComment.Edit
    
    ActiveDocument.Fields.Update
End Sub


Attribute VB_Name = "online"
Option Explicit

Sub modWebEmail(Optional control As Object)
    fctOnline (AUD_web_email)
End Sub

Sub modWebURL(Optional control As Object)
    fctOnline (AUD_web_url)
End Sub

Function fctOnline(strOnlineStyle As String) As String

If Not Selection.Range = "" Then
    Selection.Style = fctWordDoc.Styles(strOnlineStyle)
Else
    MsgBox fctGetErrorMsg(Format(1, "00"))
End If

fctOnline = Selection.Style

End Function
Attribute VB_Name = "parahead"
Option Explicit

'8195

Sub modParahead(Optional control As Object)
    If Not fctGetRng = "" Then
        With fctGetRng
            .Select
            .Style = fctWordDoc.Styles(AUD_parahead)
            .Collapse wdCollapseEnd
            .InsertSymbol CharacterNumber:=fctGetSpaceParahead, Unicode:=True, Font:=fctGetFontName
            .Collapse wdCollapseEnd
            Selection.MoveRight unit:=wdCharacter, Count:=1
            If Not Selection.Next Is Nothing Then
                If Selection.Next.Characters(1) = Chr(32) Then
                    Selection.Next.Characters(1).Delete
                End If
            End If
            If Not Selection.Previous Is Nothing Then
                If Selection.Previous.Characters(1) = Chr(32) Then
                    Selection.Previous.Characters(1).Delete
                End If
            End If
            .Style = fctWordDoc.Styles(wdStyleDefaultParagraphFont)
        End With
        Selection.MoveRight unit:=wdCharacter, Count:=1
        Selection.Font.Reset
    Else
        MsgBox fctGetErrorMsg(Format(1, "00"))
    End If
End Sub
Attribute VB_Name = "quotation"
Option Explicit

Sub modQuotation01Inline(Optional control As Object)
    fctQuotationInline (AUD_quotation_01_inline)
End Sub

Sub modQuotation01InlineAuthor(Optional control As Object)
    fctQuotationInline (AUD_quotation_01_inline_author)
End Sub

Sub modQuotation01(Optional control As Object)
    fctQuotation (AUD_quotation_01)
End Sub

Sub modQuotation01Author(Optional control As Object)
    fctQuotation (AUD_quotation_01_author)
End Sub

Sub modQuotation02Inline(Optional control As Object)
    fctQuotationInline (AUD_quotation_02_inline)
End Sub

Sub modQuotation02InlineAuthor(Optional control As Object)
    fctQuotationInline (AUD_quotation_02_inline_author)
End Sub

Sub modQuotation02(Optional control As Object)
    fctQuotation (AUD_quotation_02)
End Sub

Sub modQuotation02Author(Optional control As Object)
    fctQuotation (AUD_quotation_02_author)
End Sub

Sub fctQuotation(strQuotationStyle As String)
    SetParagraphStyle strQuotationStyle
End Sub

Sub fctQuotationInline(strQuotationStyle As String)

    Dim wdRng As Word.Range
    Set wdRng = Selection.Range
    
    If Not wdRng = "" Then
        Selection.Range.Style = fctWordDoc.Styles(strQuotationStyle)
    Else
        MsgBox fctGetErrorMsg(Format(1, "00"))
    End If

End Sub


Attribute VB_Name = "revisions"
Option Explicit

Sub modRevisionsShowOriginal(Optional control As Object)
    With ActiveWindow.View
        .RevisionsView = wdRevisionsViewOriginal
        .ShowRevisionsAndComments = False
    End With
    modStoreRevisionSettings
End Sub

Sub modRevisionsShowFinal(Optional control As Object)
    With ActiveWindow.View
        If .RevisionsView = wdRevisionsViewOriginal Then
            .ShowRevisionsAndComments = False
        Else
            .ShowRevisionsAndComments = Not .ShowRevisionsAndComments
        End If
        .RevisionsView = wdRevisionsViewFinal
    End With
    modStoreRevisionSettings
End Sub

Sub modStoreRevisionSettings()
    With ActiveWindow.View
        fctWordDoc.CustomDocumentProperties("bolShowRevisions") = .ShowRevisionsAndComments
        fctWordDoc.CustomDocumentProperties("strRevisionsView") = .RevisionsView
    End With
    fctWordDoc.Saved = False
End Sub
Attribute VB_Name = "ribbon"
Option Explicit

Dim wdIRibbonUI As IRibbonUI

Sub IRibbonUI_OnLoad(ribbon As IRibbonUI)
    Set wdIRibbonUI = ribbon
End Sub

Sub IRibbonUI_Invalidate()
    If Not wdIRibbonUI Is Nothing Then
        wdIRibbonUI.Invalidate
    End If
End Sub

Sub AUD_GetBoxLabel(control As IRibbonControl, ByRef returnedVal)
    Dim boxTitleParts As Variant
    boxTitleParts = Split(fctWordDoc.CustomDocumentProperties(control.ID).Value, ";")
    returnedVal = boxTitleParts(2)
End Sub

Sub AUD_GetBoxVisible(control As IRibbonControl, ByRef visible)
    Dim boxTitleParts As Variant
    boxTitleParts = Split(fctWordDoc.CustomDocumentProperties(control.ID).Value, ";")
    visible = CBool(boxTitleParts(0)) And CBool(boxTitleParts(1))
End Sub
Attribute VB_Name = "smartindex"
Option Explicit

Sub modSmartIndexShowSmartId()

    Dim uF As Object
    Dim objField As Field
    Dim sidData As String
    Set uF = New frmSmartIndexInfo

    On Error Resume Next
    Set objField = Selection.Fields(2)
    On Error GoTo 0

    If objField Is Nothing Then Exit Sub

    If (UBound(Split(objField.Code.Text, "#AUD_meta_sid#")) > 0) Then
        sidData = Split(objField.Code.Text, "#AUD_meta_sid#")(1)
    Else
        Exit Sub
    End If

    sidData = Replace(sidData, "@@@", "")

    uF.lblSmartIndex = sidData
    uF.txtSmartIndex = sidData
    uF.Show

End Sub

Sub modSmartIndexGenerateRefreshSmartIds(arrSmartIdEntry() As SmartIdEntry, _
        objParagraph As Paragraph, objTable As Table, chapterCurrent As String, _
        chapterPrev As String, paragraphNum As Long, prevNestingLevel As Long)

    Dim currentRowIndex As Long
    Dim currentNestingLevel As Long
    Dim smartIdAdded As Boolean

    Do
        If objParagraph Is Nothing Then
            Exit Sub
        End If

        currentNestingLevel = modSmartIndexGetNestingLevel(objTable)
        If currentNestingLevel < prevNestingLevel Then
            Exit Sub
        ElseIf currentNestingLevel > prevNestingLevel Then
            modSmartIndexGenerateRefreshSmartIds arrSmartIdEntry, objParagraph, _
                objTable, chapterCurrent, chapterPrev, paragraphNum, currentNestingLevel
        End If

        smartIdAdded = True
        If modSmartIndexIsSmartIdParagraph(objParagraph, objTable) Then
            If modSmartIndexIsSmartIdTable(objTable) Then
                If modSmartIndexInsertTableSmartId(arrSmartIdEntry, objParagraph, _
                        objTable, chapterCurrent, chapterPrev, paragraphNum, currentRowIndex) Then
                    currentRowIndex = objParagraph.Range.Cells(1).RowIndex
                End If
            Else
                modSmartIndexInsertSmartId arrSmartIdEntry, objParagraph, objTable, _
                    chapterCurrent, chapterPrev, paragraphNum
            End If
        End If

        On Error Resume Next
        Set objParagraph = objParagraph.Next
        Set objTable = modSmartIndexGetTable(objParagraph)
        On Error GoTo 0

    Loop

End Sub

Function modSmartIndexGetTable(objParagraph As Paragraph) As Table
    If objParagraph Is Nothing Then Exit Function
    If objParagraph.Range.tables.Count > 0 Then
        Set modSmartIndexGetTable = objParagraph.Range.tables(1)
    End If
End Function

Function modSmartIndexIsSmartIdTable(objTable As Table) As Boolean
    If objTable Is Nothing Then Exit Function
    If objTable.columns.Count = 1 Then Exit Function
    modSmartIndexIsSmartIdTable = True
End Function

Function modSmartIndexIsSmartIdParagraph(objParagraph As Paragraph, objTable As Table) As Boolean
    If Not objTable Is Nothing Then
        If objTable.Style.NameLocal = AUD_tf_meta Or _
            objParagraph.Range.Cells.Count = 0 Then Exit Function
    End If
    modSmartIndexIsSmartIdParagraph = True
End Function

Function modSmartIndexInsertTableSmartId(arrSmartIdEntry() As SmartIdEntry, objParagraph As Paragraph, _
        objTable As Table, chapterCurrent As String, chapterPrev As String, _
        paragraphNum As Long, currentRowIndex As Long) As Boolean

    If currentRowIndex <> objParagraph.Range.Cells(1).RowIndex Then
        modSmartIndexInsertTableSmartId = _
            modSmartIndexInsertSmartId(arrSmartIdEntry, objParagraph, objTable, _
                chapterCurrent, chapterPrev, paragraphNum)
        Exit Function
    End If

End Function

Function modSmartIndexInsertSmartId(arrSmartIdEntry() As SmartIdEntry, objParagraph As Paragraph, _
        objTable As Table, chapterCurrent As String, chapterPrev As String, _
        paragraphNum As Long) As Boolean

    Dim objParagraphRange As Range
    Dim objSmartIdEnty As SmartIdEntry

    Set objParagraphRange = objParagraph.Range
    objParagraphRange.End = objParagraphRange.End - 1
    chapterCurrent = modSmartIndexGetChapter(objParagraphRange, chapterCurrent)

    If Not modSmartIndexAddToParagraph(objParagraph, objTable) Then Exit Function

    If chapterPrev = chapterCurrent Then
        paragraphNum = paragraphNum + 1
    Else
        paragraphNum = 1
    End If
    chapterPrev = chapterCurrent

    Set objSmartIdEnty = New SmartIdEntry
    objSmartIdEnty.SmartIdEntrySmartId = modSmartIndexGetSmartId(objParagraphRange)
    Set objSmartIdEnty.SmartIdEntryRange = objParagraphRange
    objSmartIdEnty.SmartIdEntryRunningNum = _
        "#" & Format(chapterCurrent, "00") & "." & Format(paragraphNum, "0000")

    modSmartIndexEntryAdd arrSmartIdEntry, objSmartIdEnty

    modSmartIndexInsertSmartId = True

End Function

Sub modSmartIndexInsertSmartIdField(objSmartIdEntry As SmartIdEntry)

    Dim fMacro As Field
    Dim fIf As Field
    Dim objRange As Range
    Dim arrBookmarks As Variant

    Set objRange = objSmartIdEntry.SmartIdEntryRange.Duplicate
    objRange.Collapse wdCollapseStart
    
    modSmartIndexGetBookmarksAtRangeStart objRange, arrBookmarks
    
    If objRange.OMaths.Count > 0 Then
        objRange.Text = "###SID###"
        objRange.OMaths(1).Remove
    End If

    Set fMacro = objRange.Fields.Add(objRange, wdFieldMacroButton, "modSmartIndexShowSmartId", False)
    fMacro.Code.Style = fctGetStyle(AUD_meta_sid)

    Set fIf = fMacro.Code.Fields.Add(modMetaDataCollapsed(fMacro.Code), wdFieldIf, "", False)
    fIf.Code.Text = " IF 1 = 1 """ & fctWordDoc.CustomDocumentProperties("strMetaSID").Value _
        & """ ""#AUD_meta_sid#" & objSmartIdEntry.SmartIdEntryRunningNum & "@@@" & _
            objSmartIdEntry.SmartIdEntrySmartId & "#AUD_meta_sid#"" "

    fMacro.Update
    
    modSmartIndexRestoreBookmarksAtRangeStart arrBookmarks, fctGetFieldRange(fMacro).End
    
End Sub

Sub modSmartIndexGetBookmarksAtRangeStart(objRange As Range, arrBookmarks As Variant)
    objRange.Bookmarks.ShowHidden = True
    Dim objBookmark As Bookmark
    For Each objBookmark In objRange.Bookmarks
        If objBookmark.start = objRange.start Then
            fctArrayPushObject arrBookmarks, objBookmark
        End If
    Next
End Sub

Sub modSmartIndexRestoreBookmarksAtRangeStart(arrBookmarks As Variant, smartIdEnd As Long)
    Dim i As Long
    Dim objBookmark As Bookmark
    Dim numBookmarks As Long
    numBookmarks = fctArrayCount(arrBookmarks)
    For i = 0 To numBookmarks
        Set objBookmark = arrBookmarks(i)
        objBookmark.start = smartIdEnd
    Next
End Sub

Function modSmartIndexGetSmartIdFromField(objField As Field) As String

    Dim parts As Variant
    Dim sidData As String
    Dim fIf As Field

    If objField.Code.Fields.Count = 0 Then Exit Function
    Set fIf = objField.Code.Fields(1)

    If (UBound(Split(fIf.Code.Text, "#AUD_meta_sid#")) > 0) Then
        sidData = Split(fIf.Code.Text, "#AUD_meta_sid#")(1)
    End If

    If sidData = "" Then Exit Function

    modSmartIndexGetSmartIdFromField = Split(sidData, "@@@")(1)

End Function

Function modSmartIndexGetNewSmartId() As String
    Const s = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    Const n = 8
    Dim i As Integer
    Dim r As Integer
    Dim upperbound As Integer
    Dim lowerbound As Integer
    Dim smartId As String

    upperbound = Len(s) - 1
    lowerbound = 1
    Randomize

    For i = 0 To n - 1
        r = CInt(Int((upperbound * Rnd()) + lowerbound))
        smartId = smartId & Mid(s, r, 1)
    Next

    modSmartIndexGetNewSmartId = "sid" & smartId
End Function

Function modSmartIndexGetSmartId(objRange As Range) As String
    Dim objField As Field
    Dim objSmartIdField As Field
    For Each objField In objRange.Fields
        If objField.Type = wdFieldMacroButton Then
            If InStr(objField.Code.Text, "#AUD_meta_sid#") > 0 Then
                If objSmartIdField Is Nothing Then
                    Set objSmartIdField = objField
                Else
                    objField.Delete
                End If
            End If
        End If
    Next
    If Not objSmartIdField Is Nothing Then
        modSmartIndexGetSmartId = modSmartIndexGetSmartIdFromField(objSmartIdField)
        objSmartIdField.Delete
    Else
        modSmartIndexGetSmartId = modSmartIndexGetNewSmartId
    End If
End Function

Function modSmartIndexGetChapter(objRange As Range, chapterCurrent As String) As String
    Dim chapter As String
    chapter = chapterCurrent
    If objRange.Paragraphs(1).Style.NameLocal = ActiveDocument.Styles(AUD_h1).NameLocal Then
        chapter = objRange.ListFormat.ListString
        If chapter = "" Then chapter = "1"
    End If
    If chapter = "" Then chapter = "1"
    modSmartIndexGetChapter = chapter
End Function

Function modSmartIndexIsExceptionStyle(objParagraph As Paragraph) As Boolean
    Dim i As Integer
    Dim arrSmartIdExceptionStyles As Variant
    Dim arrSmartIdExceptionStylesNum As Long
    arrSmartIdExceptionStyles = Filter(SmartIdExceptionStyles, objParagraph.Style.NameLocal)
    arrSmartIdExceptionStylesNum = fctArrayCount(arrSmartIdExceptionStyles)
    For i = 0 To arrSmartIdExceptionStylesNum
        If objParagraph.Style.NameLocal = arrSmartIdExceptionStyles(i) Then
            modSmartIndexIsExceptionStyle = True
            Exit Function
        End If
    Next
End Function

Function modSmartIndexGetNestingLevel(objTable As Table) As Integer
    If objTable Is Nothing Then Exit Function
    modSmartIndexGetNestingLevel = objTable.nestingLevel
End Function

Function modSmartIndexAddToParagraph(objParagraph As Paragraph, objTable As Table) As Boolean

    Dim objRange As Range
    Set objRange = objParagraph.Range
    objRange.End = objRange.End - 1
    objRange.Collapse wdCollapseStart

    If objRange.IsEndOfRowMark Then Exit Function
    If modSmartIndexIsExceptionStyle(objParagraph) Then Exit Function

    If fctIsParagraphEmpty(objParagraph) Then
        If objTable Is Nothing Then Exit Function
        If objTable.columns.Count = 1 Then Exit Function
    End If

    modSmartIndexAddToParagraph = True

End Function

Sub modSmartIndexEntryAdd(arrSmartIdEntry() As SmartIdEntry, objSmartIdEntry As SmartIdEntry)
    Dim currentIndex As Long
    currentIndex = fctArrayCount(arrSmartIdEntry) + 1
    If currentIndex = 0 Then
        ReDim arrSmartIdEntry(0)
    Else
        ReDim Preserve arrSmartIdEntry(currentIndex)
    End If
    Set arrSmartIdEntry(currentIndex) = objSmartIdEntry
End Sub

Function modSmartIndexExcludeSmartIdFromRange(objRange As Range) As Range
    
    Dim objRangeTest As Range
    Dim objParagraphRange As Range
    Dim objRangeCopy As Range
    
    If objRange Is Nothing Then Exit Function
 
    Set objRangeCopy = objRange.Duplicate
    objRangeCopy.Collapse wdCollapseStart
    objRangeCopy.End = objRangeCopy.End + 1
    
    Set objRangeTest = modSmartIndexGetSmartIdField(objRangeCopy)

    If Not objRangeTest Is Nothing Then
        objRange.start = objRangeTest.End
    End If
    
    Set modSmartIndexExcludeSmartIdFromRange = objRange
End Function

Function modSmartIndexGetSmartIdField(objRange As Range) As Range
    If objRange Is Nothing Then Exit Function
    If objRange.Fields.Count = 0 Then Exit Function
    If modSmartIndexIsSmartIdField(objRange.Fields(1)) Then
        Set modSmartIndexGetSmartIdField = fctGetFieldRange(objRange.Fields(1))
    End If
End Function

Function modSmartIndexIsSmartIdField(objField As Field) As Boolean
    modSmartIndexIsSmartIdField = objField.Type = wdFieldMacroButton And _
        InStr(objField.Code.Text, "#AUD_meta_sid#") > 0
End Function
Attribute VB_Name = "specialchars"
Option Explicit

Sub modShowDashSpace(Optional control As Object)
    Load frmDashesSpaces
    frmDashesSpaces.Show
End Sub

Sub modShowArrowGlyphs(Optional control As Object)
    Load frmArrows
    frmArrows.Show
End Sub

Sub modShowAccentGlyphs(Optional control As Object)
    Load frmAccents
    frmAccents.Show
End Sub

Sub modShowFractionGlyphs(Optional control As Object)
    Load frmFraction
    frmFraction.Show
End Sub

Sub modShowMathGlyphs(Optional control As Object)
    Load frmMaths
    frmMaths.Show
End Sub

Sub modShowIconGlyphs(Optional control As Object)
    Load frmIcons
    frmIcons.Show
End Sub

Sub modShowCircledNumberGlyphs(Optional control As Object)
    Load frmEnclosedAlphanum
    frmEnclosedAlphanum.Show
End Sub

Sub modShowIpaGlyphs(Optional control As Object)
    Load frmIpas
    frmIpas.Show
End Sub

Sub modShowGreekGlyphs(Optional control As Object)
    Load frmGreeks
    frmGreeks.Show
End Sub

Sub modShowOtherLanguagesGlyphs(Optional control As Object)
    Load frmOtherLang
    frmOtherLang.Show
End Sub

Sub modSpecialCharsFormatAsIpa(Optional control As Object)
    Dim wdRng As Word.Range
    Set wdRng = Selection.Range
    
    If Not wdRng = "" Then
        Selection.Range.Style = fctWordDoc.Styles(AUD_ipa)
    Else
        MsgBox fctGetErrorMsg(Format(1, "00"))
    End If
End Sub

Sub modShowBracketGlyphs(Optional control As Object)
    Load frmBrackets
    frmBrackets.Show
End Sub

Sub modShowCustom01(Optional control As Object)
    Load frmCustom01
    frmCustom01.Show
End Sub

Sub modShowCustom02(Optional control As Object)
    Load frmCustom02
    frmCustom02.Show
End Sub

Attribute VB_Name = "specialcontainer"
Sub modSpecialContainerCreate01(Optional control As Object)
    modSpecialContainerCreate AUD_tf_special_container_01
End Sub

Sub modSpecialContainerCreate02(Optional control As Object)
    modSpecialContainerCreate AUD_tf_special_container_02
End Sub

Sub modSpecialContainerCreate03(Optional control As Object)
    modSpecialContainerCreate AUD_tf_special_container_03
End Sub

Sub modSpecialContainerCreate04(Optional control As Object)
    modSpecialContainerCreate AUD_tf_special_container_04
End Sub

Sub modSpecialContainerCreate05(Optional control As Object)
    modSpecialContainerCreate AUD_tf_special_container_05
End Sub

Sub modSpecialContainerCreate(strTableStyle As String)
    ' clear selection, if only one paragraph is selected and paragraph
    ' style applied is either AUD_wanted_empty_para_after_word_table or
    ' AUD_wanted_empty_para_after_marginal_note
    If Selection.Paragraphs.Count = 1 And _
     (Selection.Paragraphs(1).Style = AUD_wanted_empty_para_after_word_table Or _
      Selection.Paragraphs(1).Style = AUD_wanted_empty_para_after_marginal_note) Then
        Selection.Paragraphs(1).Range.Characters.Last.Select
        Selection.Collapse wdCollapseStart
    End If
    If Selection.Range.Text <> "" Then
        modSpecialContainerCreateSelection strTableStyle
    Else
        modSpecialContainerCreateNoSelection strTableStyle
    End If
End Sub

Sub modSpecialContainerCreateSelection(strTableStyle As String)
    
    Dim wdRng As Word.Range
    Dim wdRngEnd As Long
    Dim wdTbl As Table
    Dim wdPreviousPara As Paragraph

    ' (A) Remove character formatting from last paragraph in selection
    Selection.Paragraphs.Last.Range.Characters.Last.Style = wdStyleDefaultParagraphFont

    ' (B) If start is not beginning of paragraph, insert para before
    '     and reduce selection to not include first newline character.
    '     Required in case selection ends in an empty paragraph, text in first paragraph
    '     will be moved to first cell of newly created table, if step is omitted
    If Selection.start <> Selection.Paragraphs.First.Range.start Then
        Selection.InsertParagraphBefore
        Selection.start = Selection.Characters.First.End
    End If

    ' (C) If last character is not Chr(13) / Chr(13) & Chr(7) insert
    '     para after and extend selection to include newline character.
    '     Required to make sure that formatting of last paragraph is later included in selection
    If Selection.Characters.Last <> Chr(13) And Selection.Characters.Last <> Chr(13) & Chr(7) Then
        Selection.InsertParagraphAfter
    End If
    
    ' (D) Make sure that last table in selection is fully selected, copying of incomplete tables
    '     might cause Word to crash
    Dim wdRngEoR As Range
    Set wdRngEoR = Selection.Range
    wdRngEoR.start = Selection.End - 1
    wdRngEoR.End = Selection.End - 1
    If Selection.Characters.Last = Chr(13) & Chr(7) And Not wdRngEoR.IsEndOfRowMark Then
        Selection.MoveEnd wdTable
    End If
    
    ' Store selection
    Set wdRng = Selection.Range
    
    If wdRng Is Nothing Then
        Exit Sub
    End If
    
    ' Store end position of selection
    wdRngEnd = wdRng.End
    
    ' Reduce selection to not include Chr(13), required to make sure that selection collapse will not
    ' move cursor to following paragraph or cell
    If Selection.Characters.Last = Chr(13) Then
        Selection.End = Selection.End - 1
    End If
    
    Selection.Collapse wdCollapseEnd
    
    ' Insert paragraph after if first character of selection is preceded by table or is
    ' within a table, this will avoid merging of tables
    If fctSelectionHasPrecedingTable(wdRng.Characters.First) Or _
       wdRng.Characters.First.Information(wdWithInTable) Then
       Selection.InsertParagraphAfter
       Selection.Collapse wdCollapseEnd
       Selection.Font.Reset
       Selection.Style = fctWordDoc.Styles(AUD_bodytext)
    End If
    
    Selection.InsertParagraphAfter
    Selection.Style = wdStyleDefaultParagraphFont
    Selection.Collapse wdCollapseEnd
    Selection.Style = fctGetStyle(AUD_wanted_empty_para_after_word_table)
    Selection.Style = wdStyleDefaultParagraphFont

    ' Insert table
    Set wdTbl = fctGetTable(fctGetRng, 1, 1)
    With wdTbl
        .AllowAutoFit = True
        .PreferredWidthType = wdPreferredWidthPercent
        .PreferredWidth = 100
        .Style = strTableStyle
        .Range.Style = fctWordDoc.Styles(AUD_bodytext)
    End With
    
    ' Restore range to original selection
    wdRng.End = wdRngEnd

    ' Select first cell of inserted table and insert paragraph
    ' Required because of strange effects when copying only parts of a table
    wdTbl.rows(1).Cells(1).Select
    wdTbl.rows(1).Cells(1).Range.InsertParagraphAfter
    Selection.EndOf wdCell
    
    ' Copy selected content to table
    Selection.Range.FormattedText = wdRng
    
    ' Delete first (empty) paragraph in cell
    wdTbl.rows(1).Cells(1).Range.Paragraphs.First.Range.Text = ""
    
    ' Apply paragraph style of original selection to last paragraph in cell,
    ' select end of cell and type backspace
    ' Required because removing last paragraph in cell will always copy style to
    ' second last paragraph
    If wdRng.Characters.Last = Chr(13) Then
        wdTbl.rows(1).Cells(1).Range.Paragraphs.Last.Style = wdRng.Paragraphs.Last.Style
        wdTbl.rows(1).Cells(1).Select
        Selection.EndOf wdCell
        Selection.TypeBackspace
    End If

    ' Remove selection
    If wdRng.tables.Count = 0 Then
        wdRng.Delete
    Else
        If wdRng.Cells.Count > 1 Then
            wdRng.rows.Delete
        Else
            wdRng.Delete
        End If
    End If

    ' Delete paragraph preceding the inserted table, if
    ' (A) it is not preceded by table and
    ' (B) paragraph style AUD_wanted_empty_para or AUD_wanted_empty_para_2 is applied
    Set wdPreviousPara = wdTbl.Range.Paragraphs(1).Previous(1)
    If Not wdPreviousPara Is Nothing Then
        If wdRng.start <> wdTbl.rows(1).Cells(1).Range.start And _
           Not fctSelectionHasPrecedingTable(wdPreviousPara.Range.Characters.Last) And _
           Not wdPreviousPara.Style = AUD_wanted_empty_para And _
           Not wdPreviousPara.Style = AUD_wanted_empty_para_2 Then
            If wdPreviousPara.Range = vbCr Then
                On Error Resume Next
                wdPreviousPara.Range.Delete
                On Error GoTo 0
            End If
        End If
    End If
    
    ' Insert paragraph after empty para, if no paragraph or table follows
    If wdTbl.Range.Paragraphs.Last.Next.Next Is Nothing Or _
        fctSelectionHasFollowingTable(wdTbl.Range.Paragraphs.Last.Next.Range.Characters.Last) Then
        wdTbl.Range.Paragraphs.Last.Next.Range.Characters.Last.Select
        Selection.Collapse wdCollapseStart
        Selection.TypeParagraph
    End If
    
    ' Insert paragraph after empty para, if cell ends
    If wdTbl.Range.Paragraphs.Last.Next.Range.Characters.Last = Chr(13) & Chr(7) Then
        wdTbl.Range.Paragraphs.Last.Next.Range.Select
        Selection.EndOf wdCell
        Selection.TypeParagraph
    End If

    ' Place cursor after outermost table
    wdTbl.rows(1).Cells(1).Select
    Selection.StartOf wdCell

End Sub

Sub modSpecialContainerCreateNoSelection(strTableStyle As String)
    
    Dim wdRng As Word.Range
    Dim wdTbl As Table
    Dim wdPreviousPara As Paragraph

    Selection.Paragraphs.Last.Range.Characters.Last.Style = wdStyleDefaultParagraphFont

    If Selection.Characters.Last <> Chr(13) And Selection.Characters.Last <> Chr(13) & Chr(7) Then
        Selection.InsertParagraphBefore
        Selection.Collapse wdCollapseStart
    End If

    Selection.InsertParagraphAfter
    Selection.Style = wdStyleDefaultParagraphFont
    Selection.Collapse wdCollapseEnd
    Selection.Style = fctGetStyle(AUD_wanted_empty_para_after_word_table)
    Selection.Style = wdStyleDefaultParagraphFont

    Set wdTbl = fctGetTable(fctGetRng, 1, 1)
    With wdTbl
        .AllowAutoFit = True
        .PreferredWidthType = wdPreferredWidthPercent
        .PreferredWidth = 100
        .Style = strTableStyle
        .Range.Style = fctWordDoc.Styles(AUD_bodytext)
    End With
    
    Set wdPreviousPara = wdTbl.Range.Paragraphs(1).Previous(1)
    If Not wdPreviousPara Is Nothing Then
        If Not fctSelectionHasPrecedingTable(wdPreviousPara.Range.Characters.Last) And _
           Not wdPreviousPara.Style = AUD_wanted_empty_para And _
           Not wdPreviousPara.Style = AUD_wanted_empty_para_2 Then
            If wdPreviousPara.Range = vbCr Then
                On Error Resume Next
                wdPreviousPara.Range.Delete
                On Error GoTo 0
            End If
        End If
    End If
    
    If wdTbl.Range.Paragraphs.Last.Next.Next Is Nothing Or _
        fctSelectionHasFollowingTable(wdTbl.Range.Paragraphs.Last.Next.Range.Characters.Last) Then
        wdTbl.Range.Paragraphs.Last.Next.Range.Characters.Last.Select
        Selection.Collapse wdCollapseStart
        Selection.TypeParagraph
    End If
    
    If wdTbl.Range.Paragraphs.Last.Next.Range.Characters.Last = Chr(13) & Chr(7) Then
        wdTbl.Range.Paragraphs.Last.Next.Range.Select
        Selection.EndOf wdCell
        Selection.TypeParagraph
    End If
    
    wdTbl.rows(1).Cells(1).Select
    Selection.EndOf wdCell

End Sub

Sub modSpecialContainerRemove(Optional control As Object)

    Dim wdTbl As Table
    Set wdTbl = modSpecialContainerGetParentTable()
    
    If wdTbl Is Nothing Then
        MsgBox fctGetErrorMsg(Format(45, "00"))
        Exit Sub
    End If
    
    If wdTbl.Range.Next.Paragraphs(1).Style = AUD_wanted_empty_para_after_word_table Or _
       wdTbl.Range.Next.Paragraphs(1).Style = AUD_wanted_empty_para_after_marginal_note Then
        If fctSelectionHasFollowingTable(wdTbl.Range.Next.Paragraphs(1).Range.Characters.Last) Or _
                wdTbl.Range.Next.Paragraphs(1).Range.Characters.Last = Chr(13) & Chr(7) Then
            wdTbl.Range.Next.Paragraphs(1).Style = AUD_bodytext
        Else
            wdTbl.Range.Next.Paragraphs(1).Range.Delete
        End If
    End If
    
    wdTbl.ConvertToText Separator:=wdSeparateByParagraphs, _
        NestedTables:=False

End Sub

Function modSpecialContainerGetParentTable() As Table
    If Selection.tables.Count > 0 Then
        Dim wdRng As Range, i As Long
        Dim wdTbl As Table
        
        Set wdRng = Selection.Range
        
        For i = 1 To wdRng.tables.nestingLevel
            Set wdRng = wdRng.tables(1).Range
            If modSpecialContainerIsSpecialContainerTableStyle(wdRng.tables(1).Style.NameLocal) Then
                Set wdTbl = wdRng.tables(1)
                Exit For
            End If
            wdRng.Collapse wdCollapseEnd
        Next
        
        Set modSpecialContainerGetParentTable = wdTbl
    End If
End Function

Sub modSpecialContainerPlaceCursorAfterTable()
    If Selection.tables.Count > 0 Then
        Dim wdRng As Range, i As Long
        Set wdRng = Selection.Range
        For i = 1 To wdRng.tables.nestingLevel
            Set wdRng = wdRng.tables(1).Range
            wdRng.Collapse wdCollapseEnd
        Next
        wdRng.Select
    End If
End Sub

Function modSpecialContainerIsSpecialContainerTableStyle(strSpecialContainerTableStyle As String)
    Dim arrSpecialContainerTableStyles As Variant
    Dim i As Integer
    arrSpecialContainerTableStyles = SpecialContainerTableStyles
    
    For i = 0 To UBound(arrSpecialContainerTableStyles)
        If strSpecialContainerTableStyle = arrSpecialContainerTableStyles(i) Then
            modSpecialContainerIsSpecialContainerTableStyle = True
            Exit Function
        End If
    Next i
End Function



Attribute VB_Name = "subscript"
Option Explicit

Sub modSubScript(Optional control As Object)
    fctSubscript (AUD_sub)
End Sub

Sub modSubSubScript(Optional control As Object)
    fctSubscript (AUD_subsub)
End Sub

Sub modSubSuperScript(Optional control As Object)
    fctSupscript (AUD_subsup)
End Sub

Public Function fctSubscript(strSubScriptStyle As String) As String

If Not fctGetRng = "" Then
    Selection.Style = fctWordDoc.Styles(strSubScriptStyle)
Else
    MsgBox fctGetErrorMsg(Format(1, "00"))
End If

fctSubscript = Selection.Style

End Function
Attribute VB_Name = "superscript"
Option Explicit

Sub modSuperScript(Optional control As Object)
    fctSupscript (AUD_sup)
End Sub

Sub modSuperSuperScript(Optional control As Object)
    fctSupscript (AUD_supsup)
End Sub

Sub modSuperSubScript(Optional control As Object)
    fctSupscript (AUD_supsub)
End Sub

Function fctSupscript(strSupScriptStyle As String) As String
Dim wdRng As Word.Range
Set wdRng = Selection.Range

If Not wdRng = "" Then
    Selection.Style = fctWordDoc.Styles(strSupScriptStyle)
Else
    MsgBox fctGetErrorMsg(Format(1, "00"))
End If

fctSupscript = Selection.Style

End Function
Attribute VB_Name = "tables"
Option Explicit

Sub modTableAlignment(Optional control As Object)

If Selection.Range.Information(wdWithInTable) Then
    If Not Selection.Range = "" Then
        Selection.Style = fctWordDoc.Styles(AUD_table_alignment)
    Else
        MsgBox fctGetErrorMsg(Format(1, "00"))
    End If
Else
    MsgBox fctGetErrorMsg(Format(2, "00"))
End If
    
End Sub

Sub modConvertTable(Optional control As Object)
    Load frmConvertTable
    frmConvertTable.Show
End Sub

Sub modTableInsertTableWithCaptionWithChapterNumPlusFigureNum(Optional control As Object)
    Load frmTableGenerator
    frmTableGenerator.Caption = fctGetFormCaption(Format(40, "00"))
    frmTableGenerator.txtTableCaptionYesNo.Value = "yes"
    frmTableGenerator.txtTableNr.Value = "ChapNumFigNum"
    frmTableGenerator.txtTableStyle.Value = AUD_tf_table
    frmTableGenerator.Show
End Sub

Sub modTableInsertTableWithCaptionWithFigureNumOnly(Optional control As Object)
    Load frmTableGenerator
    frmTableGenerator.Caption = fctGetFormCaption(Format(50, "00"))
    frmTableGenerator.txtTableCaptionYesNo.Value = "yes"
    frmTableGenerator.txtTableNr.Value = "FigNumOnly"
    frmTableGenerator.txtTableStyle.Value = AUD_tf_table
    frmTableGenerator.Show
End Sub


Sub modTableInsertTableWithCaptionWithOutNum(Optional control As Object)
    Load frmTableGenerator
    frmTableGenerator.Caption = fctGetFormCaption(Format(51, "00"))
    frmTableGenerator.txtTableCaptionYesNo.Value = "yes"
    frmTableGenerator.txtTableNr.Value = "NoNum"
    frmTableGenerator.txtTableStyle.Value = AUD_tf_table
    frmTableGenerator.Show
End Sub


Sub modTableInsertTableWithOutCaption(Optional control As Object)
    Load frmTableGenerator
    frmTableGenerator.Caption = fctGetFormCaption(Format(52, "00"))
    frmTableGenerator.txtTableCaptionYesNo.Value = "no"
    frmTableGenerator.txtTableNr.Value = "NoNum"
    frmTableGenerator.txtTableStyle.Value = AUD_tf_table
    frmTableGenerator.Show
End Sub

Sub modTableInsertTableAux01WithCaption(Optional control As Object)
    Load frmTableGenerator
    frmTableGenerator.Caption = fctGetFormCaption(Format(53, "00"))
    frmTableGenerator.txtTableCaptionYesNo.Value = "yes"
    frmTableGenerator.txtTableNr.Value = "NoNum"
    frmTableGenerator.txtTableStyle.Value = AUD_tf_table_aux_01
    frmTableGenerator.Show
End Sub

Sub modTableInsertTableAux01WithOutCaption(Optional control As Object)
    Load frmTableGenerator
    frmTableGenerator.Caption = fctGetFormCaption(Format(54, "00"))
    frmTableGenerator.txtTableCaptionYesNo.Value = "no"
    frmTableGenerator.txtTableNr.Value = "NoNum"
    frmTableGenerator.txtTableStyle.Value = AUD_tf_table_aux_01
    frmTableGenerator.Show
End Sub

Sub modTableInsertTableAux02WithCaption(Optional control As Object)
    Load frmTableGenerator
    frmTableGenerator.Caption = fctGetFormCaption(Format(53, "00"))
    frmTableGenerator.txtTableCaptionYesNo.Value = "yes"
    frmTableGenerator.txtTableNr.Value = "NoNum"
    frmTableGenerator.txtTableStyle.Value = AUD_tf_table_aux_02
    frmTableGenerator.Show
End Sub

Sub modTableInsertTableAux02WithOutCaption(Optional control As Object)
    Load frmTableGenerator
    frmTableGenerator.Caption = fctGetFormCaption(Format(54, "00"))
    frmTableGenerator.txtTableCaptionYesNo.Value = "no"
    frmTableGenerator.txtTableNr.Value = "NoNum"
    frmTableGenerator.txtTableStyle.Value = AUD_tf_table_aux_02
    frmTableGenerator.Show
End Sub

Sub modTableConvertWithChapterNumPlusFigureNum(Optional control As Object)

    If Not Selection.Information(wdWithInTable) Then
        MsgBox fctGetErrorMsg(Format(24, "00"))
        Exit Sub
    End If

    Load frmConvertTable
    frmConvertTable.Caption = fctGetFormCaption(Format(40, "00"))
    frmConvertTable.txtTableNr.Value = "ChapNumFigNum"
    frmConvertTable.txtTableStyle.Value = AUD_tf_table
    frmConvertTable.Show
End Sub


Sub modTableConvertWithFigureNumOnly(Optional control As Object)
    
    If Not Selection.Information(wdWithInTable) Then
        MsgBox fctGetErrorMsg(Format(24, "00"))
        Exit Sub
    End If
    
    Load frmConvertTable
    frmConvertTable.Caption = fctGetFormCaption(Format(50, "00"))
    frmConvertTable.txtTableNr.Value = "FigNumOnly"
    frmConvertTable.txtTableStyle.Value = AUD_tf_table
    frmConvertTable.Show
End Sub


Sub modTableConvertWithOutNum(Optional control As Object)
    
    If Not Selection.Information(wdWithInTable) Then
        MsgBox fctGetErrorMsg(Format(24, "00"))
        Exit Sub
    End If
    
    Load frmConvertTable
    frmConvertTable.Caption = fctGetFormCaption(Format(51, "00"))
    frmConvertTable.txtTableNr.Value = "NoNum"
    frmConvertTable.txtTableStyle.Value = AUD_tf_table
    frmConvertTable.Show
End Sub


Sub modTableConvertTableAux01(Optional control As Object)
    If Not Selection.Information(wdWithInTable) Then
        MsgBox fctGetErrorMsg(Format(24, "00"))
        Exit Sub
    End If
    
    Load frmConvertTable
    frmConvertTable.Caption = fctGetFormCaption(Format(53, "00"))
    frmConvertTable.txtTableNr.Value = "NoNum"
    frmConvertTable.txtTableStyle.Value = AUD_tf_table_aux_01
    frmConvertTable.Show
End Sub

Sub modTableConvertTableAux02(Optional control As Object)
    If Not Selection.Information(wdWithInTable) Then
        MsgBox fctGetErrorMsg(Format(24, "00"))
        Exit Sub
    End If
    
    Load frmConvertTable
    frmConvertTable.Caption = fctGetFormCaption(Format(53, "00"))
    frmConvertTable.txtTableNr.Value = "NoNum"
    frmConvertTable.txtTableStyle.Value = AUD_tf_table_aux_02
    frmConvertTable.Show
End Sub

Sub modTableConvertBetweenTableAndTableAux01(Optional control As Object)
    If Not Selection.Information(wdWithInTable) Then
        MsgBox fctGetErrorMsg(Format(24, "00"))
        Exit Sub
    End If

    If Selection.tables(1).Style <> AUD_tf_table And _
        Selection.tables(1).Style <> AUD_tf_table_aux_01 Then
        MsgBox fctGetErrorMsg(Format(46, "00"))
        Exit Sub
    End If

    If Selection.tables(1).Style = AUD_tf_table Then
        Selection.tables(1).Style = fctWordDoc.Styles(AUD_tf_table_aux_01)
    ElseIf Selection.tables(1).Style = AUD_tf_table_aux_01 Then
        Selection.tables(1).Style = fctWordDoc.Styles(AUD_tf_table)
    End If

    Application.ScreenRefresh
End Sub

Sub modTableConvertBetweenTableAndTableAux02(Optional control As Object)
    If Not Selection.Information(wdWithInTable) Then
        MsgBox fctGetErrorMsg(Format(24, "00"))
        Exit Sub
    End If

    If Selection.tables(1).Style <> AUD_tf_table _
        And Selection.tables(1).Style <> AUD_tf_table_aux_02 Then
        MsgBox fctGetErrorMsg(Format(47, "00"))
        Exit Sub
    End If

    If Selection.tables(1).Style = AUD_tf_table Then
        Selection.tables(1).Style = fctWordDoc.Styles(AUD_tf_table_aux_02)
    ElseIf Selection.tables(1).Style = AUD_tf_table_aux_02 Then
        Selection.tables(1).Style = fctWordDoc.Styles(AUD_tf_table)
    End If

    Application.ScreenRefresh
End Sub

Sub modTableConvertBetweenTableAux01AndTableAux02(Optional control As Object)
    If Not Selection.Information(wdWithInTable) Then
        MsgBox fctGetErrorMsg(Format(24, "00"))
        Exit Sub
    End If

    If Selection.tables(1).Style <> AUD_tf_table_aux_01 And _
        Selection.tables(1).Style <> AUD_tf_table_aux_02 Then
        MsgBox fctGetErrorMsg(Format(48, "00"))
        Exit Sub
    End If

    If Selection.tables(1).Style = AUD_tf_table_aux_01 Then
        Selection.tables(1).Style = fctWordDoc.Styles(AUD_tf_table_aux_02)
    ElseIf Selection.tables(1).Style = AUD_tf_table_aux_02 Then
        Selection.tables(1).Style = fctWordDoc.Styles(AUD_tf_table_aux_01)
    End If

    Application.ScreenRefresh
End Sub

Sub modCellsMerge(Optional control As Object)

    If Selection.Information(wdWithInTable) Then
        If Selection.Cells.Count > 1 Then
            Selection.Cells.Merge
        Else
            MsgBox fctGetErrorMsg(Format(23, "00"))
        End If
    Else
        MsgBox fctGetErrorMsg(Format(24, "00"))
    End If

End Sub


Sub modTableCaptionCreator(Optional strTableCaptionYesNo As String, Optional strTableNr As String)

    Dim wdTbl As Word.Table
    
    Dim wdTblPreviousPara As Word.Paragraph
    Dim wdTblNextPara As Word.Paragraph
    
    Dim fldChpNum As Word.Field
    Dim fldRunNum As Word.Field
    
    Dim strFirstRowStyle As String
    
    Dim strChpNum As String
    
    Dim strCaptionText As String
    Dim strCaptionIdentifier As String
    Dim strCaptionNoNumText As String
    
    strCaptionText = fctWordDoc.CustomDocumentProperties("strTableCaptionText")
    strCaptionIdentifier = fctWordDoc.CustomDocumentProperties("strTableCaptionIdentifier")
    strCaptionNoNumText = fctWordDoc.CustomDocumentProperties("strTableCaptionNoNumText")
    
    Set wdTbl = Selection.tables(1)
    Set wdTblPreviousPara = wdTbl.Range.Paragraphs(1).Previous(1)
    Set wdTblNextPara = wdTbl.Range.Paragraphs.Last.Next(1)
    
    If strTableCaptionYesNo = "yes" Then
        If strTableNr = "ChapNumFigNum" Or strTableNr = "FigNumOnly" Then
            Call GetCaption(strCaptionText, strCaptionIdentifier, strTableNr, wdCell)
        Else
            If strCaptionNoNumText <> fctWordDoc.CustomDocumentProperties("strBlankIndicator") Then
                wdTbl.rows.First.Range.Text = strCaptionNoNumText
            End If
        End If
    End If
    
    fctWordDoc.Fields.Update

End Sub

Sub modTableCaption(Optional control As Object)
    If Selection.Range.Information(wdWithInTable) Then
        SetParagraphStyle AUD_table_caption
        On Error Resume Next
        Selection.rows.HeadingFormat = fctWordDoc.CustomDocumentProperties("bolRepeatTableCaptionHead")
        On Error GoTo 0
    Else
        MsgBox fctGetErrorMsg(Format(16, "00"))
    End If
End Sub

Sub modTableHead(Optional control As Object)

If Selection.Range.Information(wdWithInTable) Then
    Dim firstCell As Word.Cell
    Set firstCell = Selection.Cells(1)
    SetParagraphStyle AUD_table_head_01
    If firstCell.RowIndex > 2 Then
        Exit Sub
    End If
    On Error Resume Next
    Selection.rows.HeadingFormat = fctWordDoc.CustomDocumentProperties("bolRepeatTableCaptionHead")
    On Error GoTo 0
Else
    MsgBox fctGetErrorMsg(Format(3, "00"))
End If

End Sub


Sub modTableSubhead(Optional control As Object)
    
    If Selection.Range.Information(wdWithInTable) Then
        SetParagraphStyle AUD_table_head_02
    Else
        MsgBox fctGetErrorMsg(Format(4, "00"))
    End If

End Sub

Sub modTableSubSubhead(Optional control As Object)

    If Selection.Range.Information(wdWithInTable) Then
        SetParagraphStyle AUD_table_head_03
    Else
        MsgBox fctGetErrorMsg(Format(4, "00"))
    End If

End Sub

Sub modTableAddOnText(Optional control As Object)

    If Selection.Range.Information(wdWithInTable) Then
        SetParagraphStyle AUD_table_caption_addtext
    Else
        MsgBox fctGetErrorMsg(Format(24, "00"))
    End If

End Sub

Sub modTableFootnote(Optional control As Object)

    If Selection.Range.Information(wdWithInTable) Then
        SetParagraphStyle AUD_table_footnote
    Else
        MsgBox fctGetErrorMsg(Format(5, "00"))
    End If

End Sub


Sub modTableBreak(Optional control As Object)

    On Error GoTo err_handler
    
    If Selection.Range.Information(wdWithInTable) Then
    
        If Selection.Paragraphs(1).Style <> fctWordDoc.Styles(AUD_table_caption) Then
            Selection.rows(1).Cells(1).Select
            Selection.StartOf wdCell
            Selection.rows.Add BeforeRow:=Selection.rows(1)
            Selection.rows(1).Cells.Merge
            Selection.TypeText Text:=fctWordDoc.CustomDocumentProperties("strTableBreak")
            SetParagraphStyle AUD_table_wanted_break
        Else
            MsgBox fctGetErrorMsg(Format(24, "00"))
        End If
    Else
        MsgBox fctGetErrorMsg(Format(24, "00"))
    End If
    
err_handler:
    
    Select Case Err.Number
        Case 5991: MsgBox fctGetErrorMsg(Format(29, "00"))
    End Select
    
End Sub

Sub modTableSplit(Optional control As Object)
    If Not Selection.Information(wdWithInTable) Then
        MsgBox fctGetErrorMsg(Format(24, "00"))
        Exit Sub
    End If
    Selection.SplitTable
End Sub

Sub modListOfTables(Optional control As Object)
    With ActiveDocument
        .TablesOfFigures.Add Range:=Selection.Range, AddedStyles:=AUD_table_caption, _
            Caption:=fctWordDoc.CustomDocumentProperties("strTableCaptionIdentifier")
        .TablesOfFigures(1).TabLeader = wdTabLeaderDots
        .TablesOfFigures.Format = wdIndexIndent
    End With
End Sub
Attribute VB_Name = "tcereport"

' Ctrl + Shift + O
Sub modKeyTceReportSetStatusOpen()
    modTceReportSetStatus ("OPEN")
End Sub

' Ctrl + Shift + D
Sub modKeyTceReportSetStatusDone()
    modTceReportSetStatus ("DONE")
End Sub

' Ctrl + Shift + E
Sub modKeyTceReportSetStatusException()
    modTceReportSetStatus ("EXCEPTION")
End Sub

' Ctrl + Shift + P
Sub modKeyTceReportSetStatusPending()
    modTceReportSetStatus ("PENDING")
End Sub

' Ctrl + Shift + I
Sub modKeyTceReportSetStatusInfo()
    modTceReportSetStatus ("INFO")
End Sub

' Ctrl + Shift + N
Sub modKeyTceReportGotoNextMatch()
    Dim wApp As Object
    Set wApp = modTceReportGetExcelApplication
    On Error Resume Next
    wApp.Run "TCEreportDetails.SelectNext"
    wApp.Run "TCEreportDetails.ViewMatch"
    On Error GoTo 0
End Sub

' Ctrl + Shift + B
Sub modKeyTceReportGotoPreviousMatch()
    Dim wApp As Object
    Set wApp = modTceReportGetExcelApplication
    On Error Resume Next
    wApp.Run "TCEreportDetails.SelectPrevious"
    wApp.Run "TCEreportDetails.ViewMatch"
    On Error GoTo 0

End Sub

' Ctrl + Shift + V
Sub modKeyTceReportBackToReport()
    Dim wApp As Object
    Set wApp = modTceReportGetExcelApplication
    On Error Resume Next
    AppActivate wApp.Name
    If Not modTceReportIsMac Then
        AppActivate wApp.Caption
    End If
    On Error GoTo 0
End Sub

Sub modTceReportSetStatus(action As String)
    Dim wApp As Object
    Set wApp = modTceReportGetExcelApplication
    On Error Resume Next
    wApp.Run "TCEreportDetails.View", action
    wApp.Run "TCEreportDetails.ViewMatch"
    On Error GoTo 0
End Sub

Function modTceReportGetExcelApplication() As Object
    Dim wApp As Object
    On Error Resume Next
        Set wApp = GetObject(, "Excel.Application")
    If Err Then
        Err.Clear
        Set wApp = CreateObject("Excel.Application")
    End If
    Set modTceReportGetExcelApplication = wApp
End Function

Function modTceReportIsMac() As Boolean
    modTceReportIsMac = InStr(1, Application.System.OperatingSystem, "Macintosh", 1)
End Function

Attribute VB_Name = "textstructure"
Option Explicit

Sub modWantedEmptyPara(Optional control As Object)
    modKeyWantedEmptyPara
End Sub

Sub modKeyWantedEmptyPara()
    SetParagraphStyle AUD_wanted_empty_para
End Sub

Sub modWantedEmptyPara2(Optional control As Object)
    modKeyWantedEmptyPara2
End Sub

Sub modKeyWantedEmptyPara2()
    SetParagraphStyle AUD_wanted_empty_para_2
End Sub

Sub modPagebreak(Optional control As Object)
    
    If Selection.Paragraphs(1).Range.Text <> vbCr Then
        Selection.Paragraphs.Last.Range.Characters.Last.Select
        Selection.Collapse wdCollapseStart
        Selection.InsertParagraphAfter
        Selection.Collapse wdCollapseEnd
    End If

    Selection.Paragraphs(1).Range.Style = wdStyleDefaultParagraphFont
    SetParagraphStyle AUD_pagebreak
    Selection.TypeText Text:=fctWordDoc.CustomDocumentProperties("strPageBreak")

    Selection.Paragraphs.Last.Range.Characters.Last.Select
    Selection.Collapse wdCollapseStart
    Selection.InsertParagraphAfter
    Selection.Collapse wdCollapseEnd

End Sub

Sub modColumnbreak(Optional control As Object)
    
    If Selection.Paragraphs(1).Range.Text <> vbCr Then
        Selection.Paragraphs.Last.Range.Characters.Last.Select
        Selection.Collapse wdCollapseStart
        Selection.InsertParagraphAfter
        Selection.Collapse wdCollapseEnd
    End If

    Selection.Paragraphs(1).Range.Style = wdStyleDefaultParagraphFont
    SetParagraphStyle AUD_columnbreak
    Selection.TypeText Text:=fctWordDoc.CustomDocumentProperties("strColumnBreak")

    Selection.Paragraphs.Last.Range.Characters.Last.Select
    Selection.Collapse wdCollapseStart
    Selection.InsertParagraphAfter
    Selection.Collapse wdCollapseEnd

End Sub
Attribute VB_Name = "tools"
Option Explicit

Sub modShowHideStyleInspector(Optional control As Object)
    
    If fctGetWordVersion = 11 Then
        MsgBox fctGetErrorMsg(Format(41, "00"))
        Exit Sub
    End If

    If fctIsMac Then
        Call modShowHideStyleInspectorMAC
    Else
        Call modShowHideStyleInspectorWIN
    End If
    
End Sub

Sub modShowHideStyleInspectorWIN(Optional control As Object)
    If Application.TaskPanes(wdTaskPaneStyleInspector).visible = True Then
        Application.TaskPanes(wdTaskPaneStyleInspector).visible = False
    Else
        Application.TaskPanes(wdTaskPaneStyleInspector).visible = True
    End If
End Sub

Sub modShowHideStyleInspectorMAC(Optional control As Object)
    MsgBox fctGetErrorMsg(Format(27, "00"))
End Sub

Sub modToolsShowRecommendedStyles(Optional control As Object)

    If fctIsMac Or fctGetWordVersion < 11 Then
        MsgBox fctGetErrorMsg(Format(41, "00"))
        Exit Sub
    End If

    modToolsShowRecommendedStylesWin

End Sub

Sub modToolsShowRecommendedStylesWin()

    modToolsHideAllStyles
    modToolsRestoreStyleOrder

    ActiveDocument.FormattingShowFilter = wdShowFilterStylesAvailable
    Application.TaskPanes(wdTaskPaneFormatting).visible = True

    If fctGetWordVersion = 11 Then
        SendKeys "{Enter}"
        Dialogs(wdDialogFormatStylesCustom).Execute
    End If

End Sub

Sub modToolsShowUsedStyles(Optional control As Object)

    If fctIsMac Then
        MsgBox fctGetErrorMsg(Format(41, "00"))
        Exit Sub
    End If
    
    modToolsShowUsedStylesWin
    
End Sub

Sub modToolsShowUsedStylesWin()
    
    Dim objStyle As Style
    
    For Each objStyle In ActiveDocument.Styles
        objStyle.Visibility = False
    Next
    
    ActiveDocument.FormattingShowFilter = wdShowFilterStylesInUse
    Application.TaskPanes(wdTaskPaneFormatting).visible = True
    
    If fctGetWordVersion = 11 Then
        SendKeys "{Enter}"
        Dialogs(wdDialogFormatStylesCustom).Execute
    End If
    
End Sub

Sub modToolsShowAllStyles(Optional control As Object)

    If fctIsMac Then
        MsgBox fctGetErrorMsg(Format(41, "00"))
        Exit Sub
    End If

    modToolsShowAllStylesWin

End Sub

Sub modToolsShowAllStylesWin()

    Dim objStyle As Style
    
    For Each objStyle In ActiveDocument.Styles
        objStyle.Visibility = False
    Next

    ActiveDocument.FormattingShowFilter = wdShowFilterStylesAll
    Application.TaskPanes(wdTaskPaneFormatting).visible = True
    
    If fctGetWordVersion = 11 Then
        SendKeys "{Enter}"
        Dialogs(wdDialogFormatStylesCustom).Execute
    End If

End Sub

Sub modToolsDeleteBoxTableFigureEquation(Optional control As Object)
    
    If Not Selection.Information(wdWithInTable) Then
        MsgBox fctGetErrorMsg(Format(39, "00"))
        Exit Sub
    End If
    
    If MsgBox(fctGetErrorMsg(Format(40, "00")), vbYesNo) = vbYes Then
        If Selection.tables(1).Range.Next.Paragraphs(1).Style = AUD_wanted_empty_para_after_word_table Or _
           Selection.tables(1).Range.Next.Paragraphs(1).Style = AUD_wanted_empty_para_after_marginal_note Then
            If fctSelectionHasFollowingTable(Selection.tables(1).Range.Next.Paragraphs(1).Range.Characters.Last) Or _
                    Selection.tables(1).Range.Next.Paragraphs(1).Range.Characters.Last = Chr(13) & Chr(7) Then
                Selection.tables(1).Range.Next.Paragraphs(1).Style = AUD_bodytext
            Else
                Selection.tables(1).Range.Next.Paragraphs(1).Range.Delete
            End If
        End If
        Selection.tables(1).Delete
    End If
End Sub

Sub modShowHighlights(Optional control As Object)
    ActiveWindow.View.ShowHighlight = True
End Sub

Sub modHideHighlights(Optional control As Object)
    ActiveWindow.View.ShowHighlight = False
End Sub

Sub modUpdateFieldFunctions(Optional control As Object)
    Dim rngStory As Range
    For Each rngStory In ActiveDocument.StoryRanges
        rngStory.Fields.Update
        Do While Not (rngStory.NextStoryRange Is Nothing)
            Set rngStory = rngStory.NextStoryRange
            rngStory.Fields.Update
        Loop
    Next rngStory
End Sub

Sub modToolsCheckFieldFunctions(Optional control As Object)
    frmCheckFieldFunctions.Show
End Sub

Function modToolsUpdateFields(checkFieldFunctions As Boolean) As Variant

    Dim rngStory As Range
    Dim i As Long
    Dim arrFields() As Variant
    
    Application.DisplayAlerts = False
    
    modToolsUpdateCrossRefBookmarksByParagraphStyle _
        Array(AUD_h1, AUD_h2, AUD_h3, AUD_h4, AUD_h5, AUD_h6, _
                AUD_h7, AUD_h8, AUD_h9, AUD_marginal_number)
    
    modToolsUpdateCrossRefBookmarksForSeq
    
    For Each rngStory In ActiveDocument.StoryRanges
        If rngStory.storyType <> wdTextFrameStory Then
            rngStory.Fields.Update
            If checkFieldFunctions Then
                modToolsGetFieldsByStory rngStory, arrFields, rngStory.storyType
            End If
        End If
    Next
    
    For i = 1 To ActiveDocument.Shapes.Count
        Set rngStory = Nothing
        On Error Resume Next
        Set rngStory = ActiveDocument.Shapes(i).TextFrame.TextRange
        On Error GoTo 0
        If Not rngStory Is Nothing Then
            rngStory.Fields.Update
            If checkFieldFunctions Then
                modToolsGetFieldsByStory rngStory, arrFields, -i
            End If
        End If
    Next
    
    modToolsRestoreCrossRefStyleForRef
    
    Application.DisplayAlerts = True

    modToolsUpdateFields = arrFields

End Function

Sub modToolsGetFieldsByStory(storyRange As Range, arrFields() As Variant, storyType As Long)
            
    Dim i As Long
    Dim objField As Field
    Dim objFieldResult As Range
    
    For i = 1 To storyRange.Fields.Count
        Set objField = storyRange.Fields(i)
        Set objFieldResult = Nothing
        On Error Resume Next
        Set objFieldResult = objField.Result
        On Error GoTo 0
        If Not objFieldResult Is Nothing Then
            If InStr(objFieldResult.Text, "Fehler!") > 0 Or _
                    InStr(objFieldResult.Text, "Error!") > 0 Then
                fctArrayPush arrFields, storyType & ";" & i & ";" & objFieldResult.Text
                i = i + objField.Code.Fields.Count
            End If
        End If
    Next
End Sub

Sub modToolsUpdateCrossRefBookmarksByParagraphStyle(paragraphStyleNames As Variant)
    
    Dim objParagraph As Paragraph
    Dim objBookmark As Bookmark
    Dim objStyles() As Variant
    Dim objRange As Range
    Dim i As Long
    Dim numBookmarks As Long

    objStyles = fctGetStylesByStyleNames(paragraphStyleNames)
    
    For Each objParagraph In ActiveDocument.Paragraphs
        If fctInArray(objParagraph.Style.NameLocal, objStyles) Then
        
            Set objRange = fctRemoveParagraphMarkFromRange( _
                                modSmartIndexExcludeSmartIdFromRange(objParagraph.Range))
        
            objRange.Bookmarks.ShowHidden = True
            numBookmarks = objRange.Bookmarks.Count
            
            For i = 1 To numBookmarks
                Set objBookmark = objRange.Bookmarks(i)
                If fctStartsWith(objBookmark.Name, "_Ref") Then
                    objRange.Bookmarks.Add objBookmark.Name
                End If
            Next
        
        End If
    Next
End Sub

Sub modToolsUpdateCrossRefBookmarksForSeq()
    
    Dim objField As Field
    Dim objRange As Range
    Dim objBookmark As Bookmark
    Dim numBookmarks As Long
    Dim i As Long
    
    For Each objField In ActiveDocument.Fields
        If objField.Type = wdFieldSequence Then
            If InStr(objField.Code, " ABB ") > 0 Or _
                    InStr(objField.Code, " TAB ") > 0 Or _
                    InStr(objField.Code, " GLN ") > 0 Or _
                    InStr(objField.Code, " LST ") > 0 Then
                
                Set objRange = fctGetFieldRange(objField)
                objRange.start = objRange.Paragraphs(1).Range.start
                Set objRange = modSmartIndexExcludeSmartIdFromRange(objRange)
                
                objRange.Bookmarks.ShowHidden = True
                numBookmarks = objRange.Bookmarks.Count
                For i = 1 To numBookmarks
                    Set objBookmark = objRange.Bookmarks(i)
                    If fctStartsWith(objBookmark.Name, "_Ref") Then
                        objRange.Bookmarks.Add objBookmark.Name
                    End If
                Next
            End If
        End If
    Next
End Sub

Sub modToolsRestoreCrossRefStyleForRef()

    Dim objField As Field
    Dim objRange As Range
    
    For Each objField In ActiveDocument.Fields
        If objField.Type = wdFieldRef Then
            Set objRange = objField.Result
            objRange.End = objRange.start + 1

            If objField.Result.Style.Type <> wdStyleTypeCharacter Then
                If objRange.Style.Type = wdStyleTypeCharacter Then
                    objField.Result.Style = objRange.Style
                End If
            End If
        End If
    Next
End Sub

Sub modShowFieldFunctions(Optional control As Object)
    ActiveWindow.View.FieldShading = wdFieldShadingAlways
End Sub

Sub modHideFieldFunctions(Optional control As Object)
    ActiveWindow.View.FieldShading = wdFieldShadingNever
End Sub

Sub modStatistics(Optional control As Object)
    Load frmStatistics
    frmStatistics.Show
End Sub

Sub modToolsBoxSettings(Optional control As Object)
    Load frmBoxSettingsPw
    frmBoxSettingsPw.Show
End Sub

Sub modToolsColorUncolorLatentStyles(Optional control As Object)
    modToolsColorUncolorLatentStylesInit "strWdColorStandard_LatentStyleBase", True
    modToolsColorUncolorLatentStylesInit "strWdColorAbsatz-Standardschriftart_LatentStyleBase", True
End Sub

Sub modToolsColorUncolorLatentStylesInit(strDocVar As String, setBasedOnStyles As Boolean)
    Dim objStyle As Style
    Dim objLatentStyleBase As Style
    Dim objBaseStyle As Style
    Dim wdColorValues As Variant
    
    Dim strLatentStyle As String
    
    strLatentStyle = Replace(fctWordDoc.CustomDocumentProperties(strDocVar).Name, "strWdColor", "")
    wdColorValues = Split(fctWordDoc.CustomDocumentProperties(strDocVar), ";")

    Set objLatentStyleBase = ActiveDocument.Styles(strLatentStyle)
    objLatentStyleBase.Font.Color = CLng(wdColorValues(1))
    
    fctWordDoc.CustomDocumentProperties(strDocVar) = wdColorValues(1) & ";" & wdColorValues(0)
    
    If Not setBasedOnStyles Then Exit Sub
    
    For Each objStyle In ActiveDocument.Styles
        On Error Resume Next
            Set objBaseStyle = ActiveDocument.Styles(objStyle.BaseStyle.NameLocal)
        On Error GoTo 0
        If Not objBaseStyle Is Nothing Then
            If objBaseStyle.NameLocal = strLatentStyle Then
                objStyle.Font.Color = objLatentStyleBase.Font.Color
            End If
        End If
        Set objBaseStyle = Nothing
    Next
End Sub

Sub modResetStyle(Optional control As Object)
    Selection.Font.Reset
End Sub

Sub modToolsLockNonAudStyles()
    Dim objStyle As Style
    Dim strStyleNameLocal As String
    Dim arrAllowedLatentStyles As Variant
    
    arrAllowedLatentStyles = modToolsAllowedLatentStyles

    For Each objStyle In ActiveDocument.Styles
        
        strStyleNameLocal = objStyle.NameLocal
        If InStr(1, objStyle.NameLocal, ";") > 0 Then
            strStyleNameLocal = Split(objStyle.NameLocal, ";")(1)
        End If
    
        If modToolsStyleIsAudStyle(strStyleNameLocal) Or _
            modToolsStyleIsAllowedLatentStyle(strStyleNameLocal, arrAllowedLatentStyles) Then
            If Not objStyle.Type = wdStyleTypeList Then
                objStyle.Locked = False
            End If
        Else
            objStyle.Locked = True
        End If
    Next
End Sub

Function modToolsStyleIsAudStyle(strStyleNameLocal As String) As Boolean
    Dim arrAudStyles As Variant
    Dim i As Integer
    arrAudStyles = StyleOrder
    
    For i = 0 To UBound(arrAudStyles)
        If strStyleNameLocal = Split(arrAudStyles(i), ";")(0) Then
            modToolsStyleIsAudStyle = True
            Exit Function
        End If
    Next i
End Function

Function modToolsStyleIsAllowedLatentStyle(strStyleNameLocal As String, arrAllowedLatentStyles As Variant) As Boolean
   
    Dim i As Integer
        
    For i = 0 To UBound(arrAllowedLatentStyles)
        If strStyleNameLocal = arrAllowedLatentStyles(i) Then
            modToolsStyleIsAllowedLatentStyle = True
            Exit Function
        End If
    Next i
End Function

Function modToolsAllowedLatentStyles() As Variant

    Dim arrAllowedLatentStyle(18) As String
    arrAllowedLatentStyle(0) = ActiveDocument.Styles(wdStyleTableOfFigures).NameLocal
    arrAllowedLatentStyle(1) = ActiveDocument.Styles(wdStyleTOC1).NameLocal
    arrAllowedLatentStyle(2) = ActiveDocument.Styles(wdStyleTOC2).NameLocal
    arrAllowedLatentStyle(3) = ActiveDocument.Styles(wdStyleTOC3).NameLocal
    arrAllowedLatentStyle(4) = ActiveDocument.Styles(wdStyleTOC4).NameLocal
    arrAllowedLatentStyle(5) = ActiveDocument.Styles(wdStyleTOC5).NameLocal
    arrAllowedLatentStyle(6) = ActiveDocument.Styles(wdStyleTOC6).NameLocal
    arrAllowedLatentStyle(7) = ActiveDocument.Styles(wdStyleTOC7).NameLocal
    arrAllowedLatentStyle(8) = ActiveDocument.Styles(wdStyleTOC8).NameLocal
    arrAllowedLatentStyle(9) = ActiveDocument.Styles(wdStyleTOC9).NameLocal
    arrAllowedLatentStyle(10) = ActiveDocument.Styles(wdStyleIndex1).NameLocal
    arrAllowedLatentStyle(11) = ActiveDocument.Styles(wdStyleIndex2).NameLocal
    arrAllowedLatentStyle(12) = ActiveDocument.Styles(wdStyleIndex3).NameLocal
    arrAllowedLatentStyle(13) = ActiveDocument.Styles(wdStyleIndex4).NameLocal
    arrAllowedLatentStyle(14) = ActiveDocument.Styles(wdStyleIndex5).NameLocal
    arrAllowedLatentStyle(15) = ActiveDocument.Styles(wdStyleIndex6).NameLocal
    arrAllowedLatentStyle(16) = ActiveDocument.Styles(wdStyleIndex7).NameLocal
    arrAllowedLatentStyle(17) = ActiveDocument.Styles(wdStyleIndex8).NameLocal
    arrAllowedLatentStyle(18) = ActiveDocument.Styles(wdStyleIndex9).NameLocal
    modToolsAllowedLatentStyles = arrAllowedLatentStyle
    
End Function

Sub modToolsActivateStyleLimitations(Optional control As Object)
    
    If fctIsMac Then
        MsgBox fctGetErrorMsg(Format(41, "00"))
        Exit Sub
    End If
    
    Load frmStyleLimitsPw
    frmStyleLimitsPw.Show
End Sub

Sub modToolsShowTableInfo(Optional control As Object)
    modKeyToolsShowTableInfo
End Sub

Sub modKeyToolsShowTableInfo()

    If Not Selection.Information(wdWithInTable) Then
        MsgBox fctGetErrorMsg(Format(24, "00"))
        Exit Sub
    End If

    frmTableInfo.Show
End Sub

Sub modToolsToggleView(Optional control As Object)
    If ActiveWindow.View.SplitSpecial = wdPaneNone Then
        If ActiveWindow.ActivePane.View.Type = wdNormalView Then
            ActiveWindow.ActivePane.View.Type = wdPageView
        Else
            ActiveWindow.ActivePane.View.Type = wdNormalView
        End If
    Else
        If ActiveWindow.View.Type = wdNormalView Then
            ActiveWindow.View.Type = wdPageView
        Else
            ActiveWindow.View.Type = wdNormalView
        End If
    End If
    
    ActiveWindow.StyleAreaWidth = MillimetersToPoints(60)
End Sub

Sub modToolsCheckAndRestoreAudTables(Optional control As Object)
    frmTableRestore.Show
End Sub

Sub modToolsHideAllStyles()

    Dim i As Long
    Dim objStyle As Style
    
    For Each objStyle In ActiveDocument.Styles
        objStyle.Visibility = True
        If fctGetWordVersion > 11 Then
            modToolsSetPriority objStyle, 100
        End If
    Next
    
End Sub

Sub modToolsSetPriority(objStyle As Style, iPriority As Integer)
    objStyle.Priority = iPriority
End Sub

Sub modToolsRestoreStyleOrder()
    
    Dim arrStyles As Variant
    Dim i As Long
    Dim arrStylesSplit As Variant
    Dim objStyle As Style

    arrStyles = StyleOrder
    
    If arrStyles(0) = "" Then Exit Sub
    
    For i = 0 To UBound(arrStyles)
        arrStylesSplit = Split(arrStyles(i), ";")
    
        On Error Resume Next
        Set objStyle = ActiveDocument.Styles(arrStylesSplit(0))
        On Error GoTo 0
    
        If Not objStyle Is Nothing Then
            objStyle.Visibility = Not CBool(arrStylesSplit(1))
            If fctGetWordVersion > 11 Then
                modToolsSetPriority objStyle, CInt(arrStylesSplit(2))
            End If
        End If
        
        Set objStyle = Nothing
    Next i
    
End Sub

Function modToolsTableIsAudTable(strTableStyle As String)
    Dim arrTableStyles As Variant
    Dim i As Integer
    arrTableStyles = TableStyles
    
    For i = 0 To UBound(arrTableStyles)
        If strTableStyle = arrTableStyles(i) Then
            modToolsTableIsAudTable = True
            Exit Function
        End If
    Next i
End Function

Sub modToolsExtractContent(Optional control As Object)
    Load frmExtract
    frmExtract.Show
End Sub

Sub modToolsFigureSettings(Optional control As Object)
    Load frmFigureSettings
    frmFigureSettings.Show
End Sub

Sub modToolsShowHideStyles(Optional control As Object)
    If fctIsMac Then
        Call modToolsShowHideStylesMAC
    Else
        Call modToolsShowHideStylesWIN
    End If
End Sub

Sub modToolsShowHideStylesWIN(Optional control As Object)
    If Application.TaskPanes(wdTaskPaneFormatting).visible = True Then
        Application.TaskPanes(wdTaskPaneFormatting).visible = False
    Else
        Application.TaskPanes(wdTaskPaneFormatting).visible = True
    End If
End Sub

Sub modToolsShowHideStylesMAC(Optional control As Object)
    Application.Dialogs(1755).Display
End Sub

Sub modToolsGenerateRefreshSmartId(Optional control As Object)
    If MsgBox(fctGetFormCaption("314"), _
                vbOKCancel + vbExclamation + vbDefaultButton2, fctGetFormCaption("315")) = vbCancel Then
        Exit Sub
    End If
    Load frmSmartIndexGenerate
    frmSmartIndexGenerate.Show
End Sub

' InQuest injected base64 decoded content
' ny*e
' Qzj/x
' z{b~'
' *'~(
' *'~(
' *^r&
' y*^r'
' y*^r'
' *^r'
' *^r'
' *^r'
' y*^r'
' *'Z+a
' *'Z+a:
' Lmz{"
' Lmz{"
' ^u+r
' ^u+r
' 'vz-y'
' 'vz-x*'
' 'vz-x*'
' e"{hV'
' ^t*.
' *'Z+a
' *'Z+a:
' Lmz{"
' *'"yb
' '"yb
' *'"yb
' '"yb
' ~)^E
' tLmz{"
' %x	eR
' %x	eR
' *'~(
' *'~(
' *'~(
' ZrH+
' ']zt
' )^.)
' ^Z+a
' jZ 1
' ,.+-
' x	mz
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' *^r&
' 5Z+a	
' 5Z+a:
' 6Z+a	
' 6Z+a:
' )^"{)y
' )^"{)y
' /j)ZnW

INQUEST-PP=macro
