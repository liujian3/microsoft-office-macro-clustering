Attribute VB_Name = "Module1"
'Copyright 2006-2013 ConnectCode Pte Ltd. All Rights Reserved.
'This source code is protected by International Copyright Laws. You are only allowed to modify
'and include the source in your application if you have purchased a Distribution License.

'======================================================================================================
'Code39
'======================================================================================================
   
Public Function Encode_Code39(ByVal data As String, Optional ByVal chk As Integer = 1) As String

      
    Dim Result As String
    Dim cd As String
    Dim filtereddata As String
            
    filtereddata = filterInput_Code39(data)
    filteredlength = Len(filtereddata)

    If chk = 1 Then
    
        If filteredlength > 254 Then
        
            filtereddata = Left$(filtereddata, 254)
            
        End If
        cd = generateCheckDigit_Code39(filtereddata)
    
    Else
    
        If filteredlength > 255 Then
            
            filtereddata = Left$(filtereddata, 255)
            
        End If
    
    End If

    Result = "*" + filtereddata + cd + "*"
    Encode_Code39 = Result

End Function

Public Function getCode39Value(ByVal inputchar As Integer) As Integer

    Dim CODE39MAP() As Variant
    CODE39MAP = Array(Asc("0"), Asc("1"), Asc("2"), Asc("3"), Asc("4"), Asc("5"), Asc("6"), Asc("7"), Asc("8"), Asc("9"), Asc("A"), Asc("B"), Asc("C"), Asc("D"), Asc("E"), Asc("F"), Asc("G"), Asc("H"), Asc("I"), Asc("J"), Asc("K"), Asc("L"), Asc("M"), Asc("N"), Asc("O"), Asc("P"), Asc("Q"), Asc("R"), Asc("S"), Asc("T"), Asc("U"), Asc("V"), Asc("W"), Asc("X"), Asc("Y"), Asc("Z"), Asc("-"), Asc("."), Asc(" "), Asc("$"), Asc("/"), Asc("+"), Asc("%"))
   
    Dim RVal As Integer
    RVal = -1
    For x = 0 To (43 - 1)
        If CODE39MAP(x) = inputchar Then
            RVal = x
            Exit For
        End If
    Next x
    
    getCode39Value = RVal

End Function



Public Function filterInput_Code39(ByVal data As String) As String
  
  Dim Result As String
  Result = ""
  datalength = Len(data)

  Dim barcodechar As String
  For x = 0 To datalength - 1
        barcodechar = Mid(data, x + 1, 1)
        If getCode39Value(AscW(barcodechar)) <> -1 Then
            Result = Result & barcodechar
        End If
  Next x

  filterInput_Code39 = Result

End Function


Public Function getCode39Character(ByVal inputdecimal As Integer) As String

    Dim CODE39MAP() As Variant
    CODE39MAP = Array(Asc("0"), Asc("1"), Asc("2"), Asc("3"), Asc("4"), Asc("5"), Asc("6"), Asc("7"), Asc("8"), Asc("9"), Asc("A"), Asc("B"), Asc("C"), Asc("D"), Asc("E"), Asc("F"), Asc("G"), Asc("H"), Asc("I"), Asc("J"), Asc("K"), Asc("L"), Asc("M"), Asc("N"), Asc("O"), Asc("P"), Asc("Q"), Asc("R"), Asc("S"), Asc("T"), Asc("U"), Asc("V"), Asc("W"), Asc("X"), Asc("Y"), Asc("Z"), Asc("-"), Asc("."), Asc(" "), Asc("$"), Asc("/"), Asc("+"), Asc("%"))

    getCode39Character = CODE39MAP(inputdecimal)

End Function



Public Function generateCheckDigit_Code39(ByVal data As String) As String


  datalength = 0
  Sum = 0
  Result = -1
  strResult = ""
  Dim barcodechar As String
  
  datalength = Len(data)
  For x = 0 To datalength - 1
        barcodechar = Mid(data, x + 1, 1)
        Sum = Sum + getCode39Value(AscW(barcodechar))
        
  Next x
  
  Result = Sum Mod 43
  
  strResult = Chr(getCode39Character(Result))
  generateCheckDigit_Code39 = strResult

End Function


'======================================================================================================
'Industrial2of5
'======================================================================================================

Public Function Encode_Industrial2of5(ByVal data As String, Optional ByVal chk As Integer = 0) As String

    Dim Result As String
    Dim cd As String
    Dim filtereddata As String

    cd = ""
    Result = ""
    filtereddata = filterInput_Industrial2of5(data)
    filteredlength = Len(filtereddata)
    
    
    If chk = 1 Then
    
        If filteredlength > 254 Then
            filtereddata = Left$(filtereddata, 254)
        End If
        cd = generateCheckDigit_Industrial2of5(filtereddata)
    
    Else
    
        If filteredlength > 255 Then
            filtereddata = Left$(filtereddata, 255)
        End If
    
    End If

    filtereddata = filtereddata + cd
    Result = "{" + filtereddata + "}"
    

    Encode_Industrial2of5 = Result

End Function



Public Function filterInput_Industrial2of5(ByVal data As String) As String

    Result = ""
    datalength = Len(data)
   
    barcodechar = ""
    For x = 0 To datalength - 1
  
        barcodechar = Mid(data, x + 1, 1)
        If AscW(barcodechar) <= AscW("9") And AscW(barcodechar) >= AscW("0") Then
             Result = Result + barcodechar
        End If
    Next x
  
    filterInput_Industrial2of5 = Result

End Function



Public Function generateCheckDigit_Industrial2of5(ByVal data As String) As String

  datalength = 0
  lastcharpos = 0
  Result = 0
  strResult = ""
  barcodechar = ""
  barcodevalue = 0
  toggle = 1
  Sum = 0


  datalength = Len(data)
  lastcharpos = datalength - 1

  For x = lastcharpos To 0 Step -1
  
      barcodechar = Mid(data, x + 1, 1)
      barcodevalue = (AscW(barcodechar) - 48)
  
        
      If toggle = 1 Then
            Sum = Sum + (barcodevalue * 3)
            toggle = 0
      Else
            Sum = Sum + barcodevalue
            toggle = 1
      End If
  Next x

  If ((Sum Mod 10) = 0) Then
        Result = AscW("0")
  Else
        Result = (10 - (Sum Mod 10)) + AscW("0")
  End If

  strResult = Chr(Result)
  generateCheckDigit_Industrial2of5 = strResult


End Function


'======================================================================================================
'POSTNET
'======================================================================================================
Public Function Encode_POSTNET(ByVal data As String) As String

    cd = ""
    Result = ""
    filtereddata = filterInput_POSTNET(data)
    filteredlength = Len(filtereddata)

    If (filteredlength > 11) Then
        filtereddata = Left$(filtereddata, 11)
    End If

    cd = generateCheckDigit_POSTNET(filtereddata)
    Result = "{" + filtereddata + cd + "}"
    Encode_POSTNET = Result

End Function



Public Function generateCheckDigit_POSTNET(ByVal data As String) As String

  datalength = 0
  Sumx = 0
  Result = -1
  strResult = ""
  barcodechar = ""

  datalength = Len(data)
  For x = 0 To datalength - 1
        
        barcodechar = Mid(data, x + 1, 1)
        Sumx = Sumx + getPOSTNETValue(Asc(barcodechar))
  Next x

  Result = Sumx Mod 10
  If (Result <> 0) Then
    Result = (10 - Result)
  End If

  strResult = Chr(getPOSTNETCharacter(Result))

  generateCheckDigit_POSTNET = strResult


End Function


Public Function getPOSTNETCharacter(ByVal inputdecimal As Integer) As Integer

    getPOSTNETCharacter = inputdecimal + 48

End Function


Public Function getPOSTNETValue(ByVal inputchar As Integer) As Integer

    getPOSTNETValue = inputchar - 48

End Function
    


Public Function filterInput_POSTNET(ByVal data As String) As String

  Result = ""
  datalength = Len(data)

  For x = 0 To datalength - 1
  
    barcodechar = Mid(data, x + 1, 1)
    If (Asc(barcodechar) >= Asc("0") And Asc(barcodechar) <= Asc("9")) Then
         Result = Result + barcodechar
    End If
  Next x

 filterInput_POSTNET = Result


End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
