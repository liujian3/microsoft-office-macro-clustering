Attribute VB_Name = "Dev"
'Fonction pour r|fffd|initiser les colonnes a afficher - Se placer dans la ligne 3, colonnes "Colonnes associ|fffd|es"
Sub EcritAlphabet()
    Dim ligne As Integer
    ligne = ActiveCell.row - 2
    Application.ScreenUpdating = False
    For Code2 = 65 To 90 Step 1
        For code = 65 To 87 Step 3
            ActiveCell.Offset(ligne, 0).value = Chr(Code2) & Chr(code) & ":" & Chr(Code2) & Chr(code + 2)
            ligne = ligne + 1
        Next code
    Next Code2
    Application.ScreenUpdating = True
End Sub
Sub EcritAlphabetSuite()
    Dim ligne As Integer
    ligne = 0
    Application.ScreenUpdating = False
    For Code3 = 66 To 70 Step 1
        For Code2 = 65 To 90 Step 1
            For code = 65 To 87 Step 3
                ActiveCell.Offset(ligne, 0).value = Chr(Code3) & Chr(Code2) & Chr(code) & ":" & Chr(Code3) & Chr(Code2) & Chr(code + 2)
                ligne = ligne + 1
            Next code
        Next Code2
    Next Code3
    Application.ScreenUpdating = True
End Sub

Sub EcritLignes()
    Dim ligne As Integer
    ligne = ActiveCell.row - 3
    Application.ScreenUpdating = False
    For i = 10 To 10000 Step 101
        ActiveCell.Offset(ligne, 0).value = "" & i
        ligne = ligne + 1
    Next
    Application.ScreenUpdating = True
End Sub


Sub allshape()
    Dim ligne As Integer
    ligne = ActiveCell.row - 3
    For Each sh In Sheets("WorkflowProcess").Shapes
        ActiveCell.Offset(ligne, 0).value = sh.name
        ligne = ligne + 1
    Next
End Sub

Sub clearWorkflow()
    Sheets("WorkflowProcess").Range("A300:AA10000").Clear
End Sub

Sub SupprimeTextBox()
For Each f In Worksheets
  On Error Resume Next
  For Each sh In Sheets(f.name).Shapes
   If Left(sh.name, 7) = "Control" Then sh.delete
  Next
  Err.Clear
Next
End Sub

Sub addGlobal()
For Each Line In Range("B6:B9000")
    If Line.value <> "" Then
        Line.Offset(0, 3) = "Global Admins"
    End If
Next Line
End Sub

Attribute VB_Name = "Feuil1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
Private Sub Worksheet_Change(ByVal Target As Range)
   On Error GoTo ErrHandler:
    If ThisWorkbook.dDefaultValueActivated = True And Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
            change = True
            If Target.value <> "" Then
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y + 3).value = "" Then
                    Application.ScreenUpdating = False
                    ActiveCell.Offset(x, y + 3).value = getDValue("Electronic")
                    ActiveCell.Offset(x, y + 4).value = getDValue("No")
                    ActiveCell.Offset(x, y + 6).value = getDValue("Global Admins")
                    Application.ScreenUpdating = True
                End If
            End If
        End If
    End If
ErrHandler:
End Sub
Private Sub Worksheet_deactivate()
   On Error GoTo ErrHandler:
    If change = True And ThisWorkbook.dForceCalcul = True Then
        Application.CalculateFull
    End If
    boutonActive = True
ErrHandler:
End Sub

Attribute VB_Name = "Feuil11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
Dim allB(3) As String
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
    If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("k:k")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Personnes_active")
        ElseIf Not Application.Intersect(Target, Range("i:i")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Entite_active")
        ElseIf Not Application.Intersect(Target, Range("j:j")) Is Nothing Then
            Call AvancerAllBouton(allB)
            If ActiveCell.Offset(x - 1, y - 3).value = getDValue("Yes") Or ActiveCell.Offset(x, y - 3).value = getDValue("Yes") Then
                Call avancerBouton("Portee_activeU")
            End If
            
        Else
            Call AvancerAllBouton(allB)
        End If
    Else
        Call AvancerAllBouton(allB)
    End If
ErrHandler:
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
   On Error GoTo ErrHandler:
    If ThisWorkbook.dDefaultValueActivated = True And Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
            change = True
            If Target.value <> "" Then
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y + 2).value = "" Then
                    Application.ScreenUpdating = False
                    ActiveCell.Offset(x, y + 2).value = getDValue("Global Admins")
                    ActiveCell.Offset(x, y + 3).value = getDValue("No")
                    ActiveCell.Offset(x, y + 5).value = getDValue("No")
                    ActiveCell.Offset(x, y + 6).value = getDValue("Public")
                    Application.ScreenUpdating = True
                End If
            End If
        End If
    End If
ErrHandler:
End Sub
Private Sub Worksheet_deactivate()
On Error GoTo ErrHandler:
    If change = True And ThisWorkbook.dForceCalcul = True Then
        Application.CalculateFull
    End If
    boutonActive = True
ErrHandler:
End Sub
Private Sub Worksheet_activate()
On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
    
    allB(0) = "Personnes_desactive"
    allB(1) = "Entite_desactive"
    allB(2) = "Portee_desactive"
    boutonActive = True
    Call AvancerAllBouton(allB, True)
ErrHandler:
End Sub

Attribute VB_Name = "Feuil12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
Dim allB(2) As String
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
    If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("g:g")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Fonctions_active")
        ElseIf Not Application.Intersect(Target, Range("f:f")) Is Nothing Then
             Call AvancerAllBouton(allB)
            Call avancerBouton("Entite_active")
        Else
            Call AvancerAllBouton(allB)
        End If
    Else
        Call AvancerAllBouton(allB)
    End If
ErrHandler:
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
   On Error GoTo ErrHandler:
    If ThisWorkbook.dDefaultValueActivated = True And Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
            change = True
            If Target.value <> "" Then
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y + 2).value = "" Then
                    Application.ScreenUpdating = False
                    ActiveCell.Offset(x, y + 2).value = getDValue("Global Admins")
                    ActiveCell.Offset(x, y + 3).value = getDValue("Public")
                    Application.ScreenUpdating = True
                End If
            End If
        End If
    End If
ErrHandler:
End Sub
Private Sub Worksheet_deactivate()
   On Error GoTo ErrHandler:
    If change = True And ThisWorkbook.dForceCalcul = True Then
        Application.CalculateFull
    End If
    boutonActive = True
ErrHandler:
End Sub
Private Sub Worksheet_activate()
On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
    allB(0) = "Fonctions_desactive"
    allB(1) = "Entite_desactive"
    boutonActive = True
    Call AvancerAllBouton(allB, True)
ErrHandler:
End Sub



Attribute VB_Name = "Feuil13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
Dim allB(3) As String
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
   On Error GoTo ErrHandler:
    If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("f:f")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Listes_active")
        ElseIf Not Application.Intersect(Target, Range("g:g")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Fonctions_active")
        ElseIf Not Application.Intersect(Target, Range("h:h")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Personnes_active")
        Else
            Call AvancerAllBouton(allB)
        End If
    Else
        Call AvancerAllBouton(allB)
    End If
ErrHandler:
End Sub
Private Sub Worksheet_deactivate()
   On Error GoTo ErrHandler:
    If change = True And ThisWorkbook.dForceCalcul = True Then
        Application.CalculateFull
    End If
    boutonActive = True
ErrHandler:
End Sub
Private Sub Worksheet_activate()
   On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
    allB(0) = "Personnes_desactive"
    allB(1) = "Fonctions_desactive"
    allB(2) = "Listes_desactive"
    boutonActive = True
    Call AvancerAllBouton(allB, True)
ErrHandler:
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
   On Error GoTo ErrHandler:
    If ThisWorkbook.dDefaultValueActivated = True And Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
            change = True
            If Target.value <> "" Then
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y + 3).value = "" Then
                    Application.ScreenUpdating = False
                    ActiveCell.Offset(x, y + 1).value = getDValue("Group")
                    ActiveCell.Offset(x, y + 3).value = getDValue("Global Admins")
                    Application.ScreenUpdating = True
                End If
            End If
        End If
    End If
ErrHandler:
End Sub

Attribute VB_Name = "Feuil14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
Dim allB(1) As String
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
   On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
        If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("d:d")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Personnes_active")
        Else
            Call AvancerAllBouton(allB)
        End If
    Else
        Call AvancerAllBouton(allB)
    End If
ErrHandler:
End Sub
Private Sub Worksheet_deactivate()
   On Error GoTo ErrHandler:
    If change = True And ThisWorkbook.dForceCalcul = True Then
        Application.CalculateFull
    End If
    boutonActive = True
ErrHandler:
End Sub

Private Sub Worksheet_activate()
   On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
            allB(0) = "Personnes_desactive"
            boutonActive = True
            Call AvancerAllBouton(allB, True)
ErrHandler:
End Sub
Attribute VB_Name = "Feuil15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
 Dim allB(3) As String
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
        If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("e:e")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Filtre_active")
        ElseIf Not Application.Intersect(Target, Range("g:i")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Categorie_active")
        ElseIf Not Application.Intersect(Target, Range("j:q")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Colonne_active")
        Else
            Call AvancerAllBouton(allB)
        End If
    Else
        Call AvancerAllBouton(allB)
    End If
ErrHandler:
End Sub
Private Sub Worksheet_deactivate()
   On Error GoTo ErrHandler:
    If change = True And ThisWorkbook.dForceCalcul = True Then
        Application.CalculateFull
    End If
    boutonActive = True
ErrHandler:
End Sub
Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
On Error GoTo ErrHandler:
    Application.GoTo ActiveSheet.Range(Target.SubAddress), True
    ActiveWindow.ScrollColumn = 1
ErrHandler:
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
   On Error GoTo ErrHandler:
    'Gestion des lignes ajout|fffd| ou supprim|fffd|
    Static lngRow As Long
    Dim rng1 As Range
    Application.EnableEvents = True
    Set rng1 = ThisWorkbook.Names("RowMarkerVue").RefersToRange
    If lngRow = 0 Then
        lngRow = rng1.row
    End If
    If rng1.row <> lngRow Then
        vuesModif = True
        lngRow = rng1.row
    End If
    
    If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
            change = True
            vuesModif = True
        End If
    End If
ErrHandler:
End Sub

Private Sub Worksheet_activate()
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
   On Error GoTo ErrHandler:
            allB(0) = "Filtre_desactive"
            allB(1) = "Categorie_desactive"
            allB(2) = "Colonne_desactive"
            boutonActive = True
            Call AvancerAllBouton(allB, True)
ErrHandler:
End Sub
Attribute VB_Name = "Feuil16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
Dim allB(3) As String
Private Sub Worksheet_deactivate()
   On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
    If change = True And ThisWorkbook.dForceCalcul = True Then
        Application.CalculateFull
    End If
    boutonActive = True
ErrHandler:
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
   On Error GoTo ErrHandler:
        If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
            If Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
                change = True
            ElseIf ThisWorkbook.dDefaultValueActivated = True And Not Application.Intersect(Target, Range("g:g")) Is Nothing Then
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y - 1).value = getDValue("View") Then
                    Call AddUrl("Views!B", "Views!$B6:$B1000", "Navigators!$g" & ActiveCell.row)
                ElseIf ActiveCell.Offset(x, y - 1).value = getDValue("Statistic") Then
                    Call AddUrl("Statistics!B", "Statistics!$B6:$B1000", "Navigators!$g" & ActiveCell.row)
                ElseIf ActiveCell.Offset(x, y - 1).value = getDValue("Search") Then
                    Call AddUrl("Searches!B", "Searches!$B6:$B1000", "Navigators!$g" & ActiveCell.row)
                End If
            End If
        End If
ErrHandler:
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
Dim x As Integer
   On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
    
    If Not Application.Intersect(Target, Range("g:g")) Is Nothing Then
        If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
            Call Champs_GestionNav(Target)
            x = Target.row
            If (Range("f" & x) = getDValue("Vue")) Then
                Call AvancerAllBouton(allB)
                Call avancerBouton("Vue_active")
            ElseIf (Range("f" & x) = getDValue("Statistic")) Then
                Call AvancerAllBouton(allB)
                Call avancerBouton("Statistique_active")
            ElseIf (Range("f" & x) = getDValue("Search")) Then
                Call AvancerAllBouton(allB)
                Call avancerBouton("Recherche_active")
            End If
        Else
            Call AvancerAllBouton(allB)
        End If
    Else
         Call AvancerAllBouton(allB)
    End If
ErrHandler:
End Sub
Private Sub Worksheet_activate()
On Error GoTo ErrHandler:
allB(0) = "Vue_desactive"
allB(1) = "Statistique_desactive"
allB(2) = "Recherche_desactive"
boutonActive = True
Call AvancerAllBouton(allB, True)
    If (vuesModif = True) Then
        Call AddUrl("Views!B", "Views!$B6:$B1000", "Navigators!$g6:g500", False)
         vuesModif = False
    End If
    If (rechModif = True) Then
         Call AddUrl("Searches!B", "Searches!$B6:$B1000", "Navigators!$g6:g500", False)
         rechModif = False
    End If
    If (statsModif = True) Then
         Call AddUrl("Searches!B", "Searches!$B6:$B1000", "Navigators!$g6:g500", False)
         statsModif = False
    End If
ErrHandler:
End Sub

Attribute VB_Name = "Feuil17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
 Dim allB(1) As String
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
    If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("e:e")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Nav_active")
        Else
            Call AvancerAllBouton(allB)
        End If
    Else
        Call AvancerAllBouton(allB)
    End If
ErrHandler:
End Sub
Private Sub Worksheet_deactivate()
   On Error GoTo ErrHandler:
    If change = True And ThisWorkbook.dForceCalcul = True Then
        Application.CalculateFull
    End If
    boutonActive = True
ErrHandler:
End Sub
Private Sub Worksheet_activate()
   On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
    allB(0) = "Nav_desactive"
    boutonActive = True
    Call AvancerAllBouton(allB, True)
ErrHandler:
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
   On Error GoTo ErrHandler:
    If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If ThisWorkbook.dDefaultValueActivated = True And Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
            change = True
            If Target.value <> "" Then
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y + 1).value = "" Then
                    Application.ScreenUpdating = False
                    ActiveCell.Offset(x, y + 1).value = getDValue("Default Langage")
                    ActiveCell.Offset(x, y + 2).value = getDValue("Default Navigator")
                    ActiveCell.Offset(x, y + 3).value = getDValue("Default Navigator")
                    ActiveCell.Offset(x, y + 4).value = getDValue("No")
                    ActiveCell.Offset(x, y + 5).value = getDValue("Yes")
                    ActiveCell.Offset(x, y + 6).value = getDValue("DocProcess")
                    ActiveCell.Offset(x, y + 7).value = getDValue("Yes")
                    ActiveCell.Offset(x, y + 8).value = getDValue("Dashboard")
                    ActiveCell.Offset(x, y + 9).value = getDValue("Yes")
                    ActiveCell.Offset(x, y + 10).value = getDValue("No")
                    Application.ScreenUpdating = True
                End If
            End If
        End If
    End If
ErrHandler:
End Sub

Attribute VB_Name = "Feuil18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
Dim allB(2) As String
Private Sub Worksheet_deactivate()
   On Error GoTo ErrHandler:
    If change = True And ThisWorkbook.dForceCalcul = True Then
        Application.CalculateFull
    End If
    boutonActive = True
ErrHandler:
End Sub
Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
   On Error GoTo ErrHandler:
    Application.GoTo ActiveSheet.Range(Target.SubAddress), True
    ActiveWindow.ScrollColumn = 1
ErrHandler:
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
   On Error GoTo ErrHandler:
    'Gestion des lignes ajout|fffd| ou supprim|fffd|
    Static lngRow As Long
    Dim rng1 As Range
    Application.EnableEvents = True
    Set rng1 = ThisWorkbook.Names("RowMarkerRecherches").RefersToRange
    If lngRow = 0 Then
        lngRow = rng1.row
    End If
    If rng1.row <> lngRow Then
        rechModif = True
        lngRow = rng1.row
    End If
    
    If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
            change = True
            rechModif = True
        ElseIf ThisWorkbook.dDefaultValueActivated = True And Not Application.Intersect(Target, Range("D:D")) Is Nothing Then
            If Target.value <> "" Then
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y + 3).value = "" Then
                    Application.ScreenUpdating = False
                    ActiveCell.Offset(x, y + 3).value = getDValue("Yes")
                    Application.ScreenUpdating = True
                End If
            End If
        End If
    End If
ErrHandler:
End Sub
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
        If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("d:d")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Critere_active")
        ElseIf Not Application.Intersect(Target, Range("h:h")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Export_active")
        Else
            Call AvancerAllBouton(allB)
        End If
    Else
        Call AvancerAllBouton(allB)
    End If
ErrHandler:
End Sub
Private Sub Worksheet_activate()
   On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
            allB(0) = "Critere_desactive"
            allB(1) = "Export_desactive"
    boutonActive = True
    Call AvancerAllBouton(allB, True)
ErrHandler:
End Sub
Attribute VB_Name = "Feuil19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
Dim allB(4) As String
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    Dim x, i As Integer
    Dim str() As String
    On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
    If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        x = Target.row
        If Not Application.Intersect(Target, Range("d:d")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Critere_active")
        ElseIf Not Application.Intersect(Target, Range("h:h")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Axe_active")
        ElseIf Not Application.Intersect(Target, Range("i:i")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Valeur_active")
        ElseIf Not Application.Intersect(Target, Range("j:j")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Legende_active")
        ElseIf Not Application.Intersect(Target, Range("e:e")) Is Nothing Then
            'If (Range("E" & x) = "") And (Range("D" & x) <> "") Then
             '   str = Split(Range("D" & x), ";")
             '   For i = 1 To UBound(str) + 1
             '       Range("E" & x) = Range("E" & x) & "Valeur " & i & ";" 'Ajout de valeurs en fonction du nombre de ; dans Crit|fffd|res
             '   Next
            '    Range("E" & x) = Left(Range("E" & x), Len(Range("E" & x)) - 1) 'On retire le dernier ;
           'End If
            Call AvancerAllBouton(allB)
        ElseIf Not Application.Intersect(Target, Range("l:l")) Is Nothing Then 'Auto drill down
            str = Split(Range("h" & Target.row), ";")
            Call AvancerAllBouton(allB)
            If UBound(str) > 0 Then
                Range("l" & Target.row).value = "Oui"
            ElseIf Range("h" & Target.row) <> "" Then
                Range("l" & Target.row).value = "Non"
            End If
        Else
            Call AvancerAllBouton(allB)
        End If
    Else
        Call AvancerAllBouton(allB)
    End If
ErrHandler:
End Sub
Private Sub Worksheet_deactivate()
   On Error GoTo ErrHandler:
    If change = True And ThisWorkbook.dForceCalcul = True Then
        Application.CalculateFull
    End If
    boutonActive = True
ErrHandler:
End Sub
Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
On Error GoTo ErrHandler:
    Application.GoTo ActiveSheet.Range(Target.SubAddress), True
    ActiveWindow.ScrollColumn = 1
ErrHandler:
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
    'Gestion des lignes ajout|fffd| ou supprim|fffd|
    Static lngRow As Long
    Dim rng1 As Range
    On Error GoTo ErrHandler:
    Application.EnableEvents = True
    Set rng1 = ThisWorkbook.Names("RowMarkerStatistiques").RefersToRange
    If lngRow = 0 Then
        lngRow = rng1.row
    End If
    If rng1.row <> lngRow Then
        statsModif = True
        lngRow = rng1.row
    End If
    
    
    Dim str() As String
    If ThisWorkbook.dDefaultValueActivated = True And Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
            change = True
            statsModif = True
            If Target.value <> "" Then
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y + 9).value = "" Then
                    Application.ScreenUpdating = False
                    ActiveCell.Offset(x, y + 9).value = getDValue("Yes")
                    ActiveCell.Offset(x, y + 10).value = getDValue("Yes")
                    Application.ScreenUpdating = True
                End If
            End If
        End If
    End If
ErrHandler:
End Sub
Private Sub Worksheet_activate()
   On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
            allB(0) = "Critere_desactive"
            allB(1) = "Axe_desactive"
            allB(2) = "Valeur_desactive"
            allB(3) = "Legende_desactive"
    boutonActive = True
    Call AvancerAllBouton(allB, True)
ErrHandler:
End Sub




Attribute VB_Name = "Feuil2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
Dim allB(4) As String
Private Sub Worksheet_deactivate()
   On Error GoTo ErrHandler:
    If change = True And ThisWorkbook.dForceCalcul = True Then
        Application.CalculateFull
    End If
    boutonActive = True
ErrHandler:
End Sub
Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
   On Error GoTo ErrHandler:
    Application.GoTo ActiveSheet.Range(Target.SubAddress), True
    ActiveWindow.ScrollColumn = 1
ErrHandler:
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    'Gestion des lignes ajout|fffd| ou supprim|fffd|
    Static lngRow As Long
    Dim rng1 As Range
       On Error GoTo ErrHandler:
    Application.EnableEvents = True
    Set rng1 = ThisWorkbook.Names("RowMarkerEntites").RefersToRange
    If lngRow = 0 Then
        lngRow = rng1.row
    End If
    If rng1.row <> lngRow Then
        entitesModif = True
        lngRow = rng1.row
    End If
    
    
    If ThisWorkbook.dDefaultValueActivated = True And Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
            If Target.value <> "" Then
                change = True
                entitesModif = True
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y + 7).value = "" Then
                    Application.ScreenUpdating = False
                    ActiveCell.Offset(x, y + 1).value = getDValue("DefaultCode")
                    ActiveCell.Offset(x, y + 6).value = getDValue(Target.value)
                    ActiveCell.Offset(x, y + 7).value = getDValue("Yes")
                    ActiveCell.Offset(x, y + 3).value = getDValue("Global Admins")
                    ActiveCell.Offset(x, y + 4).value = getDValue("ADMIN Ennov")
                    ActiveCell.Offset(x, y + 13).value = getDValue("Public")
                    ActiveCell.Offset(x, y + 18).value = getDValue("No")
                    ActiveCell.Offset(x, y + 19).value = getDValue("No")
                    ActiveCell.Offset(x, y + 20).value = getDValue("No")
                    ActiveCell.Offset(x, y + 21).value = getDValue("Approval and distribution cycle")
                    ActiveCell.Offset(x, y + 22).value = getDValue("No")
                    ActiveCell.Offset(x, y + 23).value = getDValue("No")
                    Application.ScreenUpdating = True
                End If
            End If
        End If
    End If
ErrHandler:
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
    If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("g:g")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Personnes_active")
        ElseIf Not Application.Intersect(Target, Range("F:f")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Personnes_activeU")
        ElseIf Not Application.Intersect(Target, Range("k:k")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Personnes_active")
        ElseIf Not Application.Intersect(Target, Range("n:n")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Personnes_active")
        ElseIf Not Application.Intersect(Target, Range("s:s")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Personnes_active")
        ElseIf Not Application.Intersect(Target, Range("j:j")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Fonctions_active")
        ElseIf Not Application.Intersect(Target, Range("m:m")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Fonctions_active")
        ElseIf Not Application.Intersect(Target, Range("R:R")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Fonctions_active")
        ElseIf Not Application.Intersect(Target, Range("l:l")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Listes_active")
        ElseIf Not Application.Intersect(Target, Range("q:q")) Is Nothing Then
            If Target.value = "" Then
                Target.value = Target.Offset(x, y - 2).value
            End If
            Call AvancerAllBouton(allB)
            Call avancerBouton("Conf_active")
        Else
            Call AvancerAllBouton(allB)
        End If
    Else
        Call AvancerAllBouton(allB)
    End If
ErrHandler:
End Sub

Private Sub Worksheet_activate()
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
   On Error GoTo ErrHandler:
            allB(0) = "Personnes_desactive"
            allB(1) = "Fonctions_desactive"
            allB(2) = "Listes_desactive"
            allB(3) = "Conf_desactive"
    boutonActive = True
    Call AvancerAllBouton(allB, True)
ErrHandler:
End Sub
Attribute VB_Name = "Feuil20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim newType As Variant
    Dim i As Integer
       On Error GoTo ErrHandler:
    
    If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("di:di")) Is Nothing Then
            If Target.value <> "" And Target.Offset(0, 1).value = "" Then
                Target.Offset(0, 1).value = Sheets("SYSTEM_values").Range("$dh$1").value
                i = Sheets("SYSTEM_values").Range("$dh$1").value
                Sheets("SYSTEM_values").Range("$dh$1").value = i + 1
                
                'Mise en forme des workflows
                Sheets("WorkflowProcess").Range("WorkflowProcess!$H" & Target.Offset(0, 2).value).value = "=SYSTEM_values!" & Target.Address
                
                'newType = Sheets("WorkflowProcess").Range("WorkflowProcess!$H" & Target.Offset(0, 2).Value).Value
                'MsgBox "" & newType.Value
                
                'Ajout de l'url dans Type vers workflow
                Call AddUrl("WorkflowProcess!H", "Workflow!$H6:$H10000", "Types!$B6:B100")
                
                'Ajout de l'url vers Formulaire
                Call AddUrl("Forms!B", "Forms!$B6:$B3000", ("WorkflowProcess!$H" & Target.Offset(0, 2)))
                
                Sheets("WorkflowProcess").Range("WorkflowProcess!$H" & Target.Offset(0, 2).value).Font.Size = 12
                Sheets("WorkflowProcess").Range("WorkflowProcess!$H" & Target.Offset(0, 2).value).Font.Size = 14
                Sheets("WorkflowProcess").Range("WorkflowProcess!$H" & Target.Offset(0, 2).value).Font.Bold = True
                With Sheets("WorkflowProcess").Range("WorkflowProcess!$H" & Target.Offset(0, 2).value).Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .ThemeColor = xlThemeColorAccent4
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
                With Sheets("WorkflowProcess").Range("WorkflowProcess!$H" & Target.Offset(0, 2).value).Font
                    .ThemeColor = xlThemeColorLight2
                    .TintAndShade = 0
                End With
                With Sheets("WorkflowProcess").Range("WorkflowProcess!$A" & Target.Offset(0, 2).value & ":" & "WorkflowProcess!$N" & Target.Offset(0, 2).value).Interior
                    .PatternColorIndex = xlAutomatic
                    .ThemeColor = xlThemeColorAccent4
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
                With Sheets("WorkflowProcess").Range("WorkflowProcess!$AA" & Target.Offset(0, 2).value & ":" & "WorkflowProcess!$AC" & Target.Offset(0, 2).value).Interior
                    .PatternColorIndex = xlAutomatic
                    .ThemeColor = xlThemeColorAccent4
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
                

                
            End If
        End If
    End If
ErrHandler:
End Sub
Attribute VB_Name = "Feuil21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim oval As String
Dim changeSelect As Boolean

Private Sub Worksheet_deactivate()
    If ThisWorkbook.dDefaultValueActivated = True And changeSelect = True Then
        Call updateStepLabel
    End If
End Sub
Private Sub Worksheet_activate()
   On Error GoTo ErrHandler:
   changeSelect = False
    If (formModif = True) Then
        Call AddUrl("Forms!B", "Forms!$B6:$B1000", "WorkflowProcess!$h6:h10000")
        formModif = False
        'TODO Peut |fffd|tre le sortir du IF ?
        With Sheets("WorkflowProcess").Range("H1:H10000").Font
            .name = "Corbel"
            .Size = 14
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .ThemeColor = xlThemeColorLight2
            .TintAndShade = 0
            .ThemeFont = xlThemeFontMinor
        End With
        With Selection.Font
            .ThemeColor = xlThemeColorLight2
            .TintAndShade = 0
        End With
        Sheets("WorkflowProcess").Range("H1:H10000").Font.Bold = True
        Sheets("WorkflowProcess").Range("H1:H10000").Font.Underline = xlUnderlineStyleSingle
    End If
ErrHandler:
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
   On Error GoTo ErrHandler:
    If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("$D$6")) Is Nothing Then
            If Target.value <> "" Then
                Application.Calculate
                Application.GoTo ActiveSheet.Range("$A" & Range("$B$4").value), True
            End If
        ElseIf Not Application.Intersect(Target, Range("$AA$5:$ZZ$10000")) Is Nothing Then
            If Target.Offset(0, -1).value = "Libell|fffd| d'une |fffd|tape" Then
                ' CAS de la modification d'un nom d'|fffd|tape TODO
                Call majEtape(Sheets("WorkflowProcess").Range("D$6").value, oval, Target.value)
                Call ModifNameShape(Target)
            End If
        End If
    End If
ErrHandler:
End Sub
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    Dim row, newType As String
    On Error GoTo ErrHandler:
    changeSelect = True
    If Not Application.Intersect(Target, Range("$A:$N")) Is Nothing Then
        'Call afficherColonnes("AA:AC", "O:DDD")
    End If
    If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        oval = Target.value
    End If
    ' Gestion de la s|fffd|lection (pour |fffd|viter de supprimer/ajouter des |fffd|tapes avec le mauvais types)
    ' AutoScroll sur la bonne target
    row = Target.row
    If row > 9 Then
        For Each ligne In Sheets("SYSTEM_values").Range("DK2:DK200") '(liste des types)
            If ligne.value <= row And ligne.Offset(1, 0).value > row Then
                newType = ligne.Offset(0, -2).value
            ElseIf ligne.value >= row And ligne.Offset(-1, 0).value < row Then
                'newType = ligne.Offset(0, -2).Value
            End If
        Next
        If Sheets("WorkflowProcess").Range("D6").value <> newType Then
            Sheets("WorkflowProcess").Range("D6").value = newType
        End If
    End If
ErrHandler:
End Sub


Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
   On Error GoTo ErrHandler:
    Application.GoTo ActiveSheet.Range(Target.SubAddress), True
    ActiveWindow.ScrollColumn = 1
ErrHandler:
End Sub

Attribute VB_Name = "Feuil22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
Dim allB(1) As String
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
   On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
        If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("d:d")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Personnes_active")
        Else
            Call AvancerAllBouton(allB)
        End If
    Else
        Call AvancerAllBouton(allB)
    End If
ErrHandler:
End Sub
Private Sub Worksheet_deactivate()
   On Error GoTo ErrHandler:
    If change = True And ThisWorkbook.dForceCalcul = True Then
        Application.CalculateFull
    End If
    boutonActive = True
ErrHandler:
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
   On Error GoTo ErrHandler:
    If ThisWorkbook.dDefaultValueActivated = True And Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
            change = True
            If Target.value <> "" Then
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y + 2).value = "" Then
                    Application.ScreenUpdating = False
                    ActiveCell.Offset(x, y + 2).value = getDValue("Automatic")
                    ActiveCell.Offset(x, y + 3).value = getDValue("Numeric")
                    ActiveCell.Offset(x, y + 4).value = getDValue("DefaultNbrNumerical")
                    ActiveCell.Offset(x, y + 5).value = getDValue("DefaultNbrStart")
                    ActiveCell.Offset(x, y + 9).value = getDValue("Numeric")
                    ActiveCell.Offset(x, y + 10).value = getDValue("DefaultNbrRevNum")
                    ActiveCell.Offset(x, y + 11).value = getDValue("DefaultNbrRevStart")
                    Application.ScreenUpdating = True
                End If
            End If
        ElseIf Not Application.Intersect(Target, Range("h:h")) Is Nothing Then
            If Target.value <> "" Then
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y + 2).value = "" Then
                    Application.ScreenUpdating = False
                    ActiveCell.Offset(x, y + 1).value = getDValue("DefaultSeparator")
                    ActiveCell.Offset(x, y + 2).value = getDValue("Yes")
                    Application.ScreenUpdating = True
                End If
            End If
        End If
    End If
ErrHandler:
End Sub
Private Sub Worksheet_activate()
   On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
            allB(0) = "Personnes_desactive"
            boutonActive = True
            Call AvancerAllBouton(allB, True)
ErrHandler:
End Sub
Attribute VB_Name = "Feuil23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
Private Sub Worksheet_activate()
On Error GoTo ErrHandler:
    If (formModifType = True) Then
        Call AddUrl("Forms!B", "Forms!$B6:$B10000", "Types!$B6:B200") 'LIMIT
        formModifType = False
    End If
ErrHandler:
End Sub

Private Sub Worksheet_deactivate()
    Dim ligne, par As Variant
    boutonActive = True
    If change = True Then
        If ThisWorkbook.dForceCalcul = True Then
            Application.CalculateFull
        End If
        
        'Archivage des types process dans l'onglet SYSTEM
        For Each par In Sheets("SYSTEM_values").Range("SYSTEM_values!$Di2:$Di200") 'V|fffd|rification des types dans param|fffd|tres
            If par.value <> "" Then
                trouve = False
                For Each ligne In Sheets("Types").Range("Types!$B9:$B200")
                    If par.value <> "" Then
                        If ligne.value = par.value Then
                            trouve = True
                        ElseIf InStr(1, par.value, "[") <> 0 Then
                            trouve = True
                        End If
                    End If
                Next
                If trouve = False Then
                    par.value = "[" & par.value & "]"
                End If
            End If
        Next
        
        'Archivage dans l'onglet FORMS - Ajout des [] si type perdu
        For Each par In Sheets("Forms").Range("$b6:$b10000") 'V|fffd|rification des types dans Forms 'LIMIT
            If par.value <> "" Then
                trouve = False
                For Each ligne In Sheets("Types").Range("Types!$B9:$B200")
                    If par.value <> "" Then
                        If ligne.value = par.value Then
                            trouve = True
                        ElseIf InStr(1, par.value, "[") <> 0 Then
                            trouve = True
                        End If
                    End If
                Next
                If trouve = False Then
                    par.value = "[" & par.value & "]"
                    par.Hyperlinks.delete
                End If
            End If
        Next
    End If
    change = False
ErrHandler:
End Sub
Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
    Application.GoTo ActiveSheet.Range(Target.SubAddress), True
    ActiveWindow.ScrollColumn = 1
    
    If ActiveSheet.name = "WorkflowProcess" Then
        Sheets("WorkflowProcess").Range("WorkflowProcess!$D$6").value = ActiveCell.value
    End If
ErrHandler:
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
    'Gestion des lignes ajout|fffd| ou supprim|fffd|
    Static lngRow As Long
    Dim ligneT As Long
    Dim ligne, par As Variant
    'On Error GoTo ErrHandler:
    Dim rng1 As Range
    Application.EnableEvents = True
    Set rng1 = ThisWorkbook.Names("RowMarkerContenu").RefersToRange
    If lngRow = 0 Then
        lngRow = rng1.row
    End If
    If rng1.row <> lngRow Then
        typesModif = True
        lngRow = rng1.row
    End If
    
    ' Gestion des valeurs par d|fffd|faut
    If ThisWorkbook.dDefaultValueActivated = True And Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
            change = True
            typesModif = True
            If Target.value <> "" Then
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y + 1).value = "" Then
                    Application.ScreenUpdating = False
                    ActiveCell.Offset(x, y + 1).value = getDValue("Attachment")
                    ActiveCell.Offset(x, y + 2).value = getDValue("DefaultCode")
                    ActiveCell.Offset(x, y + 4).value = getDValue("Global Admins")
                    ActiveCell.Offset(x, y + 5).value = getDValue("Revisable")
                    ActiveCell.Offset(x, y + 6).value = getDValue("DefaultCycle")
                    Application.ScreenUpdating = True
                End If
            End If
        ElseIf Not Application.Intersect(Target, Range("c:c")) Is Nothing Then
            change = True
            typesModif = True
            If Target.value <> "" Then
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y).value = getDValue("Process") Then
                    Application.ScreenUpdating = False
                    ActiveCell.Offset(x, y + 4).value = getDValue("NA")
                    ActiveCell.Offset(x, y + 5).value = getDValue("NA")
                    ActiveCell.Offset(x, y + 6).value = getDValue("NA")
                    ActiveCell.Offset(x, y + 7).value = getDValue("NA")
                    Application.ScreenUpdating = True
                End If
            End If
        End If
     End If
    
    
    
    ' Gestion les autres onglets
    If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
            change = True
            typesModif = True
            If Target.value <> "" And oval = "" Then 'Si nouveau type
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                'Ajout dans formulaire automatiquement TODO : Make it cleaner
                For i = 2000 To 6 Step -1
                    If Sheets("Forms").Range("f" & i).value = "" Then
                        ligneT = i
                    Else
                        Exit For
                    End If
                Next
               
                While Sheets("Forms").Range("B" & ligneT).value <> ""
                    ligneT = ligneT + 1
                Wend
                Sheets("Forms").Range("B" & ligneT).value = Target.value
                Call AddUrl("Types!b", "Types!$b6:$b200", "Forms!$B" & ligneT)
                
                'Activer le change de param|fffd|tres
                ligneT = Sheets("SYSTEM_values").Range("SYSTEM_values!DI" & Rows.Count).End(xlUp).row + 1
                Sheets("SYSTEM_values").Range("$DI" & ligneT).value = Target.value
                
            ElseIf Target.value <> "" And oval <> "" Then 'Si remplacement du nom d'un type
                For Each par In Sheets("SYSTEM_values").Range("SYSTEM_values!$Di2:$Di200")
                If par.value <> "" Then
                    trouve = False
                    For Each ligne In Sheets("Types").Range("Types!$B9:$B200")
                        If ligne.value = par.value Then
                            trouve = True
                        End If
                    Next
                    If trouve = False Then
                        par.value = Target.value
                        Exit For
                        
                    End If
                End If
                Next
                
                'Remplacement dans form
                For Each ligne In Sheets("Forms").Range("$b6:$b3000")
                    If ligne.value = oval Then
                        Sheets("Forms").Range("B" & ligne.row).value = Target.value
                    End If
                Next
                       
             ElseIf Target.value = "" And oval <> "" Then 'Si suppression de type
                For Each par In Sheets("SYSTEM_values").Range("SYSTEM_values!$Di2:$Di200")
                    If oval = par.value Then
                        trouve = True
                    End If
                Next
                If trouve = False Then
                        par.value = "[" & par.value & "]"
                End If
                
                'Remplacement dans form
                For Each ligne In Sheets("Forms").Range("Forms!B1:B3000")
                    If ligne.value = oval Then
                        Sheets("Forms").Range("B" & ligne.row).value = "[" & oval & "]"
                        Sheets("Forms").Range("B" & ligne.row).par.Hyperlinks.delete
                    End If
                Next
                
                
            End If
        End If
    Else
         change = True
    End If
ErrHandler:
End Sub

Public Sub Worksheet_SelectionChange(ByVal Target As Range)
   'On Error GoTo ErrHandler:
 If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
    oval = Target.value
End If
ErrHandler:
End Sub
Attribute VB_Name = "Feuil4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
 Dim allB(6) As String
Private Sub Worksheet_activate()
   On Error GoTo ErrHandler:
    If (typesModif = True) Then
         Call AddUrl("Types!B", "Types!$B6:$B1000", "Matrix!$c6:c1000")
         typesModif = False
    End If
    If (entitesModif = True) Then
         Call AddUrl("Units!B", "Units!$B6:$B1000", "Matrix!$b6:b1000")
         entitesModif = False
    End If
    
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
   On Error GoTo ErrHandler:
            allB(0) = "Personnes_desactive"
            allB(1) = "Fonctions_desactive"
            allB(2) = "Listes_desactive"
            allB(3) = "Conf_desactive"
            allB(4) = "Workflows_desactive"
            allB(5) = "Signa_desactive"
    boutonActive = True
    Call AvancerAllBouton(allB, True)
ErrHandler:
End Sub
Private Sub Worksheet_deactivate()
   On Error GoTo ErrHandler:
    If change = True And ThisWorkbook.dForceCalcul = True Then
        Application.CalculateFull
    End If
    boutonActive = True
ErrHandler:
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
    If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("g:g")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Personnes_active")
        ElseIf Not Application.Intersect(Target, Range("k:k")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Personnes_active")
        ElseIf Not Application.Intersect(Target, Range("f:f")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Fonctions_active")
        ElseIf Not Application.Intersect(Target, Range("j:j")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Fonctions_active")
        ElseIf Not Application.Intersect(Target, Range("i:i")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Listes_active")
        ElseIf Not Application.Intersect(Target, Range("o:o")) Is Nothing Then
            If Target.value = "" Then
                Target.value = Target.Offset(x, y - 2).value
            End If
            Call AvancerAllBouton(allB)
            Call avancerBouton("Conf_active")
        ElseIf Not Application.Intersect(Target, Range("R:R")) Is Nothing Then
            If Target.value = "" Then
                Target.value = Target.Offset(x, y - 2).value
            End If
            Call AvancerAllBouton(allB)
            Call avancerBouton("Workflows_active")
        ElseIf Not Application.Intersect(Target, Range("T:T")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Signa_active")
        Else
            Call AvancerAllBouton(allB)
        End If
    Else
        Call AvancerAllBouton(allB)
    End If
ErrHandler:
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
   On Error GoTo ErrHandler:
    If ThisWorkbook.dDefaultValueActivated = True And Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("p:p")) Is Nothing Then
            ActiveCell.Offset(0, 4).Clear
        ElseIf Not Application.Intersect(Target, Range("c:c")) Is Nothing Then
            Call AddUrl("Types!B", "Types!$B6:$B1000", "Matrix!$c" & ActiveCell.row)
            If Target.value <> "" Then
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y + 1).value = "" Then
                    Application.ScreenUpdating = False
                    ActiveCell.Offset(x, y + 1).value = getDValue("Yes")
                    ActiveCell.Offset(x, y + 5).value = getDValue("Yes")
                    ActiveCell.Offset(x, y + 2).value = getDValue("No")
                    ActiveCell.Offset(x, y + 9).value = getDValue("Yes")
                    ActiveCell.Offset(x, y + 16).value = getDValue("Yes")
                    ActiveCell.Offset(x, y + 18).value = getDValue("DefaultCycle")
                    ActiveCell.Offset(x, y + 19).value = getDValue("Yes")
                    Application.ScreenUpdating = True
                End If
            End If
        ElseIf Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
            Call AddUrl("Units!B", "Units!$B6:$B1000", "Matrix!$b" & ActiveCell.row)
        End If
    End If
ErrHandler:
End Sub



Attribute VB_Name = "Feuil5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
Dim allB(1) As String
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
    If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("g:g")) Is Nothing Then
             Call AvancerAllBouton(allB)
            Call avancerBouton("Entite_active")
        Else
            Call AvancerAllBouton(allB)
        End If
    Else
        Call AvancerAllBouton(allB)
    End If
ErrHandler:
End Sub
Private Sub Worksheet_deactivate()
   On Error GoTo ErrHandler:
    If change = True And ThisWorkbook.dForceCalcul = True Then
        Application.CalculateFull
    End If
    boutonActive = True
ErrHandler:
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    'Gestion des lignes ajout|fffd| ou supprim|fffd|
    Static lngRow As Long
    Dim rng1 As Range
       On Error GoTo ErrHandler:
    Application.EnableEvents = True
    Set rng1 = ThisWorkbook.Names("RowMarkerContenu").RefersToRange
    If lngRow = 0 Then
        lngRow = rng1.row
    End If
    If rng1.row <> lngRow Then
        contenusModif = True
        lngRow = rng1.row
    End If
    
    change = True
    If ThisWorkbook.dDefaultValueActivated = True And Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
            contenusModif = True
            If Target.value <> "" Then
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y + 1).value = "" Then
                    Application.ScreenUpdating = False
                    ActiveCell.Offset(x, y + 1).value = getDValue("Tree")
                    ActiveCell.Offset(x, y + 3).value = getDValue("Global Admins")
                    Application.ScreenUpdating = True
                End If
            End If
        End If
    End If

ErrHandler:
End Sub
Private Sub Worksheet_activate()
   On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
            allB(0) = "Entite_desactive"
    boutonActive = True
    Call AvancerAllBouton(allB, True)
ErrHandler:
End Sub
Attribute VB_Name = "Feuil6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
Dim allB(2) As String
Private Sub Worksheet_deactivate()
    If change = True And ThisWorkbook.dForceCalcul = True Then
        Application.CalculateFull
    End If
    boutonActive = True
ErrHandler:
End Sub
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
    If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("D:D")) Is Nothing Then
            Call AvancerAllBouton(allB)
            Call avancerBouton("Champ_active")
        ElseIf Not Application.Intersect(Target, Range("B:P")) Is Nothing Then
            Call AvancerAllBouton(allB)
            If Worksheets("Forms").Range("B" & ActiveCell.row).value <> "" Then
                Call avancerBouton("Etape_active")
            Else
                Call AvancerAllBouton(allB)
            End If
        Else
            Call AvancerAllBouton(allB)
        End If
    Else
        Call AvancerAllBouton(allB)
    End If
ErrHandler:
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    'Gestion des lignes ajout|fffd| ou supprim|fffd|
    Static lngRow As Long
    Dim rng1 As Range
       On Error GoTo ErrHandler:
    Application.EnableEvents = True
    Set rng1 = ThisWorkbook.Names("RowMarkerForm").RefersToRange
    If lngRow = 0 Then
        lngRow = rng1.row
    End If
    If rng1.row <> lngRow Then
        formModif = True
        formModifType = True
        lngRow = rng1.row
    End If
    
    If ThisWorkbook.dDefaultValueActivated = True And Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
            formModif = True
            formModifType = True
        End If
        If Not Application.Intersect(Target, Range("d:d")) Is Nothing Then
            If Target.value <> "" Then
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y + 2).value = "" Then
                    Application.ScreenUpdating = False
                    ActiveCell.Offset(x, y + 1).value = getDValue("No")
                    ActiveCell.Offset(x, y + 2).value = getDValue("No")
                    ActiveCell.Offset(x, y + 3).value = "0"
                    Application.ScreenUpdating = True
                End If
            End If
            ActiveSheet.Calculate
        ElseIf Not Application.Intersect(Target, Range("g:g")) Is Nothing Then
            If Target.value <> "" Then
                If Target.value > 0 Then
                    Target.Offset(0, -2).value = getDValue("Yes")
                Else
                    Target.Offset(0, -2).value = getDValue("No")
                End If
            End If
        End If
    End If
ErrHandler:
End Sub
Private Sub Worksheet_activate()
    On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
    Call AddUrl("WorkflowProcess!H", "WorkflowProcess!$h6:h10000", "Forms!$B6:$B1000")
    allB(0) = "Champ_desactive"
    allB(1) = "Etape_desactive"
    boutonActive = True
    Call AvancerAllBouton(allB, True)
ErrHandler:
End Sub

Attribute VB_Name = "Feuil7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
Dim oval As String
Dim allB(1) As String

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
   On Error GoTo ErrHandler:
    Application.GoTo ActiveSheet.Range(Target.SubAddress), True
    ActiveWindow.ScrollColumn = 1
ErrHandler:
End Sub
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    Dim x As Integer
    On Error GoTo ErrHandler:
    If ThisWorkbook.dActiveButtons = False Then
        Exit Sub
    End If
    
    If Not Application.Intersect(Target, Range("G:G")) Is Nothing Then
        If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
            Call Champs_GestionPCCP(Target)
            x = Target.row
            If Range("F" & x).value = getDValue("Choice") Or Range("F" & x).value = getDValue("Tree") Or Range("F" & x).value = getDValue("Table") Then
                Call avancerBouton("Contenu_activeU")
            Else
                 Call AvancerAllBouton(allB)
            End If
        Else
            Call AvancerAllBouton(allB)
        End If
    Else
         Call AvancerAllBouton(allB)
    End If
    If Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
    oval = Target.value
    End If
ErrHandler:
End Sub
Private Sub Worksheet_activate()
   On Error GoTo ErrHandler:
    If (contenusModif = True) Then
        Call AddUrl("Contents!B", "Contents!$B1:$B10000", "Fields!$g6:g1000")
        contenusModif = False
    End If
    allB(0) = "Contenu_desactive"
    boutonActive = True
    Call AvancerAllBouton(allB, True)

ErrHandler:
End Sub
Private Sub Worksheet_deactivate()
   On Error GoTo ErrHandler:
    If change = True And ThisWorkbook.dForceCalcul = True Then
        Application.CalculateFull
    End If
    boutonActive = True
ErrHandler:
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim val As Variant
       On Error GoTo ErrHandler:
    If ThisWorkbook.dDefaultValueActivated = True And Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Target.value <> "" Then
            If Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
                change = True
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y + 2).value = "" Then
                    Application.ScreenUpdating = False
                    ActiveCell.Offset(x, y + 3).value = getDValue("Global Admins")
                    ActiveCell.Offset(x, y + 4).value = getDValue("Text")
                    ActiveCell.Offset(x, y + 6).value = getDValue("No")
                    Application.ScreenUpdating = True
                End If
                
                'Maj des champs dans Forms
                Application.EnableEvents = False
                If oval <> "" And Target.value <> "" Then
                    For Each val In Sheets("Forms").Range("D6:D10000") 'LIMIT
                        If val.value = oval Then
                            val.value = Target.value
                        End If
                    Next val
                End If
                Application.EnableEvents = True
            End If
            'If Not Application.Intersect(Target, Range("d:d")) Is Nothing Then
            '    If Target.Value = "Plan de classement" Then
            '        x = Target.Row - ActiveCell.Row
            '        y = Target.Column - ActiveCell.Column
            '        If ActiveCell.Offset(x, y + 3).Value <> "" Then
            '            Application.ScreenUpdating = False
            '            ActiveCell.Offset(x, y + 3).Value = getDValue("Tree")
            '            Application.ScreenUpdating = True
            '        End If
            '    End If
            'End If
        End If
        If Not Application.Intersect(Target, Range("G:G")) Is Nothing Then
                x = Target.row - ActiveCell.row
                    With Target
                    .HorizontalAlignment = xlGeneral
                    .VerticalAlignment = xlCenter
                    .WrapText = False
                    .Orientation = 0
                    .AddIndent = False
                    .IndentLevel = 0
                    .ShrinkToFit = False
                    .ReadingOrder = xlContext
                    .MergeCells = False
                    End With
                    Call AddUrl("Contents!B", "Contents!$B6:$B10000", "Fields!$g" & Target.row)
        End If
    End If
ErrHandler:
End Sub

Attribute VB_Name = "Feuil8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim change As Boolean
Private Sub Worksheet_deactivate()
   On Error GoTo ErrHandler:
    If change = True And ThisWorkbook.dForceCalcul = True Then
        Application.CalculateFull
    End If
    boutonActive = True
ErrHandler:
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
   On Error GoTo ErrHandler:
    If ThisWorkbook.dDefaultValueActivated = True And Target.Rows.Count < 2 And Target.Columns.Count < 2 Then
        If Not Application.Intersect(Target, Range("b:b")) Is Nothing Then
            change = True
            If Target.value <> "" Then
                x = Target.row - ActiveCell.row
                y = Target.Column - ActiveCell.Column
                If ActiveCell.Offset(x, y + 2).value = "" Then
                    Application.ScreenUpdating = False
                    ActiveCell.Offset(x, y + 2).value = getDValue("Global Admins")
                    Application.ScreenUpdating = True
                End If
            End If
        End If
    End If
ErrHandler:
End Sub


Attribute VB_Name = "Formatting"
Sub resetFormatConditionsOnAllSheet()
    
    ' FUNCTIONS
    Range("Tableau5").FormatConditions.delete
    Range("Tableau5").FormatConditions.Add Type:=xlExpression, Formula1:= _
        "=EXACT(INDIRECT(""G""&LIGNE());""" & getDValue("Yes") & """)"
    Range("Tableau5").FormatConditions(Range("Tableau5").FormatConditions.Count).SetFirstPriority
    With Range("Tableau5").FormatConditions(1).Font
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
    End With
    With Range("Tableau5").FormatConditions(1).Interior
        .PatternColorIndex = 0
        .ThemeColor = xlThemeColorAccent4
        .TintAndShade = 0.799981688894314
        .PatternTintAndShade = 0
    End With
    Range("Tableau5").FormatConditions(1).StopIfTrue = False
    
    ' CONTENTS
    Range("Tableau12").FormatConditions.delete
    Range("Tableau12").FormatConditions.Add Type:=xlExpression, Formula1:= _
        "=NB.SI(($H12:$Q12);""><"") > 1"
    Range("Tableau12").FormatConditions(Range("Tableau12").FormatConditions.Count).SetFirstPriority
    With Range("Tableau12").FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 49407
        .TintAndShade = 0
    End With
    Range("Tableau12").FormatConditions(1).StopIfTrue = False
    Range("Tableau12").FormatConditions.Add Type:=xlExpression, Formula1:= _
        "=NON(ESTVIDE(INDIRECT(""B""&LIGNE())))"
    Range("Tableau12").FormatConditions(Range("Tableau12").FormatConditions.Count).SetFirstPriority
    With Range("Tableau12").FormatConditions(1).Font
        .ThemeColor = xlThemeColorAccent6
        .TintAndShade = 0
    End With
    With Range("Tableau12").FormatConditions(1).Interior
        .PatternColorIndex = 0
        .ThemeColor = xlThemeColorAccent4
        .TintAndShade = 0.799981688894314
        .PatternTintAndShade = 0
    End With
    Range("Tableau12").FormatConditions(1).StopIfTrue = False
    Range("Tableau12").FormatConditions.Add Type:=xlExpression, Formula1:= _
        "=SI(NON(ESTVIDE($B12)); SI(NBVAL($H12:$R12) >0;VRAI;FAUX); FAUX )"
    Range("Tableau12").FormatConditions(Range("Tableau12").FormatConditions.Count).SetFirstPriority
    With Range("Tableau12").FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 49407
        .TintAndShade = 0
    End With
    Range("Tableau12").FormatConditions(1).StopIfTrue = False
    
        
    ' FORMS
    Worksheets("Forms").Cells.FormatConditions.delete
    Range("Tableau14").FormatConditions.Add Type:=xlExpression, Formula1:= _
        "=SI(NON(ESTVIDE($B6)); SI(NBVAL($C6:$J6) >1;VRAI;FAUX); FAUX )"
    Range("Tableau14").FormatConditions(Range("Tableau14").FormatConditions.Count).SetFirstPriority
    With Range("Tableau14").FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 49407
        .TintAndShade = 0
    End With
    Range("Tableau14").FormatConditions(1).StopIfTrue = False

    Range("Tableau14").FormatConditions.Add Type:=xlExpression, Formula1:= _
        "=NON(ESTVIDE(INDIRECT(""B""&LIGNE())))"
    Range("Tableau14").FormatConditions(Range("Tableau14").FormatConditions.Count).SetFirstPriority
    With Range("Tableau14").FormatConditions(1).Font
        .Bold = False
        .Italic = False
        .ThemeColor = xlThemeColorAccent6
        .TintAndShade = 0
    End With
    With Range("Tableau14").FormatConditions(1).Borders(xlTop)
        .LineStyle = xlContinuous
        .ThemeColor = 5
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Range("Tableau14").FormatConditions(1).Interior
        .PatternColorIndex = 0
        .ThemeColor = xlThemeColorAccent4
        .TintAndShade = 0.799981688894314
        .PatternTintAndShade = 0
    End With
    Range("Tableau14").FormatConditions(1).StopIfTrue = False
   
        ' Champs blancs/jaunes
    Range("Forms!D6:D6000").FormatConditions.Add Type:=xlExpression, Formula1:= _
        "=NON(OU(EXACT(Forms!D6;DECALER(SYSTEM_values!$H$2;0;0;NBVAL(SYSTEM_values!$H:$H)+1))))"
    Range("Forms!D6:D6000").FormatConditions(Range("Forms!D6:D6000").FormatConditions.Count).SetFirstPriority
    With Range("Forms!D6:D6000").FormatConditions(1).Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 14739711
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    Range("Forms!D6:D6000").FormatConditions(1).StopIfTrue = False
    

    'Champs verts
    Range("Forms!D6:D6000").FormatConditions.Add Type:=xlExpression, Formula1:= _
        "=OU(EXACT(D6;DECALER(SYSTEM_values!$AU$2;0;0;NB.SI(SYSTEM_values!$AU:$AU;""><"")-1)))"
    Range("Forms!D6:D6000").FormatConditions(Range("Forms!D6:D6000").FormatConditions.Count).SetFirstPriority
    With Range("Forms!D6:D6000").FormatConditions(1).Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 14811108
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    Range("Forms!D6:D6000").FormatConditions(1).StopIfTrue = False
    
    ' Section
    Range("Forms!C6:AA6000").FormatConditions.Add Type:=xlExpression, Formula1:= _
        "=NON(ESTVIDE(INDIRECT(""C""&LIGNE())))"
    Range("Forms!C6:AA6000").FormatConditions(Range("Forms!C6:AA6000").FormatConditions.Count).SetFirstPriority
    With Range("Forms!C6:AA6000").FormatConditions(1).Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark2
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    Range("Forms!C6:AA6000").FormatConditions(1).StopIfTrue = False
    
    ' Obligatoire
    Range("Forms!E:E").FormatConditions.Add Type:=xlTextString, String:= _
        "=SYSTEM_values!$AN$2", TextOperator:=xlContains
    Range("Forms!E:E").FormatConditions(Range("Forms!E:E").FormatConditions.Count).SetFirstPriority
    With Range("Forms!E:E").FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 15461631
        .TintAndShade = 0
    End With
    Range("Forms!E:E").FormatConditions(1).StopIfTrue = False
    
    
    ' Etapes '''''''''''''''
    Range("Forms!P:BB").FormatConditions.delete
    Range("Forms!P6:BA6000").FormatConditions.Add Type:=xlExpression, Formula1:= _
        "=NON(ESTVIDE(INDIRECT(""B""&LIGNE())))"
    Range("Forms!P6:BA6000").FormatConditions(Range("Forms!P6:BA6000").FormatConditions.Count).SetFirstPriority
    With Range("Forms!P6:BA6000").FormatConditions(1).Font
        .Bold = True
        .Italic = False
        .TintAndShade = 0
    End With
    With Range("Forms!P6:BA6000").FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent5
        .TintAndShade = 0.799981688894314
    End With
    Range("Forms!P6:BA6000").FormatConditions(1).StopIfTrue = False
    
    ' Bordure
    Range("Forms!P:BB").FormatConditions.Add Type:=xlExpression, Formula1:= _
        "=NBCAR(Q1)>0"
    Range("Forms!P:BB").FormatConditions(Range("Forms!P:BB").FormatConditions.Count).SetFirstPriority
    With Range("Forms!P:BB").FormatConditions(1).Borders(xlRight)
        .LineStyle = xlContinuous
        .ThemeColor = 2
        .TintAndShade = 0.399945066682943
        .Weight = xlThin
    End With
    Range("Forms!P:BB").FormatConditions(1).StopIfTrue = False
    
    ' Couleur valeurs |fffd|tapes
    Range("Forms!P:BB").FormatConditions.Add Type:=xlTextString, String:= _
        "=SYSTEM_values!$AD$6", TextOperator:=xlContains
    Range("Forms!P:BB").FormatConditions(Range("Forms!P:BB").FormatConditions.Count).SetFirstPriority
    With Range("Forms!P:BB").FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0.799981688894314
    End With
    Range("Forms!P:BB").FormatConditions(1).StopIfTrue = False
    
    Range("Forms!P:BB").FormatConditions.Add Type:=xlTextString, String:= _
        "=SYSTEM_values!$AD$5", TextOperator:=xlContains
    Range("Forms!P:BB").FormatConditions(Range("Forms!P:BB").FormatConditions.Count).SetFirstPriority
    With Range("Forms!P:BB").FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0.799981688894314
    End With
    Range("Forms!P:BB").FormatConditions(1).StopIfTrue = False

    Range("Forms!P:BB").FormatConditions.Add Type:=xlTextString, String:= _
        "=SYSTEM_values!$AE$3", TextOperator:=xlContains
    Range("Forms!P:BB").FormatConditions(Range("Forms!P:BB").FormatConditions.Count).SetFirstPriority
    With Range("Forms!P:BB").FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 15466475
        .TintAndShade = 0
    End With
    Range("Forms!P:BB").FormatConditions(1).StopIfTrue = False

    Range("Forms!P:BB").FormatConditions.Add Type:=xlTextString, String:= _
        "=SYSTEM_values!$AE$4", TextOperator:=xlContains
    Range("Forms!P:BB").FormatConditions(Range("Forms!P:BB").FormatConditions.Count).SetFirstPriority
    With Range("Forms!P:BB").FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 15461631
        .TintAndShade = 0
    End With
    Range("Forms!P:BB").FormatConditions(1).StopIfTrue = False

    Range("Forms!P:BB").FormatConditions.Add Type:=xlTextString, String:= _
        "=SYSTEM_values!$AE$5", TextOperator:=xlContains
    Range("Forms!P:BB").FormatConditions(Range("Forms!P:BB").FormatConditions.Count).SetFirstPriority
    With Range("Forms!P:BB").FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 15204348
        .TintAndShade = 0
    End With
    Range("Forms!P:BB").FormatConditions(1).StopIfTrue = False

    Range("Forms!P:BB").FormatConditions.Add Type:=xlTextString, String:= _
        "=SYSTEM_values!$AE$6", TextOperator:=xlContains
    Range("Forms!P:BB").FormatConditions(Range("Forms!P:BB").FormatConditions.Count).SetFirstPriority
    With Range("Forms!P:BB").FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent6
        .TintAndShade = 0.799981688894314
    End With
    Range("Forms!P:BB").FormatConditions(1).StopIfTrue = False
    
     ' WORKFLOW
    Range("Tableau2").FormatConditions.delete
    Range("Tableau2").FormatConditions.Add Type:=xlExpression, Formula1:= _
        "=NON(ESTVIDE(INDIRECT(""B""&LIGNE())))"
    Range("Tableau2").FormatConditions(Range("Tableau2").FormatConditions.Count).SetFirstPriority
    With Range("Tableau2").FormatConditions(1).Borders(xlTop)
        .LineStyle = xlContinuous
        .ThemeColor = 9
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Range("Tableau2").FormatConditions(1).Font
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
    End With
    With Range("Tableau2").FormatConditions(1).Interior
        .PatternColorIndex = 0
        .ThemeColor = xlThemeColorAccent4
        .TintAndShade = 0.799981688894314
        .PatternTintAndShade = 0
    End With
    Range("Tableau2").FormatConditions(1).StopIfTrue = False
    
    ' MATRIX
    Range("Tableau21").FormatConditions.delete
    Range("Tableau21").FormatConditions.Add Type:=xlExpression, Formula1:= _
        "=NON(ESTVIDE(INDIRECT(""B""&LIGNE())))"
    Range("Tableau21").FormatConditions(Range("Tableau21").FormatConditions.Count).SetFirstPriority
    With Range("Tableau21").FormatConditions(1).Borders(xlTop)
        .LineStyle = xlContinuous
        .ThemeColor = 5
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Range("Tableau21").FormatConditions(1).Font
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
    End With
    With Range("Tableau21").FormatConditions(1).Interior
        .PatternColorIndex = 0
        .ThemeColor = xlThemeColorAccent4
        .TintAndShade = 0.799981688894314
        .PatternTintAndShade = 0
    End With
    Range("Tableau21").FormatConditions(1).StopIfTrue = False
        
    ' CODIFICATION
    Range("Tableau1061").FormatConditions.delete
    Range("Tableau1061").FormatConditions.Add Type:=xlExpression, Formula1:= _
        "=NON(ESTVIDE(INDIRECT(""B""&LIGNE())))"
    Range("Tableau1061").FormatConditions(Range("Tableau1061").FormatConditions.Count).SetFirstPriority
    With Range("Tableau1061").FormatConditions(1).Borders(xlTop)
        .LineStyle = xlContinuous
        .ThemeColor = 9
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Range("Tableau1061").FormatConditions(1).Font
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
    End With
    With Range("Tableau1061").FormatConditions(1).Interior
        .PatternColorIndex = 0
        .ThemeColor = xlThemeColorAccent4
        .TintAndShade = 0.799981688894314
        .PatternTintAndShade = 0
    End With
    Range("Tableau1061").FormatConditions(1).StopIfTrue = False

        
    ThisWorkbook.Save
    DoEvents
    
    MsgBox getDValue("Need to reboot")
    'If MsgBox("Need to reboot this file, do it now ?", vbYesNo, "Save?") = vbYes Then
    '    Dim wb As Excel.Workbook
    '    Set wb = ThisWorkbook
    '
    '    Dim pth As String
    '    pth = wb.FullName
    '
    '    Application.OnTime Now + TimeValue("00:00:01"), Application.Workbooks.Open(pth)
    '    wb.Close (False)
    'End If

End Sub
Attribute VB_Name = "General"
' MACRO AVEC RACCOURCIS CLAVIER ET VARIABLES GLOBALES
' Date de cr|fffd|ation : 28/02/2018
' Auteur : Maxime Derobillard

'Gestion des pages modifi|fffd|es
Public contenusModif As Boolean
Public typesModif As Boolean
Public formModif As Boolean
Public formModifType As Boolean
Public entitesModif As Boolean
Public vuesModif As Boolean
Public rechModif As Boolean
Public statsModif As Boolean
Dim oval As String
Public lastValue As String
Public lastCmb As String
Sub NoCtrlX() 'CTRL + x
Attribute NoCtrlX.VB_ProcData.VB_Invoke_Func = "x\n14"
On Error GoTo ErrHandler:
    MsgBox getDValue("WarningCTRLX")
ErrHandler:
End Sub
Sub ToutRecalculer() 'CTRL + r
On Error GoTo ErrHandler:
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.StatusBar = False
    Application.CalculateFullRebuild
ErrHandler:
End Sub

Sub FormSurListe() 'CTRL + q
Attribute FormSurListe.VB_ProcData.VB_Invoke_Func = "q\n14"
    Dim formule As String
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    On Error GoTo errorHandler
    formule = Right(ActiveCell.Validation.Formula1, Len(ActiveCell.Validation.Formula1) - 1)
    Form.value = formule
    Form.Show vbModeless
errorHandler:
End Sub

Sub updateAllParams()
    ThisWorkbook.dDefaultValueActivated = updateParam("DefaultValue", ThisWorkbook.dDefaultValueActivated)
    ThisWorkbook.dForceCalcul = updateParam("Force compute", ThisWorkbook.dForceCalcul)
    ThisWorkbook.dActiveButtons = updateParam("Active buttons", ThisWorkbook.dActiveButtons)
End Sub

Function updateParam(sParam, vParam) As Variant
    Dim ran As Range
    Dim oldV As Variant
    
    oldV = vParam
    Debug.Print ("Before : " & sParam & " -> " & oldV)
    
    For Each ran In ThisWorkbook.Sheets("Datas").Range("B30:B60") 'LIMIT
        If ran.value <> "" And getDValue(sParam) = ran.value And ran.Offset(0, 1).value <> "" Then
            If ran.Offset(0, 1).value = getDValue("Yes") Then
                Debug.Print ("After : " & sParam & " -> YES")
                updateParam = True
                Exit Function
            ElseIf ran.Offset(0, 1).value = getDValue("No") Then
                Debug.Print ("After : " & sParam & " -> NO")
                updateParam = False
                Exit Function
            Else
                Debug.Print ("After : " & sParam & " ->  " & getDValue(ran.Offset(0, 1).value))
                updateParam = getDValue(ran.Offset(0, 1).value)
                Exit Function
            End If
        End If
    Next ran
    
    updateParam = oldV
    Debug.Print (sParam & " : " & oldV & " -> " & vParam)
End Function

Sub reOpen()

End Sub
Attribute VB_Name = "GenerateStep"
Sub generateListOfStep()
    Dim val As Range
    Dim currentType As String
    Dim currentTypeID As Integer
    Dim c As Integer
    
    Application.ScreenUpdating = False
    Call cleanWorkflowSteps
    
    ' GET TYPE NAME
    If Worksheets("Forms").Range("B" & ActiveCell.row).value = "" Then
        MsgBox "Wrong place to generate Step"
        Exit Sub
    Else
        currentType = Worksheets("Forms").Range("B" & ActiveCell.row).value
    End If

    ' GET TYPE ID
    For Each val In Worksheets("SYSTEM_values").Range("DI3:DI100") 'LIMIT
        If val.value = currentType Then
            currentTypeID = val.Offset(0, 1).value
            Exit For
        End If
    Next val
    
    ' GENERATE STEPS
    c = 0
    For Each val In Worksheets("SYSTEM_values").Range("DD3:DD1000") 'LIMIT
        If val.value = currentTypeID Then
            If val.Offset(0, 2).value <> "" And val.Offset(0, 2).value <> "XXX" Then
               Worksheets("Forms").Range("P" & ActiveCell.row).Offset(0, c).value = val.Offset(0, 2).value
                c = c + 1
            End If
            
        ElseIf val.value = "" Then
            Exit For
        End If
    Next val
    c = 0
    
    If Worksheets("Forms").Range("P" & ActiveCell.row).Offset(0, 0).value = "" Then
        Application.ScreenUpdating = True
        Exit Sub ' Exit if no step
    End If
    
    ' GENERATE DEFAULT VALUE
    For Each val In Worksheets("Forms").Range("P" & ActiveCell.row + 1 & ":AZ" & ActiveCell.row + 200) 'LIMIT
        If Worksheets("Forms").Range(Col_Letter(val.Column) & ActiveCell.row).value = "" Then 'No more step
            GoTo NextIteration
        End If
        
        If Worksheets("Forms").Range("B" & val.row).value <> "" Then 'New type found
            Exit For
        End If
        
        If isField(val) Then
            Call addListField(val)
        ElseIf isSection(val) Then
            Call addListSection(val)
        End If
NextIteration:
    Next val

    Application.ScreenUpdating = True
End Sub

Function isSection(val As Range)
    isSection = Worksheets("Forms").Range("C" & val.row).value <> ""
End Function

Function isField(val As Range)
    isField = Worksheets("Forms").Range("D" & val.row).value <> ""
End Function

Sub addListField(val As Range)
    If val.value = "" Then
        With val.Validation
            .delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
            xlBetween, Formula1:="=FieldValue"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = True
            .ShowError = False
        End With
        val.value = Range("FieldValue")(1).value
    End If
End Sub

Sub addListSection(val As Range)
    If val.value = "" Then
        With val.Validation
            .delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
            xlBetween, Formula1:="=SectionValue"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            
            .ShowInput = True
            .ShowError = False
        End With
        val.value = Range("SectionValue")(1).value
    End If
End Sub

Attribute VB_Name = "GestionsBoutons"
' Gestion des Forms de liste |fffd| choix

Dim boutonActive As Boolean

' Ajout et suppression des personnes

'BOUTONS
Sub AjoutSupression_Personnes()
On Error GoTo ErrHandler:
    Dim Form As UsfListe
    Set Form = New UsfListe
    Form.value = "Personnes"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Fonctions()
On Error GoTo ErrHandler:
    Dim Form As UsfListe
    Set Form = New UsfListe
    Form.value = "Fonctions"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Listes()
On Error GoTo ErrHandler:
    Dim Form As UsfListe
    Set Form = New UsfListe
    Form.value = "Listes"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Entites()
On Error GoTo ErrHandler:
    Dim Form As UsfListe
    Set Form = New UsfListe
    Form.value = "Entit|fffd|s"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Worflow()
On Error GoTo ErrHandler:
    Dim Form As UsfListe
    Set Form = New UsfListe
    Form.value = "Workflow"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Confidentialites()
On Error GoTo ErrHandler:
    Dim Form As UsfListe
    Set Form = New UsfListe
    Form.value = "Confidentialit|fffd|s_"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Navigateurs()
On Error GoTo ErrHandler:
    Dim Form As UsfListe
    Set Form = New UsfListe
    Form.value = "Navigateurs"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Criteres()
On Error GoTo ErrHandler:
    Dim Form As UsfListe
    Set Form = New UsfListe
    Form.value = "Crit|fffd|res"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Filtres()
On Error GoTo ErrHandler:
    Dim Form As UsfListe
    Set Form = New UsfListe
    Form.value = "Filtres"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Champ_Axe()
On Error GoTo ErrHandler:
    Dim Form As UsfListe
    Set Form = New UsfListe
    Form.value = "Champ_Axe"
    Form.Show vbModeless
ErrHandler:
End Sub

'UNIQUE
Sub AjoutSupression_Champ_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Champs"
    Form.Show vbModeless
ErrHandler:
End Sub

Sub AjoutSupression_Personnes_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Personnes"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Fonctions_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Fonctions"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Listes_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Listes"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Entites_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Entit|fffd|s"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Worflow_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Workflow"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Confidentialites_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Confidentialit|fffd|s_"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Navigateurs_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Navigateurs"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Criteres_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Crit|fffd|res"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Filtres_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Filtres"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Champ_Axe_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Champ_Axe"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Portee_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Port|fffd|e_"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Contenu_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Contenu"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_filtre_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Filtres"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_categorie_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Cat|fffd|gories_"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Colonne_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Colonnes"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Champ_Exporte_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Champ_Export|fffd|"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Champ_Valeur_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Champ_axe"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Champ_Legende_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Champ_axe"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Vue_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Vues"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Statistique_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Statistiques"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub AjoutSupression_Recherche_Unique()
On Error GoTo ErrHandler:
    Dim Form As UsfListeUnique
    Set Form = New UsfListeUnique
    Form.value = "Recherches"
    Form.Show vbModeless
ErrHandler:
End Sub
Sub Gestion_Signataires()
On Error GoTo ErrHandler:
    UsfSigna.Show vbModeless
ErrHandler:
End Sub
' Afficher/Cacher bouton
Sub affichageBouton(B As Integer)
    On Error Resume Next
    If (ActiveSheet.Shapes("Button " & B).Visible) = False Then
        ActiveSheet.Shapes("Button " & B).Visible = True
        ActiveSheet.Calculate
    End If
ErrHandler:
End Sub
Sub CacherBouton(B As Integer)
    On Error Resume Next
    If (ActiveSheet.Shapes("Button " & B).Visible) = True Then
        ActiveSheet.Shapes("Button " & B).Visible = False
    End If
ErrHandler:
End Sub
Sub CacherAllBouton(allB As Variant)
    Dim i As Integer
    For i = 0 To UBound(allB) - 1
    On Error Resume Next
        If (ActiveSheet.Shapes("Button " & allB(i)).Visible) = True Then
            ActiveSheet.Shapes("Button " & allB(i)).Visible = False
             ActiveSheet.Calculate
        End If
    Next
ErrHandler:
End Sub

'Gestion des Boutons shape color|fffd|s
Sub avancerBouton(Bouton As String)
    On Error Resume Next
    Dim SaveCell As Variant
    ActiveSheet.Shapes.Range(Bouton).ZOrder msoSendForward
    Application.Wait (Now + 0.000000001)
    boutonActive = True
ErrHandler:
End Sub
Sub AvancerAllBouton(allB As Variant, Optional Force As Boolean)
    On Error Resume Next
    Dim i, pos1, pos2 As Integer
    If boutonActive = True Or Force = True Then
        For i = 0 To UBound(allB) - 1
            ActiveSheet.Shapes.Range(allB(i)).ZOrder msoBringToFront
        Next
        boutonActive = False
   End If
    Application.Wait (Now + 0.000000001)
ErrHandler:
End Sub


Attribute VB_Name = "GestionsEtapes"
Sub AjoutSupression_Etapes()
   On Error GoTo ErrHandler:
    Dim Form As UsfListeEtapes
    Dim typ As String
    Dim id As Variant
    
    
    Set Form = New UsfListeEtapes

    Form.value = getAllEtapes()
    Form.Show vbModeless
ErrHandler:
End Sub
Sub VoirChamps()
   On Error GoTo ErrHandler:
    Dim Form As UsfListeEtapes
    Dim typ As String
    Dim id As Variant
    
    
    Set Form = New UsfListeEtapes

    Form.value = getAllChamps()
    Form.Show vbModeless
ErrHandler:
End Sub
Function getType(aa As Range)
   On Error GoTo ErrHandler:
    Dim typ As String
   On Error Resume Next
   For i = 0 To 100
        If aa.Offset(-i, -1).value <> "" Then
            typ = aa.Offset(-i, -1).value
            Exit For
        End If
   Next
   getType = typ
ErrHandler:
End Function
Function getIDType(typ As String)
   On Error GoTo ErrHandler:
    Dim ligne As Variant
    On Error Resume Next
    For Each ligne In Range("SYSTEM_values!$DI2:$DI200")
        If typ = ligne.value Then
            getIDType = ligne.Offset(0, 1).value
            Exit For
        End If
    Next
ErrHandler:
End Function
Function getAllEtapes(Optional offL As Integer, Optional offC As Integer)
    Dim id, c As Integer
    Dim etapes() As String
       On Error GoTo ErrHandler:
    id = getIDType(getType(ActiveCell.Offset(offL, offC)))
    c = 0
    For Each ligne In Range("SYSTEM_values!$Dd2:$Dd2000")
        If ligne.value = id Then
            If ligne.Offset(0, 2).value <> "" Then
                ReDim Preserve etapes(c)
                etapes(c) = ligne.Offset(0, 2).value
                c = c + 1
            End If
        End If
    Next
    getAllEtapes = etapes
ErrHandler:
End Function
Function getAllChamps()
    Dim id, c, d As Integer
    Dim typ, adr As String
    Dim aa As Range
    Dim champs() As String
    Dim inType As Boolean
    
   On Error GoTo ErrHandler:
    For i = 0 To 100
         If ActiveCell.Offset(-i, -1).value <> "" Then
             typ = ActiveCell.Offset(-i, -1).value
             adr = ActiveCell.Offset(-i, -1).Address
             Exit For
         End If
    Next
    
    c = 0 'Listes de champs
    d = 1 'Compteur de lignes
    inType = True
    Do While inType = True
        If Sheets("Forms").Range(adr).Offset(d, 4).value <> "" Then 'Si champs visible
            ReDim Preserve champs(c)
            champs(c) = Sheets("Forms").Range(adr).Offset(d, 4).value
            c = c + 1
        ElseIf Sheets("Forms").Range(adr).Offset(d, 4).value = "" And Sheets("Forms").Range(adr).Offset(d, 0) <> "" Then
            inType = False
        End If
        If d > 1000 Then 'Si rien en dessous
            Exit Do
        End If
        d = d + 1
    Loop

   
    getAllChamps = champs
ErrHandler:
End Function
Function getAllChampsSectionOLD(section As String)
    Dim id, c, d As Integer
    Dim typ, adr As String
    Dim aa As Range
    Dim champs() As String
    Dim inSection, inType As Boolean
    
   On Error GoTo ErrHandler:
    For i = 0 To 100
         If ActiveCell.Offset(-i, -1).value <> "" Then
             typ = ActiveCell.Offset(-i, -1).value
             adr = ActiveCell.Offset(-i, -1).Address
             Exit For
         End If
    Next
    
    c = 0 'Listes de champs
    d = 1 'Compteur de lignes
    inType = True
    Do
        If Sheets("Forms").Range(adr).Offset(d, 2).value = section Then 'Si dans la section
            inSection = True
            Do
                d = d + 1
                If Sheets("Forms").Range(adr).Offset(d, 2).value = "" Then
                    ReDim Preserve champs(c)
                    champs(c) = Sheets("Forms").Range(adr).Offset(d, 4).value
                    MsgBox champs(c)
                    c = c + 1
                Else
                    Exit Do
                End If
            Loop
            Exit Do
        ElseIf Sheets("Forms").Range(adr).Offset(d, 4).value = "" And Sheets("Forms").Range(adr).Offset(d, 0) <> "" Then
            Exit Do
        End If
        If d > 1000 Then 'Si rien en dessous
            Exit Do
        End If
        d = d + 1
    Loop

   
    getAllChamps = champs
ErrHandler:
End Function
Function getAllSections()
    Dim id, c, d As Integer
    Dim typ, adr As String
    Dim aa As Range
    Dim Sections() As String
    Dim inType As Boolean
    
   On Error GoTo ErrHandler:
    For i = 0 To 100
         If ActiveCell.Offset(-i, -1).value <> "" Then
             typ = ActiveCell.Offset(-i, -1).value
             adr = ActiveCell.Offset(-i, -1).Address
             Exit For
         End If
    Next
    
    c = 0 'Listes de champs
    d = 1 'Compteur de lignes
    inType = True
    Do While inType = True
        If Sheets("Forms").Range(adr).Offset(d, 2).value <> "" Then 'Si champs visible
            ReDim Preserve Sections(c)
            Sections(c) = Sheets("Forms").Range(adr).Offset(d, 2).value
            c = c + 1
        ElseIf Sheets("Forms").Range(adr).Offset(d, 2).value = "" And Sheets("Forms").Range(adr).Offset(d, 0) <> "" Then
            inType = False
        End If
        If d > 1000 Then 'Si rien en dessous
            Exit Do
        End If
        d = d + 1
    Loop
    getAllSections = Sections
ErrHandler:
End Function
Sub ajouterSection()
    Dim Sections() As String
    Dim val As Variant
    Dim c As Integer
   On Error GoTo ErrHandler:
    Sections = getAllEtapes(0, -1)
    If MsgBox("|fffd|tes-vous s|fffd|r d'ajouter toutes les sections li|fffd|s aux noms d'|fffd|tapes ?", 36, "Confirmation") = vbYes Then
        ajouterLignes (UBound(Sections))
        c = 0
        For Each val In Sections
            ActiveCell.Offset(c, 0).value = val
            c = c + 1
        Next
    End If
ErrHandler:
End Sub

Sub majSection(oldS, newS As String)
    Dim typ, adr As String
    'Get type
    'On Error Resume Next
    For i = 0 To 100
         If ActiveCell.Offset(-i, -2).value <> "" Then
             typ = ActiveCell.Offset(-i, -2).value
             adr = ActiveCell.Offset(-i, -2).Address
             Exit For
         End If
    Next
    Sheets("Forms").Range(adr).Offset(0, 1).value = Replace(Sheets("Forms").Range(adr).Offset(0, 1).value, "ComboS_" & oldS, "ComboS_" & newS)
ErrHandler:
End Sub
Sub majChamps(oldC, newC As String)
    Dim typ, adr As String
    'Get type
   On Error GoTo ErrHandler:
    For i = 0 To 100
         If ActiveCell.Offset(-i, -4).value <> "" Then
             typ = ActiveCell.Offset(-i, -4).value
             adr = ActiveCell.Offset(-i, -4).Address
             Exit For
         End If
    Next

    Sheets("Forms").Range(adr).Offset(0, 1).value = Replace(Sheets("Forms").Range(adr).Offset(0, 1).value, "_C_" & oldC, "_C_" & newC)
ErrHandler:
End Sub

Sub majEtape(typ, oldE, newE As String)
    Dim val  As Variant
    Dim adr As String
   On Error GoTo ErrHandler:
    For Each val In Sheets("Forms").Range("B6:B1000")
        If val.value = typ Then
            adr = val.Address
            Exit For
        End If
    Next val

    Sheets("Forms").Range(adr).Offset(0, 1).value = Replace(Sheets("Forms").Range(adr).Offset(0, 1).value, "_E_" & oldE, "_E_" & newE)
ErrHandler:
End Sub

Attribute VB_Name = "MacroRempliAuto"
' MACRO DE REMPLISSAGE AUTOMATIQUE
' Ajout/modification de donn|fffd|es en fonction du contenu d'une cellule particuli|fffd|re
' Feuille d|fffd|pendant (Appeler les fonctions depuis le Worksheet_SelectionChange des feuilles souhait|fffd|es)
' Date de cr|fffd|ation : 02/07/2014
' Auteur : Maxime Derobillard
' Etat : Termin|fffd|

' Voir Feuil7 pour l'activation de cette macro automatiquement
' S'active d|fffd|s que clic dans colonne H de la feuille Champs
Sub Champs_GestionPCCP(ByVal Target As Range)
    Dim x As Integer 'Contient l'incice du row de la Target
    Dim T As String 'Type de champs partag|fffd|
    Dim cmt As String
    On Error GoTo ErrHandler:
    x = Target.row

    If Target = "" And ActiveSheet.name = "Fields" Then
        If (Range("B" & x) <> "") And ((Range("F" & x) = getDValue("Choice")) Or (Range("F" & x) = getDValue("Tree")) Or (Range("F" & x) = getDValue("Table"))) Then
                With Target.Validation
                    .delete
                    .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                    xlBetween, Formula1:="=Contenu"
                    .IgnoreBlank = True
                    .InCellDropdown = True
                    .InputTitle = ""
                    .ErrorTitle = ""
                    .InputMessage = ""
                    .ErrorMessage = ""
                    .ShowInput = True
                    .ShowError = False
                End With
        ElseIf (Range("B" & x) <> "") And Not ((Range("F" & x) = getDValue("Choice")) Or (Range("F" & x) = getDValue("Tree")) Or (Range("F" & x) = getDValue("Table"))) Then
            Target.Validation.delete 'Si il reste une liste issus d'un plan de classement pr|fffd|c|fffd|dent
            Target.Font.Underline = xlUnderlineStyleNone
            T = Range("F" & x)
            Select Case T 'On compl|fffd|te en fonction du type de champs partag|fffd|
            Case Is = getDValue("Text")
                Target = ";;"
                cmt = getDValue("Display size") & ";" & Chr(10) & getDValue("Minimum length") & ";" & Chr(10) & getDValue("Maximum length")
                Call ajouterComment(Target, cmt)
            Case Is = getDValue("Date")
                Target = getDValue("No")
                cmt = getDValue("Show Hours")
                Call ajouterComment(Target, cmt)
            Case Is = getDValue("Multline text")
                Target = getDValue("No")
                cmt = getDValue("Escape HTML")
                Call ajouterComment(Target, cmt)
            Case Is = getDValue("Number")
                Target = "0;;"
                cmt = getDValue("Number of decimals") & ";" & Chr(10) & getDValue("Minimum value") & ";" & Chr(10) & getDValue("Maximum value")
                Call ajouterComment(Target, cmt)
            Case Is = getDValue("Attachment")
                Target = ""
                Target.ClearComments
            Case Is = getDValue("Chart")
                Target = ""
                cmt = getDValue("Field") & "1;" & Chr(10) & getDValue("Field") & "2..."
                Call ajouterComment(Target, cmt)
            Case Is = ""
                 Target = ""
                 Target.ClearComments
            Case Else
                Target = ""
                Target.ClearComments
            End Select
        Else 'Si rien ou autre dans D on supprime tout
            'Target.Validation.delete
            Target.ClearComments
            'Target.Clear
            'Range("G" & x).Value = ""
        End If
    ElseIf ActiveSheet.name = "Fields" Then
        If Range("F" & x) = "" Then 'Si plus rien dans le type de champs, on supprime tout
            Target.ClearComments
            Target.Validation.delete
            Target.Clear
            Range("G" & x).value = ""
            Target.Font.Underline = xlUnderlineStyleNone
        ElseIf Not ((Range("F" & x) = getDValue("Choice")) Or (Range("F" & x) = getDValue("Tree")) Or (Range("F" & x) = getDValue("Table"))) Then 'Si anciennement Plan de classement devenu champs partag|fffd|, on supprime tout
            Target.Validation.delete
            Target.Font.Underline = xlUnderlineStyleNone
        End If
   End If
ErrHandler:
End Sub

' Voir Feuil16 (Navigateurs) pour l'activation de cette macro automatiquement
' S'active d|fffd|s que clic dans colonne G de la feuille Navigateurs
Sub Champs_GestionNav(ByVal Target As Range)
    Dim x As Integer 'Contient l'incice du row de la Target
    On Error GoTo ErrHandler:
    x = Target.row
    If Target = "" Then
        If (Range("F" & x) = getDValue("View")) And (Range("G" & x) = "") Then
                Target.Validation.delete 'Si il reste une liste issus d'un item pr|fffd|c|fffd|dent
                With Target.Validation
                    .delete
                    .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                    xlBetween, Formula1:="=Vues"
                    .IgnoreBlank = True
                    .InCellDropdown = True
                    .InputTitle = ""
                    .ErrorTitle = ""
                    .InputMessage = ""
                    .ErrorMessage = ""
                    .ShowInput = True
                    .ShowError = False
                End With

        ElseIf (Range("F" & x) = getDValue("Search")) And (Range("G" & x) = "") Then
            Target.Validation.delete 'Si il reste une liste issus d'un item pr|fffd|c|fffd|dent
            With Target.Validation
                    .delete
                    .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                    xlBetween, Formula1:="=Recherches"
                    .IgnoreBlank = True
                    .InCellDropdown = True
                    .InputTitle = ""
                    .ErrorTitle = ""
                    .InputMessage = ""
                    .ErrorMessage = ""
                    .ShowInput = True
                    .ShowError = False
                End With
        ElseIf (Range("F" & x) = getDValue("Statistic")) And (Range("G" & x) = "") Then
            Target.Validation.delete 'Si il reste une liste issus d'un item pr|fffd|c|fffd|dent
            With Target.Validation
                    .delete
                    .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                    xlBetween, Formula1:="=Statistiques"
                    .IgnoreBlank = True
                    .InCellDropdown = True
                    .InputTitle = ""
                    .ErrorTitle = ""
                    .InputMessage = ""
                    .ErrorMessage = ""
                    .ShowInput = True
                    .ShowError = False
                End With
        Else 'Si rien ou autre dans F on supprime tout
            
            Target.Validation.delete
        End If
    End If
ErrHandler:
End Sub
'Recherche et ajoute une URL dans une case
' Onglet : String = Onglet/Colonne des liens cr|fffd||fffd|s (Format : onglet$colonne, ex : "formulaire$B")
' base : String = Nom de la plage de donn|fffd|e de recherche auquel les liens vont |fffd|tre ajout|fffd|(Ex : "$B6:$B1000")
' rng : String = Nom de de la plage de donn|fffd|e matrice dans laquelle on cherche chaque cellulle de Base (Ex : "$B6:$B1000")
Sub AddUrl(onglet As String, base As String, rng As String, Optional delete As Boolean)
    Dim typ, adr As String
    Dim celluletrouvee As Range
    Dim ligne As Integer
    Dim col As Integer
On Error GoTo ErrHandler:
    For Each cell In Range(rng)
        If cell.value <> "" Then
            typ = cell.value
            Set celluletrouvee = Range(base).Find(typ, LookIn:=xlValues, LookAt:=xlWhole)
            If celluletrouvee Is Nothing Then
                If delete = True Then
                    cell.Hyperlinks.delete
                End If
            Else
                If (celluletrouvee <> "") Then
                    ligne = celluletrouvee.row
                    col = celluletrouvee.Column
                    adr = onglet & ligne
                    ActiveSheet.Hyperlinks.Add Anchor:=cell, Address:="", SubAddress:= _
                    adr, TextToDisplay:=typ
                End If
            End If
        End If
    Next
ErrHandler:
End Sub
Sub ajouterComment(Target As Range, cmt As String)
On Error GoTo ErrHandler:
    Target.ClearComments
    Target.addComment
    Target.Comment.Text Text:=cmt
    With Target.Comment.Shape
        .Width = 50 'Largeur commentaire
        .Height = 50 'Hauteur
        .OLEFormat.Object.Font.Size = 8 'Taille du texte
        .OLEFormat.Object.Interior.ColorIndex = 34 'Couleur de fond
        .TextFrame.Characters.Font.ColorIndex = 11 'Couleur de la police
        .TextFrame.Characters.Font.Bold = True 'Ecriture gras
        .OLEFormat.Object.Font.name = "Bangle" 'Type de police
    End With
    Target.Comment.Shape.TextFrame.AutoSize = True
ErrHandler:
End Sub
'Gestion scope
Sub generateScope()
    Dim c, d As Integer
    Dim val As Variant
On Error GoTo ErrHandler:
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    If MsgBox(getDValue("Are you sure you want to add all of the scope values ?"), 36, getDValue("Confirm")) = vbYes Then
        c = 0
        d = 0
        If ActiveCell.Offset(x, y - 6).value <> "" Then
            c = 1
        End If
        For Each val In Range("Port|fffd|e_")
            If val = "" Then
                Exit For
            ElseIf ActiveCell.Offset(x + c, y - 6).value = "" Then
                ActiveCell.Offset(x + c, y).value = val
            Else
                ActiveCell.Offset(x + c, y).EntireRow.Insert
                ActiveCell.Offset(x + c, y).value = val
                d = d + 1
            End If
            
            c = c + 1
        Next
        c = c - 1
        MsgBox "" & c & " " & getDValue("values of scope generated") & ", " & d & " " & getDValue("line(s) add(ed)")

    End If

ErrHandler:
    Application.ScreenUpdating = True
    Application.EnableEvents = True
End Sub



Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public dDefaultValuesKey As Scripting.Dictionary
Public dDefaultValueActivated As Boolean
Public dForceCalcul As Boolean
Public dActiveButtons As Boolean


Private Sub Workbook_Open()
DoEvents

ActiveWorkbook.Worksheets("Datas").Activate
contenuModif = False

Set Traduction.WsTrad = Sheets("SYSTEM_traduction")
Set Traduction.WsValues = Sheets("SYSTEM_values")
Set dDefaultValuesKey = New Scripting.Dictionary

Call Traduction.updateDefaultValues
DoEvents
Call General.updateAllParams
DoEvents

End Sub



'Suppression auto des |fffd|tapes supprim|fffd|s |fffd| la shape
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
On Error GoTo ErrHandler
    'Call cleanWorkflowSteps
ErrHandler:
End Sub
Attribute VB_Name = "Traduction"
Public WsTrad As Worksheet
Public WsValues As Worksheet

Sub handlingTraduction()
    Dim ran As Range
    Dim newLang As String
    Dim oldYes As String
    Dim oldNo As String
    
    Application.ScreenUpdating = False
    
    Set Traduction.WsTrad = Sheets("SYSTEM_traduction")
    Set Traduction.WsValues = Sheets("SYSTEM_values")
    
    oldYes = ""
    oldNo = ""
    ' Save old Yes No Value
    For Each ran In ThisWorkbook.Sheets("Datas").Range("C30:C60") 'LIMIT
        If ran.value = getDValue("Yes") Then
            oldYes = ran.value
        ElseIf ran.value = getDValue("No") Then
            oldNo = ran.value
        End If
        
        If oldYes <> "" And oldNo <> "" Then
            End
        End If
    Next ran
    
    For Each ran In ThisWorkbook.Sheets("Datas").Range("B30:B60") 'LIMIT
        'Langue <> Langue used ? WARNING : RAW ADRESS
        If ran.value <> "" And getDValue("Language") = ran.value And _
           ran.Offset(0, 1).value <> WsTrad.Range("A2") Then
           
           newLang = Left(ran.Offset(0, 1).value, 2)
           '  REPLACE SHEET VALUES
           Call replaceSheetTradValues(newLang)
           
           ' UPDATE HEADER
           Call handlingUpdateHeaders
           
           ' REPLACE LIST OF VALUES
           Call handligValueLists
           
           ' UPDATE DEFAULT VALUES
           Call updateDefaultValues
        End If
    Next ran
    
    ' Replace old yes no
    For Each ran In ThisWorkbook.Sheets("Datas").Range("C30:C60") 'LIMIT
        If ran.value = oldYes And oldYes <> "" Then
            ran.value = getDValue("Yes")
        ElseIf ran.value = oldNo And oldNo <> "" Then
             ran.value = getDValue("No")
        End If
    Next ran
    
    ' Handling of field value (TODO BETTER)
    ThisWorkbook.Sheets("SYSTEM_values").Range("AR33").FormulaR1C1 = "=INDIRECT(""Fields!$C""&ROW()-27)"
    Sheets("SYSTEM_values").Activate
    Sheets("SYSTEM_values").Range("AR33").Select
    Selection.AutoFill Destination:=Range("AR33:AR3030")
    Sheets("Datas").Activate

    MsgBox "Done !"
    Application.ScreenUpdating = True
End Sub

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'  REPLACE SHEET VALUES
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub replaceSheetTradValues(lang)
    Dim WS_Count As Integer
    Dim ws As Worksheet
    Dim i As Integer
    
    WS_Count = ActiveWorkbook.Worksheets.Count
    For i = 1 To WS_Count
       Set ws = Worksheets(i)
       If InStr(ws.name, "_" & lang) > 0 Then
         ws.Cells.Copy
         WsTrad.Range("A1").PasteSpecial Paste:=xlPasteAll, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
        'Exit Sub
       End If
    Next i

End Sub

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' UPDATE HEADER
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub handlingUpdateHeaders()
    Dim WS_Count As Integer
    Dim ws As Worksheet
    Dim i As Integer
    Dim tArrayOfHeaderValue As Variant
    
    WS_Count = ActiveWorkbook.Worksheets.Count
    For i = 1 To WS_Count
       Set ws = Worksheets(i)
       tArrayOfHeaderValue = getValuesFromColumnName(WsTrad, "TAB_HEADER_" & ws.name)
       
       If UBound(tArrayOfHeaderValue) > 0 Then 'Work only if more than 1 value
          Select Case ws.name
            Case "Datas"
                Call updateHeader(ws.name, tArrayOfHeaderValue, "K7")
            Case "Types"
                Call updateHeader(ws.name, tArrayOfHeaderValue, "B8")
            Case "Units"
                Call updateHeader(ws.name, tArrayOfHeaderValue, "B7")
            Case "Matrix"
                Call updateHeader(ws.name, tArrayOfHeaderValue, "B9")
            Case "Views"
                Call updateHeader(ws.name, tArrayOfHeaderValue, "B6")
            Case Else
                Call updateHeader(ws.name, tArrayOfHeaderValue, "B5")
            End Select
          
       End If
    Next i
    
End Sub
Sub updateHeader(wsName As String, arr As Variant, Optional cStart As String = "B6")
    'MsgBox cStart & ":" & Col_Letter((Col_Number(Left(cStart, 1)) + UBound(arr) - 1)) & Right(cStart, 1)
    ThisWorkbook.Sheets(wsName).Range(cStart & ":" & Col_Letter((Col_Number(Left(cStart, 1)) + UBound(arr) - 1)) & Right(cStart, 1)) = WorksheetFunction.Transpose(arr)
End Sub

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' REPLACE LIST OF VALUES
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub handligValueLists()
   Dim ran As Range
   Dim ran2 As Range
   Dim tArrayOfValues As Variant
   
   For Each ran In WsTrad.Range("A1:ZZ1") 'LIMIT
    If InStr(ran.value, "S_") > 0 Then
        tArrayOfValues = getValuesFromColumnName(WsTrad, ran.value)
        
        For Each ran2 In WsValues.Range("A1:ZZ1") 'LIMIT
            If ran.value = ran2.value Then
                'MsgBox Col_Letter(ran2.Column) & "2:" & Col_Letter(ran2.Column) & (UBound(tArrayOfValues) + 1)
                ThisWorkbook.Sheets(WsValues.name).Range(Col_Letter(ran2.Column) & "2:" & Col_Letter(ran2.Column) & (UBound(tArrayOfValues) + 1)) = tArrayOfValues
            End If
        Next ran2
    End If
   Next ran

End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' UPDATE DEFAULT VALUES
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub updateDefaultValues()
    Dim cKey As String
    Dim ran As Range
    
    If ThisWorkbook.dDefaultValuesKey Is Nothing Then
        Set ThisWorkbook.dDefaultValuesKey = New Scripting.Dictionary
    End If
    
    cKey = getColumnLetterFromHeader(WsTrad, "DEFAULT_VALUES_KEY")
    
    For Each ran In WsTrad.Range(cKey & "2:" & cKey & "1000") 'LIMIT
        If ran.value <> "" And ran.Offset(0, 1).value <> "" Then 'Assuming DEFAULT_VALUE_ITEM is just next to DEFAULT_VALUES_KEY
            Debug.Print "Add : " & ran.value & " -> " & ran.Offset(0, 1).value
            Set ThisWorkbook.dDefaultValuesKey(ran.value) = ran.Offset(0, 1).value
        End If
    Next ran

End Sub

Public Function getDValue(ByVal Key)
    On Error GoTo errHandling
    getDValue = ThisWorkbook.dDefaultValuesKey(Key)
    Exit Function
errHandling:
    Debug.Print "Missing key : " & Key
    Call Traduction.updateDefaultValues
End Function













Attribute VB_Name = "UsfListe"
Attribute VB_Base = "0{88AEA990-9FD4-4EF2-9BEC-6F828FE6A1F3}{0CF99D6A-6EFD-4974-AD43-5BB06F541481}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' UsfListe -> Ajout/Supression de [Liste au choix]
' Formulaire d'ajout/supression de [Liste au choix] |fffd| choix multiple
' Auteur : Maxime Derobillard
' Date de cr|fffd|ation : 03/07/2014

Option Explicit
Private frmValue, valueSelected(100) As String
Private AllSelected As Boolean
Private Target As Variant

 
Property Let value(MyValue As String)
On Error GoTo ErrHandler:
   frmValue = MyValue
ErrHandler:
End Property
 
Property Get value() As String
On Error GoTo ErrHandler:
   value = frmValue
ErrHandler:
End Property

Private Sub CommandButton1_Click()
    'bouton valider
    Dim xx As String 'Valeur de base dans la s|fffd|lection
    Dim tx As String  'Valeur(s) s|fffd|lectionn|fffd|e(s)
    Dim k, i, y As Integer 'Pas de boucle
On Error GoTo ErrHandler:
    xx = ActiveCell.value
    tx = ""
    
    TextBox1.value = "" 'Pour reset la liste proprement
        
    For k = 0 To ListBox1.ListCount - 1
     If ListBox1.Selected(k) = True Then
        tx = IIf(tx = "", ListBox1.List(k), tx & ";" & ListBox1.List(k)) 'Si vide, ajout de la premi|fffd|re valeur s|fffd|l|fffd|ctionn|fffd|, sinon ajout de la valeur s|fffd|lectionn|fffd| pr|fffd|c|fffd|dente s|fffd|par|fffd| par un ;
     End If
    Next
    Application.EnableEvents = False
    Range(Target).value = tx 'On remplace les donn|fffd|es
fin:
    Application.EnableEvents = True
    Unload Me 'on ferme le formulaire
ErrHandler:
End Sub
Private Sub CommandButton2_Click()
On Error GoTo ErrHandler:
Unload Me 'on ferme le formulaire
ErrHandler:
End Sub

Private Sub CommandButton3_Click()
    Dim k, c As Integer
    On Error GoTo ErrHandler:
    ' On s|fffd|lectionne tout
    c = 0
    If Me.ListBox1.Visible = True Then
        For k = 0 To ListBox1.ListCount - 1
            ListBox1.Selected(k) = True
            c = c + 1
            CommandButton3.Caption = getDValue("Select All") & " (" & ListBox1.ListCount & ")"
        Next
    Else
        For k = 0 To ListBox2.ListCount - 1
            ListBox2.Selected(k) = True
            c = c + 1
            CommandButton3.Caption = getDValue("Select All") & " (" & ListBox2.ListCount & ")"
        Next
    End If
    

    CommandButton4.Caption = getDValue("Deselect All") & " (" & c & ")"
ErrHandler:
End Sub
Private Sub CommandButton4_Click()
    Dim k, c As Integer
    On Error GoTo ErrHandler:
    ' On d|fffd|s|fffd|lectionne tout
    c = 0
    If Me.ListBox1.Visible = True Then
        For k = 0 To ListBox1.ListCount - 1
            ListBox1.Selected(k) = False
        Next
        CommandButton3.Caption = getDValue("Select All") & " (" & ListBox1.ListCount & ")"
    Else
        For k = 0 To ListBox2.ListCount - 1
            ListBox2.Selected(k) = False
        Next
        CommandButton3.Caption = getDValue("Select All") & " (" & ListBox2.ListCount & ")"
    End If
    

    CommandButton4.Caption = getDValue("Select All") & " (" & c & ")"
ErrHandler:
End Sub
Private Sub ListBox1_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
On Error GoTo ErrHandler:
    ' Si appuie sur Echap, on quitte le formulaire
    If KeyAscii = 27 Then Unload Me
ErrHandler:
End Sub
Private Sub UserForm_Activate()
    Dim PauseTime As Integer 'gestion des threads
    Dim Start As Date 'gestion des threads
    Dim valeursBase() As String 'Tableau comprennant toutes les donn|fffd|es d|fffd|j|fffd| pr|fffd|sentes
    valeursBase = Split(ActiveCell.value, ";") 'Remplissage du tableau
    Dim k, i, c As Integer
    On Error Resume Next
    
    Target = ActiveCell.Address
    
    Me.Caption = getDValue("AddDelete") & frmValue 'TODO : HANDLING OF TRADUCTION OF RANGE OF NAMES
    CommandButton1.Caption = getDValue("Validate")
    CommandButton2.Caption = getDValue("Quit")
    CommandButton3.Caption = getDValue("Select All")
    CommandButton4.Caption = getDValue("Deselect All")

    
    Me.ListBox1.Enabled = False
    Me.Caption = getDValue("AddDelete") & frmValue
    With Me
        .Top = Application.Top + 150
        .Left = Application.Left + 700
    End With
    
    If Range(frmValue).Count > 1 Then
        Me.ListBox1.List = Range(frmValue).value
    ElseIf Range(frmValue).Count = 1 Then
        Me.ListBox1.AddItem (Range(frmValue).value)
    Else
        Me.ListBox1.List = ""
    End If
    
    c = 0 'Compte le nombre de valeurs s|fffd|lectionn|fffd|es
    For k = 0 To ListBox1.ListCount - 1
        For i = 0 To UBound(valeursBase)
            If ListBox1.List(k) = valeursBase(i) Then
                ListBox1.Selected(k) = True
                c = c + 1
            End If
        Next
    Next
    
      PauseTime = 1    ' D|fffd|finit la dur|fffd|e.
        Start = Timer    ' D|fffd|finit l'heure de d|fffd|but.
        Do While Timer < Start + PauseTime
            DoEvents    ' Donne le contr|fffd|le |fffd| d'autres processus.
        Loop
        
    CommandButton3.Caption = getDValue("Select All") & " (" & ListBox1.ListCount & ")"
    CommandButton4.Caption = getDValue("Deselect All") & " (" & c & ")"
    
    Me.ListBox1.Enabled = True
    TextBox1.SetFocus
    'ListBox1.SetFocus
ErrHandler:
End Sub
Private Sub TextBox1_Change()
    Dim i, y, c As Integer
    On Error GoTo ErrHandler:
    Me.ListBox2.Clear 'On vide la liste 2
    c = 0
    If TextBox1.value <> "" Then 'Si la textbox n'est pas vide
        Me.ListBox1.Visible = False 'On cache la 1ere liste
        For i = 0 To Me.ListBox1.ListCount - 1
            If InStr(UCase(Me.ListBox1.List(i)), UCase(TextBox1.value)) > 0 Then 'Si correspondance entre texte et list1
               Me.ListBox2.AddItem (Me.ListBox1.List(i)) 'Si pas d|fffd|j|fffd| pr|fffd|sent, on rajoute
            End If
        Next i
        AllSelected = False
       For i = 0 To Me.ListBox2.ListCount - 1
            For y = 0 To UBound(valueSelected)
                If Me.ListBox2.List(i) = valueSelected(y) Then 'Si item d|fffd|j|fffd| s|fffd|lectionn|fffd| pr|fffd|cedemment
                    Me.ListBox2.Selected(i) = True
                    c = c + 1
                End If
            Next
        Next
        AllSelected = True
        CommandButton3.Caption = getDValue("Select All") & " (" & ListBox2.ListCount & ")"
        Me.ListBox2.Visible = True
    Else 'Si textbox vide
        AllSelected = False
        Me.ListBox1.Visible = True
        Me.ListBox2.Visible = False
        
        'Reset de la liste
        Me.ListBox1.Clear
        If Range(frmValue).Count > 1 Then
            Me.ListBox1.List = Range(frmValue).value
        ElseIf Range(frmValue).Count = 1 Then
            Me.ListBox1.AddItem (Range(frmValue).value)
        Else
            Me.ListBox1.List = ""
        End If
        
        'S|fffd|lection depuis valueSelected
        For i = 0 To Me.ListBox1.ListCount - 1
            For y = 0 To UBound(valueSelected)
                If Me.ListBox1.List(i) = valueSelected(y) Then 'Si item d|fffd|j|fffd| s|fffd|lectionn|fffd| pr|fffd|cedemment
                    Me.ListBox1.Selected(i) = True
                    c = c + 1
                End If
            Next
        Next
        
        AllSelected = True
        CommandButton3.Caption = getDValue("Select All") & " (" & ListBox1.ListCount & ")"
    End If
    CommandButton4.Caption = getDValue("Deselect All") & " (" & c & ")"
ErrHandler:
End Sub
Private Sub ListBox2_Change()
    Dim i, y As Integer
    On Error GoTo ErrHandler:
    If AllSelected = True Then 'Si toutes les valeurs ont |fffd|t|fffd| s|fffd|lectionn|fffd|es (apr|fffd|s une modification de TextBox1)
        For i = 0 To Me.ListBox2.ListCount - 1
            If Me.ListBox2.Selected(i) = True Then
                For y = 0 To UBound(valueSelected)
                    If valueSelected(y) = Me.ListBox2.List(i) Then 'Si valeur d|fffd|j|fffd| pr|fffd|sente
                        Exit For
                    ElseIf valueSelected(y) = "" Then 'On ajoute la valeur s|fffd|lectionn|fffd|e
                        valueSelected(y) = Me.ListBox2.List(i) 'On ajoute la valeur s|fffd|lectionn|fffd|e
                        Exit For
                    End If
                Next
            Else 'Donc pas s|fffd|lectionn|fffd|
                For y = 0 To UBound(valueSelected) 'On supprime la valeur si elle |fffd|tait pr|fffd|sente
                    If valueSelected(y) = Me.ListBox2.List(i) Then
                        valueSelected(y) = ""
                    End If
                Next
            End If
        Next
    End If
    TextBox1.SetFocus
ErrHandler:
End Sub
Private Sub ListBox1_Change()
    Dim i, y As Integer
    On Error GoTo ErrHandler:
    'If AllSelected = True Then 'Si toutes les valeurs ont |fffd|t|fffd| s|fffd|lectionn|fffd|es (apr|fffd|s une modification de TextBox1)
        For i = 0 To ListBox1.ListCount - 1
            If Me.ListBox1.Selected(i) = True Then
                For y = 0 To UBound(valueSelected)
                    If valueSelected(y) = Me.ListBox1.List(i) Then 'Si valeur d|fffd|j|fffd| pr|fffd|sente
                        Exit For
                    ElseIf valueSelected(y) = "" Then 'On ajoute la valeur s|fffd|lectionn|fffd|e
                        valueSelected(y) = Me.ListBox1.List(i) 'On ajoute la valeur s|fffd|lectionn|fffd|e
                        Exit For
                    End If
                Next
            Else 'Donc pas s|fffd|lectionn|fffd|
                If AllSelected = True Then
                    For y = 0 To UBound(valueSelected) 'On supprime la valeur si elle |fffd|tait pr|fffd|sente
                        If valueSelected(y) = Me.ListBox1.List(i) Then
                            valueSelected(y) = ""
                        End If
                    Next
                End If
            End If
        Next
    'End If
    TextBox1.SetFocus
ErrHandler:
End Sub

Attribute VB_Name = "UsfListeUnique"
Attribute VB_Base = "0{DCB08D75-E90B-4814-B443-89281F221230}{807783FB-45B0-47DF-B286-DC5116D136B6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' UsfListeUnique -> Ajout/Supression de [Liste au choix]
' Formulaire d'ajout/supression de [Liste au choix] avec choix unique
' Auteur : Maxime Derobillard
' Date de cr|fffd|ation : 17/07/2014

Option Explicit
Private frmValue, valueSelected As String
Private Target As Variant

Property Let value(MyValue As String)
On Error GoTo ErrHandler:
   frmValue = MyValue
ErrHandler:
End Property
 
Property Get value() As String
On Error GoTo ErrHandler:
   value = frmValue
ErrHandler:
End Property

Private Sub CommandButton1_Click()
    'bouton valider
    Dim xx As String 'Valeur de base dans la s|fffd|lection
    Dim tx As String  'Valeur(s) s|fffd|lectionn|fffd|e(s)
    Dim k As Integer 'Pas de boucle
 On Error GoTo ErrHandler:
    xx = ActiveCell.value
    tx = ""
    
    TextBox1.value = "" 'Pour reset la liste proprement
        
    For k = 0 To ListBox1.ListCount - 1
     If ListBox1.Selected(k) = True Then
        tx = IIf(tx = "", ListBox1.List(k), tx & ";" & ListBox1.List(k)) 'Si vide, ajout de la premi|fffd|re valeur s|fffd|l|fffd|ctionn|fffd|, sinon ajout de la valeur s|fffd|lectionn|fffd| pr|fffd|c|fffd|dente s|fffd|par|fffd| par un ;
     End If
    Next
    'Application.EnableEvents = False
    Range(Target).value = tx 'On remplace les donn|fffd|es
fin:
    'Application.EnableEvents = True
    Unload Me 'on ferme le formulaire
ErrHandler:
End Sub
Private Sub CommandButton2_Click()
On Error GoTo ErrHandler:
    Unload Me  'on ferme le formulaire
ErrHandler:
End Sub

Private Sub CommandButton3_Click()
    Dim k As Integer
    On Error GoTo ErrHandler:
    ' On s|fffd|lectionne tout
    For k = 0 To ListBox1.ListCount - 1
    ListBox1.Selected(k) = True
    Next
ErrHandler:
End Sub
Private Sub CommandButton4_Click()
    Dim k As Integer
    On Error GoTo ErrHandler:
    ' On d|fffd|s|fffd|lectionne tout
    For k = 0 To ListBox1.ListCount - 1
    ListBox1.Selected(k) = False
    Next
ErrHandler:
End Sub
Private Sub ListBox1_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    ' Si appuie sur Echap, on quitte le formulaire
    On Error GoTo ErrHandler:
    If KeyAscii = 27 Then Unload Me
ErrHandler:
End Sub
Private Sub UserForm_Activate()
    Dim PauseTime As Integer 'gestion des threads
    Dim Start As Date 'gestion des threads
    Dim valeursBase() As String 'Tableau comprennant toutes les donn|fffd|es d|fffd|j|fffd| pr|fffd|sentes
    valeursBase = Split(ActiveCell.value, ";") 'Remplissage du tableau
    Dim k, i As Integer
    On Error Resume Next
    
    Target = ActiveCell.Address
    
    Me.Caption = getDValue("AddDelete") & frmValue
    CommandButton1.Caption = getDValue("Validate")
    CommandButton2.Caption = getDValue("Quit")
    
    Me.ListBox1.Enabled = False
    Me.Caption = getDValue("AddDelete") & frmValue
    With Me
        .Top = Application.Top + 150
        .Left = Application.Left + 700
    End With
    
    If Range(frmValue).Count > 1 Then
        Me.ListBox1.List = Range(frmValue).value
    ElseIf Range(frmValue).Count = 1 Then
        Me.ListBox1.AddItem (Range(frmValue).value)
    Else
        Me.ListBox1.List = ""
    End If
    
    
    For k = 0 To ListBox1.ListCount - 1
        For i = 0 To UBound(valeursBase)
            If ListBox1.List(k) = valeursBase(i) Then
                ListBox1.Selected(k) = True
            End If
        Next
    Next
    
      PauseTime = 1    ' D|fffd|finit la dur|fffd|e.
        Start = Timer    ' D|fffd|finit l'heure de d|fffd|but.
        Do While Timer < Start + PauseTime
            DoEvents    ' Donne le contr|fffd|le |fffd| d'autres processus.
        Loop
On Error Resume Next
    TextBox1.SetFocus
    'MsgBox "" & ListBox1.ListCount
    TextBox1.Text = " "
    TextBox1.Text = ""
    TextBox1.SetFocus
    Me.ListBox1.Enabled = True
ErrHandler:
End Sub
Private Sub TextBox1_Change()
    Dim i, y As Integer
    On Error GoTo ErrHandler:
    Me.ListBox2.Clear 'On vide la liste 2
    If TextBox1.value <> "" Then 'Si la textbox n'est pas vide
        Me.ListBox1.Visible = False 'On cache la 1ere liste
        For i = 0 To Me.ListBox1.ListCount - 1
            If InStr(UCase(Me.ListBox1.List(i)), UCase(TextBox1.value)) > 0 Then 'Si correspondance entre texte et list1
               Me.ListBox2.AddItem (Me.ListBox1.List(i)) 'Si pas d|fffd|j|fffd| pr|fffd|sent, on rajoute
            End If
        Next i
       For i = 0 To Me.ListBox2.ListCount - 1
            If Me.ListBox2.List(i) = valueSelected Then 'Si item d|fffd|j|fffd| s|fffd|lectionn|fffd| pr|fffd|cedemment
                Me.ListBox2.Selected(i) = True
            End If
        Next
        Me.ListBox2.Visible = True
    Else 'Si textbox vide
        Me.ListBox1.Visible = True
        Me.ListBox2.Visible = False
        Me.ListBox2.Clear
        For i = 0 To Me.ListBox1.ListCount - 1
            If Me.ListBox1.List(i) = valueSelected Then 'Si item d|fffd|j|fffd| s|fffd|lectionn|fffd| pr|fffd|cedemment
                Me.ListBox1.Selected(i) = True
            End If
        Next
    End If
ErrHandler:
End Sub
Private Sub ListBox2_Change()
    Dim i As Integer
    On Error GoTo ErrHandler:
    For i = 0 To ListBox2.ListCount - 1
        If Me.ListBox2.Selected(i) = True Then
            valueSelected = Me.ListBox2.List(i)
        End If
    Next
    TextBox1.SetFocus
ErrHandler:
End Sub
Private Sub ListBox1_Change()
    Dim i As Integer
    On Error GoTo ErrHandler:
    For i = 0 To ListBox1.ListCount - 1
        If Me.ListBox1.Selected(i) = True Then
            valueSelected = Me.ListBox1.List(i)
        End If
    Next
    TextBox1.Text = " "
    TextBox1.Text = ""
    TextBox1.SetFocus
ErrHandler:
End Sub


Attribute VB_Name = "UsfSigna"
Attribute VB_Base = "0{983DB0FC-FB8E-47E0-A980-B650BD79F611}{FA68564B-2B9E-4102-9E1E-E64F7A1AFDBB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim signa() As String
Dim valeursBase() As String
Dim init As Boolean
Dim derniereEtape As Integer
Dim enCours As Integer
Dim Target As Variant

Private Sub Frame2_Click()

End Sub

'INITIALISATION DU WORKFLOW
Private Sub UserForm_Activate()
    init = False

    'Call cleanWorkflowSteps

    'CellModif = ActiveCell
    Dim UneEtape(6) As String
    Dim PauseTime As Integer 'gestion des threads
    Dim Start As Date 'gestion des threads
    Dim strTemp As String 'String temp pour remplissage du tableau UneEtape()
    Dim selPers() As String
    Dim selFonc() As String
    Dim k, l, m, n, o, i As Integer
    
    
    On Error GoTo errorHandler
    'Remplissage des valeurs de base
    valeursBase = Split(ActiveCell.value, ";")
    Target = ActiveCell.Address
    
    Me.Caption = getDValue("Signatories handling")
    
    Frame1.Caption = getDValue("Default Workflow")
    Frame2.Caption = getDValue("Step of the workflow")
    Etape.Caption = getDValue("Step")
    Label5.Caption = getDValue("Persons")
    Label6.Caption = getDValue("Functions")
    CommandButton6.Caption = getDValue("Select All")
    CommandButton5.Caption = getDValue("Select All")
     
    CommandButton4.Caption = getDValue("Deselect All")
    CommandButton3.Caption = getDValue("Deselect All")
    
    CheckBox1.Caption = getDValue("Mandatory")
    
    Label4.Caption = getDValue("Nbr of signatories")
    Label1.Caption = getDValue("Min")
    Label3.Caption = getDValue("Max")
     
    CommandButton1.Caption = getDValue("Quit")
    CommandButton2.Caption = getDValue("Validate")
    
    
    With Me
        .Top = Application.Top + 100
        .Left = Application.Left + 400
    End With
    
    'Fond noir dans les |fffd|tapes pendant l'initialisation
    ListBox2.BackColor = RGB(50, 50, 50)
    ListBox3.BackColor = RGB(50, 50, 50)
    ListBox4.BackColor = RGB(50, 50, 50)
        
    'Init Liste des Workflow
    
    If Range("Workflow").Count > 1 Then
        Me.ListBox1.List = Range("Workflow").value
    ElseIf Range("Workflow").Count = 1 Then
        Me.ListBox1.AddItem (Range("Workflow").value)
    Else
        Me.ListBox1.List = ""
    End If
    
    
    'S|fffd|lection du workflow dans la case Workflow par d|fffd|faut
    For k = 0 To ListBox1.ListCount - 1
       If ListBox1.List(k) = ActiveCell.Offset(0, -4).value Then
                ListBox1.Selected(k) = True
       End If
    Next
    'AUTO COMPLETION DE LISTBOX2 CAR INTERRACTION PAR LE SELECTED
    
    'Optimisation
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    If UBound(valeursBase) = -1 Then
        ReDim valeursBase(ListBox2.ListCount * 7)
        For l = 0 To ListBox2.ListCount - 1
            valeursBase(l * 7) = ListBox2.List(l)
        Next
    End If
    ReDim signa(ListBox2.ListCount)
    
    
    'Fond blanc apr|fffd|s les |fffd|tapes d'initialisation
    ListBox2.BackColor = RGB(255, 255, 255)
    
    'Selection de la premi|fffd|re valeur des |fffd|tapes
    ListBox2.Selected(0) = True
    
    'Mise |fffd| jour du caption de la frame
    Me.Etape.Caption = ListBox2.List(0)
    enCours = k
    
            
    'Init Liste des personnes
    If Range("Personnes").Count > 1 Then
        Me.ListBox3.List = Range("Personnes").value
    ElseIf Range("Personnes").Count = 1 Then
        Me.ListBox3.AddItem (Range("Personnes").value)
    Else
        Me.ListBox3.List = ""
    End If
    ListBox3.BackColor = RGB(255, 255, 255)
    
    'Init Liste des fonctions
    If Range("Fonctions").Count > 1 Then
        Me.ListBox4.List = Range("Fonctions").value
    ElseIf Range("Fonctions").Count = 1 Then
        Me.ListBox4.AddItem (Range("Fonctions").value)
    Else
        Me.ListBox4.List = ""
    End If
    ListBox4.BackColor = RGB(255, 255, 255)
    
    
    
    '''''''''''''''''''''''''''''''''''''''''''''''''''
    ' S|fffd|lection des items avec la valeurs de base
    '''''''''''''''''''''''''''''''''''''''''''''''''''
    For k = 0 To UBound(valeursBase) - 7
        If valeursBase(k) = ListBox2.List(0) Then
            selPers = Split(Replace(Replace(valeursBase(k + 1), "]", ""), "[", ""), ",") 'Retire les crochets
            selFonc = Split(Replace(Replace(valeursBase(k + 2), "]", ""), "[", ""), ",") 'Retire les crochets
            'Selection des personnes |fffd| partir de selPer
            For n = 0 To ListBox3.ListCount - 1
                For o = 0 To UBound(selPers)
                    If ListBox3.List(n) = selPers(o) Then
                        ListBox3.Selected(n) = True
                    End If
                Next
            Next
            
            'Selection des fonctions |fffd| partir de selFonc
            For n = 0 To ListBox4.ListCount - 1
                For o = 0 To UBound(selFonc)
                    If ListBox4.List(n) = selFonc(o) Then
                        ListBox4.Selected(n) = True
                    End If
                Next
            Next
            
            'MIN
            TextBox1.value = valeursBase(k + 3)
    
            'MAX
            TextBox2.value = valeursBase(k + 4)
            
            'Obligatoire
            CheckBox1.value = ("Vrai" = valeursBase(k + 5))
        End If 'Si Valeurs base = Etape selectionn|fffd|
    Next 'Fin de boucle sur ValeursBase
    
    If (TextBox1.value = "") Then
        TextBox1.value = 1
    End If
    
    
    '''''''''''''''''''''''''''''''''''''''''''''''''''
    'Remplissage du tableau contenant toutes les donn|fffd|es de base (signa)
    '''''''''''''''''''''''''''''''''''''''''''''''''''
    For k = 0 To (UBound(valeursBase) / 7) - 1
        UneEtape(0) = valeursBase(k * 7)
        UneEtape(1) = valeursBase(k * 7 + 1)
        UneEtape(2) = valeursBase(k * 7 + 2)
        UneEtape(3) = valeursBase(k * 7 + 3)
        UneEtape(4) = valeursBase(k * 7 + 4)
        UneEtape(5) = valeursBase(k * 7 + 5)
        signa(k) = Join(UneEtape, ";")
    Next
    
    UsfSigna.ListBox1.Enabled = True
    UsfSigna.ListBox2.Enabled = True
    UsfSigna.ListBox3.Enabled = True
    UsfSigna.ListBox4.Enabled = True
    
    
    init = True
    Exit Sub
errorHandler:
        MsgBox getDValue("Impossible to load the form") & "," & Chr(10) & getDValue("There may be not step for this workflow")
        
        Application.Calculation = xlCalculationAutomatic
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        Unload UsfSigna
End Sub
'Tout d|fffd|selectionner Personnes
Private Sub CommandButton4_Click()
    Dim k As Integer
    On Error GoTo ErrHandler:
    For k = 0 To ListBox3.ListCount - 1
        ListBox3.Selected(k) = False
    Next
    'CommandButton4.Caption = "Tout d|fffd|s|fffd|lectionner (" & c & ")"
ErrHandler:
End Sub
'Tout d|fffd|selectionner Fonctions
Private Sub CommandButton3_Click()
    Dim k As Integer
    On Error GoTo ErrHandler:
    For k = 0 To ListBox4.ListCount - 1
        ListBox4.Selected(k) = False
    Next
ErrHandler:
End Sub
'Tout s|fffd|lectionner Personnes
Private Sub CommandButton6_Click()
    Dim k As Integer
    On Error GoTo ErrHandler:
    For k = 0 To ListBox3.ListCount - 1
        ListBox3.Selected(k) = True
    Next

ErrHandler:
End Sub
'Tout s|fffd|lectionner Fonctions
Private Sub CommandButton5_Click()
    Dim k As Integer
    On Error GoTo ErrHandler:
    For k = 0 To ListBox4.ListCount - 1
        ListBox4.Selected(k) = True
    Next
ErrHandler:
End Sub
'QUITTER
Private Sub CommandButton1_Click()
On Error GoTo ErrHandler:
    Unload UsfSigna
ErrHandler:
End Sub
'VALIDER
Private Sub CommandButton2_Click()
On Error GoTo ErrHandler:
    ''''''''''''''''''''''''''
    ' MAJSIGNA
    ''''''''''''''''''''''''''
    ActiveCell.value = vbNullString
    Application.ScreenUpdating = False
    
    'Mise |fffd| jour du workflow si besoin
    'If ActiveCell.Offset(0, -4).Value <> Me.ListBox1.Value Then
        'ActiveCell.Offset(0, -4).Value = Me.ListBox1.Value
    'End If
    
    Application.EnableEvents = True
    Range(Target).value = Join(signa, ";")
    Application.EnableEvents = True
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationAutomatic
    Unload UsfSigna
ErrHandler:
End Sub
'WORKFLOW PAR DEFAUT
Private Sub ListBox1_Change()
    Dim PauseTime As Integer 'gestion des threads
    Dim Start As Date 'gestion des threads
On Error GoTo ErrHandler:
    'Fond noir pendant le temps de calcul
    ListBox2.BackColor = RGB(50, 50, 50)
    Application.ScreenUpdating = False
    
    'Changement de valeur du workflow par d|fffd|faut (lent!)
    If Sheets("SYSTEM_values").Range("CS1").value <> ListBox1.value Then
        Sheets("SYSTEM_values").Range("CS1").value = ListBox1.value
        Me.ListBox2.Selected(0) = False
        Me.ListBox2.Clear
        PauseTime = 1    ' D|fffd|finit la dur|fffd|e.
        Start = Timer    ' D|fffd|finit l'heure de d|fffd|but.
        Do While Timer < Start + PauseTime
            DoEvents    ' Donne le contr|fffd|le |fffd| d'autres processus.
        Loop
        Application.EnableEvents = True
        Sheets("SYSTEM_values").EnableCalculation = True
        Sheets("SYSTEM_values").Calculate 'Lent
        Application.EnableEvents = False
    End If
    

    On Error Resume Next
    If Range("etapesEnCours").Count > 1 Then
        Me.ListBox2.List = Range("etapesEnCours").value
    ElseIf Range("etapesEnCours").Count = 1 Then
        Me.ListBox2.AddItem (Range("etapesEnCours").value)
    Else
        Me.ListBox2.List = ""
    End If
    

    'Fond blanc
    Application.ScreenUpdating = True
    ListBox2.BackColor = RGB(255, 255, 255)
ErrHandler:
End Sub
'CHANGEMENT DE l'ETAPE DU WORKFLOW
Private Sub ListBox2_Change()
On Error GoTo errorHandler
    If init = True Then 'Si formulaire d|fffd|j|fffd| initialis|fffd|
        ''''''''''''''''''''''''''
        MAJSIGNA
        ''''''''''''''''''''''''''
        Dim selPerst() As String
        Dim selFonct() As String
        Dim k, l, m, n, o As Integer
         
         ' Changement du titre de la frame
        For k = 0 To ListBox2.ListCount - 1
             If ListBox2.Selected(k) = True Then
                 Me.Etape.Caption = ListBox2.List(k)
                 l = k
             End If
        Next
         
        '''''''''''''''''''''''''''''''''''''''''''''''''''
        ' S|fffd|lection des items depuis Signa
        '''''''''''''''''''''''''''''''''''''''''''''''''''
        valeursBase = Split(Join(signa, ";"), ";")
        For k = 0 To UBound(valeursBase)
            'Recup des personnes
            If valeursBase(k) = ListBox2.List(l) Then  'Valeursbase = Une des |fffd|tapes
                selPerst = Split(Replace(Replace(valeursBase(k + 1), "]", ""), "[", ""), ",") 'Tableau de personne sans les crochets
                selFonct = Split(Replace(Replace(valeursBase(k + 2), "]", ""), "[", ""), ",") 'Fonctions
                
                'Selection des personnes |fffd| partir de selPers
                For n = 0 To ListBox3.ListCount - 1
                    ListBox3.Selected(n) = False
                    For o = 0 To UBound(selPerst)
                        If ListBox3.List(n) = selPerst(o) Then
                            ListBox3.Selected(n) = True
                        End If
                    Next
                Next
                
                'Sel des fonctions
                For n = 0 To ListBox4.ListCount - 1
                    ListBox4.Selected(n) = False
                    For o = 0 To UBound(selFonct)
                        If ListBox4.List(n) = selFonct(o) Then
                            ListBox4.Selected(n) = True
                        End If
                    Next
                Next
                
                'MIN
                TextBox1.value = valeursBase(k + 3)
                
                'MAX
                TextBox2.value = valeursBase(k + 4)
                
                'Obligatoire
                CheckBox1.value = ("Vrai" = valeursBase(k + 5))
            
            End If 'Si Valeursbase = Une des |fffd|tapes
            
            If (TextBox1.value = "") Then
                TextBox1.value = 1
            End If
        
        Next 'Boucle sur valeursBase
    End If 'Si init = true
    
    'Sauvegarde de l'|fffd|tape en cours (Pour MAJ SIGNA)
   For l = 0 To ListBox2.ListCount - 1
        If ListBox2.Selected(l) = True Then
            derniereEtape = l
        End If
   Next
   Exit Sub
errorHandler:
    MsgBox getDValue("Corrupt data")
    ActiveCell.value = ""
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Unload UsfSigna
End Sub
'Mise |fffd| jour de signa |fffd| la sortie de la liste de personnes
Private Sub ListBox3_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim UneEtape() As String
    Dim strTemp As String 'String temp pour remplissage du tableau UneEtape()
    Dim k, l As Integer
    On Error GoTo ErrHandler:
    For k = 0 To ListBox2.ListCount - 1
     If ListBox2.Selected(k) = True Then
            'Etape
            UneEtape = Split(signa(k), ";")
            
            'Personnes
            strTemp = ""
            For l = 0 To ListBox3.ListCount - 1
             If ListBox3.Selected(l) = True Then
                If strTemp = "" Then
                    strTemp = ListBox3.List(l)
                Else
                    strTemp = strTemp + "," + ListBox3.List(l)
                End If
             End If
            Next
            UneEtape(1) = "[" & strTemp & "]"
            
        
            signa(k) = Join(UneEtape, ";")
        End If
    Next
ErrHandler:
End Sub
'Mise |fffd| jour de signa |fffd| la sortie de la liste de fonctions
Private Sub ListBox4_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim UneEtape() As String
    Dim strTemp As String 'String temp pour remplissage du tableau UneEtape()
    Dim k, l As Integer
    On Error GoTo ErrHandler:
    For k = 0 To ListBox2.ListCount - 1
        
     If ListBox2.Selected(k) = True Then
            'Etape
            UneEtape = Split(signa(k), ";")
            
            'Fonctions
            strTemp = ""
            For l = 0 To ListBox4.ListCount - 1
             If ListBox4.Selected(l) = True Then
                If strTemp = "" Then
                    strTemp = ListBox4.List(l)
                Else
                    strTemp = strTemp + "," + ListBox4.List(l)
                End If
             End If
            Next
            UneEtape(2) = "[" & strTemp & "]"
            
        
            signa(k) = Join(UneEtape, ";")
        End If
    Next
ErrHandler:
End Sub
''''''''''''''''''''''''''''''''''''
'Mise |fffd| jour du tableau signa
''''''''''''''''''''''''''''''''''''
Public Function MAJSIGNA()
    Dim UneEtape() As String
    Dim strTemp As String 'String temp pour remplissage du tableau UneEtape()
    Dim k, l As Integer
    On Error GoTo errorHandler
    k = derniereEtape
    UneEtape = Split(signa(k), ";")
    
    'Personnes
    strTemp = ""
    For l = 0 To ListBox3.ListCount - 1
     If ListBox3.Selected(l) = True Then
        If strTemp = "" Then
            strTemp = ListBox3.List(l)
        Else
            strTemp = strTemp + "," + ListBox3.List(l)
        End If
     End If
    Next
    UneEtape(1) = "[" & strTemp & "]"
    
    'Fonctions
    strTemp = ""
    For l = 0 To ListBox4.ListCount - 1
     If ListBox4.Selected(l) = True Then
        If strTemp = "" Then
            strTemp = ListBox4.List(l)
        Else
            strTemp = strTemp + "," + ListBox4.List(l)
        End If
     End If
    Next
    UneEtape(2) = "[" & strTemp & "]"
    
    'Min
    UneEtape(3) = TextBox1.value

    'Max
    UneEtape(4) = TextBox2.value
    
    'Obligatoire
    UneEtape(5) = CheckBox1.value
    
    signa(k) = Join(UneEtape, ";")
    Exit Function
errorHandler:
    MsgBox getDValue("Corrupt data")
    ActiveCell.value = ""
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Unload UsfSigna
    
End Function
Attribute VB_Name = "Workflow"
Sub AjouterEtapeInitiale(Optional nomEtape As String, Optional topX As Long, Optional topY As Long)
    'On Error GoTo ErrHandler:
    Dim tableau, aa As Variant
    aa = ActiveCell.Address
    tableau = AjouterEtape(getDValue("Initial"), "in", 228, 255, 225, False, nomEtape, topX, topY)
    'Call ajouterTableau(tableau(0), "AAD8:AAF30")
    'Range(aa).Select
    'selectShape (tableau(1))
    'transfereNomShape (tableau(1))
    'Call afficherColonnes(tableau(0) & ":" & tableau(2), "O:DDD")
ErrHandler:
End Sub
Sub AjouterEtapeIndividuelle(Optional nomEtape As String, Optional topX As Long, Optional topY As Long)
    '   On Error GoTo ErrHandler:
    Dim tableau, aa As Variant
    aa = ActiveCell.Address
    tableau = AjouterEtape(getDValue("Individual"), "id", 205, 228, 255, True, nomEtape, topX, topY)
    'Call ajouterTableau(tableau(0), "AAh10:AAj30")
    'Range(aa).Select
    'selectShape (tableau(1))
    'transfereNomShape (tableau(1))
    'Call afficherColonnes(tableau(0) & ":" & tableau(2), "O:DDD")
ErrHandler:
End Sub
Sub AjouterEtapeSondage(Optional nomEtape As String, Optional topX As Long, Optional topY As Long)
    '   On Error GoTo ErrHandler:
    Dim tableau, aa As Variant
    aa = ActiveCell.Address
    tableau = AjouterEtape(getDValue("Vote"), "sd", 226, 221, 255, True, nomEtape, topX, topY)
    'Call ajouterTableau(tableau(0), "AAl10:AAn30")
    'Range(aa).Select
    'selectShape (tableau(1))
    'transfereNomShape (tableau(1))
    'Call afficherColonnes(tableau(0) & ":" & tableau(2), "O:DDD")
ErrHandler:
End Sub
Sub AjouterEtapeRoutage(Optional nomEtape As String, Optional topX As Long, Optional topY As Long)
     '  On Error GoTo ErrHandler:
    Dim tableau, aa As Variant
    aa = ActiveCell.Address
    tableau = AjouterEtape(getDValue("Routing"), "rt", 255, 250, 242, True, nomEtape, topX, topY)
    'Call ajouterTableau(tableau(0), "AAx10:AAz30")
    'Range(aa).Select
    'selectShape (tableau(1))
    'transfereNomShape (tableau(1))
    'Call afficherColonnes(tableau(0) & ":" & tableau(2), "O:DDD")
ErrHandler:
End Sub
Sub AjouterEtapeSousProcess(Optional nomEtape As String, Optional topX As Long, Optional topY As Long)
    '   On Error GoTo ErrHandler:
    Dim tableau, aa As Variant
    aa = ActiveCell.Address
    tableau = AjouterEtape(getDValue("Sub-processes"), "sp", 255, 232, 224, True, nomEtape, topX, topY)
    'Call ajouterTableau(tableau(0), "AAp10:AAr30")
    'Range(aa).Select
    'selectShape (tableau(1))
    'transfereNomShape (tableau(1))
    'Call afficherColonnes(tableau(0) & ":" & tableau(2), "O:DDD")
ErrHandler:
End Sub
Sub AjouterEtapeAutomatique(Optional nomEtape As String, Optional topX As Long, Optional topY As Long)
    '   On Error GoTo ErrHandler:
    Dim tableau, aa As Variant
    aa = ActiveCell.Address
    tableau = AjouterEtape(getDValue("Automatic"), "at", 234, 234, 234, True, nomEtape, topX, topY)
    'Call ajouterTableau(tableau(0), "AAt10:AAv30")
    'Range(aa).Select
    'selectShape (tableau(1))
    'transfereNomShape (tableau(1))
    'Call afficherColonnes(tableau(0) & ":" & tableau(2), "O:DDD")
ErrHandler:
End Sub
Sub AjouterEtapeFinale(Optional nomEtape As String, Optional topX As Long, Optional topY As Long)
     '  On Error GoTo ErrHandler:
    Dim tableau, aa As Variant
    aa = ActiveCell.Address
    tableau = AjouterEtape(getDValue("Final"), "fn", 255, 205, 217, False, nomEtape, topX, topY)
    'Call ajouterTableau(tableau(0), "Abb10:Abd30")
    'Range(aa).Select
    'selectShape (tableau(1))
    'transfereNomShape (tableau(1))
    'Call afficherColonnes(tableau(0) & ":" & tableau(2), "O:DDD")
ErrHandler:
End Sub
Function AjouterEtape(typeEtape As String, typeEtapeMini As String, R, G, B As Integer, compteur As Boolean, Optional nomEtape As String, Optional topX As Long, Optional topY As Long)
    '   On Error GoTo ErrHandler:
    Dim x, y, c, d As Integer
    Dim nomType, adresseEtape As String
    Dim TroisColonnes(3) As String
    
    
    'On Error GoTo ErrHandler:
    'R|fffd|cup|fffd|ration du nom du type actuel
    nomType = Range("WorkflowProcess!$A$4")
    
    If topX > 1 Then
        Sheets("WorkflowProcess").Range("B" & Sheets("WorkflowProcess").Range("B4").value + 1).Select
    End If
    x = ActiveCell.row
    y = ActiveCell.Column
    
    If y > 20 Then
        Sheets("WorkflowProcess").Range("B" & ActiveCell.row).Select
    End If
    
    'Compte du nombre de formes
    c = 1
    For Each sh In Sheets("WorkflowProcess").Shapes
    If InStr(1, sh.name, nomType & "_E_") = 1 Then
        c = c + 1
    End If
    Next

    'Cr|fffd|ation de la forme
    If topX > 1 Then
        ActiveSheet.Shapes.AddShape(msoShapeRectangle, ActiveSheet.Range(ActiveCell.Address).Left + topY * 1.2, _
        ActiveSheet.Range(ActiveCell.Address).Top + topX / 1.2, 120, 60).Select
    Else
        ActiveSheet.Shapes.AddShape(msoShapeRectangle, ActiveSheet.Range(ActiveCell.Address).Left, _
        ActiveSheet.Range(ActiveCell.Address).Top, 120, 60).Select
    End If
    'Selection.ShapeRange.Adjustments.Item(1) = 0.08
    
    'Coloration de la forme
    With Selection.ShapeRange.Fill
        .Visible = msoTrue
        .ForeColor.ObjectThemeColor = msoThemeColorAccent5
        .ForeColor.TintAndShade = 0
        '.ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    
    With Selection.ShapeRange.Fill
        .Visible = msoTrue
        .ForeColor.RGB = RGB(R, G, B)
        .Transparency = 0
        .Solid
    End With
    
    'Alignement central
    With Selection.ShapeRange.TextFrame2
        .VerticalAnchor = msoAnchorMiddle
        .HorizontalAnchor = msoAnchorNone
    End With
    
    'Cr|fffd|ation du texte d|fffd|pendant du nombre d'|fffd|tape cr|fffd||fffd|e.
    Selection.ShapeRange.TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignCenter
    
    If (nomEtape <> "") Then
        Selection.ShapeRange.TextFrame2.TextRange.Characters.Text = nomEtape
    ElseIf (compteur = True) Then
        Selection.ShapeRange.TextFrame2.TextRange.Characters.Text = getDValue("Step") & " " & c
    Else
        Selection.ShapeRange.TextFrame2.TextRange.Characters.Text = getDValue("Step") & " " & typeEtape
    End If
    nomEtape = Selection.ShapeRange.TextFrame2.TextRange.Characters.Text
    'Mise en forme du texte
    With Selection.ShapeRange(1).TextFrame2.TextRange.Characters.Font
        .Bold = msoFalse
        .NameComplexScript = "+mn-cs"
        .NameFarEast = "+mn-ea"
        .Fill.Visible = msoTrue
        .Fill.ForeColor.ObjectThemeColor = msoThemeColorAccent6
        .Fill.ForeColor.TintAndShade = 0
        '.Fill.ForeColor.Brightness = 0
        .Fill.Transparency = 0
        .Fill.Solid
        .Size = 15
        .name = "+mn-lt"
    End With
    
    ' Contour
    With Selection.ShapeRange.Line
        .Visible = msoTrue
        .ForeColor.ObjectThemeColor = msoThemeColorAccent6
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
    End With
    With Selection.ShapeRange.Line
        .Visible = msoTrue
        .Weight = 0.25
    End With

    'Renommage de l'objet dans la liste des objets de la page
    Selection.ShapeRange.name = nomType & "_E_" & typeEtapeMini & c
    
    'Sauvegarde de la liste dans param|fffd|tres
    adresseEtape = saveEtape(Selection.ShapeRange.name, nomEtape)
    'MsgBox adresseEtape
    
    'R|fffd|cup|fffd|ration des 3 colonnes associ|fffd| |fffd| l'|fffd|tape
    'd = 0
    'For Each adresse In Range(adresseEtape)
     '   If adresse.row > 1 Then
     '       Exit For
     '   Else
     '       'adresse.Value = Selection.ShapeRange.Name
     '       TroisColonnes(d) = Col_Letter(adresse.Column)
            
     '   End If
     '   d = d + 1
    'Next adresse
    'AjouterEtape = TroisColonnes
    
    'Range(TroisColonnes(1) & 1).value = nomType & "_E_" & typeEtapeMini & c

    'On associe la macro qui affichera le tableau
    'Selection.OnAction = "saveCurrentLabelStep"
   
    Exit Function
ErrHandler:
    MsgBox "Erreur !!"
End Function
Sub ajouterTableau(col, tableau As String)
    'On Error GoTo ErrHandler:
    Dim ligne As Integer
    ligne = Sheets("WorkflowProcess").Range("$B$4").value
    Sheets("WorkflowProcess").Range(tableau).Copy
    'MsgBox Col & ligne
    
    'Sheets("WorkflowProcess").Range(col & ligne).PasteSpecial xlPasteAll
    
    'Sheets("WorkflowProcess").Range(Col & ligne + 1).Value = Sheets("WorkflowProcess").Range("AAF515:AAH515").Value
ErrHandler:
End Sub
Function RelierDeuxEtapes(Optional fromEtape As String, Optional toEtape As String)
     'On Error GoTo ErrHandler:
    Dim shapObject As Variant
    Dim listeEtape(2) As String
    Dim c, d, bPoint, ePoint As Integer
    Dim x, y As Integer
    Dim nomType As String
    Dim adresse, adresseLien, aa As Variant
    Dim TroisColonnes(3) As String
    Dim nameShape As String
    
    aa = ActiveCell.Address
    

    'On Error GoTo ErrHandler:
    'R|fffd|cup|fffd|ration du nom du type actuel
    nomType = Range("WorkflowProcess!$A$4")
    
    'R|fffd|cup|fffd|ration des noms d'|fffd|tape s|fffd|lectionn|fffd|
    If fromEtape <> "" Then
        For Each sh In Sheets("WorkflowProcess").Shapes
            If InStr(1, sh.name, nomType & "_E_") = 1 Then
                nameShape = getTextShape(sh.name)
                If fromEtape = nameShape Then
                    Set shapObject = sh
                    listeEtape(0) = shapObject.name
                ElseIf toEtape = nameShape Then
                    Set shapObject = sh
                    listeEtape(1) = shapObject.name
                End If
            End If
        Next sh
    Else
        If TypeName(Application.Selection) = "DrawingObjects" Then
            c = 0
            If Application.Selection.Count <> 2 Then
                Exit Function
            End If
            For Each sh In Application.Selection
                c = c + 1
                If c = 1 Then
                    Set shapObject = sh
                    listeEtape(0) = shapObject.name
                ElseIf c = 2 Then
                    Set shapObject = sh
                    listeEtape(1) = shapObject.name
                Else
                    Exit For
                End If
            Next
        Else
            Exit Function
        End If
    End If
    
    bPoint = 1
    ePoint = 1
    'Calcul du meilleur chemin entre deux les deux shapes
    If (ActiveSheet.Shapes(listeEtape(0)).Left - ActiveSheet.Shapes(listeEtape(1)).Left) > 60 Or _
        (ActiveSheet.Shapes(listeEtape(0)).Left - ActiveSheet.Shapes(listeEtape(1)).Left) < -60 Then
        bPoint = 4
        ePoint = 2
    ElseIf (ActiveSheet.Shapes(listeEtape(0)).Top - ActiveSheet.Shapes(listeEtape(1)).Top) > 60 Or _
        (ActiveSheet.Shapes(listeEtape(0)).Top - ActiveSheet.Shapes(listeEtape(1)).Top) < -60 Then
        bPoint = 3
        ePoint = 1
    Else
        bPoint = 4
        ePoint = 2
    End If
    
    'Cr|fffd|ation de la fl|fffd|che
    ActiveSheet.Shapes.AddConnector(msoConnectorElbow, 1, 1, 1, 1).Select
    Selection.ShapeRange.Line.EndArrowheadStyle = msoArrowheadTriangle
    
    
    Selection.ShapeRange.ConnectorFormat.BeginConnect ActiveSheet.Shapes(listeEtape(0)), bPoint
    Selection.ShapeRange.ConnectorFormat.EndConnect ActiveSheet.Shapes(listeEtape(1)), ePoint
    
    'On nomme le lien
    Selection.ShapeRange.name = nomType & "_l_" & listeEtape(0) & "_" & listeEtape(1) 'TODO: renommer si d|fffd|j|fffd| existant
    
    'On save le lien
    adresseLien = saveEtape(Selection.ShapeRange.name)
    
    'On associe la macro qui affichera le tableau
    'Selection.OnAction = "getInfoEtape"
    
    'R|fffd|cup|fffd|ration des 3 colonnes associ|fffd| au lien
    'd = 0
    'For Each adresse In Range(adresseLien)
    '    If adresse.row > 1 Then
    '        Exit For
    '    Else
    '        'adresse.Value = Selection.ShapeRange.Name
    '        TroisColonnes(d) = Col_Letter(adresse.Column)
    '
    '    End If
    '    d = d + 1
    'Next adresse
    'AjouterEtape = TroisColonnes
    
   'Range(TroisColonnes(1) & 1).Value = nomType & "_E_" & typeEtapeMini & c
    
    'Range(TroisColonnes(1) & 1).value = nomType & "_L_" & listeEtape(0) & "_" & listeEtape(1)
    
    'Call ajouterTableau(TroisColonnes(0), "Abf10:Abh30")
    
    'Dim tableau, aa As Variant
    'aa = ActiveCell.Address
    'tableau = AjouterEtape("Sous_Process", "sp", 111, 147, 177, True)
    'Call ajouterTableau(tableau(0), "AAp10:AAr30")
    'Range(aa).Select
    'selectShape (TroisColonnes(1))
    
    
    'Sheets("WorkflowProcess").Range(TroisColonnes(1) & (Range("$B$4").value) + 3).value = "=" & getAdresseLibelle(listeEtape(0))
    'Sheets("WorkflowProcess").Range(TroisColonnes(1) & (Range("$B$4").value) + 4).value = "=" & getAdresseLibelle(listeEtape(1))
    
    'Sheets("WorkflowProcess").Shapes.Range(nomType & "_L_" & listeEtape(0) & "_" & listeEtape(1)).Select
    
    'Call afficherColonnes(TroisColonnes(0) & ":" & TroisColonnes(2), "O:DDD")
    
    Exit Function
ErrHandler:
    MsgBox "Erreur !"
End Function
'Retourne les 2 premi|fffd|res shapes selectionn|fffd|e - TODO
Function EtapeSelected()
    Dim shapObject As Variant
    Dim listeEtape(2) As String
    Dim c As Integer
    On Error GoTo ErrHandler:
    
    If TypeName(Application.Selection) = "Rectangle" Then
        Set shapObject = Application.Selection
    ElseIf TypeName(Application.Selection) = "DrawingObjects" Then
        c = 0
        For Each sh In Application.Selection
            c = c + 1
            If c = 1 Then
                Set shapObject = sh
                listeEtape(0) = shapObject.name
            ElseIf c = 2 Then
                Set shapObject = sh
                listeEtape(1) = shapObject.name
            Else
                Exit For
            End If
        Next
    Else
        Exit Function
    End If
    EtapeSelected = listeEtape
    Exit Sub
ErrHandler:
    MsgBox "Erreur !"
End Function
'Sauvegarder l'|fffd|tape dans le tableau dans param|fffd|tres
Function saveEtape(nomEtape As String, Optional nomEntier As String)
     '  On Error GoTo ErrHandler:
    Dim ligne As Integer 'nouvelle ligne du tableau a ins|fffd|rer
    ligne = Range("SYSTEM_values!DD" & Rows.Count).End(xlUp).row + 1
    Range("SYSTEM_values!DD" & ligne) = Range("WorkflowProcess!$A$4").value
    Range("SYSTEM_values!DE" & ligne) = nomEtape
    Range("SYSTEM_values!DF" & ligne) = nomEntier
    saveEtape = Range("SYSTEM_values!DG" & ligne).value
ErrHandler:
End Function
Sub alignerHorizontalement()
    'On Error GoTo ErrHandler:
    Selection.ShapeRange.Align msoAlignMiddles, msoFalse
    Exit Sub
ErrHandler:
    MsgBox "Il faut s|fffd|lectionner au moins 2 |fffd|tapes pour aligner horizontalement"
End Sub
Sub alignerVerticalement()
    'On Error GoTo ErrHandler:
    Selection.ShapeRange.Align msoAlignCenters, msoFalse
    Exit Sub
ErrHandler:
    MsgBox "Il faut s|fffd|lectionner au moins 2 |fffd|tapes pour aligner verticalement"
End Sub
Sub distribuerHorizontalement()
    'On Error GoTo ErrHandler:
    Selection.ShapeRange.Distribute msoDistributeHorizontally, msoFalse
    Exit Sub
ErrHandler:
    MsgBox "Il faut s|fffd|lectionner au moins 3 |fffd|tapes pour distribuer horizontalement"
End Sub
'Supprime toutes les shapes commen|fffd|ant par le nom du type et "E_" ou "l_"
Sub supprimerTout()
    Dim nomType As String
    Dim ligne As Variant
     '  On Error GoTo ErrHandler:
    nomType = Range("WorkflowProcess!$A$4").value
    If MsgBox(" Action irr|fffd|versible ! Supprimer tout le workflow de " & Range("WorkflowProcess!$d$6").value & " ?", vbYesNo + vbExclamation, "Confirmer") = vbYes Then
        For Each sh In Sheets("WorkflowProcess").Shapes
            If InStr(1, sh.name, nomType & "_E_") = 1 Then
                sh.delete
            ElseIf InStr(1, sh.name, nomType & "_l_") = 1 Then
                sh.delete
            End If
        Next
        For Each ligne In Range("SYSTEM_values!$DD1:$DD1000")
            If ligne.value = nomType Then
                'suppression des id dans param|fffd|tres
                Range("SYSTEM_values!$DD" & ligne.row & ":$DF" & ligne.row).Clear
                'suppression des colonnes dans workflow
                collumns = Range("SYSTEM_values!$DG" & ligne.row).value
                'Range(collumns).Clear
            End If
        Next
    End If
ErrHandler:
End Sub
'Supprime une |fffd|tape
Sub supprimerEtape(idEtape As String)
    Dim nomType As String
    Dim ligne As Variant
       On Error GoTo ErrHandler:
    'Suppression des shapes
    For Each sh In Sheets("WorkflowProcess").Shapes
        If InStr(1, sh.name, idEtape) = 1 Then
            sh.delete
        End If
    Next
    
    For Each ligne In Range("SYSTEM_values!$DE1:$DE1000")
        If ligne.value = idEtape Then
            'suppression des id dans param|fffd|tres
            Range("SYSTEM_values!$DE" & ligne.row & ":$DF" & ligne.row).value = "XXX"
            'suppression des colonnes dans workflow
            collumns = Range("SYSTEM_values!$DG" & ligne.row).value
            Sheets("WorkflowProcess").Range(collumns).Clear
        End If
    Next
ErrHandler:
End Sub

'GetInfoEtape
Sub getInfoEtape()
    Dim allEtape() As Variant
    Dim val As Variant
    Dim nomEtape As String
    Dim c As Integer
    'On Error GoTo errorHandler
    nomEtape = ActiveSheet.Shapes(Application.Caller).name 'Si Application.caller trop long ,alors il est tronqu|fffd| !
    allEtape = getArrayEtapes
    c = 1
    For Each val In allEtape
        If val = nomEtape Then
            Call afficherColonnes("" & allEtape(c, 3), "O:DDD")
            Exit For
        End If
        c = c + 1
    Next val

    Call selectShapeDirectly(Range(Split(allEtape(c, 3), ":")(0) & "1").Offset(0, 1).value)
    Exit Sub
errorHandler:
    MsgBox "Erreur ! "
End Sub


'Cacher un ensemble de colonne (aCacher) et affiche un autre ensemble (aAfficher)
Sub afficherColonnes(aAfficher, aCacher As String)
    '   On Error GoTo ErrHandler:
    'Sheets("WorkflowProcess").Columns(aCacher).Hidden = True
    'If Sheets("WorkflowProcess").Columns(aAfficher).Hidden = True Then
    '    Sheets("WorkflowProcess").Columns(aAfficher).Hidden = False
    'End If
ErrHandler:
End Sub
'R|fffd|cup|fffd|raration de la liste de toutes les |fffd|tapes et liens r|fffd|partis sur 2 colonnes
' Colonne 1 = Etape, Colonne 2 = Colonnes associ|fffd|s dans workflow
Function getArrayEtapes()
    Dim ligne As Integer 'nouvelle ligne du tableau a ins|fffd|rer
    '   On Error GoTo ErrHandler:
    ligne = Range("SYSTEM_values!DD" & Rows.Count).End(xlUp).row
    'MsgBox "SYSTEM_values!$DD3:" & "$DG" & ligne
    getArrayEtapes = Range("SYSTEM_values!$DE3:" & "$DG" & ligne)
    'MsgBox getArrayEtapes(1, 1)
    'MsgBox "" & UBound(getArrayEtapes)
    'MsgBox "" & getArrayEtapes(5, 2)
ErrHandler:
End Function
Sub selectShape(col As String)
    '   On Error GoTo ErrHandler:
    'Sheets("WorkflowProcess").Shapes.Range(Range(col & 1).value).Select
ErrHandler:
End Sub
Sub selectShapeDirectly(sh As String)
    '   On Error GoTo ErrHandler:
    Sheets("WorkflowProcess").Shapes.Range(sh).Select
ErrHandler:
End Sub
'Transf|fffd|rer automatiquement le nom de la shape vers le libell|fffd| (not pretty) - TO REFAC
Sub transfereNomShape(col As String)
    Dim ligne As Variant
    Dim name As String
     '  On Error GoTo ErrHandler:
     
    'Sheets("WorkflowProcess").Range(col & (Range("$B$4").value) + 2).value = Selection.ShapeRange(1).TextFrame2.TextRange.Characters.Text
    'name = Selection.ShapeRange(1).TextFrame2.TextRange.Characters.Text
    'For Each ligne In Range("SYSTEM_values!DE1:DE1000")
    '    If ligne.value = name Then
    '        ligne.Offset(0, 1).value = "=WorkflowProcess!" & Sheets("WorkflowProcess").Range(col & (Range("$B$4").value) + 2).Address
    '    End If
    'Next
ErrHandler:
End Sub

'Mise |fffd| jour du name du shape si modif dans le tableau
Sub ModifNameShape(Target As Range)
     '  On Error GoTo ErrHandler:
    Sheets("WorkflowProcess").Shapes.Range(Range(Col_Letter(Target.Column) & 1).value).Select
    Selection.ShapeRange(1).TextFrame2.TextRange.Characters.Text = Target.value
    Sheets("WorkflowProcess").Range(Target.Address).Select
ErrHandler:
End Sub
'get text shape
Function getTextShape(name As String)
     '  On Error GoTo ErrHandler:
    Application.EnableEvents = False
    Sheets("WorkflowProcess").Shapes.Range(name).Select
    Application.EnableEvents = True
    getTextShape = Selection.ShapeRange(1).TextFrame2.TextRange.Characters.Text
ErrHandler:
End Function

Function getAdresseLibelle(ref As String)
    Dim ligne, ligne2 As Variant
     '  On Error GoTo ErrHandler:
    For Each ligne In Range("WorkflowProcess!AA1:ZZ1")
        If ligne.value = ref Then
            For Each ligne2 In Range("WorkflowProcess!" & Col_Letter(ligne.Column) & "2:" & Col_Letter(ligne.Column) & "2000")
                If ligne2.value <> "" Then
                    getAdresseLibelle = ligne2.Offset(2, 0).Address
                    Exit For
                End If
            Next ligne2
        Exit For
        End If
    Next ligne
ErrHandler:
End Function


' MAJ des labels
Sub updateStepLabel()
    Dim nomType As String
    Dim ligne As Variant
    Dim sh As Shape
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    'On Error GoTo ErrHandler:
    For Each sh In Sheets("WorkflowProcess").Shapes
        If InStr(sh.name, "_E_") > 0 And InStr(sh.name, "_l_") <= 0 Then
            For Each ligne In Range("SYSTEM_values!$DE3:$DE1000") 'LIMIT
                If ligne.value = sh.name Then
                    ligne.Offset(0, 1).value = sh.TextFrame.Characters.Text
                    Exit For
                ElseIf ligne.value = "" Then
                    Exit For
                End If
            Next ligne
        End If
    Next
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True

ErrHandler:
End Sub

' TODO
Sub saveCurrentLabelStep()
     lastValue = ActiveSheet.Shapes(Application.Caller).name
     'MsgBox lastValue
End Sub

Sub addComment()
'On Error GoTo ErrHandler:
    ActiveCell.addComment
    'ActiveCell.Comment.Text Text:=Range("SYSTEM_traduction!BF2").Copy
    
    Range("SYSTEM_traduction!BF2").Copy
    ActiveCell.PasteSpecial Paste:=xlPasteComments, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
        
    With ActiveCell.Comment.Shape
        '.Width = 50 'Largeur commentaire
        '.Height = 50 'Hauteur
        '.OLEFormat.Object.Font.Size = 8 'Taille du texte
        '.OLEFormat.Object.Interior.ColorIndex = 34 'Couleur de fond
        '.TextFrame.Characters.Font.ColorIndex = 11 'Couleur de la police
        '.OLEFormat.Object.Font.name = "Bangle" 'Type de police
    End With
    ActiveCell.Comment.Shape.TextFrame.AutoSize = True
ErrHandler:
End Sub

Sub cleanWorkflowSteps()
    For Each ligne In Sheets("SYSTEM_values").Range("SYSTEM_values!$DE2:$DE1000")
        If ligne.value <> "" Then
            trouve = False
            For Each sh In Sheets("WorkflowProcess").Shapes
                If ligne.value = sh.name Then
                    trouve = True
                End If
            Next
            If trouve = False Then
                Call supprimerEtape(ligne.value)
            End If
        End If
    Next
    
    With Sheets("Forms").Range("B6:B3000").Font
        .name = "Corbel"
        .FontStyle = "Normal"
        .Size = 11
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleSingle
        .ThemeColor = xlThemeColorLight2
        .TintAndShade = 0
        .ThemeFont = xlThemeFontMinor
    End With
End Sub
Attribute VB_Name = "x_Maintenance"
Sub UpdateButtonGraphic()
Attribute UpdateButtonGraphic.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim sh As Shape
    Dim i As Integer
    Dim ws As Worksheet
    Dim shapeActive As Shape
    Dim shapeDesactive As Shape
    
    'TODO WHEN NEED TO USE : CREATE TWO RAW SHAPE TO APPLY WITH THE NAMES BELOW :
    Set shapeActive = ActiveSheet.Shapes("ACTIVE")
    Set shapeDesactive = ActiveSheet.Shapes("DESACTIVE")
    
    shapeActive.Select
    Selection.ShapeRange.PickUp
    
    WS_Count = ActiveWorkbook.Worksheets.Count
    For i = 1 To WS_Count
        Set ws = Worksheets(i)
        For Each sh In ws.Shapes
            If InStr(sh.name, "_active") > 0 Then
                 shapeActive.Select
                 Selection.ShapeRange.PickUp
                 ws.Shapes(sh.name).Apply
                 ws.Shapes(sh.name).AutoShapeType = msoShapeRectangle
            End If
        Next
     Next i
     
    For i = 1 To WS_Count
        Set ws = Worksheets(i)
        For Each sh In ws.Shapes
            If InStr(sh.name, "_desactive") > 0 Then
                 shapeDesactive.Select
                 Selection.ShapeRange.PickUp
                 ws.Shapes(sh.name).Apply
                 ws.Shapes(sh.name).AutoShapeType = msoShapeRectangle
            End If
        Next
     Next i

    
    MsgBox "Done ! "
End Sub

'GLOBAL HANDLING OF SHEET NAME CHANGING
Sub handlingOfSheetNameChange()
    
     'TODO : Manual editing of "SYSTEM_values" (BU1, CC1, etc...)
    Call RegroupFunctionSheetNameChange("Informations", "Datas")
    Call RegroupFunctionSheetNameChange("Personnes", "Persons")
    Call RegroupFunctionSheetNameChange("Fonctions", "Functions")
    Call RegroupFunctionSheetNameChange("Listes", "Lists")
    Call RegroupFunctionSheetNameChange("GroupesAdmin", "AdminGroups")
    Call RegroupFunctionSheetNameChange("Profils", "Profiles")
    Call RegroupFunctionSheetNameChange("Contenus", "Contents")
    Call RegroupFunctionSheetNameChange("Champs", "Fields")
    Call RegroupFunctionSheetNameChange("Types", "Types")
    Call RegroupFunctionSheetNameChange("Forms", "Forms")
    Call RegroupFunctionSheetNameChange("Confidentialit|fffd|s", "Confidentiality")
    Call RegroupFunctionSheetNameChange("WorkflowDoc", "WorkflowDoc")
    Call RegroupFunctionSheetNameChange("WorkflowProcess", "WorkflowProcess")
    Call RegroupFunctionSheetNameChange("Entit|fffd|s", "Units")
    Call RegroupFunctionSheetNameChange("Matrice", "Matrix")
    Call RegroupFunctionSheetNameChange("Vues", "Views")
    Call RegroupFunctionSheetNameChange("Recherches", "Searches")
    Call RegroupFunctionSheetNameChange("Statistiques", "Statistics")
    Call RegroupFunctionSheetNameChange("Navigateurs", "Navigators")
    Call RegroupFunctionSheetNameChange("Referencement", "Codification")
    Call RegroupFunctionSheetNameChange("param|fffd|tres", "SYSTEM_values")
    
    MsgBox "Done !"
End Sub

Sub RegroupFunctionSheetNameChange(oldName, newName)
    Call ChangeHyperLinks(oldName, newName)
    Call changeSheetName(oldName, newName)
    Call changeAllFormulas(oldName, newName)
End Sub
Sub ChangeHyperLinks(ByVal oldName As String, ByVal newName As String)
    Dim WS_Count As Integer
    Dim i As Integer


    Dim ws As Worksheet
    Dim Hlink As Hyperlink
    Dim SplitName() As String
    
    WS_Count = ActiveWorkbook.Worksheets.Count
    For i = 1 To WS_Count
        Set ws = Worksheets(i)
        For Each Hlink In ws.Hyperlinks
            With Hlink
                SplitName = Split(.SubAddress, "!")
                If UBound(SplitName) > 0 Then
                    If InStr(1, .SubAddress, oldName, vbTextCompare) Then
                        .SubAddress = "'" & newName & "'!" & SplitName(1)
                    End If
                End If
            End With
        Next Hlink
     Next i
End Sub

Sub changeSheetName(oldName, newName)
Attribute changeSheetName.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    Sheets(oldName).name = newName
End Sub

Sub changeAllFormulas(oldName, newName)
    For Each sht In ActiveWorkbook.Worksheets
        Cells.Replace What:=oldName & "!", Replacement:=newName & "!", LookAt:=xlPart _
            , SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
            ReplaceFormat:=False
    Next sht
End Sub

Sub changeAllValues(oldName, newName)
    For Each sht In ActiveWorkbook.Worksheets
        Cells.Replace What:=oldName & "!", Replacement:=newName & "!", LookAt:=xlPart _
            , SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
            ReplaceFormat:=False
    Next sht
End Sub


Sub generateHeaderFromSheet()
 c = 0
    For Each sht In ActiveWorkbook.Worksheets
        c = c + 1
        Range("F1").Offset(0, c).value = "TAB_HEADER_" & sht.name
    Next sht
End Sub


Sub showInsideDictionary()
    For Each strKey In ThisWorkbook.dDefaultValuesKey.Keys
        Debug.Print (strKey & " -> " & ThisWorkbook.dDefaultValuesKey(strKey))
    Next strKey
End Sub
Attribute VB_Name = "x_Utils"
Function Col_Letter(lngCol As Long) As String
    Dim vArr
    vArr = Split(Cells(1, lngCol).Address(True, False), "$")
    Col_Letter = vArr(0)
End Function

Function Col_Number(ColNm)
    Col_Number = Range(ColNm & 1).Column
End Function

Function getValuesFromColumnName(ws As Worksheet, cName As String, Optional header As Boolean = True) As Variant '= Array
    Dim finalRow As Long
    Dim cLetter As String
    
    cLetter = ""
    
    'Find the column
    cLetter = getColumnLetterFromHeader(ws, cName)
    
    'Exit if did not find
    If cLetter = "-1" Then
        getValuesFromColumnName = Array()
        Exit Function
    End If
    
    'Get last row of this column
    finalRow = ws.Range(cLetter & "1", ws.Range(cLetter & "1").End(xlDown)).Rows.Count
    
    If header = True Then
       getValuesFromColumnName = ws.Range(cLetter & "2:" & cLetter & finalRow).Value2
       Exit Function
    Else
       getValuesFromColumnName = ws.Range(cLetter & "1:" & cLetter & finalRow).Value2
       MsgBox getValuesFromColumnName
       Exit Function
    End If
    
    getValuesFromColumnName = Array()

End Function

Function getColumnLetterFromHeader(ws As Worksheet, cName As String)
    Dim ran As Range
    
    If ws Is Nothing Then
        Set ws = ActiveWorkbook.Sheets("SYSTEM_traduction")
    End If
    
    For Each ran In ws.Range("A1:ZZ1") 'LIMIT
        If ran.value <> "" And ran.value = cName Then
            getColumnLetterFromHeader = Col_Letter(ran.Column)
            Exit Function
        End If
    Next ran
    
    getColumnLetterFromHeader = "-1"
End Function

' InQuest injected base64 decoded content
' )^J)
' jjlI
' ^"wb
' 'nzY^

INQUEST-PP=macro
