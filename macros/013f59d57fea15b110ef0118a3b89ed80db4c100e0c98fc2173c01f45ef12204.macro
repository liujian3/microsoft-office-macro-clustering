Attribute VB_Name = "About_Module"
Option Explicit

Sub Help_Page(control As IRibbonControl)
    On Error Resume Next
    ThisWorkbook.FollowHyperlink "https://www.pk-anexcelexpert.com/products/pks-utility-tool-v1-0/"
End Sub

Sub About_Us(control As IRibbonControl)
    On Error Resume Next
    ThisWorkbook.FollowHyperlink "https://www.pk-anexcelexpert.com/about/"
End Sub

Sub Demo_Video(control As IRibbonControl)
    On Error Resume Next
    ThisWorkbook.FollowHyperlink "https://www.youtube.com/playlist?list=PLbDvAYjpWJ7BcGtyFkKMsdAtP5baGFaEy"

End Sub
Attribute VB_Name = "Frm_File_Manager"
Attribute VB_Base = "0{3A23DA61-45C3-4901-953B-7022E4949C10}{34FD005B-C766-48EA-A622-FBE245EFB08F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Const msg_title = "WWW.PK-AnExcelExpert.Com"



Sub File_List(Search_Text As String, Optional File_Type_Filter As Boolean)

On Error Resume Next

Dim my_sheet As Worksheet
Set my_sheet = ThisWorkbook.Sheets("File_Manager_Support")

If Me.TextBox1.Value = "" Or VBA.Dir(Me.TextBox1.Value, vbDirectory) = "" Then
    my_sheet.Range("A2:A" & Application.Rows.Count).EntireRow.Delete
    Exit Sub
End If

Dim sh As Worksheet
Dim worksheet_status As String

Dim icount As Integer
icount = ActiveWorkbook.Worksheets.Count
 
my_sheet.UsedRange.ClearContents
Dim lr As Integer

my_sheet.Range("A1").Value = "File Name"
my_sheet.Range("B1").Value = "File Type"
my_sheet.Range("C1").Value = "File Size"
my_sheet.Range("D1").Value = "Size"
my_sheet.Range("E1").Value = "Last Modified On"
   
Dim fso As New FileSystemObject
Dim fo As Folder
Dim f As File

Dim Total_Size As Long
Total_Size = 0

If File_Type_Filter = False Then
    Dim df As String
    df = Me.ComboBox2.Value

    Me.ComboBox2.Clear
    Me.ComboBox2.AddItem "ALL"
End If

Set fo = fso.GetFolder(Me.TextBox1.Value)

For Each f In fo.Files
    lr = my_sheet.Range("A" & Application.Rows.Count).End(xlUp).Row
    
    If VBA.InStr(UCase(f.Name), UCase(Me.txt_Search.Value)) > 0 Then  'Filer by search box
       
       
       If VBA.Left(f.Name, 1) <> "~" Then
       
          my_sheet.Range("A" & lr + 1).Value = f.Name
          my_sheet.Range("B" & lr + 1).Value = f.Type
          my_sheet.Range("C" & lr + 1).Value = f.Size
          
          my_sheet.Range("D" & lr + 1).Value = VBA.Format(f.Size, "0 B")
          
          If f.Size > 1024 Then
          my_sheet.Range("D" & lr + 1).Value = VBA.Format(f.Size / 1024, "0 KB")
          End If
          
          If f.Size > 1048576 Then
          my_sheet.Range("D" & lr + 1).Value = VBA.Format(f.Size / 1048576, "0.0 MB")
          End If
                
          my_sheet.Range("E" & lr + 1).Value = f.DateLastModified
                       
                       
              '======== Create File Type List
               If File_Type_Filter = False Then
                  If Application.WorksheetFunction.CountIf(my_sheet.Range("B:B"), f.Type) = 1 Then
                      Me.ComboBox2.AddItem f.Type
                  End If
                End If
                      
              '===============================
        
      End If
        
         
    End If
    
    Total_Size = Total_Size + f.Size
    
Next
   
   If File_Type_Filter = False Then
    
    If df = "" Then
     Me.ComboBox2.Value = "ALL"
     Else
    If Application.WorksheetFunction.CountIf(my_sheet.Range("B:B"), df) > 0 Then
       Me.ComboBox2.Value = df
       Else
       Me.ComboBox2.Value = "ALL"
    End If
    End If
    
    
    End If
  
    my_sheet.Range("E:E").NumberFormat = "DD-MMM-YY HH:MM:SS"
    
     
    '==========Sort ==============
    
    If ThisWorkbook.Sheets("Support").Range("A2").Value = 2 Then
        my_sheet.UsedRange.Sort key1:=my_sheet.Cells(1, Application.Match(Me.ComboBox1.Value, my_sheet.Range("1:1"), 0)), order1:=xlDescending, Header:=xlYes
    Else
        my_sheet.UsedRange.Sort key1:=my_sheet.Cells(1, Application.Match(Me.ComboBox1.Value, my_sheet.Range("1:1"), 0)), order1:=xlAscending, Header:=xlYes
    End If
    
    '============================
    
    
    lr = Application.CountA(my_sheet.Range("A:A"))
    If lr = 1 Then lr = 2
   ThisWorkbook.Activate
    Me.ListBox1.RowSource = "File_Manager_Support!A2:E" & lr
 
 
 '================= Update Numbers
    Me.lbl_File_Count.Caption = fo.Files.Count
    
        Me.lbl_Size.Caption = VBA.Format(Total_Size, "0 B")
        
        If Total_Size > 1024 Then
        Me.lbl_Size.Caption = VBA.Format(Total_Size / 1024, "0 KB")
        End If
        
        If Total_Size > 1048576 Then
        Me.lbl_Size.Caption = VBA.Format(Total_Size / 1048576, "0.0 MB")
        End If
         
    Me.lbl_Filtered = Application.CountA(my_sheet.Range("A:A")) - 1
 
    Dim n As Integer
    Dim x As Integer
    x = 0
    For n = 0 To Me.ListBox1.ListCount - 1
        If Me.ListBox1.Selected(n) = True Then x = x + 1
    Next n
    
    Me.lbl_Selected.Caption = x
 
End Sub
   
Private Sub btn_Add_Prefix_Click()

On Error Resume Next

'''''' Selection validation
     
   If Check_File_Selection <> "OK" Then
        MsgBox Check_File_Selection, vbCritical, msg_title
        Exit Sub
   End If
     
    'confirmation
'    Dim confirmation As Integer
'    confirmation = MsgBox("Do you want add the prefix in the selected file(s)?", vbYesNo + vbQuestion, msg_title)
'
'    If confirmation = 7 Then Exit Sub
     
     
    Dim folder_path As String
    
    If VBA.Right(Me.TextBox1.Value, 1) = "\" Then
        folder_path = VBA.Left(Me.TextBox1.Value, VBA.Len(Me.TextBox1.Value) - 1)
    Else
        folder_path = Me.TextBox1.Value
    End If
      
    Dim Prefix As String
    Prefix = VBA.InputBox("Please enter the Prefix", "New File Name")
     
    If Prefix = "" Then Exit Sub
    
    If IsValidFileName(Prefix) = False Then
        MsgBox "Invalid Prefix", vbCritical, msg_title
        Exit Sub
    End If
    
    'Check if file already exist
    
    Dim i As Integer
    
    Dim f As File
    Dim fso As New FileSystemObject
     
    
    For i = 0 To Me.ListBox1.ListCount - 1
        If Me.ListBox1.Selected(i) = True Then
        
        If VBA.Dir(folder_path & Application.PathSeparator & Prefix & Me.ListBox1.List(i, 0)) = "" Then
             Set f = fso.GetFile(folder_path & Application.PathSeparator & Me.ListBox1.List(i, 0))
             f.Name = Prefix & f.Name
        End If
        
    End If
    
    
    Next i
     
    
    Call File_List(Me.txt_Search.Value, False)

End Sub

Private Sub btn_Ascending_Click()
        On Error Resume Next
        Dim my_sheet As Worksheet
        Set my_sheet = ThisWorkbook.Sheets("File_Manager_Support")
 
        my_sheet.UsedRange.Sort key1:=my_sheet.Cells(1, Application.Match(Me.ComboBox1.Value, my_sheet.Range("1:1"), 0)), order1:=xlAscending, Header:=xlYes
        ThisWorkbook.Sheets("Support").Range("A2").Value = 1
        
End Sub
 
 
Private Sub btn_Attachments_Click()
On Error Resume Next

'''''' Selection validation
     
   If Check_File_Selection <> "OK" Then
        MsgBox Check_File_Selection, vbCritical, msg_title
        Exit Sub
   End If
     
  
     
    Dim folder_path As String
    
    If VBA.Right(Me.TextBox1.Value, 1) = "\" Then
        folder_path = VBA.Left(Me.TextBox1.Value, VBA.Len(Me.TextBox1.Value) - 1)
    Else
        folder_path = Me.TextBox1.Value
    End If
         
         
         Dim OutApp As Object
    Dim OutMail As Object

    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)

    On Error Resume Next
    
    
    Dim i As Integer
    
    For i = 0 To Me.ListBox1.ListCount - 1
        If Me.ListBox1.Selected(i) = True Then
            OutMail.attachments.Add folder_path & Application.PathSeparator & Me.ListBox1.List(i, 0)
        End If
    Next i
    
    
    OutMail.Display
   
        
 
    On Error GoTo 0

    With Application
        .EnableEvents = True
        .ScreenUpdating = True
    End With

    Set OutMail = Nothing
    Set OutApp = Nothing
    
    

End Sub

Private Sub btn_Browse_Click()
On Error Resume Next
    Dim fo As FileDialog
    Set fo = Application.FileDialog(msoFileDialogFolderPicker)
    fo.Show
    fo.AllowMultiSelect = False
    On Error Resume Next
    Me.TextBox1.Value = fo.SelectedItems(1)
    ThisWorkbook.Sheets("Support").Range("B2").Value = fo.SelectedItems(1)
    
End Sub

Private Sub Btn_Consolidate_Click()
 On Error Resume Next
 '''''' Selection validation
     
   If Check_File_Selection <> "OK" Then
        MsgBox Check_File_Selection, vbCritical, msg_title
        Exit Sub
   End If
       
   '========== Validate Sheet name or Index
    If Me.OptionButton3.Value = True Then
        If VBA.IsNumeric(Me.TextBox3.Value) = False Then
            MsgBox "Invalid Sheet Index", vbCritical, msg_title
            Exit Sub
        End If
    End If
       
    If Me.OptionButton4.Value = True Then
        If Me.TextBox4.Value = "" Or IsValidSheetName(Me.TextBox4.Value) = False Then
            MsgBox "Invalid Sheet name", vbCritical, msg_title
            Exit Sub
        End If
    End If
       
    Dim folder_path As String
    
    If VBA.Right(Me.TextBox1.Value, 1) = "\" Then
        folder_path = VBA.Left(Me.TextBox1.Value, VBA.Len(Me.TextBox1.Value) - 1)
    Else
        folder_path = Me.TextBox1.Value
    End If
       
 
Dim Selected_Files As Long
Dim Excel_Files As Long
Dim wb As Workbook
Dim sh As Worksheet
Dim nwb As Workbook
Dim nsh As Worksheet

Set nwb = Workbooks.Add
Set nsh = nwb.Sheets(1)

Selected_Files = 0
Excel_Files = 0

    On Error Resume Next
    Dim i As Long
    
    Dim lr As Long
    Dim Source_Column As Integer
    Source_Column = 0
    
    For i = 0 To Me.ListBox1.ListCount - 1
        If Me.ListBox1.Selected(i) = True Then
            Selected_Files = Selected_Files + 1
             
            If VBA.UCase(VBA.Left(Me.ListBox1.List(i, 1), 15)) = "MICROSOFT EXCEL" Then
                Set wb = Workbooks.Open(folder_path & Application.PathSeparator & Me.ListBox1.List(i, 0))
                
                If Me.OptionButton3.Value = True Then   'Set worksheet
                    Set sh = wb.Sheets(VBA.CInt(Me.TextBox3.Value))
                Else
                    Set sh = wb.Sheets(Me.TextBox4.Value)
                End If
                
                lr = nsh.Range("A" & Application.Rows.Count).End(xlUp).Row + 1
                sh.UsedRange.Copy nsh.Range("A" & lr)
                
                If Source_Column = 0 Then Source_Column = sh.UsedRange.Columns(sh.UsedRange.Columns.Count + 1).Column
                nsh.Range(nsh.Cells(lr, Source_Column), nsh.Cells(nsh.Range("A" & Application.Rows.Count).End(xlUp).Row, Source_Column)).Value = wb.Name
                nsh.Cells(2, Source_Column).Value = "Source File"
                nsh.Cells(2, Source_Column).Interior.ColorIndex = 15
                nsh.Cells(2, Source_Column).Font.Bold = True
                            
                Excel_Files = Excel_Files + 1
                wb.Close False
            End If
        End If
    Next i
    
    
    If Excel_Files = 0 Then
        nwb.Close False
        MsgBox "No Excel file found", vbCritical, msg_title
        Exit Sub
    Else
        nsh.Range("1:1").Delete   'delete first row which will be blank
        
        If Me.CheckBox1.Value = True Then  'delete headers from the data
            nsh.UsedRange.AutoFilter 1, nsh.Range("A1").Value
            nsh.Range("A2:A" & Application.Rows.Count).SpecialCells(xlCellTypeVisible).EntireRow.Delete
            nsh.AutoFilterMode = False
        End If
        
        
        MsgBox Excel_Files & " out of " & Selected_Files & " file(s) processed", vbInformation, msg_title
      
    End If
    
    
     On Error GoTo 0
 

 
 

End Sub

Private Sub btn_Delete_Click()

On Error Resume Next

   '''''' Selection validation
     
   If Check_File_Selection <> "OK" Then
        MsgBox Check_File_Selection, vbCritical, msg_title
        Exit Sub
   End If
     
    'confirmation
    Dim confirmation As Integer
    confirmation = MsgBox("Beware! You would not be able to retrieve the files after deleting even from Recycle bin." & vbLf & vbLf & "Do you want to continue?", vbYesNo + vbQuestion, msg_title)
       
    If confirmation = 7 Then Exit Sub
     
    Dim folder_path As String
    
    If VBA.Right(Me.TextBox1.Value, 1) = "\" Then
        folder_path = VBA.Left(Me.TextBox1.Value, VBA.Len(Me.TextBox1.Value) - 1)
    Else
        folder_path = Me.TextBox1.Value
    End If
         
    Dim i As Integer
     
    On Error Resume Next
    
    For i = 0 To Me.ListBox1.ListCount
        If Me.ListBox1.Selected(i) = True Then
            VBA.Kill (folder_path & Application.PathSeparator & Me.ListBox1.List(i, 0))
        End If
    Next i
     On Error GoTo 0
     
      Call File_List(Me.txt_Search.Value, False)
      
End Sub

Private Sub btn_Descending_Click()

On Error Resume Next
        
        Dim my_sheet As Worksheet
        Set my_sheet = ThisWorkbook.Sheets("File_Manager_Support")
 
        my_sheet.UsedRange.Sort key1:=my_sheet.Cells(1, Application.Match(Me.ComboBox1.Value, my_sheet.Range("1:1"), 0)), order1:=xlDescending, Header:=xlYes
        ThisWorkbook.Sheets("Support").Range("A2").Value = 2

End Sub
 
Private Sub btn_Export_To_Excel_Click()

On Error Resume Next

Dim sh As Worksheet
Set sh = ThisWorkbook.Sheets("File_Manager_Support")

Dim wb As Workbook
Set wb = Workbooks.Add

Dim ash As Worksheet
Set ash = wb.Sheets(1)

sh.UsedRange.Copy ash.Range("A1")

ash.Range("C:C").Delete

 
With ash.UsedRange
    .HorizontalAlignment = xlCenter
    .VerticalAlignment = xlCenter
    .Borders.LineStyle = xlHairline
    .Borders.Weight = xlThin
    .Borders.ColorIndex = 15
    .EntireRow.RowHeight = 15
    .EntireColumn.AutoFit
    .Font.Name = "Calibri"
    .Font.Size = 10
    .Font.Italic = False
    .Font.Bold = False
    .Font.Underline = False
    .Interior.Color = xlNone
    .Font.ColorIndex = 1
End With

ActiveWindow.DisplayGridlines = False
 
 
  With ash.Range("A1:D1")
        .Font.Bold = True
        .Interior.ColorIndex = 23
        .Font.ColorIndex = 2
        .Font.Size = 11
  End With
    

 

End Sub

Private Sub btn_Open_File_Click()
 
 On Error Resume Next
 
    If Check_File_Selection <> "OK" Then
        MsgBox Check_File_Selection, vbCritical, msg_title
        Exit Sub
   End If
      
     
    Dim folder_path As String
    
    If VBA.Right(Me.TextBox1.Value, 1) = "\" Then
        folder_path = VBA.Left(Me.TextBox1.Value, VBA.Len(Me.TextBox1.Value) - 1)
    Else
        folder_path = Me.TextBox1.Value
    End If
     
     Dim i As Integer
     
     For i = 0 To Me.ListBox1.ListCount - 1
        If Me.ListBox1.Selected(i) = True Then
        VBA.Shell "Explorer.exe " & folder_path & Application.PathSeparator & Me.ListBox1.List(i, 0)
        End If
     Next i
 
 
End Sub

Private Sub btn_Open_Folder_Click()
VBA.Shell "explorer.exe " & Me.TextBox1.Value, vbNormalFocus

End Sub

Private Sub btn_Rename_File_Click()
    
    On Error Resume Next
      
   '''''' Selection validation
     
   If Check_File_Selection <> "OK" Then
        MsgBox Check_File_Selection, vbCritical, msg_title
        Exit Sub
   End If
      
     
    Dim folder_path As String
    
    If VBA.Right(Me.TextBox1.Value, 1) = "\" Then
        folder_path = VBA.Left(Me.TextBox1.Value, VBA.Len(Me.TextBox1.Value) - 1)
    Else
        folder_path = Me.TextBox1.Value
    End If
     
     
    Dim Old_Name As String
    Old_Name = Me.ListBox1.List(Me.ListBox1.ListIndex, 0)
     
    Dim arr() As String
    arr = VBA.Split(Old_Name, ".")
    Dim file_Extention As String
    file_Extention = "." & arr(UBound(VBA.Split(Old_Name, ".")))
     
    
    Dim File_Name As String
    File_Name = VBA.InputBox("Please enter the New File Name", "New File Name", VBA.Replace(Old_Name, file_Extention, ""))
        
    If File_Name = "" Then Exit Sub
    
    If IsValidFileName(File_Name) = False Then
        MsgBox "Invalid File Name", vbCritical, msg_title
        Exit Sub
    End If
    
    'Check if file already exist
    
    If VBA.Dir(folder_path & Application.PathSeparator & File_Name & file_Extention) <> "" Then
        MsgBox "File already exists with this name. Try another name", vbCritical, msg_title
        Exit Sub
    End If
        
    Dim f As File
    Dim fso As New FileSystemObject
    
    Set f = fso.GetFile(folder_path & Application.PathSeparator & Old_Name)
        
    f.Name = File_Name & file_Extention
    
    Call File_List(Me.txt_Search.Value, False)
    
'    Dim n As Integer
'
'    For n = 0 To Me.ListBox1.ListCount - 1
'        If Me.ListBox1.List(n, 0) = f.name Then
'            Me.ListBox1.Selected(n) = True
'            Exit For
'        End If
'    Next n
    
    
    
    
End Sub

Private Sub btn_Replace_File_Name_Click()

On Error Resume Next

'''''' Selection validation
     
   If Check_File_Selection <> "OK" Then
        MsgBox Check_File_Selection, vbCritical, msg_title
        Exit Sub
   End If
     
    'confirmation
'    Dim confirmation As Integer
'    confirmation = MsgBox("Do you want add the prefix in the selected file(s)?", vbYesNo + vbQuestion, msg_title)
'
'    If confirmation = 7 Then Exit Sub
     
     
    On Error Resume Next
    Dim folder_path As String
    
    If VBA.Right(Me.TextBox1.Value, 1) = "\" Then
        folder_path = VBA.Left(Me.TextBox1.Value, VBA.Len(Me.TextBox1.Value) - 1)
    Else
        folder_path = Me.TextBox1.Value
    End If
      
    Dim Old_Text As String
    Old_Text = VBA.InputBox("Please enter old text", "Old Text")
     
    If Old_Text = "" Then Exit Sub
     
    Dim New_Text As String
    New_Text = VBA.InputBox("Please enter new text", "New Text")
     
    'If New_Text = "" Then Exit Sub
         
    Dim i As Integer
    Dim f As File
    Dim fso As New FileSystemObject
    Dim New_Name As String
    Dim Old_Name As String
    
    For i = 0 To Me.ListBox1.ListCount - 1
        If Me.ListBox1.Selected(i) = True Then
        Old_Name = Me.ListBox1.List(i, 0)
        New_Name = VBA.Replace(Old_Name, Old_Text, New_Text)
        
        If VBA.Dir(folder_path & Application.PathSeparator & New_Name) = "" Then
             Set f = fso.GetFile(folder_path & Application.PathSeparator & Old_Name)
             f.Name = New_Name
        End If
        
    End If
    
    
    Next i
     
    
    Call File_List(Me.txt_Search.Value, False)
    
End Sub

Private Sub btn_Search_Click()
    
    Call File_List(Me.txt_Search.Value, False)
End Sub
  
Private Sub btn_Serial_Number_Click()


On Error Resume Next


'''''' Selection validation
     
   If Check_File_Selection <> "OK" Then
        MsgBox Check_File_Selection, vbCritical, msg_title
        Exit Sub
   End If
      
'Check Start Number
If VBA.IsNumeric(Me.TextBox2.Value) = False Then
        MsgBox "Invalid Start Number", vbCritical, msg_title
        Exit Sub
End If
      
          
    Dim folder_path As String
    
    If VBA.Right(Me.TextBox1.Value, 1) = "\" Then
        folder_path = VBA.Left(Me.TextBox1.Value, VBA.Len(Me.TextBox1.Value) - 1)
    Else
        folder_path = Me.TextBox1.Value
    End If
       
    
   Dim i As Integer
    
    Dim f As File
    Dim fso As New FileSystemObject
    Dim New_Name As String
    Dim Old_Name As String
    Dim x As Integer
    x = 0
    
    On Error Resume Next
    For i = 0 To Me.ListBox1.ListCount - 1
        If Me.ListBox1.Selected(i) = True Then
        Old_Name = Me.ListBox1.List(i, 0)
        
        If Me.OptionButton1.Value = True Then
            New_Name = VBA.CLng(Me.TextBox2.Value) + x & "." & Old_Name
        Else
            New_Name = Application.Substitute(Old_Name, ".", "-" & VBA.CLng(Me.TextBox2.Value) + x & ".", Len(Old_Name) - Len(Application.Substitute(Old_Name, ".", "")))
        End If
        
        If VBA.Dir(folder_path & Application.PathSeparator & New_Name) = "" Then
             Set f = fso.GetFile(folder_path & Application.PathSeparator & Old_Name)
             f.Name = New_Name
             x = x + 1
        End If
        
    End If
    
    
    Next i
     
    
    Call File_List(Me.txt_Search.Value, False)
End Sub

Private Sub btn_Suffix_Click()

On Error Resume Next

'''''' Selection validation
     
   If Check_File_Selection <> "OK" Then
        MsgBox Check_File_Selection, vbCritical, msg_title
        Exit Sub
   End If
     
    'confirmation
'    Dim confirmation As Integer
'    confirmation = MsgBox("Do you want add the prefix in the selected file(s)?", vbYesNo + vbQuestion, msg_title)
'
'    If confirmation = 7 Then Exit Sub
     
     
    On Error Resume Next
    Dim folder_path As String
    
    If VBA.Right(Me.TextBox1.Value, 1) = "\" Then
        folder_path = VBA.Left(Me.TextBox1.Value, VBA.Len(Me.TextBox1.Value) - 1)
    Else
        folder_path = Me.TextBox1.Value
    End If
      
    Dim Suffix As String
    Suffix = VBA.InputBox("Please enter the Suffix", "Suffix")
     
    If Suffix = "" Then Exit Sub
    
    If IsValidFileName(Suffix) = False Then
        MsgBox "Invalid Suffix", vbCritical, msg_title
        Exit Sub
    End If
     
    Dim i As Integer
    
    Dim f As File
    Dim fso As New FileSystemObject
    Dim New_Name As String
    Dim Old_Name As String
    
    For i = 0 To Me.ListBox1.ListCount - 1
        If Me.ListBox1.Selected(i) = True Then
        Old_Name = Me.ListBox1.List(i, 0)
        New_Name = Application.Substitute(Old_Name, ".", Suffix & ".", Len(Old_Name) - Len(Application.Substitute(Old_Name, ".", "")))
        
        If VBA.Dir(folder_path & Application.PathSeparator & New_Name) = "" Then
             Set f = fso.GetFile(folder_path & Application.PathSeparator & Old_Name)
             f.Name = New_Name
        End If
        
    End If
    
    
    Next i
     
    
    Call File_List(Me.txt_Search.Value, False)
End Sub

Private Sub btn_Zip_Files_Click()

On Error Resume Next

  If Check_File_Selection <> "OK" Then
        MsgBox Check_File_Selection, vbCritical, msg_title
        Exit Sub
   End If
     
    
    Dim folder_path As String
    
    If VBA.Right(Me.TextBox1.Value, 1) = "\" Then
        folder_path = VBA.Left(Me.TextBox1.Value, VBA.Len(Me.TextBox1.Value) - 1)
    Else
        folder_path = Me.TextBox1.Value
    End If
         
    Dim i As Integer
     
    'On Error Resume Next
    
    For i = 0 To Me.ListBox1.ListCount
        If Me.ListBox1.Selected(i) = True Then
             Call CreateZipFile(folder_path & Application.PathSeparator & Me.ListBox1.List(i, 0), folder_path & Application.PathSeparator & VBA.Left(Me.ListBox1.List(i, 0), VBA.Len(Me.ListBox1.List(i, 0)) - Application.Find(".", Me.ListBox1.List(i, 0), VBA.Len(Me.ListBox1.List(i, 0)) - VBA.Len(Application.WorksheetFunction.Substitute(Me.ListBox1.List(i, 0), ".", "")))) & ".zip")
             'Call CreateZipFile("C:\Users\marks\Documents\ZipThisFolder\", "C:\Users\marks\Documents\NameOFZip.zip")
        End If
    Next i
     On Error GoTo 0
     
      Call File_List(Me.txt_Search.Value, False)

 
End Sub

Private Sub ComboBox2_Change()

On Error Resume Next

    If Me.ComboBox2.Value = "" Then Exit Sub
     
    Dim sh As Worksheet
    Set sh = ThisWorkbook.Sheets("File_Manager_Support")
    sh.AutoFilterMode = False
    Dim str As String
    str = Me.ComboBox2.Value
    
    Call File_List(Me.txt_Search.Value, True)
    
    If Me.ComboBox2.Value <> "ALL" Then
       sh.UsedRange.AutoFilter 2, "<>" & str
       sh.Range("A2:A" & Application.Rows.Count).SpecialCells(xlCellTypeVisible).EntireRow.Delete
       sh.AutoFilterMode = False
    End If
    
    Dim lr As Long
    lr = Application.CountA(ThisWorkbook.Sheets("File_Manager_Support").Range("A:A"))
    If lr = 1 Then lr = 2
   ThisWorkbook.Activate
    Me.ListBox1.RowSource = "File_Manager_Support!A2:E" & lr
    
    '========= Change Numbers
    Dim n As Integer
    Dim x As Integer
    x = 0
    For n = 0 To Me.ListBox1.ListCount - 1
        If Me.ListBox1.Selected(n) = True Then x = x + 1
    Next n
    
    Me.lbl_Selected.Caption = x
    
    
    Me.lbl_Filtered = Application.CountA(ThisWorkbook.Sheets("File_Manager_Support").Range("A:A")) - 1
    
End Sub
 

Private Sub ListBox1_Change()

On Error Resume Next

Dim n As Integer
Dim x As Integer
x = 0
For n = 0 To Me.ListBox1.ListCount - 1
    If Me.ListBox1.Selected(n) = True Then x = x + 1
Next n

Me.lbl_Selected.Caption = x

End Sub

Private Sub ListBox1_Click()

On Error Resume Next

Dim n As Integer
Dim x As Integer
x = 0
For n = 0 To Me.ListBox1.ListCount - 1
    If Me.ListBox1.Selected(n) = True Then x = x + 1
Next n

Me.lbl_Selected.Caption = x

End Sub

Private Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    
On Error Resume Next
  
        
    Dim folder_path As String
    
    If VBA.Right(Me.TextBox1.Value, 1) = "\" Then
        folder_path = VBA.Left(Me.TextBox1.Value, VBA.Len(Me.TextBox1.Value) - 1)
    Else
        folder_path = Me.TextBox1.Value
    End If
     
    VBA.Shell "Explorer.exe " & folder_path & Application.PathSeparator & Me.ListBox1.List(Me.ListBox1.ListIndex, 0)
      
 
End Sub

Private Sub ListBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)

On Error Resume Next

Dim n As Integer
Dim x As Integer
x = 0
For n = 0 To Me.ListBox1.ListCount - 1
    If Me.ListBox1.Selected(n) = True Then x = x + 1
Next n

Me.lbl_Selected.Caption = x

End Sub

Private Sub TextBox1_Change()
     
    On Error Resume Next
     
    If ThisWorkbook.Sheets("Support").Range("B2").Value <> "" Then
        ThisWorkbook.Sheets("Support").Range("B2").Value = Me.TextBox1.Value
    End If
    
    Call File_List(Me.txt_Search.Value, False)
    
End Sub

Private Sub txt_Search_Change()
   'Call File_List(Me.txt_Search.Value, False)
End Sub

Private Sub UserForm_Activate()

On Error Resume Next

    With Me.ComboBox1
        .Clear
        .AddItem "File Name"
        .AddItem "File Type"
        .AddItem "File Size"
        .AddItem "Last Modified on"
        .Value = "File Name"
    End With
'
'    With Me.ComboBox2
'        .Clear
'        .AddItem "ALL"
'        .Value = "ALL"
'    End With
           
           
    If ThisWorkbook.Sheets("Support").Range("B2").Value = "" Then
        Me.TextBox1.Value = VBA.Environ("USERPROFILE") & "\Desktop"
    Else
        Me.TextBox1.Value = ThisWorkbook.Sheets("Support").Range("B2").Value
    End If
    
 
End Sub
 
Function Check_File_Selection() As String

On Error Resume Next

Dim n, i As Long
n = 0

For i = 0 To Me.ListBox1.ListCount - 1
    If Me.ListBox1.Selected(i) = True Then n = n + 1
Next i

If n = 0 Then
    Check_File_Selection = "Please select a file"
    Exit Function
End If

If Me.ListBox1.List(Me.ListBox1.ListIndex, 0) = "" Then
    Check_File_Selection = "No File Available"
    Exit Function
End If
 
Check_File_Selection = "OK"

End Function
   
Sub CreateZipFile(folderToZipPath As Variant, zippedFileFullName As Variant)

On Error Resume Next

Dim ShellApp As Object

'Create an empty zip file
Open zippedFileFullName For Output As #1
Print #1, Chr$(80) & Chr$(75) & Chr$(5) & Chr$(6) & String(18, 0)
Close #1

'Copy the files & folders into the zip file
Set ShellApp = CreateObject("Shell.Application")
ShellApp.Namespace(zippedFileFullName).CopyHere ShellApp.Namespace(folderToZipPath).Items

 
On Error Resume Next
Do Until ShellApp.Namespace(zippedFileFullName).Items.Count = ShellApp.Namespace(folderToZipPath).Items.Count
    Application.Wait (Now + TimeValue("0:00:01"))
Loop
On Error GoTo 0

'Call CreateZipFile("C:\Users\marks\Documents\ZipThisFolder\", "C:\Users\marks\Documents\NameOFZip.zip")


End Sub
 

Sub UnzipAFile(zippedFileFullName As Variant, unzipToPath As Variant)

On Error Resume Next

Dim ShellApp As Object

'Copy the files & folders from the zip into a folder
Set ShellApp = CreateObject("Shell.Application")
ShellApp.Namespace(unzipToPath).CopyHere ShellApp.Namespace(zippedFileFullName).Items

'Call UnzipAFile("C:\Users\marks\Documents\ZipHere.zip", "C:\Users\marks\Documents\UnzipHereFolder\")

End Sub

Function IsValidFileName(sFileName As String) As Boolean
    
    On Error Resume Next
    
    Dim lstIllegal As Variant
    Dim i As Long
    Dim result As Boolean
        
    lstIllegal = Array("/", "\", ":", "*", "?", "&lt; ", ">", "|", """")
    result = True
    
    For i = LBound(lstIllegal) To UBound(lstIllegal)
        If InStr(1, sFileName, lstIllegal(i)) > 0 Then
            result = False
            Exit Function
        End If
    Next i
    
    If VBA.Len(sFileName) > 255 Then result = False
    
    IsValidFileName = result
End Function


Attribute VB_Name = "Frm_Sheet_Manager"
Attribute VB_Base = "0{AF07AA88-993E-4E60-8F90-2811B97C9996}{45F9D82D-9B5B-43A9-B9AE-1D4968C4DE38}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Sub worksheet_status(Search_Text As String)

On Error Resume Next

Dim sh As Worksheet
Dim worksheet_status As String

Dim icount As Integer
icount = ActiveWorkbook.Worksheets.Count
 
Dim my_sheet As Worksheet
Set my_sheet = ThisWorkbook.Sheets("Worksheet_Manager_Support")

my_sheet.UsedRange.ClearContents
Dim lr As Integer

Dim visble_worksheets, hidden_worksheets, Very_hidden_worksheets As Integer

visble_worksheets = 0
hidden_worksheets = 0
Very_hidden_worksheets = 0

my_sheet.Range("A1").Value = "Worksheet Name"
my_sheet.Range("B1").Value = "Worksheet State"

For Each sh In ActiveWorkbook.Worksheets
    
    lr = Application.CountA(my_sheet.Range("A:A")) + 1
    
    If sh.Visible = xlSheetVisible Then
        worksheet_status = "Visible"
        visble_worksheets = visble_worksheets + 1
    End If
    
    If sh.Visible = xlSheetHidden Then
        worksheet_status = "Hidden"
        hidden_worksheets = hidden_worksheets + 1
    End If
    
    If sh.Visible = xlSheetVeryHidden Then
        worksheet_status = "Very Hidden"
        Very_hidden_worksheets = Very_hidden_worksheets + 1
    End If
    
    
    If Search_Text = "" Then
        my_sheet.Range("A" & lr).Value = sh.Name
        my_sheet.Range("B" & lr).Value = worksheet_status
    Else
        If VBA.InStr(UCase(sh.Name), UCase(Search_Text)) > 0 Then
            my_sheet.Range("A" & lr).Value = sh.Name
            my_sheet.Range("B" & lr).Value = worksheet_status
         End If
    End If
     
Next

If Me.ComboBox1.Value <> "ALL" Then
    my_sheet.UsedRange.AutoFilter 2, "<>" & Me.ComboBox1.Value
    my_sheet.Range("A2:A" & Application.Rows.Count).SpecialCells(xlCellTypeVisible).EntireRow.Delete
    my_sheet.AutoFilterMode = False
End If
 
    lr = Application.CountA(my_sheet.Range("A:A"))
  
    If lr = 1 Then lr = 2
    
    Dim MyArray
    MyArray = my_sheet.Range("A2:E" & lr)
    Me.ListBox1.List = MyArray
    Me.ListBox1.TopIndex = 0
 
  
     
 '======================================================
 
 
'=========== Worksheet_Stats ===========

Me.lbl_Total_Worksheet.Caption = ActiveWorkbook.Worksheets.Count
Me.lbl_Visible_Worksheet.Caption = visble_worksheets
Me.lbl_Hidden_Worksheet.Caption = hidden_worksheets
Me.lbl_Very_hidden_Worksheet.Caption = Very_hidden_worksheets

End Sub
  
Private Sub btn_Add_New_Click()
 
 On Error Resume Next
 
'Check is workbook is protected

If ActiveWorkbook.ProtectStructure = True Or ActiveWorkbook.ProtectWindows = True Then
    MsgBox "Workbook is protected. Please unprotect it first", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If
 
 
Dim Worksheet_Count As Integer
Worksheet_Count = Application.InputBox("Please enter worksheet Count. Maximum can be " & 256 - ActiveWorkbook.Sheets.Count, "Worksheet Count", , , , , , 1)

On Error Resume Next
If (Worksheet_Count + ActiveWorkbook.Sheets.Count) > 256 Then
    MsgBox "Maximum limit exceeded", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If

ActiveWorkbook.Sheets.Add After:=ActiveSheet, Count:=Worksheet_Count

On Error GoTo 0

Call worksheet_status(Me.txt_Search.Value)

End Sub

Private Sub btn_Ascending_Click()

On Error Resume Next


'Check is workbook is protected

If ActiveWorkbook.ProtectStructure = True Or ActiveWorkbook.ProtectWindows = True Then
    MsgBox "Workbook is protected. Please unprotect it first", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If
 
Call worksheet_status(Me.txt_Search.Value)
 
Dim sh As Worksheet
Set sh = ThisWorkbook.Sheets("Worksheet_Manager_Support")

If Application.WorksheetFunction.CountA(sh.Range("A:A")) > 1 Then
    sh.UsedRange.Sort key1:=sh.Range("A1"), order1:=xlAscending, Header:=xlYes
    
    Dim i As Integer
    For i = 2 To Application.WorksheetFunction.CountA(sh.Range("A:A"))
        
        If ActiveWorkbook.Sheets(sh.Range("A" & i).Value).Visible = xlSheetVeryHidden Then
            ActiveWorkbook.Sheets(sh.Range("A" & i).Value).Visible = xlSheetVisible
            ActiveWorkbook.Sheets(sh.Range("A" & i).Value).Move ActiveWorkbook.Sheets(i - 1)
            ActiveWorkbook.Sheets(sh.Range("A" & i).Value).Visible = xlSheetVeryHidden
        Else
            ActiveWorkbook.Sheets(sh.Range("A" & i).Value).Move ActiveWorkbook.Sheets(i - 1)
        End If
        
    
    Next i
     
     
    Call worksheet_status(Me.txt_Search.Value)

End If





End Sub

Private Sub btn_Change_Tab_Color_Click()
' Validation
If Check_Selection <> "OK" Then
    MsgBox Check_Selection, vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If

myform.Show False

End Sub

Private Sub Btn_Consolidate_Click()
  
  On Error Resume Next
  
'Check is workbook is protected

If ActiveWorkbook.ProtectStructure = True Or ActiveWorkbook.ProtectWindows = True Then
    MsgBox "Workbook is protected. Please unprotect it first", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If
 
' Validation
If Check_Selection <> "OK" Then
    MsgBox Check_Selection, vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If

'check selected sheets should not be less then 2
 
Dim n, i As Long
n = 0

For i = 0 To Me.ListBox1.ListCount - 1
    If Me.ListBox1.Selected(i) = True Then n = n + 1
Next i

If n < 2 Then
    MsgBox "Minimum 2 worksheet should be selected to consolidate", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If


Dim pk As Integer
pk = MsgBox("Does your data have headers", vbQuestion + vbYesNo, "WWW.PK-AnExcelExpert.Com")


Dim dsh As Worksheet
Dim sh As Worksheet

Set dsh = ActiveWorkbook.Sheets.Add(before:=ActiveWorkbook.Sheets(1))


Dim lr As Long
Dim Source_Column As Integer
Source_Column = 0
For i = 0 To Me.ListBox1.ListCount - 1
    If Me.ListBox1.Selected(i) = True Then
    Set sh = ActiveWorkbook.Sheets(Me.ListBox1.List(i, 0))
    lr = dsh.Range("A" & Application.Rows.Count).End(xlUp).Row + 1
    sh.UsedRange.Copy
    dsh.Range("A" & lr).PasteSpecial xlPasteFormulas
    dsh.Range("A" & lr).PasteSpecial xlPasteFormats
    
    If Source_Column = 0 Then Source_Column = sh.UsedRange.Columns(sh.UsedRange.Columns.Count + 1).Column
    dsh.Range(dsh.Cells(lr, Source_Column), dsh.Cells(dsh.Range("A" & Application.Rows.Count).End(xlUp).Row, Source_Column)).Value = sh.Name
    dsh.Cells(2, Source_Column).Value = "Source Worksheet"
    dsh.Cells(2, Source_Column).Interior.ColorIndex = 15
    dsh.Cells(2, Source_Column).Font.Bold = True
    End If
Next i
 
dsh.Range("1:1").Delete
 
If Application.CountA(dsh.Range("A:A")) > 0 Then
        With dsh.UsedRange
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlJustify
            .EntireRow.RowHeight = 13
            .EntireColumn.ColumnWidth = 15
            .Font.Size = 9
            .Font.Name = "Calibri"
            .Borders.LineStyle = xlHairline
        End With
    
    If pk = vbYes Then
            dsh.UsedRange.AutoFilter 1, dsh.Range("A1").Value
            dsh.Range("A2:A" & Application.Rows.Count).SpecialCells(xlCellTypeVisible).EntireRow.Delete
            dsh.AutoFilterMode = False
    End If

End If

dsh.Name = "Consolidated Data"

ActiveWindow.DisplayGridlines = False

Call worksheet_status(Me.txt_Search.Value)

End Sub

Private Sub btn_Content_Table_Click()

On Error Resume Next

'Check is workbook is protected

If ActiveWorkbook.ProtectStructure = True Or ActiveWorkbook.ProtectWindows = True Then
    MsgBox "Workbook is protected. Please unprotect it first", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If

Dim sh As Worksheet
Set sh = ActiveWorkbook.Sheets.Add(before:=ActiveWorkbook.Sheets(1))

sh.Range("A1").Value = "Table of Contents"
sh.Range("A2").Value = "S.No."
sh.Range("B2").Value = "Worksheet"

Dim lr As Integer

Dim i As Integer

For i = 2 To ActiveWorkbook.Worksheets.Count
    If ActiveWorkbook.Worksheets(i).Visible = xlSheetVisible Then
        lr = sh.Range("A" & Application.Rows.Count).End(xlUp).Row
        sh.Range("A" & lr + 1).Value = lr - 1
        sh.Range("B" & lr + 1).Value = ActiveWorkbook.Sheets(i).Name
        sh.Hyperlinks.Add Anchor:=sh.Range("B" & lr + 1), Address:="", SubAddress:="'" & ActiveWorkbook.Sheets(i).Name & "'!A1", TextToDisplay:=ActiveWorkbook.Sheets(i).Name
    End If
Next i

ActiveWindow.DisplayGridlines = False

sh.Range("A:A").ColumnWidth = 7
sh.Range("B:B").ColumnWidth = 30

With sh.Range("A1:B1")
    .Merge
    .HorizontalAlignment = xlCenter
    .VerticalAlignment = xlCenter
    .Font.Size = 12
    .Font.Bold = True
End With

With sh.Range("A2:B" & i)
    .HorizontalAlignment = xlLeft
    .VerticalAlignment = xlCenter
    .Font.Size = 9
End With

  sh.Range("A2:B2").Interior.ColorIndex = 15
  
  On Error Resume Next
  sh.Name = "Table of Contents"
  On Error GoTo 0
  
  Call worksheet_status(Me.txt_Search.Value)

End Sub

Private Sub btn_Copy_to_New_Workbook_Click()

On Error Resume Next

'Check is workbook is protected
 
If ActiveWorkbook.ProtectStructure = True Or ActiveWorkbook.ProtectWindows = True Then
    MsgBox "Workbook is protected. Please unprotect it first", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If
 
' Validation
If Check_Selection <> "OK" Then
    MsgBox Check_Selection, vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If

Dim Selected_Sheet As String
Dim sh As Worksheet
Dim i As Integer

For i = Me.ListBox1.ListCount - 1 To 0 Step -1
    If Me.ListBox1.Selected(i) = True Then
        Set sh = ActiveWorkbook.Sheets(Me.ListBox1.List(i, 0))
        'If sh.Visible = xlSheetVeryHidden Then
            sh.Visible = xlSheetVisible
        'End If

        If Selected_Sheet = "" Then  '' Get selected Sheet name
            Selected_Sheet = Me.ListBox1.List(i, 0)
        Else
            Selected_Sheet = Selected_Sheet & "*" & Me.ListBox1.List(i, 0)
        End If

    End If
Next i
  

Dim n As Integer
Dim arr() As String
arr() = VBA.Split(Selected_Sheet, "*")
 
Dim wb As Workbook
Set wb = ActiveWorkbook

ActiveWorkbook.Sheets(arr()).Copy

wb.Activate
Call worksheet_status(Me.txt_Search.Value)

End Sub

Private Sub btn_Delete_Click()
 
On Error Resume Next
 
Application.DisplayAlerts = False
  
  
'Check is workbook is protected

If ActiveWorkbook.ProtectStructure = True Or ActiveWorkbook.ProtectWindows = True Then
    MsgBox "Workbook is protected. Please unprotect it first", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If
 
' Validation
If Check_Selection <> "OK" Then
    MsgBox Check_Selection, vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If

'===========================================================================

Dim pk As Integer

pk = MsgBox("Do you want to delete selected worksheet(s)?", vbYesNo + vbQuestion, "WWW.PK-AnExcelExpert.Com")

If pk = 7 Then Exit Sub
 
Dim i As Integer
For i = 0 To Me.ListBox1.ListCount - 1
    If Me.ListBox1.Selected(i) = True Then
    ActiveWorkbook.Sheets(Me.ListBox1.List(i, 0)).Visible = xlSheetVisible
    ActiveWorkbook.Sheets(Me.ListBox1.List(i, 0)).Delete
    End If
Next i
  
Call worksheet_status(Me.txt_Search.Value)

End Sub
 
 

Private Sub btn_Descending_Click()

'Check is workbook is protected

On Error Resume Next

If ActiveWorkbook.ProtectStructure = True Or ActiveWorkbook.ProtectWindows = True Then
    MsgBox "Workbook is protected. Please unprotect it first", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If
 
Call worksheet_status(Me.txt_Search.Value)
 
Dim sh As Worksheet
Set sh = ThisWorkbook.Sheets("Worksheet_Manager_Support")

If Application.WorksheetFunction.CountA(sh.Range("A:A")) > 1 Then
    sh.UsedRange.Sort key1:=sh.Range("A1"), order1:=xlDescending, Header:=xlYes
    
    Dim i As Integer
    For i = 2 To Application.WorksheetFunction.CountA(sh.Range("A:A"))
        
        If ActiveWorkbook.Sheets(sh.Range("A" & i).Value).Visible = xlSheetVeryHidden Then
            ActiveWorkbook.Sheets(sh.Range("A" & i).Value).Visible = xlSheetVisible
            ActiveWorkbook.Sheets(sh.Range("A" & i).Value).Move ActiveWorkbook.Sheets(i - 1)
            ActiveWorkbook.Sheets(sh.Range("A" & i).Value).Visible = xlSheetVeryHidden
        Else
            ActiveWorkbook.Sheets(sh.Range("A" & i).Value).Move ActiveWorkbook.Sheets(i - 1)
        End If
        
    
    Next i
     
     
    Call worksheet_status(Me.txt_Search.Value)

End If
 

End Sub

Private Sub btn_Email_Click()
 
Application.DisplayAlerts = False
 
  On Error Resume Next
'Check is workbook is protected

If ActiveWorkbook.ProtectStructure = True Or ActiveWorkbook.ProtectWindows = True Then
    MsgBox "Workbook is protected. Please unprotect it first", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If
 
' Validation
If Check_Selection <> "OK" Then
    MsgBox Check_Selection, vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If

Dim Selected_Sheet As String
Dim sh As Worksheet
Dim i As Integer



For i = Me.ListBox1.ListCount - 1 To 0 Step -1
    If Me.ListBox1.Selected(i) = True Then
        Set sh = ActiveWorkbook.Sheets(Me.ListBox1.List(i, 0))
        
        'If sh.Visible = xlSheetVeryHidden Then
            sh.Visible = xlSheetVisible
        'End If

        If Selected_Sheet = "" Then  '' Get selected Sheet name
            Selected_Sheet = Me.ListBox1.List(i, 0)
        Else
            Selected_Sheet = Selected_Sheet & "*" & Me.ListBox1.List(i, 0)
        End If
    End If
Next i
  

Dim n As Integer
Dim arr() As String
arr() = VBA.Split(Selected_Sheet, "*")
 
Dim wb As Workbook
Set wb = ActiveWorkbook

ActiveWorkbook.Sheets(arr()).Copy

Dim File_Path As String

Set wb = ActiveWorkbook
wb.SaveAs VBA.Environ("Temp") & Application.PathSeparator & wb.Name
File_Path = wb.FullName
 
    Dim OutApp As Object
    Dim OutMail As Object
    
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)

    On Error Resume Next
    With OutMail
        .attachments.Add File_Path
        .Display
    End With
    On Error GoTo 0
 
    Set OutMail = Nothing
    Set OutApp = Nothing
 
 wb.Close False
 
 VBA.Kill (File_Path)
 

End Sub

Private Sub btn_Go_To_Click()

'''On Error GoTo err_msg
 
 On Error Resume Next
 
' Validation
If Check_Selection <> "OK" Then
    MsgBox Check_Selection, vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If

Dim i As Integer
For i = 0 To Me.ListBox1.ListCount - 1
    If Me.ListBox1.Selected(i) = True Then ActiveWorkbook.Sheets(Me.ListBox1.List(i, 0)).Activate
Next i
 
       
 
End Sub

Private Sub btn_GoTo_First_Click()

On Error Resume Next

 If ActiveWorkbook.Sheets.Count = 1 Then Exit Sub
Dim i As Integer

For i = 1 To ActiveWorkbook.Sheets.Count
    If ActiveWorkbook.Sheets(i).Visible = xlSheetVisible Then
       ActiveWorkbook.Sheets(i).Activate
       Exit For
    End If
Next i

End Sub

Private Sub btn_GoTo_Last_Click()

On Error Resume Next

If ActiveWorkbook.Sheets.Count = 1 Then Exit Sub
Dim i As Integer

For i = ActiveWorkbook.Sheets.Count To 1 Step -1
    If ActiveWorkbook.Sheets(i).Visible = xlSheetVisible Then
       ActiveWorkbook.Sheets(i).Activate
       Exit For
    End If
Next i


End Sub

Private Sub btn_Goto_Next_Click()

On Error Resume Next

If ActiveWorkbook.Sheets.Count = 1 Then Exit Sub

Dim i As Integer
Dim my_Index As Integer
my_Index = ActiveSheet.Index + 1

For i = my_Index To ActiveWorkbook.Sheets.Count
    If ActiveWorkbook.Sheets(i).Visible = xlSheetVisible Then
       ActiveWorkbook.Sheets(i).Activate
       Exit For
    End If
Next i

End Sub

Private Sub btn_GoTo_Previous_Click()
    
   On Error Resume Next
    
If ActiveWorkbook.Sheets.Count = 1 Then Exit Sub
    Dim i As Integer
    Dim my_Index As Integer
    my_Index = ActiveSheet.Index - 1
    
    For i = my_Index To 1 Step -1
        If ActiveWorkbook.Sheets(i).Visible = xlSheetVisible Then
           ActiveWorkbook.Sheets(i).Activate
           Exit For
        End If
    Next i
End Sub

Private Sub Btn_Hidden_Click()

On Error Resume Next

'''On Error GoTo err_msg
 
'Check is workbook is protected

If ActiveWorkbook.ProtectStructure = True Or ActiveWorkbook.ProtectWindows = True Then
    MsgBox "Workbook is protected. Please unprotect it first", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If
 
' Validation
If Check_Selection <> "OK" Then
    MsgBox Check_Selection, vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If

'===========================================================================
Dim i As Integer
For i = 0 To Me.ListBox1.ListCount - 1
    If Me.ListBox1.Selected(i) = True Then ActiveWorkbook.Sheets(Me.ListBox1.List(i, 0)).Visible = xlSheetHidden
Next i
 
Call worksheet_status(Me.txt_Search.Value)

 
End Sub

Private Sub btn_move_Down_Click()
On Error Resume Next
'Check is workbook is protected

If ActiveWorkbook.ProtectStructure = True Or ActiveWorkbook.ProtectWindows = True Then
    MsgBox "Workbook is protected. Please unprotect it first", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If
 
' Validation
If Check_Selection <> "OK" Then
    MsgBox Check_Selection, vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If

'===========================================================================
Dim sh As Worksheet
Dim i As Integer
Dim sheet_index As Integer
Dim Selected_Sheet As String
  
For i = Me.ListBox1.ListCount - 1 To 0 Step -1
    If Me.ListBox1.Selected(i) = True Then
        Set sh = ActiveWorkbook.Sheets(Me.ListBox1.List(i, 0))
        sheet_index = VBA.IIf(sh.Index = ActiveWorkbook.Sheets.Count, ActiveWorkbook.Sheets.Count - 1, sh.Index)
                
        If sh.Visible = xlSheetVeryHidden Then
            sh.Visible = xlSheetVisible
            sh.Move After:=ActiveWorkbook.Sheets(sheet_index + 1)
            sh.Visible = xlSheetVeryHidden
        Else
            sh.Move After:=ActiveWorkbook.Sheets(sheet_index + 1)
        End If
        
        If Selected_Sheet = "" Then  '' Get selected Sheet name
            Selected_Sheet = Me.ListBox1.List(i, 0)
        Else
            Selected_Sheet = Selected_Sheet & "*" & Me.ListBox1.List(i, 0)
        End If
        
    End If
Next i
 
 
Call worksheet_status(Me.txt_Search.Value)

Dim n As Integer
Dim arr() As String
arr() = VBA.Split(Selected_Sheet, "*")

For i = 0 To Me.ListBox1.ListCount - 1
        For n = LBound(arr) To UBound(arr)
            If Me.ListBox1.List(i, 0) = arr(n) Then
                Me.ListBox1.Selected(i) = True
            End If
        Next n
Next i



End Sub

Private Sub btn_Move_To_new_workbook_Click()
'Check is workbook is protected
On Error Resume Next

If ActiveWorkbook.ProtectStructure = True Or ActiveWorkbook.ProtectWindows = True Then
    MsgBox "Workbook is protected. Please unprotect it first", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If
 
' Validation
If Check_Selection <> "OK" Then
    MsgBox Check_Selection, vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If

Dim Selected_Sheet As String
Dim sh As Worksheet
Dim i As Integer

For i = Me.ListBox1.ListCount - 1 To 0 Step -1
    If Me.ListBox1.Selected(i) = True Then
        Set sh = ActiveWorkbook.Sheets(Me.ListBox1.List(i, 0))
        'If sh.Visible = xlSheetVeryHidden Then
            sh.Visible = xlSheetVisible
        'End If

        If Selected_Sheet = "" Then  '' Get selected Sheet name
            Selected_Sheet = Me.ListBox1.List(i, 0)
        Else
            Selected_Sheet = Selected_Sheet & "*" & Me.ListBox1.List(i, 0)
        End If
    End If
Next i
  

Dim n As Integer
Dim arr() As String
arr() = VBA.Split(Selected_Sheet, "*")
 
Dim wb As Workbook
Set wb = ActiveWorkbook

ActiveWorkbook.Sheets(arr()).Move

wb.Activate
Call worksheet_status(Me.txt_Search.Value)

End Sub

Private Sub btn_move_up_Click()

'Check is workbook is protected
On Error Resume Next
If ActiveWorkbook.ProtectStructure = True Or ActiveWorkbook.ProtectWindows = True Then
    MsgBox "Workbook is protected. Please unprotect it first", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If
 
' Validation
If Check_Selection <> "OK" Then
    MsgBox Check_Selection, vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If

'===========================================================================
Dim sh As Worksheet
Dim i As Integer
Dim sheet_index As Integer
Dim Selected_Sheet As String
  

For i = 0 To Me.ListBox1.ListCount - 1
    If Me.ListBox1.Selected(i) = True Then
        Set sh = ActiveWorkbook.Sheets(Me.ListBox1.List(i, 0))
        sheet_index = VBA.IIf(sh.Index = 1, 2, sh.Index)
                 
        If sh.Visible = xlSheetVeryHidden Then
            sh.Visible = xlSheetVisible
            sh.Move before:=ActiveWorkbook.Sheets(sheet_index - 1)
            sh.Visible = xlSheetVeryHidden
        Else
            sh.Move before:=ActiveWorkbook.Sheets(sheet_index - 1)
        End If
        
        If Selected_Sheet = "" Then  '' Get selected Sheet name
            Selected_Sheet = Me.ListBox1.List(i, 0)
        Else
            Selected_Sheet = Selected_Sheet & "*" & Me.ListBox1.List(i, 0)
        End If
        
    End If
Next i
 
 
Call worksheet_status(Me.txt_Search.Value)

Dim n As Integer
Dim arr() As String
arr() = VBA.Split(Selected_Sheet, "*")

For i = 0 To Me.ListBox1.ListCount - 1
        For n = LBound(arr) To UBound(arr)
            If Me.ListBox1.List(i, 0) = arr(n) Then
                Me.ListBox1.Selected(i) = True
            End If
        Next n
Next i





End Sub

Private Sub btn_Rename_Click()

'Check is workbook is protected
On Error Resume Next
If ActiveWorkbook.ProtectStructure = True Or ActiveWorkbook.ProtectWindows = True Then
    MsgBox "Workbook is protected. Please unprotect it first", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If
 
' Validation
If Check_Selection <> "OK" Then
    MsgBox Check_Selection, vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If
 
 
Dim pk As Integer

pk = MsgBox("Do you want to rename '" & Me.ListBox1.List(Me.ListBox1.ListIndex, 0) & "'", vbYesNo + vbQuestion, "WWW.PK-AnExcelExpert.Com")

If pk = 7 Then Exit Sub

Dim New_Name As String
New_Name = VBA.InputBox("Please Enter the New Worksheet Name", "New Name")

If New_Name = "" Then Exit Sub

If IsValidSheetName(New_Name) = False Then
     MsgBox "Invalid Name", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If



Dim sh As Worksheet

On Error Resume Next
Set sh = ActiveWorkbook.Sheets(New_Name)
On Error GoTo 0

If sh Is Nothing Then
    Set sh = ActiveWorkbook.Sheets(Me.ListBox1.List(Me.ListBox1.ListIndex, 0))
    sh.Name = New_Name
Else
    MsgBox New_Name & " is already available in workbook.", vbInformation, "WWW.PK-AnExcelExpert.Com"
End If

Call worksheet_status(Me.txt_Search.Value)

End Sub

Private Sub btn_Search_Click()
    Call worksheet_status(Me.txt_Search.Value)
End Sub

Private Sub btn_Very_Hidden_Click()
'''On Error GoTo err_msg
 On Error Resume Next
'Check is workbook is protected

If ActiveWorkbook.ProtectStructure = True Or ActiveWorkbook.ProtectWindows = True Then
    MsgBox "Workbook is protected. Please unprotect it first", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If
 
' Validation
If Check_Selection <> "OK" Then
    MsgBox Check_Selection, vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If

'===========================================================================
 
Dim i As Integer
 
For i = 0 To Me.ListBox1.ListCount - 1
    If Me.ListBox1.Selected(i) = True Then ActiveWorkbook.Sheets(Me.ListBox1.List(i, 0)).Visible = xlSheetVeryHidden
Next i
 
 Call worksheet_status(Me.txt_Search.Value)

 
End Sub

Private Sub Btn_Visible_Click()
'''On Error GoTo err_msg
 On Error Resume Next
'Check is workbook is protected

If ActiveWorkbook.ProtectStructure = True Or ActiveWorkbook.ProtectWindows = True Then
    MsgBox "Workbook is protected. Please unprotect it first", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If
 
' Validation
If Check_Selection <> "OK" Then
    MsgBox Check_Selection, vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If

'===========================================================================

Dim i As Integer
 
For i = 0 To Me.ListBox1.ListCount - 1
    If Me.ListBox1.Selected(i) = True Then ActiveWorkbook.Sheets(Me.ListBox1.List(i, 0)).Visible = xlSheetVisible
Next i
 
Call worksheet_status(Me.txt_Search.Value)

 
 
End Sub
  
 

Private Sub ComboBox1_Change()
On Error Resume Next
If Me.ComboBox1.Value <> "" Then Call worksheet_status(Me.txt_Search.Value)

End Sub

Private Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    
  On Error Resume Next
     
    'Check is workbook is protected
    
    ' Validation
    If Check_Selection <> "OK" Then
        MsgBox Check_Selection, vbCritical, "WWW.PK-AnExcelExpert.Com"
        Exit Sub
    End If
    
    Dim List_Index As Integer
    List_Index = Me.ListBox1.ListIndex
     
    If ActiveWorkbook.Sheets(Me.ListBox1.List(Me.ListBox1.ListIndex, 0)).Visible = xlSheetVeryHidden Or ActiveWorkbook.Sheets(Me.ListBox1.List(Me.ListBox1.ListIndex, 0)).Visible = xlSheetHidden Then
        If ActiveWorkbook.ProtectStructure = True Or ActiveWorkbook.ProtectWindows = True Then
            MsgBox "Workbook is protected. Please unprotect it first", vbCritical, "WWW.PK-AnExcelExpert.Com"
            Exit Sub
        End If
    
    ActiveWorkbook.Sheets(Me.ListBox1.List(Me.ListBox1.ListIndex, 0)).Visible = xlSheetVisible
    
    End If
         
    ActiveWorkbook.Sheets(Me.ListBox1.List(Me.ListBox1.ListIndex, 0)).Activate
    
    Call worksheet_status(Me.txt_Search.Value)

    Me.ListBox1.Selected(List_Index) = True
    


End Sub

Private Sub txt_Search_Change()
On Error Resume Next
    Call worksheet_status(Me.txt_Search.Value)
End Sub

Private Sub UserForm_Activate()
On Error Resume Next
    With Me.ComboBox1
        .Clear
        .AddItem "ALL"
        .AddItem "Visible"
        .AddItem "Hidden"
        .AddItem "Very Hidden"
        .Value = "ALL"
    End With
    
    Call worksheet_status(Me.txt_Search.Value)
End Sub
 
Function Check_Selection() As String
On Error Resume Next
Dim n, i As Long
n = 0

For i = 0 To Me.ListBox1.ListCount - 1
    If Me.ListBox1.Selected(i) = True Then n = n + 1
Next i

If n = 0 Then
    Check_Selection = "Please select a worksheet"
    Exit Function
End If


If Me.ListBox1.List(Me.ListBox1.ListIndex, 0) = "" Then
    Check_Selection = "No Worksheet Available"
    Exit Function
End If
 
Check_Selection = "OK"


End Function
 
Private Sub UserForm_Click()
 Call worksheet_status(Me.txt_Search.Value)
End Sub

Private Sub FillListBoxFromOffsetRange()
On Error Resume Next
    Dim arrData     As Variant

    Dim intRow      As Integer
    Dim intCol      As Integer
    Dim strRowData  As String

    With ListBox1
        .Clear              'Make sure the Listbox is empty
        .ColumnCount = 5    'Set number of columns

        ' In order to access Workbook ranges need to use Application Object
        arrData = Application.Range("DataAccess")

        For intRow = LBound(arrData, 1) To UBound(arrData, 1)

            ' Process first column of new row
            intCol = 1
            strRowData = arrData(intRow, intCol)
            .AddItem strRowData ' Add the first Column of the row

            ' Append remaining columns to end of row
            For intCol = LBound(arrData, 2) + 1 To UBound(arrData, 2)
                strRowData = arrData(intRow, intCol)
                ' List rows have zero-based index
                .List(intRow - 1, intCol) = strRowData
            Next intCol

        Next intRow
    End With

End Sub
Attribute VB_Name = "PKs_Function_Kit"
Option Explicit

 
 'Visit to learn more: "WWW.PK-AnExcelExpert.com"
 
Function PK_Unique_Count(criteria_Range As Range)

Application.Volatile

If (Application.CountA(criteria_Range) + Application.WorksheetFunction.CountBlank(criteria_Range)) > 100000 Then
    PK_Unique_Count = "Range over flow!!!"
    Exit Function
End If


    Dim n As Double
    Dim c As Range
    n = 0
    For Each c In criteria_Range
        If VBA.IsEmpty(c.Value) = False Then
            n = n + (1 / Application.WorksheetFunction.CountIf(criteria_Range, c.Value))
        End If
    Next

PK_Unique_Count = n


End Function

Function PK_Duplicate_Count(criteria_Range As Range)

Application.Volatile

If (Application.CountA(criteria_Range) + Application.WorksheetFunction.CountBlank(criteria_Range)) > 100000 Then
    PK_Duplicate_Count = "Range over flow!!!"
    Exit Function
End If


    Dim n As Double
    Dim c As Range
    n = 0
    For Each c In criteria_Range
        If VBA.IsEmpty(c.Value) = False Then
            n = n + (1 / Application.WorksheetFunction.CountIf(criteria_Range, c.Value))
        End If
    Next

PK_Duplicate_Count = Application.CountA(criteria_Range) - n


End Function

Function PK_Vlookup_By_Cell_background_Color(Lookup_Cell As Range, Table_Array As Range, Col_Num As Integer, Get_Last_Value As Boolean) As Variant

Application.Volatile

If (Application.CountA(Lookup_Cell) + Application.WorksheetFunction.CountBlank(Lookup_Cell)) > 100000 Then
    PK_Vlookup_By_Cell_background_Color = "Lookup Cell Range over flow!!!"
    Exit Function
End If

If (Application.CountA(Table_Array) + Application.WorksheetFunction.CountBlank(Table_Array)) > 100000 Then
    PK_Vlookup_By_Cell_background_Color = "Table Array range over flow!!!"
    Exit Function
End If


Dim r3 As Range
Dim i As Integer

i = 0

For Each r3 In Table_Array

    If r3.Interior.Color = Lookup_Cell.Interior.Color Then
        PK_Vlookup_By_Cell_background_Color = r3.Offset(0, Col_Num - 1).Value
        i = i + 1
        
        If Get_Last_Value = False Then Exit For
        
    End If

Next

If i = 0 Then PK_Vlookup_By_Cell_background_Color = "#N/A"


End Function


Function PK_Vlookup_By_Partial_Lookup_Value(lookup_value As Variant, Table_Array As Range, col_index_num As Integer, range_lookup As Boolean) As Variant

Application.Volatile

If VBA.IsError(Application.VLookup(lookup_value, Table_Array, col_index_num, range_lookup)) = False Then
    PK_Vlookup_By_Partial_Lookup_Value = Application.VLookup(lookup_value, Table_Array, col_index_num, range_lookup)
Else
    PK_Vlookup_By_Partial_Lookup_Value = Application.VLookup("*" & lookup_value & "*", Table_Array, col_index_num, range_lookup)
End If



End Function

Function PK_Count_By_Cell_background_Color(criteria_Range As Range, criteria_cell As Range)

Application.Volatile

If (Application.CountA(criteria_Range) + Application.WorksheetFunction.CountBlank(criteria_Range)) > 100000 Then
    PK_Count_By_Cell_background_Color = "Criteria Range over flow!!!"
    Exit Function
End If

If (Application.CountA(criteria_cell) + Application.WorksheetFunction.CountBlank(criteria_cell)) > 100000 Then
    PK_Count_By_Cell_background_Color = "Range over flow!!!"
    Exit Function
End If

Dim rng As Range

For Each rng In criteria_Range
    
    If rng.Interior.Color = criteria_cell.Interior.Color Then
        PK_Count_By_Cell_background_Color = PK_Count_By_Cell_background_Color + 1
    End If
    
Next

End Function

Function PK_Count_By_Case_Sensitive_Criteria(criteria_Range As Range, criteria As String)

Application.Volatile

If (Application.CountA(criteria_Range) + Application.WorksheetFunction.CountBlank(criteria_Range)) > 100000 Then
    PK_Count_By_Case_Sensitive_Criteria = "Range over flow!!!"
    Exit Function
End If
 
Dim rng As Range

For Each rng In criteria_Range

    If rng.Value = criteria Then
        PK_Count_By_Case_Sensitive_Criteria = PK_Count_By_Case_Sensitive_Criteria + 1
    End If

Next

End Function

Function PK_Count_Font_Bold_Cells(criteria_Range As Range)

    Application.Volatile
    
    If (Application.CountA(criteria_Range) + Application.WorksheetFunction.CountBlank(criteria_Range)) > 100000 Then
        PK_Count_Font_Bold_Cells = "Range over flow!!!"
    Exit Function
    End If
        
    Dim rng As Range
     
    For Each rng In criteria_Range
    
        If rng.Font.Bold = True Then
            PK_Count_Font_Bold_Cells = PK_Count_Font_Bold_Cells + 1
        End If
    
    Next

End Function

Function PK_Count_By_Partial_Value(criteria_Range As Range, criteria As String)

Application.Volatile
    
PK_Count_By_Partial_Value = Application.WorksheetFunction.CountIf(criteria_Range, "*" & criteria & "*")

End Function

Function PK_Text_Join(delimiter As String, ignore_empty As Boolean, text_range As Range)

Application.Volatile

    If (Application.CountA(text_range) + Application.WorksheetFunction.CountBlank(text_range)) > 100000 Then
        PK_Text_Join = "Range over flow!!!"
    Exit Function
    End If


Dim c As Range
Dim n As Long
n = 0

For Each c In text_range
    If ignore_empty = True Then
        If VBA.IsEmpty(c.Value) = False Then
            If n = 0 Then
                PK_Text_Join = c.Value
            Else
                PK_Text_Join = PK_Text_Join & delimiter & c.Value
            End If
            n = n + 1
        End If
        
        Else
        
        If n = 0 Then
            PK_Text_Join = c.Value
        Else
            PK_Text_Join = PK_Text_Join & delimiter & c.Value
        End If
    n = n + 1
    
    End If
Next

End Function

Function PK_Extract_Numbers(Alphanumeric_Text As String)
Application.Volatile

Dim i As Integer
PK_Extract_Numbers = ""

For i = 1 To VBA.Len(Alphanumeric_Text)


    If VBA.IsNumeric(VBA.Mid(Alphanumeric_Text, i, 1)) = True Then
        PK_Extract_Numbers = PK_Extract_Numbers & VBA.Mid(Alphanumeric_Text, i, 1)
    End If

Next i

End Function

Function PK_Extract_Text(Alphanumeric_Text As String) As String

Application.Volatile
Dim i As Integer
PK_Extract_Text = ""

For i = 1 To VBA.Len(Alphanumeric_Text)

    If VBA.IsNumeric(VBA.Mid(Alphanumeric_Text, i, 1)) = False Then
        PK_Extract_Text = PK_Extract_Text & VBA.Mid(Alphanumeric_Text, i, 1)
    End If

Next i

End Function

Function PK_Weighted_Average(Weight_Range As Range, Average_range As Range)


If (Application.CountA(Weight_Range) + Application.WorksheetFunction.CountBlank(Weight_Range)) <> (Application.CountA(Average_range) + Application.WorksheetFunction.CountBlank(Average_range)) Then
        PK_Weighted_Average = "Range Mismatched!!!"
    Exit Function
    End If

Application.Volatile
PK_Weighted_Average = Application.WorksheetFunction.SumProduct(Weight_Range, Average_range) / Application.WorksheetFunction.Sum(Weight_Range)

End Function

Function PK_Sum_Of_Digits(Whole_Number As String)

Application.Volatile
Dim i As Integer
PK_Sum_Of_Digits = 0

For i = 1 To VBA.Len(Whole_Number)
    
    If VBA.IsNumeric(VBA.Mid(Whole_Number, i, 1)) = True Then
        PK_Sum_Of_Digits = PK_Sum_Of_Digits + VBA.CInt(VBA.Mid(Whole_Number, i, 1))
    End If
    
Next i

End Function

Function PK_First_Name(Complete_Name As String) As String

Application.Volatile
Complete_Name = VBA.Trim(Complete_Name)
If VBA.IsError(Application.Find(" ", Complete_Name)) Then
    PK_First_Name = Complete_Name
Else
    PK_First_Name = VBA.Left(Complete_Name, Application.Find(" ", Complete_Name) - 1)
End If


End Function

Function PK_Middle_Name(Complete_Name As String) As String

Application.Volatile
Complete_Name = VBA.Trim(Complete_Name)

If VBA.IsError(Application.Find(" ", Complete_Name)) = True Then
    PK_Middle_Name = ""
ElseIf VBA.IsError(Application.Find(" ", Complete_Name, Application.Find(" ", Complete_Name, 1) + 1)) Then
    PK_Middle_Name = ""
Else
    PK_Middle_Name = VBA.Trim(VBA.Mid(Complete_Name, Application.Find(" ", Complete_Name, 1) + 1, Application.Find(" ", Complete_Name, Application.Find(" ", Complete_Name, 1) + 1) - Application.Find(" ", Complete_Name, 1)))
End If

End Function

Function PK_Last_Name(Complete_Name As String) As String

Complete_Name = VBA.Trim(Complete_Name)
Application.Volatile

If VBA.IsError(Application.Find(" ", Complete_Name)) = True Then
    PK_Last_Name = ""
Else
    PK_Last_Name = VBA.Trim(VBA.Right(Application.Substitute(VBA.Trim(Complete_Name), " ", Application.Rept(" ", 255)), 255))
End If

End Function

Function PK_Ordinal_Date_Format(Input_Date As Date)
Application.Volatile

Dim d As Integer
Dim Ordinal_Value As String

If VBA.IsDate(Input_Date) = True Then
    d = VBA.Day(Input_Date)
    
    Select Case d
    
    Case 1, 21, 31
    Ordinal_Value = "st"
    
    Case 2, 22
    Ordinal_Value = "nd"
    
    Case 3, 23
    Ordinal_Value = "rd"
    
    Case Else
    Ordinal_Value = "th"
    
    End Select
    
    PK_Ordinal_Date_Format = VBA.Format(Input_Date, "D") & Ordinal_Value & VBA.Format(Input_Date, " MMM, YYYY")

Else

PK_Ordinal_Date_Format = "Incorrect Input!!!"

End If

End Function


 

Attribute VB_Name = "Selection_Module"

Const msg_title = "WWW.PK-AnExcelExpert.Com"
 
Option Explicit

Sub Protect_Selected_Range(control As IRibbonControl)
On Error Resume Next

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If

Dim sh As Worksheet
Set sh = ActiveSheet

If sh.ProtectContents = True Then
    MsgBox "Worksheet is already Protected", vbCritical, msg_title
    Exit Sub
End If

Dim pwd As String
pwd = VBA.InputBox("Please input the Protection Password. You can keep the blank password also.", "Protection Password")

sh.Cells.Locked = False
Selection.FormulaHidden = True
Selection.Locked = True


sh.Protect pwd
 
MsgBox "Process Completed", vbInformation, msg_title
 
End Sub

Sub Protect_Other_Then_Selected_Range(control As IRibbonControl)

On Error Resume Next

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If

Dim sh As Worksheet
Set sh = ActiveSheet

If sh.ProtectContents = True Then
    MsgBox "Worksheet is already Protected", vbCritical, msg_title
    Exit Sub
End If

Dim pwd As String
pwd = VBA.InputBox("Please input the Protection Password. You can keep the blank password also.", "Protection Password")

sh.Cells.Locked = True
Selection.Locked = False
sh.Protect pwd
 
MsgBox "Process Completed", vbInformation, msg_title
 
End Sub

Sub Create_Names(control As IRibbonControl)
 
On Error Resume Next

If Selection Is Nothing Then
    MsgBox "No Selection Found", vbCritical, msg_title
    Exit Sub
End If

Dim rng As Range
Set rng = Selection

If rng.Rows.Count < 2 Then
    MsgBox "Atleast 2 rows to be selected", vbCritical, msg_title
    Exit Sub
End If


Dim new_range As Range
Dim Name_Count As Long
'Name_Count = 0

Dim i As Integer
Dim n As Long

For i = 1 To rng.Columns.Count
    For n = rng.Rows.Count To 1 Step -1
        If Cells(rng.Rows(n).Row, rng.Columns(i).Column).Value <> "" Then
            Set new_range = Range(Cells(rng.Rows(1).Row, rng.Columns(i).Column), Cells(rng.Rows(n).Row, rng.Columns(i).Column))
            If new_range.Rows.Count > 1 Then
                new_range.CreateNames Top:=True, Left:=False, Bottom:=False, Right:=False
                'Name_Count = Name_Count + 1
            End If
            Exit For
        End If
    Next n
Next i

MsgBox "Process Completed", vbInformation, msg_title
 
 
End Sub

Sub Select_Object(control As IRibbonControl)
 
 On Error Resume Next
 ActiveSheet.DrawingObjects.Visible = True
 ActiveSheet.DrawingObjects.Select
 
End Sub

Sub Highlight_Consecutive_Duplicates(control As IRibbonControl)
 On Error Resume Next
 
If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If
 
'''' Check Protection
If ActiveSheet.ProtectContents = True Then
    MsgBox "Worksheet is Protected", vbCritical, msg_title
    Exit Sub
End If
 
Dim First_Row As Long
Dim First_Column As Long
 
Dim cel As Range

For Each cel In Selection
    First_Row = cel.Row
    First_Column = cel.Column
    Exit For
Next

Dim str1, str2, str3 As String

Dim rng As Range
If First_Row = 1 Then
    First_Row = 2
    Set rng = Range(Cells(First_Row, First_Column), Selection(Selection.Count).Address)
Else
    Set rng = Selection
End If
 
str1 = VBA.Replace(Cells(First_Row - 1, First_Column).Address, "$", "")
str2 = VBA.Replace(Cells(First_Row, First_Column).Address, "$", "")
str3 = VBA.Replace(Cells(First_Row + 1, First_Column).Address, "$", "")
 
    rng.FormatConditions.Add Type:=xlExpression, Formula1:="=OR(" & str1 & "=" & str2 & "," & str2 & "=" & str3 & ")"

    rng.FormatConditions(rng.FormatConditions.Count).SetFirstPriority
    With rng.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 65535
        .TintAndShade = 0
    End With
    rng.FormatConditions(1).StopIfTrue = False

MsgBox "Process Completed", vbInformation, msg_title

End Sub


Sub Format_Data(control As IRibbonControl)
On Error Resume Next

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If


'''' Check Protection
If ActiveSheet.ProtectContents = True Then
    MsgBox "Worksheet is Protected", vbCritical, msg_title
    Exit Sub
End If

Dim rng As Range
Dim Header_confirmation As Integer
Header_confirmation = MsgBox("Is first row headers?", vbYesNo + vbQuestion)

 
With Selection
    .HorizontalAlignment = xlCenter
    .VerticalAlignment = xlCenter
    .Borders.LineStyle = xlHairline
    .Borders.Weight = xlThin
    .Borders.ColorIndex = 15
    .EntireRow.RowHeight = 15
    .EntireColumn.ColumnWidth = 15
    .Font.Name = "Calibri"
    .Font.Size = 10
    .Font.Italic = False
    .Font.Bold = False
    .Font.Underline = False
    .Interior.Color = xlNone
    .Font.ColorIndex = 1
End With

ActiveWindow.DisplayGridlines = False

If Header_confirmation = vbNo Then Exit Sub
   
   Dim cel As Range
   Dim c1, c2 As Integer
   Dim r As Long
    
   For Each cel In Selection
        c1 = cel.Column
        r = cel.Row
        Exit For
   Next
        
   c2 = Range(Selection(Selection.Count).Address).Column
    
  With Range(Cells(r, c1), Cells(r, c2))
        .Font.Bold = True
        .Interior.ColorIndex = 23
        .Font.ColorIndex = 2
        .Font.Size = 11
  End With
    
 MsgBox "Process Completed", vbInformation, msg_title
 
End Sub
  
Sub Delete_Blanks(control As IRibbonControl)

On Error Resume Next

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If

'''' Check Protection
If ActiveSheet.ProtectContents = True Then
    MsgBox "Worksheet is Protected", vbCritical, msg_title
    Exit Sub
End If

Dim rng As Range


Dim First_Row, First_Column As Long
Dim Last_Row, Last_Column As Long
 
For Each rng In Selection
    First_Row = rng.Row
    First_Column = rng.Column
    Exit For
Next

Last_Row = Range(Selection(Selection.Count).Address).Row
Last_Column = Range(Selection(Selection.Count).Address).Column

Dim r, c As Long

For r = Last_Row To First_Row Step -1
    For c = Last_Column To First_Column Step -1
        If Cells(r, c).Value = "" Or VBA.IsEmpty(Cells(r, c)) Then Cells(r, c).Delete Shift:=xlUp
    Next c
Next r
    
    MsgBox "Process Completed", vbInformation, msg_title
    
End Sub

Sub Count_Duplicats(control As IRibbonControl)
 On Error Resume Next
 
 If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If
 
 Dim dup_Count As Long
 
    Dim n As Double
    Dim c As Range
    n = 0
    For Each c In Selection
        If VBA.IsEmpty(c.Value) = False Then
            n = n + (1 / Application.WorksheetFunction.CountIf(Selection, c.Value))
        End If
    Next

dup_Count = Application.CountA(Selection) - n
 
 If dup_Count = 0 Then
    MsgBox "No Duplicate Found", vbInformation, msg_title
 Else
    MsgBox dup_Count & " Duplicate Found", vbInformation, msg_title
 End If
   
   
End Sub
 
Sub Highlight_Duplicates(control As IRibbonControl)

On Error Resume Next

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If


'''' Check Protection
If ActiveSheet.ProtectContents = True Then
    MsgBox "Worksheet is Protected", vbCritical, msg_title
    Exit Sub
End If

    Selection.FormatConditions.AddUniqueValues
    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
    Selection.FormatConditions(1).DupeUnique = xlDuplicate
    With Selection.FormatConditions(1).Interior
        .Color = vbYellow
    End With
     
    Selection.FormatConditions(1).StopIfTrue = False
    
    MsgBox "Process Completed", vbInformation, msg_title
    
End Sub


Sub Create_Folder(control As IRibbonControl)
On Error Resume Next

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If


Dim Parent_Folder As FileDialog
Set Parent_Folder = Application.FileDialog(msoFileDialogFolderPicker)
Parent_Folder.AllowMultiSelect = False
Parent_Folder.Show
 
If Parent_Folder.SelectedItems.Count = 0 Then Exit Sub

Dim rng As Range

On Error Resume Next

For Each rng In Selection
    VBA.MkDir (Parent_Folder.SelectedItems(1) & Application.PathSeparator & rng.Value)
Next

VBA.Shell "Explorer.exe " & Parent_Folder.SelectedItems(1)

On Error GoTo 0

MsgBox "Process Completed", vbInformation, msg_title


End Sub
  
Sub Create_File(control As IRibbonControl)

Application.DisplayAlerts = False
 
On Error Resume Next

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If


 Dim wb As Workbook
 Dim sh As Worksheet
 
 Dim myrang As Range
 Set myrang = Selection
 
Dim ash As Worksheet

Dim i As Integer
Set wb = Workbooks.Add
If wb.Sheets.Count > 1 Then
    For i = wb.Sheets.Count To 2 Step -1
        wb.Sheets(i).Delete
    Next i
End If

Set ash = wb.Sheets(1)
Dim nsh As Worksheet

Dim rng As Range

On Error Resume Next

For Each rng In myrang

    If IsValidSheetName(rng.Value) Then
    
        Set nsh = wb.Sheets(rng.Value)

        If nsh Is Nothing Then
            Set sh = wb.Sheets.Add(After:=wb.Sheets(wb.Sheets.Count))
            sh.Name = rng.Value
        End If
        
        Set nsh = Nothing
 
            
    End If
Next
wb.Sheets(1).Activate
ash.Delete

'On Error GoTo 0

MsgBox "Process Completed", vbInformation, msg_title

 
End Sub
 
Function IsValidSheetName(My_Sheet_Name As String) As Boolean
    On Error Resume Next
    
    IsValidSheetName = False
    If Len(My_Sheet_Name) = 0 Then Exit Function
    If Len(My_Sheet_Name) > 31 Then Exit Function

    Dim special_Char() As Variant
    special_Char = Array("/", "\", "[", "]", "*", "?", ":")
     
    Dim i As Integer
    For i = LBound(special_Char) To UBound(special_Char)
        If InStr(My_Sheet_Name, special_Char(i)) > 0 Then Exit Function
    Next i

    IsValidSheetName = True
    
End Function


Function RangetoHTML(rng As Range)
 On Error Resume Next
 
    Dim fso As Object
    Dim ts As Object
    Dim TempFile As String
    Dim TempWB As Workbook

    TempFile = Environ$("temp") & "\" & Format(Now, "dd-mm-yy h-mm-ss") & ".htm"

    'Copy the range and create a new workbook to past the data in
    rng.Copy
    Set TempWB = Workbooks.Add(1)
    With TempWB.Sheets(1)
        .Cells(1).PasteSpecial Paste:=8
        .Cells(1).PasteSpecial xlPasteValues, , False, False
        .Cells(1).PasteSpecial xlPasteFormats, , False, False
        .Cells(1).Select
        Application.CutCopyMode = False
        On Error Resume Next
        .DrawingObjects.Visible = True
        .DrawingObjects.Delete
        On Error GoTo 0
    End With

    'Publish the sheet to a htm file
    With TempWB.PublishObjects.Add( _
         SourceType:=xlSourceRange, _
         Filename:=TempFile, _
         Sheet:=TempWB.Sheets(1).Name, _
         Source:=TempWB.Sheets(1).UsedRange.Address, _
         HtmlType:=xlHtmlStatic)
        .Publish (True)
    End With

    'Read all data from the htm file into RangetoHTML
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.GetFile(TempFile).OpenAsTextStream(1, -2)
    RangetoHTML = ts.ReadAll
    ts.Close
    RangetoHTML = Replace(RangetoHTML, "align=center x:publishsource=", _
                          "align=left x:publishsource=")

    'Close TempWB
    TempWB.Close savechanges:=False

    'Delete the htm file we used in this function
    Kill TempFile

    Set ts = Nothing
    Set fso = Nothing
    Set TempWB = Nothing
End Function


Sub Add_Range_To_Mail_Body(control As IRibbonControl)

On Error Resume Next

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If

    Dim rng As Range

    Set rng = Nothing
    On Error Resume Next
  
    Set rng = Selection.SpecialCells(xlCellTypeVisible)
     
    On Error GoTo 0

    If rng Is Nothing Then
        MsgBox "Invalid selection", vbCritical, msg_title
        Exit Sub
    End If

    With Application
        .EnableEvents = False
        .ScreenUpdating = False
    End With

    Dim OutApp As Object
    Dim OutMail As Object
    
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)

    On Error Resume Next
    With OutMail
        .HTMLBody = "<br><br><br>" & RangetoHTML(rng)
        .Display
    End With
    On Error GoTo 0

    With Application
        .EnableEvents = True
        .ScreenUpdating = True
    End With

    Set OutMail = Nothing
    Set OutApp = Nothing
    
    'MsgBox "Process Completed", vbInformation, msg_title
    
End Sub

Sub Prevent_Duplicate(control As IRibbonControl)
On Error Resume Next

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If


'''' Check Protection
If ActiveSheet.ProtectContents = True Then
    MsgBox "Worksheet is Protected", vbCritical, msg_title
    Exit Sub
End If

 
 
With Selection.Validation
        .Delete
        .Add Type:=xlValidateCustom, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:="=Countif(" & Selection.Address & "," & VBA.Replace(ActiveCell.Address, "$", "") & ")<2"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Duplicate"
        .InputMessage = ""
        .ErrorMessage = "Duplicate Entry"
        .ShowInput = True
        .ShowError = True
    End With
    
MsgBox "Process Completed", vbInformation, msg_title

End Sub
 
 
Sub Show_Wroksheet_Manager(control As IRibbonControl)
    On Error Resume Next
    Frm_Sheet_Manager.Show False
End Sub

Sub Show_File_Manager(control As IRibbonControl)
    On Error Resume Next
    Frm_File_Manager.Show False
End Sub

Sub Convert_To_Date(control As IRibbonControl)
    On Error Resume Next
    
    'On Error Resume Next

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If

'''' Check Protection
If ActiveSheet.ProtectContents = True Then
    MsgBox "Worksheet is Protected", vbCritical, msg_title
    Exit Sub
End If

If Application.CountA(Selection) = 0 Then
    MsgBox "No value found", vbCritical, msg_title
    Exit Sub
End If

    frm_Format.Show False
End Sub
  
Sub Fill_Down_Blanks(control As IRibbonControl)
 
 On Error Resume Next
 
'On Error Resume Next

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If

'''' Check Protection
If ActiveSheet.ProtectContents = True Then
    MsgBox "Worksheet is Protected", vbCritical, msg_title
    Exit Sub
End If

Dim rng As Range
Selection.UnMerge
For Each rng In Selection
    If rng.Value = "" Then rng.FillDown
Next
 
 
MsgBox "Process Completed", vbInformation, msg_title
 
 
End Sub

Sub Text_to_formula(control As IRibbonControl)
On Error Resume Next

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If

'''' Check Protection
If ActiveSheet.ProtectContents = True Then
    MsgBox "Worksheet is Protected", vbCritical, msg_title
    Exit Sub
End If

Dim rng As Range
 
For Each rng In Selection
    If rng.HasFormula Then rng.Formula = "'" & rng.Formula
Next
 
MsgBox "Process Completed", vbInformation, msg_title
  
End Sub

Sub Formula_to_Text(control As IRibbonControl)

On Error Resume Next

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If

'''' Check Protection
If ActiveSheet.ProtectContents = True Then
    MsgBox "Worksheet is Protected", vbCritical, msg_title
    Exit Sub
End If

Dim rng As Range
   
For Each rng In Selection
    rng.TextToColumns rng, xlDelimited
Next
 
MsgBox "Process Completed", vbInformation, msg_title
  
End Sub
 
Sub Merge_Same_Cels(control As IRibbonControl)
On Error Resume Next
Application.DisplayAlerts = False

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If

'''' Check Protection
If ActiveSheet.ProtectContents = True Then
    MsgBox "Worksheet is Protected", vbCritical, msg_title
    Exit Sub
End If

Dim rng As Range
  
MergeAgain:
    For Each rng In Selection
        If rng.Value = rng.Offset(1, 0).Value And IsEmpty(rng) = False Then
            With Range(rng, rng.Offset(1, 0))
            .Merge
            .VerticalAlignment = xlCenter
            End With
            GoTo MergeAgain
        End If
    Next

MsgBox "Process Completed", vbInformation, msg_title

End Sub

Sub Fill_Random_Value(control As IRibbonControl)
'On Error Resume Next
Application.DisplayAlerts = False

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If

'''' Check Protection
If ActiveSheet.ProtectContents = True Then
    MsgBox "Worksheet is Protected", vbCritical, msg_title
    Exit Sub
End If

If Application.CountA(Selection) > 0 Then
    MsgBox "Selection should be blank", vbCritical, msg_title
    Exit Sub
End If
  
On Error Resume Next
  
Dim rng As Range
Dim new_range As Range
Dim random_Value
  
Dim pk As Integer
pk = MsgBox("Do you want take values from Excel sheet?", vbYesNo + vbQuestion, msg_title)


If pk = 6 Then
  Dim Random_Value_Range As Range
  Set Random_Value_Range = Application.InputBox("Please select range", "Range Selection", Type:=8)
  random_Value = ""
  
    For Each rng In Random_Value_Range
        If random_Value = "" Then
           random_Value = rng.Value
        Else
           random_Value = random_Value & "," & rng.Value
        End If
    Next
Else
    random_Value = VBA.InputBox("Please enter the comma saperated values", "Enter Value")
    If random_Value = "" Then Exit Sub
End If
    
If VBA.InStr(random_Value, ",") = 0 Then
    MsgBox "Random Value should be Comma Saperated", vbCritical, "WWW.PK-AnExcelExpert.Com"
    Exit Sub
End If


Dim arr
arr = VBA.Split(random_Value, ",")

Dim n As Integer

n = VBA.Len(random_Value) - VBA.Len(VBA.Replace(random_Value, ",", ""))
 
For Each rng In Selection
    rng.Value = arr(Application.WorksheetFunction.RandBetween(0, n))
Next
 
 MsgBox "Process Completed", vbInformation, msg_title

End Sub

Sub Make_Lower(control As IRibbonControl)
On Error Resume Next
Application.DisplayAlerts = False

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If

'''' Check Protection
If ActiveSheet.ProtectContents = True Then
    MsgBox "Worksheet is Protected", vbCritical, msg_title
    Exit Sub
End If

Dim rng As Range
 
For Each rng In Selection
    If rng.HasFormula = False Then
        rng.Value = VBA.LCase(rng.Value)
    End If
    
Next
 
MsgBox "Process Completed", vbInformation, msg_title

End Sub

Sub Make_Upper(control As IRibbonControl)
On Error Resume Next
Application.DisplayAlerts = False

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If

'''' Check Protection
If ActiveSheet.ProtectContents = True Then
    MsgBox "Worksheet is Protected", vbCritical, msg_title
    Exit Sub
End If

Dim rng As Range
 
For Each rng In Selection
    If rng.HasFormula = False Then
        rng.Value = VBA.UCase(rng.Value)
    End If
    
Next
 
MsgBox "Process Completed", vbInformation, msg_title

End Sub

Sub Make_Proper(control As IRibbonControl)
On Error Resume Next
Application.DisplayAlerts = False

If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If

'''' Check Protection
If ActiveSheet.ProtectContents = True Then
    MsgBox "Worksheet is Protected", vbCritical, msg_title
    Exit Sub
End If

Dim rng As Range
 
For Each rng In Selection
    If rng.HasFormula = False Then
        rng.Value = Application.WorksheetFunction.Proper(rng.Value)
    End If
Next
 
MsgBox "Process Completed", vbInformation, msg_title

End Sub

 
Sub Paste_Value(control As IRibbonControl)
On Error Resume Next
If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If

'''' Check Protection
If ActiveSheet.ProtectContents = True Then
    MsgBox "Worksheet is Protected", vbCritical, msg_title
    Exit Sub
End If

Dim rng As Range

On Error Resume Next

If Selection.SpecialCells(xlCellTypeVisible).Rows.Count = Selection.Rows.Count And Selection.SpecialCells(xlCellTypeVisible).Columns.Count = Selection.Columns.Count Then
    Selection.Value = Selection.Value
Else
  
For Each rng In Selection.SpecialCells(xlCellTypeVisible).SpecialCells(xlCellTypeFormulas)
    rng.Value = rng.Value
Next
 
End If

 
MsgBox "Process Completed", vbInformation, msg_title

End Sub


Sub Hightlight_Unmatched_Value(control As IRibbonControl)

On Error Resume Next
If Selection Is Nothing Then
    MsgBox "No selection found", vbCritical, msg_title
    Exit Sub
End If

'''' Check Protection
If ActiveSheet.ProtectContents = True Then
    MsgBox "Worksheet is Protected", vbCritical, msg_title
    Exit Sub
End If

Dim rng1 As Range
Dim rng2 As Range
Dim first_cell As String
Dim r As Range
 

Set rng1 = Selection
Set rng2 = Application.InputBox("Please select the range from where you want to match the value", "Second Range", Type:=8)

For Each r In rng1
    first_cell = VBA.Replace(r.Address, "$", "")
    Exit For
Next
 
rng1.FormatConditions.Add Type:=xlExpression, Formula1:="=AND(COUNTIF(" & rng2.Address(external:=True) & "," & first_cell & ")=0," & first_cell & "<>"""")"
 
    rng1.FormatConditions(rng1.FormatConditions.Count).SetFirstPriority
    With rng1.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 65535
        .TintAndShade = 0
    End With
    rng1.FormatConditions(1).StopIfTrue = False
 
MsgBox "Process Completed", vbInformation, msg_title


End Sub

Sub Align_Vertical(control As IRibbonControl)

On Error Resume Next

If VBA.TypeName(Selection) = "Range" Then
    MsgBox "Please select the objects", vbCritical, msg_title
    Exit Sub
End If
 
Dim Shape_Left As Long
Dim Shape_Top As Long
 
Dim Shape_Space As Long
Shape_Space = Application.InputBox("Please enter the space points", "Space in Points", 5, Type:=1)


Dim Shape_Counter As Integer
Shape_Counter = 1

Dim sp As Shape
 
For Each sp In Selection.ShapeRange
    
    If Shape_Counter = 1 Then
        
        Shape_Left = sp.Left
        Shape_Top = sp.Top + sp.Height + Shape_Space
    Else
        sp.Left = Shape_Left
        sp.Top = Shape_Top
    
        Shape_Left = sp.Left
        Shape_Top = sp.Top + sp.Height + Shape_Space
    End If
    
    Shape_Counter = Shape_Counter + 1
Next
 

End Sub

Sub Align_Horizontal(control As IRibbonControl)

On Error Resume Next

If VBA.TypeName(Selection) = "Range" Then
    MsgBox "Please select the objects", vbCritical, msg_title
    Exit Sub
End If

Dim Shape_Left As Long
Dim Shape_Top As Long
 
Dim Shape_Space As Long
Shape_Space = Application.InputBox("Please enter the space points", "Space in Points", 10, Type:=1)

Dim Shape_Counter As Integer
Shape_Counter = 1

Dim sp As Shape
 
For Each sp In Selection.ShapeRange
    
    If Shape_Counter = 1 Then
        
        Shape_Left = sp.Left + sp.Width + Shape_Space
        Shape_Top = sp.Top
    Else
        sp.Left = Shape_Left
        sp.Top = Shape_Top
    
        Shape_Left = sp.Left + sp.Width + Shape_Space
        Shape_Top = sp.Top
    End If
    
    Shape_Counter = Shape_Counter + 1
Next

 

End Sub

Sub Align_to_Horizontal_Grid(control As IRibbonControl)

On Error Resume Next

If VBA.TypeName(Selection) = "Range" Then
    MsgBox "Please select the objects", vbCritical, msg_title
    Exit Sub
End If

Dim Shape_Left As Long
Dim Shape_Top As Long
 
Dim Shape_Space As Long
Shape_Space = Application.InputBox("Please enter the space points", "Space in Points", 10, Type:=1)
 
Dim Row_Number As Long
Row_Number = Application.InputBox("Please enter the number of rows", "Number of Rows", 3, Type:=1)

Dim Shape_Counter As Integer
Shape_Counter = 1

Dim sp As Shape
 
For Each sp In Selection.ShapeRange
        
    If Shape_Counter = 1 Then
        
        Shape_Left = sp.Left
        Shape_Top = sp.Top + sp.Height + Shape_Space
    Else
        sp.Left = Shape_Left
        sp.Top = Shape_Top
    
    If VBA.Int(Shape_Counter / Row_Number) = Shape_Counter / Row_Number Then
        Shape_Left = sp.Left + sp.Width + Shape_Space
        Shape_Top = Selection.ShapeRange(1).Top
    Else
        
        Shape_Left = sp.Left
        Shape_Top = sp.Top + sp.Height + Shape_Space
    
    End If
        
    End If
    
    Shape_Counter = Shape_Counter + 1
Next

 

End Sub

Sub Align_to_Vertical_Grid(control As IRibbonControl)

On Error Resume Next

If VBA.TypeName(Selection) = "Range" Then
    MsgBox "Please select the objects", vbCritical, msg_title
    Exit Sub
End If

Dim Shape_Left As Long
Dim Shape_Top As Long
 
Dim Shape_Space As Long
Shape_Space = Application.InputBox("Please enter the space points", "Space in Points", 10, Type:=1)
 
Dim Col_Number As Long
Col_Number = Application.InputBox("Please enter the number of columns", "Number of Columns", 3, Type:=1)

Dim Shape_Counter As Integer
Shape_Counter = 1

Dim sp As Shape
 
For Each sp In Selection.ShapeRange
        
    If Shape_Counter = 1 Then
        
        Shape_Left = sp.Left + sp.Width + Shape_Space
        Shape_Top = sp.Top
    Else
        sp.Left = Shape_Left
        sp.Top = Shape_Top
    
    If VBA.Int(Shape_Counter / Col_Number) = Shape_Counter / Col_Number Then
    
        Shape_Left = Selection.ShapeRange(1).Left
        Shape_Top = sp.Top + sp.Height + Shape_Space
    Else
        
        Shape_Left = sp.Left + sp.Width + Shape_Space
        Shape_Top = sp.Top
    
    End If
        
    End If
    
    Shape_Counter = Shape_Counter + 1
Next

 

End Sub

Sub Hide_Shapes(control As IRibbonControl)

On Error Resume Next

If VBA.TypeName(Selection) = "Range" Then
    MsgBox "Please select the objects", vbCritical, msg_title
    Exit Sub
End If


Selection.ShapeRange.Visible = False

End Sub

Sub Show_Shapes(control As IRibbonControl)

On Error Resume Next
  
ActiveSheet.DrawingObjects.Visible = True

End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "TabBack_Class"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WithEvents AppEvent As Application
Attribute AppEvent.VB_VarHelpID = -1
Public SheetReference As String
Public WorkbookReference As String

Private Sub AppEvent_SheetDeactivate(ByVal sh As Object)
  
  On Error Resume Next
  WorkbookReference = sh.Parent.Name
  SheetReference = sh.Name
  
End Sub

Private Sub AppEvent_WorkbookDeactivate(ByVal wb As Workbook)
 
  On Error Resume Next
  WorkbookReference = wb.Name
  SheetReference = wb.ActiveSheet.Name
  
End Sub
Attribute VB_Name = "TabBack_Run_Module"
Dim TabTracker As New TabBack_Class

Sub TabBack_Run(Optional control As IRibbonControl)
  On Error Resume Next
  Set TabTracker.AppEvent = Application
 
  Call ToggleBack

End Sub

Sub ToggleBack()
  On Error Resume Next
  
With TabTracker
   
  Workbooks(.WorkbookReference).Worksheets(.SheetReference).Activate
   
End With

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
 

Private Sub Workbook_Open()
 
Call TabBack_Run

End Sub
Attribute VB_Name = "frm_Format"
Attribute VB_Base = "0{6E912C5A-B05F-4565-B435-635892456DB7}{0B432076-81AD-43FE-B084-6EE74B5DB570}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CommandButton1_Click()

On Error Resume Next

    Dim First_Row As Long
    Dim Last_Row As Long
     
    Dim cel As Range
    Dim rng As Range
    
    Dim i As Long
    Dim c As Integer
    'Set rng = Selection
     
    For Each cel In Selection  '' Set first row in selection
        First_Row = cel.Row
        Exit For
    Next
    
    For i = Selection.Rows.Count To 1 Step -1
        Last_Row = Selection.Rows(i).Row
        Exit For
    Next i
     
     
    For i = 1 To Selection.Columns.Count
        c = Selection.Columns(i).Column
        Range(Cells(First_Row, c), Cells(Last_Row, c)).TextToColumns Destination:=Cells(First_Row, c), DataType:=xlDelimited, _
        TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=False, Tab:=True, _
        Semicolon:=False, Comma:=False, Space:=False, Other:=False, FieldInfo _
        :=Array(1, Me.ComboBox1.ListIndex + 3), TrailingMinusNumbers:=True
     
     
    Next i
 

        Selection.NumberFormat = "d-mmm-yy"
    
        Unload Me
        
End Sub

Private Sub UserForm_Activate()
On Error Resume Next

    With Me.ComboBox1
        .Clear
        .AddItem "Month-Day-Year"
        .AddItem "Day-Month-Year"
        .AddItem "Year-Month-Day"
        
        .AddItem "Month-Year-Day"
        .AddItem "Day-Year-Month"
        .AddItem "Year-Day-Month"
        .Value = "Month-Day-Year"
        
    End With
End Sub

 
Attribute VB_Name = "myform"
Attribute VB_Base = "0{68281913-F5CF-4C10-B61C-8D20D4E5B6CB}{C12FB154-6935-412C-9A7D-23AF6E3AF19E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()

Dim i As Integer
For i = 0 To Frm_Sheet_Manager.ListBox1.ListCount - 1
    If Frm_Sheet_Manager.ListBox1.Selected(i) = True Then
    ActiveWorkbook.Sheets(Frm_Sheet_Manager.ListBox1.List(i, 0)).Tab.Color = VBA.RGB(Me.TextBox1.Value, Me.TextBox2.Value, Me.TextBox3.Value)
    End If
Next i
 
Me.Hide

End Sub

Private Sub ScrollBar1_Change()
Me.TextBox1.Value = Me.ScrollBar1.Value
End Sub

Private Sub ScrollBar2_Change()
Me.TextBox2.Value = Me.ScrollBar2.Value
End Sub

Private Sub ScrollBar3_Change()
Me.TextBox3.Value = Me.ScrollBar3.Value
End Sub

Private Sub TextBox1_Change()
Me.Image1.BackColor = VBA.RGB(Me.TextBox1.Value, Me.TextBox2.Value, Me.TextBox3.Value)
End Sub

Private Sub TextBox2_Change()
Me.Image1.BackColor = VBA.RGB(Me.TextBox1.Value, Me.TextBox2.Value, Me.TextBox3.Value)
End Sub

Private Sub TextBox3_Change()
Me.Image1.BackColor = VBA.RGB(Me.TextBox1.Value, Me.TextBox2.Value, Me.TextBox3.Value)
End Sub

Private Sub UserForm_Activate()

Me.Image1.BackColor = VBA.RGB(Me.TextBox1.Value, Me.TextBox2.Value, Me.TextBox3.Value)

End Sub



' InQuest injected base64 decoded content
' [haZ
' )e.+-

INQUEST-PP=macro
