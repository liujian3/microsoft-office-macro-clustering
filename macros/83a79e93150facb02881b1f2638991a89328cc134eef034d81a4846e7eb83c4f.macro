Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Open()
    frmMain.Show
End Sub



Attribute VB_Name = "clsNode"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'***************************************************************************
'
' Authors:  JKP Application Development Services, info@jkp-ads.com, http://www.jkp-ads.com
'           Peter Thornton, pmbthornton@gmail.com
'
' (c)2013-2017, all rights reserved to the authors
'
' You are free to use and adapt the code in these modules for
' your own purposes and to distribute as part of your overall project.
' However all headers and copyright notices should remain intact
'
' You may not publish the code in these modules, for example on a web site,
' without the explicit consent of the authors
'***************************************************************************

'-------------------------------------------------------------------------
' Module    : clsNode
' Company   : JKP Application Development Services (c)
' Author    : Jan Karel Pieterse (www.jkp-ads.com)
' Created   : 15-01-2013
' Purpose   : Holds all information of a node of the tree
'-------------------------------------------------------------------------
Option Explicit

Private mbExpanded As Boolean

Private mcolChildNodes As Collection

Private moParentNode As clsNode
Private moLastActiveNode As clsNode
Private moTree As clsTreeView

Private msKey As String
Private mvCaption
Private msControlTipText As Variant

Private mlChecked As Long        ' PT checkbox tristate boolean 0/-1 or 1 for null
Private mnIndex As Long             ' PT order added to Treeview's mcolNodes, won't change
Private mlVisIndex As Long          ' PT the visible order in the current view, changes with expand/collapse
Private mvIconMainKey               ' PT string name or numeric index as icon Key for the Image collection
Private mvIconExpandedKey           ' PT ditto for expanded icon
Private mlIconCnt As Long           ' PT number of icons availabel for this node 0, 1 or 2
Private msngTextWidth As Single     ' PT autosized text width before the node is widened beyond the frame
Private mlBackColor As Long         ' PT
Private mbBold As Boolean           ' PT
Private mlForeColor As Long         ' PT
Private mvTag

Private WithEvents mctlControl As MSForms.Label
Attribute mctlControl.VB_VarHelpID = -1
Private WithEvents mctlExpander As MSForms.Label
Attribute mctlExpander.VB_VarHelpID = -1
Private WithEvents moEditBox As MSForms.TextBox     ' PT editbox
Attribute moEditBox.VB_VarHelpID = -1
Private WithEvents mctlCheckBox As MSForms.Label    ' PT checkbox
Attribute mctlCheckBox.VB_VarHelpID = -1

Private mctlExpanderBox As MSForms.Label
Private mctlVLine As MSForms.Label  ' PT vertical line, only the first child node with children will have a vertical line
Private mctlHLine As MSForms.Label  ' PT horizontal line
Private mctlIcon As MSForms.Image   ' PT separate icon image control

Public Enum ndSortOrder
    ndAscending = 1
    ndDescending = 2
End Enum
Public Enum ndCompareMethod
    ndBinaryCompare = 0
    ndTextCompare = 1
End Enum
Public Enum ndMouse
    ndDown = 1
    ndUp = 2
    ndMove = 3
    ndBeforeDragOver = 4
    ndBeforeDropOrPaste = 5
End Enum

Const mcFullWidth As Long = 600

Private moLabSizer As MSForms.Label
Private Const mcBreak As String = "|fffd| " '"|fffd| "

Public Property Get Bold() As Boolean
    Bold = mbBold
End Property

Public Property Let Bold(bBold As Boolean)
    mbBold = bBold
    If Not mctlControl Is Nothing Then
        mctlControl.Font.Bold = mbBold
    End If
End Property

Public Property Get ControlTipText() As String
    ControlTipText = msControlTipText
End Property

Public Property Let ControlTipText(ByVal sControlTipText As String)
    msControlTipText = sControlTipText
    If Not mctlControl Is Nothing Then
        mctlControl.ControlTipText = msControlTipText
    End If
End Property

Public Property Get Key() As String
    Key = msKey
End Property

Public Property Let Key(ByVal sKey As String)
    Dim bIsInMainCol As Boolean
    Dim i As Long
    Dim cTmp As clsNode

    On Error GoTo Err_Trap

    If Tree Is Nothing Then
        msKey = sKey
        Exit Property
    ElseIf msKey = sKey Or Len(sKey) = 0 Then
        Exit Property
    End If

    On Error Resume Next
    Set cTmp = Tree.Nodes.Item(sKey)
    On Error GoTo Err_Trap

    If Not cTmp Is Nothing Then
        Err.Raise 457    ' standard duplicate key error
    End If

    For Each cTmp In Tree.Nodes
        i = i + 1
        If cTmp Is Me Then
            bIsInMainCol = True
            Exit For
        End If
    Next

    If bIsInMainCol Then
        With Tree.Nodes
            .Remove i
            If i <= .Count Then
                .Add Me, sKey, i
            Else
                .Add Me
            End If
        End With
    End If

    msKey = sKey

    Exit Property
Err_Trap:
    Err.Raise Err.Number, "Let Key", Err.Description
End Property

Public Property Get Expanded() As Boolean
    Expanded = mbExpanded
End Property

Public Property Let Expanded(ByVal bExpanded As Boolean)
    mbExpanded = bExpanded
    If Not Me.Expander Is Nothing Then
        UpdateExpanded bControlOnly:=False
    ElseIf Not Me.Control Is Nothing Then
        UpdateExpanded bControlOnly:=True
    End If
End Property

Public Property Get Caption()
    Caption = mvCaption
End Property

Public Property Let Caption(ByVal vCaption)
Dim sngWd As Single
    mvCaption = vCaption
    If Not mctlControl Is Nothing Then
        
        mctlControl.Caption = CStr(vCaption)
        If mctlControl.AutoSize Then
            msngTextWidth = mctlControl.Width
        Else
            sngWd = mctlControl.Width
            mctlControl.AutoSize = True
            msngTextWidth = mctlControl.Width
            mctlControl.AutoSize = False
        End If
    End If
End Property

Public Property Get ChildNodes() As Collection
    Set ChildNodes = mcolChildNodes
End Property

Public Property Set ChildNodes(colChildNodes As Collection)
    Set mcolChildNodes = colChildNodes
End Property

Friend Property Get Tree() As clsTreeView
    Set Tree = moTree
End Property

Friend Property Set Tree(oTree As clsTreeView)
    Set moTree = oTree
End Property

Friend Property Get Index() As Long    ' PT
    Index = mnIndex
End Property

Friend Property Let Index(idx As Long)
    mnIndex = idx
End Property

Public Property Get ImageExpanded()
    ImageExpanded = mvIconExpandedKey
End Property

Public Property Let ImageExpanded(vImageExpanded)
    On Error GoTo Err_Trap
    If Not IsMissing(vImageExpanded) Then
        If Not IsEmpty(vImageExpanded) Then
            If Len(mvIconMainKey) = 0 Then
                mvIconMainKey = vImageExpanded
            End If
            mvIconExpandedKey = vImageExpanded
            mlIconCnt = 2
        End If
    End If
Err_Trap:
End Property

Public Property Get ImageMain()
    ImageMain = mvIconMainKey
End Property

Public Property Let ImageMain(vImageMain)
    On Error GoTo Err_Trap
    If Not IsMissing(vImageMain) Then
        If Not IsEmpty(vImageMain) Then
            mvIconMainKey = vImageMain
            If mlIconCnt = 0 Then mlIconCnt = 1
        End If
    End If
Err_Trap:
End Property

Public Property Get ParentNode() As clsNode
    Set ParentNode = moParentNode
End Property

Public Property Set ParentNode(oParentNode As clsNode)
    Set moParentNode = oParentNode
End Property

Public Property Get NextNode() As clsNode
    Dim i As Long
    Dim cNode As clsNode

    With Me.ParentNode
        For Each cNode In .ChildNodes
            i = i + 1
            If cNode Is Me Then
                Exit For
            End If
        Next
        If .ChildNodes.Count > i Then
            Set NextNode = .ChildNodes(i + 1)
        End If
    End With
End Property

Public Property Get Previous() As clsNode
    Dim i As Long
    Dim cNode As clsNode

    With Me.ParentNode
        For Each cNode In Me.ParentNode.ChildNodes
            i = i + 1
            If cNode Is Me Then
                Exit For
            End If
        Next
        If i > 1 Then
            Set Previous = .ChildNodes(i - 1)
        End If
    End With
End Property

Friend Property Get Expander() As MSForms.Label
    Set Expander = mctlExpander
End Property

Friend Property Set Expander(ctlExpander As MSForms.Label)
    Set mctlExpander = ctlExpander
End Property

Friend Property Get Control() As MSForms.Label
    Set Control = mctlControl
End Property

Friend Property Set Control(ctlControl As MSForms.Label)
    Set mctlControl = ctlControl
    If Not mctlControl Is Nothing Then
        If Not moTree Is Nothing Then
            Set mctlControl.Font = moTree.TreeControl.Font
        Else
            Stop
        End If
    End If
End Property

Friend Property Let VisIndex(lVisIndex As Long)
    mlVisIndex = lVisIndex
End Property

Friend Property Get VisIndex() As Long
    VisIndex = mlVisIndex
End Property

Public Property Get BackColor() As Long

    BackColor = mlBackColor

End Property

Public Property Let BackColor(lColor As Long)
    mlBackColor = lColor
    If mlBackColor = 0 Then mlBackColor = 1
    If Not mctlControl Is Nothing Then
        mctlControl.BackColor = lColor
    End If
End Property

Public Property Get ForeColor() As Long
    ForeColor = mlForeColor
End Property

Public Property Let ForeColor(lColor As Long)
    mlForeColor = lColor
    If mlForeColor = 0 Then mlForeColor = 1
    If Not mctlControl Is Nothing Then
        mctlControl.ForeColor = lColor
    End If
End Property

Friend Property Get TextWidth() As Single
    TextWidth = msngTextWidth
End Property

Friend Property Let TextWidth(sngTextWidth As Single)
    msngTextWidth = sngTextWidth
End Property

Friend Property Set HLine(ctlHLine As MSForms.Label)
    Set mctlHLine = ctlHLine
End Property

Friend Property Get HLine() As MSForms.Label
    Set HLine = mctlHLine
End Property

Friend Property Set Icon(ctlIcon As MSForms.Image)
    Set mctlIcon = ctlIcon
End Property

Friend Property Get Icon() As MSForms.Image
    Set Icon = mctlIcon
End Property

Friend Property Get VLine() As MSForms.Label
    Set VLine = mctlVLine
End Property

Friend Property Set VLine(ctlVLine As MSForms.Label)
    Set mctlVLine = ctlVLine
End Property

Friend Property Get ExpanderBox() As MSForms.Label
    Set ExpanderBox = mctlExpanderBox
End Property

Friend Property Set ExpanderBox(ctlExpanderBox As MSForms.Label)
    Set mctlExpanderBox = ctlExpanderBox
End Property

Public Property Get Root() As clsNode
    Dim cTmp As clsNode
    Set cTmp = Me
    Do While Not cTmp.ParentNode.ParentNode Is Nothing
        Set cTmp = cTmp.ParentNode
    Loop
    Set Root = cTmp
End Property

Public Property Get Level() As Long
    Dim lLevel As Long
    Dim cNode As clsNode

    On Error GoTo errH
    lLevel = -1
    Set cNode = Me.ParentNode
    While Not cNode Is Nothing
        lLevel = lLevel + 1
        Set cNode = cNode.ParentNode
    Wend
    Level = lLevel
    Exit Property
errH:
End Property

Public Property Get FirstSibling() As clsNode
    If Not moParentNode Is Nothing Then
        Set FirstSibling = moParentNode.GetChild(1)
    End If
End Property

Public Property Get LastSibling() As clsNode
    If Not moParentNode Is Nothing Then
        Set LastSibling = moParentNode.GetChild(-1)
    End If
End Property














Public Function AddChild(Optional sKey As String, _
                         Optional vCaption, _
                         Optional vImageMain, _
                         Optional vImageExpanded) As clsNode
    Dim bTriState As Boolean
    Dim cChild As clsNode

    On Error GoTo Err_Trap
    Set cChild = New clsNode

    With moTree.Nodes

        If Len(sKey) Then
100         .Add cChild, sKey
101
            cChild.Key = sKey
        Else
            .Add cChild
        End If

        cChild.Index = .Count
    End With

    If mcolChildNodes Is Nothing Then
        Set mcolChildNodes = New Collection
    End If

    mcolChildNodes.Add cChild

    With cChild
        If Not IsMissing(vImageMain) Then
            If Len(vImageMain) Then
                .ImageMain = vImageMain
            End If
        End If

        If Not IsMissing(vImageExpanded) Then
            If Len(vImageExpanded) Then
                .ImageExpanded = vImageExpanded
            End If
        End If

        .Caption = vCaption
        
'        If mlChecked = -1 Then ' -1 = true, +1 = mixed
'            If moTree.CheckBoxes(bTriState) Then
'                If bTriState Then
'                    .Checked = True
'                End If
'            End If
'        End If
        
        Set .Tree = moTree
        Set .ParentNode = Me
    End With

    Set AddChild = cChild

    Exit Function
Err_Trap:
    If Erl = 100 And Err.Number = 457 Then
        Err.Raise vbObjectError + 1, "clsNode.AddChild", "Duplicate key: '" & sKey & "'"
    Else
        Err.Raise Err.Number, "clsNode.AddChild", Err.Description
    End If
End Function

Private Sub UpdateExpanded(bControlOnly As Boolean)
    Dim bFullWidth As Boolean
    Dim vKey
    Dim pic As StdPicture

    If Not bControlOnly Then
        With Me.Expander
'            If moTree.GetExpanderIcon(mbExpanded, pic) Then
'                .Picture = pic
'            Else
                If mbExpanded Then
                    .Caption = "-"
                Else
                    .Caption = "+"
                End If
'            End If
        End With
    End If

    On Error GoTo Err_Trap
'    If Me.hasIcon(vKey) Then
'        If moTree.GetNodeIcon(vKey, pic, bFullWidth) Then
'            If bFullWidth Then
'                Me.Icon.Picture = pic
'            Else
'                Me.Control.Picture = pic
'            End If
'        End If
'    End If
Err_Trap:
End Sub

Friend Sub TerminateNode(Optional bDeleteNodeControls As Boolean)
    Dim cChild As clsNode
    If Not ChildNodes Is Nothing Then
        For Each cChild In ChildNodes
            cChild.TerminateNode bDeleteNodeControls
        Next
    End If

    If bDeleteNodeControls Then
        DeleteNodeControls True
        If bDeleteNodeControls Then
            Index = -1
        End If
    End If

    Set mcolChildNodes = Nothing
    Set moTree = Nothing
End Sub

Friend Function hasIcon(vKey) As Boolean
' PT get the appropriate icon key/index, if any
    If mlIconCnt = 2 And mbExpanded Then
        vKey = mvIconExpandedKey
        hasIcon = True    'Not IsEmpty(vKey) '(True
    ElseIf mlIconCnt Then
        vKey = mvIconMainKey
        hasIcon = True    'Not IsEmpty(vKey)
    End If
End Function







Private Sub Class_Initialize()

End Sub

Private Sub mctlCheckBox_Click()

End Sub

' ****************EVENTS








Private Sub mctlControl_Click()
Dim bFlag As Boolean

    If Not moLastActiveNode Is Nothing Then
        moLastActiveNode.Control.BorderStyle = fmBorderStyleNone
        Set moLastActiveNode = Nothing
        bFlag = True
    End If

    If moTree.ActiveNode Is Nothing Then
        Set moTree.ActiveNode = Me
        bFlag = True
    ElseIf Not bFlag Then
        bFlag = mctlControl.BorderStyle <> fmBorderStyleNone
    End If
    
    If Not moTree.ActiveNode Is Me Or bFlag Then
        ' Raise event first time node activated
         moTree.NodeEventRouter Me, "Caption", 1
    End If

End Sub

Private Sub mctlControl_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim bDummy As Boolean

'        If moTree.EnableLabelEdit(bDummy) Then
'            moTree.EditMode(Me) = True
'            EditBox bEnterEdit:=True
'        Else
'            ' moTree.NodeEventRouter Me, "Caption", tvDblClick
'        End If
'MsgBox moTree.ActiveNode.Caption

End Sub

Private Sub mctlControl_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
Dim bFlag As Boolean

    If moTree.ActiveNode Is Me Then
        bFlag = Me.Control.BackColor = vbHighlight
       ' bFlag = bFlag Or Me.Control.BorderStyle = fmBorderStyleSingle ' in Access this should be uncommented
    End If
    
    If Not bFlag Then
        Set moLastActiveNode = moTree.ActiveNode
        Set moTree.ActiveNode = Me
        If Not moLastActiveNode Is Nothing Then
            moLastActiveNode.Control.BorderStyle = fmBorderStyleSingle
            moLastActiveNode.Control.BorderColor = RGB(200, 200, 200)
        End If
    End If

    If moTree.EditMode(Me) Then
        moTree.EditMode(Me) = False
    End If
    
    ' moTree.NodeEventRouter Me, "Caption", tvDown, Button, Shift, X, Y
End Sub

Private Sub mctlControl_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
Dim bFlag As Boolean
Dim bMouseIsOver As Boolean
Dim bMoveCopy As Boolean

    If Not moLastActiveNode Is Nothing Then
        With Me.Control
            bMouseIsOver = (X >= -1 And X <= .Width + 1) And (Y >= -1 And Y <= .Height + 1)
        End With
        
        If Not bMouseIsOver Then
            bFlag = moLastActiveNode Is moTree.MoveCopyNode(bMoveCopy)

            moLastActiveNode.Control.BorderStyle = fmBorderStyleNone
            Set moTree.ActiveNode = moLastActiveNode

            If bFlag Then
                Set moTree.MoveCopyNode(bMoveCopy) = moLastActiveNode
            End If

            Set moLastActiveNode = Nothing
            
        ElseIf Button = 2 Then
            mctlControl_Click
        End If
    End If
    
    ' moTree.NodeEventRouter Me, "Caption", tvUp, Button, Shift, X, Y

End Sub

Private Sub mctlExpander_Click()
    Expanded = Not Expanded
'    If moTree.EditMode(Me) Then
'        moTree.EditMode(Me) = False
'    End If
    moTree.NodeEventRouter Me, "Expander", 1
End Sub

Public Function GetChild(vKey As Variant) As clsNode
    Dim cNode As clsNode
    Dim lIdx As Long

    If VarType(vKey) = vbString Then

        For Each cNode In mcolChildNodes
            If vKey = cNode.Key Then
                Set GetChild = cNode
                Set cNode = Nothing
                Exit Function
            End If
        Next

    ElseIf Not mcolChildNodes Is Nothing Then
        lIdx = vKey
        If lIdx = -1 Then
            lIdx = mcolChildNodes.Count
        End If
        If lIdx > 0 Then
            Set GetChild = mcolChildNodes(lIdx)
        Else: Set mcolChildNodes = Nothing
        End If
    End If

    Set cNode = Nothing
End Function

Friend Function RemoveChild(cNode As clsNode, Optional bReverse As Boolean) As Boolean

Dim lCt As Long
Dim i As Long
Dim cTmp As clsNode
    On Error GoTo errH

    If bReverse Then
        For i = mcolChildNodes.Count To 1 Step -1
            Set cTmp = mcolChildNodes(i)
            If mcolChildNodes(i) Is cNode Then
                mcolChildNodes.Remove i
                RemoveChild = True
                Exit For
            End If
        Next
    Else
        For Each cTmp In mcolChildNodes
            lCt = lCt + 1
            If cTmp Is cNode Then
                mcolChildNodes.Remove lCt
                RemoveChild = True
                Exit For
            End If
        Next
    End If
    
    If mcolChildNodes.Count = 0 Then
        Set mcolChildNodes = Nothing
        Me.Expanded = False
    End If

    Exit Function
errH:
    Err.Raise vbObjectError, "RemoveChild", Err.Description
End Function

Private Sub DeleteNodeControls(bClearIndex As Boolean)
    On Error GoTo errH

    With moTree.TreeControl.Controls
        If Not mctlControl Is Nothing Then
            .Remove mctlControl.Name
            Set mctlControl = Nothing
            If Not mctlHLine Is Nothing Then
                .Remove mctlHLine.Name
                Set mctlHLine = Nothing
            End If
            If Not mctlIcon Is Nothing Then
                .Remove mctlIcon.Name
                Set mctlIcon = Nothing
            End If
            If Not mctlIcon Is Nothing Then
                .Remove mctlIcon.Name
                Set mctlIcon = Nothing
            End If
        End If

        If Not mctlExpander Is Nothing Then
            .Remove mctlExpander.Name
            Set mctlExpander = Nothing
        End If
        If Not mctlExpanderBox Is Nothing Then
            .Remove mctlExpanderBox.Name
            Set mctlExpanderBox = Nothing
        End If
        If Not mctlVLine Is Nothing Then
            .Remove mctlVLine.Name
            Set mctlVLine = Nothing
        End If


        If Not moEditBox Is Nothing Then
            .Remove moEditBox.Name
            Set moEditBox = Nothing
        End If
        If Not mctlCheckBox Is Nothing Then
            .Remove mctlCheckBox.Name
            Set mctlCheckBox = Nothing
        End If

        If Not Me.ParentNode Is Nothing Then
            If FirstSibling Is LastSibling Then

                If Not Me.ParentNode.VLine Is Nothing Then
                    .Remove Me.ParentNode.VLine.Name
                    Set Me.ParentNode.VLine = Nothing
                End If
                
                If Not Me.ParentNode.ExpanderBox Is Nothing Then
                    .Remove Me.ParentNode.ExpanderBox.Name
                    Set Me.ParentNode.ExpanderBox = Nothing
                End If

                If Not Me.ParentNode.Expander Is Nothing Then
                    .Remove Me.ParentNode.Expander.Name
                    Set Me.ParentNode.Expander = Nothing
                End If

                Me.ParentNode.Expanded = False

            End If

        End If

    End With

    If bClearIndex Then
        Me.Index = -1
    End If

    Exit Sub
errH:
    Resume Next
End Sub

Public Function Sort(Optional ByVal ndOrder As ndSortOrder = ndAscending, _
                     Optional ByVal ndCompare As ndCompareMethod = ndTextCompare) As Boolean
' PT Sorts the child nodes,
'    returns True if the order has changed to flag Refresh should be called
    Dim sCaptions() As String
    Dim lStart As Long, lLast As Long, i As Long
    Dim colNodes As New Collection
    Dim bIsUnSorted As Boolean

    On Error GoTo errExit
    lStart = 1
    lLast = ChildNodes.Count    ' error if no childnodes to sort

    If lLast = 1 Then
        ' nothing to sort
        Exit Function
    End If

    ReDim idx(lStart To lLast) As Long
    ReDim sCaptions(lStart To lLast) As String
    For i = lStart To lLast
        idx(i) = i
        sCaptions(i) = ChildNodes.Item(i).Key
    Next

    If ndOrder <> ndAscending Then ndOrder = -1    ' descending
    If ndCompare <> ndTextCompare Then ndCompare = ndBinaryCompare

    Call BinarySortIndexText(sCaptions(), lStart, lLast, idx, ndOrder, ndCompare)

    For i = lStart To lLast - 1
        If idx(i) <> idx(i + 1) - 1 Then
            bIsUnSorted = True
            Exit For
        End If
    Next

    If bIsUnSorted Then
        For i = lStart To lLast
            colNodes.Add ChildNodes(idx(i))
        Next
        Set ChildNodes = colNodes
        Sort = True
    End If

errExit:
'   Probably(?) any error was because there were no childnodes, no need to raise an error
End Function

Private Sub BinarySortIndexText(sCaptions() As String, ByVal lStart As Long, ByVal lEnd As Long, ByRef idx() As Long, ndOrder As Long, ndCompare As ndCompareMethod)
' PT sorts the index array based on the string array
    Dim lSmall As Long, lLarge As Long, sMid As String, lTmp As Long

    lSmall = lStart
    lLarge = lEnd
    sMid = sCaptions(idx((lSmall + lLarge) / 2))

    Do While lSmall <= lLarge
        Do While (StrComp(sCaptions(idx(lSmall)), sMid, ndCompare) = -ndOrder And lSmall < lEnd)
            lSmall = lSmall + 1
        Loop
        Do While (StrComp(sCaptions(idx(lLarge)), sMid, ndCompare) = ndOrder And lLarge > lStart)
            lLarge = lLarge - 1
        Loop
        If lSmall <= lLarge Then
            lTmp = idx(lSmall)
            idx(lSmall) = idx(lLarge)
            idx(lLarge) = lTmp
            lSmall = lSmall + 1
            lLarge = lLarge - 1
        End If
    Loop

    If lStart <= lLarge Then
        Call BinarySortIndexText(sCaptions(), lStart, lLarge, idx, ndOrder, ndCompare)
    End If
    If lSmall <= lEnd Then
        Call BinarySortIndexText(sCaptions(), lSmall, lEnd, idx, ndOrder, ndCompare)
    End If
End Sub


Attribute VB_Name = "clsTreeView"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'***************************************************************************
'
' Authors:  JKP Application Development Services, info@jkp-ads.com, http://www.jkp-ads.com
'           Peter Thornton, pmbthornton@gmail.com
'
' (c)2013-2017, all rights reserved to the authors
'
' You are free to use and adapt the code in these modules for
' your own purposes and to distribute as part of your overall project.
' However all headers and copyright notices should remain intact
'
' You may not publish the code in these modules, for example on a web site,
' without the explicit consent of the authors
'***************************************************************************

'-------------------------------------------------------------------------
' Module    : clsTreeView
' Company   : JKP Application Development Services (c)
' Author    : Jan Karel Pieterse (www.jkp-ads.com)
' Created   : 15-01-2013
' Purpose   : Creates a VBA Treeview control in a frame on your UserForm
'-------------------------------------------------------------------------
Option Explicit

Public WithEvents TreeControl As MSForms.Frame
Attribute TreeControl.VB_VarHelpID = -1

Private mbInActive                  'PT the treeview is not in focus
Private mbAlwaysRedesign As Boolean    'PT temporary flag to force mbRedesign=true, see Move()
Private mbAutoSort As Boolean       'PT sort siblings after manual edit
Private mbChanged As Boolean        'PT "dirty", user has edited node(s)
Private mbCheckboxes As Boolean     'PT show checkboxes
Private mbLabelEdit As Boolean      'PT allow manual editing with F2 and double click
Private mbTriState As Boolean       'PT enable tripple state checkboxes
Private mbCheckboxImage As Boolean  'PT determins if icons are used for checkboxes
Private mbEditMode As Boolean       'PT flag if in editmode
Private mbFullWidth As Boolean      'PT use separate image controls for icons, can highlight nodes to full width
Private mbGotIcons As Boolean       'PT got a collection of images
Private mbExpanderImage As Boolean  'PT determines if icons will be used for collapse/expand controls
Private mbKeyDown As Boolean        'PT Enter-keyup in a Textbox occurs when next control gets focus
Private mbMove As Boolean           'PT flag intention of the MoveCopyNode
Private mbMultiLine As Boolean
Private mbRedesign As Boolean       'PT flag to reset all dim's after changing NodeHeight or Indentation at runtime
Private mbRootButton As Boolean     'PT Root has an expander button
Private mbShowExpanders As Boolean  'PT Show +/- buttons
Private mbShowLines As Boolean      'PT determines if lines will be created and shown
Private mlBackColor As Long         'PT frameholder's backcolor
Private mlForeColor As Long         'PT frameholder's ForeColor
Private mlLabelEdit As Long         'PT 0-Automatic, 1-Manual can't be edited
Private mlLineColor As Long         'PT Lines color
Private mlNodesCreated As Long      'PT in/de-cremented as nodes are added/deleted from mcolNodes
Private mlNodesDeleted As Long      'PT incremented as node.controls are deleted, purpose to give unique id for control names
Private mlVisCount As Long          'PT incremented from zero as each node is displayed
Private mlVisOrder() As Long        'PT an index array to identify displayed nodes in the order as displayed
Private msAppName As String         'JKP: Title of messageboxes
Private msngChkBoxPad As Single     'PT offset if using checkboxes
Private msngChkBoxSize As Single    'PT checkbox size
Private msngIndent As Single        'PT default 15
Private msngLineLeft As Single      'PT Left pos of Root H & V lines, 3 + alpha
Private msngNodeHeight As Single    'JKP: vertical distance between nodes
Private msngRootLine As Single      'PT if mbRootButton, same as msngIndent, else 0
Private msngTopChk As Single        'PT top checkbox  (these "tops" are offsets down from the top a given node)
Private msngTopExpB As Single       'PT top expander button (a label)
Private msngTopExpT As Single       'PT top expander text (a label)
Private msngTopHV As Single         'PT top for Horiz' & Vert' lines (mid height of a node + top padding))
Private msngTopIcon As Single       'PT top icon
Private msngTopLabel As Single      'PT top node label, if font height less than NodeHeight
Private msngVisTop As Single        'PT activenode top relative to scroll-top
Private msngMaxWidths() As Single   'PT array, max width of text in each level, helps determine scroll-width
Private moActiveNode As clsNode     'JKP: refers to the selected node
Private moEditNode As clsNode       'PT the node in EditMode
Private moMoveNode As clsNode       'PT node waiting to be moved
Private moRootHolder As clsNode     'PT parent for the root node(s), although a clsNode it's not a real node
Private mcolIcons As Collection     'PT collection of stdPicture objects, their names as keys
Private mcolNodes As Collection     'JKP: global collection of all the nodes
Private moCheckboxImage(-1 To 1) As StdPicture   'PT checkbox true/false/triState icons
Private moExpanderImage(-1 To 0) As StdPicture   'PT collapse/expand icons

Private moForm As MSForms.UserForm
''-----------------------------------------------------------

Public Enum tvMouse
    tvClick = 1
    tvDblClick = 2
    tvDown = 3
    tvMove = 4
    tvUp = 5
End Enum

Public Enum tvTreeRelationship
    tvFirst = 0
    tvLast = 1
    tvNext = 2
    tvPrevious = 3
    tvChild = 4
End Enum

Event Click(cNode As clsNode)       'Node click event
' MouseAction generic example for all mouse events. See notes in NodeEventRouter
' Event MouseAction(cNode As clsNode, Action As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
Event NodeCheck(cNode As clsNode)   'Checkbox change event
Event AfterLabelEdit(ByRef Cancel As Boolean, NewString As String, cNode As clsNode)
Event KeyDown(cNode As clsNode, ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
                    
Private Type POINTAPI
    X As Long
    Y As Long
End Type

#If VBA7 Then
    Private Declare PtrSafe Function GetCursorPos Lib "user32.dll" ( _
            ByRef lpPoint As POINTAPI) As Long
    Private Declare PtrSafe Function SetCursorPos Lib "user32.dll" ( _
            ByVal X As Long, _
            ByVal Y As Long) As Long
    Private Declare PtrSafe Function getTickCount Lib "kernel32.dll" Alias "GetTickCount" () As Long
#Else
    Private Declare Function GetCursorPos Lib "user32.dll" ( _
                                          ByRef lpPoint As POINTAPI) As Long
    Private Declare Function SetCursorPos Lib "user32.dll" ( _
                                          ByVal X As Long, _
                                          ByVal Y As Long) As Long
    Private Declare Function getTickCount Lib "kernel32.dll" Alias "GetTickCount" () As Long
#End If

' Mac displays at 72 pixels per 72 points (1 pt / pixel) vs 96/72  or 0.75 pt / pixel in most Windows systems
' The respective constants help size and position node controls appropriatelly in for Mac 1 and Win 0.75
' However sizing may not adapt correctly in Windows OS with Large Fonts, contact for support

    Private Const mcCheckboxFont As Long = 10
    Private Const mcCheckboxPad As Single = 15
    Private Const mcCheckboxPadImg As Single = 11.25
    Private Const mcChkBoxSize As Single = 10.5
    Private Const mcExpanderFont As Long = 10
    Private Const mcExpButSize As Single = 11.25
    Private Const mcExpBoxSize As Long = 9
    Private Const mcFullWidth As Long = 600
    Private Const mcIconPad As Single = 14.25
    Private Const mcIconSize As Long = 12
    Private Const mcTLpad As Long = 3
    Private Const mcLineLeft As Single = mcTLpad + 7.5
    Private Const mcPtPxl As Single = 0.75
    Private Const SYMBOL_CHARSET As Long = 2

Private Const mcSource As String = "clsTreeView"

Public Property Get ActiveNode() As clsNode
    Set ActiveNode = moActiveNode
End Property

Public Property Set ActiveNode(oActiveNode As clsNode)
    Dim cTmp As clsNode
    If oActiveNode Is MoveCopyNode(False) Then
        Set MoveCopyNode(False) = Nothing
    End If

    If moActiveNode Is oActiveNode Then
        SetActiveNodeColor
        Exit Property
    End If
    
    ResetActiveNodeColor ActiveNode

    If oActiveNode.Control Is Nothing Then
        Set cTmp = oActiveNode.ParentNode
        While Not cTmp.Caption = "RootHolder"
            cTmp.Expanded = True
            Set cTmp = cTmp.ParentNode
        Wend

        If mlNodesCreated Then
            BuildRoot False
        End If

    End If

    Set moActiveNode = oActiveNode
    SetActiveNodeColor

End Property

Public Sub ExpandNode(cNode As clsNode)
    Dim cTmp As clsNode

    Set cTmp = cNode.ParentNode
    While Not cTmp.Caption = "RootHolder"
        cTmp.Expanded = True
    Wend
    
End Sub

Public Property Get AppName() As String
    AppName = msAppName
End Property

Public Property Let AppName(ByVal sAppName As String)
    msAppName = sAppName
End Property

Public Property Get Changed() As Boolean
'PT user has edited node(s) and/or changed Checked value(s)
    Changed = mbChanged
End Property

Public Property Let Changed(ByVal bChanged As Boolean)
' called after manual node edit and Checked change
    mbChanged = bChanged
End Property

Public Property Set Form(frm As MSForms.UserForm)
    Set moForm = frm
End Property

Public Property Get FullWidth() As Boolean
    FullWidth = mbFullWidth
End Property

Public Property Let FullWidth(bFullWidth As Boolean)
    mbFullWidth = bFullWidth
End Property

Public Sub ImageAdd(pic As StdPicture, sName As String) ' PT
    On Error GoTo Err_Trap
    If mcolIcons Is Nothing Then
        Set mcolIcons = New Collection
        mbGotIcons = True
    End If
    mcolIcons.Add pic, sName ' error if sName is not a unique key
    Exit Sub
Err_Trap:
    Err.Raise Err.Number, "ImageAdd", "Error in ImageAdd" & vbNewLine & Err.Description
    Exit Sub
End Sub

Public Property Set Images(objImages As Object)
    Dim sDesc As String
    Dim pic As stdole.StdPicture
    Dim obj As Object
    
    On Error GoTo Err_Trap
    If TypeName(objImages) = "Collection" Then
        Set mcolIcons = objImages
100     For Each pic In mcolIcons
            ' if not a valid picture let the error abort
        Next
    Else
        Set mcolIcons = New Collection

200         For Each obj In objImages.Controls
                mcolIcons.Add obj.Picture, obj.Name
            Next
    End If

    ' Flag we have a valid collection of images
    mbGotIcons = mcolIcons.Count >= 1
    
    Exit Property
Err_Trap:
    Set mcolIcons = Nothing
    If Erl = 100 Then
        sDesc = "The obImages collection includes an invalue StdPicture object"
    ElseIf Erl = 200 Then
        sDesc = "A control in objImages does not contain a valid Picture object"
    End If
    sDesc = sDesc & vbNewLine & Err.Description
        
    Err.Raise Err.Number, "Images", sDesc

End Property

Public Property Get Indentation() As Single
    Indentation = msngIndent
End Property

Public Property Let Indentation(sngIndent As Single)
    Dim cNode As clsNode
    Dim sngOld As Single

    sngOld = msngIndent

    If sngIndent < 12 Then
        msngIndent = 12    ' min indent ?
    ElseIf sngIndent > 60 Then
        msngIndent = 60    ' max indent
    Else
        msngIndent = Int((sngIndent * 2 + mcPtPxl) / 3 * 2) * mcPtPxl
    End If

    If mbRootButton Then msngRootLine = msngIndent

    If Not TreeControl Is Nothing And Not (sngOld = msngIndent) Then
        ' changed after start-up so update the treeview
        If TreeControl.Controls.Count Then
            Set cNode = Me.ActiveNode
            Refresh
            If Not cNode Is Nothing Then
                Set ActiveNode = cNode
            End If
        End If
    End If
End Property

Public Property Get Nodes() As Collection
    If mcolNodes Is Nothing Then Set mcolNodes = New Collection
    Set Nodes = mcolNodes
End Property

Public Property Get RootNodes() As Collection
    Set RootNodes = moRootHolder.ChildNodes
End Property

Public Property Get RootButton() As Boolean
    If mbRootButton Then RootButton = 1
End Property

Public Property Let RootButton(lRootLeader As Boolean)

    mbRootButton = lRootLeader
    If mbRootButton Then
        msngRootLine = msngIndent
    Else
        msngRootLine = 0
    End If

    If Not Me.TreeControl Is Nothing Then
        If Not moRootHolder Is Nothing Then
            If Not moRootHolder.ChildNodes Is Nothing Then
                Refresh
            End If
        End If
    End If
End Property

Public Property Get NodeHeight() As Single
    If msngNodeHeight = 0 Then msngNodeHeight = 12
    NodeHeight = msngNodeHeight
End Property

Public Property Let NodeHeight(ByVal sngNodeHeight As Single)
    Dim cNode As clsNode
    Dim sngOld As Single

    sngOld = msngNodeHeight

    If sngNodeHeight < 9 Then
        msngNodeHeight = 9
    ElseIf sngNodeHeight > 45 Then
        msngNodeHeight = 45
    Else
        msngNodeHeight = Int((sngNodeHeight * 2 + mcPtPxl) / 3 * 2) * mcPtPxl
    End If

    If mbRootButton Then msngRootLine = msngIndent
    If Not TreeControl Is Nothing And Not (sngOld = msngNodeHeight) Then
        If TreeControl.Controls.Count Then
            Set cNode = Me.ActiveNode
            Refresh
            If Not cNode Is Nothing Then
                Set ActiveNode = cNode
            End If
        End If
    End If
End Property

Public Property Get LineColor() As Long
    LineColor = mlLineColor
End Property

Public Property Let LineColor(lColor As Long)
    If lColor <= vbInfoBackground Or (lColor >= 0 And lColor <= vbWhite) Then
        mlLineColor = lColor
    Else ' invalid input
         mlLineColor = vbScrollBars
    End If
End Property

Public Property Get ShowExpanders() As Boolean
    ShowExpanders = mbShowExpanders
End Property

Public Property Let ShowExpanders(bShowExpanders As Boolean)

    mbShowExpanders = bShowExpanders
    
    If Not TreeControl Is Nothing Then
        If TreeControl.Controls.Count Then
            Refresh
        End If
    End If
End Property

Public Property Get ShowLines() As Boolean
    ShowLines = mbShowLines
End Property

Public Property Let ShowLines(bShowLines As Boolean)
Dim bOrig As Boolean

    bOrig = mbShowLines
    mbShowLines = bShowLines

    If Not TreeControl Is Nothing Then
        If TreeControl.Controls.Count Then
            If bOrig <> mbShowLines Then
                Refresh
            End If
        End If
    End If

End Property

Public Property Get MoveCopyNode(Optional bMove As Boolean, Optional lColor As Long) As clsNode
    bMove = mbMove
    Set MoveCopyNode = moMoveNode
End Property

Public Property Set MoveCopyNode(Optional bMove As Boolean, Optional lColor As Long, cNode As clsNode)
    Static lOrigBackcolor As Long

    mbMove = bMove
    If lColor = 0 Then
        If bMove Then
            lColor = RGB(255, 231, 162)
        Else: lColor = RGB(159, 249, 174)
        End If
    End If

    If Not moMoveNode Is Nothing Then
        moMoveNode.BackColor = lOrigBackcolor
        moMoveNode.Control.BackColor = lOrigBackcolor
        Set moMoveNode = Nothing
    Else

    End If

    If Not cNode Is Nothing Then
        lOrigBackcolor = cNode.BackColor
        If lOrigBackcolor = 0 Then lOrigBackcolor = mlBackColor
        cNode.BackColor = lColor

        cNode.Control.BackColor = cNode.BackColor
        cNode.Control.ForeColor = cNode.ForeColor
        Set moMoveNode = cNode
    Else

    End If
End Property

Friend Property Get EditMode(cNode As clsNode) As Boolean  ' PT
    EditMode = mbEditMode
End Property

Friend Property Let EditMode(cNode As clsNode, ByVal bEditMode As Boolean)  ' PT

    Set MoveCopyNode(False) = Nothing
    mbEditMode = bEditMode

    If Not moEditNode Is Nothing Then
        moEditNode.EditBox False
    End If

    If bEditMode Then
        Set moEditNode = cNode
    Else
        Set moEditNode = Nothing
    End If
End Property




















Public Function AddRoot(Optional sKey As String, Optional vCaption, Optional vImageMain, _
                        Optional vImageExpanded) As clsNode

    On Error GoTo Err_Trap

    If moRootHolder Is Nothing Then
        Set moRootHolder = New clsNode
        Set moRootHolder.ChildNodes = New Collection
        Set moRootHolder.Tree = Me
        moRootHolder.Caption = "RootHolder"
        If mcolNodes Is Nothing Then
            Set mcolNodes = New Collection
        End If
    End If

    Set AddRoot = moRootHolder.AddChild(sKey, vCaption, vImageMain, vImageExpanded)

    Exit Function
Err_Trap:
    Err.Raise Err.Number, "AddRoot", Err.Description

End Function

Public Sub EnterExit(bExit As Boolean)
    mbInActive = bExit
    SetActiveNodeColor bExit ' apply appropriate vbInactiveCaptionText / vbHighlight
End Sub
















Public Sub Copy(cSource As clsNode, cDest As clsNode, _
                Optional vBefore, Optional ByVal vAfter, _
                Optional ByVal bShowError As Boolean)
    Dim lParentChecked As Long
    Set MoveCopyNode(False) = Nothing
    If mbTriState Then lParentChecked = cDest.Checked
    Clone cDest, cSource, vBefore, vAfter
    If lParentChecked = -1 And cDest.Checked = 0 Then
        
        cDest.Checked = -1
    End If
    SetActiveNodeColor
    
End Sub

Public Sub Move(cSource As clsNode, cDest As clsNode, _
                Optional vBefore, Optional ByVal vAfter, _
                Optional ByVal bShowError As Boolean)
Dim sErrDesc As String
Dim bIsParent As Boolean
Dim bRemoveReverseOrder As Boolean
Dim lParentChecked As Long
Dim idx As Long
Dim cNode As clsNode
Dim cSourceParent As clsNode

    Set MoveCopyNode(False) = Nothing
    On Error GoTo Err_Trap

    If cSource Is Nothing Or cDest Is Nothing Or cSource Is cDest Then
        Exit Sub
    End If

    Set cNode = cDest
    bIsParent = False
    Do
        Set cNode = cNode.ParentNode
        bIsParent = cNode Is cSource
    Loop Until cNode Is Nothing Or bIsParent

    If bIsParent Then
        Err.Raise vbObjectError + 110
    End If

    If cDest.ChildNodes Is Nothing Then
        Set cDest.ChildNodes = New Collection
    End If

    If cDest Is cSource.ParentNode Then
        For Each cNode In cDest.ChildNodes
            idx = idx + 1
            If cNode Is cSource Then
                Exit For
            End If
        Next
        If Not IsMissing(vBefore) Then
            bRemoveReverseOrder = Val(vBefore) < idx
        ElseIf Not IsMissing(vAfter) Then
            bRemoveReverseOrder = Val(vAfter) < idx
        ElseIf cSource Is cSource.LastSibling Then
            Exit Sub ' Same place
        End If
    End If

    AddNodeToCol cDest.ChildNodes, cSource, False, vBefore, vAfter

    Set cSourceParent = cSource.ParentNode
    
    With cSourceParent
        .RemoveChild cSource, bRemoveReverseOrder
        ' Old parent has no more children

        If .ChildNodes Is Nothing Then

            If Not .Expander Is Nothing Then
                Me.TreeControl.Controls.Remove .Expander.Name
                Set .Expander = Nothing
            End If

            If Not .ExpanderBox Is Nothing Then
                Me.TreeControl.Controls.Remove .ExpanderBox.Name
                Set .ExpanderBox = Nothing
            End If

            If Not .VLine Is Nothing Then
                Me.TreeControl.Controls.Remove .VLine.Name
                Set .VLine = Nothing
            End If

            .Expanded = False

        End If
    End With

    Set cSource.ParentNode = cDest
    cDest.Expanded = True

    If mbTriState Then
        lParentChecked = cDest.Checked
        cDest.CheckTriStateParent
        cSourceParent.CheckTriStateParent
        If lParentChecked = -1 And cDest.Checked = 0 Then
            cDest.Checked = -1
        End If
    End If

    SetActiveNodeColor

    mbAlwaysRedesign = True    ' ensure Left's get recalc'd during next refresh

    Exit Sub
Err_Trap:

    Select Case Err.Number
    Case vbObjectError + 110
        sErrDesc = "Cannot cut and move a Node to a descendant node"
    Case Else
        sErrDesc = "Move: " & Err.Description
    End Select

    If bShowError Then
        MsgBox sErrDesc, , AppName
    Else
        Err.Raise Err.Number, mcSource, "Move: " & sErrDesc
    End If

End Sub

Public Function NodeAdd(Optional vRelative, _
                        Optional vRelationship, _
                        Optional sKey As String, _
                        Optional vCaption, _
                        Optional vImageMain, _
                        Optional vImageExpanded) As clsNode

    Dim i As Long
    Dim cNode As clsNode
    Dim cRelative As clsNode
    Dim cParent As clsNode
    Dim cTmp As clsNode

    If IsMissing(vRelative) Then

        Set NodeAdd = Me.AddRoot(sKey, vCaption, vImageMain, vImageExpanded)
        Exit Function
    Else

        On Error Resume Next
        Set cRelative = vRelative
        If cRelative Is Nothing Then
            Set cRelative = mcolNodes(vRelative)
        End If

        On Error GoTo Err_Trap
        If cRelative Is Nothing Then
            Err.Raise vbObjectError + 100, "NodeAdd", "vRelative is not a valid node or a node.key"
        End If
    End If

    If IsMissing(vRelationship) Then
        vRelationship = tvTreeRelationship.tvNext    ' default
    End If

    If vRelationship = tvChild Or cRelative Is cRelative.Root Then
        Set cParent = cRelative
    Else
        Set cParent = cRelative.ParentNode
    End If

    Set cNode = New clsNode

    If Len(sKey) Then
100     mcolNodes.Add cNode, sKey
101
    Else
        mcolNodes.Add cNode
    End If

    If cParent.ChildNodes Is Nothing Then
        Set cParent.ChildNodes = New Collection
    End If

    With cParent.ChildNodes
        If .Count = 0 Then
            .Add cNode
        Else
            i = 0
            If vRelationship = tvNext Or vRelationship = tvPrevious Then
                For Each cTmp In cParent.ChildNodes
                    i = i + 1
                    If cTmp Is cRelative Then
                        Exit For
                    End If
                Next
            End If
            Select Case vRelationship
            Case tvFirst: .Add cNode, , 1
            Case tvLast: .Add cNode, after:=.Count
            Case tvNext: .Add cNode, after:=i
            Case tvPrevious: .Add cNode, before:=i
            Case tvChild: .Add cNode
            End Select
        End If
    End With

    With cNode
        .Key = sKey
        .Caption = CStr(vCaption)
        .ImageMain = vImageMain
        .ImageExpanded = vImageExpanded
        .Index = mcolNodes.Count
        
        Set .ParentNode = cParent
        Set .Tree = Me
    End With

    Set cNode.Tree = Me    ' do this after let key = skey
    Set NodeAdd = cNode

    Exit Function
Err_Trap:
    If mcolNodes Is Nothing Then
        Set mcolNodes = New Collection
        Resume
    End If
    If Erl = 100 And Err.Number = 457 Then
        Err.Raise vbObjectError + 1, "clsNode.AddChild", "Duplicate key: '" & sKey & "'"
    Else
        Err.Raise Err.Number, "clsNode.AddChild", Err.Description
    End If
End Function

Public Sub NodeRemove(cNode As clsNode)

    Dim lIdx As Long
    Dim lNodeCtlsOrig As Long
    Dim cParent As clsNode
    Dim cNodeAbove As clsNode, cNd As clsNode
    
    On Error GoTo Err_Trap

    Set cNodeAbove = NextVisibleNodeInTree(cNode, bUp:=True)
    Set cParent = cNode.ParentNode

    cNode.TerminateNode True

    cParent.RemoveChild cNode
    
    cNode.Index = -1
    If ActiveNode Is cNode Then
        Set moActiveNode = Nothing
    End If
    Set moEditNode = Nothing

    lIdx = 0
    lNodeCtlsOrig = mlNodesCreated
    mlNodesCreated = 0
    
    For Each cNd In mcolNodes
        lIdx = lIdx + 1
        If cNd.Index = -1 Then
            mcolNodes.Remove lIdx
            lIdx = lIdx - 1
        Else
            mlNodesCreated = mlNodesCreated - CLng(Not cNd.Control Is Nothing)
            cNd.Index = lIdx
        End If
    Next

    mlNodesDeleted = mlNodesDeleted + lNodeCtlsOrig - mlNodesCreated

    Set cNode = Nothing

    If mlNodesCreated Then
        If Not cNodeAbove Is Nothing Then
            Set Me.ActiveNode = cNodeAbove
        ElseIf mcolNodes.Count Then
            Set Me.ActiveNode = mcolNodes(1)
        End If
    Else
        Erase mlVisOrder
        Erase msngMaxWidths
        mlVisCount = 0
        mlNodesCreated = 0
        mlNodesDeleted = 0
    End If

    Exit Sub
Err_Trap:
End Sub

Public Sub NodesClear()
    Dim i As Long
    On Error GoTo Err_Trap

    If Not TreeControl Is Nothing Then
        With TreeControl
            For i = TreeControl.Controls.Count - 1 To 0 Step -1
                TreeControl.Controls.Remove i
            Next
            .ScrollBars = fmScrollBarsNone
            .ScrollWidth = 0
            .ScrollHeight = 0
            .ScrollTop = 0
        End With
    End If
    
    Erase mlVisOrder
    Erase msngMaxWidths
    mlVisCount = 0
    mlNodesCreated = 0
    mlNodesDeleted = 0
    
    TerminateTree

    mbChanged = False

    Exit Sub
Err_Trap:
End Sub

Public Sub Refresh()
    Dim bInit As Boolean

    If Me.TreeControl Is Nothing Then
        TerminateTree
        Err.Raise vbObjectError + 10, mcSource, "Refresh: 'TreeControl' frame is not referenced"
        
    ElseIf moRootHolder Is Nothing Then
        '
        Err.Raise vbObjectError + 11, mcSource, "Refresh: No Root nodes have been created"
        
    ElseIf moRootHolder.ChildNodes Is Nothing Then
        ' nothing to do
        mlVisCount = 0
        mlNodesCreated = 0
        mlNodesDeleted = 0
        Erase mlVisOrder
        Erase msngMaxWidths
        Exit Sub
        
    ElseIf Me.TreeControl.Controls.Count = 0 Then
        bInit = True
    Else
        mbRedesign = True
    End If

    On Error GoTo Err_Trap

    BuildRoot bInit

    Exit Sub

Err_Trap:
    Application.Cursor = xlDefault
    Err.Raise Err.Number, mcSource, "Error in BuildRoot: " & Err.Description
End Sub

Public Sub TerminateTree()
Dim cNode As clsNode

    If Not moRootHolder Is Nothing Then
        If Not moRootHolder.ChildNodes Is Nothing Then
            For Each cNode In moRootHolder.ChildNodes

                cNode.TerminateNode
            Next
        End If
        moRootHolder.TerminateNode
    End If
    
    Set moMoveNode = Nothing
    Set moEditNode = Nothing
    Set moActiveNode = Nothing
    Set moRootHolder = Nothing
    Set mcolNodes = Nothing
    
End Sub


























Private Sub BuildRoot(bInit As Boolean)
Dim bCursorWait As Boolean
Dim bTriStateOrig As Boolean
Dim i As Long
Dim bars As Long
Dim lLastRootVisIndex As Long
Dim sngActiveNodeScrollTop As Single
Dim sngChkBoxPad As Single
Dim sngHeightAllNodes As Single
Dim sngIconPad As Single
Dim cRoot As clsNode
Dim objCtrl As MSForms.Control
Dim vIconKey

Dim sCap As String
Dim sngTickCnt As Single

    On Error GoTo locErr

    bInit = TreeControl.Count = 0

    Application.EnableCancelKey = xlErrorHandler

    If mbAlwaysRedesign Then mbRedesign = True

    ReDim mlVisOrder(1 To mlNodesCreated + 100)
    If bInit Or mbRedesign Then
        ReDim msngMaxWidths(0 To 7)
    End If

    If mcolNodes.Count - mlNodesCreated > 400 Then
        HourGlassCursor bApply:=True
        bCursorWait = True
    End If
    
    If Not bInit Then
        If NodeIsVisible Then
            sngActiveNodeScrollTop = (ActiveNode.VisIndex - 1) * NodeHeight - Me.TreeControl.ScrollTop
        End If
    End If

    mlVisCount = 0
    bTriStateOrig = mbTriState
    mbTriState = False

'    If CheckBoxes Then
'        If mbCheckboxImage Then
'            sngChkBoxPad = mcCheckboxPadImg
'        Else
'            sngChkBoxPad = mcCheckboxPad
'        End If
'        If mcChkBoxSize > msngNodeHeight Then
'            msngNodeHeight = mcChkBoxSize
'        End If
'    End If

    msngTopExpB = mcTLpad + (msngNodeHeight - mcExpButSize) / 2 + 1.5
    If mbExpanderImage Then
        msngTopExpT = mcTLpad + (msngNodeHeight - (mcExpButSize - 4)) / 2
    Else
        msngTopExpT = mcTLpad + (msngNodeHeight - mcExpButSize) / 2
    End If

    msngTopChk = mcTLpad + (msngNodeHeight - mcChkBoxSize) / 2
    msngTopIcon = mcTLpad + (msngNodeHeight - mcIconSize) / 2
    msngTopHV = mcTLpad + msngNodeHeight / 2
    Call Round75


    With TreeControl
        mlBackColor = .BackColor    ' default colours for node labels
        mlForeColor = .ForeColor

        If bInit Then
            
        Else
            ' PT, refresh, start by hiding all the controls
            For Each objCtrl In .Controls
                objCtrl.Visible = False
            Next
        End If

        For Each cRoot In moRootHolder.ChildNodes
            sngIconPad = 0
            If mbFullWidth Then
                If mbGotIcons And cRoot.hasIcon(vIconKey) Then
                    sngIconPad = mcIconPad
                End If
            End If

            If cRoot.Control Is Nothing Then
                mlNodesCreated = mlNodesCreated + 1
                'Add the rootnode to the tree
                Set cRoot.Control = TreeControl.Controls.Add("Forms.label.1", "Node" & mlNodesDeleted + mlNodesCreated, False)
                With cRoot.Control

                    If Not mbFullWidth And mbGotIcons Then
                        If cRoot.hasIcon(vIconKey) Then
                            .PicturePosition = fmPicturePositionLeftCenter
                            .Picture = mcolIcons(vIconKey)
                        End If
                    End If

                    .Top = mcTLpad + mlVisCount * msngNodeHeight
                    .Left = mcTLpad + msngRootLine + sngIconPad + msngChkBoxPad

                    If cRoot.BackColor Then
                        .BackColor = cRoot.BackColor
                    End If
                    If cRoot.ForeColor Then
                        .ForeColor = cRoot.ForeColor
                    End If

                    If cRoot.Bold Then .Font.Bold = True
                    .Caption = cRoot.Caption
                    .AutoSize = True
                    .WordWrap = False

                    cRoot.TextWidth = .Width

                    If .Width + sngIconPad > msngMaxWidths(0) Then
                        msngMaxWidths(0) = .Width + sngIconPad
                    End If

                    ' calc msngTopLabel to align node label to mid NodeHeight
                    ' first calc min NodeHeight if not set higher by user
                    If .Height > msngNodeHeight Then
                        ' optimal HodeHeight for the current font
                        msngNodeHeight = .Height    ' 'don't use the Property method or Refresh will be called
                    ElseIf .Height < msngNodeHeight Then
                        msngTopLabel = Int((msngNodeHeight - .Height + mcPtPxl) / 3 * 2) * mcPtPxl
                        .Top = mcTLpad + msngTopLabel + mlVisCount * msngNodeHeight
                    End If

                    If mbFullWidth Then
                        If msngTopLabel < mcFullWidth Then
                            .Width = mcFullWidth
                            .AutoSize = False
                        End If
                    End If

                    If Len(cRoot.ControlTipText) Then
                        .ControlTipText = cRoot.ControlTipText
                    End If

                    .WordWrap = False
                    .ZOrder 0
                    .Visible = True

                End With
            Else

                With cRoot.Control

                    If mbRedesign Then
                        .Left = mcTLpad + msngRootLine + sngIconPad + msngChkBoxPad

                        If cRoot.TextWidth + sngIconPad > msngMaxWidths(0) Then
                            msngMaxWidths(0) = cRoot.TextWidth + sngIconPad
                        End If
                    End If

                    If .Height > msngNodeHeight Then
                        msngNodeHeight = .Height
                    ElseIf .Height < msngNodeHeight Then
                        msngTopLabel = Int((msngNodeHeight - .Height + mcPtPxl) / 3 * 2) * mcPtPxl
                    End If

                    .Top = mcTLpad + msngTopLabel + mlVisCount * msngNodeHeight

                    .Visible = True

                End With
            End If

            ' horizontal line
            If mbRootButton And mbShowLines Then
                If cRoot.HLine Is Nothing Then
                    Set cRoot.HLine = TreeControl.Controls.Add("Forms.label.1", "HLine" & cRoot.Control.Name, False)
                    With cRoot.HLine
                        .Top = msngTopHV + mlVisCount * msngNodeHeight
                        .Left = mcLineLeft
                        .Caption = ""
                        .BorderStyle = fmBorderStyleSingle
                        .BorderColor = LineColor    'vbScrollBars
                        .Width = msngIndent
                        .Height = mcPtPxl
                        .TextAlign = fmTextAlignCenter
                        .BackStyle = fmBackStyleTransparent
                        .ZOrder 1
                        .Visible = True
                    End With
                Else
                    With cRoot.HLine
                        .Width = msngIndent
                        .Top = msngTopHV + mlVisCount * msngNodeHeight  ' 3 + NodeHeight/2 (to nearest 0.75)
                        .Visible = True
                    End With
                End If
            End If

'            ' Checkbox
'            If CheckBoxes Then
'                If cRoot.CheckBox Is Nothing Then
'                    Set cRoot.CheckBox = TreeControl.Controls.Add("Forms.label.1", "CheckBox" & cRoot.Control.Name, False)
'                    With cRoot.CheckBox
'                        .Left = mcTLpad + msngRootLine
'                        .Top = msngTopChk + mlVisCount * msngNodeHeight
'
'                        If mbCheckboxImage Then
'                            'Use an image
'                            .BorderStyle = fmBorderStyleNone
'                            .Picture = moCheckboxImage(cRoot.Checked)
'                            .PicturePosition = fmPicturePositionLeftTop
'                            .AutoSize = True
'
'                        Else
'                            .Width = mcChkBoxSize
'                            .Height = mcChkBoxSize
'                            .Font.Name = "Marlett"  ' "a" is a tick
'                            .FontSize = mcCheckboxFont     '9
'                            .BorderStyle = fmBorderStyleSingle
'                            .BackColor = vbWindowBackground
'                            .ForeColor = vbWindowText
'                            If cRoot.Checked Then
'                                .Caption = "a"
'                                If cRoot.Checked = 1 Then
'                                    .ForeColor = RGB(180, 180, 180)
'                                End If
'                            End If
'                        End If
'
'                        .Visible = True
'                    End With
'                Else
'                    With cRoot.CheckBox
'                        .Left = mcTLpad + msngRootLine
'                        .Top = msngTopChk + mlVisCount * msngNodeHeight
'                        .Visible = True
'                    End With
'                End If
'            End If

            ' Icon
            If mbFullWidth And mbGotIcons Then
                If cRoot.hasIcon(vIconKey) Then
                    If cRoot.Icon Is Nothing Then
                        Set cRoot.Icon = TreeControl.Controls.Add("Forms.Image.1", "Icon" & cRoot.Control.Name, False)
                        With cRoot.Icon
                            .BackStyle = fmBackStyleTransparent
                            .BorderStyle = fmBorderStyleNone
                            '.AutoSize
                            .Width = mcIconSize
                            .Height = mcIconSize
                            .Left = mcTLpad + msngRootLine + msngChkBoxPad
                            .Top = msngTopIcon + mlVisCount * msngNodeHeight
                            .Picture = mcolIcons(vIconKey)
                            .BackStyle = fmBackStyleTransparent
                            .Visible = True
                        End With
                    Else
                        With cRoot.Icon
                            .Left = mcTLpad + msngRootLine + msngChkBoxPad
                            .Top = msngTopIcon + mlVisCount * msngNodeHeight
                            .Visible = True
                        End With
                    End If
                Else
                    sngIconPad = 0
                End If
            End If

            mlVisCount = mlVisCount + 1
            mlVisOrder(mlVisCount) = cRoot.Index
            cRoot.VisIndex = mlVisCount

            lLastRootVisIndex = mlVisCount

            'Now add this root's children
            If Not cRoot.ChildNodes Is Nothing Then
                BuildTree cRoot, 1, True
            End If

        Next

        'Vertical line for multiple roots
        If mbRootButton And mbShowLines Then
            If moRootHolder.ChildNodes.Count > 1 Then

                If moRootHolder.VLine Is Nothing Then
                    Set moRootHolder.VLine = TreeControl.Controls.Add("forms.label.1", "VLine_Roots")
                    With moRootHolder.VLine
                        .ZOrder 1
                        .Width = mcPtPxl
                        .Caption = ""
                        .BorderColor = mlLineColor    ' vbScrollBars
                        .BorderStyle = fmBorderStyleSingle
                        .Top = msngTopHV
                        .Left = mcLineLeft
                        .Height = (lLastRootVisIndex - 1) * msngNodeHeight
                    End With

                Else

                    With moRootHolder.VLine
                        .Top = msngTopHV
                        .Height = (lLastRootVisIndex - 1) * msngNodeHeight
                        .Visible = True
                    End With
                End If

            End If
        End If

        sngHeightAllNodes = mlVisCount * NodeHeight + mcTLpad     ' mcTLpad for top/bottom padding
        If bInit Then
            .ScrollHeight = 0
            .ScrollLeft = 0
        End If

        SetScrollbars False, True

        If bInit Then    ' startup
            '' make the first root node active but don't highlight it
            Set moActiveNode = moRootHolder.ChildNodes(1)
            '' or if preferred highlighted at startup
            'Set ActiveNode = moRootHolder.ChildNodes(1)
        ElseIf Not ActiveNode Is Nothing Then
            If Not NodeIsVisible Then
                .ScrollTop = (ActiveNode.VisIndex - 1) * NodeHeight - sngActiveNodeScrollTop
            End If
        End If

    End With

    mbRedesign = False
    mbTriState = bTriStateOrig

done:

    If bCursorWait Then
        HourGlassCursor False
    End If

    'TODO: implement API equivalent for cancel key in Access & Word
    Application.EnableCancelKey = xlInterrupt

    Exit Sub

locErr:
    If bCursorWait Then HourGlassCursor False
    mbRedesign = False
    mbTriState = bTriStateOrig

    If Err.Number = 9 And (mlVisCount = UBound(mlVisOrder) + 1) Then
        ' most likely an array needs enlarging
        If mlVisCount = UBound(mlVisOrder) + 1 Then
            ReDim Preserve mlVisOrder(LBound(mlVisOrder) To mlVisCount + 100)
            Resume
        End If
    ElseIf Err.Number = 18 Then
        ' user pressed ctrl-break in Excel
        MsgBox "Loading/refreshing Treeview aborted", , AppName
        NodesClear
        Resume done
    End If

    Err.Raise Err.Number, "BuildRoot", Err.Description
End Sub

Sub HourGlassCursor(bApply As Boolean)

    Application.Cursor = IIf(bApply, xlWait, xlDefault)

End Sub

Private Function NodeIsVisible(Optional cNode As clsNode, Optional lngCntVisible As Long) As Boolean
Dim idxFirstVis As Long
Dim idxLastVis As Long

    If TreeControl Is Nothing Then
        Exit Function
    End If

    With TreeControl
        idxFirstVis = .ScrollTop / NodeHeight + 1
        lngCntVisible = (.InsideHeight - mcTLpad) / NodeHeight
        idxLastVis = lngCntVisible + idxFirstVis - 1
    End With

    If cNode Is Nothing Then
        If Not ActiveNode Is Nothing Then

            Set cNode = ActiveNode
        Else
            Exit Function
        End If
    End If

    If idxLastVis > mlVisCount Then idxLastVis = mlVisCount

    If Not cNode Is Nothing Then
        NodeIsVisible = cNode.VisIndex >= idxFirstVis And cNode.VisIndex <= idxLastVis
    End If

End Function

Private Sub Round75()
    msngTopExpB = Int((msngTopExpB * 2 + mcPtPxl) / 3 * 2) * mcPtPxl
    msngTopExpT = Int((msngTopExpT * 2 + mcPtPxl) / 3 * 2) * mcPtPxl
    msngTopHV = Int((msngTopHV * 2 + mcPtPxl) / 3 * 2) * mcPtPxl
    msngTopIcon = Int((msngTopIcon * 2 + mcPtPxl) / 3 * 2) * mcPtPxl
    msngTopChk = Int((msngTopChk * 2 + mcPtPxl) / 3 * 2) * mcPtPxl
    msngTopLabel = Int((msngTopLabel * 2 + mcPtPxl) / 3 * 2) * mcPtPxl
End Sub

Private Sub BuildTree(cNode As clsNode, ByVal lLevel As Long, Optional lMaxLevel As Long = -1)
    Dim cChild As clsNode
    Dim lVLineTopIdx As Long

    If (lLevel > 1 Or mbRootButton) And mbShowExpanders Then

        If Not mbExpanderImage Then
            If cNode.ExpanderBox Is Nothing Then
                Set cNode.ExpanderBox = TreeControl.Controls.Add("Forms.label.1", "ExpBox" & cNode.Control.Name, False)
                With cNode.ExpanderBox
                    .Top = (mlVisCount - 1) * NodeHeight + msngTopExpB
                    .Left = mcTLpad * 2 + (lLevel - 2) * msngIndent + msngRootLine
                    .Width = mcExpBoxSize
                    .Height = mcExpBoxSize
                    .BorderStyle = fmBorderStyleSingle
                    .BorderColor = mlLineColor
                    .BackStyle = fmBackStyleOpaque
                    .Visible = True
                End With
            Else
                With cNode.ExpanderBox
                    If mbRedesign Then .Left = mcTLpad * 2 + (lLevel - 2) * msngIndent + msngRootLine
                    .Top = (mlVisCount - 1) * NodeHeight + msngTopExpB
                    .Visible = True
                End With
            End If
        End If

        If cNode.Expander Is Nothing Then
            Set cNode.Expander = TreeControl.Controls.Add("Forms.label.1", "ExpText" & cNode.Control.Name, False)
            With cNode.Expander
                .Left = mcTLpad * 2 + (lLevel - 2) * msngIndent + msngRootLine
                .Top = (mlVisCount - 1) * NodeHeight + msngTopExpT

                If mbExpanderImage Then
                    'Use an image
                    .AutoSize = True
                    .Width = 7.5
                    .Height = 7.5
                    .BorderStyle = fmBorderStyleNone
                    .PicturePosition = fmPicturePositionLeftTop
                    .Picture = moExpanderImage(cNode.Expanded)
                    #If Mac Then
                        .BackStyle = fmBackStyleTransparent
                    #End If
                Else
                    'use +/- text
                    .Width = mcExpButSize
                    .Height = mcExpButSize

                    If cNode.Expanded = True Then
                        .Caption = "-"
                        .Font.Bold = True
                    Else
                        .Caption = "+"
                        .Font.Bold = False
                    End If

                    .Font.Size = mcExpanderFont
                    .TextAlign = fmTextAlignCenter
                    .BackStyle = fmBackStyleTransparent
                End If
                .Visible = True
            End With
        Else
            With cNode.Expander
                If mbRedesign Then .Left = mcTLpad * 2 + (lLevel - 2) * msngIndent + msngRootLine
                .Top = (mlVisCount - 1) * NodeHeight + msngTopExpT
                .Visible = True
            End With
        End If

    End If

    If cNode.Expanded And (lMaxLevel < lLevel Or lMaxLevel = -1) Then

        If mbShowLines Then
            If cNode.VLine Is Nothing Then
                Set cNode.VLine = TreeControl.Controls.Add("Forms.label.1", "VLine" & cNode.Control.Name, False)
                lVLineTopIdx = mlVisCount
                With cNode.VLine
                    .ZOrder 1
                    .Top = msngTopHV + (lVLineTopIdx - 1) * NodeHeight
                    .Left = mcLineLeft + msngRootLine + msngIndent * (lLevel - 1)
                    .Width = mcPtPxl
                    .Height = NodeHeight
                    .Caption = ""
                    .BorderColor = mlLineColor
                    .BorderStyle = fmBorderStyleSingle
                    .Visible = True
                End With

            Else
                lVLineTopIdx = mlVisCount
                With cNode.VLine
                    .Top = msngTopHV + (lVLineTopIdx - 1) * NodeHeight
                    If mbRedesign Then
                        .Left = mcLineLeft + msngRootLine + msngIndent * (lLevel - 1)
                        .Visible = True
                    End If
                End With
            End If
        End If

        For Each cChild In cNode.ChildNodes

            If mbShowLines Then
                With cNode.VLine
                    .Height = (mlVisCount - lVLineTopIdx + 1) * msngNodeHeight
                    .Visible = True
                End With
            End If

            BuildNodeControls cChild, lLevel

            If Not cChild.ChildNodes Is Nothing Then
                BuildTree cChild, lLevel + 1
            End If

        Next

    End If

    Exit Sub

End Sub

Public Sub SetScrollbars(bRecalcWidths As Boolean, Optional bSetScrollDims As Boolean)
Dim i As Long
Dim bars As Long

    If bRecalcWidths Then
        RecalcMaxTextWidth
        bSetScrollDims = True
    End If

    With Me.TreeControl
    
        If bSetScrollDims Then
            .ScrollWidth = MaxNodeWidth + mcTLpad
            .ScrollHeight = mlVisCount * NodeHeight + mcTLpad
        End If
        
        For i = 0 To 1
            bars = 0
            If .InsideWidth < .ScrollWidth Then
                bars = fmScrollBarsHorizontal
            End If

            If .InsideHeight < .ScrollHeight Then
                bars = bars + fmScrollBarsVertical
            End If

            If bars <> .ScrollBars Then
                .ScrollBars = bars
            Else
                Exit For
            End If
        Next

    End With
    
End Sub

Private Sub BuildNodeControls(cNode As clsNode, ByVal lLevel As Long)

    Dim sngIconPad As Single
    Dim sName As String
    Dim vKey

    On Error GoTo locErr

    If cNode.Control Is Nothing Then
        mlNodesCreated = mlNodesCreated + 1
        sName = "Node" & mlNodesDeleted + mlNodesCreated
    ElseIf mbRedesign Then
         sName = cNode.Control.Name
    End If

    'Horizontal line
    If mbShowLines Then
        If cNode.HLine Is Nothing Then
            Set cNode.HLine = TreeControl.Controls.Add("Forms.label.1", "HLine" & sName, False)
            With cNode.HLine
                .Left = mcLineLeft + msngRootLine + msngIndent * (lLevel - 1)
                .Top = msngTopHV + mlVisCount * NodeHeight
                .Width = msngIndent
                .Height = mcPtPxl
                .Caption = ""
                .BorderStyle = fmBorderStyleSingle
                .BorderColor = mlLineColor 'vbScrollBars
                 If mbRedesign Then
                    .ZOrder 1
                 End If
                .Visible = True
            End With
        Else
            With cNode.HLine
                If mbRedesign Then
                    .Left = mcLineLeft + msngRootLine + msngIndent * (lLevel - 1)
                    .Width = msngIndent
                End If
                .Top = msngTopHV + mlVisCount * NodeHeight
                .Visible = True
            End With
        End If
    End If

'    ' Checkbox
'    If CheckBoxes Then
'        If cNode.CheckBox Is Nothing Then
'            Set cNode.CheckBox = TreeControl.Controls.Add("Forms.label.1", "CheckBox" & sName, False)
'            With cNode.CheckBox
'                .Left = mcTLpad + msngRootLine + msngIndent * lLevel
'                .Top = mlVisCount * NodeHeight + msngTopChk
'
'                If mbCheckboxImage Then
'                    'Use an image
'                    .BorderStyle = fmBorderStyleNone
'                    .Picture = moCheckboxImage(cNode.Checked)
'                    .PicturePosition = fmPicturePositionLeftBottom
'                    .AutoSize = True
'                Else
'
'                    .Width = mcChkBoxSize
'                    .Height = mcChkBoxSize
'                    .Font.Name = "Marlett"
'                    #If Mac = False Then
'                        .Font.Charset = SYMBOL_CHARSET
'                    #End If
'                    .Font.Size = 10
'                    .TextAlign = fmTextAlignCenter
'                    .BorderStyle = fmBorderStyleSingle
'                    If cNode.Checked Then
'                        .Caption = "a"
'                        If cNode.Checked = 1 Then
'                            .ForeColor = RGB(180, 180, 180)
'                        End If
'                    End If
'                End If
'
'                .Visible = True
'            End With
'        Else
'            With cNode.CheckBox
'                If mbRedesign Then .Left = mcTLpad + msngRootLine + msngIndent * lLevel
'                .Top = mlVisCount * NodeHeight + msngTopChk
'                .Visible = True
'            End With
'        End If
'    End If

    If mbFullWidth And mbGotIcons Then
        If cNode.hasIcon(vKey) Then
            sngIconPad = mcIconPad
            If cNode.Icon Is Nothing Then
                Set cNode.Icon = TreeControl.Controls.Add("Forms.Image.1", "Icon" & sName, False)
                With cNode.Icon
                    .BorderStyle = fmBorderStyleNone
                    .Left = mcTLpad + msngRootLine + msngIndent * lLevel + msngChkBoxPad
                    .Top = mlVisCount * NodeHeight + msngTopIcon
                    '.AutoSize
                    .Width = mcIconSize
                    .Height = mcIconSize
                    .BackStyle = fmBackStyleTransparent
                    .Picture = mcolIcons(vKey)
                    .BackStyle = fmBackStyleTransparent
                    .Visible = True
                End With
            Else
                With cNode.Icon
                    If mbRedesign Then
                        .Left = mcTLpad + msngRootLine + msngIndent * lLevel + msngChkBoxPad
                    End If
                    .Top = mlVisCount * NodeHeight + msngTopIcon
                    .Visible = True
                End With
            End If
        Else
            sngIconPad = 0
        End If
    End If
    
    If cNode.Control Is Nothing Then
        
        Set cNode.Control = TreeControl.Controls.Add("Forms.label.1", sName, False)
        With cNode.Control
            .WordWrap = False
            .AutoSize = True
            .Left = mcTLpad + msngRootLine + msngIndent * lLevel + msngChkBoxPad + sngIconPad
            .Top = mcTLpad + msngTopLabel + mlVisCount * NodeHeight

            If Not mbFullWidth And mbGotIcons Then
                If cNode.hasIcon(vKey) Then
                    .PicturePosition = fmPicturePositionLeftCenter
                    .Picture = mcolIcons(vKey)
                End If
            End If

            If cNode.Bold Then .Font.Bold = True
            .WordWrap = False
            .AutoSize = True
            .Caption = cNode.Caption
            cNode.TextWidth = .Width

            If cNode.TextWidth + sngIconPad > msngMaxWidths(lLevel) Then
                msngMaxWidths(lLevel) = cNode.TextWidth + sngIconPad
            End If

            If mbFullWidth Then
                .AutoSize = False
                If .Width <= mcFullWidth Then .Width = mcFullWidth
            End If
            If cNode.BackColor Then
                .BackColor = cNode.BackColor
            End If
            If cNode.ForeColor Then
                .ForeColor = cNode.ForeColor
            End If
            
            If Len(cNode.ControlTipText) Then
                .ControlTipText = cNode.ControlTipText
            End If
            
            .Visible = True
        End With

    Else
        With cNode.Control
            If mbRedesign Then
                .Left = mcTLpad + msngRootLine + msngIndent * lLevel + sngIconPad + msngChkBoxPad

                If cNode.TextWidth + sngIconPad > msngMaxWidths(lLevel) Then
                    msngMaxWidths(lLevel) = cNode.TextWidth + sngIconPad
                End If
            End If

            .Top = mlVisCount * NodeHeight + mcTLpad + msngTopLabel
            .Visible = True
        End With

    End If

    mlVisCount = mlVisCount + 1
    mlVisOrder(mlVisCount) = cNode.Index
    cNode.VisIndex = mlVisCount

    Exit Sub

locErr:
    If Err.Number = 9 Then
        ' most likely an array needs enlarging
        If mlVisCount = UBound(mlVisOrder) + 1 Then
            ReDim Preserve mlVisOrder(LBound(mlVisOrder) To mlVisCount + 100)
            Resume
        ElseIf lLevel > UBound(msngMaxWidths) Then
            ReDim Preserve msngMaxWidths(LBound(msngMaxWidths) To lLevel + 5)
            Resume
        End If
    ElseIf Err.Number = 18 Then
        Err.Raise 18    ' user pressed ctrl-break, pass to BuildRoot
    Else
        Err.Raise Err.Number, "BuildNodeControls", Err.Description
    End If

End Sub

Private Sub RecalcMaxTextWidth()
Dim i As Long
Dim lLevel As Long
Dim cNode As clsNode
Dim sngIconPad As Single
Dim v

    For i = LBound(msngMaxWidths) To UBound(msngMaxWidths)
        msngMaxWidths(i) = 0
    Next
    
    For i = 1 To mlVisCount
        Set cNode = mcolNodes(mlVisOrder(i))
        lLevel = cNode.Level
        If Me.FullWidth Then
            sngIconPad = 0
            If cNode.hasIcon(v) Then
                sngIconPad = mcIconPad
            End If
        End If

        If cNode.TextWidth + sngIconPad > msngMaxWidths(lLevel) Then
            msngMaxWidths(lLevel) = cNode.TextWidth + sngIconPad
        End If
    Next

End Sub

Private Function MaxNodeWidth() As Single
    Dim lLevel As Long
    Dim sngMax As Single

    For lLevel = 0 To UBound(msngMaxWidths)
        If msngMaxWidths(lLevel) Then
            If mcTLpad + msngRootLine + msngIndent * lLevel + msngChkBoxPad + msngMaxWidths(lLevel) > sngMax Then
                sngMax = mcTLpad + msngRootLine + msngIndent * lLevel + msngChkBoxPad + msngMaxWidths(lLevel)
            End If
        End If
    Next
    MaxNodeWidth = sngMax
    
End Function

Friend Sub NodeEventRouter(cNode As clsNode, sControl As String, lAction As tvMouse, _
                           Optional Button As Integer, Optional Shift As Integer, Optional X As Single, Optional Y As Single)
Dim bFlag As Boolean
Dim lngViewable As Long
Dim cLastChild As clsNode

    If sControl = "Caption" Then

        If Not ActiveNode Is cNode Then
            Set ActiveNode = cNode
        Else
            SetActiveNodeColor
        End If

        If lAction = 1 Then  ' tvClick
            RaiseEvent Click(cNode)
            
        Else
                   
            ' RaiseEvent MouseAction(cNode, lAction, Button, Shift, X, Y)
        End If

    ElseIf sControl = "Expander" Then

        bFlag = Not ActiveNode Is cNode

        If bFlag Then
            Set ActiveNode = cNode
        End If

        BuildRoot False

        If cNode.Expanded Then
            If Not cNode.ChildNodes Is Nothing Then
                Set cLastChild = cNode.ChildNodes(cNode.ChildNodes.Count)
                If Not NodeIsVisible(cLastChild, lngViewable) Then
                    If lngViewable > cNode.ChildNodes.Count Then
                        ScrollToView cLastChild, Top1Bottom2:=2
                    Else
                        ScrollToView cNode, Top1Bottom2:=1
                    End If
                End If
            End If
        End If

        If bFlag Then
            RaiseEvent Click(cNode)
        End If

    ElseIf sControl = "Checkbox" Then

        RaiseEvent NodeCheck(cNode)

    End If

End Sub

Private Sub SetActiveNodeColor(Optional bInactive)

    If Not ActiveNode Is Nothing Then

        If IsMissing(bInactive) Then
            On Error Resume Next
            bInactive = Not Me.TreeControl Is Me.TreeControl.Parent.ActiveControl
            On Error GoTo 0
        End If

        With ActiveNode.Control
            If bInactive Then
            ''' when treeeview not in focus
            
                ResetActiveNodeColor moActiveNode
                '' just a grey border
                .BorderStyle = fmBorderStyleSingle
                .BorderColor = RGB(190, 190, 190)
                
                '' inactive colours
'                .BackColor = vbInactiveTitleBar
'                .ForeColor = vbWindowText
            Else
                ' in focus
                .BorderStyle = fmBorderStyleNone
                .BackColor = vbHighlight
                .ForeColor = vbHighlightText
            End If
        End With

    End If
End Sub

Private Sub ResetActiveNodeColor(cNode As clsNode)
    Dim lBColor As Long
    Dim lFColor As Long
    If Not cNode Is Nothing Then
        lBColor = cNode.BackColor
        lFColor = cNode.ForeColor
        With cNode.Control
            .BorderStyle = fmBorderStyleNone
            .BackColor = IIf(lBColor, lBColor, mlBackColor)
            .ForeColor = IIf(lFColor, lFColor, mlForeColor)
        End With
    End If
End Sub

Public Sub ScrollToView(Optional cNode As clsNode, _
                        Optional Top1Bottom2 As Long, _
                        Optional bCollapseOthers As Boolean)
    Dim bIsVisible As Boolean
    Dim bWasCollapsed As Boolean
    Dim lVisIndex As Long
    Dim sngTop As Single
    Dim sngBot As Single
    Dim sngVisHt As Single
    Dim sngScrollTop As Single
    Dim cTmp As clsNode

    If cNode Is Nothing Then
        Set cNode = ActiveNode
    End If

    If bCollapseOthers Then
        SetTreeExpansionLevel 0
    End If
    
    Set cTmp = cNode.ParentNode
    While Not cTmp.Caption = "RootHolder"
        If Not cTmp.Expanded Then
            bWasCollapsed = True
            cTmp.Expanded = True
        End If
        Set cTmp = cTmp.ParentNode
    Wend
    
    If bWasCollapsed Then
        BuildRoot False
    End If

    lVisIndex = cNode.VisIndex
    sngBot = mcTLpad + lVisIndex * NodeHeight
    sngTop = sngBot - NodeHeight

    With TreeControl
        sngVisHt = .InsideHeight
        If .ScrollBars = fmScrollBarsBoth Or .ScrollBars = fmScrollBarsHorizontal Then
            sngVisHt = sngVisHt - 15    ' roughly(?) width of a scrollbar
        End If

        bIsVisible = sngTop > .ScrollTop And _
                     sngBot < .ScrollTop + sngVisHt
        
        If Not bIsVisible Or Top1Bottom2 > 0 Then
        
            If Top1Bottom2 < 0 Then Top1Bottom2 = Top1Bottom2 * -1
            
            If Top1Bottom2 = 0 Then  ' place about 1/3 from top
                sngScrollTop = lVisIndex * NodeHeight - .InsideHeight / 3

            ElseIf Top1Bottom2 = 1 Then  ' scroll to top
                sngScrollTop = sngTop - mcTLpad
            Else
                sngScrollTop = sngBot - sngVisHt + mcTLpad    ' scroll to bottom
            End If

            If sngScrollTop < 0 Then
                sngScrollTop = 0
            End If

            .ScrollTop = sngScrollTop
        End If
    End With
End Sub

Private Sub SetTreeExpansionLevel(lLevel As Long, Optional lCurLevel As Long, _
                                          Optional cNode As clsNode, Optional bExit As Boolean = False)
    Dim cChild As clsNode
    If bExit Then Exit Sub
    If cNode Is Nothing Then

        For Each cNode In moRootHolder.ChildNodes
            If lLevel > -1 Then
                cNode.Expanded = True
            Else
                cNode.Expanded = False
            End If
            If Not cNode.ChildNodes Is Nothing Then
                For Each cChild In cNode.ChildNodes
                    cChild.Expanded = (lLevel > lCurLevel)
                    SetTreeExpansionLevel lLevel, lCurLevel + 1, cChild, False
                Next
            End If
        Next

    ElseIf Not cNode.ChildNodes Is Nothing Then
        For Each cChild In cNode.ChildNodes
            cChild.Expanded = (lLevel > lCurLevel)
            SetTreeExpansionLevel lLevel, lCurLevel + 1, cChild, False
        Next
    End If
    
End Sub

Private Function NextVisibleNodeInTree(ByRef cStartNode As clsNode, Optional bUp As Boolean = True) As clsNode
    Dim lStep As Long
    Dim lNextVis As Long

    On Error GoTo errH
    If bUp Then lStep = -1 Else lStep = 1

    If cStartNode Is Nothing Then
        Set NextVisibleNodeInTree = mcolNodes(1)
    Else

        lNextVis = cStartNode.VisIndex
        lNextVis = lNextVis + lStep
        If lNextVis >= 1 And lNextVis <= mlVisCount Then
            lNextVis = mlVisOrder(lNextVis)
            Set NextVisibleNodeInTree = mcolNodes(lNextVis)
        End If
    End If
    Exit Function
errH:
End Function

Private Sub Class_Initialize()

End Sub

Private Sub TreeControl_Click()

End Sub
Attribute VB_Name = "frmConfigureApplication"
Attribute VB_Base = "0{723EC827-47E3-455D-961D-9A12E036374E}{588CD5F4-F46E-458D-8EEF-F5D342F8F05F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

    Dim mshtConfiguration As Excel.Worksheet
    Dim mshtDataSetParts As Excel.Worksheet

Private Sub btnBAEDataExport_Click()
    Dim strSaveLabel As String
    
    On Error GoTo Err_Trap
    
    strSaveLabel = lblBAEDataExport.Caption
    lblBAEDataExport.Caption = "Export in progress....."
    lblBAEDataExport.ForeColor = &HC0&
    
    If MsgBox("All Part Data attributes, except for ITAR or EAR 600 attributes, will be output to a CSV file." & vbCrLf & _
               "Click OK to continue, Cancel to stop", _
               vbOKCancel, _
               "Export Part Data") = vbOK Then
        ' Export the NotYetKnown sheet data to CSV
        If modDSExportToCSV.DataExport("PARTDATA") Then
        End If
    End If
    
    lblBAEDataExport.Caption = strSaveLabel
    lblBAEDataExport.ForeColor = &H808000
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnBAEDataExport_Click"
    Exit Sub
End Sub

Private Sub btnBAEExportEAR_Click()
    Dim strSaveLabel As String
    
    On Error GoTo Err_Trap
    
    strSaveLabel = lblExportEAR.Caption
    lblExportEAR.Caption = "Export in progress....."
    lblExportEAR.ForeColor = &HC0&
    
    If MsgBox("EAR attributes of EAR Parts will be output to a CSV file." & vbCrLf & _
               "Click OK to continue, Cancel to stop", _
               vbOKCancel, _
               "Export EAR Part Data") = vbOK Then
        ' Export the NotYetKnown sheet data to CSV
        If modDSExportToCSV.DataExport("EAR") Then
        End If
    End If
    
    lblExportEAR.Caption = strSaveLabel
    lblExportEAR.ForeColor = &H808000
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnBAEExportEAR_Click"
    Exit Sub
End Sub

Private Sub btnBAEStructureExport_Click()
    Dim strSaveLabel As String
    
    On Error GoTo Err_Trap
    
    strSaveLabel = lblStructureExport.Caption
    lblStructureExport.Caption = "Export in progress....."
    lblStructureExport.ForeColor = &HC0&
    
    If MsgBox("The Part Structure will be output to a CSV file." & vbCrLf & _
               "Click OK to continue, Cancel to stop", _
               vbOKCancel, _
               "Export Part Structure") = vbOK Then
        ' Export the NotYetKnown sheet data to CSV
        If modDSExportToCSV.DataExport("STRUCTURE") Then
        End If
    End If
    
    lblStructureExport.Caption = strSaveLabel
    lblStructureExport.ForeColor = &H808000
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnBAEStructureExport_Click"
    Exit Sub
End Sub

Private Sub btnConfigClose_Click()
    Unload Me
End Sub

Private Sub btnSaveConfiguration_Click()
'
' Validate form data and save only if valid
'
    On Error GoTo Err_Trap
    
    If ValidConfigurationForm Then
        SaveConfigurationForm
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnSaveConfiguration_Click"
    Exit Sub
End Sub

Private Sub cmdSetImportChecksum_Click()
' Set the Structure Complete flag on the Configuration sheet

    On Error GoTo Err_Trap
    
    If mshtConfiguration.Cells(glngConfigIMPORTCHECKSUM, 2) = "ON" Then
        ' Currently it is ON - switch OFF
        mshtConfiguration.Cells(glngConfigIMPORTCHECKSUM, 2) = "OFF"
    Else
        ' Currently it is OFF - switch ON
        mshtConfiguration.Cells(glngConfigIMPORTCHECKSUM, 2) = "ON"
    End If
    DisplayChecksumButton
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmConfigureApplication.cmdSetImportChecksum_Click"
    Exit Sub
End Sub

Sub DisplayChecksumButton()
' Display the Import Checksum button according to ON or OFF
    Dim strImportChecksum As String
    
    On Error GoTo Err_Trap
    
    ' Read current flag setting
    strImportChecksum = mshtConfiguration.Cells(glngConfigIMPORTCHECKSUM, 2)
    If strImportChecksum = "ON" Then
        ' Import Checksum is ON
        frmConfigureApplication.cmdSetImportChecksum.Caption = "Checksum OFF"
        frmConfigureApplication.lblSetImportChecksum.ForeColor = &HC000&  ' Green
        frmConfigureApplication.lblSetImportChecksum.Caption = "Import Checksum is ON"
    Else
        ' Import Checksum is OFF
        frmConfigureApplication.cmdSetImportChecksum.Caption = "Checksum ON"
        frmConfigureApplication.lblSetImportChecksum.ForeColor = &HFF&  ' Red
        frmConfigureApplication.lblSetImportChecksum.Caption = "Import Checksum is OFF"
        mshtConfiguration.Cells(glngConfigIMPORTCHECKSUM, 2) = "OFF"
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmConfigureApplication.DisplayChecksumButton"
    Exit Sub
End Sub

Private Sub UserForm_Initialize()
    On Error GoTo Err_Trap

    Set mshtConfiguration = ThisWorkbook.Sheets("Configuration")
    frmConfigureApplication.Caption = modDSGeneral.GetApplicationTitle(True) & " - Configuration"
    
    LoadConfigurationForm
    
    DisplayChecksumButton

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "UserForm_Initialize"
    Exit Sub
End Sub

Private Function LoadConfigurationForm() As Boolean
'
' Load saved configuration Data on to form and fill combo boxes
'
    On Error GoTo Err_Trap
    
    LoadConfigurationForm = False
    
    LoadConfigurationComboData
    
    txtContractName.Text = mshtConfiguration.Cells(glngConfigCONTRACTNAME, 2)
    txtContractNumber.Text = mshtConfiguration.Cells(glngConfigCONTRACTNUMBER, 2)
    txtContractor.Text = mshtConfiguration.Cells(glngConfigCONTRACTORNAME, 2)
    txtConfigCAGECode.Text = mshtConfiguration.Cells(glngConfigCONTRACTORCAGECODE, 2)
    txtCDRL.Text = mshtConfiguration.Cells(glngConfigCDRL, 2)
    cboSubmissionNo.Value = mshtConfiguration.Cells(glngConfigSUBMISSIONNO, 2)
    cboSubmissionIssueNo.Value = mshtConfiguration.Cells(glngConfigSUBMISSIONISSUENO, 2)
    
    LoadConfigurationForm = True
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "LoadConfigurationForm"
    Exit Function
End Function

Private Function ValidConfigurationForm() As Boolean
'
' Validate Configuration form data
'
    Dim strTemp As String
    Dim strMessage As String
    
    ValidConfigurationForm = False
    
    On Error GoTo Err_Trap
    
    If Not modDSFormValidation.ValidStringTest(frmConfigureApplication.txtContractName, 5, 200, "No", True) Then
        strMessage = strMessage & lblContractName.Caption & " (minimum 5 characters)" & vbCrLf
    End If
    If Not modDSFormValidation.ValidStringNoSpaceTest(frmConfigureApplication.txtContractNumber, 5, 20, "No", True) Then
        strMessage = strMessage & lblContractNumber.Caption & " (invalid)" & vbCrLf
    End If
    If Not modDSFormValidation.ValidStringTest(frmConfigureApplication.txtContractor, 2, 100, "No", True) Then
        strMessage = strMessage & lblContractor.Caption & " (minimum 5 characters)" & vbCrLf
    End If
    If Not modDSFormValidation.ValidStringNoSpaceTest(frmConfigureApplication.txtConfigCAGECode, 5, 20, "No", True) Then
        strMessage = strMessage & lblConfigCAGECode.Caption & " (invalid)" & vbCrLf
    End If
    If Not modDSFormValidation.ValidStringNoSpaceTest(frmConfigureApplication.txtCDRL, 3, 10, "No", True) Then
        strMessage = strMessage & lblCDRL.Caption & " (invalid)" & vbCrLf
    End If
     
    If strMessage = "" Then
        ValidConfigurationForm = True
    Else
        MsgBox strMessage, vbOKOnly, "Configuration - Invalid Data"
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ValidConfigurationForm"
    Exit Function
End Function

Private Function SaveConfigurationForm() As Boolean
'
' Save entered form data to configuration sheet
'
    On Error GoTo Err_Trap
    
    SaveConfigurationForm = False
    
    mshtConfiguration.Cells(glngConfigCONTRACTNAME, 2) = txtContractName.Text
    mshtConfiguration.Cells(glngConfigCONTRACTNUMBER, 2) = txtContractNumber.Text
    mshtConfiguration.Cells(glngConfigCONTRACTORNAME, 2) = txtContractor.Text
    mshtConfiguration.Cells(glngConfigCDRL, 2) = txtCDRL.Text
    mshtConfiguration.Cells(glngConfigSUBMISSIONNO, 2) = cboSubmissionNo.Value
    mshtConfiguration.Cells(glngConfigSUBMISSIONISSUENO, 2) = cboSubmissionIssueNo.Value
    mshtConfiguration.Cells(glngConfigCONTRACTORCAGECODE, 2) = txtConfigCAGECode.Text
    
    UpdateMainForm ' Update Main form with current values
    
    ' Save the entire workbook
    Excel.ActiveWorkbook.Save
    
    SaveConfigurationForm = True
    
    MsgBox "Configuration has been saved", vbOKOnly, "Configuration"

    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "SaveConfigurationForm"
    Exit Function
End Function

Function UpdateMainForm() As Boolean
    
    On Error GoTo Err_Trap
    
    UpdateMainForm = False
    
    frmMain.txtMainContractName.Value = modDSGeneral.GetConfigurationData(glngConfigCONTRACTNAME)
    frmMain.txtMainContractNumber.Value = modDSGeneral.GetConfigurationData(glngConfigCONTRACTNUMBER)
    frmMain.txtMainContractorName.Value = modDSGeneral.GetConfigurationData(glngConfigCONTRACTORNAME)
    frmMain.txtMainContractorCAGECode.Value = modDSGeneral.GetConfigurationData(glngConfigCONTRACTORCAGECODE)
    frmMain.txtMainCDRLNo.Value = modDSGeneral.GetConfigurationData(glngConfigCDRL)
    frmMain.txtMainSubmission.Value = modDSGeneral.GetConfigurationData(glngConfigSUBMISSIONNO)
    frmMain.txtMainSubIssue.Value = modDSGeneral.GetConfigurationData(glngConfigSUBMISSIONISSUENO)
    
    UpdateMainForm = True
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "UpdateMainForm"
    Exit Function
End Function

Private Sub LoadConfigurationComboData()
'
' Set up combo select lists
'
    Dim intIndex As Integer
    
    On Error GoTo Err_Trap
    
    cboSubmissionNo.Clear
    For intIndex = 1 To 20
        cboSubmissionNo.AddItem intIndex
    Next intIndex

    cboSubmissionIssueNo.Clear
    For intIndex = 1 To 100
        cboSubmissionIssueNo.AddItem intIndex
    Next intIndex
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "LoadConfigurationComboData"
    Exit Sub
End Sub

Private Sub UnprotectDSSheet()
    Dim strAppPassword As String
    
    On Error GoTo Err_UnprotectDSSheets
    
    strAppPassword = ThisWorkbook.Sheets("Configuration").Cells(1, "AA")

    mshtDataSetParts.Unprotect strAppPassword

    Exit Sub

Err_UnprotectDSSheets:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "UnprotectDSSheet"
    Exit Sub
End Sub

Private Sub ProtectDSSheet()
    Dim strAppPassword As String
    
    On Error GoTo Err_ProtectDSSheets
    
    strAppPassword = ThisWorkbook.Sheets("Configuration").Cells(1, "AA")

    ' Unprotect before protect since protect is a toggle
    mshtDataSetParts.Unprotect strAppPassword
    
    mshtDataSetParts.Protect strAppPassword, userInterfaceOnly:=True

    Exit Sub

Err_ProtectDSSheets:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ProtectDSSheet"
    Exit Sub
End Sub


Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

End Sub
Attribute VB_Name = "frmContractorImport"
Attribute VB_Base = "0{7A697D01-7EC9-42FC-BF74-5174CD570A8D}{56BF62E9-AE14-4B02-94A5-9FACBBF0FFC4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Sub CheckFile()
    Dim myFile As String
    Dim textline As String
    
    myFile = Application.GetOpenFilename()
    Open myFile For Input As #1
    Do Until EOF(1)
        Line Input #1, textline
        MsgBox textline
    Loop
    
    Close #1
End Sub

Private Sub btnImport_Click()
    Dim fDialog As FileDialog
    Dim ImportFile As Workbook
    Dim strMessage As String
    
    Dim strFilename As String
    Dim textline As String
    
    Dim strImportChecksum As String
    Dim blnChecksumValid As Boolean
    
    On Error GoTo Err_btnImport
    
    modDSSecurity.UnprotectImportSheets
    
    Application.ScreenUpdating = False
    
    ' Read current IMPORTCHECKSUM setting
    strImportChecksum = mshtConfiguration.Cells(glngConfigIMPORTCHECKSUM, 2)
    
    Set fDialog = Application.FileDialog(msoFileDialogOpen)
    fDialog.Title = "Parent Parts Data Import"
    fDialog.Filters.Clear
    ' Limit to CSV only
    fDialog.Filters.Add "CSV", "*.csv", 1
    fDialog.InitialFileName = ""
    fDialog.AllowMultiSelect = False
    
    ' Display File Open Dialog Box
    If fDialog.Show = -1 Then
        ' Create workbook from selected file
        Set ImportFile = Workbooks.Open(fDialog.SelectedItems(1))
        
        If strImportChecksum = "ON" Then
            ' Check checksums
            blnChecksumValid = IsChecksumValid(ImportFile.FullName)
        Else
            ' No Checksum checking done - assume valid
            blnChecksumValid = True
        End If
           
        If blnChecksumValid Then
        
            ' Clear any old data
            mshtContractorImport.UsedRange.Delete (xlShiftUp)
        
            ' Format import sheet as text
            ImportFile.Sheets(1).Cells.NumberFormat = "@"
        
            ' Copy all contents into the required sheet in the application starting at A1
            ImportFile.Sheets(1).Range("A1").CurrentRegion.Copy _
                mshtContractorImport.Range("A1")
            ' Close the temporary workbook without saving it - discard it
            ImportFile.Close (False)
            Set ImportFile = Nothing
    
            If modDSContractorImport.ProcessImport Then
                ' Import has been processed
                strMessage = "Import Complete " & Chr(10) & Chr(13) & _
                             "Columns " & mshtContractorImport.UsedRange.Columns.Count & _
                             " Rows " & mshtContractorImport.UsedRange.Rows.Count - 1
                Application.ScreenUpdating = True
            Else
                ' Cancelled
                strMessage = "Import Cancelled"
                Application.ScreenUpdating = True
            End If
        Else
            ' Checksums invalid
            ' Close the temporary workbook without saving it - discard it
            ImportFile.Close (False)
            Set ImportFile = Nothing
            strMessage = "Import Stopped - File Checksum Invalid" & Chr(10) & Chr(13)
            Application.ScreenUpdating = True
        End If
    Else
        ' Cancelled
        strMessage = "Import Cancelled" & Chr(10) & Chr(13)
        Application.ScreenUpdating = True
    End If
    
    Set fDialog = Nothing
    
    modDSSecurity.ProtectImportSheets
                
    MsgBox strMessage, vbOKOnly, "Import"
    
    Exit Sub
    
Err_btnImport:
    Application.ScreenUpdating = True
    MsgBox Err.Description & " " & Err.Number & "" & Err.Source
    ProtectImportSheets
    Exit Sub
End Sub

Private Sub btnImportClose_Click()
    
    On Error GoTo Err_Trap
    
    Unload Me
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmContractorImport.btnImportClose_Click"
    Exit Sub
End Sub

Private Sub UserForm_Initialize()
    
    On Error GoTo Err_Trap
    
    modDSMain.InitializeVariables
    
    ' Format import storage sheets as text
    mshtContractorImport.Cells.NumberFormat = "@"
    
    frmContractorImport.Caption = GetApplicationTitle(True) & " - Import Data from BAE Systems"
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "UserForm_Initialize"
    Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

    On Error GoTo Err_Trap
    
    ' Refresh Main form values as they may have been changed by import
    frmMain.txtMainContractName.Value = modDSGeneral.GetConfigurationData(glngConfigCONTRACTNAME)
    frmMain.txtMainContractorName.Value = modDSGeneral.GetConfigurationData(glngConfigCONTRACTORNAME)
    frmMain.txtMainContractorCAGECode.Value = modDSGeneral.GetConfigurationData(glngConfigCONTRACTORCAGECODE)
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "UpdateMainForm"
    Exit Sub
End Sub
Attribute VB_Name = "frmDSCopyPart"
Attribute VB_Base = "0{AE4123CD-A826-408A-8C1C-4E01A5A07A19}{5290D048-AB41-4696-876E-8E2ECF51F357}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private Sub btnClose_Click()
    On Error GoTo Err_Trap
    
    Unload Me
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmDSCopyPart.btnClose_Click"
    Exit Sub
End Sub

Private Sub btnCopy_Click()
' Copy one Part's attributes to another
    Dim strOtherCPN As String
    Dim lngOtherCPNRow As Long
    
    On Error GoTo Err_Trap

    strOtherCPN = frmDSCopyPart.cboContractorPartNumberSelect.Value
    If MsgBox("All attributes from " & strOtherCPN & " will overwrite the current part, except for key fields." & vbCrLf & _
              "Are you sure you want to continue?", vbOKCancel, "Copy Part Data") = vbOK Then
        lngOtherCPNRow = modDSEntry.FindPartRow(strOtherCPN)
        If modDSCopyPart.CopyPartDataColumns(lngOtherCPNRow) Then
        End If
        mstrDSActionEvents = gstrActionEventsNone ' Prevent events
        modDSEntry.LoadDSPart ("frmDSEntry")
        mstrDSActionEvents = gstrActionEventsAll ' Allow events again
        mblnDSFormChanged = False ' Form data has been refreshed - clear the form changed flag
        Unload Me
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnCopy_Click"
    Exit Sub
End Sub

Private Sub cboContractorPartNumberSelect_Change()

End Sub

Private Sub UserForm_Click()

End Sub

Private Sub UserForm_Initialize()
    On Error GoTo Err_Trap

    frmDSCopyPart.Caption = modDSGeneral.GetApplicationTitle(True) & " - Copy Part Attributes"
    SetUpCopyComboValues
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "UserForm_Initialize"
    Exit Sub
End Sub
Attribute VB_Name = "frmDSEntry"
Attribute VB_Base = "0{F02DDF12-8E72-4B27-BC17-4F04822078AA}{53D5A40F-2CF4-41EA-83B1-328761D27660}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnClose_Click()
    
    On Error GoTo Err_Trap
    
    ' Confirm action before moving away from the currently displayed part
    If ActionConfirm(mblnDSFormChanged) = True Then
        modDSMain.MainECShowHide
        Unload Me
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnClose_Click"
    Exit Sub
End Sub

Private Sub btnDSCopyPart_Click()
    ' Open the Copy Part form
    frmDSCopyPart.Show
End Sub

Private Sub btnDSDelete_Click()
'
' Delete the current record and set record position as appropriate
'
    Dim lngColumns As Long
    Dim lngLoop As Long
    Dim strContractorPartNumber As String
    Dim strKeyFound As String
    
    On Error GoTo Err_Trap

    mstrDSActionEvents = gstrActionEventsNone ' Prevent events
    
    If mlngCurrentRow > 1 Then
        ' A part is displayed
        If IsParentPart(mlngCurrentRow) = False Then
            ' It is not a Parent Part - continue
            
            ' Read the Contractor Part Number
            strContractorPartNumber = modDSEntry.ReadFieldValueString(mlngCurrentRow, gstrContractorPartNumber)
            ' Look for it in the Part Structure Diagram
            strKeyFound = modDSStructure.TreeFind(strContractorPartNumber)
            If strKeyFound = "" Then
                ' Part is not present in the Part Structure Diagram - continue
            
                If MsgBox("Are you sure you want to delete this part data?", vbOKCancel, "Part Data - Delete") = vbOK Then
        
                    ' Delete row
                    mshtPartsData.Cells(mlngCurrentRow, 1).EntireRow.Delete
                    ' Re-establish number of rows
                    mlngTotalRecs = mshtPartsData.UsedRange.Rows.Count
                    If mlngTotalRecs <= 1 Then
                        ' No data left
                        modDSEntry.SetUpNewPart  ' Set up for a New Part
                    Else
                        If mlngCurrentRow > mlngTotalRecs Then
                            ' Row position is beyond end of the data - set to last row of data (may be 0)
                            mlngCurrentRow = mlngTotalRecs
                        Else
                            ' Leave on row after deleted row
                        End If
                
                        modDSEntry.LoadDSPart ("frmDSEntry") ' Load the current record
                    End If
            
                End If
            Else
                ' Part is still present in the Part Structure Diagram - cannot delete
                MsgBox "Cannot delete the Part as it is still present in the Part Structure Diagram!", vbOKOnly, "Part Data - Delete"
            End If
        Else
            ' This is a Parent Part - cannot delete
            MsgBox "Cannot delete a Parent Part!", vbOKOnly, "Part Data - Delete"
        End If
    End If
    
    mstrDSActionEvents = gstrActionEventsAll ' Allow events again
    
    SetButtons ' Enable/Disable buttons
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnDSDelete_Click"
    Exit Sub
End Sub

Private Sub btnDSEntryAuxOne_Click()
    ' Open the Auxiliary Services One Data Entry form
    frmDSEntryAuxOne.Show
End Sub

Private Sub btnDSEntryAuxThree_Click()
    ' Open the Auxiliary Services Three Data Entry form
    frmDSEntryAuxThree.Show
End Sub

Private Sub btnDSEntryAuxTwo_Click()
    ' Open the Auxiliary Services Two Data Entry form
    frmDSEntryAuxTwo.Show
End Sub

Private Sub btnDSEntryElec_Click()
    ' Open the Electrical Data Entry form
    frmDSEntryElec.Show
End Sub

Private Sub btnDSExportControlled_Click()
    On Error GoTo Err_Trap
    
    mstrDSActionEvents = gstrActionEventsNone ' Prevent all events
    
    If mlngCurrentRow <= 1 Then
        MsgBox "Operates on SAVED Part Data only", vbInformation, "SAVED Part Data - Export-Control Attributes"
    ElseIf mblnDSFormChanged = True Then
        MsgBox "Please save your changes" & vbCrLf & "Export-Control report operates on SAVED Part Data only", vbInformation, "SAVED Part Data - Export-Control Attributes"
    Else
        ' Compile list of Export-Control attributes on the NotYetKnown report sheet
        If modDSNotYetKnown.checkNotYetKnown(mlngCurrentRow, True, "EC") Then
        End If
    End If
    
    mstrDSActionEvents = gstrActionEventsAll ' Allow all events again
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnDSExportControlled_Click"
    Exit Sub
End Sub

Private Sub btnDSNewPartClear_Click()
'
' Set up for entry of a New Part - all fields clear
'
    On Error GoTo Err_Trap

    ' Confirm action before moving away from the currently displayed part
    If ActionConfirm(mblnDSFormChanged) = True Then
        mstrDSActionEvents = gstrActionEventsNone ' Prevent events
        modDSEntry.SetUpNewPart ' Set up for a New Part
        mstrDSActionEvents = gstrActionEventsAll ' Allow events again
        mcboDSFindOrig = cboDSFind.Value
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnDSNewPartClear_Click"
    Exit Sub
End Sub

Private Sub btnDSNewPartCurrentData_Click()
'
' Set up for entry of a New Part - form fields copied from current part
'
    On Error GoTo Err_Trap
    
    ' Confirm action before moving away from the currently displayed part
    If ActionConfirm(mblnDSFormChanged) = True Then
        mstrDSActionEvents = gstrActionEventsNone ' Prevent events
        modDSEntry.SetUpNewPartCurrentFields ' Set up for a New Part, keeping current form data, except key fields
        mstrDSActionEvents = gstrActionEventsAll ' Allow events again
        mcboDSFindOrig = cboDSFind.Value
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnDSNewPartClear_Click"
    Exit Sub
End Sub

Private Sub btnDSNext_Click()
'
' Move to next row if possible
'
    On Error GoTo Err_Trap
    
    mstrDSActionEvents = gstrActionEventsNone
    
    ' Confirm action before moving away from the currently displayed part
    If ActionConfirm(mblnDSFormChanged) = True Then
        mlngTotalRecs = mshtPartsData.UsedRange.Rows.Count
        If mlngCurrentRow > 1 And mlngCurrentRow < mlngTotalRecs Then
            mlngCurrentRow = mlngCurrentRow + 1
            modDSEntry.LoadDSPart ("frmDSEntry")
        ElseIf mlngCurrentRow <= 1 And mlngTotalRecs > 1 Then
            mlngCurrentRow = 2
            modDSEntry.LoadDSPart ("frmDSEntry")
        End If
    End If
    
    mstrDSActionEvents = gstrActionEventsAll
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnDSNext_Click"
    Exit Sub
End Sub

Private Sub btnDSNotYetKnown_Click()
    On Error GoTo Err_Trap
    
    mstrDSActionEvents = gstrActionEventsNone ' Prevent all events
    
    If mlngCurrentRow <= 1 Then
        MsgBox "Operates on SAVED Part Data only", vbInformation, "SAVED Part Data - Not Yet Known Attributes"
    ElseIf mblnDSFormChanged = True Then
        MsgBox "Please save your changes" & vbCrLf & "Not Yet Known report operates on SAVED Part Data only", vbInformation, "SAVED Part Data - Not Yet Known Attributes"
    Else
        ' Compile list of NYK on the NotYetKnown report sheet
        If modDSNotYetKnown.checkNotYetKnown(mlngCurrentRow, True, "NYK") Then
        End If
    End If
    
    mstrDSActionEvents = gstrActionEventsAll ' Allow all events again
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnDSNotYetKnown_Click"
    Exit Sub
End Sub

Private Sub btnDSPrevious_Click()
'
' Move to previous row if possible
'
    On Error GoTo Err_Trap
    
    mstrDSActionEvents = gstrActionEventsNone ' Prevent all events
    
    ' Confirm action before moving away from the currently displayed part
    If ActionConfirm(mblnDSFormChanged) = True Then
        mlngTotalRecs = mshtPartsData.UsedRange.Rows.Count
        If mlngCurrentRow > 2 Then
            mlngCurrentRow = mlngCurrentRow - 1
            modDSEntry.LoadDSPart ("frmDSEntry")
        ElseIf mlngCurrentRow <= 1 And mlngTotalRecs > 1 Then
            mlngCurrentRow = 2
            modDSEntry.LoadDSPart ("frmDSEntry")
        End If
    End If

    mstrDSActionEvents = gstrActionEventsAll ' Allow all events again
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnDSPrevious_Click"
    Exit Sub
End Sub

Private Sub btnDSSave_Click()
'
' Validate fields
' Add new part or update existing part as appropriate
'
    Dim strValidationMessage As String
    
    On Error GoTo Err_Trap
    
    mstrDSActionEvents = gstrActionEventsNone ' Prevent all events
    
    strValidationMessage = modDSFormValidation.ValidForm("frmDSEntry")
    
    If strValidationMessage = "" Then
        If SavePart Then
        End If

        modDSEntry.SetButtons ' Enable/Disable buttons
    Else
        MsgBox strValidationMessage, vbExclamation, "Invalid Fields"
    End If
    
    mstrDSActionEvents = gstrActionEventsAll ' Allow all events again

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnDSSave_Click"
    Exit Sub
End Sub

Private Function SavePart() As Boolean
'
' Add new part or update existing part as appropriate
'
    On Error GoTo Err_Trap
    
    If mblnNewDS = True Then
        ' Should be adding a new part
        If modDSEntry.ReturnPartIfExists(frmDSEntry.txtContractorPartNumber.Value) = "" Then
            AddNewPart ' Add part always based on frmDSEntry fields
            mblnDSFormChanged = False
            LoadDSFind
            SetDSFind
            MsgBox "New Part has been added", vbOKOnly, "Part Data - Add New Part"
        Else
            ' This Part already exists and cannot be added again
            MsgBox "This part already exists", vbOKOnly, "Part Data - Add New Part"
        End If
    Else
        ' Should be updating an existing part
        If mlngCurrentRow > 1 Then
            If modDSEntry.ReturnPartIfDuplicated(frmDSEntry.txtContractorPartNumber.Value) = "" Then
                UpdatePart ("frmDSEntry") ' Updates part based on frmDSEntry fields
                mblnDSFormChanged = False
                LoadDSFind
                SetDSFind
                MsgBox "Part has been updated", vbOKOnly, "Part Data - Update Part"
            Else
                ' This Part already exists and cannot be added again
                MsgBox "You cannot change the key field to this value as it already exists", vbOKOnly, "Part Data - Update Part"
            End If
        Else
            ' Invalid row number - cannot update!
            MsgBox "Cannot update - no known record", vbOKOnly, "Part Data - Update Part"
        End If
    End If
    
    SavePart = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "SavePart"
    SavePart = False
    Exit Function
End Function

Private Sub btnFindContractorPartNumber_Click()
'
' Search for a match on the text entered in the Contractor Part Number find box,
' and set the combo box to that row if a match found
' Changing the combo box will trigger its change event and display the found part.
'
    Dim strFindContractorPartNumber As String
    Dim lngCurrentRowSave As Long
    
    On Error GoTo Err_Trap
    
    If mstrDSActionEvents = gstrActionEventsAll Then
        ' All events allowed

        lngCurrentRowSave = mlngCurrentRow ' Save current row
        mlngCurrentRow = 0
        
        ' Search for a match/partial match on the entered text
        strFindContractorPartNumber = modDSEntry.FindContractorPartNumber(txtFindContractorPartNumber.Value)
        
        If strFindContractorPartNumber <> "" Then
            ' Match found - set combo to that value
            cboDSFind.Value = strFindContractorPartNumber
        Else
            ' No match found
            MsgBox "Could not find " & txtFindContractorPartNumber.Value, vbOKCancel, "Part Data - Find Contractor Part Number"

            ' Remain on current row
            mlngCurrentRow = lngCurrentRowSave  ' Restore current row
        End If
    End If
    
    mcboDSFindOrig = cboDSFind.Value
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnFindContractorPartNumber_Click"
    Exit Sub
End Sub

Private Sub cboAttribTrigger_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboAttribTrigger_Change()
    If GetComboValue(cboAttribTrigger) <> "" Then
        If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboAttribTrigger) Then
        End If
    End If
End Sub

Private Sub cboAttribTrigger_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboAttribTrigger) Then
    End If
End Sub

Private Sub cboAttribTrigger_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboAttribTrigger) Then
    End If
End Sub

Private Sub cboCanStoreOutside_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboCertificationProvided_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboCertificationProvided_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboCIAnalScaleUnits_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboCIAnalScaleUnits_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboCIAnalScaleUnits) Then
    End If
End Sub

Private Sub cboCICalibRangeUnits_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboCICalibRangeUnits_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboCICalibRangeUnits) Then
    End If
End Sub

Private Sub cboCICon01ConType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboCICon01ConType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboCICon01ConType) Then
    End If
End Sub

Private Sub cboCICon01ConType_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboCICon01ConType) Then
    End If
End Sub

Private Sub cboCICon01ConType_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboCICon01ConType) Then
    End If
End Sub

Private Sub cboCICon01FlangeType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboCICon01FlangeType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboCICon01FlangeType) Then
    End If
End Sub

Private Sub cboCICon01ThreadType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboCICon01ThreadType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboCICon01ThreadType) Then
    End If
End Sub

Private Sub cboCICon02ConType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboCICon02ConType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboCICon02ConType) Then
    End If
End Sub

Private Sub cboCICon02ConType_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboCICon02ConType) Then
    End If
End Sub

Private Sub cboCICon02ConType_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboCICon02ConType) Then
    End If
End Sub

Private Sub cboCICon02FlangeType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboCICon02FlangeType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboCICon02FlangeType) Then
    End If
End Sub

Private Sub cboCICon02ThreadType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboCICon02ThreadType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboCICon02ThreadType) Then
    End If
End Sub

Private Sub cboCICon03ConType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboCICon03ConType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboCICon03ConType) Then
    End If
End Sub

Private Sub cboCICon03ConType_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboCICon03ConType) Then
    End If
End Sub

Private Sub cboCICon03ConType_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboCICon03ConType) Then
    End If
End Sub

Private Sub cboCICon03FlangeType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboCICon03FlangeType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboCICon03FlangeType) Then
    End If
End Sub

Private Sub cboCICon03ThreadType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboCICon03ThreadType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboCICon03ThreadType) Then
    End If
End Sub

Private Sub cboCINoOfProcCon_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboCINoOfProcCon_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboCINoOfProcCon) Then
    End If
End Sub

Private Sub cboCINoOfProcCon_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboCINoOfProcCon) Then
    End If
End Sub

Private Sub cboCINoOfProcCon_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboCINoOfProcCon) Then
    End If
End Sub

Private Sub cboConsApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboConsApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboConsApp) Then
    End If
End Sub

Private Sub cboCycleLifeApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboCycleLifeApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboCycleLifeApp) Then
    End If
End Sub

Private Sub cboDSFind_Change()
'
' Get the mlngCurrentRow row number from the selected key value
'
    Dim rngMatchRange As Range
    Dim lngCurrentRowSave As Long
    
    On Error GoTo Err_Trap
    
    If mstrDSActionEvents = gstrActionEventsAll Then
        ' All events allowed

        lngCurrentRowSave = mlngCurrentRow ' Save current row
        mlngCurrentRow = 0
        
        ' Search column one for first match
        Set rngMatchRange = mshtPartsData.UsedRange.Columns(1).Find(cboDSFind.Text)
        
        If Not rngMatchRange Is Nothing Then
            ' Match found then load record
            mlngCurrentRow = rngMatchRange.Cells.Row
            If mlngCurrentRow > 1 And _
               mlngCurrentRow <> lngCurrentRowSave Then
                ' Moving away from currently displayed part
                ' Confirm action before moving away from the currently displayed part
                If ActionConfirm(mblnDSFormChanged) = True Then
                    mstrDSActionEvents = gstrActionEventsNone ' Prevent events
                    modDSEntry.LoadDSPart ("frmDSEntry")
                    mstrDSActionEvents = gstrActionEventsAll ' Allow events again
                Else
                    mlngCurrentRow = lngCurrentRowSave  ' Restore current row
                End If
            Else
                ' top row match does not count as it is the header row
                mlngCurrentRow = lngCurrentRowSave  ' Restore current row
            End If
        Else
            ' no match found
            ' Set up for a New Part
            mstrDSActionEvents = gstrActionEventsNone ' Prevent events
            modDSEntry.SetUpNewPart
            mstrDSActionEvents = gstrActionEventsAll ' Allow events again
        End If
    End If
    
    mcboDSFindOrig = cboDSFind.Value
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "cboDSFind_Change"
    Exit Sub
End Sub

Private Sub cboDurableLifeApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboDurableLifeApp_Change()
    If GetComboValue(cboDurableLifeApp) <> "" Then
        If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboDurableLifeApp) Then
        End If
    End If
End Sub

Private Sub cboExportControlApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboExportControlApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboExportControlApp) Then
    End If
End Sub

Private Sub cboExportControlType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboExportControlType_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboFlexHoseCategory_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboFlexHoseCategory_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboForkLiftApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboForkLiftApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboForkLiftApp) Then
    End If
End Sub

Private Sub cboHazardousMaterial_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboHazardousMaterial_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboInBuildMaintApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboInBuildMaintApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboInBuildMaintApp) Then
    End If
End Sub

Private Sub cboInStoreMaintApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboInStoreMaintApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboInStoreMaintApp) Then
    End If
End Sub

Private Sub cboLiftLoadHandApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboLiftLoadHandApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboLiftLoadHandApp) Then
    End If
End Sub

Private Sub cboLloydsCertified_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboLloydsCertified_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboMaterialFinishApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboMaterialFinishApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboMaterialFinishApp) Then
    End If
End Sub

Private Sub cboMaterialGrade_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboMaterialGrade_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboMaterialGrade) Then
    End If
End Sub

Private Sub cboMaterialType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboMaterialType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboMaterialType) Then
    End If
End Sub

Private Sub cboMaterialType_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboMaterialType) Then
    End If
End Sub

Private Sub cboMaterialType_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboMaterialType) Then
    End If
End Sub

Private Sub cboMountType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboMountType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboMountType) Then
    End If
End Sub

Private Sub cboMTBFApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboMTBFApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboMTBFApp) Then
    End If
End Sub

Private Sub cboMTBFApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboMTBFApp) Then
    End If
End Sub

Private Sub cboMTBFApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboMTBFApp) Then
    End If
End Sub

Private Sub cboMTBFSource_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboMTBFSource_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboMTBFSource) Then
    End If
End Sub

Private Sub cboMTBFSource_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboMTBFSource) Then
    End If
End Sub

Private Sub cboMTBFSource_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboMTBFSource) Then
    End If
End Sub

Private Sub cboMTTRApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboMTTRApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboMTTRApp) Then
    End If
End Sub

Private Sub cboMTTRApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboMTTRApp) Then
    End If
End Sub

Private Sub cboMTTRApp_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboMTTRApp) Then
    End If
End Sub

Private Sub cboMTTRSource_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboMTTRSource_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboMTTRSource) Then
    End If
End Sub

Private Sub cboMTTRSource_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboMTTRSource) Then
    End If
End Sub

Private Sub cboMTTRSource_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboMTTRSource) Then
    End If
End Sub

Private Sub cboNoiseCommentsApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboNoiseCommentsApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboNoiseCommentsApp) Then
    End If
End Sub

Private Sub cboOpEnvMaxRelHumApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboOpEnvMaxRelHumApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboOpEnvMaxRelHumApp) Then
    End If
End Sub

Private Sub cboOpEnvMaxTempApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboOpEnvMaxTempApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboOpEnvMaxTempApp) Then
    End If
End Sub

Private Sub cboOpEnvMinRelHumApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboOpEnvMinRelHumApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboOpEnvMinRelHumApp) Then
    End If
End Sub

Private Sub cboOpEnvMinTempApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboOpEnvMinTempApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboOpEnvMinTempApp) Then
    End If
End Sub

Private Sub chkCommon_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkCommon) Then
    End If
End Sub

Private Sub cboPhysAMaintEnvReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboPhysAMaintEnvReq_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboPhysAMaintEnvReq) Then
    End If
End Sub

Private Sub cboRadioactiveMaterial_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboRadioactiveMaterial_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboResilientlMountApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboResilientlMountApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboResilientlMountApp) Then
    End If
End Sub

Private Sub cboShelfLifeApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboShelfLifeApp_Change()
    If GetComboValue(cboShelfLifeApp) <> "" Then
        If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboShelfLifeApp) Then
        End If
    End If
End Sub

Private Sub cboShoreSupportApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboShoreSupportApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboShoreSupportApp) Then
    End If
End Sub

Private Sub cboSpecialHandApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboSpecialHandApp_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboSpecialHandCondApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboSpecialHandCondApp_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboSpecialInstalApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboSpecialInstalApp_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboSpecialPackApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboSpecialPackApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboSpecialPackApp) Then
    End If
End Sub

Private Sub cboSpecialPackApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboSpecialPackApp) Then
    End If
End Sub

Private Sub cboSpecialPackApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboSpecialPackApp) Then
    End If
End Sub

Private Sub cboSpecialPackReusable_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboSpecialPackReusable_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboSpecialProtectApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboSpecialProtectApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboSpecialProtectApp) Then
    End If
End Sub

Private Sub cboSpecialProtectApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboSpecialProtectApp) Then
    End If
End Sub

Private Sub cboSpecialProtectApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboSpecialProtectApp) Then
    End If
End Sub

Private Sub cboSpecialStoreApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboSpecialStoreApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboSpecialStoreApp) Then
    End If
End Sub

Private Sub cboSpecialStoreApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboSpecialStoreApp) Then
    End If
End Sub

Private Sub cboSpecialStoreApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboSpecialStoreApp) Then
    End If
End Sub

Private Sub cboSupTestEquipTypeApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboSupTestEquipTypeApp_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboTrackedItemApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboTrackedItemApp_Change()
    If GetComboValue(cboTrackedItemApp) <> "" Then
        If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboTrackedItemApp) Then
        End If
    End If
End Sub

Private Sub cboTrackedItemApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboTrackedItemApp) Then
    End If
End Sub

Private Sub cboTrackedItemApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboTrackedItemApp) Then
    End If
End Sub

Private Sub cboTrackedItemType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboTrackedItemType_Change()
    If GetComboValue(cboTrackedItemType) <> "" Then
        If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboTrackedItemType) Then
        End If
    End If
End Sub

Private Sub cboURNNoOfVibSrc_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboURNNoOfVibSrc_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboURNNoOfVibSrc) Then
    End If
End Sub

Private Sub cboURNNoOfVibSrc_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboURNNoOfVibSrc) Then
    End If
End Sub

Private Sub cboURNNoOfVibSrc_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboURNNoOfVibSrc) Then
    End If
End Sub

Private Sub cboUsefulLifeApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboUsefulLifeApp_Change()
    If GetComboValue(cboUsefulLifeApp) <> "" Then
        If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboUsefulLifeApp) Then
        End If
    End If
End Sub

Private Sub cboValve01EndConType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboValve01EndConType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboValve01EndConType) Then
    End If
End Sub

Private Sub cboValve01FlangeType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboValve01FlangeType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboValve01FlangeType) Then
    End If
End Sub

Private Sub cboValve01ThreadType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboValve01ThreadType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboValve01ThreadType) Then
    End If
End Sub

Private Sub cboValve02EndConType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboValve02EndConType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboValve02EndConType) Then
    End If
End Sub

Private Sub cboValve02FlangeType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboValve02FlangeType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboValve02FlangeType) Then
    End If
End Sub

Private Sub cboValve02ThreadType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboValve02ThreadType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboValve02ThreadType) Then
    End If
End Sub

Private Sub cboValve03EndConType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboValve03EndConType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboValve03EndConType) Then
    End If
End Sub

Private Sub cboValve03FlangeType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboValve03FlangeType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboValve03FlangeType) Then
    End If
End Sub

Private Sub cboValve03ThreadType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboValve03ThreadType_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboValve03ThreadType) Then
    End If
End Sub

Private Sub cboValveNoOfEndCon_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboValveNoOfEndCon_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboValveNoOfEndCon) Then
    End If
End Sub

Private Sub cboValveNoOfEndCon_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboValveNoOfEndCon) Then
    End If
End Sub

Private Sub cboValveNoOfEndCon_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboValveNoOfEndCon) Then
    End If
End Sub

Private Sub cboVibSrc01DrivenUnit_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboVibSrc01DrivenUnit_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboVibSrc01DrivenUnit) Then
    End If
End Sub

Private Sub cboVibSrc01Type_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboVibSrc01Type_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboVibSrc01Type) Then
    End If
End Sub

Private Sub cboVibSrc01TypeOfDrive_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboVibSrc01TypeOfDrive_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboVibSrc01TypeOfDrive) Then
    End If
End Sub

Private Sub cboVibSrc02DrivenUnit_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboVibSrc02DrivenUnit_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboVibSrc02DrivenUnit) Then
    End If
End Sub

Private Sub cboVibSrc02Type_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboVibSrc02Type_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboVibSrc02Type) Then
    End If
End Sub

Private Sub cboVibSrc02TypeOfDrive_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboVibSrc02TypeOfDrive_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboVibSrc02TypeOfDrive) Then
    End If
End Sub

Private Sub cboVibSrc03DrivenUnit_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboVibSrc03DrivenUnit_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboVibSrc03DrivenUnit) Then
    End If
End Sub

Private Sub cboVibSrc03Type_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboVibSrc03Type_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboVibSrc03Type) Then
    End If
End Sub

Private Sub cboVibSrc03TypeOfDrive_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboVibSrc03TypeOfDrive_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboVibSrc03TypeOfDrive) Then
    End If
End Sub

Private Sub cboVibSrc04DrivenUnit_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboVibSrc04DrivenUnit_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboVibSrc04DrivenUnit) Then
    End If
End Sub

Private Sub cboVibSrc04Type_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboVibSrc04Type_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboVibSrc04Type) Then
    End If
End Sub

Private Sub cboVibSrc04TypeOfDrive_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboVibSrc04TypeOfDrive_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboVibSrc04TypeOfDrive) Then
    End If
End Sub

Private Sub cboWeightUOM_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboWeightUOM_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboWeightUOM) Then
    End If
End Sub

Private Sub cboWeightWetAvailable_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboWeightWetAvailable_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboWeightWetAvailable) Then
    End If
End Sub

Private Sub cboWHeatGenApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboWHeatGenApp_Change()
    If GetComboValue(cboWHeatGenApp) <> "" Then
        If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboWHeatGenApp) Then
        End If
    End If
End Sub

Private Sub cboWindSealMechApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboWindSealMechApp_Change()
    If GetComboValue(cboWindSealMechApp) <> "" Then
        If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboWindSealMechApp) Then
        End If
    End If
End Sub

Private Sub cboWLoadApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboWLoadApp_Change()
    If GetComboValue(cboWLoadApp) <> "" Then
        If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboWLoadApp) Then
        End If
    End If
End Sub

Private Sub cboWLoadSafeApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboWLoadSafeApp_Change()
    If GetComboValue(cboWLoadSafeApp) <> "" Then
        If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboWLoadSafeApp) Then
        End If
    End If
End Sub

Private Sub cboWLoadTestApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboWLoadTestApp_Change()
    If GetComboValue(cboWLoadTestApp) <> "" Then
        If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboWLoadTestApp) Then
        End If
    End If
End Sub

Private Sub chkAuxServicesOne_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkAuxServicesOne_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkCertification_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub chkCertification_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkCertification) Then
    End If
End Sub

Private Sub chkCertification_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkCertification_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkCI_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkCI) Then
    End If
End Sub

Private Sub chkCI_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkCI_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkCons_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkCons) Then
    End If
End Sub

Private Sub chkCons_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkCons_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkCritFail_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkCritFail) Then
    End If
End Sub

Private Sub chkCritFail_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkCritFail_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkECCIAccuracy_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCIAccuracy) Then
    End If
End Sub

Private Sub chkECCIActualPFD_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCIActualPFD) Then
    End If
End Sub

Private Sub chkECCIAnalScaleDetails_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCIAnalScaleDetails) Then
    End If
End Sub

Private Sub chkECCIAnalScaleMax_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCIAnalScaleMax) Then
    End If
End Sub

Private Sub chkECCIAnalScaleMin_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCIAnalScaleMin) Then
    End If
End Sub

Private Sub chkECCIAnalScaleUnits_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCIAnalScaleUnits) Then
    End If
End Sub

Private Sub chkECCICalibRangeDetails_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICalibRangeDetails) Then
    End If
End Sub

Private Sub chkECCICalibRangeMax_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICalibRangeMax) Then
    End If
End Sub

Private Sub chkECCICalibRangeMin_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICalibRangeMin) Then
    End If
End Sub

Private Sub chkECCICalibRangeUnits_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICalibRangeUnits) Then
    End If
End Sub

Private Sub chkECCICon01ConOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon01ConOther) Then
    End If
End Sub

Private Sub chkECCICon01ConType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon01ConType) Then
    End If
End Sub

Private Sub chkECCICon01FlangeOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon01FlangeOther) Then
    End If
End Sub

Private Sub chkECCICon01FlangeType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon01FlangeType) Then
    End If
End Sub

Private Sub chkECCICon01NomBore_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon01NomBore) Then
    End If
End Sub

Private Sub chkECCICon01ThreadOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon01ThreadOther) Then
    End If
End Sub

Private Sub chkECCICon01ThreadType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon01ThreadType) Then
    End If
End Sub

Private Sub chkECCICon02ConOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon02ConOther) Then
    End If
End Sub

Private Sub chkECCICon02ConType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon02ConType) Then
    End If
End Sub

Private Sub chkECCICon02FlangeOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon02FlangeOther) Then
    End If
End Sub

Private Sub chkECCICon02FlangeType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon02FlangeType) Then
    End If
End Sub

Private Sub chkECCICon02NomBore_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon02NomBore) Then
    End If
End Sub

Private Sub chkECCICon02ThreadOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon02ThreadOther) Then
    End If
End Sub

Private Sub chkECCICon02ThreadType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon02ThreadType) Then
    End If
End Sub

Private Sub chkECCICon03ConOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon03ConOther) Then
    End If
End Sub

Private Sub chkECCICon03ConType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon03ConType) Then
    End If
End Sub

Private Sub chkECCICon03FlangeOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon03FlangeOther) Then
    End If
End Sub

Private Sub chkECCICon03FlangeType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon03FlangeType) Then
    End If
End Sub

Private Sub chkECCICon03NomBore_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon03NomBore) Then
    End If
End Sub

Private Sub chkECCICon03ThreadOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon03ThreadOther) Then
    End If
End Sub

Private Sub chkECCICon03ThreadType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCICon03ThreadType) Then
    End If
End Sub

Private Sub chkECCIMarking_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCIMarking) Then
    End If
End Sub

Private Sub chkECCIModelNo_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCIModelNo) Then
    End If
End Sub

Private Sub chkECCINoOfProcCon_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCINoOfProcCon) Then
    End If
End Sub

Private Sub chkECCIRangeDown_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCIRangeDown) Then
    End If
End Sub

Private Sub chkECCIStability_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCIStability) Then
    End If
End Sub

Private Sub chkECCIStabilityPerc_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCIStabilityPerc) Then
    End If
End Sub

Private Sub chkECCritFailTemp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCritFailTemp) Then
    End If
End Sub

Private Sub chkECBaseSparesApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECBaseSparesApp) Then
    End If
End Sub

Private Sub chkECBaseSparesQuantity_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECBaseSparesQuantity) Then
    End If
End Sub

Private Sub chkECCanStoreOutside_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCanStoreOutside) Then
    End If
End Sub

Private Sub chkECCertificationProvided_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCertificationProvided) Then
    End If
End Sub

Private Sub chkECConsApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECConsApp) Then
    End If
End Sub

Private Sub chkECCycleLife_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCycleLife) Then
    End If
End Sub

Private Sub chkECCycleLifeApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECCycleLifeApp) Then
    End If
End Sub

Private Sub chkECDepthDimPack_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECDepthDimPack) Then
    End If
End Sub

Private Sub chkECDurableLife_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECDurableLife) Then
    End If
End Sub

Private Sub chkECDurableLifeApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECDurableLifeApp) Then
    End If
End Sub

Private Sub chkECElecStatSensDeviceApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECElecStatSensDeviceApp) Then
    End If
End Sub

Private Sub chkECEPDRComponentNo_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECEPDRComponentNo) Then
    End If
End Sub

Private Sub chkECEPDRVersion_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECEPDRVersion) Then
    End If
End Sub

Private Sub chkECFlexHoseCategory_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECFlexHoseCategory) Then
    End If
End Sub

Private Sub chkECForkLiftApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECForkLiftApp) Then
    End If
End Sub

Private Sub chkECHazardousMaterial_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECHazardousMaterial) Then
    End If
End Sub

Private Sub chkECHeightDimPack_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECHeightDimPack) Then
    End If
End Sub

Private Sub chkECInBuildMaintApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECInBuildMaintApp) Then
    End If
End Sub

Private Sub chkECInStoreMaintApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECInStoreMaintApp) Then
    End If
End Sub

Private Sub chkECItemCriticality_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECItemCriticality) Then
    End If
End Sub

Private Sub chkECLeadTimeProcured_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECLeadTimeProcured) Then
    End If
End Sub

Private Sub chkECLeadTimeRepair_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECLeadTimeRepair) Then
    End If
End Sub

Private Sub chkECLiftLoadHandApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECLiftLoadHandApp) Then
    End If
End Sub

Private Sub chkECLloydsCertified_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECLloydsCertified) Then
    End If
End Sub

Private Sub chkECMaterialFinish_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMaterialFinish) Then
    End If
End Sub

Private Sub chkECMaterialFinishApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMaterialFinishApp) Then
    End If
End Sub

Private Sub chkECMaterialGrade_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMaterialGrade) Then
    End If
End Sub

Private Sub chkECMaterialType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMaterialType) Then
    End If
End Sub

Private Sub chkECMaterialTypeOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMaterialTypeOther) Then
    End If
End Sub

Private Sub chkECMaxStoreRelHum_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMaxStoreRelHum) Then
    End If
End Sub

Private Sub chkECMaxStoreTemp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub chkECMaxStoreTemp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMaxStoreTemp) Then
    End If
End Sub

Private Sub chkECMinOrderQuantity_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMinOrderQuantity) Then
    End If
End Sub

Private Sub chkECMinStoreRelHum_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMinStoreRelHum) Then
    End If
End Sub

Private Sub chkECMinStoreTemp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMinStoreTemp) Then
    End If
End Sub

Private Sub chkECMountMass_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMountMass) Then
    End If
End Sub

Private Sub chkECMountMaxSupportMass_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMountMaxSupportMass) Then
    End If
End Sub

Private Sub chkECMountMinSupportMass_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMountMinSupportMass) Then
    End If
End Sub

Private Sub chkECMountNominalMass_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMountNominalMass) Then
    End If
End Sub

Private Sub chkECMountType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMountType) Then
    End If
End Sub

Private Sub chkECMTBF_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMTBF) Then
    End If
End Sub

Private Sub chkECMTBFApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMTBFApp) Then
    End If
End Sub

Private Sub chkECMTBFOtherSource_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMTBFOtherSource) Then
    End If
End Sub

Private Sub chkECMTBFSource_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMTBFSource) Then
    End If
End Sub

Private Sub chkECMTTR_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMTTR) Then
    End If
End Sub

Private Sub chkECMTTRApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMTTRApp) Then
    End If
End Sub

Private Sub chkECMTTROtherSource_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMTTROtherSource) Then
    End If
End Sub

Private Sub chkECMTTRSource_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECMTTRSource) Then
    End If
End Sub

Private Sub chkECNoiseComments_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)

End Sub

Private Sub chkECNoiseComments_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECNoiseComments) Then
    End If
End Sub

Private Sub chkECNoiseCommentsApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECNoiseCommentsApp) Then
    End If
End Sub

Private Sub chkECNoOfMounts_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECNoOfMounts) Then
    End If
End Sub

Private Sub chkECNPDRComponentNo_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECNPDRComponentNo) Then
    End If
End Sub

Private Sub chkECNPDRVersion_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECNPDRVersion) Then
    End If
End Sub

Private Sub chkECNSN_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub chkECNSN_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECNSN) Then
    End If
End Sub

Private Sub chkECNSNApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECNSNApp) Then
    End If
End Sub

Private Sub chkECOEMCageCode_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECOEMCageCode) Then
    End If
End Sub

Private Sub chkECOEMName_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECOEMName) Then
    End If
End Sub

Private Sub chkECOEMPartName_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECOEMPartName) Then
    End If
End Sub

Private Sub chkECOEMPartNumber_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECOEMPartNumber) Then
    End If
End Sub

Private Sub chkECOnBoardSparesApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECOnBoardSparesApp) Then
    End If
End Sub

Private Sub chkECOnBoardSparesQuantity_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECOnBoardSparesQuantity) Then
    End If
End Sub

Private Sub chkECOpEnvMaxRelHum_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECOpEnvMaxRelHum) Then
    End If
End Sub

Private Sub chkECOpEnvMaxRelHumApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECOpEnvMaxRelHumApp) Then
    End If
End Sub

Private Sub chkECOpEnvMaxTemp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECOpEnvMaxTemp) Then
    End If
End Sub

Private Sub chkECOpEnvMaxTempApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECOpEnvMaxTempApp) Then
    End If
End Sub

Private Sub chkECOpEnvMinRelHum_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECOpEnvMinRelHum) Then
    End If
End Sub

Private Sub chkECOpEnvMinRelHumApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECOpEnvMinRelHumApp) Then
    End If
End Sub

Private Sub chkECOpEnvMinTemp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECOpEnvMinTemp) Then
    End If
End Sub

Private Sub chkECOpEnvMinTempApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECOpEnvMinTempApp) Then
    End If
End Sub

Private Sub chkECOtherMountDetails_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECOtherMountDetails) Then
    End If
End Sub

Private Sub chkECPhysAMaintEnvReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECPhysAMaintEnvReq) Then
    End If
End Sub

Private Sub chkECPhysDepthExclMounts_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECPhysDepthExclMounts) Then
    End If
End Sub

Private Sub chkECPhysHeightExclMounts_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECPhysHeightExclMounts) Then
    End If
End Sub

Private Sub chkECPhysWidthExclMounts_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECPhysWidthExclMounts) Then
    End If
End Sub

Private Sub chkECPMSConnectRemoteApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECPMSConnectRemoteApp) Then
    End If
End Sub

Private Sub chkECPresMaxAllow_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECPresMaxAllow) Then
    End If
End Sub

Private Sub chkECRadioactiveMaterial_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECRadioactiveMaterial) Then
    End If
End Sub

Private Sub chkECResilientlMountApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECResilientlMountApp) Then
    End If
End Sub

Private Sub chkECReturnForRepairApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECReturnForRepairApp) Then
    End If
End Sub

Private Sub chkECShelfLife_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECShelfLife) Then
    End If
End Sub

Private Sub chkECShelfLifeApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECShelfLifeApp) Then
    End If
End Sub

Private Sub chkECShoreSupportApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECShoreSupportApp) Then
    End If
End Sub

Private Sub chkECSparesHeldByOEM_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECSparesHeldByOEM) Then
    End If
End Sub

Private Sub chkECSpecialHandApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECSpecialHandApp) Then
    End If
End Sub

Private Sub chkECSpecialHandCondApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECSpecialHandCondApp) Then
    End If
End Sub

Private Sub chkECSpecialInstalApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECSpecialInstalApp) Then
    End If
End Sub

Private Sub chkECSpecialPackApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECSpecialPackApp) Then
    End If
End Sub

Private Sub chkECSpecialPackDescription_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECSpecialPackDescription) Then
    End If
End Sub

Private Sub chkECSpecialPackReusable_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECSpecialPackReusable) Then
    End If
End Sub

Private Sub chkECSpecialProtectApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECSpecialProtectApp) Then
    End If
End Sub

Private Sub chkECSpecialProtectDescription_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECSpecialProtectDescription) Then
    End If
End Sub

Private Sub chkECSpecialStoreApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECSpecialStoreApp) Then
    End If
End Sub

Private Sub chkECSpecialStoreConditions_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECSpecialStoreConditions) Then
    End If
End Sub

Private Sub chkECSpecialStoreInstructions_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECSpecialStoreInstructions) Then
    End If
End Sub

Private Sub chkECSupTestEquipTypeApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECSupTestEquipTypeApp) Then
    End If
End Sub

Private Sub chkECTrackedItemApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECTrackedItemApp) Then
    End If
End Sub

Private Sub chkECTrackedItemType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECTrackedItemType) Then
    End If
End Sub

Private Sub chkECTrackedOtherDetails_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECTrackedOtherDetails) Then
    End If
End Sub

Private Sub chkECTrialsSparesApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECTrialsSparesApp) Then
    End If
End Sub

Private Sub chkECTrialsSparesQuantity_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECTrialsSparesQuantity) Then
    End If
End Sub

Private Sub chkECUpkeepPolicy_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECUpkeepPolicy) Then
    End If
End Sub

Private Sub chkECURNNoOfVibSrc_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECURNNoOfVibSrc) Then
    End If
End Sub

Private Sub chkECUsefulLife_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECUsefulLife) Then
    End If
End Sub

Private Sub chkECUsefulLifeApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECUsefulLifeApp) Then
    End If
End Sub

Private Sub chkECValve01EndConOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve01EndConOther) Then
    End If
End Sub

Private Sub chkECValve01EndConType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve01EndConType) Then
    End If
End Sub

Private Sub chkECValve01FlangeOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve01FlangeOther) Then
    End If
End Sub

Private Sub chkECValve01FlangeType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve01FlangeType) Then
    End If
End Sub

Private Sub chkECValve01NominalBore_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve01NominalBore) Then
    End If
End Sub

Private Sub chkECValve01ThreadOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve01ThreadOther) Then
    End If
End Sub

Private Sub chkECValve01ThreadType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve01ThreadType) Then
    End If
End Sub

Private Sub chkECValve02EndConOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve02EndConOther) Then
    End If
End Sub

Private Sub chkECValve02EndConType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve02EndConType) Then
    End If
End Sub

Private Sub chkECValve02FlangeOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve02FlangeOther) Then
    End If
End Sub

Private Sub chkECValve02FlangeType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve02FlangeType) Then
    End If
End Sub

Private Sub chkECValve02NominalBore_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve02NominalBore) Then
    End If
End Sub

Private Sub chkECValve02ThreadOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve02ThreadOther) Then
    End If
End Sub

Private Sub chkECValve02ThreadType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve02ThreadType) Then
    End If
End Sub

Private Sub chkECValve03EndConOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve03EndConOther) Then
    End If
End Sub

Private Sub chkECValve03EndConType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve03EndConType) Then
    End If
End Sub

Private Sub chkECValve03FaceToCentreLen_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve03FaceToCentreLen) Then
    End If
End Sub

Private Sub chkECValve03FlangeOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve03FlangeOther) Then
    End If
End Sub

Private Sub chkECValve03FlangeType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve03FlangeType) Then
    End If
End Sub

Private Sub chkECValve03NominalBore_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve03NominalBore) Then
    End If
End Sub

Private Sub chkECValve03ThreadOther_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve03ThreadOther) Then
    End If
End Sub

Private Sub chkECValve03ThreadType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValve03ThreadType) Then
    End If
End Sub

Private Sub chkECValveBodyMaterial_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValveBodyMaterial) Then
    End If
End Sub

Private Sub chkECValveFaceToFaceLen_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValveFaceToFaceLen) Then
    End If
End Sub

Private Sub chkECValveNoOfEndCon_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECValveNoOfEndCon) Then
    End If
End Sub

Private Sub chkECVibSrc01DrivenUnit_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc01DrivenUnit) Then
    End If
End Sub

Private Sub chkECVibSrc01DrivenUnitDetails_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc01DrivenUnitDetails) Then
    End If
End Sub

Private Sub chkECVibSrc01MotorDetails_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc01MotorDetails) Then
    End If
End Sub

Private Sub chkECVibSrc01MotorModelNo_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc01MotorModelNo) Then
    End If
End Sub

Private Sub chkECVibSrc01NoOfBlades_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc01NoOfBlades) Then
    End If
End Sub

Private Sub chkECVibSrc01RPM_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc01RPM) Then
    End If
End Sub

Private Sub chkECVibSrc01Type_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc01Type) Then
    End If
End Sub

Private Sub chkECVibSrc01TypeOfDrive_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc01TypeOfDrive) Then
    End If
End Sub

Private Sub chkECVibSrc02DrivenUnit_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc02DrivenUnit) Then
    End If
End Sub

Private Sub chkECVibSrc02DrivenUnitDetails_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc02DrivenUnitDetails) Then
    End If
End Sub

Private Sub chkECVibSrc02MotorDetails_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc02MotorDetails) Then
    End If
End Sub

Private Sub chkECVibSrc02MotorModelNo_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc02MotorModelNo) Then
    End If
End Sub

Private Sub chkECVibSrc02NoOfBlades_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc02NoOfBlades) Then
    End If
End Sub

Private Sub chkECVibSrc02RPM_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc02RPM) Then
    End If
End Sub

Private Sub chkECVibSrc02Type_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc02Type) Then
    End If
End Sub

Private Sub chkECVibSrc02TypeOfDrive_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc02TypeOfDrive) Then
    End If
End Sub

Private Sub chkECVibSrc03DrivenUnit_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc03DrivenUnit) Then
    End If
End Sub

Private Sub chkECVibSrc03DrivenUnitDetails_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc03DrivenUnitDetails) Then
    End If
End Sub

Private Sub chkECVibSrc03MotorDetails_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc03MotorDetails) Then
    End If
End Sub

Private Sub chkECVibSrc03MotorModelNo_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc03MotorModelNo) Then
    End If
End Sub

Private Sub chkECVibSrc03NoOfBlades_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc03NoOfBlades) Then
    End If
End Sub

Private Sub chkECVibSrc03RPM_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc03RPM) Then
    End If
End Sub

Private Sub chkECVibSrc03Type_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc03Type) Then
    End If
End Sub

Private Sub chkECVibSrc03TypeOfDrive_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc03TypeOfDrive) Then
    End If
End Sub

Private Sub chkECVibSrc04DrivenUnit_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc04DrivenUnit) Then
    End If
End Sub

Private Sub chkECVibSrc04DrivenUnitDetails_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc04DrivenUnitDetails) Then
    End If
End Sub

Private Sub chkECVibSrc04MotorDetails_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc04MotorDetails) Then
    End If
End Sub

Private Sub chkECVibSrc04MotorModelNo_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc04MotorModelNo) Then
    End If
End Sub

Private Sub chkECVibSrc04NoOfBlades_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc04NoOfBlades) Then
    End If
End Sub

Private Sub chkECVibSrc04RPM_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc04RPM) Then
    End If
End Sub

Private Sub chkECVibSrc04Type_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc04Type) Then
    End If
End Sub

Private Sub chkECVibSrc04TypeOfDrive_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECVibSrc04TypeOfDrive) Then
    End If
End Sub

Private Sub chkECWeightDryPack_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub chkECWeightDryPack_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWeightDryPack) Then
    End If
End Sub

Private Sub chkECWeightDryUnpExclMounts_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub chkECWeightDryUnpExclMounts_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWeightDryUnpExclMounts) Then
    End If
End Sub

Private Sub chkECWeightPerMetre_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub chkECWeightPerMetre_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWeightPerMetre) Then
    End If
End Sub

Private Sub chkECWeightUOM_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub chkECWeightUOM_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWeightUOM) Then
    End If
End Sub

Private Sub chkECWeightWetAvailable_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub chkECWeightWetAvailable_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWeightWetAvailable) Then
    End If
End Sub

Private Sub chkECWeightWetUnpExclMounts_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub chkECWeightWetUnpExclMounts_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWeightWetUnpExclMounts) Then
    End If
End Sub

Private Sub chkECWHeatGenApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWHeatGenApp) Then
    End If
End Sub

Private Sub chkECWHeatToAirMax_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWHeatToAirMax) Then
    End If
End Sub

Private Sub chkECWidthDimPack_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWidthDimPack) Then
    End If
End Sub

Private Sub chkECWindGlassStandard_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWindGlassStandard) Then
    End If
End Sub

Private Sub chkECWindGlassThickness_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWindGlassThickness) Then
    End If
End Sub

Private Sub chkECWindSealMechApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWindSealMechApp) Then
    End If
End Sub

Private Sub chkECWindSealMechPres_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWindSealMechPres) Then
    End If
End Sub

Private Sub chkECWLoadApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWLoadApp) Then
    End If
End Sub

Private Sub chkECWLoadSafeApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWLoadSafeApp) Then
    End If
End Sub

Private Sub chkECWLoadSafeValue_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWLoadSafeValue) Then
    End If
End Sub

Private Sub chkECWLoadTestApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWLoadTestApp) Then
    End If
End Sub

Private Sub chkECWLoadTestValue_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWLoadTestValue) Then
    End If
End Sub

Private Sub chkECWLoadValue_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkECWLoadValue) Then
    End If
End Sub

Private Sub chkLloydsCertification_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub chkLloydsCertification_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkLloydsCertification) Then
    End If
End Sub

Private Sub chkLloydsCertification_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkLloydsCertification_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkMaterial_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub chkMaterial_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkMaterial) Then
    End If
End Sub

Private Sub chkMaterial_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkMaterial_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkMount_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub chkMount_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkMount) Then
    End If
End Sub

Private Sub chkMount_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkMount_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkOpEnv_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)

End Sub

Private Sub chkOpEnv_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkOpEnv) Then
    End If
End Sub

Private Sub chkOpEnv_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkOpEnv_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkPMS_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkPMS) Then
    End If
End Sub

Private Sub chkPMS_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkPMS_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkPres_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkPres) Then
    End If
End Sub

Private Sub chkPres_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkPres_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkShock_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub chkShock_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkShock) Then
    End If
End Sub

Private Sub chkShock_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkShock_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkURN_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub chkURN_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkURN) Then
    End If
End Sub

Private Sub chkURN_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkURN_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkValve_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkValve) Then
    End If
End Sub

Private Sub chkValve_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkValve_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkWHeat_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkWHeat) Then
    End If
End Sub

Private Sub chkWHeat_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkWHeat_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkWind_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkWind) Then
    End If
End Sub

Private Sub chkWind_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkWind_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkWLoad_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, chkWLoad) Then
    End If
End Sub

Private Sub chkWLoad_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkWLoad_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True

End Sub

Private Sub lblPresMaxAllow_Click()

End Sub

Private Sub mpgDSPage_Change()

End Sub

Private Sub mpgProcCon_Change()

End Sub

Private Sub txtCIAccuracy_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCIAccuracy_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCIActualPFD_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCIActualPFD_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCIAnalScaleDetails_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCIAnalScaleDetails_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCIAnalScaleMax_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCIAnalScaleMax_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCIAnalScaleMin_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCIAnalScaleMin_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCICalibRangeDetails_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCICalibRangeDetails_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCICalibRangeMax_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCICalibRangeMax_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCICalibRangeMin_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCICalibRangeMin_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCICon01ConOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCICon01ConOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCICon01FlangeOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCICon01FlangeOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCICon01NomBore_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCICon01NomBore_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCICon01ThreadOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCICon01ThreadOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCICon02ConOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCICon02ConOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCICon02FlangeOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCICon02FlangeOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCICon02NomBore_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCICon02NomBore_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCICon02ThreadOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCICon02ThreadOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCICon03ConOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCICon03ConOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCICon03FlangeOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCICon03FlangeOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCICon03NomBore_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCICon03NomBore_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCICon03ThreadOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCICon03ThreadOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCIMarking_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCIMarking_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCIModelNo_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCIModelNo_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCIRangeDown_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCIRangeDown_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCIStability_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCIStability_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCIStabilityPerc_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCIStabilityPerc_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtCritFailTemp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCritFailTemp_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtBAEPartNumber_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtBAEPartNumber_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtContractorPartName_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtContractorPartName_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtContractorPartName) Then
    End If
End Sub

Private Sub txtContractorPartNumber_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
'
' The Contractor Part Number is the key field for the part and is used when constructing
' the Part Structure. It cannot be changed if it has been placed in the Part Structure.
'
    Dim strContractorPartNumber As String
    Dim strKeyFound As String
    Dim blnContinue As Boolean
    
    blnContinue = True
    If mblnNewDS = False Then
        ' Editing an existing Part's Key Field
        ' Read the Contractor Part Number saved for this part
        strContractorPartNumber = modDSEntry.ReadFieldValueString(mlngCurrentRow, gstrContractorPartNumber)
        ' Look for it in the Part Structure Diagram
        strKeyFound = modDSStructure.TreeFind(strContractorPartNumber)
        If strKeyFound = "" Then
            ' Part is not present in the Part Structure Diagram - its key field can be altered
            ' Continue with validation
            blnContinue = True
        Else
            ' Part is present in the Part Structure Diagram - cannot alter its key field
            ' If it is being altered, do not allow and inform user
            If strContractorPartNumber <> txtContractorPartNumber.Value Then
                ' Return to old value
                txtContractorPartNumber.Value = strContractorPartNumber
                blnContinue = False ' Do not continue with this change
                MsgBox "Cannot alter the Part's key field as it is present in the Part Structure Diagram!", vbOKOnly, "Part's Key Field"
            End If
        End If
    End If
    
    If blnContinue Then
        ' Continue with validation
        modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "txtContractorPartNumber_BeforeUpdate"
    Exit Sub
End Sub

Private Sub txtContractorPartNumber_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtContractorPartNumber) Then
    End If
End Sub

Private Sub txtCycleLife_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtCycleLife_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtCycleLife) Then
    End If
End Sub

Private Sub txtDepthDimPack_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtDepthDimPack_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtDurableLife_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtDurableLife_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtDurableLife) Then
    End If
End Sub

Private Sub txtEPDRComponentNo_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtEPDRComponentNo_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtEPDRComponentNo) Then
    End If
End Sub

Private Sub txtEPDRVersion_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtEPDRVersion_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtEPDRVersion) Then
    End If
End Sub

Private Sub txtHeightDimPack_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtLeadTimeProcured_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtLeadTimeProcured_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtLeadTimeRepair_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtLeadTimeRepair_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtMaterialFinish_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtMaterialFinish_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtMaterialFinish) Then
    End If
End Sub

Private Sub txtMaterialTypeOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtMaterialTypeOther_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtMaterialTypeOther) Then
    End If
End Sub

Private Sub txtMaxStoreRelHum_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtMaxStoreRelHum_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtMaxStoreTemp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtMaxStoreTemp_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtMinStoreRelHum_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtMinStoreRelHum_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtMinStoreTemp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtMinStoreTemp_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtMountMass_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtMountMass_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtMountMass) Then
    End If
End Sub

Private Sub txtMountMaxSupportMass_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtMountMaxSupportMass_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtMountMaxSupportMass) Then
    End If
End Sub

Private Sub txtMountMinSupportMass_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtMountMinSupportMass_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtMountMinSupportMass) Then
    End If
End Sub

Private Sub txtMountNominalMass_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtMountNominalMass_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtMountNominalMass) Then
    End If
End Sub

Private Sub txtmpgDS00_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgDS00) Then
    End If
End Sub

Private Sub txtmpgDS01_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgDS01) Then
    End If
End Sub

Private Sub txtmpgDS02_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgDS02) Then
    End If
End Sub

Private Sub txtmpgDS03_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgDS03) Then
    End If
End Sub

Private Sub txtmpgDS04_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgDS04) Then
    End If
End Sub

Private Sub txtmpgDS05_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgDS05) Then
    End If
End Sub

Private Sub txtmpgDS06_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgDS06) Then
    End If
End Sub

Private Sub txtmpgDS07_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgDS07) Then
    End If
End Sub

Private Sub txtmpgDS08_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgDS08) Then
    End If
End Sub

Private Sub txtmpgDS09_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgDS09) Then
    End If
End Sub

Private Sub txtmpgfraCertification_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgfraCertification) Then
    End If
End Sub

Private Sub txtmpgfraExportControl_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgfraExportControl) Then
    End If
End Sub

Private Sub txtmpgfraGeometryGeneralOne_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgfraGeometryGeneralOne) Then
    End If
End Sub

Private Sub txtmpgfraGeometryGeneralTwo_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgfraGeometryGeneralTwo) Then
    End If
End Sub

Private Sub txtmpgfraLloydsCert_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgfraLloydsCert) Then
    End If
End Sub

Private Sub txtmpgfraMaterials_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgfraMaterials) Then
    End If
End Sub

Private Sub txtmpgfraWeightsOne_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgfraWeightsOne) Then
    End If
End Sub

Private Sub txtmpgfraWeightsTwo_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgfraWeightsTwo) Then
    End If
End Sub

Private Sub txtmpgSupTech00_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgSupTech00) Then
    End If
End Sub

Private Sub txtmpgSupTech01_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgSupTech01) Then
    End If
End Sub

Private Sub txtmpgSupTech02_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgSupTech02) Then
    End If
End Sub

Private Sub txtmpgSupTech03_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgSupTech03) Then
    End If
End Sub

Private Sub txtmpgTrans00OpEnv_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgTrans00OpEnv) Then
    End If
End Sub

Private Sub txtmpgTrans01URN_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgTrans01URN) Then
    End If
End Sub

Private Sub txtmpgTrans02Mount_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgTrans02Mount) Then
    End If
End Sub

Private Sub txtmpgTrans03Shock_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtmpgTrans03Shock) Then
    End If
End Sub

Private Sub txtMTBF_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtMTBF_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtMTBF) Then
    End If
End Sub

Private Sub txtMTBFOtherSource_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtMTBFOtherSource_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtMTBFOtherSource) Then
    End If
End Sub

Private Sub txtMTTR_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtMTTR_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtMTTR) Then
    End If
End Sub

Private Sub txtMTTROtherSource_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtMTTROtherSource_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtMTTROtherSource) Then
    End If
End Sub

Private Sub txtNoiseComments_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtNoiseComments_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtNoiseComments) Then
    End If
End Sub

Private Sub txtNoOfMounts_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtNoOfMounts_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtNoOfMounts) Then
    End If
End Sub

Private Sub txtNPDRComponentNo_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtNPDRComponentNo_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtNPDRComponentNo) Then
    End If
End Sub

Private Sub txtNPDRVersion_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtNPDRVersion_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtNPDRVersion) Then
    End If
End Sub

Private Sub txtNSN_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtNSN_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtOEMCageCode_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtOEMCageCode_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtOpEnvMaxRelHum_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtOpEnvMaxRelHum_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtOpEnvMaxRelHum) Then
    End If
End Sub

Private Sub txtOpEnvMaxTemp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtOpEnvMaxTemp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtOpEnvMaxTemp) Then
    End If
End Sub

Private Sub txtOpEnvMinRelHum_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtOpEnvMinRelHum_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtOpEnvMinRelHum) Then
    End If
End Sub

Private Sub txtOpEnvMinTemp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtOpEnvMinTemp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtOpEnvMinTemp) Then
    End If
End Sub

Private Sub txtOEMPartNumber_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtOEMPartNumber_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtOEMPartNumber) Then
    End If
End Sub

Private Sub txtOEMPartName_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtOEMPartName_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtOEMPartName) Then
    End If
End Sub

Private Sub txtOEMName_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtOEMName_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtOEMName) Then
    End If
End Sub

Private Sub cboItemCriticality_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboItemCriticality_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboItemCriticality) Then
    End If
End Sub

Private Sub cboUpkeepPolicy_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboUpkeepPolicy_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboUpkeepPolicy) Then
    End If
End Sub

Private Sub txtMinOrderQuantity_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtMinOrderQuantity_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, txtMinOrderQuantity) Then
    End If
End Sub

Private Sub cboNSNApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboNSNApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboNSNApp) Then
    End If
End Sub

Private Sub cboReturnForRepairApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboReturnForRepairApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboReturnForRepairApp) Then
    End If
End Sub

Private Sub cboOnBoardSparesApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboOnBoardSparesApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboOnBoardSparesApp) Then
    End If
End Sub

Private Sub txtOnBoardSparesQuantity_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboBaseSparesApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboBaseSparesApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboBaseSparesApp) Then
    End If
End Sub

Private Sub txtBaseSparesQuantity_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboTrialsSparesApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboTrialsSparesApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboTrialsSparesApp) Then
    End If
End Sub

Private Sub txtOtherMountDetails_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtOtherMountDetails_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtPhysDepthExclMounts_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtPhysDepthExclMounts_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtPhysHeightExclMounts_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
'MsgBox ("BeforeUpdate")
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtPhysHeightExclMounts_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtPhysHeightExclMounts_Exit(ByVal Cancel As MSForms.ReturnBoolean)
'MsgBox ("Exit")
End Sub

Private Sub txtPhysHeightExclMounts_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
'MsgBox ("KeyUp")
End Sub

Private Sub txtPhysHeightExclMounts_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'MsgBox ("MouseUp")
End Sub

Private Sub txtPhysWidthExclMounts_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtPhysWidthExclMounts_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtPresMaxAllow_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtPresMaxAllow_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtShelfLife_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtSpecialPackDescription_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtSpecialProtectDescription_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtSpecialStoreConditions_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtSpecialStoreInstructions_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtTrackedOtherDetails_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtTrialsSparesQuantity_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboSparesHeldByOEM_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub cboSparesHeldByOEM_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntry", mblnDSFormChanged, cboSparesHeldByOEM) Then
    End If
End Sub

Private Sub txtUsefulLife_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtValve01EndConOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtValve01FlangeOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtValve01NominalBore_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtValve01ThreadOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtValve02EndConOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtValve02FlangeOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtValve02NominalBore_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtValve02ThreadOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtValve03EndConOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtValve03FaceToCentreLen_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtValve03FlangeOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtValve03NominalBore_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtValve03ThreadOther_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtValveBodyMaterial_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtValveFaceToFaceLen_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc01DrivenUnitDetails_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc01MotorDetails_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc01MotorModelNo_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc01NoOfBlades_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc01RPM_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc02DrivenUnitDetails_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc02MotorDetails_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc02MotorModelNo_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc02NoOfBlades_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc02RPM_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc03DrivenUnitDetails_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc03MotorDetails_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc03MotorModelNo_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc03NoOfBlades_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc03RPM_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc04DrivenUnitDetails_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc04MotorDetails_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc04MotorModelNo_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc04NoOfBlades_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtVibSrc04RPM_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtWeightDryPack_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtWeightDryUnpExclMounts_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtWeightPerMetre_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtWeightWetUnpExclMounts_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtWHeatToAirMax_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtWidthDimPack_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtWindGlassStandard_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtWindGlassThickness_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtWindSealMechPres_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtWLoadSafeValue_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtWLoadTestValue_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtWLoadValue_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntry")
End Sub

Private Sub txtUsefulLife_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtValve01EndConOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtValve01FlangeOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtValve01NominalBore_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtValve01ThreadOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtValve02EndConOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtValve02FlangeOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtValve02NominalBore_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtValve02ThreadOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtValve03EndConOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtValve03FaceToCentreLen_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtValve03FlangeOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtValve03NominalBore_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtValve03ThreadOther_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtValveBodyMaterial_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtValveFaceToFaceLen_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc01DrivenUnitDetails_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc01MotorDetails_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc01MotorModelNo_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc01NoOfBlades_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc01RPM_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc02DrivenUnitDetails_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc02MotorDetails_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc02MotorModelNo_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc02NoOfBlades_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc02RPM_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc03DrivenUnitDetails_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc03MotorDetails_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc03MotorModelNo_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc03NoOfBlades_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc03RPM_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc04DrivenUnitDetails_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc04MotorDetails_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc04MotorModelNo_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc04NoOfBlades_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtVibSrc04RPM_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtWeightDryPack_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtWeightDryUnpExclMounts_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtWeightPerMetre_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtWeightWetUnpExclMounts_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtWHeatToAirMax_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtWidthDimPack_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtWindGlassStandard_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtWindGlassThickness_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtWindSealMechPres_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtWLoadSafeValue_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtWLoadTestValue_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtWLoadValue_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub UserForm_Click()

End Sub

Private Sub UserForm_Initialize()

    On Error GoTo Err_Trap
    
    mstrDSActionEvents = gstrActionEventsNone ' Prevent events
    
    modDSMain.InitializeVariables

    ' Set up the form fields, clearing their values too
    If modDSEntry.SetUpFields("frmDSEntry") Then
    End If
    ' Set up for entry of a New Part
    modDSEntry.SetUpNewPart

    mstrDSActionEvents = gstrActionEventsAll ' Allow all events processing again

    Exit Sub
Err_Trap:
    mstrDSActionEvents = gstrActionEventsAll ' Allow all events processing again
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "UserForm_Initialize"
    Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
' Prevent Closing of Pop-up Form
'
    If CloseMode = vbFormControlMenu Then
        Cancel = True
    End If
End Sub
Attribute VB_Name = "frmDSEntryAuxOne"
Attribute VB_Base = "0{AEC7A81D-C138-4258-8439-76C30FF89168}{49936E2A-502F-4A44-969F-9647B66EE249}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnAuxOneCloseNoSave_Click()
'
' Close the form without saving any changes
'
    Dim blnContinue As Boolean
    
    On Error GoTo Err_Trap
    
    blnContinue = True
    
    If mblnDSFormPopupChanged = True Then
        If MsgBox("Are you sure you want to close this form without saving your changes?", vbOKCancel, "Close Pop-up Form") <> vbOK Then
            blnContinue = False
        End If
    End If
    
    If blnContinue Then
        ' Close the form
        mblnDSFormPopupChanged = False ' Form is closing - clear the form changed flag
        Unload Me
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmDSEntryAuxOne.btnAuxOneCloseNoSave_Click"
    Exit Sub
End Sub

Private Sub btnAuxOneSaveAndClose_Click()
'
' Validate fields
' Update existing part - data fields from this form only
'
    Dim strValidationMessage As String
    
    On Error GoTo Err_Trap
    
    mstrDSActionEvents = gstrActionEventsNone ' Prevent all events
    
    strValidationMessage = modDSFormValidation.ValidForm("frmDSEntryAuxOne")
    
    If strValidationMessage = "" Then
        ' Should be updating an existing part
        If mlngCurrentRow > 1 Then
                modDSEntry.UpdatePart ("frmDSEntryAuxOne") ' Updates part based on this form's fields
                modDSEntry.SetShipServicesLabels
                MsgBox "Part has been updated", vbOKOnly, "Part Data - Update Part"
        Else
            ' Invalid row number - cannot update!
            MsgBox "Cannot update - no known record", vbOKOnly, "Part Data - Update Part"
        End If
        ' Successful or otherwise - close the form
        mblnDSFormPopupChanged = False ' Form is closing - clear the form changed flag
        Unload Me
    Else
        MsgBox strValidationMessage, vbExclamation, "Invalid Fields"
    End If
    
    mstrDSActionEvents = gstrActionEventsAll ' Allow all events again

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmDSEntryAuxOne.btnAuxOneSaveAndClose_Click"
    Exit Sub
End Sub

Private Sub cboChilledWaterApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub cboChilledWaterApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, cboChilledWaterApp) Then
    End If
End Sub

Private Sub cboChilledWaterApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboChilledWaterApp) Then
    End If
End Sub

Private Sub cboChilledWaterApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboChilledWaterApp) Then
    End If
End Sub

Private Sub cboHVACAirFilterReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub cboHVACAirFilterReq_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, cboHVACAirFilterReq) Then
    End If
End Sub

Private Sub cboHVACCoolAirApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub cboHVACCoolAirApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, cboHVACCoolAirApp) Then
    End If
End Sub

Private Sub cboHVACCoolAirApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboHVACCoolAirApp) Then
    End If
End Sub

Private Sub cboHVACCoolAirApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboHVACCoolAirApp) Then
    End If
End Sub

Private Sub cboSeaWaterApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub cboSeaWaterApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, cboSeaWaterApp) Then
    End If
End Sub

Private Sub cboSeaWaterApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboSeaWaterApp) Then
    End If
End Sub

Private Sub cboSeaWaterApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboSeaWaterApp) Then
    End If
End Sub

Private Sub chkAuxServicesOne_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub chkAuxServicesOne_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkAuxServicesOne) Then
    End If
End Sub

Private Sub chkAuxServicesOne_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkAuxServicesOne_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkECChillConsumpMax_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECChillConsumpMax) Then
    End If
End Sub

Private Sub chkECChillCoolPresDrop_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECChillCoolPresDrop) Then
    End If
End Sub

Private Sub chkECChilledWaterApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECChilledWaterApp) Then
    End If
End Sub

Private Sub chkECChillMaxLoad_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECChillMaxLoad) Then
    End If
End Sub

Private Sub chkECChillPresMax_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECChillPresMax) Then
    End If
End Sub

Private Sub chkECChillQualityReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECChillQualityReq) Then
    End If
End Sub

Private Sub chkECChillTempDiff_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECChillTempDiff) Then
    End If
End Sub

Private Sub chkECChillTempMax_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECChillTempMax) Then
    End If
End Sub

Private Sub chkECChillTempMin_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECChillTempMin) Then
    End If
End Sub

Private Sub chkECChillTimeDetails_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECChillTimeDetails) Then
    End If
End Sub

Private Sub chkECChillTimeFromLoss_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECChillTimeFromLoss) Then
    End If
End Sub

Private Sub chkECHVACAirFilterNotes_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECHVACAirFilterNotes) Then
    End If
End Sub

Private Sub chkECHVACAirFilterReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECHVACAirFilterReq) Then
    End If
End Sub

Private Sub chkECHVACConsumpMax_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECHVACConsumpMax) Then
    End If
End Sub

Private Sub chkECHVACCoolAirApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECHVACCoolAirApp) Then
    End If
End Sub

Private Sub chkECSeaConsumpMax_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECSeaConsumpMax) Then
    End If
End Sub

Private Sub chkECSeaMaxLoad_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECSeaMaxLoad) Then
    End If
End Sub

Private Sub chkECSeaPresDrop_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECSeaPresDrop) Then
    End If
End Sub

Private Sub chkECSeaPresMax_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECSeaPresMax) Then
    End If
End Sub

Private Sub chkECSeaQualityReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECSeaQualityReq) Then
    End If
End Sub

Private Sub chkECSeaTempDiff_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECSeaTempDiff) Then
    End If
End Sub

Private Sub chkECSeaTempMax_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECSeaTempMax) Then
    End If
End Sub

Private Sub chkECSeaTempMin_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECSeaTempMin) Then
    End If
End Sub

Private Sub chkECSeaTimeDetails_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECSeaTimeDetails) Then
    End If
End Sub

Private Sub chkECSeaTimeFromLoss_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECSeaTimeFromLoss) Then
    End If
End Sub

Private Sub chkECSeaWaterApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxOne", mblnDSFormPopupChanged, chkECSeaWaterApp) Then
    End If
End Sub

Private Sub txtChillConsumpMax_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtChillConsumpMax_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtChillCoolPresDrop_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtChillCoolPresDrop_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtChillMaxLoad_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtChillMaxLoad_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtChillPresMax_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtChillPresMax_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtChillQualityReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtChillQualityReq_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtChillTempDiff_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtChillTempDiff_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtChillTempMax_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtChillTempMax_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtChillTempMin_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtChillTempMin_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtChillTimeDetails_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtChillTimeDetails_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtChillTimeFromLoss_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtChillTimeFromLoss_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtHVACConsumpMax_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtHVACAirFilterNotes_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtHVACConsumpMax_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtSeaConsumpMax_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtSeaConsumpMax_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtSeaMaxLoad_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtSeaMaxLoad_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtSeaPresDrop_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtSeaPresDrop_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtSeaPresMax_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtSeaPresMax_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtSeaQualityReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtSeaQualityReq_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtSeaTempDiff_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtSeaTempDiff_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtSeaTempMax_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtSeaTempMax_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtSeaTempMin_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtSeaTempMin_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtSeaTimeDetails_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtSeaTimeDetails_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub txtSeaTimeFromLoss_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxOne")
End Sub

Private Sub txtSeaTimeFromLoss_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub UserForm_Initialize()
    On Error GoTo Err_Trap
    
    mstrDSActionEvents = gstrActionEventsNone ' Prevent events
    
    ' Set up the form fields, clearing their values too
    If modDSEntry.SetUpFields("frmDSEntryAuxOne") Then
    End If
    ' Load Part data
    If PopulateSpecFields("frmDSEntryAuxOne") Then
    End If
    ' Set up the enabled/disabled configuration for the loaded form
    If EnableFieldValues("frmDSEntryAuxOne") Then
    End If

    mstrDSActionEvents = gstrActionEventsAll ' Allow all events processing again

    ClearDSHighlights ("frmDSEntryAuxOne")
    
    Exit Sub
Err_Trap:
    mstrDSActionEvents = gstrActionEventsAll ' Allow all events processing again
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmDSEntryAuxOne.UserForm_Initialize"
    Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
' Prevent Closing of Pop-up Form
'
    If CloseMode = vbFormControlMenu Then
        Cancel = True
    End If
End Sub


Attribute VB_Name = "frmDSEntryAuxThree"
Attribute VB_Base = "0{5A082EAC-8BA0-40AC-8D2A-9CAB818CB16C}{92E780A7-2ECE-4426-BF7C-30E26A492F7C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnAuxThreeCloseNoSave_Click()
'
' Close the form without saving any changes
'
    Dim blnContinue As Boolean
    
    On Error GoTo Err_Trap
    
    blnContinue = True
    
    If mblnDSFormPopupChanged = True Then
        If MsgBox("Are you sure you want to close this form without saving your changes?", vbOKCancel, "Close Pop-up Form") <> vbOK Then
            blnContinue = False
        End If
    End If
    
    If blnContinue Then
        ' Close the form
        mblnDSFormPopupChanged = False ' Form is closing - clear the form changed flag
        Unload Me
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmDSEntryAuxThree.btnAuxThreeCloseNoSave_Click"
    Exit Sub
End Sub

Private Sub btnAuxThreeSaveAndClose_Click()
'
' Validate fields
' Update existing part - data fields from this form only
'
    Dim strValidationMessage As String
    
    On Error GoTo Err_Trap
    
    mstrDSActionEvents = gstrActionEventsNone ' Prevent all events
    
    strValidationMessage = modDSFormValidation.ValidForm("frmDSEntryAuxThree")
    
    If strValidationMessage = "" Then
        ' Should be updating an existing part
        If mlngCurrentRow > 1 Then
                modDSEntry.UpdatePart ("frmDSEntryAuxThree") ' Updates part based on this form's fields
                modDSEntry.SetShipServicesLabels
                MsgBox "Part has been updated", vbOKOnly, "Part Data - Update Part"
        Else
            ' Invalid row number - cannot update!
            MsgBox "Cannot update - no known record", vbOKOnly, "Part Data - Update Part"
        End If
        ' Successful or otherwise - close the form
        mblnDSFormPopupChanged = False ' Form is closing - clear the form changed flag
        Unload Me
    Else
        MsgBox strValidationMessage, vbExclamation, "Invalid Fields"
    End If
    
    mstrDSActionEvents = gstrActionEventsAll ' Allow all events again

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmDSEntryAuxThree.btnAuxOneSaveAndClose_Click"
    Exit Sub
End Sub

Private Sub cboAirFreshApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub cboAirFreshApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, cboAirFreshApp) Then
    End If
End Sub

Private Sub cboAirFreshApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboAirFreshApp) Then
    End If
End Sub

Private Sub cboAirFreshApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboAirFreshApp) Then
    End If
End Sub

Private Sub cboAirFreshFilterReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub cboAirFreshFilterReq_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, cboAirFreshFilterReq) Then
    End If
End Sub

Private Sub cboAirHPApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub cboAirHPApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, cboAirHPApp) Then
    End If
End Sub

Private Sub cboAirHPApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboAirHPApp) Then
    End If
End Sub

Private Sub cboAirHPApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboAirHPApp) Then
    End If
End Sub

Private Sub cboAirHPContCons_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub cboAirHPContCons_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, cboAirHPContCons) Then
    End If
End Sub

Private Sub cboAirHPOilContentUOM_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub cboAirHPOilContentUOM_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, cboAirHPOilContentUOM) Then
    End If
End Sub

Private Sub cboAirLPApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub cboAirLPApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, cboAirLPApp) Then
    End If
End Sub

Private Sub cboAirLPApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboAirLPApp) Then
    End If
End Sub

Private Sub cboAirLPApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboAirLPApp) Then
    End If
End Sub

Private Sub cboAirLPContCons_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub cboAirLPContCons_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, cboAirLPContCons) Then
    End If
End Sub

Private Sub cboAirLPOilContentUOM_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub cboAirLPOilContentUOM_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, cboAirLPOilContentUOM) Then
    End If
End Sub

Private Sub chkAuxServicesThree_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkAuxServicesThree) Then
    End If
End Sub

Private Sub chkAuxServicesThree_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkAuxServicesThree_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkECAirFreshApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirFreshApp) Then
    End If
End Sub

Private Sub chkECAirFreshConsumpMax_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirFreshConsumpMax) Then
    End If
End Sub

Private Sub chkECAirFreshFilterNotes_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirFreshFilterNotes) Then
    End If
End Sub

Private Sub chkECAirFreshFilterReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirFreshFilterReq) Then
    End If
End Sub

Private Sub chkECAirHPAddPurityReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirHPAddPurityReq) Then
    End If
End Sub

Private Sub chkECAirHPApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirHPApp) Then
    End If
End Sub

Private Sub chkECAirHPConsumpMax_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirHPConsumpMax) Then
    End If
End Sub

Private Sub chkECAirHPContCons_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirHPContCons) Then
    End If
End Sub

Private Sub chkECAirHPDewPoint_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirHPDewPoint) Then
    End If
End Sub

Private Sub chkECAirHPDurInterCons_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirHPDurInterCons) Then
    End If
End Sub

Private Sub chkECAirHPFreqInterCons_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirHPFreqInterCons) Then
    End If
End Sub

Private Sub chkECAirHPMaxPres_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirHPMaxPres) Then
    End If
End Sub

Private Sub chkECAirHPMinPres_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirHPMinPres) Then
    End If
End Sub

Private Sub chkECAirHPNomFilt_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirHPNomFilt) Then
    End If
End Sub

Private Sub chkECAirHPOilContent_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirHPOilContent) Then
    End If
End Sub

Private Sub chkECAirHPOilContentUOM_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirHPOilContentUOM) Then
    End If
End Sub

Private Sub chkECAirLPAddPurityReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirLPAddPurityReq) Then
    End If
End Sub

Private Sub chkECAirLPApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirLPApp) Then
    End If
End Sub

Private Sub chkECAirLPConsumpMax_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirLPConsumpMax) Then
    End If
End Sub

Private Sub chkECAirLPContCons_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirLPContCons) Then
    End If
End Sub

Private Sub chkECAirLPDewPoint_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirLPDewPoint) Then
    End If
End Sub

Private Sub chkECAirLPDurInterCons_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirLPDurInterCons) Then
    End If
End Sub

Private Sub chkECAirLPFreqInterCons_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirLPFreqInterCons) Then
    End If
End Sub

Private Sub chkECAirLPMaxPres_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirLPMaxPres) Then
    End If
End Sub

Private Sub chkECAirLPMinPres_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirLPMinPres) Then
    End If
End Sub

Private Sub chkECAirLPNomFilt_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirLPNomFilt) Then
    End If
End Sub

Private Sub chkECAirLPOilContent_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirLPOilContent) Then
    End If
End Sub

Private Sub chkECAirLPOilContentUOM_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, chkECAirLPOilContentUOM) Then
    End If
End Sub

Private Sub mpgAuxServicesThree_Change()

End Sub

Private Sub txtAirFreshConsumpMax_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirFreshConsumpMax_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirFreshConsumpMax) Then
    End If
End Sub

Private Sub txtAirFreshFilterNotes_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirFreshFilterNotes_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirFreshFilterNotes) Then
    End If
End Sub

Private Sub txtAirHPAddPurityReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirHPAddPurityReq_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirHPAddPurityReq) Then
    End If
End Sub

Private Sub txtAirHPConsumpMax_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirHPConsumpMax) Then
    End If
End Sub

Private Sub txtAirHPDewPoint_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirHPDewPoint_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirHPDewPoint) Then
    End If
End Sub

Private Sub txtAirHPDurInterCons_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirHPDurInterCons_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirHPDurInterCons) Then
    End If
End Sub

Private Sub txtAirHPFreqInterCons_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirHPFreqInterCons_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirHPFreqInterCons) Then
    End If
End Sub

Private Sub txtAirHPMaxPres_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirHPMaxPres_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirHPMaxPres) Then
    End If
End Sub

Private Sub txtAirHPMinPres_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirHPMinPres_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirHPMinPres) Then
    End If
End Sub

Private Sub txtAirHPNomFilt_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirHPNomFilt_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirHPNomFilt) Then
    End If
End Sub

Private Sub txtAirHPOilContent_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirHPOilContent_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirHPOilContent) Then
    End If
End Sub

Private Sub txtAirLPAddPurityReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirLPAddPurityReq_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirLPAddPurityReq) Then
    End If
End Sub

Private Sub txtAirLPConsumpMax_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirLPConsumpMax_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirLPConsumpMax) Then
    End If
End Sub

Private Sub txtAirLPDewPoint_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirLPDewPoint_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirLPDewPoint) Then
    End If
End Sub

Private Sub txtAirLPDurInterCons_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirLPDurInterCons_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirLPDurInterCons) Then
    End If
End Sub

Private Sub txtAirLPFreqInterCons_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirLPFreqInterCons_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirLPFreqInterCons) Then
    End If
End Sub

Private Sub txtAirLPMaxPres_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirLPMaxPres_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirLPMaxPres) Then
    End If
End Sub

Private Sub txtAirLPMinPres_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirLPMinPres_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirLPMinPres) Then
    End If
End Sub

Private Sub txtAirLPNomFilt_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirLPNomFilt_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirLPNomFilt) Then
    End If
End Sub

Private Sub txtAirLPOilContent_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxThree")
End Sub

Private Sub txtAirLPOilContent_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxThree", mblnDSFormPopupChanged, txtAirLPOilContent) Then
    End If
End Sub

Private Sub UserForm_Click()

End Sub

Private Sub UserForm_Initialize()
    On Error GoTo Err_Trap
    
    mstrDSActionEvents = gstrActionEventsNone ' Prevent events
    
    ' Set up the form fields, clearing their values too
    If modDSEntry.SetUpFields("frmDSEntryAuxThree") Then
    End If
    ' Load Part data
    If PopulateSpecFields("frmDSEntryAuxThree") Then
    End If
    ' Set up the enabled/disabled configuration for the loaded form
    If EnableFieldValues("frmDSEntryAuxThree") Then
    End If

    mstrDSActionEvents = gstrActionEventsAll ' Allow all events processing again

    ClearDSHighlights ("frmDSEntryAuxThree")
    
    Exit Sub
Err_Trap:
    mstrDSActionEvents = gstrActionEventsAll ' Allow all events processing again
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmDSEntryAuxThree.UserForm_Initialize"
    Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
' Prevent Closing of Pop-up Form
'
    If CloseMode = vbFormControlMenu Then
        Cancel = True
    End If
End Sub
Attribute VB_Name = "frmDSEntryAuxTwo"
Attribute VB_Base = "0{0D5E02EC-2B89-420E-B8F5-F72739EB9830}{C68DE2DD-CF9D-4B00-B0B9-3D184C16A401}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnAuxTwoCloseNoSave_Click()
'
' Close the form without saving any changes
'
    Dim blnContinue As Boolean
    
    On Error GoTo Err_Trap
    
    blnContinue = True
    
    If mblnDSFormPopupChanged = True Then
        If MsgBox("Are you sure you want to close this form without saving your changes?", vbOKCancel, "Close Pop-up Form") <> vbOK Then
            blnContinue = False
        End If
    End If
    
    If blnContinue Then
        ' Close the form
        mblnDSFormPopupChanged = False ' Form is closing - clear the form changed flag
        Unload Me
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmDSEntryAuxTwo.btnAuxTwoCloseNoSave_Click"
    Exit Sub
End Sub

Private Sub btnAuxTwoSaveAndClose_Click()
'
' Validate fields
' Update existing part - data fields from this form only
'
    Dim strValidationMessage As String
    
    On Error GoTo Err_Trap
    
    mstrDSActionEvents = gstrActionEventsNone ' Prevent all events
    
    strValidationMessage = modDSFormValidation.ValidForm("frmDSEntryAuxTwo")
    
    If strValidationMessage = "" Then
        ' Should be updating an existing part
        If mlngCurrentRow > 1 Then
                modDSEntry.UpdatePart ("frmDSEntryAuxTwo") ' Updates part based on this form's fields
                modDSEntry.SetShipServicesLabels
                MsgBox "Part has been updated", vbOKOnly, "Part Data - Update Part"
        Else
            ' Invalid row number - cannot update!
            MsgBox "Cannot update - no known record", vbOKOnly, "Part Data - Update Part"
        End If
        ' Successful or otherwise - close the form
        mblnDSFormPopupChanged = False ' Form is closing - clear the form changed flag
        Unload Me
    Else
        MsgBox strValidationMessage, vbExclamation, "Invalid Fields"
    End If
    
    mstrDSActionEvents = gstrActionEventsAll ' Allow all events again

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmDSEntryAuxTwo.btnAuxTwoSaveAndClose_Click"
    Exit Sub
End Sub

Private Sub cboAvcatApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub cboAvcatApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, cboAvcatApp) Then
    End If
End Sub

Private Sub cboAvcatApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboAvcatApp) Then
    End If
End Sub

Private Sub cboAvcatApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboAvcatApp) Then
    End If
End Sub

Private Sub cboDiesoApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub cboDiesoApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, cboDiesoApp) Then
    End If
End Sub

Private Sub cboDiesoApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboDiesoApp) Then
    End If
End Sub

Private Sub cboDiesoApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboDiesoApp) Then
    End If
End Sub

Private Sub cboDrainApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub cboDrainApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, cboDrainApp) Then
    End If
End Sub

Private Sub cboDrainApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboDrainApp) Then
    End If
End Sub

Private Sub cboDrainApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboDrainApp) Then
    End If
End Sub

Private Sub cboLubeApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub cboLubeApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, cboLubeApp) Then
    End If
End Sub

Private Sub cboLubeApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboLubeApp) Then
    End If
End Sub

Private Sub cboLubeApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboLubeApp) Then
    End If
End Sub

Private Sub cboOtherShipApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub cboOtherShipApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, cboOtherShipApp) Then
    End If
End Sub

Private Sub cboOtherShipApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboOtherShipApp) Then
    End If
End Sub

Private Sub cboOtherShipApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboOtherShipApp) Then
    End If
End Sub

Private Sub cboPotWaterApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub cboPotWaterApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, cboPotWaterApp) Then
    End If
End Sub

Private Sub cboPotWaterApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboPotWaterApp) Then
    End If
End Sub

Private Sub cboPotWaterApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboPotWaterApp) Then
    End If
End Sub

Private Sub cboTechWaterApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub cboTechWaterApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, cboTechWaterApp) Then
    End If
End Sub

Private Sub cboTechWaterApp_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboTechWaterApp) Then
    End If
End Sub

Private Sub cboTechWaterApp_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboTechWaterApp) Then
    End If
End Sub

Private Sub chkAuxServicesTwo_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub chkAuxServicesTwo_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkAuxServicesTwo) Then
    End If
End Sub

Private Sub chkAuxServicesTwo_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkAuxServicesTwo_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkECAvcatApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECAvcatApp) Then
    End If
End Sub

Private Sub chkECAvcatQualReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECAvcatQualReq) Then
    End If
End Sub

Private Sub chkECDiesoApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECDiesoApp) Then
    End If
End Sub

Private Sub chkECDiesoConsumpMax_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECDiesoConsumpMax) Then
    End If
End Sub

Private Sub chkECDiesoQualReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECDiesoQualReq) Then
    End If
End Sub

Private Sub chkECDrainApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECDrainApp) Then
    End If
End Sub

Private Sub chkECDrainTypeDetails_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECDrainTypeDetails) Then
    End If
End Sub

Private Sub chkECLubeApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECLubeApp) Then
    End If
End Sub

Private Sub chkECLubeConsumpMax_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECLubeConsumpMax) Then
    End If
End Sub

Private Sub chkECLubeTypeDetails_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECLubeTypeDetails) Then
    End If
End Sub

Private Sub chkECOtherShipApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECOtherShipApp) Then
    End If
End Sub

Private Sub chkECOtherShipDetails_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECOtherShipDetails) Then
    End If
End Sub

Private Sub chkECPotAddReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECPotAddReq) Then
    End If
End Sub

Private Sub chkECPotConsumpMax_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECPotConsumpMax) Then
    End If
End Sub

Private Sub chkECPotMaxDissolve_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECPotMaxDissolve) Then
    End If
End Sub

Private Sub chkECPotWaterApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECPotWaterApp) Then
    End If
End Sub

Private Sub chkECTechAddReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECTechAddReq) Then
    End If
End Sub

Private Sub chkECTechConsumpMax_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECTechConsumpMax) Then
    End If
End Sub

Private Sub chkECTechMaxDissolve_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECTechMaxDissolve) Then
    End If
End Sub

Private Sub chkECTechWaterApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, chkECTechWaterApp) Then
    End If
End Sub

Private Sub txtAvcatQualReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub txtAvcatQualReq_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, txtAvcatQualReq) Then
    End If
End Sub

Private Sub txtDiesoConsumpMax_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub txtDiesoConsumpMax_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, txtDiesoConsumpMax) Then
    End If
End Sub

Private Sub txtDiesoQualReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub txtDiesoQualReq_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, txtDiesoQualReq) Then
    End If
End Sub

Private Sub txtDrainTypeDetails_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub txtDrainTypeDetails_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, txtDrainTypeDetails) Then
    End If
End Sub

Private Sub txtLubeConsumpMax_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub txtLubeConsumpMax_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, txtLubeConsumpMax) Then
    End If
End Sub

Private Sub txtLubeTypeDetails_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub txtLubeTypeDetails_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, txtLubeTypeDetails) Then
    End If
End Sub

Private Sub txtOtherShipDetails_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub txtOtherShipDetails_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, txtOtherShipDetails) Then
    End If
End Sub

Private Sub txtPotAddReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub txtPotAddReq_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, txtPotAddReq) Then
    End If
End Sub

Private Sub txtPotConsumpMax_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub txtPotConsumpMax_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, txtPotConsumpMax) Then
    End If
End Sub

Private Sub txtPotMaxDissolve_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub txtPotMaxDissolve_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, txtPotMaxDissolve) Then
    End If
End Sub

Private Sub txtTechAddReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub txtTechAddReq_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, txtTechAddReq) Then
    End If
End Sub

Private Sub txtTechConsumpMax_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub txtTechConsumpMax_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, txtTechConsumpMax) Then
    End If
End Sub

Private Sub txtTechMaxDissolve_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryAuxTwo")
End Sub

Private Sub txtTechMaxDissolve_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryAuxTwo", mblnDSFormPopupChanged, txtTechMaxDissolve) Then
    End If
End Sub

Private Sub UserForm_Click()

End Sub

Private Sub UserForm_Initialize()
    On Error GoTo Err_Trap
    
    mstrDSActionEvents = gstrActionEventsNone ' Prevent events
    
    ' Set up the form fields, clearing their values too
    If modDSEntry.SetUpFields("frmDSEntryAuxTwo") Then
    End If
    ' Load Part data
    If PopulateSpecFields("frmDSEntryAuxTwo") Then
    End If
    ' Set up the enabled/disabled configuration for the loaded form
    If EnableFieldValues("frmDSEntryAuxTwo") Then
    End If

    mstrDSActionEvents = gstrActionEventsAll ' Allow all events processing again

    ClearDSHighlights ("frmDSEntryAuxTwo")
    
    Exit Sub
Err_Trap:
    mstrDSActionEvents = gstrActionEventsAll ' Allow all events processing again
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmDSEntryAuxTwo.UserForm_Initialize"
    Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
' Prevent Closing of Pop-up Form
'
    If CloseMode = vbFormControlMenu Then
        Cancel = True
    End If
End Sub
Attribute VB_Name = "frmDSEntryElec"
Attribute VB_Base = "0{D02F27C8-7959-438B-A19F-D0D9E46FAB14}{0A6C0C01-EA80-4DF2-BC12-6C5689957D5B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnElecCloseNoSave_Click()
'
' Close the form without saving any changes
'
    Dim blnContinue As Boolean
    
    On Error GoTo Err_Trap
    
    blnContinue = True
    
    If mblnDSFormPopupChanged = True Then
        If MsgBox("Are you sure you want to close this form without saving your changes?", vbOKCancel, "Close Pop-up Form") <> vbOK Then
            blnContinue = False
        End If
    End If
    
    If blnContinue Then
        ' Close the form
        mblnDSFormPopupChanged = False ' Form is closing - clear the form changed flag
        Unload Me
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmDSEntryElec.btnElecCloseNoSave_Click"
    Exit Sub
End Sub

Private Sub btnElecSaveAndClose_Click()
'
' Validate fields
' Update existing part - data fields from this form only
'
    Dim strValidationMessage As String
    
    On Error GoTo Err_Trap
    
    mstrDSActionEvents = gstrActionEventsNone ' Prevent all events
    
    strValidationMessage = modDSFormValidation.ValidForm("frmDSEntryElec")
    
    If strValidationMessage = "" Then
        ' Should be updating an existing part
        If mlngCurrentRow > 1 Then
                modDSEntry.UpdatePart ("frmDSEntryElec") ' Updates part based on this form's fields
                modDSEntry.SetShipServicesLabels
                MsgBox "Part has been updated", vbOKOnly, "Part Data - Update Part"
        Else
            ' Invalid row number - cannot update!
            MsgBox "Cannot update - no known record", vbOKOnly, "Part Data - Update Part"
        End If
        ' Successful or otherwise - close the form
        mblnDSFormPopupChanged = False ' Form is closing - clear the form changed flag
        Unload Me
    Else
        MsgBox strValidationMessage, vbExclamation, "Invalid Fields"
    End If
    
    mstrDSActionEvents = gstrActionEventsAll ' Allow all events again

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmDSEntryElec.btnElecSaveAndClose_Click"
    Exit Sub
End Sub

Private Sub cboElec01LoadNonLin_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec01LoadNonLin_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec01LoadNonLin) Then
    End If
End Sub

Private Sub cboElec01LoadType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec01LoadType_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboElec01PeakLoadPres_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec01PeakLoadPres_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec01PeakLoadPres) Then
    End If
End Sub

Private Sub cboElec01QPSReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec01QPSReq_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboElec01ReStartTimeApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec01ReStartTimeApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec01ReStartTimeApp) Then
    End If
End Sub

Private Sub cboElec01StartCurrApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec01StartCurrApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec01StartCurrApp) Then
    End If
End Sub

Private Sub cboElec02LoadNonLin_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec02LoadNonLin_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec02LoadNonLin) Then
    End If
End Sub

Private Sub cboElec02LoadType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec02LoadType_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboElec02PeakLoadPres_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec02PeakLoadPres_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec02PeakLoadPres) Then
    End If
End Sub

Private Sub cboElec02QPSReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec02QPSReq_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboElec02ReStartTimeApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec02ReStartTimeApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec02ReStartTimeApp) Then
    End If
End Sub

Private Sub cboElec02StartCurrApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec02StartCurrApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec02StartCurrApp) Then
    End If
End Sub

Private Sub cboElec03LoadNonLin_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec03LoadNonLin_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec03LoadNonLin) Then
    End If
End Sub

Private Sub cboElec03LoadType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec03LoadType_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboElec03PeakLoadPres_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec03PeakLoadPres_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec03PeakLoadPres) Then
    End If
End Sub

Private Sub cboElec03QPSReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec03QPSReq_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboElec03ReStartTimeApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec03ReStartTimeApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec03ReStartTimeApp) Then
    End If
End Sub

Private Sub cboElec03StartCurrApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec03StartCurrApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec03StartCurrApp) Then
    End If
End Sub

Private Sub cboElec04LoadNonLin_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec04LoadNonLin_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec04LoadNonLin) Then
    End If
End Sub

Private Sub cboElec04LoadType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec04LoadType_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboElec04PeakLoadPres_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec04PeakLoadPres_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec04PeakLoadPres) Then
    End If
End Sub

Private Sub cboElec04QPSReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec04QPSReq_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboElec04ReStartTimeApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec04ReStartTimeApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec04ReStartTimeApp) Then
    End If
End Sub

Private Sub cboElec04StartCurrApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec04StartCurrApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec04StartCurrApp) Then
    End If
End Sub

Private Sub cboElec05LoadNonLin_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec05LoadNonLin_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec05LoadNonLin) Then
    End If
End Sub

Private Sub cboElec05LoadType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec05LoadType_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboElec05PeakLoadPres_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec05PeakLoadPres_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec05PeakLoadPres) Then
    End If
End Sub

Private Sub cboElec05QPSReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec05QPSReq_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboElec05ReStartTimeApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec05ReStartTimeApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec05ReStartTimeApp) Then
    End If
End Sub

Private Sub cboElec05StartCurrApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec05StartCurrApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec05StartCurrApp) Then
    End If
End Sub

Private Sub cboElec06LoadNonLin_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec06LoadNonLin_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec06LoadNonLin) Then
    End If
End Sub

Private Sub cboElec06LoadType_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec06LoadType_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboElec06PeakLoadPres_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec06PeakLoadPres_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec06PeakLoadPres) Then
    End If
End Sub

Private Sub cboElec06QPSReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec06QPSReq_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboElec06ReStartTimeApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec06ReStartTimeApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec06ReStartTimeApp) Then
    End If
End Sub

Private Sub cboElec06StartCurrApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElec06StartCurrApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElec06StartCurrApp) Then
    End If
End Sub

Private Sub cboElecAddElecNotesReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElecAddElecNotesReq_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElecAddElecNotesReq) Then
    End If
End Sub

Private Sub cboElecEarthingReq_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElecEarthingReq_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboElecNoSupplies_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElecNoSupplies_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElecNoSupplies) Then
    End If
End Sub

Private Sub cboElecNoSupplies_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If ComboChangeProcess(cboElecNoSupplies) Then
    End If
End Sub

Private Sub cboElecNoSupplies_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If ComboChangeProcess(cboElecNoSupplies) Then
    End If

End Sub

Private Sub cboElecOwnUPS_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElecOwnUPS_Change()
    If mstrDSActionEvents = gstrActionEventsAll Then
        mblnDSFormPopupChanged = True ' Event processing is on - set Form has changed flag
    End If
End Sub

Private Sub cboElecStartUpTimeApp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub cboElecStartUpTimeApp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, cboElecStartUpTimeApp) Then
    End If
End Sub

Private Sub chkECElec01FullLoadCurr_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec01FullLoadCurr) Then
    End If
End Sub

Private Sub chkECElec01LoadHarmChar_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec01LoadHarmChar) Then
    End If
End Sub

Private Sub chkECElec01LoadNonLin_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec01LoadNonLin) Then
    End If
End Sub

Private Sub chkECElec01LoadType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec01LoadType) Then
    End If
End Sub

Private Sub chkECElec01LongSupInt_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec01LongSupInt) Then
    End If
End Sub

Private Sub chkECElec01NormLoad_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec01NormLoad) Then
    End If
End Sub

Private Sub chkECElec01PeakLoad_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec01PeakLoad) Then
    End If
End Sub

Private Sub chkECElec01PeakLoadDur_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec01PeakLoadDur) Then
    End If
End Sub

Private Sub chkECElec01PeakLoadPres_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec01PeakLoadPres) Then
    End If
End Sub

Private Sub chkECElec01PowFact_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec01PowFact) Then
    End If
End Sub

Private Sub chkECElec01QPSReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec01QPSReq) Then
    End If
End Sub

Private Sub chkECElec01ReStartTimeApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec01ReStartTimeApp) Then
    End If
End Sub

Private Sub chkECElec01StartCurr_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec01StartCurr) Then
    End If
End Sub

Private Sub chkECElec01StartCurrApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec01StartCurrApp) Then
    End If
End Sub

Private Sub chkECElec01TimeToOp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub chkECElec01TimeToOp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec01TimeToOp) Then
    End If
End Sub

Private Sub chkECElec02FullLoadCurr_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec02FullLoadCurr) Then
    End If
End Sub

Private Sub chkECElec02LoadHarmChar_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec02LoadHarmChar) Then
    End If
End Sub

Private Sub chkECElec02LoadNonLin_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec02LoadNonLin) Then
    End If
End Sub

Private Sub chkECElec02LoadType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec02LoadType) Then
    End If
End Sub

Private Sub chkECElec02LongSupInt_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec02LongSupInt) Then
    End If
End Sub

Private Sub chkECElec02NormLoad_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec02NormLoad) Then
    End If
End Sub

Private Sub chkECElec02PeakLoad_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec02PeakLoad) Then
    End If
End Sub

Private Sub chkECElec02PeakLoadDur_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec02PeakLoadDur) Then
    End If
End Sub

Private Sub chkECElec02PeakLoadPres_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec02PeakLoadPres) Then
    End If
End Sub

Private Sub chkECElec02PowFact_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec02PowFact) Then
    End If
End Sub

Private Sub chkECElec02QPSReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec02QPSReq) Then
    End If
End Sub

Private Sub chkECElec02ReStartTimeApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec02ReStartTimeApp) Then
    End If
End Sub

Private Sub chkECElec02StartCurr_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec02StartCurr) Then
    End If
End Sub

Private Sub chkECElec02StartCurrApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec02StartCurrApp) Then
    End If
End Sub

Private Sub chkECElec02TimeToOp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec02TimeToOp) Then
    End If
End Sub

Private Sub chkECElec03FullLoadCurr_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec03FullLoadCurr) Then
    End If
End Sub

Private Sub chkECElec03LoadHarmChar_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec03LoadHarmChar) Then
    End If
End Sub

Private Sub chkECElec03LoadNonLin_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec03LoadNonLin) Then
    End If
End Sub

Private Sub chkECElec03LoadType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec03LoadType) Then
    End If
End Sub

Private Sub chkECElec03LongSupInt_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec03LongSupInt) Then
    End If
End Sub

Private Sub chkECElec03NormLoad_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec03NormLoad) Then
    End If
End Sub

Private Sub chkECElec03PeakLoad_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec03PeakLoad) Then
    End If
End Sub

Private Sub chkECElec03PeakLoadDur_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec03PeakLoadDur) Then
    End If
End Sub

Private Sub chkECElec03PeakLoadPres_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec03PeakLoadPres) Then
    End If
End Sub

Private Sub chkECElec03PowFact_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec03PowFact) Then
    End If
End Sub

Private Sub chkECElec03QPSReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec03QPSReq) Then
    End If
End Sub

Private Sub chkECElec03ReStartTimeApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec03ReStartTimeApp) Then
    End If
End Sub

Private Sub chkECElec03StartCurr_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec03StartCurr) Then
    End If
End Sub

Private Sub chkECElec03StartCurrApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec03StartCurrApp) Then
    End If
End Sub

Private Sub chkECElec03TimeToOp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec03TimeToOp) Then
    End If
End Sub

Private Sub chkECElec04FullLoadCurr_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec04FullLoadCurr) Then
    End If
End Sub

Private Sub chkECElec04LoadHarmChar_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec04LoadHarmChar) Then
    End If
End Sub

Private Sub chkECElec04LoadNonLin_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec04LoadNonLin) Then
    End If
End Sub

Private Sub chkECElec04LoadType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec04LoadType) Then
    End If
End Sub

Private Sub chkECElec04LongSupInt_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec04LongSupInt) Then
    End If
End Sub

Private Sub chkECElec04NormLoad_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec04NormLoad) Then
    End If
End Sub

Private Sub chkECElec04PeakLoad_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec04PeakLoad) Then
    End If
End Sub

Private Sub chkECElec04PeakLoadDur_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec04PeakLoadDur) Then
    End If
End Sub

Private Sub chkECElec04PeakLoadPres_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec04PeakLoadPres) Then
    End If
End Sub

Private Sub chkECElec04PowFact_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec04PowFact) Then
    End If
End Sub

Private Sub chkECElec04QPSReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec04QPSReq) Then
    End If
End Sub

Private Sub chkECElec04ReStartTimeApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec04ReStartTimeApp) Then
    End If
End Sub

Private Sub chkECElec04StartCurr_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec04StartCurr) Then
    End If
End Sub

Private Sub chkECElec04StartCurrApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec04StartCurrApp) Then
    End If
End Sub

Private Sub chkECElec04TimeToOp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec04TimeToOp) Then
    End If
End Sub

Private Sub chkECElec05FullLoadCurr_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec05FullLoadCurr) Then
    End If
End Sub

Private Sub chkECElec05LoadHarmChar_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec05LoadHarmChar) Then
    End If
End Sub

Private Sub chkECElec05LoadNonLin_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec05LoadNonLin) Then
    End If
End Sub

Private Sub chkECElec05LoadType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec05LoadType) Then
    End If
End Sub

Private Sub chkECElec05LongSupInt_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec05LongSupInt) Then
    End If
End Sub

Private Sub chkECElec05NormLoad_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec05NormLoad) Then
    End If
End Sub

Private Sub chkECElec05PeakLoad_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec05PeakLoad) Then
    End If
End Sub

Private Sub chkECElec05PeakLoadDur_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec05PeakLoadDur) Then
    End If
End Sub

Private Sub chkECElec05PeakLoadPres_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec05PeakLoadPres) Then
    End If
End Sub

Private Sub chkECElec05PowFact_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec05PowFact) Then
    End If
End Sub

Private Sub chkECElec05QPSReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec05QPSReq) Then
    End If
End Sub

Private Sub chkECElec05ReStartTimeApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec05ReStartTimeApp) Then
    End If
End Sub

Private Sub chkECElec05StartCurr_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec05StartCurr) Then
    End If
End Sub

Private Sub chkECElec05StartCurrApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec05StartCurrApp) Then
    End If
End Sub

Private Sub chkECElec05TimeToOp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec05TimeToOp) Then
    End If
End Sub

Private Sub chkECElec06FullLoadCurr_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec06FullLoadCurr) Then
    End If
End Sub

Private Sub chkECElec06LoadHarmChar_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec06LoadHarmChar) Then
    End If
End Sub

Private Sub chkECElec06LoadNonLin_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec06LoadNonLin) Then
    End If
End Sub

Private Sub chkECElec06LoadType_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec06LoadType) Then
    End If
End Sub

Private Sub chkECElec06LongSupInt_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec06LongSupInt) Then
    End If
End Sub

Private Sub chkECElec06NormLoad_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec06NormLoad) Then
    End If
End Sub

Private Sub chkECElec06PeakLoad_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec06PeakLoad) Then
    End If
End Sub

Private Sub chkECElec06PeakLoadDur_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec06PeakLoadDur) Then
    End If
End Sub

Private Sub chkECElec06PeakLoadPres_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec06PeakLoadPres) Then
    End If
End Sub

Private Sub chkECElec06PowFact_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec06PowFact) Then
    End If
End Sub

Private Sub chkECElec06QPSReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec06QPSReq) Then
    End If
End Sub

Private Sub chkECElec06ReStartTimeApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec06ReStartTimeApp) Then
    End If
End Sub

Private Sub chkECElec06StartCurr_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec06StartCurr) Then
    End If
End Sub

Private Sub chkECElec06StartCurrApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec06StartCurrApp) Then
    End If
End Sub

Private Sub chkECElec06TimeToOp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElec06TimeToOp) Then
    End If
End Sub

Private Sub chkECElecAddElecNotesReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElecAddElecNotesReq) Then
    End If
End Sub

Private Sub chkECElecEarthingReq_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElecEarthingReq) Then
    End If
End Sub

Private Sub chkECElecEffic_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElecEffic) Then
    End If
End Sub

Private Sub chkECElecIPProtRating_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElecIPProtRating) Then
    End If
End Sub

Private Sub chkECElecNoSupplies_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElecNoSupplies) Then
    End If
End Sub

Private Sub chkECElecNotes_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElecNotes) Then
    End If
End Sub

Private Sub chkECElecOwnUPS_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElecOwnUPS) Then
    End If
End Sub

Private Sub chkECElecStartUpTime_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElecStartUpTime) Then
    End If
End Sub

Private Sub chkECElecStartUpTimeApp_Click()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkECElecStartUpTimeApp) Then
    End If
End Sub

Private Sub chkElec_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub chkElec_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, chkElec) Then
    End If
End Sub

Private Sub chkElec_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    mblnTriggerWarningMessage = True
End Sub

Private Sub chkElec_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    mblnTriggerWarningMessage = True
End Sub

Private Sub txtElec01FullLoadCurr_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec01FullLoadCurr_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec01FullLoadCurr) Then
    End If
End Sub

Private Sub txtElec01LoadHarmChar_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec01LoadHarmChar_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec01LoadHarmChar) Then
    End If
End Sub

Private Sub txtElec01LongSupInt_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec01LongSupInt_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec01LongSupInt) Then
    End If
End Sub

Private Sub txtElec01NormLoad_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec01NormLoad_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec01NormLoad) Then
    End If
End Sub

Private Sub txtElec01PeakLoad_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec01PeakLoad_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec01PeakLoad) Then
    End If
End Sub

Private Sub txtElec01PeakLoadDur_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec01PeakLoadDur_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec01PeakLoadDur) Then
    End If
End Sub

Private Sub txtElec01PowFact_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec01PowFact_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec01PowFact) Then
    End If
End Sub

Private Sub txtElec01StartCurr_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec01StartCurr_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec01StartCurr) Then
    End If
End Sub

Private Sub txtElec01TimeToOp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec01TimeToOp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec01TimeToOp) Then
    End If
End Sub

Private Sub txtElec02FullLoadCurr_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec02FullLoadCurr_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec02FullLoadCurr) Then
    End If
End Sub

Private Sub txtElec02LoadHarmChar_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec02LoadHarmChar_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec02LoadHarmChar) Then
    End If
End Sub

Private Sub txtElec02LongSupInt_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec02LongSupInt_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec02LongSupInt) Then
    End If
End Sub

Private Sub txtElec02NormLoad_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec02NormLoad_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec02NormLoad) Then
    End If
End Sub

Private Sub txtElec02PeakLoad_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec02PeakLoad_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec02PeakLoad) Then
    End If
End Sub

Private Sub txtElec02PeakLoadDur_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec02PeakLoadDur_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec02PeakLoadDur) Then
    End If
End Sub

Private Sub txtElec02PowFact_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec02PowFact_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec02PowFact) Then
    End If
End Sub

Private Sub txtElec02StartCurr_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec02StartCurr_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec02StartCurr) Then
    End If
End Sub

Private Sub txtElec02TimeToOp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec02TimeToOp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec02TimeToOp) Then
    End If
End Sub

Private Sub txtElec03FullLoadCurr_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec03FullLoadCurr_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec03FullLoadCurr) Then
    End If
End Sub

Private Sub txtElec03LoadHarmChar_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec03LoadHarmChar_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec03LoadHarmChar) Then
    End If
End Sub

Private Sub txtElec03LongSupInt_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec03LongSupInt_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec03LongSupInt) Then
    End If
End Sub

Private Sub txtElec03NormLoad_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec03NormLoad_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec03NormLoad) Then
    End If
End Sub

Private Sub txtElec03PeakLoad_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec03PeakLoad_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec03PeakLoad) Then
    End If
End Sub

Private Sub txtElec03PeakLoadDur_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec03PeakLoadDur_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec03PeakLoadDur) Then
    End If
End Sub

Private Sub txtElec03PowFact_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec03PowFact_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec03PowFact) Then
    End If
End Sub

Private Sub txtElec03StartCurr_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec03StartCurr_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec03StartCurr) Then
    End If
End Sub

Private Sub txtElec03TimeToOp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec03TimeToOp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec03TimeToOp) Then
    End If
End Sub

Private Sub txtElec04FullLoadCurr_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec04FullLoadCurr_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec04FullLoadCurr) Then
    End If
End Sub

Private Sub txtElec04LoadHarmChar_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec04LoadHarmChar_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec04LoadHarmChar) Then
    End If
End Sub

Private Sub txtElec04LongSupInt_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec04LongSupInt_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec04LongSupInt) Then
    End If
End Sub

Private Sub txtElec04NormLoad_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec04NormLoad_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec04NormLoad) Then
    End If
End Sub

Private Sub txtElec04PeakLoad_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec04PeakLoad_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec04PeakLoad) Then
    End If
End Sub

Private Sub txtElec04PeakLoadDur_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec04PeakLoadDur_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec04PeakLoadDur) Then
    End If
End Sub

Private Sub txtElec04PowFact_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec04PowFact_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec04PowFact) Then
    End If
End Sub

Private Sub txtElec04StartCurr_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec04StartCurr_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec04StartCurr) Then
    End If
End Sub

Private Sub txtElec04TimeToOp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec04TimeToOp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec04TimeToOp) Then
    End If
End Sub

Private Sub txtElec05FullLoadCurr_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec05FullLoadCurr_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec05FullLoadCurr) Then
    End If
End Sub

Private Sub txtElec05LoadHarmChar_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec05LoadHarmChar_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec05LoadHarmChar) Then
    End If
End Sub

Private Sub txtElec05LongSupInt_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec05LongSupInt_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec05LongSupInt) Then
    End If
End Sub

Private Sub txtElec05NormLoad_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec05NormLoad_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec05NormLoad) Then
    End If
End Sub

Private Sub txtElec05PeakLoad_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec05PeakLoad_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec05PeakLoad) Then
    End If
End Sub

Private Sub txtElec05PeakLoadDur_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec05PeakLoadDur_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec05PeakLoadDur) Then
    End If
End Sub

Private Sub txtElec05PowFact_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec05PowFact_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec05PowFact) Then
    End If
End Sub

Private Sub txtElec05StartCurr_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec05StartCurr_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec05StartCurr) Then
    End If
End Sub

Private Sub txtElec05TimeToOp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec05TimeToOp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec05TimeToOp) Then
    End If
End Sub

Private Sub txtElec06FullLoadCurr_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec06FullLoadCurr_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec06FullLoadCurr) Then
    End If
End Sub

Private Sub txtElec06LoadHarmChar_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec06LoadHarmChar_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec06LoadHarmChar) Then
    End If
End Sub

Private Sub txtElec06LongSupInt_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec06LongSupInt_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec06LongSupInt) Then
    End If
End Sub

Private Sub txtElec06NormLoad_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec06NormLoad_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec06NormLoad) Then
    End If
End Sub

Private Sub txtElec06PeakLoad_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec06PeakLoad_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec06PeakLoad) Then
    End If
End Sub

Private Sub txtElec06PeakLoadDur_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec06PeakLoadDur_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec06PeakLoadDur) Then
    End If
End Sub

Private Sub txtElec06PowFact_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec06PowFact_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec06PowFact) Then
    End If
End Sub

Private Sub txtElec06StartCurr_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec06StartCurr_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec06StartCurr) Then
    End If
End Sub

Private Sub txtElec06TimeToOp_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElec06TimeToOp_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElec06TimeToOp) Then
    End If
End Sub

Private Sub txtElecEffic_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElecEffic_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElecEffic) Then
    End If
End Sub

Private Sub txtElecIPProtRating_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElecIPProtRating_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElecIPProtRating) Then
    End If
End Sub

Private Sub txtElecNotes_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElecNotes_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElecNotes) Then
    End If
End Sub

Private Sub txtElecStartUpTime_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    modDSFormValidation.ValidFieldBeforeUpdate ("frmDSEntryElec")
End Sub

Private Sub txtElecStartUpTime_Change()
    If modDSEntry.OnChangeTriggerField("frmDSEntryElec", mblnDSFormPopupChanged, txtElecStartUpTime) Then
    End If
End Sub

Private Sub UserForm_Click()

End Sub

Private Sub UserForm_Initialize()
    On Error GoTo Err_Trap
    
    mstrDSActionEvents = gstrActionEventsNone ' Prevent events
    
    ' Set up the form fields, clearing their values too
    If modDSEntry.SetUpFields("frmDSEntryElec") Then
    End If
    ' Load Part data
    If PopulateSpecFields("frmDSEntryElec") Then
    End If
    ' Set up the enabled/disabled configuration for the loaded form
    If EnableFieldValues("frmDSEntryElec") Then
    End If

    mstrDSActionEvents = gstrActionEventsAll ' Allow all events processing again

    ClearDSHighlights ("frmDSEntryElec")
    
    Exit Sub
Err_Trap:
    mstrDSActionEvents = gstrActionEventsAll ' Allow all events processing again
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmDSEntryElec.UserForm_Initialize"
    Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
' Prevent Closing of Pop-up Form
'
    If CloseMode = vbFormControlMenu Then
        Cancel = True
    End If
End Sub
Attribute VB_Name = "frmDeveloperOnly"
Attribute VB_Base = "0{5A2C9E76-7CF2-48AD-A952-DC8CBF8C26C4}{5558373C-DAD6-4115-A7EA-6A12D33BBEF7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnNotYetKnown_Click()
    On Error GoTo Err_Trap
    
    modDSMain.InitializeVariables
    
    lblPleaseWaitNYK.Caption = "Please wait while Not Yet Known information is compiled"
    
    If MsgBox("A list of Not Yet Known fields, in all Parts, will be output to a CSV file." & vbCrLf & _
               "Click OK to continue, Cancel to stop", _
               vbOKCancel, _
               "Export Not Yet Known") = vbOK Then
    
        If modDSNotYetKnown.checkNotYetKnown(0, False) Then
        End If
    
        If modDSExportToCSV.DataExport("NYK") Then
        End If
    End If
    
    lblPleaseWaitNYK.Caption = ""
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnNotYetKnown_Click"
    Exit Sub
End Sub

Private Sub btnResetStructure_Click()
   modDSStructure.ClearStructure
End Sub

Private Sub btnRevealSheets_Click()
    RevealWorkbook
    Unload Me
End Sub

Private Sub btnClearData_Click()
    If MsgBox("Clear all Parts data, Structure data and Not Yet Known report data?", vbOKCancel) = vbOK Then
        ClearSheet ("PartsData")
        ClearSheet ("Structure")
        ClearSheet ("StructBackup")
        ClearSheet ("NotYetKnown")
    End If
    
    If MsgBox("Clear all Contractor Import data?", vbOKCancel) = vbOK Then
        ClearSheet ("ContractorImport")
        ClearSheet ("ContractorImpExcept")
    End If
End Sub

Private Sub UserForm_Click()

End Sub

Private Sub UserForm_Initialize()

End Sub

Private Sub ClearSheet(ByVal strSheet As String)
'
' Clear the passed Sheet
'
    Dim mshtData As Excel.Worksheet
    Dim lngCount As Long
    Dim lngTotal As Long
    Dim lngFirstRow As Long
    Dim blnContinue As Boolean
    
    On Error GoTo Err_ClearSheet
    
    blnContinue = False
    lngFirstRow = 2
    
    If strSheet = "PartsData" Then
        Set mshtData = ThisWorkbook.Sheets("PartsData")
        lngFirstRow = 2
        blnContinue = True
    ElseIf strSheet = "Structure" Then
        Set mshtData = ThisWorkbook.Sheets("Structure")
        lngFirstRow = 1
        blnContinue = True
    ElseIf strSheet = "StructBackup" Then
        Set mshtData = ThisWorkbook.Sheets("StructBackup")
        lngFirstRow = 1
        blnContinue = True
    ElseIf strSheet = "ContractorImport" Then
        Set mshtData = ThisWorkbook.Sheets("ContractorImport")
        lngFirstRow = 1
        blnContinue = True
    ElseIf strSheet = "ContractorImpExcept" Then
        Set mshtData = ThisWorkbook.Sheets("ContractorImpExcept")
        lngFirstRow = 1
        blnContinue = True
    ElseIf strSheet = "NotYetKnown" Then
        Set mshtData = ThisWorkbook.Sheets("NotYetKnown")
        lngFirstRow = 1
        blnContinue = True
    End If
    
    If blnContinue = True Then
        ' Clear the Sheet
        lngTotal = mshtData.UsedRange.Cells.Rows.Count
    
        For lngCount = lngTotal To lngFirstRow Step -1
             mshtData.Cells(lngCount, 1).EntireRow.Delete
        Next lngCount

    End If

    Set mshtData = Nothing

    Exit Sub
Err_ClearSheet:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ClearSheet - " & strSheet
    Exit Sub
End Sub



Attribute VB_Name = "frmExportControl"
Attribute VB_Base = "0{214A8253-6D2D-4FC2-B48F-ADB1483CE01B}{20DEC121-31F5-4C43-ADE0-88B589A759B9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnConfigClose_Click()
    Unload Me
End Sub

Private Sub btnExportEAR600_Click()
    Dim strSaveLabel As String
    
    On Error GoTo Err_Trap
    
    strSaveLabel = lblExportEAR600.Caption
    lblExportEAR600.Caption = "Export in progress....."
    lblExportEAR600.ForeColor = &HC0&
    
    If MsgBox("EAR 600 attributes of EAR 600 Parts will be output to a CSV file." & vbCrLf & _
               "Click OK to continue, Cancel to stop", _
               vbOKCancel, _
               "Export EAR 600 Part Data") = vbOK Then
        ' Export the NotYetKnown sheet data to CSV
        If modDSExportToCSV.DataExport("EAR 600") Then
        End If
    End If
    
    lblExportEAR600.Caption = strSaveLabel
    lblExportEAR600.ForeColor = &H808000
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnExportEAR600_Click"
    Exit Sub
End Sub

Private Sub btnExportITAR_Click()
    Dim strSaveLabel As String
    
    On Error GoTo Err_Trap
    
    strSaveLabel = lblExportITAR.Caption
    lblExportITAR.Caption = "Export in progress....."
    lblExportITAR.ForeColor = &HC0&
    
    If MsgBox("ITAR attributes of ITAR Parts will be output to a CSV file." & vbCrLf & _
               "Click OK to continue, Cancel to stop", _
               vbOKCancel, _
               "Export ITAR Part Data") = vbOK Then
        ' Export the NotYetKnown sheet data to CSV
        If modDSExportToCSV.DataExport("ITAR") Then
        End If
    End If
    
    lblExportITAR.Caption = strSaveLabel
    lblExportITAR.ForeColor = &H808000
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnExportITAR_Click"
    Exit Sub
End Sub

Private Sub UserForm_Initialize()
    On Error GoTo Err_Trap

    frmExportControl.Caption = modDSGeneral.GetApplicationTitle(True) & " - Export Control"
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "UserForm_Initialize"
    Exit Sub

End Sub

Attribute VB_Name = "frmMain"
Attribute VB_Base = "0{BB190F5E-6307-411D-B900-E51F0FA6DA81}{85F9DD6C-D827-4C1D-B057-AD143C08E84C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnConfiguration_Click()
    Dim strConfigPassword As String
    
    On Error GoTo Err_Trap
    
    strConfigPassword = ThisWorkbook.Sheets("Configuration").Cells(2, "AA")
    
    If txtMainConfigPassword.Value = strConfigPassword Then
        ' Open the BAE Configuration form
        frmConfigureApplication.Show
        txtMainConfigPassword.Value = "" ' Clear password field
    Else
        MsgBox "Access to the BAE Configuration features requires a valid password", vbOKOnly, "BAE Configuration"
        txtMainConfigPassword.Value = "" ' Clear password field
    End If
        
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnConfiguration_Click"
    Exit Sub
End Sub

Private Sub btnExportControlReport_Click()
    Dim strSaveLabel As String
    
    On Error GoTo Err_Trap
    
    strSaveLabel = lblExportControlReport.Caption
    lblExportControlReport.Caption = "Please wait while Export-Controlled information is compiled"
    lblExportControlReport.ForeColor = &HC0&
    
    If MsgBox("A list of Export-Controlled attribute names, in all Parts, will be output to a CSV file." & vbCrLf & _
               "Click OK to continue, Cancel to stop", _
               vbOKCancel, _
               "Export of Export-Controlled") = vbOK Then
        ' Compile list of NYK fields in the NotYetKnown sheet
        If modDSNotYetKnown.checkNotYetKnown(0, False, "EC") Then
        End If
        ' Export the NotYetKnown sheet data to CSV
        If modDSExportToCSV.DataExport("EC") Then
        End If
    End If
    
    lblExportControlReport.Caption = strSaveLabel
    lblExportControlReport.ForeColor = &H808000
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnNotYetKnown_Click"
    Exit Sub
End Sub

Private Sub btnMainEC_Click()
    Dim strConfigPassword As String
    
    On Error GoTo Err_Trap
    
    strConfigPassword = ThisWorkbook.Sheets("Configuration").Cells(3, "AA")
    
    If txtMainECPassword.Value = strConfigPassword Then
        ' Open the BAE Configuration form
        frmExportControl.Show
        txtMainECPassword.Value = "" ' Clear password field
    Else
        MsgBox "Access to the BAE Export-Control features requires a valid password", vbOKOnly, "BAE Export-Control"
        txtMainECPassword.Value = "" ' Clear password field
    End If
        
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnMainEC_Click"
    Exit Sub
End Sub

Private Sub btnNotYetKnown_Click()
    Dim strSaveLabel As String
    
    On Error GoTo Err_Trap
    
    strSaveLabel = lblNotYetKnown.Caption
    lblNotYetKnown.Caption = "Please wait while Not Yet Known information is compiled"
    lblNotYetKnown.ForeColor = &HC0&
    
    If MsgBox("A list of Not Yet Known attribute names, in all Parts, will be output to a CSV file." & vbCrLf & _
               "Click OK to continue, Cancel to stop", _
               vbOKCancel, _
               "Export Not Yet Known") = vbOK Then
        ' Compile list of NYK fields in the NotYetKnown sheet
        If modDSNotYetKnown.checkNotYetKnown(0, False, "NYK") Then
        End If
        ' Export the NotYetKnown sheet data to CSV
        If modDSExportToCSV.DataExport("NYK") Then
        End If
    End If
    
    lblNotYetKnown.Caption = strSaveLabel
    lblNotYetKnown.ForeColor = &H808000
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnNotYetKnown_Click"
    Exit Sub
End Sub

Private Sub btnRawDataImport_Click()
    
    frmContractorImport.Show
    
'    modDSMain.MainButtonsShowHide
    modDSMain.MainECShowHide
End Sub

Private Sub btnDataEntry_Click()
    
    ' Save the entire workbook
    Excel.ActiveWorkbook.Save
    ' Open the Data Entry form
    frmDSEntry.Show

End Sub

Private Sub btnExit_Click()
        
    ' Save the entire workbook
    Excel.ActiveWorkbook.Save
    ' Exit MS Excel
    Excel.ActiveWorkbook.Application.Quit
    
End Sub

Private Sub btnStructureDefine_Click()
    
    Dim lngTotalStruct As Long
    
    On Error GoTo Err_Trap
    
    lngTotalStruct = mshtStructure.UsedRange.Rows.Count
    If lngTotalStruct <= 0 Or _
       mshtStructure.UsedRange.Cells(1, 1) = "" Then
        MsgBox "There are no Part Data Structures set up", vbOKOnly, "Part Data Structure"
    Else
        ' Open the Structure form
        frmStructure.Show
    
'        modDSMain.MainITARShowHide
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnStructureDefine_Click"
    Exit Sub
End Sub

Private Sub btnSubmissionIssueDecrement_Click()
'
' Subtract 1 from the current Submission Issue Number - confirm first
'
    Dim lngSubmissionIssueNo As Long
        
    On Error GoTo Err_Trap
    
    ' Read the current Submission Issue Number
    lngSubmissionIssueNo = mshtConfiguration.Cells(glngConfigSUBMISSIONISSUENO, 2)
    If IsNull(mshtConfiguration.Cells(glngConfigSUBMISSIONISSUENO, 2)) Or _
       mshtConfiguration.Cells(glngConfigSUBMISSIONISSUENO, 2) = "" Then
        lngSubmissionIssueNo = 1
        MsgBox "Submission Issue initially set to 1", vbOKOnly, "Change Submission Issue - Initial Setting"
    Else
        If lngSubmissionIssueNo <= 1 Then
            ' Cannot decrement further - lower limit reached
            lngSubmissionIssueNo = 1
            MsgBox "Cannot decrement below 1!", vbOKOnly, "Change Submission Issue - Lower Limit Reached"
        Else
            If MsgBox("Are you sure you want to decrease the Submission Issue by 1?", _
                      vbOKCancel, _
                      "Change Submission Issue - Confirm") = vbOK Then
                lngSubmissionIssueNo = lngSubmissionIssueNo - 1
            End If
        End If
    End If
    
    ' Save the Submission Issue Number
    mshtConfiguration.Cells(glngConfigSUBMISSIONISSUENO, 2) = lngSubmissionIssueNo
    ' Display on the Main Form
    frmMain.txtMainSubIssue.Value = modDSGeneral.GetConfigurationData(glngConfigSUBMISSIONISSUENO)
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnSubmissionIssueDecrement_Click"
    Exit Sub
End Sub

Private Sub btnSubmissionIssueIncrement_Click()
'
' Add 1 to the current Submission Issue Number - confirm first
'
    Dim lngSubmissionIssueNo As Long
        
    On Error GoTo Err_Trap
    
    ' Read the current Submission Issue Number
    lngSubmissionIssueNo = mshtConfiguration.Cells(glngConfigSUBMISSIONISSUENO, 2)
    If IsNull(mshtConfiguration.Cells(glngConfigSUBMISSIONISSUENO, 2)) Or _
       mshtConfiguration.Cells(glngConfigSUBMISSIONISSUENO, 2) = "" Then
        lngSubmissionIssueNo = 1
        MsgBox "Submission Issue initially set to 1", vbOKOnly, "Change Submission Issue - Initial Setting"
    Else
        If lngSubmissionIssueNo >= 1000 Then
            ' Cannot increment further - upper limit reached
            lngSubmissionIssueNo = 1000
            MsgBox "Cannot increment above 1000!", vbOKOnly, "Change Submission Issue - Upper Limit Reached"
        Else
            If MsgBox("Are you sure you want to increase the Submission Issue by 1?", _
                      vbOKCancel, _
                      "Change Submission Issue - Confirm") = vbOK Then
                lngSubmissionIssueNo = lngSubmissionIssueNo + 1
            End If
        End If
    End If
    
    ' Save the Submission Issue Number
    mshtConfiguration.Cells(glngConfigSUBMISSIONISSUENO, 2) = lngSubmissionIssueNo
    ' Display on the Main Form
    frmMain.txtMainSubIssue.Value = modDSGeneral.GetConfigurationData(glngConfigSUBMISSIONISSUENO)
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "btnSubmissionIssueIncrement_Click"
    Exit Sub
End Sub

Private Sub lblSetCompleteFlag_Click()

End Sub

Private Sub txtMainContractorName_Change()

End Sub

Private Sub UserForm_Initialize()
    
    modDSSecurity.ConcealWorkbook

    txtMainContractName = modDSGeneral.GetConfigurationData(glngConfigCONTRACTNAME)
    txtMainContractNumber = modDSGeneral.GetConfigurationData(glngConfigCONTRACTNUMBER)
    txtMainContractorName = modDSGeneral.GetConfigurationData(glngConfigCONTRACTORNAME)
    txtMainContractorCAGECode = modDSGeneral.GetConfigurationData(glngConfigCONTRACTORCAGECODE)
    txtMainCDRLNo = modDSGeneral.GetConfigurationData(glngConfigCDRL)
    txtMainSubmission = modDSGeneral.GetConfigurationData(glngConfigSUBMISSIONNO)
    txtMainSubIssue = modDSGeneral.GetConfigurationData(glngConfigSUBMISSIONISSUENO)
    frmMain.Caption = modDSGeneral.GetApplicationTitle(True) & " - Home"

    modDSMain.InitializeVariables

    modDSMain.MainECShowHide
        
    modDSMain.DisplayStructureCompleteLabel
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
' Prevent Closing of Main Form
' This code should not be activated until the very last step before releasing the application
'
    If CloseMode = vbFormControlMenu Then
        Cancel = True
    End If
End Sub
Attribute VB_Name = "frmStructure"
Attribute VB_Base = "0{36210D79-F19B-4DAC-AC1A-EAE416584B5A}{1A5FEA32-9446-4E3F-A474-989382488866}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private WithEvents mcTree As clsTreeView
Attribute mcTree.VB_VarHelpID = -1
Private mlCntChildren As Long
Const mcPtPixel As Single = 0.75
    
Private Const mcstrTitleMsg As String = "Part Structure"
Private Const mcstrRemoveMsg As String = "The Part and all its children will be removed from the structure"
Private Const mcstrSaveMsg As String = "The Part Structure will be saved"
Private Const mcstrAlterMsg As String = "Change the Part at the currently selected node"
Private Const mcstrAddChildrenMsg As String = "Add the selected parts as children to the currently selected node"
Private Const mcstrAddTopLevelMsg As String = "Add the selected parts at the top level of the structure"
Private Const mcstrRestoreMsg As String = "Restore the last saved structure - losing any unsaved changes"
Private Const mcstrReloadMsg As String = "Reload the currently saved structure - losing any unsaved changes"
Private Const mcstrCloseMsg As String = "Changes have been made to the Structure Tree. These will be lost if you continue to Close the Structure Form."
Private Const mcstrAskMsg As String = "Click OK to continue, Cancel to abort"

Private Const mcstrRemoveErrorNode As String = "Please select a structure node (Part) to be removed."
Private Const mcstrRemoveErrorLevel As String = "Cannot remove a Parent Part from the Structure."
Private Const mcstrAlterErrorPart As String = "Please select a Part to use to alter the currently selected node."
Private Const mcstrAlterErrorNode As String = "Please select a structure node (Part) to be altered."
Private Const mcstrAlterErrorLevel As String = "Cannot alter a Parent Part in the Structure."
Private Const mcstrAddChildrenErrorNode As String = "Please select a parent structure node (Part) for the child parts."
Private Const mcstrAddChildrenErrorLevel As String = "Cannot add another level - maximum of 15."
Private Const mcstrAddChildrenErrorNotFirst As String = "This part occurs with children elsewhere in the tree. Can only add children to one occurrence of the part in the tree."

Private Sub btnFindStructureCPN_Click()

End Sub

Private Sub cmdAddChildren_Click()
' Add a child node for each selected part - under the currently selected node
    Dim strContractorPartNumber As String
    Dim strKeyFound As String
    
    On Error GoTo Err_Trap
    
    If txtPartCurrentKey.Value = "" Then
        ' User must select the node to be altered
        MsgBox mcstrAddChildrenErrorNode, vbOKOnly, mcstrTitleMsg & " - Add Child Parts"
    Else
        If txtPartCurrentNodeLevel.Value >= 14 Then
            ' The node level is 15 (or more) cannot add more children
            MsgBox mcstrAddChildrenErrorLevel, vbOKOnly, mcstrTitleMsg & " - Add Child Parts"
        Else
            ' Test for this part occurring further up the tree
            ' Can only add children to one occurrence of a part in the tree
            If Not modDSStructure.FindNodesWithChildren(mcTree, txtPartCurrentKey.Value, txtPartCurrentName.Value) Then
                ' This Part does not occur with children anywhere else in the Structure Diagram
                If MsgBox(mcstrAddChildrenMsg & Chr(13) & Chr(10) & mcstrAskMsg, vbOKCancel, mcstrTitleMsg & " - Add Child Parts") = vbOK Then
                    modDSStructure.AddChildParts mcTree.ActiveNode
                    mcTree.Refresh
                End If
            Else
                ' Cannot add children - this is not the first occurrence of the part in the tree
                MsgBox mcstrAddChildrenErrorNotFirst, vbOKOnly, mcstrTitleMsg & " - Add Child Parts"
            End If
        End If
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmStructure.cmdAddChildren_Click"
    Exit Sub
End Sub

Private Sub cmdAlter_Click()
' Alter the currently selected node to the part selected in the combo box.
' All children under the node will be deleted.
    Dim blnReturn As Boolean
    Dim trvView As TreeView
    
    On Error GoTo Err_Trap
    
    If txtPartCurrentKey.Value = "" Then
        ' User must select the node to be altered
        MsgBox mcstrAlterErrorNode, vbOKOnly, mcstrTitleMsg & " - Alter Part"
    ElseIf txtPartCurrentNodeLevel.Value = "" Or _
           txtPartCurrentNodeLevel.Value = "1" Then
        ' Cannot alter Level 1 (Parent) parts
        MsgBox mcstrAlterErrorLevel, vbOKOnly, mcstrTitleMsg & " - Alter Part"
    ElseIf cboPartSelect.Value = "" Or _
       cboPartSelect.Value = "Select" Then
        ' User must select the new part for the node
        MsgBox mcstrAlterErrorPart, vbOKOnly, mcstrTitleMsg & " - Alter Part"
    Else
        ' Confirm alteration of node to another part
        If MsgBox(mcstrAlterMsg & Chr(13) & Chr(10) & mcstrAskMsg, vbOKCancel, mcstrTitleMsg & " - Alter Part") = vbOK Then
            ' Alter the node to the selected part
            modDSStructure.AlterChildParts
        End If
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmStructure.cmdAlter_Click"
    Exit Sub
End Sub

Private Sub cmdClose_Click()
'
' Close the form
' If Structure changes have been made - confirm first
'
    Dim blnClose As Boolean
    
    blnClose = True
    
    If mblnStructureChanged Then
        If MsgBox(mcstrCloseMsg & Chr(13) & Chr(10) & mcstrAskMsg, vbOKCancel, mcstrTitleMsg & " - Close Form") = vbCancel Then
            blnClose = False
        End If
    End If
    
    If blnClose Then
        Unload Me
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmStructure.cmdClose_Click"
    Exit Sub
End Sub

Private Sub cmdCollapseAll_Click()
    modDSStructure.ExpandTree mcTree, False
End Sub

Private Sub cmdExpandAll_Click()
    modDSStructure.ExpandTree mcTree, True
End Sub

Private Sub cmdFindListCPN_Click()
' Finds the first match, in the listbox, to the entered text
    On Error GoTo Err_Trap
    
    If modDSStructure.FindPartInList(frmStructure.txtFindListCPN.Value) Then
    End If

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmStructure.cmdFindListCPN_Click"
    Exit Sub
End Sub

Private Sub cmdFindStructureCPN_Click()
    modDSStructure.HighlightPartNodes mcTree, frmStructure.txtFindStructureCPN.Value
End Sub

Private Sub cmdReloadSavedStructure_Click()
' Reload the currently saved tree - losing any unsaved changes
    If MsgBox(mcstrReloadMsg & Chr(13) & Chr(10) & mcstrAskMsg, vbOKCancel, mcstrTitleMsg & " - Reload Structure") = vbOK Then
        mcTree.NodesClear
        
        LoadStructureTree ' Load the Tree using the Structure sheet data
        modDSStructure.LoadStructureForm mcTree ' Load the form using the Structure sheet data
    End If
End Sub

Private Sub cmdRemove_Click()
' Remove the current tree node and all its children - ask for confirmation
    On Error GoTo Err_Trap
    
    If txtPartCurrentKey.Value = "" Then
        ' User must select the node to be removed
        MsgBox mcstrRemoveErrorNode, vbOKOnly, mcstrTitleMsg & " - Remove"
    ElseIf txtPartCurrentNodeLevel.Value = "" Or _
           txtPartCurrentNodeLevel.Value = "0" Then
        ' Cannot remove Level 0 (Parent) parts
        MsgBox mcstrRemoveErrorLevel, vbOKOnly, mcstrTitleMsg & " - Remove"
    Else
        If MsgBox(mcstrRemoveMsg & Chr(13) & Chr(10) & mcstrAskMsg, vbOKCancel, mcstrTitleMsg & " - Remove") = vbOK Then
            modDSStructure.RemoveNode mcTree
            modDSStructure.ClearCurrentPart
'            ClearTreeHighlights ' Clear any tree highlights
        End If
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmStructure.cmdRemove_Click"
    Exit Sub
End Sub

'Private Sub cmdRestoreBackup_Click()
'' Restore the last saved structure (the backup)
'    If MsgBox(mcstrRestoreMsg & Chr(13) & Chr(10) & mcstrAskMsg, vbOKCancel, mcstrTitleMsg & " - Return to saved structure") = vbOK Then
'        RestoreBackup ' Restore last saved structure
'        trvPartsTree.Nodes.Clear ' Clear the tree structure control
'        LoadForm ' Load the form again
'    End If
'End Sub

Private Sub cmdSaveStructure_Click()
' Save the current tree in the Structure sheet
    On Error GoTo Err_Trap
    
    If mblnStructureChanged Then
        ' Structure tree has indeed changed
        If MsgBox(mcstrSaveMsg & Chr(13) & Chr(10) & Chr(13) & Chr(10) & mcstrAskMsg, vbOKCancel, mcstrTitleMsg & " - Save Structure") = vbOK Then
            modDSStructure.TakeBackup ' Back up last saved of the structure
            modDSStructure.StructureSortAndSave mcTree ' Save the current structure
        End If
    Else
        ' Structure tree has no changes
        MsgBox "There are no changes to save", vbOKOnly, mcstrTitleMsg & " - Save Structure"
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmStructure.cmdSaveStructure_Click"
    Exit Sub
End Sub

Private Sub cmdSetCompleteFlag_Click()
' Set the Structure Complete flag on the Configuration sheet

    On Error GoTo Err_Trap
    
    If mshtConfiguration.Cells(glngConfigSTRUCTURECOMPLETE, 2) = "COMPLETE" Then
        ' Currently it is Complete is set - clear complete
        mshtConfiguration.Cells(glngConfigSTRUCTURECOMPLETE, 2) = "NO"
    Else
        ' Currently it is Complete is clear - set complete
        mshtConfiguration.Cells(glngConfigSTRUCTURECOMPLETE, 2) = "COMPLETE"
    End If
    modDSStructure.DisplayCompleteButton
    modDSStructure.SetStructureTitle
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmStructure.cmdSetCompleteFlag_Click"
    Exit Sub
End Sub

Private Sub fraStructureDiagram_Click()

End Sub

Private Sub lstChildPartSelect_Click()

End Sub

Private Sub trvPartsTree_BeforeLabelEdit(Cancel As Integer)
' Do not allow edit of part text
    Cancel = True
End Sub

Private Sub trvPartsTree_Click()
' The clicked structure node becomes the current part
    ChangeCurrentPart
End Sub

Private Sub trvPartsTree_DblClick()
' The clicked structure node becomes the current part
    ChangeCurrentPart
End Sub

Private Sub mcTree_Click(cNode As clsNode)
' Set the PartCurrent form boxes
    txtPartCurrentKey.Value = cNode.Key
    txtPartCurrentName.Value = cNode.Caption
    txtPartCurrentNodeLevel.Value = cNode.Level

    modDSStructure.ClearTreeHighlights mcTree
End Sub

Private Sub txtPartCurrentKey_Change()

End Sub

Private Sub UserForm_Click()
End Sub

Private Sub UserForm_Initialize()
    
    On Error GoTo Err_Trap
    
    modDSMain.InitializeVariables
    
    LoadStructureTree ' Load the Tree using the Structure sheet data
    
    modDSStructure.LoadStructureForm mcTree ' Load the form using the Structure sheet data
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmStructure.UserForm_Initialize"
    Exit Sub
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
' Prevent Closing of Structure Entry Form
'
    On Error GoTo Err_Trap
    
    If CloseMode = vbFormControlMenu Then
        Cancel = True
    End If

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmStructure.UserForm_QueryClose"
    Exit Sub
End Sub

Private Sub LoadStructureTree()

    Dim cRoot As clsNode
    Dim cNode As clsNode
    Dim cExtraNode As clsNode
    Dim i As Long
    Dim k As Long

    Set mcTree = New clsTreeView

    On Error GoTo Err_Trap

    With mcTree

        Set .TreeControl = Me.fraStructureDiagram

        Call .NodesClear

        .AppName = "Structure Diagram App Name"
        
'        .CheckBoxes(bTriState:=cbxCheckBoxes) = cbxCheckBoxes
'        .RootButton = cbxRootButton
        .RootButton = True
'        .EnableLabelEdit(bAutoSort:=True, bMultiLine:=True) = cbxAllowEditing.Value
'        .FullWidth = cbxFullWidth.Value
'        .Indentation = SpinButton1.Value * mcPtPixel
'        .NodeHeight = SpinButton2.Value * mcPtPixel
        .Indentation = 25 * mcPtPixel
'        .NodeHeight = 12 * mcPtPixel
        .NodeHeight = 15 * mcPtPixel
'        .ShowLines = Me.cbxShowlines.Value
        .ShowLines = True
'        .ShowExpanders = Me.cbxShowExpanders
        .ShowExpanders = True
        
'        If cbxShowExpanders And cbxExpanderIcons Then
'            ' Win7 style arrow icons, try "Win7Plus1" & "Win7Plus2" for preference
'            Call .ExpanderImage(Me.frmImageBox.Controls("Win7Minus").Picture, _
'                                Me.frmImageBox.Controls("Win7Plus2").Picture)
'        End If
'        If cbxCheckBoxes And cbxCheckboxIcons Then
'            Call .CheckboxImage(Me.frmImageBox.Controls("CheckboxFalse").Picture, _
'                                Me.frmImageBox.Controls("CheckboxTrue").Picture, _
'                                Me.frmImageBox.Controls("CheckboxNull").Picture)
'        End If
    End With

    modDSStructure.LoadStructure mcTree
    
    mcTree.Refresh

    Exit Sub
    
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmStructure.LoadStructureTree"
    If Not mcTree Is Nothing Then
        mcTree.NodesClear
    End If
    Exit Sub
End Sub

Attribute VB_Name = "modDSCommonVariables"
Option Explicit
'
' Sheet variables
'
Public mshtBAESystems As Excel.Worksheet
Public mshtConfiguration As Excel.Worksheet
Public mshtFieldSpec As Excel.Worksheet
Public mshtFieldTriggers As Excel.Worksheet
Public mshtFieldCombo As Excel.Worksheet
Public mshtPartsData As Excel.Worksheet
Public mshtContractorImport As Excel.Worksheet
Public mshtContractorImpExcept As Excel.Worksheet
Public mshtStructure As Excel.Worksheet
Public mshtStructBackup As Excel.Worksheet
Public mshtNotYetKnown As Excel.Worksheet
'
' frmDSEntry common variables
'
Public mstrDSActionEvents As String
Public mblnDSFormChanged As Boolean
Public mblnDSFormPopupChanged As Boolean
Public mblnNewDS As Boolean
Public mlngCurrentRow As Long
Public mlngTotalRecs As Long
Public mcboDSFindOrig As String
Public mblnTriggerWarningMessage As Boolean
Public mcboSaveOldComboValue As String

'
' frmStructure common variables
'
Public mblnStructureChanged As Boolean

Attribute VB_Name = "modDSConstants"
Option Explicit

'
' Field Specification Constants
'
' FieldSpec sheet column positions
Public Const glngSpecFieldCode = 1
Public Const glngSpecDSEntryForm = 2
Public Const glngSpecLabelCode = 3
Public Const glngSpecLabelCaption = 4
Public Const glngSpecUnitsCode = 5
Public Const glngSpecUnitsCaption = 6
Public Const glngSpecControlTipText = 7
Public Const glngSpecFieldGroup = 8
Public Const glngSpecTriggerFlag = 9
Public Const glngSpecWarnFlag = 10
Public Const glngSpecEnabledClear = 11
Public Const glngSpecDisabledClear = 12
Public Const glngSpecComboColumn = 13
Public Const glngSpecDataColumn = 14
Public Const glngSpecDataType = 15
Public Const glngSpecLowValue = 16
Public Const glngSpecHighValue = 17
Public Const glngSpecDecimalPlaces = 18
Public Const glngSpecBlankValue = 19
Public Const glngSpecImportClear = 20
Public Const glngSpecRequiredColumn = 21
Public Const glngSpecECRelatedCode = 22
Public Const glngSpecTriggers = 23

' Special Spec Field Names
Public Const gstrContractorPartNumber = "txtContractorPartNumber"
Public Const gstrContractorPartName = "txtContractorPartName"
Public Const gstrPartType = "txtDSPartType"
Public Const gstrExportControlApp = "cboExportControlApp"
Public Const gstrExportControlType = "cboExportControlType"
Public Const gstrPartCondition = "txtDSPartCondition"
Public Const gstrBAEPartNumber = "txtBAEPartNumber"
Public Const gstrOEMPartNumber = "txtOEMPartNumber"
Public Const gstrOEMPartName = "txtOEMPartName"
Public Const gstrOEMName = "txtOEMName"
Public Const gstrDateSaved = "txtDSDateSaved"
Public Const gstrchkAuxServicesOne = "chkAuxServicesOne"
Public Const gstrchkAuxServicesTwo = "chkAuxServicesTwo"
Public Const gstrchkAuxServicesThree = "chkAuxServicesThree"
Public Const gstrchkElec = "chkElec"

' Limit on number of parts held in the application
Public Const glngPartsMax = 10000

' FieldSpec Maximum Field Rows
Public Const glngSpecFieldRowMax = 1000
' FieldSpec Maximum No of Triggers to check
Public Const glngSpecTriggersMax = 1000

' Data Entry form captions
Public Const gstrDSCaptionEdit = "Edit Part"
Public Const gstrDSCaptionNew = "New Part"
    
' Form action events processing
Public Const gstrActionEventsAll = ""
Public Const gstrActionEventsNone = "NONE"

' Blank/un-selected text for Find combo
Public Const gstrcboDSFindBlank = "New Part"

' Configuration Data Row Number
Public Const glngConfigCONTRACTNUMBER = 1
Public Const glngConfigDATASETNUMBER = 2
Public Const glngConfigCONTRACTORNAME = 3
Public Const glngConfigCDRL = 4
Public Const glngConfigSUBMISSIONNO = 5
Public Const glngConfigSUBMISSIONISSUENO = 6
Public Const glngConfigCONTRACTORCAGECODE = 7
Public Const glngConfigAPPNAMEFULL = 8
Public Const glngConfigAPPNAMESHORT = 9
Public Const glngConfigAPPVERSION = 10
Public Const glngConfigCONTRACTNAME = 11
Public Const glngConfigSTRUCTURECOMPLETE = 12
Public Const glngConfigIMPORTCHECKSUM = 13

' Import Constants
Public Const gstrImportTextDelimiter = "*#%"
Public Const glngImportExceptionMax = 1000
Public Const gstrImportParentParts = "PARENTPARTS"
Public Const gstrImportBAEPartNumbers = "BAEPARTNUMBERS"
Public Const gstrImportObsoleteParts = "PARTCONDITIONS"
Public Const gstrImportTypeHeading = "ImportType"
Public Const gstrContractNoHeading = "ContractNo"
Public Const gstrContractNameHeading = "ContractName"
Public Const gstrContractorNoHeading = "ContractorNo"
Public Const gstrContractorNameHeading = "ContractorName"

' Export Constants
Public Const gstrExportECAttributeMsg = "*#%EXPORT-CONTROLLED ATTRIBUTE*#%"

' Structure Constants
Public Const gstrStructTextSeparator = " ||| "

Attribute VB_Name = "modDSContractorImport"
Option Explicit

Function ProcessImport() As Boolean
'
' Determine the type of import
'
    Dim strImportTypeExpected As String
    Dim strConfigContractNumber As String
    Dim lngRawCount As Long
        
    On Error GoTo Err_Trap
    
    ProcessImport = False
    
    ' Clear out the Contractor Import Final Sheet and Exceptions Sheet
    modDSContractorImport.ClearExceptions
    ' Clear results box on form
    modDSContractorImport.ClearImportResults
    
    lngRawCount = mshtContractorImport.UsedRange.Rows.Count ' Count number of raw rows imported inc header
    
    If lngRawCount > 1 Then
        ' At least a header and one data row imported - continue
        
        ' Extract the Import Type on the first data row
        strImportTypeExpected = UnDelimitData(Trim(UCase(mshtContractorImport.Cells(2, 2))), gstrImportTextDelimiter)
        ' Read the application configured Contract No
        strConfigContractNumber = modDSGeneral.GetConfigurationData(glngConfigCONTRACTNUMBER)
        
        modDSContractorImport.ShowPleaseWaitMessage

        If strImportTypeExpected = gstrImportParentParts Then
            ' Verify the format of the CSV before proceeding
            If VerifyImport(strImportTypeExpected, strConfigContractNumber) Then
                ' Ask for confirmation before proceeding
                If MsgBox("Import of Parent Parts: " & lngRawCount - 1 & " data rows detected - continue?", vbOKCancel, "Import - Confirm") = vbOK Then
                    SaveImportParentParts
                    ProcessImport = True
                Else
                    modDSContractorImport.ClearExceptions
                End If
            Else
                MsgBox "Invalid Format", vbOKOnly, "Import of Parent Parts - CSV Format Unrecognized "
            End If
            ' Display results in form box
            modDSContractorImport.ShowImportResults
        ElseIf strImportTypeExpected = gstrImportBAEPartNumbers Then
            ' Verify the format of the CSV before proceeding
            If VerifyImport(strImportTypeExpected, strConfigContractNumber) Then
                ' Ask for confirmation before proceeding
                If MsgBox("Update of BAE Part Numbers for Component Parts: " & lngRawCount - 1 & " data rows detected - continue?", vbOKCancel, "Import - Confirm") = vbOK Then
                    SaveImportBAEPartNumbers
                    ProcessImport = True
                Else
                    modDSContractorImport.ClearExceptions
                End If
            Else
                MsgBox "Invalid Format", vbOKOnly, "Update of BAE Part Numbers for Component Parts - CSV Format Unrecognized "
            End If
            ' Display results in form box
            modDSContractorImport.ShowImportResults
        ElseIf strImportTypeExpected = gstrImportObsoleteParts Then
            ' Verify the format of the CSV before proceeding
            If VerifyImport(strImportTypeExpected, strConfigContractNumber) Then
                ' Ask for confirmation before proceeding
                If MsgBox("Update Status of Parent Parts: " & lngRawCount - 1 & " data rows detected - continue?", vbOKCancel, "Import - Confirm") = vbOK Then
                    SaveParentPartCondition
                    ProcessImport = True
                Else
                    modDSContractorImport.ClearExceptions
                End If
            Else
                MsgBox "Invalid Format", vbOKOnly, "Update Status of Parent Parts - CSV Format Unrecognized "
            End If
            ' Display results in form box
            modDSContractorImport.ShowImportResults
        Else
            MsgBox "Unrecognized Import Type", vbOKOnly, "Import Type Unrecognized"
        End If
    End If
                    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ProcessImport"
    ProcessImport = False
    Exit Function
End Function

Sub SaveImportParentParts()
'
' Save the imported Parent Parts in the Part Data, if valid
'
    Dim lngImportRow As Long
    Dim strContractorPartNo As String
    Dim strReturn As String
    Dim lngRawCount As Long
    Dim lngSavedCount As Long
    Dim lngSkippedCount As Long
    Dim lngExceptionNo As Long
    
    On Error GoTo Err_Trap
    
    ' Clear out the Import Exceptions Sheet
    ClearExceptions
    
    lngRawCount = mshtContractorImport.UsedRange.Rows.Count ' Count number of raw rows imported inc header
    lngSavedCount = 0
    lngSkippedCount = 0
    lngExceptionNo = 0
    
    If lngRawCount > 1 Then
        ' At least a header and one data row imported - continue
        
        ' Extract configuration fields and update configuration using first row of data
        UpdateConfigurationData
        
        For lngImportRow = 2 To lngRawCount
            ' Extract the key field - Contractor Part Number
            strContractorPartNo = UnDelimitData(mshtContractorImport.Cells(lngImportRow, 4), gstrImportTextDelimiter)
            
            If IsContractorPartNo(strContractorPartNo) Then
                ' This is a valid Contractor Part No
                
                ' Check that it is not already in the Part Data
                strReturn = ReturnPartIfExists(strContractorPartNo)
                
                If strReturn = "" Then
                    ' This a new Contractor Part No - can be transferred
                    If SaveImportedPart(lngImportRow) Then
                        ' Imported part has been saved
                        lngSavedCount = lngSavedCount + 1
                    Else
                        ' Failed - record exception
                        If RecordException(lngExceptionNo, strContractorPartNo, "Could not save Contractor Part No data", lngImportRow) Then
                        End If
                        lngSkippedCount = lngSkippedCount + 1
                    End If
                Else
                    If RecordException(lngExceptionNo, strContractorPartNo, "Contractor Part No already exists - cannot update via import", lngImportRow) Then
                    End If
                    lngSkippedCount = lngSkippedCount + 1
                End If
            Else
                If RecordException(lngExceptionNo, strContractorPartNo, "Contractor Part No is invalid", lngImportRow) Then
                End If
                lngSkippedCount = lngSkippedCount + 1
            End If
        Next lngImportRow
    End If
    
    ' Record import result totals
    If RecordExceptionTotals(lngExceptionNo, lngRawCount, lngSavedCount, lngSkippedCount, True) Then
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "SaveImportParentParts"
    Exit Sub
End Sub

Sub SaveImportBAEPartNumbers()
'
' Update Component Parts with the imported BAE Part Numbers, if valid
'
    Dim lngImportRow As Long
    Dim strContractorPartNo As String
    Dim strBAEPartNumber As String
    
    Dim lngPartRow As Long
    Dim strPartType As String
    Dim lngFieldSpecRow As Long
    Dim lngBAEPartNumberDataColumn As Long
    
    Dim lngRawCount As Long
    Dim lngSavedCount As Long
    Dim lngSkippedCount As Long
    Dim lngExceptionNo As Long
    
    On Error GoTo Err_Trap
    
    ' Clear out the Import Exceptions Sheet
    ClearExceptions
    
    ' Read the Part Data field column number for BAE Part Number
    lngFieldSpecRow = FindFieldRow(gstrBAEPartNumber)
    lngBAEPartNumberDataColumn = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldSpecRow, glngSpecDataColumn))
    
    lngRawCount = mshtContractorImport.UsedRange.Rows.Count ' Count number of raw rows imported inc header
    lngSavedCount = 0
    lngSkippedCount = 0
    lngExceptionNo = 0
    
    If lngRawCount > 1 Then
        ' At least a header and one data row imported - continue
        For lngImportRow = 2 To lngRawCount
            ' Extract the key field - Contractor Part Number
            strContractorPartNo = UnDelimitData(mshtContractorImport.Cells(lngImportRow, 4), gstrImportTextDelimiter)
            
            If IsContractorPartNo(strContractorPartNo) Then
                ' This is a valid Contractor Part No
                
                lngPartRow = FindPartRow(Trim(UCase(strContractorPartNo)))
                If lngPartRow > 1 Then
                    ' Found the Part Data row
                    ' Read its Part Type
                    strPartType = ReadFieldValueString(lngPartRow, gstrPartType)
                    If strPartType <> "Parent" Then
                        ' Not a Parent Part - can be updated
                        ' Extract BAE Part Number from the import row
                        strBAEPartNumber = UnDelimitData(mshtContractorImport.Cells(lngImportRow, 5), gstrImportTextDelimiter)
                        If IsBAEPartNumber(strBAEPartNumber) Then
                            mshtPartsData.Cells(lngPartRow, lngBAEPartNumberDataColumn) = DelimitData(strBAEPartNumber, "DOUBLEQUOTE")
                            ' Part has been updated
                            lngSavedCount = lngSavedCount + 1
                        Else
                            ' Not a valid BAE Part Number - record exception
                            If RecordException(lngExceptionNo, strContractorPartNo, "BAE Part Number - " & strBAEPartNumber & " - invalid", lngImportRow) Then
                            End If
                            lngSkippedCount = lngSkippedCount + 1
                        End If
                    Else
                        ' This is a Parent Part which cannot be updated - record exception
                        If RecordException(lngExceptionNo, strContractorPartNo, "Parent Part cannot be updated", lngImportRow) Then
                        End If
                        lngSkippedCount = lngSkippedCount + 1
                    End If
                Else
                    ' Could not find Part Data Row - record exception
                    If RecordException(lngExceptionNo, strContractorPartNo, "Could not find Contractor Part No", lngImportRow) Then
                    End If
                    lngSkippedCount = lngSkippedCount + 1
                End If
            Else
                If RecordException(lngExceptionNo, strContractorPartNo, "Contractor Part No is invalid", lngImportRow) Then
                End If
                lngSkippedCount = lngSkippedCount + 1
            End If
        Next lngImportRow
    End If
    
    ' Record import result totals
    If RecordExceptionTotals(lngExceptionNo, lngRawCount, lngSavedCount, lngSkippedCount, True) Then
    End If
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "SaveImportBAEPartNumbers"
    Exit Sub
End Sub

Sub SaveParentPartCondition()
'
' Update Parent Part condition with the imported data, if valid
'
    Dim lngImportRow As Long
    Dim strContractorPartNo As String
    Dim strPartCondition As String
    
    Dim lngPartRow As Long
    Dim strPartType As String
    Dim lngFieldSpecRow As Long
    Dim lngPartConditionDataColumn As Long
    
    Dim lngRawCount As Long
    Dim lngSavedCount As Long
    Dim lngSkippedCount As Long
    Dim lngExceptionNo As Long
    
    On Error GoTo Err_Trap
    
    ' Clear out the Import Exceptions Sheet
    ClearExceptions
    
    ' Read the Part Data field column number for BAE Part Number
    lngFieldSpecRow = FindFieldRow(gstrPartCondition)
    lngPartConditionDataColumn = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldSpecRow, glngSpecDataColumn))
    
    lngRawCount = mshtContractorImport.UsedRange.Rows.Count ' Count number of raw rows imported inc header
    lngSavedCount = 0
    lngSkippedCount = 0
    lngExceptionNo = 0
    
    If lngRawCount > 1 Then
        ' At least a header and one data row imported - continue
        For lngImportRow = 2 To lngRawCount
            ' Extract the key field - Contractor Part Number
            strContractorPartNo = UnDelimitData(mshtContractorImport.Cells(lngImportRow, 4), gstrImportTextDelimiter)
            
            If IsContractorPartNo(strContractorPartNo) Then
                ' This is a valid Contractor Part No
                
                lngPartRow = FindPartRow(Trim(UCase(strContractorPartNo)))
                If lngPartRow > 1 Then
                    ' Found the Part Data row
                    ' Read its Part Type
                    strPartType = ReadFieldValueString(lngPartRow, gstrPartType)
                    If strPartType = "Parent" Then
                        ' Parent Part - can be updated
                        ' Extract Part Condition from the import row
                        strPartCondition = UnDelimitData(mshtContractorImport.Cells(lngImportRow, 5), gstrImportTextDelimiter)
                        If IsPartCondition(strPartCondition) Then
                            mshtPartsData.Cells(lngPartRow, lngPartConditionDataColumn) = DelimitData(strPartCondition, "DOUBLEQUOTE")
                            ' Part has been updated
                            lngSavedCount = lngSavedCount + 1
                        Else
                            ' Not a valid Part Condition - record exception
                            If RecordException(lngExceptionNo, strContractorPartNo, "Part Condition - " & strPartCondition & " - invalid", lngImportRow) Then
                            End If
                            lngSkippedCount = lngSkippedCount + 1
                        End If
                        
                    Else
                        ' This is a Parent Part which cannot be updated - record exception
                        If RecordException(lngExceptionNo, strContractorPartNo, "Not a Parent Part - cannot be updated", lngImportRow) Then
                        End If
                        lngSkippedCount = lngSkippedCount + 1
                    End If
                Else
                    ' Could not find Part Data Row - record exception
                    If RecordException(lngExceptionNo, strContractorPartNo, "Could not find Contractor Part No", lngImportRow) Then
                    End If
                    lngSkippedCount = lngSkippedCount + 1
                End If
            Else
                If RecordException(lngExceptionNo, strContractorPartNo, "Contractor Part No is invalid", lngImportRow) Then
                End If
                lngSkippedCount = lngSkippedCount + 1
            End If
        Next lngImportRow
    End If
    
    ' Record import result totals
    If RecordExceptionTotals(lngExceptionNo, lngRawCount, lngSavedCount, lngSkippedCount, True) Then
    End If
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "SaveParentPartCondition"
    Exit Sub
End Sub

Sub ClearExceptions()
' Clears out the import exceptions sheet
    On Error GoTo Err_Trap
    ' Clear/Empty sheet
    mshtContractorImpExcept.UsedRange.Delete (xlShiftUp)
    ' Place current date and time at top of sheet
    mshtContractorImpExcept.Cells(1, "A") = Format(Date, "dd/mm/yyyy") & "-" & Format(Time, "hh:mm:ss")
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ClearExceptions"
    Exit Sub
End Sub

Sub ClearImport()
' Clears out the import sheet
    On Error GoTo Err_Trap
    ' Clear/Empty sheet
        mshtContractorImport.UsedRange.Delete (xlShiftUp)
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ClearImport"
    Exit Sub
End Sub

Function RecordException(ByRef lngExceptionNo As Long, _
                         ByVal strCPNo As String, _
                         ByVal strCPNoInvalidReason As String, _
                         ByVal lngImportRow As Long) As Boolean
' Record an import exception on the import exception sheet
    On Error GoTo Err_Trap
    
    lngExceptionNo = lngExceptionNo + 1
    
    ' Marker to indicate that some results are being recorded
    mshtContractorImpExcept.Cells(1, "B") = "Import Results Recorded"
    
    mshtContractorImpExcept.Cells(lngExceptionNo + 2, "A") = lngExceptionNo
    mshtContractorImpExcept.Cells(lngExceptionNo + 2, "B") = lngImportRow
    mshtContractorImpExcept.Cells(lngExceptionNo + 2, "C") = strCPNo
    mshtContractorImpExcept.Cells(lngExceptionNo + 2, "D") = strCPNoInvalidReason
    
    RecordException = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "RecordException"
    RecordException = False
    Exit Function
End Function

Function RecordExceptionTotals(ByVal lngExceptionNo As Long, _
                               ByVal lngRawCount As Long, _
                               ByVal lngSavedCount As Long, _
                               ByVal lngSkippedCount As Long, _
                               ByVal blnImportAccepted As Boolean) As Boolean
' Record exception totals on the import exception sheet
    On Error GoTo Err_Trap
    
    ' Marker to indicate that some results are being recorded
    mshtContractorImpExcept.Cells(1, "B") = "Import Results Recorded"
    
    mshtContractorImpExcept.Cells(lngExceptionNo + 4, "A") = "Raw Count"
    mshtContractorImpExcept.Cells(lngExceptionNo + 5, "A") = "Imported"
    mshtContractorImpExcept.Cells(lngExceptionNo + 6, "A") = "Skipped"
    mshtContractorImpExcept.Cells(lngExceptionNo + 7, "A") = "Exceptions"
    
    mshtContractorImpExcept.Cells(lngExceptionNo + 4, "B") = lngRawCount - 1
    If blnImportAccepted Then
        mshtContractorImpExcept.Cells(lngExceptionNo + 5, "B") = lngSavedCount
        mshtContractorImpExcept.Cells(lngExceptionNo + 6, "B") = lngSkippedCount
    Else
        mshtContractorImpExcept.Cells(lngExceptionNo + 5, "B") = "N/A - import invalid"
        mshtContractorImpExcept.Cells(lngExceptionNo + 6, "B") = "N/A - import invalid"
    End If
    mshtContractorImpExcept.Cells(lngExceptionNo + 7, "B") = lngExceptionNo
       
    RecordExceptionTotals = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "RecordExceptionTotals"
    RecordExceptionTotals = False
    Exit Function
End Function

Function GetNextFreePartRow() As Long
'
' Find the next available Part row in the Part Data sheet
'
    Dim lngPartRow As Long
    
    On Error GoTo Err_Trap
    
    GetNextFreePartRow = 0
    
    ' Find next available position in Part Data
    For lngPartRow = 2 To mshtPartsData.UsedRange.Cells.Rows.Count + 1
        If mshtPartsData.UsedRange.Cells(lngPartRow, 1) = "" Then
            GetNextFreePartRow = lngPartRow
            Exit For
        ElseIf lngPartRow >= glngPartsMax Then
            Exit For
        End If
    Next lngPartRow

    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "GetNextFreePartRow"
    Exit Function
End Function

Function SaveImportedPart(ByVal lngImportRow As Long) As Boolean
'
' Saves the imported part data at the passed import row
' to the next available row of the Parts Data sheet
'
' NB Imported data is held as text by using the delimiter gstrImportTextDelimiter around each value
'    Therefore the gstrImportTextDelimiter delimiter must be removed from each imported data field.
'    Then, for all except boolean values, delimiter DOUBLEQUOTE should be put back in place to make it
'    text again, even numeric and date fields should be held as text.
'
    Dim lngImportCol As Long
    Dim lngPartRow As Long
    Dim strFieldCode As String
    Dim lngFieldRow As Long
    Dim blnValue As Boolean
    Dim strValue As String
    Dim lngDataColumn As Long
    Dim strTriggerFlag As String
    Dim strImportClear As String
    
    SaveImportedPart = False ' Initially assume failure
    
    On Error GoTo Err_Trap
    
    ' Find the next free row in the Parts Data
    lngPartRow = GetNextFreePartRow
    ' Clear the Part Row's Fields
    If modDSEntry.ClearPartRowFields(lngPartRow, "IMPORT") Then
    End If
    
    If lngPartRow > 1 Then
        ' A free row is available
        
        ' Loop through each imported column and save as part data field
        For lngImportCol = 1 To 1000
            
            lngDataColumn = 0 ' Initialize
            
            ' Read the header cell of the column to get the field code
            strFieldCode = UnDelimitData(mshtContractorImport.UsedRange.Cells(1, lngImportCol).Text, gstrImportTextDelimiter)
            If strFieldCode = "" Then
                Exit For ' Assume end of import columns
            Else
                ' Determine the Field Row number in the Field Specification
                lngFieldRow = modDSEntry.FindFieldRow(strFieldCode)
                If lngFieldRow > 1 Then
                    ' Look up the Part Data Column for the field
                    lngDataColumn = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn)
                End If
            End If
            
            If lngDataColumn > 0 Then
                ' The import column is a recognized data field - proceed to save for the part
                    
                ' Read its trigger flag
                strTriggerFlag = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecTriggerFlag)

                If mshtContractorImport.UsedRange.Cells(lngImportRow, lngImportCol).Text = "#NAME?" Then
                    ' Excel has decided this cell is invalid
                    ' However, the original value should still be held in the cell formula
                    ' Extract the cell value from the cell formula
                    ' and use that in the import instead
                    strValue = Mid(mshtContractorImport.UsedRange.Cells(lngImportRow, lngImportCol).Formula, 2)
                Else
                    ' Extract the cell value
                    strValue = mshtContractorImport.UsedRange.Cells(lngImportRow, lngImportCol)
                End If
            
                ' Remove the import delimiters
                strValue = UnDelimitData(strValue, gstrImportTextDelimiter)
                
                ' Save
                If Left$(strFieldCode, 3) = "chk" Then
                    ' Boolean value
                    
                    ' If this checkbox is a trigger then it is a "data not applicable" field - always leave off
                    If strTriggerFlag = "Y" Then
                        blnValue = False
                    Else
                        ' Remove the import delimiters
                        blnValue = strValue
                    End If
                    mshtPartsData.Cells(lngPartRow, lngDataColumn) = blnValue
                Else
                    ' String value
                    ' If the incoming value is blank, set field to its default Import Clear value
                    If IsNull(strValue) Or strValue = "" Then
                        ' Read its Import Clear value and use it instead
                        strImportClear = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecImportClear)
                        strValue = strImportClear
                    ElseIf Left$(strFieldCode, 3) = "cbo" And _
                           IsNumeric(strValue) Then
                        ' This is a data count - always put to Import Clear (max) value
                        ' Read its Import Clear value and use it instead
                        strImportClear = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecImportClear)
                        strValue = strImportClear
                    Else
                        ' Include its storage delimiters
                        strValue = DelimitData(strValue, "DOUBLEQUOTE")
                    End If
                    mshtPartsData.Cells(lngPartRow, lngDataColumn) = strValue
                End If
            
            End If
        Next lngImportCol
    
        ' Add this new Parent Part to the Structure
        modDSStructure.AddStructureParentNode (lngPartRow)
    End If
        
    ' Save the entire workbook
    Excel.ActiveWorkbook.Save

    SaveImportedPart = True
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "SaveImportedPart - ImportRow" & lngImportRow
    Exit Function
End Function

Sub ShowImportResults()
'
' Construct display of import results
'
    Dim strMsg As String
    Dim lngCount As Long
    
    On Error GoTo Err_Trap
    
    If IsNull(mshtContractorImpExcept.Cells(1, "B")) Or _
       mshtContractorImpExcept.Cells(1, "B") = "" Then
        frmContractorImport.txtContractorImpResults.Value = "No Results Recorded"
    Else
        For lngCount = 1 To glngImportExceptionMax
            If mshtContractorImpExcept.Cells(lngCount + 2, "A") <> "" Then
                strMsg = strMsg + _
                CStr(mshtContractorImpExcept.Cells(lngCount + 2, "A")) + "    " + _
                "Row " & CStr(mshtContractorImpExcept.Cells(lngCount + 2, "B")) + "    " + _
                CStr(mshtContractorImpExcept.Cells(lngCount + 2, "C")) + "    " + _
                CStr(mshtContractorImpExcept.Cells(lngCount + 2, "D")) + vbCrLf
            Else
                Exit For
            End If
        Next lngCount
    
        strMsg = strMsg + _
        mshtContractorImpExcept.Cells(lngCount + 3, "A") + " = " + _
        CStr(mshtContractorImpExcept.Cells(lngCount + 3, "B")) + vbCrLf + _
        mshtContractorImpExcept.Cells(lngCount + 4, "A") + " = " + _
        CStr(mshtContractorImpExcept.Cells(lngCount + 4, "B")) + vbCrLf + _
        mshtContractorImpExcept.Cells(lngCount + 6, "A") + " = " + _
        CStr(mshtContractorImpExcept.Cells(lngCount + 6, "B"))
    
        frmContractorImport.txtContractorImpResults.Value = strMsg
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ShowImportResults"
    Exit Sub
End Sub

Sub ClearImportResults()
'
' Clear import results box
'
    frmContractorImport.txtContractorImpResults.Value = ""

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ClearImportResults"
    Exit Sub
End Sub

Sub ShowPleaseWaitMessage()
'
' Clear import results box
'
    frmContractorImport.txtContractorImpResults.Value = "Processing import ........"

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ShowPleaseWaitMessage"
    Exit Sub
End Sub

Function IsChecksumValid(ByVal strFilename As String) As Boolean
'
' Verify the checksum on each line of the file
'
    Dim strTextLine As String
    Dim strCharacter As String
    Dim lngFind As Long
    Dim lngPos As Long
    Dim lngStart As Long
    Dim lngLength As Long
    Dim strLineChecksum As String
    Dim dblChecksum As Double
    Dim dblLineChecksum As Double
    Dim blnInvalid As Boolean
    
    On Error GoTo Err_Trap
    
    IsChecksumValid = True
    
    ' Ensure not left open
    On Error GoTo Skip_One
        Close #1
        GoTo Skip_One
Skip_One:

    ' Open file
    On Error GoTo Skip_Two
        Open strFilename For Input As #1
        GoTo Skip_Two
Skip_Two:

    Do Until EOF(1)
        ' Read next line
        Line Input #1, strTextLine
        
        ' Find the checksum held in the first column of the line and eliminate
        ' (Columns are double-quoted in addition to column delimiter)
        lngFind = InStr(1, strTextLine, """" & gstrImportTextDelimiter)
        If lngFind < 1 Then
            IsChecksumValid = False
            Exit Function
        End If
        lngStart = lngFind + Len(gstrImportTextDelimiter) + 1
        lngFind = InStr(1, strTextLine, gstrImportTextDelimiter & """")
        If lngFind < 1 Then
            IsChecksumValid = False
            Exit Function
        End If
        lngLength = lngFind - lngStart
        
        ' Extract imported line checksum
        strLineChecksum = Mid$(strTextLine, lngStart, lngLength)
        ' Convert to number
        If IsNumeric(strLineChecksum) Then
            dblLineChecksum = Val(strLineChecksum)
        
            ' Data start position eliminating first column checksum and double quote and its comma
            lngStart = lngFind + Len(gstrImportTextDelimiter) + 1 + 1
            ' Checksum the line
            dblChecksum = 0
            For lngPos = lngStart To Len(strTextLine)
                strCharacter = Mid$(strTextLine, lngPos, 1)
                dblChecksum = dblChecksum + Asc(strCharacter)
                If strCharacter = "u" Or _
                   strCharacter = "K" Or _
                   strCharacter = "s" Then
                   dblChecksum = dblChecksum + 1
                End If
            Next lngPos
        
'            MsgBox "Imported " & dblLineChecksum & " - Calculated " & dblChecksum, vbOKOnly, "Import - Test Message"
            If dblChecksum <> dblLineChecksum Then
                ' Checksum could not be converted to a number - invalid do not continue
                IsChecksumValid = False
                Exit Do
            End If
        Else
            ' Checksum could not be converted to a number - invalid do not continue
            IsChecksumValid = False
            Exit Do
        End If
    Loop
    
    Close #1

    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number & "" & Err.Source & " - IsChecksumValid strFilename=" & strFilename
    IsChecksumValid = False
    Exit Function
End Function

Function VerifyImport(ByVal strImportTypeExpected As String, _
                      ByVal strConfigContractNumber As String) As Boolean
'
' Verify the presence of the identifying columns for the passed Import Type
'
    Dim lngImportRow As Long
    Dim strImportType As String
    Dim strContractNo As String
    Dim strContractorPartNo As String
    Dim strReturn As String
    Dim lngRawCount As Long
    Dim lngExceptionNo As Long
    Dim blnContinue As Boolean
    
    On Error GoTo Err_Trap
    
    VerifyImport = True
    
    ' Clear out the Contractor Import Final Sheet and Exceptions Sheet
    ClearExceptions
    
    lngRawCount = mshtContractorImport.UsedRange.Rows.Count ' Count number of raw rows imported inc header
    lngExceptionNo = 0
    
    blnContinue = True
    ' Verify Headings
    ' Extract the Import Type heading
    strImportType = UnDelimitData(mshtContractorImport.Cells(1, 2), gstrImportTextDelimiter)
    If strImportType = gstrImportTypeHeading Then
        ' Import Type heading as expected
            
        ' Extract the Contract Number heading
        strContractNo = UnDelimitData(mshtContractorImport.Cells(1, 3), gstrImportTextDelimiter)
        If strContractNo = gstrContractNoHeading Then
            ' Contract No Heading as expected
                
            ' Extract the Contractor Part Number heading
            strContractorPartNo = UnDelimitData(mshtContractorImport.Cells(1, 4), gstrImportTextDelimiter)
            If strContractorPartNo <> gstrContractorPartNumber Then
                ' Contractor Part No heading is invalid
                
                If RecordException(lngExceptionNo, strContractorPartNo, "Contractor Part No is invalid", lngImportRow) Then
                End If
                VerifyImport = False
                blnContinue = False
            End If
        Else
            ' Contract No heading is invalid
            If RecordException(lngExceptionNo, strContractorPartNo, "Contract No - " & strContractNo & " - is incorrect", lngImportRow) Then
            End If
            VerifyImport = False
            blnContinue = False
        End If
    Else
        ' Import Type heading is invalid
        If RecordException(lngExceptionNo, strImportType, "Import Type is invalid", lngImportRow) Then
        End If
        VerifyImport = False
        blnContinue = False
    End If
    
    If blnContinue Then
      ' Headings OK - check data too
    
      If lngRawCount > 1 Then
        ' At least a header and one data row imported - continue
        For lngImportRow = 2 To lngRawCount
            
            ' Extract the Import Type field on this row
            strImportType = UnDelimitData(Trim(UCase(mshtContractorImport.Cells(lngImportRow, 2))), gstrImportTextDelimiter)
            
            If strImportType = strImportTypeExpected Then
                ' Import Type as expected
            
                ' Extract the identifier field - Contract Number
                strContractNo = UnDelimitData(Trim(UCase(mshtContractorImport.Cells(lngImportRow, 3))), gstrImportTextDelimiter)
            
                If strContractNo = strConfigContractNumber Then
                    ' The Contract No is correct
                
                    ' Extract the key field - Contractor Part Number
                    strContractorPartNo = UnDelimitData(Trim(UCase(mshtContractorImport.Cells(lngImportRow, 4))), gstrImportTextDelimiter)
            
                    If IsContractorPartNo(strContractorPartNo) = False Then
                        ' This is a invalid Contractor Part No
                        If RecordException(lngExceptionNo, strContractorPartNo, "Contractor Part No is invalid", lngImportRow) Then
                        End If
                        VerifyImport = False
                    End If
                Else
                    ' This is not the correct Contract No
                    If RecordException(lngExceptionNo, strContractorPartNo, "Contract No - " & strContractNo & " - is incorrect", lngImportRow) Then
                    End If
                    VerifyImport = False
                End If
            Else
                ' This is not the correct Import Type
                If RecordException(lngExceptionNo, strImportType, "Import Type is invalid", lngImportRow) Then
                End If
                VerifyImport = False
            End If
        Next lngImportRow
      End If
    End If
    
    ' Record import verification totals
    If RecordExceptionTotals(lngExceptionNo, lngRawCount, 0, 0, False) Then
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "VerifyImport"
    VerifyImport = False
    Exit Function
End Function

Function IsContractorPartNo(ByVal strContractorPartNo As String) As String
'
' Checks the format of the passed string and returns True if it is a possible Contractor Part Number
' Only characters from Decimal 33 to Decimal 126 inclusive, but excluding 34 (") and 39 (')
' Otherwise returns False
'
    Dim strChar As String
    Dim lngLen As Long
    Dim lngCount As Long
    Dim blnValid As Boolean
    
    On Error GoTo Err_Trap
    
    IsContractorPartNo = False
    
    blnValid = True
    
    lngLen = Len(strContractorPartNo)
    If lngLen > 0 And lngLen <= 32 Then
        ' Correct length - check format
        For lngCount = 1 To lngLen
            strChar = Mid$(strContractorPartNo, lngCount, 1)
            If strChar >= Chr(33) And strChar <= Chr(126) And strChar <> Chr(34) And strChar <> Chr(39) Then
            Else
                ' Character not allowed
                blnValid = False
                Exit For
            End If
        Next lngCount
    Else
        ' Incorrect length
        blnValid = False
    End If
    
    IsContractorPartNo = blnValid
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "IsContractorPartNo - " & strContractorPartNo
    IsContractorPartNo = False
    Exit Function
End Function

Function IsBAEPartNumber(ByVal strBAEPartNumber As String) As Boolean
'
' Checks the format of the passed string and returns True if it is a BAE Part Number
' AAAANNNN
' Otherwise returns False

    Dim strChar As String
    Dim lngLen As Long
    Dim lngCount As Long
    Dim blnValid As Boolean
    
    On Error GoTo Err_Trap
    
    IsBAEPartNumber = False
    
    blnValid = True
    
    lngLen = Len(strBAEPartNumber)
    If lngLen = 8 Then
        ' Correct length - check format
        For lngCount = 1 To 4
            ' First 4 characters should be upper-case alpha
            strChar = Mid$(strBAEPartNumber, lngCount, 1)
            If strChar < "A" Or strChar > "Z" Then
                blnValid = False
                Exit For
            End If
        Next lngCount
        For lngCount = 5 To 8
            ' Last 4 characters should be numeric
            strChar = Mid$(strBAEPartNumber, lngCount, 1)
            If strChar < "0" Or strChar > "9" Then
                blnValid = False
                Exit For
            End If
        Next lngCount
    Else
        ' Incorrect length
        blnValid = False
    End If
    
    IsBAEPartNumber = blnValid
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "IsBAEPartNumber - " & strBAEPartNumber
    IsBAEPartNumber = False
    Exit Function
End Function

Function IsPartCondition(ByVal strPartCondition As String) As Boolean
'
' Checks the passed string and returns True if it is a recognized Part Condition
' Otherwise returns False

    Dim strChar As String
    Dim lngLen As Long
    Dim lngCount As Long
    Dim blnValid As Boolean
    
    On Error GoTo Err_Trap
    
    IsPartCondition = False
    
    If strPartCondition = "Live" Or _
       strPartCondition = "Obsolete" Then
        IsPartCondition = True
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "IsPartCondition - " & strPartCondition
    IsPartCondition = False
    Exit Function
End Function

Sub UpdateConfigurationData()
'
' Pulls out fields from a PARENT PARTS import which can be used to update the Configuration sheet information
' Uses the heading row to identify the fields in columns 5, 6, 7
' and uses the values in the first data row if column heading is as expected
'
    Dim strConfigData As String
    
    On Error GoTo Err_Trap
    
    ' Extract column 5 heading
    strConfigData = UnDelimitData(mshtContractorImport.Cells(1, 5), gstrImportTextDelimiter)
    If strConfigData = gstrContractNameHeading Then
        strConfigData = UnDelimitData(mshtContractorImport.Cells(2, 5), gstrImportTextDelimiter)
        If modDSGeneral.SetConfigurationData(glngConfigCONTRACTNAME, strConfigData) Then
        End If
    End If

    ' Extract column 6 heading
    strConfigData = UnDelimitData(mshtContractorImport.Cells(1, 6), gstrImportTextDelimiter)
    If strConfigData = gstrContractorNameHeading Then
        strConfigData = UnDelimitData(mshtContractorImport.Cells(2, 6), gstrImportTextDelimiter)
        If modDSGeneral.SetConfigurationData(glngConfigCONTRACTORNAME, strConfigData) Then
        End If
    End If
            
    ' Extract column 6 heading
    strConfigData = UnDelimitData(mshtContractorImport.Cells(1, 7), gstrImportTextDelimiter)
    If strConfigData = gstrContractorNoHeading Then
        strConfigData = UnDelimitData(mshtContractorImport.Cells(2, 7), gstrImportTextDelimiter)
        If modDSGeneral.SetConfigurationData(glngConfigCONTRACTORCAGECODE, strConfigData) Then
        End If
    End If

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "UpdateConfigurationData"
    Exit Sub
End Sub


Attribute VB_Name = "modDSCopyPart"
Option Explicit

Sub SetUpCopyComboValues()
'
' Sets up the Copy form's combo box
'
    Dim lngCount As Long
    Dim lngTotalRows As Long
    Dim strPartType As String
    Dim strSelectOption As String
    
    On Error GoTo Err_Trap
    
    strSelectOption = "Select"
    
    frmDSCopyPart.cboContractorPartNumberSelect.Clear
    
    lngTotalRows = mshtPartsData.UsedRange.Rows.Count
    
    frmDSCopyPart.cboContractorPartNumberSelect.AddItem strSelectOption ' Add item for "not selected"

    If lngTotalRows > 0 Then
        For lngCount = 2 To mshtPartsData.UsedRange.Cells.Rows.Count
            If mshtPartsData.UsedRange.Cells(lngCount, "A") <> "" Then
                
                ' Read this Part's Type
                strPartType = ReadFieldValueString(lngCount, gstrPartType)
                
                If lngCount <> mlngCurrentRow And _
                   strPartType = "Parent" Then
                    ' Only include Parent Parts and do not include the current part row of course
                    frmDSCopyPart.cboContractorPartNumberSelect.AddItem UnDelimitData(mshtPartsData.UsedRange.Cells(lngCount, "A"), "DOUBLEQUOTE")
                End If
            Else
                Exit For
            End If
        Next lngCount
    End If

    ' Set to "not selected" item
    frmDSCopyPart.cboContractorPartNumberSelect.Value = strSelectOption
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "SetUpCopyComboValues"
    Exit Sub
End Sub

Function CopyPartDataColumns(ByVal lngOtherRow As Long) As Boolean
'
' This Function copies all columns, except key columns, from the passed Part Data row
' to the current Part Data row mlngCurrentRow
' Key columns not copied are those holding:-
' gstrContractorPartNumber
' gstrContractorPartName
' gstrPartType
' gstrBAEPartNumber
'

    Dim lngTotalColumns As Long
    Dim lngColumn As Long
    Dim lngFieldRow As Long
    Dim lngDataColCPNumber As Long
    Dim lngDataColCPName As Long
    Dim lngDataColPartType As Long
    Dim lngDataColBAEPartNumber As Long
    Dim lngDataColDateSaved As Long
    
    On Error GoTo Err_Trap
    
    If lngOtherRow > 1 And _
       mlngCurrentRow > 1 Then
        ' We have Part Data rows identified for copy process - continue
        
        ' Get highest column of Part Data used
        lngTotalColumns = mshtPartsData.UsedRange.Columns.Count
    
        lngFieldRow = FindFieldRow(gstrContractorPartNumber)
        lngDataColCPNumber = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn))
    
        lngFieldRow = FindFieldRow(gstrContractorPartName)
        lngDataColCPName = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn))
    
        lngFieldRow = FindFieldRow(gstrPartType)
        lngDataColPartType = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn))
    
        lngFieldRow = FindFieldRow(gstrBAEPartNumber)
        lngDataColBAEPartNumber = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn))
    
        lngFieldRow = FindFieldRow(gstrDateSaved)
        lngDataColDateSaved = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn))

        ' Loop through columns and transfer from one Part to the other
        For lngColumn = 1 To lngTotalColumns
            If lngColumn <> lngDataColCPNumber And _
               lngColumn <> lngDataColCPName And _
               lngColumn <> lngDataColPartType And _
               lngColumn <> lngDataColBAEPartNumber And _
               lngColumn <> lngDataColDateSaved Then
                ' Not a key field - copy it
                mshtPartsData.Cells(mlngCurrentRow, lngColumn) = mshtPartsData.Cells(lngOtherRow, lngColumn)
            End If
        Next lngColumn
    
        ' Set the data saved on the current part
        mshtPartsData.Cells(mlngCurrentRow, lngDataColDateSaved) = Format(Now, "dd-mmm-yyyy hh:mm:ss") ' Date saved
        
        CopyPartDataColumns = True
    Else
        ' Cannot copy - rows not identified
        CopyPartDataColumns = False
    End If
    
    Exit Function
Err_Trap:
    MsgBox "lngOtherRow=" & lngOtherRow & _
           " mlngCurrentRow=" & mlngCurrentRow & " - " & _
           Err.Description & " " & Err.Number, vbExclamation, "CopyPartDataColumns"
           
    CopyPartDataColumns = False
    Exit Function
End Function



Attribute VB_Name = "modDSEntry"
Option Explicit

Function SetUpFields(ByVal strDSEntryFormToSetUp As String)
'
' Go through each FieldSpec field row and set up the field properties
'
    Dim strDSEntryForm As String
    Dim strFieldCode As String
    Dim strFieldControlTipText As String
    Dim strFieldTag As String
    Dim strEnabledClear As String
    Dim strLabelCode As String
    Dim strLabelCaption As String
    Dim strUnitsCode As String
    Dim strUnitsCaption As String
    Dim lngComboColumn As Long
    Dim lngFieldRow As Long
    Dim lngFormIndex As Long
    
    On Error GoTo Err_Trap
    
    lngFormIndex = GetFormIndex(strDSEntryFormToSetUp) ' Get the index of the passed form
    
    For lngFieldRow = 2 To glngSpecFieldRowMax
        strDSEntryForm = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDSEntryForm))
        
        If strDSEntryForm = strDSEntryFormToSetUp Then
            ' Only fields on passed form
            strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
            If strFieldCode = "" Then
                Exit For
            End If

            strLabelCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecLabelCode))
            strFieldControlTipText = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecControlTipText))
            strFieldTag = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecLabelCaption))
            strEnabledClear = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecEnabledClear))
            strLabelCaption = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecLabelCaption))
            strUnitsCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecUnitsCode))
            strUnitsCaption = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecUnitsCaption))
            lngComboColumn = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecComboColumn)
        
            If SetUpField(lngFormIndex, _
                          strFieldCode, _
                          strFieldControlTipText, _
                          strFieldTag, _
                          strEnabledClear, _
                          strLabelCode, _
                          strLabelCaption, _
                          strUnitsCode, _
                          strUnitsCaption, _
                          lngComboColumn) Then
            End If
        
        End If
    Next lngFieldRow
    
    SetUpFields = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "SetUpFields"
    SetUpFields = False
    Exit Function
End Function

Function GetFormIndex(ByVal strFormName As String) As Long
'
' Determine the UserForms collection index of the passed form
'
    Dim lngFormCount As Long
    Dim lngIndex As Long
    
    On Error GoTo Err_Trap
    
    GetFormIndex = 0

    lngFormCount = UserForms.Count ' Count the number in the collection
    For lngIndex = 0 To lngFormCount - 1
        If UserForms(lngIndex).Name = strFormName Then
            ' Found the form
            GetFormIndex = lngIndex
            Exit For
        End If
    Next lngIndex
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "GetFormIndex strFormName=" & strFormName
    GetFormIndex = 0
    Exit Function
End Function

Function SetUpField(ByVal lngFormIndex As Long, _
                       ByVal strFieldCode As String, _
                       ByVal strFieldControlTipText As String, _
                       ByVal strFieldTag As String, _
                       ByVal strEnabledClear As String, _
                       ByVal strLabelCode As String, _
                       ByVal strLabelCaption As String, _
                       ByVal strUnitsCode As String, _
                       ByVal strUnitsCaption As String, _
                       ByVal lngComboColumn As Long)
'
' Set up the Label, Control Tip Text, Tag and Enabled Clear value
' for the passed field code.
'
    Dim strMultipageName As String
    Dim lngTabIndex As Long
    
    Dim MyFieldControl As Control
    Dim MyLabelControl As Control
    Dim MyUnitsControl As Control
    Dim MyMPGControl As Control
    Dim MyObject As Object
    
    On Error GoTo Err_Trap
    
    ' Set up references to Controls to be accessed on the form
    If Left$(strFieldCode, 3) = "mpg" Then
        ' Separate tab index and control name out of strFieldCode
        strMultipageName = Mid$(strFieldCode, 1, Len(strFieldCode) - 2)
        lngTabIndex = Val(Trim(Right$(strFieldCode, 2)))

        Set MyMPGControl = UserForms(lngFormIndex).Controls(strMultipageName)
    ElseIf Left$(strFieldCode, 3) = "fra" Or _
           Left$(strFieldCode, 3) = "frm" Then
        ' This is simply a frame or form group - no label or units
        Set MyFieldControl = UserForms(lngFormIndex).Controls(strFieldCode)
    Else
        Set MyFieldControl = UserForms(lngFormIndex).Controls(strFieldCode)
        If strLabelCode <> "" Then
            Set MyLabelControl = UserForms(lngFormIndex).Controls(strLabelCode)
        End If
        If strUnitsCode <> "" Then
            Set MyUnitsControl = UserForms(lngFormIndex).Controls(strUnitsCode)
        End If
    End If
    
    If strFieldCode <> "" Then
        
        If Left$(strFieldCode, 3) = "mpg" Then
            ' Set up Multi-page tab
            
            ' Separate tab index and control name out of strFieldCode
            strMultipageName = Mid$(strFieldCode, 1, Len(strFieldCode) - 2)
            lngTabIndex = Val(Trim(Right$(strFieldCode, 2)))
           
            MyMPGControl.Pages(lngTabIndex).Caption = strLabelCaption
        ElseIf Left$(strFieldCode, 3) = "fra" Or _
               Left$(strFieldCode, 3) = "frm" Then
            ' Set up Frame or form group
            MyFieldControl.Caption = strLabelCaption
        ElseIf Left$(strFieldCode, 3) = "lbl" Then
            ' Set up Label (not associated with any data field)
            MyFieldControl.Caption = strLabelCaption
        Else
            ' Set up field
            MyFieldControl.ControlTipText = strFieldControlTipText
            MyFieldControl.Tag = strFieldTag
            If strLabelCode <> "" Then
                ' Set up label
                MyLabelControl.Caption = strLabelCaption
            End If
            If strUnitsCode <> "" Then
                ' Set up label
                MyUnitsControl.Caption = strUnitsCaption
            End If
    
            If lngComboColumn >= 1 Then
                ' Set up combo box values
                If SetUpComboValues(lngFormIndex, strFieldCode, lngComboColumn) Then
                End If
            End If
    
            If Left$(strFieldCode, 3) = "chk" Then
                ' Boolean value
                MyFieldControl.Value = strEnabledClear
            Else
                ' Non-boolean value
                MyFieldControl.Value = Trim(UnDelimitData(strEnabledClear, "DOUBLEQUOTE"))
            End If
        End If
    End If
    
    Set MyFieldControl = Nothing
    Set MyLabelControl = Nothing
    Set MyUnitsControl = Nothing
    Set MyMPGControl = Nothing
    
    SetUpField = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "SetUpField - " & strFieldCode
    SetUpField = False
    Exit Function
End Function

Function EnableFieldValues(ByVal strDSEntryFormToSetUp As String)
'
' Go through FieldSpec field row and enable, disable, default as appropriate.
' Several loops through fields allow checking of fields in correct order
'
    Dim strDSEntryForm As String
    Dim lngFormIndex As Long
    Dim strFieldCode As String
    Dim strLabelCode As String
    Dim strUnitsCode As String
    Dim strTriggerFieldCode As String
    Dim lngFieldRow As Long
    Dim lngTabIndex         As Long
    Dim strMultipageName    As String
    Dim strECRelatedCode As String
    
    On Error GoTo Err_Trap
    
    lngFormIndex = GetFormIndex(strDSEntryFormToSetUp) ' Get the index of the passed form
    
    ' 1 - Loop through all fields which do not have any triggers
    ' This includes trigger fields which do not have any triggers (i.e. top-level triggers)
    For lngFieldRow = 2 To glngSpecFieldRowMax
        strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
        If strFieldCode = "" Then
            ' Stop at end of field specification, signified by blank
            Exit For
        End If
        
        strDSEntryForm = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDSEntryForm))
        
        If strDSEntryForm = strDSEntryFormToSetUp Then
            ' Only fields on passed form
        
            ' Look at first possible trigger field code
            strTriggerFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecTriggers))

            If strTriggerFieldCode = "" Then
            ' There are no triggers on this field
        
                ' These fields should always be enabled
                If Left$(strFieldCode, 3) = "mpg" Then
                    ' multipage tab
                
                    ' Separate tab index and control name out of the strFieldCode
                    strMultipageName = Mid$(strFieldCode, 1, Len(strFieldCode) - 2)
                    lngTabIndex = Val(Trim(Right$(strFieldCode, 2)))
                
                    UserForms(lngFormIndex).Controls(strMultipageName).Pages(lngTabIndex).Enabled = True
                
                    If Right$(Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataType)), 5) = "FOCUS" Then
                        ' Focus should be put on this control
                        UserForms(lngFormIndex).Controls(strMultipageName).Value = lngTabIndex
                    End If
                ElseIf Left$(strFieldCode, 3) = "fra" Then
                    ' frame
                    UserForms(lngFormIndex).Controls(strFieldCode).Enabled = True
                ElseIf Left$(strFieldCode, 3) = "lbl" Then
                    ' label (not associated with any data field)
                    UserForms(lngFormIndex).Controls(strFieldCode).Enabled = True
                Else
                    ' field
                    UserForms(lngFormIndex).Controls(strFieldCode).Enabled = True
        
                    If Trim(UserForms(lngFormIndex).Controls(strFieldCode).Value) = "" Then
                        ' Its value is blank, so set to the ENABLED CLEAR value
                        UserForms(lngFormIndex).Controls(strFieldCode).Value = Trim(UnDelimitData(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecEnabledClear), "DOUBLEQUOTE"))
                    End If
                End If
            End If
        End If
    Next lngFieldRow

    ' 2 - Loop through trigger fields, which have triggers to check
    ' This is the non-top-level triggers
    For lngFieldRow = 2 To glngSpecFieldRowMax
        strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
        If strFieldCode = "" Then
            Exit For
        End If
        
        strDSEntryForm = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDSEntryForm))
        
        If strDSEntryForm = strDSEntryFormToSetUp Then
            ' Only fields on passed form
        
            If Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecTriggerFlag)) = "Y" Then
                ' This is a trigger field
                ' Also pull out Label and Units code names
                strLabelCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecLabelCode))
                strUnitsCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecUnitsCode))
                strECRelatedCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecECRelatedCode))
            
                ' Ensure correctly enabled/disabled and value set appropriately
                If EnableDisableFieldRow(strDSEntryFormToSetUp, strFieldCode, strLabelCode, strUnitsCode, lngFieldRow, strECRelatedCode) Then
                End If
            End If
        End If
    Next lngFieldRow
    
    ' 3 - Loop through non-trigger fields, which have triggers to check
    For lngFieldRow = 2 To glngSpecFieldRowMax
        strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
        If strFieldCode = "" Then
            Exit For
        End If
        
        strDSEntryForm = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDSEntryForm))
        
        If strDSEntryForm = strDSEntryFormToSetUp Then
            ' Only fields on passed form
        
            If Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecTriggerFlag)) <> "Y" Then
                ' This is not a trigger field
            
                ' Look at first possible trigger field code
                strTriggerFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecTriggers))
                If strTriggerFieldCode <> "" Then
                    ' There is at least one trigger on this field
            
                    ' Also pull out Label and Units code names
                    strLabelCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecLabelCode))
                    strUnitsCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecUnitsCode))
                    strECRelatedCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecECRelatedCode))

                    ' Ensure correctly enabled/disabled and value set appropriately
                    If EnableDisableFieldRow(strDSEntryFormToSetUp, strFieldCode, strLabelCode, strUnitsCode, lngFieldRow, strECRelatedCode) Then
                    End If
            
                End If
            End If
        End If
    Next lngFieldRow
    
    EnableFieldValues = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "EnableFieldValues"
    EnableFieldValues = False
    Exit Function
End Function

Function FindFieldRow(ByVal strFieldCode As String) As Long
'
' Field code passed in - return FieldSpec row
'
    Dim rngMatchRange As Range
    Dim lngFieldRow As Long
    Dim lngTotalRows As Long
    Dim lngFindAttempt As Long
    
    On Error GoTo Err_Trap
    
    ' Get total rows of Part Data
    lngTotalRows = mshtFieldSpec.UsedRange.Rows.Count
    
    ' Search column one of FieldSpec sheet for match
    Set rngMatchRange = mshtFieldSpec.UsedRange.Columns(1).Find(strFieldCode)
    
    For lngFindAttempt = 1 To lngTotalRows
        If Not rngMatchRange Is Nothing Then
            ' Match found
            ' Is it a complete cell match?
            lngFieldRow = rngMatchRange.Cells.Row
            If strFieldCode = mshtFieldSpec.UsedRange.Cells(lngFieldRow, 1) Then
                ' Found a match
                FindFieldRow = lngFieldRow
                Exit For
            Else
                ' Search again
                Set rngMatchRange = mshtFieldSpec.UsedRange.Columns(1).FindNext(rngMatchRange)
            End If
        Else
            ' No more matches
            FindFieldRow = 0
            Exit For
        End If
    Next lngFindAttempt
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "FindFieldRow"
    FindFieldRow = 0
    Exit Function
End Function

Function FindPartRow(ByVal strContractorPartNumber As String) As Long
'
' strContractorPartNumber passed in
' Return Part Data row number
' or 0 if not found
'
    Dim rngMatchRange As Range
    Dim lngPartRow As Long
    Dim lngTotalRows As Long
    Dim lngFindAttempt As Long
    
    On Error GoTo Err_Trap
    
    ' Get total rows of Part Data
    lngTotalRows = mshtPartsData.UsedRange.Rows.Count
    
    ' Search column one of Part Data sheet for match
    Set rngMatchRange = mshtPartsData.UsedRange.Columns(1).Find(strContractorPartNumber)
    
    For lngFindAttempt = 1 To lngTotalRows
        If rngMatchRange Is Nothing Then
            ' No more matches
            FindPartRow = 0
            Exit For
        Else
            ' Match found
            ' Is it a complete cell match?
            lngPartRow = rngMatchRange.Cells.Row
            If strContractorPartNumber = UnDelimitData(mshtPartsData.UsedRange.Cells(lngPartRow, 1), "DOUBLEQUOTE") Then
                ' Found a match
                FindPartRow = lngPartRow
                Exit For
            Else
                ' Search again
                Set rngMatchRange = mshtPartsData.UsedRange.Columns(1).FindNext(rngMatchRange)
            End If
        End If
    Next lngFindAttempt
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "FindPartRow"
    FindPartRow = 0
    Exit Function
End Function

Function FindNextFreePartRow() As Long
'
' Return Part Data row number of first free Part Data row
' or 0 if not found
'
    On Error GoTo Err_Trap
    
    ' Get total number of rows
    FindNextFreePartRow = mshtPartsData.UsedRange.Rows.Count + 1
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "FindNextFreePartRow"
    FindNextFreePartRow = 0
    Exit Function
End Function

Function EnableDisableFieldRow(ByVal strDSEntryFormToSetUp As String, _
                               ByVal strFieldCode As String, _
                               ByVal strLabelCode As String, _
                               ByVal strUnitsCode As String, _
                               ByVal lngFieldRow As Long, _
                               ByVal strECRelatedCode As String)
'
' (Field code and row passed in)
' Enable or Disable field according to its triggers
' and set its "clear" value if necessary
'
' If no triggers on this field, leave unchanged
'
    Dim strTriggerFieldCode As String
    Dim lngFormIndex         As Long
    Dim strMultipageName    As String
    Dim lngTabIndex As Long
    
    On Error GoTo Err_Trap
    
    lngFormIndex = GetFormIndex(strDSEntryFormToSetUp) ' Get the index of the passed form
    
    ' Look at field's first possible trigger field code
    strTriggerFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecTriggers))
    If strTriggerFieldCode <> "" Then
        ' There is at least one trigger on this field
        If IsPartFieldEnabled(0, lngFieldRow) = True Then
            ' Field should be enabled
            If Left$(strFieldCode, 3) = "mpg" Then
                ' multipage tab
                
                ' Separate tab index and control name out of the strFieldCode
                strMultipageName = Mid$(strFieldCode, 1, Len(strFieldCode) - 2)
                lngTabIndex = Val(Trim(Right$(strFieldCode, 2)))
                
                UserForms(lngFormIndex).Controls(strMultipageName).Pages(lngTabIndex).Enabled = True
                
                If Right$(Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataType)), 5) = "FOCUS" Then
                    ' Focus should be put on this control
                    UserForms(lngFormIndex).Controls(strMultipageName).Value = lngTabIndex
                End If
            ElseIf Left$(strFieldCode, 3) = "fra" Then
                ' frame
                UserForms(lngFormIndex).Controls(strFieldCode).Enabled = True
            ElseIf Left$(strFieldCode, 3) = "lbl" Then
                ' label (not associated with any data field)
                UserForms(lngFormIndex).Controls(strFieldCode).Enabled = True
            Else
                UserForms(lngFormIndex).Controls(strFieldCode).Enabled = True
                If strLabelCode <> "" Then
                    UserForms(lngFormIndex).Controls(strLabelCode).Enabled = True
                End If
                If strUnitsCode <> "" Then
                    UserForms(lngFormIndex).Controls(strUnitsCode).Enabled = True
                End If
            End If
            
            If Left$(strFieldCode, 3) = "mpg" Or _
               Left$(strFieldCode, 3) = "fra" Or _
               Left$(strFieldCode, 3) = "lbl" Then
                ' multipage tab or frame or label - no further action
            ElseIf Left$(strFieldCode, 3) = "chk" Then
                ' Boolean value
                If Trim(UserForms(lngFormIndex).Controls(strFieldCode).Value) = "" Then
                    ' Its value is blank, or set to the DISABLED CLEAR value so set to the ENABLED CLEAR value
                    UserForms(lngFormIndex).Controls(strFieldCode).Value = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecEnabledClear)
                End If
                
                If Left$(strFieldCode, 5) = "chkEC" Then
                    ' This is an Export Control flag
                    If Not IsNull(strECRelatedCode) And _
                        strECRelatedCode <> "" And _
                        Left$(strECRelatedCode, 3) = "lbl" Then
                        ' An EC Related Code is specified - a label
                        If UserForms(lngFormIndex).Controls(strFieldCode).Value = True Then
                            ' Export-Control flag is set - highlight the flagged field label
                             UserForms(lngFormIndex).Controls(strECRelatedCode).ForeColor = &HFF&
                        Else
                            ' Export-Control flag is clear - remove any highlight
                            UserForms(lngFormIndex).Controls(strECRelatedCode).ForeColor = &H12&
                        End If
                    End If
                End If
            Else
                ' Non-boolean value
                
                ' frmDSEntry.cboMaterialGrade is a special case - one-off
                ' If it is being enabled, ensure it lists the correct combo values
                If strFieldCode = "cboMaterialGrade" Then
                    If SetUpMaterialGradeCombo(lngFieldRow) Then
                    End If
                End If
                
                If Trim(UserForms(lngFormIndex).Controls(strFieldCode).Value) = "" Or _
                   Trim(UserForms(lngFormIndex).Controls(strFieldCode).Value) = Trim(UnDelimitData(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDisabledClear), "DOUBLEQUOTE")) Then
                    ' Its value is blank, or set to the DISABLED CLEAR value so set to the ENABLED CLEAR value
                    UserForms(lngFormIndex).Controls(strFieldCode).Value = Trim(UnDelimitData(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecEnabledClear), "DOUBLEQUOTE"))
                End If
            End If
        Else
            ' Field should be disabled
            If strTriggerFieldCode = "DISABLE" Then
                ' Always disable this field (leaving contents as is)
                UserForms(lngFormIndex).Controls(strFieldCode).Enabled = False
            ElseIf Left$(strFieldCode, 3) = "mpg" Then
                ' multipage tab
                
                ' Separate tab index and control name out of the strFieldCode
                strMultipageName = Mid$(strFieldCode, 1, Len(strFieldCode) - 2)
                lngTabIndex = Val(Trim(Right$(strFieldCode, 2)))
                
                UserForms(lngFormIndex).Controls(strMultipageName).Pages(lngTabIndex).Enabled = False
            ElseIf Left$(strFieldCode, 3) = "fra" Then
                ' frame
                UserForms(lngFormIndex).Controls(strFieldCode).Enabled = False
            ElseIf Left$(strFieldCode, 3) = "lbl" Then
                ' label (not associated with any data field)
                UserForms(lngFormIndex).Controls(strFieldCode).Enabled = False
            Else
                UserForms(lngFormIndex).Controls(strFieldCode).Enabled = False
                If strLabelCode <> "" Then
                    UserForms(lngFormIndex).Controls(strLabelCode).Enabled = False
                End If
                If strUnitsCode <> "" Then
                    UserForms(lngFormIndex).Controls(strUnitsCode).Enabled = False
                End If
            End If

            ' Set to the DISABLED CLEAR value if appropriate
            If strTriggerFieldCode = "DISABLE" Then
                ' Leave field contents as is
            ElseIf Left$(strFieldCode, 3) = "mpg" Or _
               Left$(strFieldCode, 3) = "fra" Or _
               Left$(strFieldCode, 3) = "lbl" Then
                ' multipage tab or frame or label - no further action
            ElseIf Left$(strFieldCode, 3) = "chk" Then
                ' Boolean value
                UserForms(lngFormIndex).Controls(strFieldCode).Value = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDisabledClear)
                If Left$(strFieldCode, 5) = "chkEC" Then
                    ' This is an Export Control flag which is not set
                    If Not IsNull(strECRelatedCode) And _
                        strECRelatedCode <> "" And _
                        Left$(strECRelatedCode, 3) = "lbl" Then
                        ' An EC Related Code is specified - a label - clear any highlight
                        UserForms(lngFormIndex).Controls(strECRelatedCode).ForeColor = &H12&
                    End If
                End If
            Else
                ' Non-boolean value
                
                ' frmDSEntry.cboMaterialGrade is a special case - one-off
                ' If it is being disabled, ensure it is set up to the default Combo list before
                ' setting its Disabled Clear value
                If strFieldCode = "cboMaterialGrade" Then
                    If SetUpMaterialGradeCombo(lngFieldRow) Then
                    End If
                End If
                    
                UserForms(lngFormIndex).Controls(strFieldCode).Value = Trim(UnDelimitData(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDisabledClear), "DOUBLEQUOTE"))
            End If
        End If
    End If
            
    EnableDisableFieldRow = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "EnableDisableFieldRow strECRelatedCode=" & strECRelatedCode
    EnableDisableFieldRow = False
    Exit Function
End Function

Function SetUpComboValues(ByVal lngFormIndex As Long, _
                          ByVal strFieldCode As String, _
                          ByVal lngComboColumn As Long)
'
' Sets up the combo box select value for the passed strFieldCode on the passed form (lngFormIndex)
'
    Dim lngCount As Long
    
    On Error GoTo Err_Trap
    
    UserForms(lngFormIndex).Controls(strFieldCode).Clear
    UserForms(lngFormIndex).Controls(strFieldCode).ColumnCount = 2
    UserForms(lngFormIndex).Controls(strFieldCode).BoundColumn = 1
    UserForms(lngFormIndex).Controls(strFieldCode).ColumnWidths = "0;10"
    For lngCount = 1 To mshtFieldCombo.UsedRange.Cells.Rows.Count
        If mshtFieldCombo.UsedRange.Cells(lngCount + 1, lngComboColumn + 1) <> "" Then
            UserForms(lngFormIndex).Controls(strFieldCode).AddItem
            UserForms(lngFormIndex).Controls(strFieldCode).Column(0, lngCount - 1) = mshtFieldCombo.UsedRange.Cells(lngCount + 1, lngComboColumn)
            UserForms(lngFormIndex).Controls(strFieldCode).Column(1, lngCount - 1) = mshtFieldCombo.UsedRange.Cells(lngCount + 1, lngComboColumn + 1)
        Else
            Exit For
        End If
    Next lngCount
    
    SetUpComboValues = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "SetUpComboValues"
    SetUpComboValues = False
    Exit Function
End Function

Function EnableDisableField(ByVal strDSEntryFormToSetUp As String, _
                            ByVal strFieldCode As String)
'
' (Field code passed in - row must be found)
' Enable or Disable field according to its triggers
' and set its "clear" value if necessary
'
' If no triggers on this field, leave unchanged
'
    Dim lngFieldRow As Long
    Dim strLabelCode As String
    Dim strUnitsCode As String
    Dim strECRelatedCode As String
    Dim strDSEntryForm As String
    
    On Error GoTo Err_Trap
    
    lngFieldRow = FindFieldRow(strFieldCode)
    If lngFieldRow > 1 Then
        ' Field found in Specification
        
        ' Look at its DS Entry Form
        strDSEntryForm = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDSEntryForm))
        If strDSEntryForm = strDSEntryFormToSetUp Then
            ' Only process if on passed form
            
            ' Pull out Label and Units code names too
            strLabelCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecLabelCode))
            strUnitsCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecUnitsCode))
            strECRelatedCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecECRelatedCode))
        
            EnableDisableField = EnableDisableFieldRow(strDSEntryFormToSetUp, strFieldCode, strLabelCode, strUnitsCode, lngFieldRow, strECRelatedCode)
        Else
        End If
    Else
        EnableDisableField = True
    End If
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "EnableDisableField"
    EnableDisableField = False
    Exit Function
End Function

Sub LoadDSFind()
    ' Load the DS Find combo box with existing key values
    Dim lngCount As Long
    
    On Error GoTo Err_Trap
    
    frmDSEntry.cboDSFind.Clear
    
    mlngTotalRecs = mshtPartsData.UsedRange.Rows.Count
    
    ' Sort data sheet using first column as key field
    
'    UnprotectWorkbook
    
    mshtPartsData.UsedRange.Sort mshtPartsData.Cells(, "A"), xlAscending, , , , , , xlYes
    
'    ProtectWorkbook
    
    frmDSEntry.cboDSFind.AddItem gstrcboDSFindBlank ' Add item for "not selected"

    If mlngTotalRecs > 0 Then
        For lngCount = 2 To mshtPartsData.UsedRange.Cells.Rows.Count
            If mshtPartsData.UsedRange.Cells(lngCount, "A") <> "" Then
                frmDSEntry.cboDSFind.AddItem UnDelimitData(mshtPartsData.UsedRange.Cells(lngCount, "A"), "DOUBLEQUOTE")
            Else
                Exit For
            End If
        Next lngCount
    End If

    ' Set to "not selected" item
    frmDSEntry.cboDSFind.Value = gstrcboDSFindBlank
    mcboDSFindOrig = frmDSEntry.cboDSFind.Value
    
    ' Display record count
    frmDSEntry.txtDSRecordCount.Value = mlngTotalRecs - 1
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "LoadDSFind"
    Exit Sub
End Sub

Sub SetDSFind()
    ' Set the selected item in the Find combo box according to current record
    
    On Error GoTo Err_Trap
    
    ' Locate the current row according to the form's key field value
    mlngCurrentRow = 0
    If Trim(frmDSEntry.txtContractorPartNumber.Value) <> "" Then
        ' Form's key field has a value in it
        ' Find the Part Data Row for this key field and set the current row
        mlngCurrentRow = FindPartRow(Trim(UCase(frmDSEntry.txtContractorPartNumber.Value)))
    End If
    
    If mlngCurrentRow > 1 Then
        frmDSEntry.cboDSFind.ListIndex = mlngCurrentRow - 1  ' Displayed/current Part
        mcboDSFindOrig = frmDSEntry.cboDSFind.Value
    Else
        mlngCurrentRow = 1 ' Indicate New Part
        frmDSEntry.cboDSFind.ListIndex = 0  ' New Part
        mcboDSFindOrig = frmDSEntry.cboDSFind.Value
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "SetDSFind"
    Exit Sub
End Sub

Function LoadDSRecord(ByVal strDSEntryFormToLoad As String) As Boolean
'
' Loads the DS form with the current row's data
' or a blank New Part data
' Corrects current row to 1 (New Part) if necessary
'
    On Error GoTo Err_Trap
    
    LoadDSRecord = False
    
    If mlngCurrentRow > 1 And mshtPartsData.Cells(mlngCurrentRow, "A") <> "" Then

        ' Ensure that DS Top - Part Identifier fields are displaying the record now displayed
        If SetTopIdentifierFields(mlngCurrentRow) Then
        End If
    
        If PopulateSpecFields(strDSEntryFormToLoad) Then
        End If
        
        mblnNewDS = False ' Not a new DS record
        frmDSEntry.Caption = GetApplicationTitle(False) & " - " & gstrDSCaptionEdit
    Else
        ' Assume New Part - set row to 1
        mlngCurrentRow = 1
        ' Clear form fields
        If ClearSpecFields("ALL", strDSEntryFormToLoad) Then
        End If
        
        mblnNewDS = True ' A new DS record
        frmDSEntry.Caption = GetApplicationTitle(False) & " - " & gstrDSCaptionNew
    End If
    
    LoadDSRecord = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "LoadDSRecord"
    LoadDSRecord = False
    Exit Function
End Function

Function SetTopIdentifierFields(ByVal lngPartRow As Long)
'
' Set the top display identifier fields to show the current part
'
    Dim strECType As String
    
    On Error GoTo Err_Trap
    
    If lngPartRow > 1 Then
        frmDSEntry.txtDSTopContractorPartNumber.Value = UnDelimitData(mshtPartsData.Cells(lngPartRow, 1), "DOUBLEQUOTE")
        frmDSEntry.txtDSTopContractorPartName.Value = UnDelimitData(mshtPartsData.Cells(lngPartRow, 2), "DOUBLEQUOTE")
        frmDSEntry.txtDSTopBAEPartNumber.Value = UnDelimitData(mshtPartsData.Cells(lngPartRow, 3), "DOUBLEQUOTE")
        If modDSExportControl.IsPartRowEC(lngPartRow) Then
            strECType = ReadFieldValueString(lngPartRow, gstrExportControlType)
            If IsNull(strECType) Or _
               strECType = "" Or _
               strECType = "Select" Then
                strECType = "Export Control"
            End If
            frmDSEntry.lblDSITAR.Caption = strECType
        Else
            frmDSEntry.lblDSITAR.Caption = ""
        End If
    Else ' No current row - top identifier fields should therefore be cleared
        frmDSEntry.txtDSTopContractorPartNumber.Value = ""
        frmDSEntry.txtDSTopContractorPartName.Value = ""
        frmDSEntry.txtDSTopBAEPartNumber.Value = ""
        frmDSEntry.lblDSITAR.Caption = ""
    End If
    
    SetTopIdentifierFields = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "setTopIdentifierFields"
    SetTopIdentifierFields = False
    Exit Function
End Function

Function PopulateSpecFields(ByVal strDSEntryFormToLoad As String) As Boolean
'
' Populate the passed form's fields using the Field Spec information
'
    Dim lngFieldRow As Long
    Dim strDSEntryForm As String
    Dim strFieldCode As String
    Dim strLabelCaption As String
    Dim lngDataColumn As Long
    Dim strFieldValue As String
    Dim blnFieldValue As Boolean
    Dim lngFormIndex As Long
    Dim strErrorMessage As String
    
    On Error GoTo Err_Trap
    
    strErrorMessage = ""
    
    lngFormIndex = GetFormIndex(strDSEntryFormToLoad) ' Get the index of the passed form
    
    ' Loop through spec fields and retrieve data value if specified
    For lngFieldRow = 2 To glngSpecFieldRowMax
        strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
        If strFieldCode = "" Then
            ' Signifies end of specification
            Exit For
        End If
        
        strDSEntryForm = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDSEntryForm))
        
        If strDSEntryForm = strDSEntryFormToLoad Then
            ' Only fields on passed form
            lngDataColumn = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn))
            If lngDataColumn = 0 Then
                ' No data column defined for this field code - skip
            Else
                ' Data column is defined - populate the form field with data
                ' at that column position
                
                If PopulateFormField(lngFormIndex, _
                                    strFieldCode, _
                                    lngDataColumn, _
                                    lngFieldRow) = False Then
                    ' Failed to populate this form field with the Part Data sheet value
                    If strErrorMessage <> "" Then
                        strErrorMessage = strErrorMessage & vbCrLf
                    End If
                    strLabelCaption = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecLabelCaption))
                    strErrorMessage = strErrorMessage & _
                                      strFieldCode & " - " & _
                                      strLabelCaption & " - " & _
                                      UnDelimitData(mshtPartsData.Cells(mlngCurrentRow, lngDataColumn), "DOUBLEQUOTE")
                    
                    ' Populate form field with default value instead
                    If PopulateFormDefault(lngFormIndex, _
                                           strFieldCode, _
                                           lngFieldRow) Then
                    End If
                End If
                                    
            End If
        End If
    Next lngFieldRow
    
    SetShipServicesLabels
    
    If strErrorMessage <> "" Then
        MsgBox strErrorMessage, vbOKOnly, "Unrecognized Attribute Data - Attribute not populated"
    End If
    
    PopulateSpecFields = True
    Exit Function
Err_Trap:
    MsgBox "strDSEntryFormToLoad=" & strDSEntryFormToLoad & _
           " strFieldCode=" & strFieldCode & " - " & _
           Err.Description & " " & Err.Number, vbExclamation, "PopulateSpecFields"
           
    PopulateSpecFields = False
    Exit Function
End Function

Function PopulateFormField(ByVal lngFormIndex As Long, _
                           ByVal strFieldCode As String, _
                           ByVal lngDataColumn As Long, _
                           ByVal lngFieldRow As Long) As Boolean
'
' Separate function to place field in form control, in case it fails.
'
    Dim strMaterialType As String
    Dim strMaterialGrade As String
    
    On Error GoTo Err_Trap
    
    If Left$(strFieldCode, 3) = "chk" Then
        ' Boolean value
        UserForms(lngFormIndex).Controls(strFieldCode).Value = mshtPartsData.Cells(mlngCurrentRow, lngDataColumn)
    Else
        ' Non-boolean, i.e. string value
                    
        ' frmDSEntry.cboMaterialGrade is a special case - one-off
        ' If it is being enabled and populated, ensure it lists the correct combo values
        If strFieldCode = "cboMaterialGrade" Then
            If SetUpMaterialGradeCombo(lngFieldRow) Then
            End If
            
            ' Read Material Type which must have been populated already
            strMaterialType = frmDSEntry.cboMaterialType.Value
            ' Read the value to be loaded to Material Grade
            strMaterialGrade = Trim(UnDelimitData(mshtPartsData.Cells(mlngCurrentRow, lngDataColumn), "DOUBLEQUOTE"))
            ' Material Grade "Select" option differs for each possible Material Type unless Material Type is
            ' not chosen, i.e. "Select"
            ' If Material Type is chosen, i.e. not "Select",
            ' then alter the Material Grade "Select" option by appending the Material Type
            If strMaterialGrade = "Select" And _
               strMaterialType <> "Select" Then
                strMaterialGrade = strMaterialGrade & strMaterialType
            End If
            frmDSEntry.Controls(strFieldCode).Value = strMaterialGrade
        Else
            UserForms(lngFormIndex).Controls(strFieldCode).Value = Trim(UnDelimitData(mshtPartsData.Cells(mlngCurrentRow, lngDataColumn), "DOUBLEQUOTE"))
        End If
    End If
    
    PopulateFormField = True
    
    Exit Function
Err_Trap:
    PopulateFormField = False
    Exit Function
End Function

Function PopulateFormDefault(ByVal lngFormIndex As Long, _
                             ByVal strFieldCode As String, _
                             ByVal lngFieldRow As Long) As Boolean
'
' Populate form field with the default value
'
    Dim blnValue As Boolean
    Dim strValue As String
    Dim strMaterialType As String
    
    If Left$(strFieldCode, 3) = "chk" Then
        ' Boolean value - default to False
        blnValue = False
        UserForms(lngFormIndex).Controls(strFieldCode).Value = blnValue
    Else
        ' String value - Default to its Import Clear value
        strValue = UnDelimitData(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecImportClear), "DOUBLEQUOTE")
        
        ' frmDSEntry.cboMaterialGrade is a special case - one-off
        ' If it is being enabled and populated, ensure it lists the correct combo values for the Material Type
        If strFieldCode = "cboMaterialGrade" Then
            If SetUpMaterialGradeCombo(lngFieldRow) Then
            End If
            
            ' Read Material Type which must have been populated already
            strMaterialType = frmDSEntry.cboMaterialType.Value
            ' Append the Material Type to Material Grade if Select
            If strValue = "Select" And _
               strMaterialType <> "Select" Then
                strValue = strValue & strMaterialType
            End If
        End If
        
        UserForms(lngFormIndex).Controls(strFieldCode).Value = strValue
    End If

    PopulateFormDefault = True
    Exit Function
Err_Trap:
    PopulateFormDefault = False
    Exit Function
End Function

Function ClearSpecFields(ByVal strFieldGroupToClear As String, _
                         ByVal strDSEntryFormToClear As String) As Boolean
'
' Clear the form fields for the passed form and group
'
    Dim lngFieldRow As Long
    Dim strFieldCode As String
    Dim strFieldGroup As String
    Dim strDSEntryForm As String
    Dim lngFormIndex As Long
    
    On Error GoTo Err_Trap
    
    lngFormIndex = GetFormIndex(strDSEntryFormToClear) ' Get the index of the passed form
    
    ' Loop through spec fields and clear form value
    For lngFieldRow = 2 To glngSpecFieldRowMax
        strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
        strFieldGroup = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldGroup))
        strDSEntryForm = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDSEntryForm))
        If strFieldCode = "" Then
            ' Signifies end of specification
            Exit For
        End If
        
        If strDSEntryForm = strDSEntryFormToClear Then
            ' Only if field is on passed form
            If strFieldGroupToClear = "ALL" Or _
               strFieldGroupToClear = strFieldGroup Then
                ' Only clear the passed FIELD GROUP, unless ALL is passed
            
                If Left$(strFieldCode, 3) = "mpg" Or _
                   Left$(strFieldCode, 3) = "fra" Or _
                   Left$(strFieldCode, 3) = "lbl" Then
                    ' multipage tab or frame or label - no further action
                ElseIf Left$(strFieldCode, 3) = "chk" Then
                    ' Boolean value
                    UserForms(lngFormIndex).Controls(strFieldCode).Value = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecEnabledClear)
                Else
                    ' frmDSEntry.cboMaterialGrade is a special case - one-off
                    ' If it is being clear, ensure it lists the correct combo values first of all
                    If strFieldCode = "cboMaterialGrade" Then
                        If SetUpMaterialGradeCombo(lngFieldRow) Then
                        End If
                    End If
                    
                    UserForms(lngFormIndex).Controls(strFieldCode).Value = Trim(UnDelimitData(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecEnabledClear), "DOUBLEQUOTE"))
                End If
            End If
        End If
    Next lngFieldRow
    
    ClearSpecFields = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ClearSpecFields"
    ClearSpecFields = False
    Exit Function
End Function

Function ReturnPartIfExists(strContractorPartNumber) As String
'
' If the passed Part Number (key) field already exists in the Parts Data - return it
' Otherwise return ""
' Use by any process which adds a new part to ensure the part number does not already exist
'
    Dim lngCount As Long
    
    On Error GoTo Err_Trap
    
    ReturnPartIfExists = ""
    
    lngCount = FindPartRow(Trim(UCase(strContractorPartNumber)))
    If lngCount > 1 Then
        ' Found the Part Data row
        ReturnPartIfExists = strContractorPartNumber
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ReturnPartIfExists"
    ReturnPartIfExists = ""
    Exit Function
End Function

Function ReturnPartIfDuplicated(strContractorPartNumber) As String
'
' If the passed Part Number (key) field exists in the Parts Data,
'     excluding the current row (Part being edited) - return it
' Otherwise return ""
' Use by the process which updates a part to ensure the part number has not been changed to one
'     which already exists
'
    Dim lngCount As Long
    
    On Error GoTo Err_Trap
    
    ReturnPartIfDuplicated = ""
    
    lngCount = FindPartRow(Trim(UCase(strContractorPartNumber)))
    If lngCount > 1 And _
       lngCount <> mlngCurrentRow Then
        ' Found the Part Data row and it is not the current row
        ReturnPartIfDuplicated = strContractorPartNumber
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ReturnPartIfDuplicated"
    ReturnPartIfDuplicated = ""
    Exit Function
End Function

Sub AddNewPart()
'
' Saves the DS part data as a new row in Parts Data sheet
' Adding a New Part is always based on frmDSEntry field data only
' other form fields set to default values as cannot yet be known.
'
    Dim lngCount As Long
    
    On Error GoTo Err_Trap
    
    ' Find next available position in Part Data
    mlngCurrentRow = FindNextFreePartRow
    
    If mlngCurrentRow > 1 Then
        ' Subroutine to save the form field to the sheet at the current row - mlngCurrentRow
        SaveToPartsDataSheet ("frmDSEntry")
        
        mblnNewDS = False ' Not entering a new part any more - now editing a part
        frmDSEntry.Caption = GetApplicationTitle(False) & " - " & gstrDSCaptionEdit
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "AddNewPart"
    Exit Sub
End Sub

Sub UpdatePart(ByVal strDSEntryFormToSave As String)
'
' Saves the passed Form's data as an update to the current row (mlngCurrentRow) in Parts Data sheet
'
    On Error GoTo Err_Trap
    
    If mlngCurrentRow > 1 Then
        ' Subroutine to save the form field to the sheet at the current row - mlngCurrentRow
        SaveToPartsDataSheet (strDSEntryFormToSave)
    
        mblnNewDS = False ' Still editing a part
        If strDSEntryFormToSave = "frmDSEntry" Then
            ' Change the captioin if the main DS Entry form only
            frmDSEntry.Caption = GetApplicationTitle(False) & " - " & gstrDSCaptionEdit
        End If
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "UpdatePart"
    Exit Sub
End Sub

Private Sub SaveToPartsDataSheet(ByVal strDSEntryFormToSave As String)
'
' Saves the passed form's data to the current row of the Parts Data sheet
'
    Dim lngFieldRow As Long
    Dim strFieldCode As String
    Dim strDSEntryForm As String
    Dim lngFormIndex As Long
    Dim lngDataColumn As Long
    Dim strOldCPN As String
    Dim strNewCPN As String
    
    On Error GoTo Err_Trap

    lngFormIndex = GetFormIndex(strDSEntryFormToSave) ' Get the index of the passed form
    
    If mlngCurrentRow > 1 Then
        ' A current row is known
        
        ' Set the data saved on the main DS Entry Form
        frmDSEntry.txtDSDateSaved.Value = Format(Now, "dd-mmm-yyyy hh:mm:ss") ' Date saved
    
        ' Loop through frmDSEntry spec fields and save field value to its column position in the Parts Data row
        For lngFieldRow = 2 To glngSpecFieldRowMax
            ' Get next field in specification
            strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
            If strFieldCode = "" Then
                ' Signifies end of specification
                Exit For
            End If
            
            strDSEntryForm = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDSEntryForm))
            
            If strDSEntryForm = strDSEntryFormToSave Then
                ' Only the passed Form's fields
                
                ' Get field Parts Data column position
                lngDataColumn = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn))
                If lngDataColumn = 0 Then
                    ' No data column defined for this field code - skip
                Else
                    ' Data column is defined - transfer the form field data to the column
                    If Left$(strFieldCode, 3) = "chk" Then
                        ' Boolean value
                        If UserForms(lngFormIndex).Controls(strFieldCode).Value <> True And _
                           UserForms(lngFormIndex).Controls(strFieldCode).Value <> False Then
                            mshtPartsData.Cells(mlngCurrentRow, lngDataColumn) = False
                        Else
                            mshtPartsData.Cells(mlngCurrentRow, lngDataColumn) = UserForms(lngFormIndex).Controls(strFieldCode).Value
                        End If
                    Else
                        ' Non-boolean, i.e. string value
                        If UserForms(lngFormIndex).Controls(strFieldCode).Value = "" Or _
                           IsNull(UserForms(lngFormIndex).Controls(strFieldCode).Value) Then
'                            mshtPartsData.Cells(mlngCurrentRow, lngDataColumn) = ""
                            mshtPartsData.Cells(mlngCurrentRow, lngDataColumn) = DelimitData("", "DOUBLEQUOTE")
                        Else
                            mshtPartsData.Cells(mlngCurrentRow, lngDataColumn) = DelimitData(UserForms(lngFormIndex).Controls(strFieldCode).Value, "DOUBLEQUOTE")
                        End If
                    End If
                End If
            End If
        Next lngFieldRow
        
        If strDSEntryFormToSave = "frmDSEntry" Then
            ' Ensure that DS Top - Part Identifier fields are displaying the record now saved and displayed
            SetTopIdentifierFields (mlngCurrentRow)
            ' Clear chkEC flags if necessary
            modDSExportControl.ClearECFlags (mlngCurrentRow)
        End If
        
        ' Save the entire workbook
        Excel.ActiveWorkbook.Save
    End If

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "SaveToPartsDataSheet - " & strFieldCode
    Exit Sub
End Sub

Sub SetButtons()
'
' Set enabled state on buttons according to position in data set
'
    On Error GoTo Err_Trap
    
    mlngTotalRecs = mshtPartsData.UsedRange.Rows.Count
    
    If mlngTotalRecs <= 1 Then
        frmDSEntry.btnDSNext.Enabled = False
    ElseIf mlngCurrentRow >= mlngTotalRecs Then
        frmDSEntry.btnDSNext.Enabled = False
    Else
        frmDSEntry.btnDSNext.Enabled = True
    End If
        
    If mlngTotalRecs <= 1 Then
        frmDSEntry.btnDSPrevious.Enabled = False
    ElseIf mlngCurrentRow <= 2 Then
        frmDSEntry.btnDSPrevious.Enabled = False
    Else
        frmDSEntry.btnDSPrevious.Enabled = True
    End If
    
    If mlngTotalRecs <= 1 Or mlngCurrentRow <= 1 Then
        frmDSEntry.btnDSDelete.Enabled = False
    ElseIf IsParentPart(mlngCurrentRow) = True Then
        ' Cannot delete a Parent Part
        frmDSEntry.btnDSDelete.Enabled = False
    Else
        frmDSEntry.btnDSDelete.Enabled = True
    End If
    
    If mlngTotalRecs <= 1 Or mlngCurrentRow <= 1 Then
        ' Not viewing a saved part - cannot allow certain buttons
        frmDSEntry.btnDSNewPartCurrentData.Enabled = False
        frmDSEntry.btnDSCopyPart.Enabled = False
    Else
        ' Viewing a saved part
        frmDSEntry.btnDSNewPartCurrentData.Enabled = True
        If IsParentPart(mlngCurrentRow) = True Then
            ' Copy Part only available to a Parent Part
            frmDSEntry.btnDSCopyPart.Enabled = True
        End If
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "SetButtons"
    Exit Sub
End Sub

Sub SetUpNewPart()
'
' Set-up the form for entry of a New Part
'
    On Error GoTo Err_Trap
    
    ' New part - therefore there is no current row
    mlngCurrentRow = 0
    
    ' Clear out form fields
    If ClearSpecFields("ALL", "frmDSEntry") Then
    End If
    
    ' Ensure that top part identifier fields are showing the record now displayed
    If SetTopIdentifierFields(mlngCurrentRow) Then
    End If
    
    ' Set up the enabled/disabled configuration for a cleared form
    If EnableFieldValues("frmDSEntry") Then
    End If
    
    mblnNewDS = True
    frmDSEntry.Caption = GetApplicationTitle(False) & " - " & gstrDSCaptionNew
    
    LoadDSFind
    SetDSFind
    
    SetButtons ' Enable/Disable buttons

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "SetUpNewPart"
    Exit Sub
End Sub

Sub SetUpNewPartCurrentFields()
'
' Set-up the form for entry of a New Part, keeping all current fields
' except for key fields
'
    On Error GoTo Err_Trap
    
    ' New part - therefore there is no current row
    mlngCurrentRow = 0
    
    ' Clear out identifier fields
    If ClearSpecFields("mpgDSPage00", "frmDSEntry") Then
    End If
    ' Clear out top display fields
    If ClearSpecFields("top", "frmDSEntry") Then
    End If
    
    ' Ensure that top part identifier fields are showing the record now displayed
    If SetTopIdentifierFields(mlngCurrentRow) Then
    End If
    
    ' Set up the enabled/disabled configuration for a cleared form
    If EnableFieldValues("frmDSEntry") Then
    End If
    
    mblnNewDS = True
    frmDSEntry.Caption = GetApplicationTitle(False) & " - " & gstrDSCaptionNew
    
    LoadDSFind
    SetDSFind
    
    SetButtons ' Enable/Disable buttons

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "SetUpNewPartCurrentFields"
    Exit Sub
End Sub

Sub LoadDSPart(ByVal strDSEntryFormToLoad As String)
'
' Load the form with data for the currently selected Part (mlngCurrentRow)
'
    On Error GoTo Err_Trap
    
    ' Load the data into the form fields
    LoadDSRecord (strDSEntryFormToLoad)
    
    ' Set up the enabled/disabled configuration for the loaded form
    If EnableFieldValues(strDSEntryFormToLoad) Then
    End If
    
    mblnNewDS = False
    frmDSEntry.Caption = GetApplicationTitle(False) & " - " & gstrDSCaptionEdit
    
    If strDSEntryFormToLoad = "frmDSEntry" Then
        ' Ensure CPN Find box is clear
        frmDSEntry.txtFindContractorPartNumber = ""
    End If
    
    LoadDSFind
    SetDSFind
    
    ClearDSHighlights (strDSEntryFormToLoad) ' Clear any field highlights left over from last displayed part
    
    SetButtons ' Enable/Disable buttons

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "LoadDSPart - " & mlngCurrentRow
    Exit Sub
End Sub

Function ActionConfirm(ByRef blnDSFormChangedFlag As Boolean) As Boolean
'
' Called by any action which risks losing unsaved changes
' Returns True if action should proceed (and changes therefore lost)
' Returns False if action should be aborted
'
    Dim strMsgBoxTitle As String

    On Error GoTo Err_Trap
    
    ActionConfirm = False ' Initially assume - do not proceed with action
    
    If blnDSFormChangedFlag = True Then
        ' The form has been changed - so must ask for action confirmation
        If mblnNewDS = True Then
            strMsgBoxTitle = "New Part data will be lost!"
        Else
            strMsgBoxTitle = "Part data changes will be lost!"
        End If
        
        If MsgBox("Changes have been made to the form fields - these will be lost if you proceed without saving. Do you want to continue?", vbOKCancel, strMsgBoxTitle) = vbOK Then
            ActionConfirm = True
            blnDSFormChangedFlag = False
        End If
    Else
        ' The form has not been changed - no need to ask for action confirmation
        ActionConfirm = True
        blnDSFormChangedFlag = False
    End If

    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ActionConfirm"
    Exit Function
End Function

Function OnChangeTriggerField(ByVal strDSEntryForm As String, _
                              ByRef blnDSFormChangedFlag As Boolean, _
                              ByVal MyControl As Control) As Boolean
    Dim strFieldCode As String
    Dim lngFieldRow As Long
    Dim lngTriggerRow As Long
    Dim lngCol As Long
    Dim strTriggeredFieldCode As String
    Dim rngMatchRange As Range
    Dim strECRelatedCode As String
    Dim lngFindAttempt As Long
    Dim lngTotalRows As Long
    Dim strTriggerCancelValue As String
    Dim blnTriggerCancelValue As Boolean
    Dim strSaveDSActionEvents As String
    Dim blnContinue As Boolean
    Dim lngFormIndex As Long
    Dim strWarnFlag As String
    
    On Error GoTo Err_Trap
    
    lngFormIndex = GetFormIndex(strDSEntryForm) ' Get the index of the passed form
    
    ' Change event processing should be done unless turned off
    If mstrDSActionEvents = gstrActionEventsAll Then
        ' Event processing is not switched off - continue
        ' Set changed flag
    
        blnDSFormChangedFlag = True ' Form has changed
        
        strFieldCode = MyControl.Name ' Get field code which has changed
        lngFieldRow = FindFieldRow(strFieldCode) ' Get its Field Spec row

        ' Get total rows of Trigger fields
        lngTotalRows = mshtFieldTriggers.UsedRange.Rows.Count
        
        ' Search column one of FieldTriggers sheet for match
        Set rngMatchRange = mshtFieldTriggers.UsedRange.Columns(1).Find(strFieldCode)
        
        lngTriggerRow = 0
    
        If Not rngMatchRange Is Nothing Then
          For lngFindAttempt = 1 To lngTotalRows
            If Not rngMatchRange Is Nothing Then
                ' Match found
                lngTriggerRow = rngMatchRange.Cells.Row
                If lngTriggerRow > 1 Then
                    ' Is it a complete cell match?
                    If strFieldCode = mshtFieldTriggers.UsedRange.Cells(lngTriggerRow, 1) Then
                        ' Found complete match
                        ' This is a trigger field
                        Exit For
                    Else
                        ' Not a complete match
                        lngTriggerRow = 0
                        ' Search again
                        Set rngMatchRange = mshtFieldTriggers.UsedRange.Columns(1).FindNext(rngMatchRange)
                    End If
                Else
                    ' Top row match does not count as it is the header row - no further action
                    Exit For
                End If
            End If
          Next lngFindAttempt
        End If
        
        If lngTriggerRow > 1 Then
            ' The field is a trigger
            blnContinue = True
            
            ' Read Spec Field's WARN FLAG to see if users should be warned
            strWarnFlag = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecWarnFlag))
            
            If strWarnFlag = "WARN" And _
               mblnTriggerWarningMessage Then
                
                If Left$(strFieldCode, 3) = "chk" Then
                    ' Boolean trigger (chkEC flags are not triggers and should not get to this point)
                    ' The only chk controls getting to this point are the "not applicable" check boxes
                    ' Only warn if checking ON "not applicable" because this may clear data
                    If UserForms(lngFormIndex).Controls(strFieldCode).Value = True Then
                        
                        ' Users should be warned and allowed to cancel the field change
                        If MsgBox("This check box will disable/clear related fields." & vbCrLf & _
                                  "Are you sure you want to continue?", vbOKCancel, "Part Data - Edit") <> vbOK Then
                            ' Do not continue
                            blnContinue = False
                        End If
                    
                    End If
                Else
                    ' Users should be warned and allowed to cancel the field change
                    If MsgBox("Changing this field may enable or disable/clear its related fields." & vbCrLf & _
                              "Are you sure you want to continue?", vbOKCancel, "Part Data - Edit") <> vbOK Then
                        ' Do not continue
                        blnContinue = False
                    End If
                End If
                
                mblnTriggerWarningMessage = False
            End If
            If blnContinue Then
                ' Loop through its triggered fields and check them in turn
                For lngCol = 2 To 2 + glngSpecTriggersMax
                    strTriggeredFieldCode = Trim(mshtFieldTriggers.UsedRange.Cells(lngTriggerRow, lngCol))
                    If strTriggeredFieldCode <> "" Then
                        If EnableDisableField(strDSEntryForm, strTriggeredFieldCode) Then
                        End If
                    Else
                        ' Blank cell indicates no more triggered fields
                        Exit For
                    End If
                Next lngCol
            Else
                ' Return trigger control back to enabled clear value
                strSaveDSActionEvents = mstrDSActionEvents
                mstrDSActionEvents = gstrActionEventsNone
                If Left$(strFieldCode, 3) = "chk" Then
                    ' Boolean trigger (chkEC flags are not triggers and should not get to this point)
                    blnTriggerCancelValue = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecEnabledClear)
                    UserForms(lngFormIndex).Controls(strFieldCode).Value = blnTriggerCancelValue
                Else
                    UserForms(lngFormIndex).Controls(strFieldCode).Value = mcboSaveOldComboValue
                End If
                mstrDSActionEvents = strSaveDSActionEvents ' Restore events
            End If
        End If
        
        If Left$(strFieldCode, 5) = "chkEC" Then
            ' This is an export control flag
            ' If set, its related EC field's label should be highlighted
            ' If not set, any highlight should be removed from its related EC field's label
            
            ' Read its related EC field label
            strECRelatedCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecECRelatedCode))
            ' Set or clear highlight depending on the flag setting
            If Not IsNull(strECRelatedCode) And _
                strECRelatedCode <> "" Then
                If UserForms(lngFormIndex).Controls(strFieldCode).Value = True Then
                    ' Export-Control flag is set - highlight the flagged field label
                    UserForms(lngFormIndex).Controls(strECRelatedCode).ForeColor = &HFF&
                Else
                    ' Export-Control flag is clear - remove any highlight
                    UserForms(lngFormIndex).Controls(strECRelatedCode).ForeColor = &H12&
                End If
            End If
        End If
    End If
    
    OnChangeTriggerField = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "OnChangeTriggerField"
    OnChangeTriggerField = False
    Exit Function
End Function

Function IsPartFieldEnabled(ByVal lngPartRow As Long, _
                            ByVal lngFieldRow As Long) As Boolean
'
' A field is enabled if any one of its triggers has the trigger value specified in FieldSpec
' i.e. it is an OR operation - if trigger 1 or trigger 2 or... then enable field
'
' This function checks if the passed field is enabled in the passed part
' If lngPartRow is 0 then it checks the DS form field values directly.
' i.e. Function can be called to check the field's triggers on the form
'      or a field's triggers in a saved part
'
    Dim lngCol As Long
    Dim strFieldCode As String
    Dim strTriggerFieldCode As String
    Dim blnTriggerValue As Boolean
    Dim strTriggerValue As String
    Dim strExportControlApp As String
    Dim blnContinue As Boolean
    
    On Error GoTo Err_Trap
    
    ' Initially assume field enabled
    IsPartFieldEnabled = True
    
    ' Look up field code
    strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
    If strFieldCode = "" Then
        ' Unrecognized field
        IsPartFieldEnabled = False
    Else
        blnContinue = True
        
        If Left$(strFieldCode, 5) = "chkEC" Then
            ' All Export-Control check boxes are only enabled if the Export-Control flag is set
            ' What is the setting of this part's Export-Control flag?
            If lngPartRow = 0 Then
                ' Use form value - Always on main DS Entry Form
                strExportControlApp = frmDSEntry.Controls(gstrExportControlApp).Value
            Else
                ' Use part value
                strExportControlApp = ReadFieldValueString(lngPartRow, gstrExportControlApp)
            End If
            If IsNull(strExportControlApp) Or _
               strExportControlApp <> "Yes" Then
                ' Not Export-Controlled, so all EC check boxes should be disabled.
                IsPartFieldEnabled = False
                blnContinue = False
            End If
        End If
        
        If blnContinue Then
          ' Look up its first possible trigger field
          strTriggerFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecTriggers))
          If strTriggerFieldCode = "" Then
            ' No triggers specified, so field is always enabled
          ElseIf strTriggerFieldCode = "DISABLE" Then
            ' Field always disabled
            IsPartFieldEnabled = False
          Else
            ' At least one trigger specified, so initially assume field disabled
            IsPartFieldEnabled = False
    
            ' Loop through field triggers - maximum of glngSpecTriggersMax
            ' Should any trigger fail then field not enabled
            For lngCol = 0 To glngSpecTriggersMax - 1
                strTriggerFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecTriggers + (lngCol * 3)))
                If strTriggerFieldCode = "" Then
                    ' No more triggers
                    Exit For
                Else
                    ' Check next trigger specified
                    If Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecTriggers + (lngCol * 3) + 1)) <> "" Then
                        ' TRIGGER IS value to check
                        
                        If Left$(strTriggerFieldCode, 3) = "chk" Then
                            ' Comparing a boolean
                            If lngPartRow = 0 Then
                                ' Use form value for trigger
                                blnTriggerValue = ReadFormValueBoolean(strTriggerFieldCode)
                            Else
                                ' Use part value for trigger
                                blnTriggerValue = ReadFieldValueBoolean(lngPartRow, strTriggerFieldCode)
                            End If
                            
                            If blnTriggerValue And _
                               mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecTriggers + (lngCol * 3) + 2) Then
                                IsPartFieldEnabled = True
                                Exit For  ' No need to continue as at least one trigger says enable
                            ElseIf Not blnTriggerValue And _
                                   Not mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecTriggers + (lngCol * 3) + 2) Then
                                IsPartFieldEnabled = True
                                Exit For  ' No need to continue as at least one trigger says enable
                            End If
                        Else
                            ' Non-boolean compare
                            If lngPartRow = 0 Then
                                ' Use form value for trigger
                                strTriggerValue = ReadFormValueString(strTriggerFieldCode)
                            Else
                                ' Use part value for trigger
                                strTriggerValue = ReadFieldValueString(lngPartRow, strTriggerFieldCode)
                            End If
                            If strTriggerValue = Trim(UnDelimitData(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecTriggers + (lngCol * 3) + 1), "DOUBLEQUOTE")) Or _
                               strTriggerValue = "ERROR" Then
                                IsPartFieldEnabled = True
                                Exit For  ' No need to continue as at least one trigger says enable
                            End If
                        End If
                    ElseIf Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecTriggers + (lngCol * 3) + 2)) <> "" Then
                        ' TRIGGER IS NOT value to check

                        If Left$(strTriggerFieldCode, 3) = "chk" Then
                            ' Comparing a boolean
                            If lngPartRow = 0 Then
                                ' Use form value for trigger
                                blnTriggerValue = ReadFormValueBoolean(strTriggerFieldCode)
                            Else
                                ' Use part value for trigger
                                blnTriggerValue = ReadFieldValueBoolean(lngPartRow, strTriggerFieldCode)
                            End If
                            If blnTriggerValue And _
                               Not mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecTriggers + (lngCol * 3) + 2) Then
                                IsPartFieldEnabled = True
                                Exit For  ' No need to continue as at least one trigger says enable
                            ElseIf Not blnTriggerValue And _
                                   mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecTriggers + (lngCol * 3) + 2) Then
                                IsPartFieldEnabled = True
                                Exit For  ' No need to continue as at least one trigger says enable
                            End If
                        Else
                            ' Non-boolean compare
                            If lngPartRow = 0 Then
                                ' Use form value for trigger
                                strTriggerValue = ReadFormValueString(strTriggerFieldCode)
                            Else
                                ' Use part value for trigger
                                strTriggerValue = ReadFieldValueString(lngPartRow, strTriggerFieldCode)
                            End If
                            If strTriggerValue <> Trim(UnDelimitData(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecTriggers + (lngCol * 3) + 2), "DOUBLEQUOTE")) Or _
                               strTriggerValue = "ERROR" Then
                                IsPartFieldEnabled = True
                                Exit For  ' No need to continue as at least one trigger says enable
                            End If
                        End If
                    End If
                End If
            Next lngCol
          End If
        End If
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number & " PartRow=" & lngPartRow & " FieldRow=" & lngFieldRow & _
                                                            " Field=" & strFieldCode & " Trigger=" & strTriggerFieldCode, vbExclamation, "IsPartFieldEnabled"
    IsPartFieldEnabled = False
    Exit Function
End Function

Function ReadFormValueBoolean(ByVal strFieldCode As String) As Boolean
'
' Reads the passed FieldCode value from the form currently displayed
'
    Dim lngFieldRow As Long
    Dim blnFormValue As Boolean
    Dim strDSEntryForm As String
    Dim lngFormIndex As Long
    
    On Error GoTo Err_Trap
    
    lngFieldRow = FindFieldRow(strFieldCode) ' Get its Spec Field Row
    ' Determine which form it is on
    strDSEntryForm = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDSEntryForm))
    
    lngFormIndex = GetFormIndex(strDSEntryForm) ' Get the index of the form
    
    ' Read form field value
    blnFormValue = UserForms(lngFormIndex).Controls(strFieldCode).Value
   
    ReadFormValueBoolean = blnFormValue

    Exit Function
Err_Trap:
    Exit Function
End Function

Function ReadFormValueString(ByVal strFieldCode As String) As String
'
' Reads the passed FieldCode value from the form currently displayed
'
    Dim lngFieldRow As Long
    Dim strFormValue As String
    Dim strDSEntryForm As String
    Dim lngFormIndex As Long
    
    On Error GoTo Err_Trap
    
    lngFieldRow = FindFieldRow(strFieldCode) ' Get its Spec Field Row
    ' Determine which form it is on
    strDSEntryForm = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDSEntryForm))
    
    lngFormIndex = GetFormIndex(strDSEntryForm) ' Get the index of the form
    
    ' Read form field value
    strFormValue = UserForms(lngFormIndex).Controls(strFieldCode).Value
    
    ReadFormValueString = strFormValue

    Exit Function
Err_Trap:
    ReadFormValueString = "ERROR"
    Exit Function
End Function

Function ReadFieldValueBoolean(ByVal lngPartRow As Long, _
                               ByVal strFieldCode As String) As Boolean
'
' Reads the strFieldCode field value held for the passed part, assuming Boolean
'
    Dim lngFieldRow As Long
    Dim lngDataColumn As Long
    
    On Error GoTo Err_Trap
    
    lngFieldRow = FindFieldRow(strFieldCode)
    lngDataColumn = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn)
    
    ReadFieldValueBoolean = mshtPartsData.Cells(lngPartRow, lngDataColumn)

    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, _
           "ReadFieldValueBoolean: PartRow=" & lngPartRow & " FieldCode=" & strFieldCode
    Exit Function
End Function

Function ReadFieldValueString(ByVal lngPartRow As Long, _
                              ByVal strFieldCode As String) As String
'
' Reads the strFieldCode field value held for the passed part, assuming String
'
    Dim lngFieldRow As Long
    Dim lngDataColumn As Long
    
    On Error GoTo Err_Trap
    
    lngFieldRow = FindFieldRow(strFieldCode)
    lngDataColumn = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn)
    
    ReadFieldValueString = Trim(UnDelimitData(mshtPartsData.Cells(lngPartRow, lngDataColumn), "DOUBLEQUOTE"))
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, _
           "ReadFieldValueString: PartRow=" & lngPartRow & " FieldCode=" & strFieldCode
    Exit Function
End Function

Function ClearPartRowFields(ByVal lngPartRow As Long, _
                            ByVal strClearType As String) As Boolean
'
' Clears the passed Part Data row, by setting fields to default values
' If "NEW" part use Disabled Clear values as the defaults
' If "IMPORT" part user Import Clear values as the defaults
'
    Dim lngFieldRow As Long
    Dim strFieldCode As String
    Dim lngDataColumn As Long
    Dim strDisabledClear As String
    
    On Error GoTo Err_Trap
    
    ' Loop through spec fields and clear each Part Row data value
    For lngFieldRow = 2 To glngSpecFieldRowMax
        ' Read this spec field code
        strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
        If strFieldCode = "" Then
            ' Signifies end of specification
            Exit For
        End If
        ' Read this spec field's part data column
        lngDataColumn = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn))
        
        If strClearType = "NEW" Then
            ' Read this spec field's disabled clear value
            strDisabledClear = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDisabledClear))
        Else ' strClearType = "IMPORT"
            ' Read this spec field's import value
            strDisabledClear = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecImportClear))
        End If
        
        If lngDataColumn > 0 Then
            If Left$(strFieldCode, 3) = "chk" Then
                ' Boolean
                mshtPartsData.Cells(lngPartRow, lngDataColumn) = strDisabledClear
            Else
                ' Not a boolean
                mshtPartsData.Cells(lngPartRow, lngDataColumn) = strDisabledClear
            End If
        End If
    Next lngFieldRow
    
    ClearPartRowFields = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ClearPartRowFields"
    ClearPartRowFields = False
    Exit Function
End Function

Function IsParentPart(ByVal lngPartRow As Long) As Boolean
' Test to see if the passed part is a Parent Part
    Dim strPartType As String
    
    On Error GoTo Err_Trap

    strPartType = ReadFieldValueString(lngPartRow, "txtDSPartType")
    If strPartType = "Parent" Then
        ' It is a parent part
        IsParentPart = True
    Else
        IsParentPart = False
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "IsParentPart: PartRow=" & lngPartRow
    IsParentPart = False
    Exit Function
End Function

Function FindContractorPartNumber(ByVal strText As String) As String
'
' strText passed in
' Return first partial match to Contractor Part Number
' or "" if no match found
'
    Dim strSearchText As String
    Dim rngMatchRange As Range
    Dim lngPartRow As Long
    Dim lngTotalRows As Long
    Dim lngFindAttempt As Long
    
    On Error GoTo Err_Trap
    
    strSearchText = UCase(LTrim(RTrim(strText)))
    
    ' Get total rows of Part Data
    lngTotalRows = mshtPartsData.UsedRange.Rows.Count
    
    ' Search column one of Part Data sheet for match
    Set rngMatchRange = mshtPartsData.UsedRange.Columns(1).Find(strSearchText)
        
    If rngMatchRange Is Nothing Then
        ' No match
        FindContractorPartNumber = ""
    Else
        ' Match found
        ' Get the found Contractor Part Number
        lngPartRow = rngMatchRange.Cells.Row
        If lngPartRow > 1 Then
            FindContractorPartNumber = UnDelimitData(mshtPartsData.UsedRange.Cells(lngPartRow, 1), "DOUBLEQUOTE")
        Else
            FindContractorPartNumber = ""
        End If
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "FindContractorPartNumber"
    FindContractorPartNumber = ""
    Exit Function
End Function

Function ComboChangeProcess(ByVal MyControl As Control)
'
' Called on event before combo is changed to save its value
' and set trigger warning message on
'
    On Error GoTo Err_Trap
    mcboSaveOldComboValue = GetComboValue(MyControl)
    mblnTriggerWarningMessage = True
    ComboChangeProcess = True
    Exit Function
Err_Trap:
    ComboChangeProcess = False
    Exit Function
End Function

Function GetComboValue(ByVal MyControl As Control) As String
'
' Get the current Combo box value, bypassing any illegal values
'
    Dim strComboValue As String
    
    On Error GoTo Err_Trap
    strComboValue = MyControl.Value
    GetComboValue = strComboValue
    Exit Function
Err_Trap:
    GetComboValue = ""
    Exit Function
End Function

Function SetUpMaterialGradeCombo(ByVal lngFieldRow As Long)
'
' Sets up the Material Grade combo box select values according to Material Type combo selected.
' lngFieldRow is the configured FieldSpec row for Material Grade
' Variations of Material Grade list occur beyond that in the sheet
' (A generic process for dependent combo boxes has not been written as only one instance of this
'  exists in the application at present.)
' On frmDSEntry, cboMaterialGrade combo list depends on cboMaterialType selected
'
    Dim lngComboColumn As Long
    Dim lngComboColumnDefault As Long
    Dim strMaterialType As String
    Dim blnFound As Boolean
    Dim lngCount As Long
    Dim strNewCombo As String
    Dim strExistingCombo As String
    
    On Error GoTo Err_Trap
    
    ' Read the FieldCombo sheet default column value for Material Grade
    lngComboColumnDefault = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecComboColumn)

    ' Read Material Type selected
    strMaterialType = frmDSEntry.cboMaterialType.Value
    ' Search the FieldCombo sheet for the correct MaterialGrade combo values
    blnFound = False
    ' Start at column beyond the Material Grade default column
    For lngComboColumn = lngComboColumnDefault + 2 To lngComboColumnDefault + 42 Step 2
        If mshtFieldCombo.UsedRange.Cells(2, lngComboColumn) = strMaterialType Then
            ' Found combo column
            blnFound = True
            Exit For
        End If
    Next lngComboColumn
    
    If Not blnFound Then
        ' Could not find a match, so set Material Grade to default column values
        lngComboColumn = lngComboColumnDefault
    End If
    
    ' What will be the first entry listed
    strNewCombo = mshtFieldCombo.UsedRange.Cells(3, lngComboColumn)
    ' What is currently the first entry in combo
    strExistingCombo = frmDSEntry.cboMaterialGrade.Column(0, 0)
    
    If strExistingCombo <> strNewCombo Then
        ' Combo needs to change
        frmDSEntry.cboMaterialGrade.Clear
        frmDSEntry.cboMaterialGrade.ColumnCount = 2
        frmDSEntry.cboMaterialGrade.BoundColumn = 1
        frmDSEntry.cboMaterialGrade.ColumnWidths = "0;10"
        For lngCount = 1 To mshtFieldCombo.UsedRange.Cells.Rows.Count
            If mshtFieldCombo.UsedRange.Cells(lngCount + 2, lngComboColumn + 1) <> "" Then
                frmDSEntry.cboMaterialGrade.AddItem
                frmDSEntry.cboMaterialGrade.Column(0, lngCount - 1) = mshtFieldCombo.UsedRange.Cells(lngCount + 2, lngComboColumn)
                frmDSEntry.cboMaterialGrade.Column(1, lngCount - 1) = mshtFieldCombo.UsedRange.Cells(lngCount + 2, lngComboColumn + 1)
            Else
                Exit For
            End If
        Next lngCount
    
        If strMaterialType = "Select" Then
            ' Material Type has not been selected - default Material Grade
            frmDSEntry.cboMaterialGrade.Value = Trim(UnDelimitData(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecEnabledClear), "DOUBLEQUOTE"))
        Else
            ' Material Type has been selected - default Material Grade according to the Material Type
            frmDSEntry.cboMaterialGrade.Value = Trim(UnDelimitData(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecEnabledClear), "DOUBLEQUOTE")) & _
                                                strMaterialType
        End If
    End If
    
    SetUpMaterialGradeCombo = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "SetUpMaterialGradeCombo"
    SetUpMaterialGradeCombo = False
    Exit Function
End Function

Sub SetShipServicesLabels()
'
' Ship Services (Auxiliary Services tab) should indicate if each service has been
' switched off as not applicable.
'
    Dim lngFieldRow As Long
    Dim strLabelCaption As String
    Dim blnchkbox As Boolean
    
    On Error GoTo Err_Trap
            
    If mlngCurrentRow > 1 Then
        ' A saved part is on display - look up its Ship Services setting and display
        
        ' Get Spec Field row of the checkbox
        lngFieldRow = FindFieldRow(gstrchkAuxServicesOne)
        ' Get checkbox label
        strLabelCaption = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecLabelCaption)
        ' Read checkbox value
        blnchkbox = ReadFieldValueBoolean(mlngCurrentRow, gstrchkAuxServicesOne)
        If blnchkbox Then
            ' Check box is checked so not applicable
            frmDSEntry.lblchkAuxServicesOne.Caption = strLabelCaption
        Else
            frmDSEntry.lblchkAuxServicesOne.Caption = ""
        End If
        
        ' Repeat for other 3 checkboxes
        
        lngFieldRow = FindFieldRow(gstrchkAuxServicesTwo)
        strLabelCaption = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecLabelCaption)
        blnchkbox = ReadFieldValueBoolean(mlngCurrentRow, gstrchkAuxServicesTwo)
        If blnchkbox Then
            frmDSEntry.lblchkAuxServicesTwo.Caption = strLabelCaption
        Else
            frmDSEntry.lblchkAuxServicesTwo.Caption = ""
        End If
        
        lngFieldRow = FindFieldRow(gstrchkAuxServicesThree)
        strLabelCaption = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecLabelCaption)
        blnchkbox = ReadFieldValueBoolean(mlngCurrentRow, gstrchkAuxServicesThree)
        If blnchkbox Then
            frmDSEntry.lblchkAuxServicesThree.Caption = strLabelCaption
        Else
            frmDSEntry.lblchkAuxServicesThree.Caption = ""
        End If
        
        lngFieldRow = FindFieldRow(gstrchkElec)
        strLabelCaption = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecLabelCaption)
        blnchkbox = ReadFieldValueBoolean(mlngCurrentRow, gstrchkElec)
        If blnchkbox Then
            frmDSEntry.lblchkElec.Caption = strLabelCaption
        Else
            frmDSEntry.lblchkElec.Caption = ""
        End If
        
    Else
        ' New part - checkboxes not yet known.
        frmDSEntry.lblchkAuxServicesOne.Caption = ""
        frmDSEntry.lblchkAuxServicesTwo.Caption = ""
        frmDSEntry.lblchkAuxServicesThree.Caption = ""
        frmDSEntry.lblchkElec.Caption = ""
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "SetShipServicesLabels"
    Exit Sub
End Sub
Attribute VB_Name = "modDSExportControl"
Option Explicit

Public Function CountECParts(ByVal strType As String) As Long
'
' Counts the number of Export-Control flagged parts of the passed Export-Control type
' ITAR, EAR 600, EAR
' If "" is passed then all Export-Control parts are counted
' If "Select" is passed then Export-Control parts where the type has not been selected
' are counted
'
    Dim lngPartRow As Long
    Dim lngCountEC As Long
    Dim strSearchType As String
    Dim strECApp As String
    Dim strECType As String
        
    CountECParts = 0
    
    On Error GoTo Err_Trap
    
    If IsNull(strType) Then
        strSearchType = ""
    Else
        strSearchType = strType
    End If
    
    lngCountEC = 0
    
    For lngPartRow = 2 To mshtPartsData.UsedRange.Cells.Rows.Count
        ' Read the Export-Control flag and type for this part
        strECApp = ReadFieldValueString(lngPartRow, gstrExportControlApp)
        If IsNull(strECApp) Then
            strECApp = ""
        End If
        strECType = ReadFieldValueString(lngPartRow, gstrExportControlType)
        If IsNull(strECType) Then
            strECType = ""
        End If
        
        If strECApp = "Yes" Then
            ' Part is flagged as Export-Control
            If strSearchType = "" Then
                ' Count all EC parts
                lngCountEC = lngCountEC + 1
            Else
                ' Count parts of the passed type only
                If strECType = strSearchType Then
                    ' Export-Control type is the required type
                    lngCountEC = lngCountEC + 1
                End If
            End If
        End If
    Next lngPartRow
    
    CountECParts = lngCountEC
    
    Exit Function

Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "CountECParts: strType=" & strType
    CountECParts = -1
    Exit Function
End Function

Public Function IsPartEC(ByVal strContractorPartNumber As String) As Boolean
'
' Locates the passed Contractor Part Number in the Part Data
' and tests its Export-Control Flag
' Returns True if Export-Control
' Otherwise False
'
    Dim lngPartRow As Long
    
    IsPartEC = False
    
    On Error GoTo Err_Trap
    
    ' Locate the Part Data row of this part
    lngPartRow = FindPartRow(strContractorPartNumber)
    ' Return indicating EC or not
    IsPartEC = IsPartRowEC(lngPartRow)
    
    Exit Function

Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "IsPartEC: strContractorPartNumber=" & strContractorPartNumber
    IsPartEC = False
    Exit Function
End Function

Public Function IsPartRowEC(ByVal lngPartRow As Long) As Boolean
'
' Tests the Export-Control Flag of the passed Part Data row
' Returns True if Export-Control
' Otherwise False
'
    Dim strECApp As String
    
    IsPartRowEC = False
    
    On Error GoTo Err_Trap
    
    ' Read Part's EC flag
    strECApp = ReadFieldValueString(lngPartRow, gstrExportControlApp)
    If Not IsNull(strECApp) And _
       strECApp = "Yes" Then
        ' This part is Export-Control
        IsPartRowEC = True
    Else
        IsPartRowEC = False
    End If
    
    Exit Function

Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "IsPartRowEC: lngPartRow=" & lngPartRow
    IsPartRowEC = False
    Exit Function
End Function

Public Function GetPartRowECType(ByVal lngPartRow As Long) As String
'
' Tests the Export-Control Flag of the passed Part Data row
' If True looks up the Export-Control type and returns it
' Otherwise returns ""
'
    Dim strECApp As String
    Dim strECType As String
    
    GetPartRowECType = ""
    
    On Error GoTo Err_Trap
    
    ' Read Part's EC flag
    strECApp = ReadFieldValueString(lngPartRow, gstrExportControlApp)
    If Not IsNull(strECApp) And _
       strECApp = "Yes" Then
        ' This part is Export-Control
        strECType = ReadFieldValueString(lngPartRow, gstrExportControlType)
        GetPartRowECType = strECType
    Else
        GetPartRowECType = ""
    End If
    
    Exit Function

Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "GetPartRowECType: lngPartRow=" & lngPartRow
    GetPartRowECType = ""
    Exit Function
End Function

Function IsFieldEC(ByVal lngPartRow As Long, _
                   ByVal lngFieldRow As Long) As Boolean
' Is passed field of passed part Export-Controlled?
'
    Dim strFieldCode As String
    Dim strECRelatedCode As String
    Dim blnECFlag As Boolean
    
    IsFieldEC = False ' Initially assume it is not Export-Controlled
        
    ' Look up the field code
    strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
    If strFieldCode = "" Then
        ' Not a recognized specification field
    Else
        ' Extract specification information on this field
        strECRelatedCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecECRelatedCode))
        
        ' Pull out field data value from the Part Data row
        If IsNull(strECRelatedCode) Or _
           strECRelatedCode = "" Or _
           Left$(strECRelatedCode, 3) = "lbl" Then
            ' No Export-Control Related Flag for this field column defined for this field code - skip
        Else
            ' Read the Part Attribute's EC Flag
            blnECFlag = ReadFieldValueBoolean(lngPartRow, strECRelatedCode)
            If blnECFlag Then
                ' Attribute is flagged as Export-Controlled
                IsFieldEC = True
            End If
        End If
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, _
           "IsFieldEC: PartRow=" & lngPartRow & " FieldRow=" & lngFieldRow
    IsFieldEC = False
    Exit Function
End Function

Public Function ClearECFlags(ByVal lngPartRow As Long) As Boolean
'
' Checks the Export-Control setting on the passed Part Row
' and clears all of its export-control flags if it is not set to Yes
'
    Dim strFieldCode As String
    Dim lngECFieldStart As Long
    Dim lngECFieldRow As Long
    Dim lngDataColumn As Long
    Dim rngMatchRange As Range
    
    ClearECFlags = False ' Initially assume failed
        
    If lngPartRow > 1 Then
        ' A part row has been passed
        If IsPartRowEC(lngPartRow) <> True Then
            ' This saved part is not an Export-Controlled part
            ' so all saved chkEC flags should be clear
            
            ' Search column one of FieldSpec sheet for first chkEC flag row
            Set rngMatchRange = mshtFieldSpec.UsedRange.Columns(1).Find("chkEC")
        
            If Not rngMatchRange Is Nothing Then
                ' Found first chkEC flag row
                lngECFieldStart = rngMatchRange.Cells.Row
                For lngECFieldRow = lngECFieldStart To lngECFieldStart + glngSpecTriggersMax
                    strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngECFieldRow, glngSpecFieldCode))
                    If strFieldCode = "" _
                    Or Left$(strFieldCode, 5) <> "chkEC" Then
                        ' Assume no more chkEC flags
                        Exit For
                    End If
                
                    lngDataColumn = mshtFieldSpec.UsedRange.Cells(lngECFieldRow, glngSpecDataColumn)
            
                    If lngDataColumn = 0 Then
                        ' No data column defined for this field code - skip
                    Else
                        ' Data column is defined - set its Boolean value to the configured disabled clear value
                        mshtPartsData.Cells(mlngCurrentRow, lngDataColumn) = mshtFieldSpec.UsedRange.Cells(lngECFieldRow, glngSpecDisabledClear)
                    End If
                Next lngECFieldRow
            End If
        End If
    End If

    ClearECFlags = True ' Success
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, _
           "ClearECFlags: PartRow=" & lngPartRow
    ClearECFlags = False
    Exit Function
End Function

Attribute VB_Name = "modDSExportToCSV"
Option Explicit

    Dim mstrLev1Key As String
    Dim mstrLev2Key As String
    Dim mstrLev3Key As String
    Dim mstrLev4Key As String
    Dim mstrLev5Key As String
    Dim mstrLev6Key As String
    Dim mstrLev7Key As String
    Dim mstrLev8Key As String
    Dim mstrLev9Key As String
    Dim mstrLev10Key As String
    Dim mstrLev11Key As String
    Dim mstrLev12Key As String
    Dim mstrLev13Key As String
    Dim mstrLev14Key As String
    Dim mstrLev15Key As String
    
Function DataExport(ByVal strExportType As String) As Boolean
'
' Allow user to select the destination folder
' Set up filepath and filename
' Call data extraction process according to the passed strExportType
'
    Dim FileSave As FileDialog
    Dim vrtSelectedItem As Variant
    Dim strContractNumber As String
    Dim strApplicationTitle As String
    Dim strFilename As String
    Dim strFilePath As String
    Dim strFilePathName As String
    Dim strExportShort As String
    Dim strExportLong As String
    Dim lngECCount As Long
    
    On Error GoTo Err_Trap
    
    ' Get background information
    strContractNumber = modDSGeneral.GetConfigurationData(glngConfigCONTRACTNUMBER)
    strApplicationTitle = modDSGeneral.GetApplicationTitle(True)
    If strExportType = "PARTDATA" Then
        strExportShort = "PartData"
        strExportLong = "Part Data"
    ElseIf strExportType = "STRUCTURE" Then
        strExportShort = "Structure"
        strExportLong = "Part Structure"
    ElseIf strExportType = "NYK" Then
        strExportShort = "NotYetKnown"
        strExportLong = "Not Yet Known Attributes"
    ElseIf strExportType = "EC" Then
        strExportShort = "Export-Controlled"
        strExportLong = "Export-Controlled Attributes"
    ElseIf strExportType = "ITAR" Then
        strExportShort = "ITAR"
        strExportLong = "ITAR"
        lngECCount = modDSExportControl.CountECParts(strExportType)
        If lngECCount <= 0 Then
            If MsgBox("There are no " & strExportLong & " Parts in the data.", _
                       vbOKOnly, _
                       strApplicationTitle) = vbOK Then
            End If
            Exit Function
        End If
    ElseIf strExportType = "EAR 600" Then
        strExportShort = "EAR 600"
        strExportLong = "EAR 600 Series"
        lngECCount = modDSExportControl.CountECParts(strExportType)
        If lngECCount <= 0 Then
            If MsgBox("There are no " & strExportLong & " Parts in the data.", _
                       vbOKOnly, _
                       strApplicationTitle) = vbOK Then
            End If
            Exit Function
        End If
    ElseIf strExportType = "EAR" Then
        strExportShort = "EAR"
        strExportLong = "EAR"
        lngECCount = modDSExportControl.CountECParts(strExportType)
        If lngECCount <= 0 Then
            If MsgBox("There are no " & strExportLong & " Parts in the data.", _
                       vbOKOnly, _
                       strApplicationTitle) = vbOK Then
            End If
            Exit Function
        End If
    End If
    
    ' Construct a unique filename
    strFilename = "iBoM" & "-" & strContractNumber & "-" & strExportShort & "-" & Format(Date, "yymmdd") & "-" & Format(Time, "hhmmss") & ".CSV"
    
    ' Allow user to locate folder for file
    Set FileSave = Application.FileDialog(msoFileDialogFolderPicker)
        
    FileSave.InitialFileName = "" 'strFileName
    FileSave.Title = strApplicationTitle & " - Export Data"
    If FileSave.Show = -1 Then
            
        With FileSave
            For Each vrtSelectedItem In .SelectedItems
                'vrtSelectedItem is a String that contains the path of each selected item.
                strFilePath = vrtSelectedItem
            Next vrtSelectedItem
        End With
            
        ' Construct file path name
        strFilePathName = strFilePath & "\" & strFilename

        If MsgBox("Are you sure you want to export " & strExportLong & " to " & strFilePathName & " ?", _
                    vbOKCancel, _
                    strApplicationTitle) = vbOK Then
            ' Export Data
            If strExportType = "PARTDATA" Then
                ExportPartDataToFile (strFilePathName)
            ElseIf strExportType = "STRUCTURE" Then
                ExportStructureToFile (strFilePathName)
            ElseIf strExportType = "NYK" Or _
                   strExportType = "EC" Then
                ExportNotYetKnownToFile (strFilePathName)
            ElseIf strExportType = "ITAR" Or _
                   strExportType = "EAR 600" Or _
                   strExportType = "EAR" Then
                If ExportECDataToFile(strFilePathName, strExportType) Then
                End If
            End If
        End If
    End If
    
    Set FileSave = Nothing
    
    DataExport = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "DataExport"
    DataExport = False
    Exit Function
End Function

Function ExportNotYetKnownToFile(ByVal strFilePathName As String) As Boolean
'
' Extract the Not Yet Known report sheet data and write to the file.
'
    Dim fs As Object
    Dim FileObject As Object
    Dim lngDataTotal As Long
    Dim lngDataRow As Long
    Dim strContractorPartNumber As String
    Dim strFieldGroup As String
    Dim strFieldLabel As String
    
    On Error GoTo Err_Trap
    
    Set fs = CreateObject("Scripting.FileSystemObject")

    Set FileObject = fs.CreateTextFile(strFilePathName, True)

    ' Get number of rows of data to be exported
    lngDataTotal = mshtNotYetKnown.UsedRange.Rows.Count

    If lngDataTotal > 0 Then
        ' Write column headers to file
        If mshtNotYetKnown.Cells(1, 1) = "Not Yet Known" Then
            ' Not Yet Known Report has an additional column for internal field code
            FileObject.writeline "Report Type,Contractor Part Number,Contractor Part Name,Field Group,Field Label,Field Code"
        Else
            FileObject.writeline "Report Type,Contractor Part Number,Contractor Part Name,Field Group,Field Label"
        End If
        
        For lngDataRow = 1 To lngDataTotal
            If mshtNotYetKnown.Cells(lngDataRow, 1) = "" Then
                ' No more data
                Exit For
            End If
            ' Write data row to file
            If mshtNotYetKnown.Cells(lngDataRow, 1) = "Not Yet Known" Then
                ' Not Yet Known Report has an additional column for internal field code
                FileObject.writeline mshtNotYetKnown.Cells(lngDataRow, 1) _
                               & "," & mshtNotYetKnown.Cells(lngDataRow, 2) _
                               & "," & mshtNotYetKnown.Cells(lngDataRow, 6) _
                               & "," & mshtNotYetKnown.Cells(lngDataRow, 4) _
                               & "," & DelimitData(mshtNotYetKnown.Cells(lngDataRow, 5), "DOUBLEQUOTE") _
                               & "," & mshtNotYetKnown.Cells(lngDataRow, 7)
            Else
                ' Export Control Report
                FileObject.writeline mshtNotYetKnown.Cells(lngDataRow, 1) _
                               & "," & mshtNotYetKnown.Cells(lngDataRow, 2) _
                               & "," & mshtNotYetKnown.Cells(lngDataRow, 6) _
                               & "," & mshtNotYetKnown.Cells(lngDataRow, 4) _
                               & "," & DelimitData(mshtNotYetKnown.Cells(lngDataRow, 5), "DOUBLEQUOTE")
            End If
        Next lngDataRow
    End If

    FileObject.Close
    
    Set fs = Nothing
    
    Set FileObject = Nothing
    
    MsgBox "File saved to " & strFilePathName, vbOKOnly, "Export"

    ExportNotYetKnownToFile = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ExportNotYetKnownToFile"
    ExportNotYetKnownToFile = False
    Exit Function
End Function

Function ExportPartDataToFile(ByVal strFilePathName As String) As Boolean
'
' Extract the Part Data, minus any ITAR or EAR600 attributes, and write to the file.
'
    Dim fs As Object
    Dim FileObject As Object
    Dim lngDataTotal As Long
    Dim lngDataRow As Long
    Dim lngFieldRow As Long
    Dim lngDataColumn As Long
    Dim strFieldCode As String
    Dim strLabelCaption As String
    Dim strRow As String
    Dim blnFieldValue As Boolean
    Dim strFieldValue As String
    Dim lngNoOfHeaderRows As Long
    Dim strPartECType As String
    Dim strContractNumber As String
    
    On Error GoTo Err_Trap
    
    ' Set to 1 to output one header row of Field Codes
    ' Set to 2 to also output a 2nd Header row containing Field Labels
    lngNoOfHeaderRows = 2
    
    Set fs = CreateObject("Scripting.FileSystemObject")

    Set FileObject = fs.CreateTextFile(strFilePathName, True)

    ' Get the Contract Number
    strContractNumber = modDSGeneral.GetConfigurationData(glngConfigCONTRACTNUMBER)
    
    ' Get number of rows of data to be exported
    lngDataTotal = mshtPartsData.UsedRange.Rows.Count

    If lngDataTotal > 1 Then
        ' Part Data is present
        
        ' Output Header row using FieldSpec information
        ' Go through FieldSpec and pull out fields which are saved, i.e. having a glngSpecDataColumn specified
        strRow = DelimitData("ContractNumber", "DOUBLEQUOTE") & "," & DelimitData("PartData", "DOUBLEQUOTE")
        For lngFieldRow = 2 To glngSpecFieldRowMax
            strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
            If strFieldCode = "" Then
                ' No more FieldSpec entries
                Exit For
            End If

            lngDataColumn = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn)
            If Left$(strFieldCode, 6) <> "txtmpg" And _
               Left$(strFieldCode, 3) <> "mpg" And _
               Left$(strFieldCode, 3) <> "fra" And _
               Left$(strFieldCode, 3) <> "lbl" And _
               Left$(strFieldCode, 3) <> "frm" And _
               Not IsNull(lngDataColumn) Then
                ' This field is a saved data field - include its header
                If strRow <> "" Then
                    strRow = strRow & ","
                End If
                strRow = strRow & DelimitData(strFieldCode, "DOUBLEQUOTE")
            End If
        Next lngFieldRow
        
        ' Write Part Data header row to file
        FileObject.writeline strRow
        
        If lngNoOfHeaderRows = 2 Then
            ' Output 2nd Header row of Field Labels using FieldSpec information
            ' Go through FieldSpec and pull out fields which are saved, i.e. having a glngSpecDataColumn specified
            strRow = DelimitData("Contract Number", "DOUBLEQUOTE") & "," & DelimitData("PartData", "DOUBLEQUOTE")
            For lngFieldRow = 2 To glngSpecFieldRowMax
                strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
                If strFieldCode = "" Then
                    ' No more FieldSpec entries
                    Exit For
                End If

                lngDataColumn = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn)
                If Left$(strFieldCode, 6) <> "txtmpg" And _
                   Left$(strFieldCode, 3) <> "mpg" And _
                   Left$(strFieldCode, 3) <> "fra" And _
                   Left$(strFieldCode, 3) <> "lbl" And _
                   Left$(strFieldCode, 3) <> "frm" And _
                   Not IsNull(lngDataColumn) Then
                    ' This field is a saved field - include its header
                    strLabelCaption = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecLabelCaption))
                    If strRow <> "" Then
                        strRow = strRow & ","
                    End If
                    strRow = strRow & DelimitData(strLabelCaption, "DOUBLEQUOTE")
                End If
            Next lngFieldRow
        
            ' Write Part Data header row to file
            FileObject.writeline strRow
        End If
        
        For lngDataRow = 2 To lngDataTotal
            ' Output each Part Data row to CSV
        
            ' Get Part Export-Control type if any
            strPartECType = GetPartRowECType(lngDataRow)
            
            ' Go through FieldSpec and pull out fields which are saved, i.e. having a glngSpecDataColumn specified
            strRow = strContractNumber
            strRow = DelimitData(strContractNumber, "DOUBLEQUOTE") & "," & DelimitData("PartData", "DOUBLEQUOTE")
            For lngFieldRow = 2 To glngSpecFieldRowMax
                strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
                If strFieldCode = "" Then
                    Exit For
                End If

               lngDataColumn = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn)
                If Left$(strFieldCode, 6) <> "txtmpg" And _
                   Left$(strFieldCode, 3) <> "mpg" And _
                   Left$(strFieldCode, 3) <> "fra" And _
                   Left$(strFieldCode, 3) <> "lbl" And _
                   Left$(strFieldCode, 3) <> "frm" And _
                   Not IsNull(lngDataColumn) Then
                    ' This field is a saved field - include its data
        
                    If strRow <> "" Then
                        strRow = strRow & ","
                    End If
                    
                    If modDSExportControl.IsFieldEC(lngDataRow, lngFieldRow) And _
                       (strPartECType = "ITAR" Or _
                        strPartECType = "EAR 600") Then
                        ' This attribute is Export-Controlled
                        ' of a type which cannot be included in this export
                        strRow = strRow & DelimitData(gstrExportECAttributeMsg, "DOUBLEQUOTE")
                    Else
                        If Left$(strFieldCode, 3) = "chk" Then
                            ' Boolean value
                            blnFieldValue = mshtPartsData.Cells(lngDataRow, lngDataColumn)
                            strRow = strRow & blnFieldValue
                        Else
                            ' Not Boolean, i.e. string
                            strFieldValue = mshtPartsData.Cells(lngDataRow, lngDataColumn)
                            strRow = strRow & strFieldValue
                        End If
                    End If
                End If
            Next lngFieldRow
        
            ' Write Part Data row to file
            FileObject.writeline strRow
        
        Next lngDataRow
        
    End If

    FileObject.Close
    
    Set fs = Nothing
    
    Set FileObject = Nothing
    
    MsgBox "File saved to " & strFilePathName, vbOKOnly, "Export"

    ExportPartDataToFile = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ExportPartDataToFile"
    ExportPartDataToFile = False
    Exit Function
End Function

Sub ExportStructureToFile(ByVal strFilename As String)
'
' Export the Parent-Child Structure sheet to CSV file
'
    Dim fs As Object
    Dim FileObject As Object
    Dim lngTotalRecs As Long
    Dim str As String
    Dim strContractNumber As String
    Dim lngRow As Long
    Dim lngLevel As Long
    Dim strQuote As String
    Dim strQuoteComma As String
    
    Dim strContractorPartNumber As String
    Dim lngPartRow As Long
    Dim lngPos As Long
    
    Dim strEC As String
    Dim strStructureComplete As String
    
    On Error GoTo Err_Trap
    
    strQuote = """"
    strQuoteComma = ""","
    
    ' Read the Contract Number
    strContractNumber = modDSGeneral.GetConfigurationData(glngConfigCONTRACTNUMBER)
    ' Read the Structure Complete Flag
    strStructureComplete = modDSGeneral.GetConfigurationData(glngConfigSTRUCTURECOMPLETE)
    
    Set fs = CreateObject("Scripting.FileSystemObject")
    Set FileObject = fs.CreateTextFile(strFilename, True)
    
    lngTotalRecs = mshtStructure.UsedRange.Rows.Count
    
    ' Compose Header row
    str = strQuote & "ContractNumber" & strQuoteComma & _
          strQuote & "Structure" & strQuoteComma & _
          strQuote & "StructureComplete" & strQuoteComma & _
          strQuote & "Level1" & strQuoteComma & _
          strQuote & "Level2" & strQuoteComma & _
          strQuote & "Level3" & strQuoteComma & _
          strQuote & "Level4" & strQuoteComma & _
          strQuote & "Level5" & strQuoteComma & _
          strQuote & "Level6" & strQuoteComma & _
          strQuote & "Level7" & strQuoteComma & _
          strQuote & "Level8" & strQuoteComma & _
          strQuote & "Level9" & strQuoteComma & _
          strQuote & "Level10" & strQuoteComma & _
          strQuote & "Level11" & strQuoteComma & _
          strQuote & "Level12" & strQuoteComma & _
          strQuote & "Level13" & strQuoteComma & _
          strQuote & "Level14" & strQuoteComma & _
          strQuote & "Level15" & strQuote

    ' Save Header row to file
    FileObject.writeline str ' Write header row to file
    
    If lngTotalRecs > 0 Then
        
        mstrLev1Key = ""
        mstrLev2Key = ""
        mstrLev3Key = ""
        mstrLev4Key = ""
        mstrLev5Key = ""
        mstrLev6Key = ""
        mstrLev7Key = ""
        mstrLev8Key = ""
        mstrLev9Key = ""
        mstrLev10Key = ""
        mstrLev11Key = ""
        mstrLev12Key = ""
        mstrLev13Key = ""
        mstrLev14Key = ""
        mstrLev15Key = ""
        
        For lngRow = 1 To lngTotalRecs
            lngLevel = 1
            If mshtStructure.UsedRange.Cells(lngRow, lngLevel) <> "" Then
                ' lngLevel Key has changed
                
                ' Extract Part Number
                strContractorPartNumber = Trim(mshtStructure.UsedRange.Cells(lngRow, lngLevel))
                lngPartRow = FindPartRow(strContractorPartNumber)
                ' Test for Export-Control
                strEC = modDSExportControl.GetPartRowECType(lngPartRow)
                If strEC <> "" Then
                    If strEC = "Select" Then
                        strEC = " ||| EC"
                    Else
                        strEC = " ||| " & strEC
                    End If
                End If
                
                mstrLev1Key = strContractorPartNumber & strEC
                ' Clear lower levels
                ClearBelow (lngLevel + 1)
            Else ' lngLevel Key has not changed
            End If
            
            lngLevel = 2
            If mshtStructure.UsedRange.Cells(lngRow, lngLevel) <> "" Then
                ' lngLevel Key has changed
                
                ' Extract Part Number
                strContractorPartNumber = Trim(mshtStructure.UsedRange.Cells(lngRow, lngLevel))
                lngPartRow = FindPartRow(strContractorPartNumber)
                ' Test for Export-Control
                strEC = modDSExportControl.GetPartRowECType(lngPartRow)
                If strEC <> "" Then
                    If strEC = "Select" Then
                        strEC = " ||| EC"
                    Else
                        strEC = " ||| " & strEC
                    End If
                End If
                
                mstrLev2Key = strContractorPartNumber & strEC
                ' Clear lower levels
                ClearBelow (lngLevel + 1)
            Else ' lngLevel Key has not changed
            End If
            
            lngLevel = 3
            If mshtStructure.UsedRange.Cells(lngRow, lngLevel) <> "" Then
                ' lngLevel Key has changed
                
                ' Extract Part Number
                strContractorPartNumber = Trim(mshtStructure.UsedRange.Cells(lngRow, lngLevel))
                lngPartRow = FindPartRow(strContractorPartNumber)
                ' Test for Export-Control
                strEC = modDSExportControl.GetPartRowECType(lngPartRow)
                If strEC <> "" Then
                    If strEC = "Select" Then
                        strEC = " ||| EC"
                    Else
                        strEC = " ||| " & strEC
                    End If
                End If
                
                mstrLev3Key = strContractorPartNumber & strEC
                ' Clear lower levels
                ClearBelow (lngLevel + 1)
            Else ' lngLevel Key has not changed
            End If
            
            lngLevel = 4
            If mshtStructure.UsedRange.Cells(lngRow, lngLevel) <> "" Then
                ' lngLevel Key has changed
                
                ' Extract Part Number
                strContractorPartNumber = Trim(mshtStructure.UsedRange.Cells(lngRow, lngLevel))
                lngPartRow = FindPartRow(strContractorPartNumber)
                ' Test for Export-Control
                strEC = modDSExportControl.GetPartRowECType(lngPartRow)
                If strEC <> "" Then
                    If strEC = "Select" Then
                        strEC = " ||| EC"
                    Else
                        strEC = " ||| " & strEC
                    End If
                End If
                
                mstrLev4Key = strContractorPartNumber & strEC
                ' Clear lower levels
                ClearBelow (lngLevel + 1)
            Else ' lngLevel Key has not changed
            End If
            
            lngLevel = 5
            If mshtStructure.UsedRange.Cells(lngRow, lngLevel) <> "" Then
                ' lngLevel Key has changed
                
                ' Extract Part Number
                strContractorPartNumber = Trim(mshtStructure.UsedRange.Cells(lngRow, lngLevel))
                lngPartRow = FindPartRow(strContractorPartNumber)
                ' Test for Export-Control
                strEC = modDSExportControl.GetPartRowECType(lngPartRow)
                If strEC <> "" Then
                    If strEC = "Select" Then
                        strEC = " ||| EC"
                    Else
                        strEC = " ||| " & strEC
                    End If
                End If
                
                mstrLev5Key = strContractorPartNumber & strEC
                ' Clear lower levels
                ClearBelow (lngLevel + 1)
            Else ' lngLevel Key has not changed
            End If
            
            lngLevel = 6
            If mshtStructure.UsedRange.Cells(lngRow, lngLevel) <> "" Then
                ' lngLevel Key has changed
                
                ' Extract Part Number
                strContractorPartNumber = Trim(mshtStructure.UsedRange.Cells(lngRow, lngLevel))
                lngPartRow = FindPartRow(strContractorPartNumber)
                ' Test for Export-Control
                strEC = modDSExportControl.GetPartRowECType(lngPartRow)
                If strEC <> "" Then
                    If strEC = "Select" Then
                        strEC = " ||| EC"
                    Else
                        strEC = " ||| " & strEC
                    End If
                End If
                
                mstrLev6Key = strContractorPartNumber & strEC
                ' Clear lower levels
                ClearBelow (lngLevel + 1)
            Else ' lngLevel Key has not changed
            End If
            
            lngLevel = 7
            If mshtStructure.UsedRange.Cells(lngRow, lngLevel) <> "" Then
                ' lngLevel Key has changed
                
                ' Extract Part Number
                strContractorPartNumber = Trim(mshtStructure.UsedRange.Cells(lngRow, lngLevel))
                lngPartRow = FindPartRow(strContractorPartNumber)
                ' Test for Export-Control
                strEC = modDSExportControl.GetPartRowECType(lngPartRow)
                If strEC <> "" Then
                    If strEC = "Select" Then
                        strEC = " ||| EC"
                    Else
                        strEC = " ||| " & strEC
                    End If
                End If
                
                mstrLev7Key = strContractorPartNumber & strEC
                ' Clear lower levels
                ClearBelow (lngLevel + 1)
            Else ' lngLevel Key has not changed
            End If
            
            lngLevel = 8
            If mshtStructure.UsedRange.Cells(lngRow, lngLevel) <> "" Then
                ' lngLevel Key has changed
                
                ' Extract Part Number
                strContractorPartNumber = Trim(mshtStructure.UsedRange.Cells(lngRow, lngLevel))
                lngPartRow = FindPartRow(strContractorPartNumber)
                ' Test for Export-Control
                strEC = modDSExportControl.GetPartRowECType(lngPartRow)
                If strEC <> "" Then
                    If strEC = "Select" Then
                        strEC = " ||| EC"
                    Else
                        strEC = " ||| " & strEC
                    End If
                End If
                
                mstrLev8Key = strContractorPartNumber & strEC
                ' Clear lower levels
                ClearBelow (lngLevel + 1)
            Else ' lngLevel Key has not changed
            End If
            
            lngLevel = 9
            If mshtStructure.UsedRange.Cells(lngRow, lngLevel) <> "" Then
                ' lngLevel Key has changed
                
                ' Extract Part Number
                strContractorPartNumber = Trim(mshtStructure.UsedRange.Cells(lngRow, lngLevel))
                lngPartRow = FindPartRow(strContractorPartNumber)
                ' Test for Export-Control
                strEC = modDSExportControl.GetPartRowECType(lngPartRow)
                If strEC <> "" Then
                    If strEC = "Select" Then
                        strEC = " ||| EC"
                    Else
                        strEC = " ||| " & strEC
                    End If
                End If
                
                mstrLev9Key = strContractorPartNumber & strEC
                ' Clear lower levels
                ClearBelow (lngLevel + 1)
            Else ' lngLevel Key has not changed
            End If
            
            lngLevel = 10
            If mshtStructure.UsedRange.Cells(lngRow, lngLevel) <> "" Then
                ' lngLevel Key has changed
                
                ' Extract Part Number
                strContractorPartNumber = Trim(mshtStructure.UsedRange.Cells(lngRow, lngLevel))
               lngPartRow = FindPartRow(strContractorPartNumber)
                ' Test for Export-Control
                strEC = modDSExportControl.GetPartRowECType(lngPartRow)
                If strEC <> "" Then
                    If strEC = "Select" Then
                        strEC = " ||| EC"
                    Else
                        strEC = " ||| " & strEC
                    End If
                End If
                
                mstrLev10Key = strContractorPartNumber & strEC
                ' Clear lower levels
                ClearBelow (lngLevel + 1)
            Else ' lngLevel Key has not changed
            End If
            
            lngLevel = 11
            If mshtStructure.UsedRange.Cells(lngRow, lngLevel) <> "" Then
                ' lngLevel Key has changed
                
                ' Extract Part Number
                strContractorPartNumber = Trim(mshtStructure.UsedRange.Cells(lngRow, lngLevel))
                lngPartRow = FindPartRow(strContractorPartNumber)
                ' Test for Export-Control
                strEC = modDSExportControl.GetPartRowECType(lngPartRow)
                If strEC <> "" Then
                    If strEC = "Select" Then
                        strEC = " ||| EC"
                    Else
                        strEC = " ||| " & strEC
                    End If
                End If
                
                mstrLev11Key = strContractorPartNumber & strEC
                ' Clear lower levels
                ClearBelow (lngLevel + 1)
            Else ' lngLevel Key has not changed
            End If
            
            lngLevel = 12
            If mshtStructure.UsedRange.Cells(lngRow, lngLevel) <> "" Then
                ' lngLevel Key has changed
                
                ' Extract Part Number
                strContractorPartNumber = Trim(mshtStructure.UsedRange.Cells(lngRow, lngLevel))
                lngPartRow = FindPartRow(strContractorPartNumber)
                ' Test for Export-Control
                strEC = modDSExportControl.GetPartRowECType(lngPartRow)
                If strEC <> "" Then
                    If strEC = "Select" Then
                        strEC = " ||| EC"
                    Else
                        strEC = " ||| " & strEC
                    End If
                End If
                
                mstrLev12Key = strContractorPartNumber & strEC
                ' Clear lower levels
                ClearBelow (lngLevel + 1)
            Else ' lngLevel Key has not changed
            End If
            
            lngLevel = 13
            If mshtStructure.UsedRange.Cells(lngRow, lngLevel) <> "" Then
                ' lngLevel Key has changed
                
                ' Extract Part Number
                strContractorPartNumber = Trim(mshtStructure.UsedRange.Cells(lngRow, lngLevel))
                lngPartRow = FindPartRow(strContractorPartNumber)
                ' Test for Export-Control
                strEC = modDSExportControl.GetPartRowECType(lngPartRow)
                If strEC <> "" Then
                    If strEC = "Select" Then
                        strEC = " ||| EC"
                    Else
                        strEC = " ||| " & strEC
                    End If
                End If
                
                mstrLev13Key = strContractorPartNumber & strEC
                ' Clear lower levels
                ClearBelow (lngLevel + 1)
            Else ' lngLevel Key has not changed
            End If
            
            lngLevel = 14
            If mshtStructure.UsedRange.Cells(lngRow, lngLevel) <> "" Then
                ' lngLevel Key has changed
                
                ' Extract Part Number
                strContractorPartNumber = Trim(mshtStructure.UsedRange.Cells(lngRow, lngLevel))
                lngPartRow = FindPartRow(strContractorPartNumber)
                ' Test for Export-Control
                strEC = modDSExportControl.GetPartRowECType(lngPartRow)
                If strEC <> "" Then
                    If strEC = "Select" Then
                        strEC = " ||| EC"
                    Else
                        strEC = " ||| " & strEC
                    End If
                End If
                
                mstrLev14Key = strContractorPartNumber & strEC
                ' Clear lower levels
                ClearBelow (lngLevel + 1)
            Else ' lngLevel Key has not changed
            End If
            
            lngLevel = 15
            If mshtStructure.UsedRange.Cells(lngRow, lngLevel) <> "" Then
                ' lngLevel Key has changed
                
                ' Extract Part Number
                strContractorPartNumber = Trim(mshtStructure.UsedRange.Cells(lngRow, lngLevel))
                lngPartRow = FindPartRow(strContractorPartNumber)
                ' Test for Export-Control
                strEC = modDSExportControl.GetPartRowECType(lngPartRow)
                If strEC <> "" Then
                    If strEC = "Select" Then
                        strEC = " ||| EC"
                    Else
                        strEC = " ||| " & strEC
                    End If
                End If
                
                mstrLev15Key = strContractorPartNumber & strEC
                ' Clear lower levels
                ClearBelow (lngLevel + 1)
            Else ' lngLevel Key has not changed
            End If
 
            str = ""
            str = str & strQuote & strContractNumber & strQuoteComma ' Contract Number and "Structure"
            str = str & strQuote & "Structure" & strQuoteComma
            str = str & strQuote & strStructureComplete & strQuoteComma
            str = str & strQuote & mstrLev1Key & strQuoteComma
            str = str & strQuote & mstrLev2Key & strQuoteComma
            str = str & strQuote & mstrLev3Key & strQuoteComma
            str = str & strQuote & mstrLev4Key & strQuoteComma
            str = str & strQuote & mstrLev5Key & strQuoteComma
            str = str & strQuote & mstrLev6Key & strQuoteComma
            str = str & strQuote & mstrLev7Key & strQuoteComma
            str = str & strQuote & mstrLev8Key & strQuoteComma
            str = str & strQuote & mstrLev9Key & strQuoteComma
            str = str & strQuote & mstrLev10Key & strQuoteComma
            str = str & strQuote & mstrLev11Key & strQuoteComma
            str = str & strQuote & mstrLev12Key & strQuoteComma
            str = str & strQuote & mstrLev13Key & strQuoteComma
            str = str & strQuote & mstrLev14Key & strQuoteComma
            str = str & strQuote & mstrLev15Key & strQuote
            
            ' Save Data row to file
            FileObject.writeline str ' Write data row to file
        
        Next lngRow
    End If
    
    FileObject.Close
    
    MsgBox "File (" & lngRow & " rows of structure) saved to " & strFilename, vbOKOnly, "Export"
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ExportStructureToFile"
    Exit Sub
End Sub

Private Sub ClearBelow(ByVal lngLevel As Long)
'
' Clear keys from passed level down
'
    On Error GoTo Err_Trap
    
    If lngLevel <= 15 Then
        mstrLev15Key = ""
    End If
    
    If lngLevel <= 14 Then
        mstrLev14Key = ""
    End If
    
    If lngLevel <= 13 Then
        mstrLev13Key = ""
    End If
    
    If lngLevel <= 12 Then
        mstrLev12Key = ""
    End If
    
    If lngLevel <= 11 Then
        mstrLev11Key = ""
    End If
    
    If lngLevel <= 10 Then
        mstrLev10Key = ""
    End If
    
    If lngLevel <= 9 Then
        mstrLev9Key = ""
    End If
    
    If lngLevel <= 8 Then
        mstrLev8Key = ""
    End If
    
    If lngLevel <= 7 Then
        mstrLev7Key = ""
    End If
    
    If lngLevel <= 6 Then
        mstrLev6Key = ""
    End If
    
    If lngLevel <= 5 Then
        mstrLev5Key = ""
    End If
    
    If lngLevel <= 4 Then
        mstrLev4Key = ""
    End If
    
    If lngLevel <= 3 Then
        mstrLev3Key = ""
    End If
    
    If lngLevel <= 2 Then
        mstrLev2Key = ""
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ClearBelow"
    Exit Sub
End Sub

Function ExportECDataToFile(ByVal strFilePathName As String, _
                            ByVal strExportType As String) As Boolean
'
' Extract the Export-Controlled attributes of Export-Controlled Parts, and write to the file.
'
    Dim fs As Object
    Dim FileObject As Object
    Dim lngDataTotal As Long
    Dim lngDataRow As Long
    Dim lngFieldRow As Long
    Dim lngDataColumn As Long
    Dim strFieldCode As String
    Dim strLabelCaption As String
    Dim strRow As String
    Dim blnFieldValue As Boolean
    Dim strFieldValue As String
    Dim lngNoOfHeaderRows As Long
    Dim strPartECType As String
    Dim strContractNumber As String
    Dim strContractorName As String
    Dim strContractorPartNumber As String
    Dim strContractorPartName As String
    Dim strBAEPartNumber As String
    Dim strOEMName As String
    Dim strOEMPartNumber As String
    Dim strOEMPartName As String
    
    On Error GoTo Err_Trap
    
    ' Set to 1 to output one header row of Field Codes
    ' Set to 2 to also output a 2nd Header row containing Field Labels
    lngNoOfHeaderRows = 2
    
    Set fs = CreateObject("Scripting.FileSystemObject")

    Set FileObject = fs.CreateTextFile(strFilePathName, True)

    ' Get the Contract Number
    strContractNumber = modDSGeneral.GetConfigurationData(glngConfigCONTRACTNUMBER)
    ' Get the Contractor Name
    strContractorName = modDSGeneral.GetConfigurationData(glngConfigCONTRACTORNAME)
    
    ' Get number of rows of data to be exported
    lngDataTotal = mshtPartsData.UsedRange.Rows.Count

    If lngDataTotal > 1 Then
        ' Part Data is present
        
        ' Output Header row using FieldSpec information
        ' Go through FieldSpec and pull out fields which are saved, i.e. having a glngSpecDataColumn specified
        strRow = DelimitData("ContractNumber", "DOUBLEQUOTE") & "," & _
                 DelimitData(strExportType, "DOUBLEQUOTE") & "," & _
                 DelimitData("ContractorName", "DOUBLEQUOTE") & "," & _
                 DelimitData("ContractorPartNumber", "DOUBLEQUOTE") & "," & _
                 DelimitData("ContractorPartName", "DOUBLEQUOTE") & "," & _
                 DelimitData("BAEPartNumber", "DOUBLEQUOTE") & "," & _
                 DelimitData("OEMName", "DOUBLEQUOTE") & "," & _
                 DelimitData("OEMPartNumber", "DOUBLEQUOTE") & "," & _
                 DelimitData("OEMPartName", "DOUBLEQUOTE")
        For lngFieldRow = 2 To glngSpecFieldRowMax
            strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
            If strFieldCode = "" Then
                ' No more FieldSpec entries
                Exit For
            End If

            lngDataColumn = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn)
            If Left$(strFieldCode, 6) <> "txtmpg" And _
               Left$(strFieldCode, 3) <> "mpg" And _
               Left$(strFieldCode, 3) <> "fra" And _
               Left$(strFieldCode, 3) <> "lbl" And _
               Left$(strFieldCode, 3) <> "frm" And _
               Not IsNull(lngDataColumn) Then
                ' This field is a saved data field - include its header
                If strRow <> "" Then
                    strRow = strRow & ","
                End If
                strRow = strRow & DelimitData(strFieldCode, "DOUBLEQUOTE")
            End If
        Next lngFieldRow
        
        ' Write Part Data header row to file
        FileObject.writeline strRow
        
        If lngNoOfHeaderRows = 2 Then
            ' Output 2nd Header row of Field Labels using FieldSpec information
            ' Go through FieldSpec and pull out fields which are saved, i.e. having a glngSpecDataColumn specified
            strRow = DelimitData("Contract Number", "DOUBLEQUOTE") & "," & _
                     DelimitData(strExportType, "DOUBLEQUOTE") & "," & _
                     DelimitData("Contractor Name", "DOUBLEQUOTE") & "," & _
                     DelimitData("Contractor Part Number", "DOUBLEQUOTE") & "," & _
                     DelimitData("Contractor Part Name", "DOUBLEQUOTE") & "," & _
                     DelimitData("BAE Part Number", "DOUBLEQUOTE") & "," & _
                     DelimitData("OEM Name", "DOUBLEQUOTE") & "," & _
                     DelimitData("OEM Part Number", "DOUBLEQUOTE") & "," & _
                     DelimitData("OEM Part Name", "DOUBLEQUOTE")
            For lngFieldRow = 2 To glngSpecFieldRowMax
                strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
                If strFieldCode = "" Then
                    ' No more FieldSpec entries
                    Exit For
                End If

                lngDataColumn = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn)
                If Left$(strFieldCode, 6) <> "txtmpg" And _
                   Left$(strFieldCode, 3) <> "mpg" And _
                   Left$(strFieldCode, 3) <> "fra" And _
                   Left$(strFieldCode, 3) <> "lbl" And _
                   Left$(strFieldCode, 3) <> "frm" And _
                   Not IsNull(lngDataColumn) Then
                    ' This field is a saved field - include its header
                    strLabelCaption = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecLabelCaption))
                    If strRow <> "" Then
                        strRow = strRow & ","
                    End If
                    strRow = strRow & DelimitData(strLabelCaption, "DOUBLEQUOTE")
                End If
            Next lngFieldRow
        
            ' Write Part Data header row to file
            FileObject.writeline strRow
        End If
        
        For lngDataRow = 2 To lngDataTotal
            ' Output each Part Data row to CSV if it is of the required Export-Control Type
        
          ' Get Part Export-Control type if any
          strPartECType = modDSExportControl.GetPartRowECType(lngDataRow)
            
          If strPartECType = strExportType Then
            ' Include this part in the export
            
            strContractorPartNumber = modDSEntry.ReadFieldValueString(lngDataRow, gstrContractorPartNumber)
            strContractorPartName = modDSEntry.ReadFieldValueString(lngDataRow, gstrContractorPartName)
            strBAEPartNumber = modDSEntry.ReadFieldValueString(lngDataRow, gstrBAEPartNumber)
            strOEMName = modDSEntry.ReadFieldValueString(lngDataRow, gstrOEMName)
            strOEMPartNumber = modDSEntry.ReadFieldValueString(lngDataRow, gstrOEMPartNumber)
            strOEMPartName = modDSEntry.ReadFieldValueString(lngDataRow, gstrOEMPartName)

            ' Go through FieldSpec and pull out fields which are saved, i.e. having a glngSpecDataColumn specified
            strRow = DelimitData(strContractNumber, "DOUBLEQUOTE") & "," & _
                     DelimitData(strExportType, "DOUBLEQUOTE") & "," & _
                     DelimitData(strContractorName, "DOUBLEQUOTE") & "," & _
                     DelimitData(strContractorPartNumber, "DOUBLEQUOTE") & "," & _
                     DelimitData(strContractorPartName, "DOUBLEQUOTE") & "," & _
                     DelimitData(strBAEPartNumber, "DOUBLEQUOTE") & "," & _
                     DelimitData(strOEMName, "DOUBLEQUOTE") & "," & _
                     DelimitData(strOEMPartNumber, "DOUBLEQUOTE") & "," & _
                     DelimitData(strOEMPartName, "DOUBLEQUOTE")
            For lngFieldRow = 2 To glngSpecFieldRowMax
                strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
                If strFieldCode = "" Then
                    Exit For
                End If

               lngDataColumn = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn)
                If Left$(strFieldCode, 6) <> "txtmpg" And _
                   Left$(strFieldCode, 3) <> "mpg" And _
                   Left$(strFieldCode, 3) <> "fra" And _
                   Left$(strFieldCode, 3) <> "lbl" And _
                   Left$(strFieldCode, 3) <> "frm" And _
                   Not IsNull(lngDataColumn) Then
                    ' This field is a saved field - include its data
        
                    If strRow <> "" Then
                        strRow = strRow & ","
                    End If
                    
                    If modDSExportControl.IsFieldEC(lngDataRow, lngFieldRow) Then
                        ' This attribute is Export-Controlled
                        ' include it in the export
                        If Left$(strFieldCode, 3) = "chk" Then
                            ' Boolean value
                            blnFieldValue = mshtPartsData.Cells(lngDataRow, lngDataColumn)
                            strRow = strRow & blnFieldValue
                        Else
                            ' Not Boolean, i.e. string
                            strFieldValue = mshtPartsData.Cells(lngDataRow, lngDataColumn)
                            strRow = strRow & strFieldValue
                        End If
                    Else
                        ' Otherwise include a blank string column
                        strRow = strRow & DelimitData("", "DOUBLEQUOTE")
                    End If
                End If
            Next lngFieldRow
        
            ' Write Part Data row to file
            FileObject.writeline strRow
          
          End If
        Next lngDataRow
        
    End If

    FileObject.Close
    
    Set fs = Nothing
    
    Set FileObject = Nothing
    
    MsgBox "File saved to " & strFilePathName, vbOKOnly, "Export"

    ExportECDataToFile = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ExportECDataToFile"
    ExportECDataToFile = False
    Exit Function
End Function


Attribute VB_Name = "modDSFormValidation"
Option Explicit

Sub ValidFieldBeforeUpdate(ByVal strDSEntryFormToValidate As String)
'
' Called on the BeforeUpdate event of any form control
' First determines which control caused the BeforeUpdate event
'
    Dim ctlControl As Control
    Dim lngFormIndex As Long

    On Error GoTo Err_Trap

    lngFormIndex = modDSEntry.GetFormIndex(strDSEntryFormToValidate) ' Get the index of the passed form
    
    If strDSEntryFormToValidate <> "frmDSEntry" Then
        ' Pop-up DS Entry Forms do not have tabs
        ' Determine which control set off the event
        If Left$(UserForms(lngFormIndex).ActiveControl.Name, 3) = "fra" Then
            ' Control is the active control within a frame
            Set ctlControl = UserForms(lngFormIndex).ActiveControl.ActiveControl
        ElseIf Left$(UserForms(lngFormIndex).ActiveControl.Name, 3) = "mpg" Then
            ' Control is the active control within a multipage
            Set ctlControl = UserForms(lngFormIndex).ActiveControl.SelectedItem.ActiveControl
            If Left$(ctlControl.Name, 3) = "mpg" Then
                Set ctlControl = ctlControl.SelectedItem.ActiveControl
            End If
        Else
            ' Control is not within any other control
            Set ctlControl = UserForms(lngFormIndex).ActiveControl
        End If
    Else
        ' Main DS Entry Form has tabs
        ' Determine which control set off the event
        If Left$(UserForms(lngFormIndex).ActiveControl.SelectedItem.ActiveControl.Name, 3) = "fra" Then
            ' Control is the active control within a frame
            Set ctlControl = UserForms(lngFormIndex).ActiveControl.SelectedItem.ActiveControl.ActiveControl
        ElseIf Left$(UserForms(lngFormIndex).ActiveControl.SelectedItem.ActiveControl.Name, 3) = "mpg" Then
            ' Control is the active control within a multipage
            Set ctlControl = UserForms(lngFormIndex).ActiveControl.SelectedItem.ActiveControl.SelectedItem.ActiveControl
            If Left$(ctlControl.Name, 3) = "mpg" Then
                Set ctlControl = ctlControl.SelectedItem.ActiveControl
            End If
        Else
            ' Control is not within any other control
            Set ctlControl = UserForms(lngFormIndex).ActiveControl.SelectedItem.ActiveControl
        End If
    End If
    
    ' Validate the field - display message - no mandatory checking
    If ValidField(ctlControl, "Yes", False) Then
    End If

    Set ctlControl = Nothing
    Exit Sub
Err_Trap:
'    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ValidFieldBeforeUpdate"
    Set ctlControl = Nothing
    Exit Sub
End Sub

Function ValidField(ByVal MyControl As Control, _
                    ByVal strShowMessage As String, _
                    ByVal blnMandatory As Boolean) As Boolean
'
' Validates the passed control field according to its data type
'
    Dim lngSpecFieldRow As Long
    Dim strEnabledClear As String
    Dim strDisabledClear As String
    Dim lngDataColumn  As Long
    Dim strDataType  As String
    Dim lngLowValue As Long
    Dim lngHighValue As Long
    Dim lngDecimalPlaces As Long
    Dim strBlankValue  As String
    Dim strRequiredColumn  As String
    Dim strDSActionEventsHold As String
    Dim blnMandatoryField As Boolean
    
    ValidField = False
    
    On Error GoTo Err_Trap

    strDSActionEventsHold = mstrDSActionEvents ' Hold on to events setting
    mstrDSActionEvents = gstrActionEventsNone ' Turn off events while validating this field
    
    ' Get the Spec Field Row if the passed form field
    lngSpecFieldRow = modDSEntry.FindFieldRow(MyControl.Name)
    If lngSpecFieldRow > 1 Then
        ' Found this form field in the specification
        ' Pull out this form field's validation information
        strEnabledClear = mshtFieldSpec.UsedRange.Cells(lngSpecFieldRow, glngSpecEnabledClear)
        strDisabledClear = mshtFieldSpec.UsedRange.Cells(lngSpecFieldRow, glngSpecDisabledClear)
        lngDataColumn = mshtFieldSpec.UsedRange.Cells(lngSpecFieldRow, glngSpecDataColumn)
        strDataType = Trim(mshtFieldSpec.UsedRange.Cells(lngSpecFieldRow, glngSpecDataType))
        lngLowValue = mshtFieldSpec.UsedRange.Cells(lngSpecFieldRow, glngSpecLowValue)
        lngHighValue = mshtFieldSpec.UsedRange.Cells(lngSpecFieldRow, glngSpecHighValue)
        lngDecimalPlaces = mshtFieldSpec.UsedRange.Cells(lngSpecFieldRow, glngSpecDecimalPlaces)
        strBlankValue = mshtFieldSpec.UsedRange.Cells(lngSpecFieldRow, glngSpecBlankValue)
        strRequiredColumn = mshtFieldSpec.UsedRange.Cells(lngSpecFieldRow, glngSpecRequiredColumn)

        blnMandatoryField = False
        If blnMandatory And _
           strRequiredColumn = "MANDATORYNOW" Then
            ' Mandatory checking must be done in addition to the validation
            ' and this is a Mandatory field
            blnMandatoryField = True
        End If
        
        ' Validate the field according to its specification data type
        If strDataType = "BAEPARTNO" Then
            ValidField = ValidBAEPartNo(MyControl, strShowMessage, blnMandatoryField)
        ElseIf strDataType = "STRINGNOSPACE" Then
            ValidField = ValidStringNoSpaceTest(MyControl, lngLowValue, lngHighValue, strShowMessage, blnMandatoryField)
        ElseIf strDataType = "STRINGVALUE" Then
            ValidField = ValidStringTest(MyControl, lngLowValue, lngHighValue, strShowMessage, blnMandatoryField)
        ElseIf strDataType = "DATEVALUE" Then
            ValidField = ValidDateTest(MyControl, strShowMessage, blnMandatoryField)
        ElseIf strDataType = "TRUEFALSE" Then
            ValidField = True
        ElseIf strDataType = "COMBOBOX" Then
            ValidField = ValidComboTest(MyControl, strBlankValue, strShowMessage, blnMandatoryField)
        ElseIf strDataType = "NUMBERGENERAL" Then
            ValidField = ValidNumberTest(MyControl, lngLowValue, lngHighValue, strShowMessage, blnMandatoryField)
        ElseIf strDataType = "NUMBERWHOLE" Then
            ValidField = ValidWholeNumberTest(MyControl, lngLowValue, lngHighValue, strShowMessage, blnMandatoryField)
        ElseIf strDataType = "NUMBERDECIMAL" Then
            ValidField = ValidDecimalTest(MyControl, lngLowValue, lngHighValue, lngDecimalPlaces, strShowMessage, blnMandatoryField)
        ElseIf strDataType = "STRINGNUMCOLONNUM" Then
            ValidField = ValidStringNumColonNum(MyControl, lngLowValue, lngHighValue, strShowMessage, blnMandatoryField)
        ElseIf strDataType = "STRINGALPHANUM" Then
            ValidField = ValidAlphaNumeric(MyControl, lngLowValue, lngHighValue, strShowMessage, blnMandatoryField)
        End If
    End If
    
    mstrDSActionEvents = strDSActionEventsHold ' Restore events setting to what it was before field validation
    Exit Function
Err_Trap:
    mstrDSActionEvents = strDSActionEventsHold ' Restore events setting to what it was before field validation
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ValidField - " & MyControl.Tag
    ValidField = False
    Exit Function
End Function

Function ValidNumberTest(ByVal MyControl As Control, _
                        ByVal lngLow As Long, _
                        ByVal lngHigh As Long, _
                        ByVal strShowMessage As String, _
                        ByVal blnMandatory As Boolean) As Boolean

    Dim strTemp As String
    Dim dblNumber As Double
    
    ValidNumberTest = False
    
    On Error GoTo Err_Trap
    
    strTemp = Trim(MyControl.Text)
    MyControl.Text = strTemp

    If strTemp = "" Then
        If blnMandatory Then
            ' blank not allowed
            MyControl.BackColor = &HFFFF&
        Else
            ' Valid - clear any left over highlight
            MyControl.BackColor = &HFFFFFF
            ValidNumberTest = True
        End If
    Else
        If Not IsNumeric(strTemp) Then
'            MyControl.SetFocus
            MyControl.BackColor = &HFFFF&
            If strShowMessage = "Yes" Then
                MsgBox "Invalid - must be numeric", vbExclamation, MyControl.Tag
            End If
        Else
            dblNumber = Val(strTemp)
            If dblNumber < lngLow Or dblNumber > lngHigh Then
'                MyControl.SetFocus
                MyControl.BackColor = &HFFFF&
                If strShowMessage = "Yes" Then
                    MsgBox "Invalid - must be within range " & lngLow & " - " & lngHigh, vbExclamation, MyControl.Tag
                End If
            Else
                MyControl.BackColor = &HFFFFFF
                ValidNumberTest = True
            End If
        End If
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ValidNumberTest - " & MyControl.Tag
    Exit Function
End Function

Function ValidWholeNumberTest(ByVal MyControl As Control, _
                                ByVal lngLow As Long, _
                                ByVal lngHigh As Long, _
                                ByVal strShowMessage As String, _
                                ByVal blnMandatory As Boolean) As Boolean

    Dim strTemp As String
    Dim strNew As String
    Dim strChar As String
    Dim lngLen As Long
    Dim lngCount As Long
    Dim dblNumber As Double
    Dim blnError As Boolean
    
    ValidWholeNumberTest = False
    
    On Error GoTo Err_Trap
    
    blnError = False
    
    ' Trim then, skipping comma characters, report error if non-digit found
    strTemp = Trim(MyControl.Text)
    lngLen = Len(strTemp)
    strNew = ""
    For lngCount = 1 To lngLen
        strChar = Mid$(strTemp, lngCount, 1)
        If strChar <> "," Then
            If strChar >= "0" And strChar <= "9" Then
                strNew = strNew & strChar
            Else
                MyControl.BackColor = &HFFFF&
                If strShowMessage = "Yes" Then
                    MsgBox "Invalid - whole number only", vbExclamation, MyControl.Tag
                End If
                strNew = strTemp
                blnError = True
                
                Exit For
            End If
        End If
    Next lngCount
    
    MyControl.Text = strNew
    
    If blnError = False Then
        If strNew = "" Then
            If blnMandatory Then
                ' blank not allowed
                MyControl.BackColor = &HFFFF&
            Else
                ' Allow blank - Valid - clear any left over highlight
                MyControl.BackColor = &HFFFFFF
                ValidWholeNumberTest = True
            End If
        Else
            dblNumber = Val(strTemp)
            If dblNumber < lngLow Or dblNumber > lngHigh Then
'               MyControl.SetFocus
                MyControl.BackColor = &HFFFF&
                If strShowMessage = "Yes" Then
                    MsgBox "Invalid - must be within range " & lngLow & " - " & lngHigh, vbExclamation, MyControl.Tag
                End If
            Else
                MyControl.BackColor = &HFFFFFF
                ValidWholeNumberTest = True
            End If
        End If
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ValidWholeNumberTest - " & MyControl.Tag
    Exit Function
End Function

Function ValidDecimalTest(ByVal MyControl As Control, _
                            ByVal lngLow As Long, _
                            ByVal lngHigh As Long, _
                            ByVal lngPlaces As Long, _
                            ByVal strShowMessage As String, _
                            ByVal blnMandatory As Boolean) As Boolean

    Dim strTemp As String
    Dim dblNumber As Double
    
    ValidDecimalTest = False
    
    On Error GoTo Err_Trap
    
    strTemp = Trim(MyControl.Text)
    MyControl.Text = strTemp

    If strTemp = "" Then
        If blnMandatory Then
            ' blank not allowed
            MyControl.BackColor = &HFFFF&
        Else
            ' Valid - clear any left over highlight
            MyControl.BackColor = &HFFFFFF
            ValidDecimalTest = True
        End If
    Else
        If Not IsNumeric(strTemp) Then
'            MyControl.SetFocus
            MyControl.BackColor = &HFFFF&
            If strShowMessage = "Yes" Then
                MsgBox "Invalid - must be numeric", vbExclamation, MyControl.Tag
            End If
        Else
            dblNumber = Val(strTemp)
            If dblNumber < lngLow Or dblNumber > lngHigh Then
'                MyControl.SetFocus
                MyControl.BackColor = &HFFFF&
                If strShowMessage = "Yes" Then
                    MsgBox "Invalid - must be within range " & lngLow & " - " & lngHigh, vbExclamation, MyControl.Tag
                End If
            Else
                dblNumber = Round(dblNumber, lngPlaces)
                MyControl.Text = CStr(dblNumber)
                MyControl.BackColor = &HFFFFFF
                ValidDecimalTest = True
            End If
        End If
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ValidDecimalTest - " & MyControl.Tag
    Exit Function
End Function

Function ValidDateTest(ByVal MyControl As Control, _
                        ByVal strShowMessage As String, _
                        ByVal blnMandatory As Boolean) As Boolean

    Dim strTemp As String
    
    ValidDateTest = False
    
    On Error GoTo Err_Trap
    
    strTemp = Trim(MyControl.Text)
    MyControl.Text = strTemp

    If strTemp = "" Then
        If blnMandatory Then
            ' blank not allowed
            MyControl.BackColor = &HFFFF&
        Else
            ' Valid - clear any left over highlight
            MyControl.BackColor = &HFFFFFF
            ValidDateTest = True
        End If
    Else
        If Not IsDate(strTemp) Then
'           MyControl.SetFocus
            MyControl.BackColor = &HFFFF&
            If strShowMessage = "Yes" Then
                MsgBox "Invalid - must be a valid date", vbExclamation, MyControl.Tag
            End If
        Else
            MyControl.Text = Format(strTemp, "dd-mmm-yyyy")
            MyControl.BackColor = &HFFFFFF
            ValidDateTest = True
        End If
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ValidDateTest - " & MyControl.Tag
    Exit Function
End Function

Function ValidStringTest(ByVal MyControl As Control, _
                            ByVal lngLow As Long, _
                            ByVal lngHigh As Long, _
                            ByVal strShowMessage As String, _
                            ByVal blnMandatory As Boolean) As Boolean

    Dim strTemp As String
    Dim lngLen As Long
    
    ValidStringTest = False
    
    On Error GoTo Err_Trap
    
    strTemp = Trim(MyControl.Text)
    
    strTemp = RemoveUnwantedChars(strTemp)
    
    MyControl.Text = strTemp
    lngLen = Len(strTemp)
    
    If lngLen <= 0 Then
        If blnMandatory Then
            ' blank not allowed
            MyControl.BackColor = &HFFFF&
        Else
            ' Valid - clear any left over highlight
            MyControl.BackColor = &HFFFFFF
            ValidStringTest = True
        End If
    ElseIf lngLen < lngLow Or lngLen > lngHigh Then
'        MyControl.SetFocus
        MyControl.BackColor = &HFFFF&
        If strShowMessage = "Yes" Then
            MsgBox "Invalid - must have between " & lngLow & " and " & lngHigh & " characters", vbExclamation, MyControl.Tag
        End If
    Else
        MyControl.BackColor = &HFFFFFF
        ValidStringTest = True
    End If

    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ValidStringTest - " & MyControl.Tag
    Exit Function
End Function

Function ValidStringNoSpaceTest(ByVal MyControl As Control, _
                                ByVal lngLow As Long, _
                                ByVal lngHigh As Long, _
                                ByVal strShowMessage As String, _
                                ByVal blnMandatory As Boolean) As Boolean
    
    Dim strTemp As String
    Dim strNew As String
    Dim strChar As String
    Dim lngLen As Long
    Dim lngCount As Long
    
    ValidStringNoSpaceTest = False
    
    On Error GoTo Err_Trap
    
    ' Trim and upper case the string and strip out white space, " and '
    strTemp = Trim(UCase(MyControl.Text))
    lngLen = Len(strTemp)
    strNew = ""
    For lngCount = 1 To lngLen
        strChar = Mid$(strTemp, lngCount, 1)
        If strChar >= Chr(33) And strChar <= Chr(126) And strChar <> Chr(34) And strChar <> Chr(39) Then
            strNew = strNew & strChar
        End If
    Next lngCount
    
    MyControl.Text = strNew
    lngLen = Len(strNew)
    
    If lngLen <= 0 Then
        If blnMandatory Then
            ' blank not allowed
            MyControl.BackColor = &HFFFF&
        Else
            ' Valid - clear any left over highlight
            MyControl.BackColor = &HFFFFFF
            ValidStringNoSpaceTest = True
        End If
    ElseIf lngLen < lngLow Or lngLen > lngHigh Then
        MyControl.BackColor = &HFFFF&
        If strShowMessage = "Yes" Then
            MsgBox "Invalid - must have between " & lngLow & " and " & lngHigh & " characters", vbExclamation, MyControl.Tag
        End If
    Else
        MyControl.BackColor = &HFFFFFF
        ValidStringNoSpaceTest = True
    End If

    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ValidStringNoSpaceTest - " & MyControl.Tag
    Exit Function
End Function

Function ValidBAEPartNo(ByVal MyControl As Control, _
                        ByVal strShowMessage As String, _
                        ByVal blnMandatory As Boolean) As Boolean
    
    Dim strTemp As String
    Dim strNew As String
    Dim strChar As String
    Dim lngLen As Long
    Dim lngCount As Long
    Dim blnValid As Boolean
    
    ValidBAEPartNo = False
    
    On Error GoTo Err_Trap
    
    ' Trim and upper case the string and strip out all except A-Z or 0-9
    strTemp = Trim(UCase(MyControl.Text))
    lngLen = Len(strTemp)
    strNew = ""
    For lngCount = 1 To lngLen
        strChar = Mid$(strTemp, lngCount, 1)
        If strChar >= Chr(65) And strChar <= Chr(90) Then
            strNew = strNew & strChar
        ElseIf strChar >= Chr(48) And strChar <= Chr(57) Then
            strNew = strNew & strChar
        End If
    Next lngCount
    
    MyControl.Text = strNew ' Replace data field with adjusted text
    
    lngLen = Len(strNew)
    
    If lngLen <= 0 Then
        If blnMandatory Then
            ' blank not allowed
            MyControl.BackColor = &HFFFF&
        Else
            ' Valid - clear any left over highlight
            MyControl.BackColor = &HFFFFFF
            ValidBAEPartNo = True
        End If
    ElseIf lngLen = 8 Then
        ' Correct length - check format
        blnValid = True
        For lngCount = 1 To 4
            strChar = Mid$(strNew, lngCount, 1)
            If strChar < "A" Or strChar > "Z" Then
                blnValid = False
                Exit For
            End If
        Next lngCount
        
        For lngCount = 5 To 8
            strChar = Mid$(strNew, lngCount, 1)
            If strChar < "0" Or strChar > "9" Then
                blnValid = False
                Exit For
            End If
        Next lngCount
    
        If blnValid = False Then
            MyControl.BackColor = &HFFFF& ' Highlight error
            If strShowMessage = "Yes" Then
                MsgBox "Invalid - must be in the format AAAANNNN", vbExclamation, MyControl.Tag
            End If
        Else
            MyControl.BackColor = &HFFFFFF ' Clear any residual highlight
            ValidBAEPartNo = True
        End If
        
    Else
        ' Incorrect length
        MyControl.BackColor = &HFFFF& ' Highlight error
        If strShowMessage = "Yes" Then
            MsgBox "Invalid - must be in the format AAAANNNN", vbExclamation, MyControl.Tag
        End If
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ValidBAEPartNo - " & MyControl.Tag
    Exit Function
End Function

Function ValidComboTest(ByVal MyControl As Control, _
                        ByVal strValue As String, _
                        ByVal strShowMessage As String, _
                        ByVal blnMandatory As Boolean) As Boolean
    
    ValidComboTest = False
    
    On Error GoTo Err_Trap
    
    If MyControl = strValue Then
        If blnMandatory Then
            ' blank not allowed
            MyControl.BackColor = &HFFFF&
            If strShowMessage = "Yes" Then
                MsgBox "Must be selected", vbExclamation, MyControl.Tag
            End If
        Else
            ' Valid - clear any left over highlight
            MyControl.BackColor = &HFFFFFF
            ValidComboTest = True
        End If
        
    Else
        ' Valid - clear any left over highlight
        MyControl.BackColor = &HFFFFFF
        ValidComboTest = True
    End If

    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ValidComboTest - " & MyControl.Tag
    Exit Function
End Function

Function ValidStringNumColonNum(ByVal MyControl As Control, _
                                ByVal lngLow As Long, _
                                ByVal lngHigh As Long, _
                                ByVal strShowMessage As String, _
                                ByVal blnMandatory As Boolean) As Boolean
'
' Checks for a string in format NN...NN:NN...NN
'
    Dim strNew As String
    Dim strChar As String
    Dim lngLen As Long
    Dim lngCount As Long
    Dim blnValid As Boolean
    Dim lngPosColon As Long
    
    ValidStringNumColonNum = False
    
    On Error GoTo Err_Trap
    
    ' Trim and upper case the string
    strNew = Trim(UCase(MyControl.Text))
    lngLen = Len(strNew)
    
    MyControl.Text = strNew ' Replace data field with adjusted text
    
    lngLen = Len(strNew)
    
    If lngLen <= 0 Then
        If blnMandatory Then
            ' blank not allowed
            MyControl.BackColor = &HFFFF&
        Else
            ' Valid - clear any left over highlight
            MyControl.BackColor = &HFFFFFF
            ValidStringNumColonNum = True
        End If
    ElseIf lngLen < lngLow Or lngLen > lngHigh Then
        MyControl.BackColor = &HFFFF&
        If strShowMessage = "Yes" Then
            MsgBox "Invalid - must have between " & lngLow & " and " & lngHigh & " characters", vbExclamation, MyControl.Tag
        End If
    Else
        ' Maximum length not exceeded - check format
        blnValid = True
        lngPosColon = InStr(1, strNew, ":")
        If lngPosColon > 0 Then
            ' Colon found
            For lngCount = 1 To lngLen
                If lngCount <> lngPosColon Then
                    strChar = Mid$(strNew, lngCount, 1)
                    If strChar < "0" Or strChar > "9" Then
                        ' Non-numeric found - invalid
                        blnValid = False
                        Exit For
                    End If
                End If
            Next lngCount
        Else
            ' Colon not found - invalid
            blnValid = False
        End If
        
        If blnValid = False Then
            MyControl.BackColor = &HFFFF& ' Highlight error
            If strShowMessage = "Yes" Then
                MsgBox "Invalid - must be in the format NN...NN:NN...NN", vbExclamation, MyControl.Tag
            End If
        Else
            MyControl.BackColor = &HFFFFFF ' Clear any residual highlight
            ValidStringNumColonNum = True
        End If
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ValidStringNumColonNum - " & MyControl.Tag
    Exit Function
End Function

Function ValidAlphaNumeric(ByVal MyControl As Control, _
                           ByVal lngLow As Long, _
                           ByVal lngHigh As Long, _
                           ByVal strShowMessage As String, _
                           ByVal blnMandatory As Boolean) As Boolean
'
' Only Alpha and numeric characters - upper-cased by routine
'
    Dim strTemp As String
    Dim strNew As String
    Dim strChar As String
    Dim lngLen As Long
    Dim lngCount As Long
    
    ValidAlphaNumeric = False
    
    On Error GoTo Err_Trap
    
    ' Trim and upper case the string and strip out all except A-Z or 0-9
    strTemp = Trim(UCase(MyControl.Text))
    lngLen = Len(strTemp)
    strNew = ""
    For lngCount = 1 To lngLen
        strChar = Mid$(strTemp, lngCount, 1)
        If strChar >= Chr(65) And strChar <= Chr(90) Then
            strNew = strNew & strChar
        ElseIf strChar >= Chr(48) And strChar <= Chr(57) Then
            strNew = strNew & strChar
        End If
    Next lngCount
    
    MyControl.Text = strNew ' Replace data field with adjusted text
    
    lngLen = Len(strNew)
    
    If lngLen <= 0 Then
        If blnMandatory Then
            ' blank not allowed
            MyControl.BackColor = &HFFFF&
        Else
            ' Valid - clear any left over highlight
            MyControl.BackColor = &HFFFFFF
            ValidAlphaNumeric = True
        End If
    ElseIf lngLen < lngLow Or lngLen > lngHigh Then
        MyControl.BackColor = &HFFFF&
        If strShowMessage = "Yes" Then
            MsgBox "Invalid - must have between " & lngLow & " and " & lngHigh & " characters", vbExclamation, MyControl.Tag
        End If
    Else
        MyControl.BackColor = &HFFFFFF
        ValidAlphaNumeric = True
    End If

    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ValidAlphaNumeric - " & MyControl.Tag
    Exit Function
End Function

Function ValidYNLinkSet(ByVal MyCombo As Control, _
                        ByVal strTrigger As String, _
                        ByVal lngLinkCount As Long, _
                        ByVal strShowMessage As String, _
                        Optional MyField1 As Control, _
                        Optional strBlank1 As String, _
                        Optional MyField2 As Control, _
                        Optional strBlank2 As String, _
                        Optional MyField3 As Control, _
                        Optional strBlank3 As String) As Boolean
'
' Validates whether or not fields linked to a Trigger Combo field have been entered or are blank
' - strTrigger should be the value of the trigger combo when the linked fields should be entered
' - each linked MyField? has strBlank? holding the value that signifies the field is blank
'
    Dim blnInvalidField1 As Boolean
    Dim blnInvalidField2 As Boolean
    Dim blnInvalidField3 As Boolean
    Dim strInvalidMsg As String
    
    ' Initialise
    ValidYNLinkSet = True
    blnInvalidField1 = False
    blnInvalidField2 = False
    blnInvalidField3 = False
    strInvalidMsg = ""
    
    On Error GoTo Err_Trap

    If MyCombo <> strTrigger Then
        ' Any linked fields should be blank
        If lngLinkCount >= 1 Then
            If MyField1 <> strBlank1 Then
                blnInvalidField1 = True
                MyField1.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField1.Tag & vbCrLf
            End If
        End If
        If lngLinkCount >= 2 Then
            If MyField2 <> strBlank2 Then
                blnInvalidField2 = True
                MyField2.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField2.Tag & vbCrLf
            End If
        End If
        If lngLinkCount >= 3 Then
            If MyField3 <> strBlank3 Then
                blnInvalidField3 = True
                MyField3.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField3.Tag & vbCrLf
            End If
        End If
        
        If blnInvalidField1 Or blnInvalidField2 Or blnInvalidField3 Then
            ' Link Set is invalid
            ValidYNLinkSet = False
            If strShowMessage = "Yes" Then
                MsgBox MyCombo.Tag + " linked fields should be blank: " & vbCrLf & strInvalidMsg, vbExclamation, MyCombo.Tag
            End If
        End If
    Else ' MyCombo = strTrigger
        ' Any linked fields must not be blank
        If lngLinkCount >= 1 Then
            If MyField1 = strBlank1 Then
                blnInvalidField1 = True
                MyField1.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField1.Tag & vbCrLf
            End If
        End If
        If lngLinkCount >= 2 Then
            If MyField2 = strBlank2 Then
                blnInvalidField2 = True
                MyField2.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField2.Tag & vbCrLf
            End If
        End If
        If lngLinkCount >= 3 Then
            If MyField3 = strBlank3 Then
                blnInvalidField3 = True
                MyField3.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField3.Tag & vbCrLf
            End If
        End If
        
        If blnInvalidField1 Or blnInvalidField2 Or blnInvalidField3 Then
            ' Link Set is invalid
            ValidYNLinkSet = False
            If strShowMessage = "Yes" Then
                MsgBox MyCombo.Tag & " linked fields must be entered: " & vbCrLf & strInvalidMsg, vbExclamation, MyCombo.Tag
            End If
        End If
    End If

    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ValidYNLinkSet - " & MyCombo.Tag
    Exit Function
End Function

Function EnableYNLinkSet(ByVal MyCombo As Control, _
                    ByVal strTrigger As String, _
                    ByVal lngLinkCount As Long, _
                    ByVal blnConfirm As Boolean, _
                    Optional MyField1 As Control, _
                    Optional MyLabel1 As Control, _
                    Optional MyLabelUnits1 As Control, _
                    Optional strDefault1 As String, _
                    Optional MyField2 As Control, _
                    Optional MyLabel2 As Control, _
                    Optional MyLabelUnits2 As Control, _
                    Optional strDefault2 As String, _
                    Optional MyField3 As Control, _
                    Optional MyLabel3 As Control, _
                    Optional MyLabelUnits3 As Control, _
                    Optional strDefault3 As String)
'
' Enables or Disables/Defaults linked fields depending on Trigger Combo field
' - strTrigger should be the value of the trigger combo when the linked fields should be enabled
' - each linked MyField? has strDefault? holding the value to set if field disabling being done
'
    Dim blnClearField1 As Boolean
    Dim blnClearField2 As Boolean
    Dim blnClearField3 As Boolean
    Dim blnContinue As Boolean
    Dim strClearMsg As String
    
    ' Initialise
    blnClearField1 = False
    blnClearField2 = False
    blnClearField3 = False
    strClearMsg = ""
    EnableYNLinkSet = True
    
    On Error GoTo Err_Trap

    If MyCombo <> strTrigger Then
        ' Linked fields should be disabled and defaulted
        If blnConfirm Then
            ' Must ask user for confirmation that fields should be cleared
            ' First determine if any fields do need to be cleared
            If lngLinkCount >= 1 Then
                If MyField1 <> strDefault1 Then
                    blnClearField1 = True
                    strClearMsg = strClearMsg & MyField1.Tag & vbCrLf
                End If
            End If
            If lngLinkCount >= 2 Then
                If MyField2 <> strDefault2 Then
                    blnClearField2 = True
                    strClearMsg = strClearMsg & MyField2.Tag & vbCrLf
                End If
            End If
            If lngLinkCount >= 3 Then
                If MyField3 <> strDefault3 Then
                    blnClearField3 = True
                    strClearMsg = strClearMsg & MyField3.Tag & vbCrLf
                End If
            End If
            ' Additional text if ITAR Item combo
            If MyCombo.Tag = "ITAR Item" Then
                    strClearMsg = strClearMsg & "ITAR Flags" & vbCrLf
            End If
        
            blnContinue = False
            If blnClearField1 Or blnClearField2 Or blnClearField3 Then
                ' Linked fields need to be defaulted
                If MsgBox(MyCombo.Tag + " linked fields will be set to default values or cleared: " & vbCrLf & strClearMsg, vbOKCancel, MyCombo.Tag) = vbOK Then
                    blnContinue = True
                End If
            Else
                blnContinue = True
            End If
        Else
            blnContinue = True
        End If
        
        If blnContinue Then
            If lngLinkCount >= 1 Then
                MyField1.Enabled = False
                MyLabel1.Enabled = False
                MyLabelUnits1.Enabled = False
                MyField1.Value = strDefault1
            End If
            If lngLinkCount >= 2 Then
                MyField2.Enabled = False
                MyLabel2.Enabled = False
                MyLabelUnits2.Enabled = False
                MyField2.Value = strDefault2
            End If
            If lngLinkCount >= 3 Then
                MyField3.Enabled = False
                MyLabel3.Enabled = False
                MyLabelUnits3.Enabled = False
                MyField3.Value = strDefault3
            End If
        Else
            EnableYNLinkSet = False ' Return false to indicate process cancelled
        End If
    Else ' MyCombo = strTrigger
        ' Linked fields should be enabled
        If lngLinkCount >= 1 Then
            MyField1.Enabled = True
            MyLabel1.Enabled = True
            MyLabelUnits1.Enabled = True
        End If
        If lngLinkCount >= 2 Then
            MyField2.Enabled = True
            MyLabel2.Enabled = True
            MyLabelUnits2.Enabled = True
        End If
        If lngLinkCount >= 3 Then
            MyField3.Enabled = True
            MyLabel3.Enabled = True
            MyLabelUnits3.Enabled = True
        End If
    End If

    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "EnableYNLinkSet - " & MyCombo.Tag
    Exit Function
End Function

Function ValidGenLinkSet(ByVal MyCombo As Control, _
                        ByVal strNotSelected As String, _
                        ByVal lngLinkCount As Long, _
                        ByVal strShowMessage As String, _
                        Optional MyField1 As Control, _
                        Optional strBlank1 As String, _
                        Optional MyField2 As Control, _
                        Optional strBlank2 As String, _
                        Optional MyField3 As Control, _
                        Optional strBlank3 As String, _
                        Optional MyField4 As Control, _
                        Optional strBlank4 As String) As Boolean
'
' Validates whether or not fields linked to a Trigger Combo field have been entered or are blank
' - if trigger combo has any value other than strNotSelected the linked fields should be entered
' - each linked MyField? has strBlank? holding the value that signifies the field is blank
'
    Dim blnInvalidField1 As Boolean
    Dim blnInvalidField2 As Boolean
    Dim blnInvalidField3 As Boolean
    Dim blnInvalidField4 As Boolean
    Dim strInvalidMsg As String
    
    ' Initialise
    ValidGenLinkSet = True
    blnInvalidField1 = False
    blnInvalidField2 = False
    blnInvalidField3 = False
    blnInvalidField4 = False
    strInvalidMsg = ""
    
    On Error GoTo Err_Trap

    If MyCombo = strNotSelected Then
        ' Any linked fields should be blank
        If lngLinkCount >= 1 Then
            If MyField1 <> strBlank1 Then
                blnInvalidField1 = True
                MyField1.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField1.Tag & vbCrLf
            End If
        End If
        If lngLinkCount >= 2 Then
            If MyField2 <> strBlank2 Then
                blnInvalidField2 = True
                MyField2.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField2.Tag & vbCrLf
            End If
        End If
        If lngLinkCount >= 3 Then
            If MyField3 <> strBlank3 Then
                blnInvalidField3 = True
                MyField3.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField3.Tag & vbCrLf
            End If
        End If
        If lngLinkCount >= 4 Then
            If MyField4 <> strBlank4 Then
                blnInvalidField4 = True
                MyField4.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField4.Tag & vbCrLf
            End If
        End If
        
        If blnInvalidField1 Or blnInvalidField2 Or blnInvalidField3 Or blnInvalidField4 Then
            ' Link Set is invalid
            ValidGenLinkSet = False
            If strShowMessage = "Yes" Then
                MsgBox MyCombo.Tag + " linked fields should be blank: " & vbCrLf & strInvalidMsg, vbExclamation, MyCombo.Tag
            End If
        End If
    Else ' MyCombo <> strNotSelected (i.e. has been selected)
        ' Any linked fields must not be blank
        If lngLinkCount >= 1 Then
            If MyField1 = strBlank1 Then
                blnInvalidField1 = True
                MyField1.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField1.Tag & vbCrLf
            End If
        End If
        If lngLinkCount >= 2 Then
            If MyField2 = strBlank2 Then
                blnInvalidField2 = True
                MyField2.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField2.Tag & vbCrLf
            End If
        End If
        If lngLinkCount >= 3 Then
            If MyField3 = strBlank3 Then
                blnInvalidField3 = True
                MyField3.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField3.Tag & vbCrLf
            End If
        End If
        If lngLinkCount >= 4 Then
            If MyField4 = strBlank4 Then
                blnInvalidField4 = True
                MyField4.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField4.Tag & vbCrLf
            End If
        End If
        
        If blnInvalidField1 Or blnInvalidField2 Or blnInvalidField3 Or blnInvalidField4 Then
            ' Link Set is invalid
            ValidGenLinkSet = False
            If strShowMessage = "Yes" Then
                MsgBox MyCombo.Tag & " linked fields must be entered: " & vbCrLf & strInvalidMsg, vbExclamation, MyCombo.Tag
            End If
        End If
    End If

    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ValidGenLinkSet - " & MyCombo.Tag
    Exit Function
End Function

Function EnableGenLinkSet(ByVal MyCombo As Control, _
                    ByVal strNotSelected As String, _
                    ByVal lngLinkCount As Long, _
                    ByVal blnConfirm As Boolean, _
                    Optional MyField1 As Control, _
                    Optional MyLabel1 As Control, _
                    Optional MyLabelUnits1 As Control, _
                    Optional strDefault1 As String, _
                    Optional MyField2 As Control, _
                    Optional MyLabel2 As Control, _
                    Optional MyLabelUnits2 As Control, _
                    Optional strDefault2 As String, _
                    Optional MyField3 As Control, _
                    Optional MyLabel3 As Control, _
                    Optional MyLabelUnits3 As Control, _
                    Optional strDefault3 As String, _
                    Optional MyField4 As Control, _
                    Optional MyLabel4 As Control, _
                    Optional MyLabelUnits4 As Control, _
                    Optional strDefault4 As String)
'
' Enables or Disables/Defaults linked fields depending on Trigger Combo field
' - if the trigger Combo has value other than strNotSelected then the linked fields should be enabled
' - each linked MyField? has strDefault? holding the value to set if field disabling being done
'
    Dim blnClearField1 As Boolean
    Dim blnClearField2 As Boolean
    Dim blnClearField3 As Boolean
    Dim blnClearField4 As Boolean
    Dim blnContinue As Boolean
    Dim strClearMsg As String
    
    ' Initialise
    blnClearField1 = False
    blnClearField2 = False
    blnClearField3 = False
    blnClearField4 = False
    strClearMsg = ""
    EnableGenLinkSet = True
    
    On Error GoTo Err_Trap

    If MyCombo = strNotSelected Then
        ' Linked fields should be disabled and defaulted
        If blnConfirm Then
            ' Must ask user for confirmation that fields should be cleared
            ' First determine if any fields do need to be cleared
            If lngLinkCount >= 1 Then
                If MyField1 <> strDefault1 Then
                    blnClearField1 = True
                    strClearMsg = strClearMsg & MyField1.Tag & vbCrLf
                End If
            End If
            If lngLinkCount >= 2 Then
                If MyField2 <> strDefault2 Then
                    blnClearField2 = True
                    strClearMsg = strClearMsg & MyField2.Tag & vbCrLf
                End If
            End If
            If lngLinkCount >= 3 Then
                If MyField3 <> strDefault3 Then
                    blnClearField3 = True
                    strClearMsg = strClearMsg & MyField3.Tag & vbCrLf
                End If
            End If
            If lngLinkCount >= 4 Then
                If MyField4 <> strDefault4 Then
                    blnClearField4 = True
                    strClearMsg = strClearMsg & MyField4.Tag & vbCrLf
                End If
            End If
        
            blnContinue = False
            If blnClearField1 Or blnClearField2 Or blnClearField3 Or blnClearField4 Then
                ' Linked fields need to be defaulted
                If MsgBox(MyCombo.Tag + " linked fields will be set to default values or cleared: " & vbCrLf & strClearMsg, vbOKCancel, MyCombo.Tag) = vbOK Then
                    blnContinue = True
                End If
            Else
                blnContinue = True
            End If
        Else
            blnContinue = True
        End If
        
        If blnContinue Then
            If lngLinkCount >= 1 Then
                MyField1.Enabled = False
                MyLabel1.Enabled = False
                MyLabelUnits1.Enabled = False
                MyField1.Value = strDefault1
            End If
            If lngLinkCount >= 2 Then
                MyField2.Enabled = False
                MyLabel2.Enabled = False
                MyLabelUnits2.Enabled = False
                MyField2.Value = strDefault2
            End If
            If lngLinkCount >= 3 Then
                MyField3.Enabled = False
                MyLabel3.Enabled = False
                MyLabelUnits3.Enabled = False
                MyField3.Value = strDefault3
            End If
            If lngLinkCount >= 4 Then
                MyField4.Enabled = False
                MyLabel4.Enabled = False
                MyLabelUnits4.Enabled = False
                MyField4.Value = strDefault4
            End If
        Else
            EnableGenLinkSet = False ' Return false to indicate process cancelled
        End If
    Else ' MyCombo <> strNotSelected i.e has been selected
        ' Linked fields should be enabled
        If lngLinkCount >= 1 Then
            MyField1.Enabled = True
            MyLabel1.Enabled = True
            MyLabelUnits1.Enabled = True
        End If
        If lngLinkCount >= 2 Then
            MyField2.Enabled = True
            MyLabel2.Enabled = True
            MyLabelUnits2.Enabled = True
        End If
        If lngLinkCount >= 3 Then
            MyField3.Enabled = True
            MyLabel3.Enabled = True
            MyLabelUnits3.Enabled = True
        End If
        If lngLinkCount >= 4 Then
            MyField4.Enabled = True
            MyLabel4.Enabled = True
            MyLabelUnits4.Enabled = True
        End If
    End If

    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "EnableGenLinkSet - " & MyCombo.Tag
    Exit Function
End Function

Function ResetCombo(ByVal MyCombo As Control, ByVal myValue As String)
' Resets the combo field to the passed value
    On Error GoTo Err_Trap
    
'    mstrDS1Action = gstrActionFormLoad
    MyCombo.Value = myValue
'    mstrDS1Action = gstrActionNone
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ResetCombo"
End Function

Function ValidGroup(ByVal lngGroupCount As Long, _
                    ByVal strShowMessage As String, _
                    Optional MyField1 As Control, _
                    Optional strBlank1 As String, _
                    Optional MyField2 As Control, _
                    Optional strBlank2 As String, _
                    Optional MyField3 As Control, _
                    Optional strBlank3 As String, _
                    Optional MyField4 As Control, _
                    Optional strBlank4 As String) As Boolean
'
' Validates the group of fields - if at least one entered then all must be entered
' - each linked MyField? has strBlank? holding the value that signifies the field is blank
'
    Dim blnInvalidField1 As Boolean
    Dim blnInvalidField2 As Boolean
    Dim blnInvalidField3 As Boolean
    Dim blnInvalidField4 As Boolean
    Dim strInvalidMsg As String
    Dim blnOneNotBlank As Boolean
    
    ' Initialise
    ValidGroup = True
    blnInvalidField1 = False
    blnInvalidField2 = False
    blnInvalidField3 = False
    blnInvalidField4 = False
    strInvalidMsg = ""
    
    On Error GoTo Err_Trap

    blnOneNotBlank = False
    If lngGroupCount >= 1 Then
        If MyField1 <> strBlank1 Then
            blnOneNotBlank = True
        End If
    End If
    If lngGroupCount >= 2 Then
        If MyField2 <> strBlank2 Then
            blnOneNotBlank = True
        End If
    End If
    If lngGroupCount >= 3 Then
        If MyField3 <> strBlank3 Then
            blnOneNotBlank = True
        End If
    End If
    If lngGroupCount >= 4 Then
        If MyField4 <> strBlank4 Then
            blnOneNotBlank = True
        End If
    End If

    If blnOneNotBlank = True Then
        
        If lngGroupCount >= 1 Then
            If MyField1 = strBlank1 Then
                ' Field is required
                MyField1.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField1.Tag + " - required " & vbCrLf
            End If
        End If
        If lngGroupCount >= 2 Then
            If MyField2 = strBlank2 Then
                ' Field is required
                MyField2.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField2.Tag + " - required " & vbCrLf
            End If
        End If
        If lngGroupCount >= 3 Then
            If MyField3 = strBlank3 Then
                ' Field is required
                MyField3.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField3.Tag + " - required " & vbCrLf
            End If
        End If
        If lngGroupCount >= 4 Then
            If MyField4 = strBlank4 Then
                ' Field is required
                MyField4.BackColor = &HFFFF&
                strInvalidMsg = strInvalidMsg & MyField4.Tag + " - required " & vbCrLf
            End If
        End If

        If strInvalidMsg <> "" Then
            ' Group is invalid
            ValidGroup = False
            If strShowMessage = "Yes" Then
                MsgBox "Missing linked fields: " & vbCrLf & strInvalidMsg, vbExclamation, MyField1.Tag
            End If
        End If
    End If

    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ValidGroup" & " - " & MyField1.Tag
    Exit Function
End Function

Function RemoveUnwantedChars(ByVal strValueIn As String) As String

    Dim strValueOut As String
    
    RemoveUnwantedChars = strValueIn
    
    On Error GoTo Err_Trap
    
    strValueOut = Replace(strValueIn, """", "'")

    RemoveUnwantedChars = strValueOut
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "RemoveUnwantedChars"
    Exit Function
End Function

Sub ClearDSHighlights(ByVal strDSEntryFormToClear As String)
'
' Clears any highlights placed on the passed DS Entry Form
'
    Dim lngFormIndex As Long
    Dim lngCount As Long
    Dim lngNext As Long
    Dim strChars As String
    Dim MyControl As Control
    
    On Error GoTo Err_Trap
    
    lngFormIndex = GetFormIndex(strDSEntryFormToClear) ' Get the index of the passed form
    
    ' Count the controls on this form
    lngCount = UserForms(lngFormIndex).Controls.Count
    
    For lngNext = 0 To lngCount - 1
        Set MyControl = UserForms(lngFormIndex).Controls(lngNext)
        strChars = Left$(MyControl.Name, 3)
        If strChars = "txt" Then
            ' Restore background colour to un-highlighted
            MyControl.BackColor = &H80000005
        ElseIf strChars = "cbo" Then
            ' Restore background colour to un-highlighted
            MyControl.BackColor = &H80000005
        End If
    Next lngNext

    Exit Sub
    
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ClearDSHighlights"
End Sub

Function ValidForm(ByVal strDSEntryFormToValidate As String) As String
'
' Go through each FieldSpec field row, of the passed DS Entry Form, and validate
'
    Dim strFieldCode As String
    Dim strDSEntryForm As String
    Dim lngFormIndex As Long
    Dim strLabelCaption As String
    Dim strFieldGroup As String
    Dim strFieldSubGroup As String
    Dim strDataType As String
    Dim lngDataColumn As Long
    Dim lngFieldRow As Long
    Dim strMessage As String
    Dim intIndex As Integer
    Dim intGroupMax As Integer
    Dim blnFieldGroupFound As Boolean
    Dim strUnknownGroupMessage As String
    Dim arrFieldGroups(1 To glngSpecFieldRowMax) As String
    Dim arrFieldGroupsMessage(1 To glngSpecFieldRowMax, 1 To 2) As String
    
    On Error GoTo Err_Trap
    
    lngFormIndex = modDSEntry.GetFormIndex(strDSEntryFormToValidate) ' Get the index of the passed form
    
    ' First determine how many field groups there are.
    ' Loop through the PAGE, PAGE+FOCUS, FRAME field spec entries as these are describing
    ' a field group
    intIndex = 0
    For lngFieldRow = 2 To glngSpecFieldRowMax
        strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
        If strFieldCode = "" Then
            ' Stop at end of field specification, signified by blank
            Exit For
        End If
        
'        ' Read this field code's DS Entry Form
'        strDSEntryForm = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDSEntryForm))
'
'        If strDSEntryForm = strDSEntryFormToValidate Then
'            ' Only fields on the passed Form
            
            strDataType = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataType))
            If Left$(strDataType, 5) = "GROUP" Then
                ' This entry is describing a group
                intIndex = intIndex + 1
                arrFieldGroups(intIndex) = strFieldCode
                arrFieldGroupsMessage(intIndex, 1) = "*** " & Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecControlTipText)) & " ***"
            End If
'        End If
    Next lngFieldRow
    intGroupMax = intIndex ' Maximum group entry
    
    ' Loop through all fields
    For lngFieldRow = 2 To glngSpecFieldRowMax
        strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
        If strFieldCode = "" Then
            ' Stop at end of field specification, signified by blank
            Exit For
        End If
        
        ' Read this field code's DS Entry Form
        strDSEntryForm = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDSEntryForm))
        
        If strDSEntryForm = strDSEntryFormToValidate Then
            ' Only fields on the passed Form
            
            ' Extract specification information on this field
            strLabelCaption = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecLabelCaption))
            lngDataColumn = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn)
            strDataType = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataType))
            strFieldGroup = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldGroup))
        
            If IsNull(lngDataColumn) Or _
               lngDataColumn <= 0 Or _
               IsNull(strDataType) Or _
               strDataType = "" Then
                ' Not a data field or not to be validated (blank DATA TYPE) - skip
            Else
                If Not modDSFormValidation.ValidField(UserForms(lngFormIndex).Controls(strFieldCode), "No", True) Then
                    ' Field is invalid
                    blnFieldGroupFound = False
                    For intIndex = 1 To intGroupMax
                        ' Add this field to the invalid message for its field group
                        If arrFieldGroups(intIndex) = strFieldGroup Then
                            arrFieldGroupsMessage(intIndex, 2) = arrFieldGroupsMessage(intIndex, 2) & strLabelCaption & vbCrLf
                            blnFieldGroupFound = True
                            Exit For
                        End If
                    Next intIndex
                    If Not blnFieldGroupFound Then
                        ' Field Group could not be found - so add to unknown group message
                        strUnknownGroupMessage = strUnknownGroupMessage & strLabelCaption & vbCrLf
                    End If
                End If
            End If
    
        End If
    Next lngFieldRow
             
    ' Form one invalid message out of the field group invalid messages
    For intIndex = 1 To glngSpecFieldRowMax
        If Not IsNull(arrFieldGroupsMessage(intIndex, 2)) And _
           arrFieldGroupsMessage(intIndex, 2) <> "" Then
            strMessage = strMessage & vbCrLf & arrFieldGroupsMessage(intIndex, 1) & vbCrLf & arrFieldGroupsMessage(intIndex, 2)
        End If
    Next intIndex
    ' Add on the unknown group invalid message if it exists
    If Not IsNull(strUnknownGroupMessage) And _
       strUnknownGroupMessage <> "" Then
        strMessage = strMessage & vbCrLf & "*** Unknown Group: " & strUnknownGroupMessage & " ***"
    End If
    
    ValidForm = strMessage
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ValidForm - " & strFieldCode
    ValidForm = "Validation has encountered an error"
    Exit Function
End Function

Attribute VB_Name = "modDSGeneral"
Option Explicit

Function GetConfigurationData(ByVal lngConfigRowNumber As Long) As String

    On Error GoTo Err_Trap
    
    GetConfigurationData = ""
    
    Set mshtConfiguration = ThisWorkbook.Sheets("Configuration")

    GetConfigurationData = mshtConfiguration.Cells(lngConfigRowNumber, "B")
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSGeneral.GetConfigurationData"
    Exit Function
End Function

Function SetConfigurationData(ByVal lngConfigRowNumber As Long, _
                              ByVal strConfigData As String) As Boolean

    On Error GoTo Err_Trap
    
    SetConfigurationData = False
    
    Set mshtConfiguration = ThisWorkbook.Sheets("Configuration")

    mshtConfiguration.Cells(lngConfigRowNumber, "B") = strConfigData
    
    SetConfigurationData = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSGeneral.SetConfigurationData"
    SetConfigurationData = False
    Exit Function
End Function

Function GetAppInfo() As String
    GetAppInfo = ThisWorkbook.FullName
    Exit Function
End Function

Function GetApplicationTitle(ByVal blnFull As Boolean) As String

    Dim strName As String
    
    On Error GoTo Err_GetApplicationTitle
    
    GetApplicationTitle = ""
    
    Set mshtConfiguration = ThisWorkbook.Sheets("Configuration")

    If blnFull Then
        strName = mshtConfiguration.Cells(glngConfigAPPNAMEFULL, "B") & " " & mshtConfiguration.Cells(glngConfigAPPVERSION, "B")
    Else
        strName = mshtConfiguration.Cells(glngConfigAPPNAMESHORT, "B")
    End If
    
    GetApplicationTitle = strName
    
    Exit Function
Err_GetApplicationTitle:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSGeneral.GetApplicationTitle"
    Exit Function
End Function

Function DelimitData(ByVal strData As String, ByVal strDelimiter As String) As String
'
' Adds the passed delimiter to each end of the passed data field
'
    Dim strDataDelimited As String
    Dim strDataIn As String
    
    On Error GoTo Err_DelimitData
    
    DelimitData = ""
    
    strDataIn = strData
    If IsNull(strDataIn) Then
        strDataIn = ""
    Else
        ' First strip the passed string of the delimiter character
        ' as it must not occur in the string itself
        strDataIn = StripCharacter(strDataIn, strDelimiter)
    End If
    
    If strDelimiter = "DOUBLEQUOTE" Then
        strDataDelimited = """" & strDataIn & """"
    Else
        strDataDelimited = strDelimiter & strDataIn & strDelimiter
    End If
    
    DelimitData = strDataDelimited
    
    Exit Function
Err_DelimitData:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSGeneral.DelimitData"
    Exit Function
End Function

Function UnDelimitData(ByVal strData As String, ByVal strDelimiter As String) As String
'
' Strips the passed delimiter from each end of the passed data field
'
    Dim strDataUnDelimited As String
    Dim strDelimTemp As String
    Dim lngDelimLen As Long
    Dim lngDataLen As Long
    Dim strDataIn As String
    
    On Error GoTo Err_UnDelimitData
    
    UnDelimitData = ""
    
    strDataIn = strData
    If IsNull(strDataIn) Then
        strDataIn = ""
    End If
    
    lngDataLen = Len(strDataIn) ' Length of the data field
    
    If lngDataLen > 0 Then
        ' Get length of the delimiter
        If strDelimiter = "DOUBLEQUOTE" Then
            strDelimTemp = """" ' double quote is delimiter
        Else
            strDelimTemp = strDelimiter ' passed delimiter
        End If
        lngDelimLen = Len(strDelimTemp)
        
        strDataUnDelimited = strDataIn ' passed data field
    
        If Left(strDataUnDelimited, lngDelimLen) = strDelimTemp Then
            ' Strip left delimiter from data field
            strDataUnDelimited = Mid(strDataIn, lngDelimLen + 1)
        End If
        
        lngDataLen = Len(strDataUnDelimited) ' Length of the data field
        
        If Right(strDataIn, lngDelimLen) = strDelimTemp Then
            ' Strip right delimiter from data field
            strDataUnDelimited = Mid(strDataUnDelimited, 1, lngDataLen - lngDelimLen)
        End If
        
        UnDelimitData = strDataUnDelimited
    Else
        UnDelimitData = strDataIn
    End If
    
    Exit Function
Err_UnDelimitData:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSGeneral.UnDelimitData"
    Exit Function
End Function

Function StripCharacter(ByVal strData As String, _
                        ByVal strCharacter As String) As String
' Strip any occurrence of the passed strCharacter from string strData
'
    Dim strTemp As String
    Dim strNew As String
    Dim strChar As String
    Dim lngCount As Long
    Dim lngLen As Long
    
    On Error GoTo Err_Trap
    
    strTemp = Trim(strData)
    lngLen = Len(strTemp)
    strNew = ""
    For lngCount = 1 To lngLen
        strChar = Mid$(strTemp, lngCount, 1)
        If strChar <> strCharacter Then
            strNew = strNew & strChar
        End If
    Next lngCount
    
    StripCharacter = strNew
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSGeneral.StripCharacter: " & strCharacter & " from " & strData
    StripCharacter = ""
    Exit Function
End Function

Attribute VB_Name = "modDSMain"
Option Explicit

Sub MainECShowHide()
'
' Export-Control information to be displayed if EC Parts present
'
    Dim lngITARCount As Long
    Dim lngEARCount As Long
    Dim lngEAR600Count As Long
    Dim lngOtherCount As Long
    
    lngITARCount = modDSExportControl.CountECParts("ITAR")
    lngEARCount = modDSExportControl.CountECParts("EAR")
    lngEAR600Count = modDSExportControl.CountECParts("EAR 600")
    lngOtherCount = modDSExportControl.CountECParts("Select")
    
    frmMain.lblECITAR.Visible = False
    frmMain.lblECEAR.Visible = False
    frmMain.lblECEAR600.Visible = False
    frmMain.lblECOther.Visible = False
    
    If lngITARCount > 0 Then
        frmMain.lblECITAR.Caption = "ITAR - " & lngITARCount & " Part(s)"
        frmMain.lblECITAR.Visible = True
    End If
    If lngEARCount > 0 Then
        frmMain.lblECEAR.Caption = "EAR - " & lngEARCount & " Part(s)"
        frmMain.lblECEAR.Visible = True
    End If
    If lngEAR600Count > 0 Then
        frmMain.lblECEAR600.Caption = "EAR 600 - " & lngEAR600Count & " Part(s)"
        frmMain.lblECEAR600.Visible = True
    End If
    If lngOtherCount > 0 Then
        frmMain.lblECOther.Caption = "Other EC - " & lngOtherCount & " Part(s)"
        frmMain.lblECOther.Visible = True
    End If
End Sub

Sub InitializeVariables()

    On Error GoTo Err_Trap
    
    ' Initialize data sheet variables
    Set mshtPartsData = ThisWorkbook.Sheets("PartsData")
    Set mshtConfiguration = ThisWorkbook.Sheets("Configuration")
    Set mshtFieldSpec = ThisWorkbook.Sheets("FieldSpec")
    Set mshtFieldTriggers = ThisWorkbook.Sheets("FieldTriggers")
    Set mshtFieldCombo = ThisWorkbook.Sheets("FieldCombo")
    Set mshtContractorImport = ThisWorkbook.Sheets("ContractorImport")
    Set mshtContractorImpExcept = ThisWorkbook.Sheets("ContractorImpExcept")
    Set mshtStructure = ThisWorkbook.Sheets("Structure")
    Set mshtStructBackup = ThisWorkbook.Sheets("StructBackup")
    Set mshtNotYetKnown = ThisWorkbook.Sheets("NotYetKnown")
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "InitializeVariables"
    Exit Sub
End Sub

Sub DisplayStructureCompleteLabel()
' Display the Structure Complete label according to Complete or not
    Dim strStructureComplete As String
    
    On Error GoTo Err_Trap
    
    ' Read current flag setting
    strStructureComplete = mshtConfiguration.Cells(glngConfigSTRUCTURECOMPLETE, 2)
    If strStructureComplete = "COMPLETE" Then
        ' Structure currently marked complete
        frmMain.lblStructureCompleteFlag.Visible = True
    Else
        ' Structure not currently marked complete
        frmMain.lblStructureCompleteFlag.Visible = False
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSMain.DisplayStructureCompleteLabel"
    Exit Sub
End Sub


Attribute VB_Name = "modDSNotYetKnown"
Option Explicit
'
' Determination of Not Yet Known is similar to determination of Export-Control Flagged Attributes
' Therefore this module, despite its name, is used to determine both types of attribute.
' Functions are called with a flag to identify the report type required.
'

Dim mlngNYKReportRow As Long

Function checkPartNotYetKnown(ByVal lngPartRow As Long, _
                              ByVal blnDisplayFlag As Boolean, _
                              ByVal strReportType As String) As Boolean
'
' Go through FieldSpec field row for the passed Part Data row to determine
' which fields are classified as Not Yet Known.
' Goes through Parts in saved order which is alphabetical
' Within each part groups fields in their field groups
'
    Dim strContractorPartNumber As String
    Dim strContractorPartName As String
    Dim strFieldCode As String
    Dim lngFieldRow As Long
    Dim intIndex As Integer
    Dim intGroupMax As Integer
    Dim arrFieldGroups(1 To glngSpecFieldRowMax, 1 To 3) As String
    Dim strLabelCaption As String
    Dim strDataType As String
    Dim strFieldGroup As String
    Dim strFieldGroupTitle As String
    Dim strFieldGroupSortString As String
    Dim strECType As String
    
    On Error GoTo Err_Trap
    
    strContractorPartNumber = ReadFieldValueString(lngPartRow, gstrContractorPartNumber)
    strContractorPartName = ReadFieldValueString(lngPartRow, gstrContractorPartName)
    
    If strReportType = "EC" Then
        strECType = modDSExportControl.GetPartRowECType(lngPartRow)
        If strECType = "Select" Then
            strECType = "Type Unknown"
        End If
    End If
    
    ' Determine how many field groups there are.
    ' Loop through the PAGE, PAGE+FOCUS, FRAME field spec entries as these are describing
    ' a field group
    intIndex = 0
    For lngFieldRow = 2 To glngSpecFieldRowMax
        strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
        If strFieldCode = "" Then
            ' Stop at end of field specification, signified by blank
            Exit For
        End If
        ' Read data type
        strDataType = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataType))
        If Left$(strDataType, 5) = "GROUP" Then
            ' This entry is describing a group
            intIndex = intIndex + 1
            ' Field Group Code
            arrFieldGroups(intIndex, 1) = strFieldCode
            ' Field Group Label/Title
            arrFieldGroups(intIndex, 2) = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecControlTipText))
            ' Field Group Sort Strig
            arrFieldGroups(intIndex, 3) = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecLabelCode)
        End If
    Next lngFieldRow
    intGroupMax = intIndex ' Maximum group entry
    
        ' Loop through all fields and check for inclusion in the report
        For lngFieldRow = 2 To glngSpecFieldRowMax
            strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
            If strFieldCode = "" Then
                ' Stop at end of field specification, signified by blank
                Exit For
            End If
            ' Read field group
            strFieldGroup = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldGroup))
                    
            strFieldGroupTitle = "Unknown"
            strFieldGroupSortString = "9999_Unknown"
            ' Identify this group
            For intIndex = 1 To intGroupMax
                ' Next field group
                If strFieldGroup = arrFieldGroups(intIndex, 1) Then
                    ' Found field group
                    strFieldGroupTitle = arrFieldGroups(intIndex, 2)
                    strFieldGroupSortString = arrFieldGroups(intIndex, 3)
                End If
            Next intIndex
                    
                ' Read field label caption
                strLabelCaption = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecLabelCaption))
                
                If strReportType = "NYK" Then
                    ' Reporting on Not Yet Known attributes
                    ' Is this field Not Yet Known?
                    If checkFieldNotYetKnown(lngPartRow, lngFieldRow) Then
                        ' Not Yet Known field found
                        ' Add row to Not Yet Known report sheet
                        mlngNYKReportRow = mlngNYKReportRow + 1
                        mshtNotYetKnown.Cells(mlngNYKReportRow, 1) = "Not Yet Known"
                        mshtNotYetKnown.Cells(mlngNYKReportRow, 2) = strContractorPartNumber
                        mshtNotYetKnown.Cells(mlngNYKReportRow, 3) = strContractorPartNumber & "_" & strFieldGroupSortString
                        mshtNotYetKnown.Cells(mlngNYKReportRow, 4) = strFieldGroupTitle
                        mshtNotYetKnown.Cells(mlngNYKReportRow, 5) = strLabelCaption
                        mshtNotYetKnown.Cells(mlngNYKReportRow, 6) = strContractorPartName
                        mshtNotYetKnown.Cells(mlngNYKReportRow, 7) = strFieldCode
                    End If
                Else ' strReportType = "EC"
                    ' Reporting on Export-Controlled attributes
                    ' Is this field Export-Controlled?
                    If modDSExportControl.IsFieldEC(lngPartRow, lngFieldRow) Then
                        ' Export-Controlled field found
                        ' Add row to Not Yet Known report sheet
                        mlngNYKReportRow = mlngNYKReportRow + 1
                        mshtNotYetKnown.Cells(mlngNYKReportRow, 1) = "Export-Controlled " & strECType
                        mshtNotYetKnown.Cells(mlngNYKReportRow, 2) = strContractorPartNumber
                        mshtNotYetKnown.Cells(mlngNYKReportRow, 3) = strContractorPartNumber & "_" & strFieldGroupSortString
                        mshtNotYetKnown.Cells(mlngNYKReportRow, 4) = strFieldGroupTitle
                        mshtNotYetKnown.Cells(mlngNYKReportRow, 5) = strLabelCaption
                        mshtNotYetKnown.Cells(mlngNYKReportRow, 6) = strContractorPartName
                        mshtNotYetKnown.Cells(mlngNYKReportRow, 7) = strFieldCode
                    End If
                End If
        Next lngFieldRow
        
    If mlngNYKReportRow > 0 Then
        ' Sort the results by part and field group, ready to report to the user
        mshtNotYetKnown.UsedRange.Sort mshtNotYetKnown.Cells(, "C"), xlAscending, , , , , , xlNo
    End If
    
    If blnDisplayFlag Then
        ' Display report data on screen
        ReportOnScreen
    End If
    
    checkPartNotYetKnown = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "checkPartNotYetKnown"
    checkPartNotYetKnown = False
    Exit Function
End Function

Function checkFieldNotYetKnown(ByVal lngPartRow As Long, _
                               ByVal lngFieldRow As Long) As Boolean
' Is passed field of passed part NOT YET KNOWN?
'
    Dim strFieldCode As String
    Dim lngDataColumn As Long
    Dim strBlankValue As String
    Dim strRequiredColumn As String
    Dim blnValue As Boolean
    Dim strValue As String
    
    checkFieldNotYetKnown = False ' Initially assume it is not categorized as Not Yet Known
        
    ' Look up the field code
    strFieldCode = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecFieldCode))
    If strFieldCode = "" Then
        ' Not a recognized specification field
    Else
        ' Extract specification information on this field
        lngDataColumn = mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecDataColumn)
        strBlankValue = UnDelimitData(Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecBlankValue)), "DOUBLEQUOTE")
        strRequiredColumn = Trim(mshtFieldSpec.UsedRange.Cells(lngFieldRow, glngSpecRequiredColumn))
        
        ' Pull out field data value from the Part Data row
        If lngDataColumn = 0 Then
            ' No data column defined for this field code - skip
        ElseIf strRequiredColumn = "MANDATORYNOW" Or _
               strRequiredColumn = "NOTYETKNOWN" Then
            ' Data column is defined and potentially is required
            
            ' Is field enabled?
            If IsPartFieldEnabled(lngPartRow, lngFieldRow) = True Then
                ' Field is enabled, so check if value is blank
            
                If Left$(strFieldCode, 3) = "chk" Then
                    ' Boolean value
                    blnValue = ReadFieldValueBoolean(lngPartRow, strFieldCode)
                    If blnValue <> True And _
                       blnValue <> False Then
                        ' Blank/unfilled, so Not Yet Known
                        checkFieldNotYetKnown = True
                    End If
                Else
                    ' Non-boolean, i.e. string value
                    strValue = ReadFieldValueString(lngPartRow, strFieldCode)
                    If strValue = strBlankValue Then
                        ' Blank/unfilled, so Not Yet Known
                        checkFieldNotYetKnown = True
                    End If
                End If
            Else
                ' Not enabled, so currently not a "Not Yet Known" field
            End If
        Else
            ' Not required data - skip
        End If
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, _
           "checkFieldNotYetKnown: PartRow=" & lngPartRow & " FieldRow=" & lngFieldRow
    checkFieldNotYetKnown = False
    Exit Function
End Function

Function checkNotYetKnown(ByVal lngPartRow As Long, _
                          ByVal blnDisplayFlag As Boolean, _
                          ByVal strReportType As String) As Boolean
'
' Go through FieldSpec field rows, for passed part, or all parts if "",
' to determine the Not Yet Known fields
'
    Dim lngTotalParts As Long
    Dim strPartMessage As Long
    Dim strFormCaptionSave As String
    
    On Error GoTo Err_Trap
    
    checkNotYetKnown = False
    
    If blnDisplayFlag Then
        strFormCaptionSave = frmDSEntry.Caption
        frmDSEntry.Caption = "*** PLEASE WAIT WHILE REPORT INFORMATION IS COMPILED ***"
    End If
    
    ' Clear any previous Not Yet Known report data
    ClearNotYetKnownSheet
    
    mlngNYKReportRow = 0
    
    If lngPartRow <= 1 Then
        ' All parts to be checked for Not Yet Known fields
    
        ' Get number of Part Rows
        lngTotalParts = mshtPartsData.UsedRange.Rows.Count
    
        For lngPartRow = 2 To lngTotalParts
            ' Check each part
            strPartMessage = modDSNotYetKnown.checkPartNotYetKnown(lngPartRow, blnDisplayFlag, strReportType)
        Next lngPartRow
    Else
        ' Only the passed part row should be checked for Not Yet Known fields
        strPartMessage = modDSNotYetKnown.checkPartNotYetKnown(lngPartRow, blnDisplayFlag, strReportType)
    End If
    
    If blnDisplayFlag Then
        frmDSEntry.Caption = strFormCaptionSave
    End If
    
    checkNotYetKnown = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "checkNotYetKnown: lngPartRow=" & lngPartRow
    If strFormCaptionSave <> "" Then
        frmDSEntry.Caption = strFormCaptionSave
    End If
    checkNotYetKnown = False
    Exit Function
End Function

Sub ClearNotYetKnownSheet()
'
' Clears the NotYetKnown sheet
'
    On Error GoTo Err_Trap
    ' Clear/Empty sheet
    mshtNotYetKnown.UsedRange.Delete (xlShiftUp)
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ClearNotYetKnownSheet"
    Exit Sub
End Sub

Sub ReportOnScreen()
'
' Output popup messages on screen showing the data on the NotYetKnown sheet
'
    Dim lngDataTotal As Long
    Dim lngDataRow As Long
    Dim strMessage As String
    Dim strContractorPartNumber As String
    Dim strCPNLast As String
    Dim strFieldGroup As String
    Dim strFieldGroupLast As String
    Dim strFieldLabel As String
    Dim strConfirmMessage As String
    Dim strReportType As String
    Dim lngReportCount As Long
    
    On Error GoTo Err_Trap
    
    strConfirmMessage = vbCrLf & vbCrLf & "Click OK to continue with messages, otherwise click Cancel"
    
    ' Get total possible rows of NYK data
    lngDataTotal = mshtNotYetKnown.UsedRange.Rows.Count
    
    ' Go through each data row
    strMessage = ""
    strFieldGroupLast = ""
    strCPNLast = ""
    lngReportCount = 0
    For lngDataRow = 1 To lngDataTotal
        If mshtNotYetKnown.Cells(lngDataRow, 1) = "" Then
            ' No more data
            Exit For
        End If
        ' Read Report Type
        strReportType = mshtNotYetKnown.Cells(lngDataRow, 1)
        ' Read Contractor Part Number
        strContractorPartNumber = mshtNotYetKnown.Cells(lngDataRow, 2)
        ' Read Field Group Title
        strFieldGroup = mshtNotYetKnown.Cells(lngDataRow, 4)
        ' Read Field Label
        strFieldLabel = mshtNotYetKnown.Cells(lngDataRow, 5)
        
        If strFieldGroupLast = "" Or _
           strCPNLast = "" Then
            ' First time through loop
            ' Establish last values
            strFieldGroupLast = strFieldGroup
            strCPNLast = strContractorPartNumber
        
            ' Start the first Field Group Message
            strMessage = "*** " & strFieldGroup & " ***"
        End If
            
        If strFieldGroup <> strFieldGroupLast Or _
           strContractorPartNumber <> strCPNLast Then
            ' Changing to new Field Group or Part
            ' If previous Field Group message still waiting - display it
            If strMessage <> "" Then
                lngReportCount = lngReportCount + 1 ' Another pop-up message
                If MsgBox(strMessage & _
                          strConfirmMessage, _
                          vbOKCancel, _
                          strCPNLast & " " & strReportType & " Report on SAVED data") = vbCancel Then
                    ' User does not want any more messages
                    strMessage = ""
                    lngReportCount = -1
                    Exit For
                End If
            End If
            ' Start a new Field Group Message
            strMessage = "*** " & strFieldGroup & " ***"
        End If
        
        ' Add Field Label to Field Group message
        strMessage = strMessage & vbCrLf & strFieldLabel
        
        ' Hold on to last values
        strFieldGroupLast = strFieldGroup
        strCPNLast = strContractorPartNumber
    Next lngDataRow
    
    ' Last message if any...
    If strMessage <> "" Then
        lngReportCount = lngReportCount + 1 ' Another pop-up message
        MsgBox strMessage, vbOKOnly, strCPNLast & " " & strReportType & " Report on SAVED data"
    End If
    
    ' Last message if any...
    If lngReportCount = 0 Then
        MsgBox "No Attributes to Report", vbOKOnly, strCPNLast & " " & strReportType & " Report on SAVED data"
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ReportOnScreen"
    Exit Sub
End Sub

Attribute VB_Name = "modDSSecurity"
Option Explicit

Function ConcealWorkbook()
    
    UnprotectWorkbook
    HideSheets
    ProtectWorkbook

End Function

Function RevealWorkbook()
    
    UnprotectWorkbook
    UnhideSheets

End Function

Function ProtectWorkbook()
    Dim strAppPassword As String
    
    On Error GoTo Err_ProtectWorkbook
    
    Set mshtPartsData = ThisWorkbook.Sheets("PartsData")
    Set mshtContractorImport = ThisWorkbook.Sheets("ContractorImport")
    Set mshtContractorImpExcept = ThisWorkbook.Sheets("ContractorImpExcept")
    Set mshtConfiguration = ThisWorkbook.Sheets("Configuration")
    Set mshtStructure = ThisWorkbook.Sheets("Structure")
    Set mshtStructBackup = ThisWorkbook.Sheets("StructBackup")
    Set mshtBAESystems = ThisWorkbook.Sheets("BAE Systems")
    Set mshtFieldSpec = ThisWorkbook.Sheets("FieldSpec")
    Set mshtFieldTriggers = ThisWorkbook.Sheets("FieldTriggers")
    Set mshtFieldCombo = ThisWorkbook.Sheets("FieldCombo")
    Set mshtNotYetKnown = ThisWorkbook.Sheets("NotYetKnown")

    strAppPassword = mshtConfiguration.Cells(1, "AA")

    ' Unprotect before protect since protect is a toggle
    mshtPartsData.Unprotect strAppPassword
    mshtContractorImport.Unprotect strAppPassword
    mshtContractorImpExcept.Unprotect strAppPassword
    mshtConfiguration.Unprotect strAppPassword
    mshtStructure.Unprotect strAppPassword
    mshtStructBackup.Unprotect strAppPassword
    mshtBAESystems.Unprotect strAppPassword
    mshtFieldSpec.Unprotect strAppPassword
    mshtFieldTriggers.Unprotect strAppPassword
    mshtFieldCombo.Unprotect strAppPassword
    mshtNotYetKnown.Unprotect strAppPassword
    
    mshtPartsData.Protect strAppPassword, userInterfaceOnly:=True
    mshtContractorImport.Protect strAppPassword, userInterfaceOnly:=True
    mshtContractorImpExcept.Protect strAppPassword, userInterfaceOnly:=True
    mshtConfiguration.Protect strAppPassword, userInterfaceOnly:=True
    mshtStructure.Protect strAppPassword, userInterfaceOnly:=True
    mshtStructBackup.Protect strAppPassword, userInterfaceOnly:=True
    mshtBAESystems.Protect strAppPassword, userInterfaceOnly:=True
    mshtFieldSpec.Protect strAppPassword, userInterfaceOnly:=True
    mshtFieldTriggers.Protect strAppPassword, userInterfaceOnly:=True
    mshtFieldCombo.Protect strAppPassword, userInterfaceOnly:=True
    mshtNotYetKnown.Protect strAppPassword, userInterfaceOnly:=True

    Exit Function
Err_ProtectWorkbook:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modGeneral.ProtectWorkbook"
    Exit Function
End Function

Function UnprotectWorkbook()
    Dim strAppPassword As String
    
    On Error GoTo Err_UnprotectWorkbook
    
    Set mshtPartsData = ThisWorkbook.Sheets("PartsData")
    Set mshtContractorImport = ThisWorkbook.Sheets("ContractorImport")
    Set mshtContractorImpExcept = ThisWorkbook.Sheets("ContractorImpExcept")
    Set mshtConfiguration = ThisWorkbook.Sheets("Configuration")
    Set mshtStructure = ThisWorkbook.Sheets("Structure")
    Set mshtStructBackup = ThisWorkbook.Sheets("StructBackup")
    Set mshtBAESystems = ThisWorkbook.Sheets("BAE Systems")
    Set mshtFieldSpec = ThisWorkbook.Sheets("FieldSpec")
    Set mshtFieldTriggers = ThisWorkbook.Sheets("FieldTriggers")
    Set mshtFieldCombo = ThisWorkbook.Sheets("FieldCombo")
    Set mshtNotYetKnown = ThisWorkbook.Sheets("NotYetKnown")
    
    strAppPassword = ThisWorkbook.Sheets("Configuration").Cells(1, "AA")

    mshtPartsData.Unprotect strAppPassword
    mshtContractorImport.Unprotect strAppPassword
    mshtContractorImpExcept.Unprotect strAppPassword
    mshtConfiguration.Unprotect strAppPassword
    mshtStructure.Unprotect strAppPassword
    mshtStructBackup.Unprotect strAppPassword
    mshtBAESystems.Unprotect strAppPassword
    mshtFieldSpec.Unprotect strAppPassword
    mshtFieldTriggers.Unprotect strAppPassword
    mshtFieldCombo.Unprotect strAppPassword
    mshtNotYetKnown.Unprotect strAppPassword
    
    Exit Function
Err_UnprotectWorkbook:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modGeneral.UnprotectWorkbook"
    Exit Function
End Function

Function HideSheets()
    
    On Error GoTo Err_HideSheets
    
    Set mshtPartsData = ThisWorkbook.Sheets("PartsData")
    Set mshtContractorImport = ThisWorkbook.Sheets("ContractorImport")
    Set mshtContractorImpExcept = ThisWorkbook.Sheets("ContractorImpExcept")
    Set mshtConfiguration = ThisWorkbook.Sheets("Configuration")
    Set mshtStructure = ThisWorkbook.Sheets("Structure")
    Set mshtStructBackup = ThisWorkbook.Sheets("StructBackup")
    Set mshtFieldSpec = ThisWorkbook.Sheets("FieldSpec")
    Set mshtFieldTriggers = ThisWorkbook.Sheets("FieldTriggers")
    Set mshtFieldCombo = ThisWorkbook.Sheets("FieldCombo")
    Set mshtNotYetKnown = ThisWorkbook.Sheets("NotYetKnown")
    
    mshtPartsData.Visible = xlSheetVeryHidden
    mshtContractorImport.Visible = xlSheetVeryHidden
    mshtContractorImpExcept.Visible = xlSheetVeryHidden
    mshtConfiguration.Visible = xlSheetVeryHidden
    mshtStructure.Visible = xlSheetVeryHidden
    mshtStructBackup.Visible = xlSheetVeryHidden
    mshtFieldSpec.Visible = xlSheetVeryHidden
    mshtFieldTriggers.Visible = xlSheetVeryHidden
    mshtFieldCombo.Visible = xlSheetVeryHidden
    mshtNotYetKnown.Visible = xlSheetVeryHidden

    Exit Function
Err_HideSheets:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modGeneral.HideSheets"
    Exit Function
End Function

Function UnhideSheets()
   
    On Error GoTo Err_UnhideSheets
    
    Set mshtPartsData = ThisWorkbook.Sheets("PartsData")
    Set mshtContractorImport = ThisWorkbook.Sheets("ContractorImport")
    Set mshtContractorImpExcept = ThisWorkbook.Sheets("ContractorImpExcept")
    Set mshtConfiguration = ThisWorkbook.Sheets("Configuration")
    Set mshtStructure = ThisWorkbook.Sheets("Structure")
    Set mshtStructBackup = ThisWorkbook.Sheets("StructBackup")
    Set mshtFieldSpec = ThisWorkbook.Sheets("FieldSpec")
    Set mshtFieldTriggers = ThisWorkbook.Sheets("FieldTriggers")
    Set mshtFieldCombo = ThisWorkbook.Sheets("FieldCombo")
    Set mshtNotYetKnown = ThisWorkbook.Sheets("NotYetKnown")
    
    mshtPartsData.Visible = xlSheetVisible
    mshtContractorImport.Visible = xlSheetVisible
    mshtContractorImpExcept.Visible = xlSheetVisible
    mshtConfiguration.Visible = xlSheetVisible
    mshtStructure.Visible = xlSheetVisible
    mshtStructBackup.Visible = xlSheetVisible
    mshtFieldSpec.Visible = xlSheetVisible
    mshtFieldTriggers.Visible = xlSheetVisible
    mshtFieldCombo.Visible = xlSheetVisible
    mshtNotYetKnown.Visible = xlSheetVisible

    Exit Function
Err_UnhideSheets:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modGeneral.UnhideSheets"
    Exit Function
End Function

Sub UnprotectImportSheets()
    Dim strAppPassword As String
    
    On Error GoTo Err_UnprotectImportSheets
    
    strAppPassword = ThisWorkbook.Sheets("Configuration").Cells(1, "AA")

    mshtContractorImport.Unprotect strAppPassword
    mshtContractorImpExcept.Unprotect strAppPassword

    Exit Sub

Err_UnprotectImportSheets:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "UnprotectImportSheets"
    Exit Sub
End Sub

Sub ProtectImportSheets()
    Dim strAppPassword As String
    
    On Error GoTo Err_ProtectImportSheets
    
    strAppPassword = ThisWorkbook.Sheets("Configuration").Cells(1, "AA")

    ' Unprotect before protect since protect is a toggle
    mshtContractorImport.Unprotect strAppPassword
    mshtContractorImpExcept.Unprotect strAppPassword
    
    mshtContractorImport.Protect strAppPassword, userInterfaceOnly:=True
    mshtContractorImpExcept.Protect strAppPassword, userInterfaceOnly:=True

    Exit Sub

Err_ProtectImportSheets:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ProtectImportSheets"
    Exit Sub
End Sub


Attribute VB_Name = "modDSStructure"
Option Explicit

Sub LoadComboData()
'
' Populate combo box and list box on the Structure form
'
    Dim lngCount As Long
    Dim lngIndex As Long
    Dim strItemName As String
    Dim strITAR As String
    Dim lngTotalRecs As Long
    
    Dim strContractorPartNumber As String
    Dim strContractorPartName As String
    Dim strPartType As String
    Dim strExportControlApp As String
    Dim strExportControlType As String
    
    On Error GoTo Err_Trap
    
    ' Reset the list box
    frmStructure.lstChildPartSelect.Clear
    frmStructure.lstChildPartSelect.ColumnCount = 3
    frmStructure.lstChildPartSelect.BoundColumn = 1
    frmStructure.lstChildPartSelect.ColumnWidths = "0;200"
    
    ' Reset the combo box
    frmStructure.cboPartSelect.Clear
    frmStructure.cboPartSelect.ColumnCount = 3
    frmStructure.cboPartSelect.BoundColumn = 1
    frmStructure.cboPartSelect.ColumnWidths = "0;200"
    
    lngTotalRecs = mshtPartsData.UsedRange.Rows.Count ' Number of rows (1st row is header)
    
    If lngTotalRecs > 1 Then
        ' Parts Data exists
        lngIndex = 0
        For lngCount = 2 To mshtPartsData.UsedRange.Cells.Rows.Count
            If mshtPartsData.UsedRange.Cells(lngCount, 1) <> "" Then
                ' Read this part's key fields
                strContractorPartNumber = modDSEntry.ReadFieldValueString(lngCount, gstrContractorPartNumber)
                strContractorPartName = modDSEntry.ReadFieldValueString(lngCount, gstrContractorPartName)
                strPartType = modDSEntry.ReadFieldValueString(lngCount, gstrPartType)
                strExportControlApp = modDSEntry.ReadFieldValueString(lngCount, gstrExportControlApp)
                strExportControlType = modDSEntry.ReadFieldValueString(lngCount, gstrExportControlType)

                If strPartType <> "Parent" Then
                    ' Only add non-Parent Parts to the lists
                    strITAR = ""
                    If strExportControlApp = "Yes" And _
                       Not IsNull(strExportControlType) And _
                       strExportControlType <> "Select" Then
                        ' There is export control defined for this part
                        strITAR = strExportControlType
                    End If
                
                    strItemName = GetPartIdentifierText(lngCount, "LONG") ' Get the identifier text for this Part Data row
                
                    lngIndex = lngIndex + 1 ' Next combo position to be filled
                    
                    ' Add Part to list box
                    frmStructure.lstChildPartSelect.AddItem
                    frmStructure.lstChildPartSelect.Column(0, lngIndex - 1) = strContractorPartNumber
                    frmStructure.lstChildPartSelect.Column(1, lngIndex - 1) = strItemName
                    frmStructure.lstChildPartSelect.Column(2, lngIndex - 1) = strITAR
            
                    ' Add Part to combo box
                    frmStructure.cboPartSelect.AddItem
                    frmStructure.cboPartSelect.Column(0, lngIndex - 1) = strContractorPartNumber
                    frmStructure.cboPartSelect.Column(1, lngIndex - 1) = strItemName
                    frmStructure.cboPartSelect.Column(2, lngIndex - 1) = strITAR
                End If
            Else
                ' No more Parts
                Exit For
            End If
        Next lngCount
    
    End If

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.LoadComboData"
    Exit Sub
End Sub

Function GetPartDescription(ByVal strPartNo As String, _
                            ByVal strFlag As String) As String
'
' Look up the descriptive text for the passed Part Number
'
    Dim lngPartRow As Long
    Dim strPartNoTrimmed As String
    
    On Error GoTo Err_Trap
    
    GetPartDescription = ""
    
    ' Trim off any additional descriptive text to get Contractor Part Number
    strPartNoTrimmed = GetShortPartIdentifierText(strPartNo)
    ' Determine the Part Row
    lngPartRow = modDSEntry.FindPartRow(strPartNoTrimmed)
    ' Get the Part Description
    GetPartDescription = GetPartIdentifierText(lngPartRow, strFlag)
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.GetPartDescription"
    GetPartDescription = "unknown part"
    Exit Function
End Function

Function GetPartIdentifierText(ByVal lngPartRow As Long, _
                               ByVal strFlag As String) As String
'
' Form the Structure identifier text for the passed Part Data Row
' strFlag indicates SHORT, MEDIUM, LONG text to be returned
' default SHORT
'
    Dim strContractorPartNumber As String
    Dim strContractorPartName As String
    Dim strExportControlApp As String
    Dim strExportControlType As String
    Dim strPartIdentifierText As String
    
    On Error GoTo Err_Trap
    
    GetPartIdentifierText = ""
    
    ' Read the key information from the Part Data Row
    strContractorPartNumber = modDSEntry.ReadFieldValueString(lngPartRow, gstrContractorPartNumber)
    
    If strFlag = "LONG" Then
        strContractorPartName = modDSEntry.ReadFieldValueString(lngPartRow, gstrContractorPartName)
        strExportControlApp = modDSEntry.ReadFieldValueString(lngPartRow, gstrExportControlApp)
        strExportControlType = modDSEntry.ReadFieldValueString(lngPartRow, gstrExportControlType)
        
        ' Form the Structure identifier text
        strPartIdentifierText = strContractorPartNumber & gstrStructTextSeparator & strContractorPartName
        If strExportControlApp = "Yes" Then
            If strExportControlType = "Select" Then
                strExportControlType = "EC"
            End If
            strPartIdentifierText = strPartIdentifierText & " (" & strExportControlType & ")"
        End If
    ElseIf strFlag = "MEDIUM" Then
        strContractorPartName = modDSEntry.ReadFieldValueString(lngPartRow, gstrContractorPartName)

        ' Form the Structure identifier text
        strPartIdentifierText = strContractorPartNumber & gstrStructTextSeparator & strContractorPartName
    Else ' Default SHORT - just the unique Part Key - Contractor Part Number
        strPartIdentifierText = strContractorPartNumber
    End If
    
    GetPartIdentifierText = strPartIdentifierText
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.GetPartIdentifierText"
    GetPartIdentifierText = "Error"
    Exit Function
End Function

Function GetShortPartIdentifierText(ByVal strFullText As String) As String
'
' Reduce the passed FULL Identifier to its SHORT identifier
'
    Dim strPartIdentifierText As String
    Dim lngPosition As Long
    
    On Error GoTo Err_Trap
    
    strPartIdentifierText = strFullText
    
    lngPosition = InStr(strPartIdentifierText, gstrStructTextSeparator)
    If lngPosition > 1 Then
        strPartIdentifierText = Left$(strFullText, lngPosition - 1)
    End If
    
    GetShortPartIdentifierText = strPartIdentifierText
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.GetShortPartIdentifierText"
    GetShortPartIdentifierText = "Error"
    Exit Function
End Function

Sub LoadStructure(trvView As clsTreeView)
'
' Load the Structure tree from the Structure Sheet
'
    
    Dim cRootLev1 As clsNode
    Dim cNodeLev2 As clsNode
    Dim cNodeLev3 As clsNode
    Dim cNodeLev4 As clsNode
    Dim cNodeLev5 As clsNode
    Dim cNodeLev6 As clsNode
    Dim cNodeLev7 As clsNode
    Dim cNodeLev8 As clsNode
    Dim cNodeLev9 As clsNode
    Dim cNodeLev10 As clsNode
    Dim cNodeLev11 As clsNode
    Dim cNodeLev12 As clsNode
    Dim cNodeLev13 As clsNode
    Dim cNodeLev14 As clsNode
    Dim cNodeLev15 As clsNode
    
    Dim lngCount As Long
    Dim strLev1Key As String
    Dim strLev2Key As String
    Dim strLev3Key As String
    Dim strLev4Key As String
    Dim strLev5Key As String
    Dim strLev6Key As String
    Dim strLev7Key As String
    Dim strLev8Key As String
    Dim strLev9Key As String
    Dim strLev10Key As String
    Dim strLev11Key As String
    Dim strLev12Key As String
    Dim strLev13Key As String
    Dim strLev14Key As String
    Dim strLev15Key As String
    Dim strLevName As String
    Dim strLevNameShort As String
    Dim lngTotalStruct As Long
    
    On Error GoTo Err_Trap
    
    lngTotalStruct = mshtStructure.UsedRange.Rows.Count ' Determine number of Structure rows
    
    ResetSequenceNo ' Reset the tree node key sequence back to 1 ready to start loading tree
    
    mblnStructureChanged = False ' Clear the Structure has changed flag
    
    If lngTotalStruct > 0 Then
        ' There is some Structure to load into the tree - continue
        strLev1Key = ""
        strLev2Key = ""
        strLev3Key = ""
        strLev4Key = ""
        strLev5Key = ""
        strLev6Key = ""
        strLev7Key = ""
        strLev8Key = ""
        strLev9Key = ""
        strLev10Key = ""
        strLev11Key = ""
        strLev12Key = ""
        strLev13Key = ""
        strLev14Key = ""
        strLev15Key = ""
        strLevName = ""
        
        For lngCount = 1 To mshtStructure.UsedRange.Cells.Rows.Count
            
            If mshtStructure.UsedRange.Cells(lngCount, 1) <> "" Then
                ' Level 1 part number present
                strLevNameShort = mshtStructure.UsedRange.Cells(lngCount, 1)
                strLevName = GetPartDescription(strLevNameShort, "MEDIUM")
                strLev1Key = strLevNameShort & "." & NextSequenceNo
            
                strLev2Key = ""
                strLev3Key = ""
                strLev4Key = ""
                strLev5Key = ""
                strLev6Key = ""
                strLev7Key = ""
                strLev8Key = ""
                strLev9Key = ""
                strLev10Key = ""
                strLev11Key = ""
                strLev12Key = ""
                strLev13Key = ""
                strLev14Key = ""
                strLev15Key = ""
            
                ' Add a Root node for the Parent Part and make it bold
                Set cRootLev1 = trvView.AddRoot(sKey:=strLev1Key, vCaption:=strLevName)
                cRootLev1.Bold = True
                cRootLev1.ControlTipText = "Parent Part " & strLevName
            
            ElseIf mshtStructure.UsedRange.Cells(lngCount, 2) <> "" Then
                ' Level 2 part number present
                strLevNameShort = mshtStructure.UsedRange.Cells(lngCount, 2)
                strLevName = GetPartDescription(strLevNameShort, "MEDIUM")
                strLev2Key = strLev1Key & "_" _
                           & strLevNameShort & "." & NextSequenceNo
            
                strLev3Key = ""
                strLev4Key = ""
                strLev5Key = ""
                strLev6Key = ""
                strLev7Key = ""
                strLev8Key = ""
                strLev9Key = ""
                strLev10Key = ""
                strLev11Key = ""
                strLev12Key = ""
                strLev13Key = ""
                strLev14Key = ""
                strLev15Key = ""
            
                Set cNodeLev2 = cRootLev1.AddChild(strLev2Key, strLevName)
            
            ElseIf mshtStructure.UsedRange.Cells(lngCount, 3) <> "" Then
                ' Level 3 part number present
                strLevNameShort = mshtStructure.UsedRange.Cells(lngCount, 3)
                strLevName = GetPartDescription(strLevNameShort, "MEDIUM")
                strLev3Key = strLev2Key & "_" _
                           & strLevNameShort & "." & NextSequenceNo
            
                strLev4Key = ""
                strLev5Key = ""
                strLev6Key = ""
                strLev7Key = ""
                strLev8Key = ""
                strLev9Key = ""
                strLev10Key = ""
                strLev11Key = ""
                strLev12Key = ""
                strLev13Key = ""
                strLev14Key = ""
                strLev15Key = ""
            
                Set cNodeLev3 = cNodeLev2.AddChild(strLev3Key, strLevName)
            
            ElseIf mshtStructure.UsedRange.Cells(lngCount, 4) <> "" Then
                ' Level 4 part number present
                strLevNameShort = mshtStructure.UsedRange.Cells(lngCount, 4)
                strLevName = GetPartDescription(strLevNameShort, "MEDIUM")
                strLev4Key = strLev3Key & "_" _
                           & strLevNameShort & "." & NextSequenceNo
            
                strLev5Key = ""
                strLev6Key = ""
                strLev7Key = ""
                strLev8Key = ""
                strLev9Key = ""
                strLev10Key = ""
                strLev11Key = ""
                strLev12Key = ""
                strLev13Key = ""
                strLev14Key = ""
                strLev15Key = ""
            
                Set cNodeLev4 = cNodeLev3.AddChild(strLev4Key, strLevName)
            
            ElseIf mshtStructure.UsedRange.Cells(lngCount, 5) <> "" Then
                ' Level 5 part number present
                strLevNameShort = mshtStructure.UsedRange.Cells(lngCount, 5)
                strLevName = GetPartDescription(strLevNameShort, "MEDIUM")
                strLev5Key = strLev4Key & "_" _
                           & strLevNameShort & "." & NextSequenceNo
            
                strLev6Key = ""
                strLev7Key = ""
                strLev8Key = ""
                strLev9Key = ""
                strLev10Key = ""
                strLev11Key = ""
                strLev12Key = ""
                strLev13Key = ""
                strLev14Key = ""
                strLev15Key = ""
            
                Set cNodeLev5 = cNodeLev4.AddChild(strLev5Key, strLevName)
            
            ElseIf mshtStructure.UsedRange.Cells(lngCount, 6) <> "" Then
                ' Level 6 part number present
                strLevNameShort = mshtStructure.UsedRange.Cells(lngCount, 6)
                strLevName = GetPartDescription(strLevNameShort, "MEDIUM")
                strLev6Key = strLev5Key & "_" _
                           & strLevNameShort & "." & NextSequenceNo
            
                strLev7Key = ""
                strLev8Key = ""
                strLev9Key = ""
                strLev10Key = ""
                strLev11Key = ""
                strLev12Key = ""
                strLev13Key = ""
                strLev14Key = ""
                strLev15Key = ""
            
                Set cNodeLev6 = cNodeLev5.AddChild(strLev6Key, strLevName)
            
            ElseIf mshtStructure.UsedRange.Cells(lngCount, 7) <> "" Then
                ' Level 7 part number present
                strLevNameShort = mshtStructure.UsedRange.Cells(lngCount, 7)
                strLevName = GetPartDescription(strLevNameShort, "MEDIUM")
                strLev7Key = strLev6Key & "_" _
                           & strLevNameShort & "." & NextSequenceNo
            
                strLev8Key = ""
                strLev9Key = ""
                strLev10Key = ""
                strLev11Key = ""
                strLev12Key = ""
                strLev13Key = ""
                strLev14Key = ""
                strLev15Key = ""
            
                Set cNodeLev7 = cNodeLev6.AddChild(strLev7Key, strLevName)
            
            ElseIf mshtStructure.UsedRange.Cells(lngCount, 8) <> "" Then
                ' Level 8 part number present
                strLevNameShort = mshtStructure.UsedRange.Cells(lngCount, 8)
                strLevName = GetPartDescription(strLevNameShort, "MEDIUM")
                strLev8Key = strLev7Key & "_" _
                           & strLevNameShort & "." & NextSequenceNo
            
                strLev9Key = ""
                strLev10Key = ""
                strLev11Key = ""
                strLev12Key = ""
                strLev13Key = ""
                strLev14Key = ""
                strLev15Key = ""
            
                Set cNodeLev8 = cNodeLev7.AddChild(strLev8Key, strLevName)
            
            ElseIf mshtStructure.UsedRange.Cells(lngCount, 9) <> "" Then
                ' Level 9 part number present
                strLevNameShort = mshtStructure.UsedRange.Cells(lngCount, 9)
                strLevName = GetPartDescription(strLevNameShort, "MEDIUM")
                strLev9Key = strLev8Key & "_" _
                           & strLevNameShort & "." & NextSequenceNo
            
                strLev10Key = ""
                strLev11Key = ""
                strLev12Key = ""
                strLev13Key = ""
                strLev14Key = ""
                strLev15Key = ""
            
                Set cNodeLev9 = cNodeLev8.AddChild(strLev9Key, strLevName)
            
            ElseIf mshtStructure.UsedRange.Cells(lngCount, 10) <> "" Then
                ' Level 10 part number present
                strLevNameShort = mshtStructure.UsedRange.Cells(lngCount, 10)
                strLevName = GetPartDescription(strLevNameShort, "MEDIUM")
                strLev10Key = strLev9Key & "_" _
                            & strLevNameShort & "." & NextSequenceNo
            
                strLev11Key = ""
                strLev12Key = ""
                strLev13Key = ""
                strLev14Key = ""
                strLev15Key = ""
                
                Set cNodeLev10 = cNodeLev9.AddChild(strLev10Key, strLevName)
            
            ElseIf mshtStructure.UsedRange.Cells(lngCount, 11) <> "" Then
                ' Level 11 part number present
                strLevNameShort = mshtStructure.UsedRange.Cells(lngCount, 11)
                strLevName = GetPartDescription(strLevNameShort, "MEDIUM")
                strLev11Key = strLev10Key & "_" _
                            & strLevNameShort & "." & NextSequenceNo
            
                strLev12Key = ""
                strLev13Key = ""
                strLev14Key = ""
                strLev15Key = ""
                
                Set cNodeLev11 = cNodeLev10.AddChild(strLev11Key, strLevName)
            
            ElseIf mshtStructure.UsedRange.Cells(lngCount, 12) <> "" Then
                ' Level 12 part number present
                strLevNameShort = mshtStructure.UsedRange.Cells(lngCount, 12)
                strLevName = GetPartDescription(strLevNameShort, "MEDIUM")
                strLev12Key = strLev11Key & "_" _
                            & strLevNameShort & "." & NextSequenceNo
            
                strLev13Key = ""
                strLev14Key = ""
                strLev15Key = ""
                
                Set cNodeLev12 = cNodeLev11.AddChild(strLev12Key, strLevName)
            
            ElseIf mshtStructure.UsedRange.Cells(lngCount, 13) <> "" Then
                ' Level 13 part number present
                strLevNameShort = mshtStructure.UsedRange.Cells(lngCount, 13)
                strLevName = GetPartDescription(strLevNameShort, "MEDIUM")
                strLev13Key = strLev12Key & "_" _
                            & strLevNameShort & "." & NextSequenceNo
            
                strLev14Key = ""
                strLev15Key = ""
                
                Set cNodeLev13 = cNodeLev12.AddChild(strLev13Key, strLevName)
            
            ElseIf mshtStructure.UsedRange.Cells(lngCount, 14) <> "" Then
                ' Level 14 part number present
                strLevNameShort = mshtStructure.UsedRange.Cells(lngCount, 14)
                strLevName = GetPartDescription(strLevNameShort, "MEDIUM")
                strLev14Key = strLev13Key & "_" _
                            & strLevNameShort & "." & NextSequenceNo
            
                strLev15Key = ""
                
                Set cNodeLev14 = cNodeLev13.AddChild(strLev14Key, strLevName)
            
            ElseIf mshtStructure.UsedRange.Cells(lngCount, 15) <> "" Then
                ' Level 15 part number present
                strLevNameShort = mshtStructure.UsedRange.Cells(lngCount, 15)
                strLevName = GetPartDescription(strLevNameShort, "MEDIUM")
                strLev15Key = strLev14Key & "_" _
                            & strLevNameShort & "." & NextSequenceNo
            
                Set cNodeLev15 = cNodeLev14.AddChild(strLev15Key, strLevName)
            
            Else
                ' Assume end of data
                Exit For
            End If
        Next lngCount
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructureNew.LoadStructure"
    Exit Sub
End Sub

Sub AddChildParts(ndParent As clsNode)
'
' Add each part selected in the list box as a child of the passed parent key node
'
    Dim lngTotalEntries As Long
    Dim lngEntry As Long
    Dim blnReturn As Boolean
    Dim strPartIdentifierText As String
    Dim strPartIdentifierShort As String
    
    On Error GoTo Err_Trap
    
    lngTotalEntries = frmStructure.lstChildPartSelect.ListCount ' Number of list box entries selected
    
    For lngEntry = 0 To lngTotalEntries - 1
        ' Add each selected part to the structure
        If frmStructure.lstChildPartSelect.Selected(lngEntry) Then
            ' The MEDIUM text is used for displaying in the tree
            strPartIdentifierText = GetPartDescription(frmStructure.lstChildPartSelect.List(lngEntry), "MEDIUM")
            strPartIdentifierShort = GetShortPartIdentifierText(strPartIdentifierText)
            blnReturn = AddChildNode(ndParent, strPartIdentifierText, strPartIdentifierShort) ' Add node for the part
            frmStructure.lstChildPartSelect.Selected(lngEntry) = False ' Clear the selection highlight in the list box
        End If
    Next lngEntry

    ' Sort the Parent's children
    Call ndParent.Sort

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.AddChildParts"
    Exit Sub
End Sub

Function AddChildNode(ndParent As clsNode, _
                      ByVal strChildName As String, _
                      ByVal strChildNameShort As String) As Boolean
'
' Add the passed Child to the passed Node key
'
    Dim nd As clsNode
    Dim strChildKey As String
    
    On Error GoTo Err_Trap
    
    AddChildNode = False
    
    ' Construct new node key from parent node key and child short name plus unique sequence no
    strChildKey = ndParent.Key & "_" & strChildNameShort & "." & NextSequenceNo
    
    Set nd = ndParent.AddChild(strChildKey, strChildName)
    
    ndParent.Expanded = True
    
    mblnStructureChanged = True    ' Set the Structure has changed flag
    
    AddChildNode = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.AddChildNode"
    AddChildNode = False
    Exit Function
End Function

Function NextSequenceNo() As String
'
' Sequence Number is used to ensure the tree structure keys are unique.
' It is reset to 1 on each loading of the structure into the tree.
' Its current value is held in cell 30,1 of the Configuration Sheet
'
    Dim lngNumber As Long
    Dim strNumber As String
    
    On Error GoTo Err_Trap
    
    NextSequenceNo = ""
    
    lngNumber = mshtConfiguration.Cells(30, 1)
    strNumber = CStr(lngNumber)
    lngNumber = lngNumber + 1
    mshtConfiguration.Cells(30, 1) = lngNumber
    
    NextSequenceNo = strNumber
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.NextSequenceNo"
    NextSequenceNo = "9999999999"
    Exit Function
End Function

Function ResetSequenceNo() As String
'
' Sequence Number is used to ensure the tree structure keys are unique
' It is reset to 1 on each loading of the structure into the tree
'
    On Error GoTo Err_Trap
    
    ResetSequenceNo = ""
    mshtConfiguration.Cells(30, 1) = 1
    ResetSequenceNo = "1"
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.ResetSequenceNo"
    ResetSequenceNo = "9999999999"
    Exit Function
End Function

Sub LoadStructureForm(trvView As clsTreeView)
'
' Re-load the Structure Form controls from the Structure Sheet
'
    Dim strStructureComplete As String
    
    On Error GoTo Err_Trap
    
    DisplayCompleteButton
    SetStructureTitle
    
    LoadComboData ' Load list and combo boxes
    ClearCurrentPart ' Clear currently selected part
    ClearTreeHighlights trvView ' Clear any tree highlights
    
    mblnStructureChanged = False ' Clear Structure changed flag
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.LoadStructureForm"
    Exit Sub
End Sub

Sub SetStructureTitle()
'
' Set the title of the Structure Form
'
    Dim strStructureComplete As String
    
    On Error GoTo Err_Trap
    
    ' Read the Structure Complete Flag
    strStructureComplete = modDSGeneral.GetConfigurationData(glngConfigSTRUCTURECOMPLETE)
    
    frmStructure.Caption = GetApplicationTitle(True) & " - Part Structure Diagram"
    If strStructureComplete = "COMPLETE" Then
        frmStructure.Caption = frmStructure.Caption & " - MARKED AS COMPLETE"
    End If
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.LoadStructureForm"
    Exit Sub
End Sub

Sub ClearTreeHighlights(trvView As clsTreeView)
'
' Clears any highlights placed on the DS2 Form
'
    Dim cNode As clsNode
    
    For Each cNode In trvView.Nodes
        ' Clear any highlight on this node
        cNode.BackColor = &H80000005
    Next cNode
    
    ' Re-establish correct highlight on active node
    Set trvView.ActiveNode = trvView.ActiveNode
    
    Exit Sub
    
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "frmStructure.ClearTreeHighlights"
    Exit Sub
End Sub

Function FindNodesWithChildren(trvView As clsTreeView _
                             , ByVal strCurrentPartKey As String _
                             , ByVal strCurrentPartName As String) As Boolean

    Dim strContractorPartNumber As String
    Dim intLength As Integer
    Dim lngCount As Long
    Dim strNextPN As String
    
    Dim colChildNodes As Collection
    
    Dim nd1 As clsNode
    Dim nd2 As clsNode
    Dim nd3 As clsNode
    Dim nd4 As clsNode
    Dim nd5 As clsNode
    Dim nd6 As clsNode
    Dim nd7 As clsNode
    Dim nd8 As clsNode
    Dim nd9 As clsNode
    Dim nd10 As clsNode
    Dim nd11 As clsNode
    Dim nd12 As clsNode
    Dim nd13 As clsNode
    Dim nd14 As clsNode
    Dim nd15 As clsNode
    
    On Error GoTo Err_Trap
    
    ' Extract the Contractor Part Number from the passed Current Part Key
    strContractorPartNumber = modDSStructure.GetShortPartIdentifierText(strCurrentPartName)
    intLength = Len(strContractorPartNumber)

    For Each nd1 In trvView.Nodes
        strNextPN = modDSStructure.GetShortPartIdentifierText(nd1.Caption)
        If UCase(strNextPN) = UCase(strContractorPartNumber) _
        And nd1.Key <> strCurrentPartKey Then
            ' Any children?
            If Not nd1.GetChild(-1) Is Nothing Then
                ' Highlight the node
                nd1.BackColor = &H80FFFF
                lngCount = lngCount + 1
            End If
        End If
    Next nd1

    ' Re-establish correct highlight on active node
    Set trvView.ActiveNode = trvView.ActiveNode
    
    If lngCount > 0 Then
        FindNodesWithChildren = True
    Else
        FindNodesWithChildren = False
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.FindNodesWithChildren"
    FindNodesWithChildren = False
    Exit Function
End Function

Sub RemoveNode(trvView As clsTreeView)
'
' Remove the passed node
'
    On Error GoTo Err_Trap
    
    trvView.NodeRemove trvView.ActiveNode
    trvView.Refresh
    
    mblnStructureChanged = True ' Set Structure has changed flag
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.RemoveNode"
    Exit Sub
End Sub

Sub ClearCurrentPart()
'
' The current part fields and combo are cleared and highlights removed
'
    On Error GoTo Err_Trap
    
    ' Clear the form controls
    frmStructure.txtPartCurrentKey.Value = ""
    frmStructure.txtPartCurrentName.Value = ""
    frmStructure.txtPartCurrentNodeLevel.Value = ""
    frmStructure.cboPartSelect = ""

    Exit Sub

Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.ClearCurrentPart"
    Exit Sub
End Sub

Sub DisplayCompleteButton()
' Display the Complete button according to Complete or not
    Dim strStructureComplete As String
    
    On Error GoTo Err_Trap
    
    ' Read current flag setting
    strStructureComplete = mshtConfiguration.Cells(glngConfigSTRUCTURECOMPLETE, 2)
    If strStructureComplete = "COMPLETE" Then
        ' Structure currently marked complete
        frmStructure.cmdSetCompleteFlag.BackColor = &HC000&
        frmStructure.cmdSetCompleteFlag.Caption = "Clear Complete"
        frmStructure.lblSetCompleteFlag.Visible = True
    Else
        ' Structure not currently marked complete
        frmStructure.cmdSetCompleteFlag.BackColor = &H8000000F
        mshtConfiguration.Cells(glngConfigSTRUCTURECOMPLETE, 2) = "NO"
        frmStructure.cmdSetCompleteFlag.Caption = "Mark Complete"
        frmStructure.lblSetCompleteFlag.Visible = False
    End If
    SetStructureTitle

    ' Ensure Main Form label is correct
    DisplayStructureCompleteLabel

    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.DisplayCompleteButton"
    Exit Sub
End Sub

Sub HighlightPartNodes(trvView As clsTreeView _
                      , ByVal strContractorPartNumber As String)

    Dim intLength As Integer
    Dim lngCount As Long
    Dim strNextPN As String
    
    Dim nd1 As clsNode
    
    On Error GoTo Err_Trap
    
    ClearTreeHighlights trvView
    
    intLength = Len(strContractorPartNumber)

    For Each nd1 In trvView.Nodes
        strNextPN = modDSStructure.GetShortPartIdentifierText(nd1.Caption)
        If UCase(strNextPN) = UCase(strContractorPartNumber) Then
            ' Highlight this node
            nd1.BackColor = &H80FFFF
            lngCount = lngCount + 1
        End If
    Next nd1

    ' Re-establish correct highlight on active node
    Set trvView.ActiveNode = trvView.ActiveNode

    MsgBox lngCount & " nodes highlighted", vbOKOnly, "Find match to " & strContractorPartNumber
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.HighlightPartNodes"
    Exit Sub
End Sub

Sub ClearStructure()
'
' Clearing the Structure means
' - clear the Sheet named 'Structure'
' - add in a root for each "Parent" part in the Parts Data Sheet
'
    Dim lngDataTotal As Long
    Dim lngDataRow As Long
    Dim strPartType As String
        
    On Error GoTo Err_Trap
    
    ' Clear the sheet
    ClearStructureSheet
    
    ' Get number of rows of Part data
    lngDataTotal = mshtPartsData.UsedRange.Rows.Count

    If lngDataTotal > 1 Then
        ' Part Data is present
        For lngDataRow = 2 To lngDataTotal
            ' Read Part Type
            strPartType = modDSEntry.ReadFieldValueString(lngDataRow, gstrPartType)
            If strPartType = "Parent" Then
                ' This is a Parent Part - add to Structure
                AddStructureParentNode (lngDataRow)
            End If
        Next lngDataRow
    End If
    
    Exit Sub

Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.ClearStructure"
    Exit Sub
End Sub

Sub ClearStructureSheet()
'
' Clear the Sheet named 'Structure'
'
    Dim lngTotalRows As Long
    Dim lngRow As Long
    
    On Error GoTo Err_Trap
    
    lngTotalRows = mshtStructure.UsedRange.Rows.Count
    For lngRow = lngTotalRows To 1 Step -1
        mshtStructure.Cells(lngRow, 1).EntireRow.Delete
    Next lngRow
    
    Exit Sub

Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.ClearStructureSheet"
    Exit Sub
End Sub

Sub TakeBackup()
'
' Take backup of currently saved structure...
' Swap the names of the Structure and StructBackup sheets
' Re-establish msht... global variables
'
    On Error GoTo Err_Trap
    
    ThisWorkbook.Sheets("Structure").Name = "StructTMP"
    ThisWorkbook.Sheets("StructBackup").Name = "Structure"
    ThisWorkbook.Sheets("StructTMP").Name = "StructBackup"
    
    Set mshtStructure = ThisWorkbook.Sheets("Structure")
    Set mshtStructBackup = ThisWorkbook.Sheets("StructBackup")

    Exit Sub

Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.TakeBackup"
    Exit Sub
End Sub

Sub RestoreBackup()
'
' Restore the last save structure from the backup sheet...
' Swap the names of the Structure and StructBackup sheets
' Re-establish msht... global variables
'
    On Error GoTo Err_Trap
    
    ThisWorkbook.Sheets("Structure").Name = "StructTMP"
    ThisWorkbook.Sheets("StructBackup").Name = "Structure"
    ThisWorkbook.Sheets("StructTMP").Name = "StructBackup"
    
    Set mshtStructure = ThisWorkbook.Sheets("Structure")
    Set mshtStructBackup = ThisWorkbook.Sheets("StructBackup")

    Exit Sub

Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.RestoreBackup"
    Exit Sub
End Sub

Sub SortStructure(trvView As clsTreeView)
'
' Sort the complete Structure
'
    Dim iLev1 As Integer
    Dim iLev2 As Integer
    Dim iLev3 As Integer
    Dim iLev4 As Integer
    Dim iLev5 As Integer
    Dim iLev6 As Integer
    Dim iLev7 As Integer
    Dim iLev8 As Integer
    Dim iLev9 As Integer
    Dim iLev10 As Integer
    Dim iLev11 As Integer
    Dim iLev12 As Integer
    Dim iLev13 As Integer
    Dim iLev14 As Integer
    Dim iLev15 As Integer
    Dim nd1 As clsNode
    Dim nd2 As clsNode
    Dim nd3 As clsNode
    Dim nd4 As clsNode
    Dim nd5 As clsNode
    Dim nd6 As clsNode
    Dim nd7 As clsNode
    Dim nd8 As clsNode
    Dim nd9 As clsNode
    Dim nd10 As clsNode
    Dim nd11 As clsNode
    Dim nd12 As clsNode
    Dim nd13 As clsNode
    Dim nd14 As clsNode
    Dim nd15 As clsNode
    On Error GoTo Err_Trap
    
    If trvView.RootNodes Is Nothing Then
        ' No roots, so no structure to be sorted
        Exit Sub
    End If
    
    ' Loop through each RootNode and sort its children if any
    For iLev1 = 1 To trvView.RootNodes.Count
      Set nd1 = trvView.RootNodes(iLev1)
      If Not nd1.ChildNodes Is Nothing Then
        Call nd1.Sort
        For iLev2 = 1 To nd1.ChildNodes.Count
          Set nd2 = nd1.ChildNodes(iLev2)
          If Not nd2.ChildNodes Is Nothing Then
            Call nd2.Sort
            For iLev3 = 1 To nd2.ChildNodes.Count
              Set nd3 = nd2.ChildNodes(iLev3)
              If Not nd3.ChildNodes Is Nothing Then
                Call nd3.Sort
                For iLev4 = 1 To nd3.ChildNodes.Count
                  Set nd4 = nd3.ChildNodes(iLev4)
                  If Not nd4.ChildNodes Is Nothing Then
                    Call nd4.Sort
                    For iLev5 = 1 To nd4.ChildNodes.Count
                      Set nd5 = nd4.ChildNodes(iLev5)
                      If Not nd5.ChildNodes Is Nothing Then
                        Call nd5.Sort
                        For iLev6 = 1 To nd5.ChildNodes.Count
                          Set nd6 = nd5.ChildNodes(iLev6)
                          If Not nd6.ChildNodes Is Nothing Then
                            Call nd6.Sort
                            For iLev7 = 1 To nd6.ChildNodes.Count
                              Set nd7 = nd6.ChildNodes(iLev7)
                              If Not nd7.ChildNodes Is Nothing Then
                                Call nd7.Sort
                                For iLev8 = 1 To nd7.ChildNodes.Count
                                  Set nd8 = nd7.ChildNodes(iLev8)
                                  If Not nd8.ChildNodes Is Nothing Then
                                    Call nd8.Sort
                                    For iLev9 = 1 To nd8.ChildNodes.Count
                                      Set nd9 = nd8.ChildNodes(iLev9)
                                      If Not nd9.ChildNodes Is Nothing Then
                                        Call nd9.Sort
                                        For iLev10 = 1 To nd9.ChildNodes.Count
                                          Set nd10 = nd9.ChildNodes(iLev10)
                                          If Not nd10.ChildNodes Is Nothing Then
                                            Call nd10.Sort
                                            For iLev11 = 1 To nd10.ChildNodes.Count
                                              Set nd11 = nd10.ChildNodes(iLev11)
                                              If Not nd11.ChildNodes Is Nothing Then
                                                Call nd11.Sort
                                                For iLev12 = 1 To nd11.ChildNodes.Count
                                                  Set nd12 = nd11.ChildNodes(iLev12)
                                                  If Not nd12.ChildNodes Is Nothing Then
                                                    Call nd12.Sort
                                                    For iLev13 = 1 To nd12.ChildNodes.Count
                                                      Set nd13 = nd12.ChildNodes(iLev13)
                                                      If Not nd13.ChildNodes Is Nothing Then
                                                        Call nd13.Sort
                                                        For iLev14 = 1 To nd13.ChildNodes.Count
                                                          Set nd14 = nd13.ChildNodes(iLev14)
                                                          If Not nd14.ChildNodes Is Nothing Then
                                                            Call nd14.Sort
                                                            For iLev15 = 1 To nd14.ChildNodes.Count
                                                              Set nd15 = nd14.ChildNodes(iLev15)
                                                              If Not nd15.ChildNodes Is Nothing Then
                                                                Call nd15.Sort
                                                              End If
                                                            Next iLev15
                                                          End If
                                                        Next iLev14
                                                      End If
                                                    Next iLev13
                                                  End If
                                                Next iLev12
                                              End If
                                            Next iLev11
                                          End If
                                        Next iLev10
                                      End If
                                    Next iLev9
                                  End If
                                Next iLev8
                              End If
                            Next iLev7
                          End If
                        Next iLev6
                      End If
                    Next iLev5
                  End If
                Next iLev4
              End If
            Next iLev3
          End If
        Next iLev2
      End If
    Next iLev1
    
    ' Refresh the tree after sorting
    trvView.Refresh

    Exit Sub

Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.SortStructure"
    Exit Sub
End Sub

Sub SaveStructure(trvView As clsTreeView)
'
' Save the complete Structure
'
    Dim iLev1 As Integer
    Dim iLev2 As Integer
    Dim iLev3 As Integer
    Dim iLev4 As Integer
    Dim iLev5 As Integer
    Dim iLev6 As Integer
    Dim iLev7 As Integer
    Dim iLev8 As Integer
    Dim iLev9 As Integer
    Dim iLev10 As Integer
    Dim iLev11 As Integer
    Dim iLev12 As Integer
    Dim iLev13 As Integer
    Dim iLev14 As Integer
    Dim iLev15 As Integer
    Dim nd1 As clsNode
    Dim nd2 As clsNode
    Dim nd3 As clsNode
    Dim nd4 As clsNode
    Dim nd5 As clsNode
    Dim nd6 As clsNode
    Dim nd7 As clsNode
    Dim nd8 As clsNode
    Dim nd9 As clsNode
    Dim nd10 As clsNode
    Dim nd11 As clsNode
    Dim nd12 As clsNode
    Dim nd13 As clsNode
    Dim nd14 As clsNode
    Dim nd15 As clsNode
    Dim lngCount As Long
    Dim blnReturn As Boolean
    
    On Error GoTo Err_Trap
    
    If trvView.RootNodes Is Nothing Then
        ' No roots, so no structure to be sorted
        Exit Sub
    End If
    
    ' Loop through each RootNode and save its children if any
    lngCount = 0
    For iLev1 = 1 To trvView.RootNodes.Count
      Set nd1 = trvView.RootNodes(iLev1)
      blnReturn = SaveLevel(lngCount + 1, nd1.Level + 1, nd1.Caption)
      lngCount = lngCount + 1
      If Not nd1.ChildNodes Is Nothing Then
        For iLev2 = 1 To nd1.ChildNodes.Count
          Set nd2 = nd1.ChildNodes(iLev2)
          blnReturn = SaveLevel(lngCount + 1, nd2.Level + 1, nd2.Caption)
          lngCount = lngCount + 1
          If Not nd2.ChildNodes Is Nothing Then
            For iLev3 = 1 To nd2.ChildNodes.Count
              Set nd3 = nd2.ChildNodes(iLev3)
              blnReturn = SaveLevel(lngCount + 1, nd3.Level + 1, nd3.Caption)
              lngCount = lngCount + 1
              If Not nd3.ChildNodes Is Nothing Then
                For iLev4 = 1 To nd3.ChildNodes.Count
                  Set nd4 = nd3.ChildNodes(iLev4)
                  blnReturn = SaveLevel(lngCount + 1, nd4.Level + 1, nd4.Caption)
                  lngCount = lngCount + 1
                  If Not nd4.ChildNodes Is Nothing Then
                    For iLev5 = 1 To nd4.ChildNodes.Count
                      Set nd5 = nd4.ChildNodes(iLev5)
                      blnReturn = SaveLevel(lngCount + 1, nd5.Level + 1, nd5.Caption)
                      lngCount = lngCount + 1
                      If Not nd5.ChildNodes Is Nothing Then
                        For iLev6 = 1 To nd5.ChildNodes.Count
                          Set nd6 = nd5.ChildNodes(iLev6)
                          blnReturn = SaveLevel(lngCount + 1, nd6.Level + 1, nd6.Caption)
                          lngCount = lngCount + 1
                          If Not nd6.ChildNodes Is Nothing Then
                            For iLev7 = 1 To nd6.ChildNodes.Count
                              Set nd7 = nd6.ChildNodes(iLev7)
                              blnReturn = SaveLevel(lngCount + 1, nd7.Level + 1, nd7.Caption)
                              lngCount = lngCount + 1
                              If Not nd7.ChildNodes Is Nothing Then
                                For iLev8 = 1 To nd7.ChildNodes.Count
                                  Set nd8 = nd7.ChildNodes(iLev8)
                                  blnReturn = SaveLevel(lngCount + 1, nd8.Level + 1, nd8.Caption)
                                  lngCount = lngCount + 1
                                  If Not nd8.ChildNodes Is Nothing Then
                                    For iLev9 = 1 To nd8.ChildNodes.Count
                                      Set nd9 = nd8.ChildNodes(iLev9)
                                      blnReturn = SaveLevel(lngCount + 1, nd9.Level + 1, nd9.Caption)
                                      lngCount = lngCount + 1
                                      If Not nd9.ChildNodes Is Nothing Then
                                        For iLev10 = 1 To nd9.ChildNodes.Count
                                          Set nd10 = nd9.ChildNodes(iLev10)
                                          blnReturn = SaveLevel(lngCount + 1, nd10.Level + 1, nd10.Caption)
                                          lngCount = lngCount + 1
                                          If Not nd10.ChildNodes Is Nothing Then
                                            For iLev11 = 1 To nd10.ChildNodes.Count
                                              Set nd11 = nd10.ChildNodes(iLev11)
                                              blnReturn = SaveLevel(lngCount + 1, nd11.Level + 1, nd11.Caption)
                                              lngCount = lngCount + 1
                                              If Not nd11.ChildNodes Is Nothing Then
                                                For iLev12 = 1 To nd11.ChildNodes.Count
                                                  Set nd12 = nd11.ChildNodes(iLev12)
                                                  blnReturn = SaveLevel(lngCount + 1, nd12.Level + 1, nd12.Caption)
                                                  lngCount = lngCount + 1
                                                  If Not nd12.ChildNodes Is Nothing Then
                                                    For iLev13 = 1 To nd12.ChildNodes.Count
                                                      Set nd13 = nd12.ChildNodes(iLev13)
                                                      blnReturn = SaveLevel(lngCount + 1, nd13.Level + 1, nd13.Caption)
                                                      lngCount = lngCount + 1
                                                      If Not nd13.ChildNodes Is Nothing Then
                                                        For iLev14 = 1 To nd13.ChildNodes.Count
                                                          Set nd14 = nd13.ChildNodes(iLev14)
                                                          blnReturn = SaveLevel(lngCount + 1, nd14.Level + 1, nd14.Caption)
                                                          lngCount = lngCount + 1
                                                          If Not nd14.ChildNodes Is Nothing Then
                                                            For iLev15 = 1 To nd14.ChildNodes.Count
                                                              Set nd15 = nd14.ChildNodes(iLev15)
                                                              blnReturn = SaveLevel(lngCount + 1, nd15.Level + 1, nd15.Caption)
                                                              lngCount = lngCount + 1
                                                            Next iLev15
                                                          End If
                                                        Next iLev14
                                                      End If
                                                    Next iLev13
                                                  End If
                                                Next iLev12
                                              End If
                                            Next iLev11
                                          End If
                                        Next iLev10
                                      End If
                                    Next iLev9
                                  End If
                                Next iLev8
                              End If
                            Next iLev7
                          End If
                        Next iLev6
                      End If
                    Next iLev5
                  End If
                Next iLev4
              End If
            Next iLev3
          End If
        Next iLev2
      End If
    Next iLev1
    
    Exit Sub

Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.SaveStructure"
    Exit Sub
End Sub

Sub StructureSortAndSave(trvView As clsTreeView)
'
' Sort and Save the structure tree on form Structure to the sheet
'
    Dim nd1 As clsNode
    Dim nd2 As clsNode
    Dim nd3 As clsNode
    Dim nd4 As clsNode
    Dim lngCount As Long
    Dim blnReturn As Boolean
    Dim iLev1 As Integer
    Dim iLev2 As Integer
    Dim iLev3 As Integer
    Dim iLev4 As Integer
    Dim iFirstRoot As Integer
    Dim iLastRoot As Integer
    
    On Error GoTo Err_Trap
    
    ClearStructureSheet ' Clear the current contents of the Structure Sheet
    
    If trvView.RootNodes Is Nothing Then
        ' No roots, so no structure to be saved
        Exit Sub
    End If
    
' Removed whole tree sort - now sorting children of parent when children added
'    ' Sort the whole tree
'    SortStructure trvView
    
    ' Save the whole tree
    SaveStructure trvView
    
    Excel.ActiveWorkbook.Save  ' Save the entire workbook
    
    mblnStructureChanged = False ' Clear the Structure has changed flag
    
    Exit Sub

Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.StructureSortAndSave"
    Exit Sub
End Sub

Function SaveLevel(ByVal lngRow As Long, ByVal lngLevel As Long, ByVal strLevelName As String) As Boolean
'
' Save a Structure node to a cell of the Structure sheet
'
    Dim lngLev As Long
    
    On Error GoTo Err_Trap
    
    mshtStructure.UsedRange.Cells(lngRow, lngLevel) = GetShortPartIdentifierText(strLevelName)

    SaveLevel = True
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.SaveLevel"
    SaveLevel = False
    Exit Function
End Function

Function FindPartInList(ByVal strContractorPartNumber As String) As Boolean
'
' strContractorPartNumber passed in
' Return True if found and highlight the row
'
    Dim lngTotalEntries As Long
    Dim lngEntry As Long
    Dim lngLength As Long
    
    On Error GoTo Err_Trap
    
    ClearListSelection ' Clear any existing selection
    
    lngLength = Len(strContractorPartNumber)
    
    lngTotalEntries = frmStructure.lstChildPartSelect.ListCount ' Number of list box entries selected
    
    For lngEntry = 0 To lngTotalEntries - 1
        If Left$(frmStructure.lstChildPartSelect.List(lngEntry), lngLength) = Trim(UCase(strContractorPartNumber)) Then
            ' Found first match in list
            frmStructure.lstChildPartSelect.Selected(lngEntry) = True
            Exit For
        End If
    Next lngEntry
    
    FindPartInList = True
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "FindPartInList"
    FindPartInList = False
    Exit Function
End Function

Sub AddStructureParentNode(ByVal lngPartRow As Long)
'
' Add the Parent Part at the passed Part Data row to the Structure Sheet
' SHORT part text is saved in the sheet
'
    Dim lngTotalStruct As Long
    Dim lngStructureRow As Long
    
    On Error GoTo Err_Trap
    
    ' Add the Parent identifier to the next available structure row
    lngTotalStruct = mshtStructure.UsedRange.Rows.Count
    lngStructureRow = lngTotalStruct + 1 ' Next available row
    If lngTotalStruct <= 1 Then
        ' If the count is 1, it could mean that 1 row is occupied, or no rows occupied - check this
        If mshtStructure.UsedRange.Cells(1, 1) = "" Then
            ' No rows filled
            lngStructureRow = 1 ' Next available row
        Else
            lngStructureRow = 2 ' Next available row
        End If
    End If
    mshtStructure.UsedRange.Cells(lngStructureRow, 1) = GetPartIdentifierText(lngPartRow, "SHORT")
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modStructure.AddStructureParentNode"
    Exit Sub
End Sub

Function ExpandTree(trvView As clsTreeView, _
                    ByVal blnExpand As Boolean) As Boolean
'
' Expand or Collapse the whole tree diagram
' depending on blnExpand = True or False
'
    Dim nd1 As clsNode
    
    On Error GoTo Err_Trap
    
    ClearCurrentPart ' Clear any current part - this also clears any highlights on the tree.

    For Each nd1 In trvView.Nodes
        nd1.Expanded = blnExpand
    Next nd1
       
    trvView.Refresh
   
    ExpandTree = True
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.ExpandTree"
    ExpandTree = False
    Exit Function
End Function

Function TreeFind(ByVal strContractorPartNumber As String) As String
'
' Return the first occurrence of strContractorPartNumber in the tree
'
    Dim rngMatchRange As Range
    
    On Error GoTo Err_Trap
    
    TreeFind = ""
    
    ' Search Structure Data sheet for match
    Set rngMatchRange = mshtStructure.UsedRange.Find(strContractorPartNumber)
        
    If Not rngMatchRange Is Nothing Then
        ' Contractor Part Number found
        TreeFind = strContractorPartNumber
    End If
    
    Exit Function
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "modDSStructure.TreeFind"
    TreeFind = ""
    Exit Function
End Function

Sub ClearListSelection()
'
' Clear any selection highlights
'
    Dim lngTotalEntries As Long
    Dim lngEntry As Long
    
    On Error GoTo Err_Trap
    
    lngTotalEntries = frmStructure.lstChildPartSelect.ListCount ' Number of list box entries selected
    
    For lngEntry = 0 To lngTotalEntries - 1
        frmStructure.lstChildPartSelect.Selected(lngEntry) = False
    Next lngEntry
    
    Exit Sub
Err_Trap:
    MsgBox Err.Description & " " & Err.Number, vbExclamation, "ClearListSelection"
    Exit Sub
End Sub





' InQuest injected base64 decoded content
' ~`ZrD
' bt*'~(.
' 54@	3@0
' 54@	3T0
' 54@	3
' 54@	3
' bu+k
' z{Cj
' I^q+Z
' .j{b
' 1rS(
' 1rS(
' Qzj-x
' 	*^r&
' 	*^r&
' 	*^r&
' 	*^r&
' 	*^r&
' 	*^r&
' +x*'v+b
' /j)ZnW
' I^sME
' I^sMK
' I^sMOy
' I^sMOy
' I^sMR
' I^sM
' I^sM
' I^sM
' I^sM
' I^sM
' I^sM
' I^sM
' I^sM
' I^sM
' I^sM
' I^sN
' I^sN
' I^sN
' I^sN
' I^sN
' I^sNE
' I^sNK
' I^sNOy
' I^sNOy
' I^sNR
' I^sN
' I^sN
' I^sN
' I^sN
' I^sN
' I^q+Z
' rgQzZ
' k"jh
' k"jh
' k"jh
' z{b~'
' CI:)
' CI:)
' z{b~'
' bu+k

INQUEST-PP=macro
