Attribute VB_Name = "Hoja1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "btnMetodoPago, 66, 4, MSForms, CommandButton"
Attribute VB_Control = "btnFormaPago, 65, 5, MSForms, CommandButton"
Attribute VB_Control = "btnAbrirEmpresa, 16, 6, MSForms, CommandButton"
Private Sub btnAbrirEmpresa_Click()
    If LeerEmpresaPuntodeVenta = 0 Then
        frmSeleccionEmpresa.Show
    End If
    InicializaModelo
End Sub

Public Sub btnFormaPago_Click()
    Dim lColumna1 As String
    Dim lBuffer As String

    Application.EnableCancelKey = xlDisabled

    Range("FORMA").Select
   
    lBuffer = Space(256)
    lColumna1 = "<INI>,Anexo3.3.ini,FormaPago,SeccionValores,25,,0," & Chr(0)
    rDlgSeleccion 1, lBuffer, lColumna1
    If Mid(lBuffer, 1, 1) <> Chr(0) Then
        Range("FORMA").Value = Cells(lBuffer, "AA").Value
    End If
    
End Sub

Public Sub btnMetodoPago_Click()
    Dim lColumna1 As String
    Dim lBuffer As String * 3
    
    Application.EnableCancelKey = xlDisabled

    Range("METODO").Select
   
    lBuffer = Space(256)
    lColumna1 = "<INI>,Anexo3.3.ini,MetodoPago,SeccionValores,25,,0," & Chr(0)
    rDlgSeleccion 1, lBuffer, lColumna1
    If Mid(lBuffer, 1, 1) <> Chr(0) Then
        If lBuffer = "PUE" Then
            Range("METODO").Value = Cells(1, "AB").Value
        Else
            Range("METODO").Value = Cells(2, "AB").Value
        End If
    End If
    
End Sub
Attribute VB_Name = "Hoja2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Hoja4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "RbtnMoneda, 10, 2, MSForms, CommandButton"
Attribute VB_Control = "RbtnConcepto, 9, 3, MSForms, CommandButton"
Attribute VB_Control = "RbtnAlCliente, 5, 4, MSForms, CommandButton"
Attribute VB_Control = "RbtnDelCliente, 6, 5, MSForms, CommandButton"
Attribute VB_Control = "RDesplegar, 7, 6, MSForms, CommandButton"
Attribute VB_Control = "RGenerar, 8, 7, MSForms, CommandButton"
Public Sub RbtnConcepto_Click()
    ConsultaCatalogo (5)
End Sub

Public Sub RbtnDelCliente_Click()
    ConsultaCatalogo (1)
End Sub

Public Sub RbtnAlCliente_Click()
    ConsultaCatalogo (2)
End Sub

Public Sub RbtnMoneda_Click()
    ConsultaCatalogo (7)
End Sub

Public Sub RDesplegar_Click()
    DesplegarDocumentos (0)
End Sub


Public Sub RGenerar_Click()
    GrabarDocumentos (0)
End Sub

Public Sub DesplegarCatalogoF3()
    If ActiveSheet.Name = "Ayuda" Then
        GoTo fin
    End If
    ' se establece con cual hoja se trabaja
    On Error GoTo FacturasPuente
    If Not Intersect(ActiveCell, ActiveSheet.Range("RConcepto")) Is Nothing Then
        Call RbtnConcepto_Click
        GoTo fin
    End If
    If Not Intersect(ActiveCell, ActiveSheet.Range("RMoneda")) Is Nothing Then
        Call RbtnMoneda_Click
        GoTo fin
    End If
    If Not Intersect(ActiveCell, ActiveSheet.Range("RDelCliente")) Is Nothing Then
        Call RbtnDelCliente_Click
        GoTo fin
    End If
    If Not Intersect(ActiveCell, ActiveSheet.Range("RAlCliente")) Is Nothing Then
        Call RbtnAlCliente_Click
        GoTo fin
    End If
    GoTo fin
'FacturasPuente es utilizado como transici|fffd|n a Facturas, ya que si no se utiliza "Resume", Excel sigue considerando que se encuentra dentro de un error, por lo que no servir|fffd|a un segundo
'"On Error GoTo". Con FacturasPuente, se puede incluir los F3 de la hoja de par|fffd|metros para las formas de pago y los m|fffd|todos de pago.
FacturasPuente:
    Resume Facturas
Facturas:
    On Error GoTo Parametros
    If Not Intersect(ActiveCell, ActiveSheet.Range("FConcepto")) Is Nothing Then
        Call Hoja5.FbtnConcepto_Click
        GoTo fin
    End If
    If Not Intersect(ActiveCell, ActiveSheet.Range("FMoneda")) Is Nothing Then
        Call Hoja5.FbtnMoneda_Click
        GoTo fin
    End If
    If Not Intersect(ActiveCell, ActiveSheet.Range("FDelCliente")) Is Nothing Then
        Call Hoja5.FbtnDelCliente_Click
        GoTo fin
    End If
    If Not Intersect(ActiveCell, ActiveSheet.Range("FAlCliente")) Is Nothing Then
        Call Hoja5.FbtnAlCliente_Click
        GoTo fin
    End If
    If Not Intersect(ActiveCell, ActiveSheet.Range("FCodServicio1")) Is Nothing Then
        Call Hoja5.FbtnSer1_Click
        GoTo fin
    End If
    If Not Intersect(ActiveCell, ActiveSheet.Range("FCodServicio2")) Is Nothing Then
        Call Hoja5.FbtnSer2_Click
        GoTo fin
    End If
    If Not Intersect(ActiveCell, ActiveSheet.Range("FCodServicio3")) Is Nothing Then
        Call Hoja5.FbtnSer3_Click
        GoTo fin
    End If
    If Not Intersect(ActiveCell, ActiveSheet.Range("FCodServicio4")) Is Nothing Then
        Call Hoja5.FbtnSer4_Click
        GoTo fin
    End If
    If Not Intersect(ActiveCell, ActiveSheet.Range("FCodServicio5")) Is Nothing Then
        Call Hoja5.FbtnSer5_Click
        GoTo fin
    End If
    GoTo fin
Parametros:
    If Not Intersect(ActiveCell, ActiveSheet.Range("FORMA")) Is Nothing Then
        Call Hoja1.btnFormaPago_Click
        GoTo fin
    End If
    If Not Intersect(ActiveCell, ActiveSheet.Range("METODO")) Is Nothing Then
        Call Hoja1.btnMetodoPago_Click
        GoTo fin
    End If
fin:

End Sub

Private Sub Worksheet_Activate()
    Range("RFecha").Value = Now
End Sub

Attribute VB_Name = "Hoja5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "FbtnAlCliente, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "FbtnDelCliente, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "FDesplegar, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "FGenerar, 4, 3, MSForms, CommandButton"
Attribute VB_Control = "FbtnConcepto, 5, 4, MSForms, CommandButton"
Attribute VB_Control = "FbtnMoneda, 6, 5, MSForms, CommandButton"
Attribute VB_Control = "FbtnSer1, 7, 6, MSForms, CommandButton"
Attribute VB_Control = "FbtnSer2, 8, 7, MSForms, CommandButton"
Attribute VB_Control = "FbtnSer3, 9, 8, MSForms, CommandButton"
Attribute VB_Control = "FbtnSer4, 10, 9, MSForms, CommandButton"
Attribute VB_Control = "FbtnSer5, 11, 10, MSForms, CommandButton"
Public Sub FbtnConcepto_Click()
    ConsultaCatalogo (6)
End Sub

Public Sub FbtnDelCliente_Click()
    ConsultaCatalogo (3)
End Sub

Public Sub FbtnAlCliente_Click()
    ConsultaCatalogo (4)
End Sub

Public Sub FbtnMoneda_Click()
    ConsultaCatalogo (8)
End Sub

Public Sub FbtnSer1_Click()
    ConsultaCatalogo (9)
End Sub
Public Sub FbtnSer2_Click()
    ConsultaCatalogo (10)
End Sub
Public Sub FbtnSer3_Click()
    ConsultaCatalogo (11)
End Sub
Public Sub FbtnSer4_Click()
    ConsultaCatalogo (12)
End Sub
Public Sub FbtnSer5_Click()
    ConsultaCatalogo (13)
End Sub

Private Sub FDesplegar_Click()
    DesplegarDocumentos (1)
End Sub

Private Sub FGenerar_Click()
    GrabarDocumentos (1)
End Sub


Private Sub Worksheet_Activate()
    Range("FFecha").Value = Now
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "frmSeleccionEmpresa"
Attribute VB_Base = "0{E1F29862-A24C-46A1-AA90-7B8B879F31B1}{245CC330-7B57-40BE-952D-5A2B7CB430AE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub lstEmpresas_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    selecciona
End Sub

Private Sub lstEmpresas_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    
    If KeyAscii = 13 Then
        selecciona
    End If
    
    If KeyAscii = 27 Then
        frmSeleccionEmpresa.Hide
    End If
End Sub

Private Sub selecciona()
    Dim lNombre As String
    Dim lArchivos As String
    Dim iResult As Integer
    
    lNombre = frmSeleccionEmpresa.lstEmpresas.List(frmSeleccionEmpresa.lstEmpresas.ListIndex, 0)
    lArchivos = frmSeleccionEmpresa.lstEmpresas.List(frmSeleccionEmpresa.lstEmpresas.ListIndex, 1)
    frmSeleccionEmpresa.Hide
    Worksheets("Par|fffd|metros").Unprotect
    Range("NombreEmpresa").Value = lNombre
    Range("UbicacionEmpresa").Value = lArchivos
    Range("EstadoEmpresa").Value = "ABIERTA"
    Worksheets("Par|fffd|metros").Protect
    'dbLogOut (hDbc)
    hDbc = dbLogIn("Usuario MS Excel", Trim(Range("UbicacionEmpresa").Value))
End Sub


Attribute VB_Name = "mDeclaraciones"
Option Explicit
Public Const kInicio = 22

Public Const kCodigo = 1
Public Const kNombre = 2
Public Const kServicio = 3
Public Const kNombreSer = 4
Public Const kTotal = 5
Public Const kSerie = 6
Public Const kFolio = 7
Public Const kNeto = 8
Public Const kIva = 9
Public Const kISR = 10
Public Const kIVAISR = 11


Public Const kDefaultMoneda = "1"
Public Const kDefaultRecibo = "12"
Public Const kDefaultFactura = "4"

'Empresas , directorio global, ubicaciones de las empresas
Public Const GEMPRESAS = "Mgw00001"
Public Const IxNOMEMPRESA = "CNOMBREE01"

Public Const Parametros = "Mgw10000"
Public Const IxPARAMETROS = "PrimaryKey"

Public Const CLIENTES = "Mgw10002"
Public Const IxICODIGOT01 = "ICODIGOT01"

Public Const DOCTOS = "Mgw10008"
Public Const IxICLIENTE01 = "ICLIENTE01"
Public Const IxDOCTOS = "PrimaryKey"

Public Const CONCEPTOS = "Mgw10006"
Public Const IxCCODIGOC01 = "CCODIGOC01"

Public Const MONEDAS = "Mgw10034"
Public Const IxMONEDAS = "PrimaryKey"

Public Const PRODUCTOS = "Mgw10005"

Public Const MOVTOS = "Mgw10010"
Public Const IxIDOCTONU01 = "IDOCTONU01"


Public Const kLongCodigo As Integer = 30 + 1
Public Const kLongNombre As Integer = 60 + 1
Public Const kLongNombreProducto As Integer = 255 + 1
Public Const kLongFecha As Integer = 23 + 1
Public Const kLongAbreviatura As Integer = 3 + 1
Public Const kLongCodValorClasif As Integer = 3 + 1
Public Const kLongTextoExtra As Integer = 50 + 1
Public Const kLongNumSerie As Integer = 11 + 1
Public Const kLongReferencia As Integer = 20 + 1
Public Const kLongSeries As Integer = 30 + 1
Public Const kLongDescripcion As Integer = 60 + 1
Public Const kLongNumeroExtInt As Integer = 6 + 1
Public Const kLongCodigoPostal As Integer = 6 + 1
Public Const kLongTelefono As Integer = 15 + 1
Public Const kLongEmailWeb As Integer = 50 + 1
Public Const kLongRFC As Integer = 20 + 1
Public Const kLongCURP As Integer = 20 + 1
Public Const kLongDesCorta As Integer = 20 + 1
Public Const kLongDenComercial As Integer = 50 + 1
Public Const kLongRepLegal As Integer = 50 + 1


' Registro para Documentos
Public Type tDocumento
  aFolio As Double
  aNumMoneda As Long
  aTipoCambio As Double
  aImporte As Double
  aDescuentoDoc1 As Double
  aDescuentoDoc2 As Double
  aSistemaOrigen As Long
  aCodConcepto As String * kLongCodigo
  aSerie As String * kLongNumSerie
  aFecha As String * kLongFecha
  aCodigoCteProv As String * kLongCodigo
  aCodigoAgente As String * kLongCodigo
  aReferencia As String * kLongReferencia
  aAfecta As Long
End Type

' Registro para Movimientos
Public Type tMovimiento
  aConsecutivo As Long
  aUnidades As Double
  aPrecio As Double
  aCosto As Double
  aCodProdSer As String * kLongCodigo
  aCodAlmacen As String * kLongCodigo
  aReferencia As String * kLongReferencia
  aCodClasificacion As String * kLongCodigo
End Type

' Registro de la llave del documento
Public Type tLlaveDocto
  aCodConcepto As String * kLongCodigo
  aSerie As String * kLongNumSerie
  aFolio As Double
End Type

' API's de Windows para accesos al RegistryDB
Public Declare Function RegOpenKeyEx Lib "advapi32" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
Public Declare Function RegCloseKey Lib "advapi32" (ByVal hKey As Long) As Long
Public Declare Function RegQueryValueEx Lib "advapi32" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, ByRef lpType As Long, ByVal szData As String, ByRef lpcbData As Long) As Long
Public Declare Function SetCurrentDirectory Lib "KERNEL32" Alias "SetCurrentDirectoryA" (ByVal pPtrDirActual As String) As Integer

'Funciones del DBFWIN32
Public Declare Function dbLogIn Lib "DBFWIN32.DLL" (ByVal UserName As String, ByVal FilePath As String) As Long
Public Declare Sub dbLogOut Lib "DBFWIN32.DLL" (ByVal hDbc As Long)
Public Declare Function dbGetNoLock Lib "DBFWIN32.DLL" Alias "dbGetNoLockBDE" (ByVal hDbc As Long, ByVal FileName As String, ByVal TagName As String, ByVal Key As String) As Long
Public Declare Function dbGetTopNoLock Lib "DBFWIN32.DLL" (ByVal hDbc As Long, ByVal FileName As String, ByVal TagName As String) As Long
Public Declare Function dbGetBottomNoLock Lib "DBFWIN32.DLL" (ByVal hDbc As Long, ByVal FileName As String, ByVal TagName As String) As Long
Public Declare Function dbSkip Lib "DBFWIN32.DLL" (ByVal hDbc As Long, ByVal FileName As String, ByVal TagName As String, ByVal DIRECCION As Long) As Long

' Funciones de obtenci|fffd|n de valores de los campos por su nombre
Public Declare Function dbFieldNameChar Lib "DBFWIN32.DLL" (ByVal hDbc As Long, ByVal FileName As String, ByVal FieldName As String, ByVal Buffer As String, ByVal nlen As Integer) As Long
Public Declare Function dbFieldNameLong Lib "DBFWIN32.DLL" (ByVal hDbc As Long, ByVal FileName As String, ByVal FieldName As String, lpLong As Long) As Long
Public Declare Function dbFieldNameDouble Lib "DBFWIN32.DLL" (ByVal hDbc As Long, ByVal FileName As String, ByVal FieldName As String, lpDouble As Double) As Long

' Fuciones para almacenar el registro sobre el que se estas
Public Declare Function dbKey Lib "DBFWIN32.DLL" (ByVal hDbc As Long, ByVal FileName As String, ByVal TagName As String, ByVal Key As String, ByVal nlen As Integer) As Long
Public Declare Function dbKeySet Lib "DBFWIN32.DLL" (ByVal hDbc As Long, ByVal FileName As String, ByVal TagName As String, ByVal Key As String, ByVal nlen As Integer) As Long

' API's de Compac para el despliegue de cat|fffd|logos
Public Declare Function MCC_CreaComponente Lib "CAC100" (ByVal pNombreComponente As String, ByVal pPadre As String) As Long
Public Declare Function MCC_PonPropiedad Lib "CAC100" (ByVal pPtrComponente As Long, ByVal pNombrePropiedad As String, ByVal pValorPropiedad As String, ByVal pPtrCACForma As String) As Long
Public Declare Sub MCC_EjecutaMetodo Lib "CAC100" (ByVal pPtrComponente As Long, ByVal pNombreMetodo As String, ByVal pIdControl As Long, ByVal pPtrTabla As String, ByVal pPtrInformacion As String)
Public Declare Function MCC_PidePropiedad Lib "CAC100" (ByVal pPtrComponente As Long, ByVal pNombrePropiedad As String, ByVal pValorPropiedad As String) As Long
Public Declare Function MCC_DestruyeComponente Lib "CAC100" (ByVal pPtrComponente As Long) As Long

Public Declare Function rDlgSeleccion Lib "CAC100" (ByVal pTipoSeleccion As Long, ByVal pCadena As String, ByVal pConfiguracion As String) As Long

' Funciones del SDK para dar de alta documentos
Public Declare Function fSiguienteFolio Lib "MGW_SDK.DLL" (ByVal aCodigoConcepto As String, ByVal aNumSerie As String, ByRef aFolio As Double) As Long
Public Declare Function fAltaDocumentoCargoAbono Lib "MGW_SDK.DLL" (aDocumento As tDocumento) As Long
Public Declare Function fSaldarDocumento Lib "MGW_SDK.DLL" (aDoctoAPagar As tLlaveDocto, aDoctoPago As tLlaveDocto, ByVal aImporte As Double, ByVal aIdMoneda As Long, ByVal aFecha As String) As Long
Public Declare Function fAfectaDocto Lib "MGW_SDK.DLL" (aLlaveDocto As tLlaveDocto, ByVal aAfecta As Long) As Long
Public Declare Function fBuscaDocumento Lib "MGW_SDK.DLL" (aLlaveDocto As tLlaveDocto) As Long
Public Declare Function fEditarDocumento Lib "MGW_SDK.DLL" () As Long
Public Declare Function fGuardaDocumento Lib "MGW_SDK.DLL" () As Long
Public Declare Function fSetDatoDocumento Lib "MGW_SDK.DLL" (ByVal aCampo As String, ByVal aValor As String) As Long
Public Declare Function fBorraDocumento Lib "MGW_SDK.DLL" () As Long
Public Declare Function fBuscaConceptoDocto Lib "MGW_SDK.DLL" (ByVal aCodConcepto As String) As Integer
Public Declare Function fLeeDatoDocumento Lib "MGW_SDK.DLL" (ByVal aCampo As String, ByVal aValor As String, ByVal aLen As Long) As Long
Public Declare Function fCancelarModificacionDocumento Lib "MGW_SDK.DLL" () As Long
Public Declare Function fInsertarDocumento Lib "MGW_SDK.DLL" () As Long
Public Declare Function fAltaDocumento Lib "MGW_SDK.DLL" (ByRef aIdDocto As Long, aDocto As tDocumento) As Long


' Funciones de movimientos bajo nivel
Public Declare Function fSetDatoMovimiento Lib "MGW_SDK.DLL" (ByVal aCampo As String, ByVal aValor As String) As Long
Public Declare Function fLeeDatoMovimiento Lib "MGW_SDK.DLL" (ByVal aCampo As String, ByVal aValor As String, ByVal aLen As Long) As Long
Public Declare Function fAltaMovimiento Lib "MGW_SDK.DLL" (ByVal aDoctoId As Long, ByRef aMovtoId As Long, aMovto As tMovimiento) As Long
Public Declare Function fInsertarMovimiento Lib "MGW_SDK.DLL" () As Long
Public Declare Function fGuardaMovimiento Lib "MGW_SDK.DLL" () As Long
Public Declare Function fEditarMovimiento Lib "MGW_SDK.DLL" () As Long
Public Declare Function fCancelaCambiosMovimiento Lib "MGW_SDK.DLL" () As Long

' Constantes de llaves del Registry
Public Const HKEY_LOCAL_MACHINE = &H80000002
Public Const szRegKeyPuntodeVenta = "SOFTWARE\Computaci|fffd|n en Acci|fffd|n, SA CV\Punto de Venta i"
'Public Const szRegKeyAdminPAQ = "SOFTWARE\Computaci|fffd|n en Acci|fffd|n, SA CV\AdminPAQ"
Public Const szRegKeyAdminPAQ = "SOFTWARE\Computaci|fffd|n en Acci|fffd|n, SA CV\CONTPAQ I Facturacion"
Public Const kFACTURACION_I = "CONTPAQ I Facturacion"

Public Declare Function fSetNombrePAQ Lib "MGW_SDK.DLL" (ByVal aNombrePAQ As String) As Long
Public Declare Function fInicializaSDK Lib "MGW_SDK.DLL" () As Integer
Public Declare Function fAbreEmpresa Lib "MGW_SDK.DLL" (ByVal aEmpresa As String) As Integer
Public Declare Sub fCierraEmpresa Lib "MGW_SDK.DLL" ()
Public Declare Sub fTerminaSDK Lib "MGW_SDK.DLL" ()

Public Declare Function fBuscaCteProv Lib "MGW_SDK.DLL" (ByVal aCodCteProv As String) As Long
Public Declare Function fLeeDatoCteProv Lib "MGW_SDK.DLL" (ByVal aCampo As String, ByVal aValor As String, ByVal aLongitud As Long) As Long
Public Declare Function fEditaCteProv Lib "MGW_SDK.DLL" () As Long
Public Declare Function fGuardaCteProv Lib "MGW_SDK.DLL" () As Long
Public Declare Function fSetDatoCteProv Lib "MGW_SDK.DLL" (ByVal aCampo As String, ByVal aValor As String) As Integer
Public Declare Function fPosPrimerCteProv Lib "MGW_SDK.DLL" () As Long
Public Declare Function fPosSiguienteCteProv Lib "MGW_SDK.DLL" () As Long

'Funciones para obtener el n|fffd|mero de error
Public Declare Sub fError Lib "MGW_SDK.DLL" (ByVal aNumError As Long, ByVal aError As String, ByVal aLen As Long)
Public hDbc As Long
Public gCuenta As String
Public szDirectorioDatos As String
Public Const sNull As String = 0&
Public gIdAjusteCliente As Long
Public gIdAjusteProveedor As Long
Attribute VB_Name = "mDocumentos"
Option Explicit


Public Sub DesplegarDocumentos(aTipo As Integer)
Dim i As Integer
Dim lRenglon As Long
Dim lError As Long
Dim sDel As String
Dim sAl As String
Dim sFecha As String
Dim sConcepto As String
Dim sProcesando As String
Dim sHoja As String
Dim sMoneda As String
Dim sTipoCambio As String
Dim sReferencia As String
Dim sObservaciones As String
Dim sCodServicio As String
Dim sTotal As String
Dim sTemp As String * 255
Dim lTipo As Long
Dim lIdCodigo As Long
Dim sCodigo As String
Dim sNombre As String
Dim sNombreSer As String
Dim sPrecio As String
Dim Estatus As Long
Dim EsCFD As Long
Dim VersionCFD As Long
Dim Esquema As String * 26
   
   If aTipo = 0 Then ' Recibo de Honorarios
    sDel = "RDelCliente"
    sAl = "RAlCliente"
    sProcesando = "RProceso"
    sHoja = ActiveSheet.Name
    sConcepto = "RCodConcepto"
    sFecha = "RFecha"
    sMoneda = "RCodMoneda"
    sTipoCambio = "RTipoCambio"
    sTotal = "RTotal"
    sReferencia = "RReferencia"
    sObservaciones = "RObservacion"
   Else  'Facturas
    sDel = "FDelCliente"
    sAl = "FAlCliente"
    sProcesando = "FProceso"
    sHoja = ActiveSheet.Name
    sConcepto = "FCodConcepto"
    sFecha = "FFecha"
    sMoneda = "FCodMoneda"
    sTipoCambio = "FTipoCambio"
    sTotal = "FTotal"
    sReferencia = "FReferencia"
    sCodServicio = "FCodServicio"
    sPrecio = "FPrecio"
   End If
     
   ' Activa la hoja de listas de clientes/proveedores
   Worksheets(sHoja).Select
   
   With Worksheets(sHoja)
             
   Application.Cursor = xlWait
   Application.DisplayAlerts = False
   '.Unprotect
   ' Elimina los datos anteriores
   lRenglon = kInicio
   'Busca el ultimo renglon del reporte
   While .Cells(lRenglon, kCodigo).Value <> ""
     lRenglon = lRenglon + 1
   Wend
   lRenglon = lRenglon - 1
   If lRenglon >= kInicio Then
      ' Elimina los valores anteriores
       .Rows(Trim(Str(kInicio)) & ":" & Trim(Str(lRenglon))).Select
       Selection.Delete Shift:=xlUp
   End If
        
   ' Abre la empresa
   DirectorioBase
   lError = fAbreEmpresa(Worksheets("Par|fffd|metros").Range("UbicacionEmpresa").Value)
          
   ' Arregla el concepto
   If Range(sConcepto).Value = "" And aTipo = 0 Then Range(sConcepto).Value = kDefaultRecibo
   If Range(sConcepto).Value = "" And aTipo = 1 Then Range(sConcepto).Value = kDefaultFactura
   If dbGetNoLock(hDbc, CONCEPTOS, IxCCODIGOC01, Trim(Range(sConcepto).Value)) = 0 Then
        dbFieldNameLong hDbc, CONCEPTOS, "cEstatus", Estatus
        If Estatus = 0 Then
            MsgBox "El concepto est|fffd| inactivo", vbOKOnly
            GoTo fin:
        End If
        dbFieldNameLong hDbc, CONCEPTOS, "cEsCFD", EsCFD
        dbFieldNameLong hDbc, CONCEPTOS, "cVerFacEle", VersionCFD
        dbFieldNameChar hDbc, CONCEPTOS, "cVerEsque", Esquema, 26
        If EsCFD = 1 And VersionCFD = 2 And Trim(fEliminaEspaciosNulos2(Esquema)) = "3.3" Then
            If Len(Worksheets("Par|fffd|metros").Range("LUGAR").Value) <> 5 Or CLng(Worksheets("Par|fffd|metros").Range("LUGAR").Value) = 0 Or CLng(Worksheets("Par|fffd|metros").Range("LUGAR").Value) > 99999 Then
                MsgBox "El lugar de expedici|fffd|n debe de ser un c|fffd|digo postal", vbOKOnly
                GoTo fin:
            End If
        End If
   End If
      
   ' Arregla los rangos de clientes
   If Range(sDel).Value = "" Then
      lError = dbGetTopNoLock(hDbc, CLIENTES, IxICODIGOT01)
      dbFieldNameChar hDbc, CLIENTES, "ccodigoc01", sTemp, 255
      sCodigo = Trim(fEliminaEspaciosNulos2(sTemp))
      Range(sDel).Value = sCodigo
   End If
   If Range(sAl).Value = "" Then
      lError = dbGetBottomNoLock(hDbc, CLIENTES, IxICODIGOT01)
      dbFieldNameChar hDbc, CLIENTES, "ccodigoc01", sTemp, 255
      sCodigo = Trim(fEliminaEspaciosNulos2(sTemp))
      Range(sAl).Value = sCodigo
   End If
   If Range(sDel).Value > Range(sAl).Value Then Range(sAl).Value = Range(sDel).Value
       
   ' Arregla la moneda y el tipo de cambio
   If Range(sMoneda).Value = "" Then Range(sMoneda).Value = kDefaultMoneda
   If Range(sTipoCambio).Value = 0 Then Range(sTipoCambio).Value = 1
      
   ' Despliega los documentos que se crearan de acuerdo al rango de clientes
   ' indicados
   lRenglon = kInicio
   
   lError = dbGetNoLock(hDbc, CLIENTES, IxICODIGOT01, Range(sDel).Value)
   If lError = 10 Then lError = 0
   Do While lError = 0
   
      sTemp = Space(255)
      dbFieldNameChar hDbc, CLIENTES, "ccodigoc01", sTemp, 255
      sCodigo = Trim(fEliminaEspaciosNulos2(sTemp))
      
      If sCodigo > Range(sAl).Value Then GoTo fin
      
      Range(sProcesando).Value = "Procesando... " & sCodigo
      Application.StatusBar = "Procesando... " & sCodigo
     
      'si es un proveedor no lo consideres
      dbFieldNameLong hDbc, CLIENTES, "ctipocli01", lTipo
      If lTipo > 2 Then GoTo Siguiente
            
      'si esta dado de baja tampoco lo despliegues
      dbFieldNameLong hDbc, CLIENTES, "cestatus", lTipo
      If lTipo = 0 Then GoTo Siguiente
      
      dbFieldNameLong hDbc, CLIENTES, "cIdclien01", lIdCodigo
      dbFieldNameChar hDbc, CLIENTES, "crazonso01", sTemp, 255
      sNombre = Trim(fEliminaEspaciosNulos2(sTemp))
      
      If aTipo = 1 Then ' Caso Facturas
        For i = 1 To 5
            If Range("FCodServicio" & Trim(Str(i))).Value <> "" Then
               lError = dbGetNoLock(hDbc, PRODUCTOS, IxICODIGOT01, Range(sCodServicio & Trim(Str(i))).Value)
               If lError = 0 Then
                .Cells(lRenglon, kCodigo).Value = sCodigo
                .Cells(lRenglon, kNombre).Value = sNombre
                .Cells(lRenglon, kTotal).Value = Range(sPrecio & Trim(Str(i))).Value
                .Cells(lRenglon, kTotal).NumberFormat = Range(sPrecio & Trim(Str(i))).NumberFormat
                dbFieldNameChar hDbc, PRODUCTOS, "cnombrep01", sTemp, 255
                .Cells(lRenglon, kServicio).Value = Range(sCodServicio & Trim(Str(i))).Value
                .Cells(lRenglon, kNombreSer).Value = Trim(fEliminaEspaciosNulos2(sTemp))
                lRenglon = lRenglon + 1
              End If
            End If
        Next
      Else
        .Cells(lRenglon, kCodigo).Value = sCodigo
        .Cells(lRenglon, kNombre).Value = sNombre
        .Cells(lRenglon, kTotal).Value = Range(sTotal).Value
        .Cells(lRenglon, kTotal).NumberFormat = Range(sTotal).NumberFormat
        lRenglon = lRenglon + 1
      End If
      
Siguiente:
      lError = dbSkip(hDbc, CLIENTES, IxICODIGOT01, 1)
   Loop
fin:
    
   Call fCierraEmpresa
   Range(sProcesando).Value = ""
   Application.StatusBar = ""
   Application.Cursor = xlNormal
   Application.DisplayAlerts = True
   '.Protect
   
   End With
End Sub

Public Sub GrabarDocumentos(aTipo As Integer)

   Dim lRenglon As Long
   Dim lError As Long
   Dim sFecha As String
   Dim sProcesando As String
   Dim sHoja As String
   Dim sCodigo As String
   Dim lIdDocumento As Long
   Dim lMovto As Long
 
   If aTipo = 0 Then ' Recibo de Honorarios
    sProcesando = "RProceso"
    sHoja = ActiveSheet.Name
   Else  'Facturas
    sProcesando = "FProceso"
    sHoja = ActiveSheet.Name
   End If
   
   ' Activa la hoja de listas de clientes/proveedores
   Worksheets(sHoja).Select

   With Worksheets(sHoja)

   '.Unprotect
   Application.Cursor = xlWait
   Application.DisplayAlerts = False
   
   ' Abre la empresa
   DirectorioBase
   lError = fAbreEmpresa(Worksheets("Par|fffd|metros").Range("UbicacionEmpresa").Value)

   lRenglon = kInicio
   sCodigo = ""
   'Procesa los renglones para crear los ajustes
   While .Cells(lRenglon, kCodigo).Value <> ""

     Range(sProcesando).Value = "Procesando... " & (lRenglon - kInicio + 1)
     Application.StatusBar = "Procesando... " & (lRenglon - kInicio + 1)

     ' Crea documentos
     If aTipo = 0 Then
        lError = Crea_Cargo(lRenglon, sHoja)
        If lError = 0 Then
            DespliegaDocto sHoja, lRenglon, aTipo
        Else
            .Rows(Trim(Str(lRenglon)) & ":" & Trim(Str(lRenglon))).Select
            .Cells(lRenglon, kSerie).Value = MensajeError(lError)
            .Cells(lRenglon, kSerie).Font.Color = RGB(0, 0, 255)
            lError = 0
        End If
        lRenglon = lRenglon + 1
     Else  ' Facturas
        ' Crea del documento
        If sCodigo <> .Cells(lRenglon, kCodigo).Value Then
            sCodigo = .Cells(lRenglon, kCodigo).Value
            lError = Crea_Documento(lRenglon, lIdDocumento, sHoja)
            lMovto = 100
            If lError <> 0 Then
                .Rows(Trim(Str(lRenglon)) & ":" & Trim(Str(lRenglon))).Select
                .Cells(lRenglon, kSerie).Value = MensajeError(lError)
                .Cells(lRenglon, kSerie).Font.Color = RGB(0, 0, 255)
                lError = 0
                While sCodigo = .Cells(lRenglon, kCodigo).Value
                    lRenglon = lRenglon + 1
                Wend
                GoTo otroRenglon
                
            End If
        End If
        ' Crea el movimiento
        If lError = 0 Then
            lError = Crea_Movimiento(lIdDocumento, lRenglon, sHoja, lMovto)
            If lError <> 0 Then
                fBorraDocumento
                .Rows(Trim(Str(lRenglon)) & ":" & Trim(Str(lRenglon))).Select
                .Cells(lRenglon, kSerie).Value = MensajeError(lError)
                .Cells(lRenglon, kSerie).Font.Color = RGB(0, 0, 255)
                lError = 0
                While sCodigo = .Cells(lRenglon, kCodigo).Value
                  lRenglon = lRenglon + 1
                Wend
                GoTo otroRenglon
             Else
                DespliegaDocto sHoja, lRenglon, aTipo
             End If
        End If

        lRenglon = lRenglon + 1
        
     End If
    
otroRenglon:
   Wend

   Call fCierraEmpresa
   Range(sProcesando).Value = ""
   Application.StatusBar = ""
   Application.Cursor = xlNormal
   Application.DisplayAlerts = True
   
   '.Protect
   End With
End Sub

Function Crea_Cargo(lRenglon As Long, sHoja As String) As Long

    
    Dim estructura_doc As tDocumento
    Dim estructura_cargo As tLlaveDocto
    Dim lAux As String
    Dim lfolio As Double
    Dim lSerie As String * 11
    Dim lError As Long
    Dim sObserva As String * 500
    Dim lLista() As String

    lError = 0
    
    lError = fSiguienteFolio(Range("RCodConcepto").Value, lSerie, lfolio)
    ' Checa que no hubo ningun problema
    If lError <> 0 Then
        GoTo FinFuncion
    End If
  
    ' Llena la estructura de datos del documento --------------------------------------
    estructura_doc.aFolio = CDbl(lfolio)
    estructura_doc.aNumMoneda = CLng(Range("RCodMoneda").Value)
    estructura_doc.aTipoCambio = CDbl(Range("RTipoCambio").Value)
    estructura_doc.aImporte = CDbl(Worksheets(sHoja).Cells(lRenglon, kTotal).Value)
    estructura_doc.aDescuentoDoc1 = CDbl(0)
    estructura_doc.aDescuentoDoc2 = CDbl(0)
    estructura_doc.aSistemaOrigen = CInt(202)
    estructura_doc.aAfecta = CLng(0)
  
    lAux = Range("RCodConcepto").Value
    fRellenaConBlancos lAux, kLongCodigo
    estructura_doc.aCodConcepto = lAux
  
    lAux = lSerie
    fRellenaConBlancos lAux, kLongNumSerie
    estructura_doc.aSerie = lAux
  
    lAux = Format(Range("RFecha").Value, "MM/DD/YYYY")
    fRellenaConBlancos lAux, kLongFecha
    estructura_doc.aFecha = lAux
  
    lAux = ""
    fRellenaConBlancos lAux, kLongCodigo
    estructura_doc.aCodigoAgente = lAux
  
    lAux = Worksheets(sHoja).Cells(lRenglon, kCodigo).Value
    fRellenaConBlancos lAux, kLongCodigo
    estructura_doc.aCodigoCteProv = lAux
  
    lAux = Range("RReferencia").Value
    fRellenaConBlancos lAux, kLongReferencia
    estructura_doc.aReferencia = lAux
       
    ' Alta del documento -----------------------------------------------------------------
    lError = fAltaDocumentoCargoAbono(estructura_doc)
    If lError <> 0 Then
        GoTo FinFuncion
    End If
    
    lLista = Split(Range("FORMA").Value, "=") '01=Descripcion
    
    lError = fEditarDocumento()
    sObserva = Worksheets(sHoja).Cells(5, 9).Value
    lError = fSetDatoDocumento("cFechaVe01", fDiasCredito(sHoja, lRenglon, "RFecha"))
    lError = fSetDatoDocumento("cObservaciones", sObserva)
    lError = fSetDatoDocumento("CMETODOPAG", Trim(lLista(0)))
    lError = fSetDatoDocumento("CLUGAREXPE", Range("LUGAR").Value)
    lError = fSetDatoDocumento("CNUMCTAPAG", gCuenta)
    lError = fSetDatoDocumento("CNUMPARCIA", 1)
    lLista = Split(Range("METODO").Value, "=")
    If Trim(lLista(0)) = "PUE" Then
        lError = fSetDatoDocumento("CCANTPARCI", 1)
    Else
        lError = fSetDatoDocumento("CCANTPARCI", 2)
    End If
    lError = fGuardaDocumento()
    
    ' Llena el registo de la llave del documento para la afectaci|fffd|n
    estructura_cargo.aCodConcepto = estructura_doc.aCodConcepto
    estructura_cargo.aSerie = estructura_doc.aSerie
    estructura_cargo.aFolio = estructura_doc.aFolio
  
    ' Afecta el documento que se acaba de generar.
    lError = fAfectaDocto(estructura_cargo, 1)
    If lError <> 0 Then
        fBorraDocumento
        GoTo FinFuncion
    End If

    
FinFuncion:
    Crea_Cargo = lError
  
End Function

'//////////////////////////////////////////////////////////////////////////////
' FUNCION QUE CREA EL DOCUMENTO FACTURA
'/////////////////////////////////////////////////////////////////////////////
Function Crea_Documento(lRenglon As Long, ByRef lIdDocumento As Long, sHoja As String) As Long

    
    Dim estructura_doc As tDocumento
    Dim lAux As String
    Dim lfolio As Double
    Dim lSerie As String * 11
    Dim lError As Long
    Dim lLista() As String
    
    lError = fSiguienteFolio(Range("FCodConcepto").Value, lSerie, lfolio)
    ' Checa que no hubo ningun problema
    If lError <> 0 Then
        GoTo FinFuncion
    End If
  
    ' Llena la estructura de datos del documento --------------------------------------
    estructura_doc.aFolio = CDbl(lfolio)
    estructura_doc.aNumMoneda = CLng(Range("FCodMoneda").Value)
    estructura_doc.aTipoCambio = CDbl(Range("FTipoCambio").Value)
    estructura_doc.aImporte = CDbl(0)
    estructura_doc.aDescuentoDoc1 = CDbl(0)
    estructura_doc.aDescuentoDoc2 = CDbl(0)
    estructura_doc.aSistemaOrigen = CInt(0)
    estructura_doc.aAfecta = CLng(0)
  
    lAux = Range("FCodConcepto").Value
    fRellenaConBlancos lAux, kLongCodigo
    estructura_doc.aCodConcepto = lAux
  
    lAux = lSerie
    fRellenaConBlancos lAux, kLongNumSerie
    estructura_doc.aSerie = lAux
  
    lAux = Format(Range("FFecha").Value, "MM/DD/YYYY")
    fRellenaConBlancos lAux, kLongFecha
    estructura_doc.aFecha = lAux
  
    lAux = ""
    fRellenaConBlancos lAux, kLongCodigo
    estructura_doc.aCodigoAgente = lAux
  
    lAux = Worksheets(sHoja).Cells(lRenglon, kCodigo).Value
    fRellenaConBlancos lAux, kLongCodigo
    estructura_doc.aCodigoCteProv = lAux
  
    lAux = Range("FReferencia").Value
    fRellenaConBlancos lAux, kLongReferencia
    estructura_doc.aReferencia = lAux
    
    ' Alta del documento -----------------------------------------------------------------
    lError = fAltaDocumento(lIdDocumento, estructura_doc)
    If lError <> 0 Then
        GoTo FinFuncion
    End If
      
    lLista = Split(Range("FORMA").Value, "=") '01=Descripcion
    lError = fEditarDocumento()
    lError = fSetDatoDocumento("cFechaVe01", fDiasCredito(sHoja, lRenglon, "FFecha"))
    lError = fSetDatoDocumento("CMETODOPAG", Trim(lLista(0)))
    lError = fSetDatoDocumento("CLUGAREXPE", Range("LUGAR").Value)
    lError = fSetDatoDocumento("CNUMCTAPAG", gCuenta)
    lError = fSetDatoDocumento("CNUMPARCIA", 1)
    lLista = Split(Range("METODO").Value, "=")
    If Trim(lLista(0)) = "PUE" Then
        lError = fSetDatoDocumento("CCANTPARCI", 1)
    Else
        lError = fSetDatoDocumento("CCANTPARCI", 2)
    End If
  
    lError = fGuardaDocumento()
   
FinFuncion:
    Crea_Documento = lError
  
End Function
'//////////////////////////////////////////////////////////////////////////////
' FUNCION QUE CREA UN Movimiento
'/////////////////////////////////////////////////////////////////////////////
Function Crea_Movimiento(lIdDocumento As Long, lRenglon As Long, sHoja As String, ByRef lMovto As Long) As Long

    ' Prueba la alta de movimientos con series lotes pedimentos
    Dim lError As Long
    Dim estructura_movimientos As tMovimiento
    Dim lIdMovto As Long
    Dim lAux As String
    Dim lPrecio As Double
    
    estructura_movimientos.aConsecutivo = CLng(lMovto + 10)
    estructura_movimientos.aUnidades = CDbl(1)
    estructura_movimientos.aPrecio = CDbl(Worksheets(sHoja).Cells(lRenglon, kTotal).Value)
    estructura_movimientos.aCosto = CDbl(0)
    lAux = Worksheets(sHoja).Cells(lRenglon, kServicio).Value
    fRellenaConBlancos lAux, kLongCodigo
    estructura_movimientos.aCodProdSer = lAux
    lAux = "1"
    fRellenaConBlancos lAux, kLongCodigo
    estructura_movimientos.aCodAlmacen = lAux
    lAux = ""
    fRellenaConBlancos lAux, kLongReferencia
    estructura_movimientos.aReferencia = lAux
    lAux = ""
    fRellenaConBlancos lAux, kLongCodigo
    estructura_movimientos.aCodClasificacion = lAux
   
    'Guardo el movimiento donde estructura_movimientos es de tipo tMovimiento
    lError = fAltaMovimiento(lIdDocumento, lIdMovto, estructura_movimientos)
    lError = fEditarMovimiento() 'N.D.1675
    lError = fGuardaMovimiento()
          
    Crea_Movimiento = lError
End Function

Public Sub DespliegaDocto(sHoja As String, lRenglon As Long, aTipo As Integer)
    
   
    Dim sTemp As String * 255
    Dim lError As Long
    Dim sFormato As String
    
    With Worksheets(sHoja)
    
        lError = fLeeDatoDocumento("cSerieDo01", sTemp, 255)
        .Cells(lRenglon, kSerie).Value = Trim(sTemp)
        lError = fLeeDatoDocumento("cFolio", sTemp, 255)
        .Cells(lRenglon, kFolio).Value = Trim(Val(sTemp))
        If aTipo = 0 Then
            sFormato = Range("RTotal").NumberFormat
            lError = fLeeDatoDocumento("cNeto", sTemp, 255)
            .Cells(lRenglon, kNeto).Value = Val(sTemp)
            lError = fLeeDatoDocumento("cImpuesto1", sTemp, 255)
            .Cells(lRenglon, kIva).Value = Val(sTemp)
            lError = fLeeDatoDocumento("cRetenci01", sTemp, 255)
            .Cells(lRenglon, kISR).Value = Val(sTemp)
            lError = fLeeDatoDocumento("cRetenci02", sTemp, 255)
            .Cells(lRenglon, kIVAISR).Value = Val(sTemp)
        Else
            sFormato = Range("FPrecio1").NumberFormat
            lError = fLeeDatoMovimiento("cTotal", sTemp, 255)
            .Cells(lRenglon, kNeto).Value = Val(sTemp)
            lError = fLeeDatoMovimiento("cImpuesto1", sTemp, 255)
            .Cells(lRenglon, kIva).Value = Val(sTemp)
            lError = fLeeDatoMovimiento("cRetenci01", sTemp, 255)
            .Cells(lRenglon, kISR).Value = Val(sTemp)
            lError = fLeeDatoMovimiento("cRetenci02", sTemp, 255)
            .Cells(lRenglon, kIVAISR).Value = Val(sTemp)
        End If
        
        .Cells(lRenglon, kNeto).NumberFormat = sFormato
        .Cells(lRenglon, kIva).NumberFormat = sFormato
        .Cells(lRenglon, kISR).NumberFormat = sFormato
        .Cells(lRenglon, kIVAISR).NumberFormat = sFormato
   End With
End Sub

Public Function MensajeError(aError As Long) As String

    Dim aMensaje As String * 350
    
    aMensaje = String(349, Chr(0))
    
    ' Recupera el mensaje de error del SDK
    fError aError, aMensaje, 350
    'MsgBox aMensaje
    
    MensajeError = Trim(aMensaje)
End Function

' Funcion de rellena con blancos
Public Sub fRellenaConBlancos(ByRef aCadena As String, aTamanio As Integer)
  Dim aEspacios As String
  
  ' Si la cadena es muy grande debes de truncarla
    If Len(aCadena) >= aTamanio Then
     aCadena = Left(aCadena, aTamanio - 1)
  End If
  
  aEspacios = Space(aTamanio)
      
  aCadena = aCadena & Left(aEspacios, aTamanio - Len(aCadena) - 1) & Chr(0)
End Sub


Function fDiasCredito(sHoja As String, lRenglon As Long, sFecha As String) As String
    Dim lError As Long
    Dim sDias As String * 255
    Dim dFecha As Date
    
    gCuenta = ""
    lError = fBuscaCteProv(Trim(Worksheets(sHoja).Cells(lRenglon, kCodigo).Value))
    If lError = 0 Then
       lError = fLeeDatoCteProv("cDiasCre01", sDias, 255)
       dFecha = Worksheets(sHoja).Range(sFecha).Value + Val(Trim(sDias))
       lError = fLeeDatoCteProv("cNumCtaPag", sDias, 255)
       gCuenta = Trim(fEliminaEspaciosNulos2(sDias))
    Else
        dFecha = Worksheets(sHoja).Range(sFecha).Value
    End If
    
    fDiasCredito = Format(dFecha, "MM/DD/YYYY")
    
End Function
Attribute VB_Name = "mInicializa"
Option Explicit

'// Funcion que inicializa todos los controles de la hoja de acuerdo a la empresa abierta, en
'// caso de estar cerrada la empresa los inicializa con valores gen|fffd|ricos
Public Sub InicializaModelo()
Dim lError As Long
Dim lIdEmpresa As Long
Dim CodigoPostal As String * 10
Dim Calle As String * 61
Dim NoExterior As String * 31
Dim NoInterior As String * 31
Dim Colonia As String * 31
Dim Localidad As String * 61
Dim Municipio As String * 61
Dim Estado As String * 61
Dim Pais As String * 61
Dim ExpedidoEn As String
    
    Worksheets("Par|fffd|metros").Unprotect
    
    If fAbreEmpresa(Worksheets("Par|fffd|metros").Range("UbicacionEmpresa").Value) = 0 Then
        Call dbGetTopNoLock(hDbc, "MGW10000", "PrimaryKey")
        dbFieldNameLong hDbc, "MGW10000", "cIdEmpresa", lIdEmpresa
        If dbGetNoLock(hDbc, "MGW10011", "ICATTIPO01", CStr(lIdEmpresa) & ":4") = 0 Then
            dbFieldNameChar hDbc, "MGW10011", "cCodigoP01", CodigoPostal, 6
            Worksheets("Par|fffd|metros").Range("LUGAR").Value = Trim(fEliminaEspaciosNulos2(CodigoPostal))
            
            dbFieldNameChar hDbc, "MGW10011", "cnombrec01", Calle, 60
            dbFieldNameChar hDbc, "MGW10011", "cnumeroe01", NoExterior, 30
            dbFieldNameChar hDbc, "MGW10011", "cnumeroi01", NoInterior, 30
            dbFieldNameChar hDbc, "MGW10011", "ccolonia", Colonia, 30
            dbFieldNameChar hDbc, "MGW10011", "cciudad", Localidad, 61
            dbFieldNameChar hDbc, "MGW10011", "cmunicipio", Municipio, 61
            dbFieldNameChar hDbc, "MGW10011", "cestado", Estado, 61
            dbFieldNameChar hDbc, "MGW10011", "cpais", Pais, 61
            
            ExpedidoEn = Trim(fEliminaEspaciosNulos2(Calle))
            If Trim(fEliminaEspaciosNulos2(NoExterior)) <> "" Then
                ExpedidoEn = ExpedidoEn & " " & Trim(fEliminaEspaciosNulos2(NoExterior))
            End If
            If Trim(fEliminaEspaciosNulos2(NoInterior)) <> "" Then
                ExpedidoEn = ExpedidoEn & "int " & Trim(fEliminaEspaciosNulos2(NoInterior))
            End If
            If Trim(fEliminaEspaciosNulos2(Colonia)) <> "" Then
                ExpedidoEn = ExpedidoEn & ", " & Trim(fEliminaEspaciosNulos2(Colonia))
            End If
            If Trim(fEliminaEspaciosNulos2(Localidad)) <> "" Then
                ExpedidoEn = ExpedidoEn & ", " & Trim(fEliminaEspaciosNulos2(Localidad))
            End If
            If Trim(fEliminaEspaciosNulos2(Municipio)) <> "" Then
                ExpedidoEn = ExpedidoEn & ", " & Trim(fEliminaEspaciosNulos2(Municipio))
            End If
            If Trim(fEliminaEspaciosNulos2(Estado)) <> "" Then
                ExpedidoEn = ExpedidoEn & ", " & Trim(fEliminaEspaciosNulos2(Estado))
            End If
            If Trim(fEliminaEspaciosNulos2(Pais)) <> "" Then
                ExpedidoEn = ExpedidoEn & ", " & Trim(fEliminaEspaciosNulos2(Pais))
            End If
            ExpedidoEn = ExpedidoEn & ", " & Trim(fEliminaEspaciosNulos2(CodigoPostal))
            
            Worksheets("Par|fffd|metros").Range("LUGARDesc").Value = ExpedidoEn
        End If
    End If
    
    Call fCierraEmpresa

    Worksheets("Par|fffd|metros").Protect
End Sub

Attribute VB_Name = "mPrincipal"
Sub fOpcionesValidacion(aRango As Range, aOpciones As String)

    On Error GoTo hdlerr

    With aRango.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:=aOpciones
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "CONTPAQ i Factura Electr|fffd|nica"
        .InputMessage = ""
        .ErrorMessage = "Valor no v|fffd|lido."
        .ShowInput = True
        .ShowError = True
    End With
        
    Exit Sub
hdlerr:
    MsgBox Err.Description
End Sub


'// FUNCIONES A EJECUTARSE CUANDO SE ABRA Y SE CIERRE LA HOJA
Sub Auto_Close()
    dbLogOut (hDbc)
    Application.OnKey "{F3}"
End Sub
Sub Auto_Open()
    Dim lError As Long

    Worksheets("Par|fffd|metros").Select
    Worksheets("Par|fffd|metros").Unprotect
    Range("EstadoEmpresa").Value = "CERRADO"
    If Range("FORMA") = "" Then
        Range("FORMA").Value = "01=Efectivo"
    End If
    
    If Range("METODO") = "" Then
        Range("METODO").Value = "PUE=Pago en una sola exhibici|fffd|n"
    End If

    Worksheets("Par|fffd|metros").Protect
    DirectorioBase
    Call fSetNombrePAQ(kFACTURACION_I)
    Call fInicializaSDK
    InicializaModelo
    Application.OnKey "{F3}", "Hoja4.DesplegarCatalogoF3"
    Application.StatusBar = ""
End Sub
' // FUNCION DE LECTURA DE EMPRESAS, LLENA LOS CONTROLES CORRESPONDIENTES
Public Function LeerEmpresaPuntodeVenta() As Integer
   
    Dim iResult As Integer
    Dim lIdEmpresa As Long
    Dim sEmpresa As String * 255
    Dim iIndice           As Integer
    Dim hDbcLocal As Long
    
    On Error GoTo Error_LeerEmpresaPuntodeVenta
    
    If DirectorioBase = 1 Then
        LeerEmpresaPuntodeVenta = 1
        Exit Function
    End If
    
    ' Cerramosla empresa anterior
    dbLogOut (hDbc)
    Worksheets("Par|fffd|metros").Unprotect
    Range("EstadoEmpresa").Value = "CERRADO"
    Range("NombreEmpresa").Value = ""
    Range("UbicacionEmpresa").Value = ""
    Worksheets("Par|fffd|metros").Protect
        
    hDbcLocal = dbLogIn("Usuario MS Excel", szDirectorioDatos)
    
    'Limpiamos el control de empresas
    frmSeleccionEmpresa.lstEmpresas.Clear
    
    sEmpresa = Space(255)
    iIndice = 0
    iResult = dbGetTopNoLock(hDbcLocal, GEMPRESAS, IxNOMEMPRESA)
    Do While iResult = 0
        dbFieldNameChar hDbcLocal, GEMPRESAS, "cNombree01", sEmpresa, 151
        frmSeleccionEmpresa.lstEmpresas.AddItem sEmpresa
        dbFieldNameChar hDbcLocal, GEMPRESAS, "cRutaDatos", sEmpresa, 255
        frmSeleccionEmpresa.lstEmpresas.List(iIndice, 1) = fEliminaEspaciosNulos2(sEmpresa)
        iIndice = iIndice + 1
        iResult = dbSkip(hDbcLocal, GEMPRESAS, IxNOMEMPRESA, 1)
    Loop
    ' Posicionarse en la primera empresa
    frmSeleccionEmpresa.lstEmpresas.ListIndex = 0
    LeerEmpresaPuntodeVenta = 0
    dbLogOut (hDbcLocal)
    Exit Function
    
Error_LeerEmpresaPuntodeVenta:
    dbLogOut (hDbcLocal)
    LeerEmpresaPuntodeVenta = 1
End Function
'________________________________________________________________________________________________
' Funci|fffd|n que elimina el caracter nulo del final de un string
Public Function fEliminaEspaciosNulos(pCadena As String) As String
    Dim iPos As Integer
    Dim sNuevaCadena As String
    
    sNuevaCadena = Trim(pCadena)
    iPos = InStr(sNuevaCadena, Chr(0))
    If iPos > 0 Then
        sNuevaCadena = Mid(sNuevaCadena, 1, iPos - 1)
    End If
    
    fEliminaEspaciosNulos = sNuevaCadena

End Function

Public Function fEliminaEspaciosNulos2(pCadena As String) As String
Dim lLongitud As Integer
Dim lNuevaCadena As String
    
  On Error GoTo Error_fEliminaEspaciosNulos2
      
    lNuevaCadena = ""
    For lLongitud = Len(pCadena) To 1 Step -1
        If Mid(pCadena, lLongitud, 1) <> Chr(0) And Mid(pCadena, lLongitud, 1) <> " " Then
           lNuevaCadena = Mid(pCadena, 1, lLongitud)
           Exit For
        End If
    Next
    fEliminaEspaciosNulos2 = lNuevaCadena
    Exit Function
    
Error_fEliminaEspaciosNulos2:
End Function

'_________________________________________________________________________________________
' CONSULTA CLASIFICACIONES
'
Public Function ConsultaCatalogo(pCatalogo As Integer)

    Dim sCodigo As String
    Dim sNombre As String * 255
    Dim lError As Long
    Dim dPrecio As Double
    
    'ActiveSheet.Unprotect
    sCodigo = Consultas(pCatalogo)
    
    If Mid(sCodigo, 1, 1) = Chr(0) Then
        sCodigo = ""
    End If
    
    Select Case pCatalogo
        Case 1
           Range("RDelCliente").Value = sCodigo
           lError = dbGetNoLock(hDbc, CLIENTES, IxICODIGOT01, Range("RDelCliente").Value)
           If lError = 0 Then dbFieldNameChar hDbc, CLIENTES, "crazonso01", sNombre, 255
           Range("RNombreDelCliente").Value = Trim(fEliminaEspaciosNulos2(sNombre))
        Case 2
           Range("RAlCliente").Value = sCodigo
           lError = dbGetNoLock(hDbc, CLIENTES, IxICODIGOT01, Range("RAlCliente").Value)
           If lError = 0 Then dbFieldNameChar hDbc, CLIENTES, "crazonso01", sNombre, 255
           Range("RNombreAlCliente").Value = Trim(fEliminaEspaciosNulos2(sNombre))
        Case 3
           Range("FDelCliente").Value = sCodigo
           lError = dbGetNoLock(hDbc, CLIENTES, IxICODIGOT01, Range("FDelCliente").Value)
           If lError = 0 Then dbFieldNameChar hDbc, CLIENTES, "crazonso01", sNombre, 255
           Range("FNombreDelCliente").Value = Trim(fEliminaEspaciosNulos2(sNombre))
        Case 4
           Range("FAlCliente").Value = sCodigo
           lError = dbGetNoLock(hDbc, CLIENTES, IxICODIGOT01, Range("RAlCliente").Value)
           If lError = 0 Then dbFieldNameChar hDbc, CLIENTES, "crazonso01", sNombre, 255
           Range("FNombreAlCliente").Value = Trim(fEliminaEspaciosNulos2(sNombre))
        Case 5
           Range("RCodConcepto").Value = IIf(sCodigo = "", kDefaultRecibo, sCodigo)
           lError = dbGetNoLock(hDbc, CONCEPTOS, IxCCODIGOC01, Range("RCodConcepto").Value)
           If lError = 0 Then dbFieldNameChar hDbc, CONCEPTOS, "cNombreC01", sNombre, 255
           Range("RConcepto").Value = Trim(fEliminaEspaciosNulos2(sNombre))
        Case 6
           Range("FCodConcepto").Value = IIf(sCodigo = "", kDefaultFactura, sCodigo)
           lError = dbGetNoLock(hDbc, CONCEPTOS, IxCCODIGOC01, Range("FCodConcepto").Value)
            If lError = 0 Then dbFieldNameChar hDbc, CONCEPTOS, "cNombreC01", sNombre, 255
           Range("FConcepto").Value = Trim(fEliminaEspaciosNulos2(sNombre))
        Case 7
           Range("RCodMoneda").Value = IIf(sCodigo = "", kDefaultMoneda, sCodigo)
           lError = dbGetNoLock(hDbc, MONEDAS, IxMONEDAS, Trim(Str(Range("RCodMoneda").Value)))
           If lError = 0 Then dbFieldNameChar hDbc, MONEDAS, "cnombrem01", sNombre, 255
           Range("RMoneda").Value = Trim(fEliminaEspaciosNulos2(sNombre))
        Case 8
           Range("FCodMoneda").Value = IIf(sCodigo = "", kDefaultMoneda, sCodigo)
           lError = dbGetNoLock(hDbc, MONEDAS, IxMONEDAS, Trim(Str(Range("FCodMoneda").Value)))
           If lError = 0 Then dbFieldNameChar hDbc, MONEDAS, "cnombrem01", sNombre, 255
           Range("FMoneda").Value = Trim(fEliminaEspaciosNulos2(sNombre))
        Case 9, 10, 11, 12, 13
           Range("FCodServicio" & Trim(Str(pCatalogo - 8))).Value = sCodigo
           lError = dbGetNoLock(hDbc, PRODUCTOS, IxICODIGOT01, Range("FCodServicio" & Trim(Str(pCatalogo - 8))).Value)
           If lError = 0 Then
                dbFieldNameChar hDbc, PRODUCTOS, "cnombrep01", sNombre, 255
                dbFieldNameDouble hDbc, PRODUCTOS, "cprecio1", dPrecio
           End If
           Range("FNomServicio" & Trim(Str(pCatalogo - 8))).Value = Trim(fEliminaEspaciosNulos2(sNombre))
           Range("FPrecio" & Trim(Str(pCatalogo - 8))).Value = dPrecio
     End Select
     'ActiveSheet.Protect

End Function

Function Consultas(pCatalogo As Integer) As String

Dim lNombreTabla As String
Dim lTituloForma As String
Dim lPtrComponente As Long
Dim lNombreComponente As String
Dim lcampo As String
Dim lColumna1 As String
Dim lColumna2 As String
Dim lBuffer As String
Dim lLimite As Integer
Dim lStrLimite As String

    Dim lDirectorioBin As String
    Dim lResult As Long, hRegKey As Long, lBufSize As Long

  On Error GoTo Error_Consultas
    
  Application.EnableCancelKey = xlErrorHandler
  
  If DirectorioBase = 1 Then
        Consultas = ""
        Exit Function
  End If

  Consultas = ""
    
  ' Obtiene la ruta de los archivos de la empresa activa
  lNombreTabla = Trim(Range("UbicacionEmpresa").Value)
 
  
   Select Case pCatalogo
          Case 1, 2, 3, 4 ' Clientes
               ' Titulo de la ventana de acuerdo al cat|fffd|logo seleccionado
               lTituloForma = "Cat|fffd|logo de Clientes" & Chr(0)
               ' Columnas
               lNombreTabla = lNombreTabla & "\MGW10002"
               ' Campo Llave
               lcampo = "cIdClienteProveedor" & Chr(0)
               lColumna1 = "1,0,C|fffd|digo,cCodigoCliente,,iCodigoTipo" & Chr(0)
               lColumna2 = "2,100,C|fffd|digo,cCodigoCliente,,iCodigoTipo" & Chr(0)
               lColumna3 = "3,300,Raz|fffd|n Social,cRazonSocial,,iCodigoTipo" & Chr(0)
           Case 5, 6 ' Conceptos
               ' Titulo de la ventana de acuerdo al cat|fffd|logo seleccionado
               lTituloForma = "Cat|fffd|logo de Conceptos" & Chr(0)
               ' Columnas
               lNombreTabla = lNombreTabla & "\MGW10006"
               ' Campo Llave
               lcampo = "cIdConceptoDocumento" & Chr(0)
               lColumna1 = "1,0,C|fffd|digo,cCodigoConcepto,,cCodigoC01" & Chr(0)
               lColumna2 = "2,100,C|fffd|digo,cCodigoConcepto,,cCodigoC01" & Chr(0)
               lColumna3 = "3,300,Nombre,cNombreConcepto,,cCodigoC01" & Chr(0)
           Case 7, 8 ' Monedas
               ' Titulo de la ventana de acuerdo al cat|fffd|logo seleccionado
               lTituloForma = "Cat|fffd|logo de Monedas" & Chr(0)
               ' Columnas
               lNombreTabla = lNombreTabla & "\MGW10034"
               ' Campo Llave
               lcampo = "cIdMoneda" & Chr(0)
               lColumna1 = "1,0,N|fffd|mero,cIdMoneda,,PrimaryKey" & Chr(0)
               lColumna2 = "2,100,N|fffd|mero,cIdMoneda,,PrimaryKey" & Chr(0)
               lColumna3 = "3,300,Moneda,cNombreMoneda,,PrimaryKey" & Chr(0)
           Case 9, 10, 11, 12, 13 ' Servicios
               ' Titulo de la ventana de acuerdo al cat|fffd|logo seleccionado
               lTituloForma = "Cat|fffd|logo de Servicios" & Chr(0)
               ' Columnas
               lNombreTabla = lNombreTabla & "\MGW10005"
               ' Campo Llave
               lcampo = "cIdProducto" & Chr(0)
               lColumna1 = "1,0,C|fffd|digo,cCodigoProducto,,iCodigoT01" & Chr(0)
               lColumna2 = "2,100,C|fffd|digo,cCodigoProducto,,iCodigoT01" & Chr(0)
               lColumna3 = "3,300,Servicio,cNombreProducto,,iCodigoT01" & Chr(0)
    End Select
       
       
    lNombreComponente = "TDlgSeleccion" & Chr(0)
    lPtrComponente = MCC_CreaComponente(lNombreComponente, sNull)
    
    If lPtrComponente <> 0 Then
       MCC_PonPropiedad lPtrComponente, "TituloForma", lTituloForma, sNull
       MCC_PonPropiedad lPtrComponente, "Tabla", lNombreTabla, sNull
       MCC_PonPropiedad lPtrComponente, "Campo", lcampo, sNull
       MCC_PonPropiedad lPtrComponente, "CampoRegreso", "1", sNull
       MCC_PonPropiedad lPtrComponente, "NumeroColumnas", "3", sNull
       MCC_PonPropiedad lPtrComponente, "Columna", lColumna1, sNull
       MCC_PonPropiedad lPtrComponente, "Columna", lColumna2, sNull
       MCC_PonPropiedad lPtrComponente, "Columna", lColumna3, sNull
       MCC_PonPropiedad lPtrComponente, "Alias", "", sNull
                     
       Select Case pCatalogo
          Case 1, 2, 3, 4 ' Clientes
                MCC_PonPropiedad lPtrComponente, "CampoRango", "cTipoCliente", sNull
                MCC_PonPropiedad lPtrComponente, "LimiteInferior", "1", sNull
                MCC_PonPropiedad lPtrComponente, "LimiteSuperior", "2", sNull
          Case 5  ' Recibo de Honorarios
                MCC_PonPropiedad lPtrComponente, "CampoRango", "cIdDocum01", sNull
                MCC_PonPropiedad lPtrComponente, "LimiteInferior", "11", sNull
                MCC_PonPropiedad lPtrComponente, "LimiteSuperior", "11", sNull
          Case 6  ' Facturas
                MCC_PonPropiedad lPtrComponente, "CampoRango", "cIdDocum01", sNull
                MCC_PonPropiedad lPtrComponente, "LimiteInferior", "4", sNull
                MCC_PonPropiedad lPtrComponente, "LimiteSuperior", "4", sNull
          Case 9, 10, 11, 12, 13  ' Productos
                MCC_PonPropiedad lPtrComponente, "CampoRango", "cTipoPro01", sNull
                MCC_PonPropiedad lPtrComponente, "LimiteInferior", "3", sNull
                MCC_PonPropiedad lPtrComponente, "LimiteSuperior", "3", sNull
       End Select
    End If

    Dim fs As Object
    Dim sdir As String
    Dim activa As String
    Set fs = CreateObject("Scripting.FileSystemObject")
    If Not fs.fileexists(Trim(Range("UbicacionEmpresa").Value) + "\mgw10002.dbf") Then
      MsgBox "La empresa activa no es valida o no existe", vbOKOnly
      Set fs = Nothing
      If lPtrComponente <> 0 Then MCC_DestruyeComponente lPtrComponente
      Exit Function
    End If
    Set fs = Nothing
    MCC_EjecutaMetodo lPtrComponente, "Ejecuta", 0, sNull, sNull
    lBuffer = Space(256)
    MCC_PidePropiedad lPtrComponente, "ValorColumna", lBuffer
    MCC_DestruyeComponente lPtrComponente
    Consultas = lBuffer
  
  Exit Function

Error_Consultas:
  If lPtrComponente <> 0 Then MCC_DestruyeComponente lPtrComponente

End Function

' Lee el directorio de datos, y establece como current el directorio de Base
Function DirectorioBase() As Integer

    Dim iResult As Integer
    
    
    Dim lResult As Long, hRegKey As Long, lBufSize As Long
    Dim lEntrada    As String * 256
    Dim i As Long
    

    ' Abrimos la secci|fffd|n de AdminPAQ en el registry
    lResult = RegOpenKeyEx(HKEY_LOCAL_MACHINE, szRegKeyAdminPAQ, 0, 1, hRegKey)
    If lResult <> 0 Then
        DirectorioBase = 1
        Exit Function
    End If
    
    'Leemos el directorio de datos
    lEntrada = Space(255)
    lBufSize = Len(lEntrada)
    'Leemos el directorio de datos archivos de compacw\empresas
    lResult = RegQueryValueEx(hRegKey, "DirectorioDatos", 0, 0, lEntrada, lBufSize)
    If lResult <> 0 Then
        lResult = RegCloseKey(hRegKey)
        DirectorioBase = 1
        Exit Function
    End If
    'Pone el null string al final del path
    For i = lBufSize To Len(lEntrada)
          Mid(lEntrada, i, 1) = Chr(0)
    Next
    
    ' Guardamos el directorio
    szDirectorioDatos = lEntrada
    
    lEntrada = Space(255)
    lBufSize = Len(lEntrada)
    'Leemos el directorio Base archivos de programa\compacw\adminpaq
    lResult = RegQueryValueEx(hRegKey, "DirectorioBase", 0, 0, lEntrada, lBufSize)
    If lResult <> 0 Then
        lResult = RegCloseKey(hRegKey)
        DirectorioBase = 1
        Exit Function
    End If
    lEntrada = Mid(lEntrada, 1, lBufSize)
        
    'Nos aseguramos que estemos ubicados en ese directorio
    SetCurrentDirectory lEntrada
    'Cerramos el registry
    lResult = RegCloseKey(hRegKey)
    DirectorioBase = 0
End Function

Public Function DespliegaNombre(pClas As Integer, pValor As String) As String

   Dim sNombre As String
   Dim lError As Long
   Dim sTemp As String * 255
       
   With Worksheets("Par|fffd|metros")
        sNombre = ""
        If pValor <> "" Then
            lError = dbGetNoLock(hDbc, VALORES_CLAS, IxVALORES_CLAS, Trim(pValor) & ":" & Trim(Str(CLAS_PRODUCTO + pClas)))
            If lError = 0 Then
                dbFieldNameChar hDbc, VALORES_CLAS, "cValorCl01", sTemp, 61
                sNombre = Trim(fEliminaEspaciosNulos(sTemp))
            End If
        End If
    End With

    DespliegaNombre = sNombre
End Function

Public Function MensajeError(aError As Long) As String

    Dim aMensaje As String * 350
    
    aMensaje = String(349, Chr(0))
    
    ' Recupera el mensaje de error del SDK
    fError aError, aMensaje, 350
    'MsgBox aMensaje
    
    MensajeError = Trim(aMensaje)
End Function

'________________________________________________________________________________________________
' Esta funcion genera una fecha con el f|fffd|rmato definido en el panel de control
' el parametro sfecha debe ser un string con formato aaaammdd
' 17/02/2003 Leonardo Aaguilar Pizano SOLUPAQ
' Generar la fecha correcta independiente de la configuraci|fffd|n del panel del control
'________________________________________________________________________________________________
Function GeneraFecha(ByVal sFecha As String) As Date
Dim lAnio As Integer
Dim lDia  As Integer
Dim lMes  As Integer
    
  lAnio = Val(Left(sFecha, 4))
  lDia = Val(Mid(sFecha, 7, 2))
  lMes = Val(Mid(sFecha, 5, 2))
  If (lDia < 32 And lDia > 0) And (lMes < 13 And lMes > 0) Then
      GeneraFecha = DateSerial(lAnio, lMes, lDia)
  Else
      GeneraFecha = DateSerial(1900, 1, 1)
  End If
End Function

'________________________________________________________________________________________________
' Esta funcion genera a partir de una fecha un string con el f|fffd|rmato definido
' para las BDD de Compac: aaaammdd
'________________________________________________________________________________________________
Function GeneraFechaCompac(ByVal aFecha As Date) As String
Dim lAnio   As String
Dim lDia    As String
Dim lMes    As String
Dim lFecha  As String
   
  lAnio = Trim(Str(Year(aFecha)))
  lDia = Trim(Str(Day(aFecha)))
  If Len(lDia) = 1 Then
     lDia = "0" + lDia
  End If
  lMes = Trim(Str(Month(aFecha)))
  If Len(lMes) = 1 Then
     lMes = "0" + lMes
  End If
  lFecha = lAnio + lMes + lDia
  GeneraFechaCompac = lFecha
End Function


' InQuest injected base64 decoded content
' |	mh:
' Zr*,6

INQUEST-PP=macro
