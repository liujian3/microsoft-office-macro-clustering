Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "formCheck"
Attribute VB_Base = "0{63B7B3FC-8AC5-4960-B2A1-F9F8A6DDAAE1}{25420FB1-BD27-4403-B220-7E2ABAF3F3CD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Private Sub btnClose_Click()
    Me.Hide
End Sub

Attribute VB_Name = "formPreview"
Attribute VB_Base = "0{D608B4F4-5B5D-40F2-9BD2-326BCCB9E426}{E9DD41FC-2BBF-40BB-B0A7-520710D2DDEA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Private Sub btnClose_Click()
    Me.Hide
End Sub
Attribute VB_Name = "modExportUnicodes"
Option Explicit

Private Sub sExportUnicodesForTTF()
    Dim clipText As DataObject
    Dim r, c As Range
    
    Dim iTable(0 To 65535) As Boolean
    
    Dim sUnicodes As String
    Dim sCell As String
    
    Dim iPosition As Integer
    Dim iCount As Integer
    Dim iSigns As Integer
    Dim iUnicode As Integer
    
    Dim lUnicode As Long
    Dim lCount As Long
    Dim lBegin As Long
    Dim lEnd As Long
        
    sUnicodes = ""
    
    '0x0000-0x00FF
    For iCount = 0 To 255
        iTable(iCount) = True
    Next iCount
    
    '0x0600-0x06FF
    For lCount = 1536 To 1791
        iTable(lCount) = True
    Next lCount
    
    '0xFC5E-0xFC63
    For lCount = 65606 To 64611
        iTable(lCount) = True
    Next lCount
    
    '0xFE70-0xFEFF
    For lCount = 65136 To 65279
        iTable(lCount) = True
    Next lCount
        
    For Each c In tabTranslations.Range("LANG_CODES")
        For Each r In tabTranslations.Range("TOKENS")
            If ((Left(Trim(r.Value), 3) = "txt") Or (Left(Trim(r.Value), 9) = "GG_HC_txt")) Then
                sCell = Cells(r.Row, c.Column).Value
                iSigns = Len(sCell)
                For iPosition = 1 To iSigns
                    iUnicode = AscW(Mid(sCell, iPosition, 1))
                    If iUnicode < 0 Then
                        lUnicode = iUnicode + 65536
                        iTable(lUnicode) = True
                    Else
                        iTable(iUnicode) = True
                    End If
                Next iPosition
            End If
        Next
    Next
    
    For lCount = 0 To 65534
        If iTable(lCount) Then
            If iTable(lCount + 1) = False Then
                sUnicodes = sUnicodes & Hex(lCount) & vbNewLine
            Else
                lBegin = lCount
                For lEnd = lBegin + 1 To 65535
                    If iTable(lEnd) = False Then
                        sUnicodes = sUnicodes & Hex(lBegin) & "-" & Hex(lEnd - 1) & vbNewLine
                        lCount = lEnd
                        lEnd = 65535
                    End If
                Next lEnd
            End If
        End If
    Next lCount
    
    Set clipText = New DataObject
    clipText.SetText CStr(sUnicodes)
    clipText.PutInClipboard
End Sub

Attribute VB_Name = "modGlobal"
Option Explicit

Public Const COMBOBOX_TEXT_ALL_LANGUAGES = "[All]"
Public Const DEFAULT_FONT_NAME = "Courier New"

'Scale Factor to simulate non-square pixels of Sp100 hardware
Public Const SCALE_FACTOR_X = 1.15
Public Const SCALE_FACTOR_Y = 1.16


'Reqirements for Sheets:
'------------------------------------------------------------------------------------------------------------------------------
' 1. Sheet "tabTranslation" must be available
' 2. Name "LANG_CODES" must be defined correctly (all cells for translation header, e.g. "EN- English"
' 3. Name "COLS_METADATA" must be defined correctly (all columns with additional metadata like "Description")
' 4. Name "COLS_MASTERDATA" must be defined correctly (all columns with technical infos,
'

'------------------------------------------------------------------------------------------------------------------------------
'auto_open():
'
'automatically executed when workbook is opened
'Fills the combox box (list) for languages
'The named cell region "LANG_CODES" ist used to retrieve all existing languaages
'------------------------------------------------------------------------------------------------------------------------------
Sub auto_open()
    Dim c As Range
    
    If tabTranslations.comboLanguage.ListCount = 0 Then
        tabTranslations.comboLanguage.AddItem (COMBOBOX_TEXT_ALL_LANGUAGES)
        For Each c In tabTranslations.Range("LANG_CODES")
            tabTranslations.comboLanguage.AddItem (c.Value)
        Next
    End If
    tabTranslations.comboLanguage.Activate
End Sub


Public Sub sProtectionOn()
    Dim iSheet As Worksheet
    
    Call sHideColumns(tabTranslations.Range("COLS_MASTERDATA"))
    tabTranslations.chkTechnicalData = False
    
    Call sHideColumns(tabTranslations.Range("COLS_METADATA"))
    tabTranslations.chkMetaData = False
    
    For Each iSheet In ThisWorkbook.Worksheets
        iSheet.Protect Password:="bsh", DrawingObjects:=True, AllowFormattingColumns:=True
    Next
    
    'tabGlobalText.Visible = xlSheetHidden
    
End Sub

Public Sub sProtectionOff()
    Dim iSheet As Worksheet
    
    For Each iSheet In ThisWorkbook.Worksheets
        iSheet.Unprotect Password:="bsh"
    Next
    
    'tabGlobalText.Visible = xlSheetVisible
    
End Sub

Public Sub sShowColumns(myRange As Range)
    Dim c As Range
        
    For Each c In myRange.Columns
            c.EntireColumn.AutoFit
    Next
End Sub

Public Sub sHideColumns(myRange As Range)
    Dim c As Range
    
    For Each c In myRange.Columns
            c.EntireColumn.Hidden = True
    Next
End Sub




Attribute VB_Name = "modReverseText"
Function ReverseTextBlock(txt As String, linefeed As String, unicodeFirst As Integer, unicodeLast As Integer) As String
    Dim strTemp As String
    Dim pos As Integer
    
    strTemp = txt
    pos = InStr(Mid$(strTemp, 1), linefeed)
    If pos > 0 Then
        ReverseTextBlock = ReverseStringForUnicodes(Mid$(strTemp, 1, pos - 1), unicodeFirst, unicodeLast) _
                           & linefeed _
                           & ReverseTextBlock(Mid$(strTemp, pos + Len(linefeed)), linefeed, unicodeFirst, unicodeLast)
    Else
        ReverseTextBlock = ReverseStringForUnicodes(strTemp, unicodeFirst, unicodeLast)
    End If

End Function


'Function reverses the total string for specific unicode range (language)
'Characters not in the unicode range keep the initial order
'example (latin small case, from char 97-122):
'     input:     "hello 123 and 2/3 is funny + stupid"
'     output:    "diputs + ynnuf si 2/3 dna 123 olleh"
Public Function ReverseStringForUnicodes(text As String, ByVal unicodeFirst As Integer, ByVal unicodeLast As Integer) As String
    Dim strTemp As String
    Dim intPos As Integer
    Dim intStart As Integer
    Dim intEnd As Integer
    Dim blnCharFound As Boolean
     
    strTemp = text
    intStart = 1
    intEnd = 0
    intPos = 1
    Do While intPos <= Len(text)
        
        Select Case AscW(Mid(text, intPos, 1))
        
        'if character is one of the unicode range, or a punctuation mark
        Case unicodeFirst To unicodeLast, 32, Asc(","), Asc("."), Asc(":"), Asc("?")
            If blnCharFound Then
                intStart = intPos
            Else
                'reverse characters
                intEnd = intPos - 1
                Mid(strTemp, intStart, intEnd - intStart + 1) = StrReverse(Mid(text, intStart, intEnd - intStart + 1))
            End If
            blnCharFound = True
       
       'for any other character
       Case Else
            If blnCharFound Then intStart = intPos
            blnCharFound = False
            
        End Select
        intPos = intPos + 1
    Loop
    If Not blnCharFound And Len(strTemp) > 0 Then
        If intStart > intEnd Then
            intEnd = Len(text)
            Mid(strTemp, intStart, intEnd - intStart + 1) = StrReverse(Mid(text, intStart, intEnd - intStart + 1))
        End If
    End If
    'reverse the total string
    ReverseStringForUnicodes = StrReverse(Trim(strTemp))
End Function


Attribute VB_Name = "modTextExport"
Option Explicit

Public Const HEBREW_UNICODE_START = 1424
Public Const HEBREW_UNICODE_END = 1535
Public Const ARABIC_UNICODE_START = 1536
Public Const ARABIC_UNICODE_END = 1791


Private Sub sExportTokensForInflexion()
    Dim strToken, strCode, tokValue As String
    Dim c, t As Range
    Dim clipText As DataObject
       
    For Each c In tabTranslations.Range("LANG_CODES")
        strCode = LCase(Left(Trim(c.Value), 2))
        strToken = strToken & "  <!-- #################################################################################################### -->" & vbNewLine
        strToken = strToken & "  <!-- # text tokens for language " & c.Value & "  -->" & vbNewLine
        strToken = strToken & "  <!-- #################################################################################################### -->" & vbNewLine
        strToken = strToken & "  <language id=" & Chr(34) & strCode & Chr(34) & ">" & vbNewLine
        strToken = strToken & "    <screen id=""all"">" & vbNewLine
        
        Debug.Print strCode
        
        For Each t In tabTranslations.Range("TOKENS")

           If ((Left(Trim(t.Value), 3) = "txt") Or (Left(Trim(t.Value), 9) = "GG_HC_txt")) Then
                tokValue = Cells(t.Row, c.Column).Value
                tokValue = fPrepareTextForInflexion(tokValue)
                                
                'reverse string for arabic and hebrew language
                'If strCode = "hb" Then tokValue = ReverseTextBlock(tokValue, "\n", HEBREW_UNICODE_START, HEBREW_UNICODE_END)
                'If strCode = "ar" Then tokValue = ReverseTextBlock(tokValue, "\n", ARABIC_UNICODE_START, ARABIC_UNICODE_END)
                
                strToken = strToken & "      <token key=""" & t.Value & """ value=""" & tokValue & """/>" & vbNewLine
            End If
        Next
        strToken = strToken & "    </screen>" & vbNewLine
        strToken = strToken & "  </language>" & vbNewLine
    Next
    Set clipText = New DataObject
    clipText.SetText CStr(strToken)
    clipText.PutInClipboard
End Sub

Public Function fPrepareTextForPreviewer(strText As String) As String
    fPrepareTextForPreviewer = strText
    'fPrepareTextForPreviewer = Replace(strText, vbLf, " ")                              'remove any excel line breaks
    'fPrepareTextForPreviewer = Replace(fPrepareTextForPreviewer, "---", "-" & vbLf)     'insert forced hyphenations
    fPrepareTextForPreviewer = Replace(fPrepareTextForPreviewer, "\n", vbLf)           'insert forced line-breaks
    fPrepareTextForPreviewer = fInsertTokenTextExamples(fPrepareTextForPreviewer)
    fPrepareTextForPreviewer = RemoveWhitespcae(fPrepareTextForPreviewer)               'remove any stupid whitespace
    
    
End Function

Public Function fPrepareTextForInflexion(strText As String) As String
    fPrepareTextForInflexion = strText
    fPrepareTextForInflexion = Replace(strText, vbLf, " \n")                              'remove any excel line breaks
    
    fPrepareTextForInflexion = Replace(fPrepareTextForInflexion, "&", "&amp;")          'insert forced line-breaks
    fPrepareTextForInflexion = Replace(fPrepareTextForInflexion, "'", "&apos;")         'insert forced line-breaks
    fPrepareTextForInflexion = Replace(fPrepareTextForInflexion, "<", "&lt;")           'insert forced line-breaks
    fPrepareTextForInflexion = Replace(fPrepareTextForInflexion, ">", "&gt;")           'insert forced line-breaks
    fPrepareTextForInflexion = Replace(fPrepareTextForInflexion, Chr(34), "&quot;")     'insert forced line-breaks
        
    fPrepareTextForInflexion = Replace(fPrepareTextForInflexion, "---", "-" & "&#001;")   'insert forced hyphenations
    fPrepareTextForInflexion = Replace(fPrepareTextForInflexion, "+++", "&#001;")         'insert forced line-breaks
    
    fPrepareTextForInflexion = RemoveWhitespcae(fPrepareTextForInflexion)               'remove any stupid whitespace
End Function


'Function replaces any dynamc text tokens (e.g. {txtErrCode}) with example text
'dynamic tex tokens must be part of named range "FIELD_TOKENS" in sheet "tabGlobalText"

Public Function fInsertTokenTextExamples(strText As String) As String
    Dim c As Range
    
    fInsertTokenTextExamples = strText
    For Each c In tabGlobalText.Range("FIELD_TOKENS")
        fInsertTokenTextExamples = Replace(fInsertTokenTextExamples, "{" & Trim(c.Value) & "}", Trim(c.Cells(1, 3).Value))
    Next
End Function


'Function removes any unneeded Whitespace from a given string

Public Function RemoveWhitespcae(strText As String) As String
    Dim oldLen As Integer
    RemoveWhitespcae = Trim(strText)
    Do
        oldLen = Len(RemoveWhitespcae)
        RemoveWhitespcae = Replace(RemoveWhitespcae, "  ", " ")
    Loop While Len(RemoveWhitespcae) < oldLen
End Function

'Function removes any Excel sytle line breaks in strings (cell values).
'Excel uses linefeed (ascii 10) for line breaks, these chars are replaced by blanks " "

Public Function RemoveLineBreaks(strText As String) As String
    RemoveLineBreaks = Replace(strText, vbLf, " ")
End Function


'Function converts Excel line-breaks to other line breaks (which is "\001" in xml)
'line break character is given by parameter

Public Function ConvertLineBreaks(strText As String, strLineBreak As String) As String
    ConvertLineBreaks = Replace(strText, vbLf, strLineBreak)
End Function

'Function insert "line break" strings (e.g. linefeed asc(10) or Inflexion "\001") into given string
'A line break hyphenation is only inserted if there's no blank after the "-" character (e.g. "Foo-Bar"),
'otherwise linebreak will not be inserted (e.g. "Foo- Bar")

Public Function InsertHyphenationLineBreaks(strText As String, strLineBreak As String) As String
    InsertHyphenationLineBreaks = Replace(strText, "---", "-" & strLineBreak)

'    InsertHyphenationLineBreaks = Replace(strText, "-", "$$HYP$$")
'    InsertHyphenationLineBreaks = Replace(InsertHyphenationLineBreaks, "$$HYP$$ ", "- ")
'    InsertHyphenationLineBreaks = Replace(InsertHyphenationLineBreaks, "$$HYP$$", "-" & strLineBreak)
End Function
Attribute VB_Name = "tabGlobalText"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "tabTranslations"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "comboLanguage, 2, 1, MSForms, ComboBox"
Attribute VB_Control = "buttonPreview, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "chkMetaData, 79, 3, MSForms, CheckBox"
Attribute VB_Control = "chkTechnicalData, 80, 4, MSForms, CheckBox"
Option Explicit


Private Sub buttonPreview_Click()
    Dim c As Range
    Dim iBoxWidth As Integer
    Dim iFontSize As Integer
    Dim iBoxHeight As Integer
    Dim strTranslation As String
    Dim rangeOldSelection As Range
    
    Set rangeOldSelection = Selection
    rangeOldSelection.Select
     
    For Each c In Selection
        iBoxWidth = CLng(Cells(c.Row, Range("COL_BOX_WIDTH").Column).Value)
        iBoxHeight = CLng(Cells(c.Row, Range("COL_BOX_HEIGHT").Column).Value)
        iFontSize = CLng(Cells(c.Row, Range("COL_BOX_FSIZE").Column).Value)
        
        formPreview.txtTranslation.AutoSize = False
        formPreview.txtOversized.AutoSize = False
        
        If iBoxWidth <= 0 Then iBoxWidth = 0
        formPreview.txtTranslation.Width = iBoxWidth * SCALE_FACTOR_X
        formPreview.txtOversized.Width = iBoxWidth * SCALE_FACTOR_X
        
        If iBoxHeight <= 0 Then iBoxHeight = 0
        formPreview.txtTranslation.Height = iBoxHeight * SCALE_FACTOR_Y
        formPreview.txtOversized.Height = iBoxHeight * SCALE_FACTOR_Y
        
        formPreview.txtTranslation.Font.Name = Cells(c.Row, Range("COL_BOX_FONT").Column).Value
        formPreview.txtOversized.Font.Name = Cells(c.Row, Range("COL_BOX_FONT").Column).Value
        
        If iFontSize < 10 Then iFontSize = 10
        formPreview.txtTranslation.Font.Size = iFontSize
        formPreview.txtOversized.Font.Size = iFontSize
        
        'fetch the text to render
        If c.Column < Range("LANG_DE").Column Then ' if selected column is no text, try to render the german text
            strTranslation = Cells(c.Row, Range("LANG_DE").Column).text
        Else 'render the text of the selected cell
            strTranslation = c.Value
        End If
        
        'Render the given text in textbox (and in oversized box)
        formPreview.txtTranslation.Caption = fPrepareTextForPreviewer(strTranslation)
        formPreview.txtOversized.Caption = fPrepareTextForPreviewer(strTranslation)
       
        'Use autosize for oversized box
        formPreview.txtOversized.AutoSize = True
        formPreview.txtOversized.Width = iBoxWidth * SCALE_FACTOR_X
        
        'update form size to fit largest text box (using a minimal size)
        formPreview.Width = formPreview.txtTranslation.Width + 30
        If formPreview.Width < 300 Then formPreview.Width = 300
        
        If formPreview.txtOversized.Height > formPreview.txtTranslation.Height Then
            formPreview.Height = formPreview.txtOversized.Height + 90
        Else
            formPreview.Height = formPreview.txtTranslation.Height + 90
        End If
        If formPreview.Height < 150 Then formPreview.Height = 150
        
        formPreview.btnClose.Top = formPreview.Height - 60
        formPreview.txtWarning.Top = formPreview.Height - 60
        formPreview.txtWarning.Width = formPreview.Width - 100
        
        'formPreview.txtDimension.Width = iBoxWidth
        formPreview.txtDimension.Caption = "Box Width: " & iBoxWidth & " px " & "Box Height: " & iBoxHeight & " px"
        
        'Show the form
        formPreview.Repaint
        formPreview.Show
    Next
End Sub


Private Sub chkMetaData_Click()
    If chkMetaData.Value Then
        Call sShowColumns(tabTranslations.Range("COLS_METADATA"))
    Else
        Call sHideColumns(tabTranslations.Range("COLS_METADATA"))
    End If
End Sub

Private Sub chkTechnicalData_Click()
    If chkTechnicalData.Value Then
        Call sShowColumns(tabTranslations.Range("COLS_MASTERDATA"))
    Else
        Call sHideColumns(tabTranslations.Range("COLS_MASTERDATA"))
    End If
End Sub

Private Sub comboLanguage_Change()
    Dim c As Range
            
    If comboLanguage.Value = COMBOBOX_TEXT_ALL_LANGUAGES Then
        Call sShowAllLanguages
        Exit Sub
    End If
        
    For Each c In Range("LANG_TRANSLATIONS")
        If c.Value = comboLanguage.Value Then
            c.ColumnWidth = 45
        Else
            If c.ColumnWidth > 0 Then c.ColumnWidth = 0
        End If
    Next
End Sub

Private Sub sShowAllLanguages()
    Dim c As Range
    
    For Each c In Range("LANG_TRANSLATIONS")
            c.EntireColumn.ColumnWidth = 45
    Next
End Sub

Private Sub ReplaceLineBreakForInflexion()
    Dim c As Range
    
    For Each c In Selection.Cells
        c.Value = Replace(c.Value, Chr$(10), " ")
    Next
    
End Sub


Private Sub Worksheet_Change(ByVal Target As Range)
    Dim strText As String
    Dim iBoxWidth As Integer
    Dim iBoxHeight As Integer
    Dim iFontSize As Integer
    Dim strFontName As String
    Dim reply As Integer
    Dim c As Range
    Dim translationRange As Range
    
    
    If Not Intersect(Target, Range("ALL_TRANSLATION_CELLS")) Is Nothing Then 'if target cell is part of translation texts, only translate this cell
        Set translationRange = Intersect(Target, Range("ALL_TRANSLATION_CELLS"))
    ElseIf Not Intersect(Target, Range("COLS_MASTERDATA"), Range("ROWS_TRANSLATIONS")) Is Nothing Then 'if traget cell is part of technical parameters (MASTER_DATA)
        'ask if all translations of this text line shall be veriefied again
        'reply = MsgBox("Would you like to verify all translations for this text token again?", vbYesNo + vbDefaultButton2, "VERIFIY AGAIN?")
        Set translationRange = Intersect(Target.EntireRow, Range("ALL_TRANSLATION_CELLS"))
    End If
    
    If translationRange Is Nothing Then Exit Sub
            
    For Each c In translationRange
        iBoxWidth = Cells(c.Row, Range("COL_BOX_WIDTH").Column)
        iBoxHeight = Cells(c.Row, Range("COL_BOX_HEIGHT").Column)
        iFontSize = Cells(c.Row, Range("COL_BOX_FSIZE").Column)
        strFontName = Cells(c.Row, Range("COL_BOX_FONT").Column)
        strText = c.Value
        If strText > "" Then
            If fCheckTextLength(strText, iBoxWidth, iBoxHeight, strFontName, iFontSize) Then
                c.Interior.ColorIndex = xlNone
            Else
                c.Interior.ColorIndex = 40
            End If
        End If
    Next
End Sub


Private Function fCheckTextLength(ByVal strText As String, ByVal iBoxWidth As Integer, ByVal iBoxHeight As Integer, ByVal strFontName As String, ByVal iFontSize As Integer) As Boolean
    
    fCheckTextLength = False
    On Error GoTo fCheckTextLength_Error
    
    'do nothing if any of the parameters is nonsense
    If Len(Trim(strText)) = 0 Or iBoxHeight = 0 Or iBoxWidth = 0 Or iFontSize = 0 Then
        fCheckTextLength = True
        Exit Function
    End If
          
    Application.ScreenUpdating = False
        
    'disable AutoSize before changing text in text box
    formCheck.txtTranslation.AutoSize = False
    
    'set inital width & height of the textbox
    If iBoxWidth <= 0 Then iBoxWidth = 0
    formCheck.txtTranslation.Width = iBoxWidth * SCALE_FACTOR_X
    
    If iBoxHeight <= 0 Then iBoxHeight = 0
    formCheck.txtTranslation.Height = iBoxHeight * SCALE_FACTOR_Y
    
    'set font & font size for text
    formCheck.txtTranslation.Font.Name = strFontName
    If iFontSize <= 0 Then iFontSize = 10
    formCheck.txtTranslation.Font.Size = iFontSize

    'Render the given text in textbox
    formCheck.txtTranslation.Caption = fPrepareTextForPreviewer(strText)
    formCheck.txtTranslation.AutoSize = True
    
    'check if text fitted into initial box
    If formCheck.txtTranslation.Height <= (iBoxHeight * SCALE_FACTOR_Y) Then fCheckTextLength = True
    
    
    Application.ScreenUpdating = True
    'formCheck.Show
    Exit Function
    
fCheckTextLength_Error:
    Application.ScreenUpdating = True
    Debug.Print "Error occured"
End Function

Attribute VB_Name = "tabVersion"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' Z+Rx

INQUEST-PP=macro
