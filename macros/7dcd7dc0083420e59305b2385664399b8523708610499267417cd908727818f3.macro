Attribute VB_Name = "Code"
Option Explicit
Public Sub SecurityDistribution()
Attribute SecurityDistribution.VB_ProcData.VB_Invoke_Func = " \n14"
Dim C As Object
Dim rq As Object
Dim row As Long
Dim col As Integer
Dim sName As String
Dim bMesgValu As Boolean

'MM12625 (BI) 03/14/2008 - Added to clarify meaning and usage of Range("A6")
' Cell(A6) should be a unique identifier for each tab;
' First 3-chars represent the "SpectraPrefix" (e.g. SP0, SP1, SP2, Sp3, etc...);
' References to Range("A6") are changed to use these variables.

    'MM15234 - relocated catch for error handling to this location
    On Error GoTo ErrHandler
    
Dim vTabID As String
Dim vSpectraPrefix As String
    vTabID = Range("A6")
    vSpectraPrefix = Left(vTabID, 3)

    Set C = CreateObject("SunGard.IOConnection")
    C.CommType = "IP"
    
    If (Range("B2") <> C.HostIP Or _
        Range("B3") <> C.Port Or _
        UCase(Range("D2")) <> UCase(C.UserID) Or _
        UCase(Range("D3")) <> UCase(C.Operator)) Then
        Dim d As Object
        Set d = CreateObject("SunGard.IOConnection")
        d.SettingsUI
        If d.GetOk <> True Then
            Set d = Nothing
            Exit Sub
        End If
        Set d = Nothing
    End If
    Set C = Nothing
    Set C = CreateObject("SunGard.IOConnection")
    C.CommType = "IP"
    
    Select Case vTabID
        Case "SP0"
            
            'MM14608
            If Range("SP0_VIEW") = "" Then
                MsgBox "View must be chosen.", vbOKOnly, "Spectra"
                Exit Sub
            End If
            
            Set rq = C.CreateDistRequest
            rq.Account = Range("SP0_ACCOUNT")
            rq.RequestDate = Range("SP0_REQDATE")
            If UCase$(Left$(Range("SP0_SCTYONLY"), 1)) = "N" Then
                rq.SecuritiesOnly = False
            End If
            If UCase$(Left$(Range("SP0_AGGREGATE"), 1)) = "Y" Then
                rq.Aggregate = "Y"
            'MM17738 - Aggregate option 'A' and 'S' addition
            ElseIf UCase$(Left$(Range("SP0_AGGREGATE"), 1)) = "A" Then
                rq.Aggregate = "A"
            ElseIf UCase$(Left$(Range("SP0_AGGREGATE"), 1)) = "S" Then
                rq.Aggregate = "S"
            Else
                rq.Aggregate = "N"
            End If
            
            'MM14608
            rq.view = GetView(Range("SP0_VIEW"))
            
            
        Case "SP1"
            
            'MM14608
            If Range("SP1_VIEW") = "" Then
                MsgBox "View must be chosen.", vbOKOnly, "Spectra"
                Exit Sub
            End If
            
            Set rq = C.CreateTranRequest
            rq.Account = Range("SP1_ACCOUNT")
            rq.FromDate = Range("SP1_FROMDATE")
            rq.ToDate = Range("SP1_TODATE")
            Select Case Range("SP1_DATETYPE")
                Case 1: rq.DateType = "E"
                Case 2: rq.DateType = "T"
                Case 3: rq.DateType = "C"
                Case 4: rq.DateType = "S"
                Case 5: rq.DateType = "G"
                Case 6: rq.DateType = "N"
                Case 7: rq.DateType = "U"
                Case 8: rq.DateType = "I"
                Case 9: rq.DateType = "X"
            End Select
            Select Case Range("SP1_POSITIONS")
                Case 1: rq.Positions = "N"
                Case 2: rq.Positions = "A"
                Case 3: rq.Positions = "O"
                Case 4: rq.Positions = "P"
                Case 5: rq.Positions = "Z"
            End Select
            
            'MM14608
            rq.view = GetView(Range("SP1_VIEW"))
            
        Case "SP2"
            
            'MM14608
            If Range("SP2_VIEW") = "" Then
                MsgBox "View must be chosen.", vbOKOnly, "Spectra"
                Exit Sub
            End If
            
            Set rq = C.CreateFundRequest
            rq.Account = Range("SP2_ACCOUNT")
            rq.ClassOfShares = Range("SP2_CLASSOFSHARES")
            rq.RequestDate = Range("SP2_REQDATE")
            rq.Periods = Range("SP2_PERIODS")
            Select Case Range("SP2_PERIODTYPE")
                Case 1: rq.PeriodType = "P"
                Case 2: rq.PeriodType = "D"
                Case 3: rq.PeriodType = "W"
                Case 4: rq.PeriodType = "M"
                Case 5: rq.PeriodType = "Q"
                Case 6: rq.PeriodType = "Y"
                Case 7: rq.PeriodType = "A"
            End Select
            
            'MM14608
            rq.view = GetView(Range("SP2_VIEW"))
            
        Case "SP3"
                
                'MM14608
                If Range("SP3_VIEW") = "" Then
                    MsgBox "View must be chosen.", vbOKOnly, "Spectra"
                    Exit Sub
                End If
                
                Set rq = C.CreateFXRateRequest
                rq.RequestDate = Range("SP3_REQDATE")
                rq.SctyCusip = Range("SP3_REQCURRCODE")
                rq.BaseCurrency = Range("SP3_REQBASECURR")
                rq.PricingSource = Range("SP3_REQSOURCE")
                rq.PricingTime = Range("SP3_REQTIME")
                rq.PricingType = Range("SP3_REQTYPE")
                rq.Periods = Range("SP3_PERIODS")
                Select Case Range("SP3_PERIODTYPE")
                  Case 1: rq.PeriodType = "D"
                  Case 2: rq.PeriodType = "W"
                  Case 3: rq.PeriodType = "M"
                  Case 4: rq.PeriodType = "Q"
                  Case 5: rq.PeriodType = "Y"
                End Select
                rq.ProcessAll = " "
                Select Case Range("SP3_PROCESSALL")
                  Case 1: rq.ProcessAll = "A"
                  Case 2: rq.ProcessAll = "P"
                  Case 3: rq.ProcessAll = "X"
                End Select
                
            'MM14608
            rq.view = GetView(Range("SP3_VIEW"))
                
        Case "SP3_Prices"
                
                'MM14608
                If Range("SP3P_VIEW") = "" Then
                    MsgBox "View must be chosen.", vbOKOnly, "Spectra"
                    Exit Sub
                End If
                
                Set rq = C.CreateFXRateRequest
                rq.RequestDate = Range("SP3_REQDATE")
                rq.SctyCusip = Range("SP3_SECURITYNUMBER")
                rq.SctyDate = Range("SP3_SECURITYDATE")
                rq.SctyQual = Range("SP3_SECURITYQUAL")
                rq.BaseCurrency = Range("SP3_REQBASECURR")
                rq.PricingSource = Range("SP3_REQSOURCE")
                rq.PricingTime = Range("SP3_REQTIME")
                rq.PricingType = Range("SP3_REQTYPE")
                rq.Periods = Range("SP3_PERIODS")
                Select Case Range("SP3_PERIODTYPE")
                  Case 1: rq.PeriodType = "D"
                  Case 2: rq.PeriodType = "W"
                  Case 3: rq.PeriodType = "M"
                  Case 4: rq.PeriodType = "Q"
                  Case 5: rq.PeriodType = "Y"
                End Select
                rq.ProcessAll = " "
                Select Case Range("SP3_PROCESSALL")
                  Case 1: rq.ProcessAll = "A"
                  Case 2: rq.ProcessAll = "P"
                  Case 3: rq.ProcessAll = "X"
                  Case 4: rq.ProcessAll = "F"
                          rq.Account = Format(Range("SP3_ACCOUNT"), "###############")
                  
                End Select
                
            'MM14608
            rq.view = GetView(Range("SP3P_VIEW"))
                
        Case "SP4"
            
            'MM14608
            If Range("SP4_VIEW") = "" Then
                MsgBox "View must be chosen.", vbOKOnly, "Spectra"
                Exit Sub
            End If
            
            Set rq = C.CreateGLRequest
            rq.Account = Range("SP4_ACCOUNT")
            rq.FromDate = Range("SP4_FROMDATE")
            rq.ToDate = Range("SP4_TODATE")
                        
            Select Case Range("SP4_RECORDTYPE")
                Case 1: rq.RecordType = "S"
                Case 2: rq.RecordType = "D"
                Case 3: rq.RecordType = "B"
            End Select
            
            'MM14608
            rq.view = GetView(Range("SP4_VIEW"))
            
        Case "SPG"
            
            'MM14608
            If Range("SPG_VIEW") = "" Then
                MsgBox "View must be chosen.", vbOKOnly, "Spectra"
                Exit Sub
            End If
            
            Set rq = C.CreateGermanEqualRequest
            rq.Account = Range("SPG_ACCOUNT")
            rq.RequestDate = Range("SPG_REQDATE")
            rq.Periods = Range("SPG_PERIODS")
            Select Case Range("SPG_PRIORVAL")
                Case 1: rq.PriorVal = "Y"
                Case 2: rq.PriorVal = " "
            End Select
            bMesgValu = False
            Do While bMesgValu <> True
                If rq.PriorVal = "Y" And rq.Periods > 1 Then
                    MsgBox ("Only 1 period allowed if requesting Prior Valuation")
                    Exit Sub
                Else
                    bMesgValu = True
                End If
            Loop
            
            'MM14608
            rq.view = GetView(Range("SPG_VIEW"))
            
        Case "SP7"
            
            'MM14608
            If Range("SP7_VIEW") = "" Then
                MsgBox "View must be chosen.", vbOKOnly, "Spectra"
                Exit Sub
            End If
            
            Set rq = C.CreateFundRequest
            rq.Account = Range("SP7_ACCOUNT")
            rq.ClassOfShares = Range("SP7_CLASSOFSHARES")
            rq.RequestDate = Range("SP7_REQDATE")
            rq.Periods = Range("SP7_PERIODS")
            Select Case Range("SP7_PERIODTYPE")
                Case 1: rq.PeriodType = "P"
                Case 2: rq.PeriodType = "D"
                Case 3: rq.PeriodType = "W"
                Case 4: rq.PeriodType = "M"
                Case 5: rq.PeriodType = "Q"
                Case 6: rq.PeriodType = "Y"
                Case 7: rq.PeriodType = "A"
            End Select
            If Range("SP7_ADVATT") = 1 Then
                   rq.AdvAtt = "D"
            Else
                   rq.AdvAtt = "A"
            End If
            
            'MM14608
            rq.view = GetView(Range("SP7_VIEW"))
            
        Case Else
            MsgBox "Unable to interpret the spread sheet"
    End Select
        
    ''If vTabID = "SP3" Then
    ''No Filters for FX Rate Tab
    ''Else
     For row = 1 To 5
         If Range(vSpectraPrefix & "_F" & row & "ITEM") > "" Then
            rq.AddFilter Item:=Range(vSpectraPrefix & "_F" & row & "ITEM"), _
                         Operand:=Range(vSpectraPrefix & "_F" & row & "OPER"), _
                         Value:=IIf(UCase(Trim(Range(vSpectraPrefix & "_F" & row & "ITEM"))) = "AN", Format(Range(vSpectraPrefix & "_F" & row & "VALUE"), "#000000000000000"), Range(vSpectraPrefix & "_F" & row & "VALUE"))
         End If
     Next row
    ''End If
    
    col = 1
    Do Until Trim$(Cells(8, col)) = ""
        rq.AddItem Cells(8, col)
        Cells(10, col).Value = rq.Items(Cells(8, col)).Title
        col = col + 1
    Loop
    
    Range("B2") = C.HostIP
    Range("B3") = C.Port
    Range("B4") = Date & "  " & Time
    Range("D2") = UCase(C.UserID)
    Range("D3") = UCase(C.Operator)
       
  ''MM12625 (BI) 02/27/2008 - Debugging
  'If vTabID = "SP3" _
  'Or vTabID = "SP3_Prices" Then
  '   Range("E1") = Replace(rq.RequestString(), " ", "~")
  'End If
    
    rq.Start
    rq.Movenext
    
    row = 11
    Do Until Trim$(Cells(row, 1)) = ""
        row = row + 1
    Loop
    
    Do Until rq.EOF
        col = 1
        Do Until Trim$(Cells(8, col)) = ""
            Cells(row, col) = rq.ItemValue(Cells(8, col))
            If rq.Items(Cells(8, col)).display = "General Date" Then
                If vSpectraPrefix <> "SP2" Then
                    If CDbl(Cells(row, col)) = 0 Then
                        Cells(row, col) = ""
                    Else
                        Cells(row, col).NumberFormat = "mm/dd/yyyy"
                        On Error Resume Next
                        Cells(row, col) = Format$(DateSerial(Mid(rq.ItemValue(Cells(8, col)), 1, 4), Mid(rq.ItemValue(Cells(8, col)), 5, 2), Mid(rq.ItemValue(Cells(8, col)), 7, 2)), Cells(row, col).NumberFormat)
                        On Error GoTo 0
                    End If
                End If
            Else
                Cells(row, col).NumberFormat = rq.Items(Cells(8, col)).display
                Cells(row, col) = rq.ItemValue(Cells(8, col))
            End If
            col = col + 1
        Loop
        row = row + 1
        rq.Movenext
    Loop
    Set C = Nothing
    
    'MsgBox row - 11 & " rows loaded!"
    
Exit Sub
ErrHandler:
    MsgBox Err.Description, vbCritical, "Error"
    Err.Clear
End Sub
Private Function GetView(view As Integer) As String
On Error GoTo ErrHandler
Dim viewCodeArray As Variant

        viewCodeArray = Range("ViewCodes").Value
        GetView = viewCodeArray(view, 1)
        
Exit Function
ErrHandler:
    MsgBox Err.Description, vbCritical, "GetView"
    Err.Clear
End Function


Attribute VB_Name = "Module1"
Option Explicit
Dim spList As Object
Sub Clear()
Attribute Clear.VB_ProcData.VB_Invoke_Func = " \n14"
    Range("A10").CurrentRegion.Select
    Selection.Delete
    Range("A10").CurrentRegion.Select
End Sub
Sub ConnectionSetup()
Dim C As Object
    Set C = CreateObject("SunGard.IOConnection")
    C.SettingsUI
    Set C = Nothing
End Sub
Sub DoSort()
Attribute DoSort.VB_ProcData.VB_Invoke_Func = " \n14"
    Range("A10").CurrentRegion.Select
    SendKeys ("%DS")
End Sub
Sub DoAutoFilter()
Attribute DoAutoFilter.VB_ProcData.VB_Invoke_Func = " \n14"
    Range("A10").CurrentRegion.AutoFilter
End Sub
Sub GetDistItem()
Attribute GetDistItem.VB_ProcData.VB_Invoke_Func = " \n14"
    Auto_Open ''MM15234
    If ActiveCell.row = 8 Then
        ActiveCell.Value = spList.DistItem(ActiveCell.Value)
    End If
End Sub
Sub GetTranItem()
Attribute GetTranItem.VB_ProcData.VB_Invoke_Func = " \n14"
Dim o As Object
    Auto_Open ''MM15234
    If ActiveCell.row = 8 Then
        ActiveCell.Value = spList.TranItem(ActiveCell.Value)
    End If
End Sub
Sub GetValuItem()
Attribute GetValuItem.VB_ProcData.VB_Invoke_Func = " \n14"
Dim o As Object
    Auto_Open ''MM15234
    If ActiveCell.row = 8 Then
        ActiveCell.Value = spList.ValuItem(ActiveCell.Value)
    End If
End Sub
Sub GetGmeqItem()
Dim o As Object
    Auto_Open ''MM15234
    If ActiveCell.row = 8 Then
        ActiveCell.Value = spList.GmeqItem(ActiveCell.Value)
    End If
End Sub
Sub GetFxrtItem()
Dim o As Object
    Auto_Open ''MM15234
    If ActiveCell.row = 8 Then
        ActiveCell.Value = spList.FxrtItem(ActiveCell.Value)
    End If
End Sub
Sub GetGenLedgerItem()
Dim o As Object
    Auto_Open ''MM15234
    If ActiveCell.row = 8 Then
        ActiveCell.Value = spList.GeneralLedgerItem(ActiveCell.Value)
    End If
End Sub
Sub Auto_Open()
Attribute Auto_Open.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    Set spList = CreateObject("SunGard.IOSpectraItemList")
    If Err Then
        Exit Sub
    End If
    Worksheets("Security Distribution").OnDoubleClick = "GetDistItem"
    Worksheets("Transaction Analysis").OnDoubleClick = "GetTranItem"
    Worksheets("Fund Trend").OnDoubleClick = "GetValuItem"
    Worksheets("Exchange Rates").OnDoubleClick = "GetFxrtItem"
End Sub
Attribute VB_Name = "NET"

Option Explicit

Private Declare Function apiGetUserName Lib "advapi32.dll" Alias _
    "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long

Private Declare Function fPCName Lib "kernel32" Alias _
     "GetComputerNameA" (ByVal lpBuffer As String, nSize As Long) As Long

Function fMachineName() As String
      Dim lLength, lvalue As Long, lngX As Long
      Dim strPCName As String
      lLength = 16
      strPCName = String$(lLength, 0)
      lvalue = fPCName(strPCName, lLength)
      If lvalue <> 0 Then
         fMachineName = Left$(strPCName, lLength)
             Else
         fMachineName = "No Name Found"
      End If
End Function


Function fOSUserName() As String ' Returns the network login name
Dim lngLen As Long, lngX As Long
Dim strUserName As String

    strUserName = String$(254, 0)
    lngLen = 255
    lngX = apiGetUserName(strUserName, lngLen)
    If lngX <> 0 Then
        fOSUserName = Trim(Left$(strUserName, lngLen - 1))
    Else
        fOSUserName = ""
    End If
    
End Function
Function GetUserFullName()
Dim WSHnet As Variant
Dim username As String
Dim UserDomain As String
Dim UserFullName  As String
Dim objUser As Variant

    Set WSHnet = CreateObject("WScript.Network")
    username = WSHnet.username
    UserDomain = WSHnet.UserDomain
    Set objUser = GetObject("WinNT://" & UserDomain & "/" & username & ",user")
    UserFullName = objUser.FullName
    GetUserFullName = UserFullName
End Function
Public Function FULL_USER_NAME() As String
Dim ADSI As Object, UN As Object
On Error Resume Next
  Set ADSI = CreateObject("ADSystemInfo")
  Set UN = GetObject("LDAP://" & ADSI.username)
  FULL_USER_NAME = UN.FirstName
  FULL_USER_NAME = FULL_USER_NAME & " " & UN.LastName
  Set UN = Nothing
  Set ADSI = Nothing
  FULL_USER_NAME = IIf(Trim(Application.username) = Trim(GetUserFullName()), GetUserFullName(), Trim(Application.username) & " | " & Trim(GetUserFullName()))

End Function

Attribute VB_Name = "SHOW_REPORTS"
Option Compare Text

Sub SHOW_CLIENTS_REPORT()
Dim CLNT_NM As String
Dim CLNT_PASS As String
Dim L_ROW As Long
Dim CLNT_TAB As String
Dim CLNT_NM_LIST As String
Dim CLNT_PASS_LIST As String
Dim I As Integer
CLNT_NM = Range("CLIENT_REP_NAME")
CLNT_PASS = Range("CLIENT_PASSW")

L_ROW = Range("DSTRB_LIST").Rows.Count
       
       For I = 1 To L_ROW
                CLNT_NM_LIST = (((Range("DSTRB_LIST").Cells(I, 2))))
                CLNT_PASS_LIST = (((Range("DSTRB_LIST").Cells(I, 3))))
                CLNT_TAB = (((Range("DSTRB_LIST").Cells(I, 1))))
                 '''''''SHOW ALL REPORTS for ADMIN
                     If (CLNT_NM = "admin" And CLNT_PASS_LIST = CLNT_PASS) Then
                         Call UHIDE_REP_TABS
                         Exit Sub
                     End If
                 
                If (CLNT_NM_LIST = CLNT_NM And CLNT_PASS_LIST = CLNT_PASS) Then
                
                                 If SheetExists(CLNT_TAB) Then
                                                  
                                    ActiveWorkbook.Sheets(CLNT_TAB).Visible = True
                                    ActiveWorkbook.Sheets(CLNT_TAB).Activate
                                    Exit Sub
                                       Else
                                          MsgBox "Report for Client " & CLNT_NM & " not found.", vbCritical, "Report not found " & CLNT_PASS
                                          Exit Sub
                                  End If
                     Else
                             
                End If
                
       Next I
       
       If (CLNT_NM = "admin" And CLNT_PASS = "cibcmellon2015") Then
                    Call UHIDE_REP_TABS
                    Sheets("CONFIG").Visible = True
                    Exit Sub
       End If
   
    MsgBox CLNT_NM & " Clent name or password is incorrect.", vbCritical, ("Incorrect name or password")
    Exit Sub
    
    
                   

End Sub
Sub UHIDE_REP_TABS()
Dim L_ROW As Long
Dim CLIENT_NM As String
Dim mainWB As Workbook
Dim LAST_REPORT_ROW As Long
'On Error Resume Next
Set mainWB = ActiveWorkbook
Dim I As Integer

L_ROW = Range("DSTRB_LIST").Rows.Count
L_ROW = Range("DSTRB_LIST").Rows.Count

      For I = 1 To L_ROW
      CLIENT_NM = Range("DSTRB_LIST").Cells(I, 1)
       
                If SheetExists(CLIENT_NM) Then
                      
                  Application.StatusBar = "PROCESSING WAIT >>> " & CLIENT_NM
                      mainWB.Sheets(CLIENT_NM).Visible = True
                                 
                 End If
      Next I

End Sub

Function SheetExists(SheetName As String) As Boolean
' returns TRUE if the sheet exists in the active workbook

    SheetExists = False
    On Error GoTo NoSuchSheet
    If Len(Sheets(SheetName).Name) > 0 Then
        SheetExists = True
        Exit Function
    End If
NoSuchSheet:

End Function
Sub HIDE_NON_REP_TABS()
On Error Resume Next
    Sheets("CONFIG").Visible = xlVeryHidden
    Sheets("Transaction Analysis").Visible = xlVeryHidden
    Sheets("Fund Trend").Visible = xlVeryHidden
    Sheets("Security Distribution").Visible = xlVeryHidden
'    Sheets("CIBC_MELLON").Visible = xlVeryHidden
    Sheets("REP_LAYOUT_01").Visible = xlVeryHidden
    Sheets("REP_LAYOUT_02").Visible = xlVeryHidden
    Sheets("REP_LAYOUT_03").Visible = xlVeryHidden
    Sheets("REP_LAYOUT_99").Visible = xlVeryHidden
    Sheets("Version").Visible = xlVeryHidden
    If SheetExists("Exchange Rates") Then Sheets("Exchange Rates").Visible = xlVeryHidden
    If SheetExists("Security Distribution") Then Sheets("Security Distribution").Visible = xlVeryHidden
  
'REP_LAYOUT_01
End Sub
Sub HIDE_REP_TABS()
Dim L_ROW As Long
Dim CLIENT_NM As String
Dim mainWB As Workbook
Dim LAST_REPORT_ROW As Long
'On Error Resume Next
Set mainWB = ActiveWorkbook
Dim I As Integer

L_ROW = Range("DSTRB_LIST").Rows.Count
L_ROW = Range("DSTRB_LIST").Rows.Count

      For I = 1 To L_ROW
      CLIENT_NM = Range("DSTRB_LIST").Cells(I, 1)
       
                If SheetExists(CLIENT_NM) Then
                      
                  Application.StatusBar = "PROCESSING WAIT >>> " & CLIENT_NM
                      mainWB.Sheets(CLIENT_NM).Visible = xlVeryHidden
                                 
                 End If
      Next I

End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Deactivate()
    Sheets("CONFIG").Visible = xlVeryHidden
End Sub
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub SHOW_RPRT_BT_Click()
Call SHOW_CLIENTS_REPORT
End Sub


Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet33"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet35"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet36"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet38"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet39"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet40"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet41"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet42"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet43"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet44"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet55"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet56"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet57"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet58"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet59"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet60"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet61"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet62"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet63"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet64"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet65"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet66"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet67"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet68"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet69"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet70"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet71"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet72"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SolveForAmount"
Option Explicit
Sub SolveForAmount()
Attribute SolveForAmount.VB_Description = "\n\nS\n\n!0\n|fffd|\n"
Dim cFirst As Integer
Dim cLast As Integer
Dim rFirst As Integer
Dim rLast As Integer
Dim dTarget As Double
Dim d As Double
Dim r As Integer
Dim C As Integer
Dim r2 As Integer
Dim c2 As Integer
Dim s As String
    
    cFirst = Selection.Column
    cLast = cFirst + Selection.Columns.Count - 1
    rFirst = Selection.row
    rLast = rFirst + Selection.Rows.Count - 1

    If rFirst < 11 Then
        rFirst = 11
    End If
    r = Range("A10").CurrentRegion.row + (Range("A10").CurrentRegion.Rows.Count - 1)
    If r < rLast Then
        rLast = r
    End If
    
    If cFirst = cLast And rFirst = rLast Then
        MsgBox "Please select a range first"
        End
    End If
    
    dTarget = Application.InputBox(prompt:="Target value", Type:=1)
    If dTarget = 0 Then
        Exit Sub
    End If
    
    For r = rFirst To rLast
        For C = cFirst To cLast
            If IsNumeric(Cells(r, C)) Then
                d = Cells(r, C).Value
                If d <> 0 Then
                    If d = dTarget Then
                        If vbNo = MsgBox(prompt:=Cells(r, C).Address(False, False) & " = " & dTarget & Chr$(13) & "Continue searching?", Buttons:=vbYesNo) Then
                            End
                        End If
                    End If
                    If d < 0 And dTarget > 0 And Abs(d) = dTarget Then
                        If vbNo = MsgBox(prompt:="Abs(" & Cells(r, C).Address(False, False) & ") = " & dTarget & Chr$(13) & "Continue searching?", Buttons:=vbYesNo) Then
                            End
                        End If
                    End If
                End If
            End If
        Next C
    Next r
    
    For r = rFirst To rLast
        For C = cFirst To cLast
            Application.StatusBar = "Analyzing " & Cells(r, C).Address(False, False)
            If IsNumeric(Cells(r, C)) Then
                d = Cells(r, C).Value
                If d <> 0 Then
                    For r2 = rFirst To rLast
                        For c2 = cFirst To cLast
                            If IsNumeric(Cells(r2, c2)) Then
                                If Cells(r2, c2) <> 0 Then
                                    d = Cells(r, C).Value + Cells(r2, c2).Value
                                    If CStr(d) = CStr(dTarget) Then
                                        If vbNo = MsgBox(prompt:=Cells(r, C).Address(False, False) & " + " & Cells(r2, c2).Address(False, False) & " = " & dTarget & Chr$(13) & "Continue searching?", Buttons:=vbYesNo) Then
                                            End
                                        End If
                                    End If
                                    If d < 0 And dTarget > 0 Then
                                        If CStr(Abs(d)) = CStr(dTarget) Then
                                            If vbNo = MsgBox(prompt:="Abs(" & Cells(r, C).Address(False, False) & " + " & Cells(r2, c2).Address(False, False) & ") = " & dTarget & Chr$(13) & "Continue searching?", Buttons:=vbYesNo) Then
                                                End
                                            End If
                                        End If
                                    End If
                                    d = Cells(r, C).Value - Cells(r2, c2).Value
                                    If CStr(d) = CStr(dTarget) Then
                                        If vbNo = MsgBox(prompt:=Cells(r, C).Address(False, False) & " - " & Cells(r2, c2).Address(False, False) & " = " & dTarget & Chr$(13) & "Continue searching?", Buttons:=vbYesNo) Then
                                            End
                                        End If
                                    End If
                                    If d < 0 And dTarget > 0 Then
                                        If CStr(Abs(d)) = CStr(dTarget) Then
                                            If vbNo = MsgBox(prompt:="Abs(" & Cells(r, C).Address(False, False) & " - " & Cells(r2, c2).Address(False, False) & ") = " & dTarget & Chr$(13) & "Continue searching?", Buttons:=vbYesNo) Then
                                                End
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Next c2
                    Next r2
                End If
            End If
        Next C
    Next r
    Application.StatusBar = ""
    MsgBox "Search complete"
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
 If SheetExists("START") Then
                Sheets("START").Range("CLIENT_REP_NAME") = ""
                Sheets("START").Range("CLIENT_PASSW") = ""
                Sheets("START").Activate
  End If
End Sub



INQUEST-PP=macro
