Attribute VB_Name = "EbuchElemente"
Public col As Collection
Sub Formatvorlagensatz(control As IRibbonControl)
Dim Objekt
Set col = New Collection
Call CheckQuickStyles("1_5_Arial_Rahmen")
Call CheckQuickStyles("1_5_Arial_gelbblau")
Call CheckQuickStyles("1_5_Arial_blau_Rahmen")
Call CheckQuickStyles("1_5_Arial_ohneFarbe")
Call CheckQuickStyles("Standard_Arial")
Call CheckQuickStyles("1_5_Verdana_Rahmen")
Call CheckQuickStyles("1_5_Verdana_gelbblau")
Call CheckQuickStyles("1_5_Verdana_blau_Rahmen")
Call CheckQuickStyles("1_5_Verdana_ohneFarbe")
Call CheckQuickStyles("Standard_Verdana")
For Each Objekt In col
    If Objekt = "1_5_Arial_Rahmen" Then
    UserForm1.ARahmen.Visible = True
    End If
    If Objekt = "1_5_Arial_gelbblau" Then
    UserForm1.AGelbBlau.Visible = True
    End If
    If Objekt = "1_5_Arial_blau_Rahmen" Then
    UserForm1.Ablau_Rahmen.Visible = True
    End If
    If Objekt = "1_5_Arial_ohneFarbe" Then
    UserForm1.Aohne.Visible = True
    End If
    If Objekt = "1_5_Verdana_Rahmen" Then
    UserForm1.VRahmen.Visible = True
    End If
    If Objekt = "1_5_Verdana_blau_Rahmen" Then
    UserForm1.Vblau_Rahmen.Visible = True
    End If
    If Objekt = "1_5_Verdana_gelbblau" Then
    UserForm1.VGelbBlau.Visible = True
    End If
    If Objekt = "1_5_Verdana_ohneFarbe" Then
    UserForm1.Vohne.Visible = True
    End If
    If Objekt = "Standard_Arial" Then
    UserForm1.AStandard.Visible = True
    End If
    If Objekt = "Standard_Verdana" Then
    UserForm1.VStandard.Visible = True
    End If
Next Objekt
Zahl = col.Count
If Zahl = 0 Then
UserForm1.Label1.Visible = True
UserForm1.Label2.Visible = False
End If
'ActiveDocument.SaveAsQuickStyleSet "Alter_Stil"
UserForm1.Show
End Sub
Sub CheckQuickStyles(StyleSet_Name As String)
Dim strOrdner As String
Dim Nutzer As String
Dim Test_String As String
    Test_String = ""
    Nutzer = Environ$("USERPROFILE")
    strOrdner = Nutzer & "\AppData\Roaming\Microsoft\QuickStyles\" & StyleSet_Name & ".dotx"
    Test_String = Dir(strOrdner)
    On Error GoTo keinEintrag
    If Test_String = "" Then
    Else
    col.Add (StyleSet_Name)
    End If
keinEintrag:
End Sub
Attribute VB_Name = "Filtern"
Sub Blind(control As IRibbonControl) 'alles in sb Tags loeschen, bl tags l|fffd|schen und Inhalt behalten - Version f|fffd|r Blinde
        fkt_Search_uni 1, "<sb>", "</sb>", True
        Ausdruck_ersetzen "<bl>", "</bl>", ""
End Sub
Sub Sehbehindert(control As IRibbonControl) 'alles in bl Tags loeschen, sb tags l|fffd|schen und Inhalt behalten - Version f|fffd|r Sehbehinderte
        fkt_Search_uni 1, "<bl>", "</bl>", True
        Ausdruck_ersetzen "<sb>", "</sb>", "", False
End Sub
Sub LaTeXTags(control As IRibbonControl) 'LaTeX Tags einf|fffd|gen
    Tags_einfuegen "<L>", "</L>", 4
End Sub
Sub SBTags(control As IRibbonControl) 'sb-Tags einf|fffd|gen
    Tags_einfuegen "<sb>", "</sb>", 5
End Sub
Sub BLTags(control As IRibbonControl) 'bl Tags einf|fffd|gen
    Tags_einfuegen "<bl>", "</bl>", 5
End Sub
Sub TagsLoeschen(control As IRibbonControl) 'E-Buch Tags l|fffd|schen
    Call Attribute_loeschen
    Call RahmenZeichnen
    Ausdruck_ersetzen "<Bild>", "</Bild>", "Bild:", True
    Ausdruck_ersetzen "<Anmerkung>", "</Anmerkung>", "Anmerkung:", True
    Ausdruck_ersetzen "<Tabelle>", "</Tabelle>", "", False
    Ausdruck_ersetzen "<Rahmen>", "</Rahmen>", "", False
    Ausdruck_ersetzen "<Rahmen Typ=" & Chr(34) & "Merksatz" & Chr(34) & ">", "", "", False
    Ausdruck_ersetzen "<L|fffd|ckentext>", "</L|fffd|ckentext>", "", False
End Sub
Sub Attribute_loeschen()
    fkt_Search_uni 3, "<Rahmen", ">", False
    fkt_Search_uni 3, "<Bild", ">", False
    fkt_Search_uni 3, "<Tabelle", ">", False
    fkt_Search_uni 3, "<Anmerkung", ">", False
    fkt_Search_uni 3, "<L|fffd|ckentext", ">", False
End Sub
Sub RahmenZeichnen() 'Zeichnen eines Rahmens f|fffd|r Sehbehinderte um Rahmen-Tags
    fkt_Search_uni 4, "<Rahmen Typ=" & Chr(34) & "Merksatz" & Chr(34) & ">", "</Rahmen>", False
    fkt_Search_uni 4, "<Rahmen Typ=" & Chr(34) & Chr(34) & ">", "</Rahmen>", False
    fkt_Search_uni 4, "<Rahmen>", "</Rahmen>", False
End Sub
Sub TagsEntfernen(control As IRibbonControl) 'L|fffd|scht die <L> - Filtertags
    Ausdruck_ersetzen "<L>", "</L>", ""
End Sub
Sub AbfrageSchrift(control As IRibbonControl) 'Anpassung der Schift und der Schriftart
    Dim strSchriftgr|fffd||fffd|e As String
    Dim strSchriftart As String
    Dim eq As OMath
    
    strSchriftgr|fffd||fffd|e = InputBox("Geben Sie die gew|fffd|nschte Schriftgr|fffd||fffd|e ein")
    strSchriftart = InputBox("Geben Sie die gew|fffd|nschte Schriftart ein. W|fffd|nschen Sie Verdana, k|fffd|nnen Sie das Eingabefeld leer lassen.")
    If strSchriftgr|fffd||fffd|e = "" Then strSchriftgr|fffd||fffd|e = "12"
    If strSchriftart = "" Then strSchriftart = "Verdana"
    With ActiveDocument.Styles("Standard").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e
    End With
    With ActiveDocument.Styles("Kein Leerraum").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e
    End With
    With ActiveDocument.Styles("|fffd|berschrift 1").Font
        .Name = strSchrifart
        .Size = strSchriftgr|fffd||fffd|e + 6
        .Bold = True
        .Italic = False
    End With
    With ActiveDocument.Styles("|fffd|berschrift 2").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e + 4
        .Bold = True
    End With
    With ActiveDocument.Styles("|fffd|berschrift 3").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e + 2
        .Bold = True
    End With
    With ActiveDocument.Styles("|fffd|berschrift 4").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e
        .Bold = True
    End With
    With Selection.ParagraphFormat
        .WidowControl = True
        .KeepWithNext = True
        .KeepTogether = False
   End With
   With Selection
        .WholeStory
        
   End With
   ActiveDocument.OMathJc = wdOMathJcLeft
   For Each eq In ActiveDocument.OMaths
        eq.Range.Select
        With Selection
            .Font.Size = strSchriftgr|fffd||fffd|e + 2
        End With
    Next
End Sub
Sub BilderEntfernen(control As IRibbonControl) 'L|fffd|scht ggf. Bilder aus dem Dokument
    Ausdruck_ersetzen "^g", "", "", False
End Sub


    
Attribute VB_Name = "Funktionen"
Function fkt_umwandlung(strStart As String, strEnd As String)
Dim rngText As Range
Dim objRange As Range
Selection.Find.ClearFormatting
Selection.Find.Replacement.ClearFormatting
Selection.Find.Font.Color = wdColorGray125
With Selection.Find
    .Text = "(\<L\>*\</L\>)"
    .Forward = True
    .Format = True 'Formsz
    .MatchWildcards = True 'Platzhalter aktiv
    .Execute
    Do While .Found = True
    Set rngText = Selection.Range
    rngText.SetRange rngText.Start + Len(strStart), rngText.End - Len(strEnd)
    rngText.Select
    Set objRange = Selection.Range
        If objRange.OMaths.Count <> 1 Then
            objRange.Text = rngText.Text
            Set objRange = Selection.OMaths.Add(objRange)
            Set objEq = objRange.OMaths(1)
            objEq.BuildUp
            With objEq
                '.ConvertToMathText 'nicht erforderlich
                .Range.Font.Size = ActiveDocument.Styles("Standard").Font.Size + 4
                If .Range.Font.Italic = True Then
                    .Range.Font.Italic = False
                End If
            End With
        End If
    Selection.MoveRight 1
        .Text = "(\<L\>*\</L\>)"
        .Forward = True
        .Format = True
        .MatchWildcards = True
        .Execute
    Loop
End With
End Function
Function fkt_Search_uni(Nummer As Integer, strStart As String, strEnd As String, Optional bDelete As Boolean = False)
Dim rng As Range
Dim rngText As Range
Set rng = ActiveDocument.Range
Set rngText = ActiveDocument.Range(0, 0)
rngText.Collapse wdCollapseStart
With rng.Find
 .Format = False
 .Text = strStart
 .Execute
 Do While .Found = True
   rngText.SetRange rng.Start, rng.End
   rng.SetRange rng.End, ActiveDocument.Range.End
   .Execute FindText:=strEnd, Forward:=True
   If .Found = False Then Exit Function
   rngText.SetRange rngText.Start, rng.End
   If bDelete = False Then
   rngText.SetRange rngText.Start + Len(strStart), rngText.End - Len(strEnd)
   rngText.Select
     If Nummer = 3 Then
        If rngText = " Typ=" & Chr(34) & "Merksatz" & Chr(34) Or rngText = "" Then
        Else
            rngText.Delete
        End If
     End If
     If Nummer = 4 Then
        Call Rahmen_Zeichnen(strStart, rngText)
     End If
    Else
        rngText.Delete
    End If
   rng.Collapse wdCollapseEnd
   .Execute FindText:=strStart, Forward:=True
 Loop
 rng.Collapse wdCollapseEnd
End With
End Function
Private Sub Rahmen_Zeichnen(strStart, rngText) 'zeichnet schwarzen oder gr|fffd|nen Rahmen
        If strStart = "<Rahmen Typ=" & Chr(34) & "Merksatz" & Chr(34) & ">" Then
        rngText.Select
        With Selection.ParagraphFormat
        With .Borders(wdBorderLeft)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth300pt
            .Color = 5287936
        End With
        With .Borders(wdBorderRight)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth300pt
            .Color = 5287936
        End With
        With .Borders(wdBorderTop)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth300pt
            .Color = 5287936
        End With
        With .Borders(wdBorderBottom)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth300pt
            .Color = 5287936
        End With
        .Borders(wdBorderHorizontal).LineStyle = wdLineStyleNone
        With .Borders
            .DistanceFromTop = 1
            .DistanceFromLeft = 4
            .DistanceFromBottom = 1
            .DistanceFromRight = 4
            .Shadow = False
        End With
        End With
        With Options
            .DefaultBorderLineStyle = wdLineStyleSingle
            .DefaultBorderLineWidth = wdLineWidth300pt
            .DefaultBorderColor = 5287936
        End With
        End If
    If strStart = "<Rahmen Typ=" & Chr(34) & Chr(34) & ">" Or strStart = "<Rahmen>" Then
        rngText.Select
        With Selection.ParagraphFormat
        With .Borders(wdBorderLeft)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth300pt
            .Color = wdColorAutomatic
        End With
        With .Borders(wdBorderRight)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth300pt
            .Color = wdColorAutomatic
        End With
        With .Borders(wdBorderTop)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth300pt
            .Color = wdColorAutomatic
        End With
        With .Borders(wdBorderBottom)
            .LineStyle = wdLineStyleSingle
            .LineWidth = wdLineWidth300pt
            .Color = wdColorAutomatic
        End With
        With .Borders
            .DistanceFromTop = 1
            .DistanceFromLeft = 4
            .DistanceFromBottom = 1
            .DistanceFromRight = 4
            .Shadow = False
        End With
        End With
    End If
End Sub

Function Ausdruck_ersetzen(strStart As String, strEnd As String, strErsatz As String, Optional ByVal boolFormat As Boolean = False)
Selection.Find.ClearFormatting
    Selection.Find.Replacement.ClearFormatting
    If boolFormat = True Then
        Selection.Find.Replacement.Font.Bold = boolFormat
    End If
    With Selection.Find
        .Text = strStart
        .Replacement.Text = strErsatz
        .Forward = True
        .MatchWildcards = False
        .Wrap = wdFindContinue
    End With
    
    Selection.Find.Execute Replace:=wdReplaceAll
If strEnd = "" Then
    Exit Function
Else
    Selection.Find.ClearFormatting
        Selection.Find.Replacement.ClearFormatting
        With Selection.Find
            .Text = strEnd
            .Replacement.Text = ""
            .Forward = True
            .Wrap = wdFindContinue
            .MatchWildcards = False
    End With
End If
    Selection.Find.Execute Replace:=wdReplaceAll
End Function
Function Tags_einfuegen(strStart As String, strEnd As String, intRueck As Integer)
Dim rng As Range
Dim Auswahl As Range
Dim Auswahl_neu As Range
Dim Auswahl_neu2 As Range
Dim rng2 As Range
On Error GoTo ohneMark
Options.PasteSmartCutPaste = False
Set Auswahl = ActiveDocument.Range(Selection.Start, Selection.End)
Set rng = ActiveDocument.Range(Selection.Range.End - 1, Selection.Range.End)
'hier einf|fffd|gen: wenn letztes Zeichen Paragraph, Leerzeichen - Selection.Range -1,
If rng = " " Or rng = Chr(13) Then
    'rng.Delete
    Set Auswahl_neu = ActiveDocument.Range(Auswahl.Start, Auswahl.End - 1)
    Auswahl_neu.Select
    Set rng2 = ActiveDocument.Range(Auswahl_neu.End - 1, Auswahl_neu.End)
        If rng2 = " " Then
        rng2.Delete
        'Set Auswahl_neu2 = ActiveDocument.Range(Auswahl_neu.Start, Auswahl_neu.End - 1)
        'Auswahl_neu2.Select
    End If
End If
'Auswahl_neu.Select

On Error GoTo ohneMark
    With Selection
        .Cut
        .TypeText Text:=strStart & strEnd
        .MoveLeft Unit:=wdCharacter, Count:=intRueck
        .Paste
        .MoveRight Unit:=wdCharacter, Count:=intRueck
    End With
    Exit Function
ohneMark:
    Selection.TypeText Text:=strStart & strEnd
    Selection.MoveLeft Unit:=wdCharacter, Count:=intRueck
End Function

Function fkt_Platzhalter_ersetzen(original As String, ersetzung As String)
Selection.Find.ClearFormatting
Selection.Find.Replacement.ClearFormatting
Selection.Find.Font.Color = wdColorGray125
With Selection.Find
    .Text = original
    .Replacement.Text = ersetzung
    .Forward = True
    .Wrap = wdFindContinue
    .Format = True
    .MatchCase = False
    .MatchWholeWord = False
    .MatchWildcards = True 'Platzhalter aktiv
    .MatchSoundsLike = False
    .MatchAllWordForms = False
End With
Selection.Find.Execute Replace:=wdReplaceAll
End Function

Function fkt_einfach_ersetzen(ori As Variant, ers As Variant)
Selection.Find.ClearFormatting
Selection.Find.Replacement.ClearFormatting
Selection.Find.Font.Color = wdColorGray125
With Selection.Find
    .Text = ori
    .Replacement.Text = ers
    .Forward = True
    .Wrap = wdFindContinue
    .Format = True
    .MatchCase = True
    .MatchWholeWord = False
    .MatchWildcards = False 'Platzhalter inaktiv
    .MatchSoundsLike = False
    .MatchAllWordForms = False
End With
Selection.Find.Execute Replace:=wdReplaceAll
End Function
Attribute VB_Name = "Kuerzungen"
Sub Ersetzung_Kuerzungen(control As IRibbonControl) 'LaTeX K|fffd|rzungen ersetzen
' Ersetzt K|fffd|rzungen von LaTeX
Ausdruck_ersetzen "<=", "", "\le"
Ausdruck_ersetzen "<<", "", "\ll"
Ausdruck_ersetzen ">=", "", "\ge"
Ausdruck_ersetzen ">>", "", "\gg"
Ausdruck_ersetzen "~a ", "", "\alpha "
Ausdruck_ersetzen "\apx ", "", "\approx "
Ausdruck_ersetzen "\be ", "", "\begin{equation} "
Ausdruck_ersetzen "\bea ", "", "\begin{eqnarray} "
Ausdruck_ersetzen "\beas ", "", "\begin{eqnarray*} "
Ausdruck_ersetzen "\bs ", "", "\backslash "
Ausdruck_ersetzen "\cd ", "", "\cdots "
Ausdruck_ersetzen "\Do ", "", "\downarrow "
Ausdruck_ersetzen "\dd ", "", "\o "
Ausdruck_ersetzen "\ee ", "", "\end{equation} "
Ausdruck_ersetzen "\eea ", "", "\end{eqnarray} "
Ausdruck_ersetzen "\eeas ", "", "\end{eqnarray*} "
Ausdruck_ersetzen "\eqv ", "", "\equiv "
Ausdruck_ersetzen "\es ", "", "\emptyset "
Ausdruck_ersetzen "\ex ", "", "\exists "
Ausdruck_ersetzen "\f{", "", "\frac{"
Ausdruck_ersetzen "\fa ", "", "\forall "
Ausdruck_ersetzen "\inn ", "", "\int \nolimits "
Ausdruck_ersetzen "\inl ", "", "\int \limits "
Ausdruck_ersetzen "\la ", "", "\leftarrow "
Ausdruck_ersetzen "\l< ", "", "\langle "
Ausdruck_ersetzen "\ld ", "", "\ldots "
Ausdruck_ersetzen "\lgla ", "", "\longleftarrow "
Ausdruck_ersetzen "\lglra ", "", "\longleftrightarrow "
Ausdruck_ersetzen "\lgmt ", "", "\longmapsto "
Ausdruck_ersetzen "\lgra ", "", "\longrightarrow "
Ausdruck_ersetzen "\lra ", "", "\leftrightarrow "
Ausdruck_ersetzen "\Lra ", "", "\leftrightarrow "
Ausdruck_ersetzen "\lt ", "", "\leadsto "
Ausdruck_ersetzen "\mt ", "", "\mapsto"
Ausdruck_ersetzen "\n ", "", "\not "
Ausdruck_ersetzen "\o+ ", "", "\ominus "
Ausdruck_ersetzen "\o- ", "", "\oplus "
Ausdruck_ersetzen "\o. ", "", "\opoint "
Ausdruck_ersetzen "\o/ ", "", "\oslash "
Ausdruck_ersetzen "\oin ", "", "\oint \nolimits"
Ausdruck_ersetzen "\oil ", "", "\oint \limits"
Ausdruck_ersetzen "\ol ", "", "\overline "
Ausdruck_ersetzen "\ox ", "", "\otimes "
Ausdruck_ersetzen "\pn ", "", "\prod \nolimits "
Ausdruck_ersetzen "\pl ", "", "\prod \limits "
Ausdruck_ersetzen "\pll ", "", "\parallel "
Ausdruck_ersetzen "\r> ", "", "\rangle "
Ausdruck_ersetzen "\ra ", "", "\rightarrow "
Ausdruck_ersetzen "\Ra ", "", "\rightarrow "
Ausdruck_ersetzen "\s ", "", "\sqrt "
Ausdruck_ersetzen "\sbs ", "", "\subset "
Ausdruck_ersetzen "\sbsq ", "", "\subseteq "
Ausdruck_ersetzen "\sps ", "", "\supset "
Ausdruck_ersetzen "\spse ", "", "\supseteq "
Ausdruck_ersetzen "\sun ", "", "\sum \nolimits "
Ausdruck_ersetzen "\sul ", "", "\sum \limits "
Ausdruck_ersetzen "\tri ", "", "\triangle "
Ausdruck_ersetzen "\ua ", "", "\uparrow "
Ausdruck_ersetzen "\uda ", "", "\updownarrow "
Ausdruck_ersetzen "\ul ", "", "\underline "
Ausdruck_ersetzen "\vd ", "", "\vdots "
Ausdruck_ersetzen "\x ", "", "\times "
Ausdruck_ersetzen "\s ", "", "\sqrt "
Ausdruck_ersetzen "\s ", "", "\sqrt "
End Sub

Sub SucheFRAC(control As IRibbonControl) 'Kleine Br|fffd|che umwandeln (verk|fffd|rzen)
  Selection.HomeKey Unit:=wdStory
  Do
    Selection.Find.ClearFormatting
    With Selection.Find
        .Text = "\frac{"
        .Forward = True
        .Wrap = wdFindStop
    End With
    gefunden = Selection.Find.Execute
    If gefunden Then
      Selection.MoveRight Unit:=wdCharacter, Count:=5, Extend:=wdExtend
      st = Selection.Text
      st1 = Mid$(st, 8, 2)
      st2 = Right$(st, 1)
      If st1 = "}{" And st2 = "}" Then
        z_kurz = True
        Selection.Text = Mid$(st, 7, 1) & "/" & Mid$(st, 10, 1)
        Selection.MoveRight Unit:=wdCharacter, Count:=1
      Else
        Selection.MoveLeft Unit:=wdCharacter, Count:=1
        Selection.MoveRight Unit:=wdCharacter, Count:=5
      End If
    End If
  Loop While gefunden
End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Umwandlung"
Public Stopp As Boolean
Sub Umwandlung_Formel(control As IRibbonControl) 'STRG+ALT+|fffd| - Hauptprogramm, alle Unterprogramme werden aufgeruften
Selection.HomeKey Unit:=wdStory
'Call Umspeichern 'M|fffd|glichkeit, Sicherungsdatei anzulegen
'If Stopp = True Then
'    Exit Sub
'End If
Application.ScreenUpdating = False
Call Vorauswahl 'alle L-Tag Bereiche werden grau eingef|fffd|rbt
Call Umbrueche 'Umbr|fffd|che in den Formeln werden auf manuelle umgestellt (wegen Matritzen)
Call LueckeErsetzen
Call einfach_ersetzen 'einfache Sonderzeichen werden ersetzt, alpha, le, Pfeile...
Call Ersetzungen 'alle Sonderausdr|fffd|cke werden ersetzt - frac, sqrt, sum, int, matrix, vec bis dreifache Verschachtelung
Call Ersetzungen '2. Runde
Call Ersetzungen '3. Runde
Call matrix 'Matrizen werden umgesetzt
fkt_umwandlung "<L>", "</L>"
ActiveDocument.OMathJc = wdOMathJcLeft 'Formeln im Dokument linksb|fffd|ndig
Call strich 'R|fffd|ckumwandlung gerader Strich |
Selection.HomeKey Unit:=wdStory
Call farblos 'Entf|fffd|rbung der getaggedten Bereiche
Call leereSuche
Application.ScreenUpdating = True
End Sub
Sub LueckeErsetzen()
fkt_Platzhalter_ersetzen "_..._", ChrW(&H2B0D) & " "
End Sub


Sub Vorauswahl() 'Alle <L> getaggedten Bereiche werden rot eingef|fffd|rbt - nur hier soll Umwandlung stattfinden.
Selection.Find.ClearFormatting
Selection.Find.Replacement.ClearFormatting
Selection.Find.Replacement.Font.Color = wdColorGray125
With Selection.Find
    .Text = "(\<L\>*\</L\>)"
    .Replacement.Text = "\1"
    .Forward = True
    .Wrap = wdFindContinue
    .Format = True
    .MatchCase = False
    .MatchWholeWord = False
    .MatchWildcards = True 'Platzhalter aktiv
    .MatchSoundsLike = False
    .MatchAllWordForms = False
End With
Selection.Find.Execute Replace:=wdReplaceAll
End Sub

Sub farblos() 'Die Bereiche werden wieder "entf|fffd|rbt"
Selection.Find.ClearFormatting
Selection.Find.Replacement.ClearFormatting
Selection.Find.Font.Color = wdColorGray125
Selection.Find.Replacement.Font.ColorIndex = wdAutomatic
With Selection.Find
    .Text = "(\<L\>*\</L\>)"
    .Replacement.Text = "\1"
    .Forward = True
    .Wrap = wdFindContinue
    .Format = True
    .MatchCase = False
    .MatchWholeWord = False
    .MatchWildcards = True 'Platzhalter aktiv
    .MatchSoundsLike = False
    .MatchAllWordForms = False
End With
Selection.Find.Execute Replace:=wdReplaceAll
End Sub
Sub leereSuche()
'zur Bereinigung des Suchen und Ersetzensdialogs wird eine leere Suche durchgef|fffd|hrt
Selection.Find.ClearFormatting
Selection.Find.Replacement.ClearFormatting
With Selection.Find
    .Text = ""
    .Replacement.Text = ""
    .Format = False
    .MatchCase = False
    .MatchWholeWord = False
    .MatchWildcards = False 'Platzhalter inaktiv
    .MatchSoundsLike = False
    .MatchAllWordForms = False
End With
Selection.Find.Execute Replace:=wdReplaceAll
End Sub
Sub Umbrueche() 'Harte Umbr|fffd|che werden in L-Tag Bereichen durch manuelle ersetzt (Matrizen)
Selection.Find.ClearFormatting
Selection.Find.Replacement.ClearFormatting
Selection.Find.Font.Color = wdColorGray125
Selection.Find.Replacement.Font.Color = wdColorGray125
With Selection.Find
    .Text = "^p"
    .Replacement.Text = "^l"
    .Forward = True
    .Wrap = wdFindContinue
    .Format = True
    .MatchCase = False
    .MatchWholeWord = False
    .MatchWildcards = False
    .MatchSoundsLike = False
    .MatchAllWordForms = False
End With
Selection.Find.Execute Replace:=wdReplaceAll
End Sub

'Sub wandel() '<L>(?( 2 & 2 & 3 @3 & 3 & 3 @3 & 3 & 3)</L>
'fkt_Search_umwandlung "<L>", "</L>", False
'End Sub

Sub strich() 'senkrechter Strich hat im Formeleditor spezielle Funktionen, daher muss er tempor|fffd|r abge|fffd|ndert werden
fkt_einfach_ersetzen ChrW(&H23B9), "|"
End Sub
Sub matrix() 'Nach 3 maligem Durchlaufen der Standardersetzungen sollten keine ungewandelten Br|fffd|che etc mehr in Matrizen vorhanden sein. Je nach Umbruchschreibweise sind Wandlungen f|fffd|r 2 zeilige, 3 zeilige, 4 zeilige Matrizen programmiert.
da = ChrW(&H20A6)
r_a = ChrW(&H20A7)
r_z = ChrW(&H20A8)
g_a = ChrW(&H20BC)
g_z = ChrW(&H20BD)
e_a = ChrW(&H20B8)
e_z = ChrW(&H20B9)
bs = ChrW(&H20B7)
at = ChrW(&H20B6)

Call Klammer_ersetzen 'Platzhalterzeichen werden ersetzt
'4 m|fffd|gliche F|fffd|lle werden unterschieden.
'Fall 1 (geschweifte auf in erster Zeile):
'\mat{
'1 & 1}
'Fall 2 (alles in einer Zeile):
'\mat{1 & 1}
'Fall 3 (erste Zeile d. Matrix in erster Zeile):
'\mat{1 //
'1 & 1}
'Fall 4 (geschweifte auf in zweiter Zeile):
'\mat
'{1 & 1}


'Wenn Umbr|fffd|che mit weichem Zeilenumbruch gestaltet sind
'Matrix \mat{ \\ } 2 zeilig
fkt_Platzhalter_ersetzen "(" & bs & "mat" & g_a & Chr(11) & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
"(" & ChrW(&H25A0) & "(\2" & at & "\4))"
'Matrix \mat{ \\ \\ } 3 zeilig
fkt_Platzhalter_ersetzen "(" & bs & "mat" & g_a & Chr(11) & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
"(" & ChrW(&H25A0) & "(\2" & at & "\4" & at & "\6))"
'Matrix \mat{ \\ \\ \\ } 4 zeilig
fkt_Platzhalter_ersetzen "(" & bs & "mat" & g_a & Chr(11) & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
"(" & ChrW(&H25A0) & "(\2" & at & "\4" & at & "\6) & at & \8)"


'Wenn KEINE Umbr|fffd|che in der Matrix enthalten sind, also alles in einer Zeile steht
'Matrix \mat{ \\ } 2 zeilig
fkt_Platzhalter_ersetzen "(" & bs & "mat" & g_a & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
"(" & ChrW(&H25A0) & "(\2" & at & "\4))"
'Matrix \mat{ \\ \\ } 3 zeilig
fkt_Platzhalter_ersetzen "(" & bs & "mat" & g_a & ")([!" & g_z & bs & "]@)(" & bs & bs & ")([!" & g_z & bs & "]@)(" & bs & bs & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
"(" & ChrW(&H25A0) & "(\2" & at & "\4" & at & "\6))"
'Matrix \mat{ \\ \\ \\ } 4 zeilig
fkt_Platzhalter_ersetzen "(" & bs & "mat" & g_a & ")([!" & g_z & bs & "]@)(" & bs & bs & ")([!" & g_z & bs & "]@)(" & bs & bs & ")([!" & g_z & bs & "]@)(" & bs & bs & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
"(" & ChrW(&H25A0) & "(\2" & at & "\4" & at & "\6) & at & \8)"


'Wenn Umbr|fffd|che in der Matrix enthalten sind, aber erste Zeile mit \mat in einer Zeile steht
'Matrix \mat{ \\ } 2 zeilig
fkt_Platzhalter_ersetzen "(" & bs & "mat" & g_a & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
"(" & ChrW(&H25A0) & "(\2" & at & "\4))"
'Matrix \mat{ \\ \\ } 3 zeilig
fkt_Platzhalter_ersetzen "(" & bs & "mat" & g_a & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
"(" & ChrW(&H25A0) & "(\2" & at & "\4" & at & "\6))"
'Matrix \mat{ \\ \\ \\ } 4 zeilig
fkt_Platzhalter_ersetzen "(" & bs & "mat" & g_a & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
"(" & ChrW(&H25A0) & "(\2" & at & "\4" & at & "\6) & at & \8)"


'Wenn Umbr|fffd|che in der Matrix enthalten sind, aber die geschweifte Klammer in der 2. Zeile steht
'Matrix \mat{ \\ } 2 zeilig
fkt_Platzhalter_ersetzen "(" & bs & "mat" & Chr(11) & g_a & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
"(" & ChrW(&H25A0) & "(\2" & at & "\4))"
'Matrix \mat{ \\ \\ } 3 zeilig
fkt_Platzhalter_ersetzen "(" & bs & "mat" & Chr(11) & g_a & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
"(" & ChrW(&H25A0) & "(\2" & at & "\4" & at & "\6))"
'Matrix \mat{ \\ \\ \\ } 4 zeilig
fkt_Platzhalter_ersetzen "(" & bs & "mat" & Chr(11) & g_a & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & bs & "]@)(" & bs & bs & Chr(11) & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
"(" & ChrW(&H25A0) & "(\2" & at & "\4" & at & "\6) & at & \8)"

Call Klammer_rueckersetzen 'Platzhalterzeichen werden r|fffd|ck|fffd|bersetzt
End Sub
Sub Ersetzungen() 'Vorab wurden Platzhaltersymbole durch nicht gebr|fffd|uchliche Sonderzeichen ersetzt, hier Umformung in Schreibweise entsprechend Unicode nearly plain text encoding
'Definition der kryptischen Zeichen (f|fffd|r Platzhalter)
da = ChrW(&H20A6) '^
r_a = ChrW(&H20A7) '(
r_z = ChrW(&H20A8) ')
g_a = ChrW(&H20BC) '{
g_z = ChrW(&H20BD) '}
e_a = ChrW(&H20B8) '[
e_z = ChrW(&H20B9) ']
bs = ChrW(&H20B7) '\
at = ChrW(&H20B6) '@
'Sonderzeichen f|fffd|r Formeleditor
wrz = ChrW(&H221A)
integral = ChrW(&H222B)
overline = ChrW(&HAF)
summe = ChrW(&H2211)
produkt = ChrW(&H220F)
vec = ChrW(&H20D7)
dot = ChrW(&H307)
ddot = ChrW(&H308)

Call Klammer_ersetzen 'Erstzung der Platzhaltersymbole durch kryptische Zeichen (s.o.)

'Br|fffd|che werden umgewandelt - 1. Durchgang innere Br|fffd|che
fkt_Platzhalter_ersetzen "(" & bs & "frac" & g_a & ")([!" & bs & g_a & g_z & "]@)(" & g_z & g_a & ")([!" & bs & g_a & g_z & "]@)(" & g_z & ")", _
r_a & "\2" & r_z & "/" & r_a & "\4" & r_z
'Wurzel allgemein \sqrt[]{} in Schreibweise v(a&b)
fkt_Platzhalter_ersetzen "(" & bs & "sqrt" & e_a & ")([!" & bs & e_z & "]@)(" & e_z & g_a & ")([!" & bs & g_a & g_z & "]@)(" & g_z & ")", _
wrz & r_a & "\2&\4" & r_z
'Quadratwurzel \sqrt{} in Schreibweise v(a)
fkt_Platzhalter_ersetzen "(" & bs & "sqrt" & g_a & ")([!" & bs & g_a & g_z & "]@)(" & g_z & ")", _
wrz & r_a & "\2" & r_z


'Integral \int_y^x (Anfang und Ende des Integrals einzahlig)
fkt_Platzhalter_ersetzen "(" & bs & "int_)([! " & g_a & bs & da & "]@)(" & da & ")([! " & g_a & bs & "]@)( )", _
integral & "_\2" & da & "\4" & ChrW(&H2592)
'Integral \int_y^{x} (Anfang des Integrals einstellig)
fkt_Platzhalter_ersetzen "(" & bs & "int_)([! " & g_a & bs & da & "]@)(" & da & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")( )", _
integral & "_" & "\2" & da & r_a & "\4" & r_z & ChrW(&H2592)
'Integral \int_{y}^x (Ende des Integrals einzahlig)
fkt_Platzhalter_ersetzen "(" & bs & "int_" & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & da & ")([! " & g_a & bs & "]@)( )", _
integral & "_" & r_a & "\2" & r_z & da & "\4" & ChrW(&H2592)
'Integral \int_{y}^{x} (nichts einzeln)
fkt_Platzhalter_ersetzen "(" & bs & "int_" & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & da & g_a & ")([!" & g_z & bs & g_a & "]@)(" & g_z & ")( )", _
integral & "_" & r_a & "\2" & r_z & da & r_a & "\4" & r_z & ChrW(&H2592)

'Summe \sum_y^x (Anfang und Ende der Summe einzahlig)
fkt_Platzhalter_ersetzen "(" & bs & "sum_)([! " & g_a & bs & da & "]@)(" & da & ")([! " & g_a & bs & "]@)( )", _
summe & "_\2" & da & "\4" & ChrW(&H2592)
'Summe \sum_y^{x} (Anfang der Summe einstellig)
fkt_Platzhalter_ersetzen "(" & bs & "sum_)([! " & g_a & bs & da & "]@)(" & da & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")( )", _
summe & "_" & "\2" & da & r_a & "\4" & r_z & ChrW(&H2592)
'Summe \sum_{y}^x (Ende Summe einzahlig)
fkt_Platzhalter_ersetzen "(" & bs & "sum_" & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & da & ")([! " & g_a & bs & "]@)( )", _
summe & "_" & r_a & "\2" & r_z & da & "\4" & ChrW(&H2592)
'Summe \sum_{y}^{x} (nichts einzeln)
fkt_Platzhalter_ersetzen "(" & bs & "sum_" & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & da & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")( )", _
summe & "_" & r_a & "\2" & r_z & da & r_a & "\4" & r_z & ChrW(&H2592)

'Produkt \prod_y^x (Anfang und Ende der Produkt einzahlig)
fkt_Platzhalter_ersetzen "(" & bs & "prod_)([! " & g_a & bs & da & "]@)(" & da & ")([! " & g_a & bs & "]@)( )", _
produkt & "_\2" & da & "\4" & ChrW(&H2592)
'Produkt \prod_y^{x} (Anfang der Produkt einstellig)
fkt_Platzhalter_ersetzen "(" & bs & "prod_)([! " & g_a & bs & da & "]@)(" & da & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")( )", _
produkt & "_" & "\2" & da & r_a & "\4" & r_z & ChrW(&H2592)
'Produkt \prod_{y}^x (Ende Produkt einzahlig)
fkt_Platzhalter_ersetzen "(" & bs & "prod_" & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & da & ")([! " & g_a & bs & "]@)( )", _
produkt & "_" & r_a & "\2" & r_z & da & "\4" & ChrW(&H2592)
'Produkt \prod_{y}^{x} (nichts einzeln)
fkt_Platzhalter_ersetzen "(" & bs & "prod_" & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & da & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")( )", _
produkt & "_" & r_a & "\2" & r_z & da & r_a & "\4" & r_z & ChrW(&H2592)


'Overline \overline{}
fkt_Platzhalter_ersetzen "(" & bs & "overline" & g_a & ")([!" & g_a & g_z & bs & "]@)(" & g_z & ")", _
overline & r_a & "\2" & r_z & " "

'Vektorpfeil \vec{} - nur ein Buchstabe
fkt_Platzhalter_ersetzen "(" & bs & "vec" & g_a & ")(?)(" & g_z & ")", _
"\2" & vec & " "
'Vektorpfeil \vec{} - l|fffd|ngerer Ausdruck
fkt_Platzhalter_ersetzen "(" & bs & "vec" & g_a & ")([!" & g_z & bs & g_a & "]@)(" & g_z & ")", _
r_a & "\2" & r_z & " " & vec & " "

'dot{v}
fkt_Platzhalter_ersetzen "(" & bs & "dot" & g_a & ")(?)(" & g_z & ")", _
"\2" & dot
'dot(lang)
fkt_Platzhalter_ersetzen "(" & bs & "dot" & g_a & ")([!" & g_z & bs & g_a & "]@)(" & g_z & ")", _
r_a & "\2" & r_z & " " & dot & " "

'ddot{v}
fkt_Platzhalter_ersetzen "(" & bs & "ddot" & g_a & ")(?)(" & g_z & ")", _
"\2" & ddot
'ddot(lang)
fkt_Platzhalter_ersetzen "(" & bs & "ddot" & g_a & ")([!" & g_z & bs & g_a & "]@)(" & g_z & ")", _
r_a & "\2" & r_z & " " & ddot & " "


'beschrifteter Pfeil \xrightarrow{}
fkt_Platzhalter_ersetzen "(" & bs & "xrightarrow" & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
ChrW(&H2192) & ChrW(&H2534) & r_a & "\2" & r_z
'beschrifteter Pfeil \xrightarrow[]{}
fkt_Platzhalter_ersetzen "(" & bs & "xrightarrow" & e_a & ")([!" & e_z & bs & "]@)(" & e_z & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
r_a & "\4" & r_z & ChrW(&H252C) & ChrW(&H2192) & ChrW(&H252C) & r_a & "\2" & r_z

'\binom{n}{k}
fkt_Platzhalter_ersetzen "(" & bs & "binom" & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
r_a & "\2" & ChrW(&HA6) & "\4" & r_z

'Limes
fkt_Platzhalter_ersetzen "(" & bs & "lim_" & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
r_a & Chr(34) & "lim" & Chr(34) & r_z & ChrW(&H252C) & r_a & "\2" & r_z

'mehrstellig hochgestellt
fkt_Platzhalter_ersetzen "(" & da & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
da & "(\2)"
'mehrstellig tiefgestellt
fkt_Platzhalter_ersetzen "(_" & g_a & ")([!" & g_z & g_a & bs & "]@)(" & g_z & ")", _
"_(\2)"

Call Klammer_rueckersetzen
End Sub
Sub einfach_ersetzen() 'Latex-Ausdr|fffd|cke ohne Zusatzangaben in Klammern
Folgezeichen = Array(" ", "_", "^", "<", ")", "}", ",")
Folgezeichen_e = Array(" ", "_", "^^", "<", ")", "}", ",") 'n|fffd|tig wegen ^

'Array mit LaTeX Ausdr|fffd|cken und Array mit Sonderzeichen f|fffd|r FE
Latex = Array( _
"\alpha", "\Alpha", "\angle", "\approx", "\beta", "\Beta", "\cap", "\cdot", "\cdots", "\chi", "\Chi", "\circ", "\cong", "\cup", "\ddots", "\delta", "\Delta", "\downarrow", "\Downarrow", "\emptyset", "\epsilon", "\Epsilon", "\equiv", "\eta", "\Eta", "\gamma", "\Gamma", "\ge", "\gg", "\hat{=}", "\infty", "\iota", "\Iota", "\kappa", "\Kappa", "\lamda", "\Lamda", "\leftarrow", "\Leftarrow", "\leftrightarrow", "\Leftrightarrow", "\ll", "\mu", "\Mu", "\neq", "\not=", "\notparallel", "\nparallel", "\nu", "\Nu", "\omega", "\Omega", "\ominus", "\oplus", "\otimes", "\parallel", "\permille", "\phi", "\Phi", "\pi", "\Pi", "\pm", "\psi", "\Psi", "\Q", "\rho", "\Rho", "\rightarrow", "\Rightarrow", "\rightharpoon", "\setminus", "\sigma", "\Sigma", "\simeq", "\subset", "\subseteq", "\superset", "\superset", "\superseteq", "\tau", "\Tau", "\theta", "\Theta", "\times", "\to", "\uparrow", "\Uparrow", "\updownarrow", "\Updownarrow", "\upsilon", "\Upsilon", "\vee", "\wedge", "\xi", "\Xi", "\zeta", "\Zeta", _
"\leftharpoon", "\triangle ", "\not\in", "\notin", "\sum ", "\prod ", "\int ")
Unicode = Array( _
ChrW(&H3B1), ChrW(&H391), ChrW(&H2220), ChrW(&H2248), ChrW(&H3B2), ChrW(&H392), ChrW(&H2229), ChrW(&H22C5), ChrW(&H22EF), ChrW(&H3C7), ChrW(&H3A7), ChrW(&H2218), ChrW(&H2245), ChrW(&H222A), ChrW(&H22F1), ChrW(&H3B4), ChrW(&H394), ChrW(&H2193), ChrW(&H21D3), ChrW(&H2205), ChrW(&H3B5), ChrW(&H395), ChrW(&H2261), ChrW(&H3B7), ChrW(&H397), ChrW(&H3B3), ChrW(&H393), ChrW(&H2265), ChrW(&H226B), ChrW(&H2259), ChrW(&H221E), ChrW(&H3B9), ChrW(&H399), ChrW(&H3BA), ChrW(&H39A), ChrW(&H3BB), ChrW(&H39B), ChrW(&H2190), ChrW(&H21D0), ChrW(&H2194), ChrW(&H21D4), ChrW(&H226A), ChrW(&H3BC), ChrW(&H39C), ChrW(&H2260), ChrW(&H2260), ChrW(&H2226), ChrW(&H2226), ChrW(&H3BD), ChrW(&H39D), ChrW(&H3C9), ChrW(&H3A9), ChrW(&H2296), ChrW(&H2295), ChrW(&H2297), ChrW(&H2225), ChrW(&H2030), ChrW(&H3C6), ChrW(&H3A6), ChrW(&H3C0), ChrW(&H3A0), ChrW(&HB1), ChrW(&H3C8), ChrW(&H3A8), ChrW(&H211A), ChrW(&H3C1), ChrW(&H3A1), ChrW(&H2192), ChrW(&H21D2), ChrW(&H21C1), ChrW(&H2216), ChrW(&H3C2), ChrW(&H3A3), _
ChrW(&H2243), ChrW(&H2282), ChrW(&H2286), ChrW(&H2283), ChrW(&H2283), ChrW(&H2287), ChrW(&H3C4), ChrW(&H3A4), ChrW(&H3B8), ChrW(&H398), ChrW(&HD7), ChrW(&H2192), ChrW(&H2191), ChrW(&H21D1), ChrW(&H2195), ChrW(&H21D5), ChrW(&H3C5), ChrW(&H3A5), ChrW(&H2228), ChrW(&H2227), ChrW(&H3BE), ChrW(&H39E), ChrW(&H3B6), ChrW(&H396), ChrW(&H21BD), ChrW(&H25B3), ChrW(&H2209), ChrW(&H2209), ChrW(&H2211), ChrW(&H220F), ChrW(&H222B))

'W|fffd|rde bei manchen kurzen Ausdr|fffd|cken zu falschen Treffern f|fffd|hren, sie sind nur in Kombination mit Zusatzzeichen erkennbar
Latex_2 = Array("\in", "\le", "\N", "\o", "\O", "\R", "\sim", "\Z", "\hat")
Unicode_2 = Array(ChrW(&H2208), ChrW(&H2264), ChrW(&H2115), ChrW(&H3BF), ChrW(&H39F), ChrW(&H211D), ChrW(&H223C), ChrW(&H2124), ChrW(&H302))

For i = 0 To UBound(Latex)
    fkt_einfach_ersetzen Latex(i), Unicode(i) 'erste Runde f|fffd|r eindeutige F|fffd|lle
Next

For i = 0 To UBound(Latex_2)
    For k = 0 To UBound(Folgezeichen)
        fkt_einfach_ersetzen Latex_2(i) & Folgezeichen(k), Unicode_2(i) & Folgezeichen_e(k) 'zweite Runde f|fffd|r uneindeutige F|fffd|lle
    Next
Next

End Sub

Sub Klammer_ersetzen() 'Runde, eckige und geschweifte Klammern werden durch kryptische Sonderzeichen ersetzt
da = ChrW(&H20A6)
r_a = ChrW(&H20A7)
r_z = ChrW(&H20A8)
g_a = ChrW(&H20BC)
g_z = ChrW(&H20BD)
e_a = ChrW(&H20B8)
e_z = ChrW(&H20B9)
bs = ChrW(&H20B7)
stri = ChrW(&H23B9)

original = Array("(", ")", "{", "}", "[", "]", "\", "^", "|")
ersetzung = Array(r_a, r_z, g_a, g_z, e_a, e_z, bs, da, stri)

For i = 0 To UBound(original)
fkt_einfach_ersetzen original(i), ersetzung(i)
Next
End Sub

Sub Klammer_rueckersetzen() 'Runde, eckige und geschweifte Klammern werden r|fffd|ck|fffd|bersetzt, Strich aus irgendeinem Grund erst zum Schluss
da = ChrW(&H20A6)
r_a = ChrW(&H20A7)
r_z = ChrW(&H20A8)
g_a = ChrW(&H20BC)
g_z = ChrW(&H20BD)
e_a = ChrW(&H20B8)
e_z = ChrW(&H20B9)
bs = ChrW(&H20B7)
at = ChrW(&H20B6)

original = Array("(", ")", "{", "}", "[", "]", "\", "^^", "@")
ersetzung = Array(r_a, r_z, g_a, g_z, e_a, e_z, bs, da, at)

For i = 0 To UBound(original)
fkt_einfach_ersetzen ersetzung(i), original(i)
Next
End Sub
Sub Umspeichern() 'Sicherungserstellung - optional, aktuell deaktiviert
Dim OldFileName, OldFileType, NewFileName, L|fffd|nge1, NameNeu, Pfad
Dim PosDot As Integer
Dim NeuerName As String
Dim InStr As String
Pfad = ActiveDocument.Path
OldFileName = ActiveDocument
OldFileFormat = ActiveDocument.SaveFormat
PosDot = InStr(ActiveDocument, ".") 'sucht im Dateinamen nach einem Punkt
NewFileName = Left(ActiveDocument, PosDot) 'h|fffd|ngt an alles links vom Punkt -sb an
L|fffd|nge1 = Len(NewFileName) - 1
If L|fffd|nge1 = -1 Then GoTo Fehler
NameNeu = Left(ActiveDocument, L|fffd|nge1) & "-sb.docx"
ActiveDocument.SaveAs2 FileName:=Pfad & "\" & NameNeu, FileFormat:=OldFileFormat, _
        LockComments:=False, Password:="", AddToRecentFiles:=False, WritePassword:="", _
        ReadOnlyRecommended:=False, EmbedTrueTypeFonts:=False, _
        SaveNativePictureFormat:=False, SaveFormsData:=False, SaveAsAOCELetter:=False
Stopp = False
Exit Sub
Fehler:     MsgBox ("Datei zun|fffd|chst speichern!")
Stopp = True
End Sub
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{00FAC248-6E66-4B48-A936-CD1EEBA1603B}{D18A59D4-C643-46FD-BAB0-B6C140435185}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Public Auswahl As String
Public Auswahl_Vorher

Private Sub AStandard_Click()
    Auswahl = "Standard_Arial"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub

Private Sub CommandButton1_Click()
    Unload UserForm1
    UserForm2.Show
End Sub

Private Sub AGelbBlau_Click()
    Auswahl = "1_5_Arial_gelbblau"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub
Private Sub ARahmen_Click()
    Auswahl = "1_5_Arial_Rahmen"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub
Private Sub Ablau_Rahmen_Click()
    Auswahl = "1_5_Arial_blau_Rahmen"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub
Private Sub Aohne_Click()
    Auswahl = "1_5_Arial_ohneFarbe"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub



Private Sub Rueckzus_Click()
  If col.Count = 0 Then
    Unload UserForm1
  Else:
    For Each Objekt In col
        If Objekt = "Standard_Arial" Then
        ActiveDocument.ApplyQuickStyleSet2 ("Standard_Arial")
        End If
        If Objekt = "Standard_Verdana" Then
        ActiveDocument.ApplyQuickStyleSet2 ("Standard_Verdana")
        End If
    Next Objekt
  End If
    Unload UserForm1
End Sub


Private Sub VGelbBlau_Click()
    Auswahl = "1_5_Verdana_gelbblau"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub
Private Sub VRahmen_Click()
    Auswahl = "1_5_Verdana_Rahmen"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub
Private Sub Vblau_Rahmen_Click()
    Auswahl = "1_5_Verdana_blau_Rahmen"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub
Private Sub Vohne_Click()
    Auswahl = "1_5_Verdana_ohneFarbe"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub
Private Sub VStandard_Click()
    Auswahl = "Standard_Verdana"
    ActiveDocument.ApplyQuickStyleSet2 (Auswahl)
End Sub
Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{1ABC8367-06AB-407F-9472-54553F7B9166}{F89DA1A4-F052-47C4-9D6B-5422B926E96C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Public strSchriftart As String


Private Sub ComboBox1_Change()

End Sub

Private Sub CommandButton1_Click()
    Dim strSchriftgr|fffd||fffd|e As String
    Dim strSchriftart As String
    Dim eq As OMath
    
    strSchriftgr|fffd||fffd|e = ComboBox2.Text
    strSchriftart = ComboBox1.Text
    If strSchriftgr|fffd||fffd|e = "" Then strSchriftgr|fffd||fffd|e = "12"
    If strSchriftart = "" Then strSchriftart = "Verdana"
    With ActiveDocument.Styles("Standard").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e
    End With
    With ActiveDocument.Styles("Kein Leerraum").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e
    End With
    With ActiveDocument.Styles("|fffd|berschrift 1").Font
        .Name = strSchrifart
        .Size = strSchriftgr|fffd||fffd|e + 6
        .Bold = True
        .Italic = False
    End With
    With ActiveDocument.Styles("|fffd|berschrift 2").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e + 4
        .Bold = True
    End With
    With ActiveDocument.Styles("|fffd|berschrift 3").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e + 2
        .Bold = True
    End With
    With ActiveDocument.Styles("|fffd|berschrift 4").Font
        .Name = strSchriftart
        .Size = strSchriftgr|fffd||fffd|e
        .Bold = True
    End With
    With Selection.ParagraphFormat
        .WidowControl = True
        .KeepWithNext = True
        .KeepTogether = False
   End With
   With Selection
        .WholeStory
        
   End With
   ActiveDocument.OMathJc = wdOMathJcLeft
   For Each eq In ActiveDocument.OMaths
        eq.Range.Select
        With Selection
            .Font.Size = strSchriftgr|fffd||fffd|e + 2
        End With
    Next
    Unload UserForm2
End Sub

Private Sub CommandButton2_Click()
    Unload UserForm2
End Sub


Private Sub UserForm_Initialize()
Dim SchName As String
Dim SchrColl As Collection
Dim varItem As Variant
Dim AktFont As String
Dim AktFontgr As String
Set SchrColl = New Collection
For Each varFont In FontNames
    SchrName = varFont
    SchrColl.Add SchrName
Next varFont
For Each varItem In SchrColl
    ComboBox1.AddItem varItem
Next varItem
    ComboBox1.Style = fmStyleDropDownList
'   ComboBox1.BoundColumn = 0
    AktFont = ActiveDocument.Styles("Standard").Font.Name
    ComboBox1.Value = AktFont

'Schriftgr|fffd||fffd|e
ComboBox2.AddItem "8"
ComboBox2.AddItem "10"
ComboBox2.AddItem "12"
ComboBox2.AddItem "13"
ComboBox2.AddItem "14"
ComboBox2.AddItem "15"
ComboBox2.AddItem "16"
ComboBox2.AddItem "17"
ComboBox2.AddItem "18"
ComboBox2.AddItem "19"
ComboBox2.AddItem "20"
ComboBox2.AddItem "22"
ComboBox2.AddItem "24"
ComboBox2.AddItem "26"
ComboBox2.AddItem "28"
ComboBox2.AddItem "32"
ComboBox2.AddItem "36"
ComboBox2.AddItem "48"
ComboBox2.AddItem "72"
ComboBox2.Style = fmStyleDropDownList
'ComboBox2.BoundColumn = 0
'ComboBox2.ListIndex = 0
AktFontgr = ActiveDocument.Styles("Standard").Font.Size
On Error GoTo test
ComboBox2.Value = AktFontgr
test: ComboBox2.Value = 12
End Sub


INQUEST-PP=macro
