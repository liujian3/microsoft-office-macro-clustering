Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private ActiveLine     As Long
Private UsedDataColor  As Long
Private IsUseZeroLines As Boolean
Private MyCompany      As esl.Company
Private MyConn         As EdlConnection
Private MyTerm         As esl.ITranslator

Sub OnRefreshInitialize(ByVal comp As esl.Company)
On Error GoTo ErrorHandler
 
    Set MyCompany = comp
    Set MyTerm = MyCompany.Application.Term
    Set MyConn = comp
    
Exit Sub
ErrorHandler:
    MsgBox (Error())
    Application.DisplayAlerts = False
    Application.Quit
End Sub

Private Sub OnRefreshBeforeReports()
    Dim sLanguageDesc As String
    Dim sValue As String
    
    'Fremdsprachige Kontenbezeichnungen
    Range("LanguageDesc").Value = MyCompany.MultiLang.DefaultIndex
    
    If Range("DateSelection").Value = "P" Then
        If Range("Period.All").Value = -1 Or Trim(Range("Period.From").Value) = "" Then
            Range("Period.From").Value = "  1"
        End If
        If Range("Period.All").Value = -1 Or Trim(Range("Period.To").Value) = "" Or Trim(Range("Period.To").Value) = "999" Then
            Range("Period.To").Value = MyConn.Query("SELECT MAX(per_fin) FROM perdat WHERE bkjrcode = " & Range("Year").Value)
        End If
    End If
    
    If Range("DateSelection").Value = "P" Or Range("Date.All").Value = -1 Or Year(Range("Date.From").Value) = 1800 Then
       Range("Date.From").Value = MyConn.Query("SELECT MIN(bgdatum) FROM perdat")
    End If
    
    If Range("DateSelection").Value = "P" Or Range("Date.All").Value = -1 Or Year(Range("Date.To").Value) = 2299 Then
        Range("Date.To").Value = MyConn.Query("SELECT MAX(eddatum) FROM perdat")
    End If
    
    'Else
        'BR21.503.865 foon36643:Export to Excel: Wrong value in case of Date or Reportingdate
        'The error is already solve in other template. The same solution is based on br15.900.835
        'Dim dtFrom As Date
        'Dim dtTo As Date
        'dtFrom = Range("Date.From").Value
        'dtTo = Range("Date.To").Value
        'Range("Date.From").Value = Format(Trim$(dtFrom), "DD.MM.YYYY")
        'Range("Date.To").Value = Format(Trim$(dtTo), "DD.MM.YYYY")
            
    If Range("DateSelection").Value = "D" Or Range("DateSelection").Value = "R" Then
        Range("Year").Value = Year(Range("Date.To").Value)
        Range("Period.From").Value = "  1"
        Range("Period.To").Value = "999"
    End If
                    
End Sub

Private Sub OnRefreshAfterReports()
   Dim lngI As Long
     
   
   'Remove old data
   ClearSheet "Output"
   
   With ActiveWorkbook
     .Colors(1) = RGB(255, 255, 255) ' White
     .Colors(2) = RGB(0, 0, 0)       ' Black
     .Colors(3) = RGB(200, 220, 225) ' Title background
     .Colors(4) = RGB(173, 190, 201) ' Company background
     .Colors(5) = RGB(173, 190, 201) ' Column headers
     .Colors(6) = RGB(227, 238, 240) ' Data
     .Colors(7) = RGB(200, 220, 225) ' Subtotals
     .Colors(8) = RGB(173, 190, 201) ' Totals
   End With
    
   'Display report with or without zerolines
   If ThisWorkbook.Names("fipEmpty").RefersToRange.Value = "-1" Then
     IsUseZeroLines = True
   Else
     IsUseZeroLines = False
   End If
   
   'Create selection criteria
   CreateHeader
   
   'Create Transaction header
   CreateLineHeader
   
   ActiveLine = 13
   
   'Create BWA Lines
   For lngI = 66 To 87
   
     UsedDataColor = 1
           
     Select Case Chr(lngI)
           
        Case "B"
          Range(GetActiveLine("A")).Value = MyTerm(32084, "Sales revenues") '"Umsatzerl|fffd|se"
        
        Case "C"
          Range(GetActiveLine("A")).Value = MyTerm(32085, "Change in stock of finished goods and goods in process.") '"Bestandsver|fffd|nderungen Fertiger / Unfertiger Erzeugnisse"
          
        Case "D"
          Range(GetActiveLine("A")).Value = MyTerm(32086, "Material / purchase of goods") '"Material / Wareneinkauf"
          
        Case "E"
          Range(GetActiveLine("A")).Value = MyTerm(32086, "Material / purchase of goods") '"Sonstige betriebliche Erl|fffd|se"
          
        Case "F"
          Range(GetActiveLine("A")).Value = MyTerm(32088, "Personnel costs") '"Personalkosten"
          
        Case "G"
          Range(GetActiveLine("A")).Value = MyTerm(32089, "Office space expenses") '"Raumkosten"
        
        Case "H"
          Range(GetActiveLine("A")).Value = MyTerm(32090, "Company taxes") '"Betriebliche Steuern"
        
        Case "I"
          Range(GetActiveLine("A")).Value = MyTerm(32091, "Insurance / Contributions / Fiscal Charges") '"Versicherungen / Beitr|fffd|ge / Abgaben"
        
        Case "J"
          Range(GetActiveLine("A")).Value = MyTerm(32092, "Special costs") '"Besondere Kosten"
          
        Case "K"
          Range(GetActiveLine("A")).Value = MyTerm(32093, "Car costs") '"Kfz-Kosten"
          
        Case "L"
          Range(GetActiveLine("A")).Value = MyTerm(32094, "Advertising / travel costs")  '"Werbe-/Reisekosten"
          
        Case "M"
          Range(GetActiveLine("A")).Value = MyTerm(32095, "Withdrawal cost of goods") '"Kosten Warenabgabe"
          
        Case "N"
          Range(GetActiveLine("A")).Value = MyTerm(6269, "Depreciations") '"Abschreibungen"
          
        Case "O"
          Range(GetActiveLine("A")).Value = MyTerm(32096, "Repairs / maintenance") '"Reparatur / Instandhaltungen"
          
        Case "P"
          Range(GetActiveLine("A")).Value = MyTerm(26241, "Miscellaneous costs") '"Sonstige Kosten"
        
        Case "Q"
          Range(GetActiveLine("A")).Value = MyTerm(32097, "Interest expenses") '"Zinsaufwand"
        
        Case "R"
          Range(GetActiveLine("A")).Value = MyTerm(32098, "Other taxes") '"Sonstige Steuern"
          
        Case "S"
          Range(GetActiveLine("A")).Value = MyTerm(32099, "Other non-operating expenses") '"Sonstiger neutraler Aufwand"
          
        Case "T"
          Range(GetActiveLine("A")).Value = MyTerm(32100, "Interest income") '"Zinsertr|fffd|ge"
          
        Case "U"
          Range(GetActiveLine("A")).Value = MyTerm(32102, "Other non-operating income") '"Sonstige neutrale Ertr|fffd|ge"
          
        Case "V"
          Range(GetActiveLine("A")).Value = MyTerm(32103, "Allocated imputed costs") '"Verrechnete kalk. Kosten"
          
        Case "W"
          Range(GetActiveLine("A")).Value = MyTerm(32104, "Account class 5/6") '"Kontenklasse 5/6"
          
     End Select
     
     
     AutoFormatLines GetActiveLine("A"), True, True, True, 9, xlLeft
     Range(GetActiveLine("A") & ":" & GetActiveLine("N")).Interior.ColorIndex = 5
     Range(GetActiveLine("A") & ":" & GetActiveLine("N")).Font.ColorIndex = 2
       
     
     IncActiveline
     
     'Create Transactionlines
     GetTransactionLines Chr(lngI)
     
     IncActiveline
     
     'Create resultline
     Select Case Chr(lngI)
       
       Case "C", "D", "E", "S", "V", "W"
        
         IncActiveline
         CreateResultLine Chr(lngI)
         IncActiveline
         IncActiveline
         IncActiveline
         
      Case "P"
        
         IncActiveline
         CreateResultLine "P1"
         IncActiveline
         IncActiveline
         IncActiveline
         CreateResultLine "P2"
         IncActiveline
         IncActiveline
         IncActiveline
         
       
     End Select
      
   Next lngI
    
   Range("L10", GetActiveLine("M")).Select
   Selection.Columns.AutoFit
  
   Range("A1").Select
   
   Sheets("Range").Visible = False
   Sheets("Data").Visible = False

End Sub

Private Sub ClearSheet(strSheetName As String)
   Sheets(strSheetName).Select
   Cells.Select
   Selection.ClearContents
   Selection.Interior.ColorIndex = 1
   Range("A1").Select
End Sub

Private Sub CreateHeader()
        
    Range("F2").Value = MyTerm(33888, "Comparison report") & " - " & MyTerm(34354, "Actuals vs Budget") '"Budget / Ist Vergleich nach BWA Positionen"
 
    With Range("F2")
      .HorizontalAlignment = xlCenter
      .VerticalAlignment = xlBottom
      .WrapText = False
      .Orientation = 0
      .ShrinkToFit = False
      .MergeCells = False
      .Merge
      With .Font
        .Name = "Verdana"
        .Size = 14
        .Bold = True
        .ColorIndex = 2
      End With
    End With
                
    'Range("A3").Value = MyTerm(5642, "Company")
    'Range("C3").Value = "???"
    
    'Range("A4").Value = MyTerm(8509, "Currency")
    'Range("C4").Value = ThisWorkbook.Names("Currency").RefersToRange.Value
    
    If Range("DateSelection").Value = "P" Then
        Range("A5").Value = MyTerm(1321, "Year")
        Range("C5").Value = ThisWorkbook.Names("Year").RefersToRange.Value
    End If
    
    Range("A6").Value = MyTerm(6227, "Budget version")
    Range("C6").Value = ThisWorkbook.Names("BudgetVersion").RefersToRange.Value
    
    If Range("DateSelection").Value = "P" Then
        If ThisWorkbook.Names("Period.All").RefersToRange.Value = -1 Then
            Range("E4").Value = MyTerm(5771, "Period")
            Range("G4").Value = MyTerm(5614, "All")
        Else
            Range("E4").Value = MyTerm(5771, "Period")
            Range("G4").Value = "'" & _
                            Trim$(ThisWorkbook.Names("Period.From").RefersToRange.Value) & _
                            Space(1) & "-" & Space(1) & _
                            Trim$(ThisWorkbook.Names("Period.To").RefersToRange.Value)
        End If
    End If
    If Range("DateSelection").Value = "D" Then
        Range("E4").Value = MyTerm(8516, "Date")
    End If
    If Range("DateSelection").Value = "R" Then
        Range("E4").Value = MyTerm(15730, "Reporting Date")
    End If
    If Range("DateSelection").Value = "D" Or Range("DateSelection").Value = "R" Then
        If Range("Date.All").Value = -1 Then
            Range("G4").Value = MyTerm(5614, "All")
        Else
        'BR21.503.865 foon36643:Export to Excel: Wrong value in case of Date or Reportingdate
        'The error is already solve in other template. The same solution is based on br15.900.835
            Dim dtFrom As Date
            Dim dtTo As Date
            dtFrom = Range("Date.From").Value
            dtTo = Range("Date.To").Value
            Range("G4").Value = Trim$(dtFrom) & " - " & Trim$(dtTo)
        End If
    End If
    
    If ThisWorkbook.Names("GLAccount.All").RefersToRange.Value = -1 Then
        Range("E5").Value = MyTerm(17974, "General ledger account")
        Range("G5").Value = MyTerm(5614, "All")
    Else
        Range("E5").Value = MyTerm(17974, "General ledger account")
        Range("G5").Value = Trim$(ThisWorkbook.Names("GLAccount.From").RefersToRange.Value) & _
                            Space(1) & "-" & Space(1) & _
                            Trim$(ThisWorkbook.Names("GLAccount.To").RefersToRange.Value)
    End If
    
    If ThisWorkbook.Names("CostCenter.All").RefersToRange.Value = -1 Then
      Range("E6").Value = MyTerm(8494, "Cost center")
      Range("G6").Value = MyTerm(5614, "All")
    Else
      Range("E6").Value = MyTerm(8494, "Cost center")
      Range("G6").Value = ThisWorkbook.Names("CostCenter.From").RefersToRange.Value & _
                          Space(1) & "-" & Space(1) & _
                          ThisWorkbook.Names("CostCenter.To").RefersToRange.Value
    End If
    
    Range("A3:G6").HorizontalAlignment = xlLeft
    Range("A3:G6").VerticalAlignment = xlBottom
    Range("A3:G6").Font.Name = "Verdana"
    Range("A3:G6").Font.Size = 9
    Range("A3:B6").Font.Bold = True
    Range("C3:D6").Font.Bold = False
    Range("E3:F6").Font.Bold = True
    Range("G3:H6").Font.Bold = False
    Range("A3:G6").Font.Italic = False
    Range("A3:G6").Font.ColorIndex = 2
    
    
    'Company line
    With Range("A1:N1").Interior
      .ColorIndex = 4
      .Pattern = xlSolid
    End With
    
    
    'Report title line
    Rows("2:2").RowHeight = 17.25
    With Range("A2:N2").Interior
      .ColorIndex = 3
      .Pattern = xlSolid
    End With
    
    'Selection criteria
    With Range("A3:N6").Interior
      .ColorIndex = 1
      .Pattern = xlSolid
    End With
End Sub

Private Sub CreateLineHeader()
  
  Range("B10").Value = MyTerm(17974, "General ledger account")
  Range("C10").Value = MyTerm(4243, "Description")
  
  Range("G9").Value = MyTerm(1239, "Current balance") '"im Berichtsmonat"
  Range("E10").Value = MyTerm(32801, "Actual") & ": " & LCase(MyTerm(38364, "previous year")) '"Ist Vorjahr"
  Range("F10").Value = MyTerm(8391, "Budget") '"Budget"
  Range("G10").Value = MyTerm(32801, "Actual") '"Ist"
  Range("H10").Value = MyTerm(338, "deviation") & "%" '"Abw. in %"
  
  Range("L9").Value = MyTerm(31818, "Cumulative balance") '"kumuliert bis Berichtsmonat"
  Range("J10").Value = MyTerm(32801, "Actual") & ": " & LCase(MyTerm(38364, "previous year")) '"Ist Vorjahr"
  Range("K10").Value = MyTerm(8391, "Budget") '"Budget"
  Range("L10").Value = MyTerm(32801, "Actual") '"Ist"
  Range("M10").Value = MyTerm(338, "deviation") '"Budget/Ist Abw."
  Range("N10").Value = MyTerm(338, "deviation") & "%" '"Abw. in %"
   
  Range("A9:N9").HorizontalAlignment = xlCenter
  Range("A10:D10").HorizontalAlignment = xlLeft
  Range("E10:N10").HorizontalAlignment = xlRight
  
  Range("A9:N10").VerticalAlignment = xlBottom
  Range("A9:N10").Font.Name = "Verdana"
  Range("A9:N10").Font.Size = 9
  Range("A9:N10").Font.Underline = True
  Range("A9:N10").Font.ColorIndex = 2
  Range("A9:N9").Font.Bold = True
   
  With Range("A9:N10").Interior
    .ColorIndex = 5
    .Pattern = xlSolid
  End With
  
  
  
End Sub


Private Function GetActiveLine(strSpalte As String) As String
  GetActiveLine = strSpalte & CStr(ActiveLine)
End Function

Private Sub IncActiveline()
  ActiveLine = ActiveLine + 1
End Sub

Private Sub AutoFormatLines( _
                strRange As String, _
                IsBold As Boolean, _
                IsItalic As Boolean, _
                IsUnderline As Boolean, _
                lngFontSize As Long, _
                lngAlignment As Long _
                )
                
    With Range(strRange)
      .HorizontalAlignment = lngAlignment
      With .Font
        .Name = "Verdana"
        .Size = lngFontSize
        .Bold = IsBold
        .Italic = IsItalic
        .Underline = IsUnderline
      End With
    End With
  
End Sub


Private Sub GetTransactionLines(strBWACode As String)
  
  Dim lngDataLine    As Long
    
  lngDataLine = 1
   
  
  While Range("Data!A" & CStr(lngDataLine)).Value <> vbNullString
  
    If Range("Data!A" & CStr(lngDataLine)).Value = strBWACode Then
    
      ' Mit oder ohne Nullwerte
      If IsUseZeroLines Or _
         Range("Data!D" & CStr(lngDataLine)).Value + _
         Range("Data!E" & CStr(lngDataLine)).Value + _
         Range("Data!F" & CStr(lngDataLine)).Value + _
         Range("Data!G" & CStr(lngDataLine)).Value + _
         Range("Data!H" & CStr(lngDataLine)).Value + _
         Range("Data!I" & CStr(lngDataLine)).Value <> 0 Then
         
      
        Range(GetActiveLine("B")).Value = "'" & Range("Data!B" & CStr(lngDataLine)).Value
        Range(GetActiveLine("C")).Value = Range("Data!C" & CStr(lngDataLine)).Value
      
        'Monatswerte
        Range(GetActiveLine("E")).Value = IIf(Range("Data!D" & CStr(lngDataLine)).Value <> 0, Range("Data!D" & CStr(lngDataLine)).Value, 0)
        Range(GetActiveLine("F")).Value = IIf(Range("Data!E" & CStr(lngDataLine)).Value <> 0, Range("Data!E" & CStr(lngDataLine)).Value, 0)
        Range(GetActiveLine("G")).Value = IIf(Range("Data!F" & CStr(lngDataLine)).Value <> 0, Range("Data!F" & CStr(lngDataLine)).Value, 0)
        Range(GetActiveLine("H")).FormulaR1C1 = "=IF(RC[-2]<>0,(RC[-1]/RC[-2]*100)-100,0)"
      
        'kumulierte Werte
        Range(GetActiveLine("J")).Value = IIf(Range("Data!G" & CStr(lngDataLine)).Value <> 0, Range("Data!G" & CStr(lngDataLine)).Value, 0)
        Range(GetActiveLine("K")).Value = IIf(Range("Data!H" & CStr(lngDataLine)).Value <> 0, Range("Data!H" & CStr(lngDataLine)).Value, 0)
        Range(GetActiveLine("L")).Value = IIf(Range("Data!I" & CStr(lngDataLine)).Value <> 0, Range("Data!I" & CStr(lngDataLine)).Value, 0)
        Range(GetActiveLine("M")).FormulaR1C1 = "=RC[-2]-RC[-1]"
        Range(GetActiveLine("N")).FormulaR1C1 = "=IF(RC[-3]<>0,(RC[-2]/RC[-3]*100)-100,0)"
      
      
        AutoFormatLines GetActiveLine("B"), False, False, False, 8, xlLeft
        AutoFormatLines GetActiveLine("C"), False, False, False, 8, xlLeft
      
        AutoFormatLines GetActiveLine("E"), False, False, False, 8, xlRight
        AutoFormatLines GetActiveLine("F"), False, False, False, 8, xlRight
        AutoFormatLines GetActiveLine("G"), False, False, False, 8, xlRight
        AutoFormatLines GetActiveLine("H"), False, False, False, 8, xlRight
      
        AutoFormatLines GetActiveLine("J"), False, False, False, 8, xlRight
        AutoFormatLines GetActiveLine("K"), False, False, False, 8, xlRight
        AutoFormatLines GetActiveLine("L"), False, False, False, 8, xlRight
        AutoFormatLines GetActiveLine("M"), False, False, False, 8, xlRight
        AutoFormatLines GetActiveLine("N"), False, False, False, 8, xlRight
      
        Range(GetActiveLine("E") & ":" & GetActiveLine("N")).NumberFormat = "#,##0.00"
      
        Range(GetActiveLine("A") & ":" & GetActiveLine("N")).Interior.ColorIndex = UsedDataColor
      
        If UsedDataColor = 1 Then UsedDataColor = 6 Else UsedDataColor = 1
        'Range(GetActiveLine("G")).Interior.ColorIndex = 15
        'Range(GetActiveLine("L")).Interior.ColorIndex = 15
            
        IncActiveline
      End If
    End If
    
    lngDataLine = lngDataLine + 1
  Wend
  
End Sub


Private Sub CreateResultLine(strBWACode As String)
  Dim MyPos1      As Long
  Dim MyPos2      As Long
  Dim IsNormalSum As Boolean
  Dim strDummy    As String
    
  Select Case strBWACode
     
    Case "C"
      'Text - Gesamtleistung
      Range(GetActiveLine("A")).Value = MyTerm(29792, "Total performance") '"Gesamtleistung"
       
      'Position for SUM - Startpunkt: Umsatzerl|fffd|se
      MyPos1 = GetActiveLine(vbNullString) - FindString("Umsatzerl|fffd|se")
      MyPos2 = 1
      IsNormalSum = True
              
    Case "D"
      'Text - Rohertrag
      Range(GetActiveLine("A")).Value = MyTerm(32996, "Gross proceeds") '"Rohertrag"
       
      'Position for SUM - Startpunkt: Gesamtleistung
      MyPos1 = GetActiveLine(vbNullString) - FindString("Gesamtleistung")
      MyPos2 = 1
      IsNormalSum = True
       
     Case "E"
       'Text - Betrieblicher Rohertrag
       Range(GetActiveLine("A")).Value = MyTerm(32997, "Company gross proceeds") '"Betrieblicher Rohertrag"
       
       'Position for SUM - Startpunkt: Rohertrag
       MyPos1 = GetActiveLine(vbNullString) - FindString("Rohertrag")
       MyPos2 = 1
       IsNormalSum = True
       
     Case "P1"
       'Text - Gesamtkosten
       Range(GetActiveLine("A")).Value = MyTerm(17957, "Total costs") '"Gesamtkosten"
       
       'Position for SUM - Startpunkt: Personalkosten
       MyPos1 = GetActiveLine(vbNullString) - FindString("Personalkosten")
       MyPos2 = 1
       IsNormalSum = True
       
     Case "P2"
       'Text - Betriebsergebnis
       Range(GetActiveLine("A")).Value = MyTerm(33001, "Company Result") '"Betriebsergebnis"
       
       'Position for SUM - Startpunkt: Betrieblicher Rohertrag + Gesamtkosten
       MyPos1 = GetActiveLine(vbNullString) - FindString("Betrieblicher Rohertrag")
       MyPos2 = GetActiveLine(vbNullString) - FindString("Gesamtkosten")
       IsNormalSum = False
       
     Case "S"
       'Text - Neutraler Aufwand gesamt
       Range(GetActiveLine("A")).Value = MyTerm(32998, "Total neutral expenses") '"Neutraler Aufwand gesamt"
       
       'Position for SUM - Startpunkt: Zinsaufwand
       MyPos1 = GetActiveLine(vbNullString) - FindString("Zinsaufwand")
       MyPos2 = 1
       IsNormalSum = True
       
     Case "V"
       'Text - Neutraler Ertrag gesamt
       Range(GetActiveLine("A")).Value = MyTerm(33003, "Total neutral profits") '"Neutraler Ertrag gesamt"
       
       'Position for SUM - Startpunkt: Zinsertr|fffd|ge
       MyPos1 = GetActiveLine(vbNullString) - FindString("Zinsertr|fffd|ge")
       MyPos2 = 1
       IsNormalSum = True
       
     Case "W"
       'Text - Vorl|fffd|ufiges Ergebnis
       Range(GetActiveLine("A")).Value = MyTerm(32999, "Preliminary result") '"Vorl|fffd|ufiges Ergebnis"
       
       'Position for SUM - Startpunkt:
       MyPos1 = GetActiveLine(vbNullString) - FindString("Betriebsergebnis")
       strDummy = "=R[-" & CStr(MyPos1) & "]C +"
       
       MyPos1 = GetActiveLine(vbNullString) - FindString("Neutraler Aufwand gesamt")
       strDummy = strDummy + " R[-" & CStr(MyPos1) & "]C +"
       
       MyPos1 = GetActiveLine(vbNullString) - FindString("Neutraler Ertrag gesamt")
       strDummy = strDummy + " R[-" & CStr(MyPos1) & "]C +"
       
       MyPos1 = GetActiveLine(vbNullString) - FindString("Kontenklasse 5/6")
       MyPos2 = 1
       strDummy = strDummy + " SUM(R[-" & CStr(MyPos1) & "]C:R[-" & CStr(MyPos2) & "]C)"
       
       Range(GetActiveLine("E")).FormulaR1C1 = strDummy
       Range(GetActiveLine("F")).FormulaR1C1 = strDummy
       Range(GetActiveLine("G")).FormulaR1C1 = strDummy
       Range(GetActiveLine("H")).FormulaR1C1 = "=IF(RC[-3]<>0,(RC[-1]/RC[-3]*100)-100,0)"
       
       Range(GetActiveLine("J")).FormulaR1C1 = strDummy
       Range(GetActiveLine("K")).FormulaR1C1 = strDummy
       Range(GetActiveLine("L")).FormulaR1C1 = strDummy
       Range(GetActiveLine("M")).FormulaR1C1 = "=RC[-2]-RC[-1]"
       Range(GetActiveLine("N")).FormulaR1C1 = "=IF(RC[-3]<>0,(RC[-2]/RC[-3]*100)-100,0)"
  
  End Select
  
  ' Create Resultline
  If strBWACode <> "W" Then
    If IsNormalSum Then
      Range(GetActiveLine("E")).FormulaR1C1 = "=SUM(R[-" & CStr(MyPos1) & "]C:R[-" & CStr(MyPos2) & "]C)"
      Range(GetActiveLine("F")).FormulaR1C1 = "=SUM(R[-" & CStr(MyPos1) & "]C:R[-" & CStr(MyPos2) & "]C)"
      Range(GetActiveLine("G")).FormulaR1C1 = "=SUM(R[-" & CStr(MyPos1) & "]C:R[-" & CStr(MyPos2) & "]C)"
      Range(GetActiveLine("H")).FormulaR1C1 = "=IF(RC[-2]<>0,(RC[-1]/RC[-2]*100)-100,0)"
       
      Range(GetActiveLine("J")).FormulaR1C1 = "=SUM(R[-" & CStr(MyPos1) & "]C:R[-" & CStr(MyPos2) & "]C)"
      Range(GetActiveLine("K")).FormulaR1C1 = "=SUM(R[-" & CStr(MyPos1) & "]C:R[-" & CStr(MyPos2) & "]C)"
      Range(GetActiveLine("L")).FormulaR1C1 = "=SUM(R[-" & CStr(MyPos1) & "]C:R[-" & CStr(MyPos2) & "]C)"
      Range(GetActiveLine("M")).FormulaR1C1 = "=RC[-2]-RC[-1]"
      Range(GetActiveLine("N")).FormulaR1C1 = "=IF(RC[-3]<>0,(RC[-2]/RC[-3]*100)-100,0)"
    Else
      Range(GetActiveLine("E")).FormulaR1C1 = "=R[-" & CStr(MyPos1) & "]C + R[-" & CStr(MyPos2) & "]C"
      Range(GetActiveLine("F")).FormulaR1C1 = "=R[-" & CStr(MyPos1) & "]C + R[-" & CStr(MyPos2) & "]C"
      Range(GetActiveLine("G")).FormulaR1C1 = "=R[-" & CStr(MyPos1) & "]C + R[-" & CStr(MyPos2) & "]C"
      Range(GetActiveLine("H")).FormulaR1C1 = "=IF(RC[-3]<>0,(RC[-1]/RC[-3]*100)-100,0)"
       
      Range(GetActiveLine("J")).FormulaR1C1 = "=R[-" & CStr(MyPos1) & "]C + R[-" & CStr(MyPos2) & "]C"
      Range(GetActiveLine("K")).FormulaR1C1 = "=R[-" & CStr(MyPos1) & "]C + R[-" & CStr(MyPos2) & "]C"
      Range(GetActiveLine("L")).FormulaR1C1 = "=R[-" & CStr(MyPos1) & "]C + R[-" & CStr(MyPos2) & "]C"
      Range(GetActiveLine("M")).FormulaR1C1 = "=RC[-2]-RC[-1]"
      Range(GetActiveLine("N")).FormulaR1C1 = "=IF(RC[-3]<>0,(RC[-2]/RC[-3]*100)-100,0)"
    End If
  End If
  
  'Format Resultline
  AutoFormatLines GetActiveLine("A"), True, True, True, 10, xlLeft
  
  If strBWACode <> "W" Then
    Range(GetActiveLine("A") & ":" & GetActiveLine("N")).Interior.ColorIndex = 7
  Else
    Range(GetActiveLine("A") & ":" & GetActiveLine("N")).Interior.ColorIndex = 8
  End If
  
  AutoFormatLines GetActiveLine("E"), False, False, False, 8, xlRight
  AutoFormatLines GetActiveLine("F"), False, False, False, 8, xlRight
  AutoFormatLines GetActiveLine("G"), False, False, False, 8, xlRight
  AutoFormatLines GetActiveLine("H"), False, False, False, 8, xlRight
      
  AutoFormatLines GetActiveLine("J"), False, False, False, 8, xlRight
  AutoFormatLines GetActiveLine("K"), False, False, False, 8, xlRight
  AutoFormatLines GetActiveLine("L"), False, False, False, 8, xlRight
  AutoFormatLines GetActiveLine("M"), False, False, False, 8, xlRight
  AutoFormatLines GetActiveLine("N"), False, False, False, 8, xlRight
  
  Range(GetActiveLine("E") & ":" & GetActiveLine("N")).NumberFormat = "#,##0.00"

End Sub


Private Function FindString(strSearchString As String) As Long

  Dim tmpLine       As Long
  Dim IsFoundString As Boolean
  
  FindString = 1
  tmpLine = 13
  IsFoundString = False
    
  Do
    If Range("A" & CStr(tmpLine)).Value = strSearchString Then
      IsFoundString = True
      FindString = tmpLine
    End If
    
    tmpLine = tmpLine + 1
  Loop Until IsFoundString Or tmpLine > ActiveLine + 1

End Function



' InQuest injected base64 decoded content
' :t^~

INQUEST-PP=macro
