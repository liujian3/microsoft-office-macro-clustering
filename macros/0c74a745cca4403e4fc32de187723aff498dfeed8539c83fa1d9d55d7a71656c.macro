Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Makro"


'
' Am 01.08.1994 erstellt von E. Meyer
'
'Errechnen eines Winkels aus seinem Involut-Wert
'
Public Function RINV(Y As Double)
Attribute RINV.VB_Description = "Errechnen eines Winkels (DG) aus seinem Involutwert"
Attribute RINV.VB_ProcData.VB_Invoke_Func = " \n14"
Pi = Atn(1) * 4
v1 = Pi / 2
If Y - Pi > 0 Then GoTo zeile2
v1 = Sqr(Sqr(Y))
zeile2:
v2 = -1 / (v1 + Y) + v1 + 1 / Tan(v1)
v3 = Abs(v1 - v2)
If (v3 - 0.000001) < 0 Then GoTo zeile3
v1 = v2
GoTo zeile2
zeile3:
RINV = v2 * 180 / Pi
End Function

'Involut-Wert eines Winkels
'
Public Function INV(Y As Double)
Attribute INV.VB_Description = "Involutwert eines Winkels "
Attribute INV.VB_ProcData.VB_Invoke_Func = " \n14"
Pi = Atn(1) * 4
INV = Tan(Y * Pi / 180) - Y * Pi / 180
End Function

'Niemann - Zahnformfaktor
'
Public Function NZFF(m, A, Chr, HKW, RHOA, XM, Q, M2, A6 As Double)
Attribute NZFF.VB_ProcData.VB_Invoke_Func = " \n14"
Pi = Atn(1) * 4
ABO = A * Pi / 180
P9 = m * Pi / 4 - HKW * Tan(ABO) - (1 - Sin(ABO)) * RHOA / Cos(ABO)
P5 = (Pi / 2 - P9 / m) * 2 / Chr - Pi / 3
P6 = (RHOA + XM - HKW) / m
P7 = 0.7
zeile1:
P8 = 2 * P6 / Chr * Tan(P7) - P5
O = Int(((P8 - P7) * 10 ^ 5) + 0.5)
If O = 0 Then GoTo zeile2
P7 = P8
GoTo zeile1
zeile2:
Q1 = RHOA + 2 * P6 ^ 2 * m / Cos(P8) / (Chr * Cos(P8) ^ 2 - 2 * P6)
P7 = (Pi / 2 + 2 * XM * Tan(ABO) / m) / Chr + Tan(ABO) - ABO - Tan(Q) + Q
P3 = Q - P7
ZW1 = Sin(Pi / 3 - P8)
ZW2 = P6 / Cos(P8) - RHOA / m
Q2 = (Chr * ZW1 + Sqr(3) * ZW2) * m
Q8 = (Chr * Cos(ABO) / Cos(P3) - Chr * Cos(Pi / 3 - P8) - P6 / Cos(P8) + RHOA / m) * m / 2
P4 = Sqr((6 * Q8 / Q2 - Tan(P3)) ^ 2 + 6.25)
NZFF = Cos(P3) * M2 / Cos(A6 * Pi / 180) / Q2 * P4
End Function

'Aufteilung der Profilverschiebung nach spezifischem Gleiten
Public Function X1SPGL(zri, zra, mn, ms, xmges, eges, c, db1, db2 As Double)
Attribute X1SPGL.VB_ProcData.VB_Invoke_Func = " \n14"
zeile0:
xm1 = xmges / 2
zeile01:
xm1 = xm1 + r
dk1 = ms * zri + 2 * (mn + xm1 - c)
xm2 = xmges - xm1
dk2 = ms * zra + 2 * (mn + xm2 - c)
c1 = Sqr(dk1 ^ 2 - db1 ^ 2) / 2
g2 = eges - c1
c2 = Sqr(dk2 ^ 2 - db2 ^ 2) / 2
g1 = eges - c2
g3 = (c1 * zra - g2 * zri) / c1 / zra
g4 = (c2 * zri - g1 * zra) / c2 / zri
g = g4 - g3
absg = Abs(g)
'absgg = GZ(absg * 10 ^ 4) / 10 ^ 4
'Wenn absgg = 0 Dann GeheZu zeile3
If absg < 0.0001 Then GoTo zeile3
If r8 = 1 Then GoTo zeile1
r = Abs(g) / g
r8 = Abs(r)
zeile1:
If g * r < 0 Then GoTo zeile2
GoTo zeile01
zeile2:
xm1 = xm1 - r
r = r / 10
GoTo zeile01
zeile3:
X1SPGL = xm1
End Function


' Hilfsfaktor theta zur Berechnung des Formfaktors (DIN3990 Methode B)
Public Function Xtheta(Gx, znx, Hx As Double)
Attribute Xtheta.VB_ProcData.VB_Invoke_Func = " \n14"
Pi = Atn(1) * 4
theta = Pi / 6
GoTo zeile0
zeile1:
If xxx > theta Then theta = theta + dx / 2
If xxx < theta Then theta = theta - dx / 2
zeile0:
xxx = 2 * Gx / znx * Tan(theta) - Hx
dx = xxx - theta
If Abs(dx) > 0.0001 Then GoTo zeile1
Xtheta = theta
End Function


'   Trigonometrische Funktionen mit Grad-Werten (dezimal)
'
Public Function RAD(Value As Double)
Attribute RAD.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsMissing(Value) Then
        RAD = 0
    Else
        RAD = Value * Atn(1) * 4 / 180
    End If
'
End Function
'
Public Function COT(Value As Double)
Attribute COT.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsMissing(Value) Then
        COT = 0
    Else
        COT = 1 / Tan(Value)
    End If
End Function
'
Public Function SING(dezGrad As Double)
Attribute SING.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsMissing(dezGrad) Then
        SING = 0
    Else
        SING = Sin(dezGrad * Atn(1) * 4 / 180)
    End If
End Function
'
Public Function COSG(dezGrad As Double)
Attribute COSG.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsMissing(dezGrad) Then
        COSG = 0
    Else
        COSG = Cos(dezGrad * Atn(1) * 4 / 180)
    End If
End Function
'
Public Function TANG(dezGrad As Double)
Attribute TANG.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsMissing(dezGrad) Then
        TANG = 0
    Else
        TANG = Tan(dezGrad * Atn(1) * 4 / 180)
    End If
End Function
'
Public Function COTG(dezGrad As Double)
Attribute COTG.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsMissing(dezGrad) Then
        COTG = 0
    Else
        COTG = 1 / (Tan(dezGrad * Atn(1) * 4 / 180))
    End If
End Function
'
Public Function ARCSING(Value As Double)
Attribute ARCSING.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsMissing(Value) Then
        ARCSING = 0
    Else
        ARCSING = Atn(Value / Sqr(1 - Value ^ 2)) * 180 / (Atn(1) * 4)
    End If
End Function
'
Public Function ARCCOSG(Value As Double)
Attribute ARCCOSG.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsMissing(Value) Then
        ARCCOSG = 0
    Else
        ARCCOSG = Atn(Sqr(1 - Value ^ 2) / Value) * 180 / (Atn(1) * 4)
    End If
End Function
'
Public Function ARCTANG(Value As Double)
Attribute ARCTANG.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsMissing(Value) Then
        ARCTANG = 0
    Else
        ARCTANG = Atn(Value) * 180 / (Atn(1) * 4)
    End If
End Function
'
Public Function ARCCOTG(Value As Double)
Attribute ARCCOTG.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsMissing(Value) Then
        ARCCOTG = 0
    Else
        ARCCOTG = Atn(1 / Value) * 180 / (Atn(1) * 4)
        
    End If
End Function
'
Public Function GMS(dezGrad As Double)
Attribute GMS.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim g
    Dim m
    Dim s
    If IsMissing(dezGrad) Then
        GMS = 0
    Else
        g = Fix(dezGrad + 0.000001)
        m = Fix((dezGrad - Fix(dezGrad + 0.000001)) * 60 + 0.000001)
        s = (dezGrad - g - m / 60) * 3600
        While s >= 60
            s = s - 60
            m = m + 1
        Wend
        While m >= 60
            m = m - 60
            g = g + 1
        Wend
        GMS = g + m / 100 + s / 10000
    End If
End Function
'
Public Function DEG(gmsGrad As Double)
Attribute DEG.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsMissing(gmsGrad) Then
        DEG = 0
    Else
        DEG = Fix(gmsGrad + 0.000001) + Fix((gmsGrad - Fix(gmsGrad + 0.000001)) * 100 + 0.000001) / 60 + (gmsGrad * 100 - Fix(gmsGrad * 100 + 0.000001)) / 36
    End If
End Function


'Rundungsfunktion
'
Public Function GZ(Y As Double)
Attribute GZ.VB_ProcData.VB_Invoke_Func = " \n14"
GZ = Int(Y + 0.5)
End Function
'
Public Function GZS(Value As Double)
Attribute GZS.VB_ProcData.VB_Invoke_Func = " \n14"
        GZS = Fix(Value + 0.000001)
End Function







Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
