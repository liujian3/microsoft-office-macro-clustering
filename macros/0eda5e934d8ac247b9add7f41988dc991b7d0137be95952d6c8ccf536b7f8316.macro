Attribute VB_Name = "BrowseFolder"
' BrowseFolder
' This contains the BrowseFolder function, which displays the standard Windows Browse For Folder
' dialog. It return the complete path of the selected folder or vbNullString if the user cancelled.
' It also contains the function BrowseFolderExplorer which presents the user with a Windows
' Explorer-like interface to pick the folder.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

#If Mac Then

    Function BrowseFolder(Optional ByVal DialogTitle As String) As String
        BrowseFolder = InputBox("Please enter the full path of directory you wish to use for this file", "Select Folder")
    End Function

#Else

    Function BrowseFolder(Optional ByVal DialogTitle As String) As String
        Dim xFileSystemObject As Object
        Dim xFolder As Object
        Dim xSubFolder As Object
        Dim xFile As Object
        
        Dim xFolderName As String
        
        Set xFileSystemObject = CreateObject("Scripting.FileSystemObject")
        
        If DialogTitle = vbNullString Then
            DialogTitle = "Select A Folder"
        End If

        'Select Folder for contracts
        Dim fd As Office.FileDialog
        
        Set fd = Application.FileDialog(msoFileDialogFolderPicker)
        With fd
            .Title = DialogTitle
            .AllowMultiSelect = False
            .InitialFileName = Application.DefaultFilePath
            If .Show = -1 Then
                xFolderName = .SelectedItems(1)
            End If
        End With
        
        BrowseFolder = xFolderName
        'Set xFolder = xFileSystemObject.GetFolder(xFolderName)
    
    End Function
    
#End If


Sub GetFolder()
    Client.TBDirectory = BrowseFolder("Select a folder")
End Sub




Attribute VB_Name = "Client"
Attribute VB_Base = "0{1C459ACA-DA56-4F80-A1C0-E1C624BE4DAA}{082AD9C5-9B88-40D7-BA65-715B679CE67D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CBCancel_Click()
    Sheets("IRQ").Visible = False
    Unload Client
End Sub

Sub checkMe()

    If Sheets("IRQ").Range("ConfigComplete").Value = 0 Then
        CBOK.Enabled = True
    Else
        CBOK.Enabled = False
    End If

End Sub

Private Sub CBClearAll_Click()
    TBClientContact.Value = ""
    TBClientEmail.Value = ""
    TBClientTel.Value = ""
    TBRefNo = ""
    TBDirectory.Value = ""
    TBCreated = ""
    Sheets("Front Page").Range("RRQSent").Value = ""
    Sheets("Front Page").Range("RRQComplete").Value = ""
    Sheets("Front Page").Range("RRQQA").Value = ""
    Sheets("Front Page").Range("ExportedArcher").Value = ""
    checkMe
End Sub

Private Sub CBClearEngage_Click()
    TBRefNo = ""
    TBCreated = ""
    Sheets("Front Page").Range("RRQSent").Value = ""
    Sheets("Front Page").Range("RRQComplete").Value = ""
    Sheets("Front Page").Range("RRQQA").Value = ""
    Sheets("Front Page").Range("ExportedArcher").Value = ""
    checkMe
End Sub

Private Sub CBDir_Click()
    GetFolder
    Sheets("IRQ").Range("DefaultDirectory").Value = TBDirectory.Value
End Sub

Private Sub CBImportIRQ_Click()
    ImportIRQ
End Sub

Private Sub CBOK_Click()
    Unload Client
    SendtoTP
End Sub

Private Sub TB3PContact_Change()
    Sheets("IRQ").Range("TPContact").Value = TB3PContact.Value
    checkMe
End Sub

Private Sub TB3PEmail_Change()
    Sheets("IRQ").Range("TPEmail").Value = TB3PEmail.Value
    checkMe
End Sub

Private Sub TB3PName_Change()
    Sheets("IRQ").Range("TPName").Value = TB3PName.Value
    checkMe
End Sub

Private Sub TB3PTel_Change()
    Sheets("IRQ").Range("TPTel").Value = TB3PTel.Value
    checkMe
End Sub

Private Sub TBClientContact_Change()
    Sheets("IRQ").Range("ClientContact").Value = TBClientContact.Value
    checkMe
End Sub

Private Sub TBClientEmail_Change()
    Sheets("IRQ").Range("ClientEmail").Value = TBClientEmail.Value
    checkMe
End Sub

Private Sub TBClientTel_Change()
    Sheets("IRQ").Range("ClientTel").Value = TBClientTel.Value
    checkMe
End Sub

Private Sub TBCreated_Change()
    Sheets("IRQ").Range("Created").Value = TBCreated.Value
End Sub

Private Sub TBRefNo_Change()
    Sheets("IRQ").Range("RefNo").Value = TBRefNo.Value
    checkMe
End Sub
Attribute VB_Name = "CommonLibrary"
Option Explicit

Sub UnprotectBook()

'UnprotectBook01
'Unprotect each sheet in the workbook and unprotect workbook

    Dim Startsheet As String
    Dim sht As Worksheet
    
    Startsheet = ActiveSheet.Name
    
    Application.ScreenUpdating = False

    For Each sht In Application.Worksheets
        sht.Unprotect Password:=Sheets("User Config").Range("Password").Value
    Next

    ActiveWorkbook.Unprotect Password:="b12142002"
    
    Sheets(Startsheet).Select
    
End Sub



Sub ProtectBook()
    
    Dim Startsheet As String
    Dim sht As Worksheet
    
'ProtectBook01
'Protect each sheet in the workbook and protect workbook

    Startsheet = ActiveSheet.Name

    For Each sht In Application.Worksheets
        If sht.Name = "Attachments" Then
            sht.Protect DrawingObjects:=True, Contents:=False, Scenarios:=True, Password:="b12142002", AllowFiltering:=True
        Else
            sht.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, Password:="b12142002", AllowFiltering:=True
        End If
    Next
    
    ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:="b12142002"
    
    Application.EnableEvents = True
    
    Sheets(Startsheet).Select
    
End Sub



Sub UnProtectSheet()
    
    Dim PasswordSheet As String
    
    PasswordSheet = Range("Password").Value
    ActiveSheet.Unprotect Password:=PasswordSheet

End Sub




Sub ProtectSheet()
    
    Dim PasswordSheet As String
    
    PasswordSheet = Range("Password").Value
    
        If ActiveSheet.Name = "Attachments" Then
            ActiveSheet.Protect Password:=PasswordSheet, DrawingObjects:=False, Contents:=True, Scenarios:= _
            False, AllowFiltering:=True
        Else
            ActiveSheet.Protect Password:=PasswordSheet, DrawingObjects:=True, Contents:=True, Scenarios:= _
            False, AllowFiltering:=True
        End If

End Sub


Function SheetProtected(TargetSheet As Worksheet) As Boolean
     'Function purpose:  To evaluate if a worksheet is protected
     
    If TargetSheet.ProtectContents = True Then
        SheetProtected = True
    Else
        SheetProtected = False
    End If
     
End Function


Attribute VB_Name = "InsertAttachment"
Attribute VB_Base = "0{AEB36FED-6084-4A90-933F-EB1C9573F620}{7A293B61-4D74-4935-8F19-5C5BBA928224}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CBCancel_Click()
    Unload InsertAttachment
End Sub

Private Sub CBOK_Click()
    InsertAttach
End Sub

Private Sub TBDescription_Change()
    checkMe
End Sub

Private Sub TBEvidence_Change()
    checkMe
End Sub

Private Sub TBQuNo_Change()
    checkMe
End Sub

Sub checkMe()
    
    Dim CheckedFlag As Boolean
    
    CheckedFlag = True
    If TBDescription.Value = "" Then CheckedFlag = False
    If TBEvidence.Value = "" Then CheckedFlag = False
    If TBQuNo.Value = "" Then CheckedFlag = False
    
    If CheckedFlag = True Then
        CBOK.Enabled = True
    Else
        CBOK.Enabled = False
    End If
    
End Sub

Attribute VB_Name = "LocalLibrary"
Option Explicit

Sub GoHome()
    Sheets("Front Page").Select
End Sub

Sub GoRRQ()
    Sheets("RRQ").Select
End Sub

Sub GoAttach()
    Sheets("Attachments").Select
End Sub

Sub GoExit()
    ThisWorkbook.Saved = True
    Application.Quit
End Sub
Attribute VB_Name = "M001"
Option Explicit

'*********************************************************************
'           Third party routines
'*********************************************************************


Sub LoadThirdParty()

    UnprotectBook

    Application.ScreenUpdating = True

    'Load form
    Load ThirdParty

    With ThirdParty
        
        'Load data
        .TBClientContact.Value = Sheets("IRQ").Range("ClientContact").Value
        .TBClientEmail.Value = Sheets("IRQ").Range("ClientEmail").Value
        .TBClientTel.Value = Sheets("IRQ").Range("ClientTel").Value
        .TBRefNo = Sheets("IRQ").Range("RefNo").Value
        .TBCreated = Sheets("IRQ").Range("Created").Value
        .TB3PName.Value = Sheets("IRQ").Range("TPName").Value
        .TB3PContact.Value = Sheets("IRQ").Range("TPContact").Value
        .TB3PEmail.Value = Sheets("IRQ").Range("TPEmail").Value
        .TB3PTel.Value = Sheets("IRQ").Range("TPTel").Value
        .LCopyright.Caption = CopyRightBanner
        
    End With
    
    ThirdParty.Show
    
    ProtectBook

End Sub


Sub SendtoClient()
    
    'Check for completion of responses
    If Worksheets("RRQ").Cells(2, 22).Value <> 0 Then
        MsgBox Worksheets("RRQ").Cells(2, 15).Value
        Worksheets("RRQ").Activate
        GoTo Exitsub
    End If
    
    Dim result As Integer
    Dim MailMessage As String
    
    'Check operating system
    If Left(Application.OperatingSystem, 3) = "Mac" Then
        result = MsgBox("It has been detected that you are using an Apple Mac computer - this functionality does not work.  MANUAL WORKAROUND: Save this file locally to your machine. Attach any supporting documentation that is not a word file to the email. Send the mail to the following email address " & Sheets("IRQ").Range("ClientEmail").Value, vbInformation, "Mac Operating System Detected")
        Exit Sub
    End If

    'Save status information
    UnProtectSheet
    Sheets("Front Page").Range("RRQComplete").Value = "y"
    Sheets("Front Page").Range("LastcompletedbyTP").Value = Now()
    ProtectSheet
    
    ThisWorkbook.Save
    
    'Create Mail
    Dim OlApp As Object
    Dim NewMail As Object
    
    'Create mail message
    MailMessage = "IRQ Ref No: " & Sheets("IRQ").Range("RefNo").Value
    MailMessage = MailMessage & Chr(13)
    MailMessage = MailMessage & Chr(13)
    MailMessage = MailMessage & "Please find attached the completed Risk Questionaire: COMPLETED: " & Now()
  
    'OnError
    On Error GoTo HandleMe
    
    Set OlApp = CreateObject("Outlook.Application")
    Set NewMail = OlApp.CreateItem(0)
    
    With NewMail
        .To = Sheets("IRQ").Range("ClientEmail").Value
        .CC = Sheets("IRQ").Range("TPEmail").Value
        .Subject = Sheets("IRQ").Range("EmailTitleReturn").Value
        .Body = MailMessage
        .Attachments.Add ActiveWorkbook.FullName
        .Display   'or use .Display to show you the email before sending it.
    End With
    On Error GoTo 0
  
    Set NewMail = Nothing
    Set OlApp = Nothing

Exitsub:
    Application.EnableEvents = True
    Exit Sub
    
HandleMe:
    Set NewMail = Nothing
    Set OlApp = Nothing
    Application.EnableEvents = True
    Dim strErrMsg As String
    strErrMsg = vbCrLf & vbCrLf & "It is advised to save and re-open the file before proceeding."
    MsgBox Err.Description & strErrMsg, , "Error Creating Mail", Err.HelpFile, Err.HelpContext
    
    
End Sub
Attribute VB_Name = "M002"
Option Explicit

'*********************************************************************
'           Up versioning module for workbook
'*********************************************************************

Sub OwnerCopy()
    Dim CurrentDirectory As String
    Dim Version, ReleaseNotes, Owner, Description, PasswordSheet, PasswordWB, PasswordRO As String
    Dim sht As Worksheet
    Dim objdo As Object
    Dim Backgroundcolour As Long
    Dim BottomBorderColour As Long
    Dim BottomBorderWeight As Long
    Dim BottomBorderStyle As Long
    Dim FontColour As Long
    Dim LogoHeight As Integer
    Dim LogoWidth As Integer
    Dim HeaderHeight As Integer
    Dim HeaderWidth As Integer
    Dim LeftPosition As Integer
    Dim TopPosition As Integer
    Dim Action As String
    Dim Sheetname As String
    Dim HeadersShow As Boolean
    Dim GridlinesShow As Boolean
    Dim FormulabarShow As Boolean
    Dim VProtectSheet As Boolean
    
'Unprotect Workbook
    UnprotectBook

'Get Attributes
    
    CurrentDirectory = ThisWorkbook.Path & "\"
    
    Version = Range("Version").Value
    ReleaseNotes = Range("ReleaseNotes").Value
    Owner = Range("Owner").Value
    Description = Range("Description").Value
    PasswordSheet = Range("Password").Value
    PasswordWB = Range("PasswordWB").Value
    PasswordRO = Range("PasswordRO").Value

'Save Workbook
    ActiveWorkbook.SaveAs Filename:= _
        CurrentDirectory & Description & " - " & Owner & " - V" & Version & ".xlsm" _
        , FileFormat:=xlOpenXMLWorkbookMacroEnabled, CreateBackup:=False, Password:=PasswordWB, WriteResPassword:=PasswordRO

'Create brand

    'Paste Logo
    
    'Delete shapes from existing header
    For Each sht In Application.Worksheets
        sht.Select
        
        'OnError
        On Error GoTo HandleMe1
        
        For Each objdo In ActiveSheet.Shapes
            If Not Intersect(objdo.TopLeftCell, Range("Header")) Is Nothing Then
                objdo.Delete
            End If

        Next
HandleMe1:
        Application.EnableEvents = True

        
    Next
    
    On Error GoTo 0
    
    'Add logo and colour header
    'Get Logo
    Sheets("User Config").Select
    
    'Get header properties
    Backgroundcolour = Range("OwnerBrandColour").Interior.Color
    
    BottomBorderColour = Range("OwnerBrandColour").Borders(xlEdgeBottom).Color
    BottomBorderWeight = Range("OwnerBrandColour").Borders(xlEdgeBottom).Weight
    BottomBorderStyle = Range("OwnerBrandColour").Borders(xlEdgeBottom).LineStyle
    
    FontColour = Range("OwnerBrandColour").Font.Color


    For Each objdo In ActiveSheet.Shapes
        If Not Intersect(objdo.TopLeftCell, Range("OwnerLogoContainer")) Is Nothing Then
            ActiveSheet.Shapes.Range(Array(objdo.Name)).Select
            LogoHeight = objdo.Height
            LogoWidth = objdo.Width
            Selection.Copy
        End If
    Next


    'Go through sheets and apply attributes
    'OnError
    On Error GoTo HandleMe2
    
    For Each sht In Application.Worksheets
    
        sht.Select
        'UT_Edit Added Space between UserConfig
        If ActiveSheet.Name <> "User Config" And ActiveSheet.Name <> "ArcherExport" Then
        
            ActiveSheet.Paste
        
            HeaderHeight = Range("Header").Height
            HeaderWidth = Range("Header").Width
        
            LeftPosition = HeaderWidth - LogoWidth - 15
            TopPosition = (HeaderHeight - LogoHeight) / 2
        
            With ActiveSheet.Shapes("Logo")
                .Left = LeftPosition
                .Top = TopPosition
            End With
        
        End If
        
        If ActiveSheet.Name <> "ArcherExport" Then
            Range("Header").Interior.Color = Backgroundcolour
        
            Range("Header").Borders(xlEdgeBottom).Color = BottomBorderColour
            Range("Header").Borders(xlEdgeBottom).Weight = BottomBorderWeight
            Range("Header").Borders(xlEdgeBottom).LineStyle = BottomBorderStyle
        
            Range("Header").Font.Color = FontColour
    
            Range("A1").Select
        End If
    Next
    
    GoTo UpdateVersion
HandleMe2:
    Application.EnableEvents = True
    Dim strErrMsg As String
    strErrMsg = vbCrLf & vbCrLf & "It is advised to save and re-open the file before proceeding."
    MsgBox Err.Description & strErrMsg, , "Error Creating Owner File", Err.HelpFile, Err.HelpContext
        
UpdateVersion:
    On Error GoTo 0
    
    'Record Version Number and Relase Notes
    Sheets("Release Notes").Select
    
    Range("A3").Select
    
    While ActiveCell <> ""
    
        ActiveCell.Offset(1, 0).Select
    
    Wend
    
    ActiveCell.Value = "V" & Version
    ActiveCell.Offset(0, 1).Value = ReleaseNotes
    
    'Apply Sheets Attributes
    Sheets("User Config").Activate
    Range("OwnerSheetsStart").Select
    
    While ActiveCell.Value <> ""
    
        Action = ActiveCell.Value
        Sheetname = ActiveCell.Offset(0, -1).Value
        HeadersShow = ActiveCell.Offset(0, 1)
        GridlinesShow = ActiveCell.Offset(0, 2)
        FormulabarShow = ActiveCell.Offset(0, 3)
        VProtectSheet = ActiveCell.Offset(0, 4)

        'Exit if USer Config Sheet
        If Sheetname = "User Config" Then GoTo JumpOut

        'Select Sheet and apply attributes
        Sheets(Sheetname).Select

        'Headings Show
        If HeadersShow = False Then
            ActiveWindow.DisplayHeadings = HeadersShow
        Else
            ActiveWindow.DisplayHeadings = HeadersShow
        End If

        'Gridlines Show
        If GridlinesShow = False Then
            ActiveWindow.DisplayGridlines = GridlinesShow
        Else
            ActiveWindow.DisplayGridlines = GridlinesShow
        End If
        
        'Formulabar Show
        If FormulabarShow = False Then
            Application.DisplayFormulaBar = FormulabarShow
        Else
            Application.DisplayFormulaBar = FormulabarShow
        End If
        
        'Protect Sheet
        If VProtectSheet = True Then Sheets(Sheetname).Protect Password:=PasswordSheet, DrawingObjects:=False, Contents:=True, Scenarios:= _
        False, AllowFiltering:=True
        
        Sheets("User config").Select
         
        If Action = "Hidden" Then
            Sheets(Sheetname).Visible = xlHidden
        ElseIf Action = "Very Hidden" Then
            Sheets(Sheetname).Visible = xlVeryHidden
        ElseIf Action = "Delete" Then
            Application.DisplayAlerts = False
            Worksheets(Sheetname).Delete
            Application.DisplayAlerts = True
        End If

JumpOut:
        ActiveCell.Offset(1, 0).Select
        
    Wend
    
    'Final Tidy up and save
   
   'Protectbook
    If Range("OwnerProtection").Value = True Then
        ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:=PasswordSheet
    End If

    Sheets("Release Notes").Activate

    ThisWorkbook.Save
    
    'Auto Create Client Copy
    If Sheets("User Config").Range("AutoCreate").Value = True Then ClientCopy

End Sub


Sub ClientCopy()


    Dim CurrentDirectory As String
    Dim Version, ReleaseNotes, ClientName, Description, PasswordSheet, PasswordWB, PasswordRO As String
    Dim sht As Worksheet
    Dim objdo As Object
    Dim Backgroundcolour As Long
    Dim BottomBorderColour As Long
    Dim BottomBorderWeight As Long
    Dim BottomBorderStyle As Long
    Dim FontColour As Long
    Dim LogoHeight As Integer
    Dim LogoWidth As Integer
    Dim HeaderHeight As Integer
    Dim HeaderWidth As Integer
    Dim LeftPosition As Integer
    Dim TopPosition As Integer
    Dim Action As String
    Dim Sheetname As String
    Dim HeadersShow As Boolean
    Dim GridlinesShow As Boolean
    Dim FormulabarShow As Boolean
    Dim VProtectSheet As Boolean




'Unprotect Workbook
    UnprotectBook

'Get Attributes
    
    Sheets("User Config").Select
    
    CurrentDirectory = ThisWorkbook.Path & "\"
    Version = Range("Version").Value
    ReleaseNotes = Range("ReleaseNotes").Value
    ClientName = Range("Client").Value
    Description = Range("Description").Value
    PasswordSheet = Range("Password").Value
    PasswordWB = Range("PasswordWB").Value
    PasswordRO = Range("PasswordRO").Value

'Save Workbook
    ActiveWorkbook.SaveAs Filename:= _
        CurrentDirectory & Description & " - " & ClientName & " - V" & Version & ".xlsm" _
        , FileFormat:=xlOpenXMLWorkbookMacroEnabled, CreateBackup:=False, Password:=PasswordWB, WriteResPassword:=PasswordRO

'Create brand

    'Paste Logo
    
    'Delete shapes from existing header
    For Each sht In Application.Worksheets
        sht.Select
        'OnError
    
        On Error GoTo HandleMe1
        
        For Each objdo In ActiveSheet.Shapes
            If Not Intersect(objdo.TopLeftCell, Range("Header")) Is Nothing Then
                objdo.Delete
            End If
HandleMe1:
        Next
        
        Application.EnableEvents = True
        On Error GoTo 0
        
    Next
    
    'Add logo and colour header
    'Get Logo
    Sheets("User Config").Select
    
    'Get header properties
    Backgroundcolour = Range("BrandColour").Interior.Color
    
    BottomBorderColour = Range("BrandColour").Borders(xlEdgeBottom).Color
    BottomBorderWeight = Range("BrandColour").Borders(xlEdgeBottom).Weight
    BottomBorderStyle = Range("BrandColour").Borders(xlEdgeBottom).LineStyle
    
    FontColour = Range("BrandColour").Font.Color


    For Each objdo In ActiveSheet.Shapes
        If Not Intersect(objdo.TopLeftCell, Range("LogoContainer")) Is Nothing Then
            ActiveSheet.Shapes.Range(Array(objdo.Name)).Select
            LogoHeight = objdo.Height
            LogoWidth = objdo.Width
            Selection.Copy
        End If
    Next


    'Go through sheets and apply attributes
    
    'OnError
    On Error GoTo HandleMe2
    
    For Each sht In Application.Worksheets
    
        sht.Select
        If ActiveSheet.Name <> "User Config" And ActiveSheet.Name <> "ArcherExport" Then
        
            ActiveSheet.Paste
        
            HeaderHeight = Range("Header").Height
            HeaderWidth = Range("Header").Width
        
            LeftPosition = HeaderWidth - LogoWidth - 15
            TopPosition = (HeaderHeight - LogoHeight) / 2
        
            With ActiveSheet.Shapes("ClientLogo")
                .Left = LeftPosition
                .Top = TopPosition
            End With
        
        End If
        

        If ActiveSheet.Name <> "ArcherExport" Then
            Range("Header").Interior.Color = Backgroundcolour
        
            Range("Header").Borders(xlEdgeBottom).Color = BottomBorderColour
            Range("Header").Borders(xlEdgeBottom).Weight = BottomBorderWeight
            Range("Header").Borders(xlEdgeBottom).LineStyle = BottomBorderStyle
        
            Range("Header").Font.Color = FontColour
    
            Range("A1").Select
        End If
    Next

        GoTo ProceedNormal

HandleMe2:
        Application.EnableEvents = True
        Dim strErrMsg As String
        strErrMsg = vbCrLf & vbCrLf & "It is advised to save and re-open the file before proceeding."
        MsgBox Err.Description & strErrMsg, , "Error Creating Client File", Err.HelpFile, Err.HelpContext
        
ProceedNormal:
        On Error GoTo 0
    
    'Replace ENTITY with Client Name
GoTo skipme
    Sheets("User Config").Activate
    ClientName = Range("Client")
    
    For Each sht In ActiveWorkbook.Worksheets
        sht.Cells.Replace What:="ENTITY", Replacement:=ClientName, LookAt:= _
        xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False
    Next sht
    
skipme:
    

    'Apply Sheets Attributes
    Sheets("User Config").Select
    Range("ClientSheetStart").Select
    
    While ActiveCell.Value <> ""
    
        Action = ActiveCell.Value
        Sheetname = ActiveCell.Offset(0, -1).Value
        HeadersShow = ActiveCell.Offset(0, 1)
        GridlinesShow = ActiveCell.Offset(0, 2)
        FormulabarShow = ActiveCell.Offset(0, 3)
        VProtectSheet = ActiveCell.Offset(0, 4)

        'Exit if USer Config Sheet
        If Sheetname = "User Config" Then GoTo JumpOut

        'Select Sheet and apply attributes
        Sheets(Sheetname).Select

        'Headings Show
        If HeadersShow = False Then
            ActiveWindow.DisplayHeadings = HeadersShow
        Else
            ActiveWindow.DisplayHeadings = HeadersShow
        End If

        'Gridlines Show
        If GridlinesShow = False Then
            ActiveWindow.DisplayGridlines = GridlinesShow
        Else
            ActiveWindow.DisplayGridlines = GridlinesShow
        End If
        
        'Formulabar Show
        If FormulabarShow = False Then
            Application.DisplayFormulaBar = FormulabarShow
        Else
            Application.DisplayFormulaBar = FormulabarShow
        End If
        
        'Protect Sheet
        If VProtectSheet = True Then Sheets(Sheetname).Protect Password:=PasswordSheet, DrawingObjects:=False, Contents:=True, Scenarios:= _
        False, AllowFiltering:=True
        
        Sheets("User config").Select
        
        If Action = "Hidden" Then
            Sheets(Sheetname).Visible = xlHidden
        ElseIf Action = "Very Hidden" Then
            Sheets(Sheetname).Visible = xlVeryHidden
        ElseIf Action = "Delete" Then
            Application.DisplayAlerts = False
            Worksheets(Sheetname).Delete
            Application.DisplayAlerts = True
        End If
        
JumpOut:
        ActiveCell.Offset(1, 0).Select
        
    Wend
    
    'Final Tidy up and save
   
   'Hide User Config
   Sheets("User Config").Visible = xlVeryHidden
   
   'Protectbook
    If Range("ClientProtection").Value = True Then
        ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:=PasswordSheet
    End If

    Sheets("Release Notes").Activate
    
    ThisWorkbook.Save


End Sub







Attribute VB_Name = "M003"
Option Explicit

'*********************************************************************
'           Client routines
'*********************************************************************

'Module:        M003
'Function:      Load client initation form
'Author:        Nick Portmann
'Date:          29/08/17

'Routine:       FormRouting
'Description:   Load Initiate Form
'Author:        Nick Portmann
'Date:          29/08/17

Sub FormRouting()
    
    'Detrmines if HSBC or Third Party
    If FindCompany() = True Then
        LoadClient
    Else
        LoadThirdParty
    End If

End Sub

'Routine:       LoadClient
'Description:   Load Initiate Form
'Author:        Nick Portmann
'Date:          29/08/17

Sub LoadClient()

    UnprotectBook

    Load Client

    With Client
    
        .TBClientContact.Value = Sheets("IRQ").Range("ClientContact").Value
        .TBClientEmail.Value = Sheets("IRQ").Range("ClientEmail").Value
        .TBClientTel.Value = Sheets("IRQ").Range("ClientTel").Value
        .TBRefNo = Sheets("IRQ").Range("RefNo").Value
        .TBDirectory.Value = Sheets("IRQ").Range("DefaultDirectory").Value
        .TBCreated = Sheets("IRQ").Range("Created").Value
        .LCopyright.Caption = CopyRightBanner
    
        .Show

    End With

    ProtectBook
    
End Sub

'Routine:       Import IRQ
'Description:   ImportIRQ
'Author:        Nick Portmann
'Date:          19/09/17

Sub ImportIRQ()

    Dim strFileToOpen
    
    'UT_Edit
    Dim WorkbookName As String
    Dim ctl As Control
    Dim NameRange As String
    Dim RiskRating As String
    
    'Select import to open
    strFileToOpen = Application.GetOpenFilename(Title:="Please choose a file to open", FileFilter:="Excel Files *.xls* (*.xls*),")
    
    UnprotectBook
    Sheets("IRQ").Visible = True
    
    If strFileToOpen = False Then
        MsgBox "No file selected.", vbExclamation, "Sorry!"
    Exit Sub
    
    Else
    
        Workbooks.Open Filename:=strFileToOpen
        WorkbookName = ActiveWorkbook.Name
        
        
        'Import IRQ Workbook
        Range("A2:D80").Select
        Selection.Copy
        ThisWorkbook.Activate
        
        
        Sheets("IRQ").Select
        Range("PasteIRQArcher").Select
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
        
        Application.CutCopyMode = False
        
        Workbooks(WorkbookName).Close (False)
        
        'Import results onto form
        With Client
        For Each ctl In .F2.Controls
        
        'Conditional colouring based on IRQ
        If Left(ctl.Name, 2) = "TB" And ctl.Visible = True Then
            NameRange = Right(ctl.Name, Len(ctl.Name) - 2)
            RiskRating = Range(NameRange).Value
            
#If 0 Then
            If RiskRating = "Very High" Then
                ctl.Value = "VH"
                ctl.BackColor = 13395456
            ElseIf RiskRating = "High" Then
                ctl.Value = "H"
                ctl.BackColor = 16737792
            ElseIf RiskRating = "Medium" Then
                ctl.Value = "M"
                ctl.BackColor = 16750899
            ElseIf RiskRating = "Low" Then
                ctl.Value = "L"
                ctl.BackColor = 16750950
            Else
                ctl.Value = "NA"
                ctl.BackColor = &H80000004
            End If
          
#Else
            If RiskRating = "RRQ Triggered" Then
                ctl.Value = "Y"
                ctl.BackColor = 16750899
            Else
                ctl.Value = "N"
                ctl.BackColor = &H80000004
            End If
#End If
          
          
        End If
                
        Next ctl
        
        .TBRefNo.Value = Sheets("IRQ").Range("EngageNo").Value
        .TBCreated.Value = Format(Now(), "dd/MM/YY hh:mm")
        
        End With
        
    End If

    'Reset status information
    Sheets("Front Page").Range("RRQSent").Value = ""
    Sheets("Front Page").Range("RRQComplete").Value = ""
    Sheets("Front Page").Range("RRQQA").Value = ""
    Sheets("Front Page").Range("ExportedArcher").Value = ""
    Sheets("Front Page").Range("IRQImport").Value = Now()

    'Get RRQ ready to work
    btnModifyRRQ
    Sheets("IRQ").Visible = False
    ProtectBook
    
End Sub

'Routine:       Send RRQ to Third Party
'Description:   Load Initiate Form
'Author:        Nick Portmann
'Date:          29/08/17

Sub SendtoTP()
    
    'UT_Edit
    Dim DirectoryDef As String
    Dim Engagement As String
    Dim ThirdPartyName As String
    Dim MailMessage As String
    
    Sheets("Front Page").Select
        
    'Set Variables
    DirectoryDef = Sheets("IRQ").Range("DefaultDirectory").Value
    Engagement = Sheets("IRQ").Range("RefNo").Value
    ThirdPartyName = Sheets("IRQ").Range("TPName").Value
    
    'Save status information
    UnProtectSheet
    
    Sheets("Front Page").Range("RRQSent").Value = "y"
    Sheets("Front Page").Range("LastSenttoTP").Value = Now()
    
    'Save workbook
    ActiveWorkbook.SaveAs Filename:= _
        DirectoryDef & "\" & ThirdPartyName & " - " & Engagement & " - HSBC RRQ.xlsm" _
        , FileFormat:=xlOpenXMLWorkbookMacroEnabled, CreateBackup:=False
    
    ProtectBook
    
    'Create Mail
    
    'Create mail message
    MailMessage = "IRQ Ref No: " & Sheets("IRQ").Range("RefNo").Value
    MailMessage = MailMessage & Chr(13)
    MailMessage = MailMessage & Chr(13)
    MailMessage = MailMessage & "Dear " & Sheets("IRQ").Range("TPContact").Value
    MailMessage = MailMessage & Chr(13)
    MailMessage = MailMessage & Chr(13)
    MailMessage = MailMessage & Sheets("IRQ").Range("EmailText").Value
    
    'OnError
    On Error GoTo HandleMe
    Dim Instruction_Step As Boolean
    Instruction_Step = False
    
    Dim strInstructionFile  As String
    
    strInstructionFile = Sheets("IRQ").Range("DefaultDirectory").Value & "\" & Sheets("IRQ").Range("RRQInstructions").Value
    
    Dim OlApp As Object
    Dim NewMail As Object
  
    Set OlApp = CreateObject("Outlook.Application")
    Set NewMail = OlApp.CreateItem(0)
  
    With NewMail
        .To = Sheets("IRQ").Range("TPEmail").Value
        .CC = Sheets("IRQ").Range("ClientEmail").Value
        .Subject = Sheets("IRQ").Range("EmailTitle").Value
        .Body = MailMessage
        .Attachments.Add ThisWorkbook.FullName
        
        Instruction_Step = True
        If Len(Dir(strInstructionFile)) <> 0 Then
            .Attachments.Add strInstructionFile
        End If
        Instruction_Step = False
        
        .Display   'or use .Display to show you the email before sending it.
    End With
    On Error GoTo 0
  

Exitsub:
    Set NewMail = Nothing
    Set OlApp = Nothing
    Application.EnableEvents = True
    Exit Sub
    
HandleMe:
    Dim strErrMsg, strErrTitle As String
    strErrMsg = vbCrLf & vbCrLf & "It is advised to save and re-open the file before proceeding."
    strErrTitle = "Error Creating EMail"
    
    Set NewMail = Nothing
    Set OlApp = Nothing
    
    Application.EnableEvents = True
   
    MsgBox Err.Description & strErrMsg, , strErrTitle, Err.HelpFile, Err.HelpContext
    
End Sub



Attribute VB_Name = "M004"
Option Explicit

'*********************************************************************
'           Attachment Routines
'*********************************************************************


'Module:        M004
'Function:      Load  attachment form
'Author:        Nick Portmann
'Date:          29/08/17

'Routine:       Load InsertAttachment
'Description:   LoadInsertAttachment
'Author:        Nick Portmann
'Date:          20/09/17

Sub LoadInsertAttachment()
    
    Dim result As Integer
    
    'Check operating system
    If Left(Application.OperatingSystem, 3) = "Mac" Then
        result = MsgBox("It has been detected that you are using an Apple Mac computer - this functionality does not work fully.  MANUAL WORKAROUND: Attach any supporting documentation that is not a word file to the return email.", vbInformation, "Mac Operating System Detected")
    End If

    UnprotectBook

    Load InsertAttachment
    
    InsertAttachment.LCopyright = CopyRightBanner
    
    If ActiveSheet.Name = "RRQ" Then
        
        If Range("N" & ActiveCell.Row).Value <> "" Then
            InsertAttachment.TBQuNo = Range("C" & ActiveCell.Row).Value
            
            If Range("F" & ActiveCell.Row).Value = "Yes" Then
                InsertAttachment.TBEvidence.Value = "Required"
            Else
                InsertAttachment.TBEvidence.Value = "Additional"
            End If
            
        Else
            InsertAttachment.TBQuNo = Range("C" & ActiveCell.Row).Value
            InsertAttachment.TBEvidence.Value = "Additional"
        End If
    
    Else
        InsertAttachment.TBQuNo = "NA"
        InsertAttachment.TBEvidence.Value = "Additional"
    End If
    
    InsertAttachment.Show

    ProtectBook

End Sub



'Routine:       Insert Attachement
'Description:   InsertAttach
'Author:        Nick Portmann
'Date:          20/09/17

Sub InsertAttach()
    
    'UT_Edit
    Dim Startpoint As String
    Dim Startsheet As String
    Dim NoAttach As Integer
    
    Startpoint = ActiveCell.Address
    
    Startsheet = ActiveSheet.Name

    Sheets("Attachments").Select
    
    NoAttach = Range("NoAttachments").Value
    
    Range("StartHere").Offset(NoAttach + 1).Select
    
    
    
    ActiveCell.Offset(0, 3).Select
    'OnError
    
    On Error GoTo HandleMe
    
    
    'Load insert object form
    Application.Dialogs(xlDialogInsertObject).Show
    
    Dim ActiveShape As Shape
    Dim UserSelection As Variant

    'Pull-in what is selected on screen
    Set UserSelection = ActiveWindow.Selection

    'Determine if selection is a shape
    ActiveSheet.Shapes(UserSelection.Name).IncrementLeft 6.75
    ActiveSheet.Shapes(UserSelection.Name).IncrementTop 3.75
    
    'Place cursor in correct position
    Range("StartHere").Offset(NoAttach + 1).Select
    
    'Determine if attachment from RRQ form
    If Startsheet = "RRQ" Then
        With InsertAttachment
            ActiveCell.Value = .TBQuNo.Value
            ActiveCell.Offset(0, 1).Value = .TBEvidence.Value
            ActiveCell.Offset(0, 2).Value = .TBDescription.Value
        End With
    Else
        With InsertAttachment
            ActiveCell.Value = "NA"
            ActiveCell.Offset(0, 1).Value = "NA"
            ActiveCell.Offset(0, 2).Value = .TBDescription.Value
        End With
    End If
    
    Unload InsertAttachment
    
Exitsub:
    'Select RRQ sheet and startpoint
    Sheets("RRQ").Select
    Range(Startpoint).Select
    
    Application.EnableEvents = True
    Exit Sub
    
HandleMe:
    'Select RRQ sheet and startpoint
    Sheets("RRQ").Select
    Range(Startpoint).Select
    
    Application.EnableEvents = True
    Dim strErrMsg As String
    strErrMsg = vbCrLf & vbCrLf & "It is advised to save and re-open the file before proceeding."
    MsgBox Err.Description & strErrMsg, , "Error Inserting Attachment", Err.HelpFile, Err.HelpContext
    

End Sub




Attribute VB_Name = "M005"
Option Explicit

'*********************************************************************
'           CSV Export routine
'*********************************************************************

'Module:        M005
'Function:      CSV export
'Author:        Nick Portmann
'Date:          29/08/17

'Routine:       ExportRRQtoCSV
'Description:   Exports CSV for upload into Archer
'Author:        Nick Portmann
'Date:          20/09/17

Sub ExportRRQtoCSV()

    'Declare variables
    'Dim EngageNo
        
    'UT_Edit
    Dim DirectoryDef As String
    Dim Engagement As String
    Dim ThirdPartyName As String
    Dim FName As String
    Dim result
    
    DirectoryDef = Sheets("IRQ").Range("DefaultDirectory").Value
    Engagement = Sheets("IRQ").Range("RefNo").Value
    ThirdPartyName = Sheets("IRQ").Range("TPName").Value
    
    'Exit if not HSBC laptop
    If FindCompany() = False Then
        result = MsgBox("This option is only available to HSBC", vbInformation)
        Exit Sub
    End If
        
    'Load directory
    If Sheets("IRQ").Range("DefaultDirectory").Value = "" Then
        result = MsgBox("Please set default directory using the Load Details option", vbInformation, "Set DIR")
        Exit Sub
    End If
        
    FName = Sheets("IRQ").Range("DefaultDirectory").Value
    
    'Export File
    UnprotectBook
    Sheets("ArcherExport").Visible = True
    
    'Create CSV File
    Sheets("ArcherExport").Select
    Cells.Select
    Selection.Copy
    Workbooks.Add
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Application.CutCopyMode = False
    
    
    'Save CSV file
    ActiveWorkbook.SaveAs Filename:= _
        FName & "\ RRQ Export - " & Engagement & "- " & ThirdPartyName & ".csv", FileFormat:= _
        xlCSV, CreateBackup:=False
        
    ActiveWorkbook.Saved = True
        
    ActiveWorkbook.Close (False)
    
    
    'Update status
    Sheets("Front Page").Range("ExportedArcher").Value = "y"
    Sheets("Front Page").Range("LastExport").Value = Now()
    
    result = MsgBox("Extract successful!  CSV file saved to - " & FName & "\ RRQExport - " & Engagement & "- " & ThirdPartyName & ".csv", vbInformation, "Success")
    
    Sheets("ArcherExport").Visible = xlVeryHidden
    
    'Save file as completed Export
    ActiveWorkbook.SaveAs Filename:= _
        DirectoryDef & "\" & ThirdPartyName & " - " & Engagement & " - HSBC RRQ-Export Complete.xlsm" _
        , FileFormat:=xlOpenXMLWorkbookMacroEnabled, CreateBackup:=False
        
    ProtectBook
    
End Sub


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CBConfigRRQ, 1, 0, MSForms, CommandButton"
Option Explicit

Private Sub CBRRQConfig_Click()
    
 Call btnModifyRRQ
End Sub
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Function EnglishOf(str As String) As String
    If str = "" Then
        EnglishOf = ""
    Else
        Dim ws As Worksheet
        Set ws = Worksheets("AdminSheet")
        Dim rng1 As Range
        Dim rng2 As Range
        
        
        
        If Application.WorksheetFunction.CountIf(ws.Range("D1").EntireColumn, str) > 0 Then
            Set rng1 = ws.Range("D1").EntireColumn
            Set rng2 = ws.Range("G1").EntireColumn
        Else
            If Application.CountIf(ws.Range("E1").EntireColumn, str) > 0 Then
                Set rng1 = ws.Range("E1").EntireColumn
                Set rng2 = ws.Range("H1").EntireColumn
            Else
                'MsgBox "Option match not found in English Language"
                EnglishOf = str
                Exit Function
            End If
        End If
        
        With Application
            EnglishOf = .Index(rng2, .Match(str, rng1, 0))
        End With
    End If
    
End Function


Private Sub MultiSelect(ByVal Target As Range)

    Dim xRng As Range
    Dim xValue1 As String
    Dim xValue2 As String
    
    If Target.Count > 1 Then
        If Target.MergeCells Then
            If Target.Cells.Count <> Target.Count Then
                GoTo Exitsub
            Else
                Set Target = Target.Cells(1, 1)
            End If
        End If
    End If
    
    'OnError
    On Error GoTo HandleMe
    
    'Set Range of multiselect Items here
    'Set xRng = Cells.SpecialCells(xlCellTypeAllValidation)
    
    
    'Set xRng = Union(Range("E48"), Range("E79"), Range("E110"), Range("E134"), Range("E45"), Range("E176"), Range("E215"), Range("E276"), Range("E289"), Range("E308"), Range("E330"), Range("E354"), Range("E378"), Range("E388"), Range("E458"), Range("E467"))
    Set xRng = Union(Range("E225"), Range("E48"), Range("E89"), Range("E120"), Range("E144"), Range("E186"), Range("E45"), Range("E286"), Range("E299"), Range("E318"), Range("E340"), Range("E364"), Range("E388"), Range("E398"))
    
'    If xRng Is Nothing Then
'        GoTo Exitsub
'    End If
    
    If Application.Intersect(Target, xRng) Is Nothing Then
        GoTo Exitsub
    End If
    
    Application.EnableEvents = False

    xValue2 = Target.Value
    Application.Undo
    xValue1 = Target.Value
    Target.Value = xValue2
    
    Dim rngEng As Range
    Set rngEng = Target.Offset(0, 11)
    
    If xValue1 = "" Or xValue2 = "" Or xValue1 = xValue2 Then
        rngEng.Value = EnglishOf(Target.Value)
        GoTo Exitsub
    End If
   
#If 0 Then
   If InStr(1, xValue2, "N/A") > 0 _
   Or InStr(1, xValue2, "Nothing is done to ensure compliance") > 0 _
   Or InStr(1, xValue2, "No data transfer required") > 0 _
   Or InStr(1, xValue2, "None of the above") > 0 Then
        GoTo Exitsub
    End If
    
    If InStr(1, xValue1, "N/A") > 0 _
   Or InStr(1, xValue1, "Nothing is done to ensure compliance") > 0 _
   Or InStr(1, xValue1, "No data transfer required") > 0 _
   Or InStr(1, xValue1, "None of the above") > 0 Then
        GoTo Exitsub
    End If
#Else
    'Check for 'None of the above' type options
    If InStr(1, Worksheets("AdminSheet").Range("MultiSelectExceptions"), xValue1) > 0 Then
        rngEng.Value = EnglishOf(Target.Value)
        GoTo Exitsub
    Else
        If InStr(1, Worksheets("AdminSheet").Range("MultiSelectExceptions"), xValue2) > 0 Then
            rngEng.Value = EnglishOf(Target.Value)
            GoTo Exitsub
        End If
    End If
    
#End If

   
   Dim sep As String
   sep = ";" 'Chr(10) '", "
   
    If InStr(1, xValue1, sep & xValue2) Then
        Target.Value = Replace(xValue1, sep & xValue2, "")
        rngEng.Value = Replace(rngEng.Value, sep & EnglishOf(xValue2), "")
    Else
        If InStr(1, xValue1, xValue2 & sep) Then
            Target.Value = Replace(xValue1, xValue2 & sep, "")
            rngEng.Value = Replace(rngEng.Value, EnglishOf(xValue2) & sep, "")
        Else
            Target.Value = xValue1 & sep & xValue2
            rngEng.Value = rngEng.Value & sep & EnglishOf(xValue2)
        End If
    End If
    
Exitsub:
    Application.EnableEvents = True
    Exit Sub
    
HandleMe:
    Application.EnableEvents = True
    Dim strErrMsg As String
    strErrMsg = vbCrLf & vbCrLf & "It is advised to save and re-open the file before proceeding."
    MsgBox Err.Description & strErrMsg, , "Error Executing MultiSelect", Err.HelpFile, Err.HelpContext
    
End Sub
Private Sub Worksheet_Activate()

Application.CommandBars("cell").Controls("Copy").Enabled = False
Application.CommandBars("cell").Controls("Cut").Enabled = False
Application.CommandBars("cell").Controls("Paste").Enabled = False
Application.CommandBars("cell").Controls("Paste Special...").Enabled = False
'Application.CommandBars("cell").Controls("Paste Options:").Enabled = False

End Sub


Private Sub Worksheet_Deactivate()

Application.CommandBars("cell").Controls("Copy").Enabled = True
Application.CommandBars("cell").Controls("Cut").Enabled = True
Application.CommandBars("cell").Controls("Paste").Enabled = True
Application.CommandBars("cell").Controls("Paste Special...").Enabled = True
'Application.CommandBars("cell").Controls("Paste Options:").Enabled = True

End Sub


Private Sub Worksheet_Change(ByVal Target As Range)
   
    If Not Intersect(Target, Target.Parent.Range("E26:E610")) Is Nothing Then
        Call UnProtectSheet
        Call MultiSelect(Target)
        Call HideShow(Target, False)
        Call ProtectSheet
        Call DisableCutCopyPaste
    End If
    
End Sub


Private Sub DisableCutCopyPaste()

Application.OnKey "^{c}", ""
Application.OnKey "^{v}", ""
Application.OnKey "^{x}", ""

End Sub


Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "ThirdParty"
Attribute VB_Base = "0{78BB5B39-2A28-4E14-964D-6C87D796067D}{E1AEB241-5E2B-41DD-AB3A-DFE963D3BD80}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CBOK_Click()
    Unload ThirdParty
End Sub


Private Sub TB3PContact_Change()
    Sheets("IRQ").Range("TPContact").Value = TB3PContact.Value
End Sub

Private Sub TB3PEmail_Change()
    Sheets("IRQ").Range("TPEmail").Value = TB3PEmail.Value
End Sub

Private Sub TB3PTel_Change()
    Sheets("IRQ").Range("TPTel").Value = TB3PTel.Value
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    
    Dim result As Integer
    
    'Check operating system
    If Left(Application.OperatingSystem, 3) = "Mac" Then
        
        result = MsgBox("Is the Questionaire complete and ready to send back to HSBC?", vbYesNo + vbInformation, "Questionnaire complete?")
    
        If result = 6 Then
            
            'Save status information
            UnProtectSheet
            Sheets("Front Page").Range("RRQComplete").Value = "y"
            Sheets("Front Page").Range("LastcompletedbyTP").Value = Now()
            ProtectSheet
    
        End If

    End If
End Sub

Private Sub Workbook_Open()

    Dim result As Integer
    
    'Check operating system
    If Left(Application.OperatingSystem, 3) = "Mac" Then
        result = MsgBox("It has been detected that you are using an Apple Mac computer - it is advised to complete the questionnaire on a Windows based machine.  It is possible to complete the questionnaire but the functionality of this spreadsheet will be reduced. Prompts will appear where necessary with manual workarounds.", vbInformation, "Mac Operating System Detected")
    End If

End Sub

Attribute VB_Name = "functions"
Option Explicit

Function HexCode(cell As Range) As String
    HexCode = Right("000000" & Hex(cell.Interior.Color), 6)
End Function

Function CopyRightBanner()
    CopyRightBanner = Sheets("User Config").Range("CopyRight").Value
End Function

Function AppName()
    AppName = Sheets("User Config").Range("Description").Value
End Function

Function SubTitle()
    SubTitle = Sheets("User Config").Range("SubTitleName").Value
End Function

Function VersionNo()
    VersionNo = Sheets("User Config").Range("Version").Value
End Function

Function FindCompany()
    
    Dim UsernameApp, Startname, HSBC As String
    
    UsernameApp = Application.UserName
    
    Startname = InStr(1, UsernameApp, "@")
    HSBC = Mid(UsernameApp, Startname + 1, 4)
    
    If HSBC = "hsbc" Then
        FindCompany = True
    Else
        FindCompany = False
    End If
        
End Function
Attribute VB_Name = "modHideShow"
Option Explicit

'*********************************************************************
'           Hide or Show rows based on trigger formula
'*********************************************************************

Public Sub btnModifyRRQ()
    Dim ws2 As Worksheet
    Set ws2 = Worksheets("RRQ")
    ws2.Activate
    Call UnProtectSheet
    Call HideShow(Worksheets(1).Cells(1, 1), True)
    Call ProtectSheet
End Sub
Public Sub xHideShow(ByVal Target As Range, ByVal first_run As Boolean)
    
   Dim ws1 As Worksheet
   Dim ws2 As Worksheet
   
   Const colDomain_1 = 3
   Const colIRQOutcome = 4
   
   Const colTrigger = 15
   Const colIRQCondition = 18
   Const colIRQQno = 19
   Const colIRQOptions = 20
   Const colRRQCondition = 21
   Const colRRQQno = 22
   Const colRRQOptions = 23
   
   Const colUserInput_2 = 8
   
   Const rowDataStart = 26 '11
   Const rowDataEnd = 610 '549
   
   Dim r, msgres As Integer
   Dim cell As Range
   Dim ind_cell As Range
'   Dim DomainCodes() As Variant
'
'   DomainCodes = Array("ABC", "AML", "BCEP", "BC", "EFR", "ICS", "ISR", "REG", "SPPA", "SUBC")
   
   Set ws1 = Worksheets("IRQLink")
   Set ws2 = Worksheets("RRQ")
   
    If first_run Then
        msgres = MsgBox("Setting up Questionnaire. This may take a moment to load.", vbOKOnly, Application.ThisWorkbook.Name)
            
        For Each cell In ws2.Range(ws2.Cells(rowDataStart, colTrigger), ws2.Cells(rowDataEnd, colTrigger))
            
           For Each ind_cell In ws2.Cells(cell.Row, colTrigger).MergeArea
            

                r = ind_cell.Row
                
                If (ws2.Cells(r, colTrigger).Value = "YES") Then
                    ws2.Cells(r, colTrigger).EntireRow.Hidden = False
                Else
                    If (ws2.Cells(r, colTrigger).Value = "NO") Then
                            ws2.Cells(r, colTrigger).EntireRow.Hidden = True
                    Else
                        If ws2.Cells(r, colTrigger).MergeArea.Rows.Count > 1 Then
                            ws2.Cells(r, colTrigger).EntireRow.Hidden _
                            = ws2.Cells(r, colTrigger).MergeArea(1, 1).EntireRow.Hidden
                        Else
                            ws2.Cells(r, colTrigger).EntireRow.Hidden = False
                            
                        End If
                        
                    End If
                End If
                         
            Next ind_cell
            
           Next cell
           
           first_run = False
        msgres = MsgBox("Questionnaire is ready to use", vbOKOnly, Application.ThisWorkbook.Name)
    Else
        
        'OnError
         On Error GoTo HandleMe
         
         If Not Intersect(Target.Dependents, Target.Worksheet.Range(Cells(rowDataStart, colTrigger), Cells(rowDataEnd, colTrigger))) Is Nothing Then
            
            On Error GoTo 0
            
            For Each cell In Intersect(Target.Dependents, Target.Worksheet.Range(Target.Worksheet.Cells(rowDataStart, colTrigger), Target.Worksheet.Cells(rowDataEnd, colTrigger)))
                
               For Each ind_cell In ws2.Cells(cell.Row, colTrigger).MergeArea
                
                    r = ind_cell.Row
                    
                    If (ws2.Cells(r, colTrigger).Value = "YES") Then
                        ws2.Cells(r, colTrigger).EntireRow.Hidden = False
                    Else
                        If (ws2.Cells(r, colTrigger).Value = "NO") Then
                                ws2.Cells(r, colTrigger).EntireRow.Hidden = True
                        Else
                            If ws2.Cells(r, colTrigger).MergeArea.Rows.Count > 1 Then
                                ws2.Cells(r, colTrigger).EntireRow.Hidden _
                                = ws2.Cells(r, colTrigger).MergeArea(1, 1).EntireRow.Hidden
                            Else
                                ws2.Cells(r, colTrigger).EntireRow.Hidden = False
                                
                            End If
                            
                        End If
                    End If
                             
                Next ind_cell
                
               Next cell
         
         End If 'If dependents
    End If 'First Run

Exitsub:
    Application.EnableEvents = True
    Exit Sub
    
HandleMe:
    Application.EnableEvents = True
    'This is a known exception when target has no dependent cells
    'MsgBox Err.Description, , "Error Executing HideShow Subquestions", Err.HelpFile, Err.HelpContext

End Sub


Public Sub HideShow(ByVal Target As Range, ByVal first_run As Boolean)
    Dim ws2 As Worksheet
    Set ws2 = Worksheets("RRQ")

    Dim r, c As Integer
    Const rowDataStart = 26 '11
    Const rowDataEnd = 602 '549
    Const colNeed = 21
    Const colHidden = 18
    

    While ws2.Cells(2, colNeed).Value > 0
        r = ws2.Cells(2, colNeed).Value
        ws2.Cells(r, colHidden).EntireRow.Hidden = ws2.Cells(r, colHidden).Value
    Wend
    
End Sub





INQUEST-PP=macro
