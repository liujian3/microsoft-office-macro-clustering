Attribute VB_Name = "DocumentConverter"
Attribute VB_Base = "0{BD3318FE-BFBA-46D7-B79F-A76EB617F211}{F625219C-2A26-47D7-90E4-D993FF073E19}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'****** 22/01/05 *****
'Now AkUniConverter has been removed and Iscii to Unicode
'conversion is performed in the .dot file itself through
'IscToUni Function. So there is no need to call Join after Iscii
'To Unicode Conversion.

Option Compare Text
Dim SourceVendorT, TargetVendorT As String
Dim TargetFont As String
Dim SourceFontT, TargetFontT As String
Dim sNext As String
Dim Iscii As String
Dim sTemp As String
Dim AkBilCSet As String
Dim SrcVendor As String
Dim SrcFFamily As String
Dim SrcFont As String
Dim TrgtVendor As String
Dim TrgtFFamily As String
Dim TrgtFont As String

Dim CheckFlag As Boolean
Dim S1, S2, S3, S4, S5, S6, S7 As String
Dim S11, S22, S33, S44, S55, S66, S77 As String

Dim FontName As String
Dim Cset As String

Dim SourceVendorDef As String
Dim TargetVendorDef As String
Dim SourceFontFamilyDef As String
Dim TargetFontFamilyDef As String
Dim TargetFontNameDef As String
Dim EnglishFontNameDef As String
Dim CheckValueDef As String

Dim nStart_0 As Integer
Dim nEnd_9 As Integer
Dim nStart_Acap As Integer
Dim nEnd_Zcap As Integer
Dim nStart_a As Integer
Dim nEnd_z As Integer

Dim oWordSelection As Word.Selection
Dim oMyRange As Word.Range
Dim oWordDoc As New Word.Document
Dim HFSRange As Word.Range
Dim MyShape As Word.Shape

'***To Display FontDialog Box
Private Const CF_SCREENFONTS = &H1
Private Const CF_PRINTERFONTS = &H2
Private Const CF_BOTH = (CF_SCREENFONTS Or CF_PRINTERFONTS)
Private Const LF_FACESIZE = 32

Private Type CHOOSEFONT
        lStructSize As Long
        hwndOwner As Long          '  caller's window handle
        hdc As Long                '  printer DC/IC or NULL
        lpLogFont As Long
        iPointSize As Long         '  10 * size in points of selected font
        flags As Long              '  enum. type flags
        rgbColors As Long          '  returned text color
        lCustData As Long          '  data passed to hook fn.
        lpfnHook As Long           '  ptr. to hook function
        lpTemplateName As String   '  custom template name
        hInstance As Long          '  instance handle of.EXE that
                                   '  contains cust. dlg. template
        lpszStyle As String        '  return the style field here
                                   '  must be LF_FACESIZE or bigger
        nFontType As Integer       '  same value reported to the EnumFonts
                                   '  call back with the extra FONTTYPE_
                                   '  bits added
        MISSING_ALIGNMENT As Integer
        nSizeMin As Long           '  minimum pt size allowed &
        nSizeMax As Long           '  max pt size allowed if
                                   '  CF_LIMITSIZE is used
End Type
Private Type LOGFONT
        lfHeight As Long
        lfWidth As Long
        lfEscapement As Long
        lfOrientation As Long
        lfWeight As Long
        lfItalic As Byte
        lfUnderline As Byte
        lfStrikeOut As Byte
        lfCharSet As Byte
        lfOutPrecision As Byte
        lfClipPrecision As Byte
        lfQuality As Byte
        lfPitchAndFamily As Byte
        lfFaceName(1 To LF_FACESIZE) As Byte
End Type
Private Declare Function CHOOSEFONT Lib "comdlg32.dll" Alias "ChooseFontA" (pChooseFont As CHOOSEFONT) As Long

''''' **** If the checkbox is checked, all the options
'''''' for english font will be visible
Private Sub CheckBox1_Click()

'CheckBox1.Value = s77
If (CheckBox1.Value = True) Then
    EnglishFont.Enabled = True
    EnglishFont.AddItem "TargetFont"
    EnglishFont.AddItem "TimesNewRoman"
    EnglishFont.AddItem "Arial"
    EnglishFont.AddItem "LeaveItAsItIs"
    EnglishFont.ListIndex = 0
Else
    EnglishFont.Enabled = False
End If
End Sub

Private Sub CheckBox3_Click()
    '''' *** right now not used
    
    If (CheckBox3.Value = True) Then
        selflag = 1
    Else
        selflag = 0
    End If
    
End Sub

Private Sub CommandButton2_Click()
    '''' **** exit button
    Unload Me
End Sub

'**To Save Current Settings as Default in "Akruti\AkSFConvCfg.ini" ***
Private Sub CommandButton5_Click()

    a = WritePrivateProfileString("FontInfo", "SourceVendor", SourceVendor.Text, IniFile)
    a = WritePrivateProfileString("FontInfo", "SourceFontFamily", SourceFontFamily.Text, IniFile)
    a = WritePrivateProfileString("FontInfo", "SourceFont", TextBox3.Text, IniFile)
    a = WritePrivateProfileString("FontInfo", "TargetVendor", TargetVendor.Text, IniFile)
    a = WritePrivateProfileString("FontInfo", "TargetFontFamily", TargetFontFamily.Text, IniFile)
    a = WritePrivateProfileString("FontInfo", "TargetFont", TextBox2.Text, IniFile)
    If (CheckBox2.Value = True) Then
        a = WritePrivateProfileString("FontInfo", "ConvertInSame", "True", IniFile)
    Else
        a = WritePrivateProfileString("FontInfo", "ConvertInSame", "False", IniFile)
    End If
    MsgBox "Settings saved as default.", vbInformation, "Akruti Smart Converter"
End Sub

Private Sub CommandButton7_Click()
    Dim lRetVal As Long
    Dim pChooseFont As CHOOSEFONT
    Dim pLogFont As LOGFONT
    Dim FontName As String
    Dim Size As Integer

    CommandButton7.Enabled = False
    With pChooseFont
        '.hInstance = App.hInstance
        .hwndOwner = hWnd
        .flags = CF_BOTH
        .iPointSize = Size * 10
        .lStructSize = Len(pChooseFont)
        .lpLogFont = VarPtr(pLogFont)
    End With
        
    lRetVal = CHOOSEFONT(pChooseFont)
    If lRetVal = 1 Then
        FontName = StrConv(pLogFont.lfFaceName, vbUnicode)
        FontName = Left(FontName, InStr(1, FontName, vbNullChar) - 1)
        fonttarget.Text = FontName
        SourceFontT = FontName
        TextBox3.Text = FontName
    Else
        fonttarget.Text = ""
        SourceFontT = ""
        TextBox3.Text = ""
    End If
    CommandButton7.Enabled = True
End Sub

Private Sub CommandButton4_Click()
    Dim DotPos As Integer
    Dim FontName As String
    Dim Found1 As Boolean
    Dim Found2 As Boolean
    Dim Pos As Integer
    
    If (SourceFontFamily.Text = TargetFontFamily.Text) Then
        MsgBox "Source and target fonts can not be the same.", vbCritical, "Akruti Telugu Smart Font Converter"
        End
    End If
    
    If (ActiveDocument.Saved = True And CheckBox2.Value = False) Then
        DocName = ActiveDocument.FullName
        'DotPos = InStrRev(DocName, ".")
        DotPos = InStr(1, DocName, ".")
        DocName = Left(DocName, DotPos - 1) & "_Converted." & Right(DocName, Len(DocName) - DotPos)
        If (CheckBox2.Value = False) Then
            ActiveDocument.SaveAs DocName
        End If
    End If
    
    StopFlag = False
    CurrentPage = 0
    DocumentConverter.Hide
    Found1 = False
    Found2 = False
    
    If (DisplayInfoPr = True) Then
        For i = 0 To UBound(DisplayName) - 1
            If (TargetFontFamily.Text = DisplayName(i)) Then
                DefaultTgtFFamily = DisplayFFamily(i)
                Found1 = True
                Exit For
            End If
        Next i
        
        For i = 0 To UBound(DisplayName) - 1
            If (SourceFontFamily.Text = DisplayName(i)) Then
                DefaultSrcFFamily = DisplayFFamily(i)
                Found2 = True
                Exit For
            End If
        Next i
    End If
    
    If (Found2 = False) Then
        DefaultSrcFFamily = SourceFontFamily.Text
    End If
    
    If (Found1 = False) Then
        DefaultTgtFFamily = TargetFontFamily.Text
    End If
    
    Cset = GetCSet(DefaultSrcFFamily) 'SourceFontFamily.Text)
    
    Pos = InStr(1, Cset, Chr(0))
    If (Pos > 0) Then Cset = Left(Cset, Pos - 1)
    
    If (Cset = "ERROR") Then
        Cset = AkBilCSet
    'Else
        'Cset = Cset & Chr(7) & Chr(9) & Chr(10) & Chr(11) & Chr(12) & Chr(13) & Chr(47) & Chr(34)
        Cset = Cset & Chr(7) & Chr(9) & Chr(10) & Chr(11) & Chr(12) & Chr(13) ' & Chr(47) ' & Chr(34)
    End If
    
    RemoveJunkChars
    
    If (DefaultTgtFFamily = UnicodeFont) Then
        Conversion UnicodeFont
    ElseIf (DefaultTgtFFamily = TlgUnicodeFont) Then
        Conversion TlgUnicodeFont
    Else
        If (TextBox2.Text = "") Then
            'If (DefaultTgtFFamily <> UnicodeFont And DefaultTgtFFamily <> StrIscii) Then ' And Found1 = False) Then
            If (DefaultTgtFFamily <> UnicodeFont And DefaultTgtFFamily <> StrIscii And DefaultTgtFFamily <> TlgUnicodeFont) Then
                FontName = GetDefaultFont(DefaultTgtFFamily) 'TargetFontFamily.Text)
                Pos = InStr(1, FontName, Chr(0))
                If (Pos > 0) Then FontName = Left(FontName, Pos - 1)
                
            Else
                FontName = DefaultTgtFFamily 'TargetFontFamily.Text
            End If
        Else
            FontName = TextBox2.Text
        End If
        Conversion FontName
    End If
End Sub

Public Sub Conversion(ByVal TFontName As String)
    Dim iTemp As Long
    Dim sTemp As String
    Dim flag As Integer
    Dim Pt As Long 'Integer
    Dim SourceFontFamilyNew As String
    Dim ForICO As Integer
    Dim nICO As Integer
    Dim TotalChars As Long
    Dim CharsConverted As Long
    Dim PrevConverted As Integer
    Dim PercentConverted As Integer
    Dim StrWord As String
    Dim NewLine As Boolean
    Dim FontType As String
    Dim TargetFontType As String
    Dim Pos As Integer
    Dim ShapeCount As Integer
    '''''''''''''''''''
    
    'Added on 22/01/05 to limit selection to only one font at a time
    Dim EndPoint As Long 'Integer
    Dim ConvertedTill As Long 'Integer
    Dim Status1 As String
    Dim Status2 As String
    Dim Status3 As String
    Dim Hr As Integer
    Dim Min As Integer
    Dim Sec As Integer
    Dim EndOfRow As Boolean
    Dim SectionCount As Integer
    Dim HeaderCount As Integer
    Dim FooterCount As Integer
    Dim j As Integer, i As Integer, k As Integer
    
    PercentConverted = 0
    NewLine = False
    
    Set oWordDoc = Word.ActiveDocument
    Set oWordSelection = Word.Selection
    Set oMyRange = oWordDoc.Content
    
    Status1 = "Conversion in Progress"
    Status2 = "Conversion in Progress.."
    Status3 = "Conversion in Progress..."
    TotalChars = Len(oWordDoc.Content)
    
    flag = 0
    nICO = 0
    ForICO = 0
    
    EndOfRow = False
    
    If TextBox3.Text <> "" Then
        SourceFontFamilyNew = TextBox3.Text
    ElseIf (SourceFontFamily.Text <> UnicodeFont And SourceFontFamily.Text <> StrIscii And SourceFontFamily.Text <> TlgUnicodeFont) Then
        SourceFontFamilyNew = DefaultSrcFFamily 'GetDisplayNameFFamily(SourceFontFamily.Text)
    Else
        SourceFontFamilyNew = SourceFontFamily.Text
        DefaultSrcFFamily = SourceFontFamilyNew
    End If
    
    If EnglishFont = "TargetFont" Then
        EnglishFont = TFontName
    End If
    If TextBox2.Text <> "" Then
        TargetFont = TextBox2.Text
    End If
    
    'If (TargetFontFamily.Text <> StrIscii And TargetFontFamily.Text <> UnicodeFont) Then
    If (DefaultTgtFFamily <> StrIscii And DefaultTgtFFamily <> UnicodeFont And DefaultTgtFFamily <> TlgUnicodeFont) Then
        TargetFontType = GetFontType(DefaultTgtFFamily) 'TargetFontFamily.Text)
        Pos = InStr(1, TargetFontType, Chr(0))
        If (Pos > 0) Then TargetFontType = Left(TargetFontType, Pos - 1)
        
    ElseIf (DefaultTgtFFamily = UnicodeFont Or DefaultTgtFFamily = TlgUnicodeFont) Then
        TargetFontType = StrMono
    Else
        TargetFontType = StrBi
    End If
    'FrmStatus.Caption = "Converting from " & SourceFontFamilyNew & " To " & TargetFontFamily
    'FrmStatus.Show
    'FrmStatus.LblDocName.Caption = "Converting " & oWordDoc.Name
    'FrmStatus.Label2.Caption = "Converted: 0%"
    Do
        If (StopFlag = True) Then
            Exit Sub
        End If
        If (oWordSelection.Information(wdActiveEndPageNumber) > CurrentPage) Then
            CurrentPage = oWordSelection.Information(wdActiveEndPageNumber)
            TotalPages = oWordSelection.Information(wdNumberOfPagesInDocument)
'            FrmStatus.LblStatus.Caption = "Converting Page " & CurrentPage & " of " & TotalPages
            DoEvents
        End If
    
ContinueLoop:
        If (CharsConverted < TotalChars) Then
            PercentConverted = (CharsConverted / TotalChars) * 100
        End If
        If (PercentConverted > PrevConverted) Then
'            FrmStatus.Label2.Caption = "Converted: " & PercentConverted & "%"
            PrevConverted = PercentConverted
            DoEvents
        End If
'        ActiveWindow.ScrollIntoView Selection.Range, True

        If (oWordSelection.Information(wdWithInTable) = True And oWordSelection.End <> 0) Then
                ConvertedTill = oWordSelection.End
                oWordSelection.MoveRight Unit:=wdCharacter
                'If (oWordSelection.Start < ConvertedTill) Then oWordSelection.MoveDown
        ElseIf (oWordSelection.Start <> 0 And oWordSelection.End <> 0) Then
                'in tables with vertically merged cells moving from a cell results in
                'selecting the next (merged) cell in the previous row which is already
                'processed. When setting the oWordSelection.Start to oWordSelection.End if the
                'value is changed (reduced here...) set it manually - Mahesh 16-11-04
                oWordSelection.Start = oWordSelection.End
                oWordSelection.End = oWordSelection.Start
                ''''Last point of conversion
                ConvertedTill = oWordSelection.End
        End If
        
        If oWordSelection.End = oWordDoc.Content.End - 1 Then
                                         
           SectionCount = oWordDoc.Sections.Count
           
           If (SectionCount > 0) Then
                
                For i = 1 To SectionCount
                
                    For j = 1 To 3
                        
                        If (oWordDoc.Sections(i).Headers(j).Exists) Then
                            
                            oWordDoc.Sections(i).Headers(j).Range.Select
                            Set HFSRange = oWordDoc.Sections(i).Headers(j).Range
                            Selection.Start = oWordDoc.Sections(i).Headers(j).Range.Start
                            Selection.End = oWordDoc.Sections(i).Headers(j).Range.Start
                            ConvertHeaderFooter SourceFontFamilyNew, TFontName
                                
                            If (oWordDoc.Sections(i).Headers(j).Shapes.Count > 0) Then
                                ShapeCount = oWordDoc.Sections(i).Headers(j).Shapes.Count
                                For k = 1 To ShapeCount
NextShapeInHeader:
                                    Set MyShape = oWordDoc.Sections(i).Headers(j).Shapes(k)
                                    'Set myRange = MyShape.TextFrame.TextRange
                                    Set HFSRange = MyShape.TextFrame.TextRange
                                    oWordDoc.Sections(i).Headers(j).Range.Select
'                                    MyShape.Select
'                                    oWordDoc.Sections(i).Headers(j).Shapes(k).Select
                                    HFSRange.Select
                                    Selection.Start = HFSRange.Start 'MyShape.TextFrame.TextRange.Start
                                    Selection.End = HFSRange.Start 'MyShape.TextFrame.TextRange.Start
                                    
                                    If MyShape.TextFrame.TextRange.Characters.Count <= 2 Then
                                        ch = MyShape.TextFrame.TextRange.Characters(1)
                                        If (Asc(ch) < 31) Then
                                            If (i < ShapeCount) Then
                                                i = i + 1
                                                GoTo NextShapeInHeader
                                            Else
                                                Exit For
                                            End If
                                        End If
                                    End If
                                    
                                    ConvertHeaderFooter SourceFontFamily, TFontName
                                Next
                                
'                            Else
'                                oWordDoc.Sections(i).Headers(j).Range.Select
'                                Set HFSRange = oWordDoc.Sections(i).Headers(j).Range
'                                Selection.Start = oWordDoc.Sections(i).Headers(j).Range.Start
'                                Selection.End = oWordDoc.Sections(i).Headers(j).Range.Start
'                                ConvertHeaderFooter SourceFontFamilyNew, TFontName
                            End If
                            
                        End If
                        
                        If (oWordDoc.Sections(i).Footers(j).Exists) Then
                            
                            oWordDoc.Sections(i).Footers(j).Range.Select
                            Set HFSRange = oWordDoc.Sections(i).Footers(j).Range
                            Selection.Start = oWordDoc.Sections(i).Footers(j).Range.Start
                            Selection.End = oWordDoc.Sections(i).Footers(j).Range.Start
                            ConvertHeaderFooter SourceFontFamilyNew, TFontName
                            
                            If (oWordDoc.Sections(i).Footers(j).Shapes.Count > 0) Then
                                ShapeCount = oWordDoc.Sections(i).Footers(j).Shapes.Count
                                For k = 1 To ShapeCount
NextShapeInFooter:
                                    Set MyShape = oWordDoc.Sections(i).Footers(j).Shapes(k)
                                    'Set myRange = MyShape.TextFrame.TextRange
                                    Set HFSRange = MyShape.TextFrame.TextRange
                                    oWordDoc.Sections(i).Footers(j).Range.Select
'                                    MyShape.Select
'                                    oWordDoc.Sections(i).Headers(j).Shapes(k).Select
                                    HFSRange.Select
                                    
                                    Selection.Start = HFSRange.Start 'MyShape.TextFrame.TextRange.Start
                                    Selection.End = HFSRange.Start 'MyShape.TextFrame.TextRange.Start
                                    
                                    If MyShape.TextFrame.TextRange.Characters.Count <= 2 Then
                                        ch = MyShape.TextFrame.TextRange.Characters(1)
                                        If (Asc(ch) < 31) Then
                                            If (i < ShapeCount) Then
                                                i = i + 1
                                                GoTo NextShapeInFooter
                                            Else
                                                Exit For
                                            End If
                                        End If
                                    End If
                                    
                                    ConvertHeaderFooter SourceFontFamily, TFontName
                                Next
                                
                            End If
                            
                        End If
                        
                    Next
                        
                Next
                
           End If
           
           If (oWordDoc.Shapes.Count > 0) Then
                ShapeCount = oWordDoc.Shapes.Count
                For i = 1 To ShapeCount
NextShape:
                    Set MyShape = oWordDoc.Shapes(i)
                    'Set myRange = MyShape.TextFrame.TextRange
                    Set HFSRange = MyShape.TextFrame.TextRange
'                    MyShape.Select
                    HFSRange.Select
                    On Error Resume Next
                    Set HFSRange = MyShape.TextFrame.TextRange
                    If (Err.Number = 5917) Then
                        If (i < ShapeCount) Then
                            i = i + 1
                            Set HFSRange = Nothing
                            GoTo NextShape
                        Else
                            Exit For
                        End If
                    End If
                    Selection.Start = MyShape.TextFrame.TextRange.Start
                    Selection.End = MyShape.TextFrame.TextRange.Start
                    
                    If MyShape.TextFrame.TextRange.Characters.Count <= 2 Then
                        ch = MyShape.TextFrame.TextRange.Characters(1)
                        If (Asc(ch) < 31) Then
                            If (i < ShapeCount) Then
                                i = i + 1
                                GoTo NextShape
                            Else
                                Exit For
                            End If
                        End If
                    End If
                    
                    ConvertHeaderFooter SourceFontFamily, TFontName
                Next
'''''                For i = 1 To ShapeCount
'''''                    ConvertShape i, TFontName
'''''                Next
           End If
                            
           If (SectionCount > 0) Then
                
                On Error Resume Next
                oWordDoc.ActiveWindow.ActivePane.Close
                oWordDoc.ActiveWindow.Activate
                
           End If
           
           If (CheckBox2.Value = False) Then
                
'                Unload FrmStatus
                MsgBox "Conversion completed and file saved as " & DocName & ".", vbOKOnly, "Akruti Smart Converter"
                MsgBox "For all your Conversion needs from Any Language to Any other Language(Font Independent), " & Chr(13) & "Contact Cyberscape Multimdia Limited.  Ph: 022-27782779 URL: www.akruti.com", vbInformation, "Akruti Smart Font Converter Platinum"
                oWordDoc.Save
           Else
                
'                Unload FrmStatus
                MsgBox "Conversion completed.", vbOKOnly, "Akruti Smart Converter"
                MsgBox "For all your Conversion needs from Any Language to Any other Language(Font Independent), " & Chr(13) & "Contact Cyberscape Multimdia Limited.  Ph: 022-27782779 URL: www.akruti.com", vbInformation, "Akruti Smart Font Converter Platinum"
           End If
           
           oWordSelection.Start = oWordDoc.Content.Start '0
           oWordSelection.End = oWordDoc.Content.Start '0
'           ActiveWindow.ScrollIntoView Selection.Range, True
           Unload Me
           Exit Sub
        End If
        
        iTemp = oWordSelection.MoveStartUntil(Cset, wdBackward)
        If iTemp = 0 Then oWordSelection.Start = oWordDoc.Content.Start
        iTemp = oWordSelection.MoveEndUntil(Cset, wdForward)
        If iTemp = 0 Then oWordSelection.End = oWordDoc.Content.End
        
        Pt = oWordSelection.End
        
'        If (oWordSelection.Information(wdWithInTable) = False) Then
            If (oWordSelection.Start < ConvertedTill) Then
                oWordSelection.Start = ConvertedTill
            End If
'        End If
        
        If (iTemp > 1) Then
            ''''''''''''''''''''
            If (oWordSelection.Font.Name = "") Then
                '*** To get current font range 16/02/05*****
                oWordSelection.SelectCurrentFont
            End If
        End If

        If (Len(oWordSelection.Text) = 1) Then
            If (Asc(oWordSelection.Text) = 11 And oWordSelection.End < oWordDoc.Content.End - 2) Then
                oWordSelection.MoveRight Unit:=wdCharacter
                CharsConverted = CharsConverted + 1
                GoTo ContinueLoop
            End If
        End If
        '''''''''''''''''''''''''''''
        
        If iTemp = 1 Then
            n = Asc(oWordSelection.Text)
            
            If (n = 13) And (oWordSelection.Start = 0) Then
                oWordSelection.Start = 1
                flag = 1
                CharsConverted = CharsConverted + Len(oWordSelection.Text)
                GoTo ContinueLoop
            End If
            oWordSelection.Start = oWordSelection.End
            
            If (oWordSelection.Information(wdWithInTable) = True) Then
                oWordSelection.MoveRight Unit:=wdCharacter, Count:=1
                If (oWordSelection.Information(wdAtEndOfRowMarker) = False) Then
                    oWordSelection.MoveRight Unit:=wdCharacter, Count:=-1
                    oWordSelection.MoveRight Unit:=wdCharacter, Count:=1, Extend:=wdExtend
                    oWordSelection.Start = oWordSelection.End
                    If (oWordSelection.Information(wdAtEndOfRowMarker) = False) Then
                        oWordSelection.MoveRight Unit:=wdCharacter, Count:=-1
                        oWordSelection.MoveRight Unit:=wdCharacter, Count:=1, Extend:=wdExtend
                    End If
                End If
            Else
            
                '''''''''''''''''''''''''''''''''''''''''''''''''
                ' *** To take care of the character after comma
                If (oWordSelection.Start > ConvertedTill) Then
                    oWordSelection.Start = ConvertedTill
                    oWordSelection.End = ConvertedTill
                End If
                '''''''''''''''''''''''''''''''''''''''''''''''''
                oWordSelection.End = oWordSelection.End + 1
            End If
            If (InStr(1, oWordSelection.Font.Name, SourceFontFamilyNew) <> 0) Then
                If TargetFontFamily.Text <> "" Then
                    If (oWordSelection.Text >= Chr(65) And oWordSelection.Text <= Chr(91)) Or (oWordSelection.Text >= Chr(97) And oWordSelection.Text <= Chr(123)) Then
                        If EnglishFont = "LeaveItAsItIs" Then
                            CharsConverted = CharsConverted + Len(oWordSelection.Text)
                            GoTo ContinueLoop
                        End If
                        If (EnglishFont <> "") Then
                            oWordSelection.Font.Name = EnglishFont
                        ElseIf TargetFontT <> "" Then
                            If (FontType <> StrMono) Then '"MONO") Then
                                oWordSelection.Font.Name = TargetFontT
                            Else
                                oWordSelection.Font.Name = Font_TNR '"Times New Roman"
                            End If
                        Else
                            oWordSelection.Font.Name = Font_TNR '"Times New Roman"
                        End If
                    Else
                        If (oWordSelection.Text = "_" Or oWordSelection.Text = "#" Or oWordSelection.Text = "$" Or oWordSelection.Text = "%" Or oWordSelection.Text = "@") And (TargetFontFamily = "DV-TT") Then
                            If EnglishFont <> "" Then
                                oWordSelection.Font.Name = EnglishFont
                            Else
                                oWordSelection.Font.Name = Font_TNR '"Times New Roman"
                            End If
                            CharsConverted = CharsConverted + Len(oWordSelection.Text)
                            GoTo ContinueLoop
                        End If
                        If (TargetFontType <> StrMono) Then
                            oWordSelection.Font.Name = TFontName
                        ElseIf (Asc(oWordSelection.Text) = 32 Or Asc(oWordSelection.Text) = 13 Or Asc(oWordSelection.Text) = 9) Then
                            oWordSelection.Font.Name = TFontName
                        Else
                            oWordSelection.Font.Name = Font_TNR
                        End If
                         CharsConverted = CharsConverted + Len(oWordSelection.Text)
                         GoTo ContinueLoop
                    End If
                Else
                    oWordSelection.Font.Name = TFontName
                End If
                CharsConverted = CharsConverted + Len(oWordSelection.Text)
                oWordSelection.End = oWordSelection.End - 1
                GoTo ContinueLoop
            End If
        End If
        StrWord = oWordSelection.Text
        CharsConverted = CharsConverted + Len(StrWord)
        If (oWordSelection.Start = 0) And (iTemp = 1) Then
            oWordSelection.Start = 1
        End If
        
        If InStr(oWordSelection.Font.Name, SourceFontFamilyNew) = 0 Then
            GoTo ContinueLoop
        End If
        sTemp = Trim(StrWord)
        
        If (sTemp = Chr(1)) Then GoTo ContinueLoop
        
        If (Right(StrWord, 1) = Chr(11)) Then
            NewLine = True
        Else
            NewLine = False
        End If
        
        FontType = ""
        'If (SourceFontFamily.Text <> UnicodeFont And SourceFontFamily.Text <> StrIscii) Then
        If (DefaultSrcFFamily <> UnicodeFont And DefaultSrcFFamily <> TlgUnicodeFont And DefaultSrcFFamily <> StrIscii) Then
            'FontType = StrConv(GetFontType(SourceFontFamily.Text), vbUpperCase)
            FontType = StrConv(GetFontType(DefaultSrcFFamily), vbUpperCase)
            Pos = InStr(1, FontType, Chr(0))
            If (Pos > 0) Then FontType = Left(FontType, Pos - 1)
        Else
            FontType = StrBi '"BI"
        End If
        
        If (FontType = StrMono Or DefaultSrcFFamily = StrUnicode Or DefaultSrcFFamily = StrIscii) Then '"MONO") Then
            If (sTemp = "" Or (Len(sTemp) = 1 And Asc(sTemp) < 32)) Then GoTo ContinueLoop
            GoTo pr
        ElseIf (FontType = "ERROR") Then
            MsgBox "Some Error"
        End If
        
        'If sTemp Like "*[" & Chr(nStart_0) & "-" & Chr(nEnd_9) & "," & Chr(nStart_Acap) & "-" & Chr(nEnd_Zcap) & "," & Chr(nStart_a) & "-" & Chr(nEnd_z) & "]*" = True Then
        '    CharsConverted = CharsConverted + Len(oWordSelection.Text)
        '    GoTo ContinueLoop
        'End If
pr:     If (sTemp <> "") Then
            sNext = SourceToTarget(sTemp, TFontName)
            If SourceVendorT = StrUnicode Then '"Unicode" Then
                oWordSelection.Text = "aaa" ''' To clear the Language setting of the current word. Characters 178,179,185 have problems...
            End If
            If (NewLine = True) Then
                oWordSelection.Text = sNext & Chr(11)
                oWordSelection.End = oWordSelection.End - 1
            Else
                oWordSelection.Text = sNext
            End If
        End If
        
        oWordSelection.Font.Name = TFontName
        oWordSelection.Start = oWordSelection.End
        oWordSelection.End = oWordSelection.End + 1
        If (Len(oWordSelection.Text) = 1) Then
            'oWordSelection.Font.Name = TFontName
            If (InStr(1, oWordSelection.Font.Name, SourceFontFamily) = 0) Then
                oWordSelection.Font.Name = TFontName
            End If
'            oWordSelection.End = oWordSelection.End - 1
            oWordSelection.End = oWordSelection.End - 2
        Else
            oWordSelection.End = oWordSelection.Start
        End If
        StrWord = oWordSelection.Text
'        nICO = nICO + 1
'        If (nICO = 2) Then
'            If (ForICO = 0) Then
'                FrmStatus.Label1.Caption = Status1
'                ForICO = ForICO + 1
'            ElseIf (ForICO = 1) Then
'                FrmStatus.Label1.Caption = Status2
'                ForICO = ForICO + 1
'            ElseIf (ForICO = 2) Then
'                FrmStatus.Label1.Caption = Status3
'                ForICO = 0
'            End If
'            nICO = 0
'            DoEvents
'        End If

    Loop While StrWord <> ""
End Sub

Function SourceToTarget(ByVal sTemp As String, ByVal TargetFontName As String) As String

    Iscii = ""
    If (DefaultSrcFFamily = UnicodeFont) Then
        Iscii = UniToIsc(sTemp)
    ElseIf (DefaultSrcFFamily = TlgUnicodeFont) Then
        Iscii = TlgUniToIsc(sTemp)
    Else
        Iscii = DevToIscii(sTemp, DefaultSrcFFamily) 'SourceFontFamily)
    End If
    
    ch = Chr(0)
    n = InStr(1, Iscii, ch)
    If (n <> 0) Then
        Iscii = Left(Iscii, n - 1)
    End If
    
    If (DefaultTgtFFamily = UnicodeFont Or DefaultTgtFFamily = StrUnicode) Then 'TargetFontFamily.Text = UnicodeFont) Then
        sNext = IscToUni(Iscii)
    ElseIf (DefaultTgtFFamily = TlgUnicodeFont) Then 'TargetFontFamily.Text = UnicodeFont) Then
        sNext = IscToTlgUni(Iscii)
    Else
        sNext = IsciiToDev(Iscii, DefaultTgtFFamily) 'TargetFontName) 'TargetFontFamily.Text)
    End If
    'ch = Chr(0)
    n = InStr(1, sNext, ch)
    If (n <> 0) Then
        sNext = Left(sNext, n - 1)
    End If
    
    SourceToTarget = sNext

End Function

Private Sub CommandButton6_Click()
Dim lRetVal As Long
Dim pChooseFont As CHOOSEFONT
Dim pLogFont As LOGFONT
Dim FontName As String
Dim Size As Integer

    CommandButton6.Enabled = False
    With pChooseFont
        '.hInstance = App.hInstance
        .hwndOwner = hWnd
        .flags = CF_BOTH
        .iPointSize = Size * 10
        .lStructSize = Len(pChooseFont)
        .lpLogFont = VarPtr(pLogFont)
    End With
    
    lRetVal = CHOOSEFONT(pChooseFont)
    
    If lRetVal = 1 Then
        FontName = StrConv(pLogFont.lfFaceName, vbUnicode)
        FontName = Left(FontName, InStr(1, FontName, vbNullChar) - 1)
        fonttarget.Text = FontName
        TargetFontT = FontName
        TextBox2.Text = FontName
    Else
        fonttarget.Text = ""
        TargetFontT = ""
        TextBox2.Text = ""
    End If
    CommandButton6.Enabled = True
    
End Sub


Private Sub SourceFontFamily_Change()
    SourceFontFamilyT = SourceFontFamily.Text
    If (SourceFontFamily.Text = SrcFFamily And SrcFont <> "-1") Then
        TextBox3.Text = SrcFont
    Else
        TextBox3.Text = ""
    End If
End Sub

Private Sub SourceVendor_Click()
    Form_Setting
    SourceFontFamily.ListIndex = 0
    SourceVendorT = SourceVendor.Text
    If (SourceFontFamily.Text = SrcFFamily And SrcFont <> "-1") Then
        TextBox3.Text = SrcFont
    Else
        TextBox3.Text = ""
    End If
End Sub

Private Sub TargetFontFamily_Change()
    TargetFontFamily = TargetFontFamily.Text
    If TargetFontFamily = "AkrutiDev" Or TargetFontFamily = "DV-TT" Or TargetVendor = "Unicode" Or TargetFontFamily = "APS-DV" Or TargetFontFamily = "DVW-TT" Then
        EnglishFont.Clear
        EnglishFont.AddItem "Arial"
        EnglishFont.AddItem "TimesNewRoman"
        EnglishFont.AddItem "LeaveItAsItIs"
        EnglishFont.ListIndex = 0
    End If
    If (TargetFontFamily.Text = TrgtFFamily And TrgtFont <> "-1") Then
        TextBox2.Text = TrgtFont
    Else
        TextBox2.Text = ""
    End If
End Sub

Private Sub TargetVendor_Click()
    TargetFontFamilySetting
    TargetVendorT = TargetVendor.Text
    TargetFontFamily.ListIndex = 0
    If (TargetFontFamily.Text = TrgtFFamily And TrgtFont <> "-1") Then
        TextBox2.Text = TrgtFont
    Else
        TextBox2.Text = ""
    End If
End Sub

Private Sub TextBox2_Change()
    TargetFontT = TextBox2.Text
End Sub

Private Sub TextBox3_Change()
    SourceFontT = TextBox3.Text
End Sub

Private Sub UserForm_Activate()

End Sub

Private Sub UserForm_Initialize()
    
    Dim ltype As Long
    Dim keydata As String * 255
    Dim lsize As Long
    Dim ln As String
    Dim keyVal As String * 80
    Dim n As Integer
    Dim i As Integer
    Dim j As Integer
    Dim KeyName As String
    Dim SectionName As String
    Dim p As Integer
    Dim Offset As Integer
    Dim CurrPos As Integer
    Dim VendorList As String
    Dim Vendor As String
    
    DisplayInfoPr = False
    
    AkBilCSet = " .,'`;:!@#%^&*()+\=-[]_<>?1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" & Chr(7) & Chr(9) & Chr(10) & Chr(11) & Chr(12) & Chr(13) & Chr(47) & Chr(34)
    
    lsize = 254
    ltype = REG_SZ
    keydata = String(255, " ")
    Path = RegOpenKeyEx(HKEY_LOCAL_MACHINE, "Software\AkTelugu", 0, KEY_QUERY_VALUE, a)
    Path = RegQueryValueEx(a, "Directory", 0, ltype, keydata, lsize)
    
    Path = Left(keydata, lsize - 1)
    Path = RTrim(Path)
    
    If (Mid(Path, Len(Path) - 1) <> "\") Then
        Path = Path & "\"
    End If
    
    IniFile = (Path & "AkSFConvCfg.ini")
    
    LoadAKCharset
   
    nStart_0 = 48
    nEnd_9 = 57
    nStart_Acap = 65
    nEnd_Zcap = 90
    nStart_a = 97
    nEnd_z = 122
    
   
      ''''''''''''''''''''''''''''''''''''''''''''''''''''''
    VendorList = GetVendorList
    CommaPos = InStr(1, VendorList, Chr(0))
    If (CommaPos > 0) Then VendorList = Left(VendorList, CommaPos - 1)
    
    If (Trim(VendorList) <> "") Then
        CommaPos = InStr(1, VendorList, ",")
        Vendor = Mid(VendorList, 1, CommaPos - 1)
        SourceVendor.AddItem "(All)"
        TargetVendor.AddItem "(All)"
        Do While Vendor <> ""
            SourceVendor.AddItem Vendor
            TargetVendor.AddItem Vendor
            PrevComma = CommaPos
            CommaPos = InStr(PrevComma + 1, VendorList, ",")
            If (CommaPos = 0) Then CommaPos = Len(VendorList)
            Vendor = Mid(VendorList, PrevComma + 1, CommaPos - PrevComma)
            If (Right(Vendor, 1) = ",") Then Vendor = Left(Vendor, Len(Vendor) - 1)
        Loop
        SourceVendor.AddItem StrUnicode, 2
        TargetVendor.AddItem StrUnicode, 2
    End If
        
    a = GetPrivateProfileString("FontInfo", "SourceVendor", "-1", keyVal, 80, IniFile)
    SrcVendor = Left(keyVal, a)
    If (SrcVendor <> "-1") Then
        a = GetPrivateProfileString("FontInfo", "SourceFontFamily", "-1", keyVal, 80, IniFile)
        SrcFFamily = Left(keyVal, a)
        If (SrcFFamily <> "-1") Then
            SourceVendor.Text = SrcVendor
            SourceFontFamily.Text = SrcFFamily
        End If
        a = GetPrivateProfileString("FontInfo", "SourceFont", "-1", keyVal, 80, IniFile)
        SrcFont = Left(keyVal, a)
        If (SrcFont <> "-1" And SrcFont <> "") Then TextBox3.Text = SrcFont
    End If
    
    a = GetPrivateProfileString("FontInfo", "TargetVendor", "-1", keyVal, 80, IniFile)
    TrgtVendor = Left(keyVal, a)
    If (TrgtVendor <> "-1") Then
        a = GetPrivateProfileString("FontInfo", "TargetFontFamily", "-1", keyVal, 80, IniFile)
        TrgtFFamily = Left(keyVal, a)
        If (TrgtFFamily <> "-1") Then
            TargetVendor.Text = TrgtVendor
            TargetFontFamily.Text = TrgtFFamily
        End If
        a = GetPrivateProfileString("FontInfo", "TargetFont", "-1", keyVal, 80, IniFile)
        TrgtFont = Left(keyVal, a)
        If (TrgtFont <> "-1" And TrgtFont <> "") Then TextBox2.Text = TrgtFont
    End If
    
    a = GetPrivateProfileString("FontInfo", "ConvertInSame", "-1", keyVal, 80, IniFile)
    CheckFlag = Left(keyVal, a)
    If (CheckFlag = True) Then
        CheckBox2.Value = True
    Else
        CheckBox2.Value = False
    End If
    
End Sub

Private Sub Form_Setting()
    Dim DisplayVal As String
    Dim StartPos As Integer
    Dim EndPos As Integer
    Dim ZeroPos As Integer
    Dim FontFamilyList As String
    Dim i As Integer
    Dim Found As Boolean
    
'    ''''''' source font family setting'''''''''''''
    If (SourceVendor.Text = "(All)") Then
        
        FontFamilyList = GetFontFamilyList

        ZeroPos = InStr(1, FontFamilyList, Chr(0))
        If (ZeroPos > 0) Then FontFamilyList = Left(FontFamilyList, ZeroPos - 1)

        CommaPos = InStr(1, FontFamilyList, ",")
        FontFamily = Mid(FontFamilyList, 1, CommaPos - 1)
        SourceFontFamily.Clear
        Do While FontFamily <> ""
            Found = False
            If (SourceFontFamily.ListCount > 0) Then
                For i = 0 To SourceFontFamily.ListCount - 1
                    If (SourceFontFamily.List(i) = FontFamily) Then
                        Found = True
                        Exit For
                    End If
                Next
            End If
            
            If (Found = False) Then SourceFontFamily.AddItem FontFamily
            
            If (Added = False And InStr(1, FontFamily, StrAkruti) > 0) Then '"Akruti") > 0) Then
                SourceFontFamily.AddItem StrIscii
                SourceFontFamily.AddItem TlgUnicodeFont
                SourceFontFamily.AddItem UnicodeFont
                Added = True
            End If
            PrevComma = CommaPos
            CommaPos = InStr(PrevComma + 1, FontFamilyList, ",")
            If (CommaPos = 0) Then CommaPos = Len(FontFamilyList)
            FontFamily = Mid(FontFamilyList, PrevComma + 1, CommaPos - PrevComma)
            If (Right(FontFamily, 1) = ",") Then FontFamily = Left(FontFamily, Len(FontFamily) - 1)
        Loop
        'SourceFontFamily.AddItem StrUnicode, 2
        If (TagFound = True And TagValFound = True) Then
            For i = 0 To UBound(DisplayName) - 1
                SourceFontFamily.AddItem DisplayName(i)
            Next i
        End If

    ElseIf (SourceVendor.Text = StrUnicode) Then
        SourceFontFamily.Clear
        ''''''''''''''''''''''''''''''Telugu Font
        SourceFontFamily.AddItem TlgUnicodeFont
        ''''''''''''''''''''''''''''''
        SourceFontFamily.AddItem UnicodeFont
        
    Else
        FontFamilyList = GetVendorFFamilyList(SourceVendor.Text)

        ZeroPos = InStr(1, FontFamilyList, Chr(0))
        If (ZeroPos > 0) Then FontFamilyList = Left(FontFamilyList, ZeroPos - 1)

        CommaPos = InStr(1, FontFamilyList, ",")
        If (CommaPos = 0) Then CommaPos = Len(FontFamilyList) + 1
        FontFamily = Mid(FontFamilyList, 1, CommaPos - 1)
        SourceFontFamily.Clear
        
        If (Added = False And InStr(1, FontFamily, StrAkruti) > 0) Then '"Akruti") > 0) Then
            SourceFontFamily.AddItem StrIscii
            Added = True
        End If
    
        If (FontFamily = FontFamilyList) Then
            SourceFontFamily.AddItem FontFamily
            FontFamily = ""
        Else
            Do While FontFamily <> ""
                Found = False
                If (SourceFontFamily.ListCount > 0) Then
                    For i = 0 To SourceFontFamily.ListCount - 1
                        If (SourceFontFamily.List(i) = FontFamily) Then
                            Found = True
                            Exit For
                        End If
                    Next
                End If
                
                If (Found = False) Then SourceFontFamily.AddItem FontFamily

                PrevComma = CommaPos
                CommaPos = InStr(PrevComma + 1, FontFamilyList, ",")
                If (CommaPos = 0) Then CommaPos = Len(FontFamilyList)
                FontFamily = Mid(FontFamilyList, PrevComma + 1, CommaPos - PrevComma)
                If (Right(FontFamily, 1) = ",") Then FontFamily = Left(FontFamily, Len(FontFamily) - 1)
            Loop
        End If
    End If
    
End Sub

Private Sub TargetFontFamilySetting()

    Dim DisplayVal As String
    Dim StartPos As Integer
    Dim EndPos As Integer
    Dim CommaPos As Integer
    Dim Found As Boolean

'    ''''''''target fonr family setting

    If (TargetVendor.Text = "(All)") Then
        FontFamilyList = GetFontFamilyList
        CommaPos = InStr(1, FontFamilyList, Chr(0))
        If (CommaPos > 0) Then FontFamilyList = Left(FontFamilyList, CommaPos - 1)
        CommaPos = InStr(1, FontFamilyList, ",")
        FontFamily = Mid(FontFamilyList, 1, CommaPos - 1)
        TargetFontFamily.Clear
        Do While FontFamily <> ""
            Found = False
            If (TargetFontFamily.ListCount > 0) Then
                For i = 0 To TargetFontFamily.ListCount - 1
                    If (TargetFontFamily.List(i) = FontFamily) Then
                        Found = True
                        Exit For
                    End If
                Next
            End If
            
            If (Found = False) Then TargetFontFamily.AddItem FontFamily
            
            If (Added = False And InStr(1, FontFamily, StrAkruti) > 0) Then '"Akruti") > 0) Then
                TargetFontFamily.AddItem StrIscii
                TargetFontFamily.AddItem TlgUnicodeFont
                TargetFontFamily.AddItem UnicodeFont
                Added = True
            End If
            PrevComma = CommaPos
            CommaPos = InStr(PrevComma + 1, FontFamilyList, ",")
            If (CommaPos = 0) Then CommaPos = Len(FontFamilyList)
            FontFamily = Mid(FontFamilyList, PrevComma + 1, CommaPos - PrevComma)
            If (Right(FontFamily, 1) = ",") Then FontFamily = Left(FontFamily, Len(FontFamily) - 1)
        Loop
        If (TagFound = True And TagValFound = True) Then
            For i = 0 To UBound(DisplayName) - 1
                TargetFontFamily.AddItem DisplayName(i)
            Next i
        End If

        'SourceFontFamily.AddItem StrUnicode, 2
    ElseIf (TargetVendor.Text = StrUnicode) Then
        TargetFontFamily.Clear
        TargetFontFamily.AddItem UnicodeFont

        ''''''''''''''''''''''''''''''Telugu Font
        TargetFontFamily.AddItem TlgUnicodeFont
        ''''''''''''''''''''''''''''''
    Else
        FontFamilyList = GetVendorFFamilyList(TargetVendor.Text)
        CommaPos = InStr(1, FontFamilyList, Chr(0))
        If (CommaPos > 0) Then FontFamilyList = Left(FontFamilyList, CommaPos - 1)
        
        CommaPos = InStr(1, FontFamilyList, ",")
        If (CommaPos = 0) Then CommaPos = Len(FontFamilyList) + 1
        FontFamily = Mid(FontFamilyList, 1, CommaPos - 1)
        TargetFontFamily.Clear
        
        If (Added = False And InStr(1, FontFamily, StrAkruti) > 0) Then '"Akruti") > 0) Then
            TargetFontFamily.AddItem StrIscii
            Added = True
        End If

        If (FontFamily = FontFamilyList) Then
            TargetFontFamily.AddItem FontFamily
            FontFamily = ""
        Else
            Do While FontFamily <> ""
                Found = False
                If (TargetFontFamily.ListCount > 0) Then
                    For i = 0 To TargetFontFamily.ListCount
                        If (TargetFontFamily.List(i) = FontFamily) Then
                            Found = True
                            Exit For
                        End If
                    Next
                End If
                
                If (Found = False) Then TargetFontFamily.AddItem FontFamily
                'TargetFontFamily.AddItem FontFamily
                PrevComma = CommaPos
                CommaPos = InStr(PrevComma + 1, FontFamilyList, ",")
                If (CommaPos = 0) Then CommaPos = Len(FontFamilyList)
                FontFamily = Mid(FontFamilyList, PrevComma + 1, CommaPos - PrevComma)
                If (Right(FontFamily, 1) = ",") Then FontFamily = Left(FontFamily, Len(FontFamily) - 1)
            Loop
        End If
    End If
End Sub

Private Function ReplaceAKChar(ByVal s As String) As String
    Dim j As Integer
    For j = 0 To AKCharCount
        If (StrComp(s, UniChars(j), vbBinaryCompare) = 0) Then
            ReplaceAKChar = AKChars(j)
            Exit Function
        End If
    Next j
    ReplaceAKChar = s
End Function

Private Function UniToIsc(wordUni As String) As String
    Dim ln As Integer
    Dim wordAK As String
    
    wordAK = ""
    ln = Len(wordUni)
    
    For i = 1 To ln
        charUni = Mid(wordUni, i, 1)
        charAk = ReplaceAKChar(charUni)
        wordAK = wordAK & charAk
        DoEvents
    Next i
    UniToIsc = wordAK
    
End Function

'**** IsciiToUnicode Function****
Private Function IscToUni(wordIsc As String) As String
    Dim ln As Long 'Integer
    Dim wordUni As String
    Dim charAk As String
    Dim charUni As String
    If bCharSetLoaded = False Then LoadAKCharset
    wordUni = ""
    ln = Len(wordIsc)
    If (wordIsc = AKChars(73)) Then
        wordUni = UniChars(73)
    Else
        For i = 1 To ln
            charAk = Mid(wordIsc, i, 1)
            charUni = ReplaceUniChar(charAk)
            wordUni = wordUni & charUni
            DoEvents
        Next i
    End If
    IscToUni = wordUni
    
End Function

Private Function ReplaceUniChar(ByVal s As String) As String
    Dim j As Integer
    For j = 0 To AKCharCount
        If (StrComp(s, AKChars(j), vbBinaryCompare) = 0) Then
            ReplaceUniChar = UniChars(j)
            Exit Function
        End If
    Next j
    ReplaceUniChar = s
End Function

''''''''''''''''''''Punjabi Unicode''''''''''''''''''''''''''

'**** IsciiToPnjUnicode Function****
Private Function IscToTlgUni(wordIsc As String) As String
    Dim ln As Long 'Integer
    Dim wordUni As String
    Dim charAk As String
    Dim charUni As String
    If bCharSetLoaded = False Then LoadAKCharset
    wordUni = ""
    ln = Len(wordIsc)
    If (wordIsc = AKChars(73)) Then
        wordUni = TlgUniChars(73)
    Else
        For i = 1 To ln
            charAk = Mid(wordIsc, i, 1)
            charUni = ReplaceTlgUniChar(charAk)
            wordUni = wordUni & charUni
            DoEvents
        Next i
    End If
    
    IscToTlgUni = wordUni
    
End Function

Private Function ReplaceTlgUniChar(ByVal s As String) As String
    Dim j As Integer
    For j = 0 To AKCharCount
        If (StrComp(s, AKChars(j), vbBinaryCompare) = 0) Then
            ReplaceTlgUniChar = TlgUniChars(j)
            Exit Function
        End If
    Next j
    ReplaceTlgUniChar = s
End Function

Private Function TlgUniToIsc(wordUni As String) As String
    Dim ln As Integer
    Dim wordAK As String
    
    wordAK = ""
    ln = Len(wordUni)
    
    For i = 1 To ln
        charUni = Mid(wordUni, i, 1)
        charAk = PnjReplaceAKChar(charUni)
        wordAK = wordAK & charAk
        DoEvents
    Next i
    TlgUniToIsc = wordAK
    
End Function

Private Function PnjReplaceAKChar(ByVal s As String) As String
    Dim j As Integer
    For j = 0 To AKCharCount
        If (StrComp(s, TlgUniChars(j), vbBinaryCompare) = 0) Then
            PnjReplaceAKChar = AKChars(j)
            Exit Function
        End If
    Next j
    PnjReplaceAKChar = s
End Function


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Private Sub ConvertHeaderFooter(ByVal SourceFontFamily As String, ByVal TFontName As String)

    Dim iTemp As Long
    Dim sTemp As String
    Dim flag As Integer
    Dim Pt As Long 'Integer
    Dim SourceFontFamilyNew As String
    Dim StrWord As String
    Dim NewLine As Boolean
    Dim FontType As String
    Dim TargetFontType As String
    Dim Pos As Integer
'    Dim ShapeCount As Integer
    '''''''''''''''''''
    
    'Added on 22/01/05 to limit selection to only one font at a time
    Dim EndPoint As Long 'Integer
    Dim ConvertedTill As Long 'Integer
    Dim EndOfRow As Boolean
    Dim ch As String

    Dim myRange As Range
    
    If (TFontName <> StrIscii And TFontName <> UnicodeFont And TFontName <> TlgUnicodeFont) Then
        TargetFontType = GetFontType(TFontName) 'TargetFontFamily.Text)
        Pos = InStr(1, TargetFontType, Chr(0))
        If (Pos > 0) Then TargetFontType = Left(TargetFontType, Pos - 1)
        
    ElseIf (TFontName = UnicodeFont And TFontName = TlgUnicodeFont) Then
        TargetFontType = StrMono
    Else
        TargetFontType = StrBi
    End If
   
    Do
        If (StopFlag = True) Then
            Exit Sub
        End If
    
ContinueLoop:
            
        If (Selection.Information(wdWithInTable) = True) Then
                ConvertedTill = Selection.End
                Selection.MoveRight Unit:=wdCharacter
                'If (Selection.Start < ConvertedTill) Then Selection.MoveDown
        ElseIf (Selection.Start <> 0 And Selection.End <> 0) Then
                'in tables with vertically merged cells moving from a cell results in
                'selecting the next (merged) cell in the previous row which is already
                'processed. When setting the Selection.Start to Selection.End if the
                'value is changed (reduced here...) set it manually - Mahesh 16-11-04
                Selection.Start = Selection.End
                Selection.End = Selection.Start
                ''''Last point of conversion
                ConvertedTill = Selection.End
        End If
        
        If (Selection.End >= HFSRange.End - 1) Then Exit Sub
        iTemp = Selection.MoveStartUntil(Cset, wdBackward)
        If iTemp = 0 Then Selection.Start = ActiveDocument.Content.Start
        iTemp = Selection.MoveEndUntil(Cset, wdForward)
        If iTemp = 0 Then Selection.End = ActiveDocument.Content.End
        
        Pt = Selection.End
        
        If (Selection.Information(wdWithInTable) = False) Then
            If (Selection.Start < ConvertedTill) Then
                Selection.Start = ConvertedTill
            End If
        End If
        
        If (iTemp > 1) Then
            ''''''''''''''''''''
            If (Selection.Font.Name = "") Then
                '*** To get current font range 16/02/05*****
                Selection.SelectCurrentFont
            End If
        End If

        If (Len(Selection.Text) = 1) Then
            If (Asc(Selection.Text) = 11 And Selection.End < ActiveDocument.Content.End - 2) Then
                Selection.MoveRight Unit:=wdCharacter
                CharsConverted = CharsConverted + 1
                GoTo ContinueLoop
            End If
        End If
        '''''''''''''''''''''''''''''
        
        If iTemp = 1 Then
            n = Asc(Selection.Text)
            
            If (n = 13) And (Selection.Start = 0) Then
                Selection.Start = 1
                flag = 1
                CharsConverted = CharsConverted + Len(Selection.Text)
                GoTo ContinueLoop
            End If
            Selection.Start = Selection.End
            
            If (Selection.Information(wdWithInTable) = True) Then
                
                Selection.MoveRight Unit:=wdCharacter, Count:=1
                If (Selection.Information(wdAtEndOfRowMarker) = False) Then
                    Selection.MoveRight Unit:=wdCharacter, Count:=-1
                    Selection.MoveRight Unit:=wdCharacter, Count:=1, Extend:=wdExtend
                    Selection.Start = Selection.End
                    If (Selection.Information(wdAtEndOfRowMarker) = False) Then
                        Selection.MoveRight Unit:=wdCharacter, Count:=-1
                        Selection.MoveRight Unit:=wdCharacter, Count:=1, Extend:=wdExtend
                    End If
                End If
                
            Else
            
                '''''''''''''''''''''''''''''''''''''''''''''''''
                ' *** To take care of the character after comma
                If (Selection.Start > ConvertedTill) Then
                    Selection.Start = ConvertedTill
                    Selection.End = ConvertedTill
                End If
                '''''''''''''''''''''''''''''''''''''''''''''''''
                Selection.End = Selection.End + 1
                
            End If
            If (InStr(1, Selection.Font.Name, SourceFontFamily) <> 0) Then
                If TargetFontFamily.Text <> "" Then
                    If (Selection.Text >= Chr(65) And Selection.Text <= Chr(91)) Or (Selection.Text >= Chr(97) And Selection.Text <= Chr(123)) Then
                        If EnglishFont = "LeaveItAsItIs" Then
                            CharsConverted = CharsConverted + Len(Selection.Text)
                            GoTo ContinueLoop
                        End If
                        If (EnglishFont <> "") Then
                            Selection.Font.Name = EnglishFont
                        ElseIf TargetFontT <> "" Then
                            If (FontType <> StrMono) Then '"MONO") Then
                                Selection.Font.Name = TargetFontT
                            Else
                                Selection.Font.Name = Font_TNR '"Times New Roman"
                            End If
                        Else
                            Selection.Font.Name = Font_TNR '"Times New Roman"
                        End If
                    Else
                        If (Selection.Text = "_" Or Selection.Text = "#" Or Selection.Text = "$" Or Selection.Text = "%" Or Selection.Text = "@") And (TargetFontFamily = "DV-TT") Then
                            If EnglishFont <> "" Then
                                Selection.Font.Name = EnglishFont
                            Else
                                Selection.Font.Name = Font_TNR '"Times New Roman"
                            End If
                            CharsConverted = CharsConverted + Len(Selection.Text)
                            GoTo ContinueLoop
                        End If
                        If (TargetFontType <> StrMono) Then
                            Selection.Font.Name = TFontName
                        Else
                            Selection.Font.Name = Font_TNR
                        End If
                         CharsConverted = CharsConverted + Len(Selection.Text)
                         GoTo ContinueLoop
                    End If
                Else
                    Selection.Font.Name = TFontName
                End If
                CharsConverted = CharsConverted + Len(Selection.Text)
                Selection.End = Selection.End - 1
                GoTo ContinueLoop
            End If
        End If
        StrWord = Selection.Text
        CharsConverted = CharsConverted + Len(StrWord)
        If (Selection.Start = 0) And (iTemp = 1) Then
            Selection.Start = 1
        End If
        
        If InStr(Selection.Font.Name, SourceFontFamily) = 0 Then
            GoTo ContinueLoop
        End If
        sTemp = Trim(StrWord)
        If (Right(StrWord, 1) = Chr(11)) Then
            NewLine = True
        Else
            NewLine = False
        End If
        
        FontType = ""
        If (SourceFontFamily <> UnicodeFont And SourceFontFamily <> StrIscii And SourceFontFamily <> TlgUnicodeFont) Then
            FontType = StrConv(GetFontType(SourceFontFamily), vbUpperCase)
            Pos = InStr(1, FontType, Chr(0))
            If (Pos > 0) Then FontType = Left(FontType, Pos - 1)
        Else
            FontType = StrBi '"BI"
        End If
        
        If (FontType = StrMono Or SourceFontFamily = StrUnicode Or SourceFontFamily = StrIscii) Then '"MONO") Then
            GoTo pr
        ElseIf (FontType = "ERROR") Then
            MsgBox "Some Error"
        End If
        
pr:     If (sTemp <> "") Then
            sNext = SourceToTarget(sTemp, TFontName)
            If SourceVendorT = StrUnicode Then '"Unicode" Then
                Selection.Text = "aaa" ''' To clear the Language setting of the current word. Characters 178,179,185 have problems...
            End If
            If (NewLine = True) Then
                Selection.Text = sNext & Chr(11)
                Selection.End = Selection.End - 1
            Else
                Selection.Text = sNext
            End If
        End If
        
        Selection.Font.Name = TFontName
        Selection.Start = Selection.End
        Selection.End = Selection.End + 1
        If (Len(Selection.Text) = 1) Then
            'Selection.Font.Name = TFontName
            If (InStr(1, oWordSelection.Font.Name, SourceFontFamily) = 0) Then
                oWordSelection.Font.Name = TFontName
            End If
            Selection.End = Selection.End - 1
        Else
            Selection.End = Selection.Start
        End If
        StrWord = Selection.Text

    Loop While Not HFSRange.End
End Sub


Attribute VB_Name = "FrmStatus"
Attribute VB_Base = "0{6065B6D0-3990-4A1F-9F15-753FF77687E8}{823697B3-4380-48B0-A40D-3C8FF5DBA82A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CmdStop_Click()
    StopFlag = True
    Unload Me
End Sub
Attribute VB_Name = "Module1"

Public DocName As String
Public TotalPages As Integer
Public CurrentPage As Integer
Public StopFlag As Boolean


Public Declare Function DevToIscii Lib "AkTlgISCII.dll" (ByVal StrIn As String, ByVal FontFamily As String) As String
Public Declare Function IsciiToDev Lib "AkTlgISCII.dll" (ByVal StrIn As String, ByVal FontFamily As String) As String
Public Declare Function GetFontFamilyList Lib "AkTlgISCII.dll" () As String
Public Declare Function GetDefaultFont Lib "AkTlgISCII.dll" (ByVal FontFamily As String) As String
Public Declare Function GetVendorList Lib "AkTlgISCII.dll" () As String
Public Declare Function GetVendorFFamilyList Lib "AkTlgISCII.dll" (ByVal StrVendor As String) As String
Public Declare Function GetCSet Lib "AkTlgISCII.dll" (ByVal StrFont As String) As String
Public Declare Function GetFontType Lib "AkTlgISCII.dll" (ByVal StrFont As String) As String
Public Declare Function GetDisplayNameFFamily Lib "AkTlgISCII.dll" (ByVal StrDispName As String) As String

Public Const StrUnicode As String = "Unicode"
Public Const UnicodeFont As String = "Mangal"
Public Const TlgUnicodeFont As String = "Gautami"
Public Const StrIscii As String = "IsciiDev"
Public Const Font_TNR As String = "Times New Roman"
Public Const StrMono As String = "MONO"
Public Const StrBi As String = "BI"
Public Const StrAkruti As String = "Akruti"

Public IniFile As String

Public Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, ByVal lpData As String, lpcbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
Public Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
Public Const HKEY_LOCAL_MACHINE = &H80000002
Public Const KEY_QUERY_VALUE = &H1
Public Const REG_SZ = 1
Public Path As String

Public Declare Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long
Public Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
Public DisplayName() As String
Public DisplayFFamily() As String
Public Pos() As Integer

Public DefaultSrcFFamily As String
Public DefaultTgtFFamily As String
Public tags() As String
Public TagFound As Boolean
Public TagValFound As Boolean
Public DisplayInfoPr As Boolean

Public FontList() As String
Public IsSupported() As Boolean
Public FlagConvert() As Boolean

Public Sub test()
    'MsgBox ActiveDocument.Content.Information(wdHeaderFooterType)
    Dim myRange As Range
    Dim oWordDoc As Word.Document
    Dim f As Frame
    Dim n As Integer
    Dim fCount As Integer
    
    Set myRange = ActiveDocument.Content
    Set oWordDoc = Word.ActiveDocument
'    MsgBox myRange.Information(wdHeaderFooterType)
'    Set f = oWordDoc.Frames
    ''''clue for header footer
    MsgBox ActiveDocument.Sections.Count
    MsgBox ActiveDocument.Sections(1).Headers.Count
    MsgBox ActiveDocument.Sections(1).Headers(1).Range.MoveStart
'    ActiveDocument.Sections(1).Headers(1).Range.StartOf Unit:=wdParagraph, Extend:=wdMove
    MsgBox ActiveDocument.Sections(1).Headers(1).Exists
    MsgBox ActiveDocument.Sections(1).Headers(2).Exists
    MsgBox ActiveDocument.Sections(1).Headers(3).Exists
    ActiveDocument.Sections(1).Headers(3).Range.Select
    Selection.Start = ActiveDocument.Sections(1).Headers(3).Range.Start
    Selection.End = ActiveDocument.Sections(1).Headers(3).Range.Start
'    MsgBox oWordDoc.Sections(1).Footers(wdHeaderFooterFirstPage).Exists
    MsgBox oWordDoc.Name
    MsgBox oWordDoc.Sections.Count & " is Section Count"
    n = oWordDoc.Sections.Count
    
    For i = 1 To n
        MsgBox oWordDoc.Sections(i).Range.Frames.Count & " Frame Count" & i
        fCount = oWordDoc.Sections(i).Range.Frames.Count
        For Each f In oWordDoc.Sections(i).Range.Frames
            f.Select
        Next
    Next
    'Word.ActiveWindow.ScrollIntoView
    'Word.ActiveWindow.WindowNumber
    
    'MsgBox oWordDoc.Count
'    MsgBox f.Count
'    f.Item(1).Select
End Sub

Attribute VB_Name = "Module2"
Global UniChars(100) As String
Global AKChars(100) As String
Global AKCharCount As Integer
Global UnicodeFonts() As String
Global TlgUniChars(100) As String

Public Sub LoadAKCharset()

'' In both the charactersets equivalent characters must be at the same
'' subscript arrary value. If the place of one character is changed, it
'' must be reflected in both arrays, otherwise conversion will not be
'' proper.

AKCharCount = 73

'**** Unicode Charecterset ****

    UniChars(0) = ChrW(2305)
    UniChars(1) = ChrW(2306)
    UniChars(2) = ChrW(2307)
    UniChars(3) = ChrW(2309)
    UniChars(4) = ChrW(2310)
    UniChars(5) = ChrW(2311)
    UniChars(6) = ChrW(2312)
    UniChars(7) = ChrW(2313)
    UniChars(8) = ChrW(2314)
    UniChars(9) = ChrW(2315)
    UniChars(10) = ChrW(2318) 'ChrW(2320)
    UniChars(11) = ChrW(2319)
    UniChars(12) = ChrW(2319) 'ChrW(2318)
    UniChars(13) = ChrW(2320)
    UniChars(14) = ChrW(2317)
    UniChars(15) = ChrW(2322)
    UniChars(16) = ChrW(2323)
    UniChars(17) = ChrW(2324)
    UniChars(18) = ChrW(2321)
    UniChars(19) = ChrW(2325)
    UniChars(20) = ChrW(2326)
    UniChars(21) = ChrW(2327)
    UniChars(22) = ChrW(2328)
    UniChars(23) = ChrW(2329)
    UniChars(24) = ChrW(2330)
    UniChars(25) = ChrW(2331)
    UniChars(26) = ChrW(2332)
    UniChars(27) = ChrW(2333)
    UniChars(28) = ChrW(2334)
    UniChars(29) = ChrW(2335)
    UniChars(30) = ChrW(2336)
    UniChars(31) = ChrW(2337)
    UniChars(32) = ChrW(2338)
    UniChars(33) = ChrW(2339)
    UniChars(34) = ChrW(2340)
    UniChars(35) = ChrW(2341)
    UniChars(36) = ChrW(2342)
    UniChars(37) = ChrW(2343)
    UniChars(38) = ChrW(2344)
    UniChars(39) = ChrW(2345)
    UniChars(40) = ChrW(2346)
    UniChars(41) = ChrW(2347)
    UniChars(42) = ChrW(2348)
    UniChars(43) = ChrW(2349)
    UniChars(44) = ChrW(2350)
    UniChars(45) = ChrW(2351)
    UniChars(46) = ChrW(2352)
    UniChars(47) = ChrW(2353)
    UniChars(48) = ChrW(2354)
    UniChars(49) = ChrW(2355)
    UniChars(50) = ChrW(2356)
    UniChars(51) = ChrW(2357)
    UniChars(52) = ChrW(2358)
    UniChars(53) = ChrW(2359)
    UniChars(54) = ChrW(2360)
    UniChars(55) = ChrW(2361)
    UniChars(56) = ChrW(2366)
    UniChars(57) = ChrW(2367)
    UniChars(58) = ChrW(2368)
    UniChars(59) = ChrW(2369)
    UniChars(60) = ChrW(2370)
    UniChars(61) = ChrW(2371)
    UniChars(62) = ChrW(2374)
    UniChars(63) = ChrW(2375)
    UniChars(64) = ChrW(2376)
    UniChars(65) = ChrW(2373)
    UniChars(66) = ChrW(2378)
    UniChars(67) = ChrW(2379)
    UniChars(68) = ChrW(2380)
    UniChars(69) = ChrW(2377)
    UniChars(70) = ChrW(2381)
    UniChars(71) = ChrW(2364)
    UniChars(72) = ChrW(2404)
    UniChars(73) = ChrW(2384)

    
'**** ISCII Character Set ****
    
    AKChars(0) = Chr(161)
    AKChars(1) = Chr(162)
    AKChars(2) = Chr(163)
    AKChars(3) = Chr(164)
    AKChars(4) = Chr(165)
    AKChars(5) = Chr(166)
    AKChars(6) = Chr(167)
    AKChars(7) = Chr(168)
    AKChars(8) = Chr(169)
    AKChars(9) = Chr(170)
    AKChars(10) = Chr(171)
    AKChars(11) = Chr(172)
    AKChars(12) = Chr(172)
    AKChars(13) = Chr(173)
    AKChars(14) = Chr(174)
    AKChars(15) = Chr(175)
    AKChars(16) = Chr(176)
    AKChars(17) = Chr(177)
    AKChars(18) = Chr(178)
    AKChars(19) = Chr(179)
    AKChars(20) = Chr(180)
    AKChars(21) = Chr(181)
    AKChars(22) = Chr(182)
    AKChars(23) = Chr(183)
    AKChars(24) = Chr(184)
    AKChars(25) = Chr(185)
    AKChars(26) = Chr(186)
    AKChars(27) = Chr(187)
    AKChars(28) = Chr(188)
    AKChars(29) = Chr(189)
    AKChars(30) = Chr(190)
    AKChars(31) = Chr(191)
    AKChars(32) = Chr(192)
    AKChars(33) = Chr(193)
    AKChars(34) = Chr(194)
    AKChars(35) = Chr(195)
    AKChars(36) = Chr(196)
    AKChars(37) = Chr(197)
    AKChars(38) = Chr(198)
    AKChars(39) = Chr(199)
    AKChars(40) = Chr(200)
    AKChars(41) = Chr(201)
    AKChars(42) = Chr(202)
    AKChars(43) = Chr(203)
    AKChars(44) = Chr(204)
    AKChars(45) = Chr(205)
    AKChars(46) = Chr(207)
    AKChars(47) = Chr(208)
    AKChars(48) = Chr(209)
    AKChars(49) = Chr(210)
    AKChars(50) = Chr(211)
    AKChars(51) = Chr(212)
    AKChars(52) = Chr(213)
    AKChars(53) = Chr(214)
    AKChars(54) = Chr(215)
    AKChars(55) = Chr(216)
    AKChars(56) = Chr(218)
    AKChars(57) = Chr(219)
    AKChars(58) = Chr(220)
    AKChars(59) = Chr(221)
    AKChars(60) = Chr(222)
    AKChars(61) = Chr(223)
    AKChars(62) = Chr(224) 'ay_m
    AKChars(63) = Chr(225) 'aye_m
    AKChars(64) = Chr(226) 'Aye_m
    AKChars(65) = Chr(227) 'at_m
    AKChars(66) = Chr(228) 'ow_m
    AKChars(67) = Chr(229) 'owe_m
    AKChars(68) = Chr(230) 'Owe_m
    AKChars(69) = Chr(231) 'of_m
    AKChars(70) = Chr(232) 'halant
    AKChars(71) = Chr(233) 'nukta
    AKChars(72) = Chr(234) 'viarm
    AKChars(73) = Chr(161) & Chr(233) 'om

'**** Telugu Unicode Charecterset ****

    TlgUniChars(0) = ChrW(3073)
    TlgUniChars(1) = ChrW(3074)
    TlgUniChars(2) = ChrW(3075)
    TlgUniChars(3) = ChrW(3077)
    TlgUniChars(4) = ChrW(3078)
    TlgUniChars(5) = ChrW(3079)
    TlgUniChars(6) = ChrW(3080)
    TlgUniChars(7) = ChrW(3081)
    TlgUniChars(8) = ChrW(3082)
    TlgUniChars(9) = ChrW(3083)
    TlgUniChars(10) = ChrW(3086) 'ChrW(2320)
    TlgUniChars(11) = ChrW(3087)
    TlgUniChars(12) = ChrW(3087) 'ChrW(2318)
    TlgUniChars(13) = ChrW(3088)
    TlgUniChars(14) = ChrW(3086)
    TlgUniChars(15) = ChrW(3090)
    TlgUniChars(16) = ChrW(3091)
    TlgUniChars(17) = ChrW(3092)
    TlgUniChars(18) = ChrW(3090)
    TlgUniChars(19) = ChrW(3093)
    TlgUniChars(20) = ChrW(3094)
    TlgUniChars(21) = ChrW(3095)
    TlgUniChars(22) = ChrW(3096)
    TlgUniChars(23) = ChrW(3097)
    TlgUniChars(24) = ChrW(3098)
    TlgUniChars(25) = ChrW(3099)
    TlgUniChars(26) = ChrW(3100)
    TlgUniChars(27) = ChrW(3101)
    TlgUniChars(28) = ChrW(3102)
    TlgUniChars(29) = ChrW(3103)
    TlgUniChars(30) = ChrW(3104)
    TlgUniChars(31) = ChrW(3105)
    TlgUniChars(32) = ChrW(3106)
    TlgUniChars(33) = ChrW(3107)
    TlgUniChars(34) = ChrW(3108)
    TlgUniChars(35) = ChrW(3109)
    TlgUniChars(36) = ChrW(3110)
    TlgUniChars(37) = ChrW(3111)
    TlgUniChars(38) = ChrW(3112)
    TlgUniChars(39) = ChrW(3112)
    TlgUniChars(40) = ChrW(3114)
    TlgUniChars(41) = ChrW(3115)
    TlgUniChars(42) = ChrW(3116)
    TlgUniChars(43) = ChrW(3117)
    TlgUniChars(44) = ChrW(3118)
    TlgUniChars(45) = ChrW(3119)
    TlgUniChars(46) = ChrW(3120)
    TlgUniChars(47) = ChrW(3121)
    TlgUniChars(48) = ChrW(3122)
    TlgUniChars(49) = ChrW(3123)
    TlgUniChars(50) = ChrW(3123)
    TlgUniChars(51) = ChrW(3125)
    TlgUniChars(52) = ChrW(3126)
    TlgUniChars(53) = ChrW(3127)
    TlgUniChars(54) = ChrW(3128)
    TlgUniChars(55) = ChrW(3129)
    TlgUniChars(56) = ChrW(3134)
    TlgUniChars(57) = ChrW(3135)
    TlgUniChars(58) = ChrW(3136)
    TlgUniChars(59) = ChrW(3137)
    TlgUniChars(60) = ChrW(3138)
    TlgUniChars(61) = ChrW(3139)
    TlgUniChars(62) = ChrW(3142)
    TlgUniChars(63) = ChrW(3143)
    TlgUniChars(64) = ChrW(3144)
    TlgUniChars(65) = ChrW(3142)
    TlgUniChars(66) = ChrW(3146)
    TlgUniChars(67) = ChrW(3147)
    TlgUniChars(68) = ChrW(3148)
    TlgUniChars(69) = ChrW(3146)
    TlgUniChars(70) = ChrW(3149)
    TlgUniChars(71) = "" 'ChrW(3132) 'nukta
    TlgUniChars(72) = ChrW(3172)
    TlgUniChars(73) = ChrW(3091) & ChrW(3074)
        
End Sub


Attribute VB_Name = "NewMacros"
Sub AkSmartConv()
    Load DocumentConverter
    DocumentConverter.Show
End Sub

Public Sub AkSmartFontConv()
    Load AkDocConverter
    AkDocConverter.Show
End Sub


Sub aaa()
    Dim szAll As String
    For i = 32 To 255
        szAll = szAll & " " & Chr(i)
    Next i
    
    szTemp = "aaa"
    Selection.Text = ChrW(2309) & ChrW(2310)
    Selection.Font.Name = "Arial Unicode MS"
    Selection.Font.Bold = True
    Selection.Font.Italic = True
'    Selection.ClearFormatting
    Selection.Font.Name = "AkrutiOfficeYogini"
    Selection.Text = szTemp
    Selection.Text = szAll
    
End Sub

Sub RestoreAutoCorrectSettings()
On Error GoTo Handle
    With AutoCorrect
        .CorrectInitialCaps = True
        .CorrectSentenceCaps = True
        .CorrectDays = True
        .CorrectCapsLock = True
        .ReplaceText = True
    End With
    With Options
        .AutoFormatAsYouTypeApplyHeadings = True
        .AutoFormatAsYouTypeApplyBorders = True
        .AutoFormatAsYouTypeApplyBulletedLists = True
        .AutoFormatAsYouTypeApplyNumberedLists = True
        .AutoFormatAsYouTypeApplyTables = True
        .AutoFormatAsYouTypeReplaceQuotes = True
        .AutoFormatAsYouTypeReplaceSymbols = True
        .AutoFormatAsYouTypeReplaceOrdinals = True
        .AutoFormatAsYouTypeReplaceFractions = True
        .AutoFormatAsYouTypeReplacePlainTextEmphasis = True
        .AutoFormatAsYouTypeReplaceHyperlinks = True
        .AutoFormatAsYouTypeFormatListItemBeginning = True
        .AutoFormatAsYouTypeDefineStyles = True
        .TabIndentKey = True
    End With
    Application.DisplayAutoCompleteTips = True
    With Options
        .AutoFormatApplyHeadings = True
        .AutoFormatApplyLists = True
        .AutoFormatApplyBulletedLists = True
        .AutoFormatApplyOtherParas = True
        .AutoFormatReplaceQuotes = True
        .AutoFormatReplaceSymbols = True
        .AutoFormatReplaceOrdinals = True
        .AutoFormatReplaceFractions = True
        .AutoFormatReplacePlainTextEmphasis = True
        .AutoFormatReplaceHyperlinks = True
        .AutoFormatPreserveStyles = True
        .AutoFormatPlainTextWordMail = True
    End With
Handle:
End Sub

Sub SetAutoCorrectSettings()
On Error GoTo Handle
    With AutoCorrect
        .CorrectInitialCaps = False
        .CorrectSentenceCaps = False
        .CorrectDays = False
        .CorrectCapsLock = False
        .ReplaceText = False
    End With
    With Options
        .AutoFormatAsYouTypeApplyHeadings = False
        .AutoFormatAsYouTypeApplyBorders = False
        .AutoFormatAsYouTypeApplyBulletedLists = False
        .AutoFormatAsYouTypeApplyNumberedLists = False
        .AutoFormatAsYouTypeApplyTables = False
        .AutoFormatAsYouTypeReplaceQuotes = False
        .AutoFormatAsYouTypeReplaceSymbols = False
        .AutoFormatAsYouTypeReplaceOrdinals = False
        .AutoFormatAsYouTypeReplaceFractions = False
        .AutoFormatAsYouTypeReplacePlainTextEmphasis = False
        .AutoFormatAsYouTypeReplaceHyperlinks = False
        .AutoFormatAsYouTypeFormatListItemBeginning = False
        .AutoFormatAsYouTypeDefineStyles = False
        .TabIndentKey = False
    End With
    Application.DisplayAutoCompleteTips = False
    With Options
        .AutoFormatApplyHeadings = False
        .AutoFormatApplyLists = False
        .AutoFormatApplyBulletedLists = False
        .AutoFormatApplyOtherParas = False
        .AutoFormatReplaceQuotes = False
        .AutoFormatReplaceSymbols = False
        .AutoFormatReplaceOrdinals = False
        .AutoFormatReplaceFractions = False
        .AutoFormatReplacePlainTextEmphasis = False
        .AutoFormatReplaceHyperlinks = False
        .AutoFormatPreserveStyles = False
        .AutoFormatPlainTextWordMail = False

    End With
Handle:
End Sub

Public Sub ConvertOff()
    Load UserForm1
    UserForm1.Show
End Sub

Public Sub RemoveJunkChars()
    
    Dim myRange As Range
        
    Set myRange = ActiveDocument.Content
        
    myRange.Find.MatchCase = True
    myRange.Find.Execute findtext:=ChrW(128), _
    replacewith:="^0128", Replace:=wdReplaceAll
    myRange.Find.Execute findtext:=ChrW(142), _
    replacewith:="^0142", Replace:=wdReplaceAll
    myRange.Find.Execute findtext:=ChrW(158), _
    replacewith:="^0158", Replace:=wdReplaceAll
    
End Sub


Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
