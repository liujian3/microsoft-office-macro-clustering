Attribute VB_Name = "Class1"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private WithEvents Target As MSForms.CheckBox
Attribute Target.VB_VarHelpID = -1
 
Public Sub SetCtrl(new_ctrl As MSForms.CheckBox)
  Set Target = new_ctrl
End Sub
 
Private Sub Target_Click()
  If fEnableEvents Then
    Call ModuleLines.DrawLines(CDate(SheetLineSetting.Range("B2").Value), SheetLineSetting.Range("B3").Value, SheetLineSetting.Range("B4").Value)
  End If
End Sub

Attribute VB_Name = "DebugSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "DiscretionarySheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "GraphSheet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ModuleLines"
Option Explicit


Private Const GWL_STYLE = (-16)
Private Const WS_MAXIMIZEBOX = &H10000
Private Const WS_MINIMIZEBOX = &H20000
Private Const WS_THICKFRAME = &H40000
#If VBA7 Then
Private Declare PtrSafe Function GetWindowLong Lib "User32" Alias "GetWindowLongA" (ByVal Hwnd As Long, ByVal nIndex As Long) As Long
Private Declare PtrSafe Function SetWindowLong Lib "User32" Alias "SetWindowLongA" (ByVal Hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
Private Declare PtrSafe Function GetActiveWindow Lib "User32" () As Long
Private Declare PtrSafe Function ShowWindow Lib "User32" (ByVal Hwnd As Long, ByVal nCmdShow As Long) As Long
Private Declare PtrSafe Function DrawMenuBar Lib "User32" (ByVal Hwnd As Long) As Long
#Else
Private Declare Function GetWindowLong Lib "User32" Alias "GetWindowLongA" (ByVal Hwnd As Long, ByVal nIndex As Long) As Long
Private Declare Function SetWindowLong Lib "User32" Alias "SetWindowLongA" (ByVal Hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
Private Declare Function GetActiveWindow Lib "User32" () As Long
Private Declare Function ShowWindow Lib "User32" (ByVal Hwnd As Long, ByVal nCmdShow As Long) As Long
Private Declare Function DrawMenuBar Lib "User32" (ByVal Hwnd As Long) As Long
#End If






Type Stock
  Date    As Date
  Time    As Date
  Open    As Double
  High    As Double
  Low     As Double
  Close   As Double
  Volume  As Double
End Type






Public STOCKS_Daily_All()   As Stock
Public STOCKS_Daily_Night() As Stock
Public STOCKS_Daily_Day()   As Stock
Public DIC_Daily            As Object
Public fEnableEvents        As Boolean




Public Sub FormResize()
  Dim Hwnd   As Long
  Dim style  As Long
  
  
  Hwnd = GetActiveWindow()
  
  
  style = GetWindowLong(Hwnd, GWL_STYLE)
  
  
  style = style Or WS_THICKFRAME Or WS_MINIMIZEBOX Or WS_MAXIMIZEBOX
  
  
  Call SetWindowLong(Hwnd, GWL_STYLE, style)
  
  
  Call ShowWindow(Hwnd, 3)
End Sub




Sub LunchLines()
  Dim targetDate  As Date
  Dim latestTradeDate  As Date
  Dim tradeDateCounter As Long
  
  
  
  
  
  
  For tradeDateCounter = SheetIndexDB.Range("A" & Rows.Count).End(xlUp).Row To 2 Step -1
    
    If CDate(SheetIndexDB.Range("A" & tradeDateCounter).Value) = Date Then
      latestTradeDate = Date
    ElseIf CDate(SheetIndexDB.Range("A" & tradeDateCounter).Value) < Date And CDate(SheetIndexDB.Range("A" & tradeDateCounter + 1).Value) > Date Then
      latestTradeDate = Date
    End If
  Next tradeDateCounter
  
  
  If CDate(DiscretionarySheet.Range("A" & Rows.Count).End(xlUp).Value) = latestTradeDate Then
  Else
    Call UpdateHistoricalData
  End If
  
  
  With ActiveCell
    If IsDate(.Value) Then
      targetDate = .Value
    Else
      
      targetDate = DiscretionarySheet.Range("A" & Rows.Count).End(xlUp).Value
    End If
  End With
  
  
  Call DrawLines(targetDate, 15, "all")
  
  
  Call DrawLines2(targetDate)
  
  
  UserFormLines.LabelDate.Caption = Format(targetDate, "yyyy|fffd|Nm|fffd||fffd|d|fffd||fffd|") & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
  
  
  UserFormLines.CommandButtonFull.ForeColor = RGB(255, 0, 0)
  UserFormLines.CommandButtonFull.Font.Bold = True
  UserFormLines.CommandButtonAllOn.ForeColor = RGB(255, 0, 0)
  UserFormLines.CommandButtonAllOn.Font.Bold = True
  UserFormLines.CommandButtonMedium.ForeColor = RGB(255, 0, 0)
  UserFormLines.CommandButtonMedium.Font.Bold = True
  
  
  fEnableEvents = True
  
  
  UserFormLines.Show
  
End Sub





Public Sub DrawLines( _
  ByVal targetDate As Date, _
  ByVal daysPeriod As Long, _
  ByVal displayPart As String)

  Dim ohlcChart               As Chart
  Dim indexSheetTargetRow     As Long
  Dim settingSheetTargetRow   As Long
  Dim indexNumber             As Long
  Dim maxAxis1                As Double
  Dim minAxis1                As Double
  Dim maxAxis2                As Double
  Dim minAxis2                As Double
  Dim chartFilePath           As String
  
  Dim seriesCounter As Long
  Dim valuesCounter As Long
  Dim indexDBRow    As Long
  
  
  Call GraphSheetInitialize
  
  
  SheetLineSetting.Range("B2").Value = targetDate
  SheetLineSetting.Range("B3").Value = daysPeriod
  SheetLineSetting.Range("B4").Value = displayPart
  
  
  indexSheetTargetRow = DateToIndexRow(targetDate)
  
  
  Set ohlcChart = GraphSheet.ChartObjects.Add(0, 0, 396, 540).Chart
  
  
  With ohlcChart
    
    
    
    
    
    .SetSourceData Union( _
      SheetIndexDB.Range(dateColumn & indexSheetTargetRow - daysPeriod + 1 & ":" & dateColumn & indexSheetTargetRow), _
      SheetIndexDB.Range(allOpenColumn & indexSheetTargetRow - daysPeriod + 1 & ":" & allOpenColumn & indexSheetTargetRow), _
      SheetIndexDB.Range(allHighColumn & indexSheetTargetRow - daysPeriod + 1 & ":" & allHighColumn & indexSheetTargetRow), _
      SheetIndexDB.Range(allLowColumn & indexSheetTargetRow - daysPeriod + 1 & ":" & allLowColumn & indexSheetTargetRow), _
      SheetIndexDB.Range(allCloseColumn & indexSheetTargetRow - daysPeriod + 1 & ":" & allCloseColumn & indexSheetTargetRow))
    
    
    .ChartType = xlStockOHLC
    
    
    maxAxis1 = WorksheetFunction.Max(.SeriesCollection(2).Values)
    
    
    minAxis1 = WorksheetFunction.Min(.SeriesCollection(3).Values)
    
    
    
    
    
    
    maxAxis2 = 0: minAxis2 = 999999
    
    
    For indexNumber = 5 To 11
      
      .SeriesCollection.NewSeries

      
      With .SeriesCollection(indexNumber)
        
        .Name = SheetLineSetting.Range("E" & indexNumber + 1).Value
        
        .Values = SheetIndexDB.Range(SheetLineSetting.Range("F" & indexNumber + 1).Value & indexSheetTargetRow - daysPeriod + 1 & ":" & SheetLineSetting.Range("F" & indexNumber + 1).Value & indexSheetTargetRow)
        
        .XValues = SheetIndexDB.Range(dateColumn & indexSheetTargetRow - daysPeriod + 1 & ":" & dateColumn & indexSheetTargetRow)

        
        .ChartType = xlLine
        
        
        .AxisGroup = xlSecondary

        
        With .Format.Line
          
          If UserFormLines.Controls("CheckBox" & indexNumber) = False Then
            .Visible = msoFalse
          End If
          
          
          .ForeColor.RGB = RGB(SheetLineSetting.Range("H" & indexNumber + 1).Value, SheetLineSetting.Range("I" & indexNumber + 1).Value, SheetLineSetting.Range("J" & indexNumber + 1).Value)
          
          
          .Weight = SheetLineSetting.Range("K" & indexNumber + 1).Value
        End With

        
        If maxAxis2 < WorksheetFunction.Max(.Values) Then maxAxis2 = WorksheetFunction.Max(.Values)
        If minAxis2 > WorksheetFunction.Min(.Values) Then minAxis2 = WorksheetFunction.Min(.Values)
      End With
    Next indexNumber
    
    
    Select Case displayPart
      Case "zoom"
        
        .Axes(xlValue).MaximumScale = WorksheetFunction.Ceiling(maxAxis1, 100)
        .Axes(xlValue, xlSecondary).MaximumScale = WorksheetFunction.Ceiling(maxAxis1, 100)
        .Axes(xlValue).MinimumScale = WorksheetFunction.Floor(minAxis1, 100)
        .Axes(xlValue, xlSecondary).MinimumScale = WorksheetFunction.Floor(minAxis1, 100)
      Case "all"
        
        .Axes(xlValue).MaximumScale = WorksheetFunction.Ceiling(WorksheetFunction.Max(maxAxis1, maxAxis2), 500)
        .Axes(xlValue, xlSecondary).MaximumScale = WorksheetFunction.Ceiling(WorksheetFunction.Max(maxAxis1, maxAxis2), 500)
        .Axes(xlValue).MinimumScale = WorksheetFunction.Floor(WorksheetFunction.Min(minAxis1, minAxis2), 500)
        .Axes(xlValue, xlSecondary).MinimumScale = WorksheetFunction.Floor(WorksheetFunction.Min(minAxis1, minAxis2), 500)
    End Select
    
    
    .Axes(xlCategory).CategoryType = xlCategoryScale
    
    
    .Axes(xlCategory).TickLabels.NumberFormatLocal = "m/d;@"

    
    .Legend.Delete

    
    .Axes(xlValue, xlSecondary).Delete
    
    
    
    
    
    
    
    For indexNumber = 1 To 11
      
       SheetLineSetting.Range("L" & indexNumber + 1).Value = Int(SheetIndexDB.Range(SheetLineSetting.Range("F" & indexNumber + 1).Value & indexSheetTargetRow).Value)
       
      
      If indexNumber >= 5 Then
        With UserFormLines.Controls("CheckBox" & indexNumber)
          
  
          

        End With
      End If

      
      With UserFormLines.Controls("LabelIndexName" & indexNumber)
        .Caption = SheetLineSetting.Range("E" & indexNumber + 1).Value
        .BackColor = RGB(SheetLineSetting.Range("H" & indexNumber + 1).Value, SheetLineSetting.Range("I" & indexNumber + 1).Value, SheetLineSetting.Range("J" & indexNumber + 1).Value)
      End With

      
      With UserFormLines.Controls("LabelIndexValue" & indexNumber)
        .Caption = SheetLineSetting.Range("L" & indexNumber + 1).Value
        .BackColor = RGB(SheetLineSetting.Range("H" & indexNumber + 1).Value, SheetLineSetting.Range("I" & indexNumber + 1).Value, SheetLineSetting.Range("J" & indexNumber + 1).Value)
      End With
    Next indexNumber
    
    
    For indexNumber = 1 To 11
      
      SheetLineSetting.Range("M" & indexNumber + 1).Value = WorksheetFunction.Rank(SheetLineSetting.Range("L" & indexNumber + 1).Value, SheetLineSetting.Range("L2:L35")) _
                                                      + WorksheetFunction.CountIf(SheetLineSetting.Range("L" & indexNumber + 1 & ":L35"), SheetLineSetting.Range("L" & indexNumber + 1).Value) - 1
      
      If indexNumber >= 5 Then
        UserFormLines.Controls("CheckBox" & indexNumber).Top = 18 * SheetLineSetting.Range("M" & indexNumber + 1).Value + 30
      End If
      UserFormLines.Controls("LabelIndexName" & indexNumber).Top = 18 * SheetLineSetting.Range("M" & indexNumber + 1).Value + 30
      UserFormLines.Controls("LabelIndexValue" & indexNumber).Top = 18 * SheetLineSetting.Range("M" & indexNumber + 1).Value + 30
    Next indexNumber
    
    
    chartFilePath = ThisWorkbook.Path & "\ohlcchart.bmp"
    If Dir(chartFilePath) <> "" Then
      
      Kill chartFilePath
    End If
    
    
    .Parent.Select
    
    
    .Export chartFilePath
    
    
    UserFormLines.ImageLines.Picture = LoadPicture(chartFilePath)
    
    
    .Parent.Delete
  End With
End Sub

Public Sub DrawLines2(ByVal targetDate As Date)
  
  
  
  Const datePeriod As Long = 20

  Dim macdChart               As Chart
  Dim osciChart               As Chart
  Dim rciChart                As Chart
  Dim indexSheetTargetRow     As Long
  Dim settingSheetTargetRow   As Long
  Dim indexNumber             As Long
  Dim maxAxis1                As Double
  Dim minAxis1                As Double
  Dim maxAxis2                As Double
  Dim minAxis2                As Double
  
  Dim seriesCounter As Long
  Dim valuesCounter As Long
  
  
  Call GraphSheetInitialize
  
  
  indexSheetTargetRow = DateToIndexRow(targetDate)
  
  
  
  
  
  
  Set macdChart = GraphSheet.ChartObjects.Add(0, 0, 498, 144).Chart
  
  
  With macdChart
    
    .SetSourceData Union( _
      SheetIndexDB.Range(dateColumn & indexSheetTargetRow - datePeriod + 1 & ":" & dateColumn & indexSheetTargetRow), _
      SheetIndexDB.Range(macdColumn & indexSheetTargetRow - datePeriod + 1 & ":" & macdColumn & indexSheetTargetRow), _
      SheetIndexDB.Range(macdSignalColumn & indexSheetTargetRow - datePeriod + 1 & ":" & macdSignalColumn & indexSheetTargetRow))
    
    
    .ChartType = xlLine
    
    
    .Axes(xlCategory).CategoryType = xlCategoryScale
    
    
    .Axes(xlCategory).TickLabels.NumberFormatLocal = "m/d;@"
    
    
    .SeriesCollection(1).Name = "MACD"
    .SeriesCollection(2).Name = "|fffd|V|fffd|O|fffd|i|fffd||fffd|"
    
    
    .Axes(xlCategory).TickLabelPosition = xlLow
    
    
    .Axes(xlValue).MaximumScale = Application.WorksheetFunction.Max(Abs(.Axes(xlValue).MaximumScale), Abs(.Axes(xlValue).MinimumScale))
    .Axes(xlValue).MinimumScale = Application.WorksheetFunction.Max(Abs(.Axes(xlValue).MaximumScale), Abs(.Axes(xlValue).MinimumScale)) * -1
    
    
    .PlotArea.Select
    .PlotArea.Width = 410
    
    
    Dim chartFilePath As String
    chartFilePath = ThisWorkbook.Path & "\macdchart.bmp"
    If Dir(chartFilePath) <> "" Then
      
      Kill chartFilePath
    End If
    
    
    .Parent.Select
    
    
    .Export chartFilePath
    
    
    UserFormLines.ImageMACD.Picture = LoadPicture(chartFilePath)
  End With
  
  
  
  
  
  
  Set osciChart = GraphSheet.ChartObjects.Add(0, 0, 498, 144).Chart
  
  
  With osciChart
    
    .SetSourceData Union( _
      SheetIndexDB.Range(dateColumn & indexSheetTargetRow - datePeriod + 1 & ":" & dateColumn & indexSheetTargetRow), _
      SheetIndexDB.Range(macdOsciColumn & indexSheetTargetRow - datePeriod + 1 & ":" & macdOsciColumn & indexSheetTargetRow))
    
    
    .ChartType = xlColumnClustered
    
    
    .Axes(xlCategory).CategoryType = xlCategoryScale
    
    
    .Axes(xlCategory).TickLabels.NumberFormatLocal = "m/d;@"
    
    
    .SeriesCollection(1).Name = "|fffd|q|fffd|X|fffd|g|fffd|O|fffd||fffd||fffd||fffd|"
    
    
    .ChartTitle.Delete
    
    
    .Axes(xlCategory).TickLabelPosition = xlLow
    
    
    .Axes(xlValue).MaximumScale = Application.WorksheetFunction.Max(Abs(.Axes(xlValue).MaximumScale), Abs(.Axes(xlValue).MinimumScale))
    .Axes(xlValue).MinimumScale = Application.WorksheetFunction.Max(Abs(.Axes(xlValue).MaximumScale), Abs(.Axes(xlValue).MinimumScale)) * -1
    
    
    .PlotArea.Select
    .PlotArea.Width = 410
    
    chartFilePath = ThisWorkbook.Path & "\oscichart.bmp"
    If Dir(chartFilePath) <> "" Then
      
      Kill chartFilePath
    End If
    
    
    .Parent.Select
    
    
    .Export chartFilePath
    
    
    UserFormLines.ImageOsci.Picture = LoadPicture(chartFilePath)
  End With
  
  
  
  
  
  
  Set rciChart = GraphSheet.ChartObjects.Add(0, 0, 498, 144).Chart
  
  
  With rciChart
    
    .SetSourceData Union( _
      SheetIndexDB.Range(dateColumn & indexSheetTargetRow - datePeriod + 1 & ":" & dateColumn & indexSheetTargetRow), _
      SheetIndexDB.Range(rci6Column & indexSheetTargetRow - datePeriod + 1 & ":" & rci6Column & indexSheetTargetRow))
    
    
    .ChartType = xlLine
    
    
    .Axes(xlCategory).CategoryType = xlCategoryScale
    
    
    .Axes(xlCategory).TickLabels.NumberFormatLocal = "m/d;@"
    
    
    .SeriesCollection(1).Name = "RCI(6)"


    
    .ChartTitle.Delete
    
    
    .Axes(xlValue).MaximumScale = 100
    .Axes(xlValue).MinimumScale = -100
    
    
    .Axes(xlCategory).TickLabelPosition = xlLow
    
    
    .PlotArea.Select
    .PlotArea.Width = 410
    
    chartFilePath = ThisWorkbook.Path & "\rcichart.bmp"
    If Dir(chartFilePath) <> "" Then
      
      Kill chartFilePath
    End If
    
    
    .Parent.Select
    
    
    .Export chartFilePath
    
    
    UserFormLines.ImageRCI.Picture = LoadPicture(chartFilePath)
  End With
End Sub





Public Sub GraphSheetInitialize()
  Dim deleteChart As Object
  
  
  For Each deleteChart In GraphSheet.ChartObjects
    
    deleteChart.Delete
  Next
End Sub
Attribute VB_Name = "ModuleOHLC"
Option Explicit

Sub UpdateHistoricalData()
  
  If Not CheckUserName(DiscretionarySheet.Range("D3").Value) Or Not CheckMailAddress(DiscretionarySheet.Range("D4").Value) Then
    MsgBox "|fffd||fffd||fffd|[|fffd|U|fffd|[|fffd|o|fffd|^|fffd|G|fffd||fffd||fffd|A|fffd||241|A|fffd||fffd||fffd||fffd||fffd|O|fffd||183||fffd||fffd|[|fffd||fffd||fffd|A|fffd|h|fffd||fffd||fffd|X|fffd||fffd||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
    End
  End If
  
  
  Call GetActiveKey(DiscretionarySheet.Range("D3").Value, DiscretionarySheet.Range("D4").Value)
  
  
  Call ReadTradeDate
  
  
  Call UpdateOHLC
  
  
  Call CalcIndicator
End Sub





Private Sub GetActiveKey( _
  ByVal userName As String, _
  ByVal mailAddress As String)

  Dim downloadURL As String
  Dim filePath    As String
  
  
  downloadURL = "http://systemtrader.biz/html/sairyo_simple/ActivateKey.txt?username=" & userName & "&mailaddress=" & mailAddress

  
  filePath = ThisWorkbook.Path + "\ActivateKey.lip"
  
  
  DownloadFile downloadURL, filePath
  
  
  Kill filePath
End Sub





Private Sub ReadTradeDate()
  Dim rowCounter      As Long
  Dim lastRow         As Long
  Dim tradeDateIndex  As Long
  Dim tradeDateKey    As Date
  
  
  Set DIC_Daily = CreateObject("Scripting.Dictionary")
  
  
  With SheetIndexDB
    
    lastRow = .Range("A" & Rows.Count).End(xlUp).Row
    
    
    tradeDateIndex = 0
    
    
    For rowCounter = 2 To lastRow
      
      tradeDateIndex = tradeDateIndex + 1
      
      
      tradeDateKey = .Range("A" & rowCounter).Value
      
      
      DIC_Daily.Add tradeDateKey, tradeDateIndex
    Next rowCounter
  End With
End Sub





Private Sub UpdateOHLC()
  
  Call GetOHLC
  
  
  Call CSVtoArray
  
  
  Call PrintOHLC
End Sub





Private Sub GetOHLC()
  Dim yearCounter   As Long
  Dim downloadURL   As String
  Dim filePath      As String
  
  
  For yearCounter = 2012 To Year(Date)
    
    downloadURL = "http://k-db.top/future_csv/yearly/futures_F101-0000_" & yearCounter & ".csv"
    
    
    filePath = ThisWorkbook.Path + "\download" & yearCounter & ".lip"
      
    
    DownloadFile downloadURL, filePath
  Next yearCounter
End Sub





Private Sub CSVtoArray()
  Dim yearCounter     As Long
  Dim filePath        As String
  Dim buf             As String
  Dim tmpRecord       As Variant
  Dim tradeDateKey    As Date
  Dim sessionKey      As String
  Dim tradeDateIndex  As Long
  
  
  ReDim STOCKS_Daily_Night(1 To DIC_Daily.Count)
  ReDim STOCKS_Daily_Day(1 To DIC_Daily.Count)
  ReDim STOCKS_Daily_All(1 To DIC_Daily.Count)
  
  
  For yearCounter = 2012 To Year(Date)
    
    filePath = ThisWorkbook.Path + "\download" & yearCounter & ".lip"
    
    
    With CreateObject("Scripting.FileSystemObject")
      
      With .OpenTextFile(filePath)
        
        .SkipLine
        
        
        Do Until .AtEndOfStream
          
          buf = .ReadLine
          
          
          tmpRecord = Split(buf, ",")
          
          
          tradeDateKey = DateSerial(Left(tmpRecord(0), 4), Mid(tmpRecord(0), 5, 2), Right(tmpRecord(0), 2))
          
          
          tradeDateIndex = DIC_Daily.Item(tradeDateKey)
          
          
          If tradeDateIndex > 0 Then
          
            
            STOCKS_Daily_Night(tradeDateIndex).Date = tradeDateKey
            STOCKS_Daily_Day(tradeDateIndex).Date = tradeDateKey
            STOCKS_Daily_All(tradeDateIndex).Date = tradeDateKey
            
            
            sessionKey = tmpRecord(1)
            
            Select Case sessionKey
              Case "|fffd||fffd||fffd|"
                
                If tmpRecord(6) = 0 Then
                  STOCKS_Daily_Night(tradeDateIndex).Open = 0
                  STOCKS_Daily_Night(tradeDateIndex).High = 0
                  STOCKS_Daily_Night(tradeDateIndex).Low = 0
                  STOCKS_Daily_Night(tradeDateIndex).Close = 0
                Else
                  STOCKS_Daily_Night(tradeDateIndex).Open = tmpRecord(2)
                  STOCKS_Daily_Night(tradeDateIndex).High = tmpRecord(3)
                  STOCKS_Daily_Night(tradeDateIndex).Low = tmpRecord(4)
                  STOCKS_Daily_Night(tradeDateIndex).Close = tmpRecord(5)
                End If
                STOCKS_Daily_Night(tradeDateIndex).Volume = tmpRecord(6)
              Case "|fffd||fffd||fffd||fffd|"
                
                If tmpRecord(6) = 0 Then
                  STOCKS_Daily_Day(tradeDateIndex).Open = 0
                  STOCKS_Daily_Day(tradeDateIndex).High = 0
                  STOCKS_Daily_Day(tradeDateIndex).Low = 0
                  STOCKS_Daily_Day(tradeDateIndex).Close = 0
                Else
                  STOCKS_Daily_Day(tradeDateIndex).Open = tmpRecord(2)
                  STOCKS_Daily_Day(tradeDateIndex).High = tmpRecord(3)
                  STOCKS_Daily_Day(tradeDateIndex).Low = tmpRecord(4)
                  STOCKS_Daily_Day(tradeDateIndex).Close = tmpRecord(5)
                End If
                STOCKS_Daily_Day(tradeDateIndex).Volume = tmpRecord(6)
              Case "|fffd||fffd||fffd||282||fffd|"
                
                If tmpRecord(6) = 0 Then
                  STOCKS_Daily_All(tradeDateIndex).Open = 0
                  STOCKS_Daily_All(tradeDateIndex).High = 0
                  STOCKS_Daily_All(tradeDateIndex).Low = 0
                  STOCKS_Daily_All(tradeDateIndex).Close = 0
                Else
                  STOCKS_Daily_All(tradeDateIndex).Open = tmpRecord(2)
                  STOCKS_Daily_All(tradeDateIndex).High = tmpRecord(3)
                  STOCKS_Daily_All(tradeDateIndex).Low = tmpRecord(4)
                  STOCKS_Daily_All(tradeDateIndex).Close = tmpRecord(5)
                End If
                STOCKS_Daily_All(tradeDateIndex).Volume = tmpRecord(6)
            End Select
          Else
            MsgBox "|fffd|s|fffd||fffd||fffd||203|f|fffd|[|fffd|^ " & tradeDateKey & " |fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||1d7||fffd||fffd||482||24a|m|fffd|F|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
          End If
        Loop
        
        
        .Close
      End With
    End With
    
    
    Kill filePath
  Next yearCounter
End Sub





Private Sub PrintOHLC()
  Dim stocksCounter       As Long
  Dim indexSheetOutputRow As Long
  
  
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  
  
  For stocksCounter = LBound(STOCKS_Daily_All) To UBound(STOCKS_Daily_All)
    
    If Not STOCKS_Daily_All(stocksCounter).Volume = 0 Then
      
      indexSheetOutputRow = stocksCounter + 1
      
      
      If STOCKS_Daily_Night(stocksCounter).Volume = 0 Then
        SheetIndexDB.Range(nightOpenColumn & indexSheetOutputRow).Value = "-"
        SheetIndexDB.Range(nightHighColumn & indexSheetOutputRow).Value = "-"
        SheetIndexDB.Range(nightLowColumn & indexSheetOutputRow).Value = "-"
        SheetIndexDB.Range(nightCloseColumn & indexSheetOutputRow).Value = "-"
        SheetIndexDB.Range(nightVolumeColumn & indexSheetOutputRow).Value = "-"
      Else
        SheetIndexDB.Range(nightOpenColumn & indexSheetOutputRow).Value = STOCKS_Daily_Night(stocksCounter).Open
        SheetIndexDB.Range(nightHighColumn & indexSheetOutputRow).Value = STOCKS_Daily_Night(stocksCounter).High
        SheetIndexDB.Range(nightLowColumn & indexSheetOutputRow).Value = STOCKS_Daily_Night(stocksCounter).Low
        SheetIndexDB.Range(nightCloseColumn & indexSheetOutputRow).Value = STOCKS_Daily_Night(stocksCounter).Close
        SheetIndexDB.Range(nightVolumeColumn & indexSheetOutputRow).Value = STOCKS_Daily_Night(stocksCounter).Volume
      End If
      
      
      SheetIndexDB.Range(dayOpenColumn & indexSheetOutputRow).Value = STOCKS_Daily_Day(stocksCounter).Open
      SheetIndexDB.Range(dayHighColumn & indexSheetOutputRow).Value = STOCKS_Daily_Day(stocksCounter).High
      SheetIndexDB.Range(dayLowColumn & indexSheetOutputRow).Value = STOCKS_Daily_Day(stocksCounter).Low
      SheetIndexDB.Range(dayCloseColumn & indexSheetOutputRow).Value = STOCKS_Daily_Day(stocksCounter).Close
      SheetIndexDB.Range(dayVolumeColumn & indexSheetOutputRow).Value = STOCKS_Daily_Day(stocksCounter).Volume
      
      
      SheetIndexDB.Range(allOpenColumn & indexSheetOutputRow).Value = STOCKS_Daily_All(stocksCounter).Open
      SheetIndexDB.Range(allHighColumn & indexSheetOutputRow).Value = STOCKS_Daily_All(stocksCounter).High
      SheetIndexDB.Range(allLowColumn & indexSheetOutputRow).Value = STOCKS_Daily_All(stocksCounter).Low
      SheetIndexDB.Range(allCloseColumn & indexSheetOutputRow).Value = STOCKS_Daily_All(stocksCounter).Close
      SheetIndexDB.Range(allVolumeColumn & indexSheetOutputRow).Value = STOCKS_Daily_All(stocksCounter).Volume
    Else
      
      ReDim Preserve STOCKS_Daily_Night(1 To stocksCounter - 1)
      ReDim Preserve STOCKS_Daily_Day(1 To stocksCounter - 1)
      ReDim Preserve STOCKS_Daily_All(1 To stocksCounter - 1)
      Exit For
    End If
  Next stocksCounter
  
  
  Call CopyOHLC("discretionary", "all")
  
  
  Application.Calculation = xlCalculationAutomatic
  Application.ScreenUpdating = True
End Sub


Private Sub RefreshRegistArea()
  
  
  
  
  If CheckUserRegist Then
    MainSheet.Range("A2").Value = "|fffd|o|fffd|^|fffd||fffd|"
  Else
    MainSheet.Range("A2").Value = "|fffd||fffd||fffd|o|fffd|^"
  End If
End Sub

Private Function CheckUserRegist() As Boolean
  
  
  
  
  If CheckUserName(SheetRegistration.Range("B2").Value) And CheckMailAddress(SheetRegistration.Range("B3").Value) Then
    CheckUserRegist = True
  Else
    CheckUserRegist = False
  End If
End Function

Private Sub RegistUserName()
  
  
  
  Dim userName As Variant

ReStart:
  
  
  userName = Application.InputBox(Prompt:="|fffd||fffd||fffd||303|c|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd|g|fffd||fffd||fffd||242||202||fffd||fffd||fffd||301|A|fffd||fffd||fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||342||fffd||fffd|A" & vbCrLf _
    & "OK |fffd|{|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B" & vbCrLf & vbCrLf, Title:="|fffd||fffd||fffd|[|fffd|U|fffd|[|fffd||fffd||fffd|o|fffd|^", Type:=2)
  
  
  If userName = False Then
    MsgBox "|fffd||fffd||fffd|[|fffd|U|fffd|[|fffd||fffd||fffd||313|o|fffd|^|fffd||fffd||fffd|L|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B"
    End
  End If
  
  
  If Not Len(userName) >= 2 Then
    MsgBox "|fffd|Q|fffd||fffd||fffd||fffd||fffd||20f||fffd||153||fffd||fffd||342||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
    GoTo ReStart
  End If
  
  
  SheetRegistration.Range("B2").Value = userName
  
  MsgBox "|fffd||fffd||fffd|[|fffd|U|fffd|[|fffd||fffd||fffd||fffd|o|fffd|^|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B"
End Sub

Private Sub RegistMailAddress()
  
  
  
  Dim mailAddress As Variant
  
ReStart:
  
  
  mailAddress = Application.InputBox(Prompt:="|fffd||fffd||fffd||303|c|fffd|[|fffd||fffd||fffd||fffd||fffd|w|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||6c2||24e|g|fffd|p|fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd|[|fffd||fffd||fffd|A|fffd|h|fffd||fffd||fffd|X|fffd||fffd||fffd||fffd||342||fffd||fffd|A" & vbCrLf _
    & "OK |fffd|{|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B" & vbCrLf & vbCrLf, Title:="|fffd||fffd||fffd|[|fffd||fffd||fffd|A|fffd|h|fffd||fffd||fffd|X|fffd|o|fffd|^", Type:=2)
  
  
  If mailAddress = False Then
    MsgBox "|fffd||fffd||fffd|[|fffd||fffd||fffd|A|fffd|h|fffd||fffd||fffd|X|fffd||313|o|fffd|^|fffd||fffd||fffd|L|fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B"
    End
  End If
  
  
  If Not CheckMailAddress(mailAddress) Then
    MsgBox "|fffd||fffd||fffd|[|fffd||fffd||fffd|A|fffd|h|fffd||fffd||fffd|X|fffd||30c|`|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
    GoTo ReStart
  End If
  
  
  SheetRegistration.Range("B3").Value = mailAddress
  
  MsgBox "|fffd||fffd||fffd|[|fffd||fffd||fffd|A|fffd|h|fffd||fffd||fffd|X|fffd||fffd|o|fffd|^|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B"
End Sub






Sub CopyOHLC( _
  ByVal targetSheetName As String, _
  ByVal Session As String)
  
  Dim targetSheet As Worksheet
  Dim rowCounter As Long
  Dim lastRow As Long
  
  Select Case targetSheetName
    Case "main"

    Case "discretionary"
      Set targetSheet = DiscretionarySheet
  End Select
  
  lastRow = SheetIndexDB.Range(allOpenColumn & Rows.Count).End(xlUp).Row
  
  
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  
  For rowCounter = 2 To lastRow
    targetSheet.Range("A" & rowCounter + 9).Value = SheetIndexDB.Range(dateColumn & rowCounter).Value
    Select Case Session
      Case "night"
        targetSheet.Range("B" & rowCounter + 9).Value = SheetIndexDB.Range(nightOpenColumn & rowCounter).Value
        targetSheet.Range("C" & rowCounter + 9).Value = SheetIndexDB.Range(nightHighColumn & rowCounter).Value
        targetSheet.Range("D" & rowCounter + 9).Value = SheetIndexDB.Range(nightLowColumn & rowCounter).Value
        targetSheet.Range("E" & rowCounter + 9).Value = SheetIndexDB.Range(nightCloseColumn & rowCounter).Value
        targetSheet.Range("F" & rowCounter + 9).Value = SheetIndexDB.Range(nightVolumeColumn & rowCounter).Value
      Case "day"
        targetSheet.Range("B" & rowCounter + 9).Value = SheetIndexDB.Range(dayOpenColumn & rowCounter).Value
        targetSheet.Range("C" & rowCounter + 9).Value = SheetIndexDB.Range(dayHighColumn & rowCounter).Value
        targetSheet.Range("D" & rowCounter + 9).Value = SheetIndexDB.Range(dayLowColumn & rowCounter).Value
        targetSheet.Range("E" & rowCounter + 9).Value = SheetIndexDB.Range(dayCloseColumn & rowCounter).Value
        targetSheet.Range("F" & rowCounter + 9).Value = SheetIndexDB.Range(dayVolumeColumn & rowCounter).Value
      Case "all"
        targetSheet.Range("B" & rowCounter + 9).Value = SheetIndexDB.Range(allOpenColumn & rowCounter).Value
        targetSheet.Range("C" & rowCounter + 9).Value = SheetIndexDB.Range(allHighColumn & rowCounter).Value
        targetSheet.Range("D" & rowCounter + 9).Value = SheetIndexDB.Range(allLowColumn & rowCounter).Value
        targetSheet.Range("E" & rowCounter + 9).Value = SheetIndexDB.Range(allCloseColumn & rowCounter).Value
        targetSheet.Range("F" & rowCounter + 9).Value = SheetIndexDB.Range(allVolumeColumn & rowCounter).Value
    End Select
  Next rowCounter
  
  
  Application.ScreenUpdating = True
  Application.Calculation = xlCalculationAutomatic
End Sub

Private Sub DownloadFile(ByVal Url As String, ByVal saveFilePath As String)
  
  Dim req As Object
  Const adTypeBinary = 1
  Const adSaveCreateOverWrite = 2
   
  Set req = Nothing
  Set req = CreateHttpRequest()
  If req Is Nothing Then Exit Sub
  req.Open "GET", Url, False
   
  
  
  
  req.setRequestHeader "Pragma", "no-cache"
  req.setRequestHeader "Cache-Control", "no-cache"
  req.setRequestHeader "If-Modified-Since", "Thu, 01 Jun 1970 00:00:00 GMT"
   
  req.Send
  Select Case req.Status
    Case 200
      With CreateObject("ADODB.Stream")
        .Type = adTypeBinary
        .Open
        .Write req.responseBody
        .SaveToFile saveFilePath, adSaveCreateOverWrite
        .Close
      End With
    Case Else
      MsgBox "|fffd|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B" & vbCrLf & _
             "|fffd|X|fffd|e|fffd|[|fffd|^|fffd|X|fffd|R|fffd|[|fffd|h|fffd|F" & req.Status, _
             vbCritical + vbSystemModal
      Exit Sub
  End Select
End Sub
 
Private Function CreateHttpRequest() As Object
    
    
    Dim progIDs As Variant
    Dim ret As Object
    Dim i As Long
     
    Set ret = Nothing '|fffd||fffd||fffd||fffd||fffd||fffd|
    progIDs = Array("WinHttp.WinHttpRequest.5.1", _
                    "WinHttp.WinHttpRequest.5", _
                    "WinHttp.WinHttpRequest", _
                    "Msxml2.ServerXMLHTTP.6.0", _
                    "Msxml2.ServerXMLHTTP.5.0", _
                    "Msxml2.ServerXMLHTTP.4.0", _
                    "Msxml2.ServerXMLHTTP.3.0", _
                    "Msxml2.ServerXMLHTTP", _
                    "Microsoft.ServerXMLHTTP", _
                    "Msxml2.XMLHTTP.6.0", _
                    "Msxml2.XMLHTTP.5.0", _
                    "Msxml2.XMLHTTP.4.0", _
                    "Msxml2.XMLHTTP.3.0", _
                    "Msxml2.XMLHTTP", _
                    "Microsoft.XMLHTTP")
    On Error Resume Next
    For i = LBound(progIDs) To UBound(progIDs)
        Set ret = CreateObject(progIDs(i))
        If Not ret Is Nothing Then Exit For
    Next
    On Error GoTo 0
    Set CreateHttpRequest = ret
End Function

Private Sub MergeFile(ByVal startYear As Long, ByVal endYear As Long)



    Dim inputFileName As String
    Dim outputFileName As String
    Dim inputFileNumber As Integer
    Dim outputFileNumber As Integer
    Dim counterYear As Long
    Dim saveRecord As String
    Dim killFileName As String

    
    outputFileName = ThisWorkbook.Path + "\Market.lip"
    
    outputFileNumber = FreeFile
    
    Open outputFileName For Output As outputFileNumber
    
    
    For counterYear = startYear To endYear
    
        
        inputFileName = ThisWorkbook.Path + "\download" & counterYear & ".lip"
        
        inputFileNumber = FreeFile
        
        Open inputFileName For Input As #inputFileNumber
        
        
        Line Input #inputFileNumber, saveRecord
        
        
        Do Until EOF(inputFileNumber)
            
            Line Input #inputFileNumber, saveRecord
            
            Print #outputFileNumber, saveRecord
        Loop
        
        
        Close #inputFileNumber
    
    Next counterYear
    
    
    Close #outputFileNumber
    
    
    killFileName = ThisWorkbook.Path + "\download*.lip"
    Kill killFileName
End Sub

Private Sub DeleteHeader()



    Dim inputFileName As String
    Dim outputFileName As String
    Dim inputFileNumber As Integer
    Dim outputFileNumber As Integer
    Dim counterYear As Long
    Dim saveRecord As String
    Dim killFileName As String

    
    outputFileName = ThisWorkbook.Path + "\Market.lip"
    
    outputFileNumber = FreeFile
    
    Open outputFileName For Output As outputFileNumber
    
    
    inputFileName = ThisWorkbook.Path + "\download.lip"
    
    inputFileNumber = FreeFile
    
    Open inputFileName For Input As #inputFileNumber
    
    
    Line Input #inputFileNumber, saveRecord
    
    
    Do Until EOF(inputFileNumber)
        
        Line Input #inputFileNumber, saveRecord
        
        Print #outputFileNumber, saveRecord
    Loop
    
    
    Close #inputFileNumber
    
    
    Close #outputFileNumber
    
    
    killFileName = ThisWorkbook.Path + "\download*.lip"
    Kill killFileName
End Sub

Private Function CheckUserName(ByVal userName As String) As Boolean
  
  
  
  
  If Len(userName) >= 2 Then
    CheckUserName = True
  Else
    CheckUserName = False
  End If
End Function

Private Function CheckMailAddress(ByVal mailAddress As String) As Boolean
  
  
  
  Dim checkFlag As Boolean
  
  
  mailAddress = StrConv(mailAddress, vbNarrow)
  
  
  checkFlag = (mailAddress Like "*@*.*") And (Not mailAddress Like "@*.*") And (Not mailAddress Like "*@")
  If checkFlag Then
    CheckMailAddress = True
  Else
    CheckMailAddress = False
  End If
End Function

Private Sub InitializeScreen()
  
  
  
  With MainSheet
    .Rows(mainSheetDataStartRow & ":" & .Rows.Count).Clear
  End With
End Sub


Attribute VB_Name = "SheetIndexDB"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetLineSetting"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "SheetRegistration"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "UserFormLines"
Attribute VB_Base = "0{634FA579-E132-465B-ACF4-4646E59921E2}{CC254852-A3BC-4637-B3F9-EB817428A55D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private CheckCollection As Collection




Private Sub CommandButtonZoom_Click()
  
  Me.CommandButtonZoom.ForeColor = RGB(255, 0, 0)
  Me.CommandButtonZoom.Font.Bold = True
  
  
  Me.CommandButtonFull.ForeColor = RGB(0, 0, 0)
  Me.CommandButtonFull.Font.Bold = False
  
  
  SheetLineSetting.Range("B4").Value = "zoom"
  
  
  Call ModuleLines.DrawLines(CDate(SheetLineSetting.Range("B2").Value), SheetLineSetting.Range("B3").Value, SheetLineSetting.Range("B4").Value)
End Sub




Private Sub CommandButtonFull_Click()
  
  Me.CommandButtonFull.ForeColor = RGB(255, 0, 0)
  Me.CommandButtonFull.Font.Bold = True
  
  
  Me.CommandButtonZoom.ForeColor = RGB(0, 0, 0)
  Me.CommandButtonZoom.Font.Bold = False
  
  
  SheetLineSetting.Range("B4").Value = "all"
  
  
  Call ModuleLines.DrawLines(CDate(SheetLineSetting.Range("B2").Value), SheetLineSetting.Range("B3").Value, SheetLineSetting.Range("B4").Value)
End Sub




Private Sub CommandButtonLarge_Click()
  
  Me.CommandButtonLarge.ForeColor = RGB(255, 0, 0)
  Me.CommandButtonLarge.Font.Bold = True
  Me.CommandButtonMedium.ForeColor = RGB(0, 0, 0)
  Me.CommandButtonMedium.Font.Bold = False
  Me.CommandButtonSmall.ForeColor = RGB(0, 0, 0)
  Me.CommandButtonSmall.Font.Bold = False
  
  UserFormLines.Zoom = 120
End Sub




Private Sub CommandButtonMedium_Click()
  Me.CommandButtonLarge.ForeColor = RGB(0, 0, 0)
  Me.CommandButtonLarge.Font.Bold = False
  Me.CommandButtonMedium.ForeColor = RGB(255, 0, 0)
  Me.CommandButtonMedium.Font.Bold = True
  Me.CommandButtonSmall.ForeColor = RGB(0, 0, 0)
  Me.CommandButtonSmall.Font.Bold = False
  
  UserFormLines.Zoom = 100
End Sub




Private Sub CommandButtonSmall_Click()
  Me.CommandButtonLarge.ForeColor = RGB(0, 0, 0)
  Me.CommandButtonLarge.Font.Bold = False
  Me.CommandButtonSmall.ForeColor = RGB(255, 0, 0)
  Me.CommandButtonSmall.Font.Bold = True
  Me.CommandButtonMedium.ForeColor = RGB(0, 0, 0)
  Me.CommandButtonMedium.Font.Bold = False
  
  UserFormLines.Zoom = 80
End Sub




Private Sub CloseButton_Click()
  Unload UserFormLines
End Sub




Private Sub CommandButtonAllOn_Click()
  Dim ctrl  As Control
  
  Me.CommandButtonAllOn.ForeColor = RGB(255, 0, 0)
  Me.CommandButtonAllOn.Font.Bold = True
  Me.CommandButtonAllOff.ForeColor = RGB(0, 0, 0)
  Me.CommandButtonAllOff.Font.Bold = False
  
  
  fEnableEvents = False
  
  
  For Each ctrl In Me.Controls
    
    If TypeName(ctrl) = "CheckBox" Then
      ctrl.Value = True
    End If
  Next
  
  
  fEnableEvents = True
  
  
  Call ModuleLines.DrawLines(CDate(SheetLineSetting.Range("B2").Value), SheetLineSetting.Range("B3").Value, SheetLineSetting.Range("B4").Value)
End Sub




Private Sub CommandButtonAllOff_Click()
  Dim ctrl  As Control
  
  Me.CommandButtonAllOn.ForeColor = RGB(0, 0, 0)
  Me.CommandButtonAllOn.Font.Bold = False
  Me.CommandButtonAllOff.ForeColor = RGB(255, 0, 0)
  Me.CommandButtonAllOff.Font.Bold = True
  
  
  fEnableEvents = False
  
  
  For Each ctrl In Me.Controls
    
    If TypeName(ctrl) = "CheckBox" Then
      ctrl.Value = False
    End If
  Next
  
  
  fEnableEvents = True
  
  
  Call ModuleLines.DrawLines(CDate(SheetLineSetting.Range("B2").Value), SheetLineSetting.Range("B3").Value, SheetLineSetting.Range("B4").Value)
End Sub

Private Sub UserForm_Activate()
  Call FormResize
End Sub




Private Sub UserForm_Initialize()
  Dim ctrl  As Control
  Dim obj   As Class1
  
  
  Set CheckCollection = New Collection
  
  
  For Each ctrl In Me.Controls
    
    If TypeName(ctrl) = "CheckBox" Then
      ctrl.Value = True
      
      Set obj = New Class1
      
      obj.SetCtrl ctrl
      
      CheckCollection.Add obj
      
      Set obj = Nothing
    End If
  Next
End Sub


Private Sub UserForm_Terminate()
  
  
  
  Dim targetFileName()  As Variant
  Dim fileCounter       As Long
  
  targetFileName = Array( _
    ThisWorkbook.Path & "\ohlcchart.bmp", _
    ThisWorkbook.Path & "\oscichart.bmp", _
    ThisWorkbook.Path & "\macdchart.bmp", _
    ThisWorkbook.Path & "\rcichart.bmp")
  
  For fileCounter = LBound(targetFileName) To UBound(targetFileName)
    
    If Dir(targetFileName(fileCounter)) <> "" Then
      
      Kill targetFileName(fileCounter)
    End If
  Next fileCounter
End Sub
Attribute VB_Name = "calc_module"
Option Explicit






Public iSMA3()  As Double
Public iSMA4()  As Double
Public iSMA5()  As Double
Public iSMA25() As Double
Public iSMA75() As Double


Public iEMA5()  As Double
Public iEMA10() As Double
Public iEMA25() As Double
Public iEMA75() As Double


Public iInyou() As Long


Public iMACD() As Double, iMACDSignal() As Double, iOsMA() As Double


Public iStochasticK() As Double, iStochasticD() As Double, iStochasticSlowD() As Double


Public iATR() As Double


Public iATRM() As Double, iATRH() As Double, iATRL() As Double


Public iRCI6()  As Double
Public iRCI8()  As Double
Public iRCI9()  As Double
Public iRCI12() As Double
Public iRCI13() As Double
Public iRCI27() As Double


Public iROC5() As Double


Public iPara() As Long


Public iBB00() As Double
Public iBB01() As Double, iBB02() As Double, iBB03() As Double
Public iBB11() As Double, iBB12() As Double, iBB13() As Double


Public iDIp() As Double, iDIm() As Double


Public iShinne() As Long, iShinTakane() As Double, iShinYasune() As Double


Public iSakataY() As Long, iSakataI() As Long


Public iWatashi()


Public iMAE00() As Double
Public iMAE01() As Double, iMAE02() As Double, iMAE03() As Double
Public iMAE11() As Double, iMAE12() As Double, iMAE13() As Double


Public iHLHigh()    As Double
Public iHLCenter()  As Double
Public iHLLow()     As Double


Public iIchimokuTenkan()  As Double
Public iIchimokuKijun()   As Double
Public iIchimokuSenkou1() As Double
Public iIchimokuSenkou2() As Double
Public iIchimokuChikou()  As Double


Public Sub CalcIndicator()
  
  
  
  Dim i           As Long
  Dim allClose()  As Double
  
  
  ReDim allClose(LBound(STOCKS_Daily_All) To UBound(STOCKS_Daily_All))
  For i = LBound(allClose) To UBound(allClose)
    allClose(i) = STOCKS_Daily_All(i).Close
  Next i
  
  
  Call CalcSMA(allClose, iSMA3, 3)
  Call CalcSMA(allClose, iSMA4, 4)
  Call CalcSMA(allClose, iSMA5, 5)
  Call CalcSMA(allClose, iSMA25, 25)
  Call CalcSMA(allClose, iSMA75, 75)
  
  
  Call CalcEMA(allClose, iEMA5, 5)
  Call CalcEMA(allClose, iEMA10, 10)
  Call CalcEMA(allClose, iEMA25, 25)
  Call CalcEMA(allClose, iEMA75, 75)

  
  Call CalcInYou(STOCKS_Daily_All, iInyou)

  
  Call CalcMACD(STOCKS_Daily_All, iMACD, iMACDSignal, iOsMA, 5, 20, 9)

  
  Call CalcStochastic(STOCKS_Daily_All, iStochasticK, iStochasticD, iStochasticSlowD, 9, 3, 3, True)

  
  Call CalcATR(STOCKS_Daily_All, iATR, 10)
  
  
  Call CalcATRBand(STOCKS_Daily_All, iATRM, iATRH, iATRL, 10, 1.5)

  
  Call CalcRCI(STOCKS_Daily_All, iRCI6, 6)
  Call CalcRCI(STOCKS_Daily_All, iRCI8, 8)
  Call CalcRCI(STOCKS_Daily_All, iRCI9, 9)
  Call CalcRCI(STOCKS_Daily_All, iRCI12, 12)
  Call CalcRCI(STOCKS_Daily_All, iRCI13, 13)
  Call CalcRCI(STOCKS_Daily_All, iRCI27, 27)

  
  Call CalcROC(STOCKS_Daily_All, iROC5, 5)

  
  Call CalcPara(STOCKS_Daily_All, iPara, 0.02, 0.2)

  
  Call CalcBollingerBand(STOCKS_Daily_All, iBB00, iBB01, iBB02, iBB03, iBB11, iBB12, iBB13, 25)

  
  Call CalcDMI(STOCKS_Daily_All, iDIp, iDIm, 14)

  
  Call CalcShinne(STOCKS_Daily_All, iShinne, iShinTakane, iShinYasune, 3)
  
  
  Call CalcSakata(STOCKS_Daily_All, iSakataY, iSakataI, 4, True)



  
  
  Call CalcMAE(STOCKS_Daily_All, iMAE00, iMAE01, iMAE02, iMAE03, iMAE11, iMAE12, iMAE13, 25)
  
  
  Call CalcHLBand(STOCKS_Daily_All, iHLHigh, iHLCenter, iHLLow, 20)
  
  
  Call CalcIchimoku(STOCKS_Daily_All, iIchimokuTenkan, iIchimokuKijun, iIchimokuSenkou1, iIchimokuSenkou2, iIchimokuChikou, 9, 26, 26)
End Sub

Public Sub CalcSMA(ByRef dataSource() As Double, ByRef outputSMA() As Double, ByRef Period As Long, Optional ByVal debugMode As Boolean)
  
  
  
  Dim i As Long
  Dim j As Long
  
  
  ReDim outputSMA(LBound(dataSource) To UBound(dataSource))
  
  
  For i = LBound(dataSource) To UBound(dataSource)
    
    If i >= Period Then
      
      For j = i - Period + 1 To i
        outputSMA(i) = outputSMA(i) + dataSource(j)
      Next j
      
      outputSMA(i) = outputSMA(i) / Period
    End If
  Next i
  
  
  Application.ScreenUpdating = False
  With SheetIndexDB
    For i = LBound(dataSource) To UBound(dataSource)
      Select Case Period
        Case 5
          .Range(sma5Column & i + 1).Value = outputSMA(i)
        Case 25
          .Range(sma25Column & i + 1).Value = outputSMA(i)
        Case 75
          .Range(sma75Column & i + 1).Value = outputSMA(i)
      End Select
    Next i
  End With
  Application.ScreenUpdating = True
  
  
  
  
  If Not IsMissing(debugMode) Then
    If debugMode Then
      With DebugSheet
        .Cells.Clear
        For i = LBound(dataSource) To UBound(dataSource)
          .Cells(i, 1).Value = STOCKS_Daily_All(i).Date
          .Cells(i, 2).Value = outputSMA(i)
        Next i
      End With
    End If
  End If
End Sub

Public Sub CalcEMA(ByRef dataSource() As Double, ByRef outputEMA() As Double, ByRef Period As Long, Optional ByVal debugMode As Boolean)
  
  
  
  Dim i           As Long
  Dim alpha       As Double
  
  
  ReDim outputEMA(LBound(dataSource) To UBound(dataSource))

  '|fffd||fffd||fffd|l|fffd||30c|v|fffd|Z
  alpha = 2 / (Period + 1)

  '|fffd||fffd||fffd||fffd||fffd||352|P|fffd||fffd||fffd||693||fffd||fffd||fffd||fffd||3c2||14b||fffd||fffd||7c2||fffd|
  For i = 1 To Period
    outputEMA(Period) = outputEMA(Period) + dataSource(i)
  Next i
  outputEMA(Period) = outputEMA(Period) / Period

  
  For i = Period + 1 To UBound(dataSource)
    outputEMA(i) = outputEMA(i - 1) + alpha * (dataSource(i) - outputEMA(i - 1))
  Next i
  
  
  Application.ScreenUpdating = False
  With SheetIndexDB
    For i = LBound(dataSource) To UBound(dataSource)
      Select Case Period
        Case 5
          .Range(ema5Column & i + 1).Value = outputEMA(i)
        Case 25
          .Range(ema25Column & i + 1).Value = outputEMA(i)
        Case 75
          .Range(ema75Column & i + 1).Value = outputEMA(i)
      End Select
    Next i
  End With
  Application.ScreenUpdating = True
  
  
  
  
  If Not IsMissing(debugMode) Then
    If debugMode Then
      With DebugSheet
        .Cells.Clear
        For i = LBound(dataSource) To UBound(dataSource)
          .Cells(i, 1).Value = STOCKS_Daily_All(i).Date
          .Cells(i, 2).Value = outputEMA(i)
        Next i
      End With
    End If
  End If
End Sub

Public Sub CalcInYou(ByRef dataSource() As Stock, ByRef outputInyou() As Long, Optional ByVal debugMode As Boolean)
  
  
  
  
  Dim i As Long
  
  ReDim outputInyou(LBound(dataSource) To UBound(dataSource))

  
  For i = 2 To UBound(dataSource)
    
    Select Case dataSource(i).Close
      Case Is > dataSource(i).Open
        
        If outputInyou(i - 1) > 0 Then
            
            outputInyou(i) = outputInyou(i - 1) + 1
        Else
            
            outputInyou(i) = 1
        End If
      Case Is < dataSource(i).Open
        
        If outputInyou(i - 1) < 0 Then
            
            outputInyou(i) = outputInyou(i - 1) - 1
        Else
            
            outputInyou(i) = -1
        End If
      Case Else
        outputInyou(i) = 0
    End Select
  Next i
  
  
  
  
  If Not IsMissing(debugMode) Then
    If debugMode Then
      With DebugSheet
        .Cells.Clear
        For i = LBound(dataSource) To UBound(dataSource)
          .Cells(i, 1).Value = STOCKS_Daily_All(i).Date
          .Cells(i, 2).Value = outputInyou(i)
        Next i
      End With
    End If
  End If
End Sub

Public Function calcHighest(ByRef dataSource() As Double, ByVal Baseline As Long, ByVal Period As Long)
  
  
  
  Dim i As Long
  Dim Highest As Double
  
  Highest = dataSource(Baseline)
  For i = Baseline To Baseline - Period + 1 Step -1
      If dataSource(i) > Highest Then Highest = dataSource(i)
  Next i
  
  calcHighest = Highest
End Function

Public Function calcLowest(ByRef dataSource() As Double, ByVal Baseline As Long, ByVal Period As Long)
  
  
  
  Dim i As Long
  Dim Lowest As Double
  
  Lowest = dataSource(Baseline)
  For i = Baseline To Baseline - Period + 1 Step -1
      If dataSource(i) < Lowest Then Lowest = dataSource(i)
  Next i
  
  calcLowest = Lowest
End Function

'
'
'
'Private Sub calcIR(ByRef IRH() As Long, ByRef IRL() As Long, ByRef High(), ByRef Low(), ByRef n As Long)


'


'






'



'




'



















































'End Sub
'
'
'
'
'Private Sub calcHL(ByRef Output() As Long, ByRef High(), ByRef Low(), ByRef n As Long)


'


'

'






'

'








'



'


























'











'End Sub

Public Sub CalcMACD(ByRef dataSource() As Stock, _
                    ByRef outputMACD() As Double, _
                    ByRef outputSignal() As Double, _
                    ByRef outputOsMA() As Double, _
                    ByVal fastPeriod As Long, _
                    ByVal slowPeriod As Long, _
                    ByVal signalPeriod As Long, _
           Optional ByVal debugMode As Boolean)
  
  
  
  Dim i         As Long
  Dim allClose() As Double
  Dim fastEMA() As Double
  Dim slowEMA() As Double
  
  
  ReDim allClose(LBound(dataSource) To UBound(dataSource))
  For i = LBound(allClose) To UBound(allClose)
    allClose(i) = STOCKS_Daily_All(i).Close
  Next i
  
  
  Call CalcEMA(allClose, fastEMA, fastPeriod)

  
  Call CalcEMA(allClose, slowEMA, slowPeriod)

  
  ReDim outputMACD(LBound(dataSource) To UBound(dataSource))
  For i = LBound(iMACD) To UBound(iMACD)
    outputMACD(i) = fastEMA(i) - slowEMA(i)
  Next i

  
  ReDim outputSignal(LBound(dataSource) To UBound(dataSource))
  Call CalcEMA(outputMACD, outputSignal, signalPeriod)
  
  
  ReDim outputOsMA(LBound(dataSource) To UBound(dataSource))
  For i = LBound(outputOsMA) To UBound(outputOsMA)
    outputOsMA(i) = outputMACD(i) - outputSignal(i)
  Next i
  
  
  Application.ScreenUpdating = False
  With SheetIndexDB
    For i = LBound(dataSource) To UBound(dataSource)
      .Range(macdColumn & i + 1).Value = outputMACD(i)
      .Range(macdSignalColumn & i + 1).Value = outputSignal(i)
      .Range(macdOsciColumn & i + 1).Value = outputOsMA(i)
    Next i
  End With
  Application.ScreenUpdating = True
  
  
  
  
  If Not IsMissing(debugMode) Then
    If debugMode Then
      With DebugSheet
        .Cells.Clear
        For i = LBound(dataSource) To UBound(dataSource)
          .Cells(i, 1).Value = STOCKS_Daily_All(i).Date
          .Cells(i, 2).Value = outputMACD(i)
          .Cells(i, 3).Value = outputSignal(i)
          .Cells(i, 4).Value = outputOsMA(i)
        Next i
      End With
    End If
  End If
End Sub

Public Sub CalcStochastic(ByRef dataSource() As Stock, _
                          ByRef outputK() As Double, _
                          ByRef outputD() As Double, _
                          ByRef outputSlowD() As Double, _
                          ByVal PeriodK As Long, _
                          ByVal PeriodD As Long, _
                          ByVal Slowing As Long, _
                 Optional ByVal debugMode As Boolean)
  
  
  
  Dim i As Long
  Dim j As Long
  Dim NumeratorK()    As Double
  Dim DenominatorK()  As Double
  Dim NumeratorD()    As Double
  Dim DenominatorD()  As Double
  Dim Highest     As Double
  Dim Lowest      As Double
  Dim allHigh()   As Double
  Dim allLow()    As Double
  Dim allClose()  As Double
  
  
  ReDim iStochasticK(LBound(dataSource) To UBound(dataSource))
  ReDim iStochasticD(LBound(dataSource) To UBound(dataSource))
  ReDim iStochasticSlowD(LBound(dataSource) To UBound(dataSource))
  
  
  ReDim NumeratorK(LBound(dataSource) To UBound(dataSource))
  ReDim NumeratorD(LBound(dataSource) To UBound(dataSource))
  
  
  ReDim DenominatorK(LBound(dataSource) To UBound(dataSource))
  ReDim DenominatorD(LBound(dataSource) To UBound(dataSource))
  
  
  ReDim allHigh(LBound(dataSource) To UBound(dataSource))
  For i = LBound(allHigh) To UBound(allHigh)
    allHigh(i) = dataSource(i).High
  Next i
  
  
  ReDim allLow(LBound(dataSource) To UBound(dataSource))
  For i = LBound(allLow) To UBound(allLow)
    allLow(i) = dataSource(i).Low
  Next i
  
  
  ReDim allClose(LBound(dataSource) To UBound(dataSource))
  For i = LBound(allClose) To UBound(allClose)
    allClose(i) = dataSource(i).Close
  Next i
  
  '|fffd||fffd||fffd|[|fffd|v
  For i = PeriodK + 1 To UBound(dataSource)
    
    Highest = calcHighest(allHigh, i, PeriodK)
    
    
    Lowest = calcLowest(allLow, i, PeriodK)
    
    
    NumeratorK(i) = allClose(i) - Lowest
    
    
    DenominatorK(i) = Highest - Lowest

    
    outputK(i) = NumeratorK(i) / DenominatorK(i) * 100

    
    If i >= PeriodK + PeriodD Then
      
      NumeratorD(i) = 0: DenominatorD(i) = 0
      For j = 1 To PeriodD
        
        NumeratorD(i) = NumeratorD(i) + NumeratorK(i - j + 1)
        
        
        DenominatorD(i) = DenominatorD(i) + DenominatorK(i - j + 1)
      Next j
      
      
      outputD(i) = NumeratorD(i) / DenominatorD(i) * 100
    End If
  Next i

  
  Call CalcSMA(outputD, outputSlowD, Slowing)
  
  
  Application.ScreenUpdating = False
  With SheetIndexDB
    For i = LBound(dataSource) To UBound(dataSource)
      .Range(KColumn & i + 1).Value = outputK(i)
      .Range(DColumn & i + 1).Value = outputD(i)
      .Range(slowDColumn & i + 1).Value = outputSlowD(i)
    Next i
  End With
  Application.ScreenUpdating = True
  
  
  
  
  If Not IsMissing(debugMode) Then
    If debugMode Then
      With DebugSheet
        .Cells.Clear
        For i = LBound(dataSource) To UBound(dataSource)
          .Cells(i, 1).Value = STOCKS_Daily_All(i).Date
          .Cells(i, 2).Value = outputK(i)
          .Cells(i, 3).Value = outputD(i)
          .Cells(i, 4).Value = outputSlowD(i)




        Next i
      End With
    End If
  End If
End Sub

Public Sub CalcShinne(ByRef dataSource() As Stock, _
                      ByRef outputShinne() As Long, _
                      ByRef outputShinTakane() As Double, _
                      ByRef outputShinYasune() As Double, _
                      ByVal Period As Long, _
             Optional ByVal debugMode As Double)
  
  
  
  Dim i As Long
  Dim j As Long
  Dim Takane  As Long
  Dim Yasune  As Long
  Dim Honsu   As Long
  Dim allHigh() As Double
  Dim allLow()  As Double
  Dim allClose() As Double
  
  
  ReDim outputShinne(LBound(dataSource) To UBound(dataSource))
  ReDim outputShinTakane(LBound(dataSource) To UBound(dataSource))
  ReDim outputShinYasune(LBound(dataSource) To UBound(dataSource))
  
  
  ReDim allHigh(LBound(dataSource) To UBound(dataSource))
  For i = LBound(dataSource) To UBound(dataSource)
    allHigh(i) = dataSource(i).High
  Next i
  
  
  ReDim allLow(LBound(dataSource) To UBound(dataSource))
  For i = LBound(dataSource) To UBound(dataSource)
    allLow(i) = dataSource(i).Low
  Next i
  
  
  ReDim allClose(LBound(dataSource) To UBound(dataSource))
  For i = LBound(dataSource) To UBound(dataSource)
    allClose(i) = dataSource(i).Close
  Next i
  
  
  outputShinne(LBound(dataSource)) = 0
  outputShinTakane(LBound(dataSource)) = allClose(LBound(allClose))
  outputShinYasune(LBound(dataSource)) = allClose(LBound(allClose))
  
  
  For i = LBound(dataSource) + 1 To UBound(dataSource)
    
    Takane = outputShinTakane(i - 1)
    Yasune = outputShinYasune(i - 1)
    
    
    j = 0: Honsu = 0
    Do
      j = j + 1
      If i - j - 1 = 0 Then Exit Do
      
      If outputShinne(i - j) <> outputShinne(i - j - 1) Then
        Honsu = Honsu + 1
      End If
      
      If outputShinTakane(i - j) > Takane Then Takane = outputShinTakane(i - j)
      If outputShinYasune(i - j) < Yasune Then Yasune = outputShinYasune(i - j)
    Loop Until Honsu = Period
    
    
    If allClose(i) > Takane Then
      
      
      
      outputShinTakane(i) = allClose(i)
      
      
      outputShinYasune(i) = outputShinTakane(i - 1)
      
      
      If outputShinne(i - 1) < 0 Then
        outputShinne(i) = 1
      Else
        outputShinne(i) = outputShinne(i - 1) + 1
      End If
        
    ElseIf allClose(i) < Yasune Then
      
      
      
      outputShinYasune(i) = allClose(i)
      
      
      outputShinTakane(i) = outputShinYasune(i - 1)
      
      
      If outputShinne(i - 1) > 0 Then
        outputShinne(i) = -1
      Else
        outputShinne(i) = outputShinne(i - 1) - 1
      End If
    Else
      
      outputShinne(i) = outputShinne(i - 1)
      outputShinTakane(i) = outputShinTakane(i - 1)
      outputShinYasune(i) = outputShinYasune(i - 1)
    End If
  Next i
  
  
  
  
  If Not IsMissing(debugMode) Then
    If debugMode Then
      With DebugSheet
        .Cells.Clear
        For i = LBound(dataSource) To UBound(dataSource)
          .Cells(i, 1).Value = dataSource(i).Date
          .Cells(i, 2).Value = outputShinne(i)
          .Cells(i, 3).Value = outputShinTakane(i)
          .Cells(i, 4).Value = outputShinYasune(i)
        Next i
      End With
    End If
  End If
End Sub


Public Sub CalcRCI(ByRef dataSource() As Stock, ByRef outputRCI, ByVal Period As Long, Optional ByVal debugMode As Boolean)
  
  
  
  Dim i As Long
  Dim d           As Double
  Dim counterBar
  Dim counterTime
  Dim counterRank
  Dim tableRank() As Double
  Dim allClose()  As Double
  
  
  ReDim outputRCI(LBound(dataSource) To UBound(dataSource))

  
  ReDim tableRank(LBound(dataSource) To UBound(dataSource))
  
  
  ReDim allClose(LBound(dataSource) To UBound(dataSource))
  For i = LBound(dataSource) To UBound(dataSource)
    allClose(i) = dataSource(i).Close
  Next i
  
  
  For counterBar = Period To UBound(dataSource)
    
    d = 0
    For counterTime = 1 To Period
      tableRank(counterBar - counterTime + 1) = 1
      For counterRank = 1 To Period
          If allClose(counterBar - counterTime + 1) < allClose(counterBar - counterRank + 1) Then tableRank(counterBar - counterTime + 1) = tableRank(counterBar - counterTime + 1) + 1
          If allClose(counterBar - counterTime + 1) = allClose(counterBar - counterRank + 1) Then tableRank(counterBar - counterTime + 1) = tableRank(counterBar - counterTime + 1) + 0.5
      Next counterRank
      tableRank(counterBar - counterTime + 1) = tableRank(counterBar - counterTime + 1) - 0.5
      d = d + (counterTime - tableRank(counterBar - counterTime + 1)) ^ 2
    Next counterTime
    outputRCI(counterBar) = (1 - (6 * d) / (Period ^ 3 - Period)) * 100
  Next counterBar
  
  
  Application.ScreenUpdating = False
  With SheetIndexDB
    For i = LBound(dataSource) To UBound(dataSource)
      Select Case Period
        Case 6
          .Range(rci6Column & i + 1).Value = outputRCI(i)
        Case 9
          .Range(rci9Column & i + 1).Value = outputRCI(i)
      End Select
    Next i
  End With
  Application.ScreenUpdating = True
  
  
  
  
  If Not IsMissing(debugMode) Then
    If debugMode Then
      With DebugSheet
        .Cells.Clear
        For i = LBound(dataSource) To UBound(dataSource)
          .Cells(i, 1).Value = dataSource(i).Date
          .Cells(i, 2).Value = outputRCI(i)
        Next i
      End With
    End If
  End If
End Sub

'
'
'
'Private Sub calcCCI(ByRef CCI(), ByRef DataSource(), ByVal n As Long)

'





'






'


'





'


'
'






'End Sub

'Private Function calcRSI(numRSI, dbCloseA) As Variant







'















'End Function
'
'
'
'Private Sub calcHSVola(ByRef dbHSVola(), ByRef DataSource(), ByVal n As Long)

'


'

'




'


'




'End Sub

Public Sub CalcATR(ByRef dataSource() As Stock, _
                   ByRef outputATR() As Double, _
                   ByVal Period As Long, _
          Optional ByVal debugMode As Boolean)
  
  
  
  Dim i As Long
  Dim j As Long
  Dim TR() As Double
  Dim TR1 As Long, TR2 As Long, TR3 As Long
  Dim allClose() As Double
  
  ReDim TR(LBound(dataSource) To UBound(dataSource))
  ReDim outputATR(LBound(dataSource) To UBound(dataSource))

  
  For i = LBound(dataSource) + 1 To UBound(dataSource)
    
    TR1 = dataSource(i).High - dataSource(i).Low
    
    TR2 = dataSource(i).High - dataSource(i - 1).Close
    
    TR3 = dataSource(i - 1).Close - dataSource(i).Low
    
    TR(i) = TR1
    If TR(i) < TR2 Then TR(i) = TR2
    If TR(i) < TR3 Then TR(i) = TR3
  Next i

  
  Call CalcSMA(TR, outputATR, Period)
  
  
  
  
  If debugMode Then
    With DebugSheet
      .Cells.Clear
      For i = LBound(dataSource) To UBound(dataSource)
        .Cells(i, 1).Value = dataSource(i).Date
        .Cells(i, 2).Value = outputATR(i)
      Next i
    End With
  End If
End Sub

Public Sub CalcATRBand( _
         ByRef dataSource() As Stock, _
         ByRef outputATRM() As Double, _
         ByRef outputATRH() As Double, _
         ByRef outputATRL() As Double, _
         ByVal Period As Long, _
         ByVal Magnification As Double, _
Optional ByVal debugMode As Boolean)
  
  
  
  Dim i As Long
  Dim myATR() As Double
  Dim allClose() As Double
  
  ReDim myATR(LBound(dataSource) To UBound(dataSource))
  ReDim outputATRM(LBound(dataSource) To UBound(dataSource))
  ReDim outputATRH(LBound(dataSource) To UBound(dataSource))
  ReDim outputATRL(LBound(dataSource) To UBound(dataSource))
  
  
  Call CalcATR(dataSource, myATR, Period)

  
  ReDim allClose(LBound(dataSource) To UBound(dataSource))
  For i = LBound(dataSource) To UBound(dataSource)
    allClose(i) = dataSource(i).Close
  Next i

  
  Call CalcSMA(allClose, outputATRM, Period)

  
  For i = LBound(dataSource) To UBound(dataSource)
    outputATRH(i) = outputATRM(i) + myATR(i) * Magnification
    outputATRL(i) = outputATRM(i) - myATR(i) * Magnification
  Next i
  
  
  Application.ScreenUpdating = False
  With SheetIndexDB
    For i = LBound(dataSource) To UBound(dataSource)
      .Range(atrhColumn & i + 1).Value = outputATRH(i)
      .Range(atrmColumn & i + 1).Value = outputATRM(i)
      .Range(atrlColumn & i + 1).Value = outputATRL(i)
    Next i
  End With
  Application.ScreenUpdating = True
  
  
  
  
  If debugMode Then
    With DebugSheet
      .Cells.Clear
      For i = LBound(dataSource) To UBound(dataSource)
        .Cells(i, 1).Value = dataSource(i).Date
        .Cells(i, 2).Value = outputATRH(i)
        .Cells(i, 3).Value = outputATRM(i)
        .Cells(i, 4).Value = outputATRL(i)
      Next i
    End With
  End If
End Sub

Public Sub CalcBollingerBand( _
         ByRef dataSource() As Stock, _
         ByRef output00() As Double, _
         ByRef output01() As Double, _
         ByRef output02() As Double, _
         ByRef output03() As Double, _
         ByRef output11() As Double, _
         ByRef output12() As Double, _
         ByRef output13() As Double, _
         ByVal Period As Long, _
Optional ByVal debugMode As Boolean)
  
  
  
  Dim i As Long
  Dim j As Long
  Dim Total       As Double
  Dim Heikin      As Double
  Dim Hensa       As Double
  Dim Bunsan      As Double
  Dim HyojunHensa As Double
  Dim allClose()  As Double
  
  
  ReDim output00(LBound(dataSource) To UBound(dataSource))
  ReDim output01(LBound(dataSource) To UBound(dataSource))
  ReDim output02(LBound(dataSource) To UBound(dataSource))
  ReDim output03(LBound(dataSource) To UBound(dataSource))
  ReDim output11(LBound(dataSource) To UBound(dataSource))
  ReDim output12(LBound(dataSource) To UBound(dataSource))
  ReDim output13(LBound(dataSource) To UBound(dataSource))
  
  
  ReDim allClose(LBound(dataSource) To UBound(dataSource))
  For i = LBound(dataSource) To UBound(dataSource)
    allClose(i) = dataSource(i).Close
  Next i
  
  
  For i = Period To UBound(dataSource)
    
    Total = 0
    For j = i - Period + 1 To i
        Total = Total + allClose(j)
    Next j
    Heikin = Total / Period
    
    
    Bunsan = 0
    For j = i - Period + 1 To i
      
      Hensa = allClose(j) - Heikin
      
      Bunsan = Bunsan + Hensa ^ 2
    Next j
    
    
    Bunsan = Bunsan / Period
    
    
    HyojunHensa = Sqr(Bunsan)
    
    
    output00(i) = Heikin
    output01(i) = Heikin + HyojunHensa
    output02(i) = Heikin + HyojunHensa * 2
    output03(i) = Heikin + HyojunHensa * 3
    output11(i) = Heikin - HyojunHensa
    output12(i) = Heikin - HyojunHensa * 2
    output13(i) = Heikin - HyojunHensa * 3
  Next i
  
  
  
  Application.ScreenUpdating = False
  With SheetIndexDB
    For i = LBound(dataSource) To UBound(dataSource)
      .Range(bBands03Column & i + 1).Value = output03(i)
      .Range(bBands02Column & i + 1).Value = output02(i)
      .Range(bBands01Column & i + 1).Value = output01(i)
      .Range(bBands00Column & i + 1).Value = output00(i)
      .Range(bBands11Column & i + 1).Value = output11(i)
      .Range(bBands12Column & i + 1).Value = output12(i)
      .Range(bBands13Column & i + 1).Value = output13(i)
    Next i
  End With
  Application.ScreenUpdating = True
  
  
  
  
  If debugMode Then
    With DebugSheet
      .Cells.Clear
      For i = LBound(dataSource) To UBound(dataSource)
        .Cells(i, 1).Value = dataSource(i).Date
        .Cells(i, 2).Value = output03(i)
        .Cells(i, 3).Value = output02(i)
        .Cells(i, 4).Value = output01(i)
        .Cells(i, 5).Value = output00(i)
        .Cells(i, 6).Value = output11(i)
        .Cells(i, 7).Value = output12(i)
        .Cells(i, 8).Value = output13(i)
      Next i
    End With
  End If
End Sub

'Private Sub calcHV(ByRef Output(), ByVal Period As Long)
'
'
'

'

'

'





'


'
'End Sub

Public Sub CalcPara(ByRef dataSource() As Stock, _
                    ByRef outputPara() As Long, _
                    ByVal stepAF As Double, _
                    ByVal maxEP As Double, _
           Optional ByVal debugMode As Boolean)
  
  
  
  Dim i           As Long
  Dim SAR         As Double
  Dim EP          As Long
  Dim AF          As Double
  Dim allHigh()   As Double
  Dim allLow()    As Double
  Dim allClose()  As Double
  
  
  ReDim outputPara(LBound(dataSource) To UBound(dataSource))
  
  
  ReDim allHigh(LBound(dataSource) To UBound(dataSource))
  For i = LBound(dataSource) To UBound(dataSource)
    allHigh(i) = dataSource(i).High
  Next i
  
  
  ReDim allLow(LBound(dataSource) To UBound(dataSource))
  For i = LBound(dataSource) To UBound(dataSource)
    allLow(i) = dataSource(i).Low
  Next i
  
  
  ReDim allClose(LBound(dataSource) To UBound(dataSource))
  For i = LBound(dataSource) To UBound(dataSource)
    allClose(i) = dataSource(i).Close
  Next i
  
  
  SAR = allHigh(LBound(allHigh))
  
  
  EP = allLow(LBound(allLow))
  
  
  AF = stepAF

  
  For i = LBound(dataSource) + 1 To UBound(dataSource)
    
    If outputPara(i - 1) > 0 Then
      
      
      
      If allLow(i) < SAR Then
        
        
        outputPara(i) = -1
        
        SAR = EP
        
        EP = allLow(i)
        
        AF = stepAF
      Else
        
        
        
        outputPara(i) = outputPara(i - 1) + 1
        
        If allHigh(i) > EP Then
          
          EP = allHigh(i)
          
          AF = AF + stepAF
          
          If AF > maxEP Then AF = maxEP
        End If
      End If
    Else
      
      
      
      If allHigh(i) > SAR Then
        
        
        outputPara(i) = 1
        
        SAR = EP
        
        EP = allHigh(i)
        
        AF = stepAF
      Else
        
        
        
        outputPara(i) = outputPara(i - 1) - 1
        
        If allLow(i) < EP Then
          
          EP = allLow(i)
          
          AF = AF + stepAF
          
          If AF > maxEP Then AF = maxEP
        End If
      End If
    End If
    
    SAR = SAR + (EP - SAR) * AF
  Next i
  
  
  
  
  If Not IsMissing(debugMode) Then
    If debugMode Then
      With DebugSheet
        .Cells.Clear
        For i = LBound(dataSource) To UBound(dataSource)
          .Cells(i, 1).Value = STOCKS_Daily_All(i).Date
          .Cells(i, 2).Value = outputPara(i)
        Next i
      End With
    End If
  End If
End Sub

Private Sub CalcSakata(ByRef dataSource() As Stock, _
                       ByRef outputSakataY() As Long, _
                       ByRef outputSakataI() As Long, _
                       ByVal Period As Long, _
              Optional ByVal debugMode As Boolean)
  
  
  
  
  ReDim outputSakataY(LBound(dataSource) To UBound(dataSource))
  ReDim outputSakataI(LBound(dataSource) To UBound(dataSource))
  
  Dim i               As Long
  Dim tmpHigh         As Long
  Dim tmpLow          As Long
  Dim updateHighFlag  As Boolean
  Dim updateLowFlag   As Boolean
  
  
  For i = LBound(dataSource) + 1 To UBound(dataSource)
    
    outputSakataY(i) = outputSakataY(i - 1)
    
    
    outputSakataI(i) = outputSakataI(i - 1)
    
    
    If tmpHigh < dataSource(i).High Then
      updateHighFlag = True
      tmpHigh = dataSource(i).High
    Else
      updateHighFlag = False
    End If
    
    
    If tmpLow > dataSource(i).Low Then
      updateLowFlag = True
      tmpLow = dataSource(i).Low
    Else
      updateLowFlag = False
    End If
    
    
    If dataSource(i).Open < dataSource(i).Close Then
      
      
      
      If updateHighFlag Then
        
        
        
        outputSakataY(i) = outputSakataY(i - 1) + 1
        
        
        If outputSakataY(i) >= Period Then
          
          outputSakataI(i) = 0
          
          
          tmpLow = 999999
        End If
      Else
        
        
        
        If outputSakataY(i - 1) = 0 Then
          outputSakataY(i) = 1
          tmpHigh = dataSource(i).High
        End If
      End If
    ElseIf dataSource(i).Open > dataSource(i).Close Then
      
      
      
      If updateLowFlag Then
        
        
        
        outputSakataI(i) = outputSakataI(i - 1) + 1
        
        
        If outputSakataI(i) >= Period Then
          
          outputSakataY(i) = 0
          
          
          tmpHigh = 0
        End If
      Else
        
        
        
        If outputSakataI(i - 1) = 0 Then
          outputSakataI(i) = 1
          tmpLow = dataSource(i).Low
        End If
      End If
    End If
  Next i

  
  
  
  If Not IsMissing(debugMode) Then
    If debugMode Then
      With DebugSheet
        .Cells.Clear
        For i = LBound(dataSource) To UBound(dataSource)
          .Cells(i, 1).Value = STOCKS_Daily_All(i).Date
          .Cells(i, 2).Value = outputSakataY(i)
          .Cells(i, 3).Value = outputSakataI(i)
        Next i
      End With
    End If
  End If
End Sub

Public Sub CalcROC(ByRef dataSource() As Stock, ByRef outputROC() As Double, ByVal Period As Long, Optional ByVal debugMode As Boolean)
  
  
  
  Dim i           As Long
  Dim allClose()  As Double
  
  
  ReDim outputROC(LBound(dataSource) To UBound(dataSource))
  
  
  ReDim allClose(LBound(dataSource) To UBound(dataSource))
  For i = LBound(dataSource) To UBound(dataSource)
    allClose(i) = dataSource(i).Close
  Next i

  
  For i = LBound(dataSource) + Period To UBound(dataSource)
    outputROC(i) = allClose(i) / allClose(i - Period) * 100 - 100
  Next i
  
  
  
  
  If debugMode Then
    With DebugSheet
      .Cells.Clear
      For i = LBound(dataSource) To UBound(dataSource)
        .Cells(i, 1).Value = dataSource(i).Date
        .Cells(i, 2).Value = outputROC(i)
      Next i
    End With
  End If
End Sub

Public Sub CalcDMI(ByRef dataSource() As Stock, _
                   ByRef outputDIp() As Double, _
                   ByRef outputDIm() As Double, _
                   ByVal Period As Long, _
          Optional ByVal debugMode As Boolean)
  
  
  
  Dim i As Long
  Dim j As Long
  Dim sumDMp  As Long
  Dim sumDMm  As Long
  Dim sumTR   As Long
  Dim DMp() As Double
  Dim DMm() As Double
  Dim TR()  As Double
  Dim allHigh() As Double
  Dim allLow() As Double
  Dim allClose()  As Double

  
  ReDim outputDIp(LBound(dataSource) To UBound(dataSource))
  ReDim outputDIm(LBound(dataSource) To UBound(dataSource))
  
  ReDim DMp(LBound(dataSource) To UBound(dataSource))
  ReDim DMm(LBound(dataSource) To UBound(dataSource))
  ReDim TR(LBound(dataSource) To UBound(dataSource))
  
  
  ReDim allHigh(LBound(dataSource) To UBound(dataSource))
  For i = LBound(dataSource) To UBound(dataSource)
    allHigh(i) = dataSource(i).High
  Next i
  
  
  ReDim allLow(LBound(dataSource) To UBound(dataSource))
  For i = LBound(dataSource) To UBound(dataSource)
    allLow(i) = dataSource(i).Low
  Next i
  
  
  ReDim allClose(LBound(dataSource) To UBound(dataSource))
  For i = LBound(dataSource) To UBound(dataSource)
    allClose(i) = dataSource(i).Close
  Next i
  
  
  For i = LBound(dataSource) + 1 To UBound(dataSource)
    
    DMp(i) = allHigh(i) - allHigh(i - 1)
    
    DMm(i) = allLow(i - 1) - allLow(i)
    
    
    If DMp(i) < 0 Then DMp(i) = 0
    
    If DMm(i) < 0 Then DMm(i) = 0
    
    
    If DMp(i) < DMm(i) Then DMp(i) = 0
    
    If DMm(i) < DMp(i) Then DMm(i) = 0
    
    
    TR(i) = WorksheetFunction.Max(allHigh(i), allClose(i - 1)) - WorksheetFunction.Min(allLow(i), allClose(i - 1))
    
    
    If i > Period Then
      
      sumDMp = 0: sumDMm = 0: sumTR = 0
      For j = i To i - Period + 1 Step -1
        
        sumDMp = sumDMp + DMp(j)
        
        sumDMm = sumDMm + DMm(j)
        
        sumTR = sumTR + TR(j)
      Next j
      
      
      outputDIp(i) = sumDMp / sumTR * 100
      
      outputDIm(i) = sumDMm / sumTR * 100
      
    End If
  Next i
  
  
  
  
  If debugMode Then
    With DebugSheet
      .Cells.Clear
      For i = LBound(dataSource) To UBound(dataSource)
        .Cells(i, 1).Value = dataSource(i).Date
        .Cells(i, 2).Value = outputDIp(i)
        .Cells(i, 3).Value = outputDIm(i)
      Next i
    End With
  End If
End Sub

Public Sub CalcWatashi(ByRef dataSource() As Stock)
  
  
  
  Dim trendUp(3)    As Double
  Dim trendDown(3)  As Double
  Dim trendMochi(3) As Double
  
  Dim i As Long
  Dim j As Long
  
  
  ReDim iWatashi(LBound(dataSource) To UBound(dataSource))
  
  
  For i = LBound(dataSource) + 1 To UBound(dataSource)
    
    If iSMA5(i) - iSMA5(i - 1) >= iSMA5(i - 1) * 0.002 And iSMA25(i) - iSMA25(i - 1) >= iSMA25(i - 1) * 0.002 Then
      trendUp(1) = 2
    ElseIf iSMA5(i) - iSMA5(i - 1) >= iSMA5(i - 1) * 0.002 Then
      trendUp(1) = 1
    Else
      trendUp(1) = 0
    End If
    
    If iSMA5(i) - iSMA5(i - 1) <= iSMA5(i - 1) * 0.002 * -1 And iSMA25(i) - iSMA25(i - 1) <= iSMA25(i - 1) * 0.002 * -1 Then
      trendDown(1) = 2
    ElseIf iSMA5(i) - iSMA5(i - 1) <= iSMA5(i - 1) * 0.002 * -1 Then
      trendDown(1) = 1
    Else
      trendDown(1) = 0
    End If
    
    If Abs(iSMA5(i) - iSMA5(i - 1)) < iSMA5(i - 1) * 0.002 And Abs(iSMA25(i) - iSMA25(i - 1)) < iSMA25(i - 1) * 0.002 Then
      trendMochi(1) = 2
    ElseIf Abs(iSMA5(i) - iSMA5(i - 1)) < iSMA5(i - 1) * 0.002 Then
      trendMochi(1) = 1
    Else
      trendMochi(1) = 0
    End If
    
    
    If iMACD(i) > iMACD(i - 1) And iOsMA(i) > iOsMA(i - 1) And iOsMA(i) > 0 Then
      trendUp(2) = 2
    ElseIf iOsMA(i) > 0 Then
      trendUp(2) = 1
    Else
      trendUp(2) = 0
    End If
    
    If iMACD(i) < iMACD(i - 1) And iOsMA(i) < iOsMA(i - 1) And iOsMA(i) < 0 Then
      trendDown(2) = 2
    ElseIf iOsMA(i) < 0 Then
      trendDown(2) = 1
    Else
      trendDown(2) = 0
    End If
    
    If Abs(iOsMA(i)) <= 20 Then
      trendMochi(2) = 2
    ElseIf Abs(iOsMA(i)) <= 40 Then
      trendMochi(2) = 1
    Else
      trendMochi(2) = 0
    End If
    
    
    If iDIp(i) >= 30 Then
      trendUp(3) = 2
    ElseIf iDIp(i) >= 20 Then
      trendUp(3) = 1
    Else
      trendUp(3) = 0
    End If
    
    If iDIm(i) >= 30 Then
      trendDown(3) = 2
    ElseIf iDIm(i) >= 20 Then
      trendDown(3) = 1
    Else
      trendDown(3) = 0
    End If
    
    If Abs(iDIp(i) - iDIm(i)) <= 10 Then
      trendMochi(3) = 2
    ElseIf Abs(iDIp(i) - iDIm(i)) <= 20 Then
      trendMochi(3) = 1
    Else
      trendMochi(3) = 0
    End If
    
    
    trendUp(0) = (trendUp(1) + trendUp(2) + trendUp(3)) / 3
    trendDown(0) = (trendDown(1) + trendDown(2) + trendDown(3)) / 3
    trendMochi(0) = (trendMochi(1) + trendMochi(2) + trendMochi(3)) / 3
    
    If trendMochi(0) >= 2 Then
      iWatashi(i) = "|fffd||6cd||fffd|"
    ElseIf trendUp(0) >= 1 Then
      iWatashi(i) = "|fffd||33f8|"
    ElseIf trendDown(0) >= 1 Then
      iWatashi(i) = "|fffd||fffd||fffd|~"
    Else
      iWatashi(i) = "|fffd||6cd||fffd|"
    End If
  Next i
End Sub

'
'
'
'Private Sub calcUO(ByRef dbUO())

'


'


'


'

'

'






'






'


'


'

'





'





'





'

'


'
'
'
'
'
'End Sub

Public Sub CalcMAE( _
         ByRef dataSource() As Stock, _
         ByRef output00() As Double, _
         ByRef output01() As Double, _
         ByRef output02() As Double, _
         ByRef output03() As Double, _
         ByRef output11() As Double, _
         ByRef output12() As Double, _
         ByRef output13() As Double, _
         ByVal Period As Long, _
Optional ByVal debugMode As Boolean)
  
  
  
  Dim i As Long
  Dim j As Long
  Dim allClose() As Double
  
  
  ReDim output00(LBound(dataSource) To UBound(dataSource))
  ReDim output01(LBound(dataSource) To UBound(dataSource))
  ReDim output02(LBound(dataSource) To UBound(dataSource))
  ReDim output03(LBound(dataSource) To UBound(dataSource))
  ReDim output11(LBound(dataSource) To UBound(dataSource))
  ReDim output12(LBound(dataSource) To UBound(dataSource))
  ReDim output13(LBound(dataSource) To UBound(dataSource))
  
  
  ReDim allClose(LBound(dataSource) To UBound(dataSource))
  For i = LBound(dataSource) To UBound(dataSource)
    allClose(i) = dataSource(i).Close
  Next i
  
  
  Call CalcSMA(allClose, output00, Period)
  
  '|fffd||fffd||fffd|[|fffd|v
  For i = LBound(dataSource) To UBound(dataSource)
    
    output01(i) = output00(i) + output00(i) * 2.5 / 100
    output02(i) = output00(i) + output00(i) * 5 / 100
    output03(i) = output00(i) + output00(i) * 7.5 / 100
    output11(i) = output00(i) + output00(i) * -2.5 / 100
    output12(i) = output00(i) + output00(i) * -5 / 100
    output13(i) = output00(i) + output00(i) * -7.5 / 100
  Next i
  
  
  Application.ScreenUpdating = False
  With SheetIndexDB
    For i = LBound(dataSource) To UBound(dataSource)
      .Range(mae03Column & i + 1).Value = output03(i)
      .Range(mae02Column & i + 1).Value = output02(i)
      .Range(mae01Column & i + 1).Value = output01(i)
      .Range(mae00Column & i + 1).Value = output00(i)
      .Range(mae11Column & i + 1).Value = output11(i)
      .Range(mae12Column & i + 1).Value = output12(i)
      .Range(mae13Column & i + 1).Value = output13(i)
    Next i
  End With
  Application.ScreenUpdating = True
  
  
  
  
  If debugMode Then
    With DebugSheet
      .Cells.Clear
      For i = LBound(dataSource) To UBound(dataSource)
        .Cells(i, 1).Value = STOCKS_Daily_All(i).Date
        .Cells(i, 2).Value = output03(i)
        .Cells(i, 3).Value = output02(i)
        .Cells(i, 4).Value = output01(i)
        .Cells(i, 5).Value = output00(i)
        .Cells(i, 6).Value = output11(i)
        .Cells(i, 7).Value = output12(i)
        .Cells(i, 8).Value = output13(i)
      Next i
    End With
  End If
End Sub

Public Sub CalcHLBand( _
         ByRef dataSource() As Stock, _
         ByRef outputHighLine() As Double, _
         ByRef outputCenterLine() As Double, _
         ByRef outputLowLine() As Double, _
         ByVal Period As Long, _
Optional ByVal debugMode As Boolean)
  
  
  
  Dim i As Long
  Dim j As Long
  Dim allHigh()   As Double
  Dim allLow()    As Double
  
  
  ReDim outputHighLine(LBound(dataSource) To UBound(dataSource))
  ReDim outputCenterLine(LBound(dataSource) To UBound(dataSource))
  ReDim outputLowLine(LBound(dataSource) To UBound(dataSource))
  
  
  ReDim allHigh(LBound(dataSource) To UBound(dataSource))
  For i = LBound(allHigh) To UBound(allHigh)
    allHigh(i) = dataSource(i).High
  Next i
  
  
  ReDim allLow(LBound(dataSource) To UBound(dataSource))
  For i = LBound(allLow) To UBound(allLow)
    allLow(i) = dataSource(i).Low
  Next i
  
  '|fffd||fffd||fffd|[|fffd|v
  For i = LBound(dataSource) + Period To UBound(dataSource)
    
    outputHighLine(i) = calcHighest(allHigh, i, Period + 1)
    
    outputLowLine(i) = calcLowest(allLow, i, Period + 1)
    
    outputCenterLine(i) = (outputHighLine(i) + outputLowLine(i)) / 2
  Next i
  
  
  Application.ScreenUpdating = False
  With SheetIndexDB
    For i = LBound(dataSource) To UBound(dataSource)
      .Range(hlhColumn & i + 1).Value = outputHighLine(i)
      .Range(hlmColumn & i + 1).Value = outputCenterLine(i)
      .Range(hllColumn & i + 1).Value = outputLowLine(i)
    Next i
  End With
  Application.ScreenUpdating = True
  
  
  
  
  If debugMode Then
    With DebugSheet
      .Cells.Clear
      For i = LBound(dataSource) To UBound(dataSource)
        .Cells(i, 1).Value = STOCKS_Daily_All(i).Date
        .Cells(i, 2).Value = outputHighLine(i)
        .Cells(i, 3).Value = outputLowLine(i)
      Next i
    End With
  End If
End Sub

Public Sub CalcIchimoku( _
  ByRef dataSource() As Stock, _
  ByRef outputTenkan() As Double, _
  ByRef outputKijun() As Double, _
  ByRef outputSenkou1() As Double, _
  ByRef outputSenkou2() As Double, _
  ByRef outputChikou() As Double, _
  ByVal tenkanPeriod As Long, _
  ByVal kijunPeriod As Long, _
  ByVal spanPeriod As Long, _
  Optional ByVal debugMode As Boolean)
  
  
  
  Dim i As Long
  Dim j As Long
  Dim allHigh()   As Double
  Dim allLow()    As Double
  
  
  ReDim outputTenkan(LBound(dataSource) To UBound(dataSource))
  ReDim outputKijun(LBound(dataSource) To UBound(dataSource))
  ReDim outputSenkou1(LBound(dataSource) To UBound(dataSource) + spanPeriod)
  ReDim outputSenkou2(LBound(dataSource) To UBound(dataSource) + spanPeriod * 2)
  ReDim outputChikou(LBound(dataSource) To UBound(dataSource))
  
  
  ReDim allHigh(LBound(dataSource) To UBound(dataSource))
  For i = LBound(allHigh) To UBound(allHigh)
    allHigh(i) = dataSource(i).High
  Next i
  
  
  ReDim allLow(LBound(dataSource) To UBound(dataSource))
  For i = LBound(allLow) To UBound(allLow)
    allLow(i) = dataSource(i).Low
  Next i
  
  '|fffd||fffd||fffd|[|fffd|v
  For i = LBound(dataSource) To UBound(dataSource)
    If i > tenkanPeriod Then
      
      outputTenkan(i) = (calcHighest(allHigh, i, tenkanPeriod) + calcLowest(allLow, i, tenkanPeriod)) / 2
    End If
    
    If i > kijunPeriod Then
      
      outputKijun(i) = (calcHighest(allHigh, i, kijunPeriod) + calcLowest(allLow, i, kijunPeriod)) / 2
    End If
    
    If i > spanPeriod Then
      
      outputSenkou1(i + spanPeriod - 1) = (outputTenkan(i) + outputKijun(i)) / 2
    End If
    
    If i > spanPeriod * 2 Then
      
      outputSenkou2(i + spanPeriod - 1) = (calcHighest(allHigh, i, spanPeriod * 2) + calcLowest(allLow, i, spanPeriod * 2)) / 2
    End If
    
    If i > spanPeriod Then
      
      outputChikou(i - spanPeriod + 1) = dataSource(i).Close
    End If
  Next i
  
  
  Application.ScreenUpdating = False
  With SheetIndexDB
    For i = LBound(dataSource) To UBound(dataSource)
      .Range(ichimokuTenkanColumn & i + 1).Value = outputTenkan(i)
      .Range(ichimokuKijunColumn & i + 1).Value = outputKijun(i)
      .Range(ichimokuSenkou1Column & i + 1).Value = outputSenkou1(i)
      .Range(ichimokuSenkou2Column & i + 1).Value = outputSenkou2(i)
      .Range(ichimokuChikouColumn & i + 1).Value = outputChikou(i)
    Next i
  End With
  Application.ScreenUpdating = True
  
  
  
  
  If Not IsMissing(debugMode) Then
    If debugMode Then
      With DebugSheet
        .Cells.Clear
        For i = LBound(dataSource) To UBound(dataSource)
          .Cells(i, 1).Value = STOCKS_Daily_All(i).Date
          .Cells(i, 2).Value = outputTenkan(i)
          .Cells(i, 3).Value = outputKijun(i)
          .Cells(i, 3).Value = outputSenkou1(i)
          .Cells(i, 3).Value = outputSenkou2(i)
          .Cells(i, 3).Value = outputChikou(i)
        Next i
      End With
    End If
  End If
End Sub



Attribute VB_Name = "public_module"
Option Explicit

Public Const dateColumn             As String = "A"
Public Const nightOpenColumn        As String = "B"
Public Const nightHighColumn        As String = "C"
Public Const nightLowColumn         As String = "D"
Public Const nightCloseColumn       As String = "E"
Public Const nightVolumeColumn      As String = "F"
Public Const dayOpenColumn          As String = "G"
Public Const dayHighColumn          As String = "H"
Public Const dayLowColumn           As String = "I"
Public Const dayCloseColumn         As String = "J"
Public Const dayVolumeColumn        As String = "K"
Public Const allOpenColumn          As String = "L"
Public Const allHighColumn          As String = "M"
Public Const allLowColumn           As String = "N"
Public Const allCloseColumn         As String = "O"
Public Const allVolumeColumn        As String = "P"
Public Const sma5Column             As String = "Q"
Public Const sma25Column            As String = "R"
Public Const sma75Column            As String = "S"
Public Const ema5Column             As String = "T"
Public Const ema25Column            As String = "U"
Public Const ema75Column            As String = "V"
Public Const bBands03Column         As String = "W"
Public Const bBands02Column         As String = "X"
Public Const bBands01Column         As String = "Y"
Public Const bBands00Column         As String = "Z"
Public Const bBands11Column         As String = "AA"
Public Const bBands12Column         As String = "AB"
Public Const bBands13Column         As String = "AC"
Public Const atrhColumn             As String = "AD"
Public Const atrmColumn             As String = "AE"
Public Const atrlColumn             As String = "AF"
Public Const mae03Column            As String = "AG"
Public Const mae02Column            As String = "AH"
Public Const mae01Column            As String = "AI"
Public Const mae00Column            As String = "AJ"
Public Const mae11Column            As String = "AK"
Public Const mae12Column            As String = "AL"
Public Const mae13Column            As String = "AM"
Public Const hlhColumn              As String = "AN"
Public Const hlmColumn              As String = "AO"
Public Const hllColumn              As String = "AP"
Public Const ichimokuTenkanColumn   As String = "AQ"
Public Const ichimokuKijunColumn    As String = "AR"
Public Const ichimokuSenkou1Column  As String = "AS"
Public Const ichimokuSenkou2Column  As String = "AT"
Public Const ichimokuChikouColumn   As String = "AU"

Public Const KColumn                As String = "AV"
Public Const DColumn                As String = "AW"
Public Const slowDColumn            As String = "AX"
Public Const macdColumn             As String = "AY"
Public Const macdSignalColumn       As String = "AZ"
Public Const macdOsciColumn         As String = "BA"
Public Const rci6Column             As String = "BB"
Public Const rci9Column             As String = "BC"

Public Const mainSheetTitleRow      As Long = 10
Public Const mainSheetDataStartRow  As Long = 11

Public Function ReadATRH(ByVal targetDate As Date) As Double
  
  
  
  Dim lastRow As Long
  Dim rangeFind As Range
  
  
  With SheetIndexDB
    
    lastRow = .Range("A" & .Rows.Count).End(xlUp).Row
    
    Set rangeFind = .Range("A:A").Find(What:=targetDate, LookIn:=xlFormulas)
    
    If rangeFind Is Nothing Then
      ReadATRH = 0
    Else
      ReadATRH = .Cells(rangeFind.Row, atrhColumn).Value
    End If
  End With
End Function

Public Function ReadATRL(ByVal targetDate As Date) As Double
  
  
  
  Dim lastRow As Long
  Dim rangeFind As Range
  
  
  With SheetIndexDB
    
    lastRow = .Range("A" & .Rows.Count).End(xlUp).Row
    
    Set rangeFind = .Range("A:A").Find(What:=targetDate, LookIn:=xlFormulas)
    
    If rangeFind Is Nothing Then
      ReadATRL = 0
    Else
      ReadATRL = .Cells(rangeFind.Row, atrlColumn).Value
    End If
  End With
End Function

Public Function AddTradeDate(ByVal targetDate As Date, ByVal periodDays As Long) As Date
  
  
  
  Dim lastRow As Long
  Dim rangeFind As Range
  
  
  With SheetIndexDB
    
    lastRow = .Range("A" & .Rows.Count).End(xlUp).Row
    
    Set rangeFind = .Range("A:A").Find(What:=targetDate, LookIn:=xlFormulas)
    
    If rangeFind Is Nothing Then
      AddTradeDate = #1/1/1900#
    Else
      AddTradeDate = .Cells(rangeFind.Row + periodDays, 1).Value
    End If
  End With
End Function

Public Function DateToIndexRow(ByVal targetDate As Date) As Long
  
  
  
  Dim rangeFind As Range
  
  
  With SheetIndexDB
    Set rangeFind = .Range("A:A").Find(What:=targetDate, LookIn:=xlFormulas)
    
    If rangeFind Is Nothing Then
      DateToIndexRow = 0
    Else
      DateToIndexRow = rangeFind.Row
    End If
  End With
End Function

Public Function IsUserformOpen(userformName As String) As Boolean
  Dim objUserform As Object
  
  IsUserformOpen = False
  
  '|fffd||fffd||fffd|[|fffd|U|fffd|[|fffd|t|fffd|H|fffd|[|fffd||fffd||fffd||308||a5d7|
  For Each objUserform In UserForms
    IsUserformOpen = True
    Exit For
  Next
End Function

Public Function logicBuySell(ByVal numLogic) As String
  With ThisWorkbook.Worksheets(Format(numLogic, "0#"))
    logicBuySell = .Cells(2, 2).Value
  End With
End Function

Public Function logicInSession(ByVal numLogic) As String
  With ThisWorkbook.Worksheets(Format(numLogic, "0#"))
    logicInSession = .Cells(3, 2).Value
  End With
End Function

Public Function logicInTiming(ByVal numLogic) As String
  With ThisWorkbook.Worksheets(Format(numLogic, "0#"))
    logicInTiming = .Cells(4, 2).Value
  End With
End Function

Public Function logicProfit(ByVal numLogic) As String
  With ThisWorkbook.Worksheets(Format(numLogic, "0#"))
    logicProfit = .Cells(8, 2).Value
  End With
End Function

Public Function logicLoss(ByVal numLogic) As String
  With ThisWorkbook.Worksheets(Format(numLogic, "0#"))
    logicLoss = .Cells(10, 2).Value
  End With
End Function

Public Function logicOutCount(ByVal numLogic) As String
  With ThisWorkbook.Worksheets(Format(numLogic, "0#"))
    logicOutCount = .Cells(11, 2).Value
  End With
End Function


Public Function logicOutSession(ByVal numLogic) As String
  With ThisWorkbook.Worksheets(Format(numLogic, "0#"))
    logicOutSession = .Cells(12, 2).Value
  End With
End Function

Public Function logicOutTiming(ByVal numLogic) As String
  With ThisWorkbook.Worksheets(Format(numLogic, "0#"))
    logicOutTiming = .Cells(13, 2).Value
  End With
End Function

Public Function logicOutOther(ByVal numLogic) As String
  With ThisWorkbook.Worksheets(Format(numLogic, "0#"))
    logicOutOther = .Cells(14, 2).Value
  End With
End Function




INQUEST-PP=macro
