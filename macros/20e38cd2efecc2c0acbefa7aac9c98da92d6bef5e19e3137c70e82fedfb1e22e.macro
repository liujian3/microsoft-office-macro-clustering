Attribute VB_Name = "Module1"
Option Explicit
Dim ObjWb
Dim ObjExcel
Dim objRoot, objDomain
Dim strDNC
Dim x, zz
Dim objShell
Dim lngTZBias
Dim lngBiasKey
 
Sub RunADExtractMacro()
    '
    ' Macro1 Macro
    '
    Dim k
     Set objRoot = GetObject("LDAP://RootDSE")
     strDNC = objRoot.Get("DefaultNamingContext")
     
     'strDNC = "OU=Standard,OU=Users,OU=Prod,DC=network,DC=maf,DC=govt,DC=nz"
     'strDNC = "OU=Users,OU=Prod,DC=network,DC=maf,DC=govt,DC=nz"
     'strDNC = "OU=Disabled,OU=Users,OU=Prod,DC=network,DC=maf,DC=govt,DC=nz"
     'strDNC = "OU=LocalAdmins,OU=Users,OU=Prod,DC=network,DC=maf,DC=govt,DC=nz"
     'strDNC = "OU=Remote,OU=Users,OU=Prod,DC=network,DC=maf,DC=govt,DC=nz"
     'strDNC = "OU=Standard,OU=Users,OU=Prod,DC=network,DC=maf,DC=govt,DC=nz"
     'strDNC = "OU=Windows8,DC=network,DC=maf,DC=govt,DC=nz"
     'strDNC = "OU=Tier2,OU=Users,OU=Windows8,DC=network,DC=maf,DC=govt,DC=nz"
     'strDNC = "OU=Standard,OU=Users,OU=Prod,DC=network,DC=maf,DC=govt,DC=nz"
     Set objDomain = GetObject("LDAP://" & strDNC) ' Bind to the top of the Domain using LDAP using ROotDSE
     Call ExcelSetup("Sheet1") ' Sub to make Excel Document
     
     x = 1
     
     ' Obtain local Time Zone bias from machine registry.
        ' This bias changes with Daylight Savings Time.
        Set objShell = CreateObject("Wscript.Shell")
        lngBiasKey = objShell.RegRead("HKLM\System\CurrentControlSet\Control\" _
            & "TimeZoneInformation\ActiveTimeBias")
        If (UCase(TypeName(lngBiasKey)) = "LONG") Then
            lngTZBias = lngBiasKey
        ElseIf (UCase(TypeName(lngBiasKey)) = "VARIANT()") Then
            lngTZBias = 0
            For k = 0 To UBound(lngBiasKey)
                lngTZBias = lngTZBias + (lngBiasKey(k) * 256 ^ k)
            Next
        End If


     Call enumMembers(objDomain, strDNC)
     
     'autofit the output
     ' Set objRange = ObjWb.UsedRange
     'objRange.EntireColumn.Autofit()
     'ObjExcel.Save ("ADoutput.xls")
     
     Debug.Print "Complete!!!!!!!!!!!"
     'MsgBox "Done" ' show that script is complete
     '
End Sub

Function Integer8Date(ByVal objDate, ByVal lngBias)
    ' Function to convert Integer8 (64-bit) value to a date, adjusted for
    ' local time zone bias.
    Dim lngAdjust, lngDate, lngHigh, lngLow
    lngAdjust = lngBias
    lngHigh = objDate.HighPart
    lngLow = objDate.LowPart
    ' Account for error in IADsLargeInteger property methods.
    If (lngLow < 0) Then
        lngHigh = lngHigh + 1
    End If
    If (lngHigh = 0) And (lngLow = 0) Then
        lngAdjust = 0
    End If
    lngDate = #1/1/1601# + (((lngHigh * (2 ^ 32)) _
        + lngLow) / 600000000 - lngAdjust) / 1440
    ' Trap error if lngDate is ridiculously huge.
    On Error Resume Next
    Integer8Date = CDate(lngDate)
    If (Err.Number <> 0) Then
        On Error GoTo 0
        'Integer8Date = #1/1/1601#
        Integer8Date = "-"
    End If
    On Error GoTo 0
End Function

Sub enumMembers(objDomain, strTopDNC)
    On Error Resume Next
    Dim Secondary(5), objMember ' Variable to store the Array of 2ndary email alias's
    Dim WorkID
    Dim SamAccountName ' Login
    Dim DisplayName 'Name displayed
    Dim EmailAddr
    Dim Telephone
    Dim BusinessDepartment
    Dim Addr1
    Dim Title
    Dim LastLogin
    Dim AccountState
    Dim AccountControl
    Dim Manager
    Dim AccountExpires, objAccountExpires
    Dim Description
    Dim LastLogonTimestamp, objLastLogonTimestamp
    Dim PwdLastSet, objPwdLastSet
    Dim WhenChanged
    Dim WhenCreated
     
     
     For Each objMember In objDomain ' go through the collection
         If objMember.Class = "user" Then ' if not User object, move on.
             x = x + 1 ' counter used to increment the cells in Excel
             
             ObjWb.Cells(x, 1).Value = objMember.Class
               ' I set AD properties to variables so if needed you could do Null checks or add if/then's to this code
               ' this was done so the script could be modified easier.
             WorkID = objMember.employeeNumber
             SamAccountName = objMember.SamAccountName
             DisplayName = objMember.DisplayName
             EmailAddr = objMember.mail
             Telephone = objMember.telephonenumber
             BusinessDepartment = objMember.division
             Addr1 = objMember.physicalDeliveryOfficeName
             Title = objMember.Title
             LastLogin = objMember.LastLogin
             'AccountType = objMember.sAMAccountType
             AccountControl = objMember.userAccountControl
             Manager = objMember.Manager
             Set objAccountExpires = objMember.AccountExpires
             'If objAccountExpires.HighPart <> Null Or objAccountExpires.LowPart <> Null Then
             AccountExpires = Integer8Date(objAccountExpires, lngTZBias)
             'End If
             Description = objMember.Description
             
             Set objLastLogonTimestamp = objMember.LastLogonTimestamp
             LastLogonTimestamp = Integer8Date(objLastLogonTimestamp, lngTZBias)
             
             Set objPwdLastSet = objMember.PwdLastSet
             PwdLastSet = Integer8Date(objPwdLastSet, lngTZBias)
             
             WhenChanged = objMember.WhenChanged
             WhenCreated = objMember.WhenCreated
             
             Select Case AccountControl
                Case 512
                    AccountState = "(NORMAL_ACCOUNT)Normal - Enabled Account"
                Case 514
                    AccountState = "(ACCOUNTDISABLE,NORMAL_ACCOUNT)Normal - Disabled account"
                Case 544
                    AccountState = "(*NORMAL_ACCOUNT,PASSWD_NOTREQD)Normal - Enabled Account/Password not required"
                Case 546
                    AccountState = "(ACCOUNTDISABLE,NORMAL_ACCOUNT,PASSWD_NOTREQD)Normal - Disabled account/Password not required"
                Case 4096
                    AccountState = "(WORKSTATION_TRUST_ACCOUNT)Workstation/server"
                Case 66048
                    AccountState = "(*NORMAL_ACCOUNT,DONT_EXPIRE_PASSWORD)Normal - Enabled Account/Password never expires"
                Case 66050
                    AccountState = "(ACCOUNTDISABLE,NORMAL_ACCOUNT,DONT_EXPIRE_PASSWORD)Normal - Disabled account /Password never expires"
                Case 66080
                    AccountState = "(*NORMAL_ACCOUNT,PASSWD_NOTREQD,DONT_EXPIRE_PASSWORD)Normal - Enabled Account/Password not required/Password never expires"
                Case 66082
                    AccountState = "(ACCOUNTDISABLE,NORMAL_ACCOUNT,PASSWD_NOTREQD,DONT_EXPIRE_PASSWORD)Normal - Disabled Account/Password not required/Password never expires"
                Case 262656
                    AccountState = "(NORMAL_ACCOUNT,SMARTCARD_REQUIRED)Normal - Enabled Account/Smart Card Logon Required"
                Case 532480
                    AccountState = "(TRUSTED_FOR_DELEGATION,WORKSTATION_TRUST_ACCOUNT)Domain controller/Workstation/server"
                Case 1
                    AccountState = "(SCRIPT)Script"
                Case 2
                    AccountState = "(ACCOUNTDISABLE)Disabled account"
                Case 8
                    AccountState = "(HOMEDIR_REQUIRED)The home folder is required"
                Case 16
                    AccountState = "(LOCKOUT)Lockout"
                Case 32
                    AccountState = "(*PASSWD_NOTREQD)Password not required"
                Case 64
                    AccountState = "(*PASSWD_CANT_CHANGE)The user cannot change the password."
                Case 128
                    AccountState = "(ENCRYPTED_TEXT_PASSWORD_ALLOWED)The user can send an encrypted password."
                Case 256
                    AccountState = "(TEMP_DUPLICATE_ACCOUNT)This is an account for users whose primary account is in another domain."
                Case 2048
                    AccountState = "(INTERDOMAIN_TRUST_ACCOUNT)This is a permit to trust an account for a system domain that trusts other domains."
                Case 2080
                    AccountState = "(*PASSWD_NOTREQD,INTERDOMAIN_TRUST_ACCOUNT)Password not required/Permit to trust an account for a system domain that trusts other domains."
                Case 8192
                    AccountState = "(SERVER_TRUST_ACCOUNT)This is a computer account for a domain controller that is a member of this domain."
                Case 65536
                    AccountState = "(DONT_EXPIRE_PASSWORD)Represents the password, which should never expire on the account."
                Case 131072
                    AccountState = "(MNS_LOGON_ACCOUNT)This is an MNS logon account."
                Case 262144
                    AccountState = "(SMARTCARD_REQUIRED)When this flag is set, it forces the user to log on by using a smart card."
                Case 524288
                    AccountState = "(TRUSTED_FOR_DELEGATION)When this flag is set, the service account (the user or computer account) under which a service runs is trusted for Kerberos delegation."
                Case 1048576
                    AccountState = "(NOT_DELEGATED)When this flag is set, the security context of the user is not delegated to a service even if the service account is set as trusted for Kerberos delegation."
                Case 2097152
                    AccountState = "(USE_DES_KEY_ONLY)Restrict this principal to use only Data Encryption Standard (DES) encryption types for keys."
                Case 4194304
                    AccountState = "(DONT_REQUIRE_PREAUTH)This account does not require Kerberos pre-authentication for logging on."
                Case 8388608
                    AccountState = "(PASSWORD_EXPIRED)The user's password has expired."
                Case 16777216
                    AccountState = "(*TRUSTED_TO_AUTH_FOR_DELEGATION)The account is enabled for delegation."
                Case 67108864
                    AccountState = "(PARTIAL_SECRETS_ACCOUNT)The account is a read-only domain controller (RODC)."
                Case 590336
                    AccountState = "(TRUSTED_FOR_DELEGATION,NORMAL_ACCOUNT,DONT_EXPIRE_PASSWORD)Trusted/Normal - Enabled Account/Password never expires"
                Case 590338
                    AccountState = "(ACCOUNTDISABLE,TRUSTED_FOR_DELEGATION,NORMAL_ACCOUNT,DONT_EXPIRE_PASSWORD)Trusted/Normal - Disabled Account/Password never expires"
                Case 4260480
                    AccountState = "(*NORMAL_ACCOUNT,ENCRYPTED_TEXT_PASSWORD_ALLOWED,DONT_EXPIRE_PASSWD,DONT_REQUIRE_PREAUTH)Normal - Enabled Account/The user can send an encrypted password/Password Never Expires/account does not require Kerberos pre-authentication for logging on."

                    
              Case Else
                AccountState = "unknown"
            End Select
             
             'LastLogin = objMember.lastLogon LastLogin
             
             
             'zz = 1 ' Counter for array of 2ndary email addresses
             'For Each eMail In objMember.proxyAddresses
             '   If Left(eMail, 5) = "SMTP:" Then
             '       Primary = Mid(eMail, 6) ' if SMTP is all caps, then it's the Primary
             '   ElseIf Left(eMail, 5) = "smtp:" Then
             '      Secondary(zz) = Mid(eMail, 6) ' load the list of 2ndary SMTP emails into Array.
             '      zz = zz + 1
             '   End If
             'Next
             ' Write the values to Excel, using the X counter to increment the rows.
             
             ObjWb.Cells(x, 2).Value = WorkID
             ObjWb.Cells(x, 3).Value = SamAccountName
             ObjWb.Cells(x, 4).Value = DisplayName
             ObjWb.Cells(x, 5).Value = EmailAddr
             ObjWb.Cells(x, 6).Value = Telephone
             ObjWb.Cells(x, 7).Value = BusinessDepartment
             ObjWb.Cells(x, 8).Value = Addr1
             ObjWb.Cells(x, 9).Value = Title
             ObjWb.Cells(x, 10).Value = LastLogin
             ObjWb.Cells(x, 11).Value = strTopDNC
             ObjWb.Cells(x, 12).Value = AccountState
             ObjWb.Cells(x, 13).Value = AccountControl
             ObjWb.Cells(x, 14).Value = Manager
             ObjWb.Cells(x, 15).Value = AccountExpires
             ObjWb.Cells(x, 16).Value = Description
             ObjWb.Cells(x, 17).Value = LastLogonTimestamp
             ObjWb.Cells(x, 18).Value = PwdLastSet
             ObjWb.Cells(x, 19).Value = WhenChanged
             ObjWb.Cells(x, 20).Value = WhenCreated
             
             ' Write out the Array for the 2ndary email addresses.
             'For ll = 1 To 5
             '    ObjWb.Cells(x, 26 + ll).Value = Secondary(ll)
             'Next
             ' Blank out Variables in case the next object doesn't have a value for the property
             WorkID = "-"
             SamAccountName = "-"
             DisplayName = "-"
             EmailAddr = "-"
             Telephone = "-"
             BusinessDepartment = "-"
             Addr1 = "-"
             Title = "-"
             LastLogin = "-"
             'strTopDNC = "-"
             AccountState = "-"
             AccountControl = "-"
             Manager = "-"
             AccountExpires = "-"
             Description = "-"
             LastLogonTimestamp = "-"
             PwdLastSet = "-"
             WhenChanged = "-"
             WhenCreated = "-"

             
             'For ll = 1 To 5
             '    Secondary(ll) = ""
             'Next
         End If
               
        ' If the AD enumeration runs into an OU object, call the Sub again to itinerate
        
         If objMember.Class <> "user" Then
             'Debug.Print objMember.Class
             x = x + 1 ' counter used to increment the cells in Excel
             ObjWb.Cells(x, 1).Value = objMember.Class
             ObjWb.Cells(x, 3).Value = objMember.SamAccountName
             ObjWb.Cells(x, 4).Value = objMember.DisplayName
         End If
         If objMember.Class = "organizationalUnit" Or objMember.Class = "container" Then
             Call enumMembers(objMember, objMember.distinguishedName)
         End If
         
         'If x = 15 Then
         '   Exit Sub
         'End If
         
     Next
 End Sub
 Sub ExcelSetup(shtName) ' This sub creates an Excel worksheet and adds Column heads to the 1st row
 
       Set ObjExcel = CreateObject("Excel.Application")
     Set ObjWb = ObjExcel.Workbooks.Add
     Set ObjWb = ObjExcel.ActiveWorkbook.Worksheets(shtName)
     ObjWb.Name = "Active Directory Users" ' name the sheet
     ObjWb.Activate
     ObjExcel.Visible = True
     ObjWb.Cells(1, 2).Value = "WorkID"
     ObjWb.Cells(1, 3).Value = "SamAccountName"
     ObjWb.Cells(1, 4).Value = "DisplayName"
     ObjWb.Cells(1, 5).Value = "Email"
     ObjWb.Cells(1, 6).Value = "Telephone"
     ObjWb.Cells(1, 7).Value = "BusinessDepartment"
     ObjWb.Cells(1, 8).Value = "Addr1"
     ObjWb.Cells(1, 9).Value = "Title"
     ObjWb.Cells(1, 10).Value = "LastLogin"
     ObjWb.Cells(1, 11).Value = "DNC"
     ObjWb.Cells(1, 12).Value = "AccountState"
     ObjWb.Cells(1, 13).Value = "AccountControl"
     ObjWb.Cells(1, 14).Value = "Manager"
     ObjWb.Cells(1, 15).Value = "AccountExpires"
     ObjWb.Cells(1, 16).Value = "Description"
     ObjWb.Cells(1, 17).Value = "LastLogonTimestamp"
     ObjWb.Cells(1, 18).Value = "PwdLastSet"
     ObjWb.Cells(1, 19).Value = "WhenChanged"
     ObjWb.Cells(1, 20).Value = "WhenCreated"

     'formatting for header
     'Set objRange = ObjExcel.Range("A1", "Z1")
     'objRange.Interior.ColorIndex = 33
     'objRange.Font.Bold = True
     'objRange.Font.Underline = True
     
 End Sub
 

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
