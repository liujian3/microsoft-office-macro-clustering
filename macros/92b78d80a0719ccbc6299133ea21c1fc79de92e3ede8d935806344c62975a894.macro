Attribute VB_Name = "CommMdl"
'===================================================
'Common functions
'
' 2005.9 PYJ
'===================================================
Option Explicit

'Change the font of selection to match font of the workbook
'2005.12.16 PYJ add
Function MatchWorkbookFont()
    On Error Resume Next
    
    Selection.Font.name = ActiveWorkbook.Styles("Normal").Font.name
    Selection.Font.Size = ActiveWorkbook.Styles("Normal").Font.Size
    Selection.AutoScaleFont = True  '2005.12.22
    
    On Error GoTo 0 '05.12.17 LSQ
End Function

Function GetTempSheet(Optional wbk As Workbook = Nothing, Optional ByVal nNo As Integer = 0) As Worksheet
    Dim sSht As String
    
    sSht = "Temp" & IIf(nNo > 0, nNo, "")
    
    If wbk Is Nothing Then
        Set GetTempSheet = ThisWorkbook.Worksheets(sSht)
    Else
        Set GetTempSheet = wbk.Worksheets(sSht)
    End If
    
    GetTempSheet.Cells.Clear
End Function

Function GetTplChart(sChtName As String) As ChartObject
    Set GetTplChart = ThisWorkbook.Sheets("TemplateChart").ChartObjects(sChtName)
End Function

Function RangeAddress(ByVal nRow1 As Integer, ByVal nCol1 As Integer, ByVal nRow2 As Integer, ByVal nCol2 As Integer) As String
    RangeAddress = Range(Range("A1").Offset(nRow1 - 1, nCol1 - 1), Range("A1").Offset(nRow2 - 1, nCol2 - 1)) _
        .Address(ReferenceStyle:=xlA1)
End Function

Function FormulaA1_R1C1(ByVal sFormulaIn As String, Optional ByVal bRefA1 As Boolean = True) As String
    Dim nStyleFrom As Integer, nStyleTo As Integer
    Dim bErr As Boolean
    
    If UCase(TypeName(bRefA1)) = "ERROR" Then bRefA1 = False
    
    If bRefA1 Then
        nStyleFrom = xlR1C1
        nStyleTo = xlA1
    Else
        nStyleFrom = xlA1
        nStyleTo = xlR1C1
    End If
    '
    On Error Resume Next
    
    FormulaA1_R1C1 = Application.ConvertFormula( _
                Formula:=sFormulaIn, _
                fromReferenceStyle:=nStyleFrom, _
                toReferenceStyle:=nStyleTo)
    
    If Err.Number <> 0 Then     'Oct 2003, PYJ  old:bErr
        'for all version; Err.Number <> 0 & Err.Clear can not be used in Excel 95
        'Err can be cleared afterstatement "On Error GoTo 0"
        FormulaA1_R1C1 = sFormulaIn
    End If
    
    On Error GoTo 0
End Function

Function ParseRngDef(ByVal sRngDef As String, sWbk As String, sSht As String, sAddr As String) As Integer
    Dim pos1 As Integer, pos2 As Integer
    
    'get the workbook name
    pos1 = InStr(sRngDef, "[")
    pos2 = InStr(sRngDef, "]")

    'Modified: 2005.12.16 -- no other book selection
#If False Then
    If pos1 > 0 And pos2 > 2 And pos2 > pos1 Then
        sWbk = Mid(sRngDef, pos1 + 1, pos2 - pos1 - 1)
        sRngDef = Mid(sRngDef, pos2 + 1)
    Else
        sWbk = "" 'ActiveWorkbook.Name
    End If
#Else 'old : 05.12.16
    If pos1 > 0 And pos2 > 2 And pos2 > pos1 Then
        ParseRngDef = -1
        Exit Function
    Else
        sWbk = "" 'ActiveWorkbook.Name
    End If
#End If

    'get the worksheet name
    pos1 = InStr(sRngDef, "!")
    If pos1 > 1 Then
        pos2 = IIf(Mid(sRngDef, pos1 - 1, 1) = "'", pos1 - 2, pos1 - 1)
        sSht = left(sRngDef, pos2)
        If left(sSht, 1) = "'" Then sSht = Mid(sSht, 2)
        sRngDef = Trim(Mid(sRngDef, pos1 + 1))
    Else
        sSht = ""
    End If
    
    'get the range address
    sAddr = sRngDef
    ParseRngDef = 0 '2005.12.16 add
End Function

Function BorderLine(rng As Range, nBordersIndex As XlBordersIndex, nLineStyle As Integer, nBorderWeight As XlBorderWeight)
    With rng.Borders(nBordersIndex)
        .linestyle = nLineStyle
        If nLineStyle <> xlNone Then .weight = nBorderWeight
        .ColorIndex = xlAutomatic
    End With
End Function

Function BorderFrame(rngObj As Range, nOutsideWgt As XlBorderWeight, _
        nInsideHorWgt As XlBorderWeight, nInsideVerWgt As XlBorderWeight, _
        ByVal nInsideHor As Integer, ByVal nInsideVer As Integer, Optional ByVal nWrapRowNo As Integer = 0)
    Dim nRowNum As Long, nColNum As Integer
    Dim rng1 As Range
    
    nRowNum = rngObj.Rows.Count
    nColNum = rngObj.Columns.Count
    
    rngObj.BorderAround xlContinuous, nOutsideWgt
    
    If nColNum > 1 And nInsideVer > 0 Then
        If nInsideVer = 1 Then
            Set rng1 = rngObj.Columns(1)
            Call BorderLine(rng1, xlEdgeRight, xlContinuous, nInsideVerWgt)
        ElseIf nInsideVer = 2 And nColNum > 2 Then
            Set rng1 = rngObj.Columns("A:C")
            Call BorderLine(rng1, xlInsideVertical, xlContinuous, nInsideVerWgt)
        Else
            Call BorderLine(rngObj, xlInsideVertical, xlContinuous, nInsideVerWgt)
        End If
    End If
    
    If nRowNum > 1 And nInsideHor > 0 Then
        If nInsideHor = 1 Then
            Set rng1 = rngObj.Rows(1)
            Call BorderLine(rng1, xlEdgeBottom, xlContinuous, nInsideHorWgt)
        ElseIf nInsideHor = 2 And nRowNum > 2 Then
            Set rng1 = rngObj.Rows("1:3")
            Call BorderLine(rng1, xlEdgeBottom, xlContinuous, nInsideHorWgt)
        Else
            Call BorderLine(rngObj, xlInsideHorizontal, xlContinuous, nInsideHorWgt)
        End If
    End If
    If nWrapRowNo > 0 Then
        Set rng1 = rngObj.Rows(nWrapRowNo)
        rng1.VerticalAlignment = xlTop
        rng1.WrapText = True
    End If
End Function

'=== EOF ===
Attribute VB_Name = "MdlComm"
'===================================================
'Module for drawing Mosaic Graph
'
' 2005.10
'===================================================

Public Sub GetTempl(chtObj As ChartObject)
    Dim sht As Worksheet
    Dim cht As Chart
    On Error Resume Next
    Set chtObj = ActiveWorkbook.Worksheets(TempShtName).ChartObjects(1)
    'cht.ChartArea.Copy
    'ActiveSheet.Paste
    'Application.CutCopyMode = False
    'Set cht = ActiveSheet.ChartObjects(ActiveSheet.ChartObjects.Count)
    Set cht = Comm_GetTmplGrp(Range("A1"), ActiveWorkbook.name, TempShtName, chtObj.name)
    cht.Activate
    DoEvents
    ActiveChart.Shapes.SelectAll
    Selection.Delete
    Set chtObj = cht.Parent
    On Error GoTo 0
End Sub

Public Sub GetShapeFromTemplate(shp As Shape, ByVal strName As String)
    Dim nloop As Long
    On Error Resume Next
    ActiveWorkbook.Worksheets(TempShtName).ChartObjects(1).Activate
    DoEvents
    Set shp = ActiveChart.Shapes(strName)
    shp.Select
    DoEvents
    shp.Copy
    DoEvents
    outWrkSht.Activate
    DoEvents
    Cells(1, 1).Select
    DoEvents
    nloop = 1
    Do
        Err.Clear
        ActiveSheet.Paste
        DoEvents
        nloop = nloop + 1
    Loop Until Err.Number = 0 Or nloop > 10
    DoEvents
    Set shp = ActiveSheet.Shapes(ActiveSheet.Shapes.Count)
    Application.CutCopyMode = False
    On Error GoTo 0
End Sub

Public Function GetShapeSize(ByVal strName As String, ByVal flg As Integer) As Double
    Dim shp As Shape
    On Error Resume Next
    ActiveWorkbook.Worksheets(TempShtName).ChartObjects(1).Activate
    Set shp = ActiveChart.Shapes(strName)
    shp.DrawingObject.AutoSize = True '2005.12.22 PYJ
    If flg = 1 Then
        GetShapeSize = shp.width
    Else
        GetShapeSize = shp.height
    End If
    outWrkSht.Activate
    DoEvents
End Function

'sTplTxt: template textbox name
'nHorAli: HorizontalAlignment. 0 - no change
'nVerAli: VerticalAlignment. 0 - no change
'rewrote 2005.11.30
Public Sub DrawGrpText(ByVal sTplTxt, ByVal sTxt As String, _
        ByVal left As Double, ByVal top As Double, ByVal width As Double, ByVal height As Double, _
        Optional ByVal nHorAli As Integer = 0, Optional ByVal nVerAli As Integer = 0)
    Dim txtBox As Shape
    
    Call GetShapeFromTemplate(txtBox, sTplTxt)
    txtBox.left = left
    txtBox.top = top
    txtBox.width = width
    txtBox.height = height
    With txtBox.DrawingObject
        'If sTxt <> vbNullString Then                           '2011.12.21 cmt
            .Characters.Text = sTxt
        'End If
        If nHorAli <> 0 Then .HorizontalAlignment = nHorAli
        If nVerAli <> 0 Then .VerticalAlignment = nVerAli
        '.AutoSize = True
    End With
End Sub

'Public Sub DrawGrpText(ByVal str As String, ByVal left As Double, ByVal top As Double, _
'                        ByVal width As Double, ByVal height As Double, ByVal flgPos As Integer)
'    Dim txtBox As Shape
'    If (flgPos = 1) Then
'        Call GetShapeFromTemplate(txtBox, str)
'        txtBox.left = left
'        txtBox.top = top
'        txtBox.width = width
'        txtBox.height = height
'        With txtBox.DrawingObject
'            .HorizontalAlignment = xlCenter
'            .VerticalAlignment = xlCenter
'            .AutoSize = True
'        End With
'    Else
'        Call GetShapeFromTemplate(txtBox, "TextXCate1")
'        txtBox.left = left
'        txtBox.top = top
'        txtBox.width = width
'        txtBox.height = height
'        With txtBox.DrawingObject
'            .Characters.Text = str
'            .HorizontalAlignment = xlCenter
'            .VerticalAlignment = xlCenter
'            .Orientation = xlHorizontal
'            .AutoSize = False
'            .AddIndent = False
'        End With
'    End If
'
'End Sub

Public Sub DrawGrpLine(ByVal left As Double, ByVal top As Double, ByVal width As Double, ByVal height As Double)
    Dim shp As Shape
    Set shp = ActiveSheet.Shapes.AddLine(left, top, left + width - 1, top + height - 1)
End Sub

Public Sub DrawBorder(ByVal rge As Range, ByVal weight As Integer)
    With rge.Borders(xlEdgeTop)
        .linestyle = xlContinuous
        .weight = weight
        .ColorIndex = xlAutomatic
    End With
    With rge.Borders(xlEdgeLeft)
        .linestyle = xlContinuous
        .weight = weight
        .ColorIndex = xlAutomatic
    End With
    With rge.Borders(xlEdgeBottom)
        .linestyle = xlContinuous
        .weight = weight
        .ColorIndex = xlAutomatic
    End With
    With rge.Borders(xlEdgeRight)
        .linestyle = xlContinuous
        .weight = weight
        .ColorIndex = xlAutomatic
    End With
End Sub
Attribute VB_Name = "MdlDrawTate"
'===================================================
'Module for drawing Mosaic Graph(Tate)
'
' 2005.10
'===================================================
Option Explicit

Private MainChart As ChartObject
Private ItemHeight As Double
Private CateWidth As Double

Sub DrawMosaicTate(ByVal rngData As Range, ByVal top As Long, ByVal left As Long)
    Dim i As Long, j As Long
    Dim data  As Double
    Dim width As Double, height As Double, h As Double, w As Double
    Dim a As typeArea
    Dim firstShape As Integer, lastShape As Integer
    Dim aryShpNo() As Variant
    Dim shp As Shape
    Dim gapsize As Double
    Dim hTotal As Double, wTotal As Double, ht As Double, ht1 As Double, wt As Double, wt1 As Double
    Dim tblRow As Double, tblCol As Double
    Dim rge As Range
    
    BarLengthTate = 251
    BarThickTate = TBarThickTate * MosaicOut.itemnum * BarThickRatio
    If (BarThickTate < 250) Then BarThickTate = 250 '2005.11.30 PYJ
    
    CateWidth = GetLargestSize(1, 10)
    ItemHeight = GetLargestSize(2, 10)
    
    MosaicOut.whole.left = left
    MosaicOut.whole.top = top
    MosaicOut.whole.width = GetWidth()
    MosaicOut.whole.height = GetHeight()

    Call GetTempl(MainChart)
    MainChart.left = left
    MainChart.top = top
    MainChart.Select

    'Call MainChart.ShapeRange.ScaleWidth(MosaicOut.whole.width / MainChart.width, msoFalse, msoScaleFromTopLeft)
    'Call MainChart.ShapeRange.ScaleHeight(MosaicOut.whole.height / MainChart.height, msoFalse, msoScaleFromTopLeft)
    MainChart.width = MosaicOut.whole.width / MainChart.width * MainChart.width
    MainChart.height = MosaicOut.whole.height / MainChart.height * MainChart.height
    
    tblRow = MainChart.TopLeftCell.row
    tblCol = MainChart.BottomRightCell.Column + 1
    If tblCol + MosaicOut.itemnum > 255 Then
        tblRow = MainChart.BottomRightCell.row + 1
        tblCol = MainChart.TopLeftCell.Column
    End If
    
    firstShape = ActiveSheet.Shapes.Count
    
    'rewrote 2005.12.16 PYJ
    DrawBackground
    SpcBarX = (50 - MosaicOut.itemnum) / 15
    If SpcBarX < 1 Then SpcBarX = 1
    SpcBarY = (50 - MosaicOut.catenum) / 15
    If SpcBarY < 1 Then SpcBarY = 1
    wTotal = MosaicOut.main_area.width - (MosaicOut.itemnum + 1) * SpcBarX
    hTotal = MosaicOut.main_area.height - (MosaicOut.catenum + 1) * SpcBarY
    a.left = SpcBarX
    wt = 0: wt1 = 0
    For i = 1 To MosaicOut.itemnum
        w = catex(i).total / total
        a.width = w * wTotal + wt - wt1 'wt - wt1: |fffd||b377|
        wt = wt + SpcBarX + w * wTotal
        Set rge = rngData.Offset(1, i)
        a.top = SpcBarY
        ht = 0: ht1 = 0
        For j = MosaicOut.catenum To 1 Step -1
            data = Val(rge(j, 1))
            h = data / catex(i).total
            a.height = h * hTotal + ht - ht1 'ht - ht1: |fffd||b377|
            ht = ht + SpcBarY + h * hTotal
            Call DrawObject(True, a, j)
            ht1 = a.top + a.height
            a.top = a.top + a.height + SpcBarY
        Next j
        wt1 = a.left + a.width
        If MosaicOut.flgDist Then
            Call DrawTextA(catex(i).name, i - 1, 1)
            Call DrawBoundary(i - 1, a.left - SpcBarX, 1)
        Else
            Call DrawGrpText("TextYCate1", catex(i).name, _
                        MosaicOut.item_area.left + a.left, _
                        MosaicOut.item_area.top, _
                        a.width, _
                        MosaicOut.item_area.height)
        End If
        a.left = a.left + a.width + SpcBarX
    Next i
    If MosaicOut.flgDist Then
        Call DrawBoundary(i - 1, MosaicOut.item_area.width, 1)
    End If
    hTotal = MosaicOut.total_area.height - (MosaicOut.catenum + 1) * SpcBarY
    a.left = SpcBarX
    a.width = MosaicOut.total_area.width - 2 * SpcBarX
    a.top = SpcBarY
    ht = 0: ht1 = 0
    For i = 1 To MosaicOut.catenum
        h = catey(MosaicOut.catenum - i + 1).total / total
        a.height = h * hTotal + ht - ht1 'ht - ht1: |fffd||b377|
        ht = ht + SpcBarY + h * hTotal
        Call DrawObject(False, a, MosaicOut.catenum - i + 1)
        ht1 = a.top + a.height
        If MosaicOut.flgDist Then
            Call DrawTextA(catey(MosaicOut.catenum - i + 1).name, i - 1, 2)
            Call DrawBoundary(i - 1, a.top - SpcBarY, 2)
        Else
            Call DrawGrpText("TextXCate1", catey(MosaicOut.catenum - i + 1).name, _
                        MosaicOut.cate_area.left, _
                        MosaicOut.cate_area.top + a.top, _
                        MosaicOut.cate_area.width, _
                        a.height)
        End If
        a.top = a.top + a.height + SpcBarY
    Next i
    'old:
    'DrawBackground
    'width = 0
    'height = 0
    'For i = 1 To MosaicOut.itemnum
    '    gapsize = 0
    '    w = catex(i).total / total
    '    For j = MosaicOut.catenum To 1 Step -1
    '        a.left = width * (MosaicOut.main_area.width - SpcBarX) + SpcBarX
    '        a.top = height * (MosaicOut.main_area.height - SpcBarY) + SpcBarY + gapsize
    '        data = Val(rngData.Range("A1").Offset(j, i))
    '        h = data / catex(i).total
    '        a.width = w * (MosaicOut.main_area.width - SpcBarX) - SpcBarX
    '        a.height = h * (MosaicOut.main_area.height - SpcBarY) - SpcBarY - gapsize
    '        If (a.height < 0.02) Then
    '            a.height = 0
    '            a.top = a.top - SpcBarY + 1
    '            If a.top < 0 Then a.top = 1
    '            gapsize = gapsize + SpcBarX / 2
    '            'h = 0
    '        Else
    '            a.top = a.top - gapsize
    '            a.height = a.height + gapsize
    '            gapsize = 0
    '        End If
    '        Call DrawObject(True, a, j)
    '        height = height + h
    '    Next j
    '    If MosaicOut.flgDist Then
    '        Call DrawTextA(catex(i).name, i - 1, 1)
    '        Call DrawBoundary(i - 1, a.left - SpcBarX, 1)
    '    Else
    '    Call DrawGrpText("TextYCate1", catex(i).name, _
    '                MosaicOut.item_area.left + width * MosaicOut.item_area.width, _
    '                MosaicOut.item_area.top, _
    '                w * MosaicOut.item_area.width, _
    '                MosaicOut.item_area.height) '2005.11.30 PYJ  old:
    '    'Call DrawGrpText(catex(i).name, _
    '                MosaicOut.item_area.left + width * MosaicOut.item_area.width, _
    '                MosaicOut.item_area.top, _
    '                w * MosaicOut.item_area.width, _
    '                MosaicOut.item_area.height, 2)
    '    End If
    '    height = 0
    '    width = width + w
    'Next i
    'If MosaicOut.flgDist Then
    '    Call DrawBoundary(i - 1, MosaicOut.item_area.width, 1)
    'End If
    'For i = 1 To MosaicOut.catenum
    '    h = catey(MosaicOut.catenum - i + 1).total / total
    '    a.left = SpcBarX
    '    a.top = height * (MosaicOut.total_area.height - SpcBarY) + SpcBarY
    '    a.width = MosaicOut.total_area.width - 2 * SpcBarX
    '    a.height = h * (MosaicOut.total_area.height - SpcBarY) - SpcBarY
    '    Call DrawObject(False, a, MosaicOut.catenum - i + 1)
    '    If MosaicOut.flgDist Then
    '        Call DrawTextA(catey(MosaicOut.catenum - i + 1).name, i - 1, 2)
    '        Call DrawBoundary(i - 1, a.top - SpcBarY, 2)
    '    Else
    '        Call DrawGrpText("TextXCate1", catey(MosaicOut.catenum - i + 1).name, _
    '                    MosaicOut.cate_area.left, _
    '                    MosaicOut.cate_area.top + height * MosaicOut.cate_area.height, _
    '                    MosaicOut.cate_area.width, _
    '                    h * MosaicOut.cate_area.height) '2005.11.30 PYJ  old:
    '        'Call DrawGrpText(catey(MosaicOut.catenum - i + 1).name, _
    '                    MosaicOut.cate_area.left, _
    '                    MosaicOut.cate_area.top + height * MosaicOut.cate_area.height, _
    '                    MosaicOut.cate_area.width, _
    '                    h * MosaicOut.cate_area.height, 2)
    '    End If
    '    height = height + h
    '
    'Next i
    If MosaicOut.flgDist Then
        Call DrawBoundary(i - 1, MosaicOut.cate_area.height, 2)
    End If
    Call DrawGrpText("TextTotal", "|fffd|S|fffd||fffd|", _
                MosaicOut.total_area.left, _
                MosaicOut.item_area.top, _
                MosaicOut.total_area.width, _
                MosaicOut.item_area.height, 0, xlVAlignCenter) '2005.12.2 PYJ  old:
    'Call GetShapeFromTemplate(shp, "TextTotal")
    'shp.left = MosaicOut.total_area.left
    'shp.top = MosaicOut.item_area.top
    'shp.DrawingObject.AutoSize = True
    lastShape = ActiveSheet.Shapes.Count
    ReDim aryShpNo(1 To lastShape - firstShape + 1)
    For i = firstShape To lastShape
        aryShpNo(i - firstShape + 1) = i
    Next i
    ActiveSheet.Shapes.Range(aryShpNo).Select
    Selection.Group
    MainChart.Select
    ActiveSheet.Shapes(ActiveSheet.Shapes.Count).Select '2005.12.16 PYJ
    Call MatchWorkbookFont  '2005.12.16 PYJ
    
    'output % table
    ActiveSheet.Cells(tblRow, tblCol + 1).Value = "|fffd||fffd|%|fffd|\" '2005.12.2 PYJ
    'ActiveSheet.Cells(tblRow, tblCol + MosaicOut.itemnum + 2).Value = "|fffd||fffd||fffd|\"
    For i = MosaicOut.catenum To 1 Step -1
        ActiveSheet.Range("A1").Offset(tblRow + i, tblCol).Value = catey(i).name
    Next i
    For i = 1 To MosaicOut.itemnum
        ActiveSheet.Range("A1").Offset(tblRow, tblCol + i).Value = catex(i).name
        For j = MosaicOut.catenum To 1 Step -1
            data = Val(rngData.Range("A1").Offset(j, i))
            h = data / catex(i).total
            ActiveSheet.Range("A1").Offset(tblRow + j, tblCol + i).Value = h * 100 & "%"
        Next j
        'ActiveSheet.Range("A1").Offset(tblRow + MosaicOut.catenum + 1, tblCol + i).Value = 1   'cmt 2005.12.2 PYJ
    Next i
    ActiveSheet.Cells(tblRow + 1, tblCol + MosaicOut.itemnum + 2).Value = "|fffd|S|fffd||fffd|"
    For i = MosaicOut.catenum To 1 Step -1
        ActiveSheet.Range("A1").Offset(tblRow + i, tblCol + MosaicOut.itemnum + 1).Value = catey(i).total / total * 100 & "%"
    Next i
    Set rge = ActiveSheet.Cells(tblRow + 2, tblCol + 2).Range(RangeAddress(1, 1, MosaicOut.catenum, MosaicOut.itemnum + 1)) '2005.12.22 PYJ
    rge.NumberFormatLocal = "0.0%" '2005.12.22 PYJ
        'ActiveSheet.Range("A1").Offset(tblRow + MosaicOut.catenum + 1, tblCol + MosaicOut.itemnum + 1).Value = 1   'cmt 2005.12.2 PYJ
    Set rge = ActiveSheet.Cells(tblRow + 1, tblCol + 1)
    Call DrawBorder(Range(rge, rge.Offset(MosaicOut.catenum, MosaicOut.itemnum)), xlThin)
    Call DrawBorder(Range(rge, rge.Offset(MosaicOut.catenum, MosaicOut.itemnum + 1)), xlThin)
    Call DrawBorder(Range(rge, rge.Offset(0, MosaicOut.itemnum + 1)), xlThin)
    Call DrawBorder(Range(rge, rge.Offset(MosaicOut.catenum, 0)), xlThin)
End Sub

Private Sub DrawBackground()
    With MosaicOut
        .main_area.left = .whole.left + MarginLft + GetShapeSize("TextV1", 1)
        .main_area.top = .whole.top + MarginTop + SpcTitle '+GetShapeSize("TextTitle", 2)
        .main_area.width = BarThickTate
        .main_area.height = BarLengthTate
    
        .axis_area.left = .whole.left + MarginLft
        .axis_area.top = .main_area.top
        .axis_area.width = GetShapeSize("TextV1", 1)
        .axis_area.height = .main_area.height
    
        .total_area.left = .main_area.left + .main_area.width + SpcBarTotal
        .total_area.top = .main_area.top
        .total_area.width = TBarThickTate
        .total_area.height = .main_area.height
    
        .cate_area.left = .total_area.left + .total_area.width + SpcLineX
        .cate_area.top = .total_area.top
        .cate_area.width = CateWidth 'GetShapeSize("TextXcate1", 1)
        .cate_area.height = .total_area.height
        
        .item_area.left = .main_area.left
        .item_area.top = .main_area.top + .main_area.height + SpcLineY
        .item_area.width = .main_area.width
        .item_area.height = ItemHeight 'GetShapeSize("TextYcate1", 2)
    End With
    
        'Call GetShapeFromTemplate(shp, "TextTitle")
        'shp.DrawingObject.Characters.Text = MosaicOut.title
        'shp.left = MosaicOut.main_area.left
        'shp.top = MosaicOut.whole.top + MarginTop
        'shp.width = MosaicOut.main_area.width
        'Call DrawScale
        Call DrawLayout("RectGroup", MosaicOut.main_area)
        Call DrawLayout("RectTotal", MosaicOut.total_area)
        Call DrawScale '2005.12.22 PYJ  moved from above
End Sub

Private Sub DrawLayout(ByVal strName As String, rect As typeArea)
    Dim left As Double, top As Double, right As Double, bottom As Double
    Dim shp As Shape
    Call GetShapeFromTemplate(shp, strName)

    shp.left = rect.left
    shp.top = rect.top
    shp.width = rect.width
    shp.height = rect.height
    'add 2005.12.22 PYJ
    rect.left = shp.left
    rect.top = shp.top
    rect.width = shp.width
    rect.height = shp.height
    'add end
    'Set shp = ActiveSheet.Shapes.AddShape(msoShapeRectangle, rect.left, rect.top, rect.width, rect.height)
End Sub

Private Sub DrawScale()
    Dim height As Double
    height = GetShapeSize("TextV1", 2) '2005.12.22 PYJ  old:30
    Call DrawGrpText("TextV1", "100%", MosaicOut.axis_area.left - 5, MosaicOut.axis_area.top - height / 2 + 1, _
                        MosaicOut.axis_area.width, height)  '2005.11.30 PYJ  old:
    'Call DrawGrpText("TextV1", MosaicOut.axis_area.left, MosaicOut.axis_area.top - height / 4, _
                        MosaicOut.axis_area.width - 2, height, 1)
    Call DrawGrpText("TextV1", "75%", MosaicOut.axis_area.left - 5, MosaicOut.axis_area.top + MosaicOut.axis_area.height * 0.25 - height / 2 + 1, _
                        MosaicOut.axis_area.width, height)  '2005.11.30 PYJ  old:
    'Call DrawGrpText("TextV075", MosaicOut.axis_area.left, MosaicOut.axis_area.top + MosaicOut.axis_area.height * 0.25 - height / 4, _
                        MosaicOut.axis_area.width - 2, height, 1)
    Call DrawGrpText("TextV1", "50%", MosaicOut.axis_area.left - 5, MosaicOut.axis_area.top + MosaicOut.axis_area.height * 0.5 - height / 2 + 1, _
                        MosaicOut.axis_area.width, height)  '2005.11.30 PYJ  old:
    'Call DrawGrpText("TextV05", MosaicOut.axis_area.left, MosaicOut.axis_area.top + MosaicOut.axis_area.height * 0.5 - height / 4, _
                        MosaicOut.axis_area.width - 2, height, 1)
    Call DrawGrpText("TextV1", "25%", MosaicOut.axis_area.left - 5, MosaicOut.axis_area.top + MosaicOut.axis_area.height * 0.75 - height / 2 + 1, _
                        MosaicOut.axis_area.width, height)  '2005.11.30 PYJ  old:
    'Call DrawGrpText("TextV025", MosaicOut.axis_area.left, MosaicOut.axis_area.top + MosaicOut.axis_area.height * 0.75 - height / 4, _
                        MosaicOut.axis_area.width - 2, height, 1)
    Call DrawGrpText("TextV1", "0%", MosaicOut.axis_area.left - 5, MosaicOut.axis_area.top + MosaicOut.axis_area.height - height / 2 + 1, _
                        MosaicOut.axis_area.width, height)  '2005.11.30 PYJ  old:
    'Call DrawGrpText("TextV0", MosaicOut.axis_area.left, MosaicOut.axis_area.top + MosaicOut.axis_area.height - height / 4, _
                        MosaicOut.axis_area.width - 2, height, 1)

    Call DrawGrpLine(MosaicOut.main_area.left - 5, MosaicOut.main_area.top, 6, 1)
    Call DrawGrpLine(MosaicOut.main_area.left - 5, MosaicOut.main_area.top + MosaicOut.main_area.height * 0.25, 6, 1)
    Call DrawGrpLine(MosaicOut.main_area.left - 5, MosaicOut.main_area.top + MosaicOut.main_area.height * 0.5, 6, 1)
    Call DrawGrpLine(MosaicOut.main_area.left - 5, MosaicOut.main_area.top + MosaicOut.main_area.height * 0.75, 6, 1)
    Call DrawGrpLine(MosaicOut.main_area.left - 5, MosaicOut.main_area.top + MosaicOut.main_area.height, 6, 1)
End Sub

Private Sub DrawObject(ByVal bFlgMain As Boolean, rect As typeArea, ByVal index As Integer)
    Dim left As Double, top As Double, width As Double, height As Double
    Dim shp As Shape
    If (bFlgMain) Then
        left = MosaicOut.main_area.left + rect.left
        top = MosaicOut.main_area.top + rect.top
    Else
        left = MosaicOut.total_area.left + rect.left
        top = MosaicOut.total_area.top + rect.top
    End If
    width = rect.width
    height = rect.height
    If width < 0 Then width = 0
    If height < 0 Then height = 0
    index = (index - 1) Mod 9 + 1
    Call GetShapeFromTemplate(shp, "RectMzk" & index)
    shp.left = left
    shp.top = top
    shp.DrawingObject.width = width
    shp.DrawingObject.height = height
    'Set shp = ActiveSheet.Shapes.AddShape(msoShapeRectangle, left, top, width, height)
    'shp.Fill.ForeColor.SchemeColor = color
    'add 2005.12.16 PYJ
    If (bFlgMain) Then
        rect.left = shp.left - MosaicOut.main_area.left
        rect.top = shp.top - MosaicOut.main_area.top
    Else
        rect.left = shp.left - MosaicOut.total_area.left
        rect.top = shp.top - MosaicOut.total_area.top
    End If
    rect.width = shp.DrawingObject.width
    rect.height = shp.DrawingObject.height
    'add end
End Sub

Private Sub DrawBoundary(ByVal index As Long, ByVal l As Double, ByVal flgArea As Integer)
    Dim left As Double, top As Double, width As Double, height As Double
    Dim x As Double, y As Double
    Dim shp As Shape
    If flgArea = 1 Then
        x = MosaicOut.item_area.left + l
        width = MosaicOut.item_area.width / MosaicOut.itemnum
        height = ItemHeight         'MosaicOut.item_area.height
        left = MosaicOut.item_area.left + width * index
        top = MosaicOut.item_area.top
        Set shp = ActiveSheet.Shapes.AddLine(x, MosaicOut.item_area.top - SpcLineY, left, top)
        shp.DrawingObject.ShapeRange.Line.DashStyle = msoLineDash
        Set shp = ActiveSheet.Shapes.AddLine(left, top, left, top + height - 1)
        shp.DrawingObject.ShapeRange.Line.DashStyle = msoLineDash
    Else
        y = MosaicOut.cate_area.top + l
        height = MosaicOut.cate_area.height / MosaicOut.catenum
        width = CateWidth           'MosaicOut.cate_area.width
        left = MosaicOut.cate_area.left
        top = MosaicOut.cate_area.top + index * height
        Set shp = ActiveSheet.Shapes.AddLine(MosaicOut.cate_area.left - SpcLineX, y, left, top)
        shp.DrawingObject.ShapeRange.Line.DashStyle = msoLineDash
        Set shp = ActiveSheet.Shapes.AddLine(left, top, left + width - 1, top)
        shp.DrawingObject.ShapeRange.Line.DashStyle = msoLineDash
    End If
End Sub

Private Sub DrawTextA(ByVal str As String, ByVal index As Long, ByVal flgArea As Integer)
    Dim left As Double, top As Double, width As Double, height As Double
    Dim shp As Shape
    If flgArea = 1 Then
        width = MosaicOut.item_area.width / MosaicOut.itemnum
        height = ItemHeight     ' MosaicOut.item_area.height
        left = MosaicOut.item_area.left + width * index
        top = MosaicOut.item_area.top
        Call GetShapeFromTemplate(shp, "TextYCate1")
    Else
        height = MosaicOut.cate_area.height / MosaicOut.catenum
        width = CateWidth       'MosaicOut.cate_area.width
        left = MosaicOut.cate_area.left
        top = MosaicOut.cate_area.top + index * height
        Call GetShapeFromTemplate(shp, "TextXCate1")
    End If
    shp.left = left
    shp.top = top
    shp.DrawingObject.width = width
    shp.DrawingObject.height = height
    shp.DrawingObject.Text = str
End Sub

Private Function GetWidth() As Double
    Dim width As Double
    width = MarginLft
    width = width + GetShapeSize("TextV1", 1)                 'axis
    width = width + BarThickTate                                'main
    width = width + SpcBarTotal + TBarThickTate                     'total
    width = width + SpcLineX + CateWidth 'GetShapeSize("TextXCate1", 1)    'cate
    width = width + MarginRgt
    GetWidth = width
End Function

Private Function GetHeight() As Double
    Dim height As Double
    height = MarginTop
    height = height '+ GetShapeSize("TextTitle", 2)
    height = height + SpcTitle
    height = height + BarLengthTate
    height = height + SpcLineY
    height = height + ItemHeight 'GetShapeSize("TextYCate1", 2)
    height = height + MarginBtm
    GetHeight = height
End Function

'rewrote 2005.11.30 PYJ
'flg: 1--Hor text width; 2--Ver text height
'maxlen: maximum char number per line (|fffd|S|fffd|p|fffd||fffd||fffd||fffd|)
'2005.12.22 add maxlen
Private Function GetLargestSize(ByVal flg As Integer, ByVal maxlen As Integer) As Double
    Dim i As Long
    Dim shp As Shape
    Dim wAuto As Double, hAuto As Double
    Dim width As Double, height As Double
    
    If flg = 1 Then
        Call GetShapeFromTemplate(shp, "TextXCate1")
        width = 0
        For i = 1 To MosaicOut.catenum
            shp.DrawingObject.Text = catey(i).name
            shp.DrawingObject.AutoSize = True
            wAuto = shp.DrawingObject.width
            If wAuto > width Then width = wAuto
        Next i
        shp.DrawingObject.Text = String(maxlen, "|fffd|}") '"|fffd||fffd||fffd|U|fffd|C|fffd|N|fffd|}|fffd||fffd||fffd|U|fffd|C|fffd|N|fffd|}" '|fffd|S|fffd|p10|fffd||fffd||fffd||fffd|
        shp.DrawingObject.AutoSize = True
        wAuto = shp.DrawingObject.width
        GetLargestSize = IIf(width < wAuto, width, wAuto)
    Else
        Call GetShapeFromTemplate(shp, "TextYCate1")
        height = 0
        For i = 1 To MosaicOut.itemnum
            shp.DrawingObject.Text = catex(i).name
            shp.DrawingObject.AutoSize = True
            hAuto = shp.DrawingObject.height
            If hAuto > height Then height = hAuto
        Next i
        shp.DrawingObject.Text = "|fffd||fffd||fffd|U|fffd|C|fffd|N|fffd|}|fffd||fffd||fffd|U|fffd|C|fffd|N|fffd|}" '|fffd|S|fffd|p10|fffd||fffd||fffd||fffd|
        shp.DrawingObject.AutoSize = True
        hAuto = shp.DrawingObject.height
        GetLargestSize = IIf(height < hAuto, height, hAuto)
    End If
    shp.Delete
End Function

'Private Function GetLargestSize(ByVal flg As Integer) As Double
'    Dim i As Long, maxl As Long, maxind As Long
'    Dim shp As Shape
'    Dim wAuto As Double, hAuto As Double
'    Dim width As Double, height As Double
'    Dim fontSize As Double
'    Dim cnt As Double
'
'    width = BarThickTate / MosaicOut.itemnum
'    height = BarLengthTate / MosaicOut.catenum
'    If flg = 1 Then
'        Call GetShapeFromTemplate(shp, "TextXCate1")
'        fontSize = shp.DrawingObject.Font.Size
'        shp.DrawingObject.Text = ""
'        shp.DrawingObject.AutoSize = True
'        wAuto = shp.DrawingObject.width
'        hAuto = shp.DrawingObject.height
'        maxl = 0
'        For i = 1 To MosaicOut.catenum
'            If Len(catey(i).name) > maxl Then
'                maxl = Len(catey(i).name)
'                maxind = i
'            End If
'        Next i
'        height = Int(height / hAuto)
'        If height < 1 Then
'            height = 1
'            BarLengthTate = MosaicOut.catenum * hAuto
'        End If
'        cnt = maxl / height
'        If cnt <> Int(cnt) Then
'            cnt = Int(cnt) + 1
'        End If
'        GetLargestSize = cnt * fontSize + wAuto
'    Else
'        Call GetShapeFromTemplate(shp, "TextYCate1")
'        fontSize = shp.DrawingObject.Font.Size
'        shp.DrawingObject.Text = ""
'        shp.DrawingObject.AutoSize = True
'        wAuto = shp.DrawingObject.width
'        hAuto = shp.DrawingObject.height
'        maxl = 0
'        For i = 1 To MosaicOut.itemnum
'            If Len(catex(i).name) > maxl Then
'                maxl = Len(catex(i).name)
'                maxind = i
'            End If
'        Next i
'        width = width - wAuto
'        width = Int(width / fontSize)
'        If width < 1 Then
'            width = 1
'            BarThickTate = MosaicOut.itemnum * (fontSize + wAuto)
'        End If
'        cnt = maxl / width
'        If cnt <> Int(cnt) Then
'            cnt = Int(cnt) + 1
'        End If
'        GetLargestSize = cnt * hAuto
'    End If
'    shp.Delete
'End Function

'=== EOF ===
Attribute VB_Name = "MdlDrawYoko"
'===================================================
'Module for drawing Mosaic Graph(Yoko)
'
' 2005.10
'===================================================
Option Explicit

Private MainChart As ChartObject
Private ItemWidth As Double
Private CateHeight As Double

Sub DrawMosaicYoko(ByVal rngData As Range, ByVal top As Long, ByVal left As Long)
    Dim i As Long, j As Long
    Dim data  As Double
    Dim width As Double, height As Double, h As Double, w As Double
    Dim a As typeArea
    Dim firstShape As Integer, lastShape As Integer
    Dim aryShpNo() As Variant
    Dim shp As Shape
    Dim gapsize As Double
    Dim hTotal As Double, wTotal As Double, ht As Double, ht1 As Double, wt As Double, wt1 As Double
    Dim tblRow As Double, tblCol As Double
    Dim rge As Range
    
    BarLengthYoko = 250
    BarThickYoko = TBarThickYoko * MosaicOut.catenum * BarThickRatio
    If (BarThickYoko < 250) Then BarThickYoko = 250 '2005.11.30 PYJ
    
    ItemWidth = GetLargestSize(1, 8)
    CateHeight = GetLargestSize(2, 10)
    
    MosaicOut.whole.left = left
    MosaicOut.whole.top = top
    MosaicOut.whole.width = GetWidth()
    MosaicOut.whole.height = GetHeight()

    Call GetTempl(MainChart)
    MainChart.left = left
    MainChart.top = top
    MainChart.Select

    'Call MainChart.ShapeRange.ScaleWidth(MosaicOut.whole.width / MainChart.width, msoFalse, msoScaleFromTopLeft)
    'Call MainChart.ShapeRange.ScaleHeight(MosaicOut.whole.height / MainChart.height, msoFalse, msoScaleFromTopLeft)
    MainChart.width = MosaicOut.whole.width / MainChart.width * MainChart.width
    MainChart.height = MosaicOut.whole.height / MainChart.height * MainChart.height
    tblRow = MainChart.TopLeftCell.row
    tblCol = MainChart.BottomRightCell.Column + 1
    If tblCol + MosaicOut.itemnum > 255 Then
        tblRow = MainChart.BottomRightCell.row + 1
        tblCol = MainChart.TopLeftCell.Column
    End If
    
    firstShape = ActiveSheet.Shapes.Count
    
    'rewrote 2005.12.16 PYJ
    DrawBackground
    SpcBarX = (50 - MosaicOut.itemnum) / 15
    If SpcBarX < 1 Then SpcBarX = 1
    SpcBarY = (50 - MosaicOut.catenum) / 15
    If SpcBarY < 1 Then SpcBarY = 1
    wTotal = MosaicOut.main_area.width - (MosaicOut.itemnum + 1) * SpcBarX
    hTotal = MosaicOut.main_area.height - (MosaicOut.catenum + 1) * SpcBarY
    a.top = SpcBarY
    ht = 0: ht1 = 0
    For i = 1 To MosaicOut.catenum
        h = catey(i).total / total
        a.height = h * hTotal + ht - ht1  'ht - ht1: |fffd||b377|
        ht = ht + SpcBarY + h * hTotal
        Set rge = rngData.Offset(i, 1)
        a.left = SpcBarX
        wt = 0: wt1 = 0
        For j = 1 To MosaicOut.itemnum
            data = Val(rge(1, j))
            w = data / catey(i).total
            a.width = w * wTotal + wt - wt1  'wt - wt1: |fffd||b377|
            wt = wt + SpcBarX + w * wTotal
            Call DrawObject(True, a, j)
            wt1 = a.left + a.width
            a.left = a.left + a.width + SpcBarX
        Next j
        ht1 = a.top + a.height
        If MosaicOut.flgDist Then
            Call DrawTextA(catey(i).name, i - 1, 1)
            Call DrawBoundary(i - 1, a.top - SpcBarY, 1)
        Else
            Call DrawGrpText("TextYCate1", catey(i).name, _
                        MosaicOut.item_area.left, _
                        MosaicOut.item_area.top + a.top, _
                        MosaicOut.item_area.width, _
                        a.height, 0, xlVAlignCenter)
        End If
        a.top = a.top + a.height + SpcBarY
    Next i
    If MosaicOut.flgDist Then
        Call DrawBoundary(i - 1, MosaicOut.item_area.height, 1)
    End If
    wTotal = MosaicOut.total_area.width - (MosaicOut.itemnum + 1) * SpcBarX
    a.left = SpcBarX
    a.height = MosaicOut.total_area.height - 2 * SpcBarY
    a.top = SpcBarY
    wt = 0: wt1 = 0
    For i = 1 To MosaicOut.itemnum
        w = catex(i).total / total
        a.width = w * wTotal + wt - wt1  'wt - wt1: |fffd||b377|
        wt = wt + SpcBarX + w * wTotal
        Call DrawObject(False, a, i)
        wt1 = a.left + a.width
        If MosaicOut.flgDist Then
            Call DrawTextA(catex(i).name, i - 1, 2)
            Call DrawBoundary(i - 1, a.left - SpcBarX, 2)
        Else
            Call DrawGrpText("TextXCate1", catex(i).name, _
                        MosaicOut.cate_area.left + a.left, _
                        MosaicOut.cate_area.top, _
                        a.width, _
                        MosaicOut.cate_area.height, xlHAlignCenter, 0)
        End If
        a.left = a.left + a.width + SpcBarX
    Next i
    'old:
    'DrawBackground
    'width = 0
    'height = 0
    'For i = 1 To MosaicOut.catenum
    '    gapsize = 0
    '    h = catey(i).total / total
    '    For j = 1 To MosaicOut.itemnum
    '        a.left = width * (MosaicOut.main_area.width - SpcBarX) + SpcBarX + gapsize
    '        a.top = height * (MosaicOut.main_area.height - SpcBarY) + SpcBarY
    '        data = Val(rngData.Range("A1").Offset(i, j))
    '        w = data / catey(i).total
    '        a.width = w * (MosaicOut.main_area.width - SpcBarX) - SpcBarX - gapsize
    '        a.height = h * (MosaicOut.main_area.height - SpcBarY) - SpcBarY
    '        If (a.width < 0.02) Then
    '            a.width = 0
    '            a.left = a.left - SpcBarX + 1
    '            If a.left < 0 Then a.left = 1
    '            gapsize = gapsize + SpcBarX / 2
    '            'w = 0
    '        Else
    '            a.left = a.left - gapsize
    '            a.width = a.width + gapsize
    '            gapsize = 0
    '        End If
    '        Call DrawObject(True, a, j)
    '        width = width + w
    '    Next j
    '    If MosaicOut.flgDist Then
    '        Call DrawTextA(catey(i).name, i - 1, 1)
    '        Call DrawBoundary(i - 1, a.top - SpcBarY, 1)
    '    Else
    '        Call DrawGrpText("TextYCate1", catey(i).name, _
    '                MosaicOut.item_area.left, _
    '                MosaicOut.item_area.top + height * MosaicOut.item_area.height, _
    '                MosaicOut.item_area.width, _
    '                h * MosaicOut.item_area.height) '2005.12.2 PYJ  old:
    '        'Call DrawGrpText(catey(i).name, _
    '                MosaicOut.item_area.left, _
    '                MosaicOut.item_area.top + height * MosaicOut.item_area.height, _
    '                MosaicOut.item_area.width, _
    '                h * MosaicOut.item_area.height, 2)
    '    End If
    '    width = 0
    '    height = height + h
    'Next i
    'If MosaicOut.flgDist Then
    '    Call DrawBoundary(i - 1, MosaicOut.item_area.height, 1)
    'End If
    'width = 0
    'For i = 1 To MosaicOut.itemnum
    '    w = catex(i).total / total
    '    a.left = width * (MosaicOut.total_area.width - SpcBarX) + SpcBarX
    '    a.top = SpcBarY
    '    a.width = w * (MosaicOut.total_area.width - SpcBarX) - SpcBarX
    '    a.height = MosaicOut.total_area.height - 2 * SpcBarY
    '    Call DrawObject(False, a, i)
    '    If MosaicOut.flgDist Then
    '        Call DrawTextA(catex(i).name, i - 1, 2)
    '        Call DrawBoundary(i - 1, a.left - SpcBarX, 2)
    '    Else
    '        Call DrawGrpText("TextXCate1", catex(i).name, _
    '                MosaicOut.cate_area.left + width * MosaicOut.cate_area.width, _
    '                MosaicOut.cate_area.top, _
    '                w * MosaicOut.cate_area.width, _
    '                MosaicOut.cate_area.height) '2005.12.2 PYJ  old:
    '        'Call DrawGrpText(catex(i).name, _
    '                MosaicOut.cate_area.left + width * MosaicOut.cate_area.width, _
    '                MosaicOut.cate_area.top, _
    '                w * MosaicOut.cate_area.width, _
    '                MosaicOut.cate_area.height, 2)
    '    End If
    '    width = width + w
    'Next i
    If MosaicOut.flgDist Then
        Call DrawBoundary(i - 1, MosaicOut.cate_area.width, 2)
    End If
    Call DrawGrpText("TextTotal", "|fffd|S|fffd||fffd|", _
            MosaicOut.item_area.left, _
            MosaicOut.total_area.top, _
            MosaicOut.item_area.width, _
            MosaicOut.total_area.height) '2005.12.2 PYJ  old:
    'Call GetShapeFromTemplate(shp, "TextTotal")
    'shp.left = MosaicOut.item_area.left
    'shp.top = MosaicOut.total_area.top
    'shp.DrawingObject.AutoSize = True
    lastShape = ActiveSheet.Shapes.Count
    ReDim aryShpNo(1 To lastShape - firstShape + 1)
    For i = firstShape To lastShape
        aryShpNo(i - firstShape + 1) = i
    Next i
    ActiveSheet.Shapes.Range(aryShpNo).Select
    Selection.Group
    MainChart.Select
    ActiveSheet.Shapes(ActiveSheet.Shapes.Count).Select '2005.12.16 PYJ
    Call MatchWorkbookFont  '2005.12.16 PYJ
    
    'output % table
    ActiveSheet.Cells(tblRow, tblCol + 1).Value = "|fffd||fffd|%|fffd|\" '2005.12.2 PYJ
    'ActiveSheet.Cells(tblRow, tblCol + MosaicOut.itemnum + 1).Value = "|fffd||fffd||fffd|\"
    For i = 1 To MosaicOut.itemnum
        ActiveSheet.Range("A1").Offset(tblRow, tblCol + i).Value = catex(i).name
    Next i
    For i = 1 To MosaicOut.catenum
        ActiveSheet.Range("A1").Offset(tblRow + i, tblCol).Value = catey(i).name
        For j = 1 To MosaicOut.itemnum
            data = Val(rngData.Range("A1").Offset(i, j))
            h = data / catey(i).total
            ActiveSheet.Range("A1").Offset(tblRow + i, tblCol + j).Value = h * 100 & "%"
        Next j
        'ActiveSheet.Range("A1").Offset(tblRow + i, tblCol + MosaicOut.itemnum + 1).Value = 1
    Next i
    ActiveSheet.Cells(tblRow + MosaicOut.catenum + 2, tblCol + 1).Value = "|fffd|S|fffd||fffd|"
    For i = 1 To MosaicOut.itemnum
        ActiveSheet.Range("A1").Offset(tblRow + MosaicOut.catenum + 1, tblCol + i).Value = catex(i).total / total * 100 & "%"
    Next i
    Set rge = ActiveSheet.Cells(tblRow + 2, tblCol + 2).Range(RangeAddress(1, 1, MosaicOut.catenum + 1, MosaicOut.itemnum)) '2005.12.22 PYJ
    rge.NumberFormatLocal = "0.0%" '2005.12.22 PYJ
    'ActiveSheet.Range("A1").Offset(tblRow + MosaicOut.catenum + 1, tblCol + MosaicOut.itemnum + 1).Value = 1
    Set rge = ActiveSheet.Cells(tblRow + 1, tblCol + 1)
    Call DrawBorder(Range(rge, rge.Offset(MosaicOut.catenum, MosaicOut.itemnum)), xlThin)
    Call DrawBorder(Range(rge, rge.Offset(MosaicOut.catenum + 1, MosaicOut.itemnum)), xlThin)
    Call DrawBorder(Range(rge, rge.Offset(0, MosaicOut.itemnum)), xlThin)
    Call DrawBorder(Range(rge, rge.Offset(MosaicOut.catenum + 1, 0)), xlThin)
End Sub

Private Sub DrawBackground()
    With MosaicOut
        .cate_area.left = .whole.left + MarginLft + SpcLineY + ItemWidth  'GetShapeSize("TextYCate1", 1)
        .cate_area.top = .whole.top + MarginTop + SpcTitle
        .cate_area.width = BarLengthYoko
        .cate_area.height = CateHeight      'GetShapeSize("TextXCate1", 2)
        
        .total_area.left = .cate_area.left
        .total_area.top = .cate_area.top + .cate_area.height + SpcLineX
        .total_area.width = BarLengthYoko
        .total_area.height = TBarThickYoko
        
        .main_area.left = .total_area.left
        .main_area.top = .total_area.top + .total_area.height + SpcBarTotal
        .main_area.width = BarLengthYoko
        .main_area.height = BarThickYoko
    
        .axis_area.left = .main_area.left
        .axis_area.top = .main_area.top + .main_area.height
        .axis_area.width = BarLengthYoko
        .axis_area.height = GetShapeSize("TextV1", 2)
        
        .item_area.left = .whole.left + MarginLft
        .item_area.top = .main_area.top
        .item_area.width = ItemWidth     'GetShapeSize("TextYCate1", 1)
        .item_area.height = BarThickYoko
    End With
    
        'Call GetShapeFromTemplate(shp, "TextTitle")
        'shp.DrawingObject.Characters.Text = MosaicOut.title
        'shp.left = MosaicOut.main_area.left
        'shp.top = MosaicOut.whole.top + MarginTop
        'shp.width = MosaicOut.main_area.width
        'Call DrawScale
        Call DrawLayout("RectGroup", MosaicOut.main_area)
        Call DrawLayout("RectTotal", MosaicOut.total_area)
        Call DrawScale '2005.12.22 PYJ  moved from above
End Sub

Private Sub DrawLayout(ByVal strName As String, rect As typeArea)
    Dim left As Double, top As Double, right As Double, bottom As Double
    Dim shp As Shape
    Call GetShapeFromTemplate(shp, strName)

    shp.left = rect.left
    shp.top = rect.top
    shp.width = rect.width
    shp.height = rect.height
    'add 2005.12.22 PYJ
    rect.left = shp.left
    rect.top = shp.top
    rect.width = shp.width
    rect.height = shp.height
    'add end
    'Set shp = ActiveSheet.Shapes.AddShape(msoShapeRectangle, rect.left, rect.top, rect.width, rect.height)
End Sub

Private Sub DrawScale()
    Dim width As Double
    width = GetShapeSize("TextV1", 1) '2005.12.22 PYJ  old:30
    Call DrawGrpText("TextV1", "0%", MosaicOut.axis_area.left - width / 2, MosaicOut.axis_area.top + 5, _
                        width, MosaicOut.axis_area.height - 2) '2005.12.2 PYJ  old:
    'Call DrawGrpText("TextV0", MosaicOut.axis_area.left - width / 4, MosaicOut.axis_area.top, _
                        width, MosaicOut.axis_area.height - 2, 1)
    Call DrawGrpText("TextV1", "25%", MosaicOut.axis_area.left + MosaicOut.axis_area.width * 0.25 - width / 2, MosaicOut.axis_area.top + 5, _
                        width, MosaicOut.axis_area.height - 2) '2005.12.2 PYJ  old:
    'Call DrawGrpText("TextV025", MosaicOut.axis_area.left + MosaicOut.axis_area.width * 0.25 - width / 4, MosaicOut.axis_area.top, _
                        width, MosaicOut.axis_area.height - 2, 1)
    Call DrawGrpText("TextV1", "50%", MosaicOut.axis_area.left + MosaicOut.axis_area.width * 0.5 - width / 2, MosaicOut.axis_area.top + 5, _
                        width, MosaicOut.axis_area.height - 2) '2005.12.2 PYJ  old:
    'Call DrawGrpText("TextV05", MosaicOut.axis_area.left + MosaicOut.axis_area.width * 0.5 - width / 4, MosaicOut.axis_area.top, _
                        width, MosaicOut.axis_area.height - 2, 1)
    Call DrawGrpText("TextV1", "75%", MosaicOut.axis_area.left + MosaicOut.axis_area.width * 0.75 - width / 2, MosaicOut.axis_area.top + 5, _
                        width, MosaicOut.axis_area.height - 2) '2005.12.2 PYJ  old:
    'Call DrawGrpText("TextV075", MosaicOut.axis_area.left + MosaicOut.axis_area.width * 0.75 - width / 4, MosaicOut.axis_area.top, _
                        width, MosaicOut.axis_area.height - 2, 1)
    Call DrawGrpText("TextV1", "100%", MosaicOut.axis_area.left + MosaicOut.axis_area.width - width / 2, MosaicOut.axis_area.top + 5, _
                        width, MosaicOut.axis_area.height - 2) '2005.12.2 PYJ  old:
    'Call DrawGrpText("TextV1", MosaicOut.axis_area.left + MosaicOut.axis_area.width - width / 4, MosaicOut.axis_area.top, _
                        width, MosaicOut.axis_area.height - 2, 1)

    Call DrawGrpLine(MosaicOut.main_area.left, MosaicOut.axis_area.top, 1, 6)
    Call DrawGrpLine(MosaicOut.main_area.left + MosaicOut.axis_area.width * 0.25, MosaicOut.axis_area.top, 1, 6)
    Call DrawGrpLine(MosaicOut.main_area.left + MosaicOut.axis_area.width * 0.5, MosaicOut.axis_area.top, 1, 6)
    Call DrawGrpLine(MosaicOut.main_area.left + MosaicOut.axis_area.width * 0.75, MosaicOut.axis_area.top, 1, 6)
    Call DrawGrpLine(MosaicOut.main_area.left + MosaicOut.axis_area.width, MosaicOut.axis_area.top, 1, 6)
End Sub

Private Sub DrawObject(ByVal bFlgMain As Boolean, rect As typeArea, ByVal index As Integer)
    Dim left As Double, top As Double, width As Double, height As Double
    Dim shp As Shape
    If (bFlgMain) Then
        left = MosaicOut.main_area.left + rect.left
        top = MosaicOut.main_area.top + rect.top
    Else
        left = MosaicOut.total_area.left + rect.left
        top = MosaicOut.total_area.top + rect.top
    End If
    width = rect.width
    height = rect.height
    If width < 0 Then width = 0
    If height < 0 Then height = 0
    index = (index - 1) Mod 9 + 1
    Call GetShapeFromTemplate(shp, "RectMzk" & index)
    shp.left = left
    shp.top = top
    shp.DrawingObject.width = width
    shp.DrawingObject.height = height
    'Set shp = ActiveSheet.Shapes.AddShape(msoShapeRectangle, left, top, width, height)
    'shp.Fill.ForeColor.SchemeColor = color
    'add 2005.12.16 PYJ
    If (bFlgMain) Then
        rect.left = shp.left - MosaicOut.main_area.left
        rect.top = shp.top - MosaicOut.main_area.top
    Else
        rect.left = shp.left - MosaicOut.total_area.left
        rect.top = shp.top - MosaicOut.total_area.top
    End If
    rect.width = shp.DrawingObject.width
    rect.height = shp.DrawingObject.height
    'add end
End Sub

Private Sub DrawBoundary(ByVal index As Long, ByVal w As Double, ByVal flgArea As Integer)
    Dim left As Double, top As Double, width As Double, height As Double
    Dim x As Double, y As Double
    Dim shp As Shape
    If flgArea = 1 Then
        y = MosaicOut.item_area.top + w
        height = MosaicOut.item_area.height / MosaicOut.catenum
        width = ItemWidth 'MosaicOut.item_area.width
        left = MosaicOut.item_area.left
        top = MosaicOut.item_area.top + height * index
        Set shp = ActiveSheet.Shapes.AddLine(left + width - 1, top, MosaicOut.main_area.left, y)
        shp.DrawingObject.ShapeRange.Line.DashStyle = msoLineDash
        Set shp = ActiveSheet.Shapes.AddLine(left, top, left + width - 1, top)
        shp.DrawingObject.ShapeRange.Line.DashStyle = msoLineDash
    Else
        x = MosaicOut.cate_area.left + w
        width = MosaicOut.cate_area.width / MosaicOut.itemnum
        height = CateHeight 'MosaicOut.cate_area.height
        left = MosaicOut.cate_area.left + index * width
        top = MosaicOut.cate_area.top
        Set shp = ActiveSheet.Shapes.AddLine(left, top + height - 1, x, MosaicOut.total_area.top)
        shp.DrawingObject.ShapeRange.Line.DashStyle = msoLineDash
        Set shp = ActiveSheet.Shapes.AddLine(left, top, left, top + height - 1)
        shp.DrawingObject.ShapeRange.Line.DashStyle = msoLineDash
    End If
End Sub

Private Sub DrawTextA(ByVal str As String, ByVal index As Long, ByVal flgArea As Integer)
    Dim left As Double, top As Double, width As Double, height As Double
    Dim shp As Shape
    If flgArea = 1 Then
        height = MosaicOut.item_area.height / MosaicOut.catenum
        width = ItemWidth 'MosaicOut.item_area.width
        left = MosaicOut.item_area.left
        top = MosaicOut.item_area.top + height * index
        Call GetShapeFromTemplate(shp, "TextYCate1")
    Else
        width = MosaicOut.cate_area.width / MosaicOut.itemnum
        height = CateHeight 'MosaicOut.cate_area.height
        left = MosaicOut.cate_area.left + index * width
        top = MosaicOut.cate_area.top
        Call GetShapeFromTemplate(shp, "TextXCate1")
    End If
    shp.left = left
    shp.top = top
    shp.DrawingObject.width = width
    shp.DrawingObject.height = height
    shp.DrawingObject.Text = str
End Sub

Private Function GetWidth() As Double
    Dim width As Double
    width = MarginLft
    width = width + ItemWidth 'GetShapeSize("TextYCate1", 1)                 'item
    width = width + SpcLineY + BarLengthYoko                       'main
    width = width + MarginRgt
    GetWidth = width
End Function

Private Function GetHeight() As Double
    Dim height As Double
    height = MarginTop
    height = height '+ GetShapeSize("TextTitle", 2)
    height = height + SpcTitle
    height = height + CateHeight 'GetShapeSize("TextXCate1", 2)             'cate
    height = height + SpcLineX
    height = height + TBarThickYoko                             'total
    height = height + SpcBarTotal
    height = height + BarThickYoko
    height = height + GetShapeSize("TextV1", 2)               'axis
    height = height + MarginBtm
    GetHeight = height
End Function

'rewrote 2005.11.30 PYJ
'flg: 1--Hor text width; 2--Ver text height
'maxlen: maximum char number per line (|fffd|S|fffd|p|fffd||fffd||fffd||fffd|)
'2005.12.22 add maxlen
Private Function GetLargestSize(ByVal flg As Integer, ByVal maxlen As Integer) As Double
    Dim i As Long
    Dim shp As Shape
    Dim wAuto As Double, hAuto As Double
    Dim width As Double, height As Double
    
    If flg = 1 Then
        Call GetShapeFromTemplate(shp, "TextYCate1")
        width = 0
        For i = 1 To MosaicOut.catenum
            shp.DrawingObject.Text = catey(i).name
            shp.DrawingObject.AutoSize = True
            wAuto = shp.DrawingObject.width
            If wAuto > width Then width = wAuto
        Next i
        shp.DrawingObject.Text = String(maxlen, "|fffd|}") '"|fffd||fffd||fffd|U|fffd|C|fffd|N|fffd|}|fffd||fffd||fffd|U|fffd|C|fffd|N|fffd|}" '|fffd|S|fffd|p10|fffd||fffd||fffd||fffd|
        shp.DrawingObject.AutoSize = True
        wAuto = shp.DrawingObject.width
        GetLargestSize = IIf(width < wAuto, width, wAuto)
    Else
        Call GetShapeFromTemplate(shp, "TextXCate1")
        height = 0
        For i = 1 To MosaicOut.itemnum
            shp.DrawingObject.Text = catex(i).name
            shp.DrawingObject.AutoSize = True
            hAuto = shp.DrawingObject.height
            If hAuto > height Then height = hAuto
        Next i
        shp.DrawingObject.Text = "|fffd||fffd||fffd|U|fffd|C|fffd|N|fffd|}|fffd||fffd||fffd|U|fffd|C|fffd|N|fffd|}" '|fffd|S|fffd|p10|fffd||fffd||fffd||fffd|
        shp.DrawingObject.AutoSize = True
        hAuto = shp.DrawingObject.height
        GetLargestSize = IIf(height < hAuto, height, hAuto)
    End If
    shp.Delete
End Function

'Private Function GetLargestSize(ByVal flg As Integer) As Double
'    Dim i As Long, maxl As Long, maxind As Long
'    Dim shp As Shape
'    Dim wAuto As Double, hAuto As Double
'    Dim width As Double, height As Double
'    Dim fontSize As Double
'    Dim cnt As Double
'
'    height = BarThickYoko / MosaicOut.catenum
'    width = BarLengthYoko / MosaicOut.itemnum
'    If flg = 1 Then
'        Call GetShapeFromTemplate(shp, "TextYCate1")
'        fontSize = shp.DrawingObject.Font.Size
'        shp.DrawingObject.Text = ""
'        shp.DrawingObject.AutoSize = True
'        wAuto = shp.DrawingObject.width
'        hAuto = shp.DrawingObject.height
'        maxl = 0
'        For i = 1 To MosaicOut.catenum
'            If Len(catey(i).name) > maxl Then
'                maxl = Len(catey(i).name)
'                maxind = i
'            End If
'        Next i
'        height = Int(height / hAuto)
'        If height < 1 Then
'            height = 1
'            BarThickYoko = MosaicOut.catenum * hAuto
'        End If
'        cnt = maxl / height
'        If cnt <> Int(cnt) Then
'            cnt = Int(cnt) + 1
'        End If
'        GetLargestSize = cnt * fontSize + wAuto
'    Else
'        Call GetShapeFromTemplate(shp, "TextXCate1")
'        fontSize = shp.DrawingObject.Font.Size
'        shp.DrawingObject.Text = ""
'        shp.DrawingObject.AutoSize = True
'        wAuto = shp.DrawingObject.width
'        hAuto = shp.DrawingObject.height
'        maxl = 0
'        For i = 1 To MosaicOut.itemnum
'            If Len(catex(i).name) > maxl Then
'                maxl = Len(catex(i).name)
'                maxind = i
'            End If
'        Next i
'        width = width - wAuto
'        width = Int(width / fontSize)
'        If width < 1 Then
'            width = 1
'            BarLengthYoko = MosaicOut.itemnum * (fontSize + wAuto)
'        End If
'        cnt = maxl / width
'        If cnt <> Int(cnt) Then
'            cnt = Int(cnt) + 1
'        End If
'        GetLargestSize = cnt * hAuto
'    End If
'    shp.Delete
'End Function

'=== EOF ===
Attribute VB_Name = "MdlMosaic"
'===================================================
'|fffd||fffd||fffd|U|fffd|C|fffd|N|fffd|}(TK1)
'
' 2005.10
'===================================================
Option Explicit
Option Private Module '05.12.18 LSQ

Public Const ERR_OTHERBOOK As String = "|fffd||283|u|fffd|b|fffd|N|fffd||314||348||342||34e|w|fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B" 'same as in commMdl.bas @SSSTKV6.xls
Public MosaicOut As typeMosaic
Public catex() As typeCate
Public catey() As typeCate
Public total As Double
Public outWrkSht As Worksheet
Public TempShtName As String
Private Const MAX_SMP_NUM As Long = 20
Private Const MIN_SMP_NUM As Long = 2
Private Const MAX_ITM_NUM As Long = 10
Private Const MIN_ITM_NUM As Long = 2

Sub DoMosaic()
    Dim rtn As Boolean
    Dim title As String
    Dim rngData As Range, rngOut As Range
    Dim bOutToNew As Boolean, bSkip As Boolean, bLabel As Boolean, bVert As Boolean, bDist As Boolean
    Dim sht As Worksheet
    
    rtn = GetDlgInput(rngData, rngOut, title, bOutToNew, bSkip, bLabel, bVert, bDist)
    If rtn = False Then Exit Sub
    
    'MosaicOut.title = title
    MosaicOut.itemnum = rngData.Columns.Count - 1
    MosaicOut.catenum = rngData.Rows.Count - 1
    MosaicOut.flgDirt = bVert
    MosaicOut.flgDist = bDist
    
    rtn = ReadData(rngData)
    If rtn = False Then
        Call MsgBox(ERR_DATA)
        Exit Sub
    End If
    
    GetTemplate
    
    rngData.Worksheet.Activate
    DoEvents
    If bOutToNew Then
        Set sht = Sheets.Add
        Set rngOut = sht.Range("B2")
    End If
    Set outWrkSht = rngOut.Worksheet
    outWrkSht.Activate
    DoEvents
    
    Application.ScreenUpdating = False
    'If MosaicOut.flgDirt <> 0 Then
        Call DrawMosaicTate(rngData, rngOut.top, rngOut.left)
        Set rngOut = rngOut.Offset(Selection.BottomRightCell.row - Selection.TopLeftCell.row + 2, 0)
    'Else
        Call DrawMosaicYoko(rngData, rngOut.top, rngOut.left)
    'End If
    rngData.Worksheet.Activate
    DoEvents
    Application.DisplayAlerts = False
    ActiveWorkbook.Worksheets(TempShtName).Delete
    Application.DisplayAlerts = True
    rngOut.Worksheet.Activate
    DoEvents
    rngOut.Select
    'ActiveWindow.Zoom = 75
    ActiveWindow.DisplayGridlines = False
End Sub

Private Function GetDlgInput(rngData As Range, rngOut As Range, title As String, _
        bOutToNew As Boolean, bSkip As Boolean, bLabel As Boolean, bVert As Boolean, bDist As Boolean) As Boolean
    Dim rtn As Boolean
    Dim dlg As DialogSheet
    Dim c1 As Long, c2 As Long
    
    On Error Resume Next
    Set dlg = ThisWorkbook.DialogSheets("DlgMosaic")
    
ReDisp:
    rtn = dlg.Show

    'Cancel
    If rtn = False Then
        GetDlgInput = False
        On Error GoTo 0
        Exit Function
    End If

    'Data

    Set rngData = Range(FormulaA1_R1C1(dlg.EditBoxes("edtData").Text)) '07.2.9 LSQ add "FormulaA1_R1C1()"
    If rngData Is Nothing Then
        MsgBox ERR_DATARANGE
        GoTo ReDisp
    End If
       
    '05.12.16
    If UCase(rngData.Worksheet.Parent.name) <> UCase(ActiveWorkbook.name) Then
        MsgBox ERR_OTHERBOOK
        GoTo ReDisp
    End If
    'title = dlg.EditBoxes("edtTitle").Text
    
    bOutToNew = False '(dlg.OptionButtons("optOutNew") = xlOn)
    If Not bOutToNew Then
        Set rngOut = Range(FormulaA1_R1C1(dlg.EditBoxes("edtOutput").Text)) '07.2.9 LSQ add "FormulaA1_R1C1()"
        If rngOut Is Nothing Then
            MsgBox ERR_OUTRANGE
            GoTo ReDisp
        End If
        '2005.12.21
        If UCase(rngOut.Worksheet.Parent.name) <> UCase(ActiveWorkbook.name) Then
            MsgBox ERR_OTHERBOOK
            GoTo ReDisp
        End If
    End If
    
    bVert = True '(dlg.OptionButtons("optVert") = xlOn)
    bDist = (dlg.OptionButtons("optDistY") = xlOn)
    bSkip = True
    bLabel = True
      
    If Not CheckPara(rngData, bVert, bLabel) Then GoTo ReDisp
    
    GetDlgInput = True
    On Error GoTo 0
End Function

Private Function CheckPara(ByVal rngData As Range, ByVal bVert As Boolean, ByVal bLabel As Boolean) As Boolean
    Dim rge As Range
    Dim sc As Long, ic As Long
    CheckPara = True
    
    'MDF: 2006.1.12
    'OLD:
    'If rngData.Rows.Count < 2 Or rngData.Columns.Count < 2 Then
    '    Call MsgBox(ERR_DATARANGE)
    '    CheckPara = False
    '    Exit Function
    'End If
    sc = rngData.Rows.Count 'IIf(bVert, rngData.Rows.Count, rngData.Columns.Count)
    ic = rngData.Columns.Count 'IIf(bVert, rngData.Columns.Count, rngData.Rows.Count)
    If bLabel Then
        sc = sc - 1
        ic = ic - 1
    End If
    If (sc > MAX_SMP_NUM Or ic > MAX_ITM_NUM) Or (sc < MIN_SMP_NUM Or ic < MIN_ITM_NUM) Then
        Call MsgBox(ERR_DATARANGE)
        CheckPara = False
        Exit Function
    End If
    'end mdf
    
    Set rge = Range(rngData.Range("A1").Offset(1, 1), rngData.Range("A1").Offset(rngData.Rows.Count - 1, rngData.Columns.Count - 1))
    If Application.WorksheetFunction.Count(rge) <> Application.WorksheetFunction.CountA(rge) Then
        Call MsgBox(ERR_NONNUMERIC)
        CheckPara = False
    End If
    If Application.WorksheetFunction.CountIf(rge, "<0") > 0 Then
        Call MsgBox(ERR_MINUSDATA)
        CheckPara = False
    End If
    If Application.WorksheetFunction.CountIf(rge, ">0") < 1 Then
        Call MsgBox(ERR_ALLDATAZERO)
        CheckPara = False
    End If
End Function

Private Function ReadData(ByVal rngData As Range) As Boolean
    Dim i As Long, j As Long
    Dim wrkBk As Workbook
    Dim wrkSht As Worksheet
    Dim data As Double
    
    On Error Resume Next
    ReadData = True
    ReDim catex(1 To MosaicOut.itemnum)
    ReDim catey(1 To MosaicOut.catenum)
    Set wrkSht = rngData.Worksheet
    wrkSht.Activate
    For i = 1 To rngData.Columns.Count - 1
        catex(i).name = MidB(rngData.Range("A1").Offset(0, i).Text, 1, 32)
    Next i
    For i = 1 To rngData.Rows.Count - 1
        catey(i).name = MidB(rngData.Range("A1").Offset(i, 0).Text, 1, 32)
    Next i
    total = 0
    
    For i = 1 To rngData.Rows.Count - 1
        For j = 1 To rngData.Columns.Count - 1
            data = Val(rngData.Range("A1").Offset(i, j))
            catex(j).total = catex(j).total + data
            catey(i).total = catey(i).total + data
            total = total + data
        Next j
    Next i
    
    For i = 1 To MosaicOut.itemnum
        If catex(i).total = 0 Then
            ReadData = False
            Exit For
        End If
    Next i
    
     For i = 1 To MosaicOut.catenum
        If catey(i).total = 0 Then
            ReadData = False
            Exit For
        End If
    Next i
    On Error GoTo 0
End Function

Private Sub GetTemplate()
    Dim cht As ChartObject
    Dim sht As Worksheet
    On Error Resume Next
    Set sht = Sheets.Add
    DoEvents
    If MosaicOut.flgDirt <> 0 Then
        ThisWorkbook.Worksheets("TateMzk").Activate
        DoEvents
        ActiveSheet.ChartObjects(1).Activate
        DoEvents
    Else
        ThisWorkbook.Worksheets("YokoMzk").Activate
        DoEvents
        ActiveSheet.ChartObjects(1).Activate
        DoEvents
    End If
    ActiveChart.ChartArea.Copy
    DoEvents
    sht.Activate
    DoEvents
    sht.Paste
    DoEvents
    Application.CutCopyMode = False
    sht.ChartObjects(sht.ChartObjects.Count).Activate
    DoEvents
    ActiveChart.Shapes(1).Select
    DoEvents
    Call MatchWorkbookFont  '2005.12.22 PYJ
    Selection.Ungroup
    TempShtName = sht.name
    ActiveChart.Shapes("texttitle").Select
    On Error GoTo 0
End Sub

'=== EOF ===

Attribute VB_Name = "MosaicDef"
'===================================================
'Definitions for Mosaic
'
' 2005.10
'===================================================
Option Explicit

Type typeCate
    name As String
    total As Double
End Type

Type typeArea
    left As Double
    top As Double
    width As Double
    height As Double
End Type

Type typeMosaic
    title As String
    row As Double
    col As Double
    itemnum As Long
    catenum As Long
    flgDirt As Integer
    flgDist As Integer
    whole As typeArea
    main_area As typeArea
    item_area As typeArea
    total_area As typeArea
    axis_area As typeArea
    cate_area As typeArea
End Type
    
'Margin
Public Const MarginTop As Double = 30
Public Const MarginBtm As Double = 30
Public Const MarginLft As Double = 30
Public Const MarginRgt As Double = 30
'Space
Public SpcBarY As Double    '2005.12.16 PYJ  old:
'Public Const SpcBarY As Double = 2
Public SpcBarX As Double    '2005.12.16 PYJ  old:
'Public Const SpcBarX As Double = 2
Public Const SpcBarTotal As Double = 20
Public Const SpcLineY As Double = 10
Public Const SpcLineX As Double = 10
Public Const SpcTitle As Double = 5
'Size
Public Const BarThickRatio As Double = 1
Public BarLengthTate As Double
Public Const TBarThickTate As Double = 30
Public BarThickTate As Double               '= TBarThickTate * catenum
Public BarLengthYoko As Double
Public Const TBarThickYoko As Double = 20
Public BarThickYoko As Double               '= TBarThickYoko * catenum

'Error Messages
Public Const ERR_COMM_ITEM_SMP As String = "|fffd||348||34e|w|fffd||80aa||fffd|A|fffd|u|fffd|I|fffd||fffd||fffd||fffd||fffd||5c2||fffd||fffd||fffd||30c||90||fffd||fffd||12d09||7c2||fffd||fffd||102||fffd||fffd||fffd|v|fffd||202||1c1|A|fffd|K|fffd||602||142||342||202||fffd||fffd||94|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B\n|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd|Q|fffd||182||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
'Public Const ERR_COMMB_NUMBER As String = "|fffd|u|fffd|f|fffd|[|fffd|^|fffd||30c||90||fffd||fffd|v|fffd|u|fffd|I|fffd||fffd||fffd||fffd||fffd||5c2||fffd||fffd||fffd||30c||90||fffd||fffd|v|fffd|un|fffd||312|l|fffd|v|fffd||202||1c2||256||fffd||fffd||302||fffd||fffd||fffd||94|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B\n|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd|Q|fffd||182||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
Public Const ERR_COMMC_GENERAL As String = "|fffd|G|fffd||fffd||fffd|[|fffd||142||fffd||fffd|B"

Public Const ERR_DATARANGE As String = ERR_COMMC_GENERAL '"|fffd||348||342||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B|fffd|w|fffd||fffd||348||342||fffd||fffd|m|fffd|F|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
Public Const ERR_OUTRANGE As String = "|fffd||fffd||fffd||28f|o|fffd||350||fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B" '"|fffd||fffd||fffd||28f|o|fffd||350||fffd||314||348||342||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B|fffd|w|fffd||fffd||348||342||fffd||fffd|m|fffd|F|fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
Public Const ERR_DATA As String = ERR_COMMC_GENERAL '"Error data."
Public Const ERR_ALLDATAZERO As String = ERR_COMMC_GENERAL '"All of data is zero."
Public Const ERR_NONNUMERIC As String = ERR_COMMC_GENERAL '"Non-numeric data exists."
Public Const ERR_MINUSDATA  As String = ERR_COMMC_GENERAL '"Minus data exists."

'=== EOF ===
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
