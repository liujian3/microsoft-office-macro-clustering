Attribute VB_Name = "Language"
Option Explicit

Public text(121) As String
Public Enum IdLanguage
    IdGerman = 0
    IdEnglish = 1
    IdFrench = 2
    IdItalian = 3
    IdSpanish = 4
End Enum

Public Sub init_language(lang As IdLanguage)
    Select Case lang
        Case IdGerman
            text(0) = "Kontinuierlich"
            text(1) = "Datens|fffd|tze"
            text(2) = "Samplenummer"
            text(3) = "Abtastrate"
            text(4) = "Trigger"
            text(5) = "Ein"
            text(6) = "Aus"
            text(7) = "Start"
            text(8) = "Stopp"
            text(9) = "Kopfdaten"
            text(10) = "Grafik"
            text(11) = "Grenzwert|fffd|berwachung"
            text(12) = "Eingabe"
            text(13) = "Oberer Grenzwert"
            text(14) = "Unterer Grenzwert"
            text(15) = "Ergebnis"
            text(16) = "Einzelwerte"
            text(17) = "Aktuelle Daten"
            text(18) = "Peak Werte"
            text(19) = "Zelle"
            text(20) = "Unten"
            text(21) = "Rechts"
            text(22) = "Speicher"
            text(23) = "Speichermodus"
            text(24) = "Aufzeichnung"
            text(25) = "Eingabe"
            text(26) = "Gespeicherte Daten"
            text(27) = "Importieren"
            text(28) = "L|fffd|schen"
            text(29) = "Anzahl Datens|fffd|tze"
            text(30) = "Messung"
            text(31) = "Memory starten"
            text(32) = "Zur|fffd|cksetzen"
            text(33) = "Tarieren"
            text(34) = "Abbrechen"
            text(35) = "Start Zelle"
            text(36) = "Status"
            text(37) = "Kein Kraftmesger|fffd|t"
            text(38) = "Bereit"
            text(39) = "Kraftmessger|fffd|t nicht erkannt."
            text(40) = "Bitte |fffd|berpr|fffd|fen Sie das Anschlusskabel und die Spannungsversorgung!"
            text(41) = "Warten"
            text(42) = "Kommunikationsfehler."
            text(43) = "Zur|fffd|ck zur vorherigen Seite"
            text(44) = "|fffd|ffnen Sie ein neues Arbeitsblatt."
            text(45) = "Zugfestigkeit"
            text(46) = "Kraft"
            text(47) = "Durchschnitt"
            text(48) = "Varianz"
            text(49) = "Excelbereich ist ausgesch|fffd|pft."
            text(50) = "Wollen Sie sicher l|fffd|schen?"
            text(51) = "Keine gespeicherten Daten"
            text(52) = "Einheit"
            text(53) = "Grenzwerte"
            text(54) = "Gew|fffd|hlte Zelle kann nicht angezeigt werden."
            text(55) = "Eingabebereich ist falsch."
            text(56) = "Zul|fffd|ssiger Bereich ist |fffd|berschritten"
            text(57) = "Der obere oder untere Grenzwert ist au|fffd|erhalb des zul|fffd|ssigen Bereiches"
            text(58) = "Unterer Grenzwert ist gr|fffd||fffd|er als der obere Grenzwert. Trotzdem weiter?"
            text(59) = "Norm"
            text(60) = "Kabel"
            text(61) = "Pr|fffd|fungsdefinition"
            text(62) = "Lizenzschl|fffd|ssel"
            text(63) = "Lizenzdatei"
            text(64) = "Bezeichnung"
            text(65) = "Seriennummer"
            text(66) = "Lizenzdatei generieren"
            text(67) = "Die Datei existiert bereits. |fffd|berschreiben?"
            text(68) = "fehlerhaft"
            text(69) = "Option Kraftmessger|fffd|t"
            text(70) = "Kraftmessger|fffd|t"
            text(71) = "Hersteller"
            text(72) = "Kalibrierdatum"
            text(73) = "Maximalkraft"
            text(74) = "Aufl|fffd|sung"
            text(75) = "Schlie|fffd|en"
            text(76) = "|fffd|bernehmen"
            text(77) = "Pr|fffd|fangaben"
            text(78) = "Pr|fffd|fer"
            text(79) = "Pr|fffd|fdatum"
            text(80) = "wird verwendet! Bitte zuerst schlie|fffd|en."
            text(81) = "Datei nicht gespeichert."
            text(82) = "Fehler in der Lizenzierung"
            text(83) = "fehlerhaft oder nicht vorhanden."
            text(84) = "Kabelpr|fffd|fung"
            text(85) = "Ende"
            text(86) = "Report"
            text(87) = "Protokoll"
            text(88) = "Speichern"
            text(89) = "N|fffd|chste Anzeige"
            text(90) = "Istwert"
            text(91) = "Positiver Peak"
            text(92) = "Negativer Peak"
            text(93) = "Positives Maximum"
            text(94) = "Positives Minimum"
            text(95) = "Negatives Maximum"
            text(96) = "Negatives Minimum"
            text(97) = "Memory l|fffd|schen"
            text(98) = "Pr|fffd|fungen"
            text(99) = "Gesamtmenge"
            text(100) = "Pr|fffd|flos"
            text(101) = "Gravitation"
            text(102) = "Ung|fffd|ltiger Ger|fffd|tetyp"
            text(103) = "Kraftmessger|fffd|t wird nun abgeschaltet!"
            text(104) = "Ger|fffd|tetyp"
            text(105) = "unkompatibel"
            text(106) = "eingeben oder anklicken"
            text(107) = "Motoroption"
            text(108) = "Fahren bis"
            text(109) = "Geschwindigkeit"
            text(110) = "Wartezeit"
            text(111) = "Abriss"
            text(112) = "gespeichert"
            text(113) = "Automatik"
            text(114) = "Beginn der"
            text(115) = "Ende der"
            text(116) = "bei"
            text(117) = "Programm wird nun geschlossen!"
            text(118) = "Formular"
            text(119) = "Korrekte Datei unter 'Option' ausw|fffd|hlen."
            text(120) = "Die Firmware vom Kraftmessger|fffd|t ist zu alt."
            text(121) = "wird nicht ordnungsgem|fffd||fffd| funktionieren."
        Case IdEnglish
            text(0) = "Continuous"
            text(1) = "Number of data"
            text(2) = "Sample number"
            text(3) = "Sampling rate"
            text(4) = "Trigger"
            text(5) = "On"
            text(6) = "Off"
            text(7) = "Start"
            text(8) = "Stop"
            text(9) = "Header"
            text(10) = "Graphic"
            text(11) = "Comparator"
            text(12) = "Change"
            text(13) = "Upper limit"
            text(14) = "Lower limit"
            text(15) = "Result"
            text(16) = "Single values"
            text(17) = "Current data"
            text(18) = "Peak data"
            text(19) = "Cell"
            text(20) = "Down"
            text(21) = "Right"
            text(22) = "Memory"
            text(23) = "Memory mode"
            text(24) = "Recording"
            text(25) = "Input"
            text(26) = "Memorized data"
            text(27) = "Import"
            text(28) = "Clear"
            text(29) = "Number of memorized data"
            text(30) = "Measure"
            text(31) = "Memory start"
            text(32) = "Reset"
            text(33) = "Tare"
            text(34) = "Cancel"
            text(35) = "Start cell"
            text(36) = "State"
            text(37) = "No force gauge"
            text(38) = "Ready"
            text(39) = "Force gauge not recognized."
            text(40) = "Please check communication cable and power supply!"
            text(41) = "Waiting"
            text(42) = "Communication failed."
            text(43) = "Back to previous page"
            text(44) = "Open a new sheet."
            text(45) = "Tensile strenght"
            text(46) = "Force"
            text(47) = "Average"
            text(48) = "Deviation"
            text(49) = "MS-Excel range overflow."
            text(50) = "Are you sure to clear?"
            text(51) = "No data captured"
            text(52) = "Unit"
            text(53) = "Thresholds"
            text(54) = "Selected cell cannot be displayed."
            text(55) = "Input value is wrong."
            text(56) = "Input range is over"
            text(57) = "Upper or lower limit is out of the measuring range."
            text(58) = "Lower limit is higher than upper limit. Continue?"
            text(59) = "Standard"
            text(60) = "Wire"
            text(61) = "Definition of test"
            text(62) = "License key"
            text(63) = "License file"
            text(64) = "Description"
            text(65) = "Serial Number"
            text(66) = "Generate license file"
            text(67) = "The file already exists. Overwrite?"
            text(68) = "incorrectly"
            text(69) = "Force Gauge option"
            text(70) = "Force gauge"
            text(71) = "Manufacturer"
            text(72) = "Date of calibration"
            text(73) = "Maximum Force"
            text(74) = "Resolution"
            text(75) = "Close"
            text(76) = "Resume"
            text(77) = "Information about the test"
            text(78) = "Gauger"
            text(79) = "Date of test"
            text(80) = "in use! Please close."
            text(81) = "File not saved."
            text(82) = "Error in Licensing"
            text(83) = "corrupt or not present."
            text(84) = "Wire test"
            text(85) = "End"
            text(86) = "Report"
            text(87) = "Protocol"
            text(88) = "Save"
            text(89) = "Next Display"
            text(90) = "Current data"
            text(91) = "Positive peak"
            text(92) = "Negative peak"
            text(93) = "Positive maximum"
            text(94) = "Positive minimum"
            text(95) = "Negative maximum"
            text(96) = "Negative minimum"
            text(97) = "Delete memory"
            text(98) = "Tests"
            text(99) = "total"
            text(100) = "Test batch"
            text(101) = "Gravitation"
            text(102) = "Invalid device type"
            text(103) = "Force gauge will now be switched off!"
            text(104) = "Device type"
            text(105) = "not compatible"
            text(106) = "enter or click"
            text(107) = "Driver option"
            text(108) = "Travel to"
            text(109) = "Speed"
            text(110) = "Waiting time"
            text(111) = "Break"
            text(112) = "saved"
            text(113) = "Automatic"
            text(114) = "Start of"
            text(115) = "End of"
            text(116) = "at"
            text(117) = "Program will be closed!"
            text(118) = "Form"
            text(119) = "Select the correct file under 'Option'."
            text(120) = "The firmware of the force gauge is too old."
            text(121) = "The program will not work properly."
        Case IdFrench
            text(0) = "Continue"
            text(1) = "Nombre de donn|fffd|es"
            text(2) = "Nombre de donn|fffd|e"
            text(3) = "Fr|fffd|quenzce de test"
            text(4) = "Trigger"
            text(5) = "Allum|fffd|"
            text(6) = "Hors"
            text(7) = "Start"
            text(8) = "Stop"
            text(9) = "En-t|fffd|te"
            text(10) = "Graphic"
            text(11) = "Surveillance de valeur limite"
            text(12) = "Changer"
            text(13) = "Limite sup|fffd|rieure"
            text(14) = "Limite inf|fffd|rieure"
            text(15) = "R|fffd|sultat"
            text(16) = "Valeurs individuelles"
            text(17) = "Donn|fffd|es actuelles"
            text(18) = "Donn|fffd|es maximales"
            text(19) = "Cellule"
            text(20) = "Vers le bas"
            text(21) = "Droite"
            text(22) = "M|fffd|moire"
            text(23) = "Mode de m|fffd|moire"
            text(24) = "Enregistrement"
            text(25) = "Entr|fffd|e"
            text(26) = "Donn|fffd|es sauv|fffd|es"
            text(27) = "Importer"
            text(28) = "Effacer"
            text(29) = "Quantit|fffd| de donn|fffd|es sauv|fffd|es"
            text(30) = "Mesure"
            text(31) = "M|fffd|moire start"
            text(32) = "Rajuster"
            text(33) = "Tarer"
            text(34) = "Annuler"
            text(35) = "Cellule start"
            text(36) = "Statut"
            text(37) = "No Dynamom|fffd|tre"
            text(38) = "Pr|fffd|t"
            text(39) = "Dynamom|fffd|tre non identifi|fffd|"
            text(40) = "Veuillez v|fffd|rifier le c|fffd|ble de communication et l'alimentation d'|fffd|nergie!"
            text(41) = "Attendre"
            text(42) = "Communication |fffd|choue."
            text(43) = "De nouveau |fffd| la page pr|fffd|c|fffd|dente"
            text(44) = "Ouvrez une feuille de travail."
            text(45) = "R|fffd|sistance |fffd| la traction"
            text(46) = "Force"
            text(47) = "Moyenne"
            text(48) = "Variance"
            text(49) = "Range d|fffd|Excel |fffd|puis|fffd|s."
            text(50) = "|fffd|tes-vous s|fffd|r |fffd| l'espace libre ?"
            text(51) = "Aucunes donn|fffd|es sauv|fffd|es"
            text(52) = "Unit|fffd|"
            text(53) = "Limites"
            text(54) = "La cellule choisie ne peut pas |fffd|tre montr|fffd|e."
            text(55) = "Le choix de donn|fffd|es est faux."
            text(56) = "La gamme permise est exc|fffd|d|fffd|e"
            text(57) = "La valeur limite sup|fffd|rieure ou inf|fffd|rieure est en dehors du gange. "
            text(58) = "Limite plus haut que sup|fffd|rieure inf|fffd|rieure de limite. Continuez toujours?"
            text(59) = "Norme"
            text(60) = "C|fffd|ble"
            text(61) = "D|fffd|finition de la test"
            text(62) = "La cl|fffd| de licence"
            text(63) = "Fichier de licence"
            text(64) = "Descripci|fffd|n"
            text(65) = "Num|fffd|ro de s|fffd|rie"
            text(66) = "G|fffd|n|fffd|rer un fichie de licence"
            text(67) = "Le fichier existe d|fffd|j|fffd|. |fffd|craser?"
            text(68) = "mal"
            text(69) = "Option de dynamom|fffd|tre"
            text(70) = "Dynamom|fffd|tre"
            text(71) = "Fabricant"
            text(72) = "Date d|fffd||fffd|talonnage"
            text(73) = "Force maximale"
            text(74) = "R|fffd|solution"
            text(75) = "Fermer"
            text(76) = "Reprendre"
            text(77) = "Informations sur le test"
            text(78) = "Testeur"
            text(79) = "Date du test"
            text(80) = "Fichier en cours d|fffd|utilisation! S|fffd|il vous pla|fffd|t proches."
            text(81) = "Fichier non enregistr|fffd|s."
            text(82) = "Erreur dans la licence"
            text(83) = "corrompu ou pas pr|fffd|sent."
            text(84) = "Test de c|fffd|ble"
            text(85) = "Fin"
            text(86) = "Rapport"
            text(87) = "Protocole"
            text(88) = "Enregistrer"
            text(89) = "Suivant l|fffd|affichage"
            text(90) = "Donn|fffd|es actuelles"
            text(91) = "Pic positif"
            text(92) = "Pic n|fffd|gatif"
            text(93) = "Maximum positif"
            text(94) = "Minimum positif"
            text(95) = "Maximum n|fffd|gatif"
            text(96) = "Minimum n|fffd|gatif"
            text(97) = "Effacer la m|fffd|moire"
            text(98) = "Tests"
            text(99) = "Total des"
            text(100) = "beaucoup de Test"
            text(101) = "Gravitation"
            text(102) = "Type d|fffd|appareil est invalide"
            text(103) = "Dynamom|fffd|tre est maintenant |fffd|teint!"
            text(104) = "Type d|fffd|appareil"
            text(105) = "incompatible"
            text(106) = "|fffd|ntrez ou s|fffd|lectionnez"
            text(107) = "Option de motor"
            text(108) = "Aller |fffd|"
            text(109) = "Vitesse"
            text(110) = "P|fffd|riode d|fffd|attente"
            text(111) = "D|fffd|molition"
            text(112) = "enregistr|fffd|s"
            text(113) = "Automatique"
            text(114) = "D|fffd|but de la"
            text(115) = "Fin de la"
            text(116) = "A la"
            text(117) = "Programme est ferm|fffd|e!"
            text(118) = "Forme"
            text(119) = "S|fffd|lectionner le bon fichier dans 'Option'."
            text(120) = "Le firmware de Dynamom|fffd|tre est trop vieux."
            text(121) = "Le programme ne fonctionnera pas correctement."
        Case IdSpanish
            text(0) = "Continuado"
            text(1) = "N|fffd|mero de datos"
            text(2) = "N|fffd|mero de dato"
            text(3) = "Frequencia de muestreo"
            text(4) = "Trigger"
            text(5) = "On"
            text(6) = "Off"
            text(7) = "Start"
            text(8) = "Stop"
            text(9) = "Datos de cabecera"
            text(10) = "Gr|fffd|fico"
            text(11) = "Supervisi|fffd|n de valor l|fffd|mite"
            text(12) = "Entrada"
            text(13) = "L|fffd|mite superior"
            text(14) = "L|fffd|mite inferior"
            text(15) = "Resultado"
            text(16) = "Valores individuales"
            text(17) = "Datos actuales"
            text(18) = "Datos m|fffd|ximos"
            text(19) = "Celda"
            text(20) = "Abajo"
            text(21) = "Derecha"
            text(22) = "Memoria"
            text(23) = "Modo de la memoria"
            text(24) = "Registro"
            text(25) = "Entrada"
            text(26) = "Datos memorizados"
            text(27) = "Importar"
            text(28) = "Borrar"
            text(29) = "Cantidad de datos memorizados"
            text(30) = "Mediciones"
            text(31) = "Memoria start"
            text(32) = "Reajustar"
            text(33) = "Tarar"
            text(34) = "Abortar"
            text(35) = "Celda de inicio"
            text(36) = "Estado"
            text(37) = "No dinamom|fffd|trico"
            text(38) = "Listo"
            text(39) = "Dispositivo dinamom|fffd|trico no reconocido."
            text(40) = "|fffd|Compruebe por favor el cable de la comunicaci|fffd|n y la fuente de alimentaci|fffd|n!"""
            text(41) = "Aguarde"
            text(42) = "Comunicaci|fffd|n fall|fffd|"
            text(43) = "Atr|fffd|s a la p|fffd|gina anterior"
            text(44) = "Abra una hoja del trabajo."
            text(45) = "Resistencia a la traccion"
            text(46) = "Fuerza"
            text(47) = "Promedio"
            text(48) = "Varianza"
            text(49) = "Rango de Escel agotado."
            text(50) = "|fffd|Desea realmente borrar?"
            text(51) = "Ning|fffd|n dato memorizado"
            text(52) = "Unidad"
            text(53) = "Valores l|fffd|mite"
            text(54) = "La c|fffd|lula seleccionada no puede ser visualizada."
            text(55) = "El valor de la entrada es incorrecto."
            text(56) = "Se ha excedido la gama permitida"
            text(57) = "O el valor l|fffd|mite superior o inferior est|fffd| fuera del rango admisible."
            text(58) = "El l|fffd|mite inferior es mayor que el l|fffd|mite superior. |fffd|Desea seguir asimismo?"
            text(59) = "Est|fffd|ndar"
            text(60) = "Cable"
            text(61) = "Definici|fffd|n de la prueba"
            text(62) = "Clave de licencia"
            text(63) = "Archivo de licencia"
            text(64) = "Description"
            text(65) = "N|fffd|mero de serie"
            text(66) = "Generar archivo de licencia"
            text(67) = "El archivo ya existe. |fffd|Sobrescribir?"
            text(68) = "incorrectamente"
            text(69) = "Opci|fffd|n del dinamom|fffd|trico"
            text(70) = "Dinamom|fffd|trico"
            text(71) = "Fabricante"
            text(72) = "Fecha de calibraci|fffd|n"
            text(73) = "Fuerza M|fffd|xima"
            text(74) = "Resoluci|fffd|n"
            text(75) = "Cerca"
            text(76) = "Asumir"
            text(77) = "Informaci|fffd|n sobre la prueba"
            text(78) = "Examinador"
            text(79) = "Fecha de la prueba"
            text(80) = "|fffd|Archivo en uso! Cierre por favor."
            text(81) = "Archivo no se guarda."
            text(82) = "Error en la concesi|fffd|n de licencias"
            text(83) = "da|fffd|ado o no presente."
            text(84) = "Prueba del cable"
            text(85) = "Final"
            text(86) = "Report"
            text(87) = "Protocolo"
            text(88) = "Memorizar"
            text(89) = "Siguiente pantalla"
            text(90) = "Datos actuales"
            text(91) = "Pico positivo"
            text(92) = "Pico negativo"
            text(93) = "M|fffd|ximo positivo"
            text(94) = "M|fffd|nimo positivo"
            text(95) = "M|fffd|ximo negativo"
            text(96) = "M|fffd|nimo negativo"
            text(97) = "Borrar la memoria"
            text(98) = "Pruebas"
            text(99) = "total"
            text(100) = "lote de provas"
            text(101) = "Gravitaci|fffd|n"
            text(102) = "Tipo de dispositivo non es v|fffd|lido"
            text(103) = "|fffd|Dinamom|fffd|trico ahora est|fffd| apagado!"
            text(104) = "Tipo de dispositivo"
            text(105) = "incompatible"
            text(106) = "introduzca o seleccione"
            text(107) = "Opci|fffd|n de motor"
            text(108) = "Marcha a"
            text(109) = "Velocidad"
            text(110) = "Per|fffd|odo de espera"
            text(111) = "Demolici|fffd|n"
            text(112) = "se guarda"
            text(113) = "Autom|fffd|tico"
            text(114) = "A partir del"
            text(115) = "Fin del"
            text(116) = "En la"
            text(117) = "|fffd|El programa se cierra!"
            text(118) = "Forma"
            text(119) = "Seleccione el archivo correcto en 'Option'."
            text(120) = "El firmware del Dinamom|fffd|trico es demasiado viejo."
            text(121) = "El programa no funcionar|fffd| correctamente."
        Case IdItalian
            text(0) = "Continuo"
            text(1) = "Numero di dati"
            text(2) = "Numero di dato"
            text(3) = "Frequenza di campionamento"
            text(4) = "Trigger"
            text(5) = "On"
            text(6) = "Off"
            text(7) = "Start"
            text(8) = "Stop"
            text(9) = "Dati d 'intestazione"
            text(10) = "Grafico"
            text(11) = "Controllo del valore limite"
            text(12) = "Input"
            text(13) = "Limite superiore"
            text(14) = "Limite inferiore"
            text(15) = "Risultato"
            text(16) = "Valori singoli"
            text(17) = "Dati attuali"
            text(18) = "Dati massimi"
            text(19) = "Cella"
            text(20) = "Gi|fffd|"
            text(21) = "Destra"
            text(22) = "Memoria"
            text(23) = "Modus di memoria"
            text(24) = "Registrazione"
            text(25) = "Input"
            text(26) = "Dati salvati"
            text(27) = "Importare"
            text(28) = "Cancellare"
            text(29) = "Quantit|fffd| dei dati salvati"
            text(30) = "Misurazioni"
            text(31) = "Memoria start"
            text(32) = "Resettare"
            text(33) = "Tarare"
            text(34) = "Abortiere"
            text(35) = "Cella iniziale"
            text(36) = "Stato"
            text(37) = "No Dinamometro"
            text(38) = "Pronto"
            text(39) = "Dinamometro non |fffd| stato riconosciuto."
            text(40) = "Controlli per favore il cavo d'allaciamento e l'alimentazione di tensione!"
            text(41) = "Aspettare"
            text(42) = "Errore comunicazione."
            text(43) = "Tornare alla pagina precedente"
            text(44) = "Apra un foglio di calcolo."
            text(45) = "Resistenza a trazione"
            text(46) = "Forza"
            text(47) = "Media"
            text(48) = "Varianza"
            text(49) = "Gamma di Excel esaurito."
            text(50) = "|fffd| sicuro di voler cancellare?"
            text(51) = "Nessuni dati salvati"
            text(52) = "Unit|fffd|"
            text(53) = "Valori limite"
            text(54) = "La cellula selezionata non pu|fffd| essere visualizzata"
            text(55) = "L'area dell'input |fffd| errata."
            text(56) = "L'area consentita |fffd| oltrepassata"
            text(57) = "O il valore limite superiore o quello inferior |fffd| fuori l'area consentita. "
            text(58) = "Il valore limite inferiore |fffd| pi|fffd| alte del valore limite superiore. Proseguire ugualmente?"
            text(59) = "Norma"
            text(60) = "Cavo"
            text(61) = "Definizione di prova"
            text(62) = "Chiave di licenza"
            text(63) = "File di licenza"
            text(64) = "Descrizione"
            text(65) = "Numeror di serie"
            text(66) = "Genera file di licenza"
            text(67) = "Il file esiste gi|fffd|. Sovrascrivere?"
            text(68) = "errato"
            text(69) = "Opzione del Dinamometro"
            text(70) = "Dinamometro"
            text(71) = "Fabbricante"
            text(72) = "Data di calibrazione"
            text(73) = "Massima forza"
            text(74) = "Risoluzione"
            text(75) = "Chiudere"
            text(76) = "Rilevare"
            text(77) = "Informazioni sul prova"
            text(78) = "Estaminatore"
            text(79) = "Data della prova"
            text(80) = "File in uso! Si prega di chiudere."
            text(81) = "Il file non salvato."
            text(82) = "Errore nella concessione di licenze"
            text(83) = "danneggiato o non presente."
            text(84) = "Prova di cavo"
            text(85) = "Fine"
            text(86) = "Rapporto"
            text(87) = "Protocollo"
            text(88) = "Salvare"
            text(89) = "Display successivo"
            text(90) = "Dati attuali"
            text(91) = "Picco positivo"
            text(92) = "Picco negativo"
            text(93) = "Massimo positivo"
            text(94) = "Minimo positivo"
            text(95) = "Massimo negativo"
            text(96) = "Minimo negativo"
            text(97) = "Cancellara la memoria"
            text(98) = "Provas"
            text(99) = "totale"
            text(100) = "di lotti"
            text(101) = "Gravitazione"
            text(102) = "Tipo di dispositivo non |fffd| valido"
            text(103) = "Dinamometrao |fffd| ora off!"
            text(104) = "Tipo di dispositivo"
            text(105) = "incompatibile"
            text(106) = "immettere o selezinare"
            text(107) = "Opzione del motore"
            text(108) = "Andare a"
            text(109) = "Velocit|fffd|"
            text(110) = "Periodo di attesa"
            text(111) = "Demolizione"
            text(112) = "salvato"
            text(113) = "Automatico"
            text(114) = "Inizio del"
            text(115) = "Fine del"
            text(116) = "Alla"
            text(117) = "Chiusura del programma!"
            text(118) = "Forma"
            text(119) = "Selezionare il file corretto in 'Option'."
            text(120) = "Il firmware del Dinamometro |fffd| troppo vecchio."
            text(121) = "Il programma non funzioner|fffd| correttamente."
    End Select
End Sub




Attribute VB_Name = "Modul1"
Public Sub cell_output4()
    Dim Row As Long
    Dim Col As Long
   
    Row = ActiveCell.Row
    Col = ActiveCell.Column
    
    If plot_range(Row, Col) = False Then
        Exit Sub
    End If
    
    With ActiveSheet
    
        If main_select_frm.Header_on_btn_2 Then         ' F|fffd|r die Ausgabe Kopfdaten
            If g_cell_dir = YOKO Then
                .Cells(Row, Col) = text(45)
                ' .Cells(Row + 1, Col) = "-Peak"        ' Kofpdaten unterdr|fffd|cken
                Col = Col + 1
            Else
                .Cells(Row, Col) = text(45)
                ' .Cells(Row, Col + 1) = "-Peak"        ' Kopfdaten unterdr|fffd|cken
                Row = Row + 1
            End If
            main_select_frm.Header_on_btn_2 = False
        End If
        If g_cell_dir = YOKO Then                       ' Ausgabe der peakwerte
            .Cells(Row, Col) = P_peak_data              ' Peak Zug wird ausgegeben
            ' .Cells(Row + 1, Col) = M_peak_data        ' Unterdr|fffd|ckung der Druckausgabe in der nach unten Bewegung.
            .Cells(Row, Col + 1).Select
         Else
            .Cells(Row, Col) = P_peak_data
            ' .Cells(Row, Col + 1) = M_peak_data        ' Unterdr|fffd|ckung der Druckausgabe in der rechts Bewegung.
            .Cells(Row + 1, Col).Select
        End If
    
    End With
    
    main_select_frm.jdg_lbl_2.BackColor = &H808080
    main_select_frm.jdg_lbl_2.Caption = ""
    main_select_frm.jdg_lbl_2.ForeColor = &HC0C0C0

End Sub

Attribute VB_Name = "PCUSBDLL_mdl"
Option Explicit

'/*----------------------------------------------------------
 '   |fffd||8414|
'----------------------------------------------------------*/

'// |fffd|f|fffd|B|fffd|X|fffd|N|fffd||fffd||fffd|v|fffd|^|fffd||64fe||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|F|fffd|R|fffd||fffd||fffd|t|fffd|B|fffd|M|fffd||fffd||fffd||fffd||fffd|[|fffd|V|fffd||fffd||fffd||fffd|
Public Const DESC_CONF_IF_CNT = 0         '// |fffd|C|fffd||fffd||fffd|^|fffd|[|fffd|t|fffd|F|fffd|C|fffd|X|fffd||fffd|
Public Const DESC_CONF_PWR_TYPE = 1       '// |fffd|d|fffd||34b||fffd||fffd||fffd||fffd|`|fffd||fffd|
Public Const DESC_CONF_MAX_PWR = 2        '// |fffd||151||fffd|d|fffd||fffd|

'// |fffd|f|fffd|B|fffd|X|fffd|N|fffd||fffd||fffd|v|fffd|^|fffd||64fe||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|F|fffd|C|fffd||fffd||fffd|^|fffd|[|fffd|t|fffd|F|fffd|C|fffd|X
Public Const DESC_IF_NUM = 0              '// |fffd|C|fffd||fffd||fffd|^|fffd|[|fffd|t|fffd|F|fffd|C|fffd|XNo.
Public Const DESC_IF_ENDP_CNT = 1         '// |fffd|G|fffd||fffd||fffd|h|fffd|||fffd|C|fffd||fffd||fffd|g|fffd||fffd|
Public Const DESC_IF_ENDP_CLASS = 2       '// |fffd|N|fffd||fffd||fffd|X
Public Const DESC_IF_ENDP_SCLS = 3        '// |fffd|T|fffd|u|fffd|N|fffd||fffd||fffd|X
Public Const DESC_IF_ENDP_PRTCL = 4       '// |fffd|v|fffd||fffd||fffd|g|fffd|R|fffd||fffd|
Public Const DESC_IF_ATTR = 9            '// bAttribute

'// |fffd|f|fffd|B|fffd|X|fffd|N|fffd||fffd||fffd|v|fffd|^|fffd||64fe||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|F|fffd|G|fffd||fffd||fffd|h|fffd|||fffd|C|fffd||fffd||fffd|g
Public Const DESC_ENDP_PIPE = 0           '// |fffd|p|fffd|C|fffd|vNo.
Public Const DESC_ENDP_TR_TYPE = 1        '// |fffd|]|fffd||fffd||fffd|^|fffd|C|fffd|v
Public Const DESC_ENDP_MAX_PCKT = 2       '// |fffd||151||fffd|p|fffd|P|fffd|b|fffd|g|fffd|T|fffd|C|fffd|Y
Public Const DESC_ENDP_INTERVAL = 3       '// |fffd|C|fffd||fffd||fffd|^|fffd|[|fffd|o|fffd||fffd|
Public Const DESC_ENDP_ATTR = 9           '// bAttribute

'// |fffd|f|fffd|B|fffd|X|fffd|N|fffd||fffd||fffd|v|fffd|^|fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|l|fffd|F|fffd|d|fffd||34b||fffd||fffd||fffd|
Public Const DESC_BUS_POWERED = 0         '// |fffd|o|fffd|X|fffd|p|fffd||fffd||fffd|[
Public Const DESC_SELF_POWERED = 1        '// |fffd|Z|fffd||fffd||fffd|t|fffd|p|fffd||fffd||fffd|[
Public Const DESC_REMOTE_WAKEUP = 2       '// |fffd||fffd||fffd||fffd||fffd|[|fffd|g|fffd|E|fffd|F|fffd|C|fffd|N|fffd|A|fffd|b|fffd|v
Public Const DESC_PWR_UNKNOWN = 9         '// |fffd||fffd||fffd|m|fffd||313|d|fffd||34b||fffd||fffd||fffd||fffd|^|fffd|C|fffd|v

'// |fffd|f|fffd|B|fffd|X|fffd|N|fffd||fffd||fffd|v|fffd|^|fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|l|fffd|F|fffd|]|fffd||fffd||fffd|^|fffd|C|fffd|v
Public Const DESC_TR_INTERRUPT = 0        '// |fffd|C|fffd||fffd||fffd|^|fffd||fffd||fffd|v|fffd|g|fffd|]|fffd||fffd|
Public Const DESC_TR_BULK = 1             '// |fffd|o|fffd||fffd||fffd|N|fffd|]|fffd||fffd|
Public Const DESC_TR_ISOCHRONOUS = 2      '// |fffd|A|fffd|C|fffd|\|fffd|N|fffd||fffd||fffd|i|fffd|X|fffd|]|fffd||fffd|
Public Const DESC_TR_CONTROL = 3          '/ |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd|
Public Const DESC_TR_UNKNOWN = 9          '// |fffd||fffd||fffd|m|fffd||313|]|fffd||fffd||fffd|^|fffd|C|fffd|v

'/ |fffd|f|fffd|B|fffd|X|fffd|N|fffd||fffd||fffd|v|fffd|^|fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|l|fffd|F|fffd|C|fffd||fffd||fffd|^|fffd|[|fffd|t|fffd|F|fffd|C|fffd|X|fffd|N|fffd||fffd||fffd|X
Public Const DESC_IF_CLS_FWU_IR = &HFE       '// Firmware Update or IrDA/USB Bridge
Public Const DESC_IF_CLS_AUDIO = &H1         '// Audio Interface
Public Const DESC_IF_CLS_CDC_CI = &H2        '// CDC Control Interface
Public Const DESC_IF_CLS_CDC_DI = &HA       '// CDC Data Interface
Public Const DESC_IF_CLS_HID = &H3           '// HID
Public Const DESC_IF_CLS_HUB = &H9           '/ HUB
Public Const DESC_IF_CLS_MS = &H8          '// Mass Storage
Public Const DESC_IF_CLS_PHY = &H5           '// Physical
Public Const DESC_IF_CLS_PRN = &H7           '// Printer
Public Const DESC_IF_CLS_VENDOR = &HFF       '// Vendor defined

'/*----------------------------------------------------------
 '   |fffd||590||fffd||fffd||933e|
'----------------------------------------------------------*/
Declare Function OpenDevice Lib "C:\windows\system32\FGUSB.dll" () As Boolean    '// |fffd|f|fffd|o|fffd|C|fffd|X|fffd|n|fffd||fffd||fffd|h|fffd||fffd||fffd||303|I|fffd|[|fffd|v|fffd||fffd|
Declare Function CloseDevice Lib "C:\windows\system32\FGUSB.dll" () As Boolean    '// |fffd|f|fffd|o|fffd|C|fffd|X|fffd|n|fffd||fffd||fffd|h|fffd||fffd||fffd||303|N|fffd||fffd||fffd|[|fffd|Y
Declare Function ResetDevice Lib "C:\windows\system32\FGUSB.dll" () As Boolean    '// |fffd|f|fffd|o|fffd|C|fffd|X|fffd|n|fffd||fffd||fffd|h|fffd||fffd||fffd||303||fffd||fffd|Z|fffd|b|fffd|g
Declare Function IsWorkingDevice Lib "C:\windows\system32\FGUSB.dll" () As Boolean   '// |fffd|f|fffd|o|fffd|C|fffd|X|fffd||317|L|fffd||fffd||fffd||fffd||fffd||fffd||fffd||30a|m|fffd|F
Declare Function ControlTransfer Lib "C:\windows\system32\FGUSB.dll" (ByVal InOut As Long, _
                                                ByVal ReqType As Long, _
                                                ByVal Target As Long, _
                                                ByVal ShortTransfer As Long, _
                                            ByVal Request As Long, _
                                                ByVal Value As Long, _
                                                ByVal Index As Long, _
                                                ByVal Length As Long, _
                                                ByRef data As Byte _
                                                      ) As Long

Declare Function OpenPipe Lib "C:\windows\system32\FGUSB.dll" (ByVal PipeNo As Long) As Boolean      '// |fffd|p|fffd|C|fffd|v|fffd|n|fffd||fffd||fffd|h|fffd||fffd||fffd||303|I|fffd|[|fffd|v|fffd||fffd|// |fffd|p|fffd|C|fffd|vNo.
Declare Function ClosePipe Lib "C:\windows\system32\FGUSB.dll" () As Boolean              '// |fffd|p|fffd|C|fffd|v|fffd|n|fffd||fffd||fffd|h|fffd||fffd||fffd||303|N|fffd||fffd||fffd|[|fffd|Y
Declare Function ResetPipe Lib "C:\windows\system32\FGUSB.dll" () As Boolean               '// |fffd|p|fffd|C|fffd|v|fffd|n|fffd||fffd||fffd|h|fffd||fffd||fffd||303||fffd||fffd|Z|fffd|b|fffd|g
Declare Function ReadPipe Lib "C:\windows\system32\FGUSB.dll" (ByVal Length As Long, _
                                           ByRef data As Byte) As Long
                                                                        '// |fffd||fffd|M|fffd|f|fffd|[|fffd|^|fffd||fffd|(byte) |fffd||fffd|1|fffd||20f||fffd|'// |fffd|p|fffd|C|fffd|v|fffd|n|fffd||fffd||fffd|h|fffd||fffd||fffd||303||fffd||fffd|Z|fffd|b|fffd|g

Declare Function GetConfigurationDescriptor Lib "C:\windows\system32\FGUSB.dll" (param As Integer) As Long   '/ |fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd|l
Declare Function GetInterfaceDescriptor Lib "C:\windows\system32\FGUSB.dll" (indexInterface As Integer, _
                                                        param As Integer) As Long
Declare Function GetEndpointDescriptor Lib "C:\windows\system32\FGUSB.dll" (indexInterface As Integer, _
                                                        indexEndpoint As Integer, _
                                                        param As Integer) As Long




Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Const MenuType = "Worksheet Menu Bar"   ' |fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd|^|fffd|C|fffd|v
Dim MainMenu As CommandBarControl       ' |fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd|[
Dim SubMenu As CommandBarControl        ' |fffd|T|fffd|u|fffd||fffd||fffd|j|fffd||fffd||fffd|[

'*************************
'   |fffd|A|fffd|h|fffd|C|fffd||fffd||fffd||1c9||fffd||fffd||fffd|
'*************************
Private Sub Workbook_Open()
    ' |fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||1c9||fffd|
    Set MainMenu = Application.CommandBars(MenuType) _
                .Controls.Add(msoControlPopup, , , , True)
    MainMenu.Caption = XLANAME_K
    ' |fffd|T|fffd|u|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||1c9||fffd|
    Set SubMenu = MainMenu.Controls.Add
    SubMenu.Caption = "START"
    SubMenu.OnAction = "main_select_frm_show"
    
    ' |fffd|T|fffd|u|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||1c9||fffd|
    Set SubMenu = MainMenu.Controls.Add
    SubMenu.Caption = "Version"
    SubMenu.OnAction = "ver_proc_k"
    
    Set SubMenu = MainMenu.Controls.Add
    SubMenu.Caption = "Language"
    SubMenu.OnAction = "frm_language_usb_show"
End Sub

'*************************
'   |fffd|A|fffd|h|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'*************************
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    ' |fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||fffd||fffd|
    For Each MainMenu In Application.CommandBars(MenuType).Controls
        If MainMenu.Caption = XLANAME_K Then
            MainMenu.Delete
        End If
    Next MainMenu
End Sub

Attribute VB_Name = "calc_mdl"
Option Explicit
Dim n As Long

Public Sub weight_average() '|fffd||fffd||fffd||3cc|v|fffd|Z
    weight_avg = renzoku_data(1)
    
    If (data_count > 1) Then
        For n = 2 To data_count - 1 Step 1
            weight_avg = weight_avg + renzoku_data(n)
        Next n
        
        weight_avg = weight_avg / (data_count - 1) '|fffd||fffd||fffd||311||fffd||fffd||fffd||153||fffd||fffd||fffd||a0bd||fffd||5cf|d|fffd|l|fffd|f|fffd|[|fffd|^|fffd||315||fffd||fffd||fffd|
    End If
End Sub

Public Sub Max_weight()
    max_gf = renzoku_data(1)          '|fffd||5cf|d|fffd||151||fffd|l
    
    For n = 2 To data_count - 1 Step 1
        If renzoku_data(n) >= max_gf Then
            max_gf = renzoku_data(n)
        End If
    Next n
    
    If max_gf > max_limit Then
        limit_jdg = 0            '|fffd||5cf|d|fffd||348||354||fffd||fffd||fffd|
    End If
    
End Sub
Public Sub P_Max_weight()
    max_p_gf = 0         '|fffd||5cf|d|fffd|v|fffd||fffd||fffd|X|fffd||151||fffd|l
    
    For n = 1 To data_count - 1 Step 1
        If Mid(renzoku_data(n), 1, 1) = "+" Or renzoku_data(n) = 0 Then
            If renzoku_data(n) >= max_p_gf Then
                max_p_gf = renzoku_data(n)
            End If
        End If
    Next n

End Sub
Public Sub M_Max_weight()
    max_m_gf = 0          '|fffd||5cf|d|fffd|}|fffd|C|fffd|i|fffd|X|fffd||151||fffd|l
    
    For n = 1 To data_count - 1 Step 1
        If Mid(renzoku_data(n), 1, 1) = "-" Or renzoku_data(n) = 0 Then
            If Abs(renzoku_data(n)) >= Abs(max_m_gf) Then
                max_m_gf = renzoku_data(n)
            End If
        End If
    Next n

End Sub
Public Sub Min_weight()               '|fffd||5cf|d|fffd||14f||fffd||fffd|l
    min_gf = renzoku_data(1)
    
    For n = 2 To data_count - 1 Step 1
        If renzoku_data(n) <= min_gf Then
            min_gf = renzoku_data(n)
        End If
    Next n
    
    If min_gf < min_limit Then
        limit_jdg = 0            '|fffd||5cf|d|fffd||348||354||fffd||fffd||fffd|
    End If

End Sub
Public Sub P_Min_weight()               '|fffd||5cf|d|fffd|v|fffd||fffd||fffd|X|fffd||14f||fffd||fffd|l
    If Mid(renzoku_data(1), 1, 1) = "+" Then
        min_p_gf = renzoku_data(1)
    Else
        min_p_gf = 0
        Exit Sub
    End If
   
    For n = 1 To data_count - 1 Step 1
        If Mid(renzoku_data(n), 1, 1) = "+" Or renzoku_data(n) = 0 Then
            If renzoku_data(n) <= min_p_gf Then
                min_p_gf = renzoku_data(n)
            End If
        Else
            min_p_gf = 0
        End If
    Next n
End Sub
Public Sub M_Min_weight()               '|fffd||5cf|d|fffd|}|fffd|C|fffd|i|fffd|X|fffd||14f||fffd||fffd|l
    If Mid(renzoku_data(1), 1, 1) = "-" Then
        min_m_gf = Abs(renzoku_data(1))
    Else
        min_m_gf = 0
        Exit Sub
    End If
    For n = 1 To data_count - 1 Step 1
        If Mid(renzoku_data(n), 1, 1) = "-" Or renzoku_data(n) = 0 Then
            If Abs(renzoku_data(n)) <= Abs(min_m_gf) Then
                min_m_gf = renzoku_data(n)
            End If
        Else
             min_m_gf = 0
        End If
    Next n
End Sub
Public Sub Weight_varp()               '|fffd||5cf|d|fffd||315||fffd||fffd|U
    If (data_count > 1) Then
        w_varp = (renzoku_data(1) - weight_avg) ^ 2
        For n = 2 To data_count - 1 Step 1
                w_varp = w_varp + (renzoku_data(n) - weight_avg) ^ 2
        Next n
        w_varp = Sqr(w_varp / (data_count - 1))  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||7c1|A|fffd|W|fffd||fffd||fffd||38d||fffd||fffd||155|\|fffd||fffd|
    Else
        w_varp = 0
    End If
End Sub

Attribute VB_Name = "frmLanguage_USB"
Attribute VB_Base = "0{879CD382-7C42-4E92-8B62-F3A05A9498EA}{0E3587E3-2A68-4972-B346-01A64110460C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Function GetSelectLanguage() As Integer
    If (LanguageBtn1.Value) Then
        GetSelectLanguage = IdGerman
    ElseIf (LanguageBtn2.Value) Then
        GetSelectLanguage = IdEnglish
    ElseIf (LanguageBtn3.Value) Then
        GetSelectLanguage = IdFrench
    ElseIf (LanguageBtn4.Value) Then
        GetSelectLanguage = IdItalian
    ElseIf (LanguageBtn5.Value) Then
        GetSelectLanguage = IdSpanish
    End If
End Function

Private Sub SetInitialLanguage(num As Integer)
    
    Select Case (num)
    Case IdGerman:
        LanguageBtn1.Value = True
    Case IdEnglish:
        LanguageBtn2.Value = True
    Case IdFrench:
        LanguageBtn3.Value = True
    Case IdItalian:
        LanguageBtn4.Value = True
    Case IdSpanish:
        LanguageBtn5.Value = True
    Case Else:
        LanguageBtn1.Value = True
    End Select
End Sub

Private Sub cmdOK_Click()
    SaveSetting XLANAME_K, "Settings", "Language", CStr(GetSelectLanguage())
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    SetInitialLanguage CInt(GetSetting(XLANAME_K, "Settings", "Language", "0"))
End Sub

Attribute VB_Name = "jdg_frm"
Attribute VB_Base = "0{EF575B9A-D120-446B-837F-57B11035CC33}{D936BC9F-26E8-4D61-9AD0-96FD016C2CAA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub CommandButton1_Click()
    jdg_frm.Hide
    With main_select_frm.jdg_lbl
        .BackColor = &H808080
        .Caption = ""
        .ForeColor = &HC0C0C0
    End With
End Sub

Public Sub UserForm_Initialize()
        init_form
        Max_limit_lbl = max_limit
        Min_limit_lbl = min_limit
        
        With jdg_frm.jdg_lbl
            If limit_jdg = 1 Then
                .BackColor = &HF96309
                .Caption = "OK"
                .ForeColor = &HFFFF80
            ElseIf limit_jdg = 0 Then
                .BackColor = &HFF&
                .Caption = "NG"
                .ForeColor = &HC0C0FF
            End If
        End With
End Sub

Private Sub init_form()
    Me.Caption = main_select_frm.Caption
    jdg_frame.Caption = text(53)    'Grenzwerte
    Label1.Caption = text(13)       'Oberer Grenzwert
    Label2.Caption = text(14)       'Unterer Grenzwert
    Label3.Caption = text(15)       'Ergebnis
    CommandButton1.Caption = text(43) 'Zur|fffd|ck zur vorherigen Seite
End Sub


Attribute VB_Name = "limit_frm"
Attribute VB_Base = "0{FC4C79FE-1E27-4BF3-9B34-9C56AD591EF0}{638125FD-77B2-415E-AB72-DE590781C840}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim damy_max As Double
Dim damy_min As Double
Dim send_limit As String

Private Sub Max_limit_lbl_Change()
'    Max_limit_lbl.Text = Val(Max_limit_lbl.Text)
End Sub

Private Sub Max_limit_lbl_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim m_flg As Boolean
    m_flg = False
    On Error GoTo MAX_ERROR
    
    If Val(Max_limit_lbl.text) > 9999 Or Val(Max_limit_lbl.text) < -9999 Then
        MsgBox text(56), vbOKOnly + vbExclamation, XLANAME_K + ".Max_limit_lbl_Exit()"
        Max_limit_lbl.text = 0
        Exit Sub
    End If                          '|fffd||635e||fffd||fffd|
    
    
    If Mid(Max_limit_lbl.text, 1, 1) = "-" Then
        Max_limit_lbl.text = Mid(Max_limit_lbl.text, 2)
        m_flg = True
    End If
    Do While (Len(Max_limit_lbl.text) <> 1 And Mid(Max_limit_lbl.text, 1, 1) = "0" And Mid(Max_limit_lbl.text, 2, 1) <> ".")
        Max_limit_lbl.text = Mid(Max_limit_lbl.text, 2)
    Loop
    If m_flg = True Then
         Max_limit_lbl.text = "-" & Max_limit_lbl.text
         m_flg = False
    End If
    
    damy_max = Max_limit_lbl.text
    Exit Sub

MAX_ERROR:
    MsgBox text(55), vbOKOnly + vbExclamation, XLANAME_K + ".Max_limit_lbl_Exit()"
    Max_limit_lbl.text = 0

End Sub

Private Sub Min_limit_lbl_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim m_flg As Boolean
    m_flg = False
    
    On Error GoTo MIN_ERROR
    If Val(Min_limit_lbl.text) > 9999 Or Val(Min_limit_lbl.text) < -9999 Then
        MsgBox text(55), vbOKOnly + vbExclamation, XLANAME_K + ".Min_limit_lbl_Exit()"
        Min_limit_lbl.text = 0
        Exit Sub
    End If '|fffd||635e||fffd||fffd|
    
    If Mid(Min_limit_lbl.text, 1, 1) = "-" Then
        Min_limit_lbl.text = Mid(Min_limit_lbl.text, 2)
        m_flg = True
    End If
    Do While (Len(Min_limit_lbl.text) <> 1 And Mid(Min_limit_lbl.text, 1, 1) = "0" And Mid(Min_limit_lbl.text, 2, 1) <> ".")
        Min_limit_lbl.text = Mid(Min_limit_lbl.text, 2)
    Loop
    If m_flg = True Then
         Min_limit_lbl.text = "-" & Min_limit_lbl.text
         m_flg = False
    End If
    
    damy_min = Min_limit_lbl.text

Exit Sub

MIN_ERROR:
    MsgBox text(55), vbOKOnly + vbExclamation, XLANAME_K + ".Min_limit_lbl_Exit()"
    Min_limit_lbl.text = 0

End Sub
Private Sub Ok_btn_Click()
    Dim ret As Integer
    Dim send_max_limit As String
    Dim send_min_limit As String
    Dim buff(13) As Byte
    Dim usb_len As Long
    Dim ii As Integer
    Dim send_buff As String
    Dim intRet As Integer
    
    If main_select_frm.device_cheak = False Then
        Exit Sub
    End If
    
    If Val(Max_limit_lbl.text) < Val(Min_limit_lbl.text) Then
        intRet = MsgBox(text(58), vbYesNo + vbQuestion, XLANAME_K + ".Ok_btn_Click()")
        If intRet = vbNo Then
            Exit Sub
        End If
    End If


    
    max_limit = Max_limit_lbl.text
    
    min_limit = Min_limit_lbl.text

    usb_mdl.unit
    If limit_frm_exit_flg = True Then
        limit_frm_exit_flg = False
        Exit Sub
    End If
    
    usb_mdl.fg_type
    If limit_frm_exit_flg = True Then
        limit_frm_exit_flg = False
        Exit Sub
    End If
    
    If limit_zero_padding(max_limit) = False Then
        Exit Sub
    End If
    send_max_limit = send_limit
    If limit_zero_padding(min_limit) = False Then
        Exit Sub
    End If
    send_min_limit = send_limit
 
    
    buff(0) = Asc("E")
    buff(1) = Asc("K")

    For ii = 1 To 5
        buff(ii + 1) = Asc(Mid(send_max_limit, ii, 1))
        buff(ii + 6) = Asc(Mid(send_min_limit, ii, 1))
    Next ii
    buff(12) = 13

    usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_ENDP, 0, USB_REQ_PARM_LMT, USB_VAL_PARMLMT_WR, 0, USB_LEN_PARM_LMT, buff(0))
    
    If usb_mdl.usb_error(usb_len) = True Then
        Exit Sub
    End If
    main_select_frm.Max_limit_lbl.Caption = Max_limit_lbl.text
    main_select_frm.Min_limit_lbl.Caption = Min_limit_lbl.text
    main_select_frm.Max_limit_lbl_2.Caption = Max_limit_lbl.text
    main_select_frm.Min_limit_lbl_2.Caption = Min_limit_lbl.text
    main_select_frm.Max_limit_lbl_3.Caption = Max_limit_lbl.text
    main_select_frm.Min_limit_lbl_3.Caption = Min_limit_lbl.text
    limit_frm.Hide

End Sub

Private Sub Cansel_btn_Click()
    limit_frm.Hide
End Sub

Public Sub UserForm_Initialize()
    init_form
    Max_limit_lbl.text = main_select_frm.Max_limit_lbl.Caption
    Min_limit_lbl.text = main_select_frm.Min_limit_lbl.Caption
End Sub

Public Function zero_padding(para As String, after_len As Integer)
    para = Trim(para)
    zero_padding = para
    Do While Not Len(zero_padding) = after_len
        zero_padding = Mid(zero_padding, 1, 1) & "0" & Mid(zero_padding, 2, Len(zero_padding))
    Loop
End Function
Public Function limit_zero_padding(load As Variant) As Boolean
    Dim bairitu(5) As Integer
    
    If fg_type_num = "02" Or fg_type_num = "03" Then
        bairitu(0) = 1000       '0.000*1000|fffd||fffd|0000(N)
        bairitu(1) = 10         '000.0*10|fffd||fffd|0000(kg)
        bairitu(2) = 10         '(g)
        bairitu(3) = 1000       '(lb)
        bairitu(4) = 100        '(Oz)
    ElseIf fg_type_num = "04" Then
        bairitu(0) = 100        '00.00*100|fffd||fffd|0000(N)
        bairitu(1) = 1          '0000*1|fffd||fffd|0000(kg)
        bairitu(2) = 1          '(g)
        bairitu(3) = 1000       '(lb)
        bairitu(4) = 100        '(Oz)
    ElseIf fg_type_num = "05" Then
        bairitu(0) = 100        '00.00*100|fffd||fffd|0000(N)
        bairitu(1) = 1000       '0.000*1000|fffd||fffd|0000(Kg)
        bairitu(2) = 1000       '(g)
        bairitu(3) = 1000       '(lb)
    ElseIf fg_type_num = "06" Then
        bairitu(0) = 100        '00.00*100|fffd||fffd|0000(N)
        bairitu(1) = 1000       '0.000*1000|fffd||fffd|0000(Kg)
        bairitu(2) = 1000       '(g)
        bairitu(3) = 100        '(lb)
    ElseIf fg_type_num = "07" Or fg_type_num = "08" Then
        bairitu(0) = 10         '000.0*10|fffd||fffd|0000(N)
        bairitu(1) = 100        '00.00*100|fffd||fffd|0000(Kg)
        bairitu(2) = 100        '(g)
        bairitu(3) = 100        '(lb)
    ElseIf fg_type_num = "09" Then
        bairitu(0) = 10         '000.0*10|fffd||fffd|0000(N)
        bairitu(1) = 100        '00.00*100|fffd||fffd|0000(Kg)
        bairitu(2) = 100        '(g)
        bairitu(3) = 10         '(lb)
    Else
        bairitu(0) = 1          '0000*1|fffd||fffd|0000(N)
        bairitu(1) = 10         '000.0*10|fffd||fffd|0000(Kg)
        bairitu(2) = 10         '(g)
        bairitu(3) = 10         '(lb)
    End If
        
    send_limit = Val(load) * bairitu(unit_num)
    
    If Not Mid(send_limit, 1, 1) = "-" Then
        send_limit = "+" & send_limit
    End If
        
    If send_limit_jdg = False Then
        limit_zero_padding = False
        Exit Function
    End If
        
    send_limit = zero_padding(send_limit, 5)
    limit_zero_padding = True
            
End Function
Public Function send_limit_jdg() As Boolean

    If Not InStr(send_limit, ".") = 0 Then       '1000|fffd|{|fffd||fffd||fffd||fffd||fffd||302||fffd|0|fffd||209||fffd||fffd||302||182||fffd|
        MsgBox text(57), vbExclamation, XLANAME_K + ".send_limit_jdg()"
        send_limit_jdg = False
        Exit Function
    ElseIf Len(send_limit) > 5 Then              '1000|fffd|{|fffd||fffd||fffd||fffd||fffd||fffd|9999|fffd||20f||fffd||242||202||fffd||fffd||fffd||fffd||a347|
        MsgBox text(57), vbExclamation, XLANAME_K + ".send_limit_jdg()"
        send_limit_jdg = False
        Exit Function
    End If
    
    send_limit = zero_padding(send_limit, 5)
    send_limit_jdg = True
            
End Function

Private Sub init_form()
    Me.Caption = main_select_frm.Caption
    Label1.Caption = text(13)       'Oberer Grenzwert
    Label2.Caption = text(14)       'Unterer Grenzwert
End Sub

Attribute VB_Name = "main_mdl"
Option Explicit

'**************************
'   |fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd||fffd||50b||fffd||fffd|L|fffd||8414|
'**************************
' |fffd|o|fffd|[|fffd|W|fffd||fffd||fffd||fffd|
Public Const XLANAME_K = "FMI_Connect_USB"
Public Const VERSION_K = "V3.02.004 (07/2015)"
Public Const CORP = "ALLURIS GmbH & Co. KG"
Public Const INFO = "Version information"

' |fffd|\|fffd||fffd||fffd|F|fffd|R|fffd|[|fffd|h
Public Const COLOR_FLESH = &HC0E0FF
Public Const COLOR_GREEN = &HFF00&
Public Const COLOR_RED = &HFF&
Public Const COLOR_YELLOW = &HFFFF&
' |fffd|Z|fffd||fffd||fffd||311||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const TATE = 0      ' |fffd|c|fffd||fffd||fffd||fffd|
Public Const YOKO = 1      ' |fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd|M|fffd|R|fffd|}|fffd||fffd||fffd|h
Public Const MSEC_1 = "1000times/sec"
Public Const MSEC_10 = "100times/sec"
Public Const MSEC_20 = "50times/sec"
Public Const MSEC_500 = "20times/sec"
Public Const MSEC_1000 = "10times/sec"

'**************************
'   |fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd||fffd||50b||fffd||fffd|L|fffd||3d0||fffd|
'**************************
Public g_areas As Variant               ' |fffd|Z|fffd||fffd||fffd|I|fffd||fffd||fffd|G|fffd||fffd||fffd|A
Public g_cell_dir As Integer            ' |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public g_hdrout As Boolean              ' |fffd|w|fffd|b|fffd|_|fffd|o|fffd||357|L/|fffd||fffd||fffd|t|fffd||fffd||fffd|O
Public ite_num As Long                  '|fffd||151||fffd||635e||fffd|f|fffd|[|fffd|^|fffd||fffd|
Public data_count As Long               '|fffd||fffd||835e||fffd||42f83|f|fffd|[|fffd|^|fffd||fffd|
Public renzoku_data(65100) As String    '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^
Public first_Row As Long                '|fffd||14f||fffd||fffd||303|Z|fffd||fffd||fffd||292|u
Public first_Col As Long
Public S_trg_num As Double              '2nd|fffd|g|fffd||fffd||fffd|K
Public S_trg_off_num As Double
Public trg_on_flg As Boolean            'Signalisiert das Triggerereignis zum Einschalten
Public trg_off_flg As Boolean           'Signalisiert das Triggerereignis zum Ausschalten
Public trg_on_en As Boolean             'Signalisiert, ob Einschalttrigger aktiviert
Public trg_off_en As Boolean            'Signalisiert, ob Ausschalttrigger aktiviert
Public P_load_2 As Boolean              '|fffd|}|fffd|g|fffd||fffd||fffd|K|fffd||752||fffd|
Public M_load_2 As Boolean
Public P_off_load As Boolean
Public M_off_load As Boolean
Public weight_avg As Double             '|fffd||fffd||fffd||fffd||5cf|d|fffd||fffd||fffd||3d2|l
Public max_gf As Double                 '|fffd||151||fffd|l
Public min_gf As Double                 '|fffd||14f||fffd||fffd|l
Public max_p_gf As Double               '+|fffd||151||fffd|l
Public min_p_gf As Double               '+|fffd||14f||fffd||fffd|l
Public max_m_gf As Double               '-|fffd||151||fffd|l
Public min_m_gf As Double               '-|fffd||14f||fffd||fffd|l
Public w_varp As Double                 '|fffd||fffd||fffd|U
Public max_limit As Double              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|l
Public min_limit As Double              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|l
Public limit_jdg As Integer             '|fffd||327a||fffd||fffd||fffd||fffd||fffd||fffd|
Public jdg_flg As Boolean               '|fffd||327a||fffd||fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|O
Public Sheet_name As String             '|fffd||fffd||fffd||303|V|fffd|[|fffd|g|fffd||fffd|
Public Sheet_num As Integer             '|fffd|V|fffd|[|fffd|g|fffd||50d||fffd|
Public graph_sheet_name As String       '|fffd|O|fffd||fffd||fffd|t|fffd|V|fffd|[|fffd|g|fffd||fffd|
Public f_sheet_name As String           '|fffd|O|fffd||fffd||fffd|t|fffd|V|fffd|[|fffd|g|fffd||693||fffd||fffd|O|fffd||fffd|SHEET
Public graph_on_flg As Boolean          '|fffd|O|fffd||fffd||fffd|t|fffd||c42c||fffd|t|fffd||fffd||fffd|O
Public torikomi_name As String          '|fffd|H|fffd|H|fffd|H|fffd|H
Public mem_name As String               '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h
Public mem_name_num As Integer
Public tandoku_data As String           '|fffd|P|fffd||183|f|fffd|[|fffd|^
Public P_peak_data As String            '+|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^
Public M_peak_data As String            '-|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^
Public stop_btn_flg As Boolean          '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd||fffd|t|fffd||fffd||fffd|O
Public form_close_flg As Boolean
Public sing_unit As String              '|fffd|P|fffd||183||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|P|fffd||fffd|
Public sing_data As String              '|fffd|f|fffd|[|fffd|^|fffd||fffd|
Public sing_p_max As String             '+|fffd||151||fffd|l
Public sing_p_min As String             '|fffd|{|fffd||14f||fffd||fffd|l
Public sing_m_max As String             '|fffd|||fffd||151||fffd|l
Public sing_m_min As String             '-|fffd||14f||fffd||fffd|l
Public sing_avg As String               '|fffd||fffd||fffd||3d2|l
Public sing_div As String               '|fffd|W|fffd||fffd||fffd||38d||fffd|
Public sing_max_limit As String         '|fffd||327a||fffd||fffd||fffd|l
Public sing_min_limit As String
Public sing_no(110) As String           '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||50d||fffd|
Public sing_h_l(110) As String          'Hi-Low|fffd||fffd||fffd||fffd|
Public sing_load(110) As String         '|fffd||5cf|d
Public cont_unit As String
Public cont_data As String
Public cont_p_max As String
Public cont_p_min As String
Public cont_m_max As String
Public cont_m_min As String
Public cont_p_peak As String
Public cont_m_peak As String
Public cont_avg As String
Public cont_div As String
Public cont_max_limit As String
Public cont_min_limit As String
Public cont_no(1010) As String
Public cont_h_l(1010) As String
Public cont_load(1010) As String
Public std_unit As String
Public std_max_limit As String
Public std_min_limit As String
Public std_data As String
Public std_no(60) As String
Public std_p_max(60) As String
Public std_p_min(60) As String
Public std_m_max(60) As String
Public std_m_min(60) As String
Public std_p_peak(60) As String
Public std_m_peak(60) As String
Public std_last(60) As String
Public mem_data_count As Long
Public usb_len_err As Boolean
Public fg_type_num As String
Public unit_num As String
Public cell_limit_flg As Boolean
Public limit_frm_exit_flg As Boolean
Public mem_exit_flg As Boolean

'**************************
'   |fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd||fffd||50b||fffd||fffd|L|fffd||590||fffd|
'**************************
'Declare Sub Sleep Lib "KERNEL32" (ByVal dwMilliseconds As Long) ' |fffd|E|fffd|F|fffd|C|fffd|g|fffd|p|fffd||590||fffd|

'*************************
'   |fffd||fffd||fffd|C|fffd||fffd||fffd||fffd||295|\|fffd||fffd|
'*************************
Private Sub main_select_frm_show()
    Dim bRet As Boolean
    Dim aa As Integer
    Dim intRet As Integer
    Dim myBook As Workbook
    Dim book_open As Integer
    book_open = 0
    
    init_language CInt(GetSetting(XLANAME_K, "Settings", "Language", "0"))
    
    For Each myBook In Workbooks
        book_open = book_open + 1
    Next myBook
    If book_open = 0 Then
        MsgBox text(44), vbExclamation, XLANAME_K + ".main_select_frm_show()"
        Exit Sub
    End If
    
    stop_btn_flg = False
    form_close_flg = False
    bRet = OpenDevice()
    Do While (1)
        If bRet Then
            Exit Do
        Else
             MsgBox text(42) & Chr(13) & text(40), vbOKOnly + vbExclamation, XLANAME_K + ".main_select_frm_show()"
            Exit Sub
        End If
    Loop
    main_select_frm.Show
End Sub



'*************************
'   |fffd|o|fffd|[|fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'*************************
Private Sub ver_proc_k()
    Dim ver As String
    ver = XLANAME_K & " " & VERSION_K
    MsgBox ver & vbCrLf & vbCrLf & CORP, vbOKOnly, INFO
End Sub

Private Sub frm_language_usb_show()
    frmLanguage_USB.Show 1
End Sub
Attribute VB_Name = "main_select_frm"
Attribute VB_Base = "0{D8A61580-BF18-49F8-BF3E-D5D2DE06E607}{8EA05713-FC37-4A2B-8D9E-7A05FCBD298C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub change_btn_Click()
    limit_frm.UserForm_Initialize
    limit_frm.Show
End Sub
Private Sub change_btn_2_Click()
    limit_frm.UserForm_Initialize
    limit_frm.Show
End Sub

Private Sub change_btn_3_Click()
    limit_frm.UserForm_Initialize
    limit_frm.Show
End Sub

Private Sub Einzelwert_Click()
Dim usb_len As Long
    Dim buff(256) As Byte
    Dim ii As Integer
    
    If device_cheak = False Then
        Exit Sub
    End If
   
    If Opt_btn_tate = True Then
        g_cell_dir = TATE                       ' |fffd|c|fffd||fffd||fffd||fffd|I|fffd||fffd|
    Else
        g_cell_dir = YOKO                       ' |fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd|
    End If
       
    g_areas = RefEdit1.Value            ' |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd|
    
    If g_areas <> Empty Then
        On Error GoTo Range_err
        Range(g_areas).Activate
        On Error Resume Next
    End If
    
    RefEdit1.text = ""
    
    
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_ENDP, SHORT_TR_NG, USB_REQ_MSR_RD, USB_VAL_MSR_PEAK, 0, USB_LEN_MSR_PEAK, buff(0))
    If usb_mdl.usb_error(usb_len) = True Then
        Exit Sub
    End If
    
    P_peak_data = Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6)) & Chr(buff(7))
    M_peak_data = Chr(buff(8)) & Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)) & Chr(buff(12)) & Chr(buff(13))
 
   ' P_peak_data = Chr(buff(2))
    'M_peak_data = Chr(buff(8))
   ' For ii = 3 To 7 Step 1
    '    P_peak_data = P_peak_data & Chr(buff(ii))
     '   M_peak_data = P_peak_data & Chr(buff(ii + 7))
    'Next ii
    
    outp_mdl.cell_output3
 
    Exit Sub

Range_err:
    MsgBox text(54), vbOKOnly + vbExclamation, XLANAME_K + ".Einzelwert_Click()"

End Sub

Private Sub Einzelpeakwert_Click()
    Dim usb_len As Long
    Dim buff(256) As Byte
    Dim ii As Integer
    
    If device_cheak = False Then
        Exit Sub
    End If
   
    If Opt_btn_tate = True Then
        g_cell_dir = TATE                       ' |fffd|c|fffd||fffd||fffd||fffd|I|fffd||fffd|
    Else
        g_cell_dir = YOKO                       ' |fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd|
    End If
       
    g_areas = RefEdit1.Value            ' |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd|
    
    If g_areas <> Empty Then
        On Error GoTo Range_err
        Range(g_areas).Activate
        On Error Resume Next
    End If
    
    RefEdit1.text = ""
    
    
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_ENDP, SHORT_TR_NG, USB_REQ_MSR_RD, USB_VAL_MSR_PEAK, 0, USB_LEN_MSR_PEAK, buff(0))
    If usb_mdl.usb_error(usb_len) = True Then
        Exit Sub
    End If
    
    P_peak_data = Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6)) & Chr(buff(7))
    M_peak_data = Chr(buff(8)) & Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)) & Chr(buff(12)) & Chr(buff(13))
 
   ' P_peak_data = Chr(buff(2))
    'M_peak_data = Chr(buff(8))
   ' For ii = 3 To 7 Step 1
    '    P_peak_data = P_peak_data & Chr(buff(ii))
     '   M_peak_data = P_peak_data & Chr(buff(ii + 7))
    'Next ii
    
    outp_mdl.cell_output3
 
    Exit Sub

Range_err:
    MsgBox text(54), vbOKOnly + vbExclamation, XLANAME_K + ".Einzelpeakwert_Click()"
End Sub

Private Sub CommandButton1_Click()
Dim usb_len As Long
    Dim buff(256) As Byte
    Dim ii As Integer
    
    If device_cheak = False Then
        Exit Sub
    End If
   
    If Opt_btn_tate = True Then
        g_cell_dir = TATE                       ' |fffd|c|fffd||fffd||fffd||fffd|I|fffd||fffd|
     Else
         g_cell_dir = YOKO                       ' |fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd|
    End If
       
    g_areas = RefEdit1.Value            ' |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd|
    
    If g_areas <> Empty Then
        On Error GoTo Range_err
        Range(g_areas).Activate
        On Error Resume Next
    End If
    
    RefEdit1.text = ""
    
    
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_ENDP, SHORT_TR_NG, USB_REQ_MSR_RD, USB_VAL_MSR_PEAK, 0, USB_LEN_MSR_PEAK, buff(0))
    If usb_mdl.usb_error(usb_len) = True Then
        Exit Sub
    End If
    
    P_peak_data = Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6)) & Chr(buff(7))
    ' M_peak_data = Chr(buff(8)) & Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)) & Chr(buff(12)) & Chr(buff(13))
 
    M_peak_data = Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6)) & Chr(buff(7))
  
   ' P_peak_data = Chr(buff(2))
    'M_peak_data = Chr(buff(8))
   ' For ii = 3 To 7 Step 1
    '    P_peak_data = P_peak_data & Chr(buff(ii))
     '   M_peak_data = P_peak_data & Chr(buff(ii + 7))
    'Next ii
    
    Modul1.cell_output4
    
    
    
    Exit Sub

Range_err:
    MsgBox text(54), vbOKOnly + vbExclamation, XLANAME_K + ".CommandButton1_Click()"
End Sub

Private Sub Fugou_btn_1_Click()
    If Fugou_btn_1.Value = True Then
        Fugou_btn_2.Value = False
        P_load_2 = False
        M_load_2 = True
    Else
        Fugou_btn_2.Value = True
        P_load_2 = True
        M_load_2 = False
    End If
End Sub

Private Sub Fugou_btn_2_Click()
    If Fugou_btn_2.Value = True Then
        Fugou_btn_2.BackColor = &H8080FF
        Fugou_btn_1.Value = False
        Fugou_btn_1.BackColor = &H8000000F
        P_load_2 = True
        M_load_2 = False
    Else
        Fugou_btn_2.BackColor = &H8000000F
        Fugou_btn_1.Value = True
        Fugou_btn_1.BackColor = &H8080FF
        P_load_2 = False
        M_load_2 = True
    End If
End Sub

Private Sub Fugou_off_btn_1_Click()
    If Fugou_off_btn_1.Value = True Then
        Fugou_off_btn_2.Value = False
        P_off_load = False
        M_off_load = True
    Else
        Fugou_off_btn_2.Value = True
        P_off_load = True
        M_off_load = False
    End If
End Sub

Private Sub Fugou_off_btn_2_Click()
    If Fugou_off_btn_2.Value = True Then
        Fugou_off_btn_2.BackColor = &H8080FF
        Fugou_off_btn_1.Value = False
        Fugou_off_btn_1.BackColor = &H8000000F
        P_off_load = True
        M_off_load = False
    Else
        Fugou_off_btn_2.BackColor = &H8000000F
        Fugou_off_btn_1.Value = True
        Fugou_off_btn_1.BackColor = &H8080FF
        P_off_load = False
        M_off_load = True
    End If
End Sub


Private Sub Ite_lbl_Change()
    '''''''''''''''''''''''''''''''''''''''''''''''''
    'Ite_lbl.Text = StrConv(Ite_lbl.Text, vbNarrow)
    '''''''''''''''''''''''''''''''''''''''''''''''''
    Ite_lbl.text = Val(Ite_lbl.text)

End Sub
Private Sub Ite_lbl_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim pnt As Integer
    On Error GoTo ITE_ERROR
    
    If Val(Ite_lbl.text) > 65000 Then
        MsgBox text(55), vbOKOnly + vbExclamation, XLANAME_K + ".Ite_lbl_Exit()"
        Ite_lbl.text = 0
        Exit Sub
    End If
   
    Do While Mid(Ite_lbl.text, 1, 1) = "-" Or (Len(Ite_lbl.text) <> 1 And Mid(Ite_lbl.text, 1, 1) = "0")
        Ite_lbl.text = Mid(Ite_lbl.text, 2)
    Loop
    
    pnt = InStr(1, Ite_lbl.text, ".")
    If pnt <> 0 Then
        Ite_lbl.text = Mid(Ite_lbl.text, 1, pnt - 1)
    End If
    
    ite_num = Ite_lbl.text
    
    Exit Sub

ITE_ERROR:
    MsgBox text(55), vbOKOnly + vbExclamation, XLANAME_K + ".Ite_lbl_Exit()"
    Ite_lbl.text = 0
End Sub

Private Sub MultiPage_Change()
    If device_cheak = False Then
        Exit Sub
    End If
    
    With main_select_frm
        .jdg_lbl.BackColor = &H808080
        .jdg_lbl.Caption = ""
        .jdg_lbl.ForeColor = &HC0C0C0
        .jdg_lbl_2.BackColor = &H808080
        .jdg_lbl_2.Caption = ""
        .jdg_lbl_2.ForeColor = &HC0C0C0
    End With
    
    
    If MultiPage.Value = 0 Or MultiPage.Value = 1 Then
        usb_mdl.limit_read
    End If
    If MultiPage.Value = 2 Then
        usb_mdl.mem_mode_read
        usb_mdl.mem_number_read
    End If
End Sub

Private Sub S_trg_lbl_Change()
'********************
'S_trg_lbl.Text = StrConv(S_trg_lbl.Text, vbNarrow)
'********************
'S_trg_lbl.Text = Val(S_trg_lbl.Text)
End Sub

Private Sub S_trg_lbl_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim m_flg As Boolean
    m_flg = False
    On Error GoTo TRG_ERROR
    
    If Val(S_trg_lbl.text) > 9999 Or Val(S_trg_lbl.text) < -9999 Then
        MsgBox text(55), vbOKOnly + vbExclamation, XLANAME_K + ".S_trg_lebl_Exit()"
        S_trg_lbl.text = 0
        Exit Sub
    End If
    
    If Mid(S_trg_lbl.text, 1, 1) = "-" Then
        S_trg_lbl.text = Mid(S_trg_lbl.text, 2)
        m_flg = True
    End If
    Do While (Len(S_trg_lbl.text) <> 1 And Mid(S_trg_lbl.text, 1, 1) = "0" And Mid(S_trg_lbl.text, 2, 1) <> ".")
        S_trg_lbl.text = Mid(S_trg_lbl.text, 2)
    Loop
    If m_flg = True Then
         S_trg_lbl.text = "-" & S_trg_lbl.text
         m_flg = False
    End If
    S_trg_num = S_trg_lbl.text                          '|fffd||635e||fffd||fffd|

    Exit Sub

TRG_ERROR:
    MsgBox text(55), vbOKOnly + vbExclamation, XLANAME_K + ".S_trg_lbl_Exit()"
    S_trg_lbl.text = 0

End Sub

Private Sub S_trg_off_lbl_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim m_flg As Boolean
    m_flg = False
    On Error GoTo TRG_OFF_ERROR
    
    If Val(S_trg_off_lbl.text) > 9999 Or Val(S_trg_off_lbl.text) < -9999 Then
        MsgBox text(55), vbOKOnly + vbExclamation, XLANAME_K + ".S_trg_off_lbl_Exit()"
        S_trg_off_lbl.text = 0
        Exit Sub
    End If
    
    If Mid(S_trg_off_lbl.text, 1, 1) = "-" Then
        S_trg_off_lbl.text = Mid(S_trg_off_lbl.text, 2)
        m_flg = True
    End If
    Do While (Len(S_trg_off_lbl.text) <> 1 And Mid(S_trg_off_lbl.text, 1, 1) = "0" And Mid(S_trg_off_lbl.text, 2, 1) <> ".")
        S_trg_off_lbl.text = Mid(S_trg_off_lbl.text, 2)
    Loop
    If m_flg = True Then
         S_trg_off_lbl.text = "-" & S_trg_off_lbl.text
         m_flg = False
    End If
    S_trg_off_num = S_trg_off_lbl.text

    Exit Sub

TRG_OFF_ERROR:
    MsgBox text(55), vbOKOnly + vbExclamation, XLANAME_K + ".S_trg_off_lbl_Exit()"
    S_trg_off_lbl.text = 0

End Sub

Private Sub Torikomi_box_Change()
    If Not Torikomi_box.text = "10times/sec" And Not Torikomi_box.text = "20times/sec" And Not Torikomi_box.text = "50times/sec" And Not Torikomi_box.text = "100times/sec" And Not Torikomi_box.text = "1000times/sec" Then
        Torikomi_box.text = torikomi_name
    End If
    
    torikomi_name = Torikomi_box.text
End Sub
Private Sub Mem_box_Change()
    Dim usb_len As Long
    Dim buff(0) As Byte
    
    If device_cheak = False Then
        Exit Sub
    End If
    
    If Not Mem_box.text = "Single Memory Mode" And Not Mem_box.text = "Continuous Memory Mode" And Not Mem_box.text = "Standard Memory Mode" Then
        Mem_box.text = mem_name
    End If
    
    mem_name = Mem_box.text
   
    If Mem_box.text = "Single Memory Mode" Then
        usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, 0, USB_REQ_MEMMODE, USB_VAL_MEM_SING, 0, USB_LEN_MEMMODE, buff(0))
        If usb_mdl.usb_error(usb_len) = True Then
            Exit Sub
        End If
    ElseIf Mem_box.text = "Continuous Memory Mode" Then
        usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, 0, USB_REQ_MEMMODE, USB_VAL_MEM_CONT, 0, USB_LEN_MEMMODE, buff(0))
        If usb_mdl.usb_error(usb_len) = True Then
            Exit Sub
        End If
    ElseIf Mem_box.text = "Standard Memory Mode" Then
        usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, 0, USB_REQ_MEMMODE, USB_VAL_MEM_NORM, 0, USB_LEN_MEMMODE, buff(0))
        If usb_mdl.usb_error(usb_len) = True Then
            Exit Sub
        End If
    End If
    
    usb_mdl.mem_number_read
    
End Sub

Private Sub Trg_on_btn_Click()
    If Trg_on_btn Then
        Fugou_btn_2.Enabled = True
        Fugou_btn_1.Enabled = True
        S_trg_lbl.Enabled = True
        trg_on_en = True
    
    Else
        Fugou_btn_2.Enabled = False
        Fugou_btn_1.Enabled = False
        S_trg_lbl.Enabled = False
        trg_on_en = False
    End If
End Sub

Private Sub Trg_off_btn_Click()
    If Trg_off_btn Then
        Fugou_off_btn_2.Enabled = True
        Fugou_off_btn_1.Enabled = True
        S_trg_off_lbl.Enabled = True
        trg_off_en = True
    
    Else
        Fugou_off_btn_2.Enabled = False
        Fugou_off_btn_1.Enabled = False
        S_trg_off_lbl.Enabled = False
        trg_off_en = False
    End If
End Sub

Private Sub jdg_on_btn_Click()
    If Jdg_on_btn Then
        Jdg_on_btn_2.Value = True
        
        jdg_flg = True
    Else
        Jdg_on_btn_2.Value = False
        
        
        jdg_lbl.BackColor = &H808080
        jdg_lbl.Caption = ""
        jdg_lbl.ForeColor = &HC0C0C0
        jdg_lbl_2.BackColor = &H808080
        jdg_lbl_2.Caption = ""
        jdg_lbl_2.ForeColor = &HC0C0C0
        jdg_flg = False
    End If
End Sub
Private Sub jdg_on_btn_2_Click()
    If Jdg_on_btn_2 Then
        Jdg_on_btn.Value = True
       
        jdg_flg = True
    Else
        Jdg_on_btn.Value = False
        
        jdg_lbl.BackColor = &H808080
        jdg_lbl.Caption = ""
        jdg_lbl.ForeColor = &HC0C0C0
        jdg_lbl_2.BackColor = &H808080
        jdg_lbl_2.Caption = ""
        jdg_lbl_2.ForeColor = &HC0C0C0
        jdg_flg = False
    End If
End Sub


'********************
'   |fffd|t|fffd|H|fffd|[|fffd||fffd||fffd||fffd||fffd|[|fffd|h
'********************
Private Sub UserForm_Initialize()
    Dim bRet As Boolean
    Dim torikomi(4) As String
    Dim m_modo(2) As String
    Dim i As Integer
    
    usb_len_err = False
    stop_btn_flg = False
    form_close_flg = False
    torikomi_name = "10times/sec"
    
    init_form
    
    torikomi(0) = "10times/sec"
    torikomi(1) = "20times/sec"
    torikomi(2) = "50times/sec"
    torikomi(3) = "100times/sec"
    'torikomi(4) = "1000|fffd||fffd|/|fffd|b"
    m_modo(0) = "Single Memory Mode"
    m_modo(1) = "Continuous Memory Mode"
    m_modo(2) = "Standard Memory Mode"
    
    MultiPage.Value = 0
    
    For i = 0 To 3 '4
        Torikomi_box.AddItem torikomi(i)
    Next
    
    For i = 0 To 2
        Mem_box.AddItem m_modo(i)
    Next
    
    usb_mdl.limit_read
    usb_mdl.mem_mode_read
    
    State.Caption = text(38)
    State.BackColor = &H80FF80

    graph_on_flg = False
            
    P_load_2 = True
    M_load_2 = False
    P_off_load = True
    M_off_load = False
    
    Fugou_btn_2.Enabled = False
    Fugou_btn_2.Value = True
    Fugou_btn_1.Enabled = False
    Fugou_btn_1.Value = False
    Fugou_off_btn_2.Enabled = False
    Fugou_off_btn_2.Value = True
    Fugou_off_btn_1.Enabled = False
    Fugou_off_btn_1.Value = False
    S_trg_lbl.Enabled = False
    S_trg_off_lbl.Enabled = False
   
        
    g_cell_dir = TATE                           ' |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|c|fffd||fffd||fffd||fffd|
   
    limit_jdg = 1

    trg_on_en = False
    trg_off_en = False
    jdg_flg = False
    
    Ite_lbl.Enabled = True                          '|fffd||635e||fffd||fffd|
    Torikomi_box.Enabled = True                     '|fffd||635e||fffd||fffd||fffd||fffd|
    Trg_on_btn.Enabled = True                     '2nd|fffd|g|fffd||fffd||fffd|KON|fffd|{|fffd|^|fffd||fffd|
    Trg_off_btn.Enabled = True
    
    Fugou_btn_2.Enabled = False                     '2nd|fffd|g|fffd||fffd||fffd|K|fffd||fffd||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
    Fugou_btn_1.Enabled = False
    Fugou_off_btn_2.Enabled = False
    Fugou_off_btn_1.Enabled = False
    
    S_trg_lbl.Enabled = False                       '2nd|fffd|g|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd|
    S_trg_off_lbl.Enabled = False
    
    Graph_on_btn.Enabled = True                     '|fffd|O|fffd||fffd||fffd|tON|fffd|{|fffd|^|fffd||fffd|
    Start_btn.Enabled = True                        '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Stop_btn.Enabled = False                        '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Peak_reset_btn.Enabled = True                   '|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|Z|fffd|b|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Zero_btn.Enabled = True                         '|fffd||fffd||fffd||708||fffd||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
    Data_in_btn.Enabled = True                      '|fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Peak_in_btn.Enabled = True                      '|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Opt_btn_tate.Enabled = True                     '|fffd|c|fffd||fffd||fffd||fffd|
    Opt_btn_yoko.Enabled = True                     '|fffd||fffd||fffd||fffd||fffd||fffd|
    Mem_start_btn.Enabled = True                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Mem_clear_btn.Enabled = True                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|A|fffd|{|fffd|^|fffd||fffd|
    Mem_input_btn.Enabled = True                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||635e||fffd|{|fffd|^|fffd||fffd|
    Mem_stop_btn.Enabled = False                     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Mem_box.Enabled = True                          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|I|fffd||fffd|
    RefEdit1.Enabled = True                         '|fffd|Z|fffd||fffd||fffd|I|fffd||fffd|
    Header_on_btn.Enabled = True                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Header_on_btn_2.Enabled = True                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn.Enabled = True                       '|fffd||fffd||fffd||fffd|ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn_2.Enabled = True
           '|fffd||fffd||fffd||fffd||fffd|l|fffd|\|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd|
                    
End Sub

'************************
'   |fffd|t|fffd|H|fffd|[|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd|[|fffd|h
'************************
Public Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Dim bRet As Boolean
    bRet = ClosePipe()
    bRet = CloseDevice()
    'If (bRet) Then
    'Else
    '    MsgBox "CloseDevice : NG"
    'End If
    form_close_flg = True
End Sub

'**************
'   OK|fffd|{|fffd|^|fffd||fffd|
'**************
Private Sub start_btn_click()
    cell_limit_flg = True
    
    If device_cheak = False Then
        Exit Sub
    End If
    
    ite_num = Abs(Ite_lbl.text)                          '|fffd||635e||fffd||fffd|
    
    If ite_num = 0 Then                             '|fffd||635e||fffd||fffd|0|fffd||302||182||fffd||fffd||343|G|fffd||fffd||fffd|h|fffd||fffd||fffd|X
        ite_num = 65000
    End If
    
    f_sheet_name = ActiveSheet.Name
    data_count = 1                                  ' |fffd|f|fffd|[|fffd|^|fffd||fffd|
    
    trg_on_flg = False
    trg_off_flg = False
    
    S_trg_num = S_trg_lbl.text                      '2nd|fffd|g|fffd||fffd||fffd|K
    S_trg_off_num = S_trg_off_lbl.text
   
    limit_jdg = 1                                   '|fffd||327a||fffd||fffd||fffd||fffd||fffd||83c9||fffd||fffd||fffd|l
    
    If Graph_on_btn.Value = True Then
        graph_on_flg = True
    Else
        graph_on_flg = False
    End If
    
    max_limit = Max_limit_lbl.Caption             '|fffd||fffd||fffd||fffd|l|fffd||fffd||835e||fffd||fffd|
    min_limit = Min_limit_lbl.Caption             '|fffd||fffd||fffd||fffd||fffd|l|fffd||fffd||835e||fffd||fffd|
    
    g_areas = RefEdit1.Value                        ' |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd|
    
    If g_areas <> Empty Then
        On Error GoTo Range_err
        Range(g_areas).Activate
        On Error Resume Next
    End If
    
    first_Row = ActiveCell.Row                      ' |fffd||635e||fffd|J|fffd|n|fffd||fffd||fffd||303|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|W|fffd||64fe|
    first_Col = ActiveCell.Column
    
    RefEdit1.text = ""
    
    If main_select_frm.Graph_on_btn Then
        outp_mdl.Sheet_move
    End If
    
    Ite_lbl.Enabled = False                         '|fffd||635e||fffd||fffd|
    Torikomi_box.Enabled = False                    '|fffd||635e||fffd||fffd||fffd||fffd|
    Trg_on_btn.Enabled = False                    '2nd|fffd|g|fffd||fffd||fffd|KON|fffd|{|fffd|^|fffd||fffd|
    Trg_off_btn.Enabled = False
    Fugou_btn_2.Enabled = False                     '2nd|fffd|g|fffd||fffd||fffd|K|fffd||fffd||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
    Fugou_btn_1.Enabled = False
    Fugou_off_btn_2.Enabled = False
    Fugou_off_btn_1.Enabled = False
    S_trg_lbl.Enabled = False                       '2nd|fffd|g|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd|
    S_trg_off_lbl.Enabled = False
    Graph_on_btn.Enabled = False                    '|fffd|O|fffd||fffd||fffd|tON|fffd|{|fffd|^|fffd||fffd|
    Start_btn.Enabled = False                       '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Stop_btn.Enabled = True                         '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Peak_reset_btn.Enabled = False                  '|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|Z|fffd|b|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Zero_btn.Enabled = False                         '|fffd||fffd||fffd||708||fffd||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
    Data_in_btn.Enabled = False                      '|fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Peak_in_btn.Enabled = False                      '|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Opt_btn_tate.Enabled = False                     '|fffd|c|fffd||fffd||fffd||fffd|
    Opt_btn_yoko.Enabled = False                     '|fffd||fffd||fffd||fffd||fffd||fffd|
    Mem_start_btn.Enabled = False                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Mem_clear_btn.Enabled = False                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|A|fffd|{|fffd|^|fffd||fffd|
    Mem_input_btn.Enabled = False                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||635e||fffd|{|fffd|^|fffd||fffd|
    Mem_stop_btn.Enabled = False                     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Mem_box.Enabled = False                          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|I|fffd||fffd|
    RefEdit1.Enabled = False                         '|fffd|Z|fffd||fffd||fffd|I|fffd||fffd|
    Header_on_btn.Enabled = False                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Header_on_btn_2.Enabled = False                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn.Enabled = False                       '|fffd||fffd||fffd||fffd|ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn_2.Enabled = False
    
    change_btn.Enabled = False
    MultiPage.tandoku_page.Enabled = False
    MultiPage.mem_page.Enabled = False
    
    
    State.Caption = text(41)
    State.BackColor = &H80FFFF
    
    main_select_frm.jdg_lbl.BackColor = &H808080
    main_select_frm.jdg_lbl.Caption = ""
    main_select_frm.jdg_lbl.ForeColor = &HC0C0C0
    
    usb_mdl.interrupt
    
    If usb_len_err = True Then
        stop_rutin
        usb_len_err = False
        Exit Sub
    End If
    
    State.Caption = text(38)
    State.BackColor = &H80FF80
   
    calc_mdl.weight_average
    calc_mdl.Max_weight
    calc_mdl.Min_weight
    calc_mdl.Weight_varp
    calc_mdl.P_Max_weight
    calc_mdl.M_Max_weight
    calc_mdl.P_Min_weight
    calc_mdl.M_Min_weight
    
    If main_select_frm.Graph_on_btn Then
        main_select_frm.Hide
        outp_mdl.mk_fig
        
        If main_select_frm.Jdg_on_btn.Value = True Then
            jdg_frm.UserForm_Initialize
            jdg_frm.Show
        Else
            not_jdg_frm.Show
        End If

        Sheets(f_sheet_name).Activate
        Sheets(f_sheet_name).Cells(first_Row, first_Col).Select
        main_select_frm.Show
    Else
        On Error Resume Next
        ActiveSheet.Cells(first_Row, first_Col + 1).Activate
        With main_select_frm.jdg_lbl
            If jdg_flg = True Then
                If limit_jdg = 1 Then
                    .BackColor = &HF96309
                    .Caption = "OK"
                    .ForeColor = &HFFFF80
                ElseIf limit_jdg = 0 Then
                    .BackColor = &HFF&
                    .Caption = "NG"
                    .ForeColor = &HC0C0FF
                End If
            Else
                .BackColor = &H808080
                .Caption = ""
                .ForeColor = &HC0C0C0
            End If
        End With
    End If
   
    Exit Sub
Range_err:
    MsgBox text(54), vbOKOnly + vbExclamation, XLANAME_K + ".Start_btn_click()"
    Exit Sub
End Sub
Private Sub stop_btn_Click()
    
    If device_cheak = False Then
        Exit Sub
    End If
    
    stop_btn_flg = True
    
End Sub

Public Sub stop_rutin()
    Ite_lbl.Enabled = True                          '|fffd||635e||fffd||fffd|
    Torikomi_box.Enabled = True                     '|fffd||635e||fffd||fffd||fffd||fffd|
    Trg_on_btn.Enabled = True                     '2nd|fffd|g|fffd||fffd||fffd|KON|fffd|{|fffd|^|fffd||fffd|
    Trg_off_btn.Enabled = True
    
    If Trg_on_btn Then
        Fugou_btn_2.Enabled = True
        Fugou_btn_1.Enabled = True
        S_trg_lbl.Enabled = True
    End If
               
    If Trg_off_btn Then
        Fugou_off_btn_2.Enabled = True
        Fugou_off_btn_1.Enabled = True
        S_trg_off_lbl.Enabled = True
    End If
               
    Graph_on_btn.Enabled = True                     '|fffd|O|fffd||fffd||fffd|tON|fffd|{|fffd|^|fffd||fffd|
    Start_btn.Enabled = True                        '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Stop_btn.Enabled = False                        '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Peak_reset_btn.Enabled = True                   '|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|Z|fffd|b|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Zero_btn.Enabled = True                         '|fffd||fffd||fffd||708||fffd||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
    Data_in_btn.Enabled = True                      '|fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Peak_in_btn.Enabled = True                      '|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Opt_btn_tate.Enabled = True                     '|fffd|c|fffd||fffd||fffd||fffd|
    Opt_btn_yoko.Enabled = True                     '|fffd||fffd||fffd||fffd||fffd||fffd|
    Mem_start_btn.Enabled = True                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Mem_clear_btn.Enabled = True                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|A|fffd|{|fffd|^|fffd||fffd|
    Mem_input_btn.Enabled = True                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||635e||fffd|{|fffd|^|fffd||fffd|
    Mem_stop_btn.Enabled = False                     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Mem_box.Enabled = True                          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|I|fffd||fffd|
    RefEdit1.Enabled = True                         '|fffd|Z|fffd||fffd||fffd|I|fffd||fffd|
    Header_on_btn.Enabled = True                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Header_on_btn_2.Enabled = True                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn.Enabled = True                       '|fffd||fffd||fffd||fffd|ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn_2.Enabled = True
    change_btn.Enabled = True
    MultiPage.renzoku_page.Enabled = True
    MultiPage.tandoku_page.Enabled = True
    MultiPage.mem_page.Enabled = True
     change_btn_3.Enabled = True
  
                
End Sub
Private Sub Mem_start_btn_Click()

    
    If device_cheak = False Then
        Exit Sub
    End If
    usb_mdl.mem_number_read
    main_select_frm.State.Caption = text(30)
    main_select_frm.State.BackColor = &HFFFF00
       
    If Mem_box.text = "Continuous Memory Mode" Then
        
        If mem_number_lbl.Caption >= 1000 Then
            MsgBox text(56), vbOKOnly + vbExclamation, XLANAME_K + ".Mem_start_btn_Click()"
            main_select_frm.State.Caption = text(38)
            main_select_frm.State.BackColor = &H80FF80
            Exit Sub
        End If
        
        usb_mdl.cont_mem_start
    
    
    ElseIf Mem_box.text = "Standard Memory Mode" Then
        
        If mem_number_lbl.Caption >= 50 Then
            MsgBox text(56), vbOKOnly + vbExclamation, XLANAME_K + ".Mem_start_btn_Click()"
            main_select_frm.State.Caption = text(38)
            main_select_frm.State.BackColor = &H80FF80
            Exit Sub
        End If
        
        usb_mdl.std_mem_start
    
    
    End If
    If Mem_box.text = "Single Memory Mode" Then
        If mem_number_lbl.Caption >= 100 Then
            MsgBox text(56), vbOKOnly + vbExclamation, XLANAME_K + ".Mem_start_btn_Click()"
            main_select_frm.State.Caption = text(38)
            main_select_frm.State.BackColor = &H80FF80
            
            Exit Sub
        End If
        
        usb_mdl.sing_mem_start
    
    
    End If
    If mem_exit_flg = True Then
        Exit Sub
    End If
    
    If Mem_box.text = "Single Memory Mode" Then
        main_select_frm.State.Caption = text(38)
        main_select_frm.State.BackColor = &H80FF80
        Exit Sub
    End If
    
    Ite_lbl.Enabled = False                         '|fffd||635e||fffd||fffd|
    Torikomi_box.Enabled = False                     '|fffd||635e||fffd||fffd||fffd||fffd|
    Trg_on_btn.Enabled = False                     '2nd|fffd|g|fffd||fffd||fffd|KON|fffd|{|fffd|^|fffd||fffd|
    Trg_off_btn.Enabled = False
    Fugou_btn_2.Enabled = False                     '2nd|fffd|g|fffd||fffd||fffd|K|fffd||fffd||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
    Fugou_btn_1.Enabled = False
    Fugou_off_btn_2.Enabled = False
    Fugou_off_btn_1.Enabled = False
    S_trg_lbl.Enabled = False                       '2nd|fffd|g|fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd|
    S_trg_off_lbl.Enabled = False
    Graph_on_btn.Enabled = False                    '|fffd|O|fffd||fffd||fffd|tON|fffd|{|fffd|^|fffd||fffd|
    Start_btn.Enabled = False                       '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Stop_btn.Enabled = False                         '|fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Peak_reset_btn.Enabled = False                  '|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|Z|fffd|b|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Zero_btn.Enabled = False                         '|fffd||fffd||fffd||708||fffd||fffd||fffd||fffd|{|fffd|^|fffd||fffd|
    Data_in_btn.Enabled = False                      '|fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Peak_in_btn.Enabled = False                      '|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^|fffd|{|fffd|^|fffd||fffd|
    Opt_btn_tate.Enabled = False                     '|fffd|c|fffd||fffd||fffd||fffd|
    Opt_btn_yoko.Enabled = False                     '|fffd||fffd||fffd||fffd||fffd||fffd|
    Mem_start_btn.Enabled = False                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|X|fffd|^|fffd|[|fffd|g|fffd|{|fffd|^|fffd||fffd|
    Mem_clear_btn.Enabled = False                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|A|fffd|{|fffd|^|fffd||fffd|
    Mem_input_btn.Enabled = False                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||635e||fffd|{|fffd|^|fffd||fffd|
    Mem_stop_btn.Enabled = True                     '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|X|fffd|g|fffd|b|fffd|v|fffd|{|fffd|^|fffd||fffd|
    Mem_box.Enabled = False                          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|I|fffd||fffd|
    RefEdit1.Enabled = False                         '|fffd|Z|fffd||fffd||fffd|I|fffd||fffd|
    Header_on_btn.Enabled = False                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Header_on_btn_2.Enabled = False                    '|fffd|w|fffd|b|fffd|_|fffd|[ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn.Enabled = False                       '|fffd||fffd||fffd||fffd|ON|fffd|{|fffd|^|fffd||fffd|
    Jdg_on_btn_2.Enabled = False
    change_btn_3.Enabled = False
    MultiPage.tandoku_page.Enabled = False
    MultiPage.renzoku_page.Enabled = False
End Sub

Private Sub Mem_stop_btn_Click()
    
    If device_cheak = False Then
        Exit Sub
    End If
    
    If Mem_box.text = "Continuous Memory Mode" Then
        usb_mdl.cont_mem_stop
    ElseIf Mem_box.text = "Standard Memory Mode" Then
        usb_mdl.std_mem_stop
    End If
  
    stop_rutin
    
    main_select_frm.State.Caption = text(38)
    main_select_frm.State.BackColor = &H80FF80
    
   ' usb_mdl.mem_number_read
End Sub
Private Sub Mem_clear_btn_Click()
    Dim usb_len As Long
    Dim intRet As Integer
     
    If device_cheak = False Then
        Exit Sub
    End If
    
    intRet = MsgBox(text(50), vbYesNo + vbQuestion, XLANAME_K + ".Mem_clear_btn_Click()")
    If intRet = vbYes Then
        usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, 0, USB_REQ_MSR_CLR, USB_VAL_CLR_ALL, 0, USB_LEN_MSR_CLR, 0)
        
        If usb_mdl.usb_error(usb_len) = True Then
            Exit Sub
        End If
        
        mem_number_lbl.Caption = 0
        
    End If
    
End Sub
Private Sub Mem_input_btn_Click()
    usb_mdl.mem_number_read
    If mem_number_lbl.Caption = 0 Then
        MsgBox text(51), vbOKOnly + vbExclamation, XLANAME_K + ".Mem_input_btn_Click()"
        Exit Sub
    End If
    mem_data_get
    
End Sub
Private Sub mem_data_get()
    Dim buff(15) As Byte
    Dim usb_len As Long
   
    If device_cheak = False Then
        Exit Sub
    End If

     g_areas = RefEdit1.Value            ' |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd|
    
    If g_areas <> Empty Then
        On Error GoTo Range_err
        Range(g_areas).Activate
        On Error Resume Next
    End If
    
    RefEdit1.text = ""
    
    
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_ENDP, SHORT_TR_NG, USB_REQ_MEM_CNT, USB_VAL_MEM_CNT, 0, USB_LEN_MEM_CNT, buff(0))
    If usb_mdl.usb_error(usb_len) = True Then
        Exit Sub
    End If
    
    mem_data_count = Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)) & Chr(buff(12))
    
    If Mem_box.text = "Single Memory Mode" Then
        usb_mdl.single_data_in
    ElseIf Mem_box.text = "Continuous Memory Mode" Then
        usb_mdl.cont_data_in
    ElseIf Mem_box.text = "Standard Memory Mode" Then
        usb_mdl.std_data_in
    End If
    Exit Sub
Range_err:
    MsgBox text(54), vbOKOnly + vbExclamation, XLANAME_K + ".mem_data_get()"
End Sub

Private Sub Data_in_btn_Click()
    Dim usb_len As Long
    Dim buff(256) As Byte
    Dim ii As Integer
    
    If device_cheak = False Then
        Exit Sub
    End If
    
    data_count = 0
    
    If Opt_btn_tate = True Then
        g_cell_dir = TATE                       ' |fffd|c|fffd||fffd||fffd||fffd|I|fffd||fffd|
    Else
        g_cell_dir = YOKO                       ' |fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd|
    End If
 
    g_areas = RefEdit1.Value            ' |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd|
    
    If g_areas <> Empty Then
        On Error GoTo Range_err
        Range(g_areas).Activate
        On Error Resume Next
    End If
    
    RefEdit1.text = ""
  
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_ENDP, SHORT_TR_NG, USB_REQ_SING_ST, USB_VAL_SING_ST, 0, USB_LEN_SING_ST, buff(0))
    If usb_mdl.usb_error(usb_len) = True Then
        Exit Sub
    End If
    
    tandoku_data = Chr(buff(2))
    
    For ii = 3 To usb_len Step 1
        tandoku_data = tandoku_data & Chr(buff(ii))
    Next ii
    
    outp_mdl.cell_output2
    
    Exit Sub
  
Range_err:
    MsgBox text(54), vbOKOnly + vbExclamation, XLANAME_K + ".Data_in_btn_Click()"
End Sub
Private Sub Peak_in_btn_Click()
    Dim usb_len As Long
    Dim buff(256) As Byte
    Dim ii As Integer
    
    If device_cheak = False Then
        Exit Sub
    End If
   
    If Opt_btn_tate = True Then
        g_cell_dir = TATE                       ' |fffd|c|fffd||fffd||fffd||fffd|I|fffd||fffd|
    Else
        g_cell_dir = YOKO                       ' |fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd|
    End If
       
    g_areas = RefEdit1.Value            ' |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd|
    
    If g_areas <> Empty Then
        On Error GoTo Range_err
        Range(g_areas).Activate
        On Error Resume Next
    End If
    
    RefEdit1.text = ""
    
    
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_ENDP, SHORT_TR_NG, USB_REQ_MSR_RD, USB_VAL_MSR_PEAK, 0, USB_LEN_MSR_PEAK, buff(0))
    If usb_mdl.usb_error(usb_len) = True Then
        Exit Sub
    End If
    
    P_peak_data = Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6)) & Chr(buff(7))
    M_peak_data = Chr(buff(8)) & Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)) & Chr(buff(12)) & Chr(buff(13))
 
   ' P_peak_data = Chr(buff(2))
    'M_peak_data = Chr(buff(8))
   ' For ii = 3 To 7 Step 1
    '    P_peak_data = P_peak_data & Chr(buff(ii))
     '   M_peak_data = P_peak_data & Chr(buff(ii + 7))
    'Next ii
    
    outp_mdl.cell_output3
 
    Exit Sub

Range_err:
    MsgBox text(54), vbOKOnly + vbExclamation, XLANAME_K + ".Peak_in_btn_Click()"
End Sub
Private Sub Peak_reset_btn_Click()
    Dim usb_len As Long
    
    If device_cheak = False Then
        Exit Sub
    End If
    
    usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, 0, USB_REQ_MSR_CLR, USB_VAL_CLR_PEAK, 0, USB_LEN_MSR_CLR, 0)
    If usb_mdl.usb_error(usb_len) = True Then
        Exit Sub
    End If
  
End Sub
Private Sub Zero_btn_Click()
    Dim usb_len As Long
    
    If device_cheak = False Then
        Exit Sub
    End If
        
    usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, 0, USB_REQ_MODE, USB_VAL_MODE_TARE, 0, USB_LEN_MODE, 0)
    If usb_mdl.usb_error(usb_len) = True Then
        Exit Sub
    End If

End Sub

'**********************
'   |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd|
'**********************
Private Sub OptBtn_tate_Click()
    g_cell_dir = TATE                           ' |fffd|c|fffd||fffd||fffd||fffd|I|fffd||fffd|
   
End Sub

Private Sub OptBtn_yoko_Click()
    g_cell_dir = YOKO                           ' |fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd|
 
End Sub

Public Function device_cheak()
    Dim bRet As Boolean
    If IsWorkingDevice() = False Then
        MsgBox text(39) & Chr(13) & text(40), vbOKOnly + vbExclamation, XLANAME_K + ".device_cheak()"
        
        main_select_frm.State.Caption = text(42)
        main_select_frm.State.BackColor = &HFF&
        bRet = ResetDevice()
        bRet = OpenDevice()
        device_cheak = False
    Else
        main_select_frm.State.Caption = text(38)
        main_select_frm.State.BackColor = &H80FF80
        device_cheak = True
    End If
    
End Function

Private Sub init_form()
    MultiPage.renzoku_page.Caption = text(0)      'Kontinuierlich
    MultiPage.tandoku_page.Caption = text(16)     'Einzelwerte
    MultiPage.mem_page.Caption = text(22)         'Speicher
    Frame51.Caption = text(0)           'Kontinuierlich
    Label117.Caption = text(1)          'Datens|fffd|tze
    Label118.Caption = text(3)          'Abtastrate
    Label119.Caption = text(7)          'Start
    Label134.Caption = text(8)          'Stopp
    Frame43.Caption = text(11)          'Grenzwert|fffd|berwachung
    Frame46.Caption = text(11)          'Grenzwert|fffd|berwachung
    Frame58.Caption = text(11)          'Grenzwert|fffd|berwachung
    Jdg_on_btn.Caption = text(5)        'Ein
    Jdg_on_btn_2.Caption = text(5)      'Ein
    Trg_on_btn.Caption = text(5)        'Ein
    Trg_off_btn.Caption = text(5)       'Ein
    change_btn.Caption = text(12)       'Eingabe
    change_btn_2.Caption = text(12)     'Eingabe
    change_btn_3.Caption = text(12)     'Eingabe
    Label103.Caption = text(13)         'Oberer Grenzwert
    Label104.Caption = text(14)         'Unterer Grenzwert
    Label125.Caption = text(13)         'Oberer Grenzwert
    Label126.Caption = text(14)         'Unterer Grenzwert
    Label131.Caption = text(13)         'Oberer Grenzwert
    Label132.Caption = text(14)         'Unterer Grenzwert
    Label107.Caption = text(15)         'Ergebnis
    Label113.Caption = text(15)         'Ergebnis
    Label116.Caption = text(9)          'Kopfdaten
    Label124.Caption = text(9)          'Kopfdaten
    Header_on_btn.Caption = text(5)     'Ein
    Header_on_btn_2.Caption = text(5)   'Ein
    Label109.Caption = text(10)         'Grafik
    Graph_on_btn.Caption = text(5)      'Ein
    Frame53.Caption = text(16)          'Einzelwerte
    Data_in_btn.Caption = text(17)      'Aktuelle Daten
    Peak_in_btn.Caption = text(18)      'Spitzenwerte
    CommandButton1.Caption = text(45)   'Zugfestigkeit
    Frame10.Caption = text(19)          'Zelle
    Opt_btn_tate.Caption = text(20)     'Unten
    Opt_btn_yoko.Caption = text(21)     'Rechts
    Frame56.Caption = text(23)          'Speichermodus
    Frame57.Caption = text(29)          'Anzahl gespeicherte Daten
    Frame54.Caption = text(26)          'Gespeicherte Daten
    Mem_input_btn.Caption = text(27)    'Importieren
    Mem_clear_btn.Caption = text(28)    'L|fffd|schen
    Frame55.Caption = text(24)          'Aufzeichnung
    Mem_start_btn.Caption = text(7)     'Start
    Mem_stop_btn.Caption = text(8)      'Stopp
    Frame12.Caption = text(32)          'Zur|fffd|cksetzen
    Zero_btn.Caption = text(33)         'Tarieren
    Peak_reset_btn.Caption = text(18)   'Spitzenwerte
    Frame7.Caption = text(35)           'Start Zelle
    Frame39.Caption = text(36)          'Status
    'Frame59.Caption = text(30)          'Messung
    Start_btn.Caption = text(7)         'start
    Stop_btn.Caption = text(8)          'Stopp
End Sub

Attribute VB_Name = "not_jdg_frm"
Attribute VB_Base = "0{87C83CEA-4301-41E3-B257-DFC74CCDAD26}{8F0A7CCD-1473-4C61-BA8E-0823F5465404}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub CommandButton1_Click()
    not_jdg_frm.Hide
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = main_select_frm.Caption
    CommandButton1.Caption = text(43)
End Sub

Attribute VB_Name = "outp_mdl"
Option Explicit
Dim next_graph_sheet_name

'***********************
'   |fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||303|Z|fffd||fffd||fffd||582||30f|o|fffd||34f||fffd||fffd||fffd|
'***********************
Public Sub cell_output1()
    Dim Row As Long
    Dim Col As Long
   
    On Error GoTo CELL_ERROR
    cell_limit_flg = True
    Row = ActiveCell.Row                        ' |fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|W|fffd||64fe|
    Col = ActiveCell.Column
    
    ' |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||34f|c|fffd||302||fffd|
    If main_select_frm.Header_on_btn Then
        If graph_on_flg = False Then
        ActiveSheet.Cells(Row, Col) = text(0)
        Row = Row + 1
        End If
        main_select_frm.Header_on_btn = False
    End If
    
    If graph_on_flg Then
        ActiveSheet.Cells(Row, Col) = text(0)
        Row = Row + 1
        graph_on_flg = False
    End If
        
    If data_count <= ite_num Then
        ActiveSheet.Cells(Row, Col) = renzoku_data(data_count)
        ActiveSheet.Cells(Row + 1, Col).Select
    Else
        ActiveSheet.Cells(Row + 1, Col).Select  ' |fffd||fffd||fffd|Z|fffd||fffd|(|fffd|c|fffd||fffd||fffd||fffd|)|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||fffd|
        Exit Sub
    End If
    
    Exit Sub
CELL_ERROR:
    MsgBox text(49), vbOKOnly + vbExclamation, XLANAME_K + ".cell_output1()"
    cell_limit_flg = False
End Sub

'***********************
' |fffd|P|fffd||183|f|fffd|[|fffd|^|fffd||303|Z|fffd||fffd||fffd||582||30f|o|fffd||34f||fffd||fffd||fffd|
'***********************
Public Sub cell_output2()
    Dim Row As Long
    Dim Col As Long
    
    Row = ActiveCell.Row                        ' |fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|W|fffd||64fe|
    Col = ActiveCell.Column
    
    If plot_range(Row, Col) = False Then
        Exit Sub
    End If
    
    If main_select_frm.Header_on_btn_2 Then
        ActiveSheet.Cells(Row, Col) = text(17)
        
        If g_cell_dir = YOKO Then                   ' |fffd|@|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f||a347||fffd|A
            Col = Col + 1
        Else
            Row = Row + 1
        End If
        
        main_select_frm.Header_on_btn_2 = False
    End If
    
    If tandoku_data < min_limit And tandoku_data > max_limit Then  '|fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||50ab||fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347||fffd|i|fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd|l|fffd|j
        limit_jdg = 3
    ElseIf tandoku_data > max_limit Then '|fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||50ab||fffd||fffd||fffd||a347|
        limit_jdg = 0           'High
    ElseIf tandoku_data < min_limit Then  '|fffd||fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||a347|
        limit_jdg = 2           'low
    Else
        limit_jdg = 1
    End If
            
    ' |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||34f|c|fffd||302||fffd|
    If g_cell_dir = YOKO Then                           '|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f||a347||fffd|A
        ActiveSheet.Cells(Row, Col) = tandoku_data      '|fffd|Z|fffd||fffd||fffd||253|\|fffd||fffd|t|fffd||fffd|
        ActiveSheet.Cells(Row, Col + 1).Select      '|fffd||fffd||fffd|Z|fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd|)|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||fffd|
    Else
        ActiveSheet.Cells(Row, Col) = tandoku_data  ' |fffd|@    |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|c|fffd||30f||a347||fffd|A
        ActiveSheet.Cells(Row + 1, Col).Select  ' |fffd|@|fffd|@|fffd||fffd||fffd|Z|fffd||fffd|(|fffd|c|fffd||fffd||fffd||fffd|)|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||fffd|
    End If
    
    With main_select_frm.jdg_lbl_2
        If jdg_flg = True Then
            If limit_jdg = 1 Then
                .BackColor = &HF96309
                .Caption = "OK"
                .ForeColor = &HFFFF80
            ElseIf limit_jdg = 0 Then
                .BackColor = &HFF&
                .Caption = "HIGH"
                .ForeColor = &HC0C0FF
            ElseIf limit_jdg = 2 Then
                .BackColor = &HFF&
                .Caption = "LOW"
                .ForeColor = &HC0C0FF
            ElseIf limit_jdg = 3 Then
                .BackColor = &HFF&
                .Caption = "BOTH"
                .ForeColor = &HC0C0FF
            End If
        Else
            .BackColor = &H808080
            .Caption = ""
            .ForeColor = &HC0C0C0
        End If
    End With
   
End Sub

'*********************************
'|fffd|@|fffd|s|fffd|[|fffd|N|fffd|f|fffd|[|fffd|^|fffd||303|Z|fffd||fffd||fffd||582||30f|o|fffd||34f||fffd||fffd||fffd|
'*********************************
Public Sub cell_output3()
    Dim Row As Long
    Dim Col As Long
   
    Row = ActiveCell.Row                        ' |fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|W|fffd||64fe|
    Col = ActiveCell.Column
    
    If plot_range(Row, Col) = False Then
        Exit Sub
    End If
    
    With ActiveSheet
    
        If main_select_frm.Header_on_btn_2 Then
            If g_cell_dir = YOKO Then                   ' |fffd|@|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f||a347||fffd|A
                .Cells(Row, Col) = "+Peak"
                .Cells(Row + 1, Col) = "-Peak"
                Col = Col + 1
            Else
                .Cells(Row, Col) = "+Peak"
                .Cells(Row, Col + 1) = "-Peak"
                Row = Row + 1
            End If
            main_select_frm.Header_on_btn_2 = False
        End If
        If g_cell_dir = YOKO Then                   ' |fffd|@|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f||a347||fffd|A
            .Cells(Row, Col) = P_peak_data
            .Cells(Row + 1, Col) = M_peak_data
            .Cells(Row, Col + 1).Select  ' |fffd|@|fffd|@|fffd||fffd||fffd|Z|fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd|)|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||fffd|
        Else
            .Cells(Row, Col) = P_peak_data  ' |fffd|@    |fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|c|fffd||30f||a347||fffd|A
            .Cells(Row, Col + 1) = M_peak_data
            .Cells(Row + 1, Col).Select  ' |fffd|@|fffd|@|fffd||fffd||fffd|Z|fffd||fffd|(|fffd|c|fffd||fffd||fffd||fffd|)|fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||fffd|
        End If
    
    End With
    
    main_select_frm.jdg_lbl_2.BackColor = &H808080
    main_select_frm.jdg_lbl_2.Caption = ""
    main_select_frm.jdg_lbl_2.ForeColor = &HC0C0C0

End Sub

'**********************
'|fffd|@|fffd|O|fffd||fffd||fffd|t|fffd|`|fffd||fffd|
'**********************
Public Sub mk_fig()
    Dim Sheet_name As String                            ' |fffd|V|fffd|[|fffd|g|fffd||fffd|6|fffd||fffd||fffd||fffd||fffd||682||fffd||fffd||fffd||314||50d||fffd|
    
    On Error Resume Next
                  
    Sheet_name = ActiveSheet.Name
    ActiveSheet.ChartObjects.Add(55, 14, 650, 330).Select
    ActiveChart.ChartType = xlXYScatter
    ActiveChart.SetSourceData Source:=ActiveSheet.Range(ActiveSheet.Cells(1, 1), ActiveSheet.Cells(1 + data_count, 1)), PlotBy:=xlColumns
    ActiveChart.Location Where:=xlLocationAsObject, Name:=graph_sheet_name
    With ActiveChart
        .Legend.Select
        Selection.Delete
        .ChartTitle.Select
        Selection.Delete
        .Axes(xlCategory, xlPrimary).HasTitle = True
        .Axes(xlCategory, xlPrimary).AxisTitle.Characters.text = text(29)
        .Axes(xlValue, xlPrimary).HasTitle = True
        .Axes(xlValue, xlPrimary).AxisTitle.Characters.text = text(46)
        .Axes(xlValue).MajorGridlines.Border.ColorIndex = 57                               '|fffd||23d5||fffd||fffd||fffd|J|fffd||fffd||fffd|[
        .Axes(xlValue).MajorGridlines.Border.LineStyle = xlDot
        .PlotArea.Interior.ColorIndex = 2
        .SeriesCollection(1).Border.ColorIndex = 3                      '|fffd||210||fffd||fffd||310|F
        .SeriesCollection(1).Border.LineStyle = 1                       '|fffd||210||fffd||fffd||303|J|fffd||fffd||fffd|[
        .SeriesCollection(1).Border.Weight = xlMedium 'xlThick
        .SeriesCollection(1).MarkerStyle = 0                            '|fffd|}|fffd|[|fffd|J|fffd|[|fffd|X|fffd|^|fffd|C|fffd||fffd|
        .PlotArea.Border.LineStyle = xlNone                          '|fffd|O|fffd||fffd||fffd|t|fffd|G|fffd||fffd||fffd|A|fffd||fffd||fffd|E|fffd||fffd||fffd||202||fffd|
        
    End With
    
    With ActiveSheet
        .Cells(28, 3) = text(1)
        .Cells(28, 4) = data_count - 1
        .Cells(29, 3) = text(15)
        .Cells(28, 5) = "'+Max"
        .Cells(28, 6) = max_p_gf
        .Cells(29, 5) = "'+Min"
        .Cells(29, 6) = min_p_gf
        .Cells(28, 7) = "'-Max"
        .Cells(28, 8) = max_m_gf
        .Cells(29, 7) = "'-Min"
        .Cells(29, 8) = min_m_gf
        .Cells(28, 9) = text(47)
        .Cells(28, 10) = Round(weight_avg, 3)
        .Cells(29, 9) = text(48)
        .Cells(29, 10) = Round(w_varp, 3)
        .Cells(28, 11) = text(13)
        .Cells(28, 12) = max_limit
        .Cells(29, 11) = text(14)
        .Cells(29, 12) = min_limit
    
        If jdg_flg = True Then
            If limit_jdg = 1 Then
                .Cells(29, 4) = "OK"
            ElseIf limit_jdg = 0 Then
                .Cells(29, 4) = "NG"
            End If
        Else
            .Cells(29, 4) = ""
        End If
        .Cells(1, 1).Select
    End With
    
End Sub

'**************************
' |fffd||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||308||693||fffd|
'**************************
Public Sub Sheet_move()
    
    Sheet_name = ActiveSheet.Name        '|fffd||fffd||fffd||303|V|fffd|[|fffd|g|fffd||fffd|
    Sheet_num = 1
    graph_sheet_name = "Graph" & Sheet_num           '|fffd|@|fffd|O|fffd||fffd||fffd|t|fffd|V|fffd|[|fffd|g|fffd||fffd|
    
    Do
        If check_Sheet(graph_sheet_name) Then                         '|fffd|@|fffd||fffd||fffd||303|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f||a347|
            graph_sheet_name = "Graph" & Sheet_num
            Exit Do
        Else
            Exit Do
        End If
    Loop
    
    If Sheets.Count >= 255 Then                   '|fffd||402||182||82||303|t|fffd|@|fffd|C|fffd||fffd||fffd||243||fffd||fffd|[|fffd|N|fffd|V|fffd|[|fffd|g|fffd||fffd|225|fffd||82||702||fffd|
        MsgBox text(44), vbOKOnly + vbExclamation, XLANAME_K + ".Sheet_move()"
        ActiveSheet.Cells(1, 1).Select
        Exit Sub
    End If
    
    Worksheets.Add after:=Worksheets(Sheets.Count)  '|fffd||fffd||fffd||742||303|V|fffd|[|fffd|g|fffd||30c||fffd||243|V|fffd|[|fffd|g|fffd||1c9||fffd|
    ActiveSheet.Name = graph_sheet_name              '|fffd||fffd||fffd||303|V|fffd|[|fffd|g|fffd||fffd||fffd||255||3cd|X
    Worksheets(graph_sheet_name).Activate              '|fffd|V|fffd||fffd||fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||fffd||fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd||fffd|
    ActiveSheet.Cells(1, 1).Select                                  '|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||292|u
End Sub
'************************
'  |fffd||fffd||fffd||303|V|fffd|[|fffd|g|fffd||317|L|fffd||fffd||fffd||fffd||fffd||fffd|
'************************
Private Function check_Sheet(Sheet) As Boolean '|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||317|L|fffd||fffd||fffd||314||fffd||fffd||fffd|
    Dim sn As Object
    Dim graph_name As String
    
    check_Sheet = False
    graph_name = Mid(Sheet, 1, 5)
    For Each sn In Sheets
        If LCase(graph_name) = LCase(Mid(sn.Name, 1, 5)) Then             '|fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Sheet_num = Val(Mid(sn.Name, 6, 3)) + 1
           check_Sheet = True
        End If
    Next sn
End Function
'********************************
'   |fffd|P|fffd||183|f|fffd|[|fffd|^|fffd|v|fffd||fffd||fffd|b|fffd|g
'********************************
Public Sub sing_data_output()
    Dim Row As Long
    Dim Col As Long
    Dim ii As Long
    
    On Error GoTo CELL_ERROR
    Row = ActiveCell.Row                        ' |fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|W|fffd||64fe|
    Col = ActiveCell.Column
     
    With ActiveSheet
        .Cells(Row, Col) = "SingleMemory"
        .Cells(Row + 1, Col) = text(52)
        .Cells(Row + 1, Col + 1) = sing_unit
        sing_unit = ""
        .Cells(Row + 2, Col) = text(29)
        .Cells(Row + 2, Col + 1) = sing_data
    
        .Cells(Row + 3, Col) = "'+Max"
        .Cells(Row + 3, Col + 1) = sing_p_max
        sing_p_max = ""
        .Cells(Row + 4, Col) = "'-Max"
        .Cells(Row + 4, Col + 1) = sing_m_max
        sing_m_max = ""
        .Cells(Row + 5, Col) = "'+Min"
        .Cells(Row + 5, Col + 1) = sing_p_min
        sing_p_min = ""
        .Cells(Row + 6, Col) = "'-Min"
        .Cells(Row + 6, Col + 1) = sing_m_min
        sing_m_min = ""
    
        .Cells(Row + 7, Col) = text(47)
        .Cells(Row + 7, Col + 1) = sing_avg
        sing_avg = ""
        .Cells(Row + 8, Col) = text(48)
        .Cells(Row + 8, Col + 1) = sing_div
        sing_div = ""
        .Cells(Row + 9, Col) = text(13)
        .Cells(Row + 9, Col + 1) = sing_max_limit
        sing_max_limit = ""
        .Cells(Row + 10, Col) = text(14)
        .Cells(Row + 10, Col + 1) = sing_min_limit
        sing_min_limit = ""
        .Cells(Row + 11, Col) = text(2)
        .Cells(Row + 11, Col + 1) = text(15)
        .Cells(Row + 11, Col + 2) = text(46)
    
        For ii = 0 To sing_data Step 1
            .Cells(Row + 12 + ii, Col) = sing_no(ii)
            sing_no(ii) = ""
            .Cells(Row + 12 + ii, Col + 1) = sing_h_l(ii)
            sing_h_l(ii) = ""
            .Cells(Row + 12 + ii, Col + 2) = sing_load(ii)
            sing_load(ii) = ""
        Next ii
        
        sing_data = ""
        .Cells(Row, Col + 3).Select
        Exit Sub
    
    End With
    
CELL_ERROR:
    MsgBox text(49), vbOKOnly + vbExclamation, XLANAME_K + ".sing_data_output()"
End Sub

'********************************
'   |fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|v|fffd||fffd||fffd|b|fffd|g
'********************************
Public Sub cont_data_output()
    Dim Row As Long
    Dim Col As Long
    Dim ii As Long

    Row = ActiveCell.Row                        ' |fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|W|fffd||64fe|
    Col = ActiveCell.Column
    
    On Error GoTo CELL_ERROR
    
    With ActiveSheet
        .Cells(Row, Col) = "ContinuousMemory"
        .Cells(Row + 1, Col) = text(52)
        .Cells(Row + 1, Col + 1) = cont_unit
        cont_unit = ""
        .Cells(Row + 2, Col) = text(1)
        .Cells(Row + 2, Col + 1) = cont_data
        .Cells(Row + 3, Col) = "'+Max"
        .Cells(Row + 3, Col + 1) = cont_p_max
        cont_p_max = ""
        .Cells(Row + 4, Col) = "'-Max"
        .Cells(Row + 4, Col + 1) = cont_m_max
        cont_m_max = ""
        .Cells(Row + 5, Col) = "'+Min"
        .Cells(Row + 5, Col + 1) = cont_p_min
        cont_p_min = ""
        .Cells(Row + 6, Col) = "'-Min"
        .Cells(Row + 6, Col + 1) = cont_m_min
        cont_m_min = ""
        .Cells(Row + 7, Col) = "'+Peak"
        .Cells(Row + 7, Col + 1) = cont_p_peak
        cont_p_peak = ""
        .Cells(Row + 8, Col) = "'-Peak"
        .Cells(Row + 8, Col + 1) = cont_m_peak
        cont_m_peak = ""
        .Cells(Row + 9, Col) = text(47)
        .Cells(Row + 9, Col + 1) = cont_avg
        cont_avg = ""
        .Cells(Row + 10, Col) = text(48)
        .Cells(Row + 10, Col + 1) = cont_div
        cont_div = ""
        .Cells(Row + 11, Col) = text(13)
        .Cells(Row + 11, Col + 1) = cont_max_limit
        cont_max_limit = ""
        .Cells(Row + 12, Col) = text(14)
        .Cells(Row + 12, Col + 1) = cont_min_limit
        cont_min_limit = ""
        .Cells(Row + 13, Col) = text(2)
        .Cells(Row + 13, Col + 1) = text(15)
        .Cells(Row + 13, Col + 2) = text(46)
    
        For ii = 0 To cont_data - 1 Step 1
            .Cells(Row + 14 + ii, Col) = cont_no(ii)
            cont_no(ii) = ""
            .Cells(Row + 14 + ii, Col + 1) = cont_h_l(ii)
            cont_h_l(ii) = ""
            .Cells(Row + 14 + ii, Col + 2) = cont_load(ii)
            cont_load(ii) = ""
        Next ii
        cont_data = ""
        .Cells(Row, Col + 3).Select
    End With
 
 Exit Sub

CELL_ERROR:
    MsgBox text(49), vbOKOnly + vbExclamation, XLANAME_K + ".cont_data_output()"

End Sub
'********************************
'   |fffd|W|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|v|fffd||fffd||fffd|b|fffd|g
'********************************
Public Sub std_data_output()
    Dim Row As Long
    Dim Col As Long
    Dim ii As Long

    Row = ActiveCell.Row                        ' |fffd|A|fffd|N|fffd|e|fffd|B|fffd|u|fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|W|fffd||64fe|
    Col = ActiveCell.Column
    On Error GoTo CELL_ERROR
    
    With ActiveSheet
        .Cells(Row, Col) = "StandardMemory"
        .Cells(Row + 1, Col) = text(52)
        .Cells(Row + 1, Col + 1) = std_unit
        .Cells(Row + 1, Col + 2) = text(13)
        .Cells(Row + 1, Col + 3) = std_max_limit
        .Cells(Row + 1, Col + 4) = text(14)
        .Cells(Row + 1, Col + 5) = std_min_limit
        .Cells(Row + 2, Col) = text(2)
        .Cells(Row + 2, Col + 1) = "'+Max"
        .Cells(Row + 2, Col + 2) = "'-Max"
        .Cells(Row + 2, Col + 3) = "'+Min"
        .Cells(Row + 2, Col + 4) = "'-Min"
        .Cells(Row + 2, Col + 5) = "'+Peak"
        .Cells(Row + 2, Col + 6) = "'-Peak"
        .Cells(Row + 2, Col + 7) = "Last data"
    
   
        For ii = 0 To std_data - 1 Step 1
            .Cells(Row + 3 + ii, Col) = std_no(ii)
            std_no(ii) = ""
            .Cells(Row + 3 + ii, Col + 1) = std_p_max(ii)
            std_p_max(ii) = ""
            .Cells(Row + 3 + ii, Col + 2) = std_m_max(ii)
            std_m_max(ii) = ""
            .Cells(Row + 3 + ii, Col + 3) = std_p_min(ii)
            std_p_min(ii) = ""
            .Cells(Row + 3 + ii, Col + 4) = std_m_min(ii)
            std_m_min(ii) = ""
            .Cells(Row + 3 + ii, Col + 5) = std_p_peak(ii)
            std_p_peak(ii) = ""
            .Cells(Row + 3 + ii, Col + 6) = std_m_peak(ii)
            std_m_peak(ii) = ""
            .Cells(Row + 3 + ii, Col + 7) = std_last(ii)
            std_last(ii) = ""
        Next ii
        std_data = ""
        .Cells(Row, Col + 8).Select
    End With
 
 Exit Sub

CELL_ERROR:
    MsgBox text(49), vbOKOnly + vbExclamation, XLANAME_K + ".std_data_output()"
End Sub

Public Function plot_range(tate_range As Long, yoko_range As Long) As Boolean
    plot_range = True
    If tate_range + 1 > 65536 Then
        MsgBox text(49), vbOKOnly + vbExclamation, XLANAME_K + ".plot_range()"
        plot_range = False
    End If
    If yoko_range + 1 > 256 Then
        MsgBox text(49), vbOKOnly + vbExclamation, XLANAME_K + ".plot_range()"
        plot_range = False
    End If
    
End Function
Attribute VB_Name = "usbFGparam_mdl"
Option Explicit

'**************************
'   |fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd||fffd||50b||fffd||fffd|L|fffd||8414|
'**************************
'#pragma once
'/*----------------------------------------------------------
    '|fffd||8414|
'----------------------------------------------------------*/
'// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|FbRequest
 '   // |fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h
Public Const USB_REQ_VAR = &H10             ' // |fffd|o|fffd|[|fffd|W|fffd||fffd||fffd||fffd|"
Public Const USB_REQ_TYPE = &H11        '   // |fffd|`|fffd||fffd|
Public Const USB_REQ_UNIT = &H12             '// |fffd|P|fffd||fffd|"
Public Const USB_REQ_MODE = &H20              '// |fffd||fffd||fffd||c0c2||fffd|[|fffd|h|fffd||752||fffd|
Public Const USB_REQ_CONT_ST = &H21           '// |fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|M/|fffd||fffd|~
Public Const USB_REQ_SING_ST = &H22                 '// |fffd|P|fffd||183|f|fffd|[|fffd|^|fffd||fffd||fffd|M
Public Const USB_REQ_MSR_RD = &H23           ' / |fffd||fffd||fffd||fffd|l|fffd||fffd||fffd|M
Public Const USB_REQ_MSR_CLR = &H24           '// |fffd|N|fffd||fffd||fffd|A
Public Const USB_REQ_MEMMODE = &H25     '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|
Public Const USB_REQ_MEMMODE_RD = &H26       '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd|
Public Const USB_REQ_MEMMODE_CONT = &H27      '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd||fffd||fffd||fffd||fffd|p|fffd|\|fffd||fffd||fffd|s|fffd||fffd|
Public Const USB_REQ_MEM_DATA = &H28           '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|v|fffd||fffd|
Public Const USB_REQ_MEM_CNT = &H29            ' // |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1cf|o
Public Const USB_REQ_DSP_DATA = &H2A    '// |fffd|\|fffd||fffd||fffd|l|fffd|v|fffd||fffd|
Public Const USB_REQ_PARM_LMT = &H30           '// |fffd||327a||fffd||fffd||fffd||752||fffd|/|fffd||1cf|o
Public Const USB_REQ_PARM_DSP = &H31          '// |fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd|
Public Const USB_REQ_PARM_PEAK = &H32         '// |fffd|s|fffd|[|fffd|N|fffd|t|fffd|@|fffd|[|fffd|X|fffd|g|fffd||752||fffd|
Public Const USB_REQ_PARM_POWER = &H33        '// |fffd|I|fffd|[|fffd|g|fffd|p|fffd||fffd||fffd|[|fffd|I|fffd|t|fffd||752||fffd|
Public Const USB_REQ_PARM_HOLD = &H34         '// |fffd|z|fffd|[|fffd||fffd||fffd|h|fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|
Public Const USB_REQ_PARM_ANALOG = &H35       '// |fffd|A|fffd|i|fffd||fffd||fffd|O|fffd|o|fffd||343|t|fffd|@|fffd|[|fffd|X|fffd|g|fffd||752||fffd|
Public Const USB_REQ_PARM_FILTER = &H36      '// |fffd|v|fffd||fffd||fffd|t|fffd|B|fffd||fffd||fffd|^|fffd||752||fffd|
Public Const USB_REQ_PARM_ALL = &H40          '// |fffd||fffd||fffd||742||310||752||fffd|v|fffd||fffd|
    '// |fffd||fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h
Public Const USB_REQ_SECRET = &H50            '// |fffd||fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h|fffd||fffd||fffd||fffd|
Public Const USB_REQ_DSP_REVERSE = &H60        '// |fffd||28f||fffd|/|fffd|t|fffd|\|fffd||fffd|
Public Const USB_REQ_PROOF = &H70           '// |fffd|Z|fffd||fffd|
Public Const USB_REQ_SET_TYPE = &H80         '// |fffd||fffd||fffd|i|fffd||752||fffd|
Public Const USB_REQ_PROOF_DATE = &H81       '// |fffd|Z|fffd||fffd||fffd||fffd||fffd||752||fffd|
Public Const USB_REQ_PROOF_DATED = &H82      '// |fffd|Z|fffd||fffd||fffd||fffd||fffd|v|fffd||fffd|
Public Const USB_REQ_PRODUCT_DATE = &H83      '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd|
Public Const USB_REQ_PRODUCT_DATED = &H84     '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd|v|fffd||fffd|
Public Const USB_REQ_AD_RANGE = &H85          '/ A/D|fffd||fffd||fffd||fffd||fffd|W|fffd||752||fffd|
Public Const USB_REQ_MODEL = &H86            '// |fffd|@|fffd||fffd||752||fffd|
Public Const USB_REQ_COUNTRY = &H87         '// |fffd||fffd||fffd||290||752||fffd|
Public Const USB_REQ_MODEL_INFO = &H88       '// |fffd||fffd|i|fffd|E|fffd||fffd||fffd||281|E|fffd|@|fffd||fffd||fffd||fffd|v|fffd||fffd|
Public Const USB_REQ_PARM1 = &H90             '// |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^1
Public Const USB_REQ_PARM2 = &H91            '/ |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^2
Public Const USB_REQ_PARM3 = &H92           '// |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^3
Public Const USB_REQ_PARM4 = &H93            '// |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^4
Public Const USB_REQ_PARM_INIT = &H94       '/ |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd|

'// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd| : wValue
   ' // |fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h
        '// USB_REQ_VAR
Public Const USB_VAL_VAR = &H0                     '// |fffd|o|fffd|[|fffd|W|fffd||fffd||fffd||fffd|
        '// USB_REQ_TYPE
Public Const USB_VAL_TYPE = &H0                    '// |fffd|`|fffd||fffd|
        '// USB_REQ_UNIT
Public Const USB_VAL_UNIT = &H0                    '// |fffd|P|fffd||fffd|
        '// USB_REQ_MODE
Public Const USB_VAL_MODE_TARE = &H0              '// |fffd||fffd||fffd||708||fffd||fffd||fffd||fffd||752||fffd|
Public Const USB_VAL_MODE_PPEAK = &H10            '// +|fffd|s|fffd|[|fffd|N|fffd|z|fffd|[|fffd||fffd||fffd|h|fffd||752||fffd|
Public Const USB_VAL_MODE_NORM = &H20             '// |fffd||28f||fffd|v|fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|
Public Const USB_VAL_MODE_MPEAK = &H30            '// -|fffd|s|fffd|[|fffd|N|fffd|z|fffd|[|fffd||fffd||fffd|h|fffd||752||fffd|
Public Const USB_VAL_MODE_UNITG = &H100          '// G|fffd|P|fffd||290||752||fffd|
Public Const USB_VAL_MODE_UNITKG = &H200        '// KG|fffd|P|fffd||290||752||fffd|
Public Const USB_VAL_MODE_UNITN = &H300          '// N|fffd|P|fffd||290||752||fffd|
Public Const USB_VAL_MODE_UNITLB = &H400          '/ LB|fffd|P|fffd||290||752||fffd|
Public Const USB_VAL_MODE_UNITOZ = &H500         '// Oz|fffd|P|fffd||290||752||fffd|
        '// USB_REQ_CONT_ST
Public Const USB_VAL_CONT_START = &H1              '// |fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|M|fffd|v|fffd||fffd|
Public Const USB_VAL_CONT_STOP = &H0             '// |fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd|~|fffd|v|fffd||fffd|
        '// USB_REQ_SING_ST
Public Const USB_VAL_SING_ST = &H0                     '// |fffd|P|fffd||183|f|fffd|[|fffd|^|fffd||fffd||fffd|M
        '// USB_REQ_MSR_RD
Public Const USB_VAL_MSR_PPEAK = &H0          '// +|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|M|fffd|l|fffd|v|fffd||fffd|
Public Const USB_VAL_MSR_MPEAK = &H1            '// -|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|M|fffd|l|fffd|v|fffd||fffd|
Public Const USB_VAL_MSR_PEAK = &H2              '// |fffd|}|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|M|fffd|l|fffd||183|s|fffd|[|fffd|N|fffd|l|fffd|N|fffd||fffd||fffd|A|fffd|v|fffd||fffd|
        '// USB_REQ_MSR_CLR
Public Const USB_VAL_CLR_PEAK = &H0                '// |fffd|}|fffd|s|fffd|[|fffd|N|fffd|l|fffd|N|fffd||fffd||fffd|A|fffd|v|fffd||fffd|
Public Const USB_VAL_CLR_ALL = &H1               '// |fffd|S|fffd||fffd||fffd||fffd||fffd||fffd||fffd|N|fffd||fffd||fffd|A|fffd|v|fffd||fffd|
Public Const USB_VAL_CLR_LAST = &H2             '/ |fffd||fffd||fffd||fffd||fffd||fffd||fffd||14f|I|fffd|f|fffd|[|fffd|^|fffd|N|fffd||fffd||fffd|A|fffd|v|fffd||fffd|
        '// USB_REQ_MEMMODE
Public Const USB_VAL_MEM_SING = &H0              '// |fffd|P|fffd||183||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|v|fffd||fffd|
Public Const USB_VAL_MEM_CONT = &H1               '// |fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|v|fffd||fffd|
Public Const USB_VAL_MEM_NORM = &H2               '// |fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|v|fffd||fffd|
        '// USB_REQ_MEMMODE_RD
Public Const USB_VAL_MEMMODE_RD = &H0             '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd|
        '// USB_REQ_MEMMODE_CONT
Public Const USB_VAL_MEMCONT_SING = &H0           '// |fffd|P|fffd||183||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|f|fffd|[|fffd|^|fffd|o|fffd|^|fffd|v|fffd||fffd|
Public Const USB_VAL_MEMCONT_START = &H10          '// |fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|J|fffd|n|fffd|v|fffd||fffd|
Public Const USB_VAL_MEMCONT_STOP = &H11          '// |fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|I|fffd||fffd||fffd|v|fffd||fffd|
Public Const USB_VAL_MEMNORM_START = &H20         '// |fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|J|fffd|n|fffd|v|fffd||fffd|
Public Const USB_VAL_MEMNORM_STOP = &H21         '// |fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|I|fffd||fffd||fffd|v|fffd||fffd|
        '// USB_REQ_MEM_DATA
Public Const USB_VAL_MEMDATA_CONT = &H0           '// |fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|v|fffd||fffd|
Public Const USB_VAL_MEMDATA_SING = &H1            '// |fffd|P|fffd||183||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|v|fffd||fffd|
Public Const USB_VAL_MEMDATA_NORM = &H2            '// |fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|v|fffd||fffd|
        '// USB_REQ_MEM_CNT
Public Const USB_VAL_MEM_CNT = &H0                 '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1cf|o
        '// USB_REQ_DSP_DATA
Public Const USB_VAL_DSP_DATA = &H0               '// |fffd|\|fffd||fffd||fffd|l|fffd|v|fffd||fffd|
        '// USB_REQ_PARM_LMT
Public Const USB_VAL_PARMLMT_WR = &H0           '// |fffd||327a||fffd||fffd||fffd||752||fffd|
Public Const USB_VAL_PARMLMT_RD = &H1              '// |fffd||327a||fffd||fffd||fffd||1cf|o
        '// USB_REQ_PARM_DSP
Public Const USB_VAL_PARMDSP_01 = &H1              '// |fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd| 1   |fffd||fffd|/sec
Public Const USB_VAL_PARMDSP_02 = &H2              '// |fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd| 2   |fffd||fffd|/sec
Public Const USB_VAL_PARMDSP_03 = &H3              '// |fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd| 3   |fffd||fffd|/sec
Public Const USB_VAL_PARMDSP_05 = &H4              '// |fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd| 5   |fffd||fffd|/sec
Public Const USB_VAL_PARMDSP_10 = &H5            '// |fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd| 10  |fffd||fffd|/sec
Public Const USB_VAL_PARMDSP_20 = &H6             '// |fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd| 20  |fffd||fffd|/sec
        '// USB_REQ_PARM_PEAK
Public Const USB_VAL_PARMPEAK_OFF = &H0           '// |fffd|s|fffd|[|fffd|N|fffd|t|fffd|@|fffd|[|fffd|X|fffd|g|fffd||752||fffd|@OFF
Public Const USB_VAL_PARMPEAK_ON = &H1           '// |fffd|s|fffd|[|fffd|N|fffd|t|fffd|@|fffd|[|fffd|X|fffd|g|fffd||752||fffd|@ON
        '// USB_REQ_PARM_POWER
Public Const USB_VAL_PARMPOWER_NONE = &H0         '// |fffd|I|fffd|[|fffd|g|fffd|p|fffd||fffd||fffd|[|fffd|I|fffd|t|fffd||752||fffd|@|fffd||fffd|
Public Const USB_VAL_PARMPOWER_10MIN = &H1       '// |fffd|I|fffd|[|fffd|g|fffd|p|fffd||fffd||fffd|[|fffd|I|fffd|t|fffd||752||fffd|@10min
        '// USB_REQ_PARM_HOLD    |fffd||fffd||fffd|L|fffd||fffd|2|fffd||fffd||fffd||682||fffd|OR|fffd||150||752||80b7||fffd||fffd|
Public Const USB_VAL_PARMHOLD_EDGE = &H0          '// |fffd|z|fffd|[|fffd||fffd||fffd|h|fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|@|fffd|G|fffd|b|fffd|W|fffd|g|fffd||fffd||fffd|K
Public Const USB_VAL_PARMHOLD_LEVEL = &H1          '// |fffd|z|fffd|[|fffd||fffd||fffd|h|fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|@|fffd||fffd||fffd|x|fffd||fffd||fffd|g|fffd||fffd||fffd|K
Public Const USB_VAL_PARMHOLD_CLOSE = &H0          '// |fffd|z|fffd|[|fffd||fffd||fffd|h|fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|@|fffd||83|g|fffd||fffd||fffd|K
Public Const USB_VAL_PARMHOLD_OPEN = &H10         '// |fffd|z|fffd|[|fffd||fffd||fffd|h|fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|@|fffd|J|fffd|g|fffd||fffd||fffd|K
        '// USB_REQ_PARM_ANALOG
Public Const USB_VAL_PARMANA_ON = &H0            '// |fffd|A|fffd|i|fffd||fffd||fffd|O|fffd|o|fffd||343|t|fffd|@|fffd|[|fffd|X|fffd|g|fffd||752||fffd|@ON
Public Const USB_VAL_PARMANA_OFF = &H1           '// |fffd|A|fffd|i|fffd||fffd||fffd|O|fffd|o|fffd||343|t|fffd|@|fffd|[|fffd|X|fffd|g|fffd||752||fffd|@OFF
        '// USB_REQ_PARM_FILTER
Public Const USB_VAL_PARMFILTER_3MS = &H0         '// |fffd|v|fffd||fffd||fffd|t|fffd|B|fffd||fffd||fffd|^|fffd|[|fffd||752||fffd|@3ms
Public Const USB_VAL_PARMFILTER_20MS = &H1        '// |fffd|v|fffd||fffd||fffd|t|fffd|B|fffd||fffd||fffd|^|fffd|[|fffd||752||fffd|@20ms
Public Const USB_VAL_PARMFILTER_150MS = &H2      '// |fffd|v|fffd||fffd||fffd|t|fffd|B|fffd||fffd||fffd|^|fffd|[|fffd||752||fffd|@150ms
        '// USB_REQ_PARM_ALL
Public Const USB_VAL_PARM_ALL = &H0              '/ |fffd||fffd||fffd||742||310||752||fffd|v|fffd||fffd|

    '// |fffd||fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h
        '// USB_REQ_SECRET
Public Const USB_VAL_SECRET_ENABLE = &H0          '// |fffd||fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h|fffd||fffd||fffd||fffd|
Public Const USB_VAL_SECRET_DISABLE = &H1        '/ |fffd||fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h|fffd||58e|~
        '// USB_REQ_DSP_REVERSE
Public Const USB_VAL_DSP_REVERSE = &H0            '// |fffd||28f||fffd|/|fffd|t|fffd|\|fffd||fffd|
        '// USB_REQ_PROOF
Public Const USB_VAL_PROOF_BOOT = &H0              '// |fffd|Z|fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|N|fffd||fffd|
Public Const USB_VAL_PROOF_START = &H1             '// |fffd|Z|fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|J|fffd|n
Public Const USB_VAL_PROOF_ZERO = &H2             '// |fffd|[|fffd||fffd||fffd|_|fffd|Z|fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|J|fffd|n
Public Const USB_VAL_PROOF_LOAD = &H3            '// |fffd||5cf|d|fffd|_|fffd|Z|fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|J|fffd|n
Public Const USB_VAL_PROOF_STOP = &H4            '// |fffd|Z|fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|I|fffd||fffd|
        '// USB_REQ_SET_TYPE
Public Const USB_VAL_TYPE_0002 = &H2            '// |fffd|^|fffd||501|@0.2kg
Public Const USB_VAL_TYPE_0005 = &H3              '// |fffd|^|fffd||501|@0.5kg
Public Const USB_VAL_TYPE_0010 = &H4             '// |fffd|^|fffd||501|@1.0kg
Public Const USB_VAL_TYPE_0020 = &H5            '// |fffd|^|fffd||501|@2.0kg
Public Const USB_VAL_TYPE_0050 = &H6              '/ |fffd|^|fffd||501|@5.0kg
Public Const USB_VAL_TYPE_0100 = &H7              '// |fffd|^|fffd||fffd| 10.0kg
Public Const USB_VAL_TYPE_0200 = &H8             '// |fffd|^|fffd||fffd| 20.0kg
Public Const USB_VAL_TYPE_0500 = &H9              '// |fffd|^|fffd||fffd| 50.0kg
Public Const USB_VAL_TYPE_NEW0100 = &H1A          '// |fffd|^|fffd||fffd|100.0kg      |fffd|VFGC/FGN|fffd||fffd|100kg|fffd|d|fffd|l
Public Const USB_VAL_TYPE_1000 = &HA              ' // |fffd|^|fffd||fffd|100.0kg
Public Const USB_VAL_TYPE_1500 = &HB              '// |fffd|^|fffd||fffd|150.0kg      |fffd||fffd||fffd|Y|fffd||fffd||fffd|i|fffd||142||343|T|fffd|||fffd|[|fffd|g|fffd||fffd|
Public Const USB_VAL_TYPE_2500 = &HC              '// |fffd|^|fffd||fffd|250.0kg      |fffd||fffd||fffd|Y|fffd||fffd||fffd|i|fffd||142||343|T|fffd|||fffd|[|fffd|g|fffd||fffd|
Public Const USB_VAL_TYPE_5000 = &HD            '// |fffd|^|fffd||fffd|500.0kg      |fffd||fffd||fffd|Y|fffd||fffd||fffd|i|fffd||142||343|T|fffd|||fffd|[|fffd|g|fffd||fffd|
        '// USB_REQ_PROOF_DATE           |fffd|Z|fffd||fffd||fffd||fffd||fffd||752||fffd||fffd|wValue|fffd||250||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        '// USB_REQ_PROOF_DATED
Public Const USB_VAL_PROOF_DATED = &H0             '// |fffd|Z|fffd||fffd||fffd||fffd||fffd|v|fffd||fffd|
        '// USB_REQ_PRODUCT_DATE         |fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd||fffd|wValue|fffd||250||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        '// USB_REQ_PRODUCT_DATED
Public Const USB_VAL_PRODUCT_DATED = &H0          ' // |fffd||fffd||fffd||fffd||fffd||fffd||fffd|v|fffd||fffd|
        '// USB_REQ_AD_RANGE
Public Const USB_VAL_ADRANGE_WR = &H0            '// AD|fffd||fffd||fffd||fffd||fffd|W|fffd||752||fffd|
Public Const USB_VAL_ADRANGE_RD = &H1              '// AD|fffd||fffd||fffd||fffd||fffd|W|fffd|v|fffd||fffd|
        '// USB_REQ_MODEL
Public Const USB_VAL_MODEL_FGC = &H0              '// |fffd|@|fffd||fffd|@FGC
Public Const USB_VAL_MODEL_FGX = &H1               '// |fffd|@|fffd||fffd|@FGX
        '// USB_REQ_COUNTRY
Public Const USB_VAL_COUNTRY_JPN = &H0             '// |fffd||fffd||fffd||281|@|fffd||fffd||fffd|{
Public Const USB_VAL_COUNTRY_USA = &H1             '// |fffd||fffd||fffd||281|@|fffd||10d||fffd|
Public Const USB_VAL_COUNTRY_EU = &H2              '// |fffd||fffd||fffd||281|@|fffd||fffd||fffd|B
        '// USB_REQ_MODEL_INFO
Public Const USB_VAL_MODEL_INFO = &H0             '// |fffd||fffd|i|fffd|E|fffd||fffd||fffd||281|E|fffd|@|fffd||fffd||fffd||fffd|v|fffd||fffd|
        '// USB_REQ_PARM1
Public Const USB_VAL_PARM1_WR = &H0                '/ |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^1|fffd||752||fffd|
Public Const USB_VAL_PARM1_RD = &H1              ' // |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^1|fffd|v|fffd||fffd|
        '// USB_REQ_PARM2
Public Const USB_VAL_PARM2_WR = &H0               ' |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^2|fffd||752||fffd|
Public Const USB_VAL_PARM2_RD = &H1                '// |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^2|fffd|v|fffd||fffd|
        '// USB_REQ_PARM3
Public Const USB_VAL_PARM3_WR = &H0                '// |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^3|fffd||752||fffd|
Public Const USB_VAL_PARM3_RD = &H1               '// |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^3|fffd|v|fffd||fffd|
        '// USB_REQ_PARM4
Public Const USB_VAL_PARM4_WR = &H0               ' // |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^4|fffd||752||fffd|
Public Const USB_VAL_PARM4_RD = &H1                '// |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^4|fffd|v|fffd||fffd|
        '// USB_REQ_PARM_INIT
Public Const USB_VAL_PARM_INIT = &H0              ' // |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd|

'// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|FwIndex     |fffd|g|fffd|p|fffd||fffd||fffd||202||fffd||fffd|R|fffd|}|fffd||fffd||fffd|h|fffd||352||fffd|`|fffd||fffd||fffd||202||fffd|
    '// |fffd||fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h
       ' // USB_REQ_PROOF_DATE   |fffd|Z|fffd||fffd||fffd||fffd||fffd||752||fffd||fffd|wIndex|fffd||24c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      '  // USB_REQ_AD_RANGE     |fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd||fffd|wIndex|fffd||24c||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

       ' // USB_REQ_AD_RANGE
Public Const USB_IND_ADRANGE_10 = &H0          '// AD|fffd||fffd||fffd||fffd||fffd|W|fffd|@10mV
Public Const USB_IND_ADRANGE_20 = &H1          '// AD|fffd||fffd||fffd||fffd||fffd|W|fffd|@20mV
Public Const USB_IND_ADRANGE_40 = &H2         '// AD|fffd||fffd||fffd||fffd||fffd|W|fffd|@40mV
Public Const USB_IND_ADRANGE_80 = &H3          '// AD|fffd||fffd||fffd||fffd||fffd|W|fffd|@80mV

'// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|FwLength
    '// |fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h
        '// USB_REQ_VAR
Public Const USB_LEN_VAR = 12               '  // |fffd|o|fffd|[|fffd|W|fffd||fffd||fffd||fffd|
        '// USB_REQ_TYPE=
Public Const USB_LEN_TYPE = 5                ' // |fffd|`|fffd||fffd|
        '// USB_REQ_UNIT
Public Const USB_LEN_UNIT = 4                ' // |fffd|P|fffd||fffd|
        '// USB_REQ_MODE
Public Const USB_LEN_MODE = 0                '// |fffd||fffd||fffd||c0c2||fffd|[|fffd|h|fffd||752||fffd|
        '// USB_REQ_CONT_ST
Public Const USB_LEN_CONT_ST = 0             ' // |fffd|A|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|M/|fffd||fffd|~  Interrupt
        '// USB_REQ_SING_ST
Public Const USB_LEN_SING_ST = 9             ' // |fffd|P|fffd||183|f|fffd|[|fffd|^|fffd||fffd||fffd|M
        '// USB_REQ_MSR_RD
Public Const USB_LEN_MSR_PPEAK = 9           ' // +|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|M|fffd|l|fffd|v|fffd||fffd|
Public Const USB_LEN_MSR_MPEAK = 9            '// -|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|M|fffd|l|fffd|v|fffd||fffd|
Public Const USB_LEN_MSR_PEAK = 15            '// |fffd|}|fffd|s|fffd|[|fffd|N|fffd||fffd||fffd|M|fffd|l|fffd||183|s|fffd|[|fffd|N|fffd|l|fffd|N|fffd||fffd||fffd|A|fffd|v|fffd||fffd|
        '// USB_REQ_MSR_CLR
Public Const USB_LEN_MSR_CLR = 0              '// |fffd|N|fffd||fffd||fffd|A
        '// USB_REQ_MEMMODE
Public Const USB_LEN_MEMMODE = 0              '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|
        '// USB_REQ_MEMMODE_RD
Public Const USB_LEN_MEMMODE_RD = 4           '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd|
        '// USB_REQ_MEMMODE_CONT
Public Const USB_LEN_MEMCONT_SING = 14        '// |fffd|P|fffd||183||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|f|fffd|[|fffd|^|fffd|o|fffd|^|fffd|v|fffd||fffd|
Public Const USB_LEN_MEMCONT_START = 8       ' // |fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|J|fffd|n|fffd|v|fffd||fffd|
Public Const USB_LEN_MEMCONT_STOP = 8         '// |fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|I|fffd||fffd||fffd|v|fffd||fffd|
Public Const USB_LEN_MEMNORM_START = 8       ' // |fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|J|fffd|n|fffd|v|fffd||fffd|
Public Const USB_LEN_MEMNORM_STOP = 8        ' // |fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|I|fffd||fffd||fffd|v|fffd||fffd|
        '// USB_REQ_MEM_DATA
Public Const USB_LEN_MEM_DATA = 0             '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|v|fffd||fffd| Bulk
        '// USB_REQ_MEM_CNT
Public Const USB_LEN_MEM_CNT = 14             '// |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1cf|o
        '// USB_REQ_DSP_DATA
Public Const USB_LEN_DSP_DATA = 9             '// |fffd|\|fffd||fffd||fffd|l|fffd|v|fffd||fffd|
        '// USB_REQ_PARM_LMT
Public Const USB_LEN_PARM_LMT = 13            '// |fffd||327a||fffd||fffd||fffd||752||fffd|/|fffd||1cf|o
        '// USB_REQ_PARM_DSP
Public Const USB_LEN_PARM_DSP = 0            ' // |fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd|
        '// USB_REQ_PARM_PEAK
Public Const USB_LEN_PARM_PEAK = 0            '// |fffd|s|fffd|[|fffd|N|fffd|t|fffd|@|fffd|[|fffd|X|fffd|g|fffd||752||fffd|
        '// USB_REQ_PARM_POWER
Public Const USB_LEN_PARM_POWER = 0           '// |fffd|I|fffd|[|fffd|g|fffd|p|fffd||fffd||fffd|[|fffd|I|fffd|t|fffd||752||fffd|
        '// USB_REQ_PARM_HOLD
Public Const USB_LEN_PARM_HOLD = 0           ' // |fffd|z|fffd|[|fffd||fffd||fffd|h|fffd||fffd||fffd|[|fffd|h|fffd||752||fffd|
        '// USB_REQ_PARM_ANALOG
Public Const USB_LEN_PARM_ANALOG = 0         ' // |fffd|A|fffd|i|fffd||fffd||fffd|O|fffd|o|fffd||343|t|fffd|@|fffd|[|fffd|X|fffd|g|fffd||752||fffd|
        '// USB_REQ_PARM_FILTER
Public Const USB_LEN_PARM_FILTER = 0         '// |fffd|v|fffd||fffd||fffd|t|fffd|B|fffd||fffd||fffd|^|fffd||752||fffd|
        '// USB_REQ_PARM_ALL
Public Const USB_LEN_PARM_ALL = 0             '// |fffd||fffd||fffd||742||310||752||fffd|v|fffd||fffd|   Bulk
    '// |fffd||fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h
        '// USB_REQ_SECRET
Public Const USB_LEN_SECRET = 0              ' // |fffd||fffd||fffd||fffd|J|fffd|R|fffd|}|fffd||fffd||fffd|h|fffd||fffd||fffd||fffd|
        '// USB_REQ_DSP_REVERSE
Public Const USB_LEN_DSP_REVERSE = 0          '/ |fffd||28f||fffd|/|fffd|t|fffd|\|fffd||fffd|
        '// USB_REQ_PROOF
Public Const USB_LEN_PROOF = 0                '// |fffd|Z|fffd||fffd||fffd|i|fffd|I|fffd||fffd||fffd||20a|O|fffd|j
Public Const USB_LEN_PROOF_STOP = 5          ' // |fffd|Z|fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|I|fffd||fffd|
        '// USB_REQ_SET_TYPE
Public Const USB_LEN_SET_TYPE = 0            ' // |fffd||fffd||fffd|i|fffd||752||fffd|
        '// USB_REQ_PROOF_DATE
Public Const USB_LEN_PROOF_DATE = 0           '// |fffd|Z|fffd||fffd||fffd||fffd||fffd||752||fffd|
        '// USB_REQ_PROOF_DATED
Public Const USB_LEN_PROOF_DATED = 9         ' // |fffd|Z|fffd||fffd||fffd||fffd||fffd|v|fffd||fffd|
        '// USB_REQ_PRODUCT_DATE
Public Const USB_LEN_PRODUCT_DATE = 0        ' // |fffd||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd|
        '// USB_REQ_PRODUCT_DATED
Public Const USB_LEN_PRODUCT_DATED = 9       ' // |fffd||fffd||fffd||fffd||fffd||fffd||fffd|v|fffd||fffd|
        '// USB_REQ_AD_RANGE
Public Const USB_LEN_ADRANGE_WR = 0          ' // AD|fffd||fffd||fffd||fffd||fffd|W|fffd||752||fffd|
Public Const USB_LEN_ADRANGE_RD = 4           '// AD|fffd||fffd||fffd||fffd||fffd|W|fffd|v|fffd||fffd|
        '// USB_REQ_MODEL
Public Const USB_LEN_MODEL = 0               ' // |fffd|@|fffd||fffd||752||fffd|
        '// USB_REQ_COUNTRY
Public Const USB_LEN_COUNTRY = 0             ' // |fffd||fffd||fffd||290||752||fffd|
        '// USB_REQ_MODEL_INFO
Public Const USB_LEN_MODEL_INFO = 6         ' // |fffd||fffd|i|fffd|E|fffd||fffd||fffd||281|E|fffd|@|fffd||fffd||fffd||fffd|v|fffd||fffd|
        '// USB_REQ_PARM?
        '// USB_REQ_PARM_INIT
Public Const USB_LEN_PARM = 13                '// |fffd||fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|[|fffd|^|fffd||752||fffd|/|fffd|v|fffd||fffd|


'// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|FData

'// |fffd|p|fffd|C|fffd|v
Public Const PIPE_INTR_IN = 0            ' // |fffd|p|fffd|C|fffd|vNo. : |fffd|C|fffd||fffd||fffd|^|fffd||fffd||fffd|v|fffd|g|fffd|]|fffd||fffd|In
Public Const PIPE_BULK_IN = 1            ' // |fffd|p|fffd|C|fffd|vNo. : |fffd|o|fffd||fffd||fffd|N|fffd|]|fffd||fffd|In
Public Const PIPE_BULK_OUT = 2           ' // |fffd|p|fffd|C|fffd|vNo. : |fffd|o|fffd||fffd||fffd|N|fffd|]|fffd||fffd|Out

'// |fffd|C|fffd||fffd||fffd|^|fffd|[|fffd||fffd||fffd|v|fffd|g|fffd|]|fffd||fffd|
Public Const USB_RCV_LEN_INT = 9          '// |fffd|C|fffd||fffd||fffd|^|fffd|[|fffd||fffd||fffd|v|fffd|g|fffd|]|fffd||fffd||fffd||fffd||fffd||30e||fffd|M|fffd|f|fffd|[|fffd|^|fffd||fffd|


Attribute VB_Name = "usb_mdl"
Option Explicit
Dim usb_len As Long
Dim bRet As Boolean

Public Sub limit_read()
    Dim buff(20) As Byte
    
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_ENDP, SHORT_TR_NG, USB_REQ_PARM_LMT, USB_VAL_PARMLMT_RD, 0, USB_LEN_MEM_CNT, buff(0))
    
    If usb_error(usb_len) = True Then
        Exit Sub
    End If
    
    max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6)))
    min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)))
    
    unit
    fg_type
    
    If fg_type_num = "02" Or fg_type_num = "03" Then
        If unit_num = 0 Or unit_num = 3 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & "." & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & "." & Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)))
        ElseIf unit_num = 1 Or unit_num = 2 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & "." & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & Chr(buff(10)) & "." & Chr(buff(11)))
        Else
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & "." & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & "." & Chr(buff(10)) & Chr(buff(11)))
        End If
    
    ElseIf fg_type_num = "04" Then
        If unit_num = 0 Or unit_num = 4 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & "." & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & "." & Chr(buff(10)) & Chr(buff(11)))
        ElseIf unit_num = 3 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & "." & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & "." & Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)))
        End If
    
    ElseIf fg_type_num = "05" Then
        If unit_num = 0 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & "." & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & "." & Chr(buff(10)) & Chr(buff(11)))
        ElseIf unit_num = 1 Or unit_num = 2 Or unit_num = 3 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & "." & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & "." & Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)))
        End If
    
    ElseIf fg_type_num = "06" Then
        If unit_num = 0 Or unit_num = 3 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & "." & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & "." & Chr(buff(10)) & Chr(buff(11)))
        ElseIf unit_num = 1 Or unit_num = 2 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & "." & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & "." & Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)))
        End If
        
    ElseIf fg_type_num = "07" Or fg_type_num = "08" Then
        If unit_num = 0 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & "." & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & Chr(buff(10)) & "." & Chr(buff(11)))
        Else
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & "." & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & "." & Chr(buff(10)) & Chr(buff(11)))
        End If
     ElseIf fg_type_num = "09" Then
        If unit_num = 0 Or unit_num = 3 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & "." & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & Chr(buff(10)) & "." & Chr(buff(11)))
        ElseIf unit_num = 1 Or unit_num = 2 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & "." & Chr(buff(5)) & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & "." & Chr(buff(10)) & Chr(buff(11)))
        End If
    Else
        If unit_num = 1 Or unit_num = 2 Or unit_num = 3 Then
            max_limit = (Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & "." & Chr(buff(6)))
            min_limit = (Chr(buff(7)) & Chr(buff(8)) & Chr(buff(9)) & Chr(buff(10)) & "." & Chr(buff(11)))
        End If
    End If
    
    main_select_frm.Max_limit_lbl.Caption = max_limit
    main_select_frm.Min_limit_lbl.Caption = min_limit
    main_select_frm.Max_limit_lbl_2.Caption = max_limit
    main_select_frm.Min_limit_lbl_2.Caption = min_limit
    main_select_frm.Max_limit_lbl_3.Caption = max_limit
    main_select_frm.Min_limit_lbl_3.Caption = min_limit
End Sub
Public Sub mem_mode_read()
    Dim buff(4) As Byte
   
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_MEMMODE_RD, USB_VAL_MEMMODE_RD, 0, USB_LEN_MEMMODE_RD, buff(0))
    If usb_error(usb_len) = True Then
        Exit Sub
    End If
    
    mem_name_num = Chr(buff(2))
    
    If mem_name_num = 0 Then
        main_select_frm.Mem_box.text = "Single Memory Mode"
    ElseIf mem_name_num = 1 Then
        main_select_frm.Mem_box.text = "Continuous Memory Mode"
    ElseIf mem_name_num = 2 Then
        main_select_frm.Mem_box.text = "Standard Memory Mode"
    End If

End Sub

Public Function unit()
    Dim buff(256) As Byte
    Dim ii As Integer
    limit_frm_exit_flg = False
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_UNIT, USB_VAL_UNIT, 0, USB_LEN_UNIT, buff(0))
    If usb_error(usb_len) = True Then
        limit_frm_exit_flg = True
        Exit Function
    End If
    unit_num = Chr(buff(2)) '|fffd|P|fffd||294||50d||fffd||fffd||64fe|
 
End Function

Public Function fg_type()
    Dim buff(256) As Byte
    limit_frm_exit_flg = False
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_TYPE, USB_VAL_TYPE, 0, USB_LEN_TYPE, buff(0))
    If usb_error(usb_len) = True Then
        limit_frm_exit_flg = True
        Exit Function
    End If
    fg_type_num = Chr(buff(2)) & Chr(buff(3)) '|fffd|^|fffd||fffd||fffd||64fe|
End Function
    

    
Public Sub interrupt()
    Dim buff(256) As Byte
    Dim iii As Long
'***************************************************************************
    'USB|fffd|C|fffd||fffd||fffd|^|fffd||fffd||fffd|v|fffd|g|fffd|]|fffd||fffd|
'***************************************************************************
     '|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|M|fffd|v|fffd||fffd|
    iii = 0
    usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, 0, USB_REQ_CONT_ST, USB_VAL_CONT_START, 0, USB_LEN_CONT_ST, buff(0))
  
    If usb_error(usb_len) = True Then
        usb_len_err = True
        Exit Sub
    End If
     
     '|fffd|I|fffd|[|fffd|v|fffd||fffd||fffd|p|fffd|C|fffd|v
     bRet = ResetPipe()
     bRet = OpenPipe(PIPE_INTR_IN)
     
     If bRet Then
        data_count = 1  ' data_count(0) wird nirgends verwendet!
        Do While (data_count <= ite_num) And (cell_limit_flg = True)
            DoEvents
            '|fffd|f|fffd|[|fffd|^|fffd||fffd|M
         
            usb_len = ReadPipe(USB_RCV_LEN_INT, buff(0))
            If usb_error(usb_len) = True Then
                usb_len_err = True
                Exit Sub
            End If
            renzoku_data(data_count) = Chr(buff(0)) & Chr(buff(1)) & Chr(buff(2)) & Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5))
        
            If P_load_2 Then
                If renzoku_data(data_count) >= S_trg_num Then
                    trg_on_flg = True
                End If
            ElseIf M_load_2 Then
                If renzoku_data(data_count) <= S_trg_num Then
                    trg_on_flg = True
                End If
            End If
            If trg_on_en = False Then
                trg_on_flg = True
            End If
                   
            '@af
            If (trg_on_flg And trg_off_en) Then 'Abschalttrigger erst, wenn Einschalttrigger gekommen ist
                If P_off_load Then
                    If renzoku_data(data_count) > S_trg_off_num Then
                        trg_off_flg = True
                        stop_btn_flg = True
                    End If
                ElseIf M_off_load Then
                    If renzoku_data(data_count) < S_trg_off_num Then
                        trg_off_flg = True
                        stop_btn_flg = True
                    End If
                End If
            End If
            
            If trg_on_flg And Not trg_off_flg Then
                If main_select_frm.Torikomi_box.text = "100times/sec" Then
                    main_select_frm.State.Caption = text(30)
                    main_select_frm.State.BackColor = &HFFFF00
                    'If iii Mod 10 = 0 Then
                        outp_mdl.cell_output1
                        data_count = data_count + 1
                    'End If
                    'iii = iii + 1
                ElseIf main_select_frm.Torikomi_box.text = "50times/sec" Then
                    main_select_frm.State.Caption = text(30)
                    main_select_frm.State.BackColor = &HFFFF00
                    'If iii Mod 20 = 0 Then
                    If iii Mod 2 = 0 Then   'Datenreduktion
                        outp_mdl.cell_output1
                        data_count = data_count + 1
                    End If
                    iii = iii + 1
                ElseIf main_select_frm.Torikomi_box.text = "20times/sec" Then
                    main_select_frm.State.Caption = text(30)
                    main_select_frm.State.BackColor = &HFFFF00
                    'If iii Mod 50 = 0 Then
                    If iii Mod 5 = 0 Then       'Datenreduktion
                        outp_mdl.cell_output1
                        data_count = data_count + 1
                    End If
                    iii = iii + 1
                ElseIf main_select_frm.Torikomi_box.text = "10times/sec" Then
                    main_select_frm.State.Caption = text(30)
                    main_select_frm.State.BackColor = &HFFFF00
                    'If iii Mod 100 = 0 Then
                    If iii Mod 10 = 0 Then      'Datenreduktion
                       outp_mdl.cell_output1
                            
                        data_count = data_count + 1
                    End If
                    iii = iii + 1
                End If
            End If
            If stop_btn_flg Then
                stop_btn_flg = False
                Exit Do
            End If
         
            If form_close_flg = True Then
                form_close_flg = False
                Exit Do
            End If
        Loop
        
    Else
        'MsgBox "OpenPipe : NG21"
    End If
    '|fffd|N|fffd||fffd||fffd|[|fffd|Y|fffd|p|fffd|C|fffd|v
    bRet = ClosePipe()
    If bRet Then
      '   MsgBox "ClosePipe : OK"
    Else
       '  MsgBox "ClosePipe : NG"
    End If
    '|fffd||fffd||fffd|M|fffd|v|fffd||fffd||fffd||fffd|~
    usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, 0, USB_REQ_CONT_ST, USB_VAL_CONT_STOP, 0, USB_LEN_CONT_ST, buff(0))
    
    If usb_error(usb_len) = True Then
        usb_len_err = True
        Exit Sub
    End If
    
    main_select_frm.stop_rutin

End Sub

Public Sub mem_number_read()
    Dim buff(15) As Byte
    
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_ENDP, SHORT_TR_NG, USB_REQ_MEM_CNT, USB_VAL_MEM_CNT, 0, USB_LEN_MEM_CNT, buff(0))
    If usb_error(usb_len) = True Then
        Exit Sub
    End If
    mem_data_count = Chr(buff(9)) & Chr(buff(10)) & Chr(buff(11)) & Chr(buff(12))
    main_select_frm.mem_number_lbl.Caption = mem_data_count
End Sub
Public Sub single_data_in()
    Dim buff(80) As Byte
    Dim ii As Long
    Dim jj As Long
    Dim long_buff(3000) As String
    Dim most_long_buff As String
    Dim bulk_try As Long
    Dim lll
    bulk_try = 0
    'mem_data_count = 100
    bulk_try = (((13 * 15) + 15 + (mem_data_count * 15)) / 15)
    
    'mem_data_count = 100
    usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_MEM_DATA, USB_VAL_MEMDATA_SING, 0, USB_LEN_MEM_DATA, buff(0))
    
    If usb_error(usb_len) = True Then
        Exit Sub
    End If
    
    bRet = ResetPipe()
    bRet = OpenPipe(PIPE_BULK_IN)
       
    If bRet Then

    ii = 0
    For bulk_try = 1 To bulk_try
        usb_len = ReadPipe(15, buff(0))   '// 60|fffd|s|fffd||1cd||fffd|
        
        If usb_error(usb_len) = True Then
            Exit Sub
        End If
        
        For jj = 0 To 14 Step 1
            long_buff(ii * 15 + jj) = buff(jj)
        Next jj
        
        ii = ii + 1
    Next bulk_try
    
    If Chr(long_buff(23)) = 0 Then
        sing_unit = "N"
        ElseIf Chr(long_buff(23)) = 1 Then
        sing_unit = "kgf"
        ElseIf Chr(long_buff(23)) = 2 Then
        sing_unit = "gf"
        ElseIf Chr(long_buff(23)) = 3 Then
        sing_unit = "lbf"
        ElseIf Chr(long_buff(23)) = 4 Then
        sing_unit = "ozf"
    End If
    
    sing_data = Chr(long_buff(40)) & Chr(long_buff(41)) & Chr(long_buff(42)) & Chr(long_buff(43))
    sing_p_max = Chr(long_buff(52)) & Chr(long_buff(54)) & Chr(long_buff(55)) & Chr(long_buff(56)) & Chr(long_buff(57)) & Chr(long_buff(58))
    sing_m_max = Chr(long_buff(67)) & Chr(long_buff(69)) & Chr(long_buff(70)) & Chr(long_buff(71)) & Chr(long_buff(72)) & Chr(long_buff(73))
    sing_p_min = Chr(long_buff(82)) & Chr(long_buff(84)) & Chr(long_buff(85)) & Chr(long_buff(86)) & Chr(long_buff(87)) & Chr(long_buff(88))
    sing_m_min = Chr(long_buff(97)) & Chr(long_buff(99)) & Chr(long_buff(100)) & Chr(long_buff(101)) & Chr(long_buff(102)) & Chr(long_buff(103))
    sing_avg = Chr(long_buff(112)) & Chr(long_buff(114)) & Chr(long_buff(115)) & Chr(long_buff(116)) & Chr(long_buff(117)) & Chr(long_buff(118))
    sing_div = Chr(long_buff(128)) & Chr(long_buff(129)) & Chr(long_buff(130)) & Chr(long_buff(131)) & Chr(long_buff(132)) & Chr(long_buff(133))
    
    '
    sing_max_limit = Chr(long_buff(142)) & Chr(long_buff(144)) & Chr(long_buff(145)) & Chr(long_buff(146)) & Chr(long_buff(147)) & Chr(long_buff(148))
    sing_min_limit = Chr(long_buff(157)) & Chr(long_buff(159)) & Chr(long_buff(160)) & Chr(long_buff(161)) & Chr(long_buff(162)) & Chr(long_buff(163))
        
    For ii = 0 To mem_data_count - 1 'sing_data - 1 Step 1
        sing_no(ii) = Chr(long_buff(197 + (ii * 15))) & Chr(long_buff(198 + (ii * 15))) & Chr(long_buff(199 + (ii * 15))) & Chr(long_buff(200 + (ii * 15)))
        sing_h_l(ii) = Chr(long_buff(201 + (ii * 15)))
        sing_load(ii) = Chr(long_buff(202 + (ii * 15))) & Chr(long_buff(204 + (ii * 15))) & Chr(long_buff(205 + (ii * 15))) & Chr(long_buff(206 + (ii * 15))) & Chr(long_buff(207 + (ii * 15))) & Chr(long_buff(208 + (ii * 15)))
    Next ii
    
    
    outp_mdl.sing_data_output
   
    Else
        'MsgBox "OpenPipe : NG"
         
    End If
  
    bRet = ClosePipe()
    If bRet = False Then
        'MsgBox "ClosePipe : NG"
    End If
End Sub

Public Sub cont_data_in()
    
    Dim buff(80) As Byte
    Dim ii As Long
    Dim jj As Long
    Dim long_buff(15300) As String
    Dim most_long_buff As String
    Dim bulk_try As Long
   
    bulk_try = 0
    'mem_data_count = 100
    bulk_try = ((15 * 15) + 15 + (mem_data_count * 15)) / 15
    
    'mem_data_count = 100
    usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_MEM_DATA, USB_VAL_MEMDATA_CONT, 0, USB_LEN_MEM_DATA, buff(0))
    
    If usb_error(usb_len) = True Then
        Exit Sub
    End If
    
    bRet = ResetPipe()
    bRet = OpenPipe(PIPE_BULK_IN)
    
       
    If bRet Then
        
     ii = 0
    For bulk_try = 1 To bulk_try
        usb_len = ReadPipe(15, buff(0))   '// 60|fffd|s|fffd||1cd||fffd|
        If usb_error(usb_len) = True Then
            Exit Sub
        End If
        For jj = 0 To 14 Step 1
            long_buff(ii * 15 + jj) = buff(jj)
        Next jj
        
        ii = ii + 1
    Next bulk_try
    
    
     If Chr(long_buff(23)) = 0 Then
        cont_unit = "N"
        ElseIf Chr(long_buff(23)) = 1 Then
        cont_unit = "kgf"
        ElseIf Chr(long_buff(23)) = 2 Then
        cont_unit = "gf"
        ElseIf Chr(long_buff(23)) = 3 Then
        cont_unit = "lbf"
        ElseIf Chr(long_buff(23)) = 4 Then
        cont_unit = "ozf"
    End If
    
    cont_data = Chr(long_buff(40)) & Chr(long_buff(41)) & Chr(long_buff(42)) & Chr(long_buff(43))
    cont_p_max = Chr(long_buff(52)) & Chr(long_buff(54)) & Chr(long_buff(55)) & Chr(long_buff(56)) & Chr(long_buff(57)) & Chr(long_buff(58))
    cont_m_max = Chr(long_buff(67)) & Chr(long_buff(69)) & Chr(long_buff(70)) & Chr(long_buff(71)) & Chr(long_buff(72)) & Chr(long_buff(73))
    cont_p_min = Chr(long_buff(82)) & Chr(long_buff(84)) & Chr(long_buff(85)) & Chr(long_buff(86)) & Chr(long_buff(87)) & Chr(long_buff(88))
    cont_m_min = Chr(long_buff(97)) & Chr(long_buff(99)) & Chr(long_buff(100)) & Chr(long_buff(101)) & Chr(long_buff(102)) & Chr(long_buff(103))
    cont_p_peak = Chr(long_buff(112)) & Chr(long_buff(114)) & Chr(long_buff(115)) & Chr(long_buff(116)) & Chr(long_buff(117)) & Chr(long_buff(118))
    cont_m_peak = Chr(long_buff(127)) & Chr(long_buff(129)) & Chr(long_buff(130)) & Chr(long_buff(131)) & Chr(long_buff(132)) & Chr(long_buff(133))
    cont_avg = Chr(long_buff(142)) & Chr(long_buff(144)) & Chr(long_buff(145)) & Chr(long_buff(146)) & Chr(long_buff(147)) & Chr(long_buff(148))
    cont_div = Chr(long_buff(156)) & Chr(long_buff(157)) & Chr(long_buff(159)) & Chr(long_buff(160)) & Chr(long_buff(161)) & Chr(long_buff(162)) & Chr(long_buff(163))
    cont_max_limit = Chr(long_buff(172)) & Chr(long_buff(174)) & Chr(long_buff(175)) & Chr(long_buff(176)) & Chr(long_buff(177)) & Chr(long_buff(178))
    cont_min_limit = Chr(long_buff(187)) & Chr(long_buff(189)) & Chr(long_buff(190)) & Chr(long_buff(191)) & Chr(long_buff(192)) & Chr(long_buff(193))
    For ii = 0 To mem_data_count - 1 'sing_data Step 1
        cont_no(ii) = Chr(long_buff(227 + (ii * 15))) & Chr(long_buff(228 + (ii * 15))) & Chr(long_buff(229 + (ii * 15))) & Chr(long_buff(230 + (ii * 15)))
        cont_h_l(ii) = Chr(long_buff(231 + (ii * 15)))
        cont_load(ii) = Chr(long_buff(232 + (ii * 15))) & Chr(long_buff(234 + (ii * 15))) & Chr(long_buff(235 + (ii * 15))) & Chr(long_buff(236 + (ii * 15))) & Chr(long_buff(237 + (ii * 15))) & Chr(long_buff(238 + (ii * 15)))
    Next ii
    
    
    outp_mdl.cont_data_output
   
    Else
       ' MsgBox "OpenPipe : NG\n"
        bRet = ResetPipe()
        Exit Sub
    End If
    
    bRet = ClosePipe()
    If bRet = False Then
        'MsgBox "ClosePipe : NG\n"
    End If

End Sub
Public Sub std_data_in()
    Dim buff(80) As Byte
    Dim ii As Long
    Dim jj As Long
    Dim long_buff(7000) As String
    Dim most_long_buff As String
    Dim bulk_try As Long
    
    bulk_try = 0
   
    bulk_try = (((15 * 7) + (mem_data_count * (8 * 15))) / 15)
   
    usb_len = ControlTransfer(CONTROL_OUT, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_MEM_DATA, USB_VAL_MEMDATA_NORM, 0, USB_LEN_MEM_DATA, buff(0))
        If usb_error(usb_len) = True Then
            Exit Sub
        End If
    
    bRet = ResetPipe()
    bRet = OpenPipe(PIPE_BULK_IN)
       
    If bRet Then

     ii = 0
    For bulk_try = 1 To bulk_try
        usb_len = ReadPipe(15, buff(0))   '// 15|fffd|s|fffd||1cd||fffd|
        If usb_error(usb_len) = True Then
            Exit Sub
        End If
         For jj = 0 To 14 Step 1
         long_buff(ii * 15 + jj) = buff(jj)
        
        Next jj
        
        ii = ii + 1
    Next bulk_try
    

     If Chr(long_buff(23)) = 0 Then
        std_unit = "N"
        ElseIf Chr(long_buff(23)) = 1 Then
        std_unit = "kgf"
        ElseIf Chr(long_buff(23)) = 2 Then
        std_unit = "gf"
        ElseIf Chr(long_buff(23)) = 3 Then
        std_unit = "lbf"
        ElseIf Chr(long_buff(23)) = 4 Then
        std_unit = "ozf"
    End If
    
    
    std_max_limit = Chr(long_buff(37)) & Chr(long_buff(39)) & Chr(long_buff(40)) & Chr(long_buff(41)) & Chr(long_buff(42)) & Chr(long_buff(43))
    std_min_limit = Chr(long_buff(52)) & Chr(long_buff(54)) & Chr(long_buff(55)) & Chr(long_buff(56)) & Chr(long_buff(57)) & Chr(long_buff(58))
    std_data = Chr(long_buff(70)) & Chr(long_buff(71)) & Chr(long_buff(72)) & Chr(long_buff(73))

        For ii = 0 To mem_data_count - 1
            std_no(ii) = Chr(long_buff(95 + (ii * 120))) & Chr(long_buff(96 + (ii * 120))) & Chr(long_buff(97 + (ii * 120))) & Chr(long_buff(98 + (ii * 120)))
            std_p_max(ii) = Chr(long_buff(112 + (ii * 120))) & Chr(long_buff(114 + (ii * 120))) & Chr(long_buff(115 + (ii * 120))) & Chr(long_buff(116 + (ii * 120))) & Chr(long_buff(117 + (ii * 120))) & Chr(long_buff(118 + (ii * 120)))
            std_m_max(ii) = Chr(long_buff(127 + (ii * 120))) & Chr(long_buff(129 + (ii * 120))) & Chr(long_buff(130 + (ii * 120))) & Chr(long_buff(131 + (ii * 120))) & Chr(long_buff(132 + (ii * 120))) & Chr(long_buff(133 + (ii * 120)))
            std_p_min(ii) = Chr(long_buff(142 + (ii * 120))) & Chr(long_buff(144 + (ii * 120))) & Chr(long_buff(145 + (ii * 120))) & Chr(long_buff(146 + (ii * 120))) & Chr(long_buff(147 + (ii * 120))) & Chr(long_buff(148 + (ii * 120)))
            std_m_min(ii) = Chr(long_buff(157 + (ii * 120))) & Chr(long_buff(159 + (ii * 120))) & Chr(long_buff(160 + (ii * 120))) & Chr(long_buff(161 + (ii * 120))) & Chr(long_buff(162 + (ii * 120))) & Chr(long_buff(163 + (ii * 120)))
            std_p_peak(ii) = Chr(long_buff(172 + (ii * 120))) & Chr(long_buff(174 + (ii * 120))) & Chr(long_buff(175 + (ii * 120))) & Chr(long_buff(176 + (ii * 120))) & Chr(long_buff(177 + (ii * 120))) & Chr(long_buff(178 + (ii * 120)))
            std_m_peak(ii) = Chr(long_buff(187 + (ii * 120))) & Chr(long_buff(189 + (ii * 120))) & Chr(long_buff(190 + (ii * 120))) & Chr(long_buff(191 + (ii * 120))) & Chr(long_buff(192 + (ii * 120))) & Chr(long_buff(193 + (ii * 120)))
            std_last(ii) = Chr(long_buff(202 + (ii * 120))) & Chr(long_buff(204 + (ii * 120))) & Chr(long_buff(205 + (ii * 120))) & Chr(long_buff(206 + (ii * 120))) & Chr(long_buff(207 + (ii * 120))) & Chr(long_buff(208 + (ii * 120)))
        Next ii

    outp_mdl.std_data_output
  
    Else
        'MsgBox "OpenPipe : NG"
         
    End If
  
    bRet = ClosePipe()
    If bRet = False Then
        'MsgBox "ClosePipe : NG"
    End If
       
End Sub

Public Sub sing_mem_start()
Dim buff(10) As Byte
'// USB_REQ_MEMMODE_CONT |fffd|P|fffd||183||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|f|fffd|[|fffd|^|fffd|o|fffd|^
    mem_exit_flg = False
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_ENDP, SHORT_TR_NG, USB_REQ_MEMMODE_CONT, USB_VAL_MEMCONT_SING, 0, USB_LEN_MEMCONT_SING, buff(0))
    
    If usb_error(usb_len) = True Then
        mem_exit_flg = True
        Exit Sub
    End If
    mem_data_count = Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6))
    main_select_frm.mem_number_lbl.Caption = mem_data_count
End Sub

Public Sub cont_mem_start()
Dim buff(0) As Byte
'// USB_REQ_MEMMODE_CONT |fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|J|fffd|n
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_MEMMODE_CONT, USB_VAL_MEMCONT_START, 0, USB_LEN_MEMCONT_START, buff(0))
    
    mem_exit_flg = False
    If usb_error(usb_len) = True Then
        mem_exit_flg = True
        Exit Sub
    End If
    
End Sub

Public Sub cont_mem_stop()
'// USB_REQ_MEMMODE_CONT |fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|I|fffd||fffd|
    Dim buff(10) As Byte
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_MEMMODE_CONT, USB_VAL_MEMCONT_STOP, 0, USB_LEN_MEMCONT_STOP, buff(0))
    
    If usb_len = -1 Then
        mem_number_read
        mem_exit_flg = True
        Exit Sub
    End If
    'On Error GoTo FULLDATA
    mem_data_count = Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6))
    main_select_frm.mem_number_lbl.Caption = mem_data_count
    Exit Sub

'FULLDATA:
    'MsgBox "|fffd||635e||fffd||fffd||fffd||fffd||fffd||fffd||fffd|E|fffd||142||fffd||fffd|B" & vbCr, vbOKOnly + vbExclamation, "|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|USB"
    'mem_data_count = 1000
    'main_select_frm.mem_number_lbl.Caption = mem_data_count
End Sub

Public Sub std_mem_start()
'// USB_REQ_MEMMODE_CONT |fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|J|fffd|n
Dim buff(0) As Byte
    mem_exit_flg = False
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_MEMMODE_CONT, USB_VAL_MEMNORM_START, 0, USB_LEN_MEMNORM_START, buff(0))
    If usb_error(usb_len) = True Then
        mem_exit_flg = True
        Exit Sub
    End If
End Sub
Public Sub std_mem_stop()
'// USB_REQ_MEMMODE_CONT |fffd|W|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd|v|fffd||fffd||fffd|I|fffd||fffd|
    Dim buff(10) As Byte
    usb_len = ControlTransfer(CONTROL_IN, REQ_TYPE_VENDOR, TARGET_DEVICE, SHORT_TR_NG, USB_REQ_MEMMODE_CONT, USB_VAL_MEMNORM_STOP, 0, USB_LEN_MEMNORM_STOP, buff(0))
    
    If usb_len = -1 Then
        mem_number_read
        mem_exit_flg = True
        Exit Sub
    End If
    mem_data_count = Chr(buff(3)) & Chr(buff(4)) & Chr(buff(5)) & Chr(buff(6))
    main_select_frm.mem_number_lbl.Caption = mem_data_count
End Sub


Public Function usb_error(usb_len_value As Long) As Boolean
    usb_error = False
    If usb_len_value = -1 Then
        MsgBox text(42) & Chr(13) & text(40), vbOKOnly + vbExclamation, XLANAME_K + ".usb_error()"
        main_select_frm.State.Caption = text(42)
        main_select_frm.State.BackColor = &HFF&
        usb_error = True
    End If
End Function

Attribute VB_Name = "usbcommom_mdl"
Option Explicit

'**************************
'   |fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd||fffd||50b||fffd||fffd|L|fffd||8414|
'**************************

Public Const CONTROL_MASK = 1             ' |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd|In/Out |fffd|}|fffd|X|fffd|N
Public Const CONTROL_IN = 0              '|fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd|In  (Device -> Host)
Public Const CONTROL_OUT = 1              ' |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd|Out (Host -> Device)

Public Const REQ_TYPE_MASK = 2            '// |fffd||fffd||fffd|N|fffd|G|fffd|X|fffd|g|fffd|^|fffd|C|fffd|v|fffd|}|fffd|X|fffd|N
Public Const REQ_TYPE_CLASS = 0          '// |fffd|N|fffd||fffd||fffd|X|fffd||fffd||fffd|N|fffd|G|fffd|X|fffd|g
Public Const REQ_TYPE_VENDOR = 2          '// |fffd|x|fffd||fffd||fffd|_|fffd||fffd||fffd|N|fffd|G|fffd|X|fffd|g

Public Const TARGET_DEVICE = 0            '// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|]|fffd||fffd||fffd||fffd|F|fffd|f|fffd|o|fffd|C|fffd|X
Public Const TARGET_INTERFACE = 1         '// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|]|fffd||fffd||fffd||fffd|F|fffd|C|fffd||fffd||fffd|^|fffd|[|fffd|t|fffd|F|fffd|C|fffd|X
Public Const TARGET_ENDP = 2              '// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|]|fffd||fffd||fffd||fffd|F|fffd|G|fffd||fffd||fffd|h|fffd|||fffd|C|fffd||fffd||fffd|g
Public Const TARGET_OTHER = 3             '// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|]|fffd||fffd||fffd||fffd|F|fffd||fffd||fffd||311||fffd|

Public Const SHORT_TR_NG = 0              '// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd|In|fffd||30e||fffd|M|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||202||fffd|
Public Const SHORT_TR_OK = 1              '// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd|In|fffd||30e||fffd|M|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd|

Public Const CONTROL_ERR = -1             '// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd||308||64f||fffd|I|fffd||fffd|
Public Const PIPE_READ_ERR = -1           '// |fffd|p|fffd|C|fffd|v|fffd||fffd||fffd||fffd||313||1c2||74d||fffd||fffd||742||308||64f||fffd|I|fffd||fffd|
Public Const CONTROL_DATA_MAX = 64       '// |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd|]|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||30d||151||54b7|
Public Const CONTROL_REQ_LEN = (CONTROL_DATA_MAX + 12)
                                   ' // |fffd|R|fffd||fffd||fffd|g|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd|N|fffd|G|fffd|X|fffd|g|fffd|f|fffd|[|fffd|^|fffd||fffd|




INQUEST-PP=macro
