Attribute VB_Name = "AutoBerechnungen"
'*      Letzte Aenderung am : 12.03.2012 durch V. Schmidt
'*
'*

Option Explicit

Public Sub HoeheBerechnen()
Dim i               As Long
Dim j               As Long
Dim i_LeereAnlOrtHe As Long
Dim Spalte_TYPICAL  As Long
Dim Spalte_ANZAHL   As Long
Dim Spalte_ANL      As Long
Dim Spalte_ORT      As Long
Dim Spalte_HE       As Long
Dim Spalte_HOEHE    As Long
Dim aktANL          As String
Dim aktORT          As String
Dim aktHE           As String
Dim aktHE_fest      As String
Dim aktHE_var       As String
Dim aktHOEHE        As String
Dim aktFeldTyp      As String

Dim vorZeileNr      As Long
Dim vorANL          As String
Dim vorORT          As String
Dim vorHE           As String
Dim vorHE_fest      As String
Dim vorHE_var       As String
Dim vorHOEHE        As String
Dim vorHOEHE_fest   As String
Dim vorFeldTyp      As String

Dim istFehler_ANL   As Boolean
Dim istFehler_ORT   As Boolean
Dim istFehler_HE    As Boolean

Dim soll_HE         As String
Dim TempMerker1
Dim ZeileNr         As Long
Dim LetzteZeile     As Long
Dim LetzteSpalte    As Long
Dim Blatt           As Worksheet

'Nur dann berechnen, wenn Datei activ ist
If Left(ActiveWindow.Caption, Len(ThisWorkbook.Name)) <> ThisWorkbook.Name Then Exit Sub

Set Blatt = ThisWorkbook.Sheets("Motorliste")

'Bereiche initialisieren
LetzteZeile = Blatt.UsedRange.Rows.Count
LetzteSpalte = Blatt.UsedRange.Columns.Count

'Spalten ANLAGE, ORT, HE finden
For i = 1 To LetzteSpalte
    Select Case UCase(Trim(Blatt.Cells(1, i).Text))
        Case "TYPICAL": Spalte_TYPICAL = i
        Case "ANLAGE": Spalte_ANL = i
        Case "ORT": Spalte_ORT = i
        Case "HE": Spalte_HE = i
        Case "HOEHE": Spalte_HOEHE = i
        Case "ANZAHL": Spalte_ANZAHL = i
    End Select
Next i
If Spalte_ANL = 0 Or Spalte_ORT = 0 Or Spalte_HE = 0 Or Spalte_HOEHE = 0 Then Exit Sub

Application.ScreenUpdating = False

'Hauptschleife
For ZeileNr = 2 To LetzteZeile
    'Statusmeldung
    TempMerker1 = ZeileNr / LetzteZeile
    TempMerker1 = Trim(Str(Round(TempMerker1 * 100)))
    TempMerker1 = "=ANLAGE +ORT.HE Pruefung! " & TempMerker1 & "% fertig!"
    Application.StatusBar = TempMerker1

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    istFehler_ANL = False
    istFehler_ORT = False
    istFehler_HE = False

    aktANL = Trim(Blatt.Cells(ZeileNr, Spalte_ANL).Text)
    aktORT = Trim(Blatt.Cells(ZeileNr, Spalte_ORT).Text)
    aktHOEHE = Trim(Blatt.Cells(ZeileNr, Spalte_HOEHE).Text)
    aktHE = Trim(Blatt.Cells(ZeileNr, Spalte_HE).Text)

    'Bei 30 leeren Zeilen --> beenden
    If LetzteZeile > 10000 Then
        If aktANL = "" And aktORT = "" And aktHOEHE = "" And aktHE = "" Then
            i_LeereAnlOrtHe = i_LeereAnlOrtHe + 1
            If i_LeereAnlOrtHe > 30 Then Exit For
        Else
            i_LeereAnlOrtHe = 0
        End If
    End If

    'Vorzeile finden, wenn HOEHE="Z...." --> Zeile zaehlt NICHT!
    If ZeileNr > 2 Then
        For i = ZeileNr - 1 To 2 Step -1
            vorHOEHE = Trim(Blatt.Cells(i, Spalte_HOEHE).Text)
            If Len(vorHOEHE) = 0 Then Exit For
            If UCase(Left(vorHOEHE, 1)) <> "X" And _
               UCase(Left(vorHOEHE, 1)) <> "Y" And _
               UCase(Left(vorHOEHE, 1)) <> "Z" Then Exit For
        Next i

        vorZeileNr = i
        vorANL = Trim(Blatt.Cells(vorZeileNr, Spalte_ANL).Text)
        vorORT = Trim(Blatt.Cells(vorZeileNr, Spalte_ORT).Text)
        vorHE = Trim(Blatt.Cells(vorZeileNr, Spalte_HE).Text)
        vorHE = UCase(vorHE)
    End If
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    'vorHE Auf festes(links) und variables(rechts) Teile aufteilen
    vorHE_fest = ""
    vorHE_var = ""
    For i = 1 To Len(vorHE)
        Select Case Asc(Mid(vorHE, i, 1))
            Case 48 To 57   'Nummer
                vorHE_fest = vorHE_fest & Mid(vorHE, i, 1)
            Case Else       'Keine Nummer, Graenze gefunden
                Exit For
        End Select
    Next i
    i = i - 1
    vorHE_fest = Left(vorHE, i)
    If vorHE_fest <> vorHE Then vorHE_var = Right(vorHE, Len(vorHE) - i)

    'aktHE Auf festes(links) und variables(rechts) Teile aufteilen
    aktHE_fest = ""
    aktHE_var = ""
    For i = 1 To Len(aktHE)
        Select Case Asc(Mid(aktHE, i, 1))
            Case 48 To 57   'Nummer
                aktHE_fest = aktHE_fest & Mid(aktHE, i, 1)
            Case Else       'Keine Nummer, Graenze gefunden
                Exit For
        End Select
    Next i
    i = i - 1
    aktHE_fest = Left(aktHE, i)
    If aktHE_fest <> aktHE Then aktHE_var = Right(aktHE, Len(aktHE) - i)
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    TempMerker1 = Left(aktHOEHE, 2)
    If TempMerker1 = "MD" Or TempMerker1 = "DD" Or TempMerker1 = "SD" Or _
       TempMerker1 = "PD" Or TempMerker1 = "FD" Or TempMerker1 = "CD" Then
        '1. Feld
        vorFeldTyp = aktFeldTyp
        If Left(aktHOEHE, 4) = "SDMD" Then
            aktFeldTyp = "SDMD"
        Else
            aktFeldTyp = TempMerker1
        End If
            If aktANL = vorANL And aktORT = vorORT Then
                'Fehler: 2x Felder auf gleicher Hoehe
                istFehler_ANL = True
                istFehler_ORT = True
            Else
                'Kein Fehler bei ANLAGE, ORT
            End If
        If aktHE = "00" Then
            'Kein Fehler
        Else
            'Fehler: Feld nicht auf Hoehe "00"
            istFehler_HE = True
        End If

    ElseIf aktHOEHE = "" Or Left(aktHOEHE, 1) = "X" Or Left(aktHOEHE, 1) = "Y" Or Left(aktHOEHE, 1) = "Z" Then
            'Keine Fehler: Beliebige ANLAGE/ORT/HE bei HOEHE "Z...", "X...", "Y..."

    Else
        TempMerker1 = Left(aktHOEHE, 1)
        If aktHOEHE = "Q4" Or aktHOEHE = "Q0" Or aktHOEHE = "H4" Or _
           aktHOEHE = "H0" Or aktHOEHE = "M0" Or aktHOEHE = "F0" Or _
           aktHOEHE = "P0" Or aktHOEHE = "N0" Then      ' Or aktHOEHE = "H4"
            '2. Q-Einschub, Einzelabgang der Modulplatte
            If aktANL <> vorANL Then
                'Fehler: neue Anlage beginnt nicht mit neuem Feld
                istFehler_ANL = True
            Else
                'Kein Fehler bei ANLAGE
            End If
                    If aktORT <> vorORT Then
                        'Fehler: neuer ORT beginnt nicht mit neuem Feld
                        istFehler_ORT = True
                    Else
                        'Kein Fehler bei ORT
                    End If

            If aktHE_fest <> vorHE_fest Then
                'Fehler: HE-Numm-Teile bei vorHE und aktHE sind nicht identisch
                istFehler_HE = True
            ElseIf Len(aktHE_var) <> 1 Then
'                If aktHOEHE = "Q4" Or aktHOEHE = "H4" Or aktHOEHE = "Q0" Or aktHOEHE = "H0" Or aktHOEHE = "M0" Then
                If aktHOEHE = "Q4" Or aktHOEHE = "H4" Or aktHOEHE = "M0" Then
                    'Fehler: HE-Buchst-Teil laenger als 1 Buchstabe oder keine Buchstabe
                    istFehler_HE = True
                End If
            ElseIf Len(vorHE_var) <> 1 Then
                'HE = "06" oder "06AB"
                If Len(vorHE_var) = 0 And aktHE_var = "A" Then
                    'Kein Fehler bei HE, 1. Abgang/Q-Einschub --> z.B. "06A"
                Else
                    'Fehler: HE-Buchst-Teil beim 1. Abgang/Q-Einschub <> "A"
                    istFehler_HE = True
                End If
            ElseIf vorHOEHE = "H4" Then
                'Doppel-Q-Einschub auf HE "C"
                If vorHE_var = "A" And aktHE_var = "C" And aktHOEHE = "H4" Then
                    'Kein Fehler bei HE, 2. Abgang/Doppel-Q-Einschub --> z.B. "06C"
                Else
                    'Fehler: HE-Buchst-Teil beim 2. Abgang/Doppel-Q-Einschub <> "C" oder kein Doppel-Q
                    istFehler_HE = True
                End If
            ElseIf aktHOEHE = "H4" Then
                'Fehler: Doppel-Q-Einschub mit einfachem zusammen
                istFehler_HE = True

            Else
                If Asc(aktHE_var) = Asc(vorHE_var) + 1 Then
                    'Kein Fehler bei HE
                Else
                    'Fehler: Buchstabe bei HE falsch
                    istFehler_HE = True
                End If
            End If

        ElseIf TempMerker1 = "N" Or TempMerker1 = "M" Or TempMerker1 = "S" Or _
                                    TempMerker1 = "P" Or TempMerker1 = "F" Then
            '3. N-Einschub, Modulplatte, Sicherungsleiste, Festeinbau
            If aktANL <> vorANL Then
                'Fehler: neue Anlage beginnt nicht mit neuem Feld
                istFehler_ANL = True
            Else
                'Kein Fehler bei ANLAGE
            End If
                    If aktORT <> vorORT Then
                        'Fehler: neuer ORT beginnt nicht mit neuem Feld
                        istFehler_ORT = True
                    Else
                        'Kein Fehler bei ORT
                    End If

            'vorHOEHE festes Teil (links)
            vorHOEHE_fest = ""
            For i = 1 To Len(vorHOEHE)
                Select Case Asc(Mid(vorHOEHE, i, 1))
                    Case 48 To 57   'Nummer, Graenze gefunden
                        Exit For
                    Case Else       'Keine Nummer
                        vorHOEHE_fest = vorHOEHE_fest & Mid(vorHOEHE, i, 1)
                End Select
            Next i

            If Left(aktHOEHE, 1) = "F" Then
                'Bei Festeinbau "F" nur das Feldtyp auf "FD" kontrollieren
                If aktFeldTyp <> "FD" Then
                    istFehler_HE = True
                End If
            Else
                'HE-Berechnung (nicht bei Festeinbau "F")
                soll_HE = Right(aktHOEHE, Len(aktHOEHE) - 1)
                Select Case Left(vorHOEHE, 2)
                    Case "MD", "DD", "PD", "SD", "CD"  ', "FD"
                        'Bei MD-Feld automatisch die letzte 2 Ziffern addieren,
                        'wenn 2TA-Tuer oben nicht in der Motorliste erscheinen soll
                        vorHOEHE = Right(vorHOEHE, Len(vorHOEHE) - Len(vorHOEHE_fest))

                        If vorHOEHE > 100 Then
                            '"MD1010" oder "MD1000" --> automatisch die letzte 2 Ziffern addieren
                            vorHOEHE = Right(vorHOEHE, 2)
                            soll_HE = Val(soll_HE) + Val(vorHOEHE)
                        End If
                    Case Else
                        If aktFeldTyp = "SDMD" Then
                            If vorHOEHE_fest = "S" And Left(aktHOEHE, 1) = "S" Then
                                'SD-Teil beim SDMD-Feld
                                soll_HE = Val(soll_HE) + Val(vorHE_fest)
                            Else
                                'MD-Teil beim SDMD-Feld
                                'SD-HE umrechnen in MD-HE, HOEHE addieren und zurueck zu SD-HE umrechnen
                                TempMerker1 = Round(vorHE_fest * 25 / 70)
                                TempMerker1 = TempMerker1 + Val(soll_HE)
                                soll_HE = Round(TempMerker1 * 70 / 25)

                                If vorHOEHE_fest = "S" Then
                                    'Graenze SD-MD beim SDMD-Feld
                                    If vorHE_fest = "31" Then
                                        'Bekannte Graenze SD-MD bei MD-lastig
                                        soll_HE = Val(soll_HE) + 3  'Zw.Blende
                                    ElseIf vorHE_fest = "51" Then
                                        'Bekannte Graenze SD-MD bei SD-lastig
                                        soll_HE = Val(soll_HE) + 3  'Zw.Blende
                                    Else
                                        'Graenzen SD-MD ist nicht bekannt --> Fehler
                                        istFehler_HE = True
                                    End If
                                End If
                            End If
                        Else
                            'Standart MD-Feld
                            soll_HE = Val(soll_HE) + Val(vorHE_fest)
                        End If
                End Select

                soll_HE = Format(soll_HE, "00")
                If aktHE = soll_HE Then
                            'Kein Fehler bei HE
                ElseIf aktHE = soll_HE & "A" Then
                    Select Case Left(aktHOEHE, 1)
                        Case "M", "P", "F"
                            'Kein Fehler bei HE, faengt direkt mit z.B. "12A"
                        Case Else
                            'Fehler bei HE: faengt direkt mit z.B. "06A", Obertypical fehlt
                            istFehler_HE = True
                    End Select
                Else
                            'Fehler bei HE: aktHE <> soll_HE
                            istFehler_HE = True
                End If
            End If
        Else
            '4. Keine Standart-HOEHE
            'Fehler bei ANLAGE/ORT/HE: HOEHE undefiniert, kein Standart
            istFehler_ANL = True
            istFehler_ORT = True
            istFehler_HE = True
        End If
    End If

    'Pruefungen, ob Vorzeile richtig abgeschlossen (MD-Feld-->HE31; Q-Einschub-->HExxD oder HExxC)
    If istFehler_ANL And istFehler_ORT And istFehler_HE Then
        'Alle fehlerhaft --> keine weitere Pruefungen notwendig, direkt formatieren
    ElseIf aktANL = vorANL And aktORT = vorORT Then
        'Gleiches Feld, Q-Adapterplatte pruefen
        If vorHOEHE = "Q4" And aktHOEHE <> "Q4" Then
            If vorHE_var <> "D" Then
                'Q-Adapterplatte nicht mit "D" abgeschlossen
                istFehler_HE = True
            End If
        ElseIf vorHOEHE = "H4" And aktHOEHE <> "H4" Then
            If vorHE_var <> "C" Then
                'Q-Adapterplatte mit Doppel-Q-Einsch. nicht mit "C" abgeschlossen
                istFehler_HE = True
            End If
        End If
    Else
        'Neues Feld oder Tabellenende, Abschluss des vorherigen Feldes pruefen
        If vorFeldTyp = "MD" Then
            If vorHE_fest <> "31" Then
                'MD-Feld nicht follstaendig
                istFehler_ANL = True
                istFehler_ORT = True
                istFehler_HE = True
            End If
        ElseIf vorFeldTyp = "SDMD" Then
            If vorHE_fest <> "87" And vorHE_fest <> "86" Then
                'SDMD-Feld nicht follstaendig
                istFehler_ANL = True
                istFehler_ORT = True
                istFehler_HE = True
            End If
        ElseIf vorFeldTyp = "SD" Then
            If vorHE_fest < "69" Or vorHE_fest > "87" Then
                'SD-Feld nicht follstaendig
                istFehler_ANL = True
                istFehler_ORT = True
                istFehler_HE = True
            End If
        End If
    End If

    'Formatieren
    Call ZelleFormatieren(Blatt.Cells(ZeileNr, Spalte_ANL), istFehler_ANL)
    Call ZelleFormatieren(Blatt.Cells(ZeileNr, Spalte_ORT), istFehler_ORT)
    Call ZelleFormatieren(Blatt.Cells(ZeileNr, Spalte_HE), istFehler_HE)

    'Typical markieren, wenn in der Typicalliste "0-FEHLT"
    If Spalte_TYPICAL > 0 And Spalte_ANZAHL > 0 Then
        TempMerker1 = Trim(Blatt.Cells(ZeileNr, Spalte_ANZAHL).Text)
        If Len(TempMerker1) > 0 Then
            If Left(TempMerker1, 1) = "0" Then
                Call ZelleFormatieren(Blatt.Cells(ZeileNr, Spalte_TYPICAL), True)
            Else
                Call ZelleFormatieren(Blatt.Cells(ZeileNr, Spalte_TYPICAL), False)
            End If
        End If
    End If

Naechst:
Next ZeileNr
'ENDE Hauptschleife

Set Blatt = Nothing
Application.StatusBar = False
Application.ScreenUpdating = True

End Sub

Private Sub ZelleFormatieren(Zelle As Range, FormatAlsFehler As Boolean)
With Zelle
    If FormatAlsFehler Then
        .Interior.ColorIndex = 4
        .Font.ColorIndex = 3
        .Font.Bold = True
        .Font.Italic = True
    Else
        .Interior.ColorIndex = xlNone
        .Font.ColorIndex = 0
        .Font.Bold = False
        .Font.Italic = False
    End If
End With

End Sub

Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'*      Letzte Aenderung am : 12.03.2012 durch V. Schmidt
'*
'*

Private Sub Workbook_BeforeClose(Abbrechen As Boolean)
    Call ProjektFavoriten_hinzufuehgen
    Call MenueEnd
End Sub

Private Sub Workbook_Open()
    Dim tmpStr1     As String
    Application.Calculation = xlCalculationManual
    Call Neue_Motorliste
    Call MenueStart

    tmpStr1 = Application.UserName
    If InStr(Trim(tmpStr1), " ") = 0 Then
        tmpStr1 = "Bitte Vorname und Nachname unter"
        tmpStr1 = tmpStr1 & vbLf & Chr(34) & "Excel Optionen" & Chr(34) & " -> " & Chr(34) & "Benutzername" & Chr(34)
        tmpStr1 = tmpStr1 & vbLf & "eintragen"
        Call Auto_MsgBox(tmpStr1, 3, "Benutzerdaten eintragen:", vbExclamation)
    ElseIf InStr(Trim(tmpStr1), " ") = 0 Then
    End If
End Sub

Private Sub Workbook_Activate()
    Call Button_ANL_Berechnung_Enable
End Sub

Private Sub Workbook_Deactivate()
    Call Button_ANL_Berechnung_Disable
End Sub


Attribute VB_Name = "Menue"
'*      Letzte Aenderung am : 12.03.2012 durch V. Schmidt
'*
'*

Option Explicit

Private Const cMenuText1    As String = "ANL/ORT/HE-Pruefungen mit Neuberechnung durchfuehren!"
Private Const cMenuText2    As String = "ANL/ORT/HE-Pruefungen starten!"
Private Const cTrenn_Menue  As String = "+-*/"

Public Sub MenueStart()
    Dim ProjektNummer   As String
    Dim Wert            As String
    Dim Icon_Nr         As Long
    Dim i               As Long

    Icon_Nr = 1087  'JA
    On Error GoTo EndeMenue:
    If InStr(ThisWorkbook.Name, ".xls") = 0 Then GoTo EndeMenue:

    ProjektNummer = ThisWorkbook.Path
    Call Korrektur_Projektnummer(ProjektNummer)

    Call ProjektEinstellungen_Auslesen(cMenuText1, Wert)
    If Wert = "" Then
        Icon_Nr = 1087  'JA, Voreinstellung
    ElseIf InStr(LCase(Wert), "ja") > 0 Then
        Icon_Nr = 1087  'JA
    Else
        Icon_Nr = 1088  'NEIN
    End If

    Call Menue_Erstellen_Excel("Worksheet Menu Bar", "&Projektbearbeitung", _
                "Prj. " & ProjektNummer, cMenuText1, "AnlOrtHe_Berechnung_Umkehren", "", Icon_Nr)

    Call Menue_Erstellen_Excel("Worksheet Menu Bar", "&Projektbearbeitung", _
                "Prj. " & ProjektNummer, cMenuText2, "AnlOrtHe_Berechnung_Ausfuehren", "", 283)

EndeMenue:
End Sub

Public Sub MenueEnd()
    Dim ProjektNummer   As String
    Dim i               As Long

    On Error GoTo EndeMenue:
    If InStr(ThisWorkbook.Name, ".xls") = 0 Then GoTo EndeMenue:

    'Projektnummer feststellen
    ProjektNummer = ThisWorkbook.Path
    i = InStrRev(ProjektNummer, "\")
    i = Len(ProjektNummer) - i
    ProjektNummer = Right(ProjektNummer, i)

    'Projektnummer korrigieren
    For i = 1 To Len(ProjektNummer)
        Select Case Asc(Mid(ProjektNummer, i, 1))
            Case 48 To 57                               'Erlaubt: "0" bis "9" - Ziffern
            Case 65 To 90                               'Erlaubt: "A" bis "Z" - Gr. Buchstaben
            Case 97 To 122                              'Erlaubt: "a" bis "z" - Kl. Buchstaben
            Case Else                                   'Nicht Erlaubt: Sonderzeichen oder Leerzeichen
                ProjektNummer = Left(ProjektNummer, i)
                Exit For
        End Select
    Next i

    Call Menue_Loeschen_Excel("Worksheet Menu Bar", "&Projektbearbeitung", _
                "Prj. " & ProjektNummer, cMenuText1)
    Call Menue_Loeschen_Excel("Worksheet Menu Bar", "&Projektbearbeitung", _
                "Prj. " & ProjektNummer, cMenuText2)
EndeMenue:
End Sub

Private Sub Menue_Erstellen_Excel(ByVal MenueTyp, _
                                 ByVal MenueLevel_1 As String, _
                                 ByVal MenueLevel_2 As String, _
                                 ByVal MenueLevel_3 As String, _
                                 ByVal Makro As String, _
                                 ByVal Before_Popup_BeginGroup As String, _
                                 ByVal Smile)

'Trennzeichen bei Before_Popup_BeginGroup: "|"

'MenueTyp = "Worksheet Menu Bar"  --> Excel-Menueleiste
'MenueTyp = "Cell"                --> KontekstMenue fuer Zellen
'MenueTyp = "Row"                 --> KontekstMenue fuer Zeilen
'MenueTyp = "Column"              --> KontekstMenue fuer Spalten
'MenueTyp = "System"              --> System-KontekstMenue (oben links)
'MenueTyp = "Toolbar List"        --> KontekstMenue fuer Munue- / Symbolleisten
'MenueTyp = "Ply"                 --> KontekstMenue fuer Registerkarten

'Deklarationen fuer MenuesErstellung:
Dim Menuepunkt_vorhanden    As Boolean
Dim GesuchterWert           As String
Dim Before                  As String
Dim Popup                   As Double
Dim BeginGroup              As Double
Dim Menues                  As Object
Dim NeuesMenue              As Object

Dim tmpDB()                 As String
Dim Level()                 As Object
Dim Menue()                 As String
Dim i                       As Byte
Dim j                       As Byte
Dim Before_Nr               As Byte

If IsError(MenueLevel_2) Then MenueLevel_2 = ""
If IsError(MenueLevel_3) Then MenueLevel_3 = ""
If IsError(Smile) Then Smile = 0
If IsError(MenueTyp) Then MenueTyp = "Worksheet Menu Bar"
If Len(MenueTyp) = 0 Then MenueTyp = "Worksheet Menu Bar"

If InStr(1, Before_Popup_BeginGroup, "BeginGroup") > 0 Then BeginGroup = True
If InStr(1, Before_Popup_BeginGroup, "Popup") > 0 Then Popup = True
Before = Replace(Before_Popup_BeginGroup, "BeginGroup", "")
Before = Replace(Before, "Popup", "")
Before = Replace(Before, "|", "")

tmpDB = Split(MenueLevel_3, cTrenn_Menue)
j = UBound(tmpDB) + 1
ReDim Level(j + 4)
ReDim Menue(j + 4)

Menue(0) = MenueTyp
Menue(1) = MenueLevel_1
Menue(2) = MenueLevel_2
Menue(3) = MenueLevel_3
If j > 0 Then
    For i = 0 To j - 1
        Menue(i + 3) = tmpDB(i)
    Next i
End If

'***************************************************************************************
Set Level(0) = Application.CommandBars(Menue(0)).Controls
For i = 1 To UBound(Menue) - 1
    If Len(Menue(i)) > 0 Then
        GesuchterWert = Menue(i)
    Else: Exit Sub
    End If

    'Ist gewuenschtes Menue (MenueLevel_i) vorhanden?
    Menuepunkt_vorhanden = False
    j = 1
    Before_Nr = 0
    For Each Menues In Level(i - 1)
        If UCase(Menues.Caption) = UCase(GesuchterWert) Then
            Menuepunkt_vorhanden = True
            Exit For
        End If

        If Replace(UCase(Menues.Caption), "&", "") = Replace(UCase(Before), "&", "") Then
            Before_Nr = j
        End If
        j = j + 1
    Next Menues

    If Not Menuepunkt_vorhanden Then
        'gewuenschtes Menue (MenueLevel_i) erstellen
        If Len(Menue(i + 1)) > 0 Then
            'gewuenschtes Menue (MenueLevel_i) erstellen
            Set NeuesMenue = Level(i - 1).Add(Type:=msoControlPopup, Temporary:=True)
            NeuesMenue.Caption = Menue(i)
        ElseIf Popup Then
            'gewuenschtes Menue (MenueLevel_i) erstellen
            If Before = "" Then
                Set NeuesMenue = Level(i - 1).Add(Type:=msoControlPopup, Temporary:=True)
            Else
                Set NeuesMenue = Level(i - 1).Add(Type:=msoControlPopup, Before:=Before_Nr, Temporary:=True)
            End If
            NeuesMenue.Caption = Menue(i)
            NeuesMenue.BeginGroup = BeginGroup
            Exit Sub
        Else
            'gewuenschtes MenueBefehl (MenueLevel_i) erstellen
            If Before = "" Then
                Set NeuesMenue = Level(i - 1).Add(Type:=msoControlButton, Temporary:=True)
            Else
                Set NeuesMenue = Level(i - 1).Add(Type:=msoControlButton, Before:=Before_Nr, Temporary:=True)
            End If
            NeuesMenue.Caption = Menue(i)
            NeuesMenue.OnAction = Makro
            NeuesMenue.FaceId = Smile
            NeuesMenue.BeginGroup = BeginGroup
            Exit Sub
        End If
    End If

    If Len(Menue(i + 1)) > 0 Then
        Set Level(i) = Level(i - 1)(Menue(i)).Controls
    End If
Next i
'***************************************************************************************

End Sub

Private Sub Menue_Loeschen_Excel(ByVal MenueTyp, _
                                ByVal MenueLevel_1 As String, _
                                ByVal MenueLevel_2, _
                                ByVal MenueLevel_3)

'MenueTyp = "Worksheet Menu Bar"  --> Excel-Menueleiste
'MenueTyp = "Cell"                --> KontekstMenue fuer Zellen
'MenueTyp = "Row"                 --> KontekstMenue fuer Zeilen
'MenueTyp = "Column"              --> KontekstMenue fuer Spalten
'MenueTyp = "System"              --> System-KontekstMenue (oben links)
'MenueTyp = "Toolbar List"        --> KontekstMenue fuer Munue- / Symbolleisten
'MenueTyp = "Ply"                 --> KontekstMenue fuer Registerkarten

Dim Menuepunkt_vorhanden    As Boolean
Dim GesuchterWert           As String
Dim Menues                  As Object

Dim tmpDB()                 As String
Dim Level()                 As Object
Dim Menue()                 As String
Dim j                       As Byte
Dim i                       As Byte
Dim i2                      As Integer

If IsError(MenueLevel_2) Then MenueLevel_2 = ""
If IsError(MenueLevel_3) Then MenueLevel_3 = ""
If IsError(MenueTyp) Then MenueTyp = "Worksheet Menu Bar"
If Len(MenueTyp) = 0 Then MenueTyp = "Worksheet Menu Bar"


tmpDB = Split(MenueLevel_3, cTrenn_Menue)
j = UBound(tmpDB) + 1
ReDim Level(j + 4)
ReDim Menue(j + 4)

Menue(0) = MenueTyp
Menue(1) = MenueLevel_1
Menue(2) = MenueLevel_2
Menue(3) = MenueLevel_3
If j > 0 Then
    For i = 0 To j - 1
        Menue(i + 3) = tmpDB(i)
    Next i
End If

'***************************************************************************************
Set Level(0) = Application.CommandBars(Menue(0)).Controls

For i = 1 To UBound(Menue) - 1
    GesuchterWert = Menue(i)

    If Len(Menue(i)) > 0 Then
        'Ist gewuenschtes Menue (MenueLevel_i) vorhanden?
        Menuepunkt_vorhanden = False
        For Each Menues In Level(i - 1)
            If UCase(Menues.Caption) = UCase(GesuchterWert) Or _
                Replace(UCase(Menues.Caption), "&", "") = Replace(UCase(GesuchterWert), "&", "") Then
                Menuepunkt_vorhanden = True
                Exit For
            End If
        Next Menues
        If Not Menuepunkt_vorhanden Then Exit Sub

        If Level(i - 1)(Menue(i)).Type = msoControlPopup And Len(Menue(i + 1)) > 0 Then
            Set Level(i) = Level(i - 1)(Menue(i)).Controls
        Else
            Set Level(i) = Level(i - 1)(Menue(i))
            Exit For
        End If
    End If
Next i

Delete:
If i > 1 Then
    'LEVEL i - 1 loeschen
    Level(i).Delete
    'War das ein letztes Menuepunkt, dann Menulevel auch loeschen
    For i2 = i To 2 Step -1
        If Level(i2 - 1).Count = 0 Then
            Level(i2 - 2)(Menue(i2 - 1)).Delete
        Else: Exit For
        End If
    Next i2
End If
End Sub

'*************************************************************************************
Private Sub AnlOrtHe_Berechnung_Umkehren()
    Dim ProjektNummer   As String
    Dim MenuText        As String
    Dim Icon_Nr         As Long
    Dim i               As Long
    Dim Menues          As Object

    MenuText = cMenuText1

    'Projektnummer feststellen
    ProjektNummer = ThisWorkbook.Path

    'Projektnummer korrigieren
    Call Korrektur_Projektnummer(ProjektNummer)

    On Error GoTo Ende:
    Set Menues = Application.CommandBars("Worksheet Menu Bar").Controls("&Projektbearbeitung"). _
                 Controls("Prj. " & ProjektNummer)

        For i = 1 To Menues.Controls.Count
            If Menues.Controls(i).Caption = MenuText Then Exit For
        Next i

        If i = Menues.Controls.Count + 1 Then GoTo Ende:
        Icon_Nr = Menues.Controls(i).FaceId
        If Icon_Nr = 1087 Then
            'JA eingestellt --> umkeeren auf NEIN
            Icon_Nr = 1088
            Call ProjektEinstellungen_Aktualisieren(MenuText, "nein")
            MenuText = "Die Einstellung wurde geaendert!"
            MenuText = MenuText & vbLf & "ANL/ORT/HE-Pruefungen werden bei Neuberechnung (F9)"
            MenuText = MenuText & vbLf & "NICHT durchgefuehrt"
            Call Auto_MsgBox(MenuText, 5, "Einstellung aktualisiert!", vbExclamation)
        ElseIf Icon_Nr = 1088 Then
            'NEIN eingestellt --> umkeeren auf JA
            Icon_Nr = 1087
            Call ProjektEinstellungen_Aktualisieren(MenuText, "ja")
            MenuText = "Die Einstellung wurde geaendert!"
            MenuText = MenuText & vbLf & "ANL/ORT/HE-Pruefungen werden bei Neuberechnung (F9)"
            MenuText = MenuText & vbLf & "durchgefuehrt"
            Call Auto_MsgBox(MenuText, 5, "Einstellung aktualisiert!", vbInformation)
        Else
            GoTo Ende:  'Fehler
        End If
        Menues.Controls(i).FaceId = Icon_Nr
Ende:
    Set Menues = Nothing
End Sub

Public Sub AnlOrtHe_Berechnung_Ausfuehren(Optional MitBedingung As Boolean)
    Dim ProjektNummer   As String
    Dim MenuText        As String
    Dim Icon_Nr         As Long
    Dim i               As Long
    Dim Menues          As Object

    If Not MitBedingung Then GoTo BerechnungStarten:

    MenuText = cMenuText1

    'Projektnummer feststellen
    ProjektNummer = ThisWorkbook.Path

    'Projektnummer korrigieren
    Call Korrektur_Projektnummer(ProjektNummer)

    On Error GoTo Ende:
    Set Menues = Application.CommandBars("Worksheet Menu Bar").Controls("&Projektbearbeitung"). _
                 Controls("Prj. " & ProjektNummer)

        For i = 1 To Menues.Controls.Count
            If Menues.Controls(i).Caption = MenuText Then Exit For
        Next i

        If i = Menues.Controls.Count + 1 Then GoTo Ende:
        Icon_Nr = Menues.Controls(i).FaceId
        If Icon_Nr = 1087 Then
            'JA eingestellt --> Berechnung starten!
BerechnungStarten:
            Call HoeheBerechnen
        End If
Ende:
    Set Menues = Nothing
End Sub

Public Sub Button_ANL_Berechnung_Enable()
    Dim ProjektNummer   As String
    Dim MenuText        As String
    Dim i               As Long
    Dim Menues          As Object

    MenuText = cMenuText2

    'Projektnummer feststellen
    ProjektNummer = ThisWorkbook.Path

    'Projektnummer korrigieren
    Call Korrektur_Projektnummer(ProjektNummer)

    On Error GoTo Ende:
    Set Menues = Application.CommandBars("Worksheet Menu Bar").Controls("&Projektbearbeitung"). _
                 Controls("Prj. " & ProjektNummer)

        For i = 1 To Menues.Controls.Count
            If Menues.Controls(i).Caption = MenuText Then Exit For
        Next i

        If i = Menues.Controls.Count + 1 Then GoTo Ende:
        Menues.Controls(i).Enabled = True
Ende:
    Set Menues = Nothing
End Sub

Public Sub Button_ANL_Berechnung_Disable()
    Dim ProjektNummer   As String
    Dim MenuText        As String
    Dim i               As Long
    Dim Menues          As Object

    MenuText = cMenuText2

    'Projektnummer feststellen
    ProjektNummer = ThisWorkbook.Path

    'Projektnummer korrigieren
    Call Korrektur_Projektnummer(ProjektNummer)

    On Error GoTo Ende:
    Set Menues = Application.CommandBars("Worksheet Menu Bar").Controls("&Projektbearbeitung"). _
                 Controls("Prj. " & ProjektNummer)

        For i = 1 To Menues.Controls.Count
            If Menues.Controls(i).Caption = MenuText Then Exit For
        Next i

        If i = Menues.Controls.Count + 1 Then GoTo Ende:
        Menues.Controls(i).Enabled = False
Ende:
    Set Menues = Nothing
End Sub





Attribute VB_Name = "Programme"
'*      Letzte Aenderung am : 12.03.2012 durch V. Schmidt
'*
'*

Option Explicit

Private cFormel             As clsFormel
Private Const cDateiName    As String = "V_ProjektEinstellungen.vpe"

Public Sub Neue_Motorliste()
    On Error GoTo ueberspringen:
    If ThisWorkbook.Path = "" Or InStr(ThisWorkbook.Name, ".xls") = 0 Then UserForm1.Show
ueberspringen:
End Sub

Public Sub ProjektFavoriten_hinzufuehgen()
    'Neues Projekt zu Datei
    '"D:\Programme\Microsoft Office\Office12\EnergonMakros\Projekt-Favoriten.ini"
    'hinzufuehgen
        
    Dim Pfad        As String
    Dim PPfad       As String
    Dim ProjNumm    As String
    Dim DateiName   As String
    Dim DB_PrjNr()  As String
    Dim tmp_DB1()   As String
    Dim i           As Long
    Dim tmpVar1

    On Error GoTo Ende:
    Set cFormel = New clsFormel

    PPfad = cFormel.ProjektePfad
    If Left(ThisWorkbook.Path, Len(PPfad)) = PPfad And _
       InStr(ThisWorkbook.Name, ".xls") > 0 And _
       UCase(Left(ThisWorkbook.Name, 3)) = "ANL" Then
        
        'Datei mit Einstellungen einlesen
        Pfad = Environ("Path")
        tmp_DB1 = Split(Pfad, ";")
        Pfad = ""
        For i = 0 To UBound(tmp_DB1)
            'D:\Programme\Microsoft Office\OFFICE11\
            'D:\Programme\Microsoft Office\OFFICE12\
            If InStr(1, LCase(tmp_DB1(i)), "office\office") > 0 Then
                Pfad = tmp_DB1(i)
                Exit For
            End If
        Next i
        If Right(Pfad, 1) <> "\" Then Pfad = Pfad & "\"
        Pfad = Pfad & "EnergonMakros" & "\"
        DateiName = "Projekt-Favoriten.ini"

        If cFormel.DateiVorhanden(Pfad & DateiName) Then
            Open Pfad & DateiName For Input As #1
                tmpVar1 = LOF(1)
                tmpVar1 = Input(tmpVar1, #1)
            Close #1
            tmpVar1 = Replace(tmpVar1, Chr(13), "")
            If Right(tmpVar1, 1) = Chr(10) Then tmpVar1 = Left(tmpVar1, Len(tmpVar1) - 1)
            DB_PrjNr = Split(tmpVar1, Chr(10))

            'Nur wenn "automatisch" eingestellt --> zu Favoriten hunzufuegen
            If InStr(LCase(DB_PrjNr(0)), "auto") = 0 Then GoTo Ende:

            'Projekt-Nummer feststellen
            ProjNumm = ThisWorkbook.Path
            i = InStrRev(ProjNumm, "\")
            i = Len(ProjNumm) - i
            ProjNumm = Right(ProjNumm, i)

            'Auf Doppelwere pruefen
            For i = 1 To UBound(DB_PrjNr)
                If ProjNumm = DB_PrjNr(i) Then GoTo Ende:
            Next i
        Else
            'ini-Datei nicht existiert --> NEU erzeugen
            ReDim DB_PrjNr(0)
            DB_PrjNr(0) = "automatisch"
        End If

        i = UBound(DB_PrjNr) + 1
        ReDim Preserve DB_PrjNr(i)
        DB_PrjNr(i) = ProjNumm

        'ini-Datei neu speichern
        Open Pfad & DateiName For Output As #1
            For i = 0 To UBound(DB_PrjNr)
                If DB_PrjNr(i) <> "" Then Print #1, DB_PrjNr(i)
            Next i
        Close #1
    End If
Ende:
    Set cFormel = Nothing
End Sub

Public Sub Korrektur_Projektnummer(ByRef Pr_Nr As String)
    'Aus der Proj.Nr "200000123_Testprojekt" wird die Nummer gefiltert: "200000123"
    Dim i       As Long
    If Right(Pr_Nr, 1) = "\" Then Pr_Nr = Left(Pr_Nr, Len(Pr_Nr) - 1)
    i = InStrRev(Pr_Nr, "\")
    If i > 0 Then Pr_Nr = Right(Pr_Nr, Len(Pr_Nr) - i)

    If Len(Pr_Nr) > 6 Then
        For i = 7 To Len(Pr_Nr)
            Select Case Asc(Mid(Pr_Nr, i, 1))
                Case 48 To 57                               'Erlaubt: "0" bis "9" - Ziffern
                Case 65 To 90                               'Erlaubt: "A" bis "Z" - Gr. Buchstaben
                Case 97 To 122                              'Erlaubt: "a" bis "z" - Kl. Buchstaben
                'Case 228, 246, 252, 196, 214, 220, 223     'Nicht Erlaubt: "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" - Deutsche Sonderzeichen
                Case Else                                   'Sonderzeichen, z.B. "_" "-" oder Leerzeichen
                    Pr_Nr = Left(Pr_Nr, i - 1)
                    Exit For
            End Select
        Next i
    End If
End Sub

Public Sub ProjektEinstellungen_Aktualisieren(ByVal Variable As String, ByVal Wert As String, Optional ByVal ProjektPfad As String)
    Dim i               As Long
    Dim ProjNumm        As String
    Dim DateiName       As String
    Dim Benutzer        As String
    Dim cEnde           As String
    Dim DB_ini()        As String
    Dim tmpVar1

    Set cFormel = New clsFormel
    cEnde = "<ENDE Projekt-Einstellungen>"
    DateiName = cDateiName
    Benutzer = Application.UserName

    'ini-Datei einlesen
    If ProjektPfad = "" Then ProjektPfad = ThisWorkbook.Path
    ProjNumm = ProjektPfad
    If Right(ProjNumm, 1) = "\" Then ProjNumm = Left(ProjNumm, Len(ProjNumm) - 1)
    i = InStrRev(ProjNumm, "\")
    If i > 0 Then ProjNumm = Right(ProjNumm, Len(ProjNumm) - i)

    If Right(ProjektPfad, 1) <> "\" Then ProjektPfad = ProjektPfad & "\"
    DateiName = ProjektPfad & DateiName
    If cFormel.DateiVorhanden(DateiName) Then
        Open DateiName For Input As #1
            tmpVar1 = LOF(1)
            tmpVar1 = Input(tmpVar1, #1)
        Close #1
        tmpVar1 = Replace(tmpVar1, Chr(13), "")
        If Right(tmpVar1, 1) = Chr(10) Then tmpVar1 = Left(tmpVar1, Len(tmpVar1) - 1)
        DB_ini = Split(tmpVar1, Chr(10))
        i = UBound(DB_ini)
        If i > 2 Then
            If DB_ini(i) = cEnde Then
                i = i - 1
                ReDim Preserve DB_ini(i)
            End If
            If DB_ini(i) = "" Then
                i = i - 1
                ReDim Preserve DB_ini(i)
            End If
        Else
            GoTo NeueDatei:
        End If

        'Alle Zeilen durchgehen
        For i = 0 To UBound(DB_ini)
            tmpVar1 = DB_ini(i)
            If InStr(tmpVar1, "<Projekt ") > 0 Then
                tmpVar1 = "<Projekt " & ProjNumm & ">"
                DB_ini(i) = tmpVar1
            ElseIf InStr(tmpVar1, "<Gespeichert am ") > 0 Then
                tmpVar1 = "<Gespeichert am " & Date & ", um " & Time & ">"
                DB_ini(i) = tmpVar1
            ElseIf InStr(tmpVar1, "<Gespeichert vom ") > 0 Then
                tmpVar1 = "<Gespeichert vom " & Benutzer & ">"
                DB_ini(i) = tmpVar1
            ElseIf InStr(tmpVar1, Variable) > 0 Then
                tmpVar1 = Variable & "=" & Wert
                DB_ini(i) = tmpVar1
                Exit For
            End If
        Next i
        If i = UBound(DB_ini) + 1 Then
            ReDim Preserve DB_ini(i)
            DB_ini(i) = Variable & "=" & Wert
        End If
    Else
NeueDatei:
        ReDim DB_ini(5)
        DB_ini(0) = "<Projekt 200000253: Progrefa>"
        DB_ini(1) = "<Projekt-Einstellungen>"
        DB_ini(2) = "<Gespeichert am " & Date & ", um " & Time & ">"
        DB_ini(3) = "<Gespeichert vom " & Benutzer & ">"
        DB_ini(4) = ""
        DB_ini(5) = Variable & "=" & Wert
        'DB_ini(6) = ""
        'DB_ini(7) = "<ENDE Projekt-Einstellungen>" '(cEnde)
    End If
    i = UBound(DB_ini)
    ReDim Preserve DB_ini(i + 2)
    DB_ini(i + 1) = ""
    DB_ini(i + 2) = cEnde   '"<ENDE Projekt-Einstellungen>"

    'In Datei ausgeben
    Open DateiName For Output As #1
        For i = 0 To UBound(DB_ini)
            Print #1, DB_ini(i)
        Next i
    Close #1
    Set cFormel = Nothing
End Sub

Public Sub ProjektEinstellungen_Auslesen(ByVal Variable As String, ByRef Wert As String, Optional ByVal ProjektPfad As String)
    Dim i               As Long
    Dim DateiName       As String
    Dim DB_ini()        As String
    Dim tmpVar1

    Set cFormel = New clsFormel
    Wert = ""
    DateiName = cDateiName

    'ini-Datei einlesen
    If ProjektPfad = "" Then ProjektPfad = ThisWorkbook.Path
    If Right(ProjektPfad, 1) <> "\" Then ProjektPfad = ProjektPfad & "\"
    DateiName = ProjektPfad & DateiName
    If cFormel.DateiVorhanden(DateiName) Then
        Open DateiName For Input As #1
            tmpVar1 = LOF(1)
            tmpVar1 = Input(tmpVar1, #1)
        Close #1
        tmpVar1 = Replace(tmpVar1, Chr(13), "")
        If Right(tmpVar1, 1) = Chr(10) Then tmpVar1 = Left(tmpVar1, Len(tmpVar1) - 1)
        DB_ini = Split(tmpVar1, Chr(10))

        'Alle Zeilen durchgehen
        For i = 0 To UBound(DB_ini)
            If InStr(DB_ini(i), Variable) > 0 Then
                tmpVar1 = Right(DB_ini(i), Len(DB_ini(i)) - Len(Variable))
                i = InStr(tmpVar1, "=")
                If i > 0 Then
                    Wert = Right(tmpVar1, Len(tmpVar1) - i)
                End If
                Exit For
            End If
        Next i
    End If
    Set cFormel = Nothing
End Sub

Public Sub Auto_MsgBox(ByVal Text As String, _
                        Optional Sekunden As Long = 3, _
                        Optional BoxTitel As String, _
                        Optional InfoTyp As Integer = vbInformation)
    Dim obj1    As Object
    Set obj1 = CreateObject("WScript.Shell")
        obj1.Popup Text, Sekunden, BoxTitel, InfoTyp
    Set obj1 = Nothing
End Sub





Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'*      Letzte Aenderung am : 18.10.2011 durch V. Schmidt
'*
'*

Private Sub Worksheet_Calculate()
    Call AnlOrtHe_Berechnung_Ausfuehren(True)
End Sub


Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{4911CC29-4276-49AB-92FD-F8A3AD89AA5D}{3E4600FC-6E50-4314-BC1D-F758E483375C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'*      Letzte Aenderung am : 23.08.2012 durch V. Schmidt
'*
'*

Option Explicit

Private VorherigesWert  As String
Private VorherigesWert2 As String
Private cFormel         As clsFormel

Private Sub UserForm_Initialize()
    Dim PPfad       As String

    Set cFormel = New clsFormel

    Button_NEIN.Caption = "NEIN"

    PPfad = cFormel.ProjektePfad
    If Right(PPfad, 1) = "\" Then PPfad = Left(PPfad, Len(PPfad) - 1)
    Label_Pfad.Caption = PPfad

    If InStr(Label_Pfad.Caption, "\SI_SP\") > 0 Then
        TBox_PNR = "580000"
    ElseIf InStr(Label_Pfad.Caption, "\PM_MS\") > 0 Then
        TBox_PNR = "100000"
    Else
        TBox_PNR = "200000"
    End If
    TBox_Kunde = ""
    TBox_Kennwort = ""
    
    Call Ini0
    TBox_PNR.SetFocus
End Sub

Private Sub Ini0()
    If InStr(Label_Pfad.Caption, "\SI_SP\") > 0 Then
        TBox_PNR = "580000"
    ElseIf InStr(Label_Pfad.Caption, "\PM_MS\") > 0 Then
        TBox_PNR = "100000"
    Else
        TBox_PNR = "200000"
    End If
    TBox_Kunde = ""
    TBox_Kennwort = ""
    Call Ini1
End Sub

Private Sub Ini1()
    Dim PPfad           As String
    Dim Pfad_Genau      As String
    Dim Pfad_Ngenau     As String

'   ****    Neu 23.08.2012: Typicalliste kopieren
    If CBox_TKopieren Then
        PPfad = cFormel.ProjektePfad(TBox_AltPNR)
        If PPfad = "" Then PPfad = Label_Pfad.Caption
        Pfad_Ngenau = PPfad & "\" & TBox_AltPNR
        Pfad_Genau = ""
        If PPfad <> "" Then
            If cFormel.DateiVorhanden(Pfad_Ngenau) Then
                'ProjektPfad existiert
                Pfad_Genau = Pfad_Ngenau
            Else
                'ProjektPfad existiert nicht
                If Len(TBox_AltPNR) = 9 Then
                    'Pruefung ob Projektverzeichnis "200000xxx_blabla" existiert
                    Pfad_Genau = Dir(Pfad_Ngenau & "_*", vbDirectory)
                    If Pfad_Genau <> "" Then
                        'ProjektPfad existiert
                        Pfad_Genau = PPfad & "\" & Pfad_Genau
                    End If
                    Pfad_Ngenau = Pfad_Genau
                End If
            End If

            If Pfad_Genau <> "" Then
                Pfad_Genau = Pfad_Genau & "\ANL" & Left(TBox_AltPNR, 9) & ".xls"
                If Not cFormel.DateiVorhanden(Pfad_Genau) Then
                    Pfad_Genau = Pfad_Genau & "m"
                    If Not cFormel.DateiVorhanden(Pfad_Genau) Then Pfad_Genau = ""
                End If
            End If
        End If

        If Pfad_Genau = "" Then
            'ProjektPfad existiert nicht
            TBox_AltPNR.BackColor = &H8080FF            'Hintergrund rot
            Pfad_Genau = "Kopieren der Typicalliste ist unm|fffd|glich! Bitte altes Projekt richtig einstellen!"
            PPfad = ""
        Else
            'ProjektPfad existiert
            TBox_AltPNR.BackColor = &H80FF80            'Hintergrund gruen
            PPfad = cFormel.ENERGON_Parameter(Pfad_Ngenau, 2) & " / " & cFormel.ENERGON_Parameter(Pfad_Ngenau, 1) _
                                                        & " / " & cFormel.ENERGON_Parameter(Pfad_Ngenau, 3)
            If Len(PPfad) < 7 Then PPfad = ""
        End If

        TBox_AltPNR.Visible = True
        Label_AltFullname.Caption = Pfad_Genau
        Label_AltPNR.Caption = PPfad
    Else
        TBox_AltPNR.Visible = False
        TBox_AltPNR.BackColor = &H80FF80                'Hintergrund gruen
        Label_AltFullname.Caption = "Typicalliste wird NICHT aus dem alten Projekt kopiert!"
        Label_AltPNR.Caption = ""
    End If
    Label_AltFullname.BackColor = TBox_AltPNR.BackColor
'   ****    Ende 23.08.2012

    PPfad = ""
    Pfad_Genau = ""
    Pfad_Ngenau = ""
    If Label_Pfad.Caption <> "" And Len(TBox_PNR) > 6 Then
        PPfad = Label_Pfad.Caption & "\" & TBox_PNR
        Pfad_Ngenau = PPfad
        If TBox_Kunde <> "" Then
            PPfad = PPfad & "_" & TBox_Kunde
            If TBox_Kennwort <> "" Then PPfad = PPfad & "_" & TBox_Kennwort
        End If
        Pfad_Genau = PPfad
        PPfad = PPfad & "\ANL" & TBox_PNR
        If Button_xls Then
            PPfad = PPfad & ".xls"
        Else
            PPfad = PPfad & ".xlsm"
        End If
    End If
'    If Len(PPfad) > 80 Then
'        Label_Fullname.Caption = "  ... " & Right(PPfad, 75)
'    Else
        Label_Fullname.Caption = "  " & PPfad
'    End If
    Label_Fullname.Font.Size = IIf(Len(PPfad) > 70, 8, 10)

    If Len(TBox_PNR) > 9 Then
        TBox_PNR.BackColor = &HFFFFC0           'Hintergrund blau
        TBox_PNR.ForeColor = &HFF&              'Text dunkelrot
    Else
        TBox_PNR.BackColor = &H80000005         'Hintergrund weiss
        TBox_PNR.ForeColor = &HFF0000           'Text blau
    End If

    uStrich1.Visible = Len(TBox_Kunde) > 0
    uStrich2.Visible = Len(TBox_Kennwort) > 0
    TBox_Kennwort.Enabled = (TBox_Kunde <> "")

    On Error Resume Next
    If Pfad_Ngenau <> "" Then
        If cFormel.DateiVorhanden(Pfad_Ngenau) Then
            'Projektverzeichnis "200000xxx" existiert bereits
        Else
            'Pruefung ob Projektverzeichnis "200000xxx_blabla" existiert
            Pfad_Ngenau = Dir(Pfad_Ngenau & "_*", vbDirectory)
        End If
    End If

    If cFormel.DateiVorhanden(Pfad_Genau) And Pfad_Genau <> "" Then
            Button_JA.BackColor = &HFF&         'Hintergrund dunkelrot
            Button_JA.Caption = "Projektverzeichnis bereits vorhanden!"
            Button_JA.Enabled = True

    ElseIf Pfad_Ngenau <> "" Then
            Pfad_Ngenau = Right(Pfad_Ngenau, Len(Pfad_Ngenau) - InStrRev(Pfad_Ngenau, "\"))
            Button_JA.BackColor = &H8080FF      'Hintergrund rot
            Button_JA.Caption = "Projektnummer schon eingesetzt:" & vbLf & "... " & Pfad_Ngenau
            Button_JA.Enabled = True

    ElseIf PPfad = "" Then
            Button_JA.BackColor = &H8080FF      'Hintergrund rot
            Button_JA.Caption = "JA" & vbLf & "Neues Projekt anlegen!"
            Button_JA.Enabled = False

    Else
        If Len(PPfad) > 81 Then '82 OK
            'Bei Gesamt-Pfadlaenge > 100 kann nicht richtig im Enrgon-Programm gespeichert werden
            Button_JA.BackColor = &H8080FF      'Hintergrund rot
            Button_JA.Caption = "Pfad ist zu lang!" & vbLf & "Bitte einige Zeichen entfernen!"
            Button_JA.Enabled = True
        ElseIf TBox_AltPNR.BackColor = &H8080FF Then
            'Typicalliste kann nicht kopiert werden
            Button_JA.BackColor = &H8080FF      'Hintergrund rot
            Button_JA.Caption = "JA" & vbLf & "Neues Projekt anlegen!"
            Button_JA.Enabled = True
        Else
            'Alles OK!
            Button_JA.BackColor = &H80FF80      'Hintergrund gruen
            Button_JA.Caption = "JA" & vbLf & "Neues Projekt anlegen!"
            Button_JA.Enabled = True
        End If
    End If

    If Len(PPfad) > 81 Then
        'Bei Gesamt-Pfadlaenge > 100 kann nicht richtig im Enrgon-Programm gespeichert werden
        Label_Fullname.BackColor = &H8080FF         'Hintergrund rot
    Else
        Label_Fullname.BackColor = &H80000005       'Hintergrund weiss
    End If
End Sub

Private Sub Button_Manuell_Click()
    Dim PPfad       As String

    PPfad = cFormel.ProjektePfad
    If Right(PPfad, 1) <> "\" Then PPfad = PPfad & "\"
    PPfad = Ordner_Waehlen(PPfad, "Wo werden Projekte abgelegt?", "Hier werden Projekte abgelegt!")
    If PPfad <> "" Then
        Label_Pfad = PPfad
        Call Ini1
        TBox_PNR.SetFocus
    End If
End Sub

Private Sub Button_PMNS_Click()
    Label_Pfad = cFormel.ProjektePfad("PM_NS")
    Call Ini0
    TBox_PNR.SetFocus
End Sub

Private Sub Button_SISP_Click()
    Label_Pfad = cFormel.ProjektePfad("SI_SP")
    Call Ini0
    TBox_PNR.SetFocus
End Sub

Private Sub Button_xls_Click()
    Call Ini1
End Sub

Private Sub Button_xlsm_Click()
    Call Ini1
End Sub

Private Sub CBox_TKopieren_Click()
    Call Ini1
    If CBox_TKopieren Then TBox_AltPNR.SetFocus
End Sub

Private Sub TBox_AltPNR_Change()
    If Prj_Name_Erlaubt(TBox_AltPNR, False) Then
        VorherigesWert2 = TBox_AltPNR
    Else
        TBox_AltPNR = VorherigesWert2
    End If
    Call Ini1
End Sub

Private Sub TBox_AltPNR_Enter()
    VorherigesWert2 = TBox_AltPNR
End Sub

Private Sub TBox_AltPNR_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim tmpStr
    tmpStr = TBox_AltPNR
    If Right(tmpStr, 1) = "_" Then tmpStr = Left(tmpStr, Len(tmpStr) - 1)
    If Left(tmpStr, 1) = "_" Then tmpStr = Right(tmpStr, Len(tmpStr) - 1)
    If TBox_AltPNR <> tmpStr Then TBox_AltPNR = tmpStr
End Sub

Private Sub TBox_PNR_Change()
    If Prj_Name_Erlaubt(TBox_PNR, False) Then
        VorherigesWert = TBox_PNR
    Else
        TBox_PNR = VorherigesWert
    End If
    Call Ini1
End Sub

Private Sub TBox_PNR_Enter()
    VorherigesWert = TBox_PNR
End Sub

Private Sub TBox_PNR_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim tmpStr
    tmpStr = TBox_PNR
    If Right(tmpStr, 1) = "_" Then tmpStr = Left(tmpStr, Len(tmpStr) - 1)
    If Left(tmpStr, 1) = "_" Then tmpStr = Right(tmpStr, Len(tmpStr) - 1)
    If TBox_PNR <> tmpStr Then TBox_PNR = tmpStr
End Sub

Private Sub TBox_Kunde_Change()
    If Prj_Name_Erlaubt(TBox_Kunde, False) Then
        VorherigesWert = TBox_Kunde
    Else
        TBox_Kunde = VorherigesWert
    End If
    Call Ini1
End Sub

Private Sub TBox_Kunde_Enter()
    VorherigesWert = TBox_Kunde
End Sub

Private Sub TBox_Kunde_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim tmpStr
    tmpStr = TBox_Kunde
    If Right(tmpStr, 1) = "_" Then tmpStr = Left(tmpStr, Len(tmpStr) - 1)
    If Left(tmpStr, 1) = "_" Then tmpStr = Right(tmpStr, Len(tmpStr) - 1)
    If TBox_Kunde <> tmpStr Then TBox_Kunde = tmpStr

    If TBox_Kunde = "" And TBox_Kennwort <> "" Then
        TBox_Kunde = TBox_Kennwort
        TBox_Kennwort = ""
    End If
End Sub

Private Sub TBox_Kennwort_Change()
    If Prj_Name_Erlaubt(TBox_Kennwort, False) Then
        VorherigesWert = TBox_Kennwort
    Else
        TBox_Kennwort = VorherigesWert
    End If
    Call Ini1
End Sub

Private Sub TBox_Kennwort_Enter()
    VorherigesWert = TBox_Kennwort
End Sub

Private Sub TBox_Kennwort_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim tmpStr
    tmpStr = TBox_Kennwort
    If Right(tmpStr, 1) = "_" Then tmpStr = Left(tmpStr, Len(tmpStr) - 1)
    If Left(tmpStr, 1) = "_" Then tmpStr = Right(tmpStr, Len(tmpStr) - 1)
    If TBox_Kennwort <> tmpStr Then TBox_Kennwort = tmpStr
End Sub

Private Sub Button_NEIN_Click()
    Set cFormel = Nothing
    Unload Me
End Sub

Private Sub Button_JA_Click()
    Dim ProjektNummer               As String
    Dim iniDatei                    As String
    Dim Prj_Verzeichnis             As String
    Dim i                           As Long
    Dim tmpVar1
    Dim DB_ini()                    As String
    Dim tmpComment                  As Comment

    Const Trenn = "->"
    Const tDiesVerz = "Dieses Verzeichnis"
    Const tProjNr = "Projektnummer"

'    If Button_JA.BackColor <> &H80FF80 Then GoTo Ende:
    If Button_JA.BackColor <> &H80FF80 Then Exit Sub

    On Error GoTo Fehler:

    Application.ScreenUpdating = False

'   ****    Neu 23.08.2012: Typicalliste kopieren
    If CBox_TKopieren Then
        Call TypicallisteKopieren(Label_AltFullname.Caption, tmpVar1 = "")
        If Len(tmpVar1) > 5 Then
            tmpVar1 = "Typicalliste k|fffd|nnte nicht kopiert werden:" & vbLf & tmpVar1
            MsgBox tmpVar1, vbExclamation + vbOKOnly, "Fehler beim Kopieren"
        End If
    End If
    Call AnzahlSpaltenEinfuegen
'   ****    Ende 23.08.2012

    Prj_Verzeichnis = Label_Pfad.Caption & "\" & TBox_PNR
    If TBox_Kunde <> "" Then
        Prj_Verzeichnis = Prj_Verzeichnis & "_" & TBox_Kunde
        If TBox_Kennwort <> "" Then Prj_Verzeichnis = Prj_Verzeichnis & "_" & TBox_Kennwort
    End If
    ProjektNummer = TBox_PNR

    'Motorliste und Typicalliste zum Drucken einrichten
    tmpVar1 = Application.UserName
    With Sheets("Motorliste").PageSetup
        .PrintTitleRows = "$1:$1"
        .PrintTitleColumns = "$A:$B"
        .LeftHeader = "NATUS-Project:" & Chr(10) & ProjektNummer
        If tmpVar1 <> "" Then .LeftFooter = tmpVar1
    End With
    With Sheets("Typicalliste").PageSetup
        .PrintTitleRows = "$1:$2"
        .PrintTitleColumns = "$A:$C"
        .LeftHeader = "NATUS-Project:" & Chr(10) & ProjektNummer
        If tmpVar1 <> "" Then .LeftFooter = tmpVar1
    End With
    With Sheets("Fragen_Spezifikation").PageSetup
        .PrintTitleRows = "$1:$1"
        '.PrintTitleColumns = "$A:$A"
        .LeftHeader = "NATUS-Project:" & Chr(10) & ProjektNummer
        If tmpVar1 <> "" Then .LeftFooter = tmpVar1
    End With

    'Verzeichnis und Unterverzeichnisse erstellen
    MkDir Prj_Verzeichnis

    'ini-Datei einlesen
    iniDatei = cFormel.VorlagenPfad
    If Right(iniDatei, 1) <> "\" Then iniDatei = iniDatei & "\"
    iniDatei = iniDatei & "Projekt_anlegen"
    iniDatei = iniDatei & "\" & "Projekt_anlegen.ini"
    If cFormel.DateiVorhanden(iniDatei) Then
        Open iniDatei For Input As #1
            tmpVar1 = LOF(1)
            tmpVar1 = Input(tmpVar1, #1)
        Close #1
        tmpVar1 = Replace(tmpVar1, Chr(13), "")
        tmpVar1 = Replace(tmpVar1, "/" & Chr(10), "/")      'Bei langen Dateinamen Zeilenumbruch ermoeglichen
        tmpVar1 = Replace(tmpVar1, "\" & Chr(10), "\")      'Bei langen Dateinamen Zeilenumbruch ermoeglichen
        tmpVar1 = Replace(tmpVar1, Chr(10) & "/", "/")      'Bei langen Dateinamen Zeilenumbruch ermoeglichen
        tmpVar1 = Replace(tmpVar1, Chr(10) & "\", "\")      'Bei langen Dateinamen Zeilenumbruch ermoeglichen
        If Right(tmpVar1, 1) = Chr(10) Then tmpVar1 = Left(tmpVar1, Len(tmpVar1) - 1)
        DB_ini = Split(tmpVar1, Chr(10))

        'Alle Zeilen durchgehen
        For i = 0 To UBound(DB_ini)
            If Trim(DB_ini(i)) = "" Then            'Leere Zeile     --> ueberspringen
            ElseIf Left(DB_ini(i), 1) = "<" Then    'Kommentar-Zeile --> ueberspringen
            ElseIf Left(DB_ini(i), 2) = Trenn Then
            Else
                '2 Unter-Verzeichnis erstellen
                MkDir Prj_Verzeichnis & "\" & DB_ini(i)
            End If
        Next i
    End If

    'Einstellungen bearbeiten
    If Button_Kom3 Then
        'Kommentare loeschen
        For Each tmpVar1 In Array("Motorliste", "Typicalliste")
            For Each tmpComment In Sheets(tmpVar1).Comments
                tmpComment.Delete
            Next tmpComment
        Next tmpVar1
    ElseIf Button_Kom2 Then
        'Kommentare ausblenden
        For Each tmpVar1 In Array("Motorliste", "Typicalliste")
            For Each tmpComment In Sheets(tmpVar1).Comments
                tmpComment.Visible = False
            Next tmpComment
        Next tmpVar1
    ElseIf Button_Kom1 Then
        'Kommentare beibehalten (keine Aktion)
        For Each tmpVar1 In Array("Motorliste", "Typicalliste")
            For Each tmpComment In Sheets(tmpVar1).Comments
                tmpComment.Visible = True
            Next tmpComment
        Next tmpVar1
    End If
    If Button_MSpaltenH Then
        'SpaltenBezeichnungen der Motorliste horizontal formatieren
        Sheets("Motorliste").Rows("1:1").Orientation = 0
    ElseIf Button_MSpaltenV Then
        'SpaltenBezeichnungen der Motorliste vertikal formatieren
        Sheets("Motorliste").Rows("1:1").Orientation = 90
    End If

    tmpVar1 = Prj_Verzeichnis & "\" & "ANL" & ProjektNummer & IIf(Button_xls, ".xls", ".xlsm")
    ChDir Prj_Verzeichnis
    ActiveWorkbook.SaveAs Filename:=tmpVar1, FileFormat:=IIf(Button_xls, xlNormal, xlOpenXMLWorkbookMacroEnabled)
Ende:
    Set cFormel = Nothing
    Application.ScreenUpdating = True
    Unload Me
    Exit Sub

Fehler:
    Set cFormel = Nothing
    Application.ScreenUpdating = True
    MsgBox "Fehler! Aktion wird abgebrochen!", vbCritical, "E N E R G O N"
    Unload Me
End Sub



Private Function Prj_Name_Erlaubt(Prj_Verz As String, Nur_Ziffern As Boolean) As Boolean
    Dim i       As Long

    'ProjekVerzeichnis pruefen
    For i = 1 To Len(Prj_Verz)
        Select Case Asc(Mid(Prj_Verz, i, 1))
            Case 48 To 57                               'Erlaubt: "0" bis "9" - Ziffern
            Case 65 To 90                               'Erlaubt: "A" bis "Z" - Gr. Buchstaben
                Prj_Name_Erlaubt = Nur_Ziffern          'Wird am Ende umgekehrt
            Case 97 To 122                              'Erlaubt: "a" bis "z" - Kl. Buchstaben
                Prj_Name_Erlaubt = Nur_Ziffern          'Wird am Ende umgekehrt
            Case 95                                     'Erlaubt: "_" Unterstrich fuer Trennung zw. Prj-Nr und Prj-Name
                Prj_Name_Erlaubt = Nur_Ziffern          'Wird am Ende umgekehrt
            'Case 228, 246, 252, 196, 214, 220, 223     'Nicht Erlaubt: "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" - Deutsche Sonderzeichen
            Case Else                                   'Nicht Erlaubt: Sonstige Sonderzeichen, z.B. "-" oder Leerzeichen
                Prj_Name_Erlaubt = True                 'Wird am Ende umgekehrt
        End Select
        If Prj_Name_Erlaubt Then Exit For
    Next i
    Prj_Name_Erlaubt = Not (Prj_Name_Erlaubt)
End Function

Private Function Ordner_Waehlen(ByVal Voreingest_Ordner As String, _
                                ByVal TitelZeile As String, _
                                ByVal OK_Button As String) As String
    With Application.FileDialog(msoFileDialogFolderPicker)
        .AllowMultiSelect = False
        .Title = TitelZeile
        .InitialFileName = Voreingest_Ordner
        .InitialView = msoFileDialogViewThumbnail
        .ButtonName = OK_Button
        .Show

        If .SelectedItems.Count > 0 Then
            Ordner_Waehlen = .SelectedItems(1)
        End If
    End With
End Function

Private Sub TypicallisteKopieren(ByVal DPfad As String, Optional ByRef Meldung As String)
    Dim WB1             As Workbook
    Dim WB2             As Workbook
    Dim WS1             As Worksheet
    Dim WS2             As Worksheet
    Dim DName           As String
    Dim sName           As String
    Dim sTmp            As String
    Dim i               As Long
    Dim LetzteZeile     As Long
    Dim LetzteSpalte    As Long
    Dim warGeoeffnet    As Boolean

    If Not cFormel.DateiVorhanden(DPfad) Then
        Meldung = "Datei kann nicht gefunden werden"
        GoTo localEnde:
    End If

    DName = Right(DPfad, Len(DPfad) - InStrRev(DPfad, "\"))
    Set WB2 = ThisWorkbook
    Set WS2 = WB2.Sheets("Typicalliste")

    'Ist die Datei bereits geoeffnet?
    For Each WB1 In Workbooks
        If UCase(DName) = UCase(WB1.Name) Then
            warGeoeffnet = True
            Exit For
        End If
    Next WB1
    If WB1 Is Nothing Then
        Workbooks.Open Filename:=DPfad, ReadOnly:=True, IgnoreReadOnlyRecommended:=True
        Set WB1 = ActiveWorkbook
    End If
    WB1.Activate

    'Ist Typicalliste vorhanden?
    If Not cFormel.TabellenBlattVorhanden(WS2.Name) Then
        Meldung = "Typicalliste fehlt"
        GoTo localEnde:
    End If
    Set WS1 = WB1.Sheets(WS2.Name)

    'Zeilen loeschen und andere kopieren/einfuegen
Application.DisplayAlerts = False
    LetzteZeile = cFormel.LetzteZeile(WS1.Name)
    LetzteSpalte = cFormel.LetzteSpalte(WS1.Name)
    sTmp = "A1:" & cFormel.SplatenNr_to_SplatenBez(LetzteSpalte) & LetzteZeile
    WB2.Activate
    WS2.Activate
    WS2.Rows("3:1000").Delete Shift:=xlUp
    WS2.Columns("J:CZ").Delete Shift:=xlToLeft
    WB1.Activate
    WS1.Activate
    If WS1.FilterMode Then ActiveSheet.ShowAllData
    WS1.Columns.EntireColumn.Hidden = False
    WS1.Rows.EntireRow.Hidden = False
    WS1.Range(sTmp).Copy
    WS2.Activate
    WS2.Range("A1").Select
    ActiveSheet.Paste
    WS2.Columns.AutoFit
    WS2.Range("B3").Select
    Application.CutCopyMode = False

    'Alte Datei schliessen
    If Not warGeoeffnet Then WB1.Close SaveChanges:=False

    'Namen nach dem Kopieren saubern
    For i = 1 To WB2.Names.Count
        If i > WB2.Names.Count Then Exit For
        sName = WB2.Names(i).RefersTo
        If InStr(sName, "#") > 0 Then
            WB2.Names(i).Delete
        ElseIf InStr(sName, DPfad) > 0 Then
            sName = Replace(sName, DPfad, "")
            WB2.Names(i).RefersTo = sName
'            WB2.Names(i).RefersToR1C1 = "=Motorliste!C2"
        End If
    Next i

Application.DisplayAlerts = True
Application.Calculate

localEnde:
    Set WS1 = Nothing
    Set WS2 = Nothing
    Set WB1 = Nothing
    Set WB2 = Nothing
End Sub

Private Sub AnzahlSpaltenEinfuegen()
    Dim WS              As Worksheet
    Dim RNG             As Range
    Dim vTmp            As Variant
    Dim sTmp1           As String
    Dim sTmp2           As String
    Dim i               As Long
    Dim j               As Long
    Dim LetzteZeile     As Long
    Dim bExistiert      As Boolean

    Set WS = ThisWorkbook.Sheets("Typicalliste")
    WS.Activate
    If WS.Range("A2") <> "TYPICAL" Then GoTo localExit:
    LetzteZeile = cFormel.LetzteZeile
    For Each vTmp In Array("ANZAHL", "LOS-->LOS1")
        bExistiert = False
        For j = 2 To 255
            If WS.Cells(2, j) = vTmp Then
                bExistiert = True
                Exit For
            ElseIf WS.Cells(2, j) = "" Then
                Exit For
            End If
        Next j
        'Spalte existiert nicht --> anlegen, Formel eintragen
        sTmp1 = "Anzahl des Typicals in der Motorliste"
        If vTmp = "ANZAHL" Then
            If Not bExistiert Then j = 2
            sTmp2 = "=IF(RC1="""","""",COUNTIF(TYPICAL,RC1))"
        Else
            If Not bExistiert Then j = 3
            sTmp1 = sTmp1 & vbLf & "(Mehrere Bedingungen)"
            sTmp2 = "=IF(RC1="""","""",COUNTIFS(TYPICAL,RC1,INDIRECT(""Motorliste!""&SUBSTITUTE(ADDRESS(1,MATCH(LEFT(R2C,SEARCH(""-->"",R2C)-1)"
            sTmp2 = sTmp2 & ",Motorliste!R1:R1,0),4),""1"","""")&"":""&SUBSTITUTE(ADDRESS(1,MATCH(LEFT(R2C,SEARCH(""-->"",R2C)-1)"
            sTmp2 = sTmp2 & ",Motorliste!R1:R1,0),4),""1"","""")),RIGHT(R2C,LEN(R2C)-SEARCH(""-->"",R2C)-2)))"
        End If
        If Not bExistiert Then WS.Columns(j).Insert Shift:=xlToRight    ', CopyOrigin:=xlFormatFromLeftOrAbove
        WS.Cells(1, j).Font.Size = 10
        WS.Cells(2, j).Font.Size = 8
        WS.Cells(1, j).Font.Bold = False
        WS.Cells(2, j).Font.Bold = False
        WS.Cells(1, j).HorizontalAlignment = xlCenter
        WS.Cells(1, j) = sTmp1
        WS.Cells(2, j) = vTmp
        With WS.Range(WS.Cells(3, j).Address & ":" & WS.Cells(LetzteZeile, j).Address)
            .NumberFormat = "General"
            .HorizontalAlignment = xlCenter
            .Font.Bold = True
            .Interior.Color = 16777164
            .FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=0"
            .FormatConditions(1).Interior.Color = 16763904
            .FormulaR1C1 = sTmp2
        End With
        WS.Columns(j).AutoFit
    Next vTmp
    WS.Range("B3").Select
    ActiveWindow.FreezePanes = False
    ActiveWindow.FreezePanes = True

localExit:
    Set WS = Nothing
End Sub




Attribute VB_Name = "clsFormel"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'*      Letzte Aenderung am : 23.08.2012 durch V. Schmidt
'*
'*

'LaufwerkTyp ermitteln (Festplatte, CD-Laufwerk, usw.)
Private Declare Function GetDriveType Lib "kernel32" Alias "GetDriveTypeA" _
                        (ByVal nDrive As String) As Long

Private Const ProjektePfad_PMNS1 = "X:\SG\PM_NS\Projektmanagement\Projekte"
Private Const ProjektePfad_PMNS2 = "X:\SG\PM_NS\Projekte"
Private Const ProjektePfad_SINS = "X:\SG\SI_SP\Projekte"
Private Const ProjektePfad_PMMS = "X:\SG\PM_MS\KOMMISSI"

Public Function ProjektePfad(Optional ByVal Opt_ProjektVerzeichnis As String) As String
    Dim tmpPfad     As String
    Dim tmpVar      As Variant

    If Opt_ProjektVerzeichnis <> "" Then
        'tmpPfad = Opt_ProjektVerzeichnis
        'If Left(tmpPfad, 1) <> "\" Then tmpPfad = "\" & tmpPfad
            For Each tmpVar In Array(ProjektePfad_PMNS1, ProjektePfad_PMNS2, _
                                     ProjektePfad_SINS, ProjektePfad_PMMS)
                'If DateiVorhanden(tmpVar & tmpPfad) Then
                If Left(Opt_ProjektVerzeichnis, 1) <> "\" Then tmpVar = tmpVar & "\"
                On Error Resume Next
                tmpPfad = Dir(tmpVar & Opt_ProjektVerzeichnis & "*", vbDirectory)
                If tmpPfad = "" Then
                    Err.Clear
                Else
                    ProjektePfad = tmpVar
                    Exit For
                End If
            Next tmpVar

            If ProjektePfad = "" Then
                'ist Opt_ProjektVerzeichnis ein Teil von Array-Element?
                For Each tmpVar In Array(ProjektePfad_PMNS1, ProjektePfad_PMNS2, _
                                         ProjektePfad_SINS, ProjektePfad_PMMS)
                    If InStr(UCase(tmpVar), UCase(Opt_ProjektVerzeichnis)) > 0 Then
                        ProjektePfad = tmpVar
                        Exit For
                    End If
                Next tmpVar
            End If
    End If

    If ProjektePfad = "" Then
        On Error Resume Next
        tmpPfad = ActiveWorkbook.Path
        Err.Clear
        If Len(tmpPfad) > 6 Then
            For Each tmpVar In Array(ProjektePfad_PMNS1, ProjektePfad_PMNS2, _
                                     ProjektePfad_SINS, ProjektePfad_PMMS)
                If Left(tmpPfad, Len(tmpVar)) = tmpVar Then
                    ProjektePfad = tmpVar
                    Exit For
                End If
            Next tmpVar
        End If
    End If

    If ProjektePfad = "" Then
            For Each tmpVar In Array(ProjektePfad_PMNS2, ProjektePfad_PMNS1, _
                                     ProjektePfad_SINS, ProjektePfad_PMMS)
                If DateiVorhanden(tmpVar) Then
                    ProjektePfad = tmpVar
                    Exit For
                End If
            Next tmpVar
    End If

    If Right(ProjektePfad, 1) = "\" Then ProjektePfad = Left(ProjektePfad, Len(ProjektePfad) - 1)
End Function

Public Function VorlagenPfad(Optional ZusatzVerz As String)
    Dim tmpPfad     As String
    Dim tmpVar      As Variant

    If ZusatzVerz <> "" Then ZusatzVerz = "Vorlagen\VBA\EnergonMakros"

    For Each tmpVar In Array(ProjektePfad_PMNS1, ProjektePfad_PMNS2, _
                             ProjektePfad_SINS, ProjektePfad_PMMS)
        If DateiVorhanden(tmpVar & "\" & ZusatzVerz) Then
            VorlagenPfad = tmpVar & "\Vorlagen"
            Exit For
        End If
    Next tmpVar

    If VorlagenPfad = "" Then VorlagenPfad = ProjektePfad & "\Vorlagen"
End Function

Public Function DateiVorhanden(ByVal DateiName As String) As Boolean
    'Zuerst pruefen, ob ein Laufwerk kein CD-Laufwerk ist

    'http://www.aboutvb.de/khw/artikel/khwdrivetype.htm
    'Const DRIVE_Unbekannt = 0   'Laufwerkstyp kann nicht ermittelt werden
    'Const DRIVE_NOT_EXIST = 1   'Hauptverzeichnis existiert nicht
    'Const DRIVE_REMOVABLE = 2   'Wechselbares Medium, z.B. Diskette, ZIP-Laufwerk
    'Const DRIVE_FIXED = 3       'Festplatte
    'Const DRIVE_REMOTE = 4      'Netzlaufwerk
    'Const DRIVE_CDROM = 5       'CD-ROM-Laufwerk
    'Const DRIVE_RAMDISK = 6     'RAM-Disk-Laufwerk

    Dim i       As Byte
    Dim tmpStr

    'Ist der Pfad nicht definiert, aktuellen Pfad zuweisen
    If InStr(1, DateiName, ":\") = 0 Then DateiName = ActiveWorkbook.Path & "\" & DateiName
    i = InStr(1, DateiName, ":\")
    For Each tmpStr In Array(":", "/")
        If InStr(i + 1, DateiName, tmpStr) > 0 Then Exit Function
    Next tmpStr

    If GetDriveType(Left(DateiName, 1) & ":\") = 3 Or _
       GetDriveType(Left(DateiName, 1) & ":\") = 4 Then

        On Error GoTo Fehler:
        DateiVorhanden = Dir$(DateiName) <> ""
        If DateiVorhanden Then Exit Function

Fehler:
        Err.Clear
        Application.EnableEvents = False
        On Error GoTo Fehler2:
        DateiVorhanden = GetAttr(DateiName)
        Application.EnableEvents = True
        Exit Function

Fehler2:
        Err.Clear
        Application.EnableEvents = True
        DateiVorhanden = False
    Else
        DateiVorhanden = False
    End If
End Function

Public Function DateiInBearbeitung(ByVal Datei_Name As String) As Boolean
    Dim FN1 As Long
    FN1 = FreeFile()
    If Not DateiVorhanden(Datei_Name) Then Exit Function
    On Error Resume Next
    Open Datei_Name For Binary Access Read Lock Read As #FN1
    Close #FN1
    If Err.Number <> 0 Then
        DateiInBearbeitung = True
        Err.Clear
    End If
End Function

Public Function LetzteSpalte(Optional ByVal strTabName As String, Optional ByRef out_SplatenBezeichnung As String) As Long
    Dim longLetzteZeile     As Long
    Dim longLetzteSpalte    As Long
    Dim i                   As Long
    Dim j                   As Long
    Dim strDB()             As Variant
    Dim shTabelle           As Worksheet

    If strTabName = "" Then
        If ActiveSheet Is Nothing Then Exit Function
        strTabName = ActiveSheet.Name
    Else
        If Not TabellenBlattVorhanden(strTabName) Then
            If Right(strTabName, 1) = "!" Then
                strTabName = Left(strTabName, Len(strTabName) - 1)
                If Right(strTabName, 1) = "'" And Left(strTabName, 1) = "'" Then
                    strTabName = Mid(strTabName, 2, Len(strTabName) - 2)
                End If
                If Not TabellenBlattVorhanden(strTabName) Then Exit Function
            Else:   Exit Function
            End If
        End If
    End If
    Set shTabelle = Sheets(strTabName)

    longLetzteZeile = shTabelle.UsedRange.Rows.Count
    longLetzteSpalte = shTabelle.UsedRange.Columns.Count
    If longLetzteZeile = 1 Then longLetzteZeile = 2
    If longLetzteSpalte = 1 Then longLetzteSpalte = 2
    If Not ActiveWorkbook Is Nothing Then
        If Right(ActiveWorkbook.Name, 4) = ".xls" Then
            If longLetzteZeile > 65536 Then longLetzteZeile = 65536
            If longLetzteSpalte > 256 Then longLetzteSpalte = 256
        End If
    End If

    strDB = shTabelle.Range("A1", SplatenNr_to_SplatenBez(longLetzteSpalte) & longLetzteZeile)
    Set shTabelle = Nothing

    On Error Resume Next
    For j = longLetzteSpalte To 2 Step -1
        For i = 1 To longLetzteZeile
            If Len(Trim(strDB(i, j))) > 0 Then Exit For
        Next i
        Err.Clear
        If i <= longLetzteZeile Then Exit For
    Next j

    out_SplatenBezeichnung = SplatenNr_to_SplatenBez(j)
    LetzteSpalte = j
End Function

Public Function LetzteZeile(Optional ByVal strTabName As String) As Long
    Dim longLetzteZeile     As Long
    Dim longLetzteSpalte    As Long
    Dim i                   As Long
    Dim j                   As Long
    Dim strDB()             As Variant
    Dim shTabelle           As Worksheet

    If strTabName = "" Then
        If ActiveSheet Is Nothing Then Exit Function
        strTabName = ActiveSheet.Name
    Else
        If Not TabellenBlattVorhanden(strTabName) Then
            If Right(strTabName, 1) = "!" Then
                strTabName = Left(strTabName, Len(strTabName) - 1)
                If Right(strTabName, 1) = "'" And Left(strTabName, 1) = "'" Then
                    strTabName = Mid(strTabName, 2, Len(strTabName) - 2)
                End If
                If Not TabellenBlattVorhanden(strTabName) Then Exit Function
            Else:   Exit Function
            End If
        End If
    End If
    Set shTabelle = Sheets(strTabName)

    longLetzteZeile = shTabelle.UsedRange.Rows.Count
    longLetzteSpalte = shTabelle.UsedRange.Columns.Count
    If longLetzteZeile = 1 Then longLetzteZeile = 2
    If longLetzteSpalte = 1 Then longLetzteSpalte = 2
    If Not ActiveWorkbook Is Nothing Then
        If Right(ActiveWorkbook.Name, 4) = ".xls" Then
            If longLetzteZeile > 65536 Then longLetzteZeile = 65536
            If longLetzteSpalte > 256 Then longLetzteSpalte = 256
        End If
    End If

    strDB = shTabelle.Range("A1", SplatenNr_to_SplatenBez(longLetzteSpalte) & longLetzteZeile)
    Set shTabelle = Nothing

    On Error Resume Next
    For i = longLetzteZeile To 2 Step -1
        For j = 1 To longLetzteSpalte
            If Len(Trim(strDB(i, j))) > 0 Then Exit For
        Next j
        Err.Clear
        If j <= longLetzteSpalte Then Exit For
    Next i

    LetzteZeile = i
End Function

Public Function TabellenBlattVorhanden(ByVal TabellenBlattName As String) As Boolean
    'Existiert TabellenBlatt in der active Excel-Datei?
    Dim Blatt As Worksheet
    TabellenBlattVorhanden = False
    For Each Blatt In ActiveWorkbook.Worksheets
        If Blatt.Name = TabellenBlattName Then TabellenBlattVorhanden = True: Exit For
    Next Blatt
End Function

Public Function SplatenNr_to_SplatenBez(ByVal longSplatenNr As Long) As String
    ' Spalte-Nr."28" --> Spalte "AB"
    If longSplatenNr <= 0 Then Exit Function

    Const cSpaltenReihe     As Long = 26
    Dim longGanzzahl        As Long
    Dim longRestzahl        As Long

    longGanzzahl = Int(longSplatenNr / cSpaltenReihe)
    longRestzahl = longSplatenNr Mod cSpaltenReihe
    If longRestzahl = 0 Then
        longGanzzahl = longGanzzahl - 1
        longRestzahl = cSpaltenReihe
    End If
    'Rekursive Aufruf:
    SplatenNr_to_SplatenBez = SplatenNr_to_SplatenBez(longGanzzahl) & Chr(64 + longRestzahl)
End Function

Public Function SplatenBez_to_SplatenNr(ByVal strSplatenBez As String) As Long
    ' Spalte "Y" --> Spalte-Nr."25"

    Const cSpaltenReihe     As Long = 26
    Dim i                   As Long
    Dim longDB()            As Long

    If strSplatenBez = "" Then Exit Function
    strSplatenBez = UCase(strSplatenBez)
    ReDim longDB(0)
    For i = 1 To Len(strSplatenBez)
        longDB(0) = Asc(Mid(strSplatenBez, i, 1)) - 64
        If longDB(0) > 0 And longDB(0) <= cSpaltenReihe Then
            ReDim Preserve longDB(i)
            longDB(i) = longDB(0)
        Else
            'Zahl oder Sonderzeichen --> abschneiden
            Exit For
        End If
    Next i
    longDB(0) = 0
    For i = 1 To UBound(longDB)
        longDB(0) = longDB(0) + longDB(i) * cSpaltenReihe ^ (UBound(longDB) - i)
    Next i
    SplatenBez_to_SplatenNr = longDB(0)
End Function

Public Function ENERGON_Parameter(ByVal ProjektNummer As String, ByVal Parameter) As String
    'Im ENERGON-Projektverzeichnis wird die Datei "param.dbf" gesucht
            'und entsprechende Einstellungen ermittelt
    'Parameter =   1 --> Kunde
    'Parameter =   2 --> Kennwort
    'Parameter =   3 --> Bearbeiter
    'Rest - weggelassen

    Dim Zaehler         As Byte
    Dim i               As Long
    Dim j               As Long
    Dim Start           As Long
    Dim Laenge          As Long
    Dim Dat_Name        As String
    Dim Zeichen_i       As String
    Dim OK_Meldung      As Boolean
    Dim tmpStr          As String
    Dim tmpDB()         As String

    Dim FN1             As Long
    FN1 = FreeFile()

    If IsError(Parameter) Then Parameter = 2
    If IsNumeric(Parameter) Then
        i = Parameter
    Else
        Select Case UCase(Parameter)
            Case "KUNDE":       i = 1
            Case "KENNWORT":    i = 2
            Case "PROJEKT":     i = 2
            Case "BEARBEITER":  i = 3
            Case "PROJEKTLEITER": i = 3
        End Select
    End If

    If i = 0 Then Exit Function

    If InStr(ProjektNummer, ":\") = 0 Then
        Dat_Name = ProjektePfad
    Else
        Dat_Name = ProjektNummer
        ProjektNummer = Right(Dat_Name, Len(Dat_Name) - InStrRev(Dat_Name, "\"))
        Dat_Name = Left(Dat_Name, Len(Dat_Name) - Len(ProjektNummer) - 1)
    End If

    If Right(Dat_Name, 1) <> "\" Then Dat_Name = Dat_Name & "\"

    Zaehler = InStrRev(Dat_Name, "\")

    Dat_Name = Left(Dat_Name, Zaehler) & ProjektNummer & "\"
    Dat_Name = Dat_Name & "Parameter.XLS"
    If DateiVorhanden(Dat_Name) Then
        'Umrechnung des Indexes i
        Select Case i
            Case 1 To 4
                j = i + 74
            Case 11 To 283
                j = i Mod 10    'Jedinicy
                'Korrektur T-Datum/F-Datum und Datum bei EF1
                If j = 1 Then
                    If Int(i / 10) = 1 Then j = 2   'V-Datum EF1
                ElseIf j = 2 Then
                    If Int(i / 10) < 10 Then j = 3  'T-Datum EF2...EF9
                '    If Int(i / 10) = 1 Then j = 3   'T-Datum EF1
                ElseIf j = 3 Then
                    If Int(i / 10) < 10 Then j = 2  'F-Datum EF2...EF9
                    If Int(i / 10) = 1 Then j = 1   'F-Datum EF1
                End If

                Select Case j
                    Case 1, 2, 3
                        j = j + (Int(i / 10) - 1) * 3   'z.B bei 202: j=2+(20-1)*3  =59
                        j = j - 1 + 83                  'z.B bei 202: j=59-1+83     =141
                    Case Else
                        'Fehler --> Programm schliessen
                        Exit Function
                End Select
            Case Else
                        'Fehler --> Programm schliessen
                        Exit Function
        End Select

        'Daten aus der "Parameter.XLS" auslesen
        Open Dat_Name For Binary As #FN1
            Laenge = LOF(FN1)
            tmpStr = Input(Laenge, #FN1)
        Close #FN1

        'Ab 31.05.2010:
        If Laenge > 4000 Then j = j + 24
        tmpDB = Split(tmpStr, Chr(0) & Chr(64) & Chr(0) & Chr(0))
        tmpStr = tmpDB(j)               'Excel-Zelle mit zus.Zeichen
        Laenge = Asc(Left(tmpStr, 1))   'Laenge der Excel-Zelle
        tmpStr = Mid(tmpStr, 2, Laenge)

    Else
        'Datei "Parameter.XLS" fehlt (z.B. bei altem Projekt),
        'Parameter koennte mit ALTEM Programm festgestellt werden

        Zaehler = InStrRev(Dat_Name, "\")
        Dat_Name = Left(Dat_Name, Zaehler) & "param.dbf"
        If DateiVorhanden(Dat_Name) And Not DateiInBearbeitung(Dat_Name) Then
            'Startposition festlegen
            Select Case i
                Case 1: Start = 2102
                Case 2: Start = 2202
                Case 3: Start = 2302
            End Select

            'Datei auslesen
            Open Dat_Name For Binary Access Read As #FN1
        '    Open Dat_Name For Binary As #FN1
                'Einstellungen auslesen
                If Start > 2600 Then
                    Laenge = 8      'Datum
                Else
                    Laenge = 90     'Andere Parameter
                End If
                'Dateilaenge bei alter Version "param.dbf" = 2894
                'Dateilaenge bei neuer Version "param.dbf" = 3854
                'Differenz = 768
                '31.05.2010
                'Dateilaenge bei neuer Version "param.dbf" = 4814
                'Differenz = 1536
                If LOF(FN1) > 4000 Then
                    Start = Start + 1536
                ElseIf LOF(FN1) > 3000 Then
                    Start = Start + 768
                End If

                'Leerlauf
                For i = 1 To Start - 1
                    Zeichen_i = Input(1, FN1)
                Next i

                Zaehler = 0
                For i = Start To Start + Laenge - 1
                    Zeichen_i = Input(1, FN1)
                    tmpStr = tmpStr & Zeichen_i
                    If Zeichen_i = " " Then
                        Zaehler = Zaehler + 1
                        If Zaehler > 5 Then Exit For
                    Else: Zaehler = 0
                    End If
                Next i
            Close #FN1
            tmpStr = Trim(tmpStr)

            If tmpStr = Trim(Str(Val(tmpStr))) And Len(tmpStr) = 8 Then

                tmpStr = Right(tmpStr, 2) & "." & Mid(tmpStr, 5, 2) & "." & Left(tmpStr, 4)
            End If
        End If
    End If
    ENERGON_Parameter = Trim(tmpStr)
End Function





INQUEST-PP=macro
