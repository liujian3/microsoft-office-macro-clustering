Attribute VB_Name = "Module1"
'- |fffd||fffd||fffd|.1.03 |fffd||fffd| 29.02.2016
'  - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| > 6
'  - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-4
'  - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd|.|fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'       |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-4 |fffd| |fffd||fffd|.|fffd||fffd|.|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'  - |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd|". |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|

'Sub GeneratePD4(codepage, SourceCharset)
Sub GeneratePD4()

  Dim WorkRaw
  WorkRaw = 1
  PgBreak = 1

  Dim Reestr As ListObject
  Set Reestr = Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").ListObjects("|fffd||fffd||fffd||fffd||fffd||fffd|")

  If Reestr.ListRows.Count = 0 Then
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbInformation: Exit Sub
  End If

  'On Error GoTo ErrorHandler
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|.|fffd|.
  Application.DisplayAlerts = False
  Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Select
  ActiveWindow.SelectedSheets.Delete
  Application.DisplayAlerts = True
  Sheets.Add After:=ActiveSheet
  ActiveSheet.Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4"
  
  Sheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Visible = True
  Sheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Select
  Range("PD4Purpose, PD4Sum").Select
  Selection.ClearContents
  Range("PD4Purpose1, PD4Sum1").Select
  Selection.ClearContents
  
  If Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Shapes.Count > 0 Then
    Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Shapes(1).Delete
  End If
            
  StartQR = "ST00012|Name=" + CStr(Range("Name").Value) + "|PersonalAcc=" + CStr(Range("PersonalAcc").Value) + _
            "|BankName=" + CStr(Range("BankName").Value) + "|BIC=" + CStr(Range("BIC").Value) + _
            "|CorrespAcc=" + CStr(Range("CorrespAcc").Value) + "|PayeeINN=" + CStr(Range("INN").Value)
           
   'StartQR = "ST0001" + codepage + "|Name=" + CStr(Range("Name").Value) + "|PersonalAcc=" + CStr(Range("PersonalAcc").Value) + _
    '        "|BankName=" + CStr(Range("BankName").Value) + "|BIC=" + CStr(Range("BIC").Value) + _
    '        "|CorrespAcc=" + CStr(Range("CorrespAcc").Value) + "|PayeeINN=" + CStr(Range("INN").Value) + "|KPP=" + CStr(Range("KPP").Value)
            
  ProgressForm.SetProgress 0, ""
  ProgressForm.Show
  
  For y = 1 To Reestr.Range.Rows.Count - 1
  
    text_plt = StartQR
    For x = 1 To Reestr.ListColumns.Count
        
        Reestr.DataBodyRange(y, x).Font.ColorIndex = 1
        ErrVal = CheckVal(CStr(Reestr.DataBodyRange(y, x).Value), Reestr.ListColumns(x).Name)
        If ErrVal <> "" Then
            Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Activate
            MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| [" + Reestr.ListColumns(x).Name + "]. " + ErrVal + " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!!!")
            Reestr.DataBodyRange(y, x).Select
            Reestr.DataBodyRange(y, x).Font.ColorIndex = 3
            Exit Sub
        End If
    
        frmPurpose = ""
        Select Case Reestr.ListColumns(x).Name
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            frmPurpose = "|fffd||fffd|: " + CStr(Reestr.DataBodyRange(y, x).Value)
            Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            frmPurpose = ""
            
        Case "|fffd||fffd||fffd||fffd||fffd||fffd|"
            frmPurpose = "|fffd||fffd||fffd||fffd||fffd||fffd|: " + CStr(Format((Reestr.DataBodyRange(y, x).Value), "mmmm yyyy"))
        Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            frmPurpose = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " + CStr(Reestr.DataBodyRange(y, x).Value)
        Case "|fffd||fffd||fffd||fffd||fffd|"
           
            If InStr(1, Trim(Reestr.DataBodyRange(y, x).Value), ".") <> 0 Then
              Sum = Split(Trim(Reestr.DataBodyRange(y, x).Value), ".")
                valInt = Sum(0)
                valDiv = Sum(1)
                If Len(Trim(valDiv)) = 1 Then valDiv = valDiv + "0"
            Else
            If InStr(1, Trim(Reestr.DataBodyRange(y, x).Value), ",") <> 0 Then
              Sum = Split(Trim(Reestr.DataBodyRange(y, x).Value), ",")
                valInt = Sum(0)
                valDiv = Sum(1)
                If Len(Trim(valDiv)) = 1 Then valDiv = valDiv + "0"
                Else
                    valInt = Trim(Reestr.DataBodyRange(y, x).Value)
                    valDiv = "00"
                End If
            End If
            Range("PD4Sum").Value = "|fffd||fffd||fffd||fffd||fffd|: " + valInt + " |fffd||fffd||fffd|. " + valDiv + " |fffd||fffd||fffd|."
            Range("PD4Sum1").Value = Range("PD4Sum").Value
         
        Case Else
            frmPurpose = Reestr.ListColumns(x).Name + ": " + CStr(Reestr.DataBodyRange(y, x).Value)
        End Select
        If frmPurpose <> "" Then
            If Range("PD4Purpose").Value <> "" Then
                Range("PD4Purpose").Value = Range("PD4Purpose").Value + "; " + frmPurpose
                 Range("PD4Purpose1").Value = Range("PD4Purpose").Value
            Else
                Range("PD4Purpose").Value = frmPurpose
                Range("PD4Purpose1").Value = Range("PD4Purpose").Value
            End If
        End If
    
        QRteg = GetQR_Teg(Reestr.ListColumns(x).Name)
        If QRteg <> "" Then
            If Reestr.ListColumns(x).Name = "|fffd||fffd||fffd||fffd||fffd|" Then
                QRteg = "|" + QRteg + "=" + CStr(Reestr.DataBodyRange(y, x).Value * 100)
            Else
                If Reestr.ListColumns(x).Name = "|fffd||fffd||fffd||fffd||fffd||fffd|" Then
                    QRteg = "|" + QRteg + "=" + CStr(Format((Reestr.DataBodyRange(y, x).Value), "mmyy"))
                Else
                    QRteg = "|" + QRteg + "=" + FormatVal(CStr(Reestr.DataBodyRange(y, x).Value), Reestr.ListColumns(x).Name)
                End If
            End If
            text_plt = text_plt + QRteg
        End If
    Next x
    
    If CStr(Range("DopParShk").Value) <> "" Then
        text_plt = text_plt + "|" + CStr(Range("DopParShk").Value)
    End If
   
    text_plt = ChangeTextCharset(text_plt, "Windows-1251", "UTF-8")
    'text_plt = ChangeTextCharset(text_plt, "Windows-1251", SourceCharset)
    'text_plt = ChangeTextCharset(text_plt, "Windows-1251", "Windows-1251")
    make_qr (text_plt)
    
    ActiveSheet.Pictures.Insert(ThisWorkbook.Path & "\" & "qrcode.BMP").Select
    Set fs = CreateObject("Scripting.FileSystemObject")
    fs.deleteFile (ThisWorkbook.Path & "\" & "qrcode.BMP")
    Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Shapes(1).Left = Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Cells(17, 2).Left
    Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Shapes(1).Top = Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Cells(17, 2).Top
    
    DestCeil = "A" + Trim(str(WorkRaw))
    
    Range("PD4Shanlon").Select
    Application.CutCopyMode = False
    Selection.Copy
    Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Select
    Range(DestCeil).Select
    If y = 1 Then
        Selection.PasteSpecial Paste:=xlPasteColumnWidths, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
    End If
    ActiveSheet.Paste
     Rows(WorkRaw + 2).RowHeight = 9
      Rows(WorkRaw + 4).RowHeight = 9
       Rows(WorkRaw + 6).RowHeight = 9
    Rows(WorkRaw + 8).RowHeight = 9
    Rows(WorkRaw + 10).RowHeight = 9
    Rows(WorkRaw + 11).RowHeight = 9
    Rows(WorkRaw + 12).RowHeight = 9
    Rows(WorkRaw + 15).RowHeight = 9
    Rows(WorkRaw + 17).RowHeight = 9
    Rows(WorkRaw + 19).RowHeight = 9
    Rows(WorkRaw + 21).RowHeight = 9
    Rows(WorkRaw + 23).RowHeight = 9
    Rows(WorkRaw + 24).RowHeight = 9
    Rows(WorkRaw + 25).RowHeight = 9
    WorkRaw = WorkRaw + 27
    
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    PgBreak = PgBreak + 1
    If PgBreak > 2 Then
        PgBreak = 1
        Cells(WorkRaw, 1).Select
        ActiveSheet.HPageBreaks.Add Before:=ActiveCell
    End If
    
    Sheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Select
    Range("PD4Purpose, PD4Sum").Select
    Selection.ClearContents
    Range("PD4Purpose1, PD4Sum1").Select
    Selection.ClearContents
      
    If Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Shapes.Count > 0 Then
        Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Shapes(1).Delete
    End If
    
    ProgressForm.SetProgress y / Reestr.Range.Rows.Count, str(y) + " |fffd||fffd|" + str(Reestr.Range.Rows.Count - 1)
  
  Next y
  
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| QR
  Sheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Visible = False
  Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Select
    Dim Pic As Picture
        Range("B1").Select
        h1 = ActiveCell.Width
        h2 = Range("B1").ColumnWidth
                For Each Pic In ActiveSheet.Pictures
                    ActiveSheet.Shapes.Range(Array(Pic.Name)).Select
                    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0.8 = 80%, 1=100%
                    Selection.ShapeRange.ScaleHeight 0.9, True, msoScaleFromTopLeft
                    Selection.ShapeRange.ScaleWidth 0.9, True, msoScaleFromTopLeft
                    Selection.ShapeRange.IncrementLeft (h1 - ActiveSheet.Shapes.Range(Array(Pic.Name)).Width) / 2 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| QR |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                Next

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
    Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Select
    If ActiveSheet.Pictures.Count > 0 Then
        ActiveSheet.Shapes.Range(Array("LogoPic")).Select
        Selection.Copy
        Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Select
        nn = 27 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| QR
            For Z = 4 To (Reestr.Range.Rows.Count - 1) * nn Step nn 'Z |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| QR
                Cells(Z, 2).Select
                ActiveSheet.Paste
                Selection.ShapeRange.IncrementLeft (h1 - ActiveSheet.Shapes.Range(Array("LogoPic")).Width) / 2
            Next
    End If

  Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Select
  Cells(1, 1).Select
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  With ActiveSheet.PageSetup
    .LeftMargin = Application.InchesToPoints(0.393700787401575)
    .RightMargin = Application.InchesToPoints(0.393700787401575)
    '.TopMargin = Application.InchesToPoints(0.393700787401575)
    '.BottomMargin = Application.InchesToPoints(0.393700787401575)
    .TopMargin = Application.InchesToPoints(0.196850393700787)
    .BottomMargin = Application.InchesToPoints(0.196850393700787)
    .HeaderMargin = Application.InchesToPoints(0)
    .FooterMargin = Application.InchesToPoints(0)
    
    
  End With

ErrorHandler:
    'Application.EnableEvents = True
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    ProgressForm.Hide

End Sub


Attribute VB_Name = "Module2"

Private Function FormErrStr(str As String) As String
   FormErrStr = Chr(10) & str
   Exit Function
End Function

Private Sub FormErrMes(str As String, flMes As Boolean)
   If flMes Then
      MsgBox str
   End If
End Sub

Function FormatVal(Val As String, TypeVal As String) As String
    Select Case TypeVal
    Case "|fffd||fffd||fffd||fffd||fffd|"
        FormatVal = Format(Val, "#0.00")
        FormatVal = Replace(FormatVal, ",", ".")
    
        If FormatVal = "" Then FormatVal = "0.00"
        
    Case "|fffd||fffd||fffd||fffd||fffd||fffd|"
        FormatVal = Format(Val, "mmyy")
    Case Else
        FormatVal = UCase(RTrim(LTrim(Val)))
        
        FormatVal = Replace(FormatVal, Chr(10), "")
         FormatVal = Replace(FormatVal, Chr(13), "")
         
        
        
    End Select
End Function

Function CheckVal(Val As String, TypeVal As String) As String
    Select Case TypeVal
    Case "|fffd||fffd||fffd||fffd||fffd|"
        CheckVal = CheckAddr(Val)
    Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        CheckVal = CheckLicAcc(Val)
    Case "|fffd||fffd||fffd||fffd||fffd|"
        CheckVal = CheckSumma(Val)
    End Select
End Function

Private Function CheckLicAcc(Val As String) As String
   If (Len(Val) < 1) Or (Len(Val) > 50) Then
        CheckLicAcc = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| 1 |fffd||fffd| 50 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Function
   End If
   i = 1
   Do While i <= Len(Val)
      CurSymb = Mid(Val, i, 1)
      If (UCase(CurSymb) < "|fffd|" Or UCase(CurSymb) > "|fffd|") And _
       (CurSymb < "0" Or CurSymb > "9") And UCase(CurSymb) <> "|fffd|" And _
       (UCase(CurSymb) < "A" Or UCase(CurSymb) > "Z") And CurSymb <> "-" And CurSymb <> "_" And CurSymb <> "/" And CurSymb <> "\" Then
         CheckLicAcc = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:'-','_'."
         Exit Function
      End If
      i = i + 1
   Loop
   
   CheckLicAcc = ""
End Function

Private Function CheckAddr(Val As String) As String
   i = 1
   Do While i <= Len(Val)
      CurSymb = Mid(Val, i, 1)
      If (UCase(CurSymb) < "|fffd|" Or UCase(CurSymb) > "|fffd|") And UCase(CurSymb) <> "|fffd|" And _
        CurSymb <> " " And CurSymb <> "." And CurSymb <> "," And CurSymb <> "-" And CurSymb <> "/" And _
        (CurSymb < "0" Or CurSymb > "9") Then
         CheckAddr = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
         Exit Function
      End If
      i = i + 1
   Loop
   CheckAddr = ""
End Function

Private Function CheckSumma(Val As String)
   i = 1
   Do While i <= Len(Val)
      CurSymb = Mid(Val, i, 1)
      If (CurSymb < "0" Or CurSymb > "9") And CurSymb <> "." And CurSymb <> "-" And CurSymb <> "," Then
         CheckSumma = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
         Exit Function
      End If
      i = i + 1
   Loop
   CheckSumma = ""
End Function

Sub Worksheet_FormTXTFile()
Attribute Worksheet_FormTXTFile.VB_ProcData.VB_Invoke_Func = " \n14"
  
  Dim Reestr As ListObject
  Set Reestr = ActiveSheet.ListObjects("|fffd||fffd||fffd||fffd||fffd||fffd|")
  
  If Reestr.ListRows.Count = 0 Then
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbInformation: Exit Sub
  End If
  
  Set FSO = CreateObject("Scripting.FileSystemObject")
  
  ExportPath = Range("ExportPath").Value
  If ExportPath = "" Then
     MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", vbInformation: Exit Sub
  End If
  PathSeparator = Application.PathSeparator
  
  If Not Right(ExportPath, 1) = PathSeparator Then ExportPath = ExportPath + PathSeparator
  If Not (FSO.FolderExists(ExportPath)) Then
     MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " + ExportPath + " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", vbInformation: Exit Sub
  End If
  
  Open ExportPath + Range("ReestrName").Value For Output As 1
  
  For y = 1 To Reestr.Range.Rows.Count - 1
     RawValue = ""
     For x = 1 To Reestr.ListColumns.Count
        If RawValue <> "" Then RawValue = RawValue + ";"
        Reestr.DataBodyRange(y, x).Font.ColorIndex = 1
        ErrVal = CheckVal(CStr(Reestr.DataBodyRange(y, x).Value), Reestr.ListColumns(x).Name)
        If ErrVal <> "" Then
            MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| [" + Reestr.ListColumns(x).Name + "]. " + ErrVal + " |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!!!")
            Close #1
            Reestr.DataBodyRange(y, x).Select
            Reestr.DataBodyRange(y, x).Font.ColorIndex = 3
            FSO.deleteFile (ExportPath + Range("ReestrName").Value)
            Exit Sub
        End If
        
        RawValue = RawValue + FormatVal(CStr(Reestr.DataBodyRange(y, x).Value), Reestr.ListColumns(x).Name)
       
     Next x
     Print #1, RawValue
  Next y
  
  Close #1
  
  MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|: " + ExportPath + Range("ReestrName").Value
  
End Sub

Sub Worksheet_SelectFolder()
  Dim PathSeparator, Folder As String
  PathSeparator = Application.PathSeparator
  With Application.FileDialog(msoFileDialogFolderPicker)
     .ButtonName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
     .Title = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
     .InitialFileName = "C:" + PathSeparator
     If .Show <> -1 Then
        Exit Sub
     End If
     Folder = .SelectedItems(1)
     If Not Right(FolderPath, 1) = PathSeparator Then Folder = Folder + PathSeparator
  End With
  Range("ExportPath").Value = Folder
End Sub

Sub Worksheet_SelectPic()
On Error Resume Next
  
  Dim PathSeparator, Folder As String
  
    Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|4").Select
        Range("B1").Select
        h1 = ActiveCell.Width
    Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Select
  
  PathSeparator = Application.PathSeparator
  PicFile = Application.GetOpenFilename("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| PNG,*.png*,|fffd||fffd||fffd||fffd||fffd||fffd||fffd| JPG,*.jpg*,|fffd||fffd||fffd||fffd||fffd||fffd||fffd| BMP,*.bmp*", 2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", False)
  
  ActiveSheet.Shapes.Range(Array("LogoPic")).Select
  Selection.Delete
  
  With ActiveSheet.Pictures.Insert(PicFile)
    '.Select
    .ShapeRange.Name = "LogoPic"
    .Top = [B17].Top
    .Left = [B17].Left
  End With
  
  ActiveSheet.Shapes.Range(Array("LogoPic")).Width = h1 * 0.71
  
End Sub
Attribute VB_Name = "Module3"
Public Type QRrsBlocks
  totalCount As Long
  dataCount As Long
End Type
Public Modules() As Variant
Public dataList() As Byte
Public dataCashe()
Public dataCashe_null As Boolean
Public pos
Public ModuleCount As Integer
Public typeNumber As Integer
Public PAD0, PAD1
Public errorCorrectLevel
Public rsBlock()
Public rsBlocks() As QRrsBlocks
Public rsBlocks_length As Integer
Public mode As String
Public mode_ As Byte
Public buffer() As Byte
Public buf_len As Long
Public buf_len_bit As Long
Public qr_len As Integer
Public EXP_TABLE(256)
Public LOG_TABLE(256)
Public type_num()

Sub make_plt_v1()

  text_plt = ""
  wrk_str = 5
  Do While Len(Trim(Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 1))) > 0
    If Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 3) <= 0 Or Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 3) > 100 Then
      dummy = MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " + Trim(Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 1)), vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
      Exit Do
    End If
    If Len(Trim(Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 2))) > Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 3) Then
      dummy = MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " + Trim(Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 1)) + _
              " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." _
              , vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!")
      text_plt = text_plt + Left(Trim(Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 2)), Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 3))
    Else
      text_plt = text_plt + _
                 Left(Trim(Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 2)) + _
                 Space(Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 3)), Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 3))
    End If
    wrk_str = wrk_str + 1
  Loop

  If Len(text_plt) > 0 Then
    For i = Worksheets("QRcod").Pictures.Count To 1 Step -1
      Worksheets("QRcod").Shapes(i).Delete
    Next i
    make_qr (text_plt)
  
  Sheets("QRcod").Select
  Cells.Select
  Selection.ClearContents
  Range("B12").Select
  ActiveSheet.Pictures.Insert(ThisWorkbook.Path & "\" & "qrcode.BMP").Select
  Set fs = CreateObject("Scripting.FileSystemObject")
  fs.deleteFile (ThisWorkbook.Path & "\" & "qrcode.BMP")
  
  Range("A1").Select
  
  
  End If
End Sub

Sub make_plt_v2()

  text_plt = ""
  wrk_str = 5
  Do While Len(Trim(Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 1))) > 0
    text_wrk = ""
    If Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 3) <= 0 Or Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 3) > 200 Then
      dummy = MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " + Trim(Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 1)), vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
      Exit Do
    End If
    If Len(Trim(Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 2))) > Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 3) Then
      dummy = MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " + Trim(Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 1)) + _
              " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." _
              , vbExclamation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!")
      text_wrk = Left(Trim(Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 2)), Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 3))
    Else
      text_wrk = Trim(Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(wrk_str, 2))
    End If
    If Len(text_plt) > 0 Then
      text_plt = text_plt + "#" + text_wrk
    Else
      text_plt = text_wrk
    End If
    
    wrk_str = wrk_str + 1
    
  Loop

  If Len(text_plt) > 0 Then
    make_qr (text_plt)
  
  Sheets("QRcod").Select
  Cells.Select
  Selection.ClearContents
  Range("B12").Select
  ActiveSheet.Pictures.Insert(ThisWorkbook.Path & "\" & "qrcode.BMP").Select
  Set fs = CreateObject("Scripting.FileSystemObject")
  fs.deleteFile (ThisWorkbook.Path & "\" & "qrcode.BMP")
  
  Range("A1").Select
  
  
  End If
End Sub


Sub make_qr(qr_text)
  
  ReDim buffer(0)
  ReDim dataCashe(0)
  
  'qr_errl = Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(1, 2)
  qr_errl = "L" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  
  qr_len = Len(qr_text)
  typeNumber = 0
  
  ReDim dataList(qr_len)
  For i = 1 To qr_len
    dataList(i) = Asc(Mid(qr_text, i, 1))
  Next i
  
  Select Case qr_errl
    Case "L"
      err_col = 2
    Case "M"
      err_col = 3
    Case "Q"
      err_col = 4
    Case "H"
      err_col = 5
  End Select
  
  mode = "Binary" ' Numeric, Alphanumeric, Binary, Kanji
  
  Select Case mode
    Case "Numeric"
      mode_ = 1
    Case "Alphanumeric"
      mode_ = 2
    Case "Binary"
      mode_ = 4
    Case "Kanji"
      mode_ = 8
  End Select
  
  k = 0
  type_num = Array(0, 1, 17, 14, 11, 7, 2, 32, 26, 20, 14, _
                 3, 53, 42, 32, 24, 4, 78, 62, 46, 34, _
                 5, 106, 84, 60, 44, 6, 134, 106, 74, 58, _
                 7, 154, 122, 86, 64, 8, 192, 152, 108, 84, _
                 9, 230, 180, 130, 98, 10, 271, 213, 151, 119, _
                 11, 321, 251, 177, 137, 12, 367, 287, 203, 155, _
                 13, 425, 331, 241, 177, 14, 458, 362, 258, 194, _
                 15, 520, 412, 292, 220, 16, 586, 450, 322, 250, _
                 17, 644, 504, 364, 280, 18, 718, 560, 394, 310, _
                 19, 792, 624, 442, 338, 20, 858, 666, 482, 382, _
                 21, 929, 711, 509, 403, 22, 1003, 779, 565, 439, _
                 23, 1091, 857, 611, 461, 24, 1171, 911, 661, 511, _
                 25, 1273, 997, 715, 535, 26, 1367, 1059, 751, 593, _
                 27, 1465, 1125, 805, 625, 28, 1528, 1190, 868, 658, _
                 29, 1628, 1264, 908, 698, 30, 1732, 1370, 982, 742, _
                 31, 1840, 1452, 1030, 790, 32, 1952, 1538, 1112, 842, _
                 33, 2068, 1628, 1168, 898, 34, 2188, 1722, 1228, 958, _
                 35, 2303, 1809, 1283, 983, 36, 2431, 1911, 1351, 1051, _
                 37, 2563, 1989, 1423, 1093, 38, 2699, 2099, 1499, 1139, _
                 39, 2809, 2213, 1579, 1219, 40, 2953, 2331, 1663, 1273)

  PAD0 = 236
  PAD1 = 17
  
  For i = 0 To 7
    EXP_TABLE(i) = lshift(1, i)
  Next i
  For i = 8 To 255
    EXP_TABLE(i) = EXP_TABLE(i - 4) Xor EXP_TABLE(i - 5) Xor EXP_TABLE(i - 6) Xor EXP_TABLE(i - 8)
  Next i
        
  For i = 0 To 254
    LOG_TABLE(EXP_TABLE(i)) = i
  Next i

  
'  G15 = lshift(1, 10) Or lshift(1, 8) Or lshift(1, 5) Or lshift(1, 4) Or lshift(1, 2) Or lshift(1, 1) Or lshift(1, 0)
'  G18 = lshift(1, 12) Or lshift(1, 11) Or lshift(1, 10) Or lshift(1, 9) Or lshift(1, 8) Or lshift(1, 5) Or lshift(1, 2) Or lshift(1, 0)
'  G15_MASK = lshift(1, 14) Or lshift(1, 12) Or lshift(1, 10) Or lshift(1, 4) Or lshift(1, 1)
  
  
  For i = 1 To 40
    If type_num((i - 1) * 5 + err_col) >= qr_len Then
      typeNumber = type_num((i - 1) * 5 + 1)
      Exit For
    End If
  Next i

  dataCashe_null = True
  
  errorCorrectLevel = QRErrCorrLvl(qr_errl)
  ModuleCount = typeNumber * 4 + 17

  ReDim Modules(ModuleCount - 1, ModuleCount - 1)

  bestPattern = getBestMaskPattern()

  Call makeImpl(False, bestPattern)

  Call monochrome_BMP

End Sub


Sub makeImpl(test, maskPattern)
  
  For row = 0 To ModuleCount - 1
    For col = 0 To ModuleCount - 1
      Modules(row, col) = Null
    Next col
  Next row
  
  Call setupPositionProbePattern(0, 0)
  Call setupPositionProbePattern(ModuleCount - 7, 0)
  Call setupPositionProbePattern(0, ModuleCount - 7)

  Call setupPositionAdjustPattern

  Call setupTimingPattern

  Call setupTypeInfo(test, maskPattern)
  
  If typeNumber >= 7 Then
    Call setupTypeNumber(test)
  End If
  
  If dataCashe_null Then
    Call createData(typeNumber, errorCorrectLevel, dataList)
    dataCashe_null = False
  End If

  Call mapData(dataCashe, maskPattern)
  

End Sub

Function QRErrCorrLvl(errl)
Select Case errl
  Case "L"
    QRErrCorrLvl = 1
  Case "M"
    QRErrCorrLvl = 0
  Case "Q"
    QRErrCorrLvl = 3
  Case "H"
    QRErrCorrLvl = 2
End Select
End Function

Sub setupPositionProbePattern(row, col)
  For r = -1 To 7
  
    If Not (row + r <= -1 Or ModuleCount <= row + r) Then
      For c = -1 To 7
        If Not (col + c <= -1 Or ModuleCount <= col + c) Then
          If ((0 <= r And r <= 6 And (c = 0 Or c = 6)) Or _
             (0 <= c And c <= 6 And (r = 0 Or r = 6)) Or _
             (2 <= r And r <= 4 And 2 <= c And c <= 4)) Then
            Modules(row + r, col + c) = True
          Else
            Modules(row + r, col + c) = False
          End If
        End If
      Next c
    End If
  Next r

End Sub


Sub setupPositionAdjustPattern()
  pos = getPatternPosition(typeNumber - 1)
  len_pos = UBound(pos)
  If len_pos = 0 Then Exit Sub

  For i = 0 To len_pos
    For j = 0 To len_pos
      row = pos(i)
      col = pos(j)
      If IsNull(Modules(row, col)) Then
        For r = -2 To 2
          For c = -2 To 2
            If (r = -2 Or r = 2 Or c = -2 Or c = 2 Or (r = 0 And c = 0)) Then
               Modules(row + r, col + c) = True
            Else
               Modules(row + r, col + c) = False
            End If
          Next c
        Next r
      End If
    Next j
  Next i
End Sub


Function getPatternPosition(typeNmbr)
'  ReDim pos(typeNmbr)
  Select Case typeNmbr
    Case 0
      pos = Array(0)
    Case 1
      pos = Array(6, 18)
    Case 2
      pos = Array(6, 22)
    Case 3
      pos = Array(6, 26)
    Case 4
      pos = Array(6, 30)
    Case 5
      pos = Array(6, 34)
    Case 6
      pos = Array(6, 22, 38)
    Case 7
      pos = Array(6, 24, 42)
    Case 8
      pos = Array(6, 26, 46)
    Case 9
      pos = Array(6, 28, 50)
    Case 10
      pos = Array(6, 30, 54)
    Case 11
      pos = Array(6, 32, 58)
    Case 12
      pos = Array(6, 34, 62)
    Case 13
      pos = Array(6, 26, 46, 66)
    Case 14
      pos = Array(6, 26, 48, 70)
    Case 15
      pos = Array(6, 26, 50, 74)
    Case 16
      pos = Array(6, 30, 54, 78)
    Case 17
      pos = Array(6, 30, 56, 82)
    Case 18
      pos = Array(6, 30, 58, 86)
    Case 19
      pos = Array(6, 34, 62, 90)
    Case 20
      pos = Array(6, 28, 50, 72, 94)
    Case 21
      pos = Array(6, 26, 50, 74, 98)
    Case 22
      pos = Array(6, 30, 54, 78, 102)
    Case 23
      pos = Array(6, 28, 54, 80, 106)
    Case 24
      pos = Array(6, 32, 58, 84, 110)
    Case 25
      pos = Array(6, 30, 58, 86, 114)
    Case 26
      pos = Array(6, 34, 62, 90, 118)
    Case 27
      pos = Array(6, 26, 50, 74, 98, 122)
    Case 28
      pos = Array(6, 30, 54, 78, 102, 126)
    Case 29
      pos = Array(6, 26, 52, 78, 104, 130)
    Case 30
      pos = Array(6, 30, 56, 82, 108, 134)
    Case 31
      pos = Array(6, 34, 60, 86, 112, 138)
    Case 32
      pos = Array(6, 30, 58, 86, 114, 142)
    Case 33
      pos = Array(6, 34, 62, 90, 118, 146)
    Case 34
      pos = Array(6, 30, 54, 78, 102, 126, 150)
    Case 35
      pos = Array(6, 24, 50, 76, 102, 128, 154)
    Case 36
      pos = Array(6, 28, 54, 80, 106, 132, 158)
    Case 37
      pos = Array(6, 32, 58, 84, 110, 136, 162)
    Case 38
      pos = Array(6, 26, 54, 82, 110, 138, 166)
    Case 39
      pos = Array(6, 30, 58, 86, 114, 142, 170)
  End Select
  
  getPatternPosition = pos
  
End Function

Sub setupTimingPattern()

  For r = 8 To ModuleCount - 8 - 1
    If IsNull(Modules(r, 6)) Then
      Modules(r, 6) = (r Mod 2 = 0)
    End If
  Next r
  For c = 8 To ModuleCount - 8 - 1
    If IsNull(Modules(6, c)) Then
      Modules(6, c) = (c Mod 2 = 0)
    End If
  Next c

End Sub

Function getBestMaskPattern()

  minLostPoint = 0
  Pattern = 0

  For i = 0 To 7

    Call makeImpl(True, i)

    lostPoint = getLostPoint()

    If (i = 0 Or minLostPoint > lostPoint) Then
      minLostPoint = lostPoint
      Pattern = i
      getBestMaskPattern = Pattern
    End If
  Next i
  
End Function

Function getLostPoint()

  lostPoint = 0

' LEVEL1

  For row = 0 To ModuleCount - 1
    For col = 0 To ModuleCount - 1
      sameCount = 0
      dark = Modules(row, col)
      
      For r = -1 To 1
        If Not (row + r < 0 Or ModuleCount <= row + r) Then
           For c = -1 To 1
             If Not (col + c < 0 Or ModuleCount <= col + c) Then
               If Not (r = 0 And c = 0) Then
                 If (dark = Modules(row + r, col + c)) Then
                   sameCount = sameCount + 1
                 End If
               End If
             End If
           Next c
         End If
      Next r
    
      If (sameCount > 5) Then
        lostPoint = lostPoint + (3 + sameCount - 5)
      End If
    Next col
  Next row
            
' LEVEL2

  For row = 0 To ModuleCount - 2
    For col = 0 To ModuleCount - 2
      count_e = 0
      If Modules(row, col) Then count_e = count_e + 1
      If Modules(row + 1, col) Then count_e = count_e + 1
      If Modules(row, col + 1) Then count_e = count_e + 1
      If Modules(row + 1, col + 1) Then count_e = count_e + 1
      If (Count = 0 Or Count = 4) Then
        lostPoint = lostPoint + 3
      End If
    Next col
  Next row

' LEVEL3

  For row = 0 To ModuleCount - 1
    For col = 0 To ModuleCount - 6 - 1
      If Modules(row, col) And _
         Not Modules(row, col + 1) And _
         Modules(row, col + 2) And _
         Modules(row, col + 3) And _
         Modules(row, col + 4) And _
         Not Modules(row, col + 5) And _
         Modules(row, col + 6) Then
        
        lostPoint = lostPoint + 40
      End If
    Next col
  Next row
  
  For col = 0 To ModuleCount - 1
    For row = 0 To ModuleCount - 6 - 1
      If Modules(row, col) And _
         Not Modules(row + 1, col) And _
         Modules(row + 2, col) And _
         Modules(row + 3, col) And _
         Modules(row + 4, col) And _
         Not Modules(row + 5, col) And _
         Modules(row + 6, col) Then
         
         lostPoint = lostPoint + 40
       End If
     Next row
   Next col
            
' LEVEL4

  darkCount = 0

  For col = 0 To ModuleCount - 1
    For row = 0 To ModuleCount - 1
      If Modules(row, col) Then darkCount = darkCount + 1
    Next row
  Next col

  ratio = Abs(100 * darkCount / ModuleCount / ModuleCount - 50) / 5
  lostPoint = lostPoint + (ratio * 10)

  getLostPoint = lostPoint

End Function

Function lshift(base, cnt)
  base_w = base
  For i = 1 To cnt
    base_w = base_w * 2
  Next i
  lshift = base_w
End Function

Function rshift(base, cnt)
  base_w = base
  For i = 1 To cnt
    base_w = base_w \ 2
  Next i
  rshift = base_w
End Function



Sub setupTypeInfo(test, maskPattern)
  bits = getBitMaskTypeInfo(maskPattern)

' vertical
  For i = 0 To 14

    mod_ = (Not test And (Mid(bits, 15 - i, 1) = 1))
'    mod_ = (Mid(bits, 15 - i, 1) = 1)

    If i < 6 Then
      Modules(i, 8) = mod_
    Else
      If i < 8 Then
        Modules(i + 1, 8) = mod_
      Else
        Modules(ModuleCount - 15 + i, 8) = mod_
      End If
    End If
  Next i

' horizontal
  For i = 0 To 14

    mod_ = (Not test And (Mid(bits, 15 - i, 1) = 1))
'    mod_ = (Mid(bits, 15 - i, 1) = 1)
    
    If i < 8 Then
      Modules(8, ModuleCount - i - 1) = mod_
    Else
      If i < 9 Then
        Modules(8, 15 - i - 1 + 1) = mod_
      Else
        Modules(8, 15 - i - 1) = mod_
      End If
    End If
  Next i

' fixed module
  Modules(ModuleCount - 8, 8) = Not test
'  Modules(ModuleCount - 8, 8) = True

End Sub

Function getBitMaskTypeInfo(maskPattern)

  Select Case errorCorrectLevel
    Case 1
      BitMask = Choose(maskPattern + 1, "111011111000100", _
                                        "111001011110011", _
                                        "111110110101010", _
                                        "111100010011101", _
                                        "110011000101111", _
                                        "110001100011000", _
                                        "110110001000001", _
                                        "110100101110110")
    Case 0
      BitMask = Choose(maskPattern + 1, "101010000010010", _
                                        "101000100100101", _
                                        "101111001111100", _
                                        "101101101001011", _
                                        "100010111111001", _
                                        "100000011001110", _
                                        "100111110010111", _
                                        "100101010100000")
    Case 3
      BitMask = Choose(maskPattern + 1, "011010101011111", _
                                        "011000001101000", _
                                        "011111100110001", _
                                        "011101000000110", _
                                        "010010010110100", _
                                        "010000110000011", _
                                        "010111011011010", _
                                        "010101111101101")
    Case 2
      BitMask = Choose(maskPattern + 1, "001011010001001", _
                                        "001001110111110", _
                                        "001110011100111", _
                                        "001100111010000", _
                                        "000011101100010", _
                                        "000001001010101", _
                                        "000110100001100", _
                                        "000100000111011")
  End Select
  
  getBitMaskTypeInfo = BitMask

End Function

Sub setupTypeNumber(test)


  bits = getBCHTypeNumber(typeNumber)

  For i = 0 To 17
    mod_ = (Not test And (Mid(bits, i + 1, 1) = 1))
    Modules(i \ 3, i Mod 3 + ModuleCount - 8 - 3) = mod_
  Next i

  For i = 0 To 17
    mod_ = (Not test And (Mid(bits, i + 1, 1) = 1))
    Modules(i Mod 3 + ModuleCount - 8 - 3, i \ 3) = mod_
  Next i
  
End Sub

Function getBCHTypeNumber(TypNum)
'  bits = Choose(TypNum - 6, "001010010011111000", "000111101101000100", "100110010101100100", _
                            "011001011001010100", "011011111101110100", "001000110111001100", _
                            "111000100001101100", "010110000011011100", "000101001001111100", _
                            "000111101101000010", "010111010001100010", "111010000101010010", _
                            "001001100101110010", "011001011001001010", "011000001011101010", _
                            "100100110001011010", "000110111111111010", "001000110111000110", _
                            "000100001111100110", "110101011111010110", "000001110001110110", _
                            "010110000011001110", "001111110011101110", "101011101011011110", _
                            "000000101001111110", "101010111001000001", "000001111011100001", _
                            "010111010001010001", "011111001111110001", "110100001101001001", _
                            "001110100001101001", "001001100101011001", "010000010101111001", _
                            "100101100011000101")
  
  
  bits = Choose(TypNum - 6, "001010010011111000", "001111011010000100", "100110010101100100", _
                            "110010110010010100", "011011111101110100", "010001101110001100", _
                            "111000100001101100", "101100000110011100", "000101001001111100", _
                            "000111101101000010", "101110100010100010", "111010000101010010", _
                            "010011001010110010", "011001011001001010", "110000010110101010", _
                            "100100110001011010", "001101111110111010", "001000110111000110", _
                            "100001111000100110", "110101011111010110", "011100010000110110", _
                            "010110000011001110", "111111001100101110", "101011101011011110", _
                            "000010100100111110", "101010111001000001", "000011110110100001", _
                            "010111010001010001", "111110011110110001", "110100001101001001", _
                            "011101000010101001", "001001100101011001", "100000101010111001", _
                            "100101100011000101")
  
  
  getBCHTypeNumber = bits
  
End Function


Sub createData(typeNumber, errorCorrectLevel, dataList)

  Call getRSBlocks(typeNumber, errorCorrectLevel)
  buf_len = 0
  buf_len_bit = 0
               
  Call put_buffer(mode_, 4)
  Call put_buffer(qr_len, getLengthInBits(mode, typeNumber))
  For i = 1 To qr_len
    Call put_buffer(dataList(i), 8)
  Next i
' calc num max data.
  totalDataCount = 0
             
  For i = 0 To rsBlocks_length - 1
    totalDataCount = totalDataCount + rsBlocks(i).dataCount
  Next i
  
  If buf_len_bit > totalDataCount * 8 Then
    dummy = MsgBox("code length overflow. (" + str(buf_len_bit) + ">" + str(totalDataCount * 8) + ")", vbCritical)
    End
  End If

' end code
  If buf_len_bit + 4 <= totalDataCount * 8 Then
    Call put_buffer(0, 4)
  End If
            
' padding
  Do While buf_len_bit Mod 8 <> 0
    Call put_bit_buf(False)
  Loop
  
' padding
  Do While True

    If buf_len_bit >= totalDataCount * 8 Then
      Exit Do
    End If
    
    Call put_buffer(PAD0, 8)

    If buf_len_bit >= totalDataCount * 8 Then
      Exit Do
    End If
    
    Call put_buffer(PAD1, 8)
  Loop

  Call createBytes(buffer)

End Sub

Sub createBytes(buffer)

  qroffset = 0

  maxDcCount = 0
  maxEcCount = 0
  Dim dcdata()
  Dim ecdata()
  Dim vr_arr()
  
  ReDim dcdata(rsBlocks_length, 256)
  ReDim ecdata(rsBlocks_length, 256)

  For r = 0 To rsBlocks_length - 1

    dccount = rsBlocks(r).dataCount
    ecCount = rsBlocks(r).totalCount - dccount

    maxDcCount = IIf(maxDcCount > dccount, maxDcCount, dccount)
    maxEcCount = IIf(maxEcCount > ecCount, maxEcCount, ecCount)

    For i = 0 To dccount - 1
      dcdata(r, i) = 255 And buffer(i + qroffset)
    Next i
    dcdata(r, 256) = dccount
                        
    qroffset = qroffset + dccount

    rsPoly = getErrorCorrectPolynomial(ecCount)
    
    ReDim vr_arr(dcdata(r, 256) - 1)
    For i = 0 To dcdata(r, 256) - 1
      vr_arr(i) = dcdata(r, i)
    Next i
    
    rawPoly = qrPolynomial(vr_arr, UBound(rsPoly))

    modPoly = qrMod(rawPoly, rsPoly)
    For i = 0 To UBound(rsPoly) - 1
      modIndex = i + UBound(modPoly) + 1 - UBound(rsPoly)
      If modIndex >= 0 Then
        ecdata(r, i) = modPoly(modIndex)
      Else
        ecdata(r, i) = 0
      End If
    Next i
    ecdata(r, 256) = UBound(rsPoly)
  Next r

  totalCodeCount = 0
  For i = 0 To rsBlocks_length - 1
    totalCodeCount = totalCodeCount + rsBlocks(i).totalCount
  Next i

  ReDim dataCashe(totalCodeCount)
  Index = 0

  For i = 0 To maxDcCount - 1
    For r = 0 To rsBlocks_length - 1
      If i < dcdata(r, 256) Then
        dataCashe(Index) = dcdata(r, i)
        Index = Index + 1
      End If
    Next r
  Next i

  For i = 0 To maxEcCount - 1
    For r = 0 To rsBlocks_length - 1
      If (i < ecdata(r, 256)) Then
        dataCashe(Index) = ecdata(r, i)
        Index = Index + 1
      End If
    Next r
  Next i
'            return data;
  
End Sub

Sub mapData(data, maskPattern)

  inc = -1
  row = ModuleCount - 1
  bitIndex = 7
  byteIndex = 0

  For col = ModuleCount - 1 To 1 Step -2

    If col = 6 Then col = col - 1

    Do While True

      For c = 0 To 1
        
        If IsNull(Modules(row, col - c)) Then
           
          dark = False
          
          If byteIndex < UBound(data) Then
            dark = ((rshift(data(byteIndex), bitIndex) And 1) = 1)
          End If
          
          Mask = MaskFunction(maskPattern, row, col - c)
          
          If (Mask) Then
            dark = Not dark
          End If
          
          Modules(row, col - c) = dark
          bitIndex = bitIndex - 1
          
          If (bitIndex = -1) Then
            byteIndex = byteIndex + 1
             bitIndex = 7
          End If
        End If
      Next c
      
      row = row + inc
       
      If (row < 0 Or ModuleCount <= row) Then
        row = row - inc
        inc = -inc
        Exit Do
      End If
    Loop
  Next col
End Sub

Sub getRsBlockTable(typeNumber, errorCorrectLevel)

  Select Case errorCorrectLevel
    Case 1 'L
      num = (typeNumber - 1) * 4 + 0
    Case 0 'M
      num = (typeNumber - 1) * 4 + 1
    Case 3 'Q
      num = (typeNumber - 1) * 4 + 2
    Case 2 'H
      num = (typeNumber - 1) * 4 + 3
  End Select
  
  Select Case num
    Case 0
      rsBlock = Array(1, 26, 19)
    Case 1
      rsBlock = Array(1, 26, 16)
    Case 2
      rsBlock = Array(1, 26, 13)
    Case 3
      rsBlock = Array(1, 26, 9)
    Case 4
      rsBlock = Array(1, 44, 34)
    Case 5
      rsBlock = Array(1, 44, 28)
    Case 6
      rsBlock = Array(1, 44, 22)
    Case 7
      rsBlock = Array(1, 44, 16)
    Case 8
      rsBlock = Array(1, 70, 55)
    Case 9
      rsBlock = Array(1, 70, 44)
    Case 10
      rsBlock = Array(2, 35, 17)
    Case 11
      rsBlock = Array(2, 35, 13)
    Case 12
      rsBlock = Array(1, 100, 80)
    Case 13
      rsBlock = Array(2, 50, 32)
    Case 14
      rsBlock = Array(2, 50, 24)
    Case 15
      rsBlock = Array(4, 25, 9)
    Case 16
      rsBlock = Array(1, 134, 108)
    Case 17
      rsBlock = Array(2, 67, 43)
    Case 18
      rsBlock = Array(2, 33, 15, 2, 34, 16)
    Case 19
      rsBlock = Array(2, 33, 11, 2, 34, 12)
    Case 20
      rsBlock = Array(2, 86, 68)
    Case 21
      rsBlock = Array(4, 43, 27)
    Case 22
      rsBlock = Array(4, 43, 19)
    Case 23
      rsBlock = Array(4, 43, 15)
    Case 24
      rsBlock = Array(2, 98, 78)
    Case 25
      rsBlock = Array(4, 49, 31)
    Case 26
      rsBlock = Array(2, 32, 14, 4, 33, 15)
    Case 27
      rsBlock = Array(4, 39, 13, 1, 40, 14)
    Case 28
      rsBlock = Array(2, 121, 97)
    Case 29
      rsBlock = Array(2, 60, 38, 2, 61, 39)
    Case 30
      rsBlock = Array(4, 40, 18, 2, 41, 19)
    Case 31
      rsBlock = Array(4, 40, 14, 2, 41, 15)
    Case 32
      rsBlock = Array(2, 146, 116)
    Case 33
      rsBlock = Array(3, 58, 36, 2, 59, 37)
    Case 34
      rsBlock = Array(4, 36, 16, 4, 37, 17)
    Case 35
      rsBlock = Array(4, 36, 12, 4, 37, 13)
    Case 36
      rsBlock = Array(2, 86, 68, 2, 87, 69)
    Case 37
      rsBlock = Array(4, 69, 43, 1, 70, 44)
    Case 38
      rsBlock = Array(6, 43, 19, 2, 44, 20)
    Case 39
      rsBlock = Array(6, 43, 15, 2, 44, 16)
    Case 40
      rsBlock = Array(4, 101, 81)
    Case 41
      rsBlock = Array(1, 80, 50, 4, 81, 51)
    Case 42
      rsBlock = Array(4, 50, 22, 4, 51, 23)
    Case 43
      rsBlock = Array(3, 36, 12, 8, 37, 13)
    Case 44
      rsBlock = Array(2, 116, 92, 2, 117, 93)
    Case 45
      rsBlock = Array(6, 58, 36, 2, 59, 37)
    Case 46
      rsBlock = Array(4, 46, 20, 6, 47, 21)
    Case 47
      rsBlock = Array(7, 42, 14, 4, 43, 15)
    Case 48
      rsBlock = Array(4, 133, 107)
    Case 49
      rsBlock = Array(8, 59, 37, 1, 60, 38)
    Case 50
      rsBlock = Array(8, 44, 20, 4, 45, 21)
    Case 51
      rsBlock = Array(12, 33, 11, 4, 34, 12)
    Case 52
      rsBlock = Array(3, 145, 115, 1, 146, 116)
    Case 53
      rsBlock = Array(4, 64, 40, 5, 65, 41)
    Case 54
      rsBlock = Array(11, 36, 16, 5, 37, 17)
    Case 55
      rsBlock = Array(11, 36, 12, 5, 37, 13)
    Case 56
      rsBlock = Array(5, 109, 87, 1, 110, 88)
    Case 57
      rsBlock = Array(5, 65, 41, 5, 66, 42)
    Case 58
      rsBlock = Array(5, 54, 24, 7, 55, 25)
    Case 59
      rsBlock = Array(11, 36, 12, 7, 37, 13)
    Case 60
      rsBlock = Array(5, 122, 98, 1, 123, 99)
    Case 61
      rsBlock = Array(7, 73, 45, 3, 74, 46)
    Case 62
      rsBlock = Array(15, 43, 19, 2, 44, 20)
    Case 63
      rsBlock = Array(3, 45, 15, 13, 46, 16)
    Case 64
      rsBlock = Array(1, 135, 107, 5, 136, 108)
    Case 65
      rsBlock = Array(10, 74, 46, 1, 75, 47)
    Case 66
      rsBlock = Array(1, 50, 22, 15, 51, 23)
    Case 67
      rsBlock = Array(2, 42, 14, 17, 43, 15)
    Case 68
      rsBlock = Array(5, 150, 120, 1, 151, 121)
    Case 69
      rsBlock = Array(9, 69, 43, 4, 70, 44)
    Case 70
      rsBlock = Array(17, 50, 22, 1, 51, 23)
    Case 71
      rsBlock = Array(2, 42, 14, 19, 43, 15)
    Case 72
      rsBlock = Array(3, 141, 113, 4, 142, 114)
    Case 73
      rsBlock = Array(3, 70, 44, 11, 71, 45)
    Case 74
      rsBlock = Array(17, 47, 21, 4, 48, 22)
    Case 75
      rsBlock = Array(9, 39, 13, 16, 40, 14)
    Case 76
      rsBlock = Array(3, 135, 107, 5, 136, 108)
    Case 77
      rsBlock = Array(3, 67, 41, 13, 68, 42)
    Case 78
      rsBlock = Array(15, 54, 24, 5, 55, 25)
    Case 79
      rsBlock = Array(15, 43, 15, 10, 44, 16)
    Case 80
      rsBlock = Array(4, 144, 116, 4, 145, 117)
    Case 81
      rsBlock = Array(17, 68, 42)
    Case 82
      rsBlock = Array(17, 50, 22, 6, 51, 23)
    Case 83
      rsBlock = Array(19, 46, 16, 6, 47, 17)
    Case 84
      rsBlock = Array(2, 139, 111, 7, 140, 112)
    Case 85
      rsBlock = Array(17, 74, 46)
    Case 86
      rsBlock = Array(7, 54, 24, 16, 55, 25)
    Case 87
      rsBlock = Array(34, 37, 13)
    Case 88
      rsBlock = Array(4, 151, 121, 5, 152, 122)
    Case 89
      rsBlock = Array(4, 75, 47, 14, 76, 48)
    Case 90
      rsBlock = Array(11, 54, 24, 14, 55, 25)
    Case 91
      rsBlock = Array(16, 45, 15, 14, 46, 16)
    Case 92
      rsBlock = Array(6, 147, 117, 4, 148, 118)
    Case 93
      rsBlock = Array(6, 73, 45, 14, 74, 46)
    Case 94
      rsBlock = Array(11, 54, 24, 16, 55, 25)
    Case 95
      rsBlock = Array(30, 46, 16, 2, 47, 17)
    Case 96
      rsBlock = Array(8, 132, 106, 4, 133, 107)
    Case 97
      rsBlock = Array(8, 75, 47, 13, 76, 48)
    Case 98
      rsBlock = Array(7, 54, 24, 22, 55, 25)
    Case 99
      rsBlock = Array(22, 45, 15, 13, 46, 16)
    Case 100
      rsBlock = Array(10, 142, 114, 2, 143, 115)
    Case 101
      rsBlock = Array(19, 74, 46, 4, 75, 47)
    Case 102
      rsBlock = Array(28, 50, 22, 6, 51, 23)
    Case 103
      rsBlock = Array(33, 46, 16, 4, 47, 17)
    Case 104
      rsBlock = Array(8, 152, 122, 4, 153, 123)
    Case 105
      rsBlock = Array(22, 73, 45, 3, 74, 46)
    Case 106
      rsBlock = Array(8, 53, 23, 26, 54, 24)
    Case 107
      rsBlock = Array(12, 45, 15, 28, 46, 16)
    Case 108
      rsBlock = Array(3, 147, 117, 10, 148, 118)
    Case 109
      rsBlock = Array(3, 73, 45, 23, 74, 46)
    Case 110
      rsBlock = Array(4, 54, 24, 31, 55, 25)
    Case 111
      rsBlock = Array(11, 45, 15, 31, 46, 16)
    Case 112
      rsBlock = Array(7, 146, 116, 7, 147, 117)
    Case 113
      rsBlock = Array(21, 73, 45, 7, 74, 46)
    Case 114
      rsBlock = Array(1, 53, 23, 37, 54, 24)
    Case 115
      rsBlock = Array(19, 45, 15, 26, 46, 16)
    Case 116
      rsBlock = Array(5, 145, 115, 10, 146, 116)
    Case 117
      rsBlock = Array(19, 75, 47, 10, 76, 48)
    Case 118
      rsBlock = Array(15, 54, 24, 25, 55, 25)
    Case 119
      rsBlock = Array(23, 45, 15, 25, 46, 16)
    Case 120
      rsBlock = Array(13, 145, 115, 3, 146, 116)
    Case 121
      rsBlock = Array(2, 74, 46, 29, 75, 47)
    Case 122
      rsBlock = Array(42, 54, 24, 1, 55, 25)
    Case 123
      rsBlock = Array(23, 45, 15, 28, 46, 16)
    Case 124
      rsBlock = Array(17, 145, 115)
    Case 125
      rsBlock = Array(10, 74, 46, 23, 75, 47)
    Case 126
      rsBlock = Array(10, 54, 24, 35, 55, 25)
    Case 127
      rsBlock = Array(19, 45, 15, 35, 46, 16)
    Case 128
      rsBlock = Array(17, 145, 115, 1, 146, 116)
    Case 129
      rsBlock = Array(14, 74, 46, 21, 75, 47)
    Case 130
      rsBlock = Array(29, 54, 24, 19, 55, 25)
    Case 131
      rsBlock = Array(11, 45, 15, 46, 46, 16)
    Case 132
      rsBlock = Array(13, 145, 115, 6, 146, 116)
    Case 133
      rsBlock = Array(14, 74, 46, 23, 75, 47)
    Case 134
      rsBlock = Array(44, 54, 24, 7, 55, 25)
    Case 135
      rsBlock = Array(59, 46, 16, 1, 47, 17)
    Case 136
      rsBlock = Array(12, 151, 121, 7, 152, 122)
    Case 137
      rsBlock = Array(12, 75, 47, 26, 76, 48)
    Case 138
      rsBlock = Array(39, 54, 24, 14, 55, 25)
    Case 139
      rsBlock = Array(22, 45, 15, 41, 46, 16)
    Case 140
      rsBlock = Array(6, 151, 121, 14, 152, 122)
    Case 141
      rsBlock = Array(6, 75, 47, 34, 76, 48)
    Case 142
      rsBlock = Array(46, 54, 24, 10, 55, 25)
    Case 143
      rsBlock = Array(2, 45, 15, 64, 46, 16)
    Case 144
      rsBlock = Array(17, 152, 122, 4, 153, 123)
    Case 145
      rsBlock = Array(29, 74, 46, 14, 75, 47)
    Case 146
      rsBlock = Array(49, 54, 24, 10, 55, 25)
    Case 147
      rsBlock = Array(24, 45, 15, 46, 46, 16)
    Case 148
      rsBlock = Array(4, 152, 122, 18, 153, 123)
    Case 149
      rsBlock = Array(13, 74, 46, 32, 75, 47)
    Case 150
      rsBlock = Array(48, 54, 24, 14, 55, 25)
    Case 151
      rsBlock = Array(42, 45, 15, 32, 46, 16)
    Case 152
      rsBlock = Array(20, 147, 117, 4, 148, 118)
    Case 153
      rsBlock = Array(40, 75, 47, 7, 76, 48)
    Case 154
      rsBlock = Array(43, 54, 24, 22, 55, 25)
    Case 155
      rsBlock = Array(10, 45, 15, 67, 46, 16)
    Case 156
      rsBlock = Array(19, 148, 118, 6, 149, 119)
    Case 157
      rsBlock = Array(18, 75, 47, 31, 76, 48)
    Case 158
      rsBlock = Array(34, 54, 24, 34, 55, 25)
    Case 159
      rsBlock = Array(20, 45, 15, 61, 46, 16)

  End Select
End Sub

Function getLengthInBits(mode, type_v)

  len_bit = 0
  If (1 <= type_v And type_v < 10) Then
      
' 1 - 9
  
    Select Case mode
      Case "Numeric"
        len_bit = 10
      Case "Alphanumeric"
        len_bit = 9
      Case "Binary"
        len_bit = 8
      Case "Kanji"
        len_bit = 8
    End Select
            
  Else
    If (type_v < 27) Then

' 10 - 26

      Select Case mode
        Case "Numeric"
          len_bit = 12
        Case "Alphanumeric"
          len_bit = 11
        Case "Binary"
          len_bit = 16
        Case "Kanji"
          len_bit = 10
      End Select

    Else
      If (type_v <= 40) Then

' 27 - 40

        Select Case mode
          Case "Numeric"
            len_bit = 14
          Case "Alphanumeric"
            len_bit = 13
          Case "Binary"
            len_bit = 16
          Case "Kanji"
            len_bit = 12
        End Select
      End If
    End If
  End If
  
  getLengthInBits = len_bit
  
End Function

Sub put_buffer(num, length)
  For i = 0 To length - 1
    Call put_bit_buf((rshift(num, length - i - 1) And 1) = 1)
  Next i
End Sub
        
Sub put_bit_buf(bit As Boolean)
  bufIndex = buf_len_bit \ 8
  If (buf_len <= bufIndex) Then
    buf_len = buf_len + 1
    ReDim Preserve buffer(buf_len)
  End If
  
  If (bit) Then
    buffer(bufIndex) = buffer(bufIndex) Or rshift(128, buf_len_bit Mod 8)
  End If
  buf_len_bit = buf_len_bit + 1
    
End Sub

Sub getRSBlocks(typeNumber, errorCorrectLevel)

  Call getRsBlockTable(typeNumber, errorCorrectLevel)

  ReDim rsBlocks(0)
    
  length = (UBound(rsBlock) + 1) / 3
  
  len_rs = 0
  next_rs = 0
  
  For i = 0 To length - 1
  
    cnt = rsBlock(i * 3 + 0)
    
    len_rs = len_rs + cnt
    
    ReDim Preserve rsBlocks(len_rs)
    
    totalCount = rsBlock(i * 3 + 1)
    dataCount = rsBlock(i * 3 + 2)

    For j = 0 To cnt - 1
      rsBlocks(next_rs).totalCount = totalCount
      rsBlocks(next_rs).dataCount = dataCount
      next_rs = next_rs + 1
    Next j
 Next i
 rsBlocks_length = next_rs
End Sub


Function glog(n)

  If (n < 1) Then
    MsgBox (" Error glog(" + str(n) + ")")
  End
  End If

  glog = LOG_TABLE(n)
End Function

Function gexp(n)

  Do While n < 0
    n = n + 255
  Loop
  
  Do While n >= 256
    n = n - 255
  Loop

  gexp = EXP_TABLE(n)

End Function

Function MaskFunction(maskPattern, i, j)

  Select Case maskPattern

    Case 0 'PATTERN000
      MaskFunction = ((i + j) Mod 2) = 0
    Case 1 'PATTERN001
      MaskFunction = (i Mod 2) = 0
    Case 2 'PATTERN010
      MaskFunction = (j Mod 3) = 0
    Case 3 'PATTERN011
      MaskFunction = ((i + j) Mod 3) = 0
    Case 4 'PATTERN100
      MaskFunction = ((i \ 2) + (j \ 3)) Mod 2 = 0
    Case 5 'PATTERN101
      MaskFunction = (((i * j) Mod 2) + ((i * j) Mod 3)) = 0
    Case 6 'PATTERN110
      MaskFunction = ((((i * j) Mod 2) + ((i * j) Mod 3)) Mod 2) = 0
    Case 7 'PATTERN111
      MaskFunction = ((((i * j) Mod 3) + ((i + j) Mod 2)) Mod 2) = 0
  End Select

End Function

Function getErrorCorrectPolynomial(errorCorrectLength)
  Dim a()
  Dim b()
  a = Array(1)
  a = qrPolynomial(a, 0)
  For i = 0 To errorCorrectLength - 1
    b = Array(1, gexp(i))
    b = qrPolynomial(b, 0)
    a = multiply(a, b)
  Next i
  getErrorCorrectPolynomial = a
End Function

Function qrPolynomial(num, shift)
  
  Dim v_num()
  
  v_offset = 0
  Do While ((v_offset < (UBound(num) + 1)) And num(v_offset) = 0)
    v_offset = v_offset + 1
  Loop

  ReDim v_num(UBound(num) - v_offset + shift)
  For i = 0 To UBound(num) - v_offset
    v_num(i) = num(i + v_offset)
  Next i
  
  qrPolynomial = v_num
  
End Function

Function multiply(t, e)
  Dim v_num()
  Dim rt()
  ReDim v_num((UBound(t)) + (UBound(e)))
  For i = 0 To UBound(t)
    For j = 0 To UBound(e)
      v_num(i + j) = v_num(i + j) Xor gexp(glog(t(i)) + glog(e(j)))
    Next j
  Next i
  rt = qrPolynomial(v_num, 0)
  multiply = rt
End Function

Function qrMod(t, e)
  
  Dim mod_num()

  If (UBound(t) - UBound(e) < 0) Then
    qrMod = t
    Exit Function
  End If

  ratio = glog(t(0)) - glog(e(0))

  ReDim mod_num(UBound(t))
  For i = 0 To UBound(t)
    mod_num(i) = t(i)
  Next i

  For i = 0 To UBound(e)
    mod_num(i) = mod_num(i) Xor gexp(glog(e(i)) + ratio)
  Next i

'            // recursive call
  
  b = qrPolynomial(mod_num, 0)
  c = qrMod(b, e)
  
  qrMod = c
End Function





Attribute VB_Name = "Module4"
Option Explicit
Option Base 1

Private Type typHEADER
    strType As String * 2  ' Signature of file = "BM"
    lngSize As Long        ' File size
    intRes1 As Integer     ' reserved = 0
    intRes2 As Integer     ' reserved = 0
    lngOffset As Long      ' offset to the bitmap data (bits)
End Type

Private Type typINFOHEADER
    lngSize As Long        ' Size
    lngWidth As Long       ' Height
    lngHeight As Long      ' Length
    intPlanes As Integer   ' Number of image planes in file
    intBits As Integer     ' Number of bits per pixel
    lngCompression As Long ' Compression type (set to zero)
    lngImageSize As Long   ' Image size (bytes, set to zero)
    lngxResolution As Long ' Device resolution (set to zero)
    lngyResolution As Long ' Device resolution (set to zero)
    lngColorCount As Long  ' Number of colors (set to zero for 24 bits)
    lngImportantColors As Long ' "Important" colors (set to zero)
End Type

Private Type typPIXEL
    bytB As Byte    ' Blue
    bytG As Byte    ' Green
    bytR As Byte    ' Red
End Type

Private Type typBITMAPFILE
    bmfh As typHEADER
    bmfi As typINFOHEADER
    bmct() As Long
    bmbits() As Byte
End Type

Private Scale_BMP As Integer

Sub monochrome_BMP()
  Dim bmpFile As typBITMAPFILE
  Dim lngRowSize As Long
  Dim lngPixelArraySize As Long
  Dim lngFileSize As Long
  Dim strBMP As String
  Dim bitcnt As Integer
  Dim i As Integer, j As Integer, k As Integer, l As Integer
  Dim bm_byte As Byte
  Dim fs As Object
  Dim r As Long, MD_count_sc As Long, cl As Integer
    
  'Scale_BMP = Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Cells(2, 2)
  Scale_BMP = 2 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    
  MD_count_sc = ModuleCount * Scale_BMP
'  If MD_count_sc Mod 4 > 0 Then MD_count_sc = MD_count_sc + 4 - (MD_count_sc Mod 4)
  ReDim Modules_new(MD_count_sc, MD_count_sc)
  For i = 0 To ModuleCount - 1
    For j = 0 To ModuleCount - 1
      For r = 1 To Scale_BMP
        For cl = 1 To Scale_BMP
          Modules_new(r + (i * Scale_BMP), cl + (j * Scale_BMP)) = Modules(i, j)
        Next cl
      Next r
    Next j
  Next i
  
'  For j = 1 To MD_count_sc
'    For i = 1 To MD_count_sc
'      Worksheets("QRcod").Cells(j, i) = IIf(Modules_new(j, i), 1, 0)
'    Next i
'  Next j
 
  
  With bmpFile
' BMP Header
    
    With .bmfh
      .strType = "BM"      ' Basic BMP file
      .lngSize = 0         ' Determine later (total file size in bytes)
      .intRes1 = 0         ' Set to zero
      .intRes2 = 0         ' Set to zero
      .lngOffset = 62       ' Location where the bitmap data start
    End With
       
    With .bmfi
      .lngSize = 40        ' This will be a Version 3 BMP
      .lngWidth = MD_count_sc ' Number of pixels wide
      .lngHeight = MD_count_sc ' Number of pixels high
      .intPlanes = 1       ' Set to one
      .intBits = 1        ' 24 bits per pixel (RGB)
      .lngCompression = 0  ' No compression
      .lngImageSize = 0 ' Can be set to zero
      .lngxResolution = 0  ' Set to zero
      .lngyResolution = 0  ' Set to zero
      .lngColorCount = 0   ' Set to zero (no color pallette)
      .lngImportantColors = 0 ' Set to zero
     End With
     
     lngRowSize = ((.bmfi.intBits * .bmfi.lngWidth + 31) \ 32) * 4
     lngPixelArraySize = lngRowSize * .bmfi.lngHeight
     .bmfi.lngImageSize = lngPixelArraySize
 
     .bmfh.lngSize = 62 + lngPixelArraySize

      ReDim .bmct(2) '  Total number of bytes to store color table
      .bmct(1) = 16777215
      .bmct(2) = 0
  
      ReDim .bmbits(lngPixelArraySize) ' Total number of bytes to store padded pixel array
        
      k = 0
      
      For j = MD_count_sc To 1 Step -1  ' rngPicture.Column To rngPicture.Column + rngPicture.Columns.Count - 1
        
        bm_byte = 0
        bitcnt = 0
        
        For i = 1 To MD_count_sc  ' rngPicture.Row + rngPicture.Rows.Count - 1 To rngPicture.Row Step -1
          bitcnt = bitcnt + 1
          bm_byte = lshift(bm_byte, 1)
          
          If Modules_new(j, i) Then
            bm_byte = bm_byte Or 1
          End If
          
          If bitcnt = 8 Then
            k = k + 1
            .bmbits(k) = bm_byte
            bm_byte = 0
            bitcnt = 0
          End If
        Next i ' For each column...
        
        If bitcnt > 0 Then
          For r = bitcnt + 1 To 8
            bm_byte = lshift(bm_byte, 1)
          Next r
          k = k + 1
          .bmbits(k) = bm_byte
        End If
          
        If (k Mod lngRowSize <> 0) Then ' Add padding if required
          For l = k Mod lngRowSize + 1 To lngRowSize
            k = k + 1
            .bmbits(k) = 0
          Next l
        End If
      Next j ' For each row, starting at the bottom and working up...
  
  End With ' Defining bmpFile

  strBMP = ThisWorkbook.Path & "\" & "qrcode.BMP"
    
  Set fs = CreateObject("Scripting.FileSystemObject")
  If fs.FileExists(strBMP) Then
    fs.deleteFile (strBMP)
  End If

  Open strBMP For Binary Access Write As 1 Len = 1
    
  Put 1, 1, bmpFile.bmfh
  Put 1, , bmpFile.bmfi
  Put 1, , bmpFile.bmct
  Put 1, , bmpFile.bmbits

  Close
End Sub

Function lshift(base, cnt)
  Dim base_w As Byte
  Dim i As Integer
  
  base_w = base
  For i = 1 To cnt
    base_w = base_w * 2
  Next i
  lshift = base_w
End Function



Attribute VB_Name = "Module5"


Sub GenerateCardSHK()


  Dim WorkRaw
  WorkRaw = 1
  Dim Reestr As ListObject
  Set Reestr = Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").ListObjects("|fffd||fffd||fffd||fffd||fffd||fffd|")

  If Reestr.ListRows.Count = 0 Then
    MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbInformation: Exit Sub
  End If

  On Error GoTo ErrorHandler
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual

  cnt = 6
  
  ProgressForm.SetProgress 0, ""
  ProgressForm.Show

  Application.DisplayAlerts = False
  Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|").Select
  ActiveWindow.SelectedSheets.Delete
  Application.DisplayAlerts = True
  Sheets.Add After:=ActiveSheet
  ActiveSheet.Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
  
  SbablonCrdDSK = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
  Sheets(SbablonCrdDSK).Visible = True
  Sheets(SbablonCrdDSK).Select
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|.|fffd|. 26.11.2016
  If Worksheets(SbablonCrdDSK).Shapes.Count > 0 Then
    Worksheets(SbablonCrdDSK).DrawingObjects.Select
    Selection.Delete
  End If
  
  Range("B10:V21,Y10:AS21,B31:V42,Y31:AS42,B52:V63,Y52:AS63").Select
  Selection.ClearContents
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Rows("1:63").Select
  Selection.Copy
  Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|").Select
  Range("A1").Select
  Selection.PasteSpecial Paste:=xlPasteColumnWidths, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
  Sheets(SbablonCrdDSK).Select
  
  'StartQR = "ST0001" + CStr(Range("codepage").Value) + "|Name=" + CStr(Range("Name").Value) + "|PersonalAcc=" + CStr(Range("PersonalAcc").Value) + _
  '          "|BankName=" + CStr(Range("BankName").Value) + "|BIC=" + CStr(Range("BIC").Value) + _
   '         "|CorrespAcc=" + CStr(Range("CorrespAcc").Value) + "|PayeeINN=" + CStr(Range("INN").Value) + "|KPP=" + CStr(Range("KPP").Value)
   
   StartQR = "ST00012|Name=" + CStr(Range("Name").Value) + "|PersonalAcc=" + CStr(Range("PersonalAcc").Value) + _
            "|BankName=" + CStr(Range("BankName").Value) + "|BIC=" + CStr(Range("BIC").Value) + _
            "|CorrespAcc=" + CStr(Range("CorrespAcc").Value) + "|PayeeINN=" + CStr(Range("INN").Value)
  
  For y = 1 To Reestr.Range.Rows.Count - 1
  
    Select Case y Mod 6
    Case 1
        clm = 2
        rw = 5
    Case 2
        clm = 25
        rw = 5
    Case 3
        clm = 2
        rw = 26
    Case 4
        clm = 25
        rw = 26
    Case 5
        clm = 2
        rw = 47
    Case 0
        clm = 25
        rw = 47
    End Select
  
    text_plt = StartQR
    For x = 1 To Reestr.ListColumns.Count
        
        Reestr.DataBodyRange(y, x).Font.ColorIndex = 1
        ErrVal = CheckVal(CStr(Reestr.DataBodyRange(y, x).Value), Reestr.ListColumns(x).Name)
        If ErrVal <> "" Then
            Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Activate
            MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| [" + Reestr.ListColumns(x).Name + "]. " + ErrVal + " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!!!")
            Reestr.DataBodyRange(y, x).Select
            Reestr.DataBodyRange(y, x).Font.ColorIndex = 3
            Exit Sub
        End If
    
        Select Case Reestr.ListColumns(x).Name
        Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            Worksheets(SbablonCrdDSK).Cells(rw + 5, clm) = "|fffd||fffd|: " + CStr(Reestr.DataBodyRange(y, x).Value)
        Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            Worksheets(SbablonCrdDSK).Cells(rw + 5, clm) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " + CStr(Reestr.DataBodyRange(y, x).Value)
        Case "|fffd||fffd||fffd||fffd||fffd||fffd|"
            Worksheets(SbablonCrdDSK).Cells(rw + 7, clm) = "|fffd||fffd||fffd||fffd||fffd||fffd|: " + CStr(Format((Reestr.DataBodyRange(y, x).Value), "mmmm yyyy"))
        Case "|fffd||fffd||fffd|"
            Worksheets(SbablonCrdDSK).Cells(rw + 7, clm) = CStr(Reestr.DataBodyRange(y, x).Value)
        Case "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            Worksheets(SbablonCrdDSK).Cells(rw + 7, clm) = CStr(Reestr.DataBodyRange(y, x).Value)
        Case "|fffd||fffd||fffd||fffd||fffd|"
            Worksheets(SbablonCrdDSK).Cells(rw + 9, clm) = "|fffd||fffd||fffd||fffd||fffd|: " + FormatVal(CStr(Reestr.DataBodyRange(y, x).Value), "|fffd||fffd||fffd||fffd||fffd|")
        Case "|fffd||fffd||fffd||fffd||fffd|"
            Worksheets(SbablonCrdDSK).Cells(rw + 12, clm) = CStr(Reestr.DataBodyRange(y, x).Value)
        End Select
    
        QRteg = GetQR_Teg(Reestr.ListColumns(x).Name)
        If QRteg <> "" Then
            If Reestr.ListColumns(x).Name = "|fffd||fffd||fffd||fffd||fffd|" Then
                QRteg = "|" + QRteg + "=" + CStr(Reestr.DataBodyRange(y, x).Value * 100)
            Else
                If Reestr.ListColumns(x).Name = "|fffd||fffd||fffd||fffd||fffd||fffd|" Then
                    QRteg = "|" + QRteg + "=" + CStr(Format((Reestr.DataBodyRange(y, x).Value), "mmyy"))
                Else
                    QRteg = "|" + QRteg + "=" + FormatVal(CStr(Reestr.DataBodyRange(y, x).Value), Reestr.ListColumns(x).Name)
                End If
            End If
            text_plt = text_plt + QRteg
        End If
    Next x
    
    If CStr(Range("DopParShk").Value) <> "" Then
        text_plt = text_plt + "|" + CStr(Range("DopParShk").Value)
    End If
    'text_plt = ChangeTextCharset(text_plt, "Windows-1251", "KOI8-R")

    text_plt = ChangeTextCharset(text_plt, "Windows-1251", "UTF-8")
    make_qr (text_plt)
    
    ActiveSheet.Pictures.Insert(ThisWorkbook.Path & "\" & "qrcode.BMP").Select
    Set fs = CreateObject("Scripting.FileSystemObject")
    fs.deleteFile (ThisWorkbook.Path & "\" & "qrcode.BMP")
      
    ' 26.11.2016 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|.|fffd|.
    Worksheets(SbablonCrdDSK).Shapes(Worksheets(SbablonCrdDSK).Shapes.Count).Left = Worksheets(SbablonCrdDSK).Cells(rw, clm + 14).Left
    Worksheets(SbablonCrdDSK).Shapes(Worksheets(SbablonCrdDSK).Shapes.Count).Top = Worksheets(SbablonCrdDSK).Cells(rw, clm + 14).Top
    
    If y Mod cnt = 0 Then
        DestCeil = "A" + Trim(str(WorkRaw))
        WorkRaw = WorkRaw + 63
        
        Sheets(SbablonCrdDSK).Select
        Rows("1:63").Select
        Selection.Copy
        Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|").Select
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        Range(DestCeil).Select
        Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
            SkipBlanks:=False, Transpose:=False
        '|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Range(DestCeil).Select
        ActiveSheet.Paste
        
        Sheets(SbablonCrdDSK).Select
        Range("B10:V21,Y10:AS21,B31:V42,Y31:AS42,B52:V63,Y52:AS63").Select
        Selection.ClearContents
      
        Worksheets(SbablonCrdDSK).DrawingObjects.Select
        Selection.Delete
        
        ProgressForm.SetProgress y / Reestr.Range.Rows.Count, str(y) + " |fffd||fffd|" + str(Reestr.Range.Rows.Count - 1)
        
    End If
    
    
  Next y

  ProgressForm.SetProgress 1, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

  If y Mod cnt <> 1 Then
    DestCeil = "A" + Trim(str(WorkRaw))
    Sheets(SbablonCrdDSK).Select
    Rows("1:63").Select
    Selection.Copy
    Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|").Select
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Range(DestCeil).Select
    Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False
    '|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Range(DestCeil).Select
    ActiveSheet.Paste
        
    Sheets(SbablonCrdDSK).Select
    Range("B10:V21,Y10:AS21,B31:V42,Y31:AS42,B52:V63,Y52:AS63").Select
    Selection.ClearContents
      
    Worksheets(SbablonCrdDSK).DrawingObjects.Select
    Selection.Delete
      
  End If
  
  Sheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|").Visible = False
  Sheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|").Select
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  With ActiveSheet.PageSetup
    .LeftMargin = Application.InchesToPoints(0.78740157480315)
    .RightMargin = Application.InchesToPoints(0.393700787401575)
    .TopMargin = Application.InchesToPoints(0.354330708661417)
    .BottomMargin = Application.InchesToPoints(0.354330708661417)
    .HeaderMargin = Application.InchesToPoints(0)
    .FooterMargin = Application.InchesToPoints(0)
    .Orientation = xlLandscape
  End With

ErrorHandler:
    'Application.EnableEvents = True
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    ProgressForm.Hide

End Sub




Attribute VB_Name = "Module6"
Private Sub SetFormat(Fld As String)
    Select Case Fld
    Case "|fffd||fffd||fffd||fffd||fffd|"
        Selection.NumberFormat = "@"
        Selection.ColumnWidth = 15
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateTextLength, AlertStyle:=xlValidAlertStop, _
            Operator:=xlBetween, Formula1:="8", Formula2:="11"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .InputMessage = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd|' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 8 |fffd||fffd||fffd| 11 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd|' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 8 |fffd||fffd||fffd| 11 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ShowInput = True
            .ShowError = True
        End With
    Case "|fffd||fffd||fffd|"
        Selection.NumberFormat = "@"
        Selection.ColumnWidth = 30
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateTextLength, AlertStyle:=xlValidAlertStop, _
            Operator:=xlEqual, Formula1:="20"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .InputMessage = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd|' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 20 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd|' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 20 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ShowInput = True
            .ShowError = True
        End With
    Case "|fffd||fffd||fffd||fffd||fffd|"
        Selection.NumberFormat = "@"
        Selection.ColumnWidth = 30
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateTextLength, AlertStyle:=xlValidAlertStop, _
            Operator:=xlBetween, Formula1:="3", Formula2:="50"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .InputMessage = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd|' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| 3 |fffd||fffd| 50 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd|' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| 3 |fffd||fffd| 50 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ShowInput = True
            .ShowError = True
        End With
    Case "|fffd||fffd||fffd|"
        Selection.NumberFormat = "@"
        Selection.ColumnWidth = 30
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateTextLength, AlertStyle:=xlValidAlertStop, _
            Operator:=xlBetween, Formula1:="3", Formula2:="50"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .InputMessage = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd|' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| 3 |fffd||fffd| 50 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd|' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| 3 |fffd||fffd| 50 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ShowInput = True
            .ShowError = True
        End With
    Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        Selection.NumberFormat = "@"
        Selection.ColumnWidth = 15
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateTextLength, AlertStyle:=xlValidAlertStop, _
            Operator:=xlBetween, Formula1:="1", Formula2:="50"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .InputMessage = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| 1 |fffd||fffd| 50 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| 1 |fffd||fffd| 50 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ShowInput = True
            .ShowError = True
        End With
    Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Selection.NumberFormat = "@"
        Selection.ColumnWidth = 15
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateTextLength, AlertStyle:=xlValidAlertStop, _
            Operator:=xlBetween, Formula1:="1", Formula2:="50"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .InputMessage = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| 1 |fffd||fffd| 50 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| 1 |fffd||fffd| 50 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ShowInput = True
            .ShowError = True
        End With
    Case "|fffd||fffd||fffd||fffd||fffd|"
        Selection.NumberFormat = "0.00"
        Selection.ColumnWidth = 15
       ' With Selection.Validation
        '    .Delete
        'End With
        With Selection.Validation
        .Delete
        .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, Operator _
        :=xlGreaterEqual, Formula1:="0.00"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        .InputMessage = "|fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 999999.99 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| .) "
        .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 999999.99 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| .)"
        .ShowInput = True
        .ShowError = True
    End With
    Case "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Selection.NumberFormat = "mm.yy"
        Selection.ColumnWidth = 15
        With Selection.Validation
            .Delete
            .Add Type:=xlValidateDate, AlertStyle:=xlValidAlertStop, Operator:= _
            xlBetween, Formula1:="=EOMONTH(TODAY(),-2)", Formula2:="=EOMONTH(TODAY(),2)"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .InputMessage = _
            "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|.|fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd|. DEL - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .ErrorMessage = _
            "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|.|fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd|"
            .ShowInput = True
            .ShowError = True
        End With
    Case Else
        With Selection.Validation
            .Delete
        End With
    End Select
End Sub

Sub SetShablon()
    Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Activate
    
    On Error GoTo ErrorHandler
    'Application.EnableEvents = False
    Application.ScreenUpdating = 0
    
    Set Reestr = Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").ListObjects("|fffd||fffd||fffd||fffd||fffd||fffd|")
    Do While Reestr.ListRows.Count > 0
        Reestr.ListRows(1).Delete
    Loop
    Do While Reestr.ListColumns.Count > 1
        Reestr.ListColumns(2).Delete
    Loop
    
    Dim arrShbField()
    arrShbField = Range("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Value
    Set SelShb = Range("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Find(Range("Shablon").Value)
    arrSelShbField = Split(arrShbField(SelShb.row - 1, 1), ";")
    
    
    Reestr.HeaderRowRange(1, 1).Value = arrSelShbField(0)
    Range("|fffd||fffd||fffd||fffd||fffd||fffd|[" + arrSelShbField(0) + "]").Select
    SetFormat (arrSelShbField(0))
    
    For i = LBound(arrSelShbField) + 1 To UBound(arrSelShbField)
        Reestr.ListColumns.Add
        Reestr.HeaderRowRange(1, i + 1).Value = arrSelShbField(i)
        Range("|fffd||fffd||fffd||fffd||fffd||fffd|[" + arrSelShbField(i) + "]").Select
        SetFormat (arrSelShbField(i))
    Next
    
    Range("ItogSum").Select
    ActiveCell.FormulaR1C1 = "=SUM(|fffd||fffd||fffd||fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd|])"
    Range("ItogCnt").Select
    ActiveCell.FormulaR1C1 = "=COUNTA(|fffd||fffd||fffd||fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd|])"

ErrorHandler:
    'Application.EnableEvents = True
    Application.ScreenUpdating = 1
    
End Sub
Attribute VB_Name = "Module7"
Function GetQR_Teg(Val As String)
    Select Case Val
    Case "|fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "payerAddress"
    Case "|fffd||fffd||fffd|"
        GetQR_Teg = "LASTNAME"
    Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        GetQR_Teg = "persAcc"
    Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "persAcc"
    Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "contract"
    Case "|fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "Sum"
    Case "|fffd||fffd||fffd|"
        GetQR_Teg = "CBC"
    Case "|fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "OKTMO"
    Case "|fffd||fffd||fffd|"
        GetQR_Teg = "KPP"
    Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "Purpose"
    Case "|fffd||fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "paymPeriod"
    Case "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "CHILDFIO"
    Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "CLASSNUM"
    Case "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "Fiostud"
    Case "|fffd||fffd||fffd| |fffd||fffd||fffd|"
        GetQR_Teg = "PAYERIDTYPE"
    Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
        GetQR_Teg = "PAYERIDNUM"
    Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "lastName"
    Case "|fffd||fffd||fffd|"
        GetQR_Teg = "firstName"
    Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "middleName"
    Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "CHILDKOD"
    Case "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "GroupKod"
    Case "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "Category"
    Case "|fffd||fffd||fffd|"
        GetQR_Teg = "UIN"
    Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "Category"
    Case "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "ServiceName"
    Case "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        GetQR_Teg = "persAcc"
    End Select
End Function
Function Charset(codepage As String) As String

    Select Case codepage
    Case "1"
     Charset = "Windows-1251"
    Case "2"
        Charset = "UTF-8"
    Case "3"
        Charset = "KOI8-R"
    End Select
End Function



Function ChangeTextCharset(ByVal txt$, ByVal DestCharset$, _
                           Optional ByVal SourceCharset$) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|q |fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| txt$,
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DestCharset$ (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: Err.Clear
    With CreateObject("ADODB.Stream")
        .Type = 2: .mode = 3
        If Len(SourceCharset$) Then .Charset = SourceCharset$    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        .Open
        .WriteText txt$
        .Position = 0
        .Charset = DestCharset$ ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ChangeTextCharset = .ReadText
        .Type = 1
        .mode = 3
        .Position = 3
         ChangeTextCharset = .ReadText
        .Close
         
    End With
End Function



Sub generate_document()

codepage = CStr(Range("codepage").Value)
SourceCharset = Charset(CStr(Range("codepage").Value))

 Select Case CStr(Range("typedoc").Value)
    Case "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
       Call GenerateCardSHK
    Case "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-4"
        Call GeneratePD4(codepage, SourceCharset)
  
    End Select

End Sub


Attribute VB_Name = "Module8"
Sub |fffd||fffd||fffd||fffd||fffd||fffd|1()
Attribute |fffd||fffd||fffd||fffd||fffd||fffd|1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' |fffd||fffd||fffd||fffd||fffd||fffd|1 |fffd||fffd||fffd||fffd||fffd||fffd|
'

'
    ActiveSheet.Shapes.Range(Array("LogoPic")).Select
    Selection.ShapeRange.IncrementLeft -0.75
End Sub
Attribute VB_Name = "ProgressForm"
Attribute VB_Base = "0{3C55D13B-AE64-4957-B539-0E96C20968B2}{46EAC623-ABD2-4747-8F6D-7F6514383191}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Public Sub SetProgress(x As Double, Inf As String)
Dim w As Single
    If x < 0 Then x = 0 'Exit Sub '>>>
    If x > 1 Then x = 1 'Exit Sub '>>>
    'w = Me.Width - 4 * Label1.Left
    'Label1.Width = w * x
    Label1.Width = 176 * x
    Label2.Caption = Inf
    Me.Repaint
End Sub


Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Change(ByVal Target As Range)
   'On Error GoTo ErrorHandler
   Target.Select
   If ListObjects("|fffd||fffd||fffd||fffd||fffd||fffd|").Active Then
        Target.Font.ColorIndex = 1
        If Target.Count = 1 Then
            If Not Union(Target, ListObjects("|fffd||fffd||fffd||fffd||fffd||fffd|").HeaderRowRange).Address = ListObjects("|fffd||fffd||fffd||fffd||fffd||fffd|").HeaderRowRange.Address Then
            
                ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                If ListObjects("|fffd||fffd||fffd||fffd||fffd||fffd|").ListColumns(Target.Column).Name = "|fffd||fffd||fffd||fffd||fffd||fffd|" And CStr(Target.Value) = "" Then
                    Target.Value = Now()
                ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| 0.00
                ElseIf ListObjects("|fffd||fffd||fffd||fffd||fffd||fffd|").ListColumns(Target.Column).Name = "|fffd||fffd||fffd||fffd||fffd|" And CStr(Target.Value) = "" Then
                    Target.Value = 0
                End If
            
                ErrVal = CheckVal(Target.Value, ListObjects("|fffd||fffd||fffd||fffd||fffd||fffd|").ListColumns(Target.Column).Name)
                If ErrVal <> "" Then
                    Target.Font.ColorIndex = 3
                    MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| [" + ListObjects("|fffd||fffd||fffd||fffd||fffd||fffd|").ListColumns(Target.Column).Name + "]. " + ErrVal)
                Else
                    Target.Offset(0, 1).Select
                    If Not ListObjects("|fffd||fffd||fffd||fffd||fffd||fffd|").Active Then
                        Target.Offset(1, -(Target.Column - 1)).Select
                        Selection.NumberFormat = "@"
                    End If
                End If
            
            End If
            
        End If
        
   End If
ErrorHandler:
End Sub

Attribute VB_Name = "|fffd||fffd||fffd||fffd|3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
